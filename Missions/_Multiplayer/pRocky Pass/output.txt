// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45624 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 45939 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 9
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 27
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 17
 835: PUSH
 836: LD_INT 7
 838: PUSH
 839: LD_INT 8
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 10
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 12
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea , MZSpecialArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 16
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: LD_INT 15
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 17
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 4
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 22
 921: PUSH
 922: LD_EXP 4
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 23
 935: PUSH
 936: LD_EXP 4
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 13
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 25
 963: PUSH
 964: LD_EXP 4
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 4
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 4
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// if gameType = GameTypeKing then
1009: LD_VAR 0 1
1013: PUSH
1014: LD_INT 3
1016: EQUAL
1017: IFFALSE 1057
// begin mpKingArea := kingArea ;
1019: LD_ADDR_EXP 31
1023: PUSH
1024: LD_INT 16
1026: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1027: LD_ADDR_EXP 32
1031: PUSH
1032: LD_EXP 4
1036: PUSH
1037: LD_INT 8
1039: ARRAY
1040: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1041: LD_ADDR_EXP 34
1045: PUSH
1046: LD_EXP 4
1050: PUSH
1051: LD_INT 10
1053: ARRAY
1054: ST_TO_ADDR
// end else
1055: GO 1081
// begin mpKingArea := 0 ;
1057: LD_ADDR_EXP 31
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// mpPoints := 0 ;
1065: LD_ADDR_EXP 32
1069: PUSH
1070: LD_INT 0
1072: ST_TO_ADDR
// mpEmissions := 0 ;
1073: LD_ADDR_EXP 34
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1081: LD_EXP 4
1085: PUSH
1086: LD_INT 9
1088: ARRAY
1089: IFFALSE 1221
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1091: LD_ADDR_EXP 33
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 2
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 12
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 24
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_INT 12
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 23
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 21
1178: PUSH
1179: LD_INT 1
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 42
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 21
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 42
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1221: LD_ADDR_EXP 14
1225: PUSH
1226: LD_EXP 4
1230: PUSH
1231: LD_INT 11
1233: ARRAY
1234: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1235: LD_ADDR_EXP 20
1239: PUSH
1240: LD_EXP 4
1244: PUSH
1245: LD_INT 12
1247: ARRAY
1248: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1249: LD_ADDR_EXP 24
1253: PUSH
1254: LD_EXP 4
1258: PUSH
1259: LD_INT 13
1261: ARRAY
1262: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1263: LD_ADDR_EXP 30
1267: PUSH
1268: LD_EXP 4
1272: PUSH
1273: LD_INT 14
1275: ARRAY
1276: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1277: LD_ADDR_EXP 28
1281: PUSH
1282: LD_EXP 4
1286: PUSH
1287: LD_INT 15
1289: ARRAY
1290: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1291: LD_ADDR_EXP 26
1295: PUSH
1296: LD_EXP 4
1300: PUSH
1301: LD_INT 18
1303: ARRAY
1304: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1305: LD_ADDR_EXP 18
1309: PUSH
1310: LD_EXP 4
1314: PUSH
1315: LD_INT 21
1317: ARRAY
1318: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1319: LD_ADDR_EXP 29
1323: PUSH
1324: LD_INT 3
1326: PUSH
1327: LD_INT 2
1329: PUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 4
1335: PUSH
1336: LD_INT 6
1338: PUSH
1339: LD_INT 5
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1350: LD_ADDR_VAR 0 8
1354: PUSH
1355: LD_INT 18
1357: PPUSH
1358: LD_INT 2
1360: PPUSH
1361: CALL 45079 0 2
1365: PUSH
1366: LD_INT 19
1368: PPUSH
1369: LD_INT 1
1371: PPUSH
1372: CALL 45079 0 2
1376: PUSH
1377: LD_INT 20
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL 45079 0 2
1387: PUSH
1388: LD_INT 21
1390: PPUSH
1391: LD_INT 3
1393: PPUSH
1394: CALL 45079 0 2
1398: PUSH
1399: LD_INT 22
1401: PPUSH
1402: LD_INT 4
1404: PPUSH
1405: CALL 45079 0 2
1409: PUSH
1410: LD_INT 23
1412: PPUSH
1413: LD_INT 5
1415: PPUSH
1416: CALL 45079 0 2
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1429: LD_ADDR_VAR 0 3
1433: PUSH
1434: DOUBLE
1435: LD_INT 1
1437: DEC
1438: ST_TO_ADDR
1439: LD_VAR 0 8
1443: PPUSH
1444: CALL 4931 0 1
1448: PUSH
1449: FOR_TO
1450: IFFALSE 1554
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1452: LD_ADDR_EXP 19
1456: PUSH
1457: LD_EXP 19
1461: PPUSH
1462: LD_VAR 0 3
1466: PPUSH
1467: LD_VAR 0 8
1471: PUSH
1472: LD_VAR 0 3
1476: ARRAY
1477: PUSH
1478: LD_INT 1
1480: ARRAY
1481: PPUSH
1482: LD_VAR 0 8
1486: PUSH
1487: LD_VAR 0 3
1491: ARRAY
1492: PUSH
1493: LD_INT 3
1495: ARRAY
1496: PPUSH
1497: LD_INT 10
1499: PPUSH
1500: CALL_OW 272
1504: PUSH
1505: LD_VAR 0 8
1509: PUSH
1510: LD_VAR 0 3
1514: ARRAY
1515: PUSH
1516: LD_INT 2
1518: ARRAY
1519: PPUSH
1520: LD_VAR 0 8
1524: PUSH
1525: LD_VAR 0 3
1529: ARRAY
1530: PUSH
1531: LD_INT 3
1533: ARRAY
1534: PPUSH
1535: LD_INT 10
1537: PPUSH
1538: CALL_OW 273
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PPUSH
1547: CALL_OW 1
1551: ST_TO_ADDR
1552: GO 1449
1554: POP
1555: POP
// if hasOil then
1556: LD_VAR 0 5
1560: IFFALSE 1671
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: LD_EXP 4
1571: PUSH
1572: LD_INT 6
1574: ARRAY
1575: PUSH
1576: LD_INT 2
1578: EQUAL
1579: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1580: LD_ADDR_EXP 10
1584: PUSH
1585: LD_INT 24
1587: PPUSH
1588: LD_VAR 0 4
1592: PPUSH
1593: CALL 44912 0 2
1597: PUSH
1598: LD_INT 26
1600: PPUSH
1601: LD_VAR 0 4
1605: PPUSH
1606: CALL 44912 0 2
1610: PUSH
1611: LD_INT 28
1613: PPUSH
1614: LD_VAR 0 4
1618: PPUSH
1619: CALL 44912 0 2
1623: PUSH
1624: LD_INT 30
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL 44912 0 2
1636: PUSH
1637: LD_INT 32
1639: PPUSH
1640: LD_VAR 0 4
1644: PPUSH
1645: CALL 44912 0 2
1649: PUSH
1650: LD_INT 34
1652: PPUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL 44912 0 2
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// end ; if hasSib then
1671: LD_VAR 0 6
1675: IFFALSE 1786
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1677: LD_ADDR_VAR 0 4
1681: PUSH
1682: LD_EXP 4
1686: PUSH
1687: LD_INT 7
1689: ARRAY
1690: PUSH
1691: LD_INT 2
1693: EQUAL
1694: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1695: LD_ADDR_EXP 11
1699: PUSH
1700: LD_INT 25
1702: PPUSH
1703: LD_VAR 0 4
1707: PPUSH
1708: CALL 44912 0 2
1712: PUSH
1713: LD_INT 27
1715: PPUSH
1716: LD_VAR 0 4
1720: PPUSH
1721: CALL 44912 0 2
1725: PUSH
1726: LD_INT 29
1728: PPUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: CALL 44912 0 2
1738: PUSH
1739: LD_INT 31
1741: PPUSH
1742: LD_VAR 0 4
1746: PPUSH
1747: CALL 44912 0 2
1751: PUSH
1752: LD_INT 33
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL 44912 0 2
1764: PUSH
1765: LD_INT 35
1767: PPUSH
1768: LD_VAR 0 4
1772: PPUSH
1773: CALL 44912 0 2
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1786: LD_VAR 0 7
1790: PUSH
1791: LD_INT 1
1793: GREATEREQUAL
1794: IFFALSE 1806
// mpDepots := startPos ;
1796: LD_ADDR_EXP 12
1800: PUSH
1801: LD_VAR 0 8
1805: ST_TO_ADDR
// if baseLevel >= 2 then
1806: LD_VAR 0 7
1810: PUSH
1811: LD_INT 2
1813: GREATEREQUAL
1814: IFFALSE 2129
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1816: LD_ADDR_EXP 15
1820: PUSH
1821: LD_INT 31
1823: PUSH
1824: LD_INT 36
1826: PPUSH
1827: LD_INT 5
1829: PPUSH
1830: CALL 45079 0 2
1834: ADD
1835: PUSH
1836: LD_INT 31
1838: PUSH
1839: LD_INT 37
1841: PPUSH
1842: LD_INT 4
1844: PPUSH
1845: CALL 45079 0 2
1849: ADD
1850: PUSH
1851: LD_INT 4
1853: PUSH
1854: LD_INT 38
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL 45079 0 2
1864: ADD
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 31
1873: PUSH
1874: LD_INT 39
1876: PPUSH
1877: LD_INT 4
1879: PPUSH
1880: CALL 45079 0 2
1884: ADD
1885: PUSH
1886: LD_INT 31
1888: PUSH
1889: LD_INT 40
1891: PPUSH
1892: LD_INT 5
1894: PPUSH
1895: CALL 45079 0 2
1899: ADD
1900: PUSH
1901: LD_INT 4
1903: PUSH
1904: LD_INT 41
1906: PPUSH
1907: LD_INT 4
1909: PPUSH
1910: CALL 45079 0 2
1914: ADD
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 31
1923: PUSH
1924: LD_INT 42
1926: PPUSH
1927: LD_INT 3
1929: PPUSH
1930: CALL 45079 0 2
1934: ADD
1935: PUSH
1936: LD_INT 31
1938: PUSH
1939: LD_INT 43
1941: PPUSH
1942: LD_INT 4
1944: PPUSH
1945: CALL 45079 0 2
1949: ADD
1950: PUSH
1951: LD_INT 4
1953: PUSH
1954: LD_INT 44
1956: PPUSH
1957: LD_INT 3
1959: PPUSH
1960: CALL 45079 0 2
1964: ADD
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 31
1973: PUSH
1974: LD_INT 45
1976: PPUSH
1977: LD_INT 1
1979: PPUSH
1980: CALL 45079 0 2
1984: ADD
1985: PUSH
1986: LD_INT 31
1988: PUSH
1989: LD_INT 46
1991: PPUSH
1992: LD_INT 5
1994: PPUSH
1995: CALL 45079 0 2
1999: ADD
2000: PUSH
2001: LD_INT 4
2003: PUSH
2004: LD_INT 47
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 45079 0 2
2014: ADD
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 31
2023: PUSH
2024: LD_INT 48
2026: PPUSH
2027: LD_INT 2
2029: PPUSH
2030: CALL 45079 0 2
2034: ADD
2035: PUSH
2036: LD_INT 31
2038: PUSH
2039: LD_INT 49
2041: PPUSH
2042: LD_INT 0
2044: PPUSH
2045: CALL 45079 0 2
2049: ADD
2050: PUSH
2051: LD_INT 4
2053: PUSH
2054: LD_INT 50
2056: PPUSH
2057: LD_INT 1
2059: PPUSH
2060: CALL 45079 0 2
2064: ADD
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 31
2073: PUSH
2074: LD_INT 51
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL 45079 0 2
2084: ADD
2085: PUSH
2086: LD_INT 31
2088: PUSH
2089: LD_INT 52
2091: PPUSH
2092: LD_INT 2
2094: PPUSH
2095: CALL 45079 0 2
2099: ADD
2100: PUSH
2101: LD_INT 4
2103: PUSH
2104: LD_INT 53
2106: PPUSH
2107: LD_INT 2
2109: PPUSH
2110: CALL 45079 0 2
2114: ADD
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: ST_TO_ADDR
// end ; end ;
2129: LD_VAR 0 2
2133: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2134: GO 2136
2136: DISABLE
2137: LD_INT 0
2139: PPUSH
2140: PPUSH
2141: PPUSH
2142: PPUSH
2143: PPUSH
2144: PPUSH
2145: PPUSH
2146: PPUSH
// begin if not mpShipments then
2147: LD_EXP 25
2151: NOT
2152: IFFALSE 2156
// exit ;
2154: GO 2721
// case mpShipments of 1 :
2156: LD_EXP 25
2160: PUSH
2161: LD_INT 1
2163: DOUBLE
2164: EQUAL
2165: IFTRUE 2169
2167: GO 2204
2169: POP
// begin time := 0 0$30 ;
2170: LD_ADDR_VAR 0 4
2174: PUSH
2175: LD_INT 1050
2177: ST_TO_ADDR
// normalTime := 0 0$30 ;
2178: LD_ADDR_VAR 0 6
2182: PUSH
2183: LD_INT 1050
2185: ST_TO_ADDR
// maxTime := 1 1$20 ;
2186: LD_ADDR_VAR 0 8
2190: PUSH
2191: LD_INT 2800
2193: ST_TO_ADDR
// delayTime := 0 0$5 ;
2194: LD_ADDR_VAR 0 7
2198: PUSH
2199: LD_INT 175
2201: ST_TO_ADDR
// end ; 2 :
2202: GO 2334
2204: LD_INT 2
2206: DOUBLE
2207: EQUAL
2208: IFTRUE 2212
2210: GO 2247
2212: POP
// begin time := 0 0$25 ;
2213: LD_ADDR_VAR 0 4
2217: PUSH
2218: LD_INT 875
2220: ST_TO_ADDR
// normalTime := 0 0$25 ;
2221: LD_ADDR_VAR 0 6
2225: PUSH
2226: LD_INT 875
2228: ST_TO_ADDR
// maxTime := 1 1$10 ;
2229: LD_ADDR_VAR 0 8
2233: PUSH
2234: LD_INT 2450
2236: ST_TO_ADDR
// delayTime := 0 0$4 ;
2237: LD_ADDR_VAR 0 7
2241: PUSH
2242: LD_INT 140
2244: ST_TO_ADDR
// end ; 3 :
2245: GO 2334
2247: LD_INT 3
2249: DOUBLE
2250: EQUAL
2251: IFTRUE 2255
2253: GO 2290
2255: POP
// begin time := 0 0$20 ;
2256: LD_ADDR_VAR 0 4
2260: PUSH
2261: LD_INT 700
2263: ST_TO_ADDR
// normalTime := 0 0$20 ;
2264: LD_ADDR_VAR 0 6
2268: PUSH
2269: LD_INT 700
2271: ST_TO_ADDR
// maxTime := 1 1$00 ;
2272: LD_ADDR_VAR 0 8
2276: PUSH
2277: LD_INT 2100
2279: ST_TO_ADDR
// delayTime := 0 0$3 ;
2280: LD_ADDR_VAR 0 7
2284: PUSH
2285: LD_INT 105
2287: ST_TO_ADDR
// end ; 4 :
2288: GO 2334
2290: LD_INT 4
2292: DOUBLE
2293: EQUAL
2294: IFTRUE 2298
2296: GO 2333
2298: POP
// begin time := 0 0$15 ;
2299: LD_ADDR_VAR 0 4
2303: PUSH
2304: LD_INT 525
2306: ST_TO_ADDR
// normalTime := 0 0$15 ;
2307: LD_ADDR_VAR 0 6
2311: PUSH
2312: LD_INT 525
2314: ST_TO_ADDR
// maxTime := 0 0$55 ;
2315: LD_ADDR_VAR 0 8
2319: PUSH
2320: LD_INT 1925
2322: ST_TO_ADDR
// delayTime := 0 0$2 ;
2323: LD_ADDR_VAR 0 7
2327: PUSH
2328: LD_INT 70
2330: ST_TO_ADDR
// end ; end ;
2331: GO 2334
2333: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2334: LD_ADDR_VAR 0 3
2338: PUSH
2339: LD_INT 7
2341: PUSH
2342: LD_INT 8
2344: PUSH
2345: LD_INT 9
2347: PUSH
2348: LD_INT 10
2350: PUSH
2351: LD_INT 11
2353: PUSH
2354: LD_INT 12
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// areas := [ ] ;
2365: LD_ADDR_VAR 0 5
2369: PUSH
2370: EMPTY
2371: ST_TO_ADDR
// for i := 1 to 8 do
2372: LD_ADDR_VAR 0 1
2376: PUSH
2377: DOUBLE
2378: LD_INT 1
2380: DEC
2381: ST_TO_ADDR
2382: LD_INT 8
2384: PUSH
2385: FOR_TO
2386: IFFALSE 2433
// begin if not mpSidePositions [ i ] then
2388: LD_EXP 5
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: NOT
2399: IFFALSE 2403
// continue ;
2401: GO 2385
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2403: LD_ADDR_VAR 0 5
2407: PUSH
2408: LD_VAR 0 5
2412: PUSH
2413: LD_VAR 0 3
2417: PUSH
2418: LD_EXP 5
2422: PUSH
2423: LD_VAR 0 1
2427: ARRAY
2428: ARRAY
2429: ADD
2430: ST_TO_ADDR
// end ;
2431: GO 2385
2433: POP
2434: POP
// x := 1 ;
2435: LD_ADDR_VAR 0 2
2439: PUSH
2440: LD_INT 1
2442: ST_TO_ADDR
// repeat wait ( time ) ;
2443: LD_VAR 0 4
2447: PPUSH
2448: CALL_OW 67
// x := Inc ( x ) ;
2452: LD_ADDR_VAR 0 2
2456: PUSH
2457: LD_VAR 0 2
2461: PPUSH
2462: CALL 41901 0 1
2466: ST_TO_ADDR
// if x > 5 then
2467: LD_VAR 0 2
2471: PUSH
2472: LD_INT 5
2474: GREATER
2475: IFFALSE 2485
// x := 1 ;
2477: LD_ADDR_VAR 0 2
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// for i in areas do
2485: LD_ADDR_VAR 0 1
2489: PUSH
2490: LD_VAR 0 5
2494: PUSH
2495: FOR_IN
2496: IFFALSE 2535
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2498: LD_VAR 0 1
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL_OW 287
2510: PUSH
2511: LD_INT 20
2513: LESS
2514: IFFALSE 2533
// begin CreateCratesArea ( x , i , true ) ;
2516: LD_VAR 0 2
2520: PPUSH
2521: LD_VAR 0 1
2525: PPUSH
2526: LD_INT 1
2528: PPUSH
2529: CALL_OW 55
// end ; end ;
2533: GO 2495
2535: POP
2536: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 100 then
2537: LD_INT 14
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: CALL_OW 287
2547: PUSH
2548: LD_INT 100
2550: LESS
2551: IFFALSE 2595
// for i := 1 to Count ( areas ) do
2553: LD_ADDR_VAR 0 1
2557: PUSH
2558: DOUBLE
2559: LD_INT 1
2561: DEC
2562: ST_TO_ADDR
2563: LD_VAR 0 5
2567: PPUSH
2568: CALL 4931 0 1
2572: PUSH
2573: FOR_TO
2574: IFFALSE 2593
// CreateCratesArea ( x , MZBaseArea , true ) ;
2576: LD_VAR 0 2
2580: PPUSH
2581: LD_INT 14
2583: PPUSH
2584: LD_INT 1
2586: PPUSH
2587: CALL_OW 55
2591: GO 2573
2593: POP
2594: POP
// if GetResourceArea ( MZSpecialArea , mat_cans ) = 0 then
2595: LD_INT 15
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 287
2605: PUSH
2606: LD_INT 0
2608: EQUAL
2609: IFFALSE 2648
// begin for i := 1 to 3 do
2611: LD_ADDR_VAR 0 1
2615: PUSH
2616: DOUBLE
2617: LD_INT 1
2619: DEC
2620: ST_TO_ADDR
2621: LD_INT 3
2623: PUSH
2624: FOR_TO
2625: IFFALSE 2644
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2627: LD_VAR 0 2
2631: PPUSH
2632: LD_INT 15
2634: PPUSH
2635: LD_INT 1
2637: PPUSH
2638: CALL_OW 55
2642: GO 2624
2644: POP
2645: POP
// end else
2646: GO 2679
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
2648: LD_INT 15
2650: PPUSH
2651: LD_INT 1
2653: PPUSH
2654: CALL_OW 287
2658: PUSH
2659: LD_INT 30
2661: LESS
2662: IFFALSE 2679
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2664: LD_VAR 0 2
2668: PPUSH
2669: LD_INT 15
2671: PPUSH
2672: LD_INT 1
2674: PPUSH
2675: CALL_OW 55
// time := time + delayTime ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 4
2688: PUSH
2689: LD_VAR 0 7
2693: PLUS
2694: ST_TO_ADDR
// if time > maxTime then
2695: LD_VAR 0 4
2699: PUSH
2700: LD_VAR 0 8
2704: GREATER
2705: IFFALSE 2717
// time := normalTime ;
2707: LD_ADDR_VAR 0 4
2711: PUSH
2712: LD_VAR 0 6
2716: ST_TO_ADDR
// until false ;
2717: LD_INT 0
2719: IFFALSE 2443
// end ; end_of_file
2721: PPOPN 8
2723: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2724: LD_VAR 0 1
2728: PPUSH
2729: CALL 53754 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2733: LD_VAR 0 1
2737: PPUSH
2738: CALL 50461 0 1
// end ;
2742: PPOPN 1
2744: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2745: LD_VAR 0 1
2749: PPUSH
2750: CALL 53771 0 1
// end ;
2754: PPOPN 1
2756: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2757: LD_VAR 0 1
2761: PPUSH
2762: CALL 51064 0 1
2766: PPOPN 1
2768: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2769: LD_VAR 0 1
2773: PPUSH
2774: LD_VAR 0 2
2778: PPUSH
2779: CALL 53812 0 2
2783: PPOPN 2
2785: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2786: LD_VAR 0 1
2790: PPUSH
2791: LD_VAR 0 2
2795: PPUSH
2796: LD_VAR 0 3
2800: PPUSH
2801: CALL 51117 0 3
2805: PPOPN 3
2807: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2808: LD_INT 0
2810: PPUSH
2811: PPUSH
// if exist_mode then
2812: LD_VAR 0 2
2816: IFFALSE 2862
// begin unit := CreateCharacter ( prefix & ident ) ;
2818: LD_ADDR_VAR 0 5
2822: PUSH
2823: LD_VAR 0 3
2827: PUSH
2828: LD_VAR 0 1
2832: STR
2833: PPUSH
2834: CALL_OW 34
2838: ST_TO_ADDR
// if unit then
2839: LD_VAR 0 5
2843: IFFALSE 2860
// DeleteCharacters ( prefix & ident ) ;
2845: LD_VAR 0 3
2849: PUSH
2850: LD_VAR 0 1
2854: STR
2855: PPUSH
2856: CALL_OW 40
// end else
2860: GO 2877
// unit := NewCharacter ( ident ) ;
2862: LD_ADDR_VAR 0 5
2866: PUSH
2867: LD_VAR 0 1
2871: PPUSH
2872: CALL_OW 25
2876: ST_TO_ADDR
// result := unit ;
2877: LD_ADDR_VAR 0 4
2881: PUSH
2882: LD_VAR 0 5
2886: ST_TO_ADDR
// end ;
2887: LD_VAR 0 4
2891: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2892: LD_INT 0
2894: PPUSH
2895: PPUSH
// if not side or not nation then
2896: LD_VAR 0 1
2900: NOT
2901: PUSH
2902: LD_VAR 0 2
2906: NOT
2907: OR
2908: IFFALSE 2912
// exit ;
2910: GO 3680
// case nation of nation_american :
2912: LD_VAR 0 2
2916: PUSH
2917: LD_INT 1
2919: DOUBLE
2920: EQUAL
2921: IFTRUE 2925
2923: GO 3139
2925: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2926: LD_ADDR_VAR 0 4
2930: PUSH
2931: LD_INT 35
2933: PUSH
2934: LD_INT 45
2936: PUSH
2937: LD_INT 46
2939: PUSH
2940: LD_INT 47
2942: PUSH
2943: LD_INT 82
2945: PUSH
2946: LD_INT 83
2948: PUSH
2949: LD_INT 84
2951: PUSH
2952: LD_INT 85
2954: PUSH
2955: LD_INT 86
2957: PUSH
2958: LD_INT 1
2960: PUSH
2961: LD_INT 2
2963: PUSH
2964: LD_INT 6
2966: PUSH
2967: LD_INT 15
2969: PUSH
2970: LD_INT 16
2972: PUSH
2973: LD_INT 7
2975: PUSH
2976: LD_INT 12
2978: PUSH
2979: LD_INT 13
2981: PUSH
2982: LD_INT 10
2984: PUSH
2985: LD_INT 14
2987: PUSH
2988: LD_INT 20
2990: PUSH
2991: LD_INT 21
2993: PUSH
2994: LD_INT 22
2996: PUSH
2997: LD_INT 25
2999: PUSH
3000: LD_INT 32
3002: PUSH
3003: LD_INT 27
3005: PUSH
3006: LD_INT 36
3008: PUSH
3009: LD_INT 69
3011: PUSH
3012: LD_INT 39
3014: PUSH
3015: LD_INT 34
3017: PUSH
3018: LD_INT 40
3020: PUSH
3021: LD_INT 48
3023: PUSH
3024: LD_INT 49
3026: PUSH
3027: LD_INT 50
3029: PUSH
3030: LD_INT 51
3032: PUSH
3033: LD_INT 52
3035: PUSH
3036: LD_INT 53
3038: PUSH
3039: LD_INT 54
3041: PUSH
3042: LD_INT 55
3044: PUSH
3045: LD_INT 56
3047: PUSH
3048: LD_INT 57
3050: PUSH
3051: LD_INT 58
3053: PUSH
3054: LD_INT 59
3056: PUSH
3057: LD_INT 60
3059: PUSH
3060: LD_INT 61
3062: PUSH
3063: LD_INT 62
3065: PUSH
3066: LD_INT 80
3068: PUSH
3069: LD_INT 82
3071: PUSH
3072: LD_INT 83
3074: PUSH
3075: LD_INT 84
3077: PUSH
3078: LD_INT 85
3080: PUSH
3081: LD_INT 86
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: ST_TO_ADDR
3137: GO 3604
3139: LD_INT 2
3141: DOUBLE
3142: EQUAL
3143: IFTRUE 3147
3145: GO 3373
3147: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3148: LD_ADDR_VAR 0 4
3152: PUSH
3153: LD_INT 35
3155: PUSH
3156: LD_INT 45
3158: PUSH
3159: LD_INT 46
3161: PUSH
3162: LD_INT 47
3164: PUSH
3165: LD_INT 82
3167: PUSH
3168: LD_INT 83
3170: PUSH
3171: LD_INT 84
3173: PUSH
3174: LD_INT 85
3176: PUSH
3177: LD_INT 87
3179: PUSH
3180: LD_INT 70
3182: PUSH
3183: LD_INT 1
3185: PUSH
3186: LD_INT 11
3188: PUSH
3189: LD_INT 3
3191: PUSH
3192: LD_INT 4
3194: PUSH
3195: LD_INT 5
3197: PUSH
3198: LD_INT 6
3200: PUSH
3201: LD_INT 15
3203: PUSH
3204: LD_INT 18
3206: PUSH
3207: LD_INT 7
3209: PUSH
3210: LD_INT 17
3212: PUSH
3213: LD_INT 8
3215: PUSH
3216: LD_INT 20
3218: PUSH
3219: LD_INT 21
3221: PUSH
3222: LD_INT 22
3224: PUSH
3225: LD_INT 72
3227: PUSH
3228: LD_INT 26
3230: PUSH
3231: LD_INT 69
3233: PUSH
3234: LD_INT 39
3236: PUSH
3237: LD_INT 40
3239: PUSH
3240: LD_INT 41
3242: PUSH
3243: LD_INT 42
3245: PUSH
3246: LD_INT 43
3248: PUSH
3249: LD_INT 48
3251: PUSH
3252: LD_INT 49
3254: PUSH
3255: LD_INT 50
3257: PUSH
3258: LD_INT 51
3260: PUSH
3261: LD_INT 52
3263: PUSH
3264: LD_INT 53
3266: PUSH
3267: LD_INT 54
3269: PUSH
3270: LD_INT 55
3272: PUSH
3273: LD_INT 56
3275: PUSH
3276: LD_INT 60
3278: PUSH
3279: LD_INT 61
3281: PUSH
3282: LD_INT 62
3284: PUSH
3285: LD_INT 66
3287: PUSH
3288: LD_INT 67
3290: PUSH
3291: LD_INT 68
3293: PUSH
3294: LD_INT 81
3296: PUSH
3297: LD_INT 82
3299: PUSH
3300: LD_INT 83
3302: PUSH
3303: LD_INT 84
3305: PUSH
3306: LD_INT 85
3308: PUSH
3309: LD_INT 87
3311: PUSH
3312: LD_INT 88
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: ST_TO_ADDR
3371: GO 3604
3373: LD_INT 3
3375: DOUBLE
3376: EQUAL
3377: IFTRUE 3381
3379: GO 3603
3381: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3382: LD_ADDR_VAR 0 4
3386: PUSH
3387: LD_INT 46
3389: PUSH
3390: LD_INT 47
3392: PUSH
3393: LD_INT 1
3395: PUSH
3396: LD_INT 2
3398: PUSH
3399: LD_INT 82
3401: PUSH
3402: LD_INT 83
3404: PUSH
3405: LD_INT 84
3407: PUSH
3408: LD_INT 85
3410: PUSH
3411: LD_INT 86
3413: PUSH
3414: LD_INT 11
3416: PUSH
3417: LD_INT 9
3419: PUSH
3420: LD_INT 20
3422: PUSH
3423: LD_INT 19
3425: PUSH
3426: LD_INT 21
3428: PUSH
3429: LD_INT 24
3431: PUSH
3432: LD_INT 22
3434: PUSH
3435: LD_INT 25
3437: PUSH
3438: LD_INT 28
3440: PUSH
3441: LD_INT 29
3443: PUSH
3444: LD_INT 30
3446: PUSH
3447: LD_INT 31
3449: PUSH
3450: LD_INT 37
3452: PUSH
3453: LD_INT 38
3455: PUSH
3456: LD_INT 32
3458: PUSH
3459: LD_INT 27
3461: PUSH
3462: LD_INT 33
3464: PUSH
3465: LD_INT 69
3467: PUSH
3468: LD_INT 39
3470: PUSH
3471: LD_INT 34
3473: PUSH
3474: LD_INT 40
3476: PUSH
3477: LD_INT 71
3479: PUSH
3480: LD_INT 23
3482: PUSH
3483: LD_INT 44
3485: PUSH
3486: LD_INT 48
3488: PUSH
3489: LD_INT 49
3491: PUSH
3492: LD_INT 50
3494: PUSH
3495: LD_INT 51
3497: PUSH
3498: LD_INT 52
3500: PUSH
3501: LD_INT 53
3503: PUSH
3504: LD_INT 54
3506: PUSH
3507: LD_INT 55
3509: PUSH
3510: LD_INT 56
3512: PUSH
3513: LD_INT 57
3515: PUSH
3516: LD_INT 58
3518: PUSH
3519: LD_INT 59
3521: PUSH
3522: LD_INT 63
3524: PUSH
3525: LD_INT 64
3527: PUSH
3528: LD_INT 65
3530: PUSH
3531: LD_INT 82
3533: PUSH
3534: LD_INT 83
3536: PUSH
3537: LD_INT 84
3539: PUSH
3540: LD_INT 85
3542: PUSH
3543: LD_INT 86
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: ST_TO_ADDR
3601: GO 3604
3603: POP
// if state > - 1 and state < 3 then
3604: LD_VAR 0 3
3608: PUSH
3609: LD_INT 1
3611: NEG
3612: GREATER
3613: PUSH
3614: LD_VAR 0 3
3618: PUSH
3619: LD_INT 3
3621: LESS
3622: AND
3623: IFFALSE 3680
// for i in result do
3625: LD_ADDR_VAR 0 5
3629: PUSH
3630: LD_VAR 0 4
3634: PUSH
3635: FOR_IN
3636: IFFALSE 3678
// if GetTech ( i , side ) <> state then
3638: LD_VAR 0 5
3642: PPUSH
3643: LD_VAR 0 1
3647: PPUSH
3648: CALL_OW 321
3652: PUSH
3653: LD_VAR 0 3
3657: NONEQUAL
3658: IFFALSE 3676
// result := result diff i ;
3660: LD_ADDR_VAR 0 4
3664: PUSH
3665: LD_VAR 0 4
3669: PUSH
3670: LD_VAR 0 5
3674: DIFF
3675: ST_TO_ADDR
3676: GO 3635
3678: POP
3679: POP
// end ;
3680: LD_VAR 0 4
3684: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3685: LD_INT 0
3687: PPUSH
3688: PPUSH
3689: PPUSH
// result := true ;
3690: LD_ADDR_VAR 0 3
3694: PUSH
3695: LD_INT 1
3697: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3698: LD_ADDR_VAR 0 5
3702: PUSH
3703: LD_VAR 0 2
3707: PPUSH
3708: CALL_OW 480
3712: ST_TO_ADDR
// if not tmp then
3713: LD_VAR 0 5
3717: NOT
3718: IFFALSE 3722
// exit ;
3720: GO 3771
// for i in tmp do
3722: LD_ADDR_VAR 0 4
3726: PUSH
3727: LD_VAR 0 5
3731: PUSH
3732: FOR_IN
3733: IFFALSE 3769
// if GetTech ( i , side ) <> state_researched then
3735: LD_VAR 0 4
3739: PPUSH
3740: LD_VAR 0 1
3744: PPUSH
3745: CALL_OW 321
3749: PUSH
3750: LD_INT 2
3752: NONEQUAL
3753: IFFALSE 3767
// begin result := false ;
3755: LD_ADDR_VAR 0 3
3759: PUSH
3760: LD_INT 0
3762: ST_TO_ADDR
// exit ;
3763: POP
3764: POP
3765: GO 3771
// end ;
3767: GO 3732
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 3
3775: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3776: LD_INT 0
3778: PPUSH
3779: PPUSH
3780: PPUSH
3781: PPUSH
3782: PPUSH
3783: PPUSH
3784: PPUSH
3785: PPUSH
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3791: LD_VAR 0 1
3795: NOT
3796: PUSH
3797: LD_VAR 0 1
3801: PPUSH
3802: CALL_OW 257
3806: PUSH
3807: LD_INT 9
3809: NONEQUAL
3810: OR
3811: IFFALSE 3815
// exit ;
3813: GO 4388
// side := GetSide ( unit ) ;
3815: LD_ADDR_VAR 0 9
3819: PUSH
3820: LD_VAR 0 1
3824: PPUSH
3825: CALL_OW 255
3829: ST_TO_ADDR
// tech_space := tech_spacanom ;
3830: LD_ADDR_VAR 0 12
3834: PUSH
3835: LD_INT 29
3837: ST_TO_ADDR
// tech_time := tech_taurad ;
3838: LD_ADDR_VAR 0 13
3842: PUSH
3843: LD_INT 28
3845: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3846: LD_ADDR_VAR 0 11
3850: PUSH
3851: LD_VAR 0 1
3855: PPUSH
3856: CALL_OW 310
3860: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3861: LD_VAR 0 11
3865: PPUSH
3866: CALL_OW 247
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3878
// exit ;
3876: GO 4388
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3878: LD_ADDR_VAR 0 8
3882: PUSH
3883: LD_INT 81
3885: PUSH
3886: LD_VAR 0 9
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: LD_INT 3
3897: PUSH
3898: LD_INT 21
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: PPUSH
3916: CALL_OW 69
3920: ST_TO_ADDR
// if not tmp then
3921: LD_VAR 0 8
3925: NOT
3926: IFFALSE 3930
// exit ;
3928: GO 4388
// if in_unit then
3930: LD_VAR 0 11
3934: IFFALSE 3958
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3936: LD_ADDR_VAR 0 10
3940: PUSH
3941: LD_VAR 0 8
3945: PPUSH
3946: LD_VAR 0 11
3950: PPUSH
3951: CALL_OW 74
3955: ST_TO_ADDR
3956: GO 3978
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3958: LD_ADDR_VAR 0 10
3962: PUSH
3963: LD_VAR 0 8
3967: PPUSH
3968: LD_VAR 0 1
3972: PPUSH
3973: CALL_OW 74
3977: ST_TO_ADDR
// if not enemy then
3978: LD_VAR 0 10
3982: NOT
3983: IFFALSE 3987
// exit ;
3985: GO 4388
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3987: LD_VAR 0 11
3991: PUSH
3992: LD_VAR 0 11
3996: PPUSH
3997: LD_VAR 0 10
4001: PPUSH
4002: CALL_OW 296
4006: PUSH
4007: LD_INT 13
4009: GREATER
4010: AND
4011: PUSH
4012: LD_VAR 0 1
4016: PPUSH
4017: LD_VAR 0 10
4021: PPUSH
4022: CALL_OW 296
4026: PUSH
4027: LD_INT 12
4029: GREATER
4030: OR
4031: IFFALSE 4035
// exit ;
4033: GO 4388
// missile := [ 1 ] ;
4035: LD_ADDR_VAR 0 14
4039: PUSH
4040: LD_INT 1
4042: PUSH
4043: EMPTY
4044: LIST
4045: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4046: LD_VAR 0 9
4050: PPUSH
4051: LD_VAR 0 12
4055: PPUSH
4056: CALL_OW 325
4060: IFFALSE 4089
// missile := Replace ( missile , missile + 1 , 2 ) ;
4062: LD_ADDR_VAR 0 14
4066: PUSH
4067: LD_VAR 0 14
4071: PPUSH
4072: LD_VAR 0 14
4076: PUSH
4077: LD_INT 1
4079: PLUS
4080: PPUSH
4081: LD_INT 2
4083: PPUSH
4084: CALL_OW 1
4088: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4089: LD_VAR 0 9
4093: PPUSH
4094: LD_VAR 0 13
4098: PPUSH
4099: CALL_OW 325
4103: PUSH
4104: LD_VAR 0 10
4108: PPUSH
4109: CALL_OW 255
4113: PPUSH
4114: LD_VAR 0 13
4118: PPUSH
4119: CALL_OW 325
4123: NOT
4124: AND
4125: IFFALSE 4154
// missile := Replace ( missile , missile + 1 , 3 ) ;
4127: LD_ADDR_VAR 0 14
4131: PUSH
4132: LD_VAR 0 14
4136: PPUSH
4137: LD_VAR 0 14
4141: PUSH
4142: LD_INT 1
4144: PLUS
4145: PPUSH
4146: LD_INT 3
4148: PPUSH
4149: CALL_OW 1
4153: ST_TO_ADDR
// if missile < 2 then
4154: LD_VAR 0 14
4158: PUSH
4159: LD_INT 2
4161: LESS
4162: IFFALSE 4166
// exit ;
4164: GO 4388
// x := GetX ( enemy ) ;
4166: LD_ADDR_VAR 0 4
4170: PUSH
4171: LD_VAR 0 10
4175: PPUSH
4176: CALL_OW 250
4180: ST_TO_ADDR
// y := GetY ( enemy ) ;
4181: LD_ADDR_VAR 0 5
4185: PUSH
4186: LD_VAR 0 10
4190: PPUSH
4191: CALL_OW 251
4195: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4196: LD_ADDR_VAR 0 6
4200: PUSH
4201: LD_VAR 0 4
4205: PUSH
4206: LD_INT 1
4208: NEG
4209: PPUSH
4210: LD_INT 1
4212: PPUSH
4213: CALL_OW 12
4217: PLUS
4218: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4219: LD_ADDR_VAR 0 7
4223: PUSH
4224: LD_VAR 0 5
4228: PUSH
4229: LD_INT 1
4231: NEG
4232: PPUSH
4233: LD_INT 1
4235: PPUSH
4236: CALL_OW 12
4240: PLUS
4241: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4242: LD_VAR 0 6
4246: PPUSH
4247: LD_VAR 0 7
4251: PPUSH
4252: CALL_OW 488
4256: NOT
4257: IFFALSE 4279
// begin _x := x ;
4259: LD_ADDR_VAR 0 6
4263: PUSH
4264: LD_VAR 0 4
4268: ST_TO_ADDR
// _y := y ;
4269: LD_ADDR_VAR 0 7
4273: PUSH
4274: LD_VAR 0 5
4278: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4279: LD_ADDR_VAR 0 3
4283: PUSH
4284: LD_INT 1
4286: PPUSH
4287: LD_VAR 0 14
4291: PPUSH
4292: CALL_OW 12
4296: ST_TO_ADDR
// case i of 1 :
4297: LD_VAR 0 3
4301: PUSH
4302: LD_INT 1
4304: DOUBLE
4305: EQUAL
4306: IFTRUE 4310
4308: GO 4327
4310: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4311: LD_VAR 0 1
4315: PPUSH
4316: LD_VAR 0 10
4320: PPUSH
4321: CALL_OW 115
4325: GO 4388
4327: LD_INT 2
4329: DOUBLE
4330: EQUAL
4331: IFTRUE 4335
4333: GO 4357
4335: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4336: LD_VAR 0 1
4340: PPUSH
4341: LD_VAR 0 6
4345: PPUSH
4346: LD_VAR 0 7
4350: PPUSH
4351: CALL_OW 153
4355: GO 4388
4357: LD_INT 3
4359: DOUBLE
4360: EQUAL
4361: IFTRUE 4365
4363: GO 4387
4365: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4366: LD_VAR 0 1
4370: PPUSH
4371: LD_VAR 0 6
4375: PPUSH
4376: LD_VAR 0 7
4380: PPUSH
4381: CALL_OW 154
4385: GO 4388
4387: POP
// end ;
4388: LD_VAR 0 2
4392: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4393: LD_INT 0
4395: PPUSH
4396: PPUSH
4397: PPUSH
4398: PPUSH
4399: PPUSH
4400: PPUSH
// if not unit or not building then
4401: LD_VAR 0 1
4405: NOT
4406: PUSH
4407: LD_VAR 0 2
4411: NOT
4412: OR
4413: IFFALSE 4417
// exit ;
4415: GO 4575
// x := GetX ( building ) ;
4417: LD_ADDR_VAR 0 5
4421: PUSH
4422: LD_VAR 0 2
4426: PPUSH
4427: CALL_OW 250
4431: ST_TO_ADDR
// y := GetY ( building ) ;
4432: LD_ADDR_VAR 0 6
4436: PUSH
4437: LD_VAR 0 2
4441: PPUSH
4442: CALL_OW 251
4446: ST_TO_ADDR
// for i = 0 to 5 do
4447: LD_ADDR_VAR 0 4
4451: PUSH
4452: DOUBLE
4453: LD_INT 0
4455: DEC
4456: ST_TO_ADDR
4457: LD_INT 5
4459: PUSH
4460: FOR_TO
4461: IFFALSE 4573
// begin _x := ShiftX ( x , i , 3 ) ;
4463: LD_ADDR_VAR 0 7
4467: PUSH
4468: LD_VAR 0 5
4472: PPUSH
4473: LD_VAR 0 4
4477: PPUSH
4478: LD_INT 3
4480: PPUSH
4481: CALL_OW 272
4485: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4486: LD_ADDR_VAR 0 8
4490: PUSH
4491: LD_VAR 0 6
4495: PPUSH
4496: LD_VAR 0 4
4500: PPUSH
4501: LD_INT 3
4503: PPUSH
4504: CALL_OW 273
4508: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4509: LD_VAR 0 7
4513: PPUSH
4514: LD_VAR 0 8
4518: PPUSH
4519: CALL_OW 488
4523: NOT
4524: IFFALSE 4528
// continue ;
4526: GO 4460
// if HexInfo ( _x , _y ) = 0 then
4528: LD_VAR 0 7
4532: PPUSH
4533: LD_VAR 0 8
4537: PPUSH
4538: CALL_OW 428
4542: PUSH
4543: LD_INT 0
4545: EQUAL
4546: IFFALSE 4571
// begin ComMoveXY ( unit , _x , _y ) ;
4548: LD_VAR 0 1
4552: PPUSH
4553: LD_VAR 0 7
4557: PPUSH
4558: LD_VAR 0 8
4562: PPUSH
4563: CALL_OW 111
// exit ;
4567: POP
4568: POP
4569: GO 4575
// end ; end ;
4571: GO 4460
4573: POP
4574: POP
// end ;
4575: LD_VAR 0 3
4579: RET
// export function ScanBase ( side , base_area ) ; begin
4580: LD_INT 0
4582: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4583: LD_ADDR_VAR 0 3
4587: PUSH
4588: LD_VAR 0 2
4592: PPUSH
4593: LD_INT 81
4595: PUSH
4596: LD_VAR 0 1
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PPUSH
4605: CALL_OW 70
4609: ST_TO_ADDR
// end ;
4610: LD_VAR 0 3
4614: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4615: LD_INT 0
4617: PPUSH
4618: PPUSH
4619: PPUSH
4620: PPUSH
// result := false ;
4621: LD_ADDR_VAR 0 2
4625: PUSH
4626: LD_INT 0
4628: ST_TO_ADDR
// side := GetSide ( unit ) ;
4629: LD_ADDR_VAR 0 3
4633: PUSH
4634: LD_VAR 0 1
4638: PPUSH
4639: CALL_OW 255
4643: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4644: LD_ADDR_VAR 0 4
4648: PUSH
4649: LD_VAR 0 1
4653: PPUSH
4654: CALL_OW 248
4658: ST_TO_ADDR
// case nat of 1 :
4659: LD_VAR 0 4
4663: PUSH
4664: LD_INT 1
4666: DOUBLE
4667: EQUAL
4668: IFTRUE 4672
4670: GO 4683
4672: POP
// tech := tech_lassight ; 2 :
4673: LD_ADDR_VAR 0 5
4677: PUSH
4678: LD_INT 12
4680: ST_TO_ADDR
4681: GO 4722
4683: LD_INT 2
4685: DOUBLE
4686: EQUAL
4687: IFTRUE 4691
4689: GO 4702
4691: POP
// tech := tech_mortar ; 3 :
4692: LD_ADDR_VAR 0 5
4696: PUSH
4697: LD_INT 41
4699: ST_TO_ADDR
4700: GO 4722
4702: LD_INT 3
4704: DOUBLE
4705: EQUAL
4706: IFTRUE 4710
4708: GO 4721
4710: POP
// tech := tech_bazooka ; end ;
4711: LD_ADDR_VAR 0 5
4715: PUSH
4716: LD_INT 44
4718: ST_TO_ADDR
4719: GO 4722
4721: POP
// if Researched ( side , tech ) then
4722: LD_VAR 0 3
4726: PPUSH
4727: LD_VAR 0 5
4731: PPUSH
4732: CALL_OW 325
4736: IFFALSE 4763
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4738: LD_ADDR_VAR 0 2
4742: PUSH
4743: LD_INT 5
4745: PUSH
4746: LD_INT 8
4748: PUSH
4749: LD_INT 9
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: LIST
4756: PUSH
4757: LD_VAR 0 4
4761: ARRAY
4762: ST_TO_ADDR
// end ;
4763: LD_VAR 0 2
4767: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4768: LD_INT 0
4770: PPUSH
4771: PPUSH
4772: PPUSH
// if not mines then
4773: LD_VAR 0 2
4777: NOT
4778: IFFALSE 4782
// exit ;
4780: GO 4926
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4782: LD_ADDR_VAR 0 5
4786: PUSH
4787: LD_INT 81
4789: PUSH
4790: LD_VAR 0 1
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 3
4801: PUSH
4802: LD_INT 21
4804: PUSH
4805: LD_INT 3
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: PPUSH
4820: CALL_OW 69
4824: ST_TO_ADDR
// for i in mines do
4825: LD_ADDR_VAR 0 4
4829: PUSH
4830: LD_VAR 0 2
4834: PUSH
4835: FOR_IN
4836: IFFALSE 4924
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4838: LD_VAR 0 4
4842: PUSH
4843: LD_INT 1
4845: ARRAY
4846: PPUSH
4847: LD_VAR 0 4
4851: PUSH
4852: LD_INT 2
4854: ARRAY
4855: PPUSH
4856: CALL_OW 458
4860: NOT
4861: IFFALSE 4865
// continue ;
4863: GO 4835
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4865: LD_VAR 0 4
4869: PUSH
4870: LD_INT 1
4872: ARRAY
4873: PPUSH
4874: LD_VAR 0 4
4878: PUSH
4879: LD_INT 2
4881: ARRAY
4882: PPUSH
4883: CALL_OW 428
4887: PUSH
4888: LD_VAR 0 5
4892: IN
4893: IFFALSE 4922
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4895: LD_VAR 0 4
4899: PUSH
4900: LD_INT 1
4902: ARRAY
4903: PPUSH
4904: LD_VAR 0 4
4908: PUSH
4909: LD_INT 2
4911: ARRAY
4912: PPUSH
4913: LD_VAR 0 1
4917: PPUSH
4918: CALL_OW 456
// end ;
4922: GO 4835
4924: POP
4925: POP
// end ;
4926: LD_VAR 0 3
4930: RET
// export function Count ( array ) ; begin
4931: LD_INT 0
4933: PPUSH
// result := array + 0 ;
4934: LD_ADDR_VAR 0 2
4938: PUSH
4939: LD_VAR 0 1
4943: PUSH
4944: LD_INT 0
4946: PLUS
4947: ST_TO_ADDR
// end ;
4948: LD_VAR 0 2
4952: RET
// export function IsEmpty ( building ) ; begin
4953: LD_INT 0
4955: PPUSH
// if not building then
4956: LD_VAR 0 1
4960: NOT
4961: IFFALSE 4965
// exit ;
4963: GO 5008
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4965: LD_ADDR_VAR 0 2
4969: PUSH
4970: LD_VAR 0 1
4974: PUSH
4975: LD_INT 22
4977: PUSH
4978: LD_VAR 0 1
4982: PPUSH
4983: CALL_OW 255
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 58
4994: PUSH
4995: EMPTY
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 69
5006: IN
5007: ST_TO_ADDR
// end ;
5008: LD_VAR 0 2
5012: RET
// export function IsNotFull ( building ) ; var places ; begin
5013: LD_INT 0
5015: PPUSH
5016: PPUSH
// if not building then
5017: LD_VAR 0 1
5021: NOT
5022: IFFALSE 5026
// exit ;
5024: GO 5054
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5026: LD_ADDR_VAR 0 2
5030: PUSH
5031: LD_VAR 0 1
5035: PPUSH
5036: LD_INT 3
5038: PUSH
5039: LD_INT 62
5041: PUSH
5042: EMPTY
5043: LIST
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PPUSH
5049: CALL_OW 72
5053: ST_TO_ADDR
// end ;
5054: LD_VAR 0 2
5058: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5059: LD_INT 0
5061: PPUSH
5062: PPUSH
5063: PPUSH
5064: PPUSH
// tmp := [ ] ;
5065: LD_ADDR_VAR 0 3
5069: PUSH
5070: EMPTY
5071: ST_TO_ADDR
// list := [ ] ;
5072: LD_ADDR_VAR 0 5
5076: PUSH
5077: EMPTY
5078: ST_TO_ADDR
// for i = 16 to 25 do
5079: LD_ADDR_VAR 0 4
5083: PUSH
5084: DOUBLE
5085: LD_INT 16
5087: DEC
5088: ST_TO_ADDR
5089: LD_INT 25
5091: PUSH
5092: FOR_TO
5093: IFFALSE 5166
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5095: LD_ADDR_VAR 0 3
5099: PUSH
5100: LD_VAR 0 3
5104: PUSH
5105: LD_INT 22
5107: PUSH
5108: LD_VAR 0 1
5112: PPUSH
5113: CALL_OW 255
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PUSH
5122: LD_INT 91
5124: PUSH
5125: LD_VAR 0 1
5129: PUSH
5130: LD_INT 6
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 30
5140: PUSH
5141: LD_VAR 0 4
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: LIST
5154: PUSH
5155: EMPTY
5156: LIST
5157: PPUSH
5158: CALL_OW 69
5162: ADD
5163: ST_TO_ADDR
5164: GO 5092
5166: POP
5167: POP
// for i = 1 to tmp do
5168: LD_ADDR_VAR 0 4
5172: PUSH
5173: DOUBLE
5174: LD_INT 1
5176: DEC
5177: ST_TO_ADDR
5178: LD_VAR 0 3
5182: PUSH
5183: FOR_TO
5184: IFFALSE 5272
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5186: LD_ADDR_VAR 0 5
5190: PUSH
5191: LD_VAR 0 5
5195: PUSH
5196: LD_VAR 0 3
5200: PUSH
5201: LD_VAR 0 4
5205: ARRAY
5206: PPUSH
5207: CALL_OW 266
5211: PUSH
5212: LD_VAR 0 3
5216: PUSH
5217: LD_VAR 0 4
5221: ARRAY
5222: PPUSH
5223: CALL_OW 250
5227: PUSH
5228: LD_VAR 0 3
5232: PUSH
5233: LD_VAR 0 4
5237: ARRAY
5238: PPUSH
5239: CALL_OW 251
5243: PUSH
5244: LD_VAR 0 3
5248: PUSH
5249: LD_VAR 0 4
5253: ARRAY
5254: PPUSH
5255: CALL_OW 254
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: PUSH
5266: EMPTY
5267: LIST
5268: ADD
5269: ST_TO_ADDR
5270: GO 5183
5272: POP
5273: POP
// result := list ;
5274: LD_ADDR_VAR 0 2
5278: PUSH
5279: LD_VAR 0 5
5283: ST_TO_ADDR
// end ;
5284: LD_VAR 0 2
5288: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5289: LD_INT 0
5291: PPUSH
5292: PPUSH
5293: PPUSH
5294: PPUSH
5295: PPUSH
5296: PPUSH
5297: PPUSH
// if not factory then
5298: LD_VAR 0 1
5302: NOT
5303: IFFALSE 5307
// exit ;
5305: GO 5900
// if control = control_apeman then
5307: LD_VAR 0 4
5311: PUSH
5312: LD_INT 5
5314: EQUAL
5315: IFFALSE 5424
// begin tmp := UnitsInside ( factory ) ;
5317: LD_ADDR_VAR 0 8
5321: PUSH
5322: LD_VAR 0 1
5326: PPUSH
5327: CALL_OW 313
5331: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5332: LD_VAR 0 8
5336: PPUSH
5337: LD_INT 25
5339: PUSH
5340: LD_INT 12
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PPUSH
5347: CALL_OW 72
5351: NOT
5352: IFFALSE 5362
// control := control_manual ;
5354: LD_ADDR_VAR 0 4
5358: PUSH
5359: LD_INT 1
5361: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5362: LD_ADDR_VAR 0 8
5366: PUSH
5367: LD_VAR 0 1
5371: PPUSH
5372: CALL 5059 0 1
5376: ST_TO_ADDR
// if tmp then
5377: LD_VAR 0 8
5381: IFFALSE 5424
// begin for i in tmp do
5383: LD_ADDR_VAR 0 7
5387: PUSH
5388: LD_VAR 0 8
5392: PUSH
5393: FOR_IN
5394: IFFALSE 5422
// if i [ 1 ] = b_ext_radio then
5396: LD_VAR 0 7
5400: PUSH
5401: LD_INT 1
5403: ARRAY
5404: PUSH
5405: LD_INT 22
5407: EQUAL
5408: IFFALSE 5420
// begin control := control_remote ;
5410: LD_ADDR_VAR 0 4
5414: PUSH
5415: LD_INT 2
5417: ST_TO_ADDR
// break ;
5418: GO 5422
// end ;
5420: GO 5393
5422: POP
5423: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5424: LD_VAR 0 1
5428: PPUSH
5429: LD_VAR 0 2
5433: PPUSH
5434: LD_VAR 0 3
5438: PPUSH
5439: LD_VAR 0 4
5443: PPUSH
5444: LD_VAR 0 5
5448: PPUSH
5449: CALL_OW 448
5453: IFFALSE 5488
// begin result := [ chassis , engine , control , weapon ] ;
5455: LD_ADDR_VAR 0 6
5459: PUSH
5460: LD_VAR 0 2
5464: PUSH
5465: LD_VAR 0 3
5469: PUSH
5470: LD_VAR 0 4
5474: PUSH
5475: LD_VAR 0 5
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: ST_TO_ADDR
// exit ;
5486: GO 5900
// end ; _chassis := AvailableChassisList ( factory ) ;
5488: LD_ADDR_VAR 0 9
5492: PUSH
5493: LD_VAR 0 1
5497: PPUSH
5498: CALL_OW 475
5502: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5503: LD_ADDR_VAR 0 11
5507: PUSH
5508: LD_VAR 0 1
5512: PPUSH
5513: CALL_OW 476
5517: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5518: LD_ADDR_VAR 0 12
5522: PUSH
5523: LD_VAR 0 1
5527: PPUSH
5528: CALL_OW 477
5532: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5533: LD_ADDR_VAR 0 10
5537: PUSH
5538: LD_VAR 0 1
5542: PPUSH
5543: CALL_OW 478
5547: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5548: LD_VAR 0 9
5552: NOT
5553: PUSH
5554: LD_VAR 0 11
5558: NOT
5559: OR
5560: PUSH
5561: LD_VAR 0 12
5565: NOT
5566: OR
5567: PUSH
5568: LD_VAR 0 10
5572: NOT
5573: OR
5574: IFFALSE 5609
// begin result := [ chassis , engine , control , weapon ] ;
5576: LD_ADDR_VAR 0 6
5580: PUSH
5581: LD_VAR 0 2
5585: PUSH
5586: LD_VAR 0 3
5590: PUSH
5591: LD_VAR 0 4
5595: PUSH
5596: LD_VAR 0 5
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: ST_TO_ADDR
// exit ;
5607: GO 5900
// end ; if not chassis in _chassis then
5609: LD_VAR 0 2
5613: PUSH
5614: LD_VAR 0 9
5618: IN
5619: NOT
5620: IFFALSE 5646
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5622: LD_ADDR_VAR 0 2
5626: PUSH
5627: LD_VAR 0 9
5631: PUSH
5632: LD_INT 1
5634: PPUSH
5635: LD_VAR 0 9
5639: PPUSH
5640: CALL_OW 12
5644: ARRAY
5645: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5646: LD_VAR 0 2
5650: PPUSH
5651: LD_VAR 0 3
5655: PPUSH
5656: CALL 5905 0 2
5660: NOT
5661: IFFALSE 5720
// repeat engine := _engine [ 1 ] ;
5663: LD_ADDR_VAR 0 3
5667: PUSH
5668: LD_VAR 0 11
5672: PUSH
5673: LD_INT 1
5675: ARRAY
5676: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5677: LD_ADDR_VAR 0 11
5681: PUSH
5682: LD_VAR 0 11
5686: PPUSH
5687: LD_INT 1
5689: PPUSH
5690: CALL_OW 3
5694: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5695: LD_VAR 0 2
5699: PPUSH
5700: LD_VAR 0 3
5704: PPUSH
5705: CALL 5905 0 2
5709: PUSH
5710: LD_VAR 0 11
5714: PUSH
5715: EMPTY
5716: EQUAL
5717: OR
5718: IFFALSE 5663
// if not control in _control then
5720: LD_VAR 0 4
5724: PUSH
5725: LD_VAR 0 12
5729: IN
5730: NOT
5731: IFFALSE 5757
// control := _control [ rand ( 1 , _control ) ] ;
5733: LD_ADDR_VAR 0 4
5737: PUSH
5738: LD_VAR 0 12
5742: PUSH
5743: LD_INT 1
5745: PPUSH
5746: LD_VAR 0 12
5750: PPUSH
5751: CALL_OW 12
5755: ARRAY
5756: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5757: LD_VAR 0 2
5761: PPUSH
5762: LD_VAR 0 5
5766: PPUSH
5767: CALL 6125 0 2
5771: NOT
5772: IFFALSE 5831
// repeat weapon := _weapon [ 1 ] ;
5774: LD_ADDR_VAR 0 5
5778: PUSH
5779: LD_VAR 0 10
5783: PUSH
5784: LD_INT 1
5786: ARRAY
5787: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5788: LD_ADDR_VAR 0 10
5792: PUSH
5793: LD_VAR 0 10
5797: PPUSH
5798: LD_INT 1
5800: PPUSH
5801: CALL_OW 3
5805: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5806: LD_VAR 0 2
5810: PPUSH
5811: LD_VAR 0 5
5815: PPUSH
5816: CALL 6125 0 2
5820: PUSH
5821: LD_VAR 0 10
5825: PUSH
5826: EMPTY
5827: EQUAL
5828: OR
5829: IFFALSE 5774
// result := [ ] ;
5831: LD_ADDR_VAR 0 6
5835: PUSH
5836: EMPTY
5837: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5838: LD_VAR 0 1
5842: PPUSH
5843: LD_VAR 0 2
5847: PPUSH
5848: LD_VAR 0 3
5852: PPUSH
5853: LD_VAR 0 4
5857: PPUSH
5858: LD_VAR 0 5
5862: PPUSH
5863: CALL_OW 448
5867: IFFALSE 5900
// result := [ chassis , engine , control , weapon ] ;
5869: LD_ADDR_VAR 0 6
5873: PUSH
5874: LD_VAR 0 2
5878: PUSH
5879: LD_VAR 0 3
5883: PUSH
5884: LD_VAR 0 4
5888: PUSH
5889: LD_VAR 0 5
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: ST_TO_ADDR
// end ;
5900: LD_VAR 0 6
5904: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5905: LD_INT 0
5907: PPUSH
// if not chassis or not engine then
5908: LD_VAR 0 1
5912: NOT
5913: PUSH
5914: LD_VAR 0 2
5918: NOT
5919: OR
5920: IFFALSE 5924
// exit ;
5922: GO 6120
// case engine of engine_solar :
5924: LD_VAR 0 2
5928: PUSH
5929: LD_INT 2
5931: DOUBLE
5932: EQUAL
5933: IFTRUE 5937
5935: GO 5975
5937: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5938: LD_ADDR_VAR 0 3
5942: PUSH
5943: LD_INT 11
5945: PUSH
5946: LD_INT 12
5948: PUSH
5949: LD_INT 13
5951: PUSH
5952: LD_INT 14
5954: PUSH
5955: LD_INT 1
5957: PUSH
5958: LD_INT 2
5960: PUSH
5961: LD_INT 3
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: ST_TO_ADDR
5973: GO 6104
5975: LD_INT 1
5977: DOUBLE
5978: EQUAL
5979: IFTRUE 5983
5981: GO 6045
5983: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5984: LD_ADDR_VAR 0 3
5988: PUSH
5989: LD_INT 11
5991: PUSH
5992: LD_INT 12
5994: PUSH
5995: LD_INT 13
5997: PUSH
5998: LD_INT 14
6000: PUSH
6001: LD_INT 1
6003: PUSH
6004: LD_INT 2
6006: PUSH
6007: LD_INT 3
6009: PUSH
6010: LD_INT 4
6012: PUSH
6013: LD_INT 5
6015: PUSH
6016: LD_INT 21
6018: PUSH
6019: LD_INT 23
6021: PUSH
6022: LD_INT 22
6024: PUSH
6025: LD_INT 24
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: ST_TO_ADDR
6043: GO 6104
6045: LD_INT 3
6047: DOUBLE
6048: EQUAL
6049: IFTRUE 6053
6051: GO 6103
6053: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6054: LD_ADDR_VAR 0 3
6058: PUSH
6059: LD_INT 13
6061: PUSH
6062: LD_INT 14
6064: PUSH
6065: LD_INT 2
6067: PUSH
6068: LD_INT 3
6070: PUSH
6071: LD_INT 4
6073: PUSH
6074: LD_INT 5
6076: PUSH
6077: LD_INT 21
6079: PUSH
6080: LD_INT 22
6082: PUSH
6083: LD_INT 23
6085: PUSH
6086: LD_INT 24
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: ST_TO_ADDR
6101: GO 6104
6103: POP
// result := ( chassis in result ) ;
6104: LD_ADDR_VAR 0 3
6108: PUSH
6109: LD_VAR 0 1
6113: PUSH
6114: LD_VAR 0 3
6118: IN
6119: ST_TO_ADDR
// end ;
6120: LD_VAR 0 3
6124: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6125: LD_INT 0
6127: PPUSH
// if not chassis or not weapon then
6128: LD_VAR 0 1
6132: NOT
6133: PUSH
6134: LD_VAR 0 2
6138: NOT
6139: OR
6140: IFFALSE 6144
// exit ;
6142: GO 7204
// case weapon of us_machine_gun :
6144: LD_VAR 0 2
6148: PUSH
6149: LD_INT 2
6151: DOUBLE
6152: EQUAL
6153: IFTRUE 6157
6155: GO 6187
6157: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6158: LD_ADDR_VAR 0 3
6162: PUSH
6163: LD_INT 1
6165: PUSH
6166: LD_INT 2
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: LD_INT 4
6174: PUSH
6175: LD_INT 5
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: ST_TO_ADDR
6185: GO 7188
6187: LD_INT 3
6189: DOUBLE
6190: EQUAL
6191: IFTRUE 6195
6193: GO 6225
6195: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6196: LD_ADDR_VAR 0 3
6200: PUSH
6201: LD_INT 1
6203: PUSH
6204: LD_INT 2
6206: PUSH
6207: LD_INT 3
6209: PUSH
6210: LD_INT 4
6212: PUSH
6213: LD_INT 5
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: LIST
6220: LIST
6221: LIST
6222: ST_TO_ADDR
6223: GO 7188
6225: LD_INT 11
6227: DOUBLE
6228: EQUAL
6229: IFTRUE 6233
6231: GO 6263
6233: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6234: LD_ADDR_VAR 0 3
6238: PUSH
6239: LD_INT 1
6241: PUSH
6242: LD_INT 2
6244: PUSH
6245: LD_INT 3
6247: PUSH
6248: LD_INT 4
6250: PUSH
6251: LD_INT 5
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: ST_TO_ADDR
6261: GO 7188
6263: LD_INT 4
6265: DOUBLE
6266: EQUAL
6267: IFTRUE 6271
6269: GO 6297
6271: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6272: LD_ADDR_VAR 0 3
6276: PUSH
6277: LD_INT 2
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: LD_INT 4
6285: PUSH
6286: LD_INT 5
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: ST_TO_ADDR
6295: GO 7188
6297: LD_INT 5
6299: DOUBLE
6300: EQUAL
6301: IFTRUE 6305
6303: GO 6331
6305: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6306: LD_ADDR_VAR 0 3
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: LD_INT 3
6316: PUSH
6317: LD_INT 4
6319: PUSH
6320: LD_INT 5
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: ST_TO_ADDR
6329: GO 7188
6331: LD_INT 9
6333: DOUBLE
6334: EQUAL
6335: IFTRUE 6339
6337: GO 6365
6339: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: LD_INT 2
6347: PUSH
6348: LD_INT 3
6350: PUSH
6351: LD_INT 4
6353: PUSH
6354: LD_INT 5
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: ST_TO_ADDR
6363: GO 7188
6365: LD_INT 7
6367: DOUBLE
6368: EQUAL
6369: IFTRUE 6373
6371: GO 6399
6373: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6374: LD_ADDR_VAR 0 3
6378: PUSH
6379: LD_INT 2
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: LD_INT 4
6387: PUSH
6388: LD_INT 5
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: ST_TO_ADDR
6397: GO 7188
6399: LD_INT 12
6401: DOUBLE
6402: EQUAL
6403: IFTRUE 6407
6405: GO 6433
6407: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6408: LD_ADDR_VAR 0 3
6412: PUSH
6413: LD_INT 2
6415: PUSH
6416: LD_INT 3
6418: PUSH
6419: LD_INT 4
6421: PUSH
6422: LD_INT 5
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: ST_TO_ADDR
6431: GO 7188
6433: LD_INT 13
6435: DOUBLE
6436: EQUAL
6437: IFTRUE 6441
6439: GO 6467
6441: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6442: LD_ADDR_VAR 0 3
6446: PUSH
6447: LD_INT 2
6449: PUSH
6450: LD_INT 3
6452: PUSH
6453: LD_INT 4
6455: PUSH
6456: LD_INT 5
6458: PUSH
6459: EMPTY
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: ST_TO_ADDR
6465: GO 7188
6467: LD_INT 14
6469: DOUBLE
6470: EQUAL
6471: IFTRUE 6475
6473: GO 6493
6475: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6476: LD_ADDR_VAR 0 3
6480: PUSH
6481: LD_INT 4
6483: PUSH
6484: LD_INT 5
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: ST_TO_ADDR
6491: GO 7188
6493: LD_INT 6
6495: DOUBLE
6496: EQUAL
6497: IFTRUE 6501
6499: GO 6519
6501: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6502: LD_ADDR_VAR 0 3
6506: PUSH
6507: LD_INT 4
6509: PUSH
6510: LD_INT 5
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: ST_TO_ADDR
6517: GO 7188
6519: LD_INT 10
6521: DOUBLE
6522: EQUAL
6523: IFTRUE 6527
6525: GO 6545
6527: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6528: LD_ADDR_VAR 0 3
6532: PUSH
6533: LD_INT 4
6535: PUSH
6536: LD_INT 5
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: ST_TO_ADDR
6543: GO 7188
6545: LD_INT 22
6547: DOUBLE
6548: EQUAL
6549: IFTRUE 6553
6551: GO 6579
6553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6554: LD_ADDR_VAR 0 3
6558: PUSH
6559: LD_INT 11
6561: PUSH
6562: LD_INT 12
6564: PUSH
6565: LD_INT 13
6567: PUSH
6568: LD_INT 14
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: ST_TO_ADDR
6577: GO 7188
6579: LD_INT 23
6581: DOUBLE
6582: EQUAL
6583: IFTRUE 6587
6585: GO 6613
6587: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6588: LD_ADDR_VAR 0 3
6592: PUSH
6593: LD_INT 11
6595: PUSH
6596: LD_INT 12
6598: PUSH
6599: LD_INT 13
6601: PUSH
6602: LD_INT 14
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: ST_TO_ADDR
6611: GO 7188
6613: LD_INT 24
6615: DOUBLE
6616: EQUAL
6617: IFTRUE 6621
6619: GO 6647
6621: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6622: LD_ADDR_VAR 0 3
6626: PUSH
6627: LD_INT 11
6629: PUSH
6630: LD_INT 12
6632: PUSH
6633: LD_INT 13
6635: PUSH
6636: LD_INT 14
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: ST_TO_ADDR
6645: GO 7188
6647: LD_INT 30
6649: DOUBLE
6650: EQUAL
6651: IFTRUE 6655
6653: GO 6681
6655: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6656: LD_ADDR_VAR 0 3
6660: PUSH
6661: LD_INT 11
6663: PUSH
6664: LD_INT 12
6666: PUSH
6667: LD_INT 13
6669: PUSH
6670: LD_INT 14
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: ST_TO_ADDR
6679: GO 7188
6681: LD_INT 25
6683: DOUBLE
6684: EQUAL
6685: IFTRUE 6689
6687: GO 6707
6689: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6690: LD_ADDR_VAR 0 3
6694: PUSH
6695: LD_INT 13
6697: PUSH
6698: LD_INT 14
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: ST_TO_ADDR
6705: GO 7188
6707: LD_INT 27
6709: DOUBLE
6710: EQUAL
6711: IFTRUE 6715
6713: GO 6733
6715: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6716: LD_ADDR_VAR 0 3
6720: PUSH
6721: LD_INT 13
6723: PUSH
6724: LD_INT 14
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: ST_TO_ADDR
6731: GO 7188
6733: LD_INT 92
6735: DOUBLE
6736: EQUAL
6737: IFTRUE 6741
6739: GO 6767
6741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6742: LD_ADDR_VAR 0 3
6746: PUSH
6747: LD_INT 11
6749: PUSH
6750: LD_INT 12
6752: PUSH
6753: LD_INT 13
6755: PUSH
6756: LD_INT 14
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: ST_TO_ADDR
6765: GO 7188
6767: LD_INT 28
6769: DOUBLE
6770: EQUAL
6771: IFTRUE 6775
6773: GO 6793
6775: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6776: LD_ADDR_VAR 0 3
6780: PUSH
6781: LD_INT 13
6783: PUSH
6784: LD_INT 14
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: ST_TO_ADDR
6791: GO 7188
6793: LD_INT 29
6795: DOUBLE
6796: EQUAL
6797: IFTRUE 6801
6799: GO 6819
6801: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6802: LD_ADDR_VAR 0 3
6806: PUSH
6807: LD_INT 13
6809: PUSH
6810: LD_INT 14
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: ST_TO_ADDR
6817: GO 7188
6819: LD_INT 31
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 6845
6827: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6828: LD_ADDR_VAR 0 3
6832: PUSH
6833: LD_INT 13
6835: PUSH
6836: LD_INT 14
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: ST_TO_ADDR
6843: GO 7188
6845: LD_INT 26
6847: DOUBLE
6848: EQUAL
6849: IFTRUE 6853
6851: GO 6871
6853: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6854: LD_ADDR_VAR 0 3
6858: PUSH
6859: LD_INT 13
6861: PUSH
6862: LD_INT 14
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: ST_TO_ADDR
6869: GO 7188
6871: LD_INT 42
6873: DOUBLE
6874: EQUAL
6875: IFTRUE 6879
6877: GO 6905
6879: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6880: LD_ADDR_VAR 0 3
6884: PUSH
6885: LD_INT 21
6887: PUSH
6888: LD_INT 22
6890: PUSH
6891: LD_INT 23
6893: PUSH
6894: LD_INT 24
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: ST_TO_ADDR
6903: GO 7188
6905: LD_INT 43
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 6939
6913: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6914: LD_ADDR_VAR 0 3
6918: PUSH
6919: LD_INT 21
6921: PUSH
6922: LD_INT 22
6924: PUSH
6925: LD_INT 23
6927: PUSH
6928: LD_INT 24
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: ST_TO_ADDR
6937: GO 7188
6939: LD_INT 44
6941: DOUBLE
6942: EQUAL
6943: IFTRUE 6947
6945: GO 6973
6947: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6948: LD_ADDR_VAR 0 3
6952: PUSH
6953: LD_INT 21
6955: PUSH
6956: LD_INT 22
6958: PUSH
6959: LD_INT 23
6961: PUSH
6962: LD_INT 24
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: ST_TO_ADDR
6971: GO 7188
6973: LD_INT 45
6975: DOUBLE
6976: EQUAL
6977: IFTRUE 6981
6979: GO 7007
6981: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6982: LD_ADDR_VAR 0 3
6986: PUSH
6987: LD_INT 21
6989: PUSH
6990: LD_INT 22
6992: PUSH
6993: LD_INT 23
6995: PUSH
6996: LD_INT 24
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: ST_TO_ADDR
7005: GO 7188
7007: LD_INT 49
7009: DOUBLE
7010: EQUAL
7011: IFTRUE 7015
7013: GO 7041
7015: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7016: LD_ADDR_VAR 0 3
7020: PUSH
7021: LD_INT 21
7023: PUSH
7024: LD_INT 22
7026: PUSH
7027: LD_INT 23
7029: PUSH
7030: LD_INT 24
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: ST_TO_ADDR
7039: GO 7188
7041: LD_INT 51
7043: DOUBLE
7044: EQUAL
7045: IFTRUE 7049
7047: GO 7075
7049: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7050: LD_ADDR_VAR 0 3
7054: PUSH
7055: LD_INT 21
7057: PUSH
7058: LD_INT 22
7060: PUSH
7061: LD_INT 23
7063: PUSH
7064: LD_INT 24
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: ST_TO_ADDR
7073: GO 7188
7075: LD_INT 52
7077: DOUBLE
7078: EQUAL
7079: IFTRUE 7083
7081: GO 7109
7083: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7084: LD_ADDR_VAR 0 3
7088: PUSH
7089: LD_INT 21
7091: PUSH
7092: LD_INT 22
7094: PUSH
7095: LD_INT 23
7097: PUSH
7098: LD_INT 24
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: ST_TO_ADDR
7107: GO 7188
7109: LD_INT 53
7111: DOUBLE
7112: EQUAL
7113: IFTRUE 7117
7115: GO 7135
7117: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7118: LD_ADDR_VAR 0 3
7122: PUSH
7123: LD_INT 23
7125: PUSH
7126: LD_INT 24
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: ST_TO_ADDR
7133: GO 7188
7135: LD_INT 46
7137: DOUBLE
7138: EQUAL
7139: IFTRUE 7143
7141: GO 7161
7143: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7144: LD_ADDR_VAR 0 3
7148: PUSH
7149: LD_INT 23
7151: PUSH
7152: LD_INT 24
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: ST_TO_ADDR
7159: GO 7188
7161: LD_INT 47
7163: DOUBLE
7164: EQUAL
7165: IFTRUE 7169
7167: GO 7187
7169: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7170: LD_ADDR_VAR 0 3
7174: PUSH
7175: LD_INT 23
7177: PUSH
7178: LD_INT 24
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: ST_TO_ADDR
7185: GO 7188
7187: POP
// result := ( chassis in result ) ;
7188: LD_ADDR_VAR 0 3
7192: PUSH
7193: LD_VAR 0 1
7197: PUSH
7198: LD_VAR 0 3
7202: IN
7203: ST_TO_ADDR
// end ;
7204: LD_VAR 0 3
7208: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7209: LD_INT 0
7211: PPUSH
7212: PPUSH
7213: PPUSH
7214: PPUSH
7215: PPUSH
7216: PPUSH
7217: PPUSH
// result := array ;
7218: LD_ADDR_VAR 0 5
7222: PUSH
7223: LD_VAR 0 1
7227: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7228: LD_VAR 0 1
7232: NOT
7233: PUSH
7234: LD_VAR 0 2
7238: NOT
7239: OR
7240: PUSH
7241: LD_VAR 0 3
7245: NOT
7246: OR
7247: PUSH
7248: LD_VAR 0 2
7252: PUSH
7253: LD_VAR 0 1
7257: GREATER
7258: OR
7259: PUSH
7260: LD_VAR 0 3
7264: PUSH
7265: LD_VAR 0 1
7269: GREATER
7270: OR
7271: IFFALSE 7275
// exit ;
7273: GO 7571
// if direction then
7275: LD_VAR 0 4
7279: IFFALSE 7343
// begin d := 1 ;
7281: LD_ADDR_VAR 0 9
7285: PUSH
7286: LD_INT 1
7288: ST_TO_ADDR
// if i_from > i_to then
7289: LD_VAR 0 2
7293: PUSH
7294: LD_VAR 0 3
7298: GREATER
7299: IFFALSE 7325
// length := ( array - i_from ) + i_to else
7301: LD_ADDR_VAR 0 11
7305: PUSH
7306: LD_VAR 0 1
7310: PUSH
7311: LD_VAR 0 2
7315: MINUS
7316: PUSH
7317: LD_VAR 0 3
7321: PLUS
7322: ST_TO_ADDR
7323: GO 7341
// length := i_to - i_from ;
7325: LD_ADDR_VAR 0 11
7329: PUSH
7330: LD_VAR 0 3
7334: PUSH
7335: LD_VAR 0 2
7339: MINUS
7340: ST_TO_ADDR
// end else
7341: GO 7404
// begin d := - 1 ;
7343: LD_ADDR_VAR 0 9
7347: PUSH
7348: LD_INT 1
7350: NEG
7351: ST_TO_ADDR
// if i_from > i_to then
7352: LD_VAR 0 2
7356: PUSH
7357: LD_VAR 0 3
7361: GREATER
7362: IFFALSE 7382
// length := i_from - i_to else
7364: LD_ADDR_VAR 0 11
7368: PUSH
7369: LD_VAR 0 2
7373: PUSH
7374: LD_VAR 0 3
7378: MINUS
7379: ST_TO_ADDR
7380: GO 7404
// length := ( array - i_to ) + i_from ;
7382: LD_ADDR_VAR 0 11
7386: PUSH
7387: LD_VAR 0 1
7391: PUSH
7392: LD_VAR 0 3
7396: MINUS
7397: PUSH
7398: LD_VAR 0 2
7402: PLUS
7403: ST_TO_ADDR
// end ; if not length then
7404: LD_VAR 0 11
7408: NOT
7409: IFFALSE 7413
// exit ;
7411: GO 7571
// tmp := array ;
7413: LD_ADDR_VAR 0 10
7417: PUSH
7418: LD_VAR 0 1
7422: ST_TO_ADDR
// for i = 1 to length do
7423: LD_ADDR_VAR 0 6
7427: PUSH
7428: DOUBLE
7429: LD_INT 1
7431: DEC
7432: ST_TO_ADDR
7433: LD_VAR 0 11
7437: PUSH
7438: FOR_TO
7439: IFFALSE 7559
// begin for j = 1 to array do
7441: LD_ADDR_VAR 0 7
7445: PUSH
7446: DOUBLE
7447: LD_INT 1
7449: DEC
7450: ST_TO_ADDR
7451: LD_VAR 0 1
7455: PUSH
7456: FOR_TO
7457: IFFALSE 7545
// begin k := j + d ;
7459: LD_ADDR_VAR 0 8
7463: PUSH
7464: LD_VAR 0 7
7468: PUSH
7469: LD_VAR 0 9
7473: PLUS
7474: ST_TO_ADDR
// if k > array then
7475: LD_VAR 0 8
7479: PUSH
7480: LD_VAR 0 1
7484: GREATER
7485: IFFALSE 7495
// k := 1 ;
7487: LD_ADDR_VAR 0 8
7491: PUSH
7492: LD_INT 1
7494: ST_TO_ADDR
// if not k then
7495: LD_VAR 0 8
7499: NOT
7500: IFFALSE 7512
// k := array ;
7502: LD_ADDR_VAR 0 8
7506: PUSH
7507: LD_VAR 0 1
7511: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7512: LD_ADDR_VAR 0 10
7516: PUSH
7517: LD_VAR 0 10
7521: PPUSH
7522: LD_VAR 0 8
7526: PPUSH
7527: LD_VAR 0 1
7531: PUSH
7532: LD_VAR 0 7
7536: ARRAY
7537: PPUSH
7538: CALL_OW 1
7542: ST_TO_ADDR
// end ;
7543: GO 7456
7545: POP
7546: POP
// array := tmp ;
7547: LD_ADDR_VAR 0 1
7551: PUSH
7552: LD_VAR 0 10
7556: ST_TO_ADDR
// end ;
7557: GO 7438
7559: POP
7560: POP
// result := array ;
7561: LD_ADDR_VAR 0 5
7565: PUSH
7566: LD_VAR 0 1
7570: ST_TO_ADDR
// end ;
7571: LD_VAR 0 5
7575: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7576: LD_INT 0
7578: PPUSH
7579: PPUSH
// result := 0 ;
7580: LD_ADDR_VAR 0 3
7584: PUSH
7585: LD_INT 0
7587: ST_TO_ADDR
// if not array or not value in array then
7588: LD_VAR 0 1
7592: NOT
7593: PUSH
7594: LD_VAR 0 2
7598: PUSH
7599: LD_VAR 0 1
7603: IN
7604: NOT
7605: OR
7606: IFFALSE 7610
// exit ;
7608: GO 7664
// for i = 1 to array do
7610: LD_ADDR_VAR 0 4
7614: PUSH
7615: DOUBLE
7616: LD_INT 1
7618: DEC
7619: ST_TO_ADDR
7620: LD_VAR 0 1
7624: PUSH
7625: FOR_TO
7626: IFFALSE 7662
// if value = array [ i ] then
7628: LD_VAR 0 2
7632: PUSH
7633: LD_VAR 0 1
7637: PUSH
7638: LD_VAR 0 4
7642: ARRAY
7643: EQUAL
7644: IFFALSE 7660
// begin result := i ;
7646: LD_ADDR_VAR 0 3
7650: PUSH
7651: LD_VAR 0 4
7655: ST_TO_ADDR
// exit ;
7656: POP
7657: POP
7658: GO 7664
// end ;
7660: GO 7625
7662: POP
7663: POP
// end ;
7664: LD_VAR 0 3
7668: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7669: LD_INT 0
7671: PPUSH
// vc_chassis := chassis ;
7672: LD_ADDR_OWVAR 37
7676: PUSH
7677: LD_VAR 0 1
7681: ST_TO_ADDR
// vc_engine := engine ;
7682: LD_ADDR_OWVAR 39
7686: PUSH
7687: LD_VAR 0 2
7691: ST_TO_ADDR
// vc_control := control ;
7692: LD_ADDR_OWVAR 38
7696: PUSH
7697: LD_VAR 0 3
7701: ST_TO_ADDR
// vc_weapon := weapon ;
7702: LD_ADDR_OWVAR 40
7706: PUSH
7707: LD_VAR 0 4
7711: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7712: LD_ADDR_OWVAR 41
7716: PUSH
7717: LD_VAR 0 5
7721: ST_TO_ADDR
// end ;
7722: LD_VAR 0 6
7726: RET
// export function WantPlant ( unit ) ; var task ; begin
7727: LD_INT 0
7729: PPUSH
7730: PPUSH
// result := false ;
7731: LD_ADDR_VAR 0 2
7735: PUSH
7736: LD_INT 0
7738: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7739: LD_ADDR_VAR 0 3
7743: PUSH
7744: LD_VAR 0 1
7748: PPUSH
7749: CALL_OW 437
7753: ST_TO_ADDR
// if task then
7754: LD_VAR 0 3
7758: IFFALSE 7786
// if task [ 1 ] [ 1 ] = p then
7760: LD_VAR 0 3
7764: PUSH
7765: LD_INT 1
7767: ARRAY
7768: PUSH
7769: LD_INT 1
7771: ARRAY
7772: PUSH
7773: LD_STRING p
7775: EQUAL
7776: IFFALSE 7786
// result := true ;
7778: LD_ADDR_VAR 0 2
7782: PUSH
7783: LD_INT 1
7785: ST_TO_ADDR
// end ;
7786: LD_VAR 0 2
7790: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7791: LD_INT 0
7793: PPUSH
7794: PPUSH
7795: PPUSH
7796: PPUSH
// if pos < 1 then
7797: LD_VAR 0 2
7801: PUSH
7802: LD_INT 1
7804: LESS
7805: IFFALSE 7809
// exit ;
7807: GO 8112
// if pos = 1 then
7809: LD_VAR 0 2
7813: PUSH
7814: LD_INT 1
7816: EQUAL
7817: IFFALSE 7850
// result := Replace ( arr , pos [ 1 ] , value ) else
7819: LD_ADDR_VAR 0 4
7823: PUSH
7824: LD_VAR 0 1
7828: PPUSH
7829: LD_VAR 0 2
7833: PUSH
7834: LD_INT 1
7836: ARRAY
7837: PPUSH
7838: LD_VAR 0 3
7842: PPUSH
7843: CALL_OW 1
7847: ST_TO_ADDR
7848: GO 8112
// begin tmp := arr ;
7850: LD_ADDR_VAR 0 6
7854: PUSH
7855: LD_VAR 0 1
7859: ST_TO_ADDR
// s_arr := [ tmp ] ;
7860: LD_ADDR_VAR 0 7
7864: PUSH
7865: LD_VAR 0 6
7869: PUSH
7870: EMPTY
7871: LIST
7872: ST_TO_ADDR
// for i = 1 to pos - 1 do
7873: LD_ADDR_VAR 0 5
7877: PUSH
7878: DOUBLE
7879: LD_INT 1
7881: DEC
7882: ST_TO_ADDR
7883: LD_VAR 0 2
7887: PUSH
7888: LD_INT 1
7890: MINUS
7891: PUSH
7892: FOR_TO
7893: IFFALSE 7938
// begin tmp := tmp [ pos [ i ] ] ;
7895: LD_ADDR_VAR 0 6
7899: PUSH
7900: LD_VAR 0 6
7904: PUSH
7905: LD_VAR 0 2
7909: PUSH
7910: LD_VAR 0 5
7914: ARRAY
7915: ARRAY
7916: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7917: LD_ADDR_VAR 0 7
7921: PUSH
7922: LD_VAR 0 7
7926: PUSH
7927: LD_VAR 0 6
7931: PUSH
7932: EMPTY
7933: LIST
7934: ADD
7935: ST_TO_ADDR
// end ;
7936: GO 7892
7938: POP
7939: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7940: LD_ADDR_VAR 0 6
7944: PUSH
7945: LD_VAR 0 6
7949: PPUSH
7950: LD_VAR 0 2
7954: PUSH
7955: LD_VAR 0 2
7959: ARRAY
7960: PPUSH
7961: LD_VAR 0 3
7965: PPUSH
7966: CALL_OW 1
7970: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7971: LD_ADDR_VAR 0 7
7975: PUSH
7976: LD_VAR 0 7
7980: PPUSH
7981: LD_VAR 0 7
7985: PPUSH
7986: LD_VAR 0 6
7990: PPUSH
7991: CALL_OW 1
7995: ST_TO_ADDR
// for i = s_arr downto 2 do
7996: LD_ADDR_VAR 0 5
8000: PUSH
8001: DOUBLE
8002: LD_VAR 0 7
8006: INC
8007: ST_TO_ADDR
8008: LD_INT 2
8010: PUSH
8011: FOR_DOWNTO
8012: IFFALSE 8096
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8014: LD_ADDR_VAR 0 6
8018: PUSH
8019: LD_VAR 0 7
8023: PUSH
8024: LD_VAR 0 5
8028: PUSH
8029: LD_INT 1
8031: MINUS
8032: ARRAY
8033: PPUSH
8034: LD_VAR 0 2
8038: PUSH
8039: LD_VAR 0 5
8043: PUSH
8044: LD_INT 1
8046: MINUS
8047: ARRAY
8048: PPUSH
8049: LD_VAR 0 7
8053: PUSH
8054: LD_VAR 0 5
8058: ARRAY
8059: PPUSH
8060: CALL_OW 1
8064: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8065: LD_ADDR_VAR 0 7
8069: PUSH
8070: LD_VAR 0 7
8074: PPUSH
8075: LD_VAR 0 5
8079: PUSH
8080: LD_INT 1
8082: MINUS
8083: PPUSH
8084: LD_VAR 0 6
8088: PPUSH
8089: CALL_OW 1
8093: ST_TO_ADDR
// end ;
8094: GO 8011
8096: POP
8097: POP
// result := s_arr [ 1 ] ;
8098: LD_ADDR_VAR 0 4
8102: PUSH
8103: LD_VAR 0 7
8107: PUSH
8108: LD_INT 1
8110: ARRAY
8111: ST_TO_ADDR
// end ; end ;
8112: LD_VAR 0 4
8116: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8117: LD_INT 0
8119: PPUSH
8120: PPUSH
// if not list then
8121: LD_VAR 0 1
8125: NOT
8126: IFFALSE 8130
// exit ;
8128: GO 8221
// i := list [ pos1 ] ;
8130: LD_ADDR_VAR 0 5
8134: PUSH
8135: LD_VAR 0 1
8139: PUSH
8140: LD_VAR 0 2
8144: ARRAY
8145: ST_TO_ADDR
// if not i then
8146: LD_VAR 0 5
8150: NOT
8151: IFFALSE 8155
// exit ;
8153: GO 8221
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8155: LD_ADDR_VAR 0 1
8159: PUSH
8160: LD_VAR 0 1
8164: PPUSH
8165: LD_VAR 0 2
8169: PPUSH
8170: LD_VAR 0 1
8174: PUSH
8175: LD_VAR 0 3
8179: ARRAY
8180: PPUSH
8181: CALL_OW 1
8185: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8186: LD_ADDR_VAR 0 1
8190: PUSH
8191: LD_VAR 0 1
8195: PPUSH
8196: LD_VAR 0 3
8200: PPUSH
8201: LD_VAR 0 5
8205: PPUSH
8206: CALL_OW 1
8210: ST_TO_ADDR
// result := list ;
8211: LD_ADDR_VAR 0 4
8215: PUSH
8216: LD_VAR 0 1
8220: ST_TO_ADDR
// end ;
8221: LD_VAR 0 4
8225: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8226: LD_INT 0
8228: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8229: LD_ADDR_VAR 0 5
8233: PUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL_OW 250
8243: PPUSH
8244: LD_VAR 0 1
8248: PPUSH
8249: CALL_OW 251
8253: PPUSH
8254: LD_VAR 0 2
8258: PPUSH
8259: LD_VAR 0 3
8263: PPUSH
8264: LD_VAR 0 4
8268: PPUSH
8269: CALL 8647 0 5
8273: ST_TO_ADDR
// end ;
8274: LD_VAR 0 5
8278: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8279: LD_INT 0
8281: PPUSH
8282: PPUSH
8283: PPUSH
8284: PPUSH
// if not list or not unit then
8285: LD_VAR 0 2
8289: NOT
8290: PUSH
8291: LD_VAR 0 1
8295: NOT
8296: OR
8297: IFFALSE 8301
// exit ;
8299: GO 8642
// result := [ ] ;
8301: LD_ADDR_VAR 0 5
8305: PUSH
8306: EMPTY
8307: ST_TO_ADDR
// for i in list do
8308: LD_ADDR_VAR 0 6
8312: PUSH
8313: LD_VAR 0 2
8317: PUSH
8318: FOR_IN
8319: IFFALSE 8537
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8321: LD_ADDR_VAR 0 8
8325: PUSH
8326: LD_VAR 0 1
8330: PPUSH
8331: LD_VAR 0 6
8335: PUSH
8336: LD_INT 1
8338: ARRAY
8339: PPUSH
8340: LD_VAR 0 6
8344: PUSH
8345: LD_INT 2
8347: ARRAY
8348: PPUSH
8349: CALL_OW 297
8353: ST_TO_ADDR
// if not Count ( result ) then
8354: LD_VAR 0 5
8358: PPUSH
8359: CALL 4931 0 1
8363: NOT
8364: IFFALSE 8397
// begin result := Join ( result , [ i , tmp ] ) ;
8366: LD_ADDR_VAR 0 5
8370: PUSH
8371: LD_VAR 0 5
8375: PPUSH
8376: LD_VAR 0 6
8380: PUSH
8381: LD_VAR 0 8
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: PPUSH
8390: CALL 40540 0 2
8394: ST_TO_ADDR
// continue ;
8395: GO 8318
// end ; if result [ result ] [ 2 ] <= tmp then
8397: LD_VAR 0 5
8401: PUSH
8402: LD_VAR 0 5
8406: ARRAY
8407: PUSH
8408: LD_INT 2
8410: ARRAY
8411: PUSH
8412: LD_VAR 0 8
8416: LESSEQUAL
8417: IFFALSE 8450
// result := Join ( result , [ i , tmp ] ) else
8419: LD_ADDR_VAR 0 5
8423: PUSH
8424: LD_VAR 0 5
8428: PPUSH
8429: LD_VAR 0 6
8433: PUSH
8434: LD_VAR 0 8
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: PPUSH
8443: CALL 40540 0 2
8447: ST_TO_ADDR
8448: GO 8535
// begin for j := 1 to Count ( result ) do
8450: LD_ADDR_VAR 0 7
8454: PUSH
8455: DOUBLE
8456: LD_INT 1
8458: DEC
8459: ST_TO_ADDR
8460: LD_VAR 0 5
8464: PPUSH
8465: CALL 4931 0 1
8469: PUSH
8470: FOR_TO
8471: IFFALSE 8533
// begin if tmp < result [ j ] [ 2 ] then
8473: LD_VAR 0 8
8477: PUSH
8478: LD_VAR 0 5
8482: PUSH
8483: LD_VAR 0 7
8487: ARRAY
8488: PUSH
8489: LD_INT 2
8491: ARRAY
8492: LESS
8493: IFFALSE 8531
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8495: LD_ADDR_VAR 0 5
8499: PUSH
8500: LD_VAR 0 5
8504: PPUSH
8505: LD_VAR 0 7
8509: PPUSH
8510: LD_VAR 0 6
8514: PUSH
8515: LD_VAR 0 8
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: PPUSH
8524: CALL_OW 2
8528: ST_TO_ADDR
// break ;
8529: GO 8533
// end ; end ;
8531: GO 8470
8533: POP
8534: POP
// end ; end ;
8535: GO 8318
8537: POP
8538: POP
// if result and not asc then
8539: LD_VAR 0 5
8543: PUSH
8544: LD_VAR 0 3
8548: NOT
8549: AND
8550: IFFALSE 8567
// result := ReverseArray ( result ) ;
8552: LD_ADDR_VAR 0 5
8556: PUSH
8557: LD_VAR 0 5
8561: PPUSH
8562: CALL 35807 0 1
8566: ST_TO_ADDR
// tmp := [ ] ;
8567: LD_ADDR_VAR 0 8
8571: PUSH
8572: EMPTY
8573: ST_TO_ADDR
// if mode then
8574: LD_VAR 0 4
8578: IFFALSE 8642
// begin for i := 1 to result do
8580: LD_ADDR_VAR 0 6
8584: PUSH
8585: DOUBLE
8586: LD_INT 1
8588: DEC
8589: ST_TO_ADDR
8590: LD_VAR 0 5
8594: PUSH
8595: FOR_TO
8596: IFFALSE 8630
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8598: LD_ADDR_VAR 0 8
8602: PUSH
8603: LD_VAR 0 8
8607: PPUSH
8608: LD_VAR 0 5
8612: PUSH
8613: LD_VAR 0 6
8617: ARRAY
8618: PUSH
8619: LD_INT 1
8621: ARRAY
8622: PPUSH
8623: CALL 40540 0 2
8627: ST_TO_ADDR
8628: GO 8595
8630: POP
8631: POP
// result := tmp ;
8632: LD_ADDR_VAR 0 5
8636: PUSH
8637: LD_VAR 0 8
8641: ST_TO_ADDR
// end ; end ;
8642: LD_VAR 0 5
8646: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8647: LD_INT 0
8649: PPUSH
8650: PPUSH
8651: PPUSH
8652: PPUSH
// if not list then
8653: LD_VAR 0 3
8657: NOT
8658: IFFALSE 8662
// exit ;
8660: GO 9050
// result := [ ] ;
8662: LD_ADDR_VAR 0 6
8666: PUSH
8667: EMPTY
8668: ST_TO_ADDR
// for i in list do
8669: LD_ADDR_VAR 0 7
8673: PUSH
8674: LD_VAR 0 3
8678: PUSH
8679: FOR_IN
8680: IFFALSE 8882
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8682: LD_ADDR_VAR 0 9
8686: PUSH
8687: LD_VAR 0 7
8691: PPUSH
8692: LD_VAR 0 1
8696: PPUSH
8697: LD_VAR 0 2
8701: PPUSH
8702: CALL_OW 297
8706: ST_TO_ADDR
// if not result then
8707: LD_VAR 0 6
8711: NOT
8712: IFFALSE 8738
// result := [ [ i , tmp ] ] else
8714: LD_ADDR_VAR 0 6
8718: PUSH
8719: LD_VAR 0 7
8723: PUSH
8724: LD_VAR 0 9
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: EMPTY
8734: LIST
8735: ST_TO_ADDR
8736: GO 8880
// begin if result [ result ] [ 2 ] <= tmp then
8738: LD_VAR 0 6
8742: PUSH
8743: LD_VAR 0 6
8747: ARRAY
8748: PUSH
8749: LD_INT 2
8751: ARRAY
8752: PUSH
8753: LD_VAR 0 9
8757: LESSEQUAL
8758: IFFALSE 8800
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8760: LD_ADDR_VAR 0 6
8764: PUSH
8765: LD_VAR 0 6
8769: PPUSH
8770: LD_VAR 0 6
8774: PUSH
8775: LD_INT 1
8777: PLUS
8778: PPUSH
8779: LD_VAR 0 7
8783: PUSH
8784: LD_VAR 0 9
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PPUSH
8793: CALL_OW 2
8797: ST_TO_ADDR
8798: GO 8880
// for j := 1 to result do
8800: LD_ADDR_VAR 0 8
8804: PUSH
8805: DOUBLE
8806: LD_INT 1
8808: DEC
8809: ST_TO_ADDR
8810: LD_VAR 0 6
8814: PUSH
8815: FOR_TO
8816: IFFALSE 8878
// begin if tmp < result [ j ] [ 2 ] then
8818: LD_VAR 0 9
8822: PUSH
8823: LD_VAR 0 6
8827: PUSH
8828: LD_VAR 0 8
8832: ARRAY
8833: PUSH
8834: LD_INT 2
8836: ARRAY
8837: LESS
8838: IFFALSE 8876
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8840: LD_ADDR_VAR 0 6
8844: PUSH
8845: LD_VAR 0 6
8849: PPUSH
8850: LD_VAR 0 8
8854: PPUSH
8855: LD_VAR 0 7
8859: PUSH
8860: LD_VAR 0 9
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PPUSH
8869: CALL_OW 2
8873: ST_TO_ADDR
// break ;
8874: GO 8878
// end ; end ;
8876: GO 8815
8878: POP
8879: POP
// end ; end ;
8880: GO 8679
8882: POP
8883: POP
// if result and not asc then
8884: LD_VAR 0 6
8888: PUSH
8889: LD_VAR 0 4
8893: NOT
8894: AND
8895: IFFALSE 8970
// begin tmp := result ;
8897: LD_ADDR_VAR 0 9
8901: PUSH
8902: LD_VAR 0 6
8906: ST_TO_ADDR
// for i = tmp downto 1 do
8907: LD_ADDR_VAR 0 7
8911: PUSH
8912: DOUBLE
8913: LD_VAR 0 9
8917: INC
8918: ST_TO_ADDR
8919: LD_INT 1
8921: PUSH
8922: FOR_DOWNTO
8923: IFFALSE 8968
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8925: LD_ADDR_VAR 0 6
8929: PUSH
8930: LD_VAR 0 6
8934: PPUSH
8935: LD_VAR 0 9
8939: PUSH
8940: LD_VAR 0 7
8944: MINUS
8945: PUSH
8946: LD_INT 1
8948: PLUS
8949: PPUSH
8950: LD_VAR 0 9
8954: PUSH
8955: LD_VAR 0 7
8959: ARRAY
8960: PPUSH
8961: CALL_OW 1
8965: ST_TO_ADDR
8966: GO 8922
8968: POP
8969: POP
// end ; tmp := [ ] ;
8970: LD_ADDR_VAR 0 9
8974: PUSH
8975: EMPTY
8976: ST_TO_ADDR
// if mode then
8977: LD_VAR 0 5
8981: IFFALSE 9050
// begin for i = 1 to result do
8983: LD_ADDR_VAR 0 7
8987: PUSH
8988: DOUBLE
8989: LD_INT 1
8991: DEC
8992: ST_TO_ADDR
8993: LD_VAR 0 6
8997: PUSH
8998: FOR_TO
8999: IFFALSE 9038
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9001: LD_ADDR_VAR 0 9
9005: PUSH
9006: LD_VAR 0 9
9010: PPUSH
9011: LD_VAR 0 7
9015: PPUSH
9016: LD_VAR 0 6
9020: PUSH
9021: LD_VAR 0 7
9025: ARRAY
9026: PUSH
9027: LD_INT 1
9029: ARRAY
9030: PPUSH
9031: CALL_OW 1
9035: ST_TO_ADDR
9036: GO 8998
9038: POP
9039: POP
// result := tmp ;
9040: LD_ADDR_VAR 0 6
9044: PUSH
9045: LD_VAR 0 9
9049: ST_TO_ADDR
// end ; end ;
9050: LD_VAR 0 6
9054: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9055: LD_INT 0
9057: PPUSH
9058: PPUSH
9059: PPUSH
9060: PPUSH
9061: PPUSH
9062: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9063: LD_ADDR_VAR 0 5
9067: PUSH
9068: LD_INT 0
9070: PUSH
9071: LD_INT 0
9073: PUSH
9074: LD_INT 0
9076: PUSH
9077: EMPTY
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: ST_TO_ADDR
// if not x or not y then
9085: LD_VAR 0 2
9089: NOT
9090: PUSH
9091: LD_VAR 0 3
9095: NOT
9096: OR
9097: IFFALSE 9101
// exit ;
9099: GO 10751
// if not range then
9101: LD_VAR 0 4
9105: NOT
9106: IFFALSE 9116
// range := 10 ;
9108: LD_ADDR_VAR 0 4
9112: PUSH
9113: LD_INT 10
9115: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9116: LD_ADDR_VAR 0 8
9120: PUSH
9121: LD_INT 81
9123: PUSH
9124: LD_VAR 0 1
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 92
9135: PUSH
9136: LD_VAR 0 2
9140: PUSH
9141: LD_VAR 0 3
9145: PUSH
9146: LD_VAR 0 4
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: PUSH
9157: LD_INT 3
9159: PUSH
9160: LD_INT 21
9162: PUSH
9163: LD_INT 3
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: LIST
9178: PPUSH
9179: CALL_OW 69
9183: ST_TO_ADDR
// if not tmp then
9184: LD_VAR 0 8
9188: NOT
9189: IFFALSE 9193
// exit ;
9191: GO 10751
// for i in tmp do
9193: LD_ADDR_VAR 0 6
9197: PUSH
9198: LD_VAR 0 8
9202: PUSH
9203: FOR_IN
9204: IFFALSE 10726
// begin points := [ 0 , 0 , 0 ] ;
9206: LD_ADDR_VAR 0 9
9210: PUSH
9211: LD_INT 0
9213: PUSH
9214: LD_INT 0
9216: PUSH
9217: LD_INT 0
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: LIST
9224: ST_TO_ADDR
// bpoints := 1 ;
9225: LD_ADDR_VAR 0 10
9229: PUSH
9230: LD_INT 1
9232: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9233: LD_VAR 0 6
9237: PPUSH
9238: CALL_OW 247
9242: PUSH
9243: LD_INT 1
9245: DOUBLE
9246: EQUAL
9247: IFTRUE 9251
9249: GO 9829
9251: POP
// begin if GetClass ( i ) = 1 then
9252: LD_VAR 0 6
9256: PPUSH
9257: CALL_OW 257
9261: PUSH
9262: LD_INT 1
9264: EQUAL
9265: IFFALSE 9286
// points := [ 10 , 5 , 3 ] ;
9267: LD_ADDR_VAR 0 9
9271: PUSH
9272: LD_INT 10
9274: PUSH
9275: LD_INT 5
9277: PUSH
9278: LD_INT 3
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: LIST
9285: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9286: LD_VAR 0 6
9290: PPUSH
9291: CALL_OW 257
9295: PUSH
9296: LD_INT 2
9298: PUSH
9299: LD_INT 3
9301: PUSH
9302: LD_INT 4
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: LIST
9309: IN
9310: IFFALSE 9331
// points := [ 3 , 2 , 1 ] ;
9312: LD_ADDR_VAR 0 9
9316: PUSH
9317: LD_INT 3
9319: PUSH
9320: LD_INT 2
9322: PUSH
9323: LD_INT 1
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: LIST
9330: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9331: LD_VAR 0 6
9335: PPUSH
9336: CALL_OW 257
9340: PUSH
9341: LD_INT 5
9343: EQUAL
9344: IFFALSE 9365
// points := [ 130 , 5 , 2 ] ;
9346: LD_ADDR_VAR 0 9
9350: PUSH
9351: LD_INT 130
9353: PUSH
9354: LD_INT 5
9356: PUSH
9357: LD_INT 2
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: LIST
9364: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9365: LD_VAR 0 6
9369: PPUSH
9370: CALL_OW 257
9374: PUSH
9375: LD_INT 8
9377: EQUAL
9378: IFFALSE 9399
// points := [ 35 , 35 , 30 ] ;
9380: LD_ADDR_VAR 0 9
9384: PUSH
9385: LD_INT 35
9387: PUSH
9388: LD_INT 35
9390: PUSH
9391: LD_INT 30
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: LIST
9398: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9399: LD_VAR 0 6
9403: PPUSH
9404: CALL_OW 257
9408: PUSH
9409: LD_INT 9
9411: EQUAL
9412: IFFALSE 9433
// points := [ 20 , 55 , 40 ] ;
9414: LD_ADDR_VAR 0 9
9418: PUSH
9419: LD_INT 20
9421: PUSH
9422: LD_INT 55
9424: PUSH
9425: LD_INT 40
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: LIST
9432: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9433: LD_VAR 0 6
9437: PPUSH
9438: CALL_OW 257
9442: PUSH
9443: LD_INT 12
9445: PUSH
9446: LD_INT 16
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: IN
9453: IFFALSE 9474
// points := [ 5 , 3 , 2 ] ;
9455: LD_ADDR_VAR 0 9
9459: PUSH
9460: LD_INT 5
9462: PUSH
9463: LD_INT 3
9465: PUSH
9466: LD_INT 2
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: LIST
9473: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9474: LD_VAR 0 6
9478: PPUSH
9479: CALL_OW 257
9483: PUSH
9484: LD_INT 17
9486: EQUAL
9487: IFFALSE 9508
// points := [ 100 , 50 , 75 ] ;
9489: LD_ADDR_VAR 0 9
9493: PUSH
9494: LD_INT 100
9496: PUSH
9497: LD_INT 50
9499: PUSH
9500: LD_INT 75
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: LIST
9507: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9508: LD_VAR 0 6
9512: PPUSH
9513: CALL_OW 257
9517: PUSH
9518: LD_INT 15
9520: EQUAL
9521: IFFALSE 9542
// points := [ 10 , 5 , 3 ] ;
9523: LD_ADDR_VAR 0 9
9527: PUSH
9528: LD_INT 10
9530: PUSH
9531: LD_INT 5
9533: PUSH
9534: LD_INT 3
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: LIST
9541: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9542: LD_VAR 0 6
9546: PPUSH
9547: CALL_OW 257
9551: PUSH
9552: LD_INT 14
9554: EQUAL
9555: IFFALSE 9576
// points := [ 10 , 0 , 0 ] ;
9557: LD_ADDR_VAR 0 9
9561: PUSH
9562: LD_INT 10
9564: PUSH
9565: LD_INT 0
9567: PUSH
9568: LD_INT 0
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: LIST
9575: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9576: LD_VAR 0 6
9580: PPUSH
9581: CALL_OW 257
9585: PUSH
9586: LD_INT 11
9588: EQUAL
9589: IFFALSE 9610
// points := [ 30 , 10 , 5 ] ;
9591: LD_ADDR_VAR 0 9
9595: PUSH
9596: LD_INT 30
9598: PUSH
9599: LD_INT 10
9601: PUSH
9602: LD_INT 5
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9610: LD_VAR 0 1
9614: PPUSH
9615: LD_INT 5
9617: PPUSH
9618: CALL_OW 321
9622: PUSH
9623: LD_INT 2
9625: EQUAL
9626: IFFALSE 9643
// bpoints := bpoints * 1.8 ;
9628: LD_ADDR_VAR 0 10
9632: PUSH
9633: LD_VAR 0 10
9637: PUSH
9638: LD_REAL  1.80000000000000E+0000
9641: MUL
9642: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9643: LD_VAR 0 6
9647: PPUSH
9648: CALL_OW 257
9652: PUSH
9653: LD_INT 1
9655: PUSH
9656: LD_INT 2
9658: PUSH
9659: LD_INT 3
9661: PUSH
9662: LD_INT 4
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: IN
9671: PUSH
9672: LD_VAR 0 1
9676: PPUSH
9677: LD_INT 51
9679: PPUSH
9680: CALL_OW 321
9684: PUSH
9685: LD_INT 2
9687: EQUAL
9688: AND
9689: IFFALSE 9706
// bpoints := bpoints * 1.2 ;
9691: LD_ADDR_VAR 0 10
9695: PUSH
9696: LD_VAR 0 10
9700: PUSH
9701: LD_REAL  1.20000000000000E+0000
9704: MUL
9705: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9706: LD_VAR 0 6
9710: PPUSH
9711: CALL_OW 257
9715: PUSH
9716: LD_INT 5
9718: PUSH
9719: LD_INT 7
9721: PUSH
9722: LD_INT 9
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: LIST
9729: IN
9730: PUSH
9731: LD_VAR 0 1
9735: PPUSH
9736: LD_INT 52
9738: PPUSH
9739: CALL_OW 321
9743: PUSH
9744: LD_INT 2
9746: EQUAL
9747: AND
9748: IFFALSE 9765
// bpoints := bpoints * 1.5 ;
9750: LD_ADDR_VAR 0 10
9754: PUSH
9755: LD_VAR 0 10
9759: PUSH
9760: LD_REAL  1.50000000000000E+0000
9763: MUL
9764: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9765: LD_VAR 0 1
9769: PPUSH
9770: LD_INT 66
9772: PPUSH
9773: CALL_OW 321
9777: PUSH
9778: LD_INT 2
9780: EQUAL
9781: IFFALSE 9798
// bpoints := bpoints * 1.1 ;
9783: LD_ADDR_VAR 0 10
9787: PUSH
9788: LD_VAR 0 10
9792: PUSH
9793: LD_REAL  1.10000000000000E+0000
9796: MUL
9797: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9798: LD_ADDR_VAR 0 10
9802: PUSH
9803: LD_VAR 0 10
9807: PUSH
9808: LD_VAR 0 6
9812: PPUSH
9813: LD_INT 1
9815: PPUSH
9816: CALL_OW 259
9820: PUSH
9821: LD_REAL  1.15000000000000E+0000
9824: MUL
9825: MUL
9826: ST_TO_ADDR
// end ; unit_vehicle :
9827: GO 10655
9829: LD_INT 2
9831: DOUBLE
9832: EQUAL
9833: IFTRUE 9837
9835: GO 10643
9837: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9838: LD_VAR 0 6
9842: PPUSH
9843: CALL_OW 264
9847: PUSH
9848: LD_INT 2
9850: PUSH
9851: LD_INT 42
9853: PUSH
9854: LD_INT 24
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: LIST
9861: IN
9862: IFFALSE 9883
// points := [ 25 , 5 , 3 ] ;
9864: LD_ADDR_VAR 0 9
9868: PUSH
9869: LD_INT 25
9871: PUSH
9872: LD_INT 5
9874: PUSH
9875: LD_INT 3
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: LIST
9882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9883: LD_VAR 0 6
9887: PPUSH
9888: CALL_OW 264
9892: PUSH
9893: LD_INT 4
9895: PUSH
9896: LD_INT 43
9898: PUSH
9899: LD_INT 25
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: IN
9907: IFFALSE 9928
// points := [ 40 , 15 , 5 ] ;
9909: LD_ADDR_VAR 0 9
9913: PUSH
9914: LD_INT 40
9916: PUSH
9917: LD_INT 15
9919: PUSH
9920: LD_INT 5
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: LIST
9927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9928: LD_VAR 0 6
9932: PPUSH
9933: CALL_OW 264
9937: PUSH
9938: LD_INT 3
9940: PUSH
9941: LD_INT 23
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: IN
9948: IFFALSE 9969
// points := [ 7 , 25 , 8 ] ;
9950: LD_ADDR_VAR 0 9
9954: PUSH
9955: LD_INT 7
9957: PUSH
9958: LD_INT 25
9960: PUSH
9961: LD_INT 8
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: LIST
9968: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9969: LD_VAR 0 6
9973: PPUSH
9974: CALL_OW 264
9978: PUSH
9979: LD_INT 5
9981: PUSH
9982: LD_INT 27
9984: PUSH
9985: LD_INT 44
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: LIST
9992: IN
9993: IFFALSE 10014
// points := [ 14 , 50 , 16 ] ;
9995: LD_ADDR_VAR 0 9
9999: PUSH
10000: LD_INT 14
10002: PUSH
10003: LD_INT 50
10005: PUSH
10006: LD_INT 16
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: LIST
10013: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10014: LD_VAR 0 6
10018: PPUSH
10019: CALL_OW 264
10023: PUSH
10024: LD_INT 6
10026: PUSH
10027: LD_INT 46
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: IN
10034: IFFALSE 10055
// points := [ 32 , 120 , 70 ] ;
10036: LD_ADDR_VAR 0 9
10040: PUSH
10041: LD_INT 32
10043: PUSH
10044: LD_INT 120
10046: PUSH
10047: LD_INT 70
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: LIST
10054: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10055: LD_VAR 0 6
10059: PPUSH
10060: CALL_OW 264
10064: PUSH
10065: LD_INT 7
10067: PUSH
10068: LD_INT 28
10070: PUSH
10071: LD_INT 45
10073: PUSH
10074: LD_INT 92
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: IN
10083: IFFALSE 10104
// points := [ 35 , 20 , 45 ] ;
10085: LD_ADDR_VAR 0 9
10089: PUSH
10090: LD_INT 35
10092: PUSH
10093: LD_INT 20
10095: PUSH
10096: LD_INT 45
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: LIST
10103: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10104: LD_VAR 0 6
10108: PPUSH
10109: CALL_OW 264
10113: PUSH
10114: LD_INT 47
10116: PUSH
10117: EMPTY
10118: LIST
10119: IN
10120: IFFALSE 10141
// points := [ 67 , 45 , 75 ] ;
10122: LD_ADDR_VAR 0 9
10126: PUSH
10127: LD_INT 67
10129: PUSH
10130: LD_INT 45
10132: PUSH
10133: LD_INT 75
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: LIST
10140: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10141: LD_VAR 0 6
10145: PPUSH
10146: CALL_OW 264
10150: PUSH
10151: LD_INT 26
10153: PUSH
10154: EMPTY
10155: LIST
10156: IN
10157: IFFALSE 10178
// points := [ 120 , 30 , 80 ] ;
10159: LD_ADDR_VAR 0 9
10163: PUSH
10164: LD_INT 120
10166: PUSH
10167: LD_INT 30
10169: PUSH
10170: LD_INT 80
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: LIST
10177: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10178: LD_VAR 0 6
10182: PPUSH
10183: CALL_OW 264
10187: PUSH
10188: LD_INT 22
10190: PUSH
10191: EMPTY
10192: LIST
10193: IN
10194: IFFALSE 10215
// points := [ 40 , 1 , 1 ] ;
10196: LD_ADDR_VAR 0 9
10200: PUSH
10201: LD_INT 40
10203: PUSH
10204: LD_INT 1
10206: PUSH
10207: LD_INT 1
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: LIST
10214: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10215: LD_VAR 0 6
10219: PPUSH
10220: CALL_OW 264
10224: PUSH
10225: LD_INT 29
10227: PUSH
10228: EMPTY
10229: LIST
10230: IN
10231: IFFALSE 10252
// points := [ 70 , 200 , 400 ] ;
10233: LD_ADDR_VAR 0 9
10237: PUSH
10238: LD_INT 70
10240: PUSH
10241: LD_INT 200
10243: PUSH
10244: LD_INT 400
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: LIST
10251: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10252: LD_VAR 0 6
10256: PPUSH
10257: CALL_OW 264
10261: PUSH
10262: LD_INT 14
10264: PUSH
10265: LD_INT 53
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: IN
10272: IFFALSE 10293
// points := [ 40 , 10 , 20 ] ;
10274: LD_ADDR_VAR 0 9
10278: PUSH
10279: LD_INT 40
10281: PUSH
10282: LD_INT 10
10284: PUSH
10285: LD_INT 20
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10293: LD_VAR 0 6
10297: PPUSH
10298: CALL_OW 264
10302: PUSH
10303: LD_INT 9
10305: PUSH
10306: EMPTY
10307: LIST
10308: IN
10309: IFFALSE 10330
// points := [ 5 , 70 , 20 ] ;
10311: LD_ADDR_VAR 0 9
10315: PUSH
10316: LD_INT 5
10318: PUSH
10319: LD_INT 70
10321: PUSH
10322: LD_INT 20
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: LIST
10329: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10330: LD_VAR 0 6
10334: PPUSH
10335: CALL_OW 264
10339: PUSH
10340: LD_INT 10
10342: PUSH
10343: EMPTY
10344: LIST
10345: IN
10346: IFFALSE 10367
// points := [ 35 , 110 , 70 ] ;
10348: LD_ADDR_VAR 0 9
10352: PUSH
10353: LD_INT 35
10355: PUSH
10356: LD_INT 110
10358: PUSH
10359: LD_INT 70
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: LIST
10366: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10367: LD_VAR 0 6
10371: PPUSH
10372: CALL_OW 265
10376: PUSH
10377: LD_INT 25
10379: EQUAL
10380: IFFALSE 10401
// points := [ 80 , 65 , 100 ] ;
10382: LD_ADDR_VAR 0 9
10386: PUSH
10387: LD_INT 80
10389: PUSH
10390: LD_INT 65
10392: PUSH
10393: LD_INT 100
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: LIST
10400: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10401: LD_VAR 0 6
10405: PPUSH
10406: CALL_OW 263
10410: PUSH
10411: LD_INT 1
10413: EQUAL
10414: IFFALSE 10449
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10416: LD_ADDR_VAR 0 10
10420: PUSH
10421: LD_VAR 0 10
10425: PUSH
10426: LD_VAR 0 6
10430: PPUSH
10431: CALL_OW 311
10435: PPUSH
10436: LD_INT 3
10438: PPUSH
10439: CALL_OW 259
10443: PUSH
10444: LD_INT 4
10446: MUL
10447: MUL
10448: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10449: LD_VAR 0 6
10453: PPUSH
10454: CALL_OW 263
10458: PUSH
10459: LD_INT 2
10461: EQUAL
10462: IFFALSE 10513
// begin j := IsControledBy ( i ) ;
10464: LD_ADDR_VAR 0 7
10468: PUSH
10469: LD_VAR 0 6
10473: PPUSH
10474: CALL_OW 312
10478: ST_TO_ADDR
// if j then
10479: LD_VAR 0 7
10483: IFFALSE 10513
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10485: LD_ADDR_VAR 0 10
10489: PUSH
10490: LD_VAR 0 10
10494: PUSH
10495: LD_VAR 0 7
10499: PPUSH
10500: LD_INT 3
10502: PPUSH
10503: CALL_OW 259
10507: PUSH
10508: LD_INT 3
10510: MUL
10511: MUL
10512: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10513: LD_VAR 0 6
10517: PPUSH
10518: CALL_OW 264
10522: PUSH
10523: LD_INT 5
10525: PUSH
10526: LD_INT 6
10528: PUSH
10529: LD_INT 46
10531: PUSH
10532: LD_INT 44
10534: PUSH
10535: LD_INT 47
10537: PUSH
10538: LD_INT 45
10540: PUSH
10541: LD_INT 28
10543: PUSH
10544: LD_INT 7
10546: PUSH
10547: LD_INT 27
10549: PUSH
10550: LD_INT 29
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: IN
10565: PUSH
10566: LD_VAR 0 1
10570: PPUSH
10571: LD_INT 52
10573: PPUSH
10574: CALL_OW 321
10578: PUSH
10579: LD_INT 2
10581: EQUAL
10582: AND
10583: IFFALSE 10600
// bpoints := bpoints * 1.2 ;
10585: LD_ADDR_VAR 0 10
10589: PUSH
10590: LD_VAR 0 10
10594: PUSH
10595: LD_REAL  1.20000000000000E+0000
10598: MUL
10599: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10600: LD_VAR 0 6
10604: PPUSH
10605: CALL_OW 264
10609: PUSH
10610: LD_INT 6
10612: PUSH
10613: LD_INT 46
10615: PUSH
10616: LD_INT 47
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: LIST
10623: IN
10624: IFFALSE 10641
// bpoints := bpoints * 1.2 ;
10626: LD_ADDR_VAR 0 10
10630: PUSH
10631: LD_VAR 0 10
10635: PUSH
10636: LD_REAL  1.20000000000000E+0000
10639: MUL
10640: ST_TO_ADDR
// end ; unit_building :
10641: GO 10655
10643: LD_INT 3
10645: DOUBLE
10646: EQUAL
10647: IFTRUE 10651
10649: GO 10654
10651: POP
// ; end ;
10652: GO 10655
10654: POP
// for j = 1 to 3 do
10655: LD_ADDR_VAR 0 7
10659: PUSH
10660: DOUBLE
10661: LD_INT 1
10663: DEC
10664: ST_TO_ADDR
10665: LD_INT 3
10667: PUSH
10668: FOR_TO
10669: IFFALSE 10722
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10671: LD_ADDR_VAR 0 5
10675: PUSH
10676: LD_VAR 0 5
10680: PPUSH
10681: LD_VAR 0 7
10685: PPUSH
10686: LD_VAR 0 5
10690: PUSH
10691: LD_VAR 0 7
10695: ARRAY
10696: PUSH
10697: LD_VAR 0 9
10701: PUSH
10702: LD_VAR 0 7
10706: ARRAY
10707: PUSH
10708: LD_VAR 0 10
10712: MUL
10713: PLUS
10714: PPUSH
10715: CALL_OW 1
10719: ST_TO_ADDR
10720: GO 10668
10722: POP
10723: POP
// end ;
10724: GO 9203
10726: POP
10727: POP
// result := Replace ( result , 4 , tmp ) ;
10728: LD_ADDR_VAR 0 5
10732: PUSH
10733: LD_VAR 0 5
10737: PPUSH
10738: LD_INT 4
10740: PPUSH
10741: LD_VAR 0 8
10745: PPUSH
10746: CALL_OW 1
10750: ST_TO_ADDR
// end ;
10751: LD_VAR 0 5
10755: RET
// export function DangerAtRange ( unit , range ) ; begin
10756: LD_INT 0
10758: PPUSH
// if not unit then
10759: LD_VAR 0 1
10763: NOT
10764: IFFALSE 10768
// exit ;
10766: GO 10813
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10768: LD_ADDR_VAR 0 3
10772: PUSH
10773: LD_VAR 0 1
10777: PPUSH
10778: CALL_OW 255
10782: PPUSH
10783: LD_VAR 0 1
10787: PPUSH
10788: CALL_OW 250
10792: PPUSH
10793: LD_VAR 0 1
10797: PPUSH
10798: CALL_OW 251
10802: PPUSH
10803: LD_VAR 0 2
10807: PPUSH
10808: CALL 9055 0 4
10812: ST_TO_ADDR
// end ;
10813: LD_VAR 0 3
10817: RET
// export function DangerInArea ( side , area ) ; begin
10818: LD_INT 0
10820: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10821: LD_ADDR_VAR 0 3
10825: PUSH
10826: LD_VAR 0 2
10830: PPUSH
10831: LD_INT 81
10833: PUSH
10834: LD_VAR 0 1
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PPUSH
10843: CALL_OW 70
10847: ST_TO_ADDR
// end ;
10848: LD_VAR 0 3
10852: RET
// export function IsExtension ( b ) ; begin
10853: LD_INT 0
10855: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10856: LD_ADDR_VAR 0 2
10860: PUSH
10861: LD_VAR 0 1
10865: PUSH
10866: LD_INT 23
10868: PUSH
10869: LD_INT 20
10871: PUSH
10872: LD_INT 22
10874: PUSH
10875: LD_INT 17
10877: PUSH
10878: LD_INT 24
10880: PUSH
10881: LD_INT 21
10883: PUSH
10884: LD_INT 19
10886: PUSH
10887: LD_INT 16
10889: PUSH
10890: LD_INT 25
10892: PUSH
10893: LD_INT 18
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: IN
10908: ST_TO_ADDR
// end ;
10909: LD_VAR 0 2
10913: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10914: LD_INT 0
10916: PPUSH
10917: PPUSH
10918: PPUSH
// result := [ ] ;
10919: LD_ADDR_VAR 0 4
10923: PUSH
10924: EMPTY
10925: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10926: LD_ADDR_VAR 0 5
10930: PUSH
10931: LD_VAR 0 2
10935: PPUSH
10936: LD_INT 21
10938: PUSH
10939: LD_INT 3
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PPUSH
10946: CALL_OW 70
10950: ST_TO_ADDR
// if not tmp then
10951: LD_VAR 0 5
10955: NOT
10956: IFFALSE 10960
// exit ;
10958: GO 11024
// if checkLink then
10960: LD_VAR 0 3
10964: IFFALSE 11014
// begin for i in tmp do
10966: LD_ADDR_VAR 0 6
10970: PUSH
10971: LD_VAR 0 5
10975: PUSH
10976: FOR_IN
10977: IFFALSE 11012
// if GetBase ( i ) <> base then
10979: LD_VAR 0 6
10983: PPUSH
10984: CALL_OW 274
10988: PUSH
10989: LD_VAR 0 1
10993: NONEQUAL
10994: IFFALSE 11010
// ComLinkToBase ( base , i ) ;
10996: LD_VAR 0 1
11000: PPUSH
11001: LD_VAR 0 6
11005: PPUSH
11006: CALL_OW 169
11010: GO 10976
11012: POP
11013: POP
// end ; result := tmp ;
11014: LD_ADDR_VAR 0 4
11018: PUSH
11019: LD_VAR 0 5
11023: ST_TO_ADDR
// end ;
11024: LD_VAR 0 4
11028: RET
// export function ComComplete ( units , b ) ; var i ; begin
11029: LD_INT 0
11031: PPUSH
11032: PPUSH
// if not units then
11033: LD_VAR 0 1
11037: NOT
11038: IFFALSE 11042
// exit ;
11040: GO 11132
// for i in units do
11042: LD_ADDR_VAR 0 4
11046: PUSH
11047: LD_VAR 0 1
11051: PUSH
11052: FOR_IN
11053: IFFALSE 11130
// if BuildingStatus ( b ) = bs_build then
11055: LD_VAR 0 2
11059: PPUSH
11060: CALL_OW 461
11064: PUSH
11065: LD_INT 1
11067: EQUAL
11068: IFFALSE 11128
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11070: LD_VAR 0 4
11074: PPUSH
11075: LD_STRING h
11077: PUSH
11078: LD_VAR 0 2
11082: PPUSH
11083: CALL_OW 250
11087: PUSH
11088: LD_VAR 0 2
11092: PPUSH
11093: CALL_OW 251
11097: PUSH
11098: LD_VAR 0 2
11102: PUSH
11103: LD_INT 0
11105: PUSH
11106: LD_INT 0
11108: PUSH
11109: LD_INT 0
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: PUSH
11121: EMPTY
11122: LIST
11123: PPUSH
11124: CALL_OW 446
11128: GO 11052
11130: POP
11131: POP
// end ;
11132: LD_VAR 0 3
11136: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11137: LD_INT 0
11139: PPUSH
11140: PPUSH
11141: PPUSH
11142: PPUSH
11143: PPUSH
11144: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11145: LD_VAR 0 1
11149: NOT
11150: PUSH
11151: LD_VAR 0 1
11155: PPUSH
11156: CALL_OW 263
11160: PUSH
11161: LD_INT 2
11163: NONEQUAL
11164: OR
11165: IFFALSE 11169
// exit ;
11167: GO 11485
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11169: LD_ADDR_VAR 0 6
11173: PUSH
11174: LD_INT 22
11176: PUSH
11177: LD_VAR 0 1
11181: PPUSH
11182: CALL_OW 255
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PUSH
11191: LD_INT 2
11193: PUSH
11194: LD_INT 30
11196: PUSH
11197: LD_INT 36
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PUSH
11204: LD_INT 34
11206: PUSH
11207: LD_INT 31
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PPUSH
11223: CALL_OW 69
11227: ST_TO_ADDR
// if not tmp then
11228: LD_VAR 0 6
11232: NOT
11233: IFFALSE 11237
// exit ;
11235: GO 11485
// result := [ ] ;
11237: LD_ADDR_VAR 0 2
11241: PUSH
11242: EMPTY
11243: ST_TO_ADDR
// for i in tmp do
11244: LD_ADDR_VAR 0 3
11248: PUSH
11249: LD_VAR 0 6
11253: PUSH
11254: FOR_IN
11255: IFFALSE 11326
// begin t := UnitsInside ( i ) ;
11257: LD_ADDR_VAR 0 4
11261: PUSH
11262: LD_VAR 0 3
11266: PPUSH
11267: CALL_OW 313
11271: ST_TO_ADDR
// if t then
11272: LD_VAR 0 4
11276: IFFALSE 11324
// for j in t do
11278: LD_ADDR_VAR 0 7
11282: PUSH
11283: LD_VAR 0 4
11287: PUSH
11288: FOR_IN
11289: IFFALSE 11322
// result := Replace ( result , result + 1 , j ) ;
11291: LD_ADDR_VAR 0 2
11295: PUSH
11296: LD_VAR 0 2
11300: PPUSH
11301: LD_VAR 0 2
11305: PUSH
11306: LD_INT 1
11308: PLUS
11309: PPUSH
11310: LD_VAR 0 7
11314: PPUSH
11315: CALL_OW 1
11319: ST_TO_ADDR
11320: GO 11288
11322: POP
11323: POP
// end ;
11324: GO 11254
11326: POP
11327: POP
// if not result then
11328: LD_VAR 0 2
11332: NOT
11333: IFFALSE 11337
// exit ;
11335: GO 11485
// mech := result [ 1 ] ;
11337: LD_ADDR_VAR 0 5
11341: PUSH
11342: LD_VAR 0 2
11346: PUSH
11347: LD_INT 1
11349: ARRAY
11350: ST_TO_ADDR
// if result > 1 then
11351: LD_VAR 0 2
11355: PUSH
11356: LD_INT 1
11358: GREATER
11359: IFFALSE 11471
// begin for i = 2 to result do
11361: LD_ADDR_VAR 0 3
11365: PUSH
11366: DOUBLE
11367: LD_INT 2
11369: DEC
11370: ST_TO_ADDR
11371: LD_VAR 0 2
11375: PUSH
11376: FOR_TO
11377: IFFALSE 11469
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11379: LD_ADDR_VAR 0 4
11383: PUSH
11384: LD_VAR 0 2
11388: PUSH
11389: LD_VAR 0 3
11393: ARRAY
11394: PPUSH
11395: LD_INT 3
11397: PPUSH
11398: CALL_OW 259
11402: PUSH
11403: LD_VAR 0 2
11407: PUSH
11408: LD_VAR 0 3
11412: ARRAY
11413: PPUSH
11414: CALL_OW 432
11418: MINUS
11419: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11420: LD_VAR 0 4
11424: PUSH
11425: LD_VAR 0 5
11429: PPUSH
11430: LD_INT 3
11432: PPUSH
11433: CALL_OW 259
11437: PUSH
11438: LD_VAR 0 5
11442: PPUSH
11443: CALL_OW 432
11447: MINUS
11448: GREATEREQUAL
11449: IFFALSE 11467
// mech := result [ i ] ;
11451: LD_ADDR_VAR 0 5
11455: PUSH
11456: LD_VAR 0 2
11460: PUSH
11461: LD_VAR 0 3
11465: ARRAY
11466: ST_TO_ADDR
// end ;
11467: GO 11376
11469: POP
11470: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11471: LD_VAR 0 1
11475: PPUSH
11476: LD_VAR 0 5
11480: PPUSH
11481: CALL_OW 135
// end ;
11485: LD_VAR 0 2
11489: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11490: LD_INT 0
11492: PPUSH
11493: PPUSH
11494: PPUSH
11495: PPUSH
11496: PPUSH
11497: PPUSH
11498: PPUSH
11499: PPUSH
11500: PPUSH
11501: PPUSH
11502: PPUSH
11503: PPUSH
11504: PPUSH
// result := [ ] ;
11505: LD_ADDR_VAR 0 7
11509: PUSH
11510: EMPTY
11511: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11512: LD_VAR 0 1
11516: PPUSH
11517: CALL_OW 266
11521: PUSH
11522: LD_INT 0
11524: PUSH
11525: LD_INT 1
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: IN
11532: NOT
11533: IFFALSE 11537
// exit ;
11535: GO 13171
// if name then
11537: LD_VAR 0 3
11541: IFFALSE 11557
// SetBName ( base_dep , name ) ;
11543: LD_VAR 0 1
11547: PPUSH
11548: LD_VAR 0 3
11552: PPUSH
11553: CALL_OW 500
// base := GetBase ( base_dep ) ;
11557: LD_ADDR_VAR 0 15
11561: PUSH
11562: LD_VAR 0 1
11566: PPUSH
11567: CALL_OW 274
11571: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11572: LD_ADDR_VAR 0 16
11576: PUSH
11577: LD_VAR 0 1
11581: PPUSH
11582: CALL_OW 255
11586: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11587: LD_ADDR_VAR 0 17
11591: PUSH
11592: LD_VAR 0 1
11596: PPUSH
11597: CALL_OW 248
11601: ST_TO_ADDR
// if sources then
11602: LD_VAR 0 5
11606: IFFALSE 11653
// for i = 1 to 3 do
11608: LD_ADDR_VAR 0 8
11612: PUSH
11613: DOUBLE
11614: LD_INT 1
11616: DEC
11617: ST_TO_ADDR
11618: LD_INT 3
11620: PUSH
11621: FOR_TO
11622: IFFALSE 11651
// AddResourceType ( base , i , sources [ i ] ) ;
11624: LD_VAR 0 15
11628: PPUSH
11629: LD_VAR 0 8
11633: PPUSH
11634: LD_VAR 0 5
11638: PUSH
11639: LD_VAR 0 8
11643: ARRAY
11644: PPUSH
11645: CALL_OW 276
11649: GO 11621
11651: POP
11652: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11653: LD_ADDR_VAR 0 18
11657: PUSH
11658: LD_VAR 0 15
11662: PPUSH
11663: LD_VAR 0 2
11667: PPUSH
11668: LD_INT 1
11670: PPUSH
11671: CALL 10914 0 3
11675: ST_TO_ADDR
// InitHc ;
11676: CALL_OW 19
// InitUc ;
11680: CALL_OW 18
// uc_side := side ;
11684: LD_ADDR_OWVAR 20
11688: PUSH
11689: LD_VAR 0 16
11693: ST_TO_ADDR
// uc_nation := nation ;
11694: LD_ADDR_OWVAR 21
11698: PUSH
11699: LD_VAR 0 17
11703: ST_TO_ADDR
// if buildings then
11704: LD_VAR 0 18
11708: IFFALSE 13030
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11710: LD_ADDR_VAR 0 19
11714: PUSH
11715: LD_VAR 0 18
11719: PPUSH
11720: LD_INT 2
11722: PUSH
11723: LD_INT 30
11725: PUSH
11726: LD_INT 29
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: LD_INT 30
11735: PUSH
11736: LD_INT 30
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: LIST
11747: PPUSH
11748: CALL_OW 72
11752: ST_TO_ADDR
// if tmp then
11753: LD_VAR 0 19
11757: IFFALSE 11805
// for i in tmp do
11759: LD_ADDR_VAR 0 8
11763: PUSH
11764: LD_VAR 0 19
11768: PUSH
11769: FOR_IN
11770: IFFALSE 11803
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11772: LD_VAR 0 8
11776: PPUSH
11777: CALL_OW 250
11781: PPUSH
11782: LD_VAR 0 8
11786: PPUSH
11787: CALL_OW 251
11791: PPUSH
11792: LD_VAR 0 16
11796: PPUSH
11797: CALL_OW 441
11801: GO 11769
11803: POP
11804: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11805: LD_VAR 0 18
11809: PPUSH
11810: LD_INT 2
11812: PUSH
11813: LD_INT 30
11815: PUSH
11816: LD_INT 32
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 30
11825: PUSH
11826: LD_INT 33
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: LIST
11837: PPUSH
11838: CALL_OW 72
11842: IFFALSE 11930
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11844: LD_ADDR_VAR 0 8
11848: PUSH
11849: LD_VAR 0 18
11853: PPUSH
11854: LD_INT 2
11856: PUSH
11857: LD_INT 30
11859: PUSH
11860: LD_INT 32
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: LD_INT 30
11869: PUSH
11870: LD_INT 33
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: PPUSH
11882: CALL_OW 72
11886: PUSH
11887: FOR_IN
11888: IFFALSE 11928
// begin if not GetBWeapon ( i ) then
11890: LD_VAR 0 8
11894: PPUSH
11895: CALL_OW 269
11899: NOT
11900: IFFALSE 11926
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11902: LD_VAR 0 8
11906: PPUSH
11907: LD_VAR 0 8
11911: PPUSH
11912: LD_VAR 0 2
11916: PPUSH
11917: CALL 13176 0 2
11921: PPUSH
11922: CALL_OW 431
// end ;
11926: GO 11887
11928: POP
11929: POP
// end ; for i = 1 to personel do
11930: LD_ADDR_VAR 0 8
11934: PUSH
11935: DOUBLE
11936: LD_INT 1
11938: DEC
11939: ST_TO_ADDR
11940: LD_VAR 0 6
11944: PUSH
11945: FOR_TO
11946: IFFALSE 13010
// begin if i > 4 then
11948: LD_VAR 0 8
11952: PUSH
11953: LD_INT 4
11955: GREATER
11956: IFFALSE 11960
// break ;
11958: GO 13010
// case i of 1 :
11960: LD_VAR 0 8
11964: PUSH
11965: LD_INT 1
11967: DOUBLE
11968: EQUAL
11969: IFTRUE 11973
11971: GO 12053
11973: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11974: LD_ADDR_VAR 0 12
11978: PUSH
11979: LD_VAR 0 18
11983: PPUSH
11984: LD_INT 22
11986: PUSH
11987: LD_VAR 0 16
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: LD_INT 58
11998: PUSH
11999: EMPTY
12000: LIST
12001: PUSH
12002: LD_INT 2
12004: PUSH
12005: LD_INT 30
12007: PUSH
12008: LD_INT 32
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 30
12017: PUSH
12018: LD_INT 4
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 30
12027: PUSH
12028: LD_INT 5
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: LIST
12045: PPUSH
12046: CALL_OW 72
12050: ST_TO_ADDR
12051: GO 12275
12053: LD_INT 2
12055: DOUBLE
12056: EQUAL
12057: IFTRUE 12061
12059: GO 12123
12061: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12062: LD_ADDR_VAR 0 12
12066: PUSH
12067: LD_VAR 0 18
12071: PPUSH
12072: LD_INT 22
12074: PUSH
12075: LD_VAR 0 16
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PUSH
12084: LD_INT 2
12086: PUSH
12087: LD_INT 30
12089: PUSH
12090: LD_INT 0
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PUSH
12097: LD_INT 30
12099: PUSH
12100: LD_INT 1
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PPUSH
12116: CALL_OW 72
12120: ST_TO_ADDR
12121: GO 12275
12123: LD_INT 3
12125: DOUBLE
12126: EQUAL
12127: IFTRUE 12131
12129: GO 12193
12131: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12132: LD_ADDR_VAR 0 12
12136: PUSH
12137: LD_VAR 0 18
12141: PPUSH
12142: LD_INT 22
12144: PUSH
12145: LD_VAR 0 16
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: LD_INT 2
12156: PUSH
12157: LD_INT 30
12159: PUSH
12160: LD_INT 2
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: PUSH
12167: LD_INT 30
12169: PUSH
12170: LD_INT 3
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: LIST
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PPUSH
12186: CALL_OW 72
12190: ST_TO_ADDR
12191: GO 12275
12193: LD_INT 4
12195: DOUBLE
12196: EQUAL
12197: IFTRUE 12201
12199: GO 12274
12201: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12202: LD_ADDR_VAR 0 12
12206: PUSH
12207: LD_VAR 0 18
12211: PPUSH
12212: LD_INT 22
12214: PUSH
12215: LD_VAR 0 16
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 2
12226: PUSH
12227: LD_INT 30
12229: PUSH
12230: LD_INT 6
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: LD_INT 30
12239: PUSH
12240: LD_INT 7
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PUSH
12247: LD_INT 30
12249: PUSH
12250: LD_INT 8
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PPUSH
12267: CALL_OW 72
12271: ST_TO_ADDR
12272: GO 12275
12274: POP
// if i = 1 then
12275: LD_VAR 0 8
12279: PUSH
12280: LD_INT 1
12282: EQUAL
12283: IFFALSE 12394
// begin tmp := [ ] ;
12285: LD_ADDR_VAR 0 19
12289: PUSH
12290: EMPTY
12291: ST_TO_ADDR
// for j in f do
12292: LD_ADDR_VAR 0 9
12296: PUSH
12297: LD_VAR 0 12
12301: PUSH
12302: FOR_IN
12303: IFFALSE 12376
// if GetBType ( j ) = b_bunker then
12305: LD_VAR 0 9
12309: PPUSH
12310: CALL_OW 266
12314: PUSH
12315: LD_INT 32
12317: EQUAL
12318: IFFALSE 12345
// tmp := Insert ( tmp , 1 , j ) else
12320: LD_ADDR_VAR 0 19
12324: PUSH
12325: LD_VAR 0 19
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: LD_VAR 0 9
12337: PPUSH
12338: CALL_OW 2
12342: ST_TO_ADDR
12343: GO 12374
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12345: LD_ADDR_VAR 0 19
12349: PUSH
12350: LD_VAR 0 19
12354: PPUSH
12355: LD_VAR 0 19
12359: PUSH
12360: LD_INT 1
12362: PLUS
12363: PPUSH
12364: LD_VAR 0 9
12368: PPUSH
12369: CALL_OW 2
12373: ST_TO_ADDR
12374: GO 12302
12376: POP
12377: POP
// if tmp then
12378: LD_VAR 0 19
12382: IFFALSE 12394
// f := tmp ;
12384: LD_ADDR_VAR 0 12
12388: PUSH
12389: LD_VAR 0 19
12393: ST_TO_ADDR
// end ; x := personel [ i ] ;
12394: LD_ADDR_VAR 0 13
12398: PUSH
12399: LD_VAR 0 6
12403: PUSH
12404: LD_VAR 0 8
12408: ARRAY
12409: ST_TO_ADDR
// if x = - 1 then
12410: LD_VAR 0 13
12414: PUSH
12415: LD_INT 1
12417: NEG
12418: EQUAL
12419: IFFALSE 12628
// begin for j in f do
12421: LD_ADDR_VAR 0 9
12425: PUSH
12426: LD_VAR 0 12
12430: PUSH
12431: FOR_IN
12432: IFFALSE 12624
// repeat InitHc ;
12434: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12438: LD_VAR 0 9
12442: PPUSH
12443: CALL_OW 266
12447: PUSH
12448: LD_INT 5
12450: EQUAL
12451: IFFALSE 12521
// begin if UnitsInside ( j ) < 3 then
12453: LD_VAR 0 9
12457: PPUSH
12458: CALL_OW 313
12462: PUSH
12463: LD_INT 3
12465: LESS
12466: IFFALSE 12502
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12468: LD_INT 0
12470: PPUSH
12471: LD_INT 5
12473: PUSH
12474: LD_INT 8
12476: PUSH
12477: LD_INT 9
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: LIST
12484: PUSH
12485: LD_VAR 0 17
12489: ARRAY
12490: PPUSH
12491: LD_VAR 0 4
12495: PPUSH
12496: CALL_OW 380
12500: GO 12519
// PrepareHuman ( false , i , skill ) ;
12502: LD_INT 0
12504: PPUSH
12505: LD_VAR 0 8
12509: PPUSH
12510: LD_VAR 0 4
12514: PPUSH
12515: CALL_OW 380
// end else
12519: GO 12538
// PrepareHuman ( false , i , skill ) ;
12521: LD_INT 0
12523: PPUSH
12524: LD_VAR 0 8
12528: PPUSH
12529: LD_VAR 0 4
12533: PPUSH
12534: CALL_OW 380
// un := CreateHuman ;
12538: LD_ADDR_VAR 0 14
12542: PUSH
12543: CALL_OW 44
12547: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12548: LD_ADDR_VAR 0 7
12552: PUSH
12553: LD_VAR 0 7
12557: PPUSH
12558: LD_INT 1
12560: PPUSH
12561: LD_VAR 0 14
12565: PPUSH
12566: CALL_OW 2
12570: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12571: LD_VAR 0 14
12575: PPUSH
12576: LD_VAR 0 9
12580: PPUSH
12581: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12585: LD_VAR 0 9
12589: PPUSH
12590: CALL_OW 313
12594: PUSH
12595: LD_INT 6
12597: EQUAL
12598: PUSH
12599: LD_VAR 0 9
12603: PPUSH
12604: CALL_OW 266
12608: PUSH
12609: LD_INT 32
12611: PUSH
12612: LD_INT 31
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: IN
12619: OR
12620: IFFALSE 12434
12622: GO 12431
12624: POP
12625: POP
// end else
12626: GO 13008
// for j = 1 to x do
12628: LD_ADDR_VAR 0 9
12632: PUSH
12633: DOUBLE
12634: LD_INT 1
12636: DEC
12637: ST_TO_ADDR
12638: LD_VAR 0 13
12642: PUSH
12643: FOR_TO
12644: IFFALSE 13006
// begin InitHc ;
12646: CALL_OW 19
// if not f then
12650: LD_VAR 0 12
12654: NOT
12655: IFFALSE 12744
// begin PrepareHuman ( false , i , skill ) ;
12657: LD_INT 0
12659: PPUSH
12660: LD_VAR 0 8
12664: PPUSH
12665: LD_VAR 0 4
12669: PPUSH
12670: CALL_OW 380
// un := CreateHuman ;
12674: LD_ADDR_VAR 0 14
12678: PUSH
12679: CALL_OW 44
12683: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12684: LD_ADDR_VAR 0 7
12688: PUSH
12689: LD_VAR 0 7
12693: PPUSH
12694: LD_INT 1
12696: PPUSH
12697: LD_VAR 0 14
12701: PPUSH
12702: CALL_OW 2
12706: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12707: LD_VAR 0 14
12711: PPUSH
12712: LD_VAR 0 1
12716: PPUSH
12717: CALL_OW 250
12721: PPUSH
12722: LD_VAR 0 1
12726: PPUSH
12727: CALL_OW 251
12731: PPUSH
12732: LD_INT 10
12734: PPUSH
12735: LD_INT 0
12737: PPUSH
12738: CALL_OW 50
// continue ;
12742: GO 12643
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12744: LD_VAR 0 12
12748: PUSH
12749: LD_INT 1
12751: ARRAY
12752: PPUSH
12753: CALL_OW 313
12757: PUSH
12758: LD_VAR 0 12
12762: PUSH
12763: LD_INT 1
12765: ARRAY
12766: PPUSH
12767: CALL_OW 266
12771: PUSH
12772: LD_INT 32
12774: PUSH
12775: LD_INT 31
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: IN
12782: AND
12783: PUSH
12784: LD_VAR 0 12
12788: PUSH
12789: LD_INT 1
12791: ARRAY
12792: PPUSH
12793: CALL_OW 313
12797: PUSH
12798: LD_INT 6
12800: EQUAL
12801: OR
12802: IFFALSE 12822
// f := Delete ( f , 1 ) ;
12804: LD_ADDR_VAR 0 12
12808: PUSH
12809: LD_VAR 0 12
12813: PPUSH
12814: LD_INT 1
12816: PPUSH
12817: CALL_OW 3
12821: ST_TO_ADDR
// if not f then
12822: LD_VAR 0 12
12826: NOT
12827: IFFALSE 12845
// begin x := x + 2 ;
12829: LD_ADDR_VAR 0 13
12833: PUSH
12834: LD_VAR 0 13
12838: PUSH
12839: LD_INT 2
12841: PLUS
12842: ST_TO_ADDR
// continue ;
12843: GO 12643
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12845: LD_VAR 0 12
12849: PUSH
12850: LD_INT 1
12852: ARRAY
12853: PPUSH
12854: CALL_OW 266
12858: PUSH
12859: LD_INT 5
12861: EQUAL
12862: IFFALSE 12936
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12864: LD_VAR 0 12
12868: PUSH
12869: LD_INT 1
12871: ARRAY
12872: PPUSH
12873: CALL_OW 313
12877: PUSH
12878: LD_INT 3
12880: LESS
12881: IFFALSE 12917
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12883: LD_INT 0
12885: PPUSH
12886: LD_INT 5
12888: PUSH
12889: LD_INT 8
12891: PUSH
12892: LD_INT 9
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: LIST
12899: PUSH
12900: LD_VAR 0 17
12904: ARRAY
12905: PPUSH
12906: LD_VAR 0 4
12910: PPUSH
12911: CALL_OW 380
12915: GO 12934
// PrepareHuman ( false , i , skill ) ;
12917: LD_INT 0
12919: PPUSH
12920: LD_VAR 0 8
12924: PPUSH
12925: LD_VAR 0 4
12929: PPUSH
12930: CALL_OW 380
// end else
12934: GO 12953
// PrepareHuman ( false , i , skill ) ;
12936: LD_INT 0
12938: PPUSH
12939: LD_VAR 0 8
12943: PPUSH
12944: LD_VAR 0 4
12948: PPUSH
12949: CALL_OW 380
// un := CreateHuman ;
12953: LD_ADDR_VAR 0 14
12957: PUSH
12958: CALL_OW 44
12962: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12963: LD_ADDR_VAR 0 7
12967: PUSH
12968: LD_VAR 0 7
12972: PPUSH
12973: LD_INT 1
12975: PPUSH
12976: LD_VAR 0 14
12980: PPUSH
12981: CALL_OW 2
12985: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12986: LD_VAR 0 14
12990: PPUSH
12991: LD_VAR 0 12
12995: PUSH
12996: LD_INT 1
12998: ARRAY
12999: PPUSH
13000: CALL_OW 52
// end ;
13004: GO 12643
13006: POP
13007: POP
// end ;
13008: GO 11945
13010: POP
13011: POP
// result := result ^ buildings ;
13012: LD_ADDR_VAR 0 7
13016: PUSH
13017: LD_VAR 0 7
13021: PUSH
13022: LD_VAR 0 18
13026: ADD
13027: ST_TO_ADDR
// end else
13028: GO 13171
// begin for i = 1 to personel do
13030: LD_ADDR_VAR 0 8
13034: PUSH
13035: DOUBLE
13036: LD_INT 1
13038: DEC
13039: ST_TO_ADDR
13040: LD_VAR 0 6
13044: PUSH
13045: FOR_TO
13046: IFFALSE 13169
// begin if i > 4 then
13048: LD_VAR 0 8
13052: PUSH
13053: LD_INT 4
13055: GREATER
13056: IFFALSE 13060
// break ;
13058: GO 13169
// x := personel [ i ] ;
13060: LD_ADDR_VAR 0 13
13064: PUSH
13065: LD_VAR 0 6
13069: PUSH
13070: LD_VAR 0 8
13074: ARRAY
13075: ST_TO_ADDR
// if x = - 1 then
13076: LD_VAR 0 13
13080: PUSH
13081: LD_INT 1
13083: NEG
13084: EQUAL
13085: IFFALSE 13089
// continue ;
13087: GO 13045
// PrepareHuman ( false , i , skill ) ;
13089: LD_INT 0
13091: PPUSH
13092: LD_VAR 0 8
13096: PPUSH
13097: LD_VAR 0 4
13101: PPUSH
13102: CALL_OW 380
// un := CreateHuman ;
13106: LD_ADDR_VAR 0 14
13110: PUSH
13111: CALL_OW 44
13115: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13116: LD_VAR 0 14
13120: PPUSH
13121: LD_VAR 0 1
13125: PPUSH
13126: CALL_OW 250
13130: PPUSH
13131: LD_VAR 0 1
13135: PPUSH
13136: CALL_OW 251
13140: PPUSH
13141: LD_INT 10
13143: PPUSH
13144: LD_INT 0
13146: PPUSH
13147: CALL_OW 50
// result := result ^ un ;
13151: LD_ADDR_VAR 0 7
13155: PUSH
13156: LD_VAR 0 7
13160: PUSH
13161: LD_VAR 0 14
13165: ADD
13166: ST_TO_ADDR
// end ;
13167: GO 13045
13169: POP
13170: POP
// end ; end ;
13171: LD_VAR 0 7
13175: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13176: LD_INT 0
13178: PPUSH
13179: PPUSH
13180: PPUSH
13181: PPUSH
13182: PPUSH
13183: PPUSH
13184: PPUSH
13185: PPUSH
13186: PPUSH
13187: PPUSH
13188: PPUSH
13189: PPUSH
13190: PPUSH
13191: PPUSH
13192: PPUSH
13193: PPUSH
// result := false ;
13194: LD_ADDR_VAR 0 3
13198: PUSH
13199: LD_INT 0
13201: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13202: LD_VAR 0 1
13206: NOT
13207: PUSH
13208: LD_VAR 0 1
13212: PPUSH
13213: CALL_OW 266
13217: PUSH
13218: LD_INT 32
13220: PUSH
13221: LD_INT 33
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: IN
13228: NOT
13229: OR
13230: IFFALSE 13234
// exit ;
13232: GO 14343
// nat := GetNation ( tower ) ;
13234: LD_ADDR_VAR 0 12
13238: PUSH
13239: LD_VAR 0 1
13243: PPUSH
13244: CALL_OW 248
13248: ST_TO_ADDR
// side := GetSide ( tower ) ;
13249: LD_ADDR_VAR 0 16
13253: PUSH
13254: LD_VAR 0 1
13258: PPUSH
13259: CALL_OW 255
13263: ST_TO_ADDR
// x := GetX ( tower ) ;
13264: LD_ADDR_VAR 0 10
13268: PUSH
13269: LD_VAR 0 1
13273: PPUSH
13274: CALL_OW 250
13278: ST_TO_ADDR
// y := GetY ( tower ) ;
13279: LD_ADDR_VAR 0 11
13283: PUSH
13284: LD_VAR 0 1
13288: PPUSH
13289: CALL_OW 251
13293: ST_TO_ADDR
// if not x or not y then
13294: LD_VAR 0 10
13298: NOT
13299: PUSH
13300: LD_VAR 0 11
13304: NOT
13305: OR
13306: IFFALSE 13310
// exit ;
13308: GO 14343
// weapon := 0 ;
13310: LD_ADDR_VAR 0 18
13314: PUSH
13315: LD_INT 0
13317: ST_TO_ADDR
// fac_list := [ ] ;
13318: LD_ADDR_VAR 0 17
13322: PUSH
13323: EMPTY
13324: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13325: LD_ADDR_VAR 0 6
13329: PUSH
13330: LD_VAR 0 1
13334: PPUSH
13335: CALL_OW 274
13339: PPUSH
13340: LD_VAR 0 2
13344: PPUSH
13345: LD_INT 0
13347: PPUSH
13348: CALL 10914 0 3
13352: PPUSH
13353: LD_INT 30
13355: PUSH
13356: LD_INT 3
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PPUSH
13363: CALL_OW 72
13367: ST_TO_ADDR
// if not factories then
13368: LD_VAR 0 6
13372: NOT
13373: IFFALSE 13377
// exit ;
13375: GO 14343
// for i in factories do
13377: LD_ADDR_VAR 0 8
13381: PUSH
13382: LD_VAR 0 6
13386: PUSH
13387: FOR_IN
13388: IFFALSE 13413
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13390: LD_ADDR_VAR 0 17
13394: PUSH
13395: LD_VAR 0 17
13399: PUSH
13400: LD_VAR 0 8
13404: PPUSH
13405: CALL_OW 478
13409: UNION
13410: ST_TO_ADDR
13411: GO 13387
13413: POP
13414: POP
// if not fac_list then
13415: LD_VAR 0 17
13419: NOT
13420: IFFALSE 13424
// exit ;
13422: GO 14343
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13424: LD_ADDR_VAR 0 5
13428: PUSH
13429: LD_INT 4
13431: PUSH
13432: LD_INT 5
13434: PUSH
13435: LD_INT 9
13437: PUSH
13438: LD_INT 10
13440: PUSH
13441: LD_INT 6
13443: PUSH
13444: LD_INT 7
13446: PUSH
13447: LD_INT 11
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: PUSH
13459: LD_INT 27
13461: PUSH
13462: LD_INT 28
13464: PUSH
13465: LD_INT 26
13467: PUSH
13468: LD_INT 30
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 43
13479: PUSH
13480: LD_INT 44
13482: PUSH
13483: LD_INT 46
13485: PUSH
13486: LD_INT 45
13488: PUSH
13489: LD_INT 47
13491: PUSH
13492: LD_INT 49
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: LIST
13507: PUSH
13508: LD_VAR 0 12
13512: ARRAY
13513: ST_TO_ADDR
// list := list isect fac_list ;
13514: LD_ADDR_VAR 0 5
13518: PUSH
13519: LD_VAR 0 5
13523: PUSH
13524: LD_VAR 0 17
13528: ISECT
13529: ST_TO_ADDR
// if not list then
13530: LD_VAR 0 5
13534: NOT
13535: IFFALSE 13539
// exit ;
13537: GO 14343
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13539: LD_VAR 0 12
13543: PUSH
13544: LD_INT 3
13546: EQUAL
13547: PUSH
13548: LD_INT 49
13550: PUSH
13551: LD_VAR 0 5
13555: IN
13556: AND
13557: PUSH
13558: LD_INT 31
13560: PPUSH
13561: LD_VAR 0 16
13565: PPUSH
13566: CALL_OW 321
13570: PUSH
13571: LD_INT 2
13573: EQUAL
13574: AND
13575: IFFALSE 13635
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13577: LD_INT 22
13579: PUSH
13580: LD_VAR 0 16
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PUSH
13589: LD_INT 35
13591: PUSH
13592: LD_INT 49
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: PUSH
13599: LD_INT 91
13601: PUSH
13602: LD_VAR 0 1
13606: PUSH
13607: LD_INT 10
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: LIST
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: PPUSH
13620: CALL_OW 69
13624: NOT
13625: IFFALSE 13635
// weapon := ru_time_lapser ;
13627: LD_ADDR_VAR 0 18
13631: PUSH
13632: LD_INT 49
13634: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13635: LD_VAR 0 12
13639: PUSH
13640: LD_INT 1
13642: PUSH
13643: LD_INT 2
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: IN
13650: PUSH
13651: LD_INT 11
13653: PUSH
13654: LD_VAR 0 5
13658: IN
13659: PUSH
13660: LD_INT 30
13662: PUSH
13663: LD_VAR 0 5
13667: IN
13668: OR
13669: AND
13670: PUSH
13671: LD_INT 6
13673: PPUSH
13674: LD_VAR 0 16
13678: PPUSH
13679: CALL_OW 321
13683: PUSH
13684: LD_INT 2
13686: EQUAL
13687: AND
13688: IFFALSE 13853
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13690: LD_INT 22
13692: PUSH
13693: LD_VAR 0 16
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 2
13704: PUSH
13705: LD_INT 35
13707: PUSH
13708: LD_INT 11
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PUSH
13715: LD_INT 35
13717: PUSH
13718: LD_INT 30
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 91
13732: PUSH
13733: LD_VAR 0 1
13737: PUSH
13738: LD_INT 18
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: LIST
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: PPUSH
13751: CALL_OW 69
13755: NOT
13756: PUSH
13757: LD_INT 22
13759: PUSH
13760: LD_VAR 0 16
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PUSH
13769: LD_INT 2
13771: PUSH
13772: LD_INT 30
13774: PUSH
13775: LD_INT 32
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PUSH
13782: LD_INT 30
13784: PUSH
13785: LD_INT 33
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 91
13799: PUSH
13800: LD_VAR 0 1
13804: PUSH
13805: LD_INT 12
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: LIST
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: LIST
13817: PUSH
13818: EMPTY
13819: LIST
13820: PPUSH
13821: CALL_OW 69
13825: PUSH
13826: LD_INT 2
13828: GREATER
13829: AND
13830: IFFALSE 13853
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13832: LD_ADDR_VAR 0 18
13836: PUSH
13837: LD_INT 11
13839: PUSH
13840: LD_INT 30
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PUSH
13847: LD_VAR 0 12
13851: ARRAY
13852: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13853: LD_VAR 0 18
13857: NOT
13858: PUSH
13859: LD_INT 40
13861: PPUSH
13862: LD_VAR 0 16
13866: PPUSH
13867: CALL_OW 321
13871: PUSH
13872: LD_INT 2
13874: EQUAL
13875: AND
13876: PUSH
13877: LD_INT 7
13879: PUSH
13880: LD_VAR 0 5
13884: IN
13885: PUSH
13886: LD_INT 28
13888: PUSH
13889: LD_VAR 0 5
13893: IN
13894: OR
13895: PUSH
13896: LD_INT 45
13898: PUSH
13899: LD_VAR 0 5
13903: IN
13904: OR
13905: AND
13906: IFFALSE 14160
// begin hex := GetHexInfo ( x , y ) ;
13908: LD_ADDR_VAR 0 4
13912: PUSH
13913: LD_VAR 0 10
13917: PPUSH
13918: LD_VAR 0 11
13922: PPUSH
13923: CALL_OW 546
13927: ST_TO_ADDR
// if hex [ 1 ] then
13928: LD_VAR 0 4
13932: PUSH
13933: LD_INT 1
13935: ARRAY
13936: IFFALSE 13940
// exit ;
13938: GO 14343
// height := hex [ 2 ] ;
13940: LD_ADDR_VAR 0 15
13944: PUSH
13945: LD_VAR 0 4
13949: PUSH
13950: LD_INT 2
13952: ARRAY
13953: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13954: LD_ADDR_VAR 0 14
13958: PUSH
13959: LD_INT 0
13961: PUSH
13962: LD_INT 2
13964: PUSH
13965: LD_INT 3
13967: PUSH
13968: LD_INT 5
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: ST_TO_ADDR
// for i in tmp do
13977: LD_ADDR_VAR 0 8
13981: PUSH
13982: LD_VAR 0 14
13986: PUSH
13987: FOR_IN
13988: IFFALSE 14158
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13990: LD_ADDR_VAR 0 9
13994: PUSH
13995: LD_VAR 0 10
13999: PPUSH
14000: LD_VAR 0 8
14004: PPUSH
14005: LD_INT 5
14007: PPUSH
14008: CALL_OW 272
14012: PUSH
14013: LD_VAR 0 11
14017: PPUSH
14018: LD_VAR 0 8
14022: PPUSH
14023: LD_INT 5
14025: PPUSH
14026: CALL_OW 273
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14035: LD_VAR 0 9
14039: PUSH
14040: LD_INT 1
14042: ARRAY
14043: PPUSH
14044: LD_VAR 0 9
14048: PUSH
14049: LD_INT 2
14051: ARRAY
14052: PPUSH
14053: CALL_OW 488
14057: IFFALSE 14156
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14059: LD_ADDR_VAR 0 4
14063: PUSH
14064: LD_VAR 0 9
14068: PUSH
14069: LD_INT 1
14071: ARRAY
14072: PPUSH
14073: LD_VAR 0 9
14077: PUSH
14078: LD_INT 2
14080: ARRAY
14081: PPUSH
14082: CALL_OW 546
14086: ST_TO_ADDR
// if hex [ 1 ] then
14087: LD_VAR 0 4
14091: PUSH
14092: LD_INT 1
14094: ARRAY
14095: IFFALSE 14099
// continue ;
14097: GO 13987
// h := hex [ 2 ] ;
14099: LD_ADDR_VAR 0 13
14103: PUSH
14104: LD_VAR 0 4
14108: PUSH
14109: LD_INT 2
14111: ARRAY
14112: ST_TO_ADDR
// if h + 7 < height then
14113: LD_VAR 0 13
14117: PUSH
14118: LD_INT 7
14120: PLUS
14121: PUSH
14122: LD_VAR 0 15
14126: LESS
14127: IFFALSE 14156
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14129: LD_ADDR_VAR 0 18
14133: PUSH
14134: LD_INT 7
14136: PUSH
14137: LD_INT 28
14139: PUSH
14140: LD_INT 45
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: PUSH
14148: LD_VAR 0 12
14152: ARRAY
14153: ST_TO_ADDR
// break ;
14154: GO 14158
// end ; end ; end ;
14156: GO 13987
14158: POP
14159: POP
// end ; if not weapon then
14160: LD_VAR 0 18
14164: NOT
14165: IFFALSE 14225
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14167: LD_ADDR_VAR 0 5
14171: PUSH
14172: LD_VAR 0 5
14176: PUSH
14177: LD_INT 11
14179: PUSH
14180: LD_INT 30
14182: PUSH
14183: LD_INT 49
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: LIST
14190: DIFF
14191: ST_TO_ADDR
// if not list then
14192: LD_VAR 0 5
14196: NOT
14197: IFFALSE 14201
// exit ;
14199: GO 14343
// weapon := list [ rand ( 1 , list ) ] ;
14201: LD_ADDR_VAR 0 18
14205: PUSH
14206: LD_VAR 0 5
14210: PUSH
14211: LD_INT 1
14213: PPUSH
14214: LD_VAR 0 5
14218: PPUSH
14219: CALL_OW 12
14223: ARRAY
14224: ST_TO_ADDR
// end ; if weapon then
14225: LD_VAR 0 18
14229: IFFALSE 14343
// begin tmp := CostOfWeapon ( weapon ) ;
14231: LD_ADDR_VAR 0 14
14235: PUSH
14236: LD_VAR 0 18
14240: PPUSH
14241: CALL_OW 451
14245: ST_TO_ADDR
// j := GetBase ( tower ) ;
14246: LD_ADDR_VAR 0 9
14250: PUSH
14251: LD_VAR 0 1
14255: PPUSH
14256: CALL_OW 274
14260: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14261: LD_VAR 0 9
14265: PPUSH
14266: LD_INT 1
14268: PPUSH
14269: CALL_OW 275
14273: PUSH
14274: LD_VAR 0 14
14278: PUSH
14279: LD_INT 1
14281: ARRAY
14282: GREATEREQUAL
14283: PUSH
14284: LD_VAR 0 9
14288: PPUSH
14289: LD_INT 2
14291: PPUSH
14292: CALL_OW 275
14296: PUSH
14297: LD_VAR 0 14
14301: PUSH
14302: LD_INT 2
14304: ARRAY
14305: GREATEREQUAL
14306: AND
14307: PUSH
14308: LD_VAR 0 9
14312: PPUSH
14313: LD_INT 3
14315: PPUSH
14316: CALL_OW 275
14320: PUSH
14321: LD_VAR 0 14
14325: PUSH
14326: LD_INT 3
14328: ARRAY
14329: GREATEREQUAL
14330: AND
14331: IFFALSE 14343
// result := weapon ;
14333: LD_ADDR_VAR 0 3
14337: PUSH
14338: LD_VAR 0 18
14342: ST_TO_ADDR
// end ; end ;
14343: LD_VAR 0 3
14347: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14348: LD_INT 0
14350: PPUSH
14351: PPUSH
// result := true ;
14352: LD_ADDR_VAR 0 3
14356: PUSH
14357: LD_INT 1
14359: ST_TO_ADDR
// if array1 = array2 then
14360: LD_VAR 0 1
14364: PUSH
14365: LD_VAR 0 2
14369: EQUAL
14370: IFFALSE 14430
// begin for i = 1 to array1 do
14372: LD_ADDR_VAR 0 4
14376: PUSH
14377: DOUBLE
14378: LD_INT 1
14380: DEC
14381: ST_TO_ADDR
14382: LD_VAR 0 1
14386: PUSH
14387: FOR_TO
14388: IFFALSE 14426
// if array1 [ i ] <> array2 [ i ] then
14390: LD_VAR 0 1
14394: PUSH
14395: LD_VAR 0 4
14399: ARRAY
14400: PUSH
14401: LD_VAR 0 2
14405: PUSH
14406: LD_VAR 0 4
14410: ARRAY
14411: NONEQUAL
14412: IFFALSE 14424
// begin result := false ;
14414: LD_ADDR_VAR 0 3
14418: PUSH
14419: LD_INT 0
14421: ST_TO_ADDR
// break ;
14422: GO 14426
// end ;
14424: GO 14387
14426: POP
14427: POP
// end else
14428: GO 14438
// result := false ;
14430: LD_ADDR_VAR 0 3
14434: PUSH
14435: LD_INT 0
14437: ST_TO_ADDR
// end ;
14438: LD_VAR 0 3
14442: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14443: LD_INT 0
14445: PPUSH
14446: PPUSH
// if not array1 or not array2 then
14447: LD_VAR 0 1
14451: NOT
14452: PUSH
14453: LD_VAR 0 2
14457: NOT
14458: OR
14459: IFFALSE 14463
// exit ;
14461: GO 14527
// result := true ;
14463: LD_ADDR_VAR 0 3
14467: PUSH
14468: LD_INT 1
14470: ST_TO_ADDR
// for i = 1 to array1 do
14471: LD_ADDR_VAR 0 4
14475: PUSH
14476: DOUBLE
14477: LD_INT 1
14479: DEC
14480: ST_TO_ADDR
14481: LD_VAR 0 1
14485: PUSH
14486: FOR_TO
14487: IFFALSE 14525
// if array1 [ i ] <> array2 [ i ] then
14489: LD_VAR 0 1
14493: PUSH
14494: LD_VAR 0 4
14498: ARRAY
14499: PUSH
14500: LD_VAR 0 2
14504: PUSH
14505: LD_VAR 0 4
14509: ARRAY
14510: NONEQUAL
14511: IFFALSE 14523
// begin result := false ;
14513: LD_ADDR_VAR 0 3
14517: PUSH
14518: LD_INT 0
14520: ST_TO_ADDR
// break ;
14521: GO 14525
// end ;
14523: GO 14486
14525: POP
14526: POP
// end ;
14527: LD_VAR 0 3
14531: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14532: LD_INT 0
14534: PPUSH
14535: PPUSH
14536: PPUSH
// pom := GetBase ( fac ) ;
14537: LD_ADDR_VAR 0 5
14541: PUSH
14542: LD_VAR 0 1
14546: PPUSH
14547: CALL_OW 274
14551: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14552: LD_ADDR_VAR 0 4
14556: PUSH
14557: LD_VAR 0 2
14561: PUSH
14562: LD_INT 1
14564: ARRAY
14565: PPUSH
14566: LD_VAR 0 2
14570: PUSH
14571: LD_INT 2
14573: ARRAY
14574: PPUSH
14575: LD_VAR 0 2
14579: PUSH
14580: LD_INT 3
14582: ARRAY
14583: PPUSH
14584: LD_VAR 0 2
14588: PUSH
14589: LD_INT 4
14591: ARRAY
14592: PPUSH
14593: CALL_OW 449
14597: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14598: LD_ADDR_VAR 0 3
14602: PUSH
14603: LD_VAR 0 5
14607: PPUSH
14608: LD_INT 1
14610: PPUSH
14611: CALL_OW 275
14615: PUSH
14616: LD_VAR 0 4
14620: PUSH
14621: LD_INT 1
14623: ARRAY
14624: GREATEREQUAL
14625: PUSH
14626: LD_VAR 0 5
14630: PPUSH
14631: LD_INT 2
14633: PPUSH
14634: CALL_OW 275
14638: PUSH
14639: LD_VAR 0 4
14643: PUSH
14644: LD_INT 2
14646: ARRAY
14647: GREATEREQUAL
14648: AND
14649: PUSH
14650: LD_VAR 0 5
14654: PPUSH
14655: LD_INT 3
14657: PPUSH
14658: CALL_OW 275
14662: PUSH
14663: LD_VAR 0 4
14667: PUSH
14668: LD_INT 3
14670: ARRAY
14671: GREATEREQUAL
14672: AND
14673: ST_TO_ADDR
// end ;
14674: LD_VAR 0 3
14678: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14679: LD_INT 0
14681: PPUSH
14682: PPUSH
14683: PPUSH
14684: PPUSH
// pom := GetBase ( building ) ;
14685: LD_ADDR_VAR 0 3
14689: PUSH
14690: LD_VAR 0 1
14694: PPUSH
14695: CALL_OW 274
14699: ST_TO_ADDR
// if not pom then
14700: LD_VAR 0 3
14704: NOT
14705: IFFALSE 14709
// exit ;
14707: GO 14879
// btype := GetBType ( building ) ;
14709: LD_ADDR_VAR 0 5
14713: PUSH
14714: LD_VAR 0 1
14718: PPUSH
14719: CALL_OW 266
14723: ST_TO_ADDR
// if btype = b_armoury then
14724: LD_VAR 0 5
14728: PUSH
14729: LD_INT 4
14731: EQUAL
14732: IFFALSE 14742
// btype := b_barracks ;
14734: LD_ADDR_VAR 0 5
14738: PUSH
14739: LD_INT 5
14741: ST_TO_ADDR
// if btype = b_depot then
14742: LD_VAR 0 5
14746: PUSH
14747: LD_INT 0
14749: EQUAL
14750: IFFALSE 14760
// btype := b_warehouse ;
14752: LD_ADDR_VAR 0 5
14756: PUSH
14757: LD_INT 1
14759: ST_TO_ADDR
// if btype = b_workshop then
14760: LD_VAR 0 5
14764: PUSH
14765: LD_INT 2
14767: EQUAL
14768: IFFALSE 14778
// btype := b_factory ;
14770: LD_ADDR_VAR 0 5
14774: PUSH
14775: LD_INT 3
14777: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14778: LD_ADDR_VAR 0 4
14782: PUSH
14783: LD_VAR 0 5
14787: PPUSH
14788: LD_VAR 0 1
14792: PPUSH
14793: CALL_OW 248
14797: PPUSH
14798: CALL_OW 450
14802: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14803: LD_ADDR_VAR 0 2
14807: PUSH
14808: LD_VAR 0 3
14812: PPUSH
14813: LD_INT 1
14815: PPUSH
14816: CALL_OW 275
14820: PUSH
14821: LD_VAR 0 4
14825: PUSH
14826: LD_INT 1
14828: ARRAY
14829: GREATEREQUAL
14830: PUSH
14831: LD_VAR 0 3
14835: PPUSH
14836: LD_INT 2
14838: PPUSH
14839: CALL_OW 275
14843: PUSH
14844: LD_VAR 0 4
14848: PUSH
14849: LD_INT 2
14851: ARRAY
14852: GREATEREQUAL
14853: AND
14854: PUSH
14855: LD_VAR 0 3
14859: PPUSH
14860: LD_INT 3
14862: PPUSH
14863: CALL_OW 275
14867: PUSH
14868: LD_VAR 0 4
14872: PUSH
14873: LD_INT 3
14875: ARRAY
14876: GREATEREQUAL
14877: AND
14878: ST_TO_ADDR
// end ;
14879: LD_VAR 0 2
14883: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14884: LD_INT 0
14886: PPUSH
14887: PPUSH
14888: PPUSH
// pom := GetBase ( building ) ;
14889: LD_ADDR_VAR 0 4
14893: PUSH
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 274
14903: ST_TO_ADDR
// if not pom then
14904: LD_VAR 0 4
14908: NOT
14909: IFFALSE 14913
// exit ;
14911: GO 15014
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14913: LD_ADDR_VAR 0 5
14917: PUSH
14918: LD_VAR 0 2
14922: PPUSH
14923: LD_VAR 0 1
14927: PPUSH
14928: CALL_OW 248
14932: PPUSH
14933: CALL_OW 450
14937: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14938: LD_ADDR_VAR 0 3
14942: PUSH
14943: LD_VAR 0 4
14947: PPUSH
14948: LD_INT 1
14950: PPUSH
14951: CALL_OW 275
14955: PUSH
14956: LD_VAR 0 5
14960: PUSH
14961: LD_INT 1
14963: ARRAY
14964: GREATEREQUAL
14965: PUSH
14966: LD_VAR 0 4
14970: PPUSH
14971: LD_INT 2
14973: PPUSH
14974: CALL_OW 275
14978: PUSH
14979: LD_VAR 0 5
14983: PUSH
14984: LD_INT 2
14986: ARRAY
14987: GREATEREQUAL
14988: AND
14989: PUSH
14990: LD_VAR 0 4
14994: PPUSH
14995: LD_INT 3
14997: PPUSH
14998: CALL_OW 275
15002: PUSH
15003: LD_VAR 0 5
15007: PUSH
15008: LD_INT 3
15010: ARRAY
15011: GREATEREQUAL
15012: AND
15013: ST_TO_ADDR
// end ;
15014: LD_VAR 0 3
15018: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15019: LD_INT 0
15021: PPUSH
15022: PPUSH
15023: PPUSH
15024: PPUSH
15025: PPUSH
15026: PPUSH
15027: PPUSH
15028: PPUSH
15029: PPUSH
15030: PPUSH
15031: PPUSH
// result := false ;
15032: LD_ADDR_VAR 0 8
15036: PUSH
15037: LD_INT 0
15039: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15040: LD_VAR 0 5
15044: NOT
15045: PUSH
15046: LD_VAR 0 1
15050: NOT
15051: OR
15052: PUSH
15053: LD_VAR 0 2
15057: NOT
15058: OR
15059: PUSH
15060: LD_VAR 0 3
15064: NOT
15065: OR
15066: IFFALSE 15070
// exit ;
15068: GO 15884
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15070: LD_ADDR_VAR 0 14
15074: PUSH
15075: LD_VAR 0 1
15079: PPUSH
15080: LD_VAR 0 2
15084: PPUSH
15085: LD_VAR 0 3
15089: PPUSH
15090: LD_VAR 0 4
15094: PPUSH
15095: LD_VAR 0 5
15099: PUSH
15100: LD_INT 1
15102: ARRAY
15103: PPUSH
15104: CALL_OW 248
15108: PPUSH
15109: LD_INT 0
15111: PPUSH
15112: CALL 17137 0 6
15116: ST_TO_ADDR
// if not hexes then
15117: LD_VAR 0 14
15121: NOT
15122: IFFALSE 15126
// exit ;
15124: GO 15884
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15126: LD_ADDR_VAR 0 17
15130: PUSH
15131: LD_VAR 0 5
15135: PPUSH
15136: LD_INT 22
15138: PUSH
15139: LD_VAR 0 13
15143: PPUSH
15144: CALL_OW 255
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 2
15155: PUSH
15156: LD_INT 30
15158: PUSH
15159: LD_INT 0
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: PUSH
15166: LD_INT 30
15168: PUSH
15169: LD_INT 1
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: LIST
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PPUSH
15185: CALL_OW 72
15189: ST_TO_ADDR
// for i = 1 to hexes do
15190: LD_ADDR_VAR 0 9
15194: PUSH
15195: DOUBLE
15196: LD_INT 1
15198: DEC
15199: ST_TO_ADDR
15200: LD_VAR 0 14
15204: PUSH
15205: FOR_TO
15206: IFFALSE 15882
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15208: LD_ADDR_VAR 0 13
15212: PUSH
15213: LD_VAR 0 14
15217: PUSH
15218: LD_VAR 0 9
15222: ARRAY
15223: PUSH
15224: LD_INT 1
15226: ARRAY
15227: PPUSH
15228: LD_VAR 0 14
15232: PUSH
15233: LD_VAR 0 9
15237: ARRAY
15238: PUSH
15239: LD_INT 2
15241: ARRAY
15242: PPUSH
15243: CALL_OW 428
15247: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15248: LD_VAR 0 14
15252: PUSH
15253: LD_VAR 0 9
15257: ARRAY
15258: PUSH
15259: LD_INT 1
15261: ARRAY
15262: PPUSH
15263: LD_VAR 0 14
15267: PUSH
15268: LD_VAR 0 9
15272: ARRAY
15273: PUSH
15274: LD_INT 2
15276: ARRAY
15277: PPUSH
15278: CALL_OW 351
15282: PUSH
15283: LD_VAR 0 14
15287: PUSH
15288: LD_VAR 0 9
15292: ARRAY
15293: PUSH
15294: LD_INT 1
15296: ARRAY
15297: PPUSH
15298: LD_VAR 0 14
15302: PUSH
15303: LD_VAR 0 9
15307: ARRAY
15308: PUSH
15309: LD_INT 2
15311: ARRAY
15312: PPUSH
15313: CALL_OW 488
15317: NOT
15318: OR
15319: PUSH
15320: LD_VAR 0 13
15324: PPUSH
15325: CALL_OW 247
15329: PUSH
15330: LD_INT 3
15332: EQUAL
15333: OR
15334: IFFALSE 15340
// exit ;
15336: POP
15337: POP
15338: GO 15884
// if not tmp then
15340: LD_VAR 0 13
15344: NOT
15345: IFFALSE 15349
// continue ;
15347: GO 15205
// result := true ;
15349: LD_ADDR_VAR 0 8
15353: PUSH
15354: LD_INT 1
15356: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15357: LD_VAR 0 6
15361: PUSH
15362: LD_VAR 0 13
15366: PPUSH
15367: CALL_OW 247
15371: PUSH
15372: LD_INT 2
15374: EQUAL
15375: AND
15376: PUSH
15377: LD_VAR 0 13
15381: PPUSH
15382: CALL_OW 263
15386: PUSH
15387: LD_INT 1
15389: EQUAL
15390: AND
15391: IFFALSE 15555
// begin if IsDrivenBy ( tmp ) then
15393: LD_VAR 0 13
15397: PPUSH
15398: CALL_OW 311
15402: IFFALSE 15406
// continue ;
15404: GO 15205
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15406: LD_VAR 0 6
15410: PPUSH
15411: LD_INT 3
15413: PUSH
15414: LD_INT 60
15416: PUSH
15417: EMPTY
15418: LIST
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: LD_INT 3
15426: PUSH
15427: LD_INT 55
15429: PUSH
15430: EMPTY
15431: LIST
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PPUSH
15441: CALL_OW 72
15445: IFFALSE 15553
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15447: LD_ADDR_VAR 0 18
15451: PUSH
15452: LD_VAR 0 6
15456: PPUSH
15457: LD_INT 3
15459: PUSH
15460: LD_INT 60
15462: PUSH
15463: EMPTY
15464: LIST
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: LD_INT 3
15472: PUSH
15473: LD_INT 55
15475: PUSH
15476: EMPTY
15477: LIST
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PPUSH
15487: CALL_OW 72
15491: PUSH
15492: LD_INT 1
15494: ARRAY
15495: ST_TO_ADDR
// if IsInUnit ( driver ) then
15496: LD_VAR 0 18
15500: PPUSH
15501: CALL_OW 310
15505: IFFALSE 15516
// ComExit ( driver ) ;
15507: LD_VAR 0 18
15511: PPUSH
15512: CALL 40938 0 1
// AddComEnterUnit ( driver , tmp ) ;
15516: LD_VAR 0 18
15520: PPUSH
15521: LD_VAR 0 13
15525: PPUSH
15526: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15530: LD_VAR 0 18
15534: PPUSH
15535: LD_VAR 0 7
15539: PPUSH
15540: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15544: LD_VAR 0 18
15548: PPUSH
15549: CALL_OW 181
// end ; continue ;
15553: GO 15205
// end ; if not cleaners or not tmp in cleaners then
15555: LD_VAR 0 6
15559: NOT
15560: PUSH
15561: LD_VAR 0 13
15565: PUSH
15566: LD_VAR 0 6
15570: IN
15571: NOT
15572: OR
15573: IFFALSE 15880
// begin if dep then
15575: LD_VAR 0 17
15579: IFFALSE 15715
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15581: LD_ADDR_VAR 0 16
15585: PUSH
15586: LD_VAR 0 17
15590: PUSH
15591: LD_INT 1
15593: ARRAY
15594: PPUSH
15595: CALL_OW 250
15599: PPUSH
15600: LD_VAR 0 17
15604: PUSH
15605: LD_INT 1
15607: ARRAY
15608: PPUSH
15609: CALL_OW 254
15613: PPUSH
15614: LD_INT 5
15616: PPUSH
15617: CALL_OW 272
15621: PUSH
15622: LD_VAR 0 17
15626: PUSH
15627: LD_INT 1
15629: ARRAY
15630: PPUSH
15631: CALL_OW 251
15635: PPUSH
15636: LD_VAR 0 17
15640: PUSH
15641: LD_INT 1
15643: ARRAY
15644: PPUSH
15645: CALL_OW 254
15649: PPUSH
15650: LD_INT 5
15652: PPUSH
15653: CALL_OW 273
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15662: LD_VAR 0 16
15666: PUSH
15667: LD_INT 1
15669: ARRAY
15670: PPUSH
15671: LD_VAR 0 16
15675: PUSH
15676: LD_INT 2
15678: ARRAY
15679: PPUSH
15680: CALL_OW 488
15684: IFFALSE 15715
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15686: LD_VAR 0 13
15690: PPUSH
15691: LD_VAR 0 16
15695: PUSH
15696: LD_INT 1
15698: ARRAY
15699: PPUSH
15700: LD_VAR 0 16
15704: PUSH
15705: LD_INT 2
15707: ARRAY
15708: PPUSH
15709: CALL_OW 111
// continue ;
15713: GO 15205
// end ; end ; r := GetDir ( tmp ) ;
15715: LD_ADDR_VAR 0 15
15719: PUSH
15720: LD_VAR 0 13
15724: PPUSH
15725: CALL_OW 254
15729: ST_TO_ADDR
// if r = 5 then
15730: LD_VAR 0 15
15734: PUSH
15735: LD_INT 5
15737: EQUAL
15738: IFFALSE 15748
// r := 0 ;
15740: LD_ADDR_VAR 0 15
15744: PUSH
15745: LD_INT 0
15747: ST_TO_ADDR
// for j = r to 5 do
15748: LD_ADDR_VAR 0 10
15752: PUSH
15753: DOUBLE
15754: LD_VAR 0 15
15758: DEC
15759: ST_TO_ADDR
15760: LD_INT 5
15762: PUSH
15763: FOR_TO
15764: IFFALSE 15878
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15766: LD_ADDR_VAR 0 11
15770: PUSH
15771: LD_VAR 0 13
15775: PPUSH
15776: CALL_OW 250
15780: PPUSH
15781: LD_VAR 0 10
15785: PPUSH
15786: LD_INT 2
15788: PPUSH
15789: CALL_OW 272
15793: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15794: LD_ADDR_VAR 0 12
15798: PUSH
15799: LD_VAR 0 13
15803: PPUSH
15804: CALL_OW 251
15808: PPUSH
15809: LD_VAR 0 10
15813: PPUSH
15814: LD_INT 2
15816: PPUSH
15817: CALL_OW 273
15821: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15822: LD_VAR 0 11
15826: PPUSH
15827: LD_VAR 0 12
15831: PPUSH
15832: CALL_OW 488
15836: PUSH
15837: LD_VAR 0 11
15841: PPUSH
15842: LD_VAR 0 12
15846: PPUSH
15847: CALL_OW 428
15851: NOT
15852: AND
15853: IFFALSE 15876
// begin ComMoveXY ( tmp , _x , _y ) ;
15855: LD_VAR 0 13
15859: PPUSH
15860: LD_VAR 0 11
15864: PPUSH
15865: LD_VAR 0 12
15869: PPUSH
15870: CALL_OW 111
// break ;
15874: GO 15878
// end ; end ;
15876: GO 15763
15878: POP
15879: POP
// end ; end ;
15880: GO 15205
15882: POP
15883: POP
// end ;
15884: LD_VAR 0 8
15888: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15889: LD_INT 0
15891: PPUSH
// result := true ;
15892: LD_ADDR_VAR 0 3
15896: PUSH
15897: LD_INT 1
15899: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15900: LD_VAR 0 2
15904: PUSH
15905: LD_INT 24
15907: DOUBLE
15908: EQUAL
15909: IFTRUE 15919
15911: LD_INT 33
15913: DOUBLE
15914: EQUAL
15915: IFTRUE 15919
15917: GO 15944
15919: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15920: LD_ADDR_VAR 0 3
15924: PUSH
15925: LD_INT 32
15927: PPUSH
15928: LD_VAR 0 1
15932: PPUSH
15933: CALL_OW 321
15937: PUSH
15938: LD_INT 2
15940: EQUAL
15941: ST_TO_ADDR
15942: GO 16260
15944: LD_INT 20
15946: DOUBLE
15947: EQUAL
15948: IFTRUE 15952
15950: GO 15977
15952: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15953: LD_ADDR_VAR 0 3
15957: PUSH
15958: LD_INT 6
15960: PPUSH
15961: LD_VAR 0 1
15965: PPUSH
15966: CALL_OW 321
15970: PUSH
15971: LD_INT 2
15973: EQUAL
15974: ST_TO_ADDR
15975: GO 16260
15977: LD_INT 22
15979: DOUBLE
15980: EQUAL
15981: IFTRUE 15991
15983: LD_INT 36
15985: DOUBLE
15986: EQUAL
15987: IFTRUE 15991
15989: GO 16016
15991: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15992: LD_ADDR_VAR 0 3
15996: PUSH
15997: LD_INT 15
15999: PPUSH
16000: LD_VAR 0 1
16004: PPUSH
16005: CALL_OW 321
16009: PUSH
16010: LD_INT 2
16012: EQUAL
16013: ST_TO_ADDR
16014: GO 16260
16016: LD_INT 30
16018: DOUBLE
16019: EQUAL
16020: IFTRUE 16024
16022: GO 16049
16024: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16025: LD_ADDR_VAR 0 3
16029: PUSH
16030: LD_INT 20
16032: PPUSH
16033: LD_VAR 0 1
16037: PPUSH
16038: CALL_OW 321
16042: PUSH
16043: LD_INT 2
16045: EQUAL
16046: ST_TO_ADDR
16047: GO 16260
16049: LD_INT 28
16051: DOUBLE
16052: EQUAL
16053: IFTRUE 16063
16055: LD_INT 21
16057: DOUBLE
16058: EQUAL
16059: IFTRUE 16063
16061: GO 16088
16063: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16064: LD_ADDR_VAR 0 3
16068: PUSH
16069: LD_INT 21
16071: PPUSH
16072: LD_VAR 0 1
16076: PPUSH
16077: CALL_OW 321
16081: PUSH
16082: LD_INT 2
16084: EQUAL
16085: ST_TO_ADDR
16086: GO 16260
16088: LD_INT 16
16090: DOUBLE
16091: EQUAL
16092: IFTRUE 16096
16094: GO 16121
16096: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16097: LD_ADDR_VAR 0 3
16101: PUSH
16102: LD_INT 84
16104: PPUSH
16105: LD_VAR 0 1
16109: PPUSH
16110: CALL_OW 321
16114: PUSH
16115: LD_INT 2
16117: EQUAL
16118: ST_TO_ADDR
16119: GO 16260
16121: LD_INT 19
16123: DOUBLE
16124: EQUAL
16125: IFTRUE 16135
16127: LD_INT 23
16129: DOUBLE
16130: EQUAL
16131: IFTRUE 16135
16133: GO 16160
16135: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16136: LD_ADDR_VAR 0 3
16140: PUSH
16141: LD_INT 83
16143: PPUSH
16144: LD_VAR 0 1
16148: PPUSH
16149: CALL_OW 321
16153: PUSH
16154: LD_INT 2
16156: EQUAL
16157: ST_TO_ADDR
16158: GO 16260
16160: LD_INT 17
16162: DOUBLE
16163: EQUAL
16164: IFTRUE 16168
16166: GO 16193
16168: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16169: LD_ADDR_VAR 0 3
16173: PUSH
16174: LD_INT 39
16176: PPUSH
16177: LD_VAR 0 1
16181: PPUSH
16182: CALL_OW 321
16186: PUSH
16187: LD_INT 2
16189: EQUAL
16190: ST_TO_ADDR
16191: GO 16260
16193: LD_INT 18
16195: DOUBLE
16196: EQUAL
16197: IFTRUE 16201
16199: GO 16226
16201: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16202: LD_ADDR_VAR 0 3
16206: PUSH
16207: LD_INT 40
16209: PPUSH
16210: LD_VAR 0 1
16214: PPUSH
16215: CALL_OW 321
16219: PUSH
16220: LD_INT 2
16222: EQUAL
16223: ST_TO_ADDR
16224: GO 16260
16226: LD_INT 27
16228: DOUBLE
16229: EQUAL
16230: IFTRUE 16234
16232: GO 16259
16234: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16235: LD_ADDR_VAR 0 3
16239: PUSH
16240: LD_INT 35
16242: PPUSH
16243: LD_VAR 0 1
16247: PPUSH
16248: CALL_OW 321
16252: PUSH
16253: LD_INT 2
16255: EQUAL
16256: ST_TO_ADDR
16257: GO 16260
16259: POP
// end ;
16260: LD_VAR 0 3
16264: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16265: LD_INT 0
16267: PPUSH
16268: PPUSH
16269: PPUSH
16270: PPUSH
16271: PPUSH
16272: PPUSH
16273: PPUSH
16274: PPUSH
16275: PPUSH
16276: PPUSH
16277: PPUSH
// result := false ;
16278: LD_ADDR_VAR 0 6
16282: PUSH
16283: LD_INT 0
16285: ST_TO_ADDR
// if btype = b_depot then
16286: LD_VAR 0 2
16290: PUSH
16291: LD_INT 0
16293: EQUAL
16294: IFFALSE 16306
// begin result := true ;
16296: LD_ADDR_VAR 0 6
16300: PUSH
16301: LD_INT 1
16303: ST_TO_ADDR
// exit ;
16304: GO 17132
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16306: LD_VAR 0 1
16310: NOT
16311: PUSH
16312: LD_VAR 0 1
16316: PPUSH
16317: CALL_OW 266
16321: PUSH
16322: LD_INT 0
16324: PUSH
16325: LD_INT 1
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: IN
16332: NOT
16333: OR
16334: PUSH
16335: LD_VAR 0 2
16339: NOT
16340: OR
16341: PUSH
16342: LD_VAR 0 5
16346: PUSH
16347: LD_INT 0
16349: PUSH
16350: LD_INT 1
16352: PUSH
16353: LD_INT 2
16355: PUSH
16356: LD_INT 3
16358: PUSH
16359: LD_INT 4
16361: PUSH
16362: LD_INT 5
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: IN
16373: NOT
16374: OR
16375: PUSH
16376: LD_VAR 0 3
16380: PPUSH
16381: LD_VAR 0 4
16385: PPUSH
16386: CALL_OW 488
16390: NOT
16391: OR
16392: IFFALSE 16396
// exit ;
16394: GO 17132
// side := GetSide ( depot ) ;
16396: LD_ADDR_VAR 0 9
16400: PUSH
16401: LD_VAR 0 1
16405: PPUSH
16406: CALL_OW 255
16410: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16411: LD_VAR 0 9
16415: PPUSH
16416: LD_VAR 0 2
16420: PPUSH
16421: CALL 15889 0 2
16425: NOT
16426: IFFALSE 16430
// exit ;
16428: GO 17132
// pom := GetBase ( depot ) ;
16430: LD_ADDR_VAR 0 10
16434: PUSH
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 274
16444: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16445: LD_ADDR_VAR 0 11
16449: PUSH
16450: LD_VAR 0 2
16454: PPUSH
16455: LD_VAR 0 1
16459: PPUSH
16460: CALL_OW 248
16464: PPUSH
16465: CALL_OW 450
16469: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16470: LD_VAR 0 10
16474: PPUSH
16475: LD_INT 1
16477: PPUSH
16478: CALL_OW 275
16482: PUSH
16483: LD_VAR 0 11
16487: PUSH
16488: LD_INT 1
16490: ARRAY
16491: GREATEREQUAL
16492: PUSH
16493: LD_VAR 0 10
16497: PPUSH
16498: LD_INT 2
16500: PPUSH
16501: CALL_OW 275
16505: PUSH
16506: LD_VAR 0 11
16510: PUSH
16511: LD_INT 2
16513: ARRAY
16514: GREATEREQUAL
16515: AND
16516: PUSH
16517: LD_VAR 0 10
16521: PPUSH
16522: LD_INT 3
16524: PPUSH
16525: CALL_OW 275
16529: PUSH
16530: LD_VAR 0 11
16534: PUSH
16535: LD_INT 3
16537: ARRAY
16538: GREATEREQUAL
16539: AND
16540: NOT
16541: IFFALSE 16545
// exit ;
16543: GO 17132
// if GetBType ( depot ) = b_depot then
16545: LD_VAR 0 1
16549: PPUSH
16550: CALL_OW 266
16554: PUSH
16555: LD_INT 0
16557: EQUAL
16558: IFFALSE 16570
// dist := 28 else
16560: LD_ADDR_VAR 0 14
16564: PUSH
16565: LD_INT 28
16567: ST_TO_ADDR
16568: GO 16578
// dist := 36 ;
16570: LD_ADDR_VAR 0 14
16574: PUSH
16575: LD_INT 36
16577: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16578: LD_VAR 0 1
16582: PPUSH
16583: LD_VAR 0 3
16587: PPUSH
16588: LD_VAR 0 4
16592: PPUSH
16593: CALL_OW 297
16597: PUSH
16598: LD_VAR 0 14
16602: GREATER
16603: IFFALSE 16607
// exit ;
16605: GO 17132
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16607: LD_ADDR_VAR 0 12
16611: PUSH
16612: LD_VAR 0 2
16616: PPUSH
16617: LD_VAR 0 3
16621: PPUSH
16622: LD_VAR 0 4
16626: PPUSH
16627: LD_VAR 0 5
16631: PPUSH
16632: LD_VAR 0 1
16636: PPUSH
16637: CALL_OW 248
16641: PPUSH
16642: LD_INT 0
16644: PPUSH
16645: CALL 17137 0 6
16649: ST_TO_ADDR
// if not hexes then
16650: LD_VAR 0 12
16654: NOT
16655: IFFALSE 16659
// exit ;
16657: GO 17132
// hex := GetHexInfo ( x , y ) ;
16659: LD_ADDR_VAR 0 15
16663: PUSH
16664: LD_VAR 0 3
16668: PPUSH
16669: LD_VAR 0 4
16673: PPUSH
16674: CALL_OW 546
16678: ST_TO_ADDR
// if hex [ 1 ] then
16679: LD_VAR 0 15
16683: PUSH
16684: LD_INT 1
16686: ARRAY
16687: IFFALSE 16691
// exit ;
16689: GO 17132
// height := hex [ 2 ] ;
16691: LD_ADDR_VAR 0 13
16695: PUSH
16696: LD_VAR 0 15
16700: PUSH
16701: LD_INT 2
16703: ARRAY
16704: ST_TO_ADDR
// for i = 1 to hexes do
16705: LD_ADDR_VAR 0 7
16709: PUSH
16710: DOUBLE
16711: LD_INT 1
16713: DEC
16714: ST_TO_ADDR
16715: LD_VAR 0 12
16719: PUSH
16720: FOR_TO
16721: IFFALSE 17051
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16723: LD_VAR 0 12
16727: PUSH
16728: LD_VAR 0 7
16732: ARRAY
16733: PUSH
16734: LD_INT 1
16736: ARRAY
16737: PPUSH
16738: LD_VAR 0 12
16742: PUSH
16743: LD_VAR 0 7
16747: ARRAY
16748: PUSH
16749: LD_INT 2
16751: ARRAY
16752: PPUSH
16753: CALL_OW 488
16757: NOT
16758: PUSH
16759: LD_VAR 0 12
16763: PUSH
16764: LD_VAR 0 7
16768: ARRAY
16769: PUSH
16770: LD_INT 1
16772: ARRAY
16773: PPUSH
16774: LD_VAR 0 12
16778: PUSH
16779: LD_VAR 0 7
16783: ARRAY
16784: PUSH
16785: LD_INT 2
16787: ARRAY
16788: PPUSH
16789: CALL_OW 428
16793: PUSH
16794: LD_INT 0
16796: GREATER
16797: OR
16798: PUSH
16799: LD_VAR 0 12
16803: PUSH
16804: LD_VAR 0 7
16808: ARRAY
16809: PUSH
16810: LD_INT 1
16812: ARRAY
16813: PPUSH
16814: LD_VAR 0 12
16818: PUSH
16819: LD_VAR 0 7
16823: ARRAY
16824: PUSH
16825: LD_INT 2
16827: ARRAY
16828: PPUSH
16829: CALL_OW 351
16833: OR
16834: IFFALSE 16840
// exit ;
16836: POP
16837: POP
16838: GO 17132
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16840: LD_ADDR_VAR 0 8
16844: PUSH
16845: LD_VAR 0 12
16849: PUSH
16850: LD_VAR 0 7
16854: ARRAY
16855: PUSH
16856: LD_INT 1
16858: ARRAY
16859: PPUSH
16860: LD_VAR 0 12
16864: PUSH
16865: LD_VAR 0 7
16869: ARRAY
16870: PUSH
16871: LD_INT 2
16873: ARRAY
16874: PPUSH
16875: CALL_OW 546
16879: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16880: LD_VAR 0 8
16884: PUSH
16885: LD_INT 1
16887: ARRAY
16888: PUSH
16889: LD_VAR 0 8
16893: PUSH
16894: LD_INT 2
16896: ARRAY
16897: PUSH
16898: LD_VAR 0 13
16902: PUSH
16903: LD_INT 2
16905: PLUS
16906: GREATER
16907: OR
16908: PUSH
16909: LD_VAR 0 8
16913: PUSH
16914: LD_INT 2
16916: ARRAY
16917: PUSH
16918: LD_VAR 0 13
16922: PUSH
16923: LD_INT 2
16925: MINUS
16926: LESS
16927: OR
16928: PUSH
16929: LD_VAR 0 8
16933: PUSH
16934: LD_INT 3
16936: ARRAY
16937: PUSH
16938: LD_INT 0
16940: PUSH
16941: LD_INT 8
16943: PUSH
16944: LD_INT 9
16946: PUSH
16947: LD_INT 10
16949: PUSH
16950: LD_INT 11
16952: PUSH
16953: LD_INT 12
16955: PUSH
16956: LD_INT 13
16958: PUSH
16959: LD_INT 16
16961: PUSH
16962: LD_INT 17
16964: PUSH
16965: LD_INT 18
16967: PUSH
16968: LD_INT 19
16970: PUSH
16971: LD_INT 20
16973: PUSH
16974: LD_INT 21
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: IN
16992: NOT
16993: OR
16994: PUSH
16995: LD_VAR 0 8
16999: PUSH
17000: LD_INT 5
17002: ARRAY
17003: NOT
17004: OR
17005: PUSH
17006: LD_VAR 0 8
17010: PUSH
17011: LD_INT 6
17013: ARRAY
17014: PUSH
17015: LD_INT 1
17017: PUSH
17018: LD_INT 2
17020: PUSH
17021: LD_INT 7
17023: PUSH
17024: LD_INT 9
17026: PUSH
17027: LD_INT 10
17029: PUSH
17030: LD_INT 11
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: IN
17041: NOT
17042: OR
17043: IFFALSE 17049
// exit ;
17045: POP
17046: POP
17047: GO 17132
// end ;
17049: GO 16720
17051: POP
17052: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17053: LD_VAR 0 9
17057: PPUSH
17058: LD_VAR 0 3
17062: PPUSH
17063: LD_VAR 0 4
17067: PPUSH
17068: LD_INT 20
17070: PPUSH
17071: CALL 9055 0 4
17075: PUSH
17076: LD_INT 4
17078: ARRAY
17079: IFFALSE 17083
// exit ;
17081: GO 17132
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17083: LD_VAR 0 2
17087: PUSH
17088: LD_INT 29
17090: PUSH
17091: LD_INT 30
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: IN
17098: PUSH
17099: LD_VAR 0 3
17103: PPUSH
17104: LD_VAR 0 4
17108: PPUSH
17109: LD_VAR 0 9
17113: PPUSH
17114: CALL_OW 440
17118: NOT
17119: AND
17120: IFFALSE 17124
// exit ;
17122: GO 17132
// result := true ;
17124: LD_ADDR_VAR 0 6
17128: PUSH
17129: LD_INT 1
17131: ST_TO_ADDR
// end ;
17132: LD_VAR 0 6
17136: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17137: LD_INT 0
17139: PPUSH
17140: PPUSH
17141: PPUSH
17142: PPUSH
17143: PPUSH
17144: PPUSH
17145: PPUSH
17146: PPUSH
17147: PPUSH
17148: PPUSH
17149: PPUSH
17150: PPUSH
17151: PPUSH
17152: PPUSH
17153: PPUSH
17154: PPUSH
17155: PPUSH
17156: PPUSH
17157: PPUSH
17158: PPUSH
17159: PPUSH
17160: PPUSH
17161: PPUSH
17162: PPUSH
17163: PPUSH
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
17169: PPUSH
17170: PPUSH
17171: PPUSH
17172: PPUSH
17173: PPUSH
17174: PPUSH
17175: PPUSH
17176: PPUSH
17177: PPUSH
17178: PPUSH
17179: PPUSH
17180: PPUSH
17181: PPUSH
17182: PPUSH
17183: PPUSH
17184: PPUSH
17185: PPUSH
17186: PPUSH
17187: PPUSH
17188: PPUSH
17189: PPUSH
17190: PPUSH
17191: PPUSH
17192: PPUSH
17193: PPUSH
17194: PPUSH
17195: PPUSH
17196: PPUSH
// result = [ ] ;
17197: LD_ADDR_VAR 0 7
17201: PUSH
17202: EMPTY
17203: ST_TO_ADDR
// temp_list = [ ] ;
17204: LD_ADDR_VAR 0 9
17208: PUSH
17209: EMPTY
17210: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17211: LD_VAR 0 4
17215: PUSH
17216: LD_INT 0
17218: PUSH
17219: LD_INT 1
17221: PUSH
17222: LD_INT 2
17224: PUSH
17225: LD_INT 3
17227: PUSH
17228: LD_INT 4
17230: PUSH
17231: LD_INT 5
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: IN
17242: NOT
17243: PUSH
17244: LD_VAR 0 1
17248: PUSH
17249: LD_INT 0
17251: PUSH
17252: LD_INT 1
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: IN
17259: PUSH
17260: LD_VAR 0 5
17264: PUSH
17265: LD_INT 1
17267: PUSH
17268: LD_INT 2
17270: PUSH
17271: LD_INT 3
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: LIST
17278: IN
17279: NOT
17280: AND
17281: OR
17282: IFFALSE 17286
// exit ;
17284: GO 35677
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17286: LD_VAR 0 1
17290: PUSH
17291: LD_INT 6
17293: PUSH
17294: LD_INT 7
17296: PUSH
17297: LD_INT 8
17299: PUSH
17300: LD_INT 13
17302: PUSH
17303: LD_INT 12
17305: PUSH
17306: LD_INT 15
17308: PUSH
17309: LD_INT 11
17311: PUSH
17312: LD_INT 14
17314: PUSH
17315: LD_INT 10
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: IN
17329: IFFALSE 17339
// btype = b_lab ;
17331: LD_ADDR_VAR 0 1
17335: PUSH
17336: LD_INT 6
17338: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17339: LD_VAR 0 6
17343: PUSH
17344: LD_INT 0
17346: PUSH
17347: LD_INT 1
17349: PUSH
17350: LD_INT 2
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: LIST
17357: IN
17358: NOT
17359: PUSH
17360: LD_VAR 0 1
17364: PUSH
17365: LD_INT 0
17367: PUSH
17368: LD_INT 1
17370: PUSH
17371: LD_INT 2
17373: PUSH
17374: LD_INT 3
17376: PUSH
17377: LD_INT 6
17379: PUSH
17380: LD_INT 36
17382: PUSH
17383: LD_INT 4
17385: PUSH
17386: LD_INT 5
17388: PUSH
17389: LD_INT 31
17391: PUSH
17392: LD_INT 32
17394: PUSH
17395: LD_INT 33
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: IN
17411: NOT
17412: PUSH
17413: LD_VAR 0 6
17417: PUSH
17418: LD_INT 1
17420: EQUAL
17421: AND
17422: OR
17423: PUSH
17424: LD_VAR 0 1
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: LD_INT 3
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: IN
17439: NOT
17440: PUSH
17441: LD_VAR 0 6
17445: PUSH
17446: LD_INT 2
17448: EQUAL
17449: AND
17450: OR
17451: IFFALSE 17461
// mode = 0 ;
17453: LD_ADDR_VAR 0 6
17457: PUSH
17458: LD_INT 0
17460: ST_TO_ADDR
// case mode of 0 :
17461: LD_VAR 0 6
17465: PUSH
17466: LD_INT 0
17468: DOUBLE
17469: EQUAL
17470: IFTRUE 17474
17472: GO 28927
17474: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17475: LD_ADDR_VAR 0 11
17479: PUSH
17480: LD_INT 0
17482: PUSH
17483: LD_INT 0
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 0
17492: PUSH
17493: LD_INT 1
17495: NEG
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 1
17503: PUSH
17504: LD_INT 0
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 1
17513: PUSH
17514: LD_INT 1
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 0
17523: PUSH
17524: LD_INT 1
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 1
17533: NEG
17534: PUSH
17535: LD_INT 0
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 1
17544: NEG
17545: PUSH
17546: LD_INT 1
17548: NEG
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 1
17556: NEG
17557: PUSH
17558: LD_INT 2
17560: NEG
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 0
17568: PUSH
17569: LD_INT 2
17571: NEG
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 1
17579: PUSH
17580: LD_INT 1
17582: NEG
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 1
17590: PUSH
17591: LD_INT 2
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 0
17600: PUSH
17601: LD_INT 2
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 1
17610: NEG
17611: PUSH
17612: LD_INT 1
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 1
17621: PUSH
17622: LD_INT 3
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 0
17631: PUSH
17632: LD_INT 3
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 1
17641: NEG
17642: PUSH
17643: LD_INT 2
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17668: LD_ADDR_VAR 0 12
17672: PUSH
17673: LD_INT 0
17675: PUSH
17676: LD_INT 0
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 0
17685: PUSH
17686: LD_INT 1
17688: NEG
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 1
17696: PUSH
17697: LD_INT 0
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 1
17706: PUSH
17707: LD_INT 1
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PUSH
17714: LD_INT 0
17716: PUSH
17717: LD_INT 1
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 1
17726: NEG
17727: PUSH
17728: LD_INT 0
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 1
17737: NEG
17738: PUSH
17739: LD_INT 1
17741: NEG
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 1
17749: PUSH
17750: LD_INT 1
17752: NEG
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 2
17760: PUSH
17761: LD_INT 0
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 2
17770: PUSH
17771: LD_INT 1
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 1
17780: NEG
17781: PUSH
17782: LD_INT 1
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 2
17791: NEG
17792: PUSH
17793: LD_INT 0
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 2
17802: NEG
17803: PUSH
17804: LD_INT 1
17806: NEG
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 2
17814: NEG
17815: PUSH
17816: LD_INT 1
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 3
17825: NEG
17826: PUSH
17827: LD_INT 0
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 3
17836: NEG
17837: PUSH
17838: LD_INT 1
17840: NEG
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17864: LD_ADDR_VAR 0 13
17868: PUSH
17869: LD_INT 0
17871: PUSH
17872: LD_INT 0
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 0
17881: PUSH
17882: LD_INT 1
17884: NEG
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 1
17892: PUSH
17893: LD_INT 0
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 1
17902: PUSH
17903: LD_INT 1
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 0
17912: PUSH
17913: LD_INT 1
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 1
17922: NEG
17923: PUSH
17924: LD_INT 0
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 1
17933: NEG
17934: PUSH
17935: LD_INT 1
17937: NEG
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 1
17945: NEG
17946: PUSH
17947: LD_INT 2
17949: NEG
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 2
17957: PUSH
17958: LD_INT 1
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 2
17967: PUSH
17968: LD_INT 2
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 1
17977: PUSH
17978: LD_INT 2
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 2
17987: NEG
17988: PUSH
17989: LD_INT 1
17991: NEG
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 2
17999: NEG
18000: PUSH
18001: LD_INT 2
18003: NEG
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 2
18011: NEG
18012: PUSH
18013: LD_INT 3
18015: NEG
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 3
18023: NEG
18024: PUSH
18025: LD_INT 2
18027: NEG
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 3
18035: NEG
18036: PUSH
18037: LD_INT 3
18039: NEG
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18063: LD_ADDR_VAR 0 14
18067: PUSH
18068: LD_INT 0
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 0
18080: PUSH
18081: LD_INT 1
18083: NEG
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 1
18091: PUSH
18092: LD_INT 0
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 1
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 0
18111: PUSH
18112: LD_INT 1
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 1
18121: NEG
18122: PUSH
18123: LD_INT 0
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 1
18132: NEG
18133: PUSH
18134: LD_INT 1
18136: NEG
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 1
18144: NEG
18145: PUSH
18146: LD_INT 2
18148: NEG
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 0
18156: PUSH
18157: LD_INT 2
18159: NEG
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 1
18167: PUSH
18168: LD_INT 1
18170: NEG
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 1
18178: PUSH
18179: LD_INT 2
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 0
18188: PUSH
18189: LD_INT 2
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 1
18198: NEG
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 1
18209: NEG
18210: PUSH
18211: LD_INT 3
18213: NEG
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 0
18221: PUSH
18222: LD_INT 3
18224: NEG
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 1
18232: PUSH
18233: LD_INT 2
18235: NEG
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18259: LD_ADDR_VAR 0 15
18263: PUSH
18264: LD_INT 0
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 0
18276: PUSH
18277: LD_INT 1
18279: NEG
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: LD_INT 0
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: LD_INT 1
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 0
18307: PUSH
18308: LD_INT 1
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 1
18317: NEG
18318: PUSH
18319: LD_INT 0
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 1
18328: NEG
18329: PUSH
18330: LD_INT 1
18332: NEG
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 1
18340: PUSH
18341: LD_INT 1
18343: NEG
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 2
18351: PUSH
18352: LD_INT 0
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 2
18361: PUSH
18362: LD_INT 1
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 1
18371: NEG
18372: PUSH
18373: LD_INT 1
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 2
18382: NEG
18383: PUSH
18384: LD_INT 0
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 2
18393: NEG
18394: PUSH
18395: LD_INT 1
18397: NEG
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 2
18405: PUSH
18406: LD_INT 1
18408: NEG
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 3
18416: PUSH
18417: LD_INT 0
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 3
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18452: LD_ADDR_VAR 0 16
18456: PUSH
18457: LD_INT 0
18459: PUSH
18460: LD_INT 0
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 0
18469: PUSH
18470: LD_INT 1
18472: NEG
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 1
18480: PUSH
18481: LD_INT 0
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 1
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 0
18500: PUSH
18501: LD_INT 1
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 1
18510: NEG
18511: PUSH
18512: LD_INT 0
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 1
18521: NEG
18522: PUSH
18523: LD_INT 1
18525: NEG
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 1
18533: NEG
18534: PUSH
18535: LD_INT 2
18537: NEG
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 2
18545: PUSH
18546: LD_INT 1
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 2
18555: PUSH
18556: LD_INT 2
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: LD_INT 1
18565: PUSH
18566: LD_INT 2
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 2
18575: NEG
18576: PUSH
18577: LD_INT 1
18579: NEG
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 2
18587: NEG
18588: PUSH
18589: LD_INT 2
18591: NEG
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 3
18599: PUSH
18600: LD_INT 2
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 3
18609: PUSH
18610: LD_INT 3
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 2
18619: PUSH
18620: LD_INT 3
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18645: LD_ADDR_VAR 0 17
18649: PUSH
18650: LD_INT 0
18652: PUSH
18653: LD_INT 0
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 0
18662: PUSH
18663: LD_INT 1
18665: NEG
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 1
18673: PUSH
18674: LD_INT 0
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 1
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 0
18693: PUSH
18694: LD_INT 1
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 1
18703: NEG
18704: PUSH
18705: LD_INT 0
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 1
18714: NEG
18715: PUSH
18716: LD_INT 1
18718: NEG
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 1
18726: NEG
18727: PUSH
18728: LD_INT 2
18730: NEG
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 0
18738: PUSH
18739: LD_INT 2
18741: NEG
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 1
18749: PUSH
18750: LD_INT 1
18752: NEG
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 2
18760: PUSH
18761: LD_INT 0
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 2
18770: PUSH
18771: LD_INT 1
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 2
18780: PUSH
18781: LD_INT 2
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 1
18790: PUSH
18791: LD_INT 2
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 0
18800: PUSH
18801: LD_INT 2
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 1
18810: NEG
18811: PUSH
18812: LD_INT 1
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 2
18821: NEG
18822: PUSH
18823: LD_INT 0
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 2
18832: NEG
18833: PUSH
18834: LD_INT 1
18836: NEG
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 2
18844: NEG
18845: PUSH
18846: LD_INT 2
18848: NEG
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18875: LD_ADDR_VAR 0 18
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 0
18892: PUSH
18893: LD_INT 1
18895: NEG
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 1
18903: PUSH
18904: LD_INT 0
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: LD_INT 1
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 0
18923: PUSH
18924: LD_INT 1
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 1
18933: NEG
18934: PUSH
18935: LD_INT 0
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 1
18944: NEG
18945: PUSH
18946: LD_INT 1
18948: NEG
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 1
18956: NEG
18957: PUSH
18958: LD_INT 2
18960: NEG
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 0
18968: PUSH
18969: LD_INT 2
18971: NEG
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: LD_INT 1
18982: NEG
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 2
18990: PUSH
18991: LD_INT 0
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 2
19000: PUSH
19001: LD_INT 1
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 2
19010: PUSH
19011: LD_INT 2
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 1
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 0
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: NEG
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 2
19051: NEG
19052: PUSH
19053: LD_INT 0
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 2
19062: NEG
19063: PUSH
19064: LD_INT 1
19066: NEG
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 2
19074: NEG
19075: PUSH
19076: LD_INT 2
19078: NEG
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19105: LD_ADDR_VAR 0 19
19109: PUSH
19110: LD_INT 0
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 0
19122: PUSH
19123: LD_INT 1
19125: NEG
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: LD_INT 0
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 1
19143: PUSH
19144: LD_INT 1
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 0
19153: PUSH
19154: LD_INT 1
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 1
19163: NEG
19164: PUSH
19165: LD_INT 0
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 1
19174: NEG
19175: PUSH
19176: LD_INT 1
19178: NEG
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 1
19186: NEG
19187: PUSH
19188: LD_INT 2
19190: NEG
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 0
19198: PUSH
19199: LD_INT 2
19201: NEG
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 1
19209: PUSH
19210: LD_INT 1
19212: NEG
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 2
19220: PUSH
19221: LD_INT 0
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 2
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 2
19240: PUSH
19241: LD_INT 2
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: LD_INT 2
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 0
19260: PUSH
19261: LD_INT 2
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 1
19270: NEG
19271: PUSH
19272: LD_INT 1
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 2
19281: NEG
19282: PUSH
19283: LD_INT 0
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 2
19292: NEG
19293: PUSH
19294: LD_INT 1
19296: NEG
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 2
19304: NEG
19305: PUSH
19306: LD_INT 2
19308: NEG
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19335: LD_ADDR_VAR 0 20
19339: PUSH
19340: LD_INT 0
19342: PUSH
19343: LD_INT 0
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 0
19352: PUSH
19353: LD_INT 1
19355: NEG
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: LD_INT 0
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 1
19373: PUSH
19374: LD_INT 1
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 0
19383: PUSH
19384: LD_INT 1
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 1
19393: NEG
19394: PUSH
19395: LD_INT 0
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 1
19404: NEG
19405: PUSH
19406: LD_INT 1
19408: NEG
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 1
19416: NEG
19417: PUSH
19418: LD_INT 2
19420: NEG
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: LD_INT 2
19431: NEG
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 1
19439: PUSH
19440: LD_INT 1
19442: NEG
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 2
19450: PUSH
19451: LD_INT 0
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 2
19460: PUSH
19461: LD_INT 1
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 2
19470: PUSH
19471: LD_INT 2
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 1
19480: PUSH
19481: LD_INT 2
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 0
19490: PUSH
19491: LD_INT 2
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 1
19500: NEG
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 2
19511: NEG
19512: PUSH
19513: LD_INT 0
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 2
19522: NEG
19523: PUSH
19524: LD_INT 1
19526: NEG
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 2
19534: NEG
19535: PUSH
19536: LD_INT 2
19538: NEG
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19565: LD_ADDR_VAR 0 21
19569: PUSH
19570: LD_INT 0
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 0
19582: PUSH
19583: LD_INT 1
19585: NEG
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: LD_INT 0
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 1
19603: PUSH
19604: LD_INT 1
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 0
19613: PUSH
19614: LD_INT 1
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 1
19623: NEG
19624: PUSH
19625: LD_INT 0
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 1
19634: NEG
19635: PUSH
19636: LD_INT 1
19638: NEG
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 1
19646: NEG
19647: PUSH
19648: LD_INT 2
19650: NEG
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 0
19658: PUSH
19659: LD_INT 2
19661: NEG
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: LD_INT 1
19672: NEG
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 2
19680: PUSH
19681: LD_INT 0
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 2
19690: PUSH
19691: LD_INT 1
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 2
19700: PUSH
19701: LD_INT 2
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 1
19710: PUSH
19711: LD_INT 2
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 0
19720: PUSH
19721: LD_INT 2
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 1
19730: NEG
19731: PUSH
19732: LD_INT 1
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 2
19741: NEG
19742: PUSH
19743: LD_INT 0
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 2
19752: NEG
19753: PUSH
19754: LD_INT 1
19756: NEG
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 2
19764: NEG
19765: PUSH
19766: LD_INT 2
19768: NEG
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19795: LD_ADDR_VAR 0 22
19799: PUSH
19800: LD_INT 0
19802: PUSH
19803: LD_INT 0
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 0
19812: PUSH
19813: LD_INT 1
19815: NEG
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: LD_INT 0
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 1
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 0
19843: PUSH
19844: LD_INT 1
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 1
19853: NEG
19854: PUSH
19855: LD_INT 0
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 1
19864: NEG
19865: PUSH
19866: LD_INT 1
19868: NEG
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 1
19876: NEG
19877: PUSH
19878: LD_INT 2
19880: NEG
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 0
19888: PUSH
19889: LD_INT 2
19891: NEG
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 1
19899: PUSH
19900: LD_INT 1
19902: NEG
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 2
19910: PUSH
19911: LD_INT 0
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 2
19920: PUSH
19921: LD_INT 1
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 2
19930: PUSH
19931: LD_INT 2
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 1
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 0
19950: PUSH
19951: LD_INT 2
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 1
19960: NEG
19961: PUSH
19962: LD_INT 1
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 2
19971: NEG
19972: PUSH
19973: LD_INT 0
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 2
19982: NEG
19983: PUSH
19984: LD_INT 1
19986: NEG
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 2
19994: NEG
19995: PUSH
19996: LD_INT 2
19998: NEG
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20025: LD_ADDR_VAR 0 23
20029: PUSH
20030: LD_INT 0
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 0
20042: PUSH
20043: LD_INT 1
20045: NEG
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 1
20053: PUSH
20054: LD_INT 0
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: LD_INT 1
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 0
20073: PUSH
20074: LD_INT 1
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 1
20083: NEG
20084: PUSH
20085: LD_INT 0
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 1
20094: NEG
20095: PUSH
20096: LD_INT 1
20098: NEG
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 1
20106: NEG
20107: PUSH
20108: LD_INT 2
20110: NEG
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 0
20118: PUSH
20119: LD_INT 2
20121: NEG
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 1
20129: PUSH
20130: LD_INT 1
20132: NEG
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 2
20140: PUSH
20141: LD_INT 0
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 2
20150: PUSH
20151: LD_INT 1
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 2
20160: PUSH
20161: LD_INT 2
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: LD_INT 2
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 0
20180: PUSH
20181: LD_INT 2
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 1
20190: NEG
20191: PUSH
20192: LD_INT 1
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 2
20201: NEG
20202: PUSH
20203: LD_INT 0
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 2
20212: NEG
20213: PUSH
20214: LD_INT 1
20216: NEG
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 2
20224: NEG
20225: PUSH
20226: LD_INT 2
20228: NEG
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 2
20236: NEG
20237: PUSH
20238: LD_INT 3
20240: NEG
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 1
20248: NEG
20249: PUSH
20250: LD_INT 3
20252: NEG
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 1
20260: PUSH
20261: LD_INT 2
20263: NEG
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 2
20271: PUSH
20272: LD_INT 1
20274: NEG
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20305: LD_ADDR_VAR 0 24
20309: PUSH
20310: LD_INT 0
20312: PUSH
20313: LD_INT 0
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: LD_INT 1
20325: NEG
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 1
20333: PUSH
20334: LD_INT 0
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 1
20343: PUSH
20344: LD_INT 1
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 0
20353: PUSH
20354: LD_INT 1
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 1
20363: NEG
20364: PUSH
20365: LD_INT 0
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 1
20374: NEG
20375: PUSH
20376: LD_INT 1
20378: NEG
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 1
20386: NEG
20387: PUSH
20388: LD_INT 2
20390: NEG
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 0
20398: PUSH
20399: LD_INT 2
20401: NEG
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 1
20409: PUSH
20410: LD_INT 1
20412: NEG
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 2
20420: PUSH
20421: LD_INT 0
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 2
20430: PUSH
20431: LD_INT 1
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 2
20440: PUSH
20441: LD_INT 2
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 1
20450: PUSH
20451: LD_INT 2
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 0
20460: PUSH
20461: LD_INT 2
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: LD_INT 1
20470: NEG
20471: PUSH
20472: LD_INT 1
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 2
20481: NEG
20482: PUSH
20483: LD_INT 0
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 2
20492: NEG
20493: PUSH
20494: LD_INT 1
20496: NEG
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 2
20504: NEG
20505: PUSH
20506: LD_INT 2
20508: NEG
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 1
20516: PUSH
20517: LD_INT 2
20519: NEG
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 2
20527: PUSH
20528: LD_INT 1
20530: NEG
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 3
20538: PUSH
20539: LD_INT 1
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 3
20548: PUSH
20549: LD_INT 2
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20581: LD_ADDR_VAR 0 25
20585: PUSH
20586: LD_INT 0
20588: PUSH
20589: LD_INT 0
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: LD_INT 1
20601: NEG
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: LD_INT 0
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 1
20619: PUSH
20620: LD_INT 1
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 0
20629: PUSH
20630: LD_INT 1
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 1
20639: NEG
20640: PUSH
20641: LD_INT 0
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 1
20650: NEG
20651: PUSH
20652: LD_INT 1
20654: NEG
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 1
20662: NEG
20663: PUSH
20664: LD_INT 2
20666: NEG
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 0
20674: PUSH
20675: LD_INT 2
20677: NEG
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 1
20685: PUSH
20686: LD_INT 1
20688: NEG
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 2
20696: PUSH
20697: LD_INT 0
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 2
20706: PUSH
20707: LD_INT 1
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 2
20716: PUSH
20717: LD_INT 2
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 1
20726: PUSH
20727: LD_INT 2
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 0
20736: PUSH
20737: LD_INT 2
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 1
20746: NEG
20747: PUSH
20748: LD_INT 1
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 2
20757: NEG
20758: PUSH
20759: LD_INT 0
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 2
20768: NEG
20769: PUSH
20770: LD_INT 1
20772: NEG
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 2
20780: NEG
20781: PUSH
20782: LD_INT 2
20784: NEG
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 3
20792: PUSH
20793: LD_INT 1
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 3
20802: PUSH
20803: LD_INT 2
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 2
20812: PUSH
20813: LD_INT 3
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 1
20822: PUSH
20823: LD_INT 3
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20855: LD_ADDR_VAR 0 26
20859: PUSH
20860: LD_INT 0
20862: PUSH
20863: LD_INT 0
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 0
20872: PUSH
20873: LD_INT 1
20875: NEG
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 1
20883: PUSH
20884: LD_INT 0
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: LD_INT 1
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 0
20903: PUSH
20904: LD_INT 1
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 1
20913: NEG
20914: PUSH
20915: LD_INT 0
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 1
20924: NEG
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: LD_INT 2
20940: NEG
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: LD_INT 2
20951: NEG
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: LD_INT 1
20962: NEG
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 2
20970: PUSH
20971: LD_INT 0
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: LD_INT 1
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 2
20990: PUSH
20991: LD_INT 2
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 1
21000: PUSH
21001: LD_INT 2
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 0
21010: PUSH
21011: LD_INT 2
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 1
21020: NEG
21021: PUSH
21022: LD_INT 1
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: LD_INT 2
21031: NEG
21032: PUSH
21033: LD_INT 0
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 2
21042: NEG
21043: PUSH
21044: LD_INT 1
21046: NEG
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 2
21054: NEG
21055: PUSH
21056: LD_INT 2
21058: NEG
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 2
21066: PUSH
21067: LD_INT 3
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 1
21076: PUSH
21077: LD_INT 3
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 1
21086: NEG
21087: PUSH
21088: LD_INT 2
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 2
21097: NEG
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21131: LD_ADDR_VAR 0 27
21135: PUSH
21136: LD_INT 0
21138: PUSH
21139: LD_INT 0
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 0
21148: PUSH
21149: LD_INT 1
21151: NEG
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 1
21159: PUSH
21160: LD_INT 0
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 1
21169: PUSH
21170: LD_INT 1
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 0
21179: PUSH
21180: LD_INT 1
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 1
21189: NEG
21190: PUSH
21191: LD_INT 0
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 1
21200: NEG
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 1
21212: NEG
21213: PUSH
21214: LD_INT 2
21216: NEG
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 0
21224: PUSH
21225: LD_INT 2
21227: NEG
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 1
21235: PUSH
21236: LD_INT 1
21238: NEG
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 2
21246: PUSH
21247: LD_INT 0
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 2
21256: PUSH
21257: LD_INT 1
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 2
21266: PUSH
21267: LD_INT 2
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 1
21276: PUSH
21277: LD_INT 2
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 0
21286: PUSH
21287: LD_INT 2
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 1
21296: NEG
21297: PUSH
21298: LD_INT 1
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 2
21307: NEG
21308: PUSH
21309: LD_INT 0
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 2
21318: NEG
21319: PUSH
21320: LD_INT 1
21322: NEG
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 2
21330: NEG
21331: PUSH
21332: LD_INT 2
21334: NEG
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 1
21342: NEG
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 2
21353: NEG
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 3
21364: NEG
21365: PUSH
21366: LD_INT 1
21368: NEG
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 3
21376: NEG
21377: PUSH
21378: LD_INT 2
21380: NEG
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21411: LD_ADDR_VAR 0 28
21415: PUSH
21416: LD_INT 0
21418: PUSH
21419: LD_INT 0
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 0
21428: PUSH
21429: LD_INT 1
21431: NEG
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 1
21439: PUSH
21440: LD_INT 0
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 1
21449: PUSH
21450: LD_INT 1
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 0
21459: PUSH
21460: LD_INT 1
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 1
21469: NEG
21470: PUSH
21471: LD_INT 0
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 1
21480: NEG
21481: PUSH
21482: LD_INT 1
21484: NEG
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 1
21492: NEG
21493: PUSH
21494: LD_INT 2
21496: NEG
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 0
21504: PUSH
21505: LD_INT 2
21507: NEG
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 1
21515: PUSH
21516: LD_INT 1
21518: NEG
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 2
21526: PUSH
21527: LD_INT 0
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 2
21536: PUSH
21537: LD_INT 1
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 2
21546: PUSH
21547: LD_INT 2
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 1
21556: PUSH
21557: LD_INT 2
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 0
21566: PUSH
21567: LD_INT 2
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 1
21576: NEG
21577: PUSH
21578: LD_INT 1
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 2
21587: NEG
21588: PUSH
21589: LD_INT 0
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 2
21598: NEG
21599: PUSH
21600: LD_INT 1
21602: NEG
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 2
21610: NEG
21611: PUSH
21612: LD_INT 2
21614: NEG
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 2
21622: NEG
21623: PUSH
21624: LD_INT 3
21626: NEG
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 1
21634: NEG
21635: PUSH
21636: LD_INT 3
21638: NEG
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 3
21646: NEG
21647: PUSH
21648: LD_INT 1
21650: NEG
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 3
21658: NEG
21659: PUSH
21660: LD_INT 2
21662: NEG
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21693: LD_ADDR_VAR 0 29
21697: PUSH
21698: LD_INT 0
21700: PUSH
21701: LD_INT 0
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 0
21710: PUSH
21711: LD_INT 1
21713: NEG
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 1
21721: PUSH
21722: LD_INT 0
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 1
21731: PUSH
21732: LD_INT 1
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 0
21741: PUSH
21742: LD_INT 1
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 1
21751: NEG
21752: PUSH
21753: LD_INT 0
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 1
21762: NEG
21763: PUSH
21764: LD_INT 1
21766: NEG
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 1
21774: NEG
21775: PUSH
21776: LD_INT 2
21778: NEG
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 0
21786: PUSH
21787: LD_INT 2
21789: NEG
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: LD_INT 1
21800: NEG
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: LD_INT 0
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 2
21818: PUSH
21819: LD_INT 1
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: PUSH
21829: LD_INT 2
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: LD_INT 2
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: LD_INT 1
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 2
21859: NEG
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 2
21871: NEG
21872: PUSH
21873: LD_INT 2
21875: NEG
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 2
21883: NEG
21884: PUSH
21885: LD_INT 3
21887: NEG
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 2
21895: PUSH
21896: LD_INT 1
21898: NEG
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 3
21906: PUSH
21907: LD_INT 1
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 1
21916: PUSH
21917: LD_INT 3
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 1
21926: NEG
21927: PUSH
21928: LD_INT 2
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 3
21937: NEG
21938: PUSH
21939: LD_INT 2
21941: NEG
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21972: LD_ADDR_VAR 0 30
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 0
21989: PUSH
21990: LD_INT 1
21992: NEG
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 1
22000: PUSH
22001: LD_INT 0
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 1
22010: PUSH
22011: LD_INT 1
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 0
22020: PUSH
22021: LD_INT 1
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 1
22030: NEG
22031: PUSH
22032: LD_INT 0
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 1
22041: NEG
22042: PUSH
22043: LD_INT 1
22045: NEG
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 1
22053: NEG
22054: PUSH
22055: LD_INT 2
22057: NEG
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 0
22065: PUSH
22066: LD_INT 2
22068: NEG
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: LD_INT 1
22079: NEG
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 2
22087: PUSH
22088: LD_INT 0
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 2
22097: PUSH
22098: LD_INT 1
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 2
22107: PUSH
22108: LD_INT 2
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 1
22117: PUSH
22118: LD_INT 2
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 1
22127: NEG
22128: PUSH
22129: LD_INT 1
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 2
22138: NEG
22139: PUSH
22140: LD_INT 0
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 2
22149: NEG
22150: PUSH
22151: LD_INT 1
22153: NEG
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 1
22161: NEG
22162: PUSH
22163: LD_INT 3
22165: NEG
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 1
22173: PUSH
22174: LD_INT 2
22176: NEG
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 3
22184: PUSH
22185: LD_INT 2
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 2
22194: PUSH
22195: LD_INT 3
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 2
22204: NEG
22205: PUSH
22206: LD_INT 1
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 3
22215: NEG
22216: PUSH
22217: LD_INT 1
22219: NEG
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22250: LD_ADDR_VAR 0 31
22254: PUSH
22255: LD_INT 0
22257: PUSH
22258: LD_INT 0
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 0
22267: PUSH
22268: LD_INT 1
22270: NEG
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 1
22278: PUSH
22279: LD_INT 0
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: LD_INT 1
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 0
22298: PUSH
22299: LD_INT 1
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 1
22308: NEG
22309: PUSH
22310: LD_INT 0
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 1
22319: NEG
22320: PUSH
22321: LD_INT 1
22323: NEG
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 1
22331: NEG
22332: PUSH
22333: LD_INT 2
22335: NEG
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 1
22343: PUSH
22344: LD_INT 1
22346: NEG
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 2
22354: PUSH
22355: LD_INT 0
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 2
22364: PUSH
22365: LD_INT 1
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 2
22374: PUSH
22375: LD_INT 2
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 1
22384: PUSH
22385: LD_INT 2
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 0
22394: PUSH
22395: LD_INT 2
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 1
22404: NEG
22405: PUSH
22406: LD_INT 1
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 2
22415: NEG
22416: PUSH
22417: LD_INT 1
22419: NEG
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 2
22427: NEG
22428: PUSH
22429: LD_INT 2
22431: NEG
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 2
22439: NEG
22440: PUSH
22441: LD_INT 3
22443: NEG
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: LD_INT 1
22454: NEG
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 3
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 1
22472: PUSH
22473: LD_INT 3
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: NEG
22483: PUSH
22484: LD_INT 2
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 3
22493: NEG
22494: PUSH
22495: LD_INT 2
22497: NEG
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22528: LD_ADDR_VAR 0 32
22532: PUSH
22533: LD_INT 0
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 0
22545: PUSH
22546: LD_INT 1
22548: NEG
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: LD_INT 1
22556: PUSH
22557: LD_INT 0
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 1
22566: PUSH
22567: LD_INT 1
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 0
22576: PUSH
22577: LD_INT 1
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 1
22586: NEG
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 1
22597: NEG
22598: PUSH
22599: LD_INT 1
22601: NEG
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 1
22609: NEG
22610: PUSH
22611: LD_INT 2
22613: NEG
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 0
22621: PUSH
22622: LD_INT 2
22624: NEG
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 1
22632: PUSH
22633: LD_INT 1
22635: NEG
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 2
22643: PUSH
22644: LD_INT 1
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 2
22653: PUSH
22654: LD_INT 2
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: LD_INT 2
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 0
22673: PUSH
22674: LD_INT 2
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: NEG
22684: PUSH
22685: LD_INT 1
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 2
22694: NEG
22695: PUSH
22696: LD_INT 0
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 2
22705: NEG
22706: PUSH
22707: LD_INT 1
22709: NEG
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 1
22717: NEG
22718: PUSH
22719: LD_INT 3
22721: NEG
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: LD_INT 2
22732: NEG
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 3
22740: PUSH
22741: LD_INT 2
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: LD_INT 3
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 2
22760: NEG
22761: PUSH
22762: LD_INT 1
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 3
22771: NEG
22772: PUSH
22773: LD_INT 1
22775: NEG
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22806: LD_ADDR_VAR 0 33
22810: PUSH
22811: LD_INT 0
22813: PUSH
22814: LD_INT 0
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 0
22823: PUSH
22824: LD_INT 1
22826: NEG
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 1
22834: PUSH
22835: LD_INT 0
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: LD_INT 1
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 0
22854: PUSH
22855: LD_INT 1
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 1
22864: NEG
22865: PUSH
22866: LD_INT 0
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 1
22875: NEG
22876: PUSH
22877: LD_INT 1
22879: NEG
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 1
22887: NEG
22888: PUSH
22889: LD_INT 2
22891: NEG
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 1
22899: PUSH
22900: LD_INT 1
22902: NEG
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 2
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 2
22920: PUSH
22921: LD_INT 1
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 1
22930: PUSH
22931: LD_INT 2
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 0
22940: PUSH
22941: LD_INT 2
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 1
22950: NEG
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 2
22961: NEG
22962: PUSH
22963: LD_INT 0
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 2
22972: NEG
22973: PUSH
22974: LD_INT 1
22976: NEG
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 2
22984: NEG
22985: PUSH
22986: LD_INT 2
22988: NEG
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 2
22996: NEG
22997: PUSH
22998: LD_INT 3
23000: NEG
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 2
23008: PUSH
23009: LD_INT 1
23011: NEG
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 3
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 1
23029: PUSH
23030: LD_INT 3
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 1
23039: NEG
23040: PUSH
23041: LD_INT 2
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 3
23050: NEG
23051: PUSH
23052: LD_INT 2
23054: NEG
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23085: LD_ADDR_VAR 0 34
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: LD_INT 0
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 0
23102: PUSH
23103: LD_INT 1
23105: NEG
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: PUSH
23114: LD_INT 0
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 0
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 1
23143: NEG
23144: PUSH
23145: LD_INT 0
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 1
23154: NEG
23155: PUSH
23156: LD_INT 1
23158: NEG
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 1
23166: NEG
23167: PUSH
23168: LD_INT 2
23170: NEG
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 0
23178: PUSH
23179: LD_INT 2
23181: NEG
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: LD_INT 1
23192: NEG
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 2
23200: PUSH
23201: LD_INT 1
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 2
23210: PUSH
23211: LD_INT 2
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 1
23220: PUSH
23221: LD_INT 2
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 1
23230: NEG
23231: PUSH
23232: LD_INT 1
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 2
23241: NEG
23242: PUSH
23243: LD_INT 0
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 2
23252: NEG
23253: PUSH
23254: LD_INT 1
23256: NEG
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 2
23264: NEG
23265: PUSH
23266: LD_INT 2
23268: NEG
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 1
23276: NEG
23277: PUSH
23278: LD_INT 3
23280: NEG
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 1
23288: PUSH
23289: LD_INT 2
23291: NEG
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 3
23299: PUSH
23300: LD_INT 2
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 2
23309: PUSH
23310: LD_INT 3
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 2
23319: NEG
23320: PUSH
23321: LD_INT 1
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 3
23330: NEG
23331: PUSH
23332: LD_INT 1
23334: NEG
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23365: LD_ADDR_VAR 0 35
23369: PUSH
23370: LD_INT 0
23372: PUSH
23373: LD_INT 0
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 0
23382: PUSH
23383: LD_INT 1
23385: NEG
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 1
23393: PUSH
23394: LD_INT 0
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 1
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 0
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 1
23423: NEG
23424: PUSH
23425: LD_INT 0
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 1
23434: NEG
23435: PUSH
23436: LD_INT 1
23438: NEG
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: LD_INT 1
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 2
23456: NEG
23457: PUSH
23458: LD_INT 1
23460: NEG
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23477: LD_ADDR_VAR 0 36
23481: PUSH
23482: LD_INT 0
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 0
23494: PUSH
23495: LD_INT 1
23497: NEG
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 1
23505: PUSH
23506: LD_INT 0
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 1
23515: PUSH
23516: LD_INT 1
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 0
23525: PUSH
23526: LD_INT 1
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 1
23535: NEG
23536: PUSH
23537: LD_INT 0
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 1
23546: NEG
23547: PUSH
23548: LD_INT 1
23550: NEG
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 1
23558: NEG
23559: PUSH
23560: LD_INT 2
23562: NEG
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 1
23570: PUSH
23571: LD_INT 2
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23589: LD_ADDR_VAR 0 37
23593: PUSH
23594: LD_INT 0
23596: PUSH
23597: LD_INT 0
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 0
23606: PUSH
23607: LD_INT 1
23609: NEG
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 1
23617: PUSH
23618: LD_INT 0
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 1
23627: PUSH
23628: LD_INT 1
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 0
23637: PUSH
23638: LD_INT 1
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 1
23647: NEG
23648: PUSH
23649: LD_INT 0
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 1
23658: NEG
23659: PUSH
23660: LD_INT 1
23662: NEG
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: LD_INT 1
23673: NEG
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 1
23681: NEG
23682: PUSH
23683: LD_INT 1
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23701: LD_ADDR_VAR 0 38
23705: PUSH
23706: LD_INT 0
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 0
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 1
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 1
23739: PUSH
23740: LD_INT 1
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 0
23749: PUSH
23750: LD_INT 1
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 1
23759: NEG
23760: PUSH
23761: LD_INT 0
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 1
23770: NEG
23771: PUSH
23772: LD_INT 1
23774: NEG
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 2
23782: PUSH
23783: LD_INT 1
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 2
23792: NEG
23793: PUSH
23794: LD_INT 1
23796: NEG
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23813: LD_ADDR_VAR 0 39
23817: PUSH
23818: LD_INT 0
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 0
23830: PUSH
23831: LD_INT 1
23833: NEG
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 1
23841: PUSH
23842: LD_INT 0
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 1
23851: PUSH
23852: LD_INT 1
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 0
23861: PUSH
23862: LD_INT 1
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 1
23871: NEG
23872: PUSH
23873: LD_INT 0
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 1
23882: NEG
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 1
23894: NEG
23895: PUSH
23896: LD_INT 2
23898: NEG
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 1
23906: PUSH
23907: LD_INT 2
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23925: LD_ADDR_VAR 0 40
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: LD_INT 1
23945: NEG
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 1
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 0
23973: PUSH
23974: LD_INT 1
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 1
23983: NEG
23984: PUSH
23985: LD_INT 0
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 1
23994: NEG
23995: PUSH
23996: LD_INT 1
23998: NEG
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 1
24006: PUSH
24007: LD_INT 1
24009: NEG
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 1
24017: NEG
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24037: LD_ADDR_VAR 0 41
24041: PUSH
24042: LD_INT 0
24044: PUSH
24045: LD_INT 0
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 0
24054: PUSH
24055: LD_INT 1
24057: NEG
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: LD_INT 0
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 1
24075: PUSH
24076: LD_INT 1
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: LD_INT 1
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 1
24095: NEG
24096: PUSH
24097: LD_INT 0
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 1
24106: NEG
24107: PUSH
24108: LD_INT 1
24110: NEG
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 1
24118: NEG
24119: PUSH
24120: LD_INT 2
24122: NEG
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 1
24130: PUSH
24131: LD_INT 1
24133: NEG
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 2
24141: PUSH
24142: LD_INT 0
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 2
24151: PUSH
24152: LD_INT 1
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 2
24161: PUSH
24162: LD_INT 2
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: PUSH
24172: LD_INT 2
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: LD_INT 1
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 2
24192: NEG
24193: PUSH
24194: LD_INT 0
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 2
24203: NEG
24204: PUSH
24205: LD_INT 1
24207: NEG
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 2
24215: NEG
24216: PUSH
24217: LD_INT 2
24219: NEG
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 2
24227: NEG
24228: PUSH
24229: LD_INT 3
24231: NEG
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 2
24239: PUSH
24240: LD_INT 1
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 3
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 3
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 3
24270: PUSH
24271: LD_INT 2
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 3
24280: PUSH
24281: LD_INT 3
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 2
24290: PUSH
24291: LD_INT 3
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 2
24300: NEG
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 3
24311: NEG
24312: PUSH
24313: LD_INT 0
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 3
24322: NEG
24323: PUSH
24324: LD_INT 1
24326: NEG
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 3
24334: NEG
24335: PUSH
24336: LD_INT 2
24338: NEG
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 3
24346: NEG
24347: PUSH
24348: LD_INT 3
24350: NEG
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24387: LD_ADDR_VAR 0 42
24391: PUSH
24392: LD_INT 0
24394: PUSH
24395: LD_INT 0
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 0
24404: PUSH
24405: LD_INT 1
24407: NEG
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 1
24415: PUSH
24416: LD_INT 0
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 1
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: NEG
24446: PUSH
24447: LD_INT 0
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 1
24456: NEG
24457: PUSH
24458: LD_INT 1
24460: NEG
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 1
24468: NEG
24469: PUSH
24470: LD_INT 2
24472: NEG
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 0
24480: PUSH
24481: LD_INT 2
24483: NEG
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: LD_INT 1
24494: NEG
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 2
24512: PUSH
24513: LD_INT 2
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 2
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 0
24532: PUSH
24533: LD_INT 2
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 2
24553: NEG
24554: PUSH
24555: LD_INT 1
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 2
24565: NEG
24566: PUSH
24567: LD_INT 2
24569: NEG
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 2
24577: NEG
24578: PUSH
24579: LD_INT 3
24581: NEG
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 1
24589: NEG
24590: PUSH
24591: LD_INT 3
24593: NEG
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 3
24604: NEG
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: LD_INT 2
24615: NEG
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 3
24623: PUSH
24624: LD_INT 2
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 3
24633: PUSH
24634: LD_INT 3
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 2
24643: PUSH
24644: LD_INT 3
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 1
24653: PUSH
24654: LD_INT 3
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 0
24663: PUSH
24664: LD_INT 3
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 1
24673: NEG
24674: PUSH
24675: LD_INT 2
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 3
24684: NEG
24685: PUSH
24686: LD_INT 2
24688: NEG
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 3
24696: NEG
24697: PUSH
24698: LD_INT 3
24700: NEG
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24737: LD_ADDR_VAR 0 43
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 0
24754: PUSH
24755: LD_INT 1
24757: NEG
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 1
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 0
24785: PUSH
24786: LD_INT 1
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 1
24795: NEG
24796: PUSH
24797: LD_INT 0
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 1
24806: NEG
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 1
24818: NEG
24819: PUSH
24820: LD_INT 2
24822: NEG
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 0
24830: PUSH
24831: LD_INT 2
24833: NEG
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: LD_INT 1
24844: NEG
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 2
24862: PUSH
24863: LD_INT 1
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: LD_INT 2
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 0
24882: PUSH
24883: LD_INT 2
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 2
24903: NEG
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 2
24914: NEG
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 1
24926: NEG
24927: PUSH
24928: LD_INT 3
24930: NEG
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 0
24938: PUSH
24939: LD_INT 3
24941: NEG
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 1
24949: PUSH
24950: LD_INT 2
24952: NEG
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 2
24960: PUSH
24961: LD_INT 1
24963: NEG
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 3
24971: PUSH
24972: LD_INT 0
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 3
24981: PUSH
24982: LD_INT 1
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 1
24991: PUSH
24992: LD_INT 3
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 0
25001: PUSH
25002: LD_INT 3
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: NEG
25012: PUSH
25013: LD_INT 2
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 2
25022: NEG
25023: PUSH
25024: LD_INT 1
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 3
25033: NEG
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 3
25044: NEG
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25085: LD_ADDR_VAR 0 44
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 0
25102: PUSH
25103: LD_INT 1
25105: NEG
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 1
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: LD_INT 1
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 1
25143: NEG
25144: PUSH
25145: LD_INT 0
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 1
25154: NEG
25155: PUSH
25156: LD_INT 1
25158: NEG
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 1
25166: NEG
25167: PUSH
25168: LD_INT 2
25170: NEG
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 1
25178: PUSH
25179: LD_INT 1
25181: NEG
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 2
25189: PUSH
25190: LD_INT 0
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 2
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 2
25209: PUSH
25210: LD_INT 2
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 1
25219: PUSH
25220: LD_INT 2
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 2
25240: NEG
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 2
25251: NEG
25252: PUSH
25253: LD_INT 1
25255: NEG
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 2
25263: NEG
25264: PUSH
25265: LD_INT 2
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 2
25275: NEG
25276: PUSH
25277: LD_INT 3
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 2
25287: PUSH
25288: LD_INT 1
25290: NEG
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 3
25298: PUSH
25299: LD_INT 0
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 3
25308: PUSH
25309: LD_INT 1
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 3
25318: PUSH
25319: LD_INT 2
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 3
25328: PUSH
25329: LD_INT 3
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 2
25338: PUSH
25339: LD_INT 3
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 2
25348: NEG
25349: PUSH
25350: LD_INT 1
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 3
25359: NEG
25360: PUSH
25361: LD_INT 0
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 3
25370: NEG
25371: PUSH
25372: LD_INT 1
25374: NEG
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 3
25382: NEG
25383: PUSH
25384: LD_INT 2
25386: NEG
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 3
25394: NEG
25395: PUSH
25396: LD_INT 3
25398: NEG
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25435: LD_ADDR_VAR 0 45
25439: PUSH
25440: LD_INT 0
25442: PUSH
25443: LD_INT 0
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 0
25452: PUSH
25453: LD_INT 1
25455: NEG
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: LD_INT 0
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: LD_INT 1
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: LD_INT 0
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 1
25504: NEG
25505: PUSH
25506: LD_INT 1
25508: NEG
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 1
25516: NEG
25517: PUSH
25518: LD_INT 2
25520: NEG
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: LD_INT 2
25531: NEG
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: LD_INT 1
25542: NEG
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 2
25550: PUSH
25551: LD_INT 1
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 2
25560: PUSH
25561: LD_INT 2
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: LD_INT 2
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 0
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 1
25590: NEG
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 2
25601: NEG
25602: PUSH
25603: LD_INT 1
25605: NEG
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 2
25613: NEG
25614: PUSH
25615: LD_INT 2
25617: NEG
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 2
25625: NEG
25626: PUSH
25627: LD_INT 3
25629: NEG
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 1
25637: NEG
25638: PUSH
25639: LD_INT 3
25641: NEG
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: LD_INT 3
25652: NEG
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 1
25660: PUSH
25661: LD_INT 2
25663: NEG
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 3
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 3
25681: PUSH
25682: LD_INT 3
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 2
25691: PUSH
25692: LD_INT 3
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: LD_INT 3
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: LD_INT 3
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 1
25721: NEG
25722: PUSH
25723: LD_INT 2
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 3
25732: NEG
25733: PUSH
25734: LD_INT 2
25736: NEG
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 3
25744: NEG
25745: PUSH
25746: LD_INT 3
25748: NEG
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25785: LD_ADDR_VAR 0 46
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: LD_INT 0
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 0
25802: PUSH
25803: LD_INT 1
25805: NEG
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: LD_INT 0
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 1
25823: PUSH
25824: LD_INT 1
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 0
25833: PUSH
25834: LD_INT 1
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 1
25843: NEG
25844: PUSH
25845: LD_INT 0
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 1
25854: NEG
25855: PUSH
25856: LD_INT 1
25858: NEG
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 1
25866: NEG
25867: PUSH
25868: LD_INT 2
25870: NEG
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 0
25878: PUSH
25879: LD_INT 2
25881: NEG
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 1
25889: PUSH
25890: LD_INT 1
25892: NEG
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: LD_INT 0
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 2
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 1
25920: PUSH
25921: LD_INT 2
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: LD_INT 2
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: LD_INT 1
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 2
25951: NEG
25952: PUSH
25953: LD_INT 0
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 2
25962: NEG
25963: PUSH
25964: LD_INT 1
25966: NEG
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 1
25974: NEG
25975: PUSH
25976: LD_INT 3
25978: NEG
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 0
25986: PUSH
25987: LD_INT 3
25989: NEG
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: LD_INT 2
26000: NEG
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 2
26008: PUSH
26009: LD_INT 1
26011: NEG
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 3
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 3
26029: PUSH
26030: LD_INT 1
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 1
26039: PUSH
26040: LD_INT 3
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: LD_INT 3
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: NEG
26060: PUSH
26061: LD_INT 2
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 2
26070: NEG
26071: PUSH
26072: LD_INT 1
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 3
26081: NEG
26082: PUSH
26083: LD_INT 0
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 3
26092: NEG
26093: PUSH
26094: LD_INT 1
26096: NEG
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26133: LD_ADDR_VAR 0 47
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 0
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: LD_INT 0
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 1
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: LD_INT 0
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 1
26202: NEG
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: NEG
26215: PUSH
26216: LD_INT 2
26218: NEG
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 0
26226: PUSH
26227: LD_INT 2
26229: NEG
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: LD_INT 1
26240: NEG
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 2
26248: NEG
26249: PUSH
26250: LD_INT 1
26252: NEG
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 2
26260: NEG
26261: PUSH
26262: LD_INT 2
26264: NEG
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26284: LD_ADDR_VAR 0 48
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: LD_INT 1
26304: NEG
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 1
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: LD_INT 1
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: LD_INT 1
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 1
26353: NEG
26354: PUSH
26355: LD_INT 1
26357: NEG
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: LD_INT 2
26369: NEG
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: LD_INT 2
26380: NEG
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: LD_INT 1
26391: NEG
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 2
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 2
26409: PUSH
26410: LD_INT 1
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26431: LD_ADDR_VAR 0 49
26435: PUSH
26436: LD_INT 0
26438: PUSH
26439: LD_INT 0
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 0
26448: PUSH
26449: LD_INT 1
26451: NEG
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: LD_INT 0
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 1
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 0
26479: PUSH
26480: LD_INT 1
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 1
26489: NEG
26490: PUSH
26491: LD_INT 0
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 1
26500: NEG
26501: PUSH
26502: LD_INT 1
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 2
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 2
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 2
26543: PUSH
26544: LD_INT 2
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 1
26553: PUSH
26554: LD_INT 2
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26575: LD_ADDR_VAR 0 50
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: LD_INT 1
26595: NEG
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 1
26613: PUSH
26614: LD_INT 1
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 0
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 1
26644: NEG
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 2
26656: PUSH
26657: LD_INT 1
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 2
26666: PUSH
26667: LD_INT 2
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 1
26676: PUSH
26677: LD_INT 2
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 0
26686: PUSH
26687: LD_INT 2
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: NEG
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26719: LD_ADDR_VAR 0 51
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 0
26736: PUSH
26737: LD_INT 1
26739: NEG
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 1
26747: PUSH
26748: LD_INT 0
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: LD_INT 1
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 0
26767: PUSH
26768: LD_INT 1
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 1
26777: NEG
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 1
26788: NEG
26789: PUSH
26790: LD_INT 1
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: LD_INT 2
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: LD_INT 2
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 1
26820: NEG
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 2
26831: NEG
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 2
26842: NEG
26843: PUSH
26844: LD_INT 1
26846: NEG
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26866: LD_ADDR_VAR 0 52
26870: PUSH
26871: LD_INT 0
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: LD_INT 1
26886: NEG
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: LD_INT 1
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 0
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 1
26924: NEG
26925: PUSH
26926: LD_INT 0
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 1
26935: NEG
26936: PUSH
26937: LD_INT 1
26939: NEG
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: LD_INT 2
26951: NEG
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: LD_INT 1
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 2
26970: NEG
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 2
26981: NEG
26982: PUSH
26983: LD_INT 1
26985: NEG
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 2
26993: NEG
26994: PUSH
26995: LD_INT 2
26997: NEG
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27017: LD_ADDR_VAR 0 53
27021: PUSH
27022: LD_INT 0
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: LD_INT 1
27037: NEG
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 1
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: LD_INT 1
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: LD_INT 1
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: NEG
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 1
27086: NEG
27087: PUSH
27088: LD_INT 1
27090: NEG
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: NEG
27099: PUSH
27100: LD_INT 2
27102: NEG
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: LD_INT 2
27113: NEG
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: LD_INT 1
27124: NEG
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 2
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 2
27142: PUSH
27143: LD_INT 1
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 2
27152: PUSH
27153: LD_INT 2
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 1
27162: PUSH
27163: LD_INT 2
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 0
27172: PUSH
27173: LD_INT 2
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: NEG
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 2
27193: NEG
27194: PUSH
27195: LD_INT 0
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 2
27204: NEG
27205: PUSH
27206: LD_INT 1
27208: NEG
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 2
27216: NEG
27217: PUSH
27218: LD_INT 2
27220: NEG
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27247: LD_ADDR_VAR 0 54
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 0
27264: PUSH
27265: LD_INT 1
27267: NEG
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 1
27275: PUSH
27276: LD_INT 0
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 1
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 0
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 1
27305: NEG
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: LD_INT 1
27320: NEG
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: LD_INT 2
27332: NEG
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 0
27340: PUSH
27341: LD_INT 2
27343: NEG
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 1
27351: PUSH
27352: LD_INT 1
27354: NEG
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 2
27362: PUSH
27363: LD_INT 0
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 2
27372: PUSH
27373: LD_INT 1
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 2
27382: PUSH
27383: LD_INT 2
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 1
27392: PUSH
27393: LD_INT 2
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 0
27402: PUSH
27403: LD_INT 2
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 1
27412: NEG
27413: PUSH
27414: LD_INT 1
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 2
27423: NEG
27424: PUSH
27425: LD_INT 0
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 2
27434: NEG
27435: PUSH
27436: LD_INT 1
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 2
27446: NEG
27447: PUSH
27448: LD_INT 2
27450: NEG
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27477: LD_ADDR_VAR 0 55
27481: PUSH
27482: LD_INT 0
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: LD_INT 1
27497: NEG
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 1
27515: PUSH
27516: LD_INT 1
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: LD_INT 1
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 1
27535: NEG
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 1
27546: NEG
27547: PUSH
27548: LD_INT 1
27550: NEG
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 1
27558: NEG
27559: PUSH
27560: LD_INT 2
27562: NEG
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 0
27570: PUSH
27571: LD_INT 2
27573: NEG
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: LD_INT 1
27584: NEG
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 2
27592: PUSH
27593: LD_INT 0
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 2
27602: PUSH
27603: LD_INT 1
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 2
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 1
27622: PUSH
27623: LD_INT 2
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: LD_INT 2
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 1
27642: NEG
27643: PUSH
27644: LD_INT 1
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 2
27653: NEG
27654: PUSH
27655: LD_INT 0
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 2
27664: NEG
27665: PUSH
27666: LD_INT 1
27668: NEG
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 2
27676: NEG
27677: PUSH
27678: LD_INT 2
27680: NEG
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27707: LD_ADDR_VAR 0 56
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 0
27724: PUSH
27725: LD_INT 1
27727: NEG
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 1
27735: PUSH
27736: LD_INT 0
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: LD_INT 1
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 1
27765: NEG
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 1
27776: NEG
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: LD_INT 2
27792: NEG
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: LD_INT 2
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: LD_INT 1
27814: NEG
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 2
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 2
27832: PUSH
27833: LD_INT 1
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 2
27842: PUSH
27843: LD_INT 2
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 0
27862: PUSH
27863: LD_INT 2
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 1
27872: NEG
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 2
27883: NEG
27884: PUSH
27885: LD_INT 0
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 2
27894: NEG
27895: PUSH
27896: LD_INT 1
27898: NEG
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 2
27906: NEG
27907: PUSH
27908: LD_INT 2
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27937: LD_ADDR_VAR 0 57
27941: PUSH
27942: LD_INT 0
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: LD_INT 1
27957: NEG
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 1
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: LD_INT 1
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: LD_INT 0
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 1
28006: NEG
28007: PUSH
28008: LD_INT 1
28010: NEG
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 1
28018: NEG
28019: PUSH
28020: LD_INT 2
28022: NEG
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 0
28030: PUSH
28031: LD_INT 2
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: LD_INT 1
28044: NEG
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 2
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 2
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 2
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 0
28092: PUSH
28093: LD_INT 2
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: LD_INT 1
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 2
28113: NEG
28114: PUSH
28115: LD_INT 0
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 2
28124: NEG
28125: PUSH
28126: LD_INT 1
28128: NEG
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 2
28136: NEG
28137: PUSH
28138: LD_INT 2
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28167: LD_ADDR_VAR 0 58
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: LD_INT 0
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 0
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 1
28225: NEG
28226: PUSH
28227: LD_INT 0
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: NEG
28237: PUSH
28238: LD_INT 1
28240: NEG
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 1
28248: NEG
28249: PUSH
28250: LD_INT 2
28252: NEG
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 0
28260: PUSH
28261: LD_INT 2
28263: NEG
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: LD_INT 1
28274: NEG
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 2
28282: PUSH
28283: LD_INT 0
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 2
28292: PUSH
28293: LD_INT 1
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: LD_INT 2
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: LD_INT 2
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: LD_INT 2
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 1
28332: NEG
28333: PUSH
28334: LD_INT 1
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 2
28343: NEG
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 2
28354: NEG
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 2
28366: NEG
28367: PUSH
28368: LD_INT 2
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28397: LD_ADDR_VAR 0 59
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: LD_INT 0
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 1
28466: NEG
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28485: LD_ADDR_VAR 0 60
28489: PUSH
28490: LD_INT 0
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: LD_INT 1
28505: NEG
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 0
28533: PUSH
28534: LD_INT 1
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: NEG
28544: PUSH
28545: LD_INT 0
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 1
28554: NEG
28555: PUSH
28556: LD_INT 1
28558: NEG
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28573: LD_ADDR_VAR 0 61
28577: PUSH
28578: LD_INT 0
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: LD_INT 1
28593: NEG
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 1
28601: PUSH
28602: LD_INT 0
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 1
28611: PUSH
28612: LD_INT 1
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: LD_INT 1
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 1
28631: NEG
28632: PUSH
28633: LD_INT 0
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 1
28642: NEG
28643: PUSH
28644: LD_INT 1
28646: NEG
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28661: LD_ADDR_VAR 0 62
28665: PUSH
28666: LD_INT 0
28668: PUSH
28669: LD_INT 0
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 0
28678: PUSH
28679: LD_INT 1
28681: NEG
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 1
28689: PUSH
28690: LD_INT 0
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 1
28699: PUSH
28700: LD_INT 1
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 0
28709: PUSH
28710: LD_INT 1
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 1
28719: NEG
28720: PUSH
28721: LD_INT 0
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: LD_INT 1
28734: NEG
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28749: LD_ADDR_VAR 0 63
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: LD_INT 0
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 0
28766: PUSH
28767: LD_INT 1
28769: NEG
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: LD_INT 0
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 1
28787: PUSH
28788: LD_INT 1
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 0
28797: PUSH
28798: LD_INT 1
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: LD_INT 0
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 1
28818: NEG
28819: PUSH
28820: LD_INT 1
28822: NEG
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28837: LD_ADDR_VAR 0 64
28841: PUSH
28842: LD_INT 0
28844: PUSH
28845: LD_INT 0
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 0
28854: PUSH
28855: LD_INT 1
28857: NEG
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 1
28865: PUSH
28866: LD_INT 0
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 1
28875: PUSH
28876: LD_INT 1
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 0
28885: PUSH
28886: LD_INT 1
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 1
28895: NEG
28896: PUSH
28897: LD_INT 0
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 1
28906: NEG
28907: PUSH
28908: LD_INT 1
28910: NEG
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: ST_TO_ADDR
// end ; 1 :
28925: GO 34822
28927: LD_INT 1
28929: DOUBLE
28930: EQUAL
28931: IFTRUE 28935
28933: GO 31558
28935: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28936: LD_ADDR_VAR 0 11
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: LD_INT 3
28947: NEG
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: LD_INT 3
28958: NEG
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 1
28966: PUSH
28967: LD_INT 2
28969: NEG
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: LIST
28979: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28980: LD_ADDR_VAR 0 12
28984: PUSH
28985: LD_INT 2
28987: PUSH
28988: LD_INT 1
28990: NEG
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 3
28998: PUSH
28999: LD_INT 0
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 3
29008: PUSH
29009: LD_INT 1
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: LIST
29020: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29021: LD_ADDR_VAR 0 13
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: LD_INT 2
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 3
29038: PUSH
29039: LD_INT 3
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 2
29048: PUSH
29049: LD_INT 3
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: LIST
29060: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29061: LD_ADDR_VAR 0 14
29065: PUSH
29066: LD_INT 1
29068: PUSH
29069: LD_INT 3
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 0
29078: PUSH
29079: LD_INT 3
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 1
29088: NEG
29089: PUSH
29090: LD_INT 2
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: LIST
29101: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29102: LD_ADDR_VAR 0 15
29106: PUSH
29107: LD_INT 2
29109: NEG
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 3
29120: NEG
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 3
29131: NEG
29132: PUSH
29133: LD_INT 1
29135: NEG
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: LIST
29145: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29146: LD_ADDR_VAR 0 16
29150: PUSH
29151: LD_INT 2
29153: NEG
29154: PUSH
29155: LD_INT 3
29157: NEG
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 3
29165: NEG
29166: PUSH
29167: LD_INT 2
29169: NEG
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 3
29177: NEG
29178: PUSH
29179: LD_INT 3
29181: NEG
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: LIST
29191: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29192: LD_ADDR_VAR 0 17
29196: PUSH
29197: LD_INT 1
29199: NEG
29200: PUSH
29201: LD_INT 3
29203: NEG
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 0
29211: PUSH
29212: LD_INT 3
29214: NEG
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: LD_INT 2
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: LIST
29235: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29236: LD_ADDR_VAR 0 18
29240: PUSH
29241: LD_INT 2
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 3
29254: PUSH
29255: LD_INT 0
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 3
29264: PUSH
29265: LD_INT 1
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: LIST
29276: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29277: LD_ADDR_VAR 0 19
29281: PUSH
29282: LD_INT 3
29284: PUSH
29285: LD_INT 2
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 3
29294: PUSH
29295: LD_INT 3
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 2
29304: PUSH
29305: LD_INT 3
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: LIST
29316: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29317: LD_ADDR_VAR 0 20
29321: PUSH
29322: LD_INT 1
29324: PUSH
29325: LD_INT 3
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 0
29334: PUSH
29335: LD_INT 3
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 1
29344: NEG
29345: PUSH
29346: LD_INT 2
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29358: LD_ADDR_VAR 0 21
29362: PUSH
29363: LD_INT 2
29365: NEG
29366: PUSH
29367: LD_INT 1
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 3
29376: NEG
29377: PUSH
29378: LD_INT 0
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 3
29387: NEG
29388: PUSH
29389: LD_INT 1
29391: NEG
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: LIST
29401: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29402: LD_ADDR_VAR 0 22
29406: PUSH
29407: LD_INT 2
29409: NEG
29410: PUSH
29411: LD_INT 3
29413: NEG
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 3
29421: NEG
29422: PUSH
29423: LD_INT 2
29425: NEG
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 3
29433: NEG
29434: PUSH
29435: LD_INT 3
29437: NEG
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: LIST
29447: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29448: LD_ADDR_VAR 0 23
29452: PUSH
29453: LD_INT 0
29455: PUSH
29456: LD_INT 3
29458: NEG
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 1
29466: NEG
29467: PUSH
29468: LD_INT 4
29470: NEG
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: LD_INT 3
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: LIST
29491: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29492: LD_ADDR_VAR 0 24
29496: PUSH
29497: LD_INT 3
29499: PUSH
29500: LD_INT 0
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 3
29509: PUSH
29510: LD_INT 1
29512: NEG
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 4
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: LIST
29532: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29533: LD_ADDR_VAR 0 25
29537: PUSH
29538: LD_INT 3
29540: PUSH
29541: LD_INT 3
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 4
29550: PUSH
29551: LD_INT 3
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 3
29560: PUSH
29561: LD_INT 4
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: LIST
29572: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29573: LD_ADDR_VAR 0 26
29577: PUSH
29578: LD_INT 0
29580: PUSH
29581: LD_INT 3
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 1
29590: PUSH
29591: LD_INT 4
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 1
29600: NEG
29601: PUSH
29602: LD_INT 3
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: LIST
29613: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29614: LD_ADDR_VAR 0 27
29618: PUSH
29619: LD_INT 3
29621: NEG
29622: PUSH
29623: LD_INT 0
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 3
29632: NEG
29633: PUSH
29634: LD_INT 1
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 4
29643: NEG
29644: PUSH
29645: LD_INT 1
29647: NEG
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: LIST
29657: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29658: LD_ADDR_VAR 0 28
29662: PUSH
29663: LD_INT 3
29665: NEG
29666: PUSH
29667: LD_INT 3
29669: NEG
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 3
29677: NEG
29678: PUSH
29679: LD_INT 4
29681: NEG
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 4
29689: NEG
29690: PUSH
29691: LD_INT 3
29693: NEG
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: LIST
29703: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29704: LD_ADDR_VAR 0 29
29708: PUSH
29709: LD_INT 1
29711: NEG
29712: PUSH
29713: LD_INT 3
29715: NEG
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 0
29723: PUSH
29724: LD_INT 3
29726: NEG
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: LD_INT 2
29737: NEG
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: LD_INT 4
29749: NEG
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 0
29757: PUSH
29758: LD_INT 4
29760: NEG
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 1
29768: PUSH
29769: LD_INT 3
29771: NEG
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: PUSH
29781: LD_INT 5
29783: NEG
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 0
29791: PUSH
29792: LD_INT 5
29794: NEG
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 1
29802: PUSH
29803: LD_INT 4
29805: NEG
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 1
29813: NEG
29814: PUSH
29815: LD_INT 6
29817: NEG
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 0
29825: PUSH
29826: LD_INT 6
29828: NEG
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 1
29836: PUSH
29837: LD_INT 5
29839: NEG
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29859: LD_ADDR_VAR 0 30
29863: PUSH
29864: LD_INT 2
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 3
29877: PUSH
29878: LD_INT 0
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 3
29887: PUSH
29888: LD_INT 1
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 3
29897: PUSH
29898: LD_INT 1
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 4
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 4
29918: PUSH
29919: LD_INT 1
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 4
29928: PUSH
29929: LD_INT 1
29931: NEG
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 5
29939: PUSH
29940: LD_INT 0
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 5
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 5
29959: PUSH
29960: LD_INT 1
29962: NEG
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 6
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 6
29980: PUSH
29981: LD_INT 1
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30002: LD_ADDR_VAR 0 31
30006: PUSH
30007: LD_INT 3
30009: PUSH
30010: LD_INT 2
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 3
30019: PUSH
30020: LD_INT 3
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 2
30029: PUSH
30030: LD_INT 3
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 4
30039: PUSH
30040: LD_INT 3
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 4
30049: PUSH
30050: LD_INT 4
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 3
30059: PUSH
30060: LD_INT 4
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 5
30069: PUSH
30070: LD_INT 4
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 5
30079: PUSH
30080: LD_INT 5
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 4
30089: PUSH
30090: LD_INT 5
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 6
30099: PUSH
30100: LD_INT 5
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 6
30109: PUSH
30110: LD_INT 6
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 5
30119: PUSH
30120: LD_INT 6
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30141: LD_ADDR_VAR 0 32
30145: PUSH
30146: LD_INT 1
30148: PUSH
30149: LD_INT 3
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 0
30158: PUSH
30159: LD_INT 3
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 1
30168: NEG
30169: PUSH
30170: LD_INT 2
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: LD_INT 4
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 0
30189: PUSH
30190: LD_INT 4
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 1
30199: NEG
30200: PUSH
30201: LD_INT 3
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 1
30210: PUSH
30211: LD_INT 5
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 0
30220: PUSH
30221: LD_INT 5
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 1
30230: NEG
30231: PUSH
30232: LD_INT 4
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: LD_INT 6
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: LD_INT 6
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: NEG
30262: PUSH
30263: LD_INT 5
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30284: LD_ADDR_VAR 0 33
30288: PUSH
30289: LD_INT 2
30291: NEG
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 3
30302: NEG
30303: PUSH
30304: LD_INT 0
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 3
30313: NEG
30314: PUSH
30315: LD_INT 1
30317: NEG
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 3
30325: NEG
30326: PUSH
30327: LD_INT 1
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 4
30336: NEG
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 4
30347: NEG
30348: PUSH
30349: LD_INT 1
30351: NEG
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 4
30359: NEG
30360: PUSH
30361: LD_INT 1
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 5
30370: NEG
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 5
30381: NEG
30382: PUSH
30383: LD_INT 1
30385: NEG
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 5
30393: NEG
30394: PUSH
30395: LD_INT 1
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 6
30404: NEG
30405: PUSH
30406: LD_INT 0
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 6
30415: NEG
30416: PUSH
30417: LD_INT 1
30419: NEG
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30439: LD_ADDR_VAR 0 34
30443: PUSH
30444: LD_INT 2
30446: NEG
30447: PUSH
30448: LD_INT 3
30450: NEG
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 3
30458: NEG
30459: PUSH
30460: LD_INT 2
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 3
30470: NEG
30471: PUSH
30472: LD_INT 3
30474: NEG
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 3
30482: NEG
30483: PUSH
30484: LD_INT 4
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 4
30494: NEG
30495: PUSH
30496: LD_INT 3
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 4
30506: NEG
30507: PUSH
30508: LD_INT 4
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 4
30518: NEG
30519: PUSH
30520: LD_INT 5
30522: NEG
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 5
30530: NEG
30531: PUSH
30532: LD_INT 4
30534: NEG
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 5
30542: NEG
30543: PUSH
30544: LD_INT 5
30546: NEG
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 5
30554: NEG
30555: PUSH
30556: LD_INT 6
30558: NEG
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 6
30566: NEG
30567: PUSH
30568: LD_INT 5
30570: NEG
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 6
30578: NEG
30579: PUSH
30580: LD_INT 6
30582: NEG
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30602: LD_ADDR_VAR 0 41
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: LD_INT 2
30612: NEG
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 1
30620: NEG
30621: PUSH
30622: LD_INT 3
30624: NEG
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: LD_INT 2
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: LIST
30645: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30646: LD_ADDR_VAR 0 42
30650: PUSH
30651: LD_INT 2
30653: PUSH
30654: LD_INT 0
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 2
30663: PUSH
30664: LD_INT 1
30666: NEG
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 3
30674: PUSH
30675: LD_INT 1
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30687: LD_ADDR_VAR 0 43
30691: PUSH
30692: LD_INT 2
30694: PUSH
30695: LD_INT 2
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 3
30704: PUSH
30705: LD_INT 2
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 2
30714: PUSH
30715: LD_INT 3
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: LIST
30726: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30727: LD_ADDR_VAR 0 44
30731: PUSH
30732: LD_INT 0
30734: PUSH
30735: LD_INT 2
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 1
30744: PUSH
30745: LD_INT 3
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 1
30754: NEG
30755: PUSH
30756: LD_INT 2
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: LIST
30767: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30768: LD_ADDR_VAR 0 45
30772: PUSH
30773: LD_INT 2
30775: NEG
30776: PUSH
30777: LD_INT 0
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 2
30786: NEG
30787: PUSH
30788: LD_INT 1
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 3
30797: NEG
30798: PUSH
30799: LD_INT 1
30801: NEG
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: LIST
30811: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30812: LD_ADDR_VAR 0 46
30816: PUSH
30817: LD_INT 2
30819: NEG
30820: PUSH
30821: LD_INT 2
30823: NEG
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 2
30831: NEG
30832: PUSH
30833: LD_INT 3
30835: NEG
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 3
30843: NEG
30844: PUSH
30845: LD_INT 2
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: LIST
30857: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30858: LD_ADDR_VAR 0 47
30862: PUSH
30863: LD_INT 2
30865: NEG
30866: PUSH
30867: LD_INT 3
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 1
30877: NEG
30878: PUSH
30879: LD_INT 3
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30891: LD_ADDR_VAR 0 48
30895: PUSH
30896: LD_INT 1
30898: PUSH
30899: LD_INT 2
30901: NEG
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 2
30909: PUSH
30910: LD_INT 1
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30922: LD_ADDR_VAR 0 49
30926: PUSH
30927: LD_INT 3
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 3
30939: PUSH
30940: LD_INT 2
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30951: LD_ADDR_VAR 0 50
30955: PUSH
30956: LD_INT 2
30958: PUSH
30959: LD_INT 3
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: LD_INT 3
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30980: LD_ADDR_VAR 0 51
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: LD_INT 2
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 2
30998: NEG
30999: PUSH
31000: LD_INT 1
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31011: LD_ADDR_VAR 0 52
31015: PUSH
31016: LD_INT 3
31018: NEG
31019: PUSH
31020: LD_INT 1
31022: NEG
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 3
31030: NEG
31031: PUSH
31032: LD_INT 2
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31044: LD_ADDR_VAR 0 53
31048: PUSH
31049: LD_INT 1
31051: NEG
31052: PUSH
31053: LD_INT 3
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 0
31063: PUSH
31064: LD_INT 3
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 1
31074: PUSH
31075: LD_INT 2
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: LIST
31087: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31088: LD_ADDR_VAR 0 54
31092: PUSH
31093: LD_INT 2
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 3
31106: PUSH
31107: LD_INT 0
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 3
31116: PUSH
31117: LD_INT 1
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: LIST
31128: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31129: LD_ADDR_VAR 0 55
31133: PUSH
31134: LD_INT 3
31136: PUSH
31137: LD_INT 2
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 3
31146: PUSH
31147: LD_INT 3
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: LD_INT 3
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: LIST
31168: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31169: LD_ADDR_VAR 0 56
31173: PUSH
31174: LD_INT 1
31176: PUSH
31177: LD_INT 3
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 0
31186: PUSH
31187: LD_INT 3
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 1
31196: NEG
31197: PUSH
31198: LD_INT 2
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: LIST
31209: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31210: LD_ADDR_VAR 0 57
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 3
31228: NEG
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 3
31239: NEG
31240: PUSH
31241: LD_INT 1
31243: NEG
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31254: LD_ADDR_VAR 0 58
31258: PUSH
31259: LD_INT 2
31261: NEG
31262: PUSH
31263: LD_INT 3
31265: NEG
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 3
31273: NEG
31274: PUSH
31275: LD_INT 2
31277: NEG
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 3
31285: NEG
31286: PUSH
31287: LD_INT 3
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: LIST
31299: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31300: LD_ADDR_VAR 0 59
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: PUSH
31309: LD_INT 2
31311: NEG
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 0
31319: PUSH
31320: LD_INT 2
31322: NEG
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: LIST
31343: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31344: LD_ADDR_VAR 0 60
31348: PUSH
31349: LD_INT 1
31351: PUSH
31352: LD_INT 1
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 2
31362: PUSH
31363: LD_INT 0
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 2
31372: PUSH
31373: LD_INT 1
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: LIST
31384: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31385: LD_ADDR_VAR 0 61
31389: PUSH
31390: LD_INT 2
31392: PUSH
31393: LD_INT 1
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 2
31402: PUSH
31403: LD_INT 2
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 1
31412: PUSH
31413: LD_INT 2
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: LIST
31424: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31425: LD_ADDR_VAR 0 62
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: LD_INT 2
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 0
31442: PUSH
31443: LD_INT 2
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: LD_INT 1
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: LIST
31465: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31466: LD_ADDR_VAR 0 63
31470: PUSH
31471: LD_INT 1
31473: NEG
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 2
31484: NEG
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 2
31495: NEG
31496: PUSH
31497: LD_INT 1
31499: NEG
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: LIST
31509: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31510: LD_ADDR_VAR 0 64
31514: PUSH
31515: LD_INT 1
31517: NEG
31518: PUSH
31519: LD_INT 2
31521: NEG
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 2
31529: NEG
31530: PUSH
31531: LD_INT 1
31533: NEG
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 2
31541: NEG
31542: PUSH
31543: LD_INT 2
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: LIST
31555: ST_TO_ADDR
// end ; 2 :
31556: GO 34822
31558: LD_INT 2
31560: DOUBLE
31561: EQUAL
31562: IFTRUE 31566
31564: GO 34821
31566: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31567: LD_ADDR_VAR 0 29
31571: PUSH
31572: LD_INT 4
31574: PUSH
31575: LD_INT 0
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 4
31584: PUSH
31585: LD_INT 1
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 5
31595: PUSH
31596: LD_INT 0
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 5
31605: PUSH
31606: LD_INT 1
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 4
31615: PUSH
31616: LD_INT 1
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 3
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 3
31635: PUSH
31636: LD_INT 1
31638: NEG
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 3
31646: PUSH
31647: LD_INT 2
31649: NEG
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 5
31657: PUSH
31658: LD_INT 2
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 3
31667: PUSH
31668: LD_INT 3
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 3
31677: PUSH
31678: LD_INT 2
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 4
31687: PUSH
31688: LD_INT 3
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 4
31697: PUSH
31698: LD_INT 4
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 3
31707: PUSH
31708: LD_INT 4
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 2
31717: PUSH
31718: LD_INT 3
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 2
31727: PUSH
31728: LD_INT 2
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 4
31737: PUSH
31738: LD_INT 2
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 2
31747: PUSH
31748: LD_INT 4
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 0
31757: PUSH
31758: LD_INT 4
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 0
31767: PUSH
31768: LD_INT 3
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 1
31777: PUSH
31778: LD_INT 4
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: LD_INT 5
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 0
31797: PUSH
31798: LD_INT 5
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: LD_INT 4
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 1
31818: NEG
31819: PUSH
31820: LD_INT 3
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 2
31829: PUSH
31830: LD_INT 5
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 2
31839: NEG
31840: PUSH
31841: LD_INT 3
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 3
31850: NEG
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 3
31861: NEG
31862: PUSH
31863: LD_INT 1
31865: NEG
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 2
31873: NEG
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 2
31884: NEG
31885: PUSH
31886: LD_INT 1
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 3
31895: NEG
31896: PUSH
31897: LD_INT 1
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 4
31906: NEG
31907: PUSH
31908: LD_INT 0
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 4
31917: NEG
31918: PUSH
31919: LD_INT 1
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 4
31929: NEG
31930: PUSH
31931: LD_INT 2
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 2
31941: NEG
31942: PUSH
31943: LD_INT 2
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 4
31952: NEG
31953: PUSH
31954: LD_INT 4
31956: NEG
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 4
31964: NEG
31965: PUSH
31966: LD_INT 5
31968: NEG
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 3
31976: NEG
31977: PUSH
31978: LD_INT 4
31980: NEG
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 3
31988: NEG
31989: PUSH
31990: LD_INT 3
31992: NEG
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 4
32000: NEG
32001: PUSH
32002: LD_INT 3
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 5
32012: NEG
32013: PUSH
32014: LD_INT 4
32016: NEG
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 5
32024: NEG
32025: PUSH
32026: LD_INT 5
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 3
32036: NEG
32037: PUSH
32038: LD_INT 5
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 5
32048: NEG
32049: PUSH
32050: LD_INT 3
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32105: LD_ADDR_VAR 0 30
32109: PUSH
32110: LD_INT 4
32112: PUSH
32113: LD_INT 4
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 4
32122: PUSH
32123: LD_INT 3
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 5
32132: PUSH
32133: LD_INT 4
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 5
32142: PUSH
32143: LD_INT 5
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 4
32152: PUSH
32153: LD_INT 5
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 3
32162: PUSH
32163: LD_INT 4
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 3
32172: PUSH
32173: LD_INT 3
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 5
32182: PUSH
32183: LD_INT 3
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 3
32192: PUSH
32193: LD_INT 5
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: LD_INT 3
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: LD_INT 2
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: LD_INT 3
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 1
32232: PUSH
32233: LD_INT 4
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: LD_INT 4
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: NEG
32253: PUSH
32254: LD_INT 3
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 1
32263: NEG
32264: PUSH
32265: LD_INT 2
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 2
32274: PUSH
32275: LD_INT 4
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 2
32284: NEG
32285: PUSH
32286: LD_INT 2
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 4
32295: NEG
32296: PUSH
32297: LD_INT 0
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 4
32306: NEG
32307: PUSH
32308: LD_INT 1
32310: NEG
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 3
32318: NEG
32319: PUSH
32320: LD_INT 0
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 3
32329: NEG
32330: PUSH
32331: LD_INT 1
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 4
32340: NEG
32341: PUSH
32342: LD_INT 1
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 5
32351: NEG
32352: PUSH
32353: LD_INT 0
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 5
32362: NEG
32363: PUSH
32364: LD_INT 1
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 5
32374: NEG
32375: PUSH
32376: LD_INT 2
32378: NEG
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 3
32386: NEG
32387: PUSH
32388: LD_INT 2
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 3
32397: NEG
32398: PUSH
32399: LD_INT 3
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 3
32409: NEG
32410: PUSH
32411: LD_INT 4
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 2
32421: NEG
32422: PUSH
32423: LD_INT 3
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 2
32433: NEG
32434: PUSH
32435: LD_INT 2
32437: NEG
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 3
32445: NEG
32446: PUSH
32447: LD_INT 2
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 4
32457: NEG
32458: PUSH
32459: LD_INT 3
32461: NEG
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 4
32469: NEG
32470: PUSH
32471: LD_INT 4
32473: NEG
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 2
32481: NEG
32482: PUSH
32483: LD_INT 4
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 4
32493: NEG
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 0
32505: PUSH
32506: LD_INT 4
32508: NEG
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 0
32516: PUSH
32517: LD_INT 5
32519: NEG
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 1
32527: PUSH
32528: LD_INT 4
32530: NEG
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 1
32538: PUSH
32539: LD_INT 3
32541: NEG
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: LD_INT 3
32552: NEG
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 1
32560: NEG
32561: PUSH
32562: LD_INT 4
32564: NEG
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: LD_INT 5
32576: NEG
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 2
32584: PUSH
32585: LD_INT 3
32587: NEG
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 2
32595: NEG
32596: PUSH
32597: LD_INT 5
32599: NEG
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32652: LD_ADDR_VAR 0 31
32656: PUSH
32657: LD_INT 0
32659: PUSH
32660: LD_INT 4
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 0
32669: PUSH
32670: LD_INT 3
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 1
32679: PUSH
32680: LD_INT 4
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 1
32689: PUSH
32690: LD_INT 5
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 0
32699: PUSH
32700: LD_INT 5
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 1
32709: NEG
32710: PUSH
32711: LD_INT 4
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 1
32720: NEG
32721: PUSH
32722: LD_INT 3
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 2
32731: PUSH
32732: LD_INT 5
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 2
32741: NEG
32742: PUSH
32743: LD_INT 3
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 3
32752: NEG
32753: PUSH
32754: LD_INT 0
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 3
32763: NEG
32764: PUSH
32765: LD_INT 1
32767: NEG
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 2
32775: NEG
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 2
32786: NEG
32787: PUSH
32788: LD_INT 1
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 3
32797: NEG
32798: PUSH
32799: LD_INT 1
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 4
32808: NEG
32809: PUSH
32810: LD_INT 0
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 4
32819: NEG
32820: PUSH
32821: LD_INT 1
32823: NEG
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 4
32831: NEG
32832: PUSH
32833: LD_INT 2
32835: NEG
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 2
32843: NEG
32844: PUSH
32845: LD_INT 2
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 4
32854: NEG
32855: PUSH
32856: LD_INT 4
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 4
32866: NEG
32867: PUSH
32868: LD_INT 5
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 3
32878: NEG
32879: PUSH
32880: LD_INT 4
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 3
32890: NEG
32891: PUSH
32892: LD_INT 3
32894: NEG
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 4
32902: NEG
32903: PUSH
32904: LD_INT 3
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 5
32914: NEG
32915: PUSH
32916: LD_INT 4
32918: NEG
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 5
32926: NEG
32927: PUSH
32928: LD_INT 5
32930: NEG
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 3
32938: NEG
32939: PUSH
32940: LD_INT 5
32942: NEG
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 5
32950: NEG
32951: PUSH
32952: LD_INT 3
32954: NEG
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 0
32962: PUSH
32963: LD_INT 3
32965: NEG
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: LD_INT 4
32976: NEG
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 1
32984: PUSH
32985: LD_INT 3
32987: NEG
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 1
32995: PUSH
32996: LD_INT 2
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: LD_INT 2
33009: NEG
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 1
33017: NEG
33018: PUSH
33019: LD_INT 3
33021: NEG
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: NEG
33030: PUSH
33031: LD_INT 4
33033: NEG
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 2
33041: PUSH
33042: LD_INT 2
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 2
33052: NEG
33053: PUSH
33054: LD_INT 4
33056: NEG
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 4
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 4
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 5
33085: PUSH
33086: LD_INT 0
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 5
33095: PUSH
33096: LD_INT 1
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 4
33105: PUSH
33106: LD_INT 1
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 3
33115: PUSH
33116: LD_INT 0
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 3
33125: PUSH
33126: LD_INT 1
33128: NEG
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 3
33136: PUSH
33137: LD_INT 2
33139: NEG
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 5
33147: PUSH
33148: LD_INT 2
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33202: LD_ADDR_VAR 0 32
33206: PUSH
33207: LD_INT 4
33209: NEG
33210: PUSH
33211: LD_INT 0
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 4
33220: NEG
33221: PUSH
33222: LD_INT 1
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 3
33232: NEG
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 3
33243: NEG
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 4
33254: NEG
33255: PUSH
33256: LD_INT 1
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 5
33265: NEG
33266: PUSH
33267: LD_INT 0
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 5
33276: NEG
33277: PUSH
33278: LD_INT 1
33280: NEG
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 5
33288: NEG
33289: PUSH
33290: LD_INT 2
33292: NEG
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 3
33300: NEG
33301: PUSH
33302: LD_INT 2
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 3
33311: NEG
33312: PUSH
33313: LD_INT 3
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 3
33323: NEG
33324: PUSH
33325: LD_INT 4
33327: NEG
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 2
33335: NEG
33336: PUSH
33337: LD_INT 3
33339: NEG
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 2
33347: NEG
33348: PUSH
33349: LD_INT 2
33351: NEG
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 3
33359: NEG
33360: PUSH
33361: LD_INT 2
33363: NEG
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 4
33371: NEG
33372: PUSH
33373: LD_INT 3
33375: NEG
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 4
33383: NEG
33384: PUSH
33385: LD_INT 4
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: NEG
33396: PUSH
33397: LD_INT 4
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 4
33407: NEG
33408: PUSH
33409: LD_INT 2
33411: NEG
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: LD_INT 4
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 0
33430: PUSH
33431: LD_INT 5
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: LD_INT 4
33444: NEG
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 1
33452: PUSH
33453: LD_INT 3
33455: NEG
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: LD_INT 3
33466: NEG
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 1
33474: NEG
33475: PUSH
33476: LD_INT 4
33478: NEG
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 1
33486: NEG
33487: PUSH
33488: LD_INT 5
33490: NEG
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 2
33498: PUSH
33499: LD_INT 3
33501: NEG
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 2
33509: NEG
33510: PUSH
33511: LD_INT 5
33513: NEG
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 3
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 3
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 4
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 4
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 3
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: PUSH
33573: LD_INT 0
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 2
33582: PUSH
33583: LD_INT 1
33585: NEG
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 2
33593: PUSH
33594: LD_INT 2
33596: NEG
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 4
33604: PUSH
33605: LD_INT 2
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 4
33614: PUSH
33615: LD_INT 4
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 4
33624: PUSH
33625: LD_INT 3
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 5
33634: PUSH
33635: LD_INT 4
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 5
33644: PUSH
33645: LD_INT 5
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 4
33654: PUSH
33655: LD_INT 5
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 3
33664: PUSH
33665: LD_INT 4
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 3
33674: PUSH
33675: LD_INT 3
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 5
33684: PUSH
33685: LD_INT 3
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 3
33694: PUSH
33695: LD_INT 5
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33749: LD_ADDR_VAR 0 33
33753: PUSH
33754: LD_INT 4
33756: NEG
33757: PUSH
33758: LD_INT 4
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 4
33768: NEG
33769: PUSH
33770: LD_INT 5
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 3
33780: NEG
33781: PUSH
33782: LD_INT 4
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 3
33792: NEG
33793: PUSH
33794: LD_INT 3
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 4
33804: NEG
33805: PUSH
33806: LD_INT 3
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 5
33816: NEG
33817: PUSH
33818: LD_INT 4
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 5
33828: NEG
33829: PUSH
33830: LD_INT 5
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 3
33840: NEG
33841: PUSH
33842: LD_INT 5
33844: NEG
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 5
33852: NEG
33853: PUSH
33854: LD_INT 3
33856: NEG
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 0
33864: PUSH
33865: LD_INT 3
33867: NEG
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 0
33875: PUSH
33876: LD_INT 4
33878: NEG
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 1
33886: PUSH
33887: LD_INT 3
33889: NEG
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 1
33897: PUSH
33898: LD_INT 2
33900: NEG
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: LD_INT 2
33911: NEG
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 1
33919: NEG
33920: PUSH
33921: LD_INT 3
33923: NEG
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 1
33931: NEG
33932: PUSH
33933: LD_INT 4
33935: NEG
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 2
33943: PUSH
33944: LD_INT 2
33946: NEG
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 2
33954: NEG
33955: PUSH
33956: LD_INT 4
33958: NEG
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 4
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 4
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 5
33987: PUSH
33988: LD_INT 0
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 5
33997: PUSH
33998: LD_INT 1
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 4
34007: PUSH
34008: LD_INT 1
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 3
34017: PUSH
34018: LD_INT 0
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 3
34027: PUSH
34028: LD_INT 1
34030: NEG
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 3
34038: PUSH
34039: LD_INT 2
34041: NEG
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 5
34049: PUSH
34050: LD_INT 2
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 3
34059: PUSH
34060: LD_INT 3
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 3
34069: PUSH
34070: LD_INT 2
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 4
34079: PUSH
34080: LD_INT 3
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 4
34089: PUSH
34090: LD_INT 4
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 3
34099: PUSH
34100: LD_INT 4
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 2
34109: PUSH
34110: LD_INT 3
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 2
34119: PUSH
34120: LD_INT 2
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 4
34129: PUSH
34130: LD_INT 2
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 2
34139: PUSH
34140: LD_INT 4
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: LD_INT 4
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 0
34159: PUSH
34160: LD_INT 3
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 1
34169: PUSH
34170: LD_INT 4
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 1
34179: PUSH
34180: LD_INT 5
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: LD_INT 5
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 1
34199: NEG
34200: PUSH
34201: LD_INT 4
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 1
34210: NEG
34211: PUSH
34212: LD_INT 3
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 2
34221: PUSH
34222: LD_INT 5
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 2
34231: NEG
34232: PUSH
34233: LD_INT 3
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34287: LD_ADDR_VAR 0 34
34291: PUSH
34292: LD_INT 0
34294: PUSH
34295: LD_INT 4
34297: NEG
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: LD_INT 5
34308: NEG
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 1
34316: PUSH
34317: LD_INT 4
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 1
34327: PUSH
34328: LD_INT 3
34330: NEG
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 0
34338: PUSH
34339: LD_INT 3
34341: NEG
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 1
34349: NEG
34350: PUSH
34351: LD_INT 4
34353: NEG
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 1
34361: NEG
34362: PUSH
34363: LD_INT 5
34365: NEG
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 2
34373: PUSH
34374: LD_INT 3
34376: NEG
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 2
34384: NEG
34385: PUSH
34386: LD_INT 5
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 3
34396: PUSH
34397: LD_INT 0
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 3
34406: PUSH
34407: LD_INT 1
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 4
34417: PUSH
34418: LD_INT 0
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 4
34427: PUSH
34428: LD_INT 1
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 3
34437: PUSH
34438: LD_INT 1
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 2
34447: PUSH
34448: LD_INT 0
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 2
34457: PUSH
34458: LD_INT 1
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 2
34468: PUSH
34469: LD_INT 2
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 4
34479: PUSH
34480: LD_INT 2
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 4
34489: PUSH
34490: LD_INT 4
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 4
34499: PUSH
34500: LD_INT 3
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 5
34509: PUSH
34510: LD_INT 4
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 5
34519: PUSH
34520: LD_INT 5
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 4
34529: PUSH
34530: LD_INT 5
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 3
34539: PUSH
34540: LD_INT 4
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 3
34549: PUSH
34550: LD_INT 3
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 5
34559: PUSH
34560: LD_INT 3
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 3
34569: PUSH
34570: LD_INT 5
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 0
34579: PUSH
34580: LD_INT 3
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: LD_INT 3
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: PUSH
34610: LD_INT 4
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: LD_INT 4
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 1
34629: NEG
34630: PUSH
34631: LD_INT 3
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: LD_INT 2
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 2
34651: PUSH
34652: LD_INT 4
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 2
34661: NEG
34662: PUSH
34663: LD_INT 2
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 4
34672: NEG
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 4
34683: NEG
34684: PUSH
34685: LD_INT 1
34687: NEG
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 3
34695: NEG
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 3
34706: NEG
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 4
34717: NEG
34718: PUSH
34719: LD_INT 1
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 5
34728: NEG
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 5
34739: NEG
34740: PUSH
34741: LD_INT 1
34743: NEG
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 5
34751: NEG
34752: PUSH
34753: LD_INT 2
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 3
34763: NEG
34764: PUSH
34765: LD_INT 2
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: ST_TO_ADDR
// end ; end ;
34819: GO 34822
34821: POP
// case btype of b_depot , b_warehouse :
34822: LD_VAR 0 1
34826: PUSH
34827: LD_INT 0
34829: DOUBLE
34830: EQUAL
34831: IFTRUE 34841
34833: LD_INT 1
34835: DOUBLE
34836: EQUAL
34837: IFTRUE 34841
34839: GO 35042
34841: POP
// case nation of nation_american :
34842: LD_VAR 0 5
34846: PUSH
34847: LD_INT 1
34849: DOUBLE
34850: EQUAL
34851: IFTRUE 34855
34853: GO 34911
34855: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34856: LD_ADDR_VAR 0 9
34860: PUSH
34861: LD_VAR 0 11
34865: PUSH
34866: LD_VAR 0 12
34870: PUSH
34871: LD_VAR 0 13
34875: PUSH
34876: LD_VAR 0 14
34880: PUSH
34881: LD_VAR 0 15
34885: PUSH
34886: LD_VAR 0 16
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: PUSH
34899: LD_VAR 0 4
34903: PUSH
34904: LD_INT 1
34906: PLUS
34907: ARRAY
34908: ST_TO_ADDR
34909: GO 35040
34911: LD_INT 2
34913: DOUBLE
34914: EQUAL
34915: IFTRUE 34919
34917: GO 34975
34919: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34920: LD_ADDR_VAR 0 9
34924: PUSH
34925: LD_VAR 0 17
34929: PUSH
34930: LD_VAR 0 18
34934: PUSH
34935: LD_VAR 0 19
34939: PUSH
34940: LD_VAR 0 20
34944: PUSH
34945: LD_VAR 0 21
34949: PUSH
34950: LD_VAR 0 22
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: PUSH
34963: LD_VAR 0 4
34967: PUSH
34968: LD_INT 1
34970: PLUS
34971: ARRAY
34972: ST_TO_ADDR
34973: GO 35040
34975: LD_INT 3
34977: DOUBLE
34978: EQUAL
34979: IFTRUE 34983
34981: GO 35039
34983: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34984: LD_ADDR_VAR 0 9
34988: PUSH
34989: LD_VAR 0 23
34993: PUSH
34994: LD_VAR 0 24
34998: PUSH
34999: LD_VAR 0 25
35003: PUSH
35004: LD_VAR 0 26
35008: PUSH
35009: LD_VAR 0 27
35013: PUSH
35014: LD_VAR 0 28
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: PUSH
35027: LD_VAR 0 4
35031: PUSH
35032: LD_INT 1
35034: PLUS
35035: ARRAY
35036: ST_TO_ADDR
35037: GO 35040
35039: POP
35040: GO 35595
35042: LD_INT 2
35044: DOUBLE
35045: EQUAL
35046: IFTRUE 35056
35048: LD_INT 3
35050: DOUBLE
35051: EQUAL
35052: IFTRUE 35056
35054: GO 35112
35056: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35057: LD_ADDR_VAR 0 9
35061: PUSH
35062: LD_VAR 0 29
35066: PUSH
35067: LD_VAR 0 30
35071: PUSH
35072: LD_VAR 0 31
35076: PUSH
35077: LD_VAR 0 32
35081: PUSH
35082: LD_VAR 0 33
35086: PUSH
35087: LD_VAR 0 34
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: PUSH
35100: LD_VAR 0 4
35104: PUSH
35105: LD_INT 1
35107: PLUS
35108: ARRAY
35109: ST_TO_ADDR
35110: GO 35595
35112: LD_INT 16
35114: DOUBLE
35115: EQUAL
35116: IFTRUE 35174
35118: LD_INT 17
35120: DOUBLE
35121: EQUAL
35122: IFTRUE 35174
35124: LD_INT 18
35126: DOUBLE
35127: EQUAL
35128: IFTRUE 35174
35130: LD_INT 19
35132: DOUBLE
35133: EQUAL
35134: IFTRUE 35174
35136: LD_INT 22
35138: DOUBLE
35139: EQUAL
35140: IFTRUE 35174
35142: LD_INT 20
35144: DOUBLE
35145: EQUAL
35146: IFTRUE 35174
35148: LD_INT 21
35150: DOUBLE
35151: EQUAL
35152: IFTRUE 35174
35154: LD_INT 23
35156: DOUBLE
35157: EQUAL
35158: IFTRUE 35174
35160: LD_INT 24
35162: DOUBLE
35163: EQUAL
35164: IFTRUE 35174
35166: LD_INT 25
35168: DOUBLE
35169: EQUAL
35170: IFTRUE 35174
35172: GO 35230
35174: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35175: LD_ADDR_VAR 0 9
35179: PUSH
35180: LD_VAR 0 35
35184: PUSH
35185: LD_VAR 0 36
35189: PUSH
35190: LD_VAR 0 37
35194: PUSH
35195: LD_VAR 0 38
35199: PUSH
35200: LD_VAR 0 39
35204: PUSH
35205: LD_VAR 0 40
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: PUSH
35218: LD_VAR 0 4
35222: PUSH
35223: LD_INT 1
35225: PLUS
35226: ARRAY
35227: ST_TO_ADDR
35228: GO 35595
35230: LD_INT 6
35232: DOUBLE
35233: EQUAL
35234: IFTRUE 35286
35236: LD_INT 7
35238: DOUBLE
35239: EQUAL
35240: IFTRUE 35286
35242: LD_INT 8
35244: DOUBLE
35245: EQUAL
35246: IFTRUE 35286
35248: LD_INT 13
35250: DOUBLE
35251: EQUAL
35252: IFTRUE 35286
35254: LD_INT 12
35256: DOUBLE
35257: EQUAL
35258: IFTRUE 35286
35260: LD_INT 15
35262: DOUBLE
35263: EQUAL
35264: IFTRUE 35286
35266: LD_INT 11
35268: DOUBLE
35269: EQUAL
35270: IFTRUE 35286
35272: LD_INT 14
35274: DOUBLE
35275: EQUAL
35276: IFTRUE 35286
35278: LD_INT 10
35280: DOUBLE
35281: EQUAL
35282: IFTRUE 35286
35284: GO 35342
35286: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35287: LD_ADDR_VAR 0 9
35291: PUSH
35292: LD_VAR 0 41
35296: PUSH
35297: LD_VAR 0 42
35301: PUSH
35302: LD_VAR 0 43
35306: PUSH
35307: LD_VAR 0 44
35311: PUSH
35312: LD_VAR 0 45
35316: PUSH
35317: LD_VAR 0 46
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: PUSH
35330: LD_VAR 0 4
35334: PUSH
35335: LD_INT 1
35337: PLUS
35338: ARRAY
35339: ST_TO_ADDR
35340: GO 35595
35342: LD_INT 36
35344: DOUBLE
35345: EQUAL
35346: IFTRUE 35350
35348: GO 35406
35350: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35351: LD_ADDR_VAR 0 9
35355: PUSH
35356: LD_VAR 0 47
35360: PUSH
35361: LD_VAR 0 48
35365: PUSH
35366: LD_VAR 0 49
35370: PUSH
35371: LD_VAR 0 50
35375: PUSH
35376: LD_VAR 0 51
35380: PUSH
35381: LD_VAR 0 52
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: PUSH
35394: LD_VAR 0 4
35398: PUSH
35399: LD_INT 1
35401: PLUS
35402: ARRAY
35403: ST_TO_ADDR
35404: GO 35595
35406: LD_INT 4
35408: DOUBLE
35409: EQUAL
35410: IFTRUE 35432
35412: LD_INT 5
35414: DOUBLE
35415: EQUAL
35416: IFTRUE 35432
35418: LD_INT 34
35420: DOUBLE
35421: EQUAL
35422: IFTRUE 35432
35424: LD_INT 37
35426: DOUBLE
35427: EQUAL
35428: IFTRUE 35432
35430: GO 35488
35432: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35433: LD_ADDR_VAR 0 9
35437: PUSH
35438: LD_VAR 0 53
35442: PUSH
35443: LD_VAR 0 54
35447: PUSH
35448: LD_VAR 0 55
35452: PUSH
35453: LD_VAR 0 56
35457: PUSH
35458: LD_VAR 0 57
35462: PUSH
35463: LD_VAR 0 58
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: PUSH
35476: LD_VAR 0 4
35480: PUSH
35481: LD_INT 1
35483: PLUS
35484: ARRAY
35485: ST_TO_ADDR
35486: GO 35595
35488: LD_INT 31
35490: DOUBLE
35491: EQUAL
35492: IFTRUE 35538
35494: LD_INT 32
35496: DOUBLE
35497: EQUAL
35498: IFTRUE 35538
35500: LD_INT 33
35502: DOUBLE
35503: EQUAL
35504: IFTRUE 35538
35506: LD_INT 27
35508: DOUBLE
35509: EQUAL
35510: IFTRUE 35538
35512: LD_INT 26
35514: DOUBLE
35515: EQUAL
35516: IFTRUE 35538
35518: LD_INT 28
35520: DOUBLE
35521: EQUAL
35522: IFTRUE 35538
35524: LD_INT 29
35526: DOUBLE
35527: EQUAL
35528: IFTRUE 35538
35530: LD_INT 30
35532: DOUBLE
35533: EQUAL
35534: IFTRUE 35538
35536: GO 35594
35538: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35539: LD_ADDR_VAR 0 9
35543: PUSH
35544: LD_VAR 0 59
35548: PUSH
35549: LD_VAR 0 60
35553: PUSH
35554: LD_VAR 0 61
35558: PUSH
35559: LD_VAR 0 62
35563: PUSH
35564: LD_VAR 0 63
35568: PUSH
35569: LD_VAR 0 64
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: PUSH
35582: LD_VAR 0 4
35586: PUSH
35587: LD_INT 1
35589: PLUS
35590: ARRAY
35591: ST_TO_ADDR
35592: GO 35595
35594: POP
// temp_list2 = [ ] ;
35595: LD_ADDR_VAR 0 10
35599: PUSH
35600: EMPTY
35601: ST_TO_ADDR
// for i in temp_list do
35602: LD_ADDR_VAR 0 8
35606: PUSH
35607: LD_VAR 0 9
35611: PUSH
35612: FOR_IN
35613: IFFALSE 35665
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35615: LD_ADDR_VAR 0 10
35619: PUSH
35620: LD_VAR 0 10
35624: PUSH
35625: LD_VAR 0 8
35629: PUSH
35630: LD_INT 1
35632: ARRAY
35633: PUSH
35634: LD_VAR 0 2
35638: PLUS
35639: PUSH
35640: LD_VAR 0 8
35644: PUSH
35645: LD_INT 2
35647: ARRAY
35648: PUSH
35649: LD_VAR 0 3
35653: PLUS
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: EMPTY
35660: LIST
35661: ADD
35662: ST_TO_ADDR
35663: GO 35612
35665: POP
35666: POP
// result = temp_list2 ;
35667: LD_ADDR_VAR 0 7
35671: PUSH
35672: LD_VAR 0 10
35676: ST_TO_ADDR
// end ;
35677: LD_VAR 0 7
35681: RET
// export function EnemyInRange ( unit , dist ) ; begin
35682: LD_INT 0
35684: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35685: LD_ADDR_VAR 0 3
35689: PUSH
35690: LD_VAR 0 1
35694: PPUSH
35695: CALL_OW 255
35699: PPUSH
35700: LD_VAR 0 1
35704: PPUSH
35705: CALL_OW 250
35709: PPUSH
35710: LD_VAR 0 1
35714: PPUSH
35715: CALL_OW 251
35719: PPUSH
35720: LD_VAR 0 2
35724: PPUSH
35725: CALL 9055 0 4
35729: PUSH
35730: LD_INT 4
35732: ARRAY
35733: ST_TO_ADDR
// end ;
35734: LD_VAR 0 3
35738: RET
// export function PlayerSeeMe ( unit ) ; begin
35739: LD_INT 0
35741: PPUSH
// result := See ( your_side , unit ) ;
35742: LD_ADDR_VAR 0 2
35746: PUSH
35747: LD_OWVAR 2
35751: PPUSH
35752: LD_VAR 0 1
35756: PPUSH
35757: CALL_OW 292
35761: ST_TO_ADDR
// end ;
35762: LD_VAR 0 2
35766: RET
// export function ReverseDir ( unit ) ; begin
35767: LD_INT 0
35769: PPUSH
// if not unit then
35770: LD_VAR 0 1
35774: NOT
35775: IFFALSE 35779
// exit ;
35777: GO 35802
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35779: LD_ADDR_VAR 0 2
35783: PUSH
35784: LD_VAR 0 1
35788: PPUSH
35789: CALL_OW 254
35793: PUSH
35794: LD_INT 3
35796: PLUS
35797: PUSH
35798: LD_INT 6
35800: MOD
35801: ST_TO_ADDR
// end ;
35802: LD_VAR 0 2
35806: RET
// export function ReverseArray ( array ) ; var i ; begin
35807: LD_INT 0
35809: PPUSH
35810: PPUSH
// if not array then
35811: LD_VAR 0 1
35815: NOT
35816: IFFALSE 35820
// exit ;
35818: GO 35875
// result := [ ] ;
35820: LD_ADDR_VAR 0 2
35824: PUSH
35825: EMPTY
35826: ST_TO_ADDR
// for i := array downto 1 do
35827: LD_ADDR_VAR 0 3
35831: PUSH
35832: DOUBLE
35833: LD_VAR 0 1
35837: INC
35838: ST_TO_ADDR
35839: LD_INT 1
35841: PUSH
35842: FOR_DOWNTO
35843: IFFALSE 35873
// result := Join ( result , array [ i ] ) ;
35845: LD_ADDR_VAR 0 2
35849: PUSH
35850: LD_VAR 0 2
35854: PPUSH
35855: LD_VAR 0 1
35859: PUSH
35860: LD_VAR 0 3
35864: ARRAY
35865: PPUSH
35866: CALL 40540 0 2
35870: ST_TO_ADDR
35871: GO 35842
35873: POP
35874: POP
// end ;
35875: LD_VAR 0 2
35879: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35880: LD_INT 0
35882: PPUSH
35883: PPUSH
35884: PPUSH
35885: PPUSH
35886: PPUSH
35887: PPUSH
// if not unit or not hexes then
35888: LD_VAR 0 1
35892: NOT
35893: PUSH
35894: LD_VAR 0 2
35898: NOT
35899: OR
35900: IFFALSE 35904
// exit ;
35902: GO 36027
// dist := 9999 ;
35904: LD_ADDR_VAR 0 5
35908: PUSH
35909: LD_INT 9999
35911: ST_TO_ADDR
// for i = 1 to hexes do
35912: LD_ADDR_VAR 0 4
35916: PUSH
35917: DOUBLE
35918: LD_INT 1
35920: DEC
35921: ST_TO_ADDR
35922: LD_VAR 0 2
35926: PUSH
35927: FOR_TO
35928: IFFALSE 36015
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35930: LD_ADDR_VAR 0 6
35934: PUSH
35935: LD_VAR 0 1
35939: PPUSH
35940: LD_VAR 0 2
35944: PUSH
35945: LD_VAR 0 4
35949: ARRAY
35950: PUSH
35951: LD_INT 1
35953: ARRAY
35954: PPUSH
35955: LD_VAR 0 2
35959: PUSH
35960: LD_VAR 0 4
35964: ARRAY
35965: PUSH
35966: LD_INT 2
35968: ARRAY
35969: PPUSH
35970: CALL_OW 297
35974: ST_TO_ADDR
// if tdist < dist then
35975: LD_VAR 0 6
35979: PUSH
35980: LD_VAR 0 5
35984: LESS
35985: IFFALSE 36013
// begin hex := hexes [ i ] ;
35987: LD_ADDR_VAR 0 8
35991: PUSH
35992: LD_VAR 0 2
35996: PUSH
35997: LD_VAR 0 4
36001: ARRAY
36002: ST_TO_ADDR
// dist := tdist ;
36003: LD_ADDR_VAR 0 5
36007: PUSH
36008: LD_VAR 0 6
36012: ST_TO_ADDR
// end ; end ;
36013: GO 35927
36015: POP
36016: POP
// result := hex ;
36017: LD_ADDR_VAR 0 3
36021: PUSH
36022: LD_VAR 0 8
36026: ST_TO_ADDR
// end ;
36027: LD_VAR 0 3
36031: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36032: LD_INT 0
36034: PPUSH
36035: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36036: LD_VAR 0 1
36040: NOT
36041: PUSH
36042: LD_VAR 0 1
36046: PUSH
36047: LD_INT 21
36049: PUSH
36050: LD_INT 2
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 23
36059: PUSH
36060: LD_INT 2
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PPUSH
36071: CALL_OW 69
36075: IN
36076: NOT
36077: OR
36078: IFFALSE 36082
// exit ;
36080: GO 36129
// for i = 1 to 3 do
36082: LD_ADDR_VAR 0 3
36086: PUSH
36087: DOUBLE
36088: LD_INT 1
36090: DEC
36091: ST_TO_ADDR
36092: LD_INT 3
36094: PUSH
36095: FOR_TO
36096: IFFALSE 36127
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36098: LD_VAR 0 1
36102: PPUSH
36103: CALL_OW 250
36107: PPUSH
36108: LD_VAR 0 1
36112: PPUSH
36113: CALL_OW 251
36117: PPUSH
36118: LD_INT 1
36120: PPUSH
36121: CALL_OW 453
36125: GO 36095
36127: POP
36128: POP
// end ;
36129: LD_VAR 0 2
36133: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36134: LD_INT 0
36136: PPUSH
36137: PPUSH
36138: PPUSH
36139: PPUSH
36140: PPUSH
36141: PPUSH
// if not unit or not enemy_unit then
36142: LD_VAR 0 1
36146: NOT
36147: PUSH
36148: LD_VAR 0 2
36152: NOT
36153: OR
36154: IFFALSE 36158
// exit ;
36156: GO 36625
// if GetLives ( i ) < 250 then
36158: LD_VAR 0 4
36162: PPUSH
36163: CALL_OW 256
36167: PUSH
36168: LD_INT 250
36170: LESS
36171: IFFALSE 36184
// begin ComAutodestruct ( i ) ;
36173: LD_VAR 0 4
36177: PPUSH
36178: CALL 36032 0 1
// exit ;
36182: GO 36625
// end ; x := GetX ( enemy_unit ) ;
36184: LD_ADDR_VAR 0 7
36188: PUSH
36189: LD_VAR 0 2
36193: PPUSH
36194: CALL_OW 250
36198: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36199: LD_ADDR_VAR 0 8
36203: PUSH
36204: LD_VAR 0 2
36208: PPUSH
36209: CALL_OW 251
36213: ST_TO_ADDR
// if not x or not y then
36214: LD_VAR 0 7
36218: NOT
36219: PUSH
36220: LD_VAR 0 8
36224: NOT
36225: OR
36226: IFFALSE 36230
// exit ;
36228: GO 36625
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36230: LD_ADDR_VAR 0 6
36234: PUSH
36235: LD_VAR 0 7
36239: PPUSH
36240: LD_INT 0
36242: PPUSH
36243: LD_INT 4
36245: PPUSH
36246: CALL_OW 272
36250: PUSH
36251: LD_VAR 0 8
36255: PPUSH
36256: LD_INT 0
36258: PPUSH
36259: LD_INT 4
36261: PPUSH
36262: CALL_OW 273
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_VAR 0 7
36275: PPUSH
36276: LD_INT 1
36278: PPUSH
36279: LD_INT 4
36281: PPUSH
36282: CALL_OW 272
36286: PUSH
36287: LD_VAR 0 8
36291: PPUSH
36292: LD_INT 1
36294: PPUSH
36295: LD_INT 4
36297: PPUSH
36298: CALL_OW 273
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_VAR 0 7
36311: PPUSH
36312: LD_INT 2
36314: PPUSH
36315: LD_INT 4
36317: PPUSH
36318: CALL_OW 272
36322: PUSH
36323: LD_VAR 0 8
36327: PPUSH
36328: LD_INT 2
36330: PPUSH
36331: LD_INT 4
36333: PPUSH
36334: CALL_OW 273
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_VAR 0 7
36347: PPUSH
36348: LD_INT 3
36350: PPUSH
36351: LD_INT 4
36353: PPUSH
36354: CALL_OW 272
36358: PUSH
36359: LD_VAR 0 8
36363: PPUSH
36364: LD_INT 3
36366: PPUSH
36367: LD_INT 4
36369: PPUSH
36370: CALL_OW 273
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_VAR 0 7
36383: PPUSH
36384: LD_INT 4
36386: PPUSH
36387: LD_INT 4
36389: PPUSH
36390: CALL_OW 272
36394: PUSH
36395: LD_VAR 0 8
36399: PPUSH
36400: LD_INT 4
36402: PPUSH
36403: LD_INT 4
36405: PPUSH
36406: CALL_OW 273
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_VAR 0 7
36419: PPUSH
36420: LD_INT 5
36422: PPUSH
36423: LD_INT 4
36425: PPUSH
36426: CALL_OW 272
36430: PUSH
36431: LD_VAR 0 8
36435: PPUSH
36436: LD_INT 5
36438: PPUSH
36439: LD_INT 4
36441: PPUSH
36442: CALL_OW 273
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: ST_TO_ADDR
// for i = tmp downto 1 do
36459: LD_ADDR_VAR 0 4
36463: PUSH
36464: DOUBLE
36465: LD_VAR 0 6
36469: INC
36470: ST_TO_ADDR
36471: LD_INT 1
36473: PUSH
36474: FOR_DOWNTO
36475: IFFALSE 36576
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36477: LD_VAR 0 6
36481: PUSH
36482: LD_VAR 0 4
36486: ARRAY
36487: PUSH
36488: LD_INT 1
36490: ARRAY
36491: PPUSH
36492: LD_VAR 0 6
36496: PUSH
36497: LD_VAR 0 4
36501: ARRAY
36502: PUSH
36503: LD_INT 2
36505: ARRAY
36506: PPUSH
36507: CALL_OW 488
36511: NOT
36512: PUSH
36513: LD_VAR 0 6
36517: PUSH
36518: LD_VAR 0 4
36522: ARRAY
36523: PUSH
36524: LD_INT 1
36526: ARRAY
36527: PPUSH
36528: LD_VAR 0 6
36532: PUSH
36533: LD_VAR 0 4
36537: ARRAY
36538: PUSH
36539: LD_INT 2
36541: ARRAY
36542: PPUSH
36543: CALL_OW 428
36547: PUSH
36548: LD_INT 0
36550: NONEQUAL
36551: OR
36552: IFFALSE 36574
// tmp := Delete ( tmp , i ) ;
36554: LD_ADDR_VAR 0 6
36558: PUSH
36559: LD_VAR 0 6
36563: PPUSH
36564: LD_VAR 0 4
36568: PPUSH
36569: CALL_OW 3
36573: ST_TO_ADDR
36574: GO 36474
36576: POP
36577: POP
// j := GetClosestHex ( unit , tmp ) ;
36578: LD_ADDR_VAR 0 5
36582: PUSH
36583: LD_VAR 0 1
36587: PPUSH
36588: LD_VAR 0 6
36592: PPUSH
36593: CALL 35880 0 2
36597: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36598: LD_VAR 0 1
36602: PPUSH
36603: LD_VAR 0 5
36607: PUSH
36608: LD_INT 1
36610: ARRAY
36611: PPUSH
36612: LD_VAR 0 5
36616: PUSH
36617: LD_INT 2
36619: ARRAY
36620: PPUSH
36621: CALL_OW 111
// end ;
36625: LD_VAR 0 3
36629: RET
// export function PrepareApemanSoldier ( ) ; begin
36630: LD_INT 0
36632: PPUSH
// uc_nation := 0 ;
36633: LD_ADDR_OWVAR 21
36637: PUSH
36638: LD_INT 0
36640: ST_TO_ADDR
// hc_sex := sex_male ;
36641: LD_ADDR_OWVAR 27
36645: PUSH
36646: LD_INT 1
36648: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36649: LD_ADDR_OWVAR 28
36653: PUSH
36654: LD_INT 15
36656: ST_TO_ADDR
// hc_gallery :=  ;
36657: LD_ADDR_OWVAR 33
36661: PUSH
36662: LD_STRING 
36664: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36665: LD_ADDR_OWVAR 31
36669: PUSH
36670: LD_INT 0
36672: PPUSH
36673: LD_INT 3
36675: PPUSH
36676: CALL_OW 12
36680: PUSH
36681: LD_INT 0
36683: PPUSH
36684: LD_INT 3
36686: PPUSH
36687: CALL_OW 12
36691: PUSH
36692: LD_INT 0
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: ST_TO_ADDR
// end ;
36704: LD_VAR 0 1
36708: RET
// export function PrepareApemanEngineer ( ) ; begin
36709: LD_INT 0
36711: PPUSH
// uc_nation := 0 ;
36712: LD_ADDR_OWVAR 21
36716: PUSH
36717: LD_INT 0
36719: ST_TO_ADDR
// hc_sex := sex_male ;
36720: LD_ADDR_OWVAR 27
36724: PUSH
36725: LD_INT 1
36727: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36728: LD_ADDR_OWVAR 28
36732: PUSH
36733: LD_INT 16
36735: ST_TO_ADDR
// hc_gallery :=  ;
36736: LD_ADDR_OWVAR 33
36740: PUSH
36741: LD_STRING 
36743: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36744: LD_ADDR_OWVAR 31
36748: PUSH
36749: LD_INT 0
36751: PPUSH
36752: LD_INT 3
36754: PPUSH
36755: CALL_OW 12
36759: PUSH
36760: LD_INT 0
36762: PPUSH
36763: LD_INT 3
36765: PPUSH
36766: CALL_OW 12
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: ST_TO_ADDR
// end ;
36783: LD_VAR 0 1
36787: RET
// export function PrepareApeman ( agressivity ) ; begin
36788: LD_INT 0
36790: PPUSH
// uc_side := 0 ;
36791: LD_ADDR_OWVAR 20
36795: PUSH
36796: LD_INT 0
36798: ST_TO_ADDR
// uc_nation := 0 ;
36799: LD_ADDR_OWVAR 21
36803: PUSH
36804: LD_INT 0
36806: ST_TO_ADDR
// hc_sex := sex_male ;
36807: LD_ADDR_OWVAR 27
36811: PUSH
36812: LD_INT 1
36814: ST_TO_ADDR
// hc_class := class_apeman ;
36815: LD_ADDR_OWVAR 28
36819: PUSH
36820: LD_INT 12
36822: ST_TO_ADDR
// hc_gallery :=  ;
36823: LD_ADDR_OWVAR 33
36827: PUSH
36828: LD_STRING 
36830: ST_TO_ADDR
// if agressivity = 0 then
36831: LD_VAR 0 1
36835: PUSH
36836: LD_INT 0
36838: EQUAL
36839: IFFALSE 36851
// hc_agressivity := 0 else
36841: LD_ADDR_OWVAR 35
36845: PUSH
36846: LD_INT 0
36848: ST_TO_ADDR
36849: GO 36872
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36851: LD_ADDR_OWVAR 35
36855: PUSH
36856: LD_VAR 0 1
36860: NEG
36861: PPUSH
36862: LD_VAR 0 1
36866: PPUSH
36867: CALL_OW 12
36871: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36872: LD_ADDR_OWVAR 31
36876: PUSH
36877: LD_INT 0
36879: PPUSH
36880: LD_INT 3
36882: PPUSH
36883: CALL_OW 12
36887: PUSH
36888: LD_INT 0
36890: PPUSH
36891: LD_INT 3
36893: PPUSH
36894: CALL_OW 12
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: ST_TO_ADDR
// end ;
36911: LD_VAR 0 2
36915: RET
// export function PrepareTiger ( agressivity ) ; begin
36916: LD_INT 0
36918: PPUSH
// uc_side := 0 ;
36919: LD_ADDR_OWVAR 20
36923: PUSH
36924: LD_INT 0
36926: ST_TO_ADDR
// uc_nation := 0 ;
36927: LD_ADDR_OWVAR 21
36931: PUSH
36932: LD_INT 0
36934: ST_TO_ADDR
// hc_class := class_tiger ;
36935: LD_ADDR_OWVAR 28
36939: PUSH
36940: LD_INT 14
36942: ST_TO_ADDR
// hc_gallery :=  ;
36943: LD_ADDR_OWVAR 33
36947: PUSH
36948: LD_STRING 
36950: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36951: LD_ADDR_OWVAR 35
36955: PUSH
36956: LD_VAR 0 1
36960: NEG
36961: PPUSH
36962: LD_VAR 0 1
36966: PPUSH
36967: CALL_OW 12
36971: ST_TO_ADDR
// end ;
36972: LD_VAR 0 2
36976: RET
// export function PrepareEnchidna ( ) ; begin
36977: LD_INT 0
36979: PPUSH
// uc_side := 0 ;
36980: LD_ADDR_OWVAR 20
36984: PUSH
36985: LD_INT 0
36987: ST_TO_ADDR
// uc_nation := 0 ;
36988: LD_ADDR_OWVAR 21
36992: PUSH
36993: LD_INT 0
36995: ST_TO_ADDR
// hc_class := class_baggie ;
36996: LD_ADDR_OWVAR 28
37000: PUSH
37001: LD_INT 13
37003: ST_TO_ADDR
// hc_gallery :=  ;
37004: LD_ADDR_OWVAR 33
37008: PUSH
37009: LD_STRING 
37011: ST_TO_ADDR
// end ;
37012: LD_VAR 0 1
37016: RET
// export function PrepareFrog ( ) ; begin
37017: LD_INT 0
37019: PPUSH
// uc_side := 0 ;
37020: LD_ADDR_OWVAR 20
37024: PUSH
37025: LD_INT 0
37027: ST_TO_ADDR
// uc_nation := 0 ;
37028: LD_ADDR_OWVAR 21
37032: PUSH
37033: LD_INT 0
37035: ST_TO_ADDR
// hc_class := class_frog ;
37036: LD_ADDR_OWVAR 28
37040: PUSH
37041: LD_INT 19
37043: ST_TO_ADDR
// hc_gallery :=  ;
37044: LD_ADDR_OWVAR 33
37048: PUSH
37049: LD_STRING 
37051: ST_TO_ADDR
// end ;
37052: LD_VAR 0 1
37056: RET
// export function PrepareFish ( ) ; begin
37057: LD_INT 0
37059: PPUSH
// uc_side := 0 ;
37060: LD_ADDR_OWVAR 20
37064: PUSH
37065: LD_INT 0
37067: ST_TO_ADDR
// uc_nation := 0 ;
37068: LD_ADDR_OWVAR 21
37072: PUSH
37073: LD_INT 0
37075: ST_TO_ADDR
// hc_class := class_fish ;
37076: LD_ADDR_OWVAR 28
37080: PUSH
37081: LD_INT 20
37083: ST_TO_ADDR
// hc_gallery :=  ;
37084: LD_ADDR_OWVAR 33
37088: PUSH
37089: LD_STRING 
37091: ST_TO_ADDR
// end ;
37092: LD_VAR 0 1
37096: RET
// export function PrepareBird ( ) ; begin
37097: LD_INT 0
37099: PPUSH
// uc_side := 0 ;
37100: LD_ADDR_OWVAR 20
37104: PUSH
37105: LD_INT 0
37107: ST_TO_ADDR
// uc_nation := 0 ;
37108: LD_ADDR_OWVAR 21
37112: PUSH
37113: LD_INT 0
37115: ST_TO_ADDR
// hc_class := class_phororhacos ;
37116: LD_ADDR_OWVAR 28
37120: PUSH
37121: LD_INT 18
37123: ST_TO_ADDR
// hc_gallery :=  ;
37124: LD_ADDR_OWVAR 33
37128: PUSH
37129: LD_STRING 
37131: ST_TO_ADDR
// end ;
37132: LD_VAR 0 1
37136: RET
// export function PrepareHorse ( ) ; begin
37137: LD_INT 0
37139: PPUSH
// uc_side := 0 ;
37140: LD_ADDR_OWVAR 20
37144: PUSH
37145: LD_INT 0
37147: ST_TO_ADDR
// uc_nation := 0 ;
37148: LD_ADDR_OWVAR 21
37152: PUSH
37153: LD_INT 0
37155: ST_TO_ADDR
// hc_class := class_horse ;
37156: LD_ADDR_OWVAR 28
37160: PUSH
37161: LD_INT 21
37163: ST_TO_ADDR
// hc_gallery :=  ;
37164: LD_ADDR_OWVAR 33
37168: PUSH
37169: LD_STRING 
37171: ST_TO_ADDR
// end ;
37172: LD_VAR 0 1
37176: RET
// export function PrepareMastodont ( ) ; begin
37177: LD_INT 0
37179: PPUSH
// uc_side := 0 ;
37180: LD_ADDR_OWVAR 20
37184: PUSH
37185: LD_INT 0
37187: ST_TO_ADDR
// uc_nation := 0 ;
37188: LD_ADDR_OWVAR 21
37192: PUSH
37193: LD_INT 0
37195: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37196: LD_ADDR_OWVAR 37
37200: PUSH
37201: LD_INT 31
37203: ST_TO_ADDR
// vc_control := control_rider ;
37204: LD_ADDR_OWVAR 38
37208: PUSH
37209: LD_INT 4
37211: ST_TO_ADDR
// end ;
37212: LD_VAR 0 1
37216: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37217: LD_INT 0
37219: PPUSH
37220: PPUSH
37221: PPUSH
// uc_side = 0 ;
37222: LD_ADDR_OWVAR 20
37226: PUSH
37227: LD_INT 0
37229: ST_TO_ADDR
// uc_nation = 0 ;
37230: LD_ADDR_OWVAR 21
37234: PUSH
37235: LD_INT 0
37237: ST_TO_ADDR
// InitHc_All ( ) ;
37238: CALL_OW 584
// InitVc ;
37242: CALL_OW 20
// if mastodonts then
37246: LD_VAR 0 6
37250: IFFALSE 37317
// for i = 1 to mastodonts do
37252: LD_ADDR_VAR 0 11
37256: PUSH
37257: DOUBLE
37258: LD_INT 1
37260: DEC
37261: ST_TO_ADDR
37262: LD_VAR 0 6
37266: PUSH
37267: FOR_TO
37268: IFFALSE 37315
// begin vc_chassis := 31 ;
37270: LD_ADDR_OWVAR 37
37274: PUSH
37275: LD_INT 31
37277: ST_TO_ADDR
// vc_control := control_rider ;
37278: LD_ADDR_OWVAR 38
37282: PUSH
37283: LD_INT 4
37285: ST_TO_ADDR
// animal := CreateVehicle ;
37286: LD_ADDR_VAR 0 12
37290: PUSH
37291: CALL_OW 45
37295: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37296: LD_VAR 0 12
37300: PPUSH
37301: LD_VAR 0 8
37305: PPUSH
37306: LD_INT 0
37308: PPUSH
37309: CALL 39445 0 3
// end ;
37313: GO 37267
37315: POP
37316: POP
// if horses then
37317: LD_VAR 0 5
37321: IFFALSE 37388
// for i = 1 to horses do
37323: LD_ADDR_VAR 0 11
37327: PUSH
37328: DOUBLE
37329: LD_INT 1
37331: DEC
37332: ST_TO_ADDR
37333: LD_VAR 0 5
37337: PUSH
37338: FOR_TO
37339: IFFALSE 37386
// begin hc_class := 21 ;
37341: LD_ADDR_OWVAR 28
37345: PUSH
37346: LD_INT 21
37348: ST_TO_ADDR
// hc_gallery :=  ;
37349: LD_ADDR_OWVAR 33
37353: PUSH
37354: LD_STRING 
37356: ST_TO_ADDR
// animal := CreateHuman ;
37357: LD_ADDR_VAR 0 12
37361: PUSH
37362: CALL_OW 44
37366: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37367: LD_VAR 0 12
37371: PPUSH
37372: LD_VAR 0 8
37376: PPUSH
37377: LD_INT 0
37379: PPUSH
37380: CALL 39445 0 3
// end ;
37384: GO 37338
37386: POP
37387: POP
// if birds then
37388: LD_VAR 0 1
37392: IFFALSE 37459
// for i = 1 to birds do
37394: LD_ADDR_VAR 0 11
37398: PUSH
37399: DOUBLE
37400: LD_INT 1
37402: DEC
37403: ST_TO_ADDR
37404: LD_VAR 0 1
37408: PUSH
37409: FOR_TO
37410: IFFALSE 37457
// begin hc_class := 18 ;
37412: LD_ADDR_OWVAR 28
37416: PUSH
37417: LD_INT 18
37419: ST_TO_ADDR
// hc_gallery =  ;
37420: LD_ADDR_OWVAR 33
37424: PUSH
37425: LD_STRING 
37427: ST_TO_ADDR
// animal := CreateHuman ;
37428: LD_ADDR_VAR 0 12
37432: PUSH
37433: CALL_OW 44
37437: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37438: LD_VAR 0 12
37442: PPUSH
37443: LD_VAR 0 8
37447: PPUSH
37448: LD_INT 0
37450: PPUSH
37451: CALL 39445 0 3
// end ;
37455: GO 37409
37457: POP
37458: POP
// if tigers then
37459: LD_VAR 0 2
37463: IFFALSE 37547
// for i = 1 to tigers do
37465: LD_ADDR_VAR 0 11
37469: PUSH
37470: DOUBLE
37471: LD_INT 1
37473: DEC
37474: ST_TO_ADDR
37475: LD_VAR 0 2
37479: PUSH
37480: FOR_TO
37481: IFFALSE 37545
// begin hc_class = class_tiger ;
37483: LD_ADDR_OWVAR 28
37487: PUSH
37488: LD_INT 14
37490: ST_TO_ADDR
// hc_gallery =  ;
37491: LD_ADDR_OWVAR 33
37495: PUSH
37496: LD_STRING 
37498: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37499: LD_ADDR_OWVAR 35
37503: PUSH
37504: LD_INT 7
37506: NEG
37507: PPUSH
37508: LD_INT 7
37510: PPUSH
37511: CALL_OW 12
37515: ST_TO_ADDR
// animal := CreateHuman ;
37516: LD_ADDR_VAR 0 12
37520: PUSH
37521: CALL_OW 44
37525: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37526: LD_VAR 0 12
37530: PPUSH
37531: LD_VAR 0 8
37535: PPUSH
37536: LD_INT 0
37538: PPUSH
37539: CALL 39445 0 3
// end ;
37543: GO 37480
37545: POP
37546: POP
// if apemans then
37547: LD_VAR 0 3
37551: IFFALSE 37674
// for i = 1 to apemans do
37553: LD_ADDR_VAR 0 11
37557: PUSH
37558: DOUBLE
37559: LD_INT 1
37561: DEC
37562: ST_TO_ADDR
37563: LD_VAR 0 3
37567: PUSH
37568: FOR_TO
37569: IFFALSE 37672
// begin hc_class = class_apeman ;
37571: LD_ADDR_OWVAR 28
37575: PUSH
37576: LD_INT 12
37578: ST_TO_ADDR
// hc_gallery =  ;
37579: LD_ADDR_OWVAR 33
37583: PUSH
37584: LD_STRING 
37586: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37587: LD_ADDR_OWVAR 35
37591: PUSH
37592: LD_INT 2
37594: NEG
37595: PPUSH
37596: LD_INT 2
37598: PPUSH
37599: CALL_OW 12
37603: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37604: LD_ADDR_OWVAR 31
37608: PUSH
37609: LD_INT 1
37611: PPUSH
37612: LD_INT 3
37614: PPUSH
37615: CALL_OW 12
37619: PUSH
37620: LD_INT 1
37622: PPUSH
37623: LD_INT 3
37625: PPUSH
37626: CALL_OW 12
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: ST_TO_ADDR
// animal := CreateHuman ;
37643: LD_ADDR_VAR 0 12
37647: PUSH
37648: CALL_OW 44
37652: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37653: LD_VAR 0 12
37657: PPUSH
37658: LD_VAR 0 8
37662: PPUSH
37663: LD_INT 0
37665: PPUSH
37666: CALL 39445 0 3
// end ;
37670: GO 37568
37672: POP
37673: POP
// if enchidnas then
37674: LD_VAR 0 4
37678: IFFALSE 37745
// for i = 1 to enchidnas do
37680: LD_ADDR_VAR 0 11
37684: PUSH
37685: DOUBLE
37686: LD_INT 1
37688: DEC
37689: ST_TO_ADDR
37690: LD_VAR 0 4
37694: PUSH
37695: FOR_TO
37696: IFFALSE 37743
// begin hc_class = 13 ;
37698: LD_ADDR_OWVAR 28
37702: PUSH
37703: LD_INT 13
37705: ST_TO_ADDR
// hc_gallery =  ;
37706: LD_ADDR_OWVAR 33
37710: PUSH
37711: LD_STRING 
37713: ST_TO_ADDR
// animal := CreateHuman ;
37714: LD_ADDR_VAR 0 12
37718: PUSH
37719: CALL_OW 44
37723: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37724: LD_VAR 0 12
37728: PPUSH
37729: LD_VAR 0 8
37733: PPUSH
37734: LD_INT 0
37736: PPUSH
37737: CALL 39445 0 3
// end ;
37741: GO 37695
37743: POP
37744: POP
// if fishes then
37745: LD_VAR 0 7
37749: IFFALSE 37816
// for i = 1 to fishes do
37751: LD_ADDR_VAR 0 11
37755: PUSH
37756: DOUBLE
37757: LD_INT 1
37759: DEC
37760: ST_TO_ADDR
37761: LD_VAR 0 7
37765: PUSH
37766: FOR_TO
37767: IFFALSE 37814
// begin hc_class = 20 ;
37769: LD_ADDR_OWVAR 28
37773: PUSH
37774: LD_INT 20
37776: ST_TO_ADDR
// hc_gallery =  ;
37777: LD_ADDR_OWVAR 33
37781: PUSH
37782: LD_STRING 
37784: ST_TO_ADDR
// animal := CreateHuman ;
37785: LD_ADDR_VAR 0 12
37789: PUSH
37790: CALL_OW 44
37794: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37795: LD_VAR 0 12
37799: PPUSH
37800: LD_VAR 0 9
37804: PPUSH
37805: LD_INT 0
37807: PPUSH
37808: CALL 39445 0 3
// end ;
37812: GO 37766
37814: POP
37815: POP
// end ;
37816: LD_VAR 0 10
37820: RET
// export function WantHeal ( sci , unit ) ; begin
37821: LD_INT 0
37823: PPUSH
// if GetTaskList ( sci ) > 0 then
37824: LD_VAR 0 1
37828: PPUSH
37829: CALL_OW 437
37833: PUSH
37834: LD_INT 0
37836: GREATER
37837: IFFALSE 37907
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37839: LD_VAR 0 1
37843: PPUSH
37844: CALL_OW 437
37848: PUSH
37849: LD_INT 1
37851: ARRAY
37852: PUSH
37853: LD_INT 1
37855: ARRAY
37856: PUSH
37857: LD_STRING l
37859: EQUAL
37860: PUSH
37861: LD_VAR 0 1
37865: PPUSH
37866: CALL_OW 437
37870: PUSH
37871: LD_INT 1
37873: ARRAY
37874: PUSH
37875: LD_INT 4
37877: ARRAY
37878: PUSH
37879: LD_VAR 0 2
37883: EQUAL
37884: AND
37885: IFFALSE 37897
// result := true else
37887: LD_ADDR_VAR 0 3
37891: PUSH
37892: LD_INT 1
37894: ST_TO_ADDR
37895: GO 37905
// result := false ;
37897: LD_ADDR_VAR 0 3
37901: PUSH
37902: LD_INT 0
37904: ST_TO_ADDR
// end else
37905: GO 37915
// result := false ;
37907: LD_ADDR_VAR 0 3
37911: PUSH
37912: LD_INT 0
37914: ST_TO_ADDR
// end ;
37915: LD_VAR 0 3
37919: RET
// export function HealTarget ( sci ) ; begin
37920: LD_INT 0
37922: PPUSH
// if not sci then
37923: LD_VAR 0 1
37927: NOT
37928: IFFALSE 37932
// exit ;
37930: GO 37997
// result := 0 ;
37932: LD_ADDR_VAR 0 2
37936: PUSH
37937: LD_INT 0
37939: ST_TO_ADDR
// if GetTaskList ( sci ) then
37940: LD_VAR 0 1
37944: PPUSH
37945: CALL_OW 437
37949: IFFALSE 37997
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37951: LD_VAR 0 1
37955: PPUSH
37956: CALL_OW 437
37960: PUSH
37961: LD_INT 1
37963: ARRAY
37964: PUSH
37965: LD_INT 1
37967: ARRAY
37968: PUSH
37969: LD_STRING l
37971: EQUAL
37972: IFFALSE 37997
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37974: LD_ADDR_VAR 0 2
37978: PUSH
37979: LD_VAR 0 1
37983: PPUSH
37984: CALL_OW 437
37988: PUSH
37989: LD_INT 1
37991: ARRAY
37992: PUSH
37993: LD_INT 4
37995: ARRAY
37996: ST_TO_ADDR
// end ;
37997: LD_VAR 0 2
38001: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38002: LD_INT 0
38004: PPUSH
38005: PPUSH
38006: PPUSH
38007: PPUSH
// if not base_units then
38008: LD_VAR 0 1
38012: NOT
38013: IFFALSE 38017
// exit ;
38015: GO 38104
// result := false ;
38017: LD_ADDR_VAR 0 2
38021: PUSH
38022: LD_INT 0
38024: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38025: LD_ADDR_VAR 0 5
38029: PUSH
38030: LD_VAR 0 1
38034: PPUSH
38035: LD_INT 21
38037: PUSH
38038: LD_INT 3
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PPUSH
38045: CALL_OW 72
38049: ST_TO_ADDR
// if not tmp then
38050: LD_VAR 0 5
38054: NOT
38055: IFFALSE 38059
// exit ;
38057: GO 38104
// for i in tmp do
38059: LD_ADDR_VAR 0 3
38063: PUSH
38064: LD_VAR 0 5
38068: PUSH
38069: FOR_IN
38070: IFFALSE 38102
// begin result := EnemyInRange ( i , 22 ) ;
38072: LD_ADDR_VAR 0 2
38076: PUSH
38077: LD_VAR 0 3
38081: PPUSH
38082: LD_INT 22
38084: PPUSH
38085: CALL 35682 0 2
38089: ST_TO_ADDR
// if result then
38090: LD_VAR 0 2
38094: IFFALSE 38100
// exit ;
38096: POP
38097: POP
38098: GO 38104
// end ;
38100: GO 38069
38102: POP
38103: POP
// end ;
38104: LD_VAR 0 2
38108: RET
// export function FilterByTag ( units , tag ) ; begin
38109: LD_INT 0
38111: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38112: LD_ADDR_VAR 0 3
38116: PUSH
38117: LD_VAR 0 1
38121: PPUSH
38122: LD_INT 120
38124: PUSH
38125: LD_VAR 0 2
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PPUSH
38134: CALL_OW 72
38138: ST_TO_ADDR
// end ;
38139: LD_VAR 0 3
38143: RET
// export function IsDriver ( un ) ; begin
38144: LD_INT 0
38146: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38147: LD_ADDR_VAR 0 2
38151: PUSH
38152: LD_VAR 0 1
38156: PUSH
38157: LD_INT 55
38159: PUSH
38160: EMPTY
38161: LIST
38162: PPUSH
38163: CALL_OW 69
38167: IN
38168: ST_TO_ADDR
// end ;
38169: LD_VAR 0 2
38173: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38174: LD_INT 0
38176: PPUSH
38177: PPUSH
// list := [ ] ;
38178: LD_ADDR_VAR 0 5
38182: PUSH
38183: EMPTY
38184: ST_TO_ADDR
// case d of 0 :
38185: LD_VAR 0 3
38189: PUSH
38190: LD_INT 0
38192: DOUBLE
38193: EQUAL
38194: IFTRUE 38198
38196: GO 38331
38198: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38199: LD_ADDR_VAR 0 5
38203: PUSH
38204: LD_VAR 0 1
38208: PUSH
38209: LD_INT 4
38211: MINUS
38212: PUSH
38213: LD_VAR 0 2
38217: PUSH
38218: LD_INT 4
38220: MINUS
38221: PUSH
38222: LD_INT 2
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: LIST
38229: PUSH
38230: LD_VAR 0 1
38234: PUSH
38235: LD_INT 3
38237: MINUS
38238: PUSH
38239: LD_VAR 0 2
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: LIST
38251: PUSH
38252: LD_VAR 0 1
38256: PUSH
38257: LD_INT 4
38259: PLUS
38260: PUSH
38261: LD_VAR 0 2
38265: PUSH
38266: LD_INT 4
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: LIST
38273: PUSH
38274: LD_VAR 0 1
38278: PUSH
38279: LD_INT 3
38281: PLUS
38282: PUSH
38283: LD_VAR 0 2
38287: PUSH
38288: LD_INT 3
38290: PLUS
38291: PUSH
38292: LD_INT 5
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: LIST
38299: PUSH
38300: LD_VAR 0 1
38304: PUSH
38305: LD_VAR 0 2
38309: PUSH
38310: LD_INT 4
38312: PLUS
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: LIST
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: ST_TO_ADDR
// end ; 1 :
38329: GO 39029
38331: LD_INT 1
38333: DOUBLE
38334: EQUAL
38335: IFTRUE 38339
38337: GO 38472
38339: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38340: LD_ADDR_VAR 0 5
38344: PUSH
38345: LD_VAR 0 1
38349: PUSH
38350: LD_VAR 0 2
38354: PUSH
38355: LD_INT 4
38357: MINUS
38358: PUSH
38359: LD_INT 3
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: LIST
38366: PUSH
38367: LD_VAR 0 1
38371: PUSH
38372: LD_INT 3
38374: MINUS
38375: PUSH
38376: LD_VAR 0 2
38380: PUSH
38381: LD_INT 3
38383: MINUS
38384: PUSH
38385: LD_INT 2
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: LIST
38392: PUSH
38393: LD_VAR 0 1
38397: PUSH
38398: LD_INT 4
38400: MINUS
38401: PUSH
38402: LD_VAR 0 2
38406: PUSH
38407: LD_INT 1
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: LIST
38414: PUSH
38415: LD_VAR 0 1
38419: PUSH
38420: LD_VAR 0 2
38424: PUSH
38425: LD_INT 3
38427: PLUS
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: LIST
38436: PUSH
38437: LD_VAR 0 1
38441: PUSH
38442: LD_INT 4
38444: PLUS
38445: PUSH
38446: LD_VAR 0 2
38450: PUSH
38451: LD_INT 4
38453: PLUS
38454: PUSH
38455: LD_INT 5
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: LIST
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: ST_TO_ADDR
// end ; 2 :
38470: GO 39029
38472: LD_INT 2
38474: DOUBLE
38475: EQUAL
38476: IFTRUE 38480
38478: GO 38609
38480: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38481: LD_ADDR_VAR 0 5
38485: PUSH
38486: LD_VAR 0 1
38490: PUSH
38491: LD_VAR 0 2
38495: PUSH
38496: LD_INT 3
38498: MINUS
38499: PUSH
38500: LD_INT 3
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: LIST
38507: PUSH
38508: LD_VAR 0 1
38512: PUSH
38513: LD_INT 4
38515: PLUS
38516: PUSH
38517: LD_VAR 0 2
38521: PUSH
38522: LD_INT 4
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: LIST
38529: PUSH
38530: LD_VAR 0 1
38534: PUSH
38535: LD_VAR 0 2
38539: PUSH
38540: LD_INT 4
38542: PLUS
38543: PUSH
38544: LD_INT 0
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: LIST
38551: PUSH
38552: LD_VAR 0 1
38556: PUSH
38557: LD_INT 3
38559: MINUS
38560: PUSH
38561: LD_VAR 0 2
38565: PUSH
38566: LD_INT 1
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: LIST
38573: PUSH
38574: LD_VAR 0 1
38578: PUSH
38579: LD_INT 4
38581: MINUS
38582: PUSH
38583: LD_VAR 0 2
38587: PUSH
38588: LD_INT 4
38590: MINUS
38591: PUSH
38592: LD_INT 2
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: LIST
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: ST_TO_ADDR
// end ; 3 :
38607: GO 39029
38609: LD_INT 3
38611: DOUBLE
38612: EQUAL
38613: IFTRUE 38617
38615: GO 38750
38617: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38618: LD_ADDR_VAR 0 5
38622: PUSH
38623: LD_VAR 0 1
38627: PUSH
38628: LD_INT 3
38630: PLUS
38631: PUSH
38632: LD_VAR 0 2
38636: PUSH
38637: LD_INT 4
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: PUSH
38645: LD_VAR 0 1
38649: PUSH
38650: LD_INT 4
38652: PLUS
38653: PUSH
38654: LD_VAR 0 2
38658: PUSH
38659: LD_INT 4
38661: PLUS
38662: PUSH
38663: LD_INT 5
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: LIST
38670: PUSH
38671: LD_VAR 0 1
38675: PUSH
38676: LD_INT 4
38678: MINUS
38679: PUSH
38680: LD_VAR 0 2
38684: PUSH
38685: LD_INT 1
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: LIST
38692: PUSH
38693: LD_VAR 0 1
38697: PUSH
38698: LD_VAR 0 2
38702: PUSH
38703: LD_INT 4
38705: MINUS
38706: PUSH
38707: LD_INT 3
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: LIST
38714: PUSH
38715: LD_VAR 0 1
38719: PUSH
38720: LD_INT 3
38722: MINUS
38723: PUSH
38724: LD_VAR 0 2
38728: PUSH
38729: LD_INT 3
38731: MINUS
38732: PUSH
38733: LD_INT 2
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: LIST
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: ST_TO_ADDR
// end ; 4 :
38748: GO 39029
38750: LD_INT 4
38752: DOUBLE
38753: EQUAL
38754: IFTRUE 38758
38756: GO 38891
38758: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38759: LD_ADDR_VAR 0 5
38763: PUSH
38764: LD_VAR 0 1
38768: PUSH
38769: LD_VAR 0 2
38773: PUSH
38774: LD_INT 4
38776: PLUS
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: LIST
38785: PUSH
38786: LD_VAR 0 1
38790: PUSH
38791: LD_INT 3
38793: PLUS
38794: PUSH
38795: LD_VAR 0 2
38799: PUSH
38800: LD_INT 3
38802: PLUS
38803: PUSH
38804: LD_INT 5
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: LIST
38811: PUSH
38812: LD_VAR 0 1
38816: PUSH
38817: LD_INT 4
38819: PLUS
38820: PUSH
38821: LD_VAR 0 2
38825: PUSH
38826: LD_INT 4
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: LIST
38833: PUSH
38834: LD_VAR 0 1
38838: PUSH
38839: LD_VAR 0 2
38843: PUSH
38844: LD_INT 3
38846: MINUS
38847: PUSH
38848: LD_INT 3
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: LIST
38855: PUSH
38856: LD_VAR 0 1
38860: PUSH
38861: LD_INT 4
38863: MINUS
38864: PUSH
38865: LD_VAR 0 2
38869: PUSH
38870: LD_INT 4
38872: MINUS
38873: PUSH
38874: LD_INT 2
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: LIST
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: ST_TO_ADDR
// end ; 5 :
38889: GO 39029
38891: LD_INT 5
38893: DOUBLE
38894: EQUAL
38895: IFTRUE 38899
38897: GO 39028
38899: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38900: LD_ADDR_VAR 0 5
38904: PUSH
38905: LD_VAR 0 1
38909: PUSH
38910: LD_INT 4
38912: MINUS
38913: PUSH
38914: LD_VAR 0 2
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: LIST
38926: PUSH
38927: LD_VAR 0 1
38931: PUSH
38932: LD_VAR 0 2
38936: PUSH
38937: LD_INT 4
38939: MINUS
38940: PUSH
38941: LD_INT 3
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: LIST
38948: PUSH
38949: LD_VAR 0 1
38953: PUSH
38954: LD_INT 4
38956: PLUS
38957: PUSH
38958: LD_VAR 0 2
38962: PUSH
38963: LD_INT 4
38965: PLUS
38966: PUSH
38967: LD_INT 5
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: LIST
38974: PUSH
38975: LD_VAR 0 1
38979: PUSH
38980: LD_INT 3
38982: PLUS
38983: PUSH
38984: LD_VAR 0 2
38988: PUSH
38989: LD_INT 4
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: LIST
38996: PUSH
38997: LD_VAR 0 1
39001: PUSH
39002: LD_VAR 0 2
39006: PUSH
39007: LD_INT 3
39009: PLUS
39010: PUSH
39011: LD_INT 0
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: ST_TO_ADDR
// end ; end ;
39026: GO 39029
39028: POP
// result := list ;
39029: LD_ADDR_VAR 0 4
39033: PUSH
39034: LD_VAR 0 5
39038: ST_TO_ADDR
// end ;
39039: LD_VAR 0 4
39043: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39044: LD_INT 0
39046: PPUSH
39047: PPUSH
39048: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39049: LD_VAR 0 1
39053: NOT
39054: PUSH
39055: LD_VAR 0 2
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: LD_INT 2
39065: PUSH
39066: LD_INT 3
39068: PUSH
39069: LD_INT 4
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: IN
39078: NOT
39079: OR
39080: IFFALSE 39084
// exit ;
39082: GO 39167
// tmp := [ ] ;
39084: LD_ADDR_VAR 0 5
39088: PUSH
39089: EMPTY
39090: ST_TO_ADDR
// for i in units do
39091: LD_ADDR_VAR 0 4
39095: PUSH
39096: LD_VAR 0 1
39100: PUSH
39101: FOR_IN
39102: IFFALSE 39136
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39104: LD_ADDR_VAR 0 5
39108: PUSH
39109: LD_VAR 0 5
39113: PPUSH
39114: LD_VAR 0 4
39118: PPUSH
39119: LD_VAR 0 2
39123: PPUSH
39124: CALL_OW 259
39128: PPUSH
39129: CALL 40540 0 2
39133: ST_TO_ADDR
39134: GO 39101
39136: POP
39137: POP
// if not tmp then
39138: LD_VAR 0 5
39142: NOT
39143: IFFALSE 39147
// exit ;
39145: GO 39167
// result := SortListByListDesc ( units , tmp ) ;
39147: LD_ADDR_VAR 0 3
39151: PUSH
39152: LD_VAR 0 1
39156: PPUSH
39157: LD_VAR 0 5
39161: PPUSH
39162: CALL_OW 77
39166: ST_TO_ADDR
// end ;
39167: LD_VAR 0 3
39171: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39172: LD_INT 0
39174: PPUSH
39175: PPUSH
39176: PPUSH
// result := false ;
39177: LD_ADDR_VAR 0 3
39181: PUSH
39182: LD_INT 0
39184: ST_TO_ADDR
// if not building then
39185: LD_VAR 0 2
39189: NOT
39190: IFFALSE 39194
// exit ;
39192: GO 39332
// x := GetX ( building ) ;
39194: LD_ADDR_VAR 0 4
39198: PUSH
39199: LD_VAR 0 2
39203: PPUSH
39204: CALL_OW 250
39208: ST_TO_ADDR
// y := GetY ( building ) ;
39209: LD_ADDR_VAR 0 5
39213: PUSH
39214: LD_VAR 0 2
39218: PPUSH
39219: CALL_OW 251
39223: ST_TO_ADDR
// if not x or not y then
39224: LD_VAR 0 4
39228: NOT
39229: PUSH
39230: LD_VAR 0 5
39234: NOT
39235: OR
39236: IFFALSE 39240
// exit ;
39238: GO 39332
// if GetTaskList ( unit ) then
39240: LD_VAR 0 1
39244: PPUSH
39245: CALL_OW 437
39249: IFFALSE 39332
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39251: LD_STRING e
39253: PUSH
39254: LD_VAR 0 1
39258: PPUSH
39259: CALL_OW 437
39263: PUSH
39264: LD_INT 1
39266: ARRAY
39267: PUSH
39268: LD_INT 1
39270: ARRAY
39271: EQUAL
39272: PUSH
39273: LD_VAR 0 4
39277: PUSH
39278: LD_VAR 0 1
39282: PPUSH
39283: CALL_OW 437
39287: PUSH
39288: LD_INT 1
39290: ARRAY
39291: PUSH
39292: LD_INT 2
39294: ARRAY
39295: EQUAL
39296: AND
39297: PUSH
39298: LD_VAR 0 5
39302: PUSH
39303: LD_VAR 0 1
39307: PPUSH
39308: CALL_OW 437
39312: PUSH
39313: LD_INT 1
39315: ARRAY
39316: PUSH
39317: LD_INT 3
39319: ARRAY
39320: EQUAL
39321: AND
39322: IFFALSE 39332
// result := true end ;
39324: LD_ADDR_VAR 0 3
39328: PUSH
39329: LD_INT 1
39331: ST_TO_ADDR
// end ;
39332: LD_VAR 0 3
39336: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39337: LD_INT 0
39339: PPUSH
// result := false ;
39340: LD_ADDR_VAR 0 4
39344: PUSH
39345: LD_INT 0
39347: ST_TO_ADDR
// if GetTaskList ( unit ) then
39348: LD_VAR 0 1
39352: PPUSH
39353: CALL_OW 437
39357: IFFALSE 39440
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39359: LD_STRING M
39361: PUSH
39362: LD_VAR 0 1
39366: PPUSH
39367: CALL_OW 437
39371: PUSH
39372: LD_INT 1
39374: ARRAY
39375: PUSH
39376: LD_INT 1
39378: ARRAY
39379: EQUAL
39380: PUSH
39381: LD_VAR 0 2
39385: PUSH
39386: LD_VAR 0 1
39390: PPUSH
39391: CALL_OW 437
39395: PUSH
39396: LD_INT 1
39398: ARRAY
39399: PUSH
39400: LD_INT 2
39402: ARRAY
39403: EQUAL
39404: AND
39405: PUSH
39406: LD_VAR 0 3
39410: PUSH
39411: LD_VAR 0 1
39415: PPUSH
39416: CALL_OW 437
39420: PUSH
39421: LD_INT 1
39423: ARRAY
39424: PUSH
39425: LD_INT 3
39427: ARRAY
39428: EQUAL
39429: AND
39430: IFFALSE 39440
// result := true ;
39432: LD_ADDR_VAR 0 4
39436: PUSH
39437: LD_INT 1
39439: ST_TO_ADDR
// end ; end ;
39440: LD_VAR 0 4
39444: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39445: LD_INT 0
39447: PPUSH
39448: PPUSH
39449: PPUSH
39450: PPUSH
// if not unit or not area then
39451: LD_VAR 0 1
39455: NOT
39456: PUSH
39457: LD_VAR 0 2
39461: NOT
39462: OR
39463: IFFALSE 39467
// exit ;
39465: GO 39643
// tmp := AreaToList ( area , i ) ;
39467: LD_ADDR_VAR 0 6
39471: PUSH
39472: LD_VAR 0 2
39476: PPUSH
39477: LD_VAR 0 5
39481: PPUSH
39482: CALL_OW 517
39486: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39487: LD_ADDR_VAR 0 5
39491: PUSH
39492: DOUBLE
39493: LD_INT 1
39495: DEC
39496: ST_TO_ADDR
39497: LD_VAR 0 6
39501: PUSH
39502: LD_INT 1
39504: ARRAY
39505: PUSH
39506: FOR_TO
39507: IFFALSE 39641
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39509: LD_ADDR_VAR 0 7
39513: PUSH
39514: LD_VAR 0 6
39518: PUSH
39519: LD_INT 1
39521: ARRAY
39522: PUSH
39523: LD_VAR 0 5
39527: ARRAY
39528: PUSH
39529: LD_VAR 0 6
39533: PUSH
39534: LD_INT 2
39536: ARRAY
39537: PUSH
39538: LD_VAR 0 5
39542: ARRAY
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39548: LD_INT 92
39550: PUSH
39551: LD_VAR 0 7
39555: PUSH
39556: LD_INT 1
39558: ARRAY
39559: PUSH
39560: LD_VAR 0 7
39564: PUSH
39565: LD_INT 2
39567: ARRAY
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: PPUSH
39578: CALL_OW 69
39582: PUSH
39583: LD_INT 0
39585: EQUAL
39586: IFFALSE 39639
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39588: LD_VAR 0 1
39592: PPUSH
39593: LD_VAR 0 7
39597: PUSH
39598: LD_INT 1
39600: ARRAY
39601: PPUSH
39602: LD_VAR 0 7
39606: PUSH
39607: LD_INT 2
39609: ARRAY
39610: PPUSH
39611: LD_VAR 0 3
39615: PPUSH
39616: CALL_OW 48
// result := IsPlaced ( unit ) ;
39620: LD_ADDR_VAR 0 4
39624: PUSH
39625: LD_VAR 0 1
39629: PPUSH
39630: CALL_OW 305
39634: ST_TO_ADDR
// exit ;
39635: POP
39636: POP
39637: GO 39643
// end ; end ;
39639: GO 39506
39641: POP
39642: POP
// end ;
39643: LD_VAR 0 4
39647: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39648: LD_INT 0
39650: PPUSH
39651: PPUSH
39652: PPUSH
// if not side or side > 8 then
39653: LD_VAR 0 1
39657: NOT
39658: PUSH
39659: LD_VAR 0 1
39663: PUSH
39664: LD_INT 8
39666: GREATER
39667: OR
39668: IFFALSE 39672
// exit ;
39670: GO 39859
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39672: LD_ADDR_VAR 0 4
39676: PUSH
39677: LD_INT 22
39679: PUSH
39680: LD_VAR 0 1
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 21
39691: PUSH
39692: LD_INT 3
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PPUSH
39703: CALL_OW 69
39707: ST_TO_ADDR
// if not tmp then
39708: LD_VAR 0 4
39712: NOT
39713: IFFALSE 39717
// exit ;
39715: GO 39859
// enable_addtolog := true ;
39717: LD_ADDR_OWVAR 81
39721: PUSH
39722: LD_INT 1
39724: ST_TO_ADDR
// AddToLog ( [ ) ;
39725: LD_STRING [
39727: PPUSH
39728: CALL_OW 561
// for i in tmp do
39732: LD_ADDR_VAR 0 3
39736: PUSH
39737: LD_VAR 0 4
39741: PUSH
39742: FOR_IN
39743: IFFALSE 39850
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39745: LD_STRING [
39747: PUSH
39748: LD_VAR 0 3
39752: PPUSH
39753: CALL_OW 266
39757: STR
39758: PUSH
39759: LD_STRING , 
39761: STR
39762: PUSH
39763: LD_VAR 0 3
39767: PPUSH
39768: CALL_OW 250
39772: STR
39773: PUSH
39774: LD_STRING , 
39776: STR
39777: PUSH
39778: LD_VAR 0 3
39782: PPUSH
39783: CALL_OW 251
39787: STR
39788: PUSH
39789: LD_STRING , 
39791: STR
39792: PUSH
39793: LD_VAR 0 3
39797: PPUSH
39798: CALL_OW 254
39802: STR
39803: PUSH
39804: LD_STRING , 
39806: STR
39807: PUSH
39808: LD_VAR 0 3
39812: PPUSH
39813: LD_INT 1
39815: PPUSH
39816: CALL_OW 268
39820: STR
39821: PUSH
39822: LD_STRING , 
39824: STR
39825: PUSH
39826: LD_VAR 0 3
39830: PPUSH
39831: LD_INT 2
39833: PPUSH
39834: CALL_OW 268
39838: STR
39839: PUSH
39840: LD_STRING ],
39842: STR
39843: PPUSH
39844: CALL_OW 561
// end ;
39848: GO 39742
39850: POP
39851: POP
// AddToLog ( ]; ) ;
39852: LD_STRING ];
39854: PPUSH
39855: CALL_OW 561
// end ;
39859: LD_VAR 0 2
39863: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39864: LD_INT 0
39866: PPUSH
39867: PPUSH
39868: PPUSH
39869: PPUSH
39870: PPUSH
// if not area or not rate or not max then
39871: LD_VAR 0 1
39875: NOT
39876: PUSH
39877: LD_VAR 0 2
39881: NOT
39882: OR
39883: PUSH
39884: LD_VAR 0 4
39888: NOT
39889: OR
39890: IFFALSE 39894
// exit ;
39892: GO 40083
// while 1 do
39894: LD_INT 1
39896: IFFALSE 40083
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39898: LD_ADDR_VAR 0 9
39902: PUSH
39903: LD_VAR 0 1
39907: PPUSH
39908: LD_INT 1
39910: PPUSH
39911: CALL_OW 287
39915: PUSH
39916: LD_INT 10
39918: MUL
39919: ST_TO_ADDR
// r := rate / 10 ;
39920: LD_ADDR_VAR 0 7
39924: PUSH
39925: LD_VAR 0 2
39929: PUSH
39930: LD_INT 10
39932: DIVREAL
39933: ST_TO_ADDR
// time := 1 1$00 ;
39934: LD_ADDR_VAR 0 8
39938: PUSH
39939: LD_INT 2100
39941: ST_TO_ADDR
// if amount < min then
39942: LD_VAR 0 9
39946: PUSH
39947: LD_VAR 0 3
39951: LESS
39952: IFFALSE 39970
// r := r * 2 else
39954: LD_ADDR_VAR 0 7
39958: PUSH
39959: LD_VAR 0 7
39963: PUSH
39964: LD_INT 2
39966: MUL
39967: ST_TO_ADDR
39968: GO 39996
// if amount > max then
39970: LD_VAR 0 9
39974: PUSH
39975: LD_VAR 0 4
39979: GREATER
39980: IFFALSE 39996
// r := r / 2 ;
39982: LD_ADDR_VAR 0 7
39986: PUSH
39987: LD_VAR 0 7
39991: PUSH
39992: LD_INT 2
39994: DIVREAL
39995: ST_TO_ADDR
// time := time / r ;
39996: LD_ADDR_VAR 0 8
40000: PUSH
40001: LD_VAR 0 8
40005: PUSH
40006: LD_VAR 0 7
40010: DIVREAL
40011: ST_TO_ADDR
// if time < 0 then
40012: LD_VAR 0 8
40016: PUSH
40017: LD_INT 0
40019: LESS
40020: IFFALSE 40037
// time := time * - 1 ;
40022: LD_ADDR_VAR 0 8
40026: PUSH
40027: LD_VAR 0 8
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: MUL
40036: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40037: LD_VAR 0 8
40041: PUSH
40042: LD_INT 35
40044: PPUSH
40045: LD_INT 875
40047: PPUSH
40048: CALL_OW 12
40052: PLUS
40053: PPUSH
40054: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40058: LD_INT 1
40060: PPUSH
40061: LD_INT 5
40063: PPUSH
40064: CALL_OW 12
40068: PPUSH
40069: LD_VAR 0 1
40073: PPUSH
40074: LD_INT 1
40076: PPUSH
40077: CALL_OW 55
// end ;
40081: GO 39894
// end ;
40083: LD_VAR 0 5
40087: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40088: LD_INT 0
40090: PPUSH
40091: PPUSH
40092: PPUSH
40093: PPUSH
40094: PPUSH
40095: PPUSH
40096: PPUSH
40097: PPUSH
// if not turrets or not factories then
40098: LD_VAR 0 1
40102: NOT
40103: PUSH
40104: LD_VAR 0 2
40108: NOT
40109: OR
40110: IFFALSE 40114
// exit ;
40112: GO 40421
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40114: LD_ADDR_VAR 0 10
40118: PUSH
40119: LD_INT 5
40121: PUSH
40122: LD_INT 6
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 2
40131: PUSH
40132: LD_INT 4
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 3
40141: PUSH
40142: LD_INT 5
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 24
40156: PUSH
40157: LD_INT 25
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 23
40166: PUSH
40167: LD_INT 27
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 42
40180: PUSH
40181: LD_INT 43
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 44
40190: PUSH
40191: LD_INT 46
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 45
40200: PUSH
40201: LD_INT 47
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: LIST
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: LIST
40217: ST_TO_ADDR
// result := [ ] ;
40218: LD_ADDR_VAR 0 3
40222: PUSH
40223: EMPTY
40224: ST_TO_ADDR
// for i in turrets do
40225: LD_ADDR_VAR 0 4
40229: PUSH
40230: LD_VAR 0 1
40234: PUSH
40235: FOR_IN
40236: IFFALSE 40419
// begin nat := GetNation ( i ) ;
40238: LD_ADDR_VAR 0 7
40242: PUSH
40243: LD_VAR 0 4
40247: PPUSH
40248: CALL_OW 248
40252: ST_TO_ADDR
// weapon := 0 ;
40253: LD_ADDR_VAR 0 8
40257: PUSH
40258: LD_INT 0
40260: ST_TO_ADDR
// if not nat then
40261: LD_VAR 0 7
40265: NOT
40266: IFFALSE 40270
// continue ;
40268: GO 40235
// for j in list [ nat ] do
40270: LD_ADDR_VAR 0 5
40274: PUSH
40275: LD_VAR 0 10
40279: PUSH
40280: LD_VAR 0 7
40284: ARRAY
40285: PUSH
40286: FOR_IN
40287: IFFALSE 40328
// if GetBWeapon ( i ) = j [ 1 ] then
40289: LD_VAR 0 4
40293: PPUSH
40294: CALL_OW 269
40298: PUSH
40299: LD_VAR 0 5
40303: PUSH
40304: LD_INT 1
40306: ARRAY
40307: EQUAL
40308: IFFALSE 40326
// begin weapon := j [ 2 ] ;
40310: LD_ADDR_VAR 0 8
40314: PUSH
40315: LD_VAR 0 5
40319: PUSH
40320: LD_INT 2
40322: ARRAY
40323: ST_TO_ADDR
// break ;
40324: GO 40328
// end ;
40326: GO 40286
40328: POP
40329: POP
// if not weapon then
40330: LD_VAR 0 8
40334: NOT
40335: IFFALSE 40339
// continue ;
40337: GO 40235
// for k in factories do
40339: LD_ADDR_VAR 0 6
40343: PUSH
40344: LD_VAR 0 2
40348: PUSH
40349: FOR_IN
40350: IFFALSE 40415
// begin weapons := AvailableWeaponList ( k ) ;
40352: LD_ADDR_VAR 0 9
40356: PUSH
40357: LD_VAR 0 6
40361: PPUSH
40362: CALL_OW 478
40366: ST_TO_ADDR
// if not weapons then
40367: LD_VAR 0 9
40371: NOT
40372: IFFALSE 40376
// continue ;
40374: GO 40349
// if weapon in weapons then
40376: LD_VAR 0 8
40380: PUSH
40381: LD_VAR 0 9
40385: IN
40386: IFFALSE 40413
// begin result := [ i , weapon ] ;
40388: LD_ADDR_VAR 0 3
40392: PUSH
40393: LD_VAR 0 4
40397: PUSH
40398: LD_VAR 0 8
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: ST_TO_ADDR
// exit ;
40407: POP
40408: POP
40409: POP
40410: POP
40411: GO 40421
// end ; end ;
40413: GO 40349
40415: POP
40416: POP
// end ;
40417: GO 40235
40419: POP
40420: POP
// end ;
40421: LD_VAR 0 3
40425: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40426: LD_INT 0
40428: PPUSH
// if not side or side > 8 then
40429: LD_VAR 0 3
40433: NOT
40434: PUSH
40435: LD_VAR 0 3
40439: PUSH
40440: LD_INT 8
40442: GREATER
40443: OR
40444: IFFALSE 40448
// exit ;
40446: GO 40507
// if not range then
40448: LD_VAR 0 4
40452: NOT
40453: IFFALSE 40464
// range := - 12 ;
40455: LD_ADDR_VAR 0 4
40459: PUSH
40460: LD_INT 12
40462: NEG
40463: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40464: LD_VAR 0 1
40468: PPUSH
40469: LD_VAR 0 2
40473: PPUSH
40474: LD_VAR 0 3
40478: PPUSH
40479: LD_VAR 0 4
40483: PPUSH
40484: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40488: LD_VAR 0 1
40492: PPUSH
40493: LD_VAR 0 2
40497: PPUSH
40498: LD_VAR 0 3
40502: PPUSH
40503: CALL_OW 331
// end ;
40507: LD_VAR 0 5
40511: RET
// export function Video ( mode ) ; begin
40512: LD_INT 0
40514: PPUSH
// ingame_video = mode ;
40515: LD_ADDR_OWVAR 52
40519: PUSH
40520: LD_VAR 0 1
40524: ST_TO_ADDR
// interface_hidden = mode ;
40525: LD_ADDR_OWVAR 54
40529: PUSH
40530: LD_VAR 0 1
40534: ST_TO_ADDR
// end ;
40535: LD_VAR 0 2
40539: RET
// export function Join ( array , element ) ; begin
40540: LD_INT 0
40542: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40543: LD_ADDR_VAR 0 3
40547: PUSH
40548: LD_VAR 0 1
40552: PPUSH
40553: LD_VAR 0 1
40557: PUSH
40558: LD_INT 1
40560: PLUS
40561: PPUSH
40562: LD_VAR 0 2
40566: PPUSH
40567: CALL_OW 1
40571: ST_TO_ADDR
// end ;
40572: LD_VAR 0 3
40576: RET
// export function JoinUnion ( array , element ) ; begin
40577: LD_INT 0
40579: PPUSH
// result := array union element ;
40580: LD_ADDR_VAR 0 3
40584: PUSH
40585: LD_VAR 0 1
40589: PUSH
40590: LD_VAR 0 2
40594: UNION
40595: ST_TO_ADDR
// end ;
40596: LD_VAR 0 3
40600: RET
// export function GetBehemoths ( side ) ; begin
40601: LD_INT 0
40603: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40604: LD_ADDR_VAR 0 2
40608: PUSH
40609: LD_INT 22
40611: PUSH
40612: LD_VAR 0 1
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 31
40623: PUSH
40624: LD_INT 25
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PPUSH
40635: CALL_OW 69
40639: ST_TO_ADDR
// end ;
40640: LD_VAR 0 2
40644: RET
// export function Shuffle ( array ) ; var i , index ; begin
40645: LD_INT 0
40647: PPUSH
40648: PPUSH
40649: PPUSH
// result := [ ] ;
40650: LD_ADDR_VAR 0 2
40654: PUSH
40655: EMPTY
40656: ST_TO_ADDR
// if not array then
40657: LD_VAR 0 1
40661: NOT
40662: IFFALSE 40666
// exit ;
40664: GO 40765
// Randomize ;
40666: CALL_OW 10
// for i = array downto 1 do
40670: LD_ADDR_VAR 0 3
40674: PUSH
40675: DOUBLE
40676: LD_VAR 0 1
40680: INC
40681: ST_TO_ADDR
40682: LD_INT 1
40684: PUSH
40685: FOR_DOWNTO
40686: IFFALSE 40763
// begin index := rand ( 1 , array ) ;
40688: LD_ADDR_VAR 0 4
40692: PUSH
40693: LD_INT 1
40695: PPUSH
40696: LD_VAR 0 1
40700: PPUSH
40701: CALL_OW 12
40705: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40706: LD_ADDR_VAR 0 2
40710: PUSH
40711: LD_VAR 0 2
40715: PPUSH
40716: LD_VAR 0 2
40720: PUSH
40721: LD_INT 1
40723: PLUS
40724: PPUSH
40725: LD_VAR 0 1
40729: PUSH
40730: LD_VAR 0 4
40734: ARRAY
40735: PPUSH
40736: CALL_OW 2
40740: ST_TO_ADDR
// array := Delete ( array , index ) ;
40741: LD_ADDR_VAR 0 1
40745: PUSH
40746: LD_VAR 0 1
40750: PPUSH
40751: LD_VAR 0 4
40755: PPUSH
40756: CALL_OW 3
40760: ST_TO_ADDR
// end ;
40761: GO 40685
40763: POP
40764: POP
// end ;
40765: LD_VAR 0 2
40769: RET
// export function GetBaseMaterials ( base ) ; begin
40770: LD_INT 0
40772: PPUSH
// result := [ 0 , 0 , 0 ] ;
40773: LD_ADDR_VAR 0 2
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: LIST
40791: ST_TO_ADDR
// if not base then
40792: LD_VAR 0 1
40796: NOT
40797: IFFALSE 40801
// exit ;
40799: GO 40850
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40801: LD_ADDR_VAR 0 2
40805: PUSH
40806: LD_VAR 0 1
40810: PPUSH
40811: LD_INT 1
40813: PPUSH
40814: CALL_OW 275
40818: PUSH
40819: LD_VAR 0 1
40823: PPUSH
40824: LD_INT 2
40826: PPUSH
40827: CALL_OW 275
40831: PUSH
40832: LD_VAR 0 1
40836: PPUSH
40837: LD_INT 3
40839: PPUSH
40840: CALL_OW 275
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: LIST
40849: ST_TO_ADDR
// end ;
40850: LD_VAR 0 2
40854: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40855: LD_INT 0
40857: PPUSH
40858: PPUSH
// result := array ;
40859: LD_ADDR_VAR 0 3
40863: PUSH
40864: LD_VAR 0 1
40868: ST_TO_ADDR
// if size >= result then
40869: LD_VAR 0 2
40873: PUSH
40874: LD_VAR 0 3
40878: GREATEREQUAL
40879: IFFALSE 40883
// exit ;
40881: GO 40933
// if size then
40883: LD_VAR 0 2
40887: IFFALSE 40933
// for i := array downto size do
40889: LD_ADDR_VAR 0 4
40893: PUSH
40894: DOUBLE
40895: LD_VAR 0 1
40899: INC
40900: ST_TO_ADDR
40901: LD_VAR 0 2
40905: PUSH
40906: FOR_DOWNTO
40907: IFFALSE 40931
// result := Delete ( result , result ) ;
40909: LD_ADDR_VAR 0 3
40913: PUSH
40914: LD_VAR 0 3
40918: PPUSH
40919: LD_VAR 0 3
40923: PPUSH
40924: CALL_OW 3
40928: ST_TO_ADDR
40929: GO 40906
40931: POP
40932: POP
// end ;
40933: LD_VAR 0 3
40937: RET
// export function ComExit ( unit ) ; var tmp ; begin
40938: LD_INT 0
40940: PPUSH
40941: PPUSH
// if not IsInUnit ( unit ) then
40942: LD_VAR 0 1
40946: PPUSH
40947: CALL_OW 310
40951: NOT
40952: IFFALSE 40956
// exit ;
40954: GO 41016
// tmp := IsInUnit ( unit ) ;
40956: LD_ADDR_VAR 0 3
40960: PUSH
40961: LD_VAR 0 1
40965: PPUSH
40966: CALL_OW 310
40970: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40971: LD_VAR 0 3
40975: PPUSH
40976: CALL_OW 247
40980: PUSH
40981: LD_INT 2
40983: EQUAL
40984: IFFALSE 40997
// ComExitVehicle ( unit ) else
40986: LD_VAR 0 1
40990: PPUSH
40991: CALL_OW 121
40995: GO 41006
// ComExitBuilding ( unit ) ;
40997: LD_VAR 0 1
41001: PPUSH
41002: CALL_OW 122
// result := tmp ;
41006: LD_ADDR_VAR 0 2
41010: PUSH
41011: LD_VAR 0 3
41015: ST_TO_ADDR
// end ;
41016: LD_VAR 0 2
41020: RET
// export function ComExitAll ( units ) ; var i ; begin
41021: LD_INT 0
41023: PPUSH
41024: PPUSH
// if not units then
41025: LD_VAR 0 1
41029: NOT
41030: IFFALSE 41034
// exit ;
41032: GO 41060
// for i in units do
41034: LD_ADDR_VAR 0 3
41038: PUSH
41039: LD_VAR 0 1
41043: PUSH
41044: FOR_IN
41045: IFFALSE 41058
// ComExit ( i ) ;
41047: LD_VAR 0 3
41051: PPUSH
41052: CALL 40938 0 1
41056: GO 41044
41058: POP
41059: POP
// end ;
41060: LD_VAR 0 2
41064: RET
// export function ResetHc ; begin
41065: LD_INT 0
41067: PPUSH
// InitHc ;
41068: CALL_OW 19
// hc_importance := 0 ;
41072: LD_ADDR_OWVAR 32
41076: PUSH
41077: LD_INT 0
41079: ST_TO_ADDR
// end ;
41080: LD_VAR 0 1
41084: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41085: LD_INT 0
41087: PPUSH
41088: PPUSH
41089: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41090: LD_ADDR_VAR 0 6
41094: PUSH
41095: LD_VAR 0 1
41099: PUSH
41100: LD_VAR 0 3
41104: PLUS
41105: PUSH
41106: LD_INT 2
41108: DIV
41109: ST_TO_ADDR
// if _x < 0 then
41110: LD_VAR 0 6
41114: PUSH
41115: LD_INT 0
41117: LESS
41118: IFFALSE 41135
// _x := _x * - 1 ;
41120: LD_ADDR_VAR 0 6
41124: PUSH
41125: LD_VAR 0 6
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: MUL
41134: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41135: LD_ADDR_VAR 0 7
41139: PUSH
41140: LD_VAR 0 2
41144: PUSH
41145: LD_VAR 0 4
41149: PLUS
41150: PUSH
41151: LD_INT 2
41153: DIV
41154: ST_TO_ADDR
// if _y < 0 then
41155: LD_VAR 0 7
41159: PUSH
41160: LD_INT 0
41162: LESS
41163: IFFALSE 41180
// _y := _y * - 1 ;
41165: LD_ADDR_VAR 0 7
41169: PUSH
41170: LD_VAR 0 7
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: MUL
41179: ST_TO_ADDR
// result := [ _x , _y ] ;
41180: LD_ADDR_VAR 0 5
41184: PUSH
41185: LD_VAR 0 6
41189: PUSH
41190: LD_VAR 0 7
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: ST_TO_ADDR
// end ;
41199: LD_VAR 0 5
41203: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41204: LD_INT 0
41206: PPUSH
41207: PPUSH
41208: PPUSH
41209: PPUSH
// task := GetTaskList ( unit ) ;
41210: LD_ADDR_VAR 0 7
41214: PUSH
41215: LD_VAR 0 1
41219: PPUSH
41220: CALL_OW 437
41224: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41225: LD_VAR 0 7
41229: NOT
41230: PUSH
41231: LD_VAR 0 1
41235: PPUSH
41236: LD_VAR 0 2
41240: PPUSH
41241: CALL_OW 308
41245: NOT
41246: AND
41247: IFFALSE 41251
// exit ;
41249: GO 41369
// if IsInArea ( unit , area ) then
41251: LD_VAR 0 1
41255: PPUSH
41256: LD_VAR 0 2
41260: PPUSH
41261: CALL_OW 308
41265: IFFALSE 41283
// begin ComMoveToArea ( unit , goAway ) ;
41267: LD_VAR 0 1
41271: PPUSH
41272: LD_VAR 0 3
41276: PPUSH
41277: CALL_OW 113
// exit ;
41281: GO 41369
// end ; if task [ 1 ] [ 1 ] <> M then
41283: LD_VAR 0 7
41287: PUSH
41288: LD_INT 1
41290: ARRAY
41291: PUSH
41292: LD_INT 1
41294: ARRAY
41295: PUSH
41296: LD_STRING M
41298: NONEQUAL
41299: IFFALSE 41303
// exit ;
41301: GO 41369
// x := task [ 1 ] [ 2 ] ;
41303: LD_ADDR_VAR 0 5
41307: PUSH
41308: LD_VAR 0 7
41312: PUSH
41313: LD_INT 1
41315: ARRAY
41316: PUSH
41317: LD_INT 2
41319: ARRAY
41320: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41321: LD_ADDR_VAR 0 6
41325: PUSH
41326: LD_VAR 0 7
41330: PUSH
41331: LD_INT 1
41333: ARRAY
41334: PUSH
41335: LD_INT 3
41337: ARRAY
41338: ST_TO_ADDR
// if InArea ( x , y , area ) then
41339: LD_VAR 0 5
41343: PPUSH
41344: LD_VAR 0 6
41348: PPUSH
41349: LD_VAR 0 2
41353: PPUSH
41354: CALL_OW 309
41358: IFFALSE 41369
// ComStop ( unit ) ;
41360: LD_VAR 0 1
41364: PPUSH
41365: CALL_OW 141
// end ;
41369: LD_VAR 0 4
41373: RET
// export function Abs ( value ) ; begin
41374: LD_INT 0
41376: PPUSH
// result := value ;
41377: LD_ADDR_VAR 0 2
41381: PUSH
41382: LD_VAR 0 1
41386: ST_TO_ADDR
// if value < 0 then
41387: LD_VAR 0 1
41391: PUSH
41392: LD_INT 0
41394: LESS
41395: IFFALSE 41412
// result := value * - 1 ;
41397: LD_ADDR_VAR 0 2
41401: PUSH
41402: LD_VAR 0 1
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: MUL
41411: ST_TO_ADDR
// end ;
41412: LD_VAR 0 2
41416: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41417: LD_INT 0
41419: PPUSH
41420: PPUSH
41421: PPUSH
41422: PPUSH
41423: PPUSH
41424: PPUSH
41425: PPUSH
41426: PPUSH
// if not unit or not building then
41427: LD_VAR 0 1
41431: NOT
41432: PUSH
41433: LD_VAR 0 2
41437: NOT
41438: OR
41439: IFFALSE 41443
// exit ;
41441: GO 41669
// x := GetX ( building ) ;
41443: LD_ADDR_VAR 0 4
41447: PUSH
41448: LD_VAR 0 2
41452: PPUSH
41453: CALL_OW 250
41457: ST_TO_ADDR
// y := GetY ( building ) ;
41458: LD_ADDR_VAR 0 6
41462: PUSH
41463: LD_VAR 0 2
41467: PPUSH
41468: CALL_OW 251
41472: ST_TO_ADDR
// d := GetDir ( building ) ;
41473: LD_ADDR_VAR 0 8
41477: PUSH
41478: LD_VAR 0 2
41482: PPUSH
41483: CALL_OW 254
41487: ST_TO_ADDR
// r := 4 ;
41488: LD_ADDR_VAR 0 9
41492: PUSH
41493: LD_INT 4
41495: ST_TO_ADDR
// for i := 1 to 5 do
41496: LD_ADDR_VAR 0 10
41500: PUSH
41501: DOUBLE
41502: LD_INT 1
41504: DEC
41505: ST_TO_ADDR
41506: LD_INT 5
41508: PUSH
41509: FOR_TO
41510: IFFALSE 41667
// begin _x := ShiftX ( x , d , r + i ) ;
41512: LD_ADDR_VAR 0 5
41516: PUSH
41517: LD_VAR 0 4
41521: PPUSH
41522: LD_VAR 0 8
41526: PPUSH
41527: LD_VAR 0 9
41531: PUSH
41532: LD_VAR 0 10
41536: PLUS
41537: PPUSH
41538: CALL_OW 272
41542: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41543: LD_ADDR_VAR 0 7
41547: PUSH
41548: LD_VAR 0 6
41552: PPUSH
41553: LD_VAR 0 8
41557: PPUSH
41558: LD_VAR 0 9
41562: PUSH
41563: LD_VAR 0 10
41567: PLUS
41568: PPUSH
41569: CALL_OW 273
41573: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41574: LD_VAR 0 5
41578: PPUSH
41579: LD_VAR 0 7
41583: PPUSH
41584: CALL_OW 488
41588: PUSH
41589: LD_VAR 0 5
41593: PPUSH
41594: LD_VAR 0 7
41598: PPUSH
41599: CALL_OW 428
41603: PPUSH
41604: CALL_OW 247
41608: PUSH
41609: LD_INT 3
41611: PUSH
41612: LD_INT 2
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: IN
41619: NOT
41620: AND
41621: IFFALSE 41665
// begin ComMoveXY ( unit , _x , _y ) ;
41623: LD_VAR 0 1
41627: PPUSH
41628: LD_VAR 0 5
41632: PPUSH
41633: LD_VAR 0 7
41637: PPUSH
41638: CALL_OW 111
// result := [ _x , _y ] ;
41642: LD_ADDR_VAR 0 3
41646: PUSH
41647: LD_VAR 0 5
41651: PUSH
41652: LD_VAR 0 7
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: ST_TO_ADDR
// exit ;
41661: POP
41662: POP
41663: GO 41669
// end ; end ;
41665: GO 41509
41667: POP
41668: POP
// end ;
41669: LD_VAR 0 3
41673: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41674: LD_INT 0
41676: PPUSH
41677: PPUSH
41678: PPUSH
// result := 0 ;
41679: LD_ADDR_VAR 0 3
41683: PUSH
41684: LD_INT 0
41686: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41687: LD_VAR 0 1
41691: PUSH
41692: LD_INT 0
41694: LESS
41695: PUSH
41696: LD_VAR 0 1
41700: PUSH
41701: LD_INT 8
41703: GREATER
41704: OR
41705: PUSH
41706: LD_VAR 0 2
41710: PUSH
41711: LD_INT 0
41713: LESS
41714: OR
41715: PUSH
41716: LD_VAR 0 2
41720: PUSH
41721: LD_INT 8
41723: GREATER
41724: OR
41725: IFFALSE 41729
// exit ;
41727: GO 41804
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41729: LD_ADDR_VAR 0 4
41733: PUSH
41734: LD_INT 22
41736: PUSH
41737: LD_VAR 0 2
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PPUSH
41746: CALL_OW 69
41750: PUSH
41751: FOR_IN
41752: IFFALSE 41802
// begin un := UnitShoot ( i ) ;
41754: LD_ADDR_VAR 0 5
41758: PUSH
41759: LD_VAR 0 4
41763: PPUSH
41764: CALL_OW 504
41768: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41769: LD_VAR 0 5
41773: PPUSH
41774: CALL_OW 255
41778: PUSH
41779: LD_VAR 0 1
41783: EQUAL
41784: IFFALSE 41800
// begin result := un ;
41786: LD_ADDR_VAR 0 3
41790: PUSH
41791: LD_VAR 0 5
41795: ST_TO_ADDR
// exit ;
41796: POP
41797: POP
41798: GO 41804
// end ; end ;
41800: GO 41751
41802: POP
41803: POP
// end ;
41804: LD_VAR 0 3
41808: RET
// export function GetCargoBay ( units ) ; begin
41809: LD_INT 0
41811: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41812: LD_ADDR_VAR 0 2
41816: PUSH
41817: LD_VAR 0 1
41821: PPUSH
41822: LD_INT 2
41824: PUSH
41825: LD_INT 34
41827: PUSH
41828: LD_INT 12
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 34
41837: PUSH
41838: LD_INT 51
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 34
41847: PUSH
41848: LD_INT 32
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 34
41857: PUSH
41858: LD_INT 89
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: PPUSH
41872: CALL_OW 72
41876: ST_TO_ADDR
// end ;
41877: LD_VAR 0 2
41881: RET
// export function Negate ( value ) ; begin
41882: LD_INT 0
41884: PPUSH
// result := not value ;
41885: LD_ADDR_VAR 0 2
41889: PUSH
41890: LD_VAR 0 1
41894: NOT
41895: ST_TO_ADDR
// end ;
41896: LD_VAR 0 2
41900: RET
// export function Inc ( value ) ; begin
41901: LD_INT 0
41903: PPUSH
// result := value + 1 ;
41904: LD_ADDR_VAR 0 2
41908: PUSH
41909: LD_VAR 0 1
41913: PUSH
41914: LD_INT 1
41916: PLUS
41917: ST_TO_ADDR
// end ;
41918: LD_VAR 0 2
41922: RET
// export function Dec ( value ) ; begin
41923: LD_INT 0
41925: PPUSH
// result := value - 1 ;
41926: LD_ADDR_VAR 0 2
41930: PUSH
41931: LD_VAR 0 1
41935: PUSH
41936: LD_INT 1
41938: MINUS
41939: ST_TO_ADDR
// end ;
41940: LD_VAR 0 2
41944: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41945: LD_INT 0
41947: PPUSH
41948: PPUSH
41949: PPUSH
41950: PPUSH
41951: PPUSH
41952: PPUSH
41953: PPUSH
41954: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41955: LD_VAR 0 1
41959: PPUSH
41960: LD_VAR 0 2
41964: PPUSH
41965: CALL_OW 488
41969: NOT
41970: PUSH
41971: LD_VAR 0 3
41975: PPUSH
41976: LD_VAR 0 4
41980: PPUSH
41981: CALL_OW 488
41985: NOT
41986: OR
41987: IFFALSE 42000
// begin result := - 1 ;
41989: LD_ADDR_VAR 0 5
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: ST_TO_ADDR
// exit ;
41998: GO 42235
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42000: LD_ADDR_VAR 0 12
42004: PUSH
42005: LD_VAR 0 1
42009: PPUSH
42010: LD_VAR 0 2
42014: PPUSH
42015: LD_VAR 0 3
42019: PPUSH
42020: LD_VAR 0 4
42024: PPUSH
42025: CALL 41085 0 4
42029: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42030: LD_ADDR_VAR 0 11
42034: PUSH
42035: LD_VAR 0 1
42039: PPUSH
42040: LD_VAR 0 2
42044: PPUSH
42045: LD_VAR 0 12
42049: PUSH
42050: LD_INT 1
42052: ARRAY
42053: PPUSH
42054: LD_VAR 0 12
42058: PUSH
42059: LD_INT 2
42061: ARRAY
42062: PPUSH
42063: CALL_OW 298
42067: ST_TO_ADDR
// distance := 9999 ;
42068: LD_ADDR_VAR 0 10
42072: PUSH
42073: LD_INT 9999
42075: ST_TO_ADDR
// for i := 0 to 5 do
42076: LD_ADDR_VAR 0 6
42080: PUSH
42081: DOUBLE
42082: LD_INT 0
42084: DEC
42085: ST_TO_ADDR
42086: LD_INT 5
42088: PUSH
42089: FOR_TO
42090: IFFALSE 42233
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42092: LD_ADDR_VAR 0 7
42096: PUSH
42097: LD_VAR 0 1
42101: PPUSH
42102: LD_VAR 0 6
42106: PPUSH
42107: LD_VAR 0 11
42111: PPUSH
42112: CALL_OW 272
42116: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42117: LD_ADDR_VAR 0 8
42121: PUSH
42122: LD_VAR 0 2
42126: PPUSH
42127: LD_VAR 0 6
42131: PPUSH
42132: LD_VAR 0 11
42136: PPUSH
42137: CALL_OW 273
42141: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42142: LD_VAR 0 7
42146: PPUSH
42147: LD_VAR 0 8
42151: PPUSH
42152: CALL_OW 488
42156: NOT
42157: IFFALSE 42161
// continue ;
42159: GO 42089
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42161: LD_ADDR_VAR 0 9
42165: PUSH
42166: LD_VAR 0 12
42170: PUSH
42171: LD_INT 1
42173: ARRAY
42174: PPUSH
42175: LD_VAR 0 12
42179: PUSH
42180: LD_INT 2
42182: ARRAY
42183: PPUSH
42184: LD_VAR 0 7
42188: PPUSH
42189: LD_VAR 0 8
42193: PPUSH
42194: CALL_OW 298
42198: ST_TO_ADDR
// if tmp < distance then
42199: LD_VAR 0 9
42203: PUSH
42204: LD_VAR 0 10
42208: LESS
42209: IFFALSE 42231
// begin result := i ;
42211: LD_ADDR_VAR 0 5
42215: PUSH
42216: LD_VAR 0 6
42220: ST_TO_ADDR
// distance := tmp ;
42221: LD_ADDR_VAR 0 10
42225: PUSH
42226: LD_VAR 0 9
42230: ST_TO_ADDR
// end ; end ;
42231: GO 42089
42233: POP
42234: POP
// end ;
42235: LD_VAR 0 5
42239: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42240: LD_INT 0
42242: PPUSH
42243: PPUSH
// if not driver or not IsInUnit ( driver ) then
42244: LD_VAR 0 1
42248: NOT
42249: PUSH
42250: LD_VAR 0 1
42254: PPUSH
42255: CALL_OW 310
42259: NOT
42260: OR
42261: IFFALSE 42265
// exit ;
42263: GO 42355
// vehicle := IsInUnit ( driver ) ;
42265: LD_ADDR_VAR 0 3
42269: PUSH
42270: LD_VAR 0 1
42274: PPUSH
42275: CALL_OW 310
42279: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42280: LD_VAR 0 1
42284: PPUSH
42285: LD_STRING \
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: PUSH
42315: LD_STRING E
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: LD_VAR 0 3
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PPUSH
42351: CALL_OW 446
// end ;
42355: LD_VAR 0 2
42359: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42360: LD_INT 0
42362: PPUSH
42363: PPUSH
// if not driver or not IsInUnit ( driver ) then
42364: LD_VAR 0 1
42368: NOT
42369: PUSH
42370: LD_VAR 0 1
42374: PPUSH
42375: CALL_OW 310
42379: NOT
42380: OR
42381: IFFALSE 42385
// exit ;
42383: GO 42475
// vehicle := IsInUnit ( driver ) ;
42385: LD_ADDR_VAR 0 3
42389: PUSH
42390: LD_VAR 0 1
42394: PPUSH
42395: CALL_OW 310
42399: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42400: LD_VAR 0 1
42404: PPUSH
42405: LD_STRING \
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: PUSH
42435: LD_STRING E
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: LD_VAR 0 3
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: LD_INT 0
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PPUSH
42471: CALL_OW 447
// end ;
42475: LD_VAR 0 2
42479: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42480: LD_INT 0
42482: PPUSH
42483: PPUSH
42484: PPUSH
// tmp := [ ] ;
42485: LD_ADDR_VAR 0 5
42489: PUSH
42490: EMPTY
42491: ST_TO_ADDR
// for i in units do
42492: LD_ADDR_VAR 0 4
42496: PUSH
42497: LD_VAR 0 1
42501: PUSH
42502: FOR_IN
42503: IFFALSE 42541
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42505: LD_ADDR_VAR 0 5
42509: PUSH
42510: LD_VAR 0 5
42514: PPUSH
42515: LD_VAR 0 5
42519: PUSH
42520: LD_INT 1
42522: PLUS
42523: PPUSH
42524: LD_VAR 0 4
42528: PPUSH
42529: CALL_OW 256
42533: PPUSH
42534: CALL_OW 2
42538: ST_TO_ADDR
42539: GO 42502
42541: POP
42542: POP
// if not tmp then
42543: LD_VAR 0 5
42547: NOT
42548: IFFALSE 42552
// exit ;
42550: GO 42600
// if asc then
42552: LD_VAR 0 2
42556: IFFALSE 42580
// result := SortListByListAsc ( units , tmp ) else
42558: LD_ADDR_VAR 0 3
42562: PUSH
42563: LD_VAR 0 1
42567: PPUSH
42568: LD_VAR 0 5
42572: PPUSH
42573: CALL_OW 76
42577: ST_TO_ADDR
42578: GO 42600
// result := SortListByListDesc ( units , tmp ) ;
42580: LD_ADDR_VAR 0 3
42584: PUSH
42585: LD_VAR 0 1
42589: PPUSH
42590: LD_VAR 0 5
42594: PPUSH
42595: CALL_OW 77
42599: ST_TO_ADDR
// end ;
42600: LD_VAR 0 3
42604: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42605: LD_INT 0
42607: PPUSH
42608: PPUSH
// task := GetTaskList ( mech ) ;
42609: LD_ADDR_VAR 0 4
42613: PUSH
42614: LD_VAR 0 1
42618: PPUSH
42619: CALL_OW 437
42623: ST_TO_ADDR
// if not task then
42624: LD_VAR 0 4
42628: NOT
42629: IFFALSE 42633
// exit ;
42631: GO 42675
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42633: LD_ADDR_VAR 0 3
42637: PUSH
42638: LD_VAR 0 4
42642: PUSH
42643: LD_INT 1
42645: ARRAY
42646: PUSH
42647: LD_INT 1
42649: ARRAY
42650: PUSH
42651: LD_STRING r
42653: EQUAL
42654: PUSH
42655: LD_VAR 0 4
42659: PUSH
42660: LD_INT 1
42662: ARRAY
42663: PUSH
42664: LD_INT 4
42666: ARRAY
42667: PUSH
42668: LD_VAR 0 2
42672: EQUAL
42673: AND
42674: ST_TO_ADDR
// end ;
42675: LD_VAR 0 3
42679: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42680: LD_INT 0
42682: PPUSH
// SetDir ( unit , d ) ;
42683: LD_VAR 0 1
42687: PPUSH
42688: LD_VAR 0 4
42692: PPUSH
42693: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42697: LD_VAR 0 1
42701: PPUSH
42702: LD_VAR 0 2
42706: PPUSH
42707: LD_VAR 0 3
42711: PPUSH
42712: LD_VAR 0 5
42716: PPUSH
42717: CALL_OW 48
// end ;
42721: LD_VAR 0 6
42725: RET
// export function ToNaturalNumber ( number ) ; begin
42726: LD_INT 0
42728: PPUSH
// result := number div 1 ;
42729: LD_ADDR_VAR 0 2
42733: PUSH
42734: LD_VAR 0 1
42738: PUSH
42739: LD_INT 1
42741: DIV
42742: ST_TO_ADDR
// if number < 0 then
42743: LD_VAR 0 1
42747: PUSH
42748: LD_INT 0
42750: LESS
42751: IFFALSE 42761
// result := 0 ;
42753: LD_ADDR_VAR 0 2
42757: PUSH
42758: LD_INT 0
42760: ST_TO_ADDR
// end ;
42761: LD_VAR 0 2
42765: RET
// export function SortByClass ( units , class ) ; var un ; begin
42766: LD_INT 0
42768: PPUSH
42769: PPUSH
// if not units or not class then
42770: LD_VAR 0 1
42774: NOT
42775: PUSH
42776: LD_VAR 0 2
42780: NOT
42781: OR
42782: IFFALSE 42786
// exit ;
42784: GO 42881
// result := [ ] ;
42786: LD_ADDR_VAR 0 3
42790: PUSH
42791: EMPTY
42792: ST_TO_ADDR
// for un in units do
42793: LD_ADDR_VAR 0 4
42797: PUSH
42798: LD_VAR 0 1
42802: PUSH
42803: FOR_IN
42804: IFFALSE 42879
// if GetClass ( un ) = class then
42806: LD_VAR 0 4
42810: PPUSH
42811: CALL_OW 257
42815: PUSH
42816: LD_VAR 0 2
42820: EQUAL
42821: IFFALSE 42848
// result := Insert ( result , 1 , un ) else
42823: LD_ADDR_VAR 0 3
42827: PUSH
42828: LD_VAR 0 3
42832: PPUSH
42833: LD_INT 1
42835: PPUSH
42836: LD_VAR 0 4
42840: PPUSH
42841: CALL_OW 2
42845: ST_TO_ADDR
42846: GO 42877
// result := Replace ( result , result + 1 , un ) ;
42848: LD_ADDR_VAR 0 3
42852: PUSH
42853: LD_VAR 0 3
42857: PPUSH
42858: LD_VAR 0 3
42862: PUSH
42863: LD_INT 1
42865: PLUS
42866: PPUSH
42867: LD_VAR 0 4
42871: PPUSH
42872: CALL_OW 1
42876: ST_TO_ADDR
42877: GO 42803
42879: POP
42880: POP
// end ;
42881: LD_VAR 0 3
42885: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42886: LD_INT 0
42888: PPUSH
42889: PPUSH
42890: PPUSH
42891: PPUSH
42892: PPUSH
42893: PPUSH
42894: PPUSH
// result := [ ] ;
42895: LD_ADDR_VAR 0 4
42899: PUSH
42900: EMPTY
42901: ST_TO_ADDR
// if x - r < 0 then
42902: LD_VAR 0 1
42906: PUSH
42907: LD_VAR 0 3
42911: MINUS
42912: PUSH
42913: LD_INT 0
42915: LESS
42916: IFFALSE 42928
// min_x := 0 else
42918: LD_ADDR_VAR 0 8
42922: PUSH
42923: LD_INT 0
42925: ST_TO_ADDR
42926: GO 42944
// min_x := x - r ;
42928: LD_ADDR_VAR 0 8
42932: PUSH
42933: LD_VAR 0 1
42937: PUSH
42938: LD_VAR 0 3
42942: MINUS
42943: ST_TO_ADDR
// if y - r < 0 then
42944: LD_VAR 0 2
42948: PUSH
42949: LD_VAR 0 3
42953: MINUS
42954: PUSH
42955: LD_INT 0
42957: LESS
42958: IFFALSE 42970
// min_y := 0 else
42960: LD_ADDR_VAR 0 7
42964: PUSH
42965: LD_INT 0
42967: ST_TO_ADDR
42968: GO 42986
// min_y := y - r ;
42970: LD_ADDR_VAR 0 7
42974: PUSH
42975: LD_VAR 0 2
42979: PUSH
42980: LD_VAR 0 3
42984: MINUS
42985: ST_TO_ADDR
// max_x := x + r ;
42986: LD_ADDR_VAR 0 9
42990: PUSH
42991: LD_VAR 0 1
42995: PUSH
42996: LD_VAR 0 3
43000: PLUS
43001: ST_TO_ADDR
// max_y := y + r ;
43002: LD_ADDR_VAR 0 10
43006: PUSH
43007: LD_VAR 0 2
43011: PUSH
43012: LD_VAR 0 3
43016: PLUS
43017: ST_TO_ADDR
// for _x = min_x to max_x do
43018: LD_ADDR_VAR 0 5
43022: PUSH
43023: DOUBLE
43024: LD_VAR 0 8
43028: DEC
43029: ST_TO_ADDR
43030: LD_VAR 0 9
43034: PUSH
43035: FOR_TO
43036: IFFALSE 43137
// for _y = min_y to max_y do
43038: LD_ADDR_VAR 0 6
43042: PUSH
43043: DOUBLE
43044: LD_VAR 0 7
43048: DEC
43049: ST_TO_ADDR
43050: LD_VAR 0 10
43054: PUSH
43055: FOR_TO
43056: IFFALSE 43133
// begin if not ValidHex ( _x , _y ) then
43058: LD_VAR 0 5
43062: PPUSH
43063: LD_VAR 0 6
43067: PPUSH
43068: CALL_OW 488
43072: NOT
43073: IFFALSE 43077
// continue ;
43075: GO 43055
// if GetResourceTypeXY ( _x , _y ) then
43077: LD_VAR 0 5
43081: PPUSH
43082: LD_VAR 0 6
43086: PPUSH
43087: CALL_OW 283
43091: IFFALSE 43131
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43093: LD_ADDR_VAR 0 4
43097: PUSH
43098: LD_VAR 0 4
43102: PPUSH
43103: LD_VAR 0 4
43107: PUSH
43108: LD_INT 1
43110: PLUS
43111: PPUSH
43112: LD_VAR 0 5
43116: PUSH
43117: LD_VAR 0 6
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PPUSH
43126: CALL_OW 1
43130: ST_TO_ADDR
// end ;
43131: GO 43055
43133: POP
43134: POP
43135: GO 43035
43137: POP
43138: POP
// end ;
43139: LD_VAR 0 4
43143: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43144: LD_INT 0
43146: PPUSH
43147: PPUSH
43148: PPUSH
43149: PPUSH
43150: PPUSH
43151: PPUSH
43152: PPUSH
43153: PPUSH
// if not units then
43154: LD_VAR 0 1
43158: NOT
43159: IFFALSE 43163
// exit ;
43161: GO 43691
// result := UnitFilter ( units , [ f_ok ] ) ;
43163: LD_ADDR_VAR 0 3
43167: PUSH
43168: LD_VAR 0 1
43172: PPUSH
43173: LD_INT 50
43175: PUSH
43176: EMPTY
43177: LIST
43178: PPUSH
43179: CALL_OW 72
43183: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43184: LD_ADDR_VAR 0 8
43188: PUSH
43189: LD_VAR 0 1
43193: PUSH
43194: LD_INT 1
43196: ARRAY
43197: PPUSH
43198: CALL_OW 255
43202: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43203: LD_ADDR_VAR 0 10
43207: PUSH
43208: LD_INT 29
43210: PUSH
43211: LD_INT 91
43213: PUSH
43214: LD_INT 49
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: LIST
43221: ST_TO_ADDR
// if not result then
43222: LD_VAR 0 3
43226: NOT
43227: IFFALSE 43231
// exit ;
43229: GO 43691
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43231: LD_ADDR_VAR 0 5
43235: PUSH
43236: LD_INT 81
43238: PUSH
43239: LD_VAR 0 8
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PPUSH
43248: CALL_OW 69
43252: ST_TO_ADDR
// for i in result do
43253: LD_ADDR_VAR 0 4
43257: PUSH
43258: LD_VAR 0 3
43262: PUSH
43263: FOR_IN
43264: IFFALSE 43689
// begin tag := GetTag ( i ) + 1 ;
43266: LD_ADDR_VAR 0 9
43270: PUSH
43271: LD_VAR 0 4
43275: PPUSH
43276: CALL_OW 110
43280: PUSH
43281: LD_INT 1
43283: PLUS
43284: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43285: LD_ADDR_VAR 0 7
43289: PUSH
43290: LD_VAR 0 4
43294: PPUSH
43295: CALL_OW 250
43299: PPUSH
43300: LD_VAR 0 4
43304: PPUSH
43305: CALL_OW 251
43309: PPUSH
43310: LD_INT 4
43312: PPUSH
43313: CALL 42886 0 3
43317: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43318: LD_VAR 0 4
43322: PPUSH
43323: CALL_OW 247
43327: PUSH
43328: LD_INT 2
43330: EQUAL
43331: PUSH
43332: LD_VAR 0 7
43336: PUSH
43337: LD_INT 2
43339: GREATER
43340: AND
43341: PUSH
43342: LD_VAR 0 4
43346: PPUSH
43347: CALL_OW 264
43351: PUSH
43352: LD_VAR 0 10
43356: IN
43357: NOT
43358: AND
43359: IFFALSE 43398
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43361: LD_VAR 0 4
43365: PPUSH
43366: LD_VAR 0 7
43370: PUSH
43371: LD_INT 1
43373: ARRAY
43374: PUSH
43375: LD_INT 1
43377: ARRAY
43378: PPUSH
43379: LD_VAR 0 7
43383: PUSH
43384: LD_INT 1
43386: ARRAY
43387: PUSH
43388: LD_INT 2
43390: ARRAY
43391: PPUSH
43392: CALL_OW 116
43396: GO 43687
// if path > tag then
43398: LD_VAR 0 2
43402: PUSH
43403: LD_VAR 0 9
43407: GREATER
43408: IFFALSE 43616
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43410: LD_ADDR_VAR 0 6
43414: PUSH
43415: LD_VAR 0 5
43419: PPUSH
43420: LD_INT 91
43422: PUSH
43423: LD_VAR 0 4
43427: PUSH
43428: LD_INT 8
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: LIST
43435: PPUSH
43436: CALL_OW 72
43440: ST_TO_ADDR
// if nearEnemy then
43441: LD_VAR 0 6
43445: IFFALSE 43514
// begin if GetWeapon ( i ) = ru_time_lapser then
43447: LD_VAR 0 4
43451: PPUSH
43452: CALL_OW 264
43456: PUSH
43457: LD_INT 49
43459: EQUAL
43460: IFFALSE 43488
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43462: LD_VAR 0 4
43466: PPUSH
43467: LD_VAR 0 6
43471: PPUSH
43472: LD_VAR 0 4
43476: PPUSH
43477: CALL_OW 74
43481: PPUSH
43482: CALL_OW 112
43486: GO 43512
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43488: LD_VAR 0 4
43492: PPUSH
43493: LD_VAR 0 6
43497: PPUSH
43498: LD_VAR 0 4
43502: PPUSH
43503: CALL_OW 74
43507: PPUSH
43508: CALL 44762 0 2
// end else
43512: GO 43614
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43514: LD_VAR 0 4
43518: PPUSH
43519: LD_VAR 0 2
43523: PUSH
43524: LD_VAR 0 9
43528: ARRAY
43529: PUSH
43530: LD_INT 1
43532: ARRAY
43533: PPUSH
43534: LD_VAR 0 2
43538: PUSH
43539: LD_VAR 0 9
43543: ARRAY
43544: PUSH
43545: LD_INT 2
43547: ARRAY
43548: PPUSH
43549: CALL_OW 297
43553: PUSH
43554: LD_INT 6
43556: GREATER
43557: IFFALSE 43600
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43559: LD_VAR 0 4
43563: PPUSH
43564: LD_VAR 0 2
43568: PUSH
43569: LD_VAR 0 9
43573: ARRAY
43574: PUSH
43575: LD_INT 1
43577: ARRAY
43578: PPUSH
43579: LD_VAR 0 2
43583: PUSH
43584: LD_VAR 0 9
43588: ARRAY
43589: PUSH
43590: LD_INT 2
43592: ARRAY
43593: PPUSH
43594: CALL_OW 114
43598: GO 43614
// SetTag ( i , tag ) ;
43600: LD_VAR 0 4
43604: PPUSH
43605: LD_VAR 0 9
43609: PPUSH
43610: CALL_OW 109
// end else
43614: GO 43687
// if enemy then
43616: LD_VAR 0 5
43620: IFFALSE 43687
// begin if GetWeapon ( i ) = ru_time_lapser then
43622: LD_VAR 0 4
43626: PPUSH
43627: CALL_OW 264
43631: PUSH
43632: LD_INT 49
43634: EQUAL
43635: IFFALSE 43663
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43637: LD_VAR 0 4
43641: PPUSH
43642: LD_VAR 0 5
43646: PPUSH
43647: LD_VAR 0 4
43651: PPUSH
43652: CALL_OW 74
43656: PPUSH
43657: CALL_OW 112
43661: GO 43687
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43663: LD_VAR 0 4
43667: PPUSH
43668: LD_VAR 0 5
43672: PPUSH
43673: LD_VAR 0 4
43677: PPUSH
43678: CALL_OW 74
43682: PPUSH
43683: CALL 44762 0 2
// end ; end ;
43687: GO 43263
43689: POP
43690: POP
// end ;
43691: LD_VAR 0 3
43695: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43696: LD_INT 0
43698: PPUSH
43699: PPUSH
43700: PPUSH
// if not unit or IsInUnit ( unit ) then
43701: LD_VAR 0 1
43705: NOT
43706: PUSH
43707: LD_VAR 0 1
43711: PPUSH
43712: CALL_OW 310
43716: OR
43717: IFFALSE 43721
// exit ;
43719: GO 43812
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43721: LD_ADDR_VAR 0 4
43725: PUSH
43726: LD_VAR 0 1
43730: PPUSH
43731: CALL_OW 250
43735: PPUSH
43736: LD_VAR 0 2
43740: PPUSH
43741: LD_INT 1
43743: PPUSH
43744: CALL_OW 272
43748: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43749: LD_ADDR_VAR 0 5
43753: PUSH
43754: LD_VAR 0 1
43758: PPUSH
43759: CALL_OW 251
43763: PPUSH
43764: LD_VAR 0 2
43768: PPUSH
43769: LD_INT 1
43771: PPUSH
43772: CALL_OW 273
43776: ST_TO_ADDR
// if ValidHex ( x , y ) then
43777: LD_VAR 0 4
43781: PPUSH
43782: LD_VAR 0 5
43786: PPUSH
43787: CALL_OW 488
43791: IFFALSE 43812
// ComTurnXY ( unit , x , y ) ;
43793: LD_VAR 0 1
43797: PPUSH
43798: LD_VAR 0 4
43802: PPUSH
43803: LD_VAR 0 5
43807: PPUSH
43808: CALL_OW 118
// end ;
43812: LD_VAR 0 3
43816: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43817: LD_INT 0
43819: PPUSH
43820: PPUSH
// result := false ;
43821: LD_ADDR_VAR 0 3
43825: PUSH
43826: LD_INT 0
43828: ST_TO_ADDR
// if not units then
43829: LD_VAR 0 2
43833: NOT
43834: IFFALSE 43838
// exit ;
43836: GO 43883
// for i in units do
43838: LD_ADDR_VAR 0 4
43842: PUSH
43843: LD_VAR 0 2
43847: PUSH
43848: FOR_IN
43849: IFFALSE 43881
// if See ( side , i ) then
43851: LD_VAR 0 1
43855: PPUSH
43856: LD_VAR 0 4
43860: PPUSH
43861: CALL_OW 292
43865: IFFALSE 43879
// begin result := true ;
43867: LD_ADDR_VAR 0 3
43871: PUSH
43872: LD_INT 1
43874: ST_TO_ADDR
// exit ;
43875: POP
43876: POP
43877: GO 43883
// end ;
43879: GO 43848
43881: POP
43882: POP
// end ;
43883: LD_VAR 0 3
43887: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43888: LD_INT 0
43890: PPUSH
43891: PPUSH
43892: PPUSH
43893: PPUSH
// if not unit or not points then
43894: LD_VAR 0 1
43898: NOT
43899: PUSH
43900: LD_VAR 0 2
43904: NOT
43905: OR
43906: IFFALSE 43910
// exit ;
43908: GO 44000
// dist := 99999 ;
43910: LD_ADDR_VAR 0 5
43914: PUSH
43915: LD_INT 99999
43917: ST_TO_ADDR
// for i in points do
43918: LD_ADDR_VAR 0 4
43922: PUSH
43923: LD_VAR 0 2
43927: PUSH
43928: FOR_IN
43929: IFFALSE 43998
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43931: LD_ADDR_VAR 0 6
43935: PUSH
43936: LD_VAR 0 1
43940: PPUSH
43941: LD_VAR 0 4
43945: PUSH
43946: LD_INT 1
43948: ARRAY
43949: PPUSH
43950: LD_VAR 0 4
43954: PUSH
43955: LD_INT 2
43957: ARRAY
43958: PPUSH
43959: CALL_OW 297
43963: ST_TO_ADDR
// if tmpDist < dist then
43964: LD_VAR 0 6
43968: PUSH
43969: LD_VAR 0 5
43973: LESS
43974: IFFALSE 43996
// begin result := i ;
43976: LD_ADDR_VAR 0 3
43980: PUSH
43981: LD_VAR 0 4
43985: ST_TO_ADDR
// dist := tmpDist ;
43986: LD_ADDR_VAR 0 5
43990: PUSH
43991: LD_VAR 0 6
43995: ST_TO_ADDR
// end ; end ;
43996: GO 43928
43998: POP
43999: POP
// end ;
44000: LD_VAR 0 3
44004: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44005: LD_INT 0
44007: PPUSH
// uc_side := side ;
44008: LD_ADDR_OWVAR 20
44012: PUSH
44013: LD_VAR 0 1
44017: ST_TO_ADDR
// uc_nation := 3 ;
44018: LD_ADDR_OWVAR 21
44022: PUSH
44023: LD_INT 3
44025: ST_TO_ADDR
// vc_chassis := 25 ;
44026: LD_ADDR_OWVAR 37
44030: PUSH
44031: LD_INT 25
44033: ST_TO_ADDR
// vc_engine := engine_siberite ;
44034: LD_ADDR_OWVAR 39
44038: PUSH
44039: LD_INT 3
44041: ST_TO_ADDR
// vc_control := control_computer ;
44042: LD_ADDR_OWVAR 38
44046: PUSH
44047: LD_INT 3
44049: ST_TO_ADDR
// vc_weapon := 59 ;
44050: LD_ADDR_OWVAR 40
44054: PUSH
44055: LD_INT 59
44057: ST_TO_ADDR
// result := CreateVehicle ;
44058: LD_ADDR_VAR 0 5
44062: PUSH
44063: CALL_OW 45
44067: ST_TO_ADDR
// SetDir ( result , d ) ;
44068: LD_VAR 0 5
44072: PPUSH
44073: LD_VAR 0 4
44077: PPUSH
44078: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44082: LD_VAR 0 5
44086: PPUSH
44087: LD_VAR 0 2
44091: PPUSH
44092: LD_VAR 0 3
44096: PPUSH
44097: LD_INT 0
44099: PPUSH
44100: CALL_OW 48
// end ;
44104: LD_VAR 0 5
44108: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44109: LD_INT 0
44111: PPUSH
44112: PPUSH
44113: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44114: LD_ADDR_VAR 0 2
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44137: LD_VAR 0 1
44141: NOT
44142: PUSH
44143: LD_VAR 0 1
44147: PPUSH
44148: CALL_OW 264
44152: PUSH
44153: LD_INT 12
44155: PUSH
44156: LD_INT 51
44158: PUSH
44159: LD_INT 32
44161: PUSH
44162: LD_INT 89
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: IN
44171: NOT
44172: OR
44173: IFFALSE 44177
// exit ;
44175: GO 44275
// for i := 1 to 3 do
44177: LD_ADDR_VAR 0 3
44181: PUSH
44182: DOUBLE
44183: LD_INT 1
44185: DEC
44186: ST_TO_ADDR
44187: LD_INT 3
44189: PUSH
44190: FOR_TO
44191: IFFALSE 44273
// begin tmp := GetCargo ( cargo , i ) ;
44193: LD_ADDR_VAR 0 4
44197: PUSH
44198: LD_VAR 0 1
44202: PPUSH
44203: LD_VAR 0 3
44207: PPUSH
44208: CALL_OW 289
44212: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44213: LD_ADDR_VAR 0 2
44217: PUSH
44218: LD_VAR 0 2
44222: PPUSH
44223: LD_VAR 0 3
44227: PPUSH
44228: LD_VAR 0 4
44232: PPUSH
44233: CALL_OW 1
44237: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44238: LD_ADDR_VAR 0 2
44242: PUSH
44243: LD_VAR 0 2
44247: PPUSH
44248: LD_INT 4
44250: PPUSH
44251: LD_VAR 0 2
44255: PUSH
44256: LD_INT 4
44258: ARRAY
44259: PUSH
44260: LD_VAR 0 4
44264: PLUS
44265: PPUSH
44266: CALL_OW 1
44270: ST_TO_ADDR
// end ;
44271: GO 44190
44273: POP
44274: POP
// end ;
44275: LD_VAR 0 2
44279: RET
// export function Length ( array ) ; begin
44280: LD_INT 0
44282: PPUSH
// result := array + 0 ;
44283: LD_ADDR_VAR 0 2
44287: PUSH
44288: LD_VAR 0 1
44292: PUSH
44293: LD_INT 0
44295: PLUS
44296: ST_TO_ADDR
// end ;
44297: LD_VAR 0 2
44301: RET
// export function PrepareArray ( array ) ; begin
44302: LD_INT 0
44304: PPUSH
// result := array diff 0 ;
44305: LD_ADDR_VAR 0 2
44309: PUSH
44310: LD_VAR 0 1
44314: PUSH
44315: LD_INT 0
44317: DIFF
44318: ST_TO_ADDR
// if not result [ 1 ] then
44319: LD_VAR 0 2
44323: PUSH
44324: LD_INT 1
44326: ARRAY
44327: NOT
44328: IFFALSE 44348
// result := Delete ( result , 1 ) ;
44330: LD_ADDR_VAR 0 2
44334: PUSH
44335: LD_VAR 0 2
44339: PPUSH
44340: LD_INT 1
44342: PPUSH
44343: CALL_OW 3
44347: ST_TO_ADDR
// end ;
44348: LD_VAR 0 2
44352: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44353: LD_INT 0
44355: PPUSH
44356: PPUSH
44357: PPUSH
44358: PPUSH
// sibRocketRange := 25 ;
44359: LD_ADDR_VAR 0 6
44363: PUSH
44364: LD_INT 25
44366: ST_TO_ADDR
// result := false ;
44367: LD_ADDR_VAR 0 4
44371: PUSH
44372: LD_INT 0
44374: ST_TO_ADDR
// for i := 0 to 5 do
44375: LD_ADDR_VAR 0 5
44379: PUSH
44380: DOUBLE
44381: LD_INT 0
44383: DEC
44384: ST_TO_ADDR
44385: LD_INT 5
44387: PUSH
44388: FOR_TO
44389: IFFALSE 44456
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44391: LD_VAR 0 1
44395: PPUSH
44396: LD_VAR 0 5
44400: PPUSH
44401: LD_VAR 0 6
44405: PPUSH
44406: CALL_OW 272
44410: PPUSH
44411: LD_VAR 0 2
44415: PPUSH
44416: LD_VAR 0 5
44420: PPUSH
44421: LD_VAR 0 6
44425: PPUSH
44426: CALL_OW 273
44430: PPUSH
44431: LD_VAR 0 3
44435: PPUSH
44436: CALL_OW 309
44440: IFFALSE 44454
// begin result := true ;
44442: LD_ADDR_VAR 0 4
44446: PUSH
44447: LD_INT 1
44449: ST_TO_ADDR
// exit ;
44450: POP
44451: POP
44452: GO 44458
// end ;
44454: GO 44388
44456: POP
44457: POP
// end ;
44458: LD_VAR 0 4
44462: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44463: LD_INT 0
44465: PPUSH
44466: PPUSH
44467: PPUSH
// if btype = b_depot then
44468: LD_VAR 0 2
44472: PUSH
44473: LD_INT 0
44475: EQUAL
44476: IFFALSE 44488
// begin result := true ;
44478: LD_ADDR_VAR 0 3
44482: PUSH
44483: LD_INT 1
44485: ST_TO_ADDR
// exit ;
44486: GO 44604
// end ; pom := GetBase ( depot ) ;
44488: LD_ADDR_VAR 0 4
44492: PUSH
44493: LD_VAR 0 1
44497: PPUSH
44498: CALL_OW 274
44502: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44503: LD_ADDR_VAR 0 5
44507: PUSH
44508: LD_VAR 0 2
44512: PPUSH
44513: LD_VAR 0 1
44517: PPUSH
44518: CALL_OW 248
44522: PPUSH
44523: CALL_OW 450
44527: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44528: LD_ADDR_VAR 0 3
44532: PUSH
44533: LD_VAR 0 4
44537: PPUSH
44538: LD_INT 1
44540: PPUSH
44541: CALL_OW 275
44545: PUSH
44546: LD_VAR 0 5
44550: PUSH
44551: LD_INT 1
44553: ARRAY
44554: GREATEREQUAL
44555: PUSH
44556: LD_VAR 0 4
44560: PPUSH
44561: LD_INT 2
44563: PPUSH
44564: CALL_OW 275
44568: PUSH
44569: LD_VAR 0 5
44573: PUSH
44574: LD_INT 2
44576: ARRAY
44577: GREATEREQUAL
44578: AND
44579: PUSH
44580: LD_VAR 0 4
44584: PPUSH
44585: LD_INT 3
44587: PPUSH
44588: CALL_OW 275
44592: PUSH
44593: LD_VAR 0 5
44597: PUSH
44598: LD_INT 3
44600: ARRAY
44601: GREATEREQUAL
44602: AND
44603: ST_TO_ADDR
// end ;
44604: LD_VAR 0 3
44608: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44609: LD_INT 0
44611: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44612: LD_VAR 0 1
44616: PPUSH
44617: LD_VAR 0 2
44621: PPUSH
44622: LD_INT 0
44624: PPUSH
44625: LD_INT 0
44627: PPUSH
44628: LD_INT 1
44630: PPUSH
44631: LD_INT 0
44633: PPUSH
44634: CALL_OW 587
// end ;
44638: LD_VAR 0 3
44642: RET
// export function CenterOnNow ( unit ) ; begin
44643: LD_INT 0
44645: PPUSH
// result := IsInUnit ( unit ) ;
44646: LD_ADDR_VAR 0 2
44650: PUSH
44651: LD_VAR 0 1
44655: PPUSH
44656: CALL_OW 310
44660: ST_TO_ADDR
// if not result then
44661: LD_VAR 0 2
44665: NOT
44666: IFFALSE 44678
// result := unit ;
44668: LD_ADDR_VAR 0 2
44672: PUSH
44673: LD_VAR 0 1
44677: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44678: LD_VAR 0 1
44682: PPUSH
44683: CALL_OW 87
// end ;
44687: LD_VAR 0 2
44691: RET
// export function ComMoveHex ( unit , hex ) ; begin
44692: LD_INT 0
44694: PPUSH
// if not hex then
44695: LD_VAR 0 2
44699: NOT
44700: IFFALSE 44704
// exit ;
44702: GO 44757
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44704: LD_VAR 0 2
44708: PUSH
44709: LD_INT 1
44711: ARRAY
44712: PPUSH
44713: LD_VAR 0 2
44717: PUSH
44718: LD_INT 2
44720: ARRAY
44721: PPUSH
44722: CALL_OW 428
44726: IFFALSE 44730
// exit ;
44728: GO 44757
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44730: LD_VAR 0 1
44734: PPUSH
44735: LD_VAR 0 2
44739: PUSH
44740: LD_INT 1
44742: ARRAY
44743: PPUSH
44744: LD_VAR 0 2
44748: PUSH
44749: LD_INT 2
44751: ARRAY
44752: PPUSH
44753: CALL_OW 111
// end ;
44757: LD_VAR 0 3
44761: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44762: LD_INT 0
44764: PPUSH
44765: PPUSH
44766: PPUSH
// if not unit or not enemy then
44767: LD_VAR 0 1
44771: NOT
44772: PUSH
44773: LD_VAR 0 2
44777: NOT
44778: OR
44779: IFFALSE 44783
// exit ;
44781: GO 44907
// x := GetX ( enemy ) ;
44783: LD_ADDR_VAR 0 4
44787: PUSH
44788: LD_VAR 0 2
44792: PPUSH
44793: CALL_OW 250
44797: ST_TO_ADDR
// y := GetY ( enemy ) ;
44798: LD_ADDR_VAR 0 5
44802: PUSH
44803: LD_VAR 0 2
44807: PPUSH
44808: CALL_OW 251
44812: ST_TO_ADDR
// if ValidHex ( x , y ) then
44813: LD_VAR 0 4
44817: PPUSH
44818: LD_VAR 0 5
44822: PPUSH
44823: CALL_OW 488
44827: IFFALSE 44907
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44829: LD_VAR 0 2
44833: PPUSH
44834: CALL_OW 247
44838: PUSH
44839: LD_INT 3
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: IN
44849: PUSH
44850: LD_VAR 0 1
44854: PPUSH
44855: CALL_OW 255
44859: PPUSH
44860: LD_VAR 0 2
44864: PPUSH
44865: CALL_OW 292
44869: OR
44870: IFFALSE 44888
// ComAttackUnit ( unit , enemy ) else
44872: LD_VAR 0 1
44876: PPUSH
44877: LD_VAR 0 2
44881: PPUSH
44882: CALL_OW 115
44886: GO 44907
// ComAgressiveMove ( unit , x , y ) ;
44888: LD_VAR 0 1
44892: PPUSH
44893: LD_VAR 0 4
44897: PPUSH
44898: LD_VAR 0 5
44902: PPUSH
44903: CALL_OW 114
// end ;
44907: LD_VAR 0 3
44911: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44912: LD_INT 0
44914: PPUSH
44915: PPUSH
44916: PPUSH
// list := AreaToList ( area , 0 ) ;
44917: LD_ADDR_VAR 0 5
44921: PUSH
44922: LD_VAR 0 1
44926: PPUSH
44927: LD_INT 0
44929: PPUSH
44930: CALL_OW 517
44934: ST_TO_ADDR
// if not list then
44935: LD_VAR 0 5
44939: NOT
44940: IFFALSE 44944
// exit ;
44942: GO 45074
// if all then
44944: LD_VAR 0 2
44948: IFFALSE 45036
// begin for i := 1 to list [ 1 ] do
44950: LD_ADDR_VAR 0 4
44954: PUSH
44955: DOUBLE
44956: LD_INT 1
44958: DEC
44959: ST_TO_ADDR
44960: LD_VAR 0 5
44964: PUSH
44965: LD_INT 1
44967: ARRAY
44968: PUSH
44969: FOR_TO
44970: IFFALSE 45032
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44972: LD_ADDR_VAR 0 3
44976: PUSH
44977: LD_VAR 0 3
44981: PPUSH
44982: LD_VAR 0 3
44986: PUSH
44987: LD_INT 1
44989: PLUS
44990: PPUSH
44991: LD_VAR 0 5
44995: PUSH
44996: LD_INT 1
44998: ARRAY
44999: PUSH
45000: LD_VAR 0 4
45004: ARRAY
45005: PUSH
45006: LD_VAR 0 5
45010: PUSH
45011: LD_INT 2
45013: ARRAY
45014: PUSH
45015: LD_VAR 0 4
45019: ARRAY
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PPUSH
45025: CALL_OW 1
45029: ST_TO_ADDR
45030: GO 44969
45032: POP
45033: POP
// exit ;
45034: GO 45074
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45036: LD_ADDR_VAR 0 3
45040: PUSH
45041: LD_VAR 0 5
45045: PUSH
45046: LD_INT 1
45048: ARRAY
45049: PUSH
45050: LD_INT 1
45052: ARRAY
45053: PUSH
45054: LD_VAR 0 5
45058: PUSH
45059: LD_INT 2
45061: ARRAY
45062: PUSH
45063: LD_INT 1
45065: ARRAY
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: EMPTY
45072: LIST
45073: ST_TO_ADDR
// end ;
45074: LD_VAR 0 3
45078: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45079: LD_INT 0
45081: PPUSH
45082: PPUSH
// list := AreaToList ( area , 0 ) ;
45083: LD_ADDR_VAR 0 4
45087: PUSH
45088: LD_VAR 0 1
45092: PPUSH
45093: LD_INT 0
45095: PPUSH
45096: CALL_OW 517
45100: ST_TO_ADDR
// if not list then
45101: LD_VAR 0 4
45105: NOT
45106: IFFALSE 45110
// exit ;
45108: GO 45151
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45110: LD_ADDR_VAR 0 3
45114: PUSH
45115: LD_VAR 0 4
45119: PUSH
45120: LD_INT 1
45122: ARRAY
45123: PUSH
45124: LD_INT 1
45126: ARRAY
45127: PUSH
45128: LD_VAR 0 4
45132: PUSH
45133: LD_INT 2
45135: ARRAY
45136: PUSH
45137: LD_INT 1
45139: ARRAY
45140: PUSH
45141: LD_VAR 0 2
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: LIST
45150: ST_TO_ADDR
// end ;
45151: LD_VAR 0 3
45155: RET
// export function First ( array ) ; begin
45156: LD_INT 0
45158: PPUSH
// if not array then
45159: LD_VAR 0 1
45163: NOT
45164: IFFALSE 45168
// exit ;
45166: GO 45182
// result := array [ 1 ] ;
45168: LD_ADDR_VAR 0 2
45172: PUSH
45173: LD_VAR 0 1
45177: PUSH
45178: LD_INT 1
45180: ARRAY
45181: ST_TO_ADDR
// end ;
45182: LD_VAR 0 2
45186: RET
// export function Last ( array ) ; begin
45187: LD_INT 0
45189: PPUSH
// if not array then
45190: LD_VAR 0 1
45194: NOT
45195: IFFALSE 45199
// exit ;
45197: GO 45215
// result := array [ array ] ;
45199: LD_ADDR_VAR 0 2
45203: PUSH
45204: LD_VAR 0 1
45208: PUSH
45209: LD_VAR 0 1
45213: ARRAY
45214: ST_TO_ADDR
// end ;
45215: LD_VAR 0 2
45219: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45220: LD_INT 0
45222: PPUSH
45223: PPUSH
// result := [ ] ;
45224: LD_ADDR_VAR 0 5
45228: PUSH
45229: EMPTY
45230: ST_TO_ADDR
// if not array then
45231: LD_VAR 0 1
45235: NOT
45236: IFFALSE 45240
// exit ;
45238: GO 45352
// for i := 1 to array do
45240: LD_ADDR_VAR 0 6
45244: PUSH
45245: DOUBLE
45246: LD_INT 1
45248: DEC
45249: ST_TO_ADDR
45250: LD_VAR 0 1
45254: PUSH
45255: FOR_TO
45256: IFFALSE 45350
// if array [ i ] [ index ] = value then
45258: LD_VAR 0 1
45262: PUSH
45263: LD_VAR 0 6
45267: ARRAY
45268: PUSH
45269: LD_VAR 0 2
45273: ARRAY
45274: PUSH
45275: LD_VAR 0 3
45279: EQUAL
45280: IFFALSE 45348
// begin if indexColumn then
45282: LD_VAR 0 4
45286: IFFALSE 45322
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45288: LD_ADDR_VAR 0 5
45292: PUSH
45293: LD_VAR 0 5
45297: PPUSH
45298: LD_VAR 0 1
45302: PUSH
45303: LD_VAR 0 6
45307: ARRAY
45308: PUSH
45309: LD_VAR 0 4
45313: ARRAY
45314: PPUSH
45315: CALL 40540 0 2
45319: ST_TO_ADDR
45320: GO 45348
// result := Join ( result , array [ i ] ) ;
45322: LD_ADDR_VAR 0 5
45326: PUSH
45327: LD_VAR 0 5
45331: PPUSH
45332: LD_VAR 0 1
45336: PUSH
45337: LD_VAR 0 6
45341: ARRAY
45342: PPUSH
45343: CALL 40540 0 2
45347: ST_TO_ADDR
// end ;
45348: GO 45255
45350: POP
45351: POP
// end ;
45352: LD_VAR 0 5
45356: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45357: LD_INT 0
45359: PPUSH
// if not vehicles or not parkingPoint then
45360: LD_VAR 0 1
45364: NOT
45365: PUSH
45366: LD_VAR 0 2
45370: NOT
45371: OR
45372: IFFALSE 45376
// exit ;
45374: GO 45474
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45376: LD_ADDR_VAR 0 1
45380: PUSH
45381: LD_VAR 0 1
45385: PPUSH
45386: LD_INT 50
45388: PUSH
45389: EMPTY
45390: LIST
45391: PUSH
45392: LD_INT 3
45394: PUSH
45395: LD_INT 92
45397: PUSH
45398: LD_VAR 0 2
45402: PUSH
45403: LD_INT 1
45405: ARRAY
45406: PUSH
45407: LD_VAR 0 2
45411: PUSH
45412: LD_INT 2
45414: ARRAY
45415: PUSH
45416: LD_INT 8
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PPUSH
45433: CALL_OW 72
45437: ST_TO_ADDR
// if not vehicles then
45438: LD_VAR 0 1
45442: NOT
45443: IFFALSE 45447
// exit ;
45445: GO 45474
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45447: LD_VAR 0 1
45451: PPUSH
45452: LD_VAR 0 2
45456: PUSH
45457: LD_INT 1
45459: ARRAY
45460: PPUSH
45461: LD_VAR 0 2
45465: PUSH
45466: LD_INT 2
45468: ARRAY
45469: PPUSH
45470: CALL_OW 111
// end ;
45474: LD_VAR 0 3
45478: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45479: LD_INT 0
45481: PPUSH
45482: PPUSH
45483: PPUSH
// if not side or not area then
45484: LD_VAR 0 1
45488: NOT
45489: PUSH
45490: LD_VAR 0 2
45494: NOT
45495: OR
45496: IFFALSE 45500
// exit ;
45498: GO 45619
// tmp := AreaToList ( area , 0 ) ;
45500: LD_ADDR_VAR 0 5
45504: PUSH
45505: LD_VAR 0 2
45509: PPUSH
45510: LD_INT 0
45512: PPUSH
45513: CALL_OW 517
45517: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45518: LD_ADDR_VAR 0 4
45522: PUSH
45523: DOUBLE
45524: LD_INT 1
45526: DEC
45527: ST_TO_ADDR
45528: LD_VAR 0 5
45532: PUSH
45533: LD_INT 1
45535: ARRAY
45536: PUSH
45537: FOR_TO
45538: IFFALSE 45617
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45540: LD_VAR 0 5
45544: PUSH
45545: LD_INT 1
45547: ARRAY
45548: PUSH
45549: LD_VAR 0 4
45553: ARRAY
45554: PPUSH
45555: LD_VAR 0 5
45559: PUSH
45560: LD_INT 2
45562: ARRAY
45563: PUSH
45564: LD_VAR 0 4
45568: ARRAY
45569: PPUSH
45570: CALL_OW 351
45574: IFFALSE 45615
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45576: LD_VAR 0 5
45580: PUSH
45581: LD_INT 1
45583: ARRAY
45584: PUSH
45585: LD_VAR 0 4
45589: ARRAY
45590: PPUSH
45591: LD_VAR 0 5
45595: PUSH
45596: LD_INT 2
45598: ARRAY
45599: PUSH
45600: LD_VAR 0 4
45604: ARRAY
45605: PPUSH
45606: LD_VAR 0 1
45610: PPUSH
45611: CALL_OW 244
// end ;
45615: GO 45537
45617: POP
45618: POP
// end ; end_of_file
45619: LD_VAR 0 3
45623: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45624: LD_INT 0
45626: PPUSH
45627: PPUSH
// disable ( mpActive ) ;
45628: LD_INT 100
45630: DISABLE_MARKED
// disable ( mpWin ) ;
45631: LD_INT 101
45633: DISABLE_MARKED
// disable ( mpLose ) ;
45634: LD_INT 102
45636: DISABLE_MARKED
// mpGameType := 0 ;
45637: LD_ADDR_EXP 1
45641: PUSH
45642: LD_INT 0
45644: ST_TO_ADDR
// mpGameSettings := [ ] ;
45645: LD_ADDR_EXP 4
45649: PUSH
45650: EMPTY
45651: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45652: LD_ADDR_EXP 2
45656: PUSH
45657: EMPTY
45658: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45659: LD_ADDR_EXP 3
45663: PUSH
45664: EMPTY
45665: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45666: LD_ADDR_EXP 27
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45681: LD_ADDR_EXP 10
45685: PUSH
45686: EMPTY
45687: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45688: LD_ADDR_EXP 11
45692: PUSH
45693: EMPTY
45694: ST_TO_ADDR
// mpDepots := [ ] ;
45695: LD_ADDR_EXP 12
45699: PUSH
45700: EMPTY
45701: ST_TO_ADDR
// mpBuildings := [ ] ;
45702: LD_ADDR_EXP 15
45706: PUSH
45707: EMPTY
45708: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45709: LD_ADDR_EXP 16
45713: PUSH
45714: EMPTY
45715: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45716: LD_ADDR_EXP 17
45720: PUSH
45721: EMPTY
45722: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45723: LD_ADDR_EXP 18
45727: PUSH
45728: EMPTY
45729: ST_TO_ADDR
// mpStartingResources := [ ] ;
45730: LD_ADDR_EXP 13
45734: PUSH
45735: EMPTY
45736: ST_TO_ADDR
// mpStartPos := [ ] ;
45737: LD_ADDR_EXP 19
45741: PUSH
45742: EMPTY
45743: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45744: LD_ADDR_EXP 20
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45753: LD_ADDR_EXP 21
45757: PUSH
45758: EMPTY
45759: ST_TO_ADDR
// mpApemans := [ ] ;
45760: LD_ADDR_EXP 28
45764: PUSH
45765: EMPTY
45766: ST_TO_ADDR
// mpApemansArea := [ ] ;
45767: LD_ADDR_EXP 29
45771: PUSH
45772: EMPTY
45773: ST_TO_ADDR
// mpRespawn := [ ] ;
45774: LD_ADDR_EXP 30
45778: PUSH
45779: EMPTY
45780: ST_TO_ADDR
// mpKingArea := 0 ;
45781: LD_ADDR_EXP 31
45785: PUSH
45786: LD_INT 0
45788: ST_TO_ADDR
// mpPoints := [ ] ;
45789: LD_ADDR_EXP 32
45793: PUSH
45794: EMPTY
45795: ST_TO_ADDR
// mpVehicles := 0 ;
45796: LD_ADDR_EXP 33
45800: PUSH
45801: LD_INT 0
45803: ST_TO_ADDR
// mpShipments := 0 ;
45804: LD_ADDR_EXP 25
45808: PUSH
45809: LD_INT 0
45811: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45812: LD_ADDR_EXP 37
45816: PUSH
45817: EMPTY
45818: PUSH
45819: EMPTY
45820: PUSH
45821: EMPTY
45822: PUSH
45823: EMPTY
45824: PUSH
45825: EMPTY
45826: PUSH
45827: EMPTY
45828: PUSH
45829: EMPTY
45830: PUSH
45831: EMPTY
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: ST_TO_ADDR
// mpEmissions := 0 ;
45843: LD_ADDR_EXP 34
45847: PUSH
45848: LD_INT 0
45850: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45851: LD_ADDR_EXP 23
45855: PUSH
45856: LD_INT 3
45858: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45859: LD_ADDR_EXP 22
45863: PUSH
45864: LD_INT 15
45866: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45867: LD_ADDR_EXP 35
45871: PUSH
45872: LD_INT 0
45874: ST_TO_ADDR
// mpGameActive := false ;
45875: LD_ADDR_EXP 36
45879: PUSH
45880: LD_INT 0
45882: ST_TO_ADDR
// mpBlockRespThread := false ;
45883: LD_ADDR_EXP 38
45887: PUSH
45888: LD_INT 0
45890: ST_TO_ADDR
// for i := 1 to 32 do
45891: LD_ADDR_VAR 0 2
45895: PUSH
45896: DOUBLE
45897: LD_INT 1
45899: DEC
45900: ST_TO_ADDR
45901: LD_INT 32
45903: PUSH
45904: FOR_TO
45905: IFFALSE 45932
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
45907: LD_ADDR_EXP 4
45911: PUSH
45912: LD_EXP 4
45916: PPUSH
45917: LD_VAR 0 2
45921: PPUSH
45922: LD_INT 0
45924: PPUSH
45925: CALL_OW 1
45929: ST_TO_ADDR
45930: GO 45904
45932: POP
45933: POP
// end ;
45934: LD_VAR 0 1
45938: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
45939: LD_INT 0
45941: PPUSH
45942: PPUSH
45943: PPUSH
45944: PPUSH
45945: PPUSH
45946: PPUSH
45947: PPUSH
45948: PPUSH
45949: PPUSH
45950: PPUSH
45951: PPUSH
45952: PPUSH
45953: PPUSH
45954: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
45955: LD_ADDR_VAR 0 14
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: LD_INT 2
45965: PUSH
45966: LD_INT 3
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: LIST
45973: ST_TO_ADDR
// for i in gameTypes do
45974: LD_ADDR_VAR 0 2
45978: PUSH
45979: LD_VAR 0 14
45983: PUSH
45984: FOR_IN
45985: IFFALSE 45994
// disable ( i ) ;
45987: LD_VAR 0 2
45991: DISABLE_MARKED
45992: GO 45984
45994: POP
45995: POP
// if Multiplayer then
45996: LD_OWVAR 4
46000: IFFALSE 46184
// begin mpGameType := mp_game_type ;
46002: LD_ADDR_EXP 1
46006: PUSH
46007: LD_OWVAR 6
46011: ST_TO_ADDR
// your_side := mp_player_side ;
46012: LD_ADDR_OWVAR 2
46016: PUSH
46017: LD_OWVAR 7
46021: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46022: LD_ADDR_EXP 5
46026: PUSH
46027: LD_OWVAR 17
46031: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46032: LD_ADDR_EXP 6
46036: PUSH
46037: LD_OWVAR 15
46041: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46042: LD_ADDR_EXP 7
46046: PUSH
46047: LD_OWVAR 16
46051: ST_TO_ADDR
// mpTeams := mp_teams ;
46052: LD_ADDR_EXP 8
46056: PUSH
46057: LD_OWVAR 12
46061: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46062: LD_ADDR_VAR 0 2
46066: PUSH
46067: DOUBLE
46068: LD_INT 1
46070: DEC
46071: ST_TO_ADDR
46072: LD_EXP 2
46076: PPUSH
46077: CALL 4931 0 1
46081: PUSH
46082: FOR_TO
46083: IFFALSE 46159
// begin setting := mpGameSettingsKeys [ i ] ;
46085: LD_ADDR_VAR 0 12
46089: PUSH
46090: LD_EXP 2
46094: PUSH
46095: LD_VAR 0 2
46099: ARRAY
46100: ST_TO_ADDR
// if setting then
46101: LD_VAR 0 12
46105: IFFALSE 46157
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46107: LD_ADDR_EXP 4
46111: PUSH
46112: LD_EXP 4
46116: PPUSH
46117: LD_VAR 0 2
46121: PPUSH
46122: LD_EXP 3
46126: PUSH
46127: LD_VAR 0 2
46131: ARRAY
46132: PUSH
46133: LD_VAR 0 2
46137: PUSH
46138: LD_INT 1
46140: MINUS
46141: PPUSH
46142: CALL_OW 426
46146: PUSH
46147: LD_INT 1
46149: PLUS
46150: ARRAY
46151: PPUSH
46152: CALL_OW 1
46156: ST_TO_ADDR
// end ;
46157: GO 46082
46159: POP
46160: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46161: LD_ADDR_EXP 9
46165: PUSH
46166: LD_EXP 6
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: EMPTY
46175: LIST
46176: DIFF
46177: PUSH
46178: LD_INT 1
46180: GREATER
46181: ST_TO_ADDR
// end else
46182: GO 46184
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46184: LD_EXP 1
46188: PPUSH
46189: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
46193: LD_EXP 16
46197: PPUSH
46198: CALL 4931 0 1
46202: IFFALSE 46233
// begin for i in mpMarkedAreas do
46204: LD_ADDR_VAR 0 2
46208: PUSH
46209: LD_EXP 16
46213: PUSH
46214: FOR_IN
46215: IFFALSE 46231
// SetAreaMapShow ( i , 0 ) ;
46217: LD_VAR 0 2
46221: PPUSH
46222: LD_INT 0
46224: PPUSH
46225: CALL_OW 424
46229: GO 46214
46231: POP
46232: POP
// end ; for i := 1 to 8 do
46233: LD_ADDR_VAR 0 2
46237: PUSH
46238: DOUBLE
46239: LD_INT 1
46241: DEC
46242: ST_TO_ADDR
46243: LD_INT 8
46245: PUSH
46246: FOR_TO
46247: IFFALSE 47463
// begin if not mpSidePositions [ i ] then
46249: LD_EXP 5
46253: PUSH
46254: LD_VAR 0 2
46258: ARRAY
46259: NOT
46260: IFFALSE 46264
// continue ;
46262: GO 46246
// side := i ;
46264: LD_ADDR_VAR 0 7
46268: PUSH
46269: LD_VAR 0 2
46273: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46274: LD_ADDR_VAR 0 9
46278: PUSH
46279: LD_EXP 7
46283: PUSH
46284: LD_VAR 0 2
46288: ARRAY
46289: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46290: LD_ADDR_VAR 0 8
46294: PUSH
46295: LD_EXP 5
46299: PUSH
46300: LD_VAR 0 2
46304: ARRAY
46305: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46306: LD_EXP 10
46310: PPUSH
46311: CALL 4931 0 1
46315: IFFALSE 46392
// begin for j in mpOilDeposits [ pos ] do
46317: LD_ADDR_VAR 0 3
46321: PUSH
46322: LD_EXP 10
46326: PUSH
46327: LD_VAR 0 8
46331: ARRAY
46332: PUSH
46333: FOR_IN
46334: IFFALSE 46390
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46336: LD_VAR 0 3
46340: PUSH
46341: LD_INT 1
46343: ARRAY
46344: PPUSH
46345: LD_VAR 0 3
46349: PUSH
46350: LD_INT 2
46352: ARRAY
46353: PPUSH
46354: LD_INT 2
46356: PPUSH
46357: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46361: LD_VAR 0 3
46365: PUSH
46366: LD_INT 1
46368: ARRAY
46369: PPUSH
46370: LD_VAR 0 3
46374: PUSH
46375: LD_INT 2
46377: ARRAY
46378: PPUSH
46379: LD_VAR 0 7
46383: PPUSH
46384: CALL_OW 441
// end ;
46388: GO 46333
46390: POP
46391: POP
// end ; if Count ( mpSibDeposits ) then
46392: LD_EXP 11
46396: PPUSH
46397: CALL 4931 0 1
46401: IFFALSE 46478
// begin for j in mpSibDeposits [ pos ] do
46403: LD_ADDR_VAR 0 3
46407: PUSH
46408: LD_EXP 11
46412: PUSH
46413: LD_VAR 0 8
46417: ARRAY
46418: PUSH
46419: FOR_IN
46420: IFFALSE 46476
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46422: LD_VAR 0 3
46426: PUSH
46427: LD_INT 1
46429: ARRAY
46430: PPUSH
46431: LD_VAR 0 3
46435: PUSH
46436: LD_INT 2
46438: ARRAY
46439: PPUSH
46440: LD_INT 3
46442: PPUSH
46443: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46447: LD_VAR 0 3
46451: PUSH
46452: LD_INT 1
46454: ARRAY
46455: PPUSH
46456: LD_VAR 0 3
46460: PUSH
46461: LD_INT 2
46463: ARRAY
46464: PPUSH
46465: LD_VAR 0 7
46469: PPUSH
46470: CALL_OW 441
// end ;
46474: GO 46419
46476: POP
46477: POP
// end ; InitBc ;
46478: CALL_OW 21
// InitUc ;
46482: CALL_OW 18
// uc_side := side ;
46486: LD_ADDR_OWVAR 20
46490: PUSH
46491: LD_VAR 0 7
46495: ST_TO_ADDR
// uc_nation := nation ;
46496: LD_ADDR_OWVAR 21
46500: PUSH
46501: LD_VAR 0 9
46505: ST_TO_ADDR
// if Count ( mpDepots ) then
46506: LD_EXP 12
46510: PPUSH
46511: CALL 4931 0 1
46515: IFFALSE 46685
// begin bc_level := 0 ;
46517: LD_ADDR_OWVAR 43
46521: PUSH
46522: LD_INT 0
46524: ST_TO_ADDR
// bc_type := b_depot ;
46525: LD_ADDR_OWVAR 42
46529: PUSH
46530: LD_INT 0
46532: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46533: LD_ADDR_VAR 0 4
46537: PUSH
46538: LD_EXP 12
46542: PUSH
46543: LD_VAR 0 8
46547: ARRAY
46548: PUSH
46549: LD_INT 1
46551: ARRAY
46552: PPUSH
46553: LD_EXP 12
46557: PUSH
46558: LD_VAR 0 8
46562: ARRAY
46563: PUSH
46564: LD_INT 2
46566: ARRAY
46567: PPUSH
46568: LD_EXP 12
46572: PUSH
46573: LD_VAR 0 8
46577: ARRAY
46578: PUSH
46579: LD_INT 3
46581: ARRAY
46582: PPUSH
46583: CALL_OW 47
46587: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46588: LD_VAR 0 4
46592: PPUSH
46593: LD_STRING @
46595: PUSH
46596: LD_VAR 0 7
46600: STR
46601: PPUSH
46602: CALL_OW 500
// SetTag ( b , side ) ;
46606: LD_VAR 0 4
46610: PPUSH
46611: LD_VAR 0 7
46615: PPUSH
46616: CALL_OW 109
// if Count ( mpStartingResources ) then
46620: LD_EXP 13
46624: PPUSH
46625: CALL 4931 0 1
46629: IFFALSE 46683
// begin for j := 1 to mpStartingResources do
46631: LD_ADDR_VAR 0 3
46635: PUSH
46636: DOUBLE
46637: LD_INT 1
46639: DEC
46640: ST_TO_ADDR
46641: LD_EXP 13
46645: PUSH
46646: FOR_TO
46647: IFFALSE 46681
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46649: LD_VAR 0 4
46653: PPUSH
46654: CALL_OW 274
46658: PPUSH
46659: LD_VAR 0 3
46663: PPUSH
46664: LD_EXP 13
46668: PUSH
46669: LD_VAR 0 3
46673: ARRAY
46674: PPUSH
46675: CALL_OW 277
46679: GO 46646
46681: POP
46682: POP
// end ; end else
46683: GO 46832
// if Count ( mpStartingResources ) then
46685: LD_EXP 13
46689: PPUSH
46690: CALL 4931 0 1
46694: IFFALSE 46832
// begin for j := 1 to mpStartingResources do
46696: LD_ADDR_VAR 0 3
46700: PUSH
46701: DOUBLE
46702: LD_INT 1
46704: DEC
46705: ST_TO_ADDR
46706: LD_EXP 13
46710: PUSH
46711: FOR_TO
46712: IFFALSE 46830
// begin resources := mpStartingResources [ j ] ;
46714: LD_ADDR_VAR 0 13
46718: PUSH
46719: LD_EXP 13
46723: PUSH
46724: LD_VAR 0 3
46728: ARRAY
46729: ST_TO_ADDR
// repeat if resources >= 50 then
46730: LD_VAR 0 13
46734: PUSH
46735: LD_INT 50
46737: GREATEREQUAL
46738: IFFALSE 46784
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46740: LD_VAR 0 3
46744: PPUSH
46745: LD_INT 5
46747: PPUSH
46748: LD_VAR 0 5
46752: PPUSH
46753: LD_VAR 0 6
46757: PPUSH
46758: LD_INT 4
46760: PPUSH
46761: LD_INT 0
46763: PPUSH
46764: CALL_OW 60
// resources := resources - 50 ;
46768: LD_ADDR_VAR 0 13
46772: PUSH
46773: LD_VAR 0 13
46777: PUSH
46778: LD_INT 50
46780: MINUS
46781: ST_TO_ADDR
// end else
46782: GO 46818
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46784: LD_VAR 0 3
46788: PPUSH
46789: LD_VAR 0 13
46793: PUSH
46794: LD_INT 10
46796: DIV
46797: PPUSH
46798: LD_VAR 0 5
46802: PPUSH
46803: LD_VAR 0 6
46807: PPUSH
46808: LD_INT 4
46810: PPUSH
46811: LD_INT 0
46813: PPUSH
46814: CALL_OW 60
// until resources <= 0 ;
46818: LD_VAR 0 13
46822: PUSH
46823: LD_INT 0
46825: LESSEQUAL
46826: IFFALSE 46730
// end ;
46828: GO 46711
46830: POP
46831: POP
// end ; if Count ( mpBuildings ) then
46832: LD_EXP 15
46836: PPUSH
46837: CALL 4931 0 1
46841: IFFALSE 46919
// begin for j in mpBuildings [ pos ] do
46843: LD_ADDR_VAR 0 3
46847: PUSH
46848: LD_EXP 15
46852: PUSH
46853: LD_VAR 0 8
46857: ARRAY
46858: PUSH
46859: FOR_IN
46860: IFFALSE 46917
// begin bc_level := 0 ;
46862: LD_ADDR_OWVAR 43
46866: PUSH
46867: LD_INT 0
46869: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46870: LD_ADDR_OWVAR 42
46874: PUSH
46875: LD_VAR 0 3
46879: PUSH
46880: LD_INT 1
46882: ARRAY
46883: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46884: LD_VAR 0 3
46888: PUSH
46889: LD_INT 2
46891: ARRAY
46892: PPUSH
46893: LD_VAR 0 3
46897: PUSH
46898: LD_INT 3
46900: ARRAY
46901: PPUSH
46902: LD_VAR 0 3
46906: PUSH
46907: LD_INT 4
46909: ARRAY
46910: PPUSH
46911: CALL_OW 47
// end ;
46915: GO 46859
46917: POP
46918: POP
// end ; if mpBattleFlag > - 1 then
46919: LD_EXP 20
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: GREATER
46928: IFFALSE 47087
// begin x := mpStartPos [ pos ] [ 1 ] ;
46930: LD_ADDR_VAR 0 5
46934: PUSH
46935: LD_EXP 19
46939: PUSH
46940: LD_VAR 0 8
46944: ARRAY
46945: PUSH
46946: LD_INT 1
46948: ARRAY
46949: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
46950: LD_ADDR_VAR 0 6
46954: PUSH
46955: LD_EXP 19
46959: PUSH
46960: LD_VAR 0 8
46964: ARRAY
46965: PUSH
46966: LD_INT 2
46968: ARRAY
46969: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
46970: LD_VAR 0 5
46974: PPUSH
46975: LD_VAR 0 6
46979: PPUSH
46980: LD_INT 12
46982: PPUSH
46983: LD_INT 2
46985: PPUSH
46986: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
46990: LD_ADDR_EXP 21
46994: PUSH
46995: LD_EXP 21
46999: PPUSH
47000: LD_VAR 0 7
47004: PPUSH
47005: LD_VAR 0 7
47009: PPUSH
47010: LD_VAR 0 5
47014: PPUSH
47015: LD_VAR 0 6
47019: PPUSH
47020: LD_INT 1
47022: PUSH
47023: LD_INT 100
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 2
47032: PUSH
47033: LD_INT 70
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 3
47042: PUSH
47043: LD_INT 40
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 10
47052: PUSH
47053: LD_INT 25
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 20
47062: PUSH
47063: LD_INT 100
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: PPUSH
47077: CALL_OW 418
47081: PPUSH
47082: CALL_OW 1
47086: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47087: LD_EXP 24
47091: PUSH
47092: LD_INT 20
47094: PPUSH
47095: LD_VAR 0 7
47099: PPUSH
47100: CALL_OW 321
47104: PUSH
47105: LD_INT 1
47107: EQUAL
47108: AND
47109: IFFALSE 47126
// SetTech ( tech_SibDet , side , state_researched ) ;
47111: LD_INT 20
47113: PPUSH
47114: LD_VAR 0 7
47118: PPUSH
47119: LD_INT 2
47121: PPUSH
47122: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47126: LD_INT 24
47128: PPUSH
47129: LD_VAR 0 7
47133: PPUSH
47134: LD_INT 0
47136: PPUSH
47137: CALL_OW 322
// if mpSibBomb = 1 then
47141: LD_EXP 26
47145: PUSH
47146: LD_INT 1
47148: EQUAL
47149: IFFALSE 47168
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47151: LD_INT 25
47153: PPUSH
47154: LD_VAR 0 7
47158: PPUSH
47159: LD_INT 1
47161: PPUSH
47162: CALL_OW 322
// end else
47166: GO 47183
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47168: LD_INT 25
47170: PPUSH
47171: LD_VAR 0 7
47175: PPUSH
47176: LD_INT 0
47178: PPUSH
47179: CALL_OW 322
// end ; if mpVehicles then
47183: LD_EXP 33
47187: IFFALSE 47286
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47189: LD_ADDR_VAR 0 3
47193: PUSH
47194: LD_VAR 0 7
47198: PPUSH
47199: LD_VAR 0 9
47203: PPUSH
47204: LD_EXP 33
47208: PPUSH
47209: CALL 48373 0 3
47213: PUSH
47214: FOR_IN
47215: IFFALSE 47284
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47217: LD_VAR 0 3
47221: PPUSH
47222: LD_INT 0
47224: PPUSH
47225: LD_INT 5
47227: PPUSH
47228: CALL_OW 12
47232: PPUSH
47233: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47237: LD_VAR 0 3
47241: PPUSH
47242: LD_EXP 19
47246: PUSH
47247: LD_VAR 0 8
47251: ARRAY
47252: PUSH
47253: LD_INT 1
47255: ARRAY
47256: PPUSH
47257: LD_EXP 19
47261: PUSH
47262: LD_VAR 0 8
47266: ARRAY
47267: PUSH
47268: LD_INT 2
47270: ARRAY
47271: PPUSH
47272: LD_INT 12
47274: PPUSH
47275: LD_INT 0
47277: PPUSH
47278: CALL_OW 50
// end ;
47282: GO 47214
47284: POP
47285: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47286: LD_ADDR_VAR 0 11
47290: PUSH
47291: LD_VAR 0 7
47295: PPUSH
47296: LD_VAR 0 9
47300: PPUSH
47301: LD_EXP 22
47305: PPUSH
47306: LD_EXP 23
47310: PPUSH
47311: CALL 47875 0 4
47315: ST_TO_ADDR
// for j in team do
47316: LD_ADDR_VAR 0 3
47320: PUSH
47321: LD_VAR 0 11
47325: PUSH
47326: FOR_IN
47327: IFFALSE 47376
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47329: LD_VAR 0 3
47333: PPUSH
47334: LD_EXP 19
47338: PUSH
47339: LD_VAR 0 8
47343: ARRAY
47344: PUSH
47345: LD_INT 1
47347: ARRAY
47348: PPUSH
47349: LD_EXP 19
47353: PUSH
47354: LD_VAR 0 8
47358: ARRAY
47359: PUSH
47360: LD_INT 2
47362: ARRAY
47363: PPUSH
47364: LD_INT 12
47366: PPUSH
47367: LD_INT 0
47369: PPUSH
47370: CALL_OW 50
47374: GO 47326
47376: POP
47377: POP
// if mpApemans then
47378: LD_EXP 28
47382: IFFALSE 47461
// begin for j := 1 to mpApemans do
47384: LD_ADDR_VAR 0 3
47388: PUSH
47389: DOUBLE
47390: LD_INT 1
47392: DEC
47393: ST_TO_ADDR
47394: LD_EXP 28
47398: PUSH
47399: FOR_TO
47400: IFFALSE 47459
// begin PrepareApeman ( - 5 ) ;
47402: LD_INT 5
47404: NEG
47405: PPUSH
47406: CALL 36788 0 1
// ape := CreateHuman ;
47410: LD_ADDR_VAR 0 10
47414: PUSH
47415: CALL_OW 44
47419: ST_TO_ADDR
// SetTag ( ape , side ) ;
47420: LD_VAR 0 10
47424: PPUSH
47425: LD_VAR 0 7
47429: PPUSH
47430: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47434: LD_VAR 0 10
47438: PPUSH
47439: LD_EXP 29
47443: PUSH
47444: LD_VAR 0 8
47448: ARRAY
47449: PPUSH
47450: LD_INT 0
47452: PPUSH
47453: CALL_OW 49
// end ;
47457: GO 47399
47459: POP
47460: POP
// end ; end ;
47461: GO 46246
47463: POP
47464: POP
// if not mpTeamGame then
47465: LD_EXP 9
47469: NOT
47470: IFFALSE 47568
// begin for i := 1 to 8 do
47472: LD_ADDR_VAR 0 2
47476: PUSH
47477: DOUBLE
47478: LD_INT 1
47480: DEC
47481: ST_TO_ADDR
47482: LD_INT 8
47484: PUSH
47485: FOR_TO
47486: IFFALSE 47564
// for j := 1 to 8 do
47488: LD_ADDR_VAR 0 3
47492: PUSH
47493: DOUBLE
47494: LD_INT 1
47496: DEC
47497: ST_TO_ADDR
47498: LD_INT 8
47500: PUSH
47501: FOR_TO
47502: IFFALSE 47560
// if i <> j then
47504: LD_VAR 0 2
47508: PUSH
47509: LD_VAR 0 3
47513: NONEQUAL
47514: IFFALSE 47538
// SetAttitude ( i , j , att_neutral , true ) else
47516: LD_VAR 0 2
47520: PPUSH
47521: LD_VAR 0 3
47525: PPUSH
47526: LD_INT 0
47528: PPUSH
47529: LD_INT 1
47531: PPUSH
47532: CALL_OW 80
47536: GO 47558
// SetAttitude ( i , j , att_friend , true ) ;
47538: LD_VAR 0 2
47542: PPUSH
47543: LD_VAR 0 3
47547: PPUSH
47548: LD_INT 1
47550: PPUSH
47551: LD_INT 1
47553: PPUSH
47554: CALL_OW 80
47558: GO 47501
47560: POP
47561: POP
47562: GO 47485
47564: POP
47565: POP
// end else
47566: GO 47743
// begin if mpSharedVision then
47568: LD_EXP 14
47572: IFFALSE 47637
// begin for i in mpTeams do
47574: LD_ADDR_VAR 0 2
47578: PUSH
47579: LD_EXP 8
47583: PUSH
47584: FOR_IN
47585: IFFALSE 47635
// for j := 2 to i do
47587: LD_ADDR_VAR 0 3
47591: PUSH
47592: DOUBLE
47593: LD_INT 2
47595: DEC
47596: ST_TO_ADDR
47597: LD_VAR 0 2
47601: PUSH
47602: FOR_TO
47603: IFFALSE 47631
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47605: LD_VAR 0 2
47609: PUSH
47610: LD_VAR 0 3
47614: ARRAY
47615: PPUSH
47616: LD_VAR 0 2
47620: PUSH
47621: LD_INT 1
47623: ARRAY
47624: PPUSH
47625: CALL_OW 343
47629: GO 47602
47631: POP
47632: POP
47633: GO 47584
47635: POP
47636: POP
// end ; for i := 1 to 8 do
47637: LD_ADDR_VAR 0 2
47641: PUSH
47642: DOUBLE
47643: LD_INT 1
47645: DEC
47646: ST_TO_ADDR
47647: LD_INT 8
47649: PUSH
47650: FOR_TO
47651: IFFALSE 47741
// for j := 1 to 8 do
47653: LD_ADDR_VAR 0 3
47657: PUSH
47658: DOUBLE
47659: LD_INT 1
47661: DEC
47662: ST_TO_ADDR
47663: LD_INT 8
47665: PUSH
47666: FOR_TO
47667: IFFALSE 47737
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47669: LD_EXP 6
47673: PUSH
47674: LD_VAR 0 2
47678: ARRAY
47679: PUSH
47680: LD_EXP 6
47684: PUSH
47685: LD_VAR 0 3
47689: ARRAY
47690: EQUAL
47691: IFFALSE 47715
// SetAttitude ( i , j , att_friend , true ) else
47693: LD_VAR 0 2
47697: PPUSH
47698: LD_VAR 0 3
47702: PPUSH
47703: LD_INT 1
47705: PPUSH
47706: LD_INT 1
47708: PPUSH
47709: CALL_OW 80
47713: GO 47735
// SetAttitude ( i , j , att_enemy , true ) ;
47715: LD_VAR 0 2
47719: PPUSH
47720: LD_VAR 0 3
47724: PPUSH
47725: LD_INT 2
47727: PPUSH
47728: LD_INT 1
47730: PPUSH
47731: CALL_OW 80
47735: GO 47666
47737: POP
47738: POP
47739: GO 47650
47741: POP
47742: POP
// end ; music_nat := mpSideNations [ your_side ] ;
47743: LD_ADDR_OWVAR 71
47747: PUSH
47748: LD_EXP 7
47752: PUSH
47753: LD_OWVAR 2
47757: ARRAY
47758: ST_TO_ADDR
// if IAmSpec then
47759: CALL_OW 531
47763: IFFALSE 47804
// begin FogOff ( true ) ;
47765: LD_INT 1
47767: PPUSH
47768: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47772: LD_EXP 27
47776: PUSH
47777: LD_INT 1
47779: ARRAY
47780: PUSH
47781: LD_INT 2
47783: DIV
47784: PPUSH
47785: LD_EXP 27
47789: PUSH
47790: LD_INT 2
47792: ARRAY
47793: PUSH
47794: LD_INT 2
47796: DIV
47797: PPUSH
47798: CALL_OW 86
// end else
47802: GO 47850
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47804: LD_EXP 19
47808: PUSH
47809: LD_EXP 5
47813: PUSH
47814: LD_OWVAR 2
47818: ARRAY
47819: ARRAY
47820: PUSH
47821: LD_INT 1
47823: ARRAY
47824: PPUSH
47825: LD_EXP 19
47829: PUSH
47830: LD_EXP 5
47834: PUSH
47835: LD_OWVAR 2
47839: ARRAY
47840: ARRAY
47841: PUSH
47842: LD_INT 2
47844: ARRAY
47845: PPUSH
47846: CALL_OW 86
// end ; BeginBuildUp ;
47850: CALL 48851 0 0
// enable ( mpActive ) ;
47854: LD_INT 100
47856: ENABLE_MARKED
// enable ( mpGameType ) ;
47857: LD_EXP 1
47861: ENABLE_MARKED
// mpGameActive := true ;
47862: LD_ADDR_EXP 36
47866: PUSH
47867: LD_INT 1
47869: ST_TO_ADDR
// end ;
47870: LD_VAR 0 1
47874: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
47875: LD_INT 0
47877: PPUSH
47878: PPUSH
47879: PPUSH
47880: PPUSH
// result := [ ] ;
47881: LD_ADDR_VAR 0 5
47885: PUSH
47886: EMPTY
47887: ST_TO_ADDR
// class := class_soldier ;
47888: LD_ADDR_VAR 0 8
47892: PUSH
47893: LD_INT 1
47895: ST_TO_ADDR
// uc_side := side ;
47896: LD_ADDR_OWVAR 20
47900: PUSH
47901: LD_VAR 0 1
47905: ST_TO_ADDR
// uc_nation := nation ;
47906: LD_ADDR_OWVAR 21
47910: PUSH
47911: LD_VAR 0 2
47915: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
47916: LD_ADDR_OWVAR 26
47920: PUSH
47921: LD_OWVAR 19
47925: PUSH
47926: LD_VAR 0 1
47930: ARRAY
47931: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
47932: LD_INT 1
47934: PPUSH
47935: LD_INT 2
47937: PPUSH
47938: CALL_OW 12
47942: PPUSH
47943: LD_VAR 0 8
47947: PPUSH
47948: LD_VAR 0 4
47952: PUSH
47953: LD_INT 2
47955: PLUS
47956: PPUSH
47957: CALL_OW 380
// hc_importance := 105 ;
47961: LD_ADDR_OWVAR 32
47965: PUSH
47966: LD_INT 105
47968: ST_TO_ADDR
// if Multiplayer then
47969: LD_OWVAR 4
47973: IFFALSE 48013
// begin hc_gallery := MULTIAVATARS ;
47975: LD_ADDR_OWVAR 33
47979: PUSH
47980: LD_STRING MULTIAVATARS
47982: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
47983: LD_ADDR_OWVAR 34
47987: PUSH
47988: LD_VAR 0 1
47992: PPUSH
47993: CALL_OW 525
47997: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
47998: LD_ADDR_OWVAR 27
48002: PUSH
48003: LD_VAR 0 1
48007: PPUSH
48008: CALL_OW 526
48012: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48013: LD_ADDR_VAR 0 5
48017: PUSH
48018: LD_VAR 0 5
48022: PPUSH
48023: CALL_OW 44
48027: PPUSH
48028: CALL 40540 0 2
48032: ST_TO_ADDR
// if mpTeamPreset then
48033: LD_LOC 1
48037: IFFALSE 48133
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
48039: LD_LOC 1
48043: PUSH
48044: LD_INT 1
48046: ARRAY
48047: PPUSH
48048: LD_VAR 0 5
48052: PUSH
48053: LD_VAR 0 5
48057: ARRAY
48058: PPUSH
48059: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
48063: LD_VAR 0 5
48067: PUSH
48068: LD_VAR 0 5
48072: ARRAY
48073: PPUSH
48074: LD_INT 1
48076: PPUSH
48077: LD_LOC 1
48081: PUSH
48082: LD_INT 1
48084: ARRAY
48085: PPUSH
48086: LD_INT 1
48088: PPUSH
48089: CALL_OW 260
48093: PPUSH
48094: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
48098: LD_VAR 0 5
48102: PUSH
48103: LD_VAR 0 5
48107: ARRAY
48108: PPUSH
48109: LD_INT 2
48111: PPUSH
48112: LD_LOC 1
48116: PUSH
48117: LD_INT 1
48119: ARRAY
48120: PPUSH
48121: LD_INT 2
48123: PPUSH
48124: CALL_OW 260
48128: PPUSH
48129: CALL_OW 239
// end ; InitHc_All ( ) ;
48133: CALL_OW 584
// class := 2 ;
48137: LD_ADDR_VAR 0 8
48141: PUSH
48142: LD_INT 2
48144: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48145: LD_ADDR_VAR 0 6
48149: PUSH
48150: DOUBLE
48151: LD_INT 1
48153: DEC
48154: ST_TO_ADDR
48155: LD_VAR 0 3
48159: PUSH
48160: LD_INT 1
48162: MINUS
48163: PUSH
48164: FOR_TO
48165: IFFALSE 48349
// begin PrepareHuman ( false , class , skill ) ;
48167: LD_INT 0
48169: PPUSH
48170: LD_VAR 0 8
48174: PPUSH
48175: LD_VAR 0 4
48179: PPUSH
48180: CALL_OW 380
// un := CreateHuman ;
48184: LD_ADDR_VAR 0 7
48188: PUSH
48189: CALL_OW 44
48193: ST_TO_ADDR
// result := Join ( result , un ) ;
48194: LD_ADDR_VAR 0 5
48198: PUSH
48199: LD_VAR 0 5
48203: PPUSH
48204: LD_VAR 0 7
48208: PPUSH
48209: CALL 40540 0 2
48213: ST_TO_ADDR
// if mpTeamPreset then
48214: LD_LOC 1
48218: IFFALSE 48314
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
48220: LD_LOC 1
48224: PUSH
48225: LD_VAR 0 6
48229: PUSH
48230: LD_INT 1
48232: PLUS
48233: ARRAY
48234: PPUSH
48235: LD_VAR 0 7
48239: PPUSH
48240: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
48244: LD_VAR 0 7
48248: PPUSH
48249: LD_INT 1
48251: PPUSH
48252: LD_LOC 1
48256: PUSH
48257: LD_VAR 0 6
48261: PUSH
48262: LD_INT 1
48264: PLUS
48265: ARRAY
48266: PPUSH
48267: LD_INT 1
48269: PPUSH
48270: CALL_OW 260
48274: PPUSH
48275: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
48279: LD_VAR 0 7
48283: PPUSH
48284: LD_INT 2
48286: PPUSH
48287: LD_LOC 1
48291: PUSH
48292: LD_VAR 0 6
48296: PUSH
48297: LD_INT 1
48299: PLUS
48300: ARRAY
48301: PPUSH
48302: LD_INT 2
48304: PPUSH
48305: CALL_OW 260
48309: PPUSH
48310: CALL_OW 239
// end ; class := Inc ( class ) ;
48314: LD_ADDR_VAR 0 8
48318: PUSH
48319: LD_VAR 0 8
48323: PPUSH
48324: CALL 41901 0 1
48328: ST_TO_ADDR
// if class = 5 then
48329: LD_VAR 0 8
48333: PUSH
48334: LD_INT 5
48336: EQUAL
48337: IFFALSE 48347
// class := 1 ;
48339: LD_ADDR_VAR 0 8
48343: PUSH
48344: LD_INT 1
48346: ST_TO_ADDR
// end ;
48347: GO 48164
48349: POP
48350: POP
// if not mpTeamPreset then
48351: LD_LOC 1
48355: NOT
48356: IFFALSE 48368
// mpTeamPreset := result ;
48358: LD_ADDR_LOC 1
48362: PUSH
48363: LD_VAR 0 5
48367: ST_TO_ADDR
// end ;
48368: LD_VAR 0 5
48372: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48373: LD_INT 0
48375: PPUSH
48376: PPUSH
// result := [ ] ;
48377: LD_ADDR_VAR 0 4
48381: PUSH
48382: EMPTY
48383: ST_TO_ADDR
// if not vehicles then
48384: LD_VAR 0 3
48388: NOT
48389: IFFALSE 48393
// exit ;
48391: GO 48552
// for i := 1 to vehicles [ nation ] do
48393: LD_ADDR_VAR 0 5
48397: PUSH
48398: DOUBLE
48399: LD_INT 1
48401: DEC
48402: ST_TO_ADDR
48403: LD_VAR 0 3
48407: PUSH
48408: LD_VAR 0 2
48412: ARRAY
48413: PUSH
48414: FOR_TO
48415: IFFALSE 48550
// begin uc_side := side ;
48417: LD_ADDR_OWVAR 20
48421: PUSH
48422: LD_VAR 0 1
48426: ST_TO_ADDR
// uc_nation := nation ;
48427: LD_ADDR_OWVAR 21
48431: PUSH
48432: LD_VAR 0 2
48436: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48437: LD_VAR 0 3
48441: PUSH
48442: LD_VAR 0 2
48446: ARRAY
48447: PUSH
48448: LD_VAR 0 5
48452: ARRAY
48453: PUSH
48454: LD_INT 1
48456: ARRAY
48457: PPUSH
48458: LD_VAR 0 3
48462: PUSH
48463: LD_VAR 0 2
48467: ARRAY
48468: PUSH
48469: LD_VAR 0 5
48473: ARRAY
48474: PUSH
48475: LD_INT 2
48477: ARRAY
48478: PPUSH
48479: LD_VAR 0 3
48483: PUSH
48484: LD_VAR 0 2
48488: ARRAY
48489: PUSH
48490: LD_VAR 0 5
48494: ARRAY
48495: PUSH
48496: LD_INT 3
48498: ARRAY
48499: PPUSH
48500: LD_VAR 0 3
48504: PUSH
48505: LD_VAR 0 2
48509: ARRAY
48510: PUSH
48511: LD_VAR 0 5
48515: ARRAY
48516: PUSH
48517: LD_INT 4
48519: ARRAY
48520: PPUSH
48521: LD_INT 80
48523: PPUSH
48524: CALL 7669 0 5
// result := Join ( result , CreateVehicle ) ;
48528: LD_ADDR_VAR 0 4
48532: PUSH
48533: LD_VAR 0 4
48537: PPUSH
48538: CALL_OW 45
48542: PPUSH
48543: CALL 40540 0 2
48547: ST_TO_ADDR
// end ;
48548: GO 48414
48550: POP
48551: POP
// end ;
48552: LD_VAR 0 4
48556: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48557: LD_INT 0
48559: PPUSH
48560: PPUSH
// for i in mpBattleFlags do
48561: LD_ADDR_VAR 0 3
48565: PUSH
48566: LD_EXP 21
48570: PUSH
48571: FOR_IN
48572: IFFALSE 48649
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48574: LD_VAR 0 3
48578: PPUSH
48579: LD_INT 1
48581: PUSH
48582: LD_VAR 0 1
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: LD_VAR 0 1
48598: PUSH
48599: LD_REAL  7.00000000000000E-0001
48602: MUL
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 3
48610: PUSH
48611: LD_VAR 0 1
48615: PUSH
48616: LD_REAL  4.00000000000000E-0001
48619: MUL
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 20
48627: PUSH
48628: LD_VAR 0 1
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: PPUSH
48643: CALL_OW 423
48647: GO 48571
48649: POP
48650: POP
// end ;
48651: LD_VAR 0 2
48655: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48656: LD_INT 100
48658: IFFALSE 48753
48660: GO 48662
48662: DISABLE
48663: LD_INT 0
48665: PPUSH
48666: PPUSH
// begin if mpBattleFlag <= 0 then
48667: LD_EXP 20
48671: PUSH
48672: LD_INT 0
48674: LESSEQUAL
48675: IFFALSE 48679
// exit ;
48677: GO 48753
// strength := 100 ;
48679: LD_ADDR_VAR 0 2
48683: PUSH
48684: LD_INT 100
48686: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48687: LD_EXP 20
48691: PPUSH
48692: CALL_OW 67
// strength := Dec ( strength ) ;
48696: LD_ADDR_VAR 0 2
48700: PUSH
48701: LD_VAR 0 2
48705: PPUSH
48706: CALL 41923 0 1
48710: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48711: LD_VAR 0 2
48715: PPUSH
48716: CALL 48557 0 1
// until not strength ;
48720: LD_VAR 0 2
48724: NOT
48725: IFFALSE 48687
// for i in mpBattleFlags do
48727: LD_ADDR_VAR 0 1
48731: PUSH
48732: LD_EXP 21
48736: PUSH
48737: FOR_IN
48738: IFFALSE 48751
// KillBattleFlag ( i ) ;
48740: LD_VAR 0 1
48744: PPUSH
48745: CALL_OW 419
48749: GO 48737
48751: POP
48752: POP
// end ;
48753: PPOPN 2
48755: END
// every 0 0$1 marked mpActive do var side , tmp ;
48756: GO 48758
48758: DISABLE
48759: LD_INT 0
48761: PPUSH
48762: PPUSH
// begin if mpSibBomb <= 1 then
48763: LD_EXP 26
48767: PUSH
48768: LD_INT 1
48770: LESSEQUAL
48771: IFFALSE 48775
// exit ;
48773: GO 48848
// tmp := mpSibBomb ;
48775: LD_ADDR_VAR 0 2
48779: PUSH
48780: LD_EXP 26
48784: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48785: LD_INT 35
48787: PPUSH
48788: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48792: LD_ADDR_VAR 0 2
48796: PUSH
48797: LD_VAR 0 2
48801: PUSH
48802: LD_INT 35
48804: MINUS
48805: ST_TO_ADDR
// until not tmp ;
48806: LD_VAR 0 2
48810: NOT
48811: IFFALSE 48785
// for side := 1 to 8 do
48813: LD_ADDR_VAR 0 1
48817: PUSH
48818: DOUBLE
48819: LD_INT 1
48821: DEC
48822: ST_TO_ADDR
48823: LD_INT 8
48825: PUSH
48826: FOR_TO
48827: IFFALSE 48846
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48829: LD_INT 25
48831: PPUSH
48832: LD_VAR 0 1
48836: PPUSH
48837: LD_INT 1
48839: PPUSH
48840: CALL_OW 322
48844: GO 48826
48846: POP
48847: POP
// end ;
48848: PPOPN 2
48850: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48851: LD_INT 0
48853: PPUSH
48854: PPUSH
48855: PPUSH
// mpBuildUpTimeDelay := 0 ;
48856: LD_ADDR_EXP 39
48860: PUSH
48861: LD_INT 0
48863: ST_TO_ADDR
// if not mpBuildUpTime then
48864: LD_EXP 18
48868: NOT
48869: IFFALSE 48873
// exit ;
48871: GO 49056
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
48873: LD_ADDR_EXP 39
48877: PUSH
48878: LD_INT 8400
48880: PUSH
48881: LD_INT 2100
48883: PUSH
48884: LD_EXP 18
48888: MUL
48889: PLUS
48890: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
48891: LD_ADDR_EXP 40
48895: PUSH
48896: LD_INT 1
48898: ST_TO_ADDR
// for i := 1 to 8 do
48899: LD_ADDR_VAR 0 2
48903: PUSH
48904: DOUBLE
48905: LD_INT 1
48907: DEC
48908: ST_TO_ADDR
48909: LD_INT 8
48911: PUSH
48912: FOR_TO
48913: IFFALSE 49054
// if mpSidePositions [ i ] then
48915: LD_EXP 5
48919: PUSH
48920: LD_VAR 0 2
48924: ARRAY
48925: IFFALSE 49052
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
48927: LD_EXP 17
48931: PUSH
48932: LD_EXP 5
48936: PUSH
48937: LD_VAR 0 2
48941: ARRAY
48942: ARRAY
48943: PPUSH
48944: LD_INT 5
48946: PPUSH
48947: CALL_OW 424
// for j := 1 to 8 do
48951: LD_ADDR_VAR 0 3
48955: PUSH
48956: DOUBLE
48957: LD_INT 1
48959: DEC
48960: ST_TO_ADDR
48961: LD_INT 8
48963: PUSH
48964: FOR_TO
48965: IFFALSE 49050
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48967: LD_EXP 5
48971: PUSH
48972: LD_VAR 0 3
48976: ARRAY
48977: PUSH
48978: LD_EXP 6
48982: PUSH
48983: LD_VAR 0 2
48987: ARRAY
48988: PUSH
48989: LD_EXP 6
48993: PUSH
48994: LD_VAR 0 3
48998: ARRAY
48999: NONEQUAL
49000: PUSH
49001: LD_EXP 9
49005: NOT
49006: PUSH
49007: LD_VAR 0 2
49011: PUSH
49012: LD_VAR 0 3
49016: NONEQUAL
49017: AND
49018: OR
49019: AND
49020: IFFALSE 49048
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49022: LD_VAR 0 3
49026: PPUSH
49027: LD_EXP 17
49031: PUSH
49032: LD_EXP 5
49036: PUSH
49037: LD_VAR 0 2
49041: ARRAY
49042: ARRAY
49043: PPUSH
49044: CALL_OW 333
49048: GO 48964
49050: POP
49051: POP
// end ;
49052: GO 48912
49054: POP
49055: POP
// end ;
49056: LD_VAR 0 1
49060: RET
// function EndBuildUp ; var i , j ; begin
49061: LD_INT 0
49063: PPUSH
49064: PPUSH
49065: PPUSH
// mpBuildUpTimeActive := false ;
49066: LD_ADDR_EXP 40
49070: PUSH
49071: LD_INT 0
49073: ST_TO_ADDR
// for i := 1 to 8 do
49074: LD_ADDR_VAR 0 2
49078: PUSH
49079: DOUBLE
49080: LD_INT 1
49082: DEC
49083: ST_TO_ADDR
49084: LD_INT 8
49086: PUSH
49087: FOR_TO
49088: IFFALSE 49229
// if mpSidePositions [ i ] then
49090: LD_EXP 5
49094: PUSH
49095: LD_VAR 0 2
49099: ARRAY
49100: IFFALSE 49227
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
49102: LD_EXP 17
49106: PUSH
49107: LD_EXP 5
49111: PUSH
49112: LD_VAR 0 2
49116: ARRAY
49117: ARRAY
49118: PPUSH
49119: LD_INT 0
49121: PPUSH
49122: CALL_OW 424
// for j := 1 to 8 do
49126: LD_ADDR_VAR 0 3
49130: PUSH
49131: DOUBLE
49132: LD_INT 1
49134: DEC
49135: ST_TO_ADDR
49136: LD_INT 8
49138: PUSH
49139: FOR_TO
49140: IFFALSE 49225
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49142: LD_EXP 5
49146: PUSH
49147: LD_VAR 0 3
49151: ARRAY
49152: PUSH
49153: LD_EXP 6
49157: PUSH
49158: LD_VAR 0 2
49162: ARRAY
49163: PUSH
49164: LD_EXP 6
49168: PUSH
49169: LD_VAR 0 3
49173: ARRAY
49174: NONEQUAL
49175: PUSH
49176: LD_EXP 9
49180: NOT
49181: PUSH
49182: LD_VAR 0 2
49186: PUSH
49187: LD_VAR 0 3
49191: NONEQUAL
49192: AND
49193: OR
49194: AND
49195: IFFALSE 49223
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49197: LD_VAR 0 3
49201: PPUSH
49202: LD_EXP 17
49206: PUSH
49207: LD_EXP 5
49211: PUSH
49212: LD_VAR 0 2
49216: ARRAY
49217: ARRAY
49218: PPUSH
49219: CALL_OW 334
49223: GO 49139
49225: POP
49226: POP
// end ;
49227: GO 49087
49229: POP
49230: POP
// end ;
49231: LD_VAR 0 1
49235: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49236: LD_EXP 40
49240: IFFALSE 49415
49242: GO 49244
49244: DISABLE
49245: LD_INT 0
49247: PPUSH
49248: PPUSH
// begin for i := 1 to 8 do
49249: LD_ADDR_VAR 0 1
49253: PUSH
49254: DOUBLE
49255: LD_INT 1
49257: DEC
49258: ST_TO_ADDR
49259: LD_INT 8
49261: PUSH
49262: FOR_TO
49263: IFFALSE 49412
// if mpSidePositions [ i ] then
49265: LD_EXP 5
49269: PUSH
49270: LD_VAR 0 1
49274: ARRAY
49275: IFFALSE 49410
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49277: LD_ADDR_VAR 0 2
49281: PUSH
49282: LD_EXP 17
49286: PUSH
49287: LD_EXP 5
49291: PUSH
49292: LD_VAR 0 1
49296: ARRAY
49297: ARRAY
49298: PPUSH
49299: LD_INT 2
49301: PUSH
49302: LD_INT 21
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 21
49314: PUSH
49315: LD_INT 2
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 22
49329: PUSH
49330: LD_OWVAR 2
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PPUSH
49343: CALL_OW 70
49347: PUSH
49348: FOR_IN
49349: IFFALSE 49408
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49351: LD_EXP 6
49355: PUSH
49356: LD_VAR 0 1
49360: ARRAY
49361: PUSH
49362: LD_EXP 6
49366: PUSH
49367: LD_OWVAR 2
49371: ARRAY
49372: NONEQUAL
49373: PUSH
49374: LD_EXP 9
49378: NOT
49379: PUSH
49380: LD_VAR 0 1
49384: PUSH
49385: LD_OWVAR 2
49389: NONEQUAL
49390: AND
49391: OR
49392: IFFALSE 49406
// ComMoveToArea ( un , BuildUpEscape ) ;
49394: LD_VAR 0 2
49398: PPUSH
49399: LD_INT 13
49401: PPUSH
49402: CALL_OW 113
49406: GO 49348
49408: POP
49409: POP
49410: GO 49262
49412: POP
49413: POP
// enable ;
49414: ENABLE
// end ;
49415: PPOPN 2
49417: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49418: LD_EXP 18
49422: IFFALSE 49472
49424: GO 49426
49426: DISABLE
49427: LD_INT 0
49429: PPUSH
// begin tmp := mpBuildUpTime ;
49430: LD_ADDR_VAR 0 1
49434: PUSH
49435: LD_EXP 18
49439: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49440: LD_INT 35
49442: PPUSH
49443: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49447: LD_ADDR_VAR 0 1
49451: PUSH
49452: LD_VAR 0 1
49456: PUSH
49457: LD_INT 35
49459: MINUS
49460: ST_TO_ADDR
// until not tmp ;
49461: LD_VAR 0 1
49465: NOT
49466: IFFALSE 49440
// EndBuildUp ;
49468: CALL 49061 0 0
// end ;
49472: PPOPN 1
49474: END
// every 0 0$1 trigger mpActive marked mpWin do
49475: LD_INT 100
49477: IFFALSE 49511
49479: GO 49481
49481: DISABLE
// begin if IAmServer then
49482: CALL_OW 518
49486: IFFALSE 49495
// wait ( 0 0$3 ) ;
49488: LD_INT 105
49490: PPUSH
49491: CALL_OW 67
// if Multiplayer then
49495: LD_OWVAR 4
49499: IFFALSE 49507
// YouWinInMultiplayer else
49501: CALL_OW 106
49505: GO 49511
// YouWin ;
49507: CALL_OW 103
// end ;
49511: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49512: LD_INT 0
49514: PPUSH
// result := false ;
49515: LD_ADDR_VAR 0 3
49519: PUSH
49520: LD_INT 0
49522: ST_TO_ADDR
// case gameType of GameTypeNormal :
49523: LD_VAR 0 1
49527: PUSH
49528: LD_INT 1
49530: DOUBLE
49531: EQUAL
49532: IFTRUE 49536
49534: GO 49609
49536: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49537: LD_ADDR_VAR 0 3
49541: PUSH
49542: LD_INT 22
49544: PUSH
49545: LD_VAR 0 2
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: LD_INT 21
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 33
49569: PUSH
49570: LD_INT 3
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 33
49579: PUSH
49580: LD_INT 5
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PPUSH
49597: CALL_OW 69
49601: PPUSH
49602: CALL 4931 0 1
49606: ST_TO_ADDR
// end ; GameTypeSurvival :
49607: GO 49844
49609: LD_INT 2
49611: DOUBLE
49612: EQUAL
49613: IFTRUE 49617
49615: GO 49745
49617: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49618: LD_ADDR_VAR 0 3
49622: PUSH
49623: LD_INT 22
49625: PUSH
49626: LD_VAR 0 2
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 2
49637: PUSH
49638: LD_INT 30
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 30
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: LIST
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PPUSH
49667: CALL_OW 69
49671: PPUSH
49672: CALL 4931 0 1
49676: PUSH
49677: LD_INT 22
49679: PUSH
49680: LD_VAR 0 2
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 2
49691: PUSH
49692: LD_INT 21
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 33
49704: PUSH
49705: LD_INT 3
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 33
49714: PUSH
49715: LD_INT 5
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PPUSH
49732: CALL_OW 69
49736: PPUSH
49737: CALL 4931 0 1
49741: AND
49742: ST_TO_ADDR
// end ; GameTypeKing :
49743: GO 49844
49745: LD_INT 3
49747: DOUBLE
49748: EQUAL
49749: IFTRUE 49753
49751: GO 49843
49753: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
49754: LD_ADDR_VAR 0 3
49758: PUSH
49759: LD_INT 22
49761: PUSH
49762: LD_VAR 0 2
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: LD_INT 21
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 33
49786: PUSH
49787: LD_INT 3
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 33
49796: PUSH
49797: LD_INT 5
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PPUSH
49814: CALL_OW 69
49818: PPUSH
49819: CALL 4931 0 1
49823: PUSH
49824: LD_VAR 0 2
49828: PPUSH
49829: CALL 53030 0 1
49833: PUSH
49834: LD_EXP 32
49838: LESS
49839: AND
49840: ST_TO_ADDR
// end ; end ;
49841: GO 49844
49843: POP
// end ;
49844: LD_VAR 0 3
49848: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49849: LD_INT 100
49851: IFFALSE 50073
49853: GO 49855
49855: DISABLE
49856: LD_INT 0
49858: PPUSH
49859: PPUSH
// begin if Multiplayer then
49860: LD_OWVAR 4
49864: IFFALSE 49872
// SetPlayerSpectator ( ) else
49866: CALL_OW 572
49870: GO 49881
// FogOff ( your_side ) ;
49872: LD_OWVAR 2
49876: PPUSH
49877: CALL_OW 344
// repeat gameIsOn := false ;
49881: LD_ADDR_VAR 0 1
49885: PUSH
49886: LD_INT 0
49888: ST_TO_ADDR
// for i := 1 to 8 do
49889: LD_ADDR_VAR 0 2
49893: PUSH
49894: DOUBLE
49895: LD_INT 1
49897: DEC
49898: ST_TO_ADDR
49899: LD_INT 8
49901: PUSH
49902: FOR_TO
49903: IFFALSE 50025
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49905: LD_EXP 5
49909: PUSH
49910: LD_VAR 0 2
49914: ARRAY
49915: PUSH
49916: LD_VAR 0 2
49920: PPUSH
49921: CALL_OW 108
49925: AND
49926: PUSH
49927: LD_VAR 0 2
49931: PUSH
49932: LD_OWVAR 2
49936: NONEQUAL
49937: AND
49938: IFFALSE 50023
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
49940: LD_EXP 6
49944: PUSH
49945: LD_VAR 0 2
49949: ARRAY
49950: NOT
49951: PUSH
49952: LD_EXP 6
49956: PUSH
49957: LD_VAR 0 2
49961: ARRAY
49962: PUSH
49963: LD_EXP 6
49967: PUSH
49968: LD_OWVAR 2
49972: ARRAY
49973: NONEQUAL
49974: PUSH
49975: LD_OWVAR 2
49979: PPUSH
49980: LD_VAR 0 2
49984: PPUSH
49985: CALL_OW 81
49989: PUSH
49990: LD_INT 1
49992: NONEQUAL
49993: AND
49994: OR
49995: IFFALSE 50023
// if HasPowerByGameType ( mpGameType , i ) then
49997: LD_EXP 1
50001: PPUSH
50002: LD_VAR 0 2
50006: PPUSH
50007: CALL 49512 0 2
50011: IFFALSE 50023
// begin gameIsOn := true ;
50013: LD_ADDR_VAR 0 1
50017: PUSH
50018: LD_INT 1
50020: ST_TO_ADDR
// break ;
50021: GO 50025
// end ;
50023: GO 49902
50025: POP
50026: POP
// wait ( 100 ) ;
50027: LD_INT 100
50029: PPUSH
50030: CALL_OW 67
// until not gameIsOn ;
50034: LD_VAR 0 1
50038: NOT
50039: IFFALSE 49881
// if IAmServer then
50041: CALL_OW 518
50045: IFFALSE 50054
// wait ( 0 0$3 ) ;
50047: LD_INT 105
50049: PPUSH
50050: CALL_OW 67
// if Multiplayer then
50054: LD_OWVAR 4
50058: IFFALSE 50066
// YouLostInMultiplayer else
50060: CALL_OW 107
50064: GO 50073
// YouLost (  ) ;
50066: LD_STRING 
50068: PPUSH
50069: CALL_OW 104
// end ;
50073: PPOPN 2
50075: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
50076: LD_EXP 30
50080: IFFALSE 50427
50082: GO 50084
50084: DISABLE
50085: LD_INT 0
50087: PPUSH
50088: PPUSH
50089: PPUSH
50090: PPUSH
50091: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
50092: LD_ADDR_VAR 0 5
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: LD_INT 3
50105: PUSH
50106: LD_INT 4
50108: PUSH
50109: LD_INT 5
50111: PUSH
50112: LD_INT 6
50114: PUSH
50115: LD_INT 7
50117: PUSH
50118: LD_INT 8
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
50131: LD_INT 350
50133: PPUSH
50134: CALL_OW 67
// for i := 1 to 8 do
50138: LD_ADDR_VAR 0 1
50142: PUSH
50143: DOUBLE
50144: LD_INT 1
50146: DEC
50147: ST_TO_ADDR
50148: LD_INT 8
50150: PUSH
50151: FOR_TO
50152: IFFALSE 50397
// begin j := sides [ i ] ;
50154: LD_ADDR_VAR 0 2
50158: PUSH
50159: LD_VAR 0 5
50163: PUSH
50164: LD_VAR 0 1
50168: ARRAY
50169: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
50170: LD_EXP 37
50174: PUSH
50175: LD_VAR 0 2
50179: ARRAY
50180: PPUSH
50181: CALL 4931 0 1
50185: PUSH
50186: LD_VAR 0 2
50190: PPUSH
50191: CALL_OW 108
50195: AND
50196: PUSH
50197: LD_EXP 1
50201: PPUSH
50202: LD_VAR 0 2
50206: PPUSH
50207: CALL 49512 0 2
50211: AND
50212: IFFALSE 50395
// begin wait ( mpRespawn div 3 ) ;
50214: LD_EXP 30
50218: PUSH
50219: LD_INT 3
50221: DIV
50222: PPUSH
50223: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50227: LD_ADDR_VAR 0 3
50231: PUSH
50232: LD_INT 22
50234: PUSH
50235: LD_VAR 0 2
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 50
50246: PUSH
50247: EMPTY
50248: LIST
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: LD_INT 30
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 30
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: LIST
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: LIST
50282: PPUSH
50283: CALL_OW 69
50287: ST_TO_ADDR
// if not tmp then
50288: LD_VAR 0 3
50292: NOT
50293: IFFALSE 50297
// continue ;
50295: GO 50151
// spawn := tmp [ 1 ] ;
50297: LD_ADDR_VAR 0 4
50301: PUSH
50302: LD_VAR 0 3
50306: PUSH
50307: LD_INT 1
50309: ARRAY
50310: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50311: LD_EXP 37
50315: PUSH
50316: LD_VAR 0 2
50320: ARRAY
50321: PUSH
50322: LD_INT 1
50324: ARRAY
50325: PPUSH
50326: LD_VAR 0 4
50330: PPUSH
50331: CALL_OW 250
50335: PPUSH
50336: LD_VAR 0 4
50340: PPUSH
50341: CALL_OW 251
50345: PPUSH
50346: LD_INT 32
50348: PPUSH
50349: LD_INT 1
50351: PPUSH
50352: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50356: LD_ADDR_EXP 37
50360: PUSH
50361: LD_EXP 37
50365: PPUSH
50366: LD_VAR 0 2
50370: PPUSH
50371: LD_EXP 37
50375: PUSH
50376: LD_VAR 0 2
50380: ARRAY
50381: PPUSH
50382: LD_INT 1
50384: PPUSH
50385: CALL_OW 3
50389: PPUSH
50390: CALL_OW 1
50394: ST_TO_ADDR
// end ; end ;
50395: GO 50151
50397: POP
50398: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50399: LD_ADDR_VAR 0 5
50403: PUSH
50404: LD_VAR 0 5
50408: PPUSH
50409: LD_INT 1
50411: PPUSH
50412: LD_INT 8
50414: PPUSH
50415: LD_INT 1
50417: PPUSH
50418: CALL 7209 0 4
50422: ST_TO_ADDR
// until false ;
50423: LD_INT 0
50425: IFFALSE 50131
// end ;
50427: PPOPN 5
50429: END
// every 0 0$1 marked mpActive do
50430: GO 50432
50432: DISABLE
// begin enable ;
50433: ENABLE
// if not mpDisplayStrings then
50434: LD_EXP 35
50438: NOT
50439: IFFALSE 50450
// begin display_strings := [ ] ;
50441: LD_ADDR_OWVAR 47
50445: PUSH
50446: EMPTY
50447: ST_TO_ADDR
// exit ;
50448: GO 50460
// end ; display_strings := mpDisplayStrings ;
50450: LD_ADDR_OWVAR 47
50454: PUSH
50455: LD_EXP 35
50459: ST_TO_ADDR
// end ; end_of_file
50460: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50461: LD_INT 0
50463: PPUSH
50464: PPUSH
50465: PPUSH
50466: PPUSH
50467: PPUSH
50468: PPUSH
50469: PPUSH
50470: PPUSH
50471: PPUSH
// if GetType ( un ) = unit_vehicle then
50472: LD_VAR 0 1
50476: PPUSH
50477: CALL_OW 247
50481: PUSH
50482: LD_INT 2
50484: EQUAL
50485: IFFALSE 50489
// exit ;
50487: GO 51059
// side := GetSide ( un ) ;
50489: LD_ADDR_VAR 0 9
50493: PUSH
50494: LD_VAR 0 1
50498: PPUSH
50499: CALL_OW 255
50503: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50504: LD_EXP 1
50508: PUSH
50509: LD_INT 2
50511: EQUAL
50512: IFFALSE 50605
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
50514: LD_VAR 0 1
50518: PPUSH
50519: CALL_OW 266
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: IN
50534: PUSH
50535: LD_VAR 0 1
50539: PPUSH
50540: CALL_OW 110
50544: PUSH
50545: LD_VAR 0 9
50549: EQUAL
50550: AND
50551: IFFALSE 50605
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50553: LD_ADDR_VAR 0 3
50557: PUSH
50558: LD_INT 22
50560: PUSH
50561: LD_VAR 0 9
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 21
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PPUSH
50584: CALL_OW 69
50588: PUSH
50589: FOR_IN
50590: IFFALSE 50603
// KillUnit ( i ) ;
50592: LD_VAR 0 3
50596: PPUSH
50597: CALL_OW 66
50601: GO 50589
50603: POP
50604: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50605: LD_VAR 0 1
50609: PPUSH
50610: CALL_OW 257
50614: PUSH
50615: LD_INT 12
50617: PUSH
50618: LD_INT 17
50620: PUSH
50621: LD_INT 15
50623: PUSH
50624: LD_INT 16
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: IN
50633: PUSH
50634: LD_VAR 0 1
50638: PPUSH
50639: CALL_OW 263
50643: PUSH
50644: LD_INT 5
50646: EQUAL
50647: OR
50648: IFFALSE 50788
// begin tag := GetTag ( un ) ;
50650: LD_ADDR_VAR 0 5
50654: PUSH
50655: LD_VAR 0 1
50659: PPUSH
50660: CALL_OW 110
50664: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50665: LD_ADDR_VAR 0 7
50669: PUSH
50670: LD_EXP 29
50674: PUSH
50675: LD_EXP 5
50679: PUSH
50680: LD_VAR 0 5
50684: ARRAY
50685: ARRAY
50686: ST_TO_ADDR
// if not area then
50687: LD_VAR 0 7
50691: NOT
50692: IFFALSE 50696
// exit ;
50694: GO 51059
// wait ( 4 4$00 ) ;
50696: LD_INT 8400
50698: PPUSH
50699: CALL_OW 67
// repeat wait ( 10 ) ;
50703: LD_INT 10
50705: PPUSH
50706: CALL_OW 67
// until not mpBlockRespThread ;
50710: LD_EXP 38
50714: NOT
50715: IFFALSE 50703
// mpBlockRespThread := true ;
50717: LD_ADDR_EXP 38
50721: PUSH
50722: LD_INT 1
50724: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
50725: LD_INT 0
50727: PPUSH
50728: CALL 36788 0 1
// ape := CreateHuman ;
50732: LD_ADDR_VAR 0 4
50736: PUSH
50737: CALL_OW 44
50741: ST_TO_ADDR
// SetTag ( ape , tag ) ;
50742: LD_VAR 0 4
50746: PPUSH
50747: LD_VAR 0 5
50751: PPUSH
50752: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
50756: LD_VAR 0 4
50760: PPUSH
50761: LD_VAR 0 7
50765: PPUSH
50766: LD_INT 0
50768: PPUSH
50769: CALL_OW 49
// wait ( 10 ) ;
50773: LD_INT 10
50775: PPUSH
50776: CALL_OW 67
// mpBlockRespThread := false ;
50780: LD_ADDR_EXP 38
50784: PUSH
50785: LD_INT 0
50787: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
50788: LD_VAR 0 1
50792: PPUSH
50793: CALL_OW 247
50797: PUSH
50798: LD_INT 1
50800: EQUAL
50801: PUSH
50802: LD_VAR 0 1
50806: PPUSH
50807: CALL_OW 248
50811: PUSH
50812: LD_INT 0
50814: GREATER
50815: AND
50816: IFFALSE 51059
// begin if not mpRespawn then
50818: LD_EXP 30
50822: NOT
50823: IFFALSE 50827
// exit ;
50825: GO 51059
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
50827: LD_VAR 0 9
50831: PPUSH
50832: CALL_OW 108
50836: NOT
50837: PUSH
50838: LD_EXP 1
50842: PPUSH
50843: LD_VAR 0 9
50847: PPUSH
50848: CALL 49512 0 2
50852: NOT
50853: AND
50854: IFFALSE 50858
// exit ;
50856: GO 51059
// side := GetSide ( un ) ;
50858: LD_ADDR_VAR 0 9
50862: PUSH
50863: LD_VAR 0 1
50867: PPUSH
50868: CALL_OW 255
50872: ST_TO_ADDR
// nation := GetNation ( un ) ;
50873: LD_ADDR_VAR 0 8
50877: PUSH
50878: LD_VAR 0 1
50882: PPUSH
50883: CALL_OW 248
50887: ST_TO_ADDR
// class := GetClass ( un ) ;
50888: LD_ADDR_VAR 0 6
50892: PUSH
50893: LD_VAR 0 1
50897: PPUSH
50898: CALL_OW 257
50902: ST_TO_ADDR
// if class > 4 then
50903: LD_VAR 0 6
50907: PUSH
50908: LD_INT 4
50910: GREATER
50911: IFFALSE 50921
// class := 1 ;
50913: LD_ADDR_VAR 0 6
50917: PUSH
50918: LD_INT 1
50920: ST_TO_ADDR
// repeat wait ( 10 ) ;
50921: LD_INT 10
50923: PPUSH
50924: CALL_OW 67
// until not mpBlockRespThread ;
50928: LD_EXP 38
50932: NOT
50933: IFFALSE 50921
// mpBlockRespThread := true ;
50935: LD_ADDR_EXP 38
50939: PUSH
50940: LD_INT 1
50942: ST_TO_ADDR
// uc_side := side ;
50943: LD_ADDR_OWVAR 20
50947: PUSH
50948: LD_VAR 0 9
50952: ST_TO_ADDR
// uc_nation := nation ;
50953: LD_ADDR_OWVAR 21
50957: PUSH
50958: LD_VAR 0 8
50962: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
50963: LD_INT 0
50965: PPUSH
50966: LD_VAR 0 6
50970: PPUSH
50971: LD_INT 2
50973: PPUSH
50974: CALL_OW 380
// un := CreateHuman ;
50978: LD_ADDR_VAR 0 1
50982: PUSH
50983: CALL_OW 44
50987: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
50988: LD_ADDR_EXP 37
50992: PUSH
50993: LD_EXP 37
50997: PPUSH
50998: LD_VAR 0 9
51002: PPUSH
51003: LD_EXP 37
51007: PUSH
51008: LD_VAR 0 9
51012: ARRAY
51013: PPUSH
51014: LD_EXP 37
51018: PUSH
51019: LD_VAR 0 9
51023: ARRAY
51024: PUSH
51025: LD_INT 1
51027: PLUS
51028: PPUSH
51029: LD_VAR 0 1
51033: PPUSH
51034: CALL_OW 1
51038: PPUSH
51039: CALL_OW 1
51043: ST_TO_ADDR
// wait ( 10 ) ;
51044: LD_INT 10
51046: PPUSH
51047: CALL_OW 67
// mpBlockRespThread := false ;
51051: LD_ADDR_EXP 38
51055: PUSH
51056: LD_INT 0
51058: ST_TO_ADDR
// end ; end ;
51059: LD_VAR 0 2
51063: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
51064: LD_INT 0
51066: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
51067: LD_VAR 0 1
51071: PPUSH
51072: CALL_OW 266
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: IN
51087: IFFALSE 51112
// SetBName ( building , @ & GetSide ( building ) ) ;
51089: LD_VAR 0 1
51093: PPUSH
51094: LD_STRING @
51096: PUSH
51097: LD_VAR 0 1
51101: PPUSH
51102: CALL_OW 255
51106: STR
51107: PPUSH
51108: CALL_OW 500
// end ;
51112: LD_VAR 0 2
51116: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
51117: LD_INT 0
51119: PPUSH
51120: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
51121: LD_EXP 1
51125: PUSH
51126: LD_INT 2
51128: EQUAL
51129: PUSH
51130: LD_VAR 0 1
51134: PPUSH
51135: CALL_OW 266
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: IN
51150: AND
51151: IFFALSE 51216
// begin KillUnit ( building ) ;
51153: LD_VAR 0 1
51157: PPUSH
51158: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
51162: LD_ADDR_VAR 0 5
51166: PUSH
51167: LD_INT 22
51169: PUSH
51170: LD_VAR 0 2
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 21
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PPUSH
51193: CALL_OW 69
51197: PUSH
51198: FOR_IN
51199: IFFALSE 51212
// KillUnit ( i ) ;
51201: LD_VAR 0 5
51205: PPUSH
51206: CALL_OW 66
51210: GO 51198
51212: POP
51213: POP
// exit ;
51214: GO 51261
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
51216: LD_VAR 0 1
51220: PPUSH
51221: CALL_OW 266
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: IN
51236: IFFALSE 51261
// SetBName ( building , @ & GetSide ( building ) ) ;
51238: LD_VAR 0 1
51242: PPUSH
51243: LD_STRING @
51245: PUSH
51246: LD_VAR 0 1
51250: PPUSH
51251: CALL_OW 255
51255: STR
51256: PPUSH
51257: CALL_OW 500
// end ; end_of_file
51261: LD_VAR 0 4
51265: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
51266: LD_EXP 36
51270: PUSH
51271: CALL 51476 0 0
51275: AND
51276: PUSH
51277: LD_OWVAR 4
51281: AND
51282: IFFALSE 51473
51284: GO 51286
51286: DISABLE
51287: LD_INT 0
51289: PPUSH
51290: PPUSH
// begin canWin := false ;
51291: LD_ADDR_VAR 0 2
51295: PUSH
51296: LD_INT 0
51298: ST_TO_ADDR
// if not HasPower ( your_side ) then
51299: LD_OWVAR 2
51303: PPUSH
51304: CALL 51516 0 1
51308: NOT
51309: IFFALSE 51320
// begin Multiplayer_Loose_Message ;
51311: CALL_OW 521
// enable ( mpLose ) ;
51315: LD_INT 102
51317: ENABLE_MARKED
// end else
51318: GO 51473
// begin canWin := true ;
51320: LD_ADDR_VAR 0 2
51324: PUSH
51325: LD_INT 1
51327: ST_TO_ADDR
// for i := 1 to 8 do
51328: LD_ADDR_VAR 0 1
51332: PUSH
51333: DOUBLE
51334: LD_INT 1
51336: DEC
51337: ST_TO_ADDR
51338: LD_INT 8
51340: PUSH
51341: FOR_TO
51342: IFFALSE 51459
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51344: LD_EXP 5
51348: PUSH
51349: LD_VAR 0 1
51353: ARRAY
51354: PUSH
51355: LD_VAR 0 1
51359: PPUSH
51360: CALL_OW 108
51364: AND
51365: PUSH
51366: LD_VAR 0 1
51370: PUSH
51371: LD_OWVAR 2
51375: NONEQUAL
51376: AND
51377: IFFALSE 51457
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51379: LD_EXP 6
51383: PUSH
51384: LD_VAR 0 1
51388: ARRAY
51389: NOT
51390: PUSH
51391: LD_EXP 6
51395: PUSH
51396: LD_VAR 0 1
51400: ARRAY
51401: PUSH
51402: LD_EXP 6
51406: PUSH
51407: LD_OWVAR 2
51411: ARRAY
51412: NONEQUAL
51413: PUSH
51414: LD_OWVAR 2
51418: PPUSH
51419: LD_VAR 0 1
51423: PPUSH
51424: CALL_OW 81
51428: PUSH
51429: LD_INT 1
51431: NONEQUAL
51432: AND
51433: OR
51434: IFFALSE 51457
// if HasPower ( i ) then
51436: LD_VAR 0 1
51440: PPUSH
51441: CALL 51516 0 1
51445: IFFALSE 51457
// begin canWin := false ;
51447: LD_ADDR_VAR 0 2
51451: PUSH
51452: LD_INT 0
51454: ST_TO_ADDR
// break ;
51455: GO 51459
// end ;
51457: GO 51341
51459: POP
51460: POP
// if canWin then
51461: LD_VAR 0 2
51465: IFFALSE 51472
// enable ( mpWin ) else
51467: LD_INT 101
51469: ENABLE_MARKED
51470: GO 51473
// enable ;
51472: ENABLE
// end ; end ;
51473: PPOPN 2
51475: END
// function CanWinLoose ; begin
51476: LD_INT 0
51478: PPUSH
// result := true ;
51479: LD_ADDR_VAR 0 1
51483: PUSH
51484: LD_INT 1
51486: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51487: CALL_OW 531
51491: PUSH
51492: CALL_OW 519
51496: PUSH
51497: LD_INT 1
51499: GREATER
51500: AND
51501: IFFALSE 51511
// result := false ;
51503: LD_ADDR_VAR 0 1
51507: PUSH
51508: LD_INT 0
51510: ST_TO_ADDR
// end ;
51511: LD_VAR 0 1
51515: RET
// function HasPower ( i ) ; begin
51516: LD_INT 0
51518: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51519: LD_ADDR_VAR 0 2
51523: PUSH
51524: LD_INT 22
51526: PUSH
51527: LD_VAR 0 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: LD_INT 21
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 33
51551: PUSH
51552: LD_INT 3
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 33
51561: PUSH
51562: LD_INT 5
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PPUSH
51579: CALL_OW 69
51583: ST_TO_ADDR
// end ; end_of_file
51584: LD_VAR 0 2
51588: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51589: LD_EXP 36
51593: IFFALSE 51636
51595: GO 51597
51597: DISABLE
51598: LD_INT 0
51600: PPUSH
// begin for i := 1 to 8 do
51601: LD_ADDR_VAR 0 1
51605: PUSH
51606: DOUBLE
51607: LD_INT 1
51609: DEC
51610: ST_TO_ADDR
51611: LD_INT 8
51613: PUSH
51614: FOR_TO
51615: IFFALSE 51634
// SetRestrict ( b_depot , i , state_disabled ) ;
51617: LD_INT 0
51619: PPUSH
51620: LD_VAR 0 1
51624: PPUSH
51625: LD_INT 0
51627: PPUSH
51628: CALL_OW 324
51632: GO 51614
51634: POP
51635: POP
// end ;
51636: PPOPN 1
51638: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51639: LD_EXP 36
51643: PUSH
51644: CALL 51849 0 0
51648: AND
51649: PUSH
51650: LD_OWVAR 4
51654: AND
51655: IFFALSE 51846
51657: GO 51659
51659: DISABLE
51660: LD_INT 0
51662: PPUSH
51663: PPUSH
// begin canWin := false ;
51664: LD_ADDR_VAR 0 2
51668: PUSH
51669: LD_INT 0
51671: ST_TO_ADDR
// if not HasPower ( your_side ) then
51672: LD_OWVAR 2
51676: PPUSH
51677: CALL 51889 0 1
51681: NOT
51682: IFFALSE 51693
// begin Multiplayer_Loose_Message ;
51684: CALL_OW 521
// enable ( mpLose ) ;
51688: LD_INT 102
51690: ENABLE_MARKED
// end else
51691: GO 51846
// begin canWin := true ;
51693: LD_ADDR_VAR 0 2
51697: PUSH
51698: LD_INT 1
51700: ST_TO_ADDR
// for i := 1 to 8 do
51701: LD_ADDR_VAR 0 1
51705: PUSH
51706: DOUBLE
51707: LD_INT 1
51709: DEC
51710: ST_TO_ADDR
51711: LD_INT 8
51713: PUSH
51714: FOR_TO
51715: IFFALSE 51832
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51717: LD_EXP 5
51721: PUSH
51722: LD_VAR 0 1
51726: ARRAY
51727: PUSH
51728: LD_VAR 0 1
51732: PPUSH
51733: CALL_OW 108
51737: AND
51738: PUSH
51739: LD_VAR 0 1
51743: PUSH
51744: LD_OWVAR 2
51748: NONEQUAL
51749: AND
51750: IFFALSE 51830
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51752: LD_EXP 6
51756: PUSH
51757: LD_VAR 0 1
51761: ARRAY
51762: NOT
51763: PUSH
51764: LD_EXP 6
51768: PUSH
51769: LD_VAR 0 1
51773: ARRAY
51774: PUSH
51775: LD_EXP 6
51779: PUSH
51780: LD_OWVAR 2
51784: ARRAY
51785: NONEQUAL
51786: PUSH
51787: LD_OWVAR 2
51791: PPUSH
51792: LD_VAR 0 1
51796: PPUSH
51797: CALL_OW 81
51801: PUSH
51802: LD_INT 1
51804: NONEQUAL
51805: AND
51806: OR
51807: IFFALSE 51830
// if HasPower ( i ) then
51809: LD_VAR 0 1
51813: PPUSH
51814: CALL 51889 0 1
51818: IFFALSE 51830
// begin canWin := false ;
51820: LD_ADDR_VAR 0 2
51824: PUSH
51825: LD_INT 0
51827: ST_TO_ADDR
// break ;
51828: GO 51832
// end ;
51830: GO 51714
51832: POP
51833: POP
// if canWin then
51834: LD_VAR 0 2
51838: IFFALSE 51845
// enable ( mpWin ) else
51840: LD_INT 101
51842: ENABLE_MARKED
51843: GO 51846
// enable ;
51845: ENABLE
// end ; end ;
51846: PPOPN 2
51848: END
// function CanWinLoose ; begin
51849: LD_INT 0
51851: PPUSH
// result := true ;
51852: LD_ADDR_VAR 0 1
51856: PUSH
51857: LD_INT 1
51859: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51860: CALL_OW 531
51864: PUSH
51865: CALL_OW 519
51869: PUSH
51870: LD_INT 1
51872: GREATER
51873: AND
51874: IFFALSE 51884
// result := false ;
51876: LD_ADDR_VAR 0 1
51880: PUSH
51881: LD_INT 0
51883: ST_TO_ADDR
// end ;
51884: LD_VAR 0 1
51888: RET
// function HasPower ( i ) ; begin
51889: LD_INT 0
51891: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
51892: LD_INT 22
51894: PUSH
51895: LD_VAR 0 1
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: LD_INT 30
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 30
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: LIST
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PPUSH
51936: CALL_OW 69
51940: NOT
51941: IFFALSE 51945
// exit ;
51943: GO 52010
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51945: LD_ADDR_VAR 0 2
51949: PUSH
51950: LD_INT 22
51952: PUSH
51953: LD_VAR 0 1
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: LD_INT 21
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 33
51977: PUSH
51978: LD_INT 3
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 33
51987: PUSH
51988: LD_INT 5
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PPUSH
52005: CALL_OW 69
52009: ST_TO_ADDR
// end ; end_of_file
52010: LD_VAR 0 2
52014: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
52015: LD_EXP 36
52019: IFFALSE 52358
52021: GO 52023
52023: DISABLE
52024: LD_INT 0
52026: PPUSH
52027: PPUSH
52028: PPUSH
// begin mpKingPoints := [ ] ;
52029: LD_ADDR_EXP 41
52033: PUSH
52034: EMPTY
52035: ST_TO_ADDR
// if mpTeamGame then
52036: LD_EXP 9
52040: IFFALSE 52094
// begin for i := 1 to Count ( mpTeams ) do
52042: LD_ADDR_VAR 0 1
52046: PUSH
52047: DOUBLE
52048: LD_INT 1
52050: DEC
52051: ST_TO_ADDR
52052: LD_EXP 8
52056: PPUSH
52057: CALL 4931 0 1
52061: PUSH
52062: FOR_TO
52063: IFFALSE 52090
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52065: LD_ADDR_EXP 41
52069: PUSH
52070: LD_EXP 41
52074: PPUSH
52075: LD_VAR 0 1
52079: PPUSH
52080: LD_INT 0
52082: PPUSH
52083: CALL_OW 1
52087: ST_TO_ADDR
52088: GO 52062
52090: POP
52091: POP
// end else
52092: GO 52137
// begin for i := 1 to 8 do
52094: LD_ADDR_VAR 0 1
52098: PUSH
52099: DOUBLE
52100: LD_INT 1
52102: DEC
52103: ST_TO_ADDR
52104: LD_INT 8
52106: PUSH
52107: FOR_TO
52108: IFFALSE 52135
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52110: LD_ADDR_EXP 41
52114: PUSH
52115: LD_EXP 41
52119: PPUSH
52120: LD_VAR 0 1
52124: PPUSH
52125: LD_INT 0
52127: PPUSH
52128: CALL_OW 1
52132: ST_TO_ADDR
52133: GO 52107
52135: POP
52136: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
52137: LD_ADDR_VAR 0 3
52141: PUSH
52142: LD_INT 17
52144: PPUSH
52145: LD_INT 0
52147: PPUSH
52148: CALL_OW 517
52152: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52153: LD_ADDR_VAR 0 1
52157: PUSH
52158: DOUBLE
52159: LD_INT 1
52161: DEC
52162: ST_TO_ADDR
52163: LD_VAR 0 3
52167: PUSH
52168: LD_INT 1
52170: ARRAY
52171: PUSH
52172: FOR_TO
52173: IFFALSE 52240
// for j := 1 to 8 do
52175: LD_ADDR_VAR 0 2
52179: PUSH
52180: DOUBLE
52181: LD_INT 1
52183: DEC
52184: ST_TO_ADDR
52185: LD_INT 8
52187: PUSH
52188: FOR_TO
52189: IFFALSE 52236
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
52191: LD_VAR 0 3
52195: PUSH
52196: LD_INT 1
52198: ARRAY
52199: PUSH
52200: LD_VAR 0 1
52204: ARRAY
52205: PPUSH
52206: LD_VAR 0 3
52210: PUSH
52211: LD_INT 2
52213: ARRAY
52214: PUSH
52215: LD_VAR 0 1
52219: ARRAY
52220: PPUSH
52221: LD_VAR 0 2
52225: PPUSH
52226: LD_INT 12
52228: NEG
52229: PPUSH
52230: CALL_OW 330
52234: GO 52188
52236: POP
52237: POP
52238: GO 52172
52240: POP
52241: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
52242: LD_EXP 31
52246: PPUSH
52247: LD_INT 1
52249: PPUSH
52250: CALL_OW 424
// UpdateCounter ;
52254: CALL 52860 0 0
// repeat wait ( 0 0$1 ) ;
52258: LD_INT 35
52260: PPUSH
52261: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52265: LD_ADDR_VAR 0 3
52269: PUSH
52270: LD_EXP 31
52274: PPUSH
52275: LD_INT 3
52277: PUSH
52278: LD_INT 57
52280: PUSH
52281: EMPTY
52282: LIST
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 50
52290: PUSH
52291: EMPTY
52292: LIST
52293: PUSH
52294: LD_INT 2
52296: PUSH
52297: LD_INT 30
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 30
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: LIST
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: LIST
52326: PPUSH
52327: CALL_OW 70
52331: ST_TO_ADDR
// if not tmp then
52332: LD_VAR 0 3
52336: NOT
52337: IFFALSE 52341
// continue ;
52339: GO 52258
// AddPoints ( tmp ) ;
52341: LD_VAR 0 3
52345: PPUSH
52346: CALL 52538 0 1
// UpdateCounter ;
52350: CALL 52860 0 0
// until false ;
52354: LD_INT 0
52356: IFFALSE 52258
// end ;
52358: PPOPN 3
52360: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52361: LD_EXP 36
52365: PUSH
52366: LD_EXP 34
52370: AND
52371: IFFALSE 52535
52373: GO 52375
52375: DISABLE
52376: LD_INT 0
52378: PPUSH
52379: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52380: LD_ADDR_VAR 0 2
52384: PUSH
52385: LD_INT 17
52387: PPUSH
52388: LD_INT 0
52390: PPUSH
52391: CALL_OW 517
52395: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52396: LD_ADDR_VAR 0 1
52400: PUSH
52401: DOUBLE
52402: LD_INT 1
52404: DEC
52405: ST_TO_ADDR
52406: LD_VAR 0 2
52410: PUSH
52411: LD_INT 1
52413: ARRAY
52414: PUSH
52415: FOR_TO
52416: IFFALSE 52457
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52418: LD_VAR 0 2
52422: PUSH
52423: LD_INT 1
52425: ARRAY
52426: PUSH
52427: LD_VAR 0 1
52431: ARRAY
52432: PPUSH
52433: LD_VAR 0 2
52437: PUSH
52438: LD_INT 2
52440: ARRAY
52441: PUSH
52442: LD_VAR 0 1
52446: ARRAY
52447: PPUSH
52448: LD_INT 125
52450: PPUSH
52451: CALL_OW 495
52455: GO 52415
52457: POP
52458: POP
// repeat wait ( mpEmissions ) ;
52459: LD_EXP 34
52463: PPUSH
52464: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52468: LD_ADDR_VAR 0 1
52472: PUSH
52473: DOUBLE
52474: LD_INT 1
52476: DEC
52477: ST_TO_ADDR
52478: LD_VAR 0 2
52482: PUSH
52483: LD_INT 1
52485: ARRAY
52486: PUSH
52487: FOR_TO
52488: IFFALSE 52529
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52490: LD_VAR 0 2
52494: PUSH
52495: LD_INT 1
52497: ARRAY
52498: PUSH
52499: LD_VAR 0 1
52503: ARRAY
52504: PPUSH
52505: LD_VAR 0 2
52509: PUSH
52510: LD_INT 2
52512: ARRAY
52513: PUSH
52514: LD_VAR 0 1
52518: ARRAY
52519: PPUSH
52520: LD_INT 15
52522: PPUSH
52523: CALL_OW 495
52527: GO 52487
52529: POP
52530: POP
// until false ;
52531: LD_INT 0
52533: IFFALSE 52459
// end ;
52535: PPOPN 2
52537: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52538: LD_INT 0
52540: PPUSH
52541: PPUSH
52542: PPUSH
52543: PPUSH
52544: PPUSH
// if mpTeamGame then
52545: LD_EXP 9
52549: IFFALSE 52746
// begin first := depots [ 1 ] ;
52551: LD_ADDR_VAR 0 4
52555: PUSH
52556: LD_VAR 0 1
52560: PUSH
52561: LD_INT 1
52563: ARRAY
52564: ST_TO_ADDR
// side := GetSide ( first ) ;
52565: LD_ADDR_VAR 0 6
52569: PUSH
52570: LD_VAR 0 4
52574: PPUSH
52575: CALL_OW 255
52579: ST_TO_ADDR
// for i := 1 to mpTeams do
52580: LD_ADDR_VAR 0 3
52584: PUSH
52585: DOUBLE
52586: LD_INT 1
52588: DEC
52589: ST_TO_ADDR
52590: LD_EXP 8
52594: PUSH
52595: FOR_TO
52596: IFFALSE 52630
// if side in mpTeams [ i ] then
52598: LD_VAR 0 6
52602: PUSH
52603: LD_EXP 8
52607: PUSH
52608: LD_VAR 0 3
52612: ARRAY
52613: IN
52614: IFFALSE 52628
// begin team := i ;
52616: LD_ADDR_VAR 0 5
52620: PUSH
52621: LD_VAR 0 3
52625: ST_TO_ADDR
// break ;
52626: GO 52630
// end ;
52628: GO 52595
52630: POP
52631: POP
// if not team then
52632: LD_VAR 0 5
52636: NOT
52637: IFFALSE 52641
// exit ;
52639: GO 52855
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52641: LD_EXP 31
52645: PPUSH
52646: LD_INT 81
52648: PUSH
52649: LD_VAR 0 6
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PPUSH
52658: CALL_OW 70
52662: IFFALSE 52666
// exit ;
52664: GO 52855
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52666: LD_ADDR_EXP 41
52670: PUSH
52671: LD_EXP 41
52675: PPUSH
52676: LD_VAR 0 5
52680: PPUSH
52681: LD_EXP 41
52685: PUSH
52686: LD_VAR 0 5
52690: ARRAY
52691: PUSH
52692: LD_INT 1
52694: PLUS
52695: PPUSH
52696: CALL_OW 1
52700: ST_TO_ADDR
// for i in mpTeams [ team ] do
52701: LD_ADDR_VAR 0 3
52705: PUSH
52706: LD_EXP 8
52710: PUSH
52711: LD_VAR 0 5
52715: ARRAY
52716: PUSH
52717: FOR_IN
52718: IFFALSE 52742
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52720: LD_VAR 0 3
52724: PPUSH
52725: LD_EXP 41
52729: PUSH
52730: LD_VAR 0 5
52734: ARRAY
52735: PPUSH
52736: CALL_OW 506
52740: GO 52717
52742: POP
52743: POP
// end else
52744: GO 52855
// begin first := depots [ 1 ] ;
52746: LD_ADDR_VAR 0 4
52750: PUSH
52751: LD_VAR 0 1
52755: PUSH
52756: LD_INT 1
52758: ARRAY
52759: ST_TO_ADDR
// side := GetSide ( first ) ;
52760: LD_ADDR_VAR 0 6
52764: PUSH
52765: LD_VAR 0 4
52769: PPUSH
52770: CALL_OW 255
52774: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52775: LD_EXP 31
52779: PPUSH
52780: LD_INT 81
52782: PUSH
52783: LD_VAR 0 6
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PPUSH
52792: CALL_OW 70
52796: IFFALSE 52800
// exit ;
52798: GO 52855
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
52800: LD_ADDR_EXP 41
52804: PUSH
52805: LD_EXP 41
52809: PPUSH
52810: LD_VAR 0 6
52814: PPUSH
52815: LD_EXP 41
52819: PUSH
52820: LD_VAR 0 6
52824: ARRAY
52825: PUSH
52826: LD_INT 1
52828: PLUS
52829: PPUSH
52830: CALL_OW 1
52834: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
52835: LD_VAR 0 6
52839: PPUSH
52840: LD_EXP 41
52844: PUSH
52845: LD_VAR 0 6
52849: ARRAY
52850: PPUSH
52851: CALL_OW 506
// end ; end ;
52855: LD_VAR 0 2
52859: RET
// function UpdateCounter ; var i ; begin
52860: LD_INT 0
52862: PPUSH
52863: PPUSH
// result := [ ] ;
52864: LD_ADDR_VAR 0 1
52868: PUSH
52869: EMPTY
52870: ST_TO_ADDR
// if mpTeamGame then
52871: LD_EXP 9
52875: IFFALSE 52942
// begin for i := 1 to mpTeams do
52877: LD_ADDR_VAR 0 2
52881: PUSH
52882: DOUBLE
52883: LD_INT 1
52885: DEC
52886: ST_TO_ADDR
52887: LD_EXP 8
52891: PUSH
52892: FOR_TO
52893: IFFALSE 52938
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
52895: LD_ADDR_VAR 0 1
52899: PUSH
52900: LD_VAR 0 1
52904: PUSH
52905: LD_STRING #KingoftheHill-Team
52907: PUSH
52908: LD_VAR 0 2
52912: PUSH
52913: LD_EXP 41
52917: PUSH
52918: LD_VAR 0 2
52922: ARRAY
52923: PUSH
52924: LD_EXP 32
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: ADD
52935: ST_TO_ADDR
52936: GO 52892
52938: POP
52939: POP
// end else
52940: GO 53015
// begin for i := 1 to 8 do
52942: LD_ADDR_VAR 0 2
52946: PUSH
52947: DOUBLE
52948: LD_INT 1
52950: DEC
52951: ST_TO_ADDR
52952: LD_INT 8
52954: PUSH
52955: FOR_TO
52956: IFFALSE 53013
// if mpSidePositions [ i ] then
52958: LD_EXP 5
52962: PUSH
52963: LD_VAR 0 2
52967: ARRAY
52968: IFFALSE 53011
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
52970: LD_ADDR_VAR 0 1
52974: PUSH
52975: LD_VAR 0 1
52979: PUSH
52980: LD_STRING #KingoftheHill-Player
52982: PUSH
52983: LD_VAR 0 2
52987: PUSH
52988: LD_EXP 41
52992: PUSH
52993: LD_VAR 0 2
52997: ARRAY
52998: PUSH
52999: LD_EXP 32
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: ADD
53010: ST_TO_ADDR
53011: GO 52955
53013: POP
53014: POP
// end ; mpDisplayStrings := result ;
53015: LD_ADDR_EXP 35
53019: PUSH
53020: LD_VAR 0 1
53024: ST_TO_ADDR
// end ;
53025: LD_VAR 0 1
53029: RET
// export function HowMuchPointsKing ( side ) ; begin
53030: LD_INT 0
53032: PPUSH
// result := HowMuchPoints ( side ) ;
53033: LD_ADDR_VAR 0 2
53037: PUSH
53038: LD_VAR 0 1
53042: PPUSH
53043: CALL 53053 0 1
53047: ST_TO_ADDR
// end ;
53048: LD_VAR 0 2
53052: RET
// function HowMuchPoints ( side ) ; var i ; begin
53053: LD_INT 0
53055: PPUSH
53056: PPUSH
// if mpTeamGame then
53057: LD_EXP 9
53061: IFFALSE 53130
// begin for i := 1 to Count ( mpTeams ) do
53063: LD_ADDR_VAR 0 3
53067: PUSH
53068: DOUBLE
53069: LD_INT 1
53071: DEC
53072: ST_TO_ADDR
53073: LD_EXP 8
53077: PPUSH
53078: CALL 4931 0 1
53082: PUSH
53083: FOR_TO
53084: IFFALSE 53126
// begin if side in mpTeams [ i ] then
53086: LD_VAR 0 1
53090: PUSH
53091: LD_EXP 8
53095: PUSH
53096: LD_VAR 0 3
53100: ARRAY
53101: IN
53102: IFFALSE 53124
// begin result := mpKingPoints [ i ] ;
53104: LD_ADDR_VAR 0 2
53108: PUSH
53109: LD_EXP 41
53113: PUSH
53114: LD_VAR 0 3
53118: ARRAY
53119: ST_TO_ADDR
// exit ;
53120: POP
53121: POP
53122: GO 53146
// end ; end ;
53124: GO 53083
53126: POP
53127: POP
// end else
53128: GO 53146
// result := mpKingPoints [ side ] ;
53130: LD_ADDR_VAR 0 2
53134: PUSH
53135: LD_EXP 41
53139: PUSH
53140: LD_VAR 0 1
53144: ARRAY
53145: ST_TO_ADDR
// end ;
53146: LD_VAR 0 2
53150: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
53151: LD_EXP 36
53155: PUSH
53156: CALL 53478 0 0
53160: AND
53161: PUSH
53162: LD_OWVAR 4
53166: AND
53167: IFFALSE 53403
53169: GO 53171
53171: DISABLE
53172: LD_INT 0
53174: PPUSH
53175: PPUSH
// begin canWin := false ;
53176: LD_ADDR_VAR 0 2
53180: PUSH
53181: LD_INT 0
53183: ST_TO_ADDR
// if not HasPower ( your_side ) then
53184: LD_OWVAR 2
53188: PPUSH
53189: CALL 53518 0 1
53193: NOT
53194: IFFALSE 53205
// begin Multiplayer_Loose_Message ;
53196: CALL_OW 521
// enable ( mpLose ) ;
53200: LD_INT 102
53202: ENABLE_MARKED
// end else
53203: GO 53403
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
53205: LD_ADDR_VAR 0 2
53209: PUSH
53210: LD_OWVAR 2
53214: PPUSH
53215: CALL 53053 0 1
53219: PUSH
53220: LD_EXP 32
53224: GREATEREQUAL
53225: PUSH
53226: LD_OWVAR 2
53230: PPUSH
53231: CALL 53518 0 1
53235: AND
53236: PUSH
53237: CALL 53406 0 0
53241: NOT
53242: OR
53243: ST_TO_ADDR
// for i := 1 to 8 do
53244: LD_ADDR_VAR 0 1
53248: PUSH
53249: DOUBLE
53250: LD_INT 1
53252: DEC
53253: ST_TO_ADDR
53254: LD_INT 8
53256: PUSH
53257: FOR_TO
53258: IFFALSE 53389
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53260: LD_EXP 5
53264: PUSH
53265: LD_VAR 0 1
53269: ARRAY
53270: PUSH
53271: LD_VAR 0 1
53275: PPUSH
53276: CALL_OW 108
53280: AND
53281: PUSH
53282: LD_VAR 0 1
53286: PUSH
53287: LD_OWVAR 2
53291: NONEQUAL
53292: AND
53293: IFFALSE 53387
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53295: LD_EXP 6
53299: PUSH
53300: LD_VAR 0 1
53304: ARRAY
53305: NOT
53306: PUSH
53307: LD_EXP 6
53311: PUSH
53312: LD_VAR 0 1
53316: ARRAY
53317: PUSH
53318: LD_EXP 6
53322: PUSH
53323: LD_OWVAR 2
53327: ARRAY
53328: NONEQUAL
53329: PUSH
53330: LD_OWVAR 2
53334: PPUSH
53335: LD_VAR 0 1
53339: PPUSH
53340: CALL_OW 81
53344: PUSH
53345: LD_INT 1
53347: NONEQUAL
53348: AND
53349: OR
53350: IFFALSE 53387
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53352: LD_VAR 0 1
53356: PPUSH
53357: CALL 53053 0 1
53361: PUSH
53362: LD_EXP 32
53366: GREATEREQUAL
53367: PUSH
53368: LD_VAR 0 1
53372: PPUSH
53373: CALL 53518 0 1
53377: AND
53378: IFFALSE 53387
// begin enable ( mpLose ) ;
53380: LD_INT 102
53382: ENABLE_MARKED
// exit ;
53383: POP
53384: POP
53385: GO 53403
// end ;
53387: GO 53257
53389: POP
53390: POP
// if canWin then
53391: LD_VAR 0 2
53395: IFFALSE 53402
// enable ( mpWin ) else
53397: LD_INT 101
53399: ENABLE_MARKED
53400: GO 53403
// enable ;
53402: ENABLE
// end ; end ;
53403: PPOPN 2
53405: END
// function EnemiesInGame ; var i ; begin
53406: LD_INT 0
53408: PPUSH
53409: PPUSH
// result := false ;
53410: LD_ADDR_VAR 0 1
53414: PUSH
53415: LD_INT 0
53417: ST_TO_ADDR
// for i := 1 to 8 do
53418: LD_ADDR_VAR 0 2
53422: PUSH
53423: DOUBLE
53424: LD_INT 1
53426: DEC
53427: ST_TO_ADDR
53428: LD_INT 8
53430: PUSH
53431: FOR_TO
53432: IFFALSE 53471
// if i <> your_side and HasPower ( i ) then
53434: LD_VAR 0 2
53438: PUSH
53439: LD_OWVAR 2
53443: NONEQUAL
53444: PUSH
53445: LD_VAR 0 2
53449: PPUSH
53450: CALL 53518 0 1
53454: AND
53455: IFFALSE 53469
// begin result := true ;
53457: LD_ADDR_VAR 0 1
53461: PUSH
53462: LD_INT 1
53464: ST_TO_ADDR
// exit ;
53465: POP
53466: POP
53467: GO 53473
// end ;
53469: GO 53431
53471: POP
53472: POP
// end ;
53473: LD_VAR 0 1
53477: RET
// function CanWinLoose ; begin
53478: LD_INT 0
53480: PPUSH
// result := true ;
53481: LD_ADDR_VAR 0 1
53485: PUSH
53486: LD_INT 1
53488: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53489: CALL_OW 531
53493: PUSH
53494: CALL_OW 519
53498: PUSH
53499: LD_INT 1
53501: GREATER
53502: AND
53503: IFFALSE 53513
// result := false ;
53505: LD_ADDR_VAR 0 1
53509: PUSH
53510: LD_INT 0
53512: ST_TO_ADDR
// end ;
53513: LD_VAR 0 1
53517: RET
// function HasPower ( i ) ; begin
53518: LD_INT 0
53520: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53521: LD_ADDR_VAR 0 2
53525: PUSH
53526: LD_INT 22
53528: PUSH
53529: LD_VAR 0 1
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: LD_INT 21
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 33
53553: PUSH
53554: LD_INT 3
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 33
53563: PUSH
53564: LD_INT 5
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PPUSH
53581: CALL_OW 69
53585: ST_TO_ADDR
// end ; end_of_file end_of_file
53586: LD_VAR 0 2
53590: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53591: LD_VAR 0 1
53595: PUSH
53596: LD_INT 200
53598: DOUBLE
53599: GREATEREQUAL
53600: IFFALSE 53608
53602: LD_INT 299
53604: DOUBLE
53605: LESSEQUAL
53606: IFTRUE 53610
53608: GO 53642
53610: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53611: LD_VAR 0 1
53615: PPUSH
53616: LD_VAR 0 2
53620: PPUSH
53621: LD_VAR 0 3
53625: PPUSH
53626: LD_VAR 0 4
53630: PPUSH
53631: LD_VAR 0 5
53635: PPUSH
53636: CALL 54339 0 5
53640: GO 53719
53642: LD_INT 300
53644: DOUBLE
53645: GREATEREQUAL
53646: IFFALSE 53654
53648: LD_INT 399
53650: DOUBLE
53651: LESSEQUAL
53652: IFTRUE 53656
53654: GO 53718
53656: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53657: LD_VAR 0 1
53661: PPUSH
53662: LD_VAR 0 2
53666: PPUSH
53667: LD_VAR 0 3
53671: PPUSH
53672: LD_VAR 0 4
53676: PPUSH
53677: LD_VAR 0 5
53681: PPUSH
53682: LD_VAR 0 6
53686: PPUSH
53687: LD_VAR 0 7
53691: PPUSH
53692: LD_VAR 0 8
53696: PPUSH
53697: LD_VAR 0 9
53701: PPUSH
53702: LD_VAR 0 10
53706: PPUSH
53707: LD_VAR 0 11
53711: PPUSH
53712: CALL 59086 0 11
53716: GO 53719
53718: POP
// end ;
53719: PPOPN 11
53721: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53722: LD_VAR 0 1
53726: PPUSH
53727: LD_VAR 0 2
53731: PPUSH
53732: LD_VAR 0 3
53736: PPUSH
53737: LD_VAR 0 4
53741: PPUSH
53742: LD_VAR 0 5
53746: PPUSH
53747: CALL 53804 0 5
// end ; end_of_file
53751: PPOPN 5
53753: END
// export function SOS_UnitDestroyed ( un ) ; begin
53754: LD_INT 0
53756: PPUSH
// ComRadiation ( un ) ;
53757: LD_VAR 0 1
53761: PPUSH
53762: CALL 54743 0 1
// end ;
53766: LD_VAR 0 2
53770: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53771: LD_INT 0
53773: PPUSH
// ComRadiation ( un ) ;
53774: LD_VAR 0 1
53778: PPUSH
53779: CALL 54743 0 1
// end ;
53783: LD_VAR 0 2
53787: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53788: LD_INT 0
53790: PPUSH
// end ;
53791: LD_VAR 0 4
53795: RET
// export function SOS_Command ( cmd ) ; begin
53796: LD_INT 0
53798: PPUSH
// end ;
53799: LD_VAR 0 2
53803: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53804: LD_INT 0
53806: PPUSH
// end ;
53807: LD_VAR 0 6
53811: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
53812: LD_INT 0
53814: PPUSH
53815: PPUSH
53816: PPUSH
53817: PPUSH
53818: PPUSH
// if not vehicle or not factory then
53819: LD_VAR 0 1
53823: NOT
53824: PUSH
53825: LD_VAR 0 2
53829: NOT
53830: OR
53831: IFFALSE 53835
// exit ;
53833: GO 54334
// if not factoryWaypoints then
53835: LD_EXP 52
53839: NOT
53840: IFFALSE 53844
// exit ;
53842: GO 54334
// for i := 1 to Count ( factoryWaypoints ) do
53844: LD_ADDR_VAR 0 4
53848: PUSH
53849: DOUBLE
53850: LD_INT 1
53852: DEC
53853: ST_TO_ADDR
53854: LD_EXP 52
53858: PPUSH
53859: CALL 4931 0 1
53863: PUSH
53864: FOR_TO
53865: IFFALSE 54332
// if factoryWaypoints [ i ] [ 2 ] = factory then
53867: LD_EXP 52
53871: PUSH
53872: LD_VAR 0 4
53876: ARRAY
53877: PUSH
53878: LD_INT 2
53880: ARRAY
53881: PUSH
53882: LD_VAR 0 2
53886: EQUAL
53887: IFFALSE 54330
// begin if GetControl ( vehicle ) = control_manual then
53889: LD_VAR 0 1
53893: PPUSH
53894: CALL_OW 263
53898: PUSH
53899: LD_INT 1
53901: EQUAL
53902: IFFALSE 54213
// begin driver := IsDrivenBy ( vehicle ) ;
53904: LD_ADDR_VAR 0 6
53908: PUSH
53909: LD_VAR 0 1
53913: PPUSH
53914: CALL_OW 311
53918: ST_TO_ADDR
// tag := GetTag ( driver ) ;
53919: LD_ADDR_VAR 0 5
53923: PUSH
53924: LD_VAR 0 6
53928: PPUSH
53929: CALL_OW 110
53933: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
53934: LD_VAR 0 5
53938: PUSH
53939: LD_INT 501
53941: EQUAL
53942: PUSH
53943: LD_VAR 0 1
53947: PPUSH
53948: CALL_OW 110
53952: PUSH
53953: LD_INT 501
53955: EQUAL
53956: OR
53957: IFFALSE 53963
// exit ;
53959: POP
53960: POP
53961: GO 54334
// if not HasTask ( driver ) then
53963: LD_VAR 0 6
53967: PPUSH
53968: CALL_OW 314
53972: NOT
53973: IFFALSE 54211
// begin SetTag ( driver , tDriver ) ;
53975: LD_VAR 0 6
53979: PPUSH
53980: LD_INT 501
53982: PPUSH
53983: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
53987: LD_VAR 0 1
53991: PPUSH
53992: LD_INT 501
53994: PPUSH
53995: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53999: LD_ADDR_VAR 0 7
54003: PUSH
54004: LD_EXP 52
54008: PUSH
54009: LD_VAR 0 4
54013: ARRAY
54014: PUSH
54015: LD_INT 3
54017: ARRAY
54018: PPUSH
54019: LD_EXP 52
54023: PUSH
54024: LD_VAR 0 4
54028: ARRAY
54029: PUSH
54030: LD_INT 4
54032: ARRAY
54033: PPUSH
54034: CALL_OW 428
54038: ST_TO_ADDR
// if hex then
54039: LD_VAR 0 7
54043: IFFALSE 54061
// ComMoveUnit ( driver , hex ) else
54045: LD_VAR 0 6
54049: PPUSH
54050: LD_VAR 0 7
54054: PPUSH
54055: CALL_OW 112
54059: GO 54100
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54061: LD_VAR 0 6
54065: PPUSH
54066: LD_EXP 52
54070: PUSH
54071: LD_VAR 0 4
54075: ARRAY
54076: PUSH
54077: LD_INT 3
54079: ARRAY
54080: PPUSH
54081: LD_EXP 52
54085: PUSH
54086: LD_VAR 0 4
54090: ARRAY
54091: PUSH
54092: LD_INT 4
54094: ARRAY
54095: PPUSH
54096: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54100: LD_VAR 0 6
54104: PPUSH
54105: CALL_OW 181
// if Multiplayer then
54109: LD_OWVAR 4
54113: IFFALSE 54162
// begin repeat wait ( 10 ) ;
54115: LD_INT 10
54117: PPUSH
54118: CALL_OW 67
// until not IsInUnit ( driver ) ;
54122: LD_VAR 0 6
54126: PPUSH
54127: CALL_OW 310
54131: NOT
54132: IFFALSE 54115
// if not HasTask ( driver ) then
54134: LD_VAR 0 6
54138: PPUSH
54139: CALL_OW 314
54143: NOT
54144: IFFALSE 54160
// ComEnterUnit ( driver , factory ) ;
54146: LD_VAR 0 6
54150: PPUSH
54151: LD_VAR 0 2
54155: PPUSH
54156: CALL_OW 120
// end else
54160: GO 54176
// AddComEnterUnit ( driver , factory ) ;
54162: LD_VAR 0 6
54166: PPUSH
54167: LD_VAR 0 2
54171: PPUSH
54172: CALL_OW 180
// wait ( 0 0$1 ) ;
54176: LD_INT 35
54178: PPUSH
54179: CALL_OW 67
// SetTag ( driver , tag ) ;
54183: LD_VAR 0 6
54187: PPUSH
54188: LD_VAR 0 5
54192: PPUSH
54193: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
54197: LD_VAR 0 1
54201: PPUSH
54202: LD_INT 0
54204: PPUSH
54205: CALL_OW 109
// break ;
54209: GO 54332
// end ; end else
54211: GO 54330
// if GetControl ( vehicle ) = control_remote then
54213: LD_VAR 0 1
54217: PPUSH
54218: CALL_OW 263
54222: PUSH
54223: LD_INT 2
54225: EQUAL
54226: IFFALSE 54289
// begin wait ( 0 0$2 ) ;
54228: LD_INT 70
54230: PPUSH
54231: CALL_OW 67
// if Connect ( vehicle ) then
54235: LD_VAR 0 1
54239: PPUSH
54240: CALL 11137 0 1
54244: IFFALSE 54285
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54246: LD_VAR 0 1
54250: PPUSH
54251: LD_EXP 52
54255: PUSH
54256: LD_VAR 0 4
54260: ARRAY
54261: PUSH
54262: LD_INT 3
54264: ARRAY
54265: PPUSH
54266: LD_EXP 52
54270: PUSH
54271: LD_VAR 0 4
54275: ARRAY
54276: PUSH
54277: LD_INT 4
54279: ARRAY
54280: PPUSH
54281: CALL_OW 171
// break ;
54285: GO 54332
// end else
54287: GO 54330
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54289: LD_VAR 0 1
54293: PPUSH
54294: LD_EXP 52
54298: PUSH
54299: LD_VAR 0 4
54303: ARRAY
54304: PUSH
54305: LD_INT 3
54307: ARRAY
54308: PPUSH
54309: LD_EXP 52
54313: PUSH
54314: LD_VAR 0 4
54318: ARRAY
54319: PUSH
54320: LD_INT 4
54322: ARRAY
54323: PPUSH
54324: CALL_OW 171
// break ;
54328: GO 54332
// end ; end ;
54330: GO 53864
54332: POP
54333: POP
// end ;
54334: LD_VAR 0 3
54338: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54339: LD_INT 0
54341: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54342: LD_VAR 0 1
54346: PUSH
54347: LD_INT 250
54349: EQUAL
54350: PUSH
54351: LD_VAR 0 2
54355: PPUSH
54356: CALL_OW 264
54360: PUSH
54361: LD_INT 81
54363: EQUAL
54364: AND
54365: IFFALSE 54386
// MinerPlaceMine ( unit , x , y ) ;
54367: LD_VAR 0 2
54371: PPUSH
54372: LD_VAR 0 4
54376: PPUSH
54377: LD_VAR 0 5
54381: PPUSH
54382: CALL 57478 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54386: LD_VAR 0 1
54390: PUSH
54391: LD_INT 251
54393: EQUAL
54394: PUSH
54395: LD_VAR 0 2
54399: PPUSH
54400: CALL_OW 264
54404: PUSH
54405: LD_INT 81
54407: EQUAL
54408: AND
54409: IFFALSE 54430
// MinerDetonateMine ( unit , x , y ) ;
54411: LD_VAR 0 2
54415: PPUSH
54416: LD_VAR 0 4
54420: PPUSH
54421: LD_VAR 0 5
54425: PPUSH
54426: CALL 57753 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54430: LD_VAR 0 1
54434: PUSH
54435: LD_INT 252
54437: EQUAL
54438: PUSH
54439: LD_VAR 0 2
54443: PPUSH
54444: CALL_OW 264
54448: PUSH
54449: LD_INT 81
54451: EQUAL
54452: AND
54453: IFFALSE 54474
// MinerCreateMinefield ( unit , x , y ) ;
54455: LD_VAR 0 2
54459: PPUSH
54460: LD_VAR 0 4
54464: PPUSH
54465: LD_VAR 0 5
54469: PPUSH
54470: CALL 58170 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54474: LD_VAR 0 1
54478: PUSH
54479: LD_INT 253
54481: EQUAL
54482: PUSH
54483: LD_VAR 0 2
54487: PPUSH
54488: CALL_OW 257
54492: PUSH
54493: LD_INT 5
54495: EQUAL
54496: AND
54497: IFFALSE 54518
// ComBinocular ( unit , x , y ) ;
54499: LD_VAR 0 2
54503: PPUSH
54504: LD_VAR 0 4
54508: PPUSH
54509: LD_VAR 0 5
54513: PPUSH
54514: CALL 58539 0 3
// if selectedUnit then
54518: LD_VAR 0 3
54522: IFFALSE 54578
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54524: LD_VAR 0 1
54528: PUSH
54529: LD_INT 254
54531: EQUAL
54532: PUSH
54533: LD_VAR 0 2
54537: PPUSH
54538: CALL_OW 264
54542: PUSH
54543: LD_INT 99
54545: EQUAL
54546: AND
54547: PUSH
54548: LD_VAR 0 3
54552: PPUSH
54553: CALL_OW 263
54557: PUSH
54558: LD_INT 3
54560: EQUAL
54561: AND
54562: IFFALSE 54578
// HackDestroyVehicle ( unit , selectedUnit ) ;
54564: LD_VAR 0 2
54568: PPUSH
54569: LD_VAR 0 3
54573: PPUSH
54574: CALL 56842 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54578: LD_VAR 0 1
54582: PUSH
54583: LD_INT 255
54585: EQUAL
54586: PUSH
54587: LD_VAR 0 2
54591: PPUSH
54592: CALL_OW 264
54596: PUSH
54597: LD_INT 14
54599: PUSH
54600: LD_INT 53
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: IN
54607: AND
54608: PUSH
54609: LD_VAR 0 4
54613: PPUSH
54614: LD_VAR 0 5
54618: PPUSH
54619: CALL_OW 488
54623: AND
54624: IFFALSE 54648
// CutTreeXYR ( unit , x , y , 12 ) ;
54626: LD_VAR 0 2
54630: PPUSH
54631: LD_VAR 0 4
54635: PPUSH
54636: LD_VAR 0 5
54640: PPUSH
54641: LD_INT 12
54643: PPUSH
54644: CALL 54839 0 4
// if cmd = 256 then
54648: LD_VAR 0 1
54652: PUSH
54653: LD_INT 256
54655: EQUAL
54656: IFFALSE 54677
// SetFactoryWaypoint ( unit , x , y ) ;
54658: LD_VAR 0 2
54662: PPUSH
54663: LD_VAR 0 4
54667: PPUSH
54668: LD_VAR 0 5
54672: PPUSH
54673: CALL 59094 0 3
// if cmd = 257 then
54677: LD_VAR 0 1
54681: PUSH
54682: LD_INT 257
54684: EQUAL
54685: IFFALSE 54706
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54687: LD_VAR 0 2
54691: PPUSH
54692: LD_VAR 0 4
54696: PPUSH
54697: LD_VAR 0 5
54701: PPUSH
54702: CALL 59584 0 3
// if cmd = 258 then
54706: LD_VAR 0 1
54710: PUSH
54711: LD_INT 258
54713: EQUAL
54714: IFFALSE 54738
// BurnTreeXYR ( unit , x , y , 8 ) ;
54716: LD_VAR 0 2
54720: PPUSH
54721: LD_VAR 0 4
54725: PPUSH
54726: LD_VAR 0 5
54730: PPUSH
54731: LD_INT 8
54733: PPUSH
54734: CALL 55233 0 4
// end ;
54738: LD_VAR 0 6
54742: RET
// export function ComRadiation ( un ) ; var eff ; begin
54743: LD_INT 0
54745: PPUSH
54746: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54747: LD_VAR 0 1
54751: PPUSH
54752: CALL_OW 264
54756: PUSH
54757: LD_INT 91
54759: NONEQUAL
54760: IFFALSE 54764
// exit ;
54762: GO 54834
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54764: LD_INT 68
54766: PPUSH
54767: LD_VAR 0 1
54771: PPUSH
54772: CALL_OW 255
54776: PPUSH
54777: CALL_OW 321
54781: PUSH
54782: LD_INT 2
54784: EQUAL
54785: IFFALSE 54797
// eff := 70 else
54787: LD_ADDR_VAR 0 3
54791: PUSH
54792: LD_INT 70
54794: ST_TO_ADDR
54795: GO 54805
// eff := 30 ;
54797: LD_ADDR_VAR 0 3
54801: PUSH
54802: LD_INT 30
54804: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54805: LD_VAR 0 1
54809: PPUSH
54810: CALL_OW 250
54814: PPUSH
54815: LD_VAR 0 1
54819: PPUSH
54820: CALL_OW 251
54824: PPUSH
54825: LD_VAR 0 3
54829: PPUSH
54830: CALL_OW 495
// end ;
54834: LD_VAR 0 2
54838: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54839: LD_INT 0
54841: PPUSH
54842: PPUSH
54843: PPUSH
54844: PPUSH
54845: PPUSH
54846: PPUSH
54847: PPUSH
54848: PPUSH
54849: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54850: LD_VAR 0 1
54854: PPUSH
54855: CALL_OW 302
54859: NOT
54860: PUSH
54861: LD_VAR 0 2
54865: PPUSH
54866: LD_VAR 0 3
54870: PPUSH
54871: CALL_OW 488
54875: NOT
54876: OR
54877: PUSH
54878: LD_VAR 0 4
54882: NOT
54883: OR
54884: IFFALSE 54888
// exit ;
54886: GO 55228
// list := [ ] ;
54888: LD_ADDR_VAR 0 13
54892: PUSH
54893: EMPTY
54894: ST_TO_ADDR
// if x - r < 0 then
54895: LD_VAR 0 2
54899: PUSH
54900: LD_VAR 0 4
54904: MINUS
54905: PUSH
54906: LD_INT 0
54908: LESS
54909: IFFALSE 54921
// min_x := 0 else
54911: LD_ADDR_VAR 0 7
54915: PUSH
54916: LD_INT 0
54918: ST_TO_ADDR
54919: GO 54937
// min_x := x - r ;
54921: LD_ADDR_VAR 0 7
54925: PUSH
54926: LD_VAR 0 2
54930: PUSH
54931: LD_VAR 0 4
54935: MINUS
54936: ST_TO_ADDR
// if y - r < 0 then
54937: LD_VAR 0 3
54941: PUSH
54942: LD_VAR 0 4
54946: MINUS
54947: PUSH
54948: LD_INT 0
54950: LESS
54951: IFFALSE 54963
// min_y := 0 else
54953: LD_ADDR_VAR 0 8
54957: PUSH
54958: LD_INT 0
54960: ST_TO_ADDR
54961: GO 54979
// min_y := y - r ;
54963: LD_ADDR_VAR 0 8
54967: PUSH
54968: LD_VAR 0 3
54972: PUSH
54973: LD_VAR 0 4
54977: MINUS
54978: ST_TO_ADDR
// max_x := x + r ;
54979: LD_ADDR_VAR 0 9
54983: PUSH
54984: LD_VAR 0 2
54988: PUSH
54989: LD_VAR 0 4
54993: PLUS
54994: ST_TO_ADDR
// max_y := y + r ;
54995: LD_ADDR_VAR 0 10
54999: PUSH
55000: LD_VAR 0 3
55004: PUSH
55005: LD_VAR 0 4
55009: PLUS
55010: ST_TO_ADDR
// for _x = min_x to max_x do
55011: LD_ADDR_VAR 0 11
55015: PUSH
55016: DOUBLE
55017: LD_VAR 0 7
55021: DEC
55022: ST_TO_ADDR
55023: LD_VAR 0 9
55027: PUSH
55028: FOR_TO
55029: IFFALSE 55146
// for _y = min_y to max_y do
55031: LD_ADDR_VAR 0 12
55035: PUSH
55036: DOUBLE
55037: LD_VAR 0 8
55041: DEC
55042: ST_TO_ADDR
55043: LD_VAR 0 10
55047: PUSH
55048: FOR_TO
55049: IFFALSE 55142
// begin if not ValidHex ( _x , _y ) then
55051: LD_VAR 0 11
55055: PPUSH
55056: LD_VAR 0 12
55060: PPUSH
55061: CALL_OW 488
55065: NOT
55066: IFFALSE 55070
// continue ;
55068: GO 55048
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55070: LD_VAR 0 11
55074: PPUSH
55075: LD_VAR 0 12
55079: PPUSH
55080: CALL_OW 351
55084: PUSH
55085: LD_VAR 0 11
55089: PPUSH
55090: LD_VAR 0 12
55094: PPUSH
55095: CALL_OW 554
55099: AND
55100: IFFALSE 55140
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55102: LD_ADDR_VAR 0 13
55106: PUSH
55107: LD_VAR 0 13
55111: PPUSH
55112: LD_VAR 0 13
55116: PUSH
55117: LD_INT 1
55119: PLUS
55120: PPUSH
55121: LD_VAR 0 11
55125: PUSH
55126: LD_VAR 0 12
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PPUSH
55135: CALL_OW 2
55139: ST_TO_ADDR
// end ;
55140: GO 55048
55142: POP
55143: POP
55144: GO 55028
55146: POP
55147: POP
// if not list then
55148: LD_VAR 0 13
55152: NOT
55153: IFFALSE 55157
// exit ;
55155: GO 55228
// for i in list do
55157: LD_ADDR_VAR 0 6
55161: PUSH
55162: LD_VAR 0 13
55166: PUSH
55167: FOR_IN
55168: IFFALSE 55226
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55170: LD_VAR 0 1
55174: PPUSH
55175: LD_STRING M
55177: PUSH
55178: LD_VAR 0 6
55182: PUSH
55183: LD_INT 1
55185: ARRAY
55186: PUSH
55187: LD_VAR 0 6
55191: PUSH
55192: LD_INT 2
55194: ARRAY
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: PUSH
55217: EMPTY
55218: LIST
55219: PPUSH
55220: CALL_OW 447
55224: GO 55167
55226: POP
55227: POP
// end ;
55228: LD_VAR 0 5
55232: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55233: LD_INT 0
55235: PPUSH
55236: PPUSH
55237: PPUSH
55238: PPUSH
55239: PPUSH
55240: PPUSH
55241: PPUSH
55242: PPUSH
55243: PPUSH
55244: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55245: LD_VAR 0 1
55249: PPUSH
55250: CALL_OW 302
55254: NOT
55255: PUSH
55256: LD_VAR 0 2
55260: PPUSH
55261: LD_VAR 0 3
55265: PPUSH
55266: CALL_OW 488
55270: NOT
55271: OR
55272: PUSH
55273: LD_VAR 0 4
55277: NOT
55278: OR
55279: IFFALSE 55283
// exit ;
55281: GO 55796
// list := [ ] ;
55283: LD_ADDR_VAR 0 13
55287: PUSH
55288: EMPTY
55289: ST_TO_ADDR
// if x - r < 0 then
55290: LD_VAR 0 2
55294: PUSH
55295: LD_VAR 0 4
55299: MINUS
55300: PUSH
55301: LD_INT 0
55303: LESS
55304: IFFALSE 55316
// min_x := 0 else
55306: LD_ADDR_VAR 0 7
55310: PUSH
55311: LD_INT 0
55313: ST_TO_ADDR
55314: GO 55332
// min_x := x - r ;
55316: LD_ADDR_VAR 0 7
55320: PUSH
55321: LD_VAR 0 2
55325: PUSH
55326: LD_VAR 0 4
55330: MINUS
55331: ST_TO_ADDR
// if y - r < 0 then
55332: LD_VAR 0 3
55336: PUSH
55337: LD_VAR 0 4
55341: MINUS
55342: PUSH
55343: LD_INT 0
55345: LESS
55346: IFFALSE 55358
// min_y := 0 else
55348: LD_ADDR_VAR 0 8
55352: PUSH
55353: LD_INT 0
55355: ST_TO_ADDR
55356: GO 55374
// min_y := y - r ;
55358: LD_ADDR_VAR 0 8
55362: PUSH
55363: LD_VAR 0 3
55367: PUSH
55368: LD_VAR 0 4
55372: MINUS
55373: ST_TO_ADDR
// max_x := x + r ;
55374: LD_ADDR_VAR 0 9
55378: PUSH
55379: LD_VAR 0 2
55383: PUSH
55384: LD_VAR 0 4
55388: PLUS
55389: ST_TO_ADDR
// max_y := y + r ;
55390: LD_ADDR_VAR 0 10
55394: PUSH
55395: LD_VAR 0 3
55399: PUSH
55400: LD_VAR 0 4
55404: PLUS
55405: ST_TO_ADDR
// for _x = min_x to max_x do
55406: LD_ADDR_VAR 0 11
55410: PUSH
55411: DOUBLE
55412: LD_VAR 0 7
55416: DEC
55417: ST_TO_ADDR
55418: LD_VAR 0 9
55422: PUSH
55423: FOR_TO
55424: IFFALSE 55541
// for _y = min_y to max_y do
55426: LD_ADDR_VAR 0 12
55430: PUSH
55431: DOUBLE
55432: LD_VAR 0 8
55436: DEC
55437: ST_TO_ADDR
55438: LD_VAR 0 10
55442: PUSH
55443: FOR_TO
55444: IFFALSE 55537
// begin if not ValidHex ( _x , _y ) then
55446: LD_VAR 0 11
55450: PPUSH
55451: LD_VAR 0 12
55455: PPUSH
55456: CALL_OW 488
55460: NOT
55461: IFFALSE 55465
// continue ;
55463: GO 55443
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55465: LD_VAR 0 11
55469: PPUSH
55470: LD_VAR 0 12
55474: PPUSH
55475: CALL_OW 351
55479: PUSH
55480: LD_VAR 0 11
55484: PPUSH
55485: LD_VAR 0 12
55489: PPUSH
55490: CALL_OW 554
55494: AND
55495: IFFALSE 55535
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55497: LD_ADDR_VAR 0 13
55501: PUSH
55502: LD_VAR 0 13
55506: PPUSH
55507: LD_VAR 0 13
55511: PUSH
55512: LD_INT 1
55514: PLUS
55515: PPUSH
55516: LD_VAR 0 11
55520: PUSH
55521: LD_VAR 0 12
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PPUSH
55530: CALL_OW 2
55534: ST_TO_ADDR
// end ;
55535: GO 55443
55537: POP
55538: POP
55539: GO 55423
55541: POP
55542: POP
// if not list then
55543: LD_VAR 0 13
55547: NOT
55548: IFFALSE 55552
// exit ;
55550: GO 55796
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55552: LD_ADDR_VAR 0 13
55556: PUSH
55557: LD_VAR 0 1
55561: PPUSH
55562: LD_VAR 0 13
55566: PPUSH
55567: LD_INT 1
55569: PPUSH
55570: LD_INT 1
55572: PPUSH
55573: CALL 8279 0 4
55577: ST_TO_ADDR
// ComStop ( flame ) ;
55578: LD_VAR 0 1
55582: PPUSH
55583: CALL_OW 141
// for i in list do
55587: LD_ADDR_VAR 0 6
55591: PUSH
55592: LD_VAR 0 13
55596: PUSH
55597: FOR_IN
55598: IFFALSE 55629
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55600: LD_VAR 0 1
55604: PPUSH
55605: LD_VAR 0 6
55609: PUSH
55610: LD_INT 1
55612: ARRAY
55613: PPUSH
55614: LD_VAR 0 6
55618: PUSH
55619: LD_INT 2
55621: ARRAY
55622: PPUSH
55623: CALL_OW 176
55627: GO 55597
55629: POP
55630: POP
// repeat wait ( 0 0$1 ) ;
55631: LD_INT 35
55633: PPUSH
55634: CALL_OW 67
// task := GetTaskList ( flame ) ;
55638: LD_ADDR_VAR 0 14
55642: PUSH
55643: LD_VAR 0 1
55647: PPUSH
55648: CALL_OW 437
55652: ST_TO_ADDR
// if not task then
55653: LD_VAR 0 14
55657: NOT
55658: IFFALSE 55662
// exit ;
55660: GO 55796
// if task [ 1 ] [ 1 ] <> | then
55662: LD_VAR 0 14
55666: PUSH
55667: LD_INT 1
55669: ARRAY
55670: PUSH
55671: LD_INT 1
55673: ARRAY
55674: PUSH
55675: LD_STRING |
55677: NONEQUAL
55678: IFFALSE 55682
// exit ;
55680: GO 55796
// _x := task [ 1 ] [ 2 ] ;
55682: LD_ADDR_VAR 0 11
55686: PUSH
55687: LD_VAR 0 14
55691: PUSH
55692: LD_INT 1
55694: ARRAY
55695: PUSH
55696: LD_INT 2
55698: ARRAY
55699: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55700: LD_ADDR_VAR 0 12
55704: PUSH
55705: LD_VAR 0 14
55709: PUSH
55710: LD_INT 1
55712: ARRAY
55713: PUSH
55714: LD_INT 3
55716: ARRAY
55717: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55718: LD_VAR 0 11
55722: PPUSH
55723: LD_VAR 0 12
55727: PPUSH
55728: CALL_OW 351
55732: NOT
55733: PUSH
55734: LD_VAR 0 11
55738: PPUSH
55739: LD_VAR 0 12
55743: PPUSH
55744: CALL_OW 554
55748: NOT
55749: OR
55750: IFFALSE 55784
// begin task := Delete ( task , 1 ) ;
55752: LD_ADDR_VAR 0 14
55756: PUSH
55757: LD_VAR 0 14
55761: PPUSH
55762: LD_INT 1
55764: PPUSH
55765: CALL_OW 3
55769: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55770: LD_VAR 0 1
55774: PPUSH
55775: LD_VAR 0 14
55779: PPUSH
55780: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55784: LD_VAR 0 1
55788: PPUSH
55789: CALL_OW 314
55793: NOT
55794: IFFALSE 55631
// end ;
55796: LD_VAR 0 5
55800: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55801: LD_EXP 42
55805: NOT
55806: IFFALSE 55856
55808: GO 55810
55810: DISABLE
// begin initHack := true ;
55811: LD_ADDR_EXP 42
55815: PUSH
55816: LD_INT 1
55818: ST_TO_ADDR
// hackTanks := [ ] ;
55819: LD_ADDR_EXP 43
55823: PUSH
55824: EMPTY
55825: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55826: LD_ADDR_EXP 44
55830: PUSH
55831: EMPTY
55832: ST_TO_ADDR
// hackLimit := 3 ;
55833: LD_ADDR_EXP 45
55837: PUSH
55838: LD_INT 3
55840: ST_TO_ADDR
// hackDist := 12 ;
55841: LD_ADDR_EXP 46
55845: PUSH
55846: LD_INT 12
55848: ST_TO_ADDR
// hackCounter := [ ] ;
55849: LD_ADDR_EXP 47
55853: PUSH
55854: EMPTY
55855: ST_TO_ADDR
// end ;
55856: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55857: LD_EXP 42
55861: PUSH
55862: LD_INT 34
55864: PUSH
55865: LD_INT 99
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PPUSH
55872: CALL_OW 69
55876: AND
55877: IFFALSE 56130
55879: GO 55881
55881: DISABLE
55882: LD_INT 0
55884: PPUSH
55885: PPUSH
// begin enable ;
55886: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55887: LD_ADDR_VAR 0 1
55891: PUSH
55892: LD_INT 34
55894: PUSH
55895: LD_INT 99
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PPUSH
55902: CALL_OW 69
55906: PUSH
55907: FOR_IN
55908: IFFALSE 56128
// begin if not i in hackTanks then
55910: LD_VAR 0 1
55914: PUSH
55915: LD_EXP 43
55919: IN
55920: NOT
55921: IFFALSE 56004
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55923: LD_ADDR_EXP 43
55927: PUSH
55928: LD_EXP 43
55932: PPUSH
55933: LD_EXP 43
55937: PUSH
55938: LD_INT 1
55940: PLUS
55941: PPUSH
55942: LD_VAR 0 1
55946: PPUSH
55947: CALL_OW 1
55951: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55952: LD_ADDR_EXP 44
55956: PUSH
55957: LD_EXP 44
55961: PPUSH
55962: LD_EXP 44
55966: PUSH
55967: LD_INT 1
55969: PLUS
55970: PPUSH
55971: EMPTY
55972: PPUSH
55973: CALL_OW 1
55977: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
55978: LD_ADDR_EXP 47
55982: PUSH
55983: LD_EXP 47
55987: PPUSH
55988: LD_EXP 47
55992: PUSH
55993: LD_INT 1
55995: PLUS
55996: PPUSH
55997: EMPTY
55998: PPUSH
55999: CALL_OW 1
56003: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56004: LD_VAR 0 1
56008: PPUSH
56009: CALL_OW 302
56013: NOT
56014: IFFALSE 56027
// begin HackUnlinkAll ( i ) ;
56016: LD_VAR 0 1
56020: PPUSH
56021: CALL 56133 0 1
// continue ;
56025: GO 55907
// end ; HackCheckCapturedStatus ( i ) ;
56027: LD_VAR 0 1
56031: PPUSH
56032: CALL 56576 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56036: LD_ADDR_VAR 0 2
56040: PUSH
56041: LD_INT 81
56043: PUSH
56044: LD_VAR 0 1
56048: PPUSH
56049: CALL_OW 255
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 33
56060: PUSH
56061: LD_INT 3
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 91
56070: PUSH
56071: LD_VAR 0 1
56075: PUSH
56076: LD_EXP 46
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 50
56088: PUSH
56089: EMPTY
56090: LIST
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: PPUSH
56098: CALL_OW 69
56102: ST_TO_ADDR
// if not tmp then
56103: LD_VAR 0 2
56107: NOT
56108: IFFALSE 56112
// continue ;
56110: GO 55907
// HackLink ( i , tmp ) ;
56112: LD_VAR 0 1
56116: PPUSH
56117: LD_VAR 0 2
56121: PPUSH
56122: CALL 56269 0 2
// end ;
56126: GO 55907
56128: POP
56129: POP
// end ;
56130: PPOPN 2
56132: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56133: LD_INT 0
56135: PPUSH
56136: PPUSH
56137: PPUSH
// if not hack in hackTanks then
56138: LD_VAR 0 1
56142: PUSH
56143: LD_EXP 43
56147: IN
56148: NOT
56149: IFFALSE 56153
// exit ;
56151: GO 56264
// index := GetElementIndex ( hackTanks , hack ) ;
56153: LD_ADDR_VAR 0 4
56157: PUSH
56158: LD_EXP 43
56162: PPUSH
56163: LD_VAR 0 1
56167: PPUSH
56168: CALL 7576 0 2
56172: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56173: LD_EXP 44
56177: PUSH
56178: LD_VAR 0 4
56182: ARRAY
56183: IFFALSE 56264
// begin for i in hackTanksCaptured [ index ] do
56185: LD_ADDR_VAR 0 3
56189: PUSH
56190: LD_EXP 44
56194: PUSH
56195: LD_VAR 0 4
56199: ARRAY
56200: PUSH
56201: FOR_IN
56202: IFFALSE 56228
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56204: LD_VAR 0 3
56208: PUSH
56209: LD_INT 1
56211: ARRAY
56212: PPUSH
56213: LD_VAR 0 3
56217: PUSH
56218: LD_INT 2
56220: ARRAY
56221: PPUSH
56222: CALL_OW 235
56226: GO 56201
56228: POP
56229: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56230: LD_ADDR_EXP 44
56234: PUSH
56235: LD_EXP 44
56239: PPUSH
56240: LD_VAR 0 4
56244: PPUSH
56245: EMPTY
56246: PPUSH
56247: CALL_OW 1
56251: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56252: LD_VAR 0 1
56256: PPUSH
56257: LD_INT 0
56259: PPUSH
56260: CALL_OW 505
// end ; end ;
56264: LD_VAR 0 2
56268: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56269: LD_INT 0
56271: PPUSH
56272: PPUSH
56273: PPUSH
// if not hack in hackTanks or not vehicles then
56274: LD_VAR 0 1
56278: PUSH
56279: LD_EXP 43
56283: IN
56284: NOT
56285: PUSH
56286: LD_VAR 0 2
56290: NOT
56291: OR
56292: IFFALSE 56296
// exit ;
56294: GO 56571
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56296: LD_ADDR_VAR 0 2
56300: PUSH
56301: LD_VAR 0 1
56305: PPUSH
56306: LD_VAR 0 2
56310: PPUSH
56311: LD_INT 1
56313: PPUSH
56314: LD_INT 1
56316: PPUSH
56317: CALL 8226 0 4
56321: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56322: LD_ADDR_VAR 0 5
56326: PUSH
56327: LD_EXP 43
56331: PPUSH
56332: LD_VAR 0 1
56336: PPUSH
56337: CALL 7576 0 2
56341: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56342: LD_EXP 44
56346: PUSH
56347: LD_VAR 0 5
56351: ARRAY
56352: PUSH
56353: LD_EXP 45
56357: LESS
56358: IFFALSE 56547
// begin for i := 1 to vehicles do
56360: LD_ADDR_VAR 0 4
56364: PUSH
56365: DOUBLE
56366: LD_INT 1
56368: DEC
56369: ST_TO_ADDR
56370: LD_VAR 0 2
56374: PUSH
56375: FOR_TO
56376: IFFALSE 56545
// begin if hackTanksCaptured [ index ] = hackLimit then
56378: LD_EXP 44
56382: PUSH
56383: LD_VAR 0 5
56387: ARRAY
56388: PUSH
56389: LD_EXP 45
56393: EQUAL
56394: IFFALSE 56398
// break ;
56396: GO 56545
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56398: LD_ADDR_EXP 47
56402: PUSH
56403: LD_EXP 47
56407: PPUSH
56408: LD_VAR 0 5
56412: PPUSH
56413: LD_EXP 47
56417: PUSH
56418: LD_VAR 0 5
56422: ARRAY
56423: PUSH
56424: LD_INT 1
56426: PLUS
56427: PPUSH
56428: CALL_OW 1
56432: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56433: LD_ADDR_EXP 44
56437: PUSH
56438: LD_EXP 44
56442: PPUSH
56443: LD_VAR 0 5
56447: PUSH
56448: LD_EXP 44
56452: PUSH
56453: LD_VAR 0 5
56457: ARRAY
56458: PUSH
56459: LD_INT 1
56461: PLUS
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PPUSH
56467: LD_VAR 0 2
56471: PUSH
56472: LD_VAR 0 4
56476: ARRAY
56477: PUSH
56478: LD_VAR 0 2
56482: PUSH
56483: LD_VAR 0 4
56487: ARRAY
56488: PPUSH
56489: CALL_OW 255
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PPUSH
56498: CALL 7791 0 3
56502: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56503: LD_VAR 0 2
56507: PUSH
56508: LD_VAR 0 4
56512: ARRAY
56513: PPUSH
56514: LD_VAR 0 1
56518: PPUSH
56519: CALL_OW 255
56523: PPUSH
56524: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56528: LD_VAR 0 2
56532: PUSH
56533: LD_VAR 0 4
56537: ARRAY
56538: PPUSH
56539: CALL_OW 141
// end ;
56543: GO 56375
56545: POP
56546: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56547: LD_VAR 0 1
56551: PPUSH
56552: LD_EXP 44
56556: PUSH
56557: LD_VAR 0 5
56561: ARRAY
56562: PUSH
56563: LD_INT 0
56565: PLUS
56566: PPUSH
56567: CALL_OW 505
// end ;
56571: LD_VAR 0 3
56575: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56576: LD_INT 0
56578: PPUSH
56579: PPUSH
56580: PPUSH
56581: PPUSH
// if not hack in hackTanks then
56582: LD_VAR 0 1
56586: PUSH
56587: LD_EXP 43
56591: IN
56592: NOT
56593: IFFALSE 56597
// exit ;
56595: GO 56837
// index := GetElementIndex ( hackTanks , hack ) ;
56597: LD_ADDR_VAR 0 4
56601: PUSH
56602: LD_EXP 43
56606: PPUSH
56607: LD_VAR 0 1
56611: PPUSH
56612: CALL 7576 0 2
56616: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56617: LD_ADDR_VAR 0 3
56621: PUSH
56622: DOUBLE
56623: LD_EXP 44
56627: PUSH
56628: LD_VAR 0 4
56632: ARRAY
56633: INC
56634: ST_TO_ADDR
56635: LD_INT 1
56637: PUSH
56638: FOR_DOWNTO
56639: IFFALSE 56811
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56641: LD_ADDR_VAR 0 5
56645: PUSH
56646: LD_EXP 44
56650: PUSH
56651: LD_VAR 0 4
56655: ARRAY
56656: PUSH
56657: LD_VAR 0 3
56661: ARRAY
56662: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56663: LD_VAR 0 5
56667: PUSH
56668: LD_INT 1
56670: ARRAY
56671: PPUSH
56672: CALL_OW 302
56676: NOT
56677: PUSH
56678: LD_VAR 0 5
56682: PUSH
56683: LD_INT 1
56685: ARRAY
56686: PPUSH
56687: CALL_OW 255
56691: PUSH
56692: LD_VAR 0 1
56696: PPUSH
56697: CALL_OW 255
56701: NONEQUAL
56702: OR
56703: IFFALSE 56809
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56705: LD_VAR 0 5
56709: PUSH
56710: LD_INT 1
56712: ARRAY
56713: PPUSH
56714: CALL_OW 305
56718: PUSH
56719: LD_VAR 0 5
56723: PUSH
56724: LD_INT 1
56726: ARRAY
56727: PPUSH
56728: CALL_OW 255
56732: PUSH
56733: LD_VAR 0 1
56737: PPUSH
56738: CALL_OW 255
56742: EQUAL
56743: AND
56744: IFFALSE 56768
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56746: LD_VAR 0 5
56750: PUSH
56751: LD_INT 1
56753: ARRAY
56754: PPUSH
56755: LD_VAR 0 5
56759: PUSH
56760: LD_INT 2
56762: ARRAY
56763: PPUSH
56764: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56768: LD_ADDR_EXP 44
56772: PUSH
56773: LD_EXP 44
56777: PPUSH
56778: LD_VAR 0 4
56782: PPUSH
56783: LD_EXP 44
56787: PUSH
56788: LD_VAR 0 4
56792: ARRAY
56793: PPUSH
56794: LD_VAR 0 3
56798: PPUSH
56799: CALL_OW 3
56803: PPUSH
56804: CALL_OW 1
56808: ST_TO_ADDR
// end ; end ;
56809: GO 56638
56811: POP
56812: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56813: LD_VAR 0 1
56817: PPUSH
56818: LD_EXP 44
56822: PUSH
56823: LD_VAR 0 4
56827: ARRAY
56828: PUSH
56829: LD_INT 0
56831: PLUS
56832: PPUSH
56833: CALL_OW 505
// end ;
56837: LD_VAR 0 2
56841: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56842: LD_INT 0
56844: PPUSH
56845: PPUSH
56846: PPUSH
56847: PPUSH
// if not hack in hackTanks then
56848: LD_VAR 0 1
56852: PUSH
56853: LD_EXP 43
56857: IN
56858: NOT
56859: IFFALSE 56863
// exit ;
56861: GO 56948
// index := GetElementIndex ( hackTanks , hack ) ;
56863: LD_ADDR_VAR 0 5
56867: PUSH
56868: LD_EXP 43
56872: PPUSH
56873: LD_VAR 0 1
56877: PPUSH
56878: CALL 7576 0 2
56882: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56883: LD_ADDR_VAR 0 4
56887: PUSH
56888: DOUBLE
56889: LD_INT 1
56891: DEC
56892: ST_TO_ADDR
56893: LD_EXP 44
56897: PUSH
56898: LD_VAR 0 5
56902: ARRAY
56903: PUSH
56904: FOR_TO
56905: IFFALSE 56946
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56907: LD_EXP 44
56911: PUSH
56912: LD_VAR 0 5
56916: ARRAY
56917: PUSH
56918: LD_VAR 0 4
56922: ARRAY
56923: PUSH
56924: LD_INT 1
56926: ARRAY
56927: PUSH
56928: LD_VAR 0 2
56932: EQUAL
56933: IFFALSE 56944
// KillUnit ( vehicle ) ;
56935: LD_VAR 0 2
56939: PPUSH
56940: CALL_OW 66
56944: GO 56904
56946: POP
56947: POP
// end ;
56948: LD_VAR 0 3
56952: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
56953: LD_EXP 48
56957: NOT
56958: IFFALSE 56993
56960: GO 56962
56962: DISABLE
// begin initMiner := true ;
56963: LD_ADDR_EXP 48
56967: PUSH
56968: LD_INT 1
56970: ST_TO_ADDR
// minersList := [ ] ;
56971: LD_ADDR_EXP 49
56975: PUSH
56976: EMPTY
56977: ST_TO_ADDR
// minerMinesList := [ ] ;
56978: LD_ADDR_EXP 50
56982: PUSH
56983: EMPTY
56984: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
56985: LD_ADDR_EXP 51
56989: PUSH
56990: LD_INT 5
56992: ST_TO_ADDR
// end ;
56993: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
56994: LD_EXP 48
56998: PUSH
56999: LD_INT 34
57001: PUSH
57002: LD_INT 81
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PPUSH
57009: CALL_OW 69
57013: AND
57014: IFFALSE 57475
57016: GO 57018
57018: DISABLE
57019: LD_INT 0
57021: PPUSH
57022: PPUSH
57023: PPUSH
57024: PPUSH
// begin enable ;
57025: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57026: LD_ADDR_VAR 0 1
57030: PUSH
57031: LD_INT 34
57033: PUSH
57034: LD_INT 81
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PPUSH
57041: CALL_OW 69
57045: PUSH
57046: FOR_IN
57047: IFFALSE 57119
// begin if not i in minersList then
57049: LD_VAR 0 1
57053: PUSH
57054: LD_EXP 49
57058: IN
57059: NOT
57060: IFFALSE 57117
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57062: LD_ADDR_EXP 49
57066: PUSH
57067: LD_EXP 49
57071: PPUSH
57072: LD_EXP 49
57076: PUSH
57077: LD_INT 1
57079: PLUS
57080: PPUSH
57081: LD_VAR 0 1
57085: PPUSH
57086: CALL_OW 1
57090: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57091: LD_ADDR_EXP 50
57095: PUSH
57096: LD_EXP 50
57100: PPUSH
57101: LD_EXP 50
57105: PUSH
57106: LD_INT 1
57108: PLUS
57109: PPUSH
57110: EMPTY
57111: PPUSH
57112: CALL_OW 1
57116: ST_TO_ADDR
// end end ;
57117: GO 57046
57119: POP
57120: POP
// for i := minerMinesList downto 1 do
57121: LD_ADDR_VAR 0 1
57125: PUSH
57126: DOUBLE
57127: LD_EXP 50
57131: INC
57132: ST_TO_ADDR
57133: LD_INT 1
57135: PUSH
57136: FOR_DOWNTO
57137: IFFALSE 57473
// begin if IsLive ( minersList [ i ] ) then
57139: LD_EXP 49
57143: PUSH
57144: LD_VAR 0 1
57148: ARRAY
57149: PPUSH
57150: CALL_OW 300
57154: IFFALSE 57182
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57156: LD_EXP 49
57160: PUSH
57161: LD_VAR 0 1
57165: ARRAY
57166: PPUSH
57167: LD_EXP 50
57171: PUSH
57172: LD_VAR 0 1
57176: ARRAY
57177: PPUSH
57178: CALL_OW 505
// if not minerMinesList [ i ] then
57182: LD_EXP 50
57186: PUSH
57187: LD_VAR 0 1
57191: ARRAY
57192: NOT
57193: IFFALSE 57197
// continue ;
57195: GO 57136
// for j := minerMinesList [ i ] downto 1 do
57197: LD_ADDR_VAR 0 2
57201: PUSH
57202: DOUBLE
57203: LD_EXP 50
57207: PUSH
57208: LD_VAR 0 1
57212: ARRAY
57213: INC
57214: ST_TO_ADDR
57215: LD_INT 1
57217: PUSH
57218: FOR_DOWNTO
57219: IFFALSE 57469
// begin side := GetSide ( minersList [ i ] ) ;
57221: LD_ADDR_VAR 0 3
57225: PUSH
57226: LD_EXP 49
57230: PUSH
57231: LD_VAR 0 1
57235: ARRAY
57236: PPUSH
57237: CALL_OW 255
57241: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57242: LD_ADDR_VAR 0 4
57246: PUSH
57247: LD_EXP 50
57251: PUSH
57252: LD_VAR 0 1
57256: ARRAY
57257: PUSH
57258: LD_VAR 0 2
57262: ARRAY
57263: PUSH
57264: LD_INT 1
57266: ARRAY
57267: PPUSH
57268: LD_EXP 50
57272: PUSH
57273: LD_VAR 0 1
57277: ARRAY
57278: PUSH
57279: LD_VAR 0 2
57283: ARRAY
57284: PUSH
57285: LD_INT 2
57287: ARRAY
57288: PPUSH
57289: CALL_OW 428
57293: ST_TO_ADDR
// if not tmp then
57294: LD_VAR 0 4
57298: NOT
57299: IFFALSE 57303
// continue ;
57301: GO 57218
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57303: LD_VAR 0 4
57307: PUSH
57308: LD_INT 81
57310: PUSH
57311: LD_VAR 0 3
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PPUSH
57320: CALL_OW 69
57324: IN
57325: PUSH
57326: LD_EXP 50
57330: PUSH
57331: LD_VAR 0 1
57335: ARRAY
57336: PUSH
57337: LD_VAR 0 2
57341: ARRAY
57342: PUSH
57343: LD_INT 1
57345: ARRAY
57346: PPUSH
57347: LD_EXP 50
57351: PUSH
57352: LD_VAR 0 1
57356: ARRAY
57357: PUSH
57358: LD_VAR 0 2
57362: ARRAY
57363: PUSH
57364: LD_INT 2
57366: ARRAY
57367: PPUSH
57368: CALL_OW 458
57372: AND
57373: IFFALSE 57467
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57375: LD_EXP 50
57379: PUSH
57380: LD_VAR 0 1
57384: ARRAY
57385: PUSH
57386: LD_VAR 0 2
57390: ARRAY
57391: PUSH
57392: LD_INT 1
57394: ARRAY
57395: PPUSH
57396: LD_EXP 50
57400: PUSH
57401: LD_VAR 0 1
57405: ARRAY
57406: PUSH
57407: LD_VAR 0 2
57411: ARRAY
57412: PUSH
57413: LD_INT 2
57415: ARRAY
57416: PPUSH
57417: LD_VAR 0 3
57421: PPUSH
57422: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57426: LD_ADDR_EXP 50
57430: PUSH
57431: LD_EXP 50
57435: PPUSH
57436: LD_VAR 0 1
57440: PPUSH
57441: LD_EXP 50
57445: PUSH
57446: LD_VAR 0 1
57450: ARRAY
57451: PPUSH
57452: LD_VAR 0 2
57456: PPUSH
57457: CALL_OW 3
57461: PPUSH
57462: CALL_OW 1
57466: ST_TO_ADDR
// end ; end ;
57467: GO 57218
57469: POP
57470: POP
// end ;
57471: GO 57136
57473: POP
57474: POP
// end ;
57475: PPOPN 4
57477: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57478: LD_INT 0
57480: PPUSH
57481: PPUSH
// result := false ;
57482: LD_ADDR_VAR 0 4
57486: PUSH
57487: LD_INT 0
57489: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57490: LD_VAR 0 1
57494: PPUSH
57495: CALL_OW 264
57499: PUSH
57500: LD_INT 81
57502: EQUAL
57503: NOT
57504: IFFALSE 57508
// exit ;
57506: GO 57748
// index := GetElementIndex ( minersList , unit ) ;
57508: LD_ADDR_VAR 0 5
57512: PUSH
57513: LD_EXP 49
57517: PPUSH
57518: LD_VAR 0 1
57522: PPUSH
57523: CALL 7576 0 2
57527: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57528: LD_EXP 50
57532: PUSH
57533: LD_VAR 0 5
57537: ARRAY
57538: PUSH
57539: LD_EXP 51
57543: GREATEREQUAL
57544: IFFALSE 57548
// exit ;
57546: GO 57748
// ComMoveXY ( unit , x , y ) ;
57548: LD_VAR 0 1
57552: PPUSH
57553: LD_VAR 0 2
57557: PPUSH
57558: LD_VAR 0 3
57562: PPUSH
57563: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57567: LD_INT 35
57569: PPUSH
57570: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57574: LD_VAR 0 1
57578: PPUSH
57579: LD_VAR 0 2
57583: PPUSH
57584: LD_VAR 0 3
57588: PPUSH
57589: CALL 39337 0 3
57593: NOT
57594: PUSH
57595: LD_VAR 0 1
57599: PPUSH
57600: CALL_OW 314
57604: AND
57605: IFFALSE 57609
// exit ;
57607: GO 57748
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57609: LD_VAR 0 2
57613: PPUSH
57614: LD_VAR 0 3
57618: PPUSH
57619: CALL_OW 428
57623: PUSH
57624: LD_VAR 0 1
57628: EQUAL
57629: PUSH
57630: LD_VAR 0 1
57634: PPUSH
57635: CALL_OW 314
57639: NOT
57640: AND
57641: IFFALSE 57567
// PlaySoundXY ( x , y , PlantMine ) ;
57643: LD_VAR 0 2
57647: PPUSH
57648: LD_VAR 0 3
57652: PPUSH
57653: LD_STRING PlantMine
57655: PPUSH
57656: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57660: LD_VAR 0 2
57664: PPUSH
57665: LD_VAR 0 3
57669: PPUSH
57670: LD_VAR 0 1
57674: PPUSH
57675: CALL_OW 255
57679: PPUSH
57680: LD_INT 0
57682: PPUSH
57683: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57687: LD_ADDR_EXP 50
57691: PUSH
57692: LD_EXP 50
57696: PPUSH
57697: LD_VAR 0 5
57701: PUSH
57702: LD_EXP 50
57706: PUSH
57707: LD_VAR 0 5
57711: ARRAY
57712: PUSH
57713: LD_INT 1
57715: PLUS
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PPUSH
57721: LD_VAR 0 2
57725: PUSH
57726: LD_VAR 0 3
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PPUSH
57735: CALL 7791 0 3
57739: ST_TO_ADDR
// result := true ;
57740: LD_ADDR_VAR 0 4
57744: PUSH
57745: LD_INT 1
57747: ST_TO_ADDR
// end ;
57748: LD_VAR 0 4
57752: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57753: LD_INT 0
57755: PPUSH
57756: PPUSH
57757: PPUSH
// if not unit in minersList then
57758: LD_VAR 0 1
57762: PUSH
57763: LD_EXP 49
57767: IN
57768: NOT
57769: IFFALSE 57773
// exit ;
57771: GO 58165
// index := GetElementIndex ( minersList , unit ) ;
57773: LD_ADDR_VAR 0 6
57777: PUSH
57778: LD_EXP 49
57782: PPUSH
57783: LD_VAR 0 1
57787: PPUSH
57788: CALL 7576 0 2
57792: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57793: LD_ADDR_VAR 0 5
57797: PUSH
57798: DOUBLE
57799: LD_EXP 50
57803: PUSH
57804: LD_VAR 0 6
57808: ARRAY
57809: INC
57810: ST_TO_ADDR
57811: LD_INT 1
57813: PUSH
57814: FOR_DOWNTO
57815: IFFALSE 57976
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57817: LD_EXP 50
57821: PUSH
57822: LD_VAR 0 6
57826: ARRAY
57827: PUSH
57828: LD_VAR 0 5
57832: ARRAY
57833: PUSH
57834: LD_INT 1
57836: ARRAY
57837: PUSH
57838: LD_VAR 0 2
57842: EQUAL
57843: PUSH
57844: LD_EXP 50
57848: PUSH
57849: LD_VAR 0 6
57853: ARRAY
57854: PUSH
57855: LD_VAR 0 5
57859: ARRAY
57860: PUSH
57861: LD_INT 2
57863: ARRAY
57864: PUSH
57865: LD_VAR 0 3
57869: EQUAL
57870: AND
57871: IFFALSE 57974
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57873: LD_EXP 50
57877: PUSH
57878: LD_VAR 0 6
57882: ARRAY
57883: PUSH
57884: LD_VAR 0 5
57888: ARRAY
57889: PUSH
57890: LD_INT 1
57892: ARRAY
57893: PPUSH
57894: LD_EXP 50
57898: PUSH
57899: LD_VAR 0 6
57903: ARRAY
57904: PUSH
57905: LD_VAR 0 5
57909: ARRAY
57910: PUSH
57911: LD_INT 2
57913: ARRAY
57914: PPUSH
57915: LD_VAR 0 1
57919: PPUSH
57920: CALL_OW 255
57924: PPUSH
57925: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57929: LD_ADDR_EXP 50
57933: PUSH
57934: LD_EXP 50
57938: PPUSH
57939: LD_VAR 0 6
57943: PPUSH
57944: LD_EXP 50
57948: PUSH
57949: LD_VAR 0 6
57953: ARRAY
57954: PPUSH
57955: LD_VAR 0 5
57959: PPUSH
57960: CALL_OW 3
57964: PPUSH
57965: CALL_OW 1
57969: ST_TO_ADDR
// exit ;
57970: POP
57971: POP
57972: GO 58165
// end ; end ;
57974: GO 57814
57976: POP
57977: POP
// for i := minerMinesList [ index ] downto 1 do
57978: LD_ADDR_VAR 0 5
57982: PUSH
57983: DOUBLE
57984: LD_EXP 50
57988: PUSH
57989: LD_VAR 0 6
57993: ARRAY
57994: INC
57995: ST_TO_ADDR
57996: LD_INT 1
57998: PUSH
57999: FOR_DOWNTO
58000: IFFALSE 58163
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58002: LD_EXP 50
58006: PUSH
58007: LD_VAR 0 6
58011: ARRAY
58012: PUSH
58013: LD_VAR 0 5
58017: ARRAY
58018: PUSH
58019: LD_INT 1
58021: ARRAY
58022: PPUSH
58023: LD_EXP 50
58027: PUSH
58028: LD_VAR 0 6
58032: ARRAY
58033: PUSH
58034: LD_VAR 0 5
58038: ARRAY
58039: PUSH
58040: LD_INT 2
58042: ARRAY
58043: PPUSH
58044: LD_VAR 0 2
58048: PPUSH
58049: LD_VAR 0 3
58053: PPUSH
58054: CALL_OW 298
58058: PUSH
58059: LD_INT 6
58061: LESS
58062: IFFALSE 58161
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58064: LD_EXP 50
58068: PUSH
58069: LD_VAR 0 6
58073: ARRAY
58074: PUSH
58075: LD_VAR 0 5
58079: ARRAY
58080: PUSH
58081: LD_INT 1
58083: ARRAY
58084: PPUSH
58085: LD_EXP 50
58089: PUSH
58090: LD_VAR 0 6
58094: ARRAY
58095: PUSH
58096: LD_VAR 0 5
58100: ARRAY
58101: PUSH
58102: LD_INT 2
58104: ARRAY
58105: PPUSH
58106: LD_VAR 0 1
58110: PPUSH
58111: CALL_OW 255
58115: PPUSH
58116: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58120: LD_ADDR_EXP 50
58124: PUSH
58125: LD_EXP 50
58129: PPUSH
58130: LD_VAR 0 6
58134: PPUSH
58135: LD_EXP 50
58139: PUSH
58140: LD_VAR 0 6
58144: ARRAY
58145: PPUSH
58146: LD_VAR 0 5
58150: PPUSH
58151: CALL_OW 3
58155: PPUSH
58156: CALL_OW 1
58160: ST_TO_ADDR
// end ; end ;
58161: GO 57999
58163: POP
58164: POP
// end ;
58165: LD_VAR 0 4
58169: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58170: LD_INT 0
58172: PPUSH
58173: PPUSH
58174: PPUSH
58175: PPUSH
58176: PPUSH
58177: PPUSH
58178: PPUSH
58179: PPUSH
58180: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58181: LD_VAR 0 1
58185: PPUSH
58186: CALL_OW 264
58190: PUSH
58191: LD_INT 81
58193: EQUAL
58194: NOT
58195: PUSH
58196: LD_VAR 0 1
58200: PUSH
58201: LD_EXP 49
58205: IN
58206: NOT
58207: OR
58208: IFFALSE 58212
// exit ;
58210: GO 58534
// index := GetElementIndex ( minersList , unit ) ;
58212: LD_ADDR_VAR 0 6
58216: PUSH
58217: LD_EXP 49
58221: PPUSH
58222: LD_VAR 0 1
58226: PPUSH
58227: CALL 7576 0 2
58231: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58232: LD_ADDR_VAR 0 8
58236: PUSH
58237: LD_EXP 51
58241: PUSH
58242: LD_EXP 50
58246: PUSH
58247: LD_VAR 0 6
58251: ARRAY
58252: MINUS
58253: ST_TO_ADDR
// if not minesFreeAmount then
58254: LD_VAR 0 8
58258: NOT
58259: IFFALSE 58263
// exit ;
58261: GO 58534
// tmp := [ ] ;
58263: LD_ADDR_VAR 0 7
58267: PUSH
58268: EMPTY
58269: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58270: LD_ADDR_VAR 0 5
58274: PUSH
58275: DOUBLE
58276: LD_INT 1
58278: DEC
58279: ST_TO_ADDR
58280: LD_VAR 0 8
58284: PUSH
58285: FOR_TO
58286: IFFALSE 58481
// begin _d := rand ( 0 , 5 ) ;
58288: LD_ADDR_VAR 0 11
58292: PUSH
58293: LD_INT 0
58295: PPUSH
58296: LD_INT 5
58298: PPUSH
58299: CALL_OW 12
58303: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58304: LD_ADDR_VAR 0 12
58308: PUSH
58309: LD_INT 2
58311: PPUSH
58312: LD_INT 6
58314: PPUSH
58315: CALL_OW 12
58319: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58320: LD_ADDR_VAR 0 9
58324: PUSH
58325: LD_VAR 0 2
58329: PPUSH
58330: LD_VAR 0 11
58334: PPUSH
58335: LD_VAR 0 12
58339: PPUSH
58340: CALL_OW 272
58344: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58345: LD_ADDR_VAR 0 10
58349: PUSH
58350: LD_VAR 0 3
58354: PPUSH
58355: LD_VAR 0 11
58359: PPUSH
58360: LD_VAR 0 12
58364: PPUSH
58365: CALL_OW 273
58369: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58370: LD_VAR 0 9
58374: PPUSH
58375: LD_VAR 0 10
58379: PPUSH
58380: CALL_OW 488
58384: PUSH
58385: LD_VAR 0 9
58389: PUSH
58390: LD_VAR 0 10
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_VAR 0 7
58403: IN
58404: NOT
58405: AND
58406: PUSH
58407: LD_VAR 0 9
58411: PPUSH
58412: LD_VAR 0 10
58416: PPUSH
58417: CALL_OW 458
58421: NOT
58422: AND
58423: IFFALSE 58465
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58425: LD_ADDR_VAR 0 7
58429: PUSH
58430: LD_VAR 0 7
58434: PPUSH
58435: LD_VAR 0 7
58439: PUSH
58440: LD_INT 1
58442: PLUS
58443: PPUSH
58444: LD_VAR 0 9
58448: PUSH
58449: LD_VAR 0 10
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PPUSH
58458: CALL_OW 1
58462: ST_TO_ADDR
58463: GO 58479
// i := i - 1 ;
58465: LD_ADDR_VAR 0 5
58469: PUSH
58470: LD_VAR 0 5
58474: PUSH
58475: LD_INT 1
58477: MINUS
58478: ST_TO_ADDR
// end ;
58479: GO 58285
58481: POP
58482: POP
// for i in tmp do
58483: LD_ADDR_VAR 0 5
58487: PUSH
58488: LD_VAR 0 7
58492: PUSH
58493: FOR_IN
58494: IFFALSE 58532
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58496: LD_VAR 0 1
58500: PPUSH
58501: LD_VAR 0 5
58505: PUSH
58506: LD_INT 1
58508: ARRAY
58509: PPUSH
58510: LD_VAR 0 5
58514: PUSH
58515: LD_INT 2
58517: ARRAY
58518: PPUSH
58519: CALL 57478 0 3
58523: NOT
58524: IFFALSE 58530
// exit ;
58526: POP
58527: POP
58528: GO 58534
58530: GO 58493
58532: POP
58533: POP
// end ;
58534: LD_VAR 0 4
58538: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58539: LD_INT 0
58541: PPUSH
58542: PPUSH
58543: PPUSH
58544: PPUSH
58545: PPUSH
58546: PPUSH
58547: PPUSH
58548: PPUSH
58549: PPUSH
// if GetClass ( unit ) <> class_sniper then
58550: LD_VAR 0 1
58554: PPUSH
58555: CALL_OW 257
58559: PUSH
58560: LD_INT 5
58562: NONEQUAL
58563: IFFALSE 58567
// exit ;
58565: GO 59033
// dist := 8 ;
58567: LD_ADDR_VAR 0 5
58571: PUSH
58572: LD_INT 8
58574: ST_TO_ADDR
// viewRange := 12 ;
58575: LD_ADDR_VAR 0 8
58579: PUSH
58580: LD_INT 12
58582: ST_TO_ADDR
// side := GetSide ( unit ) ;
58583: LD_ADDR_VAR 0 6
58587: PUSH
58588: LD_VAR 0 1
58592: PPUSH
58593: CALL_OW 255
58597: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58598: LD_INT 61
58600: PPUSH
58601: LD_VAR 0 6
58605: PPUSH
58606: CALL_OW 321
58610: PUSH
58611: LD_INT 2
58613: EQUAL
58614: IFFALSE 58624
// viewRange := 16 ;
58616: LD_ADDR_VAR 0 8
58620: PUSH
58621: LD_INT 16
58623: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58624: LD_VAR 0 1
58628: PPUSH
58629: LD_VAR 0 2
58633: PPUSH
58634: LD_VAR 0 3
58638: PPUSH
58639: CALL_OW 297
58643: PUSH
58644: LD_VAR 0 5
58648: GREATER
58649: IFFALSE 58728
// begin ComMoveXY ( unit , x , y ) ;
58651: LD_VAR 0 1
58655: PPUSH
58656: LD_VAR 0 2
58660: PPUSH
58661: LD_VAR 0 3
58665: PPUSH
58666: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58670: LD_INT 35
58672: PPUSH
58673: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58677: LD_VAR 0 1
58681: PPUSH
58682: LD_VAR 0 2
58686: PPUSH
58687: LD_VAR 0 3
58691: PPUSH
58692: CALL 39337 0 3
58696: NOT
58697: IFFALSE 58701
// exit ;
58699: GO 59033
// until GetDistUnitXY ( unit , x , y ) < dist ;
58701: LD_VAR 0 1
58705: PPUSH
58706: LD_VAR 0 2
58710: PPUSH
58711: LD_VAR 0 3
58715: PPUSH
58716: CALL_OW 297
58720: PUSH
58721: LD_VAR 0 5
58725: LESS
58726: IFFALSE 58670
// end ; ComTurnXY ( unit , x , y ) ;
58728: LD_VAR 0 1
58732: PPUSH
58733: LD_VAR 0 2
58737: PPUSH
58738: LD_VAR 0 3
58742: PPUSH
58743: CALL_OW 118
// repeat if Multiplayer then
58747: LD_OWVAR 4
58751: IFFALSE 58762
// wait ( 35 ) else
58753: LD_INT 35
58755: PPUSH
58756: CALL_OW 67
58760: GO 58769
// wait ( 5 ) ;
58762: LD_INT 5
58764: PPUSH
58765: CALL_OW 67
// _d := GetDir ( unit ) ;
58769: LD_ADDR_VAR 0 11
58773: PUSH
58774: LD_VAR 0 1
58778: PPUSH
58779: CALL_OW 254
58783: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58784: LD_ADDR_VAR 0 7
58788: PUSH
58789: LD_VAR 0 1
58793: PPUSH
58794: CALL_OW 250
58798: PPUSH
58799: LD_VAR 0 1
58803: PPUSH
58804: CALL_OW 251
58808: PPUSH
58809: LD_VAR 0 2
58813: PPUSH
58814: LD_VAR 0 3
58818: PPUSH
58819: CALL 41945 0 4
58823: ST_TO_ADDR
// until dir = _d ;
58824: LD_VAR 0 7
58828: PUSH
58829: LD_VAR 0 11
58833: EQUAL
58834: IFFALSE 58747
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58836: LD_ADDR_VAR 0 9
58840: PUSH
58841: LD_VAR 0 1
58845: PPUSH
58846: CALL_OW 250
58850: PPUSH
58851: LD_VAR 0 7
58855: PPUSH
58856: LD_VAR 0 5
58860: PPUSH
58861: CALL_OW 272
58865: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58866: LD_ADDR_VAR 0 10
58870: PUSH
58871: LD_VAR 0 1
58875: PPUSH
58876: CALL_OW 251
58880: PPUSH
58881: LD_VAR 0 7
58885: PPUSH
58886: LD_VAR 0 5
58890: PPUSH
58891: CALL_OW 273
58895: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58896: LD_VAR 0 9
58900: PPUSH
58901: LD_VAR 0 10
58905: PPUSH
58906: CALL_OW 488
58910: NOT
58911: IFFALSE 58915
// exit ;
58913: GO 59033
// ComAnimCustom ( unit , 1 ) ;
58915: LD_VAR 0 1
58919: PPUSH
58920: LD_INT 1
58922: PPUSH
58923: CALL_OW 592
// p := 0 ;
58927: LD_ADDR_VAR 0 12
58931: PUSH
58932: LD_INT 0
58934: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58935: LD_VAR 0 9
58939: PPUSH
58940: LD_VAR 0 10
58944: PPUSH
58945: LD_VAR 0 6
58949: PPUSH
58950: LD_VAR 0 8
58954: PPUSH
58955: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
58959: LD_INT 35
58961: PPUSH
58962: CALL_OW 67
// p := Inc ( p ) ;
58966: LD_ADDR_VAR 0 12
58970: PUSH
58971: LD_VAR 0 12
58975: PPUSH
58976: CALL 41901 0 1
58980: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
58981: LD_VAR 0 12
58985: PUSH
58986: LD_INT 3
58988: EQUAL
58989: PUSH
58990: LD_VAR 0 1
58994: PPUSH
58995: CALL_OW 302
58999: NOT
59000: OR
59001: PUSH
59002: LD_VAR 0 1
59006: PPUSH
59007: CALL_OW 301
59011: OR
59012: IFFALSE 58959
// RemoveSeeing ( _x , _y , side ) ;
59014: LD_VAR 0 9
59018: PPUSH
59019: LD_VAR 0 10
59023: PPUSH
59024: LD_VAR 0 6
59028: PPUSH
59029: CALL_OW 331
// end ; end_of_file
59033: LD_VAR 0 4
59037: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59038: PPOPN 6
59040: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
59041: CALL 59070 0 0
// end ; end_of_file
59045: PPOPN 1
59047: END
// every 0 0$1 do
59048: GO 59050
59050: DISABLE
// begin enable ;
59051: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59052: LD_STRING updateTimer(
59054: PUSH
59055: LD_OWVAR 1
59059: STR
59060: PUSH
59061: LD_STRING );
59063: STR
59064: PPUSH
59065: CALL_OW 559
// end ;
59069: END
// export function SOS_MapStart ( ) ; begin
59070: LD_INT 0
59072: PPUSH
// UpdateFactoryWaypoints ( ) ;
59073: CALL 59442 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59077: CALL 59694 0 0
// end ;
59081: LD_VAR 0 1
59085: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59086: LD_INT 0
59088: PPUSH
// end ;
59089: LD_VAR 0 12
59093: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59094: LD_INT 0
59096: PPUSH
59097: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59098: LD_VAR 0 1
59102: NOT
59103: PUSH
59104: LD_VAR 0 2
59108: PPUSH
59109: LD_VAR 0 3
59113: PPUSH
59114: CALL_OW 488
59118: NOT
59119: OR
59120: PUSH
59121: LD_VAR 0 1
59125: PPUSH
59126: CALL_OW 266
59130: PUSH
59131: LD_INT 3
59133: NONEQUAL
59134: PUSH
59135: LD_VAR 0 1
59139: PPUSH
59140: CALL_OW 247
59144: PUSH
59145: LD_INT 1
59147: EQUAL
59148: NOT
59149: AND
59150: OR
59151: IFFALSE 59155
// exit ;
59153: GO 59437
// if GetType ( factory ) = unit_human then
59155: LD_VAR 0 1
59159: PPUSH
59160: CALL_OW 247
59164: PUSH
59165: LD_INT 1
59167: EQUAL
59168: IFFALSE 59185
// factory := IsInUnit ( factory ) ;
59170: LD_ADDR_VAR 0 1
59174: PUSH
59175: LD_VAR 0 1
59179: PPUSH
59180: CALL_OW 310
59184: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59185: LD_VAR 0 1
59189: PPUSH
59190: CALL_OW 266
59194: PUSH
59195: LD_INT 3
59197: NONEQUAL
59198: IFFALSE 59202
// exit ;
59200: GO 59437
// for i := 1 to Count ( factoryWaypoints ) do
59202: LD_ADDR_VAR 0 5
59206: PUSH
59207: DOUBLE
59208: LD_INT 1
59210: DEC
59211: ST_TO_ADDR
59212: LD_EXP 52
59216: PPUSH
59217: CALL 4931 0 1
59221: PUSH
59222: FOR_TO
59223: IFFALSE 59385
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59225: LD_VAR 0 2
59229: PPUSH
59230: LD_VAR 0 3
59234: PPUSH
59235: CALL_OW 428
59239: PUSH
59240: LD_EXP 52
59244: PUSH
59245: LD_VAR 0 5
59249: ARRAY
59250: PUSH
59251: LD_INT 2
59253: ARRAY
59254: EQUAL
59255: IFFALSE 59287
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59257: LD_ADDR_EXP 52
59261: PUSH
59262: LD_EXP 52
59266: PPUSH
59267: LD_VAR 0 5
59271: PPUSH
59272: CALL_OW 3
59276: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59277: CALL 59442 0 0
// exit ;
59281: POP
59282: POP
59283: GO 59437
// end else
59285: GO 59383
// if factory = factoryWaypoints [ i ] [ 2 ] then
59287: LD_VAR 0 1
59291: PUSH
59292: LD_EXP 52
59296: PUSH
59297: LD_VAR 0 5
59301: ARRAY
59302: PUSH
59303: LD_INT 2
59305: ARRAY
59306: EQUAL
59307: IFFALSE 59383
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59309: LD_ADDR_EXP 52
59313: PUSH
59314: LD_EXP 52
59318: PPUSH
59319: LD_VAR 0 5
59323: PPUSH
59324: CALL_OW 3
59328: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59329: LD_ADDR_EXP 52
59333: PUSH
59334: LD_EXP 52
59338: PPUSH
59339: LD_VAR 0 1
59343: PPUSH
59344: CALL_OW 255
59348: PUSH
59349: LD_VAR 0 1
59353: PUSH
59354: LD_VAR 0 2
59358: PUSH
59359: LD_VAR 0 3
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: PPUSH
59370: CALL 40540 0 2
59374: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59375: CALL 59442 0 0
// exit ;
59379: POP
59380: POP
59381: GO 59437
// end ; end ;
59383: GO 59222
59385: POP
59386: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59387: LD_ADDR_EXP 52
59391: PUSH
59392: LD_EXP 52
59396: PPUSH
59397: LD_VAR 0 1
59401: PPUSH
59402: CALL_OW 255
59406: PUSH
59407: LD_VAR 0 1
59411: PUSH
59412: LD_VAR 0 2
59416: PUSH
59417: LD_VAR 0 3
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: PPUSH
59428: CALL 40540 0 2
59432: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59433: CALL 59442 0 0
// end ;
59437: LD_VAR 0 4
59441: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59442: LD_INT 0
59444: PPUSH
59445: PPUSH
59446: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59447: LD_STRING resetFactoryWaypoint();
59449: PPUSH
59450: CALL_OW 559
// if factoryWaypoints then
59454: LD_EXP 52
59458: IFFALSE 59579
// begin list := factoryWaypoints ;
59460: LD_ADDR_VAR 0 3
59464: PUSH
59465: LD_EXP 52
59469: ST_TO_ADDR
// for i := 1 to list do
59470: LD_ADDR_VAR 0 2
59474: PUSH
59475: DOUBLE
59476: LD_INT 1
59478: DEC
59479: ST_TO_ADDR
59480: LD_VAR 0 3
59484: PUSH
59485: FOR_TO
59486: IFFALSE 59577
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59488: LD_STRING setFactoryWaypointXY(
59490: PUSH
59491: LD_VAR 0 3
59495: PUSH
59496: LD_VAR 0 2
59500: ARRAY
59501: PUSH
59502: LD_INT 1
59504: ARRAY
59505: STR
59506: PUSH
59507: LD_STRING ,
59509: STR
59510: PUSH
59511: LD_VAR 0 3
59515: PUSH
59516: LD_VAR 0 2
59520: ARRAY
59521: PUSH
59522: LD_INT 2
59524: ARRAY
59525: STR
59526: PUSH
59527: LD_STRING ,
59529: STR
59530: PUSH
59531: LD_VAR 0 3
59535: PUSH
59536: LD_VAR 0 2
59540: ARRAY
59541: PUSH
59542: LD_INT 3
59544: ARRAY
59545: STR
59546: PUSH
59547: LD_STRING ,
59549: STR
59550: PUSH
59551: LD_VAR 0 3
59555: PUSH
59556: LD_VAR 0 2
59560: ARRAY
59561: PUSH
59562: LD_INT 4
59564: ARRAY
59565: STR
59566: PUSH
59567: LD_STRING )
59569: STR
59570: PPUSH
59571: CALL_OW 559
59575: GO 59485
59577: POP
59578: POP
// end ; end ;
59579: LD_VAR 0 1
59583: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59584: LD_INT 0
59586: PPUSH
// if HexInfo ( x , y ) = warehouse then
59587: LD_VAR 0 2
59591: PPUSH
59592: LD_VAR 0 3
59596: PPUSH
59597: CALL_OW 428
59601: PUSH
59602: LD_VAR 0 1
59606: EQUAL
59607: IFFALSE 59634
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59609: LD_ADDR_EXP 53
59613: PUSH
59614: LD_EXP 53
59618: PPUSH
59619: LD_VAR 0 1
59623: PPUSH
59624: LD_INT 0
59626: PPUSH
59627: CALL_OW 1
59631: ST_TO_ADDR
59632: GO 59685
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59634: LD_ADDR_EXP 53
59638: PUSH
59639: LD_EXP 53
59643: PPUSH
59644: LD_VAR 0 1
59648: PPUSH
59649: LD_VAR 0 1
59653: PPUSH
59654: CALL_OW 255
59658: PUSH
59659: LD_VAR 0 1
59663: PUSH
59664: LD_VAR 0 2
59668: PUSH
59669: LD_VAR 0 3
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: PPUSH
59680: CALL_OW 1
59684: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59685: CALL 59694 0 0
// end ;
59689: LD_VAR 0 4
59693: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59694: LD_INT 0
59696: PPUSH
59697: PPUSH
59698: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59699: LD_STRING resetWarehouseGatheringPoints();
59701: PPUSH
59702: CALL_OW 559
// if warehouseGatheringPoints then
59706: LD_EXP 53
59710: IFFALSE 59836
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59712: LD_ADDR_VAR 0 3
59716: PUSH
59717: LD_EXP 53
59721: PPUSH
59722: CALL 44302 0 1
59726: ST_TO_ADDR
// for i := 1 to list do
59727: LD_ADDR_VAR 0 2
59731: PUSH
59732: DOUBLE
59733: LD_INT 1
59735: DEC
59736: ST_TO_ADDR
59737: LD_VAR 0 3
59741: PUSH
59742: FOR_TO
59743: IFFALSE 59834
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59745: LD_STRING setWarehouseGatheringPointXY(
59747: PUSH
59748: LD_VAR 0 3
59752: PUSH
59753: LD_VAR 0 2
59757: ARRAY
59758: PUSH
59759: LD_INT 1
59761: ARRAY
59762: STR
59763: PUSH
59764: LD_STRING ,
59766: STR
59767: PUSH
59768: LD_VAR 0 3
59772: PUSH
59773: LD_VAR 0 2
59777: ARRAY
59778: PUSH
59779: LD_INT 2
59781: ARRAY
59782: STR
59783: PUSH
59784: LD_STRING ,
59786: STR
59787: PUSH
59788: LD_VAR 0 3
59792: PUSH
59793: LD_VAR 0 2
59797: ARRAY
59798: PUSH
59799: LD_INT 3
59801: ARRAY
59802: STR
59803: PUSH
59804: LD_STRING ,
59806: STR
59807: PUSH
59808: LD_VAR 0 3
59812: PUSH
59813: LD_VAR 0 2
59817: ARRAY
59818: PUSH
59819: LD_INT 4
59821: ARRAY
59822: STR
59823: PUSH
59824: LD_STRING )
59826: STR
59827: PPUSH
59828: CALL_OW 559
59832: GO 59742
59834: POP
59835: POP
// end ; end ;
59836: LD_VAR 0 1
59840: RET
