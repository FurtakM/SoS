// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45583 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 45898 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 9
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 27
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 17
 835: PUSH
 836: LD_INT 7
 838: PUSH
 839: LD_INT 8
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 10
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 12
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea , MZSpecialArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 16
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: LD_INT 15
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 17
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 4
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 22
 921: PUSH
 922: LD_EXP 4
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 23
 935: PUSH
 936: LD_EXP 4
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 13
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 25
 963: PUSH
 964: LD_EXP 4
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 4
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 4
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// if gameType = GameTypeKing then
1009: LD_VAR 0 1
1013: PUSH
1014: LD_INT 3
1016: EQUAL
1017: IFFALSE 1057
// begin mpKingArea := kingArea ;
1019: LD_ADDR_EXP 31
1023: PUSH
1024: LD_INT 16
1026: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1027: LD_ADDR_EXP 32
1031: PUSH
1032: LD_EXP 4
1036: PUSH
1037: LD_INT 8
1039: ARRAY
1040: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1041: LD_ADDR_EXP 34
1045: PUSH
1046: LD_EXP 4
1050: PUSH
1051: LD_INT 10
1053: ARRAY
1054: ST_TO_ADDR
// end else
1055: GO 1081
// begin mpKingArea := 0 ;
1057: LD_ADDR_EXP 31
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// mpPoints := 0 ;
1065: LD_ADDR_EXP 32
1069: PUSH
1070: LD_INT 0
1072: ST_TO_ADDR
// mpEmissions := 0 ;
1073: LD_ADDR_EXP 34
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1081: LD_EXP 4
1085: PUSH
1086: LD_INT 9
1088: ARRAY
1089: IFFALSE 1221
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1091: LD_ADDR_EXP 33
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 2
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 12
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 24
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_INT 12
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 23
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 21
1178: PUSH
1179: LD_INT 1
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 42
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 21
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 42
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1221: LD_ADDR_EXP 14
1225: PUSH
1226: LD_EXP 4
1230: PUSH
1231: LD_INT 11
1233: ARRAY
1234: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1235: LD_ADDR_EXP 20
1239: PUSH
1240: LD_EXP 4
1244: PUSH
1245: LD_INT 12
1247: ARRAY
1248: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1249: LD_ADDR_EXP 24
1253: PUSH
1254: LD_EXP 4
1258: PUSH
1259: LD_INT 13
1261: ARRAY
1262: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1263: LD_ADDR_EXP 30
1267: PUSH
1268: LD_EXP 4
1272: PUSH
1273: LD_INT 14
1275: ARRAY
1276: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1277: LD_ADDR_EXP 28
1281: PUSH
1282: LD_EXP 4
1286: PUSH
1287: LD_INT 15
1289: ARRAY
1290: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1291: LD_ADDR_EXP 26
1295: PUSH
1296: LD_EXP 4
1300: PUSH
1301: LD_INT 18
1303: ARRAY
1304: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1305: LD_ADDR_EXP 18
1309: PUSH
1310: LD_EXP 4
1314: PUSH
1315: LD_INT 21
1317: ARRAY
1318: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1319: LD_ADDR_EXP 29
1323: PUSH
1324: LD_INT 3
1326: PUSH
1327: LD_INT 2
1329: PUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 4
1335: PUSH
1336: LD_INT 6
1338: PUSH
1339: LD_INT 5
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1350: LD_ADDR_VAR 0 8
1354: PUSH
1355: LD_INT 18
1357: PPUSH
1358: LD_INT 2
1360: PPUSH
1361: CALL 45038 0 2
1365: PUSH
1366: LD_INT 19
1368: PPUSH
1369: LD_INT 1
1371: PPUSH
1372: CALL 45038 0 2
1376: PUSH
1377: LD_INT 20
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL 45038 0 2
1387: PUSH
1388: LD_INT 21
1390: PPUSH
1391: LD_INT 3
1393: PPUSH
1394: CALL 45038 0 2
1398: PUSH
1399: LD_INT 22
1401: PPUSH
1402: LD_INT 4
1404: PPUSH
1405: CALL 45038 0 2
1409: PUSH
1410: LD_INT 23
1412: PPUSH
1413: LD_INT 5
1415: PPUSH
1416: CALL 45038 0 2
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1429: LD_ADDR_VAR 0 3
1433: PUSH
1434: DOUBLE
1435: LD_INT 1
1437: DEC
1438: ST_TO_ADDR
1439: LD_VAR 0 8
1443: PPUSH
1444: CALL 4910 0 1
1448: PUSH
1449: FOR_TO
1450: IFFALSE 1554
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1452: LD_ADDR_EXP 19
1456: PUSH
1457: LD_EXP 19
1461: PPUSH
1462: LD_VAR 0 3
1466: PPUSH
1467: LD_VAR 0 8
1471: PUSH
1472: LD_VAR 0 3
1476: ARRAY
1477: PUSH
1478: LD_INT 1
1480: ARRAY
1481: PPUSH
1482: LD_VAR 0 8
1486: PUSH
1487: LD_VAR 0 3
1491: ARRAY
1492: PUSH
1493: LD_INT 3
1495: ARRAY
1496: PPUSH
1497: LD_INT 10
1499: PPUSH
1500: CALL_OW 272
1504: PUSH
1505: LD_VAR 0 8
1509: PUSH
1510: LD_VAR 0 3
1514: ARRAY
1515: PUSH
1516: LD_INT 2
1518: ARRAY
1519: PPUSH
1520: LD_VAR 0 8
1524: PUSH
1525: LD_VAR 0 3
1529: ARRAY
1530: PUSH
1531: LD_INT 3
1533: ARRAY
1534: PPUSH
1535: LD_INT 10
1537: PPUSH
1538: CALL_OW 273
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PPUSH
1547: CALL_OW 1
1551: ST_TO_ADDR
1552: GO 1449
1554: POP
1555: POP
// if hasOil then
1556: LD_VAR 0 5
1560: IFFALSE 1671
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: LD_EXP 4
1571: PUSH
1572: LD_INT 6
1574: ARRAY
1575: PUSH
1576: LD_INT 2
1578: EQUAL
1579: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1580: LD_ADDR_EXP 10
1584: PUSH
1585: LD_INT 24
1587: PPUSH
1588: LD_VAR 0 4
1592: PPUSH
1593: CALL 44871 0 2
1597: PUSH
1598: LD_INT 26
1600: PPUSH
1601: LD_VAR 0 4
1605: PPUSH
1606: CALL 44871 0 2
1610: PUSH
1611: LD_INT 28
1613: PPUSH
1614: LD_VAR 0 4
1618: PPUSH
1619: CALL 44871 0 2
1623: PUSH
1624: LD_INT 30
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL 44871 0 2
1636: PUSH
1637: LD_INT 32
1639: PPUSH
1640: LD_VAR 0 4
1644: PPUSH
1645: CALL 44871 0 2
1649: PUSH
1650: LD_INT 34
1652: PPUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL 44871 0 2
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// end ; if hasSib then
1671: LD_VAR 0 6
1675: IFFALSE 1786
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1677: LD_ADDR_VAR 0 4
1681: PUSH
1682: LD_EXP 4
1686: PUSH
1687: LD_INT 7
1689: ARRAY
1690: PUSH
1691: LD_INT 2
1693: EQUAL
1694: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1695: LD_ADDR_EXP 11
1699: PUSH
1700: LD_INT 25
1702: PPUSH
1703: LD_VAR 0 4
1707: PPUSH
1708: CALL 44871 0 2
1712: PUSH
1713: LD_INT 27
1715: PPUSH
1716: LD_VAR 0 4
1720: PPUSH
1721: CALL 44871 0 2
1725: PUSH
1726: LD_INT 29
1728: PPUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: CALL 44871 0 2
1738: PUSH
1739: LD_INT 31
1741: PPUSH
1742: LD_VAR 0 4
1746: PPUSH
1747: CALL 44871 0 2
1751: PUSH
1752: LD_INT 33
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL 44871 0 2
1764: PUSH
1765: LD_INT 35
1767: PPUSH
1768: LD_VAR 0 4
1772: PPUSH
1773: CALL 44871 0 2
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1786: LD_VAR 0 7
1790: PUSH
1791: LD_INT 1
1793: GREATEREQUAL
1794: IFFALSE 1806
// mpDepots := startPos ;
1796: LD_ADDR_EXP 12
1800: PUSH
1801: LD_VAR 0 8
1805: ST_TO_ADDR
// if baseLevel >= 2 then
1806: LD_VAR 0 7
1810: PUSH
1811: LD_INT 2
1813: GREATEREQUAL
1814: IFFALSE 2129
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1816: LD_ADDR_EXP 15
1820: PUSH
1821: LD_INT 31
1823: PUSH
1824: LD_INT 36
1826: PPUSH
1827: LD_INT 5
1829: PPUSH
1830: CALL 45038 0 2
1834: ADD
1835: PUSH
1836: LD_INT 31
1838: PUSH
1839: LD_INT 37
1841: PPUSH
1842: LD_INT 4
1844: PPUSH
1845: CALL 45038 0 2
1849: ADD
1850: PUSH
1851: LD_INT 4
1853: PUSH
1854: LD_INT 38
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL 45038 0 2
1864: ADD
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 31
1873: PUSH
1874: LD_INT 39
1876: PPUSH
1877: LD_INT 4
1879: PPUSH
1880: CALL 45038 0 2
1884: ADD
1885: PUSH
1886: LD_INT 31
1888: PUSH
1889: LD_INT 40
1891: PPUSH
1892: LD_INT 5
1894: PPUSH
1895: CALL 45038 0 2
1899: ADD
1900: PUSH
1901: LD_INT 4
1903: PUSH
1904: LD_INT 41
1906: PPUSH
1907: LD_INT 4
1909: PPUSH
1910: CALL 45038 0 2
1914: ADD
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 31
1923: PUSH
1924: LD_INT 42
1926: PPUSH
1927: LD_INT 3
1929: PPUSH
1930: CALL 45038 0 2
1934: ADD
1935: PUSH
1936: LD_INT 31
1938: PUSH
1939: LD_INT 43
1941: PPUSH
1942: LD_INT 4
1944: PPUSH
1945: CALL 45038 0 2
1949: ADD
1950: PUSH
1951: LD_INT 4
1953: PUSH
1954: LD_INT 44
1956: PPUSH
1957: LD_INT 3
1959: PPUSH
1960: CALL 45038 0 2
1964: ADD
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 31
1973: PUSH
1974: LD_INT 45
1976: PPUSH
1977: LD_INT 1
1979: PPUSH
1980: CALL 45038 0 2
1984: ADD
1985: PUSH
1986: LD_INT 31
1988: PUSH
1989: LD_INT 46
1991: PPUSH
1992: LD_INT 5
1994: PPUSH
1995: CALL 45038 0 2
1999: ADD
2000: PUSH
2001: LD_INT 4
2003: PUSH
2004: LD_INT 47
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 45038 0 2
2014: ADD
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 31
2023: PUSH
2024: LD_INT 48
2026: PPUSH
2027: LD_INT 2
2029: PPUSH
2030: CALL 45038 0 2
2034: ADD
2035: PUSH
2036: LD_INT 31
2038: PUSH
2039: LD_INT 49
2041: PPUSH
2042: LD_INT 0
2044: PPUSH
2045: CALL 45038 0 2
2049: ADD
2050: PUSH
2051: LD_INT 4
2053: PUSH
2054: LD_INT 50
2056: PPUSH
2057: LD_INT 1
2059: PPUSH
2060: CALL 45038 0 2
2064: ADD
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 31
2073: PUSH
2074: LD_INT 51
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL 45038 0 2
2084: ADD
2085: PUSH
2086: LD_INT 31
2088: PUSH
2089: LD_INT 52
2091: PPUSH
2092: LD_INT 2
2094: PPUSH
2095: CALL 45038 0 2
2099: ADD
2100: PUSH
2101: LD_INT 4
2103: PUSH
2104: LD_INT 53
2106: PPUSH
2107: LD_INT 2
2109: PPUSH
2110: CALL 45038 0 2
2114: ADD
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: ST_TO_ADDR
// end ; end ;
2129: LD_VAR 0 2
2133: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2134: GO 2136
2136: DISABLE
2137: LD_INT 0
2139: PPUSH
2140: PPUSH
2141: PPUSH
2142: PPUSH
2143: PPUSH
2144: PPUSH
2145: PPUSH
2146: PPUSH
// begin if not mpShipments then
2147: LD_EXP 25
2151: NOT
2152: IFFALSE 2156
// exit ;
2154: GO 2721
// case mpShipments of 1 :
2156: LD_EXP 25
2160: PUSH
2161: LD_INT 1
2163: DOUBLE
2164: EQUAL
2165: IFTRUE 2169
2167: GO 2204
2169: POP
// begin time := 0 0$30 ;
2170: LD_ADDR_VAR 0 4
2174: PUSH
2175: LD_INT 1050
2177: ST_TO_ADDR
// normalTime := 0 0$30 ;
2178: LD_ADDR_VAR 0 6
2182: PUSH
2183: LD_INT 1050
2185: ST_TO_ADDR
// maxTime := 1 1$20 ;
2186: LD_ADDR_VAR 0 8
2190: PUSH
2191: LD_INT 2800
2193: ST_TO_ADDR
// delayTime := 0 0$5 ;
2194: LD_ADDR_VAR 0 7
2198: PUSH
2199: LD_INT 175
2201: ST_TO_ADDR
// end ; 2 :
2202: GO 2334
2204: LD_INT 2
2206: DOUBLE
2207: EQUAL
2208: IFTRUE 2212
2210: GO 2247
2212: POP
// begin time := 0 0$25 ;
2213: LD_ADDR_VAR 0 4
2217: PUSH
2218: LD_INT 875
2220: ST_TO_ADDR
// normalTime := 0 0$25 ;
2221: LD_ADDR_VAR 0 6
2225: PUSH
2226: LD_INT 875
2228: ST_TO_ADDR
// maxTime := 1 1$10 ;
2229: LD_ADDR_VAR 0 8
2233: PUSH
2234: LD_INT 2450
2236: ST_TO_ADDR
// delayTime := 0 0$4 ;
2237: LD_ADDR_VAR 0 7
2241: PUSH
2242: LD_INT 140
2244: ST_TO_ADDR
// end ; 3 :
2245: GO 2334
2247: LD_INT 3
2249: DOUBLE
2250: EQUAL
2251: IFTRUE 2255
2253: GO 2290
2255: POP
// begin time := 0 0$20 ;
2256: LD_ADDR_VAR 0 4
2260: PUSH
2261: LD_INT 700
2263: ST_TO_ADDR
// normalTime := 0 0$20 ;
2264: LD_ADDR_VAR 0 6
2268: PUSH
2269: LD_INT 700
2271: ST_TO_ADDR
// maxTime := 1 1$00 ;
2272: LD_ADDR_VAR 0 8
2276: PUSH
2277: LD_INT 2100
2279: ST_TO_ADDR
// delayTime := 0 0$3 ;
2280: LD_ADDR_VAR 0 7
2284: PUSH
2285: LD_INT 105
2287: ST_TO_ADDR
// end ; 4 :
2288: GO 2334
2290: LD_INT 4
2292: DOUBLE
2293: EQUAL
2294: IFTRUE 2298
2296: GO 2333
2298: POP
// begin time := 0 0$15 ;
2299: LD_ADDR_VAR 0 4
2303: PUSH
2304: LD_INT 525
2306: ST_TO_ADDR
// normalTime := 0 0$15 ;
2307: LD_ADDR_VAR 0 6
2311: PUSH
2312: LD_INT 525
2314: ST_TO_ADDR
// maxTime := 0 0$55 ;
2315: LD_ADDR_VAR 0 8
2319: PUSH
2320: LD_INT 1925
2322: ST_TO_ADDR
// delayTime := 0 0$2 ;
2323: LD_ADDR_VAR 0 7
2327: PUSH
2328: LD_INT 70
2330: ST_TO_ADDR
// end ; end ;
2331: GO 2334
2333: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2334: LD_ADDR_VAR 0 3
2338: PUSH
2339: LD_INT 7
2341: PUSH
2342: LD_INT 8
2344: PUSH
2345: LD_INT 9
2347: PUSH
2348: LD_INT 10
2350: PUSH
2351: LD_INT 11
2353: PUSH
2354: LD_INT 12
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// areas := [ ] ;
2365: LD_ADDR_VAR 0 5
2369: PUSH
2370: EMPTY
2371: ST_TO_ADDR
// for i := 1 to 8 do
2372: LD_ADDR_VAR 0 1
2376: PUSH
2377: DOUBLE
2378: LD_INT 1
2380: DEC
2381: ST_TO_ADDR
2382: LD_INT 8
2384: PUSH
2385: FOR_TO
2386: IFFALSE 2433
// begin if not mpSidePositions [ i ] then
2388: LD_EXP 5
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: NOT
2399: IFFALSE 2403
// continue ;
2401: GO 2385
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2403: LD_ADDR_VAR 0 5
2407: PUSH
2408: LD_VAR 0 5
2412: PUSH
2413: LD_VAR 0 3
2417: PUSH
2418: LD_EXP 5
2422: PUSH
2423: LD_VAR 0 1
2427: ARRAY
2428: ARRAY
2429: ADD
2430: ST_TO_ADDR
// end ;
2431: GO 2385
2433: POP
2434: POP
// x := 1 ;
2435: LD_ADDR_VAR 0 2
2439: PUSH
2440: LD_INT 1
2442: ST_TO_ADDR
// repeat wait ( time ) ;
2443: LD_VAR 0 4
2447: PPUSH
2448: CALL_OW 67
// x := Inc ( x ) ;
2452: LD_ADDR_VAR 0 2
2456: PUSH
2457: LD_VAR 0 2
2461: PPUSH
2462: CALL 41860 0 1
2466: ST_TO_ADDR
// if x > 5 then
2467: LD_VAR 0 2
2471: PUSH
2472: LD_INT 5
2474: GREATER
2475: IFFALSE 2485
// x := 1 ;
2477: LD_ADDR_VAR 0 2
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// for i in areas do
2485: LD_ADDR_VAR 0 1
2489: PUSH
2490: LD_VAR 0 5
2494: PUSH
2495: FOR_IN
2496: IFFALSE 2535
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2498: LD_VAR 0 1
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL_OW 287
2510: PUSH
2511: LD_INT 20
2513: LESS
2514: IFFALSE 2533
// begin CreateCratesArea ( x , i , true ) ;
2516: LD_VAR 0 2
2520: PPUSH
2521: LD_VAR 0 1
2525: PPUSH
2526: LD_INT 1
2528: PPUSH
2529: CALL_OW 55
// end ; end ;
2533: GO 2495
2535: POP
2536: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 100 then
2537: LD_INT 14
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: CALL_OW 287
2547: PUSH
2548: LD_INT 100
2550: LESS
2551: IFFALSE 2595
// for i := 1 to Count ( areas ) do
2553: LD_ADDR_VAR 0 1
2557: PUSH
2558: DOUBLE
2559: LD_INT 1
2561: DEC
2562: ST_TO_ADDR
2563: LD_VAR 0 5
2567: PPUSH
2568: CALL 4910 0 1
2572: PUSH
2573: FOR_TO
2574: IFFALSE 2593
// CreateCratesArea ( x , MZBaseArea , true ) ;
2576: LD_VAR 0 2
2580: PPUSH
2581: LD_INT 14
2583: PPUSH
2584: LD_INT 1
2586: PPUSH
2587: CALL_OW 55
2591: GO 2573
2593: POP
2594: POP
// if GetResourceArea ( MZSpecialArea , mat_cans ) = 0 then
2595: LD_INT 15
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 287
2605: PUSH
2606: LD_INT 0
2608: EQUAL
2609: IFFALSE 2648
// begin for i := 1 to 3 do
2611: LD_ADDR_VAR 0 1
2615: PUSH
2616: DOUBLE
2617: LD_INT 1
2619: DEC
2620: ST_TO_ADDR
2621: LD_INT 3
2623: PUSH
2624: FOR_TO
2625: IFFALSE 2644
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2627: LD_VAR 0 2
2631: PPUSH
2632: LD_INT 15
2634: PPUSH
2635: LD_INT 1
2637: PPUSH
2638: CALL_OW 55
2642: GO 2624
2644: POP
2645: POP
// end else
2646: GO 2679
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
2648: LD_INT 15
2650: PPUSH
2651: LD_INT 1
2653: PPUSH
2654: CALL_OW 287
2658: PUSH
2659: LD_INT 30
2661: LESS
2662: IFFALSE 2679
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2664: LD_VAR 0 2
2668: PPUSH
2669: LD_INT 15
2671: PPUSH
2672: LD_INT 1
2674: PPUSH
2675: CALL_OW 55
// time := time + delayTime ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 4
2688: PUSH
2689: LD_VAR 0 7
2693: PLUS
2694: ST_TO_ADDR
// if time > maxTime then
2695: LD_VAR 0 4
2699: PUSH
2700: LD_VAR 0 8
2704: GREATER
2705: IFFALSE 2717
// time := normalTime ;
2707: LD_ADDR_VAR 0 4
2711: PUSH
2712: LD_VAR 0 6
2716: ST_TO_ADDR
// until false ;
2717: LD_INT 0
2719: IFFALSE 2443
// end ; end_of_file
2721: PPOPN 8
2723: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2724: LD_VAR 0 1
2728: PPUSH
2729: CALL 69350 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2733: LD_VAR 0 1
2737: PPUSH
2738: CALL 50192 0 1
// end ;
2742: PPOPN 1
2744: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2745: LD_VAR 0 1
2749: PPUSH
2750: CALL 69367 0 1
// end ;
2754: PPOPN 1
2756: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2757: LD_VAR 0 1
2761: PPUSH
2762: CALL 50782 0 1
2766: PPOPN 1
2768: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2769: LD_VAR 0 1
2773: PPUSH
2774: LD_VAR 0 2
2778: PPUSH
2779: CALL 69408 0 2
2783: PPOPN 2
2785: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2786: LD_VAR 0 1
2790: PPUSH
2791: LD_VAR 0 2
2795: PPUSH
2796: LD_VAR 0 3
2800: PPUSH
2801: CALL 50835 0 3
2805: PPOPN 3
2807: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2808: LD_INT 0
2810: PPUSH
2811: PPUSH
// if exist_mode then
2812: LD_VAR 0 2
2816: IFFALSE 2841
// unit := CreateCharacter ( prefix & ident ) else
2818: LD_ADDR_VAR 0 5
2822: PUSH
2823: LD_VAR 0 3
2827: PUSH
2828: LD_VAR 0 1
2832: STR
2833: PPUSH
2834: CALL_OW 34
2838: ST_TO_ADDR
2839: GO 2856
// unit := NewCharacter ( ident ) ;
2841: LD_ADDR_VAR 0 5
2845: PUSH
2846: LD_VAR 0 1
2850: PPUSH
2851: CALL_OW 25
2855: ST_TO_ADDR
// result := unit ;
2856: LD_ADDR_VAR 0 4
2860: PUSH
2861: LD_VAR 0 5
2865: ST_TO_ADDR
// end ;
2866: LD_VAR 0 4
2870: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2871: LD_INT 0
2873: PPUSH
2874: PPUSH
// if not side or not nation then
2875: LD_VAR 0 1
2879: NOT
2880: PUSH
2881: LD_VAR 0 2
2885: NOT
2886: OR
2887: IFFALSE 2891
// exit ;
2889: GO 3659
// case nation of nation_american :
2891: LD_VAR 0 2
2895: PUSH
2896: LD_INT 1
2898: DOUBLE
2899: EQUAL
2900: IFTRUE 2904
2902: GO 3118
2904: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2905: LD_ADDR_VAR 0 4
2909: PUSH
2910: LD_INT 35
2912: PUSH
2913: LD_INT 45
2915: PUSH
2916: LD_INT 46
2918: PUSH
2919: LD_INT 47
2921: PUSH
2922: LD_INT 82
2924: PUSH
2925: LD_INT 83
2927: PUSH
2928: LD_INT 84
2930: PUSH
2931: LD_INT 85
2933: PUSH
2934: LD_INT 86
2936: PUSH
2937: LD_INT 1
2939: PUSH
2940: LD_INT 2
2942: PUSH
2943: LD_INT 6
2945: PUSH
2946: LD_INT 15
2948: PUSH
2949: LD_INT 16
2951: PUSH
2952: LD_INT 7
2954: PUSH
2955: LD_INT 12
2957: PUSH
2958: LD_INT 13
2960: PUSH
2961: LD_INT 10
2963: PUSH
2964: LD_INT 14
2966: PUSH
2967: LD_INT 20
2969: PUSH
2970: LD_INT 21
2972: PUSH
2973: LD_INT 22
2975: PUSH
2976: LD_INT 25
2978: PUSH
2979: LD_INT 32
2981: PUSH
2982: LD_INT 27
2984: PUSH
2985: LD_INT 36
2987: PUSH
2988: LD_INT 69
2990: PUSH
2991: LD_INT 39
2993: PUSH
2994: LD_INT 34
2996: PUSH
2997: LD_INT 40
2999: PUSH
3000: LD_INT 48
3002: PUSH
3003: LD_INT 49
3005: PUSH
3006: LD_INT 50
3008: PUSH
3009: LD_INT 51
3011: PUSH
3012: LD_INT 52
3014: PUSH
3015: LD_INT 53
3017: PUSH
3018: LD_INT 54
3020: PUSH
3021: LD_INT 55
3023: PUSH
3024: LD_INT 56
3026: PUSH
3027: LD_INT 57
3029: PUSH
3030: LD_INT 58
3032: PUSH
3033: LD_INT 59
3035: PUSH
3036: LD_INT 60
3038: PUSH
3039: LD_INT 61
3041: PUSH
3042: LD_INT 62
3044: PUSH
3045: LD_INT 80
3047: PUSH
3048: LD_INT 82
3050: PUSH
3051: LD_INT 83
3053: PUSH
3054: LD_INT 84
3056: PUSH
3057: LD_INT 85
3059: PUSH
3060: LD_INT 86
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: ST_TO_ADDR
3116: GO 3583
3118: LD_INT 2
3120: DOUBLE
3121: EQUAL
3122: IFTRUE 3126
3124: GO 3352
3126: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3127: LD_ADDR_VAR 0 4
3131: PUSH
3132: LD_INT 35
3134: PUSH
3135: LD_INT 45
3137: PUSH
3138: LD_INT 46
3140: PUSH
3141: LD_INT 47
3143: PUSH
3144: LD_INT 82
3146: PUSH
3147: LD_INT 83
3149: PUSH
3150: LD_INT 84
3152: PUSH
3153: LD_INT 85
3155: PUSH
3156: LD_INT 87
3158: PUSH
3159: LD_INT 70
3161: PUSH
3162: LD_INT 1
3164: PUSH
3165: LD_INT 11
3167: PUSH
3168: LD_INT 3
3170: PUSH
3171: LD_INT 4
3173: PUSH
3174: LD_INT 5
3176: PUSH
3177: LD_INT 6
3179: PUSH
3180: LD_INT 15
3182: PUSH
3183: LD_INT 18
3185: PUSH
3186: LD_INT 7
3188: PUSH
3189: LD_INT 17
3191: PUSH
3192: LD_INT 8
3194: PUSH
3195: LD_INT 20
3197: PUSH
3198: LD_INT 21
3200: PUSH
3201: LD_INT 22
3203: PUSH
3204: LD_INT 72
3206: PUSH
3207: LD_INT 26
3209: PUSH
3210: LD_INT 69
3212: PUSH
3213: LD_INT 39
3215: PUSH
3216: LD_INT 40
3218: PUSH
3219: LD_INT 41
3221: PUSH
3222: LD_INT 42
3224: PUSH
3225: LD_INT 43
3227: PUSH
3228: LD_INT 48
3230: PUSH
3231: LD_INT 49
3233: PUSH
3234: LD_INT 50
3236: PUSH
3237: LD_INT 51
3239: PUSH
3240: LD_INT 52
3242: PUSH
3243: LD_INT 53
3245: PUSH
3246: LD_INT 54
3248: PUSH
3249: LD_INT 55
3251: PUSH
3252: LD_INT 56
3254: PUSH
3255: LD_INT 60
3257: PUSH
3258: LD_INT 61
3260: PUSH
3261: LD_INT 62
3263: PUSH
3264: LD_INT 66
3266: PUSH
3267: LD_INT 67
3269: PUSH
3270: LD_INT 68
3272: PUSH
3273: LD_INT 81
3275: PUSH
3276: LD_INT 82
3278: PUSH
3279: LD_INT 83
3281: PUSH
3282: LD_INT 84
3284: PUSH
3285: LD_INT 85
3287: PUSH
3288: LD_INT 87
3290: PUSH
3291: LD_INT 88
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: ST_TO_ADDR
3350: GO 3583
3352: LD_INT 3
3354: DOUBLE
3355: EQUAL
3356: IFTRUE 3360
3358: GO 3582
3360: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3361: LD_ADDR_VAR 0 4
3365: PUSH
3366: LD_INT 46
3368: PUSH
3369: LD_INT 47
3371: PUSH
3372: LD_INT 1
3374: PUSH
3375: LD_INT 2
3377: PUSH
3378: LD_INT 82
3380: PUSH
3381: LD_INT 83
3383: PUSH
3384: LD_INT 84
3386: PUSH
3387: LD_INT 85
3389: PUSH
3390: LD_INT 86
3392: PUSH
3393: LD_INT 11
3395: PUSH
3396: LD_INT 9
3398: PUSH
3399: LD_INT 20
3401: PUSH
3402: LD_INT 19
3404: PUSH
3405: LD_INT 21
3407: PUSH
3408: LD_INT 24
3410: PUSH
3411: LD_INT 22
3413: PUSH
3414: LD_INT 25
3416: PUSH
3417: LD_INT 28
3419: PUSH
3420: LD_INT 29
3422: PUSH
3423: LD_INT 30
3425: PUSH
3426: LD_INT 31
3428: PUSH
3429: LD_INT 37
3431: PUSH
3432: LD_INT 38
3434: PUSH
3435: LD_INT 32
3437: PUSH
3438: LD_INT 27
3440: PUSH
3441: LD_INT 33
3443: PUSH
3444: LD_INT 69
3446: PUSH
3447: LD_INT 39
3449: PUSH
3450: LD_INT 34
3452: PUSH
3453: LD_INT 40
3455: PUSH
3456: LD_INT 71
3458: PUSH
3459: LD_INT 23
3461: PUSH
3462: LD_INT 44
3464: PUSH
3465: LD_INT 48
3467: PUSH
3468: LD_INT 49
3470: PUSH
3471: LD_INT 50
3473: PUSH
3474: LD_INT 51
3476: PUSH
3477: LD_INT 52
3479: PUSH
3480: LD_INT 53
3482: PUSH
3483: LD_INT 54
3485: PUSH
3486: LD_INT 55
3488: PUSH
3489: LD_INT 56
3491: PUSH
3492: LD_INT 57
3494: PUSH
3495: LD_INT 58
3497: PUSH
3498: LD_INT 59
3500: PUSH
3501: LD_INT 63
3503: PUSH
3504: LD_INT 64
3506: PUSH
3507: LD_INT 65
3509: PUSH
3510: LD_INT 82
3512: PUSH
3513: LD_INT 83
3515: PUSH
3516: LD_INT 84
3518: PUSH
3519: LD_INT 85
3521: PUSH
3522: LD_INT 86
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: ST_TO_ADDR
3580: GO 3583
3582: POP
// if state > - 1 and state < 3 then
3583: LD_VAR 0 3
3587: PUSH
3588: LD_INT 1
3590: NEG
3591: GREATER
3592: PUSH
3593: LD_VAR 0 3
3597: PUSH
3598: LD_INT 3
3600: LESS
3601: AND
3602: IFFALSE 3659
// for i in result do
3604: LD_ADDR_VAR 0 5
3608: PUSH
3609: LD_VAR 0 4
3613: PUSH
3614: FOR_IN
3615: IFFALSE 3657
// if GetTech ( i , side ) <> state then
3617: LD_VAR 0 5
3621: PPUSH
3622: LD_VAR 0 1
3626: PPUSH
3627: CALL_OW 321
3631: PUSH
3632: LD_VAR 0 3
3636: NONEQUAL
3637: IFFALSE 3655
// result := result diff i ;
3639: LD_ADDR_VAR 0 4
3643: PUSH
3644: LD_VAR 0 4
3648: PUSH
3649: LD_VAR 0 5
3653: DIFF
3654: ST_TO_ADDR
3655: GO 3614
3657: POP
3658: POP
// end ;
3659: LD_VAR 0 4
3663: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3664: LD_INT 0
3666: PPUSH
3667: PPUSH
3668: PPUSH
// result := true ;
3669: LD_ADDR_VAR 0 3
3673: PUSH
3674: LD_INT 1
3676: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3677: LD_ADDR_VAR 0 5
3681: PUSH
3682: LD_VAR 0 2
3686: PPUSH
3687: CALL_OW 480
3691: ST_TO_ADDR
// if not tmp then
3692: LD_VAR 0 5
3696: NOT
3697: IFFALSE 3701
// exit ;
3699: GO 3750
// for i in tmp do
3701: LD_ADDR_VAR 0 4
3705: PUSH
3706: LD_VAR 0 5
3710: PUSH
3711: FOR_IN
3712: IFFALSE 3748
// if GetTech ( i , side ) <> state_researched then
3714: LD_VAR 0 4
3718: PPUSH
3719: LD_VAR 0 1
3723: PPUSH
3724: CALL_OW 321
3728: PUSH
3729: LD_INT 2
3731: NONEQUAL
3732: IFFALSE 3746
// begin result := false ;
3734: LD_ADDR_VAR 0 3
3738: PUSH
3739: LD_INT 0
3741: ST_TO_ADDR
// exit ;
3742: POP
3743: POP
3744: GO 3750
// end ;
3746: GO 3711
3748: POP
3749: POP
// end ;
3750: LD_VAR 0 3
3754: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3755: LD_INT 0
3757: PPUSH
3758: PPUSH
3759: PPUSH
3760: PPUSH
3761: PPUSH
3762: PPUSH
3763: PPUSH
3764: PPUSH
3765: PPUSH
3766: PPUSH
3767: PPUSH
3768: PPUSH
3769: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3770: LD_VAR 0 1
3774: NOT
3775: PUSH
3776: LD_VAR 0 1
3780: PPUSH
3781: CALL_OW 257
3785: PUSH
3786: LD_INT 9
3788: NONEQUAL
3789: OR
3790: IFFALSE 3794
// exit ;
3792: GO 4367
// side := GetSide ( unit ) ;
3794: LD_ADDR_VAR 0 9
3798: PUSH
3799: LD_VAR 0 1
3803: PPUSH
3804: CALL_OW 255
3808: ST_TO_ADDR
// tech_space := tech_spacanom ;
3809: LD_ADDR_VAR 0 12
3813: PUSH
3814: LD_INT 29
3816: ST_TO_ADDR
// tech_time := tech_taurad ;
3817: LD_ADDR_VAR 0 13
3821: PUSH
3822: LD_INT 28
3824: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3825: LD_ADDR_VAR 0 11
3829: PUSH
3830: LD_VAR 0 1
3834: PPUSH
3835: CALL_OW 310
3839: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3840: LD_VAR 0 11
3844: PPUSH
3845: CALL_OW 247
3849: PUSH
3850: LD_INT 2
3852: EQUAL
3853: IFFALSE 3857
// exit ;
3855: GO 4367
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3857: LD_ADDR_VAR 0 8
3861: PUSH
3862: LD_INT 81
3864: PUSH
3865: LD_VAR 0 9
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 3
3876: PUSH
3877: LD_INT 21
3879: PUSH
3880: LD_INT 3
3882: PUSH
3883: EMPTY
3884: LIST
3885: LIST
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PPUSH
3895: CALL_OW 69
3899: ST_TO_ADDR
// if not tmp then
3900: LD_VAR 0 8
3904: NOT
3905: IFFALSE 3909
// exit ;
3907: GO 4367
// if in_unit then
3909: LD_VAR 0 11
3913: IFFALSE 3937
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3915: LD_ADDR_VAR 0 10
3919: PUSH
3920: LD_VAR 0 8
3924: PPUSH
3925: LD_VAR 0 11
3929: PPUSH
3930: CALL_OW 74
3934: ST_TO_ADDR
3935: GO 3957
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3937: LD_ADDR_VAR 0 10
3941: PUSH
3942: LD_VAR 0 8
3946: PPUSH
3947: LD_VAR 0 1
3951: PPUSH
3952: CALL_OW 74
3956: ST_TO_ADDR
// if not enemy then
3957: LD_VAR 0 10
3961: NOT
3962: IFFALSE 3966
// exit ;
3964: GO 4367
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3966: LD_VAR 0 11
3970: PUSH
3971: LD_VAR 0 11
3975: PPUSH
3976: LD_VAR 0 10
3980: PPUSH
3981: CALL_OW 296
3985: PUSH
3986: LD_INT 13
3988: GREATER
3989: AND
3990: PUSH
3991: LD_VAR 0 1
3995: PPUSH
3996: LD_VAR 0 10
4000: PPUSH
4001: CALL_OW 296
4005: PUSH
4006: LD_INT 12
4008: GREATER
4009: OR
4010: IFFALSE 4014
// exit ;
4012: GO 4367
// missile := [ 1 ] ;
4014: LD_ADDR_VAR 0 14
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4025: LD_VAR 0 9
4029: PPUSH
4030: LD_VAR 0 12
4034: PPUSH
4035: CALL_OW 325
4039: IFFALSE 4068
// missile := Replace ( missile , missile + 1 , 2 ) ;
4041: LD_ADDR_VAR 0 14
4045: PUSH
4046: LD_VAR 0 14
4050: PPUSH
4051: LD_VAR 0 14
4055: PUSH
4056: LD_INT 1
4058: PLUS
4059: PPUSH
4060: LD_INT 2
4062: PPUSH
4063: CALL_OW 1
4067: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4068: LD_VAR 0 9
4072: PPUSH
4073: LD_VAR 0 13
4077: PPUSH
4078: CALL_OW 325
4082: PUSH
4083: LD_VAR 0 10
4087: PPUSH
4088: CALL_OW 255
4092: PPUSH
4093: LD_VAR 0 13
4097: PPUSH
4098: CALL_OW 325
4102: NOT
4103: AND
4104: IFFALSE 4133
// missile := Replace ( missile , missile + 1 , 3 ) ;
4106: LD_ADDR_VAR 0 14
4110: PUSH
4111: LD_VAR 0 14
4115: PPUSH
4116: LD_VAR 0 14
4120: PUSH
4121: LD_INT 1
4123: PLUS
4124: PPUSH
4125: LD_INT 3
4127: PPUSH
4128: CALL_OW 1
4132: ST_TO_ADDR
// if missile < 2 then
4133: LD_VAR 0 14
4137: PUSH
4138: LD_INT 2
4140: LESS
4141: IFFALSE 4145
// exit ;
4143: GO 4367
// x := GetX ( enemy ) ;
4145: LD_ADDR_VAR 0 4
4149: PUSH
4150: LD_VAR 0 10
4154: PPUSH
4155: CALL_OW 250
4159: ST_TO_ADDR
// y := GetY ( enemy ) ;
4160: LD_ADDR_VAR 0 5
4164: PUSH
4165: LD_VAR 0 10
4169: PPUSH
4170: CALL_OW 251
4174: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4175: LD_ADDR_VAR 0 6
4179: PUSH
4180: LD_VAR 0 4
4184: PUSH
4185: LD_INT 1
4187: NEG
4188: PPUSH
4189: LD_INT 1
4191: PPUSH
4192: CALL_OW 12
4196: PLUS
4197: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4198: LD_ADDR_VAR 0 7
4202: PUSH
4203: LD_VAR 0 5
4207: PUSH
4208: LD_INT 1
4210: NEG
4211: PPUSH
4212: LD_INT 1
4214: PPUSH
4215: CALL_OW 12
4219: PLUS
4220: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4221: LD_VAR 0 6
4225: PPUSH
4226: LD_VAR 0 7
4230: PPUSH
4231: CALL_OW 488
4235: NOT
4236: IFFALSE 4258
// begin _x := x ;
4238: LD_ADDR_VAR 0 6
4242: PUSH
4243: LD_VAR 0 4
4247: ST_TO_ADDR
// _y := y ;
4248: LD_ADDR_VAR 0 7
4252: PUSH
4253: LD_VAR 0 5
4257: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4258: LD_ADDR_VAR 0 3
4262: PUSH
4263: LD_INT 1
4265: PPUSH
4266: LD_VAR 0 14
4270: PPUSH
4271: CALL_OW 12
4275: ST_TO_ADDR
// case i of 1 :
4276: LD_VAR 0 3
4280: PUSH
4281: LD_INT 1
4283: DOUBLE
4284: EQUAL
4285: IFTRUE 4289
4287: GO 4306
4289: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4290: LD_VAR 0 1
4294: PPUSH
4295: LD_VAR 0 10
4299: PPUSH
4300: CALL_OW 115
4304: GO 4367
4306: LD_INT 2
4308: DOUBLE
4309: EQUAL
4310: IFTRUE 4314
4312: GO 4336
4314: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4315: LD_VAR 0 1
4319: PPUSH
4320: LD_VAR 0 6
4324: PPUSH
4325: LD_VAR 0 7
4329: PPUSH
4330: CALL_OW 153
4334: GO 4367
4336: LD_INT 3
4338: DOUBLE
4339: EQUAL
4340: IFTRUE 4344
4342: GO 4366
4344: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4345: LD_VAR 0 1
4349: PPUSH
4350: LD_VAR 0 6
4354: PPUSH
4355: LD_VAR 0 7
4359: PPUSH
4360: CALL_OW 154
4364: GO 4367
4366: POP
// end ;
4367: LD_VAR 0 2
4371: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4372: LD_INT 0
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// if not unit or not building then
4380: LD_VAR 0 1
4384: NOT
4385: PUSH
4386: LD_VAR 0 2
4390: NOT
4391: OR
4392: IFFALSE 4396
// exit ;
4394: GO 4554
// x := GetX ( building ) ;
4396: LD_ADDR_VAR 0 5
4400: PUSH
4401: LD_VAR 0 2
4405: PPUSH
4406: CALL_OW 250
4410: ST_TO_ADDR
// y := GetY ( building ) ;
4411: LD_ADDR_VAR 0 6
4415: PUSH
4416: LD_VAR 0 2
4420: PPUSH
4421: CALL_OW 251
4425: ST_TO_ADDR
// for i = 0 to 5 do
4426: LD_ADDR_VAR 0 4
4430: PUSH
4431: DOUBLE
4432: LD_INT 0
4434: DEC
4435: ST_TO_ADDR
4436: LD_INT 5
4438: PUSH
4439: FOR_TO
4440: IFFALSE 4552
// begin _x := ShiftX ( x , i , 3 ) ;
4442: LD_ADDR_VAR 0 7
4446: PUSH
4447: LD_VAR 0 5
4451: PPUSH
4452: LD_VAR 0 4
4456: PPUSH
4457: LD_INT 3
4459: PPUSH
4460: CALL_OW 272
4464: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4465: LD_ADDR_VAR 0 8
4469: PUSH
4470: LD_VAR 0 6
4474: PPUSH
4475: LD_VAR 0 4
4479: PPUSH
4480: LD_INT 3
4482: PPUSH
4483: CALL_OW 273
4487: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4488: LD_VAR 0 7
4492: PPUSH
4493: LD_VAR 0 8
4497: PPUSH
4498: CALL_OW 488
4502: NOT
4503: IFFALSE 4507
// continue ;
4505: GO 4439
// if HexInfo ( _x , _y ) = 0 then
4507: LD_VAR 0 7
4511: PPUSH
4512: LD_VAR 0 8
4516: PPUSH
4517: CALL_OW 428
4521: PUSH
4522: LD_INT 0
4524: EQUAL
4525: IFFALSE 4550
// begin ComMoveXY ( unit , _x , _y ) ;
4527: LD_VAR 0 1
4531: PPUSH
4532: LD_VAR 0 7
4536: PPUSH
4537: LD_VAR 0 8
4541: PPUSH
4542: CALL_OW 111
// exit ;
4546: POP
4547: POP
4548: GO 4554
// end ; end ;
4550: GO 4439
4552: POP
4553: POP
// end ;
4554: LD_VAR 0 3
4558: RET
// export function ScanBase ( side , base_area ) ; begin
4559: LD_INT 0
4561: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4562: LD_ADDR_VAR 0 3
4566: PUSH
4567: LD_VAR 0 2
4571: PPUSH
4572: LD_INT 81
4574: PUSH
4575: LD_VAR 0 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PPUSH
4584: CALL_OW 70
4588: ST_TO_ADDR
// end ;
4589: LD_VAR 0 3
4593: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4594: LD_INT 0
4596: PPUSH
4597: PPUSH
4598: PPUSH
4599: PPUSH
// result := false ;
4600: LD_ADDR_VAR 0 2
4604: PUSH
4605: LD_INT 0
4607: ST_TO_ADDR
// side := GetSide ( unit ) ;
4608: LD_ADDR_VAR 0 3
4612: PUSH
4613: LD_VAR 0 1
4617: PPUSH
4618: CALL_OW 255
4622: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4623: LD_ADDR_VAR 0 4
4627: PUSH
4628: LD_VAR 0 1
4632: PPUSH
4633: CALL_OW 248
4637: ST_TO_ADDR
// case nat of 1 :
4638: LD_VAR 0 4
4642: PUSH
4643: LD_INT 1
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// tech := tech_lassight ; 2 :
4652: LD_ADDR_VAR 0 5
4656: PUSH
4657: LD_INT 12
4659: ST_TO_ADDR
4660: GO 4701
4662: LD_INT 2
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4681
4670: POP
// tech := tech_mortar ; 3 :
4671: LD_ADDR_VAR 0 5
4675: PUSH
4676: LD_INT 41
4678: ST_TO_ADDR
4679: GO 4701
4681: LD_INT 3
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4700
4689: POP
// tech := tech_bazooka ; end ;
4690: LD_ADDR_VAR 0 5
4694: PUSH
4695: LD_INT 44
4697: ST_TO_ADDR
4698: GO 4701
4700: POP
// if Researched ( side , tech ) then
4701: LD_VAR 0 3
4705: PPUSH
4706: LD_VAR 0 5
4710: PPUSH
4711: CALL_OW 325
4715: IFFALSE 4742
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4717: LD_ADDR_VAR 0 2
4721: PUSH
4722: LD_INT 5
4724: PUSH
4725: LD_INT 8
4727: PUSH
4728: LD_INT 9
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: LIST
4735: PUSH
4736: LD_VAR 0 4
4740: ARRAY
4741: ST_TO_ADDR
// end ;
4742: LD_VAR 0 2
4746: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4747: LD_INT 0
4749: PPUSH
4750: PPUSH
4751: PPUSH
// if not mines then
4752: LD_VAR 0 2
4756: NOT
4757: IFFALSE 4761
// exit ;
4759: GO 4905
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4761: LD_ADDR_VAR 0 5
4765: PUSH
4766: LD_INT 81
4768: PUSH
4769: LD_VAR 0 1
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: PUSH
4778: LD_INT 3
4780: PUSH
4781: LD_INT 21
4783: PUSH
4784: LD_INT 3
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PPUSH
4799: CALL_OW 69
4803: ST_TO_ADDR
// for i in mines do
4804: LD_ADDR_VAR 0 4
4808: PUSH
4809: LD_VAR 0 2
4813: PUSH
4814: FOR_IN
4815: IFFALSE 4903
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4817: LD_VAR 0 4
4821: PUSH
4822: LD_INT 1
4824: ARRAY
4825: PPUSH
4826: LD_VAR 0 4
4830: PUSH
4831: LD_INT 2
4833: ARRAY
4834: PPUSH
4835: CALL_OW 458
4839: NOT
4840: IFFALSE 4844
// continue ;
4842: GO 4814
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4844: LD_VAR 0 4
4848: PUSH
4849: LD_INT 1
4851: ARRAY
4852: PPUSH
4853: LD_VAR 0 4
4857: PUSH
4858: LD_INT 2
4860: ARRAY
4861: PPUSH
4862: CALL_OW 428
4866: PUSH
4867: LD_VAR 0 5
4871: IN
4872: IFFALSE 4901
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4874: LD_VAR 0 4
4878: PUSH
4879: LD_INT 1
4881: ARRAY
4882: PPUSH
4883: LD_VAR 0 4
4887: PUSH
4888: LD_INT 2
4890: ARRAY
4891: PPUSH
4892: LD_VAR 0 1
4896: PPUSH
4897: CALL_OW 456
// end ;
4901: GO 4814
4903: POP
4904: POP
// end ;
4905: LD_VAR 0 3
4909: RET
// export function Count ( array ) ; begin
4910: LD_INT 0
4912: PPUSH
// result := array + 0 ;
4913: LD_ADDR_VAR 0 2
4917: PUSH
4918: LD_VAR 0 1
4922: PUSH
4923: LD_INT 0
4925: PLUS
4926: ST_TO_ADDR
// end ;
4927: LD_VAR 0 2
4931: RET
// export function IsEmpty ( building ) ; begin
4932: LD_INT 0
4934: PPUSH
// if not building then
4935: LD_VAR 0 1
4939: NOT
4940: IFFALSE 4944
// exit ;
4942: GO 4987
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4944: LD_ADDR_VAR 0 2
4948: PUSH
4949: LD_VAR 0 1
4953: PUSH
4954: LD_INT 22
4956: PUSH
4957: LD_VAR 0 1
4961: PPUSH
4962: CALL_OW 255
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 58
4973: PUSH
4974: EMPTY
4975: LIST
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PPUSH
4981: CALL_OW 69
4985: IN
4986: ST_TO_ADDR
// end ;
4987: LD_VAR 0 2
4991: RET
// export function IsNotFull ( building ) ; var places ; begin
4992: LD_INT 0
4994: PPUSH
4995: PPUSH
// if not building then
4996: LD_VAR 0 1
5000: NOT
5001: IFFALSE 5005
// exit ;
5003: GO 5033
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5005: LD_ADDR_VAR 0 2
5009: PUSH
5010: LD_VAR 0 1
5014: PPUSH
5015: LD_INT 3
5017: PUSH
5018: LD_INT 62
5020: PUSH
5021: EMPTY
5022: LIST
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PPUSH
5028: CALL_OW 72
5032: ST_TO_ADDR
// end ;
5033: LD_VAR 0 2
5037: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5038: LD_INT 0
5040: PPUSH
5041: PPUSH
5042: PPUSH
5043: PPUSH
// tmp := [ ] ;
5044: LD_ADDR_VAR 0 3
5048: PUSH
5049: EMPTY
5050: ST_TO_ADDR
// list := [ ] ;
5051: LD_ADDR_VAR 0 5
5055: PUSH
5056: EMPTY
5057: ST_TO_ADDR
// for i = 16 to 25 do
5058: LD_ADDR_VAR 0 4
5062: PUSH
5063: DOUBLE
5064: LD_INT 16
5066: DEC
5067: ST_TO_ADDR
5068: LD_INT 25
5070: PUSH
5071: FOR_TO
5072: IFFALSE 5145
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5074: LD_ADDR_VAR 0 3
5078: PUSH
5079: LD_VAR 0 3
5083: PUSH
5084: LD_INT 22
5086: PUSH
5087: LD_VAR 0 1
5091: PPUSH
5092: CALL_OW 255
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: LD_INT 91
5103: PUSH
5104: LD_VAR 0 1
5108: PUSH
5109: LD_INT 6
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: PUSH
5117: LD_INT 30
5119: PUSH
5120: LD_VAR 0 4
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: LIST
5133: PUSH
5134: EMPTY
5135: LIST
5136: PPUSH
5137: CALL_OW 69
5141: ADD
5142: ST_TO_ADDR
5143: GO 5071
5145: POP
5146: POP
// for i = 1 to tmp do
5147: LD_ADDR_VAR 0 4
5151: PUSH
5152: DOUBLE
5153: LD_INT 1
5155: DEC
5156: ST_TO_ADDR
5157: LD_VAR 0 3
5161: PUSH
5162: FOR_TO
5163: IFFALSE 5251
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5165: LD_ADDR_VAR 0 5
5169: PUSH
5170: LD_VAR 0 5
5174: PUSH
5175: LD_VAR 0 3
5179: PUSH
5180: LD_VAR 0 4
5184: ARRAY
5185: PPUSH
5186: CALL_OW 266
5190: PUSH
5191: LD_VAR 0 3
5195: PUSH
5196: LD_VAR 0 4
5200: ARRAY
5201: PPUSH
5202: CALL_OW 250
5206: PUSH
5207: LD_VAR 0 3
5211: PUSH
5212: LD_VAR 0 4
5216: ARRAY
5217: PPUSH
5218: CALL_OW 251
5222: PUSH
5223: LD_VAR 0 3
5227: PUSH
5228: LD_VAR 0 4
5232: ARRAY
5233: PPUSH
5234: CALL_OW 254
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: PUSH
5245: EMPTY
5246: LIST
5247: ADD
5248: ST_TO_ADDR
5249: GO 5162
5251: POP
5252: POP
// result := list ;
5253: LD_ADDR_VAR 0 2
5257: PUSH
5258: LD_VAR 0 5
5262: ST_TO_ADDR
// end ;
5263: LD_VAR 0 2
5267: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5268: LD_INT 0
5270: PPUSH
5271: PPUSH
5272: PPUSH
5273: PPUSH
5274: PPUSH
5275: PPUSH
5276: PPUSH
// if not factory then
5277: LD_VAR 0 1
5281: NOT
5282: IFFALSE 5286
// exit ;
5284: GO 5879
// if control = control_apeman then
5286: LD_VAR 0 4
5290: PUSH
5291: LD_INT 5
5293: EQUAL
5294: IFFALSE 5403
// begin tmp := UnitsInside ( factory ) ;
5296: LD_ADDR_VAR 0 8
5300: PUSH
5301: LD_VAR 0 1
5305: PPUSH
5306: CALL_OW 313
5310: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5311: LD_VAR 0 8
5315: PPUSH
5316: LD_INT 25
5318: PUSH
5319: LD_INT 12
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: PPUSH
5326: CALL_OW 72
5330: NOT
5331: IFFALSE 5341
// control := control_manual ;
5333: LD_ADDR_VAR 0 4
5337: PUSH
5338: LD_INT 1
5340: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5341: LD_ADDR_VAR 0 8
5345: PUSH
5346: LD_VAR 0 1
5350: PPUSH
5351: CALL 5038 0 1
5355: ST_TO_ADDR
// if tmp then
5356: LD_VAR 0 8
5360: IFFALSE 5403
// begin for i in tmp do
5362: LD_ADDR_VAR 0 7
5366: PUSH
5367: LD_VAR 0 8
5371: PUSH
5372: FOR_IN
5373: IFFALSE 5401
// if i [ 1 ] = b_ext_radio then
5375: LD_VAR 0 7
5379: PUSH
5380: LD_INT 1
5382: ARRAY
5383: PUSH
5384: LD_INT 22
5386: EQUAL
5387: IFFALSE 5399
// begin control := control_remote ;
5389: LD_ADDR_VAR 0 4
5393: PUSH
5394: LD_INT 2
5396: ST_TO_ADDR
// break ;
5397: GO 5401
// end ;
5399: GO 5372
5401: POP
5402: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5403: LD_VAR 0 1
5407: PPUSH
5408: LD_VAR 0 2
5412: PPUSH
5413: LD_VAR 0 3
5417: PPUSH
5418: LD_VAR 0 4
5422: PPUSH
5423: LD_VAR 0 5
5427: PPUSH
5428: CALL_OW 448
5432: IFFALSE 5467
// begin result := [ chassis , engine , control , weapon ] ;
5434: LD_ADDR_VAR 0 6
5438: PUSH
5439: LD_VAR 0 2
5443: PUSH
5444: LD_VAR 0 3
5448: PUSH
5449: LD_VAR 0 4
5453: PUSH
5454: LD_VAR 0 5
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: ST_TO_ADDR
// exit ;
5465: GO 5879
// end ; _chassis := AvailableChassisList ( factory ) ;
5467: LD_ADDR_VAR 0 9
5471: PUSH
5472: LD_VAR 0 1
5476: PPUSH
5477: CALL_OW 475
5481: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5482: LD_ADDR_VAR 0 11
5486: PUSH
5487: LD_VAR 0 1
5491: PPUSH
5492: CALL_OW 476
5496: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5497: LD_ADDR_VAR 0 12
5501: PUSH
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 477
5511: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5512: LD_ADDR_VAR 0 10
5516: PUSH
5517: LD_VAR 0 1
5521: PPUSH
5522: CALL_OW 478
5526: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5527: LD_VAR 0 9
5531: NOT
5532: PUSH
5533: LD_VAR 0 11
5537: NOT
5538: OR
5539: PUSH
5540: LD_VAR 0 12
5544: NOT
5545: OR
5546: PUSH
5547: LD_VAR 0 10
5551: NOT
5552: OR
5553: IFFALSE 5588
// begin result := [ chassis , engine , control , weapon ] ;
5555: LD_ADDR_VAR 0 6
5559: PUSH
5560: LD_VAR 0 2
5564: PUSH
5565: LD_VAR 0 3
5569: PUSH
5570: LD_VAR 0 4
5574: PUSH
5575: LD_VAR 0 5
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: ST_TO_ADDR
// exit ;
5586: GO 5879
// end ; if not chassis in _chassis then
5588: LD_VAR 0 2
5592: PUSH
5593: LD_VAR 0 9
5597: IN
5598: NOT
5599: IFFALSE 5625
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5601: LD_ADDR_VAR 0 2
5605: PUSH
5606: LD_VAR 0 9
5610: PUSH
5611: LD_INT 1
5613: PPUSH
5614: LD_VAR 0 9
5618: PPUSH
5619: CALL_OW 12
5623: ARRAY
5624: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5625: LD_VAR 0 2
5629: PPUSH
5630: LD_VAR 0 3
5634: PPUSH
5635: CALL 5884 0 2
5639: NOT
5640: IFFALSE 5699
// repeat engine := _engine [ 1 ] ;
5642: LD_ADDR_VAR 0 3
5646: PUSH
5647: LD_VAR 0 11
5651: PUSH
5652: LD_INT 1
5654: ARRAY
5655: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5656: LD_ADDR_VAR 0 11
5660: PUSH
5661: LD_VAR 0 11
5665: PPUSH
5666: LD_INT 1
5668: PPUSH
5669: CALL_OW 3
5673: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5674: LD_VAR 0 2
5678: PPUSH
5679: LD_VAR 0 3
5683: PPUSH
5684: CALL 5884 0 2
5688: PUSH
5689: LD_VAR 0 11
5693: PUSH
5694: EMPTY
5695: EQUAL
5696: OR
5697: IFFALSE 5642
// if not control in _control then
5699: LD_VAR 0 4
5703: PUSH
5704: LD_VAR 0 12
5708: IN
5709: NOT
5710: IFFALSE 5736
// control := _control [ rand ( 1 , _control ) ] ;
5712: LD_ADDR_VAR 0 4
5716: PUSH
5717: LD_VAR 0 12
5721: PUSH
5722: LD_INT 1
5724: PPUSH
5725: LD_VAR 0 12
5729: PPUSH
5730: CALL_OW 12
5734: ARRAY
5735: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5736: LD_VAR 0 2
5740: PPUSH
5741: LD_VAR 0 5
5745: PPUSH
5746: CALL 6104 0 2
5750: NOT
5751: IFFALSE 5810
// repeat weapon := _weapon [ 1 ] ;
5753: LD_ADDR_VAR 0 5
5757: PUSH
5758: LD_VAR 0 10
5762: PUSH
5763: LD_INT 1
5765: ARRAY
5766: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5767: LD_ADDR_VAR 0 10
5771: PUSH
5772: LD_VAR 0 10
5776: PPUSH
5777: LD_INT 1
5779: PPUSH
5780: CALL_OW 3
5784: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5785: LD_VAR 0 2
5789: PPUSH
5790: LD_VAR 0 5
5794: PPUSH
5795: CALL 6104 0 2
5799: PUSH
5800: LD_VAR 0 10
5804: PUSH
5805: EMPTY
5806: EQUAL
5807: OR
5808: IFFALSE 5753
// result := [ ] ;
5810: LD_ADDR_VAR 0 6
5814: PUSH
5815: EMPTY
5816: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5817: LD_VAR 0 1
5821: PPUSH
5822: LD_VAR 0 2
5826: PPUSH
5827: LD_VAR 0 3
5831: PPUSH
5832: LD_VAR 0 4
5836: PPUSH
5837: LD_VAR 0 5
5841: PPUSH
5842: CALL_OW 448
5846: IFFALSE 5879
// result := [ chassis , engine , control , weapon ] ;
5848: LD_ADDR_VAR 0 6
5852: PUSH
5853: LD_VAR 0 2
5857: PUSH
5858: LD_VAR 0 3
5862: PUSH
5863: LD_VAR 0 4
5867: PUSH
5868: LD_VAR 0 5
5872: PUSH
5873: EMPTY
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: ST_TO_ADDR
// end ;
5879: LD_VAR 0 6
5883: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5884: LD_INT 0
5886: PPUSH
// if not chassis or not engine then
5887: LD_VAR 0 1
5891: NOT
5892: PUSH
5893: LD_VAR 0 2
5897: NOT
5898: OR
5899: IFFALSE 5903
// exit ;
5901: GO 6099
// case engine of engine_solar :
5903: LD_VAR 0 2
5907: PUSH
5908: LD_INT 2
5910: DOUBLE
5911: EQUAL
5912: IFTRUE 5916
5914: GO 5954
5916: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5917: LD_ADDR_VAR 0 3
5921: PUSH
5922: LD_INT 11
5924: PUSH
5925: LD_INT 12
5927: PUSH
5928: LD_INT 13
5930: PUSH
5931: LD_INT 14
5933: PUSH
5934: LD_INT 1
5936: PUSH
5937: LD_INT 2
5939: PUSH
5940: LD_INT 3
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: ST_TO_ADDR
5952: GO 6083
5954: LD_INT 1
5956: DOUBLE
5957: EQUAL
5958: IFTRUE 5962
5960: GO 6024
5962: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_INT 11
5970: PUSH
5971: LD_INT 12
5973: PUSH
5974: LD_INT 13
5976: PUSH
5977: LD_INT 14
5979: PUSH
5980: LD_INT 1
5982: PUSH
5983: LD_INT 2
5985: PUSH
5986: LD_INT 3
5988: PUSH
5989: LD_INT 4
5991: PUSH
5992: LD_INT 5
5994: PUSH
5995: LD_INT 21
5997: PUSH
5998: LD_INT 23
6000: PUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 24
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: ST_TO_ADDR
6022: GO 6083
6024: LD_INT 3
6026: DOUBLE
6027: EQUAL
6028: IFTRUE 6032
6030: GO 6082
6032: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6033: LD_ADDR_VAR 0 3
6037: PUSH
6038: LD_INT 13
6040: PUSH
6041: LD_INT 14
6043: PUSH
6044: LD_INT 2
6046: PUSH
6047: LD_INT 3
6049: PUSH
6050: LD_INT 4
6052: PUSH
6053: LD_INT 5
6055: PUSH
6056: LD_INT 21
6058: PUSH
6059: LD_INT 22
6061: PUSH
6062: LD_INT 23
6064: PUSH
6065: LD_INT 24
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: ST_TO_ADDR
6080: GO 6083
6082: POP
// result := ( chassis in result ) ;
6083: LD_ADDR_VAR 0 3
6087: PUSH
6088: LD_VAR 0 1
6092: PUSH
6093: LD_VAR 0 3
6097: IN
6098: ST_TO_ADDR
// end ;
6099: LD_VAR 0 3
6103: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6104: LD_INT 0
6106: PPUSH
// if not chassis or not weapon then
6107: LD_VAR 0 1
6111: NOT
6112: PUSH
6113: LD_VAR 0 2
6117: NOT
6118: OR
6119: IFFALSE 6123
// exit ;
6121: GO 7183
// case weapon of us_machine_gun :
6123: LD_VAR 0 2
6127: PUSH
6128: LD_INT 2
6130: DOUBLE
6131: EQUAL
6132: IFTRUE 6136
6134: GO 6166
6136: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6137: LD_ADDR_VAR 0 3
6141: PUSH
6142: LD_INT 1
6144: PUSH
6145: LD_INT 2
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: LD_INT 4
6153: PUSH
6154: LD_INT 5
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: ST_TO_ADDR
6164: GO 7167
6166: LD_INT 3
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6204
6174: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6175: LD_ADDR_VAR 0 3
6179: PUSH
6180: LD_INT 1
6182: PUSH
6183: LD_INT 2
6185: PUSH
6186: LD_INT 3
6188: PUSH
6189: LD_INT 4
6191: PUSH
6192: LD_INT 5
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: ST_TO_ADDR
6202: GO 7167
6204: LD_INT 11
6206: DOUBLE
6207: EQUAL
6208: IFTRUE 6212
6210: GO 6242
6212: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6213: LD_ADDR_VAR 0 3
6217: PUSH
6218: LD_INT 1
6220: PUSH
6221: LD_INT 2
6223: PUSH
6224: LD_INT 3
6226: PUSH
6227: LD_INT 4
6229: PUSH
6230: LD_INT 5
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: ST_TO_ADDR
6240: GO 7167
6242: LD_INT 4
6244: DOUBLE
6245: EQUAL
6246: IFTRUE 6250
6248: GO 6276
6250: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6251: LD_ADDR_VAR 0 3
6255: PUSH
6256: LD_INT 2
6258: PUSH
6259: LD_INT 3
6261: PUSH
6262: LD_INT 4
6264: PUSH
6265: LD_INT 5
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: ST_TO_ADDR
6274: GO 7167
6276: LD_INT 5
6278: DOUBLE
6279: EQUAL
6280: IFTRUE 6284
6282: GO 6310
6284: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6285: LD_ADDR_VAR 0 3
6289: PUSH
6290: LD_INT 2
6292: PUSH
6293: LD_INT 3
6295: PUSH
6296: LD_INT 4
6298: PUSH
6299: LD_INT 5
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: ST_TO_ADDR
6308: GO 7167
6310: LD_INT 9
6312: DOUBLE
6313: EQUAL
6314: IFTRUE 6318
6316: GO 6344
6318: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6319: LD_ADDR_VAR 0 3
6323: PUSH
6324: LD_INT 2
6326: PUSH
6327: LD_INT 3
6329: PUSH
6330: LD_INT 4
6332: PUSH
6333: LD_INT 5
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: ST_TO_ADDR
6342: GO 7167
6344: LD_INT 7
6346: DOUBLE
6347: EQUAL
6348: IFTRUE 6352
6350: GO 6378
6352: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6353: LD_ADDR_VAR 0 3
6357: PUSH
6358: LD_INT 2
6360: PUSH
6361: LD_INT 3
6363: PUSH
6364: LD_INT 4
6366: PUSH
6367: LD_INT 5
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: ST_TO_ADDR
6376: GO 7167
6378: LD_INT 12
6380: DOUBLE
6381: EQUAL
6382: IFTRUE 6386
6384: GO 6412
6386: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6387: LD_ADDR_VAR 0 3
6391: PUSH
6392: LD_INT 2
6394: PUSH
6395: LD_INT 3
6397: PUSH
6398: LD_INT 4
6400: PUSH
6401: LD_INT 5
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: ST_TO_ADDR
6410: GO 7167
6412: LD_INT 13
6414: DOUBLE
6415: EQUAL
6416: IFTRUE 6420
6418: GO 6446
6420: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6421: LD_ADDR_VAR 0 3
6425: PUSH
6426: LD_INT 2
6428: PUSH
6429: LD_INT 3
6431: PUSH
6432: LD_INT 4
6434: PUSH
6435: LD_INT 5
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: ST_TO_ADDR
6444: GO 7167
6446: LD_INT 14
6448: DOUBLE
6449: EQUAL
6450: IFTRUE 6454
6452: GO 6472
6454: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6455: LD_ADDR_VAR 0 3
6459: PUSH
6460: LD_INT 4
6462: PUSH
6463: LD_INT 5
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: ST_TO_ADDR
6470: GO 7167
6472: LD_INT 6
6474: DOUBLE
6475: EQUAL
6476: IFTRUE 6480
6478: GO 6498
6480: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6481: LD_ADDR_VAR 0 3
6485: PUSH
6486: LD_INT 4
6488: PUSH
6489: LD_INT 5
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: ST_TO_ADDR
6496: GO 7167
6498: LD_INT 10
6500: DOUBLE
6501: EQUAL
6502: IFTRUE 6506
6504: GO 6524
6506: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6507: LD_ADDR_VAR 0 3
6511: PUSH
6512: LD_INT 4
6514: PUSH
6515: LD_INT 5
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: ST_TO_ADDR
6522: GO 7167
6524: LD_INT 22
6526: DOUBLE
6527: EQUAL
6528: IFTRUE 6532
6530: GO 6558
6532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6533: LD_ADDR_VAR 0 3
6537: PUSH
6538: LD_INT 11
6540: PUSH
6541: LD_INT 12
6543: PUSH
6544: LD_INT 13
6546: PUSH
6547: LD_INT 14
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: ST_TO_ADDR
6556: GO 7167
6558: LD_INT 23
6560: DOUBLE
6561: EQUAL
6562: IFTRUE 6566
6564: GO 6592
6566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: LD_INT 11
6574: PUSH
6575: LD_INT 12
6577: PUSH
6578: LD_INT 13
6580: PUSH
6581: LD_INT 14
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: ST_TO_ADDR
6590: GO 7167
6592: LD_INT 24
6594: DOUBLE
6595: EQUAL
6596: IFTRUE 6600
6598: GO 6626
6600: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6601: LD_ADDR_VAR 0 3
6605: PUSH
6606: LD_INT 11
6608: PUSH
6609: LD_INT 12
6611: PUSH
6612: LD_INT 13
6614: PUSH
6615: LD_INT 14
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: ST_TO_ADDR
6624: GO 7167
6626: LD_INT 30
6628: DOUBLE
6629: EQUAL
6630: IFTRUE 6634
6632: GO 6660
6634: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6635: LD_ADDR_VAR 0 3
6639: PUSH
6640: LD_INT 11
6642: PUSH
6643: LD_INT 12
6645: PUSH
6646: LD_INT 13
6648: PUSH
6649: LD_INT 14
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: ST_TO_ADDR
6658: GO 7167
6660: LD_INT 25
6662: DOUBLE
6663: EQUAL
6664: IFTRUE 6668
6666: GO 6686
6668: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6669: LD_ADDR_VAR 0 3
6673: PUSH
6674: LD_INT 13
6676: PUSH
6677: LD_INT 14
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: ST_TO_ADDR
6684: GO 7167
6686: LD_INT 27
6688: DOUBLE
6689: EQUAL
6690: IFTRUE 6694
6692: GO 6712
6694: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6695: LD_ADDR_VAR 0 3
6699: PUSH
6700: LD_INT 13
6702: PUSH
6703: LD_INT 14
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: ST_TO_ADDR
6710: GO 7167
6712: LD_INT 92
6714: DOUBLE
6715: EQUAL
6716: IFTRUE 6720
6718: GO 6746
6720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6721: LD_ADDR_VAR 0 3
6725: PUSH
6726: LD_INT 11
6728: PUSH
6729: LD_INT 12
6731: PUSH
6732: LD_INT 13
6734: PUSH
6735: LD_INT 14
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: ST_TO_ADDR
6744: GO 7167
6746: LD_INT 28
6748: DOUBLE
6749: EQUAL
6750: IFTRUE 6754
6752: GO 6772
6754: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6755: LD_ADDR_VAR 0 3
6759: PUSH
6760: LD_INT 13
6762: PUSH
6763: LD_INT 14
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: ST_TO_ADDR
6770: GO 7167
6772: LD_INT 29
6774: DOUBLE
6775: EQUAL
6776: IFTRUE 6780
6778: GO 6798
6780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6781: LD_ADDR_VAR 0 3
6785: PUSH
6786: LD_INT 13
6788: PUSH
6789: LD_INT 14
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: ST_TO_ADDR
6796: GO 7167
6798: LD_INT 31
6800: DOUBLE
6801: EQUAL
6802: IFTRUE 6806
6804: GO 6824
6806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6807: LD_ADDR_VAR 0 3
6811: PUSH
6812: LD_INT 13
6814: PUSH
6815: LD_INT 14
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: ST_TO_ADDR
6822: GO 7167
6824: LD_INT 26
6826: DOUBLE
6827: EQUAL
6828: IFTRUE 6832
6830: GO 6850
6832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6833: LD_ADDR_VAR 0 3
6837: PUSH
6838: LD_INT 13
6840: PUSH
6841: LD_INT 14
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: ST_TO_ADDR
6848: GO 7167
6850: LD_INT 42
6852: DOUBLE
6853: EQUAL
6854: IFTRUE 6858
6856: GO 6884
6858: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6859: LD_ADDR_VAR 0 3
6863: PUSH
6864: LD_INT 21
6866: PUSH
6867: LD_INT 22
6869: PUSH
6870: LD_INT 23
6872: PUSH
6873: LD_INT 24
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: ST_TO_ADDR
6882: GO 7167
6884: LD_INT 43
6886: DOUBLE
6887: EQUAL
6888: IFTRUE 6892
6890: GO 6918
6892: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6893: LD_ADDR_VAR 0 3
6897: PUSH
6898: LD_INT 21
6900: PUSH
6901: LD_INT 22
6903: PUSH
6904: LD_INT 23
6906: PUSH
6907: LD_INT 24
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: ST_TO_ADDR
6916: GO 7167
6918: LD_INT 44
6920: DOUBLE
6921: EQUAL
6922: IFTRUE 6926
6924: GO 6952
6926: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6927: LD_ADDR_VAR 0 3
6931: PUSH
6932: LD_INT 21
6934: PUSH
6935: LD_INT 22
6937: PUSH
6938: LD_INT 23
6940: PUSH
6941: LD_INT 24
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: ST_TO_ADDR
6950: GO 7167
6952: LD_INT 45
6954: DOUBLE
6955: EQUAL
6956: IFTRUE 6960
6958: GO 6986
6960: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6961: LD_ADDR_VAR 0 3
6965: PUSH
6966: LD_INT 21
6968: PUSH
6969: LD_INT 22
6971: PUSH
6972: LD_INT 23
6974: PUSH
6975: LD_INT 24
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: ST_TO_ADDR
6984: GO 7167
6986: LD_INT 49
6988: DOUBLE
6989: EQUAL
6990: IFTRUE 6994
6992: GO 7020
6994: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6995: LD_ADDR_VAR 0 3
6999: PUSH
7000: LD_INT 21
7002: PUSH
7003: LD_INT 22
7005: PUSH
7006: LD_INT 23
7008: PUSH
7009: LD_INT 24
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: ST_TO_ADDR
7018: GO 7167
7020: LD_INT 51
7022: DOUBLE
7023: EQUAL
7024: IFTRUE 7028
7026: GO 7054
7028: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7029: LD_ADDR_VAR 0 3
7033: PUSH
7034: LD_INT 21
7036: PUSH
7037: LD_INT 22
7039: PUSH
7040: LD_INT 23
7042: PUSH
7043: LD_INT 24
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: ST_TO_ADDR
7052: GO 7167
7054: LD_INT 52
7056: DOUBLE
7057: EQUAL
7058: IFTRUE 7062
7060: GO 7088
7062: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7063: LD_ADDR_VAR 0 3
7067: PUSH
7068: LD_INT 21
7070: PUSH
7071: LD_INT 22
7073: PUSH
7074: LD_INT 23
7076: PUSH
7077: LD_INT 24
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: ST_TO_ADDR
7086: GO 7167
7088: LD_INT 53
7090: DOUBLE
7091: EQUAL
7092: IFTRUE 7096
7094: GO 7114
7096: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7097: LD_ADDR_VAR 0 3
7101: PUSH
7102: LD_INT 23
7104: PUSH
7105: LD_INT 24
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: ST_TO_ADDR
7112: GO 7167
7114: LD_INT 46
7116: DOUBLE
7117: EQUAL
7118: IFTRUE 7122
7120: GO 7140
7122: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7123: LD_ADDR_VAR 0 3
7127: PUSH
7128: LD_INT 23
7130: PUSH
7131: LD_INT 24
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: ST_TO_ADDR
7138: GO 7167
7140: LD_INT 47
7142: DOUBLE
7143: EQUAL
7144: IFTRUE 7148
7146: GO 7166
7148: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7149: LD_ADDR_VAR 0 3
7153: PUSH
7154: LD_INT 23
7156: PUSH
7157: LD_INT 24
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: ST_TO_ADDR
7164: GO 7167
7166: POP
// result := ( chassis in result ) ;
7167: LD_ADDR_VAR 0 3
7171: PUSH
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 3
7181: IN
7182: ST_TO_ADDR
// end ;
7183: LD_VAR 0 3
7187: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7188: LD_INT 0
7190: PPUSH
7191: PPUSH
7192: PPUSH
7193: PPUSH
7194: PPUSH
7195: PPUSH
7196: PPUSH
// result := array ;
7197: LD_ADDR_VAR 0 5
7201: PUSH
7202: LD_VAR 0 1
7206: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7207: LD_VAR 0 1
7211: NOT
7212: PUSH
7213: LD_VAR 0 2
7217: NOT
7218: OR
7219: PUSH
7220: LD_VAR 0 3
7224: NOT
7225: OR
7226: PUSH
7227: LD_VAR 0 2
7231: PUSH
7232: LD_VAR 0 1
7236: GREATER
7237: OR
7238: PUSH
7239: LD_VAR 0 3
7243: PUSH
7244: LD_VAR 0 1
7248: GREATER
7249: OR
7250: IFFALSE 7254
// exit ;
7252: GO 7550
// if direction then
7254: LD_VAR 0 4
7258: IFFALSE 7322
// begin d := 1 ;
7260: LD_ADDR_VAR 0 9
7264: PUSH
7265: LD_INT 1
7267: ST_TO_ADDR
// if i_from > i_to then
7268: LD_VAR 0 2
7272: PUSH
7273: LD_VAR 0 3
7277: GREATER
7278: IFFALSE 7304
// length := ( array - i_from ) + i_to else
7280: LD_ADDR_VAR 0 11
7284: PUSH
7285: LD_VAR 0 1
7289: PUSH
7290: LD_VAR 0 2
7294: MINUS
7295: PUSH
7296: LD_VAR 0 3
7300: PLUS
7301: ST_TO_ADDR
7302: GO 7320
// length := i_to - i_from ;
7304: LD_ADDR_VAR 0 11
7308: PUSH
7309: LD_VAR 0 3
7313: PUSH
7314: LD_VAR 0 2
7318: MINUS
7319: ST_TO_ADDR
// end else
7320: GO 7383
// begin d := - 1 ;
7322: LD_ADDR_VAR 0 9
7326: PUSH
7327: LD_INT 1
7329: NEG
7330: ST_TO_ADDR
// if i_from > i_to then
7331: LD_VAR 0 2
7335: PUSH
7336: LD_VAR 0 3
7340: GREATER
7341: IFFALSE 7361
// length := i_from - i_to else
7343: LD_ADDR_VAR 0 11
7347: PUSH
7348: LD_VAR 0 2
7352: PUSH
7353: LD_VAR 0 3
7357: MINUS
7358: ST_TO_ADDR
7359: GO 7383
// length := ( array - i_to ) + i_from ;
7361: LD_ADDR_VAR 0 11
7365: PUSH
7366: LD_VAR 0 1
7370: PUSH
7371: LD_VAR 0 3
7375: MINUS
7376: PUSH
7377: LD_VAR 0 2
7381: PLUS
7382: ST_TO_ADDR
// end ; if not length then
7383: LD_VAR 0 11
7387: NOT
7388: IFFALSE 7392
// exit ;
7390: GO 7550
// tmp := array ;
7392: LD_ADDR_VAR 0 10
7396: PUSH
7397: LD_VAR 0 1
7401: ST_TO_ADDR
// for i = 1 to length do
7402: LD_ADDR_VAR 0 6
7406: PUSH
7407: DOUBLE
7408: LD_INT 1
7410: DEC
7411: ST_TO_ADDR
7412: LD_VAR 0 11
7416: PUSH
7417: FOR_TO
7418: IFFALSE 7538
// begin for j = 1 to array do
7420: LD_ADDR_VAR 0 7
7424: PUSH
7425: DOUBLE
7426: LD_INT 1
7428: DEC
7429: ST_TO_ADDR
7430: LD_VAR 0 1
7434: PUSH
7435: FOR_TO
7436: IFFALSE 7524
// begin k := j + d ;
7438: LD_ADDR_VAR 0 8
7442: PUSH
7443: LD_VAR 0 7
7447: PUSH
7448: LD_VAR 0 9
7452: PLUS
7453: ST_TO_ADDR
// if k > array then
7454: LD_VAR 0 8
7458: PUSH
7459: LD_VAR 0 1
7463: GREATER
7464: IFFALSE 7474
// k := 1 ;
7466: LD_ADDR_VAR 0 8
7470: PUSH
7471: LD_INT 1
7473: ST_TO_ADDR
// if not k then
7474: LD_VAR 0 8
7478: NOT
7479: IFFALSE 7491
// k := array ;
7481: LD_ADDR_VAR 0 8
7485: PUSH
7486: LD_VAR 0 1
7490: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7491: LD_ADDR_VAR 0 10
7495: PUSH
7496: LD_VAR 0 10
7500: PPUSH
7501: LD_VAR 0 8
7505: PPUSH
7506: LD_VAR 0 1
7510: PUSH
7511: LD_VAR 0 7
7515: ARRAY
7516: PPUSH
7517: CALL_OW 1
7521: ST_TO_ADDR
// end ;
7522: GO 7435
7524: POP
7525: POP
// array := tmp ;
7526: LD_ADDR_VAR 0 1
7530: PUSH
7531: LD_VAR 0 10
7535: ST_TO_ADDR
// end ;
7536: GO 7417
7538: POP
7539: POP
// result := array ;
7540: LD_ADDR_VAR 0 5
7544: PUSH
7545: LD_VAR 0 1
7549: ST_TO_ADDR
// end ;
7550: LD_VAR 0 5
7554: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7555: LD_INT 0
7557: PPUSH
7558: PPUSH
// result := 0 ;
7559: LD_ADDR_VAR 0 3
7563: PUSH
7564: LD_INT 0
7566: ST_TO_ADDR
// if not array or not value in array then
7567: LD_VAR 0 1
7571: NOT
7572: PUSH
7573: LD_VAR 0 2
7577: PUSH
7578: LD_VAR 0 1
7582: IN
7583: NOT
7584: OR
7585: IFFALSE 7589
// exit ;
7587: GO 7643
// for i = 1 to array do
7589: LD_ADDR_VAR 0 4
7593: PUSH
7594: DOUBLE
7595: LD_INT 1
7597: DEC
7598: ST_TO_ADDR
7599: LD_VAR 0 1
7603: PUSH
7604: FOR_TO
7605: IFFALSE 7641
// if value = array [ i ] then
7607: LD_VAR 0 2
7611: PUSH
7612: LD_VAR 0 1
7616: PUSH
7617: LD_VAR 0 4
7621: ARRAY
7622: EQUAL
7623: IFFALSE 7639
// begin result := i ;
7625: LD_ADDR_VAR 0 3
7629: PUSH
7630: LD_VAR 0 4
7634: ST_TO_ADDR
// exit ;
7635: POP
7636: POP
7637: GO 7643
// end ;
7639: GO 7604
7641: POP
7642: POP
// end ;
7643: LD_VAR 0 3
7647: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7648: LD_INT 0
7650: PPUSH
// vc_chassis := chassis ;
7651: LD_ADDR_OWVAR 37
7655: PUSH
7656: LD_VAR 0 1
7660: ST_TO_ADDR
// vc_engine := engine ;
7661: LD_ADDR_OWVAR 39
7665: PUSH
7666: LD_VAR 0 2
7670: ST_TO_ADDR
// vc_control := control ;
7671: LD_ADDR_OWVAR 38
7675: PUSH
7676: LD_VAR 0 3
7680: ST_TO_ADDR
// vc_weapon := weapon ;
7681: LD_ADDR_OWVAR 40
7685: PUSH
7686: LD_VAR 0 4
7690: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7691: LD_ADDR_OWVAR 41
7695: PUSH
7696: LD_VAR 0 5
7700: ST_TO_ADDR
// end ;
7701: LD_VAR 0 6
7705: RET
// export function WantPlant ( unit ) ; var task ; begin
7706: LD_INT 0
7708: PPUSH
7709: PPUSH
// result := false ;
7710: LD_ADDR_VAR 0 2
7714: PUSH
7715: LD_INT 0
7717: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7718: LD_ADDR_VAR 0 3
7722: PUSH
7723: LD_VAR 0 1
7727: PPUSH
7728: CALL_OW 437
7732: ST_TO_ADDR
// if task then
7733: LD_VAR 0 3
7737: IFFALSE 7765
// if task [ 1 ] [ 1 ] = p then
7739: LD_VAR 0 3
7743: PUSH
7744: LD_INT 1
7746: ARRAY
7747: PUSH
7748: LD_INT 1
7750: ARRAY
7751: PUSH
7752: LD_STRING p
7754: EQUAL
7755: IFFALSE 7765
// result := true ;
7757: LD_ADDR_VAR 0 2
7761: PUSH
7762: LD_INT 1
7764: ST_TO_ADDR
// end ;
7765: LD_VAR 0 2
7769: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7770: LD_INT 0
7772: PPUSH
7773: PPUSH
7774: PPUSH
7775: PPUSH
// if pos < 1 then
7776: LD_VAR 0 2
7780: PUSH
7781: LD_INT 1
7783: LESS
7784: IFFALSE 7788
// exit ;
7786: GO 8091
// if pos = 1 then
7788: LD_VAR 0 2
7792: PUSH
7793: LD_INT 1
7795: EQUAL
7796: IFFALSE 7829
// result := Replace ( arr , pos [ 1 ] , value ) else
7798: LD_ADDR_VAR 0 4
7802: PUSH
7803: LD_VAR 0 1
7807: PPUSH
7808: LD_VAR 0 2
7812: PUSH
7813: LD_INT 1
7815: ARRAY
7816: PPUSH
7817: LD_VAR 0 3
7821: PPUSH
7822: CALL_OW 1
7826: ST_TO_ADDR
7827: GO 8091
// begin tmp := arr ;
7829: LD_ADDR_VAR 0 6
7833: PUSH
7834: LD_VAR 0 1
7838: ST_TO_ADDR
// s_arr := [ tmp ] ;
7839: LD_ADDR_VAR 0 7
7843: PUSH
7844: LD_VAR 0 6
7848: PUSH
7849: EMPTY
7850: LIST
7851: ST_TO_ADDR
// for i = 1 to pos - 1 do
7852: LD_ADDR_VAR 0 5
7856: PUSH
7857: DOUBLE
7858: LD_INT 1
7860: DEC
7861: ST_TO_ADDR
7862: LD_VAR 0 2
7866: PUSH
7867: LD_INT 1
7869: MINUS
7870: PUSH
7871: FOR_TO
7872: IFFALSE 7917
// begin tmp := tmp [ pos [ i ] ] ;
7874: LD_ADDR_VAR 0 6
7878: PUSH
7879: LD_VAR 0 6
7883: PUSH
7884: LD_VAR 0 2
7888: PUSH
7889: LD_VAR 0 5
7893: ARRAY
7894: ARRAY
7895: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7896: LD_ADDR_VAR 0 7
7900: PUSH
7901: LD_VAR 0 7
7905: PUSH
7906: LD_VAR 0 6
7910: PUSH
7911: EMPTY
7912: LIST
7913: ADD
7914: ST_TO_ADDR
// end ;
7915: GO 7871
7917: POP
7918: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7919: LD_ADDR_VAR 0 6
7923: PUSH
7924: LD_VAR 0 6
7928: PPUSH
7929: LD_VAR 0 2
7933: PUSH
7934: LD_VAR 0 2
7938: ARRAY
7939: PPUSH
7940: LD_VAR 0 3
7944: PPUSH
7945: CALL_OW 1
7949: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7950: LD_ADDR_VAR 0 7
7954: PUSH
7955: LD_VAR 0 7
7959: PPUSH
7960: LD_VAR 0 7
7964: PPUSH
7965: LD_VAR 0 6
7969: PPUSH
7970: CALL_OW 1
7974: ST_TO_ADDR
// for i = s_arr downto 2 do
7975: LD_ADDR_VAR 0 5
7979: PUSH
7980: DOUBLE
7981: LD_VAR 0 7
7985: INC
7986: ST_TO_ADDR
7987: LD_INT 2
7989: PUSH
7990: FOR_DOWNTO
7991: IFFALSE 8075
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7993: LD_ADDR_VAR 0 6
7997: PUSH
7998: LD_VAR 0 7
8002: PUSH
8003: LD_VAR 0 5
8007: PUSH
8008: LD_INT 1
8010: MINUS
8011: ARRAY
8012: PPUSH
8013: LD_VAR 0 2
8017: PUSH
8018: LD_VAR 0 5
8022: PUSH
8023: LD_INT 1
8025: MINUS
8026: ARRAY
8027: PPUSH
8028: LD_VAR 0 7
8032: PUSH
8033: LD_VAR 0 5
8037: ARRAY
8038: PPUSH
8039: CALL_OW 1
8043: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8044: LD_ADDR_VAR 0 7
8048: PUSH
8049: LD_VAR 0 7
8053: PPUSH
8054: LD_VAR 0 5
8058: PUSH
8059: LD_INT 1
8061: MINUS
8062: PPUSH
8063: LD_VAR 0 6
8067: PPUSH
8068: CALL_OW 1
8072: ST_TO_ADDR
// end ;
8073: GO 7990
8075: POP
8076: POP
// result := s_arr [ 1 ] ;
8077: LD_ADDR_VAR 0 4
8081: PUSH
8082: LD_VAR 0 7
8086: PUSH
8087: LD_INT 1
8089: ARRAY
8090: ST_TO_ADDR
// end ; end ;
8091: LD_VAR 0 4
8095: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8096: LD_INT 0
8098: PPUSH
8099: PPUSH
// if not list then
8100: LD_VAR 0 1
8104: NOT
8105: IFFALSE 8109
// exit ;
8107: GO 8200
// i := list [ pos1 ] ;
8109: LD_ADDR_VAR 0 5
8113: PUSH
8114: LD_VAR 0 1
8118: PUSH
8119: LD_VAR 0 2
8123: ARRAY
8124: ST_TO_ADDR
// if not i then
8125: LD_VAR 0 5
8129: NOT
8130: IFFALSE 8134
// exit ;
8132: GO 8200
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8134: LD_ADDR_VAR 0 1
8138: PUSH
8139: LD_VAR 0 1
8143: PPUSH
8144: LD_VAR 0 2
8148: PPUSH
8149: LD_VAR 0 1
8153: PUSH
8154: LD_VAR 0 3
8158: ARRAY
8159: PPUSH
8160: CALL_OW 1
8164: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8165: LD_ADDR_VAR 0 1
8169: PUSH
8170: LD_VAR 0 1
8174: PPUSH
8175: LD_VAR 0 3
8179: PPUSH
8180: LD_VAR 0 5
8184: PPUSH
8185: CALL_OW 1
8189: ST_TO_ADDR
// result := list ;
8190: LD_ADDR_VAR 0 4
8194: PUSH
8195: LD_VAR 0 1
8199: ST_TO_ADDR
// end ;
8200: LD_VAR 0 4
8204: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8205: LD_INT 0
8207: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8208: LD_ADDR_VAR 0 5
8212: PUSH
8213: LD_VAR 0 1
8217: PPUSH
8218: CALL_OW 250
8222: PPUSH
8223: LD_VAR 0 1
8227: PPUSH
8228: CALL_OW 251
8232: PPUSH
8233: LD_VAR 0 2
8237: PPUSH
8238: LD_VAR 0 3
8242: PPUSH
8243: LD_VAR 0 4
8247: PPUSH
8248: CALL 8626 0 5
8252: ST_TO_ADDR
// end ;
8253: LD_VAR 0 5
8257: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8258: LD_INT 0
8260: PPUSH
8261: PPUSH
8262: PPUSH
8263: PPUSH
// if not list or not unit then
8264: LD_VAR 0 2
8268: NOT
8269: PUSH
8270: LD_VAR 0 1
8274: NOT
8275: OR
8276: IFFALSE 8280
// exit ;
8278: GO 8621
// result := [ ] ;
8280: LD_ADDR_VAR 0 5
8284: PUSH
8285: EMPTY
8286: ST_TO_ADDR
// for i in list do
8287: LD_ADDR_VAR 0 6
8291: PUSH
8292: LD_VAR 0 2
8296: PUSH
8297: FOR_IN
8298: IFFALSE 8516
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8300: LD_ADDR_VAR 0 8
8304: PUSH
8305: LD_VAR 0 1
8309: PPUSH
8310: LD_VAR 0 6
8314: PUSH
8315: LD_INT 1
8317: ARRAY
8318: PPUSH
8319: LD_VAR 0 6
8323: PUSH
8324: LD_INT 2
8326: ARRAY
8327: PPUSH
8328: CALL_OW 297
8332: ST_TO_ADDR
// if not Count ( result ) then
8333: LD_VAR 0 5
8337: PPUSH
8338: CALL 4910 0 1
8342: NOT
8343: IFFALSE 8376
// begin result := Join ( result , [ i , tmp ] ) ;
8345: LD_ADDR_VAR 0 5
8349: PUSH
8350: LD_VAR 0 5
8354: PPUSH
8355: LD_VAR 0 6
8359: PUSH
8360: LD_VAR 0 8
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PPUSH
8369: CALL 40499 0 2
8373: ST_TO_ADDR
// continue ;
8374: GO 8297
// end ; if result [ result ] [ 2 ] <= tmp then
8376: LD_VAR 0 5
8380: PUSH
8381: LD_VAR 0 5
8385: ARRAY
8386: PUSH
8387: LD_INT 2
8389: ARRAY
8390: PUSH
8391: LD_VAR 0 8
8395: LESSEQUAL
8396: IFFALSE 8429
// result := Join ( result , [ i , tmp ] ) else
8398: LD_ADDR_VAR 0 5
8402: PUSH
8403: LD_VAR 0 5
8407: PPUSH
8408: LD_VAR 0 6
8412: PUSH
8413: LD_VAR 0 8
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PPUSH
8422: CALL 40499 0 2
8426: ST_TO_ADDR
8427: GO 8514
// begin for j := 1 to Count ( result ) do
8429: LD_ADDR_VAR 0 7
8433: PUSH
8434: DOUBLE
8435: LD_INT 1
8437: DEC
8438: ST_TO_ADDR
8439: LD_VAR 0 5
8443: PPUSH
8444: CALL 4910 0 1
8448: PUSH
8449: FOR_TO
8450: IFFALSE 8512
// begin if tmp < result [ j ] [ 2 ] then
8452: LD_VAR 0 8
8456: PUSH
8457: LD_VAR 0 5
8461: PUSH
8462: LD_VAR 0 7
8466: ARRAY
8467: PUSH
8468: LD_INT 2
8470: ARRAY
8471: LESS
8472: IFFALSE 8510
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8474: LD_ADDR_VAR 0 5
8478: PUSH
8479: LD_VAR 0 5
8483: PPUSH
8484: LD_VAR 0 7
8488: PPUSH
8489: LD_VAR 0 6
8493: PUSH
8494: LD_VAR 0 8
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PPUSH
8503: CALL_OW 2
8507: ST_TO_ADDR
// break ;
8508: GO 8512
// end ; end ;
8510: GO 8449
8512: POP
8513: POP
// end ; end ;
8514: GO 8297
8516: POP
8517: POP
// if result and not asc then
8518: LD_VAR 0 5
8522: PUSH
8523: LD_VAR 0 3
8527: NOT
8528: AND
8529: IFFALSE 8546
// result := ReverseArray ( result ) ;
8531: LD_ADDR_VAR 0 5
8535: PUSH
8536: LD_VAR 0 5
8540: PPUSH
8541: CALL 35786 0 1
8545: ST_TO_ADDR
// tmp := [ ] ;
8546: LD_ADDR_VAR 0 8
8550: PUSH
8551: EMPTY
8552: ST_TO_ADDR
// if mode then
8553: LD_VAR 0 4
8557: IFFALSE 8621
// begin for i := 1 to result do
8559: LD_ADDR_VAR 0 6
8563: PUSH
8564: DOUBLE
8565: LD_INT 1
8567: DEC
8568: ST_TO_ADDR
8569: LD_VAR 0 5
8573: PUSH
8574: FOR_TO
8575: IFFALSE 8609
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8577: LD_ADDR_VAR 0 8
8581: PUSH
8582: LD_VAR 0 8
8586: PPUSH
8587: LD_VAR 0 5
8591: PUSH
8592: LD_VAR 0 6
8596: ARRAY
8597: PUSH
8598: LD_INT 1
8600: ARRAY
8601: PPUSH
8602: CALL 40499 0 2
8606: ST_TO_ADDR
8607: GO 8574
8609: POP
8610: POP
// result := tmp ;
8611: LD_ADDR_VAR 0 5
8615: PUSH
8616: LD_VAR 0 8
8620: ST_TO_ADDR
// end ; end ;
8621: LD_VAR 0 5
8625: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8626: LD_INT 0
8628: PPUSH
8629: PPUSH
8630: PPUSH
8631: PPUSH
// if not list then
8632: LD_VAR 0 3
8636: NOT
8637: IFFALSE 8641
// exit ;
8639: GO 9029
// result := [ ] ;
8641: LD_ADDR_VAR 0 6
8645: PUSH
8646: EMPTY
8647: ST_TO_ADDR
// for i in list do
8648: LD_ADDR_VAR 0 7
8652: PUSH
8653: LD_VAR 0 3
8657: PUSH
8658: FOR_IN
8659: IFFALSE 8861
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8661: LD_ADDR_VAR 0 9
8665: PUSH
8666: LD_VAR 0 7
8670: PPUSH
8671: LD_VAR 0 1
8675: PPUSH
8676: LD_VAR 0 2
8680: PPUSH
8681: CALL_OW 297
8685: ST_TO_ADDR
// if not result then
8686: LD_VAR 0 6
8690: NOT
8691: IFFALSE 8717
// result := [ [ i , tmp ] ] else
8693: LD_ADDR_VAR 0 6
8697: PUSH
8698: LD_VAR 0 7
8702: PUSH
8703: LD_VAR 0 9
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PUSH
8712: EMPTY
8713: LIST
8714: ST_TO_ADDR
8715: GO 8859
// begin if result [ result ] [ 2 ] < tmp then
8717: LD_VAR 0 6
8721: PUSH
8722: LD_VAR 0 6
8726: ARRAY
8727: PUSH
8728: LD_INT 2
8730: ARRAY
8731: PUSH
8732: LD_VAR 0 9
8736: LESS
8737: IFFALSE 8779
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8739: LD_ADDR_VAR 0 6
8743: PUSH
8744: LD_VAR 0 6
8748: PPUSH
8749: LD_VAR 0 6
8753: PUSH
8754: LD_INT 1
8756: PLUS
8757: PPUSH
8758: LD_VAR 0 7
8762: PUSH
8763: LD_VAR 0 9
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PPUSH
8772: CALL_OW 2
8776: ST_TO_ADDR
8777: GO 8859
// for j = 1 to result do
8779: LD_ADDR_VAR 0 8
8783: PUSH
8784: DOUBLE
8785: LD_INT 1
8787: DEC
8788: ST_TO_ADDR
8789: LD_VAR 0 6
8793: PUSH
8794: FOR_TO
8795: IFFALSE 8857
// begin if tmp < result [ j ] [ 2 ] then
8797: LD_VAR 0 9
8801: PUSH
8802: LD_VAR 0 6
8806: PUSH
8807: LD_VAR 0 8
8811: ARRAY
8812: PUSH
8813: LD_INT 2
8815: ARRAY
8816: LESS
8817: IFFALSE 8855
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8819: LD_ADDR_VAR 0 6
8823: PUSH
8824: LD_VAR 0 6
8828: PPUSH
8829: LD_VAR 0 8
8833: PPUSH
8834: LD_VAR 0 7
8838: PUSH
8839: LD_VAR 0 9
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PPUSH
8848: CALL_OW 2
8852: ST_TO_ADDR
// break ;
8853: GO 8857
// end ; end ;
8855: GO 8794
8857: POP
8858: POP
// end ; end ;
8859: GO 8658
8861: POP
8862: POP
// if result and not asc then
8863: LD_VAR 0 6
8867: PUSH
8868: LD_VAR 0 4
8872: NOT
8873: AND
8874: IFFALSE 8949
// begin tmp := result ;
8876: LD_ADDR_VAR 0 9
8880: PUSH
8881: LD_VAR 0 6
8885: ST_TO_ADDR
// for i = tmp downto 1 do
8886: LD_ADDR_VAR 0 7
8890: PUSH
8891: DOUBLE
8892: LD_VAR 0 9
8896: INC
8897: ST_TO_ADDR
8898: LD_INT 1
8900: PUSH
8901: FOR_DOWNTO
8902: IFFALSE 8947
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8904: LD_ADDR_VAR 0 6
8908: PUSH
8909: LD_VAR 0 6
8913: PPUSH
8914: LD_VAR 0 9
8918: PUSH
8919: LD_VAR 0 7
8923: MINUS
8924: PUSH
8925: LD_INT 1
8927: PLUS
8928: PPUSH
8929: LD_VAR 0 9
8933: PUSH
8934: LD_VAR 0 7
8938: ARRAY
8939: PPUSH
8940: CALL_OW 1
8944: ST_TO_ADDR
8945: GO 8901
8947: POP
8948: POP
// end ; tmp := [ ] ;
8949: LD_ADDR_VAR 0 9
8953: PUSH
8954: EMPTY
8955: ST_TO_ADDR
// if mode then
8956: LD_VAR 0 5
8960: IFFALSE 9029
// begin for i = 1 to result do
8962: LD_ADDR_VAR 0 7
8966: PUSH
8967: DOUBLE
8968: LD_INT 1
8970: DEC
8971: ST_TO_ADDR
8972: LD_VAR 0 6
8976: PUSH
8977: FOR_TO
8978: IFFALSE 9017
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8980: LD_ADDR_VAR 0 9
8984: PUSH
8985: LD_VAR 0 9
8989: PPUSH
8990: LD_VAR 0 7
8994: PPUSH
8995: LD_VAR 0 6
8999: PUSH
9000: LD_VAR 0 7
9004: ARRAY
9005: PUSH
9006: LD_INT 1
9008: ARRAY
9009: PPUSH
9010: CALL_OW 1
9014: ST_TO_ADDR
9015: GO 8977
9017: POP
9018: POP
// result := tmp ;
9019: LD_ADDR_VAR 0 6
9023: PUSH
9024: LD_VAR 0 9
9028: ST_TO_ADDR
// end ; end ;
9029: LD_VAR 0 6
9033: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9034: LD_INT 0
9036: PPUSH
9037: PPUSH
9038: PPUSH
9039: PPUSH
9040: PPUSH
9041: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9042: LD_ADDR_VAR 0 5
9046: PUSH
9047: LD_INT 0
9049: PUSH
9050: LD_INT 0
9052: PUSH
9053: LD_INT 0
9055: PUSH
9056: EMPTY
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: ST_TO_ADDR
// if not x or not y then
9064: LD_VAR 0 2
9068: NOT
9069: PUSH
9070: LD_VAR 0 3
9074: NOT
9075: OR
9076: IFFALSE 9080
// exit ;
9078: GO 10730
// if not range then
9080: LD_VAR 0 4
9084: NOT
9085: IFFALSE 9095
// range := 10 ;
9087: LD_ADDR_VAR 0 4
9091: PUSH
9092: LD_INT 10
9094: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9095: LD_ADDR_VAR 0 8
9099: PUSH
9100: LD_INT 81
9102: PUSH
9103: LD_VAR 0 1
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PUSH
9112: LD_INT 92
9114: PUSH
9115: LD_VAR 0 2
9119: PUSH
9120: LD_VAR 0 3
9124: PUSH
9125: LD_VAR 0 4
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 3
9138: PUSH
9139: LD_INT 21
9141: PUSH
9142: LD_INT 3
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: LIST
9157: PPUSH
9158: CALL_OW 69
9162: ST_TO_ADDR
// if not tmp then
9163: LD_VAR 0 8
9167: NOT
9168: IFFALSE 9172
// exit ;
9170: GO 10730
// for i in tmp do
9172: LD_ADDR_VAR 0 6
9176: PUSH
9177: LD_VAR 0 8
9181: PUSH
9182: FOR_IN
9183: IFFALSE 10705
// begin points := [ 0 , 0 , 0 ] ;
9185: LD_ADDR_VAR 0 9
9189: PUSH
9190: LD_INT 0
9192: PUSH
9193: LD_INT 0
9195: PUSH
9196: LD_INT 0
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: LIST
9203: ST_TO_ADDR
// bpoints := 1 ;
9204: LD_ADDR_VAR 0 10
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9212: LD_VAR 0 6
9216: PPUSH
9217: CALL_OW 247
9221: PUSH
9222: LD_INT 1
9224: DOUBLE
9225: EQUAL
9226: IFTRUE 9230
9228: GO 9808
9230: POP
// begin if GetClass ( i ) = 1 then
9231: LD_VAR 0 6
9235: PPUSH
9236: CALL_OW 257
9240: PUSH
9241: LD_INT 1
9243: EQUAL
9244: IFFALSE 9265
// points := [ 10 , 5 , 3 ] ;
9246: LD_ADDR_VAR 0 9
9250: PUSH
9251: LD_INT 10
9253: PUSH
9254: LD_INT 5
9256: PUSH
9257: LD_INT 3
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9265: LD_VAR 0 6
9269: PPUSH
9270: CALL_OW 257
9274: PUSH
9275: LD_INT 2
9277: PUSH
9278: LD_INT 3
9280: PUSH
9281: LD_INT 4
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: LIST
9288: IN
9289: IFFALSE 9310
// points := [ 3 , 2 , 1 ] ;
9291: LD_ADDR_VAR 0 9
9295: PUSH
9296: LD_INT 3
9298: PUSH
9299: LD_INT 2
9301: PUSH
9302: LD_INT 1
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: LIST
9309: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9310: LD_VAR 0 6
9314: PPUSH
9315: CALL_OW 257
9319: PUSH
9320: LD_INT 5
9322: EQUAL
9323: IFFALSE 9344
// points := [ 130 , 5 , 2 ] ;
9325: LD_ADDR_VAR 0 9
9329: PUSH
9330: LD_INT 130
9332: PUSH
9333: LD_INT 5
9335: PUSH
9336: LD_INT 2
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: LIST
9343: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9344: LD_VAR 0 6
9348: PPUSH
9349: CALL_OW 257
9353: PUSH
9354: LD_INT 8
9356: EQUAL
9357: IFFALSE 9378
// points := [ 35 , 35 , 30 ] ;
9359: LD_ADDR_VAR 0 9
9363: PUSH
9364: LD_INT 35
9366: PUSH
9367: LD_INT 35
9369: PUSH
9370: LD_INT 30
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: LIST
9377: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9378: LD_VAR 0 6
9382: PPUSH
9383: CALL_OW 257
9387: PUSH
9388: LD_INT 9
9390: EQUAL
9391: IFFALSE 9412
// points := [ 20 , 55 , 40 ] ;
9393: LD_ADDR_VAR 0 9
9397: PUSH
9398: LD_INT 20
9400: PUSH
9401: LD_INT 55
9403: PUSH
9404: LD_INT 40
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: LIST
9411: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9412: LD_VAR 0 6
9416: PPUSH
9417: CALL_OW 257
9421: PUSH
9422: LD_INT 12
9424: PUSH
9425: LD_INT 16
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: IN
9432: IFFALSE 9453
// points := [ 5 , 3 , 2 ] ;
9434: LD_ADDR_VAR 0 9
9438: PUSH
9439: LD_INT 5
9441: PUSH
9442: LD_INT 3
9444: PUSH
9445: LD_INT 2
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: LIST
9452: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9453: LD_VAR 0 6
9457: PPUSH
9458: CALL_OW 257
9462: PUSH
9463: LD_INT 17
9465: EQUAL
9466: IFFALSE 9487
// points := [ 100 , 50 , 75 ] ;
9468: LD_ADDR_VAR 0 9
9472: PUSH
9473: LD_INT 100
9475: PUSH
9476: LD_INT 50
9478: PUSH
9479: LD_INT 75
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9487: LD_VAR 0 6
9491: PPUSH
9492: CALL_OW 257
9496: PUSH
9497: LD_INT 15
9499: EQUAL
9500: IFFALSE 9521
// points := [ 10 , 5 , 3 ] ;
9502: LD_ADDR_VAR 0 9
9506: PUSH
9507: LD_INT 10
9509: PUSH
9510: LD_INT 5
9512: PUSH
9513: LD_INT 3
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9521: LD_VAR 0 6
9525: PPUSH
9526: CALL_OW 257
9530: PUSH
9531: LD_INT 14
9533: EQUAL
9534: IFFALSE 9555
// points := [ 10 , 0 , 0 ] ;
9536: LD_ADDR_VAR 0 9
9540: PUSH
9541: LD_INT 10
9543: PUSH
9544: LD_INT 0
9546: PUSH
9547: LD_INT 0
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9555: LD_VAR 0 6
9559: PPUSH
9560: CALL_OW 257
9564: PUSH
9565: LD_INT 11
9567: EQUAL
9568: IFFALSE 9589
// points := [ 30 , 10 , 5 ] ;
9570: LD_ADDR_VAR 0 9
9574: PUSH
9575: LD_INT 30
9577: PUSH
9578: LD_INT 10
9580: PUSH
9581: LD_INT 5
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9589: LD_VAR 0 1
9593: PPUSH
9594: LD_INT 5
9596: PPUSH
9597: CALL_OW 321
9601: PUSH
9602: LD_INT 2
9604: EQUAL
9605: IFFALSE 9622
// bpoints := bpoints * 1.8 ;
9607: LD_ADDR_VAR 0 10
9611: PUSH
9612: LD_VAR 0 10
9616: PUSH
9617: LD_REAL  1.80000000000000E+0000
9620: MUL
9621: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9622: LD_VAR 0 6
9626: PPUSH
9627: CALL_OW 257
9631: PUSH
9632: LD_INT 1
9634: PUSH
9635: LD_INT 2
9637: PUSH
9638: LD_INT 3
9640: PUSH
9641: LD_INT 4
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: IN
9650: PUSH
9651: LD_VAR 0 1
9655: PPUSH
9656: LD_INT 51
9658: PPUSH
9659: CALL_OW 321
9663: PUSH
9664: LD_INT 2
9666: EQUAL
9667: AND
9668: IFFALSE 9685
// bpoints := bpoints * 1.2 ;
9670: LD_ADDR_VAR 0 10
9674: PUSH
9675: LD_VAR 0 10
9679: PUSH
9680: LD_REAL  1.20000000000000E+0000
9683: MUL
9684: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9685: LD_VAR 0 6
9689: PPUSH
9690: CALL_OW 257
9694: PUSH
9695: LD_INT 5
9697: PUSH
9698: LD_INT 7
9700: PUSH
9701: LD_INT 9
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: LIST
9708: IN
9709: PUSH
9710: LD_VAR 0 1
9714: PPUSH
9715: LD_INT 52
9717: PPUSH
9718: CALL_OW 321
9722: PUSH
9723: LD_INT 2
9725: EQUAL
9726: AND
9727: IFFALSE 9744
// bpoints := bpoints * 1.5 ;
9729: LD_ADDR_VAR 0 10
9733: PUSH
9734: LD_VAR 0 10
9738: PUSH
9739: LD_REAL  1.50000000000000E+0000
9742: MUL
9743: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9744: LD_VAR 0 1
9748: PPUSH
9749: LD_INT 66
9751: PPUSH
9752: CALL_OW 321
9756: PUSH
9757: LD_INT 2
9759: EQUAL
9760: IFFALSE 9777
// bpoints := bpoints * 1.1 ;
9762: LD_ADDR_VAR 0 10
9766: PUSH
9767: LD_VAR 0 10
9771: PUSH
9772: LD_REAL  1.10000000000000E+0000
9775: MUL
9776: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9777: LD_ADDR_VAR 0 10
9781: PUSH
9782: LD_VAR 0 10
9786: PUSH
9787: LD_VAR 0 6
9791: PPUSH
9792: LD_INT 1
9794: PPUSH
9795: CALL_OW 259
9799: PUSH
9800: LD_REAL  1.15000000000000E+0000
9803: MUL
9804: MUL
9805: ST_TO_ADDR
// end ; unit_vehicle :
9806: GO 10634
9808: LD_INT 2
9810: DOUBLE
9811: EQUAL
9812: IFTRUE 9816
9814: GO 10622
9816: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9817: LD_VAR 0 6
9821: PPUSH
9822: CALL_OW 264
9826: PUSH
9827: LD_INT 2
9829: PUSH
9830: LD_INT 42
9832: PUSH
9833: LD_INT 24
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: LIST
9840: IN
9841: IFFALSE 9862
// points := [ 25 , 5 , 3 ] ;
9843: LD_ADDR_VAR 0 9
9847: PUSH
9848: LD_INT 25
9850: PUSH
9851: LD_INT 5
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: LIST
9861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9862: LD_VAR 0 6
9866: PPUSH
9867: CALL_OW 264
9871: PUSH
9872: LD_INT 4
9874: PUSH
9875: LD_INT 43
9877: PUSH
9878: LD_INT 25
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: IN
9886: IFFALSE 9907
// points := [ 40 , 15 , 5 ] ;
9888: LD_ADDR_VAR 0 9
9892: PUSH
9893: LD_INT 40
9895: PUSH
9896: LD_INT 15
9898: PUSH
9899: LD_INT 5
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9907: LD_VAR 0 6
9911: PPUSH
9912: CALL_OW 264
9916: PUSH
9917: LD_INT 3
9919: PUSH
9920: LD_INT 23
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: IN
9927: IFFALSE 9948
// points := [ 7 , 25 , 8 ] ;
9929: LD_ADDR_VAR 0 9
9933: PUSH
9934: LD_INT 7
9936: PUSH
9937: LD_INT 25
9939: PUSH
9940: LD_INT 8
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9948: LD_VAR 0 6
9952: PPUSH
9953: CALL_OW 264
9957: PUSH
9958: LD_INT 5
9960: PUSH
9961: LD_INT 27
9963: PUSH
9964: LD_INT 44
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: LIST
9971: IN
9972: IFFALSE 9993
// points := [ 14 , 50 , 16 ] ;
9974: LD_ADDR_VAR 0 9
9978: PUSH
9979: LD_INT 14
9981: PUSH
9982: LD_INT 50
9984: PUSH
9985: LD_INT 16
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: LIST
9992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9993: LD_VAR 0 6
9997: PPUSH
9998: CALL_OW 264
10002: PUSH
10003: LD_INT 6
10005: PUSH
10006: LD_INT 46
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: IN
10013: IFFALSE 10034
// points := [ 32 , 120 , 70 ] ;
10015: LD_ADDR_VAR 0 9
10019: PUSH
10020: LD_INT 32
10022: PUSH
10023: LD_INT 120
10025: PUSH
10026: LD_INT 70
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: LIST
10033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10034: LD_VAR 0 6
10038: PPUSH
10039: CALL_OW 264
10043: PUSH
10044: LD_INT 7
10046: PUSH
10047: LD_INT 28
10049: PUSH
10050: LD_INT 45
10052: PUSH
10053: LD_INT 92
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: IN
10062: IFFALSE 10083
// points := [ 35 , 20 , 45 ] ;
10064: LD_ADDR_VAR 0 9
10068: PUSH
10069: LD_INT 35
10071: PUSH
10072: LD_INT 20
10074: PUSH
10075: LD_INT 45
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: LIST
10082: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10083: LD_VAR 0 6
10087: PPUSH
10088: CALL_OW 264
10092: PUSH
10093: LD_INT 47
10095: PUSH
10096: EMPTY
10097: LIST
10098: IN
10099: IFFALSE 10120
// points := [ 67 , 45 , 75 ] ;
10101: LD_ADDR_VAR 0 9
10105: PUSH
10106: LD_INT 67
10108: PUSH
10109: LD_INT 45
10111: PUSH
10112: LD_INT 75
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10120: LD_VAR 0 6
10124: PPUSH
10125: CALL_OW 264
10129: PUSH
10130: LD_INT 26
10132: PUSH
10133: EMPTY
10134: LIST
10135: IN
10136: IFFALSE 10157
// points := [ 120 , 30 , 80 ] ;
10138: LD_ADDR_VAR 0 9
10142: PUSH
10143: LD_INT 120
10145: PUSH
10146: LD_INT 30
10148: PUSH
10149: LD_INT 80
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: LIST
10156: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10157: LD_VAR 0 6
10161: PPUSH
10162: CALL_OW 264
10166: PUSH
10167: LD_INT 22
10169: PUSH
10170: EMPTY
10171: LIST
10172: IN
10173: IFFALSE 10194
// points := [ 40 , 1 , 1 ] ;
10175: LD_ADDR_VAR 0 9
10179: PUSH
10180: LD_INT 40
10182: PUSH
10183: LD_INT 1
10185: PUSH
10186: LD_INT 1
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: LIST
10193: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10194: LD_VAR 0 6
10198: PPUSH
10199: CALL_OW 264
10203: PUSH
10204: LD_INT 29
10206: PUSH
10207: EMPTY
10208: LIST
10209: IN
10210: IFFALSE 10231
// points := [ 70 , 200 , 400 ] ;
10212: LD_ADDR_VAR 0 9
10216: PUSH
10217: LD_INT 70
10219: PUSH
10220: LD_INT 200
10222: PUSH
10223: LD_INT 400
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: LIST
10230: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10231: LD_VAR 0 6
10235: PPUSH
10236: CALL_OW 264
10240: PUSH
10241: LD_INT 14
10243: PUSH
10244: LD_INT 53
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: IN
10251: IFFALSE 10272
// points := [ 40 , 10 , 20 ] ;
10253: LD_ADDR_VAR 0 9
10257: PUSH
10258: LD_INT 40
10260: PUSH
10261: LD_INT 10
10263: PUSH
10264: LD_INT 20
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: LIST
10271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10272: LD_VAR 0 6
10276: PPUSH
10277: CALL_OW 264
10281: PUSH
10282: LD_INT 9
10284: PUSH
10285: EMPTY
10286: LIST
10287: IN
10288: IFFALSE 10309
// points := [ 5 , 70 , 20 ] ;
10290: LD_ADDR_VAR 0 9
10294: PUSH
10295: LD_INT 5
10297: PUSH
10298: LD_INT 70
10300: PUSH
10301: LD_INT 20
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: LIST
10308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10309: LD_VAR 0 6
10313: PPUSH
10314: CALL_OW 264
10318: PUSH
10319: LD_INT 10
10321: PUSH
10322: EMPTY
10323: LIST
10324: IN
10325: IFFALSE 10346
// points := [ 35 , 110 , 70 ] ;
10327: LD_ADDR_VAR 0 9
10331: PUSH
10332: LD_INT 35
10334: PUSH
10335: LD_INT 110
10337: PUSH
10338: LD_INT 70
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10346: LD_VAR 0 6
10350: PPUSH
10351: CALL_OW 265
10355: PUSH
10356: LD_INT 25
10358: EQUAL
10359: IFFALSE 10380
// points := [ 80 , 65 , 100 ] ;
10361: LD_ADDR_VAR 0 9
10365: PUSH
10366: LD_INT 80
10368: PUSH
10369: LD_INT 65
10371: PUSH
10372: LD_INT 100
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: LIST
10379: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10380: LD_VAR 0 6
10384: PPUSH
10385: CALL_OW 263
10389: PUSH
10390: LD_INT 1
10392: EQUAL
10393: IFFALSE 10428
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10395: LD_ADDR_VAR 0 10
10399: PUSH
10400: LD_VAR 0 10
10404: PUSH
10405: LD_VAR 0 6
10409: PPUSH
10410: CALL_OW 311
10414: PPUSH
10415: LD_INT 3
10417: PPUSH
10418: CALL_OW 259
10422: PUSH
10423: LD_INT 4
10425: MUL
10426: MUL
10427: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10428: LD_VAR 0 6
10432: PPUSH
10433: CALL_OW 263
10437: PUSH
10438: LD_INT 2
10440: EQUAL
10441: IFFALSE 10492
// begin j := IsControledBy ( i ) ;
10443: LD_ADDR_VAR 0 7
10447: PUSH
10448: LD_VAR 0 6
10452: PPUSH
10453: CALL_OW 312
10457: ST_TO_ADDR
// if j then
10458: LD_VAR 0 7
10462: IFFALSE 10492
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10464: LD_ADDR_VAR 0 10
10468: PUSH
10469: LD_VAR 0 10
10473: PUSH
10474: LD_VAR 0 7
10478: PPUSH
10479: LD_INT 3
10481: PPUSH
10482: CALL_OW 259
10486: PUSH
10487: LD_INT 3
10489: MUL
10490: MUL
10491: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10492: LD_VAR 0 6
10496: PPUSH
10497: CALL_OW 264
10501: PUSH
10502: LD_INT 5
10504: PUSH
10505: LD_INT 6
10507: PUSH
10508: LD_INT 46
10510: PUSH
10511: LD_INT 44
10513: PUSH
10514: LD_INT 47
10516: PUSH
10517: LD_INT 45
10519: PUSH
10520: LD_INT 28
10522: PUSH
10523: LD_INT 7
10525: PUSH
10526: LD_INT 27
10528: PUSH
10529: LD_INT 29
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: IN
10544: PUSH
10545: LD_VAR 0 1
10549: PPUSH
10550: LD_INT 52
10552: PPUSH
10553: CALL_OW 321
10557: PUSH
10558: LD_INT 2
10560: EQUAL
10561: AND
10562: IFFALSE 10579
// bpoints := bpoints * 1.2 ;
10564: LD_ADDR_VAR 0 10
10568: PUSH
10569: LD_VAR 0 10
10573: PUSH
10574: LD_REAL  1.20000000000000E+0000
10577: MUL
10578: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10579: LD_VAR 0 6
10583: PPUSH
10584: CALL_OW 264
10588: PUSH
10589: LD_INT 6
10591: PUSH
10592: LD_INT 46
10594: PUSH
10595: LD_INT 47
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: LIST
10602: IN
10603: IFFALSE 10620
// bpoints := bpoints * 1.2 ;
10605: LD_ADDR_VAR 0 10
10609: PUSH
10610: LD_VAR 0 10
10614: PUSH
10615: LD_REAL  1.20000000000000E+0000
10618: MUL
10619: ST_TO_ADDR
// end ; unit_building :
10620: GO 10634
10622: LD_INT 3
10624: DOUBLE
10625: EQUAL
10626: IFTRUE 10630
10628: GO 10633
10630: POP
// ; end ;
10631: GO 10634
10633: POP
// for j = 1 to 3 do
10634: LD_ADDR_VAR 0 7
10638: PUSH
10639: DOUBLE
10640: LD_INT 1
10642: DEC
10643: ST_TO_ADDR
10644: LD_INT 3
10646: PUSH
10647: FOR_TO
10648: IFFALSE 10701
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10650: LD_ADDR_VAR 0 5
10654: PUSH
10655: LD_VAR 0 5
10659: PPUSH
10660: LD_VAR 0 7
10664: PPUSH
10665: LD_VAR 0 5
10669: PUSH
10670: LD_VAR 0 7
10674: ARRAY
10675: PUSH
10676: LD_VAR 0 9
10680: PUSH
10681: LD_VAR 0 7
10685: ARRAY
10686: PUSH
10687: LD_VAR 0 10
10691: MUL
10692: PLUS
10693: PPUSH
10694: CALL_OW 1
10698: ST_TO_ADDR
10699: GO 10647
10701: POP
10702: POP
// end ;
10703: GO 9182
10705: POP
10706: POP
// result := Replace ( result , 4 , tmp ) ;
10707: LD_ADDR_VAR 0 5
10711: PUSH
10712: LD_VAR 0 5
10716: PPUSH
10717: LD_INT 4
10719: PPUSH
10720: LD_VAR 0 8
10724: PPUSH
10725: CALL_OW 1
10729: ST_TO_ADDR
// end ;
10730: LD_VAR 0 5
10734: RET
// export function DangerAtRange ( unit , range ) ; begin
10735: LD_INT 0
10737: PPUSH
// if not unit then
10738: LD_VAR 0 1
10742: NOT
10743: IFFALSE 10747
// exit ;
10745: GO 10792
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10747: LD_ADDR_VAR 0 3
10751: PUSH
10752: LD_VAR 0 1
10756: PPUSH
10757: CALL_OW 255
10761: PPUSH
10762: LD_VAR 0 1
10766: PPUSH
10767: CALL_OW 250
10771: PPUSH
10772: LD_VAR 0 1
10776: PPUSH
10777: CALL_OW 251
10781: PPUSH
10782: LD_VAR 0 2
10786: PPUSH
10787: CALL 9034 0 4
10791: ST_TO_ADDR
// end ;
10792: LD_VAR 0 3
10796: RET
// export function DangerInArea ( side , area ) ; begin
10797: LD_INT 0
10799: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10800: LD_ADDR_VAR 0 3
10804: PUSH
10805: LD_VAR 0 2
10809: PPUSH
10810: LD_INT 81
10812: PUSH
10813: LD_VAR 0 1
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PPUSH
10822: CALL_OW 70
10826: ST_TO_ADDR
// end ;
10827: LD_VAR 0 3
10831: RET
// export function IsExtension ( b ) ; begin
10832: LD_INT 0
10834: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10835: LD_ADDR_VAR 0 2
10839: PUSH
10840: LD_VAR 0 1
10844: PUSH
10845: LD_INT 23
10847: PUSH
10848: LD_INT 20
10850: PUSH
10851: LD_INT 22
10853: PUSH
10854: LD_INT 17
10856: PUSH
10857: LD_INT 24
10859: PUSH
10860: LD_INT 21
10862: PUSH
10863: LD_INT 19
10865: PUSH
10866: LD_INT 16
10868: PUSH
10869: LD_INT 25
10871: PUSH
10872: LD_INT 18
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: IN
10887: ST_TO_ADDR
// end ;
10888: LD_VAR 0 2
10892: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10893: LD_INT 0
10895: PPUSH
10896: PPUSH
10897: PPUSH
// result := [ ] ;
10898: LD_ADDR_VAR 0 4
10902: PUSH
10903: EMPTY
10904: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10905: LD_ADDR_VAR 0 5
10909: PUSH
10910: LD_VAR 0 2
10914: PPUSH
10915: LD_INT 21
10917: PUSH
10918: LD_INT 3
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PPUSH
10925: CALL_OW 70
10929: ST_TO_ADDR
// if not tmp then
10930: LD_VAR 0 5
10934: NOT
10935: IFFALSE 10939
// exit ;
10937: GO 11003
// if checkLink then
10939: LD_VAR 0 3
10943: IFFALSE 10993
// begin for i in tmp do
10945: LD_ADDR_VAR 0 6
10949: PUSH
10950: LD_VAR 0 5
10954: PUSH
10955: FOR_IN
10956: IFFALSE 10991
// if GetBase ( i ) <> base then
10958: LD_VAR 0 6
10962: PPUSH
10963: CALL_OW 274
10967: PUSH
10968: LD_VAR 0 1
10972: NONEQUAL
10973: IFFALSE 10989
// ComLinkToBase ( base , i ) ;
10975: LD_VAR 0 1
10979: PPUSH
10980: LD_VAR 0 6
10984: PPUSH
10985: CALL_OW 169
10989: GO 10955
10991: POP
10992: POP
// end ; result := tmp ;
10993: LD_ADDR_VAR 0 4
10997: PUSH
10998: LD_VAR 0 5
11002: ST_TO_ADDR
// end ;
11003: LD_VAR 0 4
11007: RET
// export function ComComplete ( units , b ) ; var i ; begin
11008: LD_INT 0
11010: PPUSH
11011: PPUSH
// if not units then
11012: LD_VAR 0 1
11016: NOT
11017: IFFALSE 11021
// exit ;
11019: GO 11111
// for i in units do
11021: LD_ADDR_VAR 0 4
11025: PUSH
11026: LD_VAR 0 1
11030: PUSH
11031: FOR_IN
11032: IFFALSE 11109
// if BuildingStatus ( b ) = bs_build then
11034: LD_VAR 0 2
11038: PPUSH
11039: CALL_OW 461
11043: PUSH
11044: LD_INT 1
11046: EQUAL
11047: IFFALSE 11107
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11049: LD_VAR 0 4
11053: PPUSH
11054: LD_STRING h
11056: PUSH
11057: LD_VAR 0 2
11061: PPUSH
11062: CALL_OW 250
11066: PUSH
11067: LD_VAR 0 2
11071: PPUSH
11072: CALL_OW 251
11076: PUSH
11077: LD_VAR 0 2
11081: PUSH
11082: LD_INT 0
11084: PUSH
11085: LD_INT 0
11087: PUSH
11088: LD_INT 0
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: PUSH
11100: EMPTY
11101: LIST
11102: PPUSH
11103: CALL_OW 446
11107: GO 11031
11109: POP
11110: POP
// end ;
11111: LD_VAR 0 3
11115: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11116: LD_INT 0
11118: PPUSH
11119: PPUSH
11120: PPUSH
11121: PPUSH
11122: PPUSH
11123: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11124: LD_VAR 0 1
11128: NOT
11129: PUSH
11130: LD_VAR 0 1
11134: PPUSH
11135: CALL_OW 263
11139: PUSH
11140: LD_INT 2
11142: NONEQUAL
11143: OR
11144: IFFALSE 11148
// exit ;
11146: GO 11464
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11148: LD_ADDR_VAR 0 6
11152: PUSH
11153: LD_INT 22
11155: PUSH
11156: LD_VAR 0 1
11160: PPUSH
11161: CALL_OW 255
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: LD_INT 30
11175: PUSH
11176: LD_INT 36
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: LD_INT 34
11185: PUSH
11186: LD_INT 31
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PPUSH
11202: CALL_OW 69
11206: ST_TO_ADDR
// if not tmp then
11207: LD_VAR 0 6
11211: NOT
11212: IFFALSE 11216
// exit ;
11214: GO 11464
// result := [ ] ;
11216: LD_ADDR_VAR 0 2
11220: PUSH
11221: EMPTY
11222: ST_TO_ADDR
// for i in tmp do
11223: LD_ADDR_VAR 0 3
11227: PUSH
11228: LD_VAR 0 6
11232: PUSH
11233: FOR_IN
11234: IFFALSE 11305
// begin t := UnitsInside ( i ) ;
11236: LD_ADDR_VAR 0 4
11240: PUSH
11241: LD_VAR 0 3
11245: PPUSH
11246: CALL_OW 313
11250: ST_TO_ADDR
// if t then
11251: LD_VAR 0 4
11255: IFFALSE 11303
// for j in t do
11257: LD_ADDR_VAR 0 7
11261: PUSH
11262: LD_VAR 0 4
11266: PUSH
11267: FOR_IN
11268: IFFALSE 11301
// result := Replace ( result , result + 1 , j ) ;
11270: LD_ADDR_VAR 0 2
11274: PUSH
11275: LD_VAR 0 2
11279: PPUSH
11280: LD_VAR 0 2
11284: PUSH
11285: LD_INT 1
11287: PLUS
11288: PPUSH
11289: LD_VAR 0 7
11293: PPUSH
11294: CALL_OW 1
11298: ST_TO_ADDR
11299: GO 11267
11301: POP
11302: POP
// end ;
11303: GO 11233
11305: POP
11306: POP
// if not result then
11307: LD_VAR 0 2
11311: NOT
11312: IFFALSE 11316
// exit ;
11314: GO 11464
// mech := result [ 1 ] ;
11316: LD_ADDR_VAR 0 5
11320: PUSH
11321: LD_VAR 0 2
11325: PUSH
11326: LD_INT 1
11328: ARRAY
11329: ST_TO_ADDR
// if result > 1 then
11330: LD_VAR 0 2
11334: PUSH
11335: LD_INT 1
11337: GREATER
11338: IFFALSE 11450
// begin for i = 2 to result do
11340: LD_ADDR_VAR 0 3
11344: PUSH
11345: DOUBLE
11346: LD_INT 2
11348: DEC
11349: ST_TO_ADDR
11350: LD_VAR 0 2
11354: PUSH
11355: FOR_TO
11356: IFFALSE 11448
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11358: LD_ADDR_VAR 0 4
11362: PUSH
11363: LD_VAR 0 2
11367: PUSH
11368: LD_VAR 0 3
11372: ARRAY
11373: PPUSH
11374: LD_INT 3
11376: PPUSH
11377: CALL_OW 259
11381: PUSH
11382: LD_VAR 0 2
11386: PUSH
11387: LD_VAR 0 3
11391: ARRAY
11392: PPUSH
11393: CALL_OW 432
11397: MINUS
11398: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11399: LD_VAR 0 4
11403: PUSH
11404: LD_VAR 0 5
11408: PPUSH
11409: LD_INT 3
11411: PPUSH
11412: CALL_OW 259
11416: PUSH
11417: LD_VAR 0 5
11421: PPUSH
11422: CALL_OW 432
11426: MINUS
11427: GREATEREQUAL
11428: IFFALSE 11446
// mech := result [ i ] ;
11430: LD_ADDR_VAR 0 5
11434: PUSH
11435: LD_VAR 0 2
11439: PUSH
11440: LD_VAR 0 3
11444: ARRAY
11445: ST_TO_ADDR
// end ;
11446: GO 11355
11448: POP
11449: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11450: LD_VAR 0 1
11454: PPUSH
11455: LD_VAR 0 5
11459: PPUSH
11460: CALL_OW 135
// end ;
11464: LD_VAR 0 2
11468: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11469: LD_INT 0
11471: PPUSH
11472: PPUSH
11473: PPUSH
11474: PPUSH
11475: PPUSH
11476: PPUSH
11477: PPUSH
11478: PPUSH
11479: PPUSH
11480: PPUSH
11481: PPUSH
11482: PPUSH
11483: PPUSH
// result := [ ] ;
11484: LD_ADDR_VAR 0 7
11488: PUSH
11489: EMPTY
11490: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11491: LD_VAR 0 1
11495: PPUSH
11496: CALL_OW 266
11500: PUSH
11501: LD_INT 0
11503: PUSH
11504: LD_INT 1
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: IN
11511: NOT
11512: IFFALSE 11516
// exit ;
11514: GO 13150
// if name then
11516: LD_VAR 0 3
11520: IFFALSE 11536
// SetBName ( base_dep , name ) ;
11522: LD_VAR 0 1
11526: PPUSH
11527: LD_VAR 0 3
11531: PPUSH
11532: CALL_OW 500
// base := GetBase ( base_dep ) ;
11536: LD_ADDR_VAR 0 15
11540: PUSH
11541: LD_VAR 0 1
11545: PPUSH
11546: CALL_OW 274
11550: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11551: LD_ADDR_VAR 0 16
11555: PUSH
11556: LD_VAR 0 1
11560: PPUSH
11561: CALL_OW 255
11565: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11566: LD_ADDR_VAR 0 17
11570: PUSH
11571: LD_VAR 0 1
11575: PPUSH
11576: CALL_OW 248
11580: ST_TO_ADDR
// if sources then
11581: LD_VAR 0 5
11585: IFFALSE 11632
// for i = 1 to 3 do
11587: LD_ADDR_VAR 0 8
11591: PUSH
11592: DOUBLE
11593: LD_INT 1
11595: DEC
11596: ST_TO_ADDR
11597: LD_INT 3
11599: PUSH
11600: FOR_TO
11601: IFFALSE 11630
// AddResourceType ( base , i , sources [ i ] ) ;
11603: LD_VAR 0 15
11607: PPUSH
11608: LD_VAR 0 8
11612: PPUSH
11613: LD_VAR 0 5
11617: PUSH
11618: LD_VAR 0 8
11622: ARRAY
11623: PPUSH
11624: CALL_OW 276
11628: GO 11600
11630: POP
11631: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11632: LD_ADDR_VAR 0 18
11636: PUSH
11637: LD_VAR 0 15
11641: PPUSH
11642: LD_VAR 0 2
11646: PPUSH
11647: LD_INT 1
11649: PPUSH
11650: CALL 10893 0 3
11654: ST_TO_ADDR
// InitHc ;
11655: CALL_OW 19
// InitUc ;
11659: CALL_OW 18
// uc_side := side ;
11663: LD_ADDR_OWVAR 20
11667: PUSH
11668: LD_VAR 0 16
11672: ST_TO_ADDR
// uc_nation := nation ;
11673: LD_ADDR_OWVAR 21
11677: PUSH
11678: LD_VAR 0 17
11682: ST_TO_ADDR
// if buildings then
11683: LD_VAR 0 18
11687: IFFALSE 13009
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11689: LD_ADDR_VAR 0 19
11693: PUSH
11694: LD_VAR 0 18
11698: PPUSH
11699: LD_INT 2
11701: PUSH
11702: LD_INT 30
11704: PUSH
11705: LD_INT 29
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PUSH
11712: LD_INT 30
11714: PUSH
11715: LD_INT 30
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: LIST
11726: PPUSH
11727: CALL_OW 72
11731: ST_TO_ADDR
// if tmp then
11732: LD_VAR 0 19
11736: IFFALSE 11784
// for i in tmp do
11738: LD_ADDR_VAR 0 8
11742: PUSH
11743: LD_VAR 0 19
11747: PUSH
11748: FOR_IN
11749: IFFALSE 11782
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11751: LD_VAR 0 8
11755: PPUSH
11756: CALL_OW 250
11760: PPUSH
11761: LD_VAR 0 8
11765: PPUSH
11766: CALL_OW 251
11770: PPUSH
11771: LD_VAR 0 16
11775: PPUSH
11776: CALL_OW 441
11780: GO 11748
11782: POP
11783: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11784: LD_VAR 0 18
11788: PPUSH
11789: LD_INT 2
11791: PUSH
11792: LD_INT 30
11794: PUSH
11795: LD_INT 32
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 30
11804: PUSH
11805: LD_INT 33
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: LIST
11816: PPUSH
11817: CALL_OW 72
11821: IFFALSE 11909
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11823: LD_ADDR_VAR 0 8
11827: PUSH
11828: LD_VAR 0 18
11832: PPUSH
11833: LD_INT 2
11835: PUSH
11836: LD_INT 30
11838: PUSH
11839: LD_INT 32
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 30
11848: PUSH
11849: LD_INT 33
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: LIST
11860: PPUSH
11861: CALL_OW 72
11865: PUSH
11866: FOR_IN
11867: IFFALSE 11907
// begin if not GetBWeapon ( i ) then
11869: LD_VAR 0 8
11873: PPUSH
11874: CALL_OW 269
11878: NOT
11879: IFFALSE 11905
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11881: LD_VAR 0 8
11885: PPUSH
11886: LD_VAR 0 8
11890: PPUSH
11891: LD_VAR 0 2
11895: PPUSH
11896: CALL 13155 0 2
11900: PPUSH
11901: CALL_OW 431
// end ;
11905: GO 11866
11907: POP
11908: POP
// end ; for i = 1 to personel do
11909: LD_ADDR_VAR 0 8
11913: PUSH
11914: DOUBLE
11915: LD_INT 1
11917: DEC
11918: ST_TO_ADDR
11919: LD_VAR 0 6
11923: PUSH
11924: FOR_TO
11925: IFFALSE 12989
// begin if i > 4 then
11927: LD_VAR 0 8
11931: PUSH
11932: LD_INT 4
11934: GREATER
11935: IFFALSE 11939
// break ;
11937: GO 12989
// case i of 1 :
11939: LD_VAR 0 8
11943: PUSH
11944: LD_INT 1
11946: DOUBLE
11947: EQUAL
11948: IFTRUE 11952
11950: GO 12032
11952: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11953: LD_ADDR_VAR 0 12
11957: PUSH
11958: LD_VAR 0 18
11962: PPUSH
11963: LD_INT 22
11965: PUSH
11966: LD_VAR 0 16
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 58
11977: PUSH
11978: EMPTY
11979: LIST
11980: PUSH
11981: LD_INT 2
11983: PUSH
11984: LD_INT 30
11986: PUSH
11987: LD_INT 32
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 30
11996: PUSH
11997: LD_INT 4
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 30
12006: PUSH
12007: LD_INT 5
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: LIST
12024: PPUSH
12025: CALL_OW 72
12029: ST_TO_ADDR
12030: GO 12254
12032: LD_INT 2
12034: DOUBLE
12035: EQUAL
12036: IFTRUE 12040
12038: GO 12102
12040: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12041: LD_ADDR_VAR 0 12
12045: PUSH
12046: LD_VAR 0 18
12050: PPUSH
12051: LD_INT 22
12053: PUSH
12054: LD_VAR 0 16
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 2
12065: PUSH
12066: LD_INT 30
12068: PUSH
12069: LD_INT 0
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 30
12078: PUSH
12079: LD_INT 1
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PPUSH
12095: CALL_OW 72
12099: ST_TO_ADDR
12100: GO 12254
12102: LD_INT 3
12104: DOUBLE
12105: EQUAL
12106: IFTRUE 12110
12108: GO 12172
12110: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12111: LD_ADDR_VAR 0 12
12115: PUSH
12116: LD_VAR 0 18
12120: PPUSH
12121: LD_INT 22
12123: PUSH
12124: LD_VAR 0 16
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 2
12135: PUSH
12136: LD_INT 30
12138: PUSH
12139: LD_INT 2
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: LD_INT 30
12148: PUSH
12149: LD_INT 3
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: LIST
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PPUSH
12165: CALL_OW 72
12169: ST_TO_ADDR
12170: GO 12254
12172: LD_INT 4
12174: DOUBLE
12175: EQUAL
12176: IFTRUE 12180
12178: GO 12253
12180: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12181: LD_ADDR_VAR 0 12
12185: PUSH
12186: LD_VAR 0 18
12190: PPUSH
12191: LD_INT 22
12193: PUSH
12194: LD_VAR 0 16
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PUSH
12203: LD_INT 2
12205: PUSH
12206: LD_INT 30
12208: PUSH
12209: LD_INT 6
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: LD_INT 30
12218: PUSH
12219: LD_INT 7
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 30
12228: PUSH
12229: LD_INT 8
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PPUSH
12246: CALL_OW 72
12250: ST_TO_ADDR
12251: GO 12254
12253: POP
// if i = 1 then
12254: LD_VAR 0 8
12258: PUSH
12259: LD_INT 1
12261: EQUAL
12262: IFFALSE 12373
// begin tmp := [ ] ;
12264: LD_ADDR_VAR 0 19
12268: PUSH
12269: EMPTY
12270: ST_TO_ADDR
// for j in f do
12271: LD_ADDR_VAR 0 9
12275: PUSH
12276: LD_VAR 0 12
12280: PUSH
12281: FOR_IN
12282: IFFALSE 12355
// if GetBType ( j ) = b_bunker then
12284: LD_VAR 0 9
12288: PPUSH
12289: CALL_OW 266
12293: PUSH
12294: LD_INT 32
12296: EQUAL
12297: IFFALSE 12324
// tmp := Insert ( tmp , 1 , j ) else
12299: LD_ADDR_VAR 0 19
12303: PUSH
12304: LD_VAR 0 19
12308: PPUSH
12309: LD_INT 1
12311: PPUSH
12312: LD_VAR 0 9
12316: PPUSH
12317: CALL_OW 2
12321: ST_TO_ADDR
12322: GO 12353
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12324: LD_ADDR_VAR 0 19
12328: PUSH
12329: LD_VAR 0 19
12333: PPUSH
12334: LD_VAR 0 19
12338: PUSH
12339: LD_INT 1
12341: PLUS
12342: PPUSH
12343: LD_VAR 0 9
12347: PPUSH
12348: CALL_OW 2
12352: ST_TO_ADDR
12353: GO 12281
12355: POP
12356: POP
// if tmp then
12357: LD_VAR 0 19
12361: IFFALSE 12373
// f := tmp ;
12363: LD_ADDR_VAR 0 12
12367: PUSH
12368: LD_VAR 0 19
12372: ST_TO_ADDR
// end ; x := personel [ i ] ;
12373: LD_ADDR_VAR 0 13
12377: PUSH
12378: LD_VAR 0 6
12382: PUSH
12383: LD_VAR 0 8
12387: ARRAY
12388: ST_TO_ADDR
// if x = - 1 then
12389: LD_VAR 0 13
12393: PUSH
12394: LD_INT 1
12396: NEG
12397: EQUAL
12398: IFFALSE 12607
// begin for j in f do
12400: LD_ADDR_VAR 0 9
12404: PUSH
12405: LD_VAR 0 12
12409: PUSH
12410: FOR_IN
12411: IFFALSE 12603
// repeat InitHc ;
12413: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12417: LD_VAR 0 9
12421: PPUSH
12422: CALL_OW 266
12426: PUSH
12427: LD_INT 5
12429: EQUAL
12430: IFFALSE 12500
// begin if UnitsInside ( j ) < 3 then
12432: LD_VAR 0 9
12436: PPUSH
12437: CALL_OW 313
12441: PUSH
12442: LD_INT 3
12444: LESS
12445: IFFALSE 12481
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12447: LD_INT 0
12449: PPUSH
12450: LD_INT 5
12452: PUSH
12453: LD_INT 8
12455: PUSH
12456: LD_INT 9
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: LIST
12463: PUSH
12464: LD_VAR 0 17
12468: ARRAY
12469: PPUSH
12470: LD_VAR 0 4
12474: PPUSH
12475: CALL_OW 380
12479: GO 12498
// PrepareHuman ( false , i , skill ) ;
12481: LD_INT 0
12483: PPUSH
12484: LD_VAR 0 8
12488: PPUSH
12489: LD_VAR 0 4
12493: PPUSH
12494: CALL_OW 380
// end else
12498: GO 12517
// PrepareHuman ( false , i , skill ) ;
12500: LD_INT 0
12502: PPUSH
12503: LD_VAR 0 8
12507: PPUSH
12508: LD_VAR 0 4
12512: PPUSH
12513: CALL_OW 380
// un := CreateHuman ;
12517: LD_ADDR_VAR 0 14
12521: PUSH
12522: CALL_OW 44
12526: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12527: LD_ADDR_VAR 0 7
12531: PUSH
12532: LD_VAR 0 7
12536: PPUSH
12537: LD_INT 1
12539: PPUSH
12540: LD_VAR 0 14
12544: PPUSH
12545: CALL_OW 2
12549: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12550: LD_VAR 0 14
12554: PPUSH
12555: LD_VAR 0 9
12559: PPUSH
12560: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12564: LD_VAR 0 9
12568: PPUSH
12569: CALL_OW 313
12573: PUSH
12574: LD_INT 6
12576: EQUAL
12577: PUSH
12578: LD_VAR 0 9
12582: PPUSH
12583: CALL_OW 266
12587: PUSH
12588: LD_INT 32
12590: PUSH
12591: LD_INT 31
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: IN
12598: OR
12599: IFFALSE 12413
12601: GO 12410
12603: POP
12604: POP
// end else
12605: GO 12987
// for j = 1 to x do
12607: LD_ADDR_VAR 0 9
12611: PUSH
12612: DOUBLE
12613: LD_INT 1
12615: DEC
12616: ST_TO_ADDR
12617: LD_VAR 0 13
12621: PUSH
12622: FOR_TO
12623: IFFALSE 12985
// begin InitHc ;
12625: CALL_OW 19
// if not f then
12629: LD_VAR 0 12
12633: NOT
12634: IFFALSE 12723
// begin PrepareHuman ( false , i , skill ) ;
12636: LD_INT 0
12638: PPUSH
12639: LD_VAR 0 8
12643: PPUSH
12644: LD_VAR 0 4
12648: PPUSH
12649: CALL_OW 380
// un := CreateHuman ;
12653: LD_ADDR_VAR 0 14
12657: PUSH
12658: CALL_OW 44
12662: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12663: LD_ADDR_VAR 0 7
12667: PUSH
12668: LD_VAR 0 7
12672: PPUSH
12673: LD_INT 1
12675: PPUSH
12676: LD_VAR 0 14
12680: PPUSH
12681: CALL_OW 2
12685: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12686: LD_VAR 0 14
12690: PPUSH
12691: LD_VAR 0 1
12695: PPUSH
12696: CALL_OW 250
12700: PPUSH
12701: LD_VAR 0 1
12705: PPUSH
12706: CALL_OW 251
12710: PPUSH
12711: LD_INT 10
12713: PPUSH
12714: LD_INT 0
12716: PPUSH
12717: CALL_OW 50
// continue ;
12721: GO 12622
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12723: LD_VAR 0 12
12727: PUSH
12728: LD_INT 1
12730: ARRAY
12731: PPUSH
12732: CALL_OW 313
12736: PUSH
12737: LD_VAR 0 12
12741: PUSH
12742: LD_INT 1
12744: ARRAY
12745: PPUSH
12746: CALL_OW 266
12750: PUSH
12751: LD_INT 32
12753: PUSH
12754: LD_INT 31
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: IN
12761: AND
12762: PUSH
12763: LD_VAR 0 12
12767: PUSH
12768: LD_INT 1
12770: ARRAY
12771: PPUSH
12772: CALL_OW 313
12776: PUSH
12777: LD_INT 6
12779: EQUAL
12780: OR
12781: IFFALSE 12801
// f := Delete ( f , 1 ) ;
12783: LD_ADDR_VAR 0 12
12787: PUSH
12788: LD_VAR 0 12
12792: PPUSH
12793: LD_INT 1
12795: PPUSH
12796: CALL_OW 3
12800: ST_TO_ADDR
// if not f then
12801: LD_VAR 0 12
12805: NOT
12806: IFFALSE 12824
// begin x := x + 2 ;
12808: LD_ADDR_VAR 0 13
12812: PUSH
12813: LD_VAR 0 13
12817: PUSH
12818: LD_INT 2
12820: PLUS
12821: ST_TO_ADDR
// continue ;
12822: GO 12622
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12824: LD_VAR 0 12
12828: PUSH
12829: LD_INT 1
12831: ARRAY
12832: PPUSH
12833: CALL_OW 266
12837: PUSH
12838: LD_INT 5
12840: EQUAL
12841: IFFALSE 12915
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12843: LD_VAR 0 12
12847: PUSH
12848: LD_INT 1
12850: ARRAY
12851: PPUSH
12852: CALL_OW 313
12856: PUSH
12857: LD_INT 3
12859: LESS
12860: IFFALSE 12896
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12862: LD_INT 0
12864: PPUSH
12865: LD_INT 5
12867: PUSH
12868: LD_INT 8
12870: PUSH
12871: LD_INT 9
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: LIST
12878: PUSH
12879: LD_VAR 0 17
12883: ARRAY
12884: PPUSH
12885: LD_VAR 0 4
12889: PPUSH
12890: CALL_OW 380
12894: GO 12913
// PrepareHuman ( false , i , skill ) ;
12896: LD_INT 0
12898: PPUSH
12899: LD_VAR 0 8
12903: PPUSH
12904: LD_VAR 0 4
12908: PPUSH
12909: CALL_OW 380
// end else
12913: GO 12932
// PrepareHuman ( false , i , skill ) ;
12915: LD_INT 0
12917: PPUSH
12918: LD_VAR 0 8
12922: PPUSH
12923: LD_VAR 0 4
12927: PPUSH
12928: CALL_OW 380
// un := CreateHuman ;
12932: LD_ADDR_VAR 0 14
12936: PUSH
12937: CALL_OW 44
12941: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12942: LD_ADDR_VAR 0 7
12946: PUSH
12947: LD_VAR 0 7
12951: PPUSH
12952: LD_INT 1
12954: PPUSH
12955: LD_VAR 0 14
12959: PPUSH
12960: CALL_OW 2
12964: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12965: LD_VAR 0 14
12969: PPUSH
12970: LD_VAR 0 12
12974: PUSH
12975: LD_INT 1
12977: ARRAY
12978: PPUSH
12979: CALL_OW 52
// end ;
12983: GO 12622
12985: POP
12986: POP
// end ;
12987: GO 11924
12989: POP
12990: POP
// result := result ^ buildings ;
12991: LD_ADDR_VAR 0 7
12995: PUSH
12996: LD_VAR 0 7
13000: PUSH
13001: LD_VAR 0 18
13005: ADD
13006: ST_TO_ADDR
// end else
13007: GO 13150
// begin for i = 1 to personel do
13009: LD_ADDR_VAR 0 8
13013: PUSH
13014: DOUBLE
13015: LD_INT 1
13017: DEC
13018: ST_TO_ADDR
13019: LD_VAR 0 6
13023: PUSH
13024: FOR_TO
13025: IFFALSE 13148
// begin if i > 4 then
13027: LD_VAR 0 8
13031: PUSH
13032: LD_INT 4
13034: GREATER
13035: IFFALSE 13039
// break ;
13037: GO 13148
// x := personel [ i ] ;
13039: LD_ADDR_VAR 0 13
13043: PUSH
13044: LD_VAR 0 6
13048: PUSH
13049: LD_VAR 0 8
13053: ARRAY
13054: ST_TO_ADDR
// if x = - 1 then
13055: LD_VAR 0 13
13059: PUSH
13060: LD_INT 1
13062: NEG
13063: EQUAL
13064: IFFALSE 13068
// continue ;
13066: GO 13024
// PrepareHuman ( false , i , skill ) ;
13068: LD_INT 0
13070: PPUSH
13071: LD_VAR 0 8
13075: PPUSH
13076: LD_VAR 0 4
13080: PPUSH
13081: CALL_OW 380
// un := CreateHuman ;
13085: LD_ADDR_VAR 0 14
13089: PUSH
13090: CALL_OW 44
13094: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13095: LD_VAR 0 14
13099: PPUSH
13100: LD_VAR 0 1
13104: PPUSH
13105: CALL_OW 250
13109: PPUSH
13110: LD_VAR 0 1
13114: PPUSH
13115: CALL_OW 251
13119: PPUSH
13120: LD_INT 10
13122: PPUSH
13123: LD_INT 0
13125: PPUSH
13126: CALL_OW 50
// result := result ^ un ;
13130: LD_ADDR_VAR 0 7
13134: PUSH
13135: LD_VAR 0 7
13139: PUSH
13140: LD_VAR 0 14
13144: ADD
13145: ST_TO_ADDR
// end ;
13146: GO 13024
13148: POP
13149: POP
// end ; end ;
13150: LD_VAR 0 7
13154: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13155: LD_INT 0
13157: PPUSH
13158: PPUSH
13159: PPUSH
13160: PPUSH
13161: PPUSH
13162: PPUSH
13163: PPUSH
13164: PPUSH
13165: PPUSH
13166: PPUSH
13167: PPUSH
13168: PPUSH
13169: PPUSH
13170: PPUSH
13171: PPUSH
13172: PPUSH
// result := false ;
13173: LD_ADDR_VAR 0 3
13177: PUSH
13178: LD_INT 0
13180: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13181: LD_VAR 0 1
13185: NOT
13186: PUSH
13187: LD_VAR 0 1
13191: PPUSH
13192: CALL_OW 266
13196: PUSH
13197: LD_INT 32
13199: PUSH
13200: LD_INT 33
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: IN
13207: NOT
13208: OR
13209: IFFALSE 13213
// exit ;
13211: GO 14322
// nat := GetNation ( tower ) ;
13213: LD_ADDR_VAR 0 12
13217: PUSH
13218: LD_VAR 0 1
13222: PPUSH
13223: CALL_OW 248
13227: ST_TO_ADDR
// side := GetSide ( tower ) ;
13228: LD_ADDR_VAR 0 16
13232: PUSH
13233: LD_VAR 0 1
13237: PPUSH
13238: CALL_OW 255
13242: ST_TO_ADDR
// x := GetX ( tower ) ;
13243: LD_ADDR_VAR 0 10
13247: PUSH
13248: LD_VAR 0 1
13252: PPUSH
13253: CALL_OW 250
13257: ST_TO_ADDR
// y := GetY ( tower ) ;
13258: LD_ADDR_VAR 0 11
13262: PUSH
13263: LD_VAR 0 1
13267: PPUSH
13268: CALL_OW 251
13272: ST_TO_ADDR
// if not x or not y then
13273: LD_VAR 0 10
13277: NOT
13278: PUSH
13279: LD_VAR 0 11
13283: NOT
13284: OR
13285: IFFALSE 13289
// exit ;
13287: GO 14322
// weapon := 0 ;
13289: LD_ADDR_VAR 0 18
13293: PUSH
13294: LD_INT 0
13296: ST_TO_ADDR
// fac_list := [ ] ;
13297: LD_ADDR_VAR 0 17
13301: PUSH
13302: EMPTY
13303: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13304: LD_ADDR_VAR 0 6
13308: PUSH
13309: LD_VAR 0 1
13313: PPUSH
13314: CALL_OW 274
13318: PPUSH
13319: LD_VAR 0 2
13323: PPUSH
13324: LD_INT 0
13326: PPUSH
13327: CALL 10893 0 3
13331: PPUSH
13332: LD_INT 30
13334: PUSH
13335: LD_INT 3
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PPUSH
13342: CALL_OW 72
13346: ST_TO_ADDR
// if not factories then
13347: LD_VAR 0 6
13351: NOT
13352: IFFALSE 13356
// exit ;
13354: GO 14322
// for i in factories do
13356: LD_ADDR_VAR 0 8
13360: PUSH
13361: LD_VAR 0 6
13365: PUSH
13366: FOR_IN
13367: IFFALSE 13392
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13369: LD_ADDR_VAR 0 17
13373: PUSH
13374: LD_VAR 0 17
13378: PUSH
13379: LD_VAR 0 8
13383: PPUSH
13384: CALL_OW 478
13388: UNION
13389: ST_TO_ADDR
13390: GO 13366
13392: POP
13393: POP
// if not fac_list then
13394: LD_VAR 0 17
13398: NOT
13399: IFFALSE 13403
// exit ;
13401: GO 14322
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13403: LD_ADDR_VAR 0 5
13407: PUSH
13408: LD_INT 4
13410: PUSH
13411: LD_INT 5
13413: PUSH
13414: LD_INT 9
13416: PUSH
13417: LD_INT 10
13419: PUSH
13420: LD_INT 6
13422: PUSH
13423: LD_INT 7
13425: PUSH
13426: LD_INT 11
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 27
13440: PUSH
13441: LD_INT 28
13443: PUSH
13444: LD_INT 26
13446: PUSH
13447: LD_INT 30
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 43
13458: PUSH
13459: LD_INT 44
13461: PUSH
13462: LD_INT 46
13464: PUSH
13465: LD_INT 45
13467: PUSH
13468: LD_INT 47
13470: PUSH
13471: LD_INT 49
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: LD_VAR 0 12
13491: ARRAY
13492: ST_TO_ADDR
// list := list isect fac_list ;
13493: LD_ADDR_VAR 0 5
13497: PUSH
13498: LD_VAR 0 5
13502: PUSH
13503: LD_VAR 0 17
13507: ISECT
13508: ST_TO_ADDR
// if not list then
13509: LD_VAR 0 5
13513: NOT
13514: IFFALSE 13518
// exit ;
13516: GO 14322
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13518: LD_VAR 0 12
13522: PUSH
13523: LD_INT 3
13525: EQUAL
13526: PUSH
13527: LD_INT 49
13529: PUSH
13530: LD_VAR 0 5
13534: IN
13535: AND
13536: PUSH
13537: LD_INT 31
13539: PPUSH
13540: LD_VAR 0 16
13544: PPUSH
13545: CALL_OW 321
13549: PUSH
13550: LD_INT 2
13552: EQUAL
13553: AND
13554: IFFALSE 13614
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13556: LD_INT 22
13558: PUSH
13559: LD_VAR 0 16
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: LD_INT 35
13570: PUSH
13571: LD_INT 49
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 91
13580: PUSH
13581: LD_VAR 0 1
13585: PUSH
13586: LD_INT 10
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: LIST
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: LIST
13598: PPUSH
13599: CALL_OW 69
13603: NOT
13604: IFFALSE 13614
// weapon := ru_time_lapser ;
13606: LD_ADDR_VAR 0 18
13610: PUSH
13611: LD_INT 49
13613: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13614: LD_VAR 0 12
13618: PUSH
13619: LD_INT 1
13621: PUSH
13622: LD_INT 2
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: IN
13629: PUSH
13630: LD_INT 11
13632: PUSH
13633: LD_VAR 0 5
13637: IN
13638: PUSH
13639: LD_INT 30
13641: PUSH
13642: LD_VAR 0 5
13646: IN
13647: OR
13648: AND
13649: PUSH
13650: LD_INT 6
13652: PPUSH
13653: LD_VAR 0 16
13657: PPUSH
13658: CALL_OW 321
13662: PUSH
13663: LD_INT 2
13665: EQUAL
13666: AND
13667: IFFALSE 13832
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13669: LD_INT 22
13671: PUSH
13672: LD_VAR 0 16
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: LD_INT 2
13683: PUSH
13684: LD_INT 35
13686: PUSH
13687: LD_INT 11
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: LD_INT 35
13696: PUSH
13697: LD_INT 30
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 91
13711: PUSH
13712: LD_VAR 0 1
13716: PUSH
13717: LD_INT 18
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: PPUSH
13730: CALL_OW 69
13734: NOT
13735: PUSH
13736: LD_INT 22
13738: PUSH
13739: LD_VAR 0 16
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: LD_INT 2
13750: PUSH
13751: LD_INT 30
13753: PUSH
13754: LD_INT 32
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: LD_INT 30
13763: PUSH
13764: LD_INT 33
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 91
13778: PUSH
13779: LD_VAR 0 1
13783: PUSH
13784: LD_INT 12
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: LIST
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: LIST
13796: PUSH
13797: EMPTY
13798: LIST
13799: PPUSH
13800: CALL_OW 69
13804: PUSH
13805: LD_INT 2
13807: GREATER
13808: AND
13809: IFFALSE 13832
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13811: LD_ADDR_VAR 0 18
13815: PUSH
13816: LD_INT 11
13818: PUSH
13819: LD_INT 30
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: LD_VAR 0 12
13830: ARRAY
13831: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13832: LD_VAR 0 18
13836: NOT
13837: PUSH
13838: LD_INT 40
13840: PPUSH
13841: LD_VAR 0 16
13845: PPUSH
13846: CALL_OW 321
13850: PUSH
13851: LD_INT 2
13853: EQUAL
13854: AND
13855: PUSH
13856: LD_INT 7
13858: PUSH
13859: LD_VAR 0 5
13863: IN
13864: PUSH
13865: LD_INT 28
13867: PUSH
13868: LD_VAR 0 5
13872: IN
13873: OR
13874: PUSH
13875: LD_INT 45
13877: PUSH
13878: LD_VAR 0 5
13882: IN
13883: OR
13884: AND
13885: IFFALSE 14139
// begin hex := GetHexInfo ( x , y ) ;
13887: LD_ADDR_VAR 0 4
13891: PUSH
13892: LD_VAR 0 10
13896: PPUSH
13897: LD_VAR 0 11
13901: PPUSH
13902: CALL_OW 546
13906: ST_TO_ADDR
// if hex [ 1 ] then
13907: LD_VAR 0 4
13911: PUSH
13912: LD_INT 1
13914: ARRAY
13915: IFFALSE 13919
// exit ;
13917: GO 14322
// height := hex [ 2 ] ;
13919: LD_ADDR_VAR 0 15
13923: PUSH
13924: LD_VAR 0 4
13928: PUSH
13929: LD_INT 2
13931: ARRAY
13932: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13933: LD_ADDR_VAR 0 14
13937: PUSH
13938: LD_INT 0
13940: PUSH
13941: LD_INT 2
13943: PUSH
13944: LD_INT 3
13946: PUSH
13947: LD_INT 5
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: ST_TO_ADDR
// for i in tmp do
13956: LD_ADDR_VAR 0 8
13960: PUSH
13961: LD_VAR 0 14
13965: PUSH
13966: FOR_IN
13967: IFFALSE 14137
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13969: LD_ADDR_VAR 0 9
13973: PUSH
13974: LD_VAR 0 10
13978: PPUSH
13979: LD_VAR 0 8
13983: PPUSH
13984: LD_INT 5
13986: PPUSH
13987: CALL_OW 272
13991: PUSH
13992: LD_VAR 0 11
13996: PPUSH
13997: LD_VAR 0 8
14001: PPUSH
14002: LD_INT 5
14004: PPUSH
14005: CALL_OW 273
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14014: LD_VAR 0 9
14018: PUSH
14019: LD_INT 1
14021: ARRAY
14022: PPUSH
14023: LD_VAR 0 9
14027: PUSH
14028: LD_INT 2
14030: ARRAY
14031: PPUSH
14032: CALL_OW 488
14036: IFFALSE 14135
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14038: LD_ADDR_VAR 0 4
14042: PUSH
14043: LD_VAR 0 9
14047: PUSH
14048: LD_INT 1
14050: ARRAY
14051: PPUSH
14052: LD_VAR 0 9
14056: PUSH
14057: LD_INT 2
14059: ARRAY
14060: PPUSH
14061: CALL_OW 546
14065: ST_TO_ADDR
// if hex [ 1 ] then
14066: LD_VAR 0 4
14070: PUSH
14071: LD_INT 1
14073: ARRAY
14074: IFFALSE 14078
// continue ;
14076: GO 13966
// h := hex [ 2 ] ;
14078: LD_ADDR_VAR 0 13
14082: PUSH
14083: LD_VAR 0 4
14087: PUSH
14088: LD_INT 2
14090: ARRAY
14091: ST_TO_ADDR
// if h + 7 < height then
14092: LD_VAR 0 13
14096: PUSH
14097: LD_INT 7
14099: PLUS
14100: PUSH
14101: LD_VAR 0 15
14105: LESS
14106: IFFALSE 14135
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14108: LD_ADDR_VAR 0 18
14112: PUSH
14113: LD_INT 7
14115: PUSH
14116: LD_INT 28
14118: PUSH
14119: LD_INT 45
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: LIST
14126: PUSH
14127: LD_VAR 0 12
14131: ARRAY
14132: ST_TO_ADDR
// break ;
14133: GO 14137
// end ; end ; end ;
14135: GO 13966
14137: POP
14138: POP
// end ; if not weapon then
14139: LD_VAR 0 18
14143: NOT
14144: IFFALSE 14204
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14146: LD_ADDR_VAR 0 5
14150: PUSH
14151: LD_VAR 0 5
14155: PUSH
14156: LD_INT 11
14158: PUSH
14159: LD_INT 30
14161: PUSH
14162: LD_INT 49
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: LIST
14169: DIFF
14170: ST_TO_ADDR
// if not list then
14171: LD_VAR 0 5
14175: NOT
14176: IFFALSE 14180
// exit ;
14178: GO 14322
// weapon := list [ rand ( 1 , list ) ] ;
14180: LD_ADDR_VAR 0 18
14184: PUSH
14185: LD_VAR 0 5
14189: PUSH
14190: LD_INT 1
14192: PPUSH
14193: LD_VAR 0 5
14197: PPUSH
14198: CALL_OW 12
14202: ARRAY
14203: ST_TO_ADDR
// end ; if weapon then
14204: LD_VAR 0 18
14208: IFFALSE 14322
// begin tmp := CostOfWeapon ( weapon ) ;
14210: LD_ADDR_VAR 0 14
14214: PUSH
14215: LD_VAR 0 18
14219: PPUSH
14220: CALL_OW 451
14224: ST_TO_ADDR
// j := GetBase ( tower ) ;
14225: LD_ADDR_VAR 0 9
14229: PUSH
14230: LD_VAR 0 1
14234: PPUSH
14235: CALL_OW 274
14239: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14240: LD_VAR 0 9
14244: PPUSH
14245: LD_INT 1
14247: PPUSH
14248: CALL_OW 275
14252: PUSH
14253: LD_VAR 0 14
14257: PUSH
14258: LD_INT 1
14260: ARRAY
14261: GREATEREQUAL
14262: PUSH
14263: LD_VAR 0 9
14267: PPUSH
14268: LD_INT 2
14270: PPUSH
14271: CALL_OW 275
14275: PUSH
14276: LD_VAR 0 14
14280: PUSH
14281: LD_INT 2
14283: ARRAY
14284: GREATEREQUAL
14285: AND
14286: PUSH
14287: LD_VAR 0 9
14291: PPUSH
14292: LD_INT 3
14294: PPUSH
14295: CALL_OW 275
14299: PUSH
14300: LD_VAR 0 14
14304: PUSH
14305: LD_INT 3
14307: ARRAY
14308: GREATEREQUAL
14309: AND
14310: IFFALSE 14322
// result := weapon ;
14312: LD_ADDR_VAR 0 3
14316: PUSH
14317: LD_VAR 0 18
14321: ST_TO_ADDR
// end ; end ;
14322: LD_VAR 0 3
14326: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14327: LD_INT 0
14329: PPUSH
14330: PPUSH
// result := true ;
14331: LD_ADDR_VAR 0 3
14335: PUSH
14336: LD_INT 1
14338: ST_TO_ADDR
// if array1 = array2 then
14339: LD_VAR 0 1
14343: PUSH
14344: LD_VAR 0 2
14348: EQUAL
14349: IFFALSE 14409
// begin for i = 1 to array1 do
14351: LD_ADDR_VAR 0 4
14355: PUSH
14356: DOUBLE
14357: LD_INT 1
14359: DEC
14360: ST_TO_ADDR
14361: LD_VAR 0 1
14365: PUSH
14366: FOR_TO
14367: IFFALSE 14405
// if array1 [ i ] <> array2 [ i ] then
14369: LD_VAR 0 1
14373: PUSH
14374: LD_VAR 0 4
14378: ARRAY
14379: PUSH
14380: LD_VAR 0 2
14384: PUSH
14385: LD_VAR 0 4
14389: ARRAY
14390: NONEQUAL
14391: IFFALSE 14403
// begin result := false ;
14393: LD_ADDR_VAR 0 3
14397: PUSH
14398: LD_INT 0
14400: ST_TO_ADDR
// break ;
14401: GO 14405
// end ;
14403: GO 14366
14405: POP
14406: POP
// end else
14407: GO 14417
// result := false ;
14409: LD_ADDR_VAR 0 3
14413: PUSH
14414: LD_INT 0
14416: ST_TO_ADDR
// end ;
14417: LD_VAR 0 3
14421: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14422: LD_INT 0
14424: PPUSH
14425: PPUSH
// if not array1 or not array2 then
14426: LD_VAR 0 1
14430: NOT
14431: PUSH
14432: LD_VAR 0 2
14436: NOT
14437: OR
14438: IFFALSE 14442
// exit ;
14440: GO 14506
// result := true ;
14442: LD_ADDR_VAR 0 3
14446: PUSH
14447: LD_INT 1
14449: ST_TO_ADDR
// for i = 1 to array1 do
14450: LD_ADDR_VAR 0 4
14454: PUSH
14455: DOUBLE
14456: LD_INT 1
14458: DEC
14459: ST_TO_ADDR
14460: LD_VAR 0 1
14464: PUSH
14465: FOR_TO
14466: IFFALSE 14504
// if array1 [ i ] <> array2 [ i ] then
14468: LD_VAR 0 1
14472: PUSH
14473: LD_VAR 0 4
14477: ARRAY
14478: PUSH
14479: LD_VAR 0 2
14483: PUSH
14484: LD_VAR 0 4
14488: ARRAY
14489: NONEQUAL
14490: IFFALSE 14502
// begin result := false ;
14492: LD_ADDR_VAR 0 3
14496: PUSH
14497: LD_INT 0
14499: ST_TO_ADDR
// break ;
14500: GO 14504
// end ;
14502: GO 14465
14504: POP
14505: POP
// end ;
14506: LD_VAR 0 3
14510: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14511: LD_INT 0
14513: PPUSH
14514: PPUSH
14515: PPUSH
// pom := GetBase ( fac ) ;
14516: LD_ADDR_VAR 0 5
14520: PUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 274
14530: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14531: LD_ADDR_VAR 0 4
14535: PUSH
14536: LD_VAR 0 2
14540: PUSH
14541: LD_INT 1
14543: ARRAY
14544: PPUSH
14545: LD_VAR 0 2
14549: PUSH
14550: LD_INT 2
14552: ARRAY
14553: PPUSH
14554: LD_VAR 0 2
14558: PUSH
14559: LD_INT 3
14561: ARRAY
14562: PPUSH
14563: LD_VAR 0 2
14567: PUSH
14568: LD_INT 4
14570: ARRAY
14571: PPUSH
14572: CALL_OW 449
14576: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14577: LD_ADDR_VAR 0 3
14581: PUSH
14582: LD_VAR 0 5
14586: PPUSH
14587: LD_INT 1
14589: PPUSH
14590: CALL_OW 275
14594: PUSH
14595: LD_VAR 0 4
14599: PUSH
14600: LD_INT 1
14602: ARRAY
14603: GREATEREQUAL
14604: PUSH
14605: LD_VAR 0 5
14609: PPUSH
14610: LD_INT 2
14612: PPUSH
14613: CALL_OW 275
14617: PUSH
14618: LD_VAR 0 4
14622: PUSH
14623: LD_INT 2
14625: ARRAY
14626: GREATEREQUAL
14627: AND
14628: PUSH
14629: LD_VAR 0 5
14633: PPUSH
14634: LD_INT 3
14636: PPUSH
14637: CALL_OW 275
14641: PUSH
14642: LD_VAR 0 4
14646: PUSH
14647: LD_INT 3
14649: ARRAY
14650: GREATEREQUAL
14651: AND
14652: ST_TO_ADDR
// end ;
14653: LD_VAR 0 3
14657: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14658: LD_INT 0
14660: PPUSH
14661: PPUSH
14662: PPUSH
14663: PPUSH
// pom := GetBase ( building ) ;
14664: LD_ADDR_VAR 0 3
14668: PUSH
14669: LD_VAR 0 1
14673: PPUSH
14674: CALL_OW 274
14678: ST_TO_ADDR
// if not pom then
14679: LD_VAR 0 3
14683: NOT
14684: IFFALSE 14688
// exit ;
14686: GO 14858
// btype := GetBType ( building ) ;
14688: LD_ADDR_VAR 0 5
14692: PUSH
14693: LD_VAR 0 1
14697: PPUSH
14698: CALL_OW 266
14702: ST_TO_ADDR
// if btype = b_armoury then
14703: LD_VAR 0 5
14707: PUSH
14708: LD_INT 4
14710: EQUAL
14711: IFFALSE 14721
// btype := b_barracks ;
14713: LD_ADDR_VAR 0 5
14717: PUSH
14718: LD_INT 5
14720: ST_TO_ADDR
// if btype = b_depot then
14721: LD_VAR 0 5
14725: PUSH
14726: LD_INT 0
14728: EQUAL
14729: IFFALSE 14739
// btype := b_warehouse ;
14731: LD_ADDR_VAR 0 5
14735: PUSH
14736: LD_INT 1
14738: ST_TO_ADDR
// if btype = b_workshop then
14739: LD_VAR 0 5
14743: PUSH
14744: LD_INT 2
14746: EQUAL
14747: IFFALSE 14757
// btype := b_factory ;
14749: LD_ADDR_VAR 0 5
14753: PUSH
14754: LD_INT 3
14756: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14757: LD_ADDR_VAR 0 4
14761: PUSH
14762: LD_VAR 0 5
14766: PPUSH
14767: LD_VAR 0 1
14771: PPUSH
14772: CALL_OW 248
14776: PPUSH
14777: CALL_OW 450
14781: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14782: LD_ADDR_VAR 0 2
14786: PUSH
14787: LD_VAR 0 3
14791: PPUSH
14792: LD_INT 1
14794: PPUSH
14795: CALL_OW 275
14799: PUSH
14800: LD_VAR 0 4
14804: PUSH
14805: LD_INT 1
14807: ARRAY
14808: GREATEREQUAL
14809: PUSH
14810: LD_VAR 0 3
14814: PPUSH
14815: LD_INT 2
14817: PPUSH
14818: CALL_OW 275
14822: PUSH
14823: LD_VAR 0 4
14827: PUSH
14828: LD_INT 2
14830: ARRAY
14831: GREATEREQUAL
14832: AND
14833: PUSH
14834: LD_VAR 0 3
14838: PPUSH
14839: LD_INT 3
14841: PPUSH
14842: CALL_OW 275
14846: PUSH
14847: LD_VAR 0 4
14851: PUSH
14852: LD_INT 3
14854: ARRAY
14855: GREATEREQUAL
14856: AND
14857: ST_TO_ADDR
// end ;
14858: LD_VAR 0 2
14862: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14863: LD_INT 0
14865: PPUSH
14866: PPUSH
14867: PPUSH
// pom := GetBase ( building ) ;
14868: LD_ADDR_VAR 0 4
14872: PUSH
14873: LD_VAR 0 1
14877: PPUSH
14878: CALL_OW 274
14882: ST_TO_ADDR
// if not pom then
14883: LD_VAR 0 4
14887: NOT
14888: IFFALSE 14892
// exit ;
14890: GO 14993
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14892: LD_ADDR_VAR 0 5
14896: PUSH
14897: LD_VAR 0 2
14901: PPUSH
14902: LD_VAR 0 1
14906: PPUSH
14907: CALL_OW 248
14911: PPUSH
14912: CALL_OW 450
14916: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14917: LD_ADDR_VAR 0 3
14921: PUSH
14922: LD_VAR 0 4
14926: PPUSH
14927: LD_INT 1
14929: PPUSH
14930: CALL_OW 275
14934: PUSH
14935: LD_VAR 0 5
14939: PUSH
14940: LD_INT 1
14942: ARRAY
14943: GREATEREQUAL
14944: PUSH
14945: LD_VAR 0 4
14949: PPUSH
14950: LD_INT 2
14952: PPUSH
14953: CALL_OW 275
14957: PUSH
14958: LD_VAR 0 5
14962: PUSH
14963: LD_INT 2
14965: ARRAY
14966: GREATEREQUAL
14967: AND
14968: PUSH
14969: LD_VAR 0 4
14973: PPUSH
14974: LD_INT 3
14976: PPUSH
14977: CALL_OW 275
14981: PUSH
14982: LD_VAR 0 5
14986: PUSH
14987: LD_INT 3
14989: ARRAY
14990: GREATEREQUAL
14991: AND
14992: ST_TO_ADDR
// end ;
14993: LD_VAR 0 3
14997: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14998: LD_INT 0
15000: PPUSH
15001: PPUSH
15002: PPUSH
15003: PPUSH
15004: PPUSH
15005: PPUSH
15006: PPUSH
15007: PPUSH
15008: PPUSH
15009: PPUSH
15010: PPUSH
// result := false ;
15011: LD_ADDR_VAR 0 8
15015: PUSH
15016: LD_INT 0
15018: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15019: LD_VAR 0 5
15023: NOT
15024: PUSH
15025: LD_VAR 0 1
15029: NOT
15030: OR
15031: PUSH
15032: LD_VAR 0 2
15036: NOT
15037: OR
15038: PUSH
15039: LD_VAR 0 3
15043: NOT
15044: OR
15045: IFFALSE 15049
// exit ;
15047: GO 15863
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15049: LD_ADDR_VAR 0 14
15053: PUSH
15054: LD_VAR 0 1
15058: PPUSH
15059: LD_VAR 0 2
15063: PPUSH
15064: LD_VAR 0 3
15068: PPUSH
15069: LD_VAR 0 4
15073: PPUSH
15074: LD_VAR 0 5
15078: PUSH
15079: LD_INT 1
15081: ARRAY
15082: PPUSH
15083: CALL_OW 248
15087: PPUSH
15088: LD_INT 0
15090: PPUSH
15091: CALL 17116 0 6
15095: ST_TO_ADDR
// if not hexes then
15096: LD_VAR 0 14
15100: NOT
15101: IFFALSE 15105
// exit ;
15103: GO 15863
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15105: LD_ADDR_VAR 0 17
15109: PUSH
15110: LD_VAR 0 5
15114: PPUSH
15115: LD_INT 22
15117: PUSH
15118: LD_VAR 0 13
15122: PPUSH
15123: CALL_OW 255
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PUSH
15132: LD_INT 2
15134: PUSH
15135: LD_INT 30
15137: PUSH
15138: LD_INT 0
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: LD_INT 30
15147: PUSH
15148: LD_INT 1
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: LIST
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PPUSH
15164: CALL_OW 72
15168: ST_TO_ADDR
// for i = 1 to hexes do
15169: LD_ADDR_VAR 0 9
15173: PUSH
15174: DOUBLE
15175: LD_INT 1
15177: DEC
15178: ST_TO_ADDR
15179: LD_VAR 0 14
15183: PUSH
15184: FOR_TO
15185: IFFALSE 15861
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15187: LD_ADDR_VAR 0 13
15191: PUSH
15192: LD_VAR 0 14
15196: PUSH
15197: LD_VAR 0 9
15201: ARRAY
15202: PUSH
15203: LD_INT 1
15205: ARRAY
15206: PPUSH
15207: LD_VAR 0 14
15211: PUSH
15212: LD_VAR 0 9
15216: ARRAY
15217: PUSH
15218: LD_INT 2
15220: ARRAY
15221: PPUSH
15222: CALL_OW 428
15226: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15227: LD_VAR 0 14
15231: PUSH
15232: LD_VAR 0 9
15236: ARRAY
15237: PUSH
15238: LD_INT 1
15240: ARRAY
15241: PPUSH
15242: LD_VAR 0 14
15246: PUSH
15247: LD_VAR 0 9
15251: ARRAY
15252: PUSH
15253: LD_INT 2
15255: ARRAY
15256: PPUSH
15257: CALL_OW 351
15261: PUSH
15262: LD_VAR 0 14
15266: PUSH
15267: LD_VAR 0 9
15271: ARRAY
15272: PUSH
15273: LD_INT 1
15275: ARRAY
15276: PPUSH
15277: LD_VAR 0 14
15281: PUSH
15282: LD_VAR 0 9
15286: ARRAY
15287: PUSH
15288: LD_INT 2
15290: ARRAY
15291: PPUSH
15292: CALL_OW 488
15296: NOT
15297: OR
15298: PUSH
15299: LD_VAR 0 13
15303: PPUSH
15304: CALL_OW 247
15308: PUSH
15309: LD_INT 3
15311: EQUAL
15312: OR
15313: IFFALSE 15319
// exit ;
15315: POP
15316: POP
15317: GO 15863
// if not tmp then
15319: LD_VAR 0 13
15323: NOT
15324: IFFALSE 15328
// continue ;
15326: GO 15184
// result := true ;
15328: LD_ADDR_VAR 0 8
15332: PUSH
15333: LD_INT 1
15335: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15336: LD_VAR 0 6
15340: PUSH
15341: LD_VAR 0 13
15345: PPUSH
15346: CALL_OW 247
15350: PUSH
15351: LD_INT 2
15353: EQUAL
15354: AND
15355: PUSH
15356: LD_VAR 0 13
15360: PPUSH
15361: CALL_OW 263
15365: PUSH
15366: LD_INT 1
15368: EQUAL
15369: AND
15370: IFFALSE 15534
// begin if IsDrivenBy ( tmp ) then
15372: LD_VAR 0 13
15376: PPUSH
15377: CALL_OW 311
15381: IFFALSE 15385
// continue ;
15383: GO 15184
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15385: LD_VAR 0 6
15389: PPUSH
15390: LD_INT 3
15392: PUSH
15393: LD_INT 60
15395: PUSH
15396: EMPTY
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 3
15405: PUSH
15406: LD_INT 55
15408: PUSH
15409: EMPTY
15410: LIST
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PPUSH
15420: CALL_OW 72
15424: IFFALSE 15532
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15426: LD_ADDR_VAR 0 18
15430: PUSH
15431: LD_VAR 0 6
15435: PPUSH
15436: LD_INT 3
15438: PUSH
15439: LD_INT 60
15441: PUSH
15442: EMPTY
15443: LIST
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 3
15451: PUSH
15452: LD_INT 55
15454: PUSH
15455: EMPTY
15456: LIST
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PPUSH
15466: CALL_OW 72
15470: PUSH
15471: LD_INT 1
15473: ARRAY
15474: ST_TO_ADDR
// if IsInUnit ( driver ) then
15475: LD_VAR 0 18
15479: PPUSH
15480: CALL_OW 310
15484: IFFALSE 15495
// ComExit ( driver ) ;
15486: LD_VAR 0 18
15490: PPUSH
15491: CALL 40897 0 1
// AddComEnterUnit ( driver , tmp ) ;
15495: LD_VAR 0 18
15499: PPUSH
15500: LD_VAR 0 13
15504: PPUSH
15505: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15509: LD_VAR 0 18
15513: PPUSH
15514: LD_VAR 0 7
15518: PPUSH
15519: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15523: LD_VAR 0 18
15527: PPUSH
15528: CALL_OW 181
// end ; continue ;
15532: GO 15184
// end ; if not cleaners or not tmp in cleaners then
15534: LD_VAR 0 6
15538: NOT
15539: PUSH
15540: LD_VAR 0 13
15544: PUSH
15545: LD_VAR 0 6
15549: IN
15550: NOT
15551: OR
15552: IFFALSE 15859
// begin if dep then
15554: LD_VAR 0 17
15558: IFFALSE 15694
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15560: LD_ADDR_VAR 0 16
15564: PUSH
15565: LD_VAR 0 17
15569: PUSH
15570: LD_INT 1
15572: ARRAY
15573: PPUSH
15574: CALL_OW 250
15578: PPUSH
15579: LD_VAR 0 17
15583: PUSH
15584: LD_INT 1
15586: ARRAY
15587: PPUSH
15588: CALL_OW 254
15592: PPUSH
15593: LD_INT 5
15595: PPUSH
15596: CALL_OW 272
15600: PUSH
15601: LD_VAR 0 17
15605: PUSH
15606: LD_INT 1
15608: ARRAY
15609: PPUSH
15610: CALL_OW 251
15614: PPUSH
15615: LD_VAR 0 17
15619: PUSH
15620: LD_INT 1
15622: ARRAY
15623: PPUSH
15624: CALL_OW 254
15628: PPUSH
15629: LD_INT 5
15631: PPUSH
15632: CALL_OW 273
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15641: LD_VAR 0 16
15645: PUSH
15646: LD_INT 1
15648: ARRAY
15649: PPUSH
15650: LD_VAR 0 16
15654: PUSH
15655: LD_INT 2
15657: ARRAY
15658: PPUSH
15659: CALL_OW 488
15663: IFFALSE 15694
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15665: LD_VAR 0 13
15669: PPUSH
15670: LD_VAR 0 16
15674: PUSH
15675: LD_INT 1
15677: ARRAY
15678: PPUSH
15679: LD_VAR 0 16
15683: PUSH
15684: LD_INT 2
15686: ARRAY
15687: PPUSH
15688: CALL_OW 111
// continue ;
15692: GO 15184
// end ; end ; r := GetDir ( tmp ) ;
15694: LD_ADDR_VAR 0 15
15698: PUSH
15699: LD_VAR 0 13
15703: PPUSH
15704: CALL_OW 254
15708: ST_TO_ADDR
// if r = 5 then
15709: LD_VAR 0 15
15713: PUSH
15714: LD_INT 5
15716: EQUAL
15717: IFFALSE 15727
// r := 0 ;
15719: LD_ADDR_VAR 0 15
15723: PUSH
15724: LD_INT 0
15726: ST_TO_ADDR
// for j = r to 5 do
15727: LD_ADDR_VAR 0 10
15731: PUSH
15732: DOUBLE
15733: LD_VAR 0 15
15737: DEC
15738: ST_TO_ADDR
15739: LD_INT 5
15741: PUSH
15742: FOR_TO
15743: IFFALSE 15857
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15745: LD_ADDR_VAR 0 11
15749: PUSH
15750: LD_VAR 0 13
15754: PPUSH
15755: CALL_OW 250
15759: PPUSH
15760: LD_VAR 0 10
15764: PPUSH
15765: LD_INT 2
15767: PPUSH
15768: CALL_OW 272
15772: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15773: LD_ADDR_VAR 0 12
15777: PUSH
15778: LD_VAR 0 13
15782: PPUSH
15783: CALL_OW 251
15787: PPUSH
15788: LD_VAR 0 10
15792: PPUSH
15793: LD_INT 2
15795: PPUSH
15796: CALL_OW 273
15800: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15801: LD_VAR 0 11
15805: PPUSH
15806: LD_VAR 0 12
15810: PPUSH
15811: CALL_OW 488
15815: PUSH
15816: LD_VAR 0 11
15820: PPUSH
15821: LD_VAR 0 12
15825: PPUSH
15826: CALL_OW 428
15830: NOT
15831: AND
15832: IFFALSE 15855
// begin ComMoveXY ( tmp , _x , _y ) ;
15834: LD_VAR 0 13
15838: PPUSH
15839: LD_VAR 0 11
15843: PPUSH
15844: LD_VAR 0 12
15848: PPUSH
15849: CALL_OW 111
// break ;
15853: GO 15857
// end ; end ;
15855: GO 15742
15857: POP
15858: POP
// end ; end ;
15859: GO 15184
15861: POP
15862: POP
// end ;
15863: LD_VAR 0 8
15867: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15868: LD_INT 0
15870: PPUSH
// result := true ;
15871: LD_ADDR_VAR 0 3
15875: PUSH
15876: LD_INT 1
15878: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15879: LD_VAR 0 2
15883: PUSH
15884: LD_INT 24
15886: DOUBLE
15887: EQUAL
15888: IFTRUE 15898
15890: LD_INT 33
15892: DOUBLE
15893: EQUAL
15894: IFTRUE 15898
15896: GO 15923
15898: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15899: LD_ADDR_VAR 0 3
15903: PUSH
15904: LD_INT 32
15906: PPUSH
15907: LD_VAR 0 1
15911: PPUSH
15912: CALL_OW 321
15916: PUSH
15917: LD_INT 2
15919: EQUAL
15920: ST_TO_ADDR
15921: GO 16239
15923: LD_INT 20
15925: DOUBLE
15926: EQUAL
15927: IFTRUE 15931
15929: GO 15956
15931: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15932: LD_ADDR_VAR 0 3
15936: PUSH
15937: LD_INT 6
15939: PPUSH
15940: LD_VAR 0 1
15944: PPUSH
15945: CALL_OW 321
15949: PUSH
15950: LD_INT 2
15952: EQUAL
15953: ST_TO_ADDR
15954: GO 16239
15956: LD_INT 22
15958: DOUBLE
15959: EQUAL
15960: IFTRUE 15970
15962: LD_INT 36
15964: DOUBLE
15965: EQUAL
15966: IFTRUE 15970
15968: GO 15995
15970: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15971: LD_ADDR_VAR 0 3
15975: PUSH
15976: LD_INT 15
15978: PPUSH
15979: LD_VAR 0 1
15983: PPUSH
15984: CALL_OW 321
15988: PUSH
15989: LD_INT 2
15991: EQUAL
15992: ST_TO_ADDR
15993: GO 16239
15995: LD_INT 30
15997: DOUBLE
15998: EQUAL
15999: IFTRUE 16003
16001: GO 16028
16003: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16004: LD_ADDR_VAR 0 3
16008: PUSH
16009: LD_INT 20
16011: PPUSH
16012: LD_VAR 0 1
16016: PPUSH
16017: CALL_OW 321
16021: PUSH
16022: LD_INT 2
16024: EQUAL
16025: ST_TO_ADDR
16026: GO 16239
16028: LD_INT 28
16030: DOUBLE
16031: EQUAL
16032: IFTRUE 16042
16034: LD_INT 21
16036: DOUBLE
16037: EQUAL
16038: IFTRUE 16042
16040: GO 16067
16042: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16043: LD_ADDR_VAR 0 3
16047: PUSH
16048: LD_INT 21
16050: PPUSH
16051: LD_VAR 0 1
16055: PPUSH
16056: CALL_OW 321
16060: PUSH
16061: LD_INT 2
16063: EQUAL
16064: ST_TO_ADDR
16065: GO 16239
16067: LD_INT 16
16069: DOUBLE
16070: EQUAL
16071: IFTRUE 16075
16073: GO 16100
16075: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16076: LD_ADDR_VAR 0 3
16080: PUSH
16081: LD_INT 84
16083: PPUSH
16084: LD_VAR 0 1
16088: PPUSH
16089: CALL_OW 321
16093: PUSH
16094: LD_INT 2
16096: EQUAL
16097: ST_TO_ADDR
16098: GO 16239
16100: LD_INT 19
16102: DOUBLE
16103: EQUAL
16104: IFTRUE 16114
16106: LD_INT 23
16108: DOUBLE
16109: EQUAL
16110: IFTRUE 16114
16112: GO 16139
16114: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16115: LD_ADDR_VAR 0 3
16119: PUSH
16120: LD_INT 83
16122: PPUSH
16123: LD_VAR 0 1
16127: PPUSH
16128: CALL_OW 321
16132: PUSH
16133: LD_INT 2
16135: EQUAL
16136: ST_TO_ADDR
16137: GO 16239
16139: LD_INT 17
16141: DOUBLE
16142: EQUAL
16143: IFTRUE 16147
16145: GO 16172
16147: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16148: LD_ADDR_VAR 0 3
16152: PUSH
16153: LD_INT 39
16155: PPUSH
16156: LD_VAR 0 1
16160: PPUSH
16161: CALL_OW 321
16165: PUSH
16166: LD_INT 2
16168: EQUAL
16169: ST_TO_ADDR
16170: GO 16239
16172: LD_INT 18
16174: DOUBLE
16175: EQUAL
16176: IFTRUE 16180
16178: GO 16205
16180: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16181: LD_ADDR_VAR 0 3
16185: PUSH
16186: LD_INT 40
16188: PPUSH
16189: LD_VAR 0 1
16193: PPUSH
16194: CALL_OW 321
16198: PUSH
16199: LD_INT 2
16201: EQUAL
16202: ST_TO_ADDR
16203: GO 16239
16205: LD_INT 27
16207: DOUBLE
16208: EQUAL
16209: IFTRUE 16213
16211: GO 16238
16213: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16214: LD_ADDR_VAR 0 3
16218: PUSH
16219: LD_INT 35
16221: PPUSH
16222: LD_VAR 0 1
16226: PPUSH
16227: CALL_OW 321
16231: PUSH
16232: LD_INT 2
16234: EQUAL
16235: ST_TO_ADDR
16236: GO 16239
16238: POP
// end ;
16239: LD_VAR 0 3
16243: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16244: LD_INT 0
16246: PPUSH
16247: PPUSH
16248: PPUSH
16249: PPUSH
16250: PPUSH
16251: PPUSH
16252: PPUSH
16253: PPUSH
16254: PPUSH
16255: PPUSH
16256: PPUSH
// result := false ;
16257: LD_ADDR_VAR 0 6
16261: PUSH
16262: LD_INT 0
16264: ST_TO_ADDR
// if btype = b_depot then
16265: LD_VAR 0 2
16269: PUSH
16270: LD_INT 0
16272: EQUAL
16273: IFFALSE 16285
// begin result := true ;
16275: LD_ADDR_VAR 0 6
16279: PUSH
16280: LD_INT 1
16282: ST_TO_ADDR
// exit ;
16283: GO 17111
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16285: LD_VAR 0 1
16289: NOT
16290: PUSH
16291: LD_VAR 0 1
16295: PPUSH
16296: CALL_OW 266
16300: PUSH
16301: LD_INT 0
16303: PUSH
16304: LD_INT 1
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: IN
16311: NOT
16312: OR
16313: PUSH
16314: LD_VAR 0 2
16318: NOT
16319: OR
16320: PUSH
16321: LD_VAR 0 5
16325: PUSH
16326: LD_INT 0
16328: PUSH
16329: LD_INT 1
16331: PUSH
16332: LD_INT 2
16334: PUSH
16335: LD_INT 3
16337: PUSH
16338: LD_INT 4
16340: PUSH
16341: LD_INT 5
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: IN
16352: NOT
16353: OR
16354: PUSH
16355: LD_VAR 0 3
16359: PPUSH
16360: LD_VAR 0 4
16364: PPUSH
16365: CALL_OW 488
16369: NOT
16370: OR
16371: IFFALSE 16375
// exit ;
16373: GO 17111
// side := GetSide ( depot ) ;
16375: LD_ADDR_VAR 0 9
16379: PUSH
16380: LD_VAR 0 1
16384: PPUSH
16385: CALL_OW 255
16389: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16390: LD_VAR 0 9
16394: PPUSH
16395: LD_VAR 0 2
16399: PPUSH
16400: CALL 15868 0 2
16404: NOT
16405: IFFALSE 16409
// exit ;
16407: GO 17111
// pom := GetBase ( depot ) ;
16409: LD_ADDR_VAR 0 10
16413: PUSH
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 274
16423: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16424: LD_ADDR_VAR 0 11
16428: PUSH
16429: LD_VAR 0 2
16433: PPUSH
16434: LD_VAR 0 1
16438: PPUSH
16439: CALL_OW 248
16443: PPUSH
16444: CALL_OW 450
16448: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16449: LD_VAR 0 10
16453: PPUSH
16454: LD_INT 1
16456: PPUSH
16457: CALL_OW 275
16461: PUSH
16462: LD_VAR 0 11
16466: PUSH
16467: LD_INT 1
16469: ARRAY
16470: GREATEREQUAL
16471: PUSH
16472: LD_VAR 0 10
16476: PPUSH
16477: LD_INT 2
16479: PPUSH
16480: CALL_OW 275
16484: PUSH
16485: LD_VAR 0 11
16489: PUSH
16490: LD_INT 2
16492: ARRAY
16493: GREATEREQUAL
16494: AND
16495: PUSH
16496: LD_VAR 0 10
16500: PPUSH
16501: LD_INT 3
16503: PPUSH
16504: CALL_OW 275
16508: PUSH
16509: LD_VAR 0 11
16513: PUSH
16514: LD_INT 3
16516: ARRAY
16517: GREATEREQUAL
16518: AND
16519: NOT
16520: IFFALSE 16524
// exit ;
16522: GO 17111
// if GetBType ( depot ) = b_depot then
16524: LD_VAR 0 1
16528: PPUSH
16529: CALL_OW 266
16533: PUSH
16534: LD_INT 0
16536: EQUAL
16537: IFFALSE 16549
// dist := 28 else
16539: LD_ADDR_VAR 0 14
16543: PUSH
16544: LD_INT 28
16546: ST_TO_ADDR
16547: GO 16557
// dist := 36 ;
16549: LD_ADDR_VAR 0 14
16553: PUSH
16554: LD_INT 36
16556: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16557: LD_VAR 0 1
16561: PPUSH
16562: LD_VAR 0 3
16566: PPUSH
16567: LD_VAR 0 4
16571: PPUSH
16572: CALL_OW 297
16576: PUSH
16577: LD_VAR 0 14
16581: GREATER
16582: IFFALSE 16586
// exit ;
16584: GO 17111
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16586: LD_ADDR_VAR 0 12
16590: PUSH
16591: LD_VAR 0 2
16595: PPUSH
16596: LD_VAR 0 3
16600: PPUSH
16601: LD_VAR 0 4
16605: PPUSH
16606: LD_VAR 0 5
16610: PPUSH
16611: LD_VAR 0 1
16615: PPUSH
16616: CALL_OW 248
16620: PPUSH
16621: LD_INT 0
16623: PPUSH
16624: CALL 17116 0 6
16628: ST_TO_ADDR
// if not hexes then
16629: LD_VAR 0 12
16633: NOT
16634: IFFALSE 16638
// exit ;
16636: GO 17111
// hex := GetHexInfo ( x , y ) ;
16638: LD_ADDR_VAR 0 15
16642: PUSH
16643: LD_VAR 0 3
16647: PPUSH
16648: LD_VAR 0 4
16652: PPUSH
16653: CALL_OW 546
16657: ST_TO_ADDR
// if hex [ 1 ] then
16658: LD_VAR 0 15
16662: PUSH
16663: LD_INT 1
16665: ARRAY
16666: IFFALSE 16670
// exit ;
16668: GO 17111
// height := hex [ 2 ] ;
16670: LD_ADDR_VAR 0 13
16674: PUSH
16675: LD_VAR 0 15
16679: PUSH
16680: LD_INT 2
16682: ARRAY
16683: ST_TO_ADDR
// for i = 1 to hexes do
16684: LD_ADDR_VAR 0 7
16688: PUSH
16689: DOUBLE
16690: LD_INT 1
16692: DEC
16693: ST_TO_ADDR
16694: LD_VAR 0 12
16698: PUSH
16699: FOR_TO
16700: IFFALSE 17030
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16702: LD_VAR 0 12
16706: PUSH
16707: LD_VAR 0 7
16711: ARRAY
16712: PUSH
16713: LD_INT 1
16715: ARRAY
16716: PPUSH
16717: LD_VAR 0 12
16721: PUSH
16722: LD_VAR 0 7
16726: ARRAY
16727: PUSH
16728: LD_INT 2
16730: ARRAY
16731: PPUSH
16732: CALL_OW 488
16736: NOT
16737: PUSH
16738: LD_VAR 0 12
16742: PUSH
16743: LD_VAR 0 7
16747: ARRAY
16748: PUSH
16749: LD_INT 1
16751: ARRAY
16752: PPUSH
16753: LD_VAR 0 12
16757: PUSH
16758: LD_VAR 0 7
16762: ARRAY
16763: PUSH
16764: LD_INT 2
16766: ARRAY
16767: PPUSH
16768: CALL_OW 428
16772: PUSH
16773: LD_INT 0
16775: GREATER
16776: OR
16777: PUSH
16778: LD_VAR 0 12
16782: PUSH
16783: LD_VAR 0 7
16787: ARRAY
16788: PUSH
16789: LD_INT 1
16791: ARRAY
16792: PPUSH
16793: LD_VAR 0 12
16797: PUSH
16798: LD_VAR 0 7
16802: ARRAY
16803: PUSH
16804: LD_INT 2
16806: ARRAY
16807: PPUSH
16808: CALL_OW 351
16812: OR
16813: IFFALSE 16819
// exit ;
16815: POP
16816: POP
16817: GO 17111
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16819: LD_ADDR_VAR 0 8
16823: PUSH
16824: LD_VAR 0 12
16828: PUSH
16829: LD_VAR 0 7
16833: ARRAY
16834: PUSH
16835: LD_INT 1
16837: ARRAY
16838: PPUSH
16839: LD_VAR 0 12
16843: PUSH
16844: LD_VAR 0 7
16848: ARRAY
16849: PUSH
16850: LD_INT 2
16852: ARRAY
16853: PPUSH
16854: CALL_OW 546
16858: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16859: LD_VAR 0 8
16863: PUSH
16864: LD_INT 1
16866: ARRAY
16867: PUSH
16868: LD_VAR 0 8
16872: PUSH
16873: LD_INT 2
16875: ARRAY
16876: PUSH
16877: LD_VAR 0 13
16881: PUSH
16882: LD_INT 2
16884: PLUS
16885: GREATER
16886: OR
16887: PUSH
16888: LD_VAR 0 8
16892: PUSH
16893: LD_INT 2
16895: ARRAY
16896: PUSH
16897: LD_VAR 0 13
16901: PUSH
16902: LD_INT 2
16904: MINUS
16905: LESS
16906: OR
16907: PUSH
16908: LD_VAR 0 8
16912: PUSH
16913: LD_INT 3
16915: ARRAY
16916: PUSH
16917: LD_INT 0
16919: PUSH
16920: LD_INT 8
16922: PUSH
16923: LD_INT 9
16925: PUSH
16926: LD_INT 10
16928: PUSH
16929: LD_INT 11
16931: PUSH
16932: LD_INT 12
16934: PUSH
16935: LD_INT 13
16937: PUSH
16938: LD_INT 16
16940: PUSH
16941: LD_INT 17
16943: PUSH
16944: LD_INT 18
16946: PUSH
16947: LD_INT 19
16949: PUSH
16950: LD_INT 20
16952: PUSH
16953: LD_INT 21
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: IN
16971: NOT
16972: OR
16973: PUSH
16974: LD_VAR 0 8
16978: PUSH
16979: LD_INT 5
16981: ARRAY
16982: NOT
16983: OR
16984: PUSH
16985: LD_VAR 0 8
16989: PUSH
16990: LD_INT 6
16992: ARRAY
16993: PUSH
16994: LD_INT 1
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: LD_INT 7
17002: PUSH
17003: LD_INT 9
17005: PUSH
17006: LD_INT 10
17008: PUSH
17009: LD_INT 11
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: IN
17020: NOT
17021: OR
17022: IFFALSE 17028
// exit ;
17024: POP
17025: POP
17026: GO 17111
// end ;
17028: GO 16699
17030: POP
17031: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17032: LD_VAR 0 9
17036: PPUSH
17037: LD_VAR 0 3
17041: PPUSH
17042: LD_VAR 0 4
17046: PPUSH
17047: LD_INT 20
17049: PPUSH
17050: CALL 9034 0 4
17054: PUSH
17055: LD_INT 4
17057: ARRAY
17058: IFFALSE 17062
// exit ;
17060: GO 17111
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17062: LD_VAR 0 2
17066: PUSH
17067: LD_INT 29
17069: PUSH
17070: LD_INT 30
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: IN
17077: PUSH
17078: LD_VAR 0 3
17082: PPUSH
17083: LD_VAR 0 4
17087: PPUSH
17088: LD_VAR 0 9
17092: PPUSH
17093: CALL_OW 440
17097: NOT
17098: AND
17099: IFFALSE 17103
// exit ;
17101: GO 17111
// result := true ;
17103: LD_ADDR_VAR 0 6
17107: PUSH
17108: LD_INT 1
17110: ST_TO_ADDR
// end ;
17111: LD_VAR 0 6
17115: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17116: LD_INT 0
17118: PPUSH
17119: PPUSH
17120: PPUSH
17121: PPUSH
17122: PPUSH
17123: PPUSH
17124: PPUSH
17125: PPUSH
17126: PPUSH
17127: PPUSH
17128: PPUSH
17129: PPUSH
17130: PPUSH
17131: PPUSH
17132: PPUSH
17133: PPUSH
17134: PPUSH
17135: PPUSH
17136: PPUSH
17137: PPUSH
17138: PPUSH
17139: PPUSH
17140: PPUSH
17141: PPUSH
17142: PPUSH
17143: PPUSH
17144: PPUSH
17145: PPUSH
17146: PPUSH
17147: PPUSH
17148: PPUSH
17149: PPUSH
17150: PPUSH
17151: PPUSH
17152: PPUSH
17153: PPUSH
17154: PPUSH
17155: PPUSH
17156: PPUSH
17157: PPUSH
17158: PPUSH
17159: PPUSH
17160: PPUSH
17161: PPUSH
17162: PPUSH
17163: PPUSH
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
17169: PPUSH
17170: PPUSH
17171: PPUSH
17172: PPUSH
17173: PPUSH
17174: PPUSH
17175: PPUSH
// result = [ ] ;
17176: LD_ADDR_VAR 0 7
17180: PUSH
17181: EMPTY
17182: ST_TO_ADDR
// temp_list = [ ] ;
17183: LD_ADDR_VAR 0 9
17187: PUSH
17188: EMPTY
17189: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17190: LD_VAR 0 4
17194: PUSH
17195: LD_INT 0
17197: PUSH
17198: LD_INT 1
17200: PUSH
17201: LD_INT 2
17203: PUSH
17204: LD_INT 3
17206: PUSH
17207: LD_INT 4
17209: PUSH
17210: LD_INT 5
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: IN
17221: NOT
17222: PUSH
17223: LD_VAR 0 1
17227: PUSH
17228: LD_INT 0
17230: PUSH
17231: LD_INT 1
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: IN
17238: PUSH
17239: LD_VAR 0 5
17243: PUSH
17244: LD_INT 1
17246: PUSH
17247: LD_INT 2
17249: PUSH
17250: LD_INT 3
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: LIST
17257: IN
17258: NOT
17259: AND
17260: OR
17261: IFFALSE 17265
// exit ;
17263: GO 35656
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17265: LD_VAR 0 1
17269: PUSH
17270: LD_INT 6
17272: PUSH
17273: LD_INT 7
17275: PUSH
17276: LD_INT 8
17278: PUSH
17279: LD_INT 13
17281: PUSH
17282: LD_INT 12
17284: PUSH
17285: LD_INT 15
17287: PUSH
17288: LD_INT 11
17290: PUSH
17291: LD_INT 14
17293: PUSH
17294: LD_INT 10
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: IN
17308: IFFALSE 17318
// btype = b_lab ;
17310: LD_ADDR_VAR 0 1
17314: PUSH
17315: LD_INT 6
17317: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17318: LD_VAR 0 6
17322: PUSH
17323: LD_INT 0
17325: PUSH
17326: LD_INT 1
17328: PUSH
17329: LD_INT 2
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: LIST
17336: IN
17337: NOT
17338: PUSH
17339: LD_VAR 0 1
17343: PUSH
17344: LD_INT 0
17346: PUSH
17347: LD_INT 1
17349: PUSH
17350: LD_INT 2
17352: PUSH
17353: LD_INT 3
17355: PUSH
17356: LD_INT 6
17358: PUSH
17359: LD_INT 36
17361: PUSH
17362: LD_INT 4
17364: PUSH
17365: LD_INT 5
17367: PUSH
17368: LD_INT 31
17370: PUSH
17371: LD_INT 32
17373: PUSH
17374: LD_INT 33
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: IN
17390: NOT
17391: PUSH
17392: LD_VAR 0 6
17396: PUSH
17397: LD_INT 1
17399: EQUAL
17400: AND
17401: OR
17402: PUSH
17403: LD_VAR 0 1
17407: PUSH
17408: LD_INT 2
17410: PUSH
17411: LD_INT 3
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: IN
17418: NOT
17419: PUSH
17420: LD_VAR 0 6
17424: PUSH
17425: LD_INT 2
17427: EQUAL
17428: AND
17429: OR
17430: IFFALSE 17440
// mode = 0 ;
17432: LD_ADDR_VAR 0 6
17436: PUSH
17437: LD_INT 0
17439: ST_TO_ADDR
// case mode of 0 :
17440: LD_VAR 0 6
17444: PUSH
17445: LD_INT 0
17447: DOUBLE
17448: EQUAL
17449: IFTRUE 17453
17451: GO 28906
17453: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17454: LD_ADDR_VAR 0 11
17458: PUSH
17459: LD_INT 0
17461: PUSH
17462: LD_INT 0
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 0
17471: PUSH
17472: LD_INT 1
17474: NEG
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 1
17482: PUSH
17483: LD_INT 0
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 1
17492: PUSH
17493: LD_INT 1
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 0
17502: PUSH
17503: LD_INT 1
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 1
17512: NEG
17513: PUSH
17514: LD_INT 0
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 1
17523: NEG
17524: PUSH
17525: LD_INT 1
17527: NEG
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 1
17535: NEG
17536: PUSH
17537: LD_INT 2
17539: NEG
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 0
17547: PUSH
17548: LD_INT 2
17550: NEG
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 1
17558: PUSH
17559: LD_INT 1
17561: NEG
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: LD_INT 2
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 0
17579: PUSH
17580: LD_INT 2
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 1
17589: NEG
17590: PUSH
17591: LD_INT 1
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: LD_INT 3
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 0
17610: PUSH
17611: LD_INT 3
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 1
17620: NEG
17621: PUSH
17622: LD_INT 2
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17647: LD_ADDR_VAR 0 12
17651: PUSH
17652: LD_INT 0
17654: PUSH
17655: LD_INT 0
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 0
17664: PUSH
17665: LD_INT 1
17667: NEG
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: LD_INT 1
17675: PUSH
17676: LD_INT 0
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 1
17685: PUSH
17686: LD_INT 1
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 0
17695: PUSH
17696: LD_INT 1
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 1
17705: NEG
17706: PUSH
17707: LD_INT 0
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PUSH
17714: LD_INT 1
17716: NEG
17717: PUSH
17718: LD_INT 1
17720: NEG
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 1
17728: PUSH
17729: LD_INT 1
17731: NEG
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 2
17739: PUSH
17740: LD_INT 0
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 1
17759: NEG
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 2
17770: NEG
17771: PUSH
17772: LD_INT 0
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 2
17781: NEG
17782: PUSH
17783: LD_INT 1
17785: NEG
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 2
17793: NEG
17794: PUSH
17795: LD_INT 1
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 3
17804: NEG
17805: PUSH
17806: LD_INT 0
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: LD_INT 3
17815: NEG
17816: PUSH
17817: LD_INT 1
17819: NEG
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17843: LD_ADDR_VAR 0 13
17847: PUSH
17848: LD_INT 0
17850: PUSH
17851: LD_INT 0
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 0
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: LD_INT 1
17871: PUSH
17872: LD_INT 0
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: LD_INT 1
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 0
17891: PUSH
17892: LD_INT 1
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 1
17901: NEG
17902: PUSH
17903: LD_INT 0
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 1
17912: NEG
17913: PUSH
17914: LD_INT 1
17916: NEG
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 1
17924: NEG
17925: PUSH
17926: LD_INT 2
17928: NEG
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 2
17936: PUSH
17937: LD_INT 1
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 2
17946: PUSH
17947: LD_INT 2
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 1
17956: PUSH
17957: LD_INT 2
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 2
17966: NEG
17967: PUSH
17968: LD_INT 1
17970: NEG
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 2
17978: NEG
17979: PUSH
17980: LD_INT 2
17982: NEG
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 2
17990: NEG
17991: PUSH
17992: LD_INT 3
17994: NEG
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 3
18002: NEG
18003: PUSH
18004: LD_INT 2
18006: NEG
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 3
18014: NEG
18015: PUSH
18016: LD_INT 3
18018: NEG
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18042: LD_ADDR_VAR 0 14
18046: PUSH
18047: LD_INT 0
18049: PUSH
18050: LD_INT 0
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 0
18059: PUSH
18060: LD_INT 1
18062: NEG
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 1
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 1
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 0
18090: PUSH
18091: LD_INT 1
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 1
18100: NEG
18101: PUSH
18102: LD_INT 0
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 1
18111: NEG
18112: PUSH
18113: LD_INT 1
18115: NEG
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 1
18123: NEG
18124: PUSH
18125: LD_INT 2
18127: NEG
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 0
18135: PUSH
18136: LD_INT 2
18138: NEG
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 1
18146: PUSH
18147: LD_INT 1
18149: NEG
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 1
18157: PUSH
18158: LD_INT 2
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: LD_INT 2
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 1
18177: NEG
18178: PUSH
18179: LD_INT 1
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 1
18188: NEG
18189: PUSH
18190: LD_INT 3
18192: NEG
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 0
18200: PUSH
18201: LD_INT 3
18203: NEG
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 1
18211: PUSH
18212: LD_INT 2
18214: NEG
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18238: LD_ADDR_VAR 0 15
18242: PUSH
18243: LD_INT 0
18245: PUSH
18246: LD_INT 0
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 0
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 1
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 1
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: LD_INT 1
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 1
18296: NEG
18297: PUSH
18298: LD_INT 0
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 1
18307: NEG
18308: PUSH
18309: LD_INT 1
18311: NEG
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 1
18319: PUSH
18320: LD_INT 1
18322: NEG
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 2
18330: PUSH
18331: LD_INT 0
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: LD_INT 1
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 1
18350: NEG
18351: PUSH
18352: LD_INT 1
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 2
18361: NEG
18362: PUSH
18363: LD_INT 0
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 2
18372: NEG
18373: PUSH
18374: LD_INT 1
18376: NEG
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 2
18384: PUSH
18385: LD_INT 1
18387: NEG
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 3
18395: PUSH
18396: LD_INT 0
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 3
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18431: LD_ADDR_VAR 0 16
18435: PUSH
18436: LD_INT 0
18438: PUSH
18439: LD_INT 0
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 0
18448: PUSH
18449: LD_INT 1
18451: NEG
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: LD_INT 0
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 1
18469: PUSH
18470: LD_INT 1
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 0
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 1
18489: NEG
18490: PUSH
18491: LD_INT 0
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 1
18500: NEG
18501: PUSH
18502: LD_INT 1
18504: NEG
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 1
18512: NEG
18513: PUSH
18514: LD_INT 2
18516: NEG
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 2
18524: PUSH
18525: LD_INT 1
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 2
18534: PUSH
18535: LD_INT 2
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 1
18544: PUSH
18545: LD_INT 2
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 2
18554: NEG
18555: PUSH
18556: LD_INT 1
18558: NEG
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 2
18566: NEG
18567: PUSH
18568: LD_INT 2
18570: NEG
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 3
18578: PUSH
18579: LD_INT 2
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 3
18588: PUSH
18589: LD_INT 3
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 2
18598: PUSH
18599: LD_INT 3
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18624: LD_ADDR_VAR 0 17
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 0
18641: PUSH
18642: LD_INT 1
18644: NEG
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: LD_INT 0
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: LD_INT 1
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 0
18672: PUSH
18673: LD_INT 1
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 1
18682: NEG
18683: PUSH
18684: LD_INT 0
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 1
18693: NEG
18694: PUSH
18695: LD_INT 1
18697: NEG
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 1
18705: NEG
18706: PUSH
18707: LD_INT 2
18709: NEG
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 0
18717: PUSH
18718: LD_INT 2
18720: NEG
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 1
18728: PUSH
18729: LD_INT 1
18731: NEG
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: LD_INT 0
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 2
18749: PUSH
18750: LD_INT 1
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 2
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 0
18779: PUSH
18780: LD_INT 2
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 1
18789: NEG
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 2
18800: NEG
18801: PUSH
18802: LD_INT 0
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 2
18811: NEG
18812: PUSH
18813: LD_INT 1
18815: NEG
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 2
18823: NEG
18824: PUSH
18825: LD_INT 2
18827: NEG
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18854: LD_ADDR_VAR 0 18
18858: PUSH
18859: LD_INT 0
18861: PUSH
18862: LD_INT 0
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 0
18871: PUSH
18872: LD_INT 1
18874: NEG
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: LD_INT 1
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: LD_INT 1
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 1
18912: NEG
18913: PUSH
18914: LD_INT 0
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 1
18923: NEG
18924: PUSH
18925: LD_INT 1
18927: NEG
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 1
18935: NEG
18936: PUSH
18937: LD_INT 2
18939: NEG
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 0
18947: PUSH
18948: LD_INT 2
18950: NEG
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 1
18958: PUSH
18959: LD_INT 1
18961: NEG
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 2
18969: PUSH
18970: LD_INT 0
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: LD_INT 1
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 2
18989: PUSH
18990: LD_INT 2
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: LD_INT 2
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 0
19009: PUSH
19010: LD_INT 2
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 1
19019: NEG
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 2
19030: NEG
19031: PUSH
19032: LD_INT 0
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 2
19041: NEG
19042: PUSH
19043: LD_INT 1
19045: NEG
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 2
19053: NEG
19054: PUSH
19055: LD_INT 2
19057: NEG
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19084: LD_ADDR_VAR 0 19
19088: PUSH
19089: LD_INT 0
19091: PUSH
19092: LD_INT 0
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 0
19101: PUSH
19102: LD_INT 1
19104: NEG
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 1
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 1
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 0
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 1
19142: NEG
19143: PUSH
19144: LD_INT 0
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 1
19153: NEG
19154: PUSH
19155: LD_INT 1
19157: NEG
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 1
19165: NEG
19166: PUSH
19167: LD_INT 2
19169: NEG
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 0
19177: PUSH
19178: LD_INT 2
19180: NEG
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 1
19188: PUSH
19189: LD_INT 1
19191: NEG
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 2
19199: PUSH
19200: LD_INT 0
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 2
19209: PUSH
19210: LD_INT 1
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 2
19219: PUSH
19220: LD_INT 2
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 1
19229: PUSH
19230: LD_INT 2
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 0
19239: PUSH
19240: LD_INT 2
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 1
19249: NEG
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 2
19260: NEG
19261: PUSH
19262: LD_INT 0
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 2
19271: NEG
19272: PUSH
19273: LD_INT 1
19275: NEG
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 2
19283: NEG
19284: PUSH
19285: LD_INT 2
19287: NEG
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19314: LD_ADDR_VAR 0 20
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: LD_INT 0
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 0
19331: PUSH
19332: LD_INT 1
19334: NEG
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 1
19342: PUSH
19343: LD_INT 0
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 1
19352: PUSH
19353: LD_INT 1
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 0
19362: PUSH
19363: LD_INT 1
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 1
19372: NEG
19373: PUSH
19374: LD_INT 0
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 1
19383: NEG
19384: PUSH
19385: LD_INT 1
19387: NEG
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 1
19395: NEG
19396: PUSH
19397: LD_INT 2
19399: NEG
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 0
19407: PUSH
19408: LD_INT 2
19410: NEG
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 1
19418: PUSH
19419: LD_INT 1
19421: NEG
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 2
19429: PUSH
19430: LD_INT 0
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 2
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 2
19449: PUSH
19450: LD_INT 2
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: LD_INT 2
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 1
19479: NEG
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 2
19490: NEG
19491: PUSH
19492: LD_INT 0
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 2
19501: NEG
19502: PUSH
19503: LD_INT 1
19505: NEG
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 2
19513: NEG
19514: PUSH
19515: LD_INT 2
19517: NEG
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19544: LD_ADDR_VAR 0 21
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 0
19561: PUSH
19562: LD_INT 1
19564: NEG
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 1
19582: PUSH
19583: LD_INT 1
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 0
19592: PUSH
19593: LD_INT 1
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 1
19602: NEG
19603: PUSH
19604: LD_INT 0
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 1
19613: NEG
19614: PUSH
19615: LD_INT 1
19617: NEG
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 1
19625: NEG
19626: PUSH
19627: LD_INT 2
19629: NEG
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 0
19637: PUSH
19638: LD_INT 2
19640: NEG
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 1
19648: PUSH
19649: LD_INT 1
19651: NEG
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 2
19659: PUSH
19660: LD_INT 0
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 2
19669: PUSH
19670: LD_INT 1
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 2
19679: PUSH
19680: LD_INT 2
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 1
19689: PUSH
19690: LD_INT 2
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 0
19699: PUSH
19700: LD_INT 2
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 1
19709: NEG
19710: PUSH
19711: LD_INT 1
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 2
19720: NEG
19721: PUSH
19722: LD_INT 0
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 2
19731: NEG
19732: PUSH
19733: LD_INT 1
19735: NEG
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 2
19743: NEG
19744: PUSH
19745: LD_INT 2
19747: NEG
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19774: LD_ADDR_VAR 0 22
19778: PUSH
19779: LD_INT 0
19781: PUSH
19782: LD_INT 0
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 0
19791: PUSH
19792: LD_INT 1
19794: NEG
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 1
19802: PUSH
19803: LD_INT 0
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 1
19812: PUSH
19813: LD_INT 1
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 0
19822: PUSH
19823: LD_INT 1
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 1
19832: NEG
19833: PUSH
19834: LD_INT 0
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 1
19843: NEG
19844: PUSH
19845: LD_INT 1
19847: NEG
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 1
19855: NEG
19856: PUSH
19857: LD_INT 2
19859: NEG
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 0
19867: PUSH
19868: LD_INT 2
19870: NEG
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 1
19878: PUSH
19879: LD_INT 1
19881: NEG
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 2
19889: PUSH
19890: LD_INT 0
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 2
19899: PUSH
19900: LD_INT 1
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 2
19909: PUSH
19910: LD_INT 2
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 1
19919: PUSH
19920: LD_INT 2
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 0
19929: PUSH
19930: LD_INT 2
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 1
19939: NEG
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 2
19950: NEG
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 2
19961: NEG
19962: PUSH
19963: LD_INT 1
19965: NEG
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 2
19973: NEG
19974: PUSH
19975: LD_INT 2
19977: NEG
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20004: LD_ADDR_VAR 0 23
20008: PUSH
20009: LD_INT 0
20011: PUSH
20012: LD_INT 0
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 0
20021: PUSH
20022: LD_INT 1
20024: NEG
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 1
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 1
20042: PUSH
20043: LD_INT 1
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 0
20052: PUSH
20053: LD_INT 1
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 1
20062: NEG
20063: PUSH
20064: LD_INT 0
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 1
20073: NEG
20074: PUSH
20075: LD_INT 1
20077: NEG
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 1
20085: NEG
20086: PUSH
20087: LD_INT 2
20089: NEG
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 0
20097: PUSH
20098: LD_INT 2
20100: NEG
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: LD_INT 1
20108: PUSH
20109: LD_INT 1
20111: NEG
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 2
20119: PUSH
20120: LD_INT 0
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 2
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 2
20139: PUSH
20140: LD_INT 2
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 1
20149: PUSH
20150: LD_INT 2
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 0
20159: PUSH
20160: LD_INT 2
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 1
20169: NEG
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 2
20180: NEG
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 2
20191: NEG
20192: PUSH
20193: LD_INT 1
20195: NEG
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 2
20203: NEG
20204: PUSH
20205: LD_INT 2
20207: NEG
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 2
20215: NEG
20216: PUSH
20217: LD_INT 3
20219: NEG
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 1
20227: NEG
20228: PUSH
20229: LD_INT 3
20231: NEG
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: LD_INT 2
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 2
20250: PUSH
20251: LD_INT 1
20253: NEG
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20284: LD_ADDR_VAR 0 24
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: LD_INT 0
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 0
20301: PUSH
20302: LD_INT 1
20304: NEG
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 1
20312: PUSH
20313: LD_INT 0
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 1
20322: PUSH
20323: LD_INT 1
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 0
20332: PUSH
20333: LD_INT 1
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 1
20342: NEG
20343: PUSH
20344: LD_INT 0
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 1
20353: NEG
20354: PUSH
20355: LD_INT 1
20357: NEG
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 1
20365: NEG
20366: PUSH
20367: LD_INT 2
20369: NEG
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 0
20377: PUSH
20378: LD_INT 2
20380: NEG
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 1
20388: PUSH
20389: LD_INT 1
20391: NEG
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 2
20399: PUSH
20400: LD_INT 0
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 2
20409: PUSH
20410: LD_INT 1
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 2
20419: PUSH
20420: LD_INT 2
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: LD_INT 1
20429: PUSH
20430: LD_INT 2
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 0
20439: PUSH
20440: LD_INT 2
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 1
20449: NEG
20450: PUSH
20451: LD_INT 1
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 2
20460: NEG
20461: PUSH
20462: LD_INT 0
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 2
20471: NEG
20472: PUSH
20473: LD_INT 1
20475: NEG
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 2
20483: NEG
20484: PUSH
20485: LD_INT 2
20487: NEG
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 1
20495: PUSH
20496: LD_INT 2
20498: NEG
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 2
20506: PUSH
20507: LD_INT 1
20509: NEG
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 3
20517: PUSH
20518: LD_INT 1
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 3
20527: PUSH
20528: LD_INT 2
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20560: LD_ADDR_VAR 0 25
20564: PUSH
20565: LD_INT 0
20567: PUSH
20568: LD_INT 0
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 0
20577: PUSH
20578: LD_INT 1
20580: NEG
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 1
20588: PUSH
20589: LD_INT 0
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 1
20598: PUSH
20599: LD_INT 1
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 0
20608: PUSH
20609: LD_INT 1
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 1
20618: NEG
20619: PUSH
20620: LD_INT 0
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 1
20629: NEG
20630: PUSH
20631: LD_INT 1
20633: NEG
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 1
20641: NEG
20642: PUSH
20643: LD_INT 2
20645: NEG
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 0
20653: PUSH
20654: LD_INT 2
20656: NEG
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 1
20664: PUSH
20665: LD_INT 1
20667: NEG
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 2
20675: PUSH
20676: LD_INT 0
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 2
20685: PUSH
20686: LD_INT 1
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 2
20695: PUSH
20696: LD_INT 2
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 1
20705: PUSH
20706: LD_INT 2
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 0
20715: PUSH
20716: LD_INT 2
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 1
20725: NEG
20726: PUSH
20727: LD_INT 1
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 2
20736: NEG
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 2
20747: NEG
20748: PUSH
20749: LD_INT 1
20751: NEG
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 2
20759: NEG
20760: PUSH
20761: LD_INT 2
20763: NEG
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 3
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 3
20781: PUSH
20782: LD_INT 2
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 2
20791: PUSH
20792: LD_INT 3
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 1
20801: PUSH
20802: LD_INT 3
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20834: LD_ADDR_VAR 0 26
20838: PUSH
20839: LD_INT 0
20841: PUSH
20842: LD_INT 0
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 0
20851: PUSH
20852: LD_INT 1
20854: NEG
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 1
20862: PUSH
20863: LD_INT 0
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 1
20872: PUSH
20873: LD_INT 1
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 0
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 1
20892: NEG
20893: PUSH
20894: LD_INT 0
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 1
20903: NEG
20904: PUSH
20905: LD_INT 1
20907: NEG
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 1
20915: NEG
20916: PUSH
20917: LD_INT 2
20919: NEG
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 0
20927: PUSH
20928: LD_INT 2
20930: NEG
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 1
20938: PUSH
20939: LD_INT 1
20941: NEG
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 2
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 2
20959: PUSH
20960: LD_INT 1
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 2
20969: PUSH
20970: LD_INT 2
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: LD_INT 2
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 0
20989: PUSH
20990: LD_INT 2
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 1
20999: NEG
21000: PUSH
21001: LD_INT 1
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 2
21010: NEG
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 2
21021: NEG
21022: PUSH
21023: LD_INT 1
21025: NEG
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 2
21033: NEG
21034: PUSH
21035: LD_INT 2
21037: NEG
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 2
21045: PUSH
21046: LD_INT 3
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 1
21055: PUSH
21056: LD_INT 3
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 1
21065: NEG
21066: PUSH
21067: LD_INT 2
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 2
21076: NEG
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21110: LD_ADDR_VAR 0 27
21114: PUSH
21115: LD_INT 0
21117: PUSH
21118: LD_INT 0
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: LD_INT 1
21130: NEG
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 1
21138: PUSH
21139: LD_INT 0
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 1
21148: PUSH
21149: LD_INT 1
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 0
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 1
21168: NEG
21169: PUSH
21170: LD_INT 0
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 1
21179: NEG
21180: PUSH
21181: LD_INT 1
21183: NEG
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 1
21191: NEG
21192: PUSH
21193: LD_INT 2
21195: NEG
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 0
21203: PUSH
21204: LD_INT 2
21206: NEG
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 1
21214: PUSH
21215: LD_INT 1
21217: NEG
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 2
21225: PUSH
21226: LD_INT 0
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: LD_INT 2
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 1
21255: PUSH
21256: LD_INT 2
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: LD_INT 2
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 1
21275: NEG
21276: PUSH
21277: LD_INT 1
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 2
21286: NEG
21287: PUSH
21288: LD_INT 0
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 2
21297: NEG
21298: PUSH
21299: LD_INT 1
21301: NEG
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 2
21309: NEG
21310: PUSH
21311: LD_INT 2
21313: NEG
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 1
21321: NEG
21322: PUSH
21323: LD_INT 2
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 2
21332: NEG
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 3
21343: NEG
21344: PUSH
21345: LD_INT 1
21347: NEG
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 3
21355: NEG
21356: PUSH
21357: LD_INT 2
21359: NEG
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21390: LD_ADDR_VAR 0 28
21394: PUSH
21395: LD_INT 0
21397: PUSH
21398: LD_INT 0
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: LD_INT 1
21410: NEG
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 1
21418: PUSH
21419: LD_INT 0
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: LD_INT 1
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 0
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 1
21448: NEG
21449: PUSH
21450: LD_INT 0
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 1
21459: NEG
21460: PUSH
21461: LD_INT 1
21463: NEG
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 1
21471: NEG
21472: PUSH
21473: LD_INT 2
21475: NEG
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 0
21483: PUSH
21484: LD_INT 2
21486: NEG
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 1
21494: PUSH
21495: LD_INT 1
21497: NEG
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 2
21505: PUSH
21506: LD_INT 0
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: LD_INT 1
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 2
21525: PUSH
21526: LD_INT 2
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 1
21535: PUSH
21536: LD_INT 2
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 0
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 1
21555: NEG
21556: PUSH
21557: LD_INT 1
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 2
21566: NEG
21567: PUSH
21568: LD_INT 0
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 2
21577: NEG
21578: PUSH
21579: LD_INT 1
21581: NEG
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 2
21589: NEG
21590: PUSH
21591: LD_INT 2
21593: NEG
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 2
21601: NEG
21602: PUSH
21603: LD_INT 3
21605: NEG
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 1
21613: NEG
21614: PUSH
21615: LD_INT 3
21617: NEG
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 3
21625: NEG
21626: PUSH
21627: LD_INT 1
21629: NEG
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 3
21637: NEG
21638: PUSH
21639: LD_INT 2
21641: NEG
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21672: LD_ADDR_VAR 0 29
21676: PUSH
21677: LD_INT 0
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 0
21689: PUSH
21690: LD_INT 1
21692: NEG
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 1
21700: PUSH
21701: LD_INT 0
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 1
21710: PUSH
21711: LD_INT 1
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 0
21720: PUSH
21721: LD_INT 1
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 1
21730: NEG
21731: PUSH
21732: LD_INT 0
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: NEG
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 1
21753: NEG
21754: PUSH
21755: LD_INT 2
21757: NEG
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 0
21765: PUSH
21766: LD_INT 2
21768: NEG
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 1
21776: PUSH
21777: LD_INT 1
21779: NEG
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 2
21787: PUSH
21788: LD_INT 0
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 2
21797: PUSH
21798: LD_INT 1
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 1
21807: PUSH
21808: LD_INT 2
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 0
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 1
21827: NEG
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 2
21838: NEG
21839: PUSH
21840: LD_INT 1
21842: NEG
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 2
21850: NEG
21851: PUSH
21852: LD_INT 2
21854: NEG
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 2
21862: NEG
21863: PUSH
21864: LD_INT 3
21866: NEG
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 2
21874: PUSH
21875: LD_INT 1
21877: NEG
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 3
21885: PUSH
21886: LD_INT 1
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 1
21895: PUSH
21896: LD_INT 3
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 1
21905: NEG
21906: PUSH
21907: LD_INT 2
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 3
21916: NEG
21917: PUSH
21918: LD_INT 2
21920: NEG
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21951: LD_ADDR_VAR 0 30
21955: PUSH
21956: LD_INT 0
21958: PUSH
21959: LD_INT 0
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 0
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 1
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 1
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 0
21999: PUSH
22000: LD_INT 1
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 1
22009: NEG
22010: PUSH
22011: LD_INT 0
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 1
22020: NEG
22021: PUSH
22022: LD_INT 1
22024: NEG
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 1
22032: NEG
22033: PUSH
22034: LD_INT 2
22036: NEG
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 0
22044: PUSH
22045: LD_INT 2
22047: NEG
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: LD_INT 1
22058: NEG
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 2
22066: PUSH
22067: LD_INT 0
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 2
22076: PUSH
22077: LD_INT 1
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 2
22086: PUSH
22087: LD_INT 2
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: LD_INT 2
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: NEG
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 2
22117: NEG
22118: PUSH
22119: LD_INT 0
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 2
22128: NEG
22129: PUSH
22130: LD_INT 1
22132: NEG
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 1
22140: NEG
22141: PUSH
22142: LD_INT 3
22144: NEG
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: LD_INT 2
22155: NEG
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 3
22163: PUSH
22164: LD_INT 2
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 2
22173: PUSH
22174: LD_INT 3
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 2
22183: NEG
22184: PUSH
22185: LD_INT 1
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 3
22194: NEG
22195: PUSH
22196: LD_INT 1
22198: NEG
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22229: LD_ADDR_VAR 0 31
22233: PUSH
22234: LD_INT 0
22236: PUSH
22237: LD_INT 0
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: LD_INT 1
22249: NEG
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 1
22257: PUSH
22258: LD_INT 0
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 1
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 0
22277: PUSH
22278: LD_INT 1
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 1
22287: NEG
22288: PUSH
22289: LD_INT 0
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 1
22298: NEG
22299: PUSH
22300: LD_INT 1
22302: NEG
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 1
22310: NEG
22311: PUSH
22312: LD_INT 2
22314: NEG
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 1
22322: PUSH
22323: LD_INT 1
22325: NEG
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 2
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 2
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 2
22353: PUSH
22354: LD_INT 2
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 1
22363: PUSH
22364: LD_INT 2
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: LD_INT 0
22373: PUSH
22374: LD_INT 2
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 1
22383: NEG
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 2
22394: NEG
22395: PUSH
22396: LD_INT 1
22398: NEG
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 2
22406: NEG
22407: PUSH
22408: LD_INT 2
22410: NEG
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 2
22418: NEG
22419: PUSH
22420: LD_INT 3
22422: NEG
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 2
22430: PUSH
22431: LD_INT 1
22433: NEG
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 3
22441: PUSH
22442: LD_INT 1
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 1
22451: PUSH
22452: LD_INT 3
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 1
22461: NEG
22462: PUSH
22463: LD_INT 2
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 3
22472: NEG
22473: PUSH
22474: LD_INT 2
22476: NEG
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22507: LD_ADDR_VAR 0 32
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: LD_INT 0
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: LD_INT 1
22527: NEG
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: LD_INT 1
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 1
22565: NEG
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 1
22576: NEG
22577: PUSH
22578: LD_INT 1
22580: NEG
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 1
22588: NEG
22589: PUSH
22590: LD_INT 2
22592: NEG
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 0
22600: PUSH
22601: LD_INT 2
22603: NEG
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 1
22611: PUSH
22612: LD_INT 1
22614: NEG
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 2
22622: PUSH
22623: LD_INT 1
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 2
22632: PUSH
22633: LD_INT 2
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 0
22652: PUSH
22653: LD_INT 2
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 1
22662: NEG
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 2
22673: NEG
22674: PUSH
22675: LD_INT 0
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 2
22684: NEG
22685: PUSH
22686: LD_INT 1
22688: NEG
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 1
22696: NEG
22697: PUSH
22698: LD_INT 3
22700: NEG
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 1
22708: PUSH
22709: LD_INT 2
22711: NEG
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 3
22719: PUSH
22720: LD_INT 2
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 2
22729: PUSH
22730: LD_INT 3
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 2
22739: NEG
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 3
22750: NEG
22751: PUSH
22752: LD_INT 1
22754: NEG
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22785: LD_ADDR_VAR 0 33
22789: PUSH
22790: LD_INT 0
22792: PUSH
22793: LD_INT 0
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 0
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: LD_INT 0
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 0
22833: PUSH
22834: LD_INT 1
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 1
22843: NEG
22844: PUSH
22845: LD_INT 0
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 1
22854: NEG
22855: PUSH
22856: LD_INT 1
22858: NEG
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 1
22866: NEG
22867: PUSH
22868: LD_INT 2
22870: NEG
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 1
22878: PUSH
22879: LD_INT 1
22881: NEG
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 2
22889: PUSH
22890: LD_INT 0
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 2
22899: PUSH
22900: LD_INT 1
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 1
22909: PUSH
22910: LD_INT 2
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 0
22919: PUSH
22920: LD_INT 2
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 1
22929: NEG
22930: PUSH
22931: LD_INT 1
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 2
22940: NEG
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 2
22951: NEG
22952: PUSH
22953: LD_INT 1
22955: NEG
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 2
22963: NEG
22964: PUSH
22965: LD_INT 2
22967: NEG
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 2
22975: NEG
22976: PUSH
22977: LD_INT 3
22979: NEG
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 2
22987: PUSH
22988: LD_INT 1
22990: NEG
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 3
22998: PUSH
22999: LD_INT 1
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 1
23008: PUSH
23009: LD_INT 3
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 1
23018: NEG
23019: PUSH
23020: LD_INT 2
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 3
23029: NEG
23030: PUSH
23031: LD_INT 2
23033: NEG
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23064: LD_ADDR_VAR 0 34
23068: PUSH
23069: LD_INT 0
23071: PUSH
23072: LD_INT 0
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 0
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 1
23092: PUSH
23093: LD_INT 0
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 1
23102: PUSH
23103: LD_INT 1
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 0
23112: PUSH
23113: LD_INT 1
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 1
23122: NEG
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: NEG
23134: PUSH
23135: LD_INT 1
23137: NEG
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 1
23145: NEG
23146: PUSH
23147: LD_INT 2
23149: NEG
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 0
23157: PUSH
23158: LD_INT 2
23160: NEG
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 1
23168: PUSH
23169: LD_INT 1
23171: NEG
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 2
23179: PUSH
23180: LD_INT 1
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 2
23189: PUSH
23190: LD_INT 2
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: LD_INT 2
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 1
23209: NEG
23210: PUSH
23211: LD_INT 1
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 2
23220: NEG
23221: PUSH
23222: LD_INT 0
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 2
23231: NEG
23232: PUSH
23233: LD_INT 1
23235: NEG
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 2
23243: NEG
23244: PUSH
23245: LD_INT 2
23247: NEG
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 1
23255: NEG
23256: PUSH
23257: LD_INT 3
23259: NEG
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 1
23267: PUSH
23268: LD_INT 2
23270: NEG
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 3
23278: PUSH
23279: LD_INT 2
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 2
23288: PUSH
23289: LD_INT 3
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 2
23298: NEG
23299: PUSH
23300: LD_INT 1
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 3
23309: NEG
23310: PUSH
23311: LD_INT 1
23313: NEG
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23344: LD_ADDR_VAR 0 35
23348: PUSH
23349: LD_INT 0
23351: PUSH
23352: LD_INT 0
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 0
23361: PUSH
23362: LD_INT 1
23364: NEG
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 1
23372: PUSH
23373: LD_INT 0
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: LD_INT 1
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 0
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 1
23402: NEG
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 1
23413: NEG
23414: PUSH
23415: LD_INT 1
23417: NEG
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 2
23425: PUSH
23426: LD_INT 1
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 2
23435: NEG
23436: PUSH
23437: LD_INT 1
23439: NEG
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23456: LD_ADDR_VAR 0 36
23460: PUSH
23461: LD_INT 0
23463: PUSH
23464: LD_INT 0
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: LD_INT 1
23476: NEG
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 1
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 1
23494: PUSH
23495: LD_INT 1
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 0
23504: PUSH
23505: LD_INT 1
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 1
23514: NEG
23515: PUSH
23516: LD_INT 0
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 1
23525: NEG
23526: PUSH
23527: LD_INT 1
23529: NEG
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 1
23537: NEG
23538: PUSH
23539: LD_INT 2
23541: NEG
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 1
23549: PUSH
23550: LD_INT 2
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23568: LD_ADDR_VAR 0 37
23572: PUSH
23573: LD_INT 0
23575: PUSH
23576: LD_INT 0
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 0
23585: PUSH
23586: LD_INT 1
23588: NEG
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 1
23596: PUSH
23597: LD_INT 0
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: LD_INT 1
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 0
23616: PUSH
23617: LD_INT 1
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 1
23626: NEG
23627: PUSH
23628: LD_INT 0
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 1
23637: NEG
23638: PUSH
23639: LD_INT 1
23641: NEG
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: PUSH
23650: LD_INT 1
23652: NEG
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 1
23660: NEG
23661: PUSH
23662: LD_INT 1
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23680: LD_ADDR_VAR 0 38
23684: PUSH
23685: LD_INT 0
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 0
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 0
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 1
23738: NEG
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: NEG
23750: PUSH
23751: LD_INT 1
23753: NEG
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 2
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 2
23771: NEG
23772: PUSH
23773: LD_INT 1
23775: NEG
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23792: LD_ADDR_VAR 0 39
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 0
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 1
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 0
23840: PUSH
23841: LD_INT 1
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: NEG
23851: PUSH
23852: LD_INT 0
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 1
23861: NEG
23862: PUSH
23863: LD_INT 1
23865: NEG
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 1
23873: NEG
23874: PUSH
23875: LD_INT 2
23877: NEG
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 1
23885: PUSH
23886: LD_INT 2
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23904: LD_ADDR_VAR 0 40
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 0
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 1
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: LD_INT 1
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 0
23952: PUSH
23953: LD_INT 1
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 1
23962: NEG
23963: PUSH
23964: LD_INT 0
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: NEG
23974: PUSH
23975: LD_INT 1
23977: NEG
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 1
23985: PUSH
23986: LD_INT 1
23988: NEG
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 1
23996: NEG
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24016: LD_ADDR_VAR 0 41
24020: PUSH
24021: LD_INT 0
24023: PUSH
24024: LD_INT 0
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: LD_INT 1
24036: NEG
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 1
24044: PUSH
24045: LD_INT 0
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: LD_INT 1
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: LD_INT 1
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: LD_INT 0
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: LD_INT 1
24089: NEG
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: NEG
24098: PUSH
24099: LD_INT 2
24101: NEG
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 1
24109: PUSH
24110: LD_INT 1
24112: NEG
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 2
24120: PUSH
24121: LD_INT 0
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 2
24140: PUSH
24141: LD_INT 2
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: LD_INT 2
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 1
24160: NEG
24161: PUSH
24162: LD_INT 1
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 2
24171: NEG
24172: PUSH
24173: LD_INT 0
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 2
24182: NEG
24183: PUSH
24184: LD_INT 1
24186: NEG
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 2
24194: NEG
24195: PUSH
24196: LD_INT 2
24198: NEG
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 2
24206: NEG
24207: PUSH
24208: LD_INT 3
24210: NEG
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 2
24218: PUSH
24219: LD_INT 1
24221: NEG
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 3
24229: PUSH
24230: LD_INT 0
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 3
24239: PUSH
24240: LD_INT 1
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 3
24249: PUSH
24250: LD_INT 2
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 3
24259: PUSH
24260: LD_INT 3
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 2
24269: PUSH
24270: LD_INT 3
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 2
24279: NEG
24280: PUSH
24281: LD_INT 1
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 3
24290: NEG
24291: PUSH
24292: LD_INT 0
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 3
24301: NEG
24302: PUSH
24303: LD_INT 1
24305: NEG
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 3
24313: NEG
24314: PUSH
24315: LD_INT 2
24317: NEG
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 3
24325: NEG
24326: PUSH
24327: LD_INT 3
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24366: LD_ADDR_VAR 0 42
24370: PUSH
24371: LD_INT 0
24373: PUSH
24374: LD_INT 0
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 0
24383: PUSH
24384: LD_INT 1
24386: NEG
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 1
24394: PUSH
24395: LD_INT 0
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 1
24404: PUSH
24405: LD_INT 1
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 0
24414: PUSH
24415: LD_INT 1
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 1
24424: NEG
24425: PUSH
24426: LD_INT 0
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: NEG
24436: PUSH
24437: LD_INT 1
24439: NEG
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 1
24447: NEG
24448: PUSH
24449: LD_INT 2
24451: NEG
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 0
24459: PUSH
24460: LD_INT 2
24462: NEG
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 1
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 2
24481: PUSH
24482: LD_INT 1
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 2
24491: PUSH
24492: LD_INT 2
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 1
24501: PUSH
24502: LD_INT 2
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: LD_INT 2
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 1
24521: NEG
24522: PUSH
24523: LD_INT 1
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 2
24532: NEG
24533: PUSH
24534: LD_INT 1
24536: NEG
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 2
24544: NEG
24545: PUSH
24546: LD_INT 2
24548: NEG
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 2
24556: NEG
24557: PUSH
24558: LD_INT 3
24560: NEG
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 1
24568: NEG
24569: PUSH
24570: LD_INT 3
24572: NEG
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 0
24580: PUSH
24581: LD_INT 3
24583: NEG
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: PUSH
24592: LD_INT 2
24594: NEG
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 3
24602: PUSH
24603: LD_INT 2
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 3
24612: PUSH
24613: LD_INT 3
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: LD_INT 3
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 1
24632: PUSH
24633: LD_INT 3
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 0
24642: PUSH
24643: LD_INT 3
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 1
24652: NEG
24653: PUSH
24654: LD_INT 2
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 3
24663: NEG
24664: PUSH
24665: LD_INT 2
24667: NEG
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 3
24675: NEG
24676: PUSH
24677: LD_INT 3
24679: NEG
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24716: LD_ADDR_VAR 0 43
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 0
24733: PUSH
24734: LD_INT 1
24736: NEG
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 1
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 0
24764: PUSH
24765: LD_INT 1
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 1
24774: NEG
24775: PUSH
24776: LD_INT 0
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 1
24789: NEG
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 1
24797: NEG
24798: PUSH
24799: LD_INT 2
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 0
24809: PUSH
24810: LD_INT 2
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: LD_INT 1
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 2
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 1
24851: PUSH
24852: LD_INT 2
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 0
24861: PUSH
24862: LD_INT 2
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 1
24871: NEG
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 2
24882: NEG
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 2
24893: NEG
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 1
24905: NEG
24906: PUSH
24907: LD_INT 3
24909: NEG
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: LD_INT 3
24920: NEG
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 1
24928: PUSH
24929: LD_INT 2
24931: NEG
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 2
24939: PUSH
24940: LD_INT 1
24942: NEG
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 3
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 3
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: LD_INT 3
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 0
24980: PUSH
24981: LD_INT 3
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 1
24990: NEG
24991: PUSH
24992: LD_INT 2
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 2
25001: NEG
25002: PUSH
25003: LD_INT 1
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 3
25012: NEG
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 3
25023: NEG
25024: PUSH
25025: LD_INT 1
25027: NEG
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25064: LD_ADDR_VAR 0 44
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 0
25081: PUSH
25082: LD_INT 1
25084: NEG
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 1
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 1
25133: NEG
25134: PUSH
25135: LD_INT 1
25137: NEG
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 1
25145: NEG
25146: PUSH
25147: LD_INT 2
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: LD_INT 1
25160: NEG
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 2
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 2
25188: PUSH
25189: LD_INT 2
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: LD_INT 2
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 1
25208: NEG
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 2
25219: NEG
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 2
25230: NEG
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 2
25242: NEG
25243: PUSH
25244: LD_INT 2
25246: NEG
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 2
25254: NEG
25255: PUSH
25256: LD_INT 3
25258: NEG
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 2
25266: PUSH
25267: LD_INT 1
25269: NEG
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 3
25277: PUSH
25278: LD_INT 0
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 3
25287: PUSH
25288: LD_INT 1
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 3
25297: PUSH
25298: LD_INT 2
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 3
25307: PUSH
25308: LD_INT 3
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 2
25317: PUSH
25318: LD_INT 3
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 2
25327: NEG
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 3
25338: NEG
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 3
25349: NEG
25350: PUSH
25351: LD_INT 1
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 3
25361: NEG
25362: PUSH
25363: LD_INT 2
25365: NEG
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 3
25373: NEG
25374: PUSH
25375: LD_INT 3
25377: NEG
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25414: LD_ADDR_VAR 0 45
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 0
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: LD_INT 0
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 1
25472: NEG
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: NEG
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 1
25495: NEG
25496: PUSH
25497: LD_INT 2
25499: NEG
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: LD_INT 2
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: LD_INT 1
25521: NEG
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 2
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 2
25539: PUSH
25540: LD_INT 2
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: LD_INT 2
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 0
25559: PUSH
25560: LD_INT 2
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: NEG
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 2
25580: NEG
25581: PUSH
25582: LD_INT 1
25584: NEG
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 2
25592: NEG
25593: PUSH
25594: LD_INT 2
25596: NEG
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 2
25604: NEG
25605: PUSH
25606: LD_INT 3
25608: NEG
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 1
25616: NEG
25617: PUSH
25618: LD_INT 3
25620: NEG
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: LD_INT 3
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: LD_INT 2
25642: NEG
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 3
25650: PUSH
25651: LD_INT 2
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 3
25660: PUSH
25661: LD_INT 3
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 2
25670: PUSH
25671: LD_INT 3
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: LD_INT 3
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: LD_INT 3
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 1
25700: NEG
25701: PUSH
25702: LD_INT 2
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 3
25711: NEG
25712: PUSH
25713: LD_INT 2
25715: NEG
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 3
25723: NEG
25724: PUSH
25725: LD_INT 3
25727: NEG
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25764: LD_ADDR_VAR 0 46
25768: PUSH
25769: LD_INT 0
25771: PUSH
25772: LD_INT 0
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 0
25781: PUSH
25782: LD_INT 1
25784: NEG
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 1
25792: PUSH
25793: LD_INT 0
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 1
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 0
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 1
25822: NEG
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: NEG
25834: PUSH
25835: LD_INT 1
25837: NEG
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 1
25845: NEG
25846: PUSH
25847: LD_INT 2
25849: NEG
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: LD_INT 2
25860: NEG
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: LD_INT 1
25871: NEG
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 2
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 2
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 1
25899: PUSH
25900: LD_INT 2
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: LD_INT 2
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: LD_INT 1
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 2
25930: NEG
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 2
25941: NEG
25942: PUSH
25943: LD_INT 1
25945: NEG
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: LD_INT 3
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: LD_INT 3
25968: NEG
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 1
25976: PUSH
25977: LD_INT 2
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 3
25998: PUSH
25999: LD_INT 0
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 3
26008: PUSH
26009: LD_INT 1
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 1
26018: PUSH
26019: LD_INT 3
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 0
26028: PUSH
26029: LD_INT 3
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 1
26038: NEG
26039: PUSH
26040: LD_INT 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: NEG
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 3
26060: NEG
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 3
26071: NEG
26072: PUSH
26073: LD_INT 1
26075: NEG
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26112: LD_ADDR_VAR 0 47
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 0
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 1
26150: PUSH
26151: LD_INT 1
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: LD_INT 1
26185: NEG
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: LD_INT 2
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: LD_INT 2
26208: NEG
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 1
26216: PUSH
26217: LD_INT 1
26219: NEG
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 2
26227: NEG
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 2
26239: NEG
26240: PUSH
26241: LD_INT 2
26243: NEG
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26263: LD_ADDR_VAR 0 48
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 1
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: LD_INT 1
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 0
26311: PUSH
26312: LD_INT 1
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 1
26321: NEG
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: NEG
26333: PUSH
26334: LD_INT 1
26336: NEG
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 1
26344: NEG
26345: PUSH
26346: LD_INT 2
26348: NEG
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 0
26356: PUSH
26357: LD_INT 2
26359: NEG
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 1
26367: PUSH
26368: LD_INT 1
26370: NEG
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 2
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 2
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26410: LD_ADDR_VAR 0 49
26414: PUSH
26415: LD_INT 0
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 0
26427: PUSH
26428: LD_INT 1
26430: NEG
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: LD_INT 0
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: LD_INT 1
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: LD_INT 1
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 1
26468: NEG
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: LD_INT 2
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: LD_INT 2
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26554: LD_ADDR_VAR 0 50
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: LD_INT 1
26574: NEG
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 1
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 0
26602: PUSH
26603: LD_INT 1
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 1
26612: NEG
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 1
26623: NEG
26624: PUSH
26625: LD_INT 1
26627: NEG
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 2
26635: PUSH
26636: LD_INT 1
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 2
26645: PUSH
26646: LD_INT 2
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 1
26655: PUSH
26656: LD_INT 2
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: LD_INT 2
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 1
26675: NEG
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26698: LD_ADDR_VAR 0 51
26702: PUSH
26703: LD_INT 0
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: LD_INT 1
26718: NEG
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 1
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: PUSH
26737: LD_INT 1
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: LD_INT 1
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 1
26756: NEG
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 1
26767: NEG
26768: PUSH
26769: LD_INT 1
26771: NEG
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 1
26779: PUSH
26780: LD_INT 2
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: LD_INT 2
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 1
26799: NEG
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 2
26810: NEG
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 2
26821: NEG
26822: PUSH
26823: LD_INT 1
26825: NEG
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26845: LD_ADDR_VAR 0 52
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: LD_INT 1
26865: NEG
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 1
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 0
26893: PUSH
26894: LD_INT 1
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 1
26903: NEG
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 1
26914: NEG
26915: PUSH
26916: LD_INT 1
26918: NEG
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 1
26926: NEG
26927: PUSH
26928: LD_INT 2
26930: NEG
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 1
26938: NEG
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 2
26949: NEG
26950: PUSH
26951: LD_INT 0
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 2
26960: NEG
26961: PUSH
26962: LD_INT 1
26964: NEG
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 2
26972: NEG
26973: PUSH
26974: LD_INT 2
26976: NEG
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26996: LD_ADDR_VAR 0 53
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: LD_INT 0
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: LD_INT 1
27016: NEG
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: LD_INT 1
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: LD_INT 1
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 1
27054: NEG
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 1
27065: NEG
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 1
27077: NEG
27078: PUSH
27079: LD_INT 2
27081: NEG
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 0
27089: PUSH
27090: LD_INT 2
27092: NEG
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: LD_INT 1
27103: NEG
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 2
27111: PUSH
27112: LD_INT 0
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 2
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: LD_INT 2
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: LD_INT 2
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 0
27151: PUSH
27152: LD_INT 2
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 2
27172: NEG
27173: PUSH
27174: LD_INT 0
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 2
27183: NEG
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 2
27195: NEG
27196: PUSH
27197: LD_INT 2
27199: NEG
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27226: LD_ADDR_VAR 0 54
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 0
27243: PUSH
27244: LD_INT 1
27246: NEG
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 1
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 1
27284: NEG
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: LD_INT 1
27299: NEG
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 1
27307: NEG
27308: PUSH
27309: LD_INT 2
27311: NEG
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 0
27319: PUSH
27320: LD_INT 2
27322: NEG
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 1
27330: PUSH
27331: LD_INT 1
27333: NEG
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 2
27341: PUSH
27342: LD_INT 0
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 2
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 2
27361: PUSH
27362: LD_INT 2
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 1
27371: PUSH
27372: LD_INT 2
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 0
27381: PUSH
27382: LD_INT 2
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 1
27391: NEG
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 2
27402: NEG
27403: PUSH
27404: LD_INT 0
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 2
27413: NEG
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 2
27425: NEG
27426: PUSH
27427: LD_INT 2
27429: NEG
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27456: LD_ADDR_VAR 0 55
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: LD_INT 1
27476: NEG
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 1
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 0
27504: PUSH
27505: LD_INT 1
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 1
27514: NEG
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: PUSH
27527: LD_INT 1
27529: NEG
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: NEG
27538: PUSH
27539: LD_INT 2
27541: NEG
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: LD_INT 2
27552: NEG
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 1
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 2
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 2
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 2
27591: PUSH
27592: LD_INT 2
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 1
27601: PUSH
27602: LD_INT 2
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 0
27611: PUSH
27612: LD_INT 2
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 1
27621: NEG
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 2
27632: NEG
27633: PUSH
27634: LD_INT 0
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 2
27643: NEG
27644: PUSH
27645: LD_INT 1
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 2
27655: NEG
27656: PUSH
27657: LD_INT 2
27659: NEG
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27686: LD_ADDR_VAR 0 56
27690: PUSH
27691: LD_INT 0
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 0
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: LD_INT 1
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 0
27734: PUSH
27735: LD_INT 1
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: NEG
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 1
27767: NEG
27768: PUSH
27769: LD_INT 2
27771: NEG
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: LD_INT 2
27782: NEG
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 1
27790: PUSH
27791: LD_INT 1
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 2
27801: PUSH
27802: LD_INT 0
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 2
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: LD_INT 2
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 1
27831: PUSH
27832: LD_INT 2
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: LD_INT 2
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 1
27851: NEG
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 2
27862: NEG
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 2
27873: NEG
27874: PUSH
27875: LD_INT 1
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 2
27885: NEG
27886: PUSH
27887: LD_INT 2
27889: NEG
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27916: LD_ADDR_VAR 0 57
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: LD_INT 0
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: LD_INT 1
27936: NEG
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 1
27954: PUSH
27955: LD_INT 1
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: LD_INT 1
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 1
27974: NEG
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: NEG
27986: PUSH
27987: LD_INT 1
27989: NEG
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 1
27997: NEG
27998: PUSH
27999: LD_INT 2
28001: NEG
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: LD_INT 2
28012: NEG
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 1
28020: PUSH
28021: LD_INT 1
28023: NEG
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 2
28031: PUSH
28032: LD_INT 0
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 2
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 2
28051: PUSH
28052: LD_INT 2
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 1
28061: PUSH
28062: LD_INT 2
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 0
28071: PUSH
28072: LD_INT 2
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 1
28081: NEG
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 2
28092: NEG
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 2
28103: NEG
28104: PUSH
28105: LD_INT 1
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 2
28115: NEG
28116: PUSH
28117: LD_INT 2
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28146: LD_ADDR_VAR 0 58
28150: PUSH
28151: LD_INT 0
28153: PUSH
28154: LD_INT 0
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: LD_INT 1
28166: NEG
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: PUSH
28185: LD_INT 1
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 1
28204: NEG
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: LD_INT 2
28242: NEG
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 1
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 2
28261: PUSH
28262: LD_INT 0
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 2
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 2
28281: PUSH
28282: LD_INT 2
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 1
28291: PUSH
28292: LD_INT 2
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: LD_INT 2
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 2
28322: NEG
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 2
28333: NEG
28334: PUSH
28335: LD_INT 1
28337: NEG
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 2
28345: NEG
28346: PUSH
28347: LD_INT 2
28349: NEG
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28376: LD_ADDR_VAR 0 59
28380: PUSH
28381: LD_INT 0
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: LD_INT 1
28396: NEG
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 1
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: LD_INT 1
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 0
28424: PUSH
28425: LD_INT 1
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 1
28434: NEG
28435: PUSH
28436: LD_INT 0
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 1
28445: NEG
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28464: LD_ADDR_VAR 0 60
28468: PUSH
28469: LD_INT 0
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: LD_INT 1
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: LD_INT 1
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: LD_INT 1
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 1
28522: NEG
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28552: LD_ADDR_VAR 0 61
28556: PUSH
28557: LD_INT 0
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: LD_INT 1
28572: NEG
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 1
28590: PUSH
28591: LD_INT 1
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: LD_INT 1
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 1
28610: NEG
28611: PUSH
28612: LD_INT 0
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 1
28621: NEG
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28640: LD_ADDR_VAR 0 62
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 1
28668: PUSH
28669: LD_INT 0
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: NEG
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28728: LD_ADDR_VAR 0 63
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: LD_INT 0
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: LD_INT 1
28748: NEG
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 1
28756: PUSH
28757: LD_INT 0
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: LD_INT 1
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: LD_INT 1
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: NEG
28787: PUSH
28788: LD_INT 0
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 1
28797: NEG
28798: PUSH
28799: LD_INT 1
28801: NEG
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28816: LD_ADDR_VAR 0 64
28820: PUSH
28821: LD_INT 0
28823: PUSH
28824: LD_INT 0
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 0
28833: PUSH
28834: LD_INT 1
28836: NEG
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 1
28844: PUSH
28845: LD_INT 0
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 1
28854: PUSH
28855: LD_INT 1
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: LD_INT 1
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: NEG
28875: PUSH
28876: LD_INT 0
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 1
28885: NEG
28886: PUSH
28887: LD_INT 1
28889: NEG
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: ST_TO_ADDR
// end ; 1 :
28904: GO 34801
28906: LD_INT 1
28908: DOUBLE
28909: EQUAL
28910: IFTRUE 28914
28912: GO 31537
28914: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28915: LD_ADDR_VAR 0 11
28919: PUSH
28920: LD_INT 1
28922: NEG
28923: PUSH
28924: LD_INT 3
28926: NEG
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: LD_INT 3
28937: NEG
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: LD_INT 2
28948: NEG
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: LIST
28958: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28959: LD_ADDR_VAR 0 12
28963: PUSH
28964: LD_INT 2
28966: PUSH
28967: LD_INT 1
28969: NEG
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 3
28977: PUSH
28978: LD_INT 0
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 3
28987: PUSH
28988: LD_INT 1
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: LIST
28999: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29000: LD_ADDR_VAR 0 13
29004: PUSH
29005: LD_INT 3
29007: PUSH
29008: LD_INT 2
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 3
29017: PUSH
29018: LD_INT 3
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 2
29027: PUSH
29028: LD_INT 3
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: LIST
29039: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29040: LD_ADDR_VAR 0 14
29044: PUSH
29045: LD_INT 1
29047: PUSH
29048: LD_INT 3
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: LD_INT 3
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 1
29067: NEG
29068: PUSH
29069: LD_INT 2
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: LIST
29080: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29081: LD_ADDR_VAR 0 15
29085: PUSH
29086: LD_INT 2
29088: NEG
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 3
29099: NEG
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 3
29110: NEG
29111: PUSH
29112: LD_INT 1
29114: NEG
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: LIST
29124: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29125: LD_ADDR_VAR 0 16
29129: PUSH
29130: LD_INT 2
29132: NEG
29133: PUSH
29134: LD_INT 3
29136: NEG
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 3
29144: NEG
29145: PUSH
29146: LD_INT 2
29148: NEG
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 3
29156: NEG
29157: PUSH
29158: LD_INT 3
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: LIST
29170: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29171: LD_ADDR_VAR 0 17
29175: PUSH
29176: LD_INT 1
29178: NEG
29179: PUSH
29180: LD_INT 3
29182: NEG
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: LD_INT 3
29193: NEG
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: LD_INT 2
29204: NEG
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: LIST
29214: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29215: LD_ADDR_VAR 0 18
29219: PUSH
29220: LD_INT 2
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 3
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 3
29243: PUSH
29244: LD_INT 1
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: LIST
29255: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29256: LD_ADDR_VAR 0 19
29260: PUSH
29261: LD_INT 3
29263: PUSH
29264: LD_INT 2
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 3
29273: PUSH
29274: LD_INT 3
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 2
29283: PUSH
29284: LD_INT 3
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: LIST
29295: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29296: LD_ADDR_VAR 0 20
29300: PUSH
29301: LD_INT 1
29303: PUSH
29304: LD_INT 3
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: LD_INT 3
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 1
29323: NEG
29324: PUSH
29325: LD_INT 2
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: LIST
29336: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29337: LD_ADDR_VAR 0 21
29341: PUSH
29342: LD_INT 2
29344: NEG
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 3
29355: NEG
29356: PUSH
29357: LD_INT 0
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 3
29366: NEG
29367: PUSH
29368: LD_INT 1
29370: NEG
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: LIST
29380: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29381: LD_ADDR_VAR 0 22
29385: PUSH
29386: LD_INT 2
29388: NEG
29389: PUSH
29390: LD_INT 3
29392: NEG
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 3
29400: NEG
29401: PUSH
29402: LD_INT 2
29404: NEG
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 3
29412: NEG
29413: PUSH
29414: LD_INT 3
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: LIST
29426: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29427: LD_ADDR_VAR 0 23
29431: PUSH
29432: LD_INT 0
29434: PUSH
29435: LD_INT 3
29437: NEG
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 1
29445: NEG
29446: PUSH
29447: LD_INT 4
29449: NEG
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 1
29457: PUSH
29458: LD_INT 3
29460: NEG
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: LIST
29470: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29471: LD_ADDR_VAR 0 24
29475: PUSH
29476: LD_INT 3
29478: PUSH
29479: LD_INT 0
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 3
29488: PUSH
29489: LD_INT 1
29491: NEG
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 4
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: LIST
29511: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29512: LD_ADDR_VAR 0 25
29516: PUSH
29517: LD_INT 3
29519: PUSH
29520: LD_INT 3
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 4
29529: PUSH
29530: LD_INT 3
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 3
29539: PUSH
29540: LD_INT 4
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: LIST
29551: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29552: LD_ADDR_VAR 0 26
29556: PUSH
29557: LD_INT 0
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: LD_INT 4
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: NEG
29580: PUSH
29581: LD_INT 3
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29593: LD_ADDR_VAR 0 27
29597: PUSH
29598: LD_INT 3
29600: NEG
29601: PUSH
29602: LD_INT 0
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 3
29611: NEG
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 4
29622: NEG
29623: PUSH
29624: LD_INT 1
29626: NEG
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: LIST
29636: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29637: LD_ADDR_VAR 0 28
29641: PUSH
29642: LD_INT 3
29644: NEG
29645: PUSH
29646: LD_INT 3
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 3
29656: NEG
29657: PUSH
29658: LD_INT 4
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 4
29668: NEG
29669: PUSH
29670: LD_INT 3
29672: NEG
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: LIST
29682: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29683: LD_ADDR_VAR 0 29
29687: PUSH
29688: LD_INT 1
29690: NEG
29691: PUSH
29692: LD_INT 3
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: LD_INT 3
29705: NEG
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: LD_INT 2
29716: NEG
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 1
29724: NEG
29725: PUSH
29726: LD_INT 4
29728: NEG
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 0
29736: PUSH
29737: LD_INT 4
29739: NEG
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 1
29747: PUSH
29748: LD_INT 3
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 1
29758: NEG
29759: PUSH
29760: LD_INT 5
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 0
29770: PUSH
29771: LD_INT 5
29773: NEG
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 1
29781: PUSH
29782: LD_INT 4
29784: NEG
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 1
29792: NEG
29793: PUSH
29794: LD_INT 6
29796: NEG
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: LD_INT 6
29807: NEG
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 1
29815: PUSH
29816: LD_INT 5
29818: NEG
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29838: LD_ADDR_VAR 0 30
29842: PUSH
29843: LD_INT 2
29845: PUSH
29846: LD_INT 1
29848: NEG
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 3
29856: PUSH
29857: LD_INT 0
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 3
29866: PUSH
29867: LD_INT 1
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 3
29876: PUSH
29877: LD_INT 1
29879: NEG
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 4
29887: PUSH
29888: LD_INT 0
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 4
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 4
29907: PUSH
29908: LD_INT 1
29910: NEG
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 5
29918: PUSH
29919: LD_INT 0
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 5
29928: PUSH
29929: LD_INT 1
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 5
29938: PUSH
29939: LD_INT 1
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 6
29949: PUSH
29950: LD_INT 0
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 6
29959: PUSH
29960: LD_INT 1
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29981: LD_ADDR_VAR 0 31
29985: PUSH
29986: LD_INT 3
29988: PUSH
29989: LD_INT 2
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 3
29998: PUSH
29999: LD_INT 3
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 2
30008: PUSH
30009: LD_INT 3
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 4
30018: PUSH
30019: LD_INT 3
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 4
30028: PUSH
30029: LD_INT 4
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 3
30038: PUSH
30039: LD_INT 4
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 5
30048: PUSH
30049: LD_INT 4
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 5
30058: PUSH
30059: LD_INT 5
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 4
30068: PUSH
30069: LD_INT 5
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 6
30078: PUSH
30079: LD_INT 5
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 6
30088: PUSH
30089: LD_INT 6
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 5
30098: PUSH
30099: LD_INT 6
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30120: LD_ADDR_VAR 0 32
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: LD_INT 3
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: LD_INT 3
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 1
30147: NEG
30148: PUSH
30149: LD_INT 2
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 1
30158: PUSH
30159: LD_INT 4
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 0
30168: PUSH
30169: LD_INT 4
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 1
30178: NEG
30179: PUSH
30180: LD_INT 3
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 1
30189: PUSH
30190: LD_INT 5
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 0
30199: PUSH
30200: LD_INT 5
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 1
30209: NEG
30210: PUSH
30211: LD_INT 4
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 1
30220: PUSH
30221: LD_INT 6
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 0
30230: PUSH
30231: LD_INT 6
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 1
30240: NEG
30241: PUSH
30242: LD_INT 5
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30263: LD_ADDR_VAR 0 33
30267: PUSH
30268: LD_INT 2
30270: NEG
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 3
30281: NEG
30282: PUSH
30283: LD_INT 0
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 3
30292: NEG
30293: PUSH
30294: LD_INT 1
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 3
30304: NEG
30305: PUSH
30306: LD_INT 1
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 4
30315: NEG
30316: PUSH
30317: LD_INT 0
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 4
30326: NEG
30327: PUSH
30328: LD_INT 1
30330: NEG
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 4
30338: NEG
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 5
30349: NEG
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 5
30360: NEG
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 5
30372: NEG
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 6
30383: NEG
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 6
30394: NEG
30395: PUSH
30396: LD_INT 1
30398: NEG
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30418: LD_ADDR_VAR 0 34
30422: PUSH
30423: LD_INT 2
30425: NEG
30426: PUSH
30427: LD_INT 3
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 3
30437: NEG
30438: PUSH
30439: LD_INT 2
30441: NEG
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 3
30449: NEG
30450: PUSH
30451: LD_INT 3
30453: NEG
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 3
30461: NEG
30462: PUSH
30463: LD_INT 4
30465: NEG
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 4
30473: NEG
30474: PUSH
30475: LD_INT 3
30477: NEG
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 4
30485: NEG
30486: PUSH
30487: LD_INT 4
30489: NEG
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 4
30497: NEG
30498: PUSH
30499: LD_INT 5
30501: NEG
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 5
30509: NEG
30510: PUSH
30511: LD_INT 4
30513: NEG
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 5
30521: NEG
30522: PUSH
30523: LD_INT 5
30525: NEG
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 5
30533: NEG
30534: PUSH
30535: LD_INT 6
30537: NEG
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 6
30545: NEG
30546: PUSH
30547: LD_INT 5
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 6
30557: NEG
30558: PUSH
30559: LD_INT 6
30561: NEG
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30581: LD_ADDR_VAR 0 41
30585: PUSH
30586: LD_INT 0
30588: PUSH
30589: LD_INT 2
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 1
30599: NEG
30600: PUSH
30601: LD_INT 3
30603: NEG
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 1
30611: PUSH
30612: LD_INT 2
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: LIST
30624: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30625: LD_ADDR_VAR 0 42
30629: PUSH
30630: LD_INT 2
30632: PUSH
30633: LD_INT 0
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 2
30642: PUSH
30643: LD_INT 1
30645: NEG
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 3
30653: PUSH
30654: LD_INT 1
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: LIST
30665: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30666: LD_ADDR_VAR 0 43
30670: PUSH
30671: LD_INT 2
30673: PUSH
30674: LD_INT 2
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 3
30683: PUSH
30684: LD_INT 2
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 2
30693: PUSH
30694: LD_INT 3
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30706: LD_ADDR_VAR 0 44
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 1
30723: PUSH
30724: LD_INT 3
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 1
30733: NEG
30734: PUSH
30735: LD_INT 2
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: LIST
30746: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30747: LD_ADDR_VAR 0 45
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: LD_INT 0
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 2
30765: NEG
30766: PUSH
30767: LD_INT 1
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 3
30776: NEG
30777: PUSH
30778: LD_INT 1
30780: NEG
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: LIST
30790: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30791: LD_ADDR_VAR 0 46
30795: PUSH
30796: LD_INT 2
30798: NEG
30799: PUSH
30800: LD_INT 2
30802: NEG
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 2
30810: NEG
30811: PUSH
30812: LD_INT 3
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 3
30822: NEG
30823: PUSH
30824: LD_INT 2
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: LIST
30836: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30837: LD_ADDR_VAR 0 47
30841: PUSH
30842: LD_INT 2
30844: NEG
30845: PUSH
30846: LD_INT 3
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: LD_INT 3
30860: NEG
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30870: LD_ADDR_VAR 0 48
30874: PUSH
30875: LD_INT 1
30877: PUSH
30878: LD_INT 2
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 2
30888: PUSH
30889: LD_INT 1
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30901: LD_ADDR_VAR 0 49
30905: PUSH
30906: LD_INT 3
30908: PUSH
30909: LD_INT 1
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 3
30918: PUSH
30919: LD_INT 2
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30930: LD_ADDR_VAR 0 50
30934: PUSH
30935: LD_INT 2
30937: PUSH
30938: LD_INT 3
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: LD_INT 3
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30959: LD_ADDR_VAR 0 51
30963: PUSH
30964: LD_INT 1
30966: NEG
30967: PUSH
30968: LD_INT 2
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 2
30977: NEG
30978: PUSH
30979: LD_INT 1
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30990: LD_ADDR_VAR 0 52
30994: PUSH
30995: LD_INT 3
30997: NEG
30998: PUSH
30999: LD_INT 1
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 3
31009: NEG
31010: PUSH
31011: LD_INT 2
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31023: LD_ADDR_VAR 0 53
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: LD_INT 3
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 0
31042: PUSH
31043: LD_INT 3
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: LD_INT 2
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: LIST
31066: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31067: LD_ADDR_VAR 0 54
31071: PUSH
31072: LD_INT 2
31074: PUSH
31075: LD_INT 1
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 3
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 3
31095: PUSH
31096: LD_INT 1
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: LIST
31107: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31108: LD_ADDR_VAR 0 55
31112: PUSH
31113: LD_INT 3
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: LD_INT 3
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 2
31135: PUSH
31136: LD_INT 3
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: LIST
31147: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31148: LD_ADDR_VAR 0 56
31152: PUSH
31153: LD_INT 1
31155: PUSH
31156: LD_INT 3
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 0
31165: PUSH
31166: LD_INT 3
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: NEG
31176: PUSH
31177: LD_INT 2
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: LIST
31188: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31189: LD_ADDR_VAR 0 57
31193: PUSH
31194: LD_INT 2
31196: NEG
31197: PUSH
31198: LD_INT 1
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 3
31207: NEG
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 3
31218: NEG
31219: PUSH
31220: LD_INT 1
31222: NEG
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: LIST
31232: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31233: LD_ADDR_VAR 0 58
31237: PUSH
31238: LD_INT 2
31240: NEG
31241: PUSH
31242: LD_INT 3
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 3
31252: NEG
31253: PUSH
31254: LD_INT 2
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 3
31264: NEG
31265: PUSH
31266: LD_INT 3
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: LIST
31278: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31279: LD_ADDR_VAR 0 59
31283: PUSH
31284: LD_INT 1
31286: NEG
31287: PUSH
31288: LD_INT 2
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 0
31298: PUSH
31299: LD_INT 2
31301: NEG
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: LD_INT 1
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31323: LD_ADDR_VAR 0 60
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 2
31341: PUSH
31342: LD_INT 0
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 2
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: LIST
31363: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31364: LD_ADDR_VAR 0 61
31368: PUSH
31369: LD_INT 2
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 2
31381: PUSH
31382: LD_INT 2
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 1
31391: PUSH
31392: LD_INT 2
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: LIST
31403: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31404: LD_ADDR_VAR 0 62
31408: PUSH
31409: LD_INT 1
31411: PUSH
31412: LD_INT 2
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 0
31421: PUSH
31422: LD_INT 2
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: PUSH
31433: LD_INT 1
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31445: LD_ADDR_VAR 0 63
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: LD_INT 1
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: LD_INT 0
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 2
31474: NEG
31475: PUSH
31476: LD_INT 1
31478: NEG
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: LIST
31488: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31489: LD_ADDR_VAR 0 64
31493: PUSH
31494: LD_INT 1
31496: NEG
31497: PUSH
31498: LD_INT 2
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 2
31508: NEG
31509: PUSH
31510: LD_INT 1
31512: NEG
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 2
31520: NEG
31521: PUSH
31522: LD_INT 2
31524: NEG
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: LIST
31534: ST_TO_ADDR
// end ; 2 :
31535: GO 34801
31537: LD_INT 2
31539: DOUBLE
31540: EQUAL
31541: IFTRUE 31545
31543: GO 34800
31545: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31546: LD_ADDR_VAR 0 29
31550: PUSH
31551: LD_INT 4
31553: PUSH
31554: LD_INT 0
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 4
31563: PUSH
31564: LD_INT 1
31566: NEG
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 5
31574: PUSH
31575: LD_INT 0
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 5
31584: PUSH
31585: LD_INT 1
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 4
31594: PUSH
31595: LD_INT 1
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 3
31604: PUSH
31605: LD_INT 0
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 3
31614: PUSH
31615: LD_INT 1
31617: NEG
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 3
31625: PUSH
31626: LD_INT 2
31628: NEG
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 5
31636: PUSH
31637: LD_INT 2
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 3
31646: PUSH
31647: LD_INT 3
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 3
31656: PUSH
31657: LD_INT 2
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 4
31666: PUSH
31667: LD_INT 3
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 4
31676: PUSH
31677: LD_INT 4
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 3
31686: PUSH
31687: LD_INT 4
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 2
31696: PUSH
31697: LD_INT 3
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 2
31706: PUSH
31707: LD_INT 2
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 4
31716: PUSH
31717: LD_INT 2
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 2
31726: PUSH
31727: LD_INT 4
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: LD_INT 4
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: LD_INT 3
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: LD_INT 4
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 1
31766: PUSH
31767: LD_INT 5
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 0
31776: PUSH
31777: LD_INT 5
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 1
31786: NEG
31787: PUSH
31788: LD_INT 4
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: NEG
31798: PUSH
31799: LD_INT 3
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 2
31808: PUSH
31809: LD_INT 5
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 2
31818: NEG
31819: PUSH
31820: LD_INT 3
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 3
31829: NEG
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 3
31840: NEG
31841: PUSH
31842: LD_INT 1
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 2
31852: NEG
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 2
31863: NEG
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 3
31874: NEG
31875: PUSH
31876: LD_INT 1
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 4
31885: NEG
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 4
31896: NEG
31897: PUSH
31898: LD_INT 1
31900: NEG
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 4
31908: NEG
31909: PUSH
31910: LD_INT 2
31912: NEG
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 2
31920: NEG
31921: PUSH
31922: LD_INT 2
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 4
31931: NEG
31932: PUSH
31933: LD_INT 4
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 4
31943: NEG
31944: PUSH
31945: LD_INT 5
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 3
31955: NEG
31956: PUSH
31957: LD_INT 4
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 3
31967: NEG
31968: PUSH
31969: LD_INT 3
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 4
31979: NEG
31980: PUSH
31981: LD_INT 3
31983: NEG
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 5
31991: NEG
31992: PUSH
31993: LD_INT 4
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 5
32003: NEG
32004: PUSH
32005: LD_INT 5
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 3
32015: NEG
32016: PUSH
32017: LD_INT 5
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 5
32027: NEG
32028: PUSH
32029: LD_INT 3
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32084: LD_ADDR_VAR 0 30
32088: PUSH
32089: LD_INT 4
32091: PUSH
32092: LD_INT 4
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 4
32101: PUSH
32102: LD_INT 3
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 5
32111: PUSH
32112: LD_INT 4
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 5
32121: PUSH
32122: LD_INT 5
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 4
32131: PUSH
32132: LD_INT 5
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 3
32141: PUSH
32142: LD_INT 4
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 3
32151: PUSH
32152: LD_INT 3
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 5
32161: PUSH
32162: LD_INT 3
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 3
32171: PUSH
32172: LD_INT 5
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: LD_INT 3
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: LD_INT 2
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 1
32201: PUSH
32202: LD_INT 3
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: LD_INT 4
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: LD_INT 4
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: LD_INT 3
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 1
32242: NEG
32243: PUSH
32244: LD_INT 2
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 2
32253: PUSH
32254: LD_INT 4
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 2
32263: NEG
32264: PUSH
32265: LD_INT 2
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 4
32274: NEG
32275: PUSH
32276: LD_INT 0
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 4
32285: NEG
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 3
32297: NEG
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 3
32308: NEG
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 4
32319: NEG
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 5
32330: NEG
32331: PUSH
32332: LD_INT 0
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 5
32341: NEG
32342: PUSH
32343: LD_INT 1
32345: NEG
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 5
32353: NEG
32354: PUSH
32355: LD_INT 2
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 3
32365: NEG
32366: PUSH
32367: LD_INT 2
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 3
32376: NEG
32377: PUSH
32378: LD_INT 3
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 3
32388: NEG
32389: PUSH
32390: LD_INT 4
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 2
32400: NEG
32401: PUSH
32402: LD_INT 3
32404: NEG
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 2
32412: NEG
32413: PUSH
32414: LD_INT 2
32416: NEG
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 3
32424: NEG
32425: PUSH
32426: LD_INT 2
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 4
32436: NEG
32437: PUSH
32438: LD_INT 3
32440: NEG
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 4
32448: NEG
32449: PUSH
32450: LD_INT 4
32452: NEG
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 2
32460: NEG
32461: PUSH
32462: LD_INT 4
32464: NEG
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 4
32472: NEG
32473: PUSH
32474: LD_INT 2
32476: NEG
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 0
32484: PUSH
32485: LD_INT 4
32487: NEG
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 0
32495: PUSH
32496: LD_INT 5
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 1
32506: PUSH
32507: LD_INT 4
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 1
32517: PUSH
32518: LD_INT 3
32520: NEG
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 0
32528: PUSH
32529: LD_INT 3
32531: NEG
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 1
32539: NEG
32540: PUSH
32541: LD_INT 4
32543: NEG
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 1
32551: NEG
32552: PUSH
32553: LD_INT 5
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 2
32563: PUSH
32564: LD_INT 3
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 2
32574: NEG
32575: PUSH
32576: LD_INT 5
32578: NEG
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32631: LD_ADDR_VAR 0 31
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: LD_INT 4
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 0
32648: PUSH
32649: LD_INT 3
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 1
32658: PUSH
32659: LD_INT 4
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: LD_INT 5
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 0
32678: PUSH
32679: LD_INT 5
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: NEG
32689: PUSH
32690: LD_INT 4
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 1
32699: NEG
32700: PUSH
32701: LD_INT 3
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: PUSH
32711: LD_INT 5
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 2
32720: NEG
32721: PUSH
32722: LD_INT 3
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 3
32731: NEG
32732: PUSH
32733: LD_INT 0
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 3
32742: NEG
32743: PUSH
32744: LD_INT 1
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 2
32754: NEG
32755: PUSH
32756: LD_INT 0
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: LD_INT 1
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 3
32776: NEG
32777: PUSH
32778: LD_INT 1
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 4
32787: NEG
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 4
32798: NEG
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 4
32810: NEG
32811: PUSH
32812: LD_INT 2
32814: NEG
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 2
32822: NEG
32823: PUSH
32824: LD_INT 2
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 4
32833: NEG
32834: PUSH
32835: LD_INT 4
32837: NEG
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 4
32845: NEG
32846: PUSH
32847: LD_INT 5
32849: NEG
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 3
32857: NEG
32858: PUSH
32859: LD_INT 4
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 3
32869: NEG
32870: PUSH
32871: LD_INT 3
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 4
32881: NEG
32882: PUSH
32883: LD_INT 3
32885: NEG
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 5
32893: NEG
32894: PUSH
32895: LD_INT 4
32897: NEG
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 5
32905: NEG
32906: PUSH
32907: LD_INT 5
32909: NEG
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 3
32917: NEG
32918: PUSH
32919: LD_INT 5
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 5
32929: NEG
32930: PUSH
32931: LD_INT 3
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: LD_INT 3
32944: NEG
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: LD_INT 4
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: LD_INT 3
32966: NEG
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: LD_INT 2
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: LD_INT 2
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 1
32996: NEG
32997: PUSH
32998: LD_INT 3
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 1
33008: NEG
33009: PUSH
33010: LD_INT 4
33012: NEG
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 2
33020: PUSH
33021: LD_INT 2
33023: NEG
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 2
33031: NEG
33032: PUSH
33033: LD_INT 4
33035: NEG
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 4
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 4
33053: PUSH
33054: LD_INT 1
33056: NEG
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 5
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 5
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 4
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 3
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 3
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 3
33115: PUSH
33116: LD_INT 2
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 5
33126: PUSH
33127: LD_INT 2
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33181: LD_ADDR_VAR 0 32
33185: PUSH
33186: LD_INT 4
33188: NEG
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 4
33199: NEG
33200: PUSH
33201: LD_INT 1
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 3
33211: NEG
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 3
33222: NEG
33223: PUSH
33224: LD_INT 1
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 4
33233: NEG
33234: PUSH
33235: LD_INT 1
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 5
33244: NEG
33245: PUSH
33246: LD_INT 0
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 5
33255: NEG
33256: PUSH
33257: LD_INT 1
33259: NEG
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 5
33267: NEG
33268: PUSH
33269: LD_INT 2
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 3
33279: NEG
33280: PUSH
33281: LD_INT 2
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 3
33290: NEG
33291: PUSH
33292: LD_INT 3
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 3
33302: NEG
33303: PUSH
33304: LD_INT 4
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: LD_INT 3
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 2
33326: NEG
33327: PUSH
33328: LD_INT 2
33330: NEG
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 3
33338: NEG
33339: PUSH
33340: LD_INT 2
33342: NEG
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 4
33350: NEG
33351: PUSH
33352: LD_INT 3
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 4
33362: NEG
33363: PUSH
33364: LD_INT 4
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 2
33374: NEG
33375: PUSH
33376: LD_INT 4
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 4
33386: NEG
33387: PUSH
33388: LD_INT 2
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 0
33398: PUSH
33399: LD_INT 4
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: LD_INT 5
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 1
33420: PUSH
33421: LD_INT 4
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: LD_INT 3
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 0
33442: PUSH
33443: LD_INT 3
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: NEG
33454: PUSH
33455: LD_INT 4
33457: NEG
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: LD_INT 5
33469: NEG
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 2
33477: PUSH
33478: LD_INT 3
33480: NEG
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 2
33488: NEG
33489: PUSH
33490: LD_INT 5
33492: NEG
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 3
33500: PUSH
33501: LD_INT 0
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 3
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 4
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 4
33531: PUSH
33532: LD_INT 1
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 3
33541: PUSH
33542: LD_INT 1
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: LD_INT 0
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 2
33561: PUSH
33562: LD_INT 1
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: PUSH
33573: LD_INT 2
33575: NEG
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 4
33583: PUSH
33584: LD_INT 2
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 4
33593: PUSH
33594: LD_INT 4
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 4
33603: PUSH
33604: LD_INT 3
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 5
33613: PUSH
33614: LD_INT 4
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 5
33623: PUSH
33624: LD_INT 5
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 4
33633: PUSH
33634: LD_INT 5
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 3
33643: PUSH
33644: LD_INT 4
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 3
33653: PUSH
33654: LD_INT 3
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 5
33663: PUSH
33664: LD_INT 3
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 3
33673: PUSH
33674: LD_INT 5
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33728: LD_ADDR_VAR 0 33
33732: PUSH
33733: LD_INT 4
33735: NEG
33736: PUSH
33737: LD_INT 4
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 4
33747: NEG
33748: PUSH
33749: LD_INT 5
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 3
33759: NEG
33760: PUSH
33761: LD_INT 4
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 3
33771: NEG
33772: PUSH
33773: LD_INT 3
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 4
33783: NEG
33784: PUSH
33785: LD_INT 3
33787: NEG
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 5
33795: NEG
33796: PUSH
33797: LD_INT 4
33799: NEG
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 5
33807: NEG
33808: PUSH
33809: LD_INT 5
33811: NEG
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 3
33819: NEG
33820: PUSH
33821: LD_INT 5
33823: NEG
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 5
33831: NEG
33832: PUSH
33833: LD_INT 3
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: LD_INT 3
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: LD_INT 4
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: LD_INT 3
33868: NEG
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: LD_INT 2
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: LD_INT 2
33890: NEG
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: NEG
33899: PUSH
33900: LD_INT 3
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: NEG
33911: PUSH
33912: LD_INT 4
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: LD_INT 2
33925: NEG
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 2
33933: NEG
33934: PUSH
33935: LD_INT 4
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 4
33945: PUSH
33946: LD_INT 0
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 4
33955: PUSH
33956: LD_INT 1
33958: NEG
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 5
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 5
33976: PUSH
33977: LD_INT 1
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 4
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 3
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 3
34006: PUSH
34007: LD_INT 1
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 3
34017: PUSH
34018: LD_INT 2
34020: NEG
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 5
34028: PUSH
34029: LD_INT 2
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 3
34038: PUSH
34039: LD_INT 3
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 3
34048: PUSH
34049: LD_INT 2
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 4
34058: PUSH
34059: LD_INT 3
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 4
34068: PUSH
34069: LD_INT 4
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 3
34078: PUSH
34079: LD_INT 4
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: PUSH
34089: LD_INT 3
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 2
34098: PUSH
34099: LD_INT 2
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 4
34108: PUSH
34109: LD_INT 2
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 2
34118: PUSH
34119: LD_INT 4
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 0
34128: PUSH
34129: LD_INT 4
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: LD_INT 3
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: PUSH
34149: LD_INT 4
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: LD_INT 5
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 0
34168: PUSH
34169: LD_INT 5
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 1
34178: NEG
34179: PUSH
34180: LD_INT 4
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: LD_INT 3
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 2
34200: PUSH
34201: LD_INT 5
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 2
34210: NEG
34211: PUSH
34212: LD_INT 3
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34266: LD_ADDR_VAR 0 34
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: LD_INT 4
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: LD_INT 5
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: LD_INT 4
34298: NEG
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: LD_INT 3
34309: NEG
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: LD_INT 3
34320: NEG
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 1
34328: NEG
34329: PUSH
34330: LD_INT 4
34332: NEG
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: PUSH
34342: LD_INT 5
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 2
34352: PUSH
34353: LD_INT 3
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 2
34363: NEG
34364: PUSH
34365: LD_INT 5
34367: NEG
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 3
34375: PUSH
34376: LD_INT 0
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 3
34385: PUSH
34386: LD_INT 1
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 4
34396: PUSH
34397: LD_INT 0
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 4
34406: PUSH
34407: LD_INT 1
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 3
34416: PUSH
34417: LD_INT 1
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 2
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 2
34447: PUSH
34448: LD_INT 2
34450: NEG
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 4
34458: PUSH
34459: LD_INT 2
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 4
34468: PUSH
34469: LD_INT 4
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 4
34478: PUSH
34479: LD_INT 3
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 5
34488: PUSH
34489: LD_INT 4
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 5
34498: PUSH
34499: LD_INT 5
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 4
34508: PUSH
34509: LD_INT 5
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 3
34518: PUSH
34519: LD_INT 4
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 3
34528: PUSH
34529: LD_INT 3
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 5
34538: PUSH
34539: LD_INT 3
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 3
34548: PUSH
34549: LD_INT 5
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 0
34558: PUSH
34559: LD_INT 3
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: LD_INT 2
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: LD_INT 3
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 1
34588: PUSH
34589: LD_INT 4
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 0
34598: PUSH
34599: LD_INT 4
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 1
34608: NEG
34609: PUSH
34610: LD_INT 3
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 1
34619: NEG
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: LD_INT 4
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 2
34640: NEG
34641: PUSH
34642: LD_INT 2
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 4
34651: NEG
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 4
34662: NEG
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 3
34674: NEG
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 3
34685: NEG
34686: PUSH
34687: LD_INT 1
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 4
34696: NEG
34697: PUSH
34698: LD_INT 1
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 5
34707: NEG
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 5
34718: NEG
34719: PUSH
34720: LD_INT 1
34722: NEG
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 5
34730: NEG
34731: PUSH
34732: LD_INT 2
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 3
34742: NEG
34743: PUSH
34744: LD_INT 2
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: ST_TO_ADDR
// end ; end ;
34798: GO 34801
34800: POP
// case btype of b_depot , b_warehouse :
34801: LD_VAR 0 1
34805: PUSH
34806: LD_INT 0
34808: DOUBLE
34809: EQUAL
34810: IFTRUE 34820
34812: LD_INT 1
34814: DOUBLE
34815: EQUAL
34816: IFTRUE 34820
34818: GO 35021
34820: POP
// case nation of nation_american :
34821: LD_VAR 0 5
34825: PUSH
34826: LD_INT 1
34828: DOUBLE
34829: EQUAL
34830: IFTRUE 34834
34832: GO 34890
34834: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34835: LD_ADDR_VAR 0 9
34839: PUSH
34840: LD_VAR 0 11
34844: PUSH
34845: LD_VAR 0 12
34849: PUSH
34850: LD_VAR 0 13
34854: PUSH
34855: LD_VAR 0 14
34859: PUSH
34860: LD_VAR 0 15
34864: PUSH
34865: LD_VAR 0 16
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: PUSH
34878: LD_VAR 0 4
34882: PUSH
34883: LD_INT 1
34885: PLUS
34886: ARRAY
34887: ST_TO_ADDR
34888: GO 35019
34890: LD_INT 2
34892: DOUBLE
34893: EQUAL
34894: IFTRUE 34898
34896: GO 34954
34898: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34899: LD_ADDR_VAR 0 9
34903: PUSH
34904: LD_VAR 0 17
34908: PUSH
34909: LD_VAR 0 18
34913: PUSH
34914: LD_VAR 0 19
34918: PUSH
34919: LD_VAR 0 20
34923: PUSH
34924: LD_VAR 0 21
34928: PUSH
34929: LD_VAR 0 22
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: PUSH
34942: LD_VAR 0 4
34946: PUSH
34947: LD_INT 1
34949: PLUS
34950: ARRAY
34951: ST_TO_ADDR
34952: GO 35019
34954: LD_INT 3
34956: DOUBLE
34957: EQUAL
34958: IFTRUE 34962
34960: GO 35018
34962: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34963: LD_ADDR_VAR 0 9
34967: PUSH
34968: LD_VAR 0 23
34972: PUSH
34973: LD_VAR 0 24
34977: PUSH
34978: LD_VAR 0 25
34982: PUSH
34983: LD_VAR 0 26
34987: PUSH
34988: LD_VAR 0 27
34992: PUSH
34993: LD_VAR 0 28
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: PUSH
35006: LD_VAR 0 4
35010: PUSH
35011: LD_INT 1
35013: PLUS
35014: ARRAY
35015: ST_TO_ADDR
35016: GO 35019
35018: POP
35019: GO 35574
35021: LD_INT 2
35023: DOUBLE
35024: EQUAL
35025: IFTRUE 35035
35027: LD_INT 3
35029: DOUBLE
35030: EQUAL
35031: IFTRUE 35035
35033: GO 35091
35035: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35036: LD_ADDR_VAR 0 9
35040: PUSH
35041: LD_VAR 0 29
35045: PUSH
35046: LD_VAR 0 30
35050: PUSH
35051: LD_VAR 0 31
35055: PUSH
35056: LD_VAR 0 32
35060: PUSH
35061: LD_VAR 0 33
35065: PUSH
35066: LD_VAR 0 34
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: PUSH
35079: LD_VAR 0 4
35083: PUSH
35084: LD_INT 1
35086: PLUS
35087: ARRAY
35088: ST_TO_ADDR
35089: GO 35574
35091: LD_INT 16
35093: DOUBLE
35094: EQUAL
35095: IFTRUE 35153
35097: LD_INT 17
35099: DOUBLE
35100: EQUAL
35101: IFTRUE 35153
35103: LD_INT 18
35105: DOUBLE
35106: EQUAL
35107: IFTRUE 35153
35109: LD_INT 19
35111: DOUBLE
35112: EQUAL
35113: IFTRUE 35153
35115: LD_INT 22
35117: DOUBLE
35118: EQUAL
35119: IFTRUE 35153
35121: LD_INT 20
35123: DOUBLE
35124: EQUAL
35125: IFTRUE 35153
35127: LD_INT 21
35129: DOUBLE
35130: EQUAL
35131: IFTRUE 35153
35133: LD_INT 23
35135: DOUBLE
35136: EQUAL
35137: IFTRUE 35153
35139: LD_INT 24
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35153
35145: LD_INT 25
35147: DOUBLE
35148: EQUAL
35149: IFTRUE 35153
35151: GO 35209
35153: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35154: LD_ADDR_VAR 0 9
35158: PUSH
35159: LD_VAR 0 35
35163: PUSH
35164: LD_VAR 0 36
35168: PUSH
35169: LD_VAR 0 37
35173: PUSH
35174: LD_VAR 0 38
35178: PUSH
35179: LD_VAR 0 39
35183: PUSH
35184: LD_VAR 0 40
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: PUSH
35197: LD_VAR 0 4
35201: PUSH
35202: LD_INT 1
35204: PLUS
35205: ARRAY
35206: ST_TO_ADDR
35207: GO 35574
35209: LD_INT 6
35211: DOUBLE
35212: EQUAL
35213: IFTRUE 35265
35215: LD_INT 7
35217: DOUBLE
35218: EQUAL
35219: IFTRUE 35265
35221: LD_INT 8
35223: DOUBLE
35224: EQUAL
35225: IFTRUE 35265
35227: LD_INT 13
35229: DOUBLE
35230: EQUAL
35231: IFTRUE 35265
35233: LD_INT 12
35235: DOUBLE
35236: EQUAL
35237: IFTRUE 35265
35239: LD_INT 15
35241: DOUBLE
35242: EQUAL
35243: IFTRUE 35265
35245: LD_INT 11
35247: DOUBLE
35248: EQUAL
35249: IFTRUE 35265
35251: LD_INT 14
35253: DOUBLE
35254: EQUAL
35255: IFTRUE 35265
35257: LD_INT 10
35259: DOUBLE
35260: EQUAL
35261: IFTRUE 35265
35263: GO 35321
35265: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35266: LD_ADDR_VAR 0 9
35270: PUSH
35271: LD_VAR 0 41
35275: PUSH
35276: LD_VAR 0 42
35280: PUSH
35281: LD_VAR 0 43
35285: PUSH
35286: LD_VAR 0 44
35290: PUSH
35291: LD_VAR 0 45
35295: PUSH
35296: LD_VAR 0 46
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: PUSH
35309: LD_VAR 0 4
35313: PUSH
35314: LD_INT 1
35316: PLUS
35317: ARRAY
35318: ST_TO_ADDR
35319: GO 35574
35321: LD_INT 36
35323: DOUBLE
35324: EQUAL
35325: IFTRUE 35329
35327: GO 35385
35329: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35330: LD_ADDR_VAR 0 9
35334: PUSH
35335: LD_VAR 0 47
35339: PUSH
35340: LD_VAR 0 48
35344: PUSH
35345: LD_VAR 0 49
35349: PUSH
35350: LD_VAR 0 50
35354: PUSH
35355: LD_VAR 0 51
35359: PUSH
35360: LD_VAR 0 52
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: PUSH
35373: LD_VAR 0 4
35377: PUSH
35378: LD_INT 1
35380: PLUS
35381: ARRAY
35382: ST_TO_ADDR
35383: GO 35574
35385: LD_INT 4
35387: DOUBLE
35388: EQUAL
35389: IFTRUE 35411
35391: LD_INT 5
35393: DOUBLE
35394: EQUAL
35395: IFTRUE 35411
35397: LD_INT 34
35399: DOUBLE
35400: EQUAL
35401: IFTRUE 35411
35403: LD_INT 37
35405: DOUBLE
35406: EQUAL
35407: IFTRUE 35411
35409: GO 35467
35411: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35412: LD_ADDR_VAR 0 9
35416: PUSH
35417: LD_VAR 0 53
35421: PUSH
35422: LD_VAR 0 54
35426: PUSH
35427: LD_VAR 0 55
35431: PUSH
35432: LD_VAR 0 56
35436: PUSH
35437: LD_VAR 0 57
35441: PUSH
35442: LD_VAR 0 58
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: PUSH
35455: LD_VAR 0 4
35459: PUSH
35460: LD_INT 1
35462: PLUS
35463: ARRAY
35464: ST_TO_ADDR
35465: GO 35574
35467: LD_INT 31
35469: DOUBLE
35470: EQUAL
35471: IFTRUE 35517
35473: LD_INT 32
35475: DOUBLE
35476: EQUAL
35477: IFTRUE 35517
35479: LD_INT 33
35481: DOUBLE
35482: EQUAL
35483: IFTRUE 35517
35485: LD_INT 27
35487: DOUBLE
35488: EQUAL
35489: IFTRUE 35517
35491: LD_INT 26
35493: DOUBLE
35494: EQUAL
35495: IFTRUE 35517
35497: LD_INT 28
35499: DOUBLE
35500: EQUAL
35501: IFTRUE 35517
35503: LD_INT 29
35505: DOUBLE
35506: EQUAL
35507: IFTRUE 35517
35509: LD_INT 30
35511: DOUBLE
35512: EQUAL
35513: IFTRUE 35517
35515: GO 35573
35517: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35518: LD_ADDR_VAR 0 9
35522: PUSH
35523: LD_VAR 0 59
35527: PUSH
35528: LD_VAR 0 60
35532: PUSH
35533: LD_VAR 0 61
35537: PUSH
35538: LD_VAR 0 62
35542: PUSH
35543: LD_VAR 0 63
35547: PUSH
35548: LD_VAR 0 64
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: PUSH
35561: LD_VAR 0 4
35565: PUSH
35566: LD_INT 1
35568: PLUS
35569: ARRAY
35570: ST_TO_ADDR
35571: GO 35574
35573: POP
// temp_list2 = [ ] ;
35574: LD_ADDR_VAR 0 10
35578: PUSH
35579: EMPTY
35580: ST_TO_ADDR
// for i in temp_list do
35581: LD_ADDR_VAR 0 8
35585: PUSH
35586: LD_VAR 0 9
35590: PUSH
35591: FOR_IN
35592: IFFALSE 35644
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35594: LD_ADDR_VAR 0 10
35598: PUSH
35599: LD_VAR 0 10
35603: PUSH
35604: LD_VAR 0 8
35608: PUSH
35609: LD_INT 1
35611: ARRAY
35612: PUSH
35613: LD_VAR 0 2
35617: PLUS
35618: PUSH
35619: LD_VAR 0 8
35623: PUSH
35624: LD_INT 2
35626: ARRAY
35627: PUSH
35628: LD_VAR 0 3
35632: PLUS
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: EMPTY
35639: LIST
35640: ADD
35641: ST_TO_ADDR
35642: GO 35591
35644: POP
35645: POP
// result = temp_list2 ;
35646: LD_ADDR_VAR 0 7
35650: PUSH
35651: LD_VAR 0 10
35655: ST_TO_ADDR
// end ;
35656: LD_VAR 0 7
35660: RET
// export function EnemyInRange ( unit , dist ) ; begin
35661: LD_INT 0
35663: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35664: LD_ADDR_VAR 0 3
35668: PUSH
35669: LD_VAR 0 1
35673: PPUSH
35674: CALL_OW 255
35678: PPUSH
35679: LD_VAR 0 1
35683: PPUSH
35684: CALL_OW 250
35688: PPUSH
35689: LD_VAR 0 1
35693: PPUSH
35694: CALL_OW 251
35698: PPUSH
35699: LD_VAR 0 2
35703: PPUSH
35704: CALL 9034 0 4
35708: PUSH
35709: LD_INT 4
35711: ARRAY
35712: ST_TO_ADDR
// end ;
35713: LD_VAR 0 3
35717: RET
// export function PlayerSeeMe ( unit ) ; begin
35718: LD_INT 0
35720: PPUSH
// result := See ( your_side , unit ) ;
35721: LD_ADDR_VAR 0 2
35725: PUSH
35726: LD_OWVAR 2
35730: PPUSH
35731: LD_VAR 0 1
35735: PPUSH
35736: CALL_OW 292
35740: ST_TO_ADDR
// end ;
35741: LD_VAR 0 2
35745: RET
// export function ReverseDir ( unit ) ; begin
35746: LD_INT 0
35748: PPUSH
// if not unit then
35749: LD_VAR 0 1
35753: NOT
35754: IFFALSE 35758
// exit ;
35756: GO 35781
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35758: LD_ADDR_VAR 0 2
35762: PUSH
35763: LD_VAR 0 1
35767: PPUSH
35768: CALL_OW 254
35772: PUSH
35773: LD_INT 3
35775: PLUS
35776: PUSH
35777: LD_INT 6
35779: MOD
35780: ST_TO_ADDR
// end ;
35781: LD_VAR 0 2
35785: RET
// export function ReverseArray ( array ) ; var i ; begin
35786: LD_INT 0
35788: PPUSH
35789: PPUSH
// if not array then
35790: LD_VAR 0 1
35794: NOT
35795: IFFALSE 35799
// exit ;
35797: GO 35854
// result := [ ] ;
35799: LD_ADDR_VAR 0 2
35803: PUSH
35804: EMPTY
35805: ST_TO_ADDR
// for i := array downto 1 do
35806: LD_ADDR_VAR 0 3
35810: PUSH
35811: DOUBLE
35812: LD_VAR 0 1
35816: INC
35817: ST_TO_ADDR
35818: LD_INT 1
35820: PUSH
35821: FOR_DOWNTO
35822: IFFALSE 35852
// result := Join ( result , array [ i ] ) ;
35824: LD_ADDR_VAR 0 2
35828: PUSH
35829: LD_VAR 0 2
35833: PPUSH
35834: LD_VAR 0 1
35838: PUSH
35839: LD_VAR 0 3
35843: ARRAY
35844: PPUSH
35845: CALL 40499 0 2
35849: ST_TO_ADDR
35850: GO 35821
35852: POP
35853: POP
// end ;
35854: LD_VAR 0 2
35858: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35859: LD_INT 0
35861: PPUSH
35862: PPUSH
35863: PPUSH
35864: PPUSH
35865: PPUSH
35866: PPUSH
// if not unit or not hexes then
35867: LD_VAR 0 1
35871: NOT
35872: PUSH
35873: LD_VAR 0 2
35877: NOT
35878: OR
35879: IFFALSE 35883
// exit ;
35881: GO 36006
// dist := 9999 ;
35883: LD_ADDR_VAR 0 5
35887: PUSH
35888: LD_INT 9999
35890: ST_TO_ADDR
// for i = 1 to hexes do
35891: LD_ADDR_VAR 0 4
35895: PUSH
35896: DOUBLE
35897: LD_INT 1
35899: DEC
35900: ST_TO_ADDR
35901: LD_VAR 0 2
35905: PUSH
35906: FOR_TO
35907: IFFALSE 35994
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35909: LD_ADDR_VAR 0 6
35913: PUSH
35914: LD_VAR 0 1
35918: PPUSH
35919: LD_VAR 0 2
35923: PUSH
35924: LD_VAR 0 4
35928: ARRAY
35929: PUSH
35930: LD_INT 1
35932: ARRAY
35933: PPUSH
35934: LD_VAR 0 2
35938: PUSH
35939: LD_VAR 0 4
35943: ARRAY
35944: PUSH
35945: LD_INT 2
35947: ARRAY
35948: PPUSH
35949: CALL_OW 297
35953: ST_TO_ADDR
// if tdist < dist then
35954: LD_VAR 0 6
35958: PUSH
35959: LD_VAR 0 5
35963: LESS
35964: IFFALSE 35992
// begin hex := hexes [ i ] ;
35966: LD_ADDR_VAR 0 8
35970: PUSH
35971: LD_VAR 0 2
35975: PUSH
35976: LD_VAR 0 4
35980: ARRAY
35981: ST_TO_ADDR
// dist := tdist ;
35982: LD_ADDR_VAR 0 5
35986: PUSH
35987: LD_VAR 0 6
35991: ST_TO_ADDR
// end ; end ;
35992: GO 35906
35994: POP
35995: POP
// result := hex ;
35996: LD_ADDR_VAR 0 3
36000: PUSH
36001: LD_VAR 0 8
36005: ST_TO_ADDR
// end ;
36006: LD_VAR 0 3
36010: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36011: LD_INT 0
36013: PPUSH
36014: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36015: LD_VAR 0 1
36019: NOT
36020: PUSH
36021: LD_VAR 0 1
36025: PUSH
36026: LD_INT 21
36028: PUSH
36029: LD_INT 2
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 23
36038: PUSH
36039: LD_INT 2
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PPUSH
36050: CALL_OW 69
36054: IN
36055: NOT
36056: OR
36057: IFFALSE 36061
// exit ;
36059: GO 36108
// for i = 1 to 3 do
36061: LD_ADDR_VAR 0 3
36065: PUSH
36066: DOUBLE
36067: LD_INT 1
36069: DEC
36070: ST_TO_ADDR
36071: LD_INT 3
36073: PUSH
36074: FOR_TO
36075: IFFALSE 36106
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36077: LD_VAR 0 1
36081: PPUSH
36082: CALL_OW 250
36086: PPUSH
36087: LD_VAR 0 1
36091: PPUSH
36092: CALL_OW 251
36096: PPUSH
36097: LD_INT 1
36099: PPUSH
36100: CALL_OW 453
36104: GO 36074
36106: POP
36107: POP
// end ;
36108: LD_VAR 0 2
36112: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36113: LD_INT 0
36115: PPUSH
36116: PPUSH
36117: PPUSH
36118: PPUSH
36119: PPUSH
36120: PPUSH
// if not unit or not enemy_unit then
36121: LD_VAR 0 1
36125: NOT
36126: PUSH
36127: LD_VAR 0 2
36131: NOT
36132: OR
36133: IFFALSE 36137
// exit ;
36135: GO 36604
// if GetLives ( i ) < 250 then
36137: LD_VAR 0 4
36141: PPUSH
36142: CALL_OW 256
36146: PUSH
36147: LD_INT 250
36149: LESS
36150: IFFALSE 36163
// begin ComAutodestruct ( i ) ;
36152: LD_VAR 0 4
36156: PPUSH
36157: CALL 36011 0 1
// exit ;
36161: GO 36604
// end ; x := GetX ( enemy_unit ) ;
36163: LD_ADDR_VAR 0 7
36167: PUSH
36168: LD_VAR 0 2
36172: PPUSH
36173: CALL_OW 250
36177: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36178: LD_ADDR_VAR 0 8
36182: PUSH
36183: LD_VAR 0 2
36187: PPUSH
36188: CALL_OW 251
36192: ST_TO_ADDR
// if not x or not y then
36193: LD_VAR 0 7
36197: NOT
36198: PUSH
36199: LD_VAR 0 8
36203: NOT
36204: OR
36205: IFFALSE 36209
// exit ;
36207: GO 36604
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36209: LD_ADDR_VAR 0 6
36213: PUSH
36214: LD_VAR 0 7
36218: PPUSH
36219: LD_INT 0
36221: PPUSH
36222: LD_INT 4
36224: PPUSH
36225: CALL_OW 272
36229: PUSH
36230: LD_VAR 0 8
36234: PPUSH
36235: LD_INT 0
36237: PPUSH
36238: LD_INT 4
36240: PPUSH
36241: CALL_OW 273
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_VAR 0 7
36254: PPUSH
36255: LD_INT 1
36257: PPUSH
36258: LD_INT 4
36260: PPUSH
36261: CALL_OW 272
36265: PUSH
36266: LD_VAR 0 8
36270: PPUSH
36271: LD_INT 1
36273: PPUSH
36274: LD_INT 4
36276: PPUSH
36277: CALL_OW 273
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_VAR 0 7
36290: PPUSH
36291: LD_INT 2
36293: PPUSH
36294: LD_INT 4
36296: PPUSH
36297: CALL_OW 272
36301: PUSH
36302: LD_VAR 0 8
36306: PPUSH
36307: LD_INT 2
36309: PPUSH
36310: LD_INT 4
36312: PPUSH
36313: CALL_OW 273
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_VAR 0 7
36326: PPUSH
36327: LD_INT 3
36329: PPUSH
36330: LD_INT 4
36332: PPUSH
36333: CALL_OW 272
36337: PUSH
36338: LD_VAR 0 8
36342: PPUSH
36343: LD_INT 3
36345: PPUSH
36346: LD_INT 4
36348: PPUSH
36349: CALL_OW 273
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_VAR 0 7
36362: PPUSH
36363: LD_INT 4
36365: PPUSH
36366: LD_INT 4
36368: PPUSH
36369: CALL_OW 272
36373: PUSH
36374: LD_VAR 0 8
36378: PPUSH
36379: LD_INT 4
36381: PPUSH
36382: LD_INT 4
36384: PPUSH
36385: CALL_OW 273
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_VAR 0 7
36398: PPUSH
36399: LD_INT 5
36401: PPUSH
36402: LD_INT 4
36404: PPUSH
36405: CALL_OW 272
36409: PUSH
36410: LD_VAR 0 8
36414: PPUSH
36415: LD_INT 5
36417: PPUSH
36418: LD_INT 4
36420: PPUSH
36421: CALL_OW 273
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: ST_TO_ADDR
// for i = tmp downto 1 do
36438: LD_ADDR_VAR 0 4
36442: PUSH
36443: DOUBLE
36444: LD_VAR 0 6
36448: INC
36449: ST_TO_ADDR
36450: LD_INT 1
36452: PUSH
36453: FOR_DOWNTO
36454: IFFALSE 36555
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36456: LD_VAR 0 6
36460: PUSH
36461: LD_VAR 0 4
36465: ARRAY
36466: PUSH
36467: LD_INT 1
36469: ARRAY
36470: PPUSH
36471: LD_VAR 0 6
36475: PUSH
36476: LD_VAR 0 4
36480: ARRAY
36481: PUSH
36482: LD_INT 2
36484: ARRAY
36485: PPUSH
36486: CALL_OW 488
36490: NOT
36491: PUSH
36492: LD_VAR 0 6
36496: PUSH
36497: LD_VAR 0 4
36501: ARRAY
36502: PUSH
36503: LD_INT 1
36505: ARRAY
36506: PPUSH
36507: LD_VAR 0 6
36511: PUSH
36512: LD_VAR 0 4
36516: ARRAY
36517: PUSH
36518: LD_INT 2
36520: ARRAY
36521: PPUSH
36522: CALL_OW 428
36526: PUSH
36527: LD_INT 0
36529: NONEQUAL
36530: OR
36531: IFFALSE 36553
// tmp := Delete ( tmp , i ) ;
36533: LD_ADDR_VAR 0 6
36537: PUSH
36538: LD_VAR 0 6
36542: PPUSH
36543: LD_VAR 0 4
36547: PPUSH
36548: CALL_OW 3
36552: ST_TO_ADDR
36553: GO 36453
36555: POP
36556: POP
// j := GetClosestHex ( unit , tmp ) ;
36557: LD_ADDR_VAR 0 5
36561: PUSH
36562: LD_VAR 0 1
36566: PPUSH
36567: LD_VAR 0 6
36571: PPUSH
36572: CALL 35859 0 2
36576: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36577: LD_VAR 0 1
36581: PPUSH
36582: LD_VAR 0 5
36586: PUSH
36587: LD_INT 1
36589: ARRAY
36590: PPUSH
36591: LD_VAR 0 5
36595: PUSH
36596: LD_INT 2
36598: ARRAY
36599: PPUSH
36600: CALL_OW 111
// end ;
36604: LD_VAR 0 3
36608: RET
// export function PrepareApemanSoldier ( ) ; begin
36609: LD_INT 0
36611: PPUSH
// uc_nation := 0 ;
36612: LD_ADDR_OWVAR 21
36616: PUSH
36617: LD_INT 0
36619: ST_TO_ADDR
// hc_sex := sex_male ;
36620: LD_ADDR_OWVAR 27
36624: PUSH
36625: LD_INT 1
36627: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36628: LD_ADDR_OWVAR 28
36632: PUSH
36633: LD_INT 15
36635: ST_TO_ADDR
// hc_gallery :=  ;
36636: LD_ADDR_OWVAR 33
36640: PUSH
36641: LD_STRING 
36643: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36644: LD_ADDR_OWVAR 31
36648: PUSH
36649: LD_INT 0
36651: PPUSH
36652: LD_INT 3
36654: PPUSH
36655: CALL_OW 12
36659: PUSH
36660: LD_INT 0
36662: PPUSH
36663: LD_INT 3
36665: PPUSH
36666: CALL_OW 12
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: ST_TO_ADDR
// end ;
36683: LD_VAR 0 1
36687: RET
// export function PrepareApemanEngineer ( ) ; begin
36688: LD_INT 0
36690: PPUSH
// uc_nation := 0 ;
36691: LD_ADDR_OWVAR 21
36695: PUSH
36696: LD_INT 0
36698: ST_TO_ADDR
// hc_sex := sex_male ;
36699: LD_ADDR_OWVAR 27
36703: PUSH
36704: LD_INT 1
36706: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36707: LD_ADDR_OWVAR 28
36711: PUSH
36712: LD_INT 16
36714: ST_TO_ADDR
// hc_gallery :=  ;
36715: LD_ADDR_OWVAR 33
36719: PUSH
36720: LD_STRING 
36722: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36723: LD_ADDR_OWVAR 31
36727: PUSH
36728: LD_INT 0
36730: PPUSH
36731: LD_INT 3
36733: PPUSH
36734: CALL_OW 12
36738: PUSH
36739: LD_INT 0
36741: PPUSH
36742: LD_INT 3
36744: PPUSH
36745: CALL_OW 12
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: ST_TO_ADDR
// end ;
36762: LD_VAR 0 1
36766: RET
// export function PrepareApeman ( agressivity ) ; begin
36767: LD_INT 0
36769: PPUSH
// uc_side := 0 ;
36770: LD_ADDR_OWVAR 20
36774: PUSH
36775: LD_INT 0
36777: ST_TO_ADDR
// uc_nation := 0 ;
36778: LD_ADDR_OWVAR 21
36782: PUSH
36783: LD_INT 0
36785: ST_TO_ADDR
// hc_sex := sex_male ;
36786: LD_ADDR_OWVAR 27
36790: PUSH
36791: LD_INT 1
36793: ST_TO_ADDR
// hc_class := class_apeman ;
36794: LD_ADDR_OWVAR 28
36798: PUSH
36799: LD_INT 12
36801: ST_TO_ADDR
// hc_gallery :=  ;
36802: LD_ADDR_OWVAR 33
36806: PUSH
36807: LD_STRING 
36809: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36810: LD_ADDR_OWVAR 35
36814: PUSH
36815: LD_VAR 0 1
36819: NEG
36820: PPUSH
36821: LD_VAR 0 1
36825: PPUSH
36826: CALL_OW 12
36830: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36831: LD_ADDR_OWVAR 31
36835: PUSH
36836: LD_INT 0
36838: PPUSH
36839: LD_INT 3
36841: PPUSH
36842: CALL_OW 12
36846: PUSH
36847: LD_INT 0
36849: PPUSH
36850: LD_INT 3
36852: PPUSH
36853: CALL_OW 12
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: ST_TO_ADDR
// end ;
36870: LD_VAR 0 2
36874: RET
// export function PrepareTiger ( agressivity ) ; begin
36875: LD_INT 0
36877: PPUSH
// uc_side := 0 ;
36878: LD_ADDR_OWVAR 20
36882: PUSH
36883: LD_INT 0
36885: ST_TO_ADDR
// uc_nation := 0 ;
36886: LD_ADDR_OWVAR 21
36890: PUSH
36891: LD_INT 0
36893: ST_TO_ADDR
// hc_class := class_tiger ;
36894: LD_ADDR_OWVAR 28
36898: PUSH
36899: LD_INT 14
36901: ST_TO_ADDR
// hc_gallery :=  ;
36902: LD_ADDR_OWVAR 33
36906: PUSH
36907: LD_STRING 
36909: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36910: LD_ADDR_OWVAR 35
36914: PUSH
36915: LD_VAR 0 1
36919: NEG
36920: PPUSH
36921: LD_VAR 0 1
36925: PPUSH
36926: CALL_OW 12
36930: ST_TO_ADDR
// end ;
36931: LD_VAR 0 2
36935: RET
// export function PrepareEnchidna ( ) ; begin
36936: LD_INT 0
36938: PPUSH
// uc_side := 0 ;
36939: LD_ADDR_OWVAR 20
36943: PUSH
36944: LD_INT 0
36946: ST_TO_ADDR
// uc_nation := 0 ;
36947: LD_ADDR_OWVAR 21
36951: PUSH
36952: LD_INT 0
36954: ST_TO_ADDR
// hc_class := class_baggie ;
36955: LD_ADDR_OWVAR 28
36959: PUSH
36960: LD_INT 13
36962: ST_TO_ADDR
// hc_gallery :=  ;
36963: LD_ADDR_OWVAR 33
36967: PUSH
36968: LD_STRING 
36970: ST_TO_ADDR
// end ;
36971: LD_VAR 0 1
36975: RET
// export function PrepareFrog ( ) ; begin
36976: LD_INT 0
36978: PPUSH
// uc_side := 0 ;
36979: LD_ADDR_OWVAR 20
36983: PUSH
36984: LD_INT 0
36986: ST_TO_ADDR
// uc_nation := 0 ;
36987: LD_ADDR_OWVAR 21
36991: PUSH
36992: LD_INT 0
36994: ST_TO_ADDR
// hc_class := class_frog ;
36995: LD_ADDR_OWVAR 28
36999: PUSH
37000: LD_INT 19
37002: ST_TO_ADDR
// hc_gallery :=  ;
37003: LD_ADDR_OWVAR 33
37007: PUSH
37008: LD_STRING 
37010: ST_TO_ADDR
// end ;
37011: LD_VAR 0 1
37015: RET
// export function PrepareFish ( ) ; begin
37016: LD_INT 0
37018: PPUSH
// uc_side := 0 ;
37019: LD_ADDR_OWVAR 20
37023: PUSH
37024: LD_INT 0
37026: ST_TO_ADDR
// uc_nation := 0 ;
37027: LD_ADDR_OWVAR 21
37031: PUSH
37032: LD_INT 0
37034: ST_TO_ADDR
// hc_class := class_fish ;
37035: LD_ADDR_OWVAR 28
37039: PUSH
37040: LD_INT 20
37042: ST_TO_ADDR
// hc_gallery :=  ;
37043: LD_ADDR_OWVAR 33
37047: PUSH
37048: LD_STRING 
37050: ST_TO_ADDR
// end ;
37051: LD_VAR 0 1
37055: RET
// export function PrepareBird ( ) ; begin
37056: LD_INT 0
37058: PPUSH
// uc_side := 0 ;
37059: LD_ADDR_OWVAR 20
37063: PUSH
37064: LD_INT 0
37066: ST_TO_ADDR
// uc_nation := 0 ;
37067: LD_ADDR_OWVAR 21
37071: PUSH
37072: LD_INT 0
37074: ST_TO_ADDR
// hc_class := class_phororhacos ;
37075: LD_ADDR_OWVAR 28
37079: PUSH
37080: LD_INT 18
37082: ST_TO_ADDR
// hc_gallery :=  ;
37083: LD_ADDR_OWVAR 33
37087: PUSH
37088: LD_STRING 
37090: ST_TO_ADDR
// end ;
37091: LD_VAR 0 1
37095: RET
// export function PrepareHorse ( ) ; begin
37096: LD_INT 0
37098: PPUSH
// uc_side := 0 ;
37099: LD_ADDR_OWVAR 20
37103: PUSH
37104: LD_INT 0
37106: ST_TO_ADDR
// uc_nation := 0 ;
37107: LD_ADDR_OWVAR 21
37111: PUSH
37112: LD_INT 0
37114: ST_TO_ADDR
// hc_class := class_horse ;
37115: LD_ADDR_OWVAR 28
37119: PUSH
37120: LD_INT 21
37122: ST_TO_ADDR
// hc_gallery :=  ;
37123: LD_ADDR_OWVAR 33
37127: PUSH
37128: LD_STRING 
37130: ST_TO_ADDR
// end ;
37131: LD_VAR 0 1
37135: RET
// export function PrepareMastodont ( ) ; begin
37136: LD_INT 0
37138: PPUSH
// uc_side := 0 ;
37139: LD_ADDR_OWVAR 20
37143: PUSH
37144: LD_INT 0
37146: ST_TO_ADDR
// uc_nation := 0 ;
37147: LD_ADDR_OWVAR 21
37151: PUSH
37152: LD_INT 0
37154: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37155: LD_ADDR_OWVAR 37
37159: PUSH
37160: LD_INT 31
37162: ST_TO_ADDR
// vc_control := control_rider ;
37163: LD_ADDR_OWVAR 38
37167: PUSH
37168: LD_INT 4
37170: ST_TO_ADDR
// end ;
37171: LD_VAR 0 1
37175: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37176: LD_INT 0
37178: PPUSH
37179: PPUSH
37180: PPUSH
// uc_side = 0 ;
37181: LD_ADDR_OWVAR 20
37185: PUSH
37186: LD_INT 0
37188: ST_TO_ADDR
// uc_nation = 0 ;
37189: LD_ADDR_OWVAR 21
37193: PUSH
37194: LD_INT 0
37196: ST_TO_ADDR
// InitHc_All ( ) ;
37197: CALL_OW 584
// InitVc ;
37201: CALL_OW 20
// if mastodonts then
37205: LD_VAR 0 6
37209: IFFALSE 37276
// for i = 1 to mastodonts do
37211: LD_ADDR_VAR 0 11
37215: PUSH
37216: DOUBLE
37217: LD_INT 1
37219: DEC
37220: ST_TO_ADDR
37221: LD_VAR 0 6
37225: PUSH
37226: FOR_TO
37227: IFFALSE 37274
// begin vc_chassis := 31 ;
37229: LD_ADDR_OWVAR 37
37233: PUSH
37234: LD_INT 31
37236: ST_TO_ADDR
// vc_control := control_rider ;
37237: LD_ADDR_OWVAR 38
37241: PUSH
37242: LD_INT 4
37244: ST_TO_ADDR
// animal := CreateVehicle ;
37245: LD_ADDR_VAR 0 12
37249: PUSH
37250: CALL_OW 45
37254: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37255: LD_VAR 0 12
37259: PPUSH
37260: LD_VAR 0 8
37264: PPUSH
37265: LD_INT 0
37267: PPUSH
37268: CALL 39404 0 3
// end ;
37272: GO 37226
37274: POP
37275: POP
// if horses then
37276: LD_VAR 0 5
37280: IFFALSE 37347
// for i = 1 to horses do
37282: LD_ADDR_VAR 0 11
37286: PUSH
37287: DOUBLE
37288: LD_INT 1
37290: DEC
37291: ST_TO_ADDR
37292: LD_VAR 0 5
37296: PUSH
37297: FOR_TO
37298: IFFALSE 37345
// begin hc_class := 21 ;
37300: LD_ADDR_OWVAR 28
37304: PUSH
37305: LD_INT 21
37307: ST_TO_ADDR
// hc_gallery :=  ;
37308: LD_ADDR_OWVAR 33
37312: PUSH
37313: LD_STRING 
37315: ST_TO_ADDR
// animal := CreateHuman ;
37316: LD_ADDR_VAR 0 12
37320: PUSH
37321: CALL_OW 44
37325: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37326: LD_VAR 0 12
37330: PPUSH
37331: LD_VAR 0 8
37335: PPUSH
37336: LD_INT 0
37338: PPUSH
37339: CALL 39404 0 3
// end ;
37343: GO 37297
37345: POP
37346: POP
// if birds then
37347: LD_VAR 0 1
37351: IFFALSE 37418
// for i = 1 to birds do
37353: LD_ADDR_VAR 0 11
37357: PUSH
37358: DOUBLE
37359: LD_INT 1
37361: DEC
37362: ST_TO_ADDR
37363: LD_VAR 0 1
37367: PUSH
37368: FOR_TO
37369: IFFALSE 37416
// begin hc_class := 18 ;
37371: LD_ADDR_OWVAR 28
37375: PUSH
37376: LD_INT 18
37378: ST_TO_ADDR
// hc_gallery =  ;
37379: LD_ADDR_OWVAR 33
37383: PUSH
37384: LD_STRING 
37386: ST_TO_ADDR
// animal := CreateHuman ;
37387: LD_ADDR_VAR 0 12
37391: PUSH
37392: CALL_OW 44
37396: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37397: LD_VAR 0 12
37401: PPUSH
37402: LD_VAR 0 8
37406: PPUSH
37407: LD_INT 0
37409: PPUSH
37410: CALL 39404 0 3
// end ;
37414: GO 37368
37416: POP
37417: POP
// if tigers then
37418: LD_VAR 0 2
37422: IFFALSE 37506
// for i = 1 to tigers do
37424: LD_ADDR_VAR 0 11
37428: PUSH
37429: DOUBLE
37430: LD_INT 1
37432: DEC
37433: ST_TO_ADDR
37434: LD_VAR 0 2
37438: PUSH
37439: FOR_TO
37440: IFFALSE 37504
// begin hc_class = class_tiger ;
37442: LD_ADDR_OWVAR 28
37446: PUSH
37447: LD_INT 14
37449: ST_TO_ADDR
// hc_gallery =  ;
37450: LD_ADDR_OWVAR 33
37454: PUSH
37455: LD_STRING 
37457: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37458: LD_ADDR_OWVAR 35
37462: PUSH
37463: LD_INT 7
37465: NEG
37466: PPUSH
37467: LD_INT 7
37469: PPUSH
37470: CALL_OW 12
37474: ST_TO_ADDR
// animal := CreateHuman ;
37475: LD_ADDR_VAR 0 12
37479: PUSH
37480: CALL_OW 44
37484: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37485: LD_VAR 0 12
37489: PPUSH
37490: LD_VAR 0 8
37494: PPUSH
37495: LD_INT 0
37497: PPUSH
37498: CALL 39404 0 3
// end ;
37502: GO 37439
37504: POP
37505: POP
// if apemans then
37506: LD_VAR 0 3
37510: IFFALSE 37633
// for i = 1 to apemans do
37512: LD_ADDR_VAR 0 11
37516: PUSH
37517: DOUBLE
37518: LD_INT 1
37520: DEC
37521: ST_TO_ADDR
37522: LD_VAR 0 3
37526: PUSH
37527: FOR_TO
37528: IFFALSE 37631
// begin hc_class = class_apeman ;
37530: LD_ADDR_OWVAR 28
37534: PUSH
37535: LD_INT 12
37537: ST_TO_ADDR
// hc_gallery =  ;
37538: LD_ADDR_OWVAR 33
37542: PUSH
37543: LD_STRING 
37545: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37546: LD_ADDR_OWVAR 35
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PPUSH
37555: LD_INT 2
37557: PPUSH
37558: CALL_OW 12
37562: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37563: LD_ADDR_OWVAR 31
37567: PUSH
37568: LD_INT 1
37570: PPUSH
37571: LD_INT 3
37573: PPUSH
37574: CALL_OW 12
37578: PUSH
37579: LD_INT 1
37581: PPUSH
37582: LD_INT 3
37584: PPUSH
37585: CALL_OW 12
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: LD_INT 0
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: ST_TO_ADDR
// animal := CreateHuman ;
37602: LD_ADDR_VAR 0 12
37606: PUSH
37607: CALL_OW 44
37611: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37612: LD_VAR 0 12
37616: PPUSH
37617: LD_VAR 0 8
37621: PPUSH
37622: LD_INT 0
37624: PPUSH
37625: CALL 39404 0 3
// end ;
37629: GO 37527
37631: POP
37632: POP
// if enchidnas then
37633: LD_VAR 0 4
37637: IFFALSE 37704
// for i = 1 to enchidnas do
37639: LD_ADDR_VAR 0 11
37643: PUSH
37644: DOUBLE
37645: LD_INT 1
37647: DEC
37648: ST_TO_ADDR
37649: LD_VAR 0 4
37653: PUSH
37654: FOR_TO
37655: IFFALSE 37702
// begin hc_class = 13 ;
37657: LD_ADDR_OWVAR 28
37661: PUSH
37662: LD_INT 13
37664: ST_TO_ADDR
// hc_gallery =  ;
37665: LD_ADDR_OWVAR 33
37669: PUSH
37670: LD_STRING 
37672: ST_TO_ADDR
// animal := CreateHuman ;
37673: LD_ADDR_VAR 0 12
37677: PUSH
37678: CALL_OW 44
37682: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37683: LD_VAR 0 12
37687: PPUSH
37688: LD_VAR 0 8
37692: PPUSH
37693: LD_INT 0
37695: PPUSH
37696: CALL 39404 0 3
// end ;
37700: GO 37654
37702: POP
37703: POP
// if fishes then
37704: LD_VAR 0 7
37708: IFFALSE 37775
// for i = 1 to fishes do
37710: LD_ADDR_VAR 0 11
37714: PUSH
37715: DOUBLE
37716: LD_INT 1
37718: DEC
37719: ST_TO_ADDR
37720: LD_VAR 0 7
37724: PUSH
37725: FOR_TO
37726: IFFALSE 37773
// begin hc_class = 20 ;
37728: LD_ADDR_OWVAR 28
37732: PUSH
37733: LD_INT 20
37735: ST_TO_ADDR
// hc_gallery =  ;
37736: LD_ADDR_OWVAR 33
37740: PUSH
37741: LD_STRING 
37743: ST_TO_ADDR
// animal := CreateHuman ;
37744: LD_ADDR_VAR 0 12
37748: PUSH
37749: CALL_OW 44
37753: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37754: LD_VAR 0 12
37758: PPUSH
37759: LD_VAR 0 9
37763: PPUSH
37764: LD_INT 0
37766: PPUSH
37767: CALL 39404 0 3
// end ;
37771: GO 37725
37773: POP
37774: POP
// end ;
37775: LD_VAR 0 10
37779: RET
// export function WantHeal ( sci , unit ) ; begin
37780: LD_INT 0
37782: PPUSH
// if GetTaskList ( sci ) > 0 then
37783: LD_VAR 0 1
37787: PPUSH
37788: CALL_OW 437
37792: PUSH
37793: LD_INT 0
37795: GREATER
37796: IFFALSE 37866
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37798: LD_VAR 0 1
37802: PPUSH
37803: CALL_OW 437
37807: PUSH
37808: LD_INT 1
37810: ARRAY
37811: PUSH
37812: LD_INT 1
37814: ARRAY
37815: PUSH
37816: LD_STRING l
37818: EQUAL
37819: PUSH
37820: LD_VAR 0 1
37824: PPUSH
37825: CALL_OW 437
37829: PUSH
37830: LD_INT 1
37832: ARRAY
37833: PUSH
37834: LD_INT 4
37836: ARRAY
37837: PUSH
37838: LD_VAR 0 2
37842: EQUAL
37843: AND
37844: IFFALSE 37856
// result := true else
37846: LD_ADDR_VAR 0 3
37850: PUSH
37851: LD_INT 1
37853: ST_TO_ADDR
37854: GO 37864
// result := false ;
37856: LD_ADDR_VAR 0 3
37860: PUSH
37861: LD_INT 0
37863: ST_TO_ADDR
// end else
37864: GO 37874
// result := false ;
37866: LD_ADDR_VAR 0 3
37870: PUSH
37871: LD_INT 0
37873: ST_TO_ADDR
// end ;
37874: LD_VAR 0 3
37878: RET
// export function HealTarget ( sci ) ; begin
37879: LD_INT 0
37881: PPUSH
// if not sci then
37882: LD_VAR 0 1
37886: NOT
37887: IFFALSE 37891
// exit ;
37889: GO 37956
// result := 0 ;
37891: LD_ADDR_VAR 0 2
37895: PUSH
37896: LD_INT 0
37898: ST_TO_ADDR
// if GetTaskList ( sci ) then
37899: LD_VAR 0 1
37903: PPUSH
37904: CALL_OW 437
37908: IFFALSE 37956
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37910: LD_VAR 0 1
37914: PPUSH
37915: CALL_OW 437
37919: PUSH
37920: LD_INT 1
37922: ARRAY
37923: PUSH
37924: LD_INT 1
37926: ARRAY
37927: PUSH
37928: LD_STRING l
37930: EQUAL
37931: IFFALSE 37956
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37933: LD_ADDR_VAR 0 2
37937: PUSH
37938: LD_VAR 0 1
37942: PPUSH
37943: CALL_OW 437
37947: PUSH
37948: LD_INT 1
37950: ARRAY
37951: PUSH
37952: LD_INT 4
37954: ARRAY
37955: ST_TO_ADDR
// end ;
37956: LD_VAR 0 2
37960: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37961: LD_INT 0
37963: PPUSH
37964: PPUSH
37965: PPUSH
37966: PPUSH
// if not base_units then
37967: LD_VAR 0 1
37971: NOT
37972: IFFALSE 37976
// exit ;
37974: GO 38063
// result := false ;
37976: LD_ADDR_VAR 0 2
37980: PUSH
37981: LD_INT 0
37983: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37984: LD_ADDR_VAR 0 5
37988: PUSH
37989: LD_VAR 0 1
37993: PPUSH
37994: LD_INT 21
37996: PUSH
37997: LD_INT 3
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PPUSH
38004: CALL_OW 72
38008: ST_TO_ADDR
// if not tmp then
38009: LD_VAR 0 5
38013: NOT
38014: IFFALSE 38018
// exit ;
38016: GO 38063
// for i in tmp do
38018: LD_ADDR_VAR 0 3
38022: PUSH
38023: LD_VAR 0 5
38027: PUSH
38028: FOR_IN
38029: IFFALSE 38061
// begin result := EnemyInRange ( i , 22 ) ;
38031: LD_ADDR_VAR 0 2
38035: PUSH
38036: LD_VAR 0 3
38040: PPUSH
38041: LD_INT 22
38043: PPUSH
38044: CALL 35661 0 2
38048: ST_TO_ADDR
// if result then
38049: LD_VAR 0 2
38053: IFFALSE 38059
// exit ;
38055: POP
38056: POP
38057: GO 38063
// end ;
38059: GO 38028
38061: POP
38062: POP
// end ;
38063: LD_VAR 0 2
38067: RET
// export function FilterByTag ( units , tag ) ; begin
38068: LD_INT 0
38070: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38071: LD_ADDR_VAR 0 3
38075: PUSH
38076: LD_VAR 0 1
38080: PPUSH
38081: LD_INT 120
38083: PUSH
38084: LD_VAR 0 2
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PPUSH
38093: CALL_OW 72
38097: ST_TO_ADDR
// end ;
38098: LD_VAR 0 3
38102: RET
// export function IsDriver ( un ) ; begin
38103: LD_INT 0
38105: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38106: LD_ADDR_VAR 0 2
38110: PUSH
38111: LD_VAR 0 1
38115: PUSH
38116: LD_INT 55
38118: PUSH
38119: EMPTY
38120: LIST
38121: PPUSH
38122: CALL_OW 69
38126: IN
38127: ST_TO_ADDR
// end ;
38128: LD_VAR 0 2
38132: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38133: LD_INT 0
38135: PPUSH
38136: PPUSH
// list := [ ] ;
38137: LD_ADDR_VAR 0 5
38141: PUSH
38142: EMPTY
38143: ST_TO_ADDR
// case d of 0 :
38144: LD_VAR 0 3
38148: PUSH
38149: LD_INT 0
38151: DOUBLE
38152: EQUAL
38153: IFTRUE 38157
38155: GO 38290
38157: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38158: LD_ADDR_VAR 0 5
38162: PUSH
38163: LD_VAR 0 1
38167: PUSH
38168: LD_INT 4
38170: MINUS
38171: PUSH
38172: LD_VAR 0 2
38176: PUSH
38177: LD_INT 4
38179: MINUS
38180: PUSH
38181: LD_INT 2
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: PUSH
38189: LD_VAR 0 1
38193: PUSH
38194: LD_INT 3
38196: MINUS
38197: PUSH
38198: LD_VAR 0 2
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: LIST
38210: PUSH
38211: LD_VAR 0 1
38215: PUSH
38216: LD_INT 4
38218: PLUS
38219: PUSH
38220: LD_VAR 0 2
38224: PUSH
38225: LD_INT 4
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: LIST
38232: PUSH
38233: LD_VAR 0 1
38237: PUSH
38238: LD_INT 3
38240: PLUS
38241: PUSH
38242: LD_VAR 0 2
38246: PUSH
38247: LD_INT 3
38249: PLUS
38250: PUSH
38251: LD_INT 5
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: LIST
38258: PUSH
38259: LD_VAR 0 1
38263: PUSH
38264: LD_VAR 0 2
38268: PUSH
38269: LD_INT 4
38271: PLUS
38272: PUSH
38273: LD_INT 0
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: LIST
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: ST_TO_ADDR
// end ; 1 :
38288: GO 38988
38290: LD_INT 1
38292: DOUBLE
38293: EQUAL
38294: IFTRUE 38298
38296: GO 38431
38298: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38299: LD_ADDR_VAR 0 5
38303: PUSH
38304: LD_VAR 0 1
38308: PUSH
38309: LD_VAR 0 2
38313: PUSH
38314: LD_INT 4
38316: MINUS
38317: PUSH
38318: LD_INT 3
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: PUSH
38326: LD_VAR 0 1
38330: PUSH
38331: LD_INT 3
38333: MINUS
38334: PUSH
38335: LD_VAR 0 2
38339: PUSH
38340: LD_INT 3
38342: MINUS
38343: PUSH
38344: LD_INT 2
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: LIST
38351: PUSH
38352: LD_VAR 0 1
38356: PUSH
38357: LD_INT 4
38359: MINUS
38360: PUSH
38361: LD_VAR 0 2
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: LIST
38373: PUSH
38374: LD_VAR 0 1
38378: PUSH
38379: LD_VAR 0 2
38383: PUSH
38384: LD_INT 3
38386: PLUS
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: LIST
38395: PUSH
38396: LD_VAR 0 1
38400: PUSH
38401: LD_INT 4
38403: PLUS
38404: PUSH
38405: LD_VAR 0 2
38409: PUSH
38410: LD_INT 4
38412: PLUS
38413: PUSH
38414: LD_INT 5
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: LIST
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: ST_TO_ADDR
// end ; 2 :
38429: GO 38988
38431: LD_INT 2
38433: DOUBLE
38434: EQUAL
38435: IFTRUE 38439
38437: GO 38568
38439: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38440: LD_ADDR_VAR 0 5
38444: PUSH
38445: LD_VAR 0 1
38449: PUSH
38450: LD_VAR 0 2
38454: PUSH
38455: LD_INT 3
38457: MINUS
38458: PUSH
38459: LD_INT 3
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: LIST
38466: PUSH
38467: LD_VAR 0 1
38471: PUSH
38472: LD_INT 4
38474: PLUS
38475: PUSH
38476: LD_VAR 0 2
38480: PUSH
38481: LD_INT 4
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: LIST
38488: PUSH
38489: LD_VAR 0 1
38493: PUSH
38494: LD_VAR 0 2
38498: PUSH
38499: LD_INT 4
38501: PLUS
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: LIST
38510: PUSH
38511: LD_VAR 0 1
38515: PUSH
38516: LD_INT 3
38518: MINUS
38519: PUSH
38520: LD_VAR 0 2
38524: PUSH
38525: LD_INT 1
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: LIST
38532: PUSH
38533: LD_VAR 0 1
38537: PUSH
38538: LD_INT 4
38540: MINUS
38541: PUSH
38542: LD_VAR 0 2
38546: PUSH
38547: LD_INT 4
38549: MINUS
38550: PUSH
38551: LD_INT 2
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: ST_TO_ADDR
// end ; 3 :
38566: GO 38988
38568: LD_INT 3
38570: DOUBLE
38571: EQUAL
38572: IFTRUE 38576
38574: GO 38709
38576: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38577: LD_ADDR_VAR 0 5
38581: PUSH
38582: LD_VAR 0 1
38586: PUSH
38587: LD_INT 3
38589: PLUS
38590: PUSH
38591: LD_VAR 0 2
38595: PUSH
38596: LD_INT 4
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: LIST
38603: PUSH
38604: LD_VAR 0 1
38608: PUSH
38609: LD_INT 4
38611: PLUS
38612: PUSH
38613: LD_VAR 0 2
38617: PUSH
38618: LD_INT 4
38620: PLUS
38621: PUSH
38622: LD_INT 5
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: LIST
38629: PUSH
38630: LD_VAR 0 1
38634: PUSH
38635: LD_INT 4
38637: MINUS
38638: PUSH
38639: LD_VAR 0 2
38643: PUSH
38644: LD_INT 1
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: PUSH
38652: LD_VAR 0 1
38656: PUSH
38657: LD_VAR 0 2
38661: PUSH
38662: LD_INT 4
38664: MINUS
38665: PUSH
38666: LD_INT 3
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: LIST
38673: PUSH
38674: LD_VAR 0 1
38678: PUSH
38679: LD_INT 3
38681: MINUS
38682: PUSH
38683: LD_VAR 0 2
38687: PUSH
38688: LD_INT 3
38690: MINUS
38691: PUSH
38692: LD_INT 2
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: LIST
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: ST_TO_ADDR
// end ; 4 :
38707: GO 38988
38709: LD_INT 4
38711: DOUBLE
38712: EQUAL
38713: IFTRUE 38717
38715: GO 38850
38717: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38718: LD_ADDR_VAR 0 5
38722: PUSH
38723: LD_VAR 0 1
38727: PUSH
38728: LD_VAR 0 2
38732: PUSH
38733: LD_INT 4
38735: PLUS
38736: PUSH
38737: LD_INT 0
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: PUSH
38745: LD_VAR 0 1
38749: PUSH
38750: LD_INT 3
38752: PLUS
38753: PUSH
38754: LD_VAR 0 2
38758: PUSH
38759: LD_INT 3
38761: PLUS
38762: PUSH
38763: LD_INT 5
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: LIST
38770: PUSH
38771: LD_VAR 0 1
38775: PUSH
38776: LD_INT 4
38778: PLUS
38779: PUSH
38780: LD_VAR 0 2
38784: PUSH
38785: LD_INT 4
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: LIST
38792: PUSH
38793: LD_VAR 0 1
38797: PUSH
38798: LD_VAR 0 2
38802: PUSH
38803: LD_INT 3
38805: MINUS
38806: PUSH
38807: LD_INT 3
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: LIST
38814: PUSH
38815: LD_VAR 0 1
38819: PUSH
38820: LD_INT 4
38822: MINUS
38823: PUSH
38824: LD_VAR 0 2
38828: PUSH
38829: LD_INT 4
38831: MINUS
38832: PUSH
38833: LD_INT 2
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: LIST
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: ST_TO_ADDR
// end ; 5 :
38848: GO 38988
38850: LD_INT 5
38852: DOUBLE
38853: EQUAL
38854: IFTRUE 38858
38856: GO 38987
38858: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38859: LD_ADDR_VAR 0 5
38863: PUSH
38864: LD_VAR 0 1
38868: PUSH
38869: LD_INT 4
38871: MINUS
38872: PUSH
38873: LD_VAR 0 2
38877: PUSH
38878: LD_INT 1
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: LIST
38885: PUSH
38886: LD_VAR 0 1
38890: PUSH
38891: LD_VAR 0 2
38895: PUSH
38896: LD_INT 4
38898: MINUS
38899: PUSH
38900: LD_INT 3
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: PUSH
38908: LD_VAR 0 1
38912: PUSH
38913: LD_INT 4
38915: PLUS
38916: PUSH
38917: LD_VAR 0 2
38921: PUSH
38922: LD_INT 4
38924: PLUS
38925: PUSH
38926: LD_INT 5
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: LIST
38933: PUSH
38934: LD_VAR 0 1
38938: PUSH
38939: LD_INT 3
38941: PLUS
38942: PUSH
38943: LD_VAR 0 2
38947: PUSH
38948: LD_INT 4
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: LIST
38955: PUSH
38956: LD_VAR 0 1
38960: PUSH
38961: LD_VAR 0 2
38965: PUSH
38966: LD_INT 3
38968: PLUS
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: ST_TO_ADDR
// end ; end ;
38985: GO 38988
38987: POP
// result := list ;
38988: LD_ADDR_VAR 0 4
38992: PUSH
38993: LD_VAR 0 5
38997: ST_TO_ADDR
// end ;
38998: LD_VAR 0 4
39002: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39003: LD_INT 0
39005: PPUSH
39006: PPUSH
39007: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39008: LD_VAR 0 1
39012: NOT
39013: PUSH
39014: LD_VAR 0 2
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 2
39024: PUSH
39025: LD_INT 3
39027: PUSH
39028: LD_INT 4
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: IN
39037: NOT
39038: OR
39039: IFFALSE 39043
// exit ;
39041: GO 39126
// tmp := [ ] ;
39043: LD_ADDR_VAR 0 5
39047: PUSH
39048: EMPTY
39049: ST_TO_ADDR
// for i in units do
39050: LD_ADDR_VAR 0 4
39054: PUSH
39055: LD_VAR 0 1
39059: PUSH
39060: FOR_IN
39061: IFFALSE 39095
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39063: LD_ADDR_VAR 0 5
39067: PUSH
39068: LD_VAR 0 5
39072: PPUSH
39073: LD_VAR 0 4
39077: PPUSH
39078: LD_VAR 0 2
39082: PPUSH
39083: CALL_OW 259
39087: PPUSH
39088: CALL 40499 0 2
39092: ST_TO_ADDR
39093: GO 39060
39095: POP
39096: POP
// if not tmp then
39097: LD_VAR 0 5
39101: NOT
39102: IFFALSE 39106
// exit ;
39104: GO 39126
// result := SortListByListDesc ( units , tmp ) ;
39106: LD_ADDR_VAR 0 3
39110: PUSH
39111: LD_VAR 0 1
39115: PPUSH
39116: LD_VAR 0 5
39120: PPUSH
39121: CALL_OW 77
39125: ST_TO_ADDR
// end ;
39126: LD_VAR 0 3
39130: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39131: LD_INT 0
39133: PPUSH
39134: PPUSH
39135: PPUSH
// result := false ;
39136: LD_ADDR_VAR 0 3
39140: PUSH
39141: LD_INT 0
39143: ST_TO_ADDR
// if not building then
39144: LD_VAR 0 2
39148: NOT
39149: IFFALSE 39153
// exit ;
39151: GO 39291
// x := GetX ( building ) ;
39153: LD_ADDR_VAR 0 4
39157: PUSH
39158: LD_VAR 0 2
39162: PPUSH
39163: CALL_OW 250
39167: ST_TO_ADDR
// y := GetY ( building ) ;
39168: LD_ADDR_VAR 0 5
39172: PUSH
39173: LD_VAR 0 2
39177: PPUSH
39178: CALL_OW 251
39182: ST_TO_ADDR
// if not x or not y then
39183: LD_VAR 0 4
39187: NOT
39188: PUSH
39189: LD_VAR 0 5
39193: NOT
39194: OR
39195: IFFALSE 39199
// exit ;
39197: GO 39291
// if GetTaskList ( unit ) then
39199: LD_VAR 0 1
39203: PPUSH
39204: CALL_OW 437
39208: IFFALSE 39291
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39210: LD_STRING e
39212: PUSH
39213: LD_VAR 0 1
39217: PPUSH
39218: CALL_OW 437
39222: PUSH
39223: LD_INT 1
39225: ARRAY
39226: PUSH
39227: LD_INT 1
39229: ARRAY
39230: EQUAL
39231: PUSH
39232: LD_VAR 0 4
39236: PUSH
39237: LD_VAR 0 1
39241: PPUSH
39242: CALL_OW 437
39246: PUSH
39247: LD_INT 1
39249: ARRAY
39250: PUSH
39251: LD_INT 2
39253: ARRAY
39254: EQUAL
39255: AND
39256: PUSH
39257: LD_VAR 0 5
39261: PUSH
39262: LD_VAR 0 1
39266: PPUSH
39267: CALL_OW 437
39271: PUSH
39272: LD_INT 1
39274: ARRAY
39275: PUSH
39276: LD_INT 3
39278: ARRAY
39279: EQUAL
39280: AND
39281: IFFALSE 39291
// result := true end ;
39283: LD_ADDR_VAR 0 3
39287: PUSH
39288: LD_INT 1
39290: ST_TO_ADDR
// end ;
39291: LD_VAR 0 3
39295: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39296: LD_INT 0
39298: PPUSH
// result := false ;
39299: LD_ADDR_VAR 0 4
39303: PUSH
39304: LD_INT 0
39306: ST_TO_ADDR
// if GetTaskList ( unit ) then
39307: LD_VAR 0 1
39311: PPUSH
39312: CALL_OW 437
39316: IFFALSE 39399
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39318: LD_STRING M
39320: PUSH
39321: LD_VAR 0 1
39325: PPUSH
39326: CALL_OW 437
39330: PUSH
39331: LD_INT 1
39333: ARRAY
39334: PUSH
39335: LD_INT 1
39337: ARRAY
39338: EQUAL
39339: PUSH
39340: LD_VAR 0 2
39344: PUSH
39345: LD_VAR 0 1
39349: PPUSH
39350: CALL_OW 437
39354: PUSH
39355: LD_INT 1
39357: ARRAY
39358: PUSH
39359: LD_INT 2
39361: ARRAY
39362: EQUAL
39363: AND
39364: PUSH
39365: LD_VAR 0 3
39369: PUSH
39370: LD_VAR 0 1
39374: PPUSH
39375: CALL_OW 437
39379: PUSH
39380: LD_INT 1
39382: ARRAY
39383: PUSH
39384: LD_INT 3
39386: ARRAY
39387: EQUAL
39388: AND
39389: IFFALSE 39399
// result := true ;
39391: LD_ADDR_VAR 0 4
39395: PUSH
39396: LD_INT 1
39398: ST_TO_ADDR
// end ; end ;
39399: LD_VAR 0 4
39403: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39404: LD_INT 0
39406: PPUSH
39407: PPUSH
39408: PPUSH
39409: PPUSH
// if not unit or not area then
39410: LD_VAR 0 1
39414: NOT
39415: PUSH
39416: LD_VAR 0 2
39420: NOT
39421: OR
39422: IFFALSE 39426
// exit ;
39424: GO 39602
// tmp := AreaToList ( area , i ) ;
39426: LD_ADDR_VAR 0 6
39430: PUSH
39431: LD_VAR 0 2
39435: PPUSH
39436: LD_VAR 0 5
39440: PPUSH
39441: CALL_OW 517
39445: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39446: LD_ADDR_VAR 0 5
39450: PUSH
39451: DOUBLE
39452: LD_INT 1
39454: DEC
39455: ST_TO_ADDR
39456: LD_VAR 0 6
39460: PUSH
39461: LD_INT 1
39463: ARRAY
39464: PUSH
39465: FOR_TO
39466: IFFALSE 39600
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39468: LD_ADDR_VAR 0 7
39472: PUSH
39473: LD_VAR 0 6
39477: PUSH
39478: LD_INT 1
39480: ARRAY
39481: PUSH
39482: LD_VAR 0 5
39486: ARRAY
39487: PUSH
39488: LD_VAR 0 6
39492: PUSH
39493: LD_INT 2
39495: ARRAY
39496: PUSH
39497: LD_VAR 0 5
39501: ARRAY
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39507: LD_INT 92
39509: PUSH
39510: LD_VAR 0 7
39514: PUSH
39515: LD_INT 1
39517: ARRAY
39518: PUSH
39519: LD_VAR 0 7
39523: PUSH
39524: LD_INT 2
39526: ARRAY
39527: PUSH
39528: LD_INT 2
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: PPUSH
39537: CALL_OW 69
39541: PUSH
39542: LD_INT 0
39544: EQUAL
39545: IFFALSE 39598
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39547: LD_VAR 0 1
39551: PPUSH
39552: LD_VAR 0 7
39556: PUSH
39557: LD_INT 1
39559: ARRAY
39560: PPUSH
39561: LD_VAR 0 7
39565: PUSH
39566: LD_INT 2
39568: ARRAY
39569: PPUSH
39570: LD_VAR 0 3
39574: PPUSH
39575: CALL_OW 48
// result := IsPlaced ( unit ) ;
39579: LD_ADDR_VAR 0 4
39583: PUSH
39584: LD_VAR 0 1
39588: PPUSH
39589: CALL_OW 305
39593: ST_TO_ADDR
// exit ;
39594: POP
39595: POP
39596: GO 39602
// end ; end ;
39598: GO 39465
39600: POP
39601: POP
// end ;
39602: LD_VAR 0 4
39606: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39607: LD_INT 0
39609: PPUSH
39610: PPUSH
39611: PPUSH
// if not side or side > 8 then
39612: LD_VAR 0 1
39616: NOT
39617: PUSH
39618: LD_VAR 0 1
39622: PUSH
39623: LD_INT 8
39625: GREATER
39626: OR
39627: IFFALSE 39631
// exit ;
39629: GO 39818
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39631: LD_ADDR_VAR 0 4
39635: PUSH
39636: LD_INT 22
39638: PUSH
39639: LD_VAR 0 1
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 21
39650: PUSH
39651: LD_INT 3
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PPUSH
39662: CALL_OW 69
39666: ST_TO_ADDR
// if not tmp then
39667: LD_VAR 0 4
39671: NOT
39672: IFFALSE 39676
// exit ;
39674: GO 39818
// enable_addtolog := true ;
39676: LD_ADDR_OWVAR 81
39680: PUSH
39681: LD_INT 1
39683: ST_TO_ADDR
// AddToLog ( [ ) ;
39684: LD_STRING [
39686: PPUSH
39687: CALL_OW 561
// for i in tmp do
39691: LD_ADDR_VAR 0 3
39695: PUSH
39696: LD_VAR 0 4
39700: PUSH
39701: FOR_IN
39702: IFFALSE 39809
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39704: LD_STRING [
39706: PUSH
39707: LD_VAR 0 3
39711: PPUSH
39712: CALL_OW 266
39716: STR
39717: PUSH
39718: LD_STRING , 
39720: STR
39721: PUSH
39722: LD_VAR 0 3
39726: PPUSH
39727: CALL_OW 250
39731: STR
39732: PUSH
39733: LD_STRING , 
39735: STR
39736: PUSH
39737: LD_VAR 0 3
39741: PPUSH
39742: CALL_OW 251
39746: STR
39747: PUSH
39748: LD_STRING , 
39750: STR
39751: PUSH
39752: LD_VAR 0 3
39756: PPUSH
39757: CALL_OW 254
39761: STR
39762: PUSH
39763: LD_STRING , 
39765: STR
39766: PUSH
39767: LD_VAR 0 3
39771: PPUSH
39772: LD_INT 1
39774: PPUSH
39775: CALL_OW 268
39779: STR
39780: PUSH
39781: LD_STRING , 
39783: STR
39784: PUSH
39785: LD_VAR 0 3
39789: PPUSH
39790: LD_INT 2
39792: PPUSH
39793: CALL_OW 268
39797: STR
39798: PUSH
39799: LD_STRING ],
39801: STR
39802: PPUSH
39803: CALL_OW 561
// end ;
39807: GO 39701
39809: POP
39810: POP
// AddToLog ( ]; ) ;
39811: LD_STRING ];
39813: PPUSH
39814: CALL_OW 561
// end ;
39818: LD_VAR 0 2
39822: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39823: LD_INT 0
39825: PPUSH
39826: PPUSH
39827: PPUSH
39828: PPUSH
39829: PPUSH
// if not area or not rate or not max then
39830: LD_VAR 0 1
39834: NOT
39835: PUSH
39836: LD_VAR 0 2
39840: NOT
39841: OR
39842: PUSH
39843: LD_VAR 0 4
39847: NOT
39848: OR
39849: IFFALSE 39853
// exit ;
39851: GO 40042
// while 1 do
39853: LD_INT 1
39855: IFFALSE 40042
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39857: LD_ADDR_VAR 0 9
39861: PUSH
39862: LD_VAR 0 1
39866: PPUSH
39867: LD_INT 1
39869: PPUSH
39870: CALL_OW 287
39874: PUSH
39875: LD_INT 10
39877: MUL
39878: ST_TO_ADDR
// r := rate / 10 ;
39879: LD_ADDR_VAR 0 7
39883: PUSH
39884: LD_VAR 0 2
39888: PUSH
39889: LD_INT 10
39891: DIVREAL
39892: ST_TO_ADDR
// time := 1 1$00 ;
39893: LD_ADDR_VAR 0 8
39897: PUSH
39898: LD_INT 2100
39900: ST_TO_ADDR
// if amount < min then
39901: LD_VAR 0 9
39905: PUSH
39906: LD_VAR 0 3
39910: LESS
39911: IFFALSE 39929
// r := r * 2 else
39913: LD_ADDR_VAR 0 7
39917: PUSH
39918: LD_VAR 0 7
39922: PUSH
39923: LD_INT 2
39925: MUL
39926: ST_TO_ADDR
39927: GO 39955
// if amount > max then
39929: LD_VAR 0 9
39933: PUSH
39934: LD_VAR 0 4
39938: GREATER
39939: IFFALSE 39955
// r := r / 2 ;
39941: LD_ADDR_VAR 0 7
39945: PUSH
39946: LD_VAR 0 7
39950: PUSH
39951: LD_INT 2
39953: DIVREAL
39954: ST_TO_ADDR
// time := time / r ;
39955: LD_ADDR_VAR 0 8
39959: PUSH
39960: LD_VAR 0 8
39964: PUSH
39965: LD_VAR 0 7
39969: DIVREAL
39970: ST_TO_ADDR
// if time < 0 then
39971: LD_VAR 0 8
39975: PUSH
39976: LD_INT 0
39978: LESS
39979: IFFALSE 39996
// time := time * - 1 ;
39981: LD_ADDR_VAR 0 8
39985: PUSH
39986: LD_VAR 0 8
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: MUL
39995: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39996: LD_VAR 0 8
40000: PUSH
40001: LD_INT 35
40003: PPUSH
40004: LD_INT 875
40006: PPUSH
40007: CALL_OW 12
40011: PLUS
40012: PPUSH
40013: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40017: LD_INT 1
40019: PPUSH
40020: LD_INT 5
40022: PPUSH
40023: CALL_OW 12
40027: PPUSH
40028: LD_VAR 0 1
40032: PPUSH
40033: LD_INT 1
40035: PPUSH
40036: CALL_OW 55
// end ;
40040: GO 39853
// end ;
40042: LD_VAR 0 5
40046: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40047: LD_INT 0
40049: PPUSH
40050: PPUSH
40051: PPUSH
40052: PPUSH
40053: PPUSH
40054: PPUSH
40055: PPUSH
40056: PPUSH
// if not turrets or not factories then
40057: LD_VAR 0 1
40061: NOT
40062: PUSH
40063: LD_VAR 0 2
40067: NOT
40068: OR
40069: IFFALSE 40073
// exit ;
40071: GO 40380
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40073: LD_ADDR_VAR 0 10
40077: PUSH
40078: LD_INT 5
40080: PUSH
40081: LD_INT 6
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: LD_INT 4
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 3
40100: PUSH
40101: LD_INT 5
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 24
40115: PUSH
40116: LD_INT 25
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 23
40125: PUSH
40126: LD_INT 27
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 42
40139: PUSH
40140: LD_INT 43
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 44
40149: PUSH
40150: LD_INT 46
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 45
40159: PUSH
40160: LD_INT 47
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: LIST
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: LIST
40176: ST_TO_ADDR
// result := [ ] ;
40177: LD_ADDR_VAR 0 3
40181: PUSH
40182: EMPTY
40183: ST_TO_ADDR
// for i in turrets do
40184: LD_ADDR_VAR 0 4
40188: PUSH
40189: LD_VAR 0 1
40193: PUSH
40194: FOR_IN
40195: IFFALSE 40378
// begin nat := GetNation ( i ) ;
40197: LD_ADDR_VAR 0 7
40201: PUSH
40202: LD_VAR 0 4
40206: PPUSH
40207: CALL_OW 248
40211: ST_TO_ADDR
// weapon := 0 ;
40212: LD_ADDR_VAR 0 8
40216: PUSH
40217: LD_INT 0
40219: ST_TO_ADDR
// if not nat then
40220: LD_VAR 0 7
40224: NOT
40225: IFFALSE 40229
// continue ;
40227: GO 40194
// for j in list [ nat ] do
40229: LD_ADDR_VAR 0 5
40233: PUSH
40234: LD_VAR 0 10
40238: PUSH
40239: LD_VAR 0 7
40243: ARRAY
40244: PUSH
40245: FOR_IN
40246: IFFALSE 40287
// if GetBWeapon ( i ) = j [ 1 ] then
40248: LD_VAR 0 4
40252: PPUSH
40253: CALL_OW 269
40257: PUSH
40258: LD_VAR 0 5
40262: PUSH
40263: LD_INT 1
40265: ARRAY
40266: EQUAL
40267: IFFALSE 40285
// begin weapon := j [ 2 ] ;
40269: LD_ADDR_VAR 0 8
40273: PUSH
40274: LD_VAR 0 5
40278: PUSH
40279: LD_INT 2
40281: ARRAY
40282: ST_TO_ADDR
// break ;
40283: GO 40287
// end ;
40285: GO 40245
40287: POP
40288: POP
// if not weapon then
40289: LD_VAR 0 8
40293: NOT
40294: IFFALSE 40298
// continue ;
40296: GO 40194
// for k in factories do
40298: LD_ADDR_VAR 0 6
40302: PUSH
40303: LD_VAR 0 2
40307: PUSH
40308: FOR_IN
40309: IFFALSE 40374
// begin weapons := AvailableWeaponList ( k ) ;
40311: LD_ADDR_VAR 0 9
40315: PUSH
40316: LD_VAR 0 6
40320: PPUSH
40321: CALL_OW 478
40325: ST_TO_ADDR
// if not weapons then
40326: LD_VAR 0 9
40330: NOT
40331: IFFALSE 40335
// continue ;
40333: GO 40308
// if weapon in weapons then
40335: LD_VAR 0 8
40339: PUSH
40340: LD_VAR 0 9
40344: IN
40345: IFFALSE 40372
// begin result := [ i , weapon ] ;
40347: LD_ADDR_VAR 0 3
40351: PUSH
40352: LD_VAR 0 4
40356: PUSH
40357: LD_VAR 0 8
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: ST_TO_ADDR
// exit ;
40366: POP
40367: POP
40368: POP
40369: POP
40370: GO 40380
// end ; end ;
40372: GO 40308
40374: POP
40375: POP
// end ;
40376: GO 40194
40378: POP
40379: POP
// end ;
40380: LD_VAR 0 3
40384: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40385: LD_INT 0
40387: PPUSH
// if not side or side > 8 then
40388: LD_VAR 0 3
40392: NOT
40393: PUSH
40394: LD_VAR 0 3
40398: PUSH
40399: LD_INT 8
40401: GREATER
40402: OR
40403: IFFALSE 40407
// exit ;
40405: GO 40466
// if not range then
40407: LD_VAR 0 4
40411: NOT
40412: IFFALSE 40423
// range := - 12 ;
40414: LD_ADDR_VAR 0 4
40418: PUSH
40419: LD_INT 12
40421: NEG
40422: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40423: LD_VAR 0 1
40427: PPUSH
40428: LD_VAR 0 2
40432: PPUSH
40433: LD_VAR 0 3
40437: PPUSH
40438: LD_VAR 0 4
40442: PPUSH
40443: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40447: LD_VAR 0 1
40451: PPUSH
40452: LD_VAR 0 2
40456: PPUSH
40457: LD_VAR 0 3
40461: PPUSH
40462: CALL_OW 331
// end ;
40466: LD_VAR 0 5
40470: RET
// export function Video ( mode ) ; begin
40471: LD_INT 0
40473: PPUSH
// ingame_video = mode ;
40474: LD_ADDR_OWVAR 52
40478: PUSH
40479: LD_VAR 0 1
40483: ST_TO_ADDR
// interface_hidden = mode ;
40484: LD_ADDR_OWVAR 54
40488: PUSH
40489: LD_VAR 0 1
40493: ST_TO_ADDR
// end ;
40494: LD_VAR 0 2
40498: RET
// export function Join ( array , element ) ; begin
40499: LD_INT 0
40501: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40502: LD_ADDR_VAR 0 3
40506: PUSH
40507: LD_VAR 0 1
40511: PPUSH
40512: LD_VAR 0 1
40516: PUSH
40517: LD_INT 1
40519: PLUS
40520: PPUSH
40521: LD_VAR 0 2
40525: PPUSH
40526: CALL_OW 1
40530: ST_TO_ADDR
// end ;
40531: LD_VAR 0 3
40535: RET
// export function JoinUnion ( array , element ) ; begin
40536: LD_INT 0
40538: PPUSH
// result := array union element ;
40539: LD_ADDR_VAR 0 3
40543: PUSH
40544: LD_VAR 0 1
40548: PUSH
40549: LD_VAR 0 2
40553: UNION
40554: ST_TO_ADDR
// end ;
40555: LD_VAR 0 3
40559: RET
// export function GetBehemoths ( side ) ; begin
40560: LD_INT 0
40562: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40563: LD_ADDR_VAR 0 2
40567: PUSH
40568: LD_INT 22
40570: PUSH
40571: LD_VAR 0 1
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 31
40582: PUSH
40583: LD_INT 25
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PPUSH
40594: CALL_OW 69
40598: ST_TO_ADDR
// end ;
40599: LD_VAR 0 2
40603: RET
// export function Shuffle ( array ) ; var i , index ; begin
40604: LD_INT 0
40606: PPUSH
40607: PPUSH
40608: PPUSH
// result := [ ] ;
40609: LD_ADDR_VAR 0 2
40613: PUSH
40614: EMPTY
40615: ST_TO_ADDR
// if not array then
40616: LD_VAR 0 1
40620: NOT
40621: IFFALSE 40625
// exit ;
40623: GO 40724
// Randomize ;
40625: CALL_OW 10
// for i = array downto 1 do
40629: LD_ADDR_VAR 0 3
40633: PUSH
40634: DOUBLE
40635: LD_VAR 0 1
40639: INC
40640: ST_TO_ADDR
40641: LD_INT 1
40643: PUSH
40644: FOR_DOWNTO
40645: IFFALSE 40722
// begin index := rand ( 1 , array ) ;
40647: LD_ADDR_VAR 0 4
40651: PUSH
40652: LD_INT 1
40654: PPUSH
40655: LD_VAR 0 1
40659: PPUSH
40660: CALL_OW 12
40664: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40665: LD_ADDR_VAR 0 2
40669: PUSH
40670: LD_VAR 0 2
40674: PPUSH
40675: LD_VAR 0 2
40679: PUSH
40680: LD_INT 1
40682: PLUS
40683: PPUSH
40684: LD_VAR 0 1
40688: PUSH
40689: LD_VAR 0 4
40693: ARRAY
40694: PPUSH
40695: CALL_OW 2
40699: ST_TO_ADDR
// array := Delete ( array , index ) ;
40700: LD_ADDR_VAR 0 1
40704: PUSH
40705: LD_VAR 0 1
40709: PPUSH
40710: LD_VAR 0 4
40714: PPUSH
40715: CALL_OW 3
40719: ST_TO_ADDR
// end ;
40720: GO 40644
40722: POP
40723: POP
// end ;
40724: LD_VAR 0 2
40728: RET
// export function GetBaseMaterials ( base ) ; begin
40729: LD_INT 0
40731: PPUSH
// result := [ 0 , 0 , 0 ] ;
40732: LD_ADDR_VAR 0 2
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: LIST
40750: ST_TO_ADDR
// if not base then
40751: LD_VAR 0 1
40755: NOT
40756: IFFALSE 40760
// exit ;
40758: GO 40809
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40760: LD_ADDR_VAR 0 2
40764: PUSH
40765: LD_VAR 0 1
40769: PPUSH
40770: LD_INT 1
40772: PPUSH
40773: CALL_OW 275
40777: PUSH
40778: LD_VAR 0 1
40782: PPUSH
40783: LD_INT 2
40785: PPUSH
40786: CALL_OW 275
40790: PUSH
40791: LD_VAR 0 1
40795: PPUSH
40796: LD_INT 3
40798: PPUSH
40799: CALL_OW 275
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: LIST
40808: ST_TO_ADDR
// end ;
40809: LD_VAR 0 2
40813: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40814: LD_INT 0
40816: PPUSH
40817: PPUSH
// result := array ;
40818: LD_ADDR_VAR 0 3
40822: PUSH
40823: LD_VAR 0 1
40827: ST_TO_ADDR
// if size >= result then
40828: LD_VAR 0 2
40832: PUSH
40833: LD_VAR 0 3
40837: GREATEREQUAL
40838: IFFALSE 40842
// exit ;
40840: GO 40892
// if size then
40842: LD_VAR 0 2
40846: IFFALSE 40892
// for i := array downto size do
40848: LD_ADDR_VAR 0 4
40852: PUSH
40853: DOUBLE
40854: LD_VAR 0 1
40858: INC
40859: ST_TO_ADDR
40860: LD_VAR 0 2
40864: PUSH
40865: FOR_DOWNTO
40866: IFFALSE 40890
// result := Delete ( result , result ) ;
40868: LD_ADDR_VAR 0 3
40872: PUSH
40873: LD_VAR 0 3
40877: PPUSH
40878: LD_VAR 0 3
40882: PPUSH
40883: CALL_OW 3
40887: ST_TO_ADDR
40888: GO 40865
40890: POP
40891: POP
// end ;
40892: LD_VAR 0 3
40896: RET
// export function ComExit ( unit ) ; var tmp ; begin
40897: LD_INT 0
40899: PPUSH
40900: PPUSH
// if not IsInUnit ( unit ) then
40901: LD_VAR 0 1
40905: PPUSH
40906: CALL_OW 310
40910: NOT
40911: IFFALSE 40915
// exit ;
40913: GO 40975
// tmp := IsInUnit ( unit ) ;
40915: LD_ADDR_VAR 0 3
40919: PUSH
40920: LD_VAR 0 1
40924: PPUSH
40925: CALL_OW 310
40929: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40930: LD_VAR 0 3
40934: PPUSH
40935: CALL_OW 247
40939: PUSH
40940: LD_INT 2
40942: EQUAL
40943: IFFALSE 40956
// ComExitVehicle ( unit ) else
40945: LD_VAR 0 1
40949: PPUSH
40950: CALL_OW 121
40954: GO 40965
// ComExitBuilding ( unit ) ;
40956: LD_VAR 0 1
40960: PPUSH
40961: CALL_OW 122
// result := tmp ;
40965: LD_ADDR_VAR 0 2
40969: PUSH
40970: LD_VAR 0 3
40974: ST_TO_ADDR
// end ;
40975: LD_VAR 0 2
40979: RET
// export function ComExitAll ( units ) ; var i ; begin
40980: LD_INT 0
40982: PPUSH
40983: PPUSH
// if not units then
40984: LD_VAR 0 1
40988: NOT
40989: IFFALSE 40993
// exit ;
40991: GO 41019
// for i in units do
40993: LD_ADDR_VAR 0 3
40997: PUSH
40998: LD_VAR 0 1
41002: PUSH
41003: FOR_IN
41004: IFFALSE 41017
// ComExit ( i ) ;
41006: LD_VAR 0 3
41010: PPUSH
41011: CALL 40897 0 1
41015: GO 41003
41017: POP
41018: POP
// end ;
41019: LD_VAR 0 2
41023: RET
// export function ResetHc ; begin
41024: LD_INT 0
41026: PPUSH
// InitHc ;
41027: CALL_OW 19
// hc_importance := 0 ;
41031: LD_ADDR_OWVAR 32
41035: PUSH
41036: LD_INT 0
41038: ST_TO_ADDR
// end ;
41039: LD_VAR 0 1
41043: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41044: LD_INT 0
41046: PPUSH
41047: PPUSH
41048: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41049: LD_ADDR_VAR 0 6
41053: PUSH
41054: LD_VAR 0 1
41058: PUSH
41059: LD_VAR 0 3
41063: PLUS
41064: PUSH
41065: LD_INT 2
41067: DIV
41068: ST_TO_ADDR
// if _x < 0 then
41069: LD_VAR 0 6
41073: PUSH
41074: LD_INT 0
41076: LESS
41077: IFFALSE 41094
// _x := _x * - 1 ;
41079: LD_ADDR_VAR 0 6
41083: PUSH
41084: LD_VAR 0 6
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: MUL
41093: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41094: LD_ADDR_VAR 0 7
41098: PUSH
41099: LD_VAR 0 2
41103: PUSH
41104: LD_VAR 0 4
41108: PLUS
41109: PUSH
41110: LD_INT 2
41112: DIV
41113: ST_TO_ADDR
// if _y < 0 then
41114: LD_VAR 0 7
41118: PUSH
41119: LD_INT 0
41121: LESS
41122: IFFALSE 41139
// _y := _y * - 1 ;
41124: LD_ADDR_VAR 0 7
41128: PUSH
41129: LD_VAR 0 7
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: MUL
41138: ST_TO_ADDR
// result := [ _x , _y ] ;
41139: LD_ADDR_VAR 0 5
41143: PUSH
41144: LD_VAR 0 6
41148: PUSH
41149: LD_VAR 0 7
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: ST_TO_ADDR
// end ;
41158: LD_VAR 0 5
41162: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41163: LD_INT 0
41165: PPUSH
41166: PPUSH
41167: PPUSH
41168: PPUSH
// task := GetTaskList ( unit ) ;
41169: LD_ADDR_VAR 0 7
41173: PUSH
41174: LD_VAR 0 1
41178: PPUSH
41179: CALL_OW 437
41183: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41184: LD_VAR 0 7
41188: NOT
41189: PUSH
41190: LD_VAR 0 1
41194: PPUSH
41195: LD_VAR 0 2
41199: PPUSH
41200: CALL_OW 308
41204: NOT
41205: AND
41206: IFFALSE 41210
// exit ;
41208: GO 41328
// if IsInArea ( unit , area ) then
41210: LD_VAR 0 1
41214: PPUSH
41215: LD_VAR 0 2
41219: PPUSH
41220: CALL_OW 308
41224: IFFALSE 41242
// begin ComMoveToArea ( unit , goAway ) ;
41226: LD_VAR 0 1
41230: PPUSH
41231: LD_VAR 0 3
41235: PPUSH
41236: CALL_OW 113
// exit ;
41240: GO 41328
// end ; if task [ 1 ] [ 1 ] <> M then
41242: LD_VAR 0 7
41246: PUSH
41247: LD_INT 1
41249: ARRAY
41250: PUSH
41251: LD_INT 1
41253: ARRAY
41254: PUSH
41255: LD_STRING M
41257: NONEQUAL
41258: IFFALSE 41262
// exit ;
41260: GO 41328
// x := task [ 1 ] [ 2 ] ;
41262: LD_ADDR_VAR 0 5
41266: PUSH
41267: LD_VAR 0 7
41271: PUSH
41272: LD_INT 1
41274: ARRAY
41275: PUSH
41276: LD_INT 2
41278: ARRAY
41279: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41280: LD_ADDR_VAR 0 6
41284: PUSH
41285: LD_VAR 0 7
41289: PUSH
41290: LD_INT 1
41292: ARRAY
41293: PUSH
41294: LD_INT 3
41296: ARRAY
41297: ST_TO_ADDR
// if InArea ( x , y , area ) then
41298: LD_VAR 0 5
41302: PPUSH
41303: LD_VAR 0 6
41307: PPUSH
41308: LD_VAR 0 2
41312: PPUSH
41313: CALL_OW 309
41317: IFFALSE 41328
// ComStop ( unit ) ;
41319: LD_VAR 0 1
41323: PPUSH
41324: CALL_OW 141
// end ;
41328: LD_VAR 0 4
41332: RET
// export function Abs ( value ) ; begin
41333: LD_INT 0
41335: PPUSH
// result := value ;
41336: LD_ADDR_VAR 0 2
41340: PUSH
41341: LD_VAR 0 1
41345: ST_TO_ADDR
// if value < 0 then
41346: LD_VAR 0 1
41350: PUSH
41351: LD_INT 0
41353: LESS
41354: IFFALSE 41371
// result := value * - 1 ;
41356: LD_ADDR_VAR 0 2
41360: PUSH
41361: LD_VAR 0 1
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: MUL
41370: ST_TO_ADDR
// end ;
41371: LD_VAR 0 2
41375: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41376: LD_INT 0
41378: PPUSH
41379: PPUSH
41380: PPUSH
41381: PPUSH
41382: PPUSH
41383: PPUSH
41384: PPUSH
41385: PPUSH
// if not unit or not building then
41386: LD_VAR 0 1
41390: NOT
41391: PUSH
41392: LD_VAR 0 2
41396: NOT
41397: OR
41398: IFFALSE 41402
// exit ;
41400: GO 41628
// x := GetX ( building ) ;
41402: LD_ADDR_VAR 0 4
41406: PUSH
41407: LD_VAR 0 2
41411: PPUSH
41412: CALL_OW 250
41416: ST_TO_ADDR
// y := GetY ( building ) ;
41417: LD_ADDR_VAR 0 6
41421: PUSH
41422: LD_VAR 0 2
41426: PPUSH
41427: CALL_OW 251
41431: ST_TO_ADDR
// d := GetDir ( building ) ;
41432: LD_ADDR_VAR 0 8
41436: PUSH
41437: LD_VAR 0 2
41441: PPUSH
41442: CALL_OW 254
41446: ST_TO_ADDR
// r := 4 ;
41447: LD_ADDR_VAR 0 9
41451: PUSH
41452: LD_INT 4
41454: ST_TO_ADDR
// for i := 1 to 5 do
41455: LD_ADDR_VAR 0 10
41459: PUSH
41460: DOUBLE
41461: LD_INT 1
41463: DEC
41464: ST_TO_ADDR
41465: LD_INT 5
41467: PUSH
41468: FOR_TO
41469: IFFALSE 41626
// begin _x := ShiftX ( x , d , r + i ) ;
41471: LD_ADDR_VAR 0 5
41475: PUSH
41476: LD_VAR 0 4
41480: PPUSH
41481: LD_VAR 0 8
41485: PPUSH
41486: LD_VAR 0 9
41490: PUSH
41491: LD_VAR 0 10
41495: PLUS
41496: PPUSH
41497: CALL_OW 272
41501: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41502: LD_ADDR_VAR 0 7
41506: PUSH
41507: LD_VAR 0 6
41511: PPUSH
41512: LD_VAR 0 8
41516: PPUSH
41517: LD_VAR 0 9
41521: PUSH
41522: LD_VAR 0 10
41526: PLUS
41527: PPUSH
41528: CALL_OW 273
41532: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41533: LD_VAR 0 5
41537: PPUSH
41538: LD_VAR 0 7
41542: PPUSH
41543: CALL_OW 488
41547: PUSH
41548: LD_VAR 0 5
41552: PPUSH
41553: LD_VAR 0 7
41557: PPUSH
41558: CALL_OW 428
41562: PPUSH
41563: CALL_OW 247
41567: PUSH
41568: LD_INT 3
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: IN
41578: NOT
41579: AND
41580: IFFALSE 41624
// begin ComMoveXY ( unit , _x , _y ) ;
41582: LD_VAR 0 1
41586: PPUSH
41587: LD_VAR 0 5
41591: PPUSH
41592: LD_VAR 0 7
41596: PPUSH
41597: CALL_OW 111
// result := [ _x , _y ] ;
41601: LD_ADDR_VAR 0 3
41605: PUSH
41606: LD_VAR 0 5
41610: PUSH
41611: LD_VAR 0 7
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: ST_TO_ADDR
// exit ;
41620: POP
41621: POP
41622: GO 41628
// end ; end ;
41624: GO 41468
41626: POP
41627: POP
// end ;
41628: LD_VAR 0 3
41632: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41633: LD_INT 0
41635: PPUSH
41636: PPUSH
41637: PPUSH
// result := 0 ;
41638: LD_ADDR_VAR 0 3
41642: PUSH
41643: LD_INT 0
41645: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41646: LD_VAR 0 1
41650: PUSH
41651: LD_INT 0
41653: LESS
41654: PUSH
41655: LD_VAR 0 1
41659: PUSH
41660: LD_INT 8
41662: GREATER
41663: OR
41664: PUSH
41665: LD_VAR 0 2
41669: PUSH
41670: LD_INT 0
41672: LESS
41673: OR
41674: PUSH
41675: LD_VAR 0 2
41679: PUSH
41680: LD_INT 8
41682: GREATER
41683: OR
41684: IFFALSE 41688
// exit ;
41686: GO 41763
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41688: LD_ADDR_VAR 0 4
41692: PUSH
41693: LD_INT 22
41695: PUSH
41696: LD_VAR 0 2
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PPUSH
41705: CALL_OW 69
41709: PUSH
41710: FOR_IN
41711: IFFALSE 41761
// begin un := UnitShoot ( i ) ;
41713: LD_ADDR_VAR 0 5
41717: PUSH
41718: LD_VAR 0 4
41722: PPUSH
41723: CALL_OW 504
41727: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41728: LD_VAR 0 5
41732: PPUSH
41733: CALL_OW 255
41737: PUSH
41738: LD_VAR 0 1
41742: EQUAL
41743: IFFALSE 41759
// begin result := un ;
41745: LD_ADDR_VAR 0 3
41749: PUSH
41750: LD_VAR 0 5
41754: ST_TO_ADDR
// exit ;
41755: POP
41756: POP
41757: GO 41763
// end ; end ;
41759: GO 41710
41761: POP
41762: POP
// end ;
41763: LD_VAR 0 3
41767: RET
// export function GetCargoBay ( units ) ; begin
41768: LD_INT 0
41770: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41771: LD_ADDR_VAR 0 2
41775: PUSH
41776: LD_VAR 0 1
41780: PPUSH
41781: LD_INT 2
41783: PUSH
41784: LD_INT 34
41786: PUSH
41787: LD_INT 12
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 34
41796: PUSH
41797: LD_INT 51
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 34
41806: PUSH
41807: LD_INT 32
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 34
41816: PUSH
41817: LD_INT 89
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: PPUSH
41831: CALL_OW 72
41835: ST_TO_ADDR
// end ;
41836: LD_VAR 0 2
41840: RET
// export function Negate ( value ) ; begin
41841: LD_INT 0
41843: PPUSH
// result := not value ;
41844: LD_ADDR_VAR 0 2
41848: PUSH
41849: LD_VAR 0 1
41853: NOT
41854: ST_TO_ADDR
// end ;
41855: LD_VAR 0 2
41859: RET
// export function Inc ( value ) ; begin
41860: LD_INT 0
41862: PPUSH
// result := value + 1 ;
41863: LD_ADDR_VAR 0 2
41867: PUSH
41868: LD_VAR 0 1
41872: PUSH
41873: LD_INT 1
41875: PLUS
41876: ST_TO_ADDR
// end ;
41877: LD_VAR 0 2
41881: RET
// export function Dec ( value ) ; begin
41882: LD_INT 0
41884: PPUSH
// result := value - 1 ;
41885: LD_ADDR_VAR 0 2
41889: PUSH
41890: LD_VAR 0 1
41894: PUSH
41895: LD_INT 1
41897: MINUS
41898: ST_TO_ADDR
// end ;
41899: LD_VAR 0 2
41903: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41904: LD_INT 0
41906: PPUSH
41907: PPUSH
41908: PPUSH
41909: PPUSH
41910: PPUSH
41911: PPUSH
41912: PPUSH
41913: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41914: LD_VAR 0 1
41918: PPUSH
41919: LD_VAR 0 2
41923: PPUSH
41924: CALL_OW 488
41928: NOT
41929: PUSH
41930: LD_VAR 0 3
41934: PPUSH
41935: LD_VAR 0 4
41939: PPUSH
41940: CALL_OW 488
41944: NOT
41945: OR
41946: IFFALSE 41959
// begin result := - 1 ;
41948: LD_ADDR_VAR 0 5
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: ST_TO_ADDR
// exit ;
41957: GO 42194
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41959: LD_ADDR_VAR 0 12
41963: PUSH
41964: LD_VAR 0 1
41968: PPUSH
41969: LD_VAR 0 2
41973: PPUSH
41974: LD_VAR 0 3
41978: PPUSH
41979: LD_VAR 0 4
41983: PPUSH
41984: CALL 41044 0 4
41988: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41989: LD_ADDR_VAR 0 11
41993: PUSH
41994: LD_VAR 0 1
41998: PPUSH
41999: LD_VAR 0 2
42003: PPUSH
42004: LD_VAR 0 12
42008: PUSH
42009: LD_INT 1
42011: ARRAY
42012: PPUSH
42013: LD_VAR 0 12
42017: PUSH
42018: LD_INT 2
42020: ARRAY
42021: PPUSH
42022: CALL_OW 298
42026: ST_TO_ADDR
// distance := 9999 ;
42027: LD_ADDR_VAR 0 10
42031: PUSH
42032: LD_INT 9999
42034: ST_TO_ADDR
// for i := 0 to 5 do
42035: LD_ADDR_VAR 0 6
42039: PUSH
42040: DOUBLE
42041: LD_INT 0
42043: DEC
42044: ST_TO_ADDR
42045: LD_INT 5
42047: PUSH
42048: FOR_TO
42049: IFFALSE 42192
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42051: LD_ADDR_VAR 0 7
42055: PUSH
42056: LD_VAR 0 1
42060: PPUSH
42061: LD_VAR 0 6
42065: PPUSH
42066: LD_VAR 0 11
42070: PPUSH
42071: CALL_OW 272
42075: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42076: LD_ADDR_VAR 0 8
42080: PUSH
42081: LD_VAR 0 2
42085: PPUSH
42086: LD_VAR 0 6
42090: PPUSH
42091: LD_VAR 0 11
42095: PPUSH
42096: CALL_OW 273
42100: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42101: LD_VAR 0 7
42105: PPUSH
42106: LD_VAR 0 8
42110: PPUSH
42111: CALL_OW 488
42115: NOT
42116: IFFALSE 42120
// continue ;
42118: GO 42048
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42120: LD_ADDR_VAR 0 9
42124: PUSH
42125: LD_VAR 0 12
42129: PUSH
42130: LD_INT 1
42132: ARRAY
42133: PPUSH
42134: LD_VAR 0 12
42138: PUSH
42139: LD_INT 2
42141: ARRAY
42142: PPUSH
42143: LD_VAR 0 7
42147: PPUSH
42148: LD_VAR 0 8
42152: PPUSH
42153: CALL_OW 298
42157: ST_TO_ADDR
// if tmp < distance then
42158: LD_VAR 0 9
42162: PUSH
42163: LD_VAR 0 10
42167: LESS
42168: IFFALSE 42190
// begin result := i ;
42170: LD_ADDR_VAR 0 5
42174: PUSH
42175: LD_VAR 0 6
42179: ST_TO_ADDR
// distance := tmp ;
42180: LD_ADDR_VAR 0 10
42184: PUSH
42185: LD_VAR 0 9
42189: ST_TO_ADDR
// end ; end ;
42190: GO 42048
42192: POP
42193: POP
// end ;
42194: LD_VAR 0 5
42198: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42199: LD_INT 0
42201: PPUSH
42202: PPUSH
// if not driver or not IsInUnit ( driver ) then
42203: LD_VAR 0 1
42207: NOT
42208: PUSH
42209: LD_VAR 0 1
42213: PPUSH
42214: CALL_OW 310
42218: NOT
42219: OR
42220: IFFALSE 42224
// exit ;
42222: GO 42314
// vehicle := IsInUnit ( driver ) ;
42224: LD_ADDR_VAR 0 3
42228: PUSH
42229: LD_VAR 0 1
42233: PPUSH
42234: CALL_OW 310
42238: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42239: LD_VAR 0 1
42243: PPUSH
42244: LD_STRING \
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: PUSH
42274: LD_STRING E
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: LD_VAR 0 3
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PPUSH
42310: CALL_OW 446
// end ;
42314: LD_VAR 0 2
42318: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42319: LD_INT 0
42321: PPUSH
42322: PPUSH
// if not driver or not IsInUnit ( driver ) then
42323: LD_VAR 0 1
42327: NOT
42328: PUSH
42329: LD_VAR 0 1
42333: PPUSH
42334: CALL_OW 310
42338: NOT
42339: OR
42340: IFFALSE 42344
// exit ;
42342: GO 42434
// vehicle := IsInUnit ( driver ) ;
42344: LD_ADDR_VAR 0 3
42348: PUSH
42349: LD_VAR 0 1
42353: PPUSH
42354: CALL_OW 310
42358: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42359: LD_VAR 0 1
42363: PPUSH
42364: LD_STRING \
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: PUSH
42394: LD_STRING E
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: LD_VAR 0 3
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PPUSH
42430: CALL_OW 447
// end ;
42434: LD_VAR 0 2
42438: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42439: LD_INT 0
42441: PPUSH
42442: PPUSH
42443: PPUSH
// tmp := [ ] ;
42444: LD_ADDR_VAR 0 5
42448: PUSH
42449: EMPTY
42450: ST_TO_ADDR
// for i in units do
42451: LD_ADDR_VAR 0 4
42455: PUSH
42456: LD_VAR 0 1
42460: PUSH
42461: FOR_IN
42462: IFFALSE 42500
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42464: LD_ADDR_VAR 0 5
42468: PUSH
42469: LD_VAR 0 5
42473: PPUSH
42474: LD_VAR 0 5
42478: PUSH
42479: LD_INT 1
42481: PLUS
42482: PPUSH
42483: LD_VAR 0 4
42487: PPUSH
42488: CALL_OW 256
42492: PPUSH
42493: CALL_OW 2
42497: ST_TO_ADDR
42498: GO 42461
42500: POP
42501: POP
// if not tmp then
42502: LD_VAR 0 5
42506: NOT
42507: IFFALSE 42511
// exit ;
42509: GO 42559
// if asc then
42511: LD_VAR 0 2
42515: IFFALSE 42539
// result := SortListByListAsc ( units , tmp ) else
42517: LD_ADDR_VAR 0 3
42521: PUSH
42522: LD_VAR 0 1
42526: PPUSH
42527: LD_VAR 0 5
42531: PPUSH
42532: CALL_OW 76
42536: ST_TO_ADDR
42537: GO 42559
// result := SortListByListDesc ( units , tmp ) ;
42539: LD_ADDR_VAR 0 3
42543: PUSH
42544: LD_VAR 0 1
42548: PPUSH
42549: LD_VAR 0 5
42553: PPUSH
42554: CALL_OW 77
42558: ST_TO_ADDR
// end ;
42559: LD_VAR 0 3
42563: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42564: LD_INT 0
42566: PPUSH
42567: PPUSH
// task := GetTaskList ( mech ) ;
42568: LD_ADDR_VAR 0 4
42572: PUSH
42573: LD_VAR 0 1
42577: PPUSH
42578: CALL_OW 437
42582: ST_TO_ADDR
// if not task then
42583: LD_VAR 0 4
42587: NOT
42588: IFFALSE 42592
// exit ;
42590: GO 42634
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42592: LD_ADDR_VAR 0 3
42596: PUSH
42597: LD_VAR 0 4
42601: PUSH
42602: LD_INT 1
42604: ARRAY
42605: PUSH
42606: LD_INT 1
42608: ARRAY
42609: PUSH
42610: LD_STRING r
42612: EQUAL
42613: PUSH
42614: LD_VAR 0 4
42618: PUSH
42619: LD_INT 1
42621: ARRAY
42622: PUSH
42623: LD_INT 4
42625: ARRAY
42626: PUSH
42627: LD_VAR 0 2
42631: EQUAL
42632: AND
42633: ST_TO_ADDR
// end ;
42634: LD_VAR 0 3
42638: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42639: LD_INT 0
42641: PPUSH
// SetDir ( unit , d ) ;
42642: LD_VAR 0 1
42646: PPUSH
42647: LD_VAR 0 4
42651: PPUSH
42652: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42656: LD_VAR 0 1
42660: PPUSH
42661: LD_VAR 0 2
42665: PPUSH
42666: LD_VAR 0 3
42670: PPUSH
42671: LD_VAR 0 5
42675: PPUSH
42676: CALL_OW 48
// end ;
42680: LD_VAR 0 6
42684: RET
// export function ToNaturalNumber ( number ) ; begin
42685: LD_INT 0
42687: PPUSH
// result := number div 1 ;
42688: LD_ADDR_VAR 0 2
42692: PUSH
42693: LD_VAR 0 1
42697: PUSH
42698: LD_INT 1
42700: DIV
42701: ST_TO_ADDR
// if number < 0 then
42702: LD_VAR 0 1
42706: PUSH
42707: LD_INT 0
42709: LESS
42710: IFFALSE 42720
// result := 0 ;
42712: LD_ADDR_VAR 0 2
42716: PUSH
42717: LD_INT 0
42719: ST_TO_ADDR
// end ;
42720: LD_VAR 0 2
42724: RET
// export function SortByClass ( units , class ) ; var un ; begin
42725: LD_INT 0
42727: PPUSH
42728: PPUSH
// if not units or not class then
42729: LD_VAR 0 1
42733: NOT
42734: PUSH
42735: LD_VAR 0 2
42739: NOT
42740: OR
42741: IFFALSE 42745
// exit ;
42743: GO 42840
// result := [ ] ;
42745: LD_ADDR_VAR 0 3
42749: PUSH
42750: EMPTY
42751: ST_TO_ADDR
// for un in units do
42752: LD_ADDR_VAR 0 4
42756: PUSH
42757: LD_VAR 0 1
42761: PUSH
42762: FOR_IN
42763: IFFALSE 42838
// if GetClass ( un ) = class then
42765: LD_VAR 0 4
42769: PPUSH
42770: CALL_OW 257
42774: PUSH
42775: LD_VAR 0 2
42779: EQUAL
42780: IFFALSE 42807
// result := Insert ( result , 1 , un ) else
42782: LD_ADDR_VAR 0 3
42786: PUSH
42787: LD_VAR 0 3
42791: PPUSH
42792: LD_INT 1
42794: PPUSH
42795: LD_VAR 0 4
42799: PPUSH
42800: CALL_OW 2
42804: ST_TO_ADDR
42805: GO 42836
// result := Replace ( result , result + 1 , un ) ;
42807: LD_ADDR_VAR 0 3
42811: PUSH
42812: LD_VAR 0 3
42816: PPUSH
42817: LD_VAR 0 3
42821: PUSH
42822: LD_INT 1
42824: PLUS
42825: PPUSH
42826: LD_VAR 0 4
42830: PPUSH
42831: CALL_OW 1
42835: ST_TO_ADDR
42836: GO 42762
42838: POP
42839: POP
// end ;
42840: LD_VAR 0 3
42844: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42845: LD_INT 0
42847: PPUSH
42848: PPUSH
42849: PPUSH
42850: PPUSH
42851: PPUSH
42852: PPUSH
42853: PPUSH
// result := [ ] ;
42854: LD_ADDR_VAR 0 4
42858: PUSH
42859: EMPTY
42860: ST_TO_ADDR
// if x - r < 0 then
42861: LD_VAR 0 1
42865: PUSH
42866: LD_VAR 0 3
42870: MINUS
42871: PUSH
42872: LD_INT 0
42874: LESS
42875: IFFALSE 42887
// min_x := 0 else
42877: LD_ADDR_VAR 0 8
42881: PUSH
42882: LD_INT 0
42884: ST_TO_ADDR
42885: GO 42903
// min_x := x - r ;
42887: LD_ADDR_VAR 0 8
42891: PUSH
42892: LD_VAR 0 1
42896: PUSH
42897: LD_VAR 0 3
42901: MINUS
42902: ST_TO_ADDR
// if y - r < 0 then
42903: LD_VAR 0 2
42907: PUSH
42908: LD_VAR 0 3
42912: MINUS
42913: PUSH
42914: LD_INT 0
42916: LESS
42917: IFFALSE 42929
// min_y := 0 else
42919: LD_ADDR_VAR 0 7
42923: PUSH
42924: LD_INT 0
42926: ST_TO_ADDR
42927: GO 42945
// min_y := y - r ;
42929: LD_ADDR_VAR 0 7
42933: PUSH
42934: LD_VAR 0 2
42938: PUSH
42939: LD_VAR 0 3
42943: MINUS
42944: ST_TO_ADDR
// max_x := x + r ;
42945: LD_ADDR_VAR 0 9
42949: PUSH
42950: LD_VAR 0 1
42954: PUSH
42955: LD_VAR 0 3
42959: PLUS
42960: ST_TO_ADDR
// max_y := y + r ;
42961: LD_ADDR_VAR 0 10
42965: PUSH
42966: LD_VAR 0 2
42970: PUSH
42971: LD_VAR 0 3
42975: PLUS
42976: ST_TO_ADDR
// for _x = min_x to max_x do
42977: LD_ADDR_VAR 0 5
42981: PUSH
42982: DOUBLE
42983: LD_VAR 0 8
42987: DEC
42988: ST_TO_ADDR
42989: LD_VAR 0 9
42993: PUSH
42994: FOR_TO
42995: IFFALSE 43096
// for _y = min_y to max_y do
42997: LD_ADDR_VAR 0 6
43001: PUSH
43002: DOUBLE
43003: LD_VAR 0 7
43007: DEC
43008: ST_TO_ADDR
43009: LD_VAR 0 10
43013: PUSH
43014: FOR_TO
43015: IFFALSE 43092
// begin if not ValidHex ( _x , _y ) then
43017: LD_VAR 0 5
43021: PPUSH
43022: LD_VAR 0 6
43026: PPUSH
43027: CALL_OW 488
43031: NOT
43032: IFFALSE 43036
// continue ;
43034: GO 43014
// if GetResourceTypeXY ( _x , _y ) then
43036: LD_VAR 0 5
43040: PPUSH
43041: LD_VAR 0 6
43045: PPUSH
43046: CALL_OW 283
43050: IFFALSE 43090
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43052: LD_ADDR_VAR 0 4
43056: PUSH
43057: LD_VAR 0 4
43061: PPUSH
43062: LD_VAR 0 4
43066: PUSH
43067: LD_INT 1
43069: PLUS
43070: PPUSH
43071: LD_VAR 0 5
43075: PUSH
43076: LD_VAR 0 6
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PPUSH
43085: CALL_OW 1
43089: ST_TO_ADDR
// end ;
43090: GO 43014
43092: POP
43093: POP
43094: GO 42994
43096: POP
43097: POP
// end ;
43098: LD_VAR 0 4
43102: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43103: LD_INT 0
43105: PPUSH
43106: PPUSH
43107: PPUSH
43108: PPUSH
43109: PPUSH
43110: PPUSH
43111: PPUSH
43112: PPUSH
// if not units then
43113: LD_VAR 0 1
43117: NOT
43118: IFFALSE 43122
// exit ;
43120: GO 43650
// result := UnitFilter ( units , [ f_ok ] ) ;
43122: LD_ADDR_VAR 0 3
43126: PUSH
43127: LD_VAR 0 1
43131: PPUSH
43132: LD_INT 50
43134: PUSH
43135: EMPTY
43136: LIST
43137: PPUSH
43138: CALL_OW 72
43142: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43143: LD_ADDR_VAR 0 8
43147: PUSH
43148: LD_VAR 0 1
43152: PUSH
43153: LD_INT 1
43155: ARRAY
43156: PPUSH
43157: CALL_OW 255
43161: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43162: LD_ADDR_VAR 0 10
43166: PUSH
43167: LD_INT 29
43169: PUSH
43170: LD_INT 91
43172: PUSH
43173: LD_INT 49
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: ST_TO_ADDR
// if not result then
43181: LD_VAR 0 3
43185: NOT
43186: IFFALSE 43190
// exit ;
43188: GO 43650
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43190: LD_ADDR_VAR 0 5
43194: PUSH
43195: LD_INT 81
43197: PUSH
43198: LD_VAR 0 8
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PPUSH
43207: CALL_OW 69
43211: ST_TO_ADDR
// for i in result do
43212: LD_ADDR_VAR 0 4
43216: PUSH
43217: LD_VAR 0 3
43221: PUSH
43222: FOR_IN
43223: IFFALSE 43648
// begin tag := GetTag ( i ) + 1 ;
43225: LD_ADDR_VAR 0 9
43229: PUSH
43230: LD_VAR 0 4
43234: PPUSH
43235: CALL_OW 110
43239: PUSH
43240: LD_INT 1
43242: PLUS
43243: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43244: LD_ADDR_VAR 0 7
43248: PUSH
43249: LD_VAR 0 4
43253: PPUSH
43254: CALL_OW 250
43258: PPUSH
43259: LD_VAR 0 4
43263: PPUSH
43264: CALL_OW 251
43268: PPUSH
43269: LD_INT 4
43271: PPUSH
43272: CALL 42845 0 3
43276: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43277: LD_VAR 0 4
43281: PPUSH
43282: CALL_OW 247
43286: PUSH
43287: LD_INT 2
43289: EQUAL
43290: PUSH
43291: LD_VAR 0 7
43295: PUSH
43296: LD_INT 2
43298: GREATER
43299: AND
43300: PUSH
43301: LD_VAR 0 4
43305: PPUSH
43306: CALL_OW 264
43310: PUSH
43311: LD_VAR 0 10
43315: IN
43316: NOT
43317: AND
43318: IFFALSE 43357
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43320: LD_VAR 0 4
43324: PPUSH
43325: LD_VAR 0 7
43329: PUSH
43330: LD_INT 1
43332: ARRAY
43333: PUSH
43334: LD_INT 1
43336: ARRAY
43337: PPUSH
43338: LD_VAR 0 7
43342: PUSH
43343: LD_INT 1
43345: ARRAY
43346: PUSH
43347: LD_INT 2
43349: ARRAY
43350: PPUSH
43351: CALL_OW 116
43355: GO 43646
// if path > tag then
43357: LD_VAR 0 2
43361: PUSH
43362: LD_VAR 0 9
43366: GREATER
43367: IFFALSE 43575
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43369: LD_ADDR_VAR 0 6
43373: PUSH
43374: LD_VAR 0 5
43378: PPUSH
43379: LD_INT 91
43381: PUSH
43382: LD_VAR 0 4
43386: PUSH
43387: LD_INT 8
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: LIST
43394: PPUSH
43395: CALL_OW 72
43399: ST_TO_ADDR
// if nearEnemy then
43400: LD_VAR 0 6
43404: IFFALSE 43473
// begin if GetWeapon ( i ) = ru_time_lapser then
43406: LD_VAR 0 4
43410: PPUSH
43411: CALL_OW 264
43415: PUSH
43416: LD_INT 49
43418: EQUAL
43419: IFFALSE 43447
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43421: LD_VAR 0 4
43425: PPUSH
43426: LD_VAR 0 6
43430: PPUSH
43431: LD_VAR 0 4
43435: PPUSH
43436: CALL_OW 74
43440: PPUSH
43441: CALL_OW 112
43445: GO 43471
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43447: LD_VAR 0 4
43451: PPUSH
43452: LD_VAR 0 6
43456: PPUSH
43457: LD_VAR 0 4
43461: PPUSH
43462: CALL_OW 74
43466: PPUSH
43467: CALL 44721 0 2
// end else
43471: GO 43573
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43473: LD_VAR 0 4
43477: PPUSH
43478: LD_VAR 0 2
43482: PUSH
43483: LD_VAR 0 9
43487: ARRAY
43488: PUSH
43489: LD_INT 1
43491: ARRAY
43492: PPUSH
43493: LD_VAR 0 2
43497: PUSH
43498: LD_VAR 0 9
43502: ARRAY
43503: PUSH
43504: LD_INT 2
43506: ARRAY
43507: PPUSH
43508: CALL_OW 297
43512: PUSH
43513: LD_INT 6
43515: GREATER
43516: IFFALSE 43559
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43518: LD_VAR 0 4
43522: PPUSH
43523: LD_VAR 0 2
43527: PUSH
43528: LD_VAR 0 9
43532: ARRAY
43533: PUSH
43534: LD_INT 1
43536: ARRAY
43537: PPUSH
43538: LD_VAR 0 2
43542: PUSH
43543: LD_VAR 0 9
43547: ARRAY
43548: PUSH
43549: LD_INT 2
43551: ARRAY
43552: PPUSH
43553: CALL_OW 114
43557: GO 43573
// SetTag ( i , tag ) ;
43559: LD_VAR 0 4
43563: PPUSH
43564: LD_VAR 0 9
43568: PPUSH
43569: CALL_OW 109
// end else
43573: GO 43646
// if enemy then
43575: LD_VAR 0 5
43579: IFFALSE 43646
// begin if GetWeapon ( i ) = ru_time_lapser then
43581: LD_VAR 0 4
43585: PPUSH
43586: CALL_OW 264
43590: PUSH
43591: LD_INT 49
43593: EQUAL
43594: IFFALSE 43622
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43596: LD_VAR 0 4
43600: PPUSH
43601: LD_VAR 0 5
43605: PPUSH
43606: LD_VAR 0 4
43610: PPUSH
43611: CALL_OW 74
43615: PPUSH
43616: CALL_OW 112
43620: GO 43646
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43622: LD_VAR 0 4
43626: PPUSH
43627: LD_VAR 0 5
43631: PPUSH
43632: LD_VAR 0 4
43636: PPUSH
43637: CALL_OW 74
43641: PPUSH
43642: CALL 44721 0 2
// end ; end ;
43646: GO 43222
43648: POP
43649: POP
// end ;
43650: LD_VAR 0 3
43654: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43655: LD_INT 0
43657: PPUSH
43658: PPUSH
43659: PPUSH
// if not unit or IsInUnit ( unit ) then
43660: LD_VAR 0 1
43664: NOT
43665: PUSH
43666: LD_VAR 0 1
43670: PPUSH
43671: CALL_OW 310
43675: OR
43676: IFFALSE 43680
// exit ;
43678: GO 43771
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43680: LD_ADDR_VAR 0 4
43684: PUSH
43685: LD_VAR 0 1
43689: PPUSH
43690: CALL_OW 250
43694: PPUSH
43695: LD_VAR 0 2
43699: PPUSH
43700: LD_INT 1
43702: PPUSH
43703: CALL_OW 272
43707: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43708: LD_ADDR_VAR 0 5
43712: PUSH
43713: LD_VAR 0 1
43717: PPUSH
43718: CALL_OW 251
43722: PPUSH
43723: LD_VAR 0 2
43727: PPUSH
43728: LD_INT 1
43730: PPUSH
43731: CALL_OW 273
43735: ST_TO_ADDR
// if ValidHex ( x , y ) then
43736: LD_VAR 0 4
43740: PPUSH
43741: LD_VAR 0 5
43745: PPUSH
43746: CALL_OW 488
43750: IFFALSE 43771
// ComTurnXY ( unit , x , y ) ;
43752: LD_VAR 0 1
43756: PPUSH
43757: LD_VAR 0 4
43761: PPUSH
43762: LD_VAR 0 5
43766: PPUSH
43767: CALL_OW 118
// end ;
43771: LD_VAR 0 3
43775: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43776: LD_INT 0
43778: PPUSH
43779: PPUSH
// result := false ;
43780: LD_ADDR_VAR 0 3
43784: PUSH
43785: LD_INT 0
43787: ST_TO_ADDR
// if not units then
43788: LD_VAR 0 2
43792: NOT
43793: IFFALSE 43797
// exit ;
43795: GO 43842
// for i in units do
43797: LD_ADDR_VAR 0 4
43801: PUSH
43802: LD_VAR 0 2
43806: PUSH
43807: FOR_IN
43808: IFFALSE 43840
// if See ( side , i ) then
43810: LD_VAR 0 1
43814: PPUSH
43815: LD_VAR 0 4
43819: PPUSH
43820: CALL_OW 292
43824: IFFALSE 43838
// begin result := true ;
43826: LD_ADDR_VAR 0 3
43830: PUSH
43831: LD_INT 1
43833: ST_TO_ADDR
// exit ;
43834: POP
43835: POP
43836: GO 43842
// end ;
43838: GO 43807
43840: POP
43841: POP
// end ;
43842: LD_VAR 0 3
43846: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43847: LD_INT 0
43849: PPUSH
43850: PPUSH
43851: PPUSH
43852: PPUSH
// if not unit or not points then
43853: LD_VAR 0 1
43857: NOT
43858: PUSH
43859: LD_VAR 0 2
43863: NOT
43864: OR
43865: IFFALSE 43869
// exit ;
43867: GO 43959
// dist := 99999 ;
43869: LD_ADDR_VAR 0 5
43873: PUSH
43874: LD_INT 99999
43876: ST_TO_ADDR
// for i in points do
43877: LD_ADDR_VAR 0 4
43881: PUSH
43882: LD_VAR 0 2
43886: PUSH
43887: FOR_IN
43888: IFFALSE 43957
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43890: LD_ADDR_VAR 0 6
43894: PUSH
43895: LD_VAR 0 1
43899: PPUSH
43900: LD_VAR 0 4
43904: PUSH
43905: LD_INT 1
43907: ARRAY
43908: PPUSH
43909: LD_VAR 0 4
43913: PUSH
43914: LD_INT 2
43916: ARRAY
43917: PPUSH
43918: CALL_OW 297
43922: ST_TO_ADDR
// if tmpDist < dist then
43923: LD_VAR 0 6
43927: PUSH
43928: LD_VAR 0 5
43932: LESS
43933: IFFALSE 43955
// begin result := i ;
43935: LD_ADDR_VAR 0 3
43939: PUSH
43940: LD_VAR 0 4
43944: ST_TO_ADDR
// dist := tmpDist ;
43945: LD_ADDR_VAR 0 5
43949: PUSH
43950: LD_VAR 0 6
43954: ST_TO_ADDR
// end ; end ;
43955: GO 43887
43957: POP
43958: POP
// end ;
43959: LD_VAR 0 3
43963: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43964: LD_INT 0
43966: PPUSH
// uc_side := side ;
43967: LD_ADDR_OWVAR 20
43971: PUSH
43972: LD_VAR 0 1
43976: ST_TO_ADDR
// uc_nation := 3 ;
43977: LD_ADDR_OWVAR 21
43981: PUSH
43982: LD_INT 3
43984: ST_TO_ADDR
// vc_chassis := 25 ;
43985: LD_ADDR_OWVAR 37
43989: PUSH
43990: LD_INT 25
43992: ST_TO_ADDR
// vc_engine := engine_siberite ;
43993: LD_ADDR_OWVAR 39
43997: PUSH
43998: LD_INT 3
44000: ST_TO_ADDR
// vc_control := control_computer ;
44001: LD_ADDR_OWVAR 38
44005: PUSH
44006: LD_INT 3
44008: ST_TO_ADDR
// vc_weapon := 59 ;
44009: LD_ADDR_OWVAR 40
44013: PUSH
44014: LD_INT 59
44016: ST_TO_ADDR
// result := CreateVehicle ;
44017: LD_ADDR_VAR 0 5
44021: PUSH
44022: CALL_OW 45
44026: ST_TO_ADDR
// SetDir ( result , d ) ;
44027: LD_VAR 0 5
44031: PPUSH
44032: LD_VAR 0 4
44036: PPUSH
44037: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44041: LD_VAR 0 5
44045: PPUSH
44046: LD_VAR 0 2
44050: PPUSH
44051: LD_VAR 0 3
44055: PPUSH
44056: LD_INT 0
44058: PPUSH
44059: CALL_OW 48
// end ;
44063: LD_VAR 0 5
44067: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44068: LD_INT 0
44070: PPUSH
44071: PPUSH
44072: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44073: LD_ADDR_VAR 0 2
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44096: LD_VAR 0 1
44100: NOT
44101: PUSH
44102: LD_VAR 0 1
44106: PPUSH
44107: CALL_OW 264
44111: PUSH
44112: LD_INT 12
44114: PUSH
44115: LD_INT 51
44117: PUSH
44118: LD_INT 32
44120: PUSH
44121: LD_INT 89
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: IN
44130: NOT
44131: OR
44132: IFFALSE 44136
// exit ;
44134: GO 44234
// for i := 1 to 3 do
44136: LD_ADDR_VAR 0 3
44140: PUSH
44141: DOUBLE
44142: LD_INT 1
44144: DEC
44145: ST_TO_ADDR
44146: LD_INT 3
44148: PUSH
44149: FOR_TO
44150: IFFALSE 44232
// begin tmp := GetCargo ( cargo , i ) ;
44152: LD_ADDR_VAR 0 4
44156: PUSH
44157: LD_VAR 0 1
44161: PPUSH
44162: LD_VAR 0 3
44166: PPUSH
44167: CALL_OW 289
44171: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44172: LD_ADDR_VAR 0 2
44176: PUSH
44177: LD_VAR 0 2
44181: PPUSH
44182: LD_VAR 0 3
44186: PPUSH
44187: LD_VAR 0 4
44191: PPUSH
44192: CALL_OW 1
44196: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44197: LD_ADDR_VAR 0 2
44201: PUSH
44202: LD_VAR 0 2
44206: PPUSH
44207: LD_INT 4
44209: PPUSH
44210: LD_VAR 0 2
44214: PUSH
44215: LD_INT 4
44217: ARRAY
44218: PUSH
44219: LD_VAR 0 4
44223: PLUS
44224: PPUSH
44225: CALL_OW 1
44229: ST_TO_ADDR
// end ;
44230: GO 44149
44232: POP
44233: POP
// end ;
44234: LD_VAR 0 2
44238: RET
// export function Length ( array ) ; begin
44239: LD_INT 0
44241: PPUSH
// result := array + 0 ;
44242: LD_ADDR_VAR 0 2
44246: PUSH
44247: LD_VAR 0 1
44251: PUSH
44252: LD_INT 0
44254: PLUS
44255: ST_TO_ADDR
// end ;
44256: LD_VAR 0 2
44260: RET
// export function PrepareArray ( array ) ; begin
44261: LD_INT 0
44263: PPUSH
// result := array diff 0 ;
44264: LD_ADDR_VAR 0 2
44268: PUSH
44269: LD_VAR 0 1
44273: PUSH
44274: LD_INT 0
44276: DIFF
44277: ST_TO_ADDR
// if not result [ 1 ] then
44278: LD_VAR 0 2
44282: PUSH
44283: LD_INT 1
44285: ARRAY
44286: NOT
44287: IFFALSE 44307
// result := Delete ( result , 1 ) ;
44289: LD_ADDR_VAR 0 2
44293: PUSH
44294: LD_VAR 0 2
44298: PPUSH
44299: LD_INT 1
44301: PPUSH
44302: CALL_OW 3
44306: ST_TO_ADDR
// end ;
44307: LD_VAR 0 2
44311: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44312: LD_INT 0
44314: PPUSH
44315: PPUSH
44316: PPUSH
44317: PPUSH
// sibRocketRange := 25 ;
44318: LD_ADDR_VAR 0 6
44322: PUSH
44323: LD_INT 25
44325: ST_TO_ADDR
// result := false ;
44326: LD_ADDR_VAR 0 4
44330: PUSH
44331: LD_INT 0
44333: ST_TO_ADDR
// for i := 0 to 5 do
44334: LD_ADDR_VAR 0 5
44338: PUSH
44339: DOUBLE
44340: LD_INT 0
44342: DEC
44343: ST_TO_ADDR
44344: LD_INT 5
44346: PUSH
44347: FOR_TO
44348: IFFALSE 44415
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44350: LD_VAR 0 1
44354: PPUSH
44355: LD_VAR 0 5
44359: PPUSH
44360: LD_VAR 0 6
44364: PPUSH
44365: CALL_OW 272
44369: PPUSH
44370: LD_VAR 0 2
44374: PPUSH
44375: LD_VAR 0 5
44379: PPUSH
44380: LD_VAR 0 6
44384: PPUSH
44385: CALL_OW 273
44389: PPUSH
44390: LD_VAR 0 3
44394: PPUSH
44395: CALL_OW 309
44399: IFFALSE 44413
// begin result := true ;
44401: LD_ADDR_VAR 0 4
44405: PUSH
44406: LD_INT 1
44408: ST_TO_ADDR
// exit ;
44409: POP
44410: POP
44411: GO 44417
// end ;
44413: GO 44347
44415: POP
44416: POP
// end ;
44417: LD_VAR 0 4
44421: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44422: LD_INT 0
44424: PPUSH
44425: PPUSH
44426: PPUSH
// if btype = b_depot then
44427: LD_VAR 0 2
44431: PUSH
44432: LD_INT 0
44434: EQUAL
44435: IFFALSE 44447
// begin result := true ;
44437: LD_ADDR_VAR 0 3
44441: PUSH
44442: LD_INT 1
44444: ST_TO_ADDR
// exit ;
44445: GO 44563
// end ; pom := GetBase ( depot ) ;
44447: LD_ADDR_VAR 0 4
44451: PUSH
44452: LD_VAR 0 1
44456: PPUSH
44457: CALL_OW 274
44461: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44462: LD_ADDR_VAR 0 5
44466: PUSH
44467: LD_VAR 0 2
44471: PPUSH
44472: LD_VAR 0 1
44476: PPUSH
44477: CALL_OW 248
44481: PPUSH
44482: CALL_OW 450
44486: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44487: LD_ADDR_VAR 0 3
44491: PUSH
44492: LD_VAR 0 4
44496: PPUSH
44497: LD_INT 1
44499: PPUSH
44500: CALL_OW 275
44504: PUSH
44505: LD_VAR 0 5
44509: PUSH
44510: LD_INT 1
44512: ARRAY
44513: GREATEREQUAL
44514: PUSH
44515: LD_VAR 0 4
44519: PPUSH
44520: LD_INT 2
44522: PPUSH
44523: CALL_OW 275
44527: PUSH
44528: LD_VAR 0 5
44532: PUSH
44533: LD_INT 2
44535: ARRAY
44536: GREATEREQUAL
44537: AND
44538: PUSH
44539: LD_VAR 0 4
44543: PPUSH
44544: LD_INT 3
44546: PPUSH
44547: CALL_OW 275
44551: PUSH
44552: LD_VAR 0 5
44556: PUSH
44557: LD_INT 3
44559: ARRAY
44560: GREATEREQUAL
44561: AND
44562: ST_TO_ADDR
// end ;
44563: LD_VAR 0 3
44567: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44568: LD_INT 0
44570: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44571: LD_VAR 0 1
44575: PPUSH
44576: LD_VAR 0 2
44580: PPUSH
44581: LD_INT 0
44583: PPUSH
44584: LD_INT 0
44586: PPUSH
44587: LD_INT 1
44589: PPUSH
44590: LD_INT 0
44592: PPUSH
44593: CALL_OW 587
// end ;
44597: LD_VAR 0 3
44601: RET
// export function CenterOnNow ( unit ) ; begin
44602: LD_INT 0
44604: PPUSH
// result := IsInUnit ( unit ) ;
44605: LD_ADDR_VAR 0 2
44609: PUSH
44610: LD_VAR 0 1
44614: PPUSH
44615: CALL_OW 310
44619: ST_TO_ADDR
// if not result then
44620: LD_VAR 0 2
44624: NOT
44625: IFFALSE 44637
// result := unit ;
44627: LD_ADDR_VAR 0 2
44631: PUSH
44632: LD_VAR 0 1
44636: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44637: LD_VAR 0 1
44641: PPUSH
44642: CALL_OW 87
// end ;
44646: LD_VAR 0 2
44650: RET
// export function ComMoveHex ( unit , hex ) ; begin
44651: LD_INT 0
44653: PPUSH
// if not hex then
44654: LD_VAR 0 2
44658: NOT
44659: IFFALSE 44663
// exit ;
44661: GO 44716
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44663: LD_VAR 0 2
44667: PUSH
44668: LD_INT 1
44670: ARRAY
44671: PPUSH
44672: LD_VAR 0 2
44676: PUSH
44677: LD_INT 2
44679: ARRAY
44680: PPUSH
44681: CALL_OW 428
44685: IFFALSE 44689
// exit ;
44687: GO 44716
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44689: LD_VAR 0 1
44693: PPUSH
44694: LD_VAR 0 2
44698: PUSH
44699: LD_INT 1
44701: ARRAY
44702: PPUSH
44703: LD_VAR 0 2
44707: PUSH
44708: LD_INT 2
44710: ARRAY
44711: PPUSH
44712: CALL_OW 111
// end ;
44716: LD_VAR 0 3
44720: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44721: LD_INT 0
44723: PPUSH
44724: PPUSH
44725: PPUSH
// if not unit or not enemy then
44726: LD_VAR 0 1
44730: NOT
44731: PUSH
44732: LD_VAR 0 2
44736: NOT
44737: OR
44738: IFFALSE 44742
// exit ;
44740: GO 44866
// x := GetX ( enemy ) ;
44742: LD_ADDR_VAR 0 4
44746: PUSH
44747: LD_VAR 0 2
44751: PPUSH
44752: CALL_OW 250
44756: ST_TO_ADDR
// y := GetY ( enemy ) ;
44757: LD_ADDR_VAR 0 5
44761: PUSH
44762: LD_VAR 0 2
44766: PPUSH
44767: CALL_OW 251
44771: ST_TO_ADDR
// if ValidHex ( x , y ) then
44772: LD_VAR 0 4
44776: PPUSH
44777: LD_VAR 0 5
44781: PPUSH
44782: CALL_OW 488
44786: IFFALSE 44866
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44788: LD_VAR 0 2
44792: PPUSH
44793: CALL_OW 247
44797: PUSH
44798: LD_INT 3
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: IN
44808: PUSH
44809: LD_VAR 0 1
44813: PPUSH
44814: CALL_OW 255
44818: PPUSH
44819: LD_VAR 0 2
44823: PPUSH
44824: CALL_OW 292
44828: OR
44829: IFFALSE 44847
// ComAttackUnit ( unit , enemy ) else
44831: LD_VAR 0 1
44835: PPUSH
44836: LD_VAR 0 2
44840: PPUSH
44841: CALL_OW 115
44845: GO 44866
// ComAgressiveMove ( unit , x , y ) ;
44847: LD_VAR 0 1
44851: PPUSH
44852: LD_VAR 0 4
44856: PPUSH
44857: LD_VAR 0 5
44861: PPUSH
44862: CALL_OW 114
// end ;
44866: LD_VAR 0 3
44870: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44871: LD_INT 0
44873: PPUSH
44874: PPUSH
44875: PPUSH
// list := AreaToList ( area , 0 ) ;
44876: LD_ADDR_VAR 0 5
44880: PUSH
44881: LD_VAR 0 1
44885: PPUSH
44886: LD_INT 0
44888: PPUSH
44889: CALL_OW 517
44893: ST_TO_ADDR
// if not list then
44894: LD_VAR 0 5
44898: NOT
44899: IFFALSE 44903
// exit ;
44901: GO 45033
// if all then
44903: LD_VAR 0 2
44907: IFFALSE 44995
// begin for i := 1 to list [ 1 ] do
44909: LD_ADDR_VAR 0 4
44913: PUSH
44914: DOUBLE
44915: LD_INT 1
44917: DEC
44918: ST_TO_ADDR
44919: LD_VAR 0 5
44923: PUSH
44924: LD_INT 1
44926: ARRAY
44927: PUSH
44928: FOR_TO
44929: IFFALSE 44991
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44931: LD_ADDR_VAR 0 3
44935: PUSH
44936: LD_VAR 0 3
44940: PPUSH
44941: LD_VAR 0 3
44945: PUSH
44946: LD_INT 1
44948: PLUS
44949: PPUSH
44950: LD_VAR 0 5
44954: PUSH
44955: LD_INT 1
44957: ARRAY
44958: PUSH
44959: LD_VAR 0 4
44963: ARRAY
44964: PUSH
44965: LD_VAR 0 5
44969: PUSH
44970: LD_INT 2
44972: ARRAY
44973: PUSH
44974: LD_VAR 0 4
44978: ARRAY
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PPUSH
44984: CALL_OW 1
44988: ST_TO_ADDR
44989: GO 44928
44991: POP
44992: POP
// exit ;
44993: GO 45033
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44995: LD_ADDR_VAR 0 3
44999: PUSH
45000: LD_VAR 0 5
45004: PUSH
45005: LD_INT 1
45007: ARRAY
45008: PUSH
45009: LD_INT 1
45011: ARRAY
45012: PUSH
45013: LD_VAR 0 5
45017: PUSH
45018: LD_INT 2
45020: ARRAY
45021: PUSH
45022: LD_INT 1
45024: ARRAY
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: EMPTY
45031: LIST
45032: ST_TO_ADDR
// end ;
45033: LD_VAR 0 3
45037: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45038: LD_INT 0
45040: PPUSH
45041: PPUSH
// list := AreaToList ( area , 0 ) ;
45042: LD_ADDR_VAR 0 4
45046: PUSH
45047: LD_VAR 0 1
45051: PPUSH
45052: LD_INT 0
45054: PPUSH
45055: CALL_OW 517
45059: ST_TO_ADDR
// if not list then
45060: LD_VAR 0 4
45064: NOT
45065: IFFALSE 45069
// exit ;
45067: GO 45110
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45069: LD_ADDR_VAR 0 3
45073: PUSH
45074: LD_VAR 0 4
45078: PUSH
45079: LD_INT 1
45081: ARRAY
45082: PUSH
45083: LD_INT 1
45085: ARRAY
45086: PUSH
45087: LD_VAR 0 4
45091: PUSH
45092: LD_INT 2
45094: ARRAY
45095: PUSH
45096: LD_INT 1
45098: ARRAY
45099: PUSH
45100: LD_VAR 0 2
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: LIST
45109: ST_TO_ADDR
// end ;
45110: LD_VAR 0 3
45114: RET
// export function First ( array ) ; begin
45115: LD_INT 0
45117: PPUSH
// if not array then
45118: LD_VAR 0 1
45122: NOT
45123: IFFALSE 45127
// exit ;
45125: GO 45141
// result := array [ 1 ] ;
45127: LD_ADDR_VAR 0 2
45131: PUSH
45132: LD_VAR 0 1
45136: PUSH
45137: LD_INT 1
45139: ARRAY
45140: ST_TO_ADDR
// end ;
45141: LD_VAR 0 2
45145: RET
// export function Last ( array ) ; begin
45146: LD_INT 0
45148: PPUSH
// if not array then
45149: LD_VAR 0 1
45153: NOT
45154: IFFALSE 45158
// exit ;
45156: GO 45174
// result := array [ array ] ;
45158: LD_ADDR_VAR 0 2
45162: PUSH
45163: LD_VAR 0 1
45167: PUSH
45168: LD_VAR 0 1
45172: ARRAY
45173: ST_TO_ADDR
// end ;
45174: LD_VAR 0 2
45178: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45179: LD_INT 0
45181: PPUSH
45182: PPUSH
// result := [ ] ;
45183: LD_ADDR_VAR 0 5
45187: PUSH
45188: EMPTY
45189: ST_TO_ADDR
// if not array then
45190: LD_VAR 0 1
45194: NOT
45195: IFFALSE 45199
// exit ;
45197: GO 45311
// for i := 1 to array do
45199: LD_ADDR_VAR 0 6
45203: PUSH
45204: DOUBLE
45205: LD_INT 1
45207: DEC
45208: ST_TO_ADDR
45209: LD_VAR 0 1
45213: PUSH
45214: FOR_TO
45215: IFFALSE 45309
// if array [ i ] [ index ] = value then
45217: LD_VAR 0 1
45221: PUSH
45222: LD_VAR 0 6
45226: ARRAY
45227: PUSH
45228: LD_VAR 0 2
45232: ARRAY
45233: PUSH
45234: LD_VAR 0 3
45238: EQUAL
45239: IFFALSE 45307
// begin if indexColumn then
45241: LD_VAR 0 4
45245: IFFALSE 45281
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45247: LD_ADDR_VAR 0 5
45251: PUSH
45252: LD_VAR 0 5
45256: PPUSH
45257: LD_VAR 0 1
45261: PUSH
45262: LD_VAR 0 6
45266: ARRAY
45267: PUSH
45268: LD_VAR 0 4
45272: ARRAY
45273: PPUSH
45274: CALL 40499 0 2
45278: ST_TO_ADDR
45279: GO 45307
// result := Join ( result , array [ i ] ) ;
45281: LD_ADDR_VAR 0 5
45285: PUSH
45286: LD_VAR 0 5
45290: PPUSH
45291: LD_VAR 0 1
45295: PUSH
45296: LD_VAR 0 6
45300: ARRAY
45301: PPUSH
45302: CALL 40499 0 2
45306: ST_TO_ADDR
// end ;
45307: GO 45214
45309: POP
45310: POP
// end ;
45311: LD_VAR 0 5
45315: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45316: LD_INT 0
45318: PPUSH
// if not vehicles or not parkingPoint then
45319: LD_VAR 0 1
45323: NOT
45324: PUSH
45325: LD_VAR 0 2
45329: NOT
45330: OR
45331: IFFALSE 45335
// exit ;
45333: GO 45433
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45335: LD_ADDR_VAR 0 1
45339: PUSH
45340: LD_VAR 0 1
45344: PPUSH
45345: LD_INT 50
45347: PUSH
45348: EMPTY
45349: LIST
45350: PUSH
45351: LD_INT 3
45353: PUSH
45354: LD_INT 92
45356: PUSH
45357: LD_VAR 0 2
45361: PUSH
45362: LD_INT 1
45364: ARRAY
45365: PUSH
45366: LD_VAR 0 2
45370: PUSH
45371: LD_INT 2
45373: ARRAY
45374: PUSH
45375: LD_INT 8
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PPUSH
45392: CALL_OW 72
45396: ST_TO_ADDR
// if not vehicles then
45397: LD_VAR 0 1
45401: NOT
45402: IFFALSE 45406
// exit ;
45404: GO 45433
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45406: LD_VAR 0 1
45410: PPUSH
45411: LD_VAR 0 2
45415: PUSH
45416: LD_INT 1
45418: ARRAY
45419: PPUSH
45420: LD_VAR 0 2
45424: PUSH
45425: LD_INT 2
45427: ARRAY
45428: PPUSH
45429: CALL_OW 111
// end ;
45433: LD_VAR 0 3
45437: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45438: LD_INT 0
45440: PPUSH
45441: PPUSH
45442: PPUSH
// if not side or not area then
45443: LD_VAR 0 1
45447: NOT
45448: PUSH
45449: LD_VAR 0 2
45453: NOT
45454: OR
45455: IFFALSE 45459
// exit ;
45457: GO 45578
// tmp := AreaToList ( area , 0 ) ;
45459: LD_ADDR_VAR 0 5
45463: PUSH
45464: LD_VAR 0 2
45468: PPUSH
45469: LD_INT 0
45471: PPUSH
45472: CALL_OW 517
45476: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45477: LD_ADDR_VAR 0 4
45481: PUSH
45482: DOUBLE
45483: LD_INT 1
45485: DEC
45486: ST_TO_ADDR
45487: LD_VAR 0 5
45491: PUSH
45492: LD_INT 1
45494: ARRAY
45495: PUSH
45496: FOR_TO
45497: IFFALSE 45576
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45499: LD_VAR 0 5
45503: PUSH
45504: LD_INT 1
45506: ARRAY
45507: PUSH
45508: LD_VAR 0 4
45512: ARRAY
45513: PPUSH
45514: LD_VAR 0 5
45518: PUSH
45519: LD_INT 2
45521: ARRAY
45522: PUSH
45523: LD_VAR 0 4
45527: ARRAY
45528: PPUSH
45529: CALL_OW 351
45533: IFFALSE 45574
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45535: LD_VAR 0 5
45539: PUSH
45540: LD_INT 1
45542: ARRAY
45543: PUSH
45544: LD_VAR 0 4
45548: ARRAY
45549: PPUSH
45550: LD_VAR 0 5
45554: PUSH
45555: LD_INT 2
45557: ARRAY
45558: PUSH
45559: LD_VAR 0 4
45563: ARRAY
45564: PPUSH
45565: LD_VAR 0 1
45569: PPUSH
45570: CALL_OW 244
// end ;
45574: GO 45496
45576: POP
45577: POP
// end ; end_of_file
45578: LD_VAR 0 3
45582: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45583: LD_INT 0
45585: PPUSH
45586: PPUSH
// disable ( mpActive ) ;
45587: LD_INT 100
45589: DISABLE_MARKED
// disable ( mpWin ) ;
45590: LD_INT 101
45592: DISABLE_MARKED
// disable ( mpLose ) ;
45593: LD_INT 102
45595: DISABLE_MARKED
// mpGameType := 0 ;
45596: LD_ADDR_EXP 1
45600: PUSH
45601: LD_INT 0
45603: ST_TO_ADDR
// mpGameSettings := [ ] ;
45604: LD_ADDR_EXP 4
45608: PUSH
45609: EMPTY
45610: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45611: LD_ADDR_EXP 2
45615: PUSH
45616: EMPTY
45617: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45618: LD_ADDR_EXP 3
45622: PUSH
45623: EMPTY
45624: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45625: LD_ADDR_EXP 27
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45640: LD_ADDR_EXP 10
45644: PUSH
45645: EMPTY
45646: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45647: LD_ADDR_EXP 11
45651: PUSH
45652: EMPTY
45653: ST_TO_ADDR
// mpDepots := [ ] ;
45654: LD_ADDR_EXP 12
45658: PUSH
45659: EMPTY
45660: ST_TO_ADDR
// mpBuildings := [ ] ;
45661: LD_ADDR_EXP 15
45665: PUSH
45666: EMPTY
45667: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45668: LD_ADDR_EXP 16
45672: PUSH
45673: EMPTY
45674: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45675: LD_ADDR_EXP 17
45679: PUSH
45680: EMPTY
45681: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45682: LD_ADDR_EXP 18
45686: PUSH
45687: EMPTY
45688: ST_TO_ADDR
// mpStartingResources := [ ] ;
45689: LD_ADDR_EXP 13
45693: PUSH
45694: EMPTY
45695: ST_TO_ADDR
// mpStartPos := [ ] ;
45696: LD_ADDR_EXP 19
45700: PUSH
45701: EMPTY
45702: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45703: LD_ADDR_EXP 20
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45712: LD_ADDR_EXP 21
45716: PUSH
45717: EMPTY
45718: ST_TO_ADDR
// mpApemans := [ ] ;
45719: LD_ADDR_EXP 28
45723: PUSH
45724: EMPTY
45725: ST_TO_ADDR
// mpApemansArea := [ ] ;
45726: LD_ADDR_EXP 29
45730: PUSH
45731: EMPTY
45732: ST_TO_ADDR
// mpRespawn := [ ] ;
45733: LD_ADDR_EXP 30
45737: PUSH
45738: EMPTY
45739: ST_TO_ADDR
// mpKingArea := 0 ;
45740: LD_ADDR_EXP 31
45744: PUSH
45745: LD_INT 0
45747: ST_TO_ADDR
// mpPoints := [ ] ;
45748: LD_ADDR_EXP 32
45752: PUSH
45753: EMPTY
45754: ST_TO_ADDR
// mpVehicles := 0 ;
45755: LD_ADDR_EXP 33
45759: PUSH
45760: LD_INT 0
45762: ST_TO_ADDR
// mpShipments := 0 ;
45763: LD_ADDR_EXP 25
45767: PUSH
45768: LD_INT 0
45770: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45771: LD_ADDR_EXP 37
45775: PUSH
45776: EMPTY
45777: PUSH
45778: EMPTY
45779: PUSH
45780: EMPTY
45781: PUSH
45782: EMPTY
45783: PUSH
45784: EMPTY
45785: PUSH
45786: EMPTY
45787: PUSH
45788: EMPTY
45789: PUSH
45790: EMPTY
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: ST_TO_ADDR
// mpEmissions := 0 ;
45802: LD_ADDR_EXP 34
45806: PUSH
45807: LD_INT 0
45809: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45810: LD_ADDR_EXP 23
45814: PUSH
45815: LD_INT 3
45817: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45818: LD_ADDR_EXP 22
45822: PUSH
45823: LD_INT 15
45825: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45826: LD_ADDR_EXP 35
45830: PUSH
45831: LD_INT 0
45833: ST_TO_ADDR
// mpGameActive := false ;
45834: LD_ADDR_EXP 36
45838: PUSH
45839: LD_INT 0
45841: ST_TO_ADDR
// mpBlockRespThread := false ;
45842: LD_ADDR_EXP 38
45846: PUSH
45847: LD_INT 0
45849: ST_TO_ADDR
// for i := 1 to 32 do
45850: LD_ADDR_VAR 0 2
45854: PUSH
45855: DOUBLE
45856: LD_INT 1
45858: DEC
45859: ST_TO_ADDR
45860: LD_INT 32
45862: PUSH
45863: FOR_TO
45864: IFFALSE 45891
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
45866: LD_ADDR_EXP 4
45870: PUSH
45871: LD_EXP 4
45875: PPUSH
45876: LD_VAR 0 2
45880: PPUSH
45881: LD_INT 0
45883: PPUSH
45884: CALL_OW 1
45888: ST_TO_ADDR
45889: GO 45863
45891: POP
45892: POP
// end ;
45893: LD_VAR 0 1
45897: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
45898: LD_INT 0
45900: PPUSH
45901: PPUSH
45902: PPUSH
45903: PPUSH
45904: PPUSH
45905: PPUSH
45906: PPUSH
45907: PPUSH
45908: PPUSH
45909: PPUSH
45910: PPUSH
45911: PPUSH
45912: PPUSH
45913: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
45914: LD_ADDR_VAR 0 14
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: LD_INT 3
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: LIST
45932: ST_TO_ADDR
// for i in gameTypes do
45933: LD_ADDR_VAR 0 2
45937: PUSH
45938: LD_VAR 0 14
45942: PUSH
45943: FOR_IN
45944: IFFALSE 45953
// disable ( i ) ;
45946: LD_VAR 0 2
45950: DISABLE_MARKED
45951: GO 45943
45953: POP
45954: POP
// if Multiplayer then
45955: LD_OWVAR 4
45959: IFFALSE 46143
// begin mpGameType := mp_game_type ;
45961: LD_ADDR_EXP 1
45965: PUSH
45966: LD_OWVAR 6
45970: ST_TO_ADDR
// your_side := mp_player_side ;
45971: LD_ADDR_OWVAR 2
45975: PUSH
45976: LD_OWVAR 7
45980: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
45981: LD_ADDR_EXP 5
45985: PUSH
45986: LD_OWVAR 17
45990: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
45991: LD_ADDR_EXP 6
45995: PUSH
45996: LD_OWVAR 15
46000: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46001: LD_ADDR_EXP 7
46005: PUSH
46006: LD_OWVAR 16
46010: ST_TO_ADDR
// mpTeams := mp_teams ;
46011: LD_ADDR_EXP 8
46015: PUSH
46016: LD_OWVAR 12
46020: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46021: LD_ADDR_VAR 0 2
46025: PUSH
46026: DOUBLE
46027: LD_INT 1
46029: DEC
46030: ST_TO_ADDR
46031: LD_EXP 2
46035: PPUSH
46036: CALL 4910 0 1
46040: PUSH
46041: FOR_TO
46042: IFFALSE 46118
// begin setting := mpGameSettingsKeys [ i ] ;
46044: LD_ADDR_VAR 0 12
46048: PUSH
46049: LD_EXP 2
46053: PUSH
46054: LD_VAR 0 2
46058: ARRAY
46059: ST_TO_ADDR
// if setting then
46060: LD_VAR 0 12
46064: IFFALSE 46116
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46066: LD_ADDR_EXP 4
46070: PUSH
46071: LD_EXP 4
46075: PPUSH
46076: LD_VAR 0 2
46080: PPUSH
46081: LD_EXP 3
46085: PUSH
46086: LD_VAR 0 2
46090: ARRAY
46091: PUSH
46092: LD_VAR 0 2
46096: PUSH
46097: LD_INT 1
46099: MINUS
46100: PPUSH
46101: CALL_OW 426
46105: PUSH
46106: LD_INT 1
46108: PLUS
46109: ARRAY
46110: PPUSH
46111: CALL_OW 1
46115: ST_TO_ADDR
// end ;
46116: GO 46041
46118: POP
46119: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46120: LD_ADDR_EXP 9
46124: PUSH
46125: LD_EXP 6
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: EMPTY
46134: LIST
46135: DIFF
46136: PUSH
46137: LD_INT 1
46139: GREATER
46140: ST_TO_ADDR
// end else
46141: GO 46143
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46143: LD_EXP 1
46147: PPUSH
46148: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
46152: LD_EXP 16
46156: PPUSH
46157: CALL 4910 0 1
46161: IFFALSE 46192
// begin for i in mpMarkedAreas do
46163: LD_ADDR_VAR 0 2
46167: PUSH
46168: LD_EXP 16
46172: PUSH
46173: FOR_IN
46174: IFFALSE 46190
// SetAreaMapShow ( i , 0 ) ;
46176: LD_VAR 0 2
46180: PPUSH
46181: LD_INT 0
46183: PPUSH
46184: CALL_OW 424
46188: GO 46173
46190: POP
46191: POP
// end ; for i := 1 to 8 do
46192: LD_ADDR_VAR 0 2
46196: PUSH
46197: DOUBLE
46198: LD_INT 1
46200: DEC
46201: ST_TO_ADDR
46202: LD_INT 8
46204: PUSH
46205: FOR_TO
46206: IFFALSE 47422
// begin if not mpSidePositions [ i ] then
46208: LD_EXP 5
46212: PUSH
46213: LD_VAR 0 2
46217: ARRAY
46218: NOT
46219: IFFALSE 46223
// continue ;
46221: GO 46205
// side := i ;
46223: LD_ADDR_VAR 0 7
46227: PUSH
46228: LD_VAR 0 2
46232: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46233: LD_ADDR_VAR 0 9
46237: PUSH
46238: LD_EXP 7
46242: PUSH
46243: LD_VAR 0 2
46247: ARRAY
46248: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46249: LD_ADDR_VAR 0 8
46253: PUSH
46254: LD_EXP 5
46258: PUSH
46259: LD_VAR 0 2
46263: ARRAY
46264: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46265: LD_EXP 10
46269: PPUSH
46270: CALL 4910 0 1
46274: IFFALSE 46351
// begin for j in mpOilDeposits [ pos ] do
46276: LD_ADDR_VAR 0 3
46280: PUSH
46281: LD_EXP 10
46285: PUSH
46286: LD_VAR 0 8
46290: ARRAY
46291: PUSH
46292: FOR_IN
46293: IFFALSE 46349
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46295: LD_VAR 0 3
46299: PUSH
46300: LD_INT 1
46302: ARRAY
46303: PPUSH
46304: LD_VAR 0 3
46308: PUSH
46309: LD_INT 2
46311: ARRAY
46312: PPUSH
46313: LD_INT 2
46315: PPUSH
46316: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46320: LD_VAR 0 3
46324: PUSH
46325: LD_INT 1
46327: ARRAY
46328: PPUSH
46329: LD_VAR 0 3
46333: PUSH
46334: LD_INT 2
46336: ARRAY
46337: PPUSH
46338: LD_VAR 0 7
46342: PPUSH
46343: CALL_OW 441
// end ;
46347: GO 46292
46349: POP
46350: POP
// end ; if Count ( mpSibDeposits ) then
46351: LD_EXP 11
46355: PPUSH
46356: CALL 4910 0 1
46360: IFFALSE 46437
// begin for j in mpSibDeposits [ pos ] do
46362: LD_ADDR_VAR 0 3
46366: PUSH
46367: LD_EXP 11
46371: PUSH
46372: LD_VAR 0 8
46376: ARRAY
46377: PUSH
46378: FOR_IN
46379: IFFALSE 46435
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46381: LD_VAR 0 3
46385: PUSH
46386: LD_INT 1
46388: ARRAY
46389: PPUSH
46390: LD_VAR 0 3
46394: PUSH
46395: LD_INT 2
46397: ARRAY
46398: PPUSH
46399: LD_INT 3
46401: PPUSH
46402: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46406: LD_VAR 0 3
46410: PUSH
46411: LD_INT 1
46413: ARRAY
46414: PPUSH
46415: LD_VAR 0 3
46419: PUSH
46420: LD_INT 2
46422: ARRAY
46423: PPUSH
46424: LD_VAR 0 7
46428: PPUSH
46429: CALL_OW 441
// end ;
46433: GO 46378
46435: POP
46436: POP
// end ; InitBc ;
46437: CALL_OW 21
// InitUc ;
46441: CALL_OW 18
// uc_side := side ;
46445: LD_ADDR_OWVAR 20
46449: PUSH
46450: LD_VAR 0 7
46454: ST_TO_ADDR
// uc_nation := nation ;
46455: LD_ADDR_OWVAR 21
46459: PUSH
46460: LD_VAR 0 9
46464: ST_TO_ADDR
// if Count ( mpDepots ) then
46465: LD_EXP 12
46469: PPUSH
46470: CALL 4910 0 1
46474: IFFALSE 46644
// begin bc_level := 0 ;
46476: LD_ADDR_OWVAR 43
46480: PUSH
46481: LD_INT 0
46483: ST_TO_ADDR
// bc_type := b_depot ;
46484: LD_ADDR_OWVAR 42
46488: PUSH
46489: LD_INT 0
46491: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46492: LD_ADDR_VAR 0 4
46496: PUSH
46497: LD_EXP 12
46501: PUSH
46502: LD_VAR 0 8
46506: ARRAY
46507: PUSH
46508: LD_INT 1
46510: ARRAY
46511: PPUSH
46512: LD_EXP 12
46516: PUSH
46517: LD_VAR 0 8
46521: ARRAY
46522: PUSH
46523: LD_INT 2
46525: ARRAY
46526: PPUSH
46527: LD_EXP 12
46531: PUSH
46532: LD_VAR 0 8
46536: ARRAY
46537: PUSH
46538: LD_INT 3
46540: ARRAY
46541: PPUSH
46542: CALL_OW 47
46546: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46547: LD_VAR 0 4
46551: PPUSH
46552: LD_STRING @
46554: PUSH
46555: LD_VAR 0 7
46559: STR
46560: PPUSH
46561: CALL_OW 500
// SetTag ( b , side ) ;
46565: LD_VAR 0 4
46569: PPUSH
46570: LD_VAR 0 7
46574: PPUSH
46575: CALL_OW 109
// if Count ( mpStartingResources ) then
46579: LD_EXP 13
46583: PPUSH
46584: CALL 4910 0 1
46588: IFFALSE 46642
// begin for j := 1 to mpStartingResources do
46590: LD_ADDR_VAR 0 3
46594: PUSH
46595: DOUBLE
46596: LD_INT 1
46598: DEC
46599: ST_TO_ADDR
46600: LD_EXP 13
46604: PUSH
46605: FOR_TO
46606: IFFALSE 46640
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46608: LD_VAR 0 4
46612: PPUSH
46613: CALL_OW 274
46617: PPUSH
46618: LD_VAR 0 3
46622: PPUSH
46623: LD_EXP 13
46627: PUSH
46628: LD_VAR 0 3
46632: ARRAY
46633: PPUSH
46634: CALL_OW 277
46638: GO 46605
46640: POP
46641: POP
// end ; end else
46642: GO 46791
// if Count ( mpStartingResources ) then
46644: LD_EXP 13
46648: PPUSH
46649: CALL 4910 0 1
46653: IFFALSE 46791
// begin for j := 1 to mpStartingResources do
46655: LD_ADDR_VAR 0 3
46659: PUSH
46660: DOUBLE
46661: LD_INT 1
46663: DEC
46664: ST_TO_ADDR
46665: LD_EXP 13
46669: PUSH
46670: FOR_TO
46671: IFFALSE 46789
// begin resources := mpStartingResources [ j ] ;
46673: LD_ADDR_VAR 0 13
46677: PUSH
46678: LD_EXP 13
46682: PUSH
46683: LD_VAR 0 3
46687: ARRAY
46688: ST_TO_ADDR
// repeat if resources >= 50 then
46689: LD_VAR 0 13
46693: PUSH
46694: LD_INT 50
46696: GREATEREQUAL
46697: IFFALSE 46743
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46699: LD_VAR 0 3
46703: PPUSH
46704: LD_INT 5
46706: PPUSH
46707: LD_VAR 0 5
46711: PPUSH
46712: LD_VAR 0 6
46716: PPUSH
46717: LD_INT 4
46719: PPUSH
46720: LD_INT 0
46722: PPUSH
46723: CALL_OW 60
// resources := resources - 50 ;
46727: LD_ADDR_VAR 0 13
46731: PUSH
46732: LD_VAR 0 13
46736: PUSH
46737: LD_INT 50
46739: MINUS
46740: ST_TO_ADDR
// end else
46741: GO 46777
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46743: LD_VAR 0 3
46747: PPUSH
46748: LD_VAR 0 13
46752: PUSH
46753: LD_INT 10
46755: DIV
46756: PPUSH
46757: LD_VAR 0 5
46761: PPUSH
46762: LD_VAR 0 6
46766: PPUSH
46767: LD_INT 4
46769: PPUSH
46770: LD_INT 0
46772: PPUSH
46773: CALL_OW 60
// until resources <= 0 ;
46777: LD_VAR 0 13
46781: PUSH
46782: LD_INT 0
46784: LESSEQUAL
46785: IFFALSE 46689
// end ;
46787: GO 46670
46789: POP
46790: POP
// end ; if Count ( mpBuildings ) then
46791: LD_EXP 15
46795: PPUSH
46796: CALL 4910 0 1
46800: IFFALSE 46878
// begin for j in mpBuildings [ pos ] do
46802: LD_ADDR_VAR 0 3
46806: PUSH
46807: LD_EXP 15
46811: PUSH
46812: LD_VAR 0 8
46816: ARRAY
46817: PUSH
46818: FOR_IN
46819: IFFALSE 46876
// begin bc_level := 0 ;
46821: LD_ADDR_OWVAR 43
46825: PUSH
46826: LD_INT 0
46828: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46829: LD_ADDR_OWVAR 42
46833: PUSH
46834: LD_VAR 0 3
46838: PUSH
46839: LD_INT 1
46841: ARRAY
46842: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46843: LD_VAR 0 3
46847: PUSH
46848: LD_INT 2
46850: ARRAY
46851: PPUSH
46852: LD_VAR 0 3
46856: PUSH
46857: LD_INT 3
46859: ARRAY
46860: PPUSH
46861: LD_VAR 0 3
46865: PUSH
46866: LD_INT 4
46868: ARRAY
46869: PPUSH
46870: CALL_OW 47
// end ;
46874: GO 46818
46876: POP
46877: POP
// end ; if mpBattleFlag > - 1 then
46878: LD_EXP 20
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: GREATER
46887: IFFALSE 47046
// begin x := mpStartPos [ pos ] [ 1 ] ;
46889: LD_ADDR_VAR 0 5
46893: PUSH
46894: LD_EXP 19
46898: PUSH
46899: LD_VAR 0 8
46903: ARRAY
46904: PUSH
46905: LD_INT 1
46907: ARRAY
46908: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
46909: LD_ADDR_VAR 0 6
46913: PUSH
46914: LD_EXP 19
46918: PUSH
46919: LD_VAR 0 8
46923: ARRAY
46924: PUSH
46925: LD_INT 2
46927: ARRAY
46928: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
46929: LD_VAR 0 5
46933: PPUSH
46934: LD_VAR 0 6
46938: PPUSH
46939: LD_INT 12
46941: PPUSH
46942: LD_INT 2
46944: PPUSH
46945: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
46949: LD_ADDR_EXP 21
46953: PUSH
46954: LD_EXP 21
46958: PPUSH
46959: LD_VAR 0 7
46963: PPUSH
46964: LD_VAR 0 7
46968: PPUSH
46969: LD_VAR 0 5
46973: PPUSH
46974: LD_VAR 0 6
46978: PPUSH
46979: LD_INT 1
46981: PUSH
46982: LD_INT 100
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 2
46991: PUSH
46992: LD_INT 70
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 3
47001: PUSH
47002: LD_INT 40
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 10
47011: PUSH
47012: LD_INT 25
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 20
47021: PUSH
47022: LD_INT 100
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: PPUSH
47036: CALL_OW 418
47040: PPUSH
47041: CALL_OW 1
47045: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47046: LD_EXP 24
47050: PUSH
47051: LD_INT 20
47053: PPUSH
47054: LD_VAR 0 7
47058: PPUSH
47059: CALL_OW 321
47063: PUSH
47064: LD_INT 1
47066: EQUAL
47067: AND
47068: IFFALSE 47085
// SetTech ( tech_SibDet , side , state_researched ) ;
47070: LD_INT 20
47072: PPUSH
47073: LD_VAR 0 7
47077: PPUSH
47078: LD_INT 2
47080: PPUSH
47081: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47085: LD_INT 24
47087: PPUSH
47088: LD_VAR 0 7
47092: PPUSH
47093: LD_INT 0
47095: PPUSH
47096: CALL_OW 322
// if mpSibBomb = 1 then
47100: LD_EXP 26
47104: PUSH
47105: LD_INT 1
47107: EQUAL
47108: IFFALSE 47127
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47110: LD_INT 25
47112: PPUSH
47113: LD_VAR 0 7
47117: PPUSH
47118: LD_INT 1
47120: PPUSH
47121: CALL_OW 322
// end else
47125: GO 47142
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47127: LD_INT 25
47129: PPUSH
47130: LD_VAR 0 7
47134: PPUSH
47135: LD_INT 0
47137: PPUSH
47138: CALL_OW 322
// end ; if mpVehicles then
47142: LD_EXP 33
47146: IFFALSE 47245
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47148: LD_ADDR_VAR 0 3
47152: PUSH
47153: LD_VAR 0 7
47157: PPUSH
47158: LD_VAR 0 9
47162: PPUSH
47163: LD_EXP 33
47167: PPUSH
47168: CALL 48104 0 3
47172: PUSH
47173: FOR_IN
47174: IFFALSE 47243
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47176: LD_VAR 0 3
47180: PPUSH
47181: LD_INT 0
47183: PPUSH
47184: LD_INT 5
47186: PPUSH
47187: CALL_OW 12
47191: PPUSH
47192: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47196: LD_VAR 0 3
47200: PPUSH
47201: LD_EXP 19
47205: PUSH
47206: LD_VAR 0 8
47210: ARRAY
47211: PUSH
47212: LD_INT 1
47214: ARRAY
47215: PPUSH
47216: LD_EXP 19
47220: PUSH
47221: LD_VAR 0 8
47225: ARRAY
47226: PUSH
47227: LD_INT 2
47229: ARRAY
47230: PPUSH
47231: LD_INT 12
47233: PPUSH
47234: LD_INT 0
47236: PPUSH
47237: CALL_OW 50
// end ;
47241: GO 47173
47243: POP
47244: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47245: LD_ADDR_VAR 0 11
47249: PUSH
47250: LD_VAR 0 7
47254: PPUSH
47255: LD_VAR 0 9
47259: PPUSH
47260: LD_EXP 22
47264: PPUSH
47265: LD_EXP 23
47269: PPUSH
47270: CALL 47834 0 4
47274: ST_TO_ADDR
// for j in team do
47275: LD_ADDR_VAR 0 3
47279: PUSH
47280: LD_VAR 0 11
47284: PUSH
47285: FOR_IN
47286: IFFALSE 47335
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47288: LD_VAR 0 3
47292: PPUSH
47293: LD_EXP 19
47297: PUSH
47298: LD_VAR 0 8
47302: ARRAY
47303: PUSH
47304: LD_INT 1
47306: ARRAY
47307: PPUSH
47308: LD_EXP 19
47312: PUSH
47313: LD_VAR 0 8
47317: ARRAY
47318: PUSH
47319: LD_INT 2
47321: ARRAY
47322: PPUSH
47323: LD_INT 12
47325: PPUSH
47326: LD_INT 0
47328: PPUSH
47329: CALL_OW 50
47333: GO 47285
47335: POP
47336: POP
// if mpApemans then
47337: LD_EXP 28
47341: IFFALSE 47420
// begin for j := 1 to mpApemans do
47343: LD_ADDR_VAR 0 3
47347: PUSH
47348: DOUBLE
47349: LD_INT 1
47351: DEC
47352: ST_TO_ADDR
47353: LD_EXP 28
47357: PUSH
47358: FOR_TO
47359: IFFALSE 47418
// begin PrepareApeman ( - 5 ) ;
47361: LD_INT 5
47363: NEG
47364: PPUSH
47365: CALL 36767 0 1
// ape := CreateHuman ;
47369: LD_ADDR_VAR 0 10
47373: PUSH
47374: CALL_OW 44
47378: ST_TO_ADDR
// SetTag ( ape , side ) ;
47379: LD_VAR 0 10
47383: PPUSH
47384: LD_VAR 0 7
47388: PPUSH
47389: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47393: LD_VAR 0 10
47397: PPUSH
47398: LD_EXP 29
47402: PUSH
47403: LD_VAR 0 8
47407: ARRAY
47408: PPUSH
47409: LD_INT 0
47411: PPUSH
47412: CALL_OW 49
// end ;
47416: GO 47358
47418: POP
47419: POP
// end ; end ;
47420: GO 46205
47422: POP
47423: POP
// if not mpTeamGame then
47424: LD_EXP 9
47428: NOT
47429: IFFALSE 47527
// begin for i := 1 to 8 do
47431: LD_ADDR_VAR 0 2
47435: PUSH
47436: DOUBLE
47437: LD_INT 1
47439: DEC
47440: ST_TO_ADDR
47441: LD_INT 8
47443: PUSH
47444: FOR_TO
47445: IFFALSE 47523
// for j := 1 to 8 do
47447: LD_ADDR_VAR 0 3
47451: PUSH
47452: DOUBLE
47453: LD_INT 1
47455: DEC
47456: ST_TO_ADDR
47457: LD_INT 8
47459: PUSH
47460: FOR_TO
47461: IFFALSE 47519
// if i <> j then
47463: LD_VAR 0 2
47467: PUSH
47468: LD_VAR 0 3
47472: NONEQUAL
47473: IFFALSE 47497
// SetAttitude ( i , j , att_neutral , true ) else
47475: LD_VAR 0 2
47479: PPUSH
47480: LD_VAR 0 3
47484: PPUSH
47485: LD_INT 0
47487: PPUSH
47488: LD_INT 1
47490: PPUSH
47491: CALL_OW 80
47495: GO 47517
// SetAttitude ( i , j , att_friend , true ) ;
47497: LD_VAR 0 2
47501: PPUSH
47502: LD_VAR 0 3
47506: PPUSH
47507: LD_INT 1
47509: PPUSH
47510: LD_INT 1
47512: PPUSH
47513: CALL_OW 80
47517: GO 47460
47519: POP
47520: POP
47521: GO 47444
47523: POP
47524: POP
// end else
47525: GO 47702
// begin if mpSharedVision then
47527: LD_EXP 14
47531: IFFALSE 47596
// begin for i in mpTeams do
47533: LD_ADDR_VAR 0 2
47537: PUSH
47538: LD_EXP 8
47542: PUSH
47543: FOR_IN
47544: IFFALSE 47594
// for j := 2 to i do
47546: LD_ADDR_VAR 0 3
47550: PUSH
47551: DOUBLE
47552: LD_INT 2
47554: DEC
47555: ST_TO_ADDR
47556: LD_VAR 0 2
47560: PUSH
47561: FOR_TO
47562: IFFALSE 47590
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47564: LD_VAR 0 2
47568: PUSH
47569: LD_VAR 0 3
47573: ARRAY
47574: PPUSH
47575: LD_VAR 0 2
47579: PUSH
47580: LD_INT 1
47582: ARRAY
47583: PPUSH
47584: CALL_OW 343
47588: GO 47561
47590: POP
47591: POP
47592: GO 47543
47594: POP
47595: POP
// end ; for i := 1 to 8 do
47596: LD_ADDR_VAR 0 2
47600: PUSH
47601: DOUBLE
47602: LD_INT 1
47604: DEC
47605: ST_TO_ADDR
47606: LD_INT 8
47608: PUSH
47609: FOR_TO
47610: IFFALSE 47700
// for j := 1 to 8 do
47612: LD_ADDR_VAR 0 3
47616: PUSH
47617: DOUBLE
47618: LD_INT 1
47620: DEC
47621: ST_TO_ADDR
47622: LD_INT 8
47624: PUSH
47625: FOR_TO
47626: IFFALSE 47696
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47628: LD_EXP 6
47632: PUSH
47633: LD_VAR 0 2
47637: ARRAY
47638: PUSH
47639: LD_EXP 6
47643: PUSH
47644: LD_VAR 0 3
47648: ARRAY
47649: EQUAL
47650: IFFALSE 47674
// SetAttitude ( i , j , att_friend , true ) else
47652: LD_VAR 0 2
47656: PPUSH
47657: LD_VAR 0 3
47661: PPUSH
47662: LD_INT 1
47664: PPUSH
47665: LD_INT 1
47667: PPUSH
47668: CALL_OW 80
47672: GO 47694
// SetAttitude ( i , j , att_enemy , true ) ;
47674: LD_VAR 0 2
47678: PPUSH
47679: LD_VAR 0 3
47683: PPUSH
47684: LD_INT 2
47686: PPUSH
47687: LD_INT 1
47689: PPUSH
47690: CALL_OW 80
47694: GO 47625
47696: POP
47697: POP
47698: GO 47609
47700: POP
47701: POP
// end ; music_nat := mpSideNations [ your_side ] ;
47702: LD_ADDR_OWVAR 71
47706: PUSH
47707: LD_EXP 7
47711: PUSH
47712: LD_OWVAR 2
47716: ARRAY
47717: ST_TO_ADDR
// if IAmSpec then
47718: CALL_OW 531
47722: IFFALSE 47763
// begin FogOff ( true ) ;
47724: LD_INT 1
47726: PPUSH
47727: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47731: LD_EXP 27
47735: PUSH
47736: LD_INT 1
47738: ARRAY
47739: PUSH
47740: LD_INT 2
47742: DIV
47743: PPUSH
47744: LD_EXP 27
47748: PUSH
47749: LD_INT 2
47751: ARRAY
47752: PUSH
47753: LD_INT 2
47755: DIV
47756: PPUSH
47757: CALL_OW 86
// end else
47761: GO 47809
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47763: LD_EXP 19
47767: PUSH
47768: LD_EXP 5
47772: PUSH
47773: LD_OWVAR 2
47777: ARRAY
47778: ARRAY
47779: PUSH
47780: LD_INT 1
47782: ARRAY
47783: PPUSH
47784: LD_EXP 19
47788: PUSH
47789: LD_EXP 5
47793: PUSH
47794: LD_OWVAR 2
47798: ARRAY
47799: ARRAY
47800: PUSH
47801: LD_INT 2
47803: ARRAY
47804: PPUSH
47805: CALL_OW 86
// end ; BeginBuildUp ;
47809: CALL 48582 0 0
// enable ( mpActive ) ;
47813: LD_INT 100
47815: ENABLE_MARKED
// enable ( mpGameType ) ;
47816: LD_EXP 1
47820: ENABLE_MARKED
// mpGameActive := true ;
47821: LD_ADDR_EXP 36
47825: PUSH
47826: LD_INT 1
47828: ST_TO_ADDR
// end ;
47829: LD_VAR 0 1
47833: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , class ; begin
47834: LD_INT 0
47836: PPUSH
47837: PPUSH
47838: PPUSH
// result := [ ] ;
47839: LD_ADDR_VAR 0 5
47843: PUSH
47844: EMPTY
47845: ST_TO_ADDR
// class := class_soldier ;
47846: LD_ADDR_VAR 0 7
47850: PUSH
47851: LD_INT 1
47853: ST_TO_ADDR
// uc_side := side ;
47854: LD_ADDR_OWVAR 20
47858: PUSH
47859: LD_VAR 0 1
47863: ST_TO_ADDR
// uc_nation := nation ;
47864: LD_ADDR_OWVAR 21
47868: PUSH
47869: LD_VAR 0 2
47873: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
47874: LD_ADDR_OWVAR 26
47878: PUSH
47879: LD_OWVAR 19
47883: PUSH
47884: LD_VAR 0 1
47888: ARRAY
47889: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
47890: LD_INT 1
47892: PPUSH
47893: LD_INT 2
47895: PPUSH
47896: CALL_OW 12
47900: PPUSH
47901: LD_VAR 0 7
47905: PPUSH
47906: LD_VAR 0 4
47910: PUSH
47911: LD_INT 2
47913: PLUS
47914: PPUSH
47915: CALL_OW 380
// hc_importance := 105 ;
47919: LD_ADDR_OWVAR 32
47923: PUSH
47924: LD_INT 105
47926: ST_TO_ADDR
// if Multiplayer then
47927: LD_OWVAR 4
47931: IFFALSE 47971
// begin hc_gallery := MULTIAVATARS ;
47933: LD_ADDR_OWVAR 33
47937: PUSH
47938: LD_STRING MULTIAVATARS
47940: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
47941: LD_ADDR_OWVAR 34
47945: PUSH
47946: LD_VAR 0 1
47950: PPUSH
47951: CALL_OW 525
47955: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
47956: LD_ADDR_OWVAR 27
47960: PUSH
47961: LD_VAR 0 1
47965: PPUSH
47966: CALL_OW 526
47970: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
47971: LD_ADDR_VAR 0 5
47975: PUSH
47976: LD_VAR 0 5
47980: PPUSH
47981: CALL_OW 44
47985: PPUSH
47986: CALL 40499 0 2
47990: ST_TO_ADDR
// InitHc_All ( ) ;
47991: CALL_OW 584
// class := 2 ;
47995: LD_ADDR_VAR 0 7
47999: PUSH
48000: LD_INT 2
48002: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48003: LD_ADDR_VAR 0 6
48007: PUSH
48008: DOUBLE
48009: LD_INT 1
48011: DEC
48012: ST_TO_ADDR
48013: LD_VAR 0 3
48017: PUSH
48018: LD_INT 1
48020: MINUS
48021: PUSH
48022: FOR_TO
48023: IFFALSE 48097
// begin PrepareHuman ( false , class , skill ) ;
48025: LD_INT 0
48027: PPUSH
48028: LD_VAR 0 7
48032: PPUSH
48033: LD_VAR 0 4
48037: PPUSH
48038: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
48042: LD_ADDR_VAR 0 5
48046: PUSH
48047: LD_VAR 0 5
48051: PPUSH
48052: CALL_OW 44
48056: PPUSH
48057: CALL 40499 0 2
48061: ST_TO_ADDR
// class := Inc ( class ) ;
48062: LD_ADDR_VAR 0 7
48066: PUSH
48067: LD_VAR 0 7
48071: PPUSH
48072: CALL 41860 0 1
48076: ST_TO_ADDR
// if class = 5 then
48077: LD_VAR 0 7
48081: PUSH
48082: LD_INT 5
48084: EQUAL
48085: IFFALSE 48095
// class := 1 ;
48087: LD_ADDR_VAR 0 7
48091: PUSH
48092: LD_INT 1
48094: ST_TO_ADDR
// end ;
48095: GO 48022
48097: POP
48098: POP
// end ;
48099: LD_VAR 0 5
48103: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48104: LD_INT 0
48106: PPUSH
48107: PPUSH
// result := [ ] ;
48108: LD_ADDR_VAR 0 4
48112: PUSH
48113: EMPTY
48114: ST_TO_ADDR
// if not vehicles then
48115: LD_VAR 0 3
48119: NOT
48120: IFFALSE 48124
// exit ;
48122: GO 48283
// for i := 1 to vehicles [ nation ] do
48124: LD_ADDR_VAR 0 5
48128: PUSH
48129: DOUBLE
48130: LD_INT 1
48132: DEC
48133: ST_TO_ADDR
48134: LD_VAR 0 3
48138: PUSH
48139: LD_VAR 0 2
48143: ARRAY
48144: PUSH
48145: FOR_TO
48146: IFFALSE 48281
// begin uc_side := side ;
48148: LD_ADDR_OWVAR 20
48152: PUSH
48153: LD_VAR 0 1
48157: ST_TO_ADDR
// uc_nation := nation ;
48158: LD_ADDR_OWVAR 21
48162: PUSH
48163: LD_VAR 0 2
48167: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48168: LD_VAR 0 3
48172: PUSH
48173: LD_VAR 0 2
48177: ARRAY
48178: PUSH
48179: LD_VAR 0 5
48183: ARRAY
48184: PUSH
48185: LD_INT 1
48187: ARRAY
48188: PPUSH
48189: LD_VAR 0 3
48193: PUSH
48194: LD_VAR 0 2
48198: ARRAY
48199: PUSH
48200: LD_VAR 0 5
48204: ARRAY
48205: PUSH
48206: LD_INT 2
48208: ARRAY
48209: PPUSH
48210: LD_VAR 0 3
48214: PUSH
48215: LD_VAR 0 2
48219: ARRAY
48220: PUSH
48221: LD_VAR 0 5
48225: ARRAY
48226: PUSH
48227: LD_INT 3
48229: ARRAY
48230: PPUSH
48231: LD_VAR 0 3
48235: PUSH
48236: LD_VAR 0 2
48240: ARRAY
48241: PUSH
48242: LD_VAR 0 5
48246: ARRAY
48247: PUSH
48248: LD_INT 4
48250: ARRAY
48251: PPUSH
48252: LD_INT 80
48254: PPUSH
48255: CALL 7648 0 5
// result := Join ( result , CreateVehicle ) ;
48259: LD_ADDR_VAR 0 4
48263: PUSH
48264: LD_VAR 0 4
48268: PPUSH
48269: CALL_OW 45
48273: PPUSH
48274: CALL 40499 0 2
48278: ST_TO_ADDR
// end ;
48279: GO 48145
48281: POP
48282: POP
// end ;
48283: LD_VAR 0 4
48287: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48288: LD_INT 0
48290: PPUSH
48291: PPUSH
// for i in mpBattleFlags do
48292: LD_ADDR_VAR 0 3
48296: PUSH
48297: LD_EXP 21
48301: PUSH
48302: FOR_IN
48303: IFFALSE 48380
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48305: LD_VAR 0 3
48309: PPUSH
48310: LD_INT 1
48312: PUSH
48313: LD_VAR 0 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_VAR 0 1
48329: PUSH
48330: LD_REAL  7.00000000000000E-0001
48333: MUL
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 3
48341: PUSH
48342: LD_VAR 0 1
48346: PUSH
48347: LD_REAL  4.00000000000000E-0001
48350: MUL
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 20
48358: PUSH
48359: LD_VAR 0 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: PPUSH
48374: CALL_OW 423
48378: GO 48302
48380: POP
48381: POP
// end ;
48382: LD_VAR 0 2
48386: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48387: LD_INT 100
48389: IFFALSE 48484
48391: GO 48393
48393: DISABLE
48394: LD_INT 0
48396: PPUSH
48397: PPUSH
// begin if mpBattleFlag <= 0 then
48398: LD_EXP 20
48402: PUSH
48403: LD_INT 0
48405: LESSEQUAL
48406: IFFALSE 48410
// exit ;
48408: GO 48484
// strength := 100 ;
48410: LD_ADDR_VAR 0 2
48414: PUSH
48415: LD_INT 100
48417: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48418: LD_EXP 20
48422: PPUSH
48423: CALL_OW 67
// strength := Dec ( strength ) ;
48427: LD_ADDR_VAR 0 2
48431: PUSH
48432: LD_VAR 0 2
48436: PPUSH
48437: CALL 41882 0 1
48441: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48442: LD_VAR 0 2
48446: PPUSH
48447: CALL 48288 0 1
// until not strength ;
48451: LD_VAR 0 2
48455: NOT
48456: IFFALSE 48418
// for i in mpBattleFlags do
48458: LD_ADDR_VAR 0 1
48462: PUSH
48463: LD_EXP 21
48467: PUSH
48468: FOR_IN
48469: IFFALSE 48482
// KillBattleFlag ( i ) ;
48471: LD_VAR 0 1
48475: PPUSH
48476: CALL_OW 419
48480: GO 48468
48482: POP
48483: POP
// end ;
48484: PPOPN 2
48486: END
// every 0 0$1 marked mpActive do var side , tmp ;
48487: GO 48489
48489: DISABLE
48490: LD_INT 0
48492: PPUSH
48493: PPUSH
// begin if mpSibBomb <= 1 then
48494: LD_EXP 26
48498: PUSH
48499: LD_INT 1
48501: LESSEQUAL
48502: IFFALSE 48506
// exit ;
48504: GO 48579
// tmp := mpSibBomb ;
48506: LD_ADDR_VAR 0 2
48510: PUSH
48511: LD_EXP 26
48515: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48516: LD_INT 35
48518: PPUSH
48519: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48523: LD_ADDR_VAR 0 2
48527: PUSH
48528: LD_VAR 0 2
48532: PUSH
48533: LD_INT 35
48535: MINUS
48536: ST_TO_ADDR
// until not tmp ;
48537: LD_VAR 0 2
48541: NOT
48542: IFFALSE 48516
// for side := 1 to 8 do
48544: LD_ADDR_VAR 0 1
48548: PUSH
48549: DOUBLE
48550: LD_INT 1
48552: DEC
48553: ST_TO_ADDR
48554: LD_INT 8
48556: PUSH
48557: FOR_TO
48558: IFFALSE 48577
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48560: LD_INT 25
48562: PPUSH
48563: LD_VAR 0 1
48567: PPUSH
48568: LD_INT 1
48570: PPUSH
48571: CALL_OW 322
48575: GO 48557
48577: POP
48578: POP
// end ;
48579: PPOPN 2
48581: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48582: LD_INT 0
48584: PPUSH
48585: PPUSH
48586: PPUSH
// mpBuildUpTimeDelay := 0 ;
48587: LD_ADDR_EXP 39
48591: PUSH
48592: LD_INT 0
48594: ST_TO_ADDR
// if not mpBuildUpTime then
48595: LD_EXP 18
48599: NOT
48600: IFFALSE 48604
// exit ;
48602: GO 48787
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
48604: LD_ADDR_EXP 39
48608: PUSH
48609: LD_INT 8400
48611: PUSH
48612: LD_INT 2100
48614: PUSH
48615: LD_EXP 18
48619: MUL
48620: PLUS
48621: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
48622: LD_ADDR_EXP 40
48626: PUSH
48627: LD_INT 1
48629: ST_TO_ADDR
// for i := 1 to 8 do
48630: LD_ADDR_VAR 0 2
48634: PUSH
48635: DOUBLE
48636: LD_INT 1
48638: DEC
48639: ST_TO_ADDR
48640: LD_INT 8
48642: PUSH
48643: FOR_TO
48644: IFFALSE 48785
// if mpSidePositions [ i ] then
48646: LD_EXP 5
48650: PUSH
48651: LD_VAR 0 2
48655: ARRAY
48656: IFFALSE 48783
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
48658: LD_EXP 17
48662: PUSH
48663: LD_EXP 5
48667: PUSH
48668: LD_VAR 0 2
48672: ARRAY
48673: ARRAY
48674: PPUSH
48675: LD_INT 5
48677: PPUSH
48678: CALL_OW 424
// for j := 1 to 8 do
48682: LD_ADDR_VAR 0 3
48686: PUSH
48687: DOUBLE
48688: LD_INT 1
48690: DEC
48691: ST_TO_ADDR
48692: LD_INT 8
48694: PUSH
48695: FOR_TO
48696: IFFALSE 48781
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48698: LD_EXP 5
48702: PUSH
48703: LD_VAR 0 3
48707: ARRAY
48708: PUSH
48709: LD_EXP 6
48713: PUSH
48714: LD_VAR 0 2
48718: ARRAY
48719: PUSH
48720: LD_EXP 6
48724: PUSH
48725: LD_VAR 0 3
48729: ARRAY
48730: NONEQUAL
48731: PUSH
48732: LD_EXP 9
48736: NOT
48737: PUSH
48738: LD_VAR 0 2
48742: PUSH
48743: LD_VAR 0 3
48747: NONEQUAL
48748: AND
48749: OR
48750: AND
48751: IFFALSE 48779
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
48753: LD_VAR 0 3
48757: PPUSH
48758: LD_EXP 17
48762: PUSH
48763: LD_EXP 5
48767: PUSH
48768: LD_VAR 0 2
48772: ARRAY
48773: ARRAY
48774: PPUSH
48775: CALL_OW 333
48779: GO 48695
48781: POP
48782: POP
// end ;
48783: GO 48643
48785: POP
48786: POP
// end ;
48787: LD_VAR 0 1
48791: RET
// function EndBuildUp ; var i , j ; begin
48792: LD_INT 0
48794: PPUSH
48795: PPUSH
48796: PPUSH
// mpBuildUpTimeActive := false ;
48797: LD_ADDR_EXP 40
48801: PUSH
48802: LD_INT 0
48804: ST_TO_ADDR
// for i := 1 to 8 do
48805: LD_ADDR_VAR 0 2
48809: PUSH
48810: DOUBLE
48811: LD_INT 1
48813: DEC
48814: ST_TO_ADDR
48815: LD_INT 8
48817: PUSH
48818: FOR_TO
48819: IFFALSE 48960
// if mpSidePositions [ i ] then
48821: LD_EXP 5
48825: PUSH
48826: LD_VAR 0 2
48830: ARRAY
48831: IFFALSE 48958
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
48833: LD_EXP 17
48837: PUSH
48838: LD_EXP 5
48842: PUSH
48843: LD_VAR 0 2
48847: ARRAY
48848: ARRAY
48849: PPUSH
48850: LD_INT 0
48852: PPUSH
48853: CALL_OW 424
// for j := 1 to 8 do
48857: LD_ADDR_VAR 0 3
48861: PUSH
48862: DOUBLE
48863: LD_INT 1
48865: DEC
48866: ST_TO_ADDR
48867: LD_INT 8
48869: PUSH
48870: FOR_TO
48871: IFFALSE 48956
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48873: LD_EXP 5
48877: PUSH
48878: LD_VAR 0 3
48882: ARRAY
48883: PUSH
48884: LD_EXP 6
48888: PUSH
48889: LD_VAR 0 2
48893: ARRAY
48894: PUSH
48895: LD_EXP 6
48899: PUSH
48900: LD_VAR 0 3
48904: ARRAY
48905: NONEQUAL
48906: PUSH
48907: LD_EXP 9
48911: NOT
48912: PUSH
48913: LD_VAR 0 2
48917: PUSH
48918: LD_VAR 0 3
48922: NONEQUAL
48923: AND
48924: OR
48925: AND
48926: IFFALSE 48954
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
48928: LD_VAR 0 3
48932: PPUSH
48933: LD_EXP 17
48937: PUSH
48938: LD_EXP 5
48942: PUSH
48943: LD_VAR 0 2
48947: ARRAY
48948: ARRAY
48949: PPUSH
48950: CALL_OW 334
48954: GO 48870
48956: POP
48957: POP
// end ;
48958: GO 48818
48960: POP
48961: POP
// end ;
48962: LD_VAR 0 1
48966: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
48967: LD_EXP 40
48971: IFFALSE 49146
48973: GO 48975
48975: DISABLE
48976: LD_INT 0
48978: PPUSH
48979: PPUSH
// begin for i := 1 to 8 do
48980: LD_ADDR_VAR 0 1
48984: PUSH
48985: DOUBLE
48986: LD_INT 1
48988: DEC
48989: ST_TO_ADDR
48990: LD_INT 8
48992: PUSH
48993: FOR_TO
48994: IFFALSE 49143
// if mpSidePositions [ i ] then
48996: LD_EXP 5
49000: PUSH
49001: LD_VAR 0 1
49005: ARRAY
49006: IFFALSE 49141
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49008: LD_ADDR_VAR 0 2
49012: PUSH
49013: LD_EXP 17
49017: PUSH
49018: LD_EXP 5
49022: PUSH
49023: LD_VAR 0 1
49027: ARRAY
49028: ARRAY
49029: PPUSH
49030: LD_INT 2
49032: PUSH
49033: LD_INT 21
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 21
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 22
49060: PUSH
49061: LD_OWVAR 2
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PPUSH
49074: CALL_OW 70
49078: PUSH
49079: FOR_IN
49080: IFFALSE 49139
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49082: LD_EXP 6
49086: PUSH
49087: LD_VAR 0 1
49091: ARRAY
49092: PUSH
49093: LD_EXP 6
49097: PUSH
49098: LD_OWVAR 2
49102: ARRAY
49103: NONEQUAL
49104: PUSH
49105: LD_EXP 9
49109: NOT
49110: PUSH
49111: LD_VAR 0 1
49115: PUSH
49116: LD_OWVAR 2
49120: NONEQUAL
49121: AND
49122: OR
49123: IFFALSE 49137
// ComMoveToArea ( un , BuildUpEscape ) ;
49125: LD_VAR 0 2
49129: PPUSH
49130: LD_INT 13
49132: PPUSH
49133: CALL_OW 113
49137: GO 49079
49139: POP
49140: POP
49141: GO 48993
49143: POP
49144: POP
// enable ;
49145: ENABLE
// end ;
49146: PPOPN 2
49148: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49149: LD_EXP 18
49153: IFFALSE 49203
49155: GO 49157
49157: DISABLE
49158: LD_INT 0
49160: PPUSH
// begin tmp := mpBuildUpTime ;
49161: LD_ADDR_VAR 0 1
49165: PUSH
49166: LD_EXP 18
49170: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49171: LD_INT 35
49173: PPUSH
49174: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49178: LD_ADDR_VAR 0 1
49182: PUSH
49183: LD_VAR 0 1
49187: PUSH
49188: LD_INT 35
49190: MINUS
49191: ST_TO_ADDR
// until not tmp ;
49192: LD_VAR 0 1
49196: NOT
49197: IFFALSE 49171
// EndBuildUp ;
49199: CALL 48792 0 0
// end ;
49203: PPOPN 1
49205: END
// every 0 0$1 trigger mpActive marked mpWin do
49206: LD_INT 100
49208: IFFALSE 49242
49210: GO 49212
49212: DISABLE
// begin if IAmServer then
49213: CALL_OW 518
49217: IFFALSE 49226
// wait ( 0 0$3 ) ;
49219: LD_INT 105
49221: PPUSH
49222: CALL_OW 67
// if Multiplayer then
49226: LD_OWVAR 4
49230: IFFALSE 49238
// YouWinInMultiplayer else
49232: CALL_OW 106
49236: GO 49242
// YouWin ;
49238: CALL_OW 103
// end ;
49242: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49243: LD_INT 0
49245: PPUSH
// result := false ;
49246: LD_ADDR_VAR 0 3
49250: PUSH
49251: LD_INT 0
49253: ST_TO_ADDR
// case gameType of GameTypeNormal :
49254: LD_VAR 0 1
49258: PUSH
49259: LD_INT 1
49261: DOUBLE
49262: EQUAL
49263: IFTRUE 49267
49265: GO 49340
49267: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49268: LD_ADDR_VAR 0 3
49272: PUSH
49273: LD_INT 22
49275: PUSH
49276: LD_VAR 0 2
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: LD_INT 21
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 33
49300: PUSH
49301: LD_INT 3
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 33
49310: PUSH
49311: LD_INT 5
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PPUSH
49328: CALL_OW 69
49332: PPUSH
49333: CALL 4910 0 1
49337: ST_TO_ADDR
// end ; GameTypeSurvival :
49338: GO 49575
49340: LD_INT 2
49342: DOUBLE
49343: EQUAL
49344: IFTRUE 49348
49346: GO 49476
49348: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49349: LD_ADDR_VAR 0 3
49353: PUSH
49354: LD_INT 22
49356: PUSH
49357: LD_VAR 0 2
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: PUSH
49369: LD_INT 30
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 30
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PPUSH
49398: CALL_OW 69
49402: PPUSH
49403: CALL 4910 0 1
49407: PUSH
49408: LD_INT 22
49410: PUSH
49411: LD_VAR 0 2
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: PUSH
49423: LD_INT 21
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 33
49435: PUSH
49436: LD_INT 3
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 33
49445: PUSH
49446: LD_INT 5
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PPUSH
49463: CALL_OW 69
49467: PPUSH
49468: CALL 4910 0 1
49472: AND
49473: ST_TO_ADDR
// end ; GameTypeKing :
49474: GO 49575
49476: LD_INT 3
49478: DOUBLE
49479: EQUAL
49480: IFTRUE 49484
49482: GO 49574
49484: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) or HowMuchPointsKing ( side ) >= mpPoints ;
49485: LD_ADDR_VAR 0 3
49489: PUSH
49490: LD_INT 22
49492: PUSH
49493: LD_VAR 0 2
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: LD_INT 21
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 33
49517: PUSH
49518: LD_INT 3
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 33
49527: PUSH
49528: LD_INT 5
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PPUSH
49545: CALL_OW 69
49549: PPUSH
49550: CALL 4910 0 1
49554: PUSH
49555: LD_VAR 0 2
49559: PPUSH
49560: CALL 52748 0 1
49564: PUSH
49565: LD_EXP 32
49569: GREATEREQUAL
49570: OR
49571: ST_TO_ADDR
// end ; end ;
49572: GO 49575
49574: POP
// end ;
49575: LD_VAR 0 3
49579: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49580: LD_INT 100
49582: IFFALSE 49804
49584: GO 49586
49586: DISABLE
49587: LD_INT 0
49589: PPUSH
49590: PPUSH
// begin if Multiplayer then
49591: LD_OWVAR 4
49595: IFFALSE 49603
// SetPlayerSpectator ( ) else
49597: CALL_OW 572
49601: GO 49612
// FogOff ( your_side ) ;
49603: LD_OWVAR 2
49607: PPUSH
49608: CALL_OW 344
// repeat gameIsOn := false ;
49612: LD_ADDR_VAR 0 1
49616: PUSH
49617: LD_INT 0
49619: ST_TO_ADDR
// for i := 1 to 8 do
49620: LD_ADDR_VAR 0 2
49624: PUSH
49625: DOUBLE
49626: LD_INT 1
49628: DEC
49629: ST_TO_ADDR
49630: LD_INT 8
49632: PUSH
49633: FOR_TO
49634: IFFALSE 49756
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49636: LD_EXP 5
49640: PUSH
49641: LD_VAR 0 2
49645: ARRAY
49646: PUSH
49647: LD_VAR 0 2
49651: PPUSH
49652: CALL_OW 108
49656: AND
49657: PUSH
49658: LD_VAR 0 2
49662: PUSH
49663: LD_OWVAR 2
49667: NONEQUAL
49668: AND
49669: IFFALSE 49754
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
49671: LD_EXP 6
49675: PUSH
49676: LD_VAR 0 2
49680: ARRAY
49681: NOT
49682: PUSH
49683: LD_EXP 6
49687: PUSH
49688: LD_VAR 0 2
49692: ARRAY
49693: PUSH
49694: LD_EXP 6
49698: PUSH
49699: LD_OWVAR 2
49703: ARRAY
49704: NONEQUAL
49705: PUSH
49706: LD_OWVAR 2
49710: PPUSH
49711: LD_VAR 0 2
49715: PPUSH
49716: CALL_OW 81
49720: PUSH
49721: LD_INT 1
49723: NONEQUAL
49724: AND
49725: OR
49726: IFFALSE 49754
// if HasPowerByGameType ( mpGameType , i ) then
49728: LD_EXP 1
49732: PPUSH
49733: LD_VAR 0 2
49737: PPUSH
49738: CALL 49243 0 2
49742: IFFALSE 49754
// begin gameIsOn := true ;
49744: LD_ADDR_VAR 0 1
49748: PUSH
49749: LD_INT 1
49751: ST_TO_ADDR
// break ;
49752: GO 49756
// end ;
49754: GO 49633
49756: POP
49757: POP
// wait ( 100 ) ;
49758: LD_INT 100
49760: PPUSH
49761: CALL_OW 67
// until not gameIsOn ;
49765: LD_VAR 0 1
49769: NOT
49770: IFFALSE 49612
// if IAmServer then
49772: CALL_OW 518
49776: IFFALSE 49785
// wait ( 0 0$3 ) ;
49778: LD_INT 105
49780: PPUSH
49781: CALL_OW 67
// if Multiplayer then
49785: LD_OWVAR 4
49789: IFFALSE 49797
// YouLostInMultiplayer else
49791: CALL_OW 107
49795: GO 49804
// YouLost (  ) ;
49797: LD_STRING 
49799: PPUSH
49800: CALL_OW 104
// end ;
49804: PPOPN 2
49806: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
49807: LD_EXP 30
49811: IFFALSE 50158
49813: GO 49815
49815: DISABLE
49816: LD_INT 0
49818: PPUSH
49819: PPUSH
49820: PPUSH
49821: PPUSH
49822: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
49823: LD_ADDR_VAR 0 5
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: LD_INT 3
49836: PUSH
49837: LD_INT 4
49839: PUSH
49840: LD_INT 5
49842: PUSH
49843: LD_INT 6
49845: PUSH
49846: LD_INT 7
49848: PUSH
49849: LD_INT 8
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
49862: LD_INT 350
49864: PPUSH
49865: CALL_OW 67
// for i := 1 to 8 do
49869: LD_ADDR_VAR 0 1
49873: PUSH
49874: DOUBLE
49875: LD_INT 1
49877: DEC
49878: ST_TO_ADDR
49879: LD_INT 8
49881: PUSH
49882: FOR_TO
49883: IFFALSE 50128
// begin j := sides [ i ] ;
49885: LD_ADDR_VAR 0 2
49889: PUSH
49890: LD_VAR 0 5
49894: PUSH
49895: LD_VAR 0 1
49899: ARRAY
49900: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
49901: LD_EXP 37
49905: PUSH
49906: LD_VAR 0 2
49910: ARRAY
49911: PPUSH
49912: CALL 4910 0 1
49916: PUSH
49917: LD_VAR 0 2
49921: PPUSH
49922: CALL_OW 108
49926: AND
49927: PUSH
49928: LD_EXP 1
49932: PPUSH
49933: LD_VAR 0 2
49937: PPUSH
49938: CALL 49243 0 2
49942: AND
49943: IFFALSE 50126
// begin wait ( mpRespawn div 3 ) ;
49945: LD_EXP 30
49949: PUSH
49950: LD_INT 3
49952: DIV
49953: PPUSH
49954: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49958: LD_ADDR_VAR 0 3
49962: PUSH
49963: LD_INT 22
49965: PUSH
49966: LD_VAR 0 2
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 50
49977: PUSH
49978: EMPTY
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: LD_INT 30
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 30
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: LIST
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: LIST
50013: PPUSH
50014: CALL_OW 69
50018: ST_TO_ADDR
// if not tmp then
50019: LD_VAR 0 3
50023: NOT
50024: IFFALSE 50028
// continue ;
50026: GO 49882
// spawn := tmp [ 1 ] ;
50028: LD_ADDR_VAR 0 4
50032: PUSH
50033: LD_VAR 0 3
50037: PUSH
50038: LD_INT 1
50040: ARRAY
50041: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50042: LD_EXP 37
50046: PUSH
50047: LD_VAR 0 2
50051: ARRAY
50052: PUSH
50053: LD_INT 1
50055: ARRAY
50056: PPUSH
50057: LD_VAR 0 4
50061: PPUSH
50062: CALL_OW 250
50066: PPUSH
50067: LD_VAR 0 4
50071: PPUSH
50072: CALL_OW 251
50076: PPUSH
50077: LD_INT 32
50079: PPUSH
50080: LD_INT 1
50082: PPUSH
50083: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50087: LD_ADDR_EXP 37
50091: PUSH
50092: LD_EXP 37
50096: PPUSH
50097: LD_VAR 0 2
50101: PPUSH
50102: LD_EXP 37
50106: PUSH
50107: LD_VAR 0 2
50111: ARRAY
50112: PPUSH
50113: LD_INT 1
50115: PPUSH
50116: CALL_OW 3
50120: PPUSH
50121: CALL_OW 1
50125: ST_TO_ADDR
// end ; end ;
50126: GO 49882
50128: POP
50129: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50130: LD_ADDR_VAR 0 5
50134: PUSH
50135: LD_VAR 0 5
50139: PPUSH
50140: LD_INT 1
50142: PPUSH
50143: LD_INT 8
50145: PPUSH
50146: LD_INT 1
50148: PPUSH
50149: CALL 7188 0 4
50153: ST_TO_ADDR
// until false ;
50154: LD_INT 0
50156: IFFALSE 49862
// end ;
50158: PPOPN 5
50160: END
// every 0 0$1 marked mpActive do
50161: GO 50163
50163: DISABLE
// begin enable ;
50164: ENABLE
// if not mpDisplayStrings then
50165: LD_EXP 35
50169: NOT
50170: IFFALSE 50181
// begin display_strings := [ ] ;
50172: LD_ADDR_OWVAR 47
50176: PUSH
50177: EMPTY
50178: ST_TO_ADDR
// exit ;
50179: GO 50191
// end ; display_strings := mpDisplayStrings ;
50181: LD_ADDR_OWVAR 47
50185: PUSH
50186: LD_EXP 35
50190: ST_TO_ADDR
// end ; end_of_file
50191: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50192: LD_INT 0
50194: PPUSH
50195: PPUSH
50196: PPUSH
50197: PPUSH
50198: PPUSH
50199: PPUSH
50200: PPUSH
50201: PPUSH
50202: PPUSH
// if GetType ( un ) = unit_vehicle then
50203: LD_VAR 0 1
50207: PPUSH
50208: CALL_OW 247
50212: PUSH
50213: LD_INT 2
50215: EQUAL
50216: IFFALSE 50220
// exit ;
50218: GO 50777
// side := GetSide ( un ) ;
50220: LD_ADDR_VAR 0 9
50224: PUSH
50225: LD_VAR 0 1
50229: PPUSH
50230: CALL_OW 255
50234: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50235: LD_EXP 1
50239: PUSH
50240: LD_INT 2
50242: EQUAL
50243: IFFALSE 50336
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
50245: LD_VAR 0 1
50249: PPUSH
50250: CALL_OW 266
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: IN
50265: PUSH
50266: LD_VAR 0 1
50270: PPUSH
50271: CALL_OW 110
50275: PUSH
50276: LD_VAR 0 9
50280: EQUAL
50281: AND
50282: IFFALSE 50336
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50284: LD_ADDR_VAR 0 3
50288: PUSH
50289: LD_INT 22
50291: PUSH
50292: LD_VAR 0 9
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 21
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PPUSH
50315: CALL_OW 69
50319: PUSH
50320: FOR_IN
50321: IFFALSE 50334
// KillUnit ( i ) ;
50323: LD_VAR 0 3
50327: PPUSH
50328: CALL_OW 66
50332: GO 50320
50334: POP
50335: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50336: LD_VAR 0 1
50340: PPUSH
50341: CALL_OW 257
50345: PUSH
50346: LD_INT 12
50348: PUSH
50349: LD_INT 17
50351: PUSH
50352: LD_INT 15
50354: PUSH
50355: LD_INT 16
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: IN
50364: PUSH
50365: LD_VAR 0 1
50369: PPUSH
50370: CALL_OW 263
50374: PUSH
50375: LD_INT 5
50377: EQUAL
50378: OR
50379: IFFALSE 50513
// begin tag := GetTag ( un ) ;
50381: LD_ADDR_VAR 0 5
50385: PUSH
50386: LD_VAR 0 1
50390: PPUSH
50391: CALL_OW 110
50395: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50396: LD_ADDR_VAR 0 7
50400: PUSH
50401: LD_EXP 29
50405: PUSH
50406: LD_EXP 5
50410: PUSH
50411: LD_VAR 0 5
50415: ARRAY
50416: ARRAY
50417: ST_TO_ADDR
// if not area then
50418: LD_VAR 0 7
50422: NOT
50423: IFFALSE 50427
// exit ;
50425: GO 50777
// wait ( 4 4$00 ) ;
50427: LD_INT 8400
50429: PPUSH
50430: CALL_OW 67
// repeat wait ( 10 ) ;
50434: LD_INT 10
50436: PPUSH
50437: CALL_OW 67
// until not mpBlockRespThread ;
50441: LD_EXP 38
50445: NOT
50446: IFFALSE 50434
// mpBlockRespThread := true ;
50448: LD_ADDR_EXP 38
50452: PUSH
50453: LD_INT 1
50455: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
50456: LD_INT 5
50458: NEG
50459: PPUSH
50460: CALL 36767 0 1
// ape := CreateHuman ;
50464: LD_ADDR_VAR 0 4
50468: PUSH
50469: CALL_OW 44
50473: ST_TO_ADDR
// SetTag ( ape , tag ) ;
50474: LD_VAR 0 4
50478: PPUSH
50479: LD_VAR 0 5
50483: PPUSH
50484: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
50488: LD_VAR 0 4
50492: PPUSH
50493: LD_VAR 0 7
50497: PPUSH
50498: LD_INT 0
50500: PPUSH
50501: CALL_OW 49
// mpBlockRespThread := false ;
50505: LD_ADDR_EXP 38
50509: PUSH
50510: LD_INT 0
50512: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
50513: LD_VAR 0 1
50517: PPUSH
50518: CALL_OW 247
50522: PUSH
50523: LD_INT 1
50525: EQUAL
50526: PUSH
50527: LD_VAR 0 1
50531: PPUSH
50532: CALL_OW 248
50536: PUSH
50537: LD_INT 0
50539: GREATER
50540: AND
50541: IFFALSE 50777
// begin if not mpRespawn then
50543: LD_EXP 30
50547: NOT
50548: IFFALSE 50552
// exit ;
50550: GO 50777
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
50552: LD_VAR 0 9
50556: PPUSH
50557: CALL_OW 108
50561: NOT
50562: PUSH
50563: LD_EXP 1
50567: PPUSH
50568: LD_VAR 0 9
50572: PPUSH
50573: CALL 49243 0 2
50577: NOT
50578: AND
50579: IFFALSE 50583
// exit ;
50581: GO 50777
// side := GetSide ( un ) ;
50583: LD_ADDR_VAR 0 9
50587: PUSH
50588: LD_VAR 0 1
50592: PPUSH
50593: CALL_OW 255
50597: ST_TO_ADDR
// nation := GetNation ( un ) ;
50598: LD_ADDR_VAR 0 8
50602: PUSH
50603: LD_VAR 0 1
50607: PPUSH
50608: CALL_OW 248
50612: ST_TO_ADDR
// class := GetClass ( un ) ;
50613: LD_ADDR_VAR 0 6
50617: PUSH
50618: LD_VAR 0 1
50622: PPUSH
50623: CALL_OW 257
50627: ST_TO_ADDR
// if class > 4 then
50628: LD_VAR 0 6
50632: PUSH
50633: LD_INT 4
50635: GREATER
50636: IFFALSE 50646
// class := 1 ;
50638: LD_ADDR_VAR 0 6
50642: PUSH
50643: LD_INT 1
50645: ST_TO_ADDR
// repeat wait ( 10 ) ;
50646: LD_INT 10
50648: PPUSH
50649: CALL_OW 67
// until not mpBlockRespThread ;
50653: LD_EXP 38
50657: NOT
50658: IFFALSE 50646
// mpBlockRespThread := true ;
50660: LD_ADDR_EXP 38
50664: PUSH
50665: LD_INT 1
50667: ST_TO_ADDR
// uc_side := side ;
50668: LD_ADDR_OWVAR 20
50672: PUSH
50673: LD_VAR 0 9
50677: ST_TO_ADDR
// uc_nation := nation ;
50678: LD_ADDR_OWVAR 21
50682: PUSH
50683: LD_VAR 0 8
50687: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
50688: LD_INT 0
50690: PPUSH
50691: LD_VAR 0 6
50695: PPUSH
50696: LD_INT 2
50698: PPUSH
50699: CALL_OW 380
// un := CreateHuman ;
50703: LD_ADDR_VAR 0 1
50707: PUSH
50708: CALL_OW 44
50712: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
50713: LD_ADDR_EXP 37
50717: PUSH
50718: LD_EXP 37
50722: PPUSH
50723: LD_VAR 0 9
50727: PPUSH
50728: LD_EXP 37
50732: PUSH
50733: LD_VAR 0 9
50737: ARRAY
50738: PPUSH
50739: LD_EXP 37
50743: PUSH
50744: LD_VAR 0 9
50748: ARRAY
50749: PUSH
50750: LD_INT 1
50752: PLUS
50753: PPUSH
50754: LD_VAR 0 1
50758: PPUSH
50759: CALL_OW 1
50763: PPUSH
50764: CALL_OW 1
50768: ST_TO_ADDR
// mpBlockRespThread := false ;
50769: LD_ADDR_EXP 38
50773: PUSH
50774: LD_INT 0
50776: ST_TO_ADDR
// end ; end ;
50777: LD_VAR 0 2
50781: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
50782: LD_INT 0
50784: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
50785: LD_VAR 0 1
50789: PPUSH
50790: CALL_OW 266
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: IN
50805: IFFALSE 50830
// SetBName ( building , @ & GetSide ( building ) ) ;
50807: LD_VAR 0 1
50811: PPUSH
50812: LD_STRING @
50814: PUSH
50815: LD_VAR 0 1
50819: PPUSH
50820: CALL_OW 255
50824: STR
50825: PPUSH
50826: CALL_OW 500
// end ;
50830: LD_VAR 0 2
50834: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
50835: LD_INT 0
50837: PPUSH
50838: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
50839: LD_EXP 1
50843: PUSH
50844: LD_INT 2
50846: EQUAL
50847: PUSH
50848: LD_VAR 0 1
50852: PPUSH
50853: CALL_OW 266
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: IN
50868: AND
50869: IFFALSE 50934
// begin KillUnit ( building ) ;
50871: LD_VAR 0 1
50875: PPUSH
50876: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
50880: LD_ADDR_VAR 0 5
50884: PUSH
50885: LD_INT 22
50887: PUSH
50888: LD_VAR 0 2
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 21
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PPUSH
50911: CALL_OW 69
50915: PUSH
50916: FOR_IN
50917: IFFALSE 50930
// KillUnit ( i ) ;
50919: LD_VAR 0 5
50923: PPUSH
50924: CALL_OW 66
50928: GO 50916
50930: POP
50931: POP
// exit ;
50932: GO 50979
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
50934: LD_VAR 0 1
50938: PPUSH
50939: CALL_OW 266
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: IN
50954: IFFALSE 50979
// SetBName ( building , @ & GetSide ( building ) ) ;
50956: LD_VAR 0 1
50960: PPUSH
50961: LD_STRING @
50963: PUSH
50964: LD_VAR 0 1
50968: PPUSH
50969: CALL_OW 255
50973: STR
50974: PPUSH
50975: CALL_OW 500
// end ; end_of_file
50979: LD_VAR 0 4
50983: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
50984: LD_EXP 36
50988: PUSH
50989: CALL 51194 0 0
50993: AND
50994: PUSH
50995: LD_OWVAR 4
50999: AND
51000: IFFALSE 51191
51002: GO 51004
51004: DISABLE
51005: LD_INT 0
51007: PPUSH
51008: PPUSH
// begin canWin := false ;
51009: LD_ADDR_VAR 0 2
51013: PUSH
51014: LD_INT 0
51016: ST_TO_ADDR
// if not HasPower ( your_side ) then
51017: LD_OWVAR 2
51021: PPUSH
51022: CALL 51234 0 1
51026: NOT
51027: IFFALSE 51038
// begin Multiplayer_Loose_Message ;
51029: CALL_OW 521
// enable ( mpLose ) ;
51033: LD_INT 102
51035: ENABLE_MARKED
// end else
51036: GO 51191
// begin canWin := true ;
51038: LD_ADDR_VAR 0 2
51042: PUSH
51043: LD_INT 1
51045: ST_TO_ADDR
// for i := 1 to 8 do
51046: LD_ADDR_VAR 0 1
51050: PUSH
51051: DOUBLE
51052: LD_INT 1
51054: DEC
51055: ST_TO_ADDR
51056: LD_INT 8
51058: PUSH
51059: FOR_TO
51060: IFFALSE 51177
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51062: LD_EXP 5
51066: PUSH
51067: LD_VAR 0 1
51071: ARRAY
51072: PUSH
51073: LD_VAR 0 1
51077: PPUSH
51078: CALL_OW 108
51082: AND
51083: PUSH
51084: LD_VAR 0 1
51088: PUSH
51089: LD_OWVAR 2
51093: NONEQUAL
51094: AND
51095: IFFALSE 51175
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51097: LD_EXP 6
51101: PUSH
51102: LD_VAR 0 1
51106: ARRAY
51107: NOT
51108: PUSH
51109: LD_EXP 6
51113: PUSH
51114: LD_VAR 0 1
51118: ARRAY
51119: PUSH
51120: LD_EXP 6
51124: PUSH
51125: LD_OWVAR 2
51129: ARRAY
51130: NONEQUAL
51131: PUSH
51132: LD_OWVAR 2
51136: PPUSH
51137: LD_VAR 0 1
51141: PPUSH
51142: CALL_OW 81
51146: PUSH
51147: LD_INT 1
51149: NONEQUAL
51150: AND
51151: OR
51152: IFFALSE 51175
// if HasPower ( i ) then
51154: LD_VAR 0 1
51158: PPUSH
51159: CALL 51234 0 1
51163: IFFALSE 51175
// begin canWin := false ;
51165: LD_ADDR_VAR 0 2
51169: PUSH
51170: LD_INT 0
51172: ST_TO_ADDR
// break ;
51173: GO 51177
// end ;
51175: GO 51059
51177: POP
51178: POP
// if canWin then
51179: LD_VAR 0 2
51183: IFFALSE 51190
// enable ( mpWin ) else
51185: LD_INT 101
51187: ENABLE_MARKED
51188: GO 51191
// enable ;
51190: ENABLE
// end ; end ;
51191: PPOPN 2
51193: END
// function CanWinLoose ; begin
51194: LD_INT 0
51196: PPUSH
// result := true ;
51197: LD_ADDR_VAR 0 1
51201: PUSH
51202: LD_INT 1
51204: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51205: CALL_OW 531
51209: PUSH
51210: CALL_OW 519
51214: PUSH
51215: LD_INT 1
51217: GREATER
51218: AND
51219: IFFALSE 51229
// result := false ;
51221: LD_ADDR_VAR 0 1
51225: PUSH
51226: LD_INT 0
51228: ST_TO_ADDR
// end ;
51229: LD_VAR 0 1
51233: RET
// function HasPower ( i ) ; begin
51234: LD_INT 0
51236: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51237: LD_ADDR_VAR 0 2
51241: PUSH
51242: LD_INT 22
51244: PUSH
51245: LD_VAR 0 1
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: LD_INT 21
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 33
51269: PUSH
51270: LD_INT 3
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 33
51279: PUSH
51280: LD_INT 5
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PPUSH
51297: CALL_OW 69
51301: ST_TO_ADDR
// end ; end_of_file
51302: LD_VAR 0 2
51306: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51307: LD_EXP 36
51311: IFFALSE 51354
51313: GO 51315
51315: DISABLE
51316: LD_INT 0
51318: PPUSH
// begin for i := 1 to 8 do
51319: LD_ADDR_VAR 0 1
51323: PUSH
51324: DOUBLE
51325: LD_INT 1
51327: DEC
51328: ST_TO_ADDR
51329: LD_INT 8
51331: PUSH
51332: FOR_TO
51333: IFFALSE 51352
// SetRestrict ( b_depot , i , state_disabled ) ;
51335: LD_INT 0
51337: PPUSH
51338: LD_VAR 0 1
51342: PPUSH
51343: LD_INT 0
51345: PPUSH
51346: CALL_OW 324
51350: GO 51332
51352: POP
51353: POP
// end ;
51354: PPOPN 1
51356: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51357: LD_EXP 36
51361: PUSH
51362: CALL 51567 0 0
51366: AND
51367: PUSH
51368: LD_OWVAR 4
51372: AND
51373: IFFALSE 51564
51375: GO 51377
51377: DISABLE
51378: LD_INT 0
51380: PPUSH
51381: PPUSH
// begin canWin := false ;
51382: LD_ADDR_VAR 0 2
51386: PUSH
51387: LD_INT 0
51389: ST_TO_ADDR
// if not HasPower ( your_side ) then
51390: LD_OWVAR 2
51394: PPUSH
51395: CALL 51607 0 1
51399: NOT
51400: IFFALSE 51411
// begin Multiplayer_Loose_Message ;
51402: CALL_OW 521
// enable ( mpLose ) ;
51406: LD_INT 102
51408: ENABLE_MARKED
// end else
51409: GO 51564
// begin canWin := true ;
51411: LD_ADDR_VAR 0 2
51415: PUSH
51416: LD_INT 1
51418: ST_TO_ADDR
// for i := 1 to 8 do
51419: LD_ADDR_VAR 0 1
51423: PUSH
51424: DOUBLE
51425: LD_INT 1
51427: DEC
51428: ST_TO_ADDR
51429: LD_INT 8
51431: PUSH
51432: FOR_TO
51433: IFFALSE 51550
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51435: LD_EXP 5
51439: PUSH
51440: LD_VAR 0 1
51444: ARRAY
51445: PUSH
51446: LD_VAR 0 1
51450: PPUSH
51451: CALL_OW 108
51455: AND
51456: PUSH
51457: LD_VAR 0 1
51461: PUSH
51462: LD_OWVAR 2
51466: NONEQUAL
51467: AND
51468: IFFALSE 51548
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51470: LD_EXP 6
51474: PUSH
51475: LD_VAR 0 1
51479: ARRAY
51480: NOT
51481: PUSH
51482: LD_EXP 6
51486: PUSH
51487: LD_VAR 0 1
51491: ARRAY
51492: PUSH
51493: LD_EXP 6
51497: PUSH
51498: LD_OWVAR 2
51502: ARRAY
51503: NONEQUAL
51504: PUSH
51505: LD_OWVAR 2
51509: PPUSH
51510: LD_VAR 0 1
51514: PPUSH
51515: CALL_OW 81
51519: PUSH
51520: LD_INT 1
51522: NONEQUAL
51523: AND
51524: OR
51525: IFFALSE 51548
// if HasPower ( i ) then
51527: LD_VAR 0 1
51531: PPUSH
51532: CALL 51607 0 1
51536: IFFALSE 51548
// begin canWin := false ;
51538: LD_ADDR_VAR 0 2
51542: PUSH
51543: LD_INT 0
51545: ST_TO_ADDR
// break ;
51546: GO 51550
// end ;
51548: GO 51432
51550: POP
51551: POP
// if canWin then
51552: LD_VAR 0 2
51556: IFFALSE 51563
// enable ( mpWin ) else
51558: LD_INT 101
51560: ENABLE_MARKED
51561: GO 51564
// enable ;
51563: ENABLE
// end ; end ;
51564: PPOPN 2
51566: END
// function CanWinLoose ; begin
51567: LD_INT 0
51569: PPUSH
// result := true ;
51570: LD_ADDR_VAR 0 1
51574: PUSH
51575: LD_INT 1
51577: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51578: CALL_OW 531
51582: PUSH
51583: CALL_OW 519
51587: PUSH
51588: LD_INT 1
51590: GREATER
51591: AND
51592: IFFALSE 51602
// result := false ;
51594: LD_ADDR_VAR 0 1
51598: PUSH
51599: LD_INT 0
51601: ST_TO_ADDR
// end ;
51602: LD_VAR 0 1
51606: RET
// function HasPower ( i ) ; begin
51607: LD_INT 0
51609: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
51610: LD_INT 22
51612: PUSH
51613: LD_VAR 0 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: LD_INT 30
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 30
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: LIST
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PPUSH
51654: CALL_OW 69
51658: NOT
51659: IFFALSE 51663
// exit ;
51661: GO 51728
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51663: LD_ADDR_VAR 0 2
51667: PUSH
51668: LD_INT 22
51670: PUSH
51671: LD_VAR 0 1
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: LD_INT 21
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 33
51695: PUSH
51696: LD_INT 3
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 33
51705: PUSH
51706: LD_INT 5
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PPUSH
51723: CALL_OW 69
51727: ST_TO_ADDR
// end ; end_of_file
51728: LD_VAR 0 2
51732: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
51733: LD_EXP 36
51737: IFFALSE 52076
51739: GO 51741
51741: DISABLE
51742: LD_INT 0
51744: PPUSH
51745: PPUSH
51746: PPUSH
// begin mpKingPoints := [ ] ;
51747: LD_ADDR_EXP 41
51751: PUSH
51752: EMPTY
51753: ST_TO_ADDR
// if mpTeamGame then
51754: LD_EXP 9
51758: IFFALSE 51812
// begin for i := 1 to Count ( mpTeams ) do
51760: LD_ADDR_VAR 0 1
51764: PUSH
51765: DOUBLE
51766: LD_INT 1
51768: DEC
51769: ST_TO_ADDR
51770: LD_EXP 8
51774: PPUSH
51775: CALL 4910 0 1
51779: PUSH
51780: FOR_TO
51781: IFFALSE 51808
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
51783: LD_ADDR_EXP 41
51787: PUSH
51788: LD_EXP 41
51792: PPUSH
51793: LD_VAR 0 1
51797: PPUSH
51798: LD_INT 0
51800: PPUSH
51801: CALL_OW 1
51805: ST_TO_ADDR
51806: GO 51780
51808: POP
51809: POP
// end else
51810: GO 51855
// begin for i := 1 to 8 do
51812: LD_ADDR_VAR 0 1
51816: PUSH
51817: DOUBLE
51818: LD_INT 1
51820: DEC
51821: ST_TO_ADDR
51822: LD_INT 8
51824: PUSH
51825: FOR_TO
51826: IFFALSE 51853
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
51828: LD_ADDR_EXP 41
51832: PUSH
51833: LD_EXP 41
51837: PPUSH
51838: LD_VAR 0 1
51842: PPUSH
51843: LD_INT 0
51845: PPUSH
51846: CALL_OW 1
51850: ST_TO_ADDR
51851: GO 51825
51853: POP
51854: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
51855: LD_ADDR_VAR 0 3
51859: PUSH
51860: LD_INT 17
51862: PPUSH
51863: LD_INT 0
51865: PPUSH
51866: CALL_OW 517
51870: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51871: LD_ADDR_VAR 0 1
51875: PUSH
51876: DOUBLE
51877: LD_INT 1
51879: DEC
51880: ST_TO_ADDR
51881: LD_VAR 0 3
51885: PUSH
51886: LD_INT 1
51888: ARRAY
51889: PUSH
51890: FOR_TO
51891: IFFALSE 51958
// for j := 1 to 8 do
51893: LD_ADDR_VAR 0 2
51897: PUSH
51898: DOUBLE
51899: LD_INT 1
51901: DEC
51902: ST_TO_ADDR
51903: LD_INT 8
51905: PUSH
51906: FOR_TO
51907: IFFALSE 51954
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
51909: LD_VAR 0 3
51913: PUSH
51914: LD_INT 1
51916: ARRAY
51917: PUSH
51918: LD_VAR 0 1
51922: ARRAY
51923: PPUSH
51924: LD_VAR 0 3
51928: PUSH
51929: LD_INT 2
51931: ARRAY
51932: PUSH
51933: LD_VAR 0 1
51937: ARRAY
51938: PPUSH
51939: LD_VAR 0 2
51943: PPUSH
51944: LD_INT 12
51946: NEG
51947: PPUSH
51948: CALL_OW 330
51952: GO 51906
51954: POP
51955: POP
51956: GO 51890
51958: POP
51959: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
51960: LD_EXP 31
51964: PPUSH
51965: LD_INT 1
51967: PPUSH
51968: CALL_OW 424
// UpdateCounter ;
51972: CALL 52578 0 0
// repeat wait ( 0 0$1 ) ;
51976: LD_INT 35
51978: PPUSH
51979: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51983: LD_ADDR_VAR 0 3
51987: PUSH
51988: LD_EXP 31
51992: PPUSH
51993: LD_INT 3
51995: PUSH
51996: LD_INT 57
51998: PUSH
51999: EMPTY
52000: LIST
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 50
52008: PUSH
52009: EMPTY
52010: LIST
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: LD_INT 30
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 30
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: LIST
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: LIST
52044: PPUSH
52045: CALL_OW 70
52049: ST_TO_ADDR
// if not tmp then
52050: LD_VAR 0 3
52054: NOT
52055: IFFALSE 52059
// continue ;
52057: GO 51976
// AddPoints ( tmp ) ;
52059: LD_VAR 0 3
52063: PPUSH
52064: CALL 52256 0 1
// UpdateCounter ;
52068: CALL 52578 0 0
// until false ;
52072: LD_INT 0
52074: IFFALSE 51976
// end ;
52076: PPOPN 3
52078: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52079: LD_EXP 36
52083: PUSH
52084: LD_EXP 34
52088: AND
52089: IFFALSE 52253
52091: GO 52093
52093: DISABLE
52094: LD_INT 0
52096: PPUSH
52097: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52098: LD_ADDR_VAR 0 2
52102: PUSH
52103: LD_INT 17
52105: PPUSH
52106: LD_INT 0
52108: PPUSH
52109: CALL_OW 517
52113: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52114: LD_ADDR_VAR 0 1
52118: PUSH
52119: DOUBLE
52120: LD_INT 1
52122: DEC
52123: ST_TO_ADDR
52124: LD_VAR 0 2
52128: PUSH
52129: LD_INT 1
52131: ARRAY
52132: PUSH
52133: FOR_TO
52134: IFFALSE 52175
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52136: LD_VAR 0 2
52140: PUSH
52141: LD_INT 1
52143: ARRAY
52144: PUSH
52145: LD_VAR 0 1
52149: ARRAY
52150: PPUSH
52151: LD_VAR 0 2
52155: PUSH
52156: LD_INT 2
52158: ARRAY
52159: PUSH
52160: LD_VAR 0 1
52164: ARRAY
52165: PPUSH
52166: LD_INT 125
52168: PPUSH
52169: CALL_OW 495
52173: GO 52133
52175: POP
52176: POP
// repeat wait ( mpEmissions ) ;
52177: LD_EXP 34
52181: PPUSH
52182: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52186: LD_ADDR_VAR 0 1
52190: PUSH
52191: DOUBLE
52192: LD_INT 1
52194: DEC
52195: ST_TO_ADDR
52196: LD_VAR 0 2
52200: PUSH
52201: LD_INT 1
52203: ARRAY
52204: PUSH
52205: FOR_TO
52206: IFFALSE 52247
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52208: LD_VAR 0 2
52212: PUSH
52213: LD_INT 1
52215: ARRAY
52216: PUSH
52217: LD_VAR 0 1
52221: ARRAY
52222: PPUSH
52223: LD_VAR 0 2
52227: PUSH
52228: LD_INT 2
52230: ARRAY
52231: PUSH
52232: LD_VAR 0 1
52236: ARRAY
52237: PPUSH
52238: LD_INT 15
52240: PPUSH
52241: CALL_OW 495
52245: GO 52205
52247: POP
52248: POP
// until false ;
52249: LD_INT 0
52251: IFFALSE 52177
// end ;
52253: PPOPN 2
52255: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52256: LD_INT 0
52258: PPUSH
52259: PPUSH
52260: PPUSH
52261: PPUSH
52262: PPUSH
// if mpTeamGame then
52263: LD_EXP 9
52267: IFFALSE 52464
// begin first := depots [ 1 ] ;
52269: LD_ADDR_VAR 0 4
52273: PUSH
52274: LD_VAR 0 1
52278: PUSH
52279: LD_INT 1
52281: ARRAY
52282: ST_TO_ADDR
// side := GetSide ( first ) ;
52283: LD_ADDR_VAR 0 6
52287: PUSH
52288: LD_VAR 0 4
52292: PPUSH
52293: CALL_OW 255
52297: ST_TO_ADDR
// for i := 1 to mpTeams do
52298: LD_ADDR_VAR 0 3
52302: PUSH
52303: DOUBLE
52304: LD_INT 1
52306: DEC
52307: ST_TO_ADDR
52308: LD_EXP 8
52312: PUSH
52313: FOR_TO
52314: IFFALSE 52348
// if side in mpTeams [ i ] then
52316: LD_VAR 0 6
52320: PUSH
52321: LD_EXP 8
52325: PUSH
52326: LD_VAR 0 3
52330: ARRAY
52331: IN
52332: IFFALSE 52346
// begin team := i ;
52334: LD_ADDR_VAR 0 5
52338: PUSH
52339: LD_VAR 0 3
52343: ST_TO_ADDR
// break ;
52344: GO 52348
// end ;
52346: GO 52313
52348: POP
52349: POP
// if not team then
52350: LD_VAR 0 5
52354: NOT
52355: IFFALSE 52359
// exit ;
52357: GO 52573
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52359: LD_EXP 31
52363: PPUSH
52364: LD_INT 81
52366: PUSH
52367: LD_VAR 0 6
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PPUSH
52376: CALL_OW 70
52380: IFFALSE 52384
// exit ;
52382: GO 52573
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52384: LD_ADDR_EXP 41
52388: PUSH
52389: LD_EXP 41
52393: PPUSH
52394: LD_VAR 0 5
52398: PPUSH
52399: LD_EXP 41
52403: PUSH
52404: LD_VAR 0 5
52408: ARRAY
52409: PUSH
52410: LD_INT 1
52412: PLUS
52413: PPUSH
52414: CALL_OW 1
52418: ST_TO_ADDR
// for i in mpTeams [ team ] do
52419: LD_ADDR_VAR 0 3
52423: PUSH
52424: LD_EXP 8
52428: PUSH
52429: LD_VAR 0 5
52433: ARRAY
52434: PUSH
52435: FOR_IN
52436: IFFALSE 52460
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52438: LD_VAR 0 3
52442: PPUSH
52443: LD_EXP 41
52447: PUSH
52448: LD_VAR 0 5
52452: ARRAY
52453: PPUSH
52454: CALL_OW 506
52458: GO 52435
52460: POP
52461: POP
// end else
52462: GO 52573
// begin first := depots [ 1 ] ;
52464: LD_ADDR_VAR 0 4
52468: PUSH
52469: LD_VAR 0 1
52473: PUSH
52474: LD_INT 1
52476: ARRAY
52477: ST_TO_ADDR
// side := GetSide ( first ) ;
52478: LD_ADDR_VAR 0 6
52482: PUSH
52483: LD_VAR 0 4
52487: PPUSH
52488: CALL_OW 255
52492: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52493: LD_EXP 31
52497: PPUSH
52498: LD_INT 81
52500: PUSH
52501: LD_VAR 0 6
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PPUSH
52510: CALL_OW 70
52514: IFFALSE 52518
// exit ;
52516: GO 52573
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
52518: LD_ADDR_EXP 41
52522: PUSH
52523: LD_EXP 41
52527: PPUSH
52528: LD_VAR 0 6
52532: PPUSH
52533: LD_EXP 41
52537: PUSH
52538: LD_VAR 0 6
52542: ARRAY
52543: PUSH
52544: LD_INT 1
52546: PLUS
52547: PPUSH
52548: CALL_OW 1
52552: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
52553: LD_VAR 0 6
52557: PPUSH
52558: LD_EXP 41
52562: PUSH
52563: LD_VAR 0 6
52567: ARRAY
52568: PPUSH
52569: CALL_OW 506
// end ; end ;
52573: LD_VAR 0 2
52577: RET
// function UpdateCounter ; var i ; begin
52578: LD_INT 0
52580: PPUSH
52581: PPUSH
// result := [ ] ;
52582: LD_ADDR_VAR 0 1
52586: PUSH
52587: EMPTY
52588: ST_TO_ADDR
// if mpTeamGame then
52589: LD_EXP 9
52593: IFFALSE 52660
// begin for i := 1 to mpTeams do
52595: LD_ADDR_VAR 0 2
52599: PUSH
52600: DOUBLE
52601: LD_INT 1
52603: DEC
52604: ST_TO_ADDR
52605: LD_EXP 8
52609: PUSH
52610: FOR_TO
52611: IFFALSE 52656
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
52613: LD_ADDR_VAR 0 1
52617: PUSH
52618: LD_VAR 0 1
52622: PUSH
52623: LD_STRING #KingoftheHill-Team
52625: PUSH
52626: LD_VAR 0 2
52630: PUSH
52631: LD_EXP 41
52635: PUSH
52636: LD_VAR 0 2
52640: ARRAY
52641: PUSH
52642: LD_EXP 32
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: ADD
52653: ST_TO_ADDR
52654: GO 52610
52656: POP
52657: POP
// end else
52658: GO 52733
// begin for i := 1 to 8 do
52660: LD_ADDR_VAR 0 2
52664: PUSH
52665: DOUBLE
52666: LD_INT 1
52668: DEC
52669: ST_TO_ADDR
52670: LD_INT 8
52672: PUSH
52673: FOR_TO
52674: IFFALSE 52731
// if mpSidePositions [ i ] then
52676: LD_EXP 5
52680: PUSH
52681: LD_VAR 0 2
52685: ARRAY
52686: IFFALSE 52729
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
52688: LD_ADDR_VAR 0 1
52692: PUSH
52693: LD_VAR 0 1
52697: PUSH
52698: LD_STRING #KingoftheHill-Player
52700: PUSH
52701: LD_VAR 0 2
52705: PUSH
52706: LD_EXP 41
52710: PUSH
52711: LD_VAR 0 2
52715: ARRAY
52716: PUSH
52717: LD_EXP 32
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: ADD
52728: ST_TO_ADDR
52729: GO 52673
52731: POP
52732: POP
// end ; mpDisplayStrings := result ;
52733: LD_ADDR_EXP 35
52737: PUSH
52738: LD_VAR 0 1
52742: ST_TO_ADDR
// end ;
52743: LD_VAR 0 1
52747: RET
// export function HowMuchPointsKing ( side ) ; begin
52748: LD_INT 0
52750: PPUSH
// result := HowMuchPoints ( side ) ;
52751: LD_ADDR_VAR 0 2
52755: PUSH
52756: LD_VAR 0 1
52760: PPUSH
52761: CALL 52771 0 1
52765: ST_TO_ADDR
// end ;
52766: LD_VAR 0 2
52770: RET
// function HowMuchPoints ( side ) ; var i ; begin
52771: LD_INT 0
52773: PPUSH
52774: PPUSH
// if mpTeamGame then
52775: LD_EXP 9
52779: IFFALSE 52848
// begin for i := 1 to Count ( mpTeams ) do
52781: LD_ADDR_VAR 0 3
52785: PUSH
52786: DOUBLE
52787: LD_INT 1
52789: DEC
52790: ST_TO_ADDR
52791: LD_EXP 8
52795: PPUSH
52796: CALL 4910 0 1
52800: PUSH
52801: FOR_TO
52802: IFFALSE 52844
// begin if side in mpTeams [ i ] then
52804: LD_VAR 0 1
52808: PUSH
52809: LD_EXP 8
52813: PUSH
52814: LD_VAR 0 3
52818: ARRAY
52819: IN
52820: IFFALSE 52842
// begin result := mpKingPoints [ i ] ;
52822: LD_ADDR_VAR 0 2
52826: PUSH
52827: LD_EXP 41
52831: PUSH
52832: LD_VAR 0 3
52836: ARRAY
52837: ST_TO_ADDR
// exit ;
52838: POP
52839: POP
52840: GO 52864
// end ; end ;
52842: GO 52801
52844: POP
52845: POP
// end else
52846: GO 52864
// result := mpKingPoints [ side ] ;
52848: LD_ADDR_VAR 0 2
52852: PUSH
52853: LD_EXP 41
52857: PUSH
52858: LD_VAR 0 1
52862: ARRAY
52863: ST_TO_ADDR
// end ;
52864: LD_VAR 0 2
52868: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
52869: LD_EXP 36
52873: PUSH
52874: CALL 53196 0 0
52878: AND
52879: PUSH
52880: LD_OWVAR 4
52884: AND
52885: IFFALSE 53121
52887: GO 52889
52889: DISABLE
52890: LD_INT 0
52892: PPUSH
52893: PPUSH
// begin canWin := false ;
52894: LD_ADDR_VAR 0 2
52898: PUSH
52899: LD_INT 0
52901: ST_TO_ADDR
// if not HasPower ( your_side ) then
52902: LD_OWVAR 2
52906: PPUSH
52907: CALL 53236 0 1
52911: NOT
52912: IFFALSE 52923
// begin Multiplayer_Loose_Message ;
52914: CALL_OW 521
// enable ( mpLose ) ;
52918: LD_INT 102
52920: ENABLE_MARKED
// end else
52921: GO 53121
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
52923: LD_ADDR_VAR 0 2
52927: PUSH
52928: LD_OWVAR 2
52932: PPUSH
52933: CALL 52771 0 1
52937: PUSH
52938: LD_EXP 32
52942: GREATEREQUAL
52943: PUSH
52944: LD_OWVAR 2
52948: PPUSH
52949: CALL 53236 0 1
52953: AND
52954: PUSH
52955: CALL 53124 0 0
52959: NOT
52960: OR
52961: ST_TO_ADDR
// for i := 1 to 8 do
52962: LD_ADDR_VAR 0 1
52966: PUSH
52967: DOUBLE
52968: LD_INT 1
52970: DEC
52971: ST_TO_ADDR
52972: LD_INT 8
52974: PUSH
52975: FOR_TO
52976: IFFALSE 53107
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
52978: LD_EXP 5
52982: PUSH
52983: LD_VAR 0 1
52987: ARRAY
52988: PUSH
52989: LD_VAR 0 1
52993: PPUSH
52994: CALL_OW 108
52998: AND
52999: PUSH
53000: LD_VAR 0 1
53004: PUSH
53005: LD_OWVAR 2
53009: NONEQUAL
53010: AND
53011: IFFALSE 53105
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53013: LD_EXP 6
53017: PUSH
53018: LD_VAR 0 1
53022: ARRAY
53023: NOT
53024: PUSH
53025: LD_EXP 6
53029: PUSH
53030: LD_VAR 0 1
53034: ARRAY
53035: PUSH
53036: LD_EXP 6
53040: PUSH
53041: LD_OWVAR 2
53045: ARRAY
53046: NONEQUAL
53047: PUSH
53048: LD_OWVAR 2
53052: PPUSH
53053: LD_VAR 0 1
53057: PPUSH
53058: CALL_OW 81
53062: PUSH
53063: LD_INT 1
53065: NONEQUAL
53066: AND
53067: OR
53068: IFFALSE 53105
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53070: LD_VAR 0 1
53074: PPUSH
53075: CALL 52771 0 1
53079: PUSH
53080: LD_EXP 32
53084: GREATEREQUAL
53085: PUSH
53086: LD_VAR 0 1
53090: PPUSH
53091: CALL 53236 0 1
53095: AND
53096: IFFALSE 53105
// begin enable ( mpLose ) ;
53098: LD_INT 102
53100: ENABLE_MARKED
// exit ;
53101: POP
53102: POP
53103: GO 53121
// end ;
53105: GO 52975
53107: POP
53108: POP
// if canWin then
53109: LD_VAR 0 2
53113: IFFALSE 53120
// enable ( mpWin ) else
53115: LD_INT 101
53117: ENABLE_MARKED
53118: GO 53121
// enable ;
53120: ENABLE
// end ; end ;
53121: PPOPN 2
53123: END
// function EnemiesInGame ; var i ; begin
53124: LD_INT 0
53126: PPUSH
53127: PPUSH
// result := false ;
53128: LD_ADDR_VAR 0 1
53132: PUSH
53133: LD_INT 0
53135: ST_TO_ADDR
// for i := 1 to 8 do
53136: LD_ADDR_VAR 0 2
53140: PUSH
53141: DOUBLE
53142: LD_INT 1
53144: DEC
53145: ST_TO_ADDR
53146: LD_INT 8
53148: PUSH
53149: FOR_TO
53150: IFFALSE 53189
// if i <> your_side and HasPower ( i ) then
53152: LD_VAR 0 2
53156: PUSH
53157: LD_OWVAR 2
53161: NONEQUAL
53162: PUSH
53163: LD_VAR 0 2
53167: PPUSH
53168: CALL 53236 0 1
53172: AND
53173: IFFALSE 53187
// begin result := true ;
53175: LD_ADDR_VAR 0 1
53179: PUSH
53180: LD_INT 1
53182: ST_TO_ADDR
// exit ;
53183: POP
53184: POP
53185: GO 53191
// end ;
53187: GO 53149
53189: POP
53190: POP
// end ;
53191: LD_VAR 0 1
53195: RET
// function CanWinLoose ; begin
53196: LD_INT 0
53198: PPUSH
// result := true ;
53199: LD_ADDR_VAR 0 1
53203: PUSH
53204: LD_INT 1
53206: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53207: CALL_OW 531
53211: PUSH
53212: CALL_OW 519
53216: PUSH
53217: LD_INT 1
53219: GREATER
53220: AND
53221: IFFALSE 53231
// result := false ;
53223: LD_ADDR_VAR 0 1
53227: PUSH
53228: LD_INT 0
53230: ST_TO_ADDR
// end ;
53231: LD_VAR 0 1
53235: RET
// function HasPower ( i ) ; begin
53236: LD_INT 0
53238: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53239: LD_ADDR_VAR 0 2
53243: PUSH
53244: LD_INT 22
53246: PUSH
53247: LD_VAR 0 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: LD_INT 21
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 33
53271: PUSH
53272: LD_INT 3
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 33
53281: PUSH
53282: LD_INT 5
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PPUSH
53299: CALL_OW 69
53303: ST_TO_ADDR
// end ; end_of_file end_of_file
53304: LD_VAR 0 2
53308: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
53309: LD_VAR 0 1
53313: PPUSH
53314: LD_VAR 0 2
53318: PPUSH
53319: LD_VAR 0 3
53323: PPUSH
53324: LD_VAR 0 4
53328: PPUSH
53329: LD_VAR 0 5
53333: PPUSH
53334: LD_VAR 0 6
53338: PPUSH
53339: CALL 53540 0 6
// end ;
53343: PPOPN 6
53345: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
53346: LD_INT 0
53348: PPUSH
// begin if not units then
53349: LD_VAR 0 1
53353: NOT
53354: IFFALSE 53358
// exit ;
53356: GO 53358
// end ;
53358: PPOPN 7
53360: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
53361: CALL 53427 0 0
// end ; end_of_file
53365: PPOPN 1
53367: END
// export globalGameSaveCounter ; every 0 0$1 do
53368: GO 53370
53370: DISABLE
// begin enable ;
53371: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
53372: LD_STRING updateTimer(
53374: PUSH
53375: LD_OWVAR 1
53379: STR
53380: PUSH
53381: LD_STRING );
53383: STR
53384: PPUSH
53385: CALL_OW 559
// end ;
53389: END
// every 0 0$1 do
53390: GO 53392
53392: DISABLE
// begin globalGameSaveCounter := 0 ;
53393: LD_ADDR_EXP 42
53397: PUSH
53398: LD_INT 0
53400: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
53401: LD_STRING setGameSaveCounter(0)
53403: PPUSH
53404: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
53408: LD_STRING initStreamRollete();
53410: PPUSH
53411: CALL_OW 559
// InitStreamMode ;
53415: CALL 54758 0 0
// DefineStreamItems ( false ) ;
53419: LD_INT 0
53421: PPUSH
53422: CALL 55222 0 1
// end ;
53426: END
// export function SOS_MapStart ( ) ; begin
53427: LD_INT 0
53429: PPUSH
// if streamModeActive then
53430: LD_EXP 43
53434: IFFALSE 53443
// DefineStreamItems ( true ) ;
53436: LD_INT 1
53438: PPUSH
53439: CALL 55222 0 1
// UpdateLuaVariables ( ) ;
53443: CALL 53460 0 0
// UpdateFactoryWaypoints ( ) ;
53447: CALL 68091 0 0
// UpdateWarehouseGatheringPoints ( ) ;
53451: CALL 68348 0 0
// end ;
53455: LD_VAR 0 1
53459: RET
// function UpdateLuaVariables ( ) ; begin
53460: LD_INT 0
53462: PPUSH
// if globalGameSaveCounter then
53463: LD_EXP 42
53467: IFFALSE 53501
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
53469: LD_ADDR_EXP 42
53473: PUSH
53474: LD_EXP 42
53478: PPUSH
53479: CALL 41860 0 1
53483: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53484: LD_STRING setGameSaveCounter(
53486: PUSH
53487: LD_EXP 42
53491: STR
53492: PUSH
53493: LD_STRING )
53495: STR
53496: PPUSH
53497: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
53501: LD_STRING setGameDifficulty(
53503: PUSH
53504: LD_OWVAR 67
53508: STR
53509: PUSH
53510: LD_STRING )
53512: STR
53513: PPUSH
53514: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
53518: LD_STRING displayDifficulty(
53520: PUSH
53521: LD_OWVAR 67
53525: STR
53526: PUSH
53527: LD_STRING )
53529: STR
53530: PPUSH
53531: CALL_OW 559
// end ;
53535: LD_VAR 0 1
53539: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53540: LD_INT 0
53542: PPUSH
// if p2 = stream_mode then
53543: LD_VAR 0 2
53547: PUSH
53548: LD_INT 100
53550: EQUAL
53551: IFFALSE 54554
// begin if not StreamModeActive then
53553: LD_EXP 43
53557: NOT
53558: IFFALSE 53568
// StreamModeActive := true ;
53560: LD_ADDR_EXP 43
53564: PUSH
53565: LD_INT 1
53567: ST_TO_ADDR
// if p3 = 0 then
53568: LD_VAR 0 3
53572: PUSH
53573: LD_INT 0
53575: EQUAL
53576: IFFALSE 53582
// InitStreamMode ;
53578: CALL 54758 0 0
// if p3 = 1 then
53582: LD_VAR 0 3
53586: PUSH
53587: LD_INT 1
53589: EQUAL
53590: IFFALSE 53600
// sRocket := true ;
53592: LD_ADDR_EXP 48
53596: PUSH
53597: LD_INT 1
53599: ST_TO_ADDR
// if p3 = 2 then
53600: LD_VAR 0 3
53604: PUSH
53605: LD_INT 2
53607: EQUAL
53608: IFFALSE 53618
// sSpeed := true ;
53610: LD_ADDR_EXP 47
53614: PUSH
53615: LD_INT 1
53617: ST_TO_ADDR
// if p3 = 3 then
53618: LD_VAR 0 3
53622: PUSH
53623: LD_INT 3
53625: EQUAL
53626: IFFALSE 53636
// sEngine := true ;
53628: LD_ADDR_EXP 49
53632: PUSH
53633: LD_INT 1
53635: ST_TO_ADDR
// if p3 = 4 then
53636: LD_VAR 0 3
53640: PUSH
53641: LD_INT 4
53643: EQUAL
53644: IFFALSE 53654
// sSpec := true ;
53646: LD_ADDR_EXP 46
53650: PUSH
53651: LD_INT 1
53653: ST_TO_ADDR
// if p3 = 5 then
53654: LD_VAR 0 3
53658: PUSH
53659: LD_INT 5
53661: EQUAL
53662: IFFALSE 53672
// sLevel := true ;
53664: LD_ADDR_EXP 50
53668: PUSH
53669: LD_INT 1
53671: ST_TO_ADDR
// if p3 = 6 then
53672: LD_VAR 0 3
53676: PUSH
53677: LD_INT 6
53679: EQUAL
53680: IFFALSE 53690
// sArmoury := true ;
53682: LD_ADDR_EXP 51
53686: PUSH
53687: LD_INT 1
53689: ST_TO_ADDR
// if p3 = 7 then
53690: LD_VAR 0 3
53694: PUSH
53695: LD_INT 7
53697: EQUAL
53698: IFFALSE 53708
// sRadar := true ;
53700: LD_ADDR_EXP 52
53704: PUSH
53705: LD_INT 1
53707: ST_TO_ADDR
// if p3 = 8 then
53708: LD_VAR 0 3
53712: PUSH
53713: LD_INT 8
53715: EQUAL
53716: IFFALSE 53726
// sBunker := true ;
53718: LD_ADDR_EXP 53
53722: PUSH
53723: LD_INT 1
53725: ST_TO_ADDR
// if p3 = 9 then
53726: LD_VAR 0 3
53730: PUSH
53731: LD_INT 9
53733: EQUAL
53734: IFFALSE 53744
// sHack := true ;
53736: LD_ADDR_EXP 54
53740: PUSH
53741: LD_INT 1
53743: ST_TO_ADDR
// if p3 = 10 then
53744: LD_VAR 0 3
53748: PUSH
53749: LD_INT 10
53751: EQUAL
53752: IFFALSE 53762
// sFire := true ;
53754: LD_ADDR_EXP 55
53758: PUSH
53759: LD_INT 1
53761: ST_TO_ADDR
// if p3 = 11 then
53762: LD_VAR 0 3
53766: PUSH
53767: LD_INT 11
53769: EQUAL
53770: IFFALSE 53780
// sRefresh := true ;
53772: LD_ADDR_EXP 56
53776: PUSH
53777: LD_INT 1
53779: ST_TO_ADDR
// if p3 = 12 then
53780: LD_VAR 0 3
53784: PUSH
53785: LD_INT 12
53787: EQUAL
53788: IFFALSE 53798
// sExp := true ;
53790: LD_ADDR_EXP 57
53794: PUSH
53795: LD_INT 1
53797: ST_TO_ADDR
// if p3 = 13 then
53798: LD_VAR 0 3
53802: PUSH
53803: LD_INT 13
53805: EQUAL
53806: IFFALSE 53816
// sDepot := true ;
53808: LD_ADDR_EXP 58
53812: PUSH
53813: LD_INT 1
53815: ST_TO_ADDR
// if p3 = 14 then
53816: LD_VAR 0 3
53820: PUSH
53821: LD_INT 14
53823: EQUAL
53824: IFFALSE 53834
// sFlag := true ;
53826: LD_ADDR_EXP 59
53830: PUSH
53831: LD_INT 1
53833: ST_TO_ADDR
// if p3 = 15 then
53834: LD_VAR 0 3
53838: PUSH
53839: LD_INT 15
53841: EQUAL
53842: IFFALSE 53852
// sKamikadze := true ;
53844: LD_ADDR_EXP 67
53848: PUSH
53849: LD_INT 1
53851: ST_TO_ADDR
// if p3 = 16 then
53852: LD_VAR 0 3
53856: PUSH
53857: LD_INT 16
53859: EQUAL
53860: IFFALSE 53870
// sTroll := true ;
53862: LD_ADDR_EXP 68
53866: PUSH
53867: LD_INT 1
53869: ST_TO_ADDR
// if p3 = 17 then
53870: LD_VAR 0 3
53874: PUSH
53875: LD_INT 17
53877: EQUAL
53878: IFFALSE 53888
// sSlow := true ;
53880: LD_ADDR_EXP 69
53884: PUSH
53885: LD_INT 1
53887: ST_TO_ADDR
// if p3 = 18 then
53888: LD_VAR 0 3
53892: PUSH
53893: LD_INT 18
53895: EQUAL
53896: IFFALSE 53906
// sLack := true ;
53898: LD_ADDR_EXP 70
53902: PUSH
53903: LD_INT 1
53905: ST_TO_ADDR
// if p3 = 19 then
53906: LD_VAR 0 3
53910: PUSH
53911: LD_INT 19
53913: EQUAL
53914: IFFALSE 53924
// sTank := true ;
53916: LD_ADDR_EXP 72
53920: PUSH
53921: LD_INT 1
53923: ST_TO_ADDR
// if p3 = 20 then
53924: LD_VAR 0 3
53928: PUSH
53929: LD_INT 20
53931: EQUAL
53932: IFFALSE 53942
// sRemote := true ;
53934: LD_ADDR_EXP 73
53938: PUSH
53939: LD_INT 1
53941: ST_TO_ADDR
// if p3 = 21 then
53942: LD_VAR 0 3
53946: PUSH
53947: LD_INT 21
53949: EQUAL
53950: IFFALSE 53960
// sPowell := true ;
53952: LD_ADDR_EXP 74
53956: PUSH
53957: LD_INT 1
53959: ST_TO_ADDR
// if p3 = 22 then
53960: LD_VAR 0 3
53964: PUSH
53965: LD_INT 22
53967: EQUAL
53968: IFFALSE 53978
// sTeleport := true ;
53970: LD_ADDR_EXP 77
53974: PUSH
53975: LD_INT 1
53977: ST_TO_ADDR
// if p3 = 23 then
53978: LD_VAR 0 3
53982: PUSH
53983: LD_INT 23
53985: EQUAL
53986: IFFALSE 53996
// sOilTower := true ;
53988: LD_ADDR_EXP 79
53992: PUSH
53993: LD_INT 1
53995: ST_TO_ADDR
// if p3 = 24 then
53996: LD_VAR 0 3
54000: PUSH
54001: LD_INT 24
54003: EQUAL
54004: IFFALSE 54014
// sShovel := true ;
54006: LD_ADDR_EXP 80
54010: PUSH
54011: LD_INT 1
54013: ST_TO_ADDR
// if p3 = 25 then
54014: LD_VAR 0 3
54018: PUSH
54019: LD_INT 25
54021: EQUAL
54022: IFFALSE 54032
// sSheik := true ;
54024: LD_ADDR_EXP 81
54028: PUSH
54029: LD_INT 1
54031: ST_TO_ADDR
// if p3 = 26 then
54032: LD_VAR 0 3
54036: PUSH
54037: LD_INT 26
54039: EQUAL
54040: IFFALSE 54050
// sEarthquake := true ;
54042: LD_ADDR_EXP 83
54046: PUSH
54047: LD_INT 1
54049: ST_TO_ADDR
// if p3 = 27 then
54050: LD_VAR 0 3
54054: PUSH
54055: LD_INT 27
54057: EQUAL
54058: IFFALSE 54068
// sAI := true ;
54060: LD_ADDR_EXP 84
54064: PUSH
54065: LD_INT 1
54067: ST_TO_ADDR
// if p3 = 28 then
54068: LD_VAR 0 3
54072: PUSH
54073: LD_INT 28
54075: EQUAL
54076: IFFALSE 54086
// sCargo := true ;
54078: LD_ADDR_EXP 87
54082: PUSH
54083: LD_INT 1
54085: ST_TO_ADDR
// if p3 = 29 then
54086: LD_VAR 0 3
54090: PUSH
54091: LD_INT 29
54093: EQUAL
54094: IFFALSE 54104
// sDLaser := true ;
54096: LD_ADDR_EXP 88
54100: PUSH
54101: LD_INT 1
54103: ST_TO_ADDR
// if p3 = 30 then
54104: LD_VAR 0 3
54108: PUSH
54109: LD_INT 30
54111: EQUAL
54112: IFFALSE 54122
// sExchange := true ;
54114: LD_ADDR_EXP 89
54118: PUSH
54119: LD_INT 1
54121: ST_TO_ADDR
// if p3 = 31 then
54122: LD_VAR 0 3
54126: PUSH
54127: LD_INT 31
54129: EQUAL
54130: IFFALSE 54140
// sFac := true ;
54132: LD_ADDR_EXP 90
54136: PUSH
54137: LD_INT 1
54139: ST_TO_ADDR
// if p3 = 32 then
54140: LD_VAR 0 3
54144: PUSH
54145: LD_INT 32
54147: EQUAL
54148: IFFALSE 54158
// sPower := true ;
54150: LD_ADDR_EXP 91
54154: PUSH
54155: LD_INT 1
54157: ST_TO_ADDR
// if p3 = 33 then
54158: LD_VAR 0 3
54162: PUSH
54163: LD_INT 33
54165: EQUAL
54166: IFFALSE 54176
// sRandom := true ;
54168: LD_ADDR_EXP 92
54172: PUSH
54173: LD_INT 1
54175: ST_TO_ADDR
// if p3 = 34 then
54176: LD_VAR 0 3
54180: PUSH
54181: LD_INT 34
54183: EQUAL
54184: IFFALSE 54194
// sShield := true ;
54186: LD_ADDR_EXP 93
54190: PUSH
54191: LD_INT 1
54193: ST_TO_ADDR
// if p3 = 35 then
54194: LD_VAR 0 3
54198: PUSH
54199: LD_INT 35
54201: EQUAL
54202: IFFALSE 54212
// sTime := true ;
54204: LD_ADDR_EXP 94
54208: PUSH
54209: LD_INT 1
54211: ST_TO_ADDR
// if p3 = 36 then
54212: LD_VAR 0 3
54216: PUSH
54217: LD_INT 36
54219: EQUAL
54220: IFFALSE 54230
// sTools := true ;
54222: LD_ADDR_EXP 95
54226: PUSH
54227: LD_INT 1
54229: ST_TO_ADDR
// if p3 = 101 then
54230: LD_VAR 0 3
54234: PUSH
54235: LD_INT 101
54237: EQUAL
54238: IFFALSE 54248
// sSold := true ;
54240: LD_ADDR_EXP 60
54244: PUSH
54245: LD_INT 1
54247: ST_TO_ADDR
// if p3 = 102 then
54248: LD_VAR 0 3
54252: PUSH
54253: LD_INT 102
54255: EQUAL
54256: IFFALSE 54266
// sDiff := true ;
54258: LD_ADDR_EXP 61
54262: PUSH
54263: LD_INT 1
54265: ST_TO_ADDR
// if p3 = 103 then
54266: LD_VAR 0 3
54270: PUSH
54271: LD_INT 103
54273: EQUAL
54274: IFFALSE 54284
// sFog := true ;
54276: LD_ADDR_EXP 64
54280: PUSH
54281: LD_INT 1
54283: ST_TO_ADDR
// if p3 = 104 then
54284: LD_VAR 0 3
54288: PUSH
54289: LD_INT 104
54291: EQUAL
54292: IFFALSE 54302
// sReset := true ;
54294: LD_ADDR_EXP 65
54298: PUSH
54299: LD_INT 1
54301: ST_TO_ADDR
// if p3 = 105 then
54302: LD_VAR 0 3
54306: PUSH
54307: LD_INT 105
54309: EQUAL
54310: IFFALSE 54320
// sSun := true ;
54312: LD_ADDR_EXP 66
54316: PUSH
54317: LD_INT 1
54319: ST_TO_ADDR
// if p3 = 106 then
54320: LD_VAR 0 3
54324: PUSH
54325: LD_INT 106
54327: EQUAL
54328: IFFALSE 54338
// sTiger := true ;
54330: LD_ADDR_EXP 62
54334: PUSH
54335: LD_INT 1
54337: ST_TO_ADDR
// if p3 = 107 then
54338: LD_VAR 0 3
54342: PUSH
54343: LD_INT 107
54345: EQUAL
54346: IFFALSE 54356
// sBomb := true ;
54348: LD_ADDR_EXP 63
54352: PUSH
54353: LD_INT 1
54355: ST_TO_ADDR
// if p3 = 108 then
54356: LD_VAR 0 3
54360: PUSH
54361: LD_INT 108
54363: EQUAL
54364: IFFALSE 54374
// sWound := true ;
54366: LD_ADDR_EXP 71
54370: PUSH
54371: LD_INT 1
54373: ST_TO_ADDR
// if p3 = 109 then
54374: LD_VAR 0 3
54378: PUSH
54379: LD_INT 109
54381: EQUAL
54382: IFFALSE 54392
// sBetray := true ;
54384: LD_ADDR_EXP 75
54388: PUSH
54389: LD_INT 1
54391: ST_TO_ADDR
// if p3 = 110 then
54392: LD_VAR 0 3
54396: PUSH
54397: LD_INT 110
54399: EQUAL
54400: IFFALSE 54410
// sContamin := true ;
54402: LD_ADDR_EXP 76
54406: PUSH
54407: LD_INT 1
54409: ST_TO_ADDR
// if p3 = 111 then
54410: LD_VAR 0 3
54414: PUSH
54415: LD_INT 111
54417: EQUAL
54418: IFFALSE 54428
// sOil := true ;
54420: LD_ADDR_EXP 78
54424: PUSH
54425: LD_INT 1
54427: ST_TO_ADDR
// if p3 = 112 then
54428: LD_VAR 0 3
54432: PUSH
54433: LD_INT 112
54435: EQUAL
54436: IFFALSE 54446
// sStu := true ;
54438: LD_ADDR_EXP 82
54442: PUSH
54443: LD_INT 1
54445: ST_TO_ADDR
// if p3 = 113 then
54446: LD_VAR 0 3
54450: PUSH
54451: LD_INT 113
54453: EQUAL
54454: IFFALSE 54464
// sBazooka := true ;
54456: LD_ADDR_EXP 85
54460: PUSH
54461: LD_INT 1
54463: ST_TO_ADDR
// if p3 = 114 then
54464: LD_VAR 0 3
54468: PUSH
54469: LD_INT 114
54471: EQUAL
54472: IFFALSE 54482
// sMortar := true ;
54474: LD_ADDR_EXP 86
54478: PUSH
54479: LD_INT 1
54481: ST_TO_ADDR
// if p3 = 115 then
54482: LD_VAR 0 3
54486: PUSH
54487: LD_INT 115
54489: EQUAL
54490: IFFALSE 54500
// sRanger := true ;
54492: LD_ADDR_EXP 96
54496: PUSH
54497: LD_INT 1
54499: ST_TO_ADDR
// if p3 = 116 then
54500: LD_VAR 0 3
54504: PUSH
54505: LD_INT 116
54507: EQUAL
54508: IFFALSE 54518
// sComputer := true ;
54510: LD_ADDR_EXP 97
54514: PUSH
54515: LD_INT 1
54517: ST_TO_ADDR
// if p3 = 117 then
54518: LD_VAR 0 3
54522: PUSH
54523: LD_INT 117
54525: EQUAL
54526: IFFALSE 54536
// s30 := true ;
54528: LD_ADDR_EXP 98
54532: PUSH
54533: LD_INT 1
54535: ST_TO_ADDR
// if p3 = 118 then
54536: LD_VAR 0 3
54540: PUSH
54541: LD_INT 118
54543: EQUAL
54544: IFFALSE 54554
// s60 := true ;
54546: LD_ADDR_EXP 99
54550: PUSH
54551: LD_INT 1
54553: ST_TO_ADDR
// end ; if p2 = hack_mode then
54554: LD_VAR 0 2
54558: PUSH
54559: LD_INT 101
54561: EQUAL
54562: IFFALSE 54690
// begin case p3 of 1 :
54564: LD_VAR 0 3
54568: PUSH
54569: LD_INT 1
54571: DOUBLE
54572: EQUAL
54573: IFTRUE 54577
54575: GO 54584
54577: POP
// hHackUnlimitedResources ; 2 :
54578: CALL 66837 0 0
54582: GO 54690
54584: LD_INT 2
54586: DOUBLE
54587: EQUAL
54588: IFTRUE 54592
54590: GO 54599
54592: POP
// hHackSetLevel10 ; 3 :
54593: CALL 66970 0 0
54597: GO 54690
54599: LD_INT 3
54601: DOUBLE
54602: EQUAL
54603: IFTRUE 54607
54605: GO 54614
54607: POP
// hHackSetLevel10YourUnits ; 4 :
54608: CALL 67055 0 0
54612: GO 54690
54614: LD_INT 4
54616: DOUBLE
54617: EQUAL
54618: IFTRUE 54622
54620: GO 54629
54622: POP
// hHackInvincible ; 5 :
54623: CALL 67503 0 0
54627: GO 54690
54629: LD_INT 5
54631: DOUBLE
54632: EQUAL
54633: IFTRUE 54637
54635: GO 54644
54637: POP
// hHackInvisible ; 6 :
54638: CALL 67614 0 0
54642: GO 54690
54644: LD_INT 6
54646: DOUBLE
54647: EQUAL
54648: IFTRUE 54652
54650: GO 54659
54652: POP
// hHackChangeYourSide ; 7 :
54653: CALL 67671 0 0
54657: GO 54690
54659: LD_INT 7
54661: DOUBLE
54662: EQUAL
54663: IFTRUE 54667
54665: GO 54674
54667: POP
// hHackChangeUnitSide ; 8 :
54668: CALL 67713 0 0
54672: GO 54690
54674: LD_INT 8
54676: DOUBLE
54677: EQUAL
54678: IFTRUE 54682
54680: GO 54689
54682: POP
// hHackFog ; end ;
54683: CALL 67814 0 0
54687: GO 54690
54689: POP
// end ; if p2 = game_save_mode then
54690: LD_VAR 0 2
54694: PUSH
54695: LD_INT 102
54697: EQUAL
54698: IFFALSE 54753
// begin if p3 = 1 then
54700: LD_VAR 0 3
54704: PUSH
54705: LD_INT 1
54707: EQUAL
54708: IFFALSE 54720
// globalGameSaveCounter := p4 ;
54710: LD_ADDR_EXP 42
54714: PUSH
54715: LD_VAR 0 4
54719: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
54720: LD_VAR 0 3
54724: PUSH
54725: LD_INT 2
54727: EQUAL
54728: PUSH
54729: LD_EXP 42
54733: AND
54734: IFFALSE 54753
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
54736: LD_STRING setGameSaveCounter(
54738: PUSH
54739: LD_EXP 42
54743: STR
54744: PUSH
54745: LD_STRING )
54747: STR
54748: PPUSH
54749: CALL_OW 559
// end ; end ;
54753: LD_VAR 0 7
54757: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
54758: LD_INT 0
54760: PPUSH
// streamModeActive := false ;
54761: LD_ADDR_EXP 43
54765: PUSH
54766: LD_INT 0
54768: ST_TO_ADDR
// normalCounter := 36 ;
54769: LD_ADDR_EXP 44
54773: PUSH
54774: LD_INT 36
54776: ST_TO_ADDR
// hardcoreCounter := 18 ;
54777: LD_ADDR_EXP 45
54781: PUSH
54782: LD_INT 18
54784: ST_TO_ADDR
// sRocket := false ;
54785: LD_ADDR_EXP 48
54789: PUSH
54790: LD_INT 0
54792: ST_TO_ADDR
// sSpeed := false ;
54793: LD_ADDR_EXP 47
54797: PUSH
54798: LD_INT 0
54800: ST_TO_ADDR
// sEngine := false ;
54801: LD_ADDR_EXP 49
54805: PUSH
54806: LD_INT 0
54808: ST_TO_ADDR
// sSpec := false ;
54809: LD_ADDR_EXP 46
54813: PUSH
54814: LD_INT 0
54816: ST_TO_ADDR
// sLevel := false ;
54817: LD_ADDR_EXP 50
54821: PUSH
54822: LD_INT 0
54824: ST_TO_ADDR
// sArmoury := false ;
54825: LD_ADDR_EXP 51
54829: PUSH
54830: LD_INT 0
54832: ST_TO_ADDR
// sRadar := false ;
54833: LD_ADDR_EXP 52
54837: PUSH
54838: LD_INT 0
54840: ST_TO_ADDR
// sBunker := false ;
54841: LD_ADDR_EXP 53
54845: PUSH
54846: LD_INT 0
54848: ST_TO_ADDR
// sHack := false ;
54849: LD_ADDR_EXP 54
54853: PUSH
54854: LD_INT 0
54856: ST_TO_ADDR
// sFire := false ;
54857: LD_ADDR_EXP 55
54861: PUSH
54862: LD_INT 0
54864: ST_TO_ADDR
// sRefresh := false ;
54865: LD_ADDR_EXP 56
54869: PUSH
54870: LD_INT 0
54872: ST_TO_ADDR
// sExp := false ;
54873: LD_ADDR_EXP 57
54877: PUSH
54878: LD_INT 0
54880: ST_TO_ADDR
// sDepot := false ;
54881: LD_ADDR_EXP 58
54885: PUSH
54886: LD_INT 0
54888: ST_TO_ADDR
// sFlag := false ;
54889: LD_ADDR_EXP 59
54893: PUSH
54894: LD_INT 0
54896: ST_TO_ADDR
// sKamikadze := false ;
54897: LD_ADDR_EXP 67
54901: PUSH
54902: LD_INT 0
54904: ST_TO_ADDR
// sTroll := false ;
54905: LD_ADDR_EXP 68
54909: PUSH
54910: LD_INT 0
54912: ST_TO_ADDR
// sSlow := false ;
54913: LD_ADDR_EXP 69
54917: PUSH
54918: LD_INT 0
54920: ST_TO_ADDR
// sLack := false ;
54921: LD_ADDR_EXP 70
54925: PUSH
54926: LD_INT 0
54928: ST_TO_ADDR
// sTank := false ;
54929: LD_ADDR_EXP 72
54933: PUSH
54934: LD_INT 0
54936: ST_TO_ADDR
// sRemote := false ;
54937: LD_ADDR_EXP 73
54941: PUSH
54942: LD_INT 0
54944: ST_TO_ADDR
// sPowell := false ;
54945: LD_ADDR_EXP 74
54949: PUSH
54950: LD_INT 0
54952: ST_TO_ADDR
// sTeleport := false ;
54953: LD_ADDR_EXP 77
54957: PUSH
54958: LD_INT 0
54960: ST_TO_ADDR
// sOilTower := false ;
54961: LD_ADDR_EXP 79
54965: PUSH
54966: LD_INT 0
54968: ST_TO_ADDR
// sShovel := false ;
54969: LD_ADDR_EXP 80
54973: PUSH
54974: LD_INT 0
54976: ST_TO_ADDR
// sSheik := false ;
54977: LD_ADDR_EXP 81
54981: PUSH
54982: LD_INT 0
54984: ST_TO_ADDR
// sEarthquake := false ;
54985: LD_ADDR_EXP 83
54989: PUSH
54990: LD_INT 0
54992: ST_TO_ADDR
// sAI := false ;
54993: LD_ADDR_EXP 84
54997: PUSH
54998: LD_INT 0
55000: ST_TO_ADDR
// sCargo := false ;
55001: LD_ADDR_EXP 87
55005: PUSH
55006: LD_INT 0
55008: ST_TO_ADDR
// sDLaser := false ;
55009: LD_ADDR_EXP 88
55013: PUSH
55014: LD_INT 0
55016: ST_TO_ADDR
// sExchange := false ;
55017: LD_ADDR_EXP 89
55021: PUSH
55022: LD_INT 0
55024: ST_TO_ADDR
// sFac := false ;
55025: LD_ADDR_EXP 90
55029: PUSH
55030: LD_INT 0
55032: ST_TO_ADDR
// sPower := false ;
55033: LD_ADDR_EXP 91
55037: PUSH
55038: LD_INT 0
55040: ST_TO_ADDR
// sRandom := false ;
55041: LD_ADDR_EXP 92
55045: PUSH
55046: LD_INT 0
55048: ST_TO_ADDR
// sShield := false ;
55049: LD_ADDR_EXP 93
55053: PUSH
55054: LD_INT 0
55056: ST_TO_ADDR
// sTime := false ;
55057: LD_ADDR_EXP 94
55061: PUSH
55062: LD_INT 0
55064: ST_TO_ADDR
// sTools := false ;
55065: LD_ADDR_EXP 95
55069: PUSH
55070: LD_INT 0
55072: ST_TO_ADDR
// sSold := false ;
55073: LD_ADDR_EXP 60
55077: PUSH
55078: LD_INT 0
55080: ST_TO_ADDR
// sDiff := false ;
55081: LD_ADDR_EXP 61
55085: PUSH
55086: LD_INT 0
55088: ST_TO_ADDR
// sFog := false ;
55089: LD_ADDR_EXP 64
55093: PUSH
55094: LD_INT 0
55096: ST_TO_ADDR
// sReset := false ;
55097: LD_ADDR_EXP 65
55101: PUSH
55102: LD_INT 0
55104: ST_TO_ADDR
// sSun := false ;
55105: LD_ADDR_EXP 66
55109: PUSH
55110: LD_INT 0
55112: ST_TO_ADDR
// sTiger := false ;
55113: LD_ADDR_EXP 62
55117: PUSH
55118: LD_INT 0
55120: ST_TO_ADDR
// sBomb := false ;
55121: LD_ADDR_EXP 63
55125: PUSH
55126: LD_INT 0
55128: ST_TO_ADDR
// sWound := false ;
55129: LD_ADDR_EXP 71
55133: PUSH
55134: LD_INT 0
55136: ST_TO_ADDR
// sBetray := false ;
55137: LD_ADDR_EXP 75
55141: PUSH
55142: LD_INT 0
55144: ST_TO_ADDR
// sContamin := false ;
55145: LD_ADDR_EXP 76
55149: PUSH
55150: LD_INT 0
55152: ST_TO_ADDR
// sOil := false ;
55153: LD_ADDR_EXP 78
55157: PUSH
55158: LD_INT 0
55160: ST_TO_ADDR
// sStu := false ;
55161: LD_ADDR_EXP 82
55165: PUSH
55166: LD_INT 0
55168: ST_TO_ADDR
// sBazooka := false ;
55169: LD_ADDR_EXP 85
55173: PUSH
55174: LD_INT 0
55176: ST_TO_ADDR
// sMortar := false ;
55177: LD_ADDR_EXP 86
55181: PUSH
55182: LD_INT 0
55184: ST_TO_ADDR
// sRanger := false ;
55185: LD_ADDR_EXP 96
55189: PUSH
55190: LD_INT 0
55192: ST_TO_ADDR
// sComputer := false ;
55193: LD_ADDR_EXP 97
55197: PUSH
55198: LD_INT 0
55200: ST_TO_ADDR
// s30 := false ;
55201: LD_ADDR_EXP 98
55205: PUSH
55206: LD_INT 0
55208: ST_TO_ADDR
// s60 := false ;
55209: LD_ADDR_EXP 99
55213: PUSH
55214: LD_INT 0
55216: ST_TO_ADDR
// end ;
55217: LD_VAR 0 1
55221: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
55222: LD_INT 0
55224: PPUSH
55225: PPUSH
55226: PPUSH
55227: PPUSH
55228: PPUSH
55229: PPUSH
55230: PPUSH
// result := [ ] ;
55231: LD_ADDR_VAR 0 2
55235: PUSH
55236: EMPTY
55237: ST_TO_ADDR
// if campaign_id = 1 then
55238: LD_OWVAR 69
55242: PUSH
55243: LD_INT 1
55245: EQUAL
55246: IFFALSE 58412
// begin case mission_number of 1 :
55248: LD_OWVAR 70
55252: PUSH
55253: LD_INT 1
55255: DOUBLE
55256: EQUAL
55257: IFTRUE 55261
55259: GO 55337
55261: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
55262: LD_ADDR_VAR 0 2
55266: PUSH
55267: LD_INT 2
55269: PUSH
55270: LD_INT 4
55272: PUSH
55273: LD_INT 11
55275: PUSH
55276: LD_INT 12
55278: PUSH
55279: LD_INT 15
55281: PUSH
55282: LD_INT 16
55284: PUSH
55285: LD_INT 22
55287: PUSH
55288: LD_INT 23
55290: PUSH
55291: LD_INT 26
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 101
55307: PUSH
55308: LD_INT 102
55310: PUSH
55311: LD_INT 106
55313: PUSH
55314: LD_INT 116
55316: PUSH
55317: LD_INT 117
55319: PUSH
55320: LD_INT 118
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: ST_TO_ADDR
55335: GO 58410
55337: LD_INT 2
55339: DOUBLE
55340: EQUAL
55341: IFTRUE 55345
55343: GO 55429
55345: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
55346: LD_ADDR_VAR 0 2
55350: PUSH
55351: LD_INT 2
55353: PUSH
55354: LD_INT 4
55356: PUSH
55357: LD_INT 11
55359: PUSH
55360: LD_INT 12
55362: PUSH
55363: LD_INT 15
55365: PUSH
55366: LD_INT 16
55368: PUSH
55369: LD_INT 22
55371: PUSH
55372: LD_INT 23
55374: PUSH
55375: LD_INT 26
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 101
55391: PUSH
55392: LD_INT 102
55394: PUSH
55395: LD_INT 105
55397: PUSH
55398: LD_INT 106
55400: PUSH
55401: LD_INT 108
55403: PUSH
55404: LD_INT 116
55406: PUSH
55407: LD_INT 117
55409: PUSH
55410: LD_INT 118
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: ST_TO_ADDR
55427: GO 58410
55429: LD_INT 3
55431: DOUBLE
55432: EQUAL
55433: IFTRUE 55437
55435: GO 55525
55437: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
55438: LD_ADDR_VAR 0 2
55442: PUSH
55443: LD_INT 2
55445: PUSH
55446: LD_INT 4
55448: PUSH
55449: LD_INT 5
55451: PUSH
55452: LD_INT 11
55454: PUSH
55455: LD_INT 12
55457: PUSH
55458: LD_INT 15
55460: PUSH
55461: LD_INT 16
55463: PUSH
55464: LD_INT 22
55466: PUSH
55467: LD_INT 26
55469: PUSH
55470: LD_INT 36
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 101
55487: PUSH
55488: LD_INT 102
55490: PUSH
55491: LD_INT 105
55493: PUSH
55494: LD_INT 106
55496: PUSH
55497: LD_INT 108
55499: PUSH
55500: LD_INT 116
55502: PUSH
55503: LD_INT 117
55505: PUSH
55506: LD_INT 118
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: ST_TO_ADDR
55523: GO 58410
55525: LD_INT 4
55527: DOUBLE
55528: EQUAL
55529: IFTRUE 55533
55531: GO 55629
55533: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
55534: LD_ADDR_VAR 0 2
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: LD_INT 4
55544: PUSH
55545: LD_INT 5
55547: PUSH
55548: LD_INT 8
55550: PUSH
55551: LD_INT 11
55553: PUSH
55554: LD_INT 12
55556: PUSH
55557: LD_INT 15
55559: PUSH
55560: LD_INT 16
55562: PUSH
55563: LD_INT 22
55565: PUSH
55566: LD_INT 23
55568: PUSH
55569: LD_INT 26
55571: PUSH
55572: LD_INT 36
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 101
55591: PUSH
55592: LD_INT 102
55594: PUSH
55595: LD_INT 105
55597: PUSH
55598: LD_INT 106
55600: PUSH
55601: LD_INT 108
55603: PUSH
55604: LD_INT 116
55606: PUSH
55607: LD_INT 117
55609: PUSH
55610: LD_INT 118
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: ST_TO_ADDR
55627: GO 58410
55629: LD_INT 5
55631: DOUBLE
55632: EQUAL
55633: IFTRUE 55637
55635: GO 55749
55637: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
55638: LD_ADDR_VAR 0 2
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: LD_INT 4
55648: PUSH
55649: LD_INT 5
55651: PUSH
55652: LD_INT 6
55654: PUSH
55655: LD_INT 8
55657: PUSH
55658: LD_INT 11
55660: PUSH
55661: LD_INT 12
55663: PUSH
55664: LD_INT 15
55666: PUSH
55667: LD_INT 16
55669: PUSH
55670: LD_INT 22
55672: PUSH
55673: LD_INT 23
55675: PUSH
55676: LD_INT 25
55678: PUSH
55679: LD_INT 26
55681: PUSH
55682: LD_INT 36
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 101
55703: PUSH
55704: LD_INT 102
55706: PUSH
55707: LD_INT 105
55709: PUSH
55710: LD_INT 106
55712: PUSH
55713: LD_INT 108
55715: PUSH
55716: LD_INT 109
55718: PUSH
55719: LD_INT 112
55721: PUSH
55722: LD_INT 116
55724: PUSH
55725: LD_INT 117
55727: PUSH
55728: LD_INT 118
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: ST_TO_ADDR
55747: GO 58410
55749: LD_INT 6
55751: DOUBLE
55752: EQUAL
55753: IFTRUE 55757
55755: GO 55889
55757: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
55758: LD_ADDR_VAR 0 2
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: LD_INT 4
55768: PUSH
55769: LD_INT 5
55771: PUSH
55772: LD_INT 6
55774: PUSH
55775: LD_INT 8
55777: PUSH
55778: LD_INT 11
55780: PUSH
55781: LD_INT 12
55783: PUSH
55784: LD_INT 15
55786: PUSH
55787: LD_INT 16
55789: PUSH
55790: LD_INT 20
55792: PUSH
55793: LD_INT 21
55795: PUSH
55796: LD_INT 22
55798: PUSH
55799: LD_INT 23
55801: PUSH
55802: LD_INT 25
55804: PUSH
55805: LD_INT 26
55807: PUSH
55808: LD_INT 30
55810: PUSH
55811: LD_INT 31
55813: PUSH
55814: LD_INT 32
55816: PUSH
55817: LD_INT 36
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 101
55843: PUSH
55844: LD_INT 102
55846: PUSH
55847: LD_INT 105
55849: PUSH
55850: LD_INT 106
55852: PUSH
55853: LD_INT 108
55855: PUSH
55856: LD_INT 109
55858: PUSH
55859: LD_INT 112
55861: PUSH
55862: LD_INT 116
55864: PUSH
55865: LD_INT 117
55867: PUSH
55868: LD_INT 118
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: ST_TO_ADDR
55887: GO 58410
55889: LD_INT 7
55891: DOUBLE
55892: EQUAL
55893: IFTRUE 55897
55895: GO 56009
55897: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
55898: LD_ADDR_VAR 0 2
55902: PUSH
55903: LD_INT 2
55905: PUSH
55906: LD_INT 4
55908: PUSH
55909: LD_INT 5
55911: PUSH
55912: LD_INT 7
55914: PUSH
55915: LD_INT 11
55917: PUSH
55918: LD_INT 12
55920: PUSH
55921: LD_INT 15
55923: PUSH
55924: LD_INT 16
55926: PUSH
55927: LD_INT 20
55929: PUSH
55930: LD_INT 21
55932: PUSH
55933: LD_INT 22
55935: PUSH
55936: LD_INT 23
55938: PUSH
55939: LD_INT 25
55941: PUSH
55942: LD_INT 26
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 101
55963: PUSH
55964: LD_INT 102
55966: PUSH
55967: LD_INT 103
55969: PUSH
55970: LD_INT 105
55972: PUSH
55973: LD_INT 106
55975: PUSH
55976: LD_INT 108
55978: PUSH
55979: LD_INT 112
55981: PUSH
55982: LD_INT 116
55984: PUSH
55985: LD_INT 117
55987: PUSH
55988: LD_INT 118
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: ST_TO_ADDR
56007: GO 58410
56009: LD_INT 8
56011: DOUBLE
56012: EQUAL
56013: IFTRUE 56017
56015: GO 56157
56017: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
56018: LD_ADDR_VAR 0 2
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: LD_INT 4
56028: PUSH
56029: LD_INT 5
56031: PUSH
56032: LD_INT 6
56034: PUSH
56035: LD_INT 7
56037: PUSH
56038: LD_INT 8
56040: PUSH
56041: LD_INT 11
56043: PUSH
56044: LD_INT 12
56046: PUSH
56047: LD_INT 15
56049: PUSH
56050: LD_INT 16
56052: PUSH
56053: LD_INT 20
56055: PUSH
56056: LD_INT 21
56058: PUSH
56059: LD_INT 22
56061: PUSH
56062: LD_INT 23
56064: PUSH
56065: LD_INT 25
56067: PUSH
56068: LD_INT 26
56070: PUSH
56071: LD_INT 30
56073: PUSH
56074: LD_INT 31
56076: PUSH
56077: LD_INT 32
56079: PUSH
56080: LD_INT 36
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 101
56107: PUSH
56108: LD_INT 102
56110: PUSH
56111: LD_INT 103
56113: PUSH
56114: LD_INT 105
56116: PUSH
56117: LD_INT 106
56119: PUSH
56120: LD_INT 108
56122: PUSH
56123: LD_INT 109
56125: PUSH
56126: LD_INT 112
56128: PUSH
56129: LD_INT 116
56131: PUSH
56132: LD_INT 117
56134: PUSH
56135: LD_INT 118
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: ST_TO_ADDR
56155: GO 58410
56157: LD_INT 9
56159: DOUBLE
56160: EQUAL
56161: IFTRUE 56165
56163: GO 56313
56165: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
56166: LD_ADDR_VAR 0 2
56170: PUSH
56171: LD_INT 2
56173: PUSH
56174: LD_INT 4
56176: PUSH
56177: LD_INT 5
56179: PUSH
56180: LD_INT 6
56182: PUSH
56183: LD_INT 7
56185: PUSH
56186: LD_INT 8
56188: PUSH
56189: LD_INT 11
56191: PUSH
56192: LD_INT 12
56194: PUSH
56195: LD_INT 15
56197: PUSH
56198: LD_INT 16
56200: PUSH
56201: LD_INT 20
56203: PUSH
56204: LD_INT 21
56206: PUSH
56207: LD_INT 22
56209: PUSH
56210: LD_INT 23
56212: PUSH
56213: LD_INT 25
56215: PUSH
56216: LD_INT 26
56218: PUSH
56219: LD_INT 28
56221: PUSH
56222: LD_INT 30
56224: PUSH
56225: LD_INT 31
56227: PUSH
56228: LD_INT 32
56230: PUSH
56231: LD_INT 36
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 101
56259: PUSH
56260: LD_INT 102
56262: PUSH
56263: LD_INT 103
56265: PUSH
56266: LD_INT 105
56268: PUSH
56269: LD_INT 106
56271: PUSH
56272: LD_INT 108
56274: PUSH
56275: LD_INT 109
56277: PUSH
56278: LD_INT 112
56280: PUSH
56281: LD_INT 114
56283: PUSH
56284: LD_INT 116
56286: PUSH
56287: LD_INT 117
56289: PUSH
56290: LD_INT 118
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: ST_TO_ADDR
56311: GO 58410
56313: LD_INT 10
56315: DOUBLE
56316: EQUAL
56317: IFTRUE 56321
56319: GO 56517
56321: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
56322: LD_ADDR_VAR 0 2
56326: PUSH
56327: LD_INT 2
56329: PUSH
56330: LD_INT 4
56332: PUSH
56333: LD_INT 5
56335: PUSH
56336: LD_INT 6
56338: PUSH
56339: LD_INT 7
56341: PUSH
56342: LD_INT 8
56344: PUSH
56345: LD_INT 9
56347: PUSH
56348: LD_INT 10
56350: PUSH
56351: LD_INT 11
56353: PUSH
56354: LD_INT 12
56356: PUSH
56357: LD_INT 13
56359: PUSH
56360: LD_INT 14
56362: PUSH
56363: LD_INT 15
56365: PUSH
56366: LD_INT 16
56368: PUSH
56369: LD_INT 17
56371: PUSH
56372: LD_INT 18
56374: PUSH
56375: LD_INT 19
56377: PUSH
56378: LD_INT 20
56380: PUSH
56381: LD_INT 21
56383: PUSH
56384: LD_INT 22
56386: PUSH
56387: LD_INT 23
56389: PUSH
56390: LD_INT 24
56392: PUSH
56393: LD_INT 25
56395: PUSH
56396: LD_INT 26
56398: PUSH
56399: LD_INT 28
56401: PUSH
56402: LD_INT 30
56404: PUSH
56405: LD_INT 31
56407: PUSH
56408: LD_INT 32
56410: PUSH
56411: LD_INT 36
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 101
56447: PUSH
56448: LD_INT 102
56450: PUSH
56451: LD_INT 103
56453: PUSH
56454: LD_INT 104
56456: PUSH
56457: LD_INT 105
56459: PUSH
56460: LD_INT 106
56462: PUSH
56463: LD_INT 107
56465: PUSH
56466: LD_INT 108
56468: PUSH
56469: LD_INT 109
56471: PUSH
56472: LD_INT 110
56474: PUSH
56475: LD_INT 111
56477: PUSH
56478: LD_INT 112
56480: PUSH
56481: LD_INT 114
56483: PUSH
56484: LD_INT 116
56486: PUSH
56487: LD_INT 117
56489: PUSH
56490: LD_INT 118
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: ST_TO_ADDR
56515: GO 58410
56517: LD_INT 11
56519: DOUBLE
56520: EQUAL
56521: IFTRUE 56525
56523: GO 56729
56525: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
56526: LD_ADDR_VAR 0 2
56530: PUSH
56531: LD_INT 2
56533: PUSH
56534: LD_INT 3
56536: PUSH
56537: LD_INT 4
56539: PUSH
56540: LD_INT 5
56542: PUSH
56543: LD_INT 6
56545: PUSH
56546: LD_INT 7
56548: PUSH
56549: LD_INT 8
56551: PUSH
56552: LD_INT 9
56554: PUSH
56555: LD_INT 10
56557: PUSH
56558: LD_INT 11
56560: PUSH
56561: LD_INT 12
56563: PUSH
56564: LD_INT 13
56566: PUSH
56567: LD_INT 14
56569: PUSH
56570: LD_INT 15
56572: PUSH
56573: LD_INT 16
56575: PUSH
56576: LD_INT 17
56578: PUSH
56579: LD_INT 18
56581: PUSH
56582: LD_INT 19
56584: PUSH
56585: LD_INT 20
56587: PUSH
56588: LD_INT 21
56590: PUSH
56591: LD_INT 22
56593: PUSH
56594: LD_INT 23
56596: PUSH
56597: LD_INT 24
56599: PUSH
56600: LD_INT 25
56602: PUSH
56603: LD_INT 26
56605: PUSH
56606: LD_INT 28
56608: PUSH
56609: LD_INT 30
56611: PUSH
56612: LD_INT 31
56614: PUSH
56615: LD_INT 32
56617: PUSH
56618: LD_INT 34
56620: PUSH
56621: LD_INT 36
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 101
56659: PUSH
56660: LD_INT 102
56662: PUSH
56663: LD_INT 103
56665: PUSH
56666: LD_INT 104
56668: PUSH
56669: LD_INT 105
56671: PUSH
56672: LD_INT 106
56674: PUSH
56675: LD_INT 107
56677: PUSH
56678: LD_INT 108
56680: PUSH
56681: LD_INT 109
56683: PUSH
56684: LD_INT 110
56686: PUSH
56687: LD_INT 111
56689: PUSH
56690: LD_INT 112
56692: PUSH
56693: LD_INT 114
56695: PUSH
56696: LD_INT 116
56698: PUSH
56699: LD_INT 117
56701: PUSH
56702: LD_INT 118
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: ST_TO_ADDR
56727: GO 58410
56729: LD_INT 12
56731: DOUBLE
56732: EQUAL
56733: IFTRUE 56737
56735: GO 56957
56737: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
56738: LD_ADDR_VAR 0 2
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: LD_INT 2
56748: PUSH
56749: LD_INT 3
56751: PUSH
56752: LD_INT 4
56754: PUSH
56755: LD_INT 5
56757: PUSH
56758: LD_INT 6
56760: PUSH
56761: LD_INT 7
56763: PUSH
56764: LD_INT 8
56766: PUSH
56767: LD_INT 9
56769: PUSH
56770: LD_INT 10
56772: PUSH
56773: LD_INT 11
56775: PUSH
56776: LD_INT 12
56778: PUSH
56779: LD_INT 13
56781: PUSH
56782: LD_INT 14
56784: PUSH
56785: LD_INT 15
56787: PUSH
56788: LD_INT 16
56790: PUSH
56791: LD_INT 17
56793: PUSH
56794: LD_INT 18
56796: PUSH
56797: LD_INT 19
56799: PUSH
56800: LD_INT 20
56802: PUSH
56803: LD_INT 21
56805: PUSH
56806: LD_INT 22
56808: PUSH
56809: LD_INT 23
56811: PUSH
56812: LD_INT 24
56814: PUSH
56815: LD_INT 25
56817: PUSH
56818: LD_INT 26
56820: PUSH
56821: LD_INT 27
56823: PUSH
56824: LD_INT 28
56826: PUSH
56827: LD_INT 30
56829: PUSH
56830: LD_INT 31
56832: PUSH
56833: LD_INT 32
56835: PUSH
56836: LD_INT 33
56838: PUSH
56839: LD_INT 34
56841: PUSH
56842: LD_INT 36
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 101
56883: PUSH
56884: LD_INT 102
56886: PUSH
56887: LD_INT 103
56889: PUSH
56890: LD_INT 104
56892: PUSH
56893: LD_INT 105
56895: PUSH
56896: LD_INT 106
56898: PUSH
56899: LD_INT 107
56901: PUSH
56902: LD_INT 108
56904: PUSH
56905: LD_INT 109
56907: PUSH
56908: LD_INT 110
56910: PUSH
56911: LD_INT 111
56913: PUSH
56914: LD_INT 112
56916: PUSH
56917: LD_INT 113
56919: PUSH
56920: LD_INT 114
56922: PUSH
56923: LD_INT 116
56925: PUSH
56926: LD_INT 117
56928: PUSH
56929: LD_INT 118
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: ST_TO_ADDR
56955: GO 58410
56957: LD_INT 13
56959: DOUBLE
56960: EQUAL
56961: IFTRUE 56965
56963: GO 57173
56965: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
56966: LD_ADDR_VAR 0 2
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: LD_INT 3
56979: PUSH
56980: LD_INT 4
56982: PUSH
56983: LD_INT 5
56985: PUSH
56986: LD_INT 8
56988: PUSH
56989: LD_INT 9
56991: PUSH
56992: LD_INT 10
56994: PUSH
56995: LD_INT 11
56997: PUSH
56998: LD_INT 12
57000: PUSH
57001: LD_INT 14
57003: PUSH
57004: LD_INT 15
57006: PUSH
57007: LD_INT 16
57009: PUSH
57010: LD_INT 17
57012: PUSH
57013: LD_INT 18
57015: PUSH
57016: LD_INT 19
57018: PUSH
57019: LD_INT 20
57021: PUSH
57022: LD_INT 21
57024: PUSH
57025: LD_INT 22
57027: PUSH
57028: LD_INT 23
57030: PUSH
57031: LD_INT 24
57033: PUSH
57034: LD_INT 25
57036: PUSH
57037: LD_INT 26
57039: PUSH
57040: LD_INT 27
57042: PUSH
57043: LD_INT 28
57045: PUSH
57046: LD_INT 30
57048: PUSH
57049: LD_INT 31
57051: PUSH
57052: LD_INT 32
57054: PUSH
57055: LD_INT 33
57057: PUSH
57058: LD_INT 34
57060: PUSH
57061: LD_INT 36
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 101
57099: PUSH
57100: LD_INT 102
57102: PUSH
57103: LD_INT 103
57105: PUSH
57106: LD_INT 104
57108: PUSH
57109: LD_INT 105
57111: PUSH
57112: LD_INT 106
57114: PUSH
57115: LD_INT 107
57117: PUSH
57118: LD_INT 108
57120: PUSH
57121: LD_INT 109
57123: PUSH
57124: LD_INT 110
57126: PUSH
57127: LD_INT 111
57129: PUSH
57130: LD_INT 112
57132: PUSH
57133: LD_INT 113
57135: PUSH
57136: LD_INT 114
57138: PUSH
57139: LD_INT 116
57141: PUSH
57142: LD_INT 117
57144: PUSH
57145: LD_INT 118
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: ST_TO_ADDR
57171: GO 58410
57173: LD_INT 14
57175: DOUBLE
57176: EQUAL
57177: IFTRUE 57181
57179: GO 57405
57181: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
57182: LD_ADDR_VAR 0 2
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 2
57192: PUSH
57193: LD_INT 3
57195: PUSH
57196: LD_INT 4
57198: PUSH
57199: LD_INT 5
57201: PUSH
57202: LD_INT 6
57204: PUSH
57205: LD_INT 7
57207: PUSH
57208: LD_INT 8
57210: PUSH
57211: LD_INT 9
57213: PUSH
57214: LD_INT 10
57216: PUSH
57217: LD_INT 11
57219: PUSH
57220: LD_INT 12
57222: PUSH
57223: LD_INT 13
57225: PUSH
57226: LD_INT 14
57228: PUSH
57229: LD_INT 15
57231: PUSH
57232: LD_INT 16
57234: PUSH
57235: LD_INT 17
57237: PUSH
57238: LD_INT 18
57240: PUSH
57241: LD_INT 19
57243: PUSH
57244: LD_INT 20
57246: PUSH
57247: LD_INT 21
57249: PUSH
57250: LD_INT 22
57252: PUSH
57253: LD_INT 23
57255: PUSH
57256: LD_INT 24
57258: PUSH
57259: LD_INT 25
57261: PUSH
57262: LD_INT 26
57264: PUSH
57265: LD_INT 27
57267: PUSH
57268: LD_INT 28
57270: PUSH
57271: LD_INT 29
57273: PUSH
57274: LD_INT 30
57276: PUSH
57277: LD_INT 31
57279: PUSH
57280: LD_INT 32
57282: PUSH
57283: LD_INT 33
57285: PUSH
57286: LD_INT 34
57288: PUSH
57289: LD_INT 36
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 101
57331: PUSH
57332: LD_INT 102
57334: PUSH
57335: LD_INT 103
57337: PUSH
57338: LD_INT 104
57340: PUSH
57341: LD_INT 105
57343: PUSH
57344: LD_INT 106
57346: PUSH
57347: LD_INT 107
57349: PUSH
57350: LD_INT 108
57352: PUSH
57353: LD_INT 109
57355: PUSH
57356: LD_INT 110
57358: PUSH
57359: LD_INT 111
57361: PUSH
57362: LD_INT 112
57364: PUSH
57365: LD_INT 113
57367: PUSH
57368: LD_INT 114
57370: PUSH
57371: LD_INT 116
57373: PUSH
57374: LD_INT 117
57376: PUSH
57377: LD_INT 118
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: ST_TO_ADDR
57403: GO 58410
57405: LD_INT 15
57407: DOUBLE
57408: EQUAL
57409: IFTRUE 57413
57411: GO 57637
57413: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
57414: LD_ADDR_VAR 0 2
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: LD_INT 2
57424: PUSH
57425: LD_INT 3
57427: PUSH
57428: LD_INT 4
57430: PUSH
57431: LD_INT 5
57433: PUSH
57434: LD_INT 6
57436: PUSH
57437: LD_INT 7
57439: PUSH
57440: LD_INT 8
57442: PUSH
57443: LD_INT 9
57445: PUSH
57446: LD_INT 10
57448: PUSH
57449: LD_INT 11
57451: PUSH
57452: LD_INT 12
57454: PUSH
57455: LD_INT 13
57457: PUSH
57458: LD_INT 14
57460: PUSH
57461: LD_INT 15
57463: PUSH
57464: LD_INT 16
57466: PUSH
57467: LD_INT 17
57469: PUSH
57470: LD_INT 18
57472: PUSH
57473: LD_INT 19
57475: PUSH
57476: LD_INT 20
57478: PUSH
57479: LD_INT 21
57481: PUSH
57482: LD_INT 22
57484: PUSH
57485: LD_INT 23
57487: PUSH
57488: LD_INT 24
57490: PUSH
57491: LD_INT 25
57493: PUSH
57494: LD_INT 26
57496: PUSH
57497: LD_INT 27
57499: PUSH
57500: LD_INT 28
57502: PUSH
57503: LD_INT 29
57505: PUSH
57506: LD_INT 30
57508: PUSH
57509: LD_INT 31
57511: PUSH
57512: LD_INT 32
57514: PUSH
57515: LD_INT 33
57517: PUSH
57518: LD_INT 34
57520: PUSH
57521: LD_INT 36
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 101
57563: PUSH
57564: LD_INT 102
57566: PUSH
57567: LD_INT 103
57569: PUSH
57570: LD_INT 104
57572: PUSH
57573: LD_INT 105
57575: PUSH
57576: LD_INT 106
57578: PUSH
57579: LD_INT 107
57581: PUSH
57582: LD_INT 108
57584: PUSH
57585: LD_INT 109
57587: PUSH
57588: LD_INT 110
57590: PUSH
57591: LD_INT 111
57593: PUSH
57594: LD_INT 112
57596: PUSH
57597: LD_INT 113
57599: PUSH
57600: LD_INT 114
57602: PUSH
57603: LD_INT 116
57605: PUSH
57606: LD_INT 117
57608: PUSH
57609: LD_INT 118
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: ST_TO_ADDR
57635: GO 58410
57637: LD_INT 16
57639: DOUBLE
57640: EQUAL
57641: IFTRUE 57645
57643: GO 57781
57645: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
57646: LD_ADDR_VAR 0 2
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: LD_INT 4
57656: PUSH
57657: LD_INT 5
57659: PUSH
57660: LD_INT 7
57662: PUSH
57663: LD_INT 11
57665: PUSH
57666: LD_INT 12
57668: PUSH
57669: LD_INT 15
57671: PUSH
57672: LD_INT 16
57674: PUSH
57675: LD_INT 20
57677: PUSH
57678: LD_INT 21
57680: PUSH
57681: LD_INT 22
57683: PUSH
57684: LD_INT 23
57686: PUSH
57687: LD_INT 25
57689: PUSH
57690: LD_INT 26
57692: PUSH
57693: LD_INT 30
57695: PUSH
57696: LD_INT 31
57698: PUSH
57699: LD_INT 32
57701: PUSH
57702: LD_INT 33
57704: PUSH
57705: LD_INT 34
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 101
57731: PUSH
57732: LD_INT 102
57734: PUSH
57735: LD_INT 103
57737: PUSH
57738: LD_INT 106
57740: PUSH
57741: LD_INT 108
57743: PUSH
57744: LD_INT 112
57746: PUSH
57747: LD_INT 113
57749: PUSH
57750: LD_INT 114
57752: PUSH
57753: LD_INT 116
57755: PUSH
57756: LD_INT 117
57758: PUSH
57759: LD_INT 118
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: ST_TO_ADDR
57779: GO 58410
57781: LD_INT 17
57783: DOUBLE
57784: EQUAL
57785: IFTRUE 57789
57787: GO 58013
57789: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
57790: LD_ADDR_VAR 0 2
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 2
57800: PUSH
57801: LD_INT 3
57803: PUSH
57804: LD_INT 4
57806: PUSH
57807: LD_INT 5
57809: PUSH
57810: LD_INT 6
57812: PUSH
57813: LD_INT 7
57815: PUSH
57816: LD_INT 8
57818: PUSH
57819: LD_INT 9
57821: PUSH
57822: LD_INT 10
57824: PUSH
57825: LD_INT 11
57827: PUSH
57828: LD_INT 12
57830: PUSH
57831: LD_INT 13
57833: PUSH
57834: LD_INT 14
57836: PUSH
57837: LD_INT 15
57839: PUSH
57840: LD_INT 16
57842: PUSH
57843: LD_INT 17
57845: PUSH
57846: LD_INT 18
57848: PUSH
57849: LD_INT 19
57851: PUSH
57852: LD_INT 20
57854: PUSH
57855: LD_INT 21
57857: PUSH
57858: LD_INT 22
57860: PUSH
57861: LD_INT 23
57863: PUSH
57864: LD_INT 24
57866: PUSH
57867: LD_INT 25
57869: PUSH
57870: LD_INT 26
57872: PUSH
57873: LD_INT 27
57875: PUSH
57876: LD_INT 28
57878: PUSH
57879: LD_INT 29
57881: PUSH
57882: LD_INT 30
57884: PUSH
57885: LD_INT 31
57887: PUSH
57888: LD_INT 32
57890: PUSH
57891: LD_INT 33
57893: PUSH
57894: LD_INT 34
57896: PUSH
57897: LD_INT 36
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 101
57939: PUSH
57940: LD_INT 102
57942: PUSH
57943: LD_INT 103
57945: PUSH
57946: LD_INT 104
57948: PUSH
57949: LD_INT 105
57951: PUSH
57952: LD_INT 106
57954: PUSH
57955: LD_INT 107
57957: PUSH
57958: LD_INT 108
57960: PUSH
57961: LD_INT 109
57963: PUSH
57964: LD_INT 110
57966: PUSH
57967: LD_INT 111
57969: PUSH
57970: LD_INT 112
57972: PUSH
57973: LD_INT 113
57975: PUSH
57976: LD_INT 114
57978: PUSH
57979: LD_INT 116
57981: PUSH
57982: LD_INT 117
57984: PUSH
57985: LD_INT 118
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: ST_TO_ADDR
58011: GO 58410
58013: LD_INT 18
58015: DOUBLE
58016: EQUAL
58017: IFTRUE 58021
58019: GO 58169
58021: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
58022: LD_ADDR_VAR 0 2
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: LD_INT 4
58032: PUSH
58033: LD_INT 5
58035: PUSH
58036: LD_INT 7
58038: PUSH
58039: LD_INT 11
58041: PUSH
58042: LD_INT 12
58044: PUSH
58045: LD_INT 15
58047: PUSH
58048: LD_INT 16
58050: PUSH
58051: LD_INT 20
58053: PUSH
58054: LD_INT 21
58056: PUSH
58057: LD_INT 22
58059: PUSH
58060: LD_INT 23
58062: PUSH
58063: LD_INT 25
58065: PUSH
58066: LD_INT 26
58068: PUSH
58069: LD_INT 30
58071: PUSH
58072: LD_INT 31
58074: PUSH
58075: LD_INT 32
58077: PUSH
58078: LD_INT 33
58080: PUSH
58081: LD_INT 34
58083: PUSH
58084: LD_INT 35
58086: PUSH
58087: LD_INT 36
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 101
58115: PUSH
58116: LD_INT 102
58118: PUSH
58119: LD_INT 103
58121: PUSH
58122: LD_INT 106
58124: PUSH
58125: LD_INT 108
58127: PUSH
58128: LD_INT 112
58130: PUSH
58131: LD_INT 113
58133: PUSH
58134: LD_INT 114
58136: PUSH
58137: LD_INT 115
58139: PUSH
58140: LD_INT 116
58142: PUSH
58143: LD_INT 117
58145: PUSH
58146: LD_INT 118
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: ST_TO_ADDR
58167: GO 58410
58169: LD_INT 19
58171: DOUBLE
58172: EQUAL
58173: IFTRUE 58177
58175: GO 58409
58177: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
58178: LD_ADDR_VAR 0 2
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: LD_INT 2
58188: PUSH
58189: LD_INT 3
58191: PUSH
58192: LD_INT 4
58194: PUSH
58195: LD_INT 5
58197: PUSH
58198: LD_INT 6
58200: PUSH
58201: LD_INT 7
58203: PUSH
58204: LD_INT 8
58206: PUSH
58207: LD_INT 9
58209: PUSH
58210: LD_INT 10
58212: PUSH
58213: LD_INT 11
58215: PUSH
58216: LD_INT 12
58218: PUSH
58219: LD_INT 13
58221: PUSH
58222: LD_INT 14
58224: PUSH
58225: LD_INT 15
58227: PUSH
58228: LD_INT 16
58230: PUSH
58231: LD_INT 17
58233: PUSH
58234: LD_INT 18
58236: PUSH
58237: LD_INT 19
58239: PUSH
58240: LD_INT 20
58242: PUSH
58243: LD_INT 21
58245: PUSH
58246: LD_INT 22
58248: PUSH
58249: LD_INT 23
58251: PUSH
58252: LD_INT 24
58254: PUSH
58255: LD_INT 25
58257: PUSH
58258: LD_INT 26
58260: PUSH
58261: LD_INT 27
58263: PUSH
58264: LD_INT 28
58266: PUSH
58267: LD_INT 29
58269: PUSH
58270: LD_INT 30
58272: PUSH
58273: LD_INT 31
58275: PUSH
58276: LD_INT 32
58278: PUSH
58279: LD_INT 33
58281: PUSH
58282: LD_INT 34
58284: PUSH
58285: LD_INT 35
58287: PUSH
58288: LD_INT 36
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 101
58331: PUSH
58332: LD_INT 102
58334: PUSH
58335: LD_INT 103
58337: PUSH
58338: LD_INT 104
58340: PUSH
58341: LD_INT 105
58343: PUSH
58344: LD_INT 106
58346: PUSH
58347: LD_INT 107
58349: PUSH
58350: LD_INT 108
58352: PUSH
58353: LD_INT 109
58355: PUSH
58356: LD_INT 110
58358: PUSH
58359: LD_INT 111
58361: PUSH
58362: LD_INT 112
58364: PUSH
58365: LD_INT 113
58367: PUSH
58368: LD_INT 114
58370: PUSH
58371: LD_INT 115
58373: PUSH
58374: LD_INT 116
58376: PUSH
58377: LD_INT 117
58379: PUSH
58380: LD_INT 118
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: ST_TO_ADDR
58407: GO 58410
58409: POP
// end else
58410: GO 58641
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
58412: LD_ADDR_VAR 0 2
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: LD_INT 2
58422: PUSH
58423: LD_INT 3
58425: PUSH
58426: LD_INT 4
58428: PUSH
58429: LD_INT 5
58431: PUSH
58432: LD_INT 6
58434: PUSH
58435: LD_INT 7
58437: PUSH
58438: LD_INT 8
58440: PUSH
58441: LD_INT 9
58443: PUSH
58444: LD_INT 10
58446: PUSH
58447: LD_INT 11
58449: PUSH
58450: LD_INT 12
58452: PUSH
58453: LD_INT 13
58455: PUSH
58456: LD_INT 14
58458: PUSH
58459: LD_INT 15
58461: PUSH
58462: LD_INT 16
58464: PUSH
58465: LD_INT 17
58467: PUSH
58468: LD_INT 18
58470: PUSH
58471: LD_INT 19
58473: PUSH
58474: LD_INT 20
58476: PUSH
58477: LD_INT 21
58479: PUSH
58480: LD_INT 22
58482: PUSH
58483: LD_INT 23
58485: PUSH
58486: LD_INT 24
58488: PUSH
58489: LD_INT 25
58491: PUSH
58492: LD_INT 26
58494: PUSH
58495: LD_INT 27
58497: PUSH
58498: LD_INT 28
58500: PUSH
58501: LD_INT 29
58503: PUSH
58504: LD_INT 30
58506: PUSH
58507: LD_INT 31
58509: PUSH
58510: LD_INT 32
58512: PUSH
58513: LD_INT 33
58515: PUSH
58516: LD_INT 34
58518: PUSH
58519: LD_INT 35
58521: PUSH
58522: LD_INT 36
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 101
58565: PUSH
58566: LD_INT 102
58568: PUSH
58569: LD_INT 103
58571: PUSH
58572: LD_INT 104
58574: PUSH
58575: LD_INT 105
58577: PUSH
58578: LD_INT 106
58580: PUSH
58581: LD_INT 107
58583: PUSH
58584: LD_INT 108
58586: PUSH
58587: LD_INT 109
58589: PUSH
58590: LD_INT 110
58592: PUSH
58593: LD_INT 111
58595: PUSH
58596: LD_INT 112
58598: PUSH
58599: LD_INT 113
58601: PUSH
58602: LD_INT 114
58604: PUSH
58605: LD_INT 115
58607: PUSH
58608: LD_INT 116
58610: PUSH
58611: LD_INT 117
58613: PUSH
58614: LD_INT 118
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: ST_TO_ADDR
// if result then
58641: LD_VAR 0 2
58645: IFFALSE 59431
// begin normal :=  ;
58647: LD_ADDR_VAR 0 5
58651: PUSH
58652: LD_STRING 
58654: ST_TO_ADDR
// hardcore :=  ;
58655: LD_ADDR_VAR 0 6
58659: PUSH
58660: LD_STRING 
58662: ST_TO_ADDR
// active :=  ;
58663: LD_ADDR_VAR 0 7
58667: PUSH
58668: LD_STRING 
58670: ST_TO_ADDR
// for i = 1 to normalCounter do
58671: LD_ADDR_VAR 0 8
58675: PUSH
58676: DOUBLE
58677: LD_INT 1
58679: DEC
58680: ST_TO_ADDR
58681: LD_EXP 44
58685: PUSH
58686: FOR_TO
58687: IFFALSE 58788
// begin tmp := 0 ;
58689: LD_ADDR_VAR 0 3
58693: PUSH
58694: LD_STRING 0
58696: ST_TO_ADDR
// if result [ 1 ] then
58697: LD_VAR 0 2
58701: PUSH
58702: LD_INT 1
58704: ARRAY
58705: IFFALSE 58770
// if result [ 1 ] [ 1 ] = i then
58707: LD_VAR 0 2
58711: PUSH
58712: LD_INT 1
58714: ARRAY
58715: PUSH
58716: LD_INT 1
58718: ARRAY
58719: PUSH
58720: LD_VAR 0 8
58724: EQUAL
58725: IFFALSE 58770
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
58727: LD_ADDR_VAR 0 2
58731: PUSH
58732: LD_VAR 0 2
58736: PPUSH
58737: LD_INT 1
58739: PPUSH
58740: LD_VAR 0 2
58744: PUSH
58745: LD_INT 1
58747: ARRAY
58748: PPUSH
58749: LD_INT 1
58751: PPUSH
58752: CALL_OW 3
58756: PPUSH
58757: CALL_OW 1
58761: ST_TO_ADDR
// tmp := 1 ;
58762: LD_ADDR_VAR 0 3
58766: PUSH
58767: LD_STRING 1
58769: ST_TO_ADDR
// end ; normal := normal & tmp ;
58770: LD_ADDR_VAR 0 5
58774: PUSH
58775: LD_VAR 0 5
58779: PUSH
58780: LD_VAR 0 3
58784: STR
58785: ST_TO_ADDR
// end ;
58786: GO 58686
58788: POP
58789: POP
// for i = 1 to hardcoreCounter do
58790: LD_ADDR_VAR 0 8
58794: PUSH
58795: DOUBLE
58796: LD_INT 1
58798: DEC
58799: ST_TO_ADDR
58800: LD_EXP 45
58804: PUSH
58805: FOR_TO
58806: IFFALSE 58911
// begin tmp := 0 ;
58808: LD_ADDR_VAR 0 3
58812: PUSH
58813: LD_STRING 0
58815: ST_TO_ADDR
// if result [ 2 ] then
58816: LD_VAR 0 2
58820: PUSH
58821: LD_INT 2
58823: ARRAY
58824: IFFALSE 58893
// if result [ 2 ] [ 1 ] = 100 + i then
58826: LD_VAR 0 2
58830: PUSH
58831: LD_INT 2
58833: ARRAY
58834: PUSH
58835: LD_INT 1
58837: ARRAY
58838: PUSH
58839: LD_INT 100
58841: PUSH
58842: LD_VAR 0 8
58846: PLUS
58847: EQUAL
58848: IFFALSE 58893
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
58850: LD_ADDR_VAR 0 2
58854: PUSH
58855: LD_VAR 0 2
58859: PPUSH
58860: LD_INT 2
58862: PPUSH
58863: LD_VAR 0 2
58867: PUSH
58868: LD_INT 2
58870: ARRAY
58871: PPUSH
58872: LD_INT 1
58874: PPUSH
58875: CALL_OW 3
58879: PPUSH
58880: CALL_OW 1
58884: ST_TO_ADDR
// tmp := 1 ;
58885: LD_ADDR_VAR 0 3
58889: PUSH
58890: LD_STRING 1
58892: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
58893: LD_ADDR_VAR 0 6
58897: PUSH
58898: LD_VAR 0 6
58902: PUSH
58903: LD_VAR 0 3
58907: STR
58908: ST_TO_ADDR
// end ;
58909: GO 58805
58911: POP
58912: POP
// if isGameLoad then
58913: LD_VAR 0 1
58917: IFFALSE 59392
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
58919: LD_ADDR_VAR 0 4
58923: PUSH
58924: LD_EXP 48
58928: PUSH
58929: LD_EXP 47
58933: PUSH
58934: LD_EXP 49
58938: PUSH
58939: LD_EXP 46
58943: PUSH
58944: LD_EXP 50
58948: PUSH
58949: LD_EXP 51
58953: PUSH
58954: LD_EXP 52
58958: PUSH
58959: LD_EXP 53
58963: PUSH
58964: LD_EXP 54
58968: PUSH
58969: LD_EXP 55
58973: PUSH
58974: LD_EXP 56
58978: PUSH
58979: LD_EXP 57
58983: PUSH
58984: LD_EXP 58
58988: PUSH
58989: LD_EXP 59
58993: PUSH
58994: LD_EXP 67
58998: PUSH
58999: LD_EXP 68
59003: PUSH
59004: LD_EXP 69
59008: PUSH
59009: LD_EXP 70
59013: PUSH
59014: LD_EXP 72
59018: PUSH
59019: LD_EXP 73
59023: PUSH
59024: LD_EXP 74
59028: PUSH
59029: LD_EXP 77
59033: PUSH
59034: LD_EXP 79
59038: PUSH
59039: LD_EXP 80
59043: PUSH
59044: LD_EXP 81
59048: PUSH
59049: LD_EXP 83
59053: PUSH
59054: LD_EXP 84
59058: PUSH
59059: LD_EXP 87
59063: PUSH
59064: LD_EXP 88
59068: PUSH
59069: LD_EXP 89
59073: PUSH
59074: LD_EXP 90
59078: PUSH
59079: LD_EXP 91
59083: PUSH
59084: LD_EXP 92
59088: PUSH
59089: LD_EXP 93
59093: PUSH
59094: LD_EXP 94
59098: PUSH
59099: LD_EXP 95
59103: PUSH
59104: LD_EXP 60
59108: PUSH
59109: LD_EXP 61
59113: PUSH
59114: LD_EXP 64
59118: PUSH
59119: LD_EXP 65
59123: PUSH
59124: LD_EXP 66
59128: PUSH
59129: LD_EXP 62
59133: PUSH
59134: LD_EXP 63
59138: PUSH
59139: LD_EXP 71
59143: PUSH
59144: LD_EXP 75
59148: PUSH
59149: LD_EXP 76
59153: PUSH
59154: LD_EXP 78
59158: PUSH
59159: LD_EXP 82
59163: PUSH
59164: LD_EXP 85
59168: PUSH
59169: LD_EXP 86
59173: PUSH
59174: LD_EXP 96
59178: PUSH
59179: LD_EXP 97
59183: PUSH
59184: LD_EXP 98
59188: PUSH
59189: LD_EXP 99
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: ST_TO_ADDR
// tmp :=  ;
59250: LD_ADDR_VAR 0 3
59254: PUSH
59255: LD_STRING 
59257: ST_TO_ADDR
// for i = 1 to normalCounter do
59258: LD_ADDR_VAR 0 8
59262: PUSH
59263: DOUBLE
59264: LD_INT 1
59266: DEC
59267: ST_TO_ADDR
59268: LD_EXP 44
59272: PUSH
59273: FOR_TO
59274: IFFALSE 59310
// begin if flags [ i ] then
59276: LD_VAR 0 4
59280: PUSH
59281: LD_VAR 0 8
59285: ARRAY
59286: IFFALSE 59308
// tmp := tmp & i & ; ;
59288: LD_ADDR_VAR 0 3
59292: PUSH
59293: LD_VAR 0 3
59297: PUSH
59298: LD_VAR 0 8
59302: STR
59303: PUSH
59304: LD_STRING ;
59306: STR
59307: ST_TO_ADDR
// end ;
59308: GO 59273
59310: POP
59311: POP
// for i = 1 to hardcoreCounter do
59312: LD_ADDR_VAR 0 8
59316: PUSH
59317: DOUBLE
59318: LD_INT 1
59320: DEC
59321: ST_TO_ADDR
59322: LD_EXP 45
59326: PUSH
59327: FOR_TO
59328: IFFALSE 59374
// begin if flags [ normalCounter + i ] then
59330: LD_VAR 0 4
59334: PUSH
59335: LD_EXP 44
59339: PUSH
59340: LD_VAR 0 8
59344: PLUS
59345: ARRAY
59346: IFFALSE 59372
// tmp := tmp & ( 100 + i ) & ; ;
59348: LD_ADDR_VAR 0 3
59352: PUSH
59353: LD_VAR 0 3
59357: PUSH
59358: LD_INT 100
59360: PUSH
59361: LD_VAR 0 8
59365: PLUS
59366: STR
59367: PUSH
59368: LD_STRING ;
59370: STR
59371: ST_TO_ADDR
// end ;
59372: GO 59327
59374: POP
59375: POP
// if tmp then
59376: LD_VAR 0 3
59380: IFFALSE 59392
// active := tmp ;
59382: LD_ADDR_VAR 0 7
59386: PUSH
59387: LD_VAR 0 3
59391: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
59392: LD_STRING getStreamItemsFromMission("
59394: PUSH
59395: LD_VAR 0 5
59399: STR
59400: PUSH
59401: LD_STRING ","
59403: STR
59404: PUSH
59405: LD_VAR 0 6
59409: STR
59410: PUSH
59411: LD_STRING ","
59413: STR
59414: PUSH
59415: LD_VAR 0 7
59419: STR
59420: PUSH
59421: LD_STRING ")
59423: STR
59424: PPUSH
59425: CALL_OW 559
// end else
59429: GO 59438
// ToLua ( getStreamItemsFromMission("","","") ) ;
59431: LD_STRING getStreamItemsFromMission("","","")
59433: PPUSH
59434: CALL_OW 559
// end ;
59438: LD_VAR 0 2
59442: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
59443: LD_EXP 43
59447: PUSH
59448: LD_EXP 48
59452: AND
59453: IFFALSE 59577
59455: GO 59457
59457: DISABLE
59458: LD_INT 0
59460: PPUSH
59461: PPUSH
// begin enable ;
59462: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
59463: LD_ADDR_VAR 0 2
59467: PUSH
59468: LD_INT 22
59470: PUSH
59471: LD_OWVAR 2
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 2
59482: PUSH
59483: LD_INT 34
59485: PUSH
59486: LD_INT 7
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 34
59495: PUSH
59496: LD_INT 45
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 34
59505: PUSH
59506: LD_INT 28
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 34
59515: PUSH
59516: LD_INT 47
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PPUSH
59534: CALL_OW 69
59538: ST_TO_ADDR
// if not tmp then
59539: LD_VAR 0 2
59543: NOT
59544: IFFALSE 59548
// exit ;
59546: GO 59577
// for i in tmp do
59548: LD_ADDR_VAR 0 1
59552: PUSH
59553: LD_VAR 0 2
59557: PUSH
59558: FOR_IN
59559: IFFALSE 59575
// begin SetLives ( i , 0 ) ;
59561: LD_VAR 0 1
59565: PPUSH
59566: LD_INT 0
59568: PPUSH
59569: CALL_OW 234
// end ;
59573: GO 59558
59575: POP
59576: POP
// end ;
59577: PPOPN 2
59579: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
59580: LD_EXP 43
59584: PUSH
59585: LD_EXP 49
59589: AND
59590: IFFALSE 59674
59592: GO 59594
59594: DISABLE
59595: LD_INT 0
59597: PPUSH
59598: PPUSH
// begin enable ;
59599: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
59600: LD_ADDR_VAR 0 2
59604: PUSH
59605: LD_INT 22
59607: PUSH
59608: LD_OWVAR 2
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 32
59619: PUSH
59620: LD_INT 3
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PPUSH
59631: CALL_OW 69
59635: ST_TO_ADDR
// if not tmp then
59636: LD_VAR 0 2
59640: NOT
59641: IFFALSE 59645
// exit ;
59643: GO 59674
// for i in tmp do
59645: LD_ADDR_VAR 0 1
59649: PUSH
59650: LD_VAR 0 2
59654: PUSH
59655: FOR_IN
59656: IFFALSE 59672
// begin SetLives ( i , 0 ) ;
59658: LD_VAR 0 1
59662: PPUSH
59663: LD_INT 0
59665: PPUSH
59666: CALL_OW 234
// end ;
59670: GO 59655
59672: POP
59673: POP
// end ;
59674: PPOPN 2
59676: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
59677: LD_EXP 43
59681: PUSH
59682: LD_EXP 46
59686: AND
59687: IFFALSE 59780
59689: GO 59691
59691: DISABLE
59692: LD_INT 0
59694: PPUSH
// begin enable ;
59695: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
59696: LD_ADDR_VAR 0 1
59700: PUSH
59701: LD_INT 22
59703: PUSH
59704: LD_OWVAR 2
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: LD_INT 25
59718: PUSH
59719: LD_INT 5
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 25
59728: PUSH
59729: LD_INT 9
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 25
59738: PUSH
59739: LD_INT 8
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PPUSH
59756: CALL_OW 69
59760: PUSH
59761: FOR_IN
59762: IFFALSE 59778
// begin SetClass ( i , 1 ) ;
59764: LD_VAR 0 1
59768: PPUSH
59769: LD_INT 1
59771: PPUSH
59772: CALL_OW 336
// end ;
59776: GO 59761
59778: POP
59779: POP
// end ;
59780: PPOPN 1
59782: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
59783: LD_EXP 43
59787: PUSH
59788: LD_EXP 47
59792: AND
59793: PUSH
59794: LD_OWVAR 65
59798: PUSH
59799: LD_INT 7
59801: LESS
59802: AND
59803: IFFALSE 59817
59805: GO 59807
59807: DISABLE
// begin enable ;
59808: ENABLE
// game_speed := 7 ;
59809: LD_ADDR_OWVAR 65
59813: PUSH
59814: LD_INT 7
59816: ST_TO_ADDR
// end ;
59817: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
59818: LD_EXP 43
59822: PUSH
59823: LD_EXP 50
59827: AND
59828: IFFALSE 60030
59830: GO 59832
59832: DISABLE
59833: LD_INT 0
59835: PPUSH
59836: PPUSH
59837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59838: LD_ADDR_VAR 0 3
59842: PUSH
59843: LD_INT 81
59845: PUSH
59846: LD_OWVAR 2
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 21
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PPUSH
59869: CALL_OW 69
59873: ST_TO_ADDR
// if not tmp then
59874: LD_VAR 0 3
59878: NOT
59879: IFFALSE 59883
// exit ;
59881: GO 60030
// if tmp > 5 then
59883: LD_VAR 0 3
59887: PUSH
59888: LD_INT 5
59890: GREATER
59891: IFFALSE 59903
// k := 5 else
59893: LD_ADDR_VAR 0 2
59897: PUSH
59898: LD_INT 5
59900: ST_TO_ADDR
59901: GO 59913
// k := tmp ;
59903: LD_ADDR_VAR 0 2
59907: PUSH
59908: LD_VAR 0 3
59912: ST_TO_ADDR
// for i := 1 to k do
59913: LD_ADDR_VAR 0 1
59917: PUSH
59918: DOUBLE
59919: LD_INT 1
59921: DEC
59922: ST_TO_ADDR
59923: LD_VAR 0 2
59927: PUSH
59928: FOR_TO
59929: IFFALSE 60028
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
59931: LD_VAR 0 3
59935: PUSH
59936: LD_VAR 0 1
59940: ARRAY
59941: PPUSH
59942: LD_VAR 0 1
59946: PUSH
59947: LD_INT 4
59949: MOD
59950: PUSH
59951: LD_INT 1
59953: PLUS
59954: PPUSH
59955: CALL_OW 259
59959: PUSH
59960: LD_INT 10
59962: LESS
59963: IFFALSE 60026
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
59965: LD_VAR 0 3
59969: PUSH
59970: LD_VAR 0 1
59974: ARRAY
59975: PPUSH
59976: LD_VAR 0 1
59980: PUSH
59981: LD_INT 4
59983: MOD
59984: PUSH
59985: LD_INT 1
59987: PLUS
59988: PPUSH
59989: LD_VAR 0 3
59993: PUSH
59994: LD_VAR 0 1
59998: ARRAY
59999: PPUSH
60000: LD_VAR 0 1
60004: PUSH
60005: LD_INT 4
60007: MOD
60008: PUSH
60009: LD_INT 1
60011: PLUS
60012: PPUSH
60013: CALL_OW 259
60017: PUSH
60018: LD_INT 1
60020: PLUS
60021: PPUSH
60022: CALL_OW 237
60026: GO 59928
60028: POP
60029: POP
// end ;
60030: PPOPN 3
60032: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
60033: LD_EXP 43
60037: PUSH
60038: LD_EXP 51
60042: AND
60043: IFFALSE 60063
60045: GO 60047
60047: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
60048: LD_INT 4
60050: PPUSH
60051: LD_OWVAR 2
60055: PPUSH
60056: LD_INT 0
60058: PPUSH
60059: CALL_OW 324
60063: END
// every 0 0$1 trigger StreamModeActive and sShovel do
60064: LD_EXP 43
60068: PUSH
60069: LD_EXP 80
60073: AND
60074: IFFALSE 60094
60076: GO 60078
60078: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
60079: LD_INT 19
60081: PPUSH
60082: LD_OWVAR 2
60086: PPUSH
60087: LD_INT 0
60089: PPUSH
60090: CALL_OW 324
60094: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
60095: LD_EXP 43
60099: PUSH
60100: LD_EXP 52
60104: AND
60105: IFFALSE 60207
60107: GO 60109
60109: DISABLE
60110: LD_INT 0
60112: PPUSH
60113: PPUSH
// begin enable ;
60114: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
60115: LD_ADDR_VAR 0 2
60119: PUSH
60120: LD_INT 22
60122: PUSH
60123: LD_OWVAR 2
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: LD_INT 34
60137: PUSH
60138: LD_INT 11
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 34
60147: PUSH
60148: LD_INT 30
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: LIST
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PPUSH
60164: CALL_OW 69
60168: ST_TO_ADDR
// if not tmp then
60169: LD_VAR 0 2
60173: NOT
60174: IFFALSE 60178
// exit ;
60176: GO 60207
// for i in tmp do
60178: LD_ADDR_VAR 0 1
60182: PUSH
60183: LD_VAR 0 2
60187: PUSH
60188: FOR_IN
60189: IFFALSE 60205
// begin SetLives ( i , 0 ) ;
60191: LD_VAR 0 1
60195: PPUSH
60196: LD_INT 0
60198: PPUSH
60199: CALL_OW 234
// end ;
60203: GO 60188
60205: POP
60206: POP
// end ;
60207: PPOPN 2
60209: END
// every 0 0$1 trigger StreamModeActive and sBunker do
60210: LD_EXP 43
60214: PUSH
60215: LD_EXP 53
60219: AND
60220: IFFALSE 60240
60222: GO 60224
60224: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
60225: LD_INT 32
60227: PPUSH
60228: LD_OWVAR 2
60232: PPUSH
60233: LD_INT 0
60235: PPUSH
60236: CALL_OW 324
60240: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
60241: LD_EXP 43
60245: PUSH
60246: LD_EXP 54
60250: AND
60251: IFFALSE 60432
60253: GO 60255
60255: DISABLE
60256: LD_INT 0
60258: PPUSH
60259: PPUSH
60260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
60261: LD_ADDR_VAR 0 2
60265: PUSH
60266: LD_INT 22
60268: PUSH
60269: LD_OWVAR 2
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 33
60280: PUSH
60281: LD_INT 3
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PPUSH
60292: CALL_OW 69
60296: ST_TO_ADDR
// if not tmp then
60297: LD_VAR 0 2
60301: NOT
60302: IFFALSE 60306
// exit ;
60304: GO 60432
// side := 0 ;
60306: LD_ADDR_VAR 0 3
60310: PUSH
60311: LD_INT 0
60313: ST_TO_ADDR
// for i := 1 to 8 do
60314: LD_ADDR_VAR 0 1
60318: PUSH
60319: DOUBLE
60320: LD_INT 1
60322: DEC
60323: ST_TO_ADDR
60324: LD_INT 8
60326: PUSH
60327: FOR_TO
60328: IFFALSE 60376
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
60330: LD_OWVAR 2
60334: PUSH
60335: LD_VAR 0 1
60339: NONEQUAL
60340: PUSH
60341: LD_OWVAR 2
60345: PPUSH
60346: LD_VAR 0 1
60350: PPUSH
60351: CALL_OW 81
60355: PUSH
60356: LD_INT 2
60358: EQUAL
60359: AND
60360: IFFALSE 60374
// begin side := i ;
60362: LD_ADDR_VAR 0 3
60366: PUSH
60367: LD_VAR 0 1
60371: ST_TO_ADDR
// break ;
60372: GO 60376
// end ;
60374: GO 60327
60376: POP
60377: POP
// if not side then
60378: LD_VAR 0 3
60382: NOT
60383: IFFALSE 60387
// exit ;
60385: GO 60432
// for i := 1 to tmp do
60387: LD_ADDR_VAR 0 1
60391: PUSH
60392: DOUBLE
60393: LD_INT 1
60395: DEC
60396: ST_TO_ADDR
60397: LD_VAR 0 2
60401: PUSH
60402: FOR_TO
60403: IFFALSE 60430
// if Prob ( 60 ) then
60405: LD_INT 60
60407: PPUSH
60408: CALL_OW 13
60412: IFFALSE 60428
// SetSide ( i , side ) ;
60414: LD_VAR 0 1
60418: PPUSH
60419: LD_VAR 0 3
60423: PPUSH
60424: CALL_OW 235
60428: GO 60402
60430: POP
60431: POP
// end ;
60432: PPOPN 3
60434: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
60435: LD_EXP 43
60439: PUSH
60440: LD_EXP 56
60444: AND
60445: IFFALSE 60564
60447: GO 60449
60449: DISABLE
60450: LD_INT 0
60452: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
60453: LD_ADDR_VAR 0 1
60457: PUSH
60458: LD_INT 22
60460: PUSH
60461: LD_OWVAR 2
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 21
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 3
60482: PUSH
60483: LD_INT 23
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: LIST
60501: PPUSH
60502: CALL_OW 69
60506: PUSH
60507: FOR_IN
60508: IFFALSE 60562
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
60510: LD_VAR 0 1
60514: PPUSH
60515: CALL_OW 257
60519: PUSH
60520: LD_INT 1
60522: PUSH
60523: LD_INT 2
60525: PUSH
60526: LD_INT 3
60528: PUSH
60529: LD_INT 4
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: IN
60538: IFFALSE 60560
// SetClass ( un , rand ( 1 , 4 ) ) ;
60540: LD_VAR 0 1
60544: PPUSH
60545: LD_INT 1
60547: PPUSH
60548: LD_INT 4
60550: PPUSH
60551: CALL_OW 12
60555: PPUSH
60556: CALL_OW 336
60560: GO 60507
60562: POP
60563: POP
// end ;
60564: PPOPN 1
60566: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
60567: LD_EXP 43
60571: PUSH
60572: LD_EXP 55
60576: AND
60577: IFFALSE 60656
60579: GO 60581
60581: DISABLE
60582: LD_INT 0
60584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60585: LD_ADDR_VAR 0 1
60589: PUSH
60590: LD_INT 22
60592: PUSH
60593: LD_OWVAR 2
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 21
60604: PUSH
60605: LD_INT 3
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PPUSH
60616: CALL_OW 69
60620: ST_TO_ADDR
// if not tmp then
60621: LD_VAR 0 1
60625: NOT
60626: IFFALSE 60630
// exit ;
60628: GO 60656
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
60630: LD_VAR 0 1
60634: PUSH
60635: LD_INT 1
60637: PPUSH
60638: LD_VAR 0 1
60642: PPUSH
60643: CALL_OW 12
60647: ARRAY
60648: PPUSH
60649: LD_INT 100
60651: PPUSH
60652: CALL_OW 234
// end ;
60656: PPOPN 1
60658: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
60659: LD_EXP 43
60663: PUSH
60664: LD_EXP 57
60668: AND
60669: IFFALSE 60767
60671: GO 60673
60673: DISABLE
60674: LD_INT 0
60676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60677: LD_ADDR_VAR 0 1
60681: PUSH
60682: LD_INT 22
60684: PUSH
60685: LD_OWVAR 2
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 21
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PPUSH
60708: CALL_OW 69
60712: ST_TO_ADDR
// if not tmp then
60713: LD_VAR 0 1
60717: NOT
60718: IFFALSE 60722
// exit ;
60720: GO 60767
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
60722: LD_VAR 0 1
60726: PUSH
60727: LD_INT 1
60729: PPUSH
60730: LD_VAR 0 1
60734: PPUSH
60735: CALL_OW 12
60739: ARRAY
60740: PPUSH
60741: LD_INT 1
60743: PPUSH
60744: LD_INT 4
60746: PPUSH
60747: CALL_OW 12
60751: PPUSH
60752: LD_INT 3000
60754: PPUSH
60755: LD_INT 9000
60757: PPUSH
60758: CALL_OW 12
60762: PPUSH
60763: CALL_OW 492
// end ;
60767: PPOPN 1
60769: END
// every 0 0$1 trigger StreamModeActive and sDepot do
60770: LD_EXP 43
60774: PUSH
60775: LD_EXP 58
60779: AND
60780: IFFALSE 60800
60782: GO 60784
60784: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
60785: LD_INT 1
60787: PPUSH
60788: LD_OWVAR 2
60792: PPUSH
60793: LD_INT 0
60795: PPUSH
60796: CALL_OW 324
60800: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
60801: LD_EXP 43
60805: PUSH
60806: LD_EXP 59
60810: AND
60811: IFFALSE 60894
60813: GO 60815
60815: DISABLE
60816: LD_INT 0
60818: PPUSH
60819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60820: LD_ADDR_VAR 0 2
60824: PUSH
60825: LD_INT 22
60827: PUSH
60828: LD_OWVAR 2
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 21
60839: PUSH
60840: LD_INT 3
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PPUSH
60851: CALL_OW 69
60855: ST_TO_ADDR
// if not tmp then
60856: LD_VAR 0 2
60860: NOT
60861: IFFALSE 60865
// exit ;
60863: GO 60894
// for i in tmp do
60865: LD_ADDR_VAR 0 1
60869: PUSH
60870: LD_VAR 0 2
60874: PUSH
60875: FOR_IN
60876: IFFALSE 60892
// SetBLevel ( i , 10 ) ;
60878: LD_VAR 0 1
60882: PPUSH
60883: LD_INT 10
60885: PPUSH
60886: CALL_OW 241
60890: GO 60875
60892: POP
60893: POP
// end ;
60894: PPOPN 2
60896: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
60897: LD_EXP 43
60901: PUSH
60902: LD_EXP 60
60906: AND
60907: IFFALSE 61018
60909: GO 60911
60911: DISABLE
60912: LD_INT 0
60914: PPUSH
60915: PPUSH
60916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60917: LD_ADDR_VAR 0 3
60921: PUSH
60922: LD_INT 22
60924: PUSH
60925: LD_OWVAR 2
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 25
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PPUSH
60948: CALL_OW 69
60952: ST_TO_ADDR
// if not tmp then
60953: LD_VAR 0 3
60957: NOT
60958: IFFALSE 60962
// exit ;
60960: GO 61018
// un := tmp [ rand ( 1 , tmp ) ] ;
60962: LD_ADDR_VAR 0 2
60966: PUSH
60967: LD_VAR 0 3
60971: PUSH
60972: LD_INT 1
60974: PPUSH
60975: LD_VAR 0 3
60979: PPUSH
60980: CALL_OW 12
60984: ARRAY
60985: ST_TO_ADDR
// if Crawls ( un ) then
60986: LD_VAR 0 2
60990: PPUSH
60991: CALL_OW 318
60995: IFFALSE 61006
// ComWalk ( un ) ;
60997: LD_VAR 0 2
61001: PPUSH
61002: CALL_OW 138
// SetClass ( un , class_sniper ) ;
61006: LD_VAR 0 2
61010: PPUSH
61011: LD_INT 5
61013: PPUSH
61014: CALL_OW 336
// end ;
61018: PPOPN 3
61020: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
61021: LD_EXP 43
61025: PUSH
61026: LD_EXP 61
61030: AND
61031: PUSH
61032: LD_OWVAR 67
61036: PUSH
61037: LD_INT 4
61039: LESS
61040: AND
61041: IFFALSE 61060
61043: GO 61045
61045: DISABLE
// begin Difficulty := Difficulty + 1 ;
61046: LD_ADDR_OWVAR 67
61050: PUSH
61051: LD_OWVAR 67
61055: PUSH
61056: LD_INT 1
61058: PLUS
61059: ST_TO_ADDR
// end ;
61060: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
61061: LD_EXP 43
61065: PUSH
61066: LD_EXP 62
61070: AND
61071: IFFALSE 61174
61073: GO 61075
61075: DISABLE
61076: LD_INT 0
61078: PPUSH
// begin for i := 1 to 5 do
61079: LD_ADDR_VAR 0 1
61083: PUSH
61084: DOUBLE
61085: LD_INT 1
61087: DEC
61088: ST_TO_ADDR
61089: LD_INT 5
61091: PUSH
61092: FOR_TO
61093: IFFALSE 61172
// begin uc_nation := nation_nature ;
61095: LD_ADDR_OWVAR 21
61099: PUSH
61100: LD_INT 0
61102: ST_TO_ADDR
// uc_side := 0 ;
61103: LD_ADDR_OWVAR 20
61107: PUSH
61108: LD_INT 0
61110: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61111: LD_ADDR_OWVAR 29
61115: PUSH
61116: LD_INT 12
61118: PUSH
61119: LD_INT 12
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: ST_TO_ADDR
// hc_agressivity := 20 ;
61126: LD_ADDR_OWVAR 35
61130: PUSH
61131: LD_INT 20
61133: ST_TO_ADDR
// hc_class := class_tiger ;
61134: LD_ADDR_OWVAR 28
61138: PUSH
61139: LD_INT 14
61141: ST_TO_ADDR
// hc_gallery :=  ;
61142: LD_ADDR_OWVAR 33
61146: PUSH
61147: LD_STRING 
61149: ST_TO_ADDR
// hc_name :=  ;
61150: LD_ADDR_OWVAR 26
61154: PUSH
61155: LD_STRING 
61157: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
61158: CALL_OW 44
61162: PPUSH
61163: LD_INT 0
61165: PPUSH
61166: CALL_OW 51
// end ;
61170: GO 61092
61172: POP
61173: POP
// end ;
61174: PPOPN 1
61176: END
// every 0 0$1 trigger StreamModeActive and sBomb do
61177: LD_EXP 43
61181: PUSH
61182: LD_EXP 63
61186: AND
61187: IFFALSE 61196
61189: GO 61191
61191: DISABLE
// StreamSibBomb ;
61192: CALL 61197 0 0
61196: END
// export function StreamSibBomb ; var i , x , y ; begin
61197: LD_INT 0
61199: PPUSH
61200: PPUSH
61201: PPUSH
61202: PPUSH
// result := false ;
61203: LD_ADDR_VAR 0 1
61207: PUSH
61208: LD_INT 0
61210: ST_TO_ADDR
// for i := 1 to 16 do
61211: LD_ADDR_VAR 0 2
61215: PUSH
61216: DOUBLE
61217: LD_INT 1
61219: DEC
61220: ST_TO_ADDR
61221: LD_INT 16
61223: PUSH
61224: FOR_TO
61225: IFFALSE 61424
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61227: LD_ADDR_VAR 0 3
61231: PUSH
61232: LD_INT 10
61234: PUSH
61235: LD_INT 20
61237: PUSH
61238: LD_INT 30
61240: PUSH
61241: LD_INT 40
61243: PUSH
61244: LD_INT 50
61246: PUSH
61247: LD_INT 60
61249: PUSH
61250: LD_INT 70
61252: PUSH
61253: LD_INT 80
61255: PUSH
61256: LD_INT 90
61258: PUSH
61259: LD_INT 100
61261: PUSH
61262: LD_INT 110
61264: PUSH
61265: LD_INT 120
61267: PUSH
61268: LD_INT 130
61270: PUSH
61271: LD_INT 140
61273: PUSH
61274: LD_INT 150
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 1
61296: PPUSH
61297: LD_INT 15
61299: PPUSH
61300: CALL_OW 12
61304: ARRAY
61305: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61306: LD_ADDR_VAR 0 4
61310: PUSH
61311: LD_INT 10
61313: PUSH
61314: LD_INT 20
61316: PUSH
61317: LD_INT 30
61319: PUSH
61320: LD_INT 40
61322: PUSH
61323: LD_INT 50
61325: PUSH
61326: LD_INT 60
61328: PUSH
61329: LD_INT 70
61331: PUSH
61332: LD_INT 80
61334: PUSH
61335: LD_INT 90
61337: PUSH
61338: LD_INT 100
61340: PUSH
61341: LD_INT 110
61343: PUSH
61344: LD_INT 120
61346: PUSH
61347: LD_INT 130
61349: PUSH
61350: LD_INT 140
61352: PUSH
61353: LD_INT 150
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: PPUSH
61376: LD_INT 15
61378: PPUSH
61379: CALL_OW 12
61383: ARRAY
61384: ST_TO_ADDR
// if ValidHex ( x , y ) then
61385: LD_VAR 0 3
61389: PPUSH
61390: LD_VAR 0 4
61394: PPUSH
61395: CALL_OW 488
61399: IFFALSE 61422
// begin result := [ x , y ] ;
61401: LD_ADDR_VAR 0 1
61405: PUSH
61406: LD_VAR 0 3
61410: PUSH
61411: LD_VAR 0 4
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: ST_TO_ADDR
// break ;
61420: GO 61424
// end ; end ;
61422: GO 61224
61424: POP
61425: POP
// if result then
61426: LD_VAR 0 1
61430: IFFALSE 61490
// begin ToLua ( playSibBomb() ) ;
61432: LD_STRING playSibBomb()
61434: PPUSH
61435: CALL_OW 559
// wait ( 0 0$14 ) ;
61439: LD_INT 490
61441: PPUSH
61442: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
61446: LD_VAR 0 1
61450: PUSH
61451: LD_INT 1
61453: ARRAY
61454: PPUSH
61455: LD_VAR 0 1
61459: PUSH
61460: LD_INT 2
61462: ARRAY
61463: PPUSH
61464: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
61468: LD_VAR 0 1
61472: PUSH
61473: LD_INT 1
61475: ARRAY
61476: PPUSH
61477: LD_VAR 0 1
61481: PUSH
61482: LD_INT 2
61484: ARRAY
61485: PPUSH
61486: CALL_OW 429
// end ; end ;
61490: LD_VAR 0 1
61494: RET
// every 0 0$1 trigger StreamModeActive and sReset do
61495: LD_EXP 43
61499: PUSH
61500: LD_EXP 65
61504: AND
61505: IFFALSE 61517
61507: GO 61509
61509: DISABLE
// YouLost (  ) ;
61510: LD_STRING 
61512: PPUSH
61513: CALL_OW 104
61517: END
// every 0 0$1 trigger StreamModeActive and sFog do
61518: LD_EXP 43
61522: PUSH
61523: LD_EXP 64
61527: AND
61528: IFFALSE 61542
61530: GO 61532
61532: DISABLE
// FogOff ( your_side ) ;
61533: LD_OWVAR 2
61537: PPUSH
61538: CALL_OW 344
61542: END
// every 0 0$1 trigger StreamModeActive and sSun do
61543: LD_EXP 43
61547: PUSH
61548: LD_EXP 66
61552: AND
61553: IFFALSE 61581
61555: GO 61557
61557: DISABLE
// begin solar_recharge_percent := 0 ;
61558: LD_ADDR_OWVAR 79
61562: PUSH
61563: LD_INT 0
61565: ST_TO_ADDR
// wait ( 5 5$00 ) ;
61566: LD_INT 10500
61568: PPUSH
61569: CALL_OW 67
// solar_recharge_percent := 100 ;
61573: LD_ADDR_OWVAR 79
61577: PUSH
61578: LD_INT 100
61580: ST_TO_ADDR
// end ;
61581: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
61582: LD_EXP 43
61586: PUSH
61587: LD_EXP 67
61591: AND
61592: IFFALSE 61831
61594: GO 61596
61596: DISABLE
61597: LD_INT 0
61599: PPUSH
61600: PPUSH
61601: PPUSH
// begin tmp := [ ] ;
61602: LD_ADDR_VAR 0 3
61606: PUSH
61607: EMPTY
61608: ST_TO_ADDR
// for i := 1 to 6 do
61609: LD_ADDR_VAR 0 1
61613: PUSH
61614: DOUBLE
61615: LD_INT 1
61617: DEC
61618: ST_TO_ADDR
61619: LD_INT 6
61621: PUSH
61622: FOR_TO
61623: IFFALSE 61728
// begin uc_nation := nation_nature ;
61625: LD_ADDR_OWVAR 21
61629: PUSH
61630: LD_INT 0
61632: ST_TO_ADDR
// uc_side := 0 ;
61633: LD_ADDR_OWVAR 20
61637: PUSH
61638: LD_INT 0
61640: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61641: LD_ADDR_OWVAR 29
61645: PUSH
61646: LD_INT 12
61648: PUSH
61649: LD_INT 12
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: ST_TO_ADDR
// hc_agressivity := 20 ;
61656: LD_ADDR_OWVAR 35
61660: PUSH
61661: LD_INT 20
61663: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
61664: LD_ADDR_OWVAR 28
61668: PUSH
61669: LD_INT 17
61671: ST_TO_ADDR
// hc_gallery :=  ;
61672: LD_ADDR_OWVAR 33
61676: PUSH
61677: LD_STRING 
61679: ST_TO_ADDR
// hc_name :=  ;
61680: LD_ADDR_OWVAR 26
61684: PUSH
61685: LD_STRING 
61687: ST_TO_ADDR
// un := CreateHuman ;
61688: LD_ADDR_VAR 0 2
61692: PUSH
61693: CALL_OW 44
61697: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
61698: LD_VAR 0 2
61702: PPUSH
61703: LD_INT 1
61705: PPUSH
61706: CALL_OW 51
// tmp := tmp ^ un ;
61710: LD_ADDR_VAR 0 3
61714: PUSH
61715: LD_VAR 0 3
61719: PUSH
61720: LD_VAR 0 2
61724: ADD
61725: ST_TO_ADDR
// end ;
61726: GO 61622
61728: POP
61729: POP
// repeat wait ( 0 0$1 ) ;
61730: LD_INT 35
61732: PPUSH
61733: CALL_OW 67
// for un in tmp do
61737: LD_ADDR_VAR 0 2
61741: PUSH
61742: LD_VAR 0 3
61746: PUSH
61747: FOR_IN
61748: IFFALSE 61822
// begin if IsDead ( un ) then
61750: LD_VAR 0 2
61754: PPUSH
61755: CALL_OW 301
61759: IFFALSE 61779
// begin tmp := tmp diff un ;
61761: LD_ADDR_VAR 0 3
61765: PUSH
61766: LD_VAR 0 3
61770: PUSH
61771: LD_VAR 0 2
61775: DIFF
61776: ST_TO_ADDR
// continue ;
61777: GO 61747
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
61779: LD_VAR 0 2
61783: PPUSH
61784: LD_INT 3
61786: PUSH
61787: LD_INT 22
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PPUSH
61801: CALL_OW 69
61805: PPUSH
61806: LD_VAR 0 2
61810: PPUSH
61811: CALL_OW 74
61815: PPUSH
61816: CALL_OW 115
// end ;
61820: GO 61747
61822: POP
61823: POP
// until not tmp ;
61824: LD_VAR 0 3
61828: NOT
61829: IFFALSE 61730
// end ;
61831: PPOPN 3
61833: END
// every 0 0$1 trigger StreamModeActive and sTroll do
61834: LD_EXP 43
61838: PUSH
61839: LD_EXP 68
61843: AND
61844: IFFALSE 61898
61846: GO 61848
61848: DISABLE
// begin ToLua ( displayTroll(); ) ;
61849: LD_STRING displayTroll();
61851: PPUSH
61852: CALL_OW 559
// wait ( 3 3$00 ) ;
61856: LD_INT 6300
61858: PPUSH
61859: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61863: LD_STRING hideTroll();
61865: PPUSH
61866: CALL_OW 559
// wait ( 1 1$00 ) ;
61870: LD_INT 2100
61872: PPUSH
61873: CALL_OW 67
// ToLua ( displayTroll(); ) ;
61877: LD_STRING displayTroll();
61879: PPUSH
61880: CALL_OW 559
// wait ( 1 1$00 ) ;
61884: LD_INT 2100
61886: PPUSH
61887: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61891: LD_STRING hideTroll();
61893: PPUSH
61894: CALL_OW 559
// end ;
61898: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
61899: LD_EXP 43
61903: PUSH
61904: LD_EXP 69
61908: AND
61909: IFFALSE 61972
61911: GO 61913
61913: DISABLE
61914: LD_INT 0
61916: PPUSH
// begin p := 0 ;
61917: LD_ADDR_VAR 0 1
61921: PUSH
61922: LD_INT 0
61924: ST_TO_ADDR
// repeat game_speed := 1 ;
61925: LD_ADDR_OWVAR 65
61929: PUSH
61930: LD_INT 1
61932: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61933: LD_INT 35
61935: PPUSH
61936: CALL_OW 67
// p := p + 1 ;
61940: LD_ADDR_VAR 0 1
61944: PUSH
61945: LD_VAR 0 1
61949: PUSH
61950: LD_INT 1
61952: PLUS
61953: ST_TO_ADDR
// until p >= 60 ;
61954: LD_VAR 0 1
61958: PUSH
61959: LD_INT 60
61961: GREATEREQUAL
61962: IFFALSE 61925
// game_speed := 4 ;
61964: LD_ADDR_OWVAR 65
61968: PUSH
61969: LD_INT 4
61971: ST_TO_ADDR
// end ;
61972: PPOPN 1
61974: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
61975: LD_EXP 43
61979: PUSH
61980: LD_EXP 70
61984: AND
61985: IFFALSE 62131
61987: GO 61989
61989: DISABLE
61990: LD_INT 0
61992: PPUSH
61993: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61994: LD_ADDR_VAR 0 1
61998: PUSH
61999: LD_INT 22
62001: PUSH
62002: LD_OWVAR 2
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 2
62013: PUSH
62014: LD_INT 30
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 30
62026: PUSH
62027: LD_INT 1
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: LIST
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PPUSH
62043: CALL_OW 69
62047: ST_TO_ADDR
// if not depot then
62048: LD_VAR 0 1
62052: NOT
62053: IFFALSE 62057
// exit ;
62055: GO 62131
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
62057: LD_ADDR_VAR 0 2
62061: PUSH
62062: LD_VAR 0 1
62066: PUSH
62067: LD_INT 1
62069: PPUSH
62070: LD_VAR 0 1
62074: PPUSH
62075: CALL_OW 12
62079: ARRAY
62080: PPUSH
62081: CALL_OW 274
62085: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
62086: LD_VAR 0 2
62090: PPUSH
62091: LD_INT 1
62093: PPUSH
62094: LD_INT 0
62096: PPUSH
62097: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
62101: LD_VAR 0 2
62105: PPUSH
62106: LD_INT 2
62108: PPUSH
62109: LD_INT 0
62111: PPUSH
62112: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
62116: LD_VAR 0 2
62120: PPUSH
62121: LD_INT 3
62123: PPUSH
62124: LD_INT 0
62126: PPUSH
62127: CALL_OW 277
// end ;
62131: PPOPN 2
62133: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
62134: LD_EXP 43
62138: PUSH
62139: LD_EXP 71
62143: AND
62144: IFFALSE 62241
62146: GO 62148
62148: DISABLE
62149: LD_INT 0
62151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62152: LD_ADDR_VAR 0 1
62156: PUSH
62157: LD_INT 22
62159: PUSH
62160: LD_OWVAR 2
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 21
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 3
62181: PUSH
62182: LD_INT 23
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: LIST
62200: PPUSH
62201: CALL_OW 69
62205: ST_TO_ADDR
// if not tmp then
62206: LD_VAR 0 1
62210: NOT
62211: IFFALSE 62215
// exit ;
62213: GO 62241
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
62215: LD_VAR 0 1
62219: PUSH
62220: LD_INT 1
62222: PPUSH
62223: LD_VAR 0 1
62227: PPUSH
62228: CALL_OW 12
62232: ARRAY
62233: PPUSH
62234: LD_INT 200
62236: PPUSH
62237: CALL_OW 234
// end ;
62241: PPOPN 1
62243: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
62244: LD_EXP 43
62248: PUSH
62249: LD_EXP 72
62253: AND
62254: IFFALSE 62333
62256: GO 62258
62258: DISABLE
62259: LD_INT 0
62261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
62262: LD_ADDR_VAR 0 1
62266: PUSH
62267: LD_INT 22
62269: PUSH
62270: LD_OWVAR 2
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 21
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PPUSH
62293: CALL_OW 69
62297: ST_TO_ADDR
// if not tmp then
62298: LD_VAR 0 1
62302: NOT
62303: IFFALSE 62307
// exit ;
62305: GO 62333
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
62307: LD_VAR 0 1
62311: PUSH
62312: LD_INT 1
62314: PPUSH
62315: LD_VAR 0 1
62319: PPUSH
62320: CALL_OW 12
62324: ARRAY
62325: PPUSH
62326: LD_INT 60
62328: PPUSH
62329: CALL_OW 234
// end ;
62333: PPOPN 1
62335: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
62336: LD_EXP 43
62340: PUSH
62341: LD_EXP 73
62345: AND
62346: IFFALSE 62445
62348: GO 62350
62350: DISABLE
62351: LD_INT 0
62353: PPUSH
62354: PPUSH
// begin enable ;
62355: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
62356: LD_ADDR_VAR 0 1
62360: PUSH
62361: LD_INT 22
62363: PUSH
62364: LD_OWVAR 2
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 61
62375: PUSH
62376: EMPTY
62377: LIST
62378: PUSH
62379: LD_INT 33
62381: PUSH
62382: LD_INT 2
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: LIST
62393: PPUSH
62394: CALL_OW 69
62398: ST_TO_ADDR
// if not tmp then
62399: LD_VAR 0 1
62403: NOT
62404: IFFALSE 62408
// exit ;
62406: GO 62445
// for i in tmp do
62408: LD_ADDR_VAR 0 2
62412: PUSH
62413: LD_VAR 0 1
62417: PUSH
62418: FOR_IN
62419: IFFALSE 62443
// if IsControledBy ( i ) then
62421: LD_VAR 0 2
62425: PPUSH
62426: CALL_OW 312
62430: IFFALSE 62441
// ComUnlink ( i ) ;
62432: LD_VAR 0 2
62436: PPUSH
62437: CALL_OW 136
62441: GO 62418
62443: POP
62444: POP
// end ;
62445: PPOPN 2
62447: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
62448: LD_EXP 43
62452: PUSH
62453: LD_EXP 74
62457: AND
62458: IFFALSE 62598
62460: GO 62462
62462: DISABLE
62463: LD_INT 0
62465: PPUSH
62466: PPUSH
// begin ToLua ( displayPowell(); ) ;
62467: LD_STRING displayPowell();
62469: PPUSH
62470: CALL_OW 559
// uc_side := 0 ;
62474: LD_ADDR_OWVAR 20
62478: PUSH
62479: LD_INT 0
62481: ST_TO_ADDR
// uc_nation := 2 ;
62482: LD_ADDR_OWVAR 21
62486: PUSH
62487: LD_INT 2
62489: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
62490: LD_ADDR_OWVAR 37
62494: PUSH
62495: LD_INT 14
62497: ST_TO_ADDR
// vc_engine := engine_siberite ;
62498: LD_ADDR_OWVAR 39
62502: PUSH
62503: LD_INT 3
62505: ST_TO_ADDR
// vc_control := control_apeman ;
62506: LD_ADDR_OWVAR 38
62510: PUSH
62511: LD_INT 5
62513: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
62514: LD_ADDR_OWVAR 40
62518: PUSH
62519: LD_INT 29
62521: ST_TO_ADDR
// un := CreateVehicle ;
62522: LD_ADDR_VAR 0 2
62526: PUSH
62527: CALL_OW 45
62531: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62532: LD_VAR 0 2
62536: PPUSH
62537: LD_INT 1
62539: PPUSH
62540: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62544: LD_INT 35
62546: PPUSH
62547: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62551: LD_VAR 0 2
62555: PPUSH
62556: LD_INT 22
62558: PUSH
62559: LD_OWVAR 2
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PPUSH
62568: CALL_OW 69
62572: PPUSH
62573: LD_VAR 0 2
62577: PPUSH
62578: CALL_OW 74
62582: PPUSH
62583: CALL_OW 115
// until IsDead ( un ) ;
62587: LD_VAR 0 2
62591: PPUSH
62592: CALL_OW 301
62596: IFFALSE 62544
// end ;
62598: PPOPN 2
62600: END
// every 0 0$1 trigger StreamModeActive and sStu do
62601: LD_EXP 43
62605: PUSH
62606: LD_EXP 82
62610: AND
62611: IFFALSE 62627
62613: GO 62615
62615: DISABLE
// begin ToLua ( displayStucuk(); ) ;
62616: LD_STRING displayStucuk();
62618: PPUSH
62619: CALL_OW 559
// ResetFog ;
62623: CALL_OW 335
// end ;
62627: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
62628: LD_EXP 43
62632: PUSH
62633: LD_EXP 75
62637: AND
62638: IFFALSE 62779
62640: GO 62642
62642: DISABLE
62643: LD_INT 0
62645: PPUSH
62646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62647: LD_ADDR_VAR 0 2
62651: PUSH
62652: LD_INT 22
62654: PUSH
62655: LD_OWVAR 2
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 21
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PPUSH
62678: CALL_OW 69
62682: ST_TO_ADDR
// if not tmp then
62683: LD_VAR 0 2
62687: NOT
62688: IFFALSE 62692
// exit ;
62690: GO 62779
// un := tmp [ rand ( 1 , tmp ) ] ;
62692: LD_ADDR_VAR 0 1
62696: PUSH
62697: LD_VAR 0 2
62701: PUSH
62702: LD_INT 1
62704: PPUSH
62705: LD_VAR 0 2
62709: PPUSH
62710: CALL_OW 12
62714: ARRAY
62715: ST_TO_ADDR
// SetSide ( un , 0 ) ;
62716: LD_VAR 0 1
62720: PPUSH
62721: LD_INT 0
62723: PPUSH
62724: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
62728: LD_VAR 0 1
62732: PPUSH
62733: LD_OWVAR 3
62737: PUSH
62738: LD_VAR 0 1
62742: DIFF
62743: PPUSH
62744: LD_VAR 0 1
62748: PPUSH
62749: CALL_OW 74
62753: PPUSH
62754: CALL_OW 115
// wait ( 0 0$20 ) ;
62758: LD_INT 700
62760: PPUSH
62761: CALL_OW 67
// SetSide ( un , your_side ) ;
62765: LD_VAR 0 1
62769: PPUSH
62770: LD_OWVAR 2
62774: PPUSH
62775: CALL_OW 235
// end ;
62779: PPOPN 2
62781: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
62782: LD_EXP 43
62786: PUSH
62787: LD_EXP 76
62791: AND
62792: IFFALSE 62898
62794: GO 62796
62796: DISABLE
62797: LD_INT 0
62799: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62800: LD_ADDR_VAR 0 1
62804: PUSH
62805: LD_INT 22
62807: PUSH
62808: LD_OWVAR 2
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 2
62819: PUSH
62820: LD_INT 30
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 30
62832: PUSH
62833: LD_INT 1
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: LIST
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PPUSH
62849: CALL_OW 69
62853: ST_TO_ADDR
// if not depot then
62854: LD_VAR 0 1
62858: NOT
62859: IFFALSE 62863
// exit ;
62861: GO 62898
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
62863: LD_VAR 0 1
62867: PUSH
62868: LD_INT 1
62870: ARRAY
62871: PPUSH
62872: CALL_OW 250
62876: PPUSH
62877: LD_VAR 0 1
62881: PUSH
62882: LD_INT 1
62884: ARRAY
62885: PPUSH
62886: CALL_OW 251
62890: PPUSH
62891: LD_INT 70
62893: PPUSH
62894: CALL_OW 495
// end ;
62898: PPOPN 1
62900: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
62901: LD_EXP 43
62905: PUSH
62906: LD_EXP 77
62910: AND
62911: IFFALSE 63122
62913: GO 62915
62915: DISABLE
62916: LD_INT 0
62918: PPUSH
62919: PPUSH
62920: PPUSH
62921: PPUSH
62922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62923: LD_ADDR_VAR 0 5
62927: PUSH
62928: LD_INT 22
62930: PUSH
62931: LD_OWVAR 2
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 21
62942: PUSH
62943: LD_INT 1
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PPUSH
62954: CALL_OW 69
62958: ST_TO_ADDR
// if not tmp then
62959: LD_VAR 0 5
62963: NOT
62964: IFFALSE 62968
// exit ;
62966: GO 63122
// for i in tmp do
62968: LD_ADDR_VAR 0 1
62972: PUSH
62973: LD_VAR 0 5
62977: PUSH
62978: FOR_IN
62979: IFFALSE 63120
// begin d := rand ( 0 , 5 ) ;
62981: LD_ADDR_VAR 0 4
62985: PUSH
62986: LD_INT 0
62988: PPUSH
62989: LD_INT 5
62991: PPUSH
62992: CALL_OW 12
62996: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
62997: LD_ADDR_VAR 0 2
63001: PUSH
63002: LD_VAR 0 1
63006: PPUSH
63007: CALL_OW 250
63011: PPUSH
63012: LD_VAR 0 4
63016: PPUSH
63017: LD_INT 3
63019: PPUSH
63020: LD_INT 12
63022: PPUSH
63023: CALL_OW 12
63027: PPUSH
63028: CALL_OW 272
63032: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
63033: LD_ADDR_VAR 0 3
63037: PUSH
63038: LD_VAR 0 1
63042: PPUSH
63043: CALL_OW 251
63047: PPUSH
63048: LD_VAR 0 4
63052: PPUSH
63053: LD_INT 3
63055: PPUSH
63056: LD_INT 12
63058: PPUSH
63059: CALL_OW 12
63063: PPUSH
63064: CALL_OW 273
63068: ST_TO_ADDR
// if ValidHex ( x , y ) then
63069: LD_VAR 0 2
63073: PPUSH
63074: LD_VAR 0 3
63078: PPUSH
63079: CALL_OW 488
63083: IFFALSE 63118
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
63085: LD_VAR 0 1
63089: PPUSH
63090: LD_VAR 0 2
63094: PPUSH
63095: LD_VAR 0 3
63099: PPUSH
63100: LD_INT 3
63102: PPUSH
63103: LD_INT 6
63105: PPUSH
63106: CALL_OW 12
63110: PPUSH
63111: LD_INT 1
63113: PPUSH
63114: CALL_OW 483
// end ;
63118: GO 62978
63120: POP
63121: POP
// end ;
63122: PPOPN 5
63124: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
63125: LD_EXP 43
63129: PUSH
63130: LD_EXP 78
63134: AND
63135: IFFALSE 63229
63137: GO 63139
63139: DISABLE
63140: LD_INT 0
63142: PPUSH
63143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
63144: LD_ADDR_VAR 0 2
63148: PUSH
63149: LD_INT 22
63151: PUSH
63152: LD_OWVAR 2
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 32
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 21
63173: PUSH
63174: LD_INT 2
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: LIST
63185: PPUSH
63186: CALL_OW 69
63190: ST_TO_ADDR
// if not tmp then
63191: LD_VAR 0 2
63195: NOT
63196: IFFALSE 63200
// exit ;
63198: GO 63229
// for i in tmp do
63200: LD_ADDR_VAR 0 1
63204: PUSH
63205: LD_VAR 0 2
63209: PUSH
63210: FOR_IN
63211: IFFALSE 63227
// SetFuel ( i , 0 ) ;
63213: LD_VAR 0 1
63217: PPUSH
63218: LD_INT 0
63220: PPUSH
63221: CALL_OW 240
63225: GO 63210
63227: POP
63228: POP
// end ;
63229: PPOPN 2
63231: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
63232: LD_EXP 43
63236: PUSH
63237: LD_EXP 79
63241: AND
63242: IFFALSE 63308
63244: GO 63246
63246: DISABLE
63247: LD_INT 0
63249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63250: LD_ADDR_VAR 0 1
63254: PUSH
63255: LD_INT 22
63257: PUSH
63258: LD_OWVAR 2
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 30
63269: PUSH
63270: LD_INT 29
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PPUSH
63281: CALL_OW 69
63285: ST_TO_ADDR
// if not tmp then
63286: LD_VAR 0 1
63290: NOT
63291: IFFALSE 63295
// exit ;
63293: GO 63308
// DestroyUnit ( tmp [ 1 ] ) ;
63295: LD_VAR 0 1
63299: PUSH
63300: LD_INT 1
63302: ARRAY
63303: PPUSH
63304: CALL_OW 65
// end ;
63308: PPOPN 1
63310: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
63311: LD_EXP 43
63315: PUSH
63316: LD_EXP 81
63320: AND
63321: IFFALSE 63450
63323: GO 63325
63325: DISABLE
63326: LD_INT 0
63328: PPUSH
// begin uc_side := 0 ;
63329: LD_ADDR_OWVAR 20
63333: PUSH
63334: LD_INT 0
63336: ST_TO_ADDR
// uc_nation := nation_arabian ;
63337: LD_ADDR_OWVAR 21
63341: PUSH
63342: LD_INT 2
63344: ST_TO_ADDR
// hc_gallery :=  ;
63345: LD_ADDR_OWVAR 33
63349: PUSH
63350: LD_STRING 
63352: ST_TO_ADDR
// hc_name :=  ;
63353: LD_ADDR_OWVAR 26
63357: PUSH
63358: LD_STRING 
63360: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
63361: LD_INT 1
63363: PPUSH
63364: LD_INT 11
63366: PPUSH
63367: LD_INT 10
63369: PPUSH
63370: CALL_OW 380
// un := CreateHuman ;
63374: LD_ADDR_VAR 0 1
63378: PUSH
63379: CALL_OW 44
63383: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63384: LD_VAR 0 1
63388: PPUSH
63389: LD_INT 1
63391: PPUSH
63392: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63396: LD_INT 35
63398: PPUSH
63399: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63403: LD_VAR 0 1
63407: PPUSH
63408: LD_INT 22
63410: PUSH
63411: LD_OWVAR 2
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PPUSH
63420: CALL_OW 69
63424: PPUSH
63425: LD_VAR 0 1
63429: PPUSH
63430: CALL_OW 74
63434: PPUSH
63435: CALL_OW 115
// until IsDead ( un ) ;
63439: LD_VAR 0 1
63443: PPUSH
63444: CALL_OW 301
63448: IFFALSE 63396
// end ;
63450: PPOPN 1
63452: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
63453: LD_EXP 43
63457: PUSH
63458: LD_EXP 83
63462: AND
63463: IFFALSE 63475
63465: GO 63467
63467: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
63468: LD_STRING earthquake(getX(game), 0, 32)
63470: PPUSH
63471: CALL_OW 559
63475: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
63476: LD_EXP 43
63480: PUSH
63481: LD_EXP 84
63485: AND
63486: IFFALSE 63577
63488: GO 63490
63490: DISABLE
63491: LD_INT 0
63493: PPUSH
// begin enable ;
63494: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
63495: LD_ADDR_VAR 0 1
63499: PUSH
63500: LD_INT 22
63502: PUSH
63503: LD_OWVAR 2
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 21
63514: PUSH
63515: LD_INT 2
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 33
63524: PUSH
63525: LD_INT 3
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: LIST
63536: PPUSH
63537: CALL_OW 69
63541: ST_TO_ADDR
// if not tmp then
63542: LD_VAR 0 1
63546: NOT
63547: IFFALSE 63551
// exit ;
63549: GO 63577
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63551: LD_VAR 0 1
63555: PUSH
63556: LD_INT 1
63558: PPUSH
63559: LD_VAR 0 1
63563: PPUSH
63564: CALL_OW 12
63568: ARRAY
63569: PPUSH
63570: LD_INT 1
63572: PPUSH
63573: CALL_OW 234
// end ;
63577: PPOPN 1
63579: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
63580: LD_EXP 43
63584: PUSH
63585: LD_EXP 85
63589: AND
63590: IFFALSE 63731
63592: GO 63594
63594: DISABLE
63595: LD_INT 0
63597: PPUSH
63598: PPUSH
63599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63600: LD_ADDR_VAR 0 3
63604: PUSH
63605: LD_INT 22
63607: PUSH
63608: LD_OWVAR 2
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 25
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PPUSH
63631: CALL_OW 69
63635: ST_TO_ADDR
// if not tmp then
63636: LD_VAR 0 3
63640: NOT
63641: IFFALSE 63645
// exit ;
63643: GO 63731
// un := tmp [ rand ( 1 , tmp ) ] ;
63645: LD_ADDR_VAR 0 2
63649: PUSH
63650: LD_VAR 0 3
63654: PUSH
63655: LD_INT 1
63657: PPUSH
63658: LD_VAR 0 3
63662: PPUSH
63663: CALL_OW 12
63667: ARRAY
63668: ST_TO_ADDR
// if Crawls ( un ) then
63669: LD_VAR 0 2
63673: PPUSH
63674: CALL_OW 318
63678: IFFALSE 63689
// ComWalk ( un ) ;
63680: LD_VAR 0 2
63684: PPUSH
63685: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
63689: LD_VAR 0 2
63693: PPUSH
63694: LD_INT 9
63696: PPUSH
63697: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
63701: LD_INT 28
63703: PPUSH
63704: LD_OWVAR 2
63708: PPUSH
63709: LD_INT 2
63711: PPUSH
63712: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
63716: LD_INT 29
63718: PPUSH
63719: LD_OWVAR 2
63723: PPUSH
63724: LD_INT 2
63726: PPUSH
63727: CALL_OW 322
// end ;
63731: PPOPN 3
63733: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
63734: LD_EXP 43
63738: PUSH
63739: LD_EXP 86
63743: AND
63744: IFFALSE 63855
63746: GO 63748
63748: DISABLE
63749: LD_INT 0
63751: PPUSH
63752: PPUSH
63753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63754: LD_ADDR_VAR 0 3
63758: PUSH
63759: LD_INT 22
63761: PUSH
63762: LD_OWVAR 2
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 25
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PPUSH
63785: CALL_OW 69
63789: ST_TO_ADDR
// if not tmp then
63790: LD_VAR 0 3
63794: NOT
63795: IFFALSE 63799
// exit ;
63797: GO 63855
// un := tmp [ rand ( 1 , tmp ) ] ;
63799: LD_ADDR_VAR 0 2
63803: PUSH
63804: LD_VAR 0 3
63808: PUSH
63809: LD_INT 1
63811: PPUSH
63812: LD_VAR 0 3
63816: PPUSH
63817: CALL_OW 12
63821: ARRAY
63822: ST_TO_ADDR
// if Crawls ( un ) then
63823: LD_VAR 0 2
63827: PPUSH
63828: CALL_OW 318
63832: IFFALSE 63843
// ComWalk ( un ) ;
63834: LD_VAR 0 2
63838: PPUSH
63839: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63843: LD_VAR 0 2
63847: PPUSH
63848: LD_INT 8
63850: PPUSH
63851: CALL_OW 336
// end ;
63855: PPOPN 3
63857: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
63858: LD_EXP 43
63862: PUSH
63863: LD_EXP 87
63867: AND
63868: IFFALSE 64012
63870: GO 63872
63872: DISABLE
63873: LD_INT 0
63875: PPUSH
63876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
63877: LD_ADDR_VAR 0 2
63881: PUSH
63882: LD_INT 22
63884: PUSH
63885: LD_OWVAR 2
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 21
63896: PUSH
63897: LD_INT 2
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 2
63906: PUSH
63907: LD_INT 34
63909: PUSH
63910: LD_INT 12
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 34
63919: PUSH
63920: LD_INT 51
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 34
63929: PUSH
63930: LD_INT 32
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: LIST
63947: PPUSH
63948: CALL_OW 69
63952: ST_TO_ADDR
// if not tmp then
63953: LD_VAR 0 2
63957: NOT
63958: IFFALSE 63962
// exit ;
63960: GO 64012
// for i in tmp do
63962: LD_ADDR_VAR 0 1
63966: PUSH
63967: LD_VAR 0 2
63971: PUSH
63972: FOR_IN
63973: IFFALSE 64010
// if GetCargo ( i , mat_artifact ) = 0 then
63975: LD_VAR 0 1
63979: PPUSH
63980: LD_INT 4
63982: PPUSH
63983: CALL_OW 289
63987: PUSH
63988: LD_INT 0
63990: EQUAL
63991: IFFALSE 64008
// SetCargo ( i , mat_siberit , 100 ) ;
63993: LD_VAR 0 1
63997: PPUSH
63998: LD_INT 3
64000: PPUSH
64001: LD_INT 100
64003: PPUSH
64004: CALL_OW 290
64008: GO 63972
64010: POP
64011: POP
// end ;
64012: PPOPN 2
64014: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
64015: LD_EXP 43
64019: PUSH
64020: LD_EXP 88
64024: AND
64025: IFFALSE 64208
64027: GO 64029
64029: DISABLE
64030: LD_INT 0
64032: PPUSH
64033: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64034: LD_ADDR_VAR 0 2
64038: PUSH
64039: LD_INT 22
64041: PUSH
64042: LD_OWVAR 2
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PPUSH
64051: CALL_OW 69
64055: ST_TO_ADDR
// if not tmp then
64056: LD_VAR 0 2
64060: NOT
64061: IFFALSE 64065
// exit ;
64063: GO 64208
// for i := 1 to 2 do
64065: LD_ADDR_VAR 0 1
64069: PUSH
64070: DOUBLE
64071: LD_INT 1
64073: DEC
64074: ST_TO_ADDR
64075: LD_INT 2
64077: PUSH
64078: FOR_TO
64079: IFFALSE 64206
// begin uc_side := your_side ;
64081: LD_ADDR_OWVAR 20
64085: PUSH
64086: LD_OWVAR 2
64090: ST_TO_ADDR
// uc_nation := nation_american ;
64091: LD_ADDR_OWVAR 21
64095: PUSH
64096: LD_INT 1
64098: ST_TO_ADDR
// vc_chassis := us_morphling ;
64099: LD_ADDR_OWVAR 37
64103: PUSH
64104: LD_INT 5
64106: ST_TO_ADDR
// vc_engine := engine_siberite ;
64107: LD_ADDR_OWVAR 39
64111: PUSH
64112: LD_INT 3
64114: ST_TO_ADDR
// vc_control := control_computer ;
64115: LD_ADDR_OWVAR 38
64119: PUSH
64120: LD_INT 3
64122: ST_TO_ADDR
// vc_weapon := us_double_laser ;
64123: LD_ADDR_OWVAR 40
64127: PUSH
64128: LD_INT 10
64130: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
64131: LD_VAR 0 2
64135: PUSH
64136: LD_INT 1
64138: ARRAY
64139: PPUSH
64140: CALL_OW 310
64144: NOT
64145: IFFALSE 64192
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
64147: CALL_OW 45
64151: PPUSH
64152: LD_VAR 0 2
64156: PUSH
64157: LD_INT 1
64159: ARRAY
64160: PPUSH
64161: CALL_OW 250
64165: PPUSH
64166: LD_VAR 0 2
64170: PUSH
64171: LD_INT 1
64173: ARRAY
64174: PPUSH
64175: CALL_OW 251
64179: PPUSH
64180: LD_INT 12
64182: PPUSH
64183: LD_INT 1
64185: PPUSH
64186: CALL_OW 50
64190: GO 64204
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
64192: CALL_OW 45
64196: PPUSH
64197: LD_INT 1
64199: PPUSH
64200: CALL_OW 51
// end ;
64204: GO 64078
64206: POP
64207: POP
// end ;
64208: PPOPN 2
64210: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
64211: LD_EXP 43
64215: PUSH
64216: LD_EXP 89
64220: AND
64221: IFFALSE 64443
64223: GO 64225
64225: DISABLE
64226: LD_INT 0
64228: PPUSH
64229: PPUSH
64230: PPUSH
64231: PPUSH
64232: PPUSH
64233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64234: LD_ADDR_VAR 0 6
64238: PUSH
64239: LD_INT 22
64241: PUSH
64242: LD_OWVAR 2
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 21
64253: PUSH
64254: LD_INT 1
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 3
64263: PUSH
64264: LD_INT 23
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: LIST
64282: PPUSH
64283: CALL_OW 69
64287: ST_TO_ADDR
// if not tmp then
64288: LD_VAR 0 6
64292: NOT
64293: IFFALSE 64297
// exit ;
64295: GO 64443
// s1 := rand ( 1 , 4 ) ;
64297: LD_ADDR_VAR 0 2
64301: PUSH
64302: LD_INT 1
64304: PPUSH
64305: LD_INT 4
64307: PPUSH
64308: CALL_OW 12
64312: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
64313: LD_ADDR_VAR 0 4
64317: PUSH
64318: LD_VAR 0 6
64322: PUSH
64323: LD_INT 1
64325: ARRAY
64326: PPUSH
64327: LD_VAR 0 2
64331: PPUSH
64332: CALL_OW 259
64336: ST_TO_ADDR
// if s1 = 1 then
64337: LD_VAR 0 2
64341: PUSH
64342: LD_INT 1
64344: EQUAL
64345: IFFALSE 64365
// s2 := rand ( 2 , 4 ) else
64347: LD_ADDR_VAR 0 3
64351: PUSH
64352: LD_INT 2
64354: PPUSH
64355: LD_INT 4
64357: PPUSH
64358: CALL_OW 12
64362: ST_TO_ADDR
64363: GO 64373
// s2 := 1 ;
64365: LD_ADDR_VAR 0 3
64369: PUSH
64370: LD_INT 1
64372: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
64373: LD_ADDR_VAR 0 5
64377: PUSH
64378: LD_VAR 0 6
64382: PUSH
64383: LD_INT 1
64385: ARRAY
64386: PPUSH
64387: LD_VAR 0 3
64391: PPUSH
64392: CALL_OW 259
64396: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
64397: LD_VAR 0 6
64401: PUSH
64402: LD_INT 1
64404: ARRAY
64405: PPUSH
64406: LD_VAR 0 2
64410: PPUSH
64411: LD_VAR 0 5
64415: PPUSH
64416: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
64420: LD_VAR 0 6
64424: PUSH
64425: LD_INT 1
64427: ARRAY
64428: PPUSH
64429: LD_VAR 0 3
64433: PPUSH
64434: LD_VAR 0 4
64438: PPUSH
64439: CALL_OW 237
// end ;
64443: PPOPN 6
64445: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
64446: LD_EXP 43
64450: PUSH
64451: LD_EXP 90
64455: AND
64456: IFFALSE 64535
64458: GO 64460
64460: DISABLE
64461: LD_INT 0
64463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
64464: LD_ADDR_VAR 0 1
64468: PUSH
64469: LD_INT 22
64471: PUSH
64472: LD_OWVAR 2
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 30
64483: PUSH
64484: LD_INT 3
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PPUSH
64495: CALL_OW 69
64499: ST_TO_ADDR
// if not tmp then
64500: LD_VAR 0 1
64504: NOT
64505: IFFALSE 64509
// exit ;
64507: GO 64535
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64509: LD_VAR 0 1
64513: PUSH
64514: LD_INT 1
64516: PPUSH
64517: LD_VAR 0 1
64521: PPUSH
64522: CALL_OW 12
64526: ARRAY
64527: PPUSH
64528: LD_INT 1
64530: PPUSH
64531: CALL_OW 234
// end ;
64535: PPOPN 1
64537: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
64538: LD_EXP 43
64542: PUSH
64543: LD_EXP 91
64547: AND
64548: IFFALSE 64660
64550: GO 64552
64552: DISABLE
64553: LD_INT 0
64555: PPUSH
64556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
64557: LD_ADDR_VAR 0 2
64561: PUSH
64562: LD_INT 22
64564: PUSH
64565: LD_OWVAR 2
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 2
64576: PUSH
64577: LD_INT 30
64579: PUSH
64580: LD_INT 27
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 30
64589: PUSH
64590: LD_INT 26
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 30
64599: PUSH
64600: LD_INT 28
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PPUSH
64617: CALL_OW 69
64621: ST_TO_ADDR
// if not tmp then
64622: LD_VAR 0 2
64626: NOT
64627: IFFALSE 64631
// exit ;
64629: GO 64660
// for i in tmp do
64631: LD_ADDR_VAR 0 1
64635: PUSH
64636: LD_VAR 0 2
64640: PUSH
64641: FOR_IN
64642: IFFALSE 64658
// SetLives ( i , 1 ) ;
64644: LD_VAR 0 1
64648: PPUSH
64649: LD_INT 1
64651: PPUSH
64652: CALL_OW 234
64656: GO 64641
64658: POP
64659: POP
// end ;
64660: PPOPN 2
64662: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
64663: LD_EXP 43
64667: PUSH
64668: LD_EXP 92
64672: AND
64673: IFFALSE 64960
64675: GO 64677
64677: DISABLE
64678: LD_INT 0
64680: PPUSH
64681: PPUSH
64682: PPUSH
// begin i := rand ( 1 , 7 ) ;
64683: LD_ADDR_VAR 0 1
64687: PUSH
64688: LD_INT 1
64690: PPUSH
64691: LD_INT 7
64693: PPUSH
64694: CALL_OW 12
64698: ST_TO_ADDR
// case i of 1 :
64699: LD_VAR 0 1
64703: PUSH
64704: LD_INT 1
64706: DOUBLE
64707: EQUAL
64708: IFTRUE 64712
64710: GO 64722
64712: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
64713: LD_STRING earthquake(getX(game), 0, 32)
64715: PPUSH
64716: CALL_OW 559
64720: GO 64960
64722: LD_INT 2
64724: DOUBLE
64725: EQUAL
64726: IFTRUE 64730
64728: GO 64744
64730: POP
// begin ToLua ( displayStucuk(); ) ;
64731: LD_STRING displayStucuk();
64733: PPUSH
64734: CALL_OW 559
// ResetFog ;
64738: CALL_OW 335
// end ; 3 :
64742: GO 64960
64744: LD_INT 3
64746: DOUBLE
64747: EQUAL
64748: IFTRUE 64752
64750: GO 64856
64752: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64753: LD_ADDR_VAR 0 2
64757: PUSH
64758: LD_INT 22
64760: PUSH
64761: LD_OWVAR 2
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 25
64772: PUSH
64773: LD_INT 1
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PPUSH
64784: CALL_OW 69
64788: ST_TO_ADDR
// if not tmp then
64789: LD_VAR 0 2
64793: NOT
64794: IFFALSE 64798
// exit ;
64796: GO 64960
// un := tmp [ rand ( 1 , tmp ) ] ;
64798: LD_ADDR_VAR 0 3
64802: PUSH
64803: LD_VAR 0 2
64807: PUSH
64808: LD_INT 1
64810: PPUSH
64811: LD_VAR 0 2
64815: PPUSH
64816: CALL_OW 12
64820: ARRAY
64821: ST_TO_ADDR
// if Crawls ( un ) then
64822: LD_VAR 0 3
64826: PPUSH
64827: CALL_OW 318
64831: IFFALSE 64842
// ComWalk ( un ) ;
64833: LD_VAR 0 3
64837: PPUSH
64838: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64842: LD_VAR 0 3
64846: PPUSH
64847: LD_INT 8
64849: PPUSH
64850: CALL_OW 336
// end ; 4 :
64854: GO 64960
64856: LD_INT 4
64858: DOUBLE
64859: EQUAL
64860: IFTRUE 64864
64862: GO 64938
64864: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
64865: LD_ADDR_VAR 0 2
64869: PUSH
64870: LD_INT 22
64872: PUSH
64873: LD_OWVAR 2
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 30
64884: PUSH
64885: LD_INT 29
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PPUSH
64896: CALL_OW 69
64900: ST_TO_ADDR
// if not tmp then
64901: LD_VAR 0 2
64905: NOT
64906: IFFALSE 64910
// exit ;
64908: GO 64960
// CenterNowOnUnits ( tmp [ 1 ] ) ;
64910: LD_VAR 0 2
64914: PUSH
64915: LD_INT 1
64917: ARRAY
64918: PPUSH
64919: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
64923: LD_VAR 0 2
64927: PUSH
64928: LD_INT 1
64930: ARRAY
64931: PPUSH
64932: CALL_OW 65
// end ; 5 .. 7 :
64936: GO 64960
64938: LD_INT 5
64940: DOUBLE
64941: GREATEREQUAL
64942: IFFALSE 64950
64944: LD_INT 7
64946: DOUBLE
64947: LESSEQUAL
64948: IFTRUE 64952
64950: GO 64959
64952: POP
// StreamSibBomb ; end ;
64953: CALL 61197 0 0
64957: GO 64960
64959: POP
// end ;
64960: PPOPN 3
64962: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
64963: LD_EXP 43
64967: PUSH
64968: LD_EXP 93
64972: AND
64973: IFFALSE 65129
64975: GO 64977
64977: DISABLE
64978: LD_INT 0
64980: PPUSH
64981: PPUSH
64982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
64983: LD_ADDR_VAR 0 2
64987: PUSH
64988: LD_INT 81
64990: PUSH
64991: LD_OWVAR 2
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 2
65002: PUSH
65003: LD_INT 21
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 21
65015: PUSH
65016: LD_INT 2
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: LIST
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PPUSH
65032: CALL_OW 69
65036: ST_TO_ADDR
// if not tmp then
65037: LD_VAR 0 2
65041: NOT
65042: IFFALSE 65046
// exit ;
65044: GO 65129
// p := 0 ;
65046: LD_ADDR_VAR 0 3
65050: PUSH
65051: LD_INT 0
65053: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65054: LD_INT 35
65056: PPUSH
65057: CALL_OW 67
// p := p + 1 ;
65061: LD_ADDR_VAR 0 3
65065: PUSH
65066: LD_VAR 0 3
65070: PUSH
65071: LD_INT 1
65073: PLUS
65074: ST_TO_ADDR
// for i in tmp do
65075: LD_ADDR_VAR 0 1
65079: PUSH
65080: LD_VAR 0 2
65084: PUSH
65085: FOR_IN
65086: IFFALSE 65117
// if GetLives ( i ) < 1000 then
65088: LD_VAR 0 1
65092: PPUSH
65093: CALL_OW 256
65097: PUSH
65098: LD_INT 1000
65100: LESS
65101: IFFALSE 65115
// SetLives ( i , 1000 ) ;
65103: LD_VAR 0 1
65107: PPUSH
65108: LD_INT 1000
65110: PPUSH
65111: CALL_OW 234
65115: GO 65085
65117: POP
65118: POP
// until p > 20 ;
65119: LD_VAR 0 3
65123: PUSH
65124: LD_INT 20
65126: GREATER
65127: IFFALSE 65054
// end ;
65129: PPOPN 3
65131: END
// every 0 0$1 trigger StreamModeActive and sTime do
65132: LD_EXP 43
65136: PUSH
65137: LD_EXP 94
65141: AND
65142: IFFALSE 65177
65144: GO 65146
65146: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
65147: LD_INT 28
65149: PPUSH
65150: LD_OWVAR 2
65154: PPUSH
65155: LD_INT 2
65157: PPUSH
65158: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
65162: LD_INT 30
65164: PPUSH
65165: LD_OWVAR 2
65169: PPUSH
65170: LD_INT 2
65172: PPUSH
65173: CALL_OW 322
// end ;
65177: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
65178: LD_EXP 43
65182: PUSH
65183: LD_EXP 95
65187: AND
65188: IFFALSE 65309
65190: GO 65192
65192: DISABLE
65193: LD_INT 0
65195: PPUSH
65196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65197: LD_ADDR_VAR 0 2
65201: PUSH
65202: LD_INT 22
65204: PUSH
65205: LD_OWVAR 2
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 21
65216: PUSH
65217: LD_INT 1
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 3
65226: PUSH
65227: LD_INT 23
65229: PUSH
65230: LD_INT 0
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: LIST
65245: PPUSH
65246: CALL_OW 69
65250: ST_TO_ADDR
// if not tmp then
65251: LD_VAR 0 2
65255: NOT
65256: IFFALSE 65260
// exit ;
65258: GO 65309
// for i in tmp do
65260: LD_ADDR_VAR 0 1
65264: PUSH
65265: LD_VAR 0 2
65269: PUSH
65270: FOR_IN
65271: IFFALSE 65307
// begin if Crawls ( i ) then
65273: LD_VAR 0 1
65277: PPUSH
65278: CALL_OW 318
65282: IFFALSE 65293
// ComWalk ( i ) ;
65284: LD_VAR 0 1
65288: PPUSH
65289: CALL_OW 138
// SetClass ( i , 2 ) ;
65293: LD_VAR 0 1
65297: PPUSH
65298: LD_INT 2
65300: PPUSH
65301: CALL_OW 336
// end ;
65305: GO 65270
65307: POP
65308: POP
// end ;
65309: PPOPN 2
65311: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
65312: LD_EXP 43
65316: PUSH
65317: LD_EXP 96
65321: AND
65322: IFFALSE 65610
65324: GO 65326
65326: DISABLE
65327: LD_INT 0
65329: PPUSH
65330: PPUSH
65331: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
65332: LD_OWVAR 2
65336: PPUSH
65337: LD_INT 9
65339: PPUSH
65340: LD_INT 1
65342: PPUSH
65343: LD_INT 1
65345: PPUSH
65346: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
65350: LD_INT 9
65352: PPUSH
65353: LD_OWVAR 2
65357: PPUSH
65358: CALL_OW 343
// uc_side := 9 ;
65362: LD_ADDR_OWVAR 20
65366: PUSH
65367: LD_INT 9
65369: ST_TO_ADDR
// uc_nation := 2 ;
65370: LD_ADDR_OWVAR 21
65374: PUSH
65375: LD_INT 2
65377: ST_TO_ADDR
// hc_name := Dark Warrior ;
65378: LD_ADDR_OWVAR 26
65382: PUSH
65383: LD_STRING Dark Warrior
65385: ST_TO_ADDR
// hc_gallery :=  ;
65386: LD_ADDR_OWVAR 33
65390: PUSH
65391: LD_STRING 
65393: ST_TO_ADDR
// hc_noskilllimit := true ;
65394: LD_ADDR_OWVAR 76
65398: PUSH
65399: LD_INT 1
65401: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
65402: LD_ADDR_OWVAR 31
65406: PUSH
65407: LD_INT 30
65409: PUSH
65410: LD_INT 30
65412: PUSH
65413: LD_INT 30
65415: PUSH
65416: LD_INT 30
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: ST_TO_ADDR
// un := CreateHuman ;
65425: LD_ADDR_VAR 0 3
65429: PUSH
65430: CALL_OW 44
65434: ST_TO_ADDR
// hc_noskilllimit := false ;
65435: LD_ADDR_OWVAR 76
65439: PUSH
65440: LD_INT 0
65442: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65443: LD_VAR 0 3
65447: PPUSH
65448: LD_INT 1
65450: PPUSH
65451: CALL_OW 51
// ToLua ( playRanger() ) ;
65455: LD_STRING playRanger()
65457: PPUSH
65458: CALL_OW 559
// p := 0 ;
65462: LD_ADDR_VAR 0 2
65466: PUSH
65467: LD_INT 0
65469: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65470: LD_INT 35
65472: PPUSH
65473: CALL_OW 67
// p := p + 1 ;
65477: LD_ADDR_VAR 0 2
65481: PUSH
65482: LD_VAR 0 2
65486: PUSH
65487: LD_INT 1
65489: PLUS
65490: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
65491: LD_VAR 0 3
65495: PPUSH
65496: CALL_OW 256
65500: PUSH
65501: LD_INT 1000
65503: LESS
65504: IFFALSE 65518
// SetLives ( un , 1000 ) ;
65506: LD_VAR 0 3
65510: PPUSH
65511: LD_INT 1000
65513: PPUSH
65514: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
65518: LD_VAR 0 3
65522: PPUSH
65523: LD_INT 81
65525: PUSH
65526: LD_OWVAR 2
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 91
65537: PUSH
65538: LD_VAR 0 3
65542: PUSH
65543: LD_INT 30
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: LIST
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PPUSH
65555: CALL_OW 69
65559: PPUSH
65560: LD_VAR 0 3
65564: PPUSH
65565: CALL_OW 74
65569: PPUSH
65570: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
65574: LD_VAR 0 2
65578: PUSH
65579: LD_INT 80
65581: GREATER
65582: PUSH
65583: LD_VAR 0 3
65587: PPUSH
65588: CALL_OW 301
65592: OR
65593: IFFALSE 65470
// if un then
65595: LD_VAR 0 3
65599: IFFALSE 65610
// RemoveUnit ( un ) ;
65601: LD_VAR 0 3
65605: PPUSH
65606: CALL_OW 64
// end ;
65610: PPOPN 3
65612: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
65613: LD_EXP 97
65617: IFFALSE 65733
65619: GO 65621
65621: DISABLE
65622: LD_INT 0
65624: PPUSH
65625: PPUSH
65626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65627: LD_ADDR_VAR 0 2
65631: PUSH
65632: LD_INT 81
65634: PUSH
65635: LD_OWVAR 2
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 21
65646: PUSH
65647: LD_INT 1
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PPUSH
65658: CALL_OW 69
65662: ST_TO_ADDR
// ToLua ( playComputer() ) ;
65663: LD_STRING playComputer()
65665: PPUSH
65666: CALL_OW 559
// if not tmp then
65670: LD_VAR 0 2
65674: NOT
65675: IFFALSE 65679
// exit ;
65677: GO 65733
// for i in tmp do
65679: LD_ADDR_VAR 0 1
65683: PUSH
65684: LD_VAR 0 2
65688: PUSH
65689: FOR_IN
65690: IFFALSE 65731
// for j := 1 to 4 do
65692: LD_ADDR_VAR 0 3
65696: PUSH
65697: DOUBLE
65698: LD_INT 1
65700: DEC
65701: ST_TO_ADDR
65702: LD_INT 4
65704: PUSH
65705: FOR_TO
65706: IFFALSE 65727
// SetSkill ( i , j , 10 ) ;
65708: LD_VAR 0 1
65712: PPUSH
65713: LD_VAR 0 3
65717: PPUSH
65718: LD_INT 10
65720: PPUSH
65721: CALL_OW 237
65725: GO 65705
65727: POP
65728: POP
65729: GO 65689
65731: POP
65732: POP
// end ;
65733: PPOPN 3
65735: END
// every 0 0$1 trigger s30 do var i , tmp ;
65736: LD_EXP 98
65740: IFFALSE 65809
65742: GO 65744
65744: DISABLE
65745: LD_INT 0
65747: PPUSH
65748: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65749: LD_ADDR_VAR 0 2
65753: PUSH
65754: LD_INT 22
65756: PUSH
65757: LD_OWVAR 2
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PPUSH
65766: CALL_OW 69
65770: ST_TO_ADDR
// if not tmp then
65771: LD_VAR 0 2
65775: NOT
65776: IFFALSE 65780
// exit ;
65778: GO 65809
// for i in tmp do
65780: LD_ADDR_VAR 0 1
65784: PUSH
65785: LD_VAR 0 2
65789: PUSH
65790: FOR_IN
65791: IFFALSE 65807
// SetLives ( i , 300 ) ;
65793: LD_VAR 0 1
65797: PPUSH
65798: LD_INT 300
65800: PPUSH
65801: CALL_OW 234
65805: GO 65790
65807: POP
65808: POP
// end ;
65809: PPOPN 2
65811: END
// every 0 0$1 trigger s60 do var i , tmp ;
65812: LD_EXP 99
65816: IFFALSE 65885
65818: GO 65820
65820: DISABLE
65821: LD_INT 0
65823: PPUSH
65824: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65825: LD_ADDR_VAR 0 2
65829: PUSH
65830: LD_INT 22
65832: PUSH
65833: LD_OWVAR 2
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PPUSH
65842: CALL_OW 69
65846: ST_TO_ADDR
// if not tmp then
65847: LD_VAR 0 2
65851: NOT
65852: IFFALSE 65856
// exit ;
65854: GO 65885
// for i in tmp do
65856: LD_ADDR_VAR 0 1
65860: PUSH
65861: LD_VAR 0 2
65865: PUSH
65866: FOR_IN
65867: IFFALSE 65883
// SetLives ( i , 600 ) ;
65869: LD_VAR 0 1
65873: PPUSH
65874: LD_INT 600
65876: PPUSH
65877: CALL_OW 234
65881: GO 65866
65883: POP
65884: POP
// end ;
65885: PPOPN 2
65887: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65888: LD_INT 0
65890: PPUSH
// case cmd of 301 :
65891: LD_VAR 0 1
65895: PUSH
65896: LD_INT 301
65898: DOUBLE
65899: EQUAL
65900: IFTRUE 65904
65902: GO 65936
65904: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
65905: LD_VAR 0 6
65909: PPUSH
65910: LD_VAR 0 7
65914: PPUSH
65915: LD_VAR 0 8
65919: PPUSH
65920: LD_VAR 0 4
65924: PPUSH
65925: LD_VAR 0 5
65929: PPUSH
65930: CALL 67145 0 5
65934: GO 66057
65936: LD_INT 302
65938: DOUBLE
65939: EQUAL
65940: IFTRUE 65944
65942: GO 65981
65944: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
65945: LD_VAR 0 6
65949: PPUSH
65950: LD_VAR 0 7
65954: PPUSH
65955: LD_VAR 0 8
65959: PPUSH
65960: LD_VAR 0 9
65964: PPUSH
65965: LD_VAR 0 4
65969: PPUSH
65970: LD_VAR 0 5
65974: PPUSH
65975: CALL 67236 0 6
65979: GO 66057
65981: LD_INT 303
65983: DOUBLE
65984: EQUAL
65985: IFTRUE 65989
65987: GO 66026
65989: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
65990: LD_VAR 0 6
65994: PPUSH
65995: LD_VAR 0 7
65999: PPUSH
66000: LD_VAR 0 8
66004: PPUSH
66005: LD_VAR 0 9
66009: PPUSH
66010: LD_VAR 0 4
66014: PPUSH
66015: LD_VAR 0 5
66019: PPUSH
66020: CALL 66062 0 6
66024: GO 66057
66026: LD_INT 304
66028: DOUBLE
66029: EQUAL
66030: IFTRUE 66034
66032: GO 66056
66034: POP
// hHackTeleport ( unit , x , y ) ; end ;
66035: LD_VAR 0 2
66039: PPUSH
66040: LD_VAR 0 4
66044: PPUSH
66045: LD_VAR 0 5
66049: PPUSH
66050: CALL 67829 0 3
66054: GO 66057
66056: POP
// end ;
66057: LD_VAR 0 12
66061: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
66062: LD_INT 0
66064: PPUSH
66065: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
66066: LD_VAR 0 1
66070: PUSH
66071: LD_INT 1
66073: LESS
66074: PUSH
66075: LD_VAR 0 1
66079: PUSH
66080: LD_INT 3
66082: GREATER
66083: OR
66084: PUSH
66085: LD_VAR 0 5
66089: PPUSH
66090: LD_VAR 0 6
66094: PPUSH
66095: CALL_OW 428
66099: OR
66100: IFFALSE 66104
// exit ;
66102: GO 66832
// uc_side := your_side ;
66104: LD_ADDR_OWVAR 20
66108: PUSH
66109: LD_OWVAR 2
66113: ST_TO_ADDR
// uc_nation := nation ;
66114: LD_ADDR_OWVAR 21
66118: PUSH
66119: LD_VAR 0 1
66123: ST_TO_ADDR
// bc_level = 1 ;
66124: LD_ADDR_OWVAR 43
66128: PUSH
66129: LD_INT 1
66131: ST_TO_ADDR
// case btype of 1 :
66132: LD_VAR 0 2
66136: PUSH
66137: LD_INT 1
66139: DOUBLE
66140: EQUAL
66141: IFTRUE 66145
66143: GO 66156
66145: POP
// bc_type := b_depot ; 2 :
66146: LD_ADDR_OWVAR 42
66150: PUSH
66151: LD_INT 0
66153: ST_TO_ADDR
66154: GO 66776
66156: LD_INT 2
66158: DOUBLE
66159: EQUAL
66160: IFTRUE 66164
66162: GO 66175
66164: POP
// bc_type := b_warehouse ; 3 :
66165: LD_ADDR_OWVAR 42
66169: PUSH
66170: LD_INT 1
66172: ST_TO_ADDR
66173: GO 66776
66175: LD_INT 3
66177: DOUBLE
66178: EQUAL
66179: IFTRUE 66183
66181: GO 66194
66183: POP
// bc_type := b_lab ; 4 .. 9 :
66184: LD_ADDR_OWVAR 42
66188: PUSH
66189: LD_INT 6
66191: ST_TO_ADDR
66192: GO 66776
66194: LD_INT 4
66196: DOUBLE
66197: GREATEREQUAL
66198: IFFALSE 66206
66200: LD_INT 9
66202: DOUBLE
66203: LESSEQUAL
66204: IFTRUE 66208
66206: GO 66268
66208: POP
// begin bc_type := b_lab_half ;
66209: LD_ADDR_OWVAR 42
66213: PUSH
66214: LD_INT 7
66216: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
66217: LD_ADDR_OWVAR 44
66221: PUSH
66222: LD_INT 10
66224: PUSH
66225: LD_INT 11
66227: PUSH
66228: LD_INT 12
66230: PUSH
66231: LD_INT 15
66233: PUSH
66234: LD_INT 14
66236: PUSH
66237: LD_INT 13
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: PUSH
66248: LD_VAR 0 2
66252: PUSH
66253: LD_INT 3
66255: MINUS
66256: ARRAY
66257: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
66258: LD_ADDR_OWVAR 45
66262: PUSH
66263: LD_INT 9
66265: ST_TO_ADDR
// end ; 10 .. 13 :
66266: GO 66776
66268: LD_INT 10
66270: DOUBLE
66271: GREATEREQUAL
66272: IFFALSE 66280
66274: LD_INT 13
66276: DOUBLE
66277: LESSEQUAL
66278: IFTRUE 66282
66280: GO 66359
66282: POP
// begin bc_type := b_lab_full ;
66283: LD_ADDR_OWVAR 42
66287: PUSH
66288: LD_INT 8
66290: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
66291: LD_ADDR_OWVAR 44
66295: PUSH
66296: LD_INT 10
66298: PUSH
66299: LD_INT 12
66301: PUSH
66302: LD_INT 14
66304: PUSH
66305: LD_INT 13
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: PUSH
66314: LD_VAR 0 2
66318: PUSH
66319: LD_INT 9
66321: MINUS
66322: ARRAY
66323: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
66324: LD_ADDR_OWVAR 45
66328: PUSH
66329: LD_INT 11
66331: PUSH
66332: LD_INT 15
66334: PUSH
66335: LD_INT 12
66337: PUSH
66338: LD_INT 15
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: PUSH
66347: LD_VAR 0 2
66351: PUSH
66352: LD_INT 9
66354: MINUS
66355: ARRAY
66356: ST_TO_ADDR
// end ; 14 :
66357: GO 66776
66359: LD_INT 14
66361: DOUBLE
66362: EQUAL
66363: IFTRUE 66367
66365: GO 66378
66367: POP
// bc_type := b_workshop ; 15 :
66368: LD_ADDR_OWVAR 42
66372: PUSH
66373: LD_INT 2
66375: ST_TO_ADDR
66376: GO 66776
66378: LD_INT 15
66380: DOUBLE
66381: EQUAL
66382: IFTRUE 66386
66384: GO 66397
66386: POP
// bc_type := b_factory ; 16 :
66387: LD_ADDR_OWVAR 42
66391: PUSH
66392: LD_INT 3
66394: ST_TO_ADDR
66395: GO 66776
66397: LD_INT 16
66399: DOUBLE
66400: EQUAL
66401: IFTRUE 66405
66403: GO 66416
66405: POP
// bc_type := b_ext_gun ; 17 :
66406: LD_ADDR_OWVAR 42
66410: PUSH
66411: LD_INT 17
66413: ST_TO_ADDR
66414: GO 66776
66416: LD_INT 17
66418: DOUBLE
66419: EQUAL
66420: IFTRUE 66424
66422: GO 66452
66424: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
66425: LD_ADDR_OWVAR 42
66429: PUSH
66430: LD_INT 19
66432: PUSH
66433: LD_INT 23
66435: PUSH
66436: LD_INT 19
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: LIST
66443: PUSH
66444: LD_VAR 0 1
66448: ARRAY
66449: ST_TO_ADDR
66450: GO 66776
66452: LD_INT 18
66454: DOUBLE
66455: EQUAL
66456: IFTRUE 66460
66458: GO 66471
66460: POP
// bc_type := b_ext_radar ; 19 :
66461: LD_ADDR_OWVAR 42
66465: PUSH
66466: LD_INT 20
66468: ST_TO_ADDR
66469: GO 66776
66471: LD_INT 19
66473: DOUBLE
66474: EQUAL
66475: IFTRUE 66479
66477: GO 66490
66479: POP
// bc_type := b_ext_radio ; 20 :
66480: LD_ADDR_OWVAR 42
66484: PUSH
66485: LD_INT 22
66487: ST_TO_ADDR
66488: GO 66776
66490: LD_INT 20
66492: DOUBLE
66493: EQUAL
66494: IFTRUE 66498
66496: GO 66509
66498: POP
// bc_type := b_ext_siberium ; 21 :
66499: LD_ADDR_OWVAR 42
66503: PUSH
66504: LD_INT 21
66506: ST_TO_ADDR
66507: GO 66776
66509: LD_INT 21
66511: DOUBLE
66512: EQUAL
66513: IFTRUE 66517
66515: GO 66528
66517: POP
// bc_type := b_ext_computer ; 22 :
66518: LD_ADDR_OWVAR 42
66522: PUSH
66523: LD_INT 24
66525: ST_TO_ADDR
66526: GO 66776
66528: LD_INT 22
66530: DOUBLE
66531: EQUAL
66532: IFTRUE 66536
66534: GO 66547
66536: POP
// bc_type := b_ext_track ; 23 :
66537: LD_ADDR_OWVAR 42
66541: PUSH
66542: LD_INT 16
66544: ST_TO_ADDR
66545: GO 66776
66547: LD_INT 23
66549: DOUBLE
66550: EQUAL
66551: IFTRUE 66555
66553: GO 66566
66555: POP
// bc_type := b_ext_laser ; 24 :
66556: LD_ADDR_OWVAR 42
66560: PUSH
66561: LD_INT 25
66563: ST_TO_ADDR
66564: GO 66776
66566: LD_INT 24
66568: DOUBLE
66569: EQUAL
66570: IFTRUE 66574
66572: GO 66585
66574: POP
// bc_type := b_control_tower ; 25 :
66575: LD_ADDR_OWVAR 42
66579: PUSH
66580: LD_INT 36
66582: ST_TO_ADDR
66583: GO 66776
66585: LD_INT 25
66587: DOUBLE
66588: EQUAL
66589: IFTRUE 66593
66591: GO 66604
66593: POP
// bc_type := b_breastwork ; 26 :
66594: LD_ADDR_OWVAR 42
66598: PUSH
66599: LD_INT 31
66601: ST_TO_ADDR
66602: GO 66776
66604: LD_INT 26
66606: DOUBLE
66607: EQUAL
66608: IFTRUE 66612
66610: GO 66623
66612: POP
// bc_type := b_bunker ; 27 :
66613: LD_ADDR_OWVAR 42
66617: PUSH
66618: LD_INT 32
66620: ST_TO_ADDR
66621: GO 66776
66623: LD_INT 27
66625: DOUBLE
66626: EQUAL
66627: IFTRUE 66631
66629: GO 66642
66631: POP
// bc_type := b_turret ; 28 :
66632: LD_ADDR_OWVAR 42
66636: PUSH
66637: LD_INT 33
66639: ST_TO_ADDR
66640: GO 66776
66642: LD_INT 28
66644: DOUBLE
66645: EQUAL
66646: IFTRUE 66650
66648: GO 66661
66650: POP
// bc_type := b_armoury ; 29 :
66651: LD_ADDR_OWVAR 42
66655: PUSH
66656: LD_INT 4
66658: ST_TO_ADDR
66659: GO 66776
66661: LD_INT 29
66663: DOUBLE
66664: EQUAL
66665: IFTRUE 66669
66667: GO 66680
66669: POP
// bc_type := b_barracks ; 30 :
66670: LD_ADDR_OWVAR 42
66674: PUSH
66675: LD_INT 5
66677: ST_TO_ADDR
66678: GO 66776
66680: LD_INT 30
66682: DOUBLE
66683: EQUAL
66684: IFTRUE 66688
66686: GO 66699
66688: POP
// bc_type := b_solar_power ; 31 :
66689: LD_ADDR_OWVAR 42
66693: PUSH
66694: LD_INT 27
66696: ST_TO_ADDR
66697: GO 66776
66699: LD_INT 31
66701: DOUBLE
66702: EQUAL
66703: IFTRUE 66707
66705: GO 66718
66707: POP
// bc_type := b_oil_power ; 32 :
66708: LD_ADDR_OWVAR 42
66712: PUSH
66713: LD_INT 26
66715: ST_TO_ADDR
66716: GO 66776
66718: LD_INT 32
66720: DOUBLE
66721: EQUAL
66722: IFTRUE 66726
66724: GO 66737
66726: POP
// bc_type := b_siberite_power ; 33 :
66727: LD_ADDR_OWVAR 42
66731: PUSH
66732: LD_INT 28
66734: ST_TO_ADDR
66735: GO 66776
66737: LD_INT 33
66739: DOUBLE
66740: EQUAL
66741: IFTRUE 66745
66743: GO 66756
66745: POP
// bc_type := b_oil_mine ; 34 :
66746: LD_ADDR_OWVAR 42
66750: PUSH
66751: LD_INT 29
66753: ST_TO_ADDR
66754: GO 66776
66756: LD_INT 34
66758: DOUBLE
66759: EQUAL
66760: IFTRUE 66764
66762: GO 66775
66764: POP
// bc_type := b_siberite_mine ; end ;
66765: LD_ADDR_OWVAR 42
66769: PUSH
66770: LD_INT 30
66772: ST_TO_ADDR
66773: GO 66776
66775: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
66776: LD_ADDR_VAR 0 8
66780: PUSH
66781: LD_VAR 0 5
66785: PPUSH
66786: LD_VAR 0 6
66790: PPUSH
66791: LD_VAR 0 3
66795: PPUSH
66796: CALL_OW 47
66800: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
66801: LD_OWVAR 42
66805: PUSH
66806: LD_INT 32
66808: PUSH
66809: LD_INT 33
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: IN
66816: IFFALSE 66832
// PlaceWeaponTurret ( b , weapon ) ;
66818: LD_VAR 0 8
66822: PPUSH
66823: LD_VAR 0 4
66827: PPUSH
66828: CALL_OW 431
// end ;
66832: LD_VAR 0 7
66836: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
66837: LD_INT 0
66839: PPUSH
66840: PPUSH
66841: PPUSH
66842: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66843: LD_ADDR_VAR 0 4
66847: PUSH
66848: LD_INT 22
66850: PUSH
66851: LD_OWVAR 2
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 2
66862: PUSH
66863: LD_INT 30
66865: PUSH
66866: LD_INT 0
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 30
66875: PUSH
66876: LD_INT 1
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: LIST
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PPUSH
66892: CALL_OW 69
66896: ST_TO_ADDR
// if not tmp then
66897: LD_VAR 0 4
66901: NOT
66902: IFFALSE 66906
// exit ;
66904: GO 66965
// for i in tmp do
66906: LD_ADDR_VAR 0 2
66910: PUSH
66911: LD_VAR 0 4
66915: PUSH
66916: FOR_IN
66917: IFFALSE 66963
// for j = 1 to 3 do
66919: LD_ADDR_VAR 0 3
66923: PUSH
66924: DOUBLE
66925: LD_INT 1
66927: DEC
66928: ST_TO_ADDR
66929: LD_INT 3
66931: PUSH
66932: FOR_TO
66933: IFFALSE 66959
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
66935: LD_VAR 0 2
66939: PPUSH
66940: CALL_OW 274
66944: PPUSH
66945: LD_VAR 0 3
66949: PPUSH
66950: LD_INT 99999
66952: PPUSH
66953: CALL_OW 277
66957: GO 66932
66959: POP
66960: POP
66961: GO 66916
66963: POP
66964: POP
// end ;
66965: LD_VAR 0 1
66969: RET
// export function hHackSetLevel10 ; var i , j ; begin
66970: LD_INT 0
66972: PPUSH
66973: PPUSH
66974: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
66975: LD_ADDR_VAR 0 2
66979: PUSH
66980: LD_INT 21
66982: PUSH
66983: LD_INT 1
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PPUSH
66990: CALL_OW 69
66994: PUSH
66995: FOR_IN
66996: IFFALSE 67048
// if IsSelected ( i ) then
66998: LD_VAR 0 2
67002: PPUSH
67003: CALL_OW 306
67007: IFFALSE 67046
// begin for j := 1 to 4 do
67009: LD_ADDR_VAR 0 3
67013: PUSH
67014: DOUBLE
67015: LD_INT 1
67017: DEC
67018: ST_TO_ADDR
67019: LD_INT 4
67021: PUSH
67022: FOR_TO
67023: IFFALSE 67044
// SetSkill ( i , j , 10 ) ;
67025: LD_VAR 0 2
67029: PPUSH
67030: LD_VAR 0 3
67034: PPUSH
67035: LD_INT 10
67037: PPUSH
67038: CALL_OW 237
67042: GO 67022
67044: POP
67045: POP
// end ;
67046: GO 66995
67048: POP
67049: POP
// end ;
67050: LD_VAR 0 1
67054: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
67055: LD_INT 0
67057: PPUSH
67058: PPUSH
67059: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
67060: LD_ADDR_VAR 0 2
67064: PUSH
67065: LD_INT 22
67067: PUSH
67068: LD_OWVAR 2
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 21
67079: PUSH
67080: LD_INT 1
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PPUSH
67091: CALL_OW 69
67095: PUSH
67096: FOR_IN
67097: IFFALSE 67138
// begin for j := 1 to 4 do
67099: LD_ADDR_VAR 0 3
67103: PUSH
67104: DOUBLE
67105: LD_INT 1
67107: DEC
67108: ST_TO_ADDR
67109: LD_INT 4
67111: PUSH
67112: FOR_TO
67113: IFFALSE 67134
// SetSkill ( i , j , 10 ) ;
67115: LD_VAR 0 2
67119: PPUSH
67120: LD_VAR 0 3
67124: PPUSH
67125: LD_INT 10
67127: PPUSH
67128: CALL_OW 237
67132: GO 67112
67134: POP
67135: POP
// end ;
67136: GO 67096
67138: POP
67139: POP
// end ;
67140: LD_VAR 0 1
67144: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
67145: LD_INT 0
67147: PPUSH
// uc_side := your_side ;
67148: LD_ADDR_OWVAR 20
67152: PUSH
67153: LD_OWVAR 2
67157: ST_TO_ADDR
// uc_nation := nation ;
67158: LD_ADDR_OWVAR 21
67162: PUSH
67163: LD_VAR 0 1
67167: ST_TO_ADDR
// InitHc ;
67168: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
67172: LD_INT 0
67174: PPUSH
67175: LD_VAR 0 2
67179: PPUSH
67180: LD_VAR 0 3
67184: PPUSH
67185: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
67189: LD_VAR 0 4
67193: PPUSH
67194: LD_VAR 0 5
67198: PPUSH
67199: CALL_OW 428
67203: PUSH
67204: LD_INT 0
67206: EQUAL
67207: IFFALSE 67231
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
67209: CALL_OW 44
67213: PPUSH
67214: LD_VAR 0 4
67218: PPUSH
67219: LD_VAR 0 5
67223: PPUSH
67224: LD_INT 1
67226: PPUSH
67227: CALL_OW 48
// end ;
67231: LD_VAR 0 6
67235: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
67236: LD_INT 0
67238: PPUSH
67239: PPUSH
// uc_side := your_side ;
67240: LD_ADDR_OWVAR 20
67244: PUSH
67245: LD_OWVAR 2
67249: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
67250: LD_VAR 0 1
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: LD_INT 2
67260: PUSH
67261: LD_INT 3
67263: PUSH
67264: LD_INT 4
67266: PUSH
67267: LD_INT 5
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: IN
67277: IFFALSE 67289
// uc_nation := nation_american else
67279: LD_ADDR_OWVAR 21
67283: PUSH
67284: LD_INT 1
67286: ST_TO_ADDR
67287: GO 67332
// if chassis in [ 11 , 12 , 13 , 14 ] then
67289: LD_VAR 0 1
67293: PUSH
67294: LD_INT 11
67296: PUSH
67297: LD_INT 12
67299: PUSH
67300: LD_INT 13
67302: PUSH
67303: LD_INT 14
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: IN
67312: IFFALSE 67324
// uc_nation := nation_arabian else
67314: LD_ADDR_OWVAR 21
67318: PUSH
67319: LD_INT 2
67321: ST_TO_ADDR
67322: GO 67332
// uc_nation := nation_russian ;
67324: LD_ADDR_OWVAR 21
67328: PUSH
67329: LD_INT 3
67331: ST_TO_ADDR
// vc_chassis := chassis ;
67332: LD_ADDR_OWVAR 37
67336: PUSH
67337: LD_VAR 0 1
67341: ST_TO_ADDR
// vc_engine := engine ;
67342: LD_ADDR_OWVAR 39
67346: PUSH
67347: LD_VAR 0 2
67351: ST_TO_ADDR
// vc_control := control ;
67352: LD_ADDR_OWVAR 38
67356: PUSH
67357: LD_VAR 0 3
67361: ST_TO_ADDR
// vc_weapon := weapon ;
67362: LD_ADDR_OWVAR 40
67366: PUSH
67367: LD_VAR 0 4
67371: ST_TO_ADDR
// un := CreateVehicle ;
67372: LD_ADDR_VAR 0 8
67376: PUSH
67377: CALL_OW 45
67381: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
67382: LD_VAR 0 8
67386: PPUSH
67387: LD_INT 0
67389: PPUSH
67390: LD_INT 5
67392: PPUSH
67393: CALL_OW 12
67397: PPUSH
67398: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
67402: LD_VAR 0 8
67406: PPUSH
67407: LD_VAR 0 5
67411: PPUSH
67412: LD_VAR 0 6
67416: PPUSH
67417: LD_INT 1
67419: PPUSH
67420: CALL_OW 48
// end ;
67424: LD_VAR 0 7
67428: RET
// export hInvincible ; every 1 do
67429: GO 67431
67431: DISABLE
// hInvincible := [ ] ;
67432: LD_ADDR_EXP 100
67436: PUSH
67437: EMPTY
67438: ST_TO_ADDR
67439: END
// every 10 do var i ;
67440: GO 67442
67442: DISABLE
67443: LD_INT 0
67445: PPUSH
// begin enable ;
67446: ENABLE
// if not hInvincible then
67447: LD_EXP 100
67451: NOT
67452: IFFALSE 67456
// exit ;
67454: GO 67500
// for i in hInvincible do
67456: LD_ADDR_VAR 0 1
67460: PUSH
67461: LD_EXP 100
67465: PUSH
67466: FOR_IN
67467: IFFALSE 67498
// if GetLives ( i ) < 1000 then
67469: LD_VAR 0 1
67473: PPUSH
67474: CALL_OW 256
67478: PUSH
67479: LD_INT 1000
67481: LESS
67482: IFFALSE 67496
// SetLives ( i , 1000 ) ;
67484: LD_VAR 0 1
67488: PPUSH
67489: LD_INT 1000
67491: PPUSH
67492: CALL_OW 234
67496: GO 67466
67498: POP
67499: POP
// end ;
67500: PPOPN 1
67502: END
// export function hHackInvincible ; var i ; begin
67503: LD_INT 0
67505: PPUSH
67506: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
67507: LD_ADDR_VAR 0 2
67511: PUSH
67512: LD_INT 2
67514: PUSH
67515: LD_INT 21
67517: PUSH
67518: LD_INT 1
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 21
67527: PUSH
67528: LD_INT 2
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: LIST
67539: PPUSH
67540: CALL_OW 69
67544: PUSH
67545: FOR_IN
67546: IFFALSE 67607
// if IsSelected ( i ) then
67548: LD_VAR 0 2
67552: PPUSH
67553: CALL_OW 306
67557: IFFALSE 67605
// begin if i in hInvincible then
67559: LD_VAR 0 2
67563: PUSH
67564: LD_EXP 100
67568: IN
67569: IFFALSE 67589
// hInvincible := hInvincible diff i else
67571: LD_ADDR_EXP 100
67575: PUSH
67576: LD_EXP 100
67580: PUSH
67581: LD_VAR 0 2
67585: DIFF
67586: ST_TO_ADDR
67587: GO 67605
// hInvincible := hInvincible union i ;
67589: LD_ADDR_EXP 100
67593: PUSH
67594: LD_EXP 100
67598: PUSH
67599: LD_VAR 0 2
67603: UNION
67604: ST_TO_ADDR
// end ;
67605: GO 67545
67607: POP
67608: POP
// end ;
67609: LD_VAR 0 1
67613: RET
// export function hHackInvisible ; var i , j ; begin
67614: LD_INT 0
67616: PPUSH
67617: PPUSH
67618: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67619: LD_ADDR_VAR 0 2
67623: PUSH
67624: LD_INT 21
67626: PUSH
67627: LD_INT 1
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PPUSH
67634: CALL_OW 69
67638: PUSH
67639: FOR_IN
67640: IFFALSE 67664
// if IsSelected ( i ) then
67642: LD_VAR 0 2
67646: PPUSH
67647: CALL_OW 306
67651: IFFALSE 67662
// ComForceInvisible ( i ) ;
67653: LD_VAR 0 2
67657: PPUSH
67658: CALL_OW 496
67662: GO 67639
67664: POP
67665: POP
// end ;
67666: LD_VAR 0 1
67670: RET
// export function hHackChangeYourSide ; begin
67671: LD_INT 0
67673: PPUSH
// if your_side = 8 then
67674: LD_OWVAR 2
67678: PUSH
67679: LD_INT 8
67681: EQUAL
67682: IFFALSE 67694
// your_side := 0 else
67684: LD_ADDR_OWVAR 2
67688: PUSH
67689: LD_INT 0
67691: ST_TO_ADDR
67692: GO 67708
// your_side := your_side + 1 ;
67694: LD_ADDR_OWVAR 2
67698: PUSH
67699: LD_OWVAR 2
67703: PUSH
67704: LD_INT 1
67706: PLUS
67707: ST_TO_ADDR
// end ;
67708: LD_VAR 0 1
67712: RET
// export function hHackChangeUnitSide ; var i , j ; begin
67713: LD_INT 0
67715: PPUSH
67716: PPUSH
67717: PPUSH
// for i in all_units do
67718: LD_ADDR_VAR 0 2
67722: PUSH
67723: LD_OWVAR 3
67727: PUSH
67728: FOR_IN
67729: IFFALSE 67807
// if IsSelected ( i ) then
67731: LD_VAR 0 2
67735: PPUSH
67736: CALL_OW 306
67740: IFFALSE 67805
// begin j := GetSide ( i ) ;
67742: LD_ADDR_VAR 0 3
67746: PUSH
67747: LD_VAR 0 2
67751: PPUSH
67752: CALL_OW 255
67756: ST_TO_ADDR
// if j = 8 then
67757: LD_VAR 0 3
67761: PUSH
67762: LD_INT 8
67764: EQUAL
67765: IFFALSE 67777
// j := 0 else
67767: LD_ADDR_VAR 0 3
67771: PUSH
67772: LD_INT 0
67774: ST_TO_ADDR
67775: GO 67791
// j := j + 1 ;
67777: LD_ADDR_VAR 0 3
67781: PUSH
67782: LD_VAR 0 3
67786: PUSH
67787: LD_INT 1
67789: PLUS
67790: ST_TO_ADDR
// SetSide ( i , j ) ;
67791: LD_VAR 0 2
67795: PPUSH
67796: LD_VAR 0 3
67800: PPUSH
67801: CALL_OW 235
// end ;
67805: GO 67728
67807: POP
67808: POP
// end ;
67809: LD_VAR 0 1
67813: RET
// export function hHackFog ; begin
67814: LD_INT 0
67816: PPUSH
// FogOff ( true ) ;
67817: LD_INT 1
67819: PPUSH
67820: CALL_OW 344
// end ;
67824: LD_VAR 0 1
67828: RET
// export function hHackTeleport ( unit , x , y ) ; begin
67829: LD_INT 0
67831: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
67832: LD_VAR 0 1
67836: PPUSH
67837: LD_VAR 0 2
67841: PPUSH
67842: LD_VAR 0 3
67846: PPUSH
67847: LD_INT 1
67849: PPUSH
67850: LD_INT 1
67852: PPUSH
67853: CALL_OW 483
// CenterOnXY ( x , y ) ;
67857: LD_VAR 0 2
67861: PPUSH
67862: LD_VAR 0 3
67866: PPUSH
67867: CALL_OW 84
// end ;
67871: LD_VAR 0 4
67875: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
67876: LD_INT 0
67878: PPUSH
67879: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
67880: LD_VAR 0 1
67884: NOT
67885: PUSH
67886: LD_VAR 0 2
67890: PPUSH
67891: LD_VAR 0 3
67895: PPUSH
67896: CALL_OW 488
67900: NOT
67901: OR
67902: PUSH
67903: LD_VAR 0 1
67907: PPUSH
67908: CALL_OW 266
67912: PUSH
67913: LD_INT 3
67915: NONEQUAL
67916: PUSH
67917: LD_VAR 0 1
67921: PPUSH
67922: CALL_OW 247
67926: PUSH
67927: LD_INT 1
67929: EQUAL
67930: NOT
67931: AND
67932: OR
67933: IFFALSE 67937
// exit ;
67935: GO 68086
// if GetType ( factory ) = unit_human then
67937: LD_VAR 0 1
67941: PPUSH
67942: CALL_OW 247
67946: PUSH
67947: LD_INT 1
67949: EQUAL
67950: IFFALSE 67967
// factory := IsInUnit ( factory ) ;
67952: LD_ADDR_VAR 0 1
67956: PUSH
67957: LD_VAR 0 1
67961: PPUSH
67962: CALL_OW 310
67966: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
67967: LD_VAR 0 1
67971: PPUSH
67972: CALL_OW 266
67976: PUSH
67977: LD_INT 3
67979: NONEQUAL
67980: IFFALSE 67984
// exit ;
67982: GO 68086
// if HexInfo ( x , y ) = factory then
67984: LD_VAR 0 2
67988: PPUSH
67989: LD_VAR 0 3
67993: PPUSH
67994: CALL_OW 428
67998: PUSH
67999: LD_VAR 0 1
68003: EQUAL
68004: IFFALSE 68031
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
68006: LD_ADDR_EXP 101
68010: PUSH
68011: LD_EXP 101
68015: PPUSH
68016: LD_VAR 0 1
68020: PPUSH
68021: LD_INT 0
68023: PPUSH
68024: CALL_OW 1
68028: ST_TO_ADDR
68029: GO 68082
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
68031: LD_ADDR_EXP 101
68035: PUSH
68036: LD_EXP 101
68040: PPUSH
68041: LD_VAR 0 1
68045: PPUSH
68046: LD_VAR 0 1
68050: PPUSH
68051: CALL_OW 255
68055: PUSH
68056: LD_VAR 0 1
68060: PUSH
68061: LD_VAR 0 2
68065: PUSH
68066: LD_VAR 0 3
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: PPUSH
68077: CALL_OW 1
68081: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68082: CALL 68091 0 0
// end ;
68086: LD_VAR 0 4
68090: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
68091: LD_INT 0
68093: PPUSH
68094: PPUSH
68095: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
68096: LD_STRING resetFactoryWaypoint();
68098: PPUSH
68099: CALL_OW 559
// if factoryWaypoints then
68103: LD_EXP 101
68107: IFFALSE 68233
// begin list := PrepareArray ( factoryWaypoints ) ;
68109: LD_ADDR_VAR 0 3
68113: PUSH
68114: LD_EXP 101
68118: PPUSH
68119: CALL 44261 0 1
68123: ST_TO_ADDR
// for i := 1 to list do
68124: LD_ADDR_VAR 0 2
68128: PUSH
68129: DOUBLE
68130: LD_INT 1
68132: DEC
68133: ST_TO_ADDR
68134: LD_VAR 0 3
68138: PUSH
68139: FOR_TO
68140: IFFALSE 68231
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68142: LD_STRING setFactoryWaypointXY(
68144: PUSH
68145: LD_VAR 0 3
68149: PUSH
68150: LD_VAR 0 2
68154: ARRAY
68155: PUSH
68156: LD_INT 1
68158: ARRAY
68159: STR
68160: PUSH
68161: LD_STRING ,
68163: STR
68164: PUSH
68165: LD_VAR 0 3
68169: PUSH
68170: LD_VAR 0 2
68174: ARRAY
68175: PUSH
68176: LD_INT 2
68178: ARRAY
68179: STR
68180: PUSH
68181: LD_STRING ,
68183: STR
68184: PUSH
68185: LD_VAR 0 3
68189: PUSH
68190: LD_VAR 0 2
68194: ARRAY
68195: PUSH
68196: LD_INT 3
68198: ARRAY
68199: STR
68200: PUSH
68201: LD_STRING ,
68203: STR
68204: PUSH
68205: LD_VAR 0 3
68209: PUSH
68210: LD_VAR 0 2
68214: ARRAY
68215: PUSH
68216: LD_INT 4
68218: ARRAY
68219: STR
68220: PUSH
68221: LD_STRING )
68223: STR
68224: PPUSH
68225: CALL_OW 559
68229: GO 68139
68231: POP
68232: POP
// end ; end ;
68233: LD_VAR 0 1
68237: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
68238: LD_INT 0
68240: PPUSH
// if HexInfo ( x , y ) = warehouse then
68241: LD_VAR 0 2
68245: PPUSH
68246: LD_VAR 0 3
68250: PPUSH
68251: CALL_OW 428
68255: PUSH
68256: LD_VAR 0 1
68260: EQUAL
68261: IFFALSE 68288
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
68263: LD_ADDR_EXP 102
68267: PUSH
68268: LD_EXP 102
68272: PPUSH
68273: LD_VAR 0 1
68277: PPUSH
68278: LD_INT 0
68280: PPUSH
68281: CALL_OW 1
68285: ST_TO_ADDR
68286: GO 68339
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
68288: LD_ADDR_EXP 102
68292: PUSH
68293: LD_EXP 102
68297: PPUSH
68298: LD_VAR 0 1
68302: PPUSH
68303: LD_VAR 0 1
68307: PPUSH
68308: CALL_OW 255
68312: PUSH
68313: LD_VAR 0 1
68317: PUSH
68318: LD_VAR 0 2
68322: PUSH
68323: LD_VAR 0 3
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: PPUSH
68334: CALL_OW 1
68338: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
68339: CALL 68348 0 0
// end ;
68343: LD_VAR 0 4
68347: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
68348: LD_INT 0
68350: PPUSH
68351: PPUSH
68352: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
68353: LD_STRING resetWarehouseGatheringPoints();
68355: PPUSH
68356: CALL_OW 559
// if warehouseGatheringPoints then
68360: LD_EXP 102
68364: IFFALSE 68490
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
68366: LD_ADDR_VAR 0 3
68370: PUSH
68371: LD_EXP 102
68375: PPUSH
68376: CALL 44261 0 1
68380: ST_TO_ADDR
// for i := 1 to list do
68381: LD_ADDR_VAR 0 2
68385: PUSH
68386: DOUBLE
68387: LD_INT 1
68389: DEC
68390: ST_TO_ADDR
68391: LD_VAR 0 3
68395: PUSH
68396: FOR_TO
68397: IFFALSE 68488
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68399: LD_STRING setWarehouseGatheringPointXY(
68401: PUSH
68402: LD_VAR 0 3
68406: PUSH
68407: LD_VAR 0 2
68411: ARRAY
68412: PUSH
68413: LD_INT 1
68415: ARRAY
68416: STR
68417: PUSH
68418: LD_STRING ,
68420: STR
68421: PUSH
68422: LD_VAR 0 3
68426: PUSH
68427: LD_VAR 0 2
68431: ARRAY
68432: PUSH
68433: LD_INT 2
68435: ARRAY
68436: STR
68437: PUSH
68438: LD_STRING ,
68440: STR
68441: PUSH
68442: LD_VAR 0 3
68446: PUSH
68447: LD_VAR 0 2
68451: ARRAY
68452: PUSH
68453: LD_INT 3
68455: ARRAY
68456: STR
68457: PUSH
68458: LD_STRING ,
68460: STR
68461: PUSH
68462: LD_VAR 0 3
68466: PUSH
68467: LD_VAR 0 2
68471: ARRAY
68472: PUSH
68473: LD_INT 4
68475: ARRAY
68476: STR
68477: PUSH
68478: LD_STRING )
68480: STR
68481: PPUSH
68482: CALL_OW 559
68486: GO 68396
68488: POP
68489: POP
// end ; end ;
68490: LD_VAR 0 1
68494: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
68495: LD_EXP 102
68499: IFFALSE 69184
68501: GO 68503
68503: DISABLE
68504: LD_INT 0
68506: PPUSH
68507: PPUSH
68508: PPUSH
68509: PPUSH
68510: PPUSH
68511: PPUSH
68512: PPUSH
68513: PPUSH
68514: PPUSH
// begin enable ;
68515: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
68516: LD_ADDR_VAR 0 3
68520: PUSH
68521: LD_EXP 102
68525: PPUSH
68526: CALL 44261 0 1
68530: ST_TO_ADDR
// if not list then
68531: LD_VAR 0 3
68535: NOT
68536: IFFALSE 68540
// exit ;
68538: GO 69184
// for i := 1 to list do
68540: LD_ADDR_VAR 0 1
68544: PUSH
68545: DOUBLE
68546: LD_INT 1
68548: DEC
68549: ST_TO_ADDR
68550: LD_VAR 0 3
68554: PUSH
68555: FOR_TO
68556: IFFALSE 69182
// begin depot := list [ i ] [ 2 ] ;
68558: LD_ADDR_VAR 0 8
68562: PUSH
68563: LD_VAR 0 3
68567: PUSH
68568: LD_VAR 0 1
68572: ARRAY
68573: PUSH
68574: LD_INT 2
68576: ARRAY
68577: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
68578: LD_ADDR_VAR 0 5
68582: PUSH
68583: LD_VAR 0 3
68587: PUSH
68588: LD_VAR 0 1
68592: ARRAY
68593: PUSH
68594: LD_INT 1
68596: ARRAY
68597: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
68598: LD_VAR 0 8
68602: PPUSH
68603: CALL_OW 301
68607: PUSH
68608: LD_VAR 0 5
68612: PUSH
68613: LD_VAR 0 8
68617: PPUSH
68618: CALL_OW 255
68622: NONEQUAL
68623: OR
68624: IFFALSE 68653
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
68626: LD_ADDR_EXP 102
68630: PUSH
68631: LD_EXP 102
68635: PPUSH
68636: LD_VAR 0 8
68640: PPUSH
68641: LD_INT 0
68643: PPUSH
68644: CALL_OW 1
68648: ST_TO_ADDR
// exit ;
68649: POP
68650: POP
68651: GO 69184
// end ; x := list [ i ] [ 3 ] ;
68653: LD_ADDR_VAR 0 6
68657: PUSH
68658: LD_VAR 0 3
68662: PUSH
68663: LD_VAR 0 1
68667: ARRAY
68668: PUSH
68669: LD_INT 3
68671: ARRAY
68672: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
68673: LD_ADDR_VAR 0 7
68677: PUSH
68678: LD_VAR 0 3
68682: PUSH
68683: LD_VAR 0 1
68687: ARRAY
68688: PUSH
68689: LD_INT 4
68691: ARRAY
68692: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
68693: LD_ADDR_VAR 0 9
68697: PUSH
68698: LD_VAR 0 6
68702: PPUSH
68703: LD_VAR 0 7
68707: PPUSH
68708: LD_INT 16
68710: PPUSH
68711: CALL 42845 0 3
68715: ST_TO_ADDR
// if not cratesNearbyPoint then
68716: LD_VAR 0 9
68720: NOT
68721: IFFALSE 68727
// exit ;
68723: POP
68724: POP
68725: GO 69184
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
68727: LD_ADDR_VAR 0 4
68731: PUSH
68732: LD_INT 22
68734: PUSH
68735: LD_VAR 0 5
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 3
68746: PUSH
68747: LD_INT 60
68749: PUSH
68750: EMPTY
68751: LIST
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 91
68759: PUSH
68760: LD_VAR 0 8
68764: PUSH
68765: LD_INT 6
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 2
68775: PUSH
68776: LD_INT 25
68778: PUSH
68779: LD_INT 2
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 25
68788: PUSH
68789: LD_INT 16
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: LIST
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: PPUSH
68807: CALL_OW 69
68811: PUSH
68812: LD_VAR 0 8
68816: PPUSH
68817: CALL_OW 313
68821: PPUSH
68822: LD_INT 3
68824: PUSH
68825: LD_INT 60
68827: PUSH
68828: EMPTY
68829: LIST
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 2
68837: PUSH
68838: LD_INT 25
68840: PUSH
68841: LD_INT 2
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 25
68850: PUSH
68851: LD_INT 16
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: LIST
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PPUSH
68867: CALL_OW 72
68871: UNION
68872: ST_TO_ADDR
// if tmp then
68873: LD_VAR 0 4
68877: IFFALSE 68957
// begin tmp := ShrinkArray ( tmp , 3 ) ;
68879: LD_ADDR_VAR 0 4
68883: PUSH
68884: LD_VAR 0 4
68888: PPUSH
68889: LD_INT 3
68891: PPUSH
68892: CALL 40814 0 2
68896: ST_TO_ADDR
// for j in tmp do
68897: LD_ADDR_VAR 0 2
68901: PUSH
68902: LD_VAR 0 4
68906: PUSH
68907: FOR_IN
68908: IFFALSE 68951
// begin if IsInUnit ( j ) then
68910: LD_VAR 0 2
68914: PPUSH
68915: CALL_OW 310
68919: IFFALSE 68930
// ComExit ( j ) ;
68921: LD_VAR 0 2
68925: PPUSH
68926: CALL 40897 0 1
// AddComCollect ( j , x , y ) ;
68930: LD_VAR 0 2
68934: PPUSH
68935: LD_VAR 0 6
68939: PPUSH
68940: LD_VAR 0 7
68944: PPUSH
68945: CALL_OW 177
// end ;
68949: GO 68907
68951: POP
68952: POP
// exit ;
68953: POP
68954: POP
68955: GO 69184
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
68957: LD_ADDR_VAR 0 4
68961: PUSH
68962: LD_INT 22
68964: PUSH
68965: LD_VAR 0 5
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 91
68976: PUSH
68977: LD_VAR 0 8
68981: PUSH
68982: LD_INT 8
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 2
68992: PUSH
68993: LD_INT 34
68995: PUSH
68996: LD_INT 12
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 34
69005: PUSH
69006: LD_INT 51
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_INT 34
69015: PUSH
69016: LD_INT 32
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PUSH
69023: LD_INT 34
69025: PUSH
69026: LD_INT 89
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: LIST
69044: PPUSH
69045: CALL_OW 69
69049: ST_TO_ADDR
// if tmp then
69050: LD_VAR 0 4
69054: IFFALSE 69180
// begin for j in tmp do
69056: LD_ADDR_VAR 0 2
69060: PUSH
69061: LD_VAR 0 4
69065: PUSH
69066: FOR_IN
69067: IFFALSE 69178
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
69069: LD_VAR 0 2
69073: PPUSH
69074: CALL_OW 262
69078: PUSH
69079: LD_INT 3
69081: EQUAL
69082: PUSH
69083: LD_VAR 0 2
69087: PPUSH
69088: CALL_OW 261
69092: PUSH
69093: LD_INT 20
69095: GREATER
69096: OR
69097: PUSH
69098: LD_VAR 0 2
69102: PPUSH
69103: CALL_OW 314
69107: NOT
69108: AND
69109: PUSH
69110: LD_VAR 0 2
69114: PPUSH
69115: CALL_OW 263
69119: PUSH
69120: LD_INT 1
69122: NONEQUAL
69123: PUSH
69124: LD_VAR 0 2
69128: PPUSH
69129: CALL_OW 311
69133: OR
69134: AND
69135: IFFALSE 69176
// begin ComCollect ( j , x , y ) ;
69137: LD_VAR 0 2
69141: PPUSH
69142: LD_VAR 0 6
69146: PPUSH
69147: LD_VAR 0 7
69151: PPUSH
69152: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
69156: LD_VAR 0 2
69160: PPUSH
69161: LD_VAR 0 8
69165: PPUSH
69166: CALL_OW 172
// exit ;
69170: POP
69171: POP
69172: POP
69173: POP
69174: GO 69184
// end ;
69176: GO 69066
69178: POP
69179: POP
// end ; end ;
69180: GO 68555
69182: POP
69183: POP
// end ; end_of_file
69184: PPOPN 9
69186: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69187: LD_VAR 0 1
69191: PUSH
69192: LD_INT 200
69194: DOUBLE
69195: GREATEREQUAL
69196: IFFALSE 69204
69198: LD_INT 299
69200: DOUBLE
69201: LESSEQUAL
69202: IFTRUE 69206
69204: GO 69238
69206: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69207: LD_VAR 0 1
69211: PPUSH
69212: LD_VAR 0 2
69216: PPUSH
69217: LD_VAR 0 3
69221: PPUSH
69222: LD_VAR 0 4
69226: PPUSH
69227: LD_VAR 0 5
69231: PPUSH
69232: CALL 69892 0 5
69236: GO 69315
69238: LD_INT 300
69240: DOUBLE
69241: GREATEREQUAL
69242: IFFALSE 69250
69244: LD_INT 399
69246: DOUBLE
69247: LESSEQUAL
69248: IFTRUE 69252
69250: GO 69314
69252: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69253: LD_VAR 0 1
69257: PPUSH
69258: LD_VAR 0 2
69262: PPUSH
69263: LD_VAR 0 3
69267: PPUSH
69268: LD_VAR 0 4
69272: PPUSH
69273: LD_VAR 0 5
69277: PPUSH
69278: LD_VAR 0 6
69282: PPUSH
69283: LD_VAR 0 7
69287: PPUSH
69288: LD_VAR 0 8
69292: PPUSH
69293: LD_VAR 0 9
69297: PPUSH
69298: LD_VAR 0 10
69302: PPUSH
69303: LD_VAR 0 11
69307: PPUSH
69308: CALL 65888 0 11
69312: GO 69315
69314: POP
// end ;
69315: PPOPN 11
69317: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69318: LD_VAR 0 1
69322: PPUSH
69323: LD_VAR 0 2
69327: PPUSH
69328: LD_VAR 0 3
69332: PPUSH
69333: LD_VAR 0 4
69337: PPUSH
69338: LD_VAR 0 5
69342: PPUSH
69343: CALL 69400 0 5
// end ; end_of_file
69347: PPOPN 5
69349: END
// export function SOS_UnitDestroyed ( un ) ; begin
69350: LD_INT 0
69352: PPUSH
// ComRadiation ( un ) ;
69353: LD_VAR 0 1
69357: PPUSH
69358: CALL 70296 0 1
// end ;
69362: LD_VAR 0 2
69366: RET
// export function SOS_UnitKamikazed ( un ) ; begin
69367: LD_INT 0
69369: PPUSH
// ComRadiation ( un ) ;
69370: LD_VAR 0 1
69374: PPUSH
69375: CALL 70296 0 1
// end ;
69379: LD_VAR 0 2
69383: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
69384: LD_INT 0
69386: PPUSH
// end ;
69387: LD_VAR 0 4
69391: RET
// export function SOS_Command ( cmd ) ; begin
69392: LD_INT 0
69394: PPUSH
// end ;
69395: LD_VAR 0 2
69399: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
69400: LD_INT 0
69402: PPUSH
// end ;
69403: LD_VAR 0 6
69407: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver , hex ; begin
69408: LD_INT 0
69410: PPUSH
69411: PPUSH
69412: PPUSH
69413: PPUSH
// if not vehicle or not factory then
69414: LD_VAR 0 1
69418: NOT
69419: PUSH
69420: LD_VAR 0 2
69424: NOT
69425: OR
69426: IFFALSE 69430
// exit ;
69428: GO 69887
// if factoryWaypoints >= factory then
69430: LD_EXP 101
69434: PUSH
69435: LD_VAR 0 2
69439: GREATEREQUAL
69440: IFFALSE 69887
// if factoryWaypoints [ factory ] then
69442: LD_EXP 101
69446: PUSH
69447: LD_VAR 0 2
69451: ARRAY
69452: IFFALSE 69887
// begin if GetControl ( vehicle ) = control_manual then
69454: LD_VAR 0 1
69458: PPUSH
69459: CALL_OW 263
69463: PUSH
69464: LD_INT 1
69466: EQUAL
69467: IFFALSE 69774
// begin driver := IsDrivenBy ( vehicle ) ;
69469: LD_ADDR_VAR 0 5
69473: PUSH
69474: LD_VAR 0 1
69478: PPUSH
69479: CALL_OW 311
69483: ST_TO_ADDR
// tag := GetTag ( driver ) ;
69484: LD_ADDR_VAR 0 4
69488: PUSH
69489: LD_VAR 0 5
69493: PPUSH
69494: CALL_OW 110
69498: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
69499: LD_VAR 0 4
69503: PUSH
69504: LD_INT 501
69506: EQUAL
69507: PUSH
69508: LD_VAR 0 1
69512: PPUSH
69513: CALL_OW 110
69517: PUSH
69518: LD_INT 501
69520: EQUAL
69521: OR
69522: IFFALSE 69526
// exit ;
69524: GO 69887
// if not HasTask ( driver ) then
69526: LD_VAR 0 5
69530: PPUSH
69531: CALL_OW 314
69535: NOT
69536: IFFALSE 69772
// begin SetTag ( driver , tDriver ) ;
69538: LD_VAR 0 5
69542: PPUSH
69543: LD_INT 501
69545: PPUSH
69546: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
69550: LD_VAR 0 1
69554: PPUSH
69555: LD_INT 501
69557: PPUSH
69558: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69562: LD_ADDR_VAR 0 6
69566: PUSH
69567: LD_EXP 101
69571: PUSH
69572: LD_VAR 0 2
69576: ARRAY
69577: PUSH
69578: LD_INT 3
69580: ARRAY
69581: PPUSH
69582: LD_EXP 101
69586: PUSH
69587: LD_VAR 0 2
69591: ARRAY
69592: PUSH
69593: LD_INT 4
69595: ARRAY
69596: PPUSH
69597: CALL_OW 428
69601: ST_TO_ADDR
// if hex then
69602: LD_VAR 0 6
69606: IFFALSE 69624
// ComMoveUnit ( driver , hex ) else
69608: LD_VAR 0 5
69612: PPUSH
69613: LD_VAR 0 6
69617: PPUSH
69618: CALL_OW 112
69622: GO 69663
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69624: LD_VAR 0 5
69628: PPUSH
69629: LD_EXP 101
69633: PUSH
69634: LD_VAR 0 2
69638: ARRAY
69639: PUSH
69640: LD_INT 3
69642: ARRAY
69643: PPUSH
69644: LD_EXP 101
69648: PUSH
69649: LD_VAR 0 2
69653: ARRAY
69654: PUSH
69655: LD_INT 4
69657: ARRAY
69658: PPUSH
69659: CALL_OW 111
// AddComExitVehicle ( driver ) ;
69663: LD_VAR 0 5
69667: PPUSH
69668: CALL_OW 181
// if Multiplayer then
69672: LD_OWVAR 4
69676: IFFALSE 69725
// begin repeat wait ( 10 ) ;
69678: LD_INT 10
69680: PPUSH
69681: CALL_OW 67
// until not IsInUnit ( driver ) ;
69685: LD_VAR 0 5
69689: PPUSH
69690: CALL_OW 310
69694: NOT
69695: IFFALSE 69678
// if not HasTask ( driver ) then
69697: LD_VAR 0 5
69701: PPUSH
69702: CALL_OW 314
69706: NOT
69707: IFFALSE 69723
// ComEnterUnit ( driver , factory ) ;
69709: LD_VAR 0 5
69713: PPUSH
69714: LD_VAR 0 2
69718: PPUSH
69719: CALL_OW 120
// end else
69723: GO 69739
// AddComEnterUnit ( driver , factory ) ;
69725: LD_VAR 0 5
69729: PPUSH
69730: LD_VAR 0 2
69734: PPUSH
69735: CALL_OW 180
// wait ( 0 0$1 ) ;
69739: LD_INT 35
69741: PPUSH
69742: CALL_OW 67
// SetTag ( driver , tag ) ;
69746: LD_VAR 0 5
69750: PPUSH
69751: LD_VAR 0 4
69755: PPUSH
69756: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
69760: LD_VAR 0 1
69764: PPUSH
69765: LD_INT 0
69767: PPUSH
69768: CALL_OW 109
// end ; end else
69772: GO 69887
// if GetControl ( vehicle ) = control_remote then
69774: LD_VAR 0 1
69778: PPUSH
69779: CALL_OW 263
69783: PUSH
69784: LD_INT 2
69786: EQUAL
69787: IFFALSE 69848
// begin wait ( 0 0$2 ) ;
69789: LD_INT 70
69791: PPUSH
69792: CALL_OW 67
// if Connect ( vehicle ) then
69796: LD_VAR 0 1
69800: PPUSH
69801: CALL 11116 0 1
69805: IFFALSE 69846
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69807: LD_VAR 0 1
69811: PPUSH
69812: LD_EXP 101
69816: PUSH
69817: LD_VAR 0 2
69821: ARRAY
69822: PUSH
69823: LD_INT 3
69825: ARRAY
69826: PPUSH
69827: LD_EXP 101
69831: PUSH
69832: LD_VAR 0 2
69836: ARRAY
69837: PUSH
69838: LD_INT 4
69840: ARRAY
69841: PPUSH
69842: CALL_OW 171
// end else
69846: GO 69887
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69848: LD_VAR 0 1
69852: PPUSH
69853: LD_EXP 101
69857: PUSH
69858: LD_VAR 0 2
69862: ARRAY
69863: PUSH
69864: LD_INT 3
69866: ARRAY
69867: PPUSH
69868: LD_EXP 101
69872: PUSH
69873: LD_VAR 0 2
69877: ARRAY
69878: PUSH
69879: LD_INT 4
69881: ARRAY
69882: PPUSH
69883: CALL_OW 171
// end ; end ;
69887: LD_VAR 0 3
69891: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
69892: LD_INT 0
69894: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
69895: LD_VAR 0 1
69899: PUSH
69900: LD_INT 250
69902: EQUAL
69903: PUSH
69904: LD_VAR 0 2
69908: PPUSH
69909: CALL_OW 264
69913: PUSH
69914: LD_INT 81
69916: EQUAL
69917: AND
69918: IFFALSE 69939
// MinerPlaceMine ( unit , x , y ) ;
69920: LD_VAR 0 2
69924: PPUSH
69925: LD_VAR 0 4
69929: PPUSH
69930: LD_VAR 0 5
69934: PPUSH
69935: CALL 73031 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
69939: LD_VAR 0 1
69943: PUSH
69944: LD_INT 251
69946: EQUAL
69947: PUSH
69948: LD_VAR 0 2
69952: PPUSH
69953: CALL_OW 264
69957: PUSH
69958: LD_INT 81
69960: EQUAL
69961: AND
69962: IFFALSE 69983
// MinerDetonateMine ( unit , x , y ) ;
69964: LD_VAR 0 2
69968: PPUSH
69969: LD_VAR 0 4
69973: PPUSH
69974: LD_VAR 0 5
69978: PPUSH
69979: CALL 73306 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
69983: LD_VAR 0 1
69987: PUSH
69988: LD_INT 252
69990: EQUAL
69991: PUSH
69992: LD_VAR 0 2
69996: PPUSH
69997: CALL_OW 264
70001: PUSH
70002: LD_INT 81
70004: EQUAL
70005: AND
70006: IFFALSE 70027
// MinerCreateMinefield ( unit , x , y ) ;
70008: LD_VAR 0 2
70012: PPUSH
70013: LD_VAR 0 4
70017: PPUSH
70018: LD_VAR 0 5
70022: PPUSH
70023: CALL 73723 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
70027: LD_VAR 0 1
70031: PUSH
70032: LD_INT 253
70034: EQUAL
70035: PUSH
70036: LD_VAR 0 2
70040: PPUSH
70041: CALL_OW 257
70045: PUSH
70046: LD_INT 5
70048: EQUAL
70049: AND
70050: IFFALSE 70071
// ComBinocular ( unit , x , y ) ;
70052: LD_VAR 0 2
70056: PPUSH
70057: LD_VAR 0 4
70061: PPUSH
70062: LD_VAR 0 5
70066: PPUSH
70067: CALL 74092 0 3
// if selectedUnit then
70071: LD_VAR 0 3
70075: IFFALSE 70131
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
70077: LD_VAR 0 1
70081: PUSH
70082: LD_INT 254
70084: EQUAL
70085: PUSH
70086: LD_VAR 0 2
70090: PPUSH
70091: CALL_OW 264
70095: PUSH
70096: LD_INT 99
70098: EQUAL
70099: AND
70100: PUSH
70101: LD_VAR 0 3
70105: PPUSH
70106: CALL_OW 263
70110: PUSH
70111: LD_INT 3
70113: EQUAL
70114: AND
70115: IFFALSE 70131
// HackDestroyVehicle ( unit , selectedUnit ) ;
70117: LD_VAR 0 2
70121: PPUSH
70122: LD_VAR 0 3
70126: PPUSH
70127: CALL 72395 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
70131: LD_VAR 0 1
70135: PUSH
70136: LD_INT 255
70138: EQUAL
70139: PUSH
70140: LD_VAR 0 2
70144: PPUSH
70145: CALL_OW 264
70149: PUSH
70150: LD_INT 14
70152: PUSH
70153: LD_INT 53
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: IN
70160: AND
70161: PUSH
70162: LD_VAR 0 4
70166: PPUSH
70167: LD_VAR 0 5
70171: PPUSH
70172: CALL_OW 488
70176: AND
70177: IFFALSE 70201
// CutTreeXYR ( unit , x , y , 12 ) ;
70179: LD_VAR 0 2
70183: PPUSH
70184: LD_VAR 0 4
70188: PPUSH
70189: LD_VAR 0 5
70193: PPUSH
70194: LD_INT 12
70196: PPUSH
70197: CALL 70392 0 4
// if cmd = 256 then
70201: LD_VAR 0 1
70205: PUSH
70206: LD_INT 256
70208: EQUAL
70209: IFFALSE 70230
// SetFactoryWaypoint ( unit , x , y ) ;
70211: LD_VAR 0 2
70215: PPUSH
70216: LD_VAR 0 4
70220: PPUSH
70221: LD_VAR 0 5
70225: PPUSH
70226: CALL 67876 0 3
// if cmd = 257 then
70230: LD_VAR 0 1
70234: PUSH
70235: LD_INT 257
70237: EQUAL
70238: IFFALSE 70259
// SetWarehouseGatheringPoint ( unit , x , y ) ;
70240: LD_VAR 0 2
70244: PPUSH
70245: LD_VAR 0 4
70249: PPUSH
70250: LD_VAR 0 5
70254: PPUSH
70255: CALL 68238 0 3
// if cmd = 258 then
70259: LD_VAR 0 1
70263: PUSH
70264: LD_INT 258
70266: EQUAL
70267: IFFALSE 70291
// BurnTreeXYR ( unit , x , y , 8 ) ;
70269: LD_VAR 0 2
70273: PPUSH
70274: LD_VAR 0 4
70278: PPUSH
70279: LD_VAR 0 5
70283: PPUSH
70284: LD_INT 8
70286: PPUSH
70287: CALL 70786 0 4
// end ;
70291: LD_VAR 0 6
70295: RET
// export function ComRadiation ( un ) ; var eff ; begin
70296: LD_INT 0
70298: PPUSH
70299: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
70300: LD_VAR 0 1
70304: PPUSH
70305: CALL_OW 264
70309: PUSH
70310: LD_INT 91
70312: NONEQUAL
70313: IFFALSE 70317
// exit ;
70315: GO 70387
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
70317: LD_INT 68
70319: PPUSH
70320: LD_VAR 0 1
70324: PPUSH
70325: CALL_OW 255
70329: PPUSH
70330: CALL_OW 321
70334: PUSH
70335: LD_INT 2
70337: EQUAL
70338: IFFALSE 70350
// eff := 70 else
70340: LD_ADDR_VAR 0 3
70344: PUSH
70345: LD_INT 70
70347: ST_TO_ADDR
70348: GO 70358
// eff := 30 ;
70350: LD_ADDR_VAR 0 3
70354: PUSH
70355: LD_INT 30
70357: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
70358: LD_VAR 0 1
70362: PPUSH
70363: CALL_OW 250
70367: PPUSH
70368: LD_VAR 0 1
70372: PPUSH
70373: CALL_OW 251
70377: PPUSH
70378: LD_VAR 0 3
70382: PPUSH
70383: CALL_OW 495
// end ;
70387: LD_VAR 0 2
70391: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
70392: LD_INT 0
70394: PPUSH
70395: PPUSH
70396: PPUSH
70397: PPUSH
70398: PPUSH
70399: PPUSH
70400: PPUSH
70401: PPUSH
70402: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
70403: LD_VAR 0 1
70407: PPUSH
70408: CALL_OW 302
70412: NOT
70413: PUSH
70414: LD_VAR 0 2
70418: PPUSH
70419: LD_VAR 0 3
70423: PPUSH
70424: CALL_OW 488
70428: NOT
70429: OR
70430: PUSH
70431: LD_VAR 0 4
70435: NOT
70436: OR
70437: IFFALSE 70441
// exit ;
70439: GO 70781
// list := [ ] ;
70441: LD_ADDR_VAR 0 13
70445: PUSH
70446: EMPTY
70447: ST_TO_ADDR
// if x - r < 0 then
70448: LD_VAR 0 2
70452: PUSH
70453: LD_VAR 0 4
70457: MINUS
70458: PUSH
70459: LD_INT 0
70461: LESS
70462: IFFALSE 70474
// min_x := 0 else
70464: LD_ADDR_VAR 0 7
70468: PUSH
70469: LD_INT 0
70471: ST_TO_ADDR
70472: GO 70490
// min_x := x - r ;
70474: LD_ADDR_VAR 0 7
70478: PUSH
70479: LD_VAR 0 2
70483: PUSH
70484: LD_VAR 0 4
70488: MINUS
70489: ST_TO_ADDR
// if y - r < 0 then
70490: LD_VAR 0 3
70494: PUSH
70495: LD_VAR 0 4
70499: MINUS
70500: PUSH
70501: LD_INT 0
70503: LESS
70504: IFFALSE 70516
// min_y := 0 else
70506: LD_ADDR_VAR 0 8
70510: PUSH
70511: LD_INT 0
70513: ST_TO_ADDR
70514: GO 70532
// min_y := y - r ;
70516: LD_ADDR_VAR 0 8
70520: PUSH
70521: LD_VAR 0 3
70525: PUSH
70526: LD_VAR 0 4
70530: MINUS
70531: ST_TO_ADDR
// max_x := x + r ;
70532: LD_ADDR_VAR 0 9
70536: PUSH
70537: LD_VAR 0 2
70541: PUSH
70542: LD_VAR 0 4
70546: PLUS
70547: ST_TO_ADDR
// max_y := y + r ;
70548: LD_ADDR_VAR 0 10
70552: PUSH
70553: LD_VAR 0 3
70557: PUSH
70558: LD_VAR 0 4
70562: PLUS
70563: ST_TO_ADDR
// for _x = min_x to max_x do
70564: LD_ADDR_VAR 0 11
70568: PUSH
70569: DOUBLE
70570: LD_VAR 0 7
70574: DEC
70575: ST_TO_ADDR
70576: LD_VAR 0 9
70580: PUSH
70581: FOR_TO
70582: IFFALSE 70699
// for _y = min_y to max_y do
70584: LD_ADDR_VAR 0 12
70588: PUSH
70589: DOUBLE
70590: LD_VAR 0 8
70594: DEC
70595: ST_TO_ADDR
70596: LD_VAR 0 10
70600: PUSH
70601: FOR_TO
70602: IFFALSE 70695
// begin if not ValidHex ( _x , _y ) then
70604: LD_VAR 0 11
70608: PPUSH
70609: LD_VAR 0 12
70613: PPUSH
70614: CALL_OW 488
70618: NOT
70619: IFFALSE 70623
// continue ;
70621: GO 70601
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
70623: LD_VAR 0 11
70627: PPUSH
70628: LD_VAR 0 12
70632: PPUSH
70633: CALL_OW 351
70637: PUSH
70638: LD_VAR 0 11
70642: PPUSH
70643: LD_VAR 0 12
70647: PPUSH
70648: CALL_OW 554
70652: AND
70653: IFFALSE 70693
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
70655: LD_ADDR_VAR 0 13
70659: PUSH
70660: LD_VAR 0 13
70664: PPUSH
70665: LD_VAR 0 13
70669: PUSH
70670: LD_INT 1
70672: PLUS
70673: PPUSH
70674: LD_VAR 0 11
70678: PUSH
70679: LD_VAR 0 12
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PPUSH
70688: CALL_OW 2
70692: ST_TO_ADDR
// end ;
70693: GO 70601
70695: POP
70696: POP
70697: GO 70581
70699: POP
70700: POP
// if not list then
70701: LD_VAR 0 13
70705: NOT
70706: IFFALSE 70710
// exit ;
70708: GO 70781
// for i in list do
70710: LD_ADDR_VAR 0 6
70714: PUSH
70715: LD_VAR 0 13
70719: PUSH
70720: FOR_IN
70721: IFFALSE 70779
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
70723: LD_VAR 0 1
70727: PPUSH
70728: LD_STRING M
70730: PUSH
70731: LD_VAR 0 6
70735: PUSH
70736: LD_INT 1
70738: ARRAY
70739: PUSH
70740: LD_VAR 0 6
70744: PUSH
70745: LD_INT 2
70747: ARRAY
70748: PUSH
70749: LD_INT 0
70751: PUSH
70752: LD_INT 0
70754: PUSH
70755: LD_INT 0
70757: PUSH
70758: LD_INT 0
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: PUSH
70770: EMPTY
70771: LIST
70772: PPUSH
70773: CALL_OW 447
70777: GO 70720
70779: POP
70780: POP
// end ;
70781: LD_VAR 0 5
70785: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
70786: LD_INT 0
70788: PPUSH
70789: PPUSH
70790: PPUSH
70791: PPUSH
70792: PPUSH
70793: PPUSH
70794: PPUSH
70795: PPUSH
70796: PPUSH
70797: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
70798: LD_VAR 0 1
70802: PPUSH
70803: CALL_OW 302
70807: NOT
70808: PUSH
70809: LD_VAR 0 2
70813: PPUSH
70814: LD_VAR 0 3
70818: PPUSH
70819: CALL_OW 488
70823: NOT
70824: OR
70825: PUSH
70826: LD_VAR 0 4
70830: NOT
70831: OR
70832: IFFALSE 70836
// exit ;
70834: GO 71349
// list := [ ] ;
70836: LD_ADDR_VAR 0 13
70840: PUSH
70841: EMPTY
70842: ST_TO_ADDR
// if x - r < 0 then
70843: LD_VAR 0 2
70847: PUSH
70848: LD_VAR 0 4
70852: MINUS
70853: PUSH
70854: LD_INT 0
70856: LESS
70857: IFFALSE 70869
// min_x := 0 else
70859: LD_ADDR_VAR 0 7
70863: PUSH
70864: LD_INT 0
70866: ST_TO_ADDR
70867: GO 70885
// min_x := x - r ;
70869: LD_ADDR_VAR 0 7
70873: PUSH
70874: LD_VAR 0 2
70878: PUSH
70879: LD_VAR 0 4
70883: MINUS
70884: ST_TO_ADDR
// if y - r < 0 then
70885: LD_VAR 0 3
70889: PUSH
70890: LD_VAR 0 4
70894: MINUS
70895: PUSH
70896: LD_INT 0
70898: LESS
70899: IFFALSE 70911
// min_y := 0 else
70901: LD_ADDR_VAR 0 8
70905: PUSH
70906: LD_INT 0
70908: ST_TO_ADDR
70909: GO 70927
// min_y := y - r ;
70911: LD_ADDR_VAR 0 8
70915: PUSH
70916: LD_VAR 0 3
70920: PUSH
70921: LD_VAR 0 4
70925: MINUS
70926: ST_TO_ADDR
// max_x := x + r ;
70927: LD_ADDR_VAR 0 9
70931: PUSH
70932: LD_VAR 0 2
70936: PUSH
70937: LD_VAR 0 4
70941: PLUS
70942: ST_TO_ADDR
// max_y := y + r ;
70943: LD_ADDR_VAR 0 10
70947: PUSH
70948: LD_VAR 0 3
70952: PUSH
70953: LD_VAR 0 4
70957: PLUS
70958: ST_TO_ADDR
// for _x = min_x to max_x do
70959: LD_ADDR_VAR 0 11
70963: PUSH
70964: DOUBLE
70965: LD_VAR 0 7
70969: DEC
70970: ST_TO_ADDR
70971: LD_VAR 0 9
70975: PUSH
70976: FOR_TO
70977: IFFALSE 71094
// for _y = min_y to max_y do
70979: LD_ADDR_VAR 0 12
70983: PUSH
70984: DOUBLE
70985: LD_VAR 0 8
70989: DEC
70990: ST_TO_ADDR
70991: LD_VAR 0 10
70995: PUSH
70996: FOR_TO
70997: IFFALSE 71090
// begin if not ValidHex ( _x , _y ) then
70999: LD_VAR 0 11
71003: PPUSH
71004: LD_VAR 0 12
71008: PPUSH
71009: CALL_OW 488
71013: NOT
71014: IFFALSE 71018
// continue ;
71016: GO 70996
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
71018: LD_VAR 0 11
71022: PPUSH
71023: LD_VAR 0 12
71027: PPUSH
71028: CALL_OW 351
71032: PUSH
71033: LD_VAR 0 11
71037: PPUSH
71038: LD_VAR 0 12
71042: PPUSH
71043: CALL_OW 554
71047: AND
71048: IFFALSE 71088
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
71050: LD_ADDR_VAR 0 13
71054: PUSH
71055: LD_VAR 0 13
71059: PPUSH
71060: LD_VAR 0 13
71064: PUSH
71065: LD_INT 1
71067: PLUS
71068: PPUSH
71069: LD_VAR 0 11
71073: PUSH
71074: LD_VAR 0 12
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PPUSH
71083: CALL_OW 2
71087: ST_TO_ADDR
// end ;
71088: GO 70996
71090: POP
71091: POP
71092: GO 70976
71094: POP
71095: POP
// if not list then
71096: LD_VAR 0 13
71100: NOT
71101: IFFALSE 71105
// exit ;
71103: GO 71349
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
71105: LD_ADDR_VAR 0 13
71109: PUSH
71110: LD_VAR 0 1
71114: PPUSH
71115: LD_VAR 0 13
71119: PPUSH
71120: LD_INT 1
71122: PPUSH
71123: LD_INT 1
71125: PPUSH
71126: CALL 8258 0 4
71130: ST_TO_ADDR
// ComStop ( flame ) ;
71131: LD_VAR 0 1
71135: PPUSH
71136: CALL_OW 141
// for i in list do
71140: LD_ADDR_VAR 0 6
71144: PUSH
71145: LD_VAR 0 13
71149: PUSH
71150: FOR_IN
71151: IFFALSE 71182
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
71153: LD_VAR 0 1
71157: PPUSH
71158: LD_VAR 0 6
71162: PUSH
71163: LD_INT 1
71165: ARRAY
71166: PPUSH
71167: LD_VAR 0 6
71171: PUSH
71172: LD_INT 2
71174: ARRAY
71175: PPUSH
71176: CALL_OW 176
71180: GO 71150
71182: POP
71183: POP
// repeat wait ( 0 0$1 ) ;
71184: LD_INT 35
71186: PPUSH
71187: CALL_OW 67
// task := GetTaskList ( flame ) ;
71191: LD_ADDR_VAR 0 14
71195: PUSH
71196: LD_VAR 0 1
71200: PPUSH
71201: CALL_OW 437
71205: ST_TO_ADDR
// if not task then
71206: LD_VAR 0 14
71210: NOT
71211: IFFALSE 71215
// exit ;
71213: GO 71349
// if task [ 1 ] [ 1 ] <> | then
71215: LD_VAR 0 14
71219: PUSH
71220: LD_INT 1
71222: ARRAY
71223: PUSH
71224: LD_INT 1
71226: ARRAY
71227: PUSH
71228: LD_STRING |
71230: NONEQUAL
71231: IFFALSE 71235
// exit ;
71233: GO 71349
// _x := task [ 1 ] [ 2 ] ;
71235: LD_ADDR_VAR 0 11
71239: PUSH
71240: LD_VAR 0 14
71244: PUSH
71245: LD_INT 1
71247: ARRAY
71248: PUSH
71249: LD_INT 2
71251: ARRAY
71252: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
71253: LD_ADDR_VAR 0 12
71257: PUSH
71258: LD_VAR 0 14
71262: PUSH
71263: LD_INT 1
71265: ARRAY
71266: PUSH
71267: LD_INT 3
71269: ARRAY
71270: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
71271: LD_VAR 0 11
71275: PPUSH
71276: LD_VAR 0 12
71280: PPUSH
71281: CALL_OW 351
71285: NOT
71286: PUSH
71287: LD_VAR 0 11
71291: PPUSH
71292: LD_VAR 0 12
71296: PPUSH
71297: CALL_OW 554
71301: NOT
71302: OR
71303: IFFALSE 71337
// begin task := Delete ( task , 1 ) ;
71305: LD_ADDR_VAR 0 14
71309: PUSH
71310: LD_VAR 0 14
71314: PPUSH
71315: LD_INT 1
71317: PPUSH
71318: CALL_OW 3
71322: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
71323: LD_VAR 0 1
71327: PPUSH
71328: LD_VAR 0 14
71332: PPUSH
71333: CALL_OW 446
// end ; until not HasTask ( flame ) ;
71337: LD_VAR 0 1
71341: PPUSH
71342: CALL_OW 314
71346: NOT
71347: IFFALSE 71184
// end ;
71349: LD_VAR 0 5
71353: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
71354: LD_EXP 104
71358: NOT
71359: IFFALSE 71409
71361: GO 71363
71363: DISABLE
// begin initHack := true ;
71364: LD_ADDR_EXP 104
71368: PUSH
71369: LD_INT 1
71371: ST_TO_ADDR
// hackTanks := [ ] ;
71372: LD_ADDR_EXP 105
71376: PUSH
71377: EMPTY
71378: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
71379: LD_ADDR_EXP 106
71383: PUSH
71384: EMPTY
71385: ST_TO_ADDR
// hackLimit := 3 ;
71386: LD_ADDR_EXP 107
71390: PUSH
71391: LD_INT 3
71393: ST_TO_ADDR
// hackDist := 12 ;
71394: LD_ADDR_EXP 108
71398: PUSH
71399: LD_INT 12
71401: ST_TO_ADDR
// hackCounter := [ ] ;
71402: LD_ADDR_EXP 109
71406: PUSH
71407: EMPTY
71408: ST_TO_ADDR
// end ;
71409: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
71410: LD_EXP 104
71414: PUSH
71415: LD_INT 34
71417: PUSH
71418: LD_INT 99
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PPUSH
71425: CALL_OW 69
71429: AND
71430: IFFALSE 71683
71432: GO 71434
71434: DISABLE
71435: LD_INT 0
71437: PPUSH
71438: PPUSH
// begin enable ;
71439: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
71440: LD_ADDR_VAR 0 1
71444: PUSH
71445: LD_INT 34
71447: PUSH
71448: LD_INT 99
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PPUSH
71455: CALL_OW 69
71459: PUSH
71460: FOR_IN
71461: IFFALSE 71681
// begin if not i in hackTanks then
71463: LD_VAR 0 1
71467: PUSH
71468: LD_EXP 105
71472: IN
71473: NOT
71474: IFFALSE 71557
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
71476: LD_ADDR_EXP 105
71480: PUSH
71481: LD_EXP 105
71485: PPUSH
71486: LD_EXP 105
71490: PUSH
71491: LD_INT 1
71493: PLUS
71494: PPUSH
71495: LD_VAR 0 1
71499: PPUSH
71500: CALL_OW 1
71504: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
71505: LD_ADDR_EXP 106
71509: PUSH
71510: LD_EXP 106
71514: PPUSH
71515: LD_EXP 106
71519: PUSH
71520: LD_INT 1
71522: PLUS
71523: PPUSH
71524: EMPTY
71525: PPUSH
71526: CALL_OW 1
71530: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
71531: LD_ADDR_EXP 109
71535: PUSH
71536: LD_EXP 109
71540: PPUSH
71541: LD_EXP 109
71545: PUSH
71546: LD_INT 1
71548: PLUS
71549: PPUSH
71550: EMPTY
71551: PPUSH
71552: CALL_OW 1
71556: ST_TO_ADDR
// end ; if not IsOk ( i ) then
71557: LD_VAR 0 1
71561: PPUSH
71562: CALL_OW 302
71566: NOT
71567: IFFALSE 71580
// begin HackUnlinkAll ( i ) ;
71569: LD_VAR 0 1
71573: PPUSH
71574: CALL 71686 0 1
// continue ;
71578: GO 71460
// end ; HackCheckCapturedStatus ( i ) ;
71580: LD_VAR 0 1
71584: PPUSH
71585: CALL 72129 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
71589: LD_ADDR_VAR 0 2
71593: PUSH
71594: LD_INT 81
71596: PUSH
71597: LD_VAR 0 1
71601: PPUSH
71602: CALL_OW 255
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 33
71613: PUSH
71614: LD_INT 3
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PUSH
71621: LD_INT 91
71623: PUSH
71624: LD_VAR 0 1
71628: PUSH
71629: LD_EXP 108
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 50
71641: PUSH
71642: EMPTY
71643: LIST
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: PPUSH
71651: CALL_OW 69
71655: ST_TO_ADDR
// if not tmp then
71656: LD_VAR 0 2
71660: NOT
71661: IFFALSE 71665
// continue ;
71663: GO 71460
// HackLink ( i , tmp ) ;
71665: LD_VAR 0 1
71669: PPUSH
71670: LD_VAR 0 2
71674: PPUSH
71675: CALL 71822 0 2
// end ;
71679: GO 71460
71681: POP
71682: POP
// end ;
71683: PPOPN 2
71685: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
71686: LD_INT 0
71688: PPUSH
71689: PPUSH
71690: PPUSH
// if not hack in hackTanks then
71691: LD_VAR 0 1
71695: PUSH
71696: LD_EXP 105
71700: IN
71701: NOT
71702: IFFALSE 71706
// exit ;
71704: GO 71817
// index := GetElementIndex ( hackTanks , hack ) ;
71706: LD_ADDR_VAR 0 4
71710: PUSH
71711: LD_EXP 105
71715: PPUSH
71716: LD_VAR 0 1
71720: PPUSH
71721: CALL 7555 0 2
71725: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
71726: LD_EXP 106
71730: PUSH
71731: LD_VAR 0 4
71735: ARRAY
71736: IFFALSE 71817
// begin for i in hackTanksCaptured [ index ] do
71738: LD_ADDR_VAR 0 3
71742: PUSH
71743: LD_EXP 106
71747: PUSH
71748: LD_VAR 0 4
71752: ARRAY
71753: PUSH
71754: FOR_IN
71755: IFFALSE 71781
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
71757: LD_VAR 0 3
71761: PUSH
71762: LD_INT 1
71764: ARRAY
71765: PPUSH
71766: LD_VAR 0 3
71770: PUSH
71771: LD_INT 2
71773: ARRAY
71774: PPUSH
71775: CALL_OW 235
71779: GO 71754
71781: POP
71782: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
71783: LD_ADDR_EXP 106
71787: PUSH
71788: LD_EXP 106
71792: PPUSH
71793: LD_VAR 0 4
71797: PPUSH
71798: EMPTY
71799: PPUSH
71800: CALL_OW 1
71804: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
71805: LD_VAR 0 1
71809: PPUSH
71810: LD_INT 0
71812: PPUSH
71813: CALL_OW 505
// end ; end ;
71817: LD_VAR 0 2
71821: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
71822: LD_INT 0
71824: PPUSH
71825: PPUSH
71826: PPUSH
// if not hack in hackTanks or not vehicles then
71827: LD_VAR 0 1
71831: PUSH
71832: LD_EXP 105
71836: IN
71837: NOT
71838: PUSH
71839: LD_VAR 0 2
71843: NOT
71844: OR
71845: IFFALSE 71849
// exit ;
71847: GO 72124
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
71849: LD_ADDR_VAR 0 2
71853: PUSH
71854: LD_VAR 0 1
71858: PPUSH
71859: LD_VAR 0 2
71863: PPUSH
71864: LD_INT 1
71866: PPUSH
71867: LD_INT 1
71869: PPUSH
71870: CALL 8205 0 4
71874: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
71875: LD_ADDR_VAR 0 5
71879: PUSH
71880: LD_EXP 105
71884: PPUSH
71885: LD_VAR 0 1
71889: PPUSH
71890: CALL 7555 0 2
71894: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
71895: LD_EXP 106
71899: PUSH
71900: LD_VAR 0 5
71904: ARRAY
71905: PUSH
71906: LD_EXP 107
71910: LESS
71911: IFFALSE 72100
// begin for i := 1 to vehicles do
71913: LD_ADDR_VAR 0 4
71917: PUSH
71918: DOUBLE
71919: LD_INT 1
71921: DEC
71922: ST_TO_ADDR
71923: LD_VAR 0 2
71927: PUSH
71928: FOR_TO
71929: IFFALSE 72098
// begin if hackTanksCaptured [ index ] = hackLimit then
71931: LD_EXP 106
71935: PUSH
71936: LD_VAR 0 5
71940: ARRAY
71941: PUSH
71942: LD_EXP 107
71946: EQUAL
71947: IFFALSE 71951
// break ;
71949: GO 72098
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
71951: LD_ADDR_EXP 109
71955: PUSH
71956: LD_EXP 109
71960: PPUSH
71961: LD_VAR 0 5
71965: PPUSH
71966: LD_EXP 109
71970: PUSH
71971: LD_VAR 0 5
71975: ARRAY
71976: PUSH
71977: LD_INT 1
71979: PLUS
71980: PPUSH
71981: CALL_OW 1
71985: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
71986: LD_ADDR_EXP 106
71990: PUSH
71991: LD_EXP 106
71995: PPUSH
71996: LD_VAR 0 5
72000: PUSH
72001: LD_EXP 106
72005: PUSH
72006: LD_VAR 0 5
72010: ARRAY
72011: PUSH
72012: LD_INT 1
72014: PLUS
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PPUSH
72020: LD_VAR 0 2
72024: PUSH
72025: LD_VAR 0 4
72029: ARRAY
72030: PUSH
72031: LD_VAR 0 2
72035: PUSH
72036: LD_VAR 0 4
72040: ARRAY
72041: PPUSH
72042: CALL_OW 255
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PPUSH
72051: CALL 7770 0 3
72055: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
72056: LD_VAR 0 2
72060: PUSH
72061: LD_VAR 0 4
72065: ARRAY
72066: PPUSH
72067: LD_VAR 0 1
72071: PPUSH
72072: CALL_OW 255
72076: PPUSH
72077: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
72081: LD_VAR 0 2
72085: PUSH
72086: LD_VAR 0 4
72090: ARRAY
72091: PPUSH
72092: CALL_OW 141
// end ;
72096: GO 71928
72098: POP
72099: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
72100: LD_VAR 0 1
72104: PPUSH
72105: LD_EXP 106
72109: PUSH
72110: LD_VAR 0 5
72114: ARRAY
72115: PUSH
72116: LD_INT 0
72118: PLUS
72119: PPUSH
72120: CALL_OW 505
// end ;
72124: LD_VAR 0 3
72128: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
72129: LD_INT 0
72131: PPUSH
72132: PPUSH
72133: PPUSH
72134: PPUSH
// if not hack in hackTanks then
72135: LD_VAR 0 1
72139: PUSH
72140: LD_EXP 105
72144: IN
72145: NOT
72146: IFFALSE 72150
// exit ;
72148: GO 72390
// index := GetElementIndex ( hackTanks , hack ) ;
72150: LD_ADDR_VAR 0 4
72154: PUSH
72155: LD_EXP 105
72159: PPUSH
72160: LD_VAR 0 1
72164: PPUSH
72165: CALL 7555 0 2
72169: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
72170: LD_ADDR_VAR 0 3
72174: PUSH
72175: DOUBLE
72176: LD_EXP 106
72180: PUSH
72181: LD_VAR 0 4
72185: ARRAY
72186: INC
72187: ST_TO_ADDR
72188: LD_INT 1
72190: PUSH
72191: FOR_DOWNTO
72192: IFFALSE 72364
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
72194: LD_ADDR_VAR 0 5
72198: PUSH
72199: LD_EXP 106
72203: PUSH
72204: LD_VAR 0 4
72208: ARRAY
72209: PUSH
72210: LD_VAR 0 3
72214: ARRAY
72215: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
72216: LD_VAR 0 5
72220: PUSH
72221: LD_INT 1
72223: ARRAY
72224: PPUSH
72225: CALL_OW 302
72229: NOT
72230: PUSH
72231: LD_VAR 0 5
72235: PUSH
72236: LD_INT 1
72238: ARRAY
72239: PPUSH
72240: CALL_OW 255
72244: PUSH
72245: LD_VAR 0 1
72249: PPUSH
72250: CALL_OW 255
72254: NONEQUAL
72255: OR
72256: IFFALSE 72362
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
72258: LD_VAR 0 5
72262: PUSH
72263: LD_INT 1
72265: ARRAY
72266: PPUSH
72267: CALL_OW 305
72271: PUSH
72272: LD_VAR 0 5
72276: PUSH
72277: LD_INT 1
72279: ARRAY
72280: PPUSH
72281: CALL_OW 255
72285: PUSH
72286: LD_VAR 0 1
72290: PPUSH
72291: CALL_OW 255
72295: EQUAL
72296: AND
72297: IFFALSE 72321
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
72299: LD_VAR 0 5
72303: PUSH
72304: LD_INT 1
72306: ARRAY
72307: PPUSH
72308: LD_VAR 0 5
72312: PUSH
72313: LD_INT 2
72315: ARRAY
72316: PPUSH
72317: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
72321: LD_ADDR_EXP 106
72325: PUSH
72326: LD_EXP 106
72330: PPUSH
72331: LD_VAR 0 4
72335: PPUSH
72336: LD_EXP 106
72340: PUSH
72341: LD_VAR 0 4
72345: ARRAY
72346: PPUSH
72347: LD_VAR 0 3
72351: PPUSH
72352: CALL_OW 3
72356: PPUSH
72357: CALL_OW 1
72361: ST_TO_ADDR
// end ; end ;
72362: GO 72191
72364: POP
72365: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
72366: LD_VAR 0 1
72370: PPUSH
72371: LD_EXP 106
72375: PUSH
72376: LD_VAR 0 4
72380: ARRAY
72381: PUSH
72382: LD_INT 0
72384: PLUS
72385: PPUSH
72386: CALL_OW 505
// end ;
72390: LD_VAR 0 2
72394: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
72395: LD_INT 0
72397: PPUSH
72398: PPUSH
72399: PPUSH
72400: PPUSH
// if not hack in hackTanks then
72401: LD_VAR 0 1
72405: PUSH
72406: LD_EXP 105
72410: IN
72411: NOT
72412: IFFALSE 72416
// exit ;
72414: GO 72501
// index := GetElementIndex ( hackTanks , hack ) ;
72416: LD_ADDR_VAR 0 5
72420: PUSH
72421: LD_EXP 105
72425: PPUSH
72426: LD_VAR 0 1
72430: PPUSH
72431: CALL 7555 0 2
72435: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
72436: LD_ADDR_VAR 0 4
72440: PUSH
72441: DOUBLE
72442: LD_INT 1
72444: DEC
72445: ST_TO_ADDR
72446: LD_EXP 106
72450: PUSH
72451: LD_VAR 0 5
72455: ARRAY
72456: PUSH
72457: FOR_TO
72458: IFFALSE 72499
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
72460: LD_EXP 106
72464: PUSH
72465: LD_VAR 0 5
72469: ARRAY
72470: PUSH
72471: LD_VAR 0 4
72475: ARRAY
72476: PUSH
72477: LD_INT 1
72479: ARRAY
72480: PUSH
72481: LD_VAR 0 2
72485: EQUAL
72486: IFFALSE 72497
// KillUnit ( vehicle ) ;
72488: LD_VAR 0 2
72492: PPUSH
72493: CALL_OW 66
72497: GO 72457
72499: POP
72500: POP
// end ;
72501: LD_VAR 0 3
72505: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
72506: LD_EXP 110
72510: NOT
72511: IFFALSE 72546
72513: GO 72515
72515: DISABLE
// begin initMiner := true ;
72516: LD_ADDR_EXP 110
72520: PUSH
72521: LD_INT 1
72523: ST_TO_ADDR
// minersList := [ ] ;
72524: LD_ADDR_EXP 111
72528: PUSH
72529: EMPTY
72530: ST_TO_ADDR
// minerMinesList := [ ] ;
72531: LD_ADDR_EXP 112
72535: PUSH
72536: EMPTY
72537: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
72538: LD_ADDR_EXP 113
72542: PUSH
72543: LD_INT 5
72545: ST_TO_ADDR
// end ;
72546: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
72547: LD_EXP 110
72551: PUSH
72552: LD_INT 34
72554: PUSH
72555: LD_INT 81
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: PPUSH
72562: CALL_OW 69
72566: AND
72567: IFFALSE 73028
72569: GO 72571
72571: DISABLE
72572: LD_INT 0
72574: PPUSH
72575: PPUSH
72576: PPUSH
72577: PPUSH
// begin enable ;
72578: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
72579: LD_ADDR_VAR 0 1
72583: PUSH
72584: LD_INT 34
72586: PUSH
72587: LD_INT 81
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PPUSH
72594: CALL_OW 69
72598: PUSH
72599: FOR_IN
72600: IFFALSE 72672
// begin if not i in minersList then
72602: LD_VAR 0 1
72606: PUSH
72607: LD_EXP 111
72611: IN
72612: NOT
72613: IFFALSE 72670
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
72615: LD_ADDR_EXP 111
72619: PUSH
72620: LD_EXP 111
72624: PPUSH
72625: LD_EXP 111
72629: PUSH
72630: LD_INT 1
72632: PLUS
72633: PPUSH
72634: LD_VAR 0 1
72638: PPUSH
72639: CALL_OW 1
72643: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
72644: LD_ADDR_EXP 112
72648: PUSH
72649: LD_EXP 112
72653: PPUSH
72654: LD_EXP 112
72658: PUSH
72659: LD_INT 1
72661: PLUS
72662: PPUSH
72663: EMPTY
72664: PPUSH
72665: CALL_OW 1
72669: ST_TO_ADDR
// end end ;
72670: GO 72599
72672: POP
72673: POP
// for i := minerMinesList downto 1 do
72674: LD_ADDR_VAR 0 1
72678: PUSH
72679: DOUBLE
72680: LD_EXP 112
72684: INC
72685: ST_TO_ADDR
72686: LD_INT 1
72688: PUSH
72689: FOR_DOWNTO
72690: IFFALSE 73026
// begin if IsLive ( minersList [ i ] ) then
72692: LD_EXP 111
72696: PUSH
72697: LD_VAR 0 1
72701: ARRAY
72702: PPUSH
72703: CALL_OW 300
72707: IFFALSE 72735
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
72709: LD_EXP 111
72713: PUSH
72714: LD_VAR 0 1
72718: ARRAY
72719: PPUSH
72720: LD_EXP 112
72724: PUSH
72725: LD_VAR 0 1
72729: ARRAY
72730: PPUSH
72731: CALL_OW 505
// if not minerMinesList [ i ] then
72735: LD_EXP 112
72739: PUSH
72740: LD_VAR 0 1
72744: ARRAY
72745: NOT
72746: IFFALSE 72750
// continue ;
72748: GO 72689
// for j := minerMinesList [ i ] downto 1 do
72750: LD_ADDR_VAR 0 2
72754: PUSH
72755: DOUBLE
72756: LD_EXP 112
72760: PUSH
72761: LD_VAR 0 1
72765: ARRAY
72766: INC
72767: ST_TO_ADDR
72768: LD_INT 1
72770: PUSH
72771: FOR_DOWNTO
72772: IFFALSE 73022
// begin side := GetSide ( minersList [ i ] ) ;
72774: LD_ADDR_VAR 0 3
72778: PUSH
72779: LD_EXP 111
72783: PUSH
72784: LD_VAR 0 1
72788: ARRAY
72789: PPUSH
72790: CALL_OW 255
72794: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
72795: LD_ADDR_VAR 0 4
72799: PUSH
72800: LD_EXP 112
72804: PUSH
72805: LD_VAR 0 1
72809: ARRAY
72810: PUSH
72811: LD_VAR 0 2
72815: ARRAY
72816: PUSH
72817: LD_INT 1
72819: ARRAY
72820: PPUSH
72821: LD_EXP 112
72825: PUSH
72826: LD_VAR 0 1
72830: ARRAY
72831: PUSH
72832: LD_VAR 0 2
72836: ARRAY
72837: PUSH
72838: LD_INT 2
72840: ARRAY
72841: PPUSH
72842: CALL_OW 428
72846: ST_TO_ADDR
// if not tmp then
72847: LD_VAR 0 4
72851: NOT
72852: IFFALSE 72856
// continue ;
72854: GO 72771
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
72856: LD_VAR 0 4
72860: PUSH
72861: LD_INT 81
72863: PUSH
72864: LD_VAR 0 3
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: PPUSH
72873: CALL_OW 69
72877: IN
72878: PUSH
72879: LD_EXP 112
72883: PUSH
72884: LD_VAR 0 1
72888: ARRAY
72889: PUSH
72890: LD_VAR 0 2
72894: ARRAY
72895: PUSH
72896: LD_INT 1
72898: ARRAY
72899: PPUSH
72900: LD_EXP 112
72904: PUSH
72905: LD_VAR 0 1
72909: ARRAY
72910: PUSH
72911: LD_VAR 0 2
72915: ARRAY
72916: PUSH
72917: LD_INT 2
72919: ARRAY
72920: PPUSH
72921: CALL_OW 458
72925: AND
72926: IFFALSE 73020
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
72928: LD_EXP 112
72932: PUSH
72933: LD_VAR 0 1
72937: ARRAY
72938: PUSH
72939: LD_VAR 0 2
72943: ARRAY
72944: PUSH
72945: LD_INT 1
72947: ARRAY
72948: PPUSH
72949: LD_EXP 112
72953: PUSH
72954: LD_VAR 0 1
72958: ARRAY
72959: PUSH
72960: LD_VAR 0 2
72964: ARRAY
72965: PUSH
72966: LD_INT 2
72968: ARRAY
72969: PPUSH
72970: LD_VAR 0 3
72974: PPUSH
72975: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
72979: LD_ADDR_EXP 112
72983: PUSH
72984: LD_EXP 112
72988: PPUSH
72989: LD_VAR 0 1
72993: PPUSH
72994: LD_EXP 112
72998: PUSH
72999: LD_VAR 0 1
73003: ARRAY
73004: PPUSH
73005: LD_VAR 0 2
73009: PPUSH
73010: CALL_OW 3
73014: PPUSH
73015: CALL_OW 1
73019: ST_TO_ADDR
// end ; end ;
73020: GO 72771
73022: POP
73023: POP
// end ;
73024: GO 72689
73026: POP
73027: POP
// end ;
73028: PPOPN 4
73030: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
73031: LD_INT 0
73033: PPUSH
73034: PPUSH
// result := false ;
73035: LD_ADDR_VAR 0 4
73039: PUSH
73040: LD_INT 0
73042: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
73043: LD_VAR 0 1
73047: PPUSH
73048: CALL_OW 264
73052: PUSH
73053: LD_INT 81
73055: EQUAL
73056: NOT
73057: IFFALSE 73061
// exit ;
73059: GO 73301
// index := GetElementIndex ( minersList , unit ) ;
73061: LD_ADDR_VAR 0 5
73065: PUSH
73066: LD_EXP 111
73070: PPUSH
73071: LD_VAR 0 1
73075: PPUSH
73076: CALL 7555 0 2
73080: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
73081: LD_EXP 112
73085: PUSH
73086: LD_VAR 0 5
73090: ARRAY
73091: PUSH
73092: LD_EXP 113
73096: GREATEREQUAL
73097: IFFALSE 73101
// exit ;
73099: GO 73301
// ComMoveXY ( unit , x , y ) ;
73101: LD_VAR 0 1
73105: PPUSH
73106: LD_VAR 0 2
73110: PPUSH
73111: LD_VAR 0 3
73115: PPUSH
73116: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
73120: LD_INT 35
73122: PPUSH
73123: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
73127: LD_VAR 0 1
73131: PPUSH
73132: LD_VAR 0 2
73136: PPUSH
73137: LD_VAR 0 3
73141: PPUSH
73142: CALL 39296 0 3
73146: NOT
73147: PUSH
73148: LD_VAR 0 1
73152: PPUSH
73153: CALL_OW 314
73157: AND
73158: IFFALSE 73162
// exit ;
73160: GO 73301
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
73162: LD_VAR 0 2
73166: PPUSH
73167: LD_VAR 0 3
73171: PPUSH
73172: CALL_OW 428
73176: PUSH
73177: LD_VAR 0 1
73181: EQUAL
73182: PUSH
73183: LD_VAR 0 1
73187: PPUSH
73188: CALL_OW 314
73192: NOT
73193: AND
73194: IFFALSE 73120
// PlaySoundXY ( x , y , PlantMine ) ;
73196: LD_VAR 0 2
73200: PPUSH
73201: LD_VAR 0 3
73205: PPUSH
73206: LD_STRING PlantMine
73208: PPUSH
73209: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
73213: LD_VAR 0 2
73217: PPUSH
73218: LD_VAR 0 3
73222: PPUSH
73223: LD_VAR 0 1
73227: PPUSH
73228: CALL_OW 255
73232: PPUSH
73233: LD_INT 0
73235: PPUSH
73236: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
73240: LD_ADDR_EXP 112
73244: PUSH
73245: LD_EXP 112
73249: PPUSH
73250: LD_VAR 0 5
73254: PUSH
73255: LD_EXP 112
73259: PUSH
73260: LD_VAR 0 5
73264: ARRAY
73265: PUSH
73266: LD_INT 1
73268: PLUS
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PPUSH
73274: LD_VAR 0 2
73278: PUSH
73279: LD_VAR 0 3
73283: PUSH
73284: EMPTY
73285: LIST
73286: LIST
73287: PPUSH
73288: CALL 7770 0 3
73292: ST_TO_ADDR
// result := true ;
73293: LD_ADDR_VAR 0 4
73297: PUSH
73298: LD_INT 1
73300: ST_TO_ADDR
// end ;
73301: LD_VAR 0 4
73305: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
73306: LD_INT 0
73308: PPUSH
73309: PPUSH
73310: PPUSH
// if not unit in minersList then
73311: LD_VAR 0 1
73315: PUSH
73316: LD_EXP 111
73320: IN
73321: NOT
73322: IFFALSE 73326
// exit ;
73324: GO 73718
// index := GetElementIndex ( minersList , unit ) ;
73326: LD_ADDR_VAR 0 6
73330: PUSH
73331: LD_EXP 111
73335: PPUSH
73336: LD_VAR 0 1
73340: PPUSH
73341: CALL 7555 0 2
73345: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
73346: LD_ADDR_VAR 0 5
73350: PUSH
73351: DOUBLE
73352: LD_EXP 112
73356: PUSH
73357: LD_VAR 0 6
73361: ARRAY
73362: INC
73363: ST_TO_ADDR
73364: LD_INT 1
73366: PUSH
73367: FOR_DOWNTO
73368: IFFALSE 73529
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
73370: LD_EXP 112
73374: PUSH
73375: LD_VAR 0 6
73379: ARRAY
73380: PUSH
73381: LD_VAR 0 5
73385: ARRAY
73386: PUSH
73387: LD_INT 1
73389: ARRAY
73390: PUSH
73391: LD_VAR 0 2
73395: EQUAL
73396: PUSH
73397: LD_EXP 112
73401: PUSH
73402: LD_VAR 0 6
73406: ARRAY
73407: PUSH
73408: LD_VAR 0 5
73412: ARRAY
73413: PUSH
73414: LD_INT 2
73416: ARRAY
73417: PUSH
73418: LD_VAR 0 3
73422: EQUAL
73423: AND
73424: IFFALSE 73527
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73426: LD_EXP 112
73430: PUSH
73431: LD_VAR 0 6
73435: ARRAY
73436: PUSH
73437: LD_VAR 0 5
73441: ARRAY
73442: PUSH
73443: LD_INT 1
73445: ARRAY
73446: PPUSH
73447: LD_EXP 112
73451: PUSH
73452: LD_VAR 0 6
73456: ARRAY
73457: PUSH
73458: LD_VAR 0 5
73462: ARRAY
73463: PUSH
73464: LD_INT 2
73466: ARRAY
73467: PPUSH
73468: LD_VAR 0 1
73472: PPUSH
73473: CALL_OW 255
73477: PPUSH
73478: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73482: LD_ADDR_EXP 112
73486: PUSH
73487: LD_EXP 112
73491: PPUSH
73492: LD_VAR 0 6
73496: PPUSH
73497: LD_EXP 112
73501: PUSH
73502: LD_VAR 0 6
73506: ARRAY
73507: PPUSH
73508: LD_VAR 0 5
73512: PPUSH
73513: CALL_OW 3
73517: PPUSH
73518: CALL_OW 1
73522: ST_TO_ADDR
// exit ;
73523: POP
73524: POP
73525: GO 73718
// end ; end ;
73527: GO 73367
73529: POP
73530: POP
// for i := minerMinesList [ index ] downto 1 do
73531: LD_ADDR_VAR 0 5
73535: PUSH
73536: DOUBLE
73537: LD_EXP 112
73541: PUSH
73542: LD_VAR 0 6
73546: ARRAY
73547: INC
73548: ST_TO_ADDR
73549: LD_INT 1
73551: PUSH
73552: FOR_DOWNTO
73553: IFFALSE 73716
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
73555: LD_EXP 112
73559: PUSH
73560: LD_VAR 0 6
73564: ARRAY
73565: PUSH
73566: LD_VAR 0 5
73570: ARRAY
73571: PUSH
73572: LD_INT 1
73574: ARRAY
73575: PPUSH
73576: LD_EXP 112
73580: PUSH
73581: LD_VAR 0 6
73585: ARRAY
73586: PUSH
73587: LD_VAR 0 5
73591: ARRAY
73592: PUSH
73593: LD_INT 2
73595: ARRAY
73596: PPUSH
73597: LD_VAR 0 2
73601: PPUSH
73602: LD_VAR 0 3
73606: PPUSH
73607: CALL_OW 298
73611: PUSH
73612: LD_INT 6
73614: LESS
73615: IFFALSE 73714
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73617: LD_EXP 112
73621: PUSH
73622: LD_VAR 0 6
73626: ARRAY
73627: PUSH
73628: LD_VAR 0 5
73632: ARRAY
73633: PUSH
73634: LD_INT 1
73636: ARRAY
73637: PPUSH
73638: LD_EXP 112
73642: PUSH
73643: LD_VAR 0 6
73647: ARRAY
73648: PUSH
73649: LD_VAR 0 5
73653: ARRAY
73654: PUSH
73655: LD_INT 2
73657: ARRAY
73658: PPUSH
73659: LD_VAR 0 1
73663: PPUSH
73664: CALL_OW 255
73668: PPUSH
73669: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73673: LD_ADDR_EXP 112
73677: PUSH
73678: LD_EXP 112
73682: PPUSH
73683: LD_VAR 0 6
73687: PPUSH
73688: LD_EXP 112
73692: PUSH
73693: LD_VAR 0 6
73697: ARRAY
73698: PPUSH
73699: LD_VAR 0 5
73703: PPUSH
73704: CALL_OW 3
73708: PPUSH
73709: CALL_OW 1
73713: ST_TO_ADDR
// end ; end ;
73714: GO 73552
73716: POP
73717: POP
// end ;
73718: LD_VAR 0 4
73722: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
73723: LD_INT 0
73725: PPUSH
73726: PPUSH
73727: PPUSH
73728: PPUSH
73729: PPUSH
73730: PPUSH
73731: PPUSH
73732: PPUSH
73733: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
73734: LD_VAR 0 1
73738: PPUSH
73739: CALL_OW 264
73743: PUSH
73744: LD_INT 81
73746: EQUAL
73747: NOT
73748: PUSH
73749: LD_VAR 0 1
73753: PUSH
73754: LD_EXP 111
73758: IN
73759: NOT
73760: OR
73761: IFFALSE 73765
// exit ;
73763: GO 74087
// index := GetElementIndex ( minersList , unit ) ;
73765: LD_ADDR_VAR 0 6
73769: PUSH
73770: LD_EXP 111
73774: PPUSH
73775: LD_VAR 0 1
73779: PPUSH
73780: CALL 7555 0 2
73784: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
73785: LD_ADDR_VAR 0 8
73789: PUSH
73790: LD_EXP 113
73794: PUSH
73795: LD_EXP 112
73799: PUSH
73800: LD_VAR 0 6
73804: ARRAY
73805: MINUS
73806: ST_TO_ADDR
// if not minesFreeAmount then
73807: LD_VAR 0 8
73811: NOT
73812: IFFALSE 73816
// exit ;
73814: GO 74087
// tmp := [ ] ;
73816: LD_ADDR_VAR 0 7
73820: PUSH
73821: EMPTY
73822: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
73823: LD_ADDR_VAR 0 5
73827: PUSH
73828: DOUBLE
73829: LD_INT 1
73831: DEC
73832: ST_TO_ADDR
73833: LD_VAR 0 8
73837: PUSH
73838: FOR_TO
73839: IFFALSE 74034
// begin _d := rand ( 0 , 5 ) ;
73841: LD_ADDR_VAR 0 11
73845: PUSH
73846: LD_INT 0
73848: PPUSH
73849: LD_INT 5
73851: PPUSH
73852: CALL_OW 12
73856: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
73857: LD_ADDR_VAR 0 12
73861: PUSH
73862: LD_INT 2
73864: PPUSH
73865: LD_INT 6
73867: PPUSH
73868: CALL_OW 12
73872: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
73873: LD_ADDR_VAR 0 9
73877: PUSH
73878: LD_VAR 0 2
73882: PPUSH
73883: LD_VAR 0 11
73887: PPUSH
73888: LD_VAR 0 12
73892: PPUSH
73893: CALL_OW 272
73897: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
73898: LD_ADDR_VAR 0 10
73902: PUSH
73903: LD_VAR 0 3
73907: PPUSH
73908: LD_VAR 0 11
73912: PPUSH
73913: LD_VAR 0 12
73917: PPUSH
73918: CALL_OW 273
73922: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
73923: LD_VAR 0 9
73927: PPUSH
73928: LD_VAR 0 10
73932: PPUSH
73933: CALL_OW 488
73937: PUSH
73938: LD_VAR 0 9
73942: PUSH
73943: LD_VAR 0 10
73947: PUSH
73948: EMPTY
73949: LIST
73950: LIST
73951: PUSH
73952: LD_VAR 0 7
73956: IN
73957: NOT
73958: AND
73959: PUSH
73960: LD_VAR 0 9
73964: PPUSH
73965: LD_VAR 0 10
73969: PPUSH
73970: CALL_OW 458
73974: NOT
73975: AND
73976: IFFALSE 74018
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
73978: LD_ADDR_VAR 0 7
73982: PUSH
73983: LD_VAR 0 7
73987: PPUSH
73988: LD_VAR 0 7
73992: PUSH
73993: LD_INT 1
73995: PLUS
73996: PPUSH
73997: LD_VAR 0 9
74001: PUSH
74002: LD_VAR 0 10
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: PPUSH
74011: CALL_OW 1
74015: ST_TO_ADDR
74016: GO 74032
// i := i - 1 ;
74018: LD_ADDR_VAR 0 5
74022: PUSH
74023: LD_VAR 0 5
74027: PUSH
74028: LD_INT 1
74030: MINUS
74031: ST_TO_ADDR
// end ;
74032: GO 73838
74034: POP
74035: POP
// for i in tmp do
74036: LD_ADDR_VAR 0 5
74040: PUSH
74041: LD_VAR 0 7
74045: PUSH
74046: FOR_IN
74047: IFFALSE 74085
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
74049: LD_VAR 0 1
74053: PPUSH
74054: LD_VAR 0 5
74058: PUSH
74059: LD_INT 1
74061: ARRAY
74062: PPUSH
74063: LD_VAR 0 5
74067: PUSH
74068: LD_INT 2
74070: ARRAY
74071: PPUSH
74072: CALL 73031 0 3
74076: NOT
74077: IFFALSE 74083
// exit ;
74079: POP
74080: POP
74081: GO 74087
74083: GO 74046
74085: POP
74086: POP
// end ;
74087: LD_VAR 0 4
74091: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
74092: LD_INT 0
74094: PPUSH
74095: PPUSH
74096: PPUSH
74097: PPUSH
74098: PPUSH
74099: PPUSH
74100: PPUSH
74101: PPUSH
74102: PPUSH
// if GetClass ( unit ) <> class_sniper then
74103: LD_VAR 0 1
74107: PPUSH
74108: CALL_OW 257
74112: PUSH
74113: LD_INT 5
74115: NONEQUAL
74116: IFFALSE 74120
// exit ;
74118: GO 74586
// dist := 8 ;
74120: LD_ADDR_VAR 0 5
74124: PUSH
74125: LD_INT 8
74127: ST_TO_ADDR
// viewRange := 12 ;
74128: LD_ADDR_VAR 0 8
74132: PUSH
74133: LD_INT 12
74135: ST_TO_ADDR
// side := GetSide ( unit ) ;
74136: LD_ADDR_VAR 0 6
74140: PUSH
74141: LD_VAR 0 1
74145: PPUSH
74146: CALL_OW 255
74150: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
74151: LD_INT 61
74153: PPUSH
74154: LD_VAR 0 6
74158: PPUSH
74159: CALL_OW 321
74163: PUSH
74164: LD_INT 2
74166: EQUAL
74167: IFFALSE 74177
// viewRange := 16 ;
74169: LD_ADDR_VAR 0 8
74173: PUSH
74174: LD_INT 16
74176: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
74177: LD_VAR 0 1
74181: PPUSH
74182: LD_VAR 0 2
74186: PPUSH
74187: LD_VAR 0 3
74191: PPUSH
74192: CALL_OW 297
74196: PUSH
74197: LD_VAR 0 5
74201: GREATER
74202: IFFALSE 74281
// begin ComMoveXY ( unit , x , y ) ;
74204: LD_VAR 0 1
74208: PPUSH
74209: LD_VAR 0 2
74213: PPUSH
74214: LD_VAR 0 3
74218: PPUSH
74219: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
74223: LD_INT 35
74225: PPUSH
74226: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
74230: LD_VAR 0 1
74234: PPUSH
74235: LD_VAR 0 2
74239: PPUSH
74240: LD_VAR 0 3
74244: PPUSH
74245: CALL 39296 0 3
74249: NOT
74250: IFFALSE 74254
// exit ;
74252: GO 74586
// until GetDistUnitXY ( unit , x , y ) < dist ;
74254: LD_VAR 0 1
74258: PPUSH
74259: LD_VAR 0 2
74263: PPUSH
74264: LD_VAR 0 3
74268: PPUSH
74269: CALL_OW 297
74273: PUSH
74274: LD_VAR 0 5
74278: LESS
74279: IFFALSE 74223
// end ; ComTurnXY ( unit , x , y ) ;
74281: LD_VAR 0 1
74285: PPUSH
74286: LD_VAR 0 2
74290: PPUSH
74291: LD_VAR 0 3
74295: PPUSH
74296: CALL_OW 118
// repeat if Multiplayer then
74300: LD_OWVAR 4
74304: IFFALSE 74315
// wait ( 35 ) else
74306: LD_INT 35
74308: PPUSH
74309: CALL_OW 67
74313: GO 74322
// wait ( 5 ) ;
74315: LD_INT 5
74317: PPUSH
74318: CALL_OW 67
// _d := GetDir ( unit ) ;
74322: LD_ADDR_VAR 0 11
74326: PUSH
74327: LD_VAR 0 1
74331: PPUSH
74332: CALL_OW 254
74336: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
74337: LD_ADDR_VAR 0 7
74341: PUSH
74342: LD_VAR 0 1
74346: PPUSH
74347: CALL_OW 250
74351: PPUSH
74352: LD_VAR 0 1
74356: PPUSH
74357: CALL_OW 251
74361: PPUSH
74362: LD_VAR 0 2
74366: PPUSH
74367: LD_VAR 0 3
74371: PPUSH
74372: CALL 41904 0 4
74376: ST_TO_ADDR
// until dir = _d ;
74377: LD_VAR 0 7
74381: PUSH
74382: LD_VAR 0 11
74386: EQUAL
74387: IFFALSE 74300
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
74389: LD_ADDR_VAR 0 9
74393: PUSH
74394: LD_VAR 0 1
74398: PPUSH
74399: CALL_OW 250
74403: PPUSH
74404: LD_VAR 0 7
74408: PPUSH
74409: LD_VAR 0 5
74413: PPUSH
74414: CALL_OW 272
74418: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
74419: LD_ADDR_VAR 0 10
74423: PUSH
74424: LD_VAR 0 1
74428: PPUSH
74429: CALL_OW 251
74433: PPUSH
74434: LD_VAR 0 7
74438: PPUSH
74439: LD_VAR 0 5
74443: PPUSH
74444: CALL_OW 273
74448: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74449: LD_VAR 0 9
74453: PPUSH
74454: LD_VAR 0 10
74458: PPUSH
74459: CALL_OW 488
74463: NOT
74464: IFFALSE 74468
// exit ;
74466: GO 74586
// ComAnimCustom ( unit , 1 ) ;
74468: LD_VAR 0 1
74472: PPUSH
74473: LD_INT 1
74475: PPUSH
74476: CALL_OW 592
// p := 0 ;
74480: LD_ADDR_VAR 0 12
74484: PUSH
74485: LD_INT 0
74487: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
74488: LD_VAR 0 9
74492: PPUSH
74493: LD_VAR 0 10
74497: PPUSH
74498: LD_VAR 0 6
74502: PPUSH
74503: LD_VAR 0 8
74507: PPUSH
74508: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
74512: LD_INT 35
74514: PPUSH
74515: CALL_OW 67
// p := Inc ( p ) ;
74519: LD_ADDR_VAR 0 12
74523: PUSH
74524: LD_VAR 0 12
74528: PPUSH
74529: CALL 41860 0 1
74533: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
74534: LD_VAR 0 12
74538: PUSH
74539: LD_INT 3
74541: EQUAL
74542: PUSH
74543: LD_VAR 0 1
74547: PPUSH
74548: CALL_OW 302
74552: NOT
74553: OR
74554: PUSH
74555: LD_VAR 0 1
74559: PPUSH
74560: CALL_OW 301
74564: OR
74565: IFFALSE 74512
// RemoveSeeing ( _x , _y , side ) ;
74567: LD_VAR 0 9
74571: PPUSH
74572: LD_VAR 0 10
74576: PPUSH
74577: LD_VAR 0 6
74581: PPUSH
74582: CALL_OW 331
// end ;
74586: LD_VAR 0 4
74590: RET
