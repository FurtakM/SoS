// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45693 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46039 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 9
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 27
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 17
 835: PUSH
 836: LD_INT 7
 838: PUSH
 839: LD_INT 8
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 10
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 12
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea , MZSpecialArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 16
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: LD_INT 15
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 17
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 4
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 22
 921: PUSH
 922: LD_EXP 4
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 23
 935: PUSH
 936: LD_EXP 4
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 13
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 25
 963: PUSH
 964: LD_EXP 4
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 4
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 4
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// if gameType = GameTypeKing then
1009: LD_VAR 0 1
1013: PUSH
1014: LD_INT 3
1016: EQUAL
1017: IFFALSE 1057
// begin mpKingArea := kingArea ;
1019: LD_ADDR_EXP 32
1023: PUSH
1024: LD_INT 16
1026: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1027: LD_ADDR_EXP 33
1031: PUSH
1032: LD_EXP 4
1036: PUSH
1037: LD_INT 8
1039: ARRAY
1040: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1041: LD_ADDR_EXP 35
1045: PUSH
1046: LD_EXP 4
1050: PUSH
1051: LD_INT 10
1053: ARRAY
1054: ST_TO_ADDR
// end else
1055: GO 1081
// begin mpKingArea := 0 ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// mpPoints := 0 ;
1065: LD_ADDR_EXP 33
1069: PUSH
1070: LD_INT 0
1072: ST_TO_ADDR
// mpEmissions := 0 ;
1073: LD_ADDR_EXP 35
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1081: LD_EXP 4
1085: PUSH
1086: LD_INT 9
1088: ARRAY
1089: IFFALSE 1221
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1091: LD_ADDR_EXP 34
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 2
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 12
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 24
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_INT 12
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 23
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 21
1178: PUSH
1179: LD_INT 1
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 42
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 21
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 42
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1221: LD_ADDR_EXP 14
1225: PUSH
1226: LD_EXP 4
1230: PUSH
1231: LD_INT 11
1233: ARRAY
1234: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1235: LD_ADDR_EXP 20
1239: PUSH
1240: LD_EXP 4
1244: PUSH
1245: LD_INT 12
1247: ARRAY
1248: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1249: LD_ADDR_EXP 24
1253: PUSH
1254: LD_EXP 4
1258: PUSH
1259: LD_INT 13
1261: ARRAY
1262: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1263: LD_ADDR_EXP 31
1267: PUSH
1268: LD_EXP 4
1272: PUSH
1273: LD_INT 14
1275: ARRAY
1276: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1277: LD_ADDR_EXP 28
1281: PUSH
1282: LD_EXP 4
1286: PUSH
1287: LD_INT 15
1289: ARRAY
1290: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1291: LD_ADDR_EXP 26
1295: PUSH
1296: LD_EXP 4
1300: PUSH
1301: LD_INT 18
1303: ARRAY
1304: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1305: LD_ADDR_EXP 18
1309: PUSH
1310: LD_EXP 4
1314: PUSH
1315: LD_INT 21
1317: ARRAY
1318: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1319: LD_ADDR_EXP 29
1323: PUSH
1324: LD_INT 3
1326: PUSH
1327: LD_INT 2
1329: PUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 4
1335: PUSH
1336: LD_INT 6
1338: PUSH
1339: LD_INT 5
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1350: LD_ADDR_VAR 0 8
1354: PUSH
1355: LD_INT 18
1357: PPUSH
1358: LD_INT 2
1360: PPUSH
1361: CALL 45148 0 2
1365: PUSH
1366: LD_INT 19
1368: PPUSH
1369: LD_INT 1
1371: PPUSH
1372: CALL 45148 0 2
1376: PUSH
1377: LD_INT 20
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL 45148 0 2
1387: PUSH
1388: LD_INT 21
1390: PPUSH
1391: LD_INT 3
1393: PPUSH
1394: CALL 45148 0 2
1398: PUSH
1399: LD_INT 22
1401: PPUSH
1402: LD_INT 4
1404: PPUSH
1405: CALL 45148 0 2
1409: PUSH
1410: LD_INT 23
1412: PPUSH
1413: LD_INT 5
1415: PPUSH
1416: CALL 45148 0 2
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1429: LD_ADDR_VAR 0 3
1433: PUSH
1434: DOUBLE
1435: LD_INT 1
1437: DEC
1438: ST_TO_ADDR
1439: LD_VAR 0 8
1443: PPUSH
1444: CALL 4994 0 1
1448: PUSH
1449: FOR_TO
1450: IFFALSE 1554
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1452: LD_ADDR_EXP 19
1456: PUSH
1457: LD_EXP 19
1461: PPUSH
1462: LD_VAR 0 3
1466: PPUSH
1467: LD_VAR 0 8
1471: PUSH
1472: LD_VAR 0 3
1476: ARRAY
1477: PUSH
1478: LD_INT 1
1480: ARRAY
1481: PPUSH
1482: LD_VAR 0 8
1486: PUSH
1487: LD_VAR 0 3
1491: ARRAY
1492: PUSH
1493: LD_INT 3
1495: ARRAY
1496: PPUSH
1497: LD_INT 10
1499: PPUSH
1500: CALL_OW 272
1504: PUSH
1505: LD_VAR 0 8
1509: PUSH
1510: LD_VAR 0 3
1514: ARRAY
1515: PUSH
1516: LD_INT 2
1518: ARRAY
1519: PPUSH
1520: LD_VAR 0 8
1524: PUSH
1525: LD_VAR 0 3
1529: ARRAY
1530: PUSH
1531: LD_INT 3
1533: ARRAY
1534: PPUSH
1535: LD_INT 10
1537: PPUSH
1538: CALL_OW 273
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PPUSH
1547: CALL_OW 1
1551: ST_TO_ADDR
1552: GO 1449
1554: POP
1555: POP
// if hasOil then
1556: LD_VAR 0 5
1560: IFFALSE 1671
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: LD_EXP 4
1571: PUSH
1572: LD_INT 6
1574: ARRAY
1575: PUSH
1576: LD_INT 2
1578: EQUAL
1579: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1580: LD_ADDR_EXP 10
1584: PUSH
1585: LD_INT 24
1587: PPUSH
1588: LD_VAR 0 4
1592: PPUSH
1593: CALL 44981 0 2
1597: PUSH
1598: LD_INT 26
1600: PPUSH
1601: LD_VAR 0 4
1605: PPUSH
1606: CALL 44981 0 2
1610: PUSH
1611: LD_INT 28
1613: PPUSH
1614: LD_VAR 0 4
1618: PPUSH
1619: CALL 44981 0 2
1623: PUSH
1624: LD_INT 30
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL 44981 0 2
1636: PUSH
1637: LD_INT 32
1639: PPUSH
1640: LD_VAR 0 4
1644: PPUSH
1645: CALL 44981 0 2
1649: PUSH
1650: LD_INT 34
1652: PPUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL 44981 0 2
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// end ; if hasSib then
1671: LD_VAR 0 6
1675: IFFALSE 1786
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1677: LD_ADDR_VAR 0 4
1681: PUSH
1682: LD_EXP 4
1686: PUSH
1687: LD_INT 7
1689: ARRAY
1690: PUSH
1691: LD_INT 2
1693: EQUAL
1694: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1695: LD_ADDR_EXP 11
1699: PUSH
1700: LD_INT 25
1702: PPUSH
1703: LD_VAR 0 4
1707: PPUSH
1708: CALL 44981 0 2
1712: PUSH
1713: LD_INT 27
1715: PPUSH
1716: LD_VAR 0 4
1720: PPUSH
1721: CALL 44981 0 2
1725: PUSH
1726: LD_INT 29
1728: PPUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: CALL 44981 0 2
1738: PUSH
1739: LD_INT 31
1741: PPUSH
1742: LD_VAR 0 4
1746: PPUSH
1747: CALL 44981 0 2
1751: PUSH
1752: LD_INT 33
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL 44981 0 2
1764: PUSH
1765: LD_INT 35
1767: PPUSH
1768: LD_VAR 0 4
1772: PPUSH
1773: CALL 44981 0 2
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1786: LD_VAR 0 7
1790: PUSH
1791: LD_INT 1
1793: GREATEREQUAL
1794: IFFALSE 1806
// mpDepots := startPos ;
1796: LD_ADDR_EXP 12
1800: PUSH
1801: LD_VAR 0 8
1805: ST_TO_ADDR
// if baseLevel >= 2 then
1806: LD_VAR 0 7
1810: PUSH
1811: LD_INT 2
1813: GREATEREQUAL
1814: IFFALSE 2129
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1816: LD_ADDR_EXP 15
1820: PUSH
1821: LD_INT 31
1823: PUSH
1824: LD_INT 36
1826: PPUSH
1827: LD_INT 5
1829: PPUSH
1830: CALL 45148 0 2
1834: ADD
1835: PUSH
1836: LD_INT 31
1838: PUSH
1839: LD_INT 37
1841: PPUSH
1842: LD_INT 4
1844: PPUSH
1845: CALL 45148 0 2
1849: ADD
1850: PUSH
1851: LD_INT 4
1853: PUSH
1854: LD_INT 38
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL 45148 0 2
1864: ADD
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 31
1873: PUSH
1874: LD_INT 39
1876: PPUSH
1877: LD_INT 4
1879: PPUSH
1880: CALL 45148 0 2
1884: ADD
1885: PUSH
1886: LD_INT 31
1888: PUSH
1889: LD_INT 40
1891: PPUSH
1892: LD_INT 5
1894: PPUSH
1895: CALL 45148 0 2
1899: ADD
1900: PUSH
1901: LD_INT 4
1903: PUSH
1904: LD_INT 41
1906: PPUSH
1907: LD_INT 4
1909: PPUSH
1910: CALL 45148 0 2
1914: ADD
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 31
1923: PUSH
1924: LD_INT 42
1926: PPUSH
1927: LD_INT 3
1929: PPUSH
1930: CALL 45148 0 2
1934: ADD
1935: PUSH
1936: LD_INT 31
1938: PUSH
1939: LD_INT 43
1941: PPUSH
1942: LD_INT 4
1944: PPUSH
1945: CALL 45148 0 2
1949: ADD
1950: PUSH
1951: LD_INT 4
1953: PUSH
1954: LD_INT 44
1956: PPUSH
1957: LD_INT 3
1959: PPUSH
1960: CALL 45148 0 2
1964: ADD
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 31
1973: PUSH
1974: LD_INT 45
1976: PPUSH
1977: LD_INT 1
1979: PPUSH
1980: CALL 45148 0 2
1984: ADD
1985: PUSH
1986: LD_INT 31
1988: PUSH
1989: LD_INT 46
1991: PPUSH
1992: LD_INT 5
1994: PPUSH
1995: CALL 45148 0 2
1999: ADD
2000: PUSH
2001: LD_INT 4
2003: PUSH
2004: LD_INT 47
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 45148 0 2
2014: ADD
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 31
2023: PUSH
2024: LD_INT 48
2026: PPUSH
2027: LD_INT 2
2029: PPUSH
2030: CALL 45148 0 2
2034: ADD
2035: PUSH
2036: LD_INT 31
2038: PUSH
2039: LD_INT 49
2041: PPUSH
2042: LD_INT 0
2044: PPUSH
2045: CALL 45148 0 2
2049: ADD
2050: PUSH
2051: LD_INT 4
2053: PUSH
2054: LD_INT 50
2056: PPUSH
2057: LD_INT 1
2059: PPUSH
2060: CALL 45148 0 2
2064: ADD
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 31
2073: PUSH
2074: LD_INT 51
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL 45148 0 2
2084: ADD
2085: PUSH
2086: LD_INT 31
2088: PUSH
2089: LD_INT 52
2091: PPUSH
2092: LD_INT 2
2094: PPUSH
2095: CALL 45148 0 2
2099: ADD
2100: PUSH
2101: LD_INT 4
2103: PUSH
2104: LD_INT 53
2106: PPUSH
2107: LD_INT 2
2109: PPUSH
2110: CALL 45148 0 2
2114: ADD
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: ST_TO_ADDR
// end ; end ;
2129: LD_VAR 0 2
2133: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2134: GO 2136
2136: DISABLE
2137: LD_INT 0
2139: PPUSH
2140: PPUSH
2141: PPUSH
2142: PPUSH
2143: PPUSH
2144: PPUSH
2145: PPUSH
2146: PPUSH
// begin if not mpShipments then
2147: LD_EXP 25
2151: NOT
2152: IFFALSE 2156
// exit ;
2154: GO 2721
// case mpShipments of 1 :
2156: LD_EXP 25
2160: PUSH
2161: LD_INT 1
2163: DOUBLE
2164: EQUAL
2165: IFTRUE 2169
2167: GO 2204
2169: POP
// begin time := 0 0$30 ;
2170: LD_ADDR_VAR 0 4
2174: PUSH
2175: LD_INT 1050
2177: ST_TO_ADDR
// normalTime := 0 0$30 ;
2178: LD_ADDR_VAR 0 6
2182: PUSH
2183: LD_INT 1050
2185: ST_TO_ADDR
// maxTime := 1 1$20 ;
2186: LD_ADDR_VAR 0 8
2190: PUSH
2191: LD_INT 2800
2193: ST_TO_ADDR
// delayTime := 0 0$5 ;
2194: LD_ADDR_VAR 0 7
2198: PUSH
2199: LD_INT 175
2201: ST_TO_ADDR
// end ; 2 :
2202: GO 2334
2204: LD_INT 2
2206: DOUBLE
2207: EQUAL
2208: IFTRUE 2212
2210: GO 2247
2212: POP
// begin time := 0 0$25 ;
2213: LD_ADDR_VAR 0 4
2217: PUSH
2218: LD_INT 875
2220: ST_TO_ADDR
// normalTime := 0 0$25 ;
2221: LD_ADDR_VAR 0 6
2225: PUSH
2226: LD_INT 875
2228: ST_TO_ADDR
// maxTime := 1 1$10 ;
2229: LD_ADDR_VAR 0 8
2233: PUSH
2234: LD_INT 2450
2236: ST_TO_ADDR
// delayTime := 0 0$4 ;
2237: LD_ADDR_VAR 0 7
2241: PUSH
2242: LD_INT 140
2244: ST_TO_ADDR
// end ; 3 :
2245: GO 2334
2247: LD_INT 3
2249: DOUBLE
2250: EQUAL
2251: IFTRUE 2255
2253: GO 2290
2255: POP
// begin time := 0 0$20 ;
2256: LD_ADDR_VAR 0 4
2260: PUSH
2261: LD_INT 700
2263: ST_TO_ADDR
// normalTime := 0 0$20 ;
2264: LD_ADDR_VAR 0 6
2268: PUSH
2269: LD_INT 700
2271: ST_TO_ADDR
// maxTime := 1 1$00 ;
2272: LD_ADDR_VAR 0 8
2276: PUSH
2277: LD_INT 2100
2279: ST_TO_ADDR
// delayTime := 0 0$3 ;
2280: LD_ADDR_VAR 0 7
2284: PUSH
2285: LD_INT 105
2287: ST_TO_ADDR
// end ; 4 :
2288: GO 2334
2290: LD_INT 4
2292: DOUBLE
2293: EQUAL
2294: IFTRUE 2298
2296: GO 2333
2298: POP
// begin time := 0 0$15 ;
2299: LD_ADDR_VAR 0 4
2303: PUSH
2304: LD_INT 525
2306: ST_TO_ADDR
// normalTime := 0 0$15 ;
2307: LD_ADDR_VAR 0 6
2311: PUSH
2312: LD_INT 525
2314: ST_TO_ADDR
// maxTime := 0 0$55 ;
2315: LD_ADDR_VAR 0 8
2319: PUSH
2320: LD_INT 1925
2322: ST_TO_ADDR
// delayTime := 0 0$2 ;
2323: LD_ADDR_VAR 0 7
2327: PUSH
2328: LD_INT 70
2330: ST_TO_ADDR
// end ; end ;
2331: GO 2334
2333: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2334: LD_ADDR_VAR 0 3
2338: PUSH
2339: LD_INT 7
2341: PUSH
2342: LD_INT 8
2344: PUSH
2345: LD_INT 9
2347: PUSH
2348: LD_INT 10
2350: PUSH
2351: LD_INT 11
2353: PUSH
2354: LD_INT 12
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// areas := [ ] ;
2365: LD_ADDR_VAR 0 5
2369: PUSH
2370: EMPTY
2371: ST_TO_ADDR
// for i := 1 to 8 do
2372: LD_ADDR_VAR 0 1
2376: PUSH
2377: DOUBLE
2378: LD_INT 1
2380: DEC
2381: ST_TO_ADDR
2382: LD_INT 8
2384: PUSH
2385: FOR_TO
2386: IFFALSE 2433
// begin if not mpSidePositions [ i ] then
2388: LD_EXP 5
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: NOT
2399: IFFALSE 2403
// continue ;
2401: GO 2385
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2403: LD_ADDR_VAR 0 5
2407: PUSH
2408: LD_VAR 0 5
2412: PUSH
2413: LD_VAR 0 3
2417: PUSH
2418: LD_EXP 5
2422: PUSH
2423: LD_VAR 0 1
2427: ARRAY
2428: ARRAY
2429: ADD
2430: ST_TO_ADDR
// end ;
2431: GO 2385
2433: POP
2434: POP
// x := 1 ;
2435: LD_ADDR_VAR 0 2
2439: PUSH
2440: LD_INT 1
2442: ST_TO_ADDR
// repeat wait ( time ) ;
2443: LD_VAR 0 4
2447: PPUSH
2448: CALL_OW 67
// x := Inc ( x ) ;
2452: LD_ADDR_VAR 0 2
2456: PUSH
2457: LD_VAR 0 2
2461: PPUSH
2462: CALL 41964 0 1
2466: ST_TO_ADDR
// if x > 5 then
2467: LD_VAR 0 2
2471: PUSH
2472: LD_INT 5
2474: GREATER
2475: IFFALSE 2485
// x := 1 ;
2477: LD_ADDR_VAR 0 2
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// for i in areas do
2485: LD_ADDR_VAR 0 1
2489: PUSH
2490: LD_VAR 0 5
2494: PUSH
2495: FOR_IN
2496: IFFALSE 2535
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2498: LD_VAR 0 1
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL_OW 287
2510: PUSH
2511: LD_INT 20
2513: LESS
2514: IFFALSE 2533
// begin CreateCratesArea ( x , i , true ) ;
2516: LD_VAR 0 2
2520: PPUSH
2521: LD_VAR 0 1
2525: PPUSH
2526: LD_INT 1
2528: PPUSH
2529: CALL_OW 55
// end ; end ;
2533: GO 2495
2535: POP
2536: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 100 then
2537: LD_INT 14
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: CALL_OW 287
2547: PUSH
2548: LD_INT 100
2550: LESS
2551: IFFALSE 2595
// for i := 1 to Count ( areas ) do
2553: LD_ADDR_VAR 0 1
2557: PUSH
2558: DOUBLE
2559: LD_INT 1
2561: DEC
2562: ST_TO_ADDR
2563: LD_VAR 0 5
2567: PPUSH
2568: CALL 4994 0 1
2572: PUSH
2573: FOR_TO
2574: IFFALSE 2593
// CreateCratesArea ( x , MZBaseArea , true ) ;
2576: LD_VAR 0 2
2580: PPUSH
2581: LD_INT 14
2583: PPUSH
2584: LD_INT 1
2586: PPUSH
2587: CALL_OW 55
2591: GO 2573
2593: POP
2594: POP
// if GetResourceArea ( MZSpecialArea , mat_cans ) = 0 then
2595: LD_INT 15
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 287
2605: PUSH
2606: LD_INT 0
2608: EQUAL
2609: IFFALSE 2648
// begin for i := 1 to 3 do
2611: LD_ADDR_VAR 0 1
2615: PUSH
2616: DOUBLE
2617: LD_INT 1
2619: DEC
2620: ST_TO_ADDR
2621: LD_INT 3
2623: PUSH
2624: FOR_TO
2625: IFFALSE 2644
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2627: LD_VAR 0 2
2631: PPUSH
2632: LD_INT 15
2634: PPUSH
2635: LD_INT 1
2637: PPUSH
2638: CALL_OW 55
2642: GO 2624
2644: POP
2645: POP
// end else
2646: GO 2679
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
2648: LD_INT 15
2650: PPUSH
2651: LD_INT 1
2653: PPUSH
2654: CALL_OW 287
2658: PUSH
2659: LD_INT 30
2661: LESS
2662: IFFALSE 2679
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2664: LD_VAR 0 2
2668: PPUSH
2669: LD_INT 15
2671: PPUSH
2672: LD_INT 1
2674: PPUSH
2675: CALL_OW 55
// time := time + delayTime ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 4
2688: PUSH
2689: LD_VAR 0 7
2693: PLUS
2694: ST_TO_ADDR
// if time > maxTime then
2695: LD_VAR 0 4
2699: PUSH
2700: LD_VAR 0 8
2704: GREATER
2705: IFFALSE 2717
// time := normalTime ;
2707: LD_ADDR_VAR 0 4
2711: PUSH
2712: LD_VAR 0 6
2716: ST_TO_ADDR
// until false ;
2717: LD_INT 0
2719: IFFALSE 2443
// end ; end_of_file
2721: PPOPN 8
2723: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2724: LD_VAR 0 1
2728: PPUSH
2729: CALL 53980 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2733: LD_VAR 0 1
2737: PPUSH
2738: CALL 50625 0 1
// end ;
2742: PPOPN 1
2744: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2745: LD_VAR 0 1
2749: PPUSH
2750: CALL 53997 0 1
// end ;
2754: PPOPN 1
2756: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2757: LD_VAR 0 1
2761: PPUSH
2762: CALL 51290 0 1
2766: PPOPN 1
2768: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2769: LD_VAR 0 1
2773: PPUSH
2774: LD_VAR 0 2
2778: PPUSH
2779: CALL 54038 0 2
2783: PPOPN 2
2785: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2786: LD_VAR 0 1
2790: PPUSH
2791: LD_VAR 0 2
2795: PPUSH
2796: LD_VAR 0 3
2800: PPUSH
2801: CALL 51343 0 3
2805: PPOPN 3
2807: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2808: LD_INT 0
2810: PPUSH
2811: PPUSH
// if exist_mode then
2812: LD_VAR 0 2
2816: IFFALSE 2862
// begin unit := CreateCharacter ( prefix & ident ) ;
2818: LD_ADDR_VAR 0 5
2822: PUSH
2823: LD_VAR 0 3
2827: PUSH
2828: LD_VAR 0 1
2832: STR
2833: PPUSH
2834: CALL_OW 34
2838: ST_TO_ADDR
// if unit then
2839: LD_VAR 0 5
2843: IFFALSE 2860
// DeleteCharacters ( prefix & ident ) ;
2845: LD_VAR 0 3
2849: PUSH
2850: LD_VAR 0 1
2854: STR
2855: PPUSH
2856: CALL_OW 40
// end else
2860: GO 2877
// unit := NewCharacter ( ident ) ;
2862: LD_ADDR_VAR 0 5
2866: PUSH
2867: LD_VAR 0 1
2871: PPUSH
2872: CALL_OW 25
2876: ST_TO_ADDR
// result := unit ;
2877: LD_ADDR_VAR 0 4
2881: PUSH
2882: LD_VAR 0 5
2886: ST_TO_ADDR
// end ;
2887: LD_VAR 0 4
2891: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
2892: LD_INT 0
2894: PPUSH
2895: PPUSH
// if exist_mode then
2896: LD_VAR 0 2
2900: IFFALSE 2925
// unit := CreateCharacter ( prefix & ident ) else
2902: LD_ADDR_VAR 0 5
2906: PUSH
2907: LD_VAR 0 3
2911: PUSH
2912: LD_VAR 0 1
2916: STR
2917: PPUSH
2918: CALL_OW 34
2922: ST_TO_ADDR
2923: GO 2940
// unit := NewCharacter ( ident ) ;
2925: LD_ADDR_VAR 0 5
2929: PUSH
2930: LD_VAR 0 1
2934: PPUSH
2935: CALL_OW 25
2939: ST_TO_ADDR
// result := unit ;
2940: LD_ADDR_VAR 0 4
2944: PUSH
2945: LD_VAR 0 5
2949: ST_TO_ADDR
// end ;
2950: LD_VAR 0 4
2954: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2955: LD_INT 0
2957: PPUSH
2958: PPUSH
// if not side or not nation then
2959: LD_VAR 0 1
2963: NOT
2964: PUSH
2965: LD_VAR 0 2
2969: NOT
2970: OR
2971: IFFALSE 2975
// exit ;
2973: GO 3743
// case nation of nation_american :
2975: LD_VAR 0 2
2979: PUSH
2980: LD_INT 1
2982: DOUBLE
2983: EQUAL
2984: IFTRUE 2988
2986: GO 3202
2988: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2989: LD_ADDR_VAR 0 4
2993: PUSH
2994: LD_INT 35
2996: PUSH
2997: LD_INT 45
2999: PUSH
3000: LD_INT 46
3002: PUSH
3003: LD_INT 47
3005: PUSH
3006: LD_INT 82
3008: PUSH
3009: LD_INT 83
3011: PUSH
3012: LD_INT 84
3014: PUSH
3015: LD_INT 85
3017: PUSH
3018: LD_INT 86
3020: PUSH
3021: LD_INT 1
3023: PUSH
3024: LD_INT 2
3026: PUSH
3027: LD_INT 6
3029: PUSH
3030: LD_INT 15
3032: PUSH
3033: LD_INT 16
3035: PUSH
3036: LD_INT 7
3038: PUSH
3039: LD_INT 12
3041: PUSH
3042: LD_INT 13
3044: PUSH
3045: LD_INT 10
3047: PUSH
3048: LD_INT 14
3050: PUSH
3051: LD_INT 20
3053: PUSH
3054: LD_INT 21
3056: PUSH
3057: LD_INT 22
3059: PUSH
3060: LD_INT 25
3062: PUSH
3063: LD_INT 32
3065: PUSH
3066: LD_INT 27
3068: PUSH
3069: LD_INT 36
3071: PUSH
3072: LD_INT 69
3074: PUSH
3075: LD_INT 39
3077: PUSH
3078: LD_INT 34
3080: PUSH
3081: LD_INT 40
3083: PUSH
3084: LD_INT 48
3086: PUSH
3087: LD_INT 49
3089: PUSH
3090: LD_INT 50
3092: PUSH
3093: LD_INT 51
3095: PUSH
3096: LD_INT 52
3098: PUSH
3099: LD_INT 53
3101: PUSH
3102: LD_INT 54
3104: PUSH
3105: LD_INT 55
3107: PUSH
3108: LD_INT 56
3110: PUSH
3111: LD_INT 57
3113: PUSH
3114: LD_INT 58
3116: PUSH
3117: LD_INT 59
3119: PUSH
3120: LD_INT 60
3122: PUSH
3123: LD_INT 61
3125: PUSH
3126: LD_INT 62
3128: PUSH
3129: LD_INT 80
3131: PUSH
3132: LD_INT 82
3134: PUSH
3135: LD_INT 83
3137: PUSH
3138: LD_INT 84
3140: PUSH
3141: LD_INT 85
3143: PUSH
3144: LD_INT 86
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: LIST
3155: LIST
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: ST_TO_ADDR
3200: GO 3667
3202: LD_INT 2
3204: DOUBLE
3205: EQUAL
3206: IFTRUE 3210
3208: GO 3436
3210: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3211: LD_ADDR_VAR 0 4
3215: PUSH
3216: LD_INT 35
3218: PUSH
3219: LD_INT 45
3221: PUSH
3222: LD_INT 46
3224: PUSH
3225: LD_INT 47
3227: PUSH
3228: LD_INT 82
3230: PUSH
3231: LD_INT 83
3233: PUSH
3234: LD_INT 84
3236: PUSH
3237: LD_INT 85
3239: PUSH
3240: LD_INT 87
3242: PUSH
3243: LD_INT 70
3245: PUSH
3246: LD_INT 1
3248: PUSH
3249: LD_INT 11
3251: PUSH
3252: LD_INT 3
3254: PUSH
3255: LD_INT 4
3257: PUSH
3258: LD_INT 5
3260: PUSH
3261: LD_INT 6
3263: PUSH
3264: LD_INT 15
3266: PUSH
3267: LD_INT 18
3269: PUSH
3270: LD_INT 7
3272: PUSH
3273: LD_INT 17
3275: PUSH
3276: LD_INT 8
3278: PUSH
3279: LD_INT 20
3281: PUSH
3282: LD_INT 21
3284: PUSH
3285: LD_INT 22
3287: PUSH
3288: LD_INT 72
3290: PUSH
3291: LD_INT 26
3293: PUSH
3294: LD_INT 69
3296: PUSH
3297: LD_INT 39
3299: PUSH
3300: LD_INT 40
3302: PUSH
3303: LD_INT 41
3305: PUSH
3306: LD_INT 42
3308: PUSH
3309: LD_INT 43
3311: PUSH
3312: LD_INT 48
3314: PUSH
3315: LD_INT 49
3317: PUSH
3318: LD_INT 50
3320: PUSH
3321: LD_INT 51
3323: PUSH
3324: LD_INT 52
3326: PUSH
3327: LD_INT 53
3329: PUSH
3330: LD_INT 54
3332: PUSH
3333: LD_INT 55
3335: PUSH
3336: LD_INT 56
3338: PUSH
3339: LD_INT 60
3341: PUSH
3342: LD_INT 61
3344: PUSH
3345: LD_INT 62
3347: PUSH
3348: LD_INT 66
3350: PUSH
3351: LD_INT 67
3353: PUSH
3354: LD_INT 68
3356: PUSH
3357: LD_INT 81
3359: PUSH
3360: LD_INT 82
3362: PUSH
3363: LD_INT 83
3365: PUSH
3366: LD_INT 84
3368: PUSH
3369: LD_INT 85
3371: PUSH
3372: LD_INT 87
3374: PUSH
3375: LD_INT 88
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: ST_TO_ADDR
3434: GO 3667
3436: LD_INT 3
3438: DOUBLE
3439: EQUAL
3440: IFTRUE 3444
3442: GO 3666
3444: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3445: LD_ADDR_VAR 0 4
3449: PUSH
3450: LD_INT 46
3452: PUSH
3453: LD_INT 47
3455: PUSH
3456: LD_INT 1
3458: PUSH
3459: LD_INT 2
3461: PUSH
3462: LD_INT 82
3464: PUSH
3465: LD_INT 83
3467: PUSH
3468: LD_INT 84
3470: PUSH
3471: LD_INT 85
3473: PUSH
3474: LD_INT 86
3476: PUSH
3477: LD_INT 11
3479: PUSH
3480: LD_INT 9
3482: PUSH
3483: LD_INT 20
3485: PUSH
3486: LD_INT 19
3488: PUSH
3489: LD_INT 21
3491: PUSH
3492: LD_INT 24
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 25
3500: PUSH
3501: LD_INT 28
3503: PUSH
3504: LD_INT 29
3506: PUSH
3507: LD_INT 30
3509: PUSH
3510: LD_INT 31
3512: PUSH
3513: LD_INT 37
3515: PUSH
3516: LD_INT 38
3518: PUSH
3519: LD_INT 32
3521: PUSH
3522: LD_INT 27
3524: PUSH
3525: LD_INT 33
3527: PUSH
3528: LD_INT 69
3530: PUSH
3531: LD_INT 39
3533: PUSH
3534: LD_INT 34
3536: PUSH
3537: LD_INT 40
3539: PUSH
3540: LD_INT 71
3542: PUSH
3543: LD_INT 23
3545: PUSH
3546: LD_INT 44
3548: PUSH
3549: LD_INT 48
3551: PUSH
3552: LD_INT 49
3554: PUSH
3555: LD_INT 50
3557: PUSH
3558: LD_INT 51
3560: PUSH
3561: LD_INT 52
3563: PUSH
3564: LD_INT 53
3566: PUSH
3567: LD_INT 54
3569: PUSH
3570: LD_INT 55
3572: PUSH
3573: LD_INT 56
3575: PUSH
3576: LD_INT 57
3578: PUSH
3579: LD_INT 58
3581: PUSH
3582: LD_INT 59
3584: PUSH
3585: LD_INT 63
3587: PUSH
3588: LD_INT 64
3590: PUSH
3591: LD_INT 65
3593: PUSH
3594: LD_INT 82
3596: PUSH
3597: LD_INT 83
3599: PUSH
3600: LD_INT 84
3602: PUSH
3603: LD_INT 85
3605: PUSH
3606: LD_INT 86
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: ST_TO_ADDR
3664: GO 3667
3666: POP
// if state > - 1 and state < 3 then
3667: LD_VAR 0 3
3671: PUSH
3672: LD_INT 1
3674: NEG
3675: GREATER
3676: PUSH
3677: LD_VAR 0 3
3681: PUSH
3682: LD_INT 3
3684: LESS
3685: AND
3686: IFFALSE 3743
// for i in result do
3688: LD_ADDR_VAR 0 5
3692: PUSH
3693: LD_VAR 0 4
3697: PUSH
3698: FOR_IN
3699: IFFALSE 3741
// if GetTech ( i , side ) <> state then
3701: LD_VAR 0 5
3705: PPUSH
3706: LD_VAR 0 1
3710: PPUSH
3711: CALL_OW 321
3715: PUSH
3716: LD_VAR 0 3
3720: NONEQUAL
3721: IFFALSE 3739
// result := result diff i ;
3723: LD_ADDR_VAR 0 4
3727: PUSH
3728: LD_VAR 0 4
3732: PUSH
3733: LD_VAR 0 5
3737: DIFF
3738: ST_TO_ADDR
3739: GO 3698
3741: POP
3742: POP
// end ;
3743: LD_VAR 0 4
3747: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3748: LD_INT 0
3750: PPUSH
3751: PPUSH
3752: PPUSH
// result := true ;
3753: LD_ADDR_VAR 0 3
3757: PUSH
3758: LD_INT 1
3760: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3761: LD_ADDR_VAR 0 5
3765: PUSH
3766: LD_VAR 0 2
3770: PPUSH
3771: CALL_OW 480
3775: ST_TO_ADDR
// if not tmp then
3776: LD_VAR 0 5
3780: NOT
3781: IFFALSE 3785
// exit ;
3783: GO 3834
// for i in tmp do
3785: LD_ADDR_VAR 0 4
3789: PUSH
3790: LD_VAR 0 5
3794: PUSH
3795: FOR_IN
3796: IFFALSE 3832
// if GetTech ( i , side ) <> state_researched then
3798: LD_VAR 0 4
3802: PPUSH
3803: LD_VAR 0 1
3807: PPUSH
3808: CALL_OW 321
3812: PUSH
3813: LD_INT 2
3815: NONEQUAL
3816: IFFALSE 3830
// begin result := false ;
3818: LD_ADDR_VAR 0 3
3822: PUSH
3823: LD_INT 0
3825: ST_TO_ADDR
// exit ;
3826: POP
3827: POP
3828: GO 3834
// end ;
3830: GO 3795
3832: POP
3833: POP
// end ;
3834: LD_VAR 0 3
3838: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3839: LD_INT 0
3841: PPUSH
3842: PPUSH
3843: PPUSH
3844: PPUSH
3845: PPUSH
3846: PPUSH
3847: PPUSH
3848: PPUSH
3849: PPUSH
3850: PPUSH
3851: PPUSH
3852: PPUSH
3853: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3854: LD_VAR 0 1
3858: NOT
3859: PUSH
3860: LD_VAR 0 1
3864: PPUSH
3865: CALL_OW 257
3869: PUSH
3870: LD_INT 9
3872: NONEQUAL
3873: OR
3874: IFFALSE 3878
// exit ;
3876: GO 4451
// side := GetSide ( unit ) ;
3878: LD_ADDR_VAR 0 9
3882: PUSH
3883: LD_VAR 0 1
3887: PPUSH
3888: CALL_OW 255
3892: ST_TO_ADDR
// tech_space := tech_spacanom ;
3893: LD_ADDR_VAR 0 12
3897: PUSH
3898: LD_INT 29
3900: ST_TO_ADDR
// tech_time := tech_taurad ;
3901: LD_ADDR_VAR 0 13
3905: PUSH
3906: LD_INT 28
3908: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3909: LD_ADDR_VAR 0 11
3913: PUSH
3914: LD_VAR 0 1
3918: PPUSH
3919: CALL_OW 310
3923: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3924: LD_VAR 0 11
3928: PPUSH
3929: CALL_OW 247
3933: PUSH
3934: LD_INT 2
3936: EQUAL
3937: IFFALSE 3941
// exit ;
3939: GO 4451
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3941: LD_ADDR_VAR 0 8
3945: PUSH
3946: LD_INT 81
3948: PUSH
3949: LD_VAR 0 9
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 3
3960: PUSH
3961: LD_INT 21
3963: PUSH
3964: LD_INT 3
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PPUSH
3979: CALL_OW 69
3983: ST_TO_ADDR
// if not tmp then
3984: LD_VAR 0 8
3988: NOT
3989: IFFALSE 3993
// exit ;
3991: GO 4451
// if in_unit then
3993: LD_VAR 0 11
3997: IFFALSE 4021
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3999: LD_ADDR_VAR 0 10
4003: PUSH
4004: LD_VAR 0 8
4008: PPUSH
4009: LD_VAR 0 11
4013: PPUSH
4014: CALL_OW 74
4018: ST_TO_ADDR
4019: GO 4041
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4021: LD_ADDR_VAR 0 10
4025: PUSH
4026: LD_VAR 0 8
4030: PPUSH
4031: LD_VAR 0 1
4035: PPUSH
4036: CALL_OW 74
4040: ST_TO_ADDR
// if not enemy then
4041: LD_VAR 0 10
4045: NOT
4046: IFFALSE 4050
// exit ;
4048: GO 4451
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4050: LD_VAR 0 11
4054: PUSH
4055: LD_VAR 0 11
4059: PPUSH
4060: LD_VAR 0 10
4064: PPUSH
4065: CALL_OW 296
4069: PUSH
4070: LD_INT 13
4072: GREATER
4073: AND
4074: PUSH
4075: LD_VAR 0 1
4079: PPUSH
4080: LD_VAR 0 10
4084: PPUSH
4085: CALL_OW 296
4089: PUSH
4090: LD_INT 12
4092: GREATER
4093: OR
4094: IFFALSE 4098
// exit ;
4096: GO 4451
// missile := [ 1 ] ;
4098: LD_ADDR_VAR 0 14
4102: PUSH
4103: LD_INT 1
4105: PUSH
4106: EMPTY
4107: LIST
4108: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4109: LD_VAR 0 9
4113: PPUSH
4114: LD_VAR 0 12
4118: PPUSH
4119: CALL_OW 325
4123: IFFALSE 4152
// missile := Replace ( missile , missile + 1 , 2 ) ;
4125: LD_ADDR_VAR 0 14
4129: PUSH
4130: LD_VAR 0 14
4134: PPUSH
4135: LD_VAR 0 14
4139: PUSH
4140: LD_INT 1
4142: PLUS
4143: PPUSH
4144: LD_INT 2
4146: PPUSH
4147: CALL_OW 1
4151: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4152: LD_VAR 0 9
4156: PPUSH
4157: LD_VAR 0 13
4161: PPUSH
4162: CALL_OW 325
4166: PUSH
4167: LD_VAR 0 10
4171: PPUSH
4172: CALL_OW 255
4176: PPUSH
4177: LD_VAR 0 13
4181: PPUSH
4182: CALL_OW 325
4186: NOT
4187: AND
4188: IFFALSE 4217
// missile := Replace ( missile , missile + 1 , 3 ) ;
4190: LD_ADDR_VAR 0 14
4194: PUSH
4195: LD_VAR 0 14
4199: PPUSH
4200: LD_VAR 0 14
4204: PUSH
4205: LD_INT 1
4207: PLUS
4208: PPUSH
4209: LD_INT 3
4211: PPUSH
4212: CALL_OW 1
4216: ST_TO_ADDR
// if missile < 2 then
4217: LD_VAR 0 14
4221: PUSH
4222: LD_INT 2
4224: LESS
4225: IFFALSE 4229
// exit ;
4227: GO 4451
// x := GetX ( enemy ) ;
4229: LD_ADDR_VAR 0 4
4233: PUSH
4234: LD_VAR 0 10
4238: PPUSH
4239: CALL_OW 250
4243: ST_TO_ADDR
// y := GetY ( enemy ) ;
4244: LD_ADDR_VAR 0 5
4248: PUSH
4249: LD_VAR 0 10
4253: PPUSH
4254: CALL_OW 251
4258: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4259: LD_ADDR_VAR 0 6
4263: PUSH
4264: LD_VAR 0 4
4268: PUSH
4269: LD_INT 1
4271: NEG
4272: PPUSH
4273: LD_INT 1
4275: PPUSH
4276: CALL_OW 12
4280: PLUS
4281: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4282: LD_ADDR_VAR 0 7
4286: PUSH
4287: LD_VAR 0 5
4291: PUSH
4292: LD_INT 1
4294: NEG
4295: PPUSH
4296: LD_INT 1
4298: PPUSH
4299: CALL_OW 12
4303: PLUS
4304: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4305: LD_VAR 0 6
4309: PPUSH
4310: LD_VAR 0 7
4314: PPUSH
4315: CALL_OW 488
4319: NOT
4320: IFFALSE 4342
// begin _x := x ;
4322: LD_ADDR_VAR 0 6
4326: PUSH
4327: LD_VAR 0 4
4331: ST_TO_ADDR
// _y := y ;
4332: LD_ADDR_VAR 0 7
4336: PUSH
4337: LD_VAR 0 5
4341: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4342: LD_ADDR_VAR 0 3
4346: PUSH
4347: LD_INT 1
4349: PPUSH
4350: LD_VAR 0 14
4354: PPUSH
4355: CALL_OW 12
4359: ST_TO_ADDR
// case i of 1 :
4360: LD_VAR 0 3
4364: PUSH
4365: LD_INT 1
4367: DOUBLE
4368: EQUAL
4369: IFTRUE 4373
4371: GO 4390
4373: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4374: LD_VAR 0 1
4378: PPUSH
4379: LD_VAR 0 10
4383: PPUSH
4384: CALL_OW 115
4388: GO 4451
4390: LD_INT 2
4392: DOUBLE
4393: EQUAL
4394: IFTRUE 4398
4396: GO 4420
4398: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4399: LD_VAR 0 1
4403: PPUSH
4404: LD_VAR 0 6
4408: PPUSH
4409: LD_VAR 0 7
4413: PPUSH
4414: CALL_OW 153
4418: GO 4451
4420: LD_INT 3
4422: DOUBLE
4423: EQUAL
4424: IFTRUE 4428
4426: GO 4450
4428: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4429: LD_VAR 0 1
4433: PPUSH
4434: LD_VAR 0 6
4438: PPUSH
4439: LD_VAR 0 7
4443: PPUSH
4444: CALL_OW 154
4448: GO 4451
4450: POP
// end ;
4451: LD_VAR 0 2
4455: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4456: LD_INT 0
4458: PPUSH
4459: PPUSH
4460: PPUSH
4461: PPUSH
4462: PPUSH
4463: PPUSH
// if not unit or not building then
4464: LD_VAR 0 1
4468: NOT
4469: PUSH
4470: LD_VAR 0 2
4474: NOT
4475: OR
4476: IFFALSE 4480
// exit ;
4478: GO 4638
// x := GetX ( building ) ;
4480: LD_ADDR_VAR 0 5
4484: PUSH
4485: LD_VAR 0 2
4489: PPUSH
4490: CALL_OW 250
4494: ST_TO_ADDR
// y := GetY ( building ) ;
4495: LD_ADDR_VAR 0 6
4499: PUSH
4500: LD_VAR 0 2
4504: PPUSH
4505: CALL_OW 251
4509: ST_TO_ADDR
// for i = 0 to 5 do
4510: LD_ADDR_VAR 0 4
4514: PUSH
4515: DOUBLE
4516: LD_INT 0
4518: DEC
4519: ST_TO_ADDR
4520: LD_INT 5
4522: PUSH
4523: FOR_TO
4524: IFFALSE 4636
// begin _x := ShiftX ( x , i , 3 ) ;
4526: LD_ADDR_VAR 0 7
4530: PUSH
4531: LD_VAR 0 5
4535: PPUSH
4536: LD_VAR 0 4
4540: PPUSH
4541: LD_INT 3
4543: PPUSH
4544: CALL_OW 272
4548: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4549: LD_ADDR_VAR 0 8
4553: PUSH
4554: LD_VAR 0 6
4558: PPUSH
4559: LD_VAR 0 4
4563: PPUSH
4564: LD_INT 3
4566: PPUSH
4567: CALL_OW 273
4571: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4572: LD_VAR 0 7
4576: PPUSH
4577: LD_VAR 0 8
4581: PPUSH
4582: CALL_OW 488
4586: NOT
4587: IFFALSE 4591
// continue ;
4589: GO 4523
// if HexInfo ( _x , _y ) = 0 then
4591: LD_VAR 0 7
4595: PPUSH
4596: LD_VAR 0 8
4600: PPUSH
4601: CALL_OW 428
4605: PUSH
4606: LD_INT 0
4608: EQUAL
4609: IFFALSE 4634
// begin ComMoveXY ( unit , _x , _y ) ;
4611: LD_VAR 0 1
4615: PPUSH
4616: LD_VAR 0 7
4620: PPUSH
4621: LD_VAR 0 8
4625: PPUSH
4626: CALL_OW 111
// exit ;
4630: POP
4631: POP
4632: GO 4638
// end ; end ;
4634: GO 4523
4636: POP
4637: POP
// end ;
4638: LD_VAR 0 3
4642: RET
// export function ScanBase ( side , base_area ) ; begin
4643: LD_INT 0
4645: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4646: LD_ADDR_VAR 0 3
4650: PUSH
4651: LD_VAR 0 2
4655: PPUSH
4656: LD_INT 81
4658: PUSH
4659: LD_VAR 0 1
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PPUSH
4668: CALL_OW 70
4672: ST_TO_ADDR
// end ;
4673: LD_VAR 0 3
4677: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4678: LD_INT 0
4680: PPUSH
4681: PPUSH
4682: PPUSH
4683: PPUSH
// result := false ;
4684: LD_ADDR_VAR 0 2
4688: PUSH
4689: LD_INT 0
4691: ST_TO_ADDR
// side := GetSide ( unit ) ;
4692: LD_ADDR_VAR 0 3
4696: PUSH
4697: LD_VAR 0 1
4701: PPUSH
4702: CALL_OW 255
4706: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4707: LD_ADDR_VAR 0 4
4711: PUSH
4712: LD_VAR 0 1
4716: PPUSH
4717: CALL_OW 248
4721: ST_TO_ADDR
// case nat of 1 :
4722: LD_VAR 0 4
4726: PUSH
4727: LD_INT 1
4729: DOUBLE
4730: EQUAL
4731: IFTRUE 4735
4733: GO 4746
4735: POP
// tech := tech_lassight ; 2 :
4736: LD_ADDR_VAR 0 5
4740: PUSH
4741: LD_INT 12
4743: ST_TO_ADDR
4744: GO 4785
4746: LD_INT 2
4748: DOUBLE
4749: EQUAL
4750: IFTRUE 4754
4752: GO 4765
4754: POP
// tech := tech_mortar ; 3 :
4755: LD_ADDR_VAR 0 5
4759: PUSH
4760: LD_INT 41
4762: ST_TO_ADDR
4763: GO 4785
4765: LD_INT 3
4767: DOUBLE
4768: EQUAL
4769: IFTRUE 4773
4771: GO 4784
4773: POP
// tech := tech_bazooka ; end ;
4774: LD_ADDR_VAR 0 5
4778: PUSH
4779: LD_INT 44
4781: ST_TO_ADDR
4782: GO 4785
4784: POP
// if Researched ( side , tech ) then
4785: LD_VAR 0 3
4789: PPUSH
4790: LD_VAR 0 5
4794: PPUSH
4795: CALL_OW 325
4799: IFFALSE 4826
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4801: LD_ADDR_VAR 0 2
4805: PUSH
4806: LD_INT 5
4808: PUSH
4809: LD_INT 8
4811: PUSH
4812: LD_INT 9
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: PUSH
4820: LD_VAR 0 4
4824: ARRAY
4825: ST_TO_ADDR
// end ;
4826: LD_VAR 0 2
4830: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4831: LD_INT 0
4833: PPUSH
4834: PPUSH
4835: PPUSH
// if not mines then
4836: LD_VAR 0 2
4840: NOT
4841: IFFALSE 4845
// exit ;
4843: GO 4989
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4845: LD_ADDR_VAR 0 5
4849: PUSH
4850: LD_INT 81
4852: PUSH
4853: LD_VAR 0 1
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 3
4864: PUSH
4865: LD_INT 21
4867: PUSH
4868: LD_INT 3
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: EMPTY
4880: LIST
4881: LIST
4882: PPUSH
4883: CALL_OW 69
4887: ST_TO_ADDR
// for i in mines do
4888: LD_ADDR_VAR 0 4
4892: PUSH
4893: LD_VAR 0 2
4897: PUSH
4898: FOR_IN
4899: IFFALSE 4987
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4901: LD_VAR 0 4
4905: PUSH
4906: LD_INT 1
4908: ARRAY
4909: PPUSH
4910: LD_VAR 0 4
4914: PUSH
4915: LD_INT 2
4917: ARRAY
4918: PPUSH
4919: CALL_OW 458
4923: NOT
4924: IFFALSE 4928
// continue ;
4926: GO 4898
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4928: LD_VAR 0 4
4932: PUSH
4933: LD_INT 1
4935: ARRAY
4936: PPUSH
4937: LD_VAR 0 4
4941: PUSH
4942: LD_INT 2
4944: ARRAY
4945: PPUSH
4946: CALL_OW 428
4950: PUSH
4951: LD_VAR 0 5
4955: IN
4956: IFFALSE 4985
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4958: LD_VAR 0 4
4962: PUSH
4963: LD_INT 1
4965: ARRAY
4966: PPUSH
4967: LD_VAR 0 4
4971: PUSH
4972: LD_INT 2
4974: ARRAY
4975: PPUSH
4976: LD_VAR 0 1
4980: PPUSH
4981: CALL_OW 456
// end ;
4985: GO 4898
4987: POP
4988: POP
// end ;
4989: LD_VAR 0 3
4993: RET
// export function Count ( array ) ; begin
4994: LD_INT 0
4996: PPUSH
// result := array + 0 ;
4997: LD_ADDR_VAR 0 2
5001: PUSH
5002: LD_VAR 0 1
5006: PUSH
5007: LD_INT 0
5009: PLUS
5010: ST_TO_ADDR
// end ;
5011: LD_VAR 0 2
5015: RET
// export function IsEmpty ( building ) ; begin
5016: LD_INT 0
5018: PPUSH
// if not building then
5019: LD_VAR 0 1
5023: NOT
5024: IFFALSE 5028
// exit ;
5026: GO 5071
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5028: LD_ADDR_VAR 0 2
5032: PUSH
5033: LD_VAR 0 1
5037: PUSH
5038: LD_INT 22
5040: PUSH
5041: LD_VAR 0 1
5045: PPUSH
5046: CALL_OW 255
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: LD_INT 58
5057: PUSH
5058: EMPTY
5059: LIST
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PPUSH
5065: CALL_OW 69
5069: IN
5070: ST_TO_ADDR
// end ;
5071: LD_VAR 0 2
5075: RET
// export function IsNotFull ( building ) ; var places ; begin
5076: LD_INT 0
5078: PPUSH
5079: PPUSH
// if not building then
5080: LD_VAR 0 1
5084: NOT
5085: IFFALSE 5089
// exit ;
5087: GO 5117
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5089: LD_ADDR_VAR 0 2
5093: PUSH
5094: LD_VAR 0 1
5098: PPUSH
5099: LD_INT 3
5101: PUSH
5102: LD_INT 62
5104: PUSH
5105: EMPTY
5106: LIST
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: PPUSH
5112: CALL_OW 72
5116: ST_TO_ADDR
// end ;
5117: LD_VAR 0 2
5121: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5122: LD_INT 0
5124: PPUSH
5125: PPUSH
5126: PPUSH
5127: PPUSH
// tmp := [ ] ;
5128: LD_ADDR_VAR 0 3
5132: PUSH
5133: EMPTY
5134: ST_TO_ADDR
// list := [ ] ;
5135: LD_ADDR_VAR 0 5
5139: PUSH
5140: EMPTY
5141: ST_TO_ADDR
// for i = 16 to 25 do
5142: LD_ADDR_VAR 0 4
5146: PUSH
5147: DOUBLE
5148: LD_INT 16
5150: DEC
5151: ST_TO_ADDR
5152: LD_INT 25
5154: PUSH
5155: FOR_TO
5156: IFFALSE 5229
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5158: LD_ADDR_VAR 0 3
5162: PUSH
5163: LD_VAR 0 3
5167: PUSH
5168: LD_INT 22
5170: PUSH
5171: LD_VAR 0 1
5175: PPUSH
5176: CALL_OW 255
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: PUSH
5185: LD_INT 91
5187: PUSH
5188: LD_VAR 0 1
5192: PUSH
5193: LD_INT 6
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: LIST
5200: PUSH
5201: LD_INT 30
5203: PUSH
5204: LD_VAR 0 4
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: LIST
5217: PUSH
5218: EMPTY
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: ADD
5226: ST_TO_ADDR
5227: GO 5155
5229: POP
5230: POP
// for i = 1 to tmp do
5231: LD_ADDR_VAR 0 4
5235: PUSH
5236: DOUBLE
5237: LD_INT 1
5239: DEC
5240: ST_TO_ADDR
5241: LD_VAR 0 3
5245: PUSH
5246: FOR_TO
5247: IFFALSE 5335
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5249: LD_ADDR_VAR 0 5
5253: PUSH
5254: LD_VAR 0 5
5258: PUSH
5259: LD_VAR 0 3
5263: PUSH
5264: LD_VAR 0 4
5268: ARRAY
5269: PPUSH
5270: CALL_OW 266
5274: PUSH
5275: LD_VAR 0 3
5279: PUSH
5280: LD_VAR 0 4
5284: ARRAY
5285: PPUSH
5286: CALL_OW 250
5290: PUSH
5291: LD_VAR 0 3
5295: PUSH
5296: LD_VAR 0 4
5300: ARRAY
5301: PPUSH
5302: CALL_OW 251
5306: PUSH
5307: LD_VAR 0 3
5311: PUSH
5312: LD_VAR 0 4
5316: ARRAY
5317: PPUSH
5318: CALL_OW 254
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: PUSH
5329: EMPTY
5330: LIST
5331: ADD
5332: ST_TO_ADDR
5333: GO 5246
5335: POP
5336: POP
// result := list ;
5337: LD_ADDR_VAR 0 2
5341: PUSH
5342: LD_VAR 0 5
5346: ST_TO_ADDR
// end ;
5347: LD_VAR 0 2
5351: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5352: LD_INT 0
5354: PPUSH
5355: PPUSH
5356: PPUSH
5357: PPUSH
5358: PPUSH
5359: PPUSH
5360: PPUSH
// if not factory then
5361: LD_VAR 0 1
5365: NOT
5366: IFFALSE 5370
// exit ;
5368: GO 5963
// if control = control_apeman then
5370: LD_VAR 0 4
5374: PUSH
5375: LD_INT 5
5377: EQUAL
5378: IFFALSE 5487
// begin tmp := UnitsInside ( factory ) ;
5380: LD_ADDR_VAR 0 8
5384: PUSH
5385: LD_VAR 0 1
5389: PPUSH
5390: CALL_OW 313
5394: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5395: LD_VAR 0 8
5399: PPUSH
5400: LD_INT 25
5402: PUSH
5403: LD_INT 12
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PPUSH
5410: CALL_OW 72
5414: NOT
5415: IFFALSE 5425
// control := control_manual ;
5417: LD_ADDR_VAR 0 4
5421: PUSH
5422: LD_INT 1
5424: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5425: LD_ADDR_VAR 0 8
5429: PUSH
5430: LD_VAR 0 1
5434: PPUSH
5435: CALL 5122 0 1
5439: ST_TO_ADDR
// if tmp then
5440: LD_VAR 0 8
5444: IFFALSE 5487
// begin for i in tmp do
5446: LD_ADDR_VAR 0 7
5450: PUSH
5451: LD_VAR 0 8
5455: PUSH
5456: FOR_IN
5457: IFFALSE 5485
// if i [ 1 ] = b_ext_radio then
5459: LD_VAR 0 7
5463: PUSH
5464: LD_INT 1
5466: ARRAY
5467: PUSH
5468: LD_INT 22
5470: EQUAL
5471: IFFALSE 5483
// begin control := control_remote ;
5473: LD_ADDR_VAR 0 4
5477: PUSH
5478: LD_INT 2
5480: ST_TO_ADDR
// break ;
5481: GO 5485
// end ;
5483: GO 5456
5485: POP
5486: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5487: LD_VAR 0 1
5491: PPUSH
5492: LD_VAR 0 2
5496: PPUSH
5497: LD_VAR 0 3
5501: PPUSH
5502: LD_VAR 0 4
5506: PPUSH
5507: LD_VAR 0 5
5511: PPUSH
5512: CALL_OW 448
5516: IFFALSE 5551
// begin result := [ chassis , engine , control , weapon ] ;
5518: LD_ADDR_VAR 0 6
5522: PUSH
5523: LD_VAR 0 2
5527: PUSH
5528: LD_VAR 0 3
5532: PUSH
5533: LD_VAR 0 4
5537: PUSH
5538: LD_VAR 0 5
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: ST_TO_ADDR
// exit ;
5549: GO 5963
// end ; _chassis := AvailableChassisList ( factory ) ;
5551: LD_ADDR_VAR 0 9
5555: PUSH
5556: LD_VAR 0 1
5560: PPUSH
5561: CALL_OW 475
5565: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5566: LD_ADDR_VAR 0 11
5570: PUSH
5571: LD_VAR 0 1
5575: PPUSH
5576: CALL_OW 476
5580: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5581: LD_ADDR_VAR 0 12
5585: PUSH
5586: LD_VAR 0 1
5590: PPUSH
5591: CALL_OW 477
5595: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5596: LD_ADDR_VAR 0 10
5600: PUSH
5601: LD_VAR 0 1
5605: PPUSH
5606: CALL_OW 478
5610: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5611: LD_VAR 0 9
5615: NOT
5616: PUSH
5617: LD_VAR 0 11
5621: NOT
5622: OR
5623: PUSH
5624: LD_VAR 0 12
5628: NOT
5629: OR
5630: PUSH
5631: LD_VAR 0 10
5635: NOT
5636: OR
5637: IFFALSE 5672
// begin result := [ chassis , engine , control , weapon ] ;
5639: LD_ADDR_VAR 0 6
5643: PUSH
5644: LD_VAR 0 2
5648: PUSH
5649: LD_VAR 0 3
5653: PUSH
5654: LD_VAR 0 4
5658: PUSH
5659: LD_VAR 0 5
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: ST_TO_ADDR
// exit ;
5670: GO 5963
// end ; if not chassis in _chassis then
5672: LD_VAR 0 2
5676: PUSH
5677: LD_VAR 0 9
5681: IN
5682: NOT
5683: IFFALSE 5709
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5685: LD_ADDR_VAR 0 2
5689: PUSH
5690: LD_VAR 0 9
5694: PUSH
5695: LD_INT 1
5697: PPUSH
5698: LD_VAR 0 9
5702: PPUSH
5703: CALL_OW 12
5707: ARRAY
5708: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5709: LD_VAR 0 2
5713: PPUSH
5714: LD_VAR 0 3
5718: PPUSH
5719: CALL 5968 0 2
5723: NOT
5724: IFFALSE 5783
// repeat engine := _engine [ 1 ] ;
5726: LD_ADDR_VAR 0 3
5730: PUSH
5731: LD_VAR 0 11
5735: PUSH
5736: LD_INT 1
5738: ARRAY
5739: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5740: LD_ADDR_VAR 0 11
5744: PUSH
5745: LD_VAR 0 11
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 3
5757: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5758: LD_VAR 0 2
5762: PPUSH
5763: LD_VAR 0 3
5767: PPUSH
5768: CALL 5968 0 2
5772: PUSH
5773: LD_VAR 0 11
5777: PUSH
5778: EMPTY
5779: EQUAL
5780: OR
5781: IFFALSE 5726
// if not control in _control then
5783: LD_VAR 0 4
5787: PUSH
5788: LD_VAR 0 12
5792: IN
5793: NOT
5794: IFFALSE 5820
// control := _control [ rand ( 1 , _control ) ] ;
5796: LD_ADDR_VAR 0 4
5800: PUSH
5801: LD_VAR 0 12
5805: PUSH
5806: LD_INT 1
5808: PPUSH
5809: LD_VAR 0 12
5813: PPUSH
5814: CALL_OW 12
5818: ARRAY
5819: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5820: LD_VAR 0 2
5824: PPUSH
5825: LD_VAR 0 5
5829: PPUSH
5830: CALL 6188 0 2
5834: NOT
5835: IFFALSE 5894
// repeat weapon := _weapon [ 1 ] ;
5837: LD_ADDR_VAR 0 5
5841: PUSH
5842: LD_VAR 0 10
5846: PUSH
5847: LD_INT 1
5849: ARRAY
5850: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5851: LD_ADDR_VAR 0 10
5855: PUSH
5856: LD_VAR 0 10
5860: PPUSH
5861: LD_INT 1
5863: PPUSH
5864: CALL_OW 3
5868: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5869: LD_VAR 0 2
5873: PPUSH
5874: LD_VAR 0 5
5878: PPUSH
5879: CALL 6188 0 2
5883: PUSH
5884: LD_VAR 0 10
5888: PUSH
5889: EMPTY
5890: EQUAL
5891: OR
5892: IFFALSE 5837
// result := [ ] ;
5894: LD_ADDR_VAR 0 6
5898: PUSH
5899: EMPTY
5900: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5901: LD_VAR 0 1
5905: PPUSH
5906: LD_VAR 0 2
5910: PPUSH
5911: LD_VAR 0 3
5915: PPUSH
5916: LD_VAR 0 4
5920: PPUSH
5921: LD_VAR 0 5
5925: PPUSH
5926: CALL_OW 448
5930: IFFALSE 5963
// result := [ chassis , engine , control , weapon ] ;
5932: LD_ADDR_VAR 0 6
5936: PUSH
5937: LD_VAR 0 2
5941: PUSH
5942: LD_VAR 0 3
5946: PUSH
5947: LD_VAR 0 4
5951: PUSH
5952: LD_VAR 0 5
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: ST_TO_ADDR
// end ;
5963: LD_VAR 0 6
5967: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5968: LD_INT 0
5970: PPUSH
// if not chassis or not engine then
5971: LD_VAR 0 1
5975: NOT
5976: PUSH
5977: LD_VAR 0 2
5981: NOT
5982: OR
5983: IFFALSE 5987
// exit ;
5985: GO 6183
// case engine of engine_solar :
5987: LD_VAR 0 2
5991: PUSH
5992: LD_INT 2
5994: DOUBLE
5995: EQUAL
5996: IFTRUE 6000
5998: GO 6038
6000: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6001: LD_ADDR_VAR 0 3
6005: PUSH
6006: LD_INT 11
6008: PUSH
6009: LD_INT 12
6011: PUSH
6012: LD_INT 13
6014: PUSH
6015: LD_INT 14
6017: PUSH
6018: LD_INT 1
6020: PUSH
6021: LD_INT 2
6023: PUSH
6024: LD_INT 3
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: ST_TO_ADDR
6036: GO 6167
6038: LD_INT 1
6040: DOUBLE
6041: EQUAL
6042: IFTRUE 6046
6044: GO 6108
6046: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6047: LD_ADDR_VAR 0 3
6051: PUSH
6052: LD_INT 11
6054: PUSH
6055: LD_INT 12
6057: PUSH
6058: LD_INT 13
6060: PUSH
6061: LD_INT 14
6063: PUSH
6064: LD_INT 1
6066: PUSH
6067: LD_INT 2
6069: PUSH
6070: LD_INT 3
6072: PUSH
6073: LD_INT 4
6075: PUSH
6076: LD_INT 5
6078: PUSH
6079: LD_INT 21
6081: PUSH
6082: LD_INT 23
6084: PUSH
6085: LD_INT 22
6087: PUSH
6088: LD_INT 24
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: ST_TO_ADDR
6106: GO 6167
6108: LD_INT 3
6110: DOUBLE
6111: EQUAL
6112: IFTRUE 6116
6114: GO 6166
6116: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6117: LD_ADDR_VAR 0 3
6121: PUSH
6122: LD_INT 13
6124: PUSH
6125: LD_INT 14
6127: PUSH
6128: LD_INT 2
6130: PUSH
6131: LD_INT 3
6133: PUSH
6134: LD_INT 4
6136: PUSH
6137: LD_INT 5
6139: PUSH
6140: LD_INT 21
6142: PUSH
6143: LD_INT 22
6145: PUSH
6146: LD_INT 23
6148: PUSH
6149: LD_INT 24
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: ST_TO_ADDR
6164: GO 6167
6166: POP
// result := ( chassis in result ) ;
6167: LD_ADDR_VAR 0 3
6171: PUSH
6172: LD_VAR 0 1
6176: PUSH
6177: LD_VAR 0 3
6181: IN
6182: ST_TO_ADDR
// end ;
6183: LD_VAR 0 3
6187: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6188: LD_INT 0
6190: PPUSH
// if not chassis or not weapon then
6191: LD_VAR 0 1
6195: NOT
6196: PUSH
6197: LD_VAR 0 2
6201: NOT
6202: OR
6203: IFFALSE 6207
// exit ;
6205: GO 7267
// case weapon of us_machine_gun :
6207: LD_VAR 0 2
6211: PUSH
6212: LD_INT 2
6214: DOUBLE
6215: EQUAL
6216: IFTRUE 6220
6218: GO 6250
6220: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6221: LD_ADDR_VAR 0 3
6225: PUSH
6226: LD_INT 1
6228: PUSH
6229: LD_INT 2
6231: PUSH
6232: LD_INT 3
6234: PUSH
6235: LD_INT 4
6237: PUSH
6238: LD_INT 5
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: ST_TO_ADDR
6248: GO 7251
6250: LD_INT 3
6252: DOUBLE
6253: EQUAL
6254: IFTRUE 6258
6256: GO 6288
6258: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6259: LD_ADDR_VAR 0 3
6263: PUSH
6264: LD_INT 1
6266: PUSH
6267: LD_INT 2
6269: PUSH
6270: LD_INT 3
6272: PUSH
6273: LD_INT 4
6275: PUSH
6276: LD_INT 5
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: ST_TO_ADDR
6286: GO 7251
6288: LD_INT 11
6290: DOUBLE
6291: EQUAL
6292: IFTRUE 6296
6294: GO 6326
6296: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6297: LD_ADDR_VAR 0 3
6301: PUSH
6302: LD_INT 1
6304: PUSH
6305: LD_INT 2
6307: PUSH
6308: LD_INT 3
6310: PUSH
6311: LD_INT 4
6313: PUSH
6314: LD_INT 5
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: ST_TO_ADDR
6324: GO 7251
6326: LD_INT 4
6328: DOUBLE
6329: EQUAL
6330: IFTRUE 6334
6332: GO 6360
6334: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6335: LD_ADDR_VAR 0 3
6339: PUSH
6340: LD_INT 2
6342: PUSH
6343: LD_INT 3
6345: PUSH
6346: LD_INT 4
6348: PUSH
6349: LD_INT 5
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: ST_TO_ADDR
6358: GO 7251
6360: LD_INT 5
6362: DOUBLE
6363: EQUAL
6364: IFTRUE 6368
6366: GO 6394
6368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6369: LD_ADDR_VAR 0 3
6373: PUSH
6374: LD_INT 2
6376: PUSH
6377: LD_INT 3
6379: PUSH
6380: LD_INT 4
6382: PUSH
6383: LD_INT 5
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: ST_TO_ADDR
6392: GO 7251
6394: LD_INT 9
6396: DOUBLE
6397: EQUAL
6398: IFTRUE 6402
6400: GO 6428
6402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6403: LD_ADDR_VAR 0 3
6407: PUSH
6408: LD_INT 2
6410: PUSH
6411: LD_INT 3
6413: PUSH
6414: LD_INT 4
6416: PUSH
6417: LD_INT 5
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: ST_TO_ADDR
6426: GO 7251
6428: LD_INT 7
6430: DOUBLE
6431: EQUAL
6432: IFTRUE 6436
6434: GO 6462
6436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6437: LD_ADDR_VAR 0 3
6441: PUSH
6442: LD_INT 2
6444: PUSH
6445: LD_INT 3
6447: PUSH
6448: LD_INT 4
6450: PUSH
6451: LD_INT 5
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: ST_TO_ADDR
6460: GO 7251
6462: LD_INT 12
6464: DOUBLE
6465: EQUAL
6466: IFTRUE 6470
6468: GO 6496
6470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6471: LD_ADDR_VAR 0 3
6475: PUSH
6476: LD_INT 2
6478: PUSH
6479: LD_INT 3
6481: PUSH
6482: LD_INT 4
6484: PUSH
6485: LD_INT 5
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: ST_TO_ADDR
6494: GO 7251
6496: LD_INT 13
6498: DOUBLE
6499: EQUAL
6500: IFTRUE 6504
6502: GO 6530
6504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6505: LD_ADDR_VAR 0 3
6509: PUSH
6510: LD_INT 2
6512: PUSH
6513: LD_INT 3
6515: PUSH
6516: LD_INT 4
6518: PUSH
6519: LD_INT 5
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: ST_TO_ADDR
6528: GO 7251
6530: LD_INT 14
6532: DOUBLE
6533: EQUAL
6534: IFTRUE 6538
6536: GO 6556
6538: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6539: LD_ADDR_VAR 0 3
6543: PUSH
6544: LD_INT 4
6546: PUSH
6547: LD_INT 5
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: ST_TO_ADDR
6554: GO 7251
6556: LD_INT 6
6558: DOUBLE
6559: EQUAL
6560: IFTRUE 6564
6562: GO 6582
6564: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6565: LD_ADDR_VAR 0 3
6569: PUSH
6570: LD_INT 4
6572: PUSH
6573: LD_INT 5
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: ST_TO_ADDR
6580: GO 7251
6582: LD_INT 10
6584: DOUBLE
6585: EQUAL
6586: IFTRUE 6590
6588: GO 6608
6590: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6591: LD_ADDR_VAR 0 3
6595: PUSH
6596: LD_INT 4
6598: PUSH
6599: LD_INT 5
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: ST_TO_ADDR
6606: GO 7251
6608: LD_INT 22
6610: DOUBLE
6611: EQUAL
6612: IFTRUE 6616
6614: GO 6642
6616: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6617: LD_ADDR_VAR 0 3
6621: PUSH
6622: LD_INT 11
6624: PUSH
6625: LD_INT 12
6627: PUSH
6628: LD_INT 13
6630: PUSH
6631: LD_INT 14
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: ST_TO_ADDR
6640: GO 7251
6642: LD_INT 23
6644: DOUBLE
6645: EQUAL
6646: IFTRUE 6650
6648: GO 6676
6650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6651: LD_ADDR_VAR 0 3
6655: PUSH
6656: LD_INT 11
6658: PUSH
6659: LD_INT 12
6661: PUSH
6662: LD_INT 13
6664: PUSH
6665: LD_INT 14
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: ST_TO_ADDR
6674: GO 7251
6676: LD_INT 24
6678: DOUBLE
6679: EQUAL
6680: IFTRUE 6684
6682: GO 6710
6684: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6685: LD_ADDR_VAR 0 3
6689: PUSH
6690: LD_INT 11
6692: PUSH
6693: LD_INT 12
6695: PUSH
6696: LD_INT 13
6698: PUSH
6699: LD_INT 14
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: ST_TO_ADDR
6708: GO 7251
6710: LD_INT 30
6712: DOUBLE
6713: EQUAL
6714: IFTRUE 6718
6716: GO 6744
6718: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6719: LD_ADDR_VAR 0 3
6723: PUSH
6724: LD_INT 11
6726: PUSH
6727: LD_INT 12
6729: PUSH
6730: LD_INT 13
6732: PUSH
6733: LD_INT 14
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: ST_TO_ADDR
6742: GO 7251
6744: LD_INT 25
6746: DOUBLE
6747: EQUAL
6748: IFTRUE 6752
6750: GO 6770
6752: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6753: LD_ADDR_VAR 0 3
6757: PUSH
6758: LD_INT 13
6760: PUSH
6761: LD_INT 14
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: ST_TO_ADDR
6768: GO 7251
6770: LD_INT 27
6772: DOUBLE
6773: EQUAL
6774: IFTRUE 6778
6776: GO 6796
6778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6779: LD_ADDR_VAR 0 3
6783: PUSH
6784: LD_INT 13
6786: PUSH
6787: LD_INT 14
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: ST_TO_ADDR
6794: GO 7251
6796: LD_INT 92
6798: DOUBLE
6799: EQUAL
6800: IFTRUE 6804
6802: GO 6830
6804: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6805: LD_ADDR_VAR 0 3
6809: PUSH
6810: LD_INT 11
6812: PUSH
6813: LD_INT 12
6815: PUSH
6816: LD_INT 13
6818: PUSH
6819: LD_INT 14
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: ST_TO_ADDR
6828: GO 7251
6830: LD_INT 28
6832: DOUBLE
6833: EQUAL
6834: IFTRUE 6838
6836: GO 6856
6838: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6839: LD_ADDR_VAR 0 3
6843: PUSH
6844: LD_INT 13
6846: PUSH
6847: LD_INT 14
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: ST_TO_ADDR
6854: GO 7251
6856: LD_INT 29
6858: DOUBLE
6859: EQUAL
6860: IFTRUE 6864
6862: GO 6882
6864: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6865: LD_ADDR_VAR 0 3
6869: PUSH
6870: LD_INT 13
6872: PUSH
6873: LD_INT 14
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: ST_TO_ADDR
6880: GO 7251
6882: LD_INT 31
6884: DOUBLE
6885: EQUAL
6886: IFTRUE 6890
6888: GO 6908
6890: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6891: LD_ADDR_VAR 0 3
6895: PUSH
6896: LD_INT 13
6898: PUSH
6899: LD_INT 14
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: ST_TO_ADDR
6906: GO 7251
6908: LD_INT 26
6910: DOUBLE
6911: EQUAL
6912: IFTRUE 6916
6914: GO 6934
6916: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6917: LD_ADDR_VAR 0 3
6921: PUSH
6922: LD_INT 13
6924: PUSH
6925: LD_INT 14
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: ST_TO_ADDR
6932: GO 7251
6934: LD_INT 42
6936: DOUBLE
6937: EQUAL
6938: IFTRUE 6942
6940: GO 6968
6942: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6943: LD_ADDR_VAR 0 3
6947: PUSH
6948: LD_INT 21
6950: PUSH
6951: LD_INT 22
6953: PUSH
6954: LD_INT 23
6956: PUSH
6957: LD_INT 24
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: ST_TO_ADDR
6966: GO 7251
6968: LD_INT 43
6970: DOUBLE
6971: EQUAL
6972: IFTRUE 6976
6974: GO 7002
6976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6977: LD_ADDR_VAR 0 3
6981: PUSH
6982: LD_INT 21
6984: PUSH
6985: LD_INT 22
6987: PUSH
6988: LD_INT 23
6990: PUSH
6991: LD_INT 24
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: ST_TO_ADDR
7000: GO 7251
7002: LD_INT 44
7004: DOUBLE
7005: EQUAL
7006: IFTRUE 7010
7008: GO 7036
7010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7011: LD_ADDR_VAR 0 3
7015: PUSH
7016: LD_INT 21
7018: PUSH
7019: LD_INT 22
7021: PUSH
7022: LD_INT 23
7024: PUSH
7025: LD_INT 24
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: ST_TO_ADDR
7034: GO 7251
7036: LD_INT 45
7038: DOUBLE
7039: EQUAL
7040: IFTRUE 7044
7042: GO 7070
7044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7045: LD_ADDR_VAR 0 3
7049: PUSH
7050: LD_INT 21
7052: PUSH
7053: LD_INT 22
7055: PUSH
7056: LD_INT 23
7058: PUSH
7059: LD_INT 24
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: ST_TO_ADDR
7068: GO 7251
7070: LD_INT 49
7072: DOUBLE
7073: EQUAL
7074: IFTRUE 7078
7076: GO 7104
7078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7079: LD_ADDR_VAR 0 3
7083: PUSH
7084: LD_INT 21
7086: PUSH
7087: LD_INT 22
7089: PUSH
7090: LD_INT 23
7092: PUSH
7093: LD_INT 24
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: ST_TO_ADDR
7102: GO 7251
7104: LD_INT 51
7106: DOUBLE
7107: EQUAL
7108: IFTRUE 7112
7110: GO 7138
7112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7113: LD_ADDR_VAR 0 3
7117: PUSH
7118: LD_INT 21
7120: PUSH
7121: LD_INT 22
7123: PUSH
7124: LD_INT 23
7126: PUSH
7127: LD_INT 24
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: ST_TO_ADDR
7136: GO 7251
7138: LD_INT 52
7140: DOUBLE
7141: EQUAL
7142: IFTRUE 7146
7144: GO 7172
7146: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7147: LD_ADDR_VAR 0 3
7151: PUSH
7152: LD_INT 21
7154: PUSH
7155: LD_INT 22
7157: PUSH
7158: LD_INT 23
7160: PUSH
7161: LD_INT 24
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: ST_TO_ADDR
7170: GO 7251
7172: LD_INT 53
7174: DOUBLE
7175: EQUAL
7176: IFTRUE 7180
7178: GO 7198
7180: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7181: LD_ADDR_VAR 0 3
7185: PUSH
7186: LD_INT 23
7188: PUSH
7189: LD_INT 24
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: ST_TO_ADDR
7196: GO 7251
7198: LD_INT 46
7200: DOUBLE
7201: EQUAL
7202: IFTRUE 7206
7204: GO 7224
7206: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7207: LD_ADDR_VAR 0 3
7211: PUSH
7212: LD_INT 23
7214: PUSH
7215: LD_INT 24
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: ST_TO_ADDR
7222: GO 7251
7224: LD_INT 47
7226: DOUBLE
7227: EQUAL
7228: IFTRUE 7232
7230: GO 7250
7232: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7233: LD_ADDR_VAR 0 3
7237: PUSH
7238: LD_INT 23
7240: PUSH
7241: LD_INT 24
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: ST_TO_ADDR
7248: GO 7251
7250: POP
// result := ( chassis in result ) ;
7251: LD_ADDR_VAR 0 3
7255: PUSH
7256: LD_VAR 0 1
7260: PUSH
7261: LD_VAR 0 3
7265: IN
7266: ST_TO_ADDR
// end ;
7267: LD_VAR 0 3
7271: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7272: LD_INT 0
7274: PPUSH
7275: PPUSH
7276: PPUSH
7277: PPUSH
7278: PPUSH
7279: PPUSH
7280: PPUSH
// result := array ;
7281: LD_ADDR_VAR 0 5
7285: PUSH
7286: LD_VAR 0 1
7290: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7291: LD_VAR 0 1
7295: NOT
7296: PUSH
7297: LD_VAR 0 2
7301: NOT
7302: OR
7303: PUSH
7304: LD_VAR 0 3
7308: NOT
7309: OR
7310: PUSH
7311: LD_VAR 0 2
7315: PUSH
7316: LD_VAR 0 1
7320: GREATER
7321: OR
7322: PUSH
7323: LD_VAR 0 3
7327: PUSH
7328: LD_VAR 0 1
7332: GREATER
7333: OR
7334: IFFALSE 7338
// exit ;
7336: GO 7634
// if direction then
7338: LD_VAR 0 4
7342: IFFALSE 7406
// begin d := 1 ;
7344: LD_ADDR_VAR 0 9
7348: PUSH
7349: LD_INT 1
7351: ST_TO_ADDR
// if i_from > i_to then
7352: LD_VAR 0 2
7356: PUSH
7357: LD_VAR 0 3
7361: GREATER
7362: IFFALSE 7388
// length := ( array - i_from ) + i_to else
7364: LD_ADDR_VAR 0 11
7368: PUSH
7369: LD_VAR 0 1
7373: PUSH
7374: LD_VAR 0 2
7378: MINUS
7379: PUSH
7380: LD_VAR 0 3
7384: PLUS
7385: ST_TO_ADDR
7386: GO 7404
// length := i_to - i_from ;
7388: LD_ADDR_VAR 0 11
7392: PUSH
7393: LD_VAR 0 3
7397: PUSH
7398: LD_VAR 0 2
7402: MINUS
7403: ST_TO_ADDR
// end else
7404: GO 7467
// begin d := - 1 ;
7406: LD_ADDR_VAR 0 9
7410: PUSH
7411: LD_INT 1
7413: NEG
7414: ST_TO_ADDR
// if i_from > i_to then
7415: LD_VAR 0 2
7419: PUSH
7420: LD_VAR 0 3
7424: GREATER
7425: IFFALSE 7445
// length := i_from - i_to else
7427: LD_ADDR_VAR 0 11
7431: PUSH
7432: LD_VAR 0 2
7436: PUSH
7437: LD_VAR 0 3
7441: MINUS
7442: ST_TO_ADDR
7443: GO 7467
// length := ( array - i_to ) + i_from ;
7445: LD_ADDR_VAR 0 11
7449: PUSH
7450: LD_VAR 0 1
7454: PUSH
7455: LD_VAR 0 3
7459: MINUS
7460: PUSH
7461: LD_VAR 0 2
7465: PLUS
7466: ST_TO_ADDR
// end ; if not length then
7467: LD_VAR 0 11
7471: NOT
7472: IFFALSE 7476
// exit ;
7474: GO 7634
// tmp := array ;
7476: LD_ADDR_VAR 0 10
7480: PUSH
7481: LD_VAR 0 1
7485: ST_TO_ADDR
// for i = 1 to length do
7486: LD_ADDR_VAR 0 6
7490: PUSH
7491: DOUBLE
7492: LD_INT 1
7494: DEC
7495: ST_TO_ADDR
7496: LD_VAR 0 11
7500: PUSH
7501: FOR_TO
7502: IFFALSE 7622
// begin for j = 1 to array do
7504: LD_ADDR_VAR 0 7
7508: PUSH
7509: DOUBLE
7510: LD_INT 1
7512: DEC
7513: ST_TO_ADDR
7514: LD_VAR 0 1
7518: PUSH
7519: FOR_TO
7520: IFFALSE 7608
// begin k := j + d ;
7522: LD_ADDR_VAR 0 8
7526: PUSH
7527: LD_VAR 0 7
7531: PUSH
7532: LD_VAR 0 9
7536: PLUS
7537: ST_TO_ADDR
// if k > array then
7538: LD_VAR 0 8
7542: PUSH
7543: LD_VAR 0 1
7547: GREATER
7548: IFFALSE 7558
// k := 1 ;
7550: LD_ADDR_VAR 0 8
7554: PUSH
7555: LD_INT 1
7557: ST_TO_ADDR
// if not k then
7558: LD_VAR 0 8
7562: NOT
7563: IFFALSE 7575
// k := array ;
7565: LD_ADDR_VAR 0 8
7569: PUSH
7570: LD_VAR 0 1
7574: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7575: LD_ADDR_VAR 0 10
7579: PUSH
7580: LD_VAR 0 10
7584: PPUSH
7585: LD_VAR 0 8
7589: PPUSH
7590: LD_VAR 0 1
7594: PUSH
7595: LD_VAR 0 7
7599: ARRAY
7600: PPUSH
7601: CALL_OW 1
7605: ST_TO_ADDR
// end ;
7606: GO 7519
7608: POP
7609: POP
// array := tmp ;
7610: LD_ADDR_VAR 0 1
7614: PUSH
7615: LD_VAR 0 10
7619: ST_TO_ADDR
// end ;
7620: GO 7501
7622: POP
7623: POP
// result := array ;
7624: LD_ADDR_VAR 0 5
7628: PUSH
7629: LD_VAR 0 1
7633: ST_TO_ADDR
// end ;
7634: LD_VAR 0 5
7638: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7639: LD_INT 0
7641: PPUSH
7642: PPUSH
// result := 0 ;
7643: LD_ADDR_VAR 0 3
7647: PUSH
7648: LD_INT 0
7650: ST_TO_ADDR
// if not array or not value in array then
7651: LD_VAR 0 1
7655: NOT
7656: PUSH
7657: LD_VAR 0 2
7661: PUSH
7662: LD_VAR 0 1
7666: IN
7667: NOT
7668: OR
7669: IFFALSE 7673
// exit ;
7671: GO 7727
// for i = 1 to array do
7673: LD_ADDR_VAR 0 4
7677: PUSH
7678: DOUBLE
7679: LD_INT 1
7681: DEC
7682: ST_TO_ADDR
7683: LD_VAR 0 1
7687: PUSH
7688: FOR_TO
7689: IFFALSE 7725
// if value = array [ i ] then
7691: LD_VAR 0 2
7695: PUSH
7696: LD_VAR 0 1
7700: PUSH
7701: LD_VAR 0 4
7705: ARRAY
7706: EQUAL
7707: IFFALSE 7723
// begin result := i ;
7709: LD_ADDR_VAR 0 3
7713: PUSH
7714: LD_VAR 0 4
7718: ST_TO_ADDR
// exit ;
7719: POP
7720: POP
7721: GO 7727
// end ;
7723: GO 7688
7725: POP
7726: POP
// end ;
7727: LD_VAR 0 3
7731: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7732: LD_INT 0
7734: PPUSH
// vc_chassis := chassis ;
7735: LD_ADDR_OWVAR 37
7739: PUSH
7740: LD_VAR 0 1
7744: ST_TO_ADDR
// vc_engine := engine ;
7745: LD_ADDR_OWVAR 39
7749: PUSH
7750: LD_VAR 0 2
7754: ST_TO_ADDR
// vc_control := control ;
7755: LD_ADDR_OWVAR 38
7759: PUSH
7760: LD_VAR 0 3
7764: ST_TO_ADDR
// vc_weapon := weapon ;
7765: LD_ADDR_OWVAR 40
7769: PUSH
7770: LD_VAR 0 4
7774: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7775: LD_ADDR_OWVAR 41
7779: PUSH
7780: LD_VAR 0 5
7784: ST_TO_ADDR
// end ;
7785: LD_VAR 0 6
7789: RET
// export function WantPlant ( unit ) ; var task ; begin
7790: LD_INT 0
7792: PPUSH
7793: PPUSH
// result := false ;
7794: LD_ADDR_VAR 0 2
7798: PUSH
7799: LD_INT 0
7801: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7802: LD_ADDR_VAR 0 3
7806: PUSH
7807: LD_VAR 0 1
7811: PPUSH
7812: CALL_OW 437
7816: ST_TO_ADDR
// if task then
7817: LD_VAR 0 3
7821: IFFALSE 7849
// if task [ 1 ] [ 1 ] = p then
7823: LD_VAR 0 3
7827: PUSH
7828: LD_INT 1
7830: ARRAY
7831: PUSH
7832: LD_INT 1
7834: ARRAY
7835: PUSH
7836: LD_STRING p
7838: EQUAL
7839: IFFALSE 7849
// result := true ;
7841: LD_ADDR_VAR 0 2
7845: PUSH
7846: LD_INT 1
7848: ST_TO_ADDR
// end ;
7849: LD_VAR 0 2
7853: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7854: LD_INT 0
7856: PPUSH
7857: PPUSH
7858: PPUSH
7859: PPUSH
// if pos < 1 then
7860: LD_VAR 0 2
7864: PUSH
7865: LD_INT 1
7867: LESS
7868: IFFALSE 7872
// exit ;
7870: GO 8175
// if pos = 1 then
7872: LD_VAR 0 2
7876: PUSH
7877: LD_INT 1
7879: EQUAL
7880: IFFALSE 7913
// result := Replace ( arr , pos [ 1 ] , value ) else
7882: LD_ADDR_VAR 0 4
7886: PUSH
7887: LD_VAR 0 1
7891: PPUSH
7892: LD_VAR 0 2
7896: PUSH
7897: LD_INT 1
7899: ARRAY
7900: PPUSH
7901: LD_VAR 0 3
7905: PPUSH
7906: CALL_OW 1
7910: ST_TO_ADDR
7911: GO 8175
// begin tmp := arr ;
7913: LD_ADDR_VAR 0 6
7917: PUSH
7918: LD_VAR 0 1
7922: ST_TO_ADDR
// s_arr := [ tmp ] ;
7923: LD_ADDR_VAR 0 7
7927: PUSH
7928: LD_VAR 0 6
7932: PUSH
7933: EMPTY
7934: LIST
7935: ST_TO_ADDR
// for i = 1 to pos - 1 do
7936: LD_ADDR_VAR 0 5
7940: PUSH
7941: DOUBLE
7942: LD_INT 1
7944: DEC
7945: ST_TO_ADDR
7946: LD_VAR 0 2
7950: PUSH
7951: LD_INT 1
7953: MINUS
7954: PUSH
7955: FOR_TO
7956: IFFALSE 8001
// begin tmp := tmp [ pos [ i ] ] ;
7958: LD_ADDR_VAR 0 6
7962: PUSH
7963: LD_VAR 0 6
7967: PUSH
7968: LD_VAR 0 2
7972: PUSH
7973: LD_VAR 0 5
7977: ARRAY
7978: ARRAY
7979: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7980: LD_ADDR_VAR 0 7
7984: PUSH
7985: LD_VAR 0 7
7989: PUSH
7990: LD_VAR 0 6
7994: PUSH
7995: EMPTY
7996: LIST
7997: ADD
7998: ST_TO_ADDR
// end ;
7999: GO 7955
8001: POP
8002: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8003: LD_ADDR_VAR 0 6
8007: PUSH
8008: LD_VAR 0 6
8012: PPUSH
8013: LD_VAR 0 2
8017: PUSH
8018: LD_VAR 0 2
8022: ARRAY
8023: PPUSH
8024: LD_VAR 0 3
8028: PPUSH
8029: CALL_OW 1
8033: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8034: LD_ADDR_VAR 0 7
8038: PUSH
8039: LD_VAR 0 7
8043: PPUSH
8044: LD_VAR 0 7
8048: PPUSH
8049: LD_VAR 0 6
8053: PPUSH
8054: CALL_OW 1
8058: ST_TO_ADDR
// for i = s_arr downto 2 do
8059: LD_ADDR_VAR 0 5
8063: PUSH
8064: DOUBLE
8065: LD_VAR 0 7
8069: INC
8070: ST_TO_ADDR
8071: LD_INT 2
8073: PUSH
8074: FOR_DOWNTO
8075: IFFALSE 8159
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8077: LD_ADDR_VAR 0 6
8081: PUSH
8082: LD_VAR 0 7
8086: PUSH
8087: LD_VAR 0 5
8091: PUSH
8092: LD_INT 1
8094: MINUS
8095: ARRAY
8096: PPUSH
8097: LD_VAR 0 2
8101: PUSH
8102: LD_VAR 0 5
8106: PUSH
8107: LD_INT 1
8109: MINUS
8110: ARRAY
8111: PPUSH
8112: LD_VAR 0 7
8116: PUSH
8117: LD_VAR 0 5
8121: ARRAY
8122: PPUSH
8123: CALL_OW 1
8127: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8128: LD_ADDR_VAR 0 7
8132: PUSH
8133: LD_VAR 0 7
8137: PPUSH
8138: LD_VAR 0 5
8142: PUSH
8143: LD_INT 1
8145: MINUS
8146: PPUSH
8147: LD_VAR 0 6
8151: PPUSH
8152: CALL_OW 1
8156: ST_TO_ADDR
// end ;
8157: GO 8074
8159: POP
8160: POP
// result := s_arr [ 1 ] ;
8161: LD_ADDR_VAR 0 4
8165: PUSH
8166: LD_VAR 0 7
8170: PUSH
8171: LD_INT 1
8173: ARRAY
8174: ST_TO_ADDR
// end ; end ;
8175: LD_VAR 0 4
8179: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8180: LD_INT 0
8182: PPUSH
8183: PPUSH
// if not list then
8184: LD_VAR 0 1
8188: NOT
8189: IFFALSE 8193
// exit ;
8191: GO 8284
// i := list [ pos1 ] ;
8193: LD_ADDR_VAR 0 5
8197: PUSH
8198: LD_VAR 0 1
8202: PUSH
8203: LD_VAR 0 2
8207: ARRAY
8208: ST_TO_ADDR
// if not i then
8209: LD_VAR 0 5
8213: NOT
8214: IFFALSE 8218
// exit ;
8216: GO 8284
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8218: LD_ADDR_VAR 0 1
8222: PUSH
8223: LD_VAR 0 1
8227: PPUSH
8228: LD_VAR 0 2
8232: PPUSH
8233: LD_VAR 0 1
8237: PUSH
8238: LD_VAR 0 3
8242: ARRAY
8243: PPUSH
8244: CALL_OW 1
8248: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8249: LD_ADDR_VAR 0 1
8253: PUSH
8254: LD_VAR 0 1
8258: PPUSH
8259: LD_VAR 0 3
8263: PPUSH
8264: LD_VAR 0 5
8268: PPUSH
8269: CALL_OW 1
8273: ST_TO_ADDR
// result := list ;
8274: LD_ADDR_VAR 0 4
8278: PUSH
8279: LD_VAR 0 1
8283: ST_TO_ADDR
// end ;
8284: LD_VAR 0 4
8288: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8289: LD_INT 0
8291: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8292: LD_ADDR_VAR 0 5
8296: PUSH
8297: LD_VAR 0 1
8301: PPUSH
8302: CALL_OW 250
8306: PPUSH
8307: LD_VAR 0 1
8311: PPUSH
8312: CALL_OW 251
8316: PPUSH
8317: LD_VAR 0 2
8321: PPUSH
8322: LD_VAR 0 3
8326: PPUSH
8327: LD_VAR 0 4
8331: PPUSH
8332: CALL 8710 0 5
8336: ST_TO_ADDR
// end ;
8337: LD_VAR 0 5
8341: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8342: LD_INT 0
8344: PPUSH
8345: PPUSH
8346: PPUSH
8347: PPUSH
// if not list or not unit then
8348: LD_VAR 0 2
8352: NOT
8353: PUSH
8354: LD_VAR 0 1
8358: NOT
8359: OR
8360: IFFALSE 8364
// exit ;
8362: GO 8705
// result := [ ] ;
8364: LD_ADDR_VAR 0 5
8368: PUSH
8369: EMPTY
8370: ST_TO_ADDR
// for i in list do
8371: LD_ADDR_VAR 0 6
8375: PUSH
8376: LD_VAR 0 2
8380: PUSH
8381: FOR_IN
8382: IFFALSE 8600
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8384: LD_ADDR_VAR 0 8
8388: PUSH
8389: LD_VAR 0 1
8393: PPUSH
8394: LD_VAR 0 6
8398: PUSH
8399: LD_INT 1
8401: ARRAY
8402: PPUSH
8403: LD_VAR 0 6
8407: PUSH
8408: LD_INT 2
8410: ARRAY
8411: PPUSH
8412: CALL_OW 297
8416: ST_TO_ADDR
// if not Count ( result ) then
8417: LD_VAR 0 5
8421: PPUSH
8422: CALL 4994 0 1
8426: NOT
8427: IFFALSE 8460
// begin result := Join ( result , [ i , tmp ] ) ;
8429: LD_ADDR_VAR 0 5
8433: PUSH
8434: LD_VAR 0 5
8438: PPUSH
8439: LD_VAR 0 6
8443: PUSH
8444: LD_VAR 0 8
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PPUSH
8453: CALL 40603 0 2
8457: ST_TO_ADDR
// continue ;
8458: GO 8381
// end ; if result [ result ] [ 2 ] <= tmp then
8460: LD_VAR 0 5
8464: PUSH
8465: LD_VAR 0 5
8469: ARRAY
8470: PUSH
8471: LD_INT 2
8473: ARRAY
8474: PUSH
8475: LD_VAR 0 8
8479: LESSEQUAL
8480: IFFALSE 8513
// result := Join ( result , [ i , tmp ] ) else
8482: LD_ADDR_VAR 0 5
8486: PUSH
8487: LD_VAR 0 5
8491: PPUSH
8492: LD_VAR 0 6
8496: PUSH
8497: LD_VAR 0 8
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: PPUSH
8506: CALL 40603 0 2
8510: ST_TO_ADDR
8511: GO 8598
// begin for j := 1 to Count ( result ) do
8513: LD_ADDR_VAR 0 7
8517: PUSH
8518: DOUBLE
8519: LD_INT 1
8521: DEC
8522: ST_TO_ADDR
8523: LD_VAR 0 5
8527: PPUSH
8528: CALL 4994 0 1
8532: PUSH
8533: FOR_TO
8534: IFFALSE 8596
// begin if tmp < result [ j ] [ 2 ] then
8536: LD_VAR 0 8
8540: PUSH
8541: LD_VAR 0 5
8545: PUSH
8546: LD_VAR 0 7
8550: ARRAY
8551: PUSH
8552: LD_INT 2
8554: ARRAY
8555: LESS
8556: IFFALSE 8594
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8558: LD_ADDR_VAR 0 5
8562: PUSH
8563: LD_VAR 0 5
8567: PPUSH
8568: LD_VAR 0 7
8572: PPUSH
8573: LD_VAR 0 6
8577: PUSH
8578: LD_VAR 0 8
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PPUSH
8587: CALL_OW 2
8591: ST_TO_ADDR
// break ;
8592: GO 8596
// end ; end ;
8594: GO 8533
8596: POP
8597: POP
// end ; end ;
8598: GO 8381
8600: POP
8601: POP
// if result and not asc then
8602: LD_VAR 0 5
8606: PUSH
8607: LD_VAR 0 3
8611: NOT
8612: AND
8613: IFFALSE 8630
// result := ReverseArray ( result ) ;
8615: LD_ADDR_VAR 0 5
8619: PUSH
8620: LD_VAR 0 5
8624: PPUSH
8625: CALL 35870 0 1
8629: ST_TO_ADDR
// tmp := [ ] ;
8630: LD_ADDR_VAR 0 8
8634: PUSH
8635: EMPTY
8636: ST_TO_ADDR
// if mode then
8637: LD_VAR 0 4
8641: IFFALSE 8705
// begin for i := 1 to result do
8643: LD_ADDR_VAR 0 6
8647: PUSH
8648: DOUBLE
8649: LD_INT 1
8651: DEC
8652: ST_TO_ADDR
8653: LD_VAR 0 5
8657: PUSH
8658: FOR_TO
8659: IFFALSE 8693
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8661: LD_ADDR_VAR 0 8
8665: PUSH
8666: LD_VAR 0 8
8670: PPUSH
8671: LD_VAR 0 5
8675: PUSH
8676: LD_VAR 0 6
8680: ARRAY
8681: PUSH
8682: LD_INT 1
8684: ARRAY
8685: PPUSH
8686: CALL 40603 0 2
8690: ST_TO_ADDR
8691: GO 8658
8693: POP
8694: POP
// result := tmp ;
8695: LD_ADDR_VAR 0 5
8699: PUSH
8700: LD_VAR 0 8
8704: ST_TO_ADDR
// end ; end ;
8705: LD_VAR 0 5
8709: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8710: LD_INT 0
8712: PPUSH
8713: PPUSH
8714: PPUSH
8715: PPUSH
// if not list then
8716: LD_VAR 0 3
8720: NOT
8721: IFFALSE 8725
// exit ;
8723: GO 9113
// result := [ ] ;
8725: LD_ADDR_VAR 0 6
8729: PUSH
8730: EMPTY
8731: ST_TO_ADDR
// for i in list do
8732: LD_ADDR_VAR 0 7
8736: PUSH
8737: LD_VAR 0 3
8741: PUSH
8742: FOR_IN
8743: IFFALSE 8945
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8745: LD_ADDR_VAR 0 9
8749: PUSH
8750: LD_VAR 0 7
8754: PPUSH
8755: LD_VAR 0 1
8759: PPUSH
8760: LD_VAR 0 2
8764: PPUSH
8765: CALL_OW 297
8769: ST_TO_ADDR
// if not result then
8770: LD_VAR 0 6
8774: NOT
8775: IFFALSE 8801
// result := [ [ i , tmp ] ] else
8777: LD_ADDR_VAR 0 6
8781: PUSH
8782: LD_VAR 0 7
8786: PUSH
8787: LD_VAR 0 9
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: EMPTY
8797: LIST
8798: ST_TO_ADDR
8799: GO 8943
// begin if result [ result ] [ 2 ] <= tmp then
8801: LD_VAR 0 6
8805: PUSH
8806: LD_VAR 0 6
8810: ARRAY
8811: PUSH
8812: LD_INT 2
8814: ARRAY
8815: PUSH
8816: LD_VAR 0 9
8820: LESSEQUAL
8821: IFFALSE 8863
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8823: LD_ADDR_VAR 0 6
8827: PUSH
8828: LD_VAR 0 6
8832: PPUSH
8833: LD_VAR 0 6
8837: PUSH
8838: LD_INT 1
8840: PLUS
8841: PPUSH
8842: LD_VAR 0 7
8846: PUSH
8847: LD_VAR 0 9
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PPUSH
8856: CALL_OW 2
8860: ST_TO_ADDR
8861: GO 8943
// for j := 1 to result do
8863: LD_ADDR_VAR 0 8
8867: PUSH
8868: DOUBLE
8869: LD_INT 1
8871: DEC
8872: ST_TO_ADDR
8873: LD_VAR 0 6
8877: PUSH
8878: FOR_TO
8879: IFFALSE 8941
// begin if tmp < result [ j ] [ 2 ] then
8881: LD_VAR 0 9
8885: PUSH
8886: LD_VAR 0 6
8890: PUSH
8891: LD_VAR 0 8
8895: ARRAY
8896: PUSH
8897: LD_INT 2
8899: ARRAY
8900: LESS
8901: IFFALSE 8939
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8903: LD_ADDR_VAR 0 6
8907: PUSH
8908: LD_VAR 0 6
8912: PPUSH
8913: LD_VAR 0 8
8917: PPUSH
8918: LD_VAR 0 7
8922: PUSH
8923: LD_VAR 0 9
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PPUSH
8932: CALL_OW 2
8936: ST_TO_ADDR
// break ;
8937: GO 8941
// end ; end ;
8939: GO 8878
8941: POP
8942: POP
// end ; end ;
8943: GO 8742
8945: POP
8946: POP
// if result and not asc then
8947: LD_VAR 0 6
8951: PUSH
8952: LD_VAR 0 4
8956: NOT
8957: AND
8958: IFFALSE 9033
// begin tmp := result ;
8960: LD_ADDR_VAR 0 9
8964: PUSH
8965: LD_VAR 0 6
8969: ST_TO_ADDR
// for i = tmp downto 1 do
8970: LD_ADDR_VAR 0 7
8974: PUSH
8975: DOUBLE
8976: LD_VAR 0 9
8980: INC
8981: ST_TO_ADDR
8982: LD_INT 1
8984: PUSH
8985: FOR_DOWNTO
8986: IFFALSE 9031
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8988: LD_ADDR_VAR 0 6
8992: PUSH
8993: LD_VAR 0 6
8997: PPUSH
8998: LD_VAR 0 9
9002: PUSH
9003: LD_VAR 0 7
9007: MINUS
9008: PUSH
9009: LD_INT 1
9011: PLUS
9012: PPUSH
9013: LD_VAR 0 9
9017: PUSH
9018: LD_VAR 0 7
9022: ARRAY
9023: PPUSH
9024: CALL_OW 1
9028: ST_TO_ADDR
9029: GO 8985
9031: POP
9032: POP
// end ; tmp := [ ] ;
9033: LD_ADDR_VAR 0 9
9037: PUSH
9038: EMPTY
9039: ST_TO_ADDR
// if mode then
9040: LD_VAR 0 5
9044: IFFALSE 9113
// begin for i = 1 to result do
9046: LD_ADDR_VAR 0 7
9050: PUSH
9051: DOUBLE
9052: LD_INT 1
9054: DEC
9055: ST_TO_ADDR
9056: LD_VAR 0 6
9060: PUSH
9061: FOR_TO
9062: IFFALSE 9101
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9064: LD_ADDR_VAR 0 9
9068: PUSH
9069: LD_VAR 0 9
9073: PPUSH
9074: LD_VAR 0 7
9078: PPUSH
9079: LD_VAR 0 6
9083: PUSH
9084: LD_VAR 0 7
9088: ARRAY
9089: PUSH
9090: LD_INT 1
9092: ARRAY
9093: PPUSH
9094: CALL_OW 1
9098: ST_TO_ADDR
9099: GO 9061
9101: POP
9102: POP
// result := tmp ;
9103: LD_ADDR_VAR 0 6
9107: PUSH
9108: LD_VAR 0 9
9112: ST_TO_ADDR
// end ; end ;
9113: LD_VAR 0 6
9117: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9118: LD_INT 0
9120: PPUSH
9121: PPUSH
9122: PPUSH
9123: PPUSH
9124: PPUSH
9125: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9126: LD_ADDR_VAR 0 5
9130: PUSH
9131: LD_INT 0
9133: PUSH
9134: LD_INT 0
9136: PUSH
9137: LD_INT 0
9139: PUSH
9140: EMPTY
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: ST_TO_ADDR
// if not x or not y then
9148: LD_VAR 0 2
9152: NOT
9153: PUSH
9154: LD_VAR 0 3
9158: NOT
9159: OR
9160: IFFALSE 9164
// exit ;
9162: GO 10814
// if not range then
9164: LD_VAR 0 4
9168: NOT
9169: IFFALSE 9179
// range := 10 ;
9171: LD_ADDR_VAR 0 4
9175: PUSH
9176: LD_INT 10
9178: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9179: LD_ADDR_VAR 0 8
9183: PUSH
9184: LD_INT 81
9186: PUSH
9187: LD_VAR 0 1
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PUSH
9196: LD_INT 92
9198: PUSH
9199: LD_VAR 0 2
9203: PUSH
9204: LD_VAR 0 3
9208: PUSH
9209: LD_VAR 0 4
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 3
9222: PUSH
9223: LD_INT 21
9225: PUSH
9226: LD_INT 3
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: LIST
9241: PPUSH
9242: CALL_OW 69
9246: ST_TO_ADDR
// if not tmp then
9247: LD_VAR 0 8
9251: NOT
9252: IFFALSE 9256
// exit ;
9254: GO 10814
// for i in tmp do
9256: LD_ADDR_VAR 0 6
9260: PUSH
9261: LD_VAR 0 8
9265: PUSH
9266: FOR_IN
9267: IFFALSE 10789
// begin points := [ 0 , 0 , 0 ] ;
9269: LD_ADDR_VAR 0 9
9273: PUSH
9274: LD_INT 0
9276: PUSH
9277: LD_INT 0
9279: PUSH
9280: LD_INT 0
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: ST_TO_ADDR
// bpoints := 1 ;
9288: LD_ADDR_VAR 0 10
9292: PUSH
9293: LD_INT 1
9295: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9296: LD_VAR 0 6
9300: PPUSH
9301: CALL_OW 247
9305: PUSH
9306: LD_INT 1
9308: DOUBLE
9309: EQUAL
9310: IFTRUE 9314
9312: GO 9892
9314: POP
// begin if GetClass ( i ) = 1 then
9315: LD_VAR 0 6
9319: PPUSH
9320: CALL_OW 257
9324: PUSH
9325: LD_INT 1
9327: EQUAL
9328: IFFALSE 9349
// points := [ 10 , 5 , 3 ] ;
9330: LD_ADDR_VAR 0 9
9334: PUSH
9335: LD_INT 10
9337: PUSH
9338: LD_INT 5
9340: PUSH
9341: LD_INT 3
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: LIST
9348: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9349: LD_VAR 0 6
9353: PPUSH
9354: CALL_OW 257
9358: PUSH
9359: LD_INT 2
9361: PUSH
9362: LD_INT 3
9364: PUSH
9365: LD_INT 4
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: LIST
9372: IN
9373: IFFALSE 9394
// points := [ 3 , 2 , 1 ] ;
9375: LD_ADDR_VAR 0 9
9379: PUSH
9380: LD_INT 3
9382: PUSH
9383: LD_INT 2
9385: PUSH
9386: LD_INT 1
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: LIST
9393: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9394: LD_VAR 0 6
9398: PPUSH
9399: CALL_OW 257
9403: PUSH
9404: LD_INT 5
9406: EQUAL
9407: IFFALSE 9428
// points := [ 130 , 5 , 2 ] ;
9409: LD_ADDR_VAR 0 9
9413: PUSH
9414: LD_INT 130
9416: PUSH
9417: LD_INT 5
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9428: LD_VAR 0 6
9432: PPUSH
9433: CALL_OW 257
9437: PUSH
9438: LD_INT 8
9440: EQUAL
9441: IFFALSE 9462
// points := [ 35 , 35 , 30 ] ;
9443: LD_ADDR_VAR 0 9
9447: PUSH
9448: LD_INT 35
9450: PUSH
9451: LD_INT 35
9453: PUSH
9454: LD_INT 30
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: LIST
9461: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9462: LD_VAR 0 6
9466: PPUSH
9467: CALL_OW 257
9471: PUSH
9472: LD_INT 9
9474: EQUAL
9475: IFFALSE 9496
// points := [ 20 , 55 , 40 ] ;
9477: LD_ADDR_VAR 0 9
9481: PUSH
9482: LD_INT 20
9484: PUSH
9485: LD_INT 55
9487: PUSH
9488: LD_INT 40
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: LIST
9495: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9496: LD_VAR 0 6
9500: PPUSH
9501: CALL_OW 257
9505: PUSH
9506: LD_INT 12
9508: PUSH
9509: LD_INT 16
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: IN
9516: IFFALSE 9537
// points := [ 5 , 3 , 2 ] ;
9518: LD_ADDR_VAR 0 9
9522: PUSH
9523: LD_INT 5
9525: PUSH
9526: LD_INT 3
9528: PUSH
9529: LD_INT 2
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9537: LD_VAR 0 6
9541: PPUSH
9542: CALL_OW 257
9546: PUSH
9547: LD_INT 17
9549: EQUAL
9550: IFFALSE 9571
// points := [ 100 , 50 , 75 ] ;
9552: LD_ADDR_VAR 0 9
9556: PUSH
9557: LD_INT 100
9559: PUSH
9560: LD_INT 50
9562: PUSH
9563: LD_INT 75
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: LIST
9570: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9571: LD_VAR 0 6
9575: PPUSH
9576: CALL_OW 257
9580: PUSH
9581: LD_INT 15
9583: EQUAL
9584: IFFALSE 9605
// points := [ 10 , 5 , 3 ] ;
9586: LD_ADDR_VAR 0 9
9590: PUSH
9591: LD_INT 10
9593: PUSH
9594: LD_INT 5
9596: PUSH
9597: LD_INT 3
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: LIST
9604: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9605: LD_VAR 0 6
9609: PPUSH
9610: CALL_OW 257
9614: PUSH
9615: LD_INT 14
9617: EQUAL
9618: IFFALSE 9639
// points := [ 10 , 0 , 0 ] ;
9620: LD_ADDR_VAR 0 9
9624: PUSH
9625: LD_INT 10
9627: PUSH
9628: LD_INT 0
9630: PUSH
9631: LD_INT 0
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9639: LD_VAR 0 6
9643: PPUSH
9644: CALL_OW 257
9648: PUSH
9649: LD_INT 11
9651: EQUAL
9652: IFFALSE 9673
// points := [ 30 , 10 , 5 ] ;
9654: LD_ADDR_VAR 0 9
9658: PUSH
9659: LD_INT 30
9661: PUSH
9662: LD_INT 10
9664: PUSH
9665: LD_INT 5
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9673: LD_VAR 0 1
9677: PPUSH
9678: LD_INT 5
9680: PPUSH
9681: CALL_OW 321
9685: PUSH
9686: LD_INT 2
9688: EQUAL
9689: IFFALSE 9706
// bpoints := bpoints * 1.8 ;
9691: LD_ADDR_VAR 0 10
9695: PUSH
9696: LD_VAR 0 10
9700: PUSH
9701: LD_REAL  1.80000000000000E+0000
9704: MUL
9705: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9706: LD_VAR 0 6
9710: PPUSH
9711: CALL_OW 257
9715: PUSH
9716: LD_INT 1
9718: PUSH
9719: LD_INT 2
9721: PUSH
9722: LD_INT 3
9724: PUSH
9725: LD_INT 4
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: IN
9734: PUSH
9735: LD_VAR 0 1
9739: PPUSH
9740: LD_INT 51
9742: PPUSH
9743: CALL_OW 321
9747: PUSH
9748: LD_INT 2
9750: EQUAL
9751: AND
9752: IFFALSE 9769
// bpoints := bpoints * 1.2 ;
9754: LD_ADDR_VAR 0 10
9758: PUSH
9759: LD_VAR 0 10
9763: PUSH
9764: LD_REAL  1.20000000000000E+0000
9767: MUL
9768: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9769: LD_VAR 0 6
9773: PPUSH
9774: CALL_OW 257
9778: PUSH
9779: LD_INT 5
9781: PUSH
9782: LD_INT 7
9784: PUSH
9785: LD_INT 9
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: IN
9793: PUSH
9794: LD_VAR 0 1
9798: PPUSH
9799: LD_INT 52
9801: PPUSH
9802: CALL_OW 321
9806: PUSH
9807: LD_INT 2
9809: EQUAL
9810: AND
9811: IFFALSE 9828
// bpoints := bpoints * 1.5 ;
9813: LD_ADDR_VAR 0 10
9817: PUSH
9818: LD_VAR 0 10
9822: PUSH
9823: LD_REAL  1.50000000000000E+0000
9826: MUL
9827: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9828: LD_VAR 0 1
9832: PPUSH
9833: LD_INT 66
9835: PPUSH
9836: CALL_OW 321
9840: PUSH
9841: LD_INT 2
9843: EQUAL
9844: IFFALSE 9861
// bpoints := bpoints * 1.1 ;
9846: LD_ADDR_VAR 0 10
9850: PUSH
9851: LD_VAR 0 10
9855: PUSH
9856: LD_REAL  1.10000000000000E+0000
9859: MUL
9860: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9861: LD_ADDR_VAR 0 10
9865: PUSH
9866: LD_VAR 0 10
9870: PUSH
9871: LD_VAR 0 6
9875: PPUSH
9876: LD_INT 1
9878: PPUSH
9879: CALL_OW 259
9883: PUSH
9884: LD_REAL  1.15000000000000E+0000
9887: MUL
9888: MUL
9889: ST_TO_ADDR
// end ; unit_vehicle :
9890: GO 10718
9892: LD_INT 2
9894: DOUBLE
9895: EQUAL
9896: IFTRUE 9900
9898: GO 10706
9900: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9901: LD_VAR 0 6
9905: PPUSH
9906: CALL_OW 264
9910: PUSH
9911: LD_INT 2
9913: PUSH
9914: LD_INT 42
9916: PUSH
9917: LD_INT 24
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: LIST
9924: IN
9925: IFFALSE 9946
// points := [ 25 , 5 , 3 ] ;
9927: LD_ADDR_VAR 0 9
9931: PUSH
9932: LD_INT 25
9934: PUSH
9935: LD_INT 5
9937: PUSH
9938: LD_INT 3
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: LIST
9945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9946: LD_VAR 0 6
9950: PPUSH
9951: CALL_OW 264
9955: PUSH
9956: LD_INT 4
9958: PUSH
9959: LD_INT 43
9961: PUSH
9962: LD_INT 25
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: LIST
9969: IN
9970: IFFALSE 9991
// points := [ 40 , 15 , 5 ] ;
9972: LD_ADDR_VAR 0 9
9976: PUSH
9977: LD_INT 40
9979: PUSH
9980: LD_INT 15
9982: PUSH
9983: LD_INT 5
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9991: LD_VAR 0 6
9995: PPUSH
9996: CALL_OW 264
10000: PUSH
10001: LD_INT 3
10003: PUSH
10004: LD_INT 23
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: IN
10011: IFFALSE 10032
// points := [ 7 , 25 , 8 ] ;
10013: LD_ADDR_VAR 0 9
10017: PUSH
10018: LD_INT 7
10020: PUSH
10021: LD_INT 25
10023: PUSH
10024: LD_INT 8
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: LIST
10031: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10032: LD_VAR 0 6
10036: PPUSH
10037: CALL_OW 264
10041: PUSH
10042: LD_INT 5
10044: PUSH
10045: LD_INT 27
10047: PUSH
10048: LD_INT 44
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: LIST
10055: IN
10056: IFFALSE 10077
// points := [ 14 , 50 , 16 ] ;
10058: LD_ADDR_VAR 0 9
10062: PUSH
10063: LD_INT 14
10065: PUSH
10066: LD_INT 50
10068: PUSH
10069: LD_INT 16
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: LIST
10076: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10077: LD_VAR 0 6
10081: PPUSH
10082: CALL_OW 264
10086: PUSH
10087: LD_INT 6
10089: PUSH
10090: LD_INT 46
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: IN
10097: IFFALSE 10118
// points := [ 32 , 120 , 70 ] ;
10099: LD_ADDR_VAR 0 9
10103: PUSH
10104: LD_INT 32
10106: PUSH
10107: LD_INT 120
10109: PUSH
10110: LD_INT 70
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: LIST
10117: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10118: LD_VAR 0 6
10122: PPUSH
10123: CALL_OW 264
10127: PUSH
10128: LD_INT 7
10130: PUSH
10131: LD_INT 28
10133: PUSH
10134: LD_INT 45
10136: PUSH
10137: LD_INT 92
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: IN
10146: IFFALSE 10167
// points := [ 35 , 20 , 45 ] ;
10148: LD_ADDR_VAR 0 9
10152: PUSH
10153: LD_INT 35
10155: PUSH
10156: LD_INT 20
10158: PUSH
10159: LD_INT 45
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: LIST
10166: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10167: LD_VAR 0 6
10171: PPUSH
10172: CALL_OW 264
10176: PUSH
10177: LD_INT 47
10179: PUSH
10180: EMPTY
10181: LIST
10182: IN
10183: IFFALSE 10204
// points := [ 67 , 45 , 75 ] ;
10185: LD_ADDR_VAR 0 9
10189: PUSH
10190: LD_INT 67
10192: PUSH
10193: LD_INT 45
10195: PUSH
10196: LD_INT 75
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: LIST
10203: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10204: LD_VAR 0 6
10208: PPUSH
10209: CALL_OW 264
10213: PUSH
10214: LD_INT 26
10216: PUSH
10217: EMPTY
10218: LIST
10219: IN
10220: IFFALSE 10241
// points := [ 120 , 30 , 80 ] ;
10222: LD_ADDR_VAR 0 9
10226: PUSH
10227: LD_INT 120
10229: PUSH
10230: LD_INT 30
10232: PUSH
10233: LD_INT 80
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: LIST
10240: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10241: LD_VAR 0 6
10245: PPUSH
10246: CALL_OW 264
10250: PUSH
10251: LD_INT 22
10253: PUSH
10254: EMPTY
10255: LIST
10256: IN
10257: IFFALSE 10278
// points := [ 40 , 1 , 1 ] ;
10259: LD_ADDR_VAR 0 9
10263: PUSH
10264: LD_INT 40
10266: PUSH
10267: LD_INT 1
10269: PUSH
10270: LD_INT 1
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: LIST
10277: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10278: LD_VAR 0 6
10282: PPUSH
10283: CALL_OW 264
10287: PUSH
10288: LD_INT 29
10290: PUSH
10291: EMPTY
10292: LIST
10293: IN
10294: IFFALSE 10315
// points := [ 70 , 200 , 400 ] ;
10296: LD_ADDR_VAR 0 9
10300: PUSH
10301: LD_INT 70
10303: PUSH
10304: LD_INT 200
10306: PUSH
10307: LD_INT 400
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10315: LD_VAR 0 6
10319: PPUSH
10320: CALL_OW 264
10324: PUSH
10325: LD_INT 14
10327: PUSH
10328: LD_INT 53
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: IN
10335: IFFALSE 10356
// points := [ 40 , 10 , 20 ] ;
10337: LD_ADDR_VAR 0 9
10341: PUSH
10342: LD_INT 40
10344: PUSH
10345: LD_INT 10
10347: PUSH
10348: LD_INT 20
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10356: LD_VAR 0 6
10360: PPUSH
10361: CALL_OW 264
10365: PUSH
10366: LD_INT 9
10368: PUSH
10369: EMPTY
10370: LIST
10371: IN
10372: IFFALSE 10393
// points := [ 5 , 70 , 20 ] ;
10374: LD_ADDR_VAR 0 9
10378: PUSH
10379: LD_INT 5
10381: PUSH
10382: LD_INT 70
10384: PUSH
10385: LD_INT 20
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: LIST
10392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10393: LD_VAR 0 6
10397: PPUSH
10398: CALL_OW 264
10402: PUSH
10403: LD_INT 10
10405: PUSH
10406: EMPTY
10407: LIST
10408: IN
10409: IFFALSE 10430
// points := [ 35 , 110 , 70 ] ;
10411: LD_ADDR_VAR 0 9
10415: PUSH
10416: LD_INT 35
10418: PUSH
10419: LD_INT 110
10421: PUSH
10422: LD_INT 70
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: LIST
10429: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10430: LD_VAR 0 6
10434: PPUSH
10435: CALL_OW 265
10439: PUSH
10440: LD_INT 25
10442: EQUAL
10443: IFFALSE 10464
// points := [ 80 , 65 , 100 ] ;
10445: LD_ADDR_VAR 0 9
10449: PUSH
10450: LD_INT 80
10452: PUSH
10453: LD_INT 65
10455: PUSH
10456: LD_INT 100
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10464: LD_VAR 0 6
10468: PPUSH
10469: CALL_OW 263
10473: PUSH
10474: LD_INT 1
10476: EQUAL
10477: IFFALSE 10512
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10479: LD_ADDR_VAR 0 10
10483: PUSH
10484: LD_VAR 0 10
10488: PUSH
10489: LD_VAR 0 6
10493: PPUSH
10494: CALL_OW 311
10498: PPUSH
10499: LD_INT 3
10501: PPUSH
10502: CALL_OW 259
10506: PUSH
10507: LD_INT 4
10509: MUL
10510: MUL
10511: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10512: LD_VAR 0 6
10516: PPUSH
10517: CALL_OW 263
10521: PUSH
10522: LD_INT 2
10524: EQUAL
10525: IFFALSE 10576
// begin j := IsControledBy ( i ) ;
10527: LD_ADDR_VAR 0 7
10531: PUSH
10532: LD_VAR 0 6
10536: PPUSH
10537: CALL_OW 312
10541: ST_TO_ADDR
// if j then
10542: LD_VAR 0 7
10546: IFFALSE 10576
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10548: LD_ADDR_VAR 0 10
10552: PUSH
10553: LD_VAR 0 10
10557: PUSH
10558: LD_VAR 0 7
10562: PPUSH
10563: LD_INT 3
10565: PPUSH
10566: CALL_OW 259
10570: PUSH
10571: LD_INT 3
10573: MUL
10574: MUL
10575: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10576: LD_VAR 0 6
10580: PPUSH
10581: CALL_OW 264
10585: PUSH
10586: LD_INT 5
10588: PUSH
10589: LD_INT 6
10591: PUSH
10592: LD_INT 46
10594: PUSH
10595: LD_INT 44
10597: PUSH
10598: LD_INT 47
10600: PUSH
10601: LD_INT 45
10603: PUSH
10604: LD_INT 28
10606: PUSH
10607: LD_INT 7
10609: PUSH
10610: LD_INT 27
10612: PUSH
10613: LD_INT 29
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: IN
10628: PUSH
10629: LD_VAR 0 1
10633: PPUSH
10634: LD_INT 52
10636: PPUSH
10637: CALL_OW 321
10641: PUSH
10642: LD_INT 2
10644: EQUAL
10645: AND
10646: IFFALSE 10663
// bpoints := bpoints * 1.2 ;
10648: LD_ADDR_VAR 0 10
10652: PUSH
10653: LD_VAR 0 10
10657: PUSH
10658: LD_REAL  1.20000000000000E+0000
10661: MUL
10662: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10663: LD_VAR 0 6
10667: PPUSH
10668: CALL_OW 264
10672: PUSH
10673: LD_INT 6
10675: PUSH
10676: LD_INT 46
10678: PUSH
10679: LD_INT 47
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: IN
10687: IFFALSE 10704
// bpoints := bpoints * 1.2 ;
10689: LD_ADDR_VAR 0 10
10693: PUSH
10694: LD_VAR 0 10
10698: PUSH
10699: LD_REAL  1.20000000000000E+0000
10702: MUL
10703: ST_TO_ADDR
// end ; unit_building :
10704: GO 10718
10706: LD_INT 3
10708: DOUBLE
10709: EQUAL
10710: IFTRUE 10714
10712: GO 10717
10714: POP
// ; end ;
10715: GO 10718
10717: POP
// for j = 1 to 3 do
10718: LD_ADDR_VAR 0 7
10722: PUSH
10723: DOUBLE
10724: LD_INT 1
10726: DEC
10727: ST_TO_ADDR
10728: LD_INT 3
10730: PUSH
10731: FOR_TO
10732: IFFALSE 10785
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10734: LD_ADDR_VAR 0 5
10738: PUSH
10739: LD_VAR 0 5
10743: PPUSH
10744: LD_VAR 0 7
10748: PPUSH
10749: LD_VAR 0 5
10753: PUSH
10754: LD_VAR 0 7
10758: ARRAY
10759: PUSH
10760: LD_VAR 0 9
10764: PUSH
10765: LD_VAR 0 7
10769: ARRAY
10770: PUSH
10771: LD_VAR 0 10
10775: MUL
10776: PLUS
10777: PPUSH
10778: CALL_OW 1
10782: ST_TO_ADDR
10783: GO 10731
10785: POP
10786: POP
// end ;
10787: GO 9266
10789: POP
10790: POP
// result := Replace ( result , 4 , tmp ) ;
10791: LD_ADDR_VAR 0 5
10795: PUSH
10796: LD_VAR 0 5
10800: PPUSH
10801: LD_INT 4
10803: PPUSH
10804: LD_VAR 0 8
10808: PPUSH
10809: CALL_OW 1
10813: ST_TO_ADDR
// end ;
10814: LD_VAR 0 5
10818: RET
// export function DangerAtRange ( unit , range ) ; begin
10819: LD_INT 0
10821: PPUSH
// if not unit then
10822: LD_VAR 0 1
10826: NOT
10827: IFFALSE 10831
// exit ;
10829: GO 10876
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10831: LD_ADDR_VAR 0 3
10835: PUSH
10836: LD_VAR 0 1
10840: PPUSH
10841: CALL_OW 255
10845: PPUSH
10846: LD_VAR 0 1
10850: PPUSH
10851: CALL_OW 250
10855: PPUSH
10856: LD_VAR 0 1
10860: PPUSH
10861: CALL_OW 251
10865: PPUSH
10866: LD_VAR 0 2
10870: PPUSH
10871: CALL 9118 0 4
10875: ST_TO_ADDR
// end ;
10876: LD_VAR 0 3
10880: RET
// export function DangerInArea ( side , area ) ; begin
10881: LD_INT 0
10883: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10884: LD_ADDR_VAR 0 3
10888: PUSH
10889: LD_VAR 0 2
10893: PPUSH
10894: LD_INT 81
10896: PUSH
10897: LD_VAR 0 1
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PPUSH
10906: CALL_OW 70
10910: ST_TO_ADDR
// end ;
10911: LD_VAR 0 3
10915: RET
// export function IsExtension ( b ) ; begin
10916: LD_INT 0
10918: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10919: LD_ADDR_VAR 0 2
10923: PUSH
10924: LD_VAR 0 1
10928: PUSH
10929: LD_INT 23
10931: PUSH
10932: LD_INT 20
10934: PUSH
10935: LD_INT 22
10937: PUSH
10938: LD_INT 17
10940: PUSH
10941: LD_INT 24
10943: PUSH
10944: LD_INT 21
10946: PUSH
10947: LD_INT 19
10949: PUSH
10950: LD_INT 16
10952: PUSH
10953: LD_INT 25
10955: PUSH
10956: LD_INT 18
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: IN
10971: ST_TO_ADDR
// end ;
10972: LD_VAR 0 2
10976: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10977: LD_INT 0
10979: PPUSH
10980: PPUSH
10981: PPUSH
// result := [ ] ;
10982: LD_ADDR_VAR 0 4
10986: PUSH
10987: EMPTY
10988: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10989: LD_ADDR_VAR 0 5
10993: PUSH
10994: LD_VAR 0 2
10998: PPUSH
10999: LD_INT 21
11001: PUSH
11002: LD_INT 3
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PPUSH
11009: CALL_OW 70
11013: ST_TO_ADDR
// if not tmp then
11014: LD_VAR 0 5
11018: NOT
11019: IFFALSE 11023
// exit ;
11021: GO 11087
// if checkLink then
11023: LD_VAR 0 3
11027: IFFALSE 11077
// begin for i in tmp do
11029: LD_ADDR_VAR 0 6
11033: PUSH
11034: LD_VAR 0 5
11038: PUSH
11039: FOR_IN
11040: IFFALSE 11075
// if GetBase ( i ) <> base then
11042: LD_VAR 0 6
11046: PPUSH
11047: CALL_OW 274
11051: PUSH
11052: LD_VAR 0 1
11056: NONEQUAL
11057: IFFALSE 11073
// ComLinkToBase ( base , i ) ;
11059: LD_VAR 0 1
11063: PPUSH
11064: LD_VAR 0 6
11068: PPUSH
11069: CALL_OW 169
11073: GO 11039
11075: POP
11076: POP
// end ; result := tmp ;
11077: LD_ADDR_VAR 0 4
11081: PUSH
11082: LD_VAR 0 5
11086: ST_TO_ADDR
// end ;
11087: LD_VAR 0 4
11091: RET
// export function ComComplete ( units , b ) ; var i ; begin
11092: LD_INT 0
11094: PPUSH
11095: PPUSH
// if not units then
11096: LD_VAR 0 1
11100: NOT
11101: IFFALSE 11105
// exit ;
11103: GO 11195
// for i in units do
11105: LD_ADDR_VAR 0 4
11109: PUSH
11110: LD_VAR 0 1
11114: PUSH
11115: FOR_IN
11116: IFFALSE 11193
// if BuildingStatus ( b ) = bs_build then
11118: LD_VAR 0 2
11122: PPUSH
11123: CALL_OW 461
11127: PUSH
11128: LD_INT 1
11130: EQUAL
11131: IFFALSE 11191
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11133: LD_VAR 0 4
11137: PPUSH
11138: LD_STRING h
11140: PUSH
11141: LD_VAR 0 2
11145: PPUSH
11146: CALL_OW 250
11150: PUSH
11151: LD_VAR 0 2
11155: PPUSH
11156: CALL_OW 251
11160: PUSH
11161: LD_VAR 0 2
11165: PUSH
11166: LD_INT 0
11168: PUSH
11169: LD_INT 0
11171: PUSH
11172: LD_INT 0
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: PUSH
11184: EMPTY
11185: LIST
11186: PPUSH
11187: CALL_OW 446
11191: GO 11115
11193: POP
11194: POP
// end ;
11195: LD_VAR 0 3
11199: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11200: LD_INT 0
11202: PPUSH
11203: PPUSH
11204: PPUSH
11205: PPUSH
11206: PPUSH
11207: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11208: LD_VAR 0 1
11212: NOT
11213: PUSH
11214: LD_VAR 0 1
11218: PPUSH
11219: CALL_OW 263
11223: PUSH
11224: LD_INT 2
11226: NONEQUAL
11227: OR
11228: IFFALSE 11232
// exit ;
11230: GO 11548
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11232: LD_ADDR_VAR 0 6
11236: PUSH
11237: LD_INT 22
11239: PUSH
11240: LD_VAR 0 1
11244: PPUSH
11245: CALL_OW 255
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: LD_INT 30
11259: PUSH
11260: LD_INT 36
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: LD_INT 34
11269: PUSH
11270: LD_INT 31
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PPUSH
11286: CALL_OW 69
11290: ST_TO_ADDR
// if not tmp then
11291: LD_VAR 0 6
11295: NOT
11296: IFFALSE 11300
// exit ;
11298: GO 11548
// result := [ ] ;
11300: LD_ADDR_VAR 0 2
11304: PUSH
11305: EMPTY
11306: ST_TO_ADDR
// for i in tmp do
11307: LD_ADDR_VAR 0 3
11311: PUSH
11312: LD_VAR 0 6
11316: PUSH
11317: FOR_IN
11318: IFFALSE 11389
// begin t := UnitsInside ( i ) ;
11320: LD_ADDR_VAR 0 4
11324: PUSH
11325: LD_VAR 0 3
11329: PPUSH
11330: CALL_OW 313
11334: ST_TO_ADDR
// if t then
11335: LD_VAR 0 4
11339: IFFALSE 11387
// for j in t do
11341: LD_ADDR_VAR 0 7
11345: PUSH
11346: LD_VAR 0 4
11350: PUSH
11351: FOR_IN
11352: IFFALSE 11385
// result := Replace ( result , result + 1 , j ) ;
11354: LD_ADDR_VAR 0 2
11358: PUSH
11359: LD_VAR 0 2
11363: PPUSH
11364: LD_VAR 0 2
11368: PUSH
11369: LD_INT 1
11371: PLUS
11372: PPUSH
11373: LD_VAR 0 7
11377: PPUSH
11378: CALL_OW 1
11382: ST_TO_ADDR
11383: GO 11351
11385: POP
11386: POP
// end ;
11387: GO 11317
11389: POP
11390: POP
// if not result then
11391: LD_VAR 0 2
11395: NOT
11396: IFFALSE 11400
// exit ;
11398: GO 11548
// mech := result [ 1 ] ;
11400: LD_ADDR_VAR 0 5
11404: PUSH
11405: LD_VAR 0 2
11409: PUSH
11410: LD_INT 1
11412: ARRAY
11413: ST_TO_ADDR
// if result > 1 then
11414: LD_VAR 0 2
11418: PUSH
11419: LD_INT 1
11421: GREATER
11422: IFFALSE 11534
// begin for i = 2 to result do
11424: LD_ADDR_VAR 0 3
11428: PUSH
11429: DOUBLE
11430: LD_INT 2
11432: DEC
11433: ST_TO_ADDR
11434: LD_VAR 0 2
11438: PUSH
11439: FOR_TO
11440: IFFALSE 11532
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11442: LD_ADDR_VAR 0 4
11446: PUSH
11447: LD_VAR 0 2
11451: PUSH
11452: LD_VAR 0 3
11456: ARRAY
11457: PPUSH
11458: LD_INT 3
11460: PPUSH
11461: CALL_OW 259
11465: PUSH
11466: LD_VAR 0 2
11470: PUSH
11471: LD_VAR 0 3
11475: ARRAY
11476: PPUSH
11477: CALL_OW 432
11481: MINUS
11482: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11483: LD_VAR 0 4
11487: PUSH
11488: LD_VAR 0 5
11492: PPUSH
11493: LD_INT 3
11495: PPUSH
11496: CALL_OW 259
11500: PUSH
11501: LD_VAR 0 5
11505: PPUSH
11506: CALL_OW 432
11510: MINUS
11511: GREATEREQUAL
11512: IFFALSE 11530
// mech := result [ i ] ;
11514: LD_ADDR_VAR 0 5
11518: PUSH
11519: LD_VAR 0 2
11523: PUSH
11524: LD_VAR 0 3
11528: ARRAY
11529: ST_TO_ADDR
// end ;
11530: GO 11439
11532: POP
11533: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11534: LD_VAR 0 1
11538: PPUSH
11539: LD_VAR 0 5
11543: PPUSH
11544: CALL_OW 135
// end ;
11548: LD_VAR 0 2
11552: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11553: LD_INT 0
11555: PPUSH
11556: PPUSH
11557: PPUSH
11558: PPUSH
11559: PPUSH
11560: PPUSH
11561: PPUSH
11562: PPUSH
11563: PPUSH
11564: PPUSH
11565: PPUSH
11566: PPUSH
11567: PPUSH
// result := [ ] ;
11568: LD_ADDR_VAR 0 7
11572: PUSH
11573: EMPTY
11574: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11575: LD_VAR 0 1
11579: PPUSH
11580: CALL_OW 266
11584: PUSH
11585: LD_INT 0
11587: PUSH
11588: LD_INT 1
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: IN
11595: NOT
11596: IFFALSE 11600
// exit ;
11598: GO 13234
// if name then
11600: LD_VAR 0 3
11604: IFFALSE 11620
// SetBName ( base_dep , name ) ;
11606: LD_VAR 0 1
11610: PPUSH
11611: LD_VAR 0 3
11615: PPUSH
11616: CALL_OW 500
// base := GetBase ( base_dep ) ;
11620: LD_ADDR_VAR 0 15
11624: PUSH
11625: LD_VAR 0 1
11629: PPUSH
11630: CALL_OW 274
11634: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11635: LD_ADDR_VAR 0 16
11639: PUSH
11640: LD_VAR 0 1
11644: PPUSH
11645: CALL_OW 255
11649: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11650: LD_ADDR_VAR 0 17
11654: PUSH
11655: LD_VAR 0 1
11659: PPUSH
11660: CALL_OW 248
11664: ST_TO_ADDR
// if sources then
11665: LD_VAR 0 5
11669: IFFALSE 11716
// for i = 1 to 3 do
11671: LD_ADDR_VAR 0 8
11675: PUSH
11676: DOUBLE
11677: LD_INT 1
11679: DEC
11680: ST_TO_ADDR
11681: LD_INT 3
11683: PUSH
11684: FOR_TO
11685: IFFALSE 11714
// AddResourceType ( base , i , sources [ i ] ) ;
11687: LD_VAR 0 15
11691: PPUSH
11692: LD_VAR 0 8
11696: PPUSH
11697: LD_VAR 0 5
11701: PUSH
11702: LD_VAR 0 8
11706: ARRAY
11707: PPUSH
11708: CALL_OW 276
11712: GO 11684
11714: POP
11715: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11716: LD_ADDR_VAR 0 18
11720: PUSH
11721: LD_VAR 0 15
11725: PPUSH
11726: LD_VAR 0 2
11730: PPUSH
11731: LD_INT 1
11733: PPUSH
11734: CALL 10977 0 3
11738: ST_TO_ADDR
// InitHc ;
11739: CALL_OW 19
// InitUc ;
11743: CALL_OW 18
// uc_side := side ;
11747: LD_ADDR_OWVAR 20
11751: PUSH
11752: LD_VAR 0 16
11756: ST_TO_ADDR
// uc_nation := nation ;
11757: LD_ADDR_OWVAR 21
11761: PUSH
11762: LD_VAR 0 17
11766: ST_TO_ADDR
// if buildings then
11767: LD_VAR 0 18
11771: IFFALSE 13093
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11773: LD_ADDR_VAR 0 19
11777: PUSH
11778: LD_VAR 0 18
11782: PPUSH
11783: LD_INT 2
11785: PUSH
11786: LD_INT 30
11788: PUSH
11789: LD_INT 29
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 30
11798: PUSH
11799: LD_INT 30
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: PPUSH
11811: CALL_OW 72
11815: ST_TO_ADDR
// if tmp then
11816: LD_VAR 0 19
11820: IFFALSE 11868
// for i in tmp do
11822: LD_ADDR_VAR 0 8
11826: PUSH
11827: LD_VAR 0 19
11831: PUSH
11832: FOR_IN
11833: IFFALSE 11866
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11835: LD_VAR 0 8
11839: PPUSH
11840: CALL_OW 250
11844: PPUSH
11845: LD_VAR 0 8
11849: PPUSH
11850: CALL_OW 251
11854: PPUSH
11855: LD_VAR 0 16
11859: PPUSH
11860: CALL_OW 441
11864: GO 11832
11866: POP
11867: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11868: LD_VAR 0 18
11872: PPUSH
11873: LD_INT 2
11875: PUSH
11876: LD_INT 30
11878: PUSH
11879: LD_INT 32
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 30
11888: PUSH
11889: LD_INT 33
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: LIST
11900: PPUSH
11901: CALL_OW 72
11905: IFFALSE 11993
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11907: LD_ADDR_VAR 0 8
11911: PUSH
11912: LD_VAR 0 18
11916: PPUSH
11917: LD_INT 2
11919: PUSH
11920: LD_INT 30
11922: PUSH
11923: LD_INT 32
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 30
11932: PUSH
11933: LD_INT 33
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: LIST
11944: PPUSH
11945: CALL_OW 72
11949: PUSH
11950: FOR_IN
11951: IFFALSE 11991
// begin if not GetBWeapon ( i ) then
11953: LD_VAR 0 8
11957: PPUSH
11958: CALL_OW 269
11962: NOT
11963: IFFALSE 11989
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11965: LD_VAR 0 8
11969: PPUSH
11970: LD_VAR 0 8
11974: PPUSH
11975: LD_VAR 0 2
11979: PPUSH
11980: CALL 13239 0 2
11984: PPUSH
11985: CALL_OW 431
// end ;
11989: GO 11950
11991: POP
11992: POP
// end ; for i = 1 to personel do
11993: LD_ADDR_VAR 0 8
11997: PUSH
11998: DOUBLE
11999: LD_INT 1
12001: DEC
12002: ST_TO_ADDR
12003: LD_VAR 0 6
12007: PUSH
12008: FOR_TO
12009: IFFALSE 13073
// begin if i > 4 then
12011: LD_VAR 0 8
12015: PUSH
12016: LD_INT 4
12018: GREATER
12019: IFFALSE 12023
// break ;
12021: GO 13073
// case i of 1 :
12023: LD_VAR 0 8
12027: PUSH
12028: LD_INT 1
12030: DOUBLE
12031: EQUAL
12032: IFTRUE 12036
12034: GO 12116
12036: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12037: LD_ADDR_VAR 0 12
12041: PUSH
12042: LD_VAR 0 18
12046: PPUSH
12047: LD_INT 22
12049: PUSH
12050: LD_VAR 0 16
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PUSH
12059: LD_INT 58
12061: PUSH
12062: EMPTY
12063: LIST
12064: PUSH
12065: LD_INT 2
12067: PUSH
12068: LD_INT 30
12070: PUSH
12071: LD_INT 32
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 30
12080: PUSH
12081: LD_INT 4
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 30
12090: PUSH
12091: LD_INT 5
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: LIST
12108: PPUSH
12109: CALL_OW 72
12113: ST_TO_ADDR
12114: GO 12338
12116: LD_INT 2
12118: DOUBLE
12119: EQUAL
12120: IFTRUE 12124
12122: GO 12186
12124: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12125: LD_ADDR_VAR 0 12
12129: PUSH
12130: LD_VAR 0 18
12134: PPUSH
12135: LD_INT 22
12137: PUSH
12138: LD_VAR 0 16
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PUSH
12147: LD_INT 2
12149: PUSH
12150: LD_INT 30
12152: PUSH
12153: LD_INT 0
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 30
12162: PUSH
12163: LD_INT 1
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: LIST
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: PPUSH
12179: CALL_OW 72
12183: ST_TO_ADDR
12184: GO 12338
12186: LD_INT 3
12188: DOUBLE
12189: EQUAL
12190: IFTRUE 12194
12192: GO 12256
12194: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12195: LD_ADDR_VAR 0 12
12199: PUSH
12200: LD_VAR 0 18
12204: PPUSH
12205: LD_INT 22
12207: PUSH
12208: LD_VAR 0 16
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: LD_INT 2
12219: PUSH
12220: LD_INT 30
12222: PUSH
12223: LD_INT 2
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 30
12232: PUSH
12233: LD_INT 3
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: LIST
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 72
12253: ST_TO_ADDR
12254: GO 12338
12256: LD_INT 4
12258: DOUBLE
12259: EQUAL
12260: IFTRUE 12264
12262: GO 12337
12264: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12265: LD_ADDR_VAR 0 12
12269: PUSH
12270: LD_VAR 0 18
12274: PPUSH
12275: LD_INT 22
12277: PUSH
12278: LD_VAR 0 16
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 2
12289: PUSH
12290: LD_INT 30
12292: PUSH
12293: LD_INT 6
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 30
12302: PUSH
12303: LD_INT 7
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 30
12312: PUSH
12313: LD_INT 8
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PPUSH
12330: CALL_OW 72
12334: ST_TO_ADDR
12335: GO 12338
12337: POP
// if i = 1 then
12338: LD_VAR 0 8
12342: PUSH
12343: LD_INT 1
12345: EQUAL
12346: IFFALSE 12457
// begin tmp := [ ] ;
12348: LD_ADDR_VAR 0 19
12352: PUSH
12353: EMPTY
12354: ST_TO_ADDR
// for j in f do
12355: LD_ADDR_VAR 0 9
12359: PUSH
12360: LD_VAR 0 12
12364: PUSH
12365: FOR_IN
12366: IFFALSE 12439
// if GetBType ( j ) = b_bunker then
12368: LD_VAR 0 9
12372: PPUSH
12373: CALL_OW 266
12377: PUSH
12378: LD_INT 32
12380: EQUAL
12381: IFFALSE 12408
// tmp := Insert ( tmp , 1 , j ) else
12383: LD_ADDR_VAR 0 19
12387: PUSH
12388: LD_VAR 0 19
12392: PPUSH
12393: LD_INT 1
12395: PPUSH
12396: LD_VAR 0 9
12400: PPUSH
12401: CALL_OW 2
12405: ST_TO_ADDR
12406: GO 12437
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12408: LD_ADDR_VAR 0 19
12412: PUSH
12413: LD_VAR 0 19
12417: PPUSH
12418: LD_VAR 0 19
12422: PUSH
12423: LD_INT 1
12425: PLUS
12426: PPUSH
12427: LD_VAR 0 9
12431: PPUSH
12432: CALL_OW 2
12436: ST_TO_ADDR
12437: GO 12365
12439: POP
12440: POP
// if tmp then
12441: LD_VAR 0 19
12445: IFFALSE 12457
// f := tmp ;
12447: LD_ADDR_VAR 0 12
12451: PUSH
12452: LD_VAR 0 19
12456: ST_TO_ADDR
// end ; x := personel [ i ] ;
12457: LD_ADDR_VAR 0 13
12461: PUSH
12462: LD_VAR 0 6
12466: PUSH
12467: LD_VAR 0 8
12471: ARRAY
12472: ST_TO_ADDR
// if x = - 1 then
12473: LD_VAR 0 13
12477: PUSH
12478: LD_INT 1
12480: NEG
12481: EQUAL
12482: IFFALSE 12691
// begin for j in f do
12484: LD_ADDR_VAR 0 9
12488: PUSH
12489: LD_VAR 0 12
12493: PUSH
12494: FOR_IN
12495: IFFALSE 12687
// repeat InitHc ;
12497: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12501: LD_VAR 0 9
12505: PPUSH
12506: CALL_OW 266
12510: PUSH
12511: LD_INT 5
12513: EQUAL
12514: IFFALSE 12584
// begin if UnitsInside ( j ) < 3 then
12516: LD_VAR 0 9
12520: PPUSH
12521: CALL_OW 313
12525: PUSH
12526: LD_INT 3
12528: LESS
12529: IFFALSE 12565
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12531: LD_INT 0
12533: PPUSH
12534: LD_INT 5
12536: PUSH
12537: LD_INT 8
12539: PUSH
12540: LD_INT 9
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: LD_VAR 0 17
12552: ARRAY
12553: PPUSH
12554: LD_VAR 0 4
12558: PPUSH
12559: CALL_OW 380
12563: GO 12582
// PrepareHuman ( false , i , skill ) ;
12565: LD_INT 0
12567: PPUSH
12568: LD_VAR 0 8
12572: PPUSH
12573: LD_VAR 0 4
12577: PPUSH
12578: CALL_OW 380
// end else
12582: GO 12601
// PrepareHuman ( false , i , skill ) ;
12584: LD_INT 0
12586: PPUSH
12587: LD_VAR 0 8
12591: PPUSH
12592: LD_VAR 0 4
12596: PPUSH
12597: CALL_OW 380
// un := CreateHuman ;
12601: LD_ADDR_VAR 0 14
12605: PUSH
12606: CALL_OW 44
12610: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12611: LD_ADDR_VAR 0 7
12615: PUSH
12616: LD_VAR 0 7
12620: PPUSH
12621: LD_INT 1
12623: PPUSH
12624: LD_VAR 0 14
12628: PPUSH
12629: CALL_OW 2
12633: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12634: LD_VAR 0 14
12638: PPUSH
12639: LD_VAR 0 9
12643: PPUSH
12644: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12648: LD_VAR 0 9
12652: PPUSH
12653: CALL_OW 313
12657: PUSH
12658: LD_INT 6
12660: EQUAL
12661: PUSH
12662: LD_VAR 0 9
12666: PPUSH
12667: CALL_OW 266
12671: PUSH
12672: LD_INT 32
12674: PUSH
12675: LD_INT 31
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: IN
12682: OR
12683: IFFALSE 12497
12685: GO 12494
12687: POP
12688: POP
// end else
12689: GO 13071
// for j = 1 to x do
12691: LD_ADDR_VAR 0 9
12695: PUSH
12696: DOUBLE
12697: LD_INT 1
12699: DEC
12700: ST_TO_ADDR
12701: LD_VAR 0 13
12705: PUSH
12706: FOR_TO
12707: IFFALSE 13069
// begin InitHc ;
12709: CALL_OW 19
// if not f then
12713: LD_VAR 0 12
12717: NOT
12718: IFFALSE 12807
// begin PrepareHuman ( false , i , skill ) ;
12720: LD_INT 0
12722: PPUSH
12723: LD_VAR 0 8
12727: PPUSH
12728: LD_VAR 0 4
12732: PPUSH
12733: CALL_OW 380
// un := CreateHuman ;
12737: LD_ADDR_VAR 0 14
12741: PUSH
12742: CALL_OW 44
12746: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12747: LD_ADDR_VAR 0 7
12751: PUSH
12752: LD_VAR 0 7
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: LD_VAR 0 14
12764: PPUSH
12765: CALL_OW 2
12769: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12770: LD_VAR 0 14
12774: PPUSH
12775: LD_VAR 0 1
12779: PPUSH
12780: CALL_OW 250
12784: PPUSH
12785: LD_VAR 0 1
12789: PPUSH
12790: CALL_OW 251
12794: PPUSH
12795: LD_INT 10
12797: PPUSH
12798: LD_INT 0
12800: PPUSH
12801: CALL_OW 50
// continue ;
12805: GO 12706
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12807: LD_VAR 0 12
12811: PUSH
12812: LD_INT 1
12814: ARRAY
12815: PPUSH
12816: CALL_OW 313
12820: PUSH
12821: LD_VAR 0 12
12825: PUSH
12826: LD_INT 1
12828: ARRAY
12829: PPUSH
12830: CALL_OW 266
12834: PUSH
12835: LD_INT 32
12837: PUSH
12838: LD_INT 31
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: IN
12845: AND
12846: PUSH
12847: LD_VAR 0 12
12851: PUSH
12852: LD_INT 1
12854: ARRAY
12855: PPUSH
12856: CALL_OW 313
12860: PUSH
12861: LD_INT 6
12863: EQUAL
12864: OR
12865: IFFALSE 12885
// f := Delete ( f , 1 ) ;
12867: LD_ADDR_VAR 0 12
12871: PUSH
12872: LD_VAR 0 12
12876: PPUSH
12877: LD_INT 1
12879: PPUSH
12880: CALL_OW 3
12884: ST_TO_ADDR
// if not f then
12885: LD_VAR 0 12
12889: NOT
12890: IFFALSE 12908
// begin x := x + 2 ;
12892: LD_ADDR_VAR 0 13
12896: PUSH
12897: LD_VAR 0 13
12901: PUSH
12902: LD_INT 2
12904: PLUS
12905: ST_TO_ADDR
// continue ;
12906: GO 12706
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12908: LD_VAR 0 12
12912: PUSH
12913: LD_INT 1
12915: ARRAY
12916: PPUSH
12917: CALL_OW 266
12921: PUSH
12922: LD_INT 5
12924: EQUAL
12925: IFFALSE 12999
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12927: LD_VAR 0 12
12931: PUSH
12932: LD_INT 1
12934: ARRAY
12935: PPUSH
12936: CALL_OW 313
12940: PUSH
12941: LD_INT 3
12943: LESS
12944: IFFALSE 12980
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12946: LD_INT 0
12948: PPUSH
12949: LD_INT 5
12951: PUSH
12952: LD_INT 8
12954: PUSH
12955: LD_INT 9
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: LIST
12962: PUSH
12963: LD_VAR 0 17
12967: ARRAY
12968: PPUSH
12969: LD_VAR 0 4
12973: PPUSH
12974: CALL_OW 380
12978: GO 12997
// PrepareHuman ( false , i , skill ) ;
12980: LD_INT 0
12982: PPUSH
12983: LD_VAR 0 8
12987: PPUSH
12988: LD_VAR 0 4
12992: PPUSH
12993: CALL_OW 380
// end else
12997: GO 13016
// PrepareHuman ( false , i , skill ) ;
12999: LD_INT 0
13001: PPUSH
13002: LD_VAR 0 8
13006: PPUSH
13007: LD_VAR 0 4
13011: PPUSH
13012: CALL_OW 380
// un := CreateHuman ;
13016: LD_ADDR_VAR 0 14
13020: PUSH
13021: CALL_OW 44
13025: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13026: LD_ADDR_VAR 0 7
13030: PUSH
13031: LD_VAR 0 7
13035: PPUSH
13036: LD_INT 1
13038: PPUSH
13039: LD_VAR 0 14
13043: PPUSH
13044: CALL_OW 2
13048: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13049: LD_VAR 0 14
13053: PPUSH
13054: LD_VAR 0 12
13058: PUSH
13059: LD_INT 1
13061: ARRAY
13062: PPUSH
13063: CALL_OW 52
// end ;
13067: GO 12706
13069: POP
13070: POP
// end ;
13071: GO 12008
13073: POP
13074: POP
// result := result ^ buildings ;
13075: LD_ADDR_VAR 0 7
13079: PUSH
13080: LD_VAR 0 7
13084: PUSH
13085: LD_VAR 0 18
13089: ADD
13090: ST_TO_ADDR
// end else
13091: GO 13234
// begin for i = 1 to personel do
13093: LD_ADDR_VAR 0 8
13097: PUSH
13098: DOUBLE
13099: LD_INT 1
13101: DEC
13102: ST_TO_ADDR
13103: LD_VAR 0 6
13107: PUSH
13108: FOR_TO
13109: IFFALSE 13232
// begin if i > 4 then
13111: LD_VAR 0 8
13115: PUSH
13116: LD_INT 4
13118: GREATER
13119: IFFALSE 13123
// break ;
13121: GO 13232
// x := personel [ i ] ;
13123: LD_ADDR_VAR 0 13
13127: PUSH
13128: LD_VAR 0 6
13132: PUSH
13133: LD_VAR 0 8
13137: ARRAY
13138: ST_TO_ADDR
// if x = - 1 then
13139: LD_VAR 0 13
13143: PUSH
13144: LD_INT 1
13146: NEG
13147: EQUAL
13148: IFFALSE 13152
// continue ;
13150: GO 13108
// PrepareHuman ( false , i , skill ) ;
13152: LD_INT 0
13154: PPUSH
13155: LD_VAR 0 8
13159: PPUSH
13160: LD_VAR 0 4
13164: PPUSH
13165: CALL_OW 380
// un := CreateHuman ;
13169: LD_ADDR_VAR 0 14
13173: PUSH
13174: CALL_OW 44
13178: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13179: LD_VAR 0 14
13183: PPUSH
13184: LD_VAR 0 1
13188: PPUSH
13189: CALL_OW 250
13193: PPUSH
13194: LD_VAR 0 1
13198: PPUSH
13199: CALL_OW 251
13203: PPUSH
13204: LD_INT 10
13206: PPUSH
13207: LD_INT 0
13209: PPUSH
13210: CALL_OW 50
// result := result ^ un ;
13214: LD_ADDR_VAR 0 7
13218: PUSH
13219: LD_VAR 0 7
13223: PUSH
13224: LD_VAR 0 14
13228: ADD
13229: ST_TO_ADDR
// end ;
13230: GO 13108
13232: POP
13233: POP
// end ; end ;
13234: LD_VAR 0 7
13238: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13239: LD_INT 0
13241: PPUSH
13242: PPUSH
13243: PPUSH
13244: PPUSH
13245: PPUSH
13246: PPUSH
13247: PPUSH
13248: PPUSH
13249: PPUSH
13250: PPUSH
13251: PPUSH
13252: PPUSH
13253: PPUSH
13254: PPUSH
13255: PPUSH
13256: PPUSH
// result := false ;
13257: LD_ADDR_VAR 0 3
13261: PUSH
13262: LD_INT 0
13264: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13265: LD_VAR 0 1
13269: NOT
13270: PUSH
13271: LD_VAR 0 1
13275: PPUSH
13276: CALL_OW 266
13280: PUSH
13281: LD_INT 32
13283: PUSH
13284: LD_INT 33
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: IN
13291: NOT
13292: OR
13293: IFFALSE 13297
// exit ;
13295: GO 14406
// nat := GetNation ( tower ) ;
13297: LD_ADDR_VAR 0 12
13301: PUSH
13302: LD_VAR 0 1
13306: PPUSH
13307: CALL_OW 248
13311: ST_TO_ADDR
// side := GetSide ( tower ) ;
13312: LD_ADDR_VAR 0 16
13316: PUSH
13317: LD_VAR 0 1
13321: PPUSH
13322: CALL_OW 255
13326: ST_TO_ADDR
// x := GetX ( tower ) ;
13327: LD_ADDR_VAR 0 10
13331: PUSH
13332: LD_VAR 0 1
13336: PPUSH
13337: CALL_OW 250
13341: ST_TO_ADDR
// y := GetY ( tower ) ;
13342: LD_ADDR_VAR 0 11
13346: PUSH
13347: LD_VAR 0 1
13351: PPUSH
13352: CALL_OW 251
13356: ST_TO_ADDR
// if not x or not y then
13357: LD_VAR 0 10
13361: NOT
13362: PUSH
13363: LD_VAR 0 11
13367: NOT
13368: OR
13369: IFFALSE 13373
// exit ;
13371: GO 14406
// weapon := 0 ;
13373: LD_ADDR_VAR 0 18
13377: PUSH
13378: LD_INT 0
13380: ST_TO_ADDR
// fac_list := [ ] ;
13381: LD_ADDR_VAR 0 17
13385: PUSH
13386: EMPTY
13387: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13388: LD_ADDR_VAR 0 6
13392: PUSH
13393: LD_VAR 0 1
13397: PPUSH
13398: CALL_OW 274
13402: PPUSH
13403: LD_VAR 0 2
13407: PPUSH
13408: LD_INT 0
13410: PPUSH
13411: CALL 10977 0 3
13415: PPUSH
13416: LD_INT 30
13418: PUSH
13419: LD_INT 3
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PPUSH
13426: CALL_OW 72
13430: ST_TO_ADDR
// if not factories then
13431: LD_VAR 0 6
13435: NOT
13436: IFFALSE 13440
// exit ;
13438: GO 14406
// for i in factories do
13440: LD_ADDR_VAR 0 8
13444: PUSH
13445: LD_VAR 0 6
13449: PUSH
13450: FOR_IN
13451: IFFALSE 13476
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13453: LD_ADDR_VAR 0 17
13457: PUSH
13458: LD_VAR 0 17
13462: PUSH
13463: LD_VAR 0 8
13467: PPUSH
13468: CALL_OW 478
13472: UNION
13473: ST_TO_ADDR
13474: GO 13450
13476: POP
13477: POP
// if not fac_list then
13478: LD_VAR 0 17
13482: NOT
13483: IFFALSE 13487
// exit ;
13485: GO 14406
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13487: LD_ADDR_VAR 0 5
13491: PUSH
13492: LD_INT 4
13494: PUSH
13495: LD_INT 5
13497: PUSH
13498: LD_INT 9
13500: PUSH
13501: LD_INT 10
13503: PUSH
13504: LD_INT 6
13506: PUSH
13507: LD_INT 7
13509: PUSH
13510: LD_INT 11
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: PUSH
13522: LD_INT 27
13524: PUSH
13525: LD_INT 28
13527: PUSH
13528: LD_INT 26
13530: PUSH
13531: LD_INT 30
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 43
13542: PUSH
13543: LD_INT 44
13545: PUSH
13546: LD_INT 46
13548: PUSH
13549: LD_INT 45
13551: PUSH
13552: LD_INT 47
13554: PUSH
13555: LD_INT 49
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: PUSH
13571: LD_VAR 0 12
13575: ARRAY
13576: ST_TO_ADDR
// list := list isect fac_list ;
13577: LD_ADDR_VAR 0 5
13581: PUSH
13582: LD_VAR 0 5
13586: PUSH
13587: LD_VAR 0 17
13591: ISECT
13592: ST_TO_ADDR
// if not list then
13593: LD_VAR 0 5
13597: NOT
13598: IFFALSE 13602
// exit ;
13600: GO 14406
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13602: LD_VAR 0 12
13606: PUSH
13607: LD_INT 3
13609: EQUAL
13610: PUSH
13611: LD_INT 49
13613: PUSH
13614: LD_VAR 0 5
13618: IN
13619: AND
13620: PUSH
13621: LD_INT 31
13623: PPUSH
13624: LD_VAR 0 16
13628: PPUSH
13629: CALL_OW 321
13633: PUSH
13634: LD_INT 2
13636: EQUAL
13637: AND
13638: IFFALSE 13698
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13640: LD_INT 22
13642: PUSH
13643: LD_VAR 0 16
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 35
13654: PUSH
13655: LD_INT 49
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 91
13664: PUSH
13665: LD_VAR 0 1
13669: PUSH
13670: LD_INT 10
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: LIST
13682: PPUSH
13683: CALL_OW 69
13687: NOT
13688: IFFALSE 13698
// weapon := ru_time_lapser ;
13690: LD_ADDR_VAR 0 18
13694: PUSH
13695: LD_INT 49
13697: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13698: LD_VAR 0 12
13702: PUSH
13703: LD_INT 1
13705: PUSH
13706: LD_INT 2
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: IN
13713: PUSH
13714: LD_INT 11
13716: PUSH
13717: LD_VAR 0 5
13721: IN
13722: PUSH
13723: LD_INT 30
13725: PUSH
13726: LD_VAR 0 5
13730: IN
13731: OR
13732: AND
13733: PUSH
13734: LD_INT 6
13736: PPUSH
13737: LD_VAR 0 16
13741: PPUSH
13742: CALL_OW 321
13746: PUSH
13747: LD_INT 2
13749: EQUAL
13750: AND
13751: IFFALSE 13916
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13753: LD_INT 22
13755: PUSH
13756: LD_VAR 0 16
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 2
13767: PUSH
13768: LD_INT 35
13770: PUSH
13771: LD_INT 11
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: LD_INT 35
13780: PUSH
13781: LD_INT 30
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 91
13795: PUSH
13796: LD_VAR 0 1
13800: PUSH
13801: LD_INT 18
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: LIST
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: LIST
13813: PPUSH
13814: CALL_OW 69
13818: NOT
13819: PUSH
13820: LD_INT 22
13822: PUSH
13823: LD_VAR 0 16
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 2
13834: PUSH
13835: LD_INT 30
13837: PUSH
13838: LD_INT 32
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 30
13847: PUSH
13848: LD_INT 33
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 91
13862: PUSH
13863: LD_VAR 0 1
13867: PUSH
13868: LD_INT 12
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: LIST
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: LIST
13880: PUSH
13881: EMPTY
13882: LIST
13883: PPUSH
13884: CALL_OW 69
13888: PUSH
13889: LD_INT 2
13891: GREATER
13892: AND
13893: IFFALSE 13916
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13895: LD_ADDR_VAR 0 18
13899: PUSH
13900: LD_INT 11
13902: PUSH
13903: LD_INT 30
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_VAR 0 12
13914: ARRAY
13915: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13916: LD_VAR 0 18
13920: NOT
13921: PUSH
13922: LD_INT 40
13924: PPUSH
13925: LD_VAR 0 16
13929: PPUSH
13930: CALL_OW 321
13934: PUSH
13935: LD_INT 2
13937: EQUAL
13938: AND
13939: PUSH
13940: LD_INT 7
13942: PUSH
13943: LD_VAR 0 5
13947: IN
13948: PUSH
13949: LD_INT 28
13951: PUSH
13952: LD_VAR 0 5
13956: IN
13957: OR
13958: PUSH
13959: LD_INT 45
13961: PUSH
13962: LD_VAR 0 5
13966: IN
13967: OR
13968: AND
13969: IFFALSE 14223
// begin hex := GetHexInfo ( x , y ) ;
13971: LD_ADDR_VAR 0 4
13975: PUSH
13976: LD_VAR 0 10
13980: PPUSH
13981: LD_VAR 0 11
13985: PPUSH
13986: CALL_OW 546
13990: ST_TO_ADDR
// if hex [ 1 ] then
13991: LD_VAR 0 4
13995: PUSH
13996: LD_INT 1
13998: ARRAY
13999: IFFALSE 14003
// exit ;
14001: GO 14406
// height := hex [ 2 ] ;
14003: LD_ADDR_VAR 0 15
14007: PUSH
14008: LD_VAR 0 4
14012: PUSH
14013: LD_INT 2
14015: ARRAY
14016: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14017: LD_ADDR_VAR 0 14
14021: PUSH
14022: LD_INT 0
14024: PUSH
14025: LD_INT 2
14027: PUSH
14028: LD_INT 3
14030: PUSH
14031: LD_INT 5
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: ST_TO_ADDR
// for i in tmp do
14040: LD_ADDR_VAR 0 8
14044: PUSH
14045: LD_VAR 0 14
14049: PUSH
14050: FOR_IN
14051: IFFALSE 14221
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14053: LD_ADDR_VAR 0 9
14057: PUSH
14058: LD_VAR 0 10
14062: PPUSH
14063: LD_VAR 0 8
14067: PPUSH
14068: LD_INT 5
14070: PPUSH
14071: CALL_OW 272
14075: PUSH
14076: LD_VAR 0 11
14080: PPUSH
14081: LD_VAR 0 8
14085: PPUSH
14086: LD_INT 5
14088: PPUSH
14089: CALL_OW 273
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14098: LD_VAR 0 9
14102: PUSH
14103: LD_INT 1
14105: ARRAY
14106: PPUSH
14107: LD_VAR 0 9
14111: PUSH
14112: LD_INT 2
14114: ARRAY
14115: PPUSH
14116: CALL_OW 488
14120: IFFALSE 14219
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14122: LD_ADDR_VAR 0 4
14126: PUSH
14127: LD_VAR 0 9
14131: PUSH
14132: LD_INT 1
14134: ARRAY
14135: PPUSH
14136: LD_VAR 0 9
14140: PUSH
14141: LD_INT 2
14143: ARRAY
14144: PPUSH
14145: CALL_OW 546
14149: ST_TO_ADDR
// if hex [ 1 ] then
14150: LD_VAR 0 4
14154: PUSH
14155: LD_INT 1
14157: ARRAY
14158: IFFALSE 14162
// continue ;
14160: GO 14050
// h := hex [ 2 ] ;
14162: LD_ADDR_VAR 0 13
14166: PUSH
14167: LD_VAR 0 4
14171: PUSH
14172: LD_INT 2
14174: ARRAY
14175: ST_TO_ADDR
// if h + 7 < height then
14176: LD_VAR 0 13
14180: PUSH
14181: LD_INT 7
14183: PLUS
14184: PUSH
14185: LD_VAR 0 15
14189: LESS
14190: IFFALSE 14219
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14192: LD_ADDR_VAR 0 18
14196: PUSH
14197: LD_INT 7
14199: PUSH
14200: LD_INT 28
14202: PUSH
14203: LD_INT 45
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: LIST
14210: PUSH
14211: LD_VAR 0 12
14215: ARRAY
14216: ST_TO_ADDR
// break ;
14217: GO 14221
// end ; end ; end ;
14219: GO 14050
14221: POP
14222: POP
// end ; if not weapon then
14223: LD_VAR 0 18
14227: NOT
14228: IFFALSE 14288
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14230: LD_ADDR_VAR 0 5
14234: PUSH
14235: LD_VAR 0 5
14239: PUSH
14240: LD_INT 11
14242: PUSH
14243: LD_INT 30
14245: PUSH
14246: LD_INT 49
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: DIFF
14254: ST_TO_ADDR
// if not list then
14255: LD_VAR 0 5
14259: NOT
14260: IFFALSE 14264
// exit ;
14262: GO 14406
// weapon := list [ rand ( 1 , list ) ] ;
14264: LD_ADDR_VAR 0 18
14268: PUSH
14269: LD_VAR 0 5
14273: PUSH
14274: LD_INT 1
14276: PPUSH
14277: LD_VAR 0 5
14281: PPUSH
14282: CALL_OW 12
14286: ARRAY
14287: ST_TO_ADDR
// end ; if weapon then
14288: LD_VAR 0 18
14292: IFFALSE 14406
// begin tmp := CostOfWeapon ( weapon ) ;
14294: LD_ADDR_VAR 0 14
14298: PUSH
14299: LD_VAR 0 18
14303: PPUSH
14304: CALL_OW 451
14308: ST_TO_ADDR
// j := GetBase ( tower ) ;
14309: LD_ADDR_VAR 0 9
14313: PUSH
14314: LD_VAR 0 1
14318: PPUSH
14319: CALL_OW 274
14323: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14324: LD_VAR 0 9
14328: PPUSH
14329: LD_INT 1
14331: PPUSH
14332: CALL_OW 275
14336: PUSH
14337: LD_VAR 0 14
14341: PUSH
14342: LD_INT 1
14344: ARRAY
14345: GREATEREQUAL
14346: PUSH
14347: LD_VAR 0 9
14351: PPUSH
14352: LD_INT 2
14354: PPUSH
14355: CALL_OW 275
14359: PUSH
14360: LD_VAR 0 14
14364: PUSH
14365: LD_INT 2
14367: ARRAY
14368: GREATEREQUAL
14369: AND
14370: PUSH
14371: LD_VAR 0 9
14375: PPUSH
14376: LD_INT 3
14378: PPUSH
14379: CALL_OW 275
14383: PUSH
14384: LD_VAR 0 14
14388: PUSH
14389: LD_INT 3
14391: ARRAY
14392: GREATEREQUAL
14393: AND
14394: IFFALSE 14406
// result := weapon ;
14396: LD_ADDR_VAR 0 3
14400: PUSH
14401: LD_VAR 0 18
14405: ST_TO_ADDR
// end ; end ;
14406: LD_VAR 0 3
14410: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14411: LD_INT 0
14413: PPUSH
14414: PPUSH
// result := true ;
14415: LD_ADDR_VAR 0 3
14419: PUSH
14420: LD_INT 1
14422: ST_TO_ADDR
// if array1 = array2 then
14423: LD_VAR 0 1
14427: PUSH
14428: LD_VAR 0 2
14432: EQUAL
14433: IFFALSE 14493
// begin for i = 1 to array1 do
14435: LD_ADDR_VAR 0 4
14439: PUSH
14440: DOUBLE
14441: LD_INT 1
14443: DEC
14444: ST_TO_ADDR
14445: LD_VAR 0 1
14449: PUSH
14450: FOR_TO
14451: IFFALSE 14489
// if array1 [ i ] <> array2 [ i ] then
14453: LD_VAR 0 1
14457: PUSH
14458: LD_VAR 0 4
14462: ARRAY
14463: PUSH
14464: LD_VAR 0 2
14468: PUSH
14469: LD_VAR 0 4
14473: ARRAY
14474: NONEQUAL
14475: IFFALSE 14487
// begin result := false ;
14477: LD_ADDR_VAR 0 3
14481: PUSH
14482: LD_INT 0
14484: ST_TO_ADDR
// break ;
14485: GO 14489
// end ;
14487: GO 14450
14489: POP
14490: POP
// end else
14491: GO 14501
// result := false ;
14493: LD_ADDR_VAR 0 3
14497: PUSH
14498: LD_INT 0
14500: ST_TO_ADDR
// end ;
14501: LD_VAR 0 3
14505: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14506: LD_INT 0
14508: PPUSH
14509: PPUSH
// if not array1 or not array2 then
14510: LD_VAR 0 1
14514: NOT
14515: PUSH
14516: LD_VAR 0 2
14520: NOT
14521: OR
14522: IFFALSE 14526
// exit ;
14524: GO 14590
// result := true ;
14526: LD_ADDR_VAR 0 3
14530: PUSH
14531: LD_INT 1
14533: ST_TO_ADDR
// for i = 1 to array1 do
14534: LD_ADDR_VAR 0 4
14538: PUSH
14539: DOUBLE
14540: LD_INT 1
14542: DEC
14543: ST_TO_ADDR
14544: LD_VAR 0 1
14548: PUSH
14549: FOR_TO
14550: IFFALSE 14588
// if array1 [ i ] <> array2 [ i ] then
14552: LD_VAR 0 1
14556: PUSH
14557: LD_VAR 0 4
14561: ARRAY
14562: PUSH
14563: LD_VAR 0 2
14567: PUSH
14568: LD_VAR 0 4
14572: ARRAY
14573: NONEQUAL
14574: IFFALSE 14586
// begin result := false ;
14576: LD_ADDR_VAR 0 3
14580: PUSH
14581: LD_INT 0
14583: ST_TO_ADDR
// break ;
14584: GO 14588
// end ;
14586: GO 14549
14588: POP
14589: POP
// end ;
14590: LD_VAR 0 3
14594: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14595: LD_INT 0
14597: PPUSH
14598: PPUSH
14599: PPUSH
// pom := GetBase ( fac ) ;
14600: LD_ADDR_VAR 0 5
14604: PUSH
14605: LD_VAR 0 1
14609: PPUSH
14610: CALL_OW 274
14614: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14615: LD_ADDR_VAR 0 4
14619: PUSH
14620: LD_VAR 0 2
14624: PUSH
14625: LD_INT 1
14627: ARRAY
14628: PPUSH
14629: LD_VAR 0 2
14633: PUSH
14634: LD_INT 2
14636: ARRAY
14637: PPUSH
14638: LD_VAR 0 2
14642: PUSH
14643: LD_INT 3
14645: ARRAY
14646: PPUSH
14647: LD_VAR 0 2
14651: PUSH
14652: LD_INT 4
14654: ARRAY
14655: PPUSH
14656: CALL_OW 449
14660: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14661: LD_ADDR_VAR 0 3
14665: PUSH
14666: LD_VAR 0 5
14670: PPUSH
14671: LD_INT 1
14673: PPUSH
14674: CALL_OW 275
14678: PUSH
14679: LD_VAR 0 4
14683: PUSH
14684: LD_INT 1
14686: ARRAY
14687: GREATEREQUAL
14688: PUSH
14689: LD_VAR 0 5
14693: PPUSH
14694: LD_INT 2
14696: PPUSH
14697: CALL_OW 275
14701: PUSH
14702: LD_VAR 0 4
14706: PUSH
14707: LD_INT 2
14709: ARRAY
14710: GREATEREQUAL
14711: AND
14712: PUSH
14713: LD_VAR 0 5
14717: PPUSH
14718: LD_INT 3
14720: PPUSH
14721: CALL_OW 275
14725: PUSH
14726: LD_VAR 0 4
14730: PUSH
14731: LD_INT 3
14733: ARRAY
14734: GREATEREQUAL
14735: AND
14736: ST_TO_ADDR
// end ;
14737: LD_VAR 0 3
14741: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14742: LD_INT 0
14744: PPUSH
14745: PPUSH
14746: PPUSH
14747: PPUSH
// pom := GetBase ( building ) ;
14748: LD_ADDR_VAR 0 3
14752: PUSH
14753: LD_VAR 0 1
14757: PPUSH
14758: CALL_OW 274
14762: ST_TO_ADDR
// if not pom then
14763: LD_VAR 0 3
14767: NOT
14768: IFFALSE 14772
// exit ;
14770: GO 14942
// btype := GetBType ( building ) ;
14772: LD_ADDR_VAR 0 5
14776: PUSH
14777: LD_VAR 0 1
14781: PPUSH
14782: CALL_OW 266
14786: ST_TO_ADDR
// if btype = b_armoury then
14787: LD_VAR 0 5
14791: PUSH
14792: LD_INT 4
14794: EQUAL
14795: IFFALSE 14805
// btype := b_barracks ;
14797: LD_ADDR_VAR 0 5
14801: PUSH
14802: LD_INT 5
14804: ST_TO_ADDR
// if btype = b_depot then
14805: LD_VAR 0 5
14809: PUSH
14810: LD_INT 0
14812: EQUAL
14813: IFFALSE 14823
// btype := b_warehouse ;
14815: LD_ADDR_VAR 0 5
14819: PUSH
14820: LD_INT 1
14822: ST_TO_ADDR
// if btype = b_workshop then
14823: LD_VAR 0 5
14827: PUSH
14828: LD_INT 2
14830: EQUAL
14831: IFFALSE 14841
// btype := b_factory ;
14833: LD_ADDR_VAR 0 5
14837: PUSH
14838: LD_INT 3
14840: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14841: LD_ADDR_VAR 0 4
14845: PUSH
14846: LD_VAR 0 5
14850: PPUSH
14851: LD_VAR 0 1
14855: PPUSH
14856: CALL_OW 248
14860: PPUSH
14861: CALL_OW 450
14865: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14866: LD_ADDR_VAR 0 2
14870: PUSH
14871: LD_VAR 0 3
14875: PPUSH
14876: LD_INT 1
14878: PPUSH
14879: CALL_OW 275
14883: PUSH
14884: LD_VAR 0 4
14888: PUSH
14889: LD_INT 1
14891: ARRAY
14892: GREATEREQUAL
14893: PUSH
14894: LD_VAR 0 3
14898: PPUSH
14899: LD_INT 2
14901: PPUSH
14902: CALL_OW 275
14906: PUSH
14907: LD_VAR 0 4
14911: PUSH
14912: LD_INT 2
14914: ARRAY
14915: GREATEREQUAL
14916: AND
14917: PUSH
14918: LD_VAR 0 3
14922: PPUSH
14923: LD_INT 3
14925: PPUSH
14926: CALL_OW 275
14930: PUSH
14931: LD_VAR 0 4
14935: PUSH
14936: LD_INT 3
14938: ARRAY
14939: GREATEREQUAL
14940: AND
14941: ST_TO_ADDR
// end ;
14942: LD_VAR 0 2
14946: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14947: LD_INT 0
14949: PPUSH
14950: PPUSH
14951: PPUSH
// pom := GetBase ( building ) ;
14952: LD_ADDR_VAR 0 4
14956: PUSH
14957: LD_VAR 0 1
14961: PPUSH
14962: CALL_OW 274
14966: ST_TO_ADDR
// if not pom then
14967: LD_VAR 0 4
14971: NOT
14972: IFFALSE 14976
// exit ;
14974: GO 15077
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14976: LD_ADDR_VAR 0 5
14980: PUSH
14981: LD_VAR 0 2
14985: PPUSH
14986: LD_VAR 0 1
14990: PPUSH
14991: CALL_OW 248
14995: PPUSH
14996: CALL_OW 450
15000: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15001: LD_ADDR_VAR 0 3
15005: PUSH
15006: LD_VAR 0 4
15010: PPUSH
15011: LD_INT 1
15013: PPUSH
15014: CALL_OW 275
15018: PUSH
15019: LD_VAR 0 5
15023: PUSH
15024: LD_INT 1
15026: ARRAY
15027: GREATEREQUAL
15028: PUSH
15029: LD_VAR 0 4
15033: PPUSH
15034: LD_INT 2
15036: PPUSH
15037: CALL_OW 275
15041: PUSH
15042: LD_VAR 0 5
15046: PUSH
15047: LD_INT 2
15049: ARRAY
15050: GREATEREQUAL
15051: AND
15052: PUSH
15053: LD_VAR 0 4
15057: PPUSH
15058: LD_INT 3
15060: PPUSH
15061: CALL_OW 275
15065: PUSH
15066: LD_VAR 0 5
15070: PUSH
15071: LD_INT 3
15073: ARRAY
15074: GREATEREQUAL
15075: AND
15076: ST_TO_ADDR
// end ;
15077: LD_VAR 0 3
15081: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15082: LD_INT 0
15084: PPUSH
15085: PPUSH
15086: PPUSH
15087: PPUSH
15088: PPUSH
15089: PPUSH
15090: PPUSH
15091: PPUSH
15092: PPUSH
15093: PPUSH
15094: PPUSH
// result := false ;
15095: LD_ADDR_VAR 0 8
15099: PUSH
15100: LD_INT 0
15102: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15103: LD_VAR 0 5
15107: NOT
15108: PUSH
15109: LD_VAR 0 1
15113: NOT
15114: OR
15115: PUSH
15116: LD_VAR 0 2
15120: NOT
15121: OR
15122: PUSH
15123: LD_VAR 0 3
15127: NOT
15128: OR
15129: IFFALSE 15133
// exit ;
15131: GO 15947
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15133: LD_ADDR_VAR 0 14
15137: PUSH
15138: LD_VAR 0 1
15142: PPUSH
15143: LD_VAR 0 2
15147: PPUSH
15148: LD_VAR 0 3
15152: PPUSH
15153: LD_VAR 0 4
15157: PPUSH
15158: LD_VAR 0 5
15162: PUSH
15163: LD_INT 1
15165: ARRAY
15166: PPUSH
15167: CALL_OW 248
15171: PPUSH
15172: LD_INT 0
15174: PPUSH
15175: CALL 17200 0 6
15179: ST_TO_ADDR
// if not hexes then
15180: LD_VAR 0 14
15184: NOT
15185: IFFALSE 15189
// exit ;
15187: GO 15947
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15189: LD_ADDR_VAR 0 17
15193: PUSH
15194: LD_VAR 0 5
15198: PPUSH
15199: LD_INT 22
15201: PUSH
15202: LD_VAR 0 13
15206: PPUSH
15207: CALL_OW 255
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: LD_INT 2
15218: PUSH
15219: LD_INT 30
15221: PUSH
15222: LD_INT 0
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 30
15231: PUSH
15232: LD_INT 1
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: LIST
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PPUSH
15248: CALL_OW 72
15252: ST_TO_ADDR
// for i = 1 to hexes do
15253: LD_ADDR_VAR 0 9
15257: PUSH
15258: DOUBLE
15259: LD_INT 1
15261: DEC
15262: ST_TO_ADDR
15263: LD_VAR 0 14
15267: PUSH
15268: FOR_TO
15269: IFFALSE 15945
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15271: LD_ADDR_VAR 0 13
15275: PUSH
15276: LD_VAR 0 14
15280: PUSH
15281: LD_VAR 0 9
15285: ARRAY
15286: PUSH
15287: LD_INT 1
15289: ARRAY
15290: PPUSH
15291: LD_VAR 0 14
15295: PUSH
15296: LD_VAR 0 9
15300: ARRAY
15301: PUSH
15302: LD_INT 2
15304: ARRAY
15305: PPUSH
15306: CALL_OW 428
15310: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15311: LD_VAR 0 14
15315: PUSH
15316: LD_VAR 0 9
15320: ARRAY
15321: PUSH
15322: LD_INT 1
15324: ARRAY
15325: PPUSH
15326: LD_VAR 0 14
15330: PUSH
15331: LD_VAR 0 9
15335: ARRAY
15336: PUSH
15337: LD_INT 2
15339: ARRAY
15340: PPUSH
15341: CALL_OW 351
15345: PUSH
15346: LD_VAR 0 14
15350: PUSH
15351: LD_VAR 0 9
15355: ARRAY
15356: PUSH
15357: LD_INT 1
15359: ARRAY
15360: PPUSH
15361: LD_VAR 0 14
15365: PUSH
15366: LD_VAR 0 9
15370: ARRAY
15371: PUSH
15372: LD_INT 2
15374: ARRAY
15375: PPUSH
15376: CALL_OW 488
15380: NOT
15381: OR
15382: PUSH
15383: LD_VAR 0 13
15387: PPUSH
15388: CALL_OW 247
15392: PUSH
15393: LD_INT 3
15395: EQUAL
15396: OR
15397: IFFALSE 15403
// exit ;
15399: POP
15400: POP
15401: GO 15947
// if not tmp then
15403: LD_VAR 0 13
15407: NOT
15408: IFFALSE 15412
// continue ;
15410: GO 15268
// result := true ;
15412: LD_ADDR_VAR 0 8
15416: PUSH
15417: LD_INT 1
15419: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15420: LD_VAR 0 6
15424: PUSH
15425: LD_VAR 0 13
15429: PPUSH
15430: CALL_OW 247
15434: PUSH
15435: LD_INT 2
15437: EQUAL
15438: AND
15439: PUSH
15440: LD_VAR 0 13
15444: PPUSH
15445: CALL_OW 263
15449: PUSH
15450: LD_INT 1
15452: EQUAL
15453: AND
15454: IFFALSE 15618
// begin if IsDrivenBy ( tmp ) then
15456: LD_VAR 0 13
15460: PPUSH
15461: CALL_OW 311
15465: IFFALSE 15469
// continue ;
15467: GO 15268
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15469: LD_VAR 0 6
15473: PPUSH
15474: LD_INT 3
15476: PUSH
15477: LD_INT 60
15479: PUSH
15480: EMPTY
15481: LIST
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 3
15489: PUSH
15490: LD_INT 55
15492: PUSH
15493: EMPTY
15494: LIST
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PPUSH
15504: CALL_OW 72
15508: IFFALSE 15616
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15510: LD_ADDR_VAR 0 18
15514: PUSH
15515: LD_VAR 0 6
15519: PPUSH
15520: LD_INT 3
15522: PUSH
15523: LD_INT 60
15525: PUSH
15526: EMPTY
15527: LIST
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PUSH
15533: LD_INT 3
15535: PUSH
15536: LD_INT 55
15538: PUSH
15539: EMPTY
15540: LIST
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PPUSH
15550: CALL_OW 72
15554: PUSH
15555: LD_INT 1
15557: ARRAY
15558: ST_TO_ADDR
// if IsInUnit ( driver ) then
15559: LD_VAR 0 18
15563: PPUSH
15564: CALL_OW 310
15568: IFFALSE 15579
// ComExit ( driver ) ;
15570: LD_VAR 0 18
15574: PPUSH
15575: CALL 41001 0 1
// AddComEnterUnit ( driver , tmp ) ;
15579: LD_VAR 0 18
15583: PPUSH
15584: LD_VAR 0 13
15588: PPUSH
15589: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15593: LD_VAR 0 18
15597: PPUSH
15598: LD_VAR 0 7
15602: PPUSH
15603: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15607: LD_VAR 0 18
15611: PPUSH
15612: CALL_OW 181
// end ; continue ;
15616: GO 15268
// end ; if not cleaners or not tmp in cleaners then
15618: LD_VAR 0 6
15622: NOT
15623: PUSH
15624: LD_VAR 0 13
15628: PUSH
15629: LD_VAR 0 6
15633: IN
15634: NOT
15635: OR
15636: IFFALSE 15943
// begin if dep then
15638: LD_VAR 0 17
15642: IFFALSE 15778
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15644: LD_ADDR_VAR 0 16
15648: PUSH
15649: LD_VAR 0 17
15653: PUSH
15654: LD_INT 1
15656: ARRAY
15657: PPUSH
15658: CALL_OW 250
15662: PPUSH
15663: LD_VAR 0 17
15667: PUSH
15668: LD_INT 1
15670: ARRAY
15671: PPUSH
15672: CALL_OW 254
15676: PPUSH
15677: LD_INT 5
15679: PPUSH
15680: CALL_OW 272
15684: PUSH
15685: LD_VAR 0 17
15689: PUSH
15690: LD_INT 1
15692: ARRAY
15693: PPUSH
15694: CALL_OW 251
15698: PPUSH
15699: LD_VAR 0 17
15703: PUSH
15704: LD_INT 1
15706: ARRAY
15707: PPUSH
15708: CALL_OW 254
15712: PPUSH
15713: LD_INT 5
15715: PPUSH
15716: CALL_OW 273
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15725: LD_VAR 0 16
15729: PUSH
15730: LD_INT 1
15732: ARRAY
15733: PPUSH
15734: LD_VAR 0 16
15738: PUSH
15739: LD_INT 2
15741: ARRAY
15742: PPUSH
15743: CALL_OW 488
15747: IFFALSE 15778
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15749: LD_VAR 0 13
15753: PPUSH
15754: LD_VAR 0 16
15758: PUSH
15759: LD_INT 1
15761: ARRAY
15762: PPUSH
15763: LD_VAR 0 16
15767: PUSH
15768: LD_INT 2
15770: ARRAY
15771: PPUSH
15772: CALL_OW 111
// continue ;
15776: GO 15268
// end ; end ; r := GetDir ( tmp ) ;
15778: LD_ADDR_VAR 0 15
15782: PUSH
15783: LD_VAR 0 13
15787: PPUSH
15788: CALL_OW 254
15792: ST_TO_ADDR
// if r = 5 then
15793: LD_VAR 0 15
15797: PUSH
15798: LD_INT 5
15800: EQUAL
15801: IFFALSE 15811
// r := 0 ;
15803: LD_ADDR_VAR 0 15
15807: PUSH
15808: LD_INT 0
15810: ST_TO_ADDR
// for j = r to 5 do
15811: LD_ADDR_VAR 0 10
15815: PUSH
15816: DOUBLE
15817: LD_VAR 0 15
15821: DEC
15822: ST_TO_ADDR
15823: LD_INT 5
15825: PUSH
15826: FOR_TO
15827: IFFALSE 15941
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15829: LD_ADDR_VAR 0 11
15833: PUSH
15834: LD_VAR 0 13
15838: PPUSH
15839: CALL_OW 250
15843: PPUSH
15844: LD_VAR 0 10
15848: PPUSH
15849: LD_INT 2
15851: PPUSH
15852: CALL_OW 272
15856: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15857: LD_ADDR_VAR 0 12
15861: PUSH
15862: LD_VAR 0 13
15866: PPUSH
15867: CALL_OW 251
15871: PPUSH
15872: LD_VAR 0 10
15876: PPUSH
15877: LD_INT 2
15879: PPUSH
15880: CALL_OW 273
15884: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15885: LD_VAR 0 11
15889: PPUSH
15890: LD_VAR 0 12
15894: PPUSH
15895: CALL_OW 488
15899: PUSH
15900: LD_VAR 0 11
15904: PPUSH
15905: LD_VAR 0 12
15909: PPUSH
15910: CALL_OW 428
15914: NOT
15915: AND
15916: IFFALSE 15939
// begin ComMoveXY ( tmp , _x , _y ) ;
15918: LD_VAR 0 13
15922: PPUSH
15923: LD_VAR 0 11
15927: PPUSH
15928: LD_VAR 0 12
15932: PPUSH
15933: CALL_OW 111
// break ;
15937: GO 15941
// end ; end ;
15939: GO 15826
15941: POP
15942: POP
// end ; end ;
15943: GO 15268
15945: POP
15946: POP
// end ;
15947: LD_VAR 0 8
15951: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15952: LD_INT 0
15954: PPUSH
// result := true ;
15955: LD_ADDR_VAR 0 3
15959: PUSH
15960: LD_INT 1
15962: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15963: LD_VAR 0 2
15967: PUSH
15968: LD_INT 24
15970: DOUBLE
15971: EQUAL
15972: IFTRUE 15982
15974: LD_INT 33
15976: DOUBLE
15977: EQUAL
15978: IFTRUE 15982
15980: GO 16007
15982: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15983: LD_ADDR_VAR 0 3
15987: PUSH
15988: LD_INT 32
15990: PPUSH
15991: LD_VAR 0 1
15995: PPUSH
15996: CALL_OW 321
16000: PUSH
16001: LD_INT 2
16003: EQUAL
16004: ST_TO_ADDR
16005: GO 16323
16007: LD_INT 20
16009: DOUBLE
16010: EQUAL
16011: IFTRUE 16015
16013: GO 16040
16015: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16016: LD_ADDR_VAR 0 3
16020: PUSH
16021: LD_INT 6
16023: PPUSH
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL_OW 321
16033: PUSH
16034: LD_INT 2
16036: EQUAL
16037: ST_TO_ADDR
16038: GO 16323
16040: LD_INT 22
16042: DOUBLE
16043: EQUAL
16044: IFTRUE 16054
16046: LD_INT 36
16048: DOUBLE
16049: EQUAL
16050: IFTRUE 16054
16052: GO 16079
16054: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16055: LD_ADDR_VAR 0 3
16059: PUSH
16060: LD_INT 15
16062: PPUSH
16063: LD_VAR 0 1
16067: PPUSH
16068: CALL_OW 321
16072: PUSH
16073: LD_INT 2
16075: EQUAL
16076: ST_TO_ADDR
16077: GO 16323
16079: LD_INT 30
16081: DOUBLE
16082: EQUAL
16083: IFTRUE 16087
16085: GO 16112
16087: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16088: LD_ADDR_VAR 0 3
16092: PUSH
16093: LD_INT 20
16095: PPUSH
16096: LD_VAR 0 1
16100: PPUSH
16101: CALL_OW 321
16105: PUSH
16106: LD_INT 2
16108: EQUAL
16109: ST_TO_ADDR
16110: GO 16323
16112: LD_INT 28
16114: DOUBLE
16115: EQUAL
16116: IFTRUE 16126
16118: LD_INT 21
16120: DOUBLE
16121: EQUAL
16122: IFTRUE 16126
16124: GO 16151
16126: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16127: LD_ADDR_VAR 0 3
16131: PUSH
16132: LD_INT 21
16134: PPUSH
16135: LD_VAR 0 1
16139: PPUSH
16140: CALL_OW 321
16144: PUSH
16145: LD_INT 2
16147: EQUAL
16148: ST_TO_ADDR
16149: GO 16323
16151: LD_INT 16
16153: DOUBLE
16154: EQUAL
16155: IFTRUE 16159
16157: GO 16184
16159: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16160: LD_ADDR_VAR 0 3
16164: PUSH
16165: LD_INT 84
16167: PPUSH
16168: LD_VAR 0 1
16172: PPUSH
16173: CALL_OW 321
16177: PUSH
16178: LD_INT 2
16180: EQUAL
16181: ST_TO_ADDR
16182: GO 16323
16184: LD_INT 19
16186: DOUBLE
16187: EQUAL
16188: IFTRUE 16198
16190: LD_INT 23
16192: DOUBLE
16193: EQUAL
16194: IFTRUE 16198
16196: GO 16223
16198: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16199: LD_ADDR_VAR 0 3
16203: PUSH
16204: LD_INT 83
16206: PPUSH
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL_OW 321
16216: PUSH
16217: LD_INT 2
16219: EQUAL
16220: ST_TO_ADDR
16221: GO 16323
16223: LD_INT 17
16225: DOUBLE
16226: EQUAL
16227: IFTRUE 16231
16229: GO 16256
16231: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16232: LD_ADDR_VAR 0 3
16236: PUSH
16237: LD_INT 39
16239: PPUSH
16240: LD_VAR 0 1
16244: PPUSH
16245: CALL_OW 321
16249: PUSH
16250: LD_INT 2
16252: EQUAL
16253: ST_TO_ADDR
16254: GO 16323
16256: LD_INT 18
16258: DOUBLE
16259: EQUAL
16260: IFTRUE 16264
16262: GO 16289
16264: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16265: LD_ADDR_VAR 0 3
16269: PUSH
16270: LD_INT 40
16272: PPUSH
16273: LD_VAR 0 1
16277: PPUSH
16278: CALL_OW 321
16282: PUSH
16283: LD_INT 2
16285: EQUAL
16286: ST_TO_ADDR
16287: GO 16323
16289: LD_INT 27
16291: DOUBLE
16292: EQUAL
16293: IFTRUE 16297
16295: GO 16322
16297: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16298: LD_ADDR_VAR 0 3
16302: PUSH
16303: LD_INT 35
16305: PPUSH
16306: LD_VAR 0 1
16310: PPUSH
16311: CALL_OW 321
16315: PUSH
16316: LD_INT 2
16318: EQUAL
16319: ST_TO_ADDR
16320: GO 16323
16322: POP
// end ;
16323: LD_VAR 0 3
16327: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16328: LD_INT 0
16330: PPUSH
16331: PPUSH
16332: PPUSH
16333: PPUSH
16334: PPUSH
16335: PPUSH
16336: PPUSH
16337: PPUSH
16338: PPUSH
16339: PPUSH
16340: PPUSH
// result := false ;
16341: LD_ADDR_VAR 0 6
16345: PUSH
16346: LD_INT 0
16348: ST_TO_ADDR
// if btype = b_depot then
16349: LD_VAR 0 2
16353: PUSH
16354: LD_INT 0
16356: EQUAL
16357: IFFALSE 16369
// begin result := true ;
16359: LD_ADDR_VAR 0 6
16363: PUSH
16364: LD_INT 1
16366: ST_TO_ADDR
// exit ;
16367: GO 17195
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16369: LD_VAR 0 1
16373: NOT
16374: PUSH
16375: LD_VAR 0 1
16379: PPUSH
16380: CALL_OW 266
16384: PUSH
16385: LD_INT 0
16387: PUSH
16388: LD_INT 1
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: IN
16395: NOT
16396: OR
16397: PUSH
16398: LD_VAR 0 2
16402: NOT
16403: OR
16404: PUSH
16405: LD_VAR 0 5
16409: PUSH
16410: LD_INT 0
16412: PUSH
16413: LD_INT 1
16415: PUSH
16416: LD_INT 2
16418: PUSH
16419: LD_INT 3
16421: PUSH
16422: LD_INT 4
16424: PUSH
16425: LD_INT 5
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: IN
16436: NOT
16437: OR
16438: PUSH
16439: LD_VAR 0 3
16443: PPUSH
16444: LD_VAR 0 4
16448: PPUSH
16449: CALL_OW 488
16453: NOT
16454: OR
16455: IFFALSE 16459
// exit ;
16457: GO 17195
// side := GetSide ( depot ) ;
16459: LD_ADDR_VAR 0 9
16463: PUSH
16464: LD_VAR 0 1
16468: PPUSH
16469: CALL_OW 255
16473: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16474: LD_VAR 0 9
16478: PPUSH
16479: LD_VAR 0 2
16483: PPUSH
16484: CALL 15952 0 2
16488: NOT
16489: IFFALSE 16493
// exit ;
16491: GO 17195
// pom := GetBase ( depot ) ;
16493: LD_ADDR_VAR 0 10
16497: PUSH
16498: LD_VAR 0 1
16502: PPUSH
16503: CALL_OW 274
16507: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16508: LD_ADDR_VAR 0 11
16512: PUSH
16513: LD_VAR 0 2
16517: PPUSH
16518: LD_VAR 0 1
16522: PPUSH
16523: CALL_OW 248
16527: PPUSH
16528: CALL_OW 450
16532: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16533: LD_VAR 0 10
16537: PPUSH
16538: LD_INT 1
16540: PPUSH
16541: CALL_OW 275
16545: PUSH
16546: LD_VAR 0 11
16550: PUSH
16551: LD_INT 1
16553: ARRAY
16554: GREATEREQUAL
16555: PUSH
16556: LD_VAR 0 10
16560: PPUSH
16561: LD_INT 2
16563: PPUSH
16564: CALL_OW 275
16568: PUSH
16569: LD_VAR 0 11
16573: PUSH
16574: LD_INT 2
16576: ARRAY
16577: GREATEREQUAL
16578: AND
16579: PUSH
16580: LD_VAR 0 10
16584: PPUSH
16585: LD_INT 3
16587: PPUSH
16588: CALL_OW 275
16592: PUSH
16593: LD_VAR 0 11
16597: PUSH
16598: LD_INT 3
16600: ARRAY
16601: GREATEREQUAL
16602: AND
16603: NOT
16604: IFFALSE 16608
// exit ;
16606: GO 17195
// if GetBType ( depot ) = b_depot then
16608: LD_VAR 0 1
16612: PPUSH
16613: CALL_OW 266
16617: PUSH
16618: LD_INT 0
16620: EQUAL
16621: IFFALSE 16633
// dist := 28 else
16623: LD_ADDR_VAR 0 14
16627: PUSH
16628: LD_INT 28
16630: ST_TO_ADDR
16631: GO 16641
// dist := 36 ;
16633: LD_ADDR_VAR 0 14
16637: PUSH
16638: LD_INT 36
16640: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16641: LD_VAR 0 1
16645: PPUSH
16646: LD_VAR 0 3
16650: PPUSH
16651: LD_VAR 0 4
16655: PPUSH
16656: CALL_OW 297
16660: PUSH
16661: LD_VAR 0 14
16665: GREATER
16666: IFFALSE 16670
// exit ;
16668: GO 17195
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16670: LD_ADDR_VAR 0 12
16674: PUSH
16675: LD_VAR 0 2
16679: PPUSH
16680: LD_VAR 0 3
16684: PPUSH
16685: LD_VAR 0 4
16689: PPUSH
16690: LD_VAR 0 5
16694: PPUSH
16695: LD_VAR 0 1
16699: PPUSH
16700: CALL_OW 248
16704: PPUSH
16705: LD_INT 0
16707: PPUSH
16708: CALL 17200 0 6
16712: ST_TO_ADDR
// if not hexes then
16713: LD_VAR 0 12
16717: NOT
16718: IFFALSE 16722
// exit ;
16720: GO 17195
// hex := GetHexInfo ( x , y ) ;
16722: LD_ADDR_VAR 0 15
16726: PUSH
16727: LD_VAR 0 3
16731: PPUSH
16732: LD_VAR 0 4
16736: PPUSH
16737: CALL_OW 546
16741: ST_TO_ADDR
// if hex [ 1 ] then
16742: LD_VAR 0 15
16746: PUSH
16747: LD_INT 1
16749: ARRAY
16750: IFFALSE 16754
// exit ;
16752: GO 17195
// height := hex [ 2 ] ;
16754: LD_ADDR_VAR 0 13
16758: PUSH
16759: LD_VAR 0 15
16763: PUSH
16764: LD_INT 2
16766: ARRAY
16767: ST_TO_ADDR
// for i = 1 to hexes do
16768: LD_ADDR_VAR 0 7
16772: PUSH
16773: DOUBLE
16774: LD_INT 1
16776: DEC
16777: ST_TO_ADDR
16778: LD_VAR 0 12
16782: PUSH
16783: FOR_TO
16784: IFFALSE 17114
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16786: LD_VAR 0 12
16790: PUSH
16791: LD_VAR 0 7
16795: ARRAY
16796: PUSH
16797: LD_INT 1
16799: ARRAY
16800: PPUSH
16801: LD_VAR 0 12
16805: PUSH
16806: LD_VAR 0 7
16810: ARRAY
16811: PUSH
16812: LD_INT 2
16814: ARRAY
16815: PPUSH
16816: CALL_OW 488
16820: NOT
16821: PUSH
16822: LD_VAR 0 12
16826: PUSH
16827: LD_VAR 0 7
16831: ARRAY
16832: PUSH
16833: LD_INT 1
16835: ARRAY
16836: PPUSH
16837: LD_VAR 0 12
16841: PUSH
16842: LD_VAR 0 7
16846: ARRAY
16847: PUSH
16848: LD_INT 2
16850: ARRAY
16851: PPUSH
16852: CALL_OW 428
16856: PUSH
16857: LD_INT 0
16859: GREATER
16860: OR
16861: PUSH
16862: LD_VAR 0 12
16866: PUSH
16867: LD_VAR 0 7
16871: ARRAY
16872: PUSH
16873: LD_INT 1
16875: ARRAY
16876: PPUSH
16877: LD_VAR 0 12
16881: PUSH
16882: LD_VAR 0 7
16886: ARRAY
16887: PUSH
16888: LD_INT 2
16890: ARRAY
16891: PPUSH
16892: CALL_OW 351
16896: OR
16897: IFFALSE 16903
// exit ;
16899: POP
16900: POP
16901: GO 17195
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16903: LD_ADDR_VAR 0 8
16907: PUSH
16908: LD_VAR 0 12
16912: PUSH
16913: LD_VAR 0 7
16917: ARRAY
16918: PUSH
16919: LD_INT 1
16921: ARRAY
16922: PPUSH
16923: LD_VAR 0 12
16927: PUSH
16928: LD_VAR 0 7
16932: ARRAY
16933: PUSH
16934: LD_INT 2
16936: ARRAY
16937: PPUSH
16938: CALL_OW 546
16942: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16943: LD_VAR 0 8
16947: PUSH
16948: LD_INT 1
16950: ARRAY
16951: PUSH
16952: LD_VAR 0 8
16956: PUSH
16957: LD_INT 2
16959: ARRAY
16960: PUSH
16961: LD_VAR 0 13
16965: PUSH
16966: LD_INT 2
16968: PLUS
16969: GREATER
16970: OR
16971: PUSH
16972: LD_VAR 0 8
16976: PUSH
16977: LD_INT 2
16979: ARRAY
16980: PUSH
16981: LD_VAR 0 13
16985: PUSH
16986: LD_INT 2
16988: MINUS
16989: LESS
16990: OR
16991: PUSH
16992: LD_VAR 0 8
16996: PUSH
16997: LD_INT 3
16999: ARRAY
17000: PUSH
17001: LD_INT 0
17003: PUSH
17004: LD_INT 8
17006: PUSH
17007: LD_INT 9
17009: PUSH
17010: LD_INT 10
17012: PUSH
17013: LD_INT 11
17015: PUSH
17016: LD_INT 12
17018: PUSH
17019: LD_INT 13
17021: PUSH
17022: LD_INT 16
17024: PUSH
17025: LD_INT 17
17027: PUSH
17028: LD_INT 18
17030: PUSH
17031: LD_INT 19
17033: PUSH
17034: LD_INT 20
17036: PUSH
17037: LD_INT 21
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: IN
17055: NOT
17056: OR
17057: PUSH
17058: LD_VAR 0 8
17062: PUSH
17063: LD_INT 5
17065: ARRAY
17066: NOT
17067: OR
17068: PUSH
17069: LD_VAR 0 8
17073: PUSH
17074: LD_INT 6
17076: ARRAY
17077: PUSH
17078: LD_INT 1
17080: PUSH
17081: LD_INT 2
17083: PUSH
17084: LD_INT 7
17086: PUSH
17087: LD_INT 9
17089: PUSH
17090: LD_INT 10
17092: PUSH
17093: LD_INT 11
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: IN
17104: NOT
17105: OR
17106: IFFALSE 17112
// exit ;
17108: POP
17109: POP
17110: GO 17195
// end ;
17112: GO 16783
17114: POP
17115: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17116: LD_VAR 0 9
17120: PPUSH
17121: LD_VAR 0 3
17125: PPUSH
17126: LD_VAR 0 4
17130: PPUSH
17131: LD_INT 20
17133: PPUSH
17134: CALL 9118 0 4
17138: PUSH
17139: LD_INT 4
17141: ARRAY
17142: IFFALSE 17146
// exit ;
17144: GO 17195
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17146: LD_VAR 0 2
17150: PUSH
17151: LD_INT 29
17153: PUSH
17154: LD_INT 30
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: IN
17161: PUSH
17162: LD_VAR 0 3
17166: PPUSH
17167: LD_VAR 0 4
17171: PPUSH
17172: LD_VAR 0 9
17176: PPUSH
17177: CALL_OW 440
17181: NOT
17182: AND
17183: IFFALSE 17187
// exit ;
17185: GO 17195
// result := true ;
17187: LD_ADDR_VAR 0 6
17191: PUSH
17192: LD_INT 1
17194: ST_TO_ADDR
// end ;
17195: LD_VAR 0 6
17199: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17200: LD_INT 0
17202: PPUSH
17203: PPUSH
17204: PPUSH
17205: PPUSH
17206: PPUSH
17207: PPUSH
17208: PPUSH
17209: PPUSH
17210: PPUSH
17211: PPUSH
17212: PPUSH
17213: PPUSH
17214: PPUSH
17215: PPUSH
17216: PPUSH
17217: PPUSH
17218: PPUSH
17219: PPUSH
17220: PPUSH
17221: PPUSH
17222: PPUSH
17223: PPUSH
17224: PPUSH
17225: PPUSH
17226: PPUSH
17227: PPUSH
17228: PPUSH
17229: PPUSH
17230: PPUSH
17231: PPUSH
17232: PPUSH
17233: PPUSH
17234: PPUSH
17235: PPUSH
17236: PPUSH
17237: PPUSH
17238: PPUSH
17239: PPUSH
17240: PPUSH
17241: PPUSH
17242: PPUSH
17243: PPUSH
17244: PPUSH
17245: PPUSH
17246: PPUSH
17247: PPUSH
17248: PPUSH
17249: PPUSH
17250: PPUSH
17251: PPUSH
17252: PPUSH
17253: PPUSH
17254: PPUSH
17255: PPUSH
17256: PPUSH
17257: PPUSH
17258: PPUSH
17259: PPUSH
// result = [ ] ;
17260: LD_ADDR_VAR 0 7
17264: PUSH
17265: EMPTY
17266: ST_TO_ADDR
// temp_list = [ ] ;
17267: LD_ADDR_VAR 0 9
17271: PUSH
17272: EMPTY
17273: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17274: LD_VAR 0 4
17278: PUSH
17279: LD_INT 0
17281: PUSH
17282: LD_INT 1
17284: PUSH
17285: LD_INT 2
17287: PUSH
17288: LD_INT 3
17290: PUSH
17291: LD_INT 4
17293: PUSH
17294: LD_INT 5
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: IN
17305: NOT
17306: PUSH
17307: LD_VAR 0 1
17311: PUSH
17312: LD_INT 0
17314: PUSH
17315: LD_INT 1
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: IN
17322: PUSH
17323: LD_VAR 0 5
17327: PUSH
17328: LD_INT 1
17330: PUSH
17331: LD_INT 2
17333: PUSH
17334: LD_INT 3
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: LIST
17341: IN
17342: NOT
17343: AND
17344: OR
17345: IFFALSE 17349
// exit ;
17347: GO 35740
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17349: LD_VAR 0 1
17353: PUSH
17354: LD_INT 6
17356: PUSH
17357: LD_INT 7
17359: PUSH
17360: LD_INT 8
17362: PUSH
17363: LD_INT 13
17365: PUSH
17366: LD_INT 12
17368: PUSH
17369: LD_INT 15
17371: PUSH
17372: LD_INT 11
17374: PUSH
17375: LD_INT 14
17377: PUSH
17378: LD_INT 10
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: IN
17392: IFFALSE 17402
// btype = b_lab ;
17394: LD_ADDR_VAR 0 1
17398: PUSH
17399: LD_INT 6
17401: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17402: LD_VAR 0 6
17406: PUSH
17407: LD_INT 0
17409: PUSH
17410: LD_INT 1
17412: PUSH
17413: LD_INT 2
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: IN
17421: NOT
17422: PUSH
17423: LD_VAR 0 1
17427: PUSH
17428: LD_INT 0
17430: PUSH
17431: LD_INT 1
17433: PUSH
17434: LD_INT 2
17436: PUSH
17437: LD_INT 3
17439: PUSH
17440: LD_INT 6
17442: PUSH
17443: LD_INT 36
17445: PUSH
17446: LD_INT 4
17448: PUSH
17449: LD_INT 5
17451: PUSH
17452: LD_INT 31
17454: PUSH
17455: LD_INT 32
17457: PUSH
17458: LD_INT 33
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: IN
17474: NOT
17475: PUSH
17476: LD_VAR 0 6
17480: PUSH
17481: LD_INT 1
17483: EQUAL
17484: AND
17485: OR
17486: PUSH
17487: LD_VAR 0 1
17491: PUSH
17492: LD_INT 2
17494: PUSH
17495: LD_INT 3
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: IN
17502: NOT
17503: PUSH
17504: LD_VAR 0 6
17508: PUSH
17509: LD_INT 2
17511: EQUAL
17512: AND
17513: OR
17514: IFFALSE 17524
// mode = 0 ;
17516: LD_ADDR_VAR 0 6
17520: PUSH
17521: LD_INT 0
17523: ST_TO_ADDR
// case mode of 0 :
17524: LD_VAR 0 6
17528: PUSH
17529: LD_INT 0
17531: DOUBLE
17532: EQUAL
17533: IFTRUE 17537
17535: GO 28990
17537: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17538: LD_ADDR_VAR 0 11
17542: PUSH
17543: LD_INT 0
17545: PUSH
17546: LD_INT 0
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 0
17555: PUSH
17556: LD_INT 1
17558: NEG
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 1
17566: PUSH
17567: LD_INT 0
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: LD_INT 1
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 0
17586: PUSH
17587: LD_INT 1
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 1
17596: NEG
17597: PUSH
17598: LD_INT 0
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 1
17607: NEG
17608: PUSH
17609: LD_INT 1
17611: NEG
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PUSH
17617: LD_INT 1
17619: NEG
17620: PUSH
17621: LD_INT 2
17623: NEG
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 0
17631: PUSH
17632: LD_INT 2
17634: NEG
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 1
17642: PUSH
17643: LD_INT 1
17645: NEG
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 1
17653: PUSH
17654: LD_INT 2
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 0
17663: PUSH
17664: LD_INT 2
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 1
17673: NEG
17674: PUSH
17675: LD_INT 1
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 1
17684: PUSH
17685: LD_INT 3
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 0
17694: PUSH
17695: LD_INT 3
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 1
17704: NEG
17705: PUSH
17706: LD_INT 2
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17731: LD_ADDR_VAR 0 12
17735: PUSH
17736: LD_INT 0
17738: PUSH
17739: LD_INT 0
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 0
17748: PUSH
17749: LD_INT 1
17751: NEG
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: LD_INT 0
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 1
17769: PUSH
17770: LD_INT 1
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 0
17779: PUSH
17780: LD_INT 1
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 1
17789: NEG
17790: PUSH
17791: LD_INT 0
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 1
17800: NEG
17801: PUSH
17802: LD_INT 1
17804: NEG
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 1
17812: PUSH
17813: LD_INT 1
17815: NEG
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 2
17823: PUSH
17824: LD_INT 0
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 2
17833: PUSH
17834: LD_INT 1
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: NEG
17844: PUSH
17845: LD_INT 1
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 2
17854: NEG
17855: PUSH
17856: LD_INT 0
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 2
17865: NEG
17866: PUSH
17867: LD_INT 1
17869: NEG
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 2
17877: NEG
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 3
17888: NEG
17889: PUSH
17890: LD_INT 0
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 3
17899: NEG
17900: PUSH
17901: LD_INT 1
17903: NEG
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17927: LD_ADDR_VAR 0 13
17931: PUSH
17932: LD_INT 0
17934: PUSH
17935: LD_INT 0
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 0
17944: PUSH
17945: LD_INT 1
17947: NEG
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: LD_INT 0
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 1
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 0
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 1
17985: NEG
17986: PUSH
17987: LD_INT 0
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 1
17996: NEG
17997: PUSH
17998: LD_INT 1
18000: NEG
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 1
18008: NEG
18009: PUSH
18010: LD_INT 2
18012: NEG
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 2
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 2
18030: PUSH
18031: LD_INT 2
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 1
18040: PUSH
18041: LD_INT 2
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 2
18050: NEG
18051: PUSH
18052: LD_INT 1
18054: NEG
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 2
18062: NEG
18063: PUSH
18064: LD_INT 2
18066: NEG
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 2
18074: NEG
18075: PUSH
18076: LD_INT 3
18078: NEG
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 3
18086: NEG
18087: PUSH
18088: LD_INT 2
18090: NEG
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 3
18098: NEG
18099: PUSH
18100: LD_INT 3
18102: NEG
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18126: LD_ADDR_VAR 0 14
18130: PUSH
18131: LD_INT 0
18133: PUSH
18134: LD_INT 0
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 0
18143: PUSH
18144: LD_INT 1
18146: NEG
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: LD_INT 0
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 1
18164: PUSH
18165: LD_INT 1
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 0
18174: PUSH
18175: LD_INT 1
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 1
18184: NEG
18185: PUSH
18186: LD_INT 0
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 1
18195: NEG
18196: PUSH
18197: LD_INT 1
18199: NEG
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 1
18207: NEG
18208: PUSH
18209: LD_INT 2
18211: NEG
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 0
18219: PUSH
18220: LD_INT 2
18222: NEG
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 1
18230: PUSH
18231: LD_INT 1
18233: NEG
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: LD_INT 2
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 0
18251: PUSH
18252: LD_INT 2
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 1
18261: NEG
18262: PUSH
18263: LD_INT 1
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 1
18272: NEG
18273: PUSH
18274: LD_INT 3
18276: NEG
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 0
18284: PUSH
18285: LD_INT 3
18287: NEG
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 1
18295: PUSH
18296: LD_INT 2
18298: NEG
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18322: LD_ADDR_VAR 0 15
18326: PUSH
18327: LD_INT 0
18329: PUSH
18330: LD_INT 0
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 0
18339: PUSH
18340: LD_INT 1
18342: NEG
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 1
18350: PUSH
18351: LD_INT 0
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 1
18360: PUSH
18361: LD_INT 1
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 0
18370: PUSH
18371: LD_INT 1
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 1
18380: NEG
18381: PUSH
18382: LD_INT 0
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 1
18391: NEG
18392: PUSH
18393: LD_INT 1
18395: NEG
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 1
18403: PUSH
18404: LD_INT 1
18406: NEG
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 2
18414: PUSH
18415: LD_INT 0
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 2
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 1
18434: NEG
18435: PUSH
18436: LD_INT 1
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 2
18445: NEG
18446: PUSH
18447: LD_INT 0
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 2
18456: NEG
18457: PUSH
18458: LD_INT 1
18460: NEG
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 2
18468: PUSH
18469: LD_INT 1
18471: NEG
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 3
18479: PUSH
18480: LD_INT 0
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 3
18489: PUSH
18490: LD_INT 1
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18515: LD_ADDR_VAR 0 16
18519: PUSH
18520: LD_INT 0
18522: PUSH
18523: LD_INT 0
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 0
18532: PUSH
18533: LD_INT 1
18535: NEG
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 1
18543: PUSH
18544: LD_INT 0
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 1
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 0
18563: PUSH
18564: LD_INT 1
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 1
18573: NEG
18574: PUSH
18575: LD_INT 0
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 1
18584: NEG
18585: PUSH
18586: LD_INT 1
18588: NEG
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 1
18596: NEG
18597: PUSH
18598: LD_INT 2
18600: NEG
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 2
18608: PUSH
18609: LD_INT 1
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 2
18618: PUSH
18619: LD_INT 2
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: LD_INT 2
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 2
18638: NEG
18639: PUSH
18640: LD_INT 1
18642: NEG
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 2
18650: NEG
18651: PUSH
18652: LD_INT 2
18654: NEG
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 3
18662: PUSH
18663: LD_INT 2
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 3
18672: PUSH
18673: LD_INT 3
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 2
18682: PUSH
18683: LD_INT 3
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18708: LD_ADDR_VAR 0 17
18712: PUSH
18713: LD_INT 0
18715: PUSH
18716: LD_INT 0
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 0
18725: PUSH
18726: LD_INT 1
18728: NEG
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: LD_INT 0
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 1
18746: PUSH
18747: LD_INT 1
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 0
18756: PUSH
18757: LD_INT 1
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 1
18766: NEG
18767: PUSH
18768: LD_INT 0
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 1
18777: NEG
18778: PUSH
18779: LD_INT 1
18781: NEG
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 1
18789: NEG
18790: PUSH
18791: LD_INT 2
18793: NEG
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 0
18801: PUSH
18802: LD_INT 2
18804: NEG
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: LD_INT 1
18815: NEG
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 2
18823: PUSH
18824: LD_INT 0
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 2
18833: PUSH
18834: LD_INT 1
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 2
18843: PUSH
18844: LD_INT 2
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 1
18853: PUSH
18854: LD_INT 2
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 0
18863: PUSH
18864: LD_INT 2
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 1
18873: NEG
18874: PUSH
18875: LD_INT 1
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 2
18884: NEG
18885: PUSH
18886: LD_INT 0
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 2
18895: NEG
18896: PUSH
18897: LD_INT 1
18899: NEG
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 2
18907: NEG
18908: PUSH
18909: LD_INT 2
18911: NEG
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18938: LD_ADDR_VAR 0 18
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: LD_INT 0
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 0
18955: PUSH
18956: LD_INT 1
18958: NEG
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 1
18966: PUSH
18967: LD_INT 0
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 0
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: NEG
18997: PUSH
18998: LD_INT 0
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 1
19007: NEG
19008: PUSH
19009: LD_INT 1
19011: NEG
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 1
19019: NEG
19020: PUSH
19021: LD_INT 2
19023: NEG
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 0
19031: PUSH
19032: LD_INT 2
19034: NEG
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 1
19042: PUSH
19043: LD_INT 1
19045: NEG
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 2
19053: PUSH
19054: LD_INT 0
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 2
19063: PUSH
19064: LD_INT 1
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 2
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 1
19083: PUSH
19084: LD_INT 2
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 0
19093: PUSH
19094: LD_INT 2
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 1
19103: NEG
19104: PUSH
19105: LD_INT 1
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 2
19114: NEG
19115: PUSH
19116: LD_INT 0
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 2
19125: NEG
19126: PUSH
19127: LD_INT 1
19129: NEG
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 2
19137: NEG
19138: PUSH
19139: LD_INT 2
19141: NEG
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19168: LD_ADDR_VAR 0 19
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: LD_INT 0
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 0
19185: PUSH
19186: LD_INT 1
19188: NEG
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 1
19196: PUSH
19197: LD_INT 0
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 1
19206: PUSH
19207: LD_INT 1
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 0
19216: PUSH
19217: LD_INT 1
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 1
19226: NEG
19227: PUSH
19228: LD_INT 0
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 1
19237: NEG
19238: PUSH
19239: LD_INT 1
19241: NEG
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 1
19249: NEG
19250: PUSH
19251: LD_INT 2
19253: NEG
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 0
19261: PUSH
19262: LD_INT 2
19264: NEG
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 1
19272: PUSH
19273: LD_INT 1
19275: NEG
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 2
19283: PUSH
19284: LD_INT 0
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 2
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 2
19303: PUSH
19304: LD_INT 2
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: LD_INT 2
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 0
19323: PUSH
19324: LD_INT 2
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 1
19333: NEG
19334: PUSH
19335: LD_INT 1
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 2
19344: NEG
19345: PUSH
19346: LD_INT 0
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 2
19355: NEG
19356: PUSH
19357: LD_INT 1
19359: NEG
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 2
19367: NEG
19368: PUSH
19369: LD_INT 2
19371: NEG
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19398: LD_ADDR_VAR 0 20
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 0
19415: PUSH
19416: LD_INT 1
19418: NEG
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: PUSH
19427: LD_INT 0
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 1
19436: PUSH
19437: LD_INT 1
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 0
19446: PUSH
19447: LD_INT 1
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 1
19456: NEG
19457: PUSH
19458: LD_INT 0
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 1
19467: NEG
19468: PUSH
19469: LD_INT 1
19471: NEG
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 1
19479: NEG
19480: PUSH
19481: LD_INT 2
19483: NEG
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 0
19491: PUSH
19492: LD_INT 2
19494: NEG
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: LD_INT 1
19505: NEG
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 2
19513: PUSH
19514: LD_INT 0
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 2
19523: PUSH
19524: LD_INT 1
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 2
19533: PUSH
19534: LD_INT 2
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 1
19543: PUSH
19544: LD_INT 2
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 0
19553: PUSH
19554: LD_INT 2
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 1
19563: NEG
19564: PUSH
19565: LD_INT 1
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 2
19574: NEG
19575: PUSH
19576: LD_INT 0
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 2
19585: NEG
19586: PUSH
19587: LD_INT 1
19589: NEG
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 2
19597: NEG
19598: PUSH
19599: LD_INT 2
19601: NEG
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19628: LD_ADDR_VAR 0 21
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: LD_INT 0
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 0
19645: PUSH
19646: LD_INT 1
19648: NEG
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 1
19656: PUSH
19657: LD_INT 0
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 1
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 0
19676: PUSH
19677: LD_INT 1
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 1
19686: NEG
19687: PUSH
19688: LD_INT 0
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 1
19697: NEG
19698: PUSH
19699: LD_INT 1
19701: NEG
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 1
19709: NEG
19710: PUSH
19711: LD_INT 2
19713: NEG
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 0
19721: PUSH
19722: LD_INT 2
19724: NEG
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 1
19732: PUSH
19733: LD_INT 1
19735: NEG
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 2
19743: PUSH
19744: LD_INT 0
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 2
19753: PUSH
19754: LD_INT 1
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 2
19763: PUSH
19764: LD_INT 2
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 1
19773: PUSH
19774: LD_INT 2
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 0
19783: PUSH
19784: LD_INT 2
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 1
19793: NEG
19794: PUSH
19795: LD_INT 1
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 2
19804: NEG
19805: PUSH
19806: LD_INT 0
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 2
19815: NEG
19816: PUSH
19817: LD_INT 1
19819: NEG
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 2
19827: NEG
19828: PUSH
19829: LD_INT 2
19831: NEG
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19858: LD_ADDR_VAR 0 22
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: LD_INT 0
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 0
19875: PUSH
19876: LD_INT 1
19878: NEG
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 1
19886: PUSH
19887: LD_INT 0
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 1
19896: PUSH
19897: LD_INT 1
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 0
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 1
19916: NEG
19917: PUSH
19918: LD_INT 0
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 1
19927: NEG
19928: PUSH
19929: LD_INT 1
19931: NEG
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 1
19939: NEG
19940: PUSH
19941: LD_INT 2
19943: NEG
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 0
19951: PUSH
19952: LD_INT 2
19954: NEG
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 1
19962: PUSH
19963: LD_INT 1
19965: NEG
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 2
19973: PUSH
19974: LD_INT 0
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 2
19983: PUSH
19984: LD_INT 1
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 2
19993: PUSH
19994: LD_INT 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 1
20003: PUSH
20004: LD_INT 2
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 0
20013: PUSH
20014: LD_INT 2
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 1
20023: NEG
20024: PUSH
20025: LD_INT 1
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 2
20034: NEG
20035: PUSH
20036: LD_INT 0
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 2
20045: NEG
20046: PUSH
20047: LD_INT 1
20049: NEG
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 2
20057: NEG
20058: PUSH
20059: LD_INT 2
20061: NEG
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20088: LD_ADDR_VAR 0 23
20092: PUSH
20093: LD_INT 0
20095: PUSH
20096: LD_INT 0
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 0
20105: PUSH
20106: LD_INT 1
20108: NEG
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 1
20116: PUSH
20117: LD_INT 0
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 1
20126: PUSH
20127: LD_INT 1
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 0
20136: PUSH
20137: LD_INT 1
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 1
20146: NEG
20147: PUSH
20148: LD_INT 0
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 1
20157: NEG
20158: PUSH
20159: LD_INT 1
20161: NEG
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 1
20169: NEG
20170: PUSH
20171: LD_INT 2
20173: NEG
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 0
20181: PUSH
20182: LD_INT 2
20184: NEG
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 1
20192: PUSH
20193: LD_INT 1
20195: NEG
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 2
20203: PUSH
20204: LD_INT 0
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 2
20213: PUSH
20214: LD_INT 1
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 2
20223: PUSH
20224: LD_INT 2
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 1
20233: PUSH
20234: LD_INT 2
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 0
20243: PUSH
20244: LD_INT 2
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 1
20253: NEG
20254: PUSH
20255: LD_INT 1
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 2
20264: NEG
20265: PUSH
20266: LD_INT 0
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 2
20275: NEG
20276: PUSH
20277: LD_INT 1
20279: NEG
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 2
20287: NEG
20288: PUSH
20289: LD_INT 2
20291: NEG
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 2
20299: NEG
20300: PUSH
20301: LD_INT 3
20303: NEG
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 1
20311: NEG
20312: PUSH
20313: LD_INT 3
20315: NEG
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 1
20323: PUSH
20324: LD_INT 2
20326: NEG
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 2
20334: PUSH
20335: LD_INT 1
20337: NEG
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20368: LD_ADDR_VAR 0 24
20372: PUSH
20373: LD_INT 0
20375: PUSH
20376: LD_INT 0
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 0
20385: PUSH
20386: LD_INT 1
20388: NEG
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 1
20396: PUSH
20397: LD_INT 0
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 1
20406: PUSH
20407: LD_INT 1
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 0
20416: PUSH
20417: LD_INT 1
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 1
20426: NEG
20427: PUSH
20428: LD_INT 0
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 1
20437: NEG
20438: PUSH
20439: LD_INT 1
20441: NEG
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 1
20449: NEG
20450: PUSH
20451: LD_INT 2
20453: NEG
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 0
20461: PUSH
20462: LD_INT 2
20464: NEG
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 1
20472: PUSH
20473: LD_INT 1
20475: NEG
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 2
20483: PUSH
20484: LD_INT 0
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 2
20493: PUSH
20494: LD_INT 1
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 2
20503: PUSH
20504: LD_INT 2
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 1
20513: PUSH
20514: LD_INT 2
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 0
20523: PUSH
20524: LD_INT 2
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 1
20533: NEG
20534: PUSH
20535: LD_INT 1
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 2
20544: NEG
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 2
20555: NEG
20556: PUSH
20557: LD_INT 1
20559: NEG
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 2
20567: NEG
20568: PUSH
20569: LD_INT 2
20571: NEG
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: LD_INT 2
20582: NEG
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 2
20590: PUSH
20591: LD_INT 1
20593: NEG
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 3
20601: PUSH
20602: LD_INT 1
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 3
20611: PUSH
20612: LD_INT 2
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20644: LD_ADDR_VAR 0 25
20648: PUSH
20649: LD_INT 0
20651: PUSH
20652: LD_INT 0
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 0
20661: PUSH
20662: LD_INT 1
20664: NEG
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: LD_INT 0
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 1
20682: PUSH
20683: LD_INT 1
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 0
20692: PUSH
20693: LD_INT 1
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 1
20702: NEG
20703: PUSH
20704: LD_INT 0
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 1
20713: NEG
20714: PUSH
20715: LD_INT 1
20717: NEG
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 1
20725: NEG
20726: PUSH
20727: LD_INT 2
20729: NEG
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 0
20737: PUSH
20738: LD_INT 2
20740: NEG
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 1
20748: PUSH
20749: LD_INT 1
20751: NEG
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 2
20759: PUSH
20760: LD_INT 0
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 2
20769: PUSH
20770: LD_INT 1
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 2
20779: PUSH
20780: LD_INT 2
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 1
20789: PUSH
20790: LD_INT 2
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 0
20799: PUSH
20800: LD_INT 2
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 1
20809: NEG
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 2
20820: NEG
20821: PUSH
20822: LD_INT 0
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 2
20831: NEG
20832: PUSH
20833: LD_INT 1
20835: NEG
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 2
20843: NEG
20844: PUSH
20845: LD_INT 2
20847: NEG
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 3
20855: PUSH
20856: LD_INT 1
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 3
20865: PUSH
20866: LD_INT 2
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 2
20875: PUSH
20876: LD_INT 3
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: LD_INT 3
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20918: LD_ADDR_VAR 0 26
20922: PUSH
20923: LD_INT 0
20925: PUSH
20926: LD_INT 0
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 0
20935: PUSH
20936: LD_INT 1
20938: NEG
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 1
20946: PUSH
20947: LD_INT 0
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 1
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 0
20966: PUSH
20967: LD_INT 1
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 1
20976: NEG
20977: PUSH
20978: LD_INT 0
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 1
20987: NEG
20988: PUSH
20989: LD_INT 1
20991: NEG
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 1
20999: NEG
21000: PUSH
21001: LD_INT 2
21003: NEG
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 0
21011: PUSH
21012: LD_INT 2
21014: NEG
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: LD_INT 1
21025: NEG
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 2
21033: PUSH
21034: LD_INT 0
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 2
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 2
21053: PUSH
21054: LD_INT 2
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 1
21063: PUSH
21064: LD_INT 2
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 0
21073: PUSH
21074: LD_INT 2
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 1
21083: NEG
21084: PUSH
21085: LD_INT 1
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 2
21094: NEG
21095: PUSH
21096: LD_INT 0
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 2
21105: NEG
21106: PUSH
21107: LD_INT 1
21109: NEG
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 2
21117: NEG
21118: PUSH
21119: LD_INT 2
21121: NEG
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 2
21129: PUSH
21130: LD_INT 3
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 1
21139: PUSH
21140: LD_INT 3
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 1
21149: NEG
21150: PUSH
21151: LD_INT 2
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 2
21160: NEG
21161: PUSH
21162: LD_INT 1
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21194: LD_ADDR_VAR 0 27
21198: PUSH
21199: LD_INT 0
21201: PUSH
21202: LD_INT 0
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 0
21211: PUSH
21212: LD_INT 1
21214: NEG
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 1
21222: PUSH
21223: LD_INT 0
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: LD_INT 1
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 0
21242: PUSH
21243: LD_INT 1
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 1
21252: NEG
21253: PUSH
21254: LD_INT 0
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 1
21263: NEG
21264: PUSH
21265: LD_INT 1
21267: NEG
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 1
21275: NEG
21276: PUSH
21277: LD_INT 2
21279: NEG
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 0
21287: PUSH
21288: LD_INT 2
21290: NEG
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 1
21298: PUSH
21299: LD_INT 1
21301: NEG
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 2
21309: PUSH
21310: LD_INT 0
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 2
21319: PUSH
21320: LD_INT 1
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 2
21329: PUSH
21330: LD_INT 2
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 1
21339: PUSH
21340: LD_INT 2
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 0
21349: PUSH
21350: LD_INT 2
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 1
21359: NEG
21360: PUSH
21361: LD_INT 1
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 2
21370: NEG
21371: PUSH
21372: LD_INT 0
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 2
21381: NEG
21382: PUSH
21383: LD_INT 1
21385: NEG
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 2
21393: NEG
21394: PUSH
21395: LD_INT 2
21397: NEG
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 1
21405: NEG
21406: PUSH
21407: LD_INT 2
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 2
21416: NEG
21417: PUSH
21418: LD_INT 1
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 3
21427: NEG
21428: PUSH
21429: LD_INT 1
21431: NEG
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 3
21439: NEG
21440: PUSH
21441: LD_INT 2
21443: NEG
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21474: LD_ADDR_VAR 0 28
21478: PUSH
21479: LD_INT 0
21481: PUSH
21482: LD_INT 0
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 0
21491: PUSH
21492: LD_INT 1
21494: NEG
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 1
21502: PUSH
21503: LD_INT 0
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 1
21512: PUSH
21513: LD_INT 1
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 0
21522: PUSH
21523: LD_INT 1
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 1
21532: NEG
21533: PUSH
21534: LD_INT 0
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 1
21543: NEG
21544: PUSH
21545: LD_INT 1
21547: NEG
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 1
21555: NEG
21556: PUSH
21557: LD_INT 2
21559: NEG
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 0
21567: PUSH
21568: LD_INT 2
21570: NEG
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 1
21578: PUSH
21579: LD_INT 1
21581: NEG
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 2
21589: PUSH
21590: LD_INT 0
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 2
21599: PUSH
21600: LD_INT 1
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 2
21609: PUSH
21610: LD_INT 2
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 1
21619: PUSH
21620: LD_INT 2
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 0
21629: PUSH
21630: LD_INT 2
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 1
21639: NEG
21640: PUSH
21641: LD_INT 1
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 2
21650: NEG
21651: PUSH
21652: LD_INT 0
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 2
21661: NEG
21662: PUSH
21663: LD_INT 1
21665: NEG
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 2
21673: NEG
21674: PUSH
21675: LD_INT 2
21677: NEG
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 2
21685: NEG
21686: PUSH
21687: LD_INT 3
21689: NEG
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 1
21697: NEG
21698: PUSH
21699: LD_INT 3
21701: NEG
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 3
21709: NEG
21710: PUSH
21711: LD_INT 1
21713: NEG
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 3
21721: NEG
21722: PUSH
21723: LD_INT 2
21725: NEG
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21756: LD_ADDR_VAR 0 29
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 0
21773: PUSH
21774: LD_INT 1
21776: NEG
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: LD_INT 0
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 1
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 0
21804: PUSH
21805: LD_INT 1
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 1
21814: NEG
21815: PUSH
21816: LD_INT 0
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: PUSH
21827: LD_INT 1
21829: NEG
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 1
21837: NEG
21838: PUSH
21839: LD_INT 2
21841: NEG
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 0
21849: PUSH
21850: LD_INT 2
21852: NEG
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 1
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 2
21871: PUSH
21872: LD_INT 0
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 2
21881: PUSH
21882: LD_INT 1
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 1
21891: PUSH
21892: LD_INT 2
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 0
21901: PUSH
21902: LD_INT 2
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 1
21911: NEG
21912: PUSH
21913: LD_INT 1
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 2
21922: NEG
21923: PUSH
21924: LD_INT 1
21926: NEG
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 2
21934: NEG
21935: PUSH
21936: LD_INT 2
21938: NEG
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 2
21946: NEG
21947: PUSH
21948: LD_INT 3
21950: NEG
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 2
21958: PUSH
21959: LD_INT 1
21961: NEG
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 3
21969: PUSH
21970: LD_INT 1
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 1
21979: PUSH
21980: LD_INT 3
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 1
21989: NEG
21990: PUSH
21991: LD_INT 2
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 3
22000: NEG
22001: PUSH
22002: LD_INT 2
22004: NEG
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22035: LD_ADDR_VAR 0 30
22039: PUSH
22040: LD_INT 0
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 0
22052: PUSH
22053: LD_INT 1
22055: NEG
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 1
22063: PUSH
22064: LD_INT 0
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 1
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 0
22083: PUSH
22084: LD_INT 1
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 1
22093: NEG
22094: PUSH
22095: LD_INT 0
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 1
22104: NEG
22105: PUSH
22106: LD_INT 1
22108: NEG
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 1
22116: NEG
22117: PUSH
22118: LD_INT 2
22120: NEG
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 0
22128: PUSH
22129: LD_INT 2
22131: NEG
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 1
22139: PUSH
22140: LD_INT 1
22142: NEG
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 2
22150: PUSH
22151: LD_INT 0
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 2
22160: PUSH
22161: LD_INT 1
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 2
22170: PUSH
22171: LD_INT 2
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 1
22180: PUSH
22181: LD_INT 2
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 1
22190: NEG
22191: PUSH
22192: LD_INT 1
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 2
22201: NEG
22202: PUSH
22203: LD_INT 0
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 2
22212: NEG
22213: PUSH
22214: LD_INT 1
22216: NEG
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 1
22224: NEG
22225: PUSH
22226: LD_INT 3
22228: NEG
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 1
22236: PUSH
22237: LD_INT 2
22239: NEG
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 3
22247: PUSH
22248: LD_INT 2
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 2
22257: PUSH
22258: LD_INT 3
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 2
22267: NEG
22268: PUSH
22269: LD_INT 1
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 3
22278: NEG
22279: PUSH
22280: LD_INT 1
22282: NEG
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22313: LD_ADDR_VAR 0 31
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: LD_INT 0
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 0
22330: PUSH
22331: LD_INT 1
22333: NEG
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: LD_INT 0
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 0
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 1
22371: NEG
22372: PUSH
22373: LD_INT 0
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 1
22382: NEG
22383: PUSH
22384: LD_INT 1
22386: NEG
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 1
22394: NEG
22395: PUSH
22396: LD_INT 2
22398: NEG
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 1
22406: PUSH
22407: LD_INT 1
22409: NEG
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 2
22417: PUSH
22418: LD_INT 0
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 2
22427: PUSH
22428: LD_INT 1
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 2
22437: PUSH
22438: LD_INT 2
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 1
22447: PUSH
22448: LD_INT 2
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 0
22457: PUSH
22458: LD_INT 2
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 1
22467: NEG
22468: PUSH
22469: LD_INT 1
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 2
22478: NEG
22479: PUSH
22480: LD_INT 1
22482: NEG
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 2
22490: NEG
22491: PUSH
22492: LD_INT 2
22494: NEG
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 2
22502: NEG
22503: PUSH
22504: LD_INT 3
22506: NEG
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 2
22514: PUSH
22515: LD_INT 1
22517: NEG
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 3
22525: PUSH
22526: LD_INT 1
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: LD_INT 3
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 1
22545: NEG
22546: PUSH
22547: LD_INT 2
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: LD_INT 3
22556: NEG
22557: PUSH
22558: LD_INT 2
22560: NEG
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22591: LD_ADDR_VAR 0 32
22595: PUSH
22596: LD_INT 0
22598: PUSH
22599: LD_INT 0
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 0
22608: PUSH
22609: LD_INT 1
22611: NEG
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 1
22619: PUSH
22620: LD_INT 0
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 1
22629: PUSH
22630: LD_INT 1
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 0
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 1
22649: NEG
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 1
22660: NEG
22661: PUSH
22662: LD_INT 1
22664: NEG
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 1
22672: NEG
22673: PUSH
22674: LD_INT 2
22676: NEG
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 0
22684: PUSH
22685: LD_INT 2
22687: NEG
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: LD_INT 1
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 2
22706: PUSH
22707: LD_INT 1
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 2
22716: PUSH
22717: LD_INT 2
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 1
22726: PUSH
22727: LD_INT 2
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 0
22736: PUSH
22737: LD_INT 2
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 1
22746: NEG
22747: PUSH
22748: LD_INT 1
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 2
22757: NEG
22758: PUSH
22759: LD_INT 0
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 2
22768: NEG
22769: PUSH
22770: LD_INT 1
22772: NEG
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 1
22780: NEG
22781: PUSH
22782: LD_INT 3
22784: NEG
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 1
22792: PUSH
22793: LD_INT 2
22795: NEG
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 3
22803: PUSH
22804: LD_INT 2
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 2
22813: PUSH
22814: LD_INT 3
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 2
22823: NEG
22824: PUSH
22825: LD_INT 1
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 3
22834: NEG
22835: PUSH
22836: LD_INT 1
22838: NEG
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22869: LD_ADDR_VAR 0 33
22873: PUSH
22874: LD_INT 0
22876: PUSH
22877: LD_INT 0
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 0
22886: PUSH
22887: LD_INT 1
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 1
22897: PUSH
22898: LD_INT 0
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 1
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 0
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 1
22927: NEG
22928: PUSH
22929: LD_INT 0
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 1
22938: NEG
22939: PUSH
22940: LD_INT 1
22942: NEG
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 1
22950: NEG
22951: PUSH
22952: LD_INT 2
22954: NEG
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 1
22962: PUSH
22963: LD_INT 1
22965: NEG
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: LD_INT 0
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 2
22983: PUSH
22984: LD_INT 1
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 1
22993: PUSH
22994: LD_INT 2
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 0
23003: PUSH
23004: LD_INT 2
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 1
23013: NEG
23014: PUSH
23015: LD_INT 1
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 2
23024: NEG
23025: PUSH
23026: LD_INT 0
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 2
23035: NEG
23036: PUSH
23037: LD_INT 1
23039: NEG
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 2
23047: NEG
23048: PUSH
23049: LD_INT 2
23051: NEG
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 2
23059: NEG
23060: PUSH
23061: LD_INT 3
23063: NEG
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 2
23071: PUSH
23072: LD_INT 1
23074: NEG
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 3
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 1
23092: PUSH
23093: LD_INT 3
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 1
23102: NEG
23103: PUSH
23104: LD_INT 2
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 3
23113: NEG
23114: PUSH
23115: LD_INT 2
23117: NEG
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23148: LD_ADDR_VAR 0 34
23152: PUSH
23153: LD_INT 0
23155: PUSH
23156: LD_INT 0
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 0
23165: PUSH
23166: LD_INT 1
23168: NEG
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: LD_INT 0
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 0
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 1
23206: NEG
23207: PUSH
23208: LD_INT 0
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 1
23217: NEG
23218: PUSH
23219: LD_INT 1
23221: NEG
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 1
23229: NEG
23230: PUSH
23231: LD_INT 2
23233: NEG
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 0
23241: PUSH
23242: LD_INT 2
23244: NEG
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 1
23252: PUSH
23253: LD_INT 1
23255: NEG
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 2
23263: PUSH
23264: LD_INT 1
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 2
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: LD_INT 2
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 1
23293: NEG
23294: PUSH
23295: LD_INT 1
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 2
23304: NEG
23305: PUSH
23306: LD_INT 0
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 2
23315: NEG
23316: PUSH
23317: LD_INT 1
23319: NEG
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 2
23327: NEG
23328: PUSH
23329: LD_INT 2
23331: NEG
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 1
23339: NEG
23340: PUSH
23341: LD_INT 3
23343: NEG
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: LD_INT 2
23354: NEG
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 3
23362: PUSH
23363: LD_INT 2
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 2
23372: PUSH
23373: LD_INT 3
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 2
23382: NEG
23383: PUSH
23384: LD_INT 1
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 3
23393: NEG
23394: PUSH
23395: LD_INT 1
23397: NEG
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23428: LD_ADDR_VAR 0 35
23432: PUSH
23433: LD_INT 0
23435: PUSH
23436: LD_INT 0
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 0
23445: PUSH
23446: LD_INT 1
23448: NEG
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: PUSH
23457: LD_INT 0
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 1
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 0
23476: PUSH
23477: LD_INT 1
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 1
23486: NEG
23487: PUSH
23488: LD_INT 0
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 1
23497: NEG
23498: PUSH
23499: LD_INT 1
23501: NEG
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 2
23509: PUSH
23510: LD_INT 1
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 2
23519: NEG
23520: PUSH
23521: LD_INT 1
23523: NEG
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23540: LD_ADDR_VAR 0 36
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: LD_INT 0
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 0
23557: PUSH
23558: LD_INT 1
23560: NEG
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 1
23568: PUSH
23569: LD_INT 0
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 1
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 0
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 1
23598: NEG
23599: PUSH
23600: LD_INT 0
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 1
23609: NEG
23610: PUSH
23611: LD_INT 1
23613: NEG
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 1
23621: NEG
23622: PUSH
23623: LD_INT 2
23625: NEG
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: LD_INT 2
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23652: LD_ADDR_VAR 0 37
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: LD_INT 0
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 1
23672: NEG
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 0
23700: PUSH
23701: LD_INT 1
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 1
23710: NEG
23711: PUSH
23712: LD_INT 0
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: LD_INT 1
23725: NEG
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 1
23733: PUSH
23734: LD_INT 1
23736: NEG
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: NEG
23745: PUSH
23746: LD_INT 1
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23764: LD_ADDR_VAR 0 38
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: LD_INT 0
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 0
23781: PUSH
23782: LD_INT 1
23784: NEG
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: PUSH
23793: LD_INT 0
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 1
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 0
23812: PUSH
23813: LD_INT 1
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 1
23822: NEG
23823: PUSH
23824: LD_INT 0
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 1
23833: NEG
23834: PUSH
23835: LD_INT 1
23837: NEG
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 2
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 2
23855: NEG
23856: PUSH
23857: LD_INT 1
23859: NEG
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23876: LD_ADDR_VAR 0 39
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: LD_INT 0
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 0
23893: PUSH
23894: LD_INT 1
23896: NEG
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 1
23904: PUSH
23905: LD_INT 0
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 1
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 0
23924: PUSH
23925: LD_INT 1
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 1
23934: NEG
23935: PUSH
23936: LD_INT 0
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 1
23945: NEG
23946: PUSH
23947: LD_INT 1
23949: NEG
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 1
23957: NEG
23958: PUSH
23959: LD_INT 2
23961: NEG
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: LD_INT 2
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23988: LD_ADDR_VAR 0 40
23992: PUSH
23993: LD_INT 0
23995: PUSH
23996: LD_INT 0
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 0
24005: PUSH
24006: LD_INT 1
24008: NEG
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 0
24036: PUSH
24037: LD_INT 1
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 1
24046: NEG
24047: PUSH
24048: LD_INT 0
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 1
24057: NEG
24058: PUSH
24059: LD_INT 1
24061: NEG
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 1
24069: PUSH
24070: LD_INT 1
24072: NEG
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: NEG
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24100: LD_ADDR_VAR 0 41
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 0
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 0
24117: PUSH
24118: LD_INT 1
24120: NEG
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: LD_INT 0
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 1
24138: PUSH
24139: LD_INT 1
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 0
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 1
24158: NEG
24159: PUSH
24160: LD_INT 0
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 1
24169: NEG
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: LD_INT 2
24185: NEG
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 1
24193: PUSH
24194: LD_INT 1
24196: NEG
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 2
24204: PUSH
24205: LD_INT 0
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 2
24214: PUSH
24215: LD_INT 1
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 2
24224: PUSH
24225: LD_INT 2
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 1
24234: PUSH
24235: LD_INT 2
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: NEG
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 2
24255: NEG
24256: PUSH
24257: LD_INT 0
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 2
24266: NEG
24267: PUSH
24268: LD_INT 1
24270: NEG
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 2
24278: NEG
24279: PUSH
24280: LD_INT 2
24282: NEG
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 2
24290: NEG
24291: PUSH
24292: LD_INT 3
24294: NEG
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 2
24302: PUSH
24303: LD_INT 1
24305: NEG
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 3
24313: PUSH
24314: LD_INT 0
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 3
24323: PUSH
24324: LD_INT 1
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 3
24333: PUSH
24334: LD_INT 2
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 3
24343: PUSH
24344: LD_INT 3
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 2
24353: PUSH
24354: LD_INT 3
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 2
24363: NEG
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 3
24374: NEG
24375: PUSH
24376: LD_INT 0
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 3
24385: NEG
24386: PUSH
24387: LD_INT 1
24389: NEG
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 3
24397: NEG
24398: PUSH
24399: LD_INT 2
24401: NEG
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 3
24409: NEG
24410: PUSH
24411: LD_INT 3
24413: NEG
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24450: LD_ADDR_VAR 0 42
24454: PUSH
24455: LD_INT 0
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 0
24467: PUSH
24468: LD_INT 1
24470: NEG
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: LD_INT 0
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 0
24498: PUSH
24499: LD_INT 1
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 1
24508: NEG
24509: PUSH
24510: LD_INT 0
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 1
24519: NEG
24520: PUSH
24521: LD_INT 1
24523: NEG
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 1
24531: NEG
24532: PUSH
24533: LD_INT 2
24535: NEG
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 0
24543: PUSH
24544: LD_INT 2
24546: NEG
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 1
24554: PUSH
24555: LD_INT 1
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 2
24565: PUSH
24566: LD_INT 1
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 2
24575: PUSH
24576: LD_INT 2
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 1
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 0
24595: PUSH
24596: LD_INT 2
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 1
24605: NEG
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 2
24616: NEG
24617: PUSH
24618: LD_INT 1
24620: NEG
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 2
24628: NEG
24629: PUSH
24630: LD_INT 2
24632: NEG
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 2
24640: NEG
24641: PUSH
24642: LD_INT 3
24644: NEG
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 1
24652: NEG
24653: PUSH
24654: LD_INT 3
24656: NEG
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: LD_INT 3
24667: NEG
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 1
24675: PUSH
24676: LD_INT 2
24678: NEG
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 3
24686: PUSH
24687: LD_INT 2
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 3
24696: PUSH
24697: LD_INT 3
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 2
24706: PUSH
24707: LD_INT 3
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: LD_INT 3
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: LD_INT 3
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 1
24736: NEG
24737: PUSH
24738: LD_INT 2
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 3
24747: NEG
24748: PUSH
24749: LD_INT 2
24751: NEG
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 3
24759: NEG
24760: PUSH
24761: LD_INT 3
24763: NEG
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24800: LD_ADDR_VAR 0 43
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: LD_INT 0
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 0
24817: PUSH
24818: LD_INT 1
24820: NEG
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 1
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 0
24848: PUSH
24849: LD_INT 1
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 1
24858: NEG
24859: PUSH
24860: LD_INT 0
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 1
24869: NEG
24870: PUSH
24871: LD_INT 1
24873: NEG
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 1
24881: NEG
24882: PUSH
24883: LD_INT 2
24885: NEG
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 2
24896: NEG
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: LD_INT 1
24907: NEG
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 2
24915: PUSH
24916: LD_INT 0
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 2
24925: PUSH
24926: LD_INT 1
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 1
24935: PUSH
24936: LD_INT 2
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 0
24945: PUSH
24946: LD_INT 2
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 1
24955: NEG
24956: PUSH
24957: LD_INT 1
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 2
24966: NEG
24967: PUSH
24968: LD_INT 0
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 2
24977: NEG
24978: PUSH
24979: LD_INT 1
24981: NEG
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 1
24989: NEG
24990: PUSH
24991: LD_INT 3
24993: NEG
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 0
25001: PUSH
25002: LD_INT 3
25004: NEG
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 1
25012: PUSH
25013: LD_INT 2
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 2
25023: PUSH
25024: LD_INT 1
25026: NEG
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 3
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 3
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 1
25054: PUSH
25055: LD_INT 3
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 0
25064: PUSH
25065: LD_INT 3
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 1
25074: NEG
25075: PUSH
25076: LD_INT 2
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 2
25085: NEG
25086: PUSH
25087: LD_INT 1
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 3
25096: NEG
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 3
25107: NEG
25108: PUSH
25109: LD_INT 1
25111: NEG
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25148: LD_ADDR_VAR 0 44
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: LD_INT 0
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 0
25165: PUSH
25166: LD_INT 1
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: LD_INT 0
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 1
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 0
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 1
25206: NEG
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 1
25217: NEG
25218: PUSH
25219: LD_INT 1
25221: NEG
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: LD_INT 2
25233: NEG
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: LD_INT 1
25244: NEG
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 2
25252: PUSH
25253: LD_INT 0
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 2
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 2
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: PUSH
25283: LD_INT 2
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: LD_INT 1
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 2
25303: NEG
25304: PUSH
25305: LD_INT 0
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 2
25314: NEG
25315: PUSH
25316: LD_INT 1
25318: NEG
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 2
25326: NEG
25327: PUSH
25328: LD_INT 2
25330: NEG
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 2
25338: NEG
25339: PUSH
25340: LD_INT 3
25342: NEG
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 2
25350: PUSH
25351: LD_INT 1
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 3
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 3
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 3
25381: PUSH
25382: LD_INT 2
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 3
25391: PUSH
25392: LD_INT 3
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 2
25401: PUSH
25402: LD_INT 3
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 2
25411: NEG
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 3
25422: NEG
25423: PUSH
25424: LD_INT 0
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 3
25433: NEG
25434: PUSH
25435: LD_INT 1
25437: NEG
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 3
25445: NEG
25446: PUSH
25447: LD_INT 2
25449: NEG
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 3
25457: NEG
25458: PUSH
25459: LD_INT 3
25461: NEG
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25498: LD_ADDR_VAR 0 45
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: LD_INT 0
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 0
25515: PUSH
25516: LD_INT 1
25518: NEG
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: LD_INT 0
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 1
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 0
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 1
25556: NEG
25557: PUSH
25558: LD_INT 0
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 1
25567: NEG
25568: PUSH
25569: LD_INT 1
25571: NEG
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: NEG
25580: PUSH
25581: LD_INT 2
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 0
25591: PUSH
25592: LD_INT 2
25594: NEG
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: LD_INT 1
25605: NEG
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 2
25613: PUSH
25614: LD_INT 1
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 2
25623: PUSH
25624: LD_INT 2
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 1
25633: PUSH
25634: LD_INT 2
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 0
25643: PUSH
25644: LD_INT 2
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: LD_INT 1
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 2
25664: NEG
25665: PUSH
25666: LD_INT 1
25668: NEG
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 2
25676: NEG
25677: PUSH
25678: LD_INT 2
25680: NEG
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 2
25688: NEG
25689: PUSH
25690: LD_INT 3
25692: NEG
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 1
25700: NEG
25701: PUSH
25702: LD_INT 3
25704: NEG
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: LD_INT 3
25715: NEG
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 1
25723: PUSH
25724: LD_INT 2
25726: NEG
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 3
25734: PUSH
25735: LD_INT 2
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 3
25744: PUSH
25745: LD_INT 3
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 2
25754: PUSH
25755: LD_INT 3
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: LD_INT 3
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 0
25774: PUSH
25775: LD_INT 3
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 1
25784: NEG
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 3
25795: NEG
25796: PUSH
25797: LD_INT 2
25799: NEG
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 3
25807: NEG
25808: PUSH
25809: LD_INT 3
25811: NEG
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25848: LD_ADDR_VAR 0 46
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: LD_INT 0
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 0
25865: PUSH
25866: LD_INT 1
25868: NEG
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: LD_INT 1
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 0
25896: PUSH
25897: LD_INT 1
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 1
25906: NEG
25907: PUSH
25908: LD_INT 0
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 1
25917: NEG
25918: PUSH
25919: LD_INT 1
25921: NEG
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 1
25929: NEG
25930: PUSH
25931: LD_INT 2
25933: NEG
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 0
25941: PUSH
25942: LD_INT 2
25944: NEG
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 1
25952: PUSH
25953: LD_INT 1
25955: NEG
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 2
25963: PUSH
25964: LD_INT 0
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 2
25973: PUSH
25974: LD_INT 1
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: LD_INT 2
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 0
25993: PUSH
25994: LD_INT 2
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 1
26003: NEG
26004: PUSH
26005: LD_INT 1
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 2
26014: NEG
26015: PUSH
26016: LD_INT 0
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 2
26025: NEG
26026: PUSH
26027: LD_INT 1
26029: NEG
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 1
26037: NEG
26038: PUSH
26039: LD_INT 3
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: LD_INT 3
26052: NEG
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 1
26060: PUSH
26061: LD_INT 2
26063: NEG
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 2
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 3
26082: PUSH
26083: LD_INT 0
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 3
26092: PUSH
26093: LD_INT 1
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: LD_INT 3
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: LD_INT 3
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: NEG
26123: PUSH
26124: LD_INT 2
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 2
26133: NEG
26134: PUSH
26135: LD_INT 1
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 3
26144: NEG
26145: PUSH
26146: LD_INT 0
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 3
26155: NEG
26156: PUSH
26157: LD_INT 1
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26196: LD_ADDR_VAR 0 47
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: LD_INT 1
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: LD_INT 0
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 0
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 1
26254: NEG
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 1
26265: NEG
26266: PUSH
26267: LD_INT 1
26269: NEG
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 1
26277: NEG
26278: PUSH
26279: LD_INT 2
26281: NEG
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 0
26289: PUSH
26290: LD_INT 2
26292: NEG
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 1
26300: PUSH
26301: LD_INT 1
26303: NEG
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 2
26311: NEG
26312: PUSH
26313: LD_INT 1
26315: NEG
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 2
26323: NEG
26324: PUSH
26325: LD_INT 2
26327: NEG
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26347: LD_ADDR_VAR 0 48
26351: PUSH
26352: LD_INT 0
26354: PUSH
26355: LD_INT 0
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: LD_INT 1
26367: NEG
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 1
26375: PUSH
26376: LD_INT 0
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 1
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 0
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 1
26405: NEG
26406: PUSH
26407: LD_INT 0
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 1
26416: NEG
26417: PUSH
26418: LD_INT 1
26420: NEG
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 1
26428: NEG
26429: PUSH
26430: LD_INT 2
26432: NEG
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 0
26440: PUSH
26441: LD_INT 2
26443: NEG
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 1
26451: PUSH
26452: LD_INT 1
26454: NEG
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: LD_INT 0
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 2
26472: PUSH
26473: LD_INT 1
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26494: LD_ADDR_VAR 0 49
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: LD_INT 0
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 0
26511: PUSH
26512: LD_INT 1
26514: NEG
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: LD_INT 0
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: LD_INT 1
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 0
26542: PUSH
26543: LD_INT 1
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 1
26552: NEG
26553: PUSH
26554: LD_INT 0
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 1
26563: NEG
26564: PUSH
26565: LD_INT 1
26567: NEG
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 1
26575: PUSH
26576: LD_INT 1
26578: NEG
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 2
26586: PUSH
26587: LD_INT 0
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 2
26596: PUSH
26597: LD_INT 1
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 2
26606: PUSH
26607: LD_INT 2
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 1
26616: PUSH
26617: LD_INT 2
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26638: LD_ADDR_VAR 0 50
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 0
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: LD_INT 1
26658: NEG
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 1
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 0
26686: PUSH
26687: LD_INT 1
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: NEG
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: LD_INT 1
26711: NEG
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 2
26729: PUSH
26730: LD_INT 2
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 1
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: LD_INT 2
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 1
26759: NEG
26760: PUSH
26761: LD_INT 1
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26782: LD_ADDR_VAR 0 51
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: LD_INT 0
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: LD_INT 1
26802: NEG
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 1
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: LD_INT 1
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: NEG
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 1
26851: NEG
26852: PUSH
26853: LD_INT 1
26855: NEG
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 1
26863: PUSH
26864: LD_INT 2
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 0
26873: PUSH
26874: LD_INT 2
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 1
26883: NEG
26884: PUSH
26885: LD_INT 1
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 2
26894: NEG
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: NEG
26906: PUSH
26907: LD_INT 1
26909: NEG
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26929: LD_ADDR_VAR 0 52
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: LD_INT 0
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 0
26946: PUSH
26947: LD_INT 1
26949: NEG
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: LD_INT 0
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 0
26977: PUSH
26978: LD_INT 1
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 1
26987: NEG
26988: PUSH
26989: LD_INT 0
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 1
26998: NEG
26999: PUSH
27000: LD_INT 1
27002: NEG
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 1
27010: NEG
27011: PUSH
27012: LD_INT 2
27014: NEG
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 1
27022: NEG
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 2
27033: NEG
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 2
27044: NEG
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 2
27056: NEG
27057: PUSH
27058: LD_INT 2
27060: NEG
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27080: LD_ADDR_VAR 0 53
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 0
27097: PUSH
27098: LD_INT 1
27100: NEG
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: LD_INT 0
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 1
27149: NEG
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: PUSH
27163: LD_INT 2
27165: NEG
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: LD_INT 2
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 1
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 2
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 2
27205: PUSH
27206: LD_INT 1
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 2
27215: PUSH
27216: LD_INT 2
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 1
27225: PUSH
27226: LD_INT 2
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 0
27235: PUSH
27236: LD_INT 2
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 1
27245: NEG
27246: PUSH
27247: LD_INT 1
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 2
27256: NEG
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 2
27267: NEG
27268: PUSH
27269: LD_INT 1
27271: NEG
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 2
27279: NEG
27280: PUSH
27281: LD_INT 2
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27310: LD_ADDR_VAR 0 54
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 0
27327: PUSH
27328: LD_INT 1
27330: NEG
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 1
27348: PUSH
27349: LD_INT 1
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 0
27358: PUSH
27359: LD_INT 1
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 1
27368: NEG
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 1
27379: NEG
27380: PUSH
27381: LD_INT 1
27383: NEG
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 1
27391: NEG
27392: PUSH
27393: LD_INT 2
27395: NEG
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: LD_INT 2
27406: NEG
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 2
27425: PUSH
27426: LD_INT 0
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 2
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 2
27445: PUSH
27446: LD_INT 2
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: PUSH
27456: LD_INT 2
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: LD_INT 2
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 1
27475: NEG
27476: PUSH
27477: LD_INT 1
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 2
27486: NEG
27487: PUSH
27488: LD_INT 0
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 2
27497: NEG
27498: PUSH
27499: LD_INT 1
27501: NEG
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 2
27509: NEG
27510: PUSH
27511: LD_INT 2
27513: NEG
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27540: LD_ADDR_VAR 0 55
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: LD_INT 0
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: LD_INT 1
27560: NEG
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 1
27568: PUSH
27569: LD_INT 0
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 0
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 1
27598: NEG
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: NEG
27610: PUSH
27611: LD_INT 1
27613: NEG
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 1
27621: NEG
27622: PUSH
27623: LD_INT 2
27625: NEG
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: LD_INT 2
27636: NEG
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 1
27644: PUSH
27645: LD_INT 1
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 2
27655: PUSH
27656: LD_INT 0
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 2
27665: PUSH
27666: LD_INT 1
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 2
27675: PUSH
27676: LD_INT 2
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 1
27685: PUSH
27686: LD_INT 2
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 0
27695: PUSH
27696: LD_INT 2
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 1
27705: NEG
27706: PUSH
27707: LD_INT 1
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 2
27716: NEG
27717: PUSH
27718: LD_INT 0
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 2
27727: NEG
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 2
27739: NEG
27740: PUSH
27741: LD_INT 2
27743: NEG
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27770: LD_ADDR_VAR 0 56
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: LD_INT 0
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 0
27787: PUSH
27788: LD_INT 1
27790: NEG
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: LD_INT 0
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 1
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 0
27818: PUSH
27819: LD_INT 1
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 1
27828: NEG
27829: PUSH
27830: LD_INT 0
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: NEG
27840: PUSH
27841: LD_INT 1
27843: NEG
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 1
27851: NEG
27852: PUSH
27853: LD_INT 2
27855: NEG
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: LD_INT 2
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 1
27874: PUSH
27875: LD_INT 1
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 2
27885: PUSH
27886: LD_INT 0
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 2
27895: PUSH
27896: LD_INT 1
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 2
27905: PUSH
27906: LD_INT 2
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 1
27915: PUSH
27916: LD_INT 2
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 0
27925: PUSH
27926: LD_INT 2
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 1
27935: NEG
27936: PUSH
27937: LD_INT 1
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 2
27946: NEG
27947: PUSH
27948: LD_INT 0
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 2
27957: NEG
27958: PUSH
27959: LD_INT 1
27961: NEG
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 2
27969: NEG
27970: PUSH
27971: LD_INT 2
27973: NEG
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28000: LD_ADDR_VAR 0 57
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: LD_INT 0
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 0
28017: PUSH
28018: LD_INT 1
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 1
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 0
28048: PUSH
28049: LD_INT 1
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 1
28058: NEG
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: LD_INT 1
28073: NEG
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 1
28081: NEG
28082: PUSH
28083: LD_INT 2
28085: NEG
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: LD_INT 2
28096: NEG
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: LD_INT 1
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 2
28115: PUSH
28116: LD_INT 0
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 2
28125: PUSH
28126: LD_INT 1
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 2
28135: PUSH
28136: LD_INT 2
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 1
28145: PUSH
28146: LD_INT 2
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 0
28155: PUSH
28156: LD_INT 2
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 1
28165: NEG
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 2
28176: NEG
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 2
28187: NEG
28188: PUSH
28189: LD_INT 1
28191: NEG
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 2
28199: NEG
28200: PUSH
28201: LD_INT 2
28203: NEG
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28230: LD_ADDR_VAR 0 58
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: LD_INT 0
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: LD_INT 1
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: LD_INT 1
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 1
28288: NEG
28289: PUSH
28290: LD_INT 0
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 1
28299: NEG
28300: PUSH
28301: LD_INT 1
28303: NEG
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: LD_INT 2
28315: NEG
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 0
28323: PUSH
28324: LD_INT 2
28326: NEG
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 1
28334: PUSH
28335: LD_INT 1
28337: NEG
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 2
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 2
28355: PUSH
28356: LD_INT 1
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 2
28365: PUSH
28366: LD_INT 2
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 1
28375: PUSH
28376: LD_INT 2
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 0
28385: PUSH
28386: LD_INT 2
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: LD_INT 1
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 2
28406: NEG
28407: PUSH
28408: LD_INT 0
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 2
28417: NEG
28418: PUSH
28419: LD_INT 1
28421: NEG
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 2
28429: NEG
28430: PUSH
28431: LD_INT 2
28433: NEG
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28460: LD_ADDR_VAR 0 59
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: LD_INT 0
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 0
28477: PUSH
28478: LD_INT 1
28480: NEG
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 1
28498: PUSH
28499: LD_INT 1
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 0
28508: PUSH
28509: LD_INT 1
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 1
28518: NEG
28519: PUSH
28520: LD_INT 0
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 1
28529: NEG
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28548: LD_ADDR_VAR 0 60
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: LD_INT 0
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: LD_INT 1
28568: NEG
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 1
28576: PUSH
28577: LD_INT 0
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 1
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 0
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 1
28606: NEG
28607: PUSH
28608: LD_INT 0
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 1
28617: NEG
28618: PUSH
28619: LD_INT 1
28621: NEG
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28636: LD_ADDR_VAR 0 61
28640: PUSH
28641: LD_INT 0
28643: PUSH
28644: LD_INT 0
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 1
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 1
28694: NEG
28695: PUSH
28696: LD_INT 0
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 1
28705: NEG
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28724: LD_ADDR_VAR 0 62
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: LD_INT 0
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 0
28741: PUSH
28742: LD_INT 1
28744: NEG
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 0
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 1
28782: NEG
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 1
28793: NEG
28794: PUSH
28795: LD_INT 1
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28812: LD_ADDR_VAR 0 63
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: LD_INT 0
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 0
28829: PUSH
28830: LD_INT 1
28832: NEG
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 1
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 1
28850: PUSH
28851: LD_INT 1
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 1
28870: NEG
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 1
28881: NEG
28882: PUSH
28883: LD_INT 1
28885: NEG
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28900: LD_ADDR_VAR 0 64
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: LD_INT 0
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: LD_INT 1
28920: NEG
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 1
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 1
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: LD_INT 1
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 1
28958: NEG
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 1
28969: NEG
28970: PUSH
28971: LD_INT 1
28973: NEG
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: ST_TO_ADDR
// end ; 1 :
28988: GO 34885
28990: LD_INT 1
28992: DOUBLE
28993: EQUAL
28994: IFTRUE 28998
28996: GO 31621
28998: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28999: LD_ADDR_VAR 0 11
29003: PUSH
29004: LD_INT 1
29006: NEG
29007: PUSH
29008: LD_INT 3
29010: NEG
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: LD_INT 3
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: LD_INT 2
29032: NEG
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: LIST
29042: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29043: LD_ADDR_VAR 0 12
29047: PUSH
29048: LD_INT 2
29050: PUSH
29051: LD_INT 1
29053: NEG
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 3
29061: PUSH
29062: LD_INT 0
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 3
29071: PUSH
29072: LD_INT 1
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: LIST
29083: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29084: LD_ADDR_VAR 0 13
29088: PUSH
29089: LD_INT 3
29091: PUSH
29092: LD_INT 2
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 3
29101: PUSH
29102: LD_INT 3
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 2
29111: PUSH
29112: LD_INT 3
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: LIST
29123: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29124: LD_ADDR_VAR 0 14
29128: PUSH
29129: LD_INT 1
29131: PUSH
29132: LD_INT 3
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: LD_INT 3
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 1
29151: NEG
29152: PUSH
29153: LD_INT 2
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: LIST
29164: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29165: LD_ADDR_VAR 0 15
29169: PUSH
29170: LD_INT 2
29172: NEG
29173: PUSH
29174: LD_INT 1
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 3
29183: NEG
29184: PUSH
29185: LD_INT 0
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 3
29194: NEG
29195: PUSH
29196: LD_INT 1
29198: NEG
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: LIST
29208: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29209: LD_ADDR_VAR 0 16
29213: PUSH
29214: LD_INT 2
29216: NEG
29217: PUSH
29218: LD_INT 3
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 3
29228: NEG
29229: PUSH
29230: LD_INT 2
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 3
29240: NEG
29241: PUSH
29242: LD_INT 3
29244: NEG
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: LIST
29254: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29255: LD_ADDR_VAR 0 17
29259: PUSH
29260: LD_INT 1
29262: NEG
29263: PUSH
29264: LD_INT 3
29266: NEG
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: LD_INT 3
29277: NEG
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 1
29285: PUSH
29286: LD_INT 2
29288: NEG
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: LIST
29298: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29299: LD_ADDR_VAR 0 18
29303: PUSH
29304: LD_INT 2
29306: PUSH
29307: LD_INT 1
29309: NEG
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 3
29317: PUSH
29318: LD_INT 0
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 3
29327: PUSH
29328: LD_INT 1
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: LIST
29339: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29340: LD_ADDR_VAR 0 19
29344: PUSH
29345: LD_INT 3
29347: PUSH
29348: LD_INT 2
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 3
29357: PUSH
29358: LD_INT 3
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 2
29367: PUSH
29368: LD_INT 3
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: LIST
29379: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29380: LD_ADDR_VAR 0 20
29384: PUSH
29385: LD_INT 1
29387: PUSH
29388: LD_INT 3
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 0
29397: PUSH
29398: LD_INT 3
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 1
29407: NEG
29408: PUSH
29409: LD_INT 2
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: LIST
29420: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29421: LD_ADDR_VAR 0 21
29425: PUSH
29426: LD_INT 2
29428: NEG
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 3
29439: NEG
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 3
29450: NEG
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: LIST
29464: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29465: LD_ADDR_VAR 0 22
29469: PUSH
29470: LD_INT 2
29472: NEG
29473: PUSH
29474: LD_INT 3
29476: NEG
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 3
29484: NEG
29485: PUSH
29486: LD_INT 2
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 3
29496: NEG
29497: PUSH
29498: LD_INT 3
29500: NEG
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: LIST
29510: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29511: LD_ADDR_VAR 0 23
29515: PUSH
29516: LD_INT 0
29518: PUSH
29519: LD_INT 3
29521: NEG
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 1
29529: NEG
29530: PUSH
29531: LD_INT 4
29533: NEG
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 1
29541: PUSH
29542: LD_INT 3
29544: NEG
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29555: LD_ADDR_VAR 0 24
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: LD_INT 0
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 3
29572: PUSH
29573: LD_INT 1
29575: NEG
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 4
29583: PUSH
29584: LD_INT 1
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: LIST
29595: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29596: LD_ADDR_VAR 0 25
29600: PUSH
29601: LD_INT 3
29603: PUSH
29604: LD_INT 3
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 4
29613: PUSH
29614: LD_INT 3
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: LD_INT 4
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: LIST
29635: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29636: LD_ADDR_VAR 0 26
29640: PUSH
29641: LD_INT 0
29643: PUSH
29644: LD_INT 3
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: PUSH
29654: LD_INT 4
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 1
29663: NEG
29664: PUSH
29665: LD_INT 3
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: LIST
29676: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29677: LD_ADDR_VAR 0 27
29681: PUSH
29682: LD_INT 3
29684: NEG
29685: PUSH
29686: LD_INT 0
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 3
29695: NEG
29696: PUSH
29697: LD_INT 1
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 4
29706: NEG
29707: PUSH
29708: LD_INT 1
29710: NEG
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: LIST
29720: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29721: LD_ADDR_VAR 0 28
29725: PUSH
29726: LD_INT 3
29728: NEG
29729: PUSH
29730: LD_INT 3
29732: NEG
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 3
29740: NEG
29741: PUSH
29742: LD_INT 4
29744: NEG
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 4
29752: NEG
29753: PUSH
29754: LD_INT 3
29756: NEG
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: LIST
29766: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29767: LD_ADDR_VAR 0 29
29771: PUSH
29772: LD_INT 1
29774: NEG
29775: PUSH
29776: LD_INT 3
29778: NEG
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 0
29786: PUSH
29787: LD_INT 3
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 1
29797: PUSH
29798: LD_INT 2
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: NEG
29809: PUSH
29810: LD_INT 4
29812: NEG
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 0
29820: PUSH
29821: LD_INT 4
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: LD_INT 3
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 1
29842: NEG
29843: PUSH
29844: LD_INT 5
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: LD_INT 5
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 1
29865: PUSH
29866: LD_INT 4
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: NEG
29877: PUSH
29878: LD_INT 6
29880: NEG
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: LD_INT 6
29891: NEG
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: LD_INT 5
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29922: LD_ADDR_VAR 0 30
29926: PUSH
29927: LD_INT 2
29929: PUSH
29930: LD_INT 1
29932: NEG
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 3
29940: PUSH
29941: LD_INT 0
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 3
29950: PUSH
29951: LD_INT 1
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 3
29960: PUSH
29961: LD_INT 1
29963: NEG
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 4
29971: PUSH
29972: LD_INT 0
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 4
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 4
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 5
30002: PUSH
30003: LD_INT 0
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 5
30012: PUSH
30013: LD_INT 1
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 5
30022: PUSH
30023: LD_INT 1
30025: NEG
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 6
30033: PUSH
30034: LD_INT 0
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 6
30043: PUSH
30044: LD_INT 1
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30065: LD_ADDR_VAR 0 31
30069: PUSH
30070: LD_INT 3
30072: PUSH
30073: LD_INT 2
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 3
30082: PUSH
30083: LD_INT 3
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 2
30092: PUSH
30093: LD_INT 3
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 4
30102: PUSH
30103: LD_INT 3
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 4
30112: PUSH
30113: LD_INT 4
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 3
30122: PUSH
30123: LD_INT 4
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 5
30132: PUSH
30133: LD_INT 4
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 5
30142: PUSH
30143: LD_INT 5
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 4
30152: PUSH
30153: LD_INT 5
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 6
30162: PUSH
30163: LD_INT 5
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 6
30172: PUSH
30173: LD_INT 6
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 5
30182: PUSH
30183: LD_INT 6
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30204: LD_ADDR_VAR 0 32
30208: PUSH
30209: LD_INT 1
30211: PUSH
30212: LD_INT 3
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 0
30221: PUSH
30222: LD_INT 3
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 1
30231: NEG
30232: PUSH
30233: LD_INT 2
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 1
30242: PUSH
30243: LD_INT 4
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: LD_INT 4
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 1
30262: NEG
30263: PUSH
30264: LD_INT 3
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: LD_INT 5
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: LD_INT 5
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 1
30293: NEG
30294: PUSH
30295: LD_INT 4
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: LD_INT 6
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: LD_INT 6
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: LD_INT 5
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30347: LD_ADDR_VAR 0 33
30351: PUSH
30352: LD_INT 2
30354: NEG
30355: PUSH
30356: LD_INT 1
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 3
30365: NEG
30366: PUSH
30367: LD_INT 0
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 3
30376: NEG
30377: PUSH
30378: LD_INT 1
30380: NEG
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 3
30388: NEG
30389: PUSH
30390: LD_INT 1
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 4
30399: NEG
30400: PUSH
30401: LD_INT 0
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 4
30410: NEG
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 4
30422: NEG
30423: PUSH
30424: LD_INT 1
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 5
30433: NEG
30434: PUSH
30435: LD_INT 0
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 5
30444: NEG
30445: PUSH
30446: LD_INT 1
30448: NEG
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 5
30456: NEG
30457: PUSH
30458: LD_INT 1
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 6
30467: NEG
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 6
30478: NEG
30479: PUSH
30480: LD_INT 1
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30502: LD_ADDR_VAR 0 34
30506: PUSH
30507: LD_INT 2
30509: NEG
30510: PUSH
30511: LD_INT 3
30513: NEG
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 3
30521: NEG
30522: PUSH
30523: LD_INT 2
30525: NEG
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 3
30533: NEG
30534: PUSH
30535: LD_INT 3
30537: NEG
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 3
30545: NEG
30546: PUSH
30547: LD_INT 4
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 4
30557: NEG
30558: PUSH
30559: LD_INT 3
30561: NEG
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 4
30569: NEG
30570: PUSH
30571: LD_INT 4
30573: NEG
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 4
30581: NEG
30582: PUSH
30583: LD_INT 5
30585: NEG
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 5
30593: NEG
30594: PUSH
30595: LD_INT 4
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 5
30605: NEG
30606: PUSH
30607: LD_INT 5
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 5
30617: NEG
30618: PUSH
30619: LD_INT 6
30621: NEG
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 6
30629: NEG
30630: PUSH
30631: LD_INT 5
30633: NEG
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 6
30641: NEG
30642: PUSH
30643: LD_INT 6
30645: NEG
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30665: LD_ADDR_VAR 0 41
30669: PUSH
30670: LD_INT 0
30672: PUSH
30673: LD_INT 2
30675: NEG
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 1
30683: NEG
30684: PUSH
30685: LD_INT 3
30687: NEG
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 1
30695: PUSH
30696: LD_INT 2
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: LIST
30708: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30709: LD_ADDR_VAR 0 42
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: LD_INT 0
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 2
30726: PUSH
30727: LD_INT 1
30729: NEG
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 3
30737: PUSH
30738: LD_INT 1
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: LIST
30749: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30750: LD_ADDR_VAR 0 43
30754: PUSH
30755: LD_INT 2
30757: PUSH
30758: LD_INT 2
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 3
30767: PUSH
30768: LD_INT 2
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 2
30777: PUSH
30778: LD_INT 3
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: LIST
30789: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30790: LD_ADDR_VAR 0 44
30794: PUSH
30795: LD_INT 0
30797: PUSH
30798: LD_INT 2
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 1
30807: PUSH
30808: LD_INT 3
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 1
30817: NEG
30818: PUSH
30819: LD_INT 2
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: LIST
30830: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30831: LD_ADDR_VAR 0 45
30835: PUSH
30836: LD_INT 2
30838: NEG
30839: PUSH
30840: LD_INT 0
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 2
30849: NEG
30850: PUSH
30851: LD_INT 1
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 3
30860: NEG
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: LIST
30874: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30875: LD_ADDR_VAR 0 46
30879: PUSH
30880: LD_INT 2
30882: NEG
30883: PUSH
30884: LD_INT 2
30886: NEG
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 2
30894: NEG
30895: PUSH
30896: LD_INT 3
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 3
30906: NEG
30907: PUSH
30908: LD_INT 2
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: LIST
30920: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30921: LD_ADDR_VAR 0 47
30925: PUSH
30926: LD_INT 2
30928: NEG
30929: PUSH
30930: LD_INT 3
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 1
30940: NEG
30941: PUSH
30942: LD_INT 3
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30954: LD_ADDR_VAR 0 48
30958: PUSH
30959: LD_INT 1
30961: PUSH
30962: LD_INT 2
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 2
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30985: LD_ADDR_VAR 0 49
30989: PUSH
30990: LD_INT 3
30992: PUSH
30993: LD_INT 1
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 3
31002: PUSH
31003: LD_INT 2
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31014: LD_ADDR_VAR 0 50
31018: PUSH
31019: LD_INT 2
31021: PUSH
31022: LD_INT 3
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 1
31031: PUSH
31032: LD_INT 3
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31043: LD_ADDR_VAR 0 51
31047: PUSH
31048: LD_INT 1
31050: NEG
31051: PUSH
31052: LD_INT 2
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 2
31061: NEG
31062: PUSH
31063: LD_INT 1
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31074: LD_ADDR_VAR 0 52
31078: PUSH
31079: LD_INT 3
31081: NEG
31082: PUSH
31083: LD_INT 1
31085: NEG
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 3
31093: NEG
31094: PUSH
31095: LD_INT 2
31097: NEG
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31107: LD_ADDR_VAR 0 53
31111: PUSH
31112: LD_INT 1
31114: NEG
31115: PUSH
31116: LD_INT 3
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 0
31126: PUSH
31127: LD_INT 3
31129: NEG
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 1
31137: PUSH
31138: LD_INT 2
31140: NEG
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: LIST
31150: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31151: LD_ADDR_VAR 0 54
31155: PUSH
31156: LD_INT 2
31158: PUSH
31159: LD_INT 1
31161: NEG
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 3
31169: PUSH
31170: LD_INT 0
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 3
31179: PUSH
31180: LD_INT 1
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: LIST
31191: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31192: LD_ADDR_VAR 0 55
31196: PUSH
31197: LD_INT 3
31199: PUSH
31200: LD_INT 2
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 3
31209: PUSH
31210: LD_INT 3
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 2
31219: PUSH
31220: LD_INT 3
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: LIST
31231: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31232: LD_ADDR_VAR 0 56
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: LD_INT 3
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 0
31249: PUSH
31250: LD_INT 3
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: LD_INT 2
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: LIST
31272: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31273: LD_ADDR_VAR 0 57
31277: PUSH
31278: LD_INT 2
31280: NEG
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 3
31291: NEG
31292: PUSH
31293: LD_INT 0
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 3
31302: NEG
31303: PUSH
31304: LD_INT 1
31306: NEG
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: LIST
31316: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31317: LD_ADDR_VAR 0 58
31321: PUSH
31322: LD_INT 2
31324: NEG
31325: PUSH
31326: LD_INT 3
31328: NEG
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 3
31336: NEG
31337: PUSH
31338: LD_INT 2
31340: NEG
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 3
31348: NEG
31349: PUSH
31350: LD_INT 3
31352: NEG
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: LIST
31362: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31363: LD_ADDR_VAR 0 59
31367: PUSH
31368: LD_INT 1
31370: NEG
31371: PUSH
31372: LD_INT 2
31374: NEG
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: LD_INT 2
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 1
31393: PUSH
31394: LD_INT 1
31396: NEG
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: LIST
31406: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31407: LD_ADDR_VAR 0 60
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: LD_INT 1
31417: NEG
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 2
31425: PUSH
31426: LD_INT 0
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 2
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: LIST
31447: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31448: LD_ADDR_VAR 0 61
31452: PUSH
31453: LD_INT 2
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 2
31465: PUSH
31466: LD_INT 2
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 1
31475: PUSH
31476: LD_INT 2
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: LIST
31487: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31488: LD_ADDR_VAR 0 62
31492: PUSH
31493: LD_INT 1
31495: PUSH
31496: LD_INT 2
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 0
31505: PUSH
31506: LD_INT 2
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 1
31515: NEG
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: LIST
31528: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31529: LD_ADDR_VAR 0 63
31533: PUSH
31534: LD_INT 1
31536: NEG
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 2
31547: NEG
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 2
31558: NEG
31559: PUSH
31560: LD_INT 1
31562: NEG
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: LIST
31572: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31573: LD_ADDR_VAR 0 64
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: LD_INT 2
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: LD_INT 1
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 2
31604: NEG
31605: PUSH
31606: LD_INT 2
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: LIST
31618: ST_TO_ADDR
// end ; 2 :
31619: GO 34885
31621: LD_INT 2
31623: DOUBLE
31624: EQUAL
31625: IFTRUE 31629
31627: GO 34884
31629: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31630: LD_ADDR_VAR 0 29
31634: PUSH
31635: LD_INT 4
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 4
31647: PUSH
31648: LD_INT 1
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 5
31658: PUSH
31659: LD_INT 0
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 5
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 4
31678: PUSH
31679: LD_INT 1
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 3
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 3
31698: PUSH
31699: LD_INT 1
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 3
31709: PUSH
31710: LD_INT 2
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 5
31720: PUSH
31721: LD_INT 2
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 3
31730: PUSH
31731: LD_INT 3
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 3
31740: PUSH
31741: LD_INT 2
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 4
31750: PUSH
31751: LD_INT 3
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 4
31760: PUSH
31761: LD_INT 4
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 3
31770: PUSH
31771: LD_INT 4
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 2
31780: PUSH
31781: LD_INT 3
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 2
31790: PUSH
31791: LD_INT 2
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 4
31800: PUSH
31801: LD_INT 2
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 2
31810: PUSH
31811: LD_INT 4
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 0
31820: PUSH
31821: LD_INT 4
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 0
31830: PUSH
31831: LD_INT 3
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: LD_INT 4
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 1
31850: PUSH
31851: LD_INT 5
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 0
31860: PUSH
31861: LD_INT 5
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 1
31870: NEG
31871: PUSH
31872: LD_INT 4
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 1
31881: NEG
31882: PUSH
31883: LD_INT 3
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 2
31892: PUSH
31893: LD_INT 5
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 2
31902: NEG
31903: PUSH
31904: LD_INT 3
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 3
31913: NEG
31914: PUSH
31915: LD_INT 0
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 3
31924: NEG
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 2
31936: NEG
31937: PUSH
31938: LD_INT 0
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 2
31947: NEG
31948: PUSH
31949: LD_INT 1
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 3
31958: NEG
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 4
31969: NEG
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 4
31980: NEG
31981: PUSH
31982: LD_INT 1
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 4
31992: NEG
31993: PUSH
31994: LD_INT 2
31996: NEG
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 2
32004: NEG
32005: PUSH
32006: LD_INT 2
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 4
32015: NEG
32016: PUSH
32017: LD_INT 4
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 4
32027: NEG
32028: PUSH
32029: LD_INT 5
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 3
32039: NEG
32040: PUSH
32041: LD_INT 4
32043: NEG
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 3
32051: NEG
32052: PUSH
32053: LD_INT 3
32055: NEG
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 4
32063: NEG
32064: PUSH
32065: LD_INT 3
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 5
32075: NEG
32076: PUSH
32077: LD_INT 4
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 5
32087: NEG
32088: PUSH
32089: LD_INT 5
32091: NEG
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 3
32099: NEG
32100: PUSH
32101: LD_INT 5
32103: NEG
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 5
32111: NEG
32112: PUSH
32113: LD_INT 3
32115: NEG
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32168: LD_ADDR_VAR 0 30
32172: PUSH
32173: LD_INT 4
32175: PUSH
32176: LD_INT 4
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 4
32185: PUSH
32186: LD_INT 3
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 5
32195: PUSH
32196: LD_INT 4
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 5
32205: PUSH
32206: LD_INT 5
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 4
32215: PUSH
32216: LD_INT 5
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 3
32225: PUSH
32226: LD_INT 4
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 3
32235: PUSH
32236: LD_INT 3
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 5
32245: PUSH
32246: LD_INT 3
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 3
32255: PUSH
32256: LD_INT 5
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 0
32265: PUSH
32266: LD_INT 3
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 0
32275: PUSH
32276: LD_INT 2
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: LD_INT 3
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 1
32295: PUSH
32296: LD_INT 4
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 0
32305: PUSH
32306: LD_INT 4
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: LD_INT 3
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: NEG
32327: PUSH
32328: LD_INT 2
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 2
32337: PUSH
32338: LD_INT 4
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 2
32347: NEG
32348: PUSH
32349: LD_INT 2
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 4
32358: NEG
32359: PUSH
32360: LD_INT 0
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 4
32369: NEG
32370: PUSH
32371: LD_INT 1
32373: NEG
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 3
32381: NEG
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 3
32392: NEG
32393: PUSH
32394: LD_INT 1
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 4
32403: NEG
32404: PUSH
32405: LD_INT 1
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 5
32414: NEG
32415: PUSH
32416: LD_INT 0
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 5
32425: NEG
32426: PUSH
32427: LD_INT 1
32429: NEG
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 5
32437: NEG
32438: PUSH
32439: LD_INT 2
32441: NEG
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 3
32449: NEG
32450: PUSH
32451: LD_INT 2
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 3
32460: NEG
32461: PUSH
32462: LD_INT 3
32464: NEG
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 3
32472: NEG
32473: PUSH
32474: LD_INT 4
32476: NEG
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 2
32484: NEG
32485: PUSH
32486: LD_INT 3
32488: NEG
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 2
32496: NEG
32497: PUSH
32498: LD_INT 2
32500: NEG
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 3
32508: NEG
32509: PUSH
32510: LD_INT 2
32512: NEG
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 4
32520: NEG
32521: PUSH
32522: LD_INT 3
32524: NEG
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 4
32532: NEG
32533: PUSH
32534: LD_INT 4
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 2
32544: NEG
32545: PUSH
32546: LD_INT 4
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 4
32556: NEG
32557: PUSH
32558: LD_INT 2
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 0
32568: PUSH
32569: LD_INT 4
32571: NEG
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: LD_INT 5
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: PUSH
32591: LD_INT 4
32593: NEG
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: LD_INT 3
32604: NEG
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 0
32612: PUSH
32613: LD_INT 3
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 1
32623: NEG
32624: PUSH
32625: LD_INT 4
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 1
32635: NEG
32636: PUSH
32637: LD_INT 5
32639: NEG
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 2
32647: PUSH
32648: LD_INT 3
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 2
32658: NEG
32659: PUSH
32660: LD_INT 5
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32715: LD_ADDR_VAR 0 31
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: LD_INT 4
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: LD_INT 3
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: LD_INT 4
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 1
32752: PUSH
32753: LD_INT 5
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 0
32762: PUSH
32763: LD_INT 5
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 1
32772: NEG
32773: PUSH
32774: LD_INT 4
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 1
32783: NEG
32784: PUSH
32785: LD_INT 3
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 2
32794: PUSH
32795: LD_INT 5
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 2
32804: NEG
32805: PUSH
32806: LD_INT 3
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 3
32815: NEG
32816: PUSH
32817: LD_INT 0
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 3
32826: NEG
32827: PUSH
32828: LD_INT 1
32830: NEG
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 2
32838: NEG
32839: PUSH
32840: LD_INT 0
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 2
32849: NEG
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 3
32860: NEG
32861: PUSH
32862: LD_INT 1
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 4
32871: NEG
32872: PUSH
32873: LD_INT 0
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 4
32882: NEG
32883: PUSH
32884: LD_INT 1
32886: NEG
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 4
32894: NEG
32895: PUSH
32896: LD_INT 2
32898: NEG
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 2
32906: NEG
32907: PUSH
32908: LD_INT 2
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 4
32917: NEG
32918: PUSH
32919: LD_INT 4
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 4
32929: NEG
32930: PUSH
32931: LD_INT 5
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 3
32941: NEG
32942: PUSH
32943: LD_INT 4
32945: NEG
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 3
32953: NEG
32954: PUSH
32955: LD_INT 3
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 4
32965: NEG
32966: PUSH
32967: LD_INT 3
32969: NEG
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 5
32977: NEG
32978: PUSH
32979: LD_INT 4
32981: NEG
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 5
32989: NEG
32990: PUSH
32991: LD_INT 5
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 3
33001: NEG
33002: PUSH
33003: LD_INT 5
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 5
33013: NEG
33014: PUSH
33015: LD_INT 3
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: LD_INT 3
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: LD_INT 4
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: PUSH
33048: LD_INT 3
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 1
33058: PUSH
33059: LD_INT 2
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: LD_INT 2
33072: NEG
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: LD_INT 3
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: LD_INT 4
33096: NEG
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 2
33104: PUSH
33105: LD_INT 2
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 2
33115: NEG
33116: PUSH
33117: LD_INT 4
33119: NEG
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 4
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 4
33137: PUSH
33138: LD_INT 1
33140: NEG
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 5
33148: PUSH
33149: LD_INT 0
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 5
33158: PUSH
33159: LD_INT 1
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 4
33168: PUSH
33169: LD_INT 1
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 3
33178: PUSH
33179: LD_INT 0
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 3
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 3
33199: PUSH
33200: LD_INT 2
33202: NEG
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 5
33210: PUSH
33211: LD_INT 2
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33265: LD_ADDR_VAR 0 32
33269: PUSH
33270: LD_INT 4
33272: NEG
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 4
33283: NEG
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 3
33295: NEG
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 3
33306: NEG
33307: PUSH
33308: LD_INT 1
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 4
33317: NEG
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 5
33328: NEG
33329: PUSH
33330: LD_INT 0
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 5
33339: NEG
33340: PUSH
33341: LD_INT 1
33343: NEG
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 5
33351: NEG
33352: PUSH
33353: LD_INT 2
33355: NEG
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 3
33363: NEG
33364: PUSH
33365: LD_INT 2
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 3
33374: NEG
33375: PUSH
33376: LD_INT 3
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 3
33386: NEG
33387: PUSH
33388: LD_INT 4
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 2
33398: NEG
33399: PUSH
33400: LD_INT 3
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: LD_INT 2
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 3
33422: NEG
33423: PUSH
33424: LD_INT 2
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 4
33434: NEG
33435: PUSH
33436: LD_INT 3
33438: NEG
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 4
33446: NEG
33447: PUSH
33448: LD_INT 4
33450: NEG
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 2
33458: NEG
33459: PUSH
33460: LD_INT 4
33462: NEG
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 4
33470: NEG
33471: PUSH
33472: LD_INT 2
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: LD_INT 4
33485: NEG
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 0
33493: PUSH
33494: LD_INT 5
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 1
33504: PUSH
33505: LD_INT 4
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: LD_INT 3
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 0
33526: PUSH
33527: LD_INT 3
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 1
33537: NEG
33538: PUSH
33539: LD_INT 4
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 1
33549: NEG
33550: PUSH
33551: LD_INT 5
33553: NEG
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 2
33561: PUSH
33562: LD_INT 3
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: NEG
33573: PUSH
33574: LD_INT 5
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 3
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 3
33594: PUSH
33595: LD_INT 1
33597: NEG
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 4
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 4
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 3
33625: PUSH
33626: LD_INT 1
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 2
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 2
33645: PUSH
33646: LD_INT 1
33648: NEG
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 2
33656: PUSH
33657: LD_INT 2
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 4
33667: PUSH
33668: LD_INT 2
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 4
33677: PUSH
33678: LD_INT 4
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 4
33687: PUSH
33688: LD_INT 3
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 5
33697: PUSH
33698: LD_INT 4
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 5
33707: PUSH
33708: LD_INT 5
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 4
33717: PUSH
33718: LD_INT 5
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 3
33727: PUSH
33728: LD_INT 4
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 3
33737: PUSH
33738: LD_INT 3
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 5
33747: PUSH
33748: LD_INT 3
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 3
33757: PUSH
33758: LD_INT 5
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33812: LD_ADDR_VAR 0 33
33816: PUSH
33817: LD_INT 4
33819: NEG
33820: PUSH
33821: LD_INT 4
33823: NEG
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 4
33831: NEG
33832: PUSH
33833: LD_INT 5
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 3
33843: NEG
33844: PUSH
33845: LD_INT 4
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 3
33855: NEG
33856: PUSH
33857: LD_INT 3
33859: NEG
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 4
33867: NEG
33868: PUSH
33869: LD_INT 3
33871: NEG
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 5
33879: NEG
33880: PUSH
33881: LD_INT 4
33883: NEG
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 5
33891: NEG
33892: PUSH
33893: LD_INT 5
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 3
33903: NEG
33904: PUSH
33905: LD_INT 5
33907: NEG
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 5
33915: NEG
33916: PUSH
33917: LD_INT 3
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: LD_INT 3
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: LD_INT 4
33941: NEG
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 1
33949: PUSH
33950: LD_INT 3
33952: NEG
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 1
33960: PUSH
33961: LD_INT 2
33963: NEG
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: LD_INT 2
33974: NEG
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: LD_INT 3
33986: NEG
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 1
33994: NEG
33995: PUSH
33996: LD_INT 4
33998: NEG
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: LD_INT 2
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 2
34017: NEG
34018: PUSH
34019: LD_INT 4
34021: NEG
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 4
34029: PUSH
34030: LD_INT 0
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 4
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 5
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 5
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 4
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 3
34080: PUSH
34081: LD_INT 0
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 3
34090: PUSH
34091: LD_INT 1
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 3
34101: PUSH
34102: LD_INT 2
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 5
34112: PUSH
34113: LD_INT 2
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 3
34122: PUSH
34123: LD_INT 3
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 3
34132: PUSH
34133: LD_INT 2
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 4
34142: PUSH
34143: LD_INT 3
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 4
34152: PUSH
34153: LD_INT 4
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 3
34162: PUSH
34163: LD_INT 4
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 2
34172: PUSH
34173: LD_INT 3
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 2
34182: PUSH
34183: LD_INT 2
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 4
34192: PUSH
34193: LD_INT 2
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 2
34202: PUSH
34203: LD_INT 4
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: LD_INT 4
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 0
34222: PUSH
34223: LD_INT 3
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: LD_INT 4
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 1
34242: PUSH
34243: LD_INT 5
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: LD_INT 5
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 1
34262: NEG
34263: PUSH
34264: LD_INT 4
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: NEG
34274: PUSH
34275: LD_INT 3
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 2
34284: PUSH
34285: LD_INT 5
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 2
34294: NEG
34295: PUSH
34296: LD_INT 3
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34350: LD_ADDR_VAR 0 34
34354: PUSH
34355: LD_INT 0
34357: PUSH
34358: LD_INT 4
34360: NEG
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 0
34368: PUSH
34369: LD_INT 5
34371: NEG
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 1
34379: PUSH
34380: LD_INT 4
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: LD_INT 3
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 0
34401: PUSH
34402: LD_INT 3
34404: NEG
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 1
34412: NEG
34413: PUSH
34414: LD_INT 4
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: NEG
34425: PUSH
34426: LD_INT 5
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: LD_INT 3
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 2
34447: NEG
34448: PUSH
34449: LD_INT 5
34451: NEG
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 3
34459: PUSH
34460: LD_INT 0
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 3
34469: PUSH
34470: LD_INT 1
34472: NEG
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 4
34480: PUSH
34481: LD_INT 0
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 4
34490: PUSH
34491: LD_INT 1
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 3
34500: PUSH
34501: LD_INT 1
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 2
34510: PUSH
34511: LD_INT 0
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 2
34520: PUSH
34521: LD_INT 1
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 2
34531: PUSH
34532: LD_INT 2
34534: NEG
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 4
34542: PUSH
34543: LD_INT 2
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 4
34552: PUSH
34553: LD_INT 4
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 4
34562: PUSH
34563: LD_INT 3
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 5
34572: PUSH
34573: LD_INT 4
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 5
34582: PUSH
34583: LD_INT 5
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 4
34592: PUSH
34593: LD_INT 5
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 3
34602: PUSH
34603: LD_INT 4
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 3
34612: PUSH
34613: LD_INT 3
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 5
34622: PUSH
34623: LD_INT 3
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 3
34632: PUSH
34633: LD_INT 5
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: LD_INT 3
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: LD_INT 2
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: LD_INT 3
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 1
34672: PUSH
34673: LD_INT 4
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 0
34682: PUSH
34683: LD_INT 4
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 1
34692: NEG
34693: PUSH
34694: LD_INT 3
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: LD_INT 2
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 2
34714: PUSH
34715: LD_INT 4
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 2
34724: NEG
34725: PUSH
34726: LD_INT 2
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 4
34735: NEG
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 4
34746: NEG
34747: PUSH
34748: LD_INT 1
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 3
34758: NEG
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 3
34769: NEG
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 4
34780: NEG
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 5
34791: NEG
34792: PUSH
34793: LD_INT 0
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 5
34802: NEG
34803: PUSH
34804: LD_INT 1
34806: NEG
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 5
34814: NEG
34815: PUSH
34816: LD_INT 2
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 3
34826: NEG
34827: PUSH
34828: LD_INT 2
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: ST_TO_ADDR
// end ; end ;
34882: GO 34885
34884: POP
// case btype of b_depot , b_warehouse :
34885: LD_VAR 0 1
34889: PUSH
34890: LD_INT 0
34892: DOUBLE
34893: EQUAL
34894: IFTRUE 34904
34896: LD_INT 1
34898: DOUBLE
34899: EQUAL
34900: IFTRUE 34904
34902: GO 35105
34904: POP
// case nation of nation_american :
34905: LD_VAR 0 5
34909: PUSH
34910: LD_INT 1
34912: DOUBLE
34913: EQUAL
34914: IFTRUE 34918
34916: GO 34974
34918: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34919: LD_ADDR_VAR 0 9
34923: PUSH
34924: LD_VAR 0 11
34928: PUSH
34929: LD_VAR 0 12
34933: PUSH
34934: LD_VAR 0 13
34938: PUSH
34939: LD_VAR 0 14
34943: PUSH
34944: LD_VAR 0 15
34948: PUSH
34949: LD_VAR 0 16
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: PUSH
34962: LD_VAR 0 4
34966: PUSH
34967: LD_INT 1
34969: PLUS
34970: ARRAY
34971: ST_TO_ADDR
34972: GO 35103
34974: LD_INT 2
34976: DOUBLE
34977: EQUAL
34978: IFTRUE 34982
34980: GO 35038
34982: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34983: LD_ADDR_VAR 0 9
34987: PUSH
34988: LD_VAR 0 17
34992: PUSH
34993: LD_VAR 0 18
34997: PUSH
34998: LD_VAR 0 19
35002: PUSH
35003: LD_VAR 0 20
35007: PUSH
35008: LD_VAR 0 21
35012: PUSH
35013: LD_VAR 0 22
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: PUSH
35026: LD_VAR 0 4
35030: PUSH
35031: LD_INT 1
35033: PLUS
35034: ARRAY
35035: ST_TO_ADDR
35036: GO 35103
35038: LD_INT 3
35040: DOUBLE
35041: EQUAL
35042: IFTRUE 35046
35044: GO 35102
35046: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35047: LD_ADDR_VAR 0 9
35051: PUSH
35052: LD_VAR 0 23
35056: PUSH
35057: LD_VAR 0 24
35061: PUSH
35062: LD_VAR 0 25
35066: PUSH
35067: LD_VAR 0 26
35071: PUSH
35072: LD_VAR 0 27
35076: PUSH
35077: LD_VAR 0 28
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: PUSH
35090: LD_VAR 0 4
35094: PUSH
35095: LD_INT 1
35097: PLUS
35098: ARRAY
35099: ST_TO_ADDR
35100: GO 35103
35102: POP
35103: GO 35658
35105: LD_INT 2
35107: DOUBLE
35108: EQUAL
35109: IFTRUE 35119
35111: LD_INT 3
35113: DOUBLE
35114: EQUAL
35115: IFTRUE 35119
35117: GO 35175
35119: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35120: LD_ADDR_VAR 0 9
35124: PUSH
35125: LD_VAR 0 29
35129: PUSH
35130: LD_VAR 0 30
35134: PUSH
35135: LD_VAR 0 31
35139: PUSH
35140: LD_VAR 0 32
35144: PUSH
35145: LD_VAR 0 33
35149: PUSH
35150: LD_VAR 0 34
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: PUSH
35163: LD_VAR 0 4
35167: PUSH
35168: LD_INT 1
35170: PLUS
35171: ARRAY
35172: ST_TO_ADDR
35173: GO 35658
35175: LD_INT 16
35177: DOUBLE
35178: EQUAL
35179: IFTRUE 35237
35181: LD_INT 17
35183: DOUBLE
35184: EQUAL
35185: IFTRUE 35237
35187: LD_INT 18
35189: DOUBLE
35190: EQUAL
35191: IFTRUE 35237
35193: LD_INT 19
35195: DOUBLE
35196: EQUAL
35197: IFTRUE 35237
35199: LD_INT 22
35201: DOUBLE
35202: EQUAL
35203: IFTRUE 35237
35205: LD_INT 20
35207: DOUBLE
35208: EQUAL
35209: IFTRUE 35237
35211: LD_INT 21
35213: DOUBLE
35214: EQUAL
35215: IFTRUE 35237
35217: LD_INT 23
35219: DOUBLE
35220: EQUAL
35221: IFTRUE 35237
35223: LD_INT 24
35225: DOUBLE
35226: EQUAL
35227: IFTRUE 35237
35229: LD_INT 25
35231: DOUBLE
35232: EQUAL
35233: IFTRUE 35237
35235: GO 35293
35237: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35238: LD_ADDR_VAR 0 9
35242: PUSH
35243: LD_VAR 0 35
35247: PUSH
35248: LD_VAR 0 36
35252: PUSH
35253: LD_VAR 0 37
35257: PUSH
35258: LD_VAR 0 38
35262: PUSH
35263: LD_VAR 0 39
35267: PUSH
35268: LD_VAR 0 40
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: PUSH
35281: LD_VAR 0 4
35285: PUSH
35286: LD_INT 1
35288: PLUS
35289: ARRAY
35290: ST_TO_ADDR
35291: GO 35658
35293: LD_INT 6
35295: DOUBLE
35296: EQUAL
35297: IFTRUE 35349
35299: LD_INT 7
35301: DOUBLE
35302: EQUAL
35303: IFTRUE 35349
35305: LD_INT 8
35307: DOUBLE
35308: EQUAL
35309: IFTRUE 35349
35311: LD_INT 13
35313: DOUBLE
35314: EQUAL
35315: IFTRUE 35349
35317: LD_INT 12
35319: DOUBLE
35320: EQUAL
35321: IFTRUE 35349
35323: LD_INT 15
35325: DOUBLE
35326: EQUAL
35327: IFTRUE 35349
35329: LD_INT 11
35331: DOUBLE
35332: EQUAL
35333: IFTRUE 35349
35335: LD_INT 14
35337: DOUBLE
35338: EQUAL
35339: IFTRUE 35349
35341: LD_INT 10
35343: DOUBLE
35344: EQUAL
35345: IFTRUE 35349
35347: GO 35405
35349: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35350: LD_ADDR_VAR 0 9
35354: PUSH
35355: LD_VAR 0 41
35359: PUSH
35360: LD_VAR 0 42
35364: PUSH
35365: LD_VAR 0 43
35369: PUSH
35370: LD_VAR 0 44
35374: PUSH
35375: LD_VAR 0 45
35379: PUSH
35380: LD_VAR 0 46
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: PUSH
35393: LD_VAR 0 4
35397: PUSH
35398: LD_INT 1
35400: PLUS
35401: ARRAY
35402: ST_TO_ADDR
35403: GO 35658
35405: LD_INT 36
35407: DOUBLE
35408: EQUAL
35409: IFTRUE 35413
35411: GO 35469
35413: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35414: LD_ADDR_VAR 0 9
35418: PUSH
35419: LD_VAR 0 47
35423: PUSH
35424: LD_VAR 0 48
35428: PUSH
35429: LD_VAR 0 49
35433: PUSH
35434: LD_VAR 0 50
35438: PUSH
35439: LD_VAR 0 51
35443: PUSH
35444: LD_VAR 0 52
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: PUSH
35457: LD_VAR 0 4
35461: PUSH
35462: LD_INT 1
35464: PLUS
35465: ARRAY
35466: ST_TO_ADDR
35467: GO 35658
35469: LD_INT 4
35471: DOUBLE
35472: EQUAL
35473: IFTRUE 35495
35475: LD_INT 5
35477: DOUBLE
35478: EQUAL
35479: IFTRUE 35495
35481: LD_INT 34
35483: DOUBLE
35484: EQUAL
35485: IFTRUE 35495
35487: LD_INT 37
35489: DOUBLE
35490: EQUAL
35491: IFTRUE 35495
35493: GO 35551
35495: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35496: LD_ADDR_VAR 0 9
35500: PUSH
35501: LD_VAR 0 53
35505: PUSH
35506: LD_VAR 0 54
35510: PUSH
35511: LD_VAR 0 55
35515: PUSH
35516: LD_VAR 0 56
35520: PUSH
35521: LD_VAR 0 57
35525: PUSH
35526: LD_VAR 0 58
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: PUSH
35539: LD_VAR 0 4
35543: PUSH
35544: LD_INT 1
35546: PLUS
35547: ARRAY
35548: ST_TO_ADDR
35549: GO 35658
35551: LD_INT 31
35553: DOUBLE
35554: EQUAL
35555: IFTRUE 35601
35557: LD_INT 32
35559: DOUBLE
35560: EQUAL
35561: IFTRUE 35601
35563: LD_INT 33
35565: DOUBLE
35566: EQUAL
35567: IFTRUE 35601
35569: LD_INT 27
35571: DOUBLE
35572: EQUAL
35573: IFTRUE 35601
35575: LD_INT 26
35577: DOUBLE
35578: EQUAL
35579: IFTRUE 35601
35581: LD_INT 28
35583: DOUBLE
35584: EQUAL
35585: IFTRUE 35601
35587: LD_INT 29
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35601
35593: LD_INT 30
35595: DOUBLE
35596: EQUAL
35597: IFTRUE 35601
35599: GO 35657
35601: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35602: LD_ADDR_VAR 0 9
35606: PUSH
35607: LD_VAR 0 59
35611: PUSH
35612: LD_VAR 0 60
35616: PUSH
35617: LD_VAR 0 61
35621: PUSH
35622: LD_VAR 0 62
35626: PUSH
35627: LD_VAR 0 63
35631: PUSH
35632: LD_VAR 0 64
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: PUSH
35645: LD_VAR 0 4
35649: PUSH
35650: LD_INT 1
35652: PLUS
35653: ARRAY
35654: ST_TO_ADDR
35655: GO 35658
35657: POP
// temp_list2 = [ ] ;
35658: LD_ADDR_VAR 0 10
35662: PUSH
35663: EMPTY
35664: ST_TO_ADDR
// for i in temp_list do
35665: LD_ADDR_VAR 0 8
35669: PUSH
35670: LD_VAR 0 9
35674: PUSH
35675: FOR_IN
35676: IFFALSE 35728
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35678: LD_ADDR_VAR 0 10
35682: PUSH
35683: LD_VAR 0 10
35687: PUSH
35688: LD_VAR 0 8
35692: PUSH
35693: LD_INT 1
35695: ARRAY
35696: PUSH
35697: LD_VAR 0 2
35701: PLUS
35702: PUSH
35703: LD_VAR 0 8
35707: PUSH
35708: LD_INT 2
35710: ARRAY
35711: PUSH
35712: LD_VAR 0 3
35716: PLUS
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: EMPTY
35723: LIST
35724: ADD
35725: ST_TO_ADDR
35726: GO 35675
35728: POP
35729: POP
// result = temp_list2 ;
35730: LD_ADDR_VAR 0 7
35734: PUSH
35735: LD_VAR 0 10
35739: ST_TO_ADDR
// end ;
35740: LD_VAR 0 7
35744: RET
// export function EnemyInRange ( unit , dist ) ; begin
35745: LD_INT 0
35747: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35748: LD_ADDR_VAR 0 3
35752: PUSH
35753: LD_VAR 0 1
35757: PPUSH
35758: CALL_OW 255
35762: PPUSH
35763: LD_VAR 0 1
35767: PPUSH
35768: CALL_OW 250
35772: PPUSH
35773: LD_VAR 0 1
35777: PPUSH
35778: CALL_OW 251
35782: PPUSH
35783: LD_VAR 0 2
35787: PPUSH
35788: CALL 9118 0 4
35792: PUSH
35793: LD_INT 4
35795: ARRAY
35796: ST_TO_ADDR
// end ;
35797: LD_VAR 0 3
35801: RET
// export function PlayerSeeMe ( unit ) ; begin
35802: LD_INT 0
35804: PPUSH
// result := See ( your_side , unit ) ;
35805: LD_ADDR_VAR 0 2
35809: PUSH
35810: LD_OWVAR 2
35814: PPUSH
35815: LD_VAR 0 1
35819: PPUSH
35820: CALL_OW 292
35824: ST_TO_ADDR
// end ;
35825: LD_VAR 0 2
35829: RET
// export function ReverseDir ( unit ) ; begin
35830: LD_INT 0
35832: PPUSH
// if not unit then
35833: LD_VAR 0 1
35837: NOT
35838: IFFALSE 35842
// exit ;
35840: GO 35865
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35842: LD_ADDR_VAR 0 2
35846: PUSH
35847: LD_VAR 0 1
35851: PPUSH
35852: CALL_OW 254
35856: PUSH
35857: LD_INT 3
35859: PLUS
35860: PUSH
35861: LD_INT 6
35863: MOD
35864: ST_TO_ADDR
// end ;
35865: LD_VAR 0 2
35869: RET
// export function ReverseArray ( array ) ; var i ; begin
35870: LD_INT 0
35872: PPUSH
35873: PPUSH
// if not array then
35874: LD_VAR 0 1
35878: NOT
35879: IFFALSE 35883
// exit ;
35881: GO 35938
// result := [ ] ;
35883: LD_ADDR_VAR 0 2
35887: PUSH
35888: EMPTY
35889: ST_TO_ADDR
// for i := array downto 1 do
35890: LD_ADDR_VAR 0 3
35894: PUSH
35895: DOUBLE
35896: LD_VAR 0 1
35900: INC
35901: ST_TO_ADDR
35902: LD_INT 1
35904: PUSH
35905: FOR_DOWNTO
35906: IFFALSE 35936
// result := Join ( result , array [ i ] ) ;
35908: LD_ADDR_VAR 0 2
35912: PUSH
35913: LD_VAR 0 2
35917: PPUSH
35918: LD_VAR 0 1
35922: PUSH
35923: LD_VAR 0 3
35927: ARRAY
35928: PPUSH
35929: CALL 40603 0 2
35933: ST_TO_ADDR
35934: GO 35905
35936: POP
35937: POP
// end ;
35938: LD_VAR 0 2
35942: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35943: LD_INT 0
35945: PPUSH
35946: PPUSH
35947: PPUSH
35948: PPUSH
35949: PPUSH
35950: PPUSH
// if not unit or not hexes then
35951: LD_VAR 0 1
35955: NOT
35956: PUSH
35957: LD_VAR 0 2
35961: NOT
35962: OR
35963: IFFALSE 35967
// exit ;
35965: GO 36090
// dist := 9999 ;
35967: LD_ADDR_VAR 0 5
35971: PUSH
35972: LD_INT 9999
35974: ST_TO_ADDR
// for i = 1 to hexes do
35975: LD_ADDR_VAR 0 4
35979: PUSH
35980: DOUBLE
35981: LD_INT 1
35983: DEC
35984: ST_TO_ADDR
35985: LD_VAR 0 2
35989: PUSH
35990: FOR_TO
35991: IFFALSE 36078
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35993: LD_ADDR_VAR 0 6
35997: PUSH
35998: LD_VAR 0 1
36002: PPUSH
36003: LD_VAR 0 2
36007: PUSH
36008: LD_VAR 0 4
36012: ARRAY
36013: PUSH
36014: LD_INT 1
36016: ARRAY
36017: PPUSH
36018: LD_VAR 0 2
36022: PUSH
36023: LD_VAR 0 4
36027: ARRAY
36028: PUSH
36029: LD_INT 2
36031: ARRAY
36032: PPUSH
36033: CALL_OW 297
36037: ST_TO_ADDR
// if tdist < dist then
36038: LD_VAR 0 6
36042: PUSH
36043: LD_VAR 0 5
36047: LESS
36048: IFFALSE 36076
// begin hex := hexes [ i ] ;
36050: LD_ADDR_VAR 0 8
36054: PUSH
36055: LD_VAR 0 2
36059: PUSH
36060: LD_VAR 0 4
36064: ARRAY
36065: ST_TO_ADDR
// dist := tdist ;
36066: LD_ADDR_VAR 0 5
36070: PUSH
36071: LD_VAR 0 6
36075: ST_TO_ADDR
// end ; end ;
36076: GO 35990
36078: POP
36079: POP
// result := hex ;
36080: LD_ADDR_VAR 0 3
36084: PUSH
36085: LD_VAR 0 8
36089: ST_TO_ADDR
// end ;
36090: LD_VAR 0 3
36094: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36095: LD_INT 0
36097: PPUSH
36098: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36099: LD_VAR 0 1
36103: NOT
36104: PUSH
36105: LD_VAR 0 1
36109: PUSH
36110: LD_INT 21
36112: PUSH
36113: LD_INT 2
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 23
36122: PUSH
36123: LD_INT 2
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PPUSH
36134: CALL_OW 69
36138: IN
36139: NOT
36140: OR
36141: IFFALSE 36145
// exit ;
36143: GO 36192
// for i = 1 to 3 do
36145: LD_ADDR_VAR 0 3
36149: PUSH
36150: DOUBLE
36151: LD_INT 1
36153: DEC
36154: ST_TO_ADDR
36155: LD_INT 3
36157: PUSH
36158: FOR_TO
36159: IFFALSE 36190
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36161: LD_VAR 0 1
36165: PPUSH
36166: CALL_OW 250
36170: PPUSH
36171: LD_VAR 0 1
36175: PPUSH
36176: CALL_OW 251
36180: PPUSH
36181: LD_INT 1
36183: PPUSH
36184: CALL_OW 453
36188: GO 36158
36190: POP
36191: POP
// end ;
36192: LD_VAR 0 2
36196: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36197: LD_INT 0
36199: PPUSH
36200: PPUSH
36201: PPUSH
36202: PPUSH
36203: PPUSH
36204: PPUSH
// if not unit or not enemy_unit then
36205: LD_VAR 0 1
36209: NOT
36210: PUSH
36211: LD_VAR 0 2
36215: NOT
36216: OR
36217: IFFALSE 36221
// exit ;
36219: GO 36688
// if GetLives ( i ) < 250 then
36221: LD_VAR 0 4
36225: PPUSH
36226: CALL_OW 256
36230: PUSH
36231: LD_INT 250
36233: LESS
36234: IFFALSE 36247
// begin ComAutodestruct ( i ) ;
36236: LD_VAR 0 4
36240: PPUSH
36241: CALL 36095 0 1
// exit ;
36245: GO 36688
// end ; x := GetX ( enemy_unit ) ;
36247: LD_ADDR_VAR 0 7
36251: PUSH
36252: LD_VAR 0 2
36256: PPUSH
36257: CALL_OW 250
36261: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36262: LD_ADDR_VAR 0 8
36266: PUSH
36267: LD_VAR 0 2
36271: PPUSH
36272: CALL_OW 251
36276: ST_TO_ADDR
// if not x or not y then
36277: LD_VAR 0 7
36281: NOT
36282: PUSH
36283: LD_VAR 0 8
36287: NOT
36288: OR
36289: IFFALSE 36293
// exit ;
36291: GO 36688
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36293: LD_ADDR_VAR 0 6
36297: PUSH
36298: LD_VAR 0 7
36302: PPUSH
36303: LD_INT 0
36305: PPUSH
36306: LD_INT 4
36308: PPUSH
36309: CALL_OW 272
36313: PUSH
36314: LD_VAR 0 8
36318: PPUSH
36319: LD_INT 0
36321: PPUSH
36322: LD_INT 4
36324: PPUSH
36325: CALL_OW 273
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_VAR 0 7
36338: PPUSH
36339: LD_INT 1
36341: PPUSH
36342: LD_INT 4
36344: PPUSH
36345: CALL_OW 272
36349: PUSH
36350: LD_VAR 0 8
36354: PPUSH
36355: LD_INT 1
36357: PPUSH
36358: LD_INT 4
36360: PPUSH
36361: CALL_OW 273
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_VAR 0 7
36374: PPUSH
36375: LD_INT 2
36377: PPUSH
36378: LD_INT 4
36380: PPUSH
36381: CALL_OW 272
36385: PUSH
36386: LD_VAR 0 8
36390: PPUSH
36391: LD_INT 2
36393: PPUSH
36394: LD_INT 4
36396: PPUSH
36397: CALL_OW 273
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_VAR 0 7
36410: PPUSH
36411: LD_INT 3
36413: PPUSH
36414: LD_INT 4
36416: PPUSH
36417: CALL_OW 272
36421: PUSH
36422: LD_VAR 0 8
36426: PPUSH
36427: LD_INT 3
36429: PPUSH
36430: LD_INT 4
36432: PPUSH
36433: CALL_OW 273
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_VAR 0 7
36446: PPUSH
36447: LD_INT 4
36449: PPUSH
36450: LD_INT 4
36452: PPUSH
36453: CALL_OW 272
36457: PUSH
36458: LD_VAR 0 8
36462: PPUSH
36463: LD_INT 4
36465: PPUSH
36466: LD_INT 4
36468: PPUSH
36469: CALL_OW 273
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_VAR 0 7
36482: PPUSH
36483: LD_INT 5
36485: PPUSH
36486: LD_INT 4
36488: PPUSH
36489: CALL_OW 272
36493: PUSH
36494: LD_VAR 0 8
36498: PPUSH
36499: LD_INT 5
36501: PPUSH
36502: LD_INT 4
36504: PPUSH
36505: CALL_OW 273
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: ST_TO_ADDR
// for i = tmp downto 1 do
36522: LD_ADDR_VAR 0 4
36526: PUSH
36527: DOUBLE
36528: LD_VAR 0 6
36532: INC
36533: ST_TO_ADDR
36534: LD_INT 1
36536: PUSH
36537: FOR_DOWNTO
36538: IFFALSE 36639
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36540: LD_VAR 0 6
36544: PUSH
36545: LD_VAR 0 4
36549: ARRAY
36550: PUSH
36551: LD_INT 1
36553: ARRAY
36554: PPUSH
36555: LD_VAR 0 6
36559: PUSH
36560: LD_VAR 0 4
36564: ARRAY
36565: PUSH
36566: LD_INT 2
36568: ARRAY
36569: PPUSH
36570: CALL_OW 488
36574: NOT
36575: PUSH
36576: LD_VAR 0 6
36580: PUSH
36581: LD_VAR 0 4
36585: ARRAY
36586: PUSH
36587: LD_INT 1
36589: ARRAY
36590: PPUSH
36591: LD_VAR 0 6
36595: PUSH
36596: LD_VAR 0 4
36600: ARRAY
36601: PUSH
36602: LD_INT 2
36604: ARRAY
36605: PPUSH
36606: CALL_OW 428
36610: PUSH
36611: LD_INT 0
36613: NONEQUAL
36614: OR
36615: IFFALSE 36637
// tmp := Delete ( tmp , i ) ;
36617: LD_ADDR_VAR 0 6
36621: PUSH
36622: LD_VAR 0 6
36626: PPUSH
36627: LD_VAR 0 4
36631: PPUSH
36632: CALL_OW 3
36636: ST_TO_ADDR
36637: GO 36537
36639: POP
36640: POP
// j := GetClosestHex ( unit , tmp ) ;
36641: LD_ADDR_VAR 0 5
36645: PUSH
36646: LD_VAR 0 1
36650: PPUSH
36651: LD_VAR 0 6
36655: PPUSH
36656: CALL 35943 0 2
36660: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36661: LD_VAR 0 1
36665: PPUSH
36666: LD_VAR 0 5
36670: PUSH
36671: LD_INT 1
36673: ARRAY
36674: PPUSH
36675: LD_VAR 0 5
36679: PUSH
36680: LD_INT 2
36682: ARRAY
36683: PPUSH
36684: CALL_OW 111
// end ;
36688: LD_VAR 0 3
36692: RET
// export function PrepareApemanSoldier ( ) ; begin
36693: LD_INT 0
36695: PPUSH
// uc_nation := 0 ;
36696: LD_ADDR_OWVAR 21
36700: PUSH
36701: LD_INT 0
36703: ST_TO_ADDR
// hc_sex := sex_male ;
36704: LD_ADDR_OWVAR 27
36708: PUSH
36709: LD_INT 1
36711: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36712: LD_ADDR_OWVAR 28
36716: PUSH
36717: LD_INT 15
36719: ST_TO_ADDR
// hc_gallery :=  ;
36720: LD_ADDR_OWVAR 33
36724: PUSH
36725: LD_STRING 
36727: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36728: LD_ADDR_OWVAR 31
36732: PUSH
36733: LD_INT 0
36735: PPUSH
36736: LD_INT 3
36738: PPUSH
36739: CALL_OW 12
36743: PUSH
36744: LD_INT 0
36746: PPUSH
36747: LD_INT 3
36749: PPUSH
36750: CALL_OW 12
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: ST_TO_ADDR
// end ;
36767: LD_VAR 0 1
36771: RET
// export function PrepareApemanEngineer ( ) ; begin
36772: LD_INT 0
36774: PPUSH
// uc_nation := 0 ;
36775: LD_ADDR_OWVAR 21
36779: PUSH
36780: LD_INT 0
36782: ST_TO_ADDR
// hc_sex := sex_male ;
36783: LD_ADDR_OWVAR 27
36787: PUSH
36788: LD_INT 1
36790: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36791: LD_ADDR_OWVAR 28
36795: PUSH
36796: LD_INT 16
36798: ST_TO_ADDR
// hc_gallery :=  ;
36799: LD_ADDR_OWVAR 33
36803: PUSH
36804: LD_STRING 
36806: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36807: LD_ADDR_OWVAR 31
36811: PUSH
36812: LD_INT 0
36814: PPUSH
36815: LD_INT 3
36817: PPUSH
36818: CALL_OW 12
36822: PUSH
36823: LD_INT 0
36825: PPUSH
36826: LD_INT 3
36828: PPUSH
36829: CALL_OW 12
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: ST_TO_ADDR
// end ;
36846: LD_VAR 0 1
36850: RET
// export function PrepareApeman ( agressivity ) ; begin
36851: LD_INT 0
36853: PPUSH
// uc_side := 0 ;
36854: LD_ADDR_OWVAR 20
36858: PUSH
36859: LD_INT 0
36861: ST_TO_ADDR
// uc_nation := 0 ;
36862: LD_ADDR_OWVAR 21
36866: PUSH
36867: LD_INT 0
36869: ST_TO_ADDR
// hc_sex := sex_male ;
36870: LD_ADDR_OWVAR 27
36874: PUSH
36875: LD_INT 1
36877: ST_TO_ADDR
// hc_class := class_apeman ;
36878: LD_ADDR_OWVAR 28
36882: PUSH
36883: LD_INT 12
36885: ST_TO_ADDR
// hc_gallery :=  ;
36886: LD_ADDR_OWVAR 33
36890: PUSH
36891: LD_STRING 
36893: ST_TO_ADDR
// if agressivity = 0 then
36894: LD_VAR 0 1
36898: PUSH
36899: LD_INT 0
36901: EQUAL
36902: IFFALSE 36914
// hc_agressivity := 0 else
36904: LD_ADDR_OWVAR 35
36908: PUSH
36909: LD_INT 0
36911: ST_TO_ADDR
36912: GO 36935
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36914: LD_ADDR_OWVAR 35
36918: PUSH
36919: LD_VAR 0 1
36923: NEG
36924: PPUSH
36925: LD_VAR 0 1
36929: PPUSH
36930: CALL_OW 12
36934: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36935: LD_ADDR_OWVAR 31
36939: PUSH
36940: LD_INT 0
36942: PPUSH
36943: LD_INT 3
36945: PPUSH
36946: CALL_OW 12
36950: PUSH
36951: LD_INT 0
36953: PPUSH
36954: LD_INT 3
36956: PPUSH
36957: CALL_OW 12
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: ST_TO_ADDR
// end ;
36974: LD_VAR 0 2
36978: RET
// export function PrepareTiger ( agressivity ) ; begin
36979: LD_INT 0
36981: PPUSH
// uc_side := 0 ;
36982: LD_ADDR_OWVAR 20
36986: PUSH
36987: LD_INT 0
36989: ST_TO_ADDR
// uc_nation := 0 ;
36990: LD_ADDR_OWVAR 21
36994: PUSH
36995: LD_INT 0
36997: ST_TO_ADDR
// hc_class := class_tiger ;
36998: LD_ADDR_OWVAR 28
37002: PUSH
37003: LD_INT 14
37005: ST_TO_ADDR
// hc_gallery :=  ;
37006: LD_ADDR_OWVAR 33
37010: PUSH
37011: LD_STRING 
37013: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37014: LD_ADDR_OWVAR 35
37018: PUSH
37019: LD_VAR 0 1
37023: NEG
37024: PPUSH
37025: LD_VAR 0 1
37029: PPUSH
37030: CALL_OW 12
37034: ST_TO_ADDR
// end ;
37035: LD_VAR 0 2
37039: RET
// export function PrepareEnchidna ( ) ; begin
37040: LD_INT 0
37042: PPUSH
// uc_side := 0 ;
37043: LD_ADDR_OWVAR 20
37047: PUSH
37048: LD_INT 0
37050: ST_TO_ADDR
// uc_nation := 0 ;
37051: LD_ADDR_OWVAR 21
37055: PUSH
37056: LD_INT 0
37058: ST_TO_ADDR
// hc_class := class_baggie ;
37059: LD_ADDR_OWVAR 28
37063: PUSH
37064: LD_INT 13
37066: ST_TO_ADDR
// hc_gallery :=  ;
37067: LD_ADDR_OWVAR 33
37071: PUSH
37072: LD_STRING 
37074: ST_TO_ADDR
// end ;
37075: LD_VAR 0 1
37079: RET
// export function PrepareFrog ( ) ; begin
37080: LD_INT 0
37082: PPUSH
// uc_side := 0 ;
37083: LD_ADDR_OWVAR 20
37087: PUSH
37088: LD_INT 0
37090: ST_TO_ADDR
// uc_nation := 0 ;
37091: LD_ADDR_OWVAR 21
37095: PUSH
37096: LD_INT 0
37098: ST_TO_ADDR
// hc_class := class_frog ;
37099: LD_ADDR_OWVAR 28
37103: PUSH
37104: LD_INT 19
37106: ST_TO_ADDR
// hc_gallery :=  ;
37107: LD_ADDR_OWVAR 33
37111: PUSH
37112: LD_STRING 
37114: ST_TO_ADDR
// end ;
37115: LD_VAR 0 1
37119: RET
// export function PrepareFish ( ) ; begin
37120: LD_INT 0
37122: PPUSH
// uc_side := 0 ;
37123: LD_ADDR_OWVAR 20
37127: PUSH
37128: LD_INT 0
37130: ST_TO_ADDR
// uc_nation := 0 ;
37131: LD_ADDR_OWVAR 21
37135: PUSH
37136: LD_INT 0
37138: ST_TO_ADDR
// hc_class := class_fish ;
37139: LD_ADDR_OWVAR 28
37143: PUSH
37144: LD_INT 20
37146: ST_TO_ADDR
// hc_gallery :=  ;
37147: LD_ADDR_OWVAR 33
37151: PUSH
37152: LD_STRING 
37154: ST_TO_ADDR
// end ;
37155: LD_VAR 0 1
37159: RET
// export function PrepareBird ( ) ; begin
37160: LD_INT 0
37162: PPUSH
// uc_side := 0 ;
37163: LD_ADDR_OWVAR 20
37167: PUSH
37168: LD_INT 0
37170: ST_TO_ADDR
// uc_nation := 0 ;
37171: LD_ADDR_OWVAR 21
37175: PUSH
37176: LD_INT 0
37178: ST_TO_ADDR
// hc_class := class_phororhacos ;
37179: LD_ADDR_OWVAR 28
37183: PUSH
37184: LD_INT 18
37186: ST_TO_ADDR
// hc_gallery :=  ;
37187: LD_ADDR_OWVAR 33
37191: PUSH
37192: LD_STRING 
37194: ST_TO_ADDR
// end ;
37195: LD_VAR 0 1
37199: RET
// export function PrepareHorse ( ) ; begin
37200: LD_INT 0
37202: PPUSH
// uc_side := 0 ;
37203: LD_ADDR_OWVAR 20
37207: PUSH
37208: LD_INT 0
37210: ST_TO_ADDR
// uc_nation := 0 ;
37211: LD_ADDR_OWVAR 21
37215: PUSH
37216: LD_INT 0
37218: ST_TO_ADDR
// hc_class := class_horse ;
37219: LD_ADDR_OWVAR 28
37223: PUSH
37224: LD_INT 21
37226: ST_TO_ADDR
// hc_gallery :=  ;
37227: LD_ADDR_OWVAR 33
37231: PUSH
37232: LD_STRING 
37234: ST_TO_ADDR
// end ;
37235: LD_VAR 0 1
37239: RET
// export function PrepareMastodont ( ) ; begin
37240: LD_INT 0
37242: PPUSH
// uc_side := 0 ;
37243: LD_ADDR_OWVAR 20
37247: PUSH
37248: LD_INT 0
37250: ST_TO_ADDR
// uc_nation := 0 ;
37251: LD_ADDR_OWVAR 21
37255: PUSH
37256: LD_INT 0
37258: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37259: LD_ADDR_OWVAR 37
37263: PUSH
37264: LD_INT 31
37266: ST_TO_ADDR
// vc_control := control_rider ;
37267: LD_ADDR_OWVAR 38
37271: PUSH
37272: LD_INT 4
37274: ST_TO_ADDR
// end ;
37275: LD_VAR 0 1
37279: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37280: LD_INT 0
37282: PPUSH
37283: PPUSH
37284: PPUSH
// uc_side = 0 ;
37285: LD_ADDR_OWVAR 20
37289: PUSH
37290: LD_INT 0
37292: ST_TO_ADDR
// uc_nation = 0 ;
37293: LD_ADDR_OWVAR 21
37297: PUSH
37298: LD_INT 0
37300: ST_TO_ADDR
// InitHc_All ( ) ;
37301: CALL_OW 584
// InitVc ;
37305: CALL_OW 20
// if mastodonts then
37309: LD_VAR 0 6
37313: IFFALSE 37380
// for i = 1 to mastodonts do
37315: LD_ADDR_VAR 0 11
37319: PUSH
37320: DOUBLE
37321: LD_INT 1
37323: DEC
37324: ST_TO_ADDR
37325: LD_VAR 0 6
37329: PUSH
37330: FOR_TO
37331: IFFALSE 37378
// begin vc_chassis := 31 ;
37333: LD_ADDR_OWVAR 37
37337: PUSH
37338: LD_INT 31
37340: ST_TO_ADDR
// vc_control := control_rider ;
37341: LD_ADDR_OWVAR 38
37345: PUSH
37346: LD_INT 4
37348: ST_TO_ADDR
// animal := CreateVehicle ;
37349: LD_ADDR_VAR 0 12
37353: PUSH
37354: CALL_OW 45
37358: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37359: LD_VAR 0 12
37363: PPUSH
37364: LD_VAR 0 8
37368: PPUSH
37369: LD_INT 0
37371: PPUSH
37372: CALL 39508 0 3
// end ;
37376: GO 37330
37378: POP
37379: POP
// if horses then
37380: LD_VAR 0 5
37384: IFFALSE 37451
// for i = 1 to horses do
37386: LD_ADDR_VAR 0 11
37390: PUSH
37391: DOUBLE
37392: LD_INT 1
37394: DEC
37395: ST_TO_ADDR
37396: LD_VAR 0 5
37400: PUSH
37401: FOR_TO
37402: IFFALSE 37449
// begin hc_class := 21 ;
37404: LD_ADDR_OWVAR 28
37408: PUSH
37409: LD_INT 21
37411: ST_TO_ADDR
// hc_gallery :=  ;
37412: LD_ADDR_OWVAR 33
37416: PUSH
37417: LD_STRING 
37419: ST_TO_ADDR
// animal := CreateHuman ;
37420: LD_ADDR_VAR 0 12
37424: PUSH
37425: CALL_OW 44
37429: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37430: LD_VAR 0 12
37434: PPUSH
37435: LD_VAR 0 8
37439: PPUSH
37440: LD_INT 0
37442: PPUSH
37443: CALL 39508 0 3
// end ;
37447: GO 37401
37449: POP
37450: POP
// if birds then
37451: LD_VAR 0 1
37455: IFFALSE 37522
// for i = 1 to birds do
37457: LD_ADDR_VAR 0 11
37461: PUSH
37462: DOUBLE
37463: LD_INT 1
37465: DEC
37466: ST_TO_ADDR
37467: LD_VAR 0 1
37471: PUSH
37472: FOR_TO
37473: IFFALSE 37520
// begin hc_class := 18 ;
37475: LD_ADDR_OWVAR 28
37479: PUSH
37480: LD_INT 18
37482: ST_TO_ADDR
// hc_gallery =  ;
37483: LD_ADDR_OWVAR 33
37487: PUSH
37488: LD_STRING 
37490: ST_TO_ADDR
// animal := CreateHuman ;
37491: LD_ADDR_VAR 0 12
37495: PUSH
37496: CALL_OW 44
37500: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37501: LD_VAR 0 12
37505: PPUSH
37506: LD_VAR 0 8
37510: PPUSH
37511: LD_INT 0
37513: PPUSH
37514: CALL 39508 0 3
// end ;
37518: GO 37472
37520: POP
37521: POP
// if tigers then
37522: LD_VAR 0 2
37526: IFFALSE 37610
// for i = 1 to tigers do
37528: LD_ADDR_VAR 0 11
37532: PUSH
37533: DOUBLE
37534: LD_INT 1
37536: DEC
37537: ST_TO_ADDR
37538: LD_VAR 0 2
37542: PUSH
37543: FOR_TO
37544: IFFALSE 37608
// begin hc_class = class_tiger ;
37546: LD_ADDR_OWVAR 28
37550: PUSH
37551: LD_INT 14
37553: ST_TO_ADDR
// hc_gallery =  ;
37554: LD_ADDR_OWVAR 33
37558: PUSH
37559: LD_STRING 
37561: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37562: LD_ADDR_OWVAR 35
37566: PUSH
37567: LD_INT 7
37569: NEG
37570: PPUSH
37571: LD_INT 7
37573: PPUSH
37574: CALL_OW 12
37578: ST_TO_ADDR
// animal := CreateHuman ;
37579: LD_ADDR_VAR 0 12
37583: PUSH
37584: CALL_OW 44
37588: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37589: LD_VAR 0 12
37593: PPUSH
37594: LD_VAR 0 8
37598: PPUSH
37599: LD_INT 0
37601: PPUSH
37602: CALL 39508 0 3
// end ;
37606: GO 37543
37608: POP
37609: POP
// if apemans then
37610: LD_VAR 0 3
37614: IFFALSE 37737
// for i = 1 to apemans do
37616: LD_ADDR_VAR 0 11
37620: PUSH
37621: DOUBLE
37622: LD_INT 1
37624: DEC
37625: ST_TO_ADDR
37626: LD_VAR 0 3
37630: PUSH
37631: FOR_TO
37632: IFFALSE 37735
// begin hc_class = class_apeman ;
37634: LD_ADDR_OWVAR 28
37638: PUSH
37639: LD_INT 12
37641: ST_TO_ADDR
// hc_gallery =  ;
37642: LD_ADDR_OWVAR 33
37646: PUSH
37647: LD_STRING 
37649: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37650: LD_ADDR_OWVAR 35
37654: PUSH
37655: LD_INT 2
37657: NEG
37658: PPUSH
37659: LD_INT 2
37661: PPUSH
37662: CALL_OW 12
37666: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37667: LD_ADDR_OWVAR 31
37671: PUSH
37672: LD_INT 1
37674: PPUSH
37675: LD_INT 3
37677: PPUSH
37678: CALL_OW 12
37682: PUSH
37683: LD_INT 1
37685: PPUSH
37686: LD_INT 3
37688: PPUSH
37689: CALL_OW 12
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: LD_INT 0
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: ST_TO_ADDR
// animal := CreateHuman ;
37706: LD_ADDR_VAR 0 12
37710: PUSH
37711: CALL_OW 44
37715: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37716: LD_VAR 0 12
37720: PPUSH
37721: LD_VAR 0 8
37725: PPUSH
37726: LD_INT 0
37728: PPUSH
37729: CALL 39508 0 3
// end ;
37733: GO 37631
37735: POP
37736: POP
// if enchidnas then
37737: LD_VAR 0 4
37741: IFFALSE 37808
// for i = 1 to enchidnas do
37743: LD_ADDR_VAR 0 11
37747: PUSH
37748: DOUBLE
37749: LD_INT 1
37751: DEC
37752: ST_TO_ADDR
37753: LD_VAR 0 4
37757: PUSH
37758: FOR_TO
37759: IFFALSE 37806
// begin hc_class = 13 ;
37761: LD_ADDR_OWVAR 28
37765: PUSH
37766: LD_INT 13
37768: ST_TO_ADDR
// hc_gallery =  ;
37769: LD_ADDR_OWVAR 33
37773: PUSH
37774: LD_STRING 
37776: ST_TO_ADDR
// animal := CreateHuman ;
37777: LD_ADDR_VAR 0 12
37781: PUSH
37782: CALL_OW 44
37786: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37787: LD_VAR 0 12
37791: PPUSH
37792: LD_VAR 0 8
37796: PPUSH
37797: LD_INT 0
37799: PPUSH
37800: CALL 39508 0 3
// end ;
37804: GO 37758
37806: POP
37807: POP
// if fishes then
37808: LD_VAR 0 7
37812: IFFALSE 37879
// for i = 1 to fishes do
37814: LD_ADDR_VAR 0 11
37818: PUSH
37819: DOUBLE
37820: LD_INT 1
37822: DEC
37823: ST_TO_ADDR
37824: LD_VAR 0 7
37828: PUSH
37829: FOR_TO
37830: IFFALSE 37877
// begin hc_class = 20 ;
37832: LD_ADDR_OWVAR 28
37836: PUSH
37837: LD_INT 20
37839: ST_TO_ADDR
// hc_gallery =  ;
37840: LD_ADDR_OWVAR 33
37844: PUSH
37845: LD_STRING 
37847: ST_TO_ADDR
// animal := CreateHuman ;
37848: LD_ADDR_VAR 0 12
37852: PUSH
37853: CALL_OW 44
37857: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37858: LD_VAR 0 12
37862: PPUSH
37863: LD_VAR 0 9
37867: PPUSH
37868: LD_INT 0
37870: PPUSH
37871: CALL 39508 0 3
// end ;
37875: GO 37829
37877: POP
37878: POP
// end ;
37879: LD_VAR 0 10
37883: RET
// export function WantHeal ( sci , unit ) ; begin
37884: LD_INT 0
37886: PPUSH
// if GetTaskList ( sci ) > 0 then
37887: LD_VAR 0 1
37891: PPUSH
37892: CALL_OW 437
37896: PUSH
37897: LD_INT 0
37899: GREATER
37900: IFFALSE 37970
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37902: LD_VAR 0 1
37906: PPUSH
37907: CALL_OW 437
37911: PUSH
37912: LD_INT 1
37914: ARRAY
37915: PUSH
37916: LD_INT 1
37918: ARRAY
37919: PUSH
37920: LD_STRING l
37922: EQUAL
37923: PUSH
37924: LD_VAR 0 1
37928: PPUSH
37929: CALL_OW 437
37933: PUSH
37934: LD_INT 1
37936: ARRAY
37937: PUSH
37938: LD_INT 4
37940: ARRAY
37941: PUSH
37942: LD_VAR 0 2
37946: EQUAL
37947: AND
37948: IFFALSE 37960
// result := true else
37950: LD_ADDR_VAR 0 3
37954: PUSH
37955: LD_INT 1
37957: ST_TO_ADDR
37958: GO 37968
// result := false ;
37960: LD_ADDR_VAR 0 3
37964: PUSH
37965: LD_INT 0
37967: ST_TO_ADDR
// end else
37968: GO 37978
// result := false ;
37970: LD_ADDR_VAR 0 3
37974: PUSH
37975: LD_INT 0
37977: ST_TO_ADDR
// end ;
37978: LD_VAR 0 3
37982: RET
// export function HealTarget ( sci ) ; begin
37983: LD_INT 0
37985: PPUSH
// if not sci then
37986: LD_VAR 0 1
37990: NOT
37991: IFFALSE 37995
// exit ;
37993: GO 38060
// result := 0 ;
37995: LD_ADDR_VAR 0 2
37999: PUSH
38000: LD_INT 0
38002: ST_TO_ADDR
// if GetTaskList ( sci ) then
38003: LD_VAR 0 1
38007: PPUSH
38008: CALL_OW 437
38012: IFFALSE 38060
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38014: LD_VAR 0 1
38018: PPUSH
38019: CALL_OW 437
38023: PUSH
38024: LD_INT 1
38026: ARRAY
38027: PUSH
38028: LD_INT 1
38030: ARRAY
38031: PUSH
38032: LD_STRING l
38034: EQUAL
38035: IFFALSE 38060
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38037: LD_ADDR_VAR 0 2
38041: PUSH
38042: LD_VAR 0 1
38046: PPUSH
38047: CALL_OW 437
38051: PUSH
38052: LD_INT 1
38054: ARRAY
38055: PUSH
38056: LD_INT 4
38058: ARRAY
38059: ST_TO_ADDR
// end ;
38060: LD_VAR 0 2
38064: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38065: LD_INT 0
38067: PPUSH
38068: PPUSH
38069: PPUSH
38070: PPUSH
// if not base_units then
38071: LD_VAR 0 1
38075: NOT
38076: IFFALSE 38080
// exit ;
38078: GO 38167
// result := false ;
38080: LD_ADDR_VAR 0 2
38084: PUSH
38085: LD_INT 0
38087: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38088: LD_ADDR_VAR 0 5
38092: PUSH
38093: LD_VAR 0 1
38097: PPUSH
38098: LD_INT 21
38100: PUSH
38101: LD_INT 3
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PPUSH
38108: CALL_OW 72
38112: ST_TO_ADDR
// if not tmp then
38113: LD_VAR 0 5
38117: NOT
38118: IFFALSE 38122
// exit ;
38120: GO 38167
// for i in tmp do
38122: LD_ADDR_VAR 0 3
38126: PUSH
38127: LD_VAR 0 5
38131: PUSH
38132: FOR_IN
38133: IFFALSE 38165
// begin result := EnemyInRange ( i , 22 ) ;
38135: LD_ADDR_VAR 0 2
38139: PUSH
38140: LD_VAR 0 3
38144: PPUSH
38145: LD_INT 22
38147: PPUSH
38148: CALL 35745 0 2
38152: ST_TO_ADDR
// if result then
38153: LD_VAR 0 2
38157: IFFALSE 38163
// exit ;
38159: POP
38160: POP
38161: GO 38167
// end ;
38163: GO 38132
38165: POP
38166: POP
// end ;
38167: LD_VAR 0 2
38171: RET
// export function FilterByTag ( units , tag ) ; begin
38172: LD_INT 0
38174: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38175: LD_ADDR_VAR 0 3
38179: PUSH
38180: LD_VAR 0 1
38184: PPUSH
38185: LD_INT 120
38187: PUSH
38188: LD_VAR 0 2
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PPUSH
38197: CALL_OW 72
38201: ST_TO_ADDR
// end ;
38202: LD_VAR 0 3
38206: RET
// export function IsDriver ( un ) ; begin
38207: LD_INT 0
38209: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38210: LD_ADDR_VAR 0 2
38214: PUSH
38215: LD_VAR 0 1
38219: PUSH
38220: LD_INT 55
38222: PUSH
38223: EMPTY
38224: LIST
38225: PPUSH
38226: CALL_OW 69
38230: IN
38231: ST_TO_ADDR
// end ;
38232: LD_VAR 0 2
38236: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38237: LD_INT 0
38239: PPUSH
38240: PPUSH
// list := [ ] ;
38241: LD_ADDR_VAR 0 5
38245: PUSH
38246: EMPTY
38247: ST_TO_ADDR
// case d of 0 :
38248: LD_VAR 0 3
38252: PUSH
38253: LD_INT 0
38255: DOUBLE
38256: EQUAL
38257: IFTRUE 38261
38259: GO 38394
38261: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38262: LD_ADDR_VAR 0 5
38266: PUSH
38267: LD_VAR 0 1
38271: PUSH
38272: LD_INT 4
38274: MINUS
38275: PUSH
38276: LD_VAR 0 2
38280: PUSH
38281: LD_INT 4
38283: MINUS
38284: PUSH
38285: LD_INT 2
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: LIST
38292: PUSH
38293: LD_VAR 0 1
38297: PUSH
38298: LD_INT 3
38300: MINUS
38301: PUSH
38302: LD_VAR 0 2
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: LIST
38314: PUSH
38315: LD_VAR 0 1
38319: PUSH
38320: LD_INT 4
38322: PLUS
38323: PUSH
38324: LD_VAR 0 2
38328: PUSH
38329: LD_INT 4
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: LIST
38336: PUSH
38337: LD_VAR 0 1
38341: PUSH
38342: LD_INT 3
38344: PLUS
38345: PUSH
38346: LD_VAR 0 2
38350: PUSH
38351: LD_INT 3
38353: PLUS
38354: PUSH
38355: LD_INT 5
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: LIST
38362: PUSH
38363: LD_VAR 0 1
38367: PUSH
38368: LD_VAR 0 2
38372: PUSH
38373: LD_INT 4
38375: PLUS
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: LIST
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: ST_TO_ADDR
// end ; 1 :
38392: GO 39092
38394: LD_INT 1
38396: DOUBLE
38397: EQUAL
38398: IFTRUE 38402
38400: GO 38535
38402: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38403: LD_ADDR_VAR 0 5
38407: PUSH
38408: LD_VAR 0 1
38412: PUSH
38413: LD_VAR 0 2
38417: PUSH
38418: LD_INT 4
38420: MINUS
38421: PUSH
38422: LD_INT 3
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: LIST
38429: PUSH
38430: LD_VAR 0 1
38434: PUSH
38435: LD_INT 3
38437: MINUS
38438: PUSH
38439: LD_VAR 0 2
38443: PUSH
38444: LD_INT 3
38446: MINUS
38447: PUSH
38448: LD_INT 2
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: LIST
38455: PUSH
38456: LD_VAR 0 1
38460: PUSH
38461: LD_INT 4
38463: MINUS
38464: PUSH
38465: LD_VAR 0 2
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: LIST
38477: PUSH
38478: LD_VAR 0 1
38482: PUSH
38483: LD_VAR 0 2
38487: PUSH
38488: LD_INT 3
38490: PLUS
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: LIST
38499: PUSH
38500: LD_VAR 0 1
38504: PUSH
38505: LD_INT 4
38507: PLUS
38508: PUSH
38509: LD_VAR 0 2
38513: PUSH
38514: LD_INT 4
38516: PLUS
38517: PUSH
38518: LD_INT 5
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: LIST
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: ST_TO_ADDR
// end ; 2 :
38533: GO 39092
38535: LD_INT 2
38537: DOUBLE
38538: EQUAL
38539: IFTRUE 38543
38541: GO 38672
38543: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38544: LD_ADDR_VAR 0 5
38548: PUSH
38549: LD_VAR 0 1
38553: PUSH
38554: LD_VAR 0 2
38558: PUSH
38559: LD_INT 3
38561: MINUS
38562: PUSH
38563: LD_INT 3
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: LIST
38570: PUSH
38571: LD_VAR 0 1
38575: PUSH
38576: LD_INT 4
38578: PLUS
38579: PUSH
38580: LD_VAR 0 2
38584: PUSH
38585: LD_INT 4
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: LIST
38592: PUSH
38593: LD_VAR 0 1
38597: PUSH
38598: LD_VAR 0 2
38602: PUSH
38603: LD_INT 4
38605: PLUS
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: LIST
38614: PUSH
38615: LD_VAR 0 1
38619: PUSH
38620: LD_INT 3
38622: MINUS
38623: PUSH
38624: LD_VAR 0 2
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: LIST
38636: PUSH
38637: LD_VAR 0 1
38641: PUSH
38642: LD_INT 4
38644: MINUS
38645: PUSH
38646: LD_VAR 0 2
38650: PUSH
38651: LD_INT 4
38653: MINUS
38654: PUSH
38655: LD_INT 2
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: LIST
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: ST_TO_ADDR
// end ; 3 :
38670: GO 39092
38672: LD_INT 3
38674: DOUBLE
38675: EQUAL
38676: IFTRUE 38680
38678: GO 38813
38680: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38681: LD_ADDR_VAR 0 5
38685: PUSH
38686: LD_VAR 0 1
38690: PUSH
38691: LD_INT 3
38693: PLUS
38694: PUSH
38695: LD_VAR 0 2
38699: PUSH
38700: LD_INT 4
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: PUSH
38708: LD_VAR 0 1
38712: PUSH
38713: LD_INT 4
38715: PLUS
38716: PUSH
38717: LD_VAR 0 2
38721: PUSH
38722: LD_INT 4
38724: PLUS
38725: PUSH
38726: LD_INT 5
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: LIST
38733: PUSH
38734: LD_VAR 0 1
38738: PUSH
38739: LD_INT 4
38741: MINUS
38742: PUSH
38743: LD_VAR 0 2
38747: PUSH
38748: LD_INT 1
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: LIST
38755: PUSH
38756: LD_VAR 0 1
38760: PUSH
38761: LD_VAR 0 2
38765: PUSH
38766: LD_INT 4
38768: MINUS
38769: PUSH
38770: LD_INT 3
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: LIST
38777: PUSH
38778: LD_VAR 0 1
38782: PUSH
38783: LD_INT 3
38785: MINUS
38786: PUSH
38787: LD_VAR 0 2
38791: PUSH
38792: LD_INT 3
38794: MINUS
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: LIST
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: ST_TO_ADDR
// end ; 4 :
38811: GO 39092
38813: LD_INT 4
38815: DOUBLE
38816: EQUAL
38817: IFTRUE 38821
38819: GO 38954
38821: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38822: LD_ADDR_VAR 0 5
38826: PUSH
38827: LD_VAR 0 1
38831: PUSH
38832: LD_VAR 0 2
38836: PUSH
38837: LD_INT 4
38839: PLUS
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: LIST
38848: PUSH
38849: LD_VAR 0 1
38853: PUSH
38854: LD_INT 3
38856: PLUS
38857: PUSH
38858: LD_VAR 0 2
38862: PUSH
38863: LD_INT 3
38865: PLUS
38866: PUSH
38867: LD_INT 5
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: LIST
38874: PUSH
38875: LD_VAR 0 1
38879: PUSH
38880: LD_INT 4
38882: PLUS
38883: PUSH
38884: LD_VAR 0 2
38888: PUSH
38889: LD_INT 4
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: LIST
38896: PUSH
38897: LD_VAR 0 1
38901: PUSH
38902: LD_VAR 0 2
38906: PUSH
38907: LD_INT 3
38909: MINUS
38910: PUSH
38911: LD_INT 3
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: LIST
38918: PUSH
38919: LD_VAR 0 1
38923: PUSH
38924: LD_INT 4
38926: MINUS
38927: PUSH
38928: LD_VAR 0 2
38932: PUSH
38933: LD_INT 4
38935: MINUS
38936: PUSH
38937: LD_INT 2
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: LIST
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: ST_TO_ADDR
// end ; 5 :
38952: GO 39092
38954: LD_INT 5
38956: DOUBLE
38957: EQUAL
38958: IFTRUE 38962
38960: GO 39091
38962: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38963: LD_ADDR_VAR 0 5
38967: PUSH
38968: LD_VAR 0 1
38972: PUSH
38973: LD_INT 4
38975: MINUS
38976: PUSH
38977: LD_VAR 0 2
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: LIST
38989: PUSH
38990: LD_VAR 0 1
38994: PUSH
38995: LD_VAR 0 2
38999: PUSH
39000: LD_INT 4
39002: MINUS
39003: PUSH
39004: LD_INT 3
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: LIST
39011: PUSH
39012: LD_VAR 0 1
39016: PUSH
39017: LD_INT 4
39019: PLUS
39020: PUSH
39021: LD_VAR 0 2
39025: PUSH
39026: LD_INT 4
39028: PLUS
39029: PUSH
39030: LD_INT 5
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: LIST
39037: PUSH
39038: LD_VAR 0 1
39042: PUSH
39043: LD_INT 3
39045: PLUS
39046: PUSH
39047: LD_VAR 0 2
39051: PUSH
39052: LD_INT 4
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: LIST
39059: PUSH
39060: LD_VAR 0 1
39064: PUSH
39065: LD_VAR 0 2
39069: PUSH
39070: LD_INT 3
39072: PLUS
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: LIST
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: ST_TO_ADDR
// end ; end ;
39089: GO 39092
39091: POP
// result := list ;
39092: LD_ADDR_VAR 0 4
39096: PUSH
39097: LD_VAR 0 5
39101: ST_TO_ADDR
// end ;
39102: LD_VAR 0 4
39106: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39107: LD_INT 0
39109: PPUSH
39110: PPUSH
39111: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39112: LD_VAR 0 1
39116: NOT
39117: PUSH
39118: LD_VAR 0 2
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: LD_INT 2
39128: PUSH
39129: LD_INT 3
39131: PUSH
39132: LD_INT 4
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: IN
39141: NOT
39142: OR
39143: IFFALSE 39147
// exit ;
39145: GO 39230
// tmp := [ ] ;
39147: LD_ADDR_VAR 0 5
39151: PUSH
39152: EMPTY
39153: ST_TO_ADDR
// for i in units do
39154: LD_ADDR_VAR 0 4
39158: PUSH
39159: LD_VAR 0 1
39163: PUSH
39164: FOR_IN
39165: IFFALSE 39199
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39167: LD_ADDR_VAR 0 5
39171: PUSH
39172: LD_VAR 0 5
39176: PPUSH
39177: LD_VAR 0 4
39181: PPUSH
39182: LD_VAR 0 2
39186: PPUSH
39187: CALL_OW 259
39191: PPUSH
39192: CALL 40603 0 2
39196: ST_TO_ADDR
39197: GO 39164
39199: POP
39200: POP
// if not tmp then
39201: LD_VAR 0 5
39205: NOT
39206: IFFALSE 39210
// exit ;
39208: GO 39230
// result := SortListByListDesc ( units , tmp ) ;
39210: LD_ADDR_VAR 0 3
39214: PUSH
39215: LD_VAR 0 1
39219: PPUSH
39220: LD_VAR 0 5
39224: PPUSH
39225: CALL_OW 77
39229: ST_TO_ADDR
// end ;
39230: LD_VAR 0 3
39234: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39235: LD_INT 0
39237: PPUSH
39238: PPUSH
39239: PPUSH
// result := false ;
39240: LD_ADDR_VAR 0 3
39244: PUSH
39245: LD_INT 0
39247: ST_TO_ADDR
// if not building then
39248: LD_VAR 0 2
39252: NOT
39253: IFFALSE 39257
// exit ;
39255: GO 39395
// x := GetX ( building ) ;
39257: LD_ADDR_VAR 0 4
39261: PUSH
39262: LD_VAR 0 2
39266: PPUSH
39267: CALL_OW 250
39271: ST_TO_ADDR
// y := GetY ( building ) ;
39272: LD_ADDR_VAR 0 5
39276: PUSH
39277: LD_VAR 0 2
39281: PPUSH
39282: CALL_OW 251
39286: ST_TO_ADDR
// if not x or not y then
39287: LD_VAR 0 4
39291: NOT
39292: PUSH
39293: LD_VAR 0 5
39297: NOT
39298: OR
39299: IFFALSE 39303
// exit ;
39301: GO 39395
// if GetTaskList ( unit ) then
39303: LD_VAR 0 1
39307: PPUSH
39308: CALL_OW 437
39312: IFFALSE 39395
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39314: LD_STRING e
39316: PUSH
39317: LD_VAR 0 1
39321: PPUSH
39322: CALL_OW 437
39326: PUSH
39327: LD_INT 1
39329: ARRAY
39330: PUSH
39331: LD_INT 1
39333: ARRAY
39334: EQUAL
39335: PUSH
39336: LD_VAR 0 4
39340: PUSH
39341: LD_VAR 0 1
39345: PPUSH
39346: CALL_OW 437
39350: PUSH
39351: LD_INT 1
39353: ARRAY
39354: PUSH
39355: LD_INT 2
39357: ARRAY
39358: EQUAL
39359: AND
39360: PUSH
39361: LD_VAR 0 5
39365: PUSH
39366: LD_VAR 0 1
39370: PPUSH
39371: CALL_OW 437
39375: PUSH
39376: LD_INT 1
39378: ARRAY
39379: PUSH
39380: LD_INT 3
39382: ARRAY
39383: EQUAL
39384: AND
39385: IFFALSE 39395
// result := true end ;
39387: LD_ADDR_VAR 0 3
39391: PUSH
39392: LD_INT 1
39394: ST_TO_ADDR
// end ;
39395: LD_VAR 0 3
39399: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39400: LD_INT 0
39402: PPUSH
// result := false ;
39403: LD_ADDR_VAR 0 4
39407: PUSH
39408: LD_INT 0
39410: ST_TO_ADDR
// if GetTaskList ( unit ) then
39411: LD_VAR 0 1
39415: PPUSH
39416: CALL_OW 437
39420: IFFALSE 39503
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39422: LD_STRING M
39424: PUSH
39425: LD_VAR 0 1
39429: PPUSH
39430: CALL_OW 437
39434: PUSH
39435: LD_INT 1
39437: ARRAY
39438: PUSH
39439: LD_INT 1
39441: ARRAY
39442: EQUAL
39443: PUSH
39444: LD_VAR 0 2
39448: PUSH
39449: LD_VAR 0 1
39453: PPUSH
39454: CALL_OW 437
39458: PUSH
39459: LD_INT 1
39461: ARRAY
39462: PUSH
39463: LD_INT 2
39465: ARRAY
39466: EQUAL
39467: AND
39468: PUSH
39469: LD_VAR 0 3
39473: PUSH
39474: LD_VAR 0 1
39478: PPUSH
39479: CALL_OW 437
39483: PUSH
39484: LD_INT 1
39486: ARRAY
39487: PUSH
39488: LD_INT 3
39490: ARRAY
39491: EQUAL
39492: AND
39493: IFFALSE 39503
// result := true ;
39495: LD_ADDR_VAR 0 4
39499: PUSH
39500: LD_INT 1
39502: ST_TO_ADDR
// end ; end ;
39503: LD_VAR 0 4
39507: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39508: LD_INT 0
39510: PPUSH
39511: PPUSH
39512: PPUSH
39513: PPUSH
// if not unit or not area then
39514: LD_VAR 0 1
39518: NOT
39519: PUSH
39520: LD_VAR 0 2
39524: NOT
39525: OR
39526: IFFALSE 39530
// exit ;
39528: GO 39706
// tmp := AreaToList ( area , i ) ;
39530: LD_ADDR_VAR 0 6
39534: PUSH
39535: LD_VAR 0 2
39539: PPUSH
39540: LD_VAR 0 5
39544: PPUSH
39545: CALL_OW 517
39549: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39550: LD_ADDR_VAR 0 5
39554: PUSH
39555: DOUBLE
39556: LD_INT 1
39558: DEC
39559: ST_TO_ADDR
39560: LD_VAR 0 6
39564: PUSH
39565: LD_INT 1
39567: ARRAY
39568: PUSH
39569: FOR_TO
39570: IFFALSE 39704
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39572: LD_ADDR_VAR 0 7
39576: PUSH
39577: LD_VAR 0 6
39581: PUSH
39582: LD_INT 1
39584: ARRAY
39585: PUSH
39586: LD_VAR 0 5
39590: ARRAY
39591: PUSH
39592: LD_VAR 0 6
39596: PUSH
39597: LD_INT 2
39599: ARRAY
39600: PUSH
39601: LD_VAR 0 5
39605: ARRAY
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39611: LD_INT 92
39613: PUSH
39614: LD_VAR 0 7
39618: PUSH
39619: LD_INT 1
39621: ARRAY
39622: PUSH
39623: LD_VAR 0 7
39627: PUSH
39628: LD_INT 2
39630: ARRAY
39631: PUSH
39632: LD_INT 2
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: PPUSH
39641: CALL_OW 69
39645: PUSH
39646: LD_INT 0
39648: EQUAL
39649: IFFALSE 39702
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39651: LD_VAR 0 1
39655: PPUSH
39656: LD_VAR 0 7
39660: PUSH
39661: LD_INT 1
39663: ARRAY
39664: PPUSH
39665: LD_VAR 0 7
39669: PUSH
39670: LD_INT 2
39672: ARRAY
39673: PPUSH
39674: LD_VAR 0 3
39678: PPUSH
39679: CALL_OW 48
// result := IsPlaced ( unit ) ;
39683: LD_ADDR_VAR 0 4
39687: PUSH
39688: LD_VAR 0 1
39692: PPUSH
39693: CALL_OW 305
39697: ST_TO_ADDR
// exit ;
39698: POP
39699: POP
39700: GO 39706
// end ; end ;
39702: GO 39569
39704: POP
39705: POP
// end ;
39706: LD_VAR 0 4
39710: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39711: LD_INT 0
39713: PPUSH
39714: PPUSH
39715: PPUSH
// if not side or side > 8 then
39716: LD_VAR 0 1
39720: NOT
39721: PUSH
39722: LD_VAR 0 1
39726: PUSH
39727: LD_INT 8
39729: GREATER
39730: OR
39731: IFFALSE 39735
// exit ;
39733: GO 39922
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39735: LD_ADDR_VAR 0 4
39739: PUSH
39740: LD_INT 22
39742: PUSH
39743: LD_VAR 0 1
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 21
39754: PUSH
39755: LD_INT 3
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PPUSH
39766: CALL_OW 69
39770: ST_TO_ADDR
// if not tmp then
39771: LD_VAR 0 4
39775: NOT
39776: IFFALSE 39780
// exit ;
39778: GO 39922
// enable_addtolog := true ;
39780: LD_ADDR_OWVAR 81
39784: PUSH
39785: LD_INT 1
39787: ST_TO_ADDR
// AddToLog ( [ ) ;
39788: LD_STRING [
39790: PPUSH
39791: CALL_OW 561
// for i in tmp do
39795: LD_ADDR_VAR 0 3
39799: PUSH
39800: LD_VAR 0 4
39804: PUSH
39805: FOR_IN
39806: IFFALSE 39913
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39808: LD_STRING [
39810: PUSH
39811: LD_VAR 0 3
39815: PPUSH
39816: CALL_OW 266
39820: STR
39821: PUSH
39822: LD_STRING , 
39824: STR
39825: PUSH
39826: LD_VAR 0 3
39830: PPUSH
39831: CALL_OW 250
39835: STR
39836: PUSH
39837: LD_STRING , 
39839: STR
39840: PUSH
39841: LD_VAR 0 3
39845: PPUSH
39846: CALL_OW 251
39850: STR
39851: PUSH
39852: LD_STRING , 
39854: STR
39855: PUSH
39856: LD_VAR 0 3
39860: PPUSH
39861: CALL_OW 254
39865: STR
39866: PUSH
39867: LD_STRING , 
39869: STR
39870: PUSH
39871: LD_VAR 0 3
39875: PPUSH
39876: LD_INT 1
39878: PPUSH
39879: CALL_OW 268
39883: STR
39884: PUSH
39885: LD_STRING , 
39887: STR
39888: PUSH
39889: LD_VAR 0 3
39893: PPUSH
39894: LD_INT 2
39896: PPUSH
39897: CALL_OW 268
39901: STR
39902: PUSH
39903: LD_STRING ],
39905: STR
39906: PPUSH
39907: CALL_OW 561
// end ;
39911: GO 39805
39913: POP
39914: POP
// AddToLog ( ]; ) ;
39915: LD_STRING ];
39917: PPUSH
39918: CALL_OW 561
// end ;
39922: LD_VAR 0 2
39926: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39927: LD_INT 0
39929: PPUSH
39930: PPUSH
39931: PPUSH
39932: PPUSH
39933: PPUSH
// if not area or not rate or not max then
39934: LD_VAR 0 1
39938: NOT
39939: PUSH
39940: LD_VAR 0 2
39944: NOT
39945: OR
39946: PUSH
39947: LD_VAR 0 4
39951: NOT
39952: OR
39953: IFFALSE 39957
// exit ;
39955: GO 40146
// while 1 do
39957: LD_INT 1
39959: IFFALSE 40146
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39961: LD_ADDR_VAR 0 9
39965: PUSH
39966: LD_VAR 0 1
39970: PPUSH
39971: LD_INT 1
39973: PPUSH
39974: CALL_OW 287
39978: PUSH
39979: LD_INT 10
39981: MUL
39982: ST_TO_ADDR
// r := rate / 10 ;
39983: LD_ADDR_VAR 0 7
39987: PUSH
39988: LD_VAR 0 2
39992: PUSH
39993: LD_INT 10
39995: DIVREAL
39996: ST_TO_ADDR
// time := 1 1$00 ;
39997: LD_ADDR_VAR 0 8
40001: PUSH
40002: LD_INT 2100
40004: ST_TO_ADDR
// if amount < min then
40005: LD_VAR 0 9
40009: PUSH
40010: LD_VAR 0 3
40014: LESS
40015: IFFALSE 40033
// r := r * 2 else
40017: LD_ADDR_VAR 0 7
40021: PUSH
40022: LD_VAR 0 7
40026: PUSH
40027: LD_INT 2
40029: MUL
40030: ST_TO_ADDR
40031: GO 40059
// if amount > max then
40033: LD_VAR 0 9
40037: PUSH
40038: LD_VAR 0 4
40042: GREATER
40043: IFFALSE 40059
// r := r / 2 ;
40045: LD_ADDR_VAR 0 7
40049: PUSH
40050: LD_VAR 0 7
40054: PUSH
40055: LD_INT 2
40057: DIVREAL
40058: ST_TO_ADDR
// time := time / r ;
40059: LD_ADDR_VAR 0 8
40063: PUSH
40064: LD_VAR 0 8
40068: PUSH
40069: LD_VAR 0 7
40073: DIVREAL
40074: ST_TO_ADDR
// if time < 0 then
40075: LD_VAR 0 8
40079: PUSH
40080: LD_INT 0
40082: LESS
40083: IFFALSE 40100
// time := time * - 1 ;
40085: LD_ADDR_VAR 0 8
40089: PUSH
40090: LD_VAR 0 8
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: MUL
40099: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40100: LD_VAR 0 8
40104: PUSH
40105: LD_INT 35
40107: PPUSH
40108: LD_INT 875
40110: PPUSH
40111: CALL_OW 12
40115: PLUS
40116: PPUSH
40117: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40121: LD_INT 1
40123: PPUSH
40124: LD_INT 5
40126: PPUSH
40127: CALL_OW 12
40131: PPUSH
40132: LD_VAR 0 1
40136: PPUSH
40137: LD_INT 1
40139: PPUSH
40140: CALL_OW 55
// end ;
40144: GO 39957
// end ;
40146: LD_VAR 0 5
40150: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40151: LD_INT 0
40153: PPUSH
40154: PPUSH
40155: PPUSH
40156: PPUSH
40157: PPUSH
40158: PPUSH
40159: PPUSH
40160: PPUSH
// if not turrets or not factories then
40161: LD_VAR 0 1
40165: NOT
40166: PUSH
40167: LD_VAR 0 2
40171: NOT
40172: OR
40173: IFFALSE 40177
// exit ;
40175: GO 40484
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40177: LD_ADDR_VAR 0 10
40181: PUSH
40182: LD_INT 5
40184: PUSH
40185: LD_INT 6
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: LD_INT 4
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 3
40204: PUSH
40205: LD_INT 5
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 24
40219: PUSH
40220: LD_INT 25
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 23
40229: PUSH
40230: LD_INT 27
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 42
40243: PUSH
40244: LD_INT 43
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 44
40253: PUSH
40254: LD_INT 46
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 45
40263: PUSH
40264: LD_INT 47
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: LIST
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: LIST
40280: ST_TO_ADDR
// result := [ ] ;
40281: LD_ADDR_VAR 0 3
40285: PUSH
40286: EMPTY
40287: ST_TO_ADDR
// for i in turrets do
40288: LD_ADDR_VAR 0 4
40292: PUSH
40293: LD_VAR 0 1
40297: PUSH
40298: FOR_IN
40299: IFFALSE 40482
// begin nat := GetNation ( i ) ;
40301: LD_ADDR_VAR 0 7
40305: PUSH
40306: LD_VAR 0 4
40310: PPUSH
40311: CALL_OW 248
40315: ST_TO_ADDR
// weapon := 0 ;
40316: LD_ADDR_VAR 0 8
40320: PUSH
40321: LD_INT 0
40323: ST_TO_ADDR
// if not nat then
40324: LD_VAR 0 7
40328: NOT
40329: IFFALSE 40333
// continue ;
40331: GO 40298
// for j in list [ nat ] do
40333: LD_ADDR_VAR 0 5
40337: PUSH
40338: LD_VAR 0 10
40342: PUSH
40343: LD_VAR 0 7
40347: ARRAY
40348: PUSH
40349: FOR_IN
40350: IFFALSE 40391
// if GetBWeapon ( i ) = j [ 1 ] then
40352: LD_VAR 0 4
40356: PPUSH
40357: CALL_OW 269
40361: PUSH
40362: LD_VAR 0 5
40366: PUSH
40367: LD_INT 1
40369: ARRAY
40370: EQUAL
40371: IFFALSE 40389
// begin weapon := j [ 2 ] ;
40373: LD_ADDR_VAR 0 8
40377: PUSH
40378: LD_VAR 0 5
40382: PUSH
40383: LD_INT 2
40385: ARRAY
40386: ST_TO_ADDR
// break ;
40387: GO 40391
// end ;
40389: GO 40349
40391: POP
40392: POP
// if not weapon then
40393: LD_VAR 0 8
40397: NOT
40398: IFFALSE 40402
// continue ;
40400: GO 40298
// for k in factories do
40402: LD_ADDR_VAR 0 6
40406: PUSH
40407: LD_VAR 0 2
40411: PUSH
40412: FOR_IN
40413: IFFALSE 40478
// begin weapons := AvailableWeaponList ( k ) ;
40415: LD_ADDR_VAR 0 9
40419: PUSH
40420: LD_VAR 0 6
40424: PPUSH
40425: CALL_OW 478
40429: ST_TO_ADDR
// if not weapons then
40430: LD_VAR 0 9
40434: NOT
40435: IFFALSE 40439
// continue ;
40437: GO 40412
// if weapon in weapons then
40439: LD_VAR 0 8
40443: PUSH
40444: LD_VAR 0 9
40448: IN
40449: IFFALSE 40476
// begin result := [ i , weapon ] ;
40451: LD_ADDR_VAR 0 3
40455: PUSH
40456: LD_VAR 0 4
40460: PUSH
40461: LD_VAR 0 8
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: ST_TO_ADDR
// exit ;
40470: POP
40471: POP
40472: POP
40473: POP
40474: GO 40484
// end ; end ;
40476: GO 40412
40478: POP
40479: POP
// end ;
40480: GO 40298
40482: POP
40483: POP
// end ;
40484: LD_VAR 0 3
40488: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40489: LD_INT 0
40491: PPUSH
// if not side or side > 8 then
40492: LD_VAR 0 3
40496: NOT
40497: PUSH
40498: LD_VAR 0 3
40502: PUSH
40503: LD_INT 8
40505: GREATER
40506: OR
40507: IFFALSE 40511
// exit ;
40509: GO 40570
// if not range then
40511: LD_VAR 0 4
40515: NOT
40516: IFFALSE 40527
// range := - 12 ;
40518: LD_ADDR_VAR 0 4
40522: PUSH
40523: LD_INT 12
40525: NEG
40526: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40527: LD_VAR 0 1
40531: PPUSH
40532: LD_VAR 0 2
40536: PPUSH
40537: LD_VAR 0 3
40541: PPUSH
40542: LD_VAR 0 4
40546: PPUSH
40547: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40551: LD_VAR 0 1
40555: PPUSH
40556: LD_VAR 0 2
40560: PPUSH
40561: LD_VAR 0 3
40565: PPUSH
40566: CALL_OW 331
// end ;
40570: LD_VAR 0 5
40574: RET
// export function Video ( mode ) ; begin
40575: LD_INT 0
40577: PPUSH
// ingame_video = mode ;
40578: LD_ADDR_OWVAR 52
40582: PUSH
40583: LD_VAR 0 1
40587: ST_TO_ADDR
// interface_hidden = mode ;
40588: LD_ADDR_OWVAR 54
40592: PUSH
40593: LD_VAR 0 1
40597: ST_TO_ADDR
// end ;
40598: LD_VAR 0 2
40602: RET
// export function Join ( array , element ) ; begin
40603: LD_INT 0
40605: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40606: LD_ADDR_VAR 0 3
40610: PUSH
40611: LD_VAR 0 1
40615: PPUSH
40616: LD_VAR 0 1
40620: PUSH
40621: LD_INT 1
40623: PLUS
40624: PPUSH
40625: LD_VAR 0 2
40629: PPUSH
40630: CALL_OW 1
40634: ST_TO_ADDR
// end ;
40635: LD_VAR 0 3
40639: RET
// export function JoinUnion ( array , element ) ; begin
40640: LD_INT 0
40642: PPUSH
// result := array union element ;
40643: LD_ADDR_VAR 0 3
40647: PUSH
40648: LD_VAR 0 1
40652: PUSH
40653: LD_VAR 0 2
40657: UNION
40658: ST_TO_ADDR
// end ;
40659: LD_VAR 0 3
40663: RET
// export function GetBehemoths ( side ) ; begin
40664: LD_INT 0
40666: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40667: LD_ADDR_VAR 0 2
40671: PUSH
40672: LD_INT 22
40674: PUSH
40675: LD_VAR 0 1
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 31
40686: PUSH
40687: LD_INT 25
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PPUSH
40698: CALL_OW 69
40702: ST_TO_ADDR
// end ;
40703: LD_VAR 0 2
40707: RET
// export function Shuffle ( array ) ; var i , index ; begin
40708: LD_INT 0
40710: PPUSH
40711: PPUSH
40712: PPUSH
// result := [ ] ;
40713: LD_ADDR_VAR 0 2
40717: PUSH
40718: EMPTY
40719: ST_TO_ADDR
// if not array then
40720: LD_VAR 0 1
40724: NOT
40725: IFFALSE 40729
// exit ;
40727: GO 40828
// Randomize ;
40729: CALL_OW 10
// for i = array downto 1 do
40733: LD_ADDR_VAR 0 3
40737: PUSH
40738: DOUBLE
40739: LD_VAR 0 1
40743: INC
40744: ST_TO_ADDR
40745: LD_INT 1
40747: PUSH
40748: FOR_DOWNTO
40749: IFFALSE 40826
// begin index := rand ( 1 , array ) ;
40751: LD_ADDR_VAR 0 4
40755: PUSH
40756: LD_INT 1
40758: PPUSH
40759: LD_VAR 0 1
40763: PPUSH
40764: CALL_OW 12
40768: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40769: LD_ADDR_VAR 0 2
40773: PUSH
40774: LD_VAR 0 2
40778: PPUSH
40779: LD_VAR 0 2
40783: PUSH
40784: LD_INT 1
40786: PLUS
40787: PPUSH
40788: LD_VAR 0 1
40792: PUSH
40793: LD_VAR 0 4
40797: ARRAY
40798: PPUSH
40799: CALL_OW 2
40803: ST_TO_ADDR
// array := Delete ( array , index ) ;
40804: LD_ADDR_VAR 0 1
40808: PUSH
40809: LD_VAR 0 1
40813: PPUSH
40814: LD_VAR 0 4
40818: PPUSH
40819: CALL_OW 3
40823: ST_TO_ADDR
// end ;
40824: GO 40748
40826: POP
40827: POP
// end ;
40828: LD_VAR 0 2
40832: RET
// export function GetBaseMaterials ( base ) ; begin
40833: LD_INT 0
40835: PPUSH
// result := [ 0 , 0 , 0 ] ;
40836: LD_ADDR_VAR 0 2
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: LIST
40854: ST_TO_ADDR
// if not base then
40855: LD_VAR 0 1
40859: NOT
40860: IFFALSE 40864
// exit ;
40862: GO 40913
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40864: LD_ADDR_VAR 0 2
40868: PUSH
40869: LD_VAR 0 1
40873: PPUSH
40874: LD_INT 1
40876: PPUSH
40877: CALL_OW 275
40881: PUSH
40882: LD_VAR 0 1
40886: PPUSH
40887: LD_INT 2
40889: PPUSH
40890: CALL_OW 275
40894: PUSH
40895: LD_VAR 0 1
40899: PPUSH
40900: LD_INT 3
40902: PPUSH
40903: CALL_OW 275
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: LIST
40912: ST_TO_ADDR
// end ;
40913: LD_VAR 0 2
40917: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40918: LD_INT 0
40920: PPUSH
40921: PPUSH
// result := array ;
40922: LD_ADDR_VAR 0 3
40926: PUSH
40927: LD_VAR 0 1
40931: ST_TO_ADDR
// if size >= result then
40932: LD_VAR 0 2
40936: PUSH
40937: LD_VAR 0 3
40941: GREATEREQUAL
40942: IFFALSE 40946
// exit ;
40944: GO 40996
// if size then
40946: LD_VAR 0 2
40950: IFFALSE 40996
// for i := array downto size do
40952: LD_ADDR_VAR 0 4
40956: PUSH
40957: DOUBLE
40958: LD_VAR 0 1
40962: INC
40963: ST_TO_ADDR
40964: LD_VAR 0 2
40968: PUSH
40969: FOR_DOWNTO
40970: IFFALSE 40994
// result := Delete ( result , result ) ;
40972: LD_ADDR_VAR 0 3
40976: PUSH
40977: LD_VAR 0 3
40981: PPUSH
40982: LD_VAR 0 3
40986: PPUSH
40987: CALL_OW 3
40991: ST_TO_ADDR
40992: GO 40969
40994: POP
40995: POP
// end ;
40996: LD_VAR 0 3
41000: RET
// export function ComExit ( unit ) ; var tmp ; begin
41001: LD_INT 0
41003: PPUSH
41004: PPUSH
// if not IsInUnit ( unit ) then
41005: LD_VAR 0 1
41009: PPUSH
41010: CALL_OW 310
41014: NOT
41015: IFFALSE 41019
// exit ;
41017: GO 41079
// tmp := IsInUnit ( unit ) ;
41019: LD_ADDR_VAR 0 3
41023: PUSH
41024: LD_VAR 0 1
41028: PPUSH
41029: CALL_OW 310
41033: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41034: LD_VAR 0 3
41038: PPUSH
41039: CALL_OW 247
41043: PUSH
41044: LD_INT 2
41046: EQUAL
41047: IFFALSE 41060
// ComExitVehicle ( unit ) else
41049: LD_VAR 0 1
41053: PPUSH
41054: CALL_OW 121
41058: GO 41069
// ComExitBuilding ( unit ) ;
41060: LD_VAR 0 1
41064: PPUSH
41065: CALL_OW 122
// result := tmp ;
41069: LD_ADDR_VAR 0 2
41073: PUSH
41074: LD_VAR 0 3
41078: ST_TO_ADDR
// end ;
41079: LD_VAR 0 2
41083: RET
// export function ComExitAll ( units ) ; var i ; begin
41084: LD_INT 0
41086: PPUSH
41087: PPUSH
// if not units then
41088: LD_VAR 0 1
41092: NOT
41093: IFFALSE 41097
// exit ;
41095: GO 41123
// for i in units do
41097: LD_ADDR_VAR 0 3
41101: PUSH
41102: LD_VAR 0 1
41106: PUSH
41107: FOR_IN
41108: IFFALSE 41121
// ComExit ( i ) ;
41110: LD_VAR 0 3
41114: PPUSH
41115: CALL 41001 0 1
41119: GO 41107
41121: POP
41122: POP
// end ;
41123: LD_VAR 0 2
41127: RET
// export function ResetHc ; begin
41128: LD_INT 0
41130: PPUSH
// InitHc ;
41131: CALL_OW 19
// hc_importance := 0 ;
41135: LD_ADDR_OWVAR 32
41139: PUSH
41140: LD_INT 0
41142: ST_TO_ADDR
// end ;
41143: LD_VAR 0 1
41147: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41148: LD_INT 0
41150: PPUSH
41151: PPUSH
41152: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41153: LD_ADDR_VAR 0 6
41157: PUSH
41158: LD_VAR 0 1
41162: PUSH
41163: LD_VAR 0 3
41167: PLUS
41168: PUSH
41169: LD_INT 2
41171: DIV
41172: ST_TO_ADDR
// if _x < 0 then
41173: LD_VAR 0 6
41177: PUSH
41178: LD_INT 0
41180: LESS
41181: IFFALSE 41198
// _x := _x * - 1 ;
41183: LD_ADDR_VAR 0 6
41187: PUSH
41188: LD_VAR 0 6
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: MUL
41197: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41198: LD_ADDR_VAR 0 7
41202: PUSH
41203: LD_VAR 0 2
41207: PUSH
41208: LD_VAR 0 4
41212: PLUS
41213: PUSH
41214: LD_INT 2
41216: DIV
41217: ST_TO_ADDR
// if _y < 0 then
41218: LD_VAR 0 7
41222: PUSH
41223: LD_INT 0
41225: LESS
41226: IFFALSE 41243
// _y := _y * - 1 ;
41228: LD_ADDR_VAR 0 7
41232: PUSH
41233: LD_VAR 0 7
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: MUL
41242: ST_TO_ADDR
// result := [ _x , _y ] ;
41243: LD_ADDR_VAR 0 5
41247: PUSH
41248: LD_VAR 0 6
41252: PUSH
41253: LD_VAR 0 7
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: ST_TO_ADDR
// end ;
41262: LD_VAR 0 5
41266: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41267: LD_INT 0
41269: PPUSH
41270: PPUSH
41271: PPUSH
41272: PPUSH
// task := GetTaskList ( unit ) ;
41273: LD_ADDR_VAR 0 7
41277: PUSH
41278: LD_VAR 0 1
41282: PPUSH
41283: CALL_OW 437
41287: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41288: LD_VAR 0 7
41292: NOT
41293: PUSH
41294: LD_VAR 0 1
41298: PPUSH
41299: LD_VAR 0 2
41303: PPUSH
41304: CALL_OW 308
41308: NOT
41309: AND
41310: IFFALSE 41314
// exit ;
41312: GO 41432
// if IsInArea ( unit , area ) then
41314: LD_VAR 0 1
41318: PPUSH
41319: LD_VAR 0 2
41323: PPUSH
41324: CALL_OW 308
41328: IFFALSE 41346
// begin ComMoveToArea ( unit , goAway ) ;
41330: LD_VAR 0 1
41334: PPUSH
41335: LD_VAR 0 3
41339: PPUSH
41340: CALL_OW 113
// exit ;
41344: GO 41432
// end ; if task [ 1 ] [ 1 ] <> M then
41346: LD_VAR 0 7
41350: PUSH
41351: LD_INT 1
41353: ARRAY
41354: PUSH
41355: LD_INT 1
41357: ARRAY
41358: PUSH
41359: LD_STRING M
41361: NONEQUAL
41362: IFFALSE 41366
// exit ;
41364: GO 41432
// x := task [ 1 ] [ 2 ] ;
41366: LD_ADDR_VAR 0 5
41370: PUSH
41371: LD_VAR 0 7
41375: PUSH
41376: LD_INT 1
41378: ARRAY
41379: PUSH
41380: LD_INT 2
41382: ARRAY
41383: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41384: LD_ADDR_VAR 0 6
41388: PUSH
41389: LD_VAR 0 7
41393: PUSH
41394: LD_INT 1
41396: ARRAY
41397: PUSH
41398: LD_INT 3
41400: ARRAY
41401: ST_TO_ADDR
// if InArea ( x , y , area ) then
41402: LD_VAR 0 5
41406: PPUSH
41407: LD_VAR 0 6
41411: PPUSH
41412: LD_VAR 0 2
41416: PPUSH
41417: CALL_OW 309
41421: IFFALSE 41432
// ComStop ( unit ) ;
41423: LD_VAR 0 1
41427: PPUSH
41428: CALL_OW 141
// end ;
41432: LD_VAR 0 4
41436: RET
// export function Abs ( value ) ; begin
41437: LD_INT 0
41439: PPUSH
// result := value ;
41440: LD_ADDR_VAR 0 2
41444: PUSH
41445: LD_VAR 0 1
41449: ST_TO_ADDR
// if value < 0 then
41450: LD_VAR 0 1
41454: PUSH
41455: LD_INT 0
41457: LESS
41458: IFFALSE 41475
// result := value * - 1 ;
41460: LD_ADDR_VAR 0 2
41464: PUSH
41465: LD_VAR 0 1
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: MUL
41474: ST_TO_ADDR
// end ;
41475: LD_VAR 0 2
41479: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41480: LD_INT 0
41482: PPUSH
41483: PPUSH
41484: PPUSH
41485: PPUSH
41486: PPUSH
41487: PPUSH
41488: PPUSH
41489: PPUSH
// if not unit or not building then
41490: LD_VAR 0 1
41494: NOT
41495: PUSH
41496: LD_VAR 0 2
41500: NOT
41501: OR
41502: IFFALSE 41506
// exit ;
41504: GO 41732
// x := GetX ( building ) ;
41506: LD_ADDR_VAR 0 4
41510: PUSH
41511: LD_VAR 0 2
41515: PPUSH
41516: CALL_OW 250
41520: ST_TO_ADDR
// y := GetY ( building ) ;
41521: LD_ADDR_VAR 0 6
41525: PUSH
41526: LD_VAR 0 2
41530: PPUSH
41531: CALL_OW 251
41535: ST_TO_ADDR
// d := GetDir ( building ) ;
41536: LD_ADDR_VAR 0 8
41540: PUSH
41541: LD_VAR 0 2
41545: PPUSH
41546: CALL_OW 254
41550: ST_TO_ADDR
// r := 4 ;
41551: LD_ADDR_VAR 0 9
41555: PUSH
41556: LD_INT 4
41558: ST_TO_ADDR
// for i := 1 to 5 do
41559: LD_ADDR_VAR 0 10
41563: PUSH
41564: DOUBLE
41565: LD_INT 1
41567: DEC
41568: ST_TO_ADDR
41569: LD_INT 5
41571: PUSH
41572: FOR_TO
41573: IFFALSE 41730
// begin _x := ShiftX ( x , d , r + i ) ;
41575: LD_ADDR_VAR 0 5
41579: PUSH
41580: LD_VAR 0 4
41584: PPUSH
41585: LD_VAR 0 8
41589: PPUSH
41590: LD_VAR 0 9
41594: PUSH
41595: LD_VAR 0 10
41599: PLUS
41600: PPUSH
41601: CALL_OW 272
41605: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41606: LD_ADDR_VAR 0 7
41610: PUSH
41611: LD_VAR 0 6
41615: PPUSH
41616: LD_VAR 0 8
41620: PPUSH
41621: LD_VAR 0 9
41625: PUSH
41626: LD_VAR 0 10
41630: PLUS
41631: PPUSH
41632: CALL_OW 273
41636: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41637: LD_VAR 0 5
41641: PPUSH
41642: LD_VAR 0 7
41646: PPUSH
41647: CALL_OW 488
41651: PUSH
41652: LD_VAR 0 5
41656: PPUSH
41657: LD_VAR 0 7
41661: PPUSH
41662: CALL_OW 428
41666: PPUSH
41667: CALL_OW 247
41671: PUSH
41672: LD_INT 3
41674: PUSH
41675: LD_INT 2
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: IN
41682: NOT
41683: AND
41684: IFFALSE 41728
// begin ComMoveXY ( unit , _x , _y ) ;
41686: LD_VAR 0 1
41690: PPUSH
41691: LD_VAR 0 5
41695: PPUSH
41696: LD_VAR 0 7
41700: PPUSH
41701: CALL_OW 111
// result := [ _x , _y ] ;
41705: LD_ADDR_VAR 0 3
41709: PUSH
41710: LD_VAR 0 5
41714: PUSH
41715: LD_VAR 0 7
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: ST_TO_ADDR
// exit ;
41724: POP
41725: POP
41726: GO 41732
// end ; end ;
41728: GO 41572
41730: POP
41731: POP
// end ;
41732: LD_VAR 0 3
41736: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41737: LD_INT 0
41739: PPUSH
41740: PPUSH
41741: PPUSH
// result := 0 ;
41742: LD_ADDR_VAR 0 3
41746: PUSH
41747: LD_INT 0
41749: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41750: LD_VAR 0 1
41754: PUSH
41755: LD_INT 0
41757: LESS
41758: PUSH
41759: LD_VAR 0 1
41763: PUSH
41764: LD_INT 8
41766: GREATER
41767: OR
41768: PUSH
41769: LD_VAR 0 2
41773: PUSH
41774: LD_INT 0
41776: LESS
41777: OR
41778: PUSH
41779: LD_VAR 0 2
41783: PUSH
41784: LD_INT 8
41786: GREATER
41787: OR
41788: IFFALSE 41792
// exit ;
41790: GO 41867
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41792: LD_ADDR_VAR 0 4
41796: PUSH
41797: LD_INT 22
41799: PUSH
41800: LD_VAR 0 2
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PPUSH
41809: CALL_OW 69
41813: PUSH
41814: FOR_IN
41815: IFFALSE 41865
// begin un := UnitShoot ( i ) ;
41817: LD_ADDR_VAR 0 5
41821: PUSH
41822: LD_VAR 0 4
41826: PPUSH
41827: CALL_OW 504
41831: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41832: LD_VAR 0 5
41836: PPUSH
41837: CALL_OW 255
41841: PUSH
41842: LD_VAR 0 1
41846: EQUAL
41847: IFFALSE 41863
// begin result := un ;
41849: LD_ADDR_VAR 0 3
41853: PUSH
41854: LD_VAR 0 5
41858: ST_TO_ADDR
// exit ;
41859: POP
41860: POP
41861: GO 41867
// end ; end ;
41863: GO 41814
41865: POP
41866: POP
// end ;
41867: LD_VAR 0 3
41871: RET
// export function GetCargoBay ( units ) ; begin
41872: LD_INT 0
41874: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41875: LD_ADDR_VAR 0 2
41879: PUSH
41880: LD_VAR 0 1
41884: PPUSH
41885: LD_INT 2
41887: PUSH
41888: LD_INT 34
41890: PUSH
41891: LD_INT 12
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 34
41900: PUSH
41901: LD_INT 51
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 34
41910: PUSH
41911: LD_INT 32
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 34
41920: PUSH
41921: LD_INT 89
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: PPUSH
41935: CALL_OW 72
41939: ST_TO_ADDR
// end ;
41940: LD_VAR 0 2
41944: RET
// export function Negate ( value ) ; begin
41945: LD_INT 0
41947: PPUSH
// result := not value ;
41948: LD_ADDR_VAR 0 2
41952: PUSH
41953: LD_VAR 0 1
41957: NOT
41958: ST_TO_ADDR
// end ;
41959: LD_VAR 0 2
41963: RET
// export function Inc ( value ) ; begin
41964: LD_INT 0
41966: PPUSH
// result := value + 1 ;
41967: LD_ADDR_VAR 0 2
41971: PUSH
41972: LD_VAR 0 1
41976: PUSH
41977: LD_INT 1
41979: PLUS
41980: ST_TO_ADDR
// end ;
41981: LD_VAR 0 2
41985: RET
// export function Dec ( value ) ; begin
41986: LD_INT 0
41988: PPUSH
// result := value - 1 ;
41989: LD_ADDR_VAR 0 2
41993: PUSH
41994: LD_VAR 0 1
41998: PUSH
41999: LD_INT 1
42001: MINUS
42002: ST_TO_ADDR
// end ;
42003: LD_VAR 0 2
42007: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42008: LD_INT 0
42010: PPUSH
42011: PPUSH
42012: PPUSH
42013: PPUSH
42014: PPUSH
42015: PPUSH
42016: PPUSH
42017: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42018: LD_VAR 0 1
42022: PPUSH
42023: LD_VAR 0 2
42027: PPUSH
42028: CALL_OW 488
42032: NOT
42033: PUSH
42034: LD_VAR 0 3
42038: PPUSH
42039: LD_VAR 0 4
42043: PPUSH
42044: CALL_OW 488
42048: NOT
42049: OR
42050: IFFALSE 42063
// begin result := - 1 ;
42052: LD_ADDR_VAR 0 5
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: ST_TO_ADDR
// exit ;
42061: GO 42298
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42063: LD_ADDR_VAR 0 12
42067: PUSH
42068: LD_VAR 0 1
42072: PPUSH
42073: LD_VAR 0 2
42077: PPUSH
42078: LD_VAR 0 3
42082: PPUSH
42083: LD_VAR 0 4
42087: PPUSH
42088: CALL 41148 0 4
42092: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42093: LD_ADDR_VAR 0 11
42097: PUSH
42098: LD_VAR 0 1
42102: PPUSH
42103: LD_VAR 0 2
42107: PPUSH
42108: LD_VAR 0 12
42112: PUSH
42113: LD_INT 1
42115: ARRAY
42116: PPUSH
42117: LD_VAR 0 12
42121: PUSH
42122: LD_INT 2
42124: ARRAY
42125: PPUSH
42126: CALL_OW 298
42130: ST_TO_ADDR
// distance := 9999 ;
42131: LD_ADDR_VAR 0 10
42135: PUSH
42136: LD_INT 9999
42138: ST_TO_ADDR
// for i := 0 to 5 do
42139: LD_ADDR_VAR 0 6
42143: PUSH
42144: DOUBLE
42145: LD_INT 0
42147: DEC
42148: ST_TO_ADDR
42149: LD_INT 5
42151: PUSH
42152: FOR_TO
42153: IFFALSE 42296
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42155: LD_ADDR_VAR 0 7
42159: PUSH
42160: LD_VAR 0 1
42164: PPUSH
42165: LD_VAR 0 6
42169: PPUSH
42170: LD_VAR 0 11
42174: PPUSH
42175: CALL_OW 272
42179: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42180: LD_ADDR_VAR 0 8
42184: PUSH
42185: LD_VAR 0 2
42189: PPUSH
42190: LD_VAR 0 6
42194: PPUSH
42195: LD_VAR 0 11
42199: PPUSH
42200: CALL_OW 273
42204: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42205: LD_VAR 0 7
42209: PPUSH
42210: LD_VAR 0 8
42214: PPUSH
42215: CALL_OW 488
42219: NOT
42220: IFFALSE 42224
// continue ;
42222: GO 42152
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42224: LD_ADDR_VAR 0 9
42228: PUSH
42229: LD_VAR 0 12
42233: PUSH
42234: LD_INT 1
42236: ARRAY
42237: PPUSH
42238: LD_VAR 0 12
42242: PUSH
42243: LD_INT 2
42245: ARRAY
42246: PPUSH
42247: LD_VAR 0 7
42251: PPUSH
42252: LD_VAR 0 8
42256: PPUSH
42257: CALL_OW 298
42261: ST_TO_ADDR
// if tmp < distance then
42262: LD_VAR 0 9
42266: PUSH
42267: LD_VAR 0 10
42271: LESS
42272: IFFALSE 42294
// begin result := i ;
42274: LD_ADDR_VAR 0 5
42278: PUSH
42279: LD_VAR 0 6
42283: ST_TO_ADDR
// distance := tmp ;
42284: LD_ADDR_VAR 0 10
42288: PUSH
42289: LD_VAR 0 9
42293: ST_TO_ADDR
// end ; end ;
42294: GO 42152
42296: POP
42297: POP
// end ;
42298: LD_VAR 0 5
42302: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42303: LD_INT 0
42305: PPUSH
42306: PPUSH
// if not driver or not IsInUnit ( driver ) then
42307: LD_VAR 0 1
42311: NOT
42312: PUSH
42313: LD_VAR 0 1
42317: PPUSH
42318: CALL_OW 310
42322: NOT
42323: OR
42324: IFFALSE 42328
// exit ;
42326: GO 42418
// vehicle := IsInUnit ( driver ) ;
42328: LD_ADDR_VAR 0 3
42332: PUSH
42333: LD_VAR 0 1
42337: PPUSH
42338: CALL_OW 310
42342: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42343: LD_VAR 0 1
42347: PPUSH
42348: LD_STRING \
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: PUSH
42378: LD_STRING E
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_VAR 0 3
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PPUSH
42414: CALL_OW 446
// end ;
42418: LD_VAR 0 2
42422: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42423: LD_INT 0
42425: PPUSH
42426: PPUSH
// if not driver or not IsInUnit ( driver ) then
42427: LD_VAR 0 1
42431: NOT
42432: PUSH
42433: LD_VAR 0 1
42437: PPUSH
42438: CALL_OW 310
42442: NOT
42443: OR
42444: IFFALSE 42448
// exit ;
42446: GO 42538
// vehicle := IsInUnit ( driver ) ;
42448: LD_ADDR_VAR 0 3
42452: PUSH
42453: LD_VAR 0 1
42457: PPUSH
42458: CALL_OW 310
42462: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42463: LD_VAR 0 1
42467: PPUSH
42468: LD_STRING \
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: PUSH
42498: LD_STRING E
42500: PUSH
42501: LD_INT 0
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: LD_VAR 0 3
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PPUSH
42534: CALL_OW 447
// end ;
42538: LD_VAR 0 2
42542: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42543: LD_INT 0
42545: PPUSH
42546: PPUSH
42547: PPUSH
// tmp := [ ] ;
42548: LD_ADDR_VAR 0 5
42552: PUSH
42553: EMPTY
42554: ST_TO_ADDR
// for i in units do
42555: LD_ADDR_VAR 0 4
42559: PUSH
42560: LD_VAR 0 1
42564: PUSH
42565: FOR_IN
42566: IFFALSE 42604
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42568: LD_ADDR_VAR 0 5
42572: PUSH
42573: LD_VAR 0 5
42577: PPUSH
42578: LD_VAR 0 5
42582: PUSH
42583: LD_INT 1
42585: PLUS
42586: PPUSH
42587: LD_VAR 0 4
42591: PPUSH
42592: CALL_OW 256
42596: PPUSH
42597: CALL_OW 2
42601: ST_TO_ADDR
42602: GO 42565
42604: POP
42605: POP
// if not tmp then
42606: LD_VAR 0 5
42610: NOT
42611: IFFALSE 42615
// exit ;
42613: GO 42663
// if asc then
42615: LD_VAR 0 2
42619: IFFALSE 42643
// result := SortListByListAsc ( units , tmp ) else
42621: LD_ADDR_VAR 0 3
42625: PUSH
42626: LD_VAR 0 1
42630: PPUSH
42631: LD_VAR 0 5
42635: PPUSH
42636: CALL_OW 76
42640: ST_TO_ADDR
42641: GO 42663
// result := SortListByListDesc ( units , tmp ) ;
42643: LD_ADDR_VAR 0 3
42647: PUSH
42648: LD_VAR 0 1
42652: PPUSH
42653: LD_VAR 0 5
42657: PPUSH
42658: CALL_OW 77
42662: ST_TO_ADDR
// end ;
42663: LD_VAR 0 3
42667: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42668: LD_INT 0
42670: PPUSH
42671: PPUSH
// task := GetTaskList ( mech ) ;
42672: LD_ADDR_VAR 0 4
42676: PUSH
42677: LD_VAR 0 1
42681: PPUSH
42682: CALL_OW 437
42686: ST_TO_ADDR
// if not task then
42687: LD_VAR 0 4
42691: NOT
42692: IFFALSE 42696
// exit ;
42694: GO 42738
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42696: LD_ADDR_VAR 0 3
42700: PUSH
42701: LD_VAR 0 4
42705: PUSH
42706: LD_INT 1
42708: ARRAY
42709: PUSH
42710: LD_INT 1
42712: ARRAY
42713: PUSH
42714: LD_STRING r
42716: EQUAL
42717: PUSH
42718: LD_VAR 0 4
42722: PUSH
42723: LD_INT 1
42725: ARRAY
42726: PUSH
42727: LD_INT 4
42729: ARRAY
42730: PUSH
42731: LD_VAR 0 2
42735: EQUAL
42736: AND
42737: ST_TO_ADDR
// end ;
42738: LD_VAR 0 3
42742: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42743: LD_INT 0
42745: PPUSH
// SetDir ( unit , d ) ;
42746: LD_VAR 0 1
42750: PPUSH
42751: LD_VAR 0 4
42755: PPUSH
42756: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
42760: LD_ADDR_VAR 0 6
42764: PUSH
42765: LD_VAR 0 1
42769: PPUSH
42770: LD_VAR 0 2
42774: PPUSH
42775: LD_VAR 0 3
42779: PPUSH
42780: LD_VAR 0 5
42784: PPUSH
42785: CALL_OW 48
42789: ST_TO_ADDR
// end ;
42790: LD_VAR 0 6
42794: RET
// export function ToNaturalNumber ( number ) ; begin
42795: LD_INT 0
42797: PPUSH
// result := number div 1 ;
42798: LD_ADDR_VAR 0 2
42802: PUSH
42803: LD_VAR 0 1
42807: PUSH
42808: LD_INT 1
42810: DIV
42811: ST_TO_ADDR
// if number < 0 then
42812: LD_VAR 0 1
42816: PUSH
42817: LD_INT 0
42819: LESS
42820: IFFALSE 42830
// result := 0 ;
42822: LD_ADDR_VAR 0 2
42826: PUSH
42827: LD_INT 0
42829: ST_TO_ADDR
// end ;
42830: LD_VAR 0 2
42834: RET
// export function SortByClass ( units , class ) ; var un ; begin
42835: LD_INT 0
42837: PPUSH
42838: PPUSH
// if not units or not class then
42839: LD_VAR 0 1
42843: NOT
42844: PUSH
42845: LD_VAR 0 2
42849: NOT
42850: OR
42851: IFFALSE 42855
// exit ;
42853: GO 42950
// result := [ ] ;
42855: LD_ADDR_VAR 0 3
42859: PUSH
42860: EMPTY
42861: ST_TO_ADDR
// for un in units do
42862: LD_ADDR_VAR 0 4
42866: PUSH
42867: LD_VAR 0 1
42871: PUSH
42872: FOR_IN
42873: IFFALSE 42948
// if GetClass ( un ) = class then
42875: LD_VAR 0 4
42879: PPUSH
42880: CALL_OW 257
42884: PUSH
42885: LD_VAR 0 2
42889: EQUAL
42890: IFFALSE 42917
// result := Insert ( result , 1 , un ) else
42892: LD_ADDR_VAR 0 3
42896: PUSH
42897: LD_VAR 0 3
42901: PPUSH
42902: LD_INT 1
42904: PPUSH
42905: LD_VAR 0 4
42909: PPUSH
42910: CALL_OW 2
42914: ST_TO_ADDR
42915: GO 42946
// result := Replace ( result , result + 1 , un ) ;
42917: LD_ADDR_VAR 0 3
42921: PUSH
42922: LD_VAR 0 3
42926: PPUSH
42927: LD_VAR 0 3
42931: PUSH
42932: LD_INT 1
42934: PLUS
42935: PPUSH
42936: LD_VAR 0 4
42940: PPUSH
42941: CALL_OW 1
42945: ST_TO_ADDR
42946: GO 42872
42948: POP
42949: POP
// end ;
42950: LD_VAR 0 3
42954: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42955: LD_INT 0
42957: PPUSH
42958: PPUSH
42959: PPUSH
42960: PPUSH
42961: PPUSH
42962: PPUSH
42963: PPUSH
// result := [ ] ;
42964: LD_ADDR_VAR 0 4
42968: PUSH
42969: EMPTY
42970: ST_TO_ADDR
// if x - r < 0 then
42971: LD_VAR 0 1
42975: PUSH
42976: LD_VAR 0 3
42980: MINUS
42981: PUSH
42982: LD_INT 0
42984: LESS
42985: IFFALSE 42997
// min_x := 0 else
42987: LD_ADDR_VAR 0 8
42991: PUSH
42992: LD_INT 0
42994: ST_TO_ADDR
42995: GO 43013
// min_x := x - r ;
42997: LD_ADDR_VAR 0 8
43001: PUSH
43002: LD_VAR 0 1
43006: PUSH
43007: LD_VAR 0 3
43011: MINUS
43012: ST_TO_ADDR
// if y - r < 0 then
43013: LD_VAR 0 2
43017: PUSH
43018: LD_VAR 0 3
43022: MINUS
43023: PUSH
43024: LD_INT 0
43026: LESS
43027: IFFALSE 43039
// min_y := 0 else
43029: LD_ADDR_VAR 0 7
43033: PUSH
43034: LD_INT 0
43036: ST_TO_ADDR
43037: GO 43055
// min_y := y - r ;
43039: LD_ADDR_VAR 0 7
43043: PUSH
43044: LD_VAR 0 2
43048: PUSH
43049: LD_VAR 0 3
43053: MINUS
43054: ST_TO_ADDR
// max_x := x + r ;
43055: LD_ADDR_VAR 0 9
43059: PUSH
43060: LD_VAR 0 1
43064: PUSH
43065: LD_VAR 0 3
43069: PLUS
43070: ST_TO_ADDR
// max_y := y + r ;
43071: LD_ADDR_VAR 0 10
43075: PUSH
43076: LD_VAR 0 2
43080: PUSH
43081: LD_VAR 0 3
43085: PLUS
43086: ST_TO_ADDR
// for _x = min_x to max_x do
43087: LD_ADDR_VAR 0 5
43091: PUSH
43092: DOUBLE
43093: LD_VAR 0 8
43097: DEC
43098: ST_TO_ADDR
43099: LD_VAR 0 9
43103: PUSH
43104: FOR_TO
43105: IFFALSE 43206
// for _y = min_y to max_y do
43107: LD_ADDR_VAR 0 6
43111: PUSH
43112: DOUBLE
43113: LD_VAR 0 7
43117: DEC
43118: ST_TO_ADDR
43119: LD_VAR 0 10
43123: PUSH
43124: FOR_TO
43125: IFFALSE 43202
// begin if not ValidHex ( _x , _y ) then
43127: LD_VAR 0 5
43131: PPUSH
43132: LD_VAR 0 6
43136: PPUSH
43137: CALL_OW 488
43141: NOT
43142: IFFALSE 43146
// continue ;
43144: GO 43124
// if GetResourceTypeXY ( _x , _y ) then
43146: LD_VAR 0 5
43150: PPUSH
43151: LD_VAR 0 6
43155: PPUSH
43156: CALL_OW 283
43160: IFFALSE 43200
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43162: LD_ADDR_VAR 0 4
43166: PUSH
43167: LD_VAR 0 4
43171: PPUSH
43172: LD_VAR 0 4
43176: PUSH
43177: LD_INT 1
43179: PLUS
43180: PPUSH
43181: LD_VAR 0 5
43185: PUSH
43186: LD_VAR 0 6
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PPUSH
43195: CALL_OW 1
43199: ST_TO_ADDR
// end ;
43200: GO 43124
43202: POP
43203: POP
43204: GO 43104
43206: POP
43207: POP
// end ;
43208: LD_VAR 0 4
43212: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43213: LD_INT 0
43215: PPUSH
43216: PPUSH
43217: PPUSH
43218: PPUSH
43219: PPUSH
43220: PPUSH
43221: PPUSH
43222: PPUSH
// if not units then
43223: LD_VAR 0 1
43227: NOT
43228: IFFALSE 43232
// exit ;
43230: GO 43760
// result := UnitFilter ( units , [ f_ok ] ) ;
43232: LD_ADDR_VAR 0 3
43236: PUSH
43237: LD_VAR 0 1
43241: PPUSH
43242: LD_INT 50
43244: PUSH
43245: EMPTY
43246: LIST
43247: PPUSH
43248: CALL_OW 72
43252: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43253: LD_ADDR_VAR 0 8
43257: PUSH
43258: LD_VAR 0 1
43262: PUSH
43263: LD_INT 1
43265: ARRAY
43266: PPUSH
43267: CALL_OW 255
43271: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43272: LD_ADDR_VAR 0 10
43276: PUSH
43277: LD_INT 29
43279: PUSH
43280: LD_INT 91
43282: PUSH
43283: LD_INT 49
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: LIST
43290: ST_TO_ADDR
// if not result then
43291: LD_VAR 0 3
43295: NOT
43296: IFFALSE 43300
// exit ;
43298: GO 43760
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43300: LD_ADDR_VAR 0 5
43304: PUSH
43305: LD_INT 81
43307: PUSH
43308: LD_VAR 0 8
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PPUSH
43317: CALL_OW 69
43321: ST_TO_ADDR
// for i in result do
43322: LD_ADDR_VAR 0 4
43326: PUSH
43327: LD_VAR 0 3
43331: PUSH
43332: FOR_IN
43333: IFFALSE 43758
// begin tag := GetTag ( i ) + 1 ;
43335: LD_ADDR_VAR 0 9
43339: PUSH
43340: LD_VAR 0 4
43344: PPUSH
43345: CALL_OW 110
43349: PUSH
43350: LD_INT 1
43352: PLUS
43353: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43354: LD_ADDR_VAR 0 7
43358: PUSH
43359: LD_VAR 0 4
43363: PPUSH
43364: CALL_OW 250
43368: PPUSH
43369: LD_VAR 0 4
43373: PPUSH
43374: CALL_OW 251
43378: PPUSH
43379: LD_INT 4
43381: PPUSH
43382: CALL 42955 0 3
43386: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43387: LD_VAR 0 4
43391: PPUSH
43392: CALL_OW 247
43396: PUSH
43397: LD_INT 2
43399: EQUAL
43400: PUSH
43401: LD_VAR 0 7
43405: PUSH
43406: LD_INT 2
43408: GREATER
43409: AND
43410: PUSH
43411: LD_VAR 0 4
43415: PPUSH
43416: CALL_OW 264
43420: PUSH
43421: LD_VAR 0 10
43425: IN
43426: NOT
43427: AND
43428: IFFALSE 43467
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43430: LD_VAR 0 4
43434: PPUSH
43435: LD_VAR 0 7
43439: PUSH
43440: LD_INT 1
43442: ARRAY
43443: PUSH
43444: LD_INT 1
43446: ARRAY
43447: PPUSH
43448: LD_VAR 0 7
43452: PUSH
43453: LD_INT 1
43455: ARRAY
43456: PUSH
43457: LD_INT 2
43459: ARRAY
43460: PPUSH
43461: CALL_OW 116
43465: GO 43756
// if path > tag then
43467: LD_VAR 0 2
43471: PUSH
43472: LD_VAR 0 9
43476: GREATER
43477: IFFALSE 43685
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43479: LD_ADDR_VAR 0 6
43483: PUSH
43484: LD_VAR 0 5
43488: PPUSH
43489: LD_INT 91
43491: PUSH
43492: LD_VAR 0 4
43496: PUSH
43497: LD_INT 8
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: LIST
43504: PPUSH
43505: CALL_OW 72
43509: ST_TO_ADDR
// if nearEnemy then
43510: LD_VAR 0 6
43514: IFFALSE 43583
// begin if GetWeapon ( i ) = ru_time_lapser then
43516: LD_VAR 0 4
43520: PPUSH
43521: CALL_OW 264
43525: PUSH
43526: LD_INT 49
43528: EQUAL
43529: IFFALSE 43557
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43531: LD_VAR 0 4
43535: PPUSH
43536: LD_VAR 0 6
43540: PPUSH
43541: LD_VAR 0 4
43545: PPUSH
43546: CALL_OW 74
43550: PPUSH
43551: CALL_OW 112
43555: GO 43581
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43557: LD_VAR 0 4
43561: PPUSH
43562: LD_VAR 0 6
43566: PPUSH
43567: LD_VAR 0 4
43571: PPUSH
43572: CALL_OW 74
43576: PPUSH
43577: CALL 44831 0 2
// end else
43581: GO 43683
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43583: LD_VAR 0 4
43587: PPUSH
43588: LD_VAR 0 2
43592: PUSH
43593: LD_VAR 0 9
43597: ARRAY
43598: PUSH
43599: LD_INT 1
43601: ARRAY
43602: PPUSH
43603: LD_VAR 0 2
43607: PUSH
43608: LD_VAR 0 9
43612: ARRAY
43613: PUSH
43614: LD_INT 2
43616: ARRAY
43617: PPUSH
43618: CALL_OW 297
43622: PUSH
43623: LD_INT 6
43625: GREATER
43626: IFFALSE 43669
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43628: LD_VAR 0 4
43632: PPUSH
43633: LD_VAR 0 2
43637: PUSH
43638: LD_VAR 0 9
43642: ARRAY
43643: PUSH
43644: LD_INT 1
43646: ARRAY
43647: PPUSH
43648: LD_VAR 0 2
43652: PUSH
43653: LD_VAR 0 9
43657: ARRAY
43658: PUSH
43659: LD_INT 2
43661: ARRAY
43662: PPUSH
43663: CALL_OW 114
43667: GO 43683
// SetTag ( i , tag ) ;
43669: LD_VAR 0 4
43673: PPUSH
43674: LD_VAR 0 9
43678: PPUSH
43679: CALL_OW 109
// end else
43683: GO 43756
// if enemy then
43685: LD_VAR 0 5
43689: IFFALSE 43756
// begin if GetWeapon ( i ) = ru_time_lapser then
43691: LD_VAR 0 4
43695: PPUSH
43696: CALL_OW 264
43700: PUSH
43701: LD_INT 49
43703: EQUAL
43704: IFFALSE 43732
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43706: LD_VAR 0 4
43710: PPUSH
43711: LD_VAR 0 5
43715: PPUSH
43716: LD_VAR 0 4
43720: PPUSH
43721: CALL_OW 74
43725: PPUSH
43726: CALL_OW 112
43730: GO 43756
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43732: LD_VAR 0 4
43736: PPUSH
43737: LD_VAR 0 5
43741: PPUSH
43742: LD_VAR 0 4
43746: PPUSH
43747: CALL_OW 74
43751: PPUSH
43752: CALL 44831 0 2
// end ; end ;
43756: GO 43332
43758: POP
43759: POP
// end ;
43760: LD_VAR 0 3
43764: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43765: LD_INT 0
43767: PPUSH
43768: PPUSH
43769: PPUSH
// if not unit or IsInUnit ( unit ) then
43770: LD_VAR 0 1
43774: NOT
43775: PUSH
43776: LD_VAR 0 1
43780: PPUSH
43781: CALL_OW 310
43785: OR
43786: IFFALSE 43790
// exit ;
43788: GO 43881
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43790: LD_ADDR_VAR 0 4
43794: PUSH
43795: LD_VAR 0 1
43799: PPUSH
43800: CALL_OW 250
43804: PPUSH
43805: LD_VAR 0 2
43809: PPUSH
43810: LD_INT 1
43812: PPUSH
43813: CALL_OW 272
43817: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43818: LD_ADDR_VAR 0 5
43822: PUSH
43823: LD_VAR 0 1
43827: PPUSH
43828: CALL_OW 251
43832: PPUSH
43833: LD_VAR 0 2
43837: PPUSH
43838: LD_INT 1
43840: PPUSH
43841: CALL_OW 273
43845: ST_TO_ADDR
// if ValidHex ( x , y ) then
43846: LD_VAR 0 4
43850: PPUSH
43851: LD_VAR 0 5
43855: PPUSH
43856: CALL_OW 488
43860: IFFALSE 43881
// ComTurnXY ( unit , x , y ) ;
43862: LD_VAR 0 1
43866: PPUSH
43867: LD_VAR 0 4
43871: PPUSH
43872: LD_VAR 0 5
43876: PPUSH
43877: CALL_OW 118
// end ;
43881: LD_VAR 0 3
43885: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43886: LD_INT 0
43888: PPUSH
43889: PPUSH
// result := false ;
43890: LD_ADDR_VAR 0 3
43894: PUSH
43895: LD_INT 0
43897: ST_TO_ADDR
// if not units then
43898: LD_VAR 0 2
43902: NOT
43903: IFFALSE 43907
// exit ;
43905: GO 43952
// for i in units do
43907: LD_ADDR_VAR 0 4
43911: PUSH
43912: LD_VAR 0 2
43916: PUSH
43917: FOR_IN
43918: IFFALSE 43950
// if See ( side , i ) then
43920: LD_VAR 0 1
43924: PPUSH
43925: LD_VAR 0 4
43929: PPUSH
43930: CALL_OW 292
43934: IFFALSE 43948
// begin result := true ;
43936: LD_ADDR_VAR 0 3
43940: PUSH
43941: LD_INT 1
43943: ST_TO_ADDR
// exit ;
43944: POP
43945: POP
43946: GO 43952
// end ;
43948: GO 43917
43950: POP
43951: POP
// end ;
43952: LD_VAR 0 3
43956: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43957: LD_INT 0
43959: PPUSH
43960: PPUSH
43961: PPUSH
43962: PPUSH
// if not unit or not points then
43963: LD_VAR 0 1
43967: NOT
43968: PUSH
43969: LD_VAR 0 2
43973: NOT
43974: OR
43975: IFFALSE 43979
// exit ;
43977: GO 44069
// dist := 99999 ;
43979: LD_ADDR_VAR 0 5
43983: PUSH
43984: LD_INT 99999
43986: ST_TO_ADDR
// for i in points do
43987: LD_ADDR_VAR 0 4
43991: PUSH
43992: LD_VAR 0 2
43996: PUSH
43997: FOR_IN
43998: IFFALSE 44067
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44000: LD_ADDR_VAR 0 6
44004: PUSH
44005: LD_VAR 0 1
44009: PPUSH
44010: LD_VAR 0 4
44014: PUSH
44015: LD_INT 1
44017: ARRAY
44018: PPUSH
44019: LD_VAR 0 4
44023: PUSH
44024: LD_INT 2
44026: ARRAY
44027: PPUSH
44028: CALL_OW 297
44032: ST_TO_ADDR
// if tmpDist < dist then
44033: LD_VAR 0 6
44037: PUSH
44038: LD_VAR 0 5
44042: LESS
44043: IFFALSE 44065
// begin result := i ;
44045: LD_ADDR_VAR 0 3
44049: PUSH
44050: LD_VAR 0 4
44054: ST_TO_ADDR
// dist := tmpDist ;
44055: LD_ADDR_VAR 0 5
44059: PUSH
44060: LD_VAR 0 6
44064: ST_TO_ADDR
// end ; end ;
44065: GO 43997
44067: POP
44068: POP
// end ;
44069: LD_VAR 0 3
44073: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44074: LD_INT 0
44076: PPUSH
// uc_side := side ;
44077: LD_ADDR_OWVAR 20
44081: PUSH
44082: LD_VAR 0 1
44086: ST_TO_ADDR
// uc_nation := 3 ;
44087: LD_ADDR_OWVAR 21
44091: PUSH
44092: LD_INT 3
44094: ST_TO_ADDR
// vc_chassis := 25 ;
44095: LD_ADDR_OWVAR 37
44099: PUSH
44100: LD_INT 25
44102: ST_TO_ADDR
// vc_engine := engine_siberite ;
44103: LD_ADDR_OWVAR 39
44107: PUSH
44108: LD_INT 3
44110: ST_TO_ADDR
// vc_control := control_computer ;
44111: LD_ADDR_OWVAR 38
44115: PUSH
44116: LD_INT 3
44118: ST_TO_ADDR
// vc_weapon := 59 ;
44119: LD_ADDR_OWVAR 40
44123: PUSH
44124: LD_INT 59
44126: ST_TO_ADDR
// result := CreateVehicle ;
44127: LD_ADDR_VAR 0 5
44131: PUSH
44132: CALL_OW 45
44136: ST_TO_ADDR
// SetDir ( result , d ) ;
44137: LD_VAR 0 5
44141: PPUSH
44142: LD_VAR 0 4
44146: PPUSH
44147: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44151: LD_VAR 0 5
44155: PPUSH
44156: LD_VAR 0 2
44160: PPUSH
44161: LD_VAR 0 3
44165: PPUSH
44166: LD_INT 0
44168: PPUSH
44169: CALL_OW 48
// end ;
44173: LD_VAR 0 5
44177: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44178: LD_INT 0
44180: PPUSH
44181: PPUSH
44182: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44183: LD_ADDR_VAR 0 2
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44206: LD_VAR 0 1
44210: NOT
44211: PUSH
44212: LD_VAR 0 1
44216: PPUSH
44217: CALL_OW 264
44221: PUSH
44222: LD_INT 12
44224: PUSH
44225: LD_INT 51
44227: PUSH
44228: LD_INT 32
44230: PUSH
44231: LD_INT 89
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: IN
44240: NOT
44241: OR
44242: IFFALSE 44246
// exit ;
44244: GO 44344
// for i := 1 to 3 do
44246: LD_ADDR_VAR 0 3
44250: PUSH
44251: DOUBLE
44252: LD_INT 1
44254: DEC
44255: ST_TO_ADDR
44256: LD_INT 3
44258: PUSH
44259: FOR_TO
44260: IFFALSE 44342
// begin tmp := GetCargo ( cargo , i ) ;
44262: LD_ADDR_VAR 0 4
44266: PUSH
44267: LD_VAR 0 1
44271: PPUSH
44272: LD_VAR 0 3
44276: PPUSH
44277: CALL_OW 289
44281: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44282: LD_ADDR_VAR 0 2
44286: PUSH
44287: LD_VAR 0 2
44291: PPUSH
44292: LD_VAR 0 3
44296: PPUSH
44297: LD_VAR 0 4
44301: PPUSH
44302: CALL_OW 1
44306: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44307: LD_ADDR_VAR 0 2
44311: PUSH
44312: LD_VAR 0 2
44316: PPUSH
44317: LD_INT 4
44319: PPUSH
44320: LD_VAR 0 2
44324: PUSH
44325: LD_INT 4
44327: ARRAY
44328: PUSH
44329: LD_VAR 0 4
44333: PLUS
44334: PPUSH
44335: CALL_OW 1
44339: ST_TO_ADDR
// end ;
44340: GO 44259
44342: POP
44343: POP
// end ;
44344: LD_VAR 0 2
44348: RET
// export function Length ( array ) ; begin
44349: LD_INT 0
44351: PPUSH
// result := array + 0 ;
44352: LD_ADDR_VAR 0 2
44356: PUSH
44357: LD_VAR 0 1
44361: PUSH
44362: LD_INT 0
44364: PLUS
44365: ST_TO_ADDR
// end ;
44366: LD_VAR 0 2
44370: RET
// export function PrepareArray ( array ) ; begin
44371: LD_INT 0
44373: PPUSH
// result := array diff 0 ;
44374: LD_ADDR_VAR 0 2
44378: PUSH
44379: LD_VAR 0 1
44383: PUSH
44384: LD_INT 0
44386: DIFF
44387: ST_TO_ADDR
// if not result [ 1 ] then
44388: LD_VAR 0 2
44392: PUSH
44393: LD_INT 1
44395: ARRAY
44396: NOT
44397: IFFALSE 44417
// result := Delete ( result , 1 ) ;
44399: LD_ADDR_VAR 0 2
44403: PUSH
44404: LD_VAR 0 2
44408: PPUSH
44409: LD_INT 1
44411: PPUSH
44412: CALL_OW 3
44416: ST_TO_ADDR
// end ;
44417: LD_VAR 0 2
44421: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44422: LD_INT 0
44424: PPUSH
44425: PPUSH
44426: PPUSH
44427: PPUSH
// sibRocketRange := 25 ;
44428: LD_ADDR_VAR 0 6
44432: PUSH
44433: LD_INT 25
44435: ST_TO_ADDR
// result := false ;
44436: LD_ADDR_VAR 0 4
44440: PUSH
44441: LD_INT 0
44443: ST_TO_ADDR
// for i := 0 to 5 do
44444: LD_ADDR_VAR 0 5
44448: PUSH
44449: DOUBLE
44450: LD_INT 0
44452: DEC
44453: ST_TO_ADDR
44454: LD_INT 5
44456: PUSH
44457: FOR_TO
44458: IFFALSE 44525
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44460: LD_VAR 0 1
44464: PPUSH
44465: LD_VAR 0 5
44469: PPUSH
44470: LD_VAR 0 6
44474: PPUSH
44475: CALL_OW 272
44479: PPUSH
44480: LD_VAR 0 2
44484: PPUSH
44485: LD_VAR 0 5
44489: PPUSH
44490: LD_VAR 0 6
44494: PPUSH
44495: CALL_OW 273
44499: PPUSH
44500: LD_VAR 0 3
44504: PPUSH
44505: CALL_OW 309
44509: IFFALSE 44523
// begin result := true ;
44511: LD_ADDR_VAR 0 4
44515: PUSH
44516: LD_INT 1
44518: ST_TO_ADDR
// exit ;
44519: POP
44520: POP
44521: GO 44527
// end ;
44523: GO 44457
44525: POP
44526: POP
// end ;
44527: LD_VAR 0 4
44531: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44532: LD_INT 0
44534: PPUSH
44535: PPUSH
44536: PPUSH
// if btype = b_depot then
44537: LD_VAR 0 2
44541: PUSH
44542: LD_INT 0
44544: EQUAL
44545: IFFALSE 44557
// begin result := true ;
44547: LD_ADDR_VAR 0 3
44551: PUSH
44552: LD_INT 1
44554: ST_TO_ADDR
// exit ;
44555: GO 44673
// end ; pom := GetBase ( depot ) ;
44557: LD_ADDR_VAR 0 4
44561: PUSH
44562: LD_VAR 0 1
44566: PPUSH
44567: CALL_OW 274
44571: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44572: LD_ADDR_VAR 0 5
44576: PUSH
44577: LD_VAR 0 2
44581: PPUSH
44582: LD_VAR 0 1
44586: PPUSH
44587: CALL_OW 248
44591: PPUSH
44592: CALL_OW 450
44596: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44597: LD_ADDR_VAR 0 3
44601: PUSH
44602: LD_VAR 0 4
44606: PPUSH
44607: LD_INT 1
44609: PPUSH
44610: CALL_OW 275
44614: PUSH
44615: LD_VAR 0 5
44619: PUSH
44620: LD_INT 1
44622: ARRAY
44623: GREATEREQUAL
44624: PUSH
44625: LD_VAR 0 4
44629: PPUSH
44630: LD_INT 2
44632: PPUSH
44633: CALL_OW 275
44637: PUSH
44638: LD_VAR 0 5
44642: PUSH
44643: LD_INT 2
44645: ARRAY
44646: GREATEREQUAL
44647: AND
44648: PUSH
44649: LD_VAR 0 4
44653: PPUSH
44654: LD_INT 3
44656: PPUSH
44657: CALL_OW 275
44661: PUSH
44662: LD_VAR 0 5
44666: PUSH
44667: LD_INT 3
44669: ARRAY
44670: GREATEREQUAL
44671: AND
44672: ST_TO_ADDR
// end ;
44673: LD_VAR 0 3
44677: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44678: LD_INT 0
44680: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44681: LD_VAR 0 1
44685: PPUSH
44686: LD_VAR 0 2
44690: PPUSH
44691: LD_INT 0
44693: PPUSH
44694: LD_INT 0
44696: PPUSH
44697: LD_INT 1
44699: PPUSH
44700: LD_INT 0
44702: PPUSH
44703: CALL_OW 587
// end ;
44707: LD_VAR 0 3
44711: RET
// export function CenterOnNow ( unit ) ; begin
44712: LD_INT 0
44714: PPUSH
// result := IsInUnit ( unit ) ;
44715: LD_ADDR_VAR 0 2
44719: PUSH
44720: LD_VAR 0 1
44724: PPUSH
44725: CALL_OW 310
44729: ST_TO_ADDR
// if not result then
44730: LD_VAR 0 2
44734: NOT
44735: IFFALSE 44747
// result := unit ;
44737: LD_ADDR_VAR 0 2
44741: PUSH
44742: LD_VAR 0 1
44746: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44747: LD_VAR 0 1
44751: PPUSH
44752: CALL_OW 87
// end ;
44756: LD_VAR 0 2
44760: RET
// export function ComMoveHex ( unit , hex ) ; begin
44761: LD_INT 0
44763: PPUSH
// if not hex then
44764: LD_VAR 0 2
44768: NOT
44769: IFFALSE 44773
// exit ;
44771: GO 44826
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44773: LD_VAR 0 2
44777: PUSH
44778: LD_INT 1
44780: ARRAY
44781: PPUSH
44782: LD_VAR 0 2
44786: PUSH
44787: LD_INT 2
44789: ARRAY
44790: PPUSH
44791: CALL_OW 428
44795: IFFALSE 44799
// exit ;
44797: GO 44826
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44799: LD_VAR 0 1
44803: PPUSH
44804: LD_VAR 0 2
44808: PUSH
44809: LD_INT 1
44811: ARRAY
44812: PPUSH
44813: LD_VAR 0 2
44817: PUSH
44818: LD_INT 2
44820: ARRAY
44821: PPUSH
44822: CALL_OW 111
// end ;
44826: LD_VAR 0 3
44830: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44831: LD_INT 0
44833: PPUSH
44834: PPUSH
44835: PPUSH
// if not unit or not enemy then
44836: LD_VAR 0 1
44840: NOT
44841: PUSH
44842: LD_VAR 0 2
44846: NOT
44847: OR
44848: IFFALSE 44852
// exit ;
44850: GO 44976
// x := GetX ( enemy ) ;
44852: LD_ADDR_VAR 0 4
44856: PUSH
44857: LD_VAR 0 2
44861: PPUSH
44862: CALL_OW 250
44866: ST_TO_ADDR
// y := GetY ( enemy ) ;
44867: LD_ADDR_VAR 0 5
44871: PUSH
44872: LD_VAR 0 2
44876: PPUSH
44877: CALL_OW 251
44881: ST_TO_ADDR
// if ValidHex ( x , y ) then
44882: LD_VAR 0 4
44886: PPUSH
44887: LD_VAR 0 5
44891: PPUSH
44892: CALL_OW 488
44896: IFFALSE 44976
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44898: LD_VAR 0 2
44902: PPUSH
44903: CALL_OW 247
44907: PUSH
44908: LD_INT 3
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: IN
44918: PUSH
44919: LD_VAR 0 1
44923: PPUSH
44924: CALL_OW 255
44928: PPUSH
44929: LD_VAR 0 2
44933: PPUSH
44934: CALL_OW 292
44938: OR
44939: IFFALSE 44957
// ComAttackUnit ( unit , enemy ) else
44941: LD_VAR 0 1
44945: PPUSH
44946: LD_VAR 0 2
44950: PPUSH
44951: CALL_OW 115
44955: GO 44976
// ComAgressiveMove ( unit , x , y ) ;
44957: LD_VAR 0 1
44961: PPUSH
44962: LD_VAR 0 4
44966: PPUSH
44967: LD_VAR 0 5
44971: PPUSH
44972: CALL_OW 114
// end ;
44976: LD_VAR 0 3
44980: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44981: LD_INT 0
44983: PPUSH
44984: PPUSH
44985: PPUSH
// list := AreaToList ( area , 0 ) ;
44986: LD_ADDR_VAR 0 5
44990: PUSH
44991: LD_VAR 0 1
44995: PPUSH
44996: LD_INT 0
44998: PPUSH
44999: CALL_OW 517
45003: ST_TO_ADDR
// if not list then
45004: LD_VAR 0 5
45008: NOT
45009: IFFALSE 45013
// exit ;
45011: GO 45143
// if all then
45013: LD_VAR 0 2
45017: IFFALSE 45105
// begin for i := 1 to list [ 1 ] do
45019: LD_ADDR_VAR 0 4
45023: PUSH
45024: DOUBLE
45025: LD_INT 1
45027: DEC
45028: ST_TO_ADDR
45029: LD_VAR 0 5
45033: PUSH
45034: LD_INT 1
45036: ARRAY
45037: PUSH
45038: FOR_TO
45039: IFFALSE 45101
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45041: LD_ADDR_VAR 0 3
45045: PUSH
45046: LD_VAR 0 3
45050: PPUSH
45051: LD_VAR 0 3
45055: PUSH
45056: LD_INT 1
45058: PLUS
45059: PPUSH
45060: LD_VAR 0 5
45064: PUSH
45065: LD_INT 1
45067: ARRAY
45068: PUSH
45069: LD_VAR 0 4
45073: ARRAY
45074: PUSH
45075: LD_VAR 0 5
45079: PUSH
45080: LD_INT 2
45082: ARRAY
45083: PUSH
45084: LD_VAR 0 4
45088: ARRAY
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PPUSH
45094: CALL_OW 1
45098: ST_TO_ADDR
45099: GO 45038
45101: POP
45102: POP
// exit ;
45103: GO 45143
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45105: LD_ADDR_VAR 0 3
45109: PUSH
45110: LD_VAR 0 5
45114: PUSH
45115: LD_INT 1
45117: ARRAY
45118: PUSH
45119: LD_INT 1
45121: ARRAY
45122: PUSH
45123: LD_VAR 0 5
45127: PUSH
45128: LD_INT 2
45130: ARRAY
45131: PUSH
45132: LD_INT 1
45134: ARRAY
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: EMPTY
45141: LIST
45142: ST_TO_ADDR
// end ;
45143: LD_VAR 0 3
45147: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45148: LD_INT 0
45150: PPUSH
45151: PPUSH
// list := AreaToList ( area , 0 ) ;
45152: LD_ADDR_VAR 0 4
45156: PUSH
45157: LD_VAR 0 1
45161: PPUSH
45162: LD_INT 0
45164: PPUSH
45165: CALL_OW 517
45169: ST_TO_ADDR
// if not list then
45170: LD_VAR 0 4
45174: NOT
45175: IFFALSE 45179
// exit ;
45177: GO 45220
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45179: LD_ADDR_VAR 0 3
45183: PUSH
45184: LD_VAR 0 4
45188: PUSH
45189: LD_INT 1
45191: ARRAY
45192: PUSH
45193: LD_INT 1
45195: ARRAY
45196: PUSH
45197: LD_VAR 0 4
45201: PUSH
45202: LD_INT 2
45204: ARRAY
45205: PUSH
45206: LD_INT 1
45208: ARRAY
45209: PUSH
45210: LD_VAR 0 2
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: LIST
45219: ST_TO_ADDR
// end ;
45220: LD_VAR 0 3
45224: RET
// export function First ( array ) ; begin
45225: LD_INT 0
45227: PPUSH
// if not array then
45228: LD_VAR 0 1
45232: NOT
45233: IFFALSE 45237
// exit ;
45235: GO 45251
// result := array [ 1 ] ;
45237: LD_ADDR_VAR 0 2
45241: PUSH
45242: LD_VAR 0 1
45246: PUSH
45247: LD_INT 1
45249: ARRAY
45250: ST_TO_ADDR
// end ;
45251: LD_VAR 0 2
45255: RET
// export function Last ( array ) ; begin
45256: LD_INT 0
45258: PPUSH
// if not array then
45259: LD_VAR 0 1
45263: NOT
45264: IFFALSE 45268
// exit ;
45266: GO 45284
// result := array [ array ] ;
45268: LD_ADDR_VAR 0 2
45272: PUSH
45273: LD_VAR 0 1
45277: PUSH
45278: LD_VAR 0 1
45282: ARRAY
45283: ST_TO_ADDR
// end ;
45284: LD_VAR 0 2
45288: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45289: LD_INT 0
45291: PPUSH
45292: PPUSH
// result := [ ] ;
45293: LD_ADDR_VAR 0 5
45297: PUSH
45298: EMPTY
45299: ST_TO_ADDR
// if not array then
45300: LD_VAR 0 1
45304: NOT
45305: IFFALSE 45309
// exit ;
45307: GO 45421
// for i := 1 to array do
45309: LD_ADDR_VAR 0 6
45313: PUSH
45314: DOUBLE
45315: LD_INT 1
45317: DEC
45318: ST_TO_ADDR
45319: LD_VAR 0 1
45323: PUSH
45324: FOR_TO
45325: IFFALSE 45419
// if array [ i ] [ index ] = value then
45327: LD_VAR 0 1
45331: PUSH
45332: LD_VAR 0 6
45336: ARRAY
45337: PUSH
45338: LD_VAR 0 2
45342: ARRAY
45343: PUSH
45344: LD_VAR 0 3
45348: EQUAL
45349: IFFALSE 45417
// begin if indexColumn then
45351: LD_VAR 0 4
45355: IFFALSE 45391
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45357: LD_ADDR_VAR 0 5
45361: PUSH
45362: LD_VAR 0 5
45366: PPUSH
45367: LD_VAR 0 1
45371: PUSH
45372: LD_VAR 0 6
45376: ARRAY
45377: PUSH
45378: LD_VAR 0 4
45382: ARRAY
45383: PPUSH
45384: CALL 40603 0 2
45388: ST_TO_ADDR
45389: GO 45417
// result := Join ( result , array [ i ] ) ;
45391: LD_ADDR_VAR 0 5
45395: PUSH
45396: LD_VAR 0 5
45400: PPUSH
45401: LD_VAR 0 1
45405: PUSH
45406: LD_VAR 0 6
45410: ARRAY
45411: PPUSH
45412: CALL 40603 0 2
45416: ST_TO_ADDR
// end ;
45417: GO 45324
45419: POP
45420: POP
// end ;
45421: LD_VAR 0 5
45425: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45426: LD_INT 0
45428: PPUSH
// if not vehicles or not parkingPoint then
45429: LD_VAR 0 1
45433: NOT
45434: PUSH
45435: LD_VAR 0 2
45439: NOT
45440: OR
45441: IFFALSE 45445
// exit ;
45443: GO 45543
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45445: LD_ADDR_VAR 0 1
45449: PUSH
45450: LD_VAR 0 1
45454: PPUSH
45455: LD_INT 50
45457: PUSH
45458: EMPTY
45459: LIST
45460: PUSH
45461: LD_INT 3
45463: PUSH
45464: LD_INT 92
45466: PUSH
45467: LD_VAR 0 2
45471: PUSH
45472: LD_INT 1
45474: ARRAY
45475: PUSH
45476: LD_VAR 0 2
45480: PUSH
45481: LD_INT 2
45483: ARRAY
45484: PUSH
45485: LD_INT 8
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PPUSH
45502: CALL_OW 72
45506: ST_TO_ADDR
// if not vehicles then
45507: LD_VAR 0 1
45511: NOT
45512: IFFALSE 45516
// exit ;
45514: GO 45543
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45516: LD_VAR 0 1
45520: PPUSH
45521: LD_VAR 0 2
45525: PUSH
45526: LD_INT 1
45528: ARRAY
45529: PPUSH
45530: LD_VAR 0 2
45534: PUSH
45535: LD_INT 2
45537: ARRAY
45538: PPUSH
45539: CALL_OW 111
// end ;
45543: LD_VAR 0 3
45547: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45548: LD_INT 0
45550: PPUSH
45551: PPUSH
45552: PPUSH
// if not side or not area then
45553: LD_VAR 0 1
45557: NOT
45558: PUSH
45559: LD_VAR 0 2
45563: NOT
45564: OR
45565: IFFALSE 45569
// exit ;
45567: GO 45688
// tmp := AreaToList ( area , 0 ) ;
45569: LD_ADDR_VAR 0 5
45573: PUSH
45574: LD_VAR 0 2
45578: PPUSH
45579: LD_INT 0
45581: PPUSH
45582: CALL_OW 517
45586: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45587: LD_ADDR_VAR 0 4
45591: PUSH
45592: DOUBLE
45593: LD_INT 1
45595: DEC
45596: ST_TO_ADDR
45597: LD_VAR 0 5
45601: PUSH
45602: LD_INT 1
45604: ARRAY
45605: PUSH
45606: FOR_TO
45607: IFFALSE 45686
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45609: LD_VAR 0 5
45613: PUSH
45614: LD_INT 1
45616: ARRAY
45617: PUSH
45618: LD_VAR 0 4
45622: ARRAY
45623: PPUSH
45624: LD_VAR 0 5
45628: PUSH
45629: LD_INT 2
45631: ARRAY
45632: PUSH
45633: LD_VAR 0 4
45637: ARRAY
45638: PPUSH
45639: CALL_OW 351
45643: IFFALSE 45684
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45645: LD_VAR 0 5
45649: PUSH
45650: LD_INT 1
45652: ARRAY
45653: PUSH
45654: LD_VAR 0 4
45658: ARRAY
45659: PPUSH
45660: LD_VAR 0 5
45664: PUSH
45665: LD_INT 2
45667: ARRAY
45668: PUSH
45669: LD_VAR 0 4
45673: ARRAY
45674: PPUSH
45675: LD_VAR 0 1
45679: PPUSH
45680: CALL_OW 244
// end ;
45684: GO 45606
45686: POP
45687: POP
// end ; end_of_file
45688: LD_VAR 0 3
45692: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45693: LD_INT 0
45695: PPUSH
45696: PPUSH
// disable ( mpActive ) ;
45697: LD_INT 100
45699: DISABLE_MARKED
// disable ( mpWin ) ;
45700: LD_INT 101
45702: DISABLE_MARKED
// disable ( mpLose ) ;
45703: LD_INT 102
45705: DISABLE_MARKED
// mpGameType := 0 ;
45706: LD_ADDR_EXP 1
45710: PUSH
45711: LD_INT 0
45713: ST_TO_ADDR
// mpGameSettings := [ ] ;
45714: LD_ADDR_EXP 4
45718: PUSH
45719: EMPTY
45720: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45721: LD_ADDR_EXP 2
45725: PUSH
45726: EMPTY
45727: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45728: LD_ADDR_EXP 3
45732: PUSH
45733: EMPTY
45734: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45735: LD_ADDR_EXP 27
45739: PUSH
45740: LD_INT 2
45742: PUSH
45743: LD_INT 2
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45750: LD_ADDR_EXP 10
45754: PUSH
45755: EMPTY
45756: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45757: LD_ADDR_EXP 11
45761: PUSH
45762: EMPTY
45763: ST_TO_ADDR
// mpDepots := [ ] ;
45764: LD_ADDR_EXP 12
45768: PUSH
45769: EMPTY
45770: ST_TO_ADDR
// mpBuildings := [ ] ;
45771: LD_ADDR_EXP 15
45775: PUSH
45776: EMPTY
45777: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45778: LD_ADDR_EXP 16
45782: PUSH
45783: EMPTY
45784: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45785: LD_ADDR_EXP 17
45789: PUSH
45790: EMPTY
45791: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45792: LD_ADDR_EXP 18
45796: PUSH
45797: EMPTY
45798: ST_TO_ADDR
// mpStartingResources := [ ] ;
45799: LD_ADDR_EXP 13
45803: PUSH
45804: EMPTY
45805: ST_TO_ADDR
// mpStartPos := [ ] ;
45806: LD_ADDR_EXP 19
45810: PUSH
45811: EMPTY
45812: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45813: LD_ADDR_EXP 20
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45822: LD_ADDR_EXP 21
45826: PUSH
45827: EMPTY
45828: ST_TO_ADDR
// mpApemans := [ ] ;
45829: LD_ADDR_EXP 28
45833: PUSH
45834: EMPTY
45835: ST_TO_ADDR
// mpApemansArea := [ ] ;
45836: LD_ADDR_EXP 29
45840: PUSH
45841: EMPTY
45842: ST_TO_ADDR
// mpRespawn := [ ] ;
45843: LD_ADDR_EXP 31
45847: PUSH
45848: EMPTY
45849: ST_TO_ADDR
// mpKingArea := 0 ;
45850: LD_ADDR_EXP 32
45854: PUSH
45855: LD_INT 0
45857: ST_TO_ADDR
// mpPoints := [ ] ;
45858: LD_ADDR_EXP 33
45862: PUSH
45863: EMPTY
45864: ST_TO_ADDR
// mpVehicles := 0 ;
45865: LD_ADDR_EXP 34
45869: PUSH
45870: LD_INT 0
45872: ST_TO_ADDR
// mpShipments := 0 ;
45873: LD_ADDR_EXP 25
45877: PUSH
45878: LD_INT 0
45880: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45881: LD_ADDR_EXP 38
45885: PUSH
45886: EMPTY
45887: PUSH
45888: EMPTY
45889: PUSH
45890: EMPTY
45891: PUSH
45892: EMPTY
45893: PUSH
45894: EMPTY
45895: PUSH
45896: EMPTY
45897: PUSH
45898: EMPTY
45899: PUSH
45900: EMPTY
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45912: LD_ADDR_EXP 30
45916: PUSH
45917: EMPTY
45918: PUSH
45919: EMPTY
45920: PUSH
45921: EMPTY
45922: PUSH
45923: EMPTY
45924: PUSH
45925: EMPTY
45926: PUSH
45927: EMPTY
45928: PUSH
45929: EMPTY
45930: PUSH
45931: EMPTY
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: ST_TO_ADDR
// mpEmissions := 0 ;
45943: LD_ADDR_EXP 35
45947: PUSH
45948: LD_INT 0
45950: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45951: LD_ADDR_EXP 23
45955: PUSH
45956: LD_INT 3
45958: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45959: LD_ADDR_EXP 22
45963: PUSH
45964: LD_INT 15
45966: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45967: LD_ADDR_EXP 36
45971: PUSH
45972: LD_INT 0
45974: ST_TO_ADDR
// mpGameActive := false ;
45975: LD_ADDR_EXP 37
45979: PUSH
45980: LD_INT 0
45982: ST_TO_ADDR
// mpBlockRespThread := false ;
45983: LD_ADDR_EXP 39
45987: PUSH
45988: LD_INT 0
45990: ST_TO_ADDR
// for i := 1 to 32 do
45991: LD_ADDR_VAR 0 2
45995: PUSH
45996: DOUBLE
45997: LD_INT 1
45999: DEC
46000: ST_TO_ADDR
46001: LD_INT 32
46003: PUSH
46004: FOR_TO
46005: IFFALSE 46032
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46007: LD_ADDR_EXP 4
46011: PUSH
46012: LD_EXP 4
46016: PPUSH
46017: LD_VAR 0 2
46021: PPUSH
46022: LD_INT 0
46024: PPUSH
46025: CALL_OW 1
46029: ST_TO_ADDR
46030: GO 46004
46032: POP
46033: POP
// end ;
46034: LD_VAR 0 1
46038: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46039: LD_INT 0
46041: PPUSH
46042: PPUSH
46043: PPUSH
46044: PPUSH
46045: PPUSH
46046: PPUSH
46047: PPUSH
46048: PPUSH
46049: PPUSH
46050: PPUSH
46051: PPUSH
46052: PPUSH
46053: PPUSH
46054: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
46055: LD_ADDR_VAR 0 14
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: LD_INT 2
46065: PUSH
46066: LD_INT 3
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: LIST
46073: ST_TO_ADDR
// for i in gameTypes do
46074: LD_ADDR_VAR 0 2
46078: PUSH
46079: LD_VAR 0 14
46083: PUSH
46084: FOR_IN
46085: IFFALSE 46094
// disable ( i ) ;
46087: LD_VAR 0 2
46091: DISABLE_MARKED
46092: GO 46084
46094: POP
46095: POP
// if Multiplayer then
46096: LD_OWVAR 4
46100: IFFALSE 46284
// begin mpGameType := mp_game_type ;
46102: LD_ADDR_EXP 1
46106: PUSH
46107: LD_OWVAR 6
46111: ST_TO_ADDR
// your_side := mp_player_side ;
46112: LD_ADDR_OWVAR 2
46116: PUSH
46117: LD_OWVAR 7
46121: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46122: LD_ADDR_EXP 5
46126: PUSH
46127: LD_OWVAR 17
46131: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46132: LD_ADDR_EXP 6
46136: PUSH
46137: LD_OWVAR 15
46141: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46142: LD_ADDR_EXP 7
46146: PUSH
46147: LD_OWVAR 16
46151: ST_TO_ADDR
// mpTeams := mp_teams ;
46152: LD_ADDR_EXP 8
46156: PUSH
46157: LD_OWVAR 12
46161: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46162: LD_ADDR_VAR 0 2
46166: PUSH
46167: DOUBLE
46168: LD_INT 1
46170: DEC
46171: ST_TO_ADDR
46172: LD_EXP 2
46176: PPUSH
46177: CALL 4994 0 1
46181: PUSH
46182: FOR_TO
46183: IFFALSE 46259
// begin setting := mpGameSettingsKeys [ i ] ;
46185: LD_ADDR_VAR 0 12
46189: PUSH
46190: LD_EXP 2
46194: PUSH
46195: LD_VAR 0 2
46199: ARRAY
46200: ST_TO_ADDR
// if setting then
46201: LD_VAR 0 12
46205: IFFALSE 46257
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46207: LD_ADDR_EXP 4
46211: PUSH
46212: LD_EXP 4
46216: PPUSH
46217: LD_VAR 0 2
46221: PPUSH
46222: LD_EXP 3
46226: PUSH
46227: LD_VAR 0 2
46231: ARRAY
46232: PUSH
46233: LD_VAR 0 2
46237: PUSH
46238: LD_INT 1
46240: MINUS
46241: PPUSH
46242: CALL_OW 426
46246: PUSH
46247: LD_INT 1
46249: PLUS
46250: ARRAY
46251: PPUSH
46252: CALL_OW 1
46256: ST_TO_ADDR
// end ;
46257: GO 46182
46259: POP
46260: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46261: LD_ADDR_EXP 9
46265: PUSH
46266: LD_EXP 6
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: EMPTY
46275: LIST
46276: DIFF
46277: PUSH
46278: LD_INT 1
46280: GREATER
46281: ST_TO_ADDR
// end else
46282: GO 46284
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46284: LD_EXP 1
46288: PPUSH
46289: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
46293: LD_EXP 16
46297: PPUSH
46298: CALL 4994 0 1
46302: IFFALSE 46333
// begin for i in mpMarkedAreas do
46304: LD_ADDR_VAR 0 2
46308: PUSH
46309: LD_EXP 16
46313: PUSH
46314: FOR_IN
46315: IFFALSE 46331
// SetAreaMapShow ( i , 0 ) ;
46317: LD_VAR 0 2
46321: PPUSH
46322: LD_INT 0
46324: PPUSH
46325: CALL_OW 424
46329: GO 46314
46331: POP
46332: POP
// end ; for i := 1 to 8 do
46333: LD_ADDR_VAR 0 2
46337: PUSH
46338: DOUBLE
46339: LD_INT 1
46341: DEC
46342: ST_TO_ADDR
46343: LD_INT 8
46345: PUSH
46346: FOR_TO
46347: IFFALSE 47598
// begin if not mpSidePositions [ i ] then
46349: LD_EXP 5
46353: PUSH
46354: LD_VAR 0 2
46358: ARRAY
46359: NOT
46360: IFFALSE 46364
// continue ;
46362: GO 46346
// side := i ;
46364: LD_ADDR_VAR 0 7
46368: PUSH
46369: LD_VAR 0 2
46373: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46374: LD_ADDR_VAR 0 9
46378: PUSH
46379: LD_EXP 7
46383: PUSH
46384: LD_VAR 0 2
46388: ARRAY
46389: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46390: LD_ADDR_VAR 0 8
46394: PUSH
46395: LD_EXP 5
46399: PUSH
46400: LD_VAR 0 2
46404: ARRAY
46405: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46406: LD_EXP 10
46410: PPUSH
46411: CALL 4994 0 1
46415: IFFALSE 46492
// begin for j in mpOilDeposits [ pos ] do
46417: LD_ADDR_VAR 0 3
46421: PUSH
46422: LD_EXP 10
46426: PUSH
46427: LD_VAR 0 8
46431: ARRAY
46432: PUSH
46433: FOR_IN
46434: IFFALSE 46490
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46436: LD_VAR 0 3
46440: PUSH
46441: LD_INT 1
46443: ARRAY
46444: PPUSH
46445: LD_VAR 0 3
46449: PUSH
46450: LD_INT 2
46452: ARRAY
46453: PPUSH
46454: LD_INT 2
46456: PPUSH
46457: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46461: LD_VAR 0 3
46465: PUSH
46466: LD_INT 1
46468: ARRAY
46469: PPUSH
46470: LD_VAR 0 3
46474: PUSH
46475: LD_INT 2
46477: ARRAY
46478: PPUSH
46479: LD_VAR 0 7
46483: PPUSH
46484: CALL_OW 441
// end ;
46488: GO 46433
46490: POP
46491: POP
// end ; if Count ( mpSibDeposits ) then
46492: LD_EXP 11
46496: PPUSH
46497: CALL 4994 0 1
46501: IFFALSE 46578
// begin for j in mpSibDeposits [ pos ] do
46503: LD_ADDR_VAR 0 3
46507: PUSH
46508: LD_EXP 11
46512: PUSH
46513: LD_VAR 0 8
46517: ARRAY
46518: PUSH
46519: FOR_IN
46520: IFFALSE 46576
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46522: LD_VAR 0 3
46526: PUSH
46527: LD_INT 1
46529: ARRAY
46530: PPUSH
46531: LD_VAR 0 3
46535: PUSH
46536: LD_INT 2
46538: ARRAY
46539: PPUSH
46540: LD_INT 3
46542: PPUSH
46543: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46547: LD_VAR 0 3
46551: PUSH
46552: LD_INT 1
46554: ARRAY
46555: PPUSH
46556: LD_VAR 0 3
46560: PUSH
46561: LD_INT 2
46563: ARRAY
46564: PPUSH
46565: LD_VAR 0 7
46569: PPUSH
46570: CALL_OW 441
// end ;
46574: GO 46519
46576: POP
46577: POP
// end ; InitBc ;
46578: CALL_OW 21
// InitUc ;
46582: CALL_OW 18
// uc_side := side ;
46586: LD_ADDR_OWVAR 20
46590: PUSH
46591: LD_VAR 0 7
46595: ST_TO_ADDR
// uc_nation := nation ;
46596: LD_ADDR_OWVAR 21
46600: PUSH
46601: LD_VAR 0 9
46605: ST_TO_ADDR
// if Count ( mpDepots ) then
46606: LD_EXP 12
46610: PPUSH
46611: CALL 4994 0 1
46615: IFFALSE 46793
// begin if GameTypeSurvival then
46617: LD_INT 2
46619: IFFALSE 46639
// begin bc_level := 10 ;
46621: LD_ADDR_OWVAR 43
46625: PUSH
46626: LD_INT 10
46628: ST_TO_ADDR
// bc_type := b_warehouse ;
46629: LD_ADDR_OWVAR 42
46633: PUSH
46634: LD_INT 1
46636: ST_TO_ADDR
// end else
46637: GO 46655
// begin bc_level := 0 ;
46639: LD_ADDR_OWVAR 43
46643: PUSH
46644: LD_INT 0
46646: ST_TO_ADDR
// bc_type := b_depot ;
46647: LD_ADDR_OWVAR 42
46651: PUSH
46652: LD_INT 0
46654: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46655: LD_ADDR_VAR 0 4
46659: PUSH
46660: LD_EXP 12
46664: PUSH
46665: LD_VAR 0 8
46669: ARRAY
46670: PUSH
46671: LD_INT 1
46673: ARRAY
46674: PPUSH
46675: LD_EXP 12
46679: PUSH
46680: LD_VAR 0 8
46684: ARRAY
46685: PUSH
46686: LD_INT 2
46688: ARRAY
46689: PPUSH
46690: LD_EXP 12
46694: PUSH
46695: LD_VAR 0 8
46699: ARRAY
46700: PUSH
46701: LD_INT 3
46703: ARRAY
46704: PPUSH
46705: CALL_OW 47
46709: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46710: LD_VAR 0 4
46714: PPUSH
46715: LD_STRING @
46717: PUSH
46718: LD_VAR 0 7
46722: STR
46723: PPUSH
46724: CALL_OW 500
// if Count ( mpStartingResources ) then
46728: LD_EXP 13
46732: PPUSH
46733: CALL 4994 0 1
46737: IFFALSE 46791
// begin for j := 1 to mpStartingResources do
46739: LD_ADDR_VAR 0 3
46743: PUSH
46744: DOUBLE
46745: LD_INT 1
46747: DEC
46748: ST_TO_ADDR
46749: LD_EXP 13
46753: PUSH
46754: FOR_TO
46755: IFFALSE 46789
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46757: LD_VAR 0 4
46761: PPUSH
46762: CALL_OW 274
46766: PPUSH
46767: LD_VAR 0 3
46771: PPUSH
46772: LD_EXP 13
46776: PUSH
46777: LD_VAR 0 3
46781: ARRAY
46782: PPUSH
46783: CALL_OW 277
46787: GO 46754
46789: POP
46790: POP
// end ; end else
46791: GO 46940
// if Count ( mpStartingResources ) then
46793: LD_EXP 13
46797: PPUSH
46798: CALL 4994 0 1
46802: IFFALSE 46940
// begin for j := 1 to mpStartingResources do
46804: LD_ADDR_VAR 0 3
46808: PUSH
46809: DOUBLE
46810: LD_INT 1
46812: DEC
46813: ST_TO_ADDR
46814: LD_EXP 13
46818: PUSH
46819: FOR_TO
46820: IFFALSE 46938
// begin resources := mpStartingResources [ j ] ;
46822: LD_ADDR_VAR 0 13
46826: PUSH
46827: LD_EXP 13
46831: PUSH
46832: LD_VAR 0 3
46836: ARRAY
46837: ST_TO_ADDR
// repeat if resources >= 50 then
46838: LD_VAR 0 13
46842: PUSH
46843: LD_INT 50
46845: GREATEREQUAL
46846: IFFALSE 46892
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46848: LD_VAR 0 3
46852: PPUSH
46853: LD_INT 5
46855: PPUSH
46856: LD_VAR 0 5
46860: PPUSH
46861: LD_VAR 0 6
46865: PPUSH
46866: LD_INT 4
46868: PPUSH
46869: LD_INT 0
46871: PPUSH
46872: CALL_OW 60
// resources := resources - 50 ;
46876: LD_ADDR_VAR 0 13
46880: PUSH
46881: LD_VAR 0 13
46885: PUSH
46886: LD_INT 50
46888: MINUS
46889: ST_TO_ADDR
// end else
46890: GO 46926
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46892: LD_VAR 0 3
46896: PPUSH
46897: LD_VAR 0 13
46901: PUSH
46902: LD_INT 10
46904: DIV
46905: PPUSH
46906: LD_VAR 0 5
46910: PPUSH
46911: LD_VAR 0 6
46915: PPUSH
46916: LD_INT 4
46918: PPUSH
46919: LD_INT 0
46921: PPUSH
46922: CALL_OW 60
// until resources <= 0 ;
46926: LD_VAR 0 13
46930: PUSH
46931: LD_INT 0
46933: LESSEQUAL
46934: IFFALSE 46838
// end ;
46936: GO 46819
46938: POP
46939: POP
// end ; if Count ( mpBuildings ) then
46940: LD_EXP 15
46944: PPUSH
46945: CALL 4994 0 1
46949: IFFALSE 47027
// begin for j in mpBuildings [ pos ] do
46951: LD_ADDR_VAR 0 3
46955: PUSH
46956: LD_EXP 15
46960: PUSH
46961: LD_VAR 0 8
46965: ARRAY
46966: PUSH
46967: FOR_IN
46968: IFFALSE 47025
// begin bc_level := 0 ;
46970: LD_ADDR_OWVAR 43
46974: PUSH
46975: LD_INT 0
46977: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46978: LD_ADDR_OWVAR 42
46982: PUSH
46983: LD_VAR 0 3
46987: PUSH
46988: LD_INT 1
46990: ARRAY
46991: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46992: LD_VAR 0 3
46996: PUSH
46997: LD_INT 2
46999: ARRAY
47000: PPUSH
47001: LD_VAR 0 3
47005: PUSH
47006: LD_INT 3
47008: ARRAY
47009: PPUSH
47010: LD_VAR 0 3
47014: PUSH
47015: LD_INT 4
47017: ARRAY
47018: PPUSH
47019: CALL_OW 47
// end ;
47023: GO 46967
47025: POP
47026: POP
// end ; if mpBattleFlag > - 1 then
47027: LD_EXP 20
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: GREATER
47036: IFFALSE 47195
// begin x := mpStartPos [ pos ] [ 1 ] ;
47038: LD_ADDR_VAR 0 5
47042: PUSH
47043: LD_EXP 19
47047: PUSH
47048: LD_VAR 0 8
47052: ARRAY
47053: PUSH
47054: LD_INT 1
47056: ARRAY
47057: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47058: LD_ADDR_VAR 0 6
47062: PUSH
47063: LD_EXP 19
47067: PUSH
47068: LD_VAR 0 8
47072: ARRAY
47073: PUSH
47074: LD_INT 2
47076: ARRAY
47077: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47078: LD_VAR 0 5
47082: PPUSH
47083: LD_VAR 0 6
47087: PPUSH
47088: LD_INT 12
47090: PPUSH
47091: LD_INT 2
47093: PPUSH
47094: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47098: LD_ADDR_EXP 21
47102: PUSH
47103: LD_EXP 21
47107: PPUSH
47108: LD_VAR 0 7
47112: PPUSH
47113: LD_VAR 0 7
47117: PPUSH
47118: LD_VAR 0 5
47122: PPUSH
47123: LD_VAR 0 6
47127: PPUSH
47128: LD_INT 1
47130: PUSH
47131: LD_INT 100
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: LD_INT 70
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 3
47150: PUSH
47151: LD_INT 40
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 10
47160: PUSH
47161: LD_INT 25
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 20
47170: PUSH
47171: LD_INT 100
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: PPUSH
47185: CALL_OW 418
47189: PPUSH
47190: CALL_OW 1
47194: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47195: LD_EXP 24
47199: PUSH
47200: LD_INT 20
47202: PPUSH
47203: LD_VAR 0 7
47207: PPUSH
47208: CALL_OW 321
47212: PUSH
47213: LD_INT 1
47215: EQUAL
47216: AND
47217: IFFALSE 47234
// SetTech ( tech_SibDet , side , state_researched ) ;
47219: LD_INT 20
47221: PPUSH
47222: LD_VAR 0 7
47226: PPUSH
47227: LD_INT 2
47229: PPUSH
47230: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47234: LD_INT 24
47236: PPUSH
47237: LD_VAR 0 7
47241: PPUSH
47242: LD_INT 0
47244: PPUSH
47245: CALL_OW 322
// if mpSibBomb = 1 then
47249: LD_EXP 26
47253: PUSH
47254: LD_INT 1
47256: EQUAL
47257: IFFALSE 47276
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47259: LD_INT 25
47261: PPUSH
47262: LD_VAR 0 7
47266: PPUSH
47267: LD_INT 1
47269: PPUSH
47270: CALL_OW 322
// end else
47274: GO 47291
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47276: LD_INT 25
47278: PPUSH
47279: LD_VAR 0 7
47283: PPUSH
47284: LD_INT 0
47286: PPUSH
47287: CALL_OW 322
// end ; if mpVehicles then
47291: LD_EXP 34
47295: IFFALSE 47394
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47297: LD_ADDR_VAR 0 3
47301: PUSH
47302: LD_VAR 0 7
47306: PPUSH
47307: LD_VAR 0 9
47311: PPUSH
47312: LD_EXP 34
47316: PPUSH
47317: CALL 48508 0 3
47321: PUSH
47322: FOR_IN
47323: IFFALSE 47392
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47325: LD_VAR 0 3
47329: PPUSH
47330: LD_INT 0
47332: PPUSH
47333: LD_INT 5
47335: PPUSH
47336: CALL_OW 12
47340: PPUSH
47341: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47345: LD_VAR 0 3
47349: PPUSH
47350: LD_EXP 19
47354: PUSH
47355: LD_VAR 0 8
47359: ARRAY
47360: PUSH
47361: LD_INT 1
47363: ARRAY
47364: PPUSH
47365: LD_EXP 19
47369: PUSH
47370: LD_VAR 0 8
47374: ARRAY
47375: PUSH
47376: LD_INT 2
47378: ARRAY
47379: PPUSH
47380: LD_INT 12
47382: PPUSH
47383: LD_INT 0
47385: PPUSH
47386: CALL_OW 50
// end ;
47390: GO 47322
47392: POP
47393: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47394: LD_ADDR_VAR 0 11
47398: PUSH
47399: LD_VAR 0 7
47403: PPUSH
47404: LD_VAR 0 9
47408: PPUSH
47409: LD_EXP 22
47413: PPUSH
47414: LD_EXP 23
47418: PPUSH
47419: CALL 48010 0 4
47423: ST_TO_ADDR
// for j in team do
47424: LD_ADDR_VAR 0 3
47428: PUSH
47429: LD_VAR 0 11
47433: PUSH
47434: FOR_IN
47435: IFFALSE 47484
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47437: LD_VAR 0 3
47441: PPUSH
47442: LD_EXP 19
47446: PUSH
47447: LD_VAR 0 8
47451: ARRAY
47452: PUSH
47453: LD_INT 1
47455: ARRAY
47456: PPUSH
47457: LD_EXP 19
47461: PUSH
47462: LD_VAR 0 8
47466: ARRAY
47467: PUSH
47468: LD_INT 2
47470: ARRAY
47471: PPUSH
47472: LD_INT 12
47474: PPUSH
47475: LD_INT 0
47477: PPUSH
47478: CALL_OW 50
47482: GO 47434
47484: POP
47485: POP
// if mpApemans then
47486: LD_EXP 28
47490: IFFALSE 47596
// begin for j := 1 to mpApemans do
47492: LD_ADDR_VAR 0 3
47496: PUSH
47497: DOUBLE
47498: LD_INT 1
47500: DEC
47501: ST_TO_ADDR
47502: LD_EXP 28
47506: PUSH
47507: FOR_TO
47508: IFFALSE 47594
// begin PrepareApeman ( - 5 ) ;
47510: LD_INT 5
47512: NEG
47513: PPUSH
47514: CALL 36851 0 1
// ape := CreateHuman ;
47518: LD_ADDR_VAR 0 10
47522: PUSH
47523: CALL_OW 44
47527: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
47528: LD_ADDR_EXP 30
47532: PUSH
47533: LD_EXP 30
47537: PPUSH
47538: LD_VAR 0 8
47542: PPUSH
47543: LD_EXP 30
47547: PUSH
47548: LD_VAR 0 8
47552: ARRAY
47553: PPUSH
47554: LD_VAR 0 10
47558: PPUSH
47559: CALL 40603 0 2
47563: PPUSH
47564: CALL_OW 1
47568: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47569: LD_VAR 0 10
47573: PPUSH
47574: LD_EXP 29
47578: PUSH
47579: LD_VAR 0 8
47583: ARRAY
47584: PPUSH
47585: LD_INT 0
47587: PPUSH
47588: CALL_OW 49
// end ;
47592: GO 47507
47594: POP
47595: POP
// end ; end ;
47596: GO 46346
47598: POP
47599: POP
// if not mpTeamGame then
47600: LD_EXP 9
47604: NOT
47605: IFFALSE 47703
// begin for i := 1 to 8 do
47607: LD_ADDR_VAR 0 2
47611: PUSH
47612: DOUBLE
47613: LD_INT 1
47615: DEC
47616: ST_TO_ADDR
47617: LD_INT 8
47619: PUSH
47620: FOR_TO
47621: IFFALSE 47699
// for j := 1 to 8 do
47623: LD_ADDR_VAR 0 3
47627: PUSH
47628: DOUBLE
47629: LD_INT 1
47631: DEC
47632: ST_TO_ADDR
47633: LD_INT 8
47635: PUSH
47636: FOR_TO
47637: IFFALSE 47695
// if i <> j then
47639: LD_VAR 0 2
47643: PUSH
47644: LD_VAR 0 3
47648: NONEQUAL
47649: IFFALSE 47673
// SetAttitude ( i , j , att_neutral , true ) else
47651: LD_VAR 0 2
47655: PPUSH
47656: LD_VAR 0 3
47660: PPUSH
47661: LD_INT 0
47663: PPUSH
47664: LD_INT 1
47666: PPUSH
47667: CALL_OW 80
47671: GO 47693
// SetAttitude ( i , j , att_friend , true ) ;
47673: LD_VAR 0 2
47677: PPUSH
47678: LD_VAR 0 3
47682: PPUSH
47683: LD_INT 1
47685: PPUSH
47686: LD_INT 1
47688: PPUSH
47689: CALL_OW 80
47693: GO 47636
47695: POP
47696: POP
47697: GO 47620
47699: POP
47700: POP
// end else
47701: GO 47878
// begin if mpSharedVision then
47703: LD_EXP 14
47707: IFFALSE 47772
// begin for i in mpTeams do
47709: LD_ADDR_VAR 0 2
47713: PUSH
47714: LD_EXP 8
47718: PUSH
47719: FOR_IN
47720: IFFALSE 47770
// for j := 2 to i do
47722: LD_ADDR_VAR 0 3
47726: PUSH
47727: DOUBLE
47728: LD_INT 2
47730: DEC
47731: ST_TO_ADDR
47732: LD_VAR 0 2
47736: PUSH
47737: FOR_TO
47738: IFFALSE 47766
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47740: LD_VAR 0 2
47744: PUSH
47745: LD_VAR 0 3
47749: ARRAY
47750: PPUSH
47751: LD_VAR 0 2
47755: PUSH
47756: LD_INT 1
47758: ARRAY
47759: PPUSH
47760: CALL_OW 343
47764: GO 47737
47766: POP
47767: POP
47768: GO 47719
47770: POP
47771: POP
// end ; for i := 1 to 8 do
47772: LD_ADDR_VAR 0 2
47776: PUSH
47777: DOUBLE
47778: LD_INT 1
47780: DEC
47781: ST_TO_ADDR
47782: LD_INT 8
47784: PUSH
47785: FOR_TO
47786: IFFALSE 47876
// for j := 1 to 8 do
47788: LD_ADDR_VAR 0 3
47792: PUSH
47793: DOUBLE
47794: LD_INT 1
47796: DEC
47797: ST_TO_ADDR
47798: LD_INT 8
47800: PUSH
47801: FOR_TO
47802: IFFALSE 47872
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47804: LD_EXP 6
47808: PUSH
47809: LD_VAR 0 2
47813: ARRAY
47814: PUSH
47815: LD_EXP 6
47819: PUSH
47820: LD_VAR 0 3
47824: ARRAY
47825: EQUAL
47826: IFFALSE 47850
// SetAttitude ( i , j , att_friend , true ) else
47828: LD_VAR 0 2
47832: PPUSH
47833: LD_VAR 0 3
47837: PPUSH
47838: LD_INT 1
47840: PPUSH
47841: LD_INT 1
47843: PPUSH
47844: CALL_OW 80
47848: GO 47870
// SetAttitude ( i , j , att_enemy , true ) ;
47850: LD_VAR 0 2
47854: PPUSH
47855: LD_VAR 0 3
47859: PPUSH
47860: LD_INT 2
47862: PPUSH
47863: LD_INT 1
47865: PPUSH
47866: CALL_OW 80
47870: GO 47801
47872: POP
47873: POP
47874: GO 47785
47876: POP
47877: POP
// end ; music_nat := mpSideNations [ your_side ] ;
47878: LD_ADDR_OWVAR 71
47882: PUSH
47883: LD_EXP 7
47887: PUSH
47888: LD_OWVAR 2
47892: ARRAY
47893: ST_TO_ADDR
// if IAmSpec then
47894: CALL_OW 531
47898: IFFALSE 47939
// begin FogOff ( true ) ;
47900: LD_INT 1
47902: PPUSH
47903: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47907: LD_EXP 27
47911: PUSH
47912: LD_INT 1
47914: ARRAY
47915: PUSH
47916: LD_INT 2
47918: DIV
47919: PPUSH
47920: LD_EXP 27
47924: PUSH
47925: LD_INT 2
47927: ARRAY
47928: PUSH
47929: LD_INT 2
47931: DIV
47932: PPUSH
47933: CALL_OW 86
// end else
47937: GO 47985
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47939: LD_EXP 19
47943: PUSH
47944: LD_EXP 5
47948: PUSH
47949: LD_OWVAR 2
47953: ARRAY
47954: ARRAY
47955: PUSH
47956: LD_INT 1
47958: ARRAY
47959: PPUSH
47960: LD_EXP 19
47964: PUSH
47965: LD_EXP 5
47969: PUSH
47970: LD_OWVAR 2
47974: ARRAY
47975: ARRAY
47976: PUSH
47977: LD_INT 2
47979: ARRAY
47980: PPUSH
47981: CALL_OW 86
// end ; BeginBuildUp ;
47985: CALL 48986 0 0
// enable ( mpActive ) ;
47989: LD_INT 100
47991: ENABLE_MARKED
// enable ( mpGameType ) ;
47992: LD_EXP 1
47996: ENABLE_MARKED
// mpGameActive := true ;
47997: LD_ADDR_EXP 37
48001: PUSH
48002: LD_INT 1
48004: ST_TO_ADDR
// end ;
48005: LD_VAR 0 1
48009: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
48010: LD_INT 0
48012: PPUSH
48013: PPUSH
48014: PPUSH
48015: PPUSH
// result := [ ] ;
48016: LD_ADDR_VAR 0 5
48020: PUSH
48021: EMPTY
48022: ST_TO_ADDR
// class := class_soldier ;
48023: LD_ADDR_VAR 0 8
48027: PUSH
48028: LD_INT 1
48030: ST_TO_ADDR
// uc_side := side ;
48031: LD_ADDR_OWVAR 20
48035: PUSH
48036: LD_VAR 0 1
48040: ST_TO_ADDR
// uc_nation := nation ;
48041: LD_ADDR_OWVAR 21
48045: PUSH
48046: LD_VAR 0 2
48050: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48051: LD_ADDR_OWVAR 26
48055: PUSH
48056: LD_OWVAR 19
48060: PUSH
48061: LD_VAR 0 1
48065: ARRAY
48066: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48067: LD_INT 1
48069: PPUSH
48070: LD_INT 2
48072: PPUSH
48073: CALL_OW 12
48077: PPUSH
48078: LD_VAR 0 8
48082: PPUSH
48083: LD_VAR 0 4
48087: PUSH
48088: LD_INT 2
48090: PLUS
48091: PPUSH
48092: CALL_OW 380
// hc_importance := 105 ;
48096: LD_ADDR_OWVAR 32
48100: PUSH
48101: LD_INT 105
48103: ST_TO_ADDR
// if Multiplayer then
48104: LD_OWVAR 4
48108: IFFALSE 48148
// begin hc_gallery := MULTIAVATARS ;
48110: LD_ADDR_OWVAR 33
48114: PUSH
48115: LD_STRING MULTIAVATARS
48117: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48118: LD_ADDR_OWVAR 34
48122: PUSH
48123: LD_VAR 0 1
48127: PPUSH
48128: CALL_OW 525
48132: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48133: LD_ADDR_OWVAR 27
48137: PUSH
48138: LD_VAR 0 1
48142: PPUSH
48143: CALL_OW 526
48147: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48148: LD_ADDR_VAR 0 5
48152: PUSH
48153: LD_VAR 0 5
48157: PPUSH
48158: CALL_OW 44
48162: PPUSH
48163: CALL 40603 0 2
48167: ST_TO_ADDR
// if mpTeamPreset then
48168: LD_LOC 1
48172: IFFALSE 48268
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
48174: LD_LOC 1
48178: PUSH
48179: LD_INT 1
48181: ARRAY
48182: PPUSH
48183: LD_VAR 0 5
48187: PUSH
48188: LD_VAR 0 5
48192: ARRAY
48193: PPUSH
48194: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
48198: LD_VAR 0 5
48202: PUSH
48203: LD_VAR 0 5
48207: ARRAY
48208: PPUSH
48209: LD_INT 1
48211: PPUSH
48212: LD_LOC 1
48216: PUSH
48217: LD_INT 1
48219: ARRAY
48220: PPUSH
48221: LD_INT 1
48223: PPUSH
48224: CALL_OW 260
48228: PPUSH
48229: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
48233: LD_VAR 0 5
48237: PUSH
48238: LD_VAR 0 5
48242: ARRAY
48243: PPUSH
48244: LD_INT 2
48246: PPUSH
48247: LD_LOC 1
48251: PUSH
48252: LD_INT 1
48254: ARRAY
48255: PPUSH
48256: LD_INT 2
48258: PPUSH
48259: CALL_OW 260
48263: PPUSH
48264: CALL_OW 239
// end ; InitHc_All ( ) ;
48268: CALL_OW 584
// class := 2 ;
48272: LD_ADDR_VAR 0 8
48276: PUSH
48277: LD_INT 2
48279: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48280: LD_ADDR_VAR 0 6
48284: PUSH
48285: DOUBLE
48286: LD_INT 1
48288: DEC
48289: ST_TO_ADDR
48290: LD_VAR 0 3
48294: PUSH
48295: LD_INT 1
48297: MINUS
48298: PUSH
48299: FOR_TO
48300: IFFALSE 48484
// begin PrepareHuman ( false , class , skill ) ;
48302: LD_INT 0
48304: PPUSH
48305: LD_VAR 0 8
48309: PPUSH
48310: LD_VAR 0 4
48314: PPUSH
48315: CALL_OW 380
// un := CreateHuman ;
48319: LD_ADDR_VAR 0 7
48323: PUSH
48324: CALL_OW 44
48328: ST_TO_ADDR
// result := Join ( result , un ) ;
48329: LD_ADDR_VAR 0 5
48333: PUSH
48334: LD_VAR 0 5
48338: PPUSH
48339: LD_VAR 0 7
48343: PPUSH
48344: CALL 40603 0 2
48348: ST_TO_ADDR
// if mpTeamPreset then
48349: LD_LOC 1
48353: IFFALSE 48449
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
48355: LD_LOC 1
48359: PUSH
48360: LD_VAR 0 6
48364: PUSH
48365: LD_INT 1
48367: PLUS
48368: ARRAY
48369: PPUSH
48370: LD_VAR 0 7
48374: PPUSH
48375: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
48379: LD_VAR 0 7
48383: PPUSH
48384: LD_INT 1
48386: PPUSH
48387: LD_LOC 1
48391: PUSH
48392: LD_VAR 0 6
48396: PUSH
48397: LD_INT 1
48399: PLUS
48400: ARRAY
48401: PPUSH
48402: LD_INT 1
48404: PPUSH
48405: CALL_OW 260
48409: PPUSH
48410: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
48414: LD_VAR 0 7
48418: PPUSH
48419: LD_INT 2
48421: PPUSH
48422: LD_LOC 1
48426: PUSH
48427: LD_VAR 0 6
48431: PUSH
48432: LD_INT 1
48434: PLUS
48435: ARRAY
48436: PPUSH
48437: LD_INT 2
48439: PPUSH
48440: CALL_OW 260
48444: PPUSH
48445: CALL_OW 239
// end ; class := Inc ( class ) ;
48449: LD_ADDR_VAR 0 8
48453: PUSH
48454: LD_VAR 0 8
48458: PPUSH
48459: CALL 41964 0 1
48463: ST_TO_ADDR
// if class = 5 then
48464: LD_VAR 0 8
48468: PUSH
48469: LD_INT 5
48471: EQUAL
48472: IFFALSE 48482
// class := 1 ;
48474: LD_ADDR_VAR 0 8
48478: PUSH
48479: LD_INT 1
48481: ST_TO_ADDR
// end ;
48482: GO 48299
48484: POP
48485: POP
// if not mpTeamPreset then
48486: LD_LOC 1
48490: NOT
48491: IFFALSE 48503
// mpTeamPreset := result ;
48493: LD_ADDR_LOC 1
48497: PUSH
48498: LD_VAR 0 5
48502: ST_TO_ADDR
// end ;
48503: LD_VAR 0 5
48507: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48508: LD_INT 0
48510: PPUSH
48511: PPUSH
// result := [ ] ;
48512: LD_ADDR_VAR 0 4
48516: PUSH
48517: EMPTY
48518: ST_TO_ADDR
// if not vehicles then
48519: LD_VAR 0 3
48523: NOT
48524: IFFALSE 48528
// exit ;
48526: GO 48687
// for i := 1 to vehicles [ nation ] do
48528: LD_ADDR_VAR 0 5
48532: PUSH
48533: DOUBLE
48534: LD_INT 1
48536: DEC
48537: ST_TO_ADDR
48538: LD_VAR 0 3
48542: PUSH
48543: LD_VAR 0 2
48547: ARRAY
48548: PUSH
48549: FOR_TO
48550: IFFALSE 48685
// begin uc_side := side ;
48552: LD_ADDR_OWVAR 20
48556: PUSH
48557: LD_VAR 0 1
48561: ST_TO_ADDR
// uc_nation := nation ;
48562: LD_ADDR_OWVAR 21
48566: PUSH
48567: LD_VAR 0 2
48571: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48572: LD_VAR 0 3
48576: PUSH
48577: LD_VAR 0 2
48581: ARRAY
48582: PUSH
48583: LD_VAR 0 5
48587: ARRAY
48588: PUSH
48589: LD_INT 1
48591: ARRAY
48592: PPUSH
48593: LD_VAR 0 3
48597: PUSH
48598: LD_VAR 0 2
48602: ARRAY
48603: PUSH
48604: LD_VAR 0 5
48608: ARRAY
48609: PUSH
48610: LD_INT 2
48612: ARRAY
48613: PPUSH
48614: LD_VAR 0 3
48618: PUSH
48619: LD_VAR 0 2
48623: ARRAY
48624: PUSH
48625: LD_VAR 0 5
48629: ARRAY
48630: PUSH
48631: LD_INT 3
48633: ARRAY
48634: PPUSH
48635: LD_VAR 0 3
48639: PUSH
48640: LD_VAR 0 2
48644: ARRAY
48645: PUSH
48646: LD_VAR 0 5
48650: ARRAY
48651: PUSH
48652: LD_INT 4
48654: ARRAY
48655: PPUSH
48656: LD_INT 80
48658: PPUSH
48659: CALL 7732 0 5
// result := Join ( result , CreateVehicle ) ;
48663: LD_ADDR_VAR 0 4
48667: PUSH
48668: LD_VAR 0 4
48672: PPUSH
48673: CALL_OW 45
48677: PPUSH
48678: CALL 40603 0 2
48682: ST_TO_ADDR
// end ;
48683: GO 48549
48685: POP
48686: POP
// end ;
48687: LD_VAR 0 4
48691: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48692: LD_INT 0
48694: PPUSH
48695: PPUSH
// for i in mpBattleFlags do
48696: LD_ADDR_VAR 0 3
48700: PUSH
48701: LD_EXP 21
48705: PUSH
48706: FOR_IN
48707: IFFALSE 48784
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48709: LD_VAR 0 3
48713: PPUSH
48714: LD_INT 1
48716: PUSH
48717: LD_VAR 0 1
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: LD_VAR 0 1
48733: PUSH
48734: LD_REAL  7.00000000000000E-0001
48737: MUL
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 3
48745: PUSH
48746: LD_VAR 0 1
48750: PUSH
48751: LD_REAL  4.00000000000000E-0001
48754: MUL
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 20
48762: PUSH
48763: LD_VAR 0 1
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: PPUSH
48778: CALL_OW 423
48782: GO 48706
48784: POP
48785: POP
// end ;
48786: LD_VAR 0 2
48790: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48791: LD_INT 100
48793: IFFALSE 48888
48795: GO 48797
48797: DISABLE
48798: LD_INT 0
48800: PPUSH
48801: PPUSH
// begin if mpBattleFlag <= 0 then
48802: LD_EXP 20
48806: PUSH
48807: LD_INT 0
48809: LESSEQUAL
48810: IFFALSE 48814
// exit ;
48812: GO 48888
// strength := 100 ;
48814: LD_ADDR_VAR 0 2
48818: PUSH
48819: LD_INT 100
48821: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48822: LD_EXP 20
48826: PPUSH
48827: CALL_OW 67
// strength := Dec ( strength ) ;
48831: LD_ADDR_VAR 0 2
48835: PUSH
48836: LD_VAR 0 2
48840: PPUSH
48841: CALL 41986 0 1
48845: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48846: LD_VAR 0 2
48850: PPUSH
48851: CALL 48692 0 1
// until not strength ;
48855: LD_VAR 0 2
48859: NOT
48860: IFFALSE 48822
// for i in mpBattleFlags do
48862: LD_ADDR_VAR 0 1
48866: PUSH
48867: LD_EXP 21
48871: PUSH
48872: FOR_IN
48873: IFFALSE 48886
// KillBattleFlag ( i ) ;
48875: LD_VAR 0 1
48879: PPUSH
48880: CALL_OW 419
48884: GO 48872
48886: POP
48887: POP
// end ;
48888: PPOPN 2
48890: END
// every 0 0$1 marked mpActive do var side , tmp ;
48891: GO 48893
48893: DISABLE
48894: LD_INT 0
48896: PPUSH
48897: PPUSH
// begin if mpSibBomb <= 1 then
48898: LD_EXP 26
48902: PUSH
48903: LD_INT 1
48905: LESSEQUAL
48906: IFFALSE 48910
// exit ;
48908: GO 48983
// tmp := mpSibBomb ;
48910: LD_ADDR_VAR 0 2
48914: PUSH
48915: LD_EXP 26
48919: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48920: LD_INT 35
48922: PPUSH
48923: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48927: LD_ADDR_VAR 0 2
48931: PUSH
48932: LD_VAR 0 2
48936: PUSH
48937: LD_INT 35
48939: MINUS
48940: ST_TO_ADDR
// until not tmp ;
48941: LD_VAR 0 2
48945: NOT
48946: IFFALSE 48920
// for side := 1 to 8 do
48948: LD_ADDR_VAR 0 1
48952: PUSH
48953: DOUBLE
48954: LD_INT 1
48956: DEC
48957: ST_TO_ADDR
48958: LD_INT 8
48960: PUSH
48961: FOR_TO
48962: IFFALSE 48981
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48964: LD_INT 25
48966: PPUSH
48967: LD_VAR 0 1
48971: PPUSH
48972: LD_INT 1
48974: PPUSH
48975: CALL_OW 322
48979: GO 48961
48981: POP
48982: POP
// end ;
48983: PPOPN 2
48985: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48986: LD_INT 0
48988: PPUSH
48989: PPUSH
48990: PPUSH
// mpBuildUpTimeDelay := 0 ;
48991: LD_ADDR_EXP 40
48995: PUSH
48996: LD_INT 0
48998: ST_TO_ADDR
// if not mpBuildUpTime then
48999: LD_EXP 18
49003: NOT
49004: IFFALSE 49008
// exit ;
49006: GO 49191
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
49008: LD_ADDR_EXP 40
49012: PUSH
49013: LD_INT 8400
49015: PUSH
49016: LD_INT 2100
49018: PUSH
49019: LD_EXP 18
49023: MUL
49024: PLUS
49025: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
49026: LD_ADDR_EXP 41
49030: PUSH
49031: LD_INT 1
49033: ST_TO_ADDR
// for i := 1 to 8 do
49034: LD_ADDR_VAR 0 2
49038: PUSH
49039: DOUBLE
49040: LD_INT 1
49042: DEC
49043: ST_TO_ADDR
49044: LD_INT 8
49046: PUSH
49047: FOR_TO
49048: IFFALSE 49189
// if mpSidePositions [ i ] then
49050: LD_EXP 5
49054: PUSH
49055: LD_VAR 0 2
49059: ARRAY
49060: IFFALSE 49187
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
49062: LD_EXP 17
49066: PUSH
49067: LD_EXP 5
49071: PUSH
49072: LD_VAR 0 2
49076: ARRAY
49077: ARRAY
49078: PPUSH
49079: LD_INT 5
49081: PPUSH
49082: CALL_OW 424
// for j := 1 to 8 do
49086: LD_ADDR_VAR 0 3
49090: PUSH
49091: DOUBLE
49092: LD_INT 1
49094: DEC
49095: ST_TO_ADDR
49096: LD_INT 8
49098: PUSH
49099: FOR_TO
49100: IFFALSE 49185
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49102: LD_EXP 5
49106: PUSH
49107: LD_VAR 0 3
49111: ARRAY
49112: PUSH
49113: LD_EXP 6
49117: PUSH
49118: LD_VAR 0 2
49122: ARRAY
49123: PUSH
49124: LD_EXP 6
49128: PUSH
49129: LD_VAR 0 3
49133: ARRAY
49134: NONEQUAL
49135: PUSH
49136: LD_EXP 9
49140: NOT
49141: PUSH
49142: LD_VAR 0 2
49146: PUSH
49147: LD_VAR 0 3
49151: NONEQUAL
49152: AND
49153: OR
49154: AND
49155: IFFALSE 49183
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49157: LD_VAR 0 3
49161: PPUSH
49162: LD_EXP 17
49166: PUSH
49167: LD_EXP 5
49171: PUSH
49172: LD_VAR 0 2
49176: ARRAY
49177: ARRAY
49178: PPUSH
49179: CALL_OW 333
49183: GO 49099
49185: POP
49186: POP
// end ;
49187: GO 49047
49189: POP
49190: POP
// end ;
49191: LD_VAR 0 1
49195: RET
// function EndBuildUp ; var i , j ; begin
49196: LD_INT 0
49198: PPUSH
49199: PPUSH
49200: PPUSH
// mpBuildUpTimeActive := false ;
49201: LD_ADDR_EXP 41
49205: PUSH
49206: LD_INT 0
49208: ST_TO_ADDR
// for i := 1 to 8 do
49209: LD_ADDR_VAR 0 2
49213: PUSH
49214: DOUBLE
49215: LD_INT 1
49217: DEC
49218: ST_TO_ADDR
49219: LD_INT 8
49221: PUSH
49222: FOR_TO
49223: IFFALSE 49364
// if mpSidePositions [ i ] then
49225: LD_EXP 5
49229: PUSH
49230: LD_VAR 0 2
49234: ARRAY
49235: IFFALSE 49362
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
49237: LD_EXP 17
49241: PUSH
49242: LD_EXP 5
49246: PUSH
49247: LD_VAR 0 2
49251: ARRAY
49252: ARRAY
49253: PPUSH
49254: LD_INT 0
49256: PPUSH
49257: CALL_OW 424
// for j := 1 to 8 do
49261: LD_ADDR_VAR 0 3
49265: PUSH
49266: DOUBLE
49267: LD_INT 1
49269: DEC
49270: ST_TO_ADDR
49271: LD_INT 8
49273: PUSH
49274: FOR_TO
49275: IFFALSE 49360
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49277: LD_EXP 5
49281: PUSH
49282: LD_VAR 0 3
49286: ARRAY
49287: PUSH
49288: LD_EXP 6
49292: PUSH
49293: LD_VAR 0 2
49297: ARRAY
49298: PUSH
49299: LD_EXP 6
49303: PUSH
49304: LD_VAR 0 3
49308: ARRAY
49309: NONEQUAL
49310: PUSH
49311: LD_EXP 9
49315: NOT
49316: PUSH
49317: LD_VAR 0 2
49321: PUSH
49322: LD_VAR 0 3
49326: NONEQUAL
49327: AND
49328: OR
49329: AND
49330: IFFALSE 49358
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49332: LD_VAR 0 3
49336: PPUSH
49337: LD_EXP 17
49341: PUSH
49342: LD_EXP 5
49346: PUSH
49347: LD_VAR 0 2
49351: ARRAY
49352: ARRAY
49353: PPUSH
49354: CALL_OW 334
49358: GO 49274
49360: POP
49361: POP
// end ;
49362: GO 49222
49364: POP
49365: POP
// end ;
49366: LD_VAR 0 1
49370: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49371: LD_EXP 41
49375: IFFALSE 49550
49377: GO 49379
49379: DISABLE
49380: LD_INT 0
49382: PPUSH
49383: PPUSH
// begin for i := 1 to 8 do
49384: LD_ADDR_VAR 0 1
49388: PUSH
49389: DOUBLE
49390: LD_INT 1
49392: DEC
49393: ST_TO_ADDR
49394: LD_INT 8
49396: PUSH
49397: FOR_TO
49398: IFFALSE 49547
// if mpSidePositions [ i ] then
49400: LD_EXP 5
49404: PUSH
49405: LD_VAR 0 1
49409: ARRAY
49410: IFFALSE 49545
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49412: LD_ADDR_VAR 0 2
49416: PUSH
49417: LD_EXP 17
49421: PUSH
49422: LD_EXP 5
49426: PUSH
49427: LD_VAR 0 1
49431: ARRAY
49432: ARRAY
49433: PPUSH
49434: LD_INT 2
49436: PUSH
49437: LD_INT 21
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 21
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 22
49464: PUSH
49465: LD_OWVAR 2
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PPUSH
49478: CALL_OW 70
49482: PUSH
49483: FOR_IN
49484: IFFALSE 49543
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49486: LD_EXP 6
49490: PUSH
49491: LD_VAR 0 1
49495: ARRAY
49496: PUSH
49497: LD_EXP 6
49501: PUSH
49502: LD_OWVAR 2
49506: ARRAY
49507: NONEQUAL
49508: PUSH
49509: LD_EXP 9
49513: NOT
49514: PUSH
49515: LD_VAR 0 1
49519: PUSH
49520: LD_OWVAR 2
49524: NONEQUAL
49525: AND
49526: OR
49527: IFFALSE 49541
// ComMoveToArea ( un , BuildUpEscape ) ;
49529: LD_VAR 0 2
49533: PPUSH
49534: LD_INT 13
49536: PPUSH
49537: CALL_OW 113
49541: GO 49483
49543: POP
49544: POP
49545: GO 49397
49547: POP
49548: POP
// enable ;
49549: ENABLE
// end ;
49550: PPOPN 2
49552: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49553: LD_EXP 18
49557: IFFALSE 49607
49559: GO 49561
49561: DISABLE
49562: LD_INT 0
49564: PPUSH
// begin tmp := mpBuildUpTime ;
49565: LD_ADDR_VAR 0 1
49569: PUSH
49570: LD_EXP 18
49574: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49575: LD_INT 35
49577: PPUSH
49578: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49582: LD_ADDR_VAR 0 1
49586: PUSH
49587: LD_VAR 0 1
49591: PUSH
49592: LD_INT 35
49594: MINUS
49595: ST_TO_ADDR
// until not tmp ;
49596: LD_VAR 0 1
49600: NOT
49601: IFFALSE 49575
// EndBuildUp ;
49603: CALL 49196 0 0
// end ;
49607: PPOPN 1
49609: END
// every 0 0$1 trigger mpActive marked mpWin do
49610: LD_INT 100
49612: IFFALSE 49646
49614: GO 49616
49616: DISABLE
// begin if IAmServer then
49617: CALL_OW 518
49621: IFFALSE 49630
// wait ( 0 0$3 ) ;
49623: LD_INT 105
49625: PPUSH
49626: CALL_OW 67
// if Multiplayer then
49630: LD_OWVAR 4
49634: IFFALSE 49642
// YouWinInMultiplayer else
49636: CALL_OW 106
49640: GO 49646
// YouWin ;
49642: CALL_OW 103
// end ;
49646: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49647: LD_INT 0
49649: PPUSH
// result := false ;
49650: LD_ADDR_VAR 0 3
49654: PUSH
49655: LD_INT 0
49657: ST_TO_ADDR
// case gameType of GameTypeNormal :
49658: LD_VAR 0 1
49662: PUSH
49663: LD_INT 1
49665: DOUBLE
49666: EQUAL
49667: IFTRUE 49671
49669: GO 49744
49671: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49672: LD_ADDR_VAR 0 3
49676: PUSH
49677: LD_INT 22
49679: PUSH
49680: LD_VAR 0 2
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 2
49691: PUSH
49692: LD_INT 21
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 33
49704: PUSH
49705: LD_INT 3
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 33
49714: PUSH
49715: LD_INT 5
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PPUSH
49732: CALL_OW 69
49736: PPUSH
49737: CALL 4994 0 1
49741: ST_TO_ADDR
// end ; GameTypeSurvival :
49742: GO 49979
49744: LD_INT 2
49746: DOUBLE
49747: EQUAL
49748: IFTRUE 49752
49750: GO 49880
49752: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49753: LD_ADDR_VAR 0 3
49757: PUSH
49758: LD_INT 22
49760: PUSH
49761: LD_VAR 0 2
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: PUSH
49773: LD_INT 30
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 30
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: LIST
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PPUSH
49802: CALL_OW 69
49806: PPUSH
49807: CALL 4994 0 1
49811: PUSH
49812: LD_INT 22
49814: PUSH
49815: LD_VAR 0 2
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: LD_INT 21
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 33
49839: PUSH
49840: LD_INT 3
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 33
49849: PUSH
49850: LD_INT 5
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PPUSH
49867: CALL_OW 69
49871: PPUSH
49872: CALL 4994 0 1
49876: AND
49877: ST_TO_ADDR
// end ; GameTypeKing :
49878: GO 49979
49880: LD_INT 3
49882: DOUBLE
49883: EQUAL
49884: IFTRUE 49888
49886: GO 49978
49888: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
49889: LD_ADDR_VAR 0 3
49893: PUSH
49894: LD_INT 22
49896: PUSH
49897: LD_VAR 0 2
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: LD_INT 21
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 33
49921: PUSH
49922: LD_INT 3
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 33
49931: PUSH
49932: LD_INT 5
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PPUSH
49949: CALL_OW 69
49953: PPUSH
49954: CALL 4994 0 1
49958: PUSH
49959: LD_VAR 0 2
49963: PPUSH
49964: CALL 53256 0 1
49968: PUSH
49969: LD_EXP 33
49973: LESS
49974: AND
49975: ST_TO_ADDR
// end ; end ;
49976: GO 49979
49978: POP
// end ;
49979: LD_VAR 0 3
49983: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49984: LD_INT 100
49986: IFFALSE 50208
49988: GO 49990
49990: DISABLE
49991: LD_INT 0
49993: PPUSH
49994: PPUSH
// begin if Multiplayer then
49995: LD_OWVAR 4
49999: IFFALSE 50007
// SetPlayerSpectator ( ) else
50001: CALL_OW 572
50005: GO 50016
// FogOff ( your_side ) ;
50007: LD_OWVAR 2
50011: PPUSH
50012: CALL_OW 344
// repeat gameIsOn := false ;
50016: LD_ADDR_VAR 0 1
50020: PUSH
50021: LD_INT 0
50023: ST_TO_ADDR
// for i := 1 to 8 do
50024: LD_ADDR_VAR 0 2
50028: PUSH
50029: DOUBLE
50030: LD_INT 1
50032: DEC
50033: ST_TO_ADDR
50034: LD_INT 8
50036: PUSH
50037: FOR_TO
50038: IFFALSE 50160
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50040: LD_EXP 5
50044: PUSH
50045: LD_VAR 0 2
50049: ARRAY
50050: PUSH
50051: LD_VAR 0 2
50055: PPUSH
50056: CALL_OW 108
50060: AND
50061: PUSH
50062: LD_VAR 0 2
50066: PUSH
50067: LD_OWVAR 2
50071: NONEQUAL
50072: AND
50073: IFFALSE 50158
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
50075: LD_EXP 6
50079: PUSH
50080: LD_VAR 0 2
50084: ARRAY
50085: NOT
50086: PUSH
50087: LD_EXP 6
50091: PUSH
50092: LD_VAR 0 2
50096: ARRAY
50097: PUSH
50098: LD_EXP 6
50102: PUSH
50103: LD_OWVAR 2
50107: ARRAY
50108: NONEQUAL
50109: PUSH
50110: LD_OWVAR 2
50114: PPUSH
50115: LD_VAR 0 2
50119: PPUSH
50120: CALL_OW 81
50124: PUSH
50125: LD_INT 1
50127: NONEQUAL
50128: AND
50129: OR
50130: IFFALSE 50158
// if HasPowerByGameType ( mpGameType , i ) then
50132: LD_EXP 1
50136: PPUSH
50137: LD_VAR 0 2
50141: PPUSH
50142: CALL 49647 0 2
50146: IFFALSE 50158
// begin gameIsOn := true ;
50148: LD_ADDR_VAR 0 1
50152: PUSH
50153: LD_INT 1
50155: ST_TO_ADDR
// break ;
50156: GO 50160
// end ;
50158: GO 50037
50160: POP
50161: POP
// wait ( 100 ) ;
50162: LD_INT 100
50164: PPUSH
50165: CALL_OW 67
// until not gameIsOn ;
50169: LD_VAR 0 1
50173: NOT
50174: IFFALSE 50016
// if IAmServer then
50176: CALL_OW 518
50180: IFFALSE 50189
// wait ( 0 0$3 ) ;
50182: LD_INT 105
50184: PPUSH
50185: CALL_OW 67
// if Multiplayer then
50189: LD_OWVAR 4
50193: IFFALSE 50201
// YouLostInMultiplayer else
50195: CALL_OW 107
50199: GO 50208
// YouLost (  ) ;
50201: LD_STRING 
50203: PPUSH
50204: CALL_OW 104
// end ;
50208: PPOPN 2
50210: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
50211: LD_EXP 31
50215: IFFALSE 50591
50217: GO 50219
50219: DISABLE
50220: LD_INT 0
50222: PPUSH
50223: PPUSH
50224: PPUSH
50225: PPUSH
50226: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
50227: LD_ADDR_VAR 0 5
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: LD_INT 3
50240: PUSH
50241: LD_INT 4
50243: PUSH
50244: LD_INT 5
50246: PUSH
50247: LD_INT 6
50249: PUSH
50250: LD_INT 7
50252: PUSH
50253: LD_INT 8
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
50266: LD_INT 350
50268: PPUSH
50269: CALL_OW 67
// for i := 1 to 8 do
50273: LD_ADDR_VAR 0 1
50277: PUSH
50278: DOUBLE
50279: LD_INT 1
50281: DEC
50282: ST_TO_ADDR
50283: LD_INT 8
50285: PUSH
50286: FOR_TO
50287: IFFALSE 50561
// begin j := sides [ i ] ;
50289: LD_ADDR_VAR 0 2
50293: PUSH
50294: LD_VAR 0 5
50298: PUSH
50299: LD_VAR 0 1
50303: ARRAY
50304: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
50305: LD_EXP 38
50309: PUSH
50310: LD_VAR 0 2
50314: ARRAY
50315: PPUSH
50316: CALL 4994 0 1
50320: PUSH
50321: LD_VAR 0 2
50325: PPUSH
50326: CALL_OW 108
50330: AND
50331: PUSH
50332: LD_EXP 1
50336: PPUSH
50337: LD_VAR 0 2
50341: PPUSH
50342: CALL 49647 0 2
50346: AND
50347: IFFALSE 50559
// begin wait ( mpRespawn div 3 ) ;
50349: LD_EXP 31
50353: PUSH
50354: LD_INT 3
50356: DIV
50357: PPUSH
50358: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50362: LD_ADDR_VAR 0 3
50366: PUSH
50367: LD_INT 22
50369: PUSH
50370: LD_VAR 0 2
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 50
50381: PUSH
50382: EMPTY
50383: LIST
50384: PUSH
50385: LD_INT 2
50387: PUSH
50388: LD_INT 30
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 30
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: LIST
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: PPUSH
50418: CALL_OW 69
50422: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
50423: LD_VAR 0 3
50427: NOT
50428: PUSH
50429: LD_VAR 0 2
50433: PPUSH
50434: CALL_OW 108
50438: NOT
50439: OR
50440: PUSH
50441: LD_EXP 1
50445: PPUSH
50446: LD_VAR 0 2
50450: PPUSH
50451: CALL 49647 0 2
50455: NOT
50456: OR
50457: IFFALSE 50461
// continue ;
50459: GO 50286
// spawn := tmp [ 1 ] ;
50461: LD_ADDR_VAR 0 4
50465: PUSH
50466: LD_VAR 0 3
50470: PUSH
50471: LD_INT 1
50473: ARRAY
50474: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50475: LD_EXP 38
50479: PUSH
50480: LD_VAR 0 2
50484: ARRAY
50485: PUSH
50486: LD_INT 1
50488: ARRAY
50489: PPUSH
50490: LD_VAR 0 4
50494: PPUSH
50495: CALL_OW 250
50499: PPUSH
50500: LD_VAR 0 4
50504: PPUSH
50505: CALL_OW 251
50509: PPUSH
50510: LD_INT 32
50512: PPUSH
50513: LD_INT 1
50515: PPUSH
50516: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50520: LD_ADDR_EXP 38
50524: PUSH
50525: LD_EXP 38
50529: PPUSH
50530: LD_VAR 0 2
50534: PPUSH
50535: LD_EXP 38
50539: PUSH
50540: LD_VAR 0 2
50544: ARRAY
50545: PPUSH
50546: LD_INT 1
50548: PPUSH
50549: CALL_OW 3
50553: PPUSH
50554: CALL_OW 1
50558: ST_TO_ADDR
// end ; end ;
50559: GO 50286
50561: POP
50562: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50563: LD_ADDR_VAR 0 5
50567: PUSH
50568: LD_VAR 0 5
50572: PPUSH
50573: LD_INT 1
50575: PPUSH
50576: LD_INT 8
50578: PPUSH
50579: LD_INT 1
50581: PPUSH
50582: CALL 7272 0 4
50586: ST_TO_ADDR
// until false ;
50587: LD_INT 0
50589: IFFALSE 50266
// end ;
50591: PPOPN 5
50593: END
// every 0 0$1 marked mpActive do
50594: GO 50596
50596: DISABLE
// begin enable ;
50597: ENABLE
// if not mpDisplayStrings then
50598: LD_EXP 36
50602: NOT
50603: IFFALSE 50614
// begin display_strings := [ ] ;
50605: LD_ADDR_OWVAR 47
50609: PUSH
50610: EMPTY
50611: ST_TO_ADDR
// exit ;
50612: GO 50624
// end ; display_strings := mpDisplayStrings ;
50614: LD_ADDR_OWVAR 47
50618: PUSH
50619: LD_EXP 36
50623: ST_TO_ADDR
// end ; end_of_file
50624: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50625: LD_INT 0
50627: PPUSH
50628: PPUSH
50629: PPUSH
50630: PPUSH
50631: PPUSH
50632: PPUSH
50633: PPUSH
50634: PPUSH
50635: PPUSH
// if GetType ( un ) = unit_vehicle then
50636: LD_VAR 0 1
50640: PPUSH
50641: CALL_OW 247
50645: PUSH
50646: LD_INT 2
50648: EQUAL
50649: IFFALSE 50653
// exit ;
50651: GO 51285
// side := GetSide ( un ) ;
50653: LD_ADDR_VAR 0 9
50657: PUSH
50658: LD_VAR 0 1
50662: PPUSH
50663: CALL_OW 255
50667: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50668: LD_EXP 1
50672: PUSH
50673: LD_INT 2
50675: EQUAL
50676: IFFALSE 50752
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
50678: LD_VAR 0 1
50682: PPUSH
50683: CALL_OW 266
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: IN
50698: IFFALSE 50752
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50700: LD_ADDR_VAR 0 3
50704: PUSH
50705: LD_INT 22
50707: PUSH
50708: LD_VAR 0 9
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 21
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PPUSH
50731: CALL_OW 69
50735: PUSH
50736: FOR_IN
50737: IFFALSE 50750
// KillUnit ( i ) ;
50739: LD_VAR 0 3
50743: PPUSH
50744: CALL_OW 66
50748: GO 50736
50750: POP
50751: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50752: LD_VAR 0 1
50756: PPUSH
50757: CALL_OW 257
50761: PUSH
50762: LD_INT 12
50764: PUSH
50765: LD_INT 17
50767: PUSH
50768: LD_INT 15
50770: PUSH
50771: LD_INT 16
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: IN
50780: PUSH
50781: LD_VAR 0 1
50785: PPUSH
50786: CALL_OW 263
50790: PUSH
50791: LD_INT 5
50793: EQUAL
50794: OR
50795: IFFALSE 51014
// begin tag := 0 ;
50797: LD_ADDR_VAR 0 5
50801: PUSH
50802: LD_INT 0
50804: ST_TO_ADDR
// for i := 1 to 8 do
50805: LD_ADDR_VAR 0 3
50809: PUSH
50810: DOUBLE
50811: LD_INT 1
50813: DEC
50814: ST_TO_ADDR
50815: LD_INT 8
50817: PUSH
50818: FOR_TO
50819: IFFALSE 50853
// if un in mpApePosIndex [ i ] then
50821: LD_VAR 0 1
50825: PUSH
50826: LD_EXP 30
50830: PUSH
50831: LD_VAR 0 3
50835: ARRAY
50836: IN
50837: IFFALSE 50851
// begin tag := i ;
50839: LD_ADDR_VAR 0 5
50843: PUSH
50844: LD_VAR 0 3
50848: ST_TO_ADDR
// break ;
50849: GO 50853
// end ;
50851: GO 50818
50853: POP
50854: POP
// if not tag then
50855: LD_VAR 0 5
50859: NOT
50860: IFFALSE 50864
// exit ;
50862: GO 51285
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50864: LD_ADDR_VAR 0 7
50868: PUSH
50869: LD_EXP 29
50873: PUSH
50874: LD_EXP 5
50878: PUSH
50879: LD_VAR 0 5
50883: ARRAY
50884: ARRAY
50885: ST_TO_ADDR
// if not area then
50886: LD_VAR 0 7
50890: NOT
50891: IFFALSE 50895
// exit ;
50893: GO 51285
// wait ( 4 4$00 ) ;
50895: LD_INT 8400
50897: PPUSH
50898: CALL_OW 67
// repeat wait ( 10 ) ;
50902: LD_INT 10
50904: PPUSH
50905: CALL_OW 67
// until not mpBlockRespThread ;
50909: LD_EXP 39
50913: NOT
50914: IFFALSE 50902
// mpBlockRespThread := true ;
50916: LD_ADDR_EXP 39
50920: PUSH
50921: LD_INT 1
50923: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
50924: LD_INT 0
50926: PPUSH
50927: CALL 36851 0 1
// ape := CreateHuman ;
50931: LD_ADDR_VAR 0 4
50935: PUSH
50936: CALL_OW 44
50940: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
50941: LD_ADDR_EXP 30
50945: PUSH
50946: LD_EXP 30
50950: PPUSH
50951: LD_VAR 0 5
50955: PPUSH
50956: LD_EXP 30
50960: PUSH
50961: LD_VAR 0 5
50965: ARRAY
50966: PPUSH
50967: LD_VAR 0 4
50971: PPUSH
50972: CALL 40603 0 2
50976: PPUSH
50977: CALL_OW 1
50981: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
50982: LD_VAR 0 4
50986: PPUSH
50987: LD_VAR 0 7
50991: PPUSH
50992: LD_INT 0
50994: PPUSH
50995: CALL_OW 49
// wait ( 10 ) ;
50999: LD_INT 10
51001: PPUSH
51002: CALL_OW 67
// mpBlockRespThread := false ;
51006: LD_ADDR_EXP 39
51010: PUSH
51011: LD_INT 0
51013: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
51014: LD_VAR 0 1
51018: PPUSH
51019: CALL_OW 247
51023: PUSH
51024: LD_INT 1
51026: EQUAL
51027: PUSH
51028: LD_VAR 0 1
51032: PPUSH
51033: CALL_OW 248
51037: PUSH
51038: LD_INT 0
51040: GREATER
51041: AND
51042: IFFALSE 51285
// begin if not mpRespawn then
51044: LD_EXP 31
51048: NOT
51049: IFFALSE 51053
// exit ;
51051: GO 51285
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
51053: LD_VAR 0 9
51057: PPUSH
51058: CALL_OW 108
51062: NOT
51063: PUSH
51064: LD_EXP 1
51068: PPUSH
51069: LD_VAR 0 9
51073: PPUSH
51074: CALL 49647 0 2
51078: NOT
51079: AND
51080: IFFALSE 51084
// exit ;
51082: GO 51285
// side := GetSide ( un ) ;
51084: LD_ADDR_VAR 0 9
51088: PUSH
51089: LD_VAR 0 1
51093: PPUSH
51094: CALL_OW 255
51098: ST_TO_ADDR
// nation := GetNation ( un ) ;
51099: LD_ADDR_VAR 0 8
51103: PUSH
51104: LD_VAR 0 1
51108: PPUSH
51109: CALL_OW 248
51113: ST_TO_ADDR
// class := GetClass ( un ) ;
51114: LD_ADDR_VAR 0 6
51118: PUSH
51119: LD_VAR 0 1
51123: PPUSH
51124: CALL_OW 257
51128: ST_TO_ADDR
// if class > 4 then
51129: LD_VAR 0 6
51133: PUSH
51134: LD_INT 4
51136: GREATER
51137: IFFALSE 51147
// class := 1 ;
51139: LD_ADDR_VAR 0 6
51143: PUSH
51144: LD_INT 1
51146: ST_TO_ADDR
// repeat wait ( 10 ) ;
51147: LD_INT 10
51149: PPUSH
51150: CALL_OW 67
// until not mpBlockRespThread ;
51154: LD_EXP 39
51158: NOT
51159: IFFALSE 51147
// mpBlockRespThread := true ;
51161: LD_ADDR_EXP 39
51165: PUSH
51166: LD_INT 1
51168: ST_TO_ADDR
// uc_side := side ;
51169: LD_ADDR_OWVAR 20
51173: PUSH
51174: LD_VAR 0 9
51178: ST_TO_ADDR
// uc_nation := nation ;
51179: LD_ADDR_OWVAR 21
51183: PUSH
51184: LD_VAR 0 8
51188: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
51189: LD_INT 0
51191: PPUSH
51192: LD_VAR 0 6
51196: PPUSH
51197: LD_INT 2
51199: PPUSH
51200: CALL_OW 380
// un := CreateHuman ;
51204: LD_ADDR_VAR 0 1
51208: PUSH
51209: CALL_OW 44
51213: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
51214: LD_ADDR_EXP 38
51218: PUSH
51219: LD_EXP 38
51223: PPUSH
51224: LD_VAR 0 9
51228: PPUSH
51229: LD_EXP 38
51233: PUSH
51234: LD_VAR 0 9
51238: ARRAY
51239: PPUSH
51240: LD_EXP 38
51244: PUSH
51245: LD_VAR 0 9
51249: ARRAY
51250: PUSH
51251: LD_INT 1
51253: PLUS
51254: PPUSH
51255: LD_VAR 0 1
51259: PPUSH
51260: CALL_OW 1
51264: PPUSH
51265: CALL_OW 1
51269: ST_TO_ADDR
// wait ( 10 ) ;
51270: LD_INT 10
51272: PPUSH
51273: CALL_OW 67
// mpBlockRespThread := false ;
51277: LD_ADDR_EXP 39
51281: PUSH
51282: LD_INT 0
51284: ST_TO_ADDR
// end ; end ;
51285: LD_VAR 0 2
51289: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
51290: LD_INT 0
51292: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
51293: LD_VAR 0 1
51297: PPUSH
51298: CALL_OW 266
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: IN
51313: IFFALSE 51338
// SetBName ( building , @ & GetSide ( building ) ) ;
51315: LD_VAR 0 1
51319: PPUSH
51320: LD_STRING @
51322: PUSH
51323: LD_VAR 0 1
51327: PPUSH
51328: CALL_OW 255
51332: STR
51333: PPUSH
51334: CALL_OW 500
// end ;
51338: LD_VAR 0 2
51342: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
51343: LD_INT 0
51345: PPUSH
51346: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
51347: LD_EXP 1
51351: PUSH
51352: LD_INT 2
51354: EQUAL
51355: PUSH
51356: LD_VAR 0 1
51360: PPUSH
51361: CALL_OW 266
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: IN
51376: AND
51377: IFFALSE 51442
// begin KillUnit ( building ) ;
51379: LD_VAR 0 1
51383: PPUSH
51384: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
51388: LD_ADDR_VAR 0 5
51392: PUSH
51393: LD_INT 22
51395: PUSH
51396: LD_VAR 0 2
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 21
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PPUSH
51419: CALL_OW 69
51423: PUSH
51424: FOR_IN
51425: IFFALSE 51438
// KillUnit ( i ) ;
51427: LD_VAR 0 5
51431: PPUSH
51432: CALL_OW 66
51436: GO 51424
51438: POP
51439: POP
// exit ;
51440: GO 51487
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
51442: LD_VAR 0 1
51446: PPUSH
51447: CALL_OW 266
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: IN
51462: IFFALSE 51487
// SetBName ( building , @ & GetSide ( building ) ) ;
51464: LD_VAR 0 1
51468: PPUSH
51469: LD_STRING @
51471: PUSH
51472: LD_VAR 0 1
51476: PPUSH
51477: CALL_OW 255
51481: STR
51482: PPUSH
51483: CALL_OW 500
// end ; end_of_file
51487: LD_VAR 0 4
51491: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
51492: LD_EXP 37
51496: PUSH
51497: CALL 51702 0 0
51501: AND
51502: PUSH
51503: LD_OWVAR 4
51507: AND
51508: IFFALSE 51699
51510: GO 51512
51512: DISABLE
51513: LD_INT 0
51515: PPUSH
51516: PPUSH
// begin canWin := false ;
51517: LD_ADDR_VAR 0 2
51521: PUSH
51522: LD_INT 0
51524: ST_TO_ADDR
// if not HasPower ( your_side ) then
51525: LD_OWVAR 2
51529: PPUSH
51530: CALL 51742 0 1
51534: NOT
51535: IFFALSE 51546
// begin Multiplayer_Loose_Message ;
51537: CALL_OW 521
// enable ( mpLose ) ;
51541: LD_INT 102
51543: ENABLE_MARKED
// end else
51544: GO 51699
// begin canWin := true ;
51546: LD_ADDR_VAR 0 2
51550: PUSH
51551: LD_INT 1
51553: ST_TO_ADDR
// for i := 1 to 8 do
51554: LD_ADDR_VAR 0 1
51558: PUSH
51559: DOUBLE
51560: LD_INT 1
51562: DEC
51563: ST_TO_ADDR
51564: LD_INT 8
51566: PUSH
51567: FOR_TO
51568: IFFALSE 51685
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51570: LD_EXP 5
51574: PUSH
51575: LD_VAR 0 1
51579: ARRAY
51580: PUSH
51581: LD_VAR 0 1
51585: PPUSH
51586: CALL_OW 108
51590: AND
51591: PUSH
51592: LD_VAR 0 1
51596: PUSH
51597: LD_OWVAR 2
51601: NONEQUAL
51602: AND
51603: IFFALSE 51683
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51605: LD_EXP 6
51609: PUSH
51610: LD_VAR 0 1
51614: ARRAY
51615: NOT
51616: PUSH
51617: LD_EXP 6
51621: PUSH
51622: LD_VAR 0 1
51626: ARRAY
51627: PUSH
51628: LD_EXP 6
51632: PUSH
51633: LD_OWVAR 2
51637: ARRAY
51638: NONEQUAL
51639: PUSH
51640: LD_OWVAR 2
51644: PPUSH
51645: LD_VAR 0 1
51649: PPUSH
51650: CALL_OW 81
51654: PUSH
51655: LD_INT 1
51657: NONEQUAL
51658: AND
51659: OR
51660: IFFALSE 51683
// if HasPower ( i ) then
51662: LD_VAR 0 1
51666: PPUSH
51667: CALL 51742 0 1
51671: IFFALSE 51683
// begin canWin := false ;
51673: LD_ADDR_VAR 0 2
51677: PUSH
51678: LD_INT 0
51680: ST_TO_ADDR
// break ;
51681: GO 51685
// end ;
51683: GO 51567
51685: POP
51686: POP
// if canWin then
51687: LD_VAR 0 2
51691: IFFALSE 51698
// enable ( mpWin ) else
51693: LD_INT 101
51695: ENABLE_MARKED
51696: GO 51699
// enable ;
51698: ENABLE
// end ; end ;
51699: PPOPN 2
51701: END
// function CanWinLoose ; begin
51702: LD_INT 0
51704: PPUSH
// result := true ;
51705: LD_ADDR_VAR 0 1
51709: PUSH
51710: LD_INT 1
51712: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51713: CALL_OW 531
51717: PUSH
51718: CALL_OW 519
51722: PUSH
51723: LD_INT 1
51725: GREATER
51726: AND
51727: IFFALSE 51737
// result := false ;
51729: LD_ADDR_VAR 0 1
51733: PUSH
51734: LD_INT 0
51736: ST_TO_ADDR
// end ;
51737: LD_VAR 0 1
51741: RET
// function HasPower ( i ) ; begin
51742: LD_INT 0
51744: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51745: LD_ADDR_VAR 0 2
51749: PUSH
51750: LD_INT 22
51752: PUSH
51753: LD_VAR 0 1
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: LD_INT 21
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 33
51777: PUSH
51778: LD_INT 3
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 33
51787: PUSH
51788: LD_INT 5
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PPUSH
51805: CALL_OW 69
51809: ST_TO_ADDR
// end ; end_of_file
51810: LD_VAR 0 2
51814: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51815: LD_EXP 37
51819: IFFALSE 51862
51821: GO 51823
51823: DISABLE
51824: LD_INT 0
51826: PPUSH
// begin for i := 1 to 8 do
51827: LD_ADDR_VAR 0 1
51831: PUSH
51832: DOUBLE
51833: LD_INT 1
51835: DEC
51836: ST_TO_ADDR
51837: LD_INT 8
51839: PUSH
51840: FOR_TO
51841: IFFALSE 51860
// SetRestrict ( b_depot , i , state_disabled ) ;
51843: LD_INT 0
51845: PPUSH
51846: LD_VAR 0 1
51850: PPUSH
51851: LD_INT 0
51853: PPUSH
51854: CALL_OW 324
51858: GO 51840
51860: POP
51861: POP
// end ;
51862: PPOPN 1
51864: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51865: LD_EXP 37
51869: PUSH
51870: CALL 52075 0 0
51874: AND
51875: PUSH
51876: LD_OWVAR 4
51880: AND
51881: IFFALSE 52072
51883: GO 51885
51885: DISABLE
51886: LD_INT 0
51888: PPUSH
51889: PPUSH
// begin canWin := false ;
51890: LD_ADDR_VAR 0 2
51894: PUSH
51895: LD_INT 0
51897: ST_TO_ADDR
// if not HasPower ( your_side ) then
51898: LD_OWVAR 2
51902: PPUSH
51903: CALL 52115 0 1
51907: NOT
51908: IFFALSE 51919
// begin Multiplayer_Loose_Message ;
51910: CALL_OW 521
// enable ( mpLose ) ;
51914: LD_INT 102
51916: ENABLE_MARKED
// end else
51917: GO 52072
// begin canWin := true ;
51919: LD_ADDR_VAR 0 2
51923: PUSH
51924: LD_INT 1
51926: ST_TO_ADDR
// for i := 1 to 8 do
51927: LD_ADDR_VAR 0 1
51931: PUSH
51932: DOUBLE
51933: LD_INT 1
51935: DEC
51936: ST_TO_ADDR
51937: LD_INT 8
51939: PUSH
51940: FOR_TO
51941: IFFALSE 52058
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51943: LD_EXP 5
51947: PUSH
51948: LD_VAR 0 1
51952: ARRAY
51953: PUSH
51954: LD_VAR 0 1
51958: PPUSH
51959: CALL_OW 108
51963: AND
51964: PUSH
51965: LD_VAR 0 1
51969: PUSH
51970: LD_OWVAR 2
51974: NONEQUAL
51975: AND
51976: IFFALSE 52056
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51978: LD_EXP 6
51982: PUSH
51983: LD_VAR 0 1
51987: ARRAY
51988: NOT
51989: PUSH
51990: LD_EXP 6
51994: PUSH
51995: LD_VAR 0 1
51999: ARRAY
52000: PUSH
52001: LD_EXP 6
52005: PUSH
52006: LD_OWVAR 2
52010: ARRAY
52011: NONEQUAL
52012: PUSH
52013: LD_OWVAR 2
52017: PPUSH
52018: LD_VAR 0 1
52022: PPUSH
52023: CALL_OW 81
52027: PUSH
52028: LD_INT 1
52030: NONEQUAL
52031: AND
52032: OR
52033: IFFALSE 52056
// if HasPower ( i ) then
52035: LD_VAR 0 1
52039: PPUSH
52040: CALL 52115 0 1
52044: IFFALSE 52056
// begin canWin := false ;
52046: LD_ADDR_VAR 0 2
52050: PUSH
52051: LD_INT 0
52053: ST_TO_ADDR
// break ;
52054: GO 52058
// end ;
52056: GO 51940
52058: POP
52059: POP
// if canWin then
52060: LD_VAR 0 2
52064: IFFALSE 52071
// enable ( mpWin ) else
52066: LD_INT 101
52068: ENABLE_MARKED
52069: GO 52072
// enable ;
52071: ENABLE
// end ; end ;
52072: PPOPN 2
52074: END
// function CanWinLoose ; begin
52075: LD_INT 0
52077: PPUSH
// result := true ;
52078: LD_ADDR_VAR 0 1
52082: PUSH
52083: LD_INT 1
52085: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
52086: CALL_OW 531
52090: PUSH
52091: CALL_OW 519
52095: PUSH
52096: LD_INT 1
52098: GREATER
52099: AND
52100: IFFALSE 52110
// result := false ;
52102: LD_ADDR_VAR 0 1
52106: PUSH
52107: LD_INT 0
52109: ST_TO_ADDR
// end ;
52110: LD_VAR 0 1
52114: RET
// function HasPower ( i ) ; begin
52115: LD_INT 0
52117: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
52118: LD_INT 22
52120: PUSH
52121: LD_VAR 0 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 30
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 30
52145: PUSH
52146: LD_INT 1
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: LIST
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PPUSH
52162: CALL_OW 69
52166: NOT
52167: IFFALSE 52171
// exit ;
52169: GO 52236
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
52171: LD_ADDR_VAR 0 2
52175: PUSH
52176: LD_INT 22
52178: PUSH
52179: LD_VAR 0 1
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: LD_INT 21
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 33
52203: PUSH
52204: LD_INT 3
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 33
52213: PUSH
52214: LD_INT 5
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PPUSH
52231: CALL_OW 69
52235: ST_TO_ADDR
// end ; end_of_file
52236: LD_VAR 0 2
52240: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
52241: LD_EXP 37
52245: IFFALSE 52584
52247: GO 52249
52249: DISABLE
52250: LD_INT 0
52252: PPUSH
52253: PPUSH
52254: PPUSH
// begin mpKingPoints := [ ] ;
52255: LD_ADDR_EXP 42
52259: PUSH
52260: EMPTY
52261: ST_TO_ADDR
// if mpTeamGame then
52262: LD_EXP 9
52266: IFFALSE 52320
// begin for i := 1 to Count ( mpTeams ) do
52268: LD_ADDR_VAR 0 1
52272: PUSH
52273: DOUBLE
52274: LD_INT 1
52276: DEC
52277: ST_TO_ADDR
52278: LD_EXP 8
52282: PPUSH
52283: CALL 4994 0 1
52287: PUSH
52288: FOR_TO
52289: IFFALSE 52316
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52291: LD_ADDR_EXP 42
52295: PUSH
52296: LD_EXP 42
52300: PPUSH
52301: LD_VAR 0 1
52305: PPUSH
52306: LD_INT 0
52308: PPUSH
52309: CALL_OW 1
52313: ST_TO_ADDR
52314: GO 52288
52316: POP
52317: POP
// end else
52318: GO 52363
// begin for i := 1 to 8 do
52320: LD_ADDR_VAR 0 1
52324: PUSH
52325: DOUBLE
52326: LD_INT 1
52328: DEC
52329: ST_TO_ADDR
52330: LD_INT 8
52332: PUSH
52333: FOR_TO
52334: IFFALSE 52361
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52336: LD_ADDR_EXP 42
52340: PUSH
52341: LD_EXP 42
52345: PPUSH
52346: LD_VAR 0 1
52350: PPUSH
52351: LD_INT 0
52353: PPUSH
52354: CALL_OW 1
52358: ST_TO_ADDR
52359: GO 52333
52361: POP
52362: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
52363: LD_ADDR_VAR 0 3
52367: PUSH
52368: LD_INT 17
52370: PPUSH
52371: LD_INT 0
52373: PPUSH
52374: CALL_OW 517
52378: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52379: LD_ADDR_VAR 0 1
52383: PUSH
52384: DOUBLE
52385: LD_INT 1
52387: DEC
52388: ST_TO_ADDR
52389: LD_VAR 0 3
52393: PUSH
52394: LD_INT 1
52396: ARRAY
52397: PUSH
52398: FOR_TO
52399: IFFALSE 52466
// for j := 1 to 8 do
52401: LD_ADDR_VAR 0 2
52405: PUSH
52406: DOUBLE
52407: LD_INT 1
52409: DEC
52410: ST_TO_ADDR
52411: LD_INT 8
52413: PUSH
52414: FOR_TO
52415: IFFALSE 52462
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
52417: LD_VAR 0 3
52421: PUSH
52422: LD_INT 1
52424: ARRAY
52425: PUSH
52426: LD_VAR 0 1
52430: ARRAY
52431: PPUSH
52432: LD_VAR 0 3
52436: PUSH
52437: LD_INT 2
52439: ARRAY
52440: PUSH
52441: LD_VAR 0 1
52445: ARRAY
52446: PPUSH
52447: LD_VAR 0 2
52451: PPUSH
52452: LD_INT 12
52454: NEG
52455: PPUSH
52456: CALL_OW 330
52460: GO 52414
52462: POP
52463: POP
52464: GO 52398
52466: POP
52467: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
52468: LD_EXP 32
52472: PPUSH
52473: LD_INT 1
52475: PPUSH
52476: CALL_OW 424
// UpdateCounter ;
52480: CALL 53086 0 0
// repeat wait ( 0 0$1 ) ;
52484: LD_INT 35
52486: PPUSH
52487: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52491: LD_ADDR_VAR 0 3
52495: PUSH
52496: LD_EXP 32
52500: PPUSH
52501: LD_INT 3
52503: PUSH
52504: LD_INT 57
52506: PUSH
52507: EMPTY
52508: LIST
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 50
52516: PUSH
52517: EMPTY
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: LD_INT 30
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 30
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: LIST
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: LIST
52552: PPUSH
52553: CALL_OW 70
52557: ST_TO_ADDR
// if not tmp then
52558: LD_VAR 0 3
52562: NOT
52563: IFFALSE 52567
// continue ;
52565: GO 52484
// AddPoints ( tmp ) ;
52567: LD_VAR 0 3
52571: PPUSH
52572: CALL 52764 0 1
// UpdateCounter ;
52576: CALL 53086 0 0
// until false ;
52580: LD_INT 0
52582: IFFALSE 52484
// end ;
52584: PPOPN 3
52586: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52587: LD_EXP 37
52591: PUSH
52592: LD_EXP 35
52596: AND
52597: IFFALSE 52761
52599: GO 52601
52601: DISABLE
52602: LD_INT 0
52604: PPUSH
52605: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52606: LD_ADDR_VAR 0 2
52610: PUSH
52611: LD_INT 17
52613: PPUSH
52614: LD_INT 0
52616: PPUSH
52617: CALL_OW 517
52621: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52622: LD_ADDR_VAR 0 1
52626: PUSH
52627: DOUBLE
52628: LD_INT 1
52630: DEC
52631: ST_TO_ADDR
52632: LD_VAR 0 2
52636: PUSH
52637: LD_INT 1
52639: ARRAY
52640: PUSH
52641: FOR_TO
52642: IFFALSE 52683
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52644: LD_VAR 0 2
52648: PUSH
52649: LD_INT 1
52651: ARRAY
52652: PUSH
52653: LD_VAR 0 1
52657: ARRAY
52658: PPUSH
52659: LD_VAR 0 2
52663: PUSH
52664: LD_INT 2
52666: ARRAY
52667: PUSH
52668: LD_VAR 0 1
52672: ARRAY
52673: PPUSH
52674: LD_INT 125
52676: PPUSH
52677: CALL_OW 495
52681: GO 52641
52683: POP
52684: POP
// repeat wait ( mpEmissions ) ;
52685: LD_EXP 35
52689: PPUSH
52690: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52694: LD_ADDR_VAR 0 1
52698: PUSH
52699: DOUBLE
52700: LD_INT 1
52702: DEC
52703: ST_TO_ADDR
52704: LD_VAR 0 2
52708: PUSH
52709: LD_INT 1
52711: ARRAY
52712: PUSH
52713: FOR_TO
52714: IFFALSE 52755
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52716: LD_VAR 0 2
52720: PUSH
52721: LD_INT 1
52723: ARRAY
52724: PUSH
52725: LD_VAR 0 1
52729: ARRAY
52730: PPUSH
52731: LD_VAR 0 2
52735: PUSH
52736: LD_INT 2
52738: ARRAY
52739: PUSH
52740: LD_VAR 0 1
52744: ARRAY
52745: PPUSH
52746: LD_INT 15
52748: PPUSH
52749: CALL_OW 495
52753: GO 52713
52755: POP
52756: POP
// until false ;
52757: LD_INT 0
52759: IFFALSE 52685
// end ;
52761: PPOPN 2
52763: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52764: LD_INT 0
52766: PPUSH
52767: PPUSH
52768: PPUSH
52769: PPUSH
52770: PPUSH
// if mpTeamGame then
52771: LD_EXP 9
52775: IFFALSE 52972
// begin first := depots [ 1 ] ;
52777: LD_ADDR_VAR 0 4
52781: PUSH
52782: LD_VAR 0 1
52786: PUSH
52787: LD_INT 1
52789: ARRAY
52790: ST_TO_ADDR
// side := GetSide ( first ) ;
52791: LD_ADDR_VAR 0 6
52795: PUSH
52796: LD_VAR 0 4
52800: PPUSH
52801: CALL_OW 255
52805: ST_TO_ADDR
// for i := 1 to mpTeams do
52806: LD_ADDR_VAR 0 3
52810: PUSH
52811: DOUBLE
52812: LD_INT 1
52814: DEC
52815: ST_TO_ADDR
52816: LD_EXP 8
52820: PUSH
52821: FOR_TO
52822: IFFALSE 52856
// if side in mpTeams [ i ] then
52824: LD_VAR 0 6
52828: PUSH
52829: LD_EXP 8
52833: PUSH
52834: LD_VAR 0 3
52838: ARRAY
52839: IN
52840: IFFALSE 52854
// begin team := i ;
52842: LD_ADDR_VAR 0 5
52846: PUSH
52847: LD_VAR 0 3
52851: ST_TO_ADDR
// break ;
52852: GO 52856
// end ;
52854: GO 52821
52856: POP
52857: POP
// if not team then
52858: LD_VAR 0 5
52862: NOT
52863: IFFALSE 52867
// exit ;
52865: GO 53081
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52867: LD_EXP 32
52871: PPUSH
52872: LD_INT 81
52874: PUSH
52875: LD_VAR 0 6
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PPUSH
52884: CALL_OW 70
52888: IFFALSE 52892
// exit ;
52890: GO 53081
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52892: LD_ADDR_EXP 42
52896: PUSH
52897: LD_EXP 42
52901: PPUSH
52902: LD_VAR 0 5
52906: PPUSH
52907: LD_EXP 42
52911: PUSH
52912: LD_VAR 0 5
52916: ARRAY
52917: PUSH
52918: LD_INT 1
52920: PLUS
52921: PPUSH
52922: CALL_OW 1
52926: ST_TO_ADDR
// for i in mpTeams [ team ] do
52927: LD_ADDR_VAR 0 3
52931: PUSH
52932: LD_EXP 8
52936: PUSH
52937: LD_VAR 0 5
52941: ARRAY
52942: PUSH
52943: FOR_IN
52944: IFFALSE 52968
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52946: LD_VAR 0 3
52950: PPUSH
52951: LD_EXP 42
52955: PUSH
52956: LD_VAR 0 5
52960: ARRAY
52961: PPUSH
52962: CALL_OW 506
52966: GO 52943
52968: POP
52969: POP
// end else
52970: GO 53081
// begin first := depots [ 1 ] ;
52972: LD_ADDR_VAR 0 4
52976: PUSH
52977: LD_VAR 0 1
52981: PUSH
52982: LD_INT 1
52984: ARRAY
52985: ST_TO_ADDR
// side := GetSide ( first ) ;
52986: LD_ADDR_VAR 0 6
52990: PUSH
52991: LD_VAR 0 4
52995: PPUSH
52996: CALL_OW 255
53000: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
53001: LD_EXP 32
53005: PPUSH
53006: LD_INT 81
53008: PUSH
53009: LD_VAR 0 6
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PPUSH
53018: CALL_OW 70
53022: IFFALSE 53026
// exit ;
53024: GO 53081
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
53026: LD_ADDR_EXP 42
53030: PUSH
53031: LD_EXP 42
53035: PPUSH
53036: LD_VAR 0 6
53040: PPUSH
53041: LD_EXP 42
53045: PUSH
53046: LD_VAR 0 6
53050: ARRAY
53051: PUSH
53052: LD_INT 1
53054: PLUS
53055: PPUSH
53056: CALL_OW 1
53060: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
53061: LD_VAR 0 6
53065: PPUSH
53066: LD_EXP 42
53070: PUSH
53071: LD_VAR 0 6
53075: ARRAY
53076: PPUSH
53077: CALL_OW 506
// end ; end ;
53081: LD_VAR 0 2
53085: RET
// function UpdateCounter ; var i ; begin
53086: LD_INT 0
53088: PPUSH
53089: PPUSH
// result := [ ] ;
53090: LD_ADDR_VAR 0 1
53094: PUSH
53095: EMPTY
53096: ST_TO_ADDR
// if mpTeamGame then
53097: LD_EXP 9
53101: IFFALSE 53168
// begin for i := 1 to mpTeams do
53103: LD_ADDR_VAR 0 2
53107: PUSH
53108: DOUBLE
53109: LD_INT 1
53111: DEC
53112: ST_TO_ADDR
53113: LD_EXP 8
53117: PUSH
53118: FOR_TO
53119: IFFALSE 53164
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
53121: LD_ADDR_VAR 0 1
53125: PUSH
53126: LD_VAR 0 1
53130: PUSH
53131: LD_STRING #KingoftheHill-Team
53133: PUSH
53134: LD_VAR 0 2
53138: PUSH
53139: LD_EXP 42
53143: PUSH
53144: LD_VAR 0 2
53148: ARRAY
53149: PUSH
53150: LD_EXP 33
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: ADD
53161: ST_TO_ADDR
53162: GO 53118
53164: POP
53165: POP
// end else
53166: GO 53241
// begin for i := 1 to 8 do
53168: LD_ADDR_VAR 0 2
53172: PUSH
53173: DOUBLE
53174: LD_INT 1
53176: DEC
53177: ST_TO_ADDR
53178: LD_INT 8
53180: PUSH
53181: FOR_TO
53182: IFFALSE 53239
// if mpSidePositions [ i ] then
53184: LD_EXP 5
53188: PUSH
53189: LD_VAR 0 2
53193: ARRAY
53194: IFFALSE 53237
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
53196: LD_ADDR_VAR 0 1
53200: PUSH
53201: LD_VAR 0 1
53205: PUSH
53206: LD_STRING #KingoftheHill-Player
53208: PUSH
53209: LD_VAR 0 2
53213: PUSH
53214: LD_EXP 42
53218: PUSH
53219: LD_VAR 0 2
53223: ARRAY
53224: PUSH
53225: LD_EXP 33
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: ADD
53236: ST_TO_ADDR
53237: GO 53181
53239: POP
53240: POP
// end ; mpDisplayStrings := result ;
53241: LD_ADDR_EXP 36
53245: PUSH
53246: LD_VAR 0 1
53250: ST_TO_ADDR
// end ;
53251: LD_VAR 0 1
53255: RET
// export function HowMuchPointsKing ( side ) ; begin
53256: LD_INT 0
53258: PPUSH
// result := HowMuchPoints ( side ) ;
53259: LD_ADDR_VAR 0 2
53263: PUSH
53264: LD_VAR 0 1
53268: PPUSH
53269: CALL 53279 0 1
53273: ST_TO_ADDR
// end ;
53274: LD_VAR 0 2
53278: RET
// function HowMuchPoints ( side ) ; var i ; begin
53279: LD_INT 0
53281: PPUSH
53282: PPUSH
// if mpTeamGame then
53283: LD_EXP 9
53287: IFFALSE 53356
// begin for i := 1 to Count ( mpTeams ) do
53289: LD_ADDR_VAR 0 3
53293: PUSH
53294: DOUBLE
53295: LD_INT 1
53297: DEC
53298: ST_TO_ADDR
53299: LD_EXP 8
53303: PPUSH
53304: CALL 4994 0 1
53308: PUSH
53309: FOR_TO
53310: IFFALSE 53352
// begin if side in mpTeams [ i ] then
53312: LD_VAR 0 1
53316: PUSH
53317: LD_EXP 8
53321: PUSH
53322: LD_VAR 0 3
53326: ARRAY
53327: IN
53328: IFFALSE 53350
// begin result := mpKingPoints [ i ] ;
53330: LD_ADDR_VAR 0 2
53334: PUSH
53335: LD_EXP 42
53339: PUSH
53340: LD_VAR 0 3
53344: ARRAY
53345: ST_TO_ADDR
// exit ;
53346: POP
53347: POP
53348: GO 53372
// end ; end ;
53350: GO 53309
53352: POP
53353: POP
// end else
53354: GO 53372
// result := mpKingPoints [ side ] ;
53356: LD_ADDR_VAR 0 2
53360: PUSH
53361: LD_EXP 42
53365: PUSH
53366: LD_VAR 0 1
53370: ARRAY
53371: ST_TO_ADDR
// end ;
53372: LD_VAR 0 2
53376: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
53377: LD_EXP 37
53381: PUSH
53382: CALL 53704 0 0
53386: AND
53387: PUSH
53388: LD_OWVAR 4
53392: AND
53393: IFFALSE 53629
53395: GO 53397
53397: DISABLE
53398: LD_INT 0
53400: PPUSH
53401: PPUSH
// begin canWin := false ;
53402: LD_ADDR_VAR 0 2
53406: PUSH
53407: LD_INT 0
53409: ST_TO_ADDR
// if not HasPower ( your_side ) then
53410: LD_OWVAR 2
53414: PPUSH
53415: CALL 53744 0 1
53419: NOT
53420: IFFALSE 53431
// begin Multiplayer_Loose_Message ;
53422: CALL_OW 521
// enable ( mpLose ) ;
53426: LD_INT 102
53428: ENABLE_MARKED
// end else
53429: GO 53629
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
53431: LD_ADDR_VAR 0 2
53435: PUSH
53436: LD_OWVAR 2
53440: PPUSH
53441: CALL 53279 0 1
53445: PUSH
53446: LD_EXP 33
53450: GREATEREQUAL
53451: PUSH
53452: LD_OWVAR 2
53456: PPUSH
53457: CALL 53744 0 1
53461: AND
53462: PUSH
53463: CALL 53632 0 0
53467: NOT
53468: OR
53469: ST_TO_ADDR
// for i := 1 to 8 do
53470: LD_ADDR_VAR 0 1
53474: PUSH
53475: DOUBLE
53476: LD_INT 1
53478: DEC
53479: ST_TO_ADDR
53480: LD_INT 8
53482: PUSH
53483: FOR_TO
53484: IFFALSE 53615
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53486: LD_EXP 5
53490: PUSH
53491: LD_VAR 0 1
53495: ARRAY
53496: PUSH
53497: LD_VAR 0 1
53501: PPUSH
53502: CALL_OW 108
53506: AND
53507: PUSH
53508: LD_VAR 0 1
53512: PUSH
53513: LD_OWVAR 2
53517: NONEQUAL
53518: AND
53519: IFFALSE 53613
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53521: LD_EXP 6
53525: PUSH
53526: LD_VAR 0 1
53530: ARRAY
53531: NOT
53532: PUSH
53533: LD_EXP 6
53537: PUSH
53538: LD_VAR 0 1
53542: ARRAY
53543: PUSH
53544: LD_EXP 6
53548: PUSH
53549: LD_OWVAR 2
53553: ARRAY
53554: NONEQUAL
53555: PUSH
53556: LD_OWVAR 2
53560: PPUSH
53561: LD_VAR 0 1
53565: PPUSH
53566: CALL_OW 81
53570: PUSH
53571: LD_INT 1
53573: NONEQUAL
53574: AND
53575: OR
53576: IFFALSE 53613
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53578: LD_VAR 0 1
53582: PPUSH
53583: CALL 53279 0 1
53587: PUSH
53588: LD_EXP 33
53592: GREATEREQUAL
53593: PUSH
53594: LD_VAR 0 1
53598: PPUSH
53599: CALL 53744 0 1
53603: AND
53604: IFFALSE 53613
// begin enable ( mpLose ) ;
53606: LD_INT 102
53608: ENABLE_MARKED
// exit ;
53609: POP
53610: POP
53611: GO 53629
// end ;
53613: GO 53483
53615: POP
53616: POP
// if canWin then
53617: LD_VAR 0 2
53621: IFFALSE 53628
// enable ( mpWin ) else
53623: LD_INT 101
53625: ENABLE_MARKED
53626: GO 53629
// enable ;
53628: ENABLE
// end ; end ;
53629: PPOPN 2
53631: END
// function EnemiesInGame ; var i ; begin
53632: LD_INT 0
53634: PPUSH
53635: PPUSH
// result := false ;
53636: LD_ADDR_VAR 0 1
53640: PUSH
53641: LD_INT 0
53643: ST_TO_ADDR
// for i := 1 to 8 do
53644: LD_ADDR_VAR 0 2
53648: PUSH
53649: DOUBLE
53650: LD_INT 1
53652: DEC
53653: ST_TO_ADDR
53654: LD_INT 8
53656: PUSH
53657: FOR_TO
53658: IFFALSE 53697
// if i <> your_side and HasPower ( i ) then
53660: LD_VAR 0 2
53664: PUSH
53665: LD_OWVAR 2
53669: NONEQUAL
53670: PUSH
53671: LD_VAR 0 2
53675: PPUSH
53676: CALL 53744 0 1
53680: AND
53681: IFFALSE 53695
// begin result := true ;
53683: LD_ADDR_VAR 0 1
53687: PUSH
53688: LD_INT 1
53690: ST_TO_ADDR
// exit ;
53691: POP
53692: POP
53693: GO 53699
// end ;
53695: GO 53657
53697: POP
53698: POP
// end ;
53699: LD_VAR 0 1
53703: RET
// function CanWinLoose ; begin
53704: LD_INT 0
53706: PPUSH
// result := true ;
53707: LD_ADDR_VAR 0 1
53711: PUSH
53712: LD_INT 1
53714: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53715: CALL_OW 531
53719: PUSH
53720: CALL_OW 519
53724: PUSH
53725: LD_INT 1
53727: GREATER
53728: AND
53729: IFFALSE 53739
// result := false ;
53731: LD_ADDR_VAR 0 1
53735: PUSH
53736: LD_INT 0
53738: ST_TO_ADDR
// end ;
53739: LD_VAR 0 1
53743: RET
// function HasPower ( i ) ; begin
53744: LD_INT 0
53746: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53747: LD_ADDR_VAR 0 2
53751: PUSH
53752: LD_INT 22
53754: PUSH
53755: LD_VAR 0 1
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: LD_INT 21
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 33
53779: PUSH
53780: LD_INT 3
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 33
53789: PUSH
53790: LD_INT 5
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PPUSH
53807: CALL_OW 69
53811: ST_TO_ADDR
// end ; end_of_file end_of_file
53812: LD_VAR 0 2
53816: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53817: LD_VAR 0 1
53821: PUSH
53822: LD_INT 200
53824: DOUBLE
53825: GREATEREQUAL
53826: IFFALSE 53834
53828: LD_INT 299
53830: DOUBLE
53831: LESSEQUAL
53832: IFTRUE 53836
53834: GO 53868
53836: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53837: LD_VAR 0 1
53841: PPUSH
53842: LD_VAR 0 2
53846: PPUSH
53847: LD_VAR 0 3
53851: PPUSH
53852: LD_VAR 0 4
53856: PPUSH
53857: LD_VAR 0 5
53861: PPUSH
53862: CALL 54615 0 5
53866: GO 53945
53868: LD_INT 300
53870: DOUBLE
53871: GREATEREQUAL
53872: IFFALSE 53880
53874: LD_INT 399
53876: DOUBLE
53877: LESSEQUAL
53878: IFTRUE 53882
53880: GO 53944
53882: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53883: LD_VAR 0 1
53887: PPUSH
53888: LD_VAR 0 2
53892: PPUSH
53893: LD_VAR 0 3
53897: PPUSH
53898: LD_VAR 0 4
53902: PPUSH
53903: LD_VAR 0 5
53907: PPUSH
53908: LD_VAR 0 6
53912: PPUSH
53913: LD_VAR 0 7
53917: PPUSH
53918: LD_VAR 0 8
53922: PPUSH
53923: LD_VAR 0 9
53927: PPUSH
53928: LD_VAR 0 10
53932: PPUSH
53933: LD_VAR 0 11
53937: PPUSH
53938: CALL 59410 0 11
53942: GO 53945
53944: POP
// end ;
53945: PPOPN 11
53947: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53948: LD_VAR 0 1
53952: PPUSH
53953: LD_VAR 0 2
53957: PPUSH
53958: LD_VAR 0 3
53962: PPUSH
53963: LD_VAR 0 4
53967: PPUSH
53968: LD_VAR 0 5
53972: PPUSH
53973: CALL 54030 0 5
// end ; end_of_file
53977: PPOPN 5
53979: END
// export function SOS_UnitDestroyed ( un ) ; begin
53980: LD_INT 0
53982: PPUSH
// ComRadiation ( un ) ;
53983: LD_VAR 0 1
53987: PPUSH
53988: CALL 55019 0 1
// end ;
53992: LD_VAR 0 2
53996: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53997: LD_INT 0
53999: PPUSH
// ComRadiation ( un ) ;
54000: LD_VAR 0 1
54004: PPUSH
54005: CALL 55019 0 1
// end ;
54009: LD_VAR 0 2
54013: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
54014: LD_INT 0
54016: PPUSH
// end ;
54017: LD_VAR 0 4
54021: RET
// export function SOS_Command ( cmd ) ; begin
54022: LD_INT 0
54024: PPUSH
// end ;
54025: LD_VAR 0 2
54029: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
54030: LD_INT 0
54032: PPUSH
// end ;
54033: LD_VAR 0 6
54037: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
54038: LD_INT 0
54040: PPUSH
54041: PPUSH
54042: PPUSH
54043: PPUSH
// if not vehicle or not factory then
54044: LD_VAR 0 1
54048: NOT
54049: PUSH
54050: LD_VAR 0 2
54054: NOT
54055: OR
54056: IFFALSE 54060
// exit ;
54058: GO 54610
// if not factoryWaypoints then
54060: LD_EXP 53
54064: NOT
54065: IFFALSE 54069
// exit ;
54067: GO 54610
// for i := 1 to Count ( factoryWaypoints ) do
54069: LD_ADDR_VAR 0 4
54073: PUSH
54074: DOUBLE
54075: LD_INT 1
54077: DEC
54078: ST_TO_ADDR
54079: LD_EXP 53
54083: PPUSH
54084: CALL 4994 0 1
54088: PUSH
54089: FOR_TO
54090: IFFALSE 54608
// if factoryWaypoints [ i ] [ 2 ] = factory then
54092: LD_EXP 53
54096: PUSH
54097: LD_VAR 0 4
54101: ARRAY
54102: PUSH
54103: LD_INT 2
54105: ARRAY
54106: PUSH
54107: LD_VAR 0 2
54111: EQUAL
54112: IFFALSE 54606
// begin if GetControl ( vehicle ) = control_manual then
54114: LD_VAR 0 1
54118: PPUSH
54119: CALL_OW 263
54123: PUSH
54124: LD_INT 1
54126: EQUAL
54127: IFFALSE 54489
// begin driver := IsDrivenBy ( vehicle ) ;
54129: LD_ADDR_VAR 0 5
54133: PUSH
54134: LD_VAR 0 1
54138: PPUSH
54139: CALL_OW 311
54143: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
54144: LD_VAR 0 5
54148: PUSH
54149: LD_EXP 54
54153: IN
54154: PUSH
54155: LD_VAR 0 1
54159: PUSH
54160: LD_EXP 54
54164: IN
54165: OR
54166: IFFALSE 54172
// exit ;
54168: POP
54169: POP
54170: GO 54610
// if not HasTask ( driver ) then
54172: LD_VAR 0 5
54176: PPUSH
54177: CALL_OW 314
54181: NOT
54182: IFFALSE 54487
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
54184: LD_ADDR_EXP 54
54188: PUSH
54189: LD_EXP 54
54193: PPUSH
54194: LD_VAR 0 5
54198: PPUSH
54199: CALL 40603 0 2
54203: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
54204: LD_ADDR_EXP 54
54208: PUSH
54209: LD_EXP 54
54213: PPUSH
54214: LD_VAR 0 1
54218: PPUSH
54219: CALL 40603 0 2
54223: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54224: LD_ADDR_VAR 0 6
54228: PUSH
54229: LD_EXP 53
54233: PUSH
54234: LD_VAR 0 4
54238: ARRAY
54239: PUSH
54240: LD_INT 3
54242: ARRAY
54243: PPUSH
54244: LD_EXP 53
54248: PUSH
54249: LD_VAR 0 4
54253: ARRAY
54254: PUSH
54255: LD_INT 4
54257: ARRAY
54258: PPUSH
54259: CALL_OW 428
54263: ST_TO_ADDR
// if hex then
54264: LD_VAR 0 6
54268: IFFALSE 54286
// ComMoveUnit ( driver , hex ) else
54270: LD_VAR 0 5
54274: PPUSH
54275: LD_VAR 0 6
54279: PPUSH
54280: CALL_OW 112
54284: GO 54370
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54286: LD_VAR 0 1
54290: PPUSH
54291: LD_EXP 53
54295: PUSH
54296: LD_VAR 0 4
54300: ARRAY
54301: PUSH
54302: LD_INT 3
54304: ARRAY
54305: PPUSH
54306: LD_EXP 53
54310: PUSH
54311: LD_VAR 0 4
54315: ARRAY
54316: PUSH
54317: LD_INT 4
54319: ARRAY
54320: PPUSH
54321: CALL_OW 297
54325: PUSH
54326: LD_INT 0
54328: GREATER
54329: IFFALSE 54370
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54331: LD_VAR 0 5
54335: PPUSH
54336: LD_EXP 53
54340: PUSH
54341: LD_VAR 0 4
54345: ARRAY
54346: PUSH
54347: LD_INT 3
54349: ARRAY
54350: PPUSH
54351: LD_EXP 53
54355: PUSH
54356: LD_VAR 0 4
54360: ARRAY
54361: PUSH
54362: LD_INT 4
54364: ARRAY
54365: PPUSH
54366: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54370: LD_VAR 0 5
54374: PPUSH
54375: CALL_OW 181
// if Multiplayer then
54379: LD_OWVAR 4
54383: IFFALSE 54432
// begin repeat wait ( 10 ) ;
54385: LD_INT 10
54387: PPUSH
54388: CALL_OW 67
// until not IsInUnit ( driver ) ;
54392: LD_VAR 0 5
54396: PPUSH
54397: CALL_OW 310
54401: NOT
54402: IFFALSE 54385
// if not HasTask ( driver ) then
54404: LD_VAR 0 5
54408: PPUSH
54409: CALL_OW 314
54413: NOT
54414: IFFALSE 54430
// ComEnterUnit ( driver , factory ) ;
54416: LD_VAR 0 5
54420: PPUSH
54421: LD_VAR 0 2
54425: PPUSH
54426: CALL_OW 120
// end else
54430: GO 54446
// AddComEnterUnit ( driver , factory ) ;
54432: LD_VAR 0 5
54436: PPUSH
54437: LD_VAR 0 2
54441: PPUSH
54442: CALL_OW 180
// wait ( 0 0$1 ) ;
54446: LD_INT 35
54448: PPUSH
54449: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54453: LD_ADDR_EXP 54
54457: PUSH
54458: LD_EXP 54
54462: PUSH
54463: LD_VAR 0 5
54467: DIFF
54468: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54469: LD_ADDR_EXP 54
54473: PUSH
54474: LD_EXP 54
54478: PUSH
54479: LD_VAR 0 1
54483: DIFF
54484: ST_TO_ADDR
// break ;
54485: GO 54608
// end ; end else
54487: GO 54606
// if GetControl ( vehicle ) = control_remote then
54489: LD_VAR 0 1
54493: PPUSH
54494: CALL_OW 263
54498: PUSH
54499: LD_INT 2
54501: EQUAL
54502: IFFALSE 54565
// begin wait ( 0 0$2 ) ;
54504: LD_INT 70
54506: PPUSH
54507: CALL_OW 67
// if Connect ( vehicle ) then
54511: LD_VAR 0 1
54515: PPUSH
54516: CALL 11200 0 1
54520: IFFALSE 54561
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54522: LD_VAR 0 1
54526: PPUSH
54527: LD_EXP 53
54531: PUSH
54532: LD_VAR 0 4
54536: ARRAY
54537: PUSH
54538: LD_INT 3
54540: ARRAY
54541: PPUSH
54542: LD_EXP 53
54546: PUSH
54547: LD_VAR 0 4
54551: ARRAY
54552: PUSH
54553: LD_INT 4
54555: ARRAY
54556: PPUSH
54557: CALL_OW 111
// break ;
54561: GO 54608
// end else
54563: GO 54606
// begin ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54565: LD_VAR 0 1
54569: PPUSH
54570: LD_EXP 53
54574: PUSH
54575: LD_VAR 0 4
54579: ARRAY
54580: PUSH
54581: LD_INT 3
54583: ARRAY
54584: PPUSH
54585: LD_EXP 53
54589: PUSH
54590: LD_VAR 0 4
54594: ARRAY
54595: PUSH
54596: LD_INT 4
54598: ARRAY
54599: PPUSH
54600: CALL_OW 111
// break ;
54604: GO 54608
// end ; end ;
54606: GO 54089
54608: POP
54609: POP
// end ;
54610: LD_VAR 0 3
54614: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54615: LD_INT 0
54617: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54618: LD_VAR 0 1
54622: PUSH
54623: LD_INT 250
54625: EQUAL
54626: PUSH
54627: LD_VAR 0 2
54631: PPUSH
54632: CALL_OW 264
54636: PUSH
54637: LD_INT 81
54639: EQUAL
54640: AND
54641: IFFALSE 54662
// MinerPlaceMine ( unit , x , y ) ;
54643: LD_VAR 0 2
54647: PPUSH
54648: LD_VAR 0 4
54652: PPUSH
54653: LD_VAR 0 5
54657: PPUSH
54658: CALL 57754 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54662: LD_VAR 0 1
54666: PUSH
54667: LD_INT 251
54669: EQUAL
54670: PUSH
54671: LD_VAR 0 2
54675: PPUSH
54676: CALL_OW 264
54680: PUSH
54681: LD_INT 81
54683: EQUAL
54684: AND
54685: IFFALSE 54706
// MinerDetonateMine ( unit , x , y ) ;
54687: LD_VAR 0 2
54691: PPUSH
54692: LD_VAR 0 4
54696: PPUSH
54697: LD_VAR 0 5
54701: PPUSH
54702: CALL 58029 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54706: LD_VAR 0 1
54710: PUSH
54711: LD_INT 252
54713: EQUAL
54714: PUSH
54715: LD_VAR 0 2
54719: PPUSH
54720: CALL_OW 264
54724: PUSH
54725: LD_INT 81
54727: EQUAL
54728: AND
54729: IFFALSE 54750
// MinerCreateMinefield ( unit , x , y ) ;
54731: LD_VAR 0 2
54735: PPUSH
54736: LD_VAR 0 4
54740: PPUSH
54741: LD_VAR 0 5
54745: PPUSH
54746: CALL 58446 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54750: LD_VAR 0 1
54754: PUSH
54755: LD_INT 253
54757: EQUAL
54758: PUSH
54759: LD_VAR 0 2
54763: PPUSH
54764: CALL_OW 257
54768: PUSH
54769: LD_INT 5
54771: EQUAL
54772: AND
54773: IFFALSE 54794
// ComBinocular ( unit , x , y ) ;
54775: LD_VAR 0 2
54779: PPUSH
54780: LD_VAR 0 4
54784: PPUSH
54785: LD_VAR 0 5
54789: PPUSH
54790: CALL 58815 0 3
// if selectedUnit then
54794: LD_VAR 0 3
54798: IFFALSE 54854
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54800: LD_VAR 0 1
54804: PUSH
54805: LD_INT 254
54807: EQUAL
54808: PUSH
54809: LD_VAR 0 2
54813: PPUSH
54814: CALL_OW 264
54818: PUSH
54819: LD_INT 99
54821: EQUAL
54822: AND
54823: PUSH
54824: LD_VAR 0 3
54828: PPUSH
54829: CALL_OW 263
54833: PUSH
54834: LD_INT 3
54836: EQUAL
54837: AND
54838: IFFALSE 54854
// HackDestroyVehicle ( unit , selectedUnit ) ;
54840: LD_VAR 0 2
54844: PPUSH
54845: LD_VAR 0 3
54849: PPUSH
54850: CALL 57118 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54854: LD_VAR 0 1
54858: PUSH
54859: LD_INT 255
54861: EQUAL
54862: PUSH
54863: LD_VAR 0 2
54867: PPUSH
54868: CALL_OW 264
54872: PUSH
54873: LD_INT 14
54875: PUSH
54876: LD_INT 53
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: IN
54883: AND
54884: PUSH
54885: LD_VAR 0 4
54889: PPUSH
54890: LD_VAR 0 5
54894: PPUSH
54895: CALL_OW 488
54899: AND
54900: IFFALSE 54924
// CutTreeXYR ( unit , x , y , 12 ) ;
54902: LD_VAR 0 2
54906: PPUSH
54907: LD_VAR 0 4
54911: PPUSH
54912: LD_VAR 0 5
54916: PPUSH
54917: LD_INT 12
54919: PPUSH
54920: CALL 55115 0 4
// if cmd = 256 then
54924: LD_VAR 0 1
54928: PUSH
54929: LD_INT 256
54931: EQUAL
54932: IFFALSE 54953
// SetFactoryWaypoint ( unit , x , y ) ;
54934: LD_VAR 0 2
54938: PPUSH
54939: LD_VAR 0 4
54943: PPUSH
54944: LD_VAR 0 5
54948: PPUSH
54949: CALL 59418 0 3
// if cmd = 257 then
54953: LD_VAR 0 1
54957: PUSH
54958: LD_INT 257
54960: EQUAL
54961: IFFALSE 54982
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54963: LD_VAR 0 2
54967: PPUSH
54968: LD_VAR 0 4
54972: PPUSH
54973: LD_VAR 0 5
54977: PPUSH
54978: CALL 59908 0 3
// if cmd = 258 then
54982: LD_VAR 0 1
54986: PUSH
54987: LD_INT 258
54989: EQUAL
54990: IFFALSE 55014
// BurnTreeXYR ( unit , x , y , 8 ) ;
54992: LD_VAR 0 2
54996: PPUSH
54997: LD_VAR 0 4
55001: PPUSH
55002: LD_VAR 0 5
55006: PPUSH
55007: LD_INT 8
55009: PPUSH
55010: CALL 55509 0 4
// end ;
55014: LD_VAR 0 6
55018: RET
// export function ComRadiation ( un ) ; var eff ; begin
55019: LD_INT 0
55021: PPUSH
55022: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
55023: LD_VAR 0 1
55027: PPUSH
55028: CALL_OW 264
55032: PUSH
55033: LD_INT 91
55035: NONEQUAL
55036: IFFALSE 55040
// exit ;
55038: GO 55110
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55040: LD_INT 68
55042: PPUSH
55043: LD_VAR 0 1
55047: PPUSH
55048: CALL_OW 255
55052: PPUSH
55053: CALL_OW 321
55057: PUSH
55058: LD_INT 2
55060: EQUAL
55061: IFFALSE 55073
// eff := 50 else
55063: LD_ADDR_VAR 0 3
55067: PUSH
55068: LD_INT 50
55070: ST_TO_ADDR
55071: GO 55081
// eff := 25 ;
55073: LD_ADDR_VAR 0 3
55077: PUSH
55078: LD_INT 25
55080: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55081: LD_VAR 0 1
55085: PPUSH
55086: CALL_OW 250
55090: PPUSH
55091: LD_VAR 0 1
55095: PPUSH
55096: CALL_OW 251
55100: PPUSH
55101: LD_VAR 0 3
55105: PPUSH
55106: CALL_OW 495
// end ;
55110: LD_VAR 0 2
55114: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55115: LD_INT 0
55117: PPUSH
55118: PPUSH
55119: PPUSH
55120: PPUSH
55121: PPUSH
55122: PPUSH
55123: PPUSH
55124: PPUSH
55125: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
55126: LD_VAR 0 1
55130: PPUSH
55131: CALL_OW 302
55135: NOT
55136: PUSH
55137: LD_VAR 0 2
55141: PPUSH
55142: LD_VAR 0 3
55146: PPUSH
55147: CALL_OW 488
55151: NOT
55152: OR
55153: PUSH
55154: LD_VAR 0 4
55158: NOT
55159: OR
55160: IFFALSE 55164
// exit ;
55162: GO 55504
// list := [ ] ;
55164: LD_ADDR_VAR 0 13
55168: PUSH
55169: EMPTY
55170: ST_TO_ADDR
// if x - r < 0 then
55171: LD_VAR 0 2
55175: PUSH
55176: LD_VAR 0 4
55180: MINUS
55181: PUSH
55182: LD_INT 0
55184: LESS
55185: IFFALSE 55197
// min_x := 0 else
55187: LD_ADDR_VAR 0 7
55191: PUSH
55192: LD_INT 0
55194: ST_TO_ADDR
55195: GO 55213
// min_x := x - r ;
55197: LD_ADDR_VAR 0 7
55201: PUSH
55202: LD_VAR 0 2
55206: PUSH
55207: LD_VAR 0 4
55211: MINUS
55212: ST_TO_ADDR
// if y - r < 0 then
55213: LD_VAR 0 3
55217: PUSH
55218: LD_VAR 0 4
55222: MINUS
55223: PUSH
55224: LD_INT 0
55226: LESS
55227: IFFALSE 55239
// min_y := 0 else
55229: LD_ADDR_VAR 0 8
55233: PUSH
55234: LD_INT 0
55236: ST_TO_ADDR
55237: GO 55255
// min_y := y - r ;
55239: LD_ADDR_VAR 0 8
55243: PUSH
55244: LD_VAR 0 3
55248: PUSH
55249: LD_VAR 0 4
55253: MINUS
55254: ST_TO_ADDR
// max_x := x + r ;
55255: LD_ADDR_VAR 0 9
55259: PUSH
55260: LD_VAR 0 2
55264: PUSH
55265: LD_VAR 0 4
55269: PLUS
55270: ST_TO_ADDR
// max_y := y + r ;
55271: LD_ADDR_VAR 0 10
55275: PUSH
55276: LD_VAR 0 3
55280: PUSH
55281: LD_VAR 0 4
55285: PLUS
55286: ST_TO_ADDR
// for _x = min_x to max_x do
55287: LD_ADDR_VAR 0 11
55291: PUSH
55292: DOUBLE
55293: LD_VAR 0 7
55297: DEC
55298: ST_TO_ADDR
55299: LD_VAR 0 9
55303: PUSH
55304: FOR_TO
55305: IFFALSE 55422
// for _y = min_y to max_y do
55307: LD_ADDR_VAR 0 12
55311: PUSH
55312: DOUBLE
55313: LD_VAR 0 8
55317: DEC
55318: ST_TO_ADDR
55319: LD_VAR 0 10
55323: PUSH
55324: FOR_TO
55325: IFFALSE 55418
// begin if not ValidHex ( _x , _y ) then
55327: LD_VAR 0 11
55331: PPUSH
55332: LD_VAR 0 12
55336: PPUSH
55337: CALL_OW 488
55341: NOT
55342: IFFALSE 55346
// continue ;
55344: GO 55324
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55346: LD_VAR 0 11
55350: PPUSH
55351: LD_VAR 0 12
55355: PPUSH
55356: CALL_OW 351
55360: PUSH
55361: LD_VAR 0 11
55365: PPUSH
55366: LD_VAR 0 12
55370: PPUSH
55371: CALL_OW 554
55375: AND
55376: IFFALSE 55416
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55378: LD_ADDR_VAR 0 13
55382: PUSH
55383: LD_VAR 0 13
55387: PPUSH
55388: LD_VAR 0 13
55392: PUSH
55393: LD_INT 1
55395: PLUS
55396: PPUSH
55397: LD_VAR 0 11
55401: PUSH
55402: LD_VAR 0 12
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PPUSH
55411: CALL_OW 2
55415: ST_TO_ADDR
// end ;
55416: GO 55324
55418: POP
55419: POP
55420: GO 55304
55422: POP
55423: POP
// if not list then
55424: LD_VAR 0 13
55428: NOT
55429: IFFALSE 55433
// exit ;
55431: GO 55504
// for i in list do
55433: LD_ADDR_VAR 0 6
55437: PUSH
55438: LD_VAR 0 13
55442: PUSH
55443: FOR_IN
55444: IFFALSE 55502
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55446: LD_VAR 0 1
55450: PPUSH
55451: LD_STRING M
55453: PUSH
55454: LD_VAR 0 6
55458: PUSH
55459: LD_INT 1
55461: ARRAY
55462: PUSH
55463: LD_VAR 0 6
55467: PUSH
55468: LD_INT 2
55470: ARRAY
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: PUSH
55493: EMPTY
55494: LIST
55495: PPUSH
55496: CALL_OW 447
55500: GO 55443
55502: POP
55503: POP
// end ;
55504: LD_VAR 0 5
55508: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55509: LD_INT 0
55511: PPUSH
55512: PPUSH
55513: PPUSH
55514: PPUSH
55515: PPUSH
55516: PPUSH
55517: PPUSH
55518: PPUSH
55519: PPUSH
55520: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55521: LD_VAR 0 1
55525: PPUSH
55526: CALL_OW 302
55530: NOT
55531: PUSH
55532: LD_VAR 0 2
55536: PPUSH
55537: LD_VAR 0 3
55541: PPUSH
55542: CALL_OW 488
55546: NOT
55547: OR
55548: PUSH
55549: LD_VAR 0 4
55553: NOT
55554: OR
55555: IFFALSE 55559
// exit ;
55557: GO 56072
// list := [ ] ;
55559: LD_ADDR_VAR 0 13
55563: PUSH
55564: EMPTY
55565: ST_TO_ADDR
// if x - r < 0 then
55566: LD_VAR 0 2
55570: PUSH
55571: LD_VAR 0 4
55575: MINUS
55576: PUSH
55577: LD_INT 0
55579: LESS
55580: IFFALSE 55592
// min_x := 0 else
55582: LD_ADDR_VAR 0 7
55586: PUSH
55587: LD_INT 0
55589: ST_TO_ADDR
55590: GO 55608
// min_x := x - r ;
55592: LD_ADDR_VAR 0 7
55596: PUSH
55597: LD_VAR 0 2
55601: PUSH
55602: LD_VAR 0 4
55606: MINUS
55607: ST_TO_ADDR
// if y - r < 0 then
55608: LD_VAR 0 3
55612: PUSH
55613: LD_VAR 0 4
55617: MINUS
55618: PUSH
55619: LD_INT 0
55621: LESS
55622: IFFALSE 55634
// min_y := 0 else
55624: LD_ADDR_VAR 0 8
55628: PUSH
55629: LD_INT 0
55631: ST_TO_ADDR
55632: GO 55650
// min_y := y - r ;
55634: LD_ADDR_VAR 0 8
55638: PUSH
55639: LD_VAR 0 3
55643: PUSH
55644: LD_VAR 0 4
55648: MINUS
55649: ST_TO_ADDR
// max_x := x + r ;
55650: LD_ADDR_VAR 0 9
55654: PUSH
55655: LD_VAR 0 2
55659: PUSH
55660: LD_VAR 0 4
55664: PLUS
55665: ST_TO_ADDR
// max_y := y + r ;
55666: LD_ADDR_VAR 0 10
55670: PUSH
55671: LD_VAR 0 3
55675: PUSH
55676: LD_VAR 0 4
55680: PLUS
55681: ST_TO_ADDR
// for _x = min_x to max_x do
55682: LD_ADDR_VAR 0 11
55686: PUSH
55687: DOUBLE
55688: LD_VAR 0 7
55692: DEC
55693: ST_TO_ADDR
55694: LD_VAR 0 9
55698: PUSH
55699: FOR_TO
55700: IFFALSE 55817
// for _y = min_y to max_y do
55702: LD_ADDR_VAR 0 12
55706: PUSH
55707: DOUBLE
55708: LD_VAR 0 8
55712: DEC
55713: ST_TO_ADDR
55714: LD_VAR 0 10
55718: PUSH
55719: FOR_TO
55720: IFFALSE 55813
// begin if not ValidHex ( _x , _y ) then
55722: LD_VAR 0 11
55726: PPUSH
55727: LD_VAR 0 12
55731: PPUSH
55732: CALL_OW 488
55736: NOT
55737: IFFALSE 55741
// continue ;
55739: GO 55719
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55741: LD_VAR 0 11
55745: PPUSH
55746: LD_VAR 0 12
55750: PPUSH
55751: CALL_OW 351
55755: PUSH
55756: LD_VAR 0 11
55760: PPUSH
55761: LD_VAR 0 12
55765: PPUSH
55766: CALL_OW 554
55770: AND
55771: IFFALSE 55811
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55773: LD_ADDR_VAR 0 13
55777: PUSH
55778: LD_VAR 0 13
55782: PPUSH
55783: LD_VAR 0 13
55787: PUSH
55788: LD_INT 1
55790: PLUS
55791: PPUSH
55792: LD_VAR 0 11
55796: PUSH
55797: LD_VAR 0 12
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PPUSH
55806: CALL_OW 2
55810: ST_TO_ADDR
// end ;
55811: GO 55719
55813: POP
55814: POP
55815: GO 55699
55817: POP
55818: POP
// if not list then
55819: LD_VAR 0 13
55823: NOT
55824: IFFALSE 55828
// exit ;
55826: GO 56072
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55828: LD_ADDR_VAR 0 13
55832: PUSH
55833: LD_VAR 0 1
55837: PPUSH
55838: LD_VAR 0 13
55842: PPUSH
55843: LD_INT 1
55845: PPUSH
55846: LD_INT 1
55848: PPUSH
55849: CALL 8342 0 4
55853: ST_TO_ADDR
// ComStop ( flame ) ;
55854: LD_VAR 0 1
55858: PPUSH
55859: CALL_OW 141
// for i in list do
55863: LD_ADDR_VAR 0 6
55867: PUSH
55868: LD_VAR 0 13
55872: PUSH
55873: FOR_IN
55874: IFFALSE 55905
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55876: LD_VAR 0 1
55880: PPUSH
55881: LD_VAR 0 6
55885: PUSH
55886: LD_INT 1
55888: ARRAY
55889: PPUSH
55890: LD_VAR 0 6
55894: PUSH
55895: LD_INT 2
55897: ARRAY
55898: PPUSH
55899: CALL_OW 176
55903: GO 55873
55905: POP
55906: POP
// repeat wait ( 0 0$1 ) ;
55907: LD_INT 35
55909: PPUSH
55910: CALL_OW 67
// task := GetTaskList ( flame ) ;
55914: LD_ADDR_VAR 0 14
55918: PUSH
55919: LD_VAR 0 1
55923: PPUSH
55924: CALL_OW 437
55928: ST_TO_ADDR
// if not task then
55929: LD_VAR 0 14
55933: NOT
55934: IFFALSE 55938
// exit ;
55936: GO 56072
// if task [ 1 ] [ 1 ] <> | then
55938: LD_VAR 0 14
55942: PUSH
55943: LD_INT 1
55945: ARRAY
55946: PUSH
55947: LD_INT 1
55949: ARRAY
55950: PUSH
55951: LD_STRING |
55953: NONEQUAL
55954: IFFALSE 55958
// exit ;
55956: GO 56072
// _x := task [ 1 ] [ 2 ] ;
55958: LD_ADDR_VAR 0 11
55962: PUSH
55963: LD_VAR 0 14
55967: PUSH
55968: LD_INT 1
55970: ARRAY
55971: PUSH
55972: LD_INT 2
55974: ARRAY
55975: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55976: LD_ADDR_VAR 0 12
55980: PUSH
55981: LD_VAR 0 14
55985: PUSH
55986: LD_INT 1
55988: ARRAY
55989: PUSH
55990: LD_INT 3
55992: ARRAY
55993: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55994: LD_VAR 0 11
55998: PPUSH
55999: LD_VAR 0 12
56003: PPUSH
56004: CALL_OW 351
56008: NOT
56009: PUSH
56010: LD_VAR 0 11
56014: PPUSH
56015: LD_VAR 0 12
56019: PPUSH
56020: CALL_OW 554
56024: NOT
56025: OR
56026: IFFALSE 56060
// begin task := Delete ( task , 1 ) ;
56028: LD_ADDR_VAR 0 14
56032: PUSH
56033: LD_VAR 0 14
56037: PPUSH
56038: LD_INT 1
56040: PPUSH
56041: CALL_OW 3
56045: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
56046: LD_VAR 0 1
56050: PPUSH
56051: LD_VAR 0 14
56055: PPUSH
56056: CALL_OW 446
// end ; until not HasTask ( flame ) ;
56060: LD_VAR 0 1
56064: PPUSH
56065: CALL_OW 314
56069: NOT
56070: IFFALSE 55907
// end ;
56072: LD_VAR 0 5
56076: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56077: LD_EXP 43
56081: NOT
56082: IFFALSE 56132
56084: GO 56086
56086: DISABLE
// begin initHack := true ;
56087: LD_ADDR_EXP 43
56091: PUSH
56092: LD_INT 1
56094: ST_TO_ADDR
// hackTanks := [ ] ;
56095: LD_ADDR_EXP 44
56099: PUSH
56100: EMPTY
56101: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56102: LD_ADDR_EXP 45
56106: PUSH
56107: EMPTY
56108: ST_TO_ADDR
// hackLimit := 3 ;
56109: LD_ADDR_EXP 46
56113: PUSH
56114: LD_INT 3
56116: ST_TO_ADDR
// hackDist := 12 ;
56117: LD_ADDR_EXP 47
56121: PUSH
56122: LD_INT 12
56124: ST_TO_ADDR
// hackCounter := [ ] ;
56125: LD_ADDR_EXP 48
56129: PUSH
56130: EMPTY
56131: ST_TO_ADDR
// end ;
56132: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56133: LD_EXP 43
56137: PUSH
56138: LD_INT 34
56140: PUSH
56141: LD_INT 99
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PPUSH
56148: CALL_OW 69
56152: AND
56153: IFFALSE 56406
56155: GO 56157
56157: DISABLE
56158: LD_INT 0
56160: PPUSH
56161: PPUSH
// begin enable ;
56162: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56163: LD_ADDR_VAR 0 1
56167: PUSH
56168: LD_INT 34
56170: PUSH
56171: LD_INT 99
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PPUSH
56178: CALL_OW 69
56182: PUSH
56183: FOR_IN
56184: IFFALSE 56404
// begin if not i in hackTanks then
56186: LD_VAR 0 1
56190: PUSH
56191: LD_EXP 44
56195: IN
56196: NOT
56197: IFFALSE 56280
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56199: LD_ADDR_EXP 44
56203: PUSH
56204: LD_EXP 44
56208: PPUSH
56209: LD_EXP 44
56213: PUSH
56214: LD_INT 1
56216: PLUS
56217: PPUSH
56218: LD_VAR 0 1
56222: PPUSH
56223: CALL_OW 1
56227: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56228: LD_ADDR_EXP 45
56232: PUSH
56233: LD_EXP 45
56237: PPUSH
56238: LD_EXP 45
56242: PUSH
56243: LD_INT 1
56245: PLUS
56246: PPUSH
56247: EMPTY
56248: PPUSH
56249: CALL_OW 1
56253: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56254: LD_ADDR_EXP 48
56258: PUSH
56259: LD_EXP 48
56263: PPUSH
56264: LD_EXP 48
56268: PUSH
56269: LD_INT 1
56271: PLUS
56272: PPUSH
56273: EMPTY
56274: PPUSH
56275: CALL_OW 1
56279: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56280: LD_VAR 0 1
56284: PPUSH
56285: CALL_OW 302
56289: NOT
56290: IFFALSE 56303
// begin HackUnlinkAll ( i ) ;
56292: LD_VAR 0 1
56296: PPUSH
56297: CALL 56409 0 1
// continue ;
56301: GO 56183
// end ; HackCheckCapturedStatus ( i ) ;
56303: LD_VAR 0 1
56307: PPUSH
56308: CALL 56852 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56312: LD_ADDR_VAR 0 2
56316: PUSH
56317: LD_INT 81
56319: PUSH
56320: LD_VAR 0 1
56324: PPUSH
56325: CALL_OW 255
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 33
56336: PUSH
56337: LD_INT 3
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 91
56346: PUSH
56347: LD_VAR 0 1
56351: PUSH
56352: LD_EXP 47
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 50
56364: PUSH
56365: EMPTY
56366: LIST
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: PPUSH
56374: CALL_OW 69
56378: ST_TO_ADDR
// if not tmp then
56379: LD_VAR 0 2
56383: NOT
56384: IFFALSE 56388
// continue ;
56386: GO 56183
// HackLink ( i , tmp ) ;
56388: LD_VAR 0 1
56392: PPUSH
56393: LD_VAR 0 2
56397: PPUSH
56398: CALL 56545 0 2
// end ;
56402: GO 56183
56404: POP
56405: POP
// end ;
56406: PPOPN 2
56408: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56409: LD_INT 0
56411: PPUSH
56412: PPUSH
56413: PPUSH
// if not hack in hackTanks then
56414: LD_VAR 0 1
56418: PUSH
56419: LD_EXP 44
56423: IN
56424: NOT
56425: IFFALSE 56429
// exit ;
56427: GO 56540
// index := GetElementIndex ( hackTanks , hack ) ;
56429: LD_ADDR_VAR 0 4
56433: PUSH
56434: LD_EXP 44
56438: PPUSH
56439: LD_VAR 0 1
56443: PPUSH
56444: CALL 7639 0 2
56448: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56449: LD_EXP 45
56453: PUSH
56454: LD_VAR 0 4
56458: ARRAY
56459: IFFALSE 56540
// begin for i in hackTanksCaptured [ index ] do
56461: LD_ADDR_VAR 0 3
56465: PUSH
56466: LD_EXP 45
56470: PUSH
56471: LD_VAR 0 4
56475: ARRAY
56476: PUSH
56477: FOR_IN
56478: IFFALSE 56504
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56480: LD_VAR 0 3
56484: PUSH
56485: LD_INT 1
56487: ARRAY
56488: PPUSH
56489: LD_VAR 0 3
56493: PUSH
56494: LD_INT 2
56496: ARRAY
56497: PPUSH
56498: CALL_OW 235
56502: GO 56477
56504: POP
56505: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56506: LD_ADDR_EXP 45
56510: PUSH
56511: LD_EXP 45
56515: PPUSH
56516: LD_VAR 0 4
56520: PPUSH
56521: EMPTY
56522: PPUSH
56523: CALL_OW 1
56527: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56528: LD_VAR 0 1
56532: PPUSH
56533: LD_INT 0
56535: PPUSH
56536: CALL_OW 505
// end ; end ;
56540: LD_VAR 0 2
56544: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56545: LD_INT 0
56547: PPUSH
56548: PPUSH
56549: PPUSH
// if not hack in hackTanks or not vehicles then
56550: LD_VAR 0 1
56554: PUSH
56555: LD_EXP 44
56559: IN
56560: NOT
56561: PUSH
56562: LD_VAR 0 2
56566: NOT
56567: OR
56568: IFFALSE 56572
// exit ;
56570: GO 56847
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56572: LD_ADDR_VAR 0 2
56576: PUSH
56577: LD_VAR 0 1
56581: PPUSH
56582: LD_VAR 0 2
56586: PPUSH
56587: LD_INT 1
56589: PPUSH
56590: LD_INT 1
56592: PPUSH
56593: CALL 8289 0 4
56597: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56598: LD_ADDR_VAR 0 5
56602: PUSH
56603: LD_EXP 44
56607: PPUSH
56608: LD_VAR 0 1
56612: PPUSH
56613: CALL 7639 0 2
56617: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56618: LD_EXP 45
56622: PUSH
56623: LD_VAR 0 5
56627: ARRAY
56628: PUSH
56629: LD_EXP 46
56633: LESS
56634: IFFALSE 56823
// begin for i := 1 to vehicles do
56636: LD_ADDR_VAR 0 4
56640: PUSH
56641: DOUBLE
56642: LD_INT 1
56644: DEC
56645: ST_TO_ADDR
56646: LD_VAR 0 2
56650: PUSH
56651: FOR_TO
56652: IFFALSE 56821
// begin if hackTanksCaptured [ index ] = hackLimit then
56654: LD_EXP 45
56658: PUSH
56659: LD_VAR 0 5
56663: ARRAY
56664: PUSH
56665: LD_EXP 46
56669: EQUAL
56670: IFFALSE 56674
// break ;
56672: GO 56821
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56674: LD_ADDR_EXP 48
56678: PUSH
56679: LD_EXP 48
56683: PPUSH
56684: LD_VAR 0 5
56688: PPUSH
56689: LD_EXP 48
56693: PUSH
56694: LD_VAR 0 5
56698: ARRAY
56699: PUSH
56700: LD_INT 1
56702: PLUS
56703: PPUSH
56704: CALL_OW 1
56708: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56709: LD_ADDR_EXP 45
56713: PUSH
56714: LD_EXP 45
56718: PPUSH
56719: LD_VAR 0 5
56723: PUSH
56724: LD_EXP 45
56728: PUSH
56729: LD_VAR 0 5
56733: ARRAY
56734: PUSH
56735: LD_INT 1
56737: PLUS
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PPUSH
56743: LD_VAR 0 2
56747: PUSH
56748: LD_VAR 0 4
56752: ARRAY
56753: PUSH
56754: LD_VAR 0 2
56758: PUSH
56759: LD_VAR 0 4
56763: ARRAY
56764: PPUSH
56765: CALL_OW 255
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PPUSH
56774: CALL 7854 0 3
56778: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56779: LD_VAR 0 2
56783: PUSH
56784: LD_VAR 0 4
56788: ARRAY
56789: PPUSH
56790: LD_VAR 0 1
56794: PPUSH
56795: CALL_OW 255
56799: PPUSH
56800: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56804: LD_VAR 0 2
56808: PUSH
56809: LD_VAR 0 4
56813: ARRAY
56814: PPUSH
56815: CALL_OW 141
// end ;
56819: GO 56651
56821: POP
56822: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56823: LD_VAR 0 1
56827: PPUSH
56828: LD_EXP 45
56832: PUSH
56833: LD_VAR 0 5
56837: ARRAY
56838: PUSH
56839: LD_INT 0
56841: PLUS
56842: PPUSH
56843: CALL_OW 505
// end ;
56847: LD_VAR 0 3
56851: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56852: LD_INT 0
56854: PPUSH
56855: PPUSH
56856: PPUSH
56857: PPUSH
// if not hack in hackTanks then
56858: LD_VAR 0 1
56862: PUSH
56863: LD_EXP 44
56867: IN
56868: NOT
56869: IFFALSE 56873
// exit ;
56871: GO 57113
// index := GetElementIndex ( hackTanks , hack ) ;
56873: LD_ADDR_VAR 0 4
56877: PUSH
56878: LD_EXP 44
56882: PPUSH
56883: LD_VAR 0 1
56887: PPUSH
56888: CALL 7639 0 2
56892: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56893: LD_ADDR_VAR 0 3
56897: PUSH
56898: DOUBLE
56899: LD_EXP 45
56903: PUSH
56904: LD_VAR 0 4
56908: ARRAY
56909: INC
56910: ST_TO_ADDR
56911: LD_INT 1
56913: PUSH
56914: FOR_DOWNTO
56915: IFFALSE 57087
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56917: LD_ADDR_VAR 0 5
56921: PUSH
56922: LD_EXP 45
56926: PUSH
56927: LD_VAR 0 4
56931: ARRAY
56932: PUSH
56933: LD_VAR 0 3
56937: ARRAY
56938: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56939: LD_VAR 0 5
56943: PUSH
56944: LD_INT 1
56946: ARRAY
56947: PPUSH
56948: CALL_OW 302
56952: NOT
56953: PUSH
56954: LD_VAR 0 5
56958: PUSH
56959: LD_INT 1
56961: ARRAY
56962: PPUSH
56963: CALL_OW 255
56967: PUSH
56968: LD_VAR 0 1
56972: PPUSH
56973: CALL_OW 255
56977: NONEQUAL
56978: OR
56979: IFFALSE 57085
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56981: LD_VAR 0 5
56985: PUSH
56986: LD_INT 1
56988: ARRAY
56989: PPUSH
56990: CALL_OW 305
56994: PUSH
56995: LD_VAR 0 5
56999: PUSH
57000: LD_INT 1
57002: ARRAY
57003: PPUSH
57004: CALL_OW 255
57008: PUSH
57009: LD_VAR 0 1
57013: PPUSH
57014: CALL_OW 255
57018: EQUAL
57019: AND
57020: IFFALSE 57044
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
57022: LD_VAR 0 5
57026: PUSH
57027: LD_INT 1
57029: ARRAY
57030: PPUSH
57031: LD_VAR 0 5
57035: PUSH
57036: LD_INT 2
57038: ARRAY
57039: PPUSH
57040: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
57044: LD_ADDR_EXP 45
57048: PUSH
57049: LD_EXP 45
57053: PPUSH
57054: LD_VAR 0 4
57058: PPUSH
57059: LD_EXP 45
57063: PUSH
57064: LD_VAR 0 4
57068: ARRAY
57069: PPUSH
57070: LD_VAR 0 3
57074: PPUSH
57075: CALL_OW 3
57079: PPUSH
57080: CALL_OW 1
57084: ST_TO_ADDR
// end ; end ;
57085: GO 56914
57087: POP
57088: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57089: LD_VAR 0 1
57093: PPUSH
57094: LD_EXP 45
57098: PUSH
57099: LD_VAR 0 4
57103: ARRAY
57104: PUSH
57105: LD_INT 0
57107: PLUS
57108: PPUSH
57109: CALL_OW 505
// end ;
57113: LD_VAR 0 2
57117: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57118: LD_INT 0
57120: PPUSH
57121: PPUSH
57122: PPUSH
57123: PPUSH
// if not hack in hackTanks then
57124: LD_VAR 0 1
57128: PUSH
57129: LD_EXP 44
57133: IN
57134: NOT
57135: IFFALSE 57139
// exit ;
57137: GO 57224
// index := GetElementIndex ( hackTanks , hack ) ;
57139: LD_ADDR_VAR 0 5
57143: PUSH
57144: LD_EXP 44
57148: PPUSH
57149: LD_VAR 0 1
57153: PPUSH
57154: CALL 7639 0 2
57158: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57159: LD_ADDR_VAR 0 4
57163: PUSH
57164: DOUBLE
57165: LD_INT 1
57167: DEC
57168: ST_TO_ADDR
57169: LD_EXP 45
57173: PUSH
57174: LD_VAR 0 5
57178: ARRAY
57179: PUSH
57180: FOR_TO
57181: IFFALSE 57222
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57183: LD_EXP 45
57187: PUSH
57188: LD_VAR 0 5
57192: ARRAY
57193: PUSH
57194: LD_VAR 0 4
57198: ARRAY
57199: PUSH
57200: LD_INT 1
57202: ARRAY
57203: PUSH
57204: LD_VAR 0 2
57208: EQUAL
57209: IFFALSE 57220
// KillUnit ( vehicle ) ;
57211: LD_VAR 0 2
57215: PPUSH
57216: CALL_OW 66
57220: GO 57180
57222: POP
57223: POP
// end ;
57224: LD_VAR 0 3
57228: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57229: LD_EXP 49
57233: NOT
57234: IFFALSE 57269
57236: GO 57238
57238: DISABLE
// begin initMiner := true ;
57239: LD_ADDR_EXP 49
57243: PUSH
57244: LD_INT 1
57246: ST_TO_ADDR
// minersList := [ ] ;
57247: LD_ADDR_EXP 50
57251: PUSH
57252: EMPTY
57253: ST_TO_ADDR
// minerMinesList := [ ] ;
57254: LD_ADDR_EXP 51
57258: PUSH
57259: EMPTY
57260: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57261: LD_ADDR_EXP 52
57265: PUSH
57266: LD_INT 5
57268: ST_TO_ADDR
// end ;
57269: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57270: LD_EXP 49
57274: PUSH
57275: LD_INT 34
57277: PUSH
57278: LD_INT 81
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PPUSH
57285: CALL_OW 69
57289: AND
57290: IFFALSE 57751
57292: GO 57294
57294: DISABLE
57295: LD_INT 0
57297: PPUSH
57298: PPUSH
57299: PPUSH
57300: PPUSH
// begin enable ;
57301: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57302: LD_ADDR_VAR 0 1
57306: PUSH
57307: LD_INT 34
57309: PUSH
57310: LD_INT 81
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PPUSH
57317: CALL_OW 69
57321: PUSH
57322: FOR_IN
57323: IFFALSE 57395
// begin if not i in minersList then
57325: LD_VAR 0 1
57329: PUSH
57330: LD_EXP 50
57334: IN
57335: NOT
57336: IFFALSE 57393
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57338: LD_ADDR_EXP 50
57342: PUSH
57343: LD_EXP 50
57347: PPUSH
57348: LD_EXP 50
57352: PUSH
57353: LD_INT 1
57355: PLUS
57356: PPUSH
57357: LD_VAR 0 1
57361: PPUSH
57362: CALL_OW 1
57366: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57367: LD_ADDR_EXP 51
57371: PUSH
57372: LD_EXP 51
57376: PPUSH
57377: LD_EXP 51
57381: PUSH
57382: LD_INT 1
57384: PLUS
57385: PPUSH
57386: EMPTY
57387: PPUSH
57388: CALL_OW 1
57392: ST_TO_ADDR
// end end ;
57393: GO 57322
57395: POP
57396: POP
// for i := minerMinesList downto 1 do
57397: LD_ADDR_VAR 0 1
57401: PUSH
57402: DOUBLE
57403: LD_EXP 51
57407: INC
57408: ST_TO_ADDR
57409: LD_INT 1
57411: PUSH
57412: FOR_DOWNTO
57413: IFFALSE 57749
// begin if IsLive ( minersList [ i ] ) then
57415: LD_EXP 50
57419: PUSH
57420: LD_VAR 0 1
57424: ARRAY
57425: PPUSH
57426: CALL_OW 300
57430: IFFALSE 57458
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57432: LD_EXP 50
57436: PUSH
57437: LD_VAR 0 1
57441: ARRAY
57442: PPUSH
57443: LD_EXP 51
57447: PUSH
57448: LD_VAR 0 1
57452: ARRAY
57453: PPUSH
57454: CALL_OW 505
// if not minerMinesList [ i ] then
57458: LD_EXP 51
57462: PUSH
57463: LD_VAR 0 1
57467: ARRAY
57468: NOT
57469: IFFALSE 57473
// continue ;
57471: GO 57412
// for j := minerMinesList [ i ] downto 1 do
57473: LD_ADDR_VAR 0 2
57477: PUSH
57478: DOUBLE
57479: LD_EXP 51
57483: PUSH
57484: LD_VAR 0 1
57488: ARRAY
57489: INC
57490: ST_TO_ADDR
57491: LD_INT 1
57493: PUSH
57494: FOR_DOWNTO
57495: IFFALSE 57745
// begin side := GetSide ( minersList [ i ] ) ;
57497: LD_ADDR_VAR 0 3
57501: PUSH
57502: LD_EXP 50
57506: PUSH
57507: LD_VAR 0 1
57511: ARRAY
57512: PPUSH
57513: CALL_OW 255
57517: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57518: LD_ADDR_VAR 0 4
57522: PUSH
57523: LD_EXP 51
57527: PUSH
57528: LD_VAR 0 1
57532: ARRAY
57533: PUSH
57534: LD_VAR 0 2
57538: ARRAY
57539: PUSH
57540: LD_INT 1
57542: ARRAY
57543: PPUSH
57544: LD_EXP 51
57548: PUSH
57549: LD_VAR 0 1
57553: ARRAY
57554: PUSH
57555: LD_VAR 0 2
57559: ARRAY
57560: PUSH
57561: LD_INT 2
57563: ARRAY
57564: PPUSH
57565: CALL_OW 428
57569: ST_TO_ADDR
// if not tmp then
57570: LD_VAR 0 4
57574: NOT
57575: IFFALSE 57579
// continue ;
57577: GO 57494
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57579: LD_VAR 0 4
57583: PUSH
57584: LD_INT 81
57586: PUSH
57587: LD_VAR 0 3
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PPUSH
57596: CALL_OW 69
57600: IN
57601: PUSH
57602: LD_EXP 51
57606: PUSH
57607: LD_VAR 0 1
57611: ARRAY
57612: PUSH
57613: LD_VAR 0 2
57617: ARRAY
57618: PUSH
57619: LD_INT 1
57621: ARRAY
57622: PPUSH
57623: LD_EXP 51
57627: PUSH
57628: LD_VAR 0 1
57632: ARRAY
57633: PUSH
57634: LD_VAR 0 2
57638: ARRAY
57639: PUSH
57640: LD_INT 2
57642: ARRAY
57643: PPUSH
57644: CALL_OW 458
57648: AND
57649: IFFALSE 57743
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57651: LD_EXP 51
57655: PUSH
57656: LD_VAR 0 1
57660: ARRAY
57661: PUSH
57662: LD_VAR 0 2
57666: ARRAY
57667: PUSH
57668: LD_INT 1
57670: ARRAY
57671: PPUSH
57672: LD_EXP 51
57676: PUSH
57677: LD_VAR 0 1
57681: ARRAY
57682: PUSH
57683: LD_VAR 0 2
57687: ARRAY
57688: PUSH
57689: LD_INT 2
57691: ARRAY
57692: PPUSH
57693: LD_VAR 0 3
57697: PPUSH
57698: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57702: LD_ADDR_EXP 51
57706: PUSH
57707: LD_EXP 51
57711: PPUSH
57712: LD_VAR 0 1
57716: PPUSH
57717: LD_EXP 51
57721: PUSH
57722: LD_VAR 0 1
57726: ARRAY
57727: PPUSH
57728: LD_VAR 0 2
57732: PPUSH
57733: CALL_OW 3
57737: PPUSH
57738: CALL_OW 1
57742: ST_TO_ADDR
// end ; end ;
57743: GO 57494
57745: POP
57746: POP
// end ;
57747: GO 57412
57749: POP
57750: POP
// end ;
57751: PPOPN 4
57753: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57754: LD_INT 0
57756: PPUSH
57757: PPUSH
// result := false ;
57758: LD_ADDR_VAR 0 4
57762: PUSH
57763: LD_INT 0
57765: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57766: LD_VAR 0 1
57770: PPUSH
57771: CALL_OW 264
57775: PUSH
57776: LD_INT 81
57778: EQUAL
57779: NOT
57780: IFFALSE 57784
// exit ;
57782: GO 58024
// index := GetElementIndex ( minersList , unit ) ;
57784: LD_ADDR_VAR 0 5
57788: PUSH
57789: LD_EXP 50
57793: PPUSH
57794: LD_VAR 0 1
57798: PPUSH
57799: CALL 7639 0 2
57803: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57804: LD_EXP 51
57808: PUSH
57809: LD_VAR 0 5
57813: ARRAY
57814: PUSH
57815: LD_EXP 52
57819: GREATEREQUAL
57820: IFFALSE 57824
// exit ;
57822: GO 58024
// ComMoveXY ( unit , x , y ) ;
57824: LD_VAR 0 1
57828: PPUSH
57829: LD_VAR 0 2
57833: PPUSH
57834: LD_VAR 0 3
57838: PPUSH
57839: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57843: LD_INT 35
57845: PPUSH
57846: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57850: LD_VAR 0 1
57854: PPUSH
57855: LD_VAR 0 2
57859: PPUSH
57860: LD_VAR 0 3
57864: PPUSH
57865: CALL 39400 0 3
57869: NOT
57870: PUSH
57871: LD_VAR 0 1
57875: PPUSH
57876: CALL_OW 314
57880: AND
57881: IFFALSE 57885
// exit ;
57883: GO 58024
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57885: LD_VAR 0 2
57889: PPUSH
57890: LD_VAR 0 3
57894: PPUSH
57895: CALL_OW 428
57899: PUSH
57900: LD_VAR 0 1
57904: EQUAL
57905: PUSH
57906: LD_VAR 0 1
57910: PPUSH
57911: CALL_OW 314
57915: NOT
57916: AND
57917: IFFALSE 57843
// PlaySoundXY ( x , y , PlantMine ) ;
57919: LD_VAR 0 2
57923: PPUSH
57924: LD_VAR 0 3
57928: PPUSH
57929: LD_STRING PlantMine
57931: PPUSH
57932: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57936: LD_VAR 0 2
57940: PPUSH
57941: LD_VAR 0 3
57945: PPUSH
57946: LD_VAR 0 1
57950: PPUSH
57951: CALL_OW 255
57955: PPUSH
57956: LD_INT 0
57958: PPUSH
57959: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57963: LD_ADDR_EXP 51
57967: PUSH
57968: LD_EXP 51
57972: PPUSH
57973: LD_VAR 0 5
57977: PUSH
57978: LD_EXP 51
57982: PUSH
57983: LD_VAR 0 5
57987: ARRAY
57988: PUSH
57989: LD_INT 1
57991: PLUS
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PPUSH
57997: LD_VAR 0 2
58001: PUSH
58002: LD_VAR 0 3
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PPUSH
58011: CALL 7854 0 3
58015: ST_TO_ADDR
// result := true ;
58016: LD_ADDR_VAR 0 4
58020: PUSH
58021: LD_INT 1
58023: ST_TO_ADDR
// end ;
58024: LD_VAR 0 4
58028: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
58029: LD_INT 0
58031: PPUSH
58032: PPUSH
58033: PPUSH
// if not unit in minersList then
58034: LD_VAR 0 1
58038: PUSH
58039: LD_EXP 50
58043: IN
58044: NOT
58045: IFFALSE 58049
// exit ;
58047: GO 58441
// index := GetElementIndex ( minersList , unit ) ;
58049: LD_ADDR_VAR 0 6
58053: PUSH
58054: LD_EXP 50
58058: PPUSH
58059: LD_VAR 0 1
58063: PPUSH
58064: CALL 7639 0 2
58068: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
58069: LD_ADDR_VAR 0 5
58073: PUSH
58074: DOUBLE
58075: LD_EXP 51
58079: PUSH
58080: LD_VAR 0 6
58084: ARRAY
58085: INC
58086: ST_TO_ADDR
58087: LD_INT 1
58089: PUSH
58090: FOR_DOWNTO
58091: IFFALSE 58252
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
58093: LD_EXP 51
58097: PUSH
58098: LD_VAR 0 6
58102: ARRAY
58103: PUSH
58104: LD_VAR 0 5
58108: ARRAY
58109: PUSH
58110: LD_INT 1
58112: ARRAY
58113: PUSH
58114: LD_VAR 0 2
58118: EQUAL
58119: PUSH
58120: LD_EXP 51
58124: PUSH
58125: LD_VAR 0 6
58129: ARRAY
58130: PUSH
58131: LD_VAR 0 5
58135: ARRAY
58136: PUSH
58137: LD_INT 2
58139: ARRAY
58140: PUSH
58141: LD_VAR 0 3
58145: EQUAL
58146: AND
58147: IFFALSE 58250
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58149: LD_EXP 51
58153: PUSH
58154: LD_VAR 0 6
58158: ARRAY
58159: PUSH
58160: LD_VAR 0 5
58164: ARRAY
58165: PUSH
58166: LD_INT 1
58168: ARRAY
58169: PPUSH
58170: LD_EXP 51
58174: PUSH
58175: LD_VAR 0 6
58179: ARRAY
58180: PUSH
58181: LD_VAR 0 5
58185: ARRAY
58186: PUSH
58187: LD_INT 2
58189: ARRAY
58190: PPUSH
58191: LD_VAR 0 1
58195: PPUSH
58196: CALL_OW 255
58200: PPUSH
58201: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58205: LD_ADDR_EXP 51
58209: PUSH
58210: LD_EXP 51
58214: PPUSH
58215: LD_VAR 0 6
58219: PPUSH
58220: LD_EXP 51
58224: PUSH
58225: LD_VAR 0 6
58229: ARRAY
58230: PPUSH
58231: LD_VAR 0 5
58235: PPUSH
58236: CALL_OW 3
58240: PPUSH
58241: CALL_OW 1
58245: ST_TO_ADDR
// exit ;
58246: POP
58247: POP
58248: GO 58441
// end ; end ;
58250: GO 58090
58252: POP
58253: POP
// for i := minerMinesList [ index ] downto 1 do
58254: LD_ADDR_VAR 0 5
58258: PUSH
58259: DOUBLE
58260: LD_EXP 51
58264: PUSH
58265: LD_VAR 0 6
58269: ARRAY
58270: INC
58271: ST_TO_ADDR
58272: LD_INT 1
58274: PUSH
58275: FOR_DOWNTO
58276: IFFALSE 58439
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58278: LD_EXP 51
58282: PUSH
58283: LD_VAR 0 6
58287: ARRAY
58288: PUSH
58289: LD_VAR 0 5
58293: ARRAY
58294: PUSH
58295: LD_INT 1
58297: ARRAY
58298: PPUSH
58299: LD_EXP 51
58303: PUSH
58304: LD_VAR 0 6
58308: ARRAY
58309: PUSH
58310: LD_VAR 0 5
58314: ARRAY
58315: PUSH
58316: LD_INT 2
58318: ARRAY
58319: PPUSH
58320: LD_VAR 0 2
58324: PPUSH
58325: LD_VAR 0 3
58329: PPUSH
58330: CALL_OW 298
58334: PUSH
58335: LD_INT 6
58337: LESS
58338: IFFALSE 58437
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58340: LD_EXP 51
58344: PUSH
58345: LD_VAR 0 6
58349: ARRAY
58350: PUSH
58351: LD_VAR 0 5
58355: ARRAY
58356: PUSH
58357: LD_INT 1
58359: ARRAY
58360: PPUSH
58361: LD_EXP 51
58365: PUSH
58366: LD_VAR 0 6
58370: ARRAY
58371: PUSH
58372: LD_VAR 0 5
58376: ARRAY
58377: PUSH
58378: LD_INT 2
58380: ARRAY
58381: PPUSH
58382: LD_VAR 0 1
58386: PPUSH
58387: CALL_OW 255
58391: PPUSH
58392: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58396: LD_ADDR_EXP 51
58400: PUSH
58401: LD_EXP 51
58405: PPUSH
58406: LD_VAR 0 6
58410: PPUSH
58411: LD_EXP 51
58415: PUSH
58416: LD_VAR 0 6
58420: ARRAY
58421: PPUSH
58422: LD_VAR 0 5
58426: PPUSH
58427: CALL_OW 3
58431: PPUSH
58432: CALL_OW 1
58436: ST_TO_ADDR
// end ; end ;
58437: GO 58275
58439: POP
58440: POP
// end ;
58441: LD_VAR 0 4
58445: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58446: LD_INT 0
58448: PPUSH
58449: PPUSH
58450: PPUSH
58451: PPUSH
58452: PPUSH
58453: PPUSH
58454: PPUSH
58455: PPUSH
58456: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58457: LD_VAR 0 1
58461: PPUSH
58462: CALL_OW 264
58466: PUSH
58467: LD_INT 81
58469: EQUAL
58470: NOT
58471: PUSH
58472: LD_VAR 0 1
58476: PUSH
58477: LD_EXP 50
58481: IN
58482: NOT
58483: OR
58484: IFFALSE 58488
// exit ;
58486: GO 58810
// index := GetElementIndex ( minersList , unit ) ;
58488: LD_ADDR_VAR 0 6
58492: PUSH
58493: LD_EXP 50
58497: PPUSH
58498: LD_VAR 0 1
58502: PPUSH
58503: CALL 7639 0 2
58507: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58508: LD_ADDR_VAR 0 8
58512: PUSH
58513: LD_EXP 52
58517: PUSH
58518: LD_EXP 51
58522: PUSH
58523: LD_VAR 0 6
58527: ARRAY
58528: MINUS
58529: ST_TO_ADDR
// if not minesFreeAmount then
58530: LD_VAR 0 8
58534: NOT
58535: IFFALSE 58539
// exit ;
58537: GO 58810
// tmp := [ ] ;
58539: LD_ADDR_VAR 0 7
58543: PUSH
58544: EMPTY
58545: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58546: LD_ADDR_VAR 0 5
58550: PUSH
58551: DOUBLE
58552: LD_INT 1
58554: DEC
58555: ST_TO_ADDR
58556: LD_VAR 0 8
58560: PUSH
58561: FOR_TO
58562: IFFALSE 58757
// begin _d := rand ( 0 , 5 ) ;
58564: LD_ADDR_VAR 0 11
58568: PUSH
58569: LD_INT 0
58571: PPUSH
58572: LD_INT 5
58574: PPUSH
58575: CALL_OW 12
58579: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58580: LD_ADDR_VAR 0 12
58584: PUSH
58585: LD_INT 2
58587: PPUSH
58588: LD_INT 6
58590: PPUSH
58591: CALL_OW 12
58595: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58596: LD_ADDR_VAR 0 9
58600: PUSH
58601: LD_VAR 0 2
58605: PPUSH
58606: LD_VAR 0 11
58610: PPUSH
58611: LD_VAR 0 12
58615: PPUSH
58616: CALL_OW 272
58620: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58621: LD_ADDR_VAR 0 10
58625: PUSH
58626: LD_VAR 0 3
58630: PPUSH
58631: LD_VAR 0 11
58635: PPUSH
58636: LD_VAR 0 12
58640: PPUSH
58641: CALL_OW 273
58645: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58646: LD_VAR 0 9
58650: PPUSH
58651: LD_VAR 0 10
58655: PPUSH
58656: CALL_OW 488
58660: PUSH
58661: LD_VAR 0 9
58665: PUSH
58666: LD_VAR 0 10
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_VAR 0 7
58679: IN
58680: NOT
58681: AND
58682: PUSH
58683: LD_VAR 0 9
58687: PPUSH
58688: LD_VAR 0 10
58692: PPUSH
58693: CALL_OW 458
58697: NOT
58698: AND
58699: IFFALSE 58741
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58701: LD_ADDR_VAR 0 7
58705: PUSH
58706: LD_VAR 0 7
58710: PPUSH
58711: LD_VAR 0 7
58715: PUSH
58716: LD_INT 1
58718: PLUS
58719: PPUSH
58720: LD_VAR 0 9
58724: PUSH
58725: LD_VAR 0 10
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PPUSH
58734: CALL_OW 1
58738: ST_TO_ADDR
58739: GO 58755
// i := i - 1 ;
58741: LD_ADDR_VAR 0 5
58745: PUSH
58746: LD_VAR 0 5
58750: PUSH
58751: LD_INT 1
58753: MINUS
58754: ST_TO_ADDR
// end ;
58755: GO 58561
58757: POP
58758: POP
// for i in tmp do
58759: LD_ADDR_VAR 0 5
58763: PUSH
58764: LD_VAR 0 7
58768: PUSH
58769: FOR_IN
58770: IFFALSE 58808
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58772: LD_VAR 0 1
58776: PPUSH
58777: LD_VAR 0 5
58781: PUSH
58782: LD_INT 1
58784: ARRAY
58785: PPUSH
58786: LD_VAR 0 5
58790: PUSH
58791: LD_INT 2
58793: ARRAY
58794: PPUSH
58795: CALL 57754 0 3
58799: NOT
58800: IFFALSE 58806
// exit ;
58802: POP
58803: POP
58804: GO 58810
58806: GO 58769
58808: POP
58809: POP
// end ;
58810: LD_VAR 0 4
58814: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58815: LD_INT 0
58817: PPUSH
58818: PPUSH
58819: PPUSH
58820: PPUSH
58821: PPUSH
58822: PPUSH
58823: PPUSH
58824: PPUSH
58825: PPUSH
// if GetClass ( unit ) <> class_sniper then
58826: LD_VAR 0 1
58830: PPUSH
58831: CALL_OW 257
58835: PUSH
58836: LD_INT 5
58838: NONEQUAL
58839: IFFALSE 58843
// exit ;
58841: GO 59309
// dist := 8 ;
58843: LD_ADDR_VAR 0 5
58847: PUSH
58848: LD_INT 8
58850: ST_TO_ADDR
// viewRange := 12 ;
58851: LD_ADDR_VAR 0 8
58855: PUSH
58856: LD_INT 12
58858: ST_TO_ADDR
// side := GetSide ( unit ) ;
58859: LD_ADDR_VAR 0 6
58863: PUSH
58864: LD_VAR 0 1
58868: PPUSH
58869: CALL_OW 255
58873: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58874: LD_INT 61
58876: PPUSH
58877: LD_VAR 0 6
58881: PPUSH
58882: CALL_OW 321
58886: PUSH
58887: LD_INT 2
58889: EQUAL
58890: IFFALSE 58900
// viewRange := 16 ;
58892: LD_ADDR_VAR 0 8
58896: PUSH
58897: LD_INT 16
58899: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58900: LD_VAR 0 1
58904: PPUSH
58905: LD_VAR 0 2
58909: PPUSH
58910: LD_VAR 0 3
58914: PPUSH
58915: CALL_OW 297
58919: PUSH
58920: LD_VAR 0 5
58924: GREATER
58925: IFFALSE 59004
// begin ComMoveXY ( unit , x , y ) ;
58927: LD_VAR 0 1
58931: PPUSH
58932: LD_VAR 0 2
58936: PPUSH
58937: LD_VAR 0 3
58941: PPUSH
58942: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58946: LD_INT 35
58948: PPUSH
58949: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58953: LD_VAR 0 1
58957: PPUSH
58958: LD_VAR 0 2
58962: PPUSH
58963: LD_VAR 0 3
58967: PPUSH
58968: CALL 39400 0 3
58972: NOT
58973: IFFALSE 58977
// exit ;
58975: GO 59309
// until GetDistUnitXY ( unit , x , y ) < dist ;
58977: LD_VAR 0 1
58981: PPUSH
58982: LD_VAR 0 2
58986: PPUSH
58987: LD_VAR 0 3
58991: PPUSH
58992: CALL_OW 297
58996: PUSH
58997: LD_VAR 0 5
59001: LESS
59002: IFFALSE 58946
// end ; ComTurnXY ( unit , x , y ) ;
59004: LD_VAR 0 1
59008: PPUSH
59009: LD_VAR 0 2
59013: PPUSH
59014: LD_VAR 0 3
59018: PPUSH
59019: CALL_OW 118
// repeat if Multiplayer then
59023: LD_OWVAR 4
59027: IFFALSE 59038
// wait ( 35 ) else
59029: LD_INT 35
59031: PPUSH
59032: CALL_OW 67
59036: GO 59045
// wait ( 5 ) ;
59038: LD_INT 5
59040: PPUSH
59041: CALL_OW 67
// _d := GetDir ( unit ) ;
59045: LD_ADDR_VAR 0 11
59049: PUSH
59050: LD_VAR 0 1
59054: PPUSH
59055: CALL_OW 254
59059: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
59060: LD_ADDR_VAR 0 7
59064: PUSH
59065: LD_VAR 0 1
59069: PPUSH
59070: CALL_OW 250
59074: PPUSH
59075: LD_VAR 0 1
59079: PPUSH
59080: CALL_OW 251
59084: PPUSH
59085: LD_VAR 0 2
59089: PPUSH
59090: LD_VAR 0 3
59094: PPUSH
59095: CALL 42008 0 4
59099: ST_TO_ADDR
// until dir = _d ;
59100: LD_VAR 0 7
59104: PUSH
59105: LD_VAR 0 11
59109: EQUAL
59110: IFFALSE 59023
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
59112: LD_ADDR_VAR 0 9
59116: PUSH
59117: LD_VAR 0 1
59121: PPUSH
59122: CALL_OW 250
59126: PPUSH
59127: LD_VAR 0 7
59131: PPUSH
59132: LD_VAR 0 5
59136: PPUSH
59137: CALL_OW 272
59141: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
59142: LD_ADDR_VAR 0 10
59146: PUSH
59147: LD_VAR 0 1
59151: PPUSH
59152: CALL_OW 251
59156: PPUSH
59157: LD_VAR 0 7
59161: PPUSH
59162: LD_VAR 0 5
59166: PPUSH
59167: CALL_OW 273
59171: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59172: LD_VAR 0 9
59176: PPUSH
59177: LD_VAR 0 10
59181: PPUSH
59182: CALL_OW 488
59186: NOT
59187: IFFALSE 59191
// exit ;
59189: GO 59309
// ComAnimCustom ( unit , 1 ) ;
59191: LD_VAR 0 1
59195: PPUSH
59196: LD_INT 1
59198: PPUSH
59199: CALL_OW 592
// p := 0 ;
59203: LD_ADDR_VAR 0 12
59207: PUSH
59208: LD_INT 0
59210: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59211: LD_VAR 0 9
59215: PPUSH
59216: LD_VAR 0 10
59220: PPUSH
59221: LD_VAR 0 6
59225: PPUSH
59226: LD_VAR 0 8
59230: PPUSH
59231: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59235: LD_INT 35
59237: PPUSH
59238: CALL_OW 67
// p := Inc ( p ) ;
59242: LD_ADDR_VAR 0 12
59246: PUSH
59247: LD_VAR 0 12
59251: PPUSH
59252: CALL 41964 0 1
59256: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59257: LD_VAR 0 12
59261: PUSH
59262: LD_INT 3
59264: EQUAL
59265: PUSH
59266: LD_VAR 0 1
59270: PPUSH
59271: CALL_OW 302
59275: NOT
59276: OR
59277: PUSH
59278: LD_VAR 0 1
59282: PPUSH
59283: CALL_OW 301
59287: OR
59288: IFFALSE 59235
// RemoveSeeing ( _x , _y , side ) ;
59290: LD_VAR 0 9
59294: PPUSH
59295: LD_VAR 0 10
59299: PPUSH
59300: LD_VAR 0 6
59304: PPUSH
59305: CALL_OW 331
// end ; end_of_file
59309: LD_VAR 0 4
59313: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59314: PPOPN 6
59316: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
59317: LD_EXP 1
59321: PUSH
59322: LD_INT 4
59324: EQUAL
59325: IFFALSE 59361
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59327: LD_STRING setGameDifficulty(
59329: PUSH
59330: LD_OWVAR 67
59334: STR
59335: PUSH
59336: LD_STRING )
59338: STR
59339: PPUSH
59340: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59344: LD_STRING displayDifficulty(
59346: PUSH
59347: LD_OWVAR 67
59351: STR
59352: PUSH
59353: LD_STRING )
59355: STR
59356: PPUSH
59357: CALL_OW 559
// end ; SOS_MapStart ( ) ;
59361: CALL 59390 0 0
// end ; end_of_file
59365: PPOPN 1
59367: END
// every 0 0$1 do
59368: GO 59370
59370: DISABLE
// begin enable ;
59371: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59372: LD_STRING updateTimer(
59374: PUSH
59375: LD_OWVAR 1
59379: STR
59380: PUSH
59381: LD_STRING );
59383: STR
59384: PPUSH
59385: CALL_OW 559
// end ;
59389: END
// export function SOS_MapStart ( ) ; begin
59390: LD_INT 0
59392: PPUSH
// UpdateFactoryWaypoints ( ) ;
59393: CALL 59766 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59397: CALL 60018 0 0
// ParseMultiDataToLua ( ) ;
59401: CALL 60165 0 0
// end ;
59405: LD_VAR 0 1
59409: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59410: LD_INT 0
59412: PPUSH
// end ;
59413: LD_VAR 0 12
59417: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59418: LD_INT 0
59420: PPUSH
59421: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59422: LD_VAR 0 1
59426: NOT
59427: PUSH
59428: LD_VAR 0 2
59432: PPUSH
59433: LD_VAR 0 3
59437: PPUSH
59438: CALL_OW 488
59442: NOT
59443: OR
59444: PUSH
59445: LD_VAR 0 1
59449: PPUSH
59450: CALL_OW 266
59454: PUSH
59455: LD_INT 3
59457: NONEQUAL
59458: PUSH
59459: LD_VAR 0 1
59463: PPUSH
59464: CALL_OW 247
59468: PUSH
59469: LD_INT 1
59471: EQUAL
59472: NOT
59473: AND
59474: OR
59475: IFFALSE 59479
// exit ;
59477: GO 59761
// if GetType ( factory ) = unit_human then
59479: LD_VAR 0 1
59483: PPUSH
59484: CALL_OW 247
59488: PUSH
59489: LD_INT 1
59491: EQUAL
59492: IFFALSE 59509
// factory := IsInUnit ( factory ) ;
59494: LD_ADDR_VAR 0 1
59498: PUSH
59499: LD_VAR 0 1
59503: PPUSH
59504: CALL_OW 310
59508: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59509: LD_VAR 0 1
59513: PPUSH
59514: CALL_OW 266
59518: PUSH
59519: LD_INT 3
59521: NONEQUAL
59522: IFFALSE 59526
// exit ;
59524: GO 59761
// for i := 1 to Count ( factoryWaypoints ) do
59526: LD_ADDR_VAR 0 5
59530: PUSH
59531: DOUBLE
59532: LD_INT 1
59534: DEC
59535: ST_TO_ADDR
59536: LD_EXP 53
59540: PPUSH
59541: CALL 4994 0 1
59545: PUSH
59546: FOR_TO
59547: IFFALSE 59709
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59549: LD_VAR 0 2
59553: PPUSH
59554: LD_VAR 0 3
59558: PPUSH
59559: CALL_OW 428
59563: PUSH
59564: LD_EXP 53
59568: PUSH
59569: LD_VAR 0 5
59573: ARRAY
59574: PUSH
59575: LD_INT 2
59577: ARRAY
59578: EQUAL
59579: IFFALSE 59611
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59581: LD_ADDR_EXP 53
59585: PUSH
59586: LD_EXP 53
59590: PPUSH
59591: LD_VAR 0 5
59595: PPUSH
59596: CALL_OW 3
59600: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59601: CALL 59766 0 0
// exit ;
59605: POP
59606: POP
59607: GO 59761
// end else
59609: GO 59707
// if factory = factoryWaypoints [ i ] [ 2 ] then
59611: LD_VAR 0 1
59615: PUSH
59616: LD_EXP 53
59620: PUSH
59621: LD_VAR 0 5
59625: ARRAY
59626: PUSH
59627: LD_INT 2
59629: ARRAY
59630: EQUAL
59631: IFFALSE 59707
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59633: LD_ADDR_EXP 53
59637: PUSH
59638: LD_EXP 53
59642: PPUSH
59643: LD_VAR 0 5
59647: PPUSH
59648: CALL_OW 3
59652: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59653: LD_ADDR_EXP 53
59657: PUSH
59658: LD_EXP 53
59662: PPUSH
59663: LD_VAR 0 1
59667: PPUSH
59668: CALL_OW 255
59672: PUSH
59673: LD_VAR 0 1
59677: PUSH
59678: LD_VAR 0 2
59682: PUSH
59683: LD_VAR 0 3
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: PPUSH
59694: CALL 40603 0 2
59698: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59699: CALL 59766 0 0
// exit ;
59703: POP
59704: POP
59705: GO 59761
// end ; end ;
59707: GO 59546
59709: POP
59710: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59711: LD_ADDR_EXP 53
59715: PUSH
59716: LD_EXP 53
59720: PPUSH
59721: LD_VAR 0 1
59725: PPUSH
59726: CALL_OW 255
59730: PUSH
59731: LD_VAR 0 1
59735: PUSH
59736: LD_VAR 0 2
59740: PUSH
59741: LD_VAR 0 3
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: PPUSH
59752: CALL 40603 0 2
59756: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59757: CALL 59766 0 0
// end ;
59761: LD_VAR 0 4
59765: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59766: LD_INT 0
59768: PPUSH
59769: PPUSH
59770: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59771: LD_STRING resetFactoryWaypoint();
59773: PPUSH
59774: CALL_OW 559
// if factoryWaypoints then
59778: LD_EXP 53
59782: IFFALSE 59903
// begin list := factoryWaypoints ;
59784: LD_ADDR_VAR 0 3
59788: PUSH
59789: LD_EXP 53
59793: ST_TO_ADDR
// for i := 1 to list do
59794: LD_ADDR_VAR 0 2
59798: PUSH
59799: DOUBLE
59800: LD_INT 1
59802: DEC
59803: ST_TO_ADDR
59804: LD_VAR 0 3
59808: PUSH
59809: FOR_TO
59810: IFFALSE 59901
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59812: LD_STRING setFactoryWaypointXY(
59814: PUSH
59815: LD_VAR 0 3
59819: PUSH
59820: LD_VAR 0 2
59824: ARRAY
59825: PUSH
59826: LD_INT 1
59828: ARRAY
59829: STR
59830: PUSH
59831: LD_STRING ,
59833: STR
59834: PUSH
59835: LD_VAR 0 3
59839: PUSH
59840: LD_VAR 0 2
59844: ARRAY
59845: PUSH
59846: LD_INT 2
59848: ARRAY
59849: STR
59850: PUSH
59851: LD_STRING ,
59853: STR
59854: PUSH
59855: LD_VAR 0 3
59859: PUSH
59860: LD_VAR 0 2
59864: ARRAY
59865: PUSH
59866: LD_INT 3
59868: ARRAY
59869: STR
59870: PUSH
59871: LD_STRING ,
59873: STR
59874: PUSH
59875: LD_VAR 0 3
59879: PUSH
59880: LD_VAR 0 2
59884: ARRAY
59885: PUSH
59886: LD_INT 4
59888: ARRAY
59889: STR
59890: PUSH
59891: LD_STRING )
59893: STR
59894: PPUSH
59895: CALL_OW 559
59899: GO 59809
59901: POP
59902: POP
// end ; end ;
59903: LD_VAR 0 1
59907: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59908: LD_INT 0
59910: PPUSH
// if HexInfo ( x , y ) = warehouse then
59911: LD_VAR 0 2
59915: PPUSH
59916: LD_VAR 0 3
59920: PPUSH
59921: CALL_OW 428
59925: PUSH
59926: LD_VAR 0 1
59930: EQUAL
59931: IFFALSE 59958
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59933: LD_ADDR_EXP 55
59937: PUSH
59938: LD_EXP 55
59942: PPUSH
59943: LD_VAR 0 1
59947: PPUSH
59948: LD_INT 0
59950: PPUSH
59951: CALL_OW 1
59955: ST_TO_ADDR
59956: GO 60009
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59958: LD_ADDR_EXP 55
59962: PUSH
59963: LD_EXP 55
59967: PPUSH
59968: LD_VAR 0 1
59972: PPUSH
59973: LD_VAR 0 1
59977: PPUSH
59978: CALL_OW 255
59982: PUSH
59983: LD_VAR 0 1
59987: PUSH
59988: LD_VAR 0 2
59992: PUSH
59993: LD_VAR 0 3
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: PPUSH
60004: CALL_OW 1
60008: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60009: CALL 60018 0 0
// end ;
60013: LD_VAR 0 4
60017: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60018: LD_INT 0
60020: PPUSH
60021: PPUSH
60022: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60023: LD_STRING resetWarehouseGatheringPoints();
60025: PPUSH
60026: CALL_OW 559
// if warehouseGatheringPoints then
60030: LD_EXP 55
60034: IFFALSE 60160
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60036: LD_ADDR_VAR 0 3
60040: PUSH
60041: LD_EXP 55
60045: PPUSH
60046: CALL 44371 0 1
60050: ST_TO_ADDR
// for i := 1 to list do
60051: LD_ADDR_VAR 0 2
60055: PUSH
60056: DOUBLE
60057: LD_INT 1
60059: DEC
60060: ST_TO_ADDR
60061: LD_VAR 0 3
60065: PUSH
60066: FOR_TO
60067: IFFALSE 60158
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60069: LD_STRING setWarehouseGatheringPointXY(
60071: PUSH
60072: LD_VAR 0 3
60076: PUSH
60077: LD_VAR 0 2
60081: ARRAY
60082: PUSH
60083: LD_INT 1
60085: ARRAY
60086: STR
60087: PUSH
60088: LD_STRING ,
60090: STR
60091: PUSH
60092: LD_VAR 0 3
60096: PUSH
60097: LD_VAR 0 2
60101: ARRAY
60102: PUSH
60103: LD_INT 2
60105: ARRAY
60106: STR
60107: PUSH
60108: LD_STRING ,
60110: STR
60111: PUSH
60112: LD_VAR 0 3
60116: PUSH
60117: LD_VAR 0 2
60121: ARRAY
60122: PUSH
60123: LD_INT 3
60125: ARRAY
60126: STR
60127: PUSH
60128: LD_STRING ,
60130: STR
60131: PUSH
60132: LD_VAR 0 3
60136: PUSH
60137: LD_VAR 0 2
60141: ARRAY
60142: PUSH
60143: LD_INT 4
60145: ARRAY
60146: STR
60147: PUSH
60148: LD_STRING )
60150: STR
60151: PPUSH
60152: CALL_OW 559
60156: GO 60066
60158: POP
60159: POP
// end ; end ;
60160: LD_VAR 0 1
60164: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
60165: LD_INT 0
60167: PPUSH
60168: PPUSH
// if not mpSidePositions then
60169: LD_EXP 5
60173: NOT
60174: IFFALSE 60178
// exit ;
60176: GO 60249
// result :=  ;
60178: LD_ADDR_VAR 0 1
60182: PUSH
60183: LD_STRING 
60185: ST_TO_ADDR
// for i := 1 to 8 do
60186: LD_ADDR_VAR 0 2
60190: PUSH
60191: DOUBLE
60192: LD_INT 1
60194: DEC
60195: ST_TO_ADDR
60196: LD_INT 8
60198: PUSH
60199: FOR_TO
60200: IFFALSE 60230
// begin result := result & mpSidePositions [ i ] & ; ;
60202: LD_ADDR_VAR 0 1
60206: PUSH
60207: LD_VAR 0 1
60211: PUSH
60212: LD_EXP 5
60216: PUSH
60217: LD_VAR 0 2
60221: ARRAY
60222: STR
60223: PUSH
60224: LD_STRING ;
60226: STR
60227: ST_TO_ADDR
// end ;
60228: GO 60199
60230: POP
60231: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
60232: LD_STRING setMultiplayerRealPosition("
60234: PUSH
60235: LD_VAR 0 1
60239: STR
60240: PUSH
60241: LD_STRING ");
60243: STR
60244: PPUSH
60245: CALL_OW 559
// end ;
60249: LD_VAR 0 1
60253: RET
