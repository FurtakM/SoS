// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45546 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 45853 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 3 , 6 , 9 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 6
 397: PUSH
 398: LD_INT 9
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 9
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 27
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 17
 835: PUSH
 836: LD_INT 7
 838: PUSH
 839: LD_INT 8
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 10
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 12
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea , MZSpecialArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 16
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: LD_INT 15
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 17
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 4
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 22
 921: PUSH
 922: LD_EXP 4
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 23
 935: PUSH
 936: LD_EXP 4
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 13
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 25
 963: PUSH
 964: LD_EXP 4
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 4
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 4
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// if gameType = GameTypeKing then
1009: LD_VAR 0 1
1013: PUSH
1014: LD_INT 3
1016: EQUAL
1017: IFFALSE 1057
// begin mpKingArea := kingArea ;
1019: LD_ADDR_EXP 31
1023: PUSH
1024: LD_INT 16
1026: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1027: LD_ADDR_EXP 32
1031: PUSH
1032: LD_EXP 4
1036: PUSH
1037: LD_INT 8
1039: ARRAY
1040: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1041: LD_ADDR_EXP 34
1045: PUSH
1046: LD_EXP 4
1050: PUSH
1051: LD_INT 10
1053: ARRAY
1054: ST_TO_ADDR
// end else
1055: GO 1081
// begin mpKingArea := 0 ;
1057: LD_ADDR_EXP 31
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// mpPoints := 0 ;
1065: LD_ADDR_EXP 32
1069: PUSH
1070: LD_INT 0
1072: ST_TO_ADDR
// mpEmissions := 0 ;
1073: LD_ADDR_EXP 34
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1081: LD_EXP 4
1085: PUSH
1086: LD_INT 9
1088: ARRAY
1089: IFFALSE 1221
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1091: LD_ADDR_EXP 33
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 2
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 12
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 24
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_INT 12
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 23
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 21
1178: PUSH
1179: LD_INT 1
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 42
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 21
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 42
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1221: LD_ADDR_EXP 14
1225: PUSH
1226: LD_EXP 4
1230: PUSH
1231: LD_INT 11
1233: ARRAY
1234: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1235: LD_ADDR_EXP 20
1239: PUSH
1240: LD_EXP 4
1244: PUSH
1245: LD_INT 12
1247: ARRAY
1248: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1249: LD_ADDR_EXP 24
1253: PUSH
1254: LD_EXP 4
1258: PUSH
1259: LD_INT 13
1261: ARRAY
1262: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1263: LD_ADDR_EXP 30
1267: PUSH
1268: LD_EXP 4
1272: PUSH
1273: LD_INT 14
1275: ARRAY
1276: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1277: LD_ADDR_EXP 28
1281: PUSH
1282: LD_EXP 4
1286: PUSH
1287: LD_INT 15
1289: ARRAY
1290: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1291: LD_ADDR_EXP 26
1295: PUSH
1296: LD_EXP 4
1300: PUSH
1301: LD_INT 18
1303: ARRAY
1304: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1305: LD_ADDR_EXP 18
1309: PUSH
1310: LD_EXP 4
1314: PUSH
1315: LD_INT 21
1317: ARRAY
1318: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1319: LD_ADDR_EXP 29
1323: PUSH
1324: LD_INT 3
1326: PUSH
1327: LD_INT 2
1329: PUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 4
1335: PUSH
1336: LD_INT 6
1338: PUSH
1339: LD_INT 5
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1350: LD_ADDR_VAR 0 8
1354: PUSH
1355: LD_INT 18
1357: PPUSH
1358: LD_INT 2
1360: PPUSH
1361: CALL 45001 0 2
1365: PUSH
1366: LD_INT 19
1368: PPUSH
1369: LD_INT 1
1371: PPUSH
1372: CALL 45001 0 2
1376: PUSH
1377: LD_INT 20
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL 45001 0 2
1387: PUSH
1388: LD_INT 21
1390: PPUSH
1391: LD_INT 3
1393: PPUSH
1394: CALL 45001 0 2
1398: PUSH
1399: LD_INT 22
1401: PPUSH
1402: LD_INT 4
1404: PPUSH
1405: CALL 45001 0 2
1409: PUSH
1410: LD_INT 23
1412: PPUSH
1413: LD_INT 5
1415: PPUSH
1416: CALL 45001 0 2
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1429: LD_ADDR_VAR 0 3
1433: PUSH
1434: DOUBLE
1435: LD_INT 1
1437: DEC
1438: ST_TO_ADDR
1439: LD_VAR 0 8
1443: PPUSH
1444: CALL 4873 0 1
1448: PUSH
1449: FOR_TO
1450: IFFALSE 1554
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1452: LD_ADDR_EXP 19
1456: PUSH
1457: LD_EXP 19
1461: PPUSH
1462: LD_VAR 0 3
1466: PPUSH
1467: LD_VAR 0 8
1471: PUSH
1472: LD_VAR 0 3
1476: ARRAY
1477: PUSH
1478: LD_INT 1
1480: ARRAY
1481: PPUSH
1482: LD_VAR 0 8
1486: PUSH
1487: LD_VAR 0 3
1491: ARRAY
1492: PUSH
1493: LD_INT 3
1495: ARRAY
1496: PPUSH
1497: LD_INT 10
1499: PPUSH
1500: CALL_OW 272
1504: PUSH
1505: LD_VAR 0 8
1509: PUSH
1510: LD_VAR 0 3
1514: ARRAY
1515: PUSH
1516: LD_INT 2
1518: ARRAY
1519: PPUSH
1520: LD_VAR 0 8
1524: PUSH
1525: LD_VAR 0 3
1529: ARRAY
1530: PUSH
1531: LD_INT 3
1533: ARRAY
1534: PPUSH
1535: LD_INT 10
1537: PPUSH
1538: CALL_OW 273
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PPUSH
1547: CALL_OW 1
1551: ST_TO_ADDR
1552: GO 1449
1554: POP
1555: POP
// if hasOil then
1556: LD_VAR 0 5
1560: IFFALSE 1671
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: LD_EXP 4
1571: PUSH
1572: LD_INT 6
1574: ARRAY
1575: PUSH
1576: LD_INT 2
1578: EQUAL
1579: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1580: LD_ADDR_EXP 10
1584: PUSH
1585: LD_INT 24
1587: PPUSH
1588: LD_VAR 0 4
1592: PPUSH
1593: CALL 44834 0 2
1597: PUSH
1598: LD_INT 26
1600: PPUSH
1601: LD_VAR 0 4
1605: PPUSH
1606: CALL 44834 0 2
1610: PUSH
1611: LD_INT 28
1613: PPUSH
1614: LD_VAR 0 4
1618: PPUSH
1619: CALL 44834 0 2
1623: PUSH
1624: LD_INT 30
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL 44834 0 2
1636: PUSH
1637: LD_INT 32
1639: PPUSH
1640: LD_VAR 0 4
1644: PPUSH
1645: CALL 44834 0 2
1649: PUSH
1650: LD_INT 34
1652: PPUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL 44834 0 2
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// end ; if hasSib then
1671: LD_VAR 0 6
1675: IFFALSE 1786
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1677: LD_ADDR_VAR 0 4
1681: PUSH
1682: LD_EXP 4
1686: PUSH
1687: LD_INT 7
1689: ARRAY
1690: PUSH
1691: LD_INT 2
1693: EQUAL
1694: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1695: LD_ADDR_EXP 11
1699: PUSH
1700: LD_INT 25
1702: PPUSH
1703: LD_VAR 0 4
1707: PPUSH
1708: CALL 44834 0 2
1712: PUSH
1713: LD_INT 27
1715: PPUSH
1716: LD_VAR 0 4
1720: PPUSH
1721: CALL 44834 0 2
1725: PUSH
1726: LD_INT 29
1728: PPUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: CALL 44834 0 2
1738: PUSH
1739: LD_INT 31
1741: PPUSH
1742: LD_VAR 0 4
1746: PPUSH
1747: CALL 44834 0 2
1751: PUSH
1752: LD_INT 33
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL 44834 0 2
1764: PUSH
1765: LD_INT 35
1767: PPUSH
1768: LD_VAR 0 4
1772: PPUSH
1773: CALL 44834 0 2
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1786: LD_VAR 0 7
1790: PUSH
1791: LD_INT 1
1793: GREATEREQUAL
1794: IFFALSE 1806
// mpDepots := startPos ;
1796: LD_ADDR_EXP 12
1800: PUSH
1801: LD_VAR 0 8
1805: ST_TO_ADDR
// if baseLevel >= 2 then
1806: LD_VAR 0 7
1810: PUSH
1811: LD_INT 2
1813: GREATEREQUAL
1814: IFFALSE 2129
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1816: LD_ADDR_EXP 15
1820: PUSH
1821: LD_INT 31
1823: PUSH
1824: LD_INT 36
1826: PPUSH
1827: LD_INT 5
1829: PPUSH
1830: CALL 45001 0 2
1834: ADD
1835: PUSH
1836: LD_INT 31
1838: PUSH
1839: LD_INT 37
1841: PPUSH
1842: LD_INT 4
1844: PPUSH
1845: CALL 45001 0 2
1849: ADD
1850: PUSH
1851: LD_INT 4
1853: PUSH
1854: LD_INT 38
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL 45001 0 2
1864: ADD
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 31
1873: PUSH
1874: LD_INT 39
1876: PPUSH
1877: LD_INT 4
1879: PPUSH
1880: CALL 45001 0 2
1884: ADD
1885: PUSH
1886: LD_INT 31
1888: PUSH
1889: LD_INT 40
1891: PPUSH
1892: LD_INT 5
1894: PPUSH
1895: CALL 45001 0 2
1899: ADD
1900: PUSH
1901: LD_INT 4
1903: PUSH
1904: LD_INT 41
1906: PPUSH
1907: LD_INT 4
1909: PPUSH
1910: CALL 45001 0 2
1914: ADD
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 31
1923: PUSH
1924: LD_INT 42
1926: PPUSH
1927: LD_INT 3
1929: PPUSH
1930: CALL 45001 0 2
1934: ADD
1935: PUSH
1936: LD_INT 31
1938: PUSH
1939: LD_INT 43
1941: PPUSH
1942: LD_INT 4
1944: PPUSH
1945: CALL 45001 0 2
1949: ADD
1950: PUSH
1951: LD_INT 4
1953: PUSH
1954: LD_INT 44
1956: PPUSH
1957: LD_INT 3
1959: PPUSH
1960: CALL 45001 0 2
1964: ADD
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 31
1973: PUSH
1974: LD_INT 45
1976: PPUSH
1977: LD_INT 1
1979: PPUSH
1980: CALL 45001 0 2
1984: ADD
1985: PUSH
1986: LD_INT 31
1988: PUSH
1989: LD_INT 46
1991: PPUSH
1992: LD_INT 5
1994: PPUSH
1995: CALL 45001 0 2
1999: ADD
2000: PUSH
2001: LD_INT 4
2003: PUSH
2004: LD_INT 47
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 45001 0 2
2014: ADD
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 31
2023: PUSH
2024: LD_INT 48
2026: PPUSH
2027: LD_INT 2
2029: PPUSH
2030: CALL 45001 0 2
2034: ADD
2035: PUSH
2036: LD_INT 31
2038: PUSH
2039: LD_INT 49
2041: PPUSH
2042: LD_INT 0
2044: PPUSH
2045: CALL 45001 0 2
2049: ADD
2050: PUSH
2051: LD_INT 4
2053: PUSH
2054: LD_INT 50
2056: PPUSH
2057: LD_INT 1
2059: PPUSH
2060: CALL 45001 0 2
2064: ADD
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 31
2073: PUSH
2074: LD_INT 51
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL 45001 0 2
2084: ADD
2085: PUSH
2086: LD_INT 31
2088: PUSH
2089: LD_INT 52
2091: PPUSH
2092: LD_INT 2
2094: PPUSH
2095: CALL 45001 0 2
2099: ADD
2100: PUSH
2101: LD_INT 4
2103: PUSH
2104: LD_INT 53
2106: PPUSH
2107: LD_INT 2
2109: PPUSH
2110: CALL 45001 0 2
2114: ADD
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: ST_TO_ADDR
// end ; end ;
2129: LD_VAR 0 2
2133: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2134: GO 2136
2136: DISABLE
2137: LD_INT 0
2139: PPUSH
2140: PPUSH
2141: PPUSH
2142: PPUSH
2143: PPUSH
2144: PPUSH
2145: PPUSH
2146: PPUSH
// begin if not mpShipments then
2147: LD_EXP 25
2151: NOT
2152: IFFALSE 2156
// exit ;
2154: GO 2696
// case mpShipments of 1 :
2156: LD_EXP 25
2160: PUSH
2161: LD_INT 1
2163: DOUBLE
2164: EQUAL
2165: IFTRUE 2169
2167: GO 2204
2169: POP
// begin time := 0 0$30 ;
2170: LD_ADDR_VAR 0 4
2174: PUSH
2175: LD_INT 1050
2177: ST_TO_ADDR
// normalTime := 0 0$30 ;
2178: LD_ADDR_VAR 0 6
2182: PUSH
2183: LD_INT 1050
2185: ST_TO_ADDR
// maxTime := 1 1$20 ;
2186: LD_ADDR_VAR 0 8
2190: PUSH
2191: LD_INT 2800
2193: ST_TO_ADDR
// delayTime := 0 0$5 ;
2194: LD_ADDR_VAR 0 7
2198: PUSH
2199: LD_INT 175
2201: ST_TO_ADDR
// end ; 2 :
2202: GO 2334
2204: LD_INT 2
2206: DOUBLE
2207: EQUAL
2208: IFTRUE 2212
2210: GO 2247
2212: POP
// begin time := 0 0$25 ;
2213: LD_ADDR_VAR 0 4
2217: PUSH
2218: LD_INT 875
2220: ST_TO_ADDR
// normalTime := 0 0$25 ;
2221: LD_ADDR_VAR 0 6
2225: PUSH
2226: LD_INT 875
2228: ST_TO_ADDR
// maxTime := 1 1$10 ;
2229: LD_ADDR_VAR 0 8
2233: PUSH
2234: LD_INT 2450
2236: ST_TO_ADDR
// delayTime := 0 0$4 ;
2237: LD_ADDR_VAR 0 7
2241: PUSH
2242: LD_INT 140
2244: ST_TO_ADDR
// end ; 3 :
2245: GO 2334
2247: LD_INT 3
2249: DOUBLE
2250: EQUAL
2251: IFTRUE 2255
2253: GO 2290
2255: POP
// begin time := 0 0$20 ;
2256: LD_ADDR_VAR 0 4
2260: PUSH
2261: LD_INT 700
2263: ST_TO_ADDR
// normalTime := 0 0$20 ;
2264: LD_ADDR_VAR 0 6
2268: PUSH
2269: LD_INT 700
2271: ST_TO_ADDR
// maxTime := 1 1$00 ;
2272: LD_ADDR_VAR 0 8
2276: PUSH
2277: LD_INT 2100
2279: ST_TO_ADDR
// delayTime := 0 0$3 ;
2280: LD_ADDR_VAR 0 7
2284: PUSH
2285: LD_INT 105
2287: ST_TO_ADDR
// end ; 4 :
2288: GO 2334
2290: LD_INT 4
2292: DOUBLE
2293: EQUAL
2294: IFTRUE 2298
2296: GO 2333
2298: POP
// begin time := 0 0$15 ;
2299: LD_ADDR_VAR 0 4
2303: PUSH
2304: LD_INT 525
2306: ST_TO_ADDR
// normalTime := 0 0$15 ;
2307: LD_ADDR_VAR 0 6
2311: PUSH
2312: LD_INT 525
2314: ST_TO_ADDR
// maxTime := 0 0$55 ;
2315: LD_ADDR_VAR 0 8
2319: PUSH
2320: LD_INT 1925
2322: ST_TO_ADDR
// delayTime := 0 0$2 ;
2323: LD_ADDR_VAR 0 7
2327: PUSH
2328: LD_INT 70
2330: ST_TO_ADDR
// end ; end ;
2331: GO 2334
2333: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2334: LD_ADDR_VAR 0 3
2338: PUSH
2339: LD_INT 7
2341: PUSH
2342: LD_INT 8
2344: PUSH
2345: LD_INT 9
2347: PUSH
2348: LD_INT 10
2350: PUSH
2351: LD_INT 11
2353: PUSH
2354: LD_INT 12
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// areas := [ ] ;
2365: LD_ADDR_VAR 0 5
2369: PUSH
2370: EMPTY
2371: ST_TO_ADDR
// for i := 1 to 8 do
2372: LD_ADDR_VAR 0 1
2376: PUSH
2377: DOUBLE
2378: LD_INT 1
2380: DEC
2381: ST_TO_ADDR
2382: LD_INT 8
2384: PUSH
2385: FOR_TO
2386: IFFALSE 2433
// begin if not mpSidePositions [ i ] then
2388: LD_EXP 5
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: NOT
2399: IFFALSE 2403
// continue ;
2401: GO 2385
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2403: LD_ADDR_VAR 0 5
2407: PUSH
2408: LD_VAR 0 5
2412: PUSH
2413: LD_VAR 0 3
2417: PUSH
2418: LD_EXP 5
2422: PUSH
2423: LD_VAR 0 1
2427: ARRAY
2428: ARRAY
2429: ADD
2430: ST_TO_ADDR
// end ;
2431: GO 2385
2433: POP
2434: POP
// repeat wait ( time ) ;
2435: LD_VAR 0 4
2439: PPUSH
2440: CALL_OW 67
// x := rand ( 1 , 5 ) ;
2444: LD_ADDR_VAR 0 2
2448: PUSH
2449: LD_INT 1
2451: PPUSH
2452: LD_INT 5
2454: PPUSH
2455: CALL_OW 12
2459: ST_TO_ADDR
// for i in areas do
2460: LD_ADDR_VAR 0 1
2464: PUSH
2465: LD_VAR 0 5
2469: PUSH
2470: FOR_IN
2471: IFFALSE 2510
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2473: LD_VAR 0 1
2477: PPUSH
2478: LD_INT 1
2480: PPUSH
2481: CALL_OW 287
2485: PUSH
2486: LD_INT 20
2488: LESS
2489: IFFALSE 2508
// begin CreateCratesArea ( x , i , true ) ;
2491: LD_VAR 0 2
2495: PPUSH
2496: LD_VAR 0 1
2500: PPUSH
2501: LD_INT 1
2503: PPUSH
2504: CALL_OW 55
// end ; end ;
2508: GO 2470
2510: POP
2511: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 100 then
2512: LD_INT 14
2514: PPUSH
2515: LD_INT 1
2517: PPUSH
2518: CALL_OW 287
2522: PUSH
2523: LD_INT 100
2525: LESS
2526: IFFALSE 2570
// for i := 1 to Count ( areas ) do
2528: LD_ADDR_VAR 0 1
2532: PUSH
2533: DOUBLE
2534: LD_INT 1
2536: DEC
2537: ST_TO_ADDR
2538: LD_VAR 0 5
2542: PPUSH
2543: CALL 4873 0 1
2547: PUSH
2548: FOR_TO
2549: IFFALSE 2568
// CreateCratesArea ( x , MZBaseArea , true ) ;
2551: LD_VAR 0 2
2555: PPUSH
2556: LD_INT 14
2558: PPUSH
2559: LD_INT 1
2561: PPUSH
2562: CALL_OW 55
2566: GO 2548
2568: POP
2569: POP
// if GetResourceArea ( MZSpecialArea , mat_cans ) = 0 then
2570: LD_INT 15
2572: PPUSH
2573: LD_INT 1
2575: PPUSH
2576: CALL_OW 287
2580: PUSH
2581: LD_INT 0
2583: EQUAL
2584: IFFALSE 2623
// begin for i := 1 to 3 do
2586: LD_ADDR_VAR 0 1
2590: PUSH
2591: DOUBLE
2592: LD_INT 1
2594: DEC
2595: ST_TO_ADDR
2596: LD_INT 3
2598: PUSH
2599: FOR_TO
2600: IFFALSE 2619
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 15
2609: PPUSH
2610: LD_INT 1
2612: PPUSH
2613: CALL_OW 55
2617: GO 2599
2619: POP
2620: POP
// end else
2621: GO 2654
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
2623: LD_INT 15
2625: PPUSH
2626: LD_INT 1
2628: PPUSH
2629: CALL_OW 287
2633: PUSH
2634: LD_INT 30
2636: LESS
2637: IFFALSE 2654
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2639: LD_VAR 0 2
2643: PPUSH
2644: LD_INT 15
2646: PPUSH
2647: LD_INT 1
2649: PPUSH
2650: CALL_OW 55
// time := time + delayTime ;
2654: LD_ADDR_VAR 0 4
2658: PUSH
2659: LD_VAR 0 4
2663: PUSH
2664: LD_VAR 0 7
2668: PLUS
2669: ST_TO_ADDR
// if time > maxTime then
2670: LD_VAR 0 4
2674: PUSH
2675: LD_VAR 0 8
2679: GREATER
2680: IFFALSE 2692
// time := normalTime ;
2682: LD_ADDR_VAR 0 4
2686: PUSH
2687: LD_VAR 0 6
2691: ST_TO_ADDR
// until false ;
2692: LD_INT 0
2694: IFFALSE 2435
// end ; end_of_file
2696: PPOPN 8
2698: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2699: LD_VAR 0 1
2703: PPUSH
2704: CALL 69152 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2708: LD_VAR 0 1
2712: PPUSH
2713: CALL 50138 0 1
// end ;
2717: PPOPN 1
2719: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2720: LD_VAR 0 1
2724: PPUSH
2725: CALL 69169 0 1
// end ;
2729: PPOPN 1
2731: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2732: LD_VAR 0 1
2736: PPUSH
2737: LD_VAR 0 2
2741: PPUSH
2742: CALL 69210 0 2
2746: PPOPN 2
2748: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2749: LD_VAR 0 1
2753: PPUSH
2754: LD_VAR 0 2
2758: PPUSH
2759: LD_VAR 0 3
2763: PPUSH
2764: CALL 50637 0 3
2768: PPOPN 3
2770: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2771: LD_INT 0
2773: PPUSH
2774: PPUSH
// if exist_mode then
2775: LD_VAR 0 2
2779: IFFALSE 2804
// unit := CreateCharacter ( prefix & ident ) else
2781: LD_ADDR_VAR 0 5
2785: PUSH
2786: LD_VAR 0 3
2790: PUSH
2791: LD_VAR 0 1
2795: STR
2796: PPUSH
2797: CALL_OW 34
2801: ST_TO_ADDR
2802: GO 2819
// unit := NewCharacter ( ident ) ;
2804: LD_ADDR_VAR 0 5
2808: PUSH
2809: LD_VAR 0 1
2813: PPUSH
2814: CALL_OW 25
2818: ST_TO_ADDR
// result := unit ;
2819: LD_ADDR_VAR 0 4
2823: PUSH
2824: LD_VAR 0 5
2828: ST_TO_ADDR
// end ;
2829: LD_VAR 0 4
2833: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2834: LD_INT 0
2836: PPUSH
2837: PPUSH
// if not side or not nation then
2838: LD_VAR 0 1
2842: NOT
2843: PUSH
2844: LD_VAR 0 2
2848: NOT
2849: OR
2850: IFFALSE 2854
// exit ;
2852: GO 3622
// case nation of nation_american :
2854: LD_VAR 0 2
2858: PUSH
2859: LD_INT 1
2861: DOUBLE
2862: EQUAL
2863: IFTRUE 2867
2865: GO 3081
2867: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2868: LD_ADDR_VAR 0 4
2872: PUSH
2873: LD_INT 35
2875: PUSH
2876: LD_INT 45
2878: PUSH
2879: LD_INT 46
2881: PUSH
2882: LD_INT 47
2884: PUSH
2885: LD_INT 82
2887: PUSH
2888: LD_INT 83
2890: PUSH
2891: LD_INT 84
2893: PUSH
2894: LD_INT 85
2896: PUSH
2897: LD_INT 86
2899: PUSH
2900: LD_INT 1
2902: PUSH
2903: LD_INT 2
2905: PUSH
2906: LD_INT 6
2908: PUSH
2909: LD_INT 15
2911: PUSH
2912: LD_INT 16
2914: PUSH
2915: LD_INT 7
2917: PUSH
2918: LD_INT 12
2920: PUSH
2921: LD_INT 13
2923: PUSH
2924: LD_INT 10
2926: PUSH
2927: LD_INT 14
2929: PUSH
2930: LD_INT 20
2932: PUSH
2933: LD_INT 21
2935: PUSH
2936: LD_INT 22
2938: PUSH
2939: LD_INT 25
2941: PUSH
2942: LD_INT 32
2944: PUSH
2945: LD_INT 27
2947: PUSH
2948: LD_INT 36
2950: PUSH
2951: LD_INT 69
2953: PUSH
2954: LD_INT 39
2956: PUSH
2957: LD_INT 34
2959: PUSH
2960: LD_INT 40
2962: PUSH
2963: LD_INT 48
2965: PUSH
2966: LD_INT 49
2968: PUSH
2969: LD_INT 50
2971: PUSH
2972: LD_INT 51
2974: PUSH
2975: LD_INT 52
2977: PUSH
2978: LD_INT 53
2980: PUSH
2981: LD_INT 54
2983: PUSH
2984: LD_INT 55
2986: PUSH
2987: LD_INT 56
2989: PUSH
2990: LD_INT 57
2992: PUSH
2993: LD_INT 58
2995: PUSH
2996: LD_INT 59
2998: PUSH
2999: LD_INT 60
3001: PUSH
3002: LD_INT 61
3004: PUSH
3005: LD_INT 62
3007: PUSH
3008: LD_INT 80
3010: PUSH
3011: LD_INT 82
3013: PUSH
3014: LD_INT 83
3016: PUSH
3017: LD_INT 84
3019: PUSH
3020: LD_INT 85
3022: PUSH
3023: LD_INT 86
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: LIST
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: LIST
3050: LIST
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: ST_TO_ADDR
3079: GO 3546
3081: LD_INT 2
3083: DOUBLE
3084: EQUAL
3085: IFTRUE 3089
3087: GO 3315
3089: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3090: LD_ADDR_VAR 0 4
3094: PUSH
3095: LD_INT 35
3097: PUSH
3098: LD_INT 45
3100: PUSH
3101: LD_INT 46
3103: PUSH
3104: LD_INT 47
3106: PUSH
3107: LD_INT 82
3109: PUSH
3110: LD_INT 83
3112: PUSH
3113: LD_INT 84
3115: PUSH
3116: LD_INT 85
3118: PUSH
3119: LD_INT 87
3121: PUSH
3122: LD_INT 70
3124: PUSH
3125: LD_INT 1
3127: PUSH
3128: LD_INT 11
3130: PUSH
3131: LD_INT 3
3133: PUSH
3134: LD_INT 4
3136: PUSH
3137: LD_INT 5
3139: PUSH
3140: LD_INT 6
3142: PUSH
3143: LD_INT 15
3145: PUSH
3146: LD_INT 18
3148: PUSH
3149: LD_INT 7
3151: PUSH
3152: LD_INT 17
3154: PUSH
3155: LD_INT 8
3157: PUSH
3158: LD_INT 20
3160: PUSH
3161: LD_INT 21
3163: PUSH
3164: LD_INT 22
3166: PUSH
3167: LD_INT 72
3169: PUSH
3170: LD_INT 26
3172: PUSH
3173: LD_INT 69
3175: PUSH
3176: LD_INT 39
3178: PUSH
3179: LD_INT 40
3181: PUSH
3182: LD_INT 41
3184: PUSH
3185: LD_INT 42
3187: PUSH
3188: LD_INT 43
3190: PUSH
3191: LD_INT 48
3193: PUSH
3194: LD_INT 49
3196: PUSH
3197: LD_INT 50
3199: PUSH
3200: LD_INT 51
3202: PUSH
3203: LD_INT 52
3205: PUSH
3206: LD_INT 53
3208: PUSH
3209: LD_INT 54
3211: PUSH
3212: LD_INT 55
3214: PUSH
3215: LD_INT 56
3217: PUSH
3218: LD_INT 60
3220: PUSH
3221: LD_INT 61
3223: PUSH
3224: LD_INT 62
3226: PUSH
3227: LD_INT 66
3229: PUSH
3230: LD_INT 67
3232: PUSH
3233: LD_INT 68
3235: PUSH
3236: LD_INT 81
3238: PUSH
3239: LD_INT 82
3241: PUSH
3242: LD_INT 83
3244: PUSH
3245: LD_INT 84
3247: PUSH
3248: LD_INT 85
3250: PUSH
3251: LD_INT 87
3253: PUSH
3254: LD_INT 88
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: ST_TO_ADDR
3313: GO 3546
3315: LD_INT 3
3317: DOUBLE
3318: EQUAL
3319: IFTRUE 3323
3321: GO 3545
3323: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3324: LD_ADDR_VAR 0 4
3328: PUSH
3329: LD_INT 46
3331: PUSH
3332: LD_INT 47
3334: PUSH
3335: LD_INT 1
3337: PUSH
3338: LD_INT 2
3340: PUSH
3341: LD_INT 82
3343: PUSH
3344: LD_INT 83
3346: PUSH
3347: LD_INT 84
3349: PUSH
3350: LD_INT 85
3352: PUSH
3353: LD_INT 86
3355: PUSH
3356: LD_INT 11
3358: PUSH
3359: LD_INT 9
3361: PUSH
3362: LD_INT 20
3364: PUSH
3365: LD_INT 19
3367: PUSH
3368: LD_INT 21
3370: PUSH
3371: LD_INT 24
3373: PUSH
3374: LD_INT 22
3376: PUSH
3377: LD_INT 25
3379: PUSH
3380: LD_INT 28
3382: PUSH
3383: LD_INT 29
3385: PUSH
3386: LD_INT 30
3388: PUSH
3389: LD_INT 31
3391: PUSH
3392: LD_INT 37
3394: PUSH
3395: LD_INT 38
3397: PUSH
3398: LD_INT 32
3400: PUSH
3401: LD_INT 27
3403: PUSH
3404: LD_INT 33
3406: PUSH
3407: LD_INT 69
3409: PUSH
3410: LD_INT 39
3412: PUSH
3413: LD_INT 34
3415: PUSH
3416: LD_INT 40
3418: PUSH
3419: LD_INT 71
3421: PUSH
3422: LD_INT 23
3424: PUSH
3425: LD_INT 44
3427: PUSH
3428: LD_INT 48
3430: PUSH
3431: LD_INT 49
3433: PUSH
3434: LD_INT 50
3436: PUSH
3437: LD_INT 51
3439: PUSH
3440: LD_INT 52
3442: PUSH
3443: LD_INT 53
3445: PUSH
3446: LD_INT 54
3448: PUSH
3449: LD_INT 55
3451: PUSH
3452: LD_INT 56
3454: PUSH
3455: LD_INT 57
3457: PUSH
3458: LD_INT 58
3460: PUSH
3461: LD_INT 59
3463: PUSH
3464: LD_INT 63
3466: PUSH
3467: LD_INT 64
3469: PUSH
3470: LD_INT 65
3472: PUSH
3473: LD_INT 82
3475: PUSH
3476: LD_INT 83
3478: PUSH
3479: LD_INT 84
3481: PUSH
3482: LD_INT 85
3484: PUSH
3485: LD_INT 86
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: ST_TO_ADDR
3543: GO 3546
3545: POP
// if state > - 1 and state < 3 then
3546: LD_VAR 0 3
3550: PUSH
3551: LD_INT 1
3553: NEG
3554: GREATER
3555: PUSH
3556: LD_VAR 0 3
3560: PUSH
3561: LD_INT 3
3563: LESS
3564: AND
3565: IFFALSE 3622
// for i in result do
3567: LD_ADDR_VAR 0 5
3571: PUSH
3572: LD_VAR 0 4
3576: PUSH
3577: FOR_IN
3578: IFFALSE 3620
// if GetTech ( i , side ) <> state then
3580: LD_VAR 0 5
3584: PPUSH
3585: LD_VAR 0 1
3589: PPUSH
3590: CALL_OW 321
3594: PUSH
3595: LD_VAR 0 3
3599: NONEQUAL
3600: IFFALSE 3618
// result := result diff i ;
3602: LD_ADDR_VAR 0 4
3606: PUSH
3607: LD_VAR 0 4
3611: PUSH
3612: LD_VAR 0 5
3616: DIFF
3617: ST_TO_ADDR
3618: GO 3577
3620: POP
3621: POP
// end ;
3622: LD_VAR 0 4
3626: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3627: LD_INT 0
3629: PPUSH
3630: PPUSH
3631: PPUSH
// result := true ;
3632: LD_ADDR_VAR 0 3
3636: PUSH
3637: LD_INT 1
3639: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3640: LD_ADDR_VAR 0 5
3644: PUSH
3645: LD_VAR 0 2
3649: PPUSH
3650: CALL_OW 480
3654: ST_TO_ADDR
// if not tmp then
3655: LD_VAR 0 5
3659: NOT
3660: IFFALSE 3664
// exit ;
3662: GO 3713
// for i in tmp do
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: LD_VAR 0 5
3673: PUSH
3674: FOR_IN
3675: IFFALSE 3711
// if GetTech ( i , side ) <> state_researched then
3677: LD_VAR 0 4
3681: PPUSH
3682: LD_VAR 0 1
3686: PPUSH
3687: CALL_OW 321
3691: PUSH
3692: LD_INT 2
3694: NONEQUAL
3695: IFFALSE 3709
// begin result := false ;
3697: LD_ADDR_VAR 0 3
3701: PUSH
3702: LD_INT 0
3704: ST_TO_ADDR
// exit ;
3705: POP
3706: POP
3707: GO 3713
// end ;
3709: GO 3674
3711: POP
3712: POP
// end ;
3713: LD_VAR 0 3
3717: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3718: LD_INT 0
3720: PPUSH
3721: PPUSH
3722: PPUSH
3723: PPUSH
3724: PPUSH
3725: PPUSH
3726: PPUSH
3727: PPUSH
3728: PPUSH
3729: PPUSH
3730: PPUSH
3731: PPUSH
3732: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3733: LD_VAR 0 1
3737: NOT
3738: PUSH
3739: LD_VAR 0 1
3743: PPUSH
3744: CALL_OW 257
3748: PUSH
3749: LD_INT 9
3751: NONEQUAL
3752: OR
3753: IFFALSE 3757
// exit ;
3755: GO 4330
// side := GetSide ( unit ) ;
3757: LD_ADDR_VAR 0 9
3761: PUSH
3762: LD_VAR 0 1
3766: PPUSH
3767: CALL_OW 255
3771: ST_TO_ADDR
// tech_space := tech_spacanom ;
3772: LD_ADDR_VAR 0 12
3776: PUSH
3777: LD_INT 29
3779: ST_TO_ADDR
// tech_time := tech_taurad ;
3780: LD_ADDR_VAR 0 13
3784: PUSH
3785: LD_INT 28
3787: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3788: LD_ADDR_VAR 0 11
3792: PUSH
3793: LD_VAR 0 1
3797: PPUSH
3798: CALL_OW 310
3802: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3803: LD_VAR 0 11
3807: PPUSH
3808: CALL_OW 247
3812: PUSH
3813: LD_INT 2
3815: EQUAL
3816: IFFALSE 3820
// exit ;
3818: GO 4330
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3820: LD_ADDR_VAR 0 8
3824: PUSH
3825: LD_INT 81
3827: PUSH
3828: LD_VAR 0 9
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: PUSH
3837: LD_INT 3
3839: PUSH
3840: LD_INT 21
3842: PUSH
3843: LD_INT 3
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: EMPTY
3851: LIST
3852: LIST
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PPUSH
3858: CALL_OW 69
3862: ST_TO_ADDR
// if not tmp then
3863: LD_VAR 0 8
3867: NOT
3868: IFFALSE 3872
// exit ;
3870: GO 4330
// if in_unit then
3872: LD_VAR 0 11
3876: IFFALSE 3900
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3878: LD_ADDR_VAR 0 10
3882: PUSH
3883: LD_VAR 0 8
3887: PPUSH
3888: LD_VAR 0 11
3892: PPUSH
3893: CALL_OW 74
3897: ST_TO_ADDR
3898: GO 3920
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3900: LD_ADDR_VAR 0 10
3904: PUSH
3905: LD_VAR 0 8
3909: PPUSH
3910: LD_VAR 0 1
3914: PPUSH
3915: CALL_OW 74
3919: ST_TO_ADDR
// if not enemy then
3920: LD_VAR 0 10
3924: NOT
3925: IFFALSE 3929
// exit ;
3927: GO 4330
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3929: LD_VAR 0 11
3933: PUSH
3934: LD_VAR 0 11
3938: PPUSH
3939: LD_VAR 0 10
3943: PPUSH
3944: CALL_OW 296
3948: PUSH
3949: LD_INT 13
3951: GREATER
3952: AND
3953: PUSH
3954: LD_VAR 0 1
3958: PPUSH
3959: LD_VAR 0 10
3963: PPUSH
3964: CALL_OW 296
3968: PUSH
3969: LD_INT 12
3971: GREATER
3972: OR
3973: IFFALSE 3977
// exit ;
3975: GO 4330
// missile := [ 1 ] ;
3977: LD_ADDR_VAR 0 14
3981: PUSH
3982: LD_INT 1
3984: PUSH
3985: EMPTY
3986: LIST
3987: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3988: LD_VAR 0 9
3992: PPUSH
3993: LD_VAR 0 12
3997: PPUSH
3998: CALL_OW 325
4002: IFFALSE 4031
// missile := Replace ( missile , missile + 1 , 2 ) ;
4004: LD_ADDR_VAR 0 14
4008: PUSH
4009: LD_VAR 0 14
4013: PPUSH
4014: LD_VAR 0 14
4018: PUSH
4019: LD_INT 1
4021: PLUS
4022: PPUSH
4023: LD_INT 2
4025: PPUSH
4026: CALL_OW 1
4030: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4031: LD_VAR 0 9
4035: PPUSH
4036: LD_VAR 0 13
4040: PPUSH
4041: CALL_OW 325
4045: PUSH
4046: LD_VAR 0 10
4050: PPUSH
4051: CALL_OW 255
4055: PPUSH
4056: LD_VAR 0 13
4060: PPUSH
4061: CALL_OW 325
4065: NOT
4066: AND
4067: IFFALSE 4096
// missile := Replace ( missile , missile + 1 , 3 ) ;
4069: LD_ADDR_VAR 0 14
4073: PUSH
4074: LD_VAR 0 14
4078: PPUSH
4079: LD_VAR 0 14
4083: PUSH
4084: LD_INT 1
4086: PLUS
4087: PPUSH
4088: LD_INT 3
4090: PPUSH
4091: CALL_OW 1
4095: ST_TO_ADDR
// if missile < 2 then
4096: LD_VAR 0 14
4100: PUSH
4101: LD_INT 2
4103: LESS
4104: IFFALSE 4108
// exit ;
4106: GO 4330
// x := GetX ( enemy ) ;
4108: LD_ADDR_VAR 0 4
4112: PUSH
4113: LD_VAR 0 10
4117: PPUSH
4118: CALL_OW 250
4122: ST_TO_ADDR
// y := GetY ( enemy ) ;
4123: LD_ADDR_VAR 0 5
4127: PUSH
4128: LD_VAR 0 10
4132: PPUSH
4133: CALL_OW 251
4137: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4138: LD_ADDR_VAR 0 6
4142: PUSH
4143: LD_VAR 0 4
4147: PUSH
4148: LD_INT 1
4150: NEG
4151: PPUSH
4152: LD_INT 1
4154: PPUSH
4155: CALL_OW 12
4159: PLUS
4160: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4161: LD_ADDR_VAR 0 7
4165: PUSH
4166: LD_VAR 0 5
4170: PUSH
4171: LD_INT 1
4173: NEG
4174: PPUSH
4175: LD_INT 1
4177: PPUSH
4178: CALL_OW 12
4182: PLUS
4183: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4184: LD_VAR 0 6
4188: PPUSH
4189: LD_VAR 0 7
4193: PPUSH
4194: CALL_OW 488
4198: NOT
4199: IFFALSE 4221
// begin _x := x ;
4201: LD_ADDR_VAR 0 6
4205: PUSH
4206: LD_VAR 0 4
4210: ST_TO_ADDR
// _y := y ;
4211: LD_ADDR_VAR 0 7
4215: PUSH
4216: LD_VAR 0 5
4220: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4221: LD_ADDR_VAR 0 3
4225: PUSH
4226: LD_INT 1
4228: PPUSH
4229: LD_VAR 0 14
4233: PPUSH
4234: CALL_OW 12
4238: ST_TO_ADDR
// case i of 1 :
4239: LD_VAR 0 3
4243: PUSH
4244: LD_INT 1
4246: DOUBLE
4247: EQUAL
4248: IFTRUE 4252
4250: GO 4269
4252: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4253: LD_VAR 0 1
4257: PPUSH
4258: LD_VAR 0 10
4262: PPUSH
4263: CALL_OW 115
4267: GO 4330
4269: LD_INT 2
4271: DOUBLE
4272: EQUAL
4273: IFTRUE 4277
4275: GO 4299
4277: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4278: LD_VAR 0 1
4282: PPUSH
4283: LD_VAR 0 6
4287: PPUSH
4288: LD_VAR 0 7
4292: PPUSH
4293: CALL_OW 153
4297: GO 4330
4299: LD_INT 3
4301: DOUBLE
4302: EQUAL
4303: IFTRUE 4307
4305: GO 4329
4307: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4308: LD_VAR 0 1
4312: PPUSH
4313: LD_VAR 0 6
4317: PPUSH
4318: LD_VAR 0 7
4322: PPUSH
4323: CALL_OW 154
4327: GO 4330
4329: POP
// end ;
4330: LD_VAR 0 2
4334: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4335: LD_INT 0
4337: PPUSH
4338: PPUSH
4339: PPUSH
4340: PPUSH
4341: PPUSH
4342: PPUSH
// if not unit or not building then
4343: LD_VAR 0 1
4347: NOT
4348: PUSH
4349: LD_VAR 0 2
4353: NOT
4354: OR
4355: IFFALSE 4359
// exit ;
4357: GO 4517
// x := GetX ( building ) ;
4359: LD_ADDR_VAR 0 5
4363: PUSH
4364: LD_VAR 0 2
4368: PPUSH
4369: CALL_OW 250
4373: ST_TO_ADDR
// y := GetY ( building ) ;
4374: LD_ADDR_VAR 0 6
4378: PUSH
4379: LD_VAR 0 2
4383: PPUSH
4384: CALL_OW 251
4388: ST_TO_ADDR
// for i = 0 to 5 do
4389: LD_ADDR_VAR 0 4
4393: PUSH
4394: DOUBLE
4395: LD_INT 0
4397: DEC
4398: ST_TO_ADDR
4399: LD_INT 5
4401: PUSH
4402: FOR_TO
4403: IFFALSE 4515
// begin _x := ShiftX ( x , i , 3 ) ;
4405: LD_ADDR_VAR 0 7
4409: PUSH
4410: LD_VAR 0 5
4414: PPUSH
4415: LD_VAR 0 4
4419: PPUSH
4420: LD_INT 3
4422: PPUSH
4423: CALL_OW 272
4427: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4428: LD_ADDR_VAR 0 8
4432: PUSH
4433: LD_VAR 0 6
4437: PPUSH
4438: LD_VAR 0 4
4442: PPUSH
4443: LD_INT 3
4445: PPUSH
4446: CALL_OW 273
4450: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4451: LD_VAR 0 7
4455: PPUSH
4456: LD_VAR 0 8
4460: PPUSH
4461: CALL_OW 488
4465: NOT
4466: IFFALSE 4470
// continue ;
4468: GO 4402
// if HexInfo ( _x , _y ) = 0 then
4470: LD_VAR 0 7
4474: PPUSH
4475: LD_VAR 0 8
4479: PPUSH
4480: CALL_OW 428
4484: PUSH
4485: LD_INT 0
4487: EQUAL
4488: IFFALSE 4513
// begin ComMoveXY ( unit , _x , _y ) ;
4490: LD_VAR 0 1
4494: PPUSH
4495: LD_VAR 0 7
4499: PPUSH
4500: LD_VAR 0 8
4504: PPUSH
4505: CALL_OW 111
// exit ;
4509: POP
4510: POP
4511: GO 4517
// end ; end ;
4513: GO 4402
4515: POP
4516: POP
// end ;
4517: LD_VAR 0 3
4521: RET
// export function ScanBase ( side , base_area ) ; begin
4522: LD_INT 0
4524: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4525: LD_ADDR_VAR 0 3
4529: PUSH
4530: LD_VAR 0 2
4534: PPUSH
4535: LD_INT 81
4537: PUSH
4538: LD_VAR 0 1
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PPUSH
4547: CALL_OW 70
4551: ST_TO_ADDR
// end ;
4552: LD_VAR 0 3
4556: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4557: LD_INT 0
4559: PPUSH
4560: PPUSH
4561: PPUSH
4562: PPUSH
// result := false ;
4563: LD_ADDR_VAR 0 2
4567: PUSH
4568: LD_INT 0
4570: ST_TO_ADDR
// side := GetSide ( unit ) ;
4571: LD_ADDR_VAR 0 3
4575: PUSH
4576: LD_VAR 0 1
4580: PPUSH
4581: CALL_OW 255
4585: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4586: LD_ADDR_VAR 0 4
4590: PUSH
4591: LD_VAR 0 1
4595: PPUSH
4596: CALL_OW 248
4600: ST_TO_ADDR
// case nat of 1 :
4601: LD_VAR 0 4
4605: PUSH
4606: LD_INT 1
4608: DOUBLE
4609: EQUAL
4610: IFTRUE 4614
4612: GO 4625
4614: POP
// tech := tech_lassight ; 2 :
4615: LD_ADDR_VAR 0 5
4619: PUSH
4620: LD_INT 12
4622: ST_TO_ADDR
4623: GO 4664
4625: LD_INT 2
4627: DOUBLE
4628: EQUAL
4629: IFTRUE 4633
4631: GO 4644
4633: POP
// tech := tech_mortar ; 3 :
4634: LD_ADDR_VAR 0 5
4638: PUSH
4639: LD_INT 41
4641: ST_TO_ADDR
4642: GO 4664
4644: LD_INT 3
4646: DOUBLE
4647: EQUAL
4648: IFTRUE 4652
4650: GO 4663
4652: POP
// tech := tech_bazooka ; end ;
4653: LD_ADDR_VAR 0 5
4657: PUSH
4658: LD_INT 44
4660: ST_TO_ADDR
4661: GO 4664
4663: POP
// if Researched ( side , tech ) then
4664: LD_VAR 0 3
4668: PPUSH
4669: LD_VAR 0 5
4673: PPUSH
4674: CALL_OW 325
4678: IFFALSE 4705
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4680: LD_ADDR_VAR 0 2
4684: PUSH
4685: LD_INT 5
4687: PUSH
4688: LD_INT 8
4690: PUSH
4691: LD_INT 9
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: LIST
4698: PUSH
4699: LD_VAR 0 4
4703: ARRAY
4704: ST_TO_ADDR
// end ;
4705: LD_VAR 0 2
4709: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4710: LD_INT 0
4712: PPUSH
4713: PPUSH
4714: PPUSH
// if not mines then
4715: LD_VAR 0 2
4719: NOT
4720: IFFALSE 4724
// exit ;
4722: GO 4868
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4724: LD_ADDR_VAR 0 5
4728: PUSH
4729: LD_INT 81
4731: PUSH
4732: LD_VAR 0 1
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PUSH
4741: LD_INT 3
4743: PUSH
4744: LD_INT 21
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PPUSH
4762: CALL_OW 69
4766: ST_TO_ADDR
// for i in mines do
4767: LD_ADDR_VAR 0 4
4771: PUSH
4772: LD_VAR 0 2
4776: PUSH
4777: FOR_IN
4778: IFFALSE 4866
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4780: LD_VAR 0 4
4784: PUSH
4785: LD_INT 1
4787: ARRAY
4788: PPUSH
4789: LD_VAR 0 4
4793: PUSH
4794: LD_INT 2
4796: ARRAY
4797: PPUSH
4798: CALL_OW 458
4802: NOT
4803: IFFALSE 4807
// continue ;
4805: GO 4777
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4807: LD_VAR 0 4
4811: PUSH
4812: LD_INT 1
4814: ARRAY
4815: PPUSH
4816: LD_VAR 0 4
4820: PUSH
4821: LD_INT 2
4823: ARRAY
4824: PPUSH
4825: CALL_OW 428
4829: PUSH
4830: LD_VAR 0 5
4834: IN
4835: IFFALSE 4864
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4837: LD_VAR 0 4
4841: PUSH
4842: LD_INT 1
4844: ARRAY
4845: PPUSH
4846: LD_VAR 0 4
4850: PUSH
4851: LD_INT 2
4853: ARRAY
4854: PPUSH
4855: LD_VAR 0 1
4859: PPUSH
4860: CALL_OW 456
// end ;
4864: GO 4777
4866: POP
4867: POP
// end ;
4868: LD_VAR 0 3
4872: RET
// export function Count ( array ) ; begin
4873: LD_INT 0
4875: PPUSH
// result := array + 0 ;
4876: LD_ADDR_VAR 0 2
4880: PUSH
4881: LD_VAR 0 1
4885: PUSH
4886: LD_INT 0
4888: PLUS
4889: ST_TO_ADDR
// end ;
4890: LD_VAR 0 2
4894: RET
// export function IsEmpty ( building ) ; begin
4895: LD_INT 0
4897: PPUSH
// if not building then
4898: LD_VAR 0 1
4902: NOT
4903: IFFALSE 4907
// exit ;
4905: GO 4950
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4907: LD_ADDR_VAR 0 2
4911: PUSH
4912: LD_VAR 0 1
4916: PUSH
4917: LD_INT 22
4919: PUSH
4920: LD_VAR 0 1
4924: PPUSH
4925: CALL_OW 255
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: LD_INT 58
4936: PUSH
4937: EMPTY
4938: LIST
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PPUSH
4944: CALL_OW 69
4948: IN
4949: ST_TO_ADDR
// end ;
4950: LD_VAR 0 2
4954: RET
// export function IsNotFull ( building ) ; var places ; begin
4955: LD_INT 0
4957: PPUSH
4958: PPUSH
// if not building then
4959: LD_VAR 0 1
4963: NOT
4964: IFFALSE 4968
// exit ;
4966: GO 4996
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
4968: LD_ADDR_VAR 0 2
4972: PUSH
4973: LD_VAR 0 1
4977: PPUSH
4978: LD_INT 3
4980: PUSH
4981: LD_INT 62
4983: PUSH
4984: EMPTY
4985: LIST
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PPUSH
4991: CALL_OW 72
4995: ST_TO_ADDR
// end ;
4996: LD_VAR 0 2
5000: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5001: LD_INT 0
5003: PPUSH
5004: PPUSH
5005: PPUSH
5006: PPUSH
// tmp := [ ] ;
5007: LD_ADDR_VAR 0 3
5011: PUSH
5012: EMPTY
5013: ST_TO_ADDR
// list := [ ] ;
5014: LD_ADDR_VAR 0 5
5018: PUSH
5019: EMPTY
5020: ST_TO_ADDR
// for i = 16 to 25 do
5021: LD_ADDR_VAR 0 4
5025: PUSH
5026: DOUBLE
5027: LD_INT 16
5029: DEC
5030: ST_TO_ADDR
5031: LD_INT 25
5033: PUSH
5034: FOR_TO
5035: IFFALSE 5108
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5037: LD_ADDR_VAR 0 3
5041: PUSH
5042: LD_VAR 0 3
5046: PUSH
5047: LD_INT 22
5049: PUSH
5050: LD_VAR 0 1
5054: PPUSH
5055: CALL_OW 255
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: PUSH
5064: LD_INT 91
5066: PUSH
5067: LD_VAR 0 1
5071: PUSH
5072: LD_INT 6
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 30
5082: PUSH
5083: LD_VAR 0 4
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: LIST
5096: PUSH
5097: EMPTY
5098: LIST
5099: PPUSH
5100: CALL_OW 69
5104: ADD
5105: ST_TO_ADDR
5106: GO 5034
5108: POP
5109: POP
// for i = 1 to tmp do
5110: LD_ADDR_VAR 0 4
5114: PUSH
5115: DOUBLE
5116: LD_INT 1
5118: DEC
5119: ST_TO_ADDR
5120: LD_VAR 0 3
5124: PUSH
5125: FOR_TO
5126: IFFALSE 5214
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5128: LD_ADDR_VAR 0 5
5132: PUSH
5133: LD_VAR 0 5
5137: PUSH
5138: LD_VAR 0 3
5142: PUSH
5143: LD_VAR 0 4
5147: ARRAY
5148: PPUSH
5149: CALL_OW 266
5153: PUSH
5154: LD_VAR 0 3
5158: PUSH
5159: LD_VAR 0 4
5163: ARRAY
5164: PPUSH
5165: CALL_OW 250
5169: PUSH
5170: LD_VAR 0 3
5174: PUSH
5175: LD_VAR 0 4
5179: ARRAY
5180: PPUSH
5181: CALL_OW 251
5185: PUSH
5186: LD_VAR 0 3
5190: PUSH
5191: LD_VAR 0 4
5195: ARRAY
5196: PPUSH
5197: CALL_OW 254
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: PUSH
5208: EMPTY
5209: LIST
5210: ADD
5211: ST_TO_ADDR
5212: GO 5125
5214: POP
5215: POP
// result := list ;
5216: LD_ADDR_VAR 0 2
5220: PUSH
5221: LD_VAR 0 5
5225: ST_TO_ADDR
// end ;
5226: LD_VAR 0 2
5230: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5231: LD_INT 0
5233: PPUSH
5234: PPUSH
5235: PPUSH
5236: PPUSH
5237: PPUSH
5238: PPUSH
5239: PPUSH
// if not factory then
5240: LD_VAR 0 1
5244: NOT
5245: IFFALSE 5249
// exit ;
5247: GO 5842
// if control = control_apeman then
5249: LD_VAR 0 4
5253: PUSH
5254: LD_INT 5
5256: EQUAL
5257: IFFALSE 5366
// begin tmp := UnitsInside ( factory ) ;
5259: LD_ADDR_VAR 0 8
5263: PUSH
5264: LD_VAR 0 1
5268: PPUSH
5269: CALL_OW 313
5273: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5274: LD_VAR 0 8
5278: PPUSH
5279: LD_INT 25
5281: PUSH
5282: LD_INT 12
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: PPUSH
5289: CALL_OW 72
5293: NOT
5294: IFFALSE 5304
// control := control_manual ;
5296: LD_ADDR_VAR 0 4
5300: PUSH
5301: LD_INT 1
5303: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5304: LD_ADDR_VAR 0 8
5308: PUSH
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL 5001 0 1
5318: ST_TO_ADDR
// if tmp then
5319: LD_VAR 0 8
5323: IFFALSE 5366
// begin for i in tmp do
5325: LD_ADDR_VAR 0 7
5329: PUSH
5330: LD_VAR 0 8
5334: PUSH
5335: FOR_IN
5336: IFFALSE 5364
// if i [ 1 ] = b_ext_radio then
5338: LD_VAR 0 7
5342: PUSH
5343: LD_INT 1
5345: ARRAY
5346: PUSH
5347: LD_INT 22
5349: EQUAL
5350: IFFALSE 5362
// begin control := control_remote ;
5352: LD_ADDR_VAR 0 4
5356: PUSH
5357: LD_INT 2
5359: ST_TO_ADDR
// break ;
5360: GO 5364
// end ;
5362: GO 5335
5364: POP
5365: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5366: LD_VAR 0 1
5370: PPUSH
5371: LD_VAR 0 2
5375: PPUSH
5376: LD_VAR 0 3
5380: PPUSH
5381: LD_VAR 0 4
5385: PPUSH
5386: LD_VAR 0 5
5390: PPUSH
5391: CALL_OW 448
5395: IFFALSE 5430
// begin result := [ chassis , engine , control , weapon ] ;
5397: LD_ADDR_VAR 0 6
5401: PUSH
5402: LD_VAR 0 2
5406: PUSH
5407: LD_VAR 0 3
5411: PUSH
5412: LD_VAR 0 4
5416: PUSH
5417: LD_VAR 0 5
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: ST_TO_ADDR
// exit ;
5428: GO 5842
// end ; _chassis := AvailableChassisList ( factory ) ;
5430: LD_ADDR_VAR 0 9
5434: PUSH
5435: LD_VAR 0 1
5439: PPUSH
5440: CALL_OW 475
5444: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5445: LD_ADDR_VAR 0 11
5449: PUSH
5450: LD_VAR 0 1
5454: PPUSH
5455: CALL_OW 476
5459: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5460: LD_ADDR_VAR 0 12
5464: PUSH
5465: LD_VAR 0 1
5469: PPUSH
5470: CALL_OW 477
5474: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5475: LD_ADDR_VAR 0 10
5479: PUSH
5480: LD_VAR 0 1
5484: PPUSH
5485: CALL_OW 478
5489: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5490: LD_VAR 0 9
5494: NOT
5495: PUSH
5496: LD_VAR 0 11
5500: NOT
5501: OR
5502: PUSH
5503: LD_VAR 0 12
5507: NOT
5508: OR
5509: PUSH
5510: LD_VAR 0 10
5514: NOT
5515: OR
5516: IFFALSE 5551
// begin result := [ chassis , engine , control , weapon ] ;
5518: LD_ADDR_VAR 0 6
5522: PUSH
5523: LD_VAR 0 2
5527: PUSH
5528: LD_VAR 0 3
5532: PUSH
5533: LD_VAR 0 4
5537: PUSH
5538: LD_VAR 0 5
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: ST_TO_ADDR
// exit ;
5549: GO 5842
// end ; if not chassis in _chassis then
5551: LD_VAR 0 2
5555: PUSH
5556: LD_VAR 0 9
5560: IN
5561: NOT
5562: IFFALSE 5588
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5564: LD_ADDR_VAR 0 2
5568: PUSH
5569: LD_VAR 0 9
5573: PUSH
5574: LD_INT 1
5576: PPUSH
5577: LD_VAR 0 9
5581: PPUSH
5582: CALL_OW 12
5586: ARRAY
5587: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5588: LD_VAR 0 2
5592: PPUSH
5593: LD_VAR 0 3
5597: PPUSH
5598: CALL 5847 0 2
5602: NOT
5603: IFFALSE 5662
// repeat engine := _engine [ 1 ] ;
5605: LD_ADDR_VAR 0 3
5609: PUSH
5610: LD_VAR 0 11
5614: PUSH
5615: LD_INT 1
5617: ARRAY
5618: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5619: LD_ADDR_VAR 0 11
5623: PUSH
5624: LD_VAR 0 11
5628: PPUSH
5629: LD_INT 1
5631: PPUSH
5632: CALL_OW 3
5636: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5637: LD_VAR 0 2
5641: PPUSH
5642: LD_VAR 0 3
5646: PPUSH
5647: CALL 5847 0 2
5651: PUSH
5652: LD_VAR 0 11
5656: PUSH
5657: EMPTY
5658: EQUAL
5659: OR
5660: IFFALSE 5605
// if not control in _control then
5662: LD_VAR 0 4
5666: PUSH
5667: LD_VAR 0 12
5671: IN
5672: NOT
5673: IFFALSE 5699
// control := _control [ rand ( 1 , _control ) ] ;
5675: LD_ADDR_VAR 0 4
5679: PUSH
5680: LD_VAR 0 12
5684: PUSH
5685: LD_INT 1
5687: PPUSH
5688: LD_VAR 0 12
5692: PPUSH
5693: CALL_OW 12
5697: ARRAY
5698: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5699: LD_VAR 0 2
5703: PPUSH
5704: LD_VAR 0 5
5708: PPUSH
5709: CALL 6067 0 2
5713: NOT
5714: IFFALSE 5773
// repeat weapon := _weapon [ 1 ] ;
5716: LD_ADDR_VAR 0 5
5720: PUSH
5721: LD_VAR 0 10
5725: PUSH
5726: LD_INT 1
5728: ARRAY
5729: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5730: LD_ADDR_VAR 0 10
5734: PUSH
5735: LD_VAR 0 10
5739: PPUSH
5740: LD_INT 1
5742: PPUSH
5743: CALL_OW 3
5747: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5748: LD_VAR 0 2
5752: PPUSH
5753: LD_VAR 0 5
5757: PPUSH
5758: CALL 6067 0 2
5762: PUSH
5763: LD_VAR 0 10
5767: PUSH
5768: EMPTY
5769: EQUAL
5770: OR
5771: IFFALSE 5716
// result := [ ] ;
5773: LD_ADDR_VAR 0 6
5777: PUSH
5778: EMPTY
5779: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5780: LD_VAR 0 1
5784: PPUSH
5785: LD_VAR 0 2
5789: PPUSH
5790: LD_VAR 0 3
5794: PPUSH
5795: LD_VAR 0 4
5799: PPUSH
5800: LD_VAR 0 5
5804: PPUSH
5805: CALL_OW 448
5809: IFFALSE 5842
// result := [ chassis , engine , control , weapon ] ;
5811: LD_ADDR_VAR 0 6
5815: PUSH
5816: LD_VAR 0 2
5820: PUSH
5821: LD_VAR 0 3
5825: PUSH
5826: LD_VAR 0 4
5830: PUSH
5831: LD_VAR 0 5
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: ST_TO_ADDR
// end ;
5842: LD_VAR 0 6
5846: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5847: LD_INT 0
5849: PPUSH
// if not chassis or not engine then
5850: LD_VAR 0 1
5854: NOT
5855: PUSH
5856: LD_VAR 0 2
5860: NOT
5861: OR
5862: IFFALSE 5866
// exit ;
5864: GO 6062
// case engine of engine_solar :
5866: LD_VAR 0 2
5870: PUSH
5871: LD_INT 2
5873: DOUBLE
5874: EQUAL
5875: IFTRUE 5879
5877: GO 5917
5879: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5880: LD_ADDR_VAR 0 3
5884: PUSH
5885: LD_INT 11
5887: PUSH
5888: LD_INT 12
5890: PUSH
5891: LD_INT 13
5893: PUSH
5894: LD_INT 14
5896: PUSH
5897: LD_INT 1
5899: PUSH
5900: LD_INT 2
5902: PUSH
5903: LD_INT 3
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: ST_TO_ADDR
5915: GO 6046
5917: LD_INT 1
5919: DOUBLE
5920: EQUAL
5921: IFTRUE 5925
5923: GO 5987
5925: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5926: LD_ADDR_VAR 0 3
5930: PUSH
5931: LD_INT 11
5933: PUSH
5934: LD_INT 12
5936: PUSH
5937: LD_INT 13
5939: PUSH
5940: LD_INT 14
5942: PUSH
5943: LD_INT 1
5945: PUSH
5946: LD_INT 2
5948: PUSH
5949: LD_INT 3
5951: PUSH
5952: LD_INT 4
5954: PUSH
5955: LD_INT 5
5957: PUSH
5958: LD_INT 21
5960: PUSH
5961: LD_INT 23
5963: PUSH
5964: LD_INT 22
5966: PUSH
5967: LD_INT 24
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: ST_TO_ADDR
5985: GO 6046
5987: LD_INT 3
5989: DOUBLE
5990: EQUAL
5991: IFTRUE 5995
5993: GO 6045
5995: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5996: LD_ADDR_VAR 0 3
6000: PUSH
6001: LD_INT 13
6003: PUSH
6004: LD_INT 14
6006: PUSH
6007: LD_INT 2
6009: PUSH
6010: LD_INT 3
6012: PUSH
6013: LD_INT 4
6015: PUSH
6016: LD_INT 5
6018: PUSH
6019: LD_INT 21
6021: PUSH
6022: LD_INT 22
6024: PUSH
6025: LD_INT 23
6027: PUSH
6028: LD_INT 24
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: ST_TO_ADDR
6043: GO 6046
6045: POP
// result := ( chassis in result ) ;
6046: LD_ADDR_VAR 0 3
6050: PUSH
6051: LD_VAR 0 1
6055: PUSH
6056: LD_VAR 0 3
6060: IN
6061: ST_TO_ADDR
// end ;
6062: LD_VAR 0 3
6066: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6067: LD_INT 0
6069: PPUSH
// if not chassis or not weapon then
6070: LD_VAR 0 1
6074: NOT
6075: PUSH
6076: LD_VAR 0 2
6080: NOT
6081: OR
6082: IFFALSE 6086
// exit ;
6084: GO 7146
// case weapon of us_machine_gun :
6086: LD_VAR 0 2
6090: PUSH
6091: LD_INT 2
6093: DOUBLE
6094: EQUAL
6095: IFTRUE 6099
6097: GO 6129
6099: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6100: LD_ADDR_VAR 0 3
6104: PUSH
6105: LD_INT 1
6107: PUSH
6108: LD_INT 2
6110: PUSH
6111: LD_INT 3
6113: PUSH
6114: LD_INT 4
6116: PUSH
6117: LD_INT 5
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: ST_TO_ADDR
6127: GO 7130
6129: LD_INT 3
6131: DOUBLE
6132: EQUAL
6133: IFTRUE 6137
6135: GO 6167
6137: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6138: LD_ADDR_VAR 0 3
6142: PUSH
6143: LD_INT 1
6145: PUSH
6146: LD_INT 2
6148: PUSH
6149: LD_INT 3
6151: PUSH
6152: LD_INT 4
6154: PUSH
6155: LD_INT 5
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: LIST
6164: ST_TO_ADDR
6165: GO 7130
6167: LD_INT 11
6169: DOUBLE
6170: EQUAL
6171: IFTRUE 6175
6173: GO 6205
6175: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6176: LD_ADDR_VAR 0 3
6180: PUSH
6181: LD_INT 1
6183: PUSH
6184: LD_INT 2
6186: PUSH
6187: LD_INT 3
6189: PUSH
6190: LD_INT 4
6192: PUSH
6193: LD_INT 5
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: ST_TO_ADDR
6203: GO 7130
6205: LD_INT 4
6207: DOUBLE
6208: EQUAL
6209: IFTRUE 6213
6211: GO 6239
6213: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6214: LD_ADDR_VAR 0 3
6218: PUSH
6219: LD_INT 2
6221: PUSH
6222: LD_INT 3
6224: PUSH
6225: LD_INT 4
6227: PUSH
6228: LD_INT 5
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: ST_TO_ADDR
6237: GO 7130
6239: LD_INT 5
6241: DOUBLE
6242: EQUAL
6243: IFTRUE 6247
6245: GO 6273
6247: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6248: LD_ADDR_VAR 0 3
6252: PUSH
6253: LD_INT 2
6255: PUSH
6256: LD_INT 3
6258: PUSH
6259: LD_INT 4
6261: PUSH
6262: LD_INT 5
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: ST_TO_ADDR
6271: GO 7130
6273: LD_INT 9
6275: DOUBLE
6276: EQUAL
6277: IFTRUE 6281
6279: GO 6307
6281: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6282: LD_ADDR_VAR 0 3
6286: PUSH
6287: LD_INT 2
6289: PUSH
6290: LD_INT 3
6292: PUSH
6293: LD_INT 4
6295: PUSH
6296: LD_INT 5
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: ST_TO_ADDR
6305: GO 7130
6307: LD_INT 7
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6316: LD_ADDR_VAR 0 3
6320: PUSH
6321: LD_INT 2
6323: PUSH
6324: LD_INT 3
6326: PUSH
6327: LD_INT 4
6329: PUSH
6330: LD_INT 5
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: ST_TO_ADDR
6339: GO 7130
6341: LD_INT 12
6343: DOUBLE
6344: EQUAL
6345: IFTRUE 6349
6347: GO 6375
6349: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6350: LD_ADDR_VAR 0 3
6354: PUSH
6355: LD_INT 2
6357: PUSH
6358: LD_INT 3
6360: PUSH
6361: LD_INT 4
6363: PUSH
6364: LD_INT 5
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: ST_TO_ADDR
6373: GO 7130
6375: LD_INT 13
6377: DOUBLE
6378: EQUAL
6379: IFTRUE 6383
6381: GO 6409
6383: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6384: LD_ADDR_VAR 0 3
6388: PUSH
6389: LD_INT 2
6391: PUSH
6392: LD_INT 3
6394: PUSH
6395: LD_INT 4
6397: PUSH
6398: LD_INT 5
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: ST_TO_ADDR
6407: GO 7130
6409: LD_INT 14
6411: DOUBLE
6412: EQUAL
6413: IFTRUE 6417
6415: GO 6435
6417: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6418: LD_ADDR_VAR 0 3
6422: PUSH
6423: LD_INT 4
6425: PUSH
6426: LD_INT 5
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: ST_TO_ADDR
6433: GO 7130
6435: LD_INT 6
6437: DOUBLE
6438: EQUAL
6439: IFTRUE 6443
6441: GO 6461
6443: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6444: LD_ADDR_VAR 0 3
6448: PUSH
6449: LD_INT 4
6451: PUSH
6452: LD_INT 5
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: ST_TO_ADDR
6459: GO 7130
6461: LD_INT 10
6463: DOUBLE
6464: EQUAL
6465: IFTRUE 6469
6467: GO 6487
6469: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6470: LD_ADDR_VAR 0 3
6474: PUSH
6475: LD_INT 4
6477: PUSH
6478: LD_INT 5
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: ST_TO_ADDR
6485: GO 7130
6487: LD_INT 22
6489: DOUBLE
6490: EQUAL
6491: IFTRUE 6495
6493: GO 6521
6495: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: LD_INT 11
6503: PUSH
6504: LD_INT 12
6506: PUSH
6507: LD_INT 13
6509: PUSH
6510: LD_INT 14
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: ST_TO_ADDR
6519: GO 7130
6521: LD_INT 23
6523: DOUBLE
6524: EQUAL
6525: IFTRUE 6529
6527: GO 6555
6529: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6530: LD_ADDR_VAR 0 3
6534: PUSH
6535: LD_INT 11
6537: PUSH
6538: LD_INT 12
6540: PUSH
6541: LD_INT 13
6543: PUSH
6544: LD_INT 14
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: ST_TO_ADDR
6553: GO 7130
6555: LD_INT 24
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6589
6563: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6564: LD_ADDR_VAR 0 3
6568: PUSH
6569: LD_INT 11
6571: PUSH
6572: LD_INT 12
6574: PUSH
6575: LD_INT 13
6577: PUSH
6578: LD_INT 14
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: ST_TO_ADDR
6587: GO 7130
6589: LD_INT 30
6591: DOUBLE
6592: EQUAL
6593: IFTRUE 6597
6595: GO 6623
6597: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6598: LD_ADDR_VAR 0 3
6602: PUSH
6603: LD_INT 11
6605: PUSH
6606: LD_INT 12
6608: PUSH
6609: LD_INT 13
6611: PUSH
6612: LD_INT 14
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: ST_TO_ADDR
6621: GO 7130
6623: LD_INT 25
6625: DOUBLE
6626: EQUAL
6627: IFTRUE 6631
6629: GO 6649
6631: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6632: LD_ADDR_VAR 0 3
6636: PUSH
6637: LD_INT 13
6639: PUSH
6640: LD_INT 14
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: ST_TO_ADDR
6647: GO 7130
6649: LD_INT 27
6651: DOUBLE
6652: EQUAL
6653: IFTRUE 6657
6655: GO 6675
6657: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6658: LD_ADDR_VAR 0 3
6662: PUSH
6663: LD_INT 13
6665: PUSH
6666: LD_INT 14
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: ST_TO_ADDR
6673: GO 7130
6675: LD_INT 92
6677: DOUBLE
6678: EQUAL
6679: IFTRUE 6683
6681: GO 6709
6683: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6684: LD_ADDR_VAR 0 3
6688: PUSH
6689: LD_INT 11
6691: PUSH
6692: LD_INT 12
6694: PUSH
6695: LD_INT 13
6697: PUSH
6698: LD_INT 14
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: ST_TO_ADDR
6707: GO 7130
6709: LD_INT 28
6711: DOUBLE
6712: EQUAL
6713: IFTRUE 6717
6715: GO 6735
6717: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6718: LD_ADDR_VAR 0 3
6722: PUSH
6723: LD_INT 13
6725: PUSH
6726: LD_INT 14
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: ST_TO_ADDR
6733: GO 7130
6735: LD_INT 29
6737: DOUBLE
6738: EQUAL
6739: IFTRUE 6743
6741: GO 6761
6743: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6744: LD_ADDR_VAR 0 3
6748: PUSH
6749: LD_INT 13
6751: PUSH
6752: LD_INT 14
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: ST_TO_ADDR
6759: GO 7130
6761: LD_INT 31
6763: DOUBLE
6764: EQUAL
6765: IFTRUE 6769
6767: GO 6787
6769: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6770: LD_ADDR_VAR 0 3
6774: PUSH
6775: LD_INT 13
6777: PUSH
6778: LD_INT 14
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: ST_TO_ADDR
6785: GO 7130
6787: LD_INT 26
6789: DOUBLE
6790: EQUAL
6791: IFTRUE 6795
6793: GO 6813
6795: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6796: LD_ADDR_VAR 0 3
6800: PUSH
6801: LD_INT 13
6803: PUSH
6804: LD_INT 14
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: ST_TO_ADDR
6811: GO 7130
6813: LD_INT 42
6815: DOUBLE
6816: EQUAL
6817: IFTRUE 6821
6819: GO 6847
6821: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6822: LD_ADDR_VAR 0 3
6826: PUSH
6827: LD_INT 21
6829: PUSH
6830: LD_INT 22
6832: PUSH
6833: LD_INT 23
6835: PUSH
6836: LD_INT 24
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: ST_TO_ADDR
6845: GO 7130
6847: LD_INT 43
6849: DOUBLE
6850: EQUAL
6851: IFTRUE 6855
6853: GO 6881
6855: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6856: LD_ADDR_VAR 0 3
6860: PUSH
6861: LD_INT 21
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_INT 23
6869: PUSH
6870: LD_INT 24
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: ST_TO_ADDR
6879: GO 7130
6881: LD_INT 44
6883: DOUBLE
6884: EQUAL
6885: IFTRUE 6889
6887: GO 6915
6889: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_INT 21
6897: PUSH
6898: LD_INT 22
6900: PUSH
6901: LD_INT 23
6903: PUSH
6904: LD_INT 24
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: ST_TO_ADDR
6913: GO 7130
6915: LD_INT 45
6917: DOUBLE
6918: EQUAL
6919: IFTRUE 6923
6921: GO 6949
6923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6924: LD_ADDR_VAR 0 3
6928: PUSH
6929: LD_INT 21
6931: PUSH
6932: LD_INT 22
6934: PUSH
6935: LD_INT 23
6937: PUSH
6938: LD_INT 24
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: ST_TO_ADDR
6947: GO 7130
6949: LD_INT 49
6951: DOUBLE
6952: EQUAL
6953: IFTRUE 6957
6955: GO 6983
6957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6958: LD_ADDR_VAR 0 3
6962: PUSH
6963: LD_INT 21
6965: PUSH
6966: LD_INT 22
6968: PUSH
6969: LD_INT 23
6971: PUSH
6972: LD_INT 24
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: ST_TO_ADDR
6981: GO 7130
6983: LD_INT 51
6985: DOUBLE
6986: EQUAL
6987: IFTRUE 6991
6989: GO 7017
6991: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6992: LD_ADDR_VAR 0 3
6996: PUSH
6997: LD_INT 21
6999: PUSH
7000: LD_INT 22
7002: PUSH
7003: LD_INT 23
7005: PUSH
7006: LD_INT 24
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: ST_TO_ADDR
7015: GO 7130
7017: LD_INT 52
7019: DOUBLE
7020: EQUAL
7021: IFTRUE 7025
7023: GO 7051
7025: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7026: LD_ADDR_VAR 0 3
7030: PUSH
7031: LD_INT 21
7033: PUSH
7034: LD_INT 22
7036: PUSH
7037: LD_INT 23
7039: PUSH
7040: LD_INT 24
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: ST_TO_ADDR
7049: GO 7130
7051: LD_INT 53
7053: DOUBLE
7054: EQUAL
7055: IFTRUE 7059
7057: GO 7077
7059: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7060: LD_ADDR_VAR 0 3
7064: PUSH
7065: LD_INT 23
7067: PUSH
7068: LD_INT 24
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: ST_TO_ADDR
7075: GO 7130
7077: LD_INT 46
7079: DOUBLE
7080: EQUAL
7081: IFTRUE 7085
7083: GO 7103
7085: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7086: LD_ADDR_VAR 0 3
7090: PUSH
7091: LD_INT 23
7093: PUSH
7094: LD_INT 24
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: ST_TO_ADDR
7101: GO 7130
7103: LD_INT 47
7105: DOUBLE
7106: EQUAL
7107: IFTRUE 7111
7109: GO 7129
7111: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7112: LD_ADDR_VAR 0 3
7116: PUSH
7117: LD_INT 23
7119: PUSH
7120: LD_INT 24
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: ST_TO_ADDR
7127: GO 7130
7129: POP
// result := ( chassis in result ) ;
7130: LD_ADDR_VAR 0 3
7134: PUSH
7135: LD_VAR 0 1
7139: PUSH
7140: LD_VAR 0 3
7144: IN
7145: ST_TO_ADDR
// end ;
7146: LD_VAR 0 3
7150: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7151: LD_INT 0
7153: PPUSH
7154: PPUSH
7155: PPUSH
7156: PPUSH
7157: PPUSH
7158: PPUSH
7159: PPUSH
// result := array ;
7160: LD_ADDR_VAR 0 5
7164: PUSH
7165: LD_VAR 0 1
7169: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7170: LD_VAR 0 1
7174: NOT
7175: PUSH
7176: LD_VAR 0 2
7180: NOT
7181: OR
7182: PUSH
7183: LD_VAR 0 3
7187: NOT
7188: OR
7189: PUSH
7190: LD_VAR 0 2
7194: PUSH
7195: LD_VAR 0 1
7199: GREATER
7200: OR
7201: PUSH
7202: LD_VAR 0 3
7206: PUSH
7207: LD_VAR 0 1
7211: GREATER
7212: OR
7213: IFFALSE 7217
// exit ;
7215: GO 7513
// if direction then
7217: LD_VAR 0 4
7221: IFFALSE 7285
// begin d := 1 ;
7223: LD_ADDR_VAR 0 9
7227: PUSH
7228: LD_INT 1
7230: ST_TO_ADDR
// if i_from > i_to then
7231: LD_VAR 0 2
7235: PUSH
7236: LD_VAR 0 3
7240: GREATER
7241: IFFALSE 7267
// length := ( array - i_from ) + i_to else
7243: LD_ADDR_VAR 0 11
7247: PUSH
7248: LD_VAR 0 1
7252: PUSH
7253: LD_VAR 0 2
7257: MINUS
7258: PUSH
7259: LD_VAR 0 3
7263: PLUS
7264: ST_TO_ADDR
7265: GO 7283
// length := i_to - i_from ;
7267: LD_ADDR_VAR 0 11
7271: PUSH
7272: LD_VAR 0 3
7276: PUSH
7277: LD_VAR 0 2
7281: MINUS
7282: ST_TO_ADDR
// end else
7283: GO 7346
// begin d := - 1 ;
7285: LD_ADDR_VAR 0 9
7289: PUSH
7290: LD_INT 1
7292: NEG
7293: ST_TO_ADDR
// if i_from > i_to then
7294: LD_VAR 0 2
7298: PUSH
7299: LD_VAR 0 3
7303: GREATER
7304: IFFALSE 7324
// length := i_from - i_to else
7306: LD_ADDR_VAR 0 11
7310: PUSH
7311: LD_VAR 0 2
7315: PUSH
7316: LD_VAR 0 3
7320: MINUS
7321: ST_TO_ADDR
7322: GO 7346
// length := ( array - i_to ) + i_from ;
7324: LD_ADDR_VAR 0 11
7328: PUSH
7329: LD_VAR 0 1
7333: PUSH
7334: LD_VAR 0 3
7338: MINUS
7339: PUSH
7340: LD_VAR 0 2
7344: PLUS
7345: ST_TO_ADDR
// end ; if not length then
7346: LD_VAR 0 11
7350: NOT
7351: IFFALSE 7355
// exit ;
7353: GO 7513
// tmp := array ;
7355: LD_ADDR_VAR 0 10
7359: PUSH
7360: LD_VAR 0 1
7364: ST_TO_ADDR
// for i = 1 to length do
7365: LD_ADDR_VAR 0 6
7369: PUSH
7370: DOUBLE
7371: LD_INT 1
7373: DEC
7374: ST_TO_ADDR
7375: LD_VAR 0 11
7379: PUSH
7380: FOR_TO
7381: IFFALSE 7501
// begin for j = 1 to array do
7383: LD_ADDR_VAR 0 7
7387: PUSH
7388: DOUBLE
7389: LD_INT 1
7391: DEC
7392: ST_TO_ADDR
7393: LD_VAR 0 1
7397: PUSH
7398: FOR_TO
7399: IFFALSE 7487
// begin k := j + d ;
7401: LD_ADDR_VAR 0 8
7405: PUSH
7406: LD_VAR 0 7
7410: PUSH
7411: LD_VAR 0 9
7415: PLUS
7416: ST_TO_ADDR
// if k > array then
7417: LD_VAR 0 8
7421: PUSH
7422: LD_VAR 0 1
7426: GREATER
7427: IFFALSE 7437
// k := 1 ;
7429: LD_ADDR_VAR 0 8
7433: PUSH
7434: LD_INT 1
7436: ST_TO_ADDR
// if not k then
7437: LD_VAR 0 8
7441: NOT
7442: IFFALSE 7454
// k := array ;
7444: LD_ADDR_VAR 0 8
7448: PUSH
7449: LD_VAR 0 1
7453: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7454: LD_ADDR_VAR 0 10
7458: PUSH
7459: LD_VAR 0 10
7463: PPUSH
7464: LD_VAR 0 8
7468: PPUSH
7469: LD_VAR 0 1
7473: PUSH
7474: LD_VAR 0 7
7478: ARRAY
7479: PPUSH
7480: CALL_OW 1
7484: ST_TO_ADDR
// end ;
7485: GO 7398
7487: POP
7488: POP
// array := tmp ;
7489: LD_ADDR_VAR 0 1
7493: PUSH
7494: LD_VAR 0 10
7498: ST_TO_ADDR
// end ;
7499: GO 7380
7501: POP
7502: POP
// result := array ;
7503: LD_ADDR_VAR 0 5
7507: PUSH
7508: LD_VAR 0 1
7512: ST_TO_ADDR
// end ;
7513: LD_VAR 0 5
7517: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7518: LD_INT 0
7520: PPUSH
7521: PPUSH
// result := 0 ;
7522: LD_ADDR_VAR 0 3
7526: PUSH
7527: LD_INT 0
7529: ST_TO_ADDR
// if not array or not value in array then
7530: LD_VAR 0 1
7534: NOT
7535: PUSH
7536: LD_VAR 0 2
7540: PUSH
7541: LD_VAR 0 1
7545: IN
7546: NOT
7547: OR
7548: IFFALSE 7552
// exit ;
7550: GO 7606
// for i = 1 to array do
7552: LD_ADDR_VAR 0 4
7556: PUSH
7557: DOUBLE
7558: LD_INT 1
7560: DEC
7561: ST_TO_ADDR
7562: LD_VAR 0 1
7566: PUSH
7567: FOR_TO
7568: IFFALSE 7604
// if value = array [ i ] then
7570: LD_VAR 0 2
7574: PUSH
7575: LD_VAR 0 1
7579: PUSH
7580: LD_VAR 0 4
7584: ARRAY
7585: EQUAL
7586: IFFALSE 7602
// begin result := i ;
7588: LD_ADDR_VAR 0 3
7592: PUSH
7593: LD_VAR 0 4
7597: ST_TO_ADDR
// exit ;
7598: POP
7599: POP
7600: GO 7606
// end ;
7602: GO 7567
7604: POP
7605: POP
// end ;
7606: LD_VAR 0 3
7610: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7611: LD_INT 0
7613: PPUSH
// vc_chassis := chassis ;
7614: LD_ADDR_OWVAR 37
7618: PUSH
7619: LD_VAR 0 1
7623: ST_TO_ADDR
// vc_engine := engine ;
7624: LD_ADDR_OWVAR 39
7628: PUSH
7629: LD_VAR 0 2
7633: ST_TO_ADDR
// vc_control := control ;
7634: LD_ADDR_OWVAR 38
7638: PUSH
7639: LD_VAR 0 3
7643: ST_TO_ADDR
// vc_weapon := weapon ;
7644: LD_ADDR_OWVAR 40
7648: PUSH
7649: LD_VAR 0 4
7653: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7654: LD_ADDR_OWVAR 41
7658: PUSH
7659: LD_VAR 0 5
7663: ST_TO_ADDR
// end ;
7664: LD_VAR 0 6
7668: RET
// export function WantPlant ( unit ) ; var task ; begin
7669: LD_INT 0
7671: PPUSH
7672: PPUSH
// result := false ;
7673: LD_ADDR_VAR 0 2
7677: PUSH
7678: LD_INT 0
7680: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7681: LD_ADDR_VAR 0 3
7685: PUSH
7686: LD_VAR 0 1
7690: PPUSH
7691: CALL_OW 437
7695: ST_TO_ADDR
// if task then
7696: LD_VAR 0 3
7700: IFFALSE 7728
// if task [ 1 ] [ 1 ] = p then
7702: LD_VAR 0 3
7706: PUSH
7707: LD_INT 1
7709: ARRAY
7710: PUSH
7711: LD_INT 1
7713: ARRAY
7714: PUSH
7715: LD_STRING p
7717: EQUAL
7718: IFFALSE 7728
// result := true ;
7720: LD_ADDR_VAR 0 2
7724: PUSH
7725: LD_INT 1
7727: ST_TO_ADDR
// end ;
7728: LD_VAR 0 2
7732: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
7738: PPUSH
// if pos < 1 then
7739: LD_VAR 0 2
7743: PUSH
7744: LD_INT 1
7746: LESS
7747: IFFALSE 7751
// exit ;
7749: GO 8054
// if pos = 1 then
7751: LD_VAR 0 2
7755: PUSH
7756: LD_INT 1
7758: EQUAL
7759: IFFALSE 7792
// result := Replace ( arr , pos [ 1 ] , value ) else
7761: LD_ADDR_VAR 0 4
7765: PUSH
7766: LD_VAR 0 1
7770: PPUSH
7771: LD_VAR 0 2
7775: PUSH
7776: LD_INT 1
7778: ARRAY
7779: PPUSH
7780: LD_VAR 0 3
7784: PPUSH
7785: CALL_OW 1
7789: ST_TO_ADDR
7790: GO 8054
// begin tmp := arr ;
7792: LD_ADDR_VAR 0 6
7796: PUSH
7797: LD_VAR 0 1
7801: ST_TO_ADDR
// s_arr := [ tmp ] ;
7802: LD_ADDR_VAR 0 7
7806: PUSH
7807: LD_VAR 0 6
7811: PUSH
7812: EMPTY
7813: LIST
7814: ST_TO_ADDR
// for i = 1 to pos - 1 do
7815: LD_ADDR_VAR 0 5
7819: PUSH
7820: DOUBLE
7821: LD_INT 1
7823: DEC
7824: ST_TO_ADDR
7825: LD_VAR 0 2
7829: PUSH
7830: LD_INT 1
7832: MINUS
7833: PUSH
7834: FOR_TO
7835: IFFALSE 7880
// begin tmp := tmp [ pos [ i ] ] ;
7837: LD_ADDR_VAR 0 6
7841: PUSH
7842: LD_VAR 0 6
7846: PUSH
7847: LD_VAR 0 2
7851: PUSH
7852: LD_VAR 0 5
7856: ARRAY
7857: ARRAY
7858: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7859: LD_ADDR_VAR 0 7
7863: PUSH
7864: LD_VAR 0 7
7868: PUSH
7869: LD_VAR 0 6
7873: PUSH
7874: EMPTY
7875: LIST
7876: ADD
7877: ST_TO_ADDR
// end ;
7878: GO 7834
7880: POP
7881: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7882: LD_ADDR_VAR 0 6
7886: PUSH
7887: LD_VAR 0 6
7891: PPUSH
7892: LD_VAR 0 2
7896: PUSH
7897: LD_VAR 0 2
7901: ARRAY
7902: PPUSH
7903: LD_VAR 0 3
7907: PPUSH
7908: CALL_OW 1
7912: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7913: LD_ADDR_VAR 0 7
7917: PUSH
7918: LD_VAR 0 7
7922: PPUSH
7923: LD_VAR 0 7
7927: PPUSH
7928: LD_VAR 0 6
7932: PPUSH
7933: CALL_OW 1
7937: ST_TO_ADDR
// for i = s_arr downto 2 do
7938: LD_ADDR_VAR 0 5
7942: PUSH
7943: DOUBLE
7944: LD_VAR 0 7
7948: INC
7949: ST_TO_ADDR
7950: LD_INT 2
7952: PUSH
7953: FOR_DOWNTO
7954: IFFALSE 8038
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7956: LD_ADDR_VAR 0 6
7960: PUSH
7961: LD_VAR 0 7
7965: PUSH
7966: LD_VAR 0 5
7970: PUSH
7971: LD_INT 1
7973: MINUS
7974: ARRAY
7975: PPUSH
7976: LD_VAR 0 2
7980: PUSH
7981: LD_VAR 0 5
7985: PUSH
7986: LD_INT 1
7988: MINUS
7989: ARRAY
7990: PPUSH
7991: LD_VAR 0 7
7995: PUSH
7996: LD_VAR 0 5
8000: ARRAY
8001: PPUSH
8002: CALL_OW 1
8006: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8007: LD_ADDR_VAR 0 7
8011: PUSH
8012: LD_VAR 0 7
8016: PPUSH
8017: LD_VAR 0 5
8021: PUSH
8022: LD_INT 1
8024: MINUS
8025: PPUSH
8026: LD_VAR 0 6
8030: PPUSH
8031: CALL_OW 1
8035: ST_TO_ADDR
// end ;
8036: GO 7953
8038: POP
8039: POP
// result := s_arr [ 1 ] ;
8040: LD_ADDR_VAR 0 4
8044: PUSH
8045: LD_VAR 0 7
8049: PUSH
8050: LD_INT 1
8052: ARRAY
8053: ST_TO_ADDR
// end ; end ;
8054: LD_VAR 0 4
8058: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8059: LD_INT 0
8061: PPUSH
8062: PPUSH
// if not list then
8063: LD_VAR 0 1
8067: NOT
8068: IFFALSE 8072
// exit ;
8070: GO 8163
// i := list [ pos1 ] ;
8072: LD_ADDR_VAR 0 5
8076: PUSH
8077: LD_VAR 0 1
8081: PUSH
8082: LD_VAR 0 2
8086: ARRAY
8087: ST_TO_ADDR
// if not i then
8088: LD_VAR 0 5
8092: NOT
8093: IFFALSE 8097
// exit ;
8095: GO 8163
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8097: LD_ADDR_VAR 0 1
8101: PUSH
8102: LD_VAR 0 1
8106: PPUSH
8107: LD_VAR 0 2
8111: PPUSH
8112: LD_VAR 0 1
8116: PUSH
8117: LD_VAR 0 3
8121: ARRAY
8122: PPUSH
8123: CALL_OW 1
8127: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8128: LD_ADDR_VAR 0 1
8132: PUSH
8133: LD_VAR 0 1
8137: PPUSH
8138: LD_VAR 0 3
8142: PPUSH
8143: LD_VAR 0 5
8147: PPUSH
8148: CALL_OW 1
8152: ST_TO_ADDR
// result := list ;
8153: LD_ADDR_VAR 0 4
8157: PUSH
8158: LD_VAR 0 1
8162: ST_TO_ADDR
// end ;
8163: LD_VAR 0 4
8167: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8168: LD_INT 0
8170: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8171: LD_ADDR_VAR 0 5
8175: PUSH
8176: LD_VAR 0 1
8180: PPUSH
8181: CALL_OW 250
8185: PPUSH
8186: LD_VAR 0 1
8190: PPUSH
8191: CALL_OW 251
8195: PPUSH
8196: LD_VAR 0 2
8200: PPUSH
8201: LD_VAR 0 3
8205: PPUSH
8206: LD_VAR 0 4
8210: PPUSH
8211: CALL 8589 0 5
8215: ST_TO_ADDR
// end ;
8216: LD_VAR 0 5
8220: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8221: LD_INT 0
8223: PPUSH
8224: PPUSH
8225: PPUSH
8226: PPUSH
// if not list or not unit then
8227: LD_VAR 0 2
8231: NOT
8232: PUSH
8233: LD_VAR 0 1
8237: NOT
8238: OR
8239: IFFALSE 8243
// exit ;
8241: GO 8584
// result := [ ] ;
8243: LD_ADDR_VAR 0 5
8247: PUSH
8248: EMPTY
8249: ST_TO_ADDR
// for i in list do
8250: LD_ADDR_VAR 0 6
8254: PUSH
8255: LD_VAR 0 2
8259: PUSH
8260: FOR_IN
8261: IFFALSE 8479
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8263: LD_ADDR_VAR 0 8
8267: PUSH
8268: LD_VAR 0 1
8272: PPUSH
8273: LD_VAR 0 6
8277: PUSH
8278: LD_INT 1
8280: ARRAY
8281: PPUSH
8282: LD_VAR 0 6
8286: PUSH
8287: LD_INT 2
8289: ARRAY
8290: PPUSH
8291: CALL_OW 297
8295: ST_TO_ADDR
// if not Count ( result ) then
8296: LD_VAR 0 5
8300: PPUSH
8301: CALL 4873 0 1
8305: NOT
8306: IFFALSE 8339
// begin result := Join ( result , [ i , tmp ] ) ;
8308: LD_ADDR_VAR 0 5
8312: PUSH
8313: LD_VAR 0 5
8317: PPUSH
8318: LD_VAR 0 6
8322: PUSH
8323: LD_VAR 0 8
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PPUSH
8332: CALL 40462 0 2
8336: ST_TO_ADDR
// continue ;
8337: GO 8260
// end ; if result [ result ] [ 2 ] <= tmp then
8339: LD_VAR 0 5
8343: PUSH
8344: LD_VAR 0 5
8348: ARRAY
8349: PUSH
8350: LD_INT 2
8352: ARRAY
8353: PUSH
8354: LD_VAR 0 8
8358: LESSEQUAL
8359: IFFALSE 8392
// result := Join ( result , [ i , tmp ] ) else
8361: LD_ADDR_VAR 0 5
8365: PUSH
8366: LD_VAR 0 5
8370: PPUSH
8371: LD_VAR 0 6
8375: PUSH
8376: LD_VAR 0 8
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: PPUSH
8385: CALL 40462 0 2
8389: ST_TO_ADDR
8390: GO 8477
// begin for j := 1 to Count ( result ) do
8392: LD_ADDR_VAR 0 7
8396: PUSH
8397: DOUBLE
8398: LD_INT 1
8400: DEC
8401: ST_TO_ADDR
8402: LD_VAR 0 5
8406: PPUSH
8407: CALL 4873 0 1
8411: PUSH
8412: FOR_TO
8413: IFFALSE 8475
// begin if tmp < result [ j ] [ 2 ] then
8415: LD_VAR 0 8
8419: PUSH
8420: LD_VAR 0 5
8424: PUSH
8425: LD_VAR 0 7
8429: ARRAY
8430: PUSH
8431: LD_INT 2
8433: ARRAY
8434: LESS
8435: IFFALSE 8473
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8437: LD_ADDR_VAR 0 5
8441: PUSH
8442: LD_VAR 0 5
8446: PPUSH
8447: LD_VAR 0 7
8451: PPUSH
8452: LD_VAR 0 6
8456: PUSH
8457: LD_VAR 0 8
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: PPUSH
8466: CALL_OW 2
8470: ST_TO_ADDR
// break ;
8471: GO 8475
// end ; end ;
8473: GO 8412
8475: POP
8476: POP
// end ; end ;
8477: GO 8260
8479: POP
8480: POP
// if result and not asc then
8481: LD_VAR 0 5
8485: PUSH
8486: LD_VAR 0 3
8490: NOT
8491: AND
8492: IFFALSE 8509
// result := ReverseArray ( result ) ;
8494: LD_ADDR_VAR 0 5
8498: PUSH
8499: LD_VAR 0 5
8503: PPUSH
8504: CALL 35749 0 1
8508: ST_TO_ADDR
// tmp := [ ] ;
8509: LD_ADDR_VAR 0 8
8513: PUSH
8514: EMPTY
8515: ST_TO_ADDR
// if mode then
8516: LD_VAR 0 4
8520: IFFALSE 8584
// begin for i := 1 to result do
8522: LD_ADDR_VAR 0 6
8526: PUSH
8527: DOUBLE
8528: LD_INT 1
8530: DEC
8531: ST_TO_ADDR
8532: LD_VAR 0 5
8536: PUSH
8537: FOR_TO
8538: IFFALSE 8572
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8540: LD_ADDR_VAR 0 8
8544: PUSH
8545: LD_VAR 0 8
8549: PPUSH
8550: LD_VAR 0 5
8554: PUSH
8555: LD_VAR 0 6
8559: ARRAY
8560: PUSH
8561: LD_INT 1
8563: ARRAY
8564: PPUSH
8565: CALL 40462 0 2
8569: ST_TO_ADDR
8570: GO 8537
8572: POP
8573: POP
// result := tmp ;
8574: LD_ADDR_VAR 0 5
8578: PUSH
8579: LD_VAR 0 8
8583: ST_TO_ADDR
// end ; end ;
8584: LD_VAR 0 5
8588: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8589: LD_INT 0
8591: PPUSH
8592: PPUSH
8593: PPUSH
8594: PPUSH
// if not list then
8595: LD_VAR 0 3
8599: NOT
8600: IFFALSE 8604
// exit ;
8602: GO 8992
// result := [ ] ;
8604: LD_ADDR_VAR 0 6
8608: PUSH
8609: EMPTY
8610: ST_TO_ADDR
// for i in list do
8611: LD_ADDR_VAR 0 7
8615: PUSH
8616: LD_VAR 0 3
8620: PUSH
8621: FOR_IN
8622: IFFALSE 8824
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8624: LD_ADDR_VAR 0 9
8628: PUSH
8629: LD_VAR 0 7
8633: PPUSH
8634: LD_VAR 0 1
8638: PPUSH
8639: LD_VAR 0 2
8643: PPUSH
8644: CALL_OW 297
8648: ST_TO_ADDR
// if not result then
8649: LD_VAR 0 6
8653: NOT
8654: IFFALSE 8680
// result := [ [ i , tmp ] ] else
8656: LD_ADDR_VAR 0 6
8660: PUSH
8661: LD_VAR 0 7
8665: PUSH
8666: LD_VAR 0 9
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: EMPTY
8676: LIST
8677: ST_TO_ADDR
8678: GO 8822
// begin if result [ result ] [ 2 ] < tmp then
8680: LD_VAR 0 6
8684: PUSH
8685: LD_VAR 0 6
8689: ARRAY
8690: PUSH
8691: LD_INT 2
8693: ARRAY
8694: PUSH
8695: LD_VAR 0 9
8699: LESS
8700: IFFALSE 8742
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8702: LD_ADDR_VAR 0 6
8706: PUSH
8707: LD_VAR 0 6
8711: PPUSH
8712: LD_VAR 0 6
8716: PUSH
8717: LD_INT 1
8719: PLUS
8720: PPUSH
8721: LD_VAR 0 7
8725: PUSH
8726: LD_VAR 0 9
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PPUSH
8735: CALL_OW 2
8739: ST_TO_ADDR
8740: GO 8822
// for j = 1 to result do
8742: LD_ADDR_VAR 0 8
8746: PUSH
8747: DOUBLE
8748: LD_INT 1
8750: DEC
8751: ST_TO_ADDR
8752: LD_VAR 0 6
8756: PUSH
8757: FOR_TO
8758: IFFALSE 8820
// begin if tmp < result [ j ] [ 2 ] then
8760: LD_VAR 0 9
8764: PUSH
8765: LD_VAR 0 6
8769: PUSH
8770: LD_VAR 0 8
8774: ARRAY
8775: PUSH
8776: LD_INT 2
8778: ARRAY
8779: LESS
8780: IFFALSE 8818
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8782: LD_ADDR_VAR 0 6
8786: PUSH
8787: LD_VAR 0 6
8791: PPUSH
8792: LD_VAR 0 8
8796: PPUSH
8797: LD_VAR 0 7
8801: PUSH
8802: LD_VAR 0 9
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PPUSH
8811: CALL_OW 2
8815: ST_TO_ADDR
// break ;
8816: GO 8820
// end ; end ;
8818: GO 8757
8820: POP
8821: POP
// end ; end ;
8822: GO 8621
8824: POP
8825: POP
// if result and not asc then
8826: LD_VAR 0 6
8830: PUSH
8831: LD_VAR 0 4
8835: NOT
8836: AND
8837: IFFALSE 8912
// begin tmp := result ;
8839: LD_ADDR_VAR 0 9
8843: PUSH
8844: LD_VAR 0 6
8848: ST_TO_ADDR
// for i = tmp downto 1 do
8849: LD_ADDR_VAR 0 7
8853: PUSH
8854: DOUBLE
8855: LD_VAR 0 9
8859: INC
8860: ST_TO_ADDR
8861: LD_INT 1
8863: PUSH
8864: FOR_DOWNTO
8865: IFFALSE 8910
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8867: LD_ADDR_VAR 0 6
8871: PUSH
8872: LD_VAR 0 6
8876: PPUSH
8877: LD_VAR 0 9
8881: PUSH
8882: LD_VAR 0 7
8886: MINUS
8887: PUSH
8888: LD_INT 1
8890: PLUS
8891: PPUSH
8892: LD_VAR 0 9
8896: PUSH
8897: LD_VAR 0 7
8901: ARRAY
8902: PPUSH
8903: CALL_OW 1
8907: ST_TO_ADDR
8908: GO 8864
8910: POP
8911: POP
// end ; tmp := [ ] ;
8912: LD_ADDR_VAR 0 9
8916: PUSH
8917: EMPTY
8918: ST_TO_ADDR
// if mode then
8919: LD_VAR 0 5
8923: IFFALSE 8992
// begin for i = 1 to result do
8925: LD_ADDR_VAR 0 7
8929: PUSH
8930: DOUBLE
8931: LD_INT 1
8933: DEC
8934: ST_TO_ADDR
8935: LD_VAR 0 6
8939: PUSH
8940: FOR_TO
8941: IFFALSE 8980
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8943: LD_ADDR_VAR 0 9
8947: PUSH
8948: LD_VAR 0 9
8952: PPUSH
8953: LD_VAR 0 7
8957: PPUSH
8958: LD_VAR 0 6
8962: PUSH
8963: LD_VAR 0 7
8967: ARRAY
8968: PUSH
8969: LD_INT 1
8971: ARRAY
8972: PPUSH
8973: CALL_OW 1
8977: ST_TO_ADDR
8978: GO 8940
8980: POP
8981: POP
// result := tmp ;
8982: LD_ADDR_VAR 0 6
8986: PUSH
8987: LD_VAR 0 9
8991: ST_TO_ADDR
// end ; end ;
8992: LD_VAR 0 6
8996: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8997: LD_INT 0
8999: PPUSH
9000: PPUSH
9001: PPUSH
9002: PPUSH
9003: PPUSH
9004: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9005: LD_ADDR_VAR 0 5
9009: PUSH
9010: LD_INT 0
9012: PUSH
9013: LD_INT 0
9015: PUSH
9016: LD_INT 0
9018: PUSH
9019: EMPTY
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: ST_TO_ADDR
// if not x or not y then
9027: LD_VAR 0 2
9031: NOT
9032: PUSH
9033: LD_VAR 0 3
9037: NOT
9038: OR
9039: IFFALSE 9043
// exit ;
9041: GO 10693
// if not range then
9043: LD_VAR 0 4
9047: NOT
9048: IFFALSE 9058
// range := 10 ;
9050: LD_ADDR_VAR 0 4
9054: PUSH
9055: LD_INT 10
9057: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9058: LD_ADDR_VAR 0 8
9062: PUSH
9063: LD_INT 81
9065: PUSH
9066: LD_VAR 0 1
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: PUSH
9075: LD_INT 92
9077: PUSH
9078: LD_VAR 0 2
9082: PUSH
9083: LD_VAR 0 3
9087: PUSH
9088: LD_VAR 0 4
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: PUSH
9099: LD_INT 3
9101: PUSH
9102: LD_INT 21
9104: PUSH
9105: LD_INT 3
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: PPUSH
9121: CALL_OW 69
9125: ST_TO_ADDR
// if not tmp then
9126: LD_VAR 0 8
9130: NOT
9131: IFFALSE 9135
// exit ;
9133: GO 10693
// for i in tmp do
9135: LD_ADDR_VAR 0 6
9139: PUSH
9140: LD_VAR 0 8
9144: PUSH
9145: FOR_IN
9146: IFFALSE 10668
// begin points := [ 0 , 0 , 0 ] ;
9148: LD_ADDR_VAR 0 9
9152: PUSH
9153: LD_INT 0
9155: PUSH
9156: LD_INT 0
9158: PUSH
9159: LD_INT 0
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: LIST
9166: ST_TO_ADDR
// bpoints := 1 ;
9167: LD_ADDR_VAR 0 10
9171: PUSH
9172: LD_INT 1
9174: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9175: LD_VAR 0 6
9179: PPUSH
9180: CALL_OW 247
9184: PUSH
9185: LD_INT 1
9187: DOUBLE
9188: EQUAL
9189: IFTRUE 9193
9191: GO 9771
9193: POP
// begin if GetClass ( i ) = 1 then
9194: LD_VAR 0 6
9198: PPUSH
9199: CALL_OW 257
9203: PUSH
9204: LD_INT 1
9206: EQUAL
9207: IFFALSE 9228
// points := [ 10 , 5 , 3 ] ;
9209: LD_ADDR_VAR 0 9
9213: PUSH
9214: LD_INT 10
9216: PUSH
9217: LD_INT 5
9219: PUSH
9220: LD_INT 3
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: LIST
9227: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9228: LD_VAR 0 6
9232: PPUSH
9233: CALL_OW 257
9237: PUSH
9238: LD_INT 2
9240: PUSH
9241: LD_INT 3
9243: PUSH
9244: LD_INT 4
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: LIST
9251: IN
9252: IFFALSE 9273
// points := [ 3 , 2 , 1 ] ;
9254: LD_ADDR_VAR 0 9
9258: PUSH
9259: LD_INT 3
9261: PUSH
9262: LD_INT 2
9264: PUSH
9265: LD_INT 1
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: LIST
9272: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9273: LD_VAR 0 6
9277: PPUSH
9278: CALL_OW 257
9282: PUSH
9283: LD_INT 5
9285: EQUAL
9286: IFFALSE 9307
// points := [ 130 , 5 , 2 ] ;
9288: LD_ADDR_VAR 0 9
9292: PUSH
9293: LD_INT 130
9295: PUSH
9296: LD_INT 5
9298: PUSH
9299: LD_INT 2
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: LIST
9306: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9307: LD_VAR 0 6
9311: PPUSH
9312: CALL_OW 257
9316: PUSH
9317: LD_INT 8
9319: EQUAL
9320: IFFALSE 9341
// points := [ 35 , 35 , 30 ] ;
9322: LD_ADDR_VAR 0 9
9326: PUSH
9327: LD_INT 35
9329: PUSH
9330: LD_INT 35
9332: PUSH
9333: LD_INT 30
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: LIST
9340: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9341: LD_VAR 0 6
9345: PPUSH
9346: CALL_OW 257
9350: PUSH
9351: LD_INT 9
9353: EQUAL
9354: IFFALSE 9375
// points := [ 20 , 55 , 40 ] ;
9356: LD_ADDR_VAR 0 9
9360: PUSH
9361: LD_INT 20
9363: PUSH
9364: LD_INT 55
9366: PUSH
9367: LD_INT 40
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: LIST
9374: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9375: LD_VAR 0 6
9379: PPUSH
9380: CALL_OW 257
9384: PUSH
9385: LD_INT 12
9387: PUSH
9388: LD_INT 16
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: IN
9395: IFFALSE 9416
// points := [ 5 , 3 , 2 ] ;
9397: LD_ADDR_VAR 0 9
9401: PUSH
9402: LD_INT 5
9404: PUSH
9405: LD_INT 3
9407: PUSH
9408: LD_INT 2
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: LIST
9415: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9416: LD_VAR 0 6
9420: PPUSH
9421: CALL_OW 257
9425: PUSH
9426: LD_INT 17
9428: EQUAL
9429: IFFALSE 9450
// points := [ 100 , 50 , 75 ] ;
9431: LD_ADDR_VAR 0 9
9435: PUSH
9436: LD_INT 100
9438: PUSH
9439: LD_INT 50
9441: PUSH
9442: LD_INT 75
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9450: LD_VAR 0 6
9454: PPUSH
9455: CALL_OW 257
9459: PUSH
9460: LD_INT 15
9462: EQUAL
9463: IFFALSE 9484
// points := [ 10 , 5 , 3 ] ;
9465: LD_ADDR_VAR 0 9
9469: PUSH
9470: LD_INT 10
9472: PUSH
9473: LD_INT 5
9475: PUSH
9476: LD_INT 3
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: LIST
9483: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9484: LD_VAR 0 6
9488: PPUSH
9489: CALL_OW 257
9493: PUSH
9494: LD_INT 14
9496: EQUAL
9497: IFFALSE 9518
// points := [ 10 , 0 , 0 ] ;
9499: LD_ADDR_VAR 0 9
9503: PUSH
9504: LD_INT 10
9506: PUSH
9507: LD_INT 0
9509: PUSH
9510: LD_INT 0
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: LIST
9517: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9518: LD_VAR 0 6
9522: PPUSH
9523: CALL_OW 257
9527: PUSH
9528: LD_INT 11
9530: EQUAL
9531: IFFALSE 9552
// points := [ 30 , 10 , 5 ] ;
9533: LD_ADDR_VAR 0 9
9537: PUSH
9538: LD_INT 30
9540: PUSH
9541: LD_INT 10
9543: PUSH
9544: LD_INT 5
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: LIST
9551: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9552: LD_VAR 0 1
9556: PPUSH
9557: LD_INT 5
9559: PPUSH
9560: CALL_OW 321
9564: PUSH
9565: LD_INT 2
9567: EQUAL
9568: IFFALSE 9585
// bpoints := bpoints * 1.8 ;
9570: LD_ADDR_VAR 0 10
9574: PUSH
9575: LD_VAR 0 10
9579: PUSH
9580: LD_REAL  1.80000000000000E+0000
9583: MUL
9584: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9585: LD_VAR 0 6
9589: PPUSH
9590: CALL_OW 257
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: LD_INT 2
9600: PUSH
9601: LD_INT 3
9603: PUSH
9604: LD_INT 4
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: IN
9613: PUSH
9614: LD_VAR 0 1
9618: PPUSH
9619: LD_INT 51
9621: PPUSH
9622: CALL_OW 321
9626: PUSH
9627: LD_INT 2
9629: EQUAL
9630: AND
9631: IFFALSE 9648
// bpoints := bpoints * 1.2 ;
9633: LD_ADDR_VAR 0 10
9637: PUSH
9638: LD_VAR 0 10
9642: PUSH
9643: LD_REAL  1.20000000000000E+0000
9646: MUL
9647: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9648: LD_VAR 0 6
9652: PPUSH
9653: CALL_OW 257
9657: PUSH
9658: LD_INT 5
9660: PUSH
9661: LD_INT 7
9663: PUSH
9664: LD_INT 9
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: LIST
9671: IN
9672: PUSH
9673: LD_VAR 0 1
9677: PPUSH
9678: LD_INT 52
9680: PPUSH
9681: CALL_OW 321
9685: PUSH
9686: LD_INT 2
9688: EQUAL
9689: AND
9690: IFFALSE 9707
// bpoints := bpoints * 1.5 ;
9692: LD_ADDR_VAR 0 10
9696: PUSH
9697: LD_VAR 0 10
9701: PUSH
9702: LD_REAL  1.50000000000000E+0000
9705: MUL
9706: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9707: LD_VAR 0 1
9711: PPUSH
9712: LD_INT 66
9714: PPUSH
9715: CALL_OW 321
9719: PUSH
9720: LD_INT 2
9722: EQUAL
9723: IFFALSE 9740
// bpoints := bpoints * 1.1 ;
9725: LD_ADDR_VAR 0 10
9729: PUSH
9730: LD_VAR 0 10
9734: PUSH
9735: LD_REAL  1.10000000000000E+0000
9738: MUL
9739: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9740: LD_ADDR_VAR 0 10
9744: PUSH
9745: LD_VAR 0 10
9749: PUSH
9750: LD_VAR 0 6
9754: PPUSH
9755: LD_INT 1
9757: PPUSH
9758: CALL_OW 259
9762: PUSH
9763: LD_REAL  1.15000000000000E+0000
9766: MUL
9767: MUL
9768: ST_TO_ADDR
// end ; unit_vehicle :
9769: GO 10597
9771: LD_INT 2
9773: DOUBLE
9774: EQUAL
9775: IFTRUE 9779
9777: GO 10585
9779: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9780: LD_VAR 0 6
9784: PPUSH
9785: CALL_OW 264
9789: PUSH
9790: LD_INT 2
9792: PUSH
9793: LD_INT 42
9795: PUSH
9796: LD_INT 24
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: IN
9804: IFFALSE 9825
// points := [ 25 , 5 , 3 ] ;
9806: LD_ADDR_VAR 0 9
9810: PUSH
9811: LD_INT 25
9813: PUSH
9814: LD_INT 5
9816: PUSH
9817: LD_INT 3
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9825: LD_VAR 0 6
9829: PPUSH
9830: CALL_OW 264
9834: PUSH
9835: LD_INT 4
9837: PUSH
9838: LD_INT 43
9840: PUSH
9841: LD_INT 25
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: LIST
9848: IN
9849: IFFALSE 9870
// points := [ 40 , 15 , 5 ] ;
9851: LD_ADDR_VAR 0 9
9855: PUSH
9856: LD_INT 40
9858: PUSH
9859: LD_INT 15
9861: PUSH
9862: LD_INT 5
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: LIST
9869: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9870: LD_VAR 0 6
9874: PPUSH
9875: CALL_OW 264
9879: PUSH
9880: LD_INT 3
9882: PUSH
9883: LD_INT 23
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: IN
9890: IFFALSE 9911
// points := [ 7 , 25 , 8 ] ;
9892: LD_ADDR_VAR 0 9
9896: PUSH
9897: LD_INT 7
9899: PUSH
9900: LD_INT 25
9902: PUSH
9903: LD_INT 8
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: LIST
9910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9911: LD_VAR 0 6
9915: PPUSH
9916: CALL_OW 264
9920: PUSH
9921: LD_INT 5
9923: PUSH
9924: LD_INT 27
9926: PUSH
9927: LD_INT 44
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: LIST
9934: IN
9935: IFFALSE 9956
// points := [ 14 , 50 , 16 ] ;
9937: LD_ADDR_VAR 0 9
9941: PUSH
9942: LD_INT 14
9944: PUSH
9945: LD_INT 50
9947: PUSH
9948: LD_INT 16
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: LIST
9955: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9956: LD_VAR 0 6
9960: PPUSH
9961: CALL_OW 264
9965: PUSH
9966: LD_INT 6
9968: PUSH
9969: LD_INT 46
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: IN
9976: IFFALSE 9997
// points := [ 32 , 120 , 70 ] ;
9978: LD_ADDR_VAR 0 9
9982: PUSH
9983: LD_INT 32
9985: PUSH
9986: LD_INT 120
9988: PUSH
9989: LD_INT 70
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: LIST
9996: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9997: LD_VAR 0 6
10001: PPUSH
10002: CALL_OW 264
10006: PUSH
10007: LD_INT 7
10009: PUSH
10010: LD_INT 28
10012: PUSH
10013: LD_INT 45
10015: PUSH
10016: LD_INT 92
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: IN
10025: IFFALSE 10046
// points := [ 35 , 20 , 45 ] ;
10027: LD_ADDR_VAR 0 9
10031: PUSH
10032: LD_INT 35
10034: PUSH
10035: LD_INT 20
10037: PUSH
10038: LD_INT 45
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: LIST
10045: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10046: LD_VAR 0 6
10050: PPUSH
10051: CALL_OW 264
10055: PUSH
10056: LD_INT 47
10058: PUSH
10059: EMPTY
10060: LIST
10061: IN
10062: IFFALSE 10083
// points := [ 67 , 45 , 75 ] ;
10064: LD_ADDR_VAR 0 9
10068: PUSH
10069: LD_INT 67
10071: PUSH
10072: LD_INT 45
10074: PUSH
10075: LD_INT 75
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: LIST
10082: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10083: LD_VAR 0 6
10087: PPUSH
10088: CALL_OW 264
10092: PUSH
10093: LD_INT 26
10095: PUSH
10096: EMPTY
10097: LIST
10098: IN
10099: IFFALSE 10120
// points := [ 120 , 30 , 80 ] ;
10101: LD_ADDR_VAR 0 9
10105: PUSH
10106: LD_INT 120
10108: PUSH
10109: LD_INT 30
10111: PUSH
10112: LD_INT 80
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10120: LD_VAR 0 6
10124: PPUSH
10125: CALL_OW 264
10129: PUSH
10130: LD_INT 22
10132: PUSH
10133: EMPTY
10134: LIST
10135: IN
10136: IFFALSE 10157
// points := [ 40 , 1 , 1 ] ;
10138: LD_ADDR_VAR 0 9
10142: PUSH
10143: LD_INT 40
10145: PUSH
10146: LD_INT 1
10148: PUSH
10149: LD_INT 1
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: LIST
10156: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10157: LD_VAR 0 6
10161: PPUSH
10162: CALL_OW 264
10166: PUSH
10167: LD_INT 29
10169: PUSH
10170: EMPTY
10171: LIST
10172: IN
10173: IFFALSE 10194
// points := [ 70 , 200 , 400 ] ;
10175: LD_ADDR_VAR 0 9
10179: PUSH
10180: LD_INT 70
10182: PUSH
10183: LD_INT 200
10185: PUSH
10186: LD_INT 400
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: LIST
10193: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10194: LD_VAR 0 6
10198: PPUSH
10199: CALL_OW 264
10203: PUSH
10204: LD_INT 14
10206: PUSH
10207: LD_INT 53
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: IN
10214: IFFALSE 10235
// points := [ 40 , 10 , 20 ] ;
10216: LD_ADDR_VAR 0 9
10220: PUSH
10221: LD_INT 40
10223: PUSH
10224: LD_INT 10
10226: PUSH
10227: LD_INT 20
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: LIST
10234: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10235: LD_VAR 0 6
10239: PPUSH
10240: CALL_OW 264
10244: PUSH
10245: LD_INT 9
10247: PUSH
10248: EMPTY
10249: LIST
10250: IN
10251: IFFALSE 10272
// points := [ 5 , 70 , 20 ] ;
10253: LD_ADDR_VAR 0 9
10257: PUSH
10258: LD_INT 5
10260: PUSH
10261: LD_INT 70
10263: PUSH
10264: LD_INT 20
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: LIST
10271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10272: LD_VAR 0 6
10276: PPUSH
10277: CALL_OW 264
10281: PUSH
10282: LD_INT 10
10284: PUSH
10285: EMPTY
10286: LIST
10287: IN
10288: IFFALSE 10309
// points := [ 35 , 110 , 70 ] ;
10290: LD_ADDR_VAR 0 9
10294: PUSH
10295: LD_INT 35
10297: PUSH
10298: LD_INT 110
10300: PUSH
10301: LD_INT 70
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: LIST
10308: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10309: LD_VAR 0 6
10313: PPUSH
10314: CALL_OW 265
10318: PUSH
10319: LD_INT 25
10321: EQUAL
10322: IFFALSE 10343
// points := [ 80 , 65 , 100 ] ;
10324: LD_ADDR_VAR 0 9
10328: PUSH
10329: LD_INT 80
10331: PUSH
10332: LD_INT 65
10334: PUSH
10335: LD_INT 100
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10343: LD_VAR 0 6
10347: PPUSH
10348: CALL_OW 263
10352: PUSH
10353: LD_INT 1
10355: EQUAL
10356: IFFALSE 10391
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10358: LD_ADDR_VAR 0 10
10362: PUSH
10363: LD_VAR 0 10
10367: PUSH
10368: LD_VAR 0 6
10372: PPUSH
10373: CALL_OW 311
10377: PPUSH
10378: LD_INT 3
10380: PPUSH
10381: CALL_OW 259
10385: PUSH
10386: LD_INT 4
10388: MUL
10389: MUL
10390: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10391: LD_VAR 0 6
10395: PPUSH
10396: CALL_OW 263
10400: PUSH
10401: LD_INT 2
10403: EQUAL
10404: IFFALSE 10455
// begin j := IsControledBy ( i ) ;
10406: LD_ADDR_VAR 0 7
10410: PUSH
10411: LD_VAR 0 6
10415: PPUSH
10416: CALL_OW 312
10420: ST_TO_ADDR
// if j then
10421: LD_VAR 0 7
10425: IFFALSE 10455
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10427: LD_ADDR_VAR 0 10
10431: PUSH
10432: LD_VAR 0 10
10436: PUSH
10437: LD_VAR 0 7
10441: PPUSH
10442: LD_INT 3
10444: PPUSH
10445: CALL_OW 259
10449: PUSH
10450: LD_INT 3
10452: MUL
10453: MUL
10454: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10455: LD_VAR 0 6
10459: PPUSH
10460: CALL_OW 264
10464: PUSH
10465: LD_INT 5
10467: PUSH
10468: LD_INT 6
10470: PUSH
10471: LD_INT 46
10473: PUSH
10474: LD_INT 44
10476: PUSH
10477: LD_INT 47
10479: PUSH
10480: LD_INT 45
10482: PUSH
10483: LD_INT 28
10485: PUSH
10486: LD_INT 7
10488: PUSH
10489: LD_INT 27
10491: PUSH
10492: LD_INT 29
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: IN
10507: PUSH
10508: LD_VAR 0 1
10512: PPUSH
10513: LD_INT 52
10515: PPUSH
10516: CALL_OW 321
10520: PUSH
10521: LD_INT 2
10523: EQUAL
10524: AND
10525: IFFALSE 10542
// bpoints := bpoints * 1.2 ;
10527: LD_ADDR_VAR 0 10
10531: PUSH
10532: LD_VAR 0 10
10536: PUSH
10537: LD_REAL  1.20000000000000E+0000
10540: MUL
10541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10542: LD_VAR 0 6
10546: PPUSH
10547: CALL_OW 264
10551: PUSH
10552: LD_INT 6
10554: PUSH
10555: LD_INT 46
10557: PUSH
10558: LD_INT 47
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: IN
10566: IFFALSE 10583
// bpoints := bpoints * 1.2 ;
10568: LD_ADDR_VAR 0 10
10572: PUSH
10573: LD_VAR 0 10
10577: PUSH
10578: LD_REAL  1.20000000000000E+0000
10581: MUL
10582: ST_TO_ADDR
// end ; unit_building :
10583: GO 10597
10585: LD_INT 3
10587: DOUBLE
10588: EQUAL
10589: IFTRUE 10593
10591: GO 10596
10593: POP
// ; end ;
10594: GO 10597
10596: POP
// for j = 1 to 3 do
10597: LD_ADDR_VAR 0 7
10601: PUSH
10602: DOUBLE
10603: LD_INT 1
10605: DEC
10606: ST_TO_ADDR
10607: LD_INT 3
10609: PUSH
10610: FOR_TO
10611: IFFALSE 10664
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10613: LD_ADDR_VAR 0 5
10617: PUSH
10618: LD_VAR 0 5
10622: PPUSH
10623: LD_VAR 0 7
10627: PPUSH
10628: LD_VAR 0 5
10632: PUSH
10633: LD_VAR 0 7
10637: ARRAY
10638: PUSH
10639: LD_VAR 0 9
10643: PUSH
10644: LD_VAR 0 7
10648: ARRAY
10649: PUSH
10650: LD_VAR 0 10
10654: MUL
10655: PLUS
10656: PPUSH
10657: CALL_OW 1
10661: ST_TO_ADDR
10662: GO 10610
10664: POP
10665: POP
// end ;
10666: GO 9145
10668: POP
10669: POP
// result := Replace ( result , 4 , tmp ) ;
10670: LD_ADDR_VAR 0 5
10674: PUSH
10675: LD_VAR 0 5
10679: PPUSH
10680: LD_INT 4
10682: PPUSH
10683: LD_VAR 0 8
10687: PPUSH
10688: CALL_OW 1
10692: ST_TO_ADDR
// end ;
10693: LD_VAR 0 5
10697: RET
// export function DangerAtRange ( unit , range ) ; begin
10698: LD_INT 0
10700: PPUSH
// if not unit then
10701: LD_VAR 0 1
10705: NOT
10706: IFFALSE 10710
// exit ;
10708: GO 10755
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10710: LD_ADDR_VAR 0 3
10714: PUSH
10715: LD_VAR 0 1
10719: PPUSH
10720: CALL_OW 255
10724: PPUSH
10725: LD_VAR 0 1
10729: PPUSH
10730: CALL_OW 250
10734: PPUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 251
10744: PPUSH
10745: LD_VAR 0 2
10749: PPUSH
10750: CALL 8997 0 4
10754: ST_TO_ADDR
// end ;
10755: LD_VAR 0 3
10759: RET
// export function DangerInArea ( side , area ) ; begin
10760: LD_INT 0
10762: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10763: LD_ADDR_VAR 0 3
10767: PUSH
10768: LD_VAR 0 2
10772: PPUSH
10773: LD_INT 81
10775: PUSH
10776: LD_VAR 0 1
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PPUSH
10785: CALL_OW 70
10789: ST_TO_ADDR
// end ;
10790: LD_VAR 0 3
10794: RET
// export function IsExtension ( b ) ; begin
10795: LD_INT 0
10797: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10798: LD_ADDR_VAR 0 2
10802: PUSH
10803: LD_VAR 0 1
10807: PUSH
10808: LD_INT 23
10810: PUSH
10811: LD_INT 20
10813: PUSH
10814: LD_INT 22
10816: PUSH
10817: LD_INT 17
10819: PUSH
10820: LD_INT 24
10822: PUSH
10823: LD_INT 21
10825: PUSH
10826: LD_INT 19
10828: PUSH
10829: LD_INT 16
10831: PUSH
10832: LD_INT 25
10834: PUSH
10835: LD_INT 18
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: IN
10850: ST_TO_ADDR
// end ;
10851: LD_VAR 0 2
10855: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10856: LD_INT 0
10858: PPUSH
10859: PPUSH
10860: PPUSH
// result := [ ] ;
10861: LD_ADDR_VAR 0 4
10865: PUSH
10866: EMPTY
10867: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10868: LD_ADDR_VAR 0 5
10872: PUSH
10873: LD_VAR 0 2
10877: PPUSH
10878: LD_INT 21
10880: PUSH
10881: LD_INT 3
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PPUSH
10888: CALL_OW 70
10892: ST_TO_ADDR
// if not tmp then
10893: LD_VAR 0 5
10897: NOT
10898: IFFALSE 10902
// exit ;
10900: GO 10966
// if checkLink then
10902: LD_VAR 0 3
10906: IFFALSE 10956
// begin for i in tmp do
10908: LD_ADDR_VAR 0 6
10912: PUSH
10913: LD_VAR 0 5
10917: PUSH
10918: FOR_IN
10919: IFFALSE 10954
// if GetBase ( i ) <> base then
10921: LD_VAR 0 6
10925: PPUSH
10926: CALL_OW 274
10930: PUSH
10931: LD_VAR 0 1
10935: NONEQUAL
10936: IFFALSE 10952
// ComLinkToBase ( base , i ) ;
10938: LD_VAR 0 1
10942: PPUSH
10943: LD_VAR 0 6
10947: PPUSH
10948: CALL_OW 169
10952: GO 10918
10954: POP
10955: POP
// end ; result := tmp ;
10956: LD_ADDR_VAR 0 4
10960: PUSH
10961: LD_VAR 0 5
10965: ST_TO_ADDR
// end ;
10966: LD_VAR 0 4
10970: RET
// export function ComComplete ( units , b ) ; var i ; begin
10971: LD_INT 0
10973: PPUSH
10974: PPUSH
// if not units then
10975: LD_VAR 0 1
10979: NOT
10980: IFFALSE 10984
// exit ;
10982: GO 11074
// for i in units do
10984: LD_ADDR_VAR 0 4
10988: PUSH
10989: LD_VAR 0 1
10993: PUSH
10994: FOR_IN
10995: IFFALSE 11072
// if BuildingStatus ( b ) = bs_build then
10997: LD_VAR 0 2
11001: PPUSH
11002: CALL_OW 461
11006: PUSH
11007: LD_INT 1
11009: EQUAL
11010: IFFALSE 11070
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11012: LD_VAR 0 4
11016: PPUSH
11017: LD_STRING h
11019: PUSH
11020: LD_VAR 0 2
11024: PPUSH
11025: CALL_OW 250
11029: PUSH
11030: LD_VAR 0 2
11034: PPUSH
11035: CALL_OW 251
11039: PUSH
11040: LD_VAR 0 2
11044: PUSH
11045: LD_INT 0
11047: PUSH
11048: LD_INT 0
11050: PUSH
11051: LD_INT 0
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: PUSH
11063: EMPTY
11064: LIST
11065: PPUSH
11066: CALL_OW 446
11070: GO 10994
11072: POP
11073: POP
// end ;
11074: LD_VAR 0 3
11078: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11079: LD_INT 0
11081: PPUSH
11082: PPUSH
11083: PPUSH
11084: PPUSH
11085: PPUSH
11086: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11087: LD_VAR 0 1
11091: NOT
11092: PUSH
11093: LD_VAR 0 1
11097: PPUSH
11098: CALL_OW 263
11102: PUSH
11103: LD_INT 2
11105: NONEQUAL
11106: OR
11107: IFFALSE 11111
// exit ;
11109: GO 11427
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11111: LD_ADDR_VAR 0 6
11115: PUSH
11116: LD_INT 22
11118: PUSH
11119: LD_VAR 0 1
11123: PPUSH
11124: CALL_OW 255
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: LD_INT 2
11135: PUSH
11136: LD_INT 30
11138: PUSH
11139: LD_INT 36
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: LD_INT 34
11148: PUSH
11149: LD_INT 31
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: LIST
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PPUSH
11165: CALL_OW 69
11169: ST_TO_ADDR
// if not tmp then
11170: LD_VAR 0 6
11174: NOT
11175: IFFALSE 11179
// exit ;
11177: GO 11427
// result := [ ] ;
11179: LD_ADDR_VAR 0 2
11183: PUSH
11184: EMPTY
11185: ST_TO_ADDR
// for i in tmp do
11186: LD_ADDR_VAR 0 3
11190: PUSH
11191: LD_VAR 0 6
11195: PUSH
11196: FOR_IN
11197: IFFALSE 11268
// begin t := UnitsInside ( i ) ;
11199: LD_ADDR_VAR 0 4
11203: PUSH
11204: LD_VAR 0 3
11208: PPUSH
11209: CALL_OW 313
11213: ST_TO_ADDR
// if t then
11214: LD_VAR 0 4
11218: IFFALSE 11266
// for j in t do
11220: LD_ADDR_VAR 0 7
11224: PUSH
11225: LD_VAR 0 4
11229: PUSH
11230: FOR_IN
11231: IFFALSE 11264
// result := Replace ( result , result + 1 , j ) ;
11233: LD_ADDR_VAR 0 2
11237: PUSH
11238: LD_VAR 0 2
11242: PPUSH
11243: LD_VAR 0 2
11247: PUSH
11248: LD_INT 1
11250: PLUS
11251: PPUSH
11252: LD_VAR 0 7
11256: PPUSH
11257: CALL_OW 1
11261: ST_TO_ADDR
11262: GO 11230
11264: POP
11265: POP
// end ;
11266: GO 11196
11268: POP
11269: POP
// if not result then
11270: LD_VAR 0 2
11274: NOT
11275: IFFALSE 11279
// exit ;
11277: GO 11427
// mech := result [ 1 ] ;
11279: LD_ADDR_VAR 0 5
11283: PUSH
11284: LD_VAR 0 2
11288: PUSH
11289: LD_INT 1
11291: ARRAY
11292: ST_TO_ADDR
// if result > 1 then
11293: LD_VAR 0 2
11297: PUSH
11298: LD_INT 1
11300: GREATER
11301: IFFALSE 11413
// begin for i = 2 to result do
11303: LD_ADDR_VAR 0 3
11307: PUSH
11308: DOUBLE
11309: LD_INT 2
11311: DEC
11312: ST_TO_ADDR
11313: LD_VAR 0 2
11317: PUSH
11318: FOR_TO
11319: IFFALSE 11411
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11321: LD_ADDR_VAR 0 4
11325: PUSH
11326: LD_VAR 0 2
11330: PUSH
11331: LD_VAR 0 3
11335: ARRAY
11336: PPUSH
11337: LD_INT 3
11339: PPUSH
11340: CALL_OW 259
11344: PUSH
11345: LD_VAR 0 2
11349: PUSH
11350: LD_VAR 0 3
11354: ARRAY
11355: PPUSH
11356: CALL_OW 432
11360: MINUS
11361: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11362: LD_VAR 0 4
11366: PUSH
11367: LD_VAR 0 5
11371: PPUSH
11372: LD_INT 3
11374: PPUSH
11375: CALL_OW 259
11379: PUSH
11380: LD_VAR 0 5
11384: PPUSH
11385: CALL_OW 432
11389: MINUS
11390: GREATEREQUAL
11391: IFFALSE 11409
// mech := result [ i ] ;
11393: LD_ADDR_VAR 0 5
11397: PUSH
11398: LD_VAR 0 2
11402: PUSH
11403: LD_VAR 0 3
11407: ARRAY
11408: ST_TO_ADDR
// end ;
11409: GO 11318
11411: POP
11412: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11413: LD_VAR 0 1
11417: PPUSH
11418: LD_VAR 0 5
11422: PPUSH
11423: CALL_OW 135
// end ;
11427: LD_VAR 0 2
11431: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11432: LD_INT 0
11434: PPUSH
11435: PPUSH
11436: PPUSH
11437: PPUSH
11438: PPUSH
11439: PPUSH
11440: PPUSH
11441: PPUSH
11442: PPUSH
11443: PPUSH
11444: PPUSH
11445: PPUSH
11446: PPUSH
// result := [ ] ;
11447: LD_ADDR_VAR 0 7
11451: PUSH
11452: EMPTY
11453: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11454: LD_VAR 0 1
11458: PPUSH
11459: CALL_OW 266
11463: PUSH
11464: LD_INT 0
11466: PUSH
11467: LD_INT 1
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: IN
11474: NOT
11475: IFFALSE 11479
// exit ;
11477: GO 13113
// if name then
11479: LD_VAR 0 3
11483: IFFALSE 11499
// SetBName ( base_dep , name ) ;
11485: LD_VAR 0 1
11489: PPUSH
11490: LD_VAR 0 3
11494: PPUSH
11495: CALL_OW 500
// base := GetBase ( base_dep ) ;
11499: LD_ADDR_VAR 0 15
11503: PUSH
11504: LD_VAR 0 1
11508: PPUSH
11509: CALL_OW 274
11513: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11514: LD_ADDR_VAR 0 16
11518: PUSH
11519: LD_VAR 0 1
11523: PPUSH
11524: CALL_OW 255
11528: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11529: LD_ADDR_VAR 0 17
11533: PUSH
11534: LD_VAR 0 1
11538: PPUSH
11539: CALL_OW 248
11543: ST_TO_ADDR
// if sources then
11544: LD_VAR 0 5
11548: IFFALSE 11595
// for i = 1 to 3 do
11550: LD_ADDR_VAR 0 8
11554: PUSH
11555: DOUBLE
11556: LD_INT 1
11558: DEC
11559: ST_TO_ADDR
11560: LD_INT 3
11562: PUSH
11563: FOR_TO
11564: IFFALSE 11593
// AddResourceType ( base , i , sources [ i ] ) ;
11566: LD_VAR 0 15
11570: PPUSH
11571: LD_VAR 0 8
11575: PPUSH
11576: LD_VAR 0 5
11580: PUSH
11581: LD_VAR 0 8
11585: ARRAY
11586: PPUSH
11587: CALL_OW 276
11591: GO 11563
11593: POP
11594: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11595: LD_ADDR_VAR 0 18
11599: PUSH
11600: LD_VAR 0 15
11604: PPUSH
11605: LD_VAR 0 2
11609: PPUSH
11610: LD_INT 1
11612: PPUSH
11613: CALL 10856 0 3
11617: ST_TO_ADDR
// InitHc ;
11618: CALL_OW 19
// InitUc ;
11622: CALL_OW 18
// uc_side := side ;
11626: LD_ADDR_OWVAR 20
11630: PUSH
11631: LD_VAR 0 16
11635: ST_TO_ADDR
// uc_nation := nation ;
11636: LD_ADDR_OWVAR 21
11640: PUSH
11641: LD_VAR 0 17
11645: ST_TO_ADDR
// if buildings then
11646: LD_VAR 0 18
11650: IFFALSE 12972
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11652: LD_ADDR_VAR 0 19
11656: PUSH
11657: LD_VAR 0 18
11661: PPUSH
11662: LD_INT 2
11664: PUSH
11665: LD_INT 30
11667: PUSH
11668: LD_INT 29
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: LD_INT 30
11677: PUSH
11678: LD_INT 30
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: LIST
11689: PPUSH
11690: CALL_OW 72
11694: ST_TO_ADDR
// if tmp then
11695: LD_VAR 0 19
11699: IFFALSE 11747
// for i in tmp do
11701: LD_ADDR_VAR 0 8
11705: PUSH
11706: LD_VAR 0 19
11710: PUSH
11711: FOR_IN
11712: IFFALSE 11745
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11714: LD_VAR 0 8
11718: PPUSH
11719: CALL_OW 250
11723: PPUSH
11724: LD_VAR 0 8
11728: PPUSH
11729: CALL_OW 251
11733: PPUSH
11734: LD_VAR 0 16
11738: PPUSH
11739: CALL_OW 441
11743: GO 11711
11745: POP
11746: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11747: LD_VAR 0 18
11751: PPUSH
11752: LD_INT 2
11754: PUSH
11755: LD_INT 30
11757: PUSH
11758: LD_INT 32
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PUSH
11765: LD_INT 30
11767: PUSH
11768: LD_INT 33
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: LIST
11779: PPUSH
11780: CALL_OW 72
11784: IFFALSE 11872
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11786: LD_ADDR_VAR 0 8
11790: PUSH
11791: LD_VAR 0 18
11795: PPUSH
11796: LD_INT 2
11798: PUSH
11799: LD_INT 30
11801: PUSH
11802: LD_INT 32
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: LD_INT 30
11811: PUSH
11812: LD_INT 33
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: PPUSH
11824: CALL_OW 72
11828: PUSH
11829: FOR_IN
11830: IFFALSE 11870
// begin if not GetBWeapon ( i ) then
11832: LD_VAR 0 8
11836: PPUSH
11837: CALL_OW 269
11841: NOT
11842: IFFALSE 11868
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11844: LD_VAR 0 8
11848: PPUSH
11849: LD_VAR 0 8
11853: PPUSH
11854: LD_VAR 0 2
11858: PPUSH
11859: CALL 13118 0 2
11863: PPUSH
11864: CALL_OW 431
// end ;
11868: GO 11829
11870: POP
11871: POP
// end ; for i = 1 to personel do
11872: LD_ADDR_VAR 0 8
11876: PUSH
11877: DOUBLE
11878: LD_INT 1
11880: DEC
11881: ST_TO_ADDR
11882: LD_VAR 0 6
11886: PUSH
11887: FOR_TO
11888: IFFALSE 12952
// begin if i > 4 then
11890: LD_VAR 0 8
11894: PUSH
11895: LD_INT 4
11897: GREATER
11898: IFFALSE 11902
// break ;
11900: GO 12952
// case i of 1 :
11902: LD_VAR 0 8
11906: PUSH
11907: LD_INT 1
11909: DOUBLE
11910: EQUAL
11911: IFTRUE 11915
11913: GO 11995
11915: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11916: LD_ADDR_VAR 0 12
11920: PUSH
11921: LD_VAR 0 18
11925: PPUSH
11926: LD_INT 22
11928: PUSH
11929: LD_VAR 0 16
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 58
11940: PUSH
11941: EMPTY
11942: LIST
11943: PUSH
11944: LD_INT 2
11946: PUSH
11947: LD_INT 30
11949: PUSH
11950: LD_INT 32
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: PUSH
11957: LD_INT 30
11959: PUSH
11960: LD_INT 4
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 30
11969: PUSH
11970: LD_INT 5
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: LIST
11987: PPUSH
11988: CALL_OW 72
11992: ST_TO_ADDR
11993: GO 12217
11995: LD_INT 2
11997: DOUBLE
11998: EQUAL
11999: IFTRUE 12003
12001: GO 12065
12003: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12004: LD_ADDR_VAR 0 12
12008: PUSH
12009: LD_VAR 0 18
12013: PPUSH
12014: LD_INT 22
12016: PUSH
12017: LD_VAR 0 16
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 2
12028: PUSH
12029: LD_INT 30
12031: PUSH
12032: LD_INT 0
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 30
12041: PUSH
12042: LD_INT 1
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PPUSH
12058: CALL_OW 72
12062: ST_TO_ADDR
12063: GO 12217
12065: LD_INT 3
12067: DOUBLE
12068: EQUAL
12069: IFTRUE 12073
12071: GO 12135
12073: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12074: LD_ADDR_VAR 0 12
12078: PUSH
12079: LD_VAR 0 18
12083: PPUSH
12084: LD_INT 22
12086: PUSH
12087: LD_VAR 0 16
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: LD_INT 2
12098: PUSH
12099: LD_INT 30
12101: PUSH
12102: LD_INT 2
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 30
12111: PUSH
12112: LD_INT 3
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PPUSH
12128: CALL_OW 72
12132: ST_TO_ADDR
12133: GO 12217
12135: LD_INT 4
12137: DOUBLE
12138: EQUAL
12139: IFTRUE 12143
12141: GO 12216
12143: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12144: LD_ADDR_VAR 0 12
12148: PUSH
12149: LD_VAR 0 18
12153: PPUSH
12154: LD_INT 22
12156: PUSH
12157: LD_VAR 0 16
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PUSH
12166: LD_INT 2
12168: PUSH
12169: LD_INT 30
12171: PUSH
12172: LD_INT 6
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: PUSH
12179: LD_INT 30
12181: PUSH
12182: LD_INT 7
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 30
12191: PUSH
12192: LD_INT 8
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PPUSH
12209: CALL_OW 72
12213: ST_TO_ADDR
12214: GO 12217
12216: POP
// if i = 1 then
12217: LD_VAR 0 8
12221: PUSH
12222: LD_INT 1
12224: EQUAL
12225: IFFALSE 12336
// begin tmp := [ ] ;
12227: LD_ADDR_VAR 0 19
12231: PUSH
12232: EMPTY
12233: ST_TO_ADDR
// for j in f do
12234: LD_ADDR_VAR 0 9
12238: PUSH
12239: LD_VAR 0 12
12243: PUSH
12244: FOR_IN
12245: IFFALSE 12318
// if GetBType ( j ) = b_bunker then
12247: LD_VAR 0 9
12251: PPUSH
12252: CALL_OW 266
12256: PUSH
12257: LD_INT 32
12259: EQUAL
12260: IFFALSE 12287
// tmp := Insert ( tmp , 1 , j ) else
12262: LD_ADDR_VAR 0 19
12266: PUSH
12267: LD_VAR 0 19
12271: PPUSH
12272: LD_INT 1
12274: PPUSH
12275: LD_VAR 0 9
12279: PPUSH
12280: CALL_OW 2
12284: ST_TO_ADDR
12285: GO 12316
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12287: LD_ADDR_VAR 0 19
12291: PUSH
12292: LD_VAR 0 19
12296: PPUSH
12297: LD_VAR 0 19
12301: PUSH
12302: LD_INT 1
12304: PLUS
12305: PPUSH
12306: LD_VAR 0 9
12310: PPUSH
12311: CALL_OW 2
12315: ST_TO_ADDR
12316: GO 12244
12318: POP
12319: POP
// if tmp then
12320: LD_VAR 0 19
12324: IFFALSE 12336
// f := tmp ;
12326: LD_ADDR_VAR 0 12
12330: PUSH
12331: LD_VAR 0 19
12335: ST_TO_ADDR
// end ; x := personel [ i ] ;
12336: LD_ADDR_VAR 0 13
12340: PUSH
12341: LD_VAR 0 6
12345: PUSH
12346: LD_VAR 0 8
12350: ARRAY
12351: ST_TO_ADDR
// if x = - 1 then
12352: LD_VAR 0 13
12356: PUSH
12357: LD_INT 1
12359: NEG
12360: EQUAL
12361: IFFALSE 12570
// begin for j in f do
12363: LD_ADDR_VAR 0 9
12367: PUSH
12368: LD_VAR 0 12
12372: PUSH
12373: FOR_IN
12374: IFFALSE 12566
// repeat InitHc ;
12376: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12380: LD_VAR 0 9
12384: PPUSH
12385: CALL_OW 266
12389: PUSH
12390: LD_INT 5
12392: EQUAL
12393: IFFALSE 12463
// begin if UnitsInside ( j ) < 3 then
12395: LD_VAR 0 9
12399: PPUSH
12400: CALL_OW 313
12404: PUSH
12405: LD_INT 3
12407: LESS
12408: IFFALSE 12444
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12410: LD_INT 0
12412: PPUSH
12413: LD_INT 5
12415: PUSH
12416: LD_INT 8
12418: PUSH
12419: LD_INT 9
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: LIST
12426: PUSH
12427: LD_VAR 0 17
12431: ARRAY
12432: PPUSH
12433: LD_VAR 0 4
12437: PPUSH
12438: CALL_OW 380
12442: GO 12461
// PrepareHuman ( false , i , skill ) ;
12444: LD_INT 0
12446: PPUSH
12447: LD_VAR 0 8
12451: PPUSH
12452: LD_VAR 0 4
12456: PPUSH
12457: CALL_OW 380
// end else
12461: GO 12480
// PrepareHuman ( false , i , skill ) ;
12463: LD_INT 0
12465: PPUSH
12466: LD_VAR 0 8
12470: PPUSH
12471: LD_VAR 0 4
12475: PPUSH
12476: CALL_OW 380
// un := CreateHuman ;
12480: LD_ADDR_VAR 0 14
12484: PUSH
12485: CALL_OW 44
12489: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12490: LD_ADDR_VAR 0 7
12494: PUSH
12495: LD_VAR 0 7
12499: PPUSH
12500: LD_INT 1
12502: PPUSH
12503: LD_VAR 0 14
12507: PPUSH
12508: CALL_OW 2
12512: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12513: LD_VAR 0 14
12517: PPUSH
12518: LD_VAR 0 9
12522: PPUSH
12523: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12527: LD_VAR 0 9
12531: PPUSH
12532: CALL_OW 313
12536: PUSH
12537: LD_INT 6
12539: EQUAL
12540: PUSH
12541: LD_VAR 0 9
12545: PPUSH
12546: CALL_OW 266
12550: PUSH
12551: LD_INT 32
12553: PUSH
12554: LD_INT 31
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: IN
12561: OR
12562: IFFALSE 12376
12564: GO 12373
12566: POP
12567: POP
// end else
12568: GO 12950
// for j = 1 to x do
12570: LD_ADDR_VAR 0 9
12574: PUSH
12575: DOUBLE
12576: LD_INT 1
12578: DEC
12579: ST_TO_ADDR
12580: LD_VAR 0 13
12584: PUSH
12585: FOR_TO
12586: IFFALSE 12948
// begin InitHc ;
12588: CALL_OW 19
// if not f then
12592: LD_VAR 0 12
12596: NOT
12597: IFFALSE 12686
// begin PrepareHuman ( false , i , skill ) ;
12599: LD_INT 0
12601: PPUSH
12602: LD_VAR 0 8
12606: PPUSH
12607: LD_VAR 0 4
12611: PPUSH
12612: CALL_OW 380
// un := CreateHuman ;
12616: LD_ADDR_VAR 0 14
12620: PUSH
12621: CALL_OW 44
12625: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12626: LD_ADDR_VAR 0 7
12630: PUSH
12631: LD_VAR 0 7
12635: PPUSH
12636: LD_INT 1
12638: PPUSH
12639: LD_VAR 0 14
12643: PPUSH
12644: CALL_OW 2
12648: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12649: LD_VAR 0 14
12653: PPUSH
12654: LD_VAR 0 1
12658: PPUSH
12659: CALL_OW 250
12663: PPUSH
12664: LD_VAR 0 1
12668: PPUSH
12669: CALL_OW 251
12673: PPUSH
12674: LD_INT 10
12676: PPUSH
12677: LD_INT 0
12679: PPUSH
12680: CALL_OW 50
// continue ;
12684: GO 12585
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12686: LD_VAR 0 12
12690: PUSH
12691: LD_INT 1
12693: ARRAY
12694: PPUSH
12695: CALL_OW 313
12699: PUSH
12700: LD_VAR 0 12
12704: PUSH
12705: LD_INT 1
12707: ARRAY
12708: PPUSH
12709: CALL_OW 266
12713: PUSH
12714: LD_INT 32
12716: PUSH
12717: LD_INT 31
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: IN
12724: AND
12725: PUSH
12726: LD_VAR 0 12
12730: PUSH
12731: LD_INT 1
12733: ARRAY
12734: PPUSH
12735: CALL_OW 313
12739: PUSH
12740: LD_INT 6
12742: EQUAL
12743: OR
12744: IFFALSE 12764
// f := Delete ( f , 1 ) ;
12746: LD_ADDR_VAR 0 12
12750: PUSH
12751: LD_VAR 0 12
12755: PPUSH
12756: LD_INT 1
12758: PPUSH
12759: CALL_OW 3
12763: ST_TO_ADDR
// if not f then
12764: LD_VAR 0 12
12768: NOT
12769: IFFALSE 12787
// begin x := x + 2 ;
12771: LD_ADDR_VAR 0 13
12775: PUSH
12776: LD_VAR 0 13
12780: PUSH
12781: LD_INT 2
12783: PLUS
12784: ST_TO_ADDR
// continue ;
12785: GO 12585
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12787: LD_VAR 0 12
12791: PUSH
12792: LD_INT 1
12794: ARRAY
12795: PPUSH
12796: CALL_OW 266
12800: PUSH
12801: LD_INT 5
12803: EQUAL
12804: IFFALSE 12878
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12806: LD_VAR 0 12
12810: PUSH
12811: LD_INT 1
12813: ARRAY
12814: PPUSH
12815: CALL_OW 313
12819: PUSH
12820: LD_INT 3
12822: LESS
12823: IFFALSE 12859
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12825: LD_INT 0
12827: PPUSH
12828: LD_INT 5
12830: PUSH
12831: LD_INT 8
12833: PUSH
12834: LD_INT 9
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: LIST
12841: PUSH
12842: LD_VAR 0 17
12846: ARRAY
12847: PPUSH
12848: LD_VAR 0 4
12852: PPUSH
12853: CALL_OW 380
12857: GO 12876
// PrepareHuman ( false , i , skill ) ;
12859: LD_INT 0
12861: PPUSH
12862: LD_VAR 0 8
12866: PPUSH
12867: LD_VAR 0 4
12871: PPUSH
12872: CALL_OW 380
// end else
12876: GO 12895
// PrepareHuman ( false , i , skill ) ;
12878: LD_INT 0
12880: PPUSH
12881: LD_VAR 0 8
12885: PPUSH
12886: LD_VAR 0 4
12890: PPUSH
12891: CALL_OW 380
// un := CreateHuman ;
12895: LD_ADDR_VAR 0 14
12899: PUSH
12900: CALL_OW 44
12904: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12905: LD_ADDR_VAR 0 7
12909: PUSH
12910: LD_VAR 0 7
12914: PPUSH
12915: LD_INT 1
12917: PPUSH
12918: LD_VAR 0 14
12922: PPUSH
12923: CALL_OW 2
12927: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12928: LD_VAR 0 14
12932: PPUSH
12933: LD_VAR 0 12
12937: PUSH
12938: LD_INT 1
12940: ARRAY
12941: PPUSH
12942: CALL_OW 52
// end ;
12946: GO 12585
12948: POP
12949: POP
// end ;
12950: GO 11887
12952: POP
12953: POP
// result := result ^ buildings ;
12954: LD_ADDR_VAR 0 7
12958: PUSH
12959: LD_VAR 0 7
12963: PUSH
12964: LD_VAR 0 18
12968: ADD
12969: ST_TO_ADDR
// end else
12970: GO 13113
// begin for i = 1 to personel do
12972: LD_ADDR_VAR 0 8
12976: PUSH
12977: DOUBLE
12978: LD_INT 1
12980: DEC
12981: ST_TO_ADDR
12982: LD_VAR 0 6
12986: PUSH
12987: FOR_TO
12988: IFFALSE 13111
// begin if i > 4 then
12990: LD_VAR 0 8
12994: PUSH
12995: LD_INT 4
12997: GREATER
12998: IFFALSE 13002
// break ;
13000: GO 13111
// x := personel [ i ] ;
13002: LD_ADDR_VAR 0 13
13006: PUSH
13007: LD_VAR 0 6
13011: PUSH
13012: LD_VAR 0 8
13016: ARRAY
13017: ST_TO_ADDR
// if x = - 1 then
13018: LD_VAR 0 13
13022: PUSH
13023: LD_INT 1
13025: NEG
13026: EQUAL
13027: IFFALSE 13031
// continue ;
13029: GO 12987
// PrepareHuman ( false , i , skill ) ;
13031: LD_INT 0
13033: PPUSH
13034: LD_VAR 0 8
13038: PPUSH
13039: LD_VAR 0 4
13043: PPUSH
13044: CALL_OW 380
// un := CreateHuman ;
13048: LD_ADDR_VAR 0 14
13052: PUSH
13053: CALL_OW 44
13057: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13058: LD_VAR 0 14
13062: PPUSH
13063: LD_VAR 0 1
13067: PPUSH
13068: CALL_OW 250
13072: PPUSH
13073: LD_VAR 0 1
13077: PPUSH
13078: CALL_OW 251
13082: PPUSH
13083: LD_INT 10
13085: PPUSH
13086: LD_INT 0
13088: PPUSH
13089: CALL_OW 50
// result := result ^ un ;
13093: LD_ADDR_VAR 0 7
13097: PUSH
13098: LD_VAR 0 7
13102: PUSH
13103: LD_VAR 0 14
13107: ADD
13108: ST_TO_ADDR
// end ;
13109: GO 12987
13111: POP
13112: POP
// end ; end ;
13113: LD_VAR 0 7
13117: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13118: LD_INT 0
13120: PPUSH
13121: PPUSH
13122: PPUSH
13123: PPUSH
13124: PPUSH
13125: PPUSH
13126: PPUSH
13127: PPUSH
13128: PPUSH
13129: PPUSH
13130: PPUSH
13131: PPUSH
13132: PPUSH
13133: PPUSH
13134: PPUSH
13135: PPUSH
// result := false ;
13136: LD_ADDR_VAR 0 3
13140: PUSH
13141: LD_INT 0
13143: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13144: LD_VAR 0 1
13148: NOT
13149: PUSH
13150: LD_VAR 0 1
13154: PPUSH
13155: CALL_OW 266
13159: PUSH
13160: LD_INT 32
13162: PUSH
13163: LD_INT 33
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: IN
13170: NOT
13171: OR
13172: IFFALSE 13176
// exit ;
13174: GO 14285
// nat := GetNation ( tower ) ;
13176: LD_ADDR_VAR 0 12
13180: PUSH
13181: LD_VAR 0 1
13185: PPUSH
13186: CALL_OW 248
13190: ST_TO_ADDR
// side := GetSide ( tower ) ;
13191: LD_ADDR_VAR 0 16
13195: PUSH
13196: LD_VAR 0 1
13200: PPUSH
13201: CALL_OW 255
13205: ST_TO_ADDR
// x := GetX ( tower ) ;
13206: LD_ADDR_VAR 0 10
13210: PUSH
13211: LD_VAR 0 1
13215: PPUSH
13216: CALL_OW 250
13220: ST_TO_ADDR
// y := GetY ( tower ) ;
13221: LD_ADDR_VAR 0 11
13225: PUSH
13226: LD_VAR 0 1
13230: PPUSH
13231: CALL_OW 251
13235: ST_TO_ADDR
// if not x or not y then
13236: LD_VAR 0 10
13240: NOT
13241: PUSH
13242: LD_VAR 0 11
13246: NOT
13247: OR
13248: IFFALSE 13252
// exit ;
13250: GO 14285
// weapon := 0 ;
13252: LD_ADDR_VAR 0 18
13256: PUSH
13257: LD_INT 0
13259: ST_TO_ADDR
// fac_list := [ ] ;
13260: LD_ADDR_VAR 0 17
13264: PUSH
13265: EMPTY
13266: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13267: LD_ADDR_VAR 0 6
13271: PUSH
13272: LD_VAR 0 1
13276: PPUSH
13277: CALL_OW 274
13281: PPUSH
13282: LD_VAR 0 2
13286: PPUSH
13287: LD_INT 0
13289: PPUSH
13290: CALL 10856 0 3
13294: PPUSH
13295: LD_INT 30
13297: PUSH
13298: LD_INT 3
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PPUSH
13305: CALL_OW 72
13309: ST_TO_ADDR
// if not factories then
13310: LD_VAR 0 6
13314: NOT
13315: IFFALSE 13319
// exit ;
13317: GO 14285
// for i in factories do
13319: LD_ADDR_VAR 0 8
13323: PUSH
13324: LD_VAR 0 6
13328: PUSH
13329: FOR_IN
13330: IFFALSE 13355
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13332: LD_ADDR_VAR 0 17
13336: PUSH
13337: LD_VAR 0 17
13341: PUSH
13342: LD_VAR 0 8
13346: PPUSH
13347: CALL_OW 478
13351: UNION
13352: ST_TO_ADDR
13353: GO 13329
13355: POP
13356: POP
// if not fac_list then
13357: LD_VAR 0 17
13361: NOT
13362: IFFALSE 13366
// exit ;
13364: GO 14285
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13366: LD_ADDR_VAR 0 5
13370: PUSH
13371: LD_INT 4
13373: PUSH
13374: LD_INT 5
13376: PUSH
13377: LD_INT 9
13379: PUSH
13380: LD_INT 10
13382: PUSH
13383: LD_INT 6
13385: PUSH
13386: LD_INT 7
13388: PUSH
13389: LD_INT 11
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 27
13403: PUSH
13404: LD_INT 28
13406: PUSH
13407: LD_INT 26
13409: PUSH
13410: LD_INT 30
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: PUSH
13419: LD_INT 43
13421: PUSH
13422: LD_INT 44
13424: PUSH
13425: LD_INT 46
13427: PUSH
13428: LD_INT 45
13430: PUSH
13431: LD_INT 47
13433: PUSH
13434: LD_INT 49
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: LIST
13449: PUSH
13450: LD_VAR 0 12
13454: ARRAY
13455: ST_TO_ADDR
// list := list isect fac_list ;
13456: LD_ADDR_VAR 0 5
13460: PUSH
13461: LD_VAR 0 5
13465: PUSH
13466: LD_VAR 0 17
13470: ISECT
13471: ST_TO_ADDR
// if not list then
13472: LD_VAR 0 5
13476: NOT
13477: IFFALSE 13481
// exit ;
13479: GO 14285
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13481: LD_VAR 0 12
13485: PUSH
13486: LD_INT 3
13488: EQUAL
13489: PUSH
13490: LD_INT 49
13492: PUSH
13493: LD_VAR 0 5
13497: IN
13498: AND
13499: PUSH
13500: LD_INT 31
13502: PPUSH
13503: LD_VAR 0 16
13507: PPUSH
13508: CALL_OW 321
13512: PUSH
13513: LD_INT 2
13515: EQUAL
13516: AND
13517: IFFALSE 13577
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13519: LD_INT 22
13521: PUSH
13522: LD_VAR 0 16
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 35
13533: PUSH
13534: LD_INT 49
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: LD_INT 91
13543: PUSH
13544: LD_VAR 0 1
13548: PUSH
13549: LD_INT 10
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: LIST
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: LIST
13561: PPUSH
13562: CALL_OW 69
13566: NOT
13567: IFFALSE 13577
// weapon := ru_time_lapser ;
13569: LD_ADDR_VAR 0 18
13573: PUSH
13574: LD_INT 49
13576: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13577: LD_VAR 0 12
13581: PUSH
13582: LD_INT 1
13584: PUSH
13585: LD_INT 2
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: IN
13592: PUSH
13593: LD_INT 11
13595: PUSH
13596: LD_VAR 0 5
13600: IN
13601: PUSH
13602: LD_INT 30
13604: PUSH
13605: LD_VAR 0 5
13609: IN
13610: OR
13611: AND
13612: PUSH
13613: LD_INT 6
13615: PPUSH
13616: LD_VAR 0 16
13620: PPUSH
13621: CALL_OW 321
13625: PUSH
13626: LD_INT 2
13628: EQUAL
13629: AND
13630: IFFALSE 13795
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13632: LD_INT 22
13634: PUSH
13635: LD_VAR 0 16
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 2
13646: PUSH
13647: LD_INT 35
13649: PUSH
13650: LD_INT 11
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 35
13659: PUSH
13660: LD_INT 30
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: LIST
13671: PUSH
13672: LD_INT 91
13674: PUSH
13675: LD_VAR 0 1
13679: PUSH
13680: LD_INT 18
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: LIST
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: LIST
13692: PPUSH
13693: CALL_OW 69
13697: NOT
13698: PUSH
13699: LD_INT 22
13701: PUSH
13702: LD_VAR 0 16
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 2
13713: PUSH
13714: LD_INT 30
13716: PUSH
13717: LD_INT 32
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 30
13726: PUSH
13727: LD_INT 33
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: LIST
13738: PUSH
13739: LD_INT 91
13741: PUSH
13742: LD_VAR 0 1
13746: PUSH
13747: LD_INT 12
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: LIST
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: PPUSH
13763: CALL_OW 69
13767: PUSH
13768: LD_INT 2
13770: GREATER
13771: AND
13772: IFFALSE 13795
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13774: LD_ADDR_VAR 0 18
13778: PUSH
13779: LD_INT 11
13781: PUSH
13782: LD_INT 30
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: LD_VAR 0 12
13793: ARRAY
13794: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13795: LD_VAR 0 18
13799: NOT
13800: PUSH
13801: LD_INT 40
13803: PPUSH
13804: LD_VAR 0 16
13808: PPUSH
13809: CALL_OW 321
13813: PUSH
13814: LD_INT 2
13816: EQUAL
13817: AND
13818: PUSH
13819: LD_INT 7
13821: PUSH
13822: LD_VAR 0 5
13826: IN
13827: PUSH
13828: LD_INT 28
13830: PUSH
13831: LD_VAR 0 5
13835: IN
13836: OR
13837: PUSH
13838: LD_INT 45
13840: PUSH
13841: LD_VAR 0 5
13845: IN
13846: OR
13847: AND
13848: IFFALSE 14102
// begin hex := GetHexInfo ( x , y ) ;
13850: LD_ADDR_VAR 0 4
13854: PUSH
13855: LD_VAR 0 10
13859: PPUSH
13860: LD_VAR 0 11
13864: PPUSH
13865: CALL_OW 546
13869: ST_TO_ADDR
// if hex [ 1 ] then
13870: LD_VAR 0 4
13874: PUSH
13875: LD_INT 1
13877: ARRAY
13878: IFFALSE 13882
// exit ;
13880: GO 14285
// height := hex [ 2 ] ;
13882: LD_ADDR_VAR 0 15
13886: PUSH
13887: LD_VAR 0 4
13891: PUSH
13892: LD_INT 2
13894: ARRAY
13895: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13896: LD_ADDR_VAR 0 14
13900: PUSH
13901: LD_INT 0
13903: PUSH
13904: LD_INT 2
13906: PUSH
13907: LD_INT 3
13909: PUSH
13910: LD_INT 5
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: ST_TO_ADDR
// for i in tmp do
13919: LD_ADDR_VAR 0 8
13923: PUSH
13924: LD_VAR 0 14
13928: PUSH
13929: FOR_IN
13930: IFFALSE 14100
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13932: LD_ADDR_VAR 0 9
13936: PUSH
13937: LD_VAR 0 10
13941: PPUSH
13942: LD_VAR 0 8
13946: PPUSH
13947: LD_INT 5
13949: PPUSH
13950: CALL_OW 272
13954: PUSH
13955: LD_VAR 0 11
13959: PPUSH
13960: LD_VAR 0 8
13964: PPUSH
13965: LD_INT 5
13967: PPUSH
13968: CALL_OW 273
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13977: LD_VAR 0 9
13981: PUSH
13982: LD_INT 1
13984: ARRAY
13985: PPUSH
13986: LD_VAR 0 9
13990: PUSH
13991: LD_INT 2
13993: ARRAY
13994: PPUSH
13995: CALL_OW 488
13999: IFFALSE 14098
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14001: LD_ADDR_VAR 0 4
14005: PUSH
14006: LD_VAR 0 9
14010: PUSH
14011: LD_INT 1
14013: ARRAY
14014: PPUSH
14015: LD_VAR 0 9
14019: PUSH
14020: LD_INT 2
14022: ARRAY
14023: PPUSH
14024: CALL_OW 546
14028: ST_TO_ADDR
// if hex [ 1 ] then
14029: LD_VAR 0 4
14033: PUSH
14034: LD_INT 1
14036: ARRAY
14037: IFFALSE 14041
// continue ;
14039: GO 13929
// h := hex [ 2 ] ;
14041: LD_ADDR_VAR 0 13
14045: PUSH
14046: LD_VAR 0 4
14050: PUSH
14051: LD_INT 2
14053: ARRAY
14054: ST_TO_ADDR
// if h + 7 < height then
14055: LD_VAR 0 13
14059: PUSH
14060: LD_INT 7
14062: PLUS
14063: PUSH
14064: LD_VAR 0 15
14068: LESS
14069: IFFALSE 14098
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14071: LD_ADDR_VAR 0 18
14075: PUSH
14076: LD_INT 7
14078: PUSH
14079: LD_INT 28
14081: PUSH
14082: LD_INT 45
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: LIST
14089: PUSH
14090: LD_VAR 0 12
14094: ARRAY
14095: ST_TO_ADDR
// break ;
14096: GO 14100
// end ; end ; end ;
14098: GO 13929
14100: POP
14101: POP
// end ; if not weapon then
14102: LD_VAR 0 18
14106: NOT
14107: IFFALSE 14167
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14109: LD_ADDR_VAR 0 5
14113: PUSH
14114: LD_VAR 0 5
14118: PUSH
14119: LD_INT 11
14121: PUSH
14122: LD_INT 30
14124: PUSH
14125: LD_INT 49
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: LIST
14132: DIFF
14133: ST_TO_ADDR
// if not list then
14134: LD_VAR 0 5
14138: NOT
14139: IFFALSE 14143
// exit ;
14141: GO 14285
// weapon := list [ rand ( 1 , list ) ] ;
14143: LD_ADDR_VAR 0 18
14147: PUSH
14148: LD_VAR 0 5
14152: PUSH
14153: LD_INT 1
14155: PPUSH
14156: LD_VAR 0 5
14160: PPUSH
14161: CALL_OW 12
14165: ARRAY
14166: ST_TO_ADDR
// end ; if weapon then
14167: LD_VAR 0 18
14171: IFFALSE 14285
// begin tmp := CostOfWeapon ( weapon ) ;
14173: LD_ADDR_VAR 0 14
14177: PUSH
14178: LD_VAR 0 18
14182: PPUSH
14183: CALL_OW 451
14187: ST_TO_ADDR
// j := GetBase ( tower ) ;
14188: LD_ADDR_VAR 0 9
14192: PUSH
14193: LD_VAR 0 1
14197: PPUSH
14198: CALL_OW 274
14202: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14203: LD_VAR 0 9
14207: PPUSH
14208: LD_INT 1
14210: PPUSH
14211: CALL_OW 275
14215: PUSH
14216: LD_VAR 0 14
14220: PUSH
14221: LD_INT 1
14223: ARRAY
14224: GREATEREQUAL
14225: PUSH
14226: LD_VAR 0 9
14230: PPUSH
14231: LD_INT 2
14233: PPUSH
14234: CALL_OW 275
14238: PUSH
14239: LD_VAR 0 14
14243: PUSH
14244: LD_INT 2
14246: ARRAY
14247: GREATEREQUAL
14248: AND
14249: PUSH
14250: LD_VAR 0 9
14254: PPUSH
14255: LD_INT 3
14257: PPUSH
14258: CALL_OW 275
14262: PUSH
14263: LD_VAR 0 14
14267: PUSH
14268: LD_INT 3
14270: ARRAY
14271: GREATEREQUAL
14272: AND
14273: IFFALSE 14285
// result := weapon ;
14275: LD_ADDR_VAR 0 3
14279: PUSH
14280: LD_VAR 0 18
14284: ST_TO_ADDR
// end ; end ;
14285: LD_VAR 0 3
14289: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14290: LD_INT 0
14292: PPUSH
14293: PPUSH
// result := true ;
14294: LD_ADDR_VAR 0 3
14298: PUSH
14299: LD_INT 1
14301: ST_TO_ADDR
// if array1 = array2 then
14302: LD_VAR 0 1
14306: PUSH
14307: LD_VAR 0 2
14311: EQUAL
14312: IFFALSE 14372
// begin for i = 1 to array1 do
14314: LD_ADDR_VAR 0 4
14318: PUSH
14319: DOUBLE
14320: LD_INT 1
14322: DEC
14323: ST_TO_ADDR
14324: LD_VAR 0 1
14328: PUSH
14329: FOR_TO
14330: IFFALSE 14368
// if array1 [ i ] <> array2 [ i ] then
14332: LD_VAR 0 1
14336: PUSH
14337: LD_VAR 0 4
14341: ARRAY
14342: PUSH
14343: LD_VAR 0 2
14347: PUSH
14348: LD_VAR 0 4
14352: ARRAY
14353: NONEQUAL
14354: IFFALSE 14366
// begin result := false ;
14356: LD_ADDR_VAR 0 3
14360: PUSH
14361: LD_INT 0
14363: ST_TO_ADDR
// break ;
14364: GO 14368
// end ;
14366: GO 14329
14368: POP
14369: POP
// end else
14370: GO 14380
// result := false ;
14372: LD_ADDR_VAR 0 3
14376: PUSH
14377: LD_INT 0
14379: ST_TO_ADDR
// end ;
14380: LD_VAR 0 3
14384: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14385: LD_INT 0
14387: PPUSH
14388: PPUSH
// if not array1 or not array2 then
14389: LD_VAR 0 1
14393: NOT
14394: PUSH
14395: LD_VAR 0 2
14399: NOT
14400: OR
14401: IFFALSE 14405
// exit ;
14403: GO 14469
// result := true ;
14405: LD_ADDR_VAR 0 3
14409: PUSH
14410: LD_INT 1
14412: ST_TO_ADDR
// for i = 1 to array1 do
14413: LD_ADDR_VAR 0 4
14417: PUSH
14418: DOUBLE
14419: LD_INT 1
14421: DEC
14422: ST_TO_ADDR
14423: LD_VAR 0 1
14427: PUSH
14428: FOR_TO
14429: IFFALSE 14467
// if array1 [ i ] <> array2 [ i ] then
14431: LD_VAR 0 1
14435: PUSH
14436: LD_VAR 0 4
14440: ARRAY
14441: PUSH
14442: LD_VAR 0 2
14446: PUSH
14447: LD_VAR 0 4
14451: ARRAY
14452: NONEQUAL
14453: IFFALSE 14465
// begin result := false ;
14455: LD_ADDR_VAR 0 3
14459: PUSH
14460: LD_INT 0
14462: ST_TO_ADDR
// break ;
14463: GO 14467
// end ;
14465: GO 14428
14467: POP
14468: POP
// end ;
14469: LD_VAR 0 3
14473: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14474: LD_INT 0
14476: PPUSH
14477: PPUSH
14478: PPUSH
// pom := GetBase ( fac ) ;
14479: LD_ADDR_VAR 0 5
14483: PUSH
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 274
14493: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14494: LD_ADDR_VAR 0 4
14498: PUSH
14499: LD_VAR 0 2
14503: PUSH
14504: LD_INT 1
14506: ARRAY
14507: PPUSH
14508: LD_VAR 0 2
14512: PUSH
14513: LD_INT 2
14515: ARRAY
14516: PPUSH
14517: LD_VAR 0 2
14521: PUSH
14522: LD_INT 3
14524: ARRAY
14525: PPUSH
14526: LD_VAR 0 2
14530: PUSH
14531: LD_INT 4
14533: ARRAY
14534: PPUSH
14535: CALL_OW 449
14539: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14540: LD_ADDR_VAR 0 3
14544: PUSH
14545: LD_VAR 0 5
14549: PPUSH
14550: LD_INT 1
14552: PPUSH
14553: CALL_OW 275
14557: PUSH
14558: LD_VAR 0 4
14562: PUSH
14563: LD_INT 1
14565: ARRAY
14566: GREATEREQUAL
14567: PUSH
14568: LD_VAR 0 5
14572: PPUSH
14573: LD_INT 2
14575: PPUSH
14576: CALL_OW 275
14580: PUSH
14581: LD_VAR 0 4
14585: PUSH
14586: LD_INT 2
14588: ARRAY
14589: GREATEREQUAL
14590: AND
14591: PUSH
14592: LD_VAR 0 5
14596: PPUSH
14597: LD_INT 3
14599: PPUSH
14600: CALL_OW 275
14604: PUSH
14605: LD_VAR 0 4
14609: PUSH
14610: LD_INT 3
14612: ARRAY
14613: GREATEREQUAL
14614: AND
14615: ST_TO_ADDR
// end ;
14616: LD_VAR 0 3
14620: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14621: LD_INT 0
14623: PPUSH
14624: PPUSH
14625: PPUSH
14626: PPUSH
// pom := GetBase ( building ) ;
14627: LD_ADDR_VAR 0 3
14631: PUSH
14632: LD_VAR 0 1
14636: PPUSH
14637: CALL_OW 274
14641: ST_TO_ADDR
// if not pom then
14642: LD_VAR 0 3
14646: NOT
14647: IFFALSE 14651
// exit ;
14649: GO 14821
// btype := GetBType ( building ) ;
14651: LD_ADDR_VAR 0 5
14655: PUSH
14656: LD_VAR 0 1
14660: PPUSH
14661: CALL_OW 266
14665: ST_TO_ADDR
// if btype = b_armoury then
14666: LD_VAR 0 5
14670: PUSH
14671: LD_INT 4
14673: EQUAL
14674: IFFALSE 14684
// btype := b_barracks ;
14676: LD_ADDR_VAR 0 5
14680: PUSH
14681: LD_INT 5
14683: ST_TO_ADDR
// if btype = b_depot then
14684: LD_VAR 0 5
14688: PUSH
14689: LD_INT 0
14691: EQUAL
14692: IFFALSE 14702
// btype := b_warehouse ;
14694: LD_ADDR_VAR 0 5
14698: PUSH
14699: LD_INT 1
14701: ST_TO_ADDR
// if btype = b_workshop then
14702: LD_VAR 0 5
14706: PUSH
14707: LD_INT 2
14709: EQUAL
14710: IFFALSE 14720
// btype := b_factory ;
14712: LD_ADDR_VAR 0 5
14716: PUSH
14717: LD_INT 3
14719: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14720: LD_ADDR_VAR 0 4
14724: PUSH
14725: LD_VAR 0 5
14729: PPUSH
14730: LD_VAR 0 1
14734: PPUSH
14735: CALL_OW 248
14739: PPUSH
14740: CALL_OW 450
14744: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14745: LD_ADDR_VAR 0 2
14749: PUSH
14750: LD_VAR 0 3
14754: PPUSH
14755: LD_INT 1
14757: PPUSH
14758: CALL_OW 275
14762: PUSH
14763: LD_VAR 0 4
14767: PUSH
14768: LD_INT 1
14770: ARRAY
14771: GREATEREQUAL
14772: PUSH
14773: LD_VAR 0 3
14777: PPUSH
14778: LD_INT 2
14780: PPUSH
14781: CALL_OW 275
14785: PUSH
14786: LD_VAR 0 4
14790: PUSH
14791: LD_INT 2
14793: ARRAY
14794: GREATEREQUAL
14795: AND
14796: PUSH
14797: LD_VAR 0 3
14801: PPUSH
14802: LD_INT 3
14804: PPUSH
14805: CALL_OW 275
14809: PUSH
14810: LD_VAR 0 4
14814: PUSH
14815: LD_INT 3
14817: ARRAY
14818: GREATEREQUAL
14819: AND
14820: ST_TO_ADDR
// end ;
14821: LD_VAR 0 2
14825: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14826: LD_INT 0
14828: PPUSH
14829: PPUSH
14830: PPUSH
// pom := GetBase ( building ) ;
14831: LD_ADDR_VAR 0 4
14835: PUSH
14836: LD_VAR 0 1
14840: PPUSH
14841: CALL_OW 274
14845: ST_TO_ADDR
// if not pom then
14846: LD_VAR 0 4
14850: NOT
14851: IFFALSE 14855
// exit ;
14853: GO 14956
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14855: LD_ADDR_VAR 0 5
14859: PUSH
14860: LD_VAR 0 2
14864: PPUSH
14865: LD_VAR 0 1
14869: PPUSH
14870: CALL_OW 248
14874: PPUSH
14875: CALL_OW 450
14879: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14880: LD_ADDR_VAR 0 3
14884: PUSH
14885: LD_VAR 0 4
14889: PPUSH
14890: LD_INT 1
14892: PPUSH
14893: CALL_OW 275
14897: PUSH
14898: LD_VAR 0 5
14902: PUSH
14903: LD_INT 1
14905: ARRAY
14906: GREATEREQUAL
14907: PUSH
14908: LD_VAR 0 4
14912: PPUSH
14913: LD_INT 2
14915: PPUSH
14916: CALL_OW 275
14920: PUSH
14921: LD_VAR 0 5
14925: PUSH
14926: LD_INT 2
14928: ARRAY
14929: GREATEREQUAL
14930: AND
14931: PUSH
14932: LD_VAR 0 4
14936: PPUSH
14937: LD_INT 3
14939: PPUSH
14940: CALL_OW 275
14944: PUSH
14945: LD_VAR 0 5
14949: PUSH
14950: LD_INT 3
14952: ARRAY
14953: GREATEREQUAL
14954: AND
14955: ST_TO_ADDR
// end ;
14956: LD_VAR 0 3
14960: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14961: LD_INT 0
14963: PPUSH
14964: PPUSH
14965: PPUSH
14966: PPUSH
14967: PPUSH
14968: PPUSH
14969: PPUSH
14970: PPUSH
14971: PPUSH
14972: PPUSH
14973: PPUSH
// result := false ;
14974: LD_ADDR_VAR 0 8
14978: PUSH
14979: LD_INT 0
14981: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14982: LD_VAR 0 5
14986: NOT
14987: PUSH
14988: LD_VAR 0 1
14992: NOT
14993: OR
14994: PUSH
14995: LD_VAR 0 2
14999: NOT
15000: OR
15001: PUSH
15002: LD_VAR 0 3
15006: NOT
15007: OR
15008: IFFALSE 15012
// exit ;
15010: GO 15826
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15012: LD_ADDR_VAR 0 14
15016: PUSH
15017: LD_VAR 0 1
15021: PPUSH
15022: LD_VAR 0 2
15026: PPUSH
15027: LD_VAR 0 3
15031: PPUSH
15032: LD_VAR 0 4
15036: PPUSH
15037: LD_VAR 0 5
15041: PUSH
15042: LD_INT 1
15044: ARRAY
15045: PPUSH
15046: CALL_OW 248
15050: PPUSH
15051: LD_INT 0
15053: PPUSH
15054: CALL 17079 0 6
15058: ST_TO_ADDR
// if not hexes then
15059: LD_VAR 0 14
15063: NOT
15064: IFFALSE 15068
// exit ;
15066: GO 15826
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15068: LD_ADDR_VAR 0 17
15072: PUSH
15073: LD_VAR 0 5
15077: PPUSH
15078: LD_INT 22
15080: PUSH
15081: LD_VAR 0 13
15085: PPUSH
15086: CALL_OW 255
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: PUSH
15095: LD_INT 2
15097: PUSH
15098: LD_INT 30
15100: PUSH
15101: LD_INT 0
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: LD_INT 30
15110: PUSH
15111: LD_INT 1
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PPUSH
15127: CALL_OW 72
15131: ST_TO_ADDR
// for i = 1 to hexes do
15132: LD_ADDR_VAR 0 9
15136: PUSH
15137: DOUBLE
15138: LD_INT 1
15140: DEC
15141: ST_TO_ADDR
15142: LD_VAR 0 14
15146: PUSH
15147: FOR_TO
15148: IFFALSE 15824
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15150: LD_ADDR_VAR 0 13
15154: PUSH
15155: LD_VAR 0 14
15159: PUSH
15160: LD_VAR 0 9
15164: ARRAY
15165: PUSH
15166: LD_INT 1
15168: ARRAY
15169: PPUSH
15170: LD_VAR 0 14
15174: PUSH
15175: LD_VAR 0 9
15179: ARRAY
15180: PUSH
15181: LD_INT 2
15183: ARRAY
15184: PPUSH
15185: CALL_OW 428
15189: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15190: LD_VAR 0 14
15194: PUSH
15195: LD_VAR 0 9
15199: ARRAY
15200: PUSH
15201: LD_INT 1
15203: ARRAY
15204: PPUSH
15205: LD_VAR 0 14
15209: PUSH
15210: LD_VAR 0 9
15214: ARRAY
15215: PUSH
15216: LD_INT 2
15218: ARRAY
15219: PPUSH
15220: CALL_OW 351
15224: PUSH
15225: LD_VAR 0 14
15229: PUSH
15230: LD_VAR 0 9
15234: ARRAY
15235: PUSH
15236: LD_INT 1
15238: ARRAY
15239: PPUSH
15240: LD_VAR 0 14
15244: PUSH
15245: LD_VAR 0 9
15249: ARRAY
15250: PUSH
15251: LD_INT 2
15253: ARRAY
15254: PPUSH
15255: CALL_OW 488
15259: NOT
15260: OR
15261: PUSH
15262: LD_VAR 0 13
15266: PPUSH
15267: CALL_OW 247
15271: PUSH
15272: LD_INT 3
15274: EQUAL
15275: OR
15276: IFFALSE 15282
// exit ;
15278: POP
15279: POP
15280: GO 15826
// if not tmp then
15282: LD_VAR 0 13
15286: NOT
15287: IFFALSE 15291
// continue ;
15289: GO 15147
// result := true ;
15291: LD_ADDR_VAR 0 8
15295: PUSH
15296: LD_INT 1
15298: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15299: LD_VAR 0 6
15303: PUSH
15304: LD_VAR 0 13
15308: PPUSH
15309: CALL_OW 247
15313: PUSH
15314: LD_INT 2
15316: EQUAL
15317: AND
15318: PUSH
15319: LD_VAR 0 13
15323: PPUSH
15324: CALL_OW 263
15328: PUSH
15329: LD_INT 1
15331: EQUAL
15332: AND
15333: IFFALSE 15497
// begin if IsDrivenBy ( tmp ) then
15335: LD_VAR 0 13
15339: PPUSH
15340: CALL_OW 311
15344: IFFALSE 15348
// continue ;
15346: GO 15147
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15348: LD_VAR 0 6
15352: PPUSH
15353: LD_INT 3
15355: PUSH
15356: LD_INT 60
15358: PUSH
15359: EMPTY
15360: LIST
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 3
15368: PUSH
15369: LD_INT 55
15371: PUSH
15372: EMPTY
15373: LIST
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: PPUSH
15383: CALL_OW 72
15387: IFFALSE 15495
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15389: LD_ADDR_VAR 0 18
15393: PUSH
15394: LD_VAR 0 6
15398: PPUSH
15399: LD_INT 3
15401: PUSH
15402: LD_INT 60
15404: PUSH
15405: EMPTY
15406: LIST
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 3
15414: PUSH
15415: LD_INT 55
15417: PUSH
15418: EMPTY
15419: LIST
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PPUSH
15429: CALL_OW 72
15433: PUSH
15434: LD_INT 1
15436: ARRAY
15437: ST_TO_ADDR
// if IsInUnit ( driver ) then
15438: LD_VAR 0 18
15442: PPUSH
15443: CALL_OW 310
15447: IFFALSE 15458
// ComExit ( driver ) ;
15449: LD_VAR 0 18
15453: PPUSH
15454: CALL 40860 0 1
// AddComEnterUnit ( driver , tmp ) ;
15458: LD_VAR 0 18
15462: PPUSH
15463: LD_VAR 0 13
15467: PPUSH
15468: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15472: LD_VAR 0 18
15476: PPUSH
15477: LD_VAR 0 7
15481: PPUSH
15482: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15486: LD_VAR 0 18
15490: PPUSH
15491: CALL_OW 181
// end ; continue ;
15495: GO 15147
// end ; if not cleaners or not tmp in cleaners then
15497: LD_VAR 0 6
15501: NOT
15502: PUSH
15503: LD_VAR 0 13
15507: PUSH
15508: LD_VAR 0 6
15512: IN
15513: NOT
15514: OR
15515: IFFALSE 15822
// begin if dep then
15517: LD_VAR 0 17
15521: IFFALSE 15657
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15523: LD_ADDR_VAR 0 16
15527: PUSH
15528: LD_VAR 0 17
15532: PUSH
15533: LD_INT 1
15535: ARRAY
15536: PPUSH
15537: CALL_OW 250
15541: PPUSH
15542: LD_VAR 0 17
15546: PUSH
15547: LD_INT 1
15549: ARRAY
15550: PPUSH
15551: CALL_OW 254
15555: PPUSH
15556: LD_INT 5
15558: PPUSH
15559: CALL_OW 272
15563: PUSH
15564: LD_VAR 0 17
15568: PUSH
15569: LD_INT 1
15571: ARRAY
15572: PPUSH
15573: CALL_OW 251
15577: PPUSH
15578: LD_VAR 0 17
15582: PUSH
15583: LD_INT 1
15585: ARRAY
15586: PPUSH
15587: CALL_OW 254
15591: PPUSH
15592: LD_INT 5
15594: PPUSH
15595: CALL_OW 273
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15604: LD_VAR 0 16
15608: PUSH
15609: LD_INT 1
15611: ARRAY
15612: PPUSH
15613: LD_VAR 0 16
15617: PUSH
15618: LD_INT 2
15620: ARRAY
15621: PPUSH
15622: CALL_OW 488
15626: IFFALSE 15657
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15628: LD_VAR 0 13
15632: PPUSH
15633: LD_VAR 0 16
15637: PUSH
15638: LD_INT 1
15640: ARRAY
15641: PPUSH
15642: LD_VAR 0 16
15646: PUSH
15647: LD_INT 2
15649: ARRAY
15650: PPUSH
15651: CALL_OW 111
// continue ;
15655: GO 15147
// end ; end ; r := GetDir ( tmp ) ;
15657: LD_ADDR_VAR 0 15
15661: PUSH
15662: LD_VAR 0 13
15666: PPUSH
15667: CALL_OW 254
15671: ST_TO_ADDR
// if r = 5 then
15672: LD_VAR 0 15
15676: PUSH
15677: LD_INT 5
15679: EQUAL
15680: IFFALSE 15690
// r := 0 ;
15682: LD_ADDR_VAR 0 15
15686: PUSH
15687: LD_INT 0
15689: ST_TO_ADDR
// for j = r to 5 do
15690: LD_ADDR_VAR 0 10
15694: PUSH
15695: DOUBLE
15696: LD_VAR 0 15
15700: DEC
15701: ST_TO_ADDR
15702: LD_INT 5
15704: PUSH
15705: FOR_TO
15706: IFFALSE 15820
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15708: LD_ADDR_VAR 0 11
15712: PUSH
15713: LD_VAR 0 13
15717: PPUSH
15718: CALL_OW 250
15722: PPUSH
15723: LD_VAR 0 10
15727: PPUSH
15728: LD_INT 2
15730: PPUSH
15731: CALL_OW 272
15735: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15736: LD_ADDR_VAR 0 12
15740: PUSH
15741: LD_VAR 0 13
15745: PPUSH
15746: CALL_OW 251
15750: PPUSH
15751: LD_VAR 0 10
15755: PPUSH
15756: LD_INT 2
15758: PPUSH
15759: CALL_OW 273
15763: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15764: LD_VAR 0 11
15768: PPUSH
15769: LD_VAR 0 12
15773: PPUSH
15774: CALL_OW 488
15778: PUSH
15779: LD_VAR 0 11
15783: PPUSH
15784: LD_VAR 0 12
15788: PPUSH
15789: CALL_OW 428
15793: NOT
15794: AND
15795: IFFALSE 15818
// begin ComMoveXY ( tmp , _x , _y ) ;
15797: LD_VAR 0 13
15801: PPUSH
15802: LD_VAR 0 11
15806: PPUSH
15807: LD_VAR 0 12
15811: PPUSH
15812: CALL_OW 111
// break ;
15816: GO 15820
// end ; end ;
15818: GO 15705
15820: POP
15821: POP
// end ; end ;
15822: GO 15147
15824: POP
15825: POP
// end ;
15826: LD_VAR 0 8
15830: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15831: LD_INT 0
15833: PPUSH
// result := true ;
15834: LD_ADDR_VAR 0 3
15838: PUSH
15839: LD_INT 1
15841: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15842: LD_VAR 0 2
15846: PUSH
15847: LD_INT 24
15849: DOUBLE
15850: EQUAL
15851: IFTRUE 15861
15853: LD_INT 33
15855: DOUBLE
15856: EQUAL
15857: IFTRUE 15861
15859: GO 15886
15861: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15862: LD_ADDR_VAR 0 3
15866: PUSH
15867: LD_INT 32
15869: PPUSH
15870: LD_VAR 0 1
15874: PPUSH
15875: CALL_OW 321
15879: PUSH
15880: LD_INT 2
15882: EQUAL
15883: ST_TO_ADDR
15884: GO 16202
15886: LD_INT 20
15888: DOUBLE
15889: EQUAL
15890: IFTRUE 15894
15892: GO 15919
15894: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15895: LD_ADDR_VAR 0 3
15899: PUSH
15900: LD_INT 6
15902: PPUSH
15903: LD_VAR 0 1
15907: PPUSH
15908: CALL_OW 321
15912: PUSH
15913: LD_INT 2
15915: EQUAL
15916: ST_TO_ADDR
15917: GO 16202
15919: LD_INT 22
15921: DOUBLE
15922: EQUAL
15923: IFTRUE 15933
15925: LD_INT 36
15927: DOUBLE
15928: EQUAL
15929: IFTRUE 15933
15931: GO 15958
15933: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15934: LD_ADDR_VAR 0 3
15938: PUSH
15939: LD_INT 15
15941: PPUSH
15942: LD_VAR 0 1
15946: PPUSH
15947: CALL_OW 321
15951: PUSH
15952: LD_INT 2
15954: EQUAL
15955: ST_TO_ADDR
15956: GO 16202
15958: LD_INT 30
15960: DOUBLE
15961: EQUAL
15962: IFTRUE 15966
15964: GO 15991
15966: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15967: LD_ADDR_VAR 0 3
15971: PUSH
15972: LD_INT 20
15974: PPUSH
15975: LD_VAR 0 1
15979: PPUSH
15980: CALL_OW 321
15984: PUSH
15985: LD_INT 2
15987: EQUAL
15988: ST_TO_ADDR
15989: GO 16202
15991: LD_INT 28
15993: DOUBLE
15994: EQUAL
15995: IFTRUE 16005
15997: LD_INT 21
15999: DOUBLE
16000: EQUAL
16001: IFTRUE 16005
16003: GO 16030
16005: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16006: LD_ADDR_VAR 0 3
16010: PUSH
16011: LD_INT 21
16013: PPUSH
16014: LD_VAR 0 1
16018: PPUSH
16019: CALL_OW 321
16023: PUSH
16024: LD_INT 2
16026: EQUAL
16027: ST_TO_ADDR
16028: GO 16202
16030: LD_INT 16
16032: DOUBLE
16033: EQUAL
16034: IFTRUE 16038
16036: GO 16063
16038: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16039: LD_ADDR_VAR 0 3
16043: PUSH
16044: LD_INT 84
16046: PPUSH
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 321
16056: PUSH
16057: LD_INT 2
16059: EQUAL
16060: ST_TO_ADDR
16061: GO 16202
16063: LD_INT 19
16065: DOUBLE
16066: EQUAL
16067: IFTRUE 16077
16069: LD_INT 23
16071: DOUBLE
16072: EQUAL
16073: IFTRUE 16077
16075: GO 16102
16077: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16078: LD_ADDR_VAR 0 3
16082: PUSH
16083: LD_INT 83
16085: PPUSH
16086: LD_VAR 0 1
16090: PPUSH
16091: CALL_OW 321
16095: PUSH
16096: LD_INT 2
16098: EQUAL
16099: ST_TO_ADDR
16100: GO 16202
16102: LD_INT 17
16104: DOUBLE
16105: EQUAL
16106: IFTRUE 16110
16108: GO 16135
16110: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16111: LD_ADDR_VAR 0 3
16115: PUSH
16116: LD_INT 39
16118: PPUSH
16119: LD_VAR 0 1
16123: PPUSH
16124: CALL_OW 321
16128: PUSH
16129: LD_INT 2
16131: EQUAL
16132: ST_TO_ADDR
16133: GO 16202
16135: LD_INT 18
16137: DOUBLE
16138: EQUAL
16139: IFTRUE 16143
16141: GO 16168
16143: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16144: LD_ADDR_VAR 0 3
16148: PUSH
16149: LD_INT 40
16151: PPUSH
16152: LD_VAR 0 1
16156: PPUSH
16157: CALL_OW 321
16161: PUSH
16162: LD_INT 2
16164: EQUAL
16165: ST_TO_ADDR
16166: GO 16202
16168: LD_INT 27
16170: DOUBLE
16171: EQUAL
16172: IFTRUE 16176
16174: GO 16201
16176: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16177: LD_ADDR_VAR 0 3
16181: PUSH
16182: LD_INT 35
16184: PPUSH
16185: LD_VAR 0 1
16189: PPUSH
16190: CALL_OW 321
16194: PUSH
16195: LD_INT 2
16197: EQUAL
16198: ST_TO_ADDR
16199: GO 16202
16201: POP
// end ;
16202: LD_VAR 0 3
16206: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16207: LD_INT 0
16209: PPUSH
16210: PPUSH
16211: PPUSH
16212: PPUSH
16213: PPUSH
16214: PPUSH
16215: PPUSH
16216: PPUSH
16217: PPUSH
16218: PPUSH
16219: PPUSH
// result := false ;
16220: LD_ADDR_VAR 0 6
16224: PUSH
16225: LD_INT 0
16227: ST_TO_ADDR
// if btype = b_depot then
16228: LD_VAR 0 2
16232: PUSH
16233: LD_INT 0
16235: EQUAL
16236: IFFALSE 16248
// begin result := true ;
16238: LD_ADDR_VAR 0 6
16242: PUSH
16243: LD_INT 1
16245: ST_TO_ADDR
// exit ;
16246: GO 17074
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16248: LD_VAR 0 1
16252: NOT
16253: PUSH
16254: LD_VAR 0 1
16258: PPUSH
16259: CALL_OW 266
16263: PUSH
16264: LD_INT 0
16266: PUSH
16267: LD_INT 1
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: IN
16274: NOT
16275: OR
16276: PUSH
16277: LD_VAR 0 2
16281: NOT
16282: OR
16283: PUSH
16284: LD_VAR 0 5
16288: PUSH
16289: LD_INT 0
16291: PUSH
16292: LD_INT 1
16294: PUSH
16295: LD_INT 2
16297: PUSH
16298: LD_INT 3
16300: PUSH
16301: LD_INT 4
16303: PUSH
16304: LD_INT 5
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: IN
16315: NOT
16316: OR
16317: PUSH
16318: LD_VAR 0 3
16322: PPUSH
16323: LD_VAR 0 4
16327: PPUSH
16328: CALL_OW 488
16332: NOT
16333: OR
16334: IFFALSE 16338
// exit ;
16336: GO 17074
// side := GetSide ( depot ) ;
16338: LD_ADDR_VAR 0 9
16342: PUSH
16343: LD_VAR 0 1
16347: PPUSH
16348: CALL_OW 255
16352: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16353: LD_VAR 0 9
16357: PPUSH
16358: LD_VAR 0 2
16362: PPUSH
16363: CALL 15831 0 2
16367: NOT
16368: IFFALSE 16372
// exit ;
16370: GO 17074
// pom := GetBase ( depot ) ;
16372: LD_ADDR_VAR 0 10
16376: PUSH
16377: LD_VAR 0 1
16381: PPUSH
16382: CALL_OW 274
16386: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16387: LD_ADDR_VAR 0 11
16391: PUSH
16392: LD_VAR 0 2
16396: PPUSH
16397: LD_VAR 0 1
16401: PPUSH
16402: CALL_OW 248
16406: PPUSH
16407: CALL_OW 450
16411: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16412: LD_VAR 0 10
16416: PPUSH
16417: LD_INT 1
16419: PPUSH
16420: CALL_OW 275
16424: PUSH
16425: LD_VAR 0 11
16429: PUSH
16430: LD_INT 1
16432: ARRAY
16433: GREATEREQUAL
16434: PUSH
16435: LD_VAR 0 10
16439: PPUSH
16440: LD_INT 2
16442: PPUSH
16443: CALL_OW 275
16447: PUSH
16448: LD_VAR 0 11
16452: PUSH
16453: LD_INT 2
16455: ARRAY
16456: GREATEREQUAL
16457: AND
16458: PUSH
16459: LD_VAR 0 10
16463: PPUSH
16464: LD_INT 3
16466: PPUSH
16467: CALL_OW 275
16471: PUSH
16472: LD_VAR 0 11
16476: PUSH
16477: LD_INT 3
16479: ARRAY
16480: GREATEREQUAL
16481: AND
16482: NOT
16483: IFFALSE 16487
// exit ;
16485: GO 17074
// if GetBType ( depot ) = b_depot then
16487: LD_VAR 0 1
16491: PPUSH
16492: CALL_OW 266
16496: PUSH
16497: LD_INT 0
16499: EQUAL
16500: IFFALSE 16512
// dist := 28 else
16502: LD_ADDR_VAR 0 14
16506: PUSH
16507: LD_INT 28
16509: ST_TO_ADDR
16510: GO 16520
// dist := 36 ;
16512: LD_ADDR_VAR 0 14
16516: PUSH
16517: LD_INT 36
16519: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16520: LD_VAR 0 1
16524: PPUSH
16525: LD_VAR 0 3
16529: PPUSH
16530: LD_VAR 0 4
16534: PPUSH
16535: CALL_OW 297
16539: PUSH
16540: LD_VAR 0 14
16544: GREATER
16545: IFFALSE 16549
// exit ;
16547: GO 17074
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16549: LD_ADDR_VAR 0 12
16553: PUSH
16554: LD_VAR 0 2
16558: PPUSH
16559: LD_VAR 0 3
16563: PPUSH
16564: LD_VAR 0 4
16568: PPUSH
16569: LD_VAR 0 5
16573: PPUSH
16574: LD_VAR 0 1
16578: PPUSH
16579: CALL_OW 248
16583: PPUSH
16584: LD_INT 0
16586: PPUSH
16587: CALL 17079 0 6
16591: ST_TO_ADDR
// if not hexes then
16592: LD_VAR 0 12
16596: NOT
16597: IFFALSE 16601
// exit ;
16599: GO 17074
// hex := GetHexInfo ( x , y ) ;
16601: LD_ADDR_VAR 0 15
16605: PUSH
16606: LD_VAR 0 3
16610: PPUSH
16611: LD_VAR 0 4
16615: PPUSH
16616: CALL_OW 546
16620: ST_TO_ADDR
// if hex [ 1 ] then
16621: LD_VAR 0 15
16625: PUSH
16626: LD_INT 1
16628: ARRAY
16629: IFFALSE 16633
// exit ;
16631: GO 17074
// height := hex [ 2 ] ;
16633: LD_ADDR_VAR 0 13
16637: PUSH
16638: LD_VAR 0 15
16642: PUSH
16643: LD_INT 2
16645: ARRAY
16646: ST_TO_ADDR
// for i = 1 to hexes do
16647: LD_ADDR_VAR 0 7
16651: PUSH
16652: DOUBLE
16653: LD_INT 1
16655: DEC
16656: ST_TO_ADDR
16657: LD_VAR 0 12
16661: PUSH
16662: FOR_TO
16663: IFFALSE 16993
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16665: LD_VAR 0 12
16669: PUSH
16670: LD_VAR 0 7
16674: ARRAY
16675: PUSH
16676: LD_INT 1
16678: ARRAY
16679: PPUSH
16680: LD_VAR 0 12
16684: PUSH
16685: LD_VAR 0 7
16689: ARRAY
16690: PUSH
16691: LD_INT 2
16693: ARRAY
16694: PPUSH
16695: CALL_OW 488
16699: NOT
16700: PUSH
16701: LD_VAR 0 12
16705: PUSH
16706: LD_VAR 0 7
16710: ARRAY
16711: PUSH
16712: LD_INT 1
16714: ARRAY
16715: PPUSH
16716: LD_VAR 0 12
16720: PUSH
16721: LD_VAR 0 7
16725: ARRAY
16726: PUSH
16727: LD_INT 2
16729: ARRAY
16730: PPUSH
16731: CALL_OW 428
16735: PUSH
16736: LD_INT 0
16738: GREATER
16739: OR
16740: PUSH
16741: LD_VAR 0 12
16745: PUSH
16746: LD_VAR 0 7
16750: ARRAY
16751: PUSH
16752: LD_INT 1
16754: ARRAY
16755: PPUSH
16756: LD_VAR 0 12
16760: PUSH
16761: LD_VAR 0 7
16765: ARRAY
16766: PUSH
16767: LD_INT 2
16769: ARRAY
16770: PPUSH
16771: CALL_OW 351
16775: OR
16776: IFFALSE 16782
// exit ;
16778: POP
16779: POP
16780: GO 17074
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16782: LD_ADDR_VAR 0 8
16786: PUSH
16787: LD_VAR 0 12
16791: PUSH
16792: LD_VAR 0 7
16796: ARRAY
16797: PUSH
16798: LD_INT 1
16800: ARRAY
16801: PPUSH
16802: LD_VAR 0 12
16806: PUSH
16807: LD_VAR 0 7
16811: ARRAY
16812: PUSH
16813: LD_INT 2
16815: ARRAY
16816: PPUSH
16817: CALL_OW 546
16821: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16822: LD_VAR 0 8
16826: PUSH
16827: LD_INT 1
16829: ARRAY
16830: PUSH
16831: LD_VAR 0 8
16835: PUSH
16836: LD_INT 2
16838: ARRAY
16839: PUSH
16840: LD_VAR 0 13
16844: PUSH
16845: LD_INT 2
16847: PLUS
16848: GREATER
16849: OR
16850: PUSH
16851: LD_VAR 0 8
16855: PUSH
16856: LD_INT 2
16858: ARRAY
16859: PUSH
16860: LD_VAR 0 13
16864: PUSH
16865: LD_INT 2
16867: MINUS
16868: LESS
16869: OR
16870: PUSH
16871: LD_VAR 0 8
16875: PUSH
16876: LD_INT 3
16878: ARRAY
16879: PUSH
16880: LD_INT 0
16882: PUSH
16883: LD_INT 8
16885: PUSH
16886: LD_INT 9
16888: PUSH
16889: LD_INT 10
16891: PUSH
16892: LD_INT 11
16894: PUSH
16895: LD_INT 12
16897: PUSH
16898: LD_INT 13
16900: PUSH
16901: LD_INT 16
16903: PUSH
16904: LD_INT 17
16906: PUSH
16907: LD_INT 18
16909: PUSH
16910: LD_INT 19
16912: PUSH
16913: LD_INT 20
16915: PUSH
16916: LD_INT 21
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: IN
16934: NOT
16935: OR
16936: PUSH
16937: LD_VAR 0 8
16941: PUSH
16942: LD_INT 5
16944: ARRAY
16945: NOT
16946: OR
16947: PUSH
16948: LD_VAR 0 8
16952: PUSH
16953: LD_INT 6
16955: ARRAY
16956: PUSH
16957: LD_INT 1
16959: PUSH
16960: LD_INT 2
16962: PUSH
16963: LD_INT 7
16965: PUSH
16966: LD_INT 9
16968: PUSH
16969: LD_INT 10
16971: PUSH
16972: LD_INT 11
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: IN
16983: NOT
16984: OR
16985: IFFALSE 16991
// exit ;
16987: POP
16988: POP
16989: GO 17074
// end ;
16991: GO 16662
16993: POP
16994: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16995: LD_VAR 0 9
16999: PPUSH
17000: LD_VAR 0 3
17004: PPUSH
17005: LD_VAR 0 4
17009: PPUSH
17010: LD_INT 20
17012: PPUSH
17013: CALL 8997 0 4
17017: PUSH
17018: LD_INT 4
17020: ARRAY
17021: IFFALSE 17025
// exit ;
17023: GO 17074
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17025: LD_VAR 0 2
17029: PUSH
17030: LD_INT 29
17032: PUSH
17033: LD_INT 30
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: IN
17040: PUSH
17041: LD_VAR 0 3
17045: PPUSH
17046: LD_VAR 0 4
17050: PPUSH
17051: LD_VAR 0 9
17055: PPUSH
17056: CALL_OW 440
17060: NOT
17061: AND
17062: IFFALSE 17066
// exit ;
17064: GO 17074
// result := true ;
17066: LD_ADDR_VAR 0 6
17070: PUSH
17071: LD_INT 1
17073: ST_TO_ADDR
// end ;
17074: LD_VAR 0 6
17078: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17079: LD_INT 0
17081: PPUSH
17082: PPUSH
17083: PPUSH
17084: PPUSH
17085: PPUSH
17086: PPUSH
17087: PPUSH
17088: PPUSH
17089: PPUSH
17090: PPUSH
17091: PPUSH
17092: PPUSH
17093: PPUSH
17094: PPUSH
17095: PPUSH
17096: PPUSH
17097: PPUSH
17098: PPUSH
17099: PPUSH
17100: PPUSH
17101: PPUSH
17102: PPUSH
17103: PPUSH
17104: PPUSH
17105: PPUSH
17106: PPUSH
17107: PPUSH
17108: PPUSH
17109: PPUSH
17110: PPUSH
17111: PPUSH
17112: PPUSH
17113: PPUSH
17114: PPUSH
17115: PPUSH
17116: PPUSH
17117: PPUSH
17118: PPUSH
17119: PPUSH
17120: PPUSH
17121: PPUSH
17122: PPUSH
17123: PPUSH
17124: PPUSH
17125: PPUSH
17126: PPUSH
17127: PPUSH
17128: PPUSH
17129: PPUSH
17130: PPUSH
17131: PPUSH
17132: PPUSH
17133: PPUSH
17134: PPUSH
17135: PPUSH
17136: PPUSH
17137: PPUSH
17138: PPUSH
// result = [ ] ;
17139: LD_ADDR_VAR 0 7
17143: PUSH
17144: EMPTY
17145: ST_TO_ADDR
// temp_list = [ ] ;
17146: LD_ADDR_VAR 0 9
17150: PUSH
17151: EMPTY
17152: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17153: LD_VAR 0 4
17157: PUSH
17158: LD_INT 0
17160: PUSH
17161: LD_INT 1
17163: PUSH
17164: LD_INT 2
17166: PUSH
17167: LD_INT 3
17169: PUSH
17170: LD_INT 4
17172: PUSH
17173: LD_INT 5
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: IN
17184: NOT
17185: PUSH
17186: LD_VAR 0 1
17190: PUSH
17191: LD_INT 0
17193: PUSH
17194: LD_INT 1
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: IN
17201: PUSH
17202: LD_VAR 0 5
17206: PUSH
17207: LD_INT 1
17209: PUSH
17210: LD_INT 2
17212: PUSH
17213: LD_INT 3
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: LIST
17220: IN
17221: NOT
17222: AND
17223: OR
17224: IFFALSE 17228
// exit ;
17226: GO 35619
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17228: LD_VAR 0 1
17232: PUSH
17233: LD_INT 6
17235: PUSH
17236: LD_INT 7
17238: PUSH
17239: LD_INT 8
17241: PUSH
17242: LD_INT 13
17244: PUSH
17245: LD_INT 12
17247: PUSH
17248: LD_INT 15
17250: PUSH
17251: LD_INT 11
17253: PUSH
17254: LD_INT 14
17256: PUSH
17257: LD_INT 10
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: IN
17271: IFFALSE 17281
// btype = b_lab ;
17273: LD_ADDR_VAR 0 1
17277: PUSH
17278: LD_INT 6
17280: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17281: LD_VAR 0 6
17285: PUSH
17286: LD_INT 0
17288: PUSH
17289: LD_INT 1
17291: PUSH
17292: LD_INT 2
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: LIST
17299: IN
17300: NOT
17301: PUSH
17302: LD_VAR 0 1
17306: PUSH
17307: LD_INT 0
17309: PUSH
17310: LD_INT 1
17312: PUSH
17313: LD_INT 2
17315: PUSH
17316: LD_INT 3
17318: PUSH
17319: LD_INT 6
17321: PUSH
17322: LD_INT 36
17324: PUSH
17325: LD_INT 4
17327: PUSH
17328: LD_INT 5
17330: PUSH
17331: LD_INT 31
17333: PUSH
17334: LD_INT 32
17336: PUSH
17337: LD_INT 33
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: IN
17353: NOT
17354: PUSH
17355: LD_VAR 0 6
17359: PUSH
17360: LD_INT 1
17362: EQUAL
17363: AND
17364: OR
17365: PUSH
17366: LD_VAR 0 1
17370: PUSH
17371: LD_INT 2
17373: PUSH
17374: LD_INT 3
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: IN
17381: NOT
17382: PUSH
17383: LD_VAR 0 6
17387: PUSH
17388: LD_INT 2
17390: EQUAL
17391: AND
17392: OR
17393: IFFALSE 17403
// mode = 0 ;
17395: LD_ADDR_VAR 0 6
17399: PUSH
17400: LD_INT 0
17402: ST_TO_ADDR
// case mode of 0 :
17403: LD_VAR 0 6
17407: PUSH
17408: LD_INT 0
17410: DOUBLE
17411: EQUAL
17412: IFTRUE 17416
17414: GO 28869
17416: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17417: LD_ADDR_VAR 0 11
17421: PUSH
17422: LD_INT 0
17424: PUSH
17425: LD_INT 0
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 0
17434: PUSH
17435: LD_INT 1
17437: NEG
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 1
17445: PUSH
17446: LD_INT 0
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 1
17455: PUSH
17456: LD_INT 1
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 0
17465: PUSH
17466: LD_INT 1
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 1
17475: NEG
17476: PUSH
17477: LD_INT 0
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 1
17486: NEG
17487: PUSH
17488: LD_INT 1
17490: NEG
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 1
17498: NEG
17499: PUSH
17500: LD_INT 2
17502: NEG
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 0
17510: PUSH
17511: LD_INT 2
17513: NEG
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 1
17521: PUSH
17522: LD_INT 1
17524: NEG
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 1
17532: PUSH
17533: LD_INT 2
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 0
17542: PUSH
17543: LD_INT 2
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 1
17552: NEG
17553: PUSH
17554: LD_INT 1
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 1
17563: PUSH
17564: LD_INT 3
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 0
17573: PUSH
17574: LD_INT 3
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 1
17583: NEG
17584: PUSH
17585: LD_INT 2
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17610: LD_ADDR_VAR 0 12
17614: PUSH
17615: LD_INT 0
17617: PUSH
17618: LD_INT 0
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 0
17627: PUSH
17628: LD_INT 1
17630: NEG
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 1
17638: PUSH
17639: LD_INT 0
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 1
17648: PUSH
17649: LD_INT 1
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 0
17658: PUSH
17659: LD_INT 1
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 1
17668: NEG
17669: PUSH
17670: LD_INT 0
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 1
17679: NEG
17680: PUSH
17681: LD_INT 1
17683: NEG
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 1
17691: PUSH
17692: LD_INT 1
17694: NEG
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 2
17702: PUSH
17703: LD_INT 0
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 2
17712: PUSH
17713: LD_INT 1
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 1
17722: NEG
17723: PUSH
17724: LD_INT 1
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 2
17733: NEG
17734: PUSH
17735: LD_INT 0
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 2
17744: NEG
17745: PUSH
17746: LD_INT 1
17748: NEG
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 2
17756: NEG
17757: PUSH
17758: LD_INT 1
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 3
17767: NEG
17768: PUSH
17769: LD_INT 0
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 3
17778: NEG
17779: PUSH
17780: LD_INT 1
17782: NEG
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17806: LD_ADDR_VAR 0 13
17810: PUSH
17811: LD_INT 0
17813: PUSH
17814: LD_INT 0
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 0
17823: PUSH
17824: LD_INT 1
17826: NEG
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 1
17834: PUSH
17835: LD_INT 0
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 1
17844: PUSH
17845: LD_INT 1
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 0
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 1
17864: NEG
17865: PUSH
17866: LD_INT 0
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 1
17875: NEG
17876: PUSH
17877: LD_INT 1
17879: NEG
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 1
17887: NEG
17888: PUSH
17889: LD_INT 2
17891: NEG
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 2
17899: PUSH
17900: LD_INT 1
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 2
17909: PUSH
17910: LD_INT 2
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 1
17919: PUSH
17920: LD_INT 2
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 2
17929: NEG
17930: PUSH
17931: LD_INT 1
17933: NEG
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 2
17941: NEG
17942: PUSH
17943: LD_INT 2
17945: NEG
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 2
17953: NEG
17954: PUSH
17955: LD_INT 3
17957: NEG
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 3
17965: NEG
17966: PUSH
17967: LD_INT 2
17969: NEG
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 3
17977: NEG
17978: PUSH
17979: LD_INT 3
17981: NEG
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18005: LD_ADDR_VAR 0 14
18009: PUSH
18010: LD_INT 0
18012: PUSH
18013: LD_INT 0
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 0
18022: PUSH
18023: LD_INT 1
18025: NEG
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 1
18033: PUSH
18034: LD_INT 0
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 1
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 0
18053: PUSH
18054: LD_INT 1
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 1
18063: NEG
18064: PUSH
18065: LD_INT 0
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 1
18074: NEG
18075: PUSH
18076: LD_INT 1
18078: NEG
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 1
18086: NEG
18087: PUSH
18088: LD_INT 2
18090: NEG
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 0
18098: PUSH
18099: LD_INT 2
18101: NEG
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 1
18109: PUSH
18110: LD_INT 1
18112: NEG
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 1
18120: PUSH
18121: LD_INT 2
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 0
18130: PUSH
18131: LD_INT 2
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 1
18140: NEG
18141: PUSH
18142: LD_INT 1
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 1
18151: NEG
18152: PUSH
18153: LD_INT 3
18155: NEG
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 0
18163: PUSH
18164: LD_INT 3
18166: NEG
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 1
18174: PUSH
18175: LD_INT 2
18177: NEG
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18201: LD_ADDR_VAR 0 15
18205: PUSH
18206: LD_INT 0
18208: PUSH
18209: LD_INT 0
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 0
18218: PUSH
18219: LD_INT 1
18221: NEG
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 1
18229: PUSH
18230: LD_INT 0
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 1
18239: PUSH
18240: LD_INT 1
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 0
18249: PUSH
18250: LD_INT 1
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 1
18259: NEG
18260: PUSH
18261: LD_INT 0
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 1
18270: NEG
18271: PUSH
18272: LD_INT 1
18274: NEG
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 1
18282: PUSH
18283: LD_INT 1
18285: NEG
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 2
18293: PUSH
18294: LD_INT 0
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 2
18303: PUSH
18304: LD_INT 1
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 1
18313: NEG
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 2
18324: NEG
18325: PUSH
18326: LD_INT 0
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 2
18335: NEG
18336: PUSH
18337: LD_INT 1
18339: NEG
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 2
18347: PUSH
18348: LD_INT 1
18350: NEG
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 3
18358: PUSH
18359: LD_INT 0
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 3
18368: PUSH
18369: LD_INT 1
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18394: LD_ADDR_VAR 0 16
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 0
18411: PUSH
18412: LD_INT 1
18414: NEG
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 1
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 0
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 1
18452: NEG
18453: PUSH
18454: LD_INT 0
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 1
18463: NEG
18464: PUSH
18465: LD_INT 1
18467: NEG
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 1
18475: NEG
18476: PUSH
18477: LD_INT 2
18479: NEG
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 2
18487: PUSH
18488: LD_INT 1
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 2
18497: PUSH
18498: LD_INT 2
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: LD_INT 2
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 2
18517: NEG
18518: PUSH
18519: LD_INT 1
18521: NEG
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 2
18529: NEG
18530: PUSH
18531: LD_INT 2
18533: NEG
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 3
18541: PUSH
18542: LD_INT 2
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 3
18551: PUSH
18552: LD_INT 3
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 2
18561: PUSH
18562: LD_INT 3
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18587: LD_ADDR_VAR 0 17
18591: PUSH
18592: LD_INT 0
18594: PUSH
18595: LD_INT 0
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 0
18604: PUSH
18605: LD_INT 1
18607: NEG
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 1
18615: PUSH
18616: LD_INT 0
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 1
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 0
18635: PUSH
18636: LD_INT 1
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: LD_INT 1
18645: NEG
18646: PUSH
18647: LD_INT 0
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 1
18656: NEG
18657: PUSH
18658: LD_INT 1
18660: NEG
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 1
18668: NEG
18669: PUSH
18670: LD_INT 2
18672: NEG
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 0
18680: PUSH
18681: LD_INT 2
18683: NEG
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 1
18691: PUSH
18692: LD_INT 1
18694: NEG
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 2
18702: PUSH
18703: LD_INT 0
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 2
18712: PUSH
18713: LD_INT 1
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 2
18722: PUSH
18723: LD_INT 2
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: LD_INT 1
18732: PUSH
18733: LD_INT 2
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 0
18742: PUSH
18743: LD_INT 2
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 1
18752: NEG
18753: PUSH
18754: LD_INT 1
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 2
18763: NEG
18764: PUSH
18765: LD_INT 0
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 2
18774: NEG
18775: PUSH
18776: LD_INT 1
18778: NEG
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 2
18786: NEG
18787: PUSH
18788: LD_INT 2
18790: NEG
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18817: LD_ADDR_VAR 0 18
18821: PUSH
18822: LD_INT 0
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 0
18834: PUSH
18835: LD_INT 1
18837: NEG
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: LD_INT 1
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 1
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 0
18865: PUSH
18866: LD_INT 1
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 1
18875: NEG
18876: PUSH
18877: LD_INT 0
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 1
18886: NEG
18887: PUSH
18888: LD_INT 1
18890: NEG
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: LD_INT 1
18898: NEG
18899: PUSH
18900: LD_INT 2
18902: NEG
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: LD_INT 0
18910: PUSH
18911: LD_INT 2
18913: NEG
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 1
18921: PUSH
18922: LD_INT 1
18924: NEG
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 2
18932: PUSH
18933: LD_INT 0
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 2
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 2
18952: PUSH
18953: LD_INT 2
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 1
18962: PUSH
18963: LD_INT 2
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 0
18972: PUSH
18973: LD_INT 2
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 1
18982: NEG
18983: PUSH
18984: LD_INT 1
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 2
18993: NEG
18994: PUSH
18995: LD_INT 0
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 2
19004: NEG
19005: PUSH
19006: LD_INT 1
19008: NEG
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 2
19016: NEG
19017: PUSH
19018: LD_INT 2
19020: NEG
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19047: LD_ADDR_VAR 0 19
19051: PUSH
19052: LD_INT 0
19054: PUSH
19055: LD_INT 0
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: LD_INT 1
19067: NEG
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 1
19075: PUSH
19076: LD_INT 0
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 1
19085: PUSH
19086: LD_INT 1
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 0
19095: PUSH
19096: LD_INT 1
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 1
19105: NEG
19106: PUSH
19107: LD_INT 0
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 1
19116: NEG
19117: PUSH
19118: LD_INT 1
19120: NEG
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 1
19128: NEG
19129: PUSH
19130: LD_INT 2
19132: NEG
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 0
19140: PUSH
19141: LD_INT 2
19143: NEG
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 1
19151: PUSH
19152: LD_INT 1
19154: NEG
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 2
19162: PUSH
19163: LD_INT 0
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 2
19172: PUSH
19173: LD_INT 1
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 2
19182: PUSH
19183: LD_INT 2
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: LD_INT 2
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 0
19202: PUSH
19203: LD_INT 2
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 1
19212: NEG
19213: PUSH
19214: LD_INT 1
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 2
19223: NEG
19224: PUSH
19225: LD_INT 0
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 2
19234: NEG
19235: PUSH
19236: LD_INT 1
19238: NEG
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 2
19246: NEG
19247: PUSH
19248: LD_INT 2
19250: NEG
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19277: LD_ADDR_VAR 0 20
19281: PUSH
19282: LD_INT 0
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: LD_INT 1
19297: NEG
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 1
19305: PUSH
19306: LD_INT 0
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 1
19315: PUSH
19316: LD_INT 1
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 0
19325: PUSH
19326: LD_INT 1
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 1
19335: NEG
19336: PUSH
19337: LD_INT 0
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 1
19346: NEG
19347: PUSH
19348: LD_INT 1
19350: NEG
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 1
19358: NEG
19359: PUSH
19360: LD_INT 2
19362: NEG
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 0
19370: PUSH
19371: LD_INT 2
19373: NEG
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 1
19381: PUSH
19382: LD_INT 1
19384: NEG
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 2
19392: PUSH
19393: LD_INT 0
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 2
19402: PUSH
19403: LD_INT 1
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 2
19412: PUSH
19413: LD_INT 2
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 1
19422: PUSH
19423: LD_INT 2
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 0
19432: PUSH
19433: LD_INT 2
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 1
19442: NEG
19443: PUSH
19444: LD_INT 1
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 2
19453: NEG
19454: PUSH
19455: LD_INT 0
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 2
19464: NEG
19465: PUSH
19466: LD_INT 1
19468: NEG
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 2
19476: NEG
19477: PUSH
19478: LD_INT 2
19480: NEG
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19507: LD_ADDR_VAR 0 21
19511: PUSH
19512: LD_INT 0
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 0
19524: PUSH
19525: LD_INT 1
19527: NEG
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 1
19535: PUSH
19536: LD_INT 0
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 1
19545: PUSH
19546: LD_INT 1
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 0
19555: PUSH
19556: LD_INT 1
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 1
19565: NEG
19566: PUSH
19567: LD_INT 0
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 1
19576: NEG
19577: PUSH
19578: LD_INT 1
19580: NEG
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 1
19588: NEG
19589: PUSH
19590: LD_INT 2
19592: NEG
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 0
19600: PUSH
19601: LD_INT 2
19603: NEG
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 1
19611: PUSH
19612: LD_INT 1
19614: NEG
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 2
19622: PUSH
19623: LD_INT 0
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 2
19632: PUSH
19633: LD_INT 1
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 2
19642: PUSH
19643: LD_INT 2
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 1
19652: PUSH
19653: LD_INT 2
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 0
19662: PUSH
19663: LD_INT 2
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 1
19672: NEG
19673: PUSH
19674: LD_INT 1
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 2
19683: NEG
19684: PUSH
19685: LD_INT 0
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 2
19694: NEG
19695: PUSH
19696: LD_INT 1
19698: NEG
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 2
19706: NEG
19707: PUSH
19708: LD_INT 2
19710: NEG
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19737: LD_ADDR_VAR 0 22
19741: PUSH
19742: LD_INT 0
19744: PUSH
19745: LD_INT 0
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: LD_INT 1
19757: NEG
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 1
19765: PUSH
19766: LD_INT 0
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 0
19785: PUSH
19786: LD_INT 1
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 1
19795: NEG
19796: PUSH
19797: LD_INT 0
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 1
19806: NEG
19807: PUSH
19808: LD_INT 1
19810: NEG
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 1
19818: NEG
19819: PUSH
19820: LD_INT 2
19822: NEG
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 0
19830: PUSH
19831: LD_INT 2
19833: NEG
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: LD_INT 1
19844: NEG
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 2
19852: PUSH
19853: LD_INT 0
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 2
19862: PUSH
19863: LD_INT 1
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 2
19872: PUSH
19873: LD_INT 2
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 1
19882: PUSH
19883: LD_INT 2
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 0
19892: PUSH
19893: LD_INT 2
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 1
19902: NEG
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 2
19913: NEG
19914: PUSH
19915: LD_INT 0
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 2
19924: NEG
19925: PUSH
19926: LD_INT 1
19928: NEG
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 2
19936: NEG
19937: PUSH
19938: LD_INT 2
19940: NEG
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19967: LD_ADDR_VAR 0 23
19971: PUSH
19972: LD_INT 0
19974: PUSH
19975: LD_INT 0
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 0
19984: PUSH
19985: LD_INT 1
19987: NEG
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 1
19995: PUSH
19996: LD_INT 0
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 1
20005: PUSH
20006: LD_INT 1
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 0
20015: PUSH
20016: LD_INT 1
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 1
20025: NEG
20026: PUSH
20027: LD_INT 0
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 1
20036: NEG
20037: PUSH
20038: LD_INT 1
20040: NEG
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 1
20048: NEG
20049: PUSH
20050: LD_INT 2
20052: NEG
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 0
20060: PUSH
20061: LD_INT 2
20063: NEG
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 1
20071: PUSH
20072: LD_INT 1
20074: NEG
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: PUSH
20083: LD_INT 0
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 2
20092: PUSH
20093: LD_INT 1
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 2
20102: PUSH
20103: LD_INT 2
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 1
20112: PUSH
20113: LD_INT 2
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 0
20122: PUSH
20123: LD_INT 2
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 1
20132: NEG
20133: PUSH
20134: LD_INT 1
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 2
20143: NEG
20144: PUSH
20145: LD_INT 0
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 2
20154: NEG
20155: PUSH
20156: LD_INT 1
20158: NEG
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 2
20166: NEG
20167: PUSH
20168: LD_INT 2
20170: NEG
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 2
20178: NEG
20179: PUSH
20180: LD_INT 3
20182: NEG
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 1
20190: NEG
20191: PUSH
20192: LD_INT 3
20194: NEG
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 1
20202: PUSH
20203: LD_INT 2
20205: NEG
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 2
20213: PUSH
20214: LD_INT 1
20216: NEG
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20247: LD_ADDR_VAR 0 24
20251: PUSH
20252: LD_INT 0
20254: PUSH
20255: LD_INT 0
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 0
20264: PUSH
20265: LD_INT 1
20267: NEG
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 1
20275: PUSH
20276: LD_INT 0
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 0
20295: PUSH
20296: LD_INT 1
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 1
20305: NEG
20306: PUSH
20307: LD_INT 0
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 1
20316: NEG
20317: PUSH
20318: LD_INT 1
20320: NEG
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 1
20328: NEG
20329: PUSH
20330: LD_INT 2
20332: NEG
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 0
20340: PUSH
20341: LD_INT 2
20343: NEG
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 1
20351: PUSH
20352: LD_INT 1
20354: NEG
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 2
20362: PUSH
20363: LD_INT 0
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 2
20372: PUSH
20373: LD_INT 1
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 2
20382: PUSH
20383: LD_INT 2
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 1
20392: PUSH
20393: LD_INT 2
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 0
20402: PUSH
20403: LD_INT 2
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 1
20412: NEG
20413: PUSH
20414: LD_INT 1
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 2
20423: NEG
20424: PUSH
20425: LD_INT 0
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 2
20434: NEG
20435: PUSH
20436: LD_INT 1
20438: NEG
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 2
20446: NEG
20447: PUSH
20448: LD_INT 2
20450: NEG
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 1
20458: PUSH
20459: LD_INT 2
20461: NEG
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 2
20469: PUSH
20470: LD_INT 1
20472: NEG
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 3
20480: PUSH
20481: LD_INT 1
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 3
20490: PUSH
20491: LD_INT 2
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20523: LD_ADDR_VAR 0 25
20527: PUSH
20528: LD_INT 0
20530: PUSH
20531: LD_INT 0
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 0
20540: PUSH
20541: LD_INT 1
20543: NEG
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 1
20551: PUSH
20552: LD_INT 0
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: LD_INT 1
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 0
20571: PUSH
20572: LD_INT 1
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 1
20581: NEG
20582: PUSH
20583: LD_INT 0
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 1
20592: NEG
20593: PUSH
20594: LD_INT 1
20596: NEG
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 1
20604: NEG
20605: PUSH
20606: LD_INT 2
20608: NEG
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 0
20616: PUSH
20617: LD_INT 2
20619: NEG
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 1
20627: PUSH
20628: LD_INT 1
20630: NEG
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 2
20638: PUSH
20639: LD_INT 0
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 2
20648: PUSH
20649: LD_INT 1
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 2
20658: PUSH
20659: LD_INT 2
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 1
20668: PUSH
20669: LD_INT 2
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 0
20678: PUSH
20679: LD_INT 2
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 1
20688: NEG
20689: PUSH
20690: LD_INT 1
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 2
20699: NEG
20700: PUSH
20701: LD_INT 0
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 2
20710: NEG
20711: PUSH
20712: LD_INT 1
20714: NEG
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 2
20722: NEG
20723: PUSH
20724: LD_INT 2
20726: NEG
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 3
20734: PUSH
20735: LD_INT 1
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 3
20744: PUSH
20745: LD_INT 2
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 2
20754: PUSH
20755: LD_INT 3
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 1
20764: PUSH
20765: LD_INT 3
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20797: LD_ADDR_VAR 0 26
20801: PUSH
20802: LD_INT 0
20804: PUSH
20805: LD_INT 0
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 0
20814: PUSH
20815: LD_INT 1
20817: NEG
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 1
20825: PUSH
20826: LD_INT 0
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 1
20835: PUSH
20836: LD_INT 1
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 0
20845: PUSH
20846: LD_INT 1
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 1
20855: NEG
20856: PUSH
20857: LD_INT 0
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 1
20866: NEG
20867: PUSH
20868: LD_INT 1
20870: NEG
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 1
20878: NEG
20879: PUSH
20880: LD_INT 2
20882: NEG
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 0
20890: PUSH
20891: LD_INT 2
20893: NEG
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 1
20901: PUSH
20902: LD_INT 1
20904: NEG
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 2
20912: PUSH
20913: LD_INT 0
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 2
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 2
20932: PUSH
20933: LD_INT 2
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 1
20942: PUSH
20943: LD_INT 2
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: LD_INT 2
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 1
20962: NEG
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 2
20973: NEG
20974: PUSH
20975: LD_INT 0
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 2
20984: NEG
20985: PUSH
20986: LD_INT 1
20988: NEG
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 2
20996: NEG
20997: PUSH
20998: LD_INT 2
21000: NEG
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 2
21008: PUSH
21009: LD_INT 3
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 1
21018: PUSH
21019: LD_INT 3
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: LD_INT 2
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 2
21039: NEG
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21073: LD_ADDR_VAR 0 27
21077: PUSH
21078: LD_INT 0
21080: PUSH
21081: LD_INT 0
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 0
21090: PUSH
21091: LD_INT 1
21093: NEG
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 1
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 0
21121: PUSH
21122: LD_INT 1
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 1
21131: NEG
21132: PUSH
21133: LD_INT 0
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 1
21142: NEG
21143: PUSH
21144: LD_INT 1
21146: NEG
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 1
21154: NEG
21155: PUSH
21156: LD_INT 2
21158: NEG
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 0
21166: PUSH
21167: LD_INT 2
21169: NEG
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 1
21177: PUSH
21178: LD_INT 1
21180: NEG
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 2
21188: PUSH
21189: LD_INT 0
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 2
21198: PUSH
21199: LD_INT 1
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: LD_INT 2
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 1
21218: PUSH
21219: LD_INT 2
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 0
21228: PUSH
21229: LD_INT 2
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 1
21238: NEG
21239: PUSH
21240: LD_INT 1
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 2
21249: NEG
21250: PUSH
21251: LD_INT 0
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 2
21260: NEG
21261: PUSH
21262: LD_INT 1
21264: NEG
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 2
21272: NEG
21273: PUSH
21274: LD_INT 2
21276: NEG
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 1
21284: NEG
21285: PUSH
21286: LD_INT 2
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 2
21295: NEG
21296: PUSH
21297: LD_INT 1
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 3
21306: NEG
21307: PUSH
21308: LD_INT 1
21310: NEG
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 3
21318: NEG
21319: PUSH
21320: LD_INT 2
21322: NEG
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21353: LD_ADDR_VAR 0 28
21357: PUSH
21358: LD_INT 0
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 0
21370: PUSH
21371: LD_INT 1
21373: NEG
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 1
21381: PUSH
21382: LD_INT 0
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 1
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 0
21401: PUSH
21402: LD_INT 1
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 1
21411: NEG
21412: PUSH
21413: LD_INT 0
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 1
21422: NEG
21423: PUSH
21424: LD_INT 1
21426: NEG
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 1
21434: NEG
21435: PUSH
21436: LD_INT 2
21438: NEG
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 0
21446: PUSH
21447: LD_INT 2
21449: NEG
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 1
21457: PUSH
21458: LD_INT 1
21460: NEG
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 2
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 2
21478: PUSH
21479: LD_INT 1
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 2
21488: PUSH
21489: LD_INT 2
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 1
21498: PUSH
21499: LD_INT 2
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 0
21508: PUSH
21509: LD_INT 2
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 1
21518: NEG
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 2
21529: NEG
21530: PUSH
21531: LD_INT 0
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 2
21540: NEG
21541: PUSH
21542: LD_INT 1
21544: NEG
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 2
21552: NEG
21553: PUSH
21554: LD_INT 2
21556: NEG
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 2
21564: NEG
21565: PUSH
21566: LD_INT 3
21568: NEG
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 1
21576: NEG
21577: PUSH
21578: LD_INT 3
21580: NEG
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 3
21588: NEG
21589: PUSH
21590: LD_INT 1
21592: NEG
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 3
21600: NEG
21601: PUSH
21602: LD_INT 2
21604: NEG
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21635: LD_ADDR_VAR 0 29
21639: PUSH
21640: LD_INT 0
21642: PUSH
21643: LD_INT 0
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 0
21652: PUSH
21653: LD_INT 1
21655: NEG
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 1
21663: PUSH
21664: LD_INT 0
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 1
21673: PUSH
21674: LD_INT 1
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: LD_INT 1
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 1
21693: NEG
21694: PUSH
21695: LD_INT 0
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 1
21704: NEG
21705: PUSH
21706: LD_INT 1
21708: NEG
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 1
21716: NEG
21717: PUSH
21718: LD_INT 2
21720: NEG
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 0
21728: PUSH
21729: LD_INT 2
21731: NEG
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 1
21739: PUSH
21740: LD_INT 1
21742: NEG
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 2
21750: PUSH
21751: LD_INT 0
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 2
21760: PUSH
21761: LD_INT 1
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 1
21770: PUSH
21771: LD_INT 2
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 0
21780: PUSH
21781: LD_INT 2
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 1
21790: NEG
21791: PUSH
21792: LD_INT 1
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 2
21801: NEG
21802: PUSH
21803: LD_INT 1
21805: NEG
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 2
21813: NEG
21814: PUSH
21815: LD_INT 2
21817: NEG
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 2
21825: NEG
21826: PUSH
21827: LD_INT 3
21829: NEG
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 2
21837: PUSH
21838: LD_INT 1
21840: NEG
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 3
21848: PUSH
21849: LD_INT 1
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 1
21858: PUSH
21859: LD_INT 3
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 1
21868: NEG
21869: PUSH
21870: LD_INT 2
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 3
21879: NEG
21880: PUSH
21881: LD_INT 2
21883: NEG
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21914: LD_ADDR_VAR 0 30
21918: PUSH
21919: LD_INT 0
21921: PUSH
21922: LD_INT 0
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 0
21931: PUSH
21932: LD_INT 1
21934: NEG
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 1
21942: PUSH
21943: LD_INT 0
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 1
21952: PUSH
21953: LD_INT 1
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 0
21962: PUSH
21963: LD_INT 1
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 1
21972: NEG
21973: PUSH
21974: LD_INT 0
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: LD_INT 1
21987: NEG
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 1
21995: NEG
21996: PUSH
21997: LD_INT 2
21999: NEG
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 0
22007: PUSH
22008: LD_INT 2
22010: NEG
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 1
22018: PUSH
22019: LD_INT 1
22021: NEG
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 2
22029: PUSH
22030: LD_INT 0
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 2
22039: PUSH
22040: LD_INT 1
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 2
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 1
22059: PUSH
22060: LD_INT 2
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 1
22069: NEG
22070: PUSH
22071: LD_INT 1
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 2
22080: NEG
22081: PUSH
22082: LD_INT 0
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 2
22091: NEG
22092: PUSH
22093: LD_INT 1
22095: NEG
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 1
22103: NEG
22104: PUSH
22105: LD_INT 3
22107: NEG
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: LD_INT 2
22118: NEG
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 3
22126: PUSH
22127: LD_INT 2
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 2
22136: PUSH
22137: LD_INT 3
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 2
22146: NEG
22147: PUSH
22148: LD_INT 1
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 3
22157: NEG
22158: PUSH
22159: LD_INT 1
22161: NEG
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22192: LD_ADDR_VAR 0 31
22196: PUSH
22197: LD_INT 0
22199: PUSH
22200: LD_INT 0
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 0
22209: PUSH
22210: LD_INT 1
22212: NEG
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 1
22220: PUSH
22221: LD_INT 0
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 1
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 0
22240: PUSH
22241: LD_INT 1
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 1
22250: NEG
22251: PUSH
22252: LD_INT 0
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 1
22261: NEG
22262: PUSH
22263: LD_INT 1
22265: NEG
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 1
22273: NEG
22274: PUSH
22275: LD_INT 2
22277: NEG
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: LD_INT 1
22288: NEG
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 2
22296: PUSH
22297: LD_INT 0
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 2
22306: PUSH
22307: LD_INT 1
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 2
22316: PUSH
22317: LD_INT 2
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 1
22326: PUSH
22327: LD_INT 2
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: LD_INT 2
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 1
22346: NEG
22347: PUSH
22348: LD_INT 1
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 2
22357: NEG
22358: PUSH
22359: LD_INT 1
22361: NEG
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 2
22369: NEG
22370: PUSH
22371: LD_INT 2
22373: NEG
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 2
22381: NEG
22382: PUSH
22383: LD_INT 3
22385: NEG
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 2
22393: PUSH
22394: LD_INT 1
22396: NEG
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 3
22404: PUSH
22405: LD_INT 1
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 1
22414: PUSH
22415: LD_INT 3
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 1
22424: NEG
22425: PUSH
22426: LD_INT 2
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 3
22435: NEG
22436: PUSH
22437: LD_INT 2
22439: NEG
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22470: LD_ADDR_VAR 0 32
22474: PUSH
22475: LD_INT 0
22477: PUSH
22478: LD_INT 0
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 0
22487: PUSH
22488: LD_INT 1
22490: NEG
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 1
22498: PUSH
22499: LD_INT 0
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 1
22508: PUSH
22509: LD_INT 1
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 0
22518: PUSH
22519: LD_INT 1
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 1
22528: NEG
22529: PUSH
22530: LD_INT 0
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 1
22539: NEG
22540: PUSH
22541: LD_INT 1
22543: NEG
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 1
22551: NEG
22552: PUSH
22553: LD_INT 2
22555: NEG
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 0
22563: PUSH
22564: LD_INT 2
22566: NEG
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: LD_INT 1
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 2
22585: PUSH
22586: LD_INT 1
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 2
22595: PUSH
22596: LD_INT 2
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 1
22605: PUSH
22606: LD_INT 2
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 0
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 1
22625: NEG
22626: PUSH
22627: LD_INT 1
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 2
22636: NEG
22637: PUSH
22638: LD_INT 0
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 2
22647: NEG
22648: PUSH
22649: LD_INT 1
22651: NEG
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 1
22659: NEG
22660: PUSH
22661: LD_INT 3
22663: NEG
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 1
22671: PUSH
22672: LD_INT 2
22674: NEG
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 3
22682: PUSH
22683: LD_INT 2
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 2
22692: PUSH
22693: LD_INT 3
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 2
22702: NEG
22703: PUSH
22704: LD_INT 1
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 3
22713: NEG
22714: PUSH
22715: LD_INT 1
22717: NEG
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22748: LD_ADDR_VAR 0 33
22752: PUSH
22753: LD_INT 0
22755: PUSH
22756: LD_INT 0
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 0
22765: PUSH
22766: LD_INT 1
22768: NEG
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 1
22776: PUSH
22777: LD_INT 0
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 1
22786: PUSH
22787: LD_INT 1
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 0
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 1
22806: NEG
22807: PUSH
22808: LD_INT 0
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 1
22817: NEG
22818: PUSH
22819: LD_INT 1
22821: NEG
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 1
22829: NEG
22830: PUSH
22831: LD_INT 2
22833: NEG
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 1
22841: PUSH
22842: LD_INT 1
22844: NEG
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 2
22852: PUSH
22853: LD_INT 0
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 0
22882: PUSH
22883: LD_INT 2
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 1
22892: NEG
22893: PUSH
22894: LD_INT 1
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 2
22903: NEG
22904: PUSH
22905: LD_INT 0
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 2
22914: NEG
22915: PUSH
22916: LD_INT 1
22918: NEG
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 2
22926: NEG
22927: PUSH
22928: LD_INT 2
22930: NEG
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 2
22938: NEG
22939: PUSH
22940: LD_INT 3
22942: NEG
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 2
22950: PUSH
22951: LD_INT 1
22953: NEG
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 3
22961: PUSH
22962: LD_INT 1
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 1
22971: PUSH
22972: LD_INT 3
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 1
22981: NEG
22982: PUSH
22983: LD_INT 2
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 3
22992: NEG
22993: PUSH
22994: LD_INT 2
22996: NEG
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23027: LD_ADDR_VAR 0 34
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: LD_INT 0
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 0
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 1
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 1
23065: PUSH
23066: LD_INT 1
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 0
23075: PUSH
23076: LD_INT 1
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 1
23085: NEG
23086: PUSH
23087: LD_INT 0
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 1
23096: NEG
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 1
23108: NEG
23109: PUSH
23110: LD_INT 2
23112: NEG
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 0
23120: PUSH
23121: LD_INT 2
23123: NEG
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: PUSH
23132: LD_INT 1
23134: NEG
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 2
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 2
23152: PUSH
23153: LD_INT 2
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: LD_INT 2
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 1
23172: NEG
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 2
23183: NEG
23184: PUSH
23185: LD_INT 0
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 2
23194: NEG
23195: PUSH
23196: LD_INT 1
23198: NEG
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 2
23206: NEG
23207: PUSH
23208: LD_INT 2
23210: NEG
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 1
23218: NEG
23219: PUSH
23220: LD_INT 3
23222: NEG
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: LD_INT 2
23233: NEG
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 3
23241: PUSH
23242: LD_INT 2
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 2
23251: PUSH
23252: LD_INT 3
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 2
23261: NEG
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 3
23272: NEG
23273: PUSH
23274: LD_INT 1
23276: NEG
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23307: LD_ADDR_VAR 0 35
23311: PUSH
23312: LD_INT 0
23314: PUSH
23315: LD_INT 0
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 0
23324: PUSH
23325: LD_INT 1
23327: NEG
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 1
23335: PUSH
23336: LD_INT 0
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 1
23345: PUSH
23346: LD_INT 1
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 0
23355: PUSH
23356: LD_INT 1
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 1
23365: NEG
23366: PUSH
23367: LD_INT 0
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 1
23376: NEG
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 2
23388: PUSH
23389: LD_INT 1
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 2
23398: NEG
23399: PUSH
23400: LD_INT 1
23402: NEG
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23419: LD_ADDR_VAR 0 36
23423: PUSH
23424: LD_INT 0
23426: PUSH
23427: LD_INT 0
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 0
23436: PUSH
23437: LD_INT 1
23439: NEG
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 1
23447: PUSH
23448: LD_INT 0
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: LD_INT 1
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 0
23467: PUSH
23468: LD_INT 1
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 1
23477: NEG
23478: PUSH
23479: LD_INT 0
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 1
23488: NEG
23489: PUSH
23490: LD_INT 1
23492: NEG
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 1
23500: NEG
23501: PUSH
23502: LD_INT 2
23504: NEG
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 1
23512: PUSH
23513: LD_INT 2
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23531: LD_ADDR_VAR 0 37
23535: PUSH
23536: LD_INT 0
23538: PUSH
23539: LD_INT 0
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 0
23548: PUSH
23549: LD_INT 1
23551: NEG
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 1
23559: PUSH
23560: LD_INT 0
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 1
23569: PUSH
23570: LD_INT 1
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 0
23579: PUSH
23580: LD_INT 1
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 1
23589: NEG
23590: PUSH
23591: LD_INT 0
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 1
23600: NEG
23601: PUSH
23602: LD_INT 1
23604: NEG
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 1
23612: PUSH
23613: LD_INT 1
23615: NEG
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 1
23623: NEG
23624: PUSH
23625: LD_INT 1
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23643: LD_ADDR_VAR 0 38
23647: PUSH
23648: LD_INT 0
23650: PUSH
23651: LD_INT 0
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 0
23660: PUSH
23661: LD_INT 1
23663: NEG
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 1
23671: PUSH
23672: LD_INT 0
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 1
23681: PUSH
23682: LD_INT 1
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 0
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 1
23701: NEG
23702: PUSH
23703: LD_INT 0
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 1
23712: NEG
23713: PUSH
23714: LD_INT 1
23716: NEG
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 2
23724: PUSH
23725: LD_INT 1
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 2
23734: NEG
23735: PUSH
23736: LD_INT 1
23738: NEG
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23755: LD_ADDR_VAR 0 39
23759: PUSH
23760: LD_INT 0
23762: PUSH
23763: LD_INT 0
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: LD_INT 1
23775: NEG
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: LD_INT 0
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: LD_INT 1
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 0
23803: PUSH
23804: LD_INT 1
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 1
23813: NEG
23814: PUSH
23815: LD_INT 0
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 1
23824: NEG
23825: PUSH
23826: LD_INT 1
23828: NEG
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 1
23836: NEG
23837: PUSH
23838: LD_INT 2
23840: NEG
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: LD_INT 2
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23867: LD_ADDR_VAR 0 40
23871: PUSH
23872: LD_INT 0
23874: PUSH
23875: LD_INT 0
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 0
23884: PUSH
23885: LD_INT 1
23887: NEG
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 1
23895: PUSH
23896: LD_INT 0
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 1
23905: PUSH
23906: LD_INT 1
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 0
23915: PUSH
23916: LD_INT 1
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 1
23925: NEG
23926: PUSH
23927: LD_INT 0
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 1
23936: NEG
23937: PUSH
23938: LD_INT 1
23940: NEG
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: LD_INT 1
23951: NEG
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 1
23959: NEG
23960: PUSH
23961: LD_INT 1
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23979: LD_ADDR_VAR 0 41
23983: PUSH
23984: LD_INT 0
23986: PUSH
23987: LD_INT 0
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 0
23996: PUSH
23997: LD_INT 1
23999: NEG
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 1
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 1
24017: PUSH
24018: LD_INT 1
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 0
24027: PUSH
24028: LD_INT 1
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 1
24037: NEG
24038: PUSH
24039: LD_INT 0
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 1
24048: NEG
24049: PUSH
24050: LD_INT 1
24052: NEG
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 1
24060: NEG
24061: PUSH
24062: LD_INT 2
24064: NEG
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 1
24072: PUSH
24073: LD_INT 1
24075: NEG
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 2
24083: PUSH
24084: LD_INT 0
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 2
24093: PUSH
24094: LD_INT 1
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 2
24103: PUSH
24104: LD_INT 2
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: LD_INT 2
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: NEG
24124: PUSH
24125: LD_INT 1
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 2
24134: NEG
24135: PUSH
24136: LD_INT 0
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 2
24145: NEG
24146: PUSH
24147: LD_INT 1
24149: NEG
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 2
24157: NEG
24158: PUSH
24159: LD_INT 2
24161: NEG
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 2
24169: NEG
24170: PUSH
24171: LD_INT 3
24173: NEG
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 2
24181: PUSH
24182: LD_INT 1
24184: NEG
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 3
24192: PUSH
24193: LD_INT 0
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 3
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 3
24212: PUSH
24213: LD_INT 2
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 3
24222: PUSH
24223: LD_INT 3
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 2
24232: PUSH
24233: LD_INT 3
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 2
24242: NEG
24243: PUSH
24244: LD_INT 1
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 3
24253: NEG
24254: PUSH
24255: LD_INT 0
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 3
24264: NEG
24265: PUSH
24266: LD_INT 1
24268: NEG
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 3
24276: NEG
24277: PUSH
24278: LD_INT 2
24280: NEG
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 3
24288: NEG
24289: PUSH
24290: LD_INT 3
24292: NEG
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24329: LD_ADDR_VAR 0 42
24333: PUSH
24334: LD_INT 0
24336: PUSH
24337: LD_INT 0
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 0
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 1
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: LD_INT 1
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: LD_INT 1
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: LD_INT 0
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 1
24398: NEG
24399: PUSH
24400: LD_INT 1
24402: NEG
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 1
24410: NEG
24411: PUSH
24412: LD_INT 2
24414: NEG
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 0
24422: PUSH
24423: LD_INT 2
24425: NEG
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 1
24433: PUSH
24434: LD_INT 1
24436: NEG
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 2
24444: PUSH
24445: LD_INT 1
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 2
24454: PUSH
24455: LD_INT 2
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 1
24464: PUSH
24465: LD_INT 2
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 0
24474: PUSH
24475: LD_INT 2
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 1
24484: NEG
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 2
24495: NEG
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 2
24507: NEG
24508: PUSH
24509: LD_INT 2
24511: NEG
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 2
24519: NEG
24520: PUSH
24521: LD_INT 3
24523: NEG
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 1
24531: NEG
24532: PUSH
24533: LD_INT 3
24535: NEG
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 0
24543: PUSH
24544: LD_INT 3
24546: NEG
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 1
24554: PUSH
24555: LD_INT 2
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 3
24565: PUSH
24566: LD_INT 2
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 3
24575: PUSH
24576: LD_INT 3
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 2
24585: PUSH
24586: LD_INT 3
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: PUSH
24596: LD_INT 3
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: LD_INT 3
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 1
24615: NEG
24616: PUSH
24617: LD_INT 2
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 3
24626: NEG
24627: PUSH
24628: LD_INT 2
24630: NEG
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 3
24638: NEG
24639: PUSH
24640: LD_INT 3
24642: NEG
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24679: LD_ADDR_VAR 0 43
24683: PUSH
24684: LD_INT 0
24686: PUSH
24687: LD_INT 0
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 0
24696: PUSH
24697: LD_INT 1
24699: NEG
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 1
24707: PUSH
24708: LD_INT 0
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 1
24717: PUSH
24718: LD_INT 1
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 0
24727: PUSH
24728: LD_INT 1
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 1
24737: NEG
24738: PUSH
24739: LD_INT 0
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: LD_INT 1
24752: NEG
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 1
24760: NEG
24761: PUSH
24762: LD_INT 2
24764: NEG
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 0
24772: PUSH
24773: LD_INT 2
24775: NEG
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: LD_INT 1
24786: NEG
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 2
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 2
24804: PUSH
24805: LD_INT 1
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 1
24814: PUSH
24815: LD_INT 2
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 2
24845: NEG
24846: PUSH
24847: LD_INT 0
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 2
24856: NEG
24857: PUSH
24858: LD_INT 1
24860: NEG
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 1
24868: NEG
24869: PUSH
24870: LD_INT 3
24872: NEG
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 0
24880: PUSH
24881: LD_INT 3
24883: NEG
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: LD_INT 2
24894: NEG
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 2
24902: PUSH
24903: LD_INT 1
24905: NEG
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 3
24913: PUSH
24914: LD_INT 0
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 3
24923: PUSH
24924: LD_INT 1
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 1
24933: PUSH
24934: LD_INT 3
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: LD_INT 3
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 1
24953: NEG
24954: PUSH
24955: LD_INT 2
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 2
24964: NEG
24965: PUSH
24966: LD_INT 1
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 3
24975: NEG
24976: PUSH
24977: LD_INT 0
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 3
24986: NEG
24987: PUSH
24988: LD_INT 1
24990: NEG
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25027: LD_ADDR_VAR 0 44
25031: PUSH
25032: LD_INT 0
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 0
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 1
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: LD_INT 1
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 1
25085: NEG
25086: PUSH
25087: LD_INT 0
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 1
25096: NEG
25097: PUSH
25098: LD_INT 1
25100: NEG
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 1
25108: NEG
25109: PUSH
25110: LD_INT 2
25112: NEG
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 1
25120: PUSH
25121: LD_INT 1
25123: NEG
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 2
25131: PUSH
25132: LD_INT 0
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 2
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: LD_INT 2
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 1
25161: PUSH
25162: LD_INT 2
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 1
25171: NEG
25172: PUSH
25173: LD_INT 1
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 2
25182: NEG
25183: PUSH
25184: LD_INT 0
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 2
25193: NEG
25194: PUSH
25195: LD_INT 1
25197: NEG
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 2
25205: NEG
25206: PUSH
25207: LD_INT 2
25209: NEG
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 2
25217: NEG
25218: PUSH
25219: LD_INT 3
25221: NEG
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 2
25229: PUSH
25230: LD_INT 1
25232: NEG
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 3
25240: PUSH
25241: LD_INT 0
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 3
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 3
25260: PUSH
25261: LD_INT 2
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 3
25270: PUSH
25271: LD_INT 3
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 2
25280: PUSH
25281: LD_INT 3
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 2
25290: NEG
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 3
25301: NEG
25302: PUSH
25303: LD_INT 0
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 3
25312: NEG
25313: PUSH
25314: LD_INT 1
25316: NEG
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 3
25324: NEG
25325: PUSH
25326: LD_INT 2
25328: NEG
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 3
25336: NEG
25337: PUSH
25338: LD_INT 3
25340: NEG
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25377: LD_ADDR_VAR 0 45
25381: PUSH
25382: LD_INT 0
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: LD_INT 1
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: LD_INT 0
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 0
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 1
25435: NEG
25436: PUSH
25437: LD_INT 0
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: LD_INT 1
25450: NEG
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 1
25458: NEG
25459: PUSH
25460: LD_INT 2
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 0
25470: PUSH
25471: LD_INT 2
25473: NEG
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: LD_INT 1
25484: NEG
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 2
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 2
25502: PUSH
25503: LD_INT 2
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 1
25512: PUSH
25513: LD_INT 2
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 0
25522: PUSH
25523: LD_INT 2
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 1
25532: NEG
25533: PUSH
25534: LD_INT 1
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 2
25543: NEG
25544: PUSH
25545: LD_INT 1
25547: NEG
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 2
25555: NEG
25556: PUSH
25557: LD_INT 2
25559: NEG
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 2
25567: NEG
25568: PUSH
25569: LD_INT 3
25571: NEG
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: NEG
25580: PUSH
25581: LD_INT 3
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 0
25591: PUSH
25592: LD_INT 3
25594: NEG
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: LD_INT 2
25605: NEG
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 3
25613: PUSH
25614: LD_INT 2
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 3
25623: PUSH
25624: LD_INT 3
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 2
25633: PUSH
25634: LD_INT 3
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 1
25643: PUSH
25644: LD_INT 3
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 0
25653: PUSH
25654: LD_INT 3
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 1
25663: NEG
25664: PUSH
25665: LD_INT 2
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 3
25674: NEG
25675: PUSH
25676: LD_INT 2
25678: NEG
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 3
25686: NEG
25687: PUSH
25688: LD_INT 3
25690: NEG
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25727: LD_ADDR_VAR 0 46
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: LD_INT 0
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: LD_INT 1
25747: NEG
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 1
25755: PUSH
25756: LD_INT 0
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: LD_INT 1
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 1
25785: NEG
25786: PUSH
25787: LD_INT 0
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 1
25796: NEG
25797: PUSH
25798: LD_INT 1
25800: NEG
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 1
25808: NEG
25809: PUSH
25810: LD_INT 2
25812: NEG
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 0
25820: PUSH
25821: LD_INT 2
25823: NEG
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 1
25831: PUSH
25832: LD_INT 1
25834: NEG
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 2
25842: PUSH
25843: LD_INT 0
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: PUSH
25853: LD_INT 1
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 1
25862: PUSH
25863: LD_INT 2
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 0
25872: PUSH
25873: LD_INT 2
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 2
25893: NEG
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 2
25904: NEG
25905: PUSH
25906: LD_INT 1
25908: NEG
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 1
25916: NEG
25917: PUSH
25918: LD_INT 3
25920: NEG
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 0
25928: PUSH
25929: LD_INT 3
25931: NEG
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 1
25939: PUSH
25940: LD_INT 2
25942: NEG
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 2
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 3
25961: PUSH
25962: LD_INT 0
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 3
25971: PUSH
25972: LD_INT 1
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 1
25981: PUSH
25982: LD_INT 3
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: LD_INT 3
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 1
26001: NEG
26002: PUSH
26003: LD_INT 2
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 2
26012: NEG
26013: PUSH
26014: LD_INT 1
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 3
26023: NEG
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 3
26034: NEG
26035: PUSH
26036: LD_INT 1
26038: NEG
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26075: LD_ADDR_VAR 0 47
26079: PUSH
26080: LD_INT 0
26082: PUSH
26083: LD_INT 0
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 0
26092: PUSH
26093: LD_INT 1
26095: NEG
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 1
26103: PUSH
26104: LD_INT 0
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: LD_INT 0
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 1
26144: NEG
26145: PUSH
26146: LD_INT 1
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 1
26156: NEG
26157: PUSH
26158: LD_INT 2
26160: NEG
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: LD_INT 2
26171: NEG
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 1
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 2
26190: NEG
26191: PUSH
26192: LD_INT 1
26194: NEG
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 2
26202: NEG
26203: PUSH
26204: LD_INT 2
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26226: LD_ADDR_VAR 0 48
26230: PUSH
26231: LD_INT 0
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 0
26243: PUSH
26244: LD_INT 1
26246: NEG
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 1
26264: PUSH
26265: LD_INT 1
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 0
26274: PUSH
26275: LD_INT 1
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: NEG
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 1
26295: NEG
26296: PUSH
26297: LD_INT 1
26299: NEG
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: PUSH
26309: LD_INT 2
26311: NEG
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 0
26319: PUSH
26320: LD_INT 2
26322: NEG
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 1
26330: PUSH
26331: LD_INT 1
26333: NEG
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 2
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 2
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26373: LD_ADDR_VAR 0 49
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 0
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: LD_INT 1
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 0
26421: PUSH
26422: LD_INT 1
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: LD_INT 0
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: LD_INT 1
26446: NEG
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 1
26454: PUSH
26455: LD_INT 1
26457: NEG
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 2
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: LD_INT 1
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 2
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: LD_INT 2
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26517: LD_ADDR_VAR 0 50
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: LD_INT 0
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: LD_INT 1
26537: NEG
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 1
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 0
26565: PUSH
26566: LD_INT 1
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 1
26575: NEG
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 1
26586: NEG
26587: PUSH
26588: LD_INT 1
26590: NEG
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 2
26598: PUSH
26599: LD_INT 1
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 2
26608: PUSH
26609: LD_INT 2
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 1
26618: PUSH
26619: LD_INT 2
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: LD_INT 2
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26661: LD_ADDR_VAR 0 51
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: LD_INT 0
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 0
26678: PUSH
26679: LD_INT 1
26681: NEG
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 1
26689: PUSH
26690: LD_INT 0
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 0
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 1
26719: NEG
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 1
26730: NEG
26731: PUSH
26732: LD_INT 1
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 1
26742: PUSH
26743: LD_INT 2
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 0
26752: PUSH
26753: LD_INT 2
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: NEG
26763: PUSH
26764: LD_INT 1
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 2
26773: NEG
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 2
26784: NEG
26785: PUSH
26786: LD_INT 1
26788: NEG
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26808: LD_ADDR_VAR 0 52
26812: PUSH
26813: LD_INT 0
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: LD_INT 0
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 0
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 1
26866: NEG
26867: PUSH
26868: LD_INT 0
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 1
26877: NEG
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 1
26889: NEG
26890: PUSH
26891: LD_INT 2
26893: NEG
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: NEG
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 2
26912: NEG
26913: PUSH
26914: LD_INT 0
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 2
26923: NEG
26924: PUSH
26925: LD_INT 1
26927: NEG
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 2
26935: NEG
26936: PUSH
26937: LD_INT 2
26939: NEG
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26959: LD_ADDR_VAR 0 53
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: NEG
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 1
27040: NEG
27041: PUSH
27042: LD_INT 2
27044: NEG
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: LD_INT 2
27055: NEG
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 1
27063: PUSH
27064: LD_INT 1
27066: NEG
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 2
27074: PUSH
27075: LD_INT 0
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 2
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 2
27094: PUSH
27095: LD_INT 2
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: LD_INT 2
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 0
27114: PUSH
27115: LD_INT 2
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 1
27124: NEG
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 2
27135: NEG
27136: PUSH
27137: LD_INT 0
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 2
27146: NEG
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 2
27158: NEG
27159: PUSH
27160: LD_INT 2
27162: NEG
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27189: LD_ADDR_VAR 0 54
27193: PUSH
27194: LD_INT 0
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 1
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 1
27227: PUSH
27228: LD_INT 1
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 1
27247: NEG
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 1
27258: NEG
27259: PUSH
27260: LD_INT 1
27262: NEG
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: LD_INT 2
27274: NEG
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 0
27282: PUSH
27283: LD_INT 2
27285: NEG
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 1
27293: PUSH
27294: LD_INT 1
27296: NEG
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 2
27304: PUSH
27305: LD_INT 0
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 2
27314: PUSH
27315: LD_INT 1
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 2
27324: PUSH
27325: LD_INT 2
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: LD_INT 2
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 0
27344: PUSH
27345: LD_INT 2
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: NEG
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 2
27365: NEG
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 2
27376: NEG
27377: PUSH
27378: LD_INT 1
27380: NEG
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 2
27388: NEG
27389: PUSH
27390: LD_INT 2
27392: NEG
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27419: LD_ADDR_VAR 0 55
27423: PUSH
27424: LD_INT 0
27426: PUSH
27427: LD_INT 0
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 0
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 1
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 1
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 0
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 1
27477: NEG
27478: PUSH
27479: LD_INT 0
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: NEG
27489: PUSH
27490: LD_INT 1
27492: NEG
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 1
27500: NEG
27501: PUSH
27502: LD_INT 2
27504: NEG
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: LD_INT 2
27515: NEG
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: PUSH
27524: LD_INT 1
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 2
27534: PUSH
27535: LD_INT 0
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 2
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 2
27554: PUSH
27555: LD_INT 2
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 1
27564: PUSH
27565: LD_INT 2
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: LD_INT 2
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 1
27584: NEG
27585: PUSH
27586: LD_INT 1
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 2
27595: NEG
27596: PUSH
27597: LD_INT 0
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 2
27606: NEG
27607: PUSH
27608: LD_INT 1
27610: NEG
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 2
27618: NEG
27619: PUSH
27620: LD_INT 2
27622: NEG
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27649: LD_ADDR_VAR 0 56
27653: PUSH
27654: LD_INT 0
27656: PUSH
27657: LD_INT 0
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 0
27666: PUSH
27667: LD_INT 1
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 1
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 1
27687: PUSH
27688: LD_INT 1
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 0
27697: PUSH
27698: LD_INT 1
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 1
27707: NEG
27708: PUSH
27709: LD_INT 0
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 1
27718: NEG
27719: PUSH
27720: LD_INT 1
27722: NEG
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: LD_INT 2
27734: NEG
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: LD_INT 2
27745: NEG
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 1
27753: PUSH
27754: LD_INT 1
27756: NEG
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 2
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 2
27774: PUSH
27775: LD_INT 1
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 2
27784: PUSH
27785: LD_INT 2
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 1
27794: PUSH
27795: LD_INT 2
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 0
27804: PUSH
27805: LD_INT 2
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 1
27814: NEG
27815: PUSH
27816: LD_INT 1
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 2
27825: NEG
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 2
27836: NEG
27837: PUSH
27838: LD_INT 1
27840: NEG
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 2
27848: NEG
27849: PUSH
27850: LD_INT 2
27852: NEG
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27879: LD_ADDR_VAR 0 57
27883: PUSH
27884: LD_INT 0
27886: PUSH
27887: LD_INT 0
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: LD_INT 1
27899: NEG
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 1
27907: PUSH
27908: LD_INT 0
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: PUSH
27918: LD_INT 1
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 0
27927: PUSH
27928: LD_INT 1
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 1
27937: NEG
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 1
27948: NEG
27949: PUSH
27950: LD_INT 1
27952: NEG
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: NEG
27961: PUSH
27962: LD_INT 2
27964: NEG
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 0
27972: PUSH
27973: LD_INT 2
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: LD_INT 1
27986: NEG
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 2
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: LD_INT 1
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 2
28014: PUSH
28015: LD_INT 2
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: LD_INT 2
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 0
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 1
28044: NEG
28045: PUSH
28046: LD_INT 1
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 2
28055: NEG
28056: PUSH
28057: LD_INT 0
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 2
28066: NEG
28067: PUSH
28068: LD_INT 1
28070: NEG
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 2
28078: NEG
28079: PUSH
28080: LD_INT 2
28082: NEG
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28109: LD_ADDR_VAR 0 58
28113: PUSH
28114: LD_INT 0
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: LD_INT 1
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 1
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 1
28167: NEG
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: LD_INT 1
28182: NEG
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 1
28190: NEG
28191: PUSH
28192: LD_INT 2
28194: NEG
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: LD_INT 2
28205: NEG
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: LD_INT 1
28216: NEG
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 2
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 2
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 2
28244: PUSH
28245: LD_INT 2
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 1
28254: PUSH
28255: LD_INT 2
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 0
28264: PUSH
28265: LD_INT 2
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 1
28274: NEG
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 2
28285: NEG
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 2
28296: NEG
28297: PUSH
28298: LD_INT 1
28300: NEG
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 2
28308: NEG
28309: PUSH
28310: LD_INT 2
28312: NEG
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28339: LD_ADDR_VAR 0 59
28343: PUSH
28344: LD_INT 0
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 0
28356: PUSH
28357: LD_INT 1
28359: NEG
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 1
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 1
28377: PUSH
28378: LD_INT 1
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: LD_INT 1
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 1
28397: NEG
28398: PUSH
28399: LD_INT 0
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 1
28408: NEG
28409: PUSH
28410: LD_INT 1
28412: NEG
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28427: LD_ADDR_VAR 0 60
28431: PUSH
28432: LD_INT 0
28434: PUSH
28435: LD_INT 0
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: LD_INT 1
28447: NEG
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 1
28455: PUSH
28456: LD_INT 0
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: PUSH
28466: LD_INT 1
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 0
28475: PUSH
28476: LD_INT 1
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 1
28485: NEG
28486: PUSH
28487: LD_INT 0
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 1
28496: NEG
28497: PUSH
28498: LD_INT 1
28500: NEG
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28515: LD_ADDR_VAR 0 61
28519: PUSH
28520: LD_INT 0
28522: PUSH
28523: LD_INT 0
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 0
28532: PUSH
28533: LD_INT 1
28535: NEG
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: PUSH
28544: LD_INT 0
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: LD_INT 1
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 0
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: LD_INT 0
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 1
28584: NEG
28585: PUSH
28586: LD_INT 1
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28603: LD_ADDR_VAR 0 62
28607: PUSH
28608: LD_INT 0
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: LD_INT 1
28623: NEG
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: LD_INT 0
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 1
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 1
28661: NEG
28662: PUSH
28663: LD_INT 0
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: NEG
28673: PUSH
28674: LD_INT 1
28676: NEG
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28691: LD_ADDR_VAR 0 63
28695: PUSH
28696: LD_INT 0
28698: PUSH
28699: LD_INT 0
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: LD_INT 1
28711: NEG
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 1
28719: PUSH
28720: LD_INT 0
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 1
28729: PUSH
28730: LD_INT 1
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 0
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 1
28749: NEG
28750: PUSH
28751: LD_INT 0
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 1
28760: NEG
28761: PUSH
28762: LD_INT 1
28764: NEG
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28779: LD_ADDR_VAR 0 64
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: LD_INT 1
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: NEG
28838: PUSH
28839: LD_INT 0
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 1
28848: NEG
28849: PUSH
28850: LD_INT 1
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: ST_TO_ADDR
// end ; 1 :
28867: GO 34764
28869: LD_INT 1
28871: DOUBLE
28872: EQUAL
28873: IFTRUE 28877
28875: GO 31500
28877: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28878: LD_ADDR_VAR 0 11
28882: PUSH
28883: LD_INT 1
28885: NEG
28886: PUSH
28887: LD_INT 3
28889: NEG
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 0
28897: PUSH
28898: LD_INT 3
28900: NEG
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: LD_INT 2
28911: NEG
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: LIST
28921: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28922: LD_ADDR_VAR 0 12
28926: PUSH
28927: LD_INT 2
28929: PUSH
28930: LD_INT 1
28932: NEG
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 3
28940: PUSH
28941: LD_INT 0
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 3
28950: PUSH
28951: LD_INT 1
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: LIST
28962: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28963: LD_ADDR_VAR 0 13
28967: PUSH
28968: LD_INT 3
28970: PUSH
28971: LD_INT 2
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 3
28980: PUSH
28981: LD_INT 3
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 2
28990: PUSH
28991: LD_INT 3
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: LIST
29002: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29003: LD_ADDR_VAR 0 14
29007: PUSH
29008: LD_INT 1
29010: PUSH
29011: LD_INT 3
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: LD_INT 3
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 1
29030: NEG
29031: PUSH
29032: LD_INT 2
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: LIST
29043: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29044: LD_ADDR_VAR 0 15
29048: PUSH
29049: LD_INT 2
29051: NEG
29052: PUSH
29053: LD_INT 1
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 3
29062: NEG
29063: PUSH
29064: LD_INT 0
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 3
29073: NEG
29074: PUSH
29075: LD_INT 1
29077: NEG
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: LIST
29087: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29088: LD_ADDR_VAR 0 16
29092: PUSH
29093: LD_INT 2
29095: NEG
29096: PUSH
29097: LD_INT 3
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 3
29107: NEG
29108: PUSH
29109: LD_INT 2
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 3
29119: NEG
29120: PUSH
29121: LD_INT 3
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: LIST
29133: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29134: LD_ADDR_VAR 0 17
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: LD_INT 3
29145: NEG
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: LD_INT 3
29156: NEG
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: LD_INT 2
29167: NEG
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: LIST
29177: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29178: LD_ADDR_VAR 0 18
29182: PUSH
29183: LD_INT 2
29185: PUSH
29186: LD_INT 1
29188: NEG
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 3
29196: PUSH
29197: LD_INT 0
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 3
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: LIST
29218: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29219: LD_ADDR_VAR 0 19
29223: PUSH
29224: LD_INT 3
29226: PUSH
29227: LD_INT 2
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 3
29236: PUSH
29237: LD_INT 3
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 2
29246: PUSH
29247: LD_INT 3
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: LIST
29258: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29259: LD_ADDR_VAR 0 20
29263: PUSH
29264: LD_INT 1
29266: PUSH
29267: LD_INT 3
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 0
29276: PUSH
29277: LD_INT 3
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 1
29286: NEG
29287: PUSH
29288: LD_INT 2
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: LIST
29299: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29300: LD_ADDR_VAR 0 21
29304: PUSH
29305: LD_INT 2
29307: NEG
29308: PUSH
29309: LD_INT 1
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 3
29318: NEG
29319: PUSH
29320: LD_INT 0
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 3
29329: NEG
29330: PUSH
29331: LD_INT 1
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: LIST
29343: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29344: LD_ADDR_VAR 0 22
29348: PUSH
29349: LD_INT 2
29351: NEG
29352: PUSH
29353: LD_INT 3
29355: NEG
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 3
29363: NEG
29364: PUSH
29365: LD_INT 2
29367: NEG
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 3
29375: NEG
29376: PUSH
29377: LD_INT 3
29379: NEG
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: LIST
29389: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29390: LD_ADDR_VAR 0 23
29394: PUSH
29395: LD_INT 0
29397: PUSH
29398: LD_INT 3
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 1
29408: NEG
29409: PUSH
29410: LD_INT 4
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 1
29420: PUSH
29421: LD_INT 3
29423: NEG
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29434: LD_ADDR_VAR 0 24
29438: PUSH
29439: LD_INT 3
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 3
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 4
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: LIST
29474: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29475: LD_ADDR_VAR 0 25
29479: PUSH
29480: LD_INT 3
29482: PUSH
29483: LD_INT 3
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 4
29492: PUSH
29493: LD_INT 3
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 3
29502: PUSH
29503: LD_INT 4
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: LIST
29514: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29515: LD_ADDR_VAR 0 26
29519: PUSH
29520: LD_INT 0
29522: PUSH
29523: LD_INT 3
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 1
29532: PUSH
29533: LD_INT 4
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: LD_INT 3
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: LIST
29555: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29556: LD_ADDR_VAR 0 27
29560: PUSH
29561: LD_INT 3
29563: NEG
29564: PUSH
29565: LD_INT 0
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 3
29574: NEG
29575: PUSH
29576: LD_INT 1
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 4
29585: NEG
29586: PUSH
29587: LD_INT 1
29589: NEG
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: LIST
29599: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29600: LD_ADDR_VAR 0 28
29604: PUSH
29605: LD_INT 3
29607: NEG
29608: PUSH
29609: LD_INT 3
29611: NEG
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 3
29619: NEG
29620: PUSH
29621: LD_INT 4
29623: NEG
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 4
29631: NEG
29632: PUSH
29633: LD_INT 3
29635: NEG
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: LIST
29645: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29646: LD_ADDR_VAR 0 29
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: LD_INT 3
29657: NEG
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 0
29665: PUSH
29666: LD_INT 3
29668: NEG
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 1
29676: PUSH
29677: LD_INT 2
29679: NEG
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 1
29687: NEG
29688: PUSH
29689: LD_INT 4
29691: NEG
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: LD_INT 4
29702: NEG
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: LD_INT 3
29713: NEG
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 1
29721: NEG
29722: PUSH
29723: LD_INT 5
29725: NEG
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 0
29733: PUSH
29734: LD_INT 5
29736: NEG
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 1
29744: PUSH
29745: LD_INT 4
29747: NEG
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 1
29755: NEG
29756: PUSH
29757: LD_INT 6
29759: NEG
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: LD_INT 6
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 1
29778: PUSH
29779: LD_INT 5
29781: NEG
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29801: LD_ADDR_VAR 0 30
29805: PUSH
29806: LD_INT 2
29808: PUSH
29809: LD_INT 1
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 3
29819: PUSH
29820: LD_INT 0
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 3
29829: PUSH
29830: LD_INT 1
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 3
29839: PUSH
29840: LD_INT 1
29842: NEG
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 4
29850: PUSH
29851: LD_INT 0
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 4
29860: PUSH
29861: LD_INT 1
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 4
29870: PUSH
29871: LD_INT 1
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 5
29881: PUSH
29882: LD_INT 0
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 5
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 5
29901: PUSH
29902: LD_INT 1
29904: NEG
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 6
29912: PUSH
29913: LD_INT 0
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 6
29922: PUSH
29923: LD_INT 1
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29944: LD_ADDR_VAR 0 31
29948: PUSH
29949: LD_INT 3
29951: PUSH
29952: LD_INT 2
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 3
29961: PUSH
29962: LD_INT 3
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 2
29971: PUSH
29972: LD_INT 3
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 4
29981: PUSH
29982: LD_INT 3
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 4
29991: PUSH
29992: LD_INT 4
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 3
30001: PUSH
30002: LD_INT 4
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 5
30011: PUSH
30012: LD_INT 4
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 5
30021: PUSH
30022: LD_INT 5
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 4
30031: PUSH
30032: LD_INT 5
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 6
30041: PUSH
30042: LD_INT 5
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 6
30051: PUSH
30052: LD_INT 6
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 5
30061: PUSH
30062: LD_INT 6
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30083: LD_ADDR_VAR 0 32
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: LD_INT 3
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 0
30100: PUSH
30101: LD_INT 3
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 1
30110: NEG
30111: PUSH
30112: LD_INT 2
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 1
30121: PUSH
30122: LD_INT 4
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 0
30131: PUSH
30132: LD_INT 4
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 1
30141: NEG
30142: PUSH
30143: LD_INT 3
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 1
30152: PUSH
30153: LD_INT 5
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 0
30162: PUSH
30163: LD_INT 5
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 1
30172: NEG
30173: PUSH
30174: LD_INT 4
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: LD_INT 6
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 0
30193: PUSH
30194: LD_INT 6
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 1
30203: NEG
30204: PUSH
30205: LD_INT 5
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30226: LD_ADDR_VAR 0 33
30230: PUSH
30231: LD_INT 2
30233: NEG
30234: PUSH
30235: LD_INT 1
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 3
30244: NEG
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 3
30255: NEG
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 3
30267: NEG
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 4
30278: NEG
30279: PUSH
30280: LD_INT 0
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 4
30289: NEG
30290: PUSH
30291: LD_INT 1
30293: NEG
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 4
30301: NEG
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 5
30312: NEG
30313: PUSH
30314: LD_INT 0
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 5
30323: NEG
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 5
30335: NEG
30336: PUSH
30337: LD_INT 1
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 6
30346: NEG
30347: PUSH
30348: LD_INT 0
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 6
30357: NEG
30358: PUSH
30359: LD_INT 1
30361: NEG
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30381: LD_ADDR_VAR 0 34
30385: PUSH
30386: LD_INT 2
30388: NEG
30389: PUSH
30390: LD_INT 3
30392: NEG
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 3
30400: NEG
30401: PUSH
30402: LD_INT 2
30404: NEG
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 3
30412: NEG
30413: PUSH
30414: LD_INT 3
30416: NEG
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 3
30424: NEG
30425: PUSH
30426: LD_INT 4
30428: NEG
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 4
30436: NEG
30437: PUSH
30438: LD_INT 3
30440: NEG
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 4
30448: NEG
30449: PUSH
30450: LD_INT 4
30452: NEG
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 4
30460: NEG
30461: PUSH
30462: LD_INT 5
30464: NEG
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 5
30472: NEG
30473: PUSH
30474: LD_INT 4
30476: NEG
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 5
30484: NEG
30485: PUSH
30486: LD_INT 5
30488: NEG
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 5
30496: NEG
30497: PUSH
30498: LD_INT 6
30500: NEG
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 6
30508: NEG
30509: PUSH
30510: LD_INT 5
30512: NEG
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 6
30520: NEG
30521: PUSH
30522: LD_INT 6
30524: NEG
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30544: LD_ADDR_VAR 0 41
30548: PUSH
30549: LD_INT 0
30551: PUSH
30552: LD_INT 2
30554: NEG
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 1
30562: NEG
30563: PUSH
30564: LD_INT 3
30566: NEG
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 1
30574: PUSH
30575: LD_INT 2
30577: NEG
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: LIST
30587: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30588: LD_ADDR_VAR 0 42
30592: PUSH
30593: LD_INT 2
30595: PUSH
30596: LD_INT 0
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 2
30605: PUSH
30606: LD_INT 1
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 3
30616: PUSH
30617: LD_INT 1
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: LIST
30628: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30629: LD_ADDR_VAR 0 43
30633: PUSH
30634: LD_INT 2
30636: PUSH
30637: LD_INT 2
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 3
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 2
30656: PUSH
30657: LD_INT 3
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30669: LD_ADDR_VAR 0 44
30673: PUSH
30674: LD_INT 0
30676: PUSH
30677: LD_INT 2
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: LD_INT 3
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 1
30696: NEG
30697: PUSH
30698: LD_INT 2
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: LIST
30709: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30710: LD_ADDR_VAR 0 45
30714: PUSH
30715: LD_INT 2
30717: NEG
30718: PUSH
30719: LD_INT 0
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 2
30728: NEG
30729: PUSH
30730: LD_INT 1
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 3
30739: NEG
30740: PUSH
30741: LD_INT 1
30743: NEG
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: LIST
30753: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30754: LD_ADDR_VAR 0 46
30758: PUSH
30759: LD_INT 2
30761: NEG
30762: PUSH
30763: LD_INT 2
30765: NEG
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 2
30773: NEG
30774: PUSH
30775: LD_INT 3
30777: NEG
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 3
30785: NEG
30786: PUSH
30787: LD_INT 2
30789: NEG
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30800: LD_ADDR_VAR 0 47
30804: PUSH
30805: LD_INT 2
30807: NEG
30808: PUSH
30809: LD_INT 3
30811: NEG
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 1
30819: NEG
30820: PUSH
30821: LD_INT 3
30823: NEG
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30833: LD_ADDR_VAR 0 48
30837: PUSH
30838: LD_INT 1
30840: PUSH
30841: LD_INT 2
30843: NEG
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 2
30851: PUSH
30852: LD_INT 1
30854: NEG
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30864: LD_ADDR_VAR 0 49
30868: PUSH
30869: LD_INT 3
30871: PUSH
30872: LD_INT 1
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 3
30881: PUSH
30882: LD_INT 2
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30893: LD_ADDR_VAR 0 50
30897: PUSH
30898: LD_INT 2
30900: PUSH
30901: LD_INT 3
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 1
30910: PUSH
30911: LD_INT 3
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30922: LD_ADDR_VAR 0 51
30926: PUSH
30927: LD_INT 1
30929: NEG
30930: PUSH
30931: LD_INT 2
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 2
30940: NEG
30941: PUSH
30942: LD_INT 1
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30953: LD_ADDR_VAR 0 52
30957: PUSH
30958: LD_INT 3
30960: NEG
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 3
30972: NEG
30973: PUSH
30974: LD_INT 2
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30986: LD_ADDR_VAR 0 53
30990: PUSH
30991: LD_INT 1
30993: NEG
30994: PUSH
30995: LD_INT 3
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 0
31005: PUSH
31006: LD_INT 3
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 1
31016: PUSH
31017: LD_INT 2
31019: NEG
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: LIST
31029: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31030: LD_ADDR_VAR 0 54
31034: PUSH
31035: LD_INT 2
31037: PUSH
31038: LD_INT 1
31040: NEG
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 3
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 3
31058: PUSH
31059: LD_INT 1
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: LIST
31070: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31071: LD_ADDR_VAR 0 55
31075: PUSH
31076: LD_INT 3
31078: PUSH
31079: LD_INT 2
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 3
31088: PUSH
31089: LD_INT 3
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 2
31098: PUSH
31099: LD_INT 3
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: LIST
31110: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31111: LD_ADDR_VAR 0 56
31115: PUSH
31116: LD_INT 1
31118: PUSH
31119: LD_INT 3
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 0
31128: PUSH
31129: LD_INT 3
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 1
31138: NEG
31139: PUSH
31140: LD_INT 2
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31152: LD_ADDR_VAR 0 57
31156: PUSH
31157: LD_INT 2
31159: NEG
31160: PUSH
31161: LD_INT 1
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 3
31170: NEG
31171: PUSH
31172: LD_INT 0
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 3
31181: NEG
31182: PUSH
31183: LD_INT 1
31185: NEG
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: LIST
31195: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31196: LD_ADDR_VAR 0 58
31200: PUSH
31201: LD_INT 2
31203: NEG
31204: PUSH
31205: LD_INT 3
31207: NEG
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 3
31215: NEG
31216: PUSH
31217: LD_INT 2
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 3
31227: NEG
31228: PUSH
31229: LD_INT 3
31231: NEG
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: LIST
31241: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31242: LD_ADDR_VAR 0 59
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PUSH
31251: LD_INT 2
31253: NEG
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: LD_INT 2
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 1
31272: PUSH
31273: LD_INT 1
31275: NEG
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: LIST
31285: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31286: LD_ADDR_VAR 0 60
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 2
31304: PUSH
31305: LD_INT 0
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: LD_INT 1
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: LIST
31326: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31327: LD_ADDR_VAR 0 61
31331: PUSH
31332: LD_INT 2
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 2
31344: PUSH
31345: LD_INT 2
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: LD_INT 2
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31367: LD_ADDR_VAR 0 62
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: LD_INT 2
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 0
31384: PUSH
31385: LD_INT 2
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 1
31394: NEG
31395: PUSH
31396: LD_INT 1
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: LIST
31407: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31408: LD_ADDR_VAR 0 63
31412: PUSH
31413: LD_INT 1
31415: NEG
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 2
31426: NEG
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 2
31437: NEG
31438: PUSH
31439: LD_INT 1
31441: NEG
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: LIST
31451: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31452: LD_ADDR_VAR 0 64
31456: PUSH
31457: LD_INT 1
31459: NEG
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 2
31471: NEG
31472: PUSH
31473: LD_INT 1
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 2
31483: NEG
31484: PUSH
31485: LD_INT 2
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: LIST
31497: ST_TO_ADDR
// end ; 2 :
31498: GO 34764
31500: LD_INT 2
31502: DOUBLE
31503: EQUAL
31504: IFTRUE 31508
31506: GO 34763
31508: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31509: LD_ADDR_VAR 0 29
31513: PUSH
31514: LD_INT 4
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 4
31526: PUSH
31527: LD_INT 1
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 5
31537: PUSH
31538: LD_INT 0
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 5
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 4
31557: PUSH
31558: LD_INT 1
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 3
31567: PUSH
31568: LD_INT 0
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 3
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 3
31588: PUSH
31589: LD_INT 2
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 5
31599: PUSH
31600: LD_INT 2
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 3
31609: PUSH
31610: LD_INT 3
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 3
31619: PUSH
31620: LD_INT 2
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 4
31629: PUSH
31630: LD_INT 3
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 4
31639: PUSH
31640: LD_INT 4
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 3
31649: PUSH
31650: LD_INT 4
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 2
31659: PUSH
31660: LD_INT 3
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: LD_INT 2
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 4
31679: PUSH
31680: LD_INT 2
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 2
31689: PUSH
31690: LD_INT 4
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 0
31699: PUSH
31700: LD_INT 4
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: LD_INT 3
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 1
31719: PUSH
31720: LD_INT 4
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: LD_INT 5
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 0
31739: PUSH
31740: LD_INT 5
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: LD_INT 4
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: LD_INT 3
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 2
31771: PUSH
31772: LD_INT 5
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 2
31781: NEG
31782: PUSH
31783: LD_INT 3
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 3
31792: NEG
31793: PUSH
31794: LD_INT 0
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 3
31803: NEG
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 2
31815: NEG
31816: PUSH
31817: LD_INT 0
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 2
31826: NEG
31827: PUSH
31828: LD_INT 1
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 3
31837: NEG
31838: PUSH
31839: LD_INT 1
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 4
31848: NEG
31849: PUSH
31850: LD_INT 0
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 4
31859: NEG
31860: PUSH
31861: LD_INT 1
31863: NEG
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 4
31871: NEG
31872: PUSH
31873: LD_INT 2
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 2
31883: NEG
31884: PUSH
31885: LD_INT 2
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 4
31894: NEG
31895: PUSH
31896: LD_INT 4
31898: NEG
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 4
31906: NEG
31907: PUSH
31908: LD_INT 5
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 3
31918: NEG
31919: PUSH
31920: LD_INT 4
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 3
31930: NEG
31931: PUSH
31932: LD_INT 3
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 4
31942: NEG
31943: PUSH
31944: LD_INT 3
31946: NEG
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 5
31954: NEG
31955: PUSH
31956: LD_INT 4
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 5
31966: NEG
31967: PUSH
31968: LD_INT 5
31970: NEG
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 3
31978: NEG
31979: PUSH
31980: LD_INT 5
31982: NEG
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 5
31990: NEG
31991: PUSH
31992: LD_INT 3
31994: NEG
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32047: LD_ADDR_VAR 0 30
32051: PUSH
32052: LD_INT 4
32054: PUSH
32055: LD_INT 4
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 4
32064: PUSH
32065: LD_INT 3
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 5
32074: PUSH
32075: LD_INT 4
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 5
32084: PUSH
32085: LD_INT 5
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 4
32094: PUSH
32095: LD_INT 5
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 3
32104: PUSH
32105: LD_INT 4
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 3
32114: PUSH
32115: LD_INT 3
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 5
32124: PUSH
32125: LD_INT 3
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 3
32134: PUSH
32135: LD_INT 5
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: LD_INT 3
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: LD_INT 2
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 1
32164: PUSH
32165: LD_INT 3
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 1
32174: PUSH
32175: LD_INT 4
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 0
32184: PUSH
32185: LD_INT 4
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 1
32194: NEG
32195: PUSH
32196: LD_INT 3
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 1
32205: NEG
32206: PUSH
32207: LD_INT 2
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 2
32216: PUSH
32217: LD_INT 4
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 2
32226: NEG
32227: PUSH
32228: LD_INT 2
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 4
32237: NEG
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 4
32248: NEG
32249: PUSH
32250: LD_INT 1
32252: NEG
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 3
32260: NEG
32261: PUSH
32262: LD_INT 0
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 3
32271: NEG
32272: PUSH
32273: LD_INT 1
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 4
32282: NEG
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 5
32293: NEG
32294: PUSH
32295: LD_INT 0
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 5
32304: NEG
32305: PUSH
32306: LD_INT 1
32308: NEG
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 5
32316: NEG
32317: PUSH
32318: LD_INT 2
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 3
32328: NEG
32329: PUSH
32330: LD_INT 2
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 3
32339: NEG
32340: PUSH
32341: LD_INT 3
32343: NEG
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 3
32351: NEG
32352: PUSH
32353: LD_INT 4
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 2
32363: NEG
32364: PUSH
32365: LD_INT 3
32367: NEG
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 2
32375: NEG
32376: PUSH
32377: LD_INT 2
32379: NEG
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 3
32387: NEG
32388: PUSH
32389: LD_INT 2
32391: NEG
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 4
32399: NEG
32400: PUSH
32401: LD_INT 3
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 4
32411: NEG
32412: PUSH
32413: LD_INT 4
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 2
32423: NEG
32424: PUSH
32425: LD_INT 4
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 4
32435: NEG
32436: PUSH
32437: LD_INT 2
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 0
32447: PUSH
32448: LD_INT 4
32450: NEG
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 0
32458: PUSH
32459: LD_INT 5
32461: NEG
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 1
32469: PUSH
32470: LD_INT 4
32472: NEG
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: LD_INT 3
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 0
32491: PUSH
32492: LD_INT 3
32494: NEG
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: LD_INT 4
32506: NEG
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 1
32514: NEG
32515: PUSH
32516: LD_INT 5
32518: NEG
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 2
32526: PUSH
32527: LD_INT 3
32529: NEG
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 2
32537: NEG
32538: PUSH
32539: LD_INT 5
32541: NEG
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32594: LD_ADDR_VAR 0 31
32598: PUSH
32599: LD_INT 0
32601: PUSH
32602: LD_INT 4
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 0
32611: PUSH
32612: LD_INT 3
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 1
32621: PUSH
32622: LD_INT 4
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 1
32631: PUSH
32632: LD_INT 5
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 0
32641: PUSH
32642: LD_INT 5
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 1
32651: NEG
32652: PUSH
32653: LD_INT 4
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 1
32662: NEG
32663: PUSH
32664: LD_INT 3
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 2
32673: PUSH
32674: LD_INT 5
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 2
32683: NEG
32684: PUSH
32685: LD_INT 3
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 3
32694: NEG
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 3
32705: NEG
32706: PUSH
32707: LD_INT 1
32709: NEG
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 2
32717: NEG
32718: PUSH
32719: LD_INT 0
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: LD_INT 1
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 3
32739: NEG
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 4
32750: NEG
32751: PUSH
32752: LD_INT 0
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 4
32761: NEG
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 4
32773: NEG
32774: PUSH
32775: LD_INT 2
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 2
32785: NEG
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 4
32796: NEG
32797: PUSH
32798: LD_INT 4
32800: NEG
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 4
32808: NEG
32809: PUSH
32810: LD_INT 5
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 3
32820: NEG
32821: PUSH
32822: LD_INT 4
32824: NEG
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 3
32832: NEG
32833: PUSH
32834: LD_INT 3
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 4
32844: NEG
32845: PUSH
32846: LD_INT 3
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 5
32856: NEG
32857: PUSH
32858: LD_INT 4
32860: NEG
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 5
32868: NEG
32869: PUSH
32870: LD_INT 5
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 3
32880: NEG
32881: PUSH
32882: LD_INT 5
32884: NEG
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 5
32892: NEG
32893: PUSH
32894: LD_INT 3
32896: NEG
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 0
32904: PUSH
32905: LD_INT 3
32907: NEG
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 0
32915: PUSH
32916: LD_INT 4
32918: NEG
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 1
32926: PUSH
32927: LD_INT 3
32929: NEG
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: LD_INT 2
32940: NEG
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: LD_INT 2
32951: NEG
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: LD_INT 3
32963: NEG
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 1
32971: NEG
32972: PUSH
32973: LD_INT 4
32975: NEG
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 2
32983: PUSH
32984: LD_INT 2
32986: NEG
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 2
32994: NEG
32995: PUSH
32996: LD_INT 4
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 4
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 4
33016: PUSH
33017: LD_INT 1
33019: NEG
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 5
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 5
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 4
33047: PUSH
33048: LD_INT 1
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 3
33057: PUSH
33058: LD_INT 0
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 3
33067: PUSH
33068: LD_INT 1
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 3
33078: PUSH
33079: LD_INT 2
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 5
33089: PUSH
33090: LD_INT 2
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33144: LD_ADDR_VAR 0 32
33148: PUSH
33149: LD_INT 4
33151: NEG
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 4
33162: NEG
33163: PUSH
33164: LD_INT 1
33166: NEG
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 3
33174: NEG
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 3
33185: NEG
33186: PUSH
33187: LD_INT 1
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 4
33196: NEG
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 5
33207: NEG
33208: PUSH
33209: LD_INT 0
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 5
33218: NEG
33219: PUSH
33220: LD_INT 1
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 5
33230: NEG
33231: PUSH
33232: LD_INT 2
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 3
33242: NEG
33243: PUSH
33244: LD_INT 2
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 3
33253: NEG
33254: PUSH
33255: LD_INT 3
33257: NEG
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 3
33265: NEG
33266: PUSH
33267: LD_INT 4
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 2
33277: NEG
33278: PUSH
33279: LD_INT 3
33281: NEG
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 2
33289: NEG
33290: PUSH
33291: LD_INT 2
33293: NEG
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 3
33301: NEG
33302: PUSH
33303: LD_INT 2
33305: NEG
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 4
33313: NEG
33314: PUSH
33315: LD_INT 3
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 4
33325: NEG
33326: PUSH
33327: LD_INT 4
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 2
33337: NEG
33338: PUSH
33339: LD_INT 4
33341: NEG
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 4
33349: NEG
33350: PUSH
33351: LD_INT 2
33353: NEG
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 0
33361: PUSH
33362: LD_INT 4
33364: NEG
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 0
33372: PUSH
33373: LD_INT 5
33375: NEG
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: LD_INT 4
33386: NEG
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 1
33394: PUSH
33395: LD_INT 3
33397: NEG
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 0
33405: PUSH
33406: LD_INT 3
33408: NEG
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 1
33416: NEG
33417: PUSH
33418: LD_INT 4
33420: NEG
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 1
33428: NEG
33429: PUSH
33430: LD_INT 5
33432: NEG
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 2
33440: PUSH
33441: LD_INT 3
33443: NEG
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 2
33451: NEG
33452: PUSH
33453: LD_INT 5
33455: NEG
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 3
33463: PUSH
33464: LD_INT 0
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 4
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 4
33494: PUSH
33495: LD_INT 1
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 3
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 2
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 2
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 2
33535: PUSH
33536: LD_INT 2
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 4
33546: PUSH
33547: LD_INT 2
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 4
33556: PUSH
33557: LD_INT 4
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 4
33566: PUSH
33567: LD_INT 3
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 5
33576: PUSH
33577: LD_INT 4
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 5
33586: PUSH
33587: LD_INT 5
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 4
33596: PUSH
33597: LD_INT 5
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 3
33606: PUSH
33607: LD_INT 4
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 3
33616: PUSH
33617: LD_INT 3
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 5
33626: PUSH
33627: LD_INT 3
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 3
33636: PUSH
33637: LD_INT 5
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33691: LD_ADDR_VAR 0 33
33695: PUSH
33696: LD_INT 4
33698: NEG
33699: PUSH
33700: LD_INT 4
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 4
33710: NEG
33711: PUSH
33712: LD_INT 5
33714: NEG
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 3
33722: NEG
33723: PUSH
33724: LD_INT 4
33726: NEG
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 3
33734: NEG
33735: PUSH
33736: LD_INT 3
33738: NEG
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 4
33746: NEG
33747: PUSH
33748: LD_INT 3
33750: NEG
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 5
33758: NEG
33759: PUSH
33760: LD_INT 4
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 5
33770: NEG
33771: PUSH
33772: LD_INT 5
33774: NEG
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 3
33782: NEG
33783: PUSH
33784: LD_INT 5
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 5
33794: NEG
33795: PUSH
33796: LD_INT 3
33798: NEG
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 0
33806: PUSH
33807: LD_INT 3
33809: NEG
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: LD_INT 4
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 1
33828: PUSH
33829: LD_INT 3
33831: NEG
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 1
33839: PUSH
33840: LD_INT 2
33842: NEG
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 0
33850: PUSH
33851: LD_INT 2
33853: NEG
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 1
33861: NEG
33862: PUSH
33863: LD_INT 3
33865: NEG
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 1
33873: NEG
33874: PUSH
33875: LD_INT 4
33877: NEG
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 2
33885: PUSH
33886: LD_INT 2
33888: NEG
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 2
33896: NEG
33897: PUSH
33898: LD_INT 4
33900: NEG
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 4
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 4
33918: PUSH
33919: LD_INT 1
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 5
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 5
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 4
33949: PUSH
33950: LD_INT 1
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 3
33959: PUSH
33960: LD_INT 0
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 3
33969: PUSH
33970: LD_INT 1
33972: NEG
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 3
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 5
33991: PUSH
33992: LD_INT 2
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 3
34001: PUSH
34002: LD_INT 3
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 3
34011: PUSH
34012: LD_INT 2
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 4
34021: PUSH
34022: LD_INT 3
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 4
34031: PUSH
34032: LD_INT 4
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 3
34041: PUSH
34042: LD_INT 4
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: PUSH
34052: LD_INT 3
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 2
34061: PUSH
34062: LD_INT 2
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 4
34071: PUSH
34072: LD_INT 2
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 2
34081: PUSH
34082: LD_INT 4
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 0
34091: PUSH
34092: LD_INT 4
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: LD_INT 3
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 1
34111: PUSH
34112: LD_INT 4
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 1
34121: PUSH
34122: LD_INT 5
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 0
34131: PUSH
34132: LD_INT 5
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 1
34141: NEG
34142: PUSH
34143: LD_INT 4
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 1
34152: NEG
34153: PUSH
34154: LD_INT 3
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: LD_INT 5
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: NEG
34174: PUSH
34175: LD_INT 3
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34229: LD_ADDR_VAR 0 34
34233: PUSH
34234: LD_INT 0
34236: PUSH
34237: LD_INT 4
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: LD_INT 5
34250: NEG
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 1
34258: PUSH
34259: LD_INT 4
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 1
34269: PUSH
34270: LD_INT 3
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 0
34280: PUSH
34281: LD_INT 3
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 1
34291: NEG
34292: PUSH
34293: LD_INT 4
34295: NEG
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: NEG
34304: PUSH
34305: LD_INT 5
34307: NEG
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 2
34315: PUSH
34316: LD_INT 3
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 2
34326: NEG
34327: PUSH
34328: LD_INT 5
34330: NEG
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 3
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 3
34348: PUSH
34349: LD_INT 1
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 4
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 4
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 3
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 2
34389: PUSH
34390: LD_INT 0
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 2
34399: PUSH
34400: LD_INT 1
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 2
34410: PUSH
34411: LD_INT 2
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 4
34421: PUSH
34422: LD_INT 2
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 4
34431: PUSH
34432: LD_INT 4
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 4
34441: PUSH
34442: LD_INT 3
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 5
34451: PUSH
34452: LD_INT 4
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 5
34461: PUSH
34462: LD_INT 5
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 4
34471: PUSH
34472: LD_INT 5
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 3
34481: PUSH
34482: LD_INT 4
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 3
34491: PUSH
34492: LD_INT 3
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 5
34501: PUSH
34502: LD_INT 3
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 3
34511: PUSH
34512: LD_INT 5
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: LD_INT 3
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: LD_INT 2
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 1
34541: PUSH
34542: LD_INT 3
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 1
34551: PUSH
34552: LD_INT 4
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 0
34561: PUSH
34562: LD_INT 4
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 1
34571: NEG
34572: PUSH
34573: LD_INT 3
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 2
34593: PUSH
34594: LD_INT 4
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 2
34603: NEG
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 4
34614: NEG
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 4
34625: NEG
34626: PUSH
34627: LD_INT 1
34629: NEG
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 3
34637: NEG
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 3
34648: NEG
34649: PUSH
34650: LD_INT 1
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 4
34659: NEG
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 5
34670: NEG
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 5
34681: NEG
34682: PUSH
34683: LD_INT 1
34685: NEG
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 5
34693: NEG
34694: PUSH
34695: LD_INT 2
34697: NEG
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 3
34705: NEG
34706: PUSH
34707: LD_INT 2
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: ST_TO_ADDR
// end ; end ;
34761: GO 34764
34763: POP
// case btype of b_depot , b_warehouse :
34764: LD_VAR 0 1
34768: PUSH
34769: LD_INT 0
34771: DOUBLE
34772: EQUAL
34773: IFTRUE 34783
34775: LD_INT 1
34777: DOUBLE
34778: EQUAL
34779: IFTRUE 34783
34781: GO 34984
34783: POP
// case nation of nation_american :
34784: LD_VAR 0 5
34788: PUSH
34789: LD_INT 1
34791: DOUBLE
34792: EQUAL
34793: IFTRUE 34797
34795: GO 34853
34797: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34798: LD_ADDR_VAR 0 9
34802: PUSH
34803: LD_VAR 0 11
34807: PUSH
34808: LD_VAR 0 12
34812: PUSH
34813: LD_VAR 0 13
34817: PUSH
34818: LD_VAR 0 14
34822: PUSH
34823: LD_VAR 0 15
34827: PUSH
34828: LD_VAR 0 16
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: PUSH
34841: LD_VAR 0 4
34845: PUSH
34846: LD_INT 1
34848: PLUS
34849: ARRAY
34850: ST_TO_ADDR
34851: GO 34982
34853: LD_INT 2
34855: DOUBLE
34856: EQUAL
34857: IFTRUE 34861
34859: GO 34917
34861: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34862: LD_ADDR_VAR 0 9
34866: PUSH
34867: LD_VAR 0 17
34871: PUSH
34872: LD_VAR 0 18
34876: PUSH
34877: LD_VAR 0 19
34881: PUSH
34882: LD_VAR 0 20
34886: PUSH
34887: LD_VAR 0 21
34891: PUSH
34892: LD_VAR 0 22
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: PUSH
34905: LD_VAR 0 4
34909: PUSH
34910: LD_INT 1
34912: PLUS
34913: ARRAY
34914: ST_TO_ADDR
34915: GO 34982
34917: LD_INT 3
34919: DOUBLE
34920: EQUAL
34921: IFTRUE 34925
34923: GO 34981
34925: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34926: LD_ADDR_VAR 0 9
34930: PUSH
34931: LD_VAR 0 23
34935: PUSH
34936: LD_VAR 0 24
34940: PUSH
34941: LD_VAR 0 25
34945: PUSH
34946: LD_VAR 0 26
34950: PUSH
34951: LD_VAR 0 27
34955: PUSH
34956: LD_VAR 0 28
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: PUSH
34969: LD_VAR 0 4
34973: PUSH
34974: LD_INT 1
34976: PLUS
34977: ARRAY
34978: ST_TO_ADDR
34979: GO 34982
34981: POP
34982: GO 35537
34984: LD_INT 2
34986: DOUBLE
34987: EQUAL
34988: IFTRUE 34998
34990: LD_INT 3
34992: DOUBLE
34993: EQUAL
34994: IFTRUE 34998
34996: GO 35054
34998: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34999: LD_ADDR_VAR 0 9
35003: PUSH
35004: LD_VAR 0 29
35008: PUSH
35009: LD_VAR 0 30
35013: PUSH
35014: LD_VAR 0 31
35018: PUSH
35019: LD_VAR 0 32
35023: PUSH
35024: LD_VAR 0 33
35028: PUSH
35029: LD_VAR 0 34
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: PUSH
35042: LD_VAR 0 4
35046: PUSH
35047: LD_INT 1
35049: PLUS
35050: ARRAY
35051: ST_TO_ADDR
35052: GO 35537
35054: LD_INT 16
35056: DOUBLE
35057: EQUAL
35058: IFTRUE 35116
35060: LD_INT 17
35062: DOUBLE
35063: EQUAL
35064: IFTRUE 35116
35066: LD_INT 18
35068: DOUBLE
35069: EQUAL
35070: IFTRUE 35116
35072: LD_INT 19
35074: DOUBLE
35075: EQUAL
35076: IFTRUE 35116
35078: LD_INT 22
35080: DOUBLE
35081: EQUAL
35082: IFTRUE 35116
35084: LD_INT 20
35086: DOUBLE
35087: EQUAL
35088: IFTRUE 35116
35090: LD_INT 21
35092: DOUBLE
35093: EQUAL
35094: IFTRUE 35116
35096: LD_INT 23
35098: DOUBLE
35099: EQUAL
35100: IFTRUE 35116
35102: LD_INT 24
35104: DOUBLE
35105: EQUAL
35106: IFTRUE 35116
35108: LD_INT 25
35110: DOUBLE
35111: EQUAL
35112: IFTRUE 35116
35114: GO 35172
35116: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35117: LD_ADDR_VAR 0 9
35121: PUSH
35122: LD_VAR 0 35
35126: PUSH
35127: LD_VAR 0 36
35131: PUSH
35132: LD_VAR 0 37
35136: PUSH
35137: LD_VAR 0 38
35141: PUSH
35142: LD_VAR 0 39
35146: PUSH
35147: LD_VAR 0 40
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: PUSH
35160: LD_VAR 0 4
35164: PUSH
35165: LD_INT 1
35167: PLUS
35168: ARRAY
35169: ST_TO_ADDR
35170: GO 35537
35172: LD_INT 6
35174: DOUBLE
35175: EQUAL
35176: IFTRUE 35228
35178: LD_INT 7
35180: DOUBLE
35181: EQUAL
35182: IFTRUE 35228
35184: LD_INT 8
35186: DOUBLE
35187: EQUAL
35188: IFTRUE 35228
35190: LD_INT 13
35192: DOUBLE
35193: EQUAL
35194: IFTRUE 35228
35196: LD_INT 12
35198: DOUBLE
35199: EQUAL
35200: IFTRUE 35228
35202: LD_INT 15
35204: DOUBLE
35205: EQUAL
35206: IFTRUE 35228
35208: LD_INT 11
35210: DOUBLE
35211: EQUAL
35212: IFTRUE 35228
35214: LD_INT 14
35216: DOUBLE
35217: EQUAL
35218: IFTRUE 35228
35220: LD_INT 10
35222: DOUBLE
35223: EQUAL
35224: IFTRUE 35228
35226: GO 35284
35228: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35229: LD_ADDR_VAR 0 9
35233: PUSH
35234: LD_VAR 0 41
35238: PUSH
35239: LD_VAR 0 42
35243: PUSH
35244: LD_VAR 0 43
35248: PUSH
35249: LD_VAR 0 44
35253: PUSH
35254: LD_VAR 0 45
35258: PUSH
35259: LD_VAR 0 46
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: PUSH
35272: LD_VAR 0 4
35276: PUSH
35277: LD_INT 1
35279: PLUS
35280: ARRAY
35281: ST_TO_ADDR
35282: GO 35537
35284: LD_INT 36
35286: DOUBLE
35287: EQUAL
35288: IFTRUE 35292
35290: GO 35348
35292: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35293: LD_ADDR_VAR 0 9
35297: PUSH
35298: LD_VAR 0 47
35302: PUSH
35303: LD_VAR 0 48
35307: PUSH
35308: LD_VAR 0 49
35312: PUSH
35313: LD_VAR 0 50
35317: PUSH
35318: LD_VAR 0 51
35322: PUSH
35323: LD_VAR 0 52
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: PUSH
35336: LD_VAR 0 4
35340: PUSH
35341: LD_INT 1
35343: PLUS
35344: ARRAY
35345: ST_TO_ADDR
35346: GO 35537
35348: LD_INT 4
35350: DOUBLE
35351: EQUAL
35352: IFTRUE 35374
35354: LD_INT 5
35356: DOUBLE
35357: EQUAL
35358: IFTRUE 35374
35360: LD_INT 34
35362: DOUBLE
35363: EQUAL
35364: IFTRUE 35374
35366: LD_INT 37
35368: DOUBLE
35369: EQUAL
35370: IFTRUE 35374
35372: GO 35430
35374: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35375: LD_ADDR_VAR 0 9
35379: PUSH
35380: LD_VAR 0 53
35384: PUSH
35385: LD_VAR 0 54
35389: PUSH
35390: LD_VAR 0 55
35394: PUSH
35395: LD_VAR 0 56
35399: PUSH
35400: LD_VAR 0 57
35404: PUSH
35405: LD_VAR 0 58
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: PUSH
35418: LD_VAR 0 4
35422: PUSH
35423: LD_INT 1
35425: PLUS
35426: ARRAY
35427: ST_TO_ADDR
35428: GO 35537
35430: LD_INT 31
35432: DOUBLE
35433: EQUAL
35434: IFTRUE 35480
35436: LD_INT 32
35438: DOUBLE
35439: EQUAL
35440: IFTRUE 35480
35442: LD_INT 33
35444: DOUBLE
35445: EQUAL
35446: IFTRUE 35480
35448: LD_INT 27
35450: DOUBLE
35451: EQUAL
35452: IFTRUE 35480
35454: LD_INT 26
35456: DOUBLE
35457: EQUAL
35458: IFTRUE 35480
35460: LD_INT 28
35462: DOUBLE
35463: EQUAL
35464: IFTRUE 35480
35466: LD_INT 29
35468: DOUBLE
35469: EQUAL
35470: IFTRUE 35480
35472: LD_INT 30
35474: DOUBLE
35475: EQUAL
35476: IFTRUE 35480
35478: GO 35536
35480: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35481: LD_ADDR_VAR 0 9
35485: PUSH
35486: LD_VAR 0 59
35490: PUSH
35491: LD_VAR 0 60
35495: PUSH
35496: LD_VAR 0 61
35500: PUSH
35501: LD_VAR 0 62
35505: PUSH
35506: LD_VAR 0 63
35510: PUSH
35511: LD_VAR 0 64
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: PUSH
35524: LD_VAR 0 4
35528: PUSH
35529: LD_INT 1
35531: PLUS
35532: ARRAY
35533: ST_TO_ADDR
35534: GO 35537
35536: POP
// temp_list2 = [ ] ;
35537: LD_ADDR_VAR 0 10
35541: PUSH
35542: EMPTY
35543: ST_TO_ADDR
// for i in temp_list do
35544: LD_ADDR_VAR 0 8
35548: PUSH
35549: LD_VAR 0 9
35553: PUSH
35554: FOR_IN
35555: IFFALSE 35607
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35557: LD_ADDR_VAR 0 10
35561: PUSH
35562: LD_VAR 0 10
35566: PUSH
35567: LD_VAR 0 8
35571: PUSH
35572: LD_INT 1
35574: ARRAY
35575: PUSH
35576: LD_VAR 0 2
35580: PLUS
35581: PUSH
35582: LD_VAR 0 8
35586: PUSH
35587: LD_INT 2
35589: ARRAY
35590: PUSH
35591: LD_VAR 0 3
35595: PLUS
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: EMPTY
35602: LIST
35603: ADD
35604: ST_TO_ADDR
35605: GO 35554
35607: POP
35608: POP
// result = temp_list2 ;
35609: LD_ADDR_VAR 0 7
35613: PUSH
35614: LD_VAR 0 10
35618: ST_TO_ADDR
// end ;
35619: LD_VAR 0 7
35623: RET
// export function EnemyInRange ( unit , dist ) ; begin
35624: LD_INT 0
35626: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35627: LD_ADDR_VAR 0 3
35631: PUSH
35632: LD_VAR 0 1
35636: PPUSH
35637: CALL_OW 255
35641: PPUSH
35642: LD_VAR 0 1
35646: PPUSH
35647: CALL_OW 250
35651: PPUSH
35652: LD_VAR 0 1
35656: PPUSH
35657: CALL_OW 251
35661: PPUSH
35662: LD_VAR 0 2
35666: PPUSH
35667: CALL 8997 0 4
35671: PUSH
35672: LD_INT 4
35674: ARRAY
35675: ST_TO_ADDR
// end ;
35676: LD_VAR 0 3
35680: RET
// export function PlayerSeeMe ( unit ) ; begin
35681: LD_INT 0
35683: PPUSH
// result := See ( your_side , unit ) ;
35684: LD_ADDR_VAR 0 2
35688: PUSH
35689: LD_OWVAR 2
35693: PPUSH
35694: LD_VAR 0 1
35698: PPUSH
35699: CALL_OW 292
35703: ST_TO_ADDR
// end ;
35704: LD_VAR 0 2
35708: RET
// export function ReverseDir ( unit ) ; begin
35709: LD_INT 0
35711: PPUSH
// if not unit then
35712: LD_VAR 0 1
35716: NOT
35717: IFFALSE 35721
// exit ;
35719: GO 35744
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35721: LD_ADDR_VAR 0 2
35725: PUSH
35726: LD_VAR 0 1
35730: PPUSH
35731: CALL_OW 254
35735: PUSH
35736: LD_INT 3
35738: PLUS
35739: PUSH
35740: LD_INT 6
35742: MOD
35743: ST_TO_ADDR
// end ;
35744: LD_VAR 0 2
35748: RET
// export function ReverseArray ( array ) ; var i ; begin
35749: LD_INT 0
35751: PPUSH
35752: PPUSH
// if not array then
35753: LD_VAR 0 1
35757: NOT
35758: IFFALSE 35762
// exit ;
35760: GO 35817
// result := [ ] ;
35762: LD_ADDR_VAR 0 2
35766: PUSH
35767: EMPTY
35768: ST_TO_ADDR
// for i := array downto 1 do
35769: LD_ADDR_VAR 0 3
35773: PUSH
35774: DOUBLE
35775: LD_VAR 0 1
35779: INC
35780: ST_TO_ADDR
35781: LD_INT 1
35783: PUSH
35784: FOR_DOWNTO
35785: IFFALSE 35815
// result := Join ( result , array [ i ] ) ;
35787: LD_ADDR_VAR 0 2
35791: PUSH
35792: LD_VAR 0 2
35796: PPUSH
35797: LD_VAR 0 1
35801: PUSH
35802: LD_VAR 0 3
35806: ARRAY
35807: PPUSH
35808: CALL 40462 0 2
35812: ST_TO_ADDR
35813: GO 35784
35815: POP
35816: POP
// end ;
35817: LD_VAR 0 2
35821: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35822: LD_INT 0
35824: PPUSH
35825: PPUSH
35826: PPUSH
35827: PPUSH
35828: PPUSH
35829: PPUSH
// if not unit or not hexes then
35830: LD_VAR 0 1
35834: NOT
35835: PUSH
35836: LD_VAR 0 2
35840: NOT
35841: OR
35842: IFFALSE 35846
// exit ;
35844: GO 35969
// dist := 9999 ;
35846: LD_ADDR_VAR 0 5
35850: PUSH
35851: LD_INT 9999
35853: ST_TO_ADDR
// for i = 1 to hexes do
35854: LD_ADDR_VAR 0 4
35858: PUSH
35859: DOUBLE
35860: LD_INT 1
35862: DEC
35863: ST_TO_ADDR
35864: LD_VAR 0 2
35868: PUSH
35869: FOR_TO
35870: IFFALSE 35957
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35872: LD_ADDR_VAR 0 6
35876: PUSH
35877: LD_VAR 0 1
35881: PPUSH
35882: LD_VAR 0 2
35886: PUSH
35887: LD_VAR 0 4
35891: ARRAY
35892: PUSH
35893: LD_INT 1
35895: ARRAY
35896: PPUSH
35897: LD_VAR 0 2
35901: PUSH
35902: LD_VAR 0 4
35906: ARRAY
35907: PUSH
35908: LD_INT 2
35910: ARRAY
35911: PPUSH
35912: CALL_OW 297
35916: ST_TO_ADDR
// if tdist < dist then
35917: LD_VAR 0 6
35921: PUSH
35922: LD_VAR 0 5
35926: LESS
35927: IFFALSE 35955
// begin hex := hexes [ i ] ;
35929: LD_ADDR_VAR 0 8
35933: PUSH
35934: LD_VAR 0 2
35938: PUSH
35939: LD_VAR 0 4
35943: ARRAY
35944: ST_TO_ADDR
// dist := tdist ;
35945: LD_ADDR_VAR 0 5
35949: PUSH
35950: LD_VAR 0 6
35954: ST_TO_ADDR
// end ; end ;
35955: GO 35869
35957: POP
35958: POP
// result := hex ;
35959: LD_ADDR_VAR 0 3
35963: PUSH
35964: LD_VAR 0 8
35968: ST_TO_ADDR
// end ;
35969: LD_VAR 0 3
35973: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35974: LD_INT 0
35976: PPUSH
35977: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35978: LD_VAR 0 1
35982: NOT
35983: PUSH
35984: LD_VAR 0 1
35988: PUSH
35989: LD_INT 21
35991: PUSH
35992: LD_INT 2
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 23
36001: PUSH
36002: LD_INT 2
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PPUSH
36013: CALL_OW 69
36017: IN
36018: NOT
36019: OR
36020: IFFALSE 36024
// exit ;
36022: GO 36071
// for i = 1 to 3 do
36024: LD_ADDR_VAR 0 3
36028: PUSH
36029: DOUBLE
36030: LD_INT 1
36032: DEC
36033: ST_TO_ADDR
36034: LD_INT 3
36036: PUSH
36037: FOR_TO
36038: IFFALSE 36069
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36040: LD_VAR 0 1
36044: PPUSH
36045: CALL_OW 250
36049: PPUSH
36050: LD_VAR 0 1
36054: PPUSH
36055: CALL_OW 251
36059: PPUSH
36060: LD_INT 1
36062: PPUSH
36063: CALL_OW 453
36067: GO 36037
36069: POP
36070: POP
// end ;
36071: LD_VAR 0 2
36075: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36076: LD_INT 0
36078: PPUSH
36079: PPUSH
36080: PPUSH
36081: PPUSH
36082: PPUSH
36083: PPUSH
// if not unit or not enemy_unit then
36084: LD_VAR 0 1
36088: NOT
36089: PUSH
36090: LD_VAR 0 2
36094: NOT
36095: OR
36096: IFFALSE 36100
// exit ;
36098: GO 36567
// if GetLives ( i ) < 250 then
36100: LD_VAR 0 4
36104: PPUSH
36105: CALL_OW 256
36109: PUSH
36110: LD_INT 250
36112: LESS
36113: IFFALSE 36126
// begin ComAutodestruct ( i ) ;
36115: LD_VAR 0 4
36119: PPUSH
36120: CALL 35974 0 1
// exit ;
36124: GO 36567
// end ; x := GetX ( enemy_unit ) ;
36126: LD_ADDR_VAR 0 7
36130: PUSH
36131: LD_VAR 0 2
36135: PPUSH
36136: CALL_OW 250
36140: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36141: LD_ADDR_VAR 0 8
36145: PUSH
36146: LD_VAR 0 2
36150: PPUSH
36151: CALL_OW 251
36155: ST_TO_ADDR
// if not x or not y then
36156: LD_VAR 0 7
36160: NOT
36161: PUSH
36162: LD_VAR 0 8
36166: NOT
36167: OR
36168: IFFALSE 36172
// exit ;
36170: GO 36567
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36172: LD_ADDR_VAR 0 6
36176: PUSH
36177: LD_VAR 0 7
36181: PPUSH
36182: LD_INT 0
36184: PPUSH
36185: LD_INT 4
36187: PPUSH
36188: CALL_OW 272
36192: PUSH
36193: LD_VAR 0 8
36197: PPUSH
36198: LD_INT 0
36200: PPUSH
36201: LD_INT 4
36203: PPUSH
36204: CALL_OW 273
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_VAR 0 7
36217: PPUSH
36218: LD_INT 1
36220: PPUSH
36221: LD_INT 4
36223: PPUSH
36224: CALL_OW 272
36228: PUSH
36229: LD_VAR 0 8
36233: PPUSH
36234: LD_INT 1
36236: PPUSH
36237: LD_INT 4
36239: PPUSH
36240: CALL_OW 273
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_VAR 0 7
36253: PPUSH
36254: LD_INT 2
36256: PPUSH
36257: LD_INT 4
36259: PPUSH
36260: CALL_OW 272
36264: PUSH
36265: LD_VAR 0 8
36269: PPUSH
36270: LD_INT 2
36272: PPUSH
36273: LD_INT 4
36275: PPUSH
36276: CALL_OW 273
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_VAR 0 7
36289: PPUSH
36290: LD_INT 3
36292: PPUSH
36293: LD_INT 4
36295: PPUSH
36296: CALL_OW 272
36300: PUSH
36301: LD_VAR 0 8
36305: PPUSH
36306: LD_INT 3
36308: PPUSH
36309: LD_INT 4
36311: PPUSH
36312: CALL_OW 273
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_VAR 0 7
36325: PPUSH
36326: LD_INT 4
36328: PPUSH
36329: LD_INT 4
36331: PPUSH
36332: CALL_OW 272
36336: PUSH
36337: LD_VAR 0 8
36341: PPUSH
36342: LD_INT 4
36344: PPUSH
36345: LD_INT 4
36347: PPUSH
36348: CALL_OW 273
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_VAR 0 7
36361: PPUSH
36362: LD_INT 5
36364: PPUSH
36365: LD_INT 4
36367: PPUSH
36368: CALL_OW 272
36372: PUSH
36373: LD_VAR 0 8
36377: PPUSH
36378: LD_INT 5
36380: PPUSH
36381: LD_INT 4
36383: PPUSH
36384: CALL_OW 273
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: ST_TO_ADDR
// for i = tmp downto 1 do
36401: LD_ADDR_VAR 0 4
36405: PUSH
36406: DOUBLE
36407: LD_VAR 0 6
36411: INC
36412: ST_TO_ADDR
36413: LD_INT 1
36415: PUSH
36416: FOR_DOWNTO
36417: IFFALSE 36518
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36419: LD_VAR 0 6
36423: PUSH
36424: LD_VAR 0 4
36428: ARRAY
36429: PUSH
36430: LD_INT 1
36432: ARRAY
36433: PPUSH
36434: LD_VAR 0 6
36438: PUSH
36439: LD_VAR 0 4
36443: ARRAY
36444: PUSH
36445: LD_INT 2
36447: ARRAY
36448: PPUSH
36449: CALL_OW 488
36453: NOT
36454: PUSH
36455: LD_VAR 0 6
36459: PUSH
36460: LD_VAR 0 4
36464: ARRAY
36465: PUSH
36466: LD_INT 1
36468: ARRAY
36469: PPUSH
36470: LD_VAR 0 6
36474: PUSH
36475: LD_VAR 0 4
36479: ARRAY
36480: PUSH
36481: LD_INT 2
36483: ARRAY
36484: PPUSH
36485: CALL_OW 428
36489: PUSH
36490: LD_INT 0
36492: NONEQUAL
36493: OR
36494: IFFALSE 36516
// tmp := Delete ( tmp , i ) ;
36496: LD_ADDR_VAR 0 6
36500: PUSH
36501: LD_VAR 0 6
36505: PPUSH
36506: LD_VAR 0 4
36510: PPUSH
36511: CALL_OW 3
36515: ST_TO_ADDR
36516: GO 36416
36518: POP
36519: POP
// j := GetClosestHex ( unit , tmp ) ;
36520: LD_ADDR_VAR 0 5
36524: PUSH
36525: LD_VAR 0 1
36529: PPUSH
36530: LD_VAR 0 6
36534: PPUSH
36535: CALL 35822 0 2
36539: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36540: LD_VAR 0 1
36544: PPUSH
36545: LD_VAR 0 5
36549: PUSH
36550: LD_INT 1
36552: ARRAY
36553: PPUSH
36554: LD_VAR 0 5
36558: PUSH
36559: LD_INT 2
36561: ARRAY
36562: PPUSH
36563: CALL_OW 111
// end ;
36567: LD_VAR 0 3
36571: RET
// export function PrepareApemanSoldier ( ) ; begin
36572: LD_INT 0
36574: PPUSH
// uc_nation := 0 ;
36575: LD_ADDR_OWVAR 21
36579: PUSH
36580: LD_INT 0
36582: ST_TO_ADDR
// hc_sex := sex_male ;
36583: LD_ADDR_OWVAR 27
36587: PUSH
36588: LD_INT 1
36590: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36591: LD_ADDR_OWVAR 28
36595: PUSH
36596: LD_INT 15
36598: ST_TO_ADDR
// hc_gallery :=  ;
36599: LD_ADDR_OWVAR 33
36603: PUSH
36604: LD_STRING 
36606: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36607: LD_ADDR_OWVAR 31
36611: PUSH
36612: LD_INT 0
36614: PPUSH
36615: LD_INT 3
36617: PPUSH
36618: CALL_OW 12
36622: PUSH
36623: LD_INT 0
36625: PPUSH
36626: LD_INT 3
36628: PPUSH
36629: CALL_OW 12
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: LD_INT 0
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: ST_TO_ADDR
// end ;
36646: LD_VAR 0 1
36650: RET
// export function PrepareApemanEngineer ( ) ; begin
36651: LD_INT 0
36653: PPUSH
// uc_nation := 0 ;
36654: LD_ADDR_OWVAR 21
36658: PUSH
36659: LD_INT 0
36661: ST_TO_ADDR
// hc_sex := sex_male ;
36662: LD_ADDR_OWVAR 27
36666: PUSH
36667: LD_INT 1
36669: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36670: LD_ADDR_OWVAR 28
36674: PUSH
36675: LD_INT 16
36677: ST_TO_ADDR
// hc_gallery :=  ;
36678: LD_ADDR_OWVAR 33
36682: PUSH
36683: LD_STRING 
36685: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36686: LD_ADDR_OWVAR 31
36690: PUSH
36691: LD_INT 0
36693: PPUSH
36694: LD_INT 3
36696: PPUSH
36697: CALL_OW 12
36701: PUSH
36702: LD_INT 0
36704: PPUSH
36705: LD_INT 3
36707: PPUSH
36708: CALL_OW 12
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: ST_TO_ADDR
// end ;
36725: LD_VAR 0 1
36729: RET
// export function PrepareApeman ( agressivity ) ; begin
36730: LD_INT 0
36732: PPUSH
// uc_side := 0 ;
36733: LD_ADDR_OWVAR 20
36737: PUSH
36738: LD_INT 0
36740: ST_TO_ADDR
// uc_nation := 0 ;
36741: LD_ADDR_OWVAR 21
36745: PUSH
36746: LD_INT 0
36748: ST_TO_ADDR
// hc_sex := sex_male ;
36749: LD_ADDR_OWVAR 27
36753: PUSH
36754: LD_INT 1
36756: ST_TO_ADDR
// hc_class := class_apeman ;
36757: LD_ADDR_OWVAR 28
36761: PUSH
36762: LD_INT 12
36764: ST_TO_ADDR
// hc_gallery :=  ;
36765: LD_ADDR_OWVAR 33
36769: PUSH
36770: LD_STRING 
36772: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36773: LD_ADDR_OWVAR 35
36777: PUSH
36778: LD_VAR 0 1
36782: NEG
36783: PPUSH
36784: LD_VAR 0 1
36788: PPUSH
36789: CALL_OW 12
36793: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36794: LD_ADDR_OWVAR 31
36798: PUSH
36799: LD_INT 0
36801: PPUSH
36802: LD_INT 3
36804: PPUSH
36805: CALL_OW 12
36809: PUSH
36810: LD_INT 0
36812: PPUSH
36813: LD_INT 3
36815: PPUSH
36816: CALL_OW 12
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: ST_TO_ADDR
// end ;
36833: LD_VAR 0 2
36837: RET
// export function PrepareTiger ( agressivity ) ; begin
36838: LD_INT 0
36840: PPUSH
// uc_side := 0 ;
36841: LD_ADDR_OWVAR 20
36845: PUSH
36846: LD_INT 0
36848: ST_TO_ADDR
// uc_nation := 0 ;
36849: LD_ADDR_OWVAR 21
36853: PUSH
36854: LD_INT 0
36856: ST_TO_ADDR
// hc_class := class_tiger ;
36857: LD_ADDR_OWVAR 28
36861: PUSH
36862: LD_INT 14
36864: ST_TO_ADDR
// hc_gallery :=  ;
36865: LD_ADDR_OWVAR 33
36869: PUSH
36870: LD_STRING 
36872: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36873: LD_ADDR_OWVAR 35
36877: PUSH
36878: LD_VAR 0 1
36882: NEG
36883: PPUSH
36884: LD_VAR 0 1
36888: PPUSH
36889: CALL_OW 12
36893: ST_TO_ADDR
// end ;
36894: LD_VAR 0 2
36898: RET
// export function PrepareEnchidna ( ) ; begin
36899: LD_INT 0
36901: PPUSH
// uc_side := 0 ;
36902: LD_ADDR_OWVAR 20
36906: PUSH
36907: LD_INT 0
36909: ST_TO_ADDR
// uc_nation := 0 ;
36910: LD_ADDR_OWVAR 21
36914: PUSH
36915: LD_INT 0
36917: ST_TO_ADDR
// hc_class := class_baggie ;
36918: LD_ADDR_OWVAR 28
36922: PUSH
36923: LD_INT 13
36925: ST_TO_ADDR
// hc_gallery :=  ;
36926: LD_ADDR_OWVAR 33
36930: PUSH
36931: LD_STRING 
36933: ST_TO_ADDR
// end ;
36934: LD_VAR 0 1
36938: RET
// export function PrepareFrog ( ) ; begin
36939: LD_INT 0
36941: PPUSH
// uc_side := 0 ;
36942: LD_ADDR_OWVAR 20
36946: PUSH
36947: LD_INT 0
36949: ST_TO_ADDR
// uc_nation := 0 ;
36950: LD_ADDR_OWVAR 21
36954: PUSH
36955: LD_INT 0
36957: ST_TO_ADDR
// hc_class := class_frog ;
36958: LD_ADDR_OWVAR 28
36962: PUSH
36963: LD_INT 19
36965: ST_TO_ADDR
// hc_gallery :=  ;
36966: LD_ADDR_OWVAR 33
36970: PUSH
36971: LD_STRING 
36973: ST_TO_ADDR
// end ;
36974: LD_VAR 0 1
36978: RET
// export function PrepareFish ( ) ; begin
36979: LD_INT 0
36981: PPUSH
// uc_side := 0 ;
36982: LD_ADDR_OWVAR 20
36986: PUSH
36987: LD_INT 0
36989: ST_TO_ADDR
// uc_nation := 0 ;
36990: LD_ADDR_OWVAR 21
36994: PUSH
36995: LD_INT 0
36997: ST_TO_ADDR
// hc_class := class_fish ;
36998: LD_ADDR_OWVAR 28
37002: PUSH
37003: LD_INT 20
37005: ST_TO_ADDR
// hc_gallery :=  ;
37006: LD_ADDR_OWVAR 33
37010: PUSH
37011: LD_STRING 
37013: ST_TO_ADDR
// end ;
37014: LD_VAR 0 1
37018: RET
// export function PrepareBird ( ) ; begin
37019: LD_INT 0
37021: PPUSH
// uc_side := 0 ;
37022: LD_ADDR_OWVAR 20
37026: PUSH
37027: LD_INT 0
37029: ST_TO_ADDR
// uc_nation := 0 ;
37030: LD_ADDR_OWVAR 21
37034: PUSH
37035: LD_INT 0
37037: ST_TO_ADDR
// hc_class := class_phororhacos ;
37038: LD_ADDR_OWVAR 28
37042: PUSH
37043: LD_INT 18
37045: ST_TO_ADDR
// hc_gallery :=  ;
37046: LD_ADDR_OWVAR 33
37050: PUSH
37051: LD_STRING 
37053: ST_TO_ADDR
// end ;
37054: LD_VAR 0 1
37058: RET
// export function PrepareHorse ( ) ; begin
37059: LD_INT 0
37061: PPUSH
// uc_side := 0 ;
37062: LD_ADDR_OWVAR 20
37066: PUSH
37067: LD_INT 0
37069: ST_TO_ADDR
// uc_nation := 0 ;
37070: LD_ADDR_OWVAR 21
37074: PUSH
37075: LD_INT 0
37077: ST_TO_ADDR
// hc_class := class_horse ;
37078: LD_ADDR_OWVAR 28
37082: PUSH
37083: LD_INT 21
37085: ST_TO_ADDR
// hc_gallery :=  ;
37086: LD_ADDR_OWVAR 33
37090: PUSH
37091: LD_STRING 
37093: ST_TO_ADDR
// end ;
37094: LD_VAR 0 1
37098: RET
// export function PrepareMastodont ( ) ; begin
37099: LD_INT 0
37101: PPUSH
// uc_side := 0 ;
37102: LD_ADDR_OWVAR 20
37106: PUSH
37107: LD_INT 0
37109: ST_TO_ADDR
// uc_nation := 0 ;
37110: LD_ADDR_OWVAR 21
37114: PUSH
37115: LD_INT 0
37117: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37118: LD_ADDR_OWVAR 37
37122: PUSH
37123: LD_INT 31
37125: ST_TO_ADDR
// vc_control := control_rider ;
37126: LD_ADDR_OWVAR 38
37130: PUSH
37131: LD_INT 4
37133: ST_TO_ADDR
// end ;
37134: LD_VAR 0 1
37138: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37139: LD_INT 0
37141: PPUSH
37142: PPUSH
37143: PPUSH
// uc_side = 0 ;
37144: LD_ADDR_OWVAR 20
37148: PUSH
37149: LD_INT 0
37151: ST_TO_ADDR
// uc_nation = 0 ;
37152: LD_ADDR_OWVAR 21
37156: PUSH
37157: LD_INT 0
37159: ST_TO_ADDR
// InitHc_All ( ) ;
37160: CALL_OW 584
// InitVc ;
37164: CALL_OW 20
// if mastodonts then
37168: LD_VAR 0 6
37172: IFFALSE 37239
// for i = 1 to mastodonts do
37174: LD_ADDR_VAR 0 11
37178: PUSH
37179: DOUBLE
37180: LD_INT 1
37182: DEC
37183: ST_TO_ADDR
37184: LD_VAR 0 6
37188: PUSH
37189: FOR_TO
37190: IFFALSE 37237
// begin vc_chassis := 31 ;
37192: LD_ADDR_OWVAR 37
37196: PUSH
37197: LD_INT 31
37199: ST_TO_ADDR
// vc_control := control_rider ;
37200: LD_ADDR_OWVAR 38
37204: PUSH
37205: LD_INT 4
37207: ST_TO_ADDR
// animal := CreateVehicle ;
37208: LD_ADDR_VAR 0 12
37212: PUSH
37213: CALL_OW 45
37217: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37218: LD_VAR 0 12
37222: PPUSH
37223: LD_VAR 0 8
37227: PPUSH
37228: LD_INT 0
37230: PPUSH
37231: CALL 39367 0 3
// end ;
37235: GO 37189
37237: POP
37238: POP
// if horses then
37239: LD_VAR 0 5
37243: IFFALSE 37310
// for i = 1 to horses do
37245: LD_ADDR_VAR 0 11
37249: PUSH
37250: DOUBLE
37251: LD_INT 1
37253: DEC
37254: ST_TO_ADDR
37255: LD_VAR 0 5
37259: PUSH
37260: FOR_TO
37261: IFFALSE 37308
// begin hc_class := 21 ;
37263: LD_ADDR_OWVAR 28
37267: PUSH
37268: LD_INT 21
37270: ST_TO_ADDR
// hc_gallery :=  ;
37271: LD_ADDR_OWVAR 33
37275: PUSH
37276: LD_STRING 
37278: ST_TO_ADDR
// animal := CreateHuman ;
37279: LD_ADDR_VAR 0 12
37283: PUSH
37284: CALL_OW 44
37288: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37289: LD_VAR 0 12
37293: PPUSH
37294: LD_VAR 0 8
37298: PPUSH
37299: LD_INT 0
37301: PPUSH
37302: CALL 39367 0 3
// end ;
37306: GO 37260
37308: POP
37309: POP
// if birds then
37310: LD_VAR 0 1
37314: IFFALSE 37381
// for i = 1 to birds do
37316: LD_ADDR_VAR 0 11
37320: PUSH
37321: DOUBLE
37322: LD_INT 1
37324: DEC
37325: ST_TO_ADDR
37326: LD_VAR 0 1
37330: PUSH
37331: FOR_TO
37332: IFFALSE 37379
// begin hc_class := 18 ;
37334: LD_ADDR_OWVAR 28
37338: PUSH
37339: LD_INT 18
37341: ST_TO_ADDR
// hc_gallery =  ;
37342: LD_ADDR_OWVAR 33
37346: PUSH
37347: LD_STRING 
37349: ST_TO_ADDR
// animal := CreateHuman ;
37350: LD_ADDR_VAR 0 12
37354: PUSH
37355: CALL_OW 44
37359: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37360: LD_VAR 0 12
37364: PPUSH
37365: LD_VAR 0 8
37369: PPUSH
37370: LD_INT 0
37372: PPUSH
37373: CALL 39367 0 3
// end ;
37377: GO 37331
37379: POP
37380: POP
// if tigers then
37381: LD_VAR 0 2
37385: IFFALSE 37469
// for i = 1 to tigers do
37387: LD_ADDR_VAR 0 11
37391: PUSH
37392: DOUBLE
37393: LD_INT 1
37395: DEC
37396: ST_TO_ADDR
37397: LD_VAR 0 2
37401: PUSH
37402: FOR_TO
37403: IFFALSE 37467
// begin hc_class = class_tiger ;
37405: LD_ADDR_OWVAR 28
37409: PUSH
37410: LD_INT 14
37412: ST_TO_ADDR
// hc_gallery =  ;
37413: LD_ADDR_OWVAR 33
37417: PUSH
37418: LD_STRING 
37420: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37421: LD_ADDR_OWVAR 35
37425: PUSH
37426: LD_INT 7
37428: NEG
37429: PPUSH
37430: LD_INT 7
37432: PPUSH
37433: CALL_OW 12
37437: ST_TO_ADDR
// animal := CreateHuman ;
37438: LD_ADDR_VAR 0 12
37442: PUSH
37443: CALL_OW 44
37447: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37448: LD_VAR 0 12
37452: PPUSH
37453: LD_VAR 0 8
37457: PPUSH
37458: LD_INT 0
37460: PPUSH
37461: CALL 39367 0 3
// end ;
37465: GO 37402
37467: POP
37468: POP
// if apemans then
37469: LD_VAR 0 3
37473: IFFALSE 37596
// for i = 1 to apemans do
37475: LD_ADDR_VAR 0 11
37479: PUSH
37480: DOUBLE
37481: LD_INT 1
37483: DEC
37484: ST_TO_ADDR
37485: LD_VAR 0 3
37489: PUSH
37490: FOR_TO
37491: IFFALSE 37594
// begin hc_class = class_apeman ;
37493: LD_ADDR_OWVAR 28
37497: PUSH
37498: LD_INT 12
37500: ST_TO_ADDR
// hc_gallery =  ;
37501: LD_ADDR_OWVAR 33
37505: PUSH
37506: LD_STRING 
37508: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37509: LD_ADDR_OWVAR 35
37513: PUSH
37514: LD_INT 2
37516: NEG
37517: PPUSH
37518: LD_INT 2
37520: PPUSH
37521: CALL_OW 12
37525: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37526: LD_ADDR_OWVAR 31
37530: PUSH
37531: LD_INT 1
37533: PPUSH
37534: LD_INT 3
37536: PPUSH
37537: CALL_OW 12
37541: PUSH
37542: LD_INT 1
37544: PPUSH
37545: LD_INT 3
37547: PPUSH
37548: CALL_OW 12
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: LD_INT 0
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: ST_TO_ADDR
// animal := CreateHuman ;
37565: LD_ADDR_VAR 0 12
37569: PUSH
37570: CALL_OW 44
37574: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37575: LD_VAR 0 12
37579: PPUSH
37580: LD_VAR 0 8
37584: PPUSH
37585: LD_INT 0
37587: PPUSH
37588: CALL 39367 0 3
// end ;
37592: GO 37490
37594: POP
37595: POP
// if enchidnas then
37596: LD_VAR 0 4
37600: IFFALSE 37667
// for i = 1 to enchidnas do
37602: LD_ADDR_VAR 0 11
37606: PUSH
37607: DOUBLE
37608: LD_INT 1
37610: DEC
37611: ST_TO_ADDR
37612: LD_VAR 0 4
37616: PUSH
37617: FOR_TO
37618: IFFALSE 37665
// begin hc_class = 13 ;
37620: LD_ADDR_OWVAR 28
37624: PUSH
37625: LD_INT 13
37627: ST_TO_ADDR
// hc_gallery =  ;
37628: LD_ADDR_OWVAR 33
37632: PUSH
37633: LD_STRING 
37635: ST_TO_ADDR
// animal := CreateHuman ;
37636: LD_ADDR_VAR 0 12
37640: PUSH
37641: CALL_OW 44
37645: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37646: LD_VAR 0 12
37650: PPUSH
37651: LD_VAR 0 8
37655: PPUSH
37656: LD_INT 0
37658: PPUSH
37659: CALL 39367 0 3
// end ;
37663: GO 37617
37665: POP
37666: POP
// if fishes then
37667: LD_VAR 0 7
37671: IFFALSE 37738
// for i = 1 to fishes do
37673: LD_ADDR_VAR 0 11
37677: PUSH
37678: DOUBLE
37679: LD_INT 1
37681: DEC
37682: ST_TO_ADDR
37683: LD_VAR 0 7
37687: PUSH
37688: FOR_TO
37689: IFFALSE 37736
// begin hc_class = 20 ;
37691: LD_ADDR_OWVAR 28
37695: PUSH
37696: LD_INT 20
37698: ST_TO_ADDR
// hc_gallery =  ;
37699: LD_ADDR_OWVAR 33
37703: PUSH
37704: LD_STRING 
37706: ST_TO_ADDR
// animal := CreateHuman ;
37707: LD_ADDR_VAR 0 12
37711: PUSH
37712: CALL_OW 44
37716: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37717: LD_VAR 0 12
37721: PPUSH
37722: LD_VAR 0 9
37726: PPUSH
37727: LD_INT 0
37729: PPUSH
37730: CALL 39367 0 3
// end ;
37734: GO 37688
37736: POP
37737: POP
// end ;
37738: LD_VAR 0 10
37742: RET
// export function WantHeal ( sci , unit ) ; begin
37743: LD_INT 0
37745: PPUSH
// if GetTaskList ( sci ) > 0 then
37746: LD_VAR 0 1
37750: PPUSH
37751: CALL_OW 437
37755: PUSH
37756: LD_INT 0
37758: GREATER
37759: IFFALSE 37829
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37761: LD_VAR 0 1
37765: PPUSH
37766: CALL_OW 437
37770: PUSH
37771: LD_INT 1
37773: ARRAY
37774: PUSH
37775: LD_INT 1
37777: ARRAY
37778: PUSH
37779: LD_STRING l
37781: EQUAL
37782: PUSH
37783: LD_VAR 0 1
37787: PPUSH
37788: CALL_OW 437
37792: PUSH
37793: LD_INT 1
37795: ARRAY
37796: PUSH
37797: LD_INT 4
37799: ARRAY
37800: PUSH
37801: LD_VAR 0 2
37805: EQUAL
37806: AND
37807: IFFALSE 37819
// result := true else
37809: LD_ADDR_VAR 0 3
37813: PUSH
37814: LD_INT 1
37816: ST_TO_ADDR
37817: GO 37827
// result := false ;
37819: LD_ADDR_VAR 0 3
37823: PUSH
37824: LD_INT 0
37826: ST_TO_ADDR
// end else
37827: GO 37837
// result := false ;
37829: LD_ADDR_VAR 0 3
37833: PUSH
37834: LD_INT 0
37836: ST_TO_ADDR
// end ;
37837: LD_VAR 0 3
37841: RET
// export function HealTarget ( sci ) ; begin
37842: LD_INT 0
37844: PPUSH
// if not sci then
37845: LD_VAR 0 1
37849: NOT
37850: IFFALSE 37854
// exit ;
37852: GO 37919
// result := 0 ;
37854: LD_ADDR_VAR 0 2
37858: PUSH
37859: LD_INT 0
37861: ST_TO_ADDR
// if GetTaskList ( sci ) then
37862: LD_VAR 0 1
37866: PPUSH
37867: CALL_OW 437
37871: IFFALSE 37919
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37873: LD_VAR 0 1
37877: PPUSH
37878: CALL_OW 437
37882: PUSH
37883: LD_INT 1
37885: ARRAY
37886: PUSH
37887: LD_INT 1
37889: ARRAY
37890: PUSH
37891: LD_STRING l
37893: EQUAL
37894: IFFALSE 37919
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37896: LD_ADDR_VAR 0 2
37900: PUSH
37901: LD_VAR 0 1
37905: PPUSH
37906: CALL_OW 437
37910: PUSH
37911: LD_INT 1
37913: ARRAY
37914: PUSH
37915: LD_INT 4
37917: ARRAY
37918: ST_TO_ADDR
// end ;
37919: LD_VAR 0 2
37923: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37924: LD_INT 0
37926: PPUSH
37927: PPUSH
37928: PPUSH
37929: PPUSH
// if not base_units then
37930: LD_VAR 0 1
37934: NOT
37935: IFFALSE 37939
// exit ;
37937: GO 38026
// result := false ;
37939: LD_ADDR_VAR 0 2
37943: PUSH
37944: LD_INT 0
37946: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37947: LD_ADDR_VAR 0 5
37951: PUSH
37952: LD_VAR 0 1
37956: PPUSH
37957: LD_INT 21
37959: PUSH
37960: LD_INT 3
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PPUSH
37967: CALL_OW 72
37971: ST_TO_ADDR
// if not tmp then
37972: LD_VAR 0 5
37976: NOT
37977: IFFALSE 37981
// exit ;
37979: GO 38026
// for i in tmp do
37981: LD_ADDR_VAR 0 3
37985: PUSH
37986: LD_VAR 0 5
37990: PUSH
37991: FOR_IN
37992: IFFALSE 38024
// begin result := EnemyInRange ( i , 22 ) ;
37994: LD_ADDR_VAR 0 2
37998: PUSH
37999: LD_VAR 0 3
38003: PPUSH
38004: LD_INT 22
38006: PPUSH
38007: CALL 35624 0 2
38011: ST_TO_ADDR
// if result then
38012: LD_VAR 0 2
38016: IFFALSE 38022
// exit ;
38018: POP
38019: POP
38020: GO 38026
// end ;
38022: GO 37991
38024: POP
38025: POP
// end ;
38026: LD_VAR 0 2
38030: RET
// export function FilterByTag ( units , tag ) ; begin
38031: LD_INT 0
38033: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38034: LD_ADDR_VAR 0 3
38038: PUSH
38039: LD_VAR 0 1
38043: PPUSH
38044: LD_INT 120
38046: PUSH
38047: LD_VAR 0 2
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PPUSH
38056: CALL_OW 72
38060: ST_TO_ADDR
// end ;
38061: LD_VAR 0 3
38065: RET
// export function IsDriver ( un ) ; begin
38066: LD_INT 0
38068: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38069: LD_ADDR_VAR 0 2
38073: PUSH
38074: LD_VAR 0 1
38078: PUSH
38079: LD_INT 55
38081: PUSH
38082: EMPTY
38083: LIST
38084: PPUSH
38085: CALL_OW 69
38089: IN
38090: ST_TO_ADDR
// end ;
38091: LD_VAR 0 2
38095: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38096: LD_INT 0
38098: PPUSH
38099: PPUSH
// list := [ ] ;
38100: LD_ADDR_VAR 0 5
38104: PUSH
38105: EMPTY
38106: ST_TO_ADDR
// case d of 0 :
38107: LD_VAR 0 3
38111: PUSH
38112: LD_INT 0
38114: DOUBLE
38115: EQUAL
38116: IFTRUE 38120
38118: GO 38253
38120: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38121: LD_ADDR_VAR 0 5
38125: PUSH
38126: LD_VAR 0 1
38130: PUSH
38131: LD_INT 4
38133: MINUS
38134: PUSH
38135: LD_VAR 0 2
38139: PUSH
38140: LD_INT 4
38142: MINUS
38143: PUSH
38144: LD_INT 2
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: LIST
38151: PUSH
38152: LD_VAR 0 1
38156: PUSH
38157: LD_INT 3
38159: MINUS
38160: PUSH
38161: LD_VAR 0 2
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: LIST
38173: PUSH
38174: LD_VAR 0 1
38178: PUSH
38179: LD_INT 4
38181: PLUS
38182: PUSH
38183: LD_VAR 0 2
38187: PUSH
38188: LD_INT 4
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: LIST
38195: PUSH
38196: LD_VAR 0 1
38200: PUSH
38201: LD_INT 3
38203: PLUS
38204: PUSH
38205: LD_VAR 0 2
38209: PUSH
38210: LD_INT 3
38212: PLUS
38213: PUSH
38214: LD_INT 5
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: LIST
38221: PUSH
38222: LD_VAR 0 1
38226: PUSH
38227: LD_VAR 0 2
38231: PUSH
38232: LD_INT 4
38234: PLUS
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: LIST
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: ST_TO_ADDR
// end ; 1 :
38251: GO 38951
38253: LD_INT 1
38255: DOUBLE
38256: EQUAL
38257: IFTRUE 38261
38259: GO 38394
38261: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38262: LD_ADDR_VAR 0 5
38266: PUSH
38267: LD_VAR 0 1
38271: PUSH
38272: LD_VAR 0 2
38276: PUSH
38277: LD_INT 4
38279: MINUS
38280: PUSH
38281: LD_INT 3
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: LIST
38288: PUSH
38289: LD_VAR 0 1
38293: PUSH
38294: LD_INT 3
38296: MINUS
38297: PUSH
38298: LD_VAR 0 2
38302: PUSH
38303: LD_INT 3
38305: MINUS
38306: PUSH
38307: LD_INT 2
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: LIST
38314: PUSH
38315: LD_VAR 0 1
38319: PUSH
38320: LD_INT 4
38322: MINUS
38323: PUSH
38324: LD_VAR 0 2
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: LIST
38336: PUSH
38337: LD_VAR 0 1
38341: PUSH
38342: LD_VAR 0 2
38346: PUSH
38347: LD_INT 3
38349: PLUS
38350: PUSH
38351: LD_INT 0
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: LIST
38358: PUSH
38359: LD_VAR 0 1
38363: PUSH
38364: LD_INT 4
38366: PLUS
38367: PUSH
38368: LD_VAR 0 2
38372: PUSH
38373: LD_INT 4
38375: PLUS
38376: PUSH
38377: LD_INT 5
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: LIST
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: ST_TO_ADDR
// end ; 2 :
38392: GO 38951
38394: LD_INT 2
38396: DOUBLE
38397: EQUAL
38398: IFTRUE 38402
38400: GO 38531
38402: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38403: LD_ADDR_VAR 0 5
38407: PUSH
38408: LD_VAR 0 1
38412: PUSH
38413: LD_VAR 0 2
38417: PUSH
38418: LD_INT 3
38420: MINUS
38421: PUSH
38422: LD_INT 3
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: LIST
38429: PUSH
38430: LD_VAR 0 1
38434: PUSH
38435: LD_INT 4
38437: PLUS
38438: PUSH
38439: LD_VAR 0 2
38443: PUSH
38444: LD_INT 4
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: LIST
38451: PUSH
38452: LD_VAR 0 1
38456: PUSH
38457: LD_VAR 0 2
38461: PUSH
38462: LD_INT 4
38464: PLUS
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: LIST
38473: PUSH
38474: LD_VAR 0 1
38478: PUSH
38479: LD_INT 3
38481: MINUS
38482: PUSH
38483: LD_VAR 0 2
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: LIST
38495: PUSH
38496: LD_VAR 0 1
38500: PUSH
38501: LD_INT 4
38503: MINUS
38504: PUSH
38505: LD_VAR 0 2
38509: PUSH
38510: LD_INT 4
38512: MINUS
38513: PUSH
38514: LD_INT 2
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: LIST
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: ST_TO_ADDR
// end ; 3 :
38529: GO 38951
38531: LD_INT 3
38533: DOUBLE
38534: EQUAL
38535: IFTRUE 38539
38537: GO 38672
38539: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38540: LD_ADDR_VAR 0 5
38544: PUSH
38545: LD_VAR 0 1
38549: PUSH
38550: LD_INT 3
38552: PLUS
38553: PUSH
38554: LD_VAR 0 2
38558: PUSH
38559: LD_INT 4
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: LIST
38566: PUSH
38567: LD_VAR 0 1
38571: PUSH
38572: LD_INT 4
38574: PLUS
38575: PUSH
38576: LD_VAR 0 2
38580: PUSH
38581: LD_INT 4
38583: PLUS
38584: PUSH
38585: LD_INT 5
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: LIST
38592: PUSH
38593: LD_VAR 0 1
38597: PUSH
38598: LD_INT 4
38600: MINUS
38601: PUSH
38602: LD_VAR 0 2
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: LIST
38614: PUSH
38615: LD_VAR 0 1
38619: PUSH
38620: LD_VAR 0 2
38624: PUSH
38625: LD_INT 4
38627: MINUS
38628: PUSH
38629: LD_INT 3
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: LIST
38636: PUSH
38637: LD_VAR 0 1
38641: PUSH
38642: LD_INT 3
38644: MINUS
38645: PUSH
38646: LD_VAR 0 2
38650: PUSH
38651: LD_INT 3
38653: MINUS
38654: PUSH
38655: LD_INT 2
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: LIST
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: ST_TO_ADDR
// end ; 4 :
38670: GO 38951
38672: LD_INT 4
38674: DOUBLE
38675: EQUAL
38676: IFTRUE 38680
38678: GO 38813
38680: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38681: LD_ADDR_VAR 0 5
38685: PUSH
38686: LD_VAR 0 1
38690: PUSH
38691: LD_VAR 0 2
38695: PUSH
38696: LD_INT 4
38698: PLUS
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: PUSH
38708: LD_VAR 0 1
38712: PUSH
38713: LD_INT 3
38715: PLUS
38716: PUSH
38717: LD_VAR 0 2
38721: PUSH
38722: LD_INT 3
38724: PLUS
38725: PUSH
38726: LD_INT 5
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: LIST
38733: PUSH
38734: LD_VAR 0 1
38738: PUSH
38739: LD_INT 4
38741: PLUS
38742: PUSH
38743: LD_VAR 0 2
38747: PUSH
38748: LD_INT 4
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: LIST
38755: PUSH
38756: LD_VAR 0 1
38760: PUSH
38761: LD_VAR 0 2
38765: PUSH
38766: LD_INT 3
38768: MINUS
38769: PUSH
38770: LD_INT 3
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: LIST
38777: PUSH
38778: LD_VAR 0 1
38782: PUSH
38783: LD_INT 4
38785: MINUS
38786: PUSH
38787: LD_VAR 0 2
38791: PUSH
38792: LD_INT 4
38794: MINUS
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: LIST
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: ST_TO_ADDR
// end ; 5 :
38811: GO 38951
38813: LD_INT 5
38815: DOUBLE
38816: EQUAL
38817: IFTRUE 38821
38819: GO 38950
38821: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38822: LD_ADDR_VAR 0 5
38826: PUSH
38827: LD_VAR 0 1
38831: PUSH
38832: LD_INT 4
38834: MINUS
38835: PUSH
38836: LD_VAR 0 2
38840: PUSH
38841: LD_INT 1
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: LIST
38848: PUSH
38849: LD_VAR 0 1
38853: PUSH
38854: LD_VAR 0 2
38858: PUSH
38859: LD_INT 4
38861: MINUS
38862: PUSH
38863: LD_INT 3
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: LIST
38870: PUSH
38871: LD_VAR 0 1
38875: PUSH
38876: LD_INT 4
38878: PLUS
38879: PUSH
38880: LD_VAR 0 2
38884: PUSH
38885: LD_INT 4
38887: PLUS
38888: PUSH
38889: LD_INT 5
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: LIST
38896: PUSH
38897: LD_VAR 0 1
38901: PUSH
38902: LD_INT 3
38904: PLUS
38905: PUSH
38906: LD_VAR 0 2
38910: PUSH
38911: LD_INT 4
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: LIST
38918: PUSH
38919: LD_VAR 0 1
38923: PUSH
38924: LD_VAR 0 2
38928: PUSH
38929: LD_INT 3
38931: PLUS
38932: PUSH
38933: LD_INT 0
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: LIST
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: ST_TO_ADDR
// end ; end ;
38948: GO 38951
38950: POP
// result := list ;
38951: LD_ADDR_VAR 0 4
38955: PUSH
38956: LD_VAR 0 5
38960: ST_TO_ADDR
// end ;
38961: LD_VAR 0 4
38965: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38966: LD_INT 0
38968: PPUSH
38969: PPUSH
38970: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38971: LD_VAR 0 1
38975: NOT
38976: PUSH
38977: LD_VAR 0 2
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: LD_INT 2
38987: PUSH
38988: LD_INT 3
38990: PUSH
38991: LD_INT 4
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: IN
39000: NOT
39001: OR
39002: IFFALSE 39006
// exit ;
39004: GO 39089
// tmp := [ ] ;
39006: LD_ADDR_VAR 0 5
39010: PUSH
39011: EMPTY
39012: ST_TO_ADDR
// for i in units do
39013: LD_ADDR_VAR 0 4
39017: PUSH
39018: LD_VAR 0 1
39022: PUSH
39023: FOR_IN
39024: IFFALSE 39058
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39026: LD_ADDR_VAR 0 5
39030: PUSH
39031: LD_VAR 0 5
39035: PPUSH
39036: LD_VAR 0 4
39040: PPUSH
39041: LD_VAR 0 2
39045: PPUSH
39046: CALL_OW 259
39050: PPUSH
39051: CALL 40462 0 2
39055: ST_TO_ADDR
39056: GO 39023
39058: POP
39059: POP
// if not tmp then
39060: LD_VAR 0 5
39064: NOT
39065: IFFALSE 39069
// exit ;
39067: GO 39089
// result := SortListByListDesc ( units , tmp ) ;
39069: LD_ADDR_VAR 0 3
39073: PUSH
39074: LD_VAR 0 1
39078: PPUSH
39079: LD_VAR 0 5
39083: PPUSH
39084: CALL_OW 77
39088: ST_TO_ADDR
// end ;
39089: LD_VAR 0 3
39093: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39094: LD_INT 0
39096: PPUSH
39097: PPUSH
39098: PPUSH
// result := false ;
39099: LD_ADDR_VAR 0 3
39103: PUSH
39104: LD_INT 0
39106: ST_TO_ADDR
// if not building then
39107: LD_VAR 0 2
39111: NOT
39112: IFFALSE 39116
// exit ;
39114: GO 39254
// x := GetX ( building ) ;
39116: LD_ADDR_VAR 0 4
39120: PUSH
39121: LD_VAR 0 2
39125: PPUSH
39126: CALL_OW 250
39130: ST_TO_ADDR
// y := GetY ( building ) ;
39131: LD_ADDR_VAR 0 5
39135: PUSH
39136: LD_VAR 0 2
39140: PPUSH
39141: CALL_OW 251
39145: ST_TO_ADDR
// if not x or not y then
39146: LD_VAR 0 4
39150: NOT
39151: PUSH
39152: LD_VAR 0 5
39156: NOT
39157: OR
39158: IFFALSE 39162
// exit ;
39160: GO 39254
// if GetTaskList ( unit ) then
39162: LD_VAR 0 1
39166: PPUSH
39167: CALL_OW 437
39171: IFFALSE 39254
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39173: LD_STRING e
39175: PUSH
39176: LD_VAR 0 1
39180: PPUSH
39181: CALL_OW 437
39185: PUSH
39186: LD_INT 1
39188: ARRAY
39189: PUSH
39190: LD_INT 1
39192: ARRAY
39193: EQUAL
39194: PUSH
39195: LD_VAR 0 4
39199: PUSH
39200: LD_VAR 0 1
39204: PPUSH
39205: CALL_OW 437
39209: PUSH
39210: LD_INT 1
39212: ARRAY
39213: PUSH
39214: LD_INT 2
39216: ARRAY
39217: EQUAL
39218: AND
39219: PUSH
39220: LD_VAR 0 5
39224: PUSH
39225: LD_VAR 0 1
39229: PPUSH
39230: CALL_OW 437
39234: PUSH
39235: LD_INT 1
39237: ARRAY
39238: PUSH
39239: LD_INT 3
39241: ARRAY
39242: EQUAL
39243: AND
39244: IFFALSE 39254
// result := true end ;
39246: LD_ADDR_VAR 0 3
39250: PUSH
39251: LD_INT 1
39253: ST_TO_ADDR
// end ;
39254: LD_VAR 0 3
39258: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39259: LD_INT 0
39261: PPUSH
// result := false ;
39262: LD_ADDR_VAR 0 4
39266: PUSH
39267: LD_INT 0
39269: ST_TO_ADDR
// if GetTaskList ( unit ) then
39270: LD_VAR 0 1
39274: PPUSH
39275: CALL_OW 437
39279: IFFALSE 39362
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39281: LD_STRING M
39283: PUSH
39284: LD_VAR 0 1
39288: PPUSH
39289: CALL_OW 437
39293: PUSH
39294: LD_INT 1
39296: ARRAY
39297: PUSH
39298: LD_INT 1
39300: ARRAY
39301: EQUAL
39302: PUSH
39303: LD_VAR 0 2
39307: PUSH
39308: LD_VAR 0 1
39312: PPUSH
39313: CALL_OW 437
39317: PUSH
39318: LD_INT 1
39320: ARRAY
39321: PUSH
39322: LD_INT 2
39324: ARRAY
39325: EQUAL
39326: AND
39327: PUSH
39328: LD_VAR 0 3
39332: PUSH
39333: LD_VAR 0 1
39337: PPUSH
39338: CALL_OW 437
39342: PUSH
39343: LD_INT 1
39345: ARRAY
39346: PUSH
39347: LD_INT 3
39349: ARRAY
39350: EQUAL
39351: AND
39352: IFFALSE 39362
// result := true ;
39354: LD_ADDR_VAR 0 4
39358: PUSH
39359: LD_INT 1
39361: ST_TO_ADDR
// end ; end ;
39362: LD_VAR 0 4
39366: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39367: LD_INT 0
39369: PPUSH
39370: PPUSH
39371: PPUSH
39372: PPUSH
// if not unit or not area then
39373: LD_VAR 0 1
39377: NOT
39378: PUSH
39379: LD_VAR 0 2
39383: NOT
39384: OR
39385: IFFALSE 39389
// exit ;
39387: GO 39565
// tmp := AreaToList ( area , i ) ;
39389: LD_ADDR_VAR 0 6
39393: PUSH
39394: LD_VAR 0 2
39398: PPUSH
39399: LD_VAR 0 5
39403: PPUSH
39404: CALL_OW 517
39408: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39409: LD_ADDR_VAR 0 5
39413: PUSH
39414: DOUBLE
39415: LD_INT 1
39417: DEC
39418: ST_TO_ADDR
39419: LD_VAR 0 6
39423: PUSH
39424: LD_INT 1
39426: ARRAY
39427: PUSH
39428: FOR_TO
39429: IFFALSE 39563
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39431: LD_ADDR_VAR 0 7
39435: PUSH
39436: LD_VAR 0 6
39440: PUSH
39441: LD_INT 1
39443: ARRAY
39444: PUSH
39445: LD_VAR 0 5
39449: ARRAY
39450: PUSH
39451: LD_VAR 0 6
39455: PUSH
39456: LD_INT 2
39458: ARRAY
39459: PUSH
39460: LD_VAR 0 5
39464: ARRAY
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39470: LD_INT 92
39472: PUSH
39473: LD_VAR 0 7
39477: PUSH
39478: LD_INT 1
39480: ARRAY
39481: PUSH
39482: LD_VAR 0 7
39486: PUSH
39487: LD_INT 2
39489: ARRAY
39490: PUSH
39491: LD_INT 2
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: PPUSH
39500: CALL_OW 69
39504: PUSH
39505: LD_INT 0
39507: EQUAL
39508: IFFALSE 39561
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39510: LD_VAR 0 1
39514: PPUSH
39515: LD_VAR 0 7
39519: PUSH
39520: LD_INT 1
39522: ARRAY
39523: PPUSH
39524: LD_VAR 0 7
39528: PUSH
39529: LD_INT 2
39531: ARRAY
39532: PPUSH
39533: LD_VAR 0 3
39537: PPUSH
39538: CALL_OW 48
// result := IsPlaced ( unit ) ;
39542: LD_ADDR_VAR 0 4
39546: PUSH
39547: LD_VAR 0 1
39551: PPUSH
39552: CALL_OW 305
39556: ST_TO_ADDR
// exit ;
39557: POP
39558: POP
39559: GO 39565
// end ; end ;
39561: GO 39428
39563: POP
39564: POP
// end ;
39565: LD_VAR 0 4
39569: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39570: LD_INT 0
39572: PPUSH
39573: PPUSH
39574: PPUSH
// if not side or side > 8 then
39575: LD_VAR 0 1
39579: NOT
39580: PUSH
39581: LD_VAR 0 1
39585: PUSH
39586: LD_INT 8
39588: GREATER
39589: OR
39590: IFFALSE 39594
// exit ;
39592: GO 39781
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39594: LD_ADDR_VAR 0 4
39598: PUSH
39599: LD_INT 22
39601: PUSH
39602: LD_VAR 0 1
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 21
39613: PUSH
39614: LD_INT 3
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PPUSH
39625: CALL_OW 69
39629: ST_TO_ADDR
// if not tmp then
39630: LD_VAR 0 4
39634: NOT
39635: IFFALSE 39639
// exit ;
39637: GO 39781
// enable_addtolog := true ;
39639: LD_ADDR_OWVAR 81
39643: PUSH
39644: LD_INT 1
39646: ST_TO_ADDR
// AddToLog ( [ ) ;
39647: LD_STRING [
39649: PPUSH
39650: CALL_OW 561
// for i in tmp do
39654: LD_ADDR_VAR 0 3
39658: PUSH
39659: LD_VAR 0 4
39663: PUSH
39664: FOR_IN
39665: IFFALSE 39772
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39667: LD_STRING [
39669: PUSH
39670: LD_VAR 0 3
39674: PPUSH
39675: CALL_OW 266
39679: STR
39680: PUSH
39681: LD_STRING , 
39683: STR
39684: PUSH
39685: LD_VAR 0 3
39689: PPUSH
39690: CALL_OW 250
39694: STR
39695: PUSH
39696: LD_STRING , 
39698: STR
39699: PUSH
39700: LD_VAR 0 3
39704: PPUSH
39705: CALL_OW 251
39709: STR
39710: PUSH
39711: LD_STRING , 
39713: STR
39714: PUSH
39715: LD_VAR 0 3
39719: PPUSH
39720: CALL_OW 254
39724: STR
39725: PUSH
39726: LD_STRING , 
39728: STR
39729: PUSH
39730: LD_VAR 0 3
39734: PPUSH
39735: LD_INT 1
39737: PPUSH
39738: CALL_OW 268
39742: STR
39743: PUSH
39744: LD_STRING , 
39746: STR
39747: PUSH
39748: LD_VAR 0 3
39752: PPUSH
39753: LD_INT 2
39755: PPUSH
39756: CALL_OW 268
39760: STR
39761: PUSH
39762: LD_STRING ],
39764: STR
39765: PPUSH
39766: CALL_OW 561
// end ;
39770: GO 39664
39772: POP
39773: POP
// AddToLog ( ]; ) ;
39774: LD_STRING ];
39776: PPUSH
39777: CALL_OW 561
// end ;
39781: LD_VAR 0 2
39785: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39786: LD_INT 0
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
39792: PPUSH
// if not area or not rate or not max then
39793: LD_VAR 0 1
39797: NOT
39798: PUSH
39799: LD_VAR 0 2
39803: NOT
39804: OR
39805: PUSH
39806: LD_VAR 0 4
39810: NOT
39811: OR
39812: IFFALSE 39816
// exit ;
39814: GO 40005
// while 1 do
39816: LD_INT 1
39818: IFFALSE 40005
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39820: LD_ADDR_VAR 0 9
39824: PUSH
39825: LD_VAR 0 1
39829: PPUSH
39830: LD_INT 1
39832: PPUSH
39833: CALL_OW 287
39837: PUSH
39838: LD_INT 10
39840: MUL
39841: ST_TO_ADDR
// r := rate / 10 ;
39842: LD_ADDR_VAR 0 7
39846: PUSH
39847: LD_VAR 0 2
39851: PUSH
39852: LD_INT 10
39854: DIVREAL
39855: ST_TO_ADDR
// time := 1 1$00 ;
39856: LD_ADDR_VAR 0 8
39860: PUSH
39861: LD_INT 2100
39863: ST_TO_ADDR
// if amount < min then
39864: LD_VAR 0 9
39868: PUSH
39869: LD_VAR 0 3
39873: LESS
39874: IFFALSE 39892
// r := r * 2 else
39876: LD_ADDR_VAR 0 7
39880: PUSH
39881: LD_VAR 0 7
39885: PUSH
39886: LD_INT 2
39888: MUL
39889: ST_TO_ADDR
39890: GO 39918
// if amount > max then
39892: LD_VAR 0 9
39896: PUSH
39897: LD_VAR 0 4
39901: GREATER
39902: IFFALSE 39918
// r := r / 2 ;
39904: LD_ADDR_VAR 0 7
39908: PUSH
39909: LD_VAR 0 7
39913: PUSH
39914: LD_INT 2
39916: DIVREAL
39917: ST_TO_ADDR
// time := time / r ;
39918: LD_ADDR_VAR 0 8
39922: PUSH
39923: LD_VAR 0 8
39927: PUSH
39928: LD_VAR 0 7
39932: DIVREAL
39933: ST_TO_ADDR
// if time < 0 then
39934: LD_VAR 0 8
39938: PUSH
39939: LD_INT 0
39941: LESS
39942: IFFALSE 39959
// time := time * - 1 ;
39944: LD_ADDR_VAR 0 8
39948: PUSH
39949: LD_VAR 0 8
39953: PUSH
39954: LD_INT 1
39956: NEG
39957: MUL
39958: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39959: LD_VAR 0 8
39963: PUSH
39964: LD_INT 35
39966: PPUSH
39967: LD_INT 875
39969: PPUSH
39970: CALL_OW 12
39974: PLUS
39975: PPUSH
39976: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39980: LD_INT 1
39982: PPUSH
39983: LD_INT 5
39985: PPUSH
39986: CALL_OW 12
39990: PPUSH
39991: LD_VAR 0 1
39995: PPUSH
39996: LD_INT 1
39998: PPUSH
39999: CALL_OW 55
// end ;
40003: GO 39816
// end ;
40005: LD_VAR 0 5
40009: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40010: LD_INT 0
40012: PPUSH
40013: PPUSH
40014: PPUSH
40015: PPUSH
40016: PPUSH
40017: PPUSH
40018: PPUSH
40019: PPUSH
// if not turrets or not factories then
40020: LD_VAR 0 1
40024: NOT
40025: PUSH
40026: LD_VAR 0 2
40030: NOT
40031: OR
40032: IFFALSE 40036
// exit ;
40034: GO 40343
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40036: LD_ADDR_VAR 0 10
40040: PUSH
40041: LD_INT 5
40043: PUSH
40044: LD_INT 6
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 2
40053: PUSH
40054: LD_INT 4
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 3
40063: PUSH
40064: LD_INT 5
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 24
40078: PUSH
40079: LD_INT 25
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 23
40088: PUSH
40089: LD_INT 27
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 42
40102: PUSH
40103: LD_INT 43
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 44
40112: PUSH
40113: LD_INT 46
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 45
40122: PUSH
40123: LD_INT 47
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: LIST
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: LIST
40139: ST_TO_ADDR
// result := [ ] ;
40140: LD_ADDR_VAR 0 3
40144: PUSH
40145: EMPTY
40146: ST_TO_ADDR
// for i in turrets do
40147: LD_ADDR_VAR 0 4
40151: PUSH
40152: LD_VAR 0 1
40156: PUSH
40157: FOR_IN
40158: IFFALSE 40341
// begin nat := GetNation ( i ) ;
40160: LD_ADDR_VAR 0 7
40164: PUSH
40165: LD_VAR 0 4
40169: PPUSH
40170: CALL_OW 248
40174: ST_TO_ADDR
// weapon := 0 ;
40175: LD_ADDR_VAR 0 8
40179: PUSH
40180: LD_INT 0
40182: ST_TO_ADDR
// if not nat then
40183: LD_VAR 0 7
40187: NOT
40188: IFFALSE 40192
// continue ;
40190: GO 40157
// for j in list [ nat ] do
40192: LD_ADDR_VAR 0 5
40196: PUSH
40197: LD_VAR 0 10
40201: PUSH
40202: LD_VAR 0 7
40206: ARRAY
40207: PUSH
40208: FOR_IN
40209: IFFALSE 40250
// if GetBWeapon ( i ) = j [ 1 ] then
40211: LD_VAR 0 4
40215: PPUSH
40216: CALL_OW 269
40220: PUSH
40221: LD_VAR 0 5
40225: PUSH
40226: LD_INT 1
40228: ARRAY
40229: EQUAL
40230: IFFALSE 40248
// begin weapon := j [ 2 ] ;
40232: LD_ADDR_VAR 0 8
40236: PUSH
40237: LD_VAR 0 5
40241: PUSH
40242: LD_INT 2
40244: ARRAY
40245: ST_TO_ADDR
// break ;
40246: GO 40250
// end ;
40248: GO 40208
40250: POP
40251: POP
// if not weapon then
40252: LD_VAR 0 8
40256: NOT
40257: IFFALSE 40261
// continue ;
40259: GO 40157
// for k in factories do
40261: LD_ADDR_VAR 0 6
40265: PUSH
40266: LD_VAR 0 2
40270: PUSH
40271: FOR_IN
40272: IFFALSE 40337
// begin weapons := AvailableWeaponList ( k ) ;
40274: LD_ADDR_VAR 0 9
40278: PUSH
40279: LD_VAR 0 6
40283: PPUSH
40284: CALL_OW 478
40288: ST_TO_ADDR
// if not weapons then
40289: LD_VAR 0 9
40293: NOT
40294: IFFALSE 40298
// continue ;
40296: GO 40271
// if weapon in weapons then
40298: LD_VAR 0 8
40302: PUSH
40303: LD_VAR 0 9
40307: IN
40308: IFFALSE 40335
// begin result := [ i , weapon ] ;
40310: LD_ADDR_VAR 0 3
40314: PUSH
40315: LD_VAR 0 4
40319: PUSH
40320: LD_VAR 0 8
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: ST_TO_ADDR
// exit ;
40329: POP
40330: POP
40331: POP
40332: POP
40333: GO 40343
// end ; end ;
40335: GO 40271
40337: POP
40338: POP
// end ;
40339: GO 40157
40341: POP
40342: POP
// end ;
40343: LD_VAR 0 3
40347: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40348: LD_INT 0
40350: PPUSH
// if not side or side > 8 then
40351: LD_VAR 0 3
40355: NOT
40356: PUSH
40357: LD_VAR 0 3
40361: PUSH
40362: LD_INT 8
40364: GREATER
40365: OR
40366: IFFALSE 40370
// exit ;
40368: GO 40429
// if not range then
40370: LD_VAR 0 4
40374: NOT
40375: IFFALSE 40386
// range := - 12 ;
40377: LD_ADDR_VAR 0 4
40381: PUSH
40382: LD_INT 12
40384: NEG
40385: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40386: LD_VAR 0 1
40390: PPUSH
40391: LD_VAR 0 2
40395: PPUSH
40396: LD_VAR 0 3
40400: PPUSH
40401: LD_VAR 0 4
40405: PPUSH
40406: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40410: LD_VAR 0 1
40414: PPUSH
40415: LD_VAR 0 2
40419: PPUSH
40420: LD_VAR 0 3
40424: PPUSH
40425: CALL_OW 331
// end ;
40429: LD_VAR 0 5
40433: RET
// export function Video ( mode ) ; begin
40434: LD_INT 0
40436: PPUSH
// ingame_video = mode ;
40437: LD_ADDR_OWVAR 52
40441: PUSH
40442: LD_VAR 0 1
40446: ST_TO_ADDR
// interface_hidden = mode ;
40447: LD_ADDR_OWVAR 54
40451: PUSH
40452: LD_VAR 0 1
40456: ST_TO_ADDR
// end ;
40457: LD_VAR 0 2
40461: RET
// export function Join ( array , element ) ; begin
40462: LD_INT 0
40464: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40465: LD_ADDR_VAR 0 3
40469: PUSH
40470: LD_VAR 0 1
40474: PPUSH
40475: LD_VAR 0 1
40479: PUSH
40480: LD_INT 1
40482: PLUS
40483: PPUSH
40484: LD_VAR 0 2
40488: PPUSH
40489: CALL_OW 1
40493: ST_TO_ADDR
// end ;
40494: LD_VAR 0 3
40498: RET
// export function JoinUnion ( array , element ) ; begin
40499: LD_INT 0
40501: PPUSH
// result := array union element ;
40502: LD_ADDR_VAR 0 3
40506: PUSH
40507: LD_VAR 0 1
40511: PUSH
40512: LD_VAR 0 2
40516: UNION
40517: ST_TO_ADDR
// end ;
40518: LD_VAR 0 3
40522: RET
// export function GetBehemoths ( side ) ; begin
40523: LD_INT 0
40525: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40526: LD_ADDR_VAR 0 2
40530: PUSH
40531: LD_INT 22
40533: PUSH
40534: LD_VAR 0 1
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 31
40545: PUSH
40546: LD_INT 25
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PPUSH
40557: CALL_OW 69
40561: ST_TO_ADDR
// end ;
40562: LD_VAR 0 2
40566: RET
// export function Shuffle ( array ) ; var i , index ; begin
40567: LD_INT 0
40569: PPUSH
40570: PPUSH
40571: PPUSH
// result := [ ] ;
40572: LD_ADDR_VAR 0 2
40576: PUSH
40577: EMPTY
40578: ST_TO_ADDR
// if not array then
40579: LD_VAR 0 1
40583: NOT
40584: IFFALSE 40588
// exit ;
40586: GO 40687
// Randomize ;
40588: CALL_OW 10
// for i = array downto 1 do
40592: LD_ADDR_VAR 0 3
40596: PUSH
40597: DOUBLE
40598: LD_VAR 0 1
40602: INC
40603: ST_TO_ADDR
40604: LD_INT 1
40606: PUSH
40607: FOR_DOWNTO
40608: IFFALSE 40685
// begin index := rand ( 1 , array ) ;
40610: LD_ADDR_VAR 0 4
40614: PUSH
40615: LD_INT 1
40617: PPUSH
40618: LD_VAR 0 1
40622: PPUSH
40623: CALL_OW 12
40627: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40628: LD_ADDR_VAR 0 2
40632: PUSH
40633: LD_VAR 0 2
40637: PPUSH
40638: LD_VAR 0 2
40642: PUSH
40643: LD_INT 1
40645: PLUS
40646: PPUSH
40647: LD_VAR 0 1
40651: PUSH
40652: LD_VAR 0 4
40656: ARRAY
40657: PPUSH
40658: CALL_OW 2
40662: ST_TO_ADDR
// array := Delete ( array , index ) ;
40663: LD_ADDR_VAR 0 1
40667: PUSH
40668: LD_VAR 0 1
40672: PPUSH
40673: LD_VAR 0 4
40677: PPUSH
40678: CALL_OW 3
40682: ST_TO_ADDR
// end ;
40683: GO 40607
40685: POP
40686: POP
// end ;
40687: LD_VAR 0 2
40691: RET
// export function GetBaseMaterials ( base ) ; begin
40692: LD_INT 0
40694: PPUSH
// result := [ 0 , 0 , 0 ] ;
40695: LD_ADDR_VAR 0 2
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: LIST
40713: ST_TO_ADDR
// if not base then
40714: LD_VAR 0 1
40718: NOT
40719: IFFALSE 40723
// exit ;
40721: GO 40772
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40723: LD_ADDR_VAR 0 2
40727: PUSH
40728: LD_VAR 0 1
40732: PPUSH
40733: LD_INT 1
40735: PPUSH
40736: CALL_OW 275
40740: PUSH
40741: LD_VAR 0 1
40745: PPUSH
40746: LD_INT 2
40748: PPUSH
40749: CALL_OW 275
40753: PUSH
40754: LD_VAR 0 1
40758: PPUSH
40759: LD_INT 3
40761: PPUSH
40762: CALL_OW 275
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: LIST
40771: ST_TO_ADDR
// end ;
40772: LD_VAR 0 2
40776: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40777: LD_INT 0
40779: PPUSH
40780: PPUSH
// result := array ;
40781: LD_ADDR_VAR 0 3
40785: PUSH
40786: LD_VAR 0 1
40790: ST_TO_ADDR
// if size >= result then
40791: LD_VAR 0 2
40795: PUSH
40796: LD_VAR 0 3
40800: GREATEREQUAL
40801: IFFALSE 40805
// exit ;
40803: GO 40855
// if size then
40805: LD_VAR 0 2
40809: IFFALSE 40855
// for i := array downto size do
40811: LD_ADDR_VAR 0 4
40815: PUSH
40816: DOUBLE
40817: LD_VAR 0 1
40821: INC
40822: ST_TO_ADDR
40823: LD_VAR 0 2
40827: PUSH
40828: FOR_DOWNTO
40829: IFFALSE 40853
// result := Delete ( result , result ) ;
40831: LD_ADDR_VAR 0 3
40835: PUSH
40836: LD_VAR 0 3
40840: PPUSH
40841: LD_VAR 0 3
40845: PPUSH
40846: CALL_OW 3
40850: ST_TO_ADDR
40851: GO 40828
40853: POP
40854: POP
// end ;
40855: LD_VAR 0 3
40859: RET
// export function ComExit ( unit ) ; var tmp ; begin
40860: LD_INT 0
40862: PPUSH
40863: PPUSH
// if not IsInUnit ( unit ) then
40864: LD_VAR 0 1
40868: PPUSH
40869: CALL_OW 310
40873: NOT
40874: IFFALSE 40878
// exit ;
40876: GO 40938
// tmp := IsInUnit ( unit ) ;
40878: LD_ADDR_VAR 0 3
40882: PUSH
40883: LD_VAR 0 1
40887: PPUSH
40888: CALL_OW 310
40892: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40893: LD_VAR 0 3
40897: PPUSH
40898: CALL_OW 247
40902: PUSH
40903: LD_INT 2
40905: EQUAL
40906: IFFALSE 40919
// ComExitVehicle ( unit ) else
40908: LD_VAR 0 1
40912: PPUSH
40913: CALL_OW 121
40917: GO 40928
// ComExitBuilding ( unit ) ;
40919: LD_VAR 0 1
40923: PPUSH
40924: CALL_OW 122
// result := tmp ;
40928: LD_ADDR_VAR 0 2
40932: PUSH
40933: LD_VAR 0 3
40937: ST_TO_ADDR
// end ;
40938: LD_VAR 0 2
40942: RET
// export function ComExitAll ( units ) ; var i ; begin
40943: LD_INT 0
40945: PPUSH
40946: PPUSH
// if not units then
40947: LD_VAR 0 1
40951: NOT
40952: IFFALSE 40956
// exit ;
40954: GO 40982
// for i in units do
40956: LD_ADDR_VAR 0 3
40960: PUSH
40961: LD_VAR 0 1
40965: PUSH
40966: FOR_IN
40967: IFFALSE 40980
// ComExit ( i ) ;
40969: LD_VAR 0 3
40973: PPUSH
40974: CALL 40860 0 1
40978: GO 40966
40980: POP
40981: POP
// end ;
40982: LD_VAR 0 2
40986: RET
// export function ResetHc ; begin
40987: LD_INT 0
40989: PPUSH
// InitHc ;
40990: CALL_OW 19
// hc_importance := 0 ;
40994: LD_ADDR_OWVAR 32
40998: PUSH
40999: LD_INT 0
41001: ST_TO_ADDR
// end ;
41002: LD_VAR 0 1
41006: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41007: LD_INT 0
41009: PPUSH
41010: PPUSH
41011: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41012: LD_ADDR_VAR 0 6
41016: PUSH
41017: LD_VAR 0 1
41021: PUSH
41022: LD_VAR 0 3
41026: PLUS
41027: PUSH
41028: LD_INT 2
41030: DIV
41031: ST_TO_ADDR
// if _x < 0 then
41032: LD_VAR 0 6
41036: PUSH
41037: LD_INT 0
41039: LESS
41040: IFFALSE 41057
// _x := _x * - 1 ;
41042: LD_ADDR_VAR 0 6
41046: PUSH
41047: LD_VAR 0 6
41051: PUSH
41052: LD_INT 1
41054: NEG
41055: MUL
41056: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41057: LD_ADDR_VAR 0 7
41061: PUSH
41062: LD_VAR 0 2
41066: PUSH
41067: LD_VAR 0 4
41071: PLUS
41072: PUSH
41073: LD_INT 2
41075: DIV
41076: ST_TO_ADDR
// if _y < 0 then
41077: LD_VAR 0 7
41081: PUSH
41082: LD_INT 0
41084: LESS
41085: IFFALSE 41102
// _y := _y * - 1 ;
41087: LD_ADDR_VAR 0 7
41091: PUSH
41092: LD_VAR 0 7
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: MUL
41101: ST_TO_ADDR
// result := [ _x , _y ] ;
41102: LD_ADDR_VAR 0 5
41106: PUSH
41107: LD_VAR 0 6
41111: PUSH
41112: LD_VAR 0 7
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: ST_TO_ADDR
// end ;
41121: LD_VAR 0 5
41125: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41126: LD_INT 0
41128: PPUSH
41129: PPUSH
41130: PPUSH
41131: PPUSH
// task := GetTaskList ( unit ) ;
41132: LD_ADDR_VAR 0 7
41136: PUSH
41137: LD_VAR 0 1
41141: PPUSH
41142: CALL_OW 437
41146: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41147: LD_VAR 0 7
41151: NOT
41152: PUSH
41153: LD_VAR 0 1
41157: PPUSH
41158: LD_VAR 0 2
41162: PPUSH
41163: CALL_OW 308
41167: NOT
41168: AND
41169: IFFALSE 41173
// exit ;
41171: GO 41291
// if IsInArea ( unit , area ) then
41173: LD_VAR 0 1
41177: PPUSH
41178: LD_VAR 0 2
41182: PPUSH
41183: CALL_OW 308
41187: IFFALSE 41205
// begin ComMoveToArea ( unit , goAway ) ;
41189: LD_VAR 0 1
41193: PPUSH
41194: LD_VAR 0 3
41198: PPUSH
41199: CALL_OW 113
// exit ;
41203: GO 41291
// end ; if task [ 1 ] [ 1 ] <> M then
41205: LD_VAR 0 7
41209: PUSH
41210: LD_INT 1
41212: ARRAY
41213: PUSH
41214: LD_INT 1
41216: ARRAY
41217: PUSH
41218: LD_STRING M
41220: NONEQUAL
41221: IFFALSE 41225
// exit ;
41223: GO 41291
// x := task [ 1 ] [ 2 ] ;
41225: LD_ADDR_VAR 0 5
41229: PUSH
41230: LD_VAR 0 7
41234: PUSH
41235: LD_INT 1
41237: ARRAY
41238: PUSH
41239: LD_INT 2
41241: ARRAY
41242: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41243: LD_ADDR_VAR 0 6
41247: PUSH
41248: LD_VAR 0 7
41252: PUSH
41253: LD_INT 1
41255: ARRAY
41256: PUSH
41257: LD_INT 3
41259: ARRAY
41260: ST_TO_ADDR
// if InArea ( x , y , area ) then
41261: LD_VAR 0 5
41265: PPUSH
41266: LD_VAR 0 6
41270: PPUSH
41271: LD_VAR 0 2
41275: PPUSH
41276: CALL_OW 309
41280: IFFALSE 41291
// ComStop ( unit ) ;
41282: LD_VAR 0 1
41286: PPUSH
41287: CALL_OW 141
// end ;
41291: LD_VAR 0 4
41295: RET
// export function Abs ( value ) ; begin
41296: LD_INT 0
41298: PPUSH
// result := value ;
41299: LD_ADDR_VAR 0 2
41303: PUSH
41304: LD_VAR 0 1
41308: ST_TO_ADDR
// if value < 0 then
41309: LD_VAR 0 1
41313: PUSH
41314: LD_INT 0
41316: LESS
41317: IFFALSE 41334
// result := value * - 1 ;
41319: LD_ADDR_VAR 0 2
41323: PUSH
41324: LD_VAR 0 1
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: MUL
41333: ST_TO_ADDR
// end ;
41334: LD_VAR 0 2
41338: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41339: LD_INT 0
41341: PPUSH
41342: PPUSH
41343: PPUSH
41344: PPUSH
41345: PPUSH
41346: PPUSH
41347: PPUSH
41348: PPUSH
// if not unit or not building then
41349: LD_VAR 0 1
41353: NOT
41354: PUSH
41355: LD_VAR 0 2
41359: NOT
41360: OR
41361: IFFALSE 41365
// exit ;
41363: GO 41591
// x := GetX ( building ) ;
41365: LD_ADDR_VAR 0 4
41369: PUSH
41370: LD_VAR 0 2
41374: PPUSH
41375: CALL_OW 250
41379: ST_TO_ADDR
// y := GetY ( building ) ;
41380: LD_ADDR_VAR 0 6
41384: PUSH
41385: LD_VAR 0 2
41389: PPUSH
41390: CALL_OW 251
41394: ST_TO_ADDR
// d := GetDir ( building ) ;
41395: LD_ADDR_VAR 0 8
41399: PUSH
41400: LD_VAR 0 2
41404: PPUSH
41405: CALL_OW 254
41409: ST_TO_ADDR
// r := 4 ;
41410: LD_ADDR_VAR 0 9
41414: PUSH
41415: LD_INT 4
41417: ST_TO_ADDR
// for i := 1 to 5 do
41418: LD_ADDR_VAR 0 10
41422: PUSH
41423: DOUBLE
41424: LD_INT 1
41426: DEC
41427: ST_TO_ADDR
41428: LD_INT 5
41430: PUSH
41431: FOR_TO
41432: IFFALSE 41589
// begin _x := ShiftX ( x , d , r + i ) ;
41434: LD_ADDR_VAR 0 5
41438: PUSH
41439: LD_VAR 0 4
41443: PPUSH
41444: LD_VAR 0 8
41448: PPUSH
41449: LD_VAR 0 9
41453: PUSH
41454: LD_VAR 0 10
41458: PLUS
41459: PPUSH
41460: CALL_OW 272
41464: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41465: LD_ADDR_VAR 0 7
41469: PUSH
41470: LD_VAR 0 6
41474: PPUSH
41475: LD_VAR 0 8
41479: PPUSH
41480: LD_VAR 0 9
41484: PUSH
41485: LD_VAR 0 10
41489: PLUS
41490: PPUSH
41491: CALL_OW 273
41495: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41496: LD_VAR 0 5
41500: PPUSH
41501: LD_VAR 0 7
41505: PPUSH
41506: CALL_OW 488
41510: PUSH
41511: LD_VAR 0 5
41515: PPUSH
41516: LD_VAR 0 7
41520: PPUSH
41521: CALL_OW 428
41525: PPUSH
41526: CALL_OW 247
41530: PUSH
41531: LD_INT 3
41533: PUSH
41534: LD_INT 2
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: IN
41541: NOT
41542: AND
41543: IFFALSE 41587
// begin ComMoveXY ( unit , _x , _y ) ;
41545: LD_VAR 0 1
41549: PPUSH
41550: LD_VAR 0 5
41554: PPUSH
41555: LD_VAR 0 7
41559: PPUSH
41560: CALL_OW 111
// result := [ _x , _y ] ;
41564: LD_ADDR_VAR 0 3
41568: PUSH
41569: LD_VAR 0 5
41573: PUSH
41574: LD_VAR 0 7
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: ST_TO_ADDR
// exit ;
41583: POP
41584: POP
41585: GO 41591
// end ; end ;
41587: GO 41431
41589: POP
41590: POP
// end ;
41591: LD_VAR 0 3
41595: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41596: LD_INT 0
41598: PPUSH
41599: PPUSH
41600: PPUSH
// result := 0 ;
41601: LD_ADDR_VAR 0 3
41605: PUSH
41606: LD_INT 0
41608: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41609: LD_VAR 0 1
41613: PUSH
41614: LD_INT 0
41616: LESS
41617: PUSH
41618: LD_VAR 0 1
41622: PUSH
41623: LD_INT 8
41625: GREATER
41626: OR
41627: PUSH
41628: LD_VAR 0 2
41632: PUSH
41633: LD_INT 0
41635: LESS
41636: OR
41637: PUSH
41638: LD_VAR 0 2
41642: PUSH
41643: LD_INT 8
41645: GREATER
41646: OR
41647: IFFALSE 41651
// exit ;
41649: GO 41726
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41651: LD_ADDR_VAR 0 4
41655: PUSH
41656: LD_INT 22
41658: PUSH
41659: LD_VAR 0 2
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PPUSH
41668: CALL_OW 69
41672: PUSH
41673: FOR_IN
41674: IFFALSE 41724
// begin un := UnitShoot ( i ) ;
41676: LD_ADDR_VAR 0 5
41680: PUSH
41681: LD_VAR 0 4
41685: PPUSH
41686: CALL_OW 504
41690: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41691: LD_VAR 0 5
41695: PPUSH
41696: CALL_OW 255
41700: PUSH
41701: LD_VAR 0 1
41705: EQUAL
41706: IFFALSE 41722
// begin result := un ;
41708: LD_ADDR_VAR 0 3
41712: PUSH
41713: LD_VAR 0 5
41717: ST_TO_ADDR
// exit ;
41718: POP
41719: POP
41720: GO 41726
// end ; end ;
41722: GO 41673
41724: POP
41725: POP
// end ;
41726: LD_VAR 0 3
41730: RET
// export function GetCargoBay ( units ) ; begin
41731: LD_INT 0
41733: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41734: LD_ADDR_VAR 0 2
41738: PUSH
41739: LD_VAR 0 1
41743: PPUSH
41744: LD_INT 2
41746: PUSH
41747: LD_INT 34
41749: PUSH
41750: LD_INT 12
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 34
41759: PUSH
41760: LD_INT 51
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 34
41769: PUSH
41770: LD_INT 32
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 34
41779: PUSH
41780: LD_INT 89
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: PPUSH
41794: CALL_OW 72
41798: ST_TO_ADDR
// end ;
41799: LD_VAR 0 2
41803: RET
// export function Negate ( value ) ; begin
41804: LD_INT 0
41806: PPUSH
// result := not value ;
41807: LD_ADDR_VAR 0 2
41811: PUSH
41812: LD_VAR 0 1
41816: NOT
41817: ST_TO_ADDR
// end ;
41818: LD_VAR 0 2
41822: RET
// export function Inc ( value ) ; begin
41823: LD_INT 0
41825: PPUSH
// result := value + 1 ;
41826: LD_ADDR_VAR 0 2
41830: PUSH
41831: LD_VAR 0 1
41835: PUSH
41836: LD_INT 1
41838: PLUS
41839: ST_TO_ADDR
// end ;
41840: LD_VAR 0 2
41844: RET
// export function Dec ( value ) ; begin
41845: LD_INT 0
41847: PPUSH
// result := value - 1 ;
41848: LD_ADDR_VAR 0 2
41852: PUSH
41853: LD_VAR 0 1
41857: PUSH
41858: LD_INT 1
41860: MINUS
41861: ST_TO_ADDR
// end ;
41862: LD_VAR 0 2
41866: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41867: LD_INT 0
41869: PPUSH
41870: PPUSH
41871: PPUSH
41872: PPUSH
41873: PPUSH
41874: PPUSH
41875: PPUSH
41876: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41877: LD_VAR 0 1
41881: PPUSH
41882: LD_VAR 0 2
41886: PPUSH
41887: CALL_OW 488
41891: NOT
41892: PUSH
41893: LD_VAR 0 3
41897: PPUSH
41898: LD_VAR 0 4
41902: PPUSH
41903: CALL_OW 488
41907: NOT
41908: OR
41909: IFFALSE 41922
// begin result := - 1 ;
41911: LD_ADDR_VAR 0 5
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: ST_TO_ADDR
// exit ;
41920: GO 42157
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41922: LD_ADDR_VAR 0 12
41926: PUSH
41927: LD_VAR 0 1
41931: PPUSH
41932: LD_VAR 0 2
41936: PPUSH
41937: LD_VAR 0 3
41941: PPUSH
41942: LD_VAR 0 4
41946: PPUSH
41947: CALL 41007 0 4
41951: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41952: LD_ADDR_VAR 0 11
41956: PUSH
41957: LD_VAR 0 1
41961: PPUSH
41962: LD_VAR 0 2
41966: PPUSH
41967: LD_VAR 0 12
41971: PUSH
41972: LD_INT 1
41974: ARRAY
41975: PPUSH
41976: LD_VAR 0 12
41980: PUSH
41981: LD_INT 2
41983: ARRAY
41984: PPUSH
41985: CALL_OW 298
41989: ST_TO_ADDR
// distance := 9999 ;
41990: LD_ADDR_VAR 0 10
41994: PUSH
41995: LD_INT 9999
41997: ST_TO_ADDR
// for i := 0 to 5 do
41998: LD_ADDR_VAR 0 6
42002: PUSH
42003: DOUBLE
42004: LD_INT 0
42006: DEC
42007: ST_TO_ADDR
42008: LD_INT 5
42010: PUSH
42011: FOR_TO
42012: IFFALSE 42155
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42014: LD_ADDR_VAR 0 7
42018: PUSH
42019: LD_VAR 0 1
42023: PPUSH
42024: LD_VAR 0 6
42028: PPUSH
42029: LD_VAR 0 11
42033: PPUSH
42034: CALL_OW 272
42038: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42039: LD_ADDR_VAR 0 8
42043: PUSH
42044: LD_VAR 0 2
42048: PPUSH
42049: LD_VAR 0 6
42053: PPUSH
42054: LD_VAR 0 11
42058: PPUSH
42059: CALL_OW 273
42063: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42064: LD_VAR 0 7
42068: PPUSH
42069: LD_VAR 0 8
42073: PPUSH
42074: CALL_OW 488
42078: NOT
42079: IFFALSE 42083
// continue ;
42081: GO 42011
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42083: LD_ADDR_VAR 0 9
42087: PUSH
42088: LD_VAR 0 12
42092: PUSH
42093: LD_INT 1
42095: ARRAY
42096: PPUSH
42097: LD_VAR 0 12
42101: PUSH
42102: LD_INT 2
42104: ARRAY
42105: PPUSH
42106: LD_VAR 0 7
42110: PPUSH
42111: LD_VAR 0 8
42115: PPUSH
42116: CALL_OW 298
42120: ST_TO_ADDR
// if tmp < distance then
42121: LD_VAR 0 9
42125: PUSH
42126: LD_VAR 0 10
42130: LESS
42131: IFFALSE 42153
// begin result := i ;
42133: LD_ADDR_VAR 0 5
42137: PUSH
42138: LD_VAR 0 6
42142: ST_TO_ADDR
// distance := tmp ;
42143: LD_ADDR_VAR 0 10
42147: PUSH
42148: LD_VAR 0 9
42152: ST_TO_ADDR
// end ; end ;
42153: GO 42011
42155: POP
42156: POP
// end ;
42157: LD_VAR 0 5
42161: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42162: LD_INT 0
42164: PPUSH
42165: PPUSH
// if not driver or not IsInUnit ( driver ) then
42166: LD_VAR 0 1
42170: NOT
42171: PUSH
42172: LD_VAR 0 1
42176: PPUSH
42177: CALL_OW 310
42181: NOT
42182: OR
42183: IFFALSE 42187
// exit ;
42185: GO 42277
// vehicle := IsInUnit ( driver ) ;
42187: LD_ADDR_VAR 0 3
42191: PUSH
42192: LD_VAR 0 1
42196: PPUSH
42197: CALL_OW 310
42201: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42202: LD_VAR 0 1
42206: PPUSH
42207: LD_STRING \
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: PUSH
42237: LD_STRING E
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: LD_VAR 0 3
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PPUSH
42273: CALL_OW 446
// end ;
42277: LD_VAR 0 2
42281: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42282: LD_INT 0
42284: PPUSH
42285: PPUSH
// if not driver or not IsInUnit ( driver ) then
42286: LD_VAR 0 1
42290: NOT
42291: PUSH
42292: LD_VAR 0 1
42296: PPUSH
42297: CALL_OW 310
42301: NOT
42302: OR
42303: IFFALSE 42307
// exit ;
42305: GO 42397
// vehicle := IsInUnit ( driver ) ;
42307: LD_ADDR_VAR 0 3
42311: PUSH
42312: LD_VAR 0 1
42316: PPUSH
42317: CALL_OW 310
42321: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42322: LD_VAR 0 1
42326: PPUSH
42327: LD_STRING \
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: PUSH
42357: LD_STRING E
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: LD_VAR 0 3
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PPUSH
42393: CALL_OW 447
// end ;
42397: LD_VAR 0 2
42401: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42402: LD_INT 0
42404: PPUSH
42405: PPUSH
42406: PPUSH
// tmp := [ ] ;
42407: LD_ADDR_VAR 0 5
42411: PUSH
42412: EMPTY
42413: ST_TO_ADDR
// for i in units do
42414: LD_ADDR_VAR 0 4
42418: PUSH
42419: LD_VAR 0 1
42423: PUSH
42424: FOR_IN
42425: IFFALSE 42463
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42427: LD_ADDR_VAR 0 5
42431: PUSH
42432: LD_VAR 0 5
42436: PPUSH
42437: LD_VAR 0 5
42441: PUSH
42442: LD_INT 1
42444: PLUS
42445: PPUSH
42446: LD_VAR 0 4
42450: PPUSH
42451: CALL_OW 256
42455: PPUSH
42456: CALL_OW 2
42460: ST_TO_ADDR
42461: GO 42424
42463: POP
42464: POP
// if not tmp then
42465: LD_VAR 0 5
42469: NOT
42470: IFFALSE 42474
// exit ;
42472: GO 42522
// if asc then
42474: LD_VAR 0 2
42478: IFFALSE 42502
// result := SortListByListAsc ( units , tmp ) else
42480: LD_ADDR_VAR 0 3
42484: PUSH
42485: LD_VAR 0 1
42489: PPUSH
42490: LD_VAR 0 5
42494: PPUSH
42495: CALL_OW 76
42499: ST_TO_ADDR
42500: GO 42522
// result := SortListByListDesc ( units , tmp ) ;
42502: LD_ADDR_VAR 0 3
42506: PUSH
42507: LD_VAR 0 1
42511: PPUSH
42512: LD_VAR 0 5
42516: PPUSH
42517: CALL_OW 77
42521: ST_TO_ADDR
// end ;
42522: LD_VAR 0 3
42526: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42527: LD_INT 0
42529: PPUSH
42530: PPUSH
// task := GetTaskList ( mech ) ;
42531: LD_ADDR_VAR 0 4
42535: PUSH
42536: LD_VAR 0 1
42540: PPUSH
42541: CALL_OW 437
42545: ST_TO_ADDR
// if not task then
42546: LD_VAR 0 4
42550: NOT
42551: IFFALSE 42555
// exit ;
42553: GO 42597
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42555: LD_ADDR_VAR 0 3
42559: PUSH
42560: LD_VAR 0 4
42564: PUSH
42565: LD_INT 1
42567: ARRAY
42568: PUSH
42569: LD_INT 1
42571: ARRAY
42572: PUSH
42573: LD_STRING r
42575: EQUAL
42576: PUSH
42577: LD_VAR 0 4
42581: PUSH
42582: LD_INT 1
42584: ARRAY
42585: PUSH
42586: LD_INT 4
42588: ARRAY
42589: PUSH
42590: LD_VAR 0 2
42594: EQUAL
42595: AND
42596: ST_TO_ADDR
// end ;
42597: LD_VAR 0 3
42601: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42602: LD_INT 0
42604: PPUSH
// SetDir ( unit , d ) ;
42605: LD_VAR 0 1
42609: PPUSH
42610: LD_VAR 0 4
42614: PPUSH
42615: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42619: LD_VAR 0 1
42623: PPUSH
42624: LD_VAR 0 2
42628: PPUSH
42629: LD_VAR 0 3
42633: PPUSH
42634: LD_VAR 0 5
42638: PPUSH
42639: CALL_OW 48
// end ;
42643: LD_VAR 0 6
42647: RET
// export function ToNaturalNumber ( number ) ; begin
42648: LD_INT 0
42650: PPUSH
// result := number div 1 ;
42651: LD_ADDR_VAR 0 2
42655: PUSH
42656: LD_VAR 0 1
42660: PUSH
42661: LD_INT 1
42663: DIV
42664: ST_TO_ADDR
// if number < 0 then
42665: LD_VAR 0 1
42669: PUSH
42670: LD_INT 0
42672: LESS
42673: IFFALSE 42683
// result := 0 ;
42675: LD_ADDR_VAR 0 2
42679: PUSH
42680: LD_INT 0
42682: ST_TO_ADDR
// end ;
42683: LD_VAR 0 2
42687: RET
// export function SortByClass ( units , class ) ; var un ; begin
42688: LD_INT 0
42690: PPUSH
42691: PPUSH
// if not units or not class then
42692: LD_VAR 0 1
42696: NOT
42697: PUSH
42698: LD_VAR 0 2
42702: NOT
42703: OR
42704: IFFALSE 42708
// exit ;
42706: GO 42803
// result := [ ] ;
42708: LD_ADDR_VAR 0 3
42712: PUSH
42713: EMPTY
42714: ST_TO_ADDR
// for un in units do
42715: LD_ADDR_VAR 0 4
42719: PUSH
42720: LD_VAR 0 1
42724: PUSH
42725: FOR_IN
42726: IFFALSE 42801
// if GetClass ( un ) = class then
42728: LD_VAR 0 4
42732: PPUSH
42733: CALL_OW 257
42737: PUSH
42738: LD_VAR 0 2
42742: EQUAL
42743: IFFALSE 42770
// result := Insert ( result , 1 , un ) else
42745: LD_ADDR_VAR 0 3
42749: PUSH
42750: LD_VAR 0 3
42754: PPUSH
42755: LD_INT 1
42757: PPUSH
42758: LD_VAR 0 4
42762: PPUSH
42763: CALL_OW 2
42767: ST_TO_ADDR
42768: GO 42799
// result := Replace ( result , result + 1 , un ) ;
42770: LD_ADDR_VAR 0 3
42774: PUSH
42775: LD_VAR 0 3
42779: PPUSH
42780: LD_VAR 0 3
42784: PUSH
42785: LD_INT 1
42787: PLUS
42788: PPUSH
42789: LD_VAR 0 4
42793: PPUSH
42794: CALL_OW 1
42798: ST_TO_ADDR
42799: GO 42725
42801: POP
42802: POP
// end ;
42803: LD_VAR 0 3
42807: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42808: LD_INT 0
42810: PPUSH
42811: PPUSH
42812: PPUSH
42813: PPUSH
42814: PPUSH
42815: PPUSH
42816: PPUSH
// result := [ ] ;
42817: LD_ADDR_VAR 0 4
42821: PUSH
42822: EMPTY
42823: ST_TO_ADDR
// if x - r < 0 then
42824: LD_VAR 0 1
42828: PUSH
42829: LD_VAR 0 3
42833: MINUS
42834: PUSH
42835: LD_INT 0
42837: LESS
42838: IFFALSE 42850
// min_x := 0 else
42840: LD_ADDR_VAR 0 8
42844: PUSH
42845: LD_INT 0
42847: ST_TO_ADDR
42848: GO 42866
// min_x := x - r ;
42850: LD_ADDR_VAR 0 8
42854: PUSH
42855: LD_VAR 0 1
42859: PUSH
42860: LD_VAR 0 3
42864: MINUS
42865: ST_TO_ADDR
// if y - r < 0 then
42866: LD_VAR 0 2
42870: PUSH
42871: LD_VAR 0 3
42875: MINUS
42876: PUSH
42877: LD_INT 0
42879: LESS
42880: IFFALSE 42892
// min_y := 0 else
42882: LD_ADDR_VAR 0 7
42886: PUSH
42887: LD_INT 0
42889: ST_TO_ADDR
42890: GO 42908
// min_y := y - r ;
42892: LD_ADDR_VAR 0 7
42896: PUSH
42897: LD_VAR 0 2
42901: PUSH
42902: LD_VAR 0 3
42906: MINUS
42907: ST_TO_ADDR
// max_x := x + r ;
42908: LD_ADDR_VAR 0 9
42912: PUSH
42913: LD_VAR 0 1
42917: PUSH
42918: LD_VAR 0 3
42922: PLUS
42923: ST_TO_ADDR
// max_y := y + r ;
42924: LD_ADDR_VAR 0 10
42928: PUSH
42929: LD_VAR 0 2
42933: PUSH
42934: LD_VAR 0 3
42938: PLUS
42939: ST_TO_ADDR
// for _x = min_x to max_x do
42940: LD_ADDR_VAR 0 5
42944: PUSH
42945: DOUBLE
42946: LD_VAR 0 8
42950: DEC
42951: ST_TO_ADDR
42952: LD_VAR 0 9
42956: PUSH
42957: FOR_TO
42958: IFFALSE 43059
// for _y = min_y to max_y do
42960: LD_ADDR_VAR 0 6
42964: PUSH
42965: DOUBLE
42966: LD_VAR 0 7
42970: DEC
42971: ST_TO_ADDR
42972: LD_VAR 0 10
42976: PUSH
42977: FOR_TO
42978: IFFALSE 43055
// begin if not ValidHex ( _x , _y ) then
42980: LD_VAR 0 5
42984: PPUSH
42985: LD_VAR 0 6
42989: PPUSH
42990: CALL_OW 488
42994: NOT
42995: IFFALSE 42999
// continue ;
42997: GO 42977
// if GetResourceTypeXY ( _x , _y ) then
42999: LD_VAR 0 5
43003: PPUSH
43004: LD_VAR 0 6
43008: PPUSH
43009: CALL_OW 283
43013: IFFALSE 43053
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43015: LD_ADDR_VAR 0 4
43019: PUSH
43020: LD_VAR 0 4
43024: PPUSH
43025: LD_VAR 0 4
43029: PUSH
43030: LD_INT 1
43032: PLUS
43033: PPUSH
43034: LD_VAR 0 5
43038: PUSH
43039: LD_VAR 0 6
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PPUSH
43048: CALL_OW 1
43052: ST_TO_ADDR
// end ;
43053: GO 42977
43055: POP
43056: POP
43057: GO 42957
43059: POP
43060: POP
// end ;
43061: LD_VAR 0 4
43065: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43066: LD_INT 0
43068: PPUSH
43069: PPUSH
43070: PPUSH
43071: PPUSH
43072: PPUSH
43073: PPUSH
43074: PPUSH
43075: PPUSH
// if not units then
43076: LD_VAR 0 1
43080: NOT
43081: IFFALSE 43085
// exit ;
43083: GO 43613
// result := UnitFilter ( units , [ f_ok ] ) ;
43085: LD_ADDR_VAR 0 3
43089: PUSH
43090: LD_VAR 0 1
43094: PPUSH
43095: LD_INT 50
43097: PUSH
43098: EMPTY
43099: LIST
43100: PPUSH
43101: CALL_OW 72
43105: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43106: LD_ADDR_VAR 0 8
43110: PUSH
43111: LD_VAR 0 1
43115: PUSH
43116: LD_INT 1
43118: ARRAY
43119: PPUSH
43120: CALL_OW 255
43124: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43125: LD_ADDR_VAR 0 10
43129: PUSH
43130: LD_INT 29
43132: PUSH
43133: LD_INT 91
43135: PUSH
43136: LD_INT 49
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: LIST
43143: ST_TO_ADDR
// if not result then
43144: LD_VAR 0 3
43148: NOT
43149: IFFALSE 43153
// exit ;
43151: GO 43613
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43153: LD_ADDR_VAR 0 5
43157: PUSH
43158: LD_INT 81
43160: PUSH
43161: LD_VAR 0 8
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PPUSH
43170: CALL_OW 69
43174: ST_TO_ADDR
// for i in result do
43175: LD_ADDR_VAR 0 4
43179: PUSH
43180: LD_VAR 0 3
43184: PUSH
43185: FOR_IN
43186: IFFALSE 43611
// begin tag := GetTag ( i ) + 1 ;
43188: LD_ADDR_VAR 0 9
43192: PUSH
43193: LD_VAR 0 4
43197: PPUSH
43198: CALL_OW 110
43202: PUSH
43203: LD_INT 1
43205: PLUS
43206: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43207: LD_ADDR_VAR 0 7
43211: PUSH
43212: LD_VAR 0 4
43216: PPUSH
43217: CALL_OW 250
43221: PPUSH
43222: LD_VAR 0 4
43226: PPUSH
43227: CALL_OW 251
43231: PPUSH
43232: LD_INT 4
43234: PPUSH
43235: CALL 42808 0 3
43239: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43240: LD_VAR 0 4
43244: PPUSH
43245: CALL_OW 247
43249: PUSH
43250: LD_INT 2
43252: EQUAL
43253: PUSH
43254: LD_VAR 0 7
43258: PUSH
43259: LD_INT 2
43261: GREATER
43262: AND
43263: PUSH
43264: LD_VAR 0 4
43268: PPUSH
43269: CALL_OW 264
43273: PUSH
43274: LD_VAR 0 10
43278: IN
43279: NOT
43280: AND
43281: IFFALSE 43320
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43283: LD_VAR 0 4
43287: PPUSH
43288: LD_VAR 0 7
43292: PUSH
43293: LD_INT 1
43295: ARRAY
43296: PUSH
43297: LD_INT 1
43299: ARRAY
43300: PPUSH
43301: LD_VAR 0 7
43305: PUSH
43306: LD_INT 1
43308: ARRAY
43309: PUSH
43310: LD_INT 2
43312: ARRAY
43313: PPUSH
43314: CALL_OW 116
43318: GO 43609
// if path > tag then
43320: LD_VAR 0 2
43324: PUSH
43325: LD_VAR 0 9
43329: GREATER
43330: IFFALSE 43538
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43332: LD_ADDR_VAR 0 6
43336: PUSH
43337: LD_VAR 0 5
43341: PPUSH
43342: LD_INT 91
43344: PUSH
43345: LD_VAR 0 4
43349: PUSH
43350: LD_INT 8
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: LIST
43357: PPUSH
43358: CALL_OW 72
43362: ST_TO_ADDR
// if nearEnemy then
43363: LD_VAR 0 6
43367: IFFALSE 43436
// begin if GetWeapon ( i ) = ru_time_lapser then
43369: LD_VAR 0 4
43373: PPUSH
43374: CALL_OW 264
43378: PUSH
43379: LD_INT 49
43381: EQUAL
43382: IFFALSE 43410
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43384: LD_VAR 0 4
43388: PPUSH
43389: LD_VAR 0 6
43393: PPUSH
43394: LD_VAR 0 4
43398: PPUSH
43399: CALL_OW 74
43403: PPUSH
43404: CALL_OW 112
43408: GO 43434
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43410: LD_VAR 0 4
43414: PPUSH
43415: LD_VAR 0 6
43419: PPUSH
43420: LD_VAR 0 4
43424: PPUSH
43425: CALL_OW 74
43429: PPUSH
43430: CALL 44684 0 2
// end else
43434: GO 43536
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43436: LD_VAR 0 4
43440: PPUSH
43441: LD_VAR 0 2
43445: PUSH
43446: LD_VAR 0 9
43450: ARRAY
43451: PUSH
43452: LD_INT 1
43454: ARRAY
43455: PPUSH
43456: LD_VAR 0 2
43460: PUSH
43461: LD_VAR 0 9
43465: ARRAY
43466: PUSH
43467: LD_INT 2
43469: ARRAY
43470: PPUSH
43471: CALL_OW 297
43475: PUSH
43476: LD_INT 6
43478: GREATER
43479: IFFALSE 43522
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43481: LD_VAR 0 4
43485: PPUSH
43486: LD_VAR 0 2
43490: PUSH
43491: LD_VAR 0 9
43495: ARRAY
43496: PUSH
43497: LD_INT 1
43499: ARRAY
43500: PPUSH
43501: LD_VAR 0 2
43505: PUSH
43506: LD_VAR 0 9
43510: ARRAY
43511: PUSH
43512: LD_INT 2
43514: ARRAY
43515: PPUSH
43516: CALL_OW 114
43520: GO 43536
// SetTag ( i , tag ) ;
43522: LD_VAR 0 4
43526: PPUSH
43527: LD_VAR 0 9
43531: PPUSH
43532: CALL_OW 109
// end else
43536: GO 43609
// if enemy then
43538: LD_VAR 0 5
43542: IFFALSE 43609
// begin if GetWeapon ( i ) = ru_time_lapser then
43544: LD_VAR 0 4
43548: PPUSH
43549: CALL_OW 264
43553: PUSH
43554: LD_INT 49
43556: EQUAL
43557: IFFALSE 43585
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43559: LD_VAR 0 4
43563: PPUSH
43564: LD_VAR 0 5
43568: PPUSH
43569: LD_VAR 0 4
43573: PPUSH
43574: CALL_OW 74
43578: PPUSH
43579: CALL_OW 112
43583: GO 43609
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43585: LD_VAR 0 4
43589: PPUSH
43590: LD_VAR 0 5
43594: PPUSH
43595: LD_VAR 0 4
43599: PPUSH
43600: CALL_OW 74
43604: PPUSH
43605: CALL 44684 0 2
// end ; end ;
43609: GO 43185
43611: POP
43612: POP
// end ;
43613: LD_VAR 0 3
43617: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43618: LD_INT 0
43620: PPUSH
43621: PPUSH
43622: PPUSH
// if not unit or IsInUnit ( unit ) then
43623: LD_VAR 0 1
43627: NOT
43628: PUSH
43629: LD_VAR 0 1
43633: PPUSH
43634: CALL_OW 310
43638: OR
43639: IFFALSE 43643
// exit ;
43641: GO 43734
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43643: LD_ADDR_VAR 0 4
43647: PUSH
43648: LD_VAR 0 1
43652: PPUSH
43653: CALL_OW 250
43657: PPUSH
43658: LD_VAR 0 2
43662: PPUSH
43663: LD_INT 1
43665: PPUSH
43666: CALL_OW 272
43670: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43671: LD_ADDR_VAR 0 5
43675: PUSH
43676: LD_VAR 0 1
43680: PPUSH
43681: CALL_OW 251
43685: PPUSH
43686: LD_VAR 0 2
43690: PPUSH
43691: LD_INT 1
43693: PPUSH
43694: CALL_OW 273
43698: ST_TO_ADDR
// if ValidHex ( x , y ) then
43699: LD_VAR 0 4
43703: PPUSH
43704: LD_VAR 0 5
43708: PPUSH
43709: CALL_OW 488
43713: IFFALSE 43734
// ComTurnXY ( unit , x , y ) ;
43715: LD_VAR 0 1
43719: PPUSH
43720: LD_VAR 0 4
43724: PPUSH
43725: LD_VAR 0 5
43729: PPUSH
43730: CALL_OW 118
// end ;
43734: LD_VAR 0 3
43738: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43739: LD_INT 0
43741: PPUSH
43742: PPUSH
// result := false ;
43743: LD_ADDR_VAR 0 3
43747: PUSH
43748: LD_INT 0
43750: ST_TO_ADDR
// if not units then
43751: LD_VAR 0 2
43755: NOT
43756: IFFALSE 43760
// exit ;
43758: GO 43805
// for i in units do
43760: LD_ADDR_VAR 0 4
43764: PUSH
43765: LD_VAR 0 2
43769: PUSH
43770: FOR_IN
43771: IFFALSE 43803
// if See ( side , i ) then
43773: LD_VAR 0 1
43777: PPUSH
43778: LD_VAR 0 4
43782: PPUSH
43783: CALL_OW 292
43787: IFFALSE 43801
// begin result := true ;
43789: LD_ADDR_VAR 0 3
43793: PUSH
43794: LD_INT 1
43796: ST_TO_ADDR
// exit ;
43797: POP
43798: POP
43799: GO 43805
// end ;
43801: GO 43770
43803: POP
43804: POP
// end ;
43805: LD_VAR 0 3
43809: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43810: LD_INT 0
43812: PPUSH
43813: PPUSH
43814: PPUSH
43815: PPUSH
// if not unit or not points then
43816: LD_VAR 0 1
43820: NOT
43821: PUSH
43822: LD_VAR 0 2
43826: NOT
43827: OR
43828: IFFALSE 43832
// exit ;
43830: GO 43922
// dist := 99999 ;
43832: LD_ADDR_VAR 0 5
43836: PUSH
43837: LD_INT 99999
43839: ST_TO_ADDR
// for i in points do
43840: LD_ADDR_VAR 0 4
43844: PUSH
43845: LD_VAR 0 2
43849: PUSH
43850: FOR_IN
43851: IFFALSE 43920
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43853: LD_ADDR_VAR 0 6
43857: PUSH
43858: LD_VAR 0 1
43862: PPUSH
43863: LD_VAR 0 4
43867: PUSH
43868: LD_INT 1
43870: ARRAY
43871: PPUSH
43872: LD_VAR 0 4
43876: PUSH
43877: LD_INT 2
43879: ARRAY
43880: PPUSH
43881: CALL_OW 297
43885: ST_TO_ADDR
// if tmpDist < dist then
43886: LD_VAR 0 6
43890: PUSH
43891: LD_VAR 0 5
43895: LESS
43896: IFFALSE 43918
// begin result := i ;
43898: LD_ADDR_VAR 0 3
43902: PUSH
43903: LD_VAR 0 4
43907: ST_TO_ADDR
// dist := tmpDist ;
43908: LD_ADDR_VAR 0 5
43912: PUSH
43913: LD_VAR 0 6
43917: ST_TO_ADDR
// end ; end ;
43918: GO 43850
43920: POP
43921: POP
// end ;
43922: LD_VAR 0 3
43926: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43927: LD_INT 0
43929: PPUSH
// uc_side := side ;
43930: LD_ADDR_OWVAR 20
43934: PUSH
43935: LD_VAR 0 1
43939: ST_TO_ADDR
// uc_nation := 3 ;
43940: LD_ADDR_OWVAR 21
43944: PUSH
43945: LD_INT 3
43947: ST_TO_ADDR
// vc_chassis := 25 ;
43948: LD_ADDR_OWVAR 37
43952: PUSH
43953: LD_INT 25
43955: ST_TO_ADDR
// vc_engine := engine_siberite ;
43956: LD_ADDR_OWVAR 39
43960: PUSH
43961: LD_INT 3
43963: ST_TO_ADDR
// vc_control := control_computer ;
43964: LD_ADDR_OWVAR 38
43968: PUSH
43969: LD_INT 3
43971: ST_TO_ADDR
// vc_weapon := 59 ;
43972: LD_ADDR_OWVAR 40
43976: PUSH
43977: LD_INT 59
43979: ST_TO_ADDR
// result := CreateVehicle ;
43980: LD_ADDR_VAR 0 5
43984: PUSH
43985: CALL_OW 45
43989: ST_TO_ADDR
// SetDir ( result , d ) ;
43990: LD_VAR 0 5
43994: PPUSH
43995: LD_VAR 0 4
43999: PPUSH
44000: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44004: LD_VAR 0 5
44008: PPUSH
44009: LD_VAR 0 2
44013: PPUSH
44014: LD_VAR 0 3
44018: PPUSH
44019: LD_INT 0
44021: PPUSH
44022: CALL_OW 48
// end ;
44026: LD_VAR 0 5
44030: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44031: LD_INT 0
44033: PPUSH
44034: PPUSH
44035: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44036: LD_ADDR_VAR 0 2
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44059: LD_VAR 0 1
44063: NOT
44064: PUSH
44065: LD_VAR 0 1
44069: PPUSH
44070: CALL_OW 264
44074: PUSH
44075: LD_INT 12
44077: PUSH
44078: LD_INT 51
44080: PUSH
44081: LD_INT 32
44083: PUSH
44084: LD_INT 89
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: IN
44093: NOT
44094: OR
44095: IFFALSE 44099
// exit ;
44097: GO 44197
// for i := 1 to 3 do
44099: LD_ADDR_VAR 0 3
44103: PUSH
44104: DOUBLE
44105: LD_INT 1
44107: DEC
44108: ST_TO_ADDR
44109: LD_INT 3
44111: PUSH
44112: FOR_TO
44113: IFFALSE 44195
// begin tmp := GetCargo ( cargo , i ) ;
44115: LD_ADDR_VAR 0 4
44119: PUSH
44120: LD_VAR 0 1
44124: PPUSH
44125: LD_VAR 0 3
44129: PPUSH
44130: CALL_OW 289
44134: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44135: LD_ADDR_VAR 0 2
44139: PUSH
44140: LD_VAR 0 2
44144: PPUSH
44145: LD_VAR 0 3
44149: PPUSH
44150: LD_VAR 0 4
44154: PPUSH
44155: CALL_OW 1
44159: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44160: LD_ADDR_VAR 0 2
44164: PUSH
44165: LD_VAR 0 2
44169: PPUSH
44170: LD_INT 4
44172: PPUSH
44173: LD_VAR 0 2
44177: PUSH
44178: LD_INT 4
44180: ARRAY
44181: PUSH
44182: LD_VAR 0 4
44186: PLUS
44187: PPUSH
44188: CALL_OW 1
44192: ST_TO_ADDR
// end ;
44193: GO 44112
44195: POP
44196: POP
// end ;
44197: LD_VAR 0 2
44201: RET
// export function Length ( array ) ; begin
44202: LD_INT 0
44204: PPUSH
// result := array + 0 ;
44205: LD_ADDR_VAR 0 2
44209: PUSH
44210: LD_VAR 0 1
44214: PUSH
44215: LD_INT 0
44217: PLUS
44218: ST_TO_ADDR
// end ;
44219: LD_VAR 0 2
44223: RET
// export function PrepareArray ( array ) ; begin
44224: LD_INT 0
44226: PPUSH
// result := array diff 0 ;
44227: LD_ADDR_VAR 0 2
44231: PUSH
44232: LD_VAR 0 1
44236: PUSH
44237: LD_INT 0
44239: DIFF
44240: ST_TO_ADDR
// if not result [ 1 ] then
44241: LD_VAR 0 2
44245: PUSH
44246: LD_INT 1
44248: ARRAY
44249: NOT
44250: IFFALSE 44270
// result := Delete ( result , 1 ) ;
44252: LD_ADDR_VAR 0 2
44256: PUSH
44257: LD_VAR 0 2
44261: PPUSH
44262: LD_INT 1
44264: PPUSH
44265: CALL_OW 3
44269: ST_TO_ADDR
// end ;
44270: LD_VAR 0 2
44274: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44275: LD_INT 0
44277: PPUSH
44278: PPUSH
44279: PPUSH
44280: PPUSH
// sibRocketRange := 25 ;
44281: LD_ADDR_VAR 0 6
44285: PUSH
44286: LD_INT 25
44288: ST_TO_ADDR
// result := false ;
44289: LD_ADDR_VAR 0 4
44293: PUSH
44294: LD_INT 0
44296: ST_TO_ADDR
// for i := 0 to 5 do
44297: LD_ADDR_VAR 0 5
44301: PUSH
44302: DOUBLE
44303: LD_INT 0
44305: DEC
44306: ST_TO_ADDR
44307: LD_INT 5
44309: PUSH
44310: FOR_TO
44311: IFFALSE 44378
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44313: LD_VAR 0 1
44317: PPUSH
44318: LD_VAR 0 5
44322: PPUSH
44323: LD_VAR 0 6
44327: PPUSH
44328: CALL_OW 272
44332: PPUSH
44333: LD_VAR 0 2
44337: PPUSH
44338: LD_VAR 0 5
44342: PPUSH
44343: LD_VAR 0 6
44347: PPUSH
44348: CALL_OW 273
44352: PPUSH
44353: LD_VAR 0 3
44357: PPUSH
44358: CALL_OW 309
44362: IFFALSE 44376
// begin result := true ;
44364: LD_ADDR_VAR 0 4
44368: PUSH
44369: LD_INT 1
44371: ST_TO_ADDR
// exit ;
44372: POP
44373: POP
44374: GO 44380
// end ;
44376: GO 44310
44378: POP
44379: POP
// end ;
44380: LD_VAR 0 4
44384: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44385: LD_INT 0
44387: PPUSH
44388: PPUSH
44389: PPUSH
// if btype = b_depot then
44390: LD_VAR 0 2
44394: PUSH
44395: LD_INT 0
44397: EQUAL
44398: IFFALSE 44410
// begin result := true ;
44400: LD_ADDR_VAR 0 3
44404: PUSH
44405: LD_INT 1
44407: ST_TO_ADDR
// exit ;
44408: GO 44526
// end ; pom := GetBase ( depot ) ;
44410: LD_ADDR_VAR 0 4
44414: PUSH
44415: LD_VAR 0 1
44419: PPUSH
44420: CALL_OW 274
44424: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44425: LD_ADDR_VAR 0 5
44429: PUSH
44430: LD_VAR 0 2
44434: PPUSH
44435: LD_VAR 0 1
44439: PPUSH
44440: CALL_OW 248
44444: PPUSH
44445: CALL_OW 450
44449: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44450: LD_ADDR_VAR 0 3
44454: PUSH
44455: LD_VAR 0 4
44459: PPUSH
44460: LD_INT 1
44462: PPUSH
44463: CALL_OW 275
44467: PUSH
44468: LD_VAR 0 5
44472: PUSH
44473: LD_INT 1
44475: ARRAY
44476: GREATEREQUAL
44477: PUSH
44478: LD_VAR 0 4
44482: PPUSH
44483: LD_INT 2
44485: PPUSH
44486: CALL_OW 275
44490: PUSH
44491: LD_VAR 0 5
44495: PUSH
44496: LD_INT 2
44498: ARRAY
44499: GREATEREQUAL
44500: AND
44501: PUSH
44502: LD_VAR 0 4
44506: PPUSH
44507: LD_INT 3
44509: PPUSH
44510: CALL_OW 275
44514: PUSH
44515: LD_VAR 0 5
44519: PUSH
44520: LD_INT 3
44522: ARRAY
44523: GREATEREQUAL
44524: AND
44525: ST_TO_ADDR
// end ;
44526: LD_VAR 0 3
44530: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44531: LD_INT 0
44533: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44534: LD_VAR 0 1
44538: PPUSH
44539: LD_VAR 0 2
44543: PPUSH
44544: LD_INT 0
44546: PPUSH
44547: LD_INT 0
44549: PPUSH
44550: LD_INT 1
44552: PPUSH
44553: LD_INT 0
44555: PPUSH
44556: CALL_OW 587
// end ;
44560: LD_VAR 0 3
44564: RET
// export function CenterOnNow ( unit ) ; begin
44565: LD_INT 0
44567: PPUSH
// result := IsInUnit ( unit ) ;
44568: LD_ADDR_VAR 0 2
44572: PUSH
44573: LD_VAR 0 1
44577: PPUSH
44578: CALL_OW 310
44582: ST_TO_ADDR
// if not result then
44583: LD_VAR 0 2
44587: NOT
44588: IFFALSE 44600
// result := unit ;
44590: LD_ADDR_VAR 0 2
44594: PUSH
44595: LD_VAR 0 1
44599: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44600: LD_VAR 0 1
44604: PPUSH
44605: CALL_OW 87
// end ;
44609: LD_VAR 0 2
44613: RET
// export function ComMoveHex ( unit , hex ) ; begin
44614: LD_INT 0
44616: PPUSH
// if not hex then
44617: LD_VAR 0 2
44621: NOT
44622: IFFALSE 44626
// exit ;
44624: GO 44679
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44626: LD_VAR 0 2
44630: PUSH
44631: LD_INT 1
44633: ARRAY
44634: PPUSH
44635: LD_VAR 0 2
44639: PUSH
44640: LD_INT 2
44642: ARRAY
44643: PPUSH
44644: CALL_OW 428
44648: IFFALSE 44652
// exit ;
44650: GO 44679
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44652: LD_VAR 0 1
44656: PPUSH
44657: LD_VAR 0 2
44661: PUSH
44662: LD_INT 1
44664: ARRAY
44665: PPUSH
44666: LD_VAR 0 2
44670: PUSH
44671: LD_INT 2
44673: ARRAY
44674: PPUSH
44675: CALL_OW 111
// end ;
44679: LD_VAR 0 3
44683: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44684: LD_INT 0
44686: PPUSH
44687: PPUSH
44688: PPUSH
// if not unit or not enemy then
44689: LD_VAR 0 1
44693: NOT
44694: PUSH
44695: LD_VAR 0 2
44699: NOT
44700: OR
44701: IFFALSE 44705
// exit ;
44703: GO 44829
// x := GetX ( enemy ) ;
44705: LD_ADDR_VAR 0 4
44709: PUSH
44710: LD_VAR 0 2
44714: PPUSH
44715: CALL_OW 250
44719: ST_TO_ADDR
// y := GetY ( enemy ) ;
44720: LD_ADDR_VAR 0 5
44724: PUSH
44725: LD_VAR 0 2
44729: PPUSH
44730: CALL_OW 251
44734: ST_TO_ADDR
// if ValidHex ( x , y ) then
44735: LD_VAR 0 4
44739: PPUSH
44740: LD_VAR 0 5
44744: PPUSH
44745: CALL_OW 488
44749: IFFALSE 44829
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44751: LD_VAR 0 2
44755: PPUSH
44756: CALL_OW 247
44760: PUSH
44761: LD_INT 3
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: IN
44771: PUSH
44772: LD_VAR 0 1
44776: PPUSH
44777: CALL_OW 255
44781: PPUSH
44782: LD_VAR 0 2
44786: PPUSH
44787: CALL_OW 292
44791: OR
44792: IFFALSE 44810
// ComAttackUnit ( unit , enemy ) else
44794: LD_VAR 0 1
44798: PPUSH
44799: LD_VAR 0 2
44803: PPUSH
44804: CALL_OW 115
44808: GO 44829
// ComAgressiveMove ( unit , x , y ) ;
44810: LD_VAR 0 1
44814: PPUSH
44815: LD_VAR 0 4
44819: PPUSH
44820: LD_VAR 0 5
44824: PPUSH
44825: CALL_OW 114
// end ;
44829: LD_VAR 0 3
44833: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44834: LD_INT 0
44836: PPUSH
44837: PPUSH
44838: PPUSH
// list := AreaToList ( area , 0 ) ;
44839: LD_ADDR_VAR 0 5
44843: PUSH
44844: LD_VAR 0 1
44848: PPUSH
44849: LD_INT 0
44851: PPUSH
44852: CALL_OW 517
44856: ST_TO_ADDR
// if not list then
44857: LD_VAR 0 5
44861: NOT
44862: IFFALSE 44866
// exit ;
44864: GO 44996
// if all then
44866: LD_VAR 0 2
44870: IFFALSE 44958
// begin for i := 1 to list [ 1 ] do
44872: LD_ADDR_VAR 0 4
44876: PUSH
44877: DOUBLE
44878: LD_INT 1
44880: DEC
44881: ST_TO_ADDR
44882: LD_VAR 0 5
44886: PUSH
44887: LD_INT 1
44889: ARRAY
44890: PUSH
44891: FOR_TO
44892: IFFALSE 44954
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44894: LD_ADDR_VAR 0 3
44898: PUSH
44899: LD_VAR 0 3
44903: PPUSH
44904: LD_VAR 0 3
44908: PUSH
44909: LD_INT 1
44911: PLUS
44912: PPUSH
44913: LD_VAR 0 5
44917: PUSH
44918: LD_INT 1
44920: ARRAY
44921: PUSH
44922: LD_VAR 0 4
44926: ARRAY
44927: PUSH
44928: LD_VAR 0 5
44932: PUSH
44933: LD_INT 2
44935: ARRAY
44936: PUSH
44937: LD_VAR 0 4
44941: ARRAY
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PPUSH
44947: CALL_OW 1
44951: ST_TO_ADDR
44952: GO 44891
44954: POP
44955: POP
// exit ;
44956: GO 44996
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44958: LD_ADDR_VAR 0 3
44962: PUSH
44963: LD_VAR 0 5
44967: PUSH
44968: LD_INT 1
44970: ARRAY
44971: PUSH
44972: LD_INT 1
44974: ARRAY
44975: PUSH
44976: LD_VAR 0 5
44980: PUSH
44981: LD_INT 2
44983: ARRAY
44984: PUSH
44985: LD_INT 1
44987: ARRAY
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: EMPTY
44994: LIST
44995: ST_TO_ADDR
// end ;
44996: LD_VAR 0 3
45000: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45001: LD_INT 0
45003: PPUSH
45004: PPUSH
// list := AreaToList ( area , 0 ) ;
45005: LD_ADDR_VAR 0 4
45009: PUSH
45010: LD_VAR 0 1
45014: PPUSH
45015: LD_INT 0
45017: PPUSH
45018: CALL_OW 517
45022: ST_TO_ADDR
// if not list then
45023: LD_VAR 0 4
45027: NOT
45028: IFFALSE 45032
// exit ;
45030: GO 45073
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45032: LD_ADDR_VAR 0 3
45036: PUSH
45037: LD_VAR 0 4
45041: PUSH
45042: LD_INT 1
45044: ARRAY
45045: PUSH
45046: LD_INT 1
45048: ARRAY
45049: PUSH
45050: LD_VAR 0 4
45054: PUSH
45055: LD_INT 2
45057: ARRAY
45058: PUSH
45059: LD_INT 1
45061: ARRAY
45062: PUSH
45063: LD_VAR 0 2
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: LIST
45072: ST_TO_ADDR
// end ;
45073: LD_VAR 0 3
45077: RET
// export function First ( array ) ; begin
45078: LD_INT 0
45080: PPUSH
// if not array then
45081: LD_VAR 0 1
45085: NOT
45086: IFFALSE 45090
// exit ;
45088: GO 45104
// result := array [ 1 ] ;
45090: LD_ADDR_VAR 0 2
45094: PUSH
45095: LD_VAR 0 1
45099: PUSH
45100: LD_INT 1
45102: ARRAY
45103: ST_TO_ADDR
// end ;
45104: LD_VAR 0 2
45108: RET
// export function Last ( array ) ; begin
45109: LD_INT 0
45111: PPUSH
// if not array then
45112: LD_VAR 0 1
45116: NOT
45117: IFFALSE 45121
// exit ;
45119: GO 45137
// result := array [ array ] ;
45121: LD_ADDR_VAR 0 2
45125: PUSH
45126: LD_VAR 0 1
45130: PUSH
45131: LD_VAR 0 1
45135: ARRAY
45136: ST_TO_ADDR
// end ;
45137: LD_VAR 0 2
45141: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45142: LD_INT 0
45144: PPUSH
45145: PPUSH
// result := [ ] ;
45146: LD_ADDR_VAR 0 5
45150: PUSH
45151: EMPTY
45152: ST_TO_ADDR
// if not array then
45153: LD_VAR 0 1
45157: NOT
45158: IFFALSE 45162
// exit ;
45160: GO 45274
// for i := 1 to array do
45162: LD_ADDR_VAR 0 6
45166: PUSH
45167: DOUBLE
45168: LD_INT 1
45170: DEC
45171: ST_TO_ADDR
45172: LD_VAR 0 1
45176: PUSH
45177: FOR_TO
45178: IFFALSE 45272
// if array [ i ] [ index ] = value then
45180: LD_VAR 0 1
45184: PUSH
45185: LD_VAR 0 6
45189: ARRAY
45190: PUSH
45191: LD_VAR 0 2
45195: ARRAY
45196: PUSH
45197: LD_VAR 0 3
45201: EQUAL
45202: IFFALSE 45270
// begin if indexColumn then
45204: LD_VAR 0 4
45208: IFFALSE 45244
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45210: LD_ADDR_VAR 0 5
45214: PUSH
45215: LD_VAR 0 5
45219: PPUSH
45220: LD_VAR 0 1
45224: PUSH
45225: LD_VAR 0 6
45229: ARRAY
45230: PUSH
45231: LD_VAR 0 4
45235: ARRAY
45236: PPUSH
45237: CALL 40462 0 2
45241: ST_TO_ADDR
45242: GO 45270
// result := Join ( result , array [ i ] ) ;
45244: LD_ADDR_VAR 0 5
45248: PUSH
45249: LD_VAR 0 5
45253: PPUSH
45254: LD_VAR 0 1
45258: PUSH
45259: LD_VAR 0 6
45263: ARRAY
45264: PPUSH
45265: CALL 40462 0 2
45269: ST_TO_ADDR
// end ;
45270: GO 45177
45272: POP
45273: POP
// end ;
45274: LD_VAR 0 5
45278: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45279: LD_INT 0
45281: PPUSH
// if not vehicles or not parkingPoint then
45282: LD_VAR 0 1
45286: NOT
45287: PUSH
45288: LD_VAR 0 2
45292: NOT
45293: OR
45294: IFFALSE 45298
// exit ;
45296: GO 45396
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45298: LD_ADDR_VAR 0 1
45302: PUSH
45303: LD_VAR 0 1
45307: PPUSH
45308: LD_INT 50
45310: PUSH
45311: EMPTY
45312: LIST
45313: PUSH
45314: LD_INT 3
45316: PUSH
45317: LD_INT 92
45319: PUSH
45320: LD_VAR 0 2
45324: PUSH
45325: LD_INT 1
45327: ARRAY
45328: PUSH
45329: LD_VAR 0 2
45333: PUSH
45334: LD_INT 2
45336: ARRAY
45337: PUSH
45338: LD_INT 8
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PPUSH
45355: CALL_OW 72
45359: ST_TO_ADDR
// if not vehicles then
45360: LD_VAR 0 1
45364: NOT
45365: IFFALSE 45369
// exit ;
45367: GO 45396
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45369: LD_VAR 0 1
45373: PPUSH
45374: LD_VAR 0 2
45378: PUSH
45379: LD_INT 1
45381: ARRAY
45382: PPUSH
45383: LD_VAR 0 2
45387: PUSH
45388: LD_INT 2
45390: ARRAY
45391: PPUSH
45392: CALL_OW 111
// end ;
45396: LD_VAR 0 3
45400: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45401: LD_INT 0
45403: PPUSH
45404: PPUSH
45405: PPUSH
// if not side or not area then
45406: LD_VAR 0 1
45410: NOT
45411: PUSH
45412: LD_VAR 0 2
45416: NOT
45417: OR
45418: IFFALSE 45422
// exit ;
45420: GO 45541
// tmp := AreaToList ( area , 0 ) ;
45422: LD_ADDR_VAR 0 5
45426: PUSH
45427: LD_VAR 0 2
45431: PPUSH
45432: LD_INT 0
45434: PPUSH
45435: CALL_OW 517
45439: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45440: LD_ADDR_VAR 0 4
45444: PUSH
45445: DOUBLE
45446: LD_INT 1
45448: DEC
45449: ST_TO_ADDR
45450: LD_VAR 0 5
45454: PUSH
45455: LD_INT 1
45457: ARRAY
45458: PUSH
45459: FOR_TO
45460: IFFALSE 45539
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45462: LD_VAR 0 5
45466: PUSH
45467: LD_INT 1
45469: ARRAY
45470: PUSH
45471: LD_VAR 0 4
45475: ARRAY
45476: PPUSH
45477: LD_VAR 0 5
45481: PUSH
45482: LD_INT 2
45484: ARRAY
45485: PUSH
45486: LD_VAR 0 4
45490: ARRAY
45491: PPUSH
45492: CALL_OW 351
45496: IFFALSE 45537
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45498: LD_VAR 0 5
45502: PUSH
45503: LD_INT 1
45505: ARRAY
45506: PUSH
45507: LD_VAR 0 4
45511: ARRAY
45512: PPUSH
45513: LD_VAR 0 5
45517: PUSH
45518: LD_INT 2
45520: ARRAY
45521: PUSH
45522: LD_VAR 0 4
45526: ARRAY
45527: PPUSH
45528: LD_VAR 0 1
45532: PPUSH
45533: CALL_OW 244
// end ;
45537: GO 45459
45539: POP
45540: POP
// end ; end_of_file
45541: LD_VAR 0 3
45545: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull ; export function InitMultiplayer ; var i ; begin
45546: LD_INT 0
45548: PPUSH
45549: PPUSH
// disable ( mpActive ) ;
45550: LD_INT 100
45552: DISABLE_MARKED
// disable ( mpWin ) ;
45553: LD_INT 101
45555: DISABLE_MARKED
// disable ( mpLose ) ;
45556: LD_INT 102
45558: DISABLE_MARKED
// mpGameType := 0 ;
45559: LD_ADDR_EXP 1
45563: PUSH
45564: LD_INT 0
45566: ST_TO_ADDR
// mpGameSettings := [ ] ;
45567: LD_ADDR_EXP 4
45571: PUSH
45572: EMPTY
45573: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45574: LD_ADDR_EXP 2
45578: PUSH
45579: EMPTY
45580: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45581: LD_ADDR_EXP 3
45585: PUSH
45586: EMPTY
45587: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45588: LD_ADDR_EXP 27
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: LD_INT 2
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45603: LD_ADDR_EXP 10
45607: PUSH
45608: EMPTY
45609: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45610: LD_ADDR_EXP 11
45614: PUSH
45615: EMPTY
45616: ST_TO_ADDR
// mpDepots := [ ] ;
45617: LD_ADDR_EXP 12
45621: PUSH
45622: EMPTY
45623: ST_TO_ADDR
// mpBuildings := [ ] ;
45624: LD_ADDR_EXP 15
45628: PUSH
45629: EMPTY
45630: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45631: LD_ADDR_EXP 16
45635: PUSH
45636: EMPTY
45637: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45638: LD_ADDR_EXP 17
45642: PUSH
45643: EMPTY
45644: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45645: LD_ADDR_EXP 18
45649: PUSH
45650: EMPTY
45651: ST_TO_ADDR
// mpStartingResources := [ ] ;
45652: LD_ADDR_EXP 13
45656: PUSH
45657: EMPTY
45658: ST_TO_ADDR
// mpStartPos := [ ] ;
45659: LD_ADDR_EXP 19
45663: PUSH
45664: EMPTY
45665: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45666: LD_ADDR_EXP 20
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45675: LD_ADDR_EXP 21
45679: PUSH
45680: EMPTY
45681: ST_TO_ADDR
// mpApemans := [ ] ;
45682: LD_ADDR_EXP 28
45686: PUSH
45687: EMPTY
45688: ST_TO_ADDR
// mpApemansArea := [ ] ;
45689: LD_ADDR_EXP 29
45693: PUSH
45694: EMPTY
45695: ST_TO_ADDR
// mpRespawn := [ ] ;
45696: LD_ADDR_EXP 30
45700: PUSH
45701: EMPTY
45702: ST_TO_ADDR
// mpKingArea := 0 ;
45703: LD_ADDR_EXP 31
45707: PUSH
45708: LD_INT 0
45710: ST_TO_ADDR
// mpPoints := [ ] ;
45711: LD_ADDR_EXP 32
45715: PUSH
45716: EMPTY
45717: ST_TO_ADDR
// mpVehicles := 0 ;
45718: LD_ADDR_EXP 33
45722: PUSH
45723: LD_INT 0
45725: ST_TO_ADDR
// mpShipments := 0 ;
45726: LD_ADDR_EXP 25
45730: PUSH
45731: LD_INT 0
45733: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45734: LD_ADDR_EXP 37
45738: PUSH
45739: EMPTY
45740: PUSH
45741: EMPTY
45742: PUSH
45743: EMPTY
45744: PUSH
45745: EMPTY
45746: PUSH
45747: EMPTY
45748: PUSH
45749: EMPTY
45750: PUSH
45751: EMPTY
45752: PUSH
45753: EMPTY
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: ST_TO_ADDR
// mpEmissions := 0 ;
45765: LD_ADDR_EXP 34
45769: PUSH
45770: LD_INT 0
45772: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45773: LD_ADDR_EXP 23
45777: PUSH
45778: LD_INT 3
45780: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45781: LD_ADDR_EXP 22
45785: PUSH
45786: LD_INT 15
45788: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45789: LD_ADDR_EXP 35
45793: PUSH
45794: LD_INT 0
45796: ST_TO_ADDR
// mpGameActive := false ;
45797: LD_ADDR_EXP 36
45801: PUSH
45802: LD_INT 0
45804: ST_TO_ADDR
// for i := 1 to 32 do
45805: LD_ADDR_VAR 0 2
45809: PUSH
45810: DOUBLE
45811: LD_INT 1
45813: DEC
45814: ST_TO_ADDR
45815: LD_INT 32
45817: PUSH
45818: FOR_TO
45819: IFFALSE 45846
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
45821: LD_ADDR_EXP 4
45825: PUSH
45826: LD_EXP 4
45830: PPUSH
45831: LD_VAR 0 2
45835: PPUSH
45836: LD_INT 0
45838: PPUSH
45839: CALL_OW 1
45843: ST_TO_ADDR
45844: GO 45818
45846: POP
45847: POP
// end ;
45848: LD_VAR 0 1
45852: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
45853: LD_INT 0
45855: PPUSH
45856: PPUSH
45857: PPUSH
45858: PPUSH
45859: PPUSH
45860: PPUSH
45861: PPUSH
45862: PPUSH
45863: PPUSH
45864: PPUSH
45865: PPUSH
45866: PPUSH
45867: PPUSH
45868: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
45869: LD_ADDR_VAR 0 14
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: LD_INT 3
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: LIST
45887: ST_TO_ADDR
// for i in gameTypes do
45888: LD_ADDR_VAR 0 2
45892: PUSH
45893: LD_VAR 0 14
45897: PUSH
45898: FOR_IN
45899: IFFALSE 45908
// disable ( i ) ;
45901: LD_VAR 0 2
45905: DISABLE_MARKED
45906: GO 45898
45908: POP
45909: POP
// if Multiplayer then
45910: LD_OWVAR 4
45914: IFFALSE 46098
// begin mpGameType := mp_game_type ;
45916: LD_ADDR_EXP 1
45920: PUSH
45921: LD_OWVAR 6
45925: ST_TO_ADDR
// your_side := mp_player_side ;
45926: LD_ADDR_OWVAR 2
45930: PUSH
45931: LD_OWVAR 7
45935: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
45936: LD_ADDR_EXP 5
45940: PUSH
45941: LD_OWVAR 17
45945: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
45946: LD_ADDR_EXP 6
45950: PUSH
45951: LD_OWVAR 15
45955: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
45956: LD_ADDR_EXP 7
45960: PUSH
45961: LD_OWVAR 16
45965: ST_TO_ADDR
// mpTeams := mp_teams ;
45966: LD_ADDR_EXP 8
45970: PUSH
45971: LD_OWVAR 12
45975: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
45976: LD_ADDR_VAR 0 2
45980: PUSH
45981: DOUBLE
45982: LD_INT 1
45984: DEC
45985: ST_TO_ADDR
45986: LD_EXP 2
45990: PPUSH
45991: CALL 4873 0 1
45995: PUSH
45996: FOR_TO
45997: IFFALSE 46073
// begin setting := mpGameSettingsKeys [ i ] ;
45999: LD_ADDR_VAR 0 12
46003: PUSH
46004: LD_EXP 2
46008: PUSH
46009: LD_VAR 0 2
46013: ARRAY
46014: ST_TO_ADDR
// if setting then
46015: LD_VAR 0 12
46019: IFFALSE 46071
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46021: LD_ADDR_EXP 4
46025: PUSH
46026: LD_EXP 4
46030: PPUSH
46031: LD_VAR 0 2
46035: PPUSH
46036: LD_EXP 3
46040: PUSH
46041: LD_VAR 0 2
46045: ARRAY
46046: PUSH
46047: LD_VAR 0 2
46051: PUSH
46052: LD_INT 1
46054: MINUS
46055: PPUSH
46056: CALL_OW 426
46060: PUSH
46061: LD_INT 1
46063: PLUS
46064: ARRAY
46065: PPUSH
46066: CALL_OW 1
46070: ST_TO_ADDR
// end ;
46071: GO 45996
46073: POP
46074: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46075: LD_ADDR_EXP 9
46079: PUSH
46080: LD_EXP 6
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: EMPTY
46089: LIST
46090: DIFF
46091: PUSH
46092: LD_INT 1
46094: GREATER
46095: ST_TO_ADDR
// end else
46096: GO 46098
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46098: LD_EXP 1
46102: PPUSH
46103: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
46107: LD_EXP 16
46111: PPUSH
46112: CALL 4873 0 1
46116: IFFALSE 46147
// begin for i in mpMarkedAreas do
46118: LD_ADDR_VAR 0 2
46122: PUSH
46123: LD_EXP 16
46127: PUSH
46128: FOR_IN
46129: IFFALSE 46145
// SetAreaMapShow ( i , 0 ) ;
46131: LD_VAR 0 2
46135: PPUSH
46136: LD_INT 0
46138: PPUSH
46139: CALL_OW 424
46143: GO 46128
46145: POP
46146: POP
// end ; for i := 1 to 8 do
46147: LD_ADDR_VAR 0 2
46151: PUSH
46152: DOUBLE
46153: LD_INT 1
46155: DEC
46156: ST_TO_ADDR
46157: LD_INT 8
46159: PUSH
46160: FOR_TO
46161: IFFALSE 47377
// begin if not mpSidePositions [ i ] then
46163: LD_EXP 5
46167: PUSH
46168: LD_VAR 0 2
46172: ARRAY
46173: NOT
46174: IFFALSE 46178
// continue ;
46176: GO 46160
// side := i ;
46178: LD_ADDR_VAR 0 7
46182: PUSH
46183: LD_VAR 0 2
46187: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46188: LD_ADDR_VAR 0 9
46192: PUSH
46193: LD_EXP 7
46197: PUSH
46198: LD_VAR 0 2
46202: ARRAY
46203: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46204: LD_ADDR_VAR 0 8
46208: PUSH
46209: LD_EXP 5
46213: PUSH
46214: LD_VAR 0 2
46218: ARRAY
46219: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46220: LD_EXP 10
46224: PPUSH
46225: CALL 4873 0 1
46229: IFFALSE 46306
// begin for j in mpOilDeposits [ pos ] do
46231: LD_ADDR_VAR 0 3
46235: PUSH
46236: LD_EXP 10
46240: PUSH
46241: LD_VAR 0 8
46245: ARRAY
46246: PUSH
46247: FOR_IN
46248: IFFALSE 46304
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46250: LD_VAR 0 3
46254: PUSH
46255: LD_INT 1
46257: ARRAY
46258: PPUSH
46259: LD_VAR 0 3
46263: PUSH
46264: LD_INT 2
46266: ARRAY
46267: PPUSH
46268: LD_INT 2
46270: PPUSH
46271: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46275: LD_VAR 0 3
46279: PUSH
46280: LD_INT 1
46282: ARRAY
46283: PPUSH
46284: LD_VAR 0 3
46288: PUSH
46289: LD_INT 2
46291: ARRAY
46292: PPUSH
46293: LD_VAR 0 7
46297: PPUSH
46298: CALL_OW 441
// end ;
46302: GO 46247
46304: POP
46305: POP
// end ; if Count ( mpSibDeposits ) then
46306: LD_EXP 11
46310: PPUSH
46311: CALL 4873 0 1
46315: IFFALSE 46392
// begin for j in mpSibDeposits [ pos ] do
46317: LD_ADDR_VAR 0 3
46321: PUSH
46322: LD_EXP 11
46326: PUSH
46327: LD_VAR 0 8
46331: ARRAY
46332: PUSH
46333: FOR_IN
46334: IFFALSE 46390
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46336: LD_VAR 0 3
46340: PUSH
46341: LD_INT 1
46343: ARRAY
46344: PPUSH
46345: LD_VAR 0 3
46349: PUSH
46350: LD_INT 2
46352: ARRAY
46353: PPUSH
46354: LD_INT 3
46356: PPUSH
46357: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46361: LD_VAR 0 3
46365: PUSH
46366: LD_INT 1
46368: ARRAY
46369: PPUSH
46370: LD_VAR 0 3
46374: PUSH
46375: LD_INT 2
46377: ARRAY
46378: PPUSH
46379: LD_VAR 0 7
46383: PPUSH
46384: CALL_OW 441
// end ;
46388: GO 46333
46390: POP
46391: POP
// end ; InitBc ;
46392: CALL_OW 21
// InitUc ;
46396: CALL_OW 18
// uc_side := side ;
46400: LD_ADDR_OWVAR 20
46404: PUSH
46405: LD_VAR 0 7
46409: ST_TO_ADDR
// uc_nation := nation ;
46410: LD_ADDR_OWVAR 21
46414: PUSH
46415: LD_VAR 0 9
46419: ST_TO_ADDR
// if Count ( mpDepots ) then
46420: LD_EXP 12
46424: PPUSH
46425: CALL 4873 0 1
46429: IFFALSE 46599
// begin bc_level := 0 ;
46431: LD_ADDR_OWVAR 43
46435: PUSH
46436: LD_INT 0
46438: ST_TO_ADDR
// bc_type := b_depot ;
46439: LD_ADDR_OWVAR 42
46443: PUSH
46444: LD_INT 0
46446: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46447: LD_ADDR_VAR 0 4
46451: PUSH
46452: LD_EXP 12
46456: PUSH
46457: LD_VAR 0 8
46461: ARRAY
46462: PUSH
46463: LD_INT 1
46465: ARRAY
46466: PPUSH
46467: LD_EXP 12
46471: PUSH
46472: LD_VAR 0 8
46476: ARRAY
46477: PUSH
46478: LD_INT 2
46480: ARRAY
46481: PPUSH
46482: LD_EXP 12
46486: PUSH
46487: LD_VAR 0 8
46491: ARRAY
46492: PUSH
46493: LD_INT 3
46495: ARRAY
46496: PPUSH
46497: CALL_OW 47
46501: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46502: LD_VAR 0 4
46506: PPUSH
46507: LD_STRING @
46509: PUSH
46510: LD_VAR 0 7
46514: STR
46515: PPUSH
46516: CALL_OW 500
// SetTag ( b , side ) ;
46520: LD_VAR 0 4
46524: PPUSH
46525: LD_VAR 0 7
46529: PPUSH
46530: CALL_OW 109
// if Count ( mpStartingResources ) then
46534: LD_EXP 13
46538: PPUSH
46539: CALL 4873 0 1
46543: IFFALSE 46597
// begin for j := 1 to mpStartingResources do
46545: LD_ADDR_VAR 0 3
46549: PUSH
46550: DOUBLE
46551: LD_INT 1
46553: DEC
46554: ST_TO_ADDR
46555: LD_EXP 13
46559: PUSH
46560: FOR_TO
46561: IFFALSE 46595
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46563: LD_VAR 0 4
46567: PPUSH
46568: CALL_OW 274
46572: PPUSH
46573: LD_VAR 0 3
46577: PPUSH
46578: LD_EXP 13
46582: PUSH
46583: LD_VAR 0 3
46587: ARRAY
46588: PPUSH
46589: CALL_OW 277
46593: GO 46560
46595: POP
46596: POP
// end ; end else
46597: GO 46746
// if Count ( mpStartingResources ) then
46599: LD_EXP 13
46603: PPUSH
46604: CALL 4873 0 1
46608: IFFALSE 46746
// begin for j := 1 to mpStartingResources do
46610: LD_ADDR_VAR 0 3
46614: PUSH
46615: DOUBLE
46616: LD_INT 1
46618: DEC
46619: ST_TO_ADDR
46620: LD_EXP 13
46624: PUSH
46625: FOR_TO
46626: IFFALSE 46744
// begin resources := mpStartingResources [ j ] ;
46628: LD_ADDR_VAR 0 13
46632: PUSH
46633: LD_EXP 13
46637: PUSH
46638: LD_VAR 0 3
46642: ARRAY
46643: ST_TO_ADDR
// repeat if resources >= 50 then
46644: LD_VAR 0 13
46648: PUSH
46649: LD_INT 50
46651: GREATEREQUAL
46652: IFFALSE 46698
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46654: LD_VAR 0 3
46658: PPUSH
46659: LD_INT 5
46661: PPUSH
46662: LD_VAR 0 5
46666: PPUSH
46667: LD_VAR 0 6
46671: PPUSH
46672: LD_INT 4
46674: PPUSH
46675: LD_INT 0
46677: PPUSH
46678: CALL_OW 60
// resources := resources - 50 ;
46682: LD_ADDR_VAR 0 13
46686: PUSH
46687: LD_VAR 0 13
46691: PUSH
46692: LD_INT 50
46694: MINUS
46695: ST_TO_ADDR
// end else
46696: GO 46732
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46698: LD_VAR 0 3
46702: PPUSH
46703: LD_VAR 0 13
46707: PUSH
46708: LD_INT 10
46710: DIV
46711: PPUSH
46712: LD_VAR 0 5
46716: PPUSH
46717: LD_VAR 0 6
46721: PPUSH
46722: LD_INT 4
46724: PPUSH
46725: LD_INT 0
46727: PPUSH
46728: CALL_OW 60
// until resources <= 0 ;
46732: LD_VAR 0 13
46736: PUSH
46737: LD_INT 0
46739: LESSEQUAL
46740: IFFALSE 46644
// end ;
46742: GO 46625
46744: POP
46745: POP
// end ; if Count ( mpBuildings ) then
46746: LD_EXP 15
46750: PPUSH
46751: CALL 4873 0 1
46755: IFFALSE 46833
// begin for j in mpBuildings [ pos ] do
46757: LD_ADDR_VAR 0 3
46761: PUSH
46762: LD_EXP 15
46766: PUSH
46767: LD_VAR 0 8
46771: ARRAY
46772: PUSH
46773: FOR_IN
46774: IFFALSE 46831
// begin bc_level := 0 ;
46776: LD_ADDR_OWVAR 43
46780: PUSH
46781: LD_INT 0
46783: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46784: LD_ADDR_OWVAR 42
46788: PUSH
46789: LD_VAR 0 3
46793: PUSH
46794: LD_INT 1
46796: ARRAY
46797: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46798: LD_VAR 0 3
46802: PUSH
46803: LD_INT 2
46805: ARRAY
46806: PPUSH
46807: LD_VAR 0 3
46811: PUSH
46812: LD_INT 3
46814: ARRAY
46815: PPUSH
46816: LD_VAR 0 3
46820: PUSH
46821: LD_INT 4
46823: ARRAY
46824: PPUSH
46825: CALL_OW 47
// end ;
46829: GO 46773
46831: POP
46832: POP
// end ; if mpBattleFlag > - 1 then
46833: LD_EXP 20
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: GREATER
46842: IFFALSE 47001
// begin x := mpStartPos [ pos ] [ 1 ] ;
46844: LD_ADDR_VAR 0 5
46848: PUSH
46849: LD_EXP 19
46853: PUSH
46854: LD_VAR 0 8
46858: ARRAY
46859: PUSH
46860: LD_INT 1
46862: ARRAY
46863: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
46864: LD_ADDR_VAR 0 6
46868: PUSH
46869: LD_EXP 19
46873: PUSH
46874: LD_VAR 0 8
46878: ARRAY
46879: PUSH
46880: LD_INT 2
46882: ARRAY
46883: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
46884: LD_VAR 0 5
46888: PPUSH
46889: LD_VAR 0 6
46893: PPUSH
46894: LD_INT 12
46896: PPUSH
46897: LD_INT 2
46899: PPUSH
46900: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
46904: LD_ADDR_EXP 21
46908: PUSH
46909: LD_EXP 21
46913: PPUSH
46914: LD_VAR 0 7
46918: PPUSH
46919: LD_VAR 0 7
46923: PPUSH
46924: LD_VAR 0 5
46928: PPUSH
46929: LD_VAR 0 6
46933: PPUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 100
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: LD_INT 70
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 3
46956: PUSH
46957: LD_INT 40
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 10
46966: PUSH
46967: LD_INT 25
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 20
46976: PUSH
46977: LD_INT 100
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: PPUSH
46991: CALL_OW 418
46995: PPUSH
46996: CALL_OW 1
47000: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47001: LD_EXP 24
47005: PUSH
47006: LD_INT 20
47008: PPUSH
47009: LD_VAR 0 7
47013: PPUSH
47014: CALL_OW 321
47018: PUSH
47019: LD_INT 1
47021: EQUAL
47022: AND
47023: IFFALSE 47040
// SetTech ( tech_SibDet , side , state_researched ) ;
47025: LD_INT 20
47027: PPUSH
47028: LD_VAR 0 7
47032: PPUSH
47033: LD_INT 2
47035: PPUSH
47036: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47040: LD_INT 24
47042: PPUSH
47043: LD_VAR 0 7
47047: PPUSH
47048: LD_INT 0
47050: PPUSH
47051: CALL_OW 322
// if mpSibBomb = 1 then
47055: LD_EXP 26
47059: PUSH
47060: LD_INT 1
47062: EQUAL
47063: IFFALSE 47082
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47065: LD_INT 25
47067: PPUSH
47068: LD_VAR 0 7
47072: PPUSH
47073: LD_INT 1
47075: PPUSH
47076: CALL_OW 322
// end else
47080: GO 47097
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47082: LD_INT 25
47084: PPUSH
47085: LD_VAR 0 7
47089: PPUSH
47090: LD_INT 0
47092: PPUSH
47093: CALL_OW 322
// end ; if mpVehicles then
47097: LD_EXP 33
47101: IFFALSE 47200
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47103: LD_ADDR_VAR 0 3
47107: PUSH
47108: LD_VAR 0 7
47112: PPUSH
47113: LD_VAR 0 9
47117: PPUSH
47118: LD_EXP 33
47122: PPUSH
47123: CALL 48059 0 3
47127: PUSH
47128: FOR_IN
47129: IFFALSE 47198
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47131: LD_VAR 0 3
47135: PPUSH
47136: LD_INT 0
47138: PPUSH
47139: LD_INT 5
47141: PPUSH
47142: CALL_OW 12
47146: PPUSH
47147: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47151: LD_VAR 0 3
47155: PPUSH
47156: LD_EXP 19
47160: PUSH
47161: LD_VAR 0 8
47165: ARRAY
47166: PUSH
47167: LD_INT 1
47169: ARRAY
47170: PPUSH
47171: LD_EXP 19
47175: PUSH
47176: LD_VAR 0 8
47180: ARRAY
47181: PUSH
47182: LD_INT 2
47184: ARRAY
47185: PPUSH
47186: LD_INT 12
47188: PPUSH
47189: LD_INT 0
47191: PPUSH
47192: CALL_OW 50
// end ;
47196: GO 47128
47198: POP
47199: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47200: LD_ADDR_VAR 0 11
47204: PUSH
47205: LD_VAR 0 7
47209: PPUSH
47210: LD_VAR 0 9
47214: PPUSH
47215: LD_EXP 22
47219: PPUSH
47220: LD_EXP 23
47224: PPUSH
47225: CALL 47789 0 4
47229: ST_TO_ADDR
// for j in team do
47230: LD_ADDR_VAR 0 3
47234: PUSH
47235: LD_VAR 0 11
47239: PUSH
47240: FOR_IN
47241: IFFALSE 47290
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47243: LD_VAR 0 3
47247: PPUSH
47248: LD_EXP 19
47252: PUSH
47253: LD_VAR 0 8
47257: ARRAY
47258: PUSH
47259: LD_INT 1
47261: ARRAY
47262: PPUSH
47263: LD_EXP 19
47267: PUSH
47268: LD_VAR 0 8
47272: ARRAY
47273: PUSH
47274: LD_INT 2
47276: ARRAY
47277: PPUSH
47278: LD_INT 12
47280: PPUSH
47281: LD_INT 0
47283: PPUSH
47284: CALL_OW 50
47288: GO 47240
47290: POP
47291: POP
// if mpApemans then
47292: LD_EXP 28
47296: IFFALSE 47375
// begin for j := 1 to mpApemans do
47298: LD_ADDR_VAR 0 3
47302: PUSH
47303: DOUBLE
47304: LD_INT 1
47306: DEC
47307: ST_TO_ADDR
47308: LD_EXP 28
47312: PUSH
47313: FOR_TO
47314: IFFALSE 47373
// begin PrepareApeman ( - 5 ) ;
47316: LD_INT 5
47318: NEG
47319: PPUSH
47320: CALL 36730 0 1
// ape := CreateHuman ;
47324: LD_ADDR_VAR 0 10
47328: PUSH
47329: CALL_OW 44
47333: ST_TO_ADDR
// SetTag ( ape , side ) ;
47334: LD_VAR 0 10
47338: PPUSH
47339: LD_VAR 0 7
47343: PPUSH
47344: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47348: LD_VAR 0 10
47352: PPUSH
47353: LD_EXP 29
47357: PUSH
47358: LD_VAR 0 8
47362: ARRAY
47363: PPUSH
47364: LD_INT 0
47366: PPUSH
47367: CALL_OW 49
// end ;
47371: GO 47313
47373: POP
47374: POP
// end ; end ;
47375: GO 46160
47377: POP
47378: POP
// if not mpTeamGame then
47379: LD_EXP 9
47383: NOT
47384: IFFALSE 47482
// begin for i := 1 to 8 do
47386: LD_ADDR_VAR 0 2
47390: PUSH
47391: DOUBLE
47392: LD_INT 1
47394: DEC
47395: ST_TO_ADDR
47396: LD_INT 8
47398: PUSH
47399: FOR_TO
47400: IFFALSE 47478
// for j := 1 to 8 do
47402: LD_ADDR_VAR 0 3
47406: PUSH
47407: DOUBLE
47408: LD_INT 1
47410: DEC
47411: ST_TO_ADDR
47412: LD_INT 8
47414: PUSH
47415: FOR_TO
47416: IFFALSE 47474
// if i <> j then
47418: LD_VAR 0 2
47422: PUSH
47423: LD_VAR 0 3
47427: NONEQUAL
47428: IFFALSE 47452
// SetAttitude ( i , j , att_neutral , true ) else
47430: LD_VAR 0 2
47434: PPUSH
47435: LD_VAR 0 3
47439: PPUSH
47440: LD_INT 0
47442: PPUSH
47443: LD_INT 1
47445: PPUSH
47446: CALL_OW 80
47450: GO 47472
// SetAttitude ( i , j , att_friend , true ) ;
47452: LD_VAR 0 2
47456: PPUSH
47457: LD_VAR 0 3
47461: PPUSH
47462: LD_INT 1
47464: PPUSH
47465: LD_INT 1
47467: PPUSH
47468: CALL_OW 80
47472: GO 47415
47474: POP
47475: POP
47476: GO 47399
47478: POP
47479: POP
// end else
47480: GO 47551
// begin if mpSharedVision then
47482: LD_EXP 14
47486: IFFALSE 47551
// begin for i in mpTeams do
47488: LD_ADDR_VAR 0 2
47492: PUSH
47493: LD_EXP 8
47497: PUSH
47498: FOR_IN
47499: IFFALSE 47549
// for j := 2 to i do
47501: LD_ADDR_VAR 0 3
47505: PUSH
47506: DOUBLE
47507: LD_INT 2
47509: DEC
47510: ST_TO_ADDR
47511: LD_VAR 0 2
47515: PUSH
47516: FOR_TO
47517: IFFALSE 47545
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47519: LD_VAR 0 2
47523: PUSH
47524: LD_VAR 0 3
47528: ARRAY
47529: PPUSH
47530: LD_VAR 0 2
47534: PUSH
47535: LD_INT 1
47537: ARRAY
47538: PPUSH
47539: CALL_OW 343
47543: GO 47516
47545: POP
47546: POP
47547: GO 47498
47549: POP
47550: POP
// end ; end ; for i := 1 to 8 do
47551: LD_ADDR_VAR 0 2
47555: PUSH
47556: DOUBLE
47557: LD_INT 1
47559: DEC
47560: ST_TO_ADDR
47561: LD_INT 8
47563: PUSH
47564: FOR_TO
47565: IFFALSE 47655
// for j := 1 to 8 do
47567: LD_ADDR_VAR 0 3
47571: PUSH
47572: DOUBLE
47573: LD_INT 1
47575: DEC
47576: ST_TO_ADDR
47577: LD_INT 8
47579: PUSH
47580: FOR_TO
47581: IFFALSE 47651
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47583: LD_EXP 6
47587: PUSH
47588: LD_VAR 0 2
47592: ARRAY
47593: PUSH
47594: LD_EXP 6
47598: PUSH
47599: LD_VAR 0 3
47603: ARRAY
47604: EQUAL
47605: IFFALSE 47629
// SetAttitude ( i , j , att_friend , true ) else
47607: LD_VAR 0 2
47611: PPUSH
47612: LD_VAR 0 3
47616: PPUSH
47617: LD_INT 1
47619: PPUSH
47620: LD_INT 1
47622: PPUSH
47623: CALL_OW 80
47627: GO 47649
// SetAttitude ( i , j , att_enemy , true ) ;
47629: LD_VAR 0 2
47633: PPUSH
47634: LD_VAR 0 3
47638: PPUSH
47639: LD_INT 2
47641: PPUSH
47642: LD_INT 1
47644: PPUSH
47645: CALL_OW 80
47649: GO 47580
47651: POP
47652: POP
47653: GO 47564
47655: POP
47656: POP
// music_nat := mpSideNations [ your_side ] ;
47657: LD_ADDR_OWVAR 71
47661: PUSH
47662: LD_EXP 7
47666: PUSH
47667: LD_OWVAR 2
47671: ARRAY
47672: ST_TO_ADDR
// if IAmSpec then
47673: CALL_OW 531
47677: IFFALSE 47718
// begin FogOff ( true ) ;
47679: LD_INT 1
47681: PPUSH
47682: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47686: LD_EXP 27
47690: PUSH
47691: LD_INT 1
47693: ARRAY
47694: PUSH
47695: LD_INT 2
47697: DIV
47698: PPUSH
47699: LD_EXP 27
47703: PUSH
47704: LD_INT 2
47706: ARRAY
47707: PUSH
47708: LD_INT 2
47710: DIV
47711: PPUSH
47712: CALL_OW 86
// end else
47716: GO 47764
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47718: LD_EXP 19
47722: PUSH
47723: LD_EXP 5
47727: PUSH
47728: LD_OWVAR 2
47732: ARRAY
47733: ARRAY
47734: PUSH
47735: LD_INT 1
47737: ARRAY
47738: PPUSH
47739: LD_EXP 19
47743: PUSH
47744: LD_EXP 5
47748: PUSH
47749: LD_OWVAR 2
47753: ARRAY
47754: ARRAY
47755: PUSH
47756: LD_INT 2
47758: ARRAY
47759: PPUSH
47760: CALL_OW 86
// end ; BeginBuildUp ;
47764: CALL 48537 0 0
// enable ( mpActive ) ;
47768: LD_INT 100
47770: ENABLE_MARKED
// enable ( mpGameType ) ;
47771: LD_EXP 1
47775: ENABLE_MARKED
// mpGameActive := true ;
47776: LD_ADDR_EXP 36
47780: PUSH
47781: LD_INT 1
47783: ST_TO_ADDR
// end ;
47784: LD_VAR 0 1
47788: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , class ; begin
47789: LD_INT 0
47791: PPUSH
47792: PPUSH
47793: PPUSH
// result := [ ] ;
47794: LD_ADDR_VAR 0 5
47798: PUSH
47799: EMPTY
47800: ST_TO_ADDR
// class := class_soldier ;
47801: LD_ADDR_VAR 0 7
47805: PUSH
47806: LD_INT 1
47808: ST_TO_ADDR
// uc_side := side ;
47809: LD_ADDR_OWVAR 20
47813: PUSH
47814: LD_VAR 0 1
47818: ST_TO_ADDR
// uc_nation := nation ;
47819: LD_ADDR_OWVAR 21
47823: PUSH
47824: LD_VAR 0 2
47828: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
47829: LD_ADDR_OWVAR 26
47833: PUSH
47834: LD_OWVAR 19
47838: PUSH
47839: LD_VAR 0 1
47843: ARRAY
47844: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
47845: LD_INT 1
47847: PPUSH
47848: LD_INT 2
47850: PPUSH
47851: CALL_OW 12
47855: PPUSH
47856: LD_VAR 0 7
47860: PPUSH
47861: LD_VAR 0 4
47865: PUSH
47866: LD_INT 2
47868: PLUS
47869: PPUSH
47870: CALL_OW 380
// hc_importance := 105 ;
47874: LD_ADDR_OWVAR 32
47878: PUSH
47879: LD_INT 105
47881: ST_TO_ADDR
// if Multiplayer then
47882: LD_OWVAR 4
47886: IFFALSE 47926
// begin hc_gallery := MULTIAVATARS ;
47888: LD_ADDR_OWVAR 33
47892: PUSH
47893: LD_STRING MULTIAVATARS
47895: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
47896: LD_ADDR_OWVAR 34
47900: PUSH
47901: LD_VAR 0 1
47905: PPUSH
47906: CALL_OW 525
47910: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
47911: LD_ADDR_OWVAR 27
47915: PUSH
47916: LD_VAR 0 1
47920: PPUSH
47921: CALL_OW 526
47925: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
47926: LD_ADDR_VAR 0 5
47930: PUSH
47931: LD_VAR 0 5
47935: PPUSH
47936: CALL_OW 44
47940: PPUSH
47941: CALL 40462 0 2
47945: ST_TO_ADDR
// InitHc_All ( ) ;
47946: CALL_OW 584
// class := 2 ;
47950: LD_ADDR_VAR 0 7
47954: PUSH
47955: LD_INT 2
47957: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
47958: LD_ADDR_VAR 0 6
47962: PUSH
47963: DOUBLE
47964: LD_INT 1
47966: DEC
47967: ST_TO_ADDR
47968: LD_VAR 0 3
47972: PUSH
47973: LD_INT 1
47975: MINUS
47976: PUSH
47977: FOR_TO
47978: IFFALSE 48052
// begin PrepareHuman ( false , class , skill ) ;
47980: LD_INT 0
47982: PPUSH
47983: LD_VAR 0 7
47987: PPUSH
47988: LD_VAR 0 4
47992: PPUSH
47993: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
47997: LD_ADDR_VAR 0 5
48001: PUSH
48002: LD_VAR 0 5
48006: PPUSH
48007: CALL_OW 44
48011: PPUSH
48012: CALL 40462 0 2
48016: ST_TO_ADDR
// class := Inc ( class ) ;
48017: LD_ADDR_VAR 0 7
48021: PUSH
48022: LD_VAR 0 7
48026: PPUSH
48027: CALL 41823 0 1
48031: ST_TO_ADDR
// if class = 5 then
48032: LD_VAR 0 7
48036: PUSH
48037: LD_INT 5
48039: EQUAL
48040: IFFALSE 48050
// class := 1 ;
48042: LD_ADDR_VAR 0 7
48046: PUSH
48047: LD_INT 1
48049: ST_TO_ADDR
// end ;
48050: GO 47977
48052: POP
48053: POP
// end ;
48054: LD_VAR 0 5
48058: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48059: LD_INT 0
48061: PPUSH
48062: PPUSH
// result := [ ] ;
48063: LD_ADDR_VAR 0 4
48067: PUSH
48068: EMPTY
48069: ST_TO_ADDR
// if not vehicles then
48070: LD_VAR 0 3
48074: NOT
48075: IFFALSE 48079
// exit ;
48077: GO 48238
// for i := 1 to vehicles [ nation ] do
48079: LD_ADDR_VAR 0 5
48083: PUSH
48084: DOUBLE
48085: LD_INT 1
48087: DEC
48088: ST_TO_ADDR
48089: LD_VAR 0 3
48093: PUSH
48094: LD_VAR 0 2
48098: ARRAY
48099: PUSH
48100: FOR_TO
48101: IFFALSE 48236
// begin uc_side := side ;
48103: LD_ADDR_OWVAR 20
48107: PUSH
48108: LD_VAR 0 1
48112: ST_TO_ADDR
// uc_nation := nation ;
48113: LD_ADDR_OWVAR 21
48117: PUSH
48118: LD_VAR 0 2
48122: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48123: LD_VAR 0 3
48127: PUSH
48128: LD_VAR 0 2
48132: ARRAY
48133: PUSH
48134: LD_VAR 0 5
48138: ARRAY
48139: PUSH
48140: LD_INT 1
48142: ARRAY
48143: PPUSH
48144: LD_VAR 0 3
48148: PUSH
48149: LD_VAR 0 2
48153: ARRAY
48154: PUSH
48155: LD_VAR 0 5
48159: ARRAY
48160: PUSH
48161: LD_INT 2
48163: ARRAY
48164: PPUSH
48165: LD_VAR 0 3
48169: PUSH
48170: LD_VAR 0 2
48174: ARRAY
48175: PUSH
48176: LD_VAR 0 5
48180: ARRAY
48181: PUSH
48182: LD_INT 3
48184: ARRAY
48185: PPUSH
48186: LD_VAR 0 3
48190: PUSH
48191: LD_VAR 0 2
48195: ARRAY
48196: PUSH
48197: LD_VAR 0 5
48201: ARRAY
48202: PUSH
48203: LD_INT 4
48205: ARRAY
48206: PPUSH
48207: LD_INT 80
48209: PPUSH
48210: CALL 7611 0 5
// result := Join ( result , CreateVehicle ) ;
48214: LD_ADDR_VAR 0 4
48218: PUSH
48219: LD_VAR 0 4
48223: PPUSH
48224: CALL_OW 45
48228: PPUSH
48229: CALL 40462 0 2
48233: ST_TO_ADDR
// end ;
48234: GO 48100
48236: POP
48237: POP
// end ;
48238: LD_VAR 0 4
48242: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48243: LD_INT 0
48245: PPUSH
48246: PPUSH
// for i in mpBattleFlags do
48247: LD_ADDR_VAR 0 3
48251: PUSH
48252: LD_EXP 21
48256: PUSH
48257: FOR_IN
48258: IFFALSE 48335
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48260: LD_VAR 0 3
48264: PPUSH
48265: LD_INT 1
48267: PUSH
48268: LD_VAR 0 1
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 2
48279: PUSH
48280: LD_VAR 0 1
48284: PUSH
48285: LD_REAL  7.00000000000000E-0001
48288: MUL
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 3
48296: PUSH
48297: LD_VAR 0 1
48301: PUSH
48302: LD_REAL  4.00000000000000E-0001
48305: MUL
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 20
48313: PUSH
48314: LD_VAR 0 1
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: PPUSH
48329: CALL_OW 423
48333: GO 48257
48335: POP
48336: POP
// end ;
48337: LD_VAR 0 2
48341: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48342: LD_INT 100
48344: IFFALSE 48439
48346: GO 48348
48348: DISABLE
48349: LD_INT 0
48351: PPUSH
48352: PPUSH
// begin if mpBattleFlag <= 0 then
48353: LD_EXP 20
48357: PUSH
48358: LD_INT 0
48360: LESSEQUAL
48361: IFFALSE 48365
// exit ;
48363: GO 48439
// strength := 100 ;
48365: LD_ADDR_VAR 0 2
48369: PUSH
48370: LD_INT 100
48372: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48373: LD_EXP 20
48377: PPUSH
48378: CALL_OW 67
// strength := Dec ( strength ) ;
48382: LD_ADDR_VAR 0 2
48386: PUSH
48387: LD_VAR 0 2
48391: PPUSH
48392: CALL 41845 0 1
48396: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48397: LD_VAR 0 2
48401: PPUSH
48402: CALL 48243 0 1
// until not strength ;
48406: LD_VAR 0 2
48410: NOT
48411: IFFALSE 48373
// for i in mpBattleFlags do
48413: LD_ADDR_VAR 0 1
48417: PUSH
48418: LD_EXP 21
48422: PUSH
48423: FOR_IN
48424: IFFALSE 48437
// KillBattleFlag ( i ) ;
48426: LD_VAR 0 1
48430: PPUSH
48431: CALL_OW 419
48435: GO 48423
48437: POP
48438: POP
// end ;
48439: PPOPN 2
48441: END
// every 0 0$1 marked mpActive do var side , tmp ;
48442: GO 48444
48444: DISABLE
48445: LD_INT 0
48447: PPUSH
48448: PPUSH
// begin if mpSibBomb <= 1 then
48449: LD_EXP 26
48453: PUSH
48454: LD_INT 1
48456: LESSEQUAL
48457: IFFALSE 48461
// exit ;
48459: GO 48534
// tmp := mpSibBomb ;
48461: LD_ADDR_VAR 0 2
48465: PUSH
48466: LD_EXP 26
48470: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48471: LD_INT 35
48473: PPUSH
48474: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48478: LD_ADDR_VAR 0 2
48482: PUSH
48483: LD_VAR 0 2
48487: PUSH
48488: LD_INT 35
48490: MINUS
48491: ST_TO_ADDR
// until not tmp ;
48492: LD_VAR 0 2
48496: NOT
48497: IFFALSE 48471
// for side := 1 to 8 do
48499: LD_ADDR_VAR 0 1
48503: PUSH
48504: DOUBLE
48505: LD_INT 1
48507: DEC
48508: ST_TO_ADDR
48509: LD_INT 8
48511: PUSH
48512: FOR_TO
48513: IFFALSE 48532
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48515: LD_INT 25
48517: PPUSH
48518: LD_VAR 0 1
48522: PPUSH
48523: LD_INT 1
48525: PPUSH
48526: CALL_OW 322
48530: GO 48512
48532: POP
48533: POP
// end ;
48534: PPOPN 2
48536: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48537: LD_INT 0
48539: PPUSH
48540: PPUSH
48541: PPUSH
// mpBuildUpTimeDelay := 0 ;
48542: LD_ADDR_EXP 38
48546: PUSH
48547: LD_INT 0
48549: ST_TO_ADDR
// if not mpBuildUpTime then
48550: LD_EXP 18
48554: NOT
48555: IFFALSE 48559
// exit ;
48557: GO 48742
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
48559: LD_ADDR_EXP 38
48563: PUSH
48564: LD_INT 8400
48566: PUSH
48567: LD_INT 2100
48569: PUSH
48570: LD_EXP 18
48574: MUL
48575: PLUS
48576: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
48577: LD_ADDR_EXP 39
48581: PUSH
48582: LD_INT 1
48584: ST_TO_ADDR
// for i := 1 to 8 do
48585: LD_ADDR_VAR 0 2
48589: PUSH
48590: DOUBLE
48591: LD_INT 1
48593: DEC
48594: ST_TO_ADDR
48595: LD_INT 8
48597: PUSH
48598: FOR_TO
48599: IFFALSE 48740
// if mpSidePositions [ i ] then
48601: LD_EXP 5
48605: PUSH
48606: LD_VAR 0 2
48610: ARRAY
48611: IFFALSE 48738
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
48613: LD_EXP 17
48617: PUSH
48618: LD_EXP 5
48622: PUSH
48623: LD_VAR 0 2
48627: ARRAY
48628: ARRAY
48629: PPUSH
48630: LD_INT 5
48632: PPUSH
48633: CALL_OW 424
// for j := 1 to 8 do
48637: LD_ADDR_VAR 0 3
48641: PUSH
48642: DOUBLE
48643: LD_INT 1
48645: DEC
48646: ST_TO_ADDR
48647: LD_INT 8
48649: PUSH
48650: FOR_TO
48651: IFFALSE 48736
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48653: LD_EXP 5
48657: PUSH
48658: LD_VAR 0 3
48662: ARRAY
48663: PUSH
48664: LD_EXP 6
48668: PUSH
48669: LD_VAR 0 2
48673: ARRAY
48674: PUSH
48675: LD_EXP 6
48679: PUSH
48680: LD_VAR 0 3
48684: ARRAY
48685: NONEQUAL
48686: PUSH
48687: LD_EXP 9
48691: NOT
48692: PUSH
48693: LD_VAR 0 2
48697: PUSH
48698: LD_VAR 0 3
48702: NONEQUAL
48703: AND
48704: OR
48705: AND
48706: IFFALSE 48734
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
48708: LD_VAR 0 3
48712: PPUSH
48713: LD_EXP 17
48717: PUSH
48718: LD_EXP 5
48722: PUSH
48723: LD_VAR 0 2
48727: ARRAY
48728: ARRAY
48729: PPUSH
48730: CALL_OW 333
48734: GO 48650
48736: POP
48737: POP
// end ;
48738: GO 48598
48740: POP
48741: POP
// end ;
48742: LD_VAR 0 1
48746: RET
// function EndBuildUp ; var i , j ; begin
48747: LD_INT 0
48749: PPUSH
48750: PPUSH
48751: PPUSH
// mpBuildUpTimeActive := false ;
48752: LD_ADDR_EXP 39
48756: PUSH
48757: LD_INT 0
48759: ST_TO_ADDR
// for i := 1 to 8 do
48760: LD_ADDR_VAR 0 2
48764: PUSH
48765: DOUBLE
48766: LD_INT 1
48768: DEC
48769: ST_TO_ADDR
48770: LD_INT 8
48772: PUSH
48773: FOR_TO
48774: IFFALSE 48915
// if mpSidePositions [ i ] then
48776: LD_EXP 5
48780: PUSH
48781: LD_VAR 0 2
48785: ARRAY
48786: IFFALSE 48913
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
48788: LD_EXP 17
48792: PUSH
48793: LD_EXP 5
48797: PUSH
48798: LD_VAR 0 2
48802: ARRAY
48803: ARRAY
48804: PPUSH
48805: LD_INT 0
48807: PPUSH
48808: CALL_OW 424
// for j := 1 to 8 do
48812: LD_ADDR_VAR 0 3
48816: PUSH
48817: DOUBLE
48818: LD_INT 1
48820: DEC
48821: ST_TO_ADDR
48822: LD_INT 8
48824: PUSH
48825: FOR_TO
48826: IFFALSE 48911
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48828: LD_EXP 5
48832: PUSH
48833: LD_VAR 0 3
48837: ARRAY
48838: PUSH
48839: LD_EXP 6
48843: PUSH
48844: LD_VAR 0 2
48848: ARRAY
48849: PUSH
48850: LD_EXP 6
48854: PUSH
48855: LD_VAR 0 3
48859: ARRAY
48860: NONEQUAL
48861: PUSH
48862: LD_EXP 9
48866: NOT
48867: PUSH
48868: LD_VAR 0 2
48872: PUSH
48873: LD_VAR 0 3
48877: NONEQUAL
48878: AND
48879: OR
48880: AND
48881: IFFALSE 48909
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
48883: LD_VAR 0 3
48887: PPUSH
48888: LD_EXP 17
48892: PUSH
48893: LD_EXP 5
48897: PUSH
48898: LD_VAR 0 2
48902: ARRAY
48903: ARRAY
48904: PPUSH
48905: CALL_OW 334
48909: GO 48825
48911: POP
48912: POP
// end ;
48913: GO 48773
48915: POP
48916: POP
// end ;
48917: LD_VAR 0 1
48921: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
48922: LD_EXP 39
48926: IFFALSE 49101
48928: GO 48930
48930: DISABLE
48931: LD_INT 0
48933: PPUSH
48934: PPUSH
// begin for i := 1 to 8 do
48935: LD_ADDR_VAR 0 1
48939: PUSH
48940: DOUBLE
48941: LD_INT 1
48943: DEC
48944: ST_TO_ADDR
48945: LD_INT 8
48947: PUSH
48948: FOR_TO
48949: IFFALSE 49098
// if mpSidePositions [ i ] then
48951: LD_EXP 5
48955: PUSH
48956: LD_VAR 0 1
48960: ARRAY
48961: IFFALSE 49096
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
48963: LD_ADDR_VAR 0 2
48967: PUSH
48968: LD_EXP 17
48972: PUSH
48973: LD_EXP 5
48977: PUSH
48978: LD_VAR 0 1
48982: ARRAY
48983: ARRAY
48984: PPUSH
48985: LD_INT 2
48987: PUSH
48988: LD_INT 21
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 21
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 22
49015: PUSH
49016: LD_OWVAR 2
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PPUSH
49029: CALL_OW 70
49033: PUSH
49034: FOR_IN
49035: IFFALSE 49094
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49037: LD_EXP 6
49041: PUSH
49042: LD_VAR 0 1
49046: ARRAY
49047: PUSH
49048: LD_EXP 6
49052: PUSH
49053: LD_OWVAR 2
49057: ARRAY
49058: NONEQUAL
49059: PUSH
49060: LD_EXP 9
49064: NOT
49065: PUSH
49066: LD_VAR 0 1
49070: PUSH
49071: LD_OWVAR 2
49075: NONEQUAL
49076: AND
49077: OR
49078: IFFALSE 49092
// ComMoveToArea ( un , BuildUpEscape ) ;
49080: LD_VAR 0 2
49084: PPUSH
49085: LD_INT 13
49087: PPUSH
49088: CALL_OW 113
49092: GO 49034
49094: POP
49095: POP
49096: GO 48948
49098: POP
49099: POP
// enable ;
49100: ENABLE
// end ;
49101: PPOPN 2
49103: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49104: LD_EXP 18
49108: IFFALSE 49158
49110: GO 49112
49112: DISABLE
49113: LD_INT 0
49115: PPUSH
// begin tmp := mpBuildUpTime ;
49116: LD_ADDR_VAR 0 1
49120: PUSH
49121: LD_EXP 18
49125: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49126: LD_INT 35
49128: PPUSH
49129: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49133: LD_ADDR_VAR 0 1
49137: PUSH
49138: LD_VAR 0 1
49142: PUSH
49143: LD_INT 35
49145: MINUS
49146: ST_TO_ADDR
// until not tmp ;
49147: LD_VAR 0 1
49151: NOT
49152: IFFALSE 49126
// EndBuildUp ;
49154: CALL 48747 0 0
// end ;
49158: PPOPN 1
49160: END
// every 0 0$1 trigger mpActive marked mpWin do
49161: LD_INT 100
49163: IFFALSE 49197
49165: GO 49167
49167: DISABLE
// begin if IAmServer then
49168: CALL_OW 518
49172: IFFALSE 49181
// wait ( 0 0$3 ) ;
49174: LD_INT 105
49176: PPUSH
49177: CALL_OW 67
// if Multiplayer then
49181: LD_OWVAR 4
49185: IFFALSE 49193
// YouWinInMultiplayer else
49187: CALL_OW 106
49191: GO 49197
// YouWin ;
49193: CALL_OW 103
// end ;
49197: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49198: LD_INT 0
49200: PPUSH
// result := false ;
49201: LD_ADDR_VAR 0 3
49205: PUSH
49206: LD_INT 0
49208: ST_TO_ADDR
// case gameType of GameTypeNormal :
49209: LD_VAR 0 1
49213: PUSH
49214: LD_INT 1
49216: DOUBLE
49217: EQUAL
49218: IFTRUE 49222
49220: GO 49295
49222: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49223: LD_ADDR_VAR 0 3
49227: PUSH
49228: LD_INT 22
49230: PUSH
49231: LD_VAR 0 2
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: LD_INT 21
49245: PUSH
49246: LD_INT 1
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 33
49255: PUSH
49256: LD_INT 3
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 33
49265: PUSH
49266: LD_INT 5
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PPUSH
49283: CALL_OW 69
49287: PPUSH
49288: CALL 4873 0 1
49292: ST_TO_ADDR
// end ; GameTypeSurvival :
49293: GO 49530
49295: LD_INT 2
49297: DOUBLE
49298: EQUAL
49299: IFTRUE 49303
49301: GO 49431
49303: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49304: LD_ADDR_VAR 0 3
49308: PUSH
49309: LD_INT 22
49311: PUSH
49312: LD_VAR 0 2
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: LD_INT 30
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 30
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: LIST
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PPUSH
49353: CALL_OW 69
49357: PPUSH
49358: CALL 4873 0 1
49362: PUSH
49363: LD_INT 22
49365: PUSH
49366: LD_VAR 0 2
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 2
49377: PUSH
49378: LD_INT 21
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 33
49390: PUSH
49391: LD_INT 3
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 33
49400: PUSH
49401: LD_INT 5
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PPUSH
49418: CALL_OW 69
49422: PPUSH
49423: CALL 4873 0 1
49427: AND
49428: ST_TO_ADDR
// end ; GameTypeKing :
49429: GO 49530
49431: LD_INT 3
49433: DOUBLE
49434: EQUAL
49435: IFTRUE 49439
49437: GO 49529
49439: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
49440: LD_ADDR_VAR 0 3
49444: PUSH
49445: LD_INT 22
49447: PUSH
49448: LD_VAR 0 2
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: LD_INT 21
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 33
49472: PUSH
49473: LD_INT 3
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 33
49482: PUSH
49483: LD_INT 5
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PPUSH
49500: CALL_OW 69
49504: PPUSH
49505: CALL 4873 0 1
49509: PUSH
49510: LD_VAR 0 2
49514: PPUSH
49515: CALL 52550 0 1
49519: PUSH
49520: LD_EXP 32
49524: LESS
49525: AND
49526: ST_TO_ADDR
// end ; end ;
49527: GO 49530
49529: POP
// end ;
49530: LD_VAR 0 3
49534: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49535: LD_INT 100
49537: IFFALSE 49759
49539: GO 49541
49541: DISABLE
49542: LD_INT 0
49544: PPUSH
49545: PPUSH
// begin if Multiplayer then
49546: LD_OWVAR 4
49550: IFFALSE 49558
// SetPlayerSpectator ( ) else
49552: CALL_OW 572
49556: GO 49567
// FogOff ( your_side ) ;
49558: LD_OWVAR 2
49562: PPUSH
49563: CALL_OW 344
// repeat gameIsOn := false ;
49567: LD_ADDR_VAR 0 1
49571: PUSH
49572: LD_INT 0
49574: ST_TO_ADDR
// for i := 1 to 8 do
49575: LD_ADDR_VAR 0 2
49579: PUSH
49580: DOUBLE
49581: LD_INT 1
49583: DEC
49584: ST_TO_ADDR
49585: LD_INT 8
49587: PUSH
49588: FOR_TO
49589: IFFALSE 49711
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49591: LD_EXP 5
49595: PUSH
49596: LD_VAR 0 2
49600: ARRAY
49601: PUSH
49602: LD_VAR 0 2
49606: PPUSH
49607: CALL_OW 108
49611: AND
49612: PUSH
49613: LD_VAR 0 2
49617: PUSH
49618: LD_OWVAR 2
49622: NONEQUAL
49623: AND
49624: IFFALSE 49709
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
49626: LD_EXP 6
49630: PUSH
49631: LD_VAR 0 2
49635: ARRAY
49636: NOT
49637: PUSH
49638: LD_EXP 6
49642: PUSH
49643: LD_VAR 0 2
49647: ARRAY
49648: PUSH
49649: LD_EXP 6
49653: PUSH
49654: LD_OWVAR 2
49658: ARRAY
49659: NONEQUAL
49660: PUSH
49661: LD_OWVAR 2
49665: PPUSH
49666: LD_VAR 0 2
49670: PPUSH
49671: CALL_OW 81
49675: PUSH
49676: LD_INT 1
49678: NONEQUAL
49679: AND
49680: OR
49681: IFFALSE 49709
// if HasPowerByGameType ( mpGameType , i ) then
49683: LD_EXP 1
49687: PPUSH
49688: LD_VAR 0 2
49692: PPUSH
49693: CALL 49198 0 2
49697: IFFALSE 49709
// begin gameIsOn := true ;
49699: LD_ADDR_VAR 0 1
49703: PUSH
49704: LD_INT 1
49706: ST_TO_ADDR
// break ;
49707: GO 49711
// end ;
49709: GO 49588
49711: POP
49712: POP
// wait ( 100 ) ;
49713: LD_INT 100
49715: PPUSH
49716: CALL_OW 67
// until not gameIsOn ;
49720: LD_VAR 0 1
49724: NOT
49725: IFFALSE 49567
// if IAmServer then
49727: CALL_OW 518
49731: IFFALSE 49740
// wait ( 0 0$3 ) ;
49733: LD_INT 105
49735: PPUSH
49736: CALL_OW 67
// if Multiplayer then
49740: LD_OWVAR 4
49744: IFFALSE 49752
// YouLostInMultiplayer else
49746: CALL_OW 107
49750: GO 49759
// YouLost (  ) ;
49752: LD_STRING 
49754: PPUSH
49755: CALL_OW 104
// end ;
49759: PPOPN 2
49761: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
49762: LD_EXP 30
49766: IFFALSE 50104
49768: GO 49770
49770: DISABLE
49771: LD_INT 0
49773: PPUSH
49774: PPUSH
49775: PPUSH
49776: PPUSH
49777: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
49778: LD_ADDR_VAR 0 5
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: LD_INT 3
49791: PUSH
49792: LD_INT 4
49794: PUSH
49795: LD_INT 5
49797: PUSH
49798: LD_INT 6
49800: PUSH
49801: LD_INT 7
49803: PUSH
49804: LD_INT 8
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
49817: LD_INT 1050
49819: PPUSH
49820: CALL_OW 67
// for i := 1 to 8 do
49824: LD_ADDR_VAR 0 1
49828: PUSH
49829: DOUBLE
49830: LD_INT 1
49832: DEC
49833: ST_TO_ADDR
49834: LD_INT 8
49836: PUSH
49837: FOR_TO
49838: IFFALSE 50083
// begin j := sides [ i ] ;
49840: LD_ADDR_VAR 0 2
49844: PUSH
49845: LD_VAR 0 5
49849: PUSH
49850: LD_VAR 0 1
49854: ARRAY
49855: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
49856: LD_EXP 37
49860: PUSH
49861: LD_VAR 0 2
49865: ARRAY
49866: PPUSH
49867: CALL 4873 0 1
49871: PUSH
49872: LD_VAR 0 2
49876: PPUSH
49877: CALL_OW 108
49881: AND
49882: PUSH
49883: LD_EXP 1
49887: PPUSH
49888: LD_VAR 0 2
49892: PPUSH
49893: CALL 49198 0 2
49897: AND
49898: IFFALSE 50081
// begin wait ( mpRespawn div 2 ) ;
49900: LD_EXP 30
49904: PUSH
49905: LD_INT 2
49907: DIV
49908: PPUSH
49909: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49913: LD_ADDR_VAR 0 3
49917: PUSH
49918: LD_INT 22
49920: PUSH
49921: LD_VAR 0 2
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 50
49932: PUSH
49933: EMPTY
49934: LIST
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: LD_INT 30
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 30
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: LIST
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: LIST
49968: PPUSH
49969: CALL_OW 69
49973: ST_TO_ADDR
// if not tmp then
49974: LD_VAR 0 3
49978: NOT
49979: IFFALSE 49983
// continue ;
49981: GO 49837
// spawn := tmp [ 1 ] ;
49983: LD_ADDR_VAR 0 4
49987: PUSH
49988: LD_VAR 0 3
49992: PUSH
49993: LD_INT 1
49995: ARRAY
49996: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
49997: LD_EXP 37
50001: PUSH
50002: LD_VAR 0 2
50006: ARRAY
50007: PUSH
50008: LD_INT 1
50010: ARRAY
50011: PPUSH
50012: LD_VAR 0 4
50016: PPUSH
50017: CALL_OW 250
50021: PPUSH
50022: LD_VAR 0 4
50026: PPUSH
50027: CALL_OW 251
50031: PPUSH
50032: LD_INT 32
50034: PPUSH
50035: LD_INT 1
50037: PPUSH
50038: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50042: LD_ADDR_EXP 37
50046: PUSH
50047: LD_EXP 37
50051: PPUSH
50052: LD_VAR 0 2
50056: PPUSH
50057: LD_EXP 37
50061: PUSH
50062: LD_VAR 0 2
50066: ARRAY
50067: PPUSH
50068: LD_INT 1
50070: PPUSH
50071: CALL_OW 3
50075: PPUSH
50076: CALL_OW 1
50080: ST_TO_ADDR
// end ; end ;
50081: GO 49837
50083: POP
50084: POP
// sides := Shuffle ( sides ) ;
50085: LD_ADDR_VAR 0 5
50089: PUSH
50090: LD_VAR 0 5
50094: PPUSH
50095: CALL 40567 0 1
50099: ST_TO_ADDR
// until false ;
50100: LD_INT 0
50102: IFFALSE 49817
// end ;
50104: PPOPN 5
50106: END
// every 0 0$1 marked mpActive do
50107: GO 50109
50109: DISABLE
// begin enable ;
50110: ENABLE
// if not mpDisplayStrings then
50111: LD_EXP 35
50115: NOT
50116: IFFALSE 50127
// begin display_strings := [ ] ;
50118: LD_ADDR_OWVAR 47
50122: PUSH
50123: EMPTY
50124: ST_TO_ADDR
// exit ;
50125: GO 50137
// end ; display_strings := mpDisplayStrings ;
50127: LD_ADDR_OWVAR 47
50131: PUSH
50132: LD_EXP 35
50136: ST_TO_ADDR
// end ; end_of_file
50137: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50138: LD_INT 0
50140: PPUSH
50141: PPUSH
50142: PPUSH
50143: PPUSH
50144: PPUSH
50145: PPUSH
50146: PPUSH
50147: PPUSH
50148: PPUSH
// if GetType ( un ) = unit_vehicle then
50149: LD_VAR 0 1
50153: PPUSH
50154: CALL_OW 247
50158: PUSH
50159: LD_INT 2
50161: EQUAL
50162: IFFALSE 50166
// exit ;
50164: GO 50632
// side := GetSide ( un ) ;
50166: LD_ADDR_VAR 0 9
50170: PUSH
50171: LD_VAR 0 1
50175: PPUSH
50176: CALL_OW 255
50180: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50181: LD_EXP 1
50185: PUSH
50186: LD_INT 2
50188: EQUAL
50189: IFFALSE 50282
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
50191: LD_VAR 0 1
50195: PPUSH
50196: CALL_OW 266
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: IN
50211: PUSH
50212: LD_VAR 0 1
50216: PPUSH
50217: CALL_OW 110
50221: PUSH
50222: LD_VAR 0 9
50226: EQUAL
50227: AND
50228: IFFALSE 50282
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50230: LD_ADDR_VAR 0 3
50234: PUSH
50235: LD_INT 22
50237: PUSH
50238: LD_VAR 0 9
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 21
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PPUSH
50261: CALL_OW 69
50265: PUSH
50266: FOR_IN
50267: IFFALSE 50280
// KillUnit ( i ) ;
50269: LD_VAR 0 3
50273: PPUSH
50274: CALL_OW 66
50278: GO 50266
50280: POP
50281: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50282: LD_VAR 0 1
50286: PPUSH
50287: CALL_OW 257
50291: PUSH
50292: LD_INT 12
50294: PUSH
50295: LD_INT 17
50297: PUSH
50298: LD_INT 15
50300: PUSH
50301: LD_INT 16
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: IN
50310: PUSH
50311: LD_VAR 0 1
50315: PPUSH
50316: CALL_OW 263
50320: PUSH
50321: LD_INT 5
50323: EQUAL
50324: OR
50325: IFFALSE 50414
// begin tag := GetTag ( un ) ;
50327: LD_ADDR_VAR 0 5
50331: PUSH
50332: LD_VAR 0 1
50336: PPUSH
50337: CALL_OW 110
50341: ST_TO_ADDR
// area := mpApemansArea [ tag ] ;
50342: LD_ADDR_VAR 0 7
50346: PUSH
50347: LD_EXP 29
50351: PUSH
50352: LD_VAR 0 5
50356: ARRAY
50357: ST_TO_ADDR
// wait ( 4 4$00 ) ;
50358: LD_INT 8400
50360: PPUSH
50361: CALL_OW 67
// PrepareApeman ( - 5 ) ;
50365: LD_INT 5
50367: NEG
50368: PPUSH
50369: CALL 36730 0 1
// ape := CreateHuman ;
50373: LD_ADDR_VAR 0 4
50377: PUSH
50378: CALL_OW 44
50382: ST_TO_ADDR
// SetTag ( ape , tag ) ;
50383: LD_VAR 0 4
50387: PPUSH
50388: LD_VAR 0 5
50392: PPUSH
50393: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
50397: LD_VAR 0 4
50401: PPUSH
50402: LD_VAR 0 7
50406: PPUSH
50407: LD_INT 0
50409: PPUSH
50410: CALL_OW 49
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
50414: LD_VAR 0 1
50418: PPUSH
50419: CALL_OW 247
50423: PUSH
50424: LD_INT 1
50426: EQUAL
50427: PUSH
50428: LD_VAR 0 1
50432: PPUSH
50433: CALL_OW 248
50437: PUSH
50438: LD_INT 0
50440: GREATER
50441: AND
50442: IFFALSE 50632
// begin if not mpRespawn then
50444: LD_EXP 30
50448: NOT
50449: IFFALSE 50453
// exit ;
50451: GO 50632
// side := GetSide ( un ) ;
50453: LD_ADDR_VAR 0 9
50457: PUSH
50458: LD_VAR 0 1
50462: PPUSH
50463: CALL_OW 255
50467: ST_TO_ADDR
// nation := GetNation ( un ) ;
50468: LD_ADDR_VAR 0 8
50472: PUSH
50473: LD_VAR 0 1
50477: PPUSH
50478: CALL_OW 248
50482: ST_TO_ADDR
// class := GetClass ( un ) ;
50483: LD_ADDR_VAR 0 6
50487: PUSH
50488: LD_VAR 0 1
50492: PPUSH
50493: CALL_OW 257
50497: ST_TO_ADDR
// if class > 4 then
50498: LD_VAR 0 6
50502: PUSH
50503: LD_INT 4
50505: GREATER
50506: IFFALSE 50516
// class := 1 ;
50508: LD_ADDR_VAR 0 6
50512: PUSH
50513: LD_INT 1
50515: ST_TO_ADDR
// wait ( mpRespawn ) ;
50516: LD_EXP 30
50520: PPUSH
50521: CALL_OW 67
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
50525: LD_VAR 0 9
50529: PPUSH
50530: CALL_OW 108
50534: NOT
50535: PUSH
50536: LD_EXP 1
50540: PPUSH
50541: LD_VAR 0 9
50545: PPUSH
50546: CALL 49198 0 2
50550: NOT
50551: AND
50552: IFFALSE 50556
// exit ;
50554: GO 50632
// uc_side := side ;
50556: LD_ADDR_OWVAR 20
50560: PUSH
50561: LD_VAR 0 9
50565: ST_TO_ADDR
// uc_nation := nation ;
50566: LD_ADDR_OWVAR 21
50570: PUSH
50571: LD_VAR 0 8
50575: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
50576: LD_INT 0
50578: PPUSH
50579: LD_VAR 0 6
50583: PPUSH
50584: LD_INT 2
50586: PPUSH
50587: CALL_OW 380
// mpRespawnPull := Replace ( mpRespawnPull , side , Join ( mpRespawnPull [ side ] , CreateHuman ) ) ;
50591: LD_ADDR_EXP 37
50595: PUSH
50596: LD_EXP 37
50600: PPUSH
50601: LD_VAR 0 9
50605: PPUSH
50606: LD_EXP 37
50610: PUSH
50611: LD_VAR 0 9
50615: ARRAY
50616: PPUSH
50617: CALL_OW 44
50621: PPUSH
50622: CALL 40462 0 2
50626: PPUSH
50627: CALL_OW 1
50631: ST_TO_ADDR
// end ; end ;
50632: LD_VAR 0 2
50636: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
50637: LD_INT 0
50639: PPUSH
50640: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
50641: LD_EXP 1
50645: PUSH
50646: LD_INT 2
50648: EQUAL
50649: PUSH
50650: LD_VAR 0 1
50654: PPUSH
50655: CALL_OW 266
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: IN
50670: AND
50671: IFFALSE 50736
// begin KillUnit ( building ) ;
50673: LD_VAR 0 1
50677: PPUSH
50678: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
50682: LD_ADDR_VAR 0 5
50686: PUSH
50687: LD_INT 22
50689: PUSH
50690: LD_VAR 0 2
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 21
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PPUSH
50713: CALL_OW 69
50717: PUSH
50718: FOR_IN
50719: IFFALSE 50732
// KillUnit ( i ) ;
50721: LD_VAR 0 5
50725: PPUSH
50726: CALL_OW 66
50730: GO 50718
50732: POP
50733: POP
// exit ;
50734: GO 50781
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
50736: LD_VAR 0 1
50740: PPUSH
50741: CALL_OW 266
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: IN
50756: IFFALSE 50781
// SetBName ( building , @ & GetSide ( building ) ) ;
50758: LD_VAR 0 1
50762: PPUSH
50763: LD_STRING @
50765: PUSH
50766: LD_VAR 0 1
50770: PPUSH
50771: CALL_OW 255
50775: STR
50776: PPUSH
50777: CALL_OW 500
// end ; end_of_file
50781: LD_VAR 0 4
50785: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
50786: LD_EXP 36
50790: PUSH
50791: CALL 50996 0 0
50795: AND
50796: PUSH
50797: LD_OWVAR 4
50801: AND
50802: IFFALSE 50993
50804: GO 50806
50806: DISABLE
50807: LD_INT 0
50809: PPUSH
50810: PPUSH
// begin canWin := false ;
50811: LD_ADDR_VAR 0 2
50815: PUSH
50816: LD_INT 0
50818: ST_TO_ADDR
// if not HasPower ( your_side ) then
50819: LD_OWVAR 2
50823: PPUSH
50824: CALL 51036 0 1
50828: NOT
50829: IFFALSE 50840
// begin Multiplayer_Loose_Message ;
50831: CALL_OW 521
// enable ( mpLose ) ;
50835: LD_INT 102
50837: ENABLE_MARKED
// end else
50838: GO 50993
// begin canWin := true ;
50840: LD_ADDR_VAR 0 2
50844: PUSH
50845: LD_INT 1
50847: ST_TO_ADDR
// for i := 1 to 8 do
50848: LD_ADDR_VAR 0 1
50852: PUSH
50853: DOUBLE
50854: LD_INT 1
50856: DEC
50857: ST_TO_ADDR
50858: LD_INT 8
50860: PUSH
50861: FOR_TO
50862: IFFALSE 50979
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50864: LD_EXP 5
50868: PUSH
50869: LD_VAR 0 1
50873: ARRAY
50874: PUSH
50875: LD_VAR 0 1
50879: PPUSH
50880: CALL_OW 108
50884: AND
50885: PUSH
50886: LD_VAR 0 1
50890: PUSH
50891: LD_OWVAR 2
50895: NONEQUAL
50896: AND
50897: IFFALSE 50977
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
50899: LD_EXP 6
50903: PUSH
50904: LD_VAR 0 1
50908: ARRAY
50909: NOT
50910: PUSH
50911: LD_EXP 6
50915: PUSH
50916: LD_VAR 0 1
50920: ARRAY
50921: PUSH
50922: LD_EXP 6
50926: PUSH
50927: LD_OWVAR 2
50931: ARRAY
50932: NONEQUAL
50933: PUSH
50934: LD_OWVAR 2
50938: PPUSH
50939: LD_VAR 0 1
50943: PPUSH
50944: CALL_OW 81
50948: PUSH
50949: LD_INT 1
50951: NONEQUAL
50952: AND
50953: OR
50954: IFFALSE 50977
// if HasPower ( i ) then
50956: LD_VAR 0 1
50960: PPUSH
50961: CALL 51036 0 1
50965: IFFALSE 50977
// begin canWin := false ;
50967: LD_ADDR_VAR 0 2
50971: PUSH
50972: LD_INT 0
50974: ST_TO_ADDR
// break ;
50975: GO 50979
// end ;
50977: GO 50861
50979: POP
50980: POP
// if canWin then
50981: LD_VAR 0 2
50985: IFFALSE 50992
// enable ( mpWin ) else
50987: LD_INT 101
50989: ENABLE_MARKED
50990: GO 50993
// enable ;
50992: ENABLE
// end ; end ;
50993: PPOPN 2
50995: END
// function CanWinLoose ; begin
50996: LD_INT 0
50998: PPUSH
// result := true ;
50999: LD_ADDR_VAR 0 1
51003: PUSH
51004: LD_INT 1
51006: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51007: CALL_OW 531
51011: PUSH
51012: CALL_OW 519
51016: PUSH
51017: LD_INT 1
51019: GREATER
51020: AND
51021: IFFALSE 51031
// result := false ;
51023: LD_ADDR_VAR 0 1
51027: PUSH
51028: LD_INT 0
51030: ST_TO_ADDR
// end ;
51031: LD_VAR 0 1
51035: RET
// function HasPower ( i ) ; begin
51036: LD_INT 0
51038: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51039: LD_ADDR_VAR 0 2
51043: PUSH
51044: LD_INT 22
51046: PUSH
51047: LD_VAR 0 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 2
51058: PUSH
51059: LD_INT 21
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 33
51071: PUSH
51072: LD_INT 3
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 33
51081: PUSH
51082: LD_INT 5
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PPUSH
51099: CALL_OW 69
51103: ST_TO_ADDR
// end ; end_of_file
51104: LD_VAR 0 2
51108: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51109: LD_EXP 36
51113: IFFALSE 51156
51115: GO 51117
51117: DISABLE
51118: LD_INT 0
51120: PPUSH
// begin for i := 1 to 8 do
51121: LD_ADDR_VAR 0 1
51125: PUSH
51126: DOUBLE
51127: LD_INT 1
51129: DEC
51130: ST_TO_ADDR
51131: LD_INT 8
51133: PUSH
51134: FOR_TO
51135: IFFALSE 51154
// SetRestrict ( b_depot , i , state_disabled ) ;
51137: LD_INT 0
51139: PPUSH
51140: LD_VAR 0 1
51144: PPUSH
51145: LD_INT 0
51147: PPUSH
51148: CALL_OW 324
51152: GO 51134
51154: POP
51155: POP
// end ;
51156: PPOPN 1
51158: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51159: LD_EXP 36
51163: PUSH
51164: CALL 51369 0 0
51168: AND
51169: PUSH
51170: LD_OWVAR 4
51174: AND
51175: IFFALSE 51366
51177: GO 51179
51179: DISABLE
51180: LD_INT 0
51182: PPUSH
51183: PPUSH
// begin canWin := false ;
51184: LD_ADDR_VAR 0 2
51188: PUSH
51189: LD_INT 0
51191: ST_TO_ADDR
// if not HasPower ( your_side ) then
51192: LD_OWVAR 2
51196: PPUSH
51197: CALL 51409 0 1
51201: NOT
51202: IFFALSE 51213
// begin Multiplayer_Loose_Message ;
51204: CALL_OW 521
// enable ( mpLose ) ;
51208: LD_INT 102
51210: ENABLE_MARKED
// end else
51211: GO 51366
// begin canWin := true ;
51213: LD_ADDR_VAR 0 2
51217: PUSH
51218: LD_INT 1
51220: ST_TO_ADDR
// for i := 1 to 8 do
51221: LD_ADDR_VAR 0 1
51225: PUSH
51226: DOUBLE
51227: LD_INT 1
51229: DEC
51230: ST_TO_ADDR
51231: LD_INT 8
51233: PUSH
51234: FOR_TO
51235: IFFALSE 51352
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51237: LD_EXP 5
51241: PUSH
51242: LD_VAR 0 1
51246: ARRAY
51247: PUSH
51248: LD_VAR 0 1
51252: PPUSH
51253: CALL_OW 108
51257: AND
51258: PUSH
51259: LD_VAR 0 1
51263: PUSH
51264: LD_OWVAR 2
51268: NONEQUAL
51269: AND
51270: IFFALSE 51350
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51272: LD_EXP 6
51276: PUSH
51277: LD_VAR 0 1
51281: ARRAY
51282: NOT
51283: PUSH
51284: LD_EXP 6
51288: PUSH
51289: LD_VAR 0 1
51293: ARRAY
51294: PUSH
51295: LD_EXP 6
51299: PUSH
51300: LD_OWVAR 2
51304: ARRAY
51305: NONEQUAL
51306: PUSH
51307: LD_OWVAR 2
51311: PPUSH
51312: LD_VAR 0 1
51316: PPUSH
51317: CALL_OW 81
51321: PUSH
51322: LD_INT 1
51324: NONEQUAL
51325: AND
51326: OR
51327: IFFALSE 51350
// if HasPower ( i ) then
51329: LD_VAR 0 1
51333: PPUSH
51334: CALL 51409 0 1
51338: IFFALSE 51350
// begin canWin := false ;
51340: LD_ADDR_VAR 0 2
51344: PUSH
51345: LD_INT 0
51347: ST_TO_ADDR
// break ;
51348: GO 51352
// end ;
51350: GO 51234
51352: POP
51353: POP
// if canWin then
51354: LD_VAR 0 2
51358: IFFALSE 51365
// enable ( mpWin ) else
51360: LD_INT 101
51362: ENABLE_MARKED
51363: GO 51366
// enable ;
51365: ENABLE
// end ; end ;
51366: PPOPN 2
51368: END
// function CanWinLoose ; begin
51369: LD_INT 0
51371: PPUSH
// result := true ;
51372: LD_ADDR_VAR 0 1
51376: PUSH
51377: LD_INT 1
51379: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51380: CALL_OW 531
51384: PUSH
51385: CALL_OW 519
51389: PUSH
51390: LD_INT 1
51392: GREATER
51393: AND
51394: IFFALSE 51404
// result := false ;
51396: LD_ADDR_VAR 0 1
51400: PUSH
51401: LD_INT 0
51403: ST_TO_ADDR
// end ;
51404: LD_VAR 0 1
51408: RET
// function HasPower ( i ) ; begin
51409: LD_INT 0
51411: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
51412: LD_INT 22
51414: PUSH
51415: LD_VAR 0 1
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 2
51426: PUSH
51427: LD_INT 30
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 30
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: LIST
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PPUSH
51456: CALL_OW 69
51460: NOT
51461: IFFALSE 51465
// exit ;
51463: GO 51530
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51465: LD_ADDR_VAR 0 2
51469: PUSH
51470: LD_INT 22
51472: PUSH
51473: LD_VAR 0 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: LD_INT 21
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 33
51497: PUSH
51498: LD_INT 3
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 33
51507: PUSH
51508: LD_INT 5
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PPUSH
51525: CALL_OW 69
51529: ST_TO_ADDR
// end ; end_of_file
51530: LD_VAR 0 2
51534: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
51535: LD_EXP 36
51539: IFFALSE 51878
51541: GO 51543
51543: DISABLE
51544: LD_INT 0
51546: PPUSH
51547: PPUSH
51548: PPUSH
// begin mpKingPoints := [ ] ;
51549: LD_ADDR_EXP 40
51553: PUSH
51554: EMPTY
51555: ST_TO_ADDR
// if mpTeamGame then
51556: LD_EXP 9
51560: IFFALSE 51614
// begin for i := 1 to Count ( mpTeams ) do
51562: LD_ADDR_VAR 0 1
51566: PUSH
51567: DOUBLE
51568: LD_INT 1
51570: DEC
51571: ST_TO_ADDR
51572: LD_EXP 8
51576: PPUSH
51577: CALL 4873 0 1
51581: PUSH
51582: FOR_TO
51583: IFFALSE 51610
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
51585: LD_ADDR_EXP 40
51589: PUSH
51590: LD_EXP 40
51594: PPUSH
51595: LD_VAR 0 1
51599: PPUSH
51600: LD_INT 0
51602: PPUSH
51603: CALL_OW 1
51607: ST_TO_ADDR
51608: GO 51582
51610: POP
51611: POP
// end else
51612: GO 51657
// begin for i := 1 to 8 do
51614: LD_ADDR_VAR 0 1
51618: PUSH
51619: DOUBLE
51620: LD_INT 1
51622: DEC
51623: ST_TO_ADDR
51624: LD_INT 8
51626: PUSH
51627: FOR_TO
51628: IFFALSE 51655
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
51630: LD_ADDR_EXP 40
51634: PUSH
51635: LD_EXP 40
51639: PPUSH
51640: LD_VAR 0 1
51644: PPUSH
51645: LD_INT 0
51647: PPUSH
51648: CALL_OW 1
51652: ST_TO_ADDR
51653: GO 51627
51655: POP
51656: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
51657: LD_ADDR_VAR 0 3
51661: PUSH
51662: LD_INT 17
51664: PPUSH
51665: LD_INT 0
51667: PPUSH
51668: CALL_OW 517
51672: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51673: LD_ADDR_VAR 0 1
51677: PUSH
51678: DOUBLE
51679: LD_INT 1
51681: DEC
51682: ST_TO_ADDR
51683: LD_VAR 0 3
51687: PUSH
51688: LD_INT 1
51690: ARRAY
51691: PUSH
51692: FOR_TO
51693: IFFALSE 51760
// for j := 1 to 8 do
51695: LD_ADDR_VAR 0 2
51699: PUSH
51700: DOUBLE
51701: LD_INT 1
51703: DEC
51704: ST_TO_ADDR
51705: LD_INT 8
51707: PUSH
51708: FOR_TO
51709: IFFALSE 51756
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
51711: LD_VAR 0 3
51715: PUSH
51716: LD_INT 1
51718: ARRAY
51719: PUSH
51720: LD_VAR 0 1
51724: ARRAY
51725: PPUSH
51726: LD_VAR 0 3
51730: PUSH
51731: LD_INT 2
51733: ARRAY
51734: PUSH
51735: LD_VAR 0 1
51739: ARRAY
51740: PPUSH
51741: LD_VAR 0 2
51745: PPUSH
51746: LD_INT 12
51748: NEG
51749: PPUSH
51750: CALL_OW 330
51754: GO 51708
51756: POP
51757: POP
51758: GO 51692
51760: POP
51761: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
51762: LD_EXP 31
51766: PPUSH
51767: LD_INT 1
51769: PPUSH
51770: CALL_OW 424
// UpdateCounter ;
51774: CALL 52380 0 0
// repeat wait ( 0 0$1 ) ;
51778: LD_INT 35
51780: PPUSH
51781: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51785: LD_ADDR_VAR 0 3
51789: PUSH
51790: LD_EXP 31
51794: PPUSH
51795: LD_INT 3
51797: PUSH
51798: LD_INT 57
51800: PUSH
51801: EMPTY
51802: LIST
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 50
51810: PUSH
51811: EMPTY
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: LD_INT 30
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 30
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: LIST
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: LIST
51846: PPUSH
51847: CALL_OW 70
51851: ST_TO_ADDR
// if not tmp then
51852: LD_VAR 0 3
51856: NOT
51857: IFFALSE 51861
// continue ;
51859: GO 51778
// AddPoints ( tmp ) ;
51861: LD_VAR 0 3
51865: PPUSH
51866: CALL 52058 0 1
// UpdateCounter ;
51870: CALL 52380 0 0
// until false ;
51874: LD_INT 0
51876: IFFALSE 51778
// end ;
51878: PPOPN 3
51880: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
51881: LD_EXP 36
51885: PUSH
51886: LD_EXP 34
51890: AND
51891: IFFALSE 52055
51893: GO 51895
51895: DISABLE
51896: LD_INT 0
51898: PPUSH
51899: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
51900: LD_ADDR_VAR 0 2
51904: PUSH
51905: LD_INT 17
51907: PPUSH
51908: LD_INT 0
51910: PPUSH
51911: CALL_OW 517
51915: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51916: LD_ADDR_VAR 0 1
51920: PUSH
51921: DOUBLE
51922: LD_INT 1
51924: DEC
51925: ST_TO_ADDR
51926: LD_VAR 0 2
51930: PUSH
51931: LD_INT 1
51933: ARRAY
51934: PUSH
51935: FOR_TO
51936: IFFALSE 51977
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
51938: LD_VAR 0 2
51942: PUSH
51943: LD_INT 1
51945: ARRAY
51946: PUSH
51947: LD_VAR 0 1
51951: ARRAY
51952: PPUSH
51953: LD_VAR 0 2
51957: PUSH
51958: LD_INT 2
51960: ARRAY
51961: PUSH
51962: LD_VAR 0 1
51966: ARRAY
51967: PPUSH
51968: LD_INT 125
51970: PPUSH
51971: CALL_OW 495
51975: GO 51935
51977: POP
51978: POP
// repeat wait ( mpEmissions ) ;
51979: LD_EXP 34
51983: PPUSH
51984: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
51988: LD_ADDR_VAR 0 1
51992: PUSH
51993: DOUBLE
51994: LD_INT 1
51996: DEC
51997: ST_TO_ADDR
51998: LD_VAR 0 2
52002: PUSH
52003: LD_INT 1
52005: ARRAY
52006: PUSH
52007: FOR_TO
52008: IFFALSE 52049
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52010: LD_VAR 0 2
52014: PUSH
52015: LD_INT 1
52017: ARRAY
52018: PUSH
52019: LD_VAR 0 1
52023: ARRAY
52024: PPUSH
52025: LD_VAR 0 2
52029: PUSH
52030: LD_INT 2
52032: ARRAY
52033: PUSH
52034: LD_VAR 0 1
52038: ARRAY
52039: PPUSH
52040: LD_INT 15
52042: PPUSH
52043: CALL_OW 495
52047: GO 52007
52049: POP
52050: POP
// until false ;
52051: LD_INT 0
52053: IFFALSE 51979
// end ;
52055: PPOPN 2
52057: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52058: LD_INT 0
52060: PPUSH
52061: PPUSH
52062: PPUSH
52063: PPUSH
52064: PPUSH
// if mpTeamGame then
52065: LD_EXP 9
52069: IFFALSE 52266
// begin first := depots [ 1 ] ;
52071: LD_ADDR_VAR 0 4
52075: PUSH
52076: LD_VAR 0 1
52080: PUSH
52081: LD_INT 1
52083: ARRAY
52084: ST_TO_ADDR
// side := GetSide ( first ) ;
52085: LD_ADDR_VAR 0 6
52089: PUSH
52090: LD_VAR 0 4
52094: PPUSH
52095: CALL_OW 255
52099: ST_TO_ADDR
// for i := 1 to mpTeams do
52100: LD_ADDR_VAR 0 3
52104: PUSH
52105: DOUBLE
52106: LD_INT 1
52108: DEC
52109: ST_TO_ADDR
52110: LD_EXP 8
52114: PUSH
52115: FOR_TO
52116: IFFALSE 52150
// if side in mpTeams [ i ] then
52118: LD_VAR 0 6
52122: PUSH
52123: LD_EXP 8
52127: PUSH
52128: LD_VAR 0 3
52132: ARRAY
52133: IN
52134: IFFALSE 52148
// begin team := i ;
52136: LD_ADDR_VAR 0 5
52140: PUSH
52141: LD_VAR 0 3
52145: ST_TO_ADDR
// break ;
52146: GO 52150
// end ;
52148: GO 52115
52150: POP
52151: POP
// if not team then
52152: LD_VAR 0 5
52156: NOT
52157: IFFALSE 52161
// exit ;
52159: GO 52375
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52161: LD_EXP 31
52165: PPUSH
52166: LD_INT 81
52168: PUSH
52169: LD_VAR 0 6
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PPUSH
52178: CALL_OW 70
52182: IFFALSE 52186
// exit ;
52184: GO 52375
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52186: LD_ADDR_EXP 40
52190: PUSH
52191: LD_EXP 40
52195: PPUSH
52196: LD_VAR 0 5
52200: PPUSH
52201: LD_EXP 40
52205: PUSH
52206: LD_VAR 0 5
52210: ARRAY
52211: PUSH
52212: LD_INT 1
52214: PLUS
52215: PPUSH
52216: CALL_OW 1
52220: ST_TO_ADDR
// for i in mpTeams [ team ] do
52221: LD_ADDR_VAR 0 3
52225: PUSH
52226: LD_EXP 8
52230: PUSH
52231: LD_VAR 0 5
52235: ARRAY
52236: PUSH
52237: FOR_IN
52238: IFFALSE 52262
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52240: LD_VAR 0 3
52244: PPUSH
52245: LD_EXP 40
52249: PUSH
52250: LD_VAR 0 5
52254: ARRAY
52255: PPUSH
52256: CALL_OW 506
52260: GO 52237
52262: POP
52263: POP
// end else
52264: GO 52375
// begin first := depots [ 1 ] ;
52266: LD_ADDR_VAR 0 4
52270: PUSH
52271: LD_VAR 0 1
52275: PUSH
52276: LD_INT 1
52278: ARRAY
52279: ST_TO_ADDR
// side := GetSide ( first ) ;
52280: LD_ADDR_VAR 0 6
52284: PUSH
52285: LD_VAR 0 4
52289: PPUSH
52290: CALL_OW 255
52294: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52295: LD_EXP 31
52299: PPUSH
52300: LD_INT 81
52302: PUSH
52303: LD_VAR 0 6
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PPUSH
52312: CALL_OW 70
52316: IFFALSE 52320
// exit ;
52318: GO 52375
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
52320: LD_ADDR_EXP 40
52324: PUSH
52325: LD_EXP 40
52329: PPUSH
52330: LD_VAR 0 6
52334: PPUSH
52335: LD_EXP 40
52339: PUSH
52340: LD_VAR 0 6
52344: ARRAY
52345: PUSH
52346: LD_INT 1
52348: PLUS
52349: PPUSH
52350: CALL_OW 1
52354: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
52355: LD_VAR 0 6
52359: PPUSH
52360: LD_EXP 40
52364: PUSH
52365: LD_VAR 0 6
52369: ARRAY
52370: PPUSH
52371: CALL_OW 506
// end ; end ;
52375: LD_VAR 0 2
52379: RET
// function UpdateCounter ; var i ; begin
52380: LD_INT 0
52382: PPUSH
52383: PPUSH
// result := [ ] ;
52384: LD_ADDR_VAR 0 1
52388: PUSH
52389: EMPTY
52390: ST_TO_ADDR
// if mpTeamGame then
52391: LD_EXP 9
52395: IFFALSE 52462
// begin for i := 1 to mpTeams do
52397: LD_ADDR_VAR 0 2
52401: PUSH
52402: DOUBLE
52403: LD_INT 1
52405: DEC
52406: ST_TO_ADDR
52407: LD_EXP 8
52411: PUSH
52412: FOR_TO
52413: IFFALSE 52458
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
52415: LD_ADDR_VAR 0 1
52419: PUSH
52420: LD_VAR 0 1
52424: PUSH
52425: LD_STRING #KingoftheHill-Team
52427: PUSH
52428: LD_VAR 0 2
52432: PUSH
52433: LD_EXP 40
52437: PUSH
52438: LD_VAR 0 2
52442: ARRAY
52443: PUSH
52444: LD_EXP 32
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: ADD
52455: ST_TO_ADDR
52456: GO 52412
52458: POP
52459: POP
// end else
52460: GO 52535
// begin for i := 1 to 8 do
52462: LD_ADDR_VAR 0 2
52466: PUSH
52467: DOUBLE
52468: LD_INT 1
52470: DEC
52471: ST_TO_ADDR
52472: LD_INT 8
52474: PUSH
52475: FOR_TO
52476: IFFALSE 52533
// if mpSidePositions [ i ] then
52478: LD_EXP 5
52482: PUSH
52483: LD_VAR 0 2
52487: ARRAY
52488: IFFALSE 52531
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
52490: LD_ADDR_VAR 0 1
52494: PUSH
52495: LD_VAR 0 1
52499: PUSH
52500: LD_STRING #KingoftheHill-Player
52502: PUSH
52503: LD_VAR 0 2
52507: PUSH
52508: LD_EXP 40
52512: PUSH
52513: LD_VAR 0 2
52517: ARRAY
52518: PUSH
52519: LD_EXP 32
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: ADD
52530: ST_TO_ADDR
52531: GO 52475
52533: POP
52534: POP
// end ; mpDisplayStrings := result ;
52535: LD_ADDR_EXP 35
52539: PUSH
52540: LD_VAR 0 1
52544: ST_TO_ADDR
// end ;
52545: LD_VAR 0 1
52549: RET
// export function HowMuchPointsKing ( side ) ; begin
52550: LD_INT 0
52552: PPUSH
// result := HowMuchPoints ( side ) ;
52553: LD_ADDR_VAR 0 2
52557: PUSH
52558: LD_VAR 0 1
52562: PPUSH
52563: CALL 52573 0 1
52567: ST_TO_ADDR
// end ;
52568: LD_VAR 0 2
52572: RET
// function HowMuchPoints ( side ) ; var i ; begin
52573: LD_INT 0
52575: PPUSH
52576: PPUSH
// if mpTeamGame then
52577: LD_EXP 9
52581: IFFALSE 52650
// begin for i := 1 to Count ( mpTeams ) do
52583: LD_ADDR_VAR 0 3
52587: PUSH
52588: DOUBLE
52589: LD_INT 1
52591: DEC
52592: ST_TO_ADDR
52593: LD_EXP 8
52597: PPUSH
52598: CALL 4873 0 1
52602: PUSH
52603: FOR_TO
52604: IFFALSE 52646
// begin if side in mpTeams [ i ] then
52606: LD_VAR 0 1
52610: PUSH
52611: LD_EXP 8
52615: PUSH
52616: LD_VAR 0 3
52620: ARRAY
52621: IN
52622: IFFALSE 52644
// begin result := mpKingPoints [ i ] ;
52624: LD_ADDR_VAR 0 2
52628: PUSH
52629: LD_EXP 40
52633: PUSH
52634: LD_VAR 0 3
52638: ARRAY
52639: ST_TO_ADDR
// exit ;
52640: POP
52641: POP
52642: GO 52666
// end ; end ;
52644: GO 52603
52646: POP
52647: POP
// end else
52648: GO 52666
// result := mpKingPoints [ side ] ;
52650: LD_ADDR_VAR 0 2
52654: PUSH
52655: LD_EXP 40
52659: PUSH
52660: LD_VAR 0 1
52664: ARRAY
52665: ST_TO_ADDR
// end ;
52666: LD_VAR 0 2
52670: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
52671: LD_EXP 36
52675: PUSH
52676: CALL 52998 0 0
52680: AND
52681: PUSH
52682: LD_OWVAR 4
52686: AND
52687: IFFALSE 52923
52689: GO 52691
52691: DISABLE
52692: LD_INT 0
52694: PPUSH
52695: PPUSH
// begin canWin := false ;
52696: LD_ADDR_VAR 0 2
52700: PUSH
52701: LD_INT 0
52703: ST_TO_ADDR
// if not HasPower ( your_side ) then
52704: LD_OWVAR 2
52708: PPUSH
52709: CALL 53038 0 1
52713: NOT
52714: IFFALSE 52725
// begin Multiplayer_Loose_Message ;
52716: CALL_OW 521
// enable ( mpLose ) ;
52720: LD_INT 102
52722: ENABLE_MARKED
// end else
52723: GO 52923
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
52725: LD_ADDR_VAR 0 2
52729: PUSH
52730: LD_OWVAR 2
52734: PPUSH
52735: CALL 52573 0 1
52739: PUSH
52740: LD_EXP 32
52744: GREATEREQUAL
52745: PUSH
52746: LD_OWVAR 2
52750: PPUSH
52751: CALL 53038 0 1
52755: AND
52756: PUSH
52757: CALL 52926 0 0
52761: NOT
52762: OR
52763: ST_TO_ADDR
// for i := 1 to 8 do
52764: LD_ADDR_VAR 0 1
52768: PUSH
52769: DOUBLE
52770: LD_INT 1
52772: DEC
52773: ST_TO_ADDR
52774: LD_INT 8
52776: PUSH
52777: FOR_TO
52778: IFFALSE 52909
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
52780: LD_EXP 5
52784: PUSH
52785: LD_VAR 0 1
52789: ARRAY
52790: PUSH
52791: LD_VAR 0 1
52795: PPUSH
52796: CALL_OW 108
52800: AND
52801: PUSH
52802: LD_VAR 0 1
52806: PUSH
52807: LD_OWVAR 2
52811: NONEQUAL
52812: AND
52813: IFFALSE 52907
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
52815: LD_EXP 6
52819: PUSH
52820: LD_VAR 0 1
52824: ARRAY
52825: NOT
52826: PUSH
52827: LD_EXP 6
52831: PUSH
52832: LD_VAR 0 1
52836: ARRAY
52837: PUSH
52838: LD_EXP 6
52842: PUSH
52843: LD_OWVAR 2
52847: ARRAY
52848: NONEQUAL
52849: PUSH
52850: LD_OWVAR 2
52854: PPUSH
52855: LD_VAR 0 1
52859: PPUSH
52860: CALL_OW 81
52864: PUSH
52865: LD_INT 1
52867: NONEQUAL
52868: AND
52869: OR
52870: IFFALSE 52907
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
52872: LD_VAR 0 1
52876: PPUSH
52877: CALL 52573 0 1
52881: PUSH
52882: LD_EXP 32
52886: GREATEREQUAL
52887: PUSH
52888: LD_VAR 0 1
52892: PPUSH
52893: CALL 53038 0 1
52897: AND
52898: IFFALSE 52907
// begin enable ( mpLose ) ;
52900: LD_INT 102
52902: ENABLE_MARKED
// exit ;
52903: POP
52904: POP
52905: GO 52923
// end ;
52907: GO 52777
52909: POP
52910: POP
// if canWin then
52911: LD_VAR 0 2
52915: IFFALSE 52922
// enable ( mpWin ) else
52917: LD_INT 101
52919: ENABLE_MARKED
52920: GO 52923
// enable ;
52922: ENABLE
// end ; end ;
52923: PPOPN 2
52925: END
// function EnemiesInGame ; var i ; begin
52926: LD_INT 0
52928: PPUSH
52929: PPUSH
// result := false ;
52930: LD_ADDR_VAR 0 1
52934: PUSH
52935: LD_INT 0
52937: ST_TO_ADDR
// for i := 1 to 8 do
52938: LD_ADDR_VAR 0 2
52942: PUSH
52943: DOUBLE
52944: LD_INT 1
52946: DEC
52947: ST_TO_ADDR
52948: LD_INT 8
52950: PUSH
52951: FOR_TO
52952: IFFALSE 52991
// if i <> your_side and MultiplayerSideAlive ( i ) then
52954: LD_VAR 0 2
52958: PUSH
52959: LD_OWVAR 2
52963: NONEQUAL
52964: PUSH
52965: LD_VAR 0 2
52969: PPUSH
52970: CALL_OW 108
52974: AND
52975: IFFALSE 52989
// begin result := true ;
52977: LD_ADDR_VAR 0 1
52981: PUSH
52982: LD_INT 1
52984: ST_TO_ADDR
// exit ;
52985: POP
52986: POP
52987: GO 52993
// end ;
52989: GO 52951
52991: POP
52992: POP
// end ;
52993: LD_VAR 0 1
52997: RET
// function CanWinLoose ; begin
52998: LD_INT 0
53000: PPUSH
// result := true ;
53001: LD_ADDR_VAR 0 1
53005: PUSH
53006: LD_INT 1
53008: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53009: CALL_OW 531
53013: PUSH
53014: CALL_OW 519
53018: PUSH
53019: LD_INT 1
53021: GREATER
53022: AND
53023: IFFALSE 53033
// result := false ;
53025: LD_ADDR_VAR 0 1
53029: PUSH
53030: LD_INT 0
53032: ST_TO_ADDR
// end ;
53033: LD_VAR 0 1
53037: RET
// function HasPower ( i ) ; begin
53038: LD_INT 0
53040: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53041: LD_ADDR_VAR 0 2
53045: PUSH
53046: LD_INT 22
53048: PUSH
53049: LD_VAR 0 1
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 2
53060: PUSH
53061: LD_INT 21
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 33
53073: PUSH
53074: LD_INT 3
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 33
53083: PUSH
53084: LD_INT 5
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PPUSH
53101: CALL_OW 69
53105: ST_TO_ADDR
// end ; end_of_file end_of_file
53106: LD_VAR 0 2
53110: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
53111: LD_VAR 0 1
53115: PPUSH
53116: LD_VAR 0 2
53120: PPUSH
53121: LD_VAR 0 3
53125: PPUSH
53126: LD_VAR 0 4
53130: PPUSH
53131: LD_VAR 0 5
53135: PPUSH
53136: LD_VAR 0 6
53140: PPUSH
53141: CALL 53342 0 6
// end ;
53145: PPOPN 6
53147: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
53148: LD_INT 0
53150: PPUSH
// begin if not units then
53151: LD_VAR 0 1
53155: NOT
53156: IFFALSE 53160
// exit ;
53158: GO 53160
// end ;
53160: PPOPN 7
53162: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
53163: CALL 53229 0 0
// end ; end_of_file
53167: PPOPN 1
53169: END
// export globalGameSaveCounter ; every 0 0$1 do
53170: GO 53172
53172: DISABLE
// begin enable ;
53173: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
53174: LD_STRING updateTimer(
53176: PUSH
53177: LD_OWVAR 1
53181: STR
53182: PUSH
53183: LD_STRING );
53185: STR
53186: PPUSH
53187: CALL_OW 559
// end ;
53191: END
// every 0 0$1 do
53192: GO 53194
53194: DISABLE
// begin globalGameSaveCounter := 0 ;
53195: LD_ADDR_EXP 41
53199: PUSH
53200: LD_INT 0
53202: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
53203: LD_STRING setGameSaveCounter(0)
53205: PPUSH
53206: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
53210: LD_STRING initStreamRollete();
53212: PPUSH
53213: CALL_OW 559
// InitStreamMode ;
53217: CALL 54560 0 0
// DefineStreamItems ( false ) ;
53221: LD_INT 0
53223: PPUSH
53224: CALL 55024 0 1
// end ;
53228: END
// export function SOS_MapStart ( ) ; begin
53229: LD_INT 0
53231: PPUSH
// if streamModeActive then
53232: LD_EXP 42
53236: IFFALSE 53245
// DefineStreamItems ( true ) ;
53238: LD_INT 1
53240: PPUSH
53241: CALL 55024 0 1
// UpdateLuaVariables ( ) ;
53245: CALL 53262 0 0
// UpdateFactoryWaypoints ( ) ;
53249: CALL 67893 0 0
// UpdateWarehouseGatheringPoints ( ) ;
53253: CALL 68150 0 0
// end ;
53257: LD_VAR 0 1
53261: RET
// function UpdateLuaVariables ( ) ; begin
53262: LD_INT 0
53264: PPUSH
// if globalGameSaveCounter then
53265: LD_EXP 41
53269: IFFALSE 53303
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
53271: LD_ADDR_EXP 41
53275: PUSH
53276: LD_EXP 41
53280: PPUSH
53281: CALL 41823 0 1
53285: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53286: LD_STRING setGameSaveCounter(
53288: PUSH
53289: LD_EXP 41
53293: STR
53294: PUSH
53295: LD_STRING )
53297: STR
53298: PPUSH
53299: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
53303: LD_STRING setGameDifficulty(
53305: PUSH
53306: LD_OWVAR 67
53310: STR
53311: PUSH
53312: LD_STRING )
53314: STR
53315: PPUSH
53316: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
53320: LD_STRING displayDifficulty(
53322: PUSH
53323: LD_OWVAR 67
53327: STR
53328: PUSH
53329: LD_STRING )
53331: STR
53332: PPUSH
53333: CALL_OW 559
// end ;
53337: LD_VAR 0 1
53341: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53342: LD_INT 0
53344: PPUSH
// if p2 = stream_mode then
53345: LD_VAR 0 2
53349: PUSH
53350: LD_INT 100
53352: EQUAL
53353: IFFALSE 54356
// begin if not StreamModeActive then
53355: LD_EXP 42
53359: NOT
53360: IFFALSE 53370
// StreamModeActive := true ;
53362: LD_ADDR_EXP 42
53366: PUSH
53367: LD_INT 1
53369: ST_TO_ADDR
// if p3 = 0 then
53370: LD_VAR 0 3
53374: PUSH
53375: LD_INT 0
53377: EQUAL
53378: IFFALSE 53384
// InitStreamMode ;
53380: CALL 54560 0 0
// if p3 = 1 then
53384: LD_VAR 0 3
53388: PUSH
53389: LD_INT 1
53391: EQUAL
53392: IFFALSE 53402
// sRocket := true ;
53394: LD_ADDR_EXP 47
53398: PUSH
53399: LD_INT 1
53401: ST_TO_ADDR
// if p3 = 2 then
53402: LD_VAR 0 3
53406: PUSH
53407: LD_INT 2
53409: EQUAL
53410: IFFALSE 53420
// sSpeed := true ;
53412: LD_ADDR_EXP 46
53416: PUSH
53417: LD_INT 1
53419: ST_TO_ADDR
// if p3 = 3 then
53420: LD_VAR 0 3
53424: PUSH
53425: LD_INT 3
53427: EQUAL
53428: IFFALSE 53438
// sEngine := true ;
53430: LD_ADDR_EXP 48
53434: PUSH
53435: LD_INT 1
53437: ST_TO_ADDR
// if p3 = 4 then
53438: LD_VAR 0 3
53442: PUSH
53443: LD_INT 4
53445: EQUAL
53446: IFFALSE 53456
// sSpec := true ;
53448: LD_ADDR_EXP 45
53452: PUSH
53453: LD_INT 1
53455: ST_TO_ADDR
// if p3 = 5 then
53456: LD_VAR 0 3
53460: PUSH
53461: LD_INT 5
53463: EQUAL
53464: IFFALSE 53474
// sLevel := true ;
53466: LD_ADDR_EXP 49
53470: PUSH
53471: LD_INT 1
53473: ST_TO_ADDR
// if p3 = 6 then
53474: LD_VAR 0 3
53478: PUSH
53479: LD_INT 6
53481: EQUAL
53482: IFFALSE 53492
// sArmoury := true ;
53484: LD_ADDR_EXP 50
53488: PUSH
53489: LD_INT 1
53491: ST_TO_ADDR
// if p3 = 7 then
53492: LD_VAR 0 3
53496: PUSH
53497: LD_INT 7
53499: EQUAL
53500: IFFALSE 53510
// sRadar := true ;
53502: LD_ADDR_EXP 51
53506: PUSH
53507: LD_INT 1
53509: ST_TO_ADDR
// if p3 = 8 then
53510: LD_VAR 0 3
53514: PUSH
53515: LD_INT 8
53517: EQUAL
53518: IFFALSE 53528
// sBunker := true ;
53520: LD_ADDR_EXP 52
53524: PUSH
53525: LD_INT 1
53527: ST_TO_ADDR
// if p3 = 9 then
53528: LD_VAR 0 3
53532: PUSH
53533: LD_INT 9
53535: EQUAL
53536: IFFALSE 53546
// sHack := true ;
53538: LD_ADDR_EXP 53
53542: PUSH
53543: LD_INT 1
53545: ST_TO_ADDR
// if p3 = 10 then
53546: LD_VAR 0 3
53550: PUSH
53551: LD_INT 10
53553: EQUAL
53554: IFFALSE 53564
// sFire := true ;
53556: LD_ADDR_EXP 54
53560: PUSH
53561: LD_INT 1
53563: ST_TO_ADDR
// if p3 = 11 then
53564: LD_VAR 0 3
53568: PUSH
53569: LD_INT 11
53571: EQUAL
53572: IFFALSE 53582
// sRefresh := true ;
53574: LD_ADDR_EXP 55
53578: PUSH
53579: LD_INT 1
53581: ST_TO_ADDR
// if p3 = 12 then
53582: LD_VAR 0 3
53586: PUSH
53587: LD_INT 12
53589: EQUAL
53590: IFFALSE 53600
// sExp := true ;
53592: LD_ADDR_EXP 56
53596: PUSH
53597: LD_INT 1
53599: ST_TO_ADDR
// if p3 = 13 then
53600: LD_VAR 0 3
53604: PUSH
53605: LD_INT 13
53607: EQUAL
53608: IFFALSE 53618
// sDepot := true ;
53610: LD_ADDR_EXP 57
53614: PUSH
53615: LD_INT 1
53617: ST_TO_ADDR
// if p3 = 14 then
53618: LD_VAR 0 3
53622: PUSH
53623: LD_INT 14
53625: EQUAL
53626: IFFALSE 53636
// sFlag := true ;
53628: LD_ADDR_EXP 58
53632: PUSH
53633: LD_INT 1
53635: ST_TO_ADDR
// if p3 = 15 then
53636: LD_VAR 0 3
53640: PUSH
53641: LD_INT 15
53643: EQUAL
53644: IFFALSE 53654
// sKamikadze := true ;
53646: LD_ADDR_EXP 66
53650: PUSH
53651: LD_INT 1
53653: ST_TO_ADDR
// if p3 = 16 then
53654: LD_VAR 0 3
53658: PUSH
53659: LD_INT 16
53661: EQUAL
53662: IFFALSE 53672
// sTroll := true ;
53664: LD_ADDR_EXP 67
53668: PUSH
53669: LD_INT 1
53671: ST_TO_ADDR
// if p3 = 17 then
53672: LD_VAR 0 3
53676: PUSH
53677: LD_INT 17
53679: EQUAL
53680: IFFALSE 53690
// sSlow := true ;
53682: LD_ADDR_EXP 68
53686: PUSH
53687: LD_INT 1
53689: ST_TO_ADDR
// if p3 = 18 then
53690: LD_VAR 0 3
53694: PUSH
53695: LD_INT 18
53697: EQUAL
53698: IFFALSE 53708
// sLack := true ;
53700: LD_ADDR_EXP 69
53704: PUSH
53705: LD_INT 1
53707: ST_TO_ADDR
// if p3 = 19 then
53708: LD_VAR 0 3
53712: PUSH
53713: LD_INT 19
53715: EQUAL
53716: IFFALSE 53726
// sTank := true ;
53718: LD_ADDR_EXP 71
53722: PUSH
53723: LD_INT 1
53725: ST_TO_ADDR
// if p3 = 20 then
53726: LD_VAR 0 3
53730: PUSH
53731: LD_INT 20
53733: EQUAL
53734: IFFALSE 53744
// sRemote := true ;
53736: LD_ADDR_EXP 72
53740: PUSH
53741: LD_INT 1
53743: ST_TO_ADDR
// if p3 = 21 then
53744: LD_VAR 0 3
53748: PUSH
53749: LD_INT 21
53751: EQUAL
53752: IFFALSE 53762
// sPowell := true ;
53754: LD_ADDR_EXP 73
53758: PUSH
53759: LD_INT 1
53761: ST_TO_ADDR
// if p3 = 22 then
53762: LD_VAR 0 3
53766: PUSH
53767: LD_INT 22
53769: EQUAL
53770: IFFALSE 53780
// sTeleport := true ;
53772: LD_ADDR_EXP 76
53776: PUSH
53777: LD_INT 1
53779: ST_TO_ADDR
// if p3 = 23 then
53780: LD_VAR 0 3
53784: PUSH
53785: LD_INT 23
53787: EQUAL
53788: IFFALSE 53798
// sOilTower := true ;
53790: LD_ADDR_EXP 78
53794: PUSH
53795: LD_INT 1
53797: ST_TO_ADDR
// if p3 = 24 then
53798: LD_VAR 0 3
53802: PUSH
53803: LD_INT 24
53805: EQUAL
53806: IFFALSE 53816
// sShovel := true ;
53808: LD_ADDR_EXP 79
53812: PUSH
53813: LD_INT 1
53815: ST_TO_ADDR
// if p3 = 25 then
53816: LD_VAR 0 3
53820: PUSH
53821: LD_INT 25
53823: EQUAL
53824: IFFALSE 53834
// sSheik := true ;
53826: LD_ADDR_EXP 80
53830: PUSH
53831: LD_INT 1
53833: ST_TO_ADDR
// if p3 = 26 then
53834: LD_VAR 0 3
53838: PUSH
53839: LD_INT 26
53841: EQUAL
53842: IFFALSE 53852
// sEarthquake := true ;
53844: LD_ADDR_EXP 82
53848: PUSH
53849: LD_INT 1
53851: ST_TO_ADDR
// if p3 = 27 then
53852: LD_VAR 0 3
53856: PUSH
53857: LD_INT 27
53859: EQUAL
53860: IFFALSE 53870
// sAI := true ;
53862: LD_ADDR_EXP 83
53866: PUSH
53867: LD_INT 1
53869: ST_TO_ADDR
// if p3 = 28 then
53870: LD_VAR 0 3
53874: PUSH
53875: LD_INT 28
53877: EQUAL
53878: IFFALSE 53888
// sCargo := true ;
53880: LD_ADDR_EXP 86
53884: PUSH
53885: LD_INT 1
53887: ST_TO_ADDR
// if p3 = 29 then
53888: LD_VAR 0 3
53892: PUSH
53893: LD_INT 29
53895: EQUAL
53896: IFFALSE 53906
// sDLaser := true ;
53898: LD_ADDR_EXP 87
53902: PUSH
53903: LD_INT 1
53905: ST_TO_ADDR
// if p3 = 30 then
53906: LD_VAR 0 3
53910: PUSH
53911: LD_INT 30
53913: EQUAL
53914: IFFALSE 53924
// sExchange := true ;
53916: LD_ADDR_EXP 88
53920: PUSH
53921: LD_INT 1
53923: ST_TO_ADDR
// if p3 = 31 then
53924: LD_VAR 0 3
53928: PUSH
53929: LD_INT 31
53931: EQUAL
53932: IFFALSE 53942
// sFac := true ;
53934: LD_ADDR_EXP 89
53938: PUSH
53939: LD_INT 1
53941: ST_TO_ADDR
// if p3 = 32 then
53942: LD_VAR 0 3
53946: PUSH
53947: LD_INT 32
53949: EQUAL
53950: IFFALSE 53960
// sPower := true ;
53952: LD_ADDR_EXP 90
53956: PUSH
53957: LD_INT 1
53959: ST_TO_ADDR
// if p3 = 33 then
53960: LD_VAR 0 3
53964: PUSH
53965: LD_INT 33
53967: EQUAL
53968: IFFALSE 53978
// sRandom := true ;
53970: LD_ADDR_EXP 91
53974: PUSH
53975: LD_INT 1
53977: ST_TO_ADDR
// if p3 = 34 then
53978: LD_VAR 0 3
53982: PUSH
53983: LD_INT 34
53985: EQUAL
53986: IFFALSE 53996
// sShield := true ;
53988: LD_ADDR_EXP 92
53992: PUSH
53993: LD_INT 1
53995: ST_TO_ADDR
// if p3 = 35 then
53996: LD_VAR 0 3
54000: PUSH
54001: LD_INT 35
54003: EQUAL
54004: IFFALSE 54014
// sTime := true ;
54006: LD_ADDR_EXP 93
54010: PUSH
54011: LD_INT 1
54013: ST_TO_ADDR
// if p3 = 36 then
54014: LD_VAR 0 3
54018: PUSH
54019: LD_INT 36
54021: EQUAL
54022: IFFALSE 54032
// sTools := true ;
54024: LD_ADDR_EXP 94
54028: PUSH
54029: LD_INT 1
54031: ST_TO_ADDR
// if p3 = 101 then
54032: LD_VAR 0 3
54036: PUSH
54037: LD_INT 101
54039: EQUAL
54040: IFFALSE 54050
// sSold := true ;
54042: LD_ADDR_EXP 59
54046: PUSH
54047: LD_INT 1
54049: ST_TO_ADDR
// if p3 = 102 then
54050: LD_VAR 0 3
54054: PUSH
54055: LD_INT 102
54057: EQUAL
54058: IFFALSE 54068
// sDiff := true ;
54060: LD_ADDR_EXP 60
54064: PUSH
54065: LD_INT 1
54067: ST_TO_ADDR
// if p3 = 103 then
54068: LD_VAR 0 3
54072: PUSH
54073: LD_INT 103
54075: EQUAL
54076: IFFALSE 54086
// sFog := true ;
54078: LD_ADDR_EXP 63
54082: PUSH
54083: LD_INT 1
54085: ST_TO_ADDR
// if p3 = 104 then
54086: LD_VAR 0 3
54090: PUSH
54091: LD_INT 104
54093: EQUAL
54094: IFFALSE 54104
// sReset := true ;
54096: LD_ADDR_EXP 64
54100: PUSH
54101: LD_INT 1
54103: ST_TO_ADDR
// if p3 = 105 then
54104: LD_VAR 0 3
54108: PUSH
54109: LD_INT 105
54111: EQUAL
54112: IFFALSE 54122
// sSun := true ;
54114: LD_ADDR_EXP 65
54118: PUSH
54119: LD_INT 1
54121: ST_TO_ADDR
// if p3 = 106 then
54122: LD_VAR 0 3
54126: PUSH
54127: LD_INT 106
54129: EQUAL
54130: IFFALSE 54140
// sTiger := true ;
54132: LD_ADDR_EXP 61
54136: PUSH
54137: LD_INT 1
54139: ST_TO_ADDR
// if p3 = 107 then
54140: LD_VAR 0 3
54144: PUSH
54145: LD_INT 107
54147: EQUAL
54148: IFFALSE 54158
// sBomb := true ;
54150: LD_ADDR_EXP 62
54154: PUSH
54155: LD_INT 1
54157: ST_TO_ADDR
// if p3 = 108 then
54158: LD_VAR 0 3
54162: PUSH
54163: LD_INT 108
54165: EQUAL
54166: IFFALSE 54176
// sWound := true ;
54168: LD_ADDR_EXP 70
54172: PUSH
54173: LD_INT 1
54175: ST_TO_ADDR
// if p3 = 109 then
54176: LD_VAR 0 3
54180: PUSH
54181: LD_INT 109
54183: EQUAL
54184: IFFALSE 54194
// sBetray := true ;
54186: LD_ADDR_EXP 74
54190: PUSH
54191: LD_INT 1
54193: ST_TO_ADDR
// if p3 = 110 then
54194: LD_VAR 0 3
54198: PUSH
54199: LD_INT 110
54201: EQUAL
54202: IFFALSE 54212
// sContamin := true ;
54204: LD_ADDR_EXP 75
54208: PUSH
54209: LD_INT 1
54211: ST_TO_ADDR
// if p3 = 111 then
54212: LD_VAR 0 3
54216: PUSH
54217: LD_INT 111
54219: EQUAL
54220: IFFALSE 54230
// sOil := true ;
54222: LD_ADDR_EXP 77
54226: PUSH
54227: LD_INT 1
54229: ST_TO_ADDR
// if p3 = 112 then
54230: LD_VAR 0 3
54234: PUSH
54235: LD_INT 112
54237: EQUAL
54238: IFFALSE 54248
// sStu := true ;
54240: LD_ADDR_EXP 81
54244: PUSH
54245: LD_INT 1
54247: ST_TO_ADDR
// if p3 = 113 then
54248: LD_VAR 0 3
54252: PUSH
54253: LD_INT 113
54255: EQUAL
54256: IFFALSE 54266
// sBazooka := true ;
54258: LD_ADDR_EXP 84
54262: PUSH
54263: LD_INT 1
54265: ST_TO_ADDR
// if p3 = 114 then
54266: LD_VAR 0 3
54270: PUSH
54271: LD_INT 114
54273: EQUAL
54274: IFFALSE 54284
// sMortar := true ;
54276: LD_ADDR_EXP 85
54280: PUSH
54281: LD_INT 1
54283: ST_TO_ADDR
// if p3 = 115 then
54284: LD_VAR 0 3
54288: PUSH
54289: LD_INT 115
54291: EQUAL
54292: IFFALSE 54302
// sRanger := true ;
54294: LD_ADDR_EXP 95
54298: PUSH
54299: LD_INT 1
54301: ST_TO_ADDR
// if p3 = 116 then
54302: LD_VAR 0 3
54306: PUSH
54307: LD_INT 116
54309: EQUAL
54310: IFFALSE 54320
// sComputer := true ;
54312: LD_ADDR_EXP 96
54316: PUSH
54317: LD_INT 1
54319: ST_TO_ADDR
// if p3 = 117 then
54320: LD_VAR 0 3
54324: PUSH
54325: LD_INT 117
54327: EQUAL
54328: IFFALSE 54338
// s30 := true ;
54330: LD_ADDR_EXP 97
54334: PUSH
54335: LD_INT 1
54337: ST_TO_ADDR
// if p3 = 118 then
54338: LD_VAR 0 3
54342: PUSH
54343: LD_INT 118
54345: EQUAL
54346: IFFALSE 54356
// s60 := true ;
54348: LD_ADDR_EXP 98
54352: PUSH
54353: LD_INT 1
54355: ST_TO_ADDR
// end ; if p2 = hack_mode then
54356: LD_VAR 0 2
54360: PUSH
54361: LD_INT 101
54363: EQUAL
54364: IFFALSE 54492
// begin case p3 of 1 :
54366: LD_VAR 0 3
54370: PUSH
54371: LD_INT 1
54373: DOUBLE
54374: EQUAL
54375: IFTRUE 54379
54377: GO 54386
54379: POP
// hHackUnlimitedResources ; 2 :
54380: CALL 66639 0 0
54384: GO 54492
54386: LD_INT 2
54388: DOUBLE
54389: EQUAL
54390: IFTRUE 54394
54392: GO 54401
54394: POP
// hHackSetLevel10 ; 3 :
54395: CALL 66772 0 0
54399: GO 54492
54401: LD_INT 3
54403: DOUBLE
54404: EQUAL
54405: IFTRUE 54409
54407: GO 54416
54409: POP
// hHackSetLevel10YourUnits ; 4 :
54410: CALL 66857 0 0
54414: GO 54492
54416: LD_INT 4
54418: DOUBLE
54419: EQUAL
54420: IFTRUE 54424
54422: GO 54431
54424: POP
// hHackInvincible ; 5 :
54425: CALL 67305 0 0
54429: GO 54492
54431: LD_INT 5
54433: DOUBLE
54434: EQUAL
54435: IFTRUE 54439
54437: GO 54446
54439: POP
// hHackInvisible ; 6 :
54440: CALL 67416 0 0
54444: GO 54492
54446: LD_INT 6
54448: DOUBLE
54449: EQUAL
54450: IFTRUE 54454
54452: GO 54461
54454: POP
// hHackChangeYourSide ; 7 :
54455: CALL 67473 0 0
54459: GO 54492
54461: LD_INT 7
54463: DOUBLE
54464: EQUAL
54465: IFTRUE 54469
54467: GO 54476
54469: POP
// hHackChangeUnitSide ; 8 :
54470: CALL 67515 0 0
54474: GO 54492
54476: LD_INT 8
54478: DOUBLE
54479: EQUAL
54480: IFTRUE 54484
54482: GO 54491
54484: POP
// hHackFog ; end ;
54485: CALL 67616 0 0
54489: GO 54492
54491: POP
// end ; if p2 = game_save_mode then
54492: LD_VAR 0 2
54496: PUSH
54497: LD_INT 102
54499: EQUAL
54500: IFFALSE 54555
// begin if p3 = 1 then
54502: LD_VAR 0 3
54506: PUSH
54507: LD_INT 1
54509: EQUAL
54510: IFFALSE 54522
// globalGameSaveCounter := p4 ;
54512: LD_ADDR_EXP 41
54516: PUSH
54517: LD_VAR 0 4
54521: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
54522: LD_VAR 0 3
54526: PUSH
54527: LD_INT 2
54529: EQUAL
54530: PUSH
54531: LD_EXP 41
54535: AND
54536: IFFALSE 54555
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
54538: LD_STRING setGameSaveCounter(
54540: PUSH
54541: LD_EXP 41
54545: STR
54546: PUSH
54547: LD_STRING )
54549: STR
54550: PPUSH
54551: CALL_OW 559
// end ; end ;
54555: LD_VAR 0 7
54559: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
54560: LD_INT 0
54562: PPUSH
// streamModeActive := false ;
54563: LD_ADDR_EXP 42
54567: PUSH
54568: LD_INT 0
54570: ST_TO_ADDR
// normalCounter := 36 ;
54571: LD_ADDR_EXP 43
54575: PUSH
54576: LD_INT 36
54578: ST_TO_ADDR
// hardcoreCounter := 18 ;
54579: LD_ADDR_EXP 44
54583: PUSH
54584: LD_INT 18
54586: ST_TO_ADDR
// sRocket := false ;
54587: LD_ADDR_EXP 47
54591: PUSH
54592: LD_INT 0
54594: ST_TO_ADDR
// sSpeed := false ;
54595: LD_ADDR_EXP 46
54599: PUSH
54600: LD_INT 0
54602: ST_TO_ADDR
// sEngine := false ;
54603: LD_ADDR_EXP 48
54607: PUSH
54608: LD_INT 0
54610: ST_TO_ADDR
// sSpec := false ;
54611: LD_ADDR_EXP 45
54615: PUSH
54616: LD_INT 0
54618: ST_TO_ADDR
// sLevel := false ;
54619: LD_ADDR_EXP 49
54623: PUSH
54624: LD_INT 0
54626: ST_TO_ADDR
// sArmoury := false ;
54627: LD_ADDR_EXP 50
54631: PUSH
54632: LD_INT 0
54634: ST_TO_ADDR
// sRadar := false ;
54635: LD_ADDR_EXP 51
54639: PUSH
54640: LD_INT 0
54642: ST_TO_ADDR
// sBunker := false ;
54643: LD_ADDR_EXP 52
54647: PUSH
54648: LD_INT 0
54650: ST_TO_ADDR
// sHack := false ;
54651: LD_ADDR_EXP 53
54655: PUSH
54656: LD_INT 0
54658: ST_TO_ADDR
// sFire := false ;
54659: LD_ADDR_EXP 54
54663: PUSH
54664: LD_INT 0
54666: ST_TO_ADDR
// sRefresh := false ;
54667: LD_ADDR_EXP 55
54671: PUSH
54672: LD_INT 0
54674: ST_TO_ADDR
// sExp := false ;
54675: LD_ADDR_EXP 56
54679: PUSH
54680: LD_INT 0
54682: ST_TO_ADDR
// sDepot := false ;
54683: LD_ADDR_EXP 57
54687: PUSH
54688: LD_INT 0
54690: ST_TO_ADDR
// sFlag := false ;
54691: LD_ADDR_EXP 58
54695: PUSH
54696: LD_INT 0
54698: ST_TO_ADDR
// sKamikadze := false ;
54699: LD_ADDR_EXP 66
54703: PUSH
54704: LD_INT 0
54706: ST_TO_ADDR
// sTroll := false ;
54707: LD_ADDR_EXP 67
54711: PUSH
54712: LD_INT 0
54714: ST_TO_ADDR
// sSlow := false ;
54715: LD_ADDR_EXP 68
54719: PUSH
54720: LD_INT 0
54722: ST_TO_ADDR
// sLack := false ;
54723: LD_ADDR_EXP 69
54727: PUSH
54728: LD_INT 0
54730: ST_TO_ADDR
// sTank := false ;
54731: LD_ADDR_EXP 71
54735: PUSH
54736: LD_INT 0
54738: ST_TO_ADDR
// sRemote := false ;
54739: LD_ADDR_EXP 72
54743: PUSH
54744: LD_INT 0
54746: ST_TO_ADDR
// sPowell := false ;
54747: LD_ADDR_EXP 73
54751: PUSH
54752: LD_INT 0
54754: ST_TO_ADDR
// sTeleport := false ;
54755: LD_ADDR_EXP 76
54759: PUSH
54760: LD_INT 0
54762: ST_TO_ADDR
// sOilTower := false ;
54763: LD_ADDR_EXP 78
54767: PUSH
54768: LD_INT 0
54770: ST_TO_ADDR
// sShovel := false ;
54771: LD_ADDR_EXP 79
54775: PUSH
54776: LD_INT 0
54778: ST_TO_ADDR
// sSheik := false ;
54779: LD_ADDR_EXP 80
54783: PUSH
54784: LD_INT 0
54786: ST_TO_ADDR
// sEarthquake := false ;
54787: LD_ADDR_EXP 82
54791: PUSH
54792: LD_INT 0
54794: ST_TO_ADDR
// sAI := false ;
54795: LD_ADDR_EXP 83
54799: PUSH
54800: LD_INT 0
54802: ST_TO_ADDR
// sCargo := false ;
54803: LD_ADDR_EXP 86
54807: PUSH
54808: LD_INT 0
54810: ST_TO_ADDR
// sDLaser := false ;
54811: LD_ADDR_EXP 87
54815: PUSH
54816: LD_INT 0
54818: ST_TO_ADDR
// sExchange := false ;
54819: LD_ADDR_EXP 88
54823: PUSH
54824: LD_INT 0
54826: ST_TO_ADDR
// sFac := false ;
54827: LD_ADDR_EXP 89
54831: PUSH
54832: LD_INT 0
54834: ST_TO_ADDR
// sPower := false ;
54835: LD_ADDR_EXP 90
54839: PUSH
54840: LD_INT 0
54842: ST_TO_ADDR
// sRandom := false ;
54843: LD_ADDR_EXP 91
54847: PUSH
54848: LD_INT 0
54850: ST_TO_ADDR
// sShield := false ;
54851: LD_ADDR_EXP 92
54855: PUSH
54856: LD_INT 0
54858: ST_TO_ADDR
// sTime := false ;
54859: LD_ADDR_EXP 93
54863: PUSH
54864: LD_INT 0
54866: ST_TO_ADDR
// sTools := false ;
54867: LD_ADDR_EXP 94
54871: PUSH
54872: LD_INT 0
54874: ST_TO_ADDR
// sSold := false ;
54875: LD_ADDR_EXP 59
54879: PUSH
54880: LD_INT 0
54882: ST_TO_ADDR
// sDiff := false ;
54883: LD_ADDR_EXP 60
54887: PUSH
54888: LD_INT 0
54890: ST_TO_ADDR
// sFog := false ;
54891: LD_ADDR_EXP 63
54895: PUSH
54896: LD_INT 0
54898: ST_TO_ADDR
// sReset := false ;
54899: LD_ADDR_EXP 64
54903: PUSH
54904: LD_INT 0
54906: ST_TO_ADDR
// sSun := false ;
54907: LD_ADDR_EXP 65
54911: PUSH
54912: LD_INT 0
54914: ST_TO_ADDR
// sTiger := false ;
54915: LD_ADDR_EXP 61
54919: PUSH
54920: LD_INT 0
54922: ST_TO_ADDR
// sBomb := false ;
54923: LD_ADDR_EXP 62
54927: PUSH
54928: LD_INT 0
54930: ST_TO_ADDR
// sWound := false ;
54931: LD_ADDR_EXP 70
54935: PUSH
54936: LD_INT 0
54938: ST_TO_ADDR
// sBetray := false ;
54939: LD_ADDR_EXP 74
54943: PUSH
54944: LD_INT 0
54946: ST_TO_ADDR
// sContamin := false ;
54947: LD_ADDR_EXP 75
54951: PUSH
54952: LD_INT 0
54954: ST_TO_ADDR
// sOil := false ;
54955: LD_ADDR_EXP 77
54959: PUSH
54960: LD_INT 0
54962: ST_TO_ADDR
// sStu := false ;
54963: LD_ADDR_EXP 81
54967: PUSH
54968: LD_INT 0
54970: ST_TO_ADDR
// sBazooka := false ;
54971: LD_ADDR_EXP 84
54975: PUSH
54976: LD_INT 0
54978: ST_TO_ADDR
// sMortar := false ;
54979: LD_ADDR_EXP 85
54983: PUSH
54984: LD_INT 0
54986: ST_TO_ADDR
// sRanger := false ;
54987: LD_ADDR_EXP 95
54991: PUSH
54992: LD_INT 0
54994: ST_TO_ADDR
// sComputer := false ;
54995: LD_ADDR_EXP 96
54999: PUSH
55000: LD_INT 0
55002: ST_TO_ADDR
// s30 := false ;
55003: LD_ADDR_EXP 97
55007: PUSH
55008: LD_INT 0
55010: ST_TO_ADDR
// s60 := false ;
55011: LD_ADDR_EXP 98
55015: PUSH
55016: LD_INT 0
55018: ST_TO_ADDR
// end ;
55019: LD_VAR 0 1
55023: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
55024: LD_INT 0
55026: PPUSH
55027: PPUSH
55028: PPUSH
55029: PPUSH
55030: PPUSH
55031: PPUSH
55032: PPUSH
// result := [ ] ;
55033: LD_ADDR_VAR 0 2
55037: PUSH
55038: EMPTY
55039: ST_TO_ADDR
// if campaign_id = 1 then
55040: LD_OWVAR 69
55044: PUSH
55045: LD_INT 1
55047: EQUAL
55048: IFFALSE 58214
// begin case mission_number of 1 :
55050: LD_OWVAR 70
55054: PUSH
55055: LD_INT 1
55057: DOUBLE
55058: EQUAL
55059: IFTRUE 55063
55061: GO 55139
55063: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
55064: LD_ADDR_VAR 0 2
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: LD_INT 4
55074: PUSH
55075: LD_INT 11
55077: PUSH
55078: LD_INT 12
55080: PUSH
55081: LD_INT 15
55083: PUSH
55084: LD_INT 16
55086: PUSH
55087: LD_INT 22
55089: PUSH
55090: LD_INT 23
55092: PUSH
55093: LD_INT 26
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 101
55109: PUSH
55110: LD_INT 102
55112: PUSH
55113: LD_INT 106
55115: PUSH
55116: LD_INT 116
55118: PUSH
55119: LD_INT 117
55121: PUSH
55122: LD_INT 118
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: ST_TO_ADDR
55137: GO 58212
55139: LD_INT 2
55141: DOUBLE
55142: EQUAL
55143: IFTRUE 55147
55145: GO 55231
55147: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
55148: LD_ADDR_VAR 0 2
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: LD_INT 4
55158: PUSH
55159: LD_INT 11
55161: PUSH
55162: LD_INT 12
55164: PUSH
55165: LD_INT 15
55167: PUSH
55168: LD_INT 16
55170: PUSH
55171: LD_INT 22
55173: PUSH
55174: LD_INT 23
55176: PUSH
55177: LD_INT 26
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 101
55193: PUSH
55194: LD_INT 102
55196: PUSH
55197: LD_INT 105
55199: PUSH
55200: LD_INT 106
55202: PUSH
55203: LD_INT 108
55205: PUSH
55206: LD_INT 116
55208: PUSH
55209: LD_INT 117
55211: PUSH
55212: LD_INT 118
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: ST_TO_ADDR
55229: GO 58212
55231: LD_INT 3
55233: DOUBLE
55234: EQUAL
55235: IFTRUE 55239
55237: GO 55327
55239: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
55240: LD_ADDR_VAR 0 2
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: LD_INT 4
55250: PUSH
55251: LD_INT 5
55253: PUSH
55254: LD_INT 11
55256: PUSH
55257: LD_INT 12
55259: PUSH
55260: LD_INT 15
55262: PUSH
55263: LD_INT 16
55265: PUSH
55266: LD_INT 22
55268: PUSH
55269: LD_INT 26
55271: PUSH
55272: LD_INT 36
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 101
55289: PUSH
55290: LD_INT 102
55292: PUSH
55293: LD_INT 105
55295: PUSH
55296: LD_INT 106
55298: PUSH
55299: LD_INT 108
55301: PUSH
55302: LD_INT 116
55304: PUSH
55305: LD_INT 117
55307: PUSH
55308: LD_INT 118
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: ST_TO_ADDR
55325: GO 58212
55327: LD_INT 4
55329: DOUBLE
55330: EQUAL
55331: IFTRUE 55335
55333: GO 55431
55335: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
55336: LD_ADDR_VAR 0 2
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: LD_INT 4
55346: PUSH
55347: LD_INT 5
55349: PUSH
55350: LD_INT 8
55352: PUSH
55353: LD_INT 11
55355: PUSH
55356: LD_INT 12
55358: PUSH
55359: LD_INT 15
55361: PUSH
55362: LD_INT 16
55364: PUSH
55365: LD_INT 22
55367: PUSH
55368: LD_INT 23
55370: PUSH
55371: LD_INT 26
55373: PUSH
55374: LD_INT 36
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 101
55393: PUSH
55394: LD_INT 102
55396: PUSH
55397: LD_INT 105
55399: PUSH
55400: LD_INT 106
55402: PUSH
55403: LD_INT 108
55405: PUSH
55406: LD_INT 116
55408: PUSH
55409: LD_INT 117
55411: PUSH
55412: LD_INT 118
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: ST_TO_ADDR
55429: GO 58212
55431: LD_INT 5
55433: DOUBLE
55434: EQUAL
55435: IFTRUE 55439
55437: GO 55551
55439: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
55440: LD_ADDR_VAR 0 2
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: LD_INT 4
55450: PUSH
55451: LD_INT 5
55453: PUSH
55454: LD_INT 6
55456: PUSH
55457: LD_INT 8
55459: PUSH
55460: LD_INT 11
55462: PUSH
55463: LD_INT 12
55465: PUSH
55466: LD_INT 15
55468: PUSH
55469: LD_INT 16
55471: PUSH
55472: LD_INT 22
55474: PUSH
55475: LD_INT 23
55477: PUSH
55478: LD_INT 25
55480: PUSH
55481: LD_INT 26
55483: PUSH
55484: LD_INT 36
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 101
55505: PUSH
55506: LD_INT 102
55508: PUSH
55509: LD_INT 105
55511: PUSH
55512: LD_INT 106
55514: PUSH
55515: LD_INT 108
55517: PUSH
55518: LD_INT 109
55520: PUSH
55521: LD_INT 112
55523: PUSH
55524: LD_INT 116
55526: PUSH
55527: LD_INT 117
55529: PUSH
55530: LD_INT 118
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: ST_TO_ADDR
55549: GO 58212
55551: LD_INT 6
55553: DOUBLE
55554: EQUAL
55555: IFTRUE 55559
55557: GO 55691
55559: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
55560: LD_ADDR_VAR 0 2
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: LD_INT 4
55570: PUSH
55571: LD_INT 5
55573: PUSH
55574: LD_INT 6
55576: PUSH
55577: LD_INT 8
55579: PUSH
55580: LD_INT 11
55582: PUSH
55583: LD_INT 12
55585: PUSH
55586: LD_INT 15
55588: PUSH
55589: LD_INT 16
55591: PUSH
55592: LD_INT 20
55594: PUSH
55595: LD_INT 21
55597: PUSH
55598: LD_INT 22
55600: PUSH
55601: LD_INT 23
55603: PUSH
55604: LD_INT 25
55606: PUSH
55607: LD_INT 26
55609: PUSH
55610: LD_INT 30
55612: PUSH
55613: LD_INT 31
55615: PUSH
55616: LD_INT 32
55618: PUSH
55619: LD_INT 36
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 101
55645: PUSH
55646: LD_INT 102
55648: PUSH
55649: LD_INT 105
55651: PUSH
55652: LD_INT 106
55654: PUSH
55655: LD_INT 108
55657: PUSH
55658: LD_INT 109
55660: PUSH
55661: LD_INT 112
55663: PUSH
55664: LD_INT 116
55666: PUSH
55667: LD_INT 117
55669: PUSH
55670: LD_INT 118
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: ST_TO_ADDR
55689: GO 58212
55691: LD_INT 7
55693: DOUBLE
55694: EQUAL
55695: IFTRUE 55699
55697: GO 55811
55699: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
55700: LD_ADDR_VAR 0 2
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: LD_INT 4
55710: PUSH
55711: LD_INT 5
55713: PUSH
55714: LD_INT 7
55716: PUSH
55717: LD_INT 11
55719: PUSH
55720: LD_INT 12
55722: PUSH
55723: LD_INT 15
55725: PUSH
55726: LD_INT 16
55728: PUSH
55729: LD_INT 20
55731: PUSH
55732: LD_INT 21
55734: PUSH
55735: LD_INT 22
55737: PUSH
55738: LD_INT 23
55740: PUSH
55741: LD_INT 25
55743: PUSH
55744: LD_INT 26
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 101
55765: PUSH
55766: LD_INT 102
55768: PUSH
55769: LD_INT 103
55771: PUSH
55772: LD_INT 105
55774: PUSH
55775: LD_INT 106
55777: PUSH
55778: LD_INT 108
55780: PUSH
55781: LD_INT 112
55783: PUSH
55784: LD_INT 116
55786: PUSH
55787: LD_INT 117
55789: PUSH
55790: LD_INT 118
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: ST_TO_ADDR
55809: GO 58212
55811: LD_INT 8
55813: DOUBLE
55814: EQUAL
55815: IFTRUE 55819
55817: GO 55959
55819: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
55820: LD_ADDR_VAR 0 2
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: LD_INT 4
55830: PUSH
55831: LD_INT 5
55833: PUSH
55834: LD_INT 6
55836: PUSH
55837: LD_INT 7
55839: PUSH
55840: LD_INT 8
55842: PUSH
55843: LD_INT 11
55845: PUSH
55846: LD_INT 12
55848: PUSH
55849: LD_INT 15
55851: PUSH
55852: LD_INT 16
55854: PUSH
55855: LD_INT 20
55857: PUSH
55858: LD_INT 21
55860: PUSH
55861: LD_INT 22
55863: PUSH
55864: LD_INT 23
55866: PUSH
55867: LD_INT 25
55869: PUSH
55870: LD_INT 26
55872: PUSH
55873: LD_INT 30
55875: PUSH
55876: LD_INT 31
55878: PUSH
55879: LD_INT 32
55881: PUSH
55882: LD_INT 36
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 101
55909: PUSH
55910: LD_INT 102
55912: PUSH
55913: LD_INT 103
55915: PUSH
55916: LD_INT 105
55918: PUSH
55919: LD_INT 106
55921: PUSH
55922: LD_INT 108
55924: PUSH
55925: LD_INT 109
55927: PUSH
55928: LD_INT 112
55930: PUSH
55931: LD_INT 116
55933: PUSH
55934: LD_INT 117
55936: PUSH
55937: LD_INT 118
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: ST_TO_ADDR
55957: GO 58212
55959: LD_INT 9
55961: DOUBLE
55962: EQUAL
55963: IFTRUE 55967
55965: GO 56115
55967: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
55968: LD_ADDR_VAR 0 2
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: LD_INT 4
55978: PUSH
55979: LD_INT 5
55981: PUSH
55982: LD_INT 6
55984: PUSH
55985: LD_INT 7
55987: PUSH
55988: LD_INT 8
55990: PUSH
55991: LD_INT 11
55993: PUSH
55994: LD_INT 12
55996: PUSH
55997: LD_INT 15
55999: PUSH
56000: LD_INT 16
56002: PUSH
56003: LD_INT 20
56005: PUSH
56006: LD_INT 21
56008: PUSH
56009: LD_INT 22
56011: PUSH
56012: LD_INT 23
56014: PUSH
56015: LD_INT 25
56017: PUSH
56018: LD_INT 26
56020: PUSH
56021: LD_INT 28
56023: PUSH
56024: LD_INT 30
56026: PUSH
56027: LD_INT 31
56029: PUSH
56030: LD_INT 32
56032: PUSH
56033: LD_INT 36
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 101
56061: PUSH
56062: LD_INT 102
56064: PUSH
56065: LD_INT 103
56067: PUSH
56068: LD_INT 105
56070: PUSH
56071: LD_INT 106
56073: PUSH
56074: LD_INT 108
56076: PUSH
56077: LD_INT 109
56079: PUSH
56080: LD_INT 112
56082: PUSH
56083: LD_INT 114
56085: PUSH
56086: LD_INT 116
56088: PUSH
56089: LD_INT 117
56091: PUSH
56092: LD_INT 118
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: ST_TO_ADDR
56113: GO 58212
56115: LD_INT 10
56117: DOUBLE
56118: EQUAL
56119: IFTRUE 56123
56121: GO 56319
56123: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
56124: LD_ADDR_VAR 0 2
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: LD_INT 4
56134: PUSH
56135: LD_INT 5
56137: PUSH
56138: LD_INT 6
56140: PUSH
56141: LD_INT 7
56143: PUSH
56144: LD_INT 8
56146: PUSH
56147: LD_INT 9
56149: PUSH
56150: LD_INT 10
56152: PUSH
56153: LD_INT 11
56155: PUSH
56156: LD_INT 12
56158: PUSH
56159: LD_INT 13
56161: PUSH
56162: LD_INT 14
56164: PUSH
56165: LD_INT 15
56167: PUSH
56168: LD_INT 16
56170: PUSH
56171: LD_INT 17
56173: PUSH
56174: LD_INT 18
56176: PUSH
56177: LD_INT 19
56179: PUSH
56180: LD_INT 20
56182: PUSH
56183: LD_INT 21
56185: PUSH
56186: LD_INT 22
56188: PUSH
56189: LD_INT 23
56191: PUSH
56192: LD_INT 24
56194: PUSH
56195: LD_INT 25
56197: PUSH
56198: LD_INT 26
56200: PUSH
56201: LD_INT 28
56203: PUSH
56204: LD_INT 30
56206: PUSH
56207: LD_INT 31
56209: PUSH
56210: LD_INT 32
56212: PUSH
56213: LD_INT 36
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 101
56249: PUSH
56250: LD_INT 102
56252: PUSH
56253: LD_INT 103
56255: PUSH
56256: LD_INT 104
56258: PUSH
56259: LD_INT 105
56261: PUSH
56262: LD_INT 106
56264: PUSH
56265: LD_INT 107
56267: PUSH
56268: LD_INT 108
56270: PUSH
56271: LD_INT 109
56273: PUSH
56274: LD_INT 110
56276: PUSH
56277: LD_INT 111
56279: PUSH
56280: LD_INT 112
56282: PUSH
56283: LD_INT 114
56285: PUSH
56286: LD_INT 116
56288: PUSH
56289: LD_INT 117
56291: PUSH
56292: LD_INT 118
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: ST_TO_ADDR
56317: GO 58212
56319: LD_INT 11
56321: DOUBLE
56322: EQUAL
56323: IFTRUE 56327
56325: GO 56531
56327: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
56328: LD_ADDR_VAR 0 2
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: LD_INT 3
56338: PUSH
56339: LD_INT 4
56341: PUSH
56342: LD_INT 5
56344: PUSH
56345: LD_INT 6
56347: PUSH
56348: LD_INT 7
56350: PUSH
56351: LD_INT 8
56353: PUSH
56354: LD_INT 9
56356: PUSH
56357: LD_INT 10
56359: PUSH
56360: LD_INT 11
56362: PUSH
56363: LD_INT 12
56365: PUSH
56366: LD_INT 13
56368: PUSH
56369: LD_INT 14
56371: PUSH
56372: LD_INT 15
56374: PUSH
56375: LD_INT 16
56377: PUSH
56378: LD_INT 17
56380: PUSH
56381: LD_INT 18
56383: PUSH
56384: LD_INT 19
56386: PUSH
56387: LD_INT 20
56389: PUSH
56390: LD_INT 21
56392: PUSH
56393: LD_INT 22
56395: PUSH
56396: LD_INT 23
56398: PUSH
56399: LD_INT 24
56401: PUSH
56402: LD_INT 25
56404: PUSH
56405: LD_INT 26
56407: PUSH
56408: LD_INT 28
56410: PUSH
56411: LD_INT 30
56413: PUSH
56414: LD_INT 31
56416: PUSH
56417: LD_INT 32
56419: PUSH
56420: LD_INT 34
56422: PUSH
56423: LD_INT 36
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 101
56461: PUSH
56462: LD_INT 102
56464: PUSH
56465: LD_INT 103
56467: PUSH
56468: LD_INT 104
56470: PUSH
56471: LD_INT 105
56473: PUSH
56474: LD_INT 106
56476: PUSH
56477: LD_INT 107
56479: PUSH
56480: LD_INT 108
56482: PUSH
56483: LD_INT 109
56485: PUSH
56486: LD_INT 110
56488: PUSH
56489: LD_INT 111
56491: PUSH
56492: LD_INT 112
56494: PUSH
56495: LD_INT 114
56497: PUSH
56498: LD_INT 116
56500: PUSH
56501: LD_INT 117
56503: PUSH
56504: LD_INT 118
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: ST_TO_ADDR
56529: GO 58212
56531: LD_INT 12
56533: DOUBLE
56534: EQUAL
56535: IFTRUE 56539
56537: GO 56759
56539: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
56540: LD_ADDR_VAR 0 2
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: LD_INT 2
56550: PUSH
56551: LD_INT 3
56553: PUSH
56554: LD_INT 4
56556: PUSH
56557: LD_INT 5
56559: PUSH
56560: LD_INT 6
56562: PUSH
56563: LD_INT 7
56565: PUSH
56566: LD_INT 8
56568: PUSH
56569: LD_INT 9
56571: PUSH
56572: LD_INT 10
56574: PUSH
56575: LD_INT 11
56577: PUSH
56578: LD_INT 12
56580: PUSH
56581: LD_INT 13
56583: PUSH
56584: LD_INT 14
56586: PUSH
56587: LD_INT 15
56589: PUSH
56590: LD_INT 16
56592: PUSH
56593: LD_INT 17
56595: PUSH
56596: LD_INT 18
56598: PUSH
56599: LD_INT 19
56601: PUSH
56602: LD_INT 20
56604: PUSH
56605: LD_INT 21
56607: PUSH
56608: LD_INT 22
56610: PUSH
56611: LD_INT 23
56613: PUSH
56614: LD_INT 24
56616: PUSH
56617: LD_INT 25
56619: PUSH
56620: LD_INT 26
56622: PUSH
56623: LD_INT 27
56625: PUSH
56626: LD_INT 28
56628: PUSH
56629: LD_INT 30
56631: PUSH
56632: LD_INT 31
56634: PUSH
56635: LD_INT 32
56637: PUSH
56638: LD_INT 33
56640: PUSH
56641: LD_INT 34
56643: PUSH
56644: LD_INT 36
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 101
56685: PUSH
56686: LD_INT 102
56688: PUSH
56689: LD_INT 103
56691: PUSH
56692: LD_INT 104
56694: PUSH
56695: LD_INT 105
56697: PUSH
56698: LD_INT 106
56700: PUSH
56701: LD_INT 107
56703: PUSH
56704: LD_INT 108
56706: PUSH
56707: LD_INT 109
56709: PUSH
56710: LD_INT 110
56712: PUSH
56713: LD_INT 111
56715: PUSH
56716: LD_INT 112
56718: PUSH
56719: LD_INT 113
56721: PUSH
56722: LD_INT 114
56724: PUSH
56725: LD_INT 116
56727: PUSH
56728: LD_INT 117
56730: PUSH
56731: LD_INT 118
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: ST_TO_ADDR
56757: GO 58212
56759: LD_INT 13
56761: DOUBLE
56762: EQUAL
56763: IFTRUE 56767
56765: GO 56975
56767: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
56768: LD_ADDR_VAR 0 2
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: LD_INT 2
56778: PUSH
56779: LD_INT 3
56781: PUSH
56782: LD_INT 4
56784: PUSH
56785: LD_INT 5
56787: PUSH
56788: LD_INT 8
56790: PUSH
56791: LD_INT 9
56793: PUSH
56794: LD_INT 10
56796: PUSH
56797: LD_INT 11
56799: PUSH
56800: LD_INT 12
56802: PUSH
56803: LD_INT 14
56805: PUSH
56806: LD_INT 15
56808: PUSH
56809: LD_INT 16
56811: PUSH
56812: LD_INT 17
56814: PUSH
56815: LD_INT 18
56817: PUSH
56818: LD_INT 19
56820: PUSH
56821: LD_INT 20
56823: PUSH
56824: LD_INT 21
56826: PUSH
56827: LD_INT 22
56829: PUSH
56830: LD_INT 23
56832: PUSH
56833: LD_INT 24
56835: PUSH
56836: LD_INT 25
56838: PUSH
56839: LD_INT 26
56841: PUSH
56842: LD_INT 27
56844: PUSH
56845: LD_INT 28
56847: PUSH
56848: LD_INT 30
56850: PUSH
56851: LD_INT 31
56853: PUSH
56854: LD_INT 32
56856: PUSH
56857: LD_INT 33
56859: PUSH
56860: LD_INT 34
56862: PUSH
56863: LD_INT 36
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 101
56901: PUSH
56902: LD_INT 102
56904: PUSH
56905: LD_INT 103
56907: PUSH
56908: LD_INT 104
56910: PUSH
56911: LD_INT 105
56913: PUSH
56914: LD_INT 106
56916: PUSH
56917: LD_INT 107
56919: PUSH
56920: LD_INT 108
56922: PUSH
56923: LD_INT 109
56925: PUSH
56926: LD_INT 110
56928: PUSH
56929: LD_INT 111
56931: PUSH
56932: LD_INT 112
56934: PUSH
56935: LD_INT 113
56937: PUSH
56938: LD_INT 114
56940: PUSH
56941: LD_INT 116
56943: PUSH
56944: LD_INT 117
56946: PUSH
56947: LD_INT 118
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: ST_TO_ADDR
56973: GO 58212
56975: LD_INT 14
56977: DOUBLE
56978: EQUAL
56979: IFTRUE 56983
56981: GO 57207
56983: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
56984: LD_ADDR_VAR 0 2
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: LD_INT 3
56997: PUSH
56998: LD_INT 4
57000: PUSH
57001: LD_INT 5
57003: PUSH
57004: LD_INT 6
57006: PUSH
57007: LD_INT 7
57009: PUSH
57010: LD_INT 8
57012: PUSH
57013: LD_INT 9
57015: PUSH
57016: LD_INT 10
57018: PUSH
57019: LD_INT 11
57021: PUSH
57022: LD_INT 12
57024: PUSH
57025: LD_INT 13
57027: PUSH
57028: LD_INT 14
57030: PUSH
57031: LD_INT 15
57033: PUSH
57034: LD_INT 16
57036: PUSH
57037: LD_INT 17
57039: PUSH
57040: LD_INT 18
57042: PUSH
57043: LD_INT 19
57045: PUSH
57046: LD_INT 20
57048: PUSH
57049: LD_INT 21
57051: PUSH
57052: LD_INT 22
57054: PUSH
57055: LD_INT 23
57057: PUSH
57058: LD_INT 24
57060: PUSH
57061: LD_INT 25
57063: PUSH
57064: LD_INT 26
57066: PUSH
57067: LD_INT 27
57069: PUSH
57070: LD_INT 28
57072: PUSH
57073: LD_INT 29
57075: PUSH
57076: LD_INT 30
57078: PUSH
57079: LD_INT 31
57081: PUSH
57082: LD_INT 32
57084: PUSH
57085: LD_INT 33
57087: PUSH
57088: LD_INT 34
57090: PUSH
57091: LD_INT 36
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 101
57133: PUSH
57134: LD_INT 102
57136: PUSH
57137: LD_INT 103
57139: PUSH
57140: LD_INT 104
57142: PUSH
57143: LD_INT 105
57145: PUSH
57146: LD_INT 106
57148: PUSH
57149: LD_INT 107
57151: PUSH
57152: LD_INT 108
57154: PUSH
57155: LD_INT 109
57157: PUSH
57158: LD_INT 110
57160: PUSH
57161: LD_INT 111
57163: PUSH
57164: LD_INT 112
57166: PUSH
57167: LD_INT 113
57169: PUSH
57170: LD_INT 114
57172: PUSH
57173: LD_INT 116
57175: PUSH
57176: LD_INT 117
57178: PUSH
57179: LD_INT 118
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: ST_TO_ADDR
57205: GO 58212
57207: LD_INT 15
57209: DOUBLE
57210: EQUAL
57211: IFTRUE 57215
57213: GO 57439
57215: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
57216: LD_ADDR_VAR 0 2
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: LD_INT 2
57226: PUSH
57227: LD_INT 3
57229: PUSH
57230: LD_INT 4
57232: PUSH
57233: LD_INT 5
57235: PUSH
57236: LD_INT 6
57238: PUSH
57239: LD_INT 7
57241: PUSH
57242: LD_INT 8
57244: PUSH
57245: LD_INT 9
57247: PUSH
57248: LD_INT 10
57250: PUSH
57251: LD_INT 11
57253: PUSH
57254: LD_INT 12
57256: PUSH
57257: LD_INT 13
57259: PUSH
57260: LD_INT 14
57262: PUSH
57263: LD_INT 15
57265: PUSH
57266: LD_INT 16
57268: PUSH
57269: LD_INT 17
57271: PUSH
57272: LD_INT 18
57274: PUSH
57275: LD_INT 19
57277: PUSH
57278: LD_INT 20
57280: PUSH
57281: LD_INT 21
57283: PUSH
57284: LD_INT 22
57286: PUSH
57287: LD_INT 23
57289: PUSH
57290: LD_INT 24
57292: PUSH
57293: LD_INT 25
57295: PUSH
57296: LD_INT 26
57298: PUSH
57299: LD_INT 27
57301: PUSH
57302: LD_INT 28
57304: PUSH
57305: LD_INT 29
57307: PUSH
57308: LD_INT 30
57310: PUSH
57311: LD_INT 31
57313: PUSH
57314: LD_INT 32
57316: PUSH
57317: LD_INT 33
57319: PUSH
57320: LD_INT 34
57322: PUSH
57323: LD_INT 36
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 101
57365: PUSH
57366: LD_INT 102
57368: PUSH
57369: LD_INT 103
57371: PUSH
57372: LD_INT 104
57374: PUSH
57375: LD_INT 105
57377: PUSH
57378: LD_INT 106
57380: PUSH
57381: LD_INT 107
57383: PUSH
57384: LD_INT 108
57386: PUSH
57387: LD_INT 109
57389: PUSH
57390: LD_INT 110
57392: PUSH
57393: LD_INT 111
57395: PUSH
57396: LD_INT 112
57398: PUSH
57399: LD_INT 113
57401: PUSH
57402: LD_INT 114
57404: PUSH
57405: LD_INT 116
57407: PUSH
57408: LD_INT 117
57410: PUSH
57411: LD_INT 118
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: ST_TO_ADDR
57437: GO 58212
57439: LD_INT 16
57441: DOUBLE
57442: EQUAL
57443: IFTRUE 57447
57445: GO 57583
57447: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
57448: LD_ADDR_VAR 0 2
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: LD_INT 4
57458: PUSH
57459: LD_INT 5
57461: PUSH
57462: LD_INT 7
57464: PUSH
57465: LD_INT 11
57467: PUSH
57468: LD_INT 12
57470: PUSH
57471: LD_INT 15
57473: PUSH
57474: LD_INT 16
57476: PUSH
57477: LD_INT 20
57479: PUSH
57480: LD_INT 21
57482: PUSH
57483: LD_INT 22
57485: PUSH
57486: LD_INT 23
57488: PUSH
57489: LD_INT 25
57491: PUSH
57492: LD_INT 26
57494: PUSH
57495: LD_INT 30
57497: PUSH
57498: LD_INT 31
57500: PUSH
57501: LD_INT 32
57503: PUSH
57504: LD_INT 33
57506: PUSH
57507: LD_INT 34
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 101
57533: PUSH
57534: LD_INT 102
57536: PUSH
57537: LD_INT 103
57539: PUSH
57540: LD_INT 106
57542: PUSH
57543: LD_INT 108
57545: PUSH
57546: LD_INT 112
57548: PUSH
57549: LD_INT 113
57551: PUSH
57552: LD_INT 114
57554: PUSH
57555: LD_INT 116
57557: PUSH
57558: LD_INT 117
57560: PUSH
57561: LD_INT 118
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: ST_TO_ADDR
57581: GO 58212
57583: LD_INT 17
57585: DOUBLE
57586: EQUAL
57587: IFTRUE 57591
57589: GO 57815
57591: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
57592: LD_ADDR_VAR 0 2
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: LD_INT 2
57602: PUSH
57603: LD_INT 3
57605: PUSH
57606: LD_INT 4
57608: PUSH
57609: LD_INT 5
57611: PUSH
57612: LD_INT 6
57614: PUSH
57615: LD_INT 7
57617: PUSH
57618: LD_INT 8
57620: PUSH
57621: LD_INT 9
57623: PUSH
57624: LD_INT 10
57626: PUSH
57627: LD_INT 11
57629: PUSH
57630: LD_INT 12
57632: PUSH
57633: LD_INT 13
57635: PUSH
57636: LD_INT 14
57638: PUSH
57639: LD_INT 15
57641: PUSH
57642: LD_INT 16
57644: PUSH
57645: LD_INT 17
57647: PUSH
57648: LD_INT 18
57650: PUSH
57651: LD_INT 19
57653: PUSH
57654: LD_INT 20
57656: PUSH
57657: LD_INT 21
57659: PUSH
57660: LD_INT 22
57662: PUSH
57663: LD_INT 23
57665: PUSH
57666: LD_INT 24
57668: PUSH
57669: LD_INT 25
57671: PUSH
57672: LD_INT 26
57674: PUSH
57675: LD_INT 27
57677: PUSH
57678: LD_INT 28
57680: PUSH
57681: LD_INT 29
57683: PUSH
57684: LD_INT 30
57686: PUSH
57687: LD_INT 31
57689: PUSH
57690: LD_INT 32
57692: PUSH
57693: LD_INT 33
57695: PUSH
57696: LD_INT 34
57698: PUSH
57699: LD_INT 36
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 101
57741: PUSH
57742: LD_INT 102
57744: PUSH
57745: LD_INT 103
57747: PUSH
57748: LD_INT 104
57750: PUSH
57751: LD_INT 105
57753: PUSH
57754: LD_INT 106
57756: PUSH
57757: LD_INT 107
57759: PUSH
57760: LD_INT 108
57762: PUSH
57763: LD_INT 109
57765: PUSH
57766: LD_INT 110
57768: PUSH
57769: LD_INT 111
57771: PUSH
57772: LD_INT 112
57774: PUSH
57775: LD_INT 113
57777: PUSH
57778: LD_INT 114
57780: PUSH
57781: LD_INT 116
57783: PUSH
57784: LD_INT 117
57786: PUSH
57787: LD_INT 118
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: ST_TO_ADDR
57813: GO 58212
57815: LD_INT 18
57817: DOUBLE
57818: EQUAL
57819: IFTRUE 57823
57821: GO 57971
57823: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
57824: LD_ADDR_VAR 0 2
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: LD_INT 4
57834: PUSH
57835: LD_INT 5
57837: PUSH
57838: LD_INT 7
57840: PUSH
57841: LD_INT 11
57843: PUSH
57844: LD_INT 12
57846: PUSH
57847: LD_INT 15
57849: PUSH
57850: LD_INT 16
57852: PUSH
57853: LD_INT 20
57855: PUSH
57856: LD_INT 21
57858: PUSH
57859: LD_INT 22
57861: PUSH
57862: LD_INT 23
57864: PUSH
57865: LD_INT 25
57867: PUSH
57868: LD_INT 26
57870: PUSH
57871: LD_INT 30
57873: PUSH
57874: LD_INT 31
57876: PUSH
57877: LD_INT 32
57879: PUSH
57880: LD_INT 33
57882: PUSH
57883: LD_INT 34
57885: PUSH
57886: LD_INT 35
57888: PUSH
57889: LD_INT 36
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 101
57917: PUSH
57918: LD_INT 102
57920: PUSH
57921: LD_INT 103
57923: PUSH
57924: LD_INT 106
57926: PUSH
57927: LD_INT 108
57929: PUSH
57930: LD_INT 112
57932: PUSH
57933: LD_INT 113
57935: PUSH
57936: LD_INT 114
57938: PUSH
57939: LD_INT 115
57941: PUSH
57942: LD_INT 116
57944: PUSH
57945: LD_INT 117
57947: PUSH
57948: LD_INT 118
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: ST_TO_ADDR
57969: GO 58212
57971: LD_INT 19
57973: DOUBLE
57974: EQUAL
57975: IFTRUE 57979
57977: GO 58211
57979: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
57980: LD_ADDR_VAR 0 2
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: LD_INT 2
57990: PUSH
57991: LD_INT 3
57993: PUSH
57994: LD_INT 4
57996: PUSH
57997: LD_INT 5
57999: PUSH
58000: LD_INT 6
58002: PUSH
58003: LD_INT 7
58005: PUSH
58006: LD_INT 8
58008: PUSH
58009: LD_INT 9
58011: PUSH
58012: LD_INT 10
58014: PUSH
58015: LD_INT 11
58017: PUSH
58018: LD_INT 12
58020: PUSH
58021: LD_INT 13
58023: PUSH
58024: LD_INT 14
58026: PUSH
58027: LD_INT 15
58029: PUSH
58030: LD_INT 16
58032: PUSH
58033: LD_INT 17
58035: PUSH
58036: LD_INT 18
58038: PUSH
58039: LD_INT 19
58041: PUSH
58042: LD_INT 20
58044: PUSH
58045: LD_INT 21
58047: PUSH
58048: LD_INT 22
58050: PUSH
58051: LD_INT 23
58053: PUSH
58054: LD_INT 24
58056: PUSH
58057: LD_INT 25
58059: PUSH
58060: LD_INT 26
58062: PUSH
58063: LD_INT 27
58065: PUSH
58066: LD_INT 28
58068: PUSH
58069: LD_INT 29
58071: PUSH
58072: LD_INT 30
58074: PUSH
58075: LD_INT 31
58077: PUSH
58078: LD_INT 32
58080: PUSH
58081: LD_INT 33
58083: PUSH
58084: LD_INT 34
58086: PUSH
58087: LD_INT 35
58089: PUSH
58090: LD_INT 36
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 101
58133: PUSH
58134: LD_INT 102
58136: PUSH
58137: LD_INT 103
58139: PUSH
58140: LD_INT 104
58142: PUSH
58143: LD_INT 105
58145: PUSH
58146: LD_INT 106
58148: PUSH
58149: LD_INT 107
58151: PUSH
58152: LD_INT 108
58154: PUSH
58155: LD_INT 109
58157: PUSH
58158: LD_INT 110
58160: PUSH
58161: LD_INT 111
58163: PUSH
58164: LD_INT 112
58166: PUSH
58167: LD_INT 113
58169: PUSH
58170: LD_INT 114
58172: PUSH
58173: LD_INT 115
58175: PUSH
58176: LD_INT 116
58178: PUSH
58179: LD_INT 117
58181: PUSH
58182: LD_INT 118
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: ST_TO_ADDR
58209: GO 58212
58211: POP
// end else
58212: GO 58443
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
58214: LD_ADDR_VAR 0 2
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: LD_INT 2
58224: PUSH
58225: LD_INT 3
58227: PUSH
58228: LD_INT 4
58230: PUSH
58231: LD_INT 5
58233: PUSH
58234: LD_INT 6
58236: PUSH
58237: LD_INT 7
58239: PUSH
58240: LD_INT 8
58242: PUSH
58243: LD_INT 9
58245: PUSH
58246: LD_INT 10
58248: PUSH
58249: LD_INT 11
58251: PUSH
58252: LD_INT 12
58254: PUSH
58255: LD_INT 13
58257: PUSH
58258: LD_INT 14
58260: PUSH
58261: LD_INT 15
58263: PUSH
58264: LD_INT 16
58266: PUSH
58267: LD_INT 17
58269: PUSH
58270: LD_INT 18
58272: PUSH
58273: LD_INT 19
58275: PUSH
58276: LD_INT 20
58278: PUSH
58279: LD_INT 21
58281: PUSH
58282: LD_INT 22
58284: PUSH
58285: LD_INT 23
58287: PUSH
58288: LD_INT 24
58290: PUSH
58291: LD_INT 25
58293: PUSH
58294: LD_INT 26
58296: PUSH
58297: LD_INT 27
58299: PUSH
58300: LD_INT 28
58302: PUSH
58303: LD_INT 29
58305: PUSH
58306: LD_INT 30
58308: PUSH
58309: LD_INT 31
58311: PUSH
58312: LD_INT 32
58314: PUSH
58315: LD_INT 33
58317: PUSH
58318: LD_INT 34
58320: PUSH
58321: LD_INT 35
58323: PUSH
58324: LD_INT 36
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 101
58367: PUSH
58368: LD_INT 102
58370: PUSH
58371: LD_INT 103
58373: PUSH
58374: LD_INT 104
58376: PUSH
58377: LD_INT 105
58379: PUSH
58380: LD_INT 106
58382: PUSH
58383: LD_INT 107
58385: PUSH
58386: LD_INT 108
58388: PUSH
58389: LD_INT 109
58391: PUSH
58392: LD_INT 110
58394: PUSH
58395: LD_INT 111
58397: PUSH
58398: LD_INT 112
58400: PUSH
58401: LD_INT 113
58403: PUSH
58404: LD_INT 114
58406: PUSH
58407: LD_INT 115
58409: PUSH
58410: LD_INT 116
58412: PUSH
58413: LD_INT 117
58415: PUSH
58416: LD_INT 118
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: ST_TO_ADDR
// if result then
58443: LD_VAR 0 2
58447: IFFALSE 59233
// begin normal :=  ;
58449: LD_ADDR_VAR 0 5
58453: PUSH
58454: LD_STRING 
58456: ST_TO_ADDR
// hardcore :=  ;
58457: LD_ADDR_VAR 0 6
58461: PUSH
58462: LD_STRING 
58464: ST_TO_ADDR
// active :=  ;
58465: LD_ADDR_VAR 0 7
58469: PUSH
58470: LD_STRING 
58472: ST_TO_ADDR
// for i = 1 to normalCounter do
58473: LD_ADDR_VAR 0 8
58477: PUSH
58478: DOUBLE
58479: LD_INT 1
58481: DEC
58482: ST_TO_ADDR
58483: LD_EXP 43
58487: PUSH
58488: FOR_TO
58489: IFFALSE 58590
// begin tmp := 0 ;
58491: LD_ADDR_VAR 0 3
58495: PUSH
58496: LD_STRING 0
58498: ST_TO_ADDR
// if result [ 1 ] then
58499: LD_VAR 0 2
58503: PUSH
58504: LD_INT 1
58506: ARRAY
58507: IFFALSE 58572
// if result [ 1 ] [ 1 ] = i then
58509: LD_VAR 0 2
58513: PUSH
58514: LD_INT 1
58516: ARRAY
58517: PUSH
58518: LD_INT 1
58520: ARRAY
58521: PUSH
58522: LD_VAR 0 8
58526: EQUAL
58527: IFFALSE 58572
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
58529: LD_ADDR_VAR 0 2
58533: PUSH
58534: LD_VAR 0 2
58538: PPUSH
58539: LD_INT 1
58541: PPUSH
58542: LD_VAR 0 2
58546: PUSH
58547: LD_INT 1
58549: ARRAY
58550: PPUSH
58551: LD_INT 1
58553: PPUSH
58554: CALL_OW 3
58558: PPUSH
58559: CALL_OW 1
58563: ST_TO_ADDR
// tmp := 1 ;
58564: LD_ADDR_VAR 0 3
58568: PUSH
58569: LD_STRING 1
58571: ST_TO_ADDR
// end ; normal := normal & tmp ;
58572: LD_ADDR_VAR 0 5
58576: PUSH
58577: LD_VAR 0 5
58581: PUSH
58582: LD_VAR 0 3
58586: STR
58587: ST_TO_ADDR
// end ;
58588: GO 58488
58590: POP
58591: POP
// for i = 1 to hardcoreCounter do
58592: LD_ADDR_VAR 0 8
58596: PUSH
58597: DOUBLE
58598: LD_INT 1
58600: DEC
58601: ST_TO_ADDR
58602: LD_EXP 44
58606: PUSH
58607: FOR_TO
58608: IFFALSE 58713
// begin tmp := 0 ;
58610: LD_ADDR_VAR 0 3
58614: PUSH
58615: LD_STRING 0
58617: ST_TO_ADDR
// if result [ 2 ] then
58618: LD_VAR 0 2
58622: PUSH
58623: LD_INT 2
58625: ARRAY
58626: IFFALSE 58695
// if result [ 2 ] [ 1 ] = 100 + i then
58628: LD_VAR 0 2
58632: PUSH
58633: LD_INT 2
58635: ARRAY
58636: PUSH
58637: LD_INT 1
58639: ARRAY
58640: PUSH
58641: LD_INT 100
58643: PUSH
58644: LD_VAR 0 8
58648: PLUS
58649: EQUAL
58650: IFFALSE 58695
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
58652: LD_ADDR_VAR 0 2
58656: PUSH
58657: LD_VAR 0 2
58661: PPUSH
58662: LD_INT 2
58664: PPUSH
58665: LD_VAR 0 2
58669: PUSH
58670: LD_INT 2
58672: ARRAY
58673: PPUSH
58674: LD_INT 1
58676: PPUSH
58677: CALL_OW 3
58681: PPUSH
58682: CALL_OW 1
58686: ST_TO_ADDR
// tmp := 1 ;
58687: LD_ADDR_VAR 0 3
58691: PUSH
58692: LD_STRING 1
58694: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
58695: LD_ADDR_VAR 0 6
58699: PUSH
58700: LD_VAR 0 6
58704: PUSH
58705: LD_VAR 0 3
58709: STR
58710: ST_TO_ADDR
// end ;
58711: GO 58607
58713: POP
58714: POP
// if isGameLoad then
58715: LD_VAR 0 1
58719: IFFALSE 59194
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
58721: LD_ADDR_VAR 0 4
58725: PUSH
58726: LD_EXP 47
58730: PUSH
58731: LD_EXP 46
58735: PUSH
58736: LD_EXP 48
58740: PUSH
58741: LD_EXP 45
58745: PUSH
58746: LD_EXP 49
58750: PUSH
58751: LD_EXP 50
58755: PUSH
58756: LD_EXP 51
58760: PUSH
58761: LD_EXP 52
58765: PUSH
58766: LD_EXP 53
58770: PUSH
58771: LD_EXP 54
58775: PUSH
58776: LD_EXP 55
58780: PUSH
58781: LD_EXP 56
58785: PUSH
58786: LD_EXP 57
58790: PUSH
58791: LD_EXP 58
58795: PUSH
58796: LD_EXP 66
58800: PUSH
58801: LD_EXP 67
58805: PUSH
58806: LD_EXP 68
58810: PUSH
58811: LD_EXP 69
58815: PUSH
58816: LD_EXP 71
58820: PUSH
58821: LD_EXP 72
58825: PUSH
58826: LD_EXP 73
58830: PUSH
58831: LD_EXP 76
58835: PUSH
58836: LD_EXP 78
58840: PUSH
58841: LD_EXP 79
58845: PUSH
58846: LD_EXP 80
58850: PUSH
58851: LD_EXP 82
58855: PUSH
58856: LD_EXP 83
58860: PUSH
58861: LD_EXP 86
58865: PUSH
58866: LD_EXP 87
58870: PUSH
58871: LD_EXP 88
58875: PUSH
58876: LD_EXP 89
58880: PUSH
58881: LD_EXP 90
58885: PUSH
58886: LD_EXP 91
58890: PUSH
58891: LD_EXP 92
58895: PUSH
58896: LD_EXP 93
58900: PUSH
58901: LD_EXP 94
58905: PUSH
58906: LD_EXP 59
58910: PUSH
58911: LD_EXP 60
58915: PUSH
58916: LD_EXP 63
58920: PUSH
58921: LD_EXP 64
58925: PUSH
58926: LD_EXP 65
58930: PUSH
58931: LD_EXP 61
58935: PUSH
58936: LD_EXP 62
58940: PUSH
58941: LD_EXP 70
58945: PUSH
58946: LD_EXP 74
58950: PUSH
58951: LD_EXP 75
58955: PUSH
58956: LD_EXP 77
58960: PUSH
58961: LD_EXP 81
58965: PUSH
58966: LD_EXP 84
58970: PUSH
58971: LD_EXP 85
58975: PUSH
58976: LD_EXP 95
58980: PUSH
58981: LD_EXP 96
58985: PUSH
58986: LD_EXP 97
58990: PUSH
58991: LD_EXP 98
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: ST_TO_ADDR
// tmp :=  ;
59052: LD_ADDR_VAR 0 3
59056: PUSH
59057: LD_STRING 
59059: ST_TO_ADDR
// for i = 1 to normalCounter do
59060: LD_ADDR_VAR 0 8
59064: PUSH
59065: DOUBLE
59066: LD_INT 1
59068: DEC
59069: ST_TO_ADDR
59070: LD_EXP 43
59074: PUSH
59075: FOR_TO
59076: IFFALSE 59112
// begin if flags [ i ] then
59078: LD_VAR 0 4
59082: PUSH
59083: LD_VAR 0 8
59087: ARRAY
59088: IFFALSE 59110
// tmp := tmp & i & ; ;
59090: LD_ADDR_VAR 0 3
59094: PUSH
59095: LD_VAR 0 3
59099: PUSH
59100: LD_VAR 0 8
59104: STR
59105: PUSH
59106: LD_STRING ;
59108: STR
59109: ST_TO_ADDR
// end ;
59110: GO 59075
59112: POP
59113: POP
// for i = 1 to hardcoreCounter do
59114: LD_ADDR_VAR 0 8
59118: PUSH
59119: DOUBLE
59120: LD_INT 1
59122: DEC
59123: ST_TO_ADDR
59124: LD_EXP 44
59128: PUSH
59129: FOR_TO
59130: IFFALSE 59176
// begin if flags [ normalCounter + i ] then
59132: LD_VAR 0 4
59136: PUSH
59137: LD_EXP 43
59141: PUSH
59142: LD_VAR 0 8
59146: PLUS
59147: ARRAY
59148: IFFALSE 59174
// tmp := tmp & ( 100 + i ) & ; ;
59150: LD_ADDR_VAR 0 3
59154: PUSH
59155: LD_VAR 0 3
59159: PUSH
59160: LD_INT 100
59162: PUSH
59163: LD_VAR 0 8
59167: PLUS
59168: STR
59169: PUSH
59170: LD_STRING ;
59172: STR
59173: ST_TO_ADDR
// end ;
59174: GO 59129
59176: POP
59177: POP
// if tmp then
59178: LD_VAR 0 3
59182: IFFALSE 59194
// active := tmp ;
59184: LD_ADDR_VAR 0 7
59188: PUSH
59189: LD_VAR 0 3
59193: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
59194: LD_STRING getStreamItemsFromMission("
59196: PUSH
59197: LD_VAR 0 5
59201: STR
59202: PUSH
59203: LD_STRING ","
59205: STR
59206: PUSH
59207: LD_VAR 0 6
59211: STR
59212: PUSH
59213: LD_STRING ","
59215: STR
59216: PUSH
59217: LD_VAR 0 7
59221: STR
59222: PUSH
59223: LD_STRING ")
59225: STR
59226: PPUSH
59227: CALL_OW 559
// end else
59231: GO 59240
// ToLua ( getStreamItemsFromMission("","","") ) ;
59233: LD_STRING getStreamItemsFromMission("","","")
59235: PPUSH
59236: CALL_OW 559
// end ;
59240: LD_VAR 0 2
59244: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
59245: LD_EXP 42
59249: PUSH
59250: LD_EXP 47
59254: AND
59255: IFFALSE 59379
59257: GO 59259
59259: DISABLE
59260: LD_INT 0
59262: PPUSH
59263: PPUSH
// begin enable ;
59264: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
59265: LD_ADDR_VAR 0 2
59269: PUSH
59270: LD_INT 22
59272: PUSH
59273: LD_OWVAR 2
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: LD_INT 34
59287: PUSH
59288: LD_INT 7
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 34
59297: PUSH
59298: LD_INT 45
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 34
59307: PUSH
59308: LD_INT 28
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 34
59317: PUSH
59318: LD_INT 47
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PPUSH
59336: CALL_OW 69
59340: ST_TO_ADDR
// if not tmp then
59341: LD_VAR 0 2
59345: NOT
59346: IFFALSE 59350
// exit ;
59348: GO 59379
// for i in tmp do
59350: LD_ADDR_VAR 0 1
59354: PUSH
59355: LD_VAR 0 2
59359: PUSH
59360: FOR_IN
59361: IFFALSE 59377
// begin SetLives ( i , 0 ) ;
59363: LD_VAR 0 1
59367: PPUSH
59368: LD_INT 0
59370: PPUSH
59371: CALL_OW 234
// end ;
59375: GO 59360
59377: POP
59378: POP
// end ;
59379: PPOPN 2
59381: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
59382: LD_EXP 42
59386: PUSH
59387: LD_EXP 48
59391: AND
59392: IFFALSE 59476
59394: GO 59396
59396: DISABLE
59397: LD_INT 0
59399: PPUSH
59400: PPUSH
// begin enable ;
59401: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
59402: LD_ADDR_VAR 0 2
59406: PUSH
59407: LD_INT 22
59409: PUSH
59410: LD_OWVAR 2
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 32
59421: PUSH
59422: LD_INT 3
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PPUSH
59433: CALL_OW 69
59437: ST_TO_ADDR
// if not tmp then
59438: LD_VAR 0 2
59442: NOT
59443: IFFALSE 59447
// exit ;
59445: GO 59476
// for i in tmp do
59447: LD_ADDR_VAR 0 1
59451: PUSH
59452: LD_VAR 0 2
59456: PUSH
59457: FOR_IN
59458: IFFALSE 59474
// begin SetLives ( i , 0 ) ;
59460: LD_VAR 0 1
59464: PPUSH
59465: LD_INT 0
59467: PPUSH
59468: CALL_OW 234
// end ;
59472: GO 59457
59474: POP
59475: POP
// end ;
59476: PPOPN 2
59478: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
59479: LD_EXP 42
59483: PUSH
59484: LD_EXP 45
59488: AND
59489: IFFALSE 59582
59491: GO 59493
59493: DISABLE
59494: LD_INT 0
59496: PPUSH
// begin enable ;
59497: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
59498: LD_ADDR_VAR 0 1
59502: PUSH
59503: LD_INT 22
59505: PUSH
59506: LD_OWVAR 2
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: PUSH
59518: LD_INT 25
59520: PUSH
59521: LD_INT 5
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 25
59530: PUSH
59531: LD_INT 9
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 25
59540: PUSH
59541: LD_INT 8
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PPUSH
59558: CALL_OW 69
59562: PUSH
59563: FOR_IN
59564: IFFALSE 59580
// begin SetClass ( i , 1 ) ;
59566: LD_VAR 0 1
59570: PPUSH
59571: LD_INT 1
59573: PPUSH
59574: CALL_OW 336
// end ;
59578: GO 59563
59580: POP
59581: POP
// end ;
59582: PPOPN 1
59584: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
59585: LD_EXP 42
59589: PUSH
59590: LD_EXP 46
59594: AND
59595: PUSH
59596: LD_OWVAR 65
59600: PUSH
59601: LD_INT 7
59603: LESS
59604: AND
59605: IFFALSE 59619
59607: GO 59609
59609: DISABLE
// begin enable ;
59610: ENABLE
// game_speed := 7 ;
59611: LD_ADDR_OWVAR 65
59615: PUSH
59616: LD_INT 7
59618: ST_TO_ADDR
// end ;
59619: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
59620: LD_EXP 42
59624: PUSH
59625: LD_EXP 49
59629: AND
59630: IFFALSE 59832
59632: GO 59634
59634: DISABLE
59635: LD_INT 0
59637: PPUSH
59638: PPUSH
59639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59640: LD_ADDR_VAR 0 3
59644: PUSH
59645: LD_INT 81
59647: PUSH
59648: LD_OWVAR 2
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 21
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PPUSH
59671: CALL_OW 69
59675: ST_TO_ADDR
// if not tmp then
59676: LD_VAR 0 3
59680: NOT
59681: IFFALSE 59685
// exit ;
59683: GO 59832
// if tmp > 5 then
59685: LD_VAR 0 3
59689: PUSH
59690: LD_INT 5
59692: GREATER
59693: IFFALSE 59705
// k := 5 else
59695: LD_ADDR_VAR 0 2
59699: PUSH
59700: LD_INT 5
59702: ST_TO_ADDR
59703: GO 59715
// k := tmp ;
59705: LD_ADDR_VAR 0 2
59709: PUSH
59710: LD_VAR 0 3
59714: ST_TO_ADDR
// for i := 1 to k do
59715: LD_ADDR_VAR 0 1
59719: PUSH
59720: DOUBLE
59721: LD_INT 1
59723: DEC
59724: ST_TO_ADDR
59725: LD_VAR 0 2
59729: PUSH
59730: FOR_TO
59731: IFFALSE 59830
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
59733: LD_VAR 0 3
59737: PUSH
59738: LD_VAR 0 1
59742: ARRAY
59743: PPUSH
59744: LD_VAR 0 1
59748: PUSH
59749: LD_INT 4
59751: MOD
59752: PUSH
59753: LD_INT 1
59755: PLUS
59756: PPUSH
59757: CALL_OW 259
59761: PUSH
59762: LD_INT 10
59764: LESS
59765: IFFALSE 59828
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
59767: LD_VAR 0 3
59771: PUSH
59772: LD_VAR 0 1
59776: ARRAY
59777: PPUSH
59778: LD_VAR 0 1
59782: PUSH
59783: LD_INT 4
59785: MOD
59786: PUSH
59787: LD_INT 1
59789: PLUS
59790: PPUSH
59791: LD_VAR 0 3
59795: PUSH
59796: LD_VAR 0 1
59800: ARRAY
59801: PPUSH
59802: LD_VAR 0 1
59806: PUSH
59807: LD_INT 4
59809: MOD
59810: PUSH
59811: LD_INT 1
59813: PLUS
59814: PPUSH
59815: CALL_OW 259
59819: PUSH
59820: LD_INT 1
59822: PLUS
59823: PPUSH
59824: CALL_OW 237
59828: GO 59730
59830: POP
59831: POP
// end ;
59832: PPOPN 3
59834: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
59835: LD_EXP 42
59839: PUSH
59840: LD_EXP 50
59844: AND
59845: IFFALSE 59865
59847: GO 59849
59849: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
59850: LD_INT 4
59852: PPUSH
59853: LD_OWVAR 2
59857: PPUSH
59858: LD_INT 0
59860: PPUSH
59861: CALL_OW 324
59865: END
// every 0 0$1 trigger StreamModeActive and sShovel do
59866: LD_EXP 42
59870: PUSH
59871: LD_EXP 79
59875: AND
59876: IFFALSE 59896
59878: GO 59880
59880: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
59881: LD_INT 19
59883: PPUSH
59884: LD_OWVAR 2
59888: PPUSH
59889: LD_INT 0
59891: PPUSH
59892: CALL_OW 324
59896: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
59897: LD_EXP 42
59901: PUSH
59902: LD_EXP 51
59906: AND
59907: IFFALSE 60009
59909: GO 59911
59911: DISABLE
59912: LD_INT 0
59914: PPUSH
59915: PPUSH
// begin enable ;
59916: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
59917: LD_ADDR_VAR 0 2
59921: PUSH
59922: LD_INT 22
59924: PUSH
59925: LD_OWVAR 2
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 2
59936: PUSH
59937: LD_INT 34
59939: PUSH
59940: LD_INT 11
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 34
59949: PUSH
59950: LD_INT 30
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: LIST
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PPUSH
59966: CALL_OW 69
59970: ST_TO_ADDR
// if not tmp then
59971: LD_VAR 0 2
59975: NOT
59976: IFFALSE 59980
// exit ;
59978: GO 60009
// for i in tmp do
59980: LD_ADDR_VAR 0 1
59984: PUSH
59985: LD_VAR 0 2
59989: PUSH
59990: FOR_IN
59991: IFFALSE 60007
// begin SetLives ( i , 0 ) ;
59993: LD_VAR 0 1
59997: PPUSH
59998: LD_INT 0
60000: PPUSH
60001: CALL_OW 234
// end ;
60005: GO 59990
60007: POP
60008: POP
// end ;
60009: PPOPN 2
60011: END
// every 0 0$1 trigger StreamModeActive and sBunker do
60012: LD_EXP 42
60016: PUSH
60017: LD_EXP 52
60021: AND
60022: IFFALSE 60042
60024: GO 60026
60026: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
60027: LD_INT 32
60029: PPUSH
60030: LD_OWVAR 2
60034: PPUSH
60035: LD_INT 0
60037: PPUSH
60038: CALL_OW 324
60042: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
60043: LD_EXP 42
60047: PUSH
60048: LD_EXP 53
60052: AND
60053: IFFALSE 60234
60055: GO 60057
60057: DISABLE
60058: LD_INT 0
60060: PPUSH
60061: PPUSH
60062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
60063: LD_ADDR_VAR 0 2
60067: PUSH
60068: LD_INT 22
60070: PUSH
60071: LD_OWVAR 2
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 33
60082: PUSH
60083: LD_INT 3
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PPUSH
60094: CALL_OW 69
60098: ST_TO_ADDR
// if not tmp then
60099: LD_VAR 0 2
60103: NOT
60104: IFFALSE 60108
// exit ;
60106: GO 60234
// side := 0 ;
60108: LD_ADDR_VAR 0 3
60112: PUSH
60113: LD_INT 0
60115: ST_TO_ADDR
// for i := 1 to 8 do
60116: LD_ADDR_VAR 0 1
60120: PUSH
60121: DOUBLE
60122: LD_INT 1
60124: DEC
60125: ST_TO_ADDR
60126: LD_INT 8
60128: PUSH
60129: FOR_TO
60130: IFFALSE 60178
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
60132: LD_OWVAR 2
60136: PUSH
60137: LD_VAR 0 1
60141: NONEQUAL
60142: PUSH
60143: LD_OWVAR 2
60147: PPUSH
60148: LD_VAR 0 1
60152: PPUSH
60153: CALL_OW 81
60157: PUSH
60158: LD_INT 2
60160: EQUAL
60161: AND
60162: IFFALSE 60176
// begin side := i ;
60164: LD_ADDR_VAR 0 3
60168: PUSH
60169: LD_VAR 0 1
60173: ST_TO_ADDR
// break ;
60174: GO 60178
// end ;
60176: GO 60129
60178: POP
60179: POP
// if not side then
60180: LD_VAR 0 3
60184: NOT
60185: IFFALSE 60189
// exit ;
60187: GO 60234
// for i := 1 to tmp do
60189: LD_ADDR_VAR 0 1
60193: PUSH
60194: DOUBLE
60195: LD_INT 1
60197: DEC
60198: ST_TO_ADDR
60199: LD_VAR 0 2
60203: PUSH
60204: FOR_TO
60205: IFFALSE 60232
// if Prob ( 60 ) then
60207: LD_INT 60
60209: PPUSH
60210: CALL_OW 13
60214: IFFALSE 60230
// SetSide ( i , side ) ;
60216: LD_VAR 0 1
60220: PPUSH
60221: LD_VAR 0 3
60225: PPUSH
60226: CALL_OW 235
60230: GO 60204
60232: POP
60233: POP
// end ;
60234: PPOPN 3
60236: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
60237: LD_EXP 42
60241: PUSH
60242: LD_EXP 55
60246: AND
60247: IFFALSE 60366
60249: GO 60251
60251: DISABLE
60252: LD_INT 0
60254: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
60255: LD_ADDR_VAR 0 1
60259: PUSH
60260: LD_INT 22
60262: PUSH
60263: LD_OWVAR 2
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 21
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 3
60284: PUSH
60285: LD_INT 23
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: LIST
60303: PPUSH
60304: CALL_OW 69
60308: PUSH
60309: FOR_IN
60310: IFFALSE 60364
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
60312: LD_VAR 0 1
60316: PPUSH
60317: CALL_OW 257
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: LD_INT 2
60327: PUSH
60328: LD_INT 3
60330: PUSH
60331: LD_INT 4
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: IN
60340: IFFALSE 60362
// SetClass ( un , rand ( 1 , 4 ) ) ;
60342: LD_VAR 0 1
60346: PPUSH
60347: LD_INT 1
60349: PPUSH
60350: LD_INT 4
60352: PPUSH
60353: CALL_OW 12
60357: PPUSH
60358: CALL_OW 336
60362: GO 60309
60364: POP
60365: POP
// end ;
60366: PPOPN 1
60368: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
60369: LD_EXP 42
60373: PUSH
60374: LD_EXP 54
60378: AND
60379: IFFALSE 60458
60381: GO 60383
60383: DISABLE
60384: LD_INT 0
60386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60387: LD_ADDR_VAR 0 1
60391: PUSH
60392: LD_INT 22
60394: PUSH
60395: LD_OWVAR 2
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 21
60406: PUSH
60407: LD_INT 3
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PPUSH
60418: CALL_OW 69
60422: ST_TO_ADDR
// if not tmp then
60423: LD_VAR 0 1
60427: NOT
60428: IFFALSE 60432
// exit ;
60430: GO 60458
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
60432: LD_VAR 0 1
60436: PUSH
60437: LD_INT 1
60439: PPUSH
60440: LD_VAR 0 1
60444: PPUSH
60445: CALL_OW 12
60449: ARRAY
60450: PPUSH
60451: LD_INT 100
60453: PPUSH
60454: CALL_OW 234
// end ;
60458: PPOPN 1
60460: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
60461: LD_EXP 42
60465: PUSH
60466: LD_EXP 56
60470: AND
60471: IFFALSE 60569
60473: GO 60475
60475: DISABLE
60476: LD_INT 0
60478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60479: LD_ADDR_VAR 0 1
60483: PUSH
60484: LD_INT 22
60486: PUSH
60487: LD_OWVAR 2
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 21
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PPUSH
60510: CALL_OW 69
60514: ST_TO_ADDR
// if not tmp then
60515: LD_VAR 0 1
60519: NOT
60520: IFFALSE 60524
// exit ;
60522: GO 60569
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
60524: LD_VAR 0 1
60528: PUSH
60529: LD_INT 1
60531: PPUSH
60532: LD_VAR 0 1
60536: PPUSH
60537: CALL_OW 12
60541: ARRAY
60542: PPUSH
60543: LD_INT 1
60545: PPUSH
60546: LD_INT 4
60548: PPUSH
60549: CALL_OW 12
60553: PPUSH
60554: LD_INT 3000
60556: PPUSH
60557: LD_INT 9000
60559: PPUSH
60560: CALL_OW 12
60564: PPUSH
60565: CALL_OW 492
// end ;
60569: PPOPN 1
60571: END
// every 0 0$1 trigger StreamModeActive and sDepot do
60572: LD_EXP 42
60576: PUSH
60577: LD_EXP 57
60581: AND
60582: IFFALSE 60602
60584: GO 60586
60586: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
60587: LD_INT 1
60589: PPUSH
60590: LD_OWVAR 2
60594: PPUSH
60595: LD_INT 0
60597: PPUSH
60598: CALL_OW 324
60602: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
60603: LD_EXP 42
60607: PUSH
60608: LD_EXP 58
60612: AND
60613: IFFALSE 60696
60615: GO 60617
60617: DISABLE
60618: LD_INT 0
60620: PPUSH
60621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60622: LD_ADDR_VAR 0 2
60626: PUSH
60627: LD_INT 22
60629: PUSH
60630: LD_OWVAR 2
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 21
60641: PUSH
60642: LD_INT 3
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PPUSH
60653: CALL_OW 69
60657: ST_TO_ADDR
// if not tmp then
60658: LD_VAR 0 2
60662: NOT
60663: IFFALSE 60667
// exit ;
60665: GO 60696
// for i in tmp do
60667: LD_ADDR_VAR 0 1
60671: PUSH
60672: LD_VAR 0 2
60676: PUSH
60677: FOR_IN
60678: IFFALSE 60694
// SetBLevel ( i , 10 ) ;
60680: LD_VAR 0 1
60684: PPUSH
60685: LD_INT 10
60687: PPUSH
60688: CALL_OW 241
60692: GO 60677
60694: POP
60695: POP
// end ;
60696: PPOPN 2
60698: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
60699: LD_EXP 42
60703: PUSH
60704: LD_EXP 59
60708: AND
60709: IFFALSE 60820
60711: GO 60713
60713: DISABLE
60714: LD_INT 0
60716: PPUSH
60717: PPUSH
60718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60719: LD_ADDR_VAR 0 3
60723: PUSH
60724: LD_INT 22
60726: PUSH
60727: LD_OWVAR 2
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 25
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PPUSH
60750: CALL_OW 69
60754: ST_TO_ADDR
// if not tmp then
60755: LD_VAR 0 3
60759: NOT
60760: IFFALSE 60764
// exit ;
60762: GO 60820
// un := tmp [ rand ( 1 , tmp ) ] ;
60764: LD_ADDR_VAR 0 2
60768: PUSH
60769: LD_VAR 0 3
60773: PUSH
60774: LD_INT 1
60776: PPUSH
60777: LD_VAR 0 3
60781: PPUSH
60782: CALL_OW 12
60786: ARRAY
60787: ST_TO_ADDR
// if Crawls ( un ) then
60788: LD_VAR 0 2
60792: PPUSH
60793: CALL_OW 318
60797: IFFALSE 60808
// ComWalk ( un ) ;
60799: LD_VAR 0 2
60803: PPUSH
60804: CALL_OW 138
// SetClass ( un , class_sniper ) ;
60808: LD_VAR 0 2
60812: PPUSH
60813: LD_INT 5
60815: PPUSH
60816: CALL_OW 336
// end ;
60820: PPOPN 3
60822: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
60823: LD_EXP 42
60827: PUSH
60828: LD_EXP 60
60832: AND
60833: PUSH
60834: LD_OWVAR 67
60838: PUSH
60839: LD_INT 4
60841: LESS
60842: AND
60843: IFFALSE 60862
60845: GO 60847
60847: DISABLE
// begin Difficulty := Difficulty + 1 ;
60848: LD_ADDR_OWVAR 67
60852: PUSH
60853: LD_OWVAR 67
60857: PUSH
60858: LD_INT 1
60860: PLUS
60861: ST_TO_ADDR
// end ;
60862: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
60863: LD_EXP 42
60867: PUSH
60868: LD_EXP 61
60872: AND
60873: IFFALSE 60976
60875: GO 60877
60877: DISABLE
60878: LD_INT 0
60880: PPUSH
// begin for i := 1 to 5 do
60881: LD_ADDR_VAR 0 1
60885: PUSH
60886: DOUBLE
60887: LD_INT 1
60889: DEC
60890: ST_TO_ADDR
60891: LD_INT 5
60893: PUSH
60894: FOR_TO
60895: IFFALSE 60974
// begin uc_nation := nation_nature ;
60897: LD_ADDR_OWVAR 21
60901: PUSH
60902: LD_INT 0
60904: ST_TO_ADDR
// uc_side := 0 ;
60905: LD_ADDR_OWVAR 20
60909: PUSH
60910: LD_INT 0
60912: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
60913: LD_ADDR_OWVAR 29
60917: PUSH
60918: LD_INT 12
60920: PUSH
60921: LD_INT 12
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: ST_TO_ADDR
// hc_agressivity := 20 ;
60928: LD_ADDR_OWVAR 35
60932: PUSH
60933: LD_INT 20
60935: ST_TO_ADDR
// hc_class := class_tiger ;
60936: LD_ADDR_OWVAR 28
60940: PUSH
60941: LD_INT 14
60943: ST_TO_ADDR
// hc_gallery :=  ;
60944: LD_ADDR_OWVAR 33
60948: PUSH
60949: LD_STRING 
60951: ST_TO_ADDR
// hc_name :=  ;
60952: LD_ADDR_OWVAR 26
60956: PUSH
60957: LD_STRING 
60959: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
60960: CALL_OW 44
60964: PPUSH
60965: LD_INT 0
60967: PPUSH
60968: CALL_OW 51
// end ;
60972: GO 60894
60974: POP
60975: POP
// end ;
60976: PPOPN 1
60978: END
// every 0 0$1 trigger StreamModeActive and sBomb do
60979: LD_EXP 42
60983: PUSH
60984: LD_EXP 62
60988: AND
60989: IFFALSE 60998
60991: GO 60993
60993: DISABLE
// StreamSibBomb ;
60994: CALL 60999 0 0
60998: END
// export function StreamSibBomb ; var i , x , y ; begin
60999: LD_INT 0
61001: PPUSH
61002: PPUSH
61003: PPUSH
61004: PPUSH
// result := false ;
61005: LD_ADDR_VAR 0 1
61009: PUSH
61010: LD_INT 0
61012: ST_TO_ADDR
// for i := 1 to 16 do
61013: LD_ADDR_VAR 0 2
61017: PUSH
61018: DOUBLE
61019: LD_INT 1
61021: DEC
61022: ST_TO_ADDR
61023: LD_INT 16
61025: PUSH
61026: FOR_TO
61027: IFFALSE 61226
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61029: LD_ADDR_VAR 0 3
61033: PUSH
61034: LD_INT 10
61036: PUSH
61037: LD_INT 20
61039: PUSH
61040: LD_INT 30
61042: PUSH
61043: LD_INT 40
61045: PUSH
61046: LD_INT 50
61048: PUSH
61049: LD_INT 60
61051: PUSH
61052: LD_INT 70
61054: PUSH
61055: LD_INT 80
61057: PUSH
61058: LD_INT 90
61060: PUSH
61061: LD_INT 100
61063: PUSH
61064: LD_INT 110
61066: PUSH
61067: LD_INT 120
61069: PUSH
61070: LD_INT 130
61072: PUSH
61073: LD_INT 140
61075: PUSH
61076: LD_INT 150
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: PPUSH
61099: LD_INT 15
61101: PPUSH
61102: CALL_OW 12
61106: ARRAY
61107: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61108: LD_ADDR_VAR 0 4
61112: PUSH
61113: LD_INT 10
61115: PUSH
61116: LD_INT 20
61118: PUSH
61119: LD_INT 30
61121: PUSH
61122: LD_INT 40
61124: PUSH
61125: LD_INT 50
61127: PUSH
61128: LD_INT 60
61130: PUSH
61131: LD_INT 70
61133: PUSH
61134: LD_INT 80
61136: PUSH
61137: LD_INT 90
61139: PUSH
61140: LD_INT 100
61142: PUSH
61143: LD_INT 110
61145: PUSH
61146: LD_INT 120
61148: PUSH
61149: LD_INT 130
61151: PUSH
61152: LD_INT 140
61154: PUSH
61155: LD_INT 150
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 1
61177: PPUSH
61178: LD_INT 15
61180: PPUSH
61181: CALL_OW 12
61185: ARRAY
61186: ST_TO_ADDR
// if ValidHex ( x , y ) then
61187: LD_VAR 0 3
61191: PPUSH
61192: LD_VAR 0 4
61196: PPUSH
61197: CALL_OW 488
61201: IFFALSE 61224
// begin result := [ x , y ] ;
61203: LD_ADDR_VAR 0 1
61207: PUSH
61208: LD_VAR 0 3
61212: PUSH
61213: LD_VAR 0 4
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: ST_TO_ADDR
// break ;
61222: GO 61226
// end ; end ;
61224: GO 61026
61226: POP
61227: POP
// if result then
61228: LD_VAR 0 1
61232: IFFALSE 61292
// begin ToLua ( playSibBomb() ) ;
61234: LD_STRING playSibBomb()
61236: PPUSH
61237: CALL_OW 559
// wait ( 0 0$14 ) ;
61241: LD_INT 490
61243: PPUSH
61244: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
61248: LD_VAR 0 1
61252: PUSH
61253: LD_INT 1
61255: ARRAY
61256: PPUSH
61257: LD_VAR 0 1
61261: PUSH
61262: LD_INT 2
61264: ARRAY
61265: PPUSH
61266: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
61270: LD_VAR 0 1
61274: PUSH
61275: LD_INT 1
61277: ARRAY
61278: PPUSH
61279: LD_VAR 0 1
61283: PUSH
61284: LD_INT 2
61286: ARRAY
61287: PPUSH
61288: CALL_OW 429
// end ; end ;
61292: LD_VAR 0 1
61296: RET
// every 0 0$1 trigger StreamModeActive and sReset do
61297: LD_EXP 42
61301: PUSH
61302: LD_EXP 64
61306: AND
61307: IFFALSE 61319
61309: GO 61311
61311: DISABLE
// YouLost (  ) ;
61312: LD_STRING 
61314: PPUSH
61315: CALL_OW 104
61319: END
// every 0 0$1 trigger StreamModeActive and sFog do
61320: LD_EXP 42
61324: PUSH
61325: LD_EXP 63
61329: AND
61330: IFFALSE 61344
61332: GO 61334
61334: DISABLE
// FogOff ( your_side ) ;
61335: LD_OWVAR 2
61339: PPUSH
61340: CALL_OW 344
61344: END
// every 0 0$1 trigger StreamModeActive and sSun do
61345: LD_EXP 42
61349: PUSH
61350: LD_EXP 65
61354: AND
61355: IFFALSE 61383
61357: GO 61359
61359: DISABLE
// begin solar_recharge_percent := 0 ;
61360: LD_ADDR_OWVAR 79
61364: PUSH
61365: LD_INT 0
61367: ST_TO_ADDR
// wait ( 5 5$00 ) ;
61368: LD_INT 10500
61370: PPUSH
61371: CALL_OW 67
// solar_recharge_percent := 100 ;
61375: LD_ADDR_OWVAR 79
61379: PUSH
61380: LD_INT 100
61382: ST_TO_ADDR
// end ;
61383: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
61384: LD_EXP 42
61388: PUSH
61389: LD_EXP 66
61393: AND
61394: IFFALSE 61633
61396: GO 61398
61398: DISABLE
61399: LD_INT 0
61401: PPUSH
61402: PPUSH
61403: PPUSH
// begin tmp := [ ] ;
61404: LD_ADDR_VAR 0 3
61408: PUSH
61409: EMPTY
61410: ST_TO_ADDR
// for i := 1 to 6 do
61411: LD_ADDR_VAR 0 1
61415: PUSH
61416: DOUBLE
61417: LD_INT 1
61419: DEC
61420: ST_TO_ADDR
61421: LD_INT 6
61423: PUSH
61424: FOR_TO
61425: IFFALSE 61530
// begin uc_nation := nation_nature ;
61427: LD_ADDR_OWVAR 21
61431: PUSH
61432: LD_INT 0
61434: ST_TO_ADDR
// uc_side := 0 ;
61435: LD_ADDR_OWVAR 20
61439: PUSH
61440: LD_INT 0
61442: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61443: LD_ADDR_OWVAR 29
61447: PUSH
61448: LD_INT 12
61450: PUSH
61451: LD_INT 12
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: ST_TO_ADDR
// hc_agressivity := 20 ;
61458: LD_ADDR_OWVAR 35
61462: PUSH
61463: LD_INT 20
61465: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
61466: LD_ADDR_OWVAR 28
61470: PUSH
61471: LD_INT 17
61473: ST_TO_ADDR
// hc_gallery :=  ;
61474: LD_ADDR_OWVAR 33
61478: PUSH
61479: LD_STRING 
61481: ST_TO_ADDR
// hc_name :=  ;
61482: LD_ADDR_OWVAR 26
61486: PUSH
61487: LD_STRING 
61489: ST_TO_ADDR
// un := CreateHuman ;
61490: LD_ADDR_VAR 0 2
61494: PUSH
61495: CALL_OW 44
61499: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
61500: LD_VAR 0 2
61504: PPUSH
61505: LD_INT 1
61507: PPUSH
61508: CALL_OW 51
// tmp := tmp ^ un ;
61512: LD_ADDR_VAR 0 3
61516: PUSH
61517: LD_VAR 0 3
61521: PUSH
61522: LD_VAR 0 2
61526: ADD
61527: ST_TO_ADDR
// end ;
61528: GO 61424
61530: POP
61531: POP
// repeat wait ( 0 0$1 ) ;
61532: LD_INT 35
61534: PPUSH
61535: CALL_OW 67
// for un in tmp do
61539: LD_ADDR_VAR 0 2
61543: PUSH
61544: LD_VAR 0 3
61548: PUSH
61549: FOR_IN
61550: IFFALSE 61624
// begin if IsDead ( un ) then
61552: LD_VAR 0 2
61556: PPUSH
61557: CALL_OW 301
61561: IFFALSE 61581
// begin tmp := tmp diff un ;
61563: LD_ADDR_VAR 0 3
61567: PUSH
61568: LD_VAR 0 3
61572: PUSH
61573: LD_VAR 0 2
61577: DIFF
61578: ST_TO_ADDR
// continue ;
61579: GO 61549
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
61581: LD_VAR 0 2
61585: PPUSH
61586: LD_INT 3
61588: PUSH
61589: LD_INT 22
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PPUSH
61603: CALL_OW 69
61607: PPUSH
61608: LD_VAR 0 2
61612: PPUSH
61613: CALL_OW 74
61617: PPUSH
61618: CALL_OW 115
// end ;
61622: GO 61549
61624: POP
61625: POP
// until not tmp ;
61626: LD_VAR 0 3
61630: NOT
61631: IFFALSE 61532
// end ;
61633: PPOPN 3
61635: END
// every 0 0$1 trigger StreamModeActive and sTroll do
61636: LD_EXP 42
61640: PUSH
61641: LD_EXP 67
61645: AND
61646: IFFALSE 61700
61648: GO 61650
61650: DISABLE
// begin ToLua ( displayTroll(); ) ;
61651: LD_STRING displayTroll();
61653: PPUSH
61654: CALL_OW 559
// wait ( 3 3$00 ) ;
61658: LD_INT 6300
61660: PPUSH
61661: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61665: LD_STRING hideTroll();
61667: PPUSH
61668: CALL_OW 559
// wait ( 1 1$00 ) ;
61672: LD_INT 2100
61674: PPUSH
61675: CALL_OW 67
// ToLua ( displayTroll(); ) ;
61679: LD_STRING displayTroll();
61681: PPUSH
61682: CALL_OW 559
// wait ( 1 1$00 ) ;
61686: LD_INT 2100
61688: PPUSH
61689: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61693: LD_STRING hideTroll();
61695: PPUSH
61696: CALL_OW 559
// end ;
61700: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
61701: LD_EXP 42
61705: PUSH
61706: LD_EXP 68
61710: AND
61711: IFFALSE 61774
61713: GO 61715
61715: DISABLE
61716: LD_INT 0
61718: PPUSH
// begin p := 0 ;
61719: LD_ADDR_VAR 0 1
61723: PUSH
61724: LD_INT 0
61726: ST_TO_ADDR
// repeat game_speed := 1 ;
61727: LD_ADDR_OWVAR 65
61731: PUSH
61732: LD_INT 1
61734: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61735: LD_INT 35
61737: PPUSH
61738: CALL_OW 67
// p := p + 1 ;
61742: LD_ADDR_VAR 0 1
61746: PUSH
61747: LD_VAR 0 1
61751: PUSH
61752: LD_INT 1
61754: PLUS
61755: ST_TO_ADDR
// until p >= 60 ;
61756: LD_VAR 0 1
61760: PUSH
61761: LD_INT 60
61763: GREATEREQUAL
61764: IFFALSE 61727
// game_speed := 4 ;
61766: LD_ADDR_OWVAR 65
61770: PUSH
61771: LD_INT 4
61773: ST_TO_ADDR
// end ;
61774: PPOPN 1
61776: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
61777: LD_EXP 42
61781: PUSH
61782: LD_EXP 69
61786: AND
61787: IFFALSE 61933
61789: GO 61791
61791: DISABLE
61792: LD_INT 0
61794: PPUSH
61795: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61796: LD_ADDR_VAR 0 1
61800: PUSH
61801: LD_INT 22
61803: PUSH
61804: LD_OWVAR 2
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 2
61815: PUSH
61816: LD_INT 30
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 30
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: LIST
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PPUSH
61845: CALL_OW 69
61849: ST_TO_ADDR
// if not depot then
61850: LD_VAR 0 1
61854: NOT
61855: IFFALSE 61859
// exit ;
61857: GO 61933
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
61859: LD_ADDR_VAR 0 2
61863: PUSH
61864: LD_VAR 0 1
61868: PUSH
61869: LD_INT 1
61871: PPUSH
61872: LD_VAR 0 1
61876: PPUSH
61877: CALL_OW 12
61881: ARRAY
61882: PPUSH
61883: CALL_OW 274
61887: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
61888: LD_VAR 0 2
61892: PPUSH
61893: LD_INT 1
61895: PPUSH
61896: LD_INT 0
61898: PPUSH
61899: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
61903: LD_VAR 0 2
61907: PPUSH
61908: LD_INT 2
61910: PPUSH
61911: LD_INT 0
61913: PPUSH
61914: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
61918: LD_VAR 0 2
61922: PPUSH
61923: LD_INT 3
61925: PPUSH
61926: LD_INT 0
61928: PPUSH
61929: CALL_OW 277
// end ;
61933: PPOPN 2
61935: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
61936: LD_EXP 42
61940: PUSH
61941: LD_EXP 70
61945: AND
61946: IFFALSE 62043
61948: GO 61950
61950: DISABLE
61951: LD_INT 0
61953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61954: LD_ADDR_VAR 0 1
61958: PUSH
61959: LD_INT 22
61961: PUSH
61962: LD_OWVAR 2
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 21
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 3
61983: PUSH
61984: LD_INT 23
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: LIST
62002: PPUSH
62003: CALL_OW 69
62007: ST_TO_ADDR
// if not tmp then
62008: LD_VAR 0 1
62012: NOT
62013: IFFALSE 62017
// exit ;
62015: GO 62043
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
62017: LD_VAR 0 1
62021: PUSH
62022: LD_INT 1
62024: PPUSH
62025: LD_VAR 0 1
62029: PPUSH
62030: CALL_OW 12
62034: ARRAY
62035: PPUSH
62036: LD_INT 200
62038: PPUSH
62039: CALL_OW 234
// end ;
62043: PPOPN 1
62045: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
62046: LD_EXP 42
62050: PUSH
62051: LD_EXP 71
62055: AND
62056: IFFALSE 62135
62058: GO 62060
62060: DISABLE
62061: LD_INT 0
62063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
62064: LD_ADDR_VAR 0 1
62068: PUSH
62069: LD_INT 22
62071: PUSH
62072: LD_OWVAR 2
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 21
62083: PUSH
62084: LD_INT 2
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PPUSH
62095: CALL_OW 69
62099: ST_TO_ADDR
// if not tmp then
62100: LD_VAR 0 1
62104: NOT
62105: IFFALSE 62109
// exit ;
62107: GO 62135
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
62109: LD_VAR 0 1
62113: PUSH
62114: LD_INT 1
62116: PPUSH
62117: LD_VAR 0 1
62121: PPUSH
62122: CALL_OW 12
62126: ARRAY
62127: PPUSH
62128: LD_INT 60
62130: PPUSH
62131: CALL_OW 234
// end ;
62135: PPOPN 1
62137: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
62138: LD_EXP 42
62142: PUSH
62143: LD_EXP 72
62147: AND
62148: IFFALSE 62247
62150: GO 62152
62152: DISABLE
62153: LD_INT 0
62155: PPUSH
62156: PPUSH
// begin enable ;
62157: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
62158: LD_ADDR_VAR 0 1
62162: PUSH
62163: LD_INT 22
62165: PUSH
62166: LD_OWVAR 2
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 61
62177: PUSH
62178: EMPTY
62179: LIST
62180: PUSH
62181: LD_INT 33
62183: PUSH
62184: LD_INT 2
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: LIST
62195: PPUSH
62196: CALL_OW 69
62200: ST_TO_ADDR
// if not tmp then
62201: LD_VAR 0 1
62205: NOT
62206: IFFALSE 62210
// exit ;
62208: GO 62247
// for i in tmp do
62210: LD_ADDR_VAR 0 2
62214: PUSH
62215: LD_VAR 0 1
62219: PUSH
62220: FOR_IN
62221: IFFALSE 62245
// if IsControledBy ( i ) then
62223: LD_VAR 0 2
62227: PPUSH
62228: CALL_OW 312
62232: IFFALSE 62243
// ComUnlink ( i ) ;
62234: LD_VAR 0 2
62238: PPUSH
62239: CALL_OW 136
62243: GO 62220
62245: POP
62246: POP
// end ;
62247: PPOPN 2
62249: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
62250: LD_EXP 42
62254: PUSH
62255: LD_EXP 73
62259: AND
62260: IFFALSE 62400
62262: GO 62264
62264: DISABLE
62265: LD_INT 0
62267: PPUSH
62268: PPUSH
// begin ToLua ( displayPowell(); ) ;
62269: LD_STRING displayPowell();
62271: PPUSH
62272: CALL_OW 559
// uc_side := 0 ;
62276: LD_ADDR_OWVAR 20
62280: PUSH
62281: LD_INT 0
62283: ST_TO_ADDR
// uc_nation := 2 ;
62284: LD_ADDR_OWVAR 21
62288: PUSH
62289: LD_INT 2
62291: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
62292: LD_ADDR_OWVAR 37
62296: PUSH
62297: LD_INT 14
62299: ST_TO_ADDR
// vc_engine := engine_siberite ;
62300: LD_ADDR_OWVAR 39
62304: PUSH
62305: LD_INT 3
62307: ST_TO_ADDR
// vc_control := control_apeman ;
62308: LD_ADDR_OWVAR 38
62312: PUSH
62313: LD_INT 5
62315: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
62316: LD_ADDR_OWVAR 40
62320: PUSH
62321: LD_INT 29
62323: ST_TO_ADDR
// un := CreateVehicle ;
62324: LD_ADDR_VAR 0 2
62328: PUSH
62329: CALL_OW 45
62333: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62334: LD_VAR 0 2
62338: PPUSH
62339: LD_INT 1
62341: PPUSH
62342: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62346: LD_INT 35
62348: PPUSH
62349: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62353: LD_VAR 0 2
62357: PPUSH
62358: LD_INT 22
62360: PUSH
62361: LD_OWVAR 2
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PPUSH
62370: CALL_OW 69
62374: PPUSH
62375: LD_VAR 0 2
62379: PPUSH
62380: CALL_OW 74
62384: PPUSH
62385: CALL_OW 115
// until IsDead ( un ) ;
62389: LD_VAR 0 2
62393: PPUSH
62394: CALL_OW 301
62398: IFFALSE 62346
// end ;
62400: PPOPN 2
62402: END
// every 0 0$1 trigger StreamModeActive and sStu do
62403: LD_EXP 42
62407: PUSH
62408: LD_EXP 81
62412: AND
62413: IFFALSE 62429
62415: GO 62417
62417: DISABLE
// begin ToLua ( displayStucuk(); ) ;
62418: LD_STRING displayStucuk();
62420: PPUSH
62421: CALL_OW 559
// ResetFog ;
62425: CALL_OW 335
// end ;
62429: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
62430: LD_EXP 42
62434: PUSH
62435: LD_EXP 74
62439: AND
62440: IFFALSE 62581
62442: GO 62444
62444: DISABLE
62445: LD_INT 0
62447: PPUSH
62448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62449: LD_ADDR_VAR 0 2
62453: PUSH
62454: LD_INT 22
62456: PUSH
62457: LD_OWVAR 2
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 21
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PPUSH
62480: CALL_OW 69
62484: ST_TO_ADDR
// if not tmp then
62485: LD_VAR 0 2
62489: NOT
62490: IFFALSE 62494
// exit ;
62492: GO 62581
// un := tmp [ rand ( 1 , tmp ) ] ;
62494: LD_ADDR_VAR 0 1
62498: PUSH
62499: LD_VAR 0 2
62503: PUSH
62504: LD_INT 1
62506: PPUSH
62507: LD_VAR 0 2
62511: PPUSH
62512: CALL_OW 12
62516: ARRAY
62517: ST_TO_ADDR
// SetSide ( un , 0 ) ;
62518: LD_VAR 0 1
62522: PPUSH
62523: LD_INT 0
62525: PPUSH
62526: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
62530: LD_VAR 0 1
62534: PPUSH
62535: LD_OWVAR 3
62539: PUSH
62540: LD_VAR 0 1
62544: DIFF
62545: PPUSH
62546: LD_VAR 0 1
62550: PPUSH
62551: CALL_OW 74
62555: PPUSH
62556: CALL_OW 115
// wait ( 0 0$20 ) ;
62560: LD_INT 700
62562: PPUSH
62563: CALL_OW 67
// SetSide ( un , your_side ) ;
62567: LD_VAR 0 1
62571: PPUSH
62572: LD_OWVAR 2
62576: PPUSH
62577: CALL_OW 235
// end ;
62581: PPOPN 2
62583: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
62584: LD_EXP 42
62588: PUSH
62589: LD_EXP 75
62593: AND
62594: IFFALSE 62700
62596: GO 62598
62598: DISABLE
62599: LD_INT 0
62601: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62602: LD_ADDR_VAR 0 1
62606: PUSH
62607: LD_INT 22
62609: PUSH
62610: LD_OWVAR 2
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 2
62621: PUSH
62622: LD_INT 30
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 30
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: LIST
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PPUSH
62651: CALL_OW 69
62655: ST_TO_ADDR
// if not depot then
62656: LD_VAR 0 1
62660: NOT
62661: IFFALSE 62665
// exit ;
62663: GO 62700
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
62665: LD_VAR 0 1
62669: PUSH
62670: LD_INT 1
62672: ARRAY
62673: PPUSH
62674: CALL_OW 250
62678: PPUSH
62679: LD_VAR 0 1
62683: PUSH
62684: LD_INT 1
62686: ARRAY
62687: PPUSH
62688: CALL_OW 251
62692: PPUSH
62693: LD_INT 70
62695: PPUSH
62696: CALL_OW 495
// end ;
62700: PPOPN 1
62702: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
62703: LD_EXP 42
62707: PUSH
62708: LD_EXP 76
62712: AND
62713: IFFALSE 62924
62715: GO 62717
62717: DISABLE
62718: LD_INT 0
62720: PPUSH
62721: PPUSH
62722: PPUSH
62723: PPUSH
62724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62725: LD_ADDR_VAR 0 5
62729: PUSH
62730: LD_INT 22
62732: PUSH
62733: LD_OWVAR 2
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 21
62744: PUSH
62745: LD_INT 1
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PPUSH
62756: CALL_OW 69
62760: ST_TO_ADDR
// if not tmp then
62761: LD_VAR 0 5
62765: NOT
62766: IFFALSE 62770
// exit ;
62768: GO 62924
// for i in tmp do
62770: LD_ADDR_VAR 0 1
62774: PUSH
62775: LD_VAR 0 5
62779: PUSH
62780: FOR_IN
62781: IFFALSE 62922
// begin d := rand ( 0 , 5 ) ;
62783: LD_ADDR_VAR 0 4
62787: PUSH
62788: LD_INT 0
62790: PPUSH
62791: LD_INT 5
62793: PPUSH
62794: CALL_OW 12
62798: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
62799: LD_ADDR_VAR 0 2
62803: PUSH
62804: LD_VAR 0 1
62808: PPUSH
62809: CALL_OW 250
62813: PPUSH
62814: LD_VAR 0 4
62818: PPUSH
62819: LD_INT 3
62821: PPUSH
62822: LD_INT 12
62824: PPUSH
62825: CALL_OW 12
62829: PPUSH
62830: CALL_OW 272
62834: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
62835: LD_ADDR_VAR 0 3
62839: PUSH
62840: LD_VAR 0 1
62844: PPUSH
62845: CALL_OW 251
62849: PPUSH
62850: LD_VAR 0 4
62854: PPUSH
62855: LD_INT 3
62857: PPUSH
62858: LD_INT 12
62860: PPUSH
62861: CALL_OW 12
62865: PPUSH
62866: CALL_OW 273
62870: ST_TO_ADDR
// if ValidHex ( x , y ) then
62871: LD_VAR 0 2
62875: PPUSH
62876: LD_VAR 0 3
62880: PPUSH
62881: CALL_OW 488
62885: IFFALSE 62920
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
62887: LD_VAR 0 1
62891: PPUSH
62892: LD_VAR 0 2
62896: PPUSH
62897: LD_VAR 0 3
62901: PPUSH
62902: LD_INT 3
62904: PPUSH
62905: LD_INT 6
62907: PPUSH
62908: CALL_OW 12
62912: PPUSH
62913: LD_INT 1
62915: PPUSH
62916: CALL_OW 483
// end ;
62920: GO 62780
62922: POP
62923: POP
// end ;
62924: PPOPN 5
62926: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
62927: LD_EXP 42
62931: PUSH
62932: LD_EXP 77
62936: AND
62937: IFFALSE 63031
62939: GO 62941
62941: DISABLE
62942: LD_INT 0
62944: PPUSH
62945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
62946: LD_ADDR_VAR 0 2
62950: PUSH
62951: LD_INT 22
62953: PUSH
62954: LD_OWVAR 2
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 32
62965: PUSH
62966: LD_INT 1
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 21
62975: PUSH
62976: LD_INT 2
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: LIST
62987: PPUSH
62988: CALL_OW 69
62992: ST_TO_ADDR
// if not tmp then
62993: LD_VAR 0 2
62997: NOT
62998: IFFALSE 63002
// exit ;
63000: GO 63031
// for i in tmp do
63002: LD_ADDR_VAR 0 1
63006: PUSH
63007: LD_VAR 0 2
63011: PUSH
63012: FOR_IN
63013: IFFALSE 63029
// SetFuel ( i , 0 ) ;
63015: LD_VAR 0 1
63019: PPUSH
63020: LD_INT 0
63022: PPUSH
63023: CALL_OW 240
63027: GO 63012
63029: POP
63030: POP
// end ;
63031: PPOPN 2
63033: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
63034: LD_EXP 42
63038: PUSH
63039: LD_EXP 78
63043: AND
63044: IFFALSE 63110
63046: GO 63048
63048: DISABLE
63049: LD_INT 0
63051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63052: LD_ADDR_VAR 0 1
63056: PUSH
63057: LD_INT 22
63059: PUSH
63060: LD_OWVAR 2
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 30
63071: PUSH
63072: LD_INT 29
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PPUSH
63083: CALL_OW 69
63087: ST_TO_ADDR
// if not tmp then
63088: LD_VAR 0 1
63092: NOT
63093: IFFALSE 63097
// exit ;
63095: GO 63110
// DestroyUnit ( tmp [ 1 ] ) ;
63097: LD_VAR 0 1
63101: PUSH
63102: LD_INT 1
63104: ARRAY
63105: PPUSH
63106: CALL_OW 65
// end ;
63110: PPOPN 1
63112: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
63113: LD_EXP 42
63117: PUSH
63118: LD_EXP 80
63122: AND
63123: IFFALSE 63252
63125: GO 63127
63127: DISABLE
63128: LD_INT 0
63130: PPUSH
// begin uc_side := 0 ;
63131: LD_ADDR_OWVAR 20
63135: PUSH
63136: LD_INT 0
63138: ST_TO_ADDR
// uc_nation := nation_arabian ;
63139: LD_ADDR_OWVAR 21
63143: PUSH
63144: LD_INT 2
63146: ST_TO_ADDR
// hc_gallery :=  ;
63147: LD_ADDR_OWVAR 33
63151: PUSH
63152: LD_STRING 
63154: ST_TO_ADDR
// hc_name :=  ;
63155: LD_ADDR_OWVAR 26
63159: PUSH
63160: LD_STRING 
63162: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
63163: LD_INT 1
63165: PPUSH
63166: LD_INT 11
63168: PPUSH
63169: LD_INT 10
63171: PPUSH
63172: CALL_OW 380
// un := CreateHuman ;
63176: LD_ADDR_VAR 0 1
63180: PUSH
63181: CALL_OW 44
63185: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63186: LD_VAR 0 1
63190: PPUSH
63191: LD_INT 1
63193: PPUSH
63194: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63198: LD_INT 35
63200: PPUSH
63201: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63205: LD_VAR 0 1
63209: PPUSH
63210: LD_INT 22
63212: PUSH
63213: LD_OWVAR 2
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PPUSH
63222: CALL_OW 69
63226: PPUSH
63227: LD_VAR 0 1
63231: PPUSH
63232: CALL_OW 74
63236: PPUSH
63237: CALL_OW 115
// until IsDead ( un ) ;
63241: LD_VAR 0 1
63245: PPUSH
63246: CALL_OW 301
63250: IFFALSE 63198
// end ;
63252: PPOPN 1
63254: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
63255: LD_EXP 42
63259: PUSH
63260: LD_EXP 82
63264: AND
63265: IFFALSE 63277
63267: GO 63269
63269: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
63270: LD_STRING earthquake(getX(game), 0, 32)
63272: PPUSH
63273: CALL_OW 559
63277: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
63278: LD_EXP 42
63282: PUSH
63283: LD_EXP 83
63287: AND
63288: IFFALSE 63379
63290: GO 63292
63292: DISABLE
63293: LD_INT 0
63295: PPUSH
// begin enable ;
63296: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
63297: LD_ADDR_VAR 0 1
63301: PUSH
63302: LD_INT 22
63304: PUSH
63305: LD_OWVAR 2
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 21
63316: PUSH
63317: LD_INT 2
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 33
63326: PUSH
63327: LD_INT 3
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: LIST
63338: PPUSH
63339: CALL_OW 69
63343: ST_TO_ADDR
// if not tmp then
63344: LD_VAR 0 1
63348: NOT
63349: IFFALSE 63353
// exit ;
63351: GO 63379
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63353: LD_VAR 0 1
63357: PUSH
63358: LD_INT 1
63360: PPUSH
63361: LD_VAR 0 1
63365: PPUSH
63366: CALL_OW 12
63370: ARRAY
63371: PPUSH
63372: LD_INT 1
63374: PPUSH
63375: CALL_OW 234
// end ;
63379: PPOPN 1
63381: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
63382: LD_EXP 42
63386: PUSH
63387: LD_EXP 84
63391: AND
63392: IFFALSE 63533
63394: GO 63396
63396: DISABLE
63397: LD_INT 0
63399: PPUSH
63400: PPUSH
63401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63402: LD_ADDR_VAR 0 3
63406: PUSH
63407: LD_INT 22
63409: PUSH
63410: LD_OWVAR 2
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 25
63421: PUSH
63422: LD_INT 1
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PPUSH
63433: CALL_OW 69
63437: ST_TO_ADDR
// if not tmp then
63438: LD_VAR 0 3
63442: NOT
63443: IFFALSE 63447
// exit ;
63445: GO 63533
// un := tmp [ rand ( 1 , tmp ) ] ;
63447: LD_ADDR_VAR 0 2
63451: PUSH
63452: LD_VAR 0 3
63456: PUSH
63457: LD_INT 1
63459: PPUSH
63460: LD_VAR 0 3
63464: PPUSH
63465: CALL_OW 12
63469: ARRAY
63470: ST_TO_ADDR
// if Crawls ( un ) then
63471: LD_VAR 0 2
63475: PPUSH
63476: CALL_OW 318
63480: IFFALSE 63491
// ComWalk ( un ) ;
63482: LD_VAR 0 2
63486: PPUSH
63487: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
63491: LD_VAR 0 2
63495: PPUSH
63496: LD_INT 9
63498: PPUSH
63499: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
63503: LD_INT 28
63505: PPUSH
63506: LD_OWVAR 2
63510: PPUSH
63511: LD_INT 2
63513: PPUSH
63514: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
63518: LD_INT 29
63520: PPUSH
63521: LD_OWVAR 2
63525: PPUSH
63526: LD_INT 2
63528: PPUSH
63529: CALL_OW 322
// end ;
63533: PPOPN 3
63535: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
63536: LD_EXP 42
63540: PUSH
63541: LD_EXP 85
63545: AND
63546: IFFALSE 63657
63548: GO 63550
63550: DISABLE
63551: LD_INT 0
63553: PPUSH
63554: PPUSH
63555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63556: LD_ADDR_VAR 0 3
63560: PUSH
63561: LD_INT 22
63563: PUSH
63564: LD_OWVAR 2
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 25
63575: PUSH
63576: LD_INT 1
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PPUSH
63587: CALL_OW 69
63591: ST_TO_ADDR
// if not tmp then
63592: LD_VAR 0 3
63596: NOT
63597: IFFALSE 63601
// exit ;
63599: GO 63657
// un := tmp [ rand ( 1 , tmp ) ] ;
63601: LD_ADDR_VAR 0 2
63605: PUSH
63606: LD_VAR 0 3
63610: PUSH
63611: LD_INT 1
63613: PPUSH
63614: LD_VAR 0 3
63618: PPUSH
63619: CALL_OW 12
63623: ARRAY
63624: ST_TO_ADDR
// if Crawls ( un ) then
63625: LD_VAR 0 2
63629: PPUSH
63630: CALL_OW 318
63634: IFFALSE 63645
// ComWalk ( un ) ;
63636: LD_VAR 0 2
63640: PPUSH
63641: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63645: LD_VAR 0 2
63649: PPUSH
63650: LD_INT 8
63652: PPUSH
63653: CALL_OW 336
// end ;
63657: PPOPN 3
63659: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
63660: LD_EXP 42
63664: PUSH
63665: LD_EXP 86
63669: AND
63670: IFFALSE 63814
63672: GO 63674
63674: DISABLE
63675: LD_INT 0
63677: PPUSH
63678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
63679: LD_ADDR_VAR 0 2
63683: PUSH
63684: LD_INT 22
63686: PUSH
63687: LD_OWVAR 2
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 21
63698: PUSH
63699: LD_INT 2
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 2
63708: PUSH
63709: LD_INT 34
63711: PUSH
63712: LD_INT 12
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 34
63721: PUSH
63722: LD_INT 51
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 34
63731: PUSH
63732: LD_INT 32
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: LIST
63749: PPUSH
63750: CALL_OW 69
63754: ST_TO_ADDR
// if not tmp then
63755: LD_VAR 0 2
63759: NOT
63760: IFFALSE 63764
// exit ;
63762: GO 63814
// for i in tmp do
63764: LD_ADDR_VAR 0 1
63768: PUSH
63769: LD_VAR 0 2
63773: PUSH
63774: FOR_IN
63775: IFFALSE 63812
// if GetCargo ( i , mat_artifact ) = 0 then
63777: LD_VAR 0 1
63781: PPUSH
63782: LD_INT 4
63784: PPUSH
63785: CALL_OW 289
63789: PUSH
63790: LD_INT 0
63792: EQUAL
63793: IFFALSE 63810
// SetCargo ( i , mat_siberit , 100 ) ;
63795: LD_VAR 0 1
63799: PPUSH
63800: LD_INT 3
63802: PPUSH
63803: LD_INT 100
63805: PPUSH
63806: CALL_OW 290
63810: GO 63774
63812: POP
63813: POP
// end ;
63814: PPOPN 2
63816: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
63817: LD_EXP 42
63821: PUSH
63822: LD_EXP 87
63826: AND
63827: IFFALSE 64010
63829: GO 63831
63831: DISABLE
63832: LD_INT 0
63834: PPUSH
63835: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63836: LD_ADDR_VAR 0 2
63840: PUSH
63841: LD_INT 22
63843: PUSH
63844: LD_OWVAR 2
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PPUSH
63853: CALL_OW 69
63857: ST_TO_ADDR
// if not tmp then
63858: LD_VAR 0 2
63862: NOT
63863: IFFALSE 63867
// exit ;
63865: GO 64010
// for i := 1 to 2 do
63867: LD_ADDR_VAR 0 1
63871: PUSH
63872: DOUBLE
63873: LD_INT 1
63875: DEC
63876: ST_TO_ADDR
63877: LD_INT 2
63879: PUSH
63880: FOR_TO
63881: IFFALSE 64008
// begin uc_side := your_side ;
63883: LD_ADDR_OWVAR 20
63887: PUSH
63888: LD_OWVAR 2
63892: ST_TO_ADDR
// uc_nation := nation_american ;
63893: LD_ADDR_OWVAR 21
63897: PUSH
63898: LD_INT 1
63900: ST_TO_ADDR
// vc_chassis := us_morphling ;
63901: LD_ADDR_OWVAR 37
63905: PUSH
63906: LD_INT 5
63908: ST_TO_ADDR
// vc_engine := engine_siberite ;
63909: LD_ADDR_OWVAR 39
63913: PUSH
63914: LD_INT 3
63916: ST_TO_ADDR
// vc_control := control_computer ;
63917: LD_ADDR_OWVAR 38
63921: PUSH
63922: LD_INT 3
63924: ST_TO_ADDR
// vc_weapon := us_double_laser ;
63925: LD_ADDR_OWVAR 40
63929: PUSH
63930: LD_INT 10
63932: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
63933: LD_VAR 0 2
63937: PUSH
63938: LD_INT 1
63940: ARRAY
63941: PPUSH
63942: CALL_OW 310
63946: NOT
63947: IFFALSE 63994
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
63949: CALL_OW 45
63953: PPUSH
63954: LD_VAR 0 2
63958: PUSH
63959: LD_INT 1
63961: ARRAY
63962: PPUSH
63963: CALL_OW 250
63967: PPUSH
63968: LD_VAR 0 2
63972: PUSH
63973: LD_INT 1
63975: ARRAY
63976: PPUSH
63977: CALL_OW 251
63981: PPUSH
63982: LD_INT 12
63984: PPUSH
63985: LD_INT 1
63987: PPUSH
63988: CALL_OW 50
63992: GO 64006
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
63994: CALL_OW 45
63998: PPUSH
63999: LD_INT 1
64001: PPUSH
64002: CALL_OW 51
// end ;
64006: GO 63880
64008: POP
64009: POP
// end ;
64010: PPOPN 2
64012: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
64013: LD_EXP 42
64017: PUSH
64018: LD_EXP 88
64022: AND
64023: IFFALSE 64245
64025: GO 64027
64027: DISABLE
64028: LD_INT 0
64030: PPUSH
64031: PPUSH
64032: PPUSH
64033: PPUSH
64034: PPUSH
64035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64036: LD_ADDR_VAR 0 6
64040: PUSH
64041: LD_INT 22
64043: PUSH
64044: LD_OWVAR 2
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 21
64055: PUSH
64056: LD_INT 1
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 3
64065: PUSH
64066: LD_INT 23
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: LIST
64084: PPUSH
64085: CALL_OW 69
64089: ST_TO_ADDR
// if not tmp then
64090: LD_VAR 0 6
64094: NOT
64095: IFFALSE 64099
// exit ;
64097: GO 64245
// s1 := rand ( 1 , 4 ) ;
64099: LD_ADDR_VAR 0 2
64103: PUSH
64104: LD_INT 1
64106: PPUSH
64107: LD_INT 4
64109: PPUSH
64110: CALL_OW 12
64114: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
64115: LD_ADDR_VAR 0 4
64119: PUSH
64120: LD_VAR 0 6
64124: PUSH
64125: LD_INT 1
64127: ARRAY
64128: PPUSH
64129: LD_VAR 0 2
64133: PPUSH
64134: CALL_OW 259
64138: ST_TO_ADDR
// if s1 = 1 then
64139: LD_VAR 0 2
64143: PUSH
64144: LD_INT 1
64146: EQUAL
64147: IFFALSE 64167
// s2 := rand ( 2 , 4 ) else
64149: LD_ADDR_VAR 0 3
64153: PUSH
64154: LD_INT 2
64156: PPUSH
64157: LD_INT 4
64159: PPUSH
64160: CALL_OW 12
64164: ST_TO_ADDR
64165: GO 64175
// s2 := 1 ;
64167: LD_ADDR_VAR 0 3
64171: PUSH
64172: LD_INT 1
64174: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
64175: LD_ADDR_VAR 0 5
64179: PUSH
64180: LD_VAR 0 6
64184: PUSH
64185: LD_INT 1
64187: ARRAY
64188: PPUSH
64189: LD_VAR 0 3
64193: PPUSH
64194: CALL_OW 259
64198: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
64199: LD_VAR 0 6
64203: PUSH
64204: LD_INT 1
64206: ARRAY
64207: PPUSH
64208: LD_VAR 0 2
64212: PPUSH
64213: LD_VAR 0 5
64217: PPUSH
64218: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
64222: LD_VAR 0 6
64226: PUSH
64227: LD_INT 1
64229: ARRAY
64230: PPUSH
64231: LD_VAR 0 3
64235: PPUSH
64236: LD_VAR 0 4
64240: PPUSH
64241: CALL_OW 237
// end ;
64245: PPOPN 6
64247: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
64248: LD_EXP 42
64252: PUSH
64253: LD_EXP 89
64257: AND
64258: IFFALSE 64337
64260: GO 64262
64262: DISABLE
64263: LD_INT 0
64265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
64266: LD_ADDR_VAR 0 1
64270: PUSH
64271: LD_INT 22
64273: PUSH
64274: LD_OWVAR 2
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 30
64285: PUSH
64286: LD_INT 3
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PPUSH
64297: CALL_OW 69
64301: ST_TO_ADDR
// if not tmp then
64302: LD_VAR 0 1
64306: NOT
64307: IFFALSE 64311
// exit ;
64309: GO 64337
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64311: LD_VAR 0 1
64315: PUSH
64316: LD_INT 1
64318: PPUSH
64319: LD_VAR 0 1
64323: PPUSH
64324: CALL_OW 12
64328: ARRAY
64329: PPUSH
64330: LD_INT 1
64332: PPUSH
64333: CALL_OW 234
// end ;
64337: PPOPN 1
64339: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
64340: LD_EXP 42
64344: PUSH
64345: LD_EXP 90
64349: AND
64350: IFFALSE 64462
64352: GO 64354
64354: DISABLE
64355: LD_INT 0
64357: PPUSH
64358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
64359: LD_ADDR_VAR 0 2
64363: PUSH
64364: LD_INT 22
64366: PUSH
64367: LD_OWVAR 2
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 2
64378: PUSH
64379: LD_INT 30
64381: PUSH
64382: LD_INT 27
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 30
64391: PUSH
64392: LD_INT 26
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 30
64401: PUSH
64402: LD_INT 28
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PPUSH
64419: CALL_OW 69
64423: ST_TO_ADDR
// if not tmp then
64424: LD_VAR 0 2
64428: NOT
64429: IFFALSE 64433
// exit ;
64431: GO 64462
// for i in tmp do
64433: LD_ADDR_VAR 0 1
64437: PUSH
64438: LD_VAR 0 2
64442: PUSH
64443: FOR_IN
64444: IFFALSE 64460
// SetLives ( i , 1 ) ;
64446: LD_VAR 0 1
64450: PPUSH
64451: LD_INT 1
64453: PPUSH
64454: CALL_OW 234
64458: GO 64443
64460: POP
64461: POP
// end ;
64462: PPOPN 2
64464: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
64465: LD_EXP 42
64469: PUSH
64470: LD_EXP 91
64474: AND
64475: IFFALSE 64762
64477: GO 64479
64479: DISABLE
64480: LD_INT 0
64482: PPUSH
64483: PPUSH
64484: PPUSH
// begin i := rand ( 1 , 7 ) ;
64485: LD_ADDR_VAR 0 1
64489: PUSH
64490: LD_INT 1
64492: PPUSH
64493: LD_INT 7
64495: PPUSH
64496: CALL_OW 12
64500: ST_TO_ADDR
// case i of 1 :
64501: LD_VAR 0 1
64505: PUSH
64506: LD_INT 1
64508: DOUBLE
64509: EQUAL
64510: IFTRUE 64514
64512: GO 64524
64514: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
64515: LD_STRING earthquake(getX(game), 0, 32)
64517: PPUSH
64518: CALL_OW 559
64522: GO 64762
64524: LD_INT 2
64526: DOUBLE
64527: EQUAL
64528: IFTRUE 64532
64530: GO 64546
64532: POP
// begin ToLua ( displayStucuk(); ) ;
64533: LD_STRING displayStucuk();
64535: PPUSH
64536: CALL_OW 559
// ResetFog ;
64540: CALL_OW 335
// end ; 3 :
64544: GO 64762
64546: LD_INT 3
64548: DOUBLE
64549: EQUAL
64550: IFTRUE 64554
64552: GO 64658
64554: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64555: LD_ADDR_VAR 0 2
64559: PUSH
64560: LD_INT 22
64562: PUSH
64563: LD_OWVAR 2
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 25
64574: PUSH
64575: LD_INT 1
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PPUSH
64586: CALL_OW 69
64590: ST_TO_ADDR
// if not tmp then
64591: LD_VAR 0 2
64595: NOT
64596: IFFALSE 64600
// exit ;
64598: GO 64762
// un := tmp [ rand ( 1 , tmp ) ] ;
64600: LD_ADDR_VAR 0 3
64604: PUSH
64605: LD_VAR 0 2
64609: PUSH
64610: LD_INT 1
64612: PPUSH
64613: LD_VAR 0 2
64617: PPUSH
64618: CALL_OW 12
64622: ARRAY
64623: ST_TO_ADDR
// if Crawls ( un ) then
64624: LD_VAR 0 3
64628: PPUSH
64629: CALL_OW 318
64633: IFFALSE 64644
// ComWalk ( un ) ;
64635: LD_VAR 0 3
64639: PPUSH
64640: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64644: LD_VAR 0 3
64648: PPUSH
64649: LD_INT 8
64651: PPUSH
64652: CALL_OW 336
// end ; 4 :
64656: GO 64762
64658: LD_INT 4
64660: DOUBLE
64661: EQUAL
64662: IFTRUE 64666
64664: GO 64740
64666: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
64667: LD_ADDR_VAR 0 2
64671: PUSH
64672: LD_INT 22
64674: PUSH
64675: LD_OWVAR 2
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 30
64686: PUSH
64687: LD_INT 29
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PPUSH
64698: CALL_OW 69
64702: ST_TO_ADDR
// if not tmp then
64703: LD_VAR 0 2
64707: NOT
64708: IFFALSE 64712
// exit ;
64710: GO 64762
// CenterNowOnUnits ( tmp [ 1 ] ) ;
64712: LD_VAR 0 2
64716: PUSH
64717: LD_INT 1
64719: ARRAY
64720: PPUSH
64721: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
64725: LD_VAR 0 2
64729: PUSH
64730: LD_INT 1
64732: ARRAY
64733: PPUSH
64734: CALL_OW 65
// end ; 5 .. 7 :
64738: GO 64762
64740: LD_INT 5
64742: DOUBLE
64743: GREATEREQUAL
64744: IFFALSE 64752
64746: LD_INT 7
64748: DOUBLE
64749: LESSEQUAL
64750: IFTRUE 64754
64752: GO 64761
64754: POP
// StreamSibBomb ; end ;
64755: CALL 60999 0 0
64759: GO 64762
64761: POP
// end ;
64762: PPOPN 3
64764: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
64765: LD_EXP 42
64769: PUSH
64770: LD_EXP 92
64774: AND
64775: IFFALSE 64931
64777: GO 64779
64779: DISABLE
64780: LD_INT 0
64782: PPUSH
64783: PPUSH
64784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
64785: LD_ADDR_VAR 0 2
64789: PUSH
64790: LD_INT 81
64792: PUSH
64793: LD_OWVAR 2
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 2
64804: PUSH
64805: LD_INT 21
64807: PUSH
64808: LD_INT 1
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 21
64817: PUSH
64818: LD_INT 2
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: LIST
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PPUSH
64834: CALL_OW 69
64838: ST_TO_ADDR
// if not tmp then
64839: LD_VAR 0 2
64843: NOT
64844: IFFALSE 64848
// exit ;
64846: GO 64931
// p := 0 ;
64848: LD_ADDR_VAR 0 3
64852: PUSH
64853: LD_INT 0
64855: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
64856: LD_INT 35
64858: PPUSH
64859: CALL_OW 67
// p := p + 1 ;
64863: LD_ADDR_VAR 0 3
64867: PUSH
64868: LD_VAR 0 3
64872: PUSH
64873: LD_INT 1
64875: PLUS
64876: ST_TO_ADDR
// for i in tmp do
64877: LD_ADDR_VAR 0 1
64881: PUSH
64882: LD_VAR 0 2
64886: PUSH
64887: FOR_IN
64888: IFFALSE 64919
// if GetLives ( i ) < 1000 then
64890: LD_VAR 0 1
64894: PPUSH
64895: CALL_OW 256
64899: PUSH
64900: LD_INT 1000
64902: LESS
64903: IFFALSE 64917
// SetLives ( i , 1000 ) ;
64905: LD_VAR 0 1
64909: PPUSH
64910: LD_INT 1000
64912: PPUSH
64913: CALL_OW 234
64917: GO 64887
64919: POP
64920: POP
// until p > 20 ;
64921: LD_VAR 0 3
64925: PUSH
64926: LD_INT 20
64928: GREATER
64929: IFFALSE 64856
// end ;
64931: PPOPN 3
64933: END
// every 0 0$1 trigger StreamModeActive and sTime do
64934: LD_EXP 42
64938: PUSH
64939: LD_EXP 93
64943: AND
64944: IFFALSE 64979
64946: GO 64948
64948: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
64949: LD_INT 28
64951: PPUSH
64952: LD_OWVAR 2
64956: PPUSH
64957: LD_INT 2
64959: PPUSH
64960: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
64964: LD_INT 30
64966: PPUSH
64967: LD_OWVAR 2
64971: PPUSH
64972: LD_INT 2
64974: PPUSH
64975: CALL_OW 322
// end ;
64979: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
64980: LD_EXP 42
64984: PUSH
64985: LD_EXP 94
64989: AND
64990: IFFALSE 65111
64992: GO 64994
64994: DISABLE
64995: LD_INT 0
64997: PPUSH
64998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64999: LD_ADDR_VAR 0 2
65003: PUSH
65004: LD_INT 22
65006: PUSH
65007: LD_OWVAR 2
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 21
65018: PUSH
65019: LD_INT 1
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 3
65028: PUSH
65029: LD_INT 23
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: LIST
65047: PPUSH
65048: CALL_OW 69
65052: ST_TO_ADDR
// if not tmp then
65053: LD_VAR 0 2
65057: NOT
65058: IFFALSE 65062
// exit ;
65060: GO 65111
// for i in tmp do
65062: LD_ADDR_VAR 0 1
65066: PUSH
65067: LD_VAR 0 2
65071: PUSH
65072: FOR_IN
65073: IFFALSE 65109
// begin if Crawls ( i ) then
65075: LD_VAR 0 1
65079: PPUSH
65080: CALL_OW 318
65084: IFFALSE 65095
// ComWalk ( i ) ;
65086: LD_VAR 0 1
65090: PPUSH
65091: CALL_OW 138
// SetClass ( i , 2 ) ;
65095: LD_VAR 0 1
65099: PPUSH
65100: LD_INT 2
65102: PPUSH
65103: CALL_OW 336
// end ;
65107: GO 65072
65109: POP
65110: POP
// end ;
65111: PPOPN 2
65113: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
65114: LD_EXP 42
65118: PUSH
65119: LD_EXP 95
65123: AND
65124: IFFALSE 65412
65126: GO 65128
65128: DISABLE
65129: LD_INT 0
65131: PPUSH
65132: PPUSH
65133: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
65134: LD_OWVAR 2
65138: PPUSH
65139: LD_INT 9
65141: PPUSH
65142: LD_INT 1
65144: PPUSH
65145: LD_INT 1
65147: PPUSH
65148: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
65152: LD_INT 9
65154: PPUSH
65155: LD_OWVAR 2
65159: PPUSH
65160: CALL_OW 343
// uc_side := 9 ;
65164: LD_ADDR_OWVAR 20
65168: PUSH
65169: LD_INT 9
65171: ST_TO_ADDR
// uc_nation := 2 ;
65172: LD_ADDR_OWVAR 21
65176: PUSH
65177: LD_INT 2
65179: ST_TO_ADDR
// hc_name := Dark Warrior ;
65180: LD_ADDR_OWVAR 26
65184: PUSH
65185: LD_STRING Dark Warrior
65187: ST_TO_ADDR
// hc_gallery :=  ;
65188: LD_ADDR_OWVAR 33
65192: PUSH
65193: LD_STRING 
65195: ST_TO_ADDR
// hc_noskilllimit := true ;
65196: LD_ADDR_OWVAR 76
65200: PUSH
65201: LD_INT 1
65203: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
65204: LD_ADDR_OWVAR 31
65208: PUSH
65209: LD_INT 30
65211: PUSH
65212: LD_INT 30
65214: PUSH
65215: LD_INT 30
65217: PUSH
65218: LD_INT 30
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: ST_TO_ADDR
// un := CreateHuman ;
65227: LD_ADDR_VAR 0 3
65231: PUSH
65232: CALL_OW 44
65236: ST_TO_ADDR
// hc_noskilllimit := false ;
65237: LD_ADDR_OWVAR 76
65241: PUSH
65242: LD_INT 0
65244: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65245: LD_VAR 0 3
65249: PPUSH
65250: LD_INT 1
65252: PPUSH
65253: CALL_OW 51
// ToLua ( playRanger() ) ;
65257: LD_STRING playRanger()
65259: PPUSH
65260: CALL_OW 559
// p := 0 ;
65264: LD_ADDR_VAR 0 2
65268: PUSH
65269: LD_INT 0
65271: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65272: LD_INT 35
65274: PPUSH
65275: CALL_OW 67
// p := p + 1 ;
65279: LD_ADDR_VAR 0 2
65283: PUSH
65284: LD_VAR 0 2
65288: PUSH
65289: LD_INT 1
65291: PLUS
65292: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
65293: LD_VAR 0 3
65297: PPUSH
65298: CALL_OW 256
65302: PUSH
65303: LD_INT 1000
65305: LESS
65306: IFFALSE 65320
// SetLives ( un , 1000 ) ;
65308: LD_VAR 0 3
65312: PPUSH
65313: LD_INT 1000
65315: PPUSH
65316: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
65320: LD_VAR 0 3
65324: PPUSH
65325: LD_INT 81
65327: PUSH
65328: LD_OWVAR 2
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 91
65339: PUSH
65340: LD_VAR 0 3
65344: PUSH
65345: LD_INT 30
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: LIST
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PPUSH
65357: CALL_OW 69
65361: PPUSH
65362: LD_VAR 0 3
65366: PPUSH
65367: CALL_OW 74
65371: PPUSH
65372: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
65376: LD_VAR 0 2
65380: PUSH
65381: LD_INT 80
65383: GREATER
65384: PUSH
65385: LD_VAR 0 3
65389: PPUSH
65390: CALL_OW 301
65394: OR
65395: IFFALSE 65272
// if un then
65397: LD_VAR 0 3
65401: IFFALSE 65412
// RemoveUnit ( un ) ;
65403: LD_VAR 0 3
65407: PPUSH
65408: CALL_OW 64
// end ;
65412: PPOPN 3
65414: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
65415: LD_EXP 96
65419: IFFALSE 65535
65421: GO 65423
65423: DISABLE
65424: LD_INT 0
65426: PPUSH
65427: PPUSH
65428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65429: LD_ADDR_VAR 0 2
65433: PUSH
65434: LD_INT 81
65436: PUSH
65437: LD_OWVAR 2
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 21
65448: PUSH
65449: LD_INT 1
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PPUSH
65460: CALL_OW 69
65464: ST_TO_ADDR
// ToLua ( playComputer() ) ;
65465: LD_STRING playComputer()
65467: PPUSH
65468: CALL_OW 559
// if not tmp then
65472: LD_VAR 0 2
65476: NOT
65477: IFFALSE 65481
// exit ;
65479: GO 65535
// for i in tmp do
65481: LD_ADDR_VAR 0 1
65485: PUSH
65486: LD_VAR 0 2
65490: PUSH
65491: FOR_IN
65492: IFFALSE 65533
// for j := 1 to 4 do
65494: LD_ADDR_VAR 0 3
65498: PUSH
65499: DOUBLE
65500: LD_INT 1
65502: DEC
65503: ST_TO_ADDR
65504: LD_INT 4
65506: PUSH
65507: FOR_TO
65508: IFFALSE 65529
// SetSkill ( i , j , 10 ) ;
65510: LD_VAR 0 1
65514: PPUSH
65515: LD_VAR 0 3
65519: PPUSH
65520: LD_INT 10
65522: PPUSH
65523: CALL_OW 237
65527: GO 65507
65529: POP
65530: POP
65531: GO 65491
65533: POP
65534: POP
// end ;
65535: PPOPN 3
65537: END
// every 0 0$1 trigger s30 do var i , tmp ;
65538: LD_EXP 97
65542: IFFALSE 65611
65544: GO 65546
65546: DISABLE
65547: LD_INT 0
65549: PPUSH
65550: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65551: LD_ADDR_VAR 0 2
65555: PUSH
65556: LD_INT 22
65558: PUSH
65559: LD_OWVAR 2
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PPUSH
65568: CALL_OW 69
65572: ST_TO_ADDR
// if not tmp then
65573: LD_VAR 0 2
65577: NOT
65578: IFFALSE 65582
// exit ;
65580: GO 65611
// for i in tmp do
65582: LD_ADDR_VAR 0 1
65586: PUSH
65587: LD_VAR 0 2
65591: PUSH
65592: FOR_IN
65593: IFFALSE 65609
// SetLives ( i , 300 ) ;
65595: LD_VAR 0 1
65599: PPUSH
65600: LD_INT 300
65602: PPUSH
65603: CALL_OW 234
65607: GO 65592
65609: POP
65610: POP
// end ;
65611: PPOPN 2
65613: END
// every 0 0$1 trigger s60 do var i , tmp ;
65614: LD_EXP 98
65618: IFFALSE 65687
65620: GO 65622
65622: DISABLE
65623: LD_INT 0
65625: PPUSH
65626: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65627: LD_ADDR_VAR 0 2
65631: PUSH
65632: LD_INT 22
65634: PUSH
65635: LD_OWVAR 2
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PPUSH
65644: CALL_OW 69
65648: ST_TO_ADDR
// if not tmp then
65649: LD_VAR 0 2
65653: NOT
65654: IFFALSE 65658
// exit ;
65656: GO 65687
// for i in tmp do
65658: LD_ADDR_VAR 0 1
65662: PUSH
65663: LD_VAR 0 2
65667: PUSH
65668: FOR_IN
65669: IFFALSE 65685
// SetLives ( i , 600 ) ;
65671: LD_VAR 0 1
65675: PPUSH
65676: LD_INT 600
65678: PPUSH
65679: CALL_OW 234
65683: GO 65668
65685: POP
65686: POP
// end ;
65687: PPOPN 2
65689: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65690: LD_INT 0
65692: PPUSH
// case cmd of 301 :
65693: LD_VAR 0 1
65697: PUSH
65698: LD_INT 301
65700: DOUBLE
65701: EQUAL
65702: IFTRUE 65706
65704: GO 65738
65706: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
65707: LD_VAR 0 6
65711: PPUSH
65712: LD_VAR 0 7
65716: PPUSH
65717: LD_VAR 0 8
65721: PPUSH
65722: LD_VAR 0 4
65726: PPUSH
65727: LD_VAR 0 5
65731: PPUSH
65732: CALL 66947 0 5
65736: GO 65859
65738: LD_INT 302
65740: DOUBLE
65741: EQUAL
65742: IFTRUE 65746
65744: GO 65783
65746: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
65747: LD_VAR 0 6
65751: PPUSH
65752: LD_VAR 0 7
65756: PPUSH
65757: LD_VAR 0 8
65761: PPUSH
65762: LD_VAR 0 9
65766: PPUSH
65767: LD_VAR 0 4
65771: PPUSH
65772: LD_VAR 0 5
65776: PPUSH
65777: CALL 67038 0 6
65781: GO 65859
65783: LD_INT 303
65785: DOUBLE
65786: EQUAL
65787: IFTRUE 65791
65789: GO 65828
65791: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
65792: LD_VAR 0 6
65796: PPUSH
65797: LD_VAR 0 7
65801: PPUSH
65802: LD_VAR 0 8
65806: PPUSH
65807: LD_VAR 0 9
65811: PPUSH
65812: LD_VAR 0 4
65816: PPUSH
65817: LD_VAR 0 5
65821: PPUSH
65822: CALL 65864 0 6
65826: GO 65859
65828: LD_INT 304
65830: DOUBLE
65831: EQUAL
65832: IFTRUE 65836
65834: GO 65858
65836: POP
// hHackTeleport ( unit , x , y ) ; end ;
65837: LD_VAR 0 2
65841: PPUSH
65842: LD_VAR 0 4
65846: PPUSH
65847: LD_VAR 0 5
65851: PPUSH
65852: CALL 67631 0 3
65856: GO 65859
65858: POP
// end ;
65859: LD_VAR 0 12
65863: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
65864: LD_INT 0
65866: PPUSH
65867: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
65868: LD_VAR 0 1
65872: PUSH
65873: LD_INT 1
65875: LESS
65876: PUSH
65877: LD_VAR 0 1
65881: PUSH
65882: LD_INT 3
65884: GREATER
65885: OR
65886: PUSH
65887: LD_VAR 0 5
65891: PPUSH
65892: LD_VAR 0 6
65896: PPUSH
65897: CALL_OW 428
65901: OR
65902: IFFALSE 65906
// exit ;
65904: GO 66634
// uc_side := your_side ;
65906: LD_ADDR_OWVAR 20
65910: PUSH
65911: LD_OWVAR 2
65915: ST_TO_ADDR
// uc_nation := nation ;
65916: LD_ADDR_OWVAR 21
65920: PUSH
65921: LD_VAR 0 1
65925: ST_TO_ADDR
// bc_level = 1 ;
65926: LD_ADDR_OWVAR 43
65930: PUSH
65931: LD_INT 1
65933: ST_TO_ADDR
// case btype of 1 :
65934: LD_VAR 0 2
65938: PUSH
65939: LD_INT 1
65941: DOUBLE
65942: EQUAL
65943: IFTRUE 65947
65945: GO 65958
65947: POP
// bc_type := b_depot ; 2 :
65948: LD_ADDR_OWVAR 42
65952: PUSH
65953: LD_INT 0
65955: ST_TO_ADDR
65956: GO 66578
65958: LD_INT 2
65960: DOUBLE
65961: EQUAL
65962: IFTRUE 65966
65964: GO 65977
65966: POP
// bc_type := b_warehouse ; 3 :
65967: LD_ADDR_OWVAR 42
65971: PUSH
65972: LD_INT 1
65974: ST_TO_ADDR
65975: GO 66578
65977: LD_INT 3
65979: DOUBLE
65980: EQUAL
65981: IFTRUE 65985
65983: GO 65996
65985: POP
// bc_type := b_lab ; 4 .. 9 :
65986: LD_ADDR_OWVAR 42
65990: PUSH
65991: LD_INT 6
65993: ST_TO_ADDR
65994: GO 66578
65996: LD_INT 4
65998: DOUBLE
65999: GREATEREQUAL
66000: IFFALSE 66008
66002: LD_INT 9
66004: DOUBLE
66005: LESSEQUAL
66006: IFTRUE 66010
66008: GO 66070
66010: POP
// begin bc_type := b_lab_half ;
66011: LD_ADDR_OWVAR 42
66015: PUSH
66016: LD_INT 7
66018: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
66019: LD_ADDR_OWVAR 44
66023: PUSH
66024: LD_INT 10
66026: PUSH
66027: LD_INT 11
66029: PUSH
66030: LD_INT 12
66032: PUSH
66033: LD_INT 15
66035: PUSH
66036: LD_INT 14
66038: PUSH
66039: LD_INT 13
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: PUSH
66050: LD_VAR 0 2
66054: PUSH
66055: LD_INT 3
66057: MINUS
66058: ARRAY
66059: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
66060: LD_ADDR_OWVAR 45
66064: PUSH
66065: LD_INT 9
66067: ST_TO_ADDR
// end ; 10 .. 13 :
66068: GO 66578
66070: LD_INT 10
66072: DOUBLE
66073: GREATEREQUAL
66074: IFFALSE 66082
66076: LD_INT 13
66078: DOUBLE
66079: LESSEQUAL
66080: IFTRUE 66084
66082: GO 66161
66084: POP
// begin bc_type := b_lab_full ;
66085: LD_ADDR_OWVAR 42
66089: PUSH
66090: LD_INT 8
66092: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
66093: LD_ADDR_OWVAR 44
66097: PUSH
66098: LD_INT 10
66100: PUSH
66101: LD_INT 12
66103: PUSH
66104: LD_INT 14
66106: PUSH
66107: LD_INT 13
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: PUSH
66116: LD_VAR 0 2
66120: PUSH
66121: LD_INT 9
66123: MINUS
66124: ARRAY
66125: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
66126: LD_ADDR_OWVAR 45
66130: PUSH
66131: LD_INT 11
66133: PUSH
66134: LD_INT 15
66136: PUSH
66137: LD_INT 12
66139: PUSH
66140: LD_INT 15
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: PUSH
66149: LD_VAR 0 2
66153: PUSH
66154: LD_INT 9
66156: MINUS
66157: ARRAY
66158: ST_TO_ADDR
// end ; 14 :
66159: GO 66578
66161: LD_INT 14
66163: DOUBLE
66164: EQUAL
66165: IFTRUE 66169
66167: GO 66180
66169: POP
// bc_type := b_workshop ; 15 :
66170: LD_ADDR_OWVAR 42
66174: PUSH
66175: LD_INT 2
66177: ST_TO_ADDR
66178: GO 66578
66180: LD_INT 15
66182: DOUBLE
66183: EQUAL
66184: IFTRUE 66188
66186: GO 66199
66188: POP
// bc_type := b_factory ; 16 :
66189: LD_ADDR_OWVAR 42
66193: PUSH
66194: LD_INT 3
66196: ST_TO_ADDR
66197: GO 66578
66199: LD_INT 16
66201: DOUBLE
66202: EQUAL
66203: IFTRUE 66207
66205: GO 66218
66207: POP
// bc_type := b_ext_gun ; 17 :
66208: LD_ADDR_OWVAR 42
66212: PUSH
66213: LD_INT 17
66215: ST_TO_ADDR
66216: GO 66578
66218: LD_INT 17
66220: DOUBLE
66221: EQUAL
66222: IFTRUE 66226
66224: GO 66254
66226: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
66227: LD_ADDR_OWVAR 42
66231: PUSH
66232: LD_INT 19
66234: PUSH
66235: LD_INT 23
66237: PUSH
66238: LD_INT 19
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: LIST
66245: PUSH
66246: LD_VAR 0 1
66250: ARRAY
66251: ST_TO_ADDR
66252: GO 66578
66254: LD_INT 18
66256: DOUBLE
66257: EQUAL
66258: IFTRUE 66262
66260: GO 66273
66262: POP
// bc_type := b_ext_radar ; 19 :
66263: LD_ADDR_OWVAR 42
66267: PUSH
66268: LD_INT 20
66270: ST_TO_ADDR
66271: GO 66578
66273: LD_INT 19
66275: DOUBLE
66276: EQUAL
66277: IFTRUE 66281
66279: GO 66292
66281: POP
// bc_type := b_ext_radio ; 20 :
66282: LD_ADDR_OWVAR 42
66286: PUSH
66287: LD_INT 22
66289: ST_TO_ADDR
66290: GO 66578
66292: LD_INT 20
66294: DOUBLE
66295: EQUAL
66296: IFTRUE 66300
66298: GO 66311
66300: POP
// bc_type := b_ext_siberium ; 21 :
66301: LD_ADDR_OWVAR 42
66305: PUSH
66306: LD_INT 21
66308: ST_TO_ADDR
66309: GO 66578
66311: LD_INT 21
66313: DOUBLE
66314: EQUAL
66315: IFTRUE 66319
66317: GO 66330
66319: POP
// bc_type := b_ext_computer ; 22 :
66320: LD_ADDR_OWVAR 42
66324: PUSH
66325: LD_INT 24
66327: ST_TO_ADDR
66328: GO 66578
66330: LD_INT 22
66332: DOUBLE
66333: EQUAL
66334: IFTRUE 66338
66336: GO 66349
66338: POP
// bc_type := b_ext_track ; 23 :
66339: LD_ADDR_OWVAR 42
66343: PUSH
66344: LD_INT 16
66346: ST_TO_ADDR
66347: GO 66578
66349: LD_INT 23
66351: DOUBLE
66352: EQUAL
66353: IFTRUE 66357
66355: GO 66368
66357: POP
// bc_type := b_ext_laser ; 24 :
66358: LD_ADDR_OWVAR 42
66362: PUSH
66363: LD_INT 25
66365: ST_TO_ADDR
66366: GO 66578
66368: LD_INT 24
66370: DOUBLE
66371: EQUAL
66372: IFTRUE 66376
66374: GO 66387
66376: POP
// bc_type := b_control_tower ; 25 :
66377: LD_ADDR_OWVAR 42
66381: PUSH
66382: LD_INT 36
66384: ST_TO_ADDR
66385: GO 66578
66387: LD_INT 25
66389: DOUBLE
66390: EQUAL
66391: IFTRUE 66395
66393: GO 66406
66395: POP
// bc_type := b_breastwork ; 26 :
66396: LD_ADDR_OWVAR 42
66400: PUSH
66401: LD_INT 31
66403: ST_TO_ADDR
66404: GO 66578
66406: LD_INT 26
66408: DOUBLE
66409: EQUAL
66410: IFTRUE 66414
66412: GO 66425
66414: POP
// bc_type := b_bunker ; 27 :
66415: LD_ADDR_OWVAR 42
66419: PUSH
66420: LD_INT 32
66422: ST_TO_ADDR
66423: GO 66578
66425: LD_INT 27
66427: DOUBLE
66428: EQUAL
66429: IFTRUE 66433
66431: GO 66444
66433: POP
// bc_type := b_turret ; 28 :
66434: LD_ADDR_OWVAR 42
66438: PUSH
66439: LD_INT 33
66441: ST_TO_ADDR
66442: GO 66578
66444: LD_INT 28
66446: DOUBLE
66447: EQUAL
66448: IFTRUE 66452
66450: GO 66463
66452: POP
// bc_type := b_armoury ; 29 :
66453: LD_ADDR_OWVAR 42
66457: PUSH
66458: LD_INT 4
66460: ST_TO_ADDR
66461: GO 66578
66463: LD_INT 29
66465: DOUBLE
66466: EQUAL
66467: IFTRUE 66471
66469: GO 66482
66471: POP
// bc_type := b_barracks ; 30 :
66472: LD_ADDR_OWVAR 42
66476: PUSH
66477: LD_INT 5
66479: ST_TO_ADDR
66480: GO 66578
66482: LD_INT 30
66484: DOUBLE
66485: EQUAL
66486: IFTRUE 66490
66488: GO 66501
66490: POP
// bc_type := b_solar_power ; 31 :
66491: LD_ADDR_OWVAR 42
66495: PUSH
66496: LD_INT 27
66498: ST_TO_ADDR
66499: GO 66578
66501: LD_INT 31
66503: DOUBLE
66504: EQUAL
66505: IFTRUE 66509
66507: GO 66520
66509: POP
// bc_type := b_oil_power ; 32 :
66510: LD_ADDR_OWVAR 42
66514: PUSH
66515: LD_INT 26
66517: ST_TO_ADDR
66518: GO 66578
66520: LD_INT 32
66522: DOUBLE
66523: EQUAL
66524: IFTRUE 66528
66526: GO 66539
66528: POP
// bc_type := b_siberite_power ; 33 :
66529: LD_ADDR_OWVAR 42
66533: PUSH
66534: LD_INT 28
66536: ST_TO_ADDR
66537: GO 66578
66539: LD_INT 33
66541: DOUBLE
66542: EQUAL
66543: IFTRUE 66547
66545: GO 66558
66547: POP
// bc_type := b_oil_mine ; 34 :
66548: LD_ADDR_OWVAR 42
66552: PUSH
66553: LD_INT 29
66555: ST_TO_ADDR
66556: GO 66578
66558: LD_INT 34
66560: DOUBLE
66561: EQUAL
66562: IFTRUE 66566
66564: GO 66577
66566: POP
// bc_type := b_siberite_mine ; end ;
66567: LD_ADDR_OWVAR 42
66571: PUSH
66572: LD_INT 30
66574: ST_TO_ADDR
66575: GO 66578
66577: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
66578: LD_ADDR_VAR 0 8
66582: PUSH
66583: LD_VAR 0 5
66587: PPUSH
66588: LD_VAR 0 6
66592: PPUSH
66593: LD_VAR 0 3
66597: PPUSH
66598: CALL_OW 47
66602: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
66603: LD_OWVAR 42
66607: PUSH
66608: LD_INT 32
66610: PUSH
66611: LD_INT 33
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: IN
66618: IFFALSE 66634
// PlaceWeaponTurret ( b , weapon ) ;
66620: LD_VAR 0 8
66624: PPUSH
66625: LD_VAR 0 4
66629: PPUSH
66630: CALL_OW 431
// end ;
66634: LD_VAR 0 7
66638: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
66639: LD_INT 0
66641: PPUSH
66642: PPUSH
66643: PPUSH
66644: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66645: LD_ADDR_VAR 0 4
66649: PUSH
66650: LD_INT 22
66652: PUSH
66653: LD_OWVAR 2
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 2
66664: PUSH
66665: LD_INT 30
66667: PUSH
66668: LD_INT 0
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 30
66677: PUSH
66678: LD_INT 1
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: LIST
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PPUSH
66694: CALL_OW 69
66698: ST_TO_ADDR
// if not tmp then
66699: LD_VAR 0 4
66703: NOT
66704: IFFALSE 66708
// exit ;
66706: GO 66767
// for i in tmp do
66708: LD_ADDR_VAR 0 2
66712: PUSH
66713: LD_VAR 0 4
66717: PUSH
66718: FOR_IN
66719: IFFALSE 66765
// for j = 1 to 3 do
66721: LD_ADDR_VAR 0 3
66725: PUSH
66726: DOUBLE
66727: LD_INT 1
66729: DEC
66730: ST_TO_ADDR
66731: LD_INT 3
66733: PUSH
66734: FOR_TO
66735: IFFALSE 66761
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
66737: LD_VAR 0 2
66741: PPUSH
66742: CALL_OW 274
66746: PPUSH
66747: LD_VAR 0 3
66751: PPUSH
66752: LD_INT 99999
66754: PPUSH
66755: CALL_OW 277
66759: GO 66734
66761: POP
66762: POP
66763: GO 66718
66765: POP
66766: POP
// end ;
66767: LD_VAR 0 1
66771: RET
// export function hHackSetLevel10 ; var i , j ; begin
66772: LD_INT 0
66774: PPUSH
66775: PPUSH
66776: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
66777: LD_ADDR_VAR 0 2
66781: PUSH
66782: LD_INT 21
66784: PUSH
66785: LD_INT 1
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PPUSH
66792: CALL_OW 69
66796: PUSH
66797: FOR_IN
66798: IFFALSE 66850
// if IsSelected ( i ) then
66800: LD_VAR 0 2
66804: PPUSH
66805: CALL_OW 306
66809: IFFALSE 66848
// begin for j := 1 to 4 do
66811: LD_ADDR_VAR 0 3
66815: PUSH
66816: DOUBLE
66817: LD_INT 1
66819: DEC
66820: ST_TO_ADDR
66821: LD_INT 4
66823: PUSH
66824: FOR_TO
66825: IFFALSE 66846
// SetSkill ( i , j , 10 ) ;
66827: LD_VAR 0 2
66831: PPUSH
66832: LD_VAR 0 3
66836: PPUSH
66837: LD_INT 10
66839: PPUSH
66840: CALL_OW 237
66844: GO 66824
66846: POP
66847: POP
// end ;
66848: GO 66797
66850: POP
66851: POP
// end ;
66852: LD_VAR 0 1
66856: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
66857: LD_INT 0
66859: PPUSH
66860: PPUSH
66861: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
66862: LD_ADDR_VAR 0 2
66866: PUSH
66867: LD_INT 22
66869: PUSH
66870: LD_OWVAR 2
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 21
66881: PUSH
66882: LD_INT 1
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PPUSH
66893: CALL_OW 69
66897: PUSH
66898: FOR_IN
66899: IFFALSE 66940
// begin for j := 1 to 4 do
66901: LD_ADDR_VAR 0 3
66905: PUSH
66906: DOUBLE
66907: LD_INT 1
66909: DEC
66910: ST_TO_ADDR
66911: LD_INT 4
66913: PUSH
66914: FOR_TO
66915: IFFALSE 66936
// SetSkill ( i , j , 10 ) ;
66917: LD_VAR 0 2
66921: PPUSH
66922: LD_VAR 0 3
66926: PPUSH
66927: LD_INT 10
66929: PPUSH
66930: CALL_OW 237
66934: GO 66914
66936: POP
66937: POP
// end ;
66938: GO 66898
66940: POP
66941: POP
// end ;
66942: LD_VAR 0 1
66946: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
66947: LD_INT 0
66949: PPUSH
// uc_side := your_side ;
66950: LD_ADDR_OWVAR 20
66954: PUSH
66955: LD_OWVAR 2
66959: ST_TO_ADDR
// uc_nation := nation ;
66960: LD_ADDR_OWVAR 21
66964: PUSH
66965: LD_VAR 0 1
66969: ST_TO_ADDR
// InitHc ;
66970: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
66974: LD_INT 0
66976: PPUSH
66977: LD_VAR 0 2
66981: PPUSH
66982: LD_VAR 0 3
66986: PPUSH
66987: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
66991: LD_VAR 0 4
66995: PPUSH
66996: LD_VAR 0 5
67000: PPUSH
67001: CALL_OW 428
67005: PUSH
67006: LD_INT 0
67008: EQUAL
67009: IFFALSE 67033
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
67011: CALL_OW 44
67015: PPUSH
67016: LD_VAR 0 4
67020: PPUSH
67021: LD_VAR 0 5
67025: PPUSH
67026: LD_INT 1
67028: PPUSH
67029: CALL_OW 48
// end ;
67033: LD_VAR 0 6
67037: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
67038: LD_INT 0
67040: PPUSH
67041: PPUSH
// uc_side := your_side ;
67042: LD_ADDR_OWVAR 20
67046: PUSH
67047: LD_OWVAR 2
67051: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
67052: LD_VAR 0 1
67056: PUSH
67057: LD_INT 1
67059: PUSH
67060: LD_INT 2
67062: PUSH
67063: LD_INT 3
67065: PUSH
67066: LD_INT 4
67068: PUSH
67069: LD_INT 5
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: IN
67079: IFFALSE 67091
// uc_nation := nation_american else
67081: LD_ADDR_OWVAR 21
67085: PUSH
67086: LD_INT 1
67088: ST_TO_ADDR
67089: GO 67134
// if chassis in [ 11 , 12 , 13 , 14 ] then
67091: LD_VAR 0 1
67095: PUSH
67096: LD_INT 11
67098: PUSH
67099: LD_INT 12
67101: PUSH
67102: LD_INT 13
67104: PUSH
67105: LD_INT 14
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: IN
67114: IFFALSE 67126
// uc_nation := nation_arabian else
67116: LD_ADDR_OWVAR 21
67120: PUSH
67121: LD_INT 2
67123: ST_TO_ADDR
67124: GO 67134
// uc_nation := nation_russian ;
67126: LD_ADDR_OWVAR 21
67130: PUSH
67131: LD_INT 3
67133: ST_TO_ADDR
// vc_chassis := chassis ;
67134: LD_ADDR_OWVAR 37
67138: PUSH
67139: LD_VAR 0 1
67143: ST_TO_ADDR
// vc_engine := engine ;
67144: LD_ADDR_OWVAR 39
67148: PUSH
67149: LD_VAR 0 2
67153: ST_TO_ADDR
// vc_control := control ;
67154: LD_ADDR_OWVAR 38
67158: PUSH
67159: LD_VAR 0 3
67163: ST_TO_ADDR
// vc_weapon := weapon ;
67164: LD_ADDR_OWVAR 40
67168: PUSH
67169: LD_VAR 0 4
67173: ST_TO_ADDR
// un := CreateVehicle ;
67174: LD_ADDR_VAR 0 8
67178: PUSH
67179: CALL_OW 45
67183: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
67184: LD_VAR 0 8
67188: PPUSH
67189: LD_INT 0
67191: PPUSH
67192: LD_INT 5
67194: PPUSH
67195: CALL_OW 12
67199: PPUSH
67200: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
67204: LD_VAR 0 8
67208: PPUSH
67209: LD_VAR 0 5
67213: PPUSH
67214: LD_VAR 0 6
67218: PPUSH
67219: LD_INT 1
67221: PPUSH
67222: CALL_OW 48
// end ;
67226: LD_VAR 0 7
67230: RET
// export hInvincible ; every 1 do
67231: GO 67233
67233: DISABLE
// hInvincible := [ ] ;
67234: LD_ADDR_EXP 99
67238: PUSH
67239: EMPTY
67240: ST_TO_ADDR
67241: END
// every 10 do var i ;
67242: GO 67244
67244: DISABLE
67245: LD_INT 0
67247: PPUSH
// begin enable ;
67248: ENABLE
// if not hInvincible then
67249: LD_EXP 99
67253: NOT
67254: IFFALSE 67258
// exit ;
67256: GO 67302
// for i in hInvincible do
67258: LD_ADDR_VAR 0 1
67262: PUSH
67263: LD_EXP 99
67267: PUSH
67268: FOR_IN
67269: IFFALSE 67300
// if GetLives ( i ) < 1000 then
67271: LD_VAR 0 1
67275: PPUSH
67276: CALL_OW 256
67280: PUSH
67281: LD_INT 1000
67283: LESS
67284: IFFALSE 67298
// SetLives ( i , 1000 ) ;
67286: LD_VAR 0 1
67290: PPUSH
67291: LD_INT 1000
67293: PPUSH
67294: CALL_OW 234
67298: GO 67268
67300: POP
67301: POP
// end ;
67302: PPOPN 1
67304: END
// export function hHackInvincible ; var i ; begin
67305: LD_INT 0
67307: PPUSH
67308: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
67309: LD_ADDR_VAR 0 2
67313: PUSH
67314: LD_INT 2
67316: PUSH
67317: LD_INT 21
67319: PUSH
67320: LD_INT 1
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 21
67329: PUSH
67330: LD_INT 2
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: LIST
67341: PPUSH
67342: CALL_OW 69
67346: PUSH
67347: FOR_IN
67348: IFFALSE 67409
// if IsSelected ( i ) then
67350: LD_VAR 0 2
67354: PPUSH
67355: CALL_OW 306
67359: IFFALSE 67407
// begin if i in hInvincible then
67361: LD_VAR 0 2
67365: PUSH
67366: LD_EXP 99
67370: IN
67371: IFFALSE 67391
// hInvincible := hInvincible diff i else
67373: LD_ADDR_EXP 99
67377: PUSH
67378: LD_EXP 99
67382: PUSH
67383: LD_VAR 0 2
67387: DIFF
67388: ST_TO_ADDR
67389: GO 67407
// hInvincible := hInvincible union i ;
67391: LD_ADDR_EXP 99
67395: PUSH
67396: LD_EXP 99
67400: PUSH
67401: LD_VAR 0 2
67405: UNION
67406: ST_TO_ADDR
// end ;
67407: GO 67347
67409: POP
67410: POP
// end ;
67411: LD_VAR 0 1
67415: RET
// export function hHackInvisible ; var i , j ; begin
67416: LD_INT 0
67418: PPUSH
67419: PPUSH
67420: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67421: LD_ADDR_VAR 0 2
67425: PUSH
67426: LD_INT 21
67428: PUSH
67429: LD_INT 1
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PPUSH
67436: CALL_OW 69
67440: PUSH
67441: FOR_IN
67442: IFFALSE 67466
// if IsSelected ( i ) then
67444: LD_VAR 0 2
67448: PPUSH
67449: CALL_OW 306
67453: IFFALSE 67464
// ComForceInvisible ( i ) ;
67455: LD_VAR 0 2
67459: PPUSH
67460: CALL_OW 496
67464: GO 67441
67466: POP
67467: POP
// end ;
67468: LD_VAR 0 1
67472: RET
// export function hHackChangeYourSide ; begin
67473: LD_INT 0
67475: PPUSH
// if your_side = 8 then
67476: LD_OWVAR 2
67480: PUSH
67481: LD_INT 8
67483: EQUAL
67484: IFFALSE 67496
// your_side := 0 else
67486: LD_ADDR_OWVAR 2
67490: PUSH
67491: LD_INT 0
67493: ST_TO_ADDR
67494: GO 67510
// your_side := your_side + 1 ;
67496: LD_ADDR_OWVAR 2
67500: PUSH
67501: LD_OWVAR 2
67505: PUSH
67506: LD_INT 1
67508: PLUS
67509: ST_TO_ADDR
// end ;
67510: LD_VAR 0 1
67514: RET
// export function hHackChangeUnitSide ; var i , j ; begin
67515: LD_INT 0
67517: PPUSH
67518: PPUSH
67519: PPUSH
// for i in all_units do
67520: LD_ADDR_VAR 0 2
67524: PUSH
67525: LD_OWVAR 3
67529: PUSH
67530: FOR_IN
67531: IFFALSE 67609
// if IsSelected ( i ) then
67533: LD_VAR 0 2
67537: PPUSH
67538: CALL_OW 306
67542: IFFALSE 67607
// begin j := GetSide ( i ) ;
67544: LD_ADDR_VAR 0 3
67548: PUSH
67549: LD_VAR 0 2
67553: PPUSH
67554: CALL_OW 255
67558: ST_TO_ADDR
// if j = 8 then
67559: LD_VAR 0 3
67563: PUSH
67564: LD_INT 8
67566: EQUAL
67567: IFFALSE 67579
// j := 0 else
67569: LD_ADDR_VAR 0 3
67573: PUSH
67574: LD_INT 0
67576: ST_TO_ADDR
67577: GO 67593
// j := j + 1 ;
67579: LD_ADDR_VAR 0 3
67583: PUSH
67584: LD_VAR 0 3
67588: PUSH
67589: LD_INT 1
67591: PLUS
67592: ST_TO_ADDR
// SetSide ( i , j ) ;
67593: LD_VAR 0 2
67597: PPUSH
67598: LD_VAR 0 3
67602: PPUSH
67603: CALL_OW 235
// end ;
67607: GO 67530
67609: POP
67610: POP
// end ;
67611: LD_VAR 0 1
67615: RET
// export function hHackFog ; begin
67616: LD_INT 0
67618: PPUSH
// FogOff ( true ) ;
67619: LD_INT 1
67621: PPUSH
67622: CALL_OW 344
// end ;
67626: LD_VAR 0 1
67630: RET
// export function hHackTeleport ( unit , x , y ) ; begin
67631: LD_INT 0
67633: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
67634: LD_VAR 0 1
67638: PPUSH
67639: LD_VAR 0 2
67643: PPUSH
67644: LD_VAR 0 3
67648: PPUSH
67649: LD_INT 1
67651: PPUSH
67652: LD_INT 1
67654: PPUSH
67655: CALL_OW 483
// CenterOnXY ( x , y ) ;
67659: LD_VAR 0 2
67663: PPUSH
67664: LD_VAR 0 3
67668: PPUSH
67669: CALL_OW 84
// end ;
67673: LD_VAR 0 4
67677: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
67678: LD_INT 0
67680: PPUSH
67681: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
67682: LD_VAR 0 1
67686: NOT
67687: PUSH
67688: LD_VAR 0 2
67692: PPUSH
67693: LD_VAR 0 3
67697: PPUSH
67698: CALL_OW 488
67702: NOT
67703: OR
67704: PUSH
67705: LD_VAR 0 1
67709: PPUSH
67710: CALL_OW 266
67714: PUSH
67715: LD_INT 3
67717: NONEQUAL
67718: PUSH
67719: LD_VAR 0 1
67723: PPUSH
67724: CALL_OW 247
67728: PUSH
67729: LD_INT 1
67731: EQUAL
67732: NOT
67733: AND
67734: OR
67735: IFFALSE 67739
// exit ;
67737: GO 67888
// if GetType ( factory ) = unit_human then
67739: LD_VAR 0 1
67743: PPUSH
67744: CALL_OW 247
67748: PUSH
67749: LD_INT 1
67751: EQUAL
67752: IFFALSE 67769
// factory := IsInUnit ( factory ) ;
67754: LD_ADDR_VAR 0 1
67758: PUSH
67759: LD_VAR 0 1
67763: PPUSH
67764: CALL_OW 310
67768: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
67769: LD_VAR 0 1
67773: PPUSH
67774: CALL_OW 266
67778: PUSH
67779: LD_INT 3
67781: NONEQUAL
67782: IFFALSE 67786
// exit ;
67784: GO 67888
// if HexInfo ( x , y ) = factory then
67786: LD_VAR 0 2
67790: PPUSH
67791: LD_VAR 0 3
67795: PPUSH
67796: CALL_OW 428
67800: PUSH
67801: LD_VAR 0 1
67805: EQUAL
67806: IFFALSE 67833
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
67808: LD_ADDR_EXP 100
67812: PUSH
67813: LD_EXP 100
67817: PPUSH
67818: LD_VAR 0 1
67822: PPUSH
67823: LD_INT 0
67825: PPUSH
67826: CALL_OW 1
67830: ST_TO_ADDR
67831: GO 67884
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
67833: LD_ADDR_EXP 100
67837: PUSH
67838: LD_EXP 100
67842: PPUSH
67843: LD_VAR 0 1
67847: PPUSH
67848: LD_VAR 0 1
67852: PPUSH
67853: CALL_OW 255
67857: PUSH
67858: LD_VAR 0 1
67862: PUSH
67863: LD_VAR 0 2
67867: PUSH
67868: LD_VAR 0 3
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: PPUSH
67879: CALL_OW 1
67883: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67884: CALL 67893 0 0
// end ;
67888: LD_VAR 0 4
67892: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
67893: LD_INT 0
67895: PPUSH
67896: PPUSH
67897: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
67898: LD_STRING resetFactoryWaypoint();
67900: PPUSH
67901: CALL_OW 559
// if factoryWaypoints then
67905: LD_EXP 100
67909: IFFALSE 68035
// begin list := PrepareArray ( factoryWaypoints ) ;
67911: LD_ADDR_VAR 0 3
67915: PUSH
67916: LD_EXP 100
67920: PPUSH
67921: CALL 44224 0 1
67925: ST_TO_ADDR
// for i := 1 to list do
67926: LD_ADDR_VAR 0 2
67930: PUSH
67931: DOUBLE
67932: LD_INT 1
67934: DEC
67935: ST_TO_ADDR
67936: LD_VAR 0 3
67940: PUSH
67941: FOR_TO
67942: IFFALSE 68033
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67944: LD_STRING setFactoryWaypointXY(
67946: PUSH
67947: LD_VAR 0 3
67951: PUSH
67952: LD_VAR 0 2
67956: ARRAY
67957: PUSH
67958: LD_INT 1
67960: ARRAY
67961: STR
67962: PUSH
67963: LD_STRING ,
67965: STR
67966: PUSH
67967: LD_VAR 0 3
67971: PUSH
67972: LD_VAR 0 2
67976: ARRAY
67977: PUSH
67978: LD_INT 2
67980: ARRAY
67981: STR
67982: PUSH
67983: LD_STRING ,
67985: STR
67986: PUSH
67987: LD_VAR 0 3
67991: PUSH
67992: LD_VAR 0 2
67996: ARRAY
67997: PUSH
67998: LD_INT 3
68000: ARRAY
68001: STR
68002: PUSH
68003: LD_STRING ,
68005: STR
68006: PUSH
68007: LD_VAR 0 3
68011: PUSH
68012: LD_VAR 0 2
68016: ARRAY
68017: PUSH
68018: LD_INT 4
68020: ARRAY
68021: STR
68022: PUSH
68023: LD_STRING )
68025: STR
68026: PPUSH
68027: CALL_OW 559
68031: GO 67941
68033: POP
68034: POP
// end ; end ;
68035: LD_VAR 0 1
68039: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
68040: LD_INT 0
68042: PPUSH
// if HexInfo ( x , y ) = warehouse then
68043: LD_VAR 0 2
68047: PPUSH
68048: LD_VAR 0 3
68052: PPUSH
68053: CALL_OW 428
68057: PUSH
68058: LD_VAR 0 1
68062: EQUAL
68063: IFFALSE 68090
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
68065: LD_ADDR_EXP 101
68069: PUSH
68070: LD_EXP 101
68074: PPUSH
68075: LD_VAR 0 1
68079: PPUSH
68080: LD_INT 0
68082: PPUSH
68083: CALL_OW 1
68087: ST_TO_ADDR
68088: GO 68141
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
68090: LD_ADDR_EXP 101
68094: PUSH
68095: LD_EXP 101
68099: PPUSH
68100: LD_VAR 0 1
68104: PPUSH
68105: LD_VAR 0 1
68109: PPUSH
68110: CALL_OW 255
68114: PUSH
68115: LD_VAR 0 1
68119: PUSH
68120: LD_VAR 0 2
68124: PUSH
68125: LD_VAR 0 3
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: PPUSH
68136: CALL_OW 1
68140: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
68141: CALL 68150 0 0
// end ;
68145: LD_VAR 0 4
68149: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
68150: LD_INT 0
68152: PPUSH
68153: PPUSH
68154: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
68155: LD_STRING resetWarehouseGatheringPoints();
68157: PPUSH
68158: CALL_OW 559
// if warehouseGatheringPoints then
68162: LD_EXP 101
68166: IFFALSE 68292
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
68168: LD_ADDR_VAR 0 3
68172: PUSH
68173: LD_EXP 101
68177: PPUSH
68178: CALL 44224 0 1
68182: ST_TO_ADDR
// for i := 1 to list do
68183: LD_ADDR_VAR 0 2
68187: PUSH
68188: DOUBLE
68189: LD_INT 1
68191: DEC
68192: ST_TO_ADDR
68193: LD_VAR 0 3
68197: PUSH
68198: FOR_TO
68199: IFFALSE 68290
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68201: LD_STRING setWarehouseGatheringPointXY(
68203: PUSH
68204: LD_VAR 0 3
68208: PUSH
68209: LD_VAR 0 2
68213: ARRAY
68214: PUSH
68215: LD_INT 1
68217: ARRAY
68218: STR
68219: PUSH
68220: LD_STRING ,
68222: STR
68223: PUSH
68224: LD_VAR 0 3
68228: PUSH
68229: LD_VAR 0 2
68233: ARRAY
68234: PUSH
68235: LD_INT 2
68237: ARRAY
68238: STR
68239: PUSH
68240: LD_STRING ,
68242: STR
68243: PUSH
68244: LD_VAR 0 3
68248: PUSH
68249: LD_VAR 0 2
68253: ARRAY
68254: PUSH
68255: LD_INT 3
68257: ARRAY
68258: STR
68259: PUSH
68260: LD_STRING ,
68262: STR
68263: PUSH
68264: LD_VAR 0 3
68268: PUSH
68269: LD_VAR 0 2
68273: ARRAY
68274: PUSH
68275: LD_INT 4
68277: ARRAY
68278: STR
68279: PUSH
68280: LD_STRING )
68282: STR
68283: PPUSH
68284: CALL_OW 559
68288: GO 68198
68290: POP
68291: POP
// end ; end ;
68292: LD_VAR 0 1
68296: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
68297: LD_EXP 101
68301: IFFALSE 68986
68303: GO 68305
68305: DISABLE
68306: LD_INT 0
68308: PPUSH
68309: PPUSH
68310: PPUSH
68311: PPUSH
68312: PPUSH
68313: PPUSH
68314: PPUSH
68315: PPUSH
68316: PPUSH
// begin enable ;
68317: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
68318: LD_ADDR_VAR 0 3
68322: PUSH
68323: LD_EXP 101
68327: PPUSH
68328: CALL 44224 0 1
68332: ST_TO_ADDR
// if not list then
68333: LD_VAR 0 3
68337: NOT
68338: IFFALSE 68342
// exit ;
68340: GO 68986
// for i := 1 to list do
68342: LD_ADDR_VAR 0 1
68346: PUSH
68347: DOUBLE
68348: LD_INT 1
68350: DEC
68351: ST_TO_ADDR
68352: LD_VAR 0 3
68356: PUSH
68357: FOR_TO
68358: IFFALSE 68984
// begin depot := list [ i ] [ 2 ] ;
68360: LD_ADDR_VAR 0 8
68364: PUSH
68365: LD_VAR 0 3
68369: PUSH
68370: LD_VAR 0 1
68374: ARRAY
68375: PUSH
68376: LD_INT 2
68378: ARRAY
68379: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
68380: LD_ADDR_VAR 0 5
68384: PUSH
68385: LD_VAR 0 3
68389: PUSH
68390: LD_VAR 0 1
68394: ARRAY
68395: PUSH
68396: LD_INT 1
68398: ARRAY
68399: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
68400: LD_VAR 0 8
68404: PPUSH
68405: CALL_OW 301
68409: PUSH
68410: LD_VAR 0 5
68414: PUSH
68415: LD_VAR 0 8
68419: PPUSH
68420: CALL_OW 255
68424: NONEQUAL
68425: OR
68426: IFFALSE 68455
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
68428: LD_ADDR_EXP 101
68432: PUSH
68433: LD_EXP 101
68437: PPUSH
68438: LD_VAR 0 8
68442: PPUSH
68443: LD_INT 0
68445: PPUSH
68446: CALL_OW 1
68450: ST_TO_ADDR
// exit ;
68451: POP
68452: POP
68453: GO 68986
// end ; x := list [ i ] [ 3 ] ;
68455: LD_ADDR_VAR 0 6
68459: PUSH
68460: LD_VAR 0 3
68464: PUSH
68465: LD_VAR 0 1
68469: ARRAY
68470: PUSH
68471: LD_INT 3
68473: ARRAY
68474: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
68475: LD_ADDR_VAR 0 7
68479: PUSH
68480: LD_VAR 0 3
68484: PUSH
68485: LD_VAR 0 1
68489: ARRAY
68490: PUSH
68491: LD_INT 4
68493: ARRAY
68494: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
68495: LD_ADDR_VAR 0 9
68499: PUSH
68500: LD_VAR 0 6
68504: PPUSH
68505: LD_VAR 0 7
68509: PPUSH
68510: LD_INT 16
68512: PPUSH
68513: CALL 42808 0 3
68517: ST_TO_ADDR
// if not cratesNearbyPoint then
68518: LD_VAR 0 9
68522: NOT
68523: IFFALSE 68529
// exit ;
68525: POP
68526: POP
68527: GO 68986
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
68529: LD_ADDR_VAR 0 4
68533: PUSH
68534: LD_INT 22
68536: PUSH
68537: LD_VAR 0 5
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 3
68548: PUSH
68549: LD_INT 60
68551: PUSH
68552: EMPTY
68553: LIST
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 91
68561: PUSH
68562: LD_VAR 0 8
68566: PUSH
68567: LD_INT 6
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 2
68577: PUSH
68578: LD_INT 25
68580: PUSH
68581: LD_INT 2
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 25
68590: PUSH
68591: LD_INT 16
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: LIST
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: PPUSH
68609: CALL_OW 69
68613: PUSH
68614: LD_VAR 0 8
68618: PPUSH
68619: CALL_OW 313
68623: PPUSH
68624: LD_INT 3
68626: PUSH
68627: LD_INT 60
68629: PUSH
68630: EMPTY
68631: LIST
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 2
68639: PUSH
68640: LD_INT 25
68642: PUSH
68643: LD_INT 2
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 25
68652: PUSH
68653: LD_INT 16
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: LIST
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PPUSH
68669: CALL_OW 72
68673: UNION
68674: ST_TO_ADDR
// if tmp then
68675: LD_VAR 0 4
68679: IFFALSE 68759
// begin tmp := ShrinkArray ( tmp , 3 ) ;
68681: LD_ADDR_VAR 0 4
68685: PUSH
68686: LD_VAR 0 4
68690: PPUSH
68691: LD_INT 3
68693: PPUSH
68694: CALL 40777 0 2
68698: ST_TO_ADDR
// for j in tmp do
68699: LD_ADDR_VAR 0 2
68703: PUSH
68704: LD_VAR 0 4
68708: PUSH
68709: FOR_IN
68710: IFFALSE 68753
// begin if IsInUnit ( j ) then
68712: LD_VAR 0 2
68716: PPUSH
68717: CALL_OW 310
68721: IFFALSE 68732
// ComExit ( j ) ;
68723: LD_VAR 0 2
68727: PPUSH
68728: CALL 40860 0 1
// AddComCollect ( j , x , y ) ;
68732: LD_VAR 0 2
68736: PPUSH
68737: LD_VAR 0 6
68741: PPUSH
68742: LD_VAR 0 7
68746: PPUSH
68747: CALL_OW 177
// end ;
68751: GO 68709
68753: POP
68754: POP
// exit ;
68755: POP
68756: POP
68757: GO 68986
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
68759: LD_ADDR_VAR 0 4
68763: PUSH
68764: LD_INT 22
68766: PUSH
68767: LD_VAR 0 5
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 91
68778: PUSH
68779: LD_VAR 0 8
68783: PUSH
68784: LD_INT 8
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 2
68794: PUSH
68795: LD_INT 34
68797: PUSH
68798: LD_INT 12
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 34
68807: PUSH
68808: LD_INT 51
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 34
68817: PUSH
68818: LD_INT 32
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 34
68827: PUSH
68828: LD_INT 89
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: LIST
68846: PPUSH
68847: CALL_OW 69
68851: ST_TO_ADDR
// if tmp then
68852: LD_VAR 0 4
68856: IFFALSE 68982
// begin for j in tmp do
68858: LD_ADDR_VAR 0 2
68862: PUSH
68863: LD_VAR 0 4
68867: PUSH
68868: FOR_IN
68869: IFFALSE 68980
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
68871: LD_VAR 0 2
68875: PPUSH
68876: CALL_OW 262
68880: PUSH
68881: LD_INT 3
68883: EQUAL
68884: PUSH
68885: LD_VAR 0 2
68889: PPUSH
68890: CALL_OW 261
68894: PUSH
68895: LD_INT 20
68897: GREATER
68898: OR
68899: PUSH
68900: LD_VAR 0 2
68904: PPUSH
68905: CALL_OW 314
68909: NOT
68910: AND
68911: PUSH
68912: LD_VAR 0 2
68916: PPUSH
68917: CALL_OW 263
68921: PUSH
68922: LD_INT 1
68924: NONEQUAL
68925: PUSH
68926: LD_VAR 0 2
68930: PPUSH
68931: CALL_OW 311
68935: OR
68936: AND
68937: IFFALSE 68978
// begin ComCollect ( j , x , y ) ;
68939: LD_VAR 0 2
68943: PPUSH
68944: LD_VAR 0 6
68948: PPUSH
68949: LD_VAR 0 7
68953: PPUSH
68954: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
68958: LD_VAR 0 2
68962: PPUSH
68963: LD_VAR 0 8
68967: PPUSH
68968: CALL_OW 172
// exit ;
68972: POP
68973: POP
68974: POP
68975: POP
68976: GO 68986
// end ;
68978: GO 68868
68980: POP
68981: POP
// end ; end ;
68982: GO 68357
68984: POP
68985: POP
// end ; end_of_file
68986: PPOPN 9
68988: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68989: LD_VAR 0 1
68993: PUSH
68994: LD_INT 200
68996: DOUBLE
68997: GREATEREQUAL
68998: IFFALSE 69006
69000: LD_INT 299
69002: DOUBLE
69003: LESSEQUAL
69004: IFTRUE 69008
69006: GO 69040
69008: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69009: LD_VAR 0 1
69013: PPUSH
69014: LD_VAR 0 2
69018: PPUSH
69019: LD_VAR 0 3
69023: PPUSH
69024: LD_VAR 0 4
69028: PPUSH
69029: LD_VAR 0 5
69033: PPUSH
69034: CALL 69641 0 5
69038: GO 69117
69040: LD_INT 300
69042: DOUBLE
69043: GREATEREQUAL
69044: IFFALSE 69052
69046: LD_INT 399
69048: DOUBLE
69049: LESSEQUAL
69050: IFTRUE 69054
69052: GO 69116
69054: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69055: LD_VAR 0 1
69059: PPUSH
69060: LD_VAR 0 2
69064: PPUSH
69065: LD_VAR 0 3
69069: PPUSH
69070: LD_VAR 0 4
69074: PPUSH
69075: LD_VAR 0 5
69079: PPUSH
69080: LD_VAR 0 6
69084: PPUSH
69085: LD_VAR 0 7
69089: PPUSH
69090: LD_VAR 0 8
69094: PPUSH
69095: LD_VAR 0 9
69099: PPUSH
69100: LD_VAR 0 10
69104: PPUSH
69105: LD_VAR 0 11
69109: PPUSH
69110: CALL 65690 0 11
69114: GO 69117
69116: POP
// end ;
69117: PPOPN 11
69119: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69120: LD_VAR 0 1
69124: PPUSH
69125: LD_VAR 0 2
69129: PPUSH
69130: LD_VAR 0 3
69134: PPUSH
69135: LD_VAR 0 4
69139: PPUSH
69140: LD_VAR 0 5
69144: PPUSH
69145: CALL 69202 0 5
// end ; end_of_file
69149: PPOPN 5
69151: END
// export function SOS_UnitDestroyed ( un ) ; begin
69152: LD_INT 0
69154: PPUSH
// ComRadiation ( un ) ;
69155: LD_VAR 0 1
69159: PPUSH
69160: CALL 70045 0 1
// end ;
69164: LD_VAR 0 2
69168: RET
// export function SOS_UnitKamikazed ( un ) ; begin
69169: LD_INT 0
69171: PPUSH
// ComRadiation ( un ) ;
69172: LD_VAR 0 1
69176: PPUSH
69177: CALL 70045 0 1
// end ;
69181: LD_VAR 0 2
69185: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
69186: LD_INT 0
69188: PPUSH
// end ;
69189: LD_VAR 0 4
69193: RET
// export function SOS_Command ( cmd ) ; begin
69194: LD_INT 0
69196: PPUSH
// end ;
69197: LD_VAR 0 2
69201: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
69202: LD_INT 0
69204: PPUSH
// end ;
69205: LD_VAR 0 6
69209: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver , hex ; begin
69210: LD_INT 0
69212: PPUSH
69213: PPUSH
69214: PPUSH
69215: PPUSH
// if not vehicle or not factory then
69216: LD_VAR 0 1
69220: NOT
69221: PUSH
69222: LD_VAR 0 2
69226: NOT
69227: OR
69228: IFFALSE 69232
// exit ;
69230: GO 69636
// if factoryWaypoints >= factory then
69232: LD_EXP 100
69236: PUSH
69237: LD_VAR 0 2
69241: GREATEREQUAL
69242: IFFALSE 69636
// if factoryWaypoints [ factory ] then
69244: LD_EXP 100
69248: PUSH
69249: LD_VAR 0 2
69253: ARRAY
69254: IFFALSE 69636
// begin if GetControl ( vehicle ) = control_manual then
69256: LD_VAR 0 1
69260: PPUSH
69261: CALL_OW 263
69265: PUSH
69266: LD_INT 1
69268: EQUAL
69269: IFFALSE 69523
// begin driver := IsDrivenBy ( vehicle ) ;
69271: LD_ADDR_VAR 0 5
69275: PUSH
69276: LD_VAR 0 1
69280: PPUSH
69281: CALL_OW 311
69285: ST_TO_ADDR
// tag := GetTag ( driver ) ;
69286: LD_ADDR_VAR 0 4
69290: PUSH
69291: LD_VAR 0 5
69295: PPUSH
69296: CALL_OW 110
69300: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
69301: LD_VAR 0 4
69305: PUSH
69306: LD_INT 501
69308: EQUAL
69309: PUSH
69310: LD_VAR 0 1
69314: PPUSH
69315: CALL_OW 110
69319: PUSH
69320: LD_INT 501
69322: EQUAL
69323: OR
69324: IFFALSE 69328
// exit ;
69326: GO 69636
// if not HasTask ( driver ) then
69328: LD_VAR 0 5
69332: PPUSH
69333: CALL_OW 314
69337: NOT
69338: IFFALSE 69521
// begin SetTag ( driver , tDriver ) ;
69340: LD_VAR 0 5
69344: PPUSH
69345: LD_INT 501
69347: PPUSH
69348: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
69352: LD_VAR 0 1
69356: PPUSH
69357: LD_INT 501
69359: PPUSH
69360: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69364: LD_ADDR_VAR 0 6
69368: PUSH
69369: LD_EXP 100
69373: PUSH
69374: LD_VAR 0 2
69378: ARRAY
69379: PUSH
69380: LD_INT 3
69382: ARRAY
69383: PPUSH
69384: LD_EXP 100
69388: PUSH
69389: LD_VAR 0 2
69393: ARRAY
69394: PUSH
69395: LD_INT 4
69397: ARRAY
69398: PPUSH
69399: CALL_OW 428
69403: ST_TO_ADDR
// if hex then
69404: LD_VAR 0 6
69408: IFFALSE 69426
// ComMoveUnit ( driver , hex ) else
69410: LD_VAR 0 5
69414: PPUSH
69415: LD_VAR 0 6
69419: PPUSH
69420: CALL_OW 112
69424: GO 69465
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69426: LD_VAR 0 5
69430: PPUSH
69431: LD_EXP 100
69435: PUSH
69436: LD_VAR 0 2
69440: ARRAY
69441: PUSH
69442: LD_INT 3
69444: ARRAY
69445: PPUSH
69446: LD_EXP 100
69450: PUSH
69451: LD_VAR 0 2
69455: ARRAY
69456: PUSH
69457: LD_INT 4
69459: ARRAY
69460: PPUSH
69461: CALL_OW 111
// AddComExitVehicle ( driver ) ;
69465: LD_VAR 0 5
69469: PPUSH
69470: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
69474: LD_VAR 0 5
69478: PPUSH
69479: LD_VAR 0 2
69483: PPUSH
69484: CALL_OW 180
// wait ( 0 0$1 ) ;
69488: LD_INT 35
69490: PPUSH
69491: CALL_OW 67
// SetTag ( driver , tag ) ;
69495: LD_VAR 0 5
69499: PPUSH
69500: LD_VAR 0 4
69504: PPUSH
69505: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
69509: LD_VAR 0 1
69513: PPUSH
69514: LD_INT 0
69516: PPUSH
69517: CALL_OW 109
// end ; end else
69521: GO 69636
// if GetControl ( vehicle ) = control_remote then
69523: LD_VAR 0 1
69527: PPUSH
69528: CALL_OW 263
69532: PUSH
69533: LD_INT 2
69535: EQUAL
69536: IFFALSE 69597
// begin wait ( 0 0$2 ) ;
69538: LD_INT 70
69540: PPUSH
69541: CALL_OW 67
// if Connect ( vehicle ) then
69545: LD_VAR 0 1
69549: PPUSH
69550: CALL 11079 0 1
69554: IFFALSE 69595
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69556: LD_VAR 0 1
69560: PPUSH
69561: LD_EXP 100
69565: PUSH
69566: LD_VAR 0 2
69570: ARRAY
69571: PUSH
69572: LD_INT 3
69574: ARRAY
69575: PPUSH
69576: LD_EXP 100
69580: PUSH
69581: LD_VAR 0 2
69585: ARRAY
69586: PUSH
69587: LD_INT 4
69589: ARRAY
69590: PPUSH
69591: CALL_OW 171
// end else
69595: GO 69636
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69597: LD_VAR 0 1
69601: PPUSH
69602: LD_EXP 100
69606: PUSH
69607: LD_VAR 0 2
69611: ARRAY
69612: PUSH
69613: LD_INT 3
69615: ARRAY
69616: PPUSH
69617: LD_EXP 100
69621: PUSH
69622: LD_VAR 0 2
69626: ARRAY
69627: PUSH
69628: LD_INT 4
69630: ARRAY
69631: PPUSH
69632: CALL_OW 171
// end ; end ;
69636: LD_VAR 0 3
69640: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
69641: LD_INT 0
69643: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
69644: LD_VAR 0 1
69648: PUSH
69649: LD_INT 250
69651: EQUAL
69652: PUSH
69653: LD_VAR 0 2
69657: PPUSH
69658: CALL_OW 264
69662: PUSH
69663: LD_INT 81
69665: EQUAL
69666: AND
69667: IFFALSE 69688
// MinerPlaceMine ( unit , x , y ) ;
69669: LD_VAR 0 2
69673: PPUSH
69674: LD_VAR 0 4
69678: PPUSH
69679: LD_VAR 0 5
69683: PPUSH
69684: CALL 72780 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
69688: LD_VAR 0 1
69692: PUSH
69693: LD_INT 251
69695: EQUAL
69696: PUSH
69697: LD_VAR 0 2
69701: PPUSH
69702: CALL_OW 264
69706: PUSH
69707: LD_INT 81
69709: EQUAL
69710: AND
69711: IFFALSE 69732
// MinerDetonateMine ( unit , x , y ) ;
69713: LD_VAR 0 2
69717: PPUSH
69718: LD_VAR 0 4
69722: PPUSH
69723: LD_VAR 0 5
69727: PPUSH
69728: CALL 73055 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
69732: LD_VAR 0 1
69736: PUSH
69737: LD_INT 252
69739: EQUAL
69740: PUSH
69741: LD_VAR 0 2
69745: PPUSH
69746: CALL_OW 264
69750: PUSH
69751: LD_INT 81
69753: EQUAL
69754: AND
69755: IFFALSE 69776
// MinerCreateMinefield ( unit , x , y ) ;
69757: LD_VAR 0 2
69761: PPUSH
69762: LD_VAR 0 4
69766: PPUSH
69767: LD_VAR 0 5
69771: PPUSH
69772: CALL 73472 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
69776: LD_VAR 0 1
69780: PUSH
69781: LD_INT 253
69783: EQUAL
69784: PUSH
69785: LD_VAR 0 2
69789: PPUSH
69790: CALL_OW 257
69794: PUSH
69795: LD_INT 5
69797: EQUAL
69798: AND
69799: IFFALSE 69820
// ComBinocular ( unit , x , y ) ;
69801: LD_VAR 0 2
69805: PPUSH
69806: LD_VAR 0 4
69810: PPUSH
69811: LD_VAR 0 5
69815: PPUSH
69816: CALL 73841 0 3
// if selectedUnit then
69820: LD_VAR 0 3
69824: IFFALSE 69880
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
69826: LD_VAR 0 1
69830: PUSH
69831: LD_INT 254
69833: EQUAL
69834: PUSH
69835: LD_VAR 0 2
69839: PPUSH
69840: CALL_OW 264
69844: PUSH
69845: LD_INT 99
69847: EQUAL
69848: AND
69849: PUSH
69850: LD_VAR 0 3
69854: PPUSH
69855: CALL_OW 263
69859: PUSH
69860: LD_INT 3
69862: EQUAL
69863: AND
69864: IFFALSE 69880
// HackDestroyVehicle ( unit , selectedUnit ) ;
69866: LD_VAR 0 2
69870: PPUSH
69871: LD_VAR 0 3
69875: PPUSH
69876: CALL 72144 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
69880: LD_VAR 0 1
69884: PUSH
69885: LD_INT 255
69887: EQUAL
69888: PUSH
69889: LD_VAR 0 2
69893: PPUSH
69894: CALL_OW 264
69898: PUSH
69899: LD_INT 14
69901: PUSH
69902: LD_INT 53
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: IN
69909: AND
69910: PUSH
69911: LD_VAR 0 4
69915: PPUSH
69916: LD_VAR 0 5
69920: PPUSH
69921: CALL_OW 488
69925: AND
69926: IFFALSE 69950
// CutTreeXYR ( unit , x , y , 12 ) ;
69928: LD_VAR 0 2
69932: PPUSH
69933: LD_VAR 0 4
69937: PPUSH
69938: LD_VAR 0 5
69942: PPUSH
69943: LD_INT 12
69945: PPUSH
69946: CALL 70141 0 4
// if cmd = 256 then
69950: LD_VAR 0 1
69954: PUSH
69955: LD_INT 256
69957: EQUAL
69958: IFFALSE 69979
// SetFactoryWaypoint ( unit , x , y ) ;
69960: LD_VAR 0 2
69964: PPUSH
69965: LD_VAR 0 4
69969: PPUSH
69970: LD_VAR 0 5
69974: PPUSH
69975: CALL 67678 0 3
// if cmd = 257 then
69979: LD_VAR 0 1
69983: PUSH
69984: LD_INT 257
69986: EQUAL
69987: IFFALSE 70008
// SetWarehouseGatheringPoint ( unit , x , y ) ;
69989: LD_VAR 0 2
69993: PPUSH
69994: LD_VAR 0 4
69998: PPUSH
69999: LD_VAR 0 5
70003: PPUSH
70004: CALL 68040 0 3
// if cmd = 258 then
70008: LD_VAR 0 1
70012: PUSH
70013: LD_INT 258
70015: EQUAL
70016: IFFALSE 70040
// BurnTreeXYR ( unit , x , y , 8 ) ;
70018: LD_VAR 0 2
70022: PPUSH
70023: LD_VAR 0 4
70027: PPUSH
70028: LD_VAR 0 5
70032: PPUSH
70033: LD_INT 8
70035: PPUSH
70036: CALL 70535 0 4
// end ;
70040: LD_VAR 0 6
70044: RET
// export function ComRadiation ( un ) ; var eff ; begin
70045: LD_INT 0
70047: PPUSH
70048: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
70049: LD_VAR 0 1
70053: PPUSH
70054: CALL_OW 264
70058: PUSH
70059: LD_INT 91
70061: NONEQUAL
70062: IFFALSE 70066
// exit ;
70064: GO 70136
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
70066: LD_INT 68
70068: PPUSH
70069: LD_VAR 0 1
70073: PPUSH
70074: CALL_OW 255
70078: PPUSH
70079: CALL_OW 321
70083: PUSH
70084: LD_INT 2
70086: EQUAL
70087: IFFALSE 70099
// eff := 70 else
70089: LD_ADDR_VAR 0 3
70093: PUSH
70094: LD_INT 70
70096: ST_TO_ADDR
70097: GO 70107
// eff := 30 ;
70099: LD_ADDR_VAR 0 3
70103: PUSH
70104: LD_INT 30
70106: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
70107: LD_VAR 0 1
70111: PPUSH
70112: CALL_OW 250
70116: PPUSH
70117: LD_VAR 0 1
70121: PPUSH
70122: CALL_OW 251
70126: PPUSH
70127: LD_VAR 0 3
70131: PPUSH
70132: CALL_OW 495
// end ;
70136: LD_VAR 0 2
70140: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
70141: LD_INT 0
70143: PPUSH
70144: PPUSH
70145: PPUSH
70146: PPUSH
70147: PPUSH
70148: PPUSH
70149: PPUSH
70150: PPUSH
70151: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
70152: LD_VAR 0 1
70156: PPUSH
70157: CALL_OW 302
70161: NOT
70162: PUSH
70163: LD_VAR 0 2
70167: PPUSH
70168: LD_VAR 0 3
70172: PPUSH
70173: CALL_OW 488
70177: NOT
70178: OR
70179: PUSH
70180: LD_VAR 0 4
70184: NOT
70185: OR
70186: IFFALSE 70190
// exit ;
70188: GO 70530
// list := [ ] ;
70190: LD_ADDR_VAR 0 13
70194: PUSH
70195: EMPTY
70196: ST_TO_ADDR
// if x - r < 0 then
70197: LD_VAR 0 2
70201: PUSH
70202: LD_VAR 0 4
70206: MINUS
70207: PUSH
70208: LD_INT 0
70210: LESS
70211: IFFALSE 70223
// min_x := 0 else
70213: LD_ADDR_VAR 0 7
70217: PUSH
70218: LD_INT 0
70220: ST_TO_ADDR
70221: GO 70239
// min_x := x - r ;
70223: LD_ADDR_VAR 0 7
70227: PUSH
70228: LD_VAR 0 2
70232: PUSH
70233: LD_VAR 0 4
70237: MINUS
70238: ST_TO_ADDR
// if y - r < 0 then
70239: LD_VAR 0 3
70243: PUSH
70244: LD_VAR 0 4
70248: MINUS
70249: PUSH
70250: LD_INT 0
70252: LESS
70253: IFFALSE 70265
// min_y := 0 else
70255: LD_ADDR_VAR 0 8
70259: PUSH
70260: LD_INT 0
70262: ST_TO_ADDR
70263: GO 70281
// min_y := y - r ;
70265: LD_ADDR_VAR 0 8
70269: PUSH
70270: LD_VAR 0 3
70274: PUSH
70275: LD_VAR 0 4
70279: MINUS
70280: ST_TO_ADDR
// max_x := x + r ;
70281: LD_ADDR_VAR 0 9
70285: PUSH
70286: LD_VAR 0 2
70290: PUSH
70291: LD_VAR 0 4
70295: PLUS
70296: ST_TO_ADDR
// max_y := y + r ;
70297: LD_ADDR_VAR 0 10
70301: PUSH
70302: LD_VAR 0 3
70306: PUSH
70307: LD_VAR 0 4
70311: PLUS
70312: ST_TO_ADDR
// for _x = min_x to max_x do
70313: LD_ADDR_VAR 0 11
70317: PUSH
70318: DOUBLE
70319: LD_VAR 0 7
70323: DEC
70324: ST_TO_ADDR
70325: LD_VAR 0 9
70329: PUSH
70330: FOR_TO
70331: IFFALSE 70448
// for _y = min_y to max_y do
70333: LD_ADDR_VAR 0 12
70337: PUSH
70338: DOUBLE
70339: LD_VAR 0 8
70343: DEC
70344: ST_TO_ADDR
70345: LD_VAR 0 10
70349: PUSH
70350: FOR_TO
70351: IFFALSE 70444
// begin if not ValidHex ( _x , _y ) then
70353: LD_VAR 0 11
70357: PPUSH
70358: LD_VAR 0 12
70362: PPUSH
70363: CALL_OW 488
70367: NOT
70368: IFFALSE 70372
// continue ;
70370: GO 70350
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
70372: LD_VAR 0 11
70376: PPUSH
70377: LD_VAR 0 12
70381: PPUSH
70382: CALL_OW 351
70386: PUSH
70387: LD_VAR 0 11
70391: PPUSH
70392: LD_VAR 0 12
70396: PPUSH
70397: CALL_OW 554
70401: AND
70402: IFFALSE 70442
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
70404: LD_ADDR_VAR 0 13
70408: PUSH
70409: LD_VAR 0 13
70413: PPUSH
70414: LD_VAR 0 13
70418: PUSH
70419: LD_INT 1
70421: PLUS
70422: PPUSH
70423: LD_VAR 0 11
70427: PUSH
70428: LD_VAR 0 12
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PPUSH
70437: CALL_OW 2
70441: ST_TO_ADDR
// end ;
70442: GO 70350
70444: POP
70445: POP
70446: GO 70330
70448: POP
70449: POP
// if not list then
70450: LD_VAR 0 13
70454: NOT
70455: IFFALSE 70459
// exit ;
70457: GO 70530
// for i in list do
70459: LD_ADDR_VAR 0 6
70463: PUSH
70464: LD_VAR 0 13
70468: PUSH
70469: FOR_IN
70470: IFFALSE 70528
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
70472: LD_VAR 0 1
70476: PPUSH
70477: LD_STRING M
70479: PUSH
70480: LD_VAR 0 6
70484: PUSH
70485: LD_INT 1
70487: ARRAY
70488: PUSH
70489: LD_VAR 0 6
70493: PUSH
70494: LD_INT 2
70496: ARRAY
70497: PUSH
70498: LD_INT 0
70500: PUSH
70501: LD_INT 0
70503: PUSH
70504: LD_INT 0
70506: PUSH
70507: LD_INT 0
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: PUSH
70519: EMPTY
70520: LIST
70521: PPUSH
70522: CALL_OW 447
70526: GO 70469
70528: POP
70529: POP
// end ;
70530: LD_VAR 0 5
70534: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
70535: LD_INT 0
70537: PPUSH
70538: PPUSH
70539: PPUSH
70540: PPUSH
70541: PPUSH
70542: PPUSH
70543: PPUSH
70544: PPUSH
70545: PPUSH
70546: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
70547: LD_VAR 0 1
70551: PPUSH
70552: CALL_OW 302
70556: NOT
70557: PUSH
70558: LD_VAR 0 2
70562: PPUSH
70563: LD_VAR 0 3
70567: PPUSH
70568: CALL_OW 488
70572: NOT
70573: OR
70574: PUSH
70575: LD_VAR 0 4
70579: NOT
70580: OR
70581: IFFALSE 70585
// exit ;
70583: GO 71098
// list := [ ] ;
70585: LD_ADDR_VAR 0 13
70589: PUSH
70590: EMPTY
70591: ST_TO_ADDR
// if x - r < 0 then
70592: LD_VAR 0 2
70596: PUSH
70597: LD_VAR 0 4
70601: MINUS
70602: PUSH
70603: LD_INT 0
70605: LESS
70606: IFFALSE 70618
// min_x := 0 else
70608: LD_ADDR_VAR 0 7
70612: PUSH
70613: LD_INT 0
70615: ST_TO_ADDR
70616: GO 70634
// min_x := x - r ;
70618: LD_ADDR_VAR 0 7
70622: PUSH
70623: LD_VAR 0 2
70627: PUSH
70628: LD_VAR 0 4
70632: MINUS
70633: ST_TO_ADDR
// if y - r < 0 then
70634: LD_VAR 0 3
70638: PUSH
70639: LD_VAR 0 4
70643: MINUS
70644: PUSH
70645: LD_INT 0
70647: LESS
70648: IFFALSE 70660
// min_y := 0 else
70650: LD_ADDR_VAR 0 8
70654: PUSH
70655: LD_INT 0
70657: ST_TO_ADDR
70658: GO 70676
// min_y := y - r ;
70660: LD_ADDR_VAR 0 8
70664: PUSH
70665: LD_VAR 0 3
70669: PUSH
70670: LD_VAR 0 4
70674: MINUS
70675: ST_TO_ADDR
// max_x := x + r ;
70676: LD_ADDR_VAR 0 9
70680: PUSH
70681: LD_VAR 0 2
70685: PUSH
70686: LD_VAR 0 4
70690: PLUS
70691: ST_TO_ADDR
// max_y := y + r ;
70692: LD_ADDR_VAR 0 10
70696: PUSH
70697: LD_VAR 0 3
70701: PUSH
70702: LD_VAR 0 4
70706: PLUS
70707: ST_TO_ADDR
// for _x = min_x to max_x do
70708: LD_ADDR_VAR 0 11
70712: PUSH
70713: DOUBLE
70714: LD_VAR 0 7
70718: DEC
70719: ST_TO_ADDR
70720: LD_VAR 0 9
70724: PUSH
70725: FOR_TO
70726: IFFALSE 70843
// for _y = min_y to max_y do
70728: LD_ADDR_VAR 0 12
70732: PUSH
70733: DOUBLE
70734: LD_VAR 0 8
70738: DEC
70739: ST_TO_ADDR
70740: LD_VAR 0 10
70744: PUSH
70745: FOR_TO
70746: IFFALSE 70839
// begin if not ValidHex ( _x , _y ) then
70748: LD_VAR 0 11
70752: PPUSH
70753: LD_VAR 0 12
70757: PPUSH
70758: CALL_OW 488
70762: NOT
70763: IFFALSE 70767
// continue ;
70765: GO 70745
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
70767: LD_VAR 0 11
70771: PPUSH
70772: LD_VAR 0 12
70776: PPUSH
70777: CALL_OW 351
70781: PUSH
70782: LD_VAR 0 11
70786: PPUSH
70787: LD_VAR 0 12
70791: PPUSH
70792: CALL_OW 554
70796: AND
70797: IFFALSE 70837
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
70799: LD_ADDR_VAR 0 13
70803: PUSH
70804: LD_VAR 0 13
70808: PPUSH
70809: LD_VAR 0 13
70813: PUSH
70814: LD_INT 1
70816: PLUS
70817: PPUSH
70818: LD_VAR 0 11
70822: PUSH
70823: LD_VAR 0 12
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PPUSH
70832: CALL_OW 2
70836: ST_TO_ADDR
// end ;
70837: GO 70745
70839: POP
70840: POP
70841: GO 70725
70843: POP
70844: POP
// if not list then
70845: LD_VAR 0 13
70849: NOT
70850: IFFALSE 70854
// exit ;
70852: GO 71098
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
70854: LD_ADDR_VAR 0 13
70858: PUSH
70859: LD_VAR 0 1
70863: PPUSH
70864: LD_VAR 0 13
70868: PPUSH
70869: LD_INT 1
70871: PPUSH
70872: LD_INT 1
70874: PPUSH
70875: CALL 8221 0 4
70879: ST_TO_ADDR
// ComStop ( flame ) ;
70880: LD_VAR 0 1
70884: PPUSH
70885: CALL_OW 141
// for i in list do
70889: LD_ADDR_VAR 0 6
70893: PUSH
70894: LD_VAR 0 13
70898: PUSH
70899: FOR_IN
70900: IFFALSE 70931
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
70902: LD_VAR 0 1
70906: PPUSH
70907: LD_VAR 0 6
70911: PUSH
70912: LD_INT 1
70914: ARRAY
70915: PPUSH
70916: LD_VAR 0 6
70920: PUSH
70921: LD_INT 2
70923: ARRAY
70924: PPUSH
70925: CALL_OW 176
70929: GO 70899
70931: POP
70932: POP
// repeat wait ( 0 0$1 ) ;
70933: LD_INT 35
70935: PPUSH
70936: CALL_OW 67
// task := GetTaskList ( flame ) ;
70940: LD_ADDR_VAR 0 14
70944: PUSH
70945: LD_VAR 0 1
70949: PPUSH
70950: CALL_OW 437
70954: ST_TO_ADDR
// if not task then
70955: LD_VAR 0 14
70959: NOT
70960: IFFALSE 70964
// exit ;
70962: GO 71098
// if task [ 1 ] [ 1 ] <> | then
70964: LD_VAR 0 14
70968: PUSH
70969: LD_INT 1
70971: ARRAY
70972: PUSH
70973: LD_INT 1
70975: ARRAY
70976: PUSH
70977: LD_STRING |
70979: NONEQUAL
70980: IFFALSE 70984
// exit ;
70982: GO 71098
// _x := task [ 1 ] [ 2 ] ;
70984: LD_ADDR_VAR 0 11
70988: PUSH
70989: LD_VAR 0 14
70993: PUSH
70994: LD_INT 1
70996: ARRAY
70997: PUSH
70998: LD_INT 2
71000: ARRAY
71001: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
71002: LD_ADDR_VAR 0 12
71006: PUSH
71007: LD_VAR 0 14
71011: PUSH
71012: LD_INT 1
71014: ARRAY
71015: PUSH
71016: LD_INT 3
71018: ARRAY
71019: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
71020: LD_VAR 0 11
71024: PPUSH
71025: LD_VAR 0 12
71029: PPUSH
71030: CALL_OW 351
71034: NOT
71035: PUSH
71036: LD_VAR 0 11
71040: PPUSH
71041: LD_VAR 0 12
71045: PPUSH
71046: CALL_OW 554
71050: NOT
71051: OR
71052: IFFALSE 71086
// begin task := Delete ( task , 1 ) ;
71054: LD_ADDR_VAR 0 14
71058: PUSH
71059: LD_VAR 0 14
71063: PPUSH
71064: LD_INT 1
71066: PPUSH
71067: CALL_OW 3
71071: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
71072: LD_VAR 0 1
71076: PPUSH
71077: LD_VAR 0 14
71081: PPUSH
71082: CALL_OW 446
// end ; until not HasTask ( flame ) ;
71086: LD_VAR 0 1
71090: PPUSH
71091: CALL_OW 314
71095: NOT
71096: IFFALSE 70933
// end ;
71098: LD_VAR 0 5
71102: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
71103: LD_EXP 103
71107: NOT
71108: IFFALSE 71158
71110: GO 71112
71112: DISABLE
// begin initHack := true ;
71113: LD_ADDR_EXP 103
71117: PUSH
71118: LD_INT 1
71120: ST_TO_ADDR
// hackTanks := [ ] ;
71121: LD_ADDR_EXP 104
71125: PUSH
71126: EMPTY
71127: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
71128: LD_ADDR_EXP 105
71132: PUSH
71133: EMPTY
71134: ST_TO_ADDR
// hackLimit := 3 ;
71135: LD_ADDR_EXP 106
71139: PUSH
71140: LD_INT 3
71142: ST_TO_ADDR
// hackDist := 12 ;
71143: LD_ADDR_EXP 107
71147: PUSH
71148: LD_INT 12
71150: ST_TO_ADDR
// hackCounter := [ ] ;
71151: LD_ADDR_EXP 108
71155: PUSH
71156: EMPTY
71157: ST_TO_ADDR
// end ;
71158: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
71159: LD_EXP 103
71163: PUSH
71164: LD_INT 34
71166: PUSH
71167: LD_INT 99
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PPUSH
71174: CALL_OW 69
71178: AND
71179: IFFALSE 71432
71181: GO 71183
71183: DISABLE
71184: LD_INT 0
71186: PPUSH
71187: PPUSH
// begin enable ;
71188: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
71189: LD_ADDR_VAR 0 1
71193: PUSH
71194: LD_INT 34
71196: PUSH
71197: LD_INT 99
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PPUSH
71204: CALL_OW 69
71208: PUSH
71209: FOR_IN
71210: IFFALSE 71430
// begin if not i in hackTanks then
71212: LD_VAR 0 1
71216: PUSH
71217: LD_EXP 104
71221: IN
71222: NOT
71223: IFFALSE 71306
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
71225: LD_ADDR_EXP 104
71229: PUSH
71230: LD_EXP 104
71234: PPUSH
71235: LD_EXP 104
71239: PUSH
71240: LD_INT 1
71242: PLUS
71243: PPUSH
71244: LD_VAR 0 1
71248: PPUSH
71249: CALL_OW 1
71253: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
71254: LD_ADDR_EXP 105
71258: PUSH
71259: LD_EXP 105
71263: PPUSH
71264: LD_EXP 105
71268: PUSH
71269: LD_INT 1
71271: PLUS
71272: PPUSH
71273: EMPTY
71274: PPUSH
71275: CALL_OW 1
71279: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
71280: LD_ADDR_EXP 108
71284: PUSH
71285: LD_EXP 108
71289: PPUSH
71290: LD_EXP 108
71294: PUSH
71295: LD_INT 1
71297: PLUS
71298: PPUSH
71299: EMPTY
71300: PPUSH
71301: CALL_OW 1
71305: ST_TO_ADDR
// end ; if not IsOk ( i ) then
71306: LD_VAR 0 1
71310: PPUSH
71311: CALL_OW 302
71315: NOT
71316: IFFALSE 71329
// begin HackUnlinkAll ( i ) ;
71318: LD_VAR 0 1
71322: PPUSH
71323: CALL 71435 0 1
// continue ;
71327: GO 71209
// end ; HackCheckCapturedStatus ( i ) ;
71329: LD_VAR 0 1
71333: PPUSH
71334: CALL 71878 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
71338: LD_ADDR_VAR 0 2
71342: PUSH
71343: LD_INT 81
71345: PUSH
71346: LD_VAR 0 1
71350: PPUSH
71351: CALL_OW 255
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 33
71362: PUSH
71363: LD_INT 3
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: LD_INT 91
71372: PUSH
71373: LD_VAR 0 1
71377: PUSH
71378: LD_EXP 107
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 50
71390: PUSH
71391: EMPTY
71392: LIST
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: PPUSH
71400: CALL_OW 69
71404: ST_TO_ADDR
// if not tmp then
71405: LD_VAR 0 2
71409: NOT
71410: IFFALSE 71414
// continue ;
71412: GO 71209
// HackLink ( i , tmp ) ;
71414: LD_VAR 0 1
71418: PPUSH
71419: LD_VAR 0 2
71423: PPUSH
71424: CALL 71571 0 2
// end ;
71428: GO 71209
71430: POP
71431: POP
// end ;
71432: PPOPN 2
71434: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
71435: LD_INT 0
71437: PPUSH
71438: PPUSH
71439: PPUSH
// if not hack in hackTanks then
71440: LD_VAR 0 1
71444: PUSH
71445: LD_EXP 104
71449: IN
71450: NOT
71451: IFFALSE 71455
// exit ;
71453: GO 71566
// index := GetElementIndex ( hackTanks , hack ) ;
71455: LD_ADDR_VAR 0 4
71459: PUSH
71460: LD_EXP 104
71464: PPUSH
71465: LD_VAR 0 1
71469: PPUSH
71470: CALL 7518 0 2
71474: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
71475: LD_EXP 105
71479: PUSH
71480: LD_VAR 0 4
71484: ARRAY
71485: IFFALSE 71566
// begin for i in hackTanksCaptured [ index ] do
71487: LD_ADDR_VAR 0 3
71491: PUSH
71492: LD_EXP 105
71496: PUSH
71497: LD_VAR 0 4
71501: ARRAY
71502: PUSH
71503: FOR_IN
71504: IFFALSE 71530
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
71506: LD_VAR 0 3
71510: PUSH
71511: LD_INT 1
71513: ARRAY
71514: PPUSH
71515: LD_VAR 0 3
71519: PUSH
71520: LD_INT 2
71522: ARRAY
71523: PPUSH
71524: CALL_OW 235
71528: GO 71503
71530: POP
71531: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
71532: LD_ADDR_EXP 105
71536: PUSH
71537: LD_EXP 105
71541: PPUSH
71542: LD_VAR 0 4
71546: PPUSH
71547: EMPTY
71548: PPUSH
71549: CALL_OW 1
71553: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
71554: LD_VAR 0 1
71558: PPUSH
71559: LD_INT 0
71561: PPUSH
71562: CALL_OW 505
// end ; end ;
71566: LD_VAR 0 2
71570: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
71571: LD_INT 0
71573: PPUSH
71574: PPUSH
71575: PPUSH
// if not hack in hackTanks or not vehicles then
71576: LD_VAR 0 1
71580: PUSH
71581: LD_EXP 104
71585: IN
71586: NOT
71587: PUSH
71588: LD_VAR 0 2
71592: NOT
71593: OR
71594: IFFALSE 71598
// exit ;
71596: GO 71873
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
71598: LD_ADDR_VAR 0 2
71602: PUSH
71603: LD_VAR 0 1
71607: PPUSH
71608: LD_VAR 0 2
71612: PPUSH
71613: LD_INT 1
71615: PPUSH
71616: LD_INT 1
71618: PPUSH
71619: CALL 8168 0 4
71623: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
71624: LD_ADDR_VAR 0 5
71628: PUSH
71629: LD_EXP 104
71633: PPUSH
71634: LD_VAR 0 1
71638: PPUSH
71639: CALL 7518 0 2
71643: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
71644: LD_EXP 105
71648: PUSH
71649: LD_VAR 0 5
71653: ARRAY
71654: PUSH
71655: LD_EXP 106
71659: LESS
71660: IFFALSE 71849
// begin for i := 1 to vehicles do
71662: LD_ADDR_VAR 0 4
71666: PUSH
71667: DOUBLE
71668: LD_INT 1
71670: DEC
71671: ST_TO_ADDR
71672: LD_VAR 0 2
71676: PUSH
71677: FOR_TO
71678: IFFALSE 71847
// begin if hackTanksCaptured [ index ] = hackLimit then
71680: LD_EXP 105
71684: PUSH
71685: LD_VAR 0 5
71689: ARRAY
71690: PUSH
71691: LD_EXP 106
71695: EQUAL
71696: IFFALSE 71700
// break ;
71698: GO 71847
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
71700: LD_ADDR_EXP 108
71704: PUSH
71705: LD_EXP 108
71709: PPUSH
71710: LD_VAR 0 5
71714: PPUSH
71715: LD_EXP 108
71719: PUSH
71720: LD_VAR 0 5
71724: ARRAY
71725: PUSH
71726: LD_INT 1
71728: PLUS
71729: PPUSH
71730: CALL_OW 1
71734: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
71735: LD_ADDR_EXP 105
71739: PUSH
71740: LD_EXP 105
71744: PPUSH
71745: LD_VAR 0 5
71749: PUSH
71750: LD_EXP 105
71754: PUSH
71755: LD_VAR 0 5
71759: ARRAY
71760: PUSH
71761: LD_INT 1
71763: PLUS
71764: PUSH
71765: EMPTY
71766: LIST
71767: LIST
71768: PPUSH
71769: LD_VAR 0 2
71773: PUSH
71774: LD_VAR 0 4
71778: ARRAY
71779: PUSH
71780: LD_VAR 0 2
71784: PUSH
71785: LD_VAR 0 4
71789: ARRAY
71790: PPUSH
71791: CALL_OW 255
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PPUSH
71800: CALL 7733 0 3
71804: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
71805: LD_VAR 0 2
71809: PUSH
71810: LD_VAR 0 4
71814: ARRAY
71815: PPUSH
71816: LD_VAR 0 1
71820: PPUSH
71821: CALL_OW 255
71825: PPUSH
71826: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
71830: LD_VAR 0 2
71834: PUSH
71835: LD_VAR 0 4
71839: ARRAY
71840: PPUSH
71841: CALL_OW 141
// end ;
71845: GO 71677
71847: POP
71848: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
71849: LD_VAR 0 1
71853: PPUSH
71854: LD_EXP 105
71858: PUSH
71859: LD_VAR 0 5
71863: ARRAY
71864: PUSH
71865: LD_INT 0
71867: PLUS
71868: PPUSH
71869: CALL_OW 505
// end ;
71873: LD_VAR 0 3
71877: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
71878: LD_INT 0
71880: PPUSH
71881: PPUSH
71882: PPUSH
71883: PPUSH
// if not hack in hackTanks then
71884: LD_VAR 0 1
71888: PUSH
71889: LD_EXP 104
71893: IN
71894: NOT
71895: IFFALSE 71899
// exit ;
71897: GO 72139
// index := GetElementIndex ( hackTanks , hack ) ;
71899: LD_ADDR_VAR 0 4
71903: PUSH
71904: LD_EXP 104
71908: PPUSH
71909: LD_VAR 0 1
71913: PPUSH
71914: CALL 7518 0 2
71918: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
71919: LD_ADDR_VAR 0 3
71923: PUSH
71924: DOUBLE
71925: LD_EXP 105
71929: PUSH
71930: LD_VAR 0 4
71934: ARRAY
71935: INC
71936: ST_TO_ADDR
71937: LD_INT 1
71939: PUSH
71940: FOR_DOWNTO
71941: IFFALSE 72113
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
71943: LD_ADDR_VAR 0 5
71947: PUSH
71948: LD_EXP 105
71952: PUSH
71953: LD_VAR 0 4
71957: ARRAY
71958: PUSH
71959: LD_VAR 0 3
71963: ARRAY
71964: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
71965: LD_VAR 0 5
71969: PUSH
71970: LD_INT 1
71972: ARRAY
71973: PPUSH
71974: CALL_OW 302
71978: NOT
71979: PUSH
71980: LD_VAR 0 5
71984: PUSH
71985: LD_INT 1
71987: ARRAY
71988: PPUSH
71989: CALL_OW 255
71993: PUSH
71994: LD_VAR 0 1
71998: PPUSH
71999: CALL_OW 255
72003: NONEQUAL
72004: OR
72005: IFFALSE 72111
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
72007: LD_VAR 0 5
72011: PUSH
72012: LD_INT 1
72014: ARRAY
72015: PPUSH
72016: CALL_OW 305
72020: PUSH
72021: LD_VAR 0 5
72025: PUSH
72026: LD_INT 1
72028: ARRAY
72029: PPUSH
72030: CALL_OW 255
72034: PUSH
72035: LD_VAR 0 1
72039: PPUSH
72040: CALL_OW 255
72044: EQUAL
72045: AND
72046: IFFALSE 72070
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
72048: LD_VAR 0 5
72052: PUSH
72053: LD_INT 1
72055: ARRAY
72056: PPUSH
72057: LD_VAR 0 5
72061: PUSH
72062: LD_INT 2
72064: ARRAY
72065: PPUSH
72066: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
72070: LD_ADDR_EXP 105
72074: PUSH
72075: LD_EXP 105
72079: PPUSH
72080: LD_VAR 0 4
72084: PPUSH
72085: LD_EXP 105
72089: PUSH
72090: LD_VAR 0 4
72094: ARRAY
72095: PPUSH
72096: LD_VAR 0 3
72100: PPUSH
72101: CALL_OW 3
72105: PPUSH
72106: CALL_OW 1
72110: ST_TO_ADDR
// end ; end ;
72111: GO 71940
72113: POP
72114: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
72115: LD_VAR 0 1
72119: PPUSH
72120: LD_EXP 105
72124: PUSH
72125: LD_VAR 0 4
72129: ARRAY
72130: PUSH
72131: LD_INT 0
72133: PLUS
72134: PPUSH
72135: CALL_OW 505
// end ;
72139: LD_VAR 0 2
72143: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
72144: LD_INT 0
72146: PPUSH
72147: PPUSH
72148: PPUSH
72149: PPUSH
// if not hack in hackTanks then
72150: LD_VAR 0 1
72154: PUSH
72155: LD_EXP 104
72159: IN
72160: NOT
72161: IFFALSE 72165
// exit ;
72163: GO 72250
// index := GetElementIndex ( hackTanks , hack ) ;
72165: LD_ADDR_VAR 0 5
72169: PUSH
72170: LD_EXP 104
72174: PPUSH
72175: LD_VAR 0 1
72179: PPUSH
72180: CALL 7518 0 2
72184: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
72185: LD_ADDR_VAR 0 4
72189: PUSH
72190: DOUBLE
72191: LD_INT 1
72193: DEC
72194: ST_TO_ADDR
72195: LD_EXP 105
72199: PUSH
72200: LD_VAR 0 5
72204: ARRAY
72205: PUSH
72206: FOR_TO
72207: IFFALSE 72248
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
72209: LD_EXP 105
72213: PUSH
72214: LD_VAR 0 5
72218: ARRAY
72219: PUSH
72220: LD_VAR 0 4
72224: ARRAY
72225: PUSH
72226: LD_INT 1
72228: ARRAY
72229: PUSH
72230: LD_VAR 0 2
72234: EQUAL
72235: IFFALSE 72246
// KillUnit ( vehicle ) ;
72237: LD_VAR 0 2
72241: PPUSH
72242: CALL_OW 66
72246: GO 72206
72248: POP
72249: POP
// end ;
72250: LD_VAR 0 3
72254: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
72255: LD_EXP 109
72259: NOT
72260: IFFALSE 72295
72262: GO 72264
72264: DISABLE
// begin initMiner := true ;
72265: LD_ADDR_EXP 109
72269: PUSH
72270: LD_INT 1
72272: ST_TO_ADDR
// minersList := [ ] ;
72273: LD_ADDR_EXP 110
72277: PUSH
72278: EMPTY
72279: ST_TO_ADDR
// minerMinesList := [ ] ;
72280: LD_ADDR_EXP 111
72284: PUSH
72285: EMPTY
72286: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
72287: LD_ADDR_EXP 112
72291: PUSH
72292: LD_INT 5
72294: ST_TO_ADDR
// end ;
72295: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
72296: LD_EXP 109
72300: PUSH
72301: LD_INT 34
72303: PUSH
72304: LD_INT 81
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: PPUSH
72311: CALL_OW 69
72315: AND
72316: IFFALSE 72777
72318: GO 72320
72320: DISABLE
72321: LD_INT 0
72323: PPUSH
72324: PPUSH
72325: PPUSH
72326: PPUSH
// begin enable ;
72327: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
72328: LD_ADDR_VAR 0 1
72332: PUSH
72333: LD_INT 34
72335: PUSH
72336: LD_INT 81
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PPUSH
72343: CALL_OW 69
72347: PUSH
72348: FOR_IN
72349: IFFALSE 72421
// begin if not i in minersList then
72351: LD_VAR 0 1
72355: PUSH
72356: LD_EXP 110
72360: IN
72361: NOT
72362: IFFALSE 72419
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
72364: LD_ADDR_EXP 110
72368: PUSH
72369: LD_EXP 110
72373: PPUSH
72374: LD_EXP 110
72378: PUSH
72379: LD_INT 1
72381: PLUS
72382: PPUSH
72383: LD_VAR 0 1
72387: PPUSH
72388: CALL_OW 1
72392: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
72393: LD_ADDR_EXP 111
72397: PUSH
72398: LD_EXP 111
72402: PPUSH
72403: LD_EXP 111
72407: PUSH
72408: LD_INT 1
72410: PLUS
72411: PPUSH
72412: EMPTY
72413: PPUSH
72414: CALL_OW 1
72418: ST_TO_ADDR
// end end ;
72419: GO 72348
72421: POP
72422: POP
// for i := minerMinesList downto 1 do
72423: LD_ADDR_VAR 0 1
72427: PUSH
72428: DOUBLE
72429: LD_EXP 111
72433: INC
72434: ST_TO_ADDR
72435: LD_INT 1
72437: PUSH
72438: FOR_DOWNTO
72439: IFFALSE 72775
// begin if IsLive ( minersList [ i ] ) then
72441: LD_EXP 110
72445: PUSH
72446: LD_VAR 0 1
72450: ARRAY
72451: PPUSH
72452: CALL_OW 300
72456: IFFALSE 72484
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
72458: LD_EXP 110
72462: PUSH
72463: LD_VAR 0 1
72467: ARRAY
72468: PPUSH
72469: LD_EXP 111
72473: PUSH
72474: LD_VAR 0 1
72478: ARRAY
72479: PPUSH
72480: CALL_OW 505
// if not minerMinesList [ i ] then
72484: LD_EXP 111
72488: PUSH
72489: LD_VAR 0 1
72493: ARRAY
72494: NOT
72495: IFFALSE 72499
// continue ;
72497: GO 72438
// for j := minerMinesList [ i ] downto 1 do
72499: LD_ADDR_VAR 0 2
72503: PUSH
72504: DOUBLE
72505: LD_EXP 111
72509: PUSH
72510: LD_VAR 0 1
72514: ARRAY
72515: INC
72516: ST_TO_ADDR
72517: LD_INT 1
72519: PUSH
72520: FOR_DOWNTO
72521: IFFALSE 72771
// begin side := GetSide ( minersList [ i ] ) ;
72523: LD_ADDR_VAR 0 3
72527: PUSH
72528: LD_EXP 110
72532: PUSH
72533: LD_VAR 0 1
72537: ARRAY
72538: PPUSH
72539: CALL_OW 255
72543: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
72544: LD_ADDR_VAR 0 4
72548: PUSH
72549: LD_EXP 111
72553: PUSH
72554: LD_VAR 0 1
72558: ARRAY
72559: PUSH
72560: LD_VAR 0 2
72564: ARRAY
72565: PUSH
72566: LD_INT 1
72568: ARRAY
72569: PPUSH
72570: LD_EXP 111
72574: PUSH
72575: LD_VAR 0 1
72579: ARRAY
72580: PUSH
72581: LD_VAR 0 2
72585: ARRAY
72586: PUSH
72587: LD_INT 2
72589: ARRAY
72590: PPUSH
72591: CALL_OW 428
72595: ST_TO_ADDR
// if not tmp then
72596: LD_VAR 0 4
72600: NOT
72601: IFFALSE 72605
// continue ;
72603: GO 72520
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
72605: LD_VAR 0 4
72609: PUSH
72610: LD_INT 81
72612: PUSH
72613: LD_VAR 0 3
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PPUSH
72622: CALL_OW 69
72626: IN
72627: PUSH
72628: LD_EXP 111
72632: PUSH
72633: LD_VAR 0 1
72637: ARRAY
72638: PUSH
72639: LD_VAR 0 2
72643: ARRAY
72644: PUSH
72645: LD_INT 1
72647: ARRAY
72648: PPUSH
72649: LD_EXP 111
72653: PUSH
72654: LD_VAR 0 1
72658: ARRAY
72659: PUSH
72660: LD_VAR 0 2
72664: ARRAY
72665: PUSH
72666: LD_INT 2
72668: ARRAY
72669: PPUSH
72670: CALL_OW 458
72674: AND
72675: IFFALSE 72769
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
72677: LD_EXP 111
72681: PUSH
72682: LD_VAR 0 1
72686: ARRAY
72687: PUSH
72688: LD_VAR 0 2
72692: ARRAY
72693: PUSH
72694: LD_INT 1
72696: ARRAY
72697: PPUSH
72698: LD_EXP 111
72702: PUSH
72703: LD_VAR 0 1
72707: ARRAY
72708: PUSH
72709: LD_VAR 0 2
72713: ARRAY
72714: PUSH
72715: LD_INT 2
72717: ARRAY
72718: PPUSH
72719: LD_VAR 0 3
72723: PPUSH
72724: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
72728: LD_ADDR_EXP 111
72732: PUSH
72733: LD_EXP 111
72737: PPUSH
72738: LD_VAR 0 1
72742: PPUSH
72743: LD_EXP 111
72747: PUSH
72748: LD_VAR 0 1
72752: ARRAY
72753: PPUSH
72754: LD_VAR 0 2
72758: PPUSH
72759: CALL_OW 3
72763: PPUSH
72764: CALL_OW 1
72768: ST_TO_ADDR
// end ; end ;
72769: GO 72520
72771: POP
72772: POP
// end ;
72773: GO 72438
72775: POP
72776: POP
// end ;
72777: PPOPN 4
72779: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
72780: LD_INT 0
72782: PPUSH
72783: PPUSH
// result := false ;
72784: LD_ADDR_VAR 0 4
72788: PUSH
72789: LD_INT 0
72791: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
72792: LD_VAR 0 1
72796: PPUSH
72797: CALL_OW 264
72801: PUSH
72802: LD_INT 81
72804: EQUAL
72805: NOT
72806: IFFALSE 72810
// exit ;
72808: GO 73050
// index := GetElementIndex ( minersList , unit ) ;
72810: LD_ADDR_VAR 0 5
72814: PUSH
72815: LD_EXP 110
72819: PPUSH
72820: LD_VAR 0 1
72824: PPUSH
72825: CALL 7518 0 2
72829: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
72830: LD_EXP 111
72834: PUSH
72835: LD_VAR 0 5
72839: ARRAY
72840: PUSH
72841: LD_EXP 112
72845: GREATEREQUAL
72846: IFFALSE 72850
// exit ;
72848: GO 73050
// ComMoveXY ( unit , x , y ) ;
72850: LD_VAR 0 1
72854: PPUSH
72855: LD_VAR 0 2
72859: PPUSH
72860: LD_VAR 0 3
72864: PPUSH
72865: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
72869: LD_INT 35
72871: PPUSH
72872: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
72876: LD_VAR 0 1
72880: PPUSH
72881: LD_VAR 0 2
72885: PPUSH
72886: LD_VAR 0 3
72890: PPUSH
72891: CALL 39259 0 3
72895: NOT
72896: PUSH
72897: LD_VAR 0 1
72901: PPUSH
72902: CALL_OW 314
72906: AND
72907: IFFALSE 72911
// exit ;
72909: GO 73050
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
72911: LD_VAR 0 2
72915: PPUSH
72916: LD_VAR 0 3
72920: PPUSH
72921: CALL_OW 428
72925: PUSH
72926: LD_VAR 0 1
72930: EQUAL
72931: PUSH
72932: LD_VAR 0 1
72936: PPUSH
72937: CALL_OW 314
72941: NOT
72942: AND
72943: IFFALSE 72869
// PlaySoundXY ( x , y , PlantMine ) ;
72945: LD_VAR 0 2
72949: PPUSH
72950: LD_VAR 0 3
72954: PPUSH
72955: LD_STRING PlantMine
72957: PPUSH
72958: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
72962: LD_VAR 0 2
72966: PPUSH
72967: LD_VAR 0 3
72971: PPUSH
72972: LD_VAR 0 1
72976: PPUSH
72977: CALL_OW 255
72981: PPUSH
72982: LD_INT 0
72984: PPUSH
72985: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
72989: LD_ADDR_EXP 111
72993: PUSH
72994: LD_EXP 111
72998: PPUSH
72999: LD_VAR 0 5
73003: PUSH
73004: LD_EXP 111
73008: PUSH
73009: LD_VAR 0 5
73013: ARRAY
73014: PUSH
73015: LD_INT 1
73017: PLUS
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: PPUSH
73023: LD_VAR 0 2
73027: PUSH
73028: LD_VAR 0 3
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: PPUSH
73037: CALL 7733 0 3
73041: ST_TO_ADDR
// result := true ;
73042: LD_ADDR_VAR 0 4
73046: PUSH
73047: LD_INT 1
73049: ST_TO_ADDR
// end ;
73050: LD_VAR 0 4
73054: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
73055: LD_INT 0
73057: PPUSH
73058: PPUSH
73059: PPUSH
// if not unit in minersList then
73060: LD_VAR 0 1
73064: PUSH
73065: LD_EXP 110
73069: IN
73070: NOT
73071: IFFALSE 73075
// exit ;
73073: GO 73467
// index := GetElementIndex ( minersList , unit ) ;
73075: LD_ADDR_VAR 0 6
73079: PUSH
73080: LD_EXP 110
73084: PPUSH
73085: LD_VAR 0 1
73089: PPUSH
73090: CALL 7518 0 2
73094: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
73095: LD_ADDR_VAR 0 5
73099: PUSH
73100: DOUBLE
73101: LD_EXP 111
73105: PUSH
73106: LD_VAR 0 6
73110: ARRAY
73111: INC
73112: ST_TO_ADDR
73113: LD_INT 1
73115: PUSH
73116: FOR_DOWNTO
73117: IFFALSE 73278
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
73119: LD_EXP 111
73123: PUSH
73124: LD_VAR 0 6
73128: ARRAY
73129: PUSH
73130: LD_VAR 0 5
73134: ARRAY
73135: PUSH
73136: LD_INT 1
73138: ARRAY
73139: PUSH
73140: LD_VAR 0 2
73144: EQUAL
73145: PUSH
73146: LD_EXP 111
73150: PUSH
73151: LD_VAR 0 6
73155: ARRAY
73156: PUSH
73157: LD_VAR 0 5
73161: ARRAY
73162: PUSH
73163: LD_INT 2
73165: ARRAY
73166: PUSH
73167: LD_VAR 0 3
73171: EQUAL
73172: AND
73173: IFFALSE 73276
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73175: LD_EXP 111
73179: PUSH
73180: LD_VAR 0 6
73184: ARRAY
73185: PUSH
73186: LD_VAR 0 5
73190: ARRAY
73191: PUSH
73192: LD_INT 1
73194: ARRAY
73195: PPUSH
73196: LD_EXP 111
73200: PUSH
73201: LD_VAR 0 6
73205: ARRAY
73206: PUSH
73207: LD_VAR 0 5
73211: ARRAY
73212: PUSH
73213: LD_INT 2
73215: ARRAY
73216: PPUSH
73217: LD_VAR 0 1
73221: PPUSH
73222: CALL_OW 255
73226: PPUSH
73227: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73231: LD_ADDR_EXP 111
73235: PUSH
73236: LD_EXP 111
73240: PPUSH
73241: LD_VAR 0 6
73245: PPUSH
73246: LD_EXP 111
73250: PUSH
73251: LD_VAR 0 6
73255: ARRAY
73256: PPUSH
73257: LD_VAR 0 5
73261: PPUSH
73262: CALL_OW 3
73266: PPUSH
73267: CALL_OW 1
73271: ST_TO_ADDR
// exit ;
73272: POP
73273: POP
73274: GO 73467
// end ; end ;
73276: GO 73116
73278: POP
73279: POP
// for i := minerMinesList [ index ] downto 1 do
73280: LD_ADDR_VAR 0 5
73284: PUSH
73285: DOUBLE
73286: LD_EXP 111
73290: PUSH
73291: LD_VAR 0 6
73295: ARRAY
73296: INC
73297: ST_TO_ADDR
73298: LD_INT 1
73300: PUSH
73301: FOR_DOWNTO
73302: IFFALSE 73465
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
73304: LD_EXP 111
73308: PUSH
73309: LD_VAR 0 6
73313: ARRAY
73314: PUSH
73315: LD_VAR 0 5
73319: ARRAY
73320: PUSH
73321: LD_INT 1
73323: ARRAY
73324: PPUSH
73325: LD_EXP 111
73329: PUSH
73330: LD_VAR 0 6
73334: ARRAY
73335: PUSH
73336: LD_VAR 0 5
73340: ARRAY
73341: PUSH
73342: LD_INT 2
73344: ARRAY
73345: PPUSH
73346: LD_VAR 0 2
73350: PPUSH
73351: LD_VAR 0 3
73355: PPUSH
73356: CALL_OW 298
73360: PUSH
73361: LD_INT 6
73363: LESS
73364: IFFALSE 73463
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73366: LD_EXP 111
73370: PUSH
73371: LD_VAR 0 6
73375: ARRAY
73376: PUSH
73377: LD_VAR 0 5
73381: ARRAY
73382: PUSH
73383: LD_INT 1
73385: ARRAY
73386: PPUSH
73387: LD_EXP 111
73391: PUSH
73392: LD_VAR 0 6
73396: ARRAY
73397: PUSH
73398: LD_VAR 0 5
73402: ARRAY
73403: PUSH
73404: LD_INT 2
73406: ARRAY
73407: PPUSH
73408: LD_VAR 0 1
73412: PPUSH
73413: CALL_OW 255
73417: PPUSH
73418: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73422: LD_ADDR_EXP 111
73426: PUSH
73427: LD_EXP 111
73431: PPUSH
73432: LD_VAR 0 6
73436: PPUSH
73437: LD_EXP 111
73441: PUSH
73442: LD_VAR 0 6
73446: ARRAY
73447: PPUSH
73448: LD_VAR 0 5
73452: PPUSH
73453: CALL_OW 3
73457: PPUSH
73458: CALL_OW 1
73462: ST_TO_ADDR
// end ; end ;
73463: GO 73301
73465: POP
73466: POP
// end ;
73467: LD_VAR 0 4
73471: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
73472: LD_INT 0
73474: PPUSH
73475: PPUSH
73476: PPUSH
73477: PPUSH
73478: PPUSH
73479: PPUSH
73480: PPUSH
73481: PPUSH
73482: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
73483: LD_VAR 0 1
73487: PPUSH
73488: CALL_OW 264
73492: PUSH
73493: LD_INT 81
73495: EQUAL
73496: NOT
73497: PUSH
73498: LD_VAR 0 1
73502: PUSH
73503: LD_EXP 110
73507: IN
73508: NOT
73509: OR
73510: IFFALSE 73514
// exit ;
73512: GO 73836
// index := GetElementIndex ( minersList , unit ) ;
73514: LD_ADDR_VAR 0 6
73518: PUSH
73519: LD_EXP 110
73523: PPUSH
73524: LD_VAR 0 1
73528: PPUSH
73529: CALL 7518 0 2
73533: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
73534: LD_ADDR_VAR 0 8
73538: PUSH
73539: LD_EXP 112
73543: PUSH
73544: LD_EXP 111
73548: PUSH
73549: LD_VAR 0 6
73553: ARRAY
73554: MINUS
73555: ST_TO_ADDR
// if not minesFreeAmount then
73556: LD_VAR 0 8
73560: NOT
73561: IFFALSE 73565
// exit ;
73563: GO 73836
// tmp := [ ] ;
73565: LD_ADDR_VAR 0 7
73569: PUSH
73570: EMPTY
73571: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
73572: LD_ADDR_VAR 0 5
73576: PUSH
73577: DOUBLE
73578: LD_INT 1
73580: DEC
73581: ST_TO_ADDR
73582: LD_VAR 0 8
73586: PUSH
73587: FOR_TO
73588: IFFALSE 73783
// begin _d := rand ( 0 , 5 ) ;
73590: LD_ADDR_VAR 0 11
73594: PUSH
73595: LD_INT 0
73597: PPUSH
73598: LD_INT 5
73600: PPUSH
73601: CALL_OW 12
73605: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
73606: LD_ADDR_VAR 0 12
73610: PUSH
73611: LD_INT 2
73613: PPUSH
73614: LD_INT 6
73616: PPUSH
73617: CALL_OW 12
73621: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
73622: LD_ADDR_VAR 0 9
73626: PUSH
73627: LD_VAR 0 2
73631: PPUSH
73632: LD_VAR 0 11
73636: PPUSH
73637: LD_VAR 0 12
73641: PPUSH
73642: CALL_OW 272
73646: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
73647: LD_ADDR_VAR 0 10
73651: PUSH
73652: LD_VAR 0 3
73656: PPUSH
73657: LD_VAR 0 11
73661: PPUSH
73662: LD_VAR 0 12
73666: PPUSH
73667: CALL_OW 273
73671: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
73672: LD_VAR 0 9
73676: PPUSH
73677: LD_VAR 0 10
73681: PPUSH
73682: CALL_OW 488
73686: PUSH
73687: LD_VAR 0 9
73691: PUSH
73692: LD_VAR 0 10
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: PUSH
73701: LD_VAR 0 7
73705: IN
73706: NOT
73707: AND
73708: PUSH
73709: LD_VAR 0 9
73713: PPUSH
73714: LD_VAR 0 10
73718: PPUSH
73719: CALL_OW 458
73723: NOT
73724: AND
73725: IFFALSE 73767
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
73727: LD_ADDR_VAR 0 7
73731: PUSH
73732: LD_VAR 0 7
73736: PPUSH
73737: LD_VAR 0 7
73741: PUSH
73742: LD_INT 1
73744: PLUS
73745: PPUSH
73746: LD_VAR 0 9
73750: PUSH
73751: LD_VAR 0 10
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: PPUSH
73760: CALL_OW 1
73764: ST_TO_ADDR
73765: GO 73781
// i := i - 1 ;
73767: LD_ADDR_VAR 0 5
73771: PUSH
73772: LD_VAR 0 5
73776: PUSH
73777: LD_INT 1
73779: MINUS
73780: ST_TO_ADDR
// end ;
73781: GO 73587
73783: POP
73784: POP
// for i in tmp do
73785: LD_ADDR_VAR 0 5
73789: PUSH
73790: LD_VAR 0 7
73794: PUSH
73795: FOR_IN
73796: IFFALSE 73834
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
73798: LD_VAR 0 1
73802: PPUSH
73803: LD_VAR 0 5
73807: PUSH
73808: LD_INT 1
73810: ARRAY
73811: PPUSH
73812: LD_VAR 0 5
73816: PUSH
73817: LD_INT 2
73819: ARRAY
73820: PPUSH
73821: CALL 72780 0 3
73825: NOT
73826: IFFALSE 73832
// exit ;
73828: POP
73829: POP
73830: GO 73836
73832: GO 73795
73834: POP
73835: POP
// end ;
73836: LD_VAR 0 4
73840: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
73841: LD_INT 0
73843: PPUSH
73844: PPUSH
73845: PPUSH
73846: PPUSH
73847: PPUSH
73848: PPUSH
73849: PPUSH
73850: PPUSH
73851: PPUSH
// if GetClass ( unit ) <> class_sniper then
73852: LD_VAR 0 1
73856: PPUSH
73857: CALL_OW 257
73861: PUSH
73862: LD_INT 5
73864: NONEQUAL
73865: IFFALSE 73869
// exit ;
73867: GO 74335
// dist := 8 ;
73869: LD_ADDR_VAR 0 5
73873: PUSH
73874: LD_INT 8
73876: ST_TO_ADDR
// viewRange := 12 ;
73877: LD_ADDR_VAR 0 8
73881: PUSH
73882: LD_INT 12
73884: ST_TO_ADDR
// side := GetSide ( unit ) ;
73885: LD_ADDR_VAR 0 6
73889: PUSH
73890: LD_VAR 0 1
73894: PPUSH
73895: CALL_OW 255
73899: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
73900: LD_INT 61
73902: PPUSH
73903: LD_VAR 0 6
73907: PPUSH
73908: CALL_OW 321
73912: PUSH
73913: LD_INT 2
73915: EQUAL
73916: IFFALSE 73926
// viewRange := 16 ;
73918: LD_ADDR_VAR 0 8
73922: PUSH
73923: LD_INT 16
73925: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
73926: LD_VAR 0 1
73930: PPUSH
73931: LD_VAR 0 2
73935: PPUSH
73936: LD_VAR 0 3
73940: PPUSH
73941: CALL_OW 297
73945: PUSH
73946: LD_VAR 0 5
73950: GREATER
73951: IFFALSE 74030
// begin ComMoveXY ( unit , x , y ) ;
73953: LD_VAR 0 1
73957: PPUSH
73958: LD_VAR 0 2
73962: PPUSH
73963: LD_VAR 0 3
73967: PPUSH
73968: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
73972: LD_INT 35
73974: PPUSH
73975: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
73979: LD_VAR 0 1
73983: PPUSH
73984: LD_VAR 0 2
73988: PPUSH
73989: LD_VAR 0 3
73993: PPUSH
73994: CALL 39259 0 3
73998: NOT
73999: IFFALSE 74003
// exit ;
74001: GO 74335
// until GetDistUnitXY ( unit , x , y ) < dist ;
74003: LD_VAR 0 1
74007: PPUSH
74008: LD_VAR 0 2
74012: PPUSH
74013: LD_VAR 0 3
74017: PPUSH
74018: CALL_OW 297
74022: PUSH
74023: LD_VAR 0 5
74027: LESS
74028: IFFALSE 73972
// end ; ComTurnXY ( unit , x , y ) ;
74030: LD_VAR 0 1
74034: PPUSH
74035: LD_VAR 0 2
74039: PPUSH
74040: LD_VAR 0 3
74044: PPUSH
74045: CALL_OW 118
// repeat if Multiplayer then
74049: LD_OWVAR 4
74053: IFFALSE 74064
// wait ( 35 ) else
74055: LD_INT 35
74057: PPUSH
74058: CALL_OW 67
74062: GO 74071
// wait ( 5 ) ;
74064: LD_INT 5
74066: PPUSH
74067: CALL_OW 67
// _d := GetDir ( unit ) ;
74071: LD_ADDR_VAR 0 11
74075: PUSH
74076: LD_VAR 0 1
74080: PPUSH
74081: CALL_OW 254
74085: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
74086: LD_ADDR_VAR 0 7
74090: PUSH
74091: LD_VAR 0 1
74095: PPUSH
74096: CALL_OW 250
74100: PPUSH
74101: LD_VAR 0 1
74105: PPUSH
74106: CALL_OW 251
74110: PPUSH
74111: LD_VAR 0 2
74115: PPUSH
74116: LD_VAR 0 3
74120: PPUSH
74121: CALL 41867 0 4
74125: ST_TO_ADDR
// until dir = _d ;
74126: LD_VAR 0 7
74130: PUSH
74131: LD_VAR 0 11
74135: EQUAL
74136: IFFALSE 74049
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
74138: LD_ADDR_VAR 0 9
74142: PUSH
74143: LD_VAR 0 1
74147: PPUSH
74148: CALL_OW 250
74152: PPUSH
74153: LD_VAR 0 7
74157: PPUSH
74158: LD_VAR 0 5
74162: PPUSH
74163: CALL_OW 272
74167: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
74168: LD_ADDR_VAR 0 10
74172: PUSH
74173: LD_VAR 0 1
74177: PPUSH
74178: CALL_OW 251
74182: PPUSH
74183: LD_VAR 0 7
74187: PPUSH
74188: LD_VAR 0 5
74192: PPUSH
74193: CALL_OW 273
74197: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74198: LD_VAR 0 9
74202: PPUSH
74203: LD_VAR 0 10
74207: PPUSH
74208: CALL_OW 488
74212: NOT
74213: IFFALSE 74217
// exit ;
74215: GO 74335
// ComAnimCustom ( unit , 1 ) ;
74217: LD_VAR 0 1
74221: PPUSH
74222: LD_INT 1
74224: PPUSH
74225: CALL_OW 592
// p := 0 ;
74229: LD_ADDR_VAR 0 12
74233: PUSH
74234: LD_INT 0
74236: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
74237: LD_VAR 0 9
74241: PPUSH
74242: LD_VAR 0 10
74246: PPUSH
74247: LD_VAR 0 6
74251: PPUSH
74252: LD_VAR 0 8
74256: PPUSH
74257: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
74261: LD_INT 35
74263: PPUSH
74264: CALL_OW 67
// p := Inc ( p ) ;
74268: LD_ADDR_VAR 0 12
74272: PUSH
74273: LD_VAR 0 12
74277: PPUSH
74278: CALL 41823 0 1
74282: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
74283: LD_VAR 0 12
74287: PUSH
74288: LD_INT 3
74290: EQUAL
74291: PUSH
74292: LD_VAR 0 1
74296: PPUSH
74297: CALL_OW 302
74301: NOT
74302: OR
74303: PUSH
74304: LD_VAR 0 1
74308: PPUSH
74309: CALL_OW 301
74313: OR
74314: IFFALSE 74261
// RemoveSeeing ( _x , _y , side ) ;
74316: LD_VAR 0 9
74320: PPUSH
74321: LD_VAR 0 10
74325: PPUSH
74326: LD_VAR 0 6
74330: PPUSH
74331: CALL_OW 331
// end ;
74335: LD_VAR 0 4
74339: RET
