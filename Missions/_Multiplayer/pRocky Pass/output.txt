// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45603 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 45918 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 9
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 27
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 17
 835: PUSH
 836: LD_INT 7
 838: PUSH
 839: LD_INT 8
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 10
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 12
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea , MZSpecialArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 16
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: LD_INT 15
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 17
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 4
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 22
 921: PUSH
 922: LD_EXP 4
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 23
 935: PUSH
 936: LD_EXP 4
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 13
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 25
 963: PUSH
 964: LD_EXP 4
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 4
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 4
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// if gameType = GameTypeKing then
1009: LD_VAR 0 1
1013: PUSH
1014: LD_INT 3
1016: EQUAL
1017: IFFALSE 1057
// begin mpKingArea := kingArea ;
1019: LD_ADDR_EXP 31
1023: PUSH
1024: LD_INT 16
1026: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1027: LD_ADDR_EXP 32
1031: PUSH
1032: LD_EXP 4
1036: PUSH
1037: LD_INT 8
1039: ARRAY
1040: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1041: LD_ADDR_EXP 34
1045: PUSH
1046: LD_EXP 4
1050: PUSH
1051: LD_INT 10
1053: ARRAY
1054: ST_TO_ADDR
// end else
1055: GO 1081
// begin mpKingArea := 0 ;
1057: LD_ADDR_EXP 31
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// mpPoints := 0 ;
1065: LD_ADDR_EXP 32
1069: PUSH
1070: LD_INT 0
1072: ST_TO_ADDR
// mpEmissions := 0 ;
1073: LD_ADDR_EXP 34
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1081: LD_EXP 4
1085: PUSH
1086: LD_INT 9
1088: ARRAY
1089: IFFALSE 1221
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1091: LD_ADDR_EXP 33
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 2
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 12
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 24
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_INT 12
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 23
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 21
1178: PUSH
1179: LD_INT 1
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 42
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 21
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 42
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1221: LD_ADDR_EXP 14
1225: PUSH
1226: LD_EXP 4
1230: PUSH
1231: LD_INT 11
1233: ARRAY
1234: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1235: LD_ADDR_EXP 20
1239: PUSH
1240: LD_EXP 4
1244: PUSH
1245: LD_INT 12
1247: ARRAY
1248: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1249: LD_ADDR_EXP 24
1253: PUSH
1254: LD_EXP 4
1258: PUSH
1259: LD_INT 13
1261: ARRAY
1262: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1263: LD_ADDR_EXP 30
1267: PUSH
1268: LD_EXP 4
1272: PUSH
1273: LD_INT 14
1275: ARRAY
1276: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1277: LD_ADDR_EXP 28
1281: PUSH
1282: LD_EXP 4
1286: PUSH
1287: LD_INT 15
1289: ARRAY
1290: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1291: LD_ADDR_EXP 26
1295: PUSH
1296: LD_EXP 4
1300: PUSH
1301: LD_INT 18
1303: ARRAY
1304: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1305: LD_ADDR_EXP 18
1309: PUSH
1310: LD_EXP 4
1314: PUSH
1315: LD_INT 21
1317: ARRAY
1318: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1319: LD_ADDR_EXP 29
1323: PUSH
1324: LD_INT 3
1326: PUSH
1327: LD_INT 2
1329: PUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 4
1335: PUSH
1336: LD_INT 6
1338: PUSH
1339: LD_INT 5
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1350: LD_ADDR_VAR 0 8
1354: PUSH
1355: LD_INT 18
1357: PPUSH
1358: LD_INT 2
1360: PPUSH
1361: CALL 45058 0 2
1365: PUSH
1366: LD_INT 19
1368: PPUSH
1369: LD_INT 1
1371: PPUSH
1372: CALL 45058 0 2
1376: PUSH
1377: LD_INT 20
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL 45058 0 2
1387: PUSH
1388: LD_INT 21
1390: PPUSH
1391: LD_INT 3
1393: PPUSH
1394: CALL 45058 0 2
1398: PUSH
1399: LD_INT 22
1401: PPUSH
1402: LD_INT 4
1404: PPUSH
1405: CALL 45058 0 2
1409: PUSH
1410: LD_INT 23
1412: PPUSH
1413: LD_INT 5
1415: PPUSH
1416: CALL 45058 0 2
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1429: LD_ADDR_VAR 0 3
1433: PUSH
1434: DOUBLE
1435: LD_INT 1
1437: DEC
1438: ST_TO_ADDR
1439: LD_VAR 0 8
1443: PPUSH
1444: CALL 4910 0 1
1448: PUSH
1449: FOR_TO
1450: IFFALSE 1554
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1452: LD_ADDR_EXP 19
1456: PUSH
1457: LD_EXP 19
1461: PPUSH
1462: LD_VAR 0 3
1466: PPUSH
1467: LD_VAR 0 8
1471: PUSH
1472: LD_VAR 0 3
1476: ARRAY
1477: PUSH
1478: LD_INT 1
1480: ARRAY
1481: PPUSH
1482: LD_VAR 0 8
1486: PUSH
1487: LD_VAR 0 3
1491: ARRAY
1492: PUSH
1493: LD_INT 3
1495: ARRAY
1496: PPUSH
1497: LD_INT 10
1499: PPUSH
1500: CALL_OW 272
1504: PUSH
1505: LD_VAR 0 8
1509: PUSH
1510: LD_VAR 0 3
1514: ARRAY
1515: PUSH
1516: LD_INT 2
1518: ARRAY
1519: PPUSH
1520: LD_VAR 0 8
1524: PUSH
1525: LD_VAR 0 3
1529: ARRAY
1530: PUSH
1531: LD_INT 3
1533: ARRAY
1534: PPUSH
1535: LD_INT 10
1537: PPUSH
1538: CALL_OW 273
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PPUSH
1547: CALL_OW 1
1551: ST_TO_ADDR
1552: GO 1449
1554: POP
1555: POP
// if hasOil then
1556: LD_VAR 0 5
1560: IFFALSE 1671
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: LD_EXP 4
1571: PUSH
1572: LD_INT 6
1574: ARRAY
1575: PUSH
1576: LD_INT 2
1578: EQUAL
1579: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1580: LD_ADDR_EXP 10
1584: PUSH
1585: LD_INT 24
1587: PPUSH
1588: LD_VAR 0 4
1592: PPUSH
1593: CALL 44891 0 2
1597: PUSH
1598: LD_INT 26
1600: PPUSH
1601: LD_VAR 0 4
1605: PPUSH
1606: CALL 44891 0 2
1610: PUSH
1611: LD_INT 28
1613: PPUSH
1614: LD_VAR 0 4
1618: PPUSH
1619: CALL 44891 0 2
1623: PUSH
1624: LD_INT 30
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL 44891 0 2
1636: PUSH
1637: LD_INT 32
1639: PPUSH
1640: LD_VAR 0 4
1644: PPUSH
1645: CALL 44891 0 2
1649: PUSH
1650: LD_INT 34
1652: PPUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL 44891 0 2
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// end ; if hasSib then
1671: LD_VAR 0 6
1675: IFFALSE 1786
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1677: LD_ADDR_VAR 0 4
1681: PUSH
1682: LD_EXP 4
1686: PUSH
1687: LD_INT 7
1689: ARRAY
1690: PUSH
1691: LD_INT 2
1693: EQUAL
1694: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1695: LD_ADDR_EXP 11
1699: PUSH
1700: LD_INT 25
1702: PPUSH
1703: LD_VAR 0 4
1707: PPUSH
1708: CALL 44891 0 2
1712: PUSH
1713: LD_INT 27
1715: PPUSH
1716: LD_VAR 0 4
1720: PPUSH
1721: CALL 44891 0 2
1725: PUSH
1726: LD_INT 29
1728: PPUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: CALL 44891 0 2
1738: PUSH
1739: LD_INT 31
1741: PPUSH
1742: LD_VAR 0 4
1746: PPUSH
1747: CALL 44891 0 2
1751: PUSH
1752: LD_INT 33
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL 44891 0 2
1764: PUSH
1765: LD_INT 35
1767: PPUSH
1768: LD_VAR 0 4
1772: PPUSH
1773: CALL 44891 0 2
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1786: LD_VAR 0 7
1790: PUSH
1791: LD_INT 1
1793: GREATEREQUAL
1794: IFFALSE 1806
// mpDepots := startPos ;
1796: LD_ADDR_EXP 12
1800: PUSH
1801: LD_VAR 0 8
1805: ST_TO_ADDR
// if baseLevel >= 2 then
1806: LD_VAR 0 7
1810: PUSH
1811: LD_INT 2
1813: GREATEREQUAL
1814: IFFALSE 2129
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1816: LD_ADDR_EXP 15
1820: PUSH
1821: LD_INT 31
1823: PUSH
1824: LD_INT 36
1826: PPUSH
1827: LD_INT 5
1829: PPUSH
1830: CALL 45058 0 2
1834: ADD
1835: PUSH
1836: LD_INT 31
1838: PUSH
1839: LD_INT 37
1841: PPUSH
1842: LD_INT 4
1844: PPUSH
1845: CALL 45058 0 2
1849: ADD
1850: PUSH
1851: LD_INT 4
1853: PUSH
1854: LD_INT 38
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL 45058 0 2
1864: ADD
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 31
1873: PUSH
1874: LD_INT 39
1876: PPUSH
1877: LD_INT 4
1879: PPUSH
1880: CALL 45058 0 2
1884: ADD
1885: PUSH
1886: LD_INT 31
1888: PUSH
1889: LD_INT 40
1891: PPUSH
1892: LD_INT 5
1894: PPUSH
1895: CALL 45058 0 2
1899: ADD
1900: PUSH
1901: LD_INT 4
1903: PUSH
1904: LD_INT 41
1906: PPUSH
1907: LD_INT 4
1909: PPUSH
1910: CALL 45058 0 2
1914: ADD
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 31
1923: PUSH
1924: LD_INT 42
1926: PPUSH
1927: LD_INT 3
1929: PPUSH
1930: CALL 45058 0 2
1934: ADD
1935: PUSH
1936: LD_INT 31
1938: PUSH
1939: LD_INT 43
1941: PPUSH
1942: LD_INT 4
1944: PPUSH
1945: CALL 45058 0 2
1949: ADD
1950: PUSH
1951: LD_INT 4
1953: PUSH
1954: LD_INT 44
1956: PPUSH
1957: LD_INT 3
1959: PPUSH
1960: CALL 45058 0 2
1964: ADD
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 31
1973: PUSH
1974: LD_INT 45
1976: PPUSH
1977: LD_INT 1
1979: PPUSH
1980: CALL 45058 0 2
1984: ADD
1985: PUSH
1986: LD_INT 31
1988: PUSH
1989: LD_INT 46
1991: PPUSH
1992: LD_INT 5
1994: PPUSH
1995: CALL 45058 0 2
1999: ADD
2000: PUSH
2001: LD_INT 4
2003: PUSH
2004: LD_INT 47
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 45058 0 2
2014: ADD
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 31
2023: PUSH
2024: LD_INT 48
2026: PPUSH
2027: LD_INT 2
2029: PPUSH
2030: CALL 45058 0 2
2034: ADD
2035: PUSH
2036: LD_INT 31
2038: PUSH
2039: LD_INT 49
2041: PPUSH
2042: LD_INT 0
2044: PPUSH
2045: CALL 45058 0 2
2049: ADD
2050: PUSH
2051: LD_INT 4
2053: PUSH
2054: LD_INT 50
2056: PPUSH
2057: LD_INT 1
2059: PPUSH
2060: CALL 45058 0 2
2064: ADD
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 31
2073: PUSH
2074: LD_INT 51
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL 45058 0 2
2084: ADD
2085: PUSH
2086: LD_INT 31
2088: PUSH
2089: LD_INT 52
2091: PPUSH
2092: LD_INT 2
2094: PPUSH
2095: CALL 45058 0 2
2099: ADD
2100: PUSH
2101: LD_INT 4
2103: PUSH
2104: LD_INT 53
2106: PPUSH
2107: LD_INT 2
2109: PPUSH
2110: CALL 45058 0 2
2114: ADD
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: ST_TO_ADDR
// end ; end ;
2129: LD_VAR 0 2
2133: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2134: GO 2136
2136: DISABLE
2137: LD_INT 0
2139: PPUSH
2140: PPUSH
2141: PPUSH
2142: PPUSH
2143: PPUSH
2144: PPUSH
2145: PPUSH
2146: PPUSH
// begin if not mpShipments then
2147: LD_EXP 25
2151: NOT
2152: IFFALSE 2156
// exit ;
2154: GO 2721
// case mpShipments of 1 :
2156: LD_EXP 25
2160: PUSH
2161: LD_INT 1
2163: DOUBLE
2164: EQUAL
2165: IFTRUE 2169
2167: GO 2204
2169: POP
// begin time := 0 0$30 ;
2170: LD_ADDR_VAR 0 4
2174: PUSH
2175: LD_INT 1050
2177: ST_TO_ADDR
// normalTime := 0 0$30 ;
2178: LD_ADDR_VAR 0 6
2182: PUSH
2183: LD_INT 1050
2185: ST_TO_ADDR
// maxTime := 1 1$20 ;
2186: LD_ADDR_VAR 0 8
2190: PUSH
2191: LD_INT 2800
2193: ST_TO_ADDR
// delayTime := 0 0$5 ;
2194: LD_ADDR_VAR 0 7
2198: PUSH
2199: LD_INT 175
2201: ST_TO_ADDR
// end ; 2 :
2202: GO 2334
2204: LD_INT 2
2206: DOUBLE
2207: EQUAL
2208: IFTRUE 2212
2210: GO 2247
2212: POP
// begin time := 0 0$25 ;
2213: LD_ADDR_VAR 0 4
2217: PUSH
2218: LD_INT 875
2220: ST_TO_ADDR
// normalTime := 0 0$25 ;
2221: LD_ADDR_VAR 0 6
2225: PUSH
2226: LD_INT 875
2228: ST_TO_ADDR
// maxTime := 1 1$10 ;
2229: LD_ADDR_VAR 0 8
2233: PUSH
2234: LD_INT 2450
2236: ST_TO_ADDR
// delayTime := 0 0$4 ;
2237: LD_ADDR_VAR 0 7
2241: PUSH
2242: LD_INT 140
2244: ST_TO_ADDR
// end ; 3 :
2245: GO 2334
2247: LD_INT 3
2249: DOUBLE
2250: EQUAL
2251: IFTRUE 2255
2253: GO 2290
2255: POP
// begin time := 0 0$20 ;
2256: LD_ADDR_VAR 0 4
2260: PUSH
2261: LD_INT 700
2263: ST_TO_ADDR
// normalTime := 0 0$20 ;
2264: LD_ADDR_VAR 0 6
2268: PUSH
2269: LD_INT 700
2271: ST_TO_ADDR
// maxTime := 1 1$00 ;
2272: LD_ADDR_VAR 0 8
2276: PUSH
2277: LD_INT 2100
2279: ST_TO_ADDR
// delayTime := 0 0$3 ;
2280: LD_ADDR_VAR 0 7
2284: PUSH
2285: LD_INT 105
2287: ST_TO_ADDR
// end ; 4 :
2288: GO 2334
2290: LD_INT 4
2292: DOUBLE
2293: EQUAL
2294: IFTRUE 2298
2296: GO 2333
2298: POP
// begin time := 0 0$15 ;
2299: LD_ADDR_VAR 0 4
2303: PUSH
2304: LD_INT 525
2306: ST_TO_ADDR
// normalTime := 0 0$15 ;
2307: LD_ADDR_VAR 0 6
2311: PUSH
2312: LD_INT 525
2314: ST_TO_ADDR
// maxTime := 0 0$55 ;
2315: LD_ADDR_VAR 0 8
2319: PUSH
2320: LD_INT 1925
2322: ST_TO_ADDR
// delayTime := 0 0$2 ;
2323: LD_ADDR_VAR 0 7
2327: PUSH
2328: LD_INT 70
2330: ST_TO_ADDR
// end ; end ;
2331: GO 2334
2333: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2334: LD_ADDR_VAR 0 3
2338: PUSH
2339: LD_INT 7
2341: PUSH
2342: LD_INT 8
2344: PUSH
2345: LD_INT 9
2347: PUSH
2348: LD_INT 10
2350: PUSH
2351: LD_INT 11
2353: PUSH
2354: LD_INT 12
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// areas := [ ] ;
2365: LD_ADDR_VAR 0 5
2369: PUSH
2370: EMPTY
2371: ST_TO_ADDR
// for i := 1 to 8 do
2372: LD_ADDR_VAR 0 1
2376: PUSH
2377: DOUBLE
2378: LD_INT 1
2380: DEC
2381: ST_TO_ADDR
2382: LD_INT 8
2384: PUSH
2385: FOR_TO
2386: IFFALSE 2433
// begin if not mpSidePositions [ i ] then
2388: LD_EXP 5
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: NOT
2399: IFFALSE 2403
// continue ;
2401: GO 2385
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2403: LD_ADDR_VAR 0 5
2407: PUSH
2408: LD_VAR 0 5
2412: PUSH
2413: LD_VAR 0 3
2417: PUSH
2418: LD_EXP 5
2422: PUSH
2423: LD_VAR 0 1
2427: ARRAY
2428: ARRAY
2429: ADD
2430: ST_TO_ADDR
// end ;
2431: GO 2385
2433: POP
2434: POP
// x := 1 ;
2435: LD_ADDR_VAR 0 2
2439: PUSH
2440: LD_INT 1
2442: ST_TO_ADDR
// repeat wait ( time ) ;
2443: LD_VAR 0 4
2447: PPUSH
2448: CALL_OW 67
// x := Inc ( x ) ;
2452: LD_ADDR_VAR 0 2
2456: PUSH
2457: LD_VAR 0 2
2461: PPUSH
2462: CALL 41880 0 1
2466: ST_TO_ADDR
// if x > 5 then
2467: LD_VAR 0 2
2471: PUSH
2472: LD_INT 5
2474: GREATER
2475: IFFALSE 2485
// x := 1 ;
2477: LD_ADDR_VAR 0 2
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// for i in areas do
2485: LD_ADDR_VAR 0 1
2489: PUSH
2490: LD_VAR 0 5
2494: PUSH
2495: FOR_IN
2496: IFFALSE 2535
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2498: LD_VAR 0 1
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL_OW 287
2510: PUSH
2511: LD_INT 20
2513: LESS
2514: IFFALSE 2533
// begin CreateCratesArea ( x , i , true ) ;
2516: LD_VAR 0 2
2520: PPUSH
2521: LD_VAR 0 1
2525: PPUSH
2526: LD_INT 1
2528: PPUSH
2529: CALL_OW 55
// end ; end ;
2533: GO 2495
2535: POP
2536: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 100 then
2537: LD_INT 14
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: CALL_OW 287
2547: PUSH
2548: LD_INT 100
2550: LESS
2551: IFFALSE 2595
// for i := 1 to Count ( areas ) do
2553: LD_ADDR_VAR 0 1
2557: PUSH
2558: DOUBLE
2559: LD_INT 1
2561: DEC
2562: ST_TO_ADDR
2563: LD_VAR 0 5
2567: PPUSH
2568: CALL 4910 0 1
2572: PUSH
2573: FOR_TO
2574: IFFALSE 2593
// CreateCratesArea ( x , MZBaseArea , true ) ;
2576: LD_VAR 0 2
2580: PPUSH
2581: LD_INT 14
2583: PPUSH
2584: LD_INT 1
2586: PPUSH
2587: CALL_OW 55
2591: GO 2573
2593: POP
2594: POP
// if GetResourceArea ( MZSpecialArea , mat_cans ) = 0 then
2595: LD_INT 15
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 287
2605: PUSH
2606: LD_INT 0
2608: EQUAL
2609: IFFALSE 2648
// begin for i := 1 to 3 do
2611: LD_ADDR_VAR 0 1
2615: PUSH
2616: DOUBLE
2617: LD_INT 1
2619: DEC
2620: ST_TO_ADDR
2621: LD_INT 3
2623: PUSH
2624: FOR_TO
2625: IFFALSE 2644
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2627: LD_VAR 0 2
2631: PPUSH
2632: LD_INT 15
2634: PPUSH
2635: LD_INT 1
2637: PPUSH
2638: CALL_OW 55
2642: GO 2624
2644: POP
2645: POP
// end else
2646: GO 2679
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
2648: LD_INT 15
2650: PPUSH
2651: LD_INT 1
2653: PPUSH
2654: CALL_OW 287
2658: PUSH
2659: LD_INT 30
2661: LESS
2662: IFFALSE 2679
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2664: LD_VAR 0 2
2668: PPUSH
2669: LD_INT 15
2671: PPUSH
2672: LD_INT 1
2674: PPUSH
2675: CALL_OW 55
// time := time + delayTime ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 4
2688: PUSH
2689: LD_VAR 0 7
2693: PLUS
2694: ST_TO_ADDR
// if time > maxTime then
2695: LD_VAR 0 4
2699: PUSH
2700: LD_VAR 0 8
2704: GREATER
2705: IFFALSE 2717
// time := normalTime ;
2707: LD_ADDR_VAR 0 4
2711: PUSH
2712: LD_VAR 0 6
2716: ST_TO_ADDR
// until false ;
2717: LD_INT 0
2719: IFFALSE 2443
// end ; end_of_file
2721: PPOPN 8
2723: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2724: LD_VAR 0 1
2728: PPUSH
2729: CALL 53733 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2733: LD_VAR 0 1
2737: PPUSH
2738: CALL 50440 0 1
// end ;
2742: PPOPN 1
2744: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2745: LD_VAR 0 1
2749: PPUSH
2750: CALL 53750 0 1
// end ;
2754: PPOPN 1
2756: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2757: LD_VAR 0 1
2761: PPUSH
2762: CALL 51043 0 1
2766: PPOPN 1
2768: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2769: LD_VAR 0 1
2773: PPUSH
2774: LD_VAR 0 2
2778: PPUSH
2779: CALL 53791 0 2
2783: PPOPN 2
2785: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2786: LD_VAR 0 1
2790: PPUSH
2791: LD_VAR 0 2
2795: PPUSH
2796: LD_VAR 0 3
2800: PPUSH
2801: CALL 51096 0 3
2805: PPOPN 3
2807: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2808: LD_INT 0
2810: PPUSH
2811: PPUSH
// if exist_mode then
2812: LD_VAR 0 2
2816: IFFALSE 2841
// unit := CreateCharacter ( prefix & ident ) else
2818: LD_ADDR_VAR 0 5
2822: PUSH
2823: LD_VAR 0 3
2827: PUSH
2828: LD_VAR 0 1
2832: STR
2833: PPUSH
2834: CALL_OW 34
2838: ST_TO_ADDR
2839: GO 2856
// unit := NewCharacter ( ident ) ;
2841: LD_ADDR_VAR 0 5
2845: PUSH
2846: LD_VAR 0 1
2850: PPUSH
2851: CALL_OW 25
2855: ST_TO_ADDR
// result := unit ;
2856: LD_ADDR_VAR 0 4
2860: PUSH
2861: LD_VAR 0 5
2865: ST_TO_ADDR
// end ;
2866: LD_VAR 0 4
2870: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2871: LD_INT 0
2873: PPUSH
2874: PPUSH
// if not side or not nation then
2875: LD_VAR 0 1
2879: NOT
2880: PUSH
2881: LD_VAR 0 2
2885: NOT
2886: OR
2887: IFFALSE 2891
// exit ;
2889: GO 3659
// case nation of nation_american :
2891: LD_VAR 0 2
2895: PUSH
2896: LD_INT 1
2898: DOUBLE
2899: EQUAL
2900: IFTRUE 2904
2902: GO 3118
2904: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2905: LD_ADDR_VAR 0 4
2909: PUSH
2910: LD_INT 35
2912: PUSH
2913: LD_INT 45
2915: PUSH
2916: LD_INT 46
2918: PUSH
2919: LD_INT 47
2921: PUSH
2922: LD_INT 82
2924: PUSH
2925: LD_INT 83
2927: PUSH
2928: LD_INT 84
2930: PUSH
2931: LD_INT 85
2933: PUSH
2934: LD_INT 86
2936: PUSH
2937: LD_INT 1
2939: PUSH
2940: LD_INT 2
2942: PUSH
2943: LD_INT 6
2945: PUSH
2946: LD_INT 15
2948: PUSH
2949: LD_INT 16
2951: PUSH
2952: LD_INT 7
2954: PUSH
2955: LD_INT 12
2957: PUSH
2958: LD_INT 13
2960: PUSH
2961: LD_INT 10
2963: PUSH
2964: LD_INT 14
2966: PUSH
2967: LD_INT 20
2969: PUSH
2970: LD_INT 21
2972: PUSH
2973: LD_INT 22
2975: PUSH
2976: LD_INT 25
2978: PUSH
2979: LD_INT 32
2981: PUSH
2982: LD_INT 27
2984: PUSH
2985: LD_INT 36
2987: PUSH
2988: LD_INT 69
2990: PUSH
2991: LD_INT 39
2993: PUSH
2994: LD_INT 34
2996: PUSH
2997: LD_INT 40
2999: PUSH
3000: LD_INT 48
3002: PUSH
3003: LD_INT 49
3005: PUSH
3006: LD_INT 50
3008: PUSH
3009: LD_INT 51
3011: PUSH
3012: LD_INT 52
3014: PUSH
3015: LD_INT 53
3017: PUSH
3018: LD_INT 54
3020: PUSH
3021: LD_INT 55
3023: PUSH
3024: LD_INT 56
3026: PUSH
3027: LD_INT 57
3029: PUSH
3030: LD_INT 58
3032: PUSH
3033: LD_INT 59
3035: PUSH
3036: LD_INT 60
3038: PUSH
3039: LD_INT 61
3041: PUSH
3042: LD_INT 62
3044: PUSH
3045: LD_INT 80
3047: PUSH
3048: LD_INT 82
3050: PUSH
3051: LD_INT 83
3053: PUSH
3054: LD_INT 84
3056: PUSH
3057: LD_INT 85
3059: PUSH
3060: LD_INT 86
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: ST_TO_ADDR
3116: GO 3583
3118: LD_INT 2
3120: DOUBLE
3121: EQUAL
3122: IFTRUE 3126
3124: GO 3352
3126: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3127: LD_ADDR_VAR 0 4
3131: PUSH
3132: LD_INT 35
3134: PUSH
3135: LD_INT 45
3137: PUSH
3138: LD_INT 46
3140: PUSH
3141: LD_INT 47
3143: PUSH
3144: LD_INT 82
3146: PUSH
3147: LD_INT 83
3149: PUSH
3150: LD_INT 84
3152: PUSH
3153: LD_INT 85
3155: PUSH
3156: LD_INT 87
3158: PUSH
3159: LD_INT 70
3161: PUSH
3162: LD_INT 1
3164: PUSH
3165: LD_INT 11
3167: PUSH
3168: LD_INT 3
3170: PUSH
3171: LD_INT 4
3173: PUSH
3174: LD_INT 5
3176: PUSH
3177: LD_INT 6
3179: PUSH
3180: LD_INT 15
3182: PUSH
3183: LD_INT 18
3185: PUSH
3186: LD_INT 7
3188: PUSH
3189: LD_INT 17
3191: PUSH
3192: LD_INT 8
3194: PUSH
3195: LD_INT 20
3197: PUSH
3198: LD_INT 21
3200: PUSH
3201: LD_INT 22
3203: PUSH
3204: LD_INT 72
3206: PUSH
3207: LD_INT 26
3209: PUSH
3210: LD_INT 69
3212: PUSH
3213: LD_INT 39
3215: PUSH
3216: LD_INT 40
3218: PUSH
3219: LD_INT 41
3221: PUSH
3222: LD_INT 42
3224: PUSH
3225: LD_INT 43
3227: PUSH
3228: LD_INT 48
3230: PUSH
3231: LD_INT 49
3233: PUSH
3234: LD_INT 50
3236: PUSH
3237: LD_INT 51
3239: PUSH
3240: LD_INT 52
3242: PUSH
3243: LD_INT 53
3245: PUSH
3246: LD_INT 54
3248: PUSH
3249: LD_INT 55
3251: PUSH
3252: LD_INT 56
3254: PUSH
3255: LD_INT 60
3257: PUSH
3258: LD_INT 61
3260: PUSH
3261: LD_INT 62
3263: PUSH
3264: LD_INT 66
3266: PUSH
3267: LD_INT 67
3269: PUSH
3270: LD_INT 68
3272: PUSH
3273: LD_INT 81
3275: PUSH
3276: LD_INT 82
3278: PUSH
3279: LD_INT 83
3281: PUSH
3282: LD_INT 84
3284: PUSH
3285: LD_INT 85
3287: PUSH
3288: LD_INT 87
3290: PUSH
3291: LD_INT 88
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: ST_TO_ADDR
3350: GO 3583
3352: LD_INT 3
3354: DOUBLE
3355: EQUAL
3356: IFTRUE 3360
3358: GO 3582
3360: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3361: LD_ADDR_VAR 0 4
3365: PUSH
3366: LD_INT 46
3368: PUSH
3369: LD_INT 47
3371: PUSH
3372: LD_INT 1
3374: PUSH
3375: LD_INT 2
3377: PUSH
3378: LD_INT 82
3380: PUSH
3381: LD_INT 83
3383: PUSH
3384: LD_INT 84
3386: PUSH
3387: LD_INT 85
3389: PUSH
3390: LD_INT 86
3392: PUSH
3393: LD_INT 11
3395: PUSH
3396: LD_INT 9
3398: PUSH
3399: LD_INT 20
3401: PUSH
3402: LD_INT 19
3404: PUSH
3405: LD_INT 21
3407: PUSH
3408: LD_INT 24
3410: PUSH
3411: LD_INT 22
3413: PUSH
3414: LD_INT 25
3416: PUSH
3417: LD_INT 28
3419: PUSH
3420: LD_INT 29
3422: PUSH
3423: LD_INT 30
3425: PUSH
3426: LD_INT 31
3428: PUSH
3429: LD_INT 37
3431: PUSH
3432: LD_INT 38
3434: PUSH
3435: LD_INT 32
3437: PUSH
3438: LD_INT 27
3440: PUSH
3441: LD_INT 33
3443: PUSH
3444: LD_INT 69
3446: PUSH
3447: LD_INT 39
3449: PUSH
3450: LD_INT 34
3452: PUSH
3453: LD_INT 40
3455: PUSH
3456: LD_INT 71
3458: PUSH
3459: LD_INT 23
3461: PUSH
3462: LD_INT 44
3464: PUSH
3465: LD_INT 48
3467: PUSH
3468: LD_INT 49
3470: PUSH
3471: LD_INT 50
3473: PUSH
3474: LD_INT 51
3476: PUSH
3477: LD_INT 52
3479: PUSH
3480: LD_INT 53
3482: PUSH
3483: LD_INT 54
3485: PUSH
3486: LD_INT 55
3488: PUSH
3489: LD_INT 56
3491: PUSH
3492: LD_INT 57
3494: PUSH
3495: LD_INT 58
3497: PUSH
3498: LD_INT 59
3500: PUSH
3501: LD_INT 63
3503: PUSH
3504: LD_INT 64
3506: PUSH
3507: LD_INT 65
3509: PUSH
3510: LD_INT 82
3512: PUSH
3513: LD_INT 83
3515: PUSH
3516: LD_INT 84
3518: PUSH
3519: LD_INT 85
3521: PUSH
3522: LD_INT 86
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: ST_TO_ADDR
3580: GO 3583
3582: POP
// if state > - 1 and state < 3 then
3583: LD_VAR 0 3
3587: PUSH
3588: LD_INT 1
3590: NEG
3591: GREATER
3592: PUSH
3593: LD_VAR 0 3
3597: PUSH
3598: LD_INT 3
3600: LESS
3601: AND
3602: IFFALSE 3659
// for i in result do
3604: LD_ADDR_VAR 0 5
3608: PUSH
3609: LD_VAR 0 4
3613: PUSH
3614: FOR_IN
3615: IFFALSE 3657
// if GetTech ( i , side ) <> state then
3617: LD_VAR 0 5
3621: PPUSH
3622: LD_VAR 0 1
3626: PPUSH
3627: CALL_OW 321
3631: PUSH
3632: LD_VAR 0 3
3636: NONEQUAL
3637: IFFALSE 3655
// result := result diff i ;
3639: LD_ADDR_VAR 0 4
3643: PUSH
3644: LD_VAR 0 4
3648: PUSH
3649: LD_VAR 0 5
3653: DIFF
3654: ST_TO_ADDR
3655: GO 3614
3657: POP
3658: POP
// end ;
3659: LD_VAR 0 4
3663: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3664: LD_INT 0
3666: PPUSH
3667: PPUSH
3668: PPUSH
// result := true ;
3669: LD_ADDR_VAR 0 3
3673: PUSH
3674: LD_INT 1
3676: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3677: LD_ADDR_VAR 0 5
3681: PUSH
3682: LD_VAR 0 2
3686: PPUSH
3687: CALL_OW 480
3691: ST_TO_ADDR
// if not tmp then
3692: LD_VAR 0 5
3696: NOT
3697: IFFALSE 3701
// exit ;
3699: GO 3750
// for i in tmp do
3701: LD_ADDR_VAR 0 4
3705: PUSH
3706: LD_VAR 0 5
3710: PUSH
3711: FOR_IN
3712: IFFALSE 3748
// if GetTech ( i , side ) <> state_researched then
3714: LD_VAR 0 4
3718: PPUSH
3719: LD_VAR 0 1
3723: PPUSH
3724: CALL_OW 321
3728: PUSH
3729: LD_INT 2
3731: NONEQUAL
3732: IFFALSE 3746
// begin result := false ;
3734: LD_ADDR_VAR 0 3
3738: PUSH
3739: LD_INT 0
3741: ST_TO_ADDR
// exit ;
3742: POP
3743: POP
3744: GO 3750
// end ;
3746: GO 3711
3748: POP
3749: POP
// end ;
3750: LD_VAR 0 3
3754: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3755: LD_INT 0
3757: PPUSH
3758: PPUSH
3759: PPUSH
3760: PPUSH
3761: PPUSH
3762: PPUSH
3763: PPUSH
3764: PPUSH
3765: PPUSH
3766: PPUSH
3767: PPUSH
3768: PPUSH
3769: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3770: LD_VAR 0 1
3774: NOT
3775: PUSH
3776: LD_VAR 0 1
3780: PPUSH
3781: CALL_OW 257
3785: PUSH
3786: LD_INT 9
3788: NONEQUAL
3789: OR
3790: IFFALSE 3794
// exit ;
3792: GO 4367
// side := GetSide ( unit ) ;
3794: LD_ADDR_VAR 0 9
3798: PUSH
3799: LD_VAR 0 1
3803: PPUSH
3804: CALL_OW 255
3808: ST_TO_ADDR
// tech_space := tech_spacanom ;
3809: LD_ADDR_VAR 0 12
3813: PUSH
3814: LD_INT 29
3816: ST_TO_ADDR
// tech_time := tech_taurad ;
3817: LD_ADDR_VAR 0 13
3821: PUSH
3822: LD_INT 28
3824: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3825: LD_ADDR_VAR 0 11
3829: PUSH
3830: LD_VAR 0 1
3834: PPUSH
3835: CALL_OW 310
3839: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3840: LD_VAR 0 11
3844: PPUSH
3845: CALL_OW 247
3849: PUSH
3850: LD_INT 2
3852: EQUAL
3853: IFFALSE 3857
// exit ;
3855: GO 4367
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3857: LD_ADDR_VAR 0 8
3861: PUSH
3862: LD_INT 81
3864: PUSH
3865: LD_VAR 0 9
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 3
3876: PUSH
3877: LD_INT 21
3879: PUSH
3880: LD_INT 3
3882: PUSH
3883: EMPTY
3884: LIST
3885: LIST
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PPUSH
3895: CALL_OW 69
3899: ST_TO_ADDR
// if not tmp then
3900: LD_VAR 0 8
3904: NOT
3905: IFFALSE 3909
// exit ;
3907: GO 4367
// if in_unit then
3909: LD_VAR 0 11
3913: IFFALSE 3937
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3915: LD_ADDR_VAR 0 10
3919: PUSH
3920: LD_VAR 0 8
3924: PPUSH
3925: LD_VAR 0 11
3929: PPUSH
3930: CALL_OW 74
3934: ST_TO_ADDR
3935: GO 3957
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3937: LD_ADDR_VAR 0 10
3941: PUSH
3942: LD_VAR 0 8
3946: PPUSH
3947: LD_VAR 0 1
3951: PPUSH
3952: CALL_OW 74
3956: ST_TO_ADDR
// if not enemy then
3957: LD_VAR 0 10
3961: NOT
3962: IFFALSE 3966
// exit ;
3964: GO 4367
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3966: LD_VAR 0 11
3970: PUSH
3971: LD_VAR 0 11
3975: PPUSH
3976: LD_VAR 0 10
3980: PPUSH
3981: CALL_OW 296
3985: PUSH
3986: LD_INT 13
3988: GREATER
3989: AND
3990: PUSH
3991: LD_VAR 0 1
3995: PPUSH
3996: LD_VAR 0 10
4000: PPUSH
4001: CALL_OW 296
4005: PUSH
4006: LD_INT 12
4008: GREATER
4009: OR
4010: IFFALSE 4014
// exit ;
4012: GO 4367
// missile := [ 1 ] ;
4014: LD_ADDR_VAR 0 14
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4025: LD_VAR 0 9
4029: PPUSH
4030: LD_VAR 0 12
4034: PPUSH
4035: CALL_OW 325
4039: IFFALSE 4068
// missile := Replace ( missile , missile + 1 , 2 ) ;
4041: LD_ADDR_VAR 0 14
4045: PUSH
4046: LD_VAR 0 14
4050: PPUSH
4051: LD_VAR 0 14
4055: PUSH
4056: LD_INT 1
4058: PLUS
4059: PPUSH
4060: LD_INT 2
4062: PPUSH
4063: CALL_OW 1
4067: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4068: LD_VAR 0 9
4072: PPUSH
4073: LD_VAR 0 13
4077: PPUSH
4078: CALL_OW 325
4082: PUSH
4083: LD_VAR 0 10
4087: PPUSH
4088: CALL_OW 255
4092: PPUSH
4093: LD_VAR 0 13
4097: PPUSH
4098: CALL_OW 325
4102: NOT
4103: AND
4104: IFFALSE 4133
// missile := Replace ( missile , missile + 1 , 3 ) ;
4106: LD_ADDR_VAR 0 14
4110: PUSH
4111: LD_VAR 0 14
4115: PPUSH
4116: LD_VAR 0 14
4120: PUSH
4121: LD_INT 1
4123: PLUS
4124: PPUSH
4125: LD_INT 3
4127: PPUSH
4128: CALL_OW 1
4132: ST_TO_ADDR
// if missile < 2 then
4133: LD_VAR 0 14
4137: PUSH
4138: LD_INT 2
4140: LESS
4141: IFFALSE 4145
// exit ;
4143: GO 4367
// x := GetX ( enemy ) ;
4145: LD_ADDR_VAR 0 4
4149: PUSH
4150: LD_VAR 0 10
4154: PPUSH
4155: CALL_OW 250
4159: ST_TO_ADDR
// y := GetY ( enemy ) ;
4160: LD_ADDR_VAR 0 5
4164: PUSH
4165: LD_VAR 0 10
4169: PPUSH
4170: CALL_OW 251
4174: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4175: LD_ADDR_VAR 0 6
4179: PUSH
4180: LD_VAR 0 4
4184: PUSH
4185: LD_INT 1
4187: NEG
4188: PPUSH
4189: LD_INT 1
4191: PPUSH
4192: CALL_OW 12
4196: PLUS
4197: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4198: LD_ADDR_VAR 0 7
4202: PUSH
4203: LD_VAR 0 5
4207: PUSH
4208: LD_INT 1
4210: NEG
4211: PPUSH
4212: LD_INT 1
4214: PPUSH
4215: CALL_OW 12
4219: PLUS
4220: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4221: LD_VAR 0 6
4225: PPUSH
4226: LD_VAR 0 7
4230: PPUSH
4231: CALL_OW 488
4235: NOT
4236: IFFALSE 4258
// begin _x := x ;
4238: LD_ADDR_VAR 0 6
4242: PUSH
4243: LD_VAR 0 4
4247: ST_TO_ADDR
// _y := y ;
4248: LD_ADDR_VAR 0 7
4252: PUSH
4253: LD_VAR 0 5
4257: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4258: LD_ADDR_VAR 0 3
4262: PUSH
4263: LD_INT 1
4265: PPUSH
4266: LD_VAR 0 14
4270: PPUSH
4271: CALL_OW 12
4275: ST_TO_ADDR
// case i of 1 :
4276: LD_VAR 0 3
4280: PUSH
4281: LD_INT 1
4283: DOUBLE
4284: EQUAL
4285: IFTRUE 4289
4287: GO 4306
4289: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4290: LD_VAR 0 1
4294: PPUSH
4295: LD_VAR 0 10
4299: PPUSH
4300: CALL_OW 115
4304: GO 4367
4306: LD_INT 2
4308: DOUBLE
4309: EQUAL
4310: IFTRUE 4314
4312: GO 4336
4314: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4315: LD_VAR 0 1
4319: PPUSH
4320: LD_VAR 0 6
4324: PPUSH
4325: LD_VAR 0 7
4329: PPUSH
4330: CALL_OW 153
4334: GO 4367
4336: LD_INT 3
4338: DOUBLE
4339: EQUAL
4340: IFTRUE 4344
4342: GO 4366
4344: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4345: LD_VAR 0 1
4349: PPUSH
4350: LD_VAR 0 6
4354: PPUSH
4355: LD_VAR 0 7
4359: PPUSH
4360: CALL_OW 154
4364: GO 4367
4366: POP
// end ;
4367: LD_VAR 0 2
4371: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4372: LD_INT 0
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// if not unit or not building then
4380: LD_VAR 0 1
4384: NOT
4385: PUSH
4386: LD_VAR 0 2
4390: NOT
4391: OR
4392: IFFALSE 4396
// exit ;
4394: GO 4554
// x := GetX ( building ) ;
4396: LD_ADDR_VAR 0 5
4400: PUSH
4401: LD_VAR 0 2
4405: PPUSH
4406: CALL_OW 250
4410: ST_TO_ADDR
// y := GetY ( building ) ;
4411: LD_ADDR_VAR 0 6
4415: PUSH
4416: LD_VAR 0 2
4420: PPUSH
4421: CALL_OW 251
4425: ST_TO_ADDR
// for i = 0 to 5 do
4426: LD_ADDR_VAR 0 4
4430: PUSH
4431: DOUBLE
4432: LD_INT 0
4434: DEC
4435: ST_TO_ADDR
4436: LD_INT 5
4438: PUSH
4439: FOR_TO
4440: IFFALSE 4552
// begin _x := ShiftX ( x , i , 3 ) ;
4442: LD_ADDR_VAR 0 7
4446: PUSH
4447: LD_VAR 0 5
4451: PPUSH
4452: LD_VAR 0 4
4456: PPUSH
4457: LD_INT 3
4459: PPUSH
4460: CALL_OW 272
4464: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4465: LD_ADDR_VAR 0 8
4469: PUSH
4470: LD_VAR 0 6
4474: PPUSH
4475: LD_VAR 0 4
4479: PPUSH
4480: LD_INT 3
4482: PPUSH
4483: CALL_OW 273
4487: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4488: LD_VAR 0 7
4492: PPUSH
4493: LD_VAR 0 8
4497: PPUSH
4498: CALL_OW 488
4502: NOT
4503: IFFALSE 4507
// continue ;
4505: GO 4439
// if HexInfo ( _x , _y ) = 0 then
4507: LD_VAR 0 7
4511: PPUSH
4512: LD_VAR 0 8
4516: PPUSH
4517: CALL_OW 428
4521: PUSH
4522: LD_INT 0
4524: EQUAL
4525: IFFALSE 4550
// begin ComMoveXY ( unit , _x , _y ) ;
4527: LD_VAR 0 1
4531: PPUSH
4532: LD_VAR 0 7
4536: PPUSH
4537: LD_VAR 0 8
4541: PPUSH
4542: CALL_OW 111
// exit ;
4546: POP
4547: POP
4548: GO 4554
// end ; end ;
4550: GO 4439
4552: POP
4553: POP
// end ;
4554: LD_VAR 0 3
4558: RET
// export function ScanBase ( side , base_area ) ; begin
4559: LD_INT 0
4561: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4562: LD_ADDR_VAR 0 3
4566: PUSH
4567: LD_VAR 0 2
4571: PPUSH
4572: LD_INT 81
4574: PUSH
4575: LD_VAR 0 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PPUSH
4584: CALL_OW 70
4588: ST_TO_ADDR
// end ;
4589: LD_VAR 0 3
4593: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4594: LD_INT 0
4596: PPUSH
4597: PPUSH
4598: PPUSH
4599: PPUSH
// result := false ;
4600: LD_ADDR_VAR 0 2
4604: PUSH
4605: LD_INT 0
4607: ST_TO_ADDR
// side := GetSide ( unit ) ;
4608: LD_ADDR_VAR 0 3
4612: PUSH
4613: LD_VAR 0 1
4617: PPUSH
4618: CALL_OW 255
4622: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4623: LD_ADDR_VAR 0 4
4627: PUSH
4628: LD_VAR 0 1
4632: PPUSH
4633: CALL_OW 248
4637: ST_TO_ADDR
// case nat of 1 :
4638: LD_VAR 0 4
4642: PUSH
4643: LD_INT 1
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// tech := tech_lassight ; 2 :
4652: LD_ADDR_VAR 0 5
4656: PUSH
4657: LD_INT 12
4659: ST_TO_ADDR
4660: GO 4701
4662: LD_INT 2
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4681
4670: POP
// tech := tech_mortar ; 3 :
4671: LD_ADDR_VAR 0 5
4675: PUSH
4676: LD_INT 41
4678: ST_TO_ADDR
4679: GO 4701
4681: LD_INT 3
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4700
4689: POP
// tech := tech_bazooka ; end ;
4690: LD_ADDR_VAR 0 5
4694: PUSH
4695: LD_INT 44
4697: ST_TO_ADDR
4698: GO 4701
4700: POP
// if Researched ( side , tech ) then
4701: LD_VAR 0 3
4705: PPUSH
4706: LD_VAR 0 5
4710: PPUSH
4711: CALL_OW 325
4715: IFFALSE 4742
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4717: LD_ADDR_VAR 0 2
4721: PUSH
4722: LD_INT 5
4724: PUSH
4725: LD_INT 8
4727: PUSH
4728: LD_INT 9
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: LIST
4735: PUSH
4736: LD_VAR 0 4
4740: ARRAY
4741: ST_TO_ADDR
// end ;
4742: LD_VAR 0 2
4746: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4747: LD_INT 0
4749: PPUSH
4750: PPUSH
4751: PPUSH
// if not mines then
4752: LD_VAR 0 2
4756: NOT
4757: IFFALSE 4761
// exit ;
4759: GO 4905
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4761: LD_ADDR_VAR 0 5
4765: PUSH
4766: LD_INT 81
4768: PUSH
4769: LD_VAR 0 1
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: PUSH
4778: LD_INT 3
4780: PUSH
4781: LD_INT 21
4783: PUSH
4784: LD_INT 3
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PPUSH
4799: CALL_OW 69
4803: ST_TO_ADDR
// for i in mines do
4804: LD_ADDR_VAR 0 4
4808: PUSH
4809: LD_VAR 0 2
4813: PUSH
4814: FOR_IN
4815: IFFALSE 4903
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4817: LD_VAR 0 4
4821: PUSH
4822: LD_INT 1
4824: ARRAY
4825: PPUSH
4826: LD_VAR 0 4
4830: PUSH
4831: LD_INT 2
4833: ARRAY
4834: PPUSH
4835: CALL_OW 458
4839: NOT
4840: IFFALSE 4844
// continue ;
4842: GO 4814
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4844: LD_VAR 0 4
4848: PUSH
4849: LD_INT 1
4851: ARRAY
4852: PPUSH
4853: LD_VAR 0 4
4857: PUSH
4858: LD_INT 2
4860: ARRAY
4861: PPUSH
4862: CALL_OW 428
4866: PUSH
4867: LD_VAR 0 5
4871: IN
4872: IFFALSE 4901
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4874: LD_VAR 0 4
4878: PUSH
4879: LD_INT 1
4881: ARRAY
4882: PPUSH
4883: LD_VAR 0 4
4887: PUSH
4888: LD_INT 2
4890: ARRAY
4891: PPUSH
4892: LD_VAR 0 1
4896: PPUSH
4897: CALL_OW 456
// end ;
4901: GO 4814
4903: POP
4904: POP
// end ;
4905: LD_VAR 0 3
4909: RET
// export function Count ( array ) ; begin
4910: LD_INT 0
4912: PPUSH
// result := array + 0 ;
4913: LD_ADDR_VAR 0 2
4917: PUSH
4918: LD_VAR 0 1
4922: PUSH
4923: LD_INT 0
4925: PLUS
4926: ST_TO_ADDR
// end ;
4927: LD_VAR 0 2
4931: RET
// export function IsEmpty ( building ) ; begin
4932: LD_INT 0
4934: PPUSH
// if not building then
4935: LD_VAR 0 1
4939: NOT
4940: IFFALSE 4944
// exit ;
4942: GO 4987
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4944: LD_ADDR_VAR 0 2
4948: PUSH
4949: LD_VAR 0 1
4953: PUSH
4954: LD_INT 22
4956: PUSH
4957: LD_VAR 0 1
4961: PPUSH
4962: CALL_OW 255
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 58
4973: PUSH
4974: EMPTY
4975: LIST
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PPUSH
4981: CALL_OW 69
4985: IN
4986: ST_TO_ADDR
// end ;
4987: LD_VAR 0 2
4991: RET
// export function IsNotFull ( building ) ; var places ; begin
4992: LD_INT 0
4994: PPUSH
4995: PPUSH
// if not building then
4996: LD_VAR 0 1
5000: NOT
5001: IFFALSE 5005
// exit ;
5003: GO 5033
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5005: LD_ADDR_VAR 0 2
5009: PUSH
5010: LD_VAR 0 1
5014: PPUSH
5015: LD_INT 3
5017: PUSH
5018: LD_INT 62
5020: PUSH
5021: EMPTY
5022: LIST
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PPUSH
5028: CALL_OW 72
5032: ST_TO_ADDR
// end ;
5033: LD_VAR 0 2
5037: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5038: LD_INT 0
5040: PPUSH
5041: PPUSH
5042: PPUSH
5043: PPUSH
// tmp := [ ] ;
5044: LD_ADDR_VAR 0 3
5048: PUSH
5049: EMPTY
5050: ST_TO_ADDR
// list := [ ] ;
5051: LD_ADDR_VAR 0 5
5055: PUSH
5056: EMPTY
5057: ST_TO_ADDR
// for i = 16 to 25 do
5058: LD_ADDR_VAR 0 4
5062: PUSH
5063: DOUBLE
5064: LD_INT 16
5066: DEC
5067: ST_TO_ADDR
5068: LD_INT 25
5070: PUSH
5071: FOR_TO
5072: IFFALSE 5145
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5074: LD_ADDR_VAR 0 3
5078: PUSH
5079: LD_VAR 0 3
5083: PUSH
5084: LD_INT 22
5086: PUSH
5087: LD_VAR 0 1
5091: PPUSH
5092: CALL_OW 255
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: LD_INT 91
5103: PUSH
5104: LD_VAR 0 1
5108: PUSH
5109: LD_INT 6
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: PUSH
5117: LD_INT 30
5119: PUSH
5120: LD_VAR 0 4
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: LIST
5133: PUSH
5134: EMPTY
5135: LIST
5136: PPUSH
5137: CALL_OW 69
5141: ADD
5142: ST_TO_ADDR
5143: GO 5071
5145: POP
5146: POP
// for i = 1 to tmp do
5147: LD_ADDR_VAR 0 4
5151: PUSH
5152: DOUBLE
5153: LD_INT 1
5155: DEC
5156: ST_TO_ADDR
5157: LD_VAR 0 3
5161: PUSH
5162: FOR_TO
5163: IFFALSE 5251
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5165: LD_ADDR_VAR 0 5
5169: PUSH
5170: LD_VAR 0 5
5174: PUSH
5175: LD_VAR 0 3
5179: PUSH
5180: LD_VAR 0 4
5184: ARRAY
5185: PPUSH
5186: CALL_OW 266
5190: PUSH
5191: LD_VAR 0 3
5195: PUSH
5196: LD_VAR 0 4
5200: ARRAY
5201: PPUSH
5202: CALL_OW 250
5206: PUSH
5207: LD_VAR 0 3
5211: PUSH
5212: LD_VAR 0 4
5216: ARRAY
5217: PPUSH
5218: CALL_OW 251
5222: PUSH
5223: LD_VAR 0 3
5227: PUSH
5228: LD_VAR 0 4
5232: ARRAY
5233: PPUSH
5234: CALL_OW 254
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: PUSH
5245: EMPTY
5246: LIST
5247: ADD
5248: ST_TO_ADDR
5249: GO 5162
5251: POP
5252: POP
// result := list ;
5253: LD_ADDR_VAR 0 2
5257: PUSH
5258: LD_VAR 0 5
5262: ST_TO_ADDR
// end ;
5263: LD_VAR 0 2
5267: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5268: LD_INT 0
5270: PPUSH
5271: PPUSH
5272: PPUSH
5273: PPUSH
5274: PPUSH
5275: PPUSH
5276: PPUSH
// if not factory then
5277: LD_VAR 0 1
5281: NOT
5282: IFFALSE 5286
// exit ;
5284: GO 5879
// if control = control_apeman then
5286: LD_VAR 0 4
5290: PUSH
5291: LD_INT 5
5293: EQUAL
5294: IFFALSE 5403
// begin tmp := UnitsInside ( factory ) ;
5296: LD_ADDR_VAR 0 8
5300: PUSH
5301: LD_VAR 0 1
5305: PPUSH
5306: CALL_OW 313
5310: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5311: LD_VAR 0 8
5315: PPUSH
5316: LD_INT 25
5318: PUSH
5319: LD_INT 12
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: PPUSH
5326: CALL_OW 72
5330: NOT
5331: IFFALSE 5341
// control := control_manual ;
5333: LD_ADDR_VAR 0 4
5337: PUSH
5338: LD_INT 1
5340: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5341: LD_ADDR_VAR 0 8
5345: PUSH
5346: LD_VAR 0 1
5350: PPUSH
5351: CALL 5038 0 1
5355: ST_TO_ADDR
// if tmp then
5356: LD_VAR 0 8
5360: IFFALSE 5403
// begin for i in tmp do
5362: LD_ADDR_VAR 0 7
5366: PUSH
5367: LD_VAR 0 8
5371: PUSH
5372: FOR_IN
5373: IFFALSE 5401
// if i [ 1 ] = b_ext_radio then
5375: LD_VAR 0 7
5379: PUSH
5380: LD_INT 1
5382: ARRAY
5383: PUSH
5384: LD_INT 22
5386: EQUAL
5387: IFFALSE 5399
// begin control := control_remote ;
5389: LD_ADDR_VAR 0 4
5393: PUSH
5394: LD_INT 2
5396: ST_TO_ADDR
// break ;
5397: GO 5401
// end ;
5399: GO 5372
5401: POP
5402: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5403: LD_VAR 0 1
5407: PPUSH
5408: LD_VAR 0 2
5412: PPUSH
5413: LD_VAR 0 3
5417: PPUSH
5418: LD_VAR 0 4
5422: PPUSH
5423: LD_VAR 0 5
5427: PPUSH
5428: CALL_OW 448
5432: IFFALSE 5467
// begin result := [ chassis , engine , control , weapon ] ;
5434: LD_ADDR_VAR 0 6
5438: PUSH
5439: LD_VAR 0 2
5443: PUSH
5444: LD_VAR 0 3
5448: PUSH
5449: LD_VAR 0 4
5453: PUSH
5454: LD_VAR 0 5
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: ST_TO_ADDR
// exit ;
5465: GO 5879
// end ; _chassis := AvailableChassisList ( factory ) ;
5467: LD_ADDR_VAR 0 9
5471: PUSH
5472: LD_VAR 0 1
5476: PPUSH
5477: CALL_OW 475
5481: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5482: LD_ADDR_VAR 0 11
5486: PUSH
5487: LD_VAR 0 1
5491: PPUSH
5492: CALL_OW 476
5496: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5497: LD_ADDR_VAR 0 12
5501: PUSH
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 477
5511: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5512: LD_ADDR_VAR 0 10
5516: PUSH
5517: LD_VAR 0 1
5521: PPUSH
5522: CALL_OW 478
5526: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5527: LD_VAR 0 9
5531: NOT
5532: PUSH
5533: LD_VAR 0 11
5537: NOT
5538: OR
5539: PUSH
5540: LD_VAR 0 12
5544: NOT
5545: OR
5546: PUSH
5547: LD_VAR 0 10
5551: NOT
5552: OR
5553: IFFALSE 5588
// begin result := [ chassis , engine , control , weapon ] ;
5555: LD_ADDR_VAR 0 6
5559: PUSH
5560: LD_VAR 0 2
5564: PUSH
5565: LD_VAR 0 3
5569: PUSH
5570: LD_VAR 0 4
5574: PUSH
5575: LD_VAR 0 5
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: ST_TO_ADDR
// exit ;
5586: GO 5879
// end ; if not chassis in _chassis then
5588: LD_VAR 0 2
5592: PUSH
5593: LD_VAR 0 9
5597: IN
5598: NOT
5599: IFFALSE 5625
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5601: LD_ADDR_VAR 0 2
5605: PUSH
5606: LD_VAR 0 9
5610: PUSH
5611: LD_INT 1
5613: PPUSH
5614: LD_VAR 0 9
5618: PPUSH
5619: CALL_OW 12
5623: ARRAY
5624: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5625: LD_VAR 0 2
5629: PPUSH
5630: LD_VAR 0 3
5634: PPUSH
5635: CALL 5884 0 2
5639: NOT
5640: IFFALSE 5699
// repeat engine := _engine [ 1 ] ;
5642: LD_ADDR_VAR 0 3
5646: PUSH
5647: LD_VAR 0 11
5651: PUSH
5652: LD_INT 1
5654: ARRAY
5655: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5656: LD_ADDR_VAR 0 11
5660: PUSH
5661: LD_VAR 0 11
5665: PPUSH
5666: LD_INT 1
5668: PPUSH
5669: CALL_OW 3
5673: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5674: LD_VAR 0 2
5678: PPUSH
5679: LD_VAR 0 3
5683: PPUSH
5684: CALL 5884 0 2
5688: PUSH
5689: LD_VAR 0 11
5693: PUSH
5694: EMPTY
5695: EQUAL
5696: OR
5697: IFFALSE 5642
// if not control in _control then
5699: LD_VAR 0 4
5703: PUSH
5704: LD_VAR 0 12
5708: IN
5709: NOT
5710: IFFALSE 5736
// control := _control [ rand ( 1 , _control ) ] ;
5712: LD_ADDR_VAR 0 4
5716: PUSH
5717: LD_VAR 0 12
5721: PUSH
5722: LD_INT 1
5724: PPUSH
5725: LD_VAR 0 12
5729: PPUSH
5730: CALL_OW 12
5734: ARRAY
5735: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5736: LD_VAR 0 2
5740: PPUSH
5741: LD_VAR 0 5
5745: PPUSH
5746: CALL 6104 0 2
5750: NOT
5751: IFFALSE 5810
// repeat weapon := _weapon [ 1 ] ;
5753: LD_ADDR_VAR 0 5
5757: PUSH
5758: LD_VAR 0 10
5762: PUSH
5763: LD_INT 1
5765: ARRAY
5766: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5767: LD_ADDR_VAR 0 10
5771: PUSH
5772: LD_VAR 0 10
5776: PPUSH
5777: LD_INT 1
5779: PPUSH
5780: CALL_OW 3
5784: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5785: LD_VAR 0 2
5789: PPUSH
5790: LD_VAR 0 5
5794: PPUSH
5795: CALL 6104 0 2
5799: PUSH
5800: LD_VAR 0 10
5804: PUSH
5805: EMPTY
5806: EQUAL
5807: OR
5808: IFFALSE 5753
// result := [ ] ;
5810: LD_ADDR_VAR 0 6
5814: PUSH
5815: EMPTY
5816: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5817: LD_VAR 0 1
5821: PPUSH
5822: LD_VAR 0 2
5826: PPUSH
5827: LD_VAR 0 3
5831: PPUSH
5832: LD_VAR 0 4
5836: PPUSH
5837: LD_VAR 0 5
5841: PPUSH
5842: CALL_OW 448
5846: IFFALSE 5879
// result := [ chassis , engine , control , weapon ] ;
5848: LD_ADDR_VAR 0 6
5852: PUSH
5853: LD_VAR 0 2
5857: PUSH
5858: LD_VAR 0 3
5862: PUSH
5863: LD_VAR 0 4
5867: PUSH
5868: LD_VAR 0 5
5872: PUSH
5873: EMPTY
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: ST_TO_ADDR
// end ;
5879: LD_VAR 0 6
5883: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5884: LD_INT 0
5886: PPUSH
// if not chassis or not engine then
5887: LD_VAR 0 1
5891: NOT
5892: PUSH
5893: LD_VAR 0 2
5897: NOT
5898: OR
5899: IFFALSE 5903
// exit ;
5901: GO 6099
// case engine of engine_solar :
5903: LD_VAR 0 2
5907: PUSH
5908: LD_INT 2
5910: DOUBLE
5911: EQUAL
5912: IFTRUE 5916
5914: GO 5954
5916: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5917: LD_ADDR_VAR 0 3
5921: PUSH
5922: LD_INT 11
5924: PUSH
5925: LD_INT 12
5927: PUSH
5928: LD_INT 13
5930: PUSH
5931: LD_INT 14
5933: PUSH
5934: LD_INT 1
5936: PUSH
5937: LD_INT 2
5939: PUSH
5940: LD_INT 3
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: ST_TO_ADDR
5952: GO 6083
5954: LD_INT 1
5956: DOUBLE
5957: EQUAL
5958: IFTRUE 5962
5960: GO 6024
5962: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_INT 11
5970: PUSH
5971: LD_INT 12
5973: PUSH
5974: LD_INT 13
5976: PUSH
5977: LD_INT 14
5979: PUSH
5980: LD_INT 1
5982: PUSH
5983: LD_INT 2
5985: PUSH
5986: LD_INT 3
5988: PUSH
5989: LD_INT 4
5991: PUSH
5992: LD_INT 5
5994: PUSH
5995: LD_INT 21
5997: PUSH
5998: LD_INT 23
6000: PUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 24
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: ST_TO_ADDR
6022: GO 6083
6024: LD_INT 3
6026: DOUBLE
6027: EQUAL
6028: IFTRUE 6032
6030: GO 6082
6032: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6033: LD_ADDR_VAR 0 3
6037: PUSH
6038: LD_INT 13
6040: PUSH
6041: LD_INT 14
6043: PUSH
6044: LD_INT 2
6046: PUSH
6047: LD_INT 3
6049: PUSH
6050: LD_INT 4
6052: PUSH
6053: LD_INT 5
6055: PUSH
6056: LD_INT 21
6058: PUSH
6059: LD_INT 22
6061: PUSH
6062: LD_INT 23
6064: PUSH
6065: LD_INT 24
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: ST_TO_ADDR
6080: GO 6083
6082: POP
// result := ( chassis in result ) ;
6083: LD_ADDR_VAR 0 3
6087: PUSH
6088: LD_VAR 0 1
6092: PUSH
6093: LD_VAR 0 3
6097: IN
6098: ST_TO_ADDR
// end ;
6099: LD_VAR 0 3
6103: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6104: LD_INT 0
6106: PPUSH
// if not chassis or not weapon then
6107: LD_VAR 0 1
6111: NOT
6112: PUSH
6113: LD_VAR 0 2
6117: NOT
6118: OR
6119: IFFALSE 6123
// exit ;
6121: GO 7183
// case weapon of us_machine_gun :
6123: LD_VAR 0 2
6127: PUSH
6128: LD_INT 2
6130: DOUBLE
6131: EQUAL
6132: IFTRUE 6136
6134: GO 6166
6136: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6137: LD_ADDR_VAR 0 3
6141: PUSH
6142: LD_INT 1
6144: PUSH
6145: LD_INT 2
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: LD_INT 4
6153: PUSH
6154: LD_INT 5
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: ST_TO_ADDR
6164: GO 7167
6166: LD_INT 3
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6204
6174: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6175: LD_ADDR_VAR 0 3
6179: PUSH
6180: LD_INT 1
6182: PUSH
6183: LD_INT 2
6185: PUSH
6186: LD_INT 3
6188: PUSH
6189: LD_INT 4
6191: PUSH
6192: LD_INT 5
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: ST_TO_ADDR
6202: GO 7167
6204: LD_INT 11
6206: DOUBLE
6207: EQUAL
6208: IFTRUE 6212
6210: GO 6242
6212: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6213: LD_ADDR_VAR 0 3
6217: PUSH
6218: LD_INT 1
6220: PUSH
6221: LD_INT 2
6223: PUSH
6224: LD_INT 3
6226: PUSH
6227: LD_INT 4
6229: PUSH
6230: LD_INT 5
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: ST_TO_ADDR
6240: GO 7167
6242: LD_INT 4
6244: DOUBLE
6245: EQUAL
6246: IFTRUE 6250
6248: GO 6276
6250: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6251: LD_ADDR_VAR 0 3
6255: PUSH
6256: LD_INT 2
6258: PUSH
6259: LD_INT 3
6261: PUSH
6262: LD_INT 4
6264: PUSH
6265: LD_INT 5
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: ST_TO_ADDR
6274: GO 7167
6276: LD_INT 5
6278: DOUBLE
6279: EQUAL
6280: IFTRUE 6284
6282: GO 6310
6284: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6285: LD_ADDR_VAR 0 3
6289: PUSH
6290: LD_INT 2
6292: PUSH
6293: LD_INT 3
6295: PUSH
6296: LD_INT 4
6298: PUSH
6299: LD_INT 5
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: ST_TO_ADDR
6308: GO 7167
6310: LD_INT 9
6312: DOUBLE
6313: EQUAL
6314: IFTRUE 6318
6316: GO 6344
6318: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6319: LD_ADDR_VAR 0 3
6323: PUSH
6324: LD_INT 2
6326: PUSH
6327: LD_INT 3
6329: PUSH
6330: LD_INT 4
6332: PUSH
6333: LD_INT 5
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: ST_TO_ADDR
6342: GO 7167
6344: LD_INT 7
6346: DOUBLE
6347: EQUAL
6348: IFTRUE 6352
6350: GO 6378
6352: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6353: LD_ADDR_VAR 0 3
6357: PUSH
6358: LD_INT 2
6360: PUSH
6361: LD_INT 3
6363: PUSH
6364: LD_INT 4
6366: PUSH
6367: LD_INT 5
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: ST_TO_ADDR
6376: GO 7167
6378: LD_INT 12
6380: DOUBLE
6381: EQUAL
6382: IFTRUE 6386
6384: GO 6412
6386: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6387: LD_ADDR_VAR 0 3
6391: PUSH
6392: LD_INT 2
6394: PUSH
6395: LD_INT 3
6397: PUSH
6398: LD_INT 4
6400: PUSH
6401: LD_INT 5
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: ST_TO_ADDR
6410: GO 7167
6412: LD_INT 13
6414: DOUBLE
6415: EQUAL
6416: IFTRUE 6420
6418: GO 6446
6420: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6421: LD_ADDR_VAR 0 3
6425: PUSH
6426: LD_INT 2
6428: PUSH
6429: LD_INT 3
6431: PUSH
6432: LD_INT 4
6434: PUSH
6435: LD_INT 5
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: ST_TO_ADDR
6444: GO 7167
6446: LD_INT 14
6448: DOUBLE
6449: EQUAL
6450: IFTRUE 6454
6452: GO 6472
6454: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6455: LD_ADDR_VAR 0 3
6459: PUSH
6460: LD_INT 4
6462: PUSH
6463: LD_INT 5
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: ST_TO_ADDR
6470: GO 7167
6472: LD_INT 6
6474: DOUBLE
6475: EQUAL
6476: IFTRUE 6480
6478: GO 6498
6480: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6481: LD_ADDR_VAR 0 3
6485: PUSH
6486: LD_INT 4
6488: PUSH
6489: LD_INT 5
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: ST_TO_ADDR
6496: GO 7167
6498: LD_INT 10
6500: DOUBLE
6501: EQUAL
6502: IFTRUE 6506
6504: GO 6524
6506: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6507: LD_ADDR_VAR 0 3
6511: PUSH
6512: LD_INT 4
6514: PUSH
6515: LD_INT 5
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: ST_TO_ADDR
6522: GO 7167
6524: LD_INT 22
6526: DOUBLE
6527: EQUAL
6528: IFTRUE 6532
6530: GO 6558
6532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6533: LD_ADDR_VAR 0 3
6537: PUSH
6538: LD_INT 11
6540: PUSH
6541: LD_INT 12
6543: PUSH
6544: LD_INT 13
6546: PUSH
6547: LD_INT 14
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: ST_TO_ADDR
6556: GO 7167
6558: LD_INT 23
6560: DOUBLE
6561: EQUAL
6562: IFTRUE 6566
6564: GO 6592
6566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: LD_INT 11
6574: PUSH
6575: LD_INT 12
6577: PUSH
6578: LD_INT 13
6580: PUSH
6581: LD_INT 14
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: ST_TO_ADDR
6590: GO 7167
6592: LD_INT 24
6594: DOUBLE
6595: EQUAL
6596: IFTRUE 6600
6598: GO 6626
6600: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6601: LD_ADDR_VAR 0 3
6605: PUSH
6606: LD_INT 11
6608: PUSH
6609: LD_INT 12
6611: PUSH
6612: LD_INT 13
6614: PUSH
6615: LD_INT 14
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: ST_TO_ADDR
6624: GO 7167
6626: LD_INT 30
6628: DOUBLE
6629: EQUAL
6630: IFTRUE 6634
6632: GO 6660
6634: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6635: LD_ADDR_VAR 0 3
6639: PUSH
6640: LD_INT 11
6642: PUSH
6643: LD_INT 12
6645: PUSH
6646: LD_INT 13
6648: PUSH
6649: LD_INT 14
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: ST_TO_ADDR
6658: GO 7167
6660: LD_INT 25
6662: DOUBLE
6663: EQUAL
6664: IFTRUE 6668
6666: GO 6686
6668: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6669: LD_ADDR_VAR 0 3
6673: PUSH
6674: LD_INT 13
6676: PUSH
6677: LD_INT 14
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: ST_TO_ADDR
6684: GO 7167
6686: LD_INT 27
6688: DOUBLE
6689: EQUAL
6690: IFTRUE 6694
6692: GO 6712
6694: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6695: LD_ADDR_VAR 0 3
6699: PUSH
6700: LD_INT 13
6702: PUSH
6703: LD_INT 14
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: ST_TO_ADDR
6710: GO 7167
6712: LD_INT 92
6714: DOUBLE
6715: EQUAL
6716: IFTRUE 6720
6718: GO 6746
6720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6721: LD_ADDR_VAR 0 3
6725: PUSH
6726: LD_INT 11
6728: PUSH
6729: LD_INT 12
6731: PUSH
6732: LD_INT 13
6734: PUSH
6735: LD_INT 14
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: ST_TO_ADDR
6744: GO 7167
6746: LD_INT 28
6748: DOUBLE
6749: EQUAL
6750: IFTRUE 6754
6752: GO 6772
6754: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6755: LD_ADDR_VAR 0 3
6759: PUSH
6760: LD_INT 13
6762: PUSH
6763: LD_INT 14
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: ST_TO_ADDR
6770: GO 7167
6772: LD_INT 29
6774: DOUBLE
6775: EQUAL
6776: IFTRUE 6780
6778: GO 6798
6780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6781: LD_ADDR_VAR 0 3
6785: PUSH
6786: LD_INT 13
6788: PUSH
6789: LD_INT 14
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: ST_TO_ADDR
6796: GO 7167
6798: LD_INT 31
6800: DOUBLE
6801: EQUAL
6802: IFTRUE 6806
6804: GO 6824
6806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6807: LD_ADDR_VAR 0 3
6811: PUSH
6812: LD_INT 13
6814: PUSH
6815: LD_INT 14
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: ST_TO_ADDR
6822: GO 7167
6824: LD_INT 26
6826: DOUBLE
6827: EQUAL
6828: IFTRUE 6832
6830: GO 6850
6832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6833: LD_ADDR_VAR 0 3
6837: PUSH
6838: LD_INT 13
6840: PUSH
6841: LD_INT 14
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: ST_TO_ADDR
6848: GO 7167
6850: LD_INT 42
6852: DOUBLE
6853: EQUAL
6854: IFTRUE 6858
6856: GO 6884
6858: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6859: LD_ADDR_VAR 0 3
6863: PUSH
6864: LD_INT 21
6866: PUSH
6867: LD_INT 22
6869: PUSH
6870: LD_INT 23
6872: PUSH
6873: LD_INT 24
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: ST_TO_ADDR
6882: GO 7167
6884: LD_INT 43
6886: DOUBLE
6887: EQUAL
6888: IFTRUE 6892
6890: GO 6918
6892: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6893: LD_ADDR_VAR 0 3
6897: PUSH
6898: LD_INT 21
6900: PUSH
6901: LD_INT 22
6903: PUSH
6904: LD_INT 23
6906: PUSH
6907: LD_INT 24
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: ST_TO_ADDR
6916: GO 7167
6918: LD_INT 44
6920: DOUBLE
6921: EQUAL
6922: IFTRUE 6926
6924: GO 6952
6926: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6927: LD_ADDR_VAR 0 3
6931: PUSH
6932: LD_INT 21
6934: PUSH
6935: LD_INT 22
6937: PUSH
6938: LD_INT 23
6940: PUSH
6941: LD_INT 24
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: ST_TO_ADDR
6950: GO 7167
6952: LD_INT 45
6954: DOUBLE
6955: EQUAL
6956: IFTRUE 6960
6958: GO 6986
6960: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6961: LD_ADDR_VAR 0 3
6965: PUSH
6966: LD_INT 21
6968: PUSH
6969: LD_INT 22
6971: PUSH
6972: LD_INT 23
6974: PUSH
6975: LD_INT 24
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: ST_TO_ADDR
6984: GO 7167
6986: LD_INT 49
6988: DOUBLE
6989: EQUAL
6990: IFTRUE 6994
6992: GO 7020
6994: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6995: LD_ADDR_VAR 0 3
6999: PUSH
7000: LD_INT 21
7002: PUSH
7003: LD_INT 22
7005: PUSH
7006: LD_INT 23
7008: PUSH
7009: LD_INT 24
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: ST_TO_ADDR
7018: GO 7167
7020: LD_INT 51
7022: DOUBLE
7023: EQUAL
7024: IFTRUE 7028
7026: GO 7054
7028: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7029: LD_ADDR_VAR 0 3
7033: PUSH
7034: LD_INT 21
7036: PUSH
7037: LD_INT 22
7039: PUSH
7040: LD_INT 23
7042: PUSH
7043: LD_INT 24
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: ST_TO_ADDR
7052: GO 7167
7054: LD_INT 52
7056: DOUBLE
7057: EQUAL
7058: IFTRUE 7062
7060: GO 7088
7062: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7063: LD_ADDR_VAR 0 3
7067: PUSH
7068: LD_INT 21
7070: PUSH
7071: LD_INT 22
7073: PUSH
7074: LD_INT 23
7076: PUSH
7077: LD_INT 24
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: ST_TO_ADDR
7086: GO 7167
7088: LD_INT 53
7090: DOUBLE
7091: EQUAL
7092: IFTRUE 7096
7094: GO 7114
7096: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7097: LD_ADDR_VAR 0 3
7101: PUSH
7102: LD_INT 23
7104: PUSH
7105: LD_INT 24
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: ST_TO_ADDR
7112: GO 7167
7114: LD_INT 46
7116: DOUBLE
7117: EQUAL
7118: IFTRUE 7122
7120: GO 7140
7122: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7123: LD_ADDR_VAR 0 3
7127: PUSH
7128: LD_INT 23
7130: PUSH
7131: LD_INT 24
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: ST_TO_ADDR
7138: GO 7167
7140: LD_INT 47
7142: DOUBLE
7143: EQUAL
7144: IFTRUE 7148
7146: GO 7166
7148: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7149: LD_ADDR_VAR 0 3
7153: PUSH
7154: LD_INT 23
7156: PUSH
7157: LD_INT 24
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: ST_TO_ADDR
7164: GO 7167
7166: POP
// result := ( chassis in result ) ;
7167: LD_ADDR_VAR 0 3
7171: PUSH
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 3
7181: IN
7182: ST_TO_ADDR
// end ;
7183: LD_VAR 0 3
7187: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7188: LD_INT 0
7190: PPUSH
7191: PPUSH
7192: PPUSH
7193: PPUSH
7194: PPUSH
7195: PPUSH
7196: PPUSH
// result := array ;
7197: LD_ADDR_VAR 0 5
7201: PUSH
7202: LD_VAR 0 1
7206: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7207: LD_VAR 0 1
7211: NOT
7212: PUSH
7213: LD_VAR 0 2
7217: NOT
7218: OR
7219: PUSH
7220: LD_VAR 0 3
7224: NOT
7225: OR
7226: PUSH
7227: LD_VAR 0 2
7231: PUSH
7232: LD_VAR 0 1
7236: GREATER
7237: OR
7238: PUSH
7239: LD_VAR 0 3
7243: PUSH
7244: LD_VAR 0 1
7248: GREATER
7249: OR
7250: IFFALSE 7254
// exit ;
7252: GO 7550
// if direction then
7254: LD_VAR 0 4
7258: IFFALSE 7322
// begin d := 1 ;
7260: LD_ADDR_VAR 0 9
7264: PUSH
7265: LD_INT 1
7267: ST_TO_ADDR
// if i_from > i_to then
7268: LD_VAR 0 2
7272: PUSH
7273: LD_VAR 0 3
7277: GREATER
7278: IFFALSE 7304
// length := ( array - i_from ) + i_to else
7280: LD_ADDR_VAR 0 11
7284: PUSH
7285: LD_VAR 0 1
7289: PUSH
7290: LD_VAR 0 2
7294: MINUS
7295: PUSH
7296: LD_VAR 0 3
7300: PLUS
7301: ST_TO_ADDR
7302: GO 7320
// length := i_to - i_from ;
7304: LD_ADDR_VAR 0 11
7308: PUSH
7309: LD_VAR 0 3
7313: PUSH
7314: LD_VAR 0 2
7318: MINUS
7319: ST_TO_ADDR
// end else
7320: GO 7383
// begin d := - 1 ;
7322: LD_ADDR_VAR 0 9
7326: PUSH
7327: LD_INT 1
7329: NEG
7330: ST_TO_ADDR
// if i_from > i_to then
7331: LD_VAR 0 2
7335: PUSH
7336: LD_VAR 0 3
7340: GREATER
7341: IFFALSE 7361
// length := i_from - i_to else
7343: LD_ADDR_VAR 0 11
7347: PUSH
7348: LD_VAR 0 2
7352: PUSH
7353: LD_VAR 0 3
7357: MINUS
7358: ST_TO_ADDR
7359: GO 7383
// length := ( array - i_to ) + i_from ;
7361: LD_ADDR_VAR 0 11
7365: PUSH
7366: LD_VAR 0 1
7370: PUSH
7371: LD_VAR 0 3
7375: MINUS
7376: PUSH
7377: LD_VAR 0 2
7381: PLUS
7382: ST_TO_ADDR
// end ; if not length then
7383: LD_VAR 0 11
7387: NOT
7388: IFFALSE 7392
// exit ;
7390: GO 7550
// tmp := array ;
7392: LD_ADDR_VAR 0 10
7396: PUSH
7397: LD_VAR 0 1
7401: ST_TO_ADDR
// for i = 1 to length do
7402: LD_ADDR_VAR 0 6
7406: PUSH
7407: DOUBLE
7408: LD_INT 1
7410: DEC
7411: ST_TO_ADDR
7412: LD_VAR 0 11
7416: PUSH
7417: FOR_TO
7418: IFFALSE 7538
// begin for j = 1 to array do
7420: LD_ADDR_VAR 0 7
7424: PUSH
7425: DOUBLE
7426: LD_INT 1
7428: DEC
7429: ST_TO_ADDR
7430: LD_VAR 0 1
7434: PUSH
7435: FOR_TO
7436: IFFALSE 7524
// begin k := j + d ;
7438: LD_ADDR_VAR 0 8
7442: PUSH
7443: LD_VAR 0 7
7447: PUSH
7448: LD_VAR 0 9
7452: PLUS
7453: ST_TO_ADDR
// if k > array then
7454: LD_VAR 0 8
7458: PUSH
7459: LD_VAR 0 1
7463: GREATER
7464: IFFALSE 7474
// k := 1 ;
7466: LD_ADDR_VAR 0 8
7470: PUSH
7471: LD_INT 1
7473: ST_TO_ADDR
// if not k then
7474: LD_VAR 0 8
7478: NOT
7479: IFFALSE 7491
// k := array ;
7481: LD_ADDR_VAR 0 8
7485: PUSH
7486: LD_VAR 0 1
7490: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7491: LD_ADDR_VAR 0 10
7495: PUSH
7496: LD_VAR 0 10
7500: PPUSH
7501: LD_VAR 0 8
7505: PPUSH
7506: LD_VAR 0 1
7510: PUSH
7511: LD_VAR 0 7
7515: ARRAY
7516: PPUSH
7517: CALL_OW 1
7521: ST_TO_ADDR
// end ;
7522: GO 7435
7524: POP
7525: POP
// array := tmp ;
7526: LD_ADDR_VAR 0 1
7530: PUSH
7531: LD_VAR 0 10
7535: ST_TO_ADDR
// end ;
7536: GO 7417
7538: POP
7539: POP
// result := array ;
7540: LD_ADDR_VAR 0 5
7544: PUSH
7545: LD_VAR 0 1
7549: ST_TO_ADDR
// end ;
7550: LD_VAR 0 5
7554: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7555: LD_INT 0
7557: PPUSH
7558: PPUSH
// result := 0 ;
7559: LD_ADDR_VAR 0 3
7563: PUSH
7564: LD_INT 0
7566: ST_TO_ADDR
// if not array or not value in array then
7567: LD_VAR 0 1
7571: NOT
7572: PUSH
7573: LD_VAR 0 2
7577: PUSH
7578: LD_VAR 0 1
7582: IN
7583: NOT
7584: OR
7585: IFFALSE 7589
// exit ;
7587: GO 7643
// for i = 1 to array do
7589: LD_ADDR_VAR 0 4
7593: PUSH
7594: DOUBLE
7595: LD_INT 1
7597: DEC
7598: ST_TO_ADDR
7599: LD_VAR 0 1
7603: PUSH
7604: FOR_TO
7605: IFFALSE 7641
// if value = array [ i ] then
7607: LD_VAR 0 2
7611: PUSH
7612: LD_VAR 0 1
7616: PUSH
7617: LD_VAR 0 4
7621: ARRAY
7622: EQUAL
7623: IFFALSE 7639
// begin result := i ;
7625: LD_ADDR_VAR 0 3
7629: PUSH
7630: LD_VAR 0 4
7634: ST_TO_ADDR
// exit ;
7635: POP
7636: POP
7637: GO 7643
// end ;
7639: GO 7604
7641: POP
7642: POP
// end ;
7643: LD_VAR 0 3
7647: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7648: LD_INT 0
7650: PPUSH
// vc_chassis := chassis ;
7651: LD_ADDR_OWVAR 37
7655: PUSH
7656: LD_VAR 0 1
7660: ST_TO_ADDR
// vc_engine := engine ;
7661: LD_ADDR_OWVAR 39
7665: PUSH
7666: LD_VAR 0 2
7670: ST_TO_ADDR
// vc_control := control ;
7671: LD_ADDR_OWVAR 38
7675: PUSH
7676: LD_VAR 0 3
7680: ST_TO_ADDR
// vc_weapon := weapon ;
7681: LD_ADDR_OWVAR 40
7685: PUSH
7686: LD_VAR 0 4
7690: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7691: LD_ADDR_OWVAR 41
7695: PUSH
7696: LD_VAR 0 5
7700: ST_TO_ADDR
// end ;
7701: LD_VAR 0 6
7705: RET
// export function WantPlant ( unit ) ; var task ; begin
7706: LD_INT 0
7708: PPUSH
7709: PPUSH
// result := false ;
7710: LD_ADDR_VAR 0 2
7714: PUSH
7715: LD_INT 0
7717: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7718: LD_ADDR_VAR 0 3
7722: PUSH
7723: LD_VAR 0 1
7727: PPUSH
7728: CALL_OW 437
7732: ST_TO_ADDR
// if task then
7733: LD_VAR 0 3
7737: IFFALSE 7765
// if task [ 1 ] [ 1 ] = p then
7739: LD_VAR 0 3
7743: PUSH
7744: LD_INT 1
7746: ARRAY
7747: PUSH
7748: LD_INT 1
7750: ARRAY
7751: PUSH
7752: LD_STRING p
7754: EQUAL
7755: IFFALSE 7765
// result := true ;
7757: LD_ADDR_VAR 0 2
7761: PUSH
7762: LD_INT 1
7764: ST_TO_ADDR
// end ;
7765: LD_VAR 0 2
7769: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7770: LD_INT 0
7772: PPUSH
7773: PPUSH
7774: PPUSH
7775: PPUSH
// if pos < 1 then
7776: LD_VAR 0 2
7780: PUSH
7781: LD_INT 1
7783: LESS
7784: IFFALSE 7788
// exit ;
7786: GO 8091
// if pos = 1 then
7788: LD_VAR 0 2
7792: PUSH
7793: LD_INT 1
7795: EQUAL
7796: IFFALSE 7829
// result := Replace ( arr , pos [ 1 ] , value ) else
7798: LD_ADDR_VAR 0 4
7802: PUSH
7803: LD_VAR 0 1
7807: PPUSH
7808: LD_VAR 0 2
7812: PUSH
7813: LD_INT 1
7815: ARRAY
7816: PPUSH
7817: LD_VAR 0 3
7821: PPUSH
7822: CALL_OW 1
7826: ST_TO_ADDR
7827: GO 8091
// begin tmp := arr ;
7829: LD_ADDR_VAR 0 6
7833: PUSH
7834: LD_VAR 0 1
7838: ST_TO_ADDR
// s_arr := [ tmp ] ;
7839: LD_ADDR_VAR 0 7
7843: PUSH
7844: LD_VAR 0 6
7848: PUSH
7849: EMPTY
7850: LIST
7851: ST_TO_ADDR
// for i = 1 to pos - 1 do
7852: LD_ADDR_VAR 0 5
7856: PUSH
7857: DOUBLE
7858: LD_INT 1
7860: DEC
7861: ST_TO_ADDR
7862: LD_VAR 0 2
7866: PUSH
7867: LD_INT 1
7869: MINUS
7870: PUSH
7871: FOR_TO
7872: IFFALSE 7917
// begin tmp := tmp [ pos [ i ] ] ;
7874: LD_ADDR_VAR 0 6
7878: PUSH
7879: LD_VAR 0 6
7883: PUSH
7884: LD_VAR 0 2
7888: PUSH
7889: LD_VAR 0 5
7893: ARRAY
7894: ARRAY
7895: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7896: LD_ADDR_VAR 0 7
7900: PUSH
7901: LD_VAR 0 7
7905: PUSH
7906: LD_VAR 0 6
7910: PUSH
7911: EMPTY
7912: LIST
7913: ADD
7914: ST_TO_ADDR
// end ;
7915: GO 7871
7917: POP
7918: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7919: LD_ADDR_VAR 0 6
7923: PUSH
7924: LD_VAR 0 6
7928: PPUSH
7929: LD_VAR 0 2
7933: PUSH
7934: LD_VAR 0 2
7938: ARRAY
7939: PPUSH
7940: LD_VAR 0 3
7944: PPUSH
7945: CALL_OW 1
7949: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7950: LD_ADDR_VAR 0 7
7954: PUSH
7955: LD_VAR 0 7
7959: PPUSH
7960: LD_VAR 0 7
7964: PPUSH
7965: LD_VAR 0 6
7969: PPUSH
7970: CALL_OW 1
7974: ST_TO_ADDR
// for i = s_arr downto 2 do
7975: LD_ADDR_VAR 0 5
7979: PUSH
7980: DOUBLE
7981: LD_VAR 0 7
7985: INC
7986: ST_TO_ADDR
7987: LD_INT 2
7989: PUSH
7990: FOR_DOWNTO
7991: IFFALSE 8075
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7993: LD_ADDR_VAR 0 6
7997: PUSH
7998: LD_VAR 0 7
8002: PUSH
8003: LD_VAR 0 5
8007: PUSH
8008: LD_INT 1
8010: MINUS
8011: ARRAY
8012: PPUSH
8013: LD_VAR 0 2
8017: PUSH
8018: LD_VAR 0 5
8022: PUSH
8023: LD_INT 1
8025: MINUS
8026: ARRAY
8027: PPUSH
8028: LD_VAR 0 7
8032: PUSH
8033: LD_VAR 0 5
8037: ARRAY
8038: PPUSH
8039: CALL_OW 1
8043: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8044: LD_ADDR_VAR 0 7
8048: PUSH
8049: LD_VAR 0 7
8053: PPUSH
8054: LD_VAR 0 5
8058: PUSH
8059: LD_INT 1
8061: MINUS
8062: PPUSH
8063: LD_VAR 0 6
8067: PPUSH
8068: CALL_OW 1
8072: ST_TO_ADDR
// end ;
8073: GO 7990
8075: POP
8076: POP
// result := s_arr [ 1 ] ;
8077: LD_ADDR_VAR 0 4
8081: PUSH
8082: LD_VAR 0 7
8086: PUSH
8087: LD_INT 1
8089: ARRAY
8090: ST_TO_ADDR
// end ; end ;
8091: LD_VAR 0 4
8095: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8096: LD_INT 0
8098: PPUSH
8099: PPUSH
// if not list then
8100: LD_VAR 0 1
8104: NOT
8105: IFFALSE 8109
// exit ;
8107: GO 8200
// i := list [ pos1 ] ;
8109: LD_ADDR_VAR 0 5
8113: PUSH
8114: LD_VAR 0 1
8118: PUSH
8119: LD_VAR 0 2
8123: ARRAY
8124: ST_TO_ADDR
// if not i then
8125: LD_VAR 0 5
8129: NOT
8130: IFFALSE 8134
// exit ;
8132: GO 8200
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8134: LD_ADDR_VAR 0 1
8138: PUSH
8139: LD_VAR 0 1
8143: PPUSH
8144: LD_VAR 0 2
8148: PPUSH
8149: LD_VAR 0 1
8153: PUSH
8154: LD_VAR 0 3
8158: ARRAY
8159: PPUSH
8160: CALL_OW 1
8164: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8165: LD_ADDR_VAR 0 1
8169: PUSH
8170: LD_VAR 0 1
8174: PPUSH
8175: LD_VAR 0 3
8179: PPUSH
8180: LD_VAR 0 5
8184: PPUSH
8185: CALL_OW 1
8189: ST_TO_ADDR
// result := list ;
8190: LD_ADDR_VAR 0 4
8194: PUSH
8195: LD_VAR 0 1
8199: ST_TO_ADDR
// end ;
8200: LD_VAR 0 4
8204: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8205: LD_INT 0
8207: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8208: LD_ADDR_VAR 0 5
8212: PUSH
8213: LD_VAR 0 1
8217: PPUSH
8218: CALL_OW 250
8222: PPUSH
8223: LD_VAR 0 1
8227: PPUSH
8228: CALL_OW 251
8232: PPUSH
8233: LD_VAR 0 2
8237: PPUSH
8238: LD_VAR 0 3
8242: PPUSH
8243: LD_VAR 0 4
8247: PPUSH
8248: CALL 8626 0 5
8252: ST_TO_ADDR
// end ;
8253: LD_VAR 0 5
8257: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8258: LD_INT 0
8260: PPUSH
8261: PPUSH
8262: PPUSH
8263: PPUSH
// if not list or not unit then
8264: LD_VAR 0 2
8268: NOT
8269: PUSH
8270: LD_VAR 0 1
8274: NOT
8275: OR
8276: IFFALSE 8280
// exit ;
8278: GO 8621
// result := [ ] ;
8280: LD_ADDR_VAR 0 5
8284: PUSH
8285: EMPTY
8286: ST_TO_ADDR
// for i in list do
8287: LD_ADDR_VAR 0 6
8291: PUSH
8292: LD_VAR 0 2
8296: PUSH
8297: FOR_IN
8298: IFFALSE 8516
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8300: LD_ADDR_VAR 0 8
8304: PUSH
8305: LD_VAR 0 1
8309: PPUSH
8310: LD_VAR 0 6
8314: PUSH
8315: LD_INT 1
8317: ARRAY
8318: PPUSH
8319: LD_VAR 0 6
8323: PUSH
8324: LD_INT 2
8326: ARRAY
8327: PPUSH
8328: CALL_OW 297
8332: ST_TO_ADDR
// if not Count ( result ) then
8333: LD_VAR 0 5
8337: PPUSH
8338: CALL 4910 0 1
8342: NOT
8343: IFFALSE 8376
// begin result := Join ( result , [ i , tmp ] ) ;
8345: LD_ADDR_VAR 0 5
8349: PUSH
8350: LD_VAR 0 5
8354: PPUSH
8355: LD_VAR 0 6
8359: PUSH
8360: LD_VAR 0 8
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PPUSH
8369: CALL 40519 0 2
8373: ST_TO_ADDR
// continue ;
8374: GO 8297
// end ; if result [ result ] [ 2 ] <= tmp then
8376: LD_VAR 0 5
8380: PUSH
8381: LD_VAR 0 5
8385: ARRAY
8386: PUSH
8387: LD_INT 2
8389: ARRAY
8390: PUSH
8391: LD_VAR 0 8
8395: LESSEQUAL
8396: IFFALSE 8429
// result := Join ( result , [ i , tmp ] ) else
8398: LD_ADDR_VAR 0 5
8402: PUSH
8403: LD_VAR 0 5
8407: PPUSH
8408: LD_VAR 0 6
8412: PUSH
8413: LD_VAR 0 8
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PPUSH
8422: CALL 40519 0 2
8426: ST_TO_ADDR
8427: GO 8514
// begin for j := 1 to Count ( result ) do
8429: LD_ADDR_VAR 0 7
8433: PUSH
8434: DOUBLE
8435: LD_INT 1
8437: DEC
8438: ST_TO_ADDR
8439: LD_VAR 0 5
8443: PPUSH
8444: CALL 4910 0 1
8448: PUSH
8449: FOR_TO
8450: IFFALSE 8512
// begin if tmp < result [ j ] [ 2 ] then
8452: LD_VAR 0 8
8456: PUSH
8457: LD_VAR 0 5
8461: PUSH
8462: LD_VAR 0 7
8466: ARRAY
8467: PUSH
8468: LD_INT 2
8470: ARRAY
8471: LESS
8472: IFFALSE 8510
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8474: LD_ADDR_VAR 0 5
8478: PUSH
8479: LD_VAR 0 5
8483: PPUSH
8484: LD_VAR 0 7
8488: PPUSH
8489: LD_VAR 0 6
8493: PUSH
8494: LD_VAR 0 8
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PPUSH
8503: CALL_OW 2
8507: ST_TO_ADDR
// break ;
8508: GO 8512
// end ; end ;
8510: GO 8449
8512: POP
8513: POP
// end ; end ;
8514: GO 8297
8516: POP
8517: POP
// if result and not asc then
8518: LD_VAR 0 5
8522: PUSH
8523: LD_VAR 0 3
8527: NOT
8528: AND
8529: IFFALSE 8546
// result := ReverseArray ( result ) ;
8531: LD_ADDR_VAR 0 5
8535: PUSH
8536: LD_VAR 0 5
8540: PPUSH
8541: CALL 35786 0 1
8545: ST_TO_ADDR
// tmp := [ ] ;
8546: LD_ADDR_VAR 0 8
8550: PUSH
8551: EMPTY
8552: ST_TO_ADDR
// if mode then
8553: LD_VAR 0 4
8557: IFFALSE 8621
// begin for i := 1 to result do
8559: LD_ADDR_VAR 0 6
8563: PUSH
8564: DOUBLE
8565: LD_INT 1
8567: DEC
8568: ST_TO_ADDR
8569: LD_VAR 0 5
8573: PUSH
8574: FOR_TO
8575: IFFALSE 8609
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8577: LD_ADDR_VAR 0 8
8581: PUSH
8582: LD_VAR 0 8
8586: PPUSH
8587: LD_VAR 0 5
8591: PUSH
8592: LD_VAR 0 6
8596: ARRAY
8597: PUSH
8598: LD_INT 1
8600: ARRAY
8601: PPUSH
8602: CALL 40519 0 2
8606: ST_TO_ADDR
8607: GO 8574
8609: POP
8610: POP
// result := tmp ;
8611: LD_ADDR_VAR 0 5
8615: PUSH
8616: LD_VAR 0 8
8620: ST_TO_ADDR
// end ; end ;
8621: LD_VAR 0 5
8625: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8626: LD_INT 0
8628: PPUSH
8629: PPUSH
8630: PPUSH
8631: PPUSH
// if not list then
8632: LD_VAR 0 3
8636: NOT
8637: IFFALSE 8641
// exit ;
8639: GO 9029
// result := [ ] ;
8641: LD_ADDR_VAR 0 6
8645: PUSH
8646: EMPTY
8647: ST_TO_ADDR
// for i in list do
8648: LD_ADDR_VAR 0 7
8652: PUSH
8653: LD_VAR 0 3
8657: PUSH
8658: FOR_IN
8659: IFFALSE 8861
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8661: LD_ADDR_VAR 0 9
8665: PUSH
8666: LD_VAR 0 7
8670: PPUSH
8671: LD_VAR 0 1
8675: PPUSH
8676: LD_VAR 0 2
8680: PPUSH
8681: CALL_OW 297
8685: ST_TO_ADDR
// if not result then
8686: LD_VAR 0 6
8690: NOT
8691: IFFALSE 8717
// result := [ [ i , tmp ] ] else
8693: LD_ADDR_VAR 0 6
8697: PUSH
8698: LD_VAR 0 7
8702: PUSH
8703: LD_VAR 0 9
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PUSH
8712: EMPTY
8713: LIST
8714: ST_TO_ADDR
8715: GO 8859
// begin if result [ result ] [ 2 ] < tmp then
8717: LD_VAR 0 6
8721: PUSH
8722: LD_VAR 0 6
8726: ARRAY
8727: PUSH
8728: LD_INT 2
8730: ARRAY
8731: PUSH
8732: LD_VAR 0 9
8736: LESS
8737: IFFALSE 8779
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8739: LD_ADDR_VAR 0 6
8743: PUSH
8744: LD_VAR 0 6
8748: PPUSH
8749: LD_VAR 0 6
8753: PUSH
8754: LD_INT 1
8756: PLUS
8757: PPUSH
8758: LD_VAR 0 7
8762: PUSH
8763: LD_VAR 0 9
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PPUSH
8772: CALL_OW 2
8776: ST_TO_ADDR
8777: GO 8859
// for j = 1 to result do
8779: LD_ADDR_VAR 0 8
8783: PUSH
8784: DOUBLE
8785: LD_INT 1
8787: DEC
8788: ST_TO_ADDR
8789: LD_VAR 0 6
8793: PUSH
8794: FOR_TO
8795: IFFALSE 8857
// begin if tmp < result [ j ] [ 2 ] then
8797: LD_VAR 0 9
8801: PUSH
8802: LD_VAR 0 6
8806: PUSH
8807: LD_VAR 0 8
8811: ARRAY
8812: PUSH
8813: LD_INT 2
8815: ARRAY
8816: LESS
8817: IFFALSE 8855
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8819: LD_ADDR_VAR 0 6
8823: PUSH
8824: LD_VAR 0 6
8828: PPUSH
8829: LD_VAR 0 8
8833: PPUSH
8834: LD_VAR 0 7
8838: PUSH
8839: LD_VAR 0 9
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PPUSH
8848: CALL_OW 2
8852: ST_TO_ADDR
// break ;
8853: GO 8857
// end ; end ;
8855: GO 8794
8857: POP
8858: POP
// end ; end ;
8859: GO 8658
8861: POP
8862: POP
// if result and not asc then
8863: LD_VAR 0 6
8867: PUSH
8868: LD_VAR 0 4
8872: NOT
8873: AND
8874: IFFALSE 8949
// begin tmp := result ;
8876: LD_ADDR_VAR 0 9
8880: PUSH
8881: LD_VAR 0 6
8885: ST_TO_ADDR
// for i = tmp downto 1 do
8886: LD_ADDR_VAR 0 7
8890: PUSH
8891: DOUBLE
8892: LD_VAR 0 9
8896: INC
8897: ST_TO_ADDR
8898: LD_INT 1
8900: PUSH
8901: FOR_DOWNTO
8902: IFFALSE 8947
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8904: LD_ADDR_VAR 0 6
8908: PUSH
8909: LD_VAR 0 6
8913: PPUSH
8914: LD_VAR 0 9
8918: PUSH
8919: LD_VAR 0 7
8923: MINUS
8924: PUSH
8925: LD_INT 1
8927: PLUS
8928: PPUSH
8929: LD_VAR 0 9
8933: PUSH
8934: LD_VAR 0 7
8938: ARRAY
8939: PPUSH
8940: CALL_OW 1
8944: ST_TO_ADDR
8945: GO 8901
8947: POP
8948: POP
// end ; tmp := [ ] ;
8949: LD_ADDR_VAR 0 9
8953: PUSH
8954: EMPTY
8955: ST_TO_ADDR
// if mode then
8956: LD_VAR 0 5
8960: IFFALSE 9029
// begin for i = 1 to result do
8962: LD_ADDR_VAR 0 7
8966: PUSH
8967: DOUBLE
8968: LD_INT 1
8970: DEC
8971: ST_TO_ADDR
8972: LD_VAR 0 6
8976: PUSH
8977: FOR_TO
8978: IFFALSE 9017
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8980: LD_ADDR_VAR 0 9
8984: PUSH
8985: LD_VAR 0 9
8989: PPUSH
8990: LD_VAR 0 7
8994: PPUSH
8995: LD_VAR 0 6
8999: PUSH
9000: LD_VAR 0 7
9004: ARRAY
9005: PUSH
9006: LD_INT 1
9008: ARRAY
9009: PPUSH
9010: CALL_OW 1
9014: ST_TO_ADDR
9015: GO 8977
9017: POP
9018: POP
// result := tmp ;
9019: LD_ADDR_VAR 0 6
9023: PUSH
9024: LD_VAR 0 9
9028: ST_TO_ADDR
// end ; end ;
9029: LD_VAR 0 6
9033: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9034: LD_INT 0
9036: PPUSH
9037: PPUSH
9038: PPUSH
9039: PPUSH
9040: PPUSH
9041: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9042: LD_ADDR_VAR 0 5
9046: PUSH
9047: LD_INT 0
9049: PUSH
9050: LD_INT 0
9052: PUSH
9053: LD_INT 0
9055: PUSH
9056: EMPTY
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: ST_TO_ADDR
// if not x or not y then
9064: LD_VAR 0 2
9068: NOT
9069: PUSH
9070: LD_VAR 0 3
9074: NOT
9075: OR
9076: IFFALSE 9080
// exit ;
9078: GO 10730
// if not range then
9080: LD_VAR 0 4
9084: NOT
9085: IFFALSE 9095
// range := 10 ;
9087: LD_ADDR_VAR 0 4
9091: PUSH
9092: LD_INT 10
9094: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9095: LD_ADDR_VAR 0 8
9099: PUSH
9100: LD_INT 81
9102: PUSH
9103: LD_VAR 0 1
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PUSH
9112: LD_INT 92
9114: PUSH
9115: LD_VAR 0 2
9119: PUSH
9120: LD_VAR 0 3
9124: PUSH
9125: LD_VAR 0 4
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 3
9138: PUSH
9139: LD_INT 21
9141: PUSH
9142: LD_INT 3
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: LIST
9157: PPUSH
9158: CALL_OW 69
9162: ST_TO_ADDR
// if not tmp then
9163: LD_VAR 0 8
9167: NOT
9168: IFFALSE 9172
// exit ;
9170: GO 10730
// for i in tmp do
9172: LD_ADDR_VAR 0 6
9176: PUSH
9177: LD_VAR 0 8
9181: PUSH
9182: FOR_IN
9183: IFFALSE 10705
// begin points := [ 0 , 0 , 0 ] ;
9185: LD_ADDR_VAR 0 9
9189: PUSH
9190: LD_INT 0
9192: PUSH
9193: LD_INT 0
9195: PUSH
9196: LD_INT 0
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: LIST
9203: ST_TO_ADDR
// bpoints := 1 ;
9204: LD_ADDR_VAR 0 10
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9212: LD_VAR 0 6
9216: PPUSH
9217: CALL_OW 247
9221: PUSH
9222: LD_INT 1
9224: DOUBLE
9225: EQUAL
9226: IFTRUE 9230
9228: GO 9808
9230: POP
// begin if GetClass ( i ) = 1 then
9231: LD_VAR 0 6
9235: PPUSH
9236: CALL_OW 257
9240: PUSH
9241: LD_INT 1
9243: EQUAL
9244: IFFALSE 9265
// points := [ 10 , 5 , 3 ] ;
9246: LD_ADDR_VAR 0 9
9250: PUSH
9251: LD_INT 10
9253: PUSH
9254: LD_INT 5
9256: PUSH
9257: LD_INT 3
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9265: LD_VAR 0 6
9269: PPUSH
9270: CALL_OW 257
9274: PUSH
9275: LD_INT 2
9277: PUSH
9278: LD_INT 3
9280: PUSH
9281: LD_INT 4
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: LIST
9288: IN
9289: IFFALSE 9310
// points := [ 3 , 2 , 1 ] ;
9291: LD_ADDR_VAR 0 9
9295: PUSH
9296: LD_INT 3
9298: PUSH
9299: LD_INT 2
9301: PUSH
9302: LD_INT 1
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: LIST
9309: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9310: LD_VAR 0 6
9314: PPUSH
9315: CALL_OW 257
9319: PUSH
9320: LD_INT 5
9322: EQUAL
9323: IFFALSE 9344
// points := [ 130 , 5 , 2 ] ;
9325: LD_ADDR_VAR 0 9
9329: PUSH
9330: LD_INT 130
9332: PUSH
9333: LD_INT 5
9335: PUSH
9336: LD_INT 2
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: LIST
9343: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9344: LD_VAR 0 6
9348: PPUSH
9349: CALL_OW 257
9353: PUSH
9354: LD_INT 8
9356: EQUAL
9357: IFFALSE 9378
// points := [ 35 , 35 , 30 ] ;
9359: LD_ADDR_VAR 0 9
9363: PUSH
9364: LD_INT 35
9366: PUSH
9367: LD_INT 35
9369: PUSH
9370: LD_INT 30
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: LIST
9377: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9378: LD_VAR 0 6
9382: PPUSH
9383: CALL_OW 257
9387: PUSH
9388: LD_INT 9
9390: EQUAL
9391: IFFALSE 9412
// points := [ 20 , 55 , 40 ] ;
9393: LD_ADDR_VAR 0 9
9397: PUSH
9398: LD_INT 20
9400: PUSH
9401: LD_INT 55
9403: PUSH
9404: LD_INT 40
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: LIST
9411: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9412: LD_VAR 0 6
9416: PPUSH
9417: CALL_OW 257
9421: PUSH
9422: LD_INT 12
9424: PUSH
9425: LD_INT 16
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: IN
9432: IFFALSE 9453
// points := [ 5 , 3 , 2 ] ;
9434: LD_ADDR_VAR 0 9
9438: PUSH
9439: LD_INT 5
9441: PUSH
9442: LD_INT 3
9444: PUSH
9445: LD_INT 2
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: LIST
9452: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9453: LD_VAR 0 6
9457: PPUSH
9458: CALL_OW 257
9462: PUSH
9463: LD_INT 17
9465: EQUAL
9466: IFFALSE 9487
// points := [ 100 , 50 , 75 ] ;
9468: LD_ADDR_VAR 0 9
9472: PUSH
9473: LD_INT 100
9475: PUSH
9476: LD_INT 50
9478: PUSH
9479: LD_INT 75
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9487: LD_VAR 0 6
9491: PPUSH
9492: CALL_OW 257
9496: PUSH
9497: LD_INT 15
9499: EQUAL
9500: IFFALSE 9521
// points := [ 10 , 5 , 3 ] ;
9502: LD_ADDR_VAR 0 9
9506: PUSH
9507: LD_INT 10
9509: PUSH
9510: LD_INT 5
9512: PUSH
9513: LD_INT 3
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9521: LD_VAR 0 6
9525: PPUSH
9526: CALL_OW 257
9530: PUSH
9531: LD_INT 14
9533: EQUAL
9534: IFFALSE 9555
// points := [ 10 , 0 , 0 ] ;
9536: LD_ADDR_VAR 0 9
9540: PUSH
9541: LD_INT 10
9543: PUSH
9544: LD_INT 0
9546: PUSH
9547: LD_INT 0
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9555: LD_VAR 0 6
9559: PPUSH
9560: CALL_OW 257
9564: PUSH
9565: LD_INT 11
9567: EQUAL
9568: IFFALSE 9589
// points := [ 30 , 10 , 5 ] ;
9570: LD_ADDR_VAR 0 9
9574: PUSH
9575: LD_INT 30
9577: PUSH
9578: LD_INT 10
9580: PUSH
9581: LD_INT 5
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9589: LD_VAR 0 1
9593: PPUSH
9594: LD_INT 5
9596: PPUSH
9597: CALL_OW 321
9601: PUSH
9602: LD_INT 2
9604: EQUAL
9605: IFFALSE 9622
// bpoints := bpoints * 1.8 ;
9607: LD_ADDR_VAR 0 10
9611: PUSH
9612: LD_VAR 0 10
9616: PUSH
9617: LD_REAL  1.80000000000000E+0000
9620: MUL
9621: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9622: LD_VAR 0 6
9626: PPUSH
9627: CALL_OW 257
9631: PUSH
9632: LD_INT 1
9634: PUSH
9635: LD_INT 2
9637: PUSH
9638: LD_INT 3
9640: PUSH
9641: LD_INT 4
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: IN
9650: PUSH
9651: LD_VAR 0 1
9655: PPUSH
9656: LD_INT 51
9658: PPUSH
9659: CALL_OW 321
9663: PUSH
9664: LD_INT 2
9666: EQUAL
9667: AND
9668: IFFALSE 9685
// bpoints := bpoints * 1.2 ;
9670: LD_ADDR_VAR 0 10
9674: PUSH
9675: LD_VAR 0 10
9679: PUSH
9680: LD_REAL  1.20000000000000E+0000
9683: MUL
9684: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9685: LD_VAR 0 6
9689: PPUSH
9690: CALL_OW 257
9694: PUSH
9695: LD_INT 5
9697: PUSH
9698: LD_INT 7
9700: PUSH
9701: LD_INT 9
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: LIST
9708: IN
9709: PUSH
9710: LD_VAR 0 1
9714: PPUSH
9715: LD_INT 52
9717: PPUSH
9718: CALL_OW 321
9722: PUSH
9723: LD_INT 2
9725: EQUAL
9726: AND
9727: IFFALSE 9744
// bpoints := bpoints * 1.5 ;
9729: LD_ADDR_VAR 0 10
9733: PUSH
9734: LD_VAR 0 10
9738: PUSH
9739: LD_REAL  1.50000000000000E+0000
9742: MUL
9743: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9744: LD_VAR 0 1
9748: PPUSH
9749: LD_INT 66
9751: PPUSH
9752: CALL_OW 321
9756: PUSH
9757: LD_INT 2
9759: EQUAL
9760: IFFALSE 9777
// bpoints := bpoints * 1.1 ;
9762: LD_ADDR_VAR 0 10
9766: PUSH
9767: LD_VAR 0 10
9771: PUSH
9772: LD_REAL  1.10000000000000E+0000
9775: MUL
9776: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9777: LD_ADDR_VAR 0 10
9781: PUSH
9782: LD_VAR 0 10
9786: PUSH
9787: LD_VAR 0 6
9791: PPUSH
9792: LD_INT 1
9794: PPUSH
9795: CALL_OW 259
9799: PUSH
9800: LD_REAL  1.15000000000000E+0000
9803: MUL
9804: MUL
9805: ST_TO_ADDR
// end ; unit_vehicle :
9806: GO 10634
9808: LD_INT 2
9810: DOUBLE
9811: EQUAL
9812: IFTRUE 9816
9814: GO 10622
9816: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9817: LD_VAR 0 6
9821: PPUSH
9822: CALL_OW 264
9826: PUSH
9827: LD_INT 2
9829: PUSH
9830: LD_INT 42
9832: PUSH
9833: LD_INT 24
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: LIST
9840: IN
9841: IFFALSE 9862
// points := [ 25 , 5 , 3 ] ;
9843: LD_ADDR_VAR 0 9
9847: PUSH
9848: LD_INT 25
9850: PUSH
9851: LD_INT 5
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: LIST
9861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9862: LD_VAR 0 6
9866: PPUSH
9867: CALL_OW 264
9871: PUSH
9872: LD_INT 4
9874: PUSH
9875: LD_INT 43
9877: PUSH
9878: LD_INT 25
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: IN
9886: IFFALSE 9907
// points := [ 40 , 15 , 5 ] ;
9888: LD_ADDR_VAR 0 9
9892: PUSH
9893: LD_INT 40
9895: PUSH
9896: LD_INT 15
9898: PUSH
9899: LD_INT 5
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9907: LD_VAR 0 6
9911: PPUSH
9912: CALL_OW 264
9916: PUSH
9917: LD_INT 3
9919: PUSH
9920: LD_INT 23
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: IN
9927: IFFALSE 9948
// points := [ 7 , 25 , 8 ] ;
9929: LD_ADDR_VAR 0 9
9933: PUSH
9934: LD_INT 7
9936: PUSH
9937: LD_INT 25
9939: PUSH
9940: LD_INT 8
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9948: LD_VAR 0 6
9952: PPUSH
9953: CALL_OW 264
9957: PUSH
9958: LD_INT 5
9960: PUSH
9961: LD_INT 27
9963: PUSH
9964: LD_INT 44
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: LIST
9971: IN
9972: IFFALSE 9993
// points := [ 14 , 50 , 16 ] ;
9974: LD_ADDR_VAR 0 9
9978: PUSH
9979: LD_INT 14
9981: PUSH
9982: LD_INT 50
9984: PUSH
9985: LD_INT 16
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: LIST
9992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9993: LD_VAR 0 6
9997: PPUSH
9998: CALL_OW 264
10002: PUSH
10003: LD_INT 6
10005: PUSH
10006: LD_INT 46
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: IN
10013: IFFALSE 10034
// points := [ 32 , 120 , 70 ] ;
10015: LD_ADDR_VAR 0 9
10019: PUSH
10020: LD_INT 32
10022: PUSH
10023: LD_INT 120
10025: PUSH
10026: LD_INT 70
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: LIST
10033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10034: LD_VAR 0 6
10038: PPUSH
10039: CALL_OW 264
10043: PUSH
10044: LD_INT 7
10046: PUSH
10047: LD_INT 28
10049: PUSH
10050: LD_INT 45
10052: PUSH
10053: LD_INT 92
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: IN
10062: IFFALSE 10083
// points := [ 35 , 20 , 45 ] ;
10064: LD_ADDR_VAR 0 9
10068: PUSH
10069: LD_INT 35
10071: PUSH
10072: LD_INT 20
10074: PUSH
10075: LD_INT 45
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: LIST
10082: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10083: LD_VAR 0 6
10087: PPUSH
10088: CALL_OW 264
10092: PUSH
10093: LD_INT 47
10095: PUSH
10096: EMPTY
10097: LIST
10098: IN
10099: IFFALSE 10120
// points := [ 67 , 45 , 75 ] ;
10101: LD_ADDR_VAR 0 9
10105: PUSH
10106: LD_INT 67
10108: PUSH
10109: LD_INT 45
10111: PUSH
10112: LD_INT 75
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10120: LD_VAR 0 6
10124: PPUSH
10125: CALL_OW 264
10129: PUSH
10130: LD_INT 26
10132: PUSH
10133: EMPTY
10134: LIST
10135: IN
10136: IFFALSE 10157
// points := [ 120 , 30 , 80 ] ;
10138: LD_ADDR_VAR 0 9
10142: PUSH
10143: LD_INT 120
10145: PUSH
10146: LD_INT 30
10148: PUSH
10149: LD_INT 80
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: LIST
10156: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10157: LD_VAR 0 6
10161: PPUSH
10162: CALL_OW 264
10166: PUSH
10167: LD_INT 22
10169: PUSH
10170: EMPTY
10171: LIST
10172: IN
10173: IFFALSE 10194
// points := [ 40 , 1 , 1 ] ;
10175: LD_ADDR_VAR 0 9
10179: PUSH
10180: LD_INT 40
10182: PUSH
10183: LD_INT 1
10185: PUSH
10186: LD_INT 1
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: LIST
10193: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10194: LD_VAR 0 6
10198: PPUSH
10199: CALL_OW 264
10203: PUSH
10204: LD_INT 29
10206: PUSH
10207: EMPTY
10208: LIST
10209: IN
10210: IFFALSE 10231
// points := [ 70 , 200 , 400 ] ;
10212: LD_ADDR_VAR 0 9
10216: PUSH
10217: LD_INT 70
10219: PUSH
10220: LD_INT 200
10222: PUSH
10223: LD_INT 400
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: LIST
10230: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10231: LD_VAR 0 6
10235: PPUSH
10236: CALL_OW 264
10240: PUSH
10241: LD_INT 14
10243: PUSH
10244: LD_INT 53
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: IN
10251: IFFALSE 10272
// points := [ 40 , 10 , 20 ] ;
10253: LD_ADDR_VAR 0 9
10257: PUSH
10258: LD_INT 40
10260: PUSH
10261: LD_INT 10
10263: PUSH
10264: LD_INT 20
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: LIST
10271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10272: LD_VAR 0 6
10276: PPUSH
10277: CALL_OW 264
10281: PUSH
10282: LD_INT 9
10284: PUSH
10285: EMPTY
10286: LIST
10287: IN
10288: IFFALSE 10309
// points := [ 5 , 70 , 20 ] ;
10290: LD_ADDR_VAR 0 9
10294: PUSH
10295: LD_INT 5
10297: PUSH
10298: LD_INT 70
10300: PUSH
10301: LD_INT 20
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: LIST
10308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10309: LD_VAR 0 6
10313: PPUSH
10314: CALL_OW 264
10318: PUSH
10319: LD_INT 10
10321: PUSH
10322: EMPTY
10323: LIST
10324: IN
10325: IFFALSE 10346
// points := [ 35 , 110 , 70 ] ;
10327: LD_ADDR_VAR 0 9
10331: PUSH
10332: LD_INT 35
10334: PUSH
10335: LD_INT 110
10337: PUSH
10338: LD_INT 70
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10346: LD_VAR 0 6
10350: PPUSH
10351: CALL_OW 265
10355: PUSH
10356: LD_INT 25
10358: EQUAL
10359: IFFALSE 10380
// points := [ 80 , 65 , 100 ] ;
10361: LD_ADDR_VAR 0 9
10365: PUSH
10366: LD_INT 80
10368: PUSH
10369: LD_INT 65
10371: PUSH
10372: LD_INT 100
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: LIST
10379: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10380: LD_VAR 0 6
10384: PPUSH
10385: CALL_OW 263
10389: PUSH
10390: LD_INT 1
10392: EQUAL
10393: IFFALSE 10428
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10395: LD_ADDR_VAR 0 10
10399: PUSH
10400: LD_VAR 0 10
10404: PUSH
10405: LD_VAR 0 6
10409: PPUSH
10410: CALL_OW 311
10414: PPUSH
10415: LD_INT 3
10417: PPUSH
10418: CALL_OW 259
10422: PUSH
10423: LD_INT 4
10425: MUL
10426: MUL
10427: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10428: LD_VAR 0 6
10432: PPUSH
10433: CALL_OW 263
10437: PUSH
10438: LD_INT 2
10440: EQUAL
10441: IFFALSE 10492
// begin j := IsControledBy ( i ) ;
10443: LD_ADDR_VAR 0 7
10447: PUSH
10448: LD_VAR 0 6
10452: PPUSH
10453: CALL_OW 312
10457: ST_TO_ADDR
// if j then
10458: LD_VAR 0 7
10462: IFFALSE 10492
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10464: LD_ADDR_VAR 0 10
10468: PUSH
10469: LD_VAR 0 10
10473: PUSH
10474: LD_VAR 0 7
10478: PPUSH
10479: LD_INT 3
10481: PPUSH
10482: CALL_OW 259
10486: PUSH
10487: LD_INT 3
10489: MUL
10490: MUL
10491: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10492: LD_VAR 0 6
10496: PPUSH
10497: CALL_OW 264
10501: PUSH
10502: LD_INT 5
10504: PUSH
10505: LD_INT 6
10507: PUSH
10508: LD_INT 46
10510: PUSH
10511: LD_INT 44
10513: PUSH
10514: LD_INT 47
10516: PUSH
10517: LD_INT 45
10519: PUSH
10520: LD_INT 28
10522: PUSH
10523: LD_INT 7
10525: PUSH
10526: LD_INT 27
10528: PUSH
10529: LD_INT 29
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: IN
10544: PUSH
10545: LD_VAR 0 1
10549: PPUSH
10550: LD_INT 52
10552: PPUSH
10553: CALL_OW 321
10557: PUSH
10558: LD_INT 2
10560: EQUAL
10561: AND
10562: IFFALSE 10579
// bpoints := bpoints * 1.2 ;
10564: LD_ADDR_VAR 0 10
10568: PUSH
10569: LD_VAR 0 10
10573: PUSH
10574: LD_REAL  1.20000000000000E+0000
10577: MUL
10578: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10579: LD_VAR 0 6
10583: PPUSH
10584: CALL_OW 264
10588: PUSH
10589: LD_INT 6
10591: PUSH
10592: LD_INT 46
10594: PUSH
10595: LD_INT 47
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: LIST
10602: IN
10603: IFFALSE 10620
// bpoints := bpoints * 1.2 ;
10605: LD_ADDR_VAR 0 10
10609: PUSH
10610: LD_VAR 0 10
10614: PUSH
10615: LD_REAL  1.20000000000000E+0000
10618: MUL
10619: ST_TO_ADDR
// end ; unit_building :
10620: GO 10634
10622: LD_INT 3
10624: DOUBLE
10625: EQUAL
10626: IFTRUE 10630
10628: GO 10633
10630: POP
// ; end ;
10631: GO 10634
10633: POP
// for j = 1 to 3 do
10634: LD_ADDR_VAR 0 7
10638: PUSH
10639: DOUBLE
10640: LD_INT 1
10642: DEC
10643: ST_TO_ADDR
10644: LD_INT 3
10646: PUSH
10647: FOR_TO
10648: IFFALSE 10701
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10650: LD_ADDR_VAR 0 5
10654: PUSH
10655: LD_VAR 0 5
10659: PPUSH
10660: LD_VAR 0 7
10664: PPUSH
10665: LD_VAR 0 5
10669: PUSH
10670: LD_VAR 0 7
10674: ARRAY
10675: PUSH
10676: LD_VAR 0 9
10680: PUSH
10681: LD_VAR 0 7
10685: ARRAY
10686: PUSH
10687: LD_VAR 0 10
10691: MUL
10692: PLUS
10693: PPUSH
10694: CALL_OW 1
10698: ST_TO_ADDR
10699: GO 10647
10701: POP
10702: POP
// end ;
10703: GO 9182
10705: POP
10706: POP
// result := Replace ( result , 4 , tmp ) ;
10707: LD_ADDR_VAR 0 5
10711: PUSH
10712: LD_VAR 0 5
10716: PPUSH
10717: LD_INT 4
10719: PPUSH
10720: LD_VAR 0 8
10724: PPUSH
10725: CALL_OW 1
10729: ST_TO_ADDR
// end ;
10730: LD_VAR 0 5
10734: RET
// export function DangerAtRange ( unit , range ) ; begin
10735: LD_INT 0
10737: PPUSH
// if not unit then
10738: LD_VAR 0 1
10742: NOT
10743: IFFALSE 10747
// exit ;
10745: GO 10792
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10747: LD_ADDR_VAR 0 3
10751: PUSH
10752: LD_VAR 0 1
10756: PPUSH
10757: CALL_OW 255
10761: PPUSH
10762: LD_VAR 0 1
10766: PPUSH
10767: CALL_OW 250
10771: PPUSH
10772: LD_VAR 0 1
10776: PPUSH
10777: CALL_OW 251
10781: PPUSH
10782: LD_VAR 0 2
10786: PPUSH
10787: CALL 9034 0 4
10791: ST_TO_ADDR
// end ;
10792: LD_VAR 0 3
10796: RET
// export function DangerInArea ( side , area ) ; begin
10797: LD_INT 0
10799: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10800: LD_ADDR_VAR 0 3
10804: PUSH
10805: LD_VAR 0 2
10809: PPUSH
10810: LD_INT 81
10812: PUSH
10813: LD_VAR 0 1
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PPUSH
10822: CALL_OW 70
10826: ST_TO_ADDR
// end ;
10827: LD_VAR 0 3
10831: RET
// export function IsExtension ( b ) ; begin
10832: LD_INT 0
10834: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10835: LD_ADDR_VAR 0 2
10839: PUSH
10840: LD_VAR 0 1
10844: PUSH
10845: LD_INT 23
10847: PUSH
10848: LD_INT 20
10850: PUSH
10851: LD_INT 22
10853: PUSH
10854: LD_INT 17
10856: PUSH
10857: LD_INT 24
10859: PUSH
10860: LD_INT 21
10862: PUSH
10863: LD_INT 19
10865: PUSH
10866: LD_INT 16
10868: PUSH
10869: LD_INT 25
10871: PUSH
10872: LD_INT 18
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: IN
10887: ST_TO_ADDR
// end ;
10888: LD_VAR 0 2
10892: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10893: LD_INT 0
10895: PPUSH
10896: PPUSH
10897: PPUSH
// result := [ ] ;
10898: LD_ADDR_VAR 0 4
10902: PUSH
10903: EMPTY
10904: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10905: LD_ADDR_VAR 0 5
10909: PUSH
10910: LD_VAR 0 2
10914: PPUSH
10915: LD_INT 21
10917: PUSH
10918: LD_INT 3
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PPUSH
10925: CALL_OW 70
10929: ST_TO_ADDR
// if not tmp then
10930: LD_VAR 0 5
10934: NOT
10935: IFFALSE 10939
// exit ;
10937: GO 11003
// if checkLink then
10939: LD_VAR 0 3
10943: IFFALSE 10993
// begin for i in tmp do
10945: LD_ADDR_VAR 0 6
10949: PUSH
10950: LD_VAR 0 5
10954: PUSH
10955: FOR_IN
10956: IFFALSE 10991
// if GetBase ( i ) <> base then
10958: LD_VAR 0 6
10962: PPUSH
10963: CALL_OW 274
10967: PUSH
10968: LD_VAR 0 1
10972: NONEQUAL
10973: IFFALSE 10989
// ComLinkToBase ( base , i ) ;
10975: LD_VAR 0 1
10979: PPUSH
10980: LD_VAR 0 6
10984: PPUSH
10985: CALL_OW 169
10989: GO 10955
10991: POP
10992: POP
// end ; result := tmp ;
10993: LD_ADDR_VAR 0 4
10997: PUSH
10998: LD_VAR 0 5
11002: ST_TO_ADDR
// end ;
11003: LD_VAR 0 4
11007: RET
// export function ComComplete ( units , b ) ; var i ; begin
11008: LD_INT 0
11010: PPUSH
11011: PPUSH
// if not units then
11012: LD_VAR 0 1
11016: NOT
11017: IFFALSE 11021
// exit ;
11019: GO 11111
// for i in units do
11021: LD_ADDR_VAR 0 4
11025: PUSH
11026: LD_VAR 0 1
11030: PUSH
11031: FOR_IN
11032: IFFALSE 11109
// if BuildingStatus ( b ) = bs_build then
11034: LD_VAR 0 2
11038: PPUSH
11039: CALL_OW 461
11043: PUSH
11044: LD_INT 1
11046: EQUAL
11047: IFFALSE 11107
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11049: LD_VAR 0 4
11053: PPUSH
11054: LD_STRING h
11056: PUSH
11057: LD_VAR 0 2
11061: PPUSH
11062: CALL_OW 250
11066: PUSH
11067: LD_VAR 0 2
11071: PPUSH
11072: CALL_OW 251
11076: PUSH
11077: LD_VAR 0 2
11081: PUSH
11082: LD_INT 0
11084: PUSH
11085: LD_INT 0
11087: PUSH
11088: LD_INT 0
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: PUSH
11100: EMPTY
11101: LIST
11102: PPUSH
11103: CALL_OW 446
11107: GO 11031
11109: POP
11110: POP
// end ;
11111: LD_VAR 0 3
11115: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11116: LD_INT 0
11118: PPUSH
11119: PPUSH
11120: PPUSH
11121: PPUSH
11122: PPUSH
11123: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11124: LD_VAR 0 1
11128: NOT
11129: PUSH
11130: LD_VAR 0 1
11134: PPUSH
11135: CALL_OW 263
11139: PUSH
11140: LD_INT 2
11142: NONEQUAL
11143: OR
11144: IFFALSE 11148
// exit ;
11146: GO 11464
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11148: LD_ADDR_VAR 0 6
11152: PUSH
11153: LD_INT 22
11155: PUSH
11156: LD_VAR 0 1
11160: PPUSH
11161: CALL_OW 255
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: LD_INT 30
11175: PUSH
11176: LD_INT 36
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: LD_INT 34
11185: PUSH
11186: LD_INT 31
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PPUSH
11202: CALL_OW 69
11206: ST_TO_ADDR
// if not tmp then
11207: LD_VAR 0 6
11211: NOT
11212: IFFALSE 11216
// exit ;
11214: GO 11464
// result := [ ] ;
11216: LD_ADDR_VAR 0 2
11220: PUSH
11221: EMPTY
11222: ST_TO_ADDR
// for i in tmp do
11223: LD_ADDR_VAR 0 3
11227: PUSH
11228: LD_VAR 0 6
11232: PUSH
11233: FOR_IN
11234: IFFALSE 11305
// begin t := UnitsInside ( i ) ;
11236: LD_ADDR_VAR 0 4
11240: PUSH
11241: LD_VAR 0 3
11245: PPUSH
11246: CALL_OW 313
11250: ST_TO_ADDR
// if t then
11251: LD_VAR 0 4
11255: IFFALSE 11303
// for j in t do
11257: LD_ADDR_VAR 0 7
11261: PUSH
11262: LD_VAR 0 4
11266: PUSH
11267: FOR_IN
11268: IFFALSE 11301
// result := Replace ( result , result + 1 , j ) ;
11270: LD_ADDR_VAR 0 2
11274: PUSH
11275: LD_VAR 0 2
11279: PPUSH
11280: LD_VAR 0 2
11284: PUSH
11285: LD_INT 1
11287: PLUS
11288: PPUSH
11289: LD_VAR 0 7
11293: PPUSH
11294: CALL_OW 1
11298: ST_TO_ADDR
11299: GO 11267
11301: POP
11302: POP
// end ;
11303: GO 11233
11305: POP
11306: POP
// if not result then
11307: LD_VAR 0 2
11311: NOT
11312: IFFALSE 11316
// exit ;
11314: GO 11464
// mech := result [ 1 ] ;
11316: LD_ADDR_VAR 0 5
11320: PUSH
11321: LD_VAR 0 2
11325: PUSH
11326: LD_INT 1
11328: ARRAY
11329: ST_TO_ADDR
// if result > 1 then
11330: LD_VAR 0 2
11334: PUSH
11335: LD_INT 1
11337: GREATER
11338: IFFALSE 11450
// begin for i = 2 to result do
11340: LD_ADDR_VAR 0 3
11344: PUSH
11345: DOUBLE
11346: LD_INT 2
11348: DEC
11349: ST_TO_ADDR
11350: LD_VAR 0 2
11354: PUSH
11355: FOR_TO
11356: IFFALSE 11448
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11358: LD_ADDR_VAR 0 4
11362: PUSH
11363: LD_VAR 0 2
11367: PUSH
11368: LD_VAR 0 3
11372: ARRAY
11373: PPUSH
11374: LD_INT 3
11376: PPUSH
11377: CALL_OW 259
11381: PUSH
11382: LD_VAR 0 2
11386: PUSH
11387: LD_VAR 0 3
11391: ARRAY
11392: PPUSH
11393: CALL_OW 432
11397: MINUS
11398: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11399: LD_VAR 0 4
11403: PUSH
11404: LD_VAR 0 5
11408: PPUSH
11409: LD_INT 3
11411: PPUSH
11412: CALL_OW 259
11416: PUSH
11417: LD_VAR 0 5
11421: PPUSH
11422: CALL_OW 432
11426: MINUS
11427: GREATEREQUAL
11428: IFFALSE 11446
// mech := result [ i ] ;
11430: LD_ADDR_VAR 0 5
11434: PUSH
11435: LD_VAR 0 2
11439: PUSH
11440: LD_VAR 0 3
11444: ARRAY
11445: ST_TO_ADDR
// end ;
11446: GO 11355
11448: POP
11449: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11450: LD_VAR 0 1
11454: PPUSH
11455: LD_VAR 0 5
11459: PPUSH
11460: CALL_OW 135
// end ;
11464: LD_VAR 0 2
11468: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11469: LD_INT 0
11471: PPUSH
11472: PPUSH
11473: PPUSH
11474: PPUSH
11475: PPUSH
11476: PPUSH
11477: PPUSH
11478: PPUSH
11479: PPUSH
11480: PPUSH
11481: PPUSH
11482: PPUSH
11483: PPUSH
// result := [ ] ;
11484: LD_ADDR_VAR 0 7
11488: PUSH
11489: EMPTY
11490: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11491: LD_VAR 0 1
11495: PPUSH
11496: CALL_OW 266
11500: PUSH
11501: LD_INT 0
11503: PUSH
11504: LD_INT 1
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: IN
11511: NOT
11512: IFFALSE 11516
// exit ;
11514: GO 13150
// if name then
11516: LD_VAR 0 3
11520: IFFALSE 11536
// SetBName ( base_dep , name ) ;
11522: LD_VAR 0 1
11526: PPUSH
11527: LD_VAR 0 3
11531: PPUSH
11532: CALL_OW 500
// base := GetBase ( base_dep ) ;
11536: LD_ADDR_VAR 0 15
11540: PUSH
11541: LD_VAR 0 1
11545: PPUSH
11546: CALL_OW 274
11550: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11551: LD_ADDR_VAR 0 16
11555: PUSH
11556: LD_VAR 0 1
11560: PPUSH
11561: CALL_OW 255
11565: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11566: LD_ADDR_VAR 0 17
11570: PUSH
11571: LD_VAR 0 1
11575: PPUSH
11576: CALL_OW 248
11580: ST_TO_ADDR
// if sources then
11581: LD_VAR 0 5
11585: IFFALSE 11632
// for i = 1 to 3 do
11587: LD_ADDR_VAR 0 8
11591: PUSH
11592: DOUBLE
11593: LD_INT 1
11595: DEC
11596: ST_TO_ADDR
11597: LD_INT 3
11599: PUSH
11600: FOR_TO
11601: IFFALSE 11630
// AddResourceType ( base , i , sources [ i ] ) ;
11603: LD_VAR 0 15
11607: PPUSH
11608: LD_VAR 0 8
11612: PPUSH
11613: LD_VAR 0 5
11617: PUSH
11618: LD_VAR 0 8
11622: ARRAY
11623: PPUSH
11624: CALL_OW 276
11628: GO 11600
11630: POP
11631: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11632: LD_ADDR_VAR 0 18
11636: PUSH
11637: LD_VAR 0 15
11641: PPUSH
11642: LD_VAR 0 2
11646: PPUSH
11647: LD_INT 1
11649: PPUSH
11650: CALL 10893 0 3
11654: ST_TO_ADDR
// InitHc ;
11655: CALL_OW 19
// InitUc ;
11659: CALL_OW 18
// uc_side := side ;
11663: LD_ADDR_OWVAR 20
11667: PUSH
11668: LD_VAR 0 16
11672: ST_TO_ADDR
// uc_nation := nation ;
11673: LD_ADDR_OWVAR 21
11677: PUSH
11678: LD_VAR 0 17
11682: ST_TO_ADDR
// if buildings then
11683: LD_VAR 0 18
11687: IFFALSE 13009
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11689: LD_ADDR_VAR 0 19
11693: PUSH
11694: LD_VAR 0 18
11698: PPUSH
11699: LD_INT 2
11701: PUSH
11702: LD_INT 30
11704: PUSH
11705: LD_INT 29
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PUSH
11712: LD_INT 30
11714: PUSH
11715: LD_INT 30
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: LIST
11726: PPUSH
11727: CALL_OW 72
11731: ST_TO_ADDR
// if tmp then
11732: LD_VAR 0 19
11736: IFFALSE 11784
// for i in tmp do
11738: LD_ADDR_VAR 0 8
11742: PUSH
11743: LD_VAR 0 19
11747: PUSH
11748: FOR_IN
11749: IFFALSE 11782
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11751: LD_VAR 0 8
11755: PPUSH
11756: CALL_OW 250
11760: PPUSH
11761: LD_VAR 0 8
11765: PPUSH
11766: CALL_OW 251
11770: PPUSH
11771: LD_VAR 0 16
11775: PPUSH
11776: CALL_OW 441
11780: GO 11748
11782: POP
11783: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11784: LD_VAR 0 18
11788: PPUSH
11789: LD_INT 2
11791: PUSH
11792: LD_INT 30
11794: PUSH
11795: LD_INT 32
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 30
11804: PUSH
11805: LD_INT 33
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: LIST
11816: PPUSH
11817: CALL_OW 72
11821: IFFALSE 11909
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11823: LD_ADDR_VAR 0 8
11827: PUSH
11828: LD_VAR 0 18
11832: PPUSH
11833: LD_INT 2
11835: PUSH
11836: LD_INT 30
11838: PUSH
11839: LD_INT 32
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 30
11848: PUSH
11849: LD_INT 33
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: LIST
11860: PPUSH
11861: CALL_OW 72
11865: PUSH
11866: FOR_IN
11867: IFFALSE 11907
// begin if not GetBWeapon ( i ) then
11869: LD_VAR 0 8
11873: PPUSH
11874: CALL_OW 269
11878: NOT
11879: IFFALSE 11905
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11881: LD_VAR 0 8
11885: PPUSH
11886: LD_VAR 0 8
11890: PPUSH
11891: LD_VAR 0 2
11895: PPUSH
11896: CALL 13155 0 2
11900: PPUSH
11901: CALL_OW 431
// end ;
11905: GO 11866
11907: POP
11908: POP
// end ; for i = 1 to personel do
11909: LD_ADDR_VAR 0 8
11913: PUSH
11914: DOUBLE
11915: LD_INT 1
11917: DEC
11918: ST_TO_ADDR
11919: LD_VAR 0 6
11923: PUSH
11924: FOR_TO
11925: IFFALSE 12989
// begin if i > 4 then
11927: LD_VAR 0 8
11931: PUSH
11932: LD_INT 4
11934: GREATER
11935: IFFALSE 11939
// break ;
11937: GO 12989
// case i of 1 :
11939: LD_VAR 0 8
11943: PUSH
11944: LD_INT 1
11946: DOUBLE
11947: EQUAL
11948: IFTRUE 11952
11950: GO 12032
11952: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11953: LD_ADDR_VAR 0 12
11957: PUSH
11958: LD_VAR 0 18
11962: PPUSH
11963: LD_INT 22
11965: PUSH
11966: LD_VAR 0 16
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 58
11977: PUSH
11978: EMPTY
11979: LIST
11980: PUSH
11981: LD_INT 2
11983: PUSH
11984: LD_INT 30
11986: PUSH
11987: LD_INT 32
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 30
11996: PUSH
11997: LD_INT 4
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 30
12006: PUSH
12007: LD_INT 5
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: LIST
12024: PPUSH
12025: CALL_OW 72
12029: ST_TO_ADDR
12030: GO 12254
12032: LD_INT 2
12034: DOUBLE
12035: EQUAL
12036: IFTRUE 12040
12038: GO 12102
12040: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12041: LD_ADDR_VAR 0 12
12045: PUSH
12046: LD_VAR 0 18
12050: PPUSH
12051: LD_INT 22
12053: PUSH
12054: LD_VAR 0 16
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 2
12065: PUSH
12066: LD_INT 30
12068: PUSH
12069: LD_INT 0
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 30
12078: PUSH
12079: LD_INT 1
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PPUSH
12095: CALL_OW 72
12099: ST_TO_ADDR
12100: GO 12254
12102: LD_INT 3
12104: DOUBLE
12105: EQUAL
12106: IFTRUE 12110
12108: GO 12172
12110: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12111: LD_ADDR_VAR 0 12
12115: PUSH
12116: LD_VAR 0 18
12120: PPUSH
12121: LD_INT 22
12123: PUSH
12124: LD_VAR 0 16
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 2
12135: PUSH
12136: LD_INT 30
12138: PUSH
12139: LD_INT 2
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: LD_INT 30
12148: PUSH
12149: LD_INT 3
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: LIST
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PPUSH
12165: CALL_OW 72
12169: ST_TO_ADDR
12170: GO 12254
12172: LD_INT 4
12174: DOUBLE
12175: EQUAL
12176: IFTRUE 12180
12178: GO 12253
12180: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12181: LD_ADDR_VAR 0 12
12185: PUSH
12186: LD_VAR 0 18
12190: PPUSH
12191: LD_INT 22
12193: PUSH
12194: LD_VAR 0 16
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PUSH
12203: LD_INT 2
12205: PUSH
12206: LD_INT 30
12208: PUSH
12209: LD_INT 6
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: LD_INT 30
12218: PUSH
12219: LD_INT 7
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 30
12228: PUSH
12229: LD_INT 8
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PPUSH
12246: CALL_OW 72
12250: ST_TO_ADDR
12251: GO 12254
12253: POP
// if i = 1 then
12254: LD_VAR 0 8
12258: PUSH
12259: LD_INT 1
12261: EQUAL
12262: IFFALSE 12373
// begin tmp := [ ] ;
12264: LD_ADDR_VAR 0 19
12268: PUSH
12269: EMPTY
12270: ST_TO_ADDR
// for j in f do
12271: LD_ADDR_VAR 0 9
12275: PUSH
12276: LD_VAR 0 12
12280: PUSH
12281: FOR_IN
12282: IFFALSE 12355
// if GetBType ( j ) = b_bunker then
12284: LD_VAR 0 9
12288: PPUSH
12289: CALL_OW 266
12293: PUSH
12294: LD_INT 32
12296: EQUAL
12297: IFFALSE 12324
// tmp := Insert ( tmp , 1 , j ) else
12299: LD_ADDR_VAR 0 19
12303: PUSH
12304: LD_VAR 0 19
12308: PPUSH
12309: LD_INT 1
12311: PPUSH
12312: LD_VAR 0 9
12316: PPUSH
12317: CALL_OW 2
12321: ST_TO_ADDR
12322: GO 12353
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12324: LD_ADDR_VAR 0 19
12328: PUSH
12329: LD_VAR 0 19
12333: PPUSH
12334: LD_VAR 0 19
12338: PUSH
12339: LD_INT 1
12341: PLUS
12342: PPUSH
12343: LD_VAR 0 9
12347: PPUSH
12348: CALL_OW 2
12352: ST_TO_ADDR
12353: GO 12281
12355: POP
12356: POP
// if tmp then
12357: LD_VAR 0 19
12361: IFFALSE 12373
// f := tmp ;
12363: LD_ADDR_VAR 0 12
12367: PUSH
12368: LD_VAR 0 19
12372: ST_TO_ADDR
// end ; x := personel [ i ] ;
12373: LD_ADDR_VAR 0 13
12377: PUSH
12378: LD_VAR 0 6
12382: PUSH
12383: LD_VAR 0 8
12387: ARRAY
12388: ST_TO_ADDR
// if x = - 1 then
12389: LD_VAR 0 13
12393: PUSH
12394: LD_INT 1
12396: NEG
12397: EQUAL
12398: IFFALSE 12607
// begin for j in f do
12400: LD_ADDR_VAR 0 9
12404: PUSH
12405: LD_VAR 0 12
12409: PUSH
12410: FOR_IN
12411: IFFALSE 12603
// repeat InitHc ;
12413: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12417: LD_VAR 0 9
12421: PPUSH
12422: CALL_OW 266
12426: PUSH
12427: LD_INT 5
12429: EQUAL
12430: IFFALSE 12500
// begin if UnitsInside ( j ) < 3 then
12432: LD_VAR 0 9
12436: PPUSH
12437: CALL_OW 313
12441: PUSH
12442: LD_INT 3
12444: LESS
12445: IFFALSE 12481
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12447: LD_INT 0
12449: PPUSH
12450: LD_INT 5
12452: PUSH
12453: LD_INT 8
12455: PUSH
12456: LD_INT 9
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: LIST
12463: PUSH
12464: LD_VAR 0 17
12468: ARRAY
12469: PPUSH
12470: LD_VAR 0 4
12474: PPUSH
12475: CALL_OW 380
12479: GO 12498
// PrepareHuman ( false , i , skill ) ;
12481: LD_INT 0
12483: PPUSH
12484: LD_VAR 0 8
12488: PPUSH
12489: LD_VAR 0 4
12493: PPUSH
12494: CALL_OW 380
// end else
12498: GO 12517
// PrepareHuman ( false , i , skill ) ;
12500: LD_INT 0
12502: PPUSH
12503: LD_VAR 0 8
12507: PPUSH
12508: LD_VAR 0 4
12512: PPUSH
12513: CALL_OW 380
// un := CreateHuman ;
12517: LD_ADDR_VAR 0 14
12521: PUSH
12522: CALL_OW 44
12526: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12527: LD_ADDR_VAR 0 7
12531: PUSH
12532: LD_VAR 0 7
12536: PPUSH
12537: LD_INT 1
12539: PPUSH
12540: LD_VAR 0 14
12544: PPUSH
12545: CALL_OW 2
12549: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12550: LD_VAR 0 14
12554: PPUSH
12555: LD_VAR 0 9
12559: PPUSH
12560: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12564: LD_VAR 0 9
12568: PPUSH
12569: CALL_OW 313
12573: PUSH
12574: LD_INT 6
12576: EQUAL
12577: PUSH
12578: LD_VAR 0 9
12582: PPUSH
12583: CALL_OW 266
12587: PUSH
12588: LD_INT 32
12590: PUSH
12591: LD_INT 31
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: IN
12598: OR
12599: IFFALSE 12413
12601: GO 12410
12603: POP
12604: POP
// end else
12605: GO 12987
// for j = 1 to x do
12607: LD_ADDR_VAR 0 9
12611: PUSH
12612: DOUBLE
12613: LD_INT 1
12615: DEC
12616: ST_TO_ADDR
12617: LD_VAR 0 13
12621: PUSH
12622: FOR_TO
12623: IFFALSE 12985
// begin InitHc ;
12625: CALL_OW 19
// if not f then
12629: LD_VAR 0 12
12633: NOT
12634: IFFALSE 12723
// begin PrepareHuman ( false , i , skill ) ;
12636: LD_INT 0
12638: PPUSH
12639: LD_VAR 0 8
12643: PPUSH
12644: LD_VAR 0 4
12648: PPUSH
12649: CALL_OW 380
// un := CreateHuman ;
12653: LD_ADDR_VAR 0 14
12657: PUSH
12658: CALL_OW 44
12662: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12663: LD_ADDR_VAR 0 7
12667: PUSH
12668: LD_VAR 0 7
12672: PPUSH
12673: LD_INT 1
12675: PPUSH
12676: LD_VAR 0 14
12680: PPUSH
12681: CALL_OW 2
12685: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12686: LD_VAR 0 14
12690: PPUSH
12691: LD_VAR 0 1
12695: PPUSH
12696: CALL_OW 250
12700: PPUSH
12701: LD_VAR 0 1
12705: PPUSH
12706: CALL_OW 251
12710: PPUSH
12711: LD_INT 10
12713: PPUSH
12714: LD_INT 0
12716: PPUSH
12717: CALL_OW 50
// continue ;
12721: GO 12622
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12723: LD_VAR 0 12
12727: PUSH
12728: LD_INT 1
12730: ARRAY
12731: PPUSH
12732: CALL_OW 313
12736: PUSH
12737: LD_VAR 0 12
12741: PUSH
12742: LD_INT 1
12744: ARRAY
12745: PPUSH
12746: CALL_OW 266
12750: PUSH
12751: LD_INT 32
12753: PUSH
12754: LD_INT 31
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: IN
12761: AND
12762: PUSH
12763: LD_VAR 0 12
12767: PUSH
12768: LD_INT 1
12770: ARRAY
12771: PPUSH
12772: CALL_OW 313
12776: PUSH
12777: LD_INT 6
12779: EQUAL
12780: OR
12781: IFFALSE 12801
// f := Delete ( f , 1 ) ;
12783: LD_ADDR_VAR 0 12
12787: PUSH
12788: LD_VAR 0 12
12792: PPUSH
12793: LD_INT 1
12795: PPUSH
12796: CALL_OW 3
12800: ST_TO_ADDR
// if not f then
12801: LD_VAR 0 12
12805: NOT
12806: IFFALSE 12824
// begin x := x + 2 ;
12808: LD_ADDR_VAR 0 13
12812: PUSH
12813: LD_VAR 0 13
12817: PUSH
12818: LD_INT 2
12820: PLUS
12821: ST_TO_ADDR
// continue ;
12822: GO 12622
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12824: LD_VAR 0 12
12828: PUSH
12829: LD_INT 1
12831: ARRAY
12832: PPUSH
12833: CALL_OW 266
12837: PUSH
12838: LD_INT 5
12840: EQUAL
12841: IFFALSE 12915
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12843: LD_VAR 0 12
12847: PUSH
12848: LD_INT 1
12850: ARRAY
12851: PPUSH
12852: CALL_OW 313
12856: PUSH
12857: LD_INT 3
12859: LESS
12860: IFFALSE 12896
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12862: LD_INT 0
12864: PPUSH
12865: LD_INT 5
12867: PUSH
12868: LD_INT 8
12870: PUSH
12871: LD_INT 9
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: LIST
12878: PUSH
12879: LD_VAR 0 17
12883: ARRAY
12884: PPUSH
12885: LD_VAR 0 4
12889: PPUSH
12890: CALL_OW 380
12894: GO 12913
// PrepareHuman ( false , i , skill ) ;
12896: LD_INT 0
12898: PPUSH
12899: LD_VAR 0 8
12903: PPUSH
12904: LD_VAR 0 4
12908: PPUSH
12909: CALL_OW 380
// end else
12913: GO 12932
// PrepareHuman ( false , i , skill ) ;
12915: LD_INT 0
12917: PPUSH
12918: LD_VAR 0 8
12922: PPUSH
12923: LD_VAR 0 4
12927: PPUSH
12928: CALL_OW 380
// un := CreateHuman ;
12932: LD_ADDR_VAR 0 14
12936: PUSH
12937: CALL_OW 44
12941: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12942: LD_ADDR_VAR 0 7
12946: PUSH
12947: LD_VAR 0 7
12951: PPUSH
12952: LD_INT 1
12954: PPUSH
12955: LD_VAR 0 14
12959: PPUSH
12960: CALL_OW 2
12964: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12965: LD_VAR 0 14
12969: PPUSH
12970: LD_VAR 0 12
12974: PUSH
12975: LD_INT 1
12977: ARRAY
12978: PPUSH
12979: CALL_OW 52
// end ;
12983: GO 12622
12985: POP
12986: POP
// end ;
12987: GO 11924
12989: POP
12990: POP
// result := result ^ buildings ;
12991: LD_ADDR_VAR 0 7
12995: PUSH
12996: LD_VAR 0 7
13000: PUSH
13001: LD_VAR 0 18
13005: ADD
13006: ST_TO_ADDR
// end else
13007: GO 13150
// begin for i = 1 to personel do
13009: LD_ADDR_VAR 0 8
13013: PUSH
13014: DOUBLE
13015: LD_INT 1
13017: DEC
13018: ST_TO_ADDR
13019: LD_VAR 0 6
13023: PUSH
13024: FOR_TO
13025: IFFALSE 13148
// begin if i > 4 then
13027: LD_VAR 0 8
13031: PUSH
13032: LD_INT 4
13034: GREATER
13035: IFFALSE 13039
// break ;
13037: GO 13148
// x := personel [ i ] ;
13039: LD_ADDR_VAR 0 13
13043: PUSH
13044: LD_VAR 0 6
13048: PUSH
13049: LD_VAR 0 8
13053: ARRAY
13054: ST_TO_ADDR
// if x = - 1 then
13055: LD_VAR 0 13
13059: PUSH
13060: LD_INT 1
13062: NEG
13063: EQUAL
13064: IFFALSE 13068
// continue ;
13066: GO 13024
// PrepareHuman ( false , i , skill ) ;
13068: LD_INT 0
13070: PPUSH
13071: LD_VAR 0 8
13075: PPUSH
13076: LD_VAR 0 4
13080: PPUSH
13081: CALL_OW 380
// un := CreateHuman ;
13085: LD_ADDR_VAR 0 14
13089: PUSH
13090: CALL_OW 44
13094: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13095: LD_VAR 0 14
13099: PPUSH
13100: LD_VAR 0 1
13104: PPUSH
13105: CALL_OW 250
13109: PPUSH
13110: LD_VAR 0 1
13114: PPUSH
13115: CALL_OW 251
13119: PPUSH
13120: LD_INT 10
13122: PPUSH
13123: LD_INT 0
13125: PPUSH
13126: CALL_OW 50
// result := result ^ un ;
13130: LD_ADDR_VAR 0 7
13134: PUSH
13135: LD_VAR 0 7
13139: PUSH
13140: LD_VAR 0 14
13144: ADD
13145: ST_TO_ADDR
// end ;
13146: GO 13024
13148: POP
13149: POP
// end ; end ;
13150: LD_VAR 0 7
13154: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13155: LD_INT 0
13157: PPUSH
13158: PPUSH
13159: PPUSH
13160: PPUSH
13161: PPUSH
13162: PPUSH
13163: PPUSH
13164: PPUSH
13165: PPUSH
13166: PPUSH
13167: PPUSH
13168: PPUSH
13169: PPUSH
13170: PPUSH
13171: PPUSH
13172: PPUSH
// result := false ;
13173: LD_ADDR_VAR 0 3
13177: PUSH
13178: LD_INT 0
13180: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13181: LD_VAR 0 1
13185: NOT
13186: PUSH
13187: LD_VAR 0 1
13191: PPUSH
13192: CALL_OW 266
13196: PUSH
13197: LD_INT 32
13199: PUSH
13200: LD_INT 33
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: IN
13207: NOT
13208: OR
13209: IFFALSE 13213
// exit ;
13211: GO 14322
// nat := GetNation ( tower ) ;
13213: LD_ADDR_VAR 0 12
13217: PUSH
13218: LD_VAR 0 1
13222: PPUSH
13223: CALL_OW 248
13227: ST_TO_ADDR
// side := GetSide ( tower ) ;
13228: LD_ADDR_VAR 0 16
13232: PUSH
13233: LD_VAR 0 1
13237: PPUSH
13238: CALL_OW 255
13242: ST_TO_ADDR
// x := GetX ( tower ) ;
13243: LD_ADDR_VAR 0 10
13247: PUSH
13248: LD_VAR 0 1
13252: PPUSH
13253: CALL_OW 250
13257: ST_TO_ADDR
// y := GetY ( tower ) ;
13258: LD_ADDR_VAR 0 11
13262: PUSH
13263: LD_VAR 0 1
13267: PPUSH
13268: CALL_OW 251
13272: ST_TO_ADDR
// if not x or not y then
13273: LD_VAR 0 10
13277: NOT
13278: PUSH
13279: LD_VAR 0 11
13283: NOT
13284: OR
13285: IFFALSE 13289
// exit ;
13287: GO 14322
// weapon := 0 ;
13289: LD_ADDR_VAR 0 18
13293: PUSH
13294: LD_INT 0
13296: ST_TO_ADDR
// fac_list := [ ] ;
13297: LD_ADDR_VAR 0 17
13301: PUSH
13302: EMPTY
13303: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13304: LD_ADDR_VAR 0 6
13308: PUSH
13309: LD_VAR 0 1
13313: PPUSH
13314: CALL_OW 274
13318: PPUSH
13319: LD_VAR 0 2
13323: PPUSH
13324: LD_INT 0
13326: PPUSH
13327: CALL 10893 0 3
13331: PPUSH
13332: LD_INT 30
13334: PUSH
13335: LD_INT 3
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PPUSH
13342: CALL_OW 72
13346: ST_TO_ADDR
// if not factories then
13347: LD_VAR 0 6
13351: NOT
13352: IFFALSE 13356
// exit ;
13354: GO 14322
// for i in factories do
13356: LD_ADDR_VAR 0 8
13360: PUSH
13361: LD_VAR 0 6
13365: PUSH
13366: FOR_IN
13367: IFFALSE 13392
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13369: LD_ADDR_VAR 0 17
13373: PUSH
13374: LD_VAR 0 17
13378: PUSH
13379: LD_VAR 0 8
13383: PPUSH
13384: CALL_OW 478
13388: UNION
13389: ST_TO_ADDR
13390: GO 13366
13392: POP
13393: POP
// if not fac_list then
13394: LD_VAR 0 17
13398: NOT
13399: IFFALSE 13403
// exit ;
13401: GO 14322
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13403: LD_ADDR_VAR 0 5
13407: PUSH
13408: LD_INT 4
13410: PUSH
13411: LD_INT 5
13413: PUSH
13414: LD_INT 9
13416: PUSH
13417: LD_INT 10
13419: PUSH
13420: LD_INT 6
13422: PUSH
13423: LD_INT 7
13425: PUSH
13426: LD_INT 11
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 27
13440: PUSH
13441: LD_INT 28
13443: PUSH
13444: LD_INT 26
13446: PUSH
13447: LD_INT 30
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 43
13458: PUSH
13459: LD_INT 44
13461: PUSH
13462: LD_INT 46
13464: PUSH
13465: LD_INT 45
13467: PUSH
13468: LD_INT 47
13470: PUSH
13471: LD_INT 49
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: LD_VAR 0 12
13491: ARRAY
13492: ST_TO_ADDR
// list := list isect fac_list ;
13493: LD_ADDR_VAR 0 5
13497: PUSH
13498: LD_VAR 0 5
13502: PUSH
13503: LD_VAR 0 17
13507: ISECT
13508: ST_TO_ADDR
// if not list then
13509: LD_VAR 0 5
13513: NOT
13514: IFFALSE 13518
// exit ;
13516: GO 14322
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13518: LD_VAR 0 12
13522: PUSH
13523: LD_INT 3
13525: EQUAL
13526: PUSH
13527: LD_INT 49
13529: PUSH
13530: LD_VAR 0 5
13534: IN
13535: AND
13536: PUSH
13537: LD_INT 31
13539: PPUSH
13540: LD_VAR 0 16
13544: PPUSH
13545: CALL_OW 321
13549: PUSH
13550: LD_INT 2
13552: EQUAL
13553: AND
13554: IFFALSE 13614
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13556: LD_INT 22
13558: PUSH
13559: LD_VAR 0 16
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: LD_INT 35
13570: PUSH
13571: LD_INT 49
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 91
13580: PUSH
13581: LD_VAR 0 1
13585: PUSH
13586: LD_INT 10
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: LIST
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: LIST
13598: PPUSH
13599: CALL_OW 69
13603: NOT
13604: IFFALSE 13614
// weapon := ru_time_lapser ;
13606: LD_ADDR_VAR 0 18
13610: PUSH
13611: LD_INT 49
13613: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13614: LD_VAR 0 12
13618: PUSH
13619: LD_INT 1
13621: PUSH
13622: LD_INT 2
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: IN
13629: PUSH
13630: LD_INT 11
13632: PUSH
13633: LD_VAR 0 5
13637: IN
13638: PUSH
13639: LD_INT 30
13641: PUSH
13642: LD_VAR 0 5
13646: IN
13647: OR
13648: AND
13649: PUSH
13650: LD_INT 6
13652: PPUSH
13653: LD_VAR 0 16
13657: PPUSH
13658: CALL_OW 321
13662: PUSH
13663: LD_INT 2
13665: EQUAL
13666: AND
13667: IFFALSE 13832
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13669: LD_INT 22
13671: PUSH
13672: LD_VAR 0 16
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: LD_INT 2
13683: PUSH
13684: LD_INT 35
13686: PUSH
13687: LD_INT 11
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: LD_INT 35
13696: PUSH
13697: LD_INT 30
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 91
13711: PUSH
13712: LD_VAR 0 1
13716: PUSH
13717: LD_INT 18
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: PPUSH
13730: CALL_OW 69
13734: NOT
13735: PUSH
13736: LD_INT 22
13738: PUSH
13739: LD_VAR 0 16
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: LD_INT 2
13750: PUSH
13751: LD_INT 30
13753: PUSH
13754: LD_INT 32
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: LD_INT 30
13763: PUSH
13764: LD_INT 33
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 91
13778: PUSH
13779: LD_VAR 0 1
13783: PUSH
13784: LD_INT 12
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: LIST
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: LIST
13796: PUSH
13797: EMPTY
13798: LIST
13799: PPUSH
13800: CALL_OW 69
13804: PUSH
13805: LD_INT 2
13807: GREATER
13808: AND
13809: IFFALSE 13832
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13811: LD_ADDR_VAR 0 18
13815: PUSH
13816: LD_INT 11
13818: PUSH
13819: LD_INT 30
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: LD_VAR 0 12
13830: ARRAY
13831: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13832: LD_VAR 0 18
13836: NOT
13837: PUSH
13838: LD_INT 40
13840: PPUSH
13841: LD_VAR 0 16
13845: PPUSH
13846: CALL_OW 321
13850: PUSH
13851: LD_INT 2
13853: EQUAL
13854: AND
13855: PUSH
13856: LD_INT 7
13858: PUSH
13859: LD_VAR 0 5
13863: IN
13864: PUSH
13865: LD_INT 28
13867: PUSH
13868: LD_VAR 0 5
13872: IN
13873: OR
13874: PUSH
13875: LD_INT 45
13877: PUSH
13878: LD_VAR 0 5
13882: IN
13883: OR
13884: AND
13885: IFFALSE 14139
// begin hex := GetHexInfo ( x , y ) ;
13887: LD_ADDR_VAR 0 4
13891: PUSH
13892: LD_VAR 0 10
13896: PPUSH
13897: LD_VAR 0 11
13901: PPUSH
13902: CALL_OW 546
13906: ST_TO_ADDR
// if hex [ 1 ] then
13907: LD_VAR 0 4
13911: PUSH
13912: LD_INT 1
13914: ARRAY
13915: IFFALSE 13919
// exit ;
13917: GO 14322
// height := hex [ 2 ] ;
13919: LD_ADDR_VAR 0 15
13923: PUSH
13924: LD_VAR 0 4
13928: PUSH
13929: LD_INT 2
13931: ARRAY
13932: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13933: LD_ADDR_VAR 0 14
13937: PUSH
13938: LD_INT 0
13940: PUSH
13941: LD_INT 2
13943: PUSH
13944: LD_INT 3
13946: PUSH
13947: LD_INT 5
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: ST_TO_ADDR
// for i in tmp do
13956: LD_ADDR_VAR 0 8
13960: PUSH
13961: LD_VAR 0 14
13965: PUSH
13966: FOR_IN
13967: IFFALSE 14137
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13969: LD_ADDR_VAR 0 9
13973: PUSH
13974: LD_VAR 0 10
13978: PPUSH
13979: LD_VAR 0 8
13983: PPUSH
13984: LD_INT 5
13986: PPUSH
13987: CALL_OW 272
13991: PUSH
13992: LD_VAR 0 11
13996: PPUSH
13997: LD_VAR 0 8
14001: PPUSH
14002: LD_INT 5
14004: PPUSH
14005: CALL_OW 273
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14014: LD_VAR 0 9
14018: PUSH
14019: LD_INT 1
14021: ARRAY
14022: PPUSH
14023: LD_VAR 0 9
14027: PUSH
14028: LD_INT 2
14030: ARRAY
14031: PPUSH
14032: CALL_OW 488
14036: IFFALSE 14135
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14038: LD_ADDR_VAR 0 4
14042: PUSH
14043: LD_VAR 0 9
14047: PUSH
14048: LD_INT 1
14050: ARRAY
14051: PPUSH
14052: LD_VAR 0 9
14056: PUSH
14057: LD_INT 2
14059: ARRAY
14060: PPUSH
14061: CALL_OW 546
14065: ST_TO_ADDR
// if hex [ 1 ] then
14066: LD_VAR 0 4
14070: PUSH
14071: LD_INT 1
14073: ARRAY
14074: IFFALSE 14078
// continue ;
14076: GO 13966
// h := hex [ 2 ] ;
14078: LD_ADDR_VAR 0 13
14082: PUSH
14083: LD_VAR 0 4
14087: PUSH
14088: LD_INT 2
14090: ARRAY
14091: ST_TO_ADDR
// if h + 7 < height then
14092: LD_VAR 0 13
14096: PUSH
14097: LD_INT 7
14099: PLUS
14100: PUSH
14101: LD_VAR 0 15
14105: LESS
14106: IFFALSE 14135
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14108: LD_ADDR_VAR 0 18
14112: PUSH
14113: LD_INT 7
14115: PUSH
14116: LD_INT 28
14118: PUSH
14119: LD_INT 45
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: LIST
14126: PUSH
14127: LD_VAR 0 12
14131: ARRAY
14132: ST_TO_ADDR
// break ;
14133: GO 14137
// end ; end ; end ;
14135: GO 13966
14137: POP
14138: POP
// end ; if not weapon then
14139: LD_VAR 0 18
14143: NOT
14144: IFFALSE 14204
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14146: LD_ADDR_VAR 0 5
14150: PUSH
14151: LD_VAR 0 5
14155: PUSH
14156: LD_INT 11
14158: PUSH
14159: LD_INT 30
14161: PUSH
14162: LD_INT 49
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: LIST
14169: DIFF
14170: ST_TO_ADDR
// if not list then
14171: LD_VAR 0 5
14175: NOT
14176: IFFALSE 14180
// exit ;
14178: GO 14322
// weapon := list [ rand ( 1 , list ) ] ;
14180: LD_ADDR_VAR 0 18
14184: PUSH
14185: LD_VAR 0 5
14189: PUSH
14190: LD_INT 1
14192: PPUSH
14193: LD_VAR 0 5
14197: PPUSH
14198: CALL_OW 12
14202: ARRAY
14203: ST_TO_ADDR
// end ; if weapon then
14204: LD_VAR 0 18
14208: IFFALSE 14322
// begin tmp := CostOfWeapon ( weapon ) ;
14210: LD_ADDR_VAR 0 14
14214: PUSH
14215: LD_VAR 0 18
14219: PPUSH
14220: CALL_OW 451
14224: ST_TO_ADDR
// j := GetBase ( tower ) ;
14225: LD_ADDR_VAR 0 9
14229: PUSH
14230: LD_VAR 0 1
14234: PPUSH
14235: CALL_OW 274
14239: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14240: LD_VAR 0 9
14244: PPUSH
14245: LD_INT 1
14247: PPUSH
14248: CALL_OW 275
14252: PUSH
14253: LD_VAR 0 14
14257: PUSH
14258: LD_INT 1
14260: ARRAY
14261: GREATEREQUAL
14262: PUSH
14263: LD_VAR 0 9
14267: PPUSH
14268: LD_INT 2
14270: PPUSH
14271: CALL_OW 275
14275: PUSH
14276: LD_VAR 0 14
14280: PUSH
14281: LD_INT 2
14283: ARRAY
14284: GREATEREQUAL
14285: AND
14286: PUSH
14287: LD_VAR 0 9
14291: PPUSH
14292: LD_INT 3
14294: PPUSH
14295: CALL_OW 275
14299: PUSH
14300: LD_VAR 0 14
14304: PUSH
14305: LD_INT 3
14307: ARRAY
14308: GREATEREQUAL
14309: AND
14310: IFFALSE 14322
// result := weapon ;
14312: LD_ADDR_VAR 0 3
14316: PUSH
14317: LD_VAR 0 18
14321: ST_TO_ADDR
// end ; end ;
14322: LD_VAR 0 3
14326: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14327: LD_INT 0
14329: PPUSH
14330: PPUSH
// result := true ;
14331: LD_ADDR_VAR 0 3
14335: PUSH
14336: LD_INT 1
14338: ST_TO_ADDR
// if array1 = array2 then
14339: LD_VAR 0 1
14343: PUSH
14344: LD_VAR 0 2
14348: EQUAL
14349: IFFALSE 14409
// begin for i = 1 to array1 do
14351: LD_ADDR_VAR 0 4
14355: PUSH
14356: DOUBLE
14357: LD_INT 1
14359: DEC
14360: ST_TO_ADDR
14361: LD_VAR 0 1
14365: PUSH
14366: FOR_TO
14367: IFFALSE 14405
// if array1 [ i ] <> array2 [ i ] then
14369: LD_VAR 0 1
14373: PUSH
14374: LD_VAR 0 4
14378: ARRAY
14379: PUSH
14380: LD_VAR 0 2
14384: PUSH
14385: LD_VAR 0 4
14389: ARRAY
14390: NONEQUAL
14391: IFFALSE 14403
// begin result := false ;
14393: LD_ADDR_VAR 0 3
14397: PUSH
14398: LD_INT 0
14400: ST_TO_ADDR
// break ;
14401: GO 14405
// end ;
14403: GO 14366
14405: POP
14406: POP
// end else
14407: GO 14417
// result := false ;
14409: LD_ADDR_VAR 0 3
14413: PUSH
14414: LD_INT 0
14416: ST_TO_ADDR
// end ;
14417: LD_VAR 0 3
14421: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14422: LD_INT 0
14424: PPUSH
14425: PPUSH
// if not array1 or not array2 then
14426: LD_VAR 0 1
14430: NOT
14431: PUSH
14432: LD_VAR 0 2
14436: NOT
14437: OR
14438: IFFALSE 14442
// exit ;
14440: GO 14506
// result := true ;
14442: LD_ADDR_VAR 0 3
14446: PUSH
14447: LD_INT 1
14449: ST_TO_ADDR
// for i = 1 to array1 do
14450: LD_ADDR_VAR 0 4
14454: PUSH
14455: DOUBLE
14456: LD_INT 1
14458: DEC
14459: ST_TO_ADDR
14460: LD_VAR 0 1
14464: PUSH
14465: FOR_TO
14466: IFFALSE 14504
// if array1 [ i ] <> array2 [ i ] then
14468: LD_VAR 0 1
14472: PUSH
14473: LD_VAR 0 4
14477: ARRAY
14478: PUSH
14479: LD_VAR 0 2
14483: PUSH
14484: LD_VAR 0 4
14488: ARRAY
14489: NONEQUAL
14490: IFFALSE 14502
// begin result := false ;
14492: LD_ADDR_VAR 0 3
14496: PUSH
14497: LD_INT 0
14499: ST_TO_ADDR
// break ;
14500: GO 14504
// end ;
14502: GO 14465
14504: POP
14505: POP
// end ;
14506: LD_VAR 0 3
14510: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14511: LD_INT 0
14513: PPUSH
14514: PPUSH
14515: PPUSH
// pom := GetBase ( fac ) ;
14516: LD_ADDR_VAR 0 5
14520: PUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 274
14530: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14531: LD_ADDR_VAR 0 4
14535: PUSH
14536: LD_VAR 0 2
14540: PUSH
14541: LD_INT 1
14543: ARRAY
14544: PPUSH
14545: LD_VAR 0 2
14549: PUSH
14550: LD_INT 2
14552: ARRAY
14553: PPUSH
14554: LD_VAR 0 2
14558: PUSH
14559: LD_INT 3
14561: ARRAY
14562: PPUSH
14563: LD_VAR 0 2
14567: PUSH
14568: LD_INT 4
14570: ARRAY
14571: PPUSH
14572: CALL_OW 449
14576: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14577: LD_ADDR_VAR 0 3
14581: PUSH
14582: LD_VAR 0 5
14586: PPUSH
14587: LD_INT 1
14589: PPUSH
14590: CALL_OW 275
14594: PUSH
14595: LD_VAR 0 4
14599: PUSH
14600: LD_INT 1
14602: ARRAY
14603: GREATEREQUAL
14604: PUSH
14605: LD_VAR 0 5
14609: PPUSH
14610: LD_INT 2
14612: PPUSH
14613: CALL_OW 275
14617: PUSH
14618: LD_VAR 0 4
14622: PUSH
14623: LD_INT 2
14625: ARRAY
14626: GREATEREQUAL
14627: AND
14628: PUSH
14629: LD_VAR 0 5
14633: PPUSH
14634: LD_INT 3
14636: PPUSH
14637: CALL_OW 275
14641: PUSH
14642: LD_VAR 0 4
14646: PUSH
14647: LD_INT 3
14649: ARRAY
14650: GREATEREQUAL
14651: AND
14652: ST_TO_ADDR
// end ;
14653: LD_VAR 0 3
14657: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14658: LD_INT 0
14660: PPUSH
14661: PPUSH
14662: PPUSH
14663: PPUSH
// pom := GetBase ( building ) ;
14664: LD_ADDR_VAR 0 3
14668: PUSH
14669: LD_VAR 0 1
14673: PPUSH
14674: CALL_OW 274
14678: ST_TO_ADDR
// if not pom then
14679: LD_VAR 0 3
14683: NOT
14684: IFFALSE 14688
// exit ;
14686: GO 14858
// btype := GetBType ( building ) ;
14688: LD_ADDR_VAR 0 5
14692: PUSH
14693: LD_VAR 0 1
14697: PPUSH
14698: CALL_OW 266
14702: ST_TO_ADDR
// if btype = b_armoury then
14703: LD_VAR 0 5
14707: PUSH
14708: LD_INT 4
14710: EQUAL
14711: IFFALSE 14721
// btype := b_barracks ;
14713: LD_ADDR_VAR 0 5
14717: PUSH
14718: LD_INT 5
14720: ST_TO_ADDR
// if btype = b_depot then
14721: LD_VAR 0 5
14725: PUSH
14726: LD_INT 0
14728: EQUAL
14729: IFFALSE 14739
// btype := b_warehouse ;
14731: LD_ADDR_VAR 0 5
14735: PUSH
14736: LD_INT 1
14738: ST_TO_ADDR
// if btype = b_workshop then
14739: LD_VAR 0 5
14743: PUSH
14744: LD_INT 2
14746: EQUAL
14747: IFFALSE 14757
// btype := b_factory ;
14749: LD_ADDR_VAR 0 5
14753: PUSH
14754: LD_INT 3
14756: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14757: LD_ADDR_VAR 0 4
14761: PUSH
14762: LD_VAR 0 5
14766: PPUSH
14767: LD_VAR 0 1
14771: PPUSH
14772: CALL_OW 248
14776: PPUSH
14777: CALL_OW 450
14781: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14782: LD_ADDR_VAR 0 2
14786: PUSH
14787: LD_VAR 0 3
14791: PPUSH
14792: LD_INT 1
14794: PPUSH
14795: CALL_OW 275
14799: PUSH
14800: LD_VAR 0 4
14804: PUSH
14805: LD_INT 1
14807: ARRAY
14808: GREATEREQUAL
14809: PUSH
14810: LD_VAR 0 3
14814: PPUSH
14815: LD_INT 2
14817: PPUSH
14818: CALL_OW 275
14822: PUSH
14823: LD_VAR 0 4
14827: PUSH
14828: LD_INT 2
14830: ARRAY
14831: GREATEREQUAL
14832: AND
14833: PUSH
14834: LD_VAR 0 3
14838: PPUSH
14839: LD_INT 3
14841: PPUSH
14842: CALL_OW 275
14846: PUSH
14847: LD_VAR 0 4
14851: PUSH
14852: LD_INT 3
14854: ARRAY
14855: GREATEREQUAL
14856: AND
14857: ST_TO_ADDR
// end ;
14858: LD_VAR 0 2
14862: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14863: LD_INT 0
14865: PPUSH
14866: PPUSH
14867: PPUSH
// pom := GetBase ( building ) ;
14868: LD_ADDR_VAR 0 4
14872: PUSH
14873: LD_VAR 0 1
14877: PPUSH
14878: CALL_OW 274
14882: ST_TO_ADDR
// if not pom then
14883: LD_VAR 0 4
14887: NOT
14888: IFFALSE 14892
// exit ;
14890: GO 14993
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14892: LD_ADDR_VAR 0 5
14896: PUSH
14897: LD_VAR 0 2
14901: PPUSH
14902: LD_VAR 0 1
14906: PPUSH
14907: CALL_OW 248
14911: PPUSH
14912: CALL_OW 450
14916: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14917: LD_ADDR_VAR 0 3
14921: PUSH
14922: LD_VAR 0 4
14926: PPUSH
14927: LD_INT 1
14929: PPUSH
14930: CALL_OW 275
14934: PUSH
14935: LD_VAR 0 5
14939: PUSH
14940: LD_INT 1
14942: ARRAY
14943: GREATEREQUAL
14944: PUSH
14945: LD_VAR 0 4
14949: PPUSH
14950: LD_INT 2
14952: PPUSH
14953: CALL_OW 275
14957: PUSH
14958: LD_VAR 0 5
14962: PUSH
14963: LD_INT 2
14965: ARRAY
14966: GREATEREQUAL
14967: AND
14968: PUSH
14969: LD_VAR 0 4
14973: PPUSH
14974: LD_INT 3
14976: PPUSH
14977: CALL_OW 275
14981: PUSH
14982: LD_VAR 0 5
14986: PUSH
14987: LD_INT 3
14989: ARRAY
14990: GREATEREQUAL
14991: AND
14992: ST_TO_ADDR
// end ;
14993: LD_VAR 0 3
14997: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14998: LD_INT 0
15000: PPUSH
15001: PPUSH
15002: PPUSH
15003: PPUSH
15004: PPUSH
15005: PPUSH
15006: PPUSH
15007: PPUSH
15008: PPUSH
15009: PPUSH
15010: PPUSH
// result := false ;
15011: LD_ADDR_VAR 0 8
15015: PUSH
15016: LD_INT 0
15018: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15019: LD_VAR 0 5
15023: NOT
15024: PUSH
15025: LD_VAR 0 1
15029: NOT
15030: OR
15031: PUSH
15032: LD_VAR 0 2
15036: NOT
15037: OR
15038: PUSH
15039: LD_VAR 0 3
15043: NOT
15044: OR
15045: IFFALSE 15049
// exit ;
15047: GO 15863
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15049: LD_ADDR_VAR 0 14
15053: PUSH
15054: LD_VAR 0 1
15058: PPUSH
15059: LD_VAR 0 2
15063: PPUSH
15064: LD_VAR 0 3
15068: PPUSH
15069: LD_VAR 0 4
15073: PPUSH
15074: LD_VAR 0 5
15078: PUSH
15079: LD_INT 1
15081: ARRAY
15082: PPUSH
15083: CALL_OW 248
15087: PPUSH
15088: LD_INT 0
15090: PPUSH
15091: CALL 17116 0 6
15095: ST_TO_ADDR
// if not hexes then
15096: LD_VAR 0 14
15100: NOT
15101: IFFALSE 15105
// exit ;
15103: GO 15863
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15105: LD_ADDR_VAR 0 17
15109: PUSH
15110: LD_VAR 0 5
15114: PPUSH
15115: LD_INT 22
15117: PUSH
15118: LD_VAR 0 13
15122: PPUSH
15123: CALL_OW 255
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PUSH
15132: LD_INT 2
15134: PUSH
15135: LD_INT 30
15137: PUSH
15138: LD_INT 0
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: LD_INT 30
15147: PUSH
15148: LD_INT 1
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: LIST
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PPUSH
15164: CALL_OW 72
15168: ST_TO_ADDR
// for i = 1 to hexes do
15169: LD_ADDR_VAR 0 9
15173: PUSH
15174: DOUBLE
15175: LD_INT 1
15177: DEC
15178: ST_TO_ADDR
15179: LD_VAR 0 14
15183: PUSH
15184: FOR_TO
15185: IFFALSE 15861
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15187: LD_ADDR_VAR 0 13
15191: PUSH
15192: LD_VAR 0 14
15196: PUSH
15197: LD_VAR 0 9
15201: ARRAY
15202: PUSH
15203: LD_INT 1
15205: ARRAY
15206: PPUSH
15207: LD_VAR 0 14
15211: PUSH
15212: LD_VAR 0 9
15216: ARRAY
15217: PUSH
15218: LD_INT 2
15220: ARRAY
15221: PPUSH
15222: CALL_OW 428
15226: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15227: LD_VAR 0 14
15231: PUSH
15232: LD_VAR 0 9
15236: ARRAY
15237: PUSH
15238: LD_INT 1
15240: ARRAY
15241: PPUSH
15242: LD_VAR 0 14
15246: PUSH
15247: LD_VAR 0 9
15251: ARRAY
15252: PUSH
15253: LD_INT 2
15255: ARRAY
15256: PPUSH
15257: CALL_OW 351
15261: PUSH
15262: LD_VAR 0 14
15266: PUSH
15267: LD_VAR 0 9
15271: ARRAY
15272: PUSH
15273: LD_INT 1
15275: ARRAY
15276: PPUSH
15277: LD_VAR 0 14
15281: PUSH
15282: LD_VAR 0 9
15286: ARRAY
15287: PUSH
15288: LD_INT 2
15290: ARRAY
15291: PPUSH
15292: CALL_OW 488
15296: NOT
15297: OR
15298: PUSH
15299: LD_VAR 0 13
15303: PPUSH
15304: CALL_OW 247
15308: PUSH
15309: LD_INT 3
15311: EQUAL
15312: OR
15313: IFFALSE 15319
// exit ;
15315: POP
15316: POP
15317: GO 15863
// if not tmp then
15319: LD_VAR 0 13
15323: NOT
15324: IFFALSE 15328
// continue ;
15326: GO 15184
// result := true ;
15328: LD_ADDR_VAR 0 8
15332: PUSH
15333: LD_INT 1
15335: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15336: LD_VAR 0 6
15340: PUSH
15341: LD_VAR 0 13
15345: PPUSH
15346: CALL_OW 247
15350: PUSH
15351: LD_INT 2
15353: EQUAL
15354: AND
15355: PUSH
15356: LD_VAR 0 13
15360: PPUSH
15361: CALL_OW 263
15365: PUSH
15366: LD_INT 1
15368: EQUAL
15369: AND
15370: IFFALSE 15534
// begin if IsDrivenBy ( tmp ) then
15372: LD_VAR 0 13
15376: PPUSH
15377: CALL_OW 311
15381: IFFALSE 15385
// continue ;
15383: GO 15184
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15385: LD_VAR 0 6
15389: PPUSH
15390: LD_INT 3
15392: PUSH
15393: LD_INT 60
15395: PUSH
15396: EMPTY
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 3
15405: PUSH
15406: LD_INT 55
15408: PUSH
15409: EMPTY
15410: LIST
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PPUSH
15420: CALL_OW 72
15424: IFFALSE 15532
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15426: LD_ADDR_VAR 0 18
15430: PUSH
15431: LD_VAR 0 6
15435: PPUSH
15436: LD_INT 3
15438: PUSH
15439: LD_INT 60
15441: PUSH
15442: EMPTY
15443: LIST
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 3
15451: PUSH
15452: LD_INT 55
15454: PUSH
15455: EMPTY
15456: LIST
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PPUSH
15466: CALL_OW 72
15470: PUSH
15471: LD_INT 1
15473: ARRAY
15474: ST_TO_ADDR
// if IsInUnit ( driver ) then
15475: LD_VAR 0 18
15479: PPUSH
15480: CALL_OW 310
15484: IFFALSE 15495
// ComExit ( driver ) ;
15486: LD_VAR 0 18
15490: PPUSH
15491: CALL 40917 0 1
// AddComEnterUnit ( driver , tmp ) ;
15495: LD_VAR 0 18
15499: PPUSH
15500: LD_VAR 0 13
15504: PPUSH
15505: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15509: LD_VAR 0 18
15513: PPUSH
15514: LD_VAR 0 7
15518: PPUSH
15519: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15523: LD_VAR 0 18
15527: PPUSH
15528: CALL_OW 181
// end ; continue ;
15532: GO 15184
// end ; if not cleaners or not tmp in cleaners then
15534: LD_VAR 0 6
15538: NOT
15539: PUSH
15540: LD_VAR 0 13
15544: PUSH
15545: LD_VAR 0 6
15549: IN
15550: NOT
15551: OR
15552: IFFALSE 15859
// begin if dep then
15554: LD_VAR 0 17
15558: IFFALSE 15694
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15560: LD_ADDR_VAR 0 16
15564: PUSH
15565: LD_VAR 0 17
15569: PUSH
15570: LD_INT 1
15572: ARRAY
15573: PPUSH
15574: CALL_OW 250
15578: PPUSH
15579: LD_VAR 0 17
15583: PUSH
15584: LD_INT 1
15586: ARRAY
15587: PPUSH
15588: CALL_OW 254
15592: PPUSH
15593: LD_INT 5
15595: PPUSH
15596: CALL_OW 272
15600: PUSH
15601: LD_VAR 0 17
15605: PUSH
15606: LD_INT 1
15608: ARRAY
15609: PPUSH
15610: CALL_OW 251
15614: PPUSH
15615: LD_VAR 0 17
15619: PUSH
15620: LD_INT 1
15622: ARRAY
15623: PPUSH
15624: CALL_OW 254
15628: PPUSH
15629: LD_INT 5
15631: PPUSH
15632: CALL_OW 273
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15641: LD_VAR 0 16
15645: PUSH
15646: LD_INT 1
15648: ARRAY
15649: PPUSH
15650: LD_VAR 0 16
15654: PUSH
15655: LD_INT 2
15657: ARRAY
15658: PPUSH
15659: CALL_OW 488
15663: IFFALSE 15694
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15665: LD_VAR 0 13
15669: PPUSH
15670: LD_VAR 0 16
15674: PUSH
15675: LD_INT 1
15677: ARRAY
15678: PPUSH
15679: LD_VAR 0 16
15683: PUSH
15684: LD_INT 2
15686: ARRAY
15687: PPUSH
15688: CALL_OW 111
// continue ;
15692: GO 15184
// end ; end ; r := GetDir ( tmp ) ;
15694: LD_ADDR_VAR 0 15
15698: PUSH
15699: LD_VAR 0 13
15703: PPUSH
15704: CALL_OW 254
15708: ST_TO_ADDR
// if r = 5 then
15709: LD_VAR 0 15
15713: PUSH
15714: LD_INT 5
15716: EQUAL
15717: IFFALSE 15727
// r := 0 ;
15719: LD_ADDR_VAR 0 15
15723: PUSH
15724: LD_INT 0
15726: ST_TO_ADDR
// for j = r to 5 do
15727: LD_ADDR_VAR 0 10
15731: PUSH
15732: DOUBLE
15733: LD_VAR 0 15
15737: DEC
15738: ST_TO_ADDR
15739: LD_INT 5
15741: PUSH
15742: FOR_TO
15743: IFFALSE 15857
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15745: LD_ADDR_VAR 0 11
15749: PUSH
15750: LD_VAR 0 13
15754: PPUSH
15755: CALL_OW 250
15759: PPUSH
15760: LD_VAR 0 10
15764: PPUSH
15765: LD_INT 2
15767: PPUSH
15768: CALL_OW 272
15772: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15773: LD_ADDR_VAR 0 12
15777: PUSH
15778: LD_VAR 0 13
15782: PPUSH
15783: CALL_OW 251
15787: PPUSH
15788: LD_VAR 0 10
15792: PPUSH
15793: LD_INT 2
15795: PPUSH
15796: CALL_OW 273
15800: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15801: LD_VAR 0 11
15805: PPUSH
15806: LD_VAR 0 12
15810: PPUSH
15811: CALL_OW 488
15815: PUSH
15816: LD_VAR 0 11
15820: PPUSH
15821: LD_VAR 0 12
15825: PPUSH
15826: CALL_OW 428
15830: NOT
15831: AND
15832: IFFALSE 15855
// begin ComMoveXY ( tmp , _x , _y ) ;
15834: LD_VAR 0 13
15838: PPUSH
15839: LD_VAR 0 11
15843: PPUSH
15844: LD_VAR 0 12
15848: PPUSH
15849: CALL_OW 111
// break ;
15853: GO 15857
// end ; end ;
15855: GO 15742
15857: POP
15858: POP
// end ; end ;
15859: GO 15184
15861: POP
15862: POP
// end ;
15863: LD_VAR 0 8
15867: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15868: LD_INT 0
15870: PPUSH
// result := true ;
15871: LD_ADDR_VAR 0 3
15875: PUSH
15876: LD_INT 1
15878: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15879: LD_VAR 0 2
15883: PUSH
15884: LD_INT 24
15886: DOUBLE
15887: EQUAL
15888: IFTRUE 15898
15890: LD_INT 33
15892: DOUBLE
15893: EQUAL
15894: IFTRUE 15898
15896: GO 15923
15898: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15899: LD_ADDR_VAR 0 3
15903: PUSH
15904: LD_INT 32
15906: PPUSH
15907: LD_VAR 0 1
15911: PPUSH
15912: CALL_OW 321
15916: PUSH
15917: LD_INT 2
15919: EQUAL
15920: ST_TO_ADDR
15921: GO 16239
15923: LD_INT 20
15925: DOUBLE
15926: EQUAL
15927: IFTRUE 15931
15929: GO 15956
15931: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15932: LD_ADDR_VAR 0 3
15936: PUSH
15937: LD_INT 6
15939: PPUSH
15940: LD_VAR 0 1
15944: PPUSH
15945: CALL_OW 321
15949: PUSH
15950: LD_INT 2
15952: EQUAL
15953: ST_TO_ADDR
15954: GO 16239
15956: LD_INT 22
15958: DOUBLE
15959: EQUAL
15960: IFTRUE 15970
15962: LD_INT 36
15964: DOUBLE
15965: EQUAL
15966: IFTRUE 15970
15968: GO 15995
15970: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15971: LD_ADDR_VAR 0 3
15975: PUSH
15976: LD_INT 15
15978: PPUSH
15979: LD_VAR 0 1
15983: PPUSH
15984: CALL_OW 321
15988: PUSH
15989: LD_INT 2
15991: EQUAL
15992: ST_TO_ADDR
15993: GO 16239
15995: LD_INT 30
15997: DOUBLE
15998: EQUAL
15999: IFTRUE 16003
16001: GO 16028
16003: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16004: LD_ADDR_VAR 0 3
16008: PUSH
16009: LD_INT 20
16011: PPUSH
16012: LD_VAR 0 1
16016: PPUSH
16017: CALL_OW 321
16021: PUSH
16022: LD_INT 2
16024: EQUAL
16025: ST_TO_ADDR
16026: GO 16239
16028: LD_INT 28
16030: DOUBLE
16031: EQUAL
16032: IFTRUE 16042
16034: LD_INT 21
16036: DOUBLE
16037: EQUAL
16038: IFTRUE 16042
16040: GO 16067
16042: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16043: LD_ADDR_VAR 0 3
16047: PUSH
16048: LD_INT 21
16050: PPUSH
16051: LD_VAR 0 1
16055: PPUSH
16056: CALL_OW 321
16060: PUSH
16061: LD_INT 2
16063: EQUAL
16064: ST_TO_ADDR
16065: GO 16239
16067: LD_INT 16
16069: DOUBLE
16070: EQUAL
16071: IFTRUE 16075
16073: GO 16100
16075: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16076: LD_ADDR_VAR 0 3
16080: PUSH
16081: LD_INT 84
16083: PPUSH
16084: LD_VAR 0 1
16088: PPUSH
16089: CALL_OW 321
16093: PUSH
16094: LD_INT 2
16096: EQUAL
16097: ST_TO_ADDR
16098: GO 16239
16100: LD_INT 19
16102: DOUBLE
16103: EQUAL
16104: IFTRUE 16114
16106: LD_INT 23
16108: DOUBLE
16109: EQUAL
16110: IFTRUE 16114
16112: GO 16139
16114: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16115: LD_ADDR_VAR 0 3
16119: PUSH
16120: LD_INT 83
16122: PPUSH
16123: LD_VAR 0 1
16127: PPUSH
16128: CALL_OW 321
16132: PUSH
16133: LD_INT 2
16135: EQUAL
16136: ST_TO_ADDR
16137: GO 16239
16139: LD_INT 17
16141: DOUBLE
16142: EQUAL
16143: IFTRUE 16147
16145: GO 16172
16147: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16148: LD_ADDR_VAR 0 3
16152: PUSH
16153: LD_INT 39
16155: PPUSH
16156: LD_VAR 0 1
16160: PPUSH
16161: CALL_OW 321
16165: PUSH
16166: LD_INT 2
16168: EQUAL
16169: ST_TO_ADDR
16170: GO 16239
16172: LD_INT 18
16174: DOUBLE
16175: EQUAL
16176: IFTRUE 16180
16178: GO 16205
16180: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16181: LD_ADDR_VAR 0 3
16185: PUSH
16186: LD_INT 40
16188: PPUSH
16189: LD_VAR 0 1
16193: PPUSH
16194: CALL_OW 321
16198: PUSH
16199: LD_INT 2
16201: EQUAL
16202: ST_TO_ADDR
16203: GO 16239
16205: LD_INT 27
16207: DOUBLE
16208: EQUAL
16209: IFTRUE 16213
16211: GO 16238
16213: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16214: LD_ADDR_VAR 0 3
16218: PUSH
16219: LD_INT 35
16221: PPUSH
16222: LD_VAR 0 1
16226: PPUSH
16227: CALL_OW 321
16231: PUSH
16232: LD_INT 2
16234: EQUAL
16235: ST_TO_ADDR
16236: GO 16239
16238: POP
// end ;
16239: LD_VAR 0 3
16243: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16244: LD_INT 0
16246: PPUSH
16247: PPUSH
16248: PPUSH
16249: PPUSH
16250: PPUSH
16251: PPUSH
16252: PPUSH
16253: PPUSH
16254: PPUSH
16255: PPUSH
16256: PPUSH
// result := false ;
16257: LD_ADDR_VAR 0 6
16261: PUSH
16262: LD_INT 0
16264: ST_TO_ADDR
// if btype = b_depot then
16265: LD_VAR 0 2
16269: PUSH
16270: LD_INT 0
16272: EQUAL
16273: IFFALSE 16285
// begin result := true ;
16275: LD_ADDR_VAR 0 6
16279: PUSH
16280: LD_INT 1
16282: ST_TO_ADDR
// exit ;
16283: GO 17111
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16285: LD_VAR 0 1
16289: NOT
16290: PUSH
16291: LD_VAR 0 1
16295: PPUSH
16296: CALL_OW 266
16300: PUSH
16301: LD_INT 0
16303: PUSH
16304: LD_INT 1
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: IN
16311: NOT
16312: OR
16313: PUSH
16314: LD_VAR 0 2
16318: NOT
16319: OR
16320: PUSH
16321: LD_VAR 0 5
16325: PUSH
16326: LD_INT 0
16328: PUSH
16329: LD_INT 1
16331: PUSH
16332: LD_INT 2
16334: PUSH
16335: LD_INT 3
16337: PUSH
16338: LD_INT 4
16340: PUSH
16341: LD_INT 5
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: IN
16352: NOT
16353: OR
16354: PUSH
16355: LD_VAR 0 3
16359: PPUSH
16360: LD_VAR 0 4
16364: PPUSH
16365: CALL_OW 488
16369: NOT
16370: OR
16371: IFFALSE 16375
// exit ;
16373: GO 17111
// side := GetSide ( depot ) ;
16375: LD_ADDR_VAR 0 9
16379: PUSH
16380: LD_VAR 0 1
16384: PPUSH
16385: CALL_OW 255
16389: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16390: LD_VAR 0 9
16394: PPUSH
16395: LD_VAR 0 2
16399: PPUSH
16400: CALL 15868 0 2
16404: NOT
16405: IFFALSE 16409
// exit ;
16407: GO 17111
// pom := GetBase ( depot ) ;
16409: LD_ADDR_VAR 0 10
16413: PUSH
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 274
16423: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16424: LD_ADDR_VAR 0 11
16428: PUSH
16429: LD_VAR 0 2
16433: PPUSH
16434: LD_VAR 0 1
16438: PPUSH
16439: CALL_OW 248
16443: PPUSH
16444: CALL_OW 450
16448: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16449: LD_VAR 0 10
16453: PPUSH
16454: LD_INT 1
16456: PPUSH
16457: CALL_OW 275
16461: PUSH
16462: LD_VAR 0 11
16466: PUSH
16467: LD_INT 1
16469: ARRAY
16470: GREATEREQUAL
16471: PUSH
16472: LD_VAR 0 10
16476: PPUSH
16477: LD_INT 2
16479: PPUSH
16480: CALL_OW 275
16484: PUSH
16485: LD_VAR 0 11
16489: PUSH
16490: LD_INT 2
16492: ARRAY
16493: GREATEREQUAL
16494: AND
16495: PUSH
16496: LD_VAR 0 10
16500: PPUSH
16501: LD_INT 3
16503: PPUSH
16504: CALL_OW 275
16508: PUSH
16509: LD_VAR 0 11
16513: PUSH
16514: LD_INT 3
16516: ARRAY
16517: GREATEREQUAL
16518: AND
16519: NOT
16520: IFFALSE 16524
// exit ;
16522: GO 17111
// if GetBType ( depot ) = b_depot then
16524: LD_VAR 0 1
16528: PPUSH
16529: CALL_OW 266
16533: PUSH
16534: LD_INT 0
16536: EQUAL
16537: IFFALSE 16549
// dist := 28 else
16539: LD_ADDR_VAR 0 14
16543: PUSH
16544: LD_INT 28
16546: ST_TO_ADDR
16547: GO 16557
// dist := 36 ;
16549: LD_ADDR_VAR 0 14
16553: PUSH
16554: LD_INT 36
16556: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16557: LD_VAR 0 1
16561: PPUSH
16562: LD_VAR 0 3
16566: PPUSH
16567: LD_VAR 0 4
16571: PPUSH
16572: CALL_OW 297
16576: PUSH
16577: LD_VAR 0 14
16581: GREATER
16582: IFFALSE 16586
// exit ;
16584: GO 17111
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16586: LD_ADDR_VAR 0 12
16590: PUSH
16591: LD_VAR 0 2
16595: PPUSH
16596: LD_VAR 0 3
16600: PPUSH
16601: LD_VAR 0 4
16605: PPUSH
16606: LD_VAR 0 5
16610: PPUSH
16611: LD_VAR 0 1
16615: PPUSH
16616: CALL_OW 248
16620: PPUSH
16621: LD_INT 0
16623: PPUSH
16624: CALL 17116 0 6
16628: ST_TO_ADDR
// if not hexes then
16629: LD_VAR 0 12
16633: NOT
16634: IFFALSE 16638
// exit ;
16636: GO 17111
// hex := GetHexInfo ( x , y ) ;
16638: LD_ADDR_VAR 0 15
16642: PUSH
16643: LD_VAR 0 3
16647: PPUSH
16648: LD_VAR 0 4
16652: PPUSH
16653: CALL_OW 546
16657: ST_TO_ADDR
// if hex [ 1 ] then
16658: LD_VAR 0 15
16662: PUSH
16663: LD_INT 1
16665: ARRAY
16666: IFFALSE 16670
// exit ;
16668: GO 17111
// height := hex [ 2 ] ;
16670: LD_ADDR_VAR 0 13
16674: PUSH
16675: LD_VAR 0 15
16679: PUSH
16680: LD_INT 2
16682: ARRAY
16683: ST_TO_ADDR
// for i = 1 to hexes do
16684: LD_ADDR_VAR 0 7
16688: PUSH
16689: DOUBLE
16690: LD_INT 1
16692: DEC
16693: ST_TO_ADDR
16694: LD_VAR 0 12
16698: PUSH
16699: FOR_TO
16700: IFFALSE 17030
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16702: LD_VAR 0 12
16706: PUSH
16707: LD_VAR 0 7
16711: ARRAY
16712: PUSH
16713: LD_INT 1
16715: ARRAY
16716: PPUSH
16717: LD_VAR 0 12
16721: PUSH
16722: LD_VAR 0 7
16726: ARRAY
16727: PUSH
16728: LD_INT 2
16730: ARRAY
16731: PPUSH
16732: CALL_OW 488
16736: NOT
16737: PUSH
16738: LD_VAR 0 12
16742: PUSH
16743: LD_VAR 0 7
16747: ARRAY
16748: PUSH
16749: LD_INT 1
16751: ARRAY
16752: PPUSH
16753: LD_VAR 0 12
16757: PUSH
16758: LD_VAR 0 7
16762: ARRAY
16763: PUSH
16764: LD_INT 2
16766: ARRAY
16767: PPUSH
16768: CALL_OW 428
16772: PUSH
16773: LD_INT 0
16775: GREATER
16776: OR
16777: PUSH
16778: LD_VAR 0 12
16782: PUSH
16783: LD_VAR 0 7
16787: ARRAY
16788: PUSH
16789: LD_INT 1
16791: ARRAY
16792: PPUSH
16793: LD_VAR 0 12
16797: PUSH
16798: LD_VAR 0 7
16802: ARRAY
16803: PUSH
16804: LD_INT 2
16806: ARRAY
16807: PPUSH
16808: CALL_OW 351
16812: OR
16813: IFFALSE 16819
// exit ;
16815: POP
16816: POP
16817: GO 17111
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16819: LD_ADDR_VAR 0 8
16823: PUSH
16824: LD_VAR 0 12
16828: PUSH
16829: LD_VAR 0 7
16833: ARRAY
16834: PUSH
16835: LD_INT 1
16837: ARRAY
16838: PPUSH
16839: LD_VAR 0 12
16843: PUSH
16844: LD_VAR 0 7
16848: ARRAY
16849: PUSH
16850: LD_INT 2
16852: ARRAY
16853: PPUSH
16854: CALL_OW 546
16858: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16859: LD_VAR 0 8
16863: PUSH
16864: LD_INT 1
16866: ARRAY
16867: PUSH
16868: LD_VAR 0 8
16872: PUSH
16873: LD_INT 2
16875: ARRAY
16876: PUSH
16877: LD_VAR 0 13
16881: PUSH
16882: LD_INT 2
16884: PLUS
16885: GREATER
16886: OR
16887: PUSH
16888: LD_VAR 0 8
16892: PUSH
16893: LD_INT 2
16895: ARRAY
16896: PUSH
16897: LD_VAR 0 13
16901: PUSH
16902: LD_INT 2
16904: MINUS
16905: LESS
16906: OR
16907: PUSH
16908: LD_VAR 0 8
16912: PUSH
16913: LD_INT 3
16915: ARRAY
16916: PUSH
16917: LD_INT 0
16919: PUSH
16920: LD_INT 8
16922: PUSH
16923: LD_INT 9
16925: PUSH
16926: LD_INT 10
16928: PUSH
16929: LD_INT 11
16931: PUSH
16932: LD_INT 12
16934: PUSH
16935: LD_INT 13
16937: PUSH
16938: LD_INT 16
16940: PUSH
16941: LD_INT 17
16943: PUSH
16944: LD_INT 18
16946: PUSH
16947: LD_INT 19
16949: PUSH
16950: LD_INT 20
16952: PUSH
16953: LD_INT 21
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: IN
16971: NOT
16972: OR
16973: PUSH
16974: LD_VAR 0 8
16978: PUSH
16979: LD_INT 5
16981: ARRAY
16982: NOT
16983: OR
16984: PUSH
16985: LD_VAR 0 8
16989: PUSH
16990: LD_INT 6
16992: ARRAY
16993: PUSH
16994: LD_INT 1
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: LD_INT 7
17002: PUSH
17003: LD_INT 9
17005: PUSH
17006: LD_INT 10
17008: PUSH
17009: LD_INT 11
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: IN
17020: NOT
17021: OR
17022: IFFALSE 17028
// exit ;
17024: POP
17025: POP
17026: GO 17111
// end ;
17028: GO 16699
17030: POP
17031: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17032: LD_VAR 0 9
17036: PPUSH
17037: LD_VAR 0 3
17041: PPUSH
17042: LD_VAR 0 4
17046: PPUSH
17047: LD_INT 20
17049: PPUSH
17050: CALL 9034 0 4
17054: PUSH
17055: LD_INT 4
17057: ARRAY
17058: IFFALSE 17062
// exit ;
17060: GO 17111
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17062: LD_VAR 0 2
17066: PUSH
17067: LD_INT 29
17069: PUSH
17070: LD_INT 30
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: IN
17077: PUSH
17078: LD_VAR 0 3
17082: PPUSH
17083: LD_VAR 0 4
17087: PPUSH
17088: LD_VAR 0 9
17092: PPUSH
17093: CALL_OW 440
17097: NOT
17098: AND
17099: IFFALSE 17103
// exit ;
17101: GO 17111
// result := true ;
17103: LD_ADDR_VAR 0 6
17107: PUSH
17108: LD_INT 1
17110: ST_TO_ADDR
// end ;
17111: LD_VAR 0 6
17115: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17116: LD_INT 0
17118: PPUSH
17119: PPUSH
17120: PPUSH
17121: PPUSH
17122: PPUSH
17123: PPUSH
17124: PPUSH
17125: PPUSH
17126: PPUSH
17127: PPUSH
17128: PPUSH
17129: PPUSH
17130: PPUSH
17131: PPUSH
17132: PPUSH
17133: PPUSH
17134: PPUSH
17135: PPUSH
17136: PPUSH
17137: PPUSH
17138: PPUSH
17139: PPUSH
17140: PPUSH
17141: PPUSH
17142: PPUSH
17143: PPUSH
17144: PPUSH
17145: PPUSH
17146: PPUSH
17147: PPUSH
17148: PPUSH
17149: PPUSH
17150: PPUSH
17151: PPUSH
17152: PPUSH
17153: PPUSH
17154: PPUSH
17155: PPUSH
17156: PPUSH
17157: PPUSH
17158: PPUSH
17159: PPUSH
17160: PPUSH
17161: PPUSH
17162: PPUSH
17163: PPUSH
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
17169: PPUSH
17170: PPUSH
17171: PPUSH
17172: PPUSH
17173: PPUSH
17174: PPUSH
17175: PPUSH
// result = [ ] ;
17176: LD_ADDR_VAR 0 7
17180: PUSH
17181: EMPTY
17182: ST_TO_ADDR
// temp_list = [ ] ;
17183: LD_ADDR_VAR 0 9
17187: PUSH
17188: EMPTY
17189: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17190: LD_VAR 0 4
17194: PUSH
17195: LD_INT 0
17197: PUSH
17198: LD_INT 1
17200: PUSH
17201: LD_INT 2
17203: PUSH
17204: LD_INT 3
17206: PUSH
17207: LD_INT 4
17209: PUSH
17210: LD_INT 5
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: IN
17221: NOT
17222: PUSH
17223: LD_VAR 0 1
17227: PUSH
17228: LD_INT 0
17230: PUSH
17231: LD_INT 1
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: IN
17238: PUSH
17239: LD_VAR 0 5
17243: PUSH
17244: LD_INT 1
17246: PUSH
17247: LD_INT 2
17249: PUSH
17250: LD_INT 3
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: LIST
17257: IN
17258: NOT
17259: AND
17260: OR
17261: IFFALSE 17265
// exit ;
17263: GO 35656
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17265: LD_VAR 0 1
17269: PUSH
17270: LD_INT 6
17272: PUSH
17273: LD_INT 7
17275: PUSH
17276: LD_INT 8
17278: PUSH
17279: LD_INT 13
17281: PUSH
17282: LD_INT 12
17284: PUSH
17285: LD_INT 15
17287: PUSH
17288: LD_INT 11
17290: PUSH
17291: LD_INT 14
17293: PUSH
17294: LD_INT 10
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: IN
17308: IFFALSE 17318
// btype = b_lab ;
17310: LD_ADDR_VAR 0 1
17314: PUSH
17315: LD_INT 6
17317: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17318: LD_VAR 0 6
17322: PUSH
17323: LD_INT 0
17325: PUSH
17326: LD_INT 1
17328: PUSH
17329: LD_INT 2
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: LIST
17336: IN
17337: NOT
17338: PUSH
17339: LD_VAR 0 1
17343: PUSH
17344: LD_INT 0
17346: PUSH
17347: LD_INT 1
17349: PUSH
17350: LD_INT 2
17352: PUSH
17353: LD_INT 3
17355: PUSH
17356: LD_INT 6
17358: PUSH
17359: LD_INT 36
17361: PUSH
17362: LD_INT 4
17364: PUSH
17365: LD_INT 5
17367: PUSH
17368: LD_INT 31
17370: PUSH
17371: LD_INT 32
17373: PUSH
17374: LD_INT 33
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: IN
17390: NOT
17391: PUSH
17392: LD_VAR 0 6
17396: PUSH
17397: LD_INT 1
17399: EQUAL
17400: AND
17401: OR
17402: PUSH
17403: LD_VAR 0 1
17407: PUSH
17408: LD_INT 2
17410: PUSH
17411: LD_INT 3
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: IN
17418: NOT
17419: PUSH
17420: LD_VAR 0 6
17424: PUSH
17425: LD_INT 2
17427: EQUAL
17428: AND
17429: OR
17430: IFFALSE 17440
// mode = 0 ;
17432: LD_ADDR_VAR 0 6
17436: PUSH
17437: LD_INT 0
17439: ST_TO_ADDR
// case mode of 0 :
17440: LD_VAR 0 6
17444: PUSH
17445: LD_INT 0
17447: DOUBLE
17448: EQUAL
17449: IFTRUE 17453
17451: GO 28906
17453: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17454: LD_ADDR_VAR 0 11
17458: PUSH
17459: LD_INT 0
17461: PUSH
17462: LD_INT 0
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 0
17471: PUSH
17472: LD_INT 1
17474: NEG
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 1
17482: PUSH
17483: LD_INT 0
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 1
17492: PUSH
17493: LD_INT 1
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 0
17502: PUSH
17503: LD_INT 1
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 1
17512: NEG
17513: PUSH
17514: LD_INT 0
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 1
17523: NEG
17524: PUSH
17525: LD_INT 1
17527: NEG
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 1
17535: NEG
17536: PUSH
17537: LD_INT 2
17539: NEG
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 0
17547: PUSH
17548: LD_INT 2
17550: NEG
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 1
17558: PUSH
17559: LD_INT 1
17561: NEG
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: LD_INT 2
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 0
17579: PUSH
17580: LD_INT 2
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 1
17589: NEG
17590: PUSH
17591: LD_INT 1
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: LD_INT 3
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 0
17610: PUSH
17611: LD_INT 3
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 1
17620: NEG
17621: PUSH
17622: LD_INT 2
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17647: LD_ADDR_VAR 0 12
17651: PUSH
17652: LD_INT 0
17654: PUSH
17655: LD_INT 0
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 0
17664: PUSH
17665: LD_INT 1
17667: NEG
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: LD_INT 1
17675: PUSH
17676: LD_INT 0
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 1
17685: PUSH
17686: LD_INT 1
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 0
17695: PUSH
17696: LD_INT 1
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 1
17705: NEG
17706: PUSH
17707: LD_INT 0
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PUSH
17714: LD_INT 1
17716: NEG
17717: PUSH
17718: LD_INT 1
17720: NEG
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 1
17728: PUSH
17729: LD_INT 1
17731: NEG
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 2
17739: PUSH
17740: LD_INT 0
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 1
17759: NEG
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 2
17770: NEG
17771: PUSH
17772: LD_INT 0
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 2
17781: NEG
17782: PUSH
17783: LD_INT 1
17785: NEG
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 2
17793: NEG
17794: PUSH
17795: LD_INT 1
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 3
17804: NEG
17805: PUSH
17806: LD_INT 0
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: LD_INT 3
17815: NEG
17816: PUSH
17817: LD_INT 1
17819: NEG
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17843: LD_ADDR_VAR 0 13
17847: PUSH
17848: LD_INT 0
17850: PUSH
17851: LD_INT 0
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 0
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: LD_INT 1
17871: PUSH
17872: LD_INT 0
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: LD_INT 1
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 0
17891: PUSH
17892: LD_INT 1
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 1
17901: NEG
17902: PUSH
17903: LD_INT 0
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 1
17912: NEG
17913: PUSH
17914: LD_INT 1
17916: NEG
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 1
17924: NEG
17925: PUSH
17926: LD_INT 2
17928: NEG
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 2
17936: PUSH
17937: LD_INT 1
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 2
17946: PUSH
17947: LD_INT 2
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 1
17956: PUSH
17957: LD_INT 2
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 2
17966: NEG
17967: PUSH
17968: LD_INT 1
17970: NEG
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 2
17978: NEG
17979: PUSH
17980: LD_INT 2
17982: NEG
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 2
17990: NEG
17991: PUSH
17992: LD_INT 3
17994: NEG
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 3
18002: NEG
18003: PUSH
18004: LD_INT 2
18006: NEG
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 3
18014: NEG
18015: PUSH
18016: LD_INT 3
18018: NEG
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18042: LD_ADDR_VAR 0 14
18046: PUSH
18047: LD_INT 0
18049: PUSH
18050: LD_INT 0
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 0
18059: PUSH
18060: LD_INT 1
18062: NEG
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 1
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 1
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 0
18090: PUSH
18091: LD_INT 1
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 1
18100: NEG
18101: PUSH
18102: LD_INT 0
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 1
18111: NEG
18112: PUSH
18113: LD_INT 1
18115: NEG
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 1
18123: NEG
18124: PUSH
18125: LD_INT 2
18127: NEG
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 0
18135: PUSH
18136: LD_INT 2
18138: NEG
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 1
18146: PUSH
18147: LD_INT 1
18149: NEG
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 1
18157: PUSH
18158: LD_INT 2
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: LD_INT 2
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 1
18177: NEG
18178: PUSH
18179: LD_INT 1
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 1
18188: NEG
18189: PUSH
18190: LD_INT 3
18192: NEG
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 0
18200: PUSH
18201: LD_INT 3
18203: NEG
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 1
18211: PUSH
18212: LD_INT 2
18214: NEG
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18238: LD_ADDR_VAR 0 15
18242: PUSH
18243: LD_INT 0
18245: PUSH
18246: LD_INT 0
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 0
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 1
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 1
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: LD_INT 1
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 1
18296: NEG
18297: PUSH
18298: LD_INT 0
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 1
18307: NEG
18308: PUSH
18309: LD_INT 1
18311: NEG
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 1
18319: PUSH
18320: LD_INT 1
18322: NEG
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 2
18330: PUSH
18331: LD_INT 0
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: LD_INT 1
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 1
18350: NEG
18351: PUSH
18352: LD_INT 1
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 2
18361: NEG
18362: PUSH
18363: LD_INT 0
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 2
18372: NEG
18373: PUSH
18374: LD_INT 1
18376: NEG
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 2
18384: PUSH
18385: LD_INT 1
18387: NEG
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 3
18395: PUSH
18396: LD_INT 0
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 3
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18431: LD_ADDR_VAR 0 16
18435: PUSH
18436: LD_INT 0
18438: PUSH
18439: LD_INT 0
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 0
18448: PUSH
18449: LD_INT 1
18451: NEG
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: LD_INT 0
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 1
18469: PUSH
18470: LD_INT 1
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 0
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 1
18489: NEG
18490: PUSH
18491: LD_INT 0
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 1
18500: NEG
18501: PUSH
18502: LD_INT 1
18504: NEG
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 1
18512: NEG
18513: PUSH
18514: LD_INT 2
18516: NEG
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 2
18524: PUSH
18525: LD_INT 1
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 2
18534: PUSH
18535: LD_INT 2
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 1
18544: PUSH
18545: LD_INT 2
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 2
18554: NEG
18555: PUSH
18556: LD_INT 1
18558: NEG
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 2
18566: NEG
18567: PUSH
18568: LD_INT 2
18570: NEG
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 3
18578: PUSH
18579: LD_INT 2
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 3
18588: PUSH
18589: LD_INT 3
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 2
18598: PUSH
18599: LD_INT 3
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18624: LD_ADDR_VAR 0 17
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 0
18641: PUSH
18642: LD_INT 1
18644: NEG
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: LD_INT 0
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: LD_INT 1
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 0
18672: PUSH
18673: LD_INT 1
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 1
18682: NEG
18683: PUSH
18684: LD_INT 0
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 1
18693: NEG
18694: PUSH
18695: LD_INT 1
18697: NEG
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 1
18705: NEG
18706: PUSH
18707: LD_INT 2
18709: NEG
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 0
18717: PUSH
18718: LD_INT 2
18720: NEG
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 1
18728: PUSH
18729: LD_INT 1
18731: NEG
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: LD_INT 0
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 2
18749: PUSH
18750: LD_INT 1
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 2
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 0
18779: PUSH
18780: LD_INT 2
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 1
18789: NEG
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 2
18800: NEG
18801: PUSH
18802: LD_INT 0
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 2
18811: NEG
18812: PUSH
18813: LD_INT 1
18815: NEG
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 2
18823: NEG
18824: PUSH
18825: LD_INT 2
18827: NEG
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18854: LD_ADDR_VAR 0 18
18858: PUSH
18859: LD_INT 0
18861: PUSH
18862: LD_INT 0
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 0
18871: PUSH
18872: LD_INT 1
18874: NEG
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: LD_INT 1
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: LD_INT 1
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 1
18912: NEG
18913: PUSH
18914: LD_INT 0
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 1
18923: NEG
18924: PUSH
18925: LD_INT 1
18927: NEG
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 1
18935: NEG
18936: PUSH
18937: LD_INT 2
18939: NEG
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 0
18947: PUSH
18948: LD_INT 2
18950: NEG
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 1
18958: PUSH
18959: LD_INT 1
18961: NEG
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 2
18969: PUSH
18970: LD_INT 0
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: LD_INT 1
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 2
18989: PUSH
18990: LD_INT 2
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: LD_INT 2
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 0
19009: PUSH
19010: LD_INT 2
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 1
19019: NEG
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 2
19030: NEG
19031: PUSH
19032: LD_INT 0
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 2
19041: NEG
19042: PUSH
19043: LD_INT 1
19045: NEG
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 2
19053: NEG
19054: PUSH
19055: LD_INT 2
19057: NEG
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19084: LD_ADDR_VAR 0 19
19088: PUSH
19089: LD_INT 0
19091: PUSH
19092: LD_INT 0
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 0
19101: PUSH
19102: LD_INT 1
19104: NEG
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 1
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 1
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 0
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 1
19142: NEG
19143: PUSH
19144: LD_INT 0
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 1
19153: NEG
19154: PUSH
19155: LD_INT 1
19157: NEG
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 1
19165: NEG
19166: PUSH
19167: LD_INT 2
19169: NEG
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 0
19177: PUSH
19178: LD_INT 2
19180: NEG
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 1
19188: PUSH
19189: LD_INT 1
19191: NEG
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 2
19199: PUSH
19200: LD_INT 0
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 2
19209: PUSH
19210: LD_INT 1
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 2
19219: PUSH
19220: LD_INT 2
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 1
19229: PUSH
19230: LD_INT 2
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 0
19239: PUSH
19240: LD_INT 2
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 1
19249: NEG
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 2
19260: NEG
19261: PUSH
19262: LD_INT 0
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 2
19271: NEG
19272: PUSH
19273: LD_INT 1
19275: NEG
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 2
19283: NEG
19284: PUSH
19285: LD_INT 2
19287: NEG
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19314: LD_ADDR_VAR 0 20
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: LD_INT 0
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 0
19331: PUSH
19332: LD_INT 1
19334: NEG
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 1
19342: PUSH
19343: LD_INT 0
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 1
19352: PUSH
19353: LD_INT 1
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 0
19362: PUSH
19363: LD_INT 1
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 1
19372: NEG
19373: PUSH
19374: LD_INT 0
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 1
19383: NEG
19384: PUSH
19385: LD_INT 1
19387: NEG
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 1
19395: NEG
19396: PUSH
19397: LD_INT 2
19399: NEG
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 0
19407: PUSH
19408: LD_INT 2
19410: NEG
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 1
19418: PUSH
19419: LD_INT 1
19421: NEG
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 2
19429: PUSH
19430: LD_INT 0
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 2
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 2
19449: PUSH
19450: LD_INT 2
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: LD_INT 2
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 1
19479: NEG
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 2
19490: NEG
19491: PUSH
19492: LD_INT 0
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 2
19501: NEG
19502: PUSH
19503: LD_INT 1
19505: NEG
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 2
19513: NEG
19514: PUSH
19515: LD_INT 2
19517: NEG
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19544: LD_ADDR_VAR 0 21
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 0
19561: PUSH
19562: LD_INT 1
19564: NEG
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 1
19582: PUSH
19583: LD_INT 1
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 0
19592: PUSH
19593: LD_INT 1
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 1
19602: NEG
19603: PUSH
19604: LD_INT 0
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 1
19613: NEG
19614: PUSH
19615: LD_INT 1
19617: NEG
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 1
19625: NEG
19626: PUSH
19627: LD_INT 2
19629: NEG
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 0
19637: PUSH
19638: LD_INT 2
19640: NEG
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 1
19648: PUSH
19649: LD_INT 1
19651: NEG
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 2
19659: PUSH
19660: LD_INT 0
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 2
19669: PUSH
19670: LD_INT 1
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 2
19679: PUSH
19680: LD_INT 2
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 1
19689: PUSH
19690: LD_INT 2
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 0
19699: PUSH
19700: LD_INT 2
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 1
19709: NEG
19710: PUSH
19711: LD_INT 1
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 2
19720: NEG
19721: PUSH
19722: LD_INT 0
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 2
19731: NEG
19732: PUSH
19733: LD_INT 1
19735: NEG
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 2
19743: NEG
19744: PUSH
19745: LD_INT 2
19747: NEG
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19774: LD_ADDR_VAR 0 22
19778: PUSH
19779: LD_INT 0
19781: PUSH
19782: LD_INT 0
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 0
19791: PUSH
19792: LD_INT 1
19794: NEG
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 1
19802: PUSH
19803: LD_INT 0
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 1
19812: PUSH
19813: LD_INT 1
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 0
19822: PUSH
19823: LD_INT 1
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 1
19832: NEG
19833: PUSH
19834: LD_INT 0
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 1
19843: NEG
19844: PUSH
19845: LD_INT 1
19847: NEG
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 1
19855: NEG
19856: PUSH
19857: LD_INT 2
19859: NEG
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 0
19867: PUSH
19868: LD_INT 2
19870: NEG
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 1
19878: PUSH
19879: LD_INT 1
19881: NEG
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 2
19889: PUSH
19890: LD_INT 0
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 2
19899: PUSH
19900: LD_INT 1
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 2
19909: PUSH
19910: LD_INT 2
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 1
19919: PUSH
19920: LD_INT 2
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 0
19929: PUSH
19930: LD_INT 2
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 1
19939: NEG
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 2
19950: NEG
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 2
19961: NEG
19962: PUSH
19963: LD_INT 1
19965: NEG
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 2
19973: NEG
19974: PUSH
19975: LD_INT 2
19977: NEG
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20004: LD_ADDR_VAR 0 23
20008: PUSH
20009: LD_INT 0
20011: PUSH
20012: LD_INT 0
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 0
20021: PUSH
20022: LD_INT 1
20024: NEG
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 1
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 1
20042: PUSH
20043: LD_INT 1
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 0
20052: PUSH
20053: LD_INT 1
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 1
20062: NEG
20063: PUSH
20064: LD_INT 0
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 1
20073: NEG
20074: PUSH
20075: LD_INT 1
20077: NEG
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 1
20085: NEG
20086: PUSH
20087: LD_INT 2
20089: NEG
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 0
20097: PUSH
20098: LD_INT 2
20100: NEG
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: LD_INT 1
20108: PUSH
20109: LD_INT 1
20111: NEG
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 2
20119: PUSH
20120: LD_INT 0
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 2
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 2
20139: PUSH
20140: LD_INT 2
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 1
20149: PUSH
20150: LD_INT 2
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 0
20159: PUSH
20160: LD_INT 2
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 1
20169: NEG
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 2
20180: NEG
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 2
20191: NEG
20192: PUSH
20193: LD_INT 1
20195: NEG
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 2
20203: NEG
20204: PUSH
20205: LD_INT 2
20207: NEG
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 2
20215: NEG
20216: PUSH
20217: LD_INT 3
20219: NEG
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 1
20227: NEG
20228: PUSH
20229: LD_INT 3
20231: NEG
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: LD_INT 2
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 2
20250: PUSH
20251: LD_INT 1
20253: NEG
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20284: LD_ADDR_VAR 0 24
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: LD_INT 0
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 0
20301: PUSH
20302: LD_INT 1
20304: NEG
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 1
20312: PUSH
20313: LD_INT 0
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 1
20322: PUSH
20323: LD_INT 1
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 0
20332: PUSH
20333: LD_INT 1
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 1
20342: NEG
20343: PUSH
20344: LD_INT 0
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 1
20353: NEG
20354: PUSH
20355: LD_INT 1
20357: NEG
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 1
20365: NEG
20366: PUSH
20367: LD_INT 2
20369: NEG
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 0
20377: PUSH
20378: LD_INT 2
20380: NEG
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 1
20388: PUSH
20389: LD_INT 1
20391: NEG
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 2
20399: PUSH
20400: LD_INT 0
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 2
20409: PUSH
20410: LD_INT 1
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 2
20419: PUSH
20420: LD_INT 2
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: LD_INT 1
20429: PUSH
20430: LD_INT 2
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 0
20439: PUSH
20440: LD_INT 2
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 1
20449: NEG
20450: PUSH
20451: LD_INT 1
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 2
20460: NEG
20461: PUSH
20462: LD_INT 0
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 2
20471: NEG
20472: PUSH
20473: LD_INT 1
20475: NEG
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 2
20483: NEG
20484: PUSH
20485: LD_INT 2
20487: NEG
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 1
20495: PUSH
20496: LD_INT 2
20498: NEG
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 2
20506: PUSH
20507: LD_INT 1
20509: NEG
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 3
20517: PUSH
20518: LD_INT 1
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 3
20527: PUSH
20528: LD_INT 2
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20560: LD_ADDR_VAR 0 25
20564: PUSH
20565: LD_INT 0
20567: PUSH
20568: LD_INT 0
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 0
20577: PUSH
20578: LD_INT 1
20580: NEG
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 1
20588: PUSH
20589: LD_INT 0
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 1
20598: PUSH
20599: LD_INT 1
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 0
20608: PUSH
20609: LD_INT 1
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 1
20618: NEG
20619: PUSH
20620: LD_INT 0
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 1
20629: NEG
20630: PUSH
20631: LD_INT 1
20633: NEG
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 1
20641: NEG
20642: PUSH
20643: LD_INT 2
20645: NEG
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 0
20653: PUSH
20654: LD_INT 2
20656: NEG
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 1
20664: PUSH
20665: LD_INT 1
20667: NEG
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 2
20675: PUSH
20676: LD_INT 0
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 2
20685: PUSH
20686: LD_INT 1
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 2
20695: PUSH
20696: LD_INT 2
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 1
20705: PUSH
20706: LD_INT 2
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 0
20715: PUSH
20716: LD_INT 2
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 1
20725: NEG
20726: PUSH
20727: LD_INT 1
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 2
20736: NEG
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 2
20747: NEG
20748: PUSH
20749: LD_INT 1
20751: NEG
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 2
20759: NEG
20760: PUSH
20761: LD_INT 2
20763: NEG
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 3
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 3
20781: PUSH
20782: LD_INT 2
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 2
20791: PUSH
20792: LD_INT 3
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 1
20801: PUSH
20802: LD_INT 3
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20834: LD_ADDR_VAR 0 26
20838: PUSH
20839: LD_INT 0
20841: PUSH
20842: LD_INT 0
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 0
20851: PUSH
20852: LD_INT 1
20854: NEG
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 1
20862: PUSH
20863: LD_INT 0
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 1
20872: PUSH
20873: LD_INT 1
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 0
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 1
20892: NEG
20893: PUSH
20894: LD_INT 0
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 1
20903: NEG
20904: PUSH
20905: LD_INT 1
20907: NEG
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 1
20915: NEG
20916: PUSH
20917: LD_INT 2
20919: NEG
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 0
20927: PUSH
20928: LD_INT 2
20930: NEG
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 1
20938: PUSH
20939: LD_INT 1
20941: NEG
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 2
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 2
20959: PUSH
20960: LD_INT 1
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 2
20969: PUSH
20970: LD_INT 2
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: LD_INT 2
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 0
20989: PUSH
20990: LD_INT 2
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 1
20999: NEG
21000: PUSH
21001: LD_INT 1
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 2
21010: NEG
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 2
21021: NEG
21022: PUSH
21023: LD_INT 1
21025: NEG
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 2
21033: NEG
21034: PUSH
21035: LD_INT 2
21037: NEG
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 2
21045: PUSH
21046: LD_INT 3
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 1
21055: PUSH
21056: LD_INT 3
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 1
21065: NEG
21066: PUSH
21067: LD_INT 2
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 2
21076: NEG
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21110: LD_ADDR_VAR 0 27
21114: PUSH
21115: LD_INT 0
21117: PUSH
21118: LD_INT 0
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: LD_INT 1
21130: NEG
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 1
21138: PUSH
21139: LD_INT 0
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 1
21148: PUSH
21149: LD_INT 1
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 0
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 1
21168: NEG
21169: PUSH
21170: LD_INT 0
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 1
21179: NEG
21180: PUSH
21181: LD_INT 1
21183: NEG
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 1
21191: NEG
21192: PUSH
21193: LD_INT 2
21195: NEG
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 0
21203: PUSH
21204: LD_INT 2
21206: NEG
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 1
21214: PUSH
21215: LD_INT 1
21217: NEG
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 2
21225: PUSH
21226: LD_INT 0
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: LD_INT 2
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 1
21255: PUSH
21256: LD_INT 2
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: LD_INT 2
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 1
21275: NEG
21276: PUSH
21277: LD_INT 1
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 2
21286: NEG
21287: PUSH
21288: LD_INT 0
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 2
21297: NEG
21298: PUSH
21299: LD_INT 1
21301: NEG
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 2
21309: NEG
21310: PUSH
21311: LD_INT 2
21313: NEG
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 1
21321: NEG
21322: PUSH
21323: LD_INT 2
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 2
21332: NEG
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 3
21343: NEG
21344: PUSH
21345: LD_INT 1
21347: NEG
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 3
21355: NEG
21356: PUSH
21357: LD_INT 2
21359: NEG
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21390: LD_ADDR_VAR 0 28
21394: PUSH
21395: LD_INT 0
21397: PUSH
21398: LD_INT 0
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: LD_INT 1
21410: NEG
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 1
21418: PUSH
21419: LD_INT 0
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: LD_INT 1
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 0
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 1
21448: NEG
21449: PUSH
21450: LD_INT 0
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 1
21459: NEG
21460: PUSH
21461: LD_INT 1
21463: NEG
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 1
21471: NEG
21472: PUSH
21473: LD_INT 2
21475: NEG
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 0
21483: PUSH
21484: LD_INT 2
21486: NEG
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 1
21494: PUSH
21495: LD_INT 1
21497: NEG
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 2
21505: PUSH
21506: LD_INT 0
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: LD_INT 1
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 2
21525: PUSH
21526: LD_INT 2
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 1
21535: PUSH
21536: LD_INT 2
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 0
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 1
21555: NEG
21556: PUSH
21557: LD_INT 1
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 2
21566: NEG
21567: PUSH
21568: LD_INT 0
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 2
21577: NEG
21578: PUSH
21579: LD_INT 1
21581: NEG
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 2
21589: NEG
21590: PUSH
21591: LD_INT 2
21593: NEG
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 2
21601: NEG
21602: PUSH
21603: LD_INT 3
21605: NEG
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 1
21613: NEG
21614: PUSH
21615: LD_INT 3
21617: NEG
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 3
21625: NEG
21626: PUSH
21627: LD_INT 1
21629: NEG
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 3
21637: NEG
21638: PUSH
21639: LD_INT 2
21641: NEG
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21672: LD_ADDR_VAR 0 29
21676: PUSH
21677: LD_INT 0
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 0
21689: PUSH
21690: LD_INT 1
21692: NEG
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 1
21700: PUSH
21701: LD_INT 0
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 1
21710: PUSH
21711: LD_INT 1
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 0
21720: PUSH
21721: LD_INT 1
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 1
21730: NEG
21731: PUSH
21732: LD_INT 0
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: NEG
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 1
21753: NEG
21754: PUSH
21755: LD_INT 2
21757: NEG
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 0
21765: PUSH
21766: LD_INT 2
21768: NEG
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 1
21776: PUSH
21777: LD_INT 1
21779: NEG
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 2
21787: PUSH
21788: LD_INT 0
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 2
21797: PUSH
21798: LD_INT 1
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 1
21807: PUSH
21808: LD_INT 2
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 0
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 1
21827: NEG
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 2
21838: NEG
21839: PUSH
21840: LD_INT 1
21842: NEG
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 2
21850: NEG
21851: PUSH
21852: LD_INT 2
21854: NEG
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 2
21862: NEG
21863: PUSH
21864: LD_INT 3
21866: NEG
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 2
21874: PUSH
21875: LD_INT 1
21877: NEG
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 3
21885: PUSH
21886: LD_INT 1
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 1
21895: PUSH
21896: LD_INT 3
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 1
21905: NEG
21906: PUSH
21907: LD_INT 2
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 3
21916: NEG
21917: PUSH
21918: LD_INT 2
21920: NEG
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21951: LD_ADDR_VAR 0 30
21955: PUSH
21956: LD_INT 0
21958: PUSH
21959: LD_INT 0
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 0
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 1
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 1
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 0
21999: PUSH
22000: LD_INT 1
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 1
22009: NEG
22010: PUSH
22011: LD_INT 0
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 1
22020: NEG
22021: PUSH
22022: LD_INT 1
22024: NEG
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 1
22032: NEG
22033: PUSH
22034: LD_INT 2
22036: NEG
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 0
22044: PUSH
22045: LD_INT 2
22047: NEG
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: LD_INT 1
22058: NEG
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 2
22066: PUSH
22067: LD_INT 0
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 2
22076: PUSH
22077: LD_INT 1
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 2
22086: PUSH
22087: LD_INT 2
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: LD_INT 2
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: NEG
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 2
22117: NEG
22118: PUSH
22119: LD_INT 0
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 2
22128: NEG
22129: PUSH
22130: LD_INT 1
22132: NEG
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 1
22140: NEG
22141: PUSH
22142: LD_INT 3
22144: NEG
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: LD_INT 2
22155: NEG
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 3
22163: PUSH
22164: LD_INT 2
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 2
22173: PUSH
22174: LD_INT 3
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 2
22183: NEG
22184: PUSH
22185: LD_INT 1
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 3
22194: NEG
22195: PUSH
22196: LD_INT 1
22198: NEG
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22229: LD_ADDR_VAR 0 31
22233: PUSH
22234: LD_INT 0
22236: PUSH
22237: LD_INT 0
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: LD_INT 1
22249: NEG
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 1
22257: PUSH
22258: LD_INT 0
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 1
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 0
22277: PUSH
22278: LD_INT 1
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 1
22287: NEG
22288: PUSH
22289: LD_INT 0
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 1
22298: NEG
22299: PUSH
22300: LD_INT 1
22302: NEG
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 1
22310: NEG
22311: PUSH
22312: LD_INT 2
22314: NEG
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 1
22322: PUSH
22323: LD_INT 1
22325: NEG
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 2
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 2
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 2
22353: PUSH
22354: LD_INT 2
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 1
22363: PUSH
22364: LD_INT 2
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: LD_INT 0
22373: PUSH
22374: LD_INT 2
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 1
22383: NEG
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 2
22394: NEG
22395: PUSH
22396: LD_INT 1
22398: NEG
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 2
22406: NEG
22407: PUSH
22408: LD_INT 2
22410: NEG
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 2
22418: NEG
22419: PUSH
22420: LD_INT 3
22422: NEG
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 2
22430: PUSH
22431: LD_INT 1
22433: NEG
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 3
22441: PUSH
22442: LD_INT 1
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 1
22451: PUSH
22452: LD_INT 3
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 1
22461: NEG
22462: PUSH
22463: LD_INT 2
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 3
22472: NEG
22473: PUSH
22474: LD_INT 2
22476: NEG
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22507: LD_ADDR_VAR 0 32
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: LD_INT 0
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: LD_INT 1
22527: NEG
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: LD_INT 1
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 1
22565: NEG
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 1
22576: NEG
22577: PUSH
22578: LD_INT 1
22580: NEG
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 1
22588: NEG
22589: PUSH
22590: LD_INT 2
22592: NEG
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 0
22600: PUSH
22601: LD_INT 2
22603: NEG
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 1
22611: PUSH
22612: LD_INT 1
22614: NEG
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 2
22622: PUSH
22623: LD_INT 1
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 2
22632: PUSH
22633: LD_INT 2
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 0
22652: PUSH
22653: LD_INT 2
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 1
22662: NEG
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 2
22673: NEG
22674: PUSH
22675: LD_INT 0
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 2
22684: NEG
22685: PUSH
22686: LD_INT 1
22688: NEG
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 1
22696: NEG
22697: PUSH
22698: LD_INT 3
22700: NEG
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 1
22708: PUSH
22709: LD_INT 2
22711: NEG
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 3
22719: PUSH
22720: LD_INT 2
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 2
22729: PUSH
22730: LD_INT 3
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 2
22739: NEG
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 3
22750: NEG
22751: PUSH
22752: LD_INT 1
22754: NEG
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22785: LD_ADDR_VAR 0 33
22789: PUSH
22790: LD_INT 0
22792: PUSH
22793: LD_INT 0
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 0
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: LD_INT 0
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 0
22833: PUSH
22834: LD_INT 1
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 1
22843: NEG
22844: PUSH
22845: LD_INT 0
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 1
22854: NEG
22855: PUSH
22856: LD_INT 1
22858: NEG
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 1
22866: NEG
22867: PUSH
22868: LD_INT 2
22870: NEG
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 1
22878: PUSH
22879: LD_INT 1
22881: NEG
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 2
22889: PUSH
22890: LD_INT 0
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 2
22899: PUSH
22900: LD_INT 1
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 1
22909: PUSH
22910: LD_INT 2
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 0
22919: PUSH
22920: LD_INT 2
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 1
22929: NEG
22930: PUSH
22931: LD_INT 1
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 2
22940: NEG
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 2
22951: NEG
22952: PUSH
22953: LD_INT 1
22955: NEG
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 2
22963: NEG
22964: PUSH
22965: LD_INT 2
22967: NEG
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 2
22975: NEG
22976: PUSH
22977: LD_INT 3
22979: NEG
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 2
22987: PUSH
22988: LD_INT 1
22990: NEG
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 3
22998: PUSH
22999: LD_INT 1
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 1
23008: PUSH
23009: LD_INT 3
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 1
23018: NEG
23019: PUSH
23020: LD_INT 2
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 3
23029: NEG
23030: PUSH
23031: LD_INT 2
23033: NEG
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23064: LD_ADDR_VAR 0 34
23068: PUSH
23069: LD_INT 0
23071: PUSH
23072: LD_INT 0
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 0
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 1
23092: PUSH
23093: LD_INT 0
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 1
23102: PUSH
23103: LD_INT 1
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 0
23112: PUSH
23113: LD_INT 1
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 1
23122: NEG
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: NEG
23134: PUSH
23135: LD_INT 1
23137: NEG
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 1
23145: NEG
23146: PUSH
23147: LD_INT 2
23149: NEG
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 0
23157: PUSH
23158: LD_INT 2
23160: NEG
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 1
23168: PUSH
23169: LD_INT 1
23171: NEG
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 2
23179: PUSH
23180: LD_INT 1
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 2
23189: PUSH
23190: LD_INT 2
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: LD_INT 2
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 1
23209: NEG
23210: PUSH
23211: LD_INT 1
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 2
23220: NEG
23221: PUSH
23222: LD_INT 0
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 2
23231: NEG
23232: PUSH
23233: LD_INT 1
23235: NEG
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 2
23243: NEG
23244: PUSH
23245: LD_INT 2
23247: NEG
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 1
23255: NEG
23256: PUSH
23257: LD_INT 3
23259: NEG
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 1
23267: PUSH
23268: LD_INT 2
23270: NEG
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 3
23278: PUSH
23279: LD_INT 2
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 2
23288: PUSH
23289: LD_INT 3
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 2
23298: NEG
23299: PUSH
23300: LD_INT 1
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 3
23309: NEG
23310: PUSH
23311: LD_INT 1
23313: NEG
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23344: LD_ADDR_VAR 0 35
23348: PUSH
23349: LD_INT 0
23351: PUSH
23352: LD_INT 0
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 0
23361: PUSH
23362: LD_INT 1
23364: NEG
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 1
23372: PUSH
23373: LD_INT 0
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: LD_INT 1
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 0
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 1
23402: NEG
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 1
23413: NEG
23414: PUSH
23415: LD_INT 1
23417: NEG
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 2
23425: PUSH
23426: LD_INT 1
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 2
23435: NEG
23436: PUSH
23437: LD_INT 1
23439: NEG
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23456: LD_ADDR_VAR 0 36
23460: PUSH
23461: LD_INT 0
23463: PUSH
23464: LD_INT 0
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: LD_INT 1
23476: NEG
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 1
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 1
23494: PUSH
23495: LD_INT 1
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 0
23504: PUSH
23505: LD_INT 1
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 1
23514: NEG
23515: PUSH
23516: LD_INT 0
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 1
23525: NEG
23526: PUSH
23527: LD_INT 1
23529: NEG
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 1
23537: NEG
23538: PUSH
23539: LD_INT 2
23541: NEG
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 1
23549: PUSH
23550: LD_INT 2
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23568: LD_ADDR_VAR 0 37
23572: PUSH
23573: LD_INT 0
23575: PUSH
23576: LD_INT 0
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 0
23585: PUSH
23586: LD_INT 1
23588: NEG
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 1
23596: PUSH
23597: LD_INT 0
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: LD_INT 1
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 0
23616: PUSH
23617: LD_INT 1
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 1
23626: NEG
23627: PUSH
23628: LD_INT 0
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 1
23637: NEG
23638: PUSH
23639: LD_INT 1
23641: NEG
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: PUSH
23650: LD_INT 1
23652: NEG
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 1
23660: NEG
23661: PUSH
23662: LD_INT 1
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23680: LD_ADDR_VAR 0 38
23684: PUSH
23685: LD_INT 0
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 0
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 0
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 1
23738: NEG
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: NEG
23750: PUSH
23751: LD_INT 1
23753: NEG
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 2
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 2
23771: NEG
23772: PUSH
23773: LD_INT 1
23775: NEG
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23792: LD_ADDR_VAR 0 39
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 0
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 1
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 0
23840: PUSH
23841: LD_INT 1
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: NEG
23851: PUSH
23852: LD_INT 0
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 1
23861: NEG
23862: PUSH
23863: LD_INT 1
23865: NEG
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 1
23873: NEG
23874: PUSH
23875: LD_INT 2
23877: NEG
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 1
23885: PUSH
23886: LD_INT 2
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23904: LD_ADDR_VAR 0 40
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 0
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 1
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: LD_INT 1
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 0
23952: PUSH
23953: LD_INT 1
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 1
23962: NEG
23963: PUSH
23964: LD_INT 0
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: NEG
23974: PUSH
23975: LD_INT 1
23977: NEG
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 1
23985: PUSH
23986: LD_INT 1
23988: NEG
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 1
23996: NEG
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24016: LD_ADDR_VAR 0 41
24020: PUSH
24021: LD_INT 0
24023: PUSH
24024: LD_INT 0
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: LD_INT 1
24036: NEG
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 1
24044: PUSH
24045: LD_INT 0
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: LD_INT 1
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: LD_INT 1
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: LD_INT 0
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: LD_INT 1
24089: NEG
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: NEG
24098: PUSH
24099: LD_INT 2
24101: NEG
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 1
24109: PUSH
24110: LD_INT 1
24112: NEG
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 2
24120: PUSH
24121: LD_INT 0
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 2
24140: PUSH
24141: LD_INT 2
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: LD_INT 2
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 1
24160: NEG
24161: PUSH
24162: LD_INT 1
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 2
24171: NEG
24172: PUSH
24173: LD_INT 0
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 2
24182: NEG
24183: PUSH
24184: LD_INT 1
24186: NEG
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 2
24194: NEG
24195: PUSH
24196: LD_INT 2
24198: NEG
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 2
24206: NEG
24207: PUSH
24208: LD_INT 3
24210: NEG
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 2
24218: PUSH
24219: LD_INT 1
24221: NEG
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 3
24229: PUSH
24230: LD_INT 0
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 3
24239: PUSH
24240: LD_INT 1
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 3
24249: PUSH
24250: LD_INT 2
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 3
24259: PUSH
24260: LD_INT 3
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 2
24269: PUSH
24270: LD_INT 3
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 2
24279: NEG
24280: PUSH
24281: LD_INT 1
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 3
24290: NEG
24291: PUSH
24292: LD_INT 0
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 3
24301: NEG
24302: PUSH
24303: LD_INT 1
24305: NEG
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 3
24313: NEG
24314: PUSH
24315: LD_INT 2
24317: NEG
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 3
24325: NEG
24326: PUSH
24327: LD_INT 3
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24366: LD_ADDR_VAR 0 42
24370: PUSH
24371: LD_INT 0
24373: PUSH
24374: LD_INT 0
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 0
24383: PUSH
24384: LD_INT 1
24386: NEG
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 1
24394: PUSH
24395: LD_INT 0
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 1
24404: PUSH
24405: LD_INT 1
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 0
24414: PUSH
24415: LD_INT 1
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 1
24424: NEG
24425: PUSH
24426: LD_INT 0
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: NEG
24436: PUSH
24437: LD_INT 1
24439: NEG
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 1
24447: NEG
24448: PUSH
24449: LD_INT 2
24451: NEG
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 0
24459: PUSH
24460: LD_INT 2
24462: NEG
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 1
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 2
24481: PUSH
24482: LD_INT 1
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 2
24491: PUSH
24492: LD_INT 2
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 1
24501: PUSH
24502: LD_INT 2
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: LD_INT 2
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 1
24521: NEG
24522: PUSH
24523: LD_INT 1
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 2
24532: NEG
24533: PUSH
24534: LD_INT 1
24536: NEG
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 2
24544: NEG
24545: PUSH
24546: LD_INT 2
24548: NEG
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 2
24556: NEG
24557: PUSH
24558: LD_INT 3
24560: NEG
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 1
24568: NEG
24569: PUSH
24570: LD_INT 3
24572: NEG
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 0
24580: PUSH
24581: LD_INT 3
24583: NEG
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: PUSH
24592: LD_INT 2
24594: NEG
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 3
24602: PUSH
24603: LD_INT 2
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 3
24612: PUSH
24613: LD_INT 3
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: LD_INT 3
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 1
24632: PUSH
24633: LD_INT 3
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 0
24642: PUSH
24643: LD_INT 3
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 1
24652: NEG
24653: PUSH
24654: LD_INT 2
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 3
24663: NEG
24664: PUSH
24665: LD_INT 2
24667: NEG
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 3
24675: NEG
24676: PUSH
24677: LD_INT 3
24679: NEG
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24716: LD_ADDR_VAR 0 43
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 0
24733: PUSH
24734: LD_INT 1
24736: NEG
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 1
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 0
24764: PUSH
24765: LD_INT 1
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 1
24774: NEG
24775: PUSH
24776: LD_INT 0
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 1
24789: NEG
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 1
24797: NEG
24798: PUSH
24799: LD_INT 2
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 0
24809: PUSH
24810: LD_INT 2
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: LD_INT 1
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 2
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 1
24851: PUSH
24852: LD_INT 2
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 0
24861: PUSH
24862: LD_INT 2
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 1
24871: NEG
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 2
24882: NEG
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 2
24893: NEG
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 1
24905: NEG
24906: PUSH
24907: LD_INT 3
24909: NEG
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: LD_INT 3
24920: NEG
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 1
24928: PUSH
24929: LD_INT 2
24931: NEG
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 2
24939: PUSH
24940: LD_INT 1
24942: NEG
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 3
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 3
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: LD_INT 3
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 0
24980: PUSH
24981: LD_INT 3
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 1
24990: NEG
24991: PUSH
24992: LD_INT 2
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 2
25001: NEG
25002: PUSH
25003: LD_INT 1
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 3
25012: NEG
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 3
25023: NEG
25024: PUSH
25025: LD_INT 1
25027: NEG
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25064: LD_ADDR_VAR 0 44
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 0
25081: PUSH
25082: LD_INT 1
25084: NEG
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 1
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 1
25133: NEG
25134: PUSH
25135: LD_INT 1
25137: NEG
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 1
25145: NEG
25146: PUSH
25147: LD_INT 2
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: LD_INT 1
25160: NEG
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 2
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 2
25188: PUSH
25189: LD_INT 2
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: LD_INT 2
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 1
25208: NEG
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 2
25219: NEG
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 2
25230: NEG
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 2
25242: NEG
25243: PUSH
25244: LD_INT 2
25246: NEG
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 2
25254: NEG
25255: PUSH
25256: LD_INT 3
25258: NEG
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 2
25266: PUSH
25267: LD_INT 1
25269: NEG
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 3
25277: PUSH
25278: LD_INT 0
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 3
25287: PUSH
25288: LD_INT 1
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 3
25297: PUSH
25298: LD_INT 2
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 3
25307: PUSH
25308: LD_INT 3
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 2
25317: PUSH
25318: LD_INT 3
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 2
25327: NEG
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 3
25338: NEG
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 3
25349: NEG
25350: PUSH
25351: LD_INT 1
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 3
25361: NEG
25362: PUSH
25363: LD_INT 2
25365: NEG
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 3
25373: NEG
25374: PUSH
25375: LD_INT 3
25377: NEG
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25414: LD_ADDR_VAR 0 45
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 0
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: LD_INT 0
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 1
25472: NEG
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: NEG
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 1
25495: NEG
25496: PUSH
25497: LD_INT 2
25499: NEG
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: LD_INT 2
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: LD_INT 1
25521: NEG
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 2
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 2
25539: PUSH
25540: LD_INT 2
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: LD_INT 2
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 0
25559: PUSH
25560: LD_INT 2
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: NEG
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 2
25580: NEG
25581: PUSH
25582: LD_INT 1
25584: NEG
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 2
25592: NEG
25593: PUSH
25594: LD_INT 2
25596: NEG
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 2
25604: NEG
25605: PUSH
25606: LD_INT 3
25608: NEG
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 1
25616: NEG
25617: PUSH
25618: LD_INT 3
25620: NEG
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: LD_INT 3
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: LD_INT 2
25642: NEG
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 3
25650: PUSH
25651: LD_INT 2
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 3
25660: PUSH
25661: LD_INT 3
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 2
25670: PUSH
25671: LD_INT 3
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: LD_INT 3
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: LD_INT 3
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 1
25700: NEG
25701: PUSH
25702: LD_INT 2
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 3
25711: NEG
25712: PUSH
25713: LD_INT 2
25715: NEG
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 3
25723: NEG
25724: PUSH
25725: LD_INT 3
25727: NEG
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25764: LD_ADDR_VAR 0 46
25768: PUSH
25769: LD_INT 0
25771: PUSH
25772: LD_INT 0
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 0
25781: PUSH
25782: LD_INT 1
25784: NEG
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 1
25792: PUSH
25793: LD_INT 0
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 1
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 0
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 1
25822: NEG
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: NEG
25834: PUSH
25835: LD_INT 1
25837: NEG
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 1
25845: NEG
25846: PUSH
25847: LD_INT 2
25849: NEG
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: LD_INT 2
25860: NEG
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: LD_INT 1
25871: NEG
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 2
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 2
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 1
25899: PUSH
25900: LD_INT 2
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: LD_INT 2
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: LD_INT 1
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 2
25930: NEG
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 2
25941: NEG
25942: PUSH
25943: LD_INT 1
25945: NEG
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: LD_INT 3
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: LD_INT 3
25968: NEG
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 1
25976: PUSH
25977: LD_INT 2
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 3
25998: PUSH
25999: LD_INT 0
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 3
26008: PUSH
26009: LD_INT 1
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 1
26018: PUSH
26019: LD_INT 3
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 0
26028: PUSH
26029: LD_INT 3
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 1
26038: NEG
26039: PUSH
26040: LD_INT 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: NEG
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 3
26060: NEG
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 3
26071: NEG
26072: PUSH
26073: LD_INT 1
26075: NEG
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26112: LD_ADDR_VAR 0 47
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 0
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 1
26150: PUSH
26151: LD_INT 1
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: LD_INT 1
26185: NEG
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: LD_INT 2
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: LD_INT 2
26208: NEG
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 1
26216: PUSH
26217: LD_INT 1
26219: NEG
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 2
26227: NEG
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 2
26239: NEG
26240: PUSH
26241: LD_INT 2
26243: NEG
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26263: LD_ADDR_VAR 0 48
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 1
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: LD_INT 1
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 0
26311: PUSH
26312: LD_INT 1
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 1
26321: NEG
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: NEG
26333: PUSH
26334: LD_INT 1
26336: NEG
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 1
26344: NEG
26345: PUSH
26346: LD_INT 2
26348: NEG
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 0
26356: PUSH
26357: LD_INT 2
26359: NEG
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 1
26367: PUSH
26368: LD_INT 1
26370: NEG
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 2
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 2
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26410: LD_ADDR_VAR 0 49
26414: PUSH
26415: LD_INT 0
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 0
26427: PUSH
26428: LD_INT 1
26430: NEG
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: LD_INT 0
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: LD_INT 1
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: LD_INT 1
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 1
26468: NEG
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: LD_INT 2
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: LD_INT 2
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26554: LD_ADDR_VAR 0 50
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: LD_INT 1
26574: NEG
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 1
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 0
26602: PUSH
26603: LD_INT 1
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 1
26612: NEG
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 1
26623: NEG
26624: PUSH
26625: LD_INT 1
26627: NEG
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 2
26635: PUSH
26636: LD_INT 1
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 2
26645: PUSH
26646: LD_INT 2
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 1
26655: PUSH
26656: LD_INT 2
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: LD_INT 2
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 1
26675: NEG
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26698: LD_ADDR_VAR 0 51
26702: PUSH
26703: LD_INT 0
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: LD_INT 1
26718: NEG
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 1
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: PUSH
26737: LD_INT 1
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: LD_INT 1
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 1
26756: NEG
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 1
26767: NEG
26768: PUSH
26769: LD_INT 1
26771: NEG
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 1
26779: PUSH
26780: LD_INT 2
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: LD_INT 2
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 1
26799: NEG
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 2
26810: NEG
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 2
26821: NEG
26822: PUSH
26823: LD_INT 1
26825: NEG
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26845: LD_ADDR_VAR 0 52
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: LD_INT 1
26865: NEG
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 1
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 0
26893: PUSH
26894: LD_INT 1
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 1
26903: NEG
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 1
26914: NEG
26915: PUSH
26916: LD_INT 1
26918: NEG
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 1
26926: NEG
26927: PUSH
26928: LD_INT 2
26930: NEG
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 1
26938: NEG
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 2
26949: NEG
26950: PUSH
26951: LD_INT 0
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 2
26960: NEG
26961: PUSH
26962: LD_INT 1
26964: NEG
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 2
26972: NEG
26973: PUSH
26974: LD_INT 2
26976: NEG
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26996: LD_ADDR_VAR 0 53
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: LD_INT 0
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: LD_INT 1
27016: NEG
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: LD_INT 1
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: LD_INT 1
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 1
27054: NEG
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 1
27065: NEG
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 1
27077: NEG
27078: PUSH
27079: LD_INT 2
27081: NEG
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 0
27089: PUSH
27090: LD_INT 2
27092: NEG
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: LD_INT 1
27103: NEG
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 2
27111: PUSH
27112: LD_INT 0
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 2
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: LD_INT 2
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: LD_INT 2
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 0
27151: PUSH
27152: LD_INT 2
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 2
27172: NEG
27173: PUSH
27174: LD_INT 0
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 2
27183: NEG
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 2
27195: NEG
27196: PUSH
27197: LD_INT 2
27199: NEG
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27226: LD_ADDR_VAR 0 54
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 0
27243: PUSH
27244: LD_INT 1
27246: NEG
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 1
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 1
27284: NEG
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: LD_INT 1
27299: NEG
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 1
27307: NEG
27308: PUSH
27309: LD_INT 2
27311: NEG
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 0
27319: PUSH
27320: LD_INT 2
27322: NEG
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 1
27330: PUSH
27331: LD_INT 1
27333: NEG
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 2
27341: PUSH
27342: LD_INT 0
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 2
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 2
27361: PUSH
27362: LD_INT 2
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 1
27371: PUSH
27372: LD_INT 2
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 0
27381: PUSH
27382: LD_INT 2
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 1
27391: NEG
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 2
27402: NEG
27403: PUSH
27404: LD_INT 0
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 2
27413: NEG
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 2
27425: NEG
27426: PUSH
27427: LD_INT 2
27429: NEG
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27456: LD_ADDR_VAR 0 55
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: LD_INT 1
27476: NEG
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 1
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 0
27504: PUSH
27505: LD_INT 1
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 1
27514: NEG
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: PUSH
27527: LD_INT 1
27529: NEG
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: NEG
27538: PUSH
27539: LD_INT 2
27541: NEG
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: LD_INT 2
27552: NEG
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 1
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 2
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 2
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 2
27591: PUSH
27592: LD_INT 2
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 1
27601: PUSH
27602: LD_INT 2
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 0
27611: PUSH
27612: LD_INT 2
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 1
27621: NEG
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 2
27632: NEG
27633: PUSH
27634: LD_INT 0
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 2
27643: NEG
27644: PUSH
27645: LD_INT 1
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 2
27655: NEG
27656: PUSH
27657: LD_INT 2
27659: NEG
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27686: LD_ADDR_VAR 0 56
27690: PUSH
27691: LD_INT 0
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 0
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: LD_INT 1
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 0
27734: PUSH
27735: LD_INT 1
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: NEG
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 1
27767: NEG
27768: PUSH
27769: LD_INT 2
27771: NEG
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: LD_INT 2
27782: NEG
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 1
27790: PUSH
27791: LD_INT 1
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 2
27801: PUSH
27802: LD_INT 0
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 2
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: LD_INT 2
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 1
27831: PUSH
27832: LD_INT 2
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: LD_INT 2
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 1
27851: NEG
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 2
27862: NEG
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 2
27873: NEG
27874: PUSH
27875: LD_INT 1
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 2
27885: NEG
27886: PUSH
27887: LD_INT 2
27889: NEG
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27916: LD_ADDR_VAR 0 57
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: LD_INT 0
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: LD_INT 1
27936: NEG
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 1
27954: PUSH
27955: LD_INT 1
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: LD_INT 1
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 1
27974: NEG
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: NEG
27986: PUSH
27987: LD_INT 1
27989: NEG
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 1
27997: NEG
27998: PUSH
27999: LD_INT 2
28001: NEG
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: LD_INT 2
28012: NEG
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 1
28020: PUSH
28021: LD_INT 1
28023: NEG
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 2
28031: PUSH
28032: LD_INT 0
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 2
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 2
28051: PUSH
28052: LD_INT 2
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 1
28061: PUSH
28062: LD_INT 2
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 0
28071: PUSH
28072: LD_INT 2
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 1
28081: NEG
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 2
28092: NEG
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 2
28103: NEG
28104: PUSH
28105: LD_INT 1
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 2
28115: NEG
28116: PUSH
28117: LD_INT 2
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28146: LD_ADDR_VAR 0 58
28150: PUSH
28151: LD_INT 0
28153: PUSH
28154: LD_INT 0
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: LD_INT 1
28166: NEG
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: PUSH
28185: LD_INT 1
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 1
28204: NEG
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: LD_INT 2
28242: NEG
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 1
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 2
28261: PUSH
28262: LD_INT 0
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 2
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 2
28281: PUSH
28282: LD_INT 2
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 1
28291: PUSH
28292: LD_INT 2
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: LD_INT 2
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 2
28322: NEG
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 2
28333: NEG
28334: PUSH
28335: LD_INT 1
28337: NEG
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 2
28345: NEG
28346: PUSH
28347: LD_INT 2
28349: NEG
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28376: LD_ADDR_VAR 0 59
28380: PUSH
28381: LD_INT 0
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: LD_INT 1
28396: NEG
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 1
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: LD_INT 1
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 0
28424: PUSH
28425: LD_INT 1
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 1
28434: NEG
28435: PUSH
28436: LD_INT 0
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 1
28445: NEG
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28464: LD_ADDR_VAR 0 60
28468: PUSH
28469: LD_INT 0
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: LD_INT 1
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: LD_INT 1
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: LD_INT 1
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 1
28522: NEG
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28552: LD_ADDR_VAR 0 61
28556: PUSH
28557: LD_INT 0
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: LD_INT 1
28572: NEG
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 1
28590: PUSH
28591: LD_INT 1
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: LD_INT 1
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 1
28610: NEG
28611: PUSH
28612: LD_INT 0
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 1
28621: NEG
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28640: LD_ADDR_VAR 0 62
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 1
28668: PUSH
28669: LD_INT 0
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: NEG
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28728: LD_ADDR_VAR 0 63
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: LD_INT 0
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: LD_INT 1
28748: NEG
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 1
28756: PUSH
28757: LD_INT 0
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: LD_INT 1
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: LD_INT 1
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: NEG
28787: PUSH
28788: LD_INT 0
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 1
28797: NEG
28798: PUSH
28799: LD_INT 1
28801: NEG
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28816: LD_ADDR_VAR 0 64
28820: PUSH
28821: LD_INT 0
28823: PUSH
28824: LD_INT 0
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 0
28833: PUSH
28834: LD_INT 1
28836: NEG
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 1
28844: PUSH
28845: LD_INT 0
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 1
28854: PUSH
28855: LD_INT 1
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: LD_INT 1
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: NEG
28875: PUSH
28876: LD_INT 0
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 1
28885: NEG
28886: PUSH
28887: LD_INT 1
28889: NEG
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: ST_TO_ADDR
// end ; 1 :
28904: GO 34801
28906: LD_INT 1
28908: DOUBLE
28909: EQUAL
28910: IFTRUE 28914
28912: GO 31537
28914: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28915: LD_ADDR_VAR 0 11
28919: PUSH
28920: LD_INT 1
28922: NEG
28923: PUSH
28924: LD_INT 3
28926: NEG
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: LD_INT 3
28937: NEG
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: LD_INT 2
28948: NEG
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: LIST
28958: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28959: LD_ADDR_VAR 0 12
28963: PUSH
28964: LD_INT 2
28966: PUSH
28967: LD_INT 1
28969: NEG
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 3
28977: PUSH
28978: LD_INT 0
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 3
28987: PUSH
28988: LD_INT 1
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: LIST
28999: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29000: LD_ADDR_VAR 0 13
29004: PUSH
29005: LD_INT 3
29007: PUSH
29008: LD_INT 2
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 3
29017: PUSH
29018: LD_INT 3
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 2
29027: PUSH
29028: LD_INT 3
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: LIST
29039: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29040: LD_ADDR_VAR 0 14
29044: PUSH
29045: LD_INT 1
29047: PUSH
29048: LD_INT 3
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: LD_INT 3
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 1
29067: NEG
29068: PUSH
29069: LD_INT 2
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: LIST
29080: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29081: LD_ADDR_VAR 0 15
29085: PUSH
29086: LD_INT 2
29088: NEG
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 3
29099: NEG
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 3
29110: NEG
29111: PUSH
29112: LD_INT 1
29114: NEG
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: LIST
29124: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29125: LD_ADDR_VAR 0 16
29129: PUSH
29130: LD_INT 2
29132: NEG
29133: PUSH
29134: LD_INT 3
29136: NEG
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 3
29144: NEG
29145: PUSH
29146: LD_INT 2
29148: NEG
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 3
29156: NEG
29157: PUSH
29158: LD_INT 3
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: LIST
29170: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29171: LD_ADDR_VAR 0 17
29175: PUSH
29176: LD_INT 1
29178: NEG
29179: PUSH
29180: LD_INT 3
29182: NEG
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: LD_INT 3
29193: NEG
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: LD_INT 2
29204: NEG
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: LIST
29214: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29215: LD_ADDR_VAR 0 18
29219: PUSH
29220: LD_INT 2
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 3
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 3
29243: PUSH
29244: LD_INT 1
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: LIST
29255: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29256: LD_ADDR_VAR 0 19
29260: PUSH
29261: LD_INT 3
29263: PUSH
29264: LD_INT 2
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 3
29273: PUSH
29274: LD_INT 3
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 2
29283: PUSH
29284: LD_INT 3
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: LIST
29295: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29296: LD_ADDR_VAR 0 20
29300: PUSH
29301: LD_INT 1
29303: PUSH
29304: LD_INT 3
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: LD_INT 3
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 1
29323: NEG
29324: PUSH
29325: LD_INT 2
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: LIST
29336: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29337: LD_ADDR_VAR 0 21
29341: PUSH
29342: LD_INT 2
29344: NEG
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 3
29355: NEG
29356: PUSH
29357: LD_INT 0
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 3
29366: NEG
29367: PUSH
29368: LD_INT 1
29370: NEG
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: LIST
29380: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29381: LD_ADDR_VAR 0 22
29385: PUSH
29386: LD_INT 2
29388: NEG
29389: PUSH
29390: LD_INT 3
29392: NEG
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 3
29400: NEG
29401: PUSH
29402: LD_INT 2
29404: NEG
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 3
29412: NEG
29413: PUSH
29414: LD_INT 3
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: LIST
29426: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29427: LD_ADDR_VAR 0 23
29431: PUSH
29432: LD_INT 0
29434: PUSH
29435: LD_INT 3
29437: NEG
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 1
29445: NEG
29446: PUSH
29447: LD_INT 4
29449: NEG
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 1
29457: PUSH
29458: LD_INT 3
29460: NEG
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: LIST
29470: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29471: LD_ADDR_VAR 0 24
29475: PUSH
29476: LD_INT 3
29478: PUSH
29479: LD_INT 0
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 3
29488: PUSH
29489: LD_INT 1
29491: NEG
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 4
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: LIST
29511: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29512: LD_ADDR_VAR 0 25
29516: PUSH
29517: LD_INT 3
29519: PUSH
29520: LD_INT 3
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 4
29529: PUSH
29530: LD_INT 3
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 3
29539: PUSH
29540: LD_INT 4
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: LIST
29551: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29552: LD_ADDR_VAR 0 26
29556: PUSH
29557: LD_INT 0
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: LD_INT 4
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: NEG
29580: PUSH
29581: LD_INT 3
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29593: LD_ADDR_VAR 0 27
29597: PUSH
29598: LD_INT 3
29600: NEG
29601: PUSH
29602: LD_INT 0
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 3
29611: NEG
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 4
29622: NEG
29623: PUSH
29624: LD_INT 1
29626: NEG
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: LIST
29636: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29637: LD_ADDR_VAR 0 28
29641: PUSH
29642: LD_INT 3
29644: NEG
29645: PUSH
29646: LD_INT 3
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 3
29656: NEG
29657: PUSH
29658: LD_INT 4
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 4
29668: NEG
29669: PUSH
29670: LD_INT 3
29672: NEG
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: LIST
29682: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29683: LD_ADDR_VAR 0 29
29687: PUSH
29688: LD_INT 1
29690: NEG
29691: PUSH
29692: LD_INT 3
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: LD_INT 3
29705: NEG
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: LD_INT 2
29716: NEG
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 1
29724: NEG
29725: PUSH
29726: LD_INT 4
29728: NEG
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 0
29736: PUSH
29737: LD_INT 4
29739: NEG
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 1
29747: PUSH
29748: LD_INT 3
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 1
29758: NEG
29759: PUSH
29760: LD_INT 5
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 0
29770: PUSH
29771: LD_INT 5
29773: NEG
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 1
29781: PUSH
29782: LD_INT 4
29784: NEG
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 1
29792: NEG
29793: PUSH
29794: LD_INT 6
29796: NEG
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: LD_INT 6
29807: NEG
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 1
29815: PUSH
29816: LD_INT 5
29818: NEG
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29838: LD_ADDR_VAR 0 30
29842: PUSH
29843: LD_INT 2
29845: PUSH
29846: LD_INT 1
29848: NEG
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 3
29856: PUSH
29857: LD_INT 0
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 3
29866: PUSH
29867: LD_INT 1
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 3
29876: PUSH
29877: LD_INT 1
29879: NEG
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 4
29887: PUSH
29888: LD_INT 0
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 4
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 4
29907: PUSH
29908: LD_INT 1
29910: NEG
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 5
29918: PUSH
29919: LD_INT 0
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 5
29928: PUSH
29929: LD_INT 1
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 5
29938: PUSH
29939: LD_INT 1
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 6
29949: PUSH
29950: LD_INT 0
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 6
29959: PUSH
29960: LD_INT 1
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29981: LD_ADDR_VAR 0 31
29985: PUSH
29986: LD_INT 3
29988: PUSH
29989: LD_INT 2
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 3
29998: PUSH
29999: LD_INT 3
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 2
30008: PUSH
30009: LD_INT 3
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 4
30018: PUSH
30019: LD_INT 3
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 4
30028: PUSH
30029: LD_INT 4
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 3
30038: PUSH
30039: LD_INT 4
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 5
30048: PUSH
30049: LD_INT 4
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 5
30058: PUSH
30059: LD_INT 5
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 4
30068: PUSH
30069: LD_INT 5
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 6
30078: PUSH
30079: LD_INT 5
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 6
30088: PUSH
30089: LD_INT 6
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 5
30098: PUSH
30099: LD_INT 6
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30120: LD_ADDR_VAR 0 32
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: LD_INT 3
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: LD_INT 3
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 1
30147: NEG
30148: PUSH
30149: LD_INT 2
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 1
30158: PUSH
30159: LD_INT 4
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 0
30168: PUSH
30169: LD_INT 4
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 1
30178: NEG
30179: PUSH
30180: LD_INT 3
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 1
30189: PUSH
30190: LD_INT 5
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 0
30199: PUSH
30200: LD_INT 5
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 1
30209: NEG
30210: PUSH
30211: LD_INT 4
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 1
30220: PUSH
30221: LD_INT 6
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 0
30230: PUSH
30231: LD_INT 6
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 1
30240: NEG
30241: PUSH
30242: LD_INT 5
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30263: LD_ADDR_VAR 0 33
30267: PUSH
30268: LD_INT 2
30270: NEG
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 3
30281: NEG
30282: PUSH
30283: LD_INT 0
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 3
30292: NEG
30293: PUSH
30294: LD_INT 1
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 3
30304: NEG
30305: PUSH
30306: LD_INT 1
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 4
30315: NEG
30316: PUSH
30317: LD_INT 0
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 4
30326: NEG
30327: PUSH
30328: LD_INT 1
30330: NEG
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 4
30338: NEG
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 5
30349: NEG
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 5
30360: NEG
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 5
30372: NEG
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 6
30383: NEG
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 6
30394: NEG
30395: PUSH
30396: LD_INT 1
30398: NEG
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30418: LD_ADDR_VAR 0 34
30422: PUSH
30423: LD_INT 2
30425: NEG
30426: PUSH
30427: LD_INT 3
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 3
30437: NEG
30438: PUSH
30439: LD_INT 2
30441: NEG
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 3
30449: NEG
30450: PUSH
30451: LD_INT 3
30453: NEG
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 3
30461: NEG
30462: PUSH
30463: LD_INT 4
30465: NEG
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 4
30473: NEG
30474: PUSH
30475: LD_INT 3
30477: NEG
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 4
30485: NEG
30486: PUSH
30487: LD_INT 4
30489: NEG
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 4
30497: NEG
30498: PUSH
30499: LD_INT 5
30501: NEG
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 5
30509: NEG
30510: PUSH
30511: LD_INT 4
30513: NEG
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 5
30521: NEG
30522: PUSH
30523: LD_INT 5
30525: NEG
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 5
30533: NEG
30534: PUSH
30535: LD_INT 6
30537: NEG
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 6
30545: NEG
30546: PUSH
30547: LD_INT 5
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 6
30557: NEG
30558: PUSH
30559: LD_INT 6
30561: NEG
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30581: LD_ADDR_VAR 0 41
30585: PUSH
30586: LD_INT 0
30588: PUSH
30589: LD_INT 2
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 1
30599: NEG
30600: PUSH
30601: LD_INT 3
30603: NEG
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 1
30611: PUSH
30612: LD_INT 2
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: LIST
30624: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30625: LD_ADDR_VAR 0 42
30629: PUSH
30630: LD_INT 2
30632: PUSH
30633: LD_INT 0
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 2
30642: PUSH
30643: LD_INT 1
30645: NEG
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 3
30653: PUSH
30654: LD_INT 1
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: LIST
30665: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30666: LD_ADDR_VAR 0 43
30670: PUSH
30671: LD_INT 2
30673: PUSH
30674: LD_INT 2
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 3
30683: PUSH
30684: LD_INT 2
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 2
30693: PUSH
30694: LD_INT 3
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30706: LD_ADDR_VAR 0 44
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 1
30723: PUSH
30724: LD_INT 3
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 1
30733: NEG
30734: PUSH
30735: LD_INT 2
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: LIST
30746: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30747: LD_ADDR_VAR 0 45
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: LD_INT 0
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 2
30765: NEG
30766: PUSH
30767: LD_INT 1
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 3
30776: NEG
30777: PUSH
30778: LD_INT 1
30780: NEG
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: LIST
30790: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30791: LD_ADDR_VAR 0 46
30795: PUSH
30796: LD_INT 2
30798: NEG
30799: PUSH
30800: LD_INT 2
30802: NEG
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 2
30810: NEG
30811: PUSH
30812: LD_INT 3
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 3
30822: NEG
30823: PUSH
30824: LD_INT 2
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: LIST
30836: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30837: LD_ADDR_VAR 0 47
30841: PUSH
30842: LD_INT 2
30844: NEG
30845: PUSH
30846: LD_INT 3
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: LD_INT 3
30860: NEG
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30870: LD_ADDR_VAR 0 48
30874: PUSH
30875: LD_INT 1
30877: PUSH
30878: LD_INT 2
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 2
30888: PUSH
30889: LD_INT 1
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30901: LD_ADDR_VAR 0 49
30905: PUSH
30906: LD_INT 3
30908: PUSH
30909: LD_INT 1
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 3
30918: PUSH
30919: LD_INT 2
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30930: LD_ADDR_VAR 0 50
30934: PUSH
30935: LD_INT 2
30937: PUSH
30938: LD_INT 3
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: LD_INT 3
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30959: LD_ADDR_VAR 0 51
30963: PUSH
30964: LD_INT 1
30966: NEG
30967: PUSH
30968: LD_INT 2
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 2
30977: NEG
30978: PUSH
30979: LD_INT 1
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30990: LD_ADDR_VAR 0 52
30994: PUSH
30995: LD_INT 3
30997: NEG
30998: PUSH
30999: LD_INT 1
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 3
31009: NEG
31010: PUSH
31011: LD_INT 2
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31023: LD_ADDR_VAR 0 53
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: LD_INT 3
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 0
31042: PUSH
31043: LD_INT 3
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: LD_INT 2
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: LIST
31066: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31067: LD_ADDR_VAR 0 54
31071: PUSH
31072: LD_INT 2
31074: PUSH
31075: LD_INT 1
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 3
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 3
31095: PUSH
31096: LD_INT 1
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: LIST
31107: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31108: LD_ADDR_VAR 0 55
31112: PUSH
31113: LD_INT 3
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: LD_INT 3
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 2
31135: PUSH
31136: LD_INT 3
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: LIST
31147: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31148: LD_ADDR_VAR 0 56
31152: PUSH
31153: LD_INT 1
31155: PUSH
31156: LD_INT 3
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 0
31165: PUSH
31166: LD_INT 3
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: NEG
31176: PUSH
31177: LD_INT 2
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: LIST
31188: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31189: LD_ADDR_VAR 0 57
31193: PUSH
31194: LD_INT 2
31196: NEG
31197: PUSH
31198: LD_INT 1
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 3
31207: NEG
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 3
31218: NEG
31219: PUSH
31220: LD_INT 1
31222: NEG
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: LIST
31232: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31233: LD_ADDR_VAR 0 58
31237: PUSH
31238: LD_INT 2
31240: NEG
31241: PUSH
31242: LD_INT 3
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 3
31252: NEG
31253: PUSH
31254: LD_INT 2
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 3
31264: NEG
31265: PUSH
31266: LD_INT 3
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: LIST
31278: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31279: LD_ADDR_VAR 0 59
31283: PUSH
31284: LD_INT 1
31286: NEG
31287: PUSH
31288: LD_INT 2
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 0
31298: PUSH
31299: LD_INT 2
31301: NEG
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: LD_INT 1
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31323: LD_ADDR_VAR 0 60
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 2
31341: PUSH
31342: LD_INT 0
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 2
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: LIST
31363: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31364: LD_ADDR_VAR 0 61
31368: PUSH
31369: LD_INT 2
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 2
31381: PUSH
31382: LD_INT 2
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 1
31391: PUSH
31392: LD_INT 2
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: LIST
31403: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31404: LD_ADDR_VAR 0 62
31408: PUSH
31409: LD_INT 1
31411: PUSH
31412: LD_INT 2
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 0
31421: PUSH
31422: LD_INT 2
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: PUSH
31433: LD_INT 1
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31445: LD_ADDR_VAR 0 63
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: LD_INT 1
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: LD_INT 0
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 2
31474: NEG
31475: PUSH
31476: LD_INT 1
31478: NEG
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: LIST
31488: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31489: LD_ADDR_VAR 0 64
31493: PUSH
31494: LD_INT 1
31496: NEG
31497: PUSH
31498: LD_INT 2
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 2
31508: NEG
31509: PUSH
31510: LD_INT 1
31512: NEG
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 2
31520: NEG
31521: PUSH
31522: LD_INT 2
31524: NEG
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: LIST
31534: ST_TO_ADDR
// end ; 2 :
31535: GO 34801
31537: LD_INT 2
31539: DOUBLE
31540: EQUAL
31541: IFTRUE 31545
31543: GO 34800
31545: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31546: LD_ADDR_VAR 0 29
31550: PUSH
31551: LD_INT 4
31553: PUSH
31554: LD_INT 0
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 4
31563: PUSH
31564: LD_INT 1
31566: NEG
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 5
31574: PUSH
31575: LD_INT 0
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 5
31584: PUSH
31585: LD_INT 1
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 4
31594: PUSH
31595: LD_INT 1
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 3
31604: PUSH
31605: LD_INT 0
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 3
31614: PUSH
31615: LD_INT 1
31617: NEG
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 3
31625: PUSH
31626: LD_INT 2
31628: NEG
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 5
31636: PUSH
31637: LD_INT 2
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 3
31646: PUSH
31647: LD_INT 3
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 3
31656: PUSH
31657: LD_INT 2
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 4
31666: PUSH
31667: LD_INT 3
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 4
31676: PUSH
31677: LD_INT 4
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 3
31686: PUSH
31687: LD_INT 4
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 2
31696: PUSH
31697: LD_INT 3
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 2
31706: PUSH
31707: LD_INT 2
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 4
31716: PUSH
31717: LD_INT 2
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 2
31726: PUSH
31727: LD_INT 4
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: LD_INT 4
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: LD_INT 3
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: LD_INT 4
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 1
31766: PUSH
31767: LD_INT 5
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 0
31776: PUSH
31777: LD_INT 5
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 1
31786: NEG
31787: PUSH
31788: LD_INT 4
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: NEG
31798: PUSH
31799: LD_INT 3
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 2
31808: PUSH
31809: LD_INT 5
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 2
31818: NEG
31819: PUSH
31820: LD_INT 3
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 3
31829: NEG
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 3
31840: NEG
31841: PUSH
31842: LD_INT 1
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 2
31852: NEG
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 2
31863: NEG
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 3
31874: NEG
31875: PUSH
31876: LD_INT 1
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 4
31885: NEG
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 4
31896: NEG
31897: PUSH
31898: LD_INT 1
31900: NEG
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 4
31908: NEG
31909: PUSH
31910: LD_INT 2
31912: NEG
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 2
31920: NEG
31921: PUSH
31922: LD_INT 2
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 4
31931: NEG
31932: PUSH
31933: LD_INT 4
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 4
31943: NEG
31944: PUSH
31945: LD_INT 5
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 3
31955: NEG
31956: PUSH
31957: LD_INT 4
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 3
31967: NEG
31968: PUSH
31969: LD_INT 3
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 4
31979: NEG
31980: PUSH
31981: LD_INT 3
31983: NEG
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 5
31991: NEG
31992: PUSH
31993: LD_INT 4
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 5
32003: NEG
32004: PUSH
32005: LD_INT 5
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 3
32015: NEG
32016: PUSH
32017: LD_INT 5
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 5
32027: NEG
32028: PUSH
32029: LD_INT 3
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32084: LD_ADDR_VAR 0 30
32088: PUSH
32089: LD_INT 4
32091: PUSH
32092: LD_INT 4
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 4
32101: PUSH
32102: LD_INT 3
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 5
32111: PUSH
32112: LD_INT 4
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 5
32121: PUSH
32122: LD_INT 5
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 4
32131: PUSH
32132: LD_INT 5
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 3
32141: PUSH
32142: LD_INT 4
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 3
32151: PUSH
32152: LD_INT 3
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 5
32161: PUSH
32162: LD_INT 3
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 3
32171: PUSH
32172: LD_INT 5
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: LD_INT 3
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: LD_INT 2
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 1
32201: PUSH
32202: LD_INT 3
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: LD_INT 4
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: LD_INT 4
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: LD_INT 3
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 1
32242: NEG
32243: PUSH
32244: LD_INT 2
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 2
32253: PUSH
32254: LD_INT 4
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 2
32263: NEG
32264: PUSH
32265: LD_INT 2
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 4
32274: NEG
32275: PUSH
32276: LD_INT 0
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 4
32285: NEG
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 3
32297: NEG
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 3
32308: NEG
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 4
32319: NEG
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 5
32330: NEG
32331: PUSH
32332: LD_INT 0
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 5
32341: NEG
32342: PUSH
32343: LD_INT 1
32345: NEG
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 5
32353: NEG
32354: PUSH
32355: LD_INT 2
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 3
32365: NEG
32366: PUSH
32367: LD_INT 2
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 3
32376: NEG
32377: PUSH
32378: LD_INT 3
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 3
32388: NEG
32389: PUSH
32390: LD_INT 4
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 2
32400: NEG
32401: PUSH
32402: LD_INT 3
32404: NEG
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 2
32412: NEG
32413: PUSH
32414: LD_INT 2
32416: NEG
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 3
32424: NEG
32425: PUSH
32426: LD_INT 2
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 4
32436: NEG
32437: PUSH
32438: LD_INT 3
32440: NEG
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 4
32448: NEG
32449: PUSH
32450: LD_INT 4
32452: NEG
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 2
32460: NEG
32461: PUSH
32462: LD_INT 4
32464: NEG
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 4
32472: NEG
32473: PUSH
32474: LD_INT 2
32476: NEG
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 0
32484: PUSH
32485: LD_INT 4
32487: NEG
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 0
32495: PUSH
32496: LD_INT 5
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 1
32506: PUSH
32507: LD_INT 4
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 1
32517: PUSH
32518: LD_INT 3
32520: NEG
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 0
32528: PUSH
32529: LD_INT 3
32531: NEG
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 1
32539: NEG
32540: PUSH
32541: LD_INT 4
32543: NEG
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 1
32551: NEG
32552: PUSH
32553: LD_INT 5
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 2
32563: PUSH
32564: LD_INT 3
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 2
32574: NEG
32575: PUSH
32576: LD_INT 5
32578: NEG
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32631: LD_ADDR_VAR 0 31
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: LD_INT 4
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 0
32648: PUSH
32649: LD_INT 3
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 1
32658: PUSH
32659: LD_INT 4
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: LD_INT 5
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 0
32678: PUSH
32679: LD_INT 5
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: NEG
32689: PUSH
32690: LD_INT 4
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 1
32699: NEG
32700: PUSH
32701: LD_INT 3
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: PUSH
32711: LD_INT 5
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 2
32720: NEG
32721: PUSH
32722: LD_INT 3
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 3
32731: NEG
32732: PUSH
32733: LD_INT 0
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 3
32742: NEG
32743: PUSH
32744: LD_INT 1
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 2
32754: NEG
32755: PUSH
32756: LD_INT 0
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: LD_INT 1
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 3
32776: NEG
32777: PUSH
32778: LD_INT 1
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 4
32787: NEG
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 4
32798: NEG
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 4
32810: NEG
32811: PUSH
32812: LD_INT 2
32814: NEG
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 2
32822: NEG
32823: PUSH
32824: LD_INT 2
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 4
32833: NEG
32834: PUSH
32835: LD_INT 4
32837: NEG
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 4
32845: NEG
32846: PUSH
32847: LD_INT 5
32849: NEG
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 3
32857: NEG
32858: PUSH
32859: LD_INT 4
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 3
32869: NEG
32870: PUSH
32871: LD_INT 3
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 4
32881: NEG
32882: PUSH
32883: LD_INT 3
32885: NEG
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 5
32893: NEG
32894: PUSH
32895: LD_INT 4
32897: NEG
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 5
32905: NEG
32906: PUSH
32907: LD_INT 5
32909: NEG
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 3
32917: NEG
32918: PUSH
32919: LD_INT 5
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 5
32929: NEG
32930: PUSH
32931: LD_INT 3
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: LD_INT 3
32944: NEG
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: LD_INT 4
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: LD_INT 3
32966: NEG
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: LD_INT 2
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: LD_INT 2
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 1
32996: NEG
32997: PUSH
32998: LD_INT 3
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 1
33008: NEG
33009: PUSH
33010: LD_INT 4
33012: NEG
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 2
33020: PUSH
33021: LD_INT 2
33023: NEG
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 2
33031: NEG
33032: PUSH
33033: LD_INT 4
33035: NEG
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 4
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 4
33053: PUSH
33054: LD_INT 1
33056: NEG
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 5
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 5
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 4
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 3
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 3
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 3
33115: PUSH
33116: LD_INT 2
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 5
33126: PUSH
33127: LD_INT 2
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33181: LD_ADDR_VAR 0 32
33185: PUSH
33186: LD_INT 4
33188: NEG
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 4
33199: NEG
33200: PUSH
33201: LD_INT 1
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 3
33211: NEG
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 3
33222: NEG
33223: PUSH
33224: LD_INT 1
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 4
33233: NEG
33234: PUSH
33235: LD_INT 1
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 5
33244: NEG
33245: PUSH
33246: LD_INT 0
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 5
33255: NEG
33256: PUSH
33257: LD_INT 1
33259: NEG
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 5
33267: NEG
33268: PUSH
33269: LD_INT 2
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 3
33279: NEG
33280: PUSH
33281: LD_INT 2
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 3
33290: NEG
33291: PUSH
33292: LD_INT 3
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 3
33302: NEG
33303: PUSH
33304: LD_INT 4
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: LD_INT 3
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 2
33326: NEG
33327: PUSH
33328: LD_INT 2
33330: NEG
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 3
33338: NEG
33339: PUSH
33340: LD_INT 2
33342: NEG
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 4
33350: NEG
33351: PUSH
33352: LD_INT 3
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 4
33362: NEG
33363: PUSH
33364: LD_INT 4
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 2
33374: NEG
33375: PUSH
33376: LD_INT 4
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 4
33386: NEG
33387: PUSH
33388: LD_INT 2
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 0
33398: PUSH
33399: LD_INT 4
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: LD_INT 5
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 1
33420: PUSH
33421: LD_INT 4
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: LD_INT 3
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 0
33442: PUSH
33443: LD_INT 3
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: NEG
33454: PUSH
33455: LD_INT 4
33457: NEG
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: LD_INT 5
33469: NEG
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 2
33477: PUSH
33478: LD_INT 3
33480: NEG
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 2
33488: NEG
33489: PUSH
33490: LD_INT 5
33492: NEG
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 3
33500: PUSH
33501: LD_INT 0
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 3
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 4
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 4
33531: PUSH
33532: LD_INT 1
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 3
33541: PUSH
33542: LD_INT 1
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: LD_INT 0
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 2
33561: PUSH
33562: LD_INT 1
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: PUSH
33573: LD_INT 2
33575: NEG
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 4
33583: PUSH
33584: LD_INT 2
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 4
33593: PUSH
33594: LD_INT 4
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 4
33603: PUSH
33604: LD_INT 3
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 5
33613: PUSH
33614: LD_INT 4
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 5
33623: PUSH
33624: LD_INT 5
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 4
33633: PUSH
33634: LD_INT 5
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 3
33643: PUSH
33644: LD_INT 4
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 3
33653: PUSH
33654: LD_INT 3
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 5
33663: PUSH
33664: LD_INT 3
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 3
33673: PUSH
33674: LD_INT 5
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33728: LD_ADDR_VAR 0 33
33732: PUSH
33733: LD_INT 4
33735: NEG
33736: PUSH
33737: LD_INT 4
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 4
33747: NEG
33748: PUSH
33749: LD_INT 5
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 3
33759: NEG
33760: PUSH
33761: LD_INT 4
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 3
33771: NEG
33772: PUSH
33773: LD_INT 3
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 4
33783: NEG
33784: PUSH
33785: LD_INT 3
33787: NEG
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 5
33795: NEG
33796: PUSH
33797: LD_INT 4
33799: NEG
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 5
33807: NEG
33808: PUSH
33809: LD_INT 5
33811: NEG
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 3
33819: NEG
33820: PUSH
33821: LD_INT 5
33823: NEG
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 5
33831: NEG
33832: PUSH
33833: LD_INT 3
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: LD_INT 3
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: LD_INT 4
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: LD_INT 3
33868: NEG
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: LD_INT 2
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: LD_INT 2
33890: NEG
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: NEG
33899: PUSH
33900: LD_INT 3
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: NEG
33911: PUSH
33912: LD_INT 4
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: LD_INT 2
33925: NEG
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 2
33933: NEG
33934: PUSH
33935: LD_INT 4
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 4
33945: PUSH
33946: LD_INT 0
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 4
33955: PUSH
33956: LD_INT 1
33958: NEG
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 5
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 5
33976: PUSH
33977: LD_INT 1
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 4
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 3
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 3
34006: PUSH
34007: LD_INT 1
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 3
34017: PUSH
34018: LD_INT 2
34020: NEG
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 5
34028: PUSH
34029: LD_INT 2
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 3
34038: PUSH
34039: LD_INT 3
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 3
34048: PUSH
34049: LD_INT 2
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 4
34058: PUSH
34059: LD_INT 3
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 4
34068: PUSH
34069: LD_INT 4
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 3
34078: PUSH
34079: LD_INT 4
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: PUSH
34089: LD_INT 3
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 2
34098: PUSH
34099: LD_INT 2
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 4
34108: PUSH
34109: LD_INT 2
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 2
34118: PUSH
34119: LD_INT 4
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 0
34128: PUSH
34129: LD_INT 4
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: LD_INT 3
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: PUSH
34149: LD_INT 4
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: LD_INT 5
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 0
34168: PUSH
34169: LD_INT 5
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 1
34178: NEG
34179: PUSH
34180: LD_INT 4
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: LD_INT 3
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 2
34200: PUSH
34201: LD_INT 5
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 2
34210: NEG
34211: PUSH
34212: LD_INT 3
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34266: LD_ADDR_VAR 0 34
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: LD_INT 4
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: LD_INT 5
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: LD_INT 4
34298: NEG
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: LD_INT 3
34309: NEG
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: LD_INT 3
34320: NEG
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 1
34328: NEG
34329: PUSH
34330: LD_INT 4
34332: NEG
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: PUSH
34342: LD_INT 5
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 2
34352: PUSH
34353: LD_INT 3
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 2
34363: NEG
34364: PUSH
34365: LD_INT 5
34367: NEG
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 3
34375: PUSH
34376: LD_INT 0
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 3
34385: PUSH
34386: LD_INT 1
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 4
34396: PUSH
34397: LD_INT 0
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 4
34406: PUSH
34407: LD_INT 1
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 3
34416: PUSH
34417: LD_INT 1
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 2
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 2
34447: PUSH
34448: LD_INT 2
34450: NEG
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 4
34458: PUSH
34459: LD_INT 2
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 4
34468: PUSH
34469: LD_INT 4
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 4
34478: PUSH
34479: LD_INT 3
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 5
34488: PUSH
34489: LD_INT 4
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 5
34498: PUSH
34499: LD_INT 5
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 4
34508: PUSH
34509: LD_INT 5
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 3
34518: PUSH
34519: LD_INT 4
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 3
34528: PUSH
34529: LD_INT 3
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 5
34538: PUSH
34539: LD_INT 3
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 3
34548: PUSH
34549: LD_INT 5
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 0
34558: PUSH
34559: LD_INT 3
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: LD_INT 2
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: LD_INT 3
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 1
34588: PUSH
34589: LD_INT 4
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 0
34598: PUSH
34599: LD_INT 4
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 1
34608: NEG
34609: PUSH
34610: LD_INT 3
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 1
34619: NEG
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: LD_INT 4
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 2
34640: NEG
34641: PUSH
34642: LD_INT 2
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 4
34651: NEG
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 4
34662: NEG
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 3
34674: NEG
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 3
34685: NEG
34686: PUSH
34687: LD_INT 1
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 4
34696: NEG
34697: PUSH
34698: LD_INT 1
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 5
34707: NEG
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 5
34718: NEG
34719: PUSH
34720: LD_INT 1
34722: NEG
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 5
34730: NEG
34731: PUSH
34732: LD_INT 2
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 3
34742: NEG
34743: PUSH
34744: LD_INT 2
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: ST_TO_ADDR
// end ; end ;
34798: GO 34801
34800: POP
// case btype of b_depot , b_warehouse :
34801: LD_VAR 0 1
34805: PUSH
34806: LD_INT 0
34808: DOUBLE
34809: EQUAL
34810: IFTRUE 34820
34812: LD_INT 1
34814: DOUBLE
34815: EQUAL
34816: IFTRUE 34820
34818: GO 35021
34820: POP
// case nation of nation_american :
34821: LD_VAR 0 5
34825: PUSH
34826: LD_INT 1
34828: DOUBLE
34829: EQUAL
34830: IFTRUE 34834
34832: GO 34890
34834: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34835: LD_ADDR_VAR 0 9
34839: PUSH
34840: LD_VAR 0 11
34844: PUSH
34845: LD_VAR 0 12
34849: PUSH
34850: LD_VAR 0 13
34854: PUSH
34855: LD_VAR 0 14
34859: PUSH
34860: LD_VAR 0 15
34864: PUSH
34865: LD_VAR 0 16
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: PUSH
34878: LD_VAR 0 4
34882: PUSH
34883: LD_INT 1
34885: PLUS
34886: ARRAY
34887: ST_TO_ADDR
34888: GO 35019
34890: LD_INT 2
34892: DOUBLE
34893: EQUAL
34894: IFTRUE 34898
34896: GO 34954
34898: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34899: LD_ADDR_VAR 0 9
34903: PUSH
34904: LD_VAR 0 17
34908: PUSH
34909: LD_VAR 0 18
34913: PUSH
34914: LD_VAR 0 19
34918: PUSH
34919: LD_VAR 0 20
34923: PUSH
34924: LD_VAR 0 21
34928: PUSH
34929: LD_VAR 0 22
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: PUSH
34942: LD_VAR 0 4
34946: PUSH
34947: LD_INT 1
34949: PLUS
34950: ARRAY
34951: ST_TO_ADDR
34952: GO 35019
34954: LD_INT 3
34956: DOUBLE
34957: EQUAL
34958: IFTRUE 34962
34960: GO 35018
34962: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34963: LD_ADDR_VAR 0 9
34967: PUSH
34968: LD_VAR 0 23
34972: PUSH
34973: LD_VAR 0 24
34977: PUSH
34978: LD_VAR 0 25
34982: PUSH
34983: LD_VAR 0 26
34987: PUSH
34988: LD_VAR 0 27
34992: PUSH
34993: LD_VAR 0 28
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: PUSH
35006: LD_VAR 0 4
35010: PUSH
35011: LD_INT 1
35013: PLUS
35014: ARRAY
35015: ST_TO_ADDR
35016: GO 35019
35018: POP
35019: GO 35574
35021: LD_INT 2
35023: DOUBLE
35024: EQUAL
35025: IFTRUE 35035
35027: LD_INT 3
35029: DOUBLE
35030: EQUAL
35031: IFTRUE 35035
35033: GO 35091
35035: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35036: LD_ADDR_VAR 0 9
35040: PUSH
35041: LD_VAR 0 29
35045: PUSH
35046: LD_VAR 0 30
35050: PUSH
35051: LD_VAR 0 31
35055: PUSH
35056: LD_VAR 0 32
35060: PUSH
35061: LD_VAR 0 33
35065: PUSH
35066: LD_VAR 0 34
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: PUSH
35079: LD_VAR 0 4
35083: PUSH
35084: LD_INT 1
35086: PLUS
35087: ARRAY
35088: ST_TO_ADDR
35089: GO 35574
35091: LD_INT 16
35093: DOUBLE
35094: EQUAL
35095: IFTRUE 35153
35097: LD_INT 17
35099: DOUBLE
35100: EQUAL
35101: IFTRUE 35153
35103: LD_INT 18
35105: DOUBLE
35106: EQUAL
35107: IFTRUE 35153
35109: LD_INT 19
35111: DOUBLE
35112: EQUAL
35113: IFTRUE 35153
35115: LD_INT 22
35117: DOUBLE
35118: EQUAL
35119: IFTRUE 35153
35121: LD_INT 20
35123: DOUBLE
35124: EQUAL
35125: IFTRUE 35153
35127: LD_INT 21
35129: DOUBLE
35130: EQUAL
35131: IFTRUE 35153
35133: LD_INT 23
35135: DOUBLE
35136: EQUAL
35137: IFTRUE 35153
35139: LD_INT 24
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35153
35145: LD_INT 25
35147: DOUBLE
35148: EQUAL
35149: IFTRUE 35153
35151: GO 35209
35153: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35154: LD_ADDR_VAR 0 9
35158: PUSH
35159: LD_VAR 0 35
35163: PUSH
35164: LD_VAR 0 36
35168: PUSH
35169: LD_VAR 0 37
35173: PUSH
35174: LD_VAR 0 38
35178: PUSH
35179: LD_VAR 0 39
35183: PUSH
35184: LD_VAR 0 40
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: PUSH
35197: LD_VAR 0 4
35201: PUSH
35202: LD_INT 1
35204: PLUS
35205: ARRAY
35206: ST_TO_ADDR
35207: GO 35574
35209: LD_INT 6
35211: DOUBLE
35212: EQUAL
35213: IFTRUE 35265
35215: LD_INT 7
35217: DOUBLE
35218: EQUAL
35219: IFTRUE 35265
35221: LD_INT 8
35223: DOUBLE
35224: EQUAL
35225: IFTRUE 35265
35227: LD_INT 13
35229: DOUBLE
35230: EQUAL
35231: IFTRUE 35265
35233: LD_INT 12
35235: DOUBLE
35236: EQUAL
35237: IFTRUE 35265
35239: LD_INT 15
35241: DOUBLE
35242: EQUAL
35243: IFTRUE 35265
35245: LD_INT 11
35247: DOUBLE
35248: EQUAL
35249: IFTRUE 35265
35251: LD_INT 14
35253: DOUBLE
35254: EQUAL
35255: IFTRUE 35265
35257: LD_INT 10
35259: DOUBLE
35260: EQUAL
35261: IFTRUE 35265
35263: GO 35321
35265: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35266: LD_ADDR_VAR 0 9
35270: PUSH
35271: LD_VAR 0 41
35275: PUSH
35276: LD_VAR 0 42
35280: PUSH
35281: LD_VAR 0 43
35285: PUSH
35286: LD_VAR 0 44
35290: PUSH
35291: LD_VAR 0 45
35295: PUSH
35296: LD_VAR 0 46
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: PUSH
35309: LD_VAR 0 4
35313: PUSH
35314: LD_INT 1
35316: PLUS
35317: ARRAY
35318: ST_TO_ADDR
35319: GO 35574
35321: LD_INT 36
35323: DOUBLE
35324: EQUAL
35325: IFTRUE 35329
35327: GO 35385
35329: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35330: LD_ADDR_VAR 0 9
35334: PUSH
35335: LD_VAR 0 47
35339: PUSH
35340: LD_VAR 0 48
35344: PUSH
35345: LD_VAR 0 49
35349: PUSH
35350: LD_VAR 0 50
35354: PUSH
35355: LD_VAR 0 51
35359: PUSH
35360: LD_VAR 0 52
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: PUSH
35373: LD_VAR 0 4
35377: PUSH
35378: LD_INT 1
35380: PLUS
35381: ARRAY
35382: ST_TO_ADDR
35383: GO 35574
35385: LD_INT 4
35387: DOUBLE
35388: EQUAL
35389: IFTRUE 35411
35391: LD_INT 5
35393: DOUBLE
35394: EQUAL
35395: IFTRUE 35411
35397: LD_INT 34
35399: DOUBLE
35400: EQUAL
35401: IFTRUE 35411
35403: LD_INT 37
35405: DOUBLE
35406: EQUAL
35407: IFTRUE 35411
35409: GO 35467
35411: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35412: LD_ADDR_VAR 0 9
35416: PUSH
35417: LD_VAR 0 53
35421: PUSH
35422: LD_VAR 0 54
35426: PUSH
35427: LD_VAR 0 55
35431: PUSH
35432: LD_VAR 0 56
35436: PUSH
35437: LD_VAR 0 57
35441: PUSH
35442: LD_VAR 0 58
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: PUSH
35455: LD_VAR 0 4
35459: PUSH
35460: LD_INT 1
35462: PLUS
35463: ARRAY
35464: ST_TO_ADDR
35465: GO 35574
35467: LD_INT 31
35469: DOUBLE
35470: EQUAL
35471: IFTRUE 35517
35473: LD_INT 32
35475: DOUBLE
35476: EQUAL
35477: IFTRUE 35517
35479: LD_INT 33
35481: DOUBLE
35482: EQUAL
35483: IFTRUE 35517
35485: LD_INT 27
35487: DOUBLE
35488: EQUAL
35489: IFTRUE 35517
35491: LD_INT 26
35493: DOUBLE
35494: EQUAL
35495: IFTRUE 35517
35497: LD_INT 28
35499: DOUBLE
35500: EQUAL
35501: IFTRUE 35517
35503: LD_INT 29
35505: DOUBLE
35506: EQUAL
35507: IFTRUE 35517
35509: LD_INT 30
35511: DOUBLE
35512: EQUAL
35513: IFTRUE 35517
35515: GO 35573
35517: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35518: LD_ADDR_VAR 0 9
35522: PUSH
35523: LD_VAR 0 59
35527: PUSH
35528: LD_VAR 0 60
35532: PUSH
35533: LD_VAR 0 61
35537: PUSH
35538: LD_VAR 0 62
35542: PUSH
35543: LD_VAR 0 63
35547: PUSH
35548: LD_VAR 0 64
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: PUSH
35561: LD_VAR 0 4
35565: PUSH
35566: LD_INT 1
35568: PLUS
35569: ARRAY
35570: ST_TO_ADDR
35571: GO 35574
35573: POP
// temp_list2 = [ ] ;
35574: LD_ADDR_VAR 0 10
35578: PUSH
35579: EMPTY
35580: ST_TO_ADDR
// for i in temp_list do
35581: LD_ADDR_VAR 0 8
35585: PUSH
35586: LD_VAR 0 9
35590: PUSH
35591: FOR_IN
35592: IFFALSE 35644
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35594: LD_ADDR_VAR 0 10
35598: PUSH
35599: LD_VAR 0 10
35603: PUSH
35604: LD_VAR 0 8
35608: PUSH
35609: LD_INT 1
35611: ARRAY
35612: PUSH
35613: LD_VAR 0 2
35617: PLUS
35618: PUSH
35619: LD_VAR 0 8
35623: PUSH
35624: LD_INT 2
35626: ARRAY
35627: PUSH
35628: LD_VAR 0 3
35632: PLUS
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: EMPTY
35639: LIST
35640: ADD
35641: ST_TO_ADDR
35642: GO 35591
35644: POP
35645: POP
// result = temp_list2 ;
35646: LD_ADDR_VAR 0 7
35650: PUSH
35651: LD_VAR 0 10
35655: ST_TO_ADDR
// end ;
35656: LD_VAR 0 7
35660: RET
// export function EnemyInRange ( unit , dist ) ; begin
35661: LD_INT 0
35663: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35664: LD_ADDR_VAR 0 3
35668: PUSH
35669: LD_VAR 0 1
35673: PPUSH
35674: CALL_OW 255
35678: PPUSH
35679: LD_VAR 0 1
35683: PPUSH
35684: CALL_OW 250
35688: PPUSH
35689: LD_VAR 0 1
35693: PPUSH
35694: CALL_OW 251
35698: PPUSH
35699: LD_VAR 0 2
35703: PPUSH
35704: CALL 9034 0 4
35708: PUSH
35709: LD_INT 4
35711: ARRAY
35712: ST_TO_ADDR
// end ;
35713: LD_VAR 0 3
35717: RET
// export function PlayerSeeMe ( unit ) ; begin
35718: LD_INT 0
35720: PPUSH
// result := See ( your_side , unit ) ;
35721: LD_ADDR_VAR 0 2
35725: PUSH
35726: LD_OWVAR 2
35730: PPUSH
35731: LD_VAR 0 1
35735: PPUSH
35736: CALL_OW 292
35740: ST_TO_ADDR
// end ;
35741: LD_VAR 0 2
35745: RET
// export function ReverseDir ( unit ) ; begin
35746: LD_INT 0
35748: PPUSH
// if not unit then
35749: LD_VAR 0 1
35753: NOT
35754: IFFALSE 35758
// exit ;
35756: GO 35781
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35758: LD_ADDR_VAR 0 2
35762: PUSH
35763: LD_VAR 0 1
35767: PPUSH
35768: CALL_OW 254
35772: PUSH
35773: LD_INT 3
35775: PLUS
35776: PUSH
35777: LD_INT 6
35779: MOD
35780: ST_TO_ADDR
// end ;
35781: LD_VAR 0 2
35785: RET
// export function ReverseArray ( array ) ; var i ; begin
35786: LD_INT 0
35788: PPUSH
35789: PPUSH
// if not array then
35790: LD_VAR 0 1
35794: NOT
35795: IFFALSE 35799
// exit ;
35797: GO 35854
// result := [ ] ;
35799: LD_ADDR_VAR 0 2
35803: PUSH
35804: EMPTY
35805: ST_TO_ADDR
// for i := array downto 1 do
35806: LD_ADDR_VAR 0 3
35810: PUSH
35811: DOUBLE
35812: LD_VAR 0 1
35816: INC
35817: ST_TO_ADDR
35818: LD_INT 1
35820: PUSH
35821: FOR_DOWNTO
35822: IFFALSE 35852
// result := Join ( result , array [ i ] ) ;
35824: LD_ADDR_VAR 0 2
35828: PUSH
35829: LD_VAR 0 2
35833: PPUSH
35834: LD_VAR 0 1
35838: PUSH
35839: LD_VAR 0 3
35843: ARRAY
35844: PPUSH
35845: CALL 40519 0 2
35849: ST_TO_ADDR
35850: GO 35821
35852: POP
35853: POP
// end ;
35854: LD_VAR 0 2
35858: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35859: LD_INT 0
35861: PPUSH
35862: PPUSH
35863: PPUSH
35864: PPUSH
35865: PPUSH
35866: PPUSH
// if not unit or not hexes then
35867: LD_VAR 0 1
35871: NOT
35872: PUSH
35873: LD_VAR 0 2
35877: NOT
35878: OR
35879: IFFALSE 35883
// exit ;
35881: GO 36006
// dist := 9999 ;
35883: LD_ADDR_VAR 0 5
35887: PUSH
35888: LD_INT 9999
35890: ST_TO_ADDR
// for i = 1 to hexes do
35891: LD_ADDR_VAR 0 4
35895: PUSH
35896: DOUBLE
35897: LD_INT 1
35899: DEC
35900: ST_TO_ADDR
35901: LD_VAR 0 2
35905: PUSH
35906: FOR_TO
35907: IFFALSE 35994
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35909: LD_ADDR_VAR 0 6
35913: PUSH
35914: LD_VAR 0 1
35918: PPUSH
35919: LD_VAR 0 2
35923: PUSH
35924: LD_VAR 0 4
35928: ARRAY
35929: PUSH
35930: LD_INT 1
35932: ARRAY
35933: PPUSH
35934: LD_VAR 0 2
35938: PUSH
35939: LD_VAR 0 4
35943: ARRAY
35944: PUSH
35945: LD_INT 2
35947: ARRAY
35948: PPUSH
35949: CALL_OW 297
35953: ST_TO_ADDR
// if tdist < dist then
35954: LD_VAR 0 6
35958: PUSH
35959: LD_VAR 0 5
35963: LESS
35964: IFFALSE 35992
// begin hex := hexes [ i ] ;
35966: LD_ADDR_VAR 0 8
35970: PUSH
35971: LD_VAR 0 2
35975: PUSH
35976: LD_VAR 0 4
35980: ARRAY
35981: ST_TO_ADDR
// dist := tdist ;
35982: LD_ADDR_VAR 0 5
35986: PUSH
35987: LD_VAR 0 6
35991: ST_TO_ADDR
// end ; end ;
35992: GO 35906
35994: POP
35995: POP
// result := hex ;
35996: LD_ADDR_VAR 0 3
36000: PUSH
36001: LD_VAR 0 8
36005: ST_TO_ADDR
// end ;
36006: LD_VAR 0 3
36010: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36011: LD_INT 0
36013: PPUSH
36014: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36015: LD_VAR 0 1
36019: NOT
36020: PUSH
36021: LD_VAR 0 1
36025: PUSH
36026: LD_INT 21
36028: PUSH
36029: LD_INT 2
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 23
36038: PUSH
36039: LD_INT 2
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PPUSH
36050: CALL_OW 69
36054: IN
36055: NOT
36056: OR
36057: IFFALSE 36061
// exit ;
36059: GO 36108
// for i = 1 to 3 do
36061: LD_ADDR_VAR 0 3
36065: PUSH
36066: DOUBLE
36067: LD_INT 1
36069: DEC
36070: ST_TO_ADDR
36071: LD_INT 3
36073: PUSH
36074: FOR_TO
36075: IFFALSE 36106
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36077: LD_VAR 0 1
36081: PPUSH
36082: CALL_OW 250
36086: PPUSH
36087: LD_VAR 0 1
36091: PPUSH
36092: CALL_OW 251
36096: PPUSH
36097: LD_INT 1
36099: PPUSH
36100: CALL_OW 453
36104: GO 36074
36106: POP
36107: POP
// end ;
36108: LD_VAR 0 2
36112: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36113: LD_INT 0
36115: PPUSH
36116: PPUSH
36117: PPUSH
36118: PPUSH
36119: PPUSH
36120: PPUSH
// if not unit or not enemy_unit then
36121: LD_VAR 0 1
36125: NOT
36126: PUSH
36127: LD_VAR 0 2
36131: NOT
36132: OR
36133: IFFALSE 36137
// exit ;
36135: GO 36604
// if GetLives ( i ) < 250 then
36137: LD_VAR 0 4
36141: PPUSH
36142: CALL_OW 256
36146: PUSH
36147: LD_INT 250
36149: LESS
36150: IFFALSE 36163
// begin ComAutodestruct ( i ) ;
36152: LD_VAR 0 4
36156: PPUSH
36157: CALL 36011 0 1
// exit ;
36161: GO 36604
// end ; x := GetX ( enemy_unit ) ;
36163: LD_ADDR_VAR 0 7
36167: PUSH
36168: LD_VAR 0 2
36172: PPUSH
36173: CALL_OW 250
36177: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36178: LD_ADDR_VAR 0 8
36182: PUSH
36183: LD_VAR 0 2
36187: PPUSH
36188: CALL_OW 251
36192: ST_TO_ADDR
// if not x or not y then
36193: LD_VAR 0 7
36197: NOT
36198: PUSH
36199: LD_VAR 0 8
36203: NOT
36204: OR
36205: IFFALSE 36209
// exit ;
36207: GO 36604
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36209: LD_ADDR_VAR 0 6
36213: PUSH
36214: LD_VAR 0 7
36218: PPUSH
36219: LD_INT 0
36221: PPUSH
36222: LD_INT 4
36224: PPUSH
36225: CALL_OW 272
36229: PUSH
36230: LD_VAR 0 8
36234: PPUSH
36235: LD_INT 0
36237: PPUSH
36238: LD_INT 4
36240: PPUSH
36241: CALL_OW 273
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_VAR 0 7
36254: PPUSH
36255: LD_INT 1
36257: PPUSH
36258: LD_INT 4
36260: PPUSH
36261: CALL_OW 272
36265: PUSH
36266: LD_VAR 0 8
36270: PPUSH
36271: LD_INT 1
36273: PPUSH
36274: LD_INT 4
36276: PPUSH
36277: CALL_OW 273
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_VAR 0 7
36290: PPUSH
36291: LD_INT 2
36293: PPUSH
36294: LD_INT 4
36296: PPUSH
36297: CALL_OW 272
36301: PUSH
36302: LD_VAR 0 8
36306: PPUSH
36307: LD_INT 2
36309: PPUSH
36310: LD_INT 4
36312: PPUSH
36313: CALL_OW 273
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_VAR 0 7
36326: PPUSH
36327: LD_INT 3
36329: PPUSH
36330: LD_INT 4
36332: PPUSH
36333: CALL_OW 272
36337: PUSH
36338: LD_VAR 0 8
36342: PPUSH
36343: LD_INT 3
36345: PPUSH
36346: LD_INT 4
36348: PPUSH
36349: CALL_OW 273
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_VAR 0 7
36362: PPUSH
36363: LD_INT 4
36365: PPUSH
36366: LD_INT 4
36368: PPUSH
36369: CALL_OW 272
36373: PUSH
36374: LD_VAR 0 8
36378: PPUSH
36379: LD_INT 4
36381: PPUSH
36382: LD_INT 4
36384: PPUSH
36385: CALL_OW 273
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_VAR 0 7
36398: PPUSH
36399: LD_INT 5
36401: PPUSH
36402: LD_INT 4
36404: PPUSH
36405: CALL_OW 272
36409: PUSH
36410: LD_VAR 0 8
36414: PPUSH
36415: LD_INT 5
36417: PPUSH
36418: LD_INT 4
36420: PPUSH
36421: CALL_OW 273
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: ST_TO_ADDR
// for i = tmp downto 1 do
36438: LD_ADDR_VAR 0 4
36442: PUSH
36443: DOUBLE
36444: LD_VAR 0 6
36448: INC
36449: ST_TO_ADDR
36450: LD_INT 1
36452: PUSH
36453: FOR_DOWNTO
36454: IFFALSE 36555
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36456: LD_VAR 0 6
36460: PUSH
36461: LD_VAR 0 4
36465: ARRAY
36466: PUSH
36467: LD_INT 1
36469: ARRAY
36470: PPUSH
36471: LD_VAR 0 6
36475: PUSH
36476: LD_VAR 0 4
36480: ARRAY
36481: PUSH
36482: LD_INT 2
36484: ARRAY
36485: PPUSH
36486: CALL_OW 488
36490: NOT
36491: PUSH
36492: LD_VAR 0 6
36496: PUSH
36497: LD_VAR 0 4
36501: ARRAY
36502: PUSH
36503: LD_INT 1
36505: ARRAY
36506: PPUSH
36507: LD_VAR 0 6
36511: PUSH
36512: LD_VAR 0 4
36516: ARRAY
36517: PUSH
36518: LD_INT 2
36520: ARRAY
36521: PPUSH
36522: CALL_OW 428
36526: PUSH
36527: LD_INT 0
36529: NONEQUAL
36530: OR
36531: IFFALSE 36553
// tmp := Delete ( tmp , i ) ;
36533: LD_ADDR_VAR 0 6
36537: PUSH
36538: LD_VAR 0 6
36542: PPUSH
36543: LD_VAR 0 4
36547: PPUSH
36548: CALL_OW 3
36552: ST_TO_ADDR
36553: GO 36453
36555: POP
36556: POP
// j := GetClosestHex ( unit , tmp ) ;
36557: LD_ADDR_VAR 0 5
36561: PUSH
36562: LD_VAR 0 1
36566: PPUSH
36567: LD_VAR 0 6
36571: PPUSH
36572: CALL 35859 0 2
36576: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36577: LD_VAR 0 1
36581: PPUSH
36582: LD_VAR 0 5
36586: PUSH
36587: LD_INT 1
36589: ARRAY
36590: PPUSH
36591: LD_VAR 0 5
36595: PUSH
36596: LD_INT 2
36598: ARRAY
36599: PPUSH
36600: CALL_OW 111
// end ;
36604: LD_VAR 0 3
36608: RET
// export function PrepareApemanSoldier ( ) ; begin
36609: LD_INT 0
36611: PPUSH
// uc_nation := 0 ;
36612: LD_ADDR_OWVAR 21
36616: PUSH
36617: LD_INT 0
36619: ST_TO_ADDR
// hc_sex := sex_male ;
36620: LD_ADDR_OWVAR 27
36624: PUSH
36625: LD_INT 1
36627: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36628: LD_ADDR_OWVAR 28
36632: PUSH
36633: LD_INT 15
36635: ST_TO_ADDR
// hc_gallery :=  ;
36636: LD_ADDR_OWVAR 33
36640: PUSH
36641: LD_STRING 
36643: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36644: LD_ADDR_OWVAR 31
36648: PUSH
36649: LD_INT 0
36651: PPUSH
36652: LD_INT 3
36654: PPUSH
36655: CALL_OW 12
36659: PUSH
36660: LD_INT 0
36662: PPUSH
36663: LD_INT 3
36665: PPUSH
36666: CALL_OW 12
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: ST_TO_ADDR
// end ;
36683: LD_VAR 0 1
36687: RET
// export function PrepareApemanEngineer ( ) ; begin
36688: LD_INT 0
36690: PPUSH
// uc_nation := 0 ;
36691: LD_ADDR_OWVAR 21
36695: PUSH
36696: LD_INT 0
36698: ST_TO_ADDR
// hc_sex := sex_male ;
36699: LD_ADDR_OWVAR 27
36703: PUSH
36704: LD_INT 1
36706: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36707: LD_ADDR_OWVAR 28
36711: PUSH
36712: LD_INT 16
36714: ST_TO_ADDR
// hc_gallery :=  ;
36715: LD_ADDR_OWVAR 33
36719: PUSH
36720: LD_STRING 
36722: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36723: LD_ADDR_OWVAR 31
36727: PUSH
36728: LD_INT 0
36730: PPUSH
36731: LD_INT 3
36733: PPUSH
36734: CALL_OW 12
36738: PUSH
36739: LD_INT 0
36741: PPUSH
36742: LD_INT 3
36744: PPUSH
36745: CALL_OW 12
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: ST_TO_ADDR
// end ;
36762: LD_VAR 0 1
36766: RET
// export function PrepareApeman ( agressivity ) ; begin
36767: LD_INT 0
36769: PPUSH
// uc_side := 0 ;
36770: LD_ADDR_OWVAR 20
36774: PUSH
36775: LD_INT 0
36777: ST_TO_ADDR
// uc_nation := 0 ;
36778: LD_ADDR_OWVAR 21
36782: PUSH
36783: LD_INT 0
36785: ST_TO_ADDR
// hc_sex := sex_male ;
36786: LD_ADDR_OWVAR 27
36790: PUSH
36791: LD_INT 1
36793: ST_TO_ADDR
// hc_class := class_apeman ;
36794: LD_ADDR_OWVAR 28
36798: PUSH
36799: LD_INT 12
36801: ST_TO_ADDR
// hc_gallery :=  ;
36802: LD_ADDR_OWVAR 33
36806: PUSH
36807: LD_STRING 
36809: ST_TO_ADDR
// if agressivity = 0 then
36810: LD_VAR 0 1
36814: PUSH
36815: LD_INT 0
36817: EQUAL
36818: IFFALSE 36830
// hc_agressivity := 0 else
36820: LD_ADDR_OWVAR 35
36824: PUSH
36825: LD_INT 0
36827: ST_TO_ADDR
36828: GO 36851
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36830: LD_ADDR_OWVAR 35
36834: PUSH
36835: LD_VAR 0 1
36839: NEG
36840: PPUSH
36841: LD_VAR 0 1
36845: PPUSH
36846: CALL_OW 12
36850: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36851: LD_ADDR_OWVAR 31
36855: PUSH
36856: LD_INT 0
36858: PPUSH
36859: LD_INT 3
36861: PPUSH
36862: CALL_OW 12
36866: PUSH
36867: LD_INT 0
36869: PPUSH
36870: LD_INT 3
36872: PPUSH
36873: CALL_OW 12
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: ST_TO_ADDR
// end ;
36890: LD_VAR 0 2
36894: RET
// export function PrepareTiger ( agressivity ) ; begin
36895: LD_INT 0
36897: PPUSH
// uc_side := 0 ;
36898: LD_ADDR_OWVAR 20
36902: PUSH
36903: LD_INT 0
36905: ST_TO_ADDR
// uc_nation := 0 ;
36906: LD_ADDR_OWVAR 21
36910: PUSH
36911: LD_INT 0
36913: ST_TO_ADDR
// hc_class := class_tiger ;
36914: LD_ADDR_OWVAR 28
36918: PUSH
36919: LD_INT 14
36921: ST_TO_ADDR
// hc_gallery :=  ;
36922: LD_ADDR_OWVAR 33
36926: PUSH
36927: LD_STRING 
36929: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36930: LD_ADDR_OWVAR 35
36934: PUSH
36935: LD_VAR 0 1
36939: NEG
36940: PPUSH
36941: LD_VAR 0 1
36945: PPUSH
36946: CALL_OW 12
36950: ST_TO_ADDR
// end ;
36951: LD_VAR 0 2
36955: RET
// export function PrepareEnchidna ( ) ; begin
36956: LD_INT 0
36958: PPUSH
// uc_side := 0 ;
36959: LD_ADDR_OWVAR 20
36963: PUSH
36964: LD_INT 0
36966: ST_TO_ADDR
// uc_nation := 0 ;
36967: LD_ADDR_OWVAR 21
36971: PUSH
36972: LD_INT 0
36974: ST_TO_ADDR
// hc_class := class_baggie ;
36975: LD_ADDR_OWVAR 28
36979: PUSH
36980: LD_INT 13
36982: ST_TO_ADDR
// hc_gallery :=  ;
36983: LD_ADDR_OWVAR 33
36987: PUSH
36988: LD_STRING 
36990: ST_TO_ADDR
// end ;
36991: LD_VAR 0 1
36995: RET
// export function PrepareFrog ( ) ; begin
36996: LD_INT 0
36998: PPUSH
// uc_side := 0 ;
36999: LD_ADDR_OWVAR 20
37003: PUSH
37004: LD_INT 0
37006: ST_TO_ADDR
// uc_nation := 0 ;
37007: LD_ADDR_OWVAR 21
37011: PUSH
37012: LD_INT 0
37014: ST_TO_ADDR
// hc_class := class_frog ;
37015: LD_ADDR_OWVAR 28
37019: PUSH
37020: LD_INT 19
37022: ST_TO_ADDR
// hc_gallery :=  ;
37023: LD_ADDR_OWVAR 33
37027: PUSH
37028: LD_STRING 
37030: ST_TO_ADDR
// end ;
37031: LD_VAR 0 1
37035: RET
// export function PrepareFish ( ) ; begin
37036: LD_INT 0
37038: PPUSH
// uc_side := 0 ;
37039: LD_ADDR_OWVAR 20
37043: PUSH
37044: LD_INT 0
37046: ST_TO_ADDR
// uc_nation := 0 ;
37047: LD_ADDR_OWVAR 21
37051: PUSH
37052: LD_INT 0
37054: ST_TO_ADDR
// hc_class := class_fish ;
37055: LD_ADDR_OWVAR 28
37059: PUSH
37060: LD_INT 20
37062: ST_TO_ADDR
// hc_gallery :=  ;
37063: LD_ADDR_OWVAR 33
37067: PUSH
37068: LD_STRING 
37070: ST_TO_ADDR
// end ;
37071: LD_VAR 0 1
37075: RET
// export function PrepareBird ( ) ; begin
37076: LD_INT 0
37078: PPUSH
// uc_side := 0 ;
37079: LD_ADDR_OWVAR 20
37083: PUSH
37084: LD_INT 0
37086: ST_TO_ADDR
// uc_nation := 0 ;
37087: LD_ADDR_OWVAR 21
37091: PUSH
37092: LD_INT 0
37094: ST_TO_ADDR
// hc_class := class_phororhacos ;
37095: LD_ADDR_OWVAR 28
37099: PUSH
37100: LD_INT 18
37102: ST_TO_ADDR
// hc_gallery :=  ;
37103: LD_ADDR_OWVAR 33
37107: PUSH
37108: LD_STRING 
37110: ST_TO_ADDR
// end ;
37111: LD_VAR 0 1
37115: RET
// export function PrepareHorse ( ) ; begin
37116: LD_INT 0
37118: PPUSH
// uc_side := 0 ;
37119: LD_ADDR_OWVAR 20
37123: PUSH
37124: LD_INT 0
37126: ST_TO_ADDR
// uc_nation := 0 ;
37127: LD_ADDR_OWVAR 21
37131: PUSH
37132: LD_INT 0
37134: ST_TO_ADDR
// hc_class := class_horse ;
37135: LD_ADDR_OWVAR 28
37139: PUSH
37140: LD_INT 21
37142: ST_TO_ADDR
// hc_gallery :=  ;
37143: LD_ADDR_OWVAR 33
37147: PUSH
37148: LD_STRING 
37150: ST_TO_ADDR
// end ;
37151: LD_VAR 0 1
37155: RET
// export function PrepareMastodont ( ) ; begin
37156: LD_INT 0
37158: PPUSH
// uc_side := 0 ;
37159: LD_ADDR_OWVAR 20
37163: PUSH
37164: LD_INT 0
37166: ST_TO_ADDR
// uc_nation := 0 ;
37167: LD_ADDR_OWVAR 21
37171: PUSH
37172: LD_INT 0
37174: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37175: LD_ADDR_OWVAR 37
37179: PUSH
37180: LD_INT 31
37182: ST_TO_ADDR
// vc_control := control_rider ;
37183: LD_ADDR_OWVAR 38
37187: PUSH
37188: LD_INT 4
37190: ST_TO_ADDR
// end ;
37191: LD_VAR 0 1
37195: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37196: LD_INT 0
37198: PPUSH
37199: PPUSH
37200: PPUSH
// uc_side = 0 ;
37201: LD_ADDR_OWVAR 20
37205: PUSH
37206: LD_INT 0
37208: ST_TO_ADDR
// uc_nation = 0 ;
37209: LD_ADDR_OWVAR 21
37213: PUSH
37214: LD_INT 0
37216: ST_TO_ADDR
// InitHc_All ( ) ;
37217: CALL_OW 584
// InitVc ;
37221: CALL_OW 20
// if mastodonts then
37225: LD_VAR 0 6
37229: IFFALSE 37296
// for i = 1 to mastodonts do
37231: LD_ADDR_VAR 0 11
37235: PUSH
37236: DOUBLE
37237: LD_INT 1
37239: DEC
37240: ST_TO_ADDR
37241: LD_VAR 0 6
37245: PUSH
37246: FOR_TO
37247: IFFALSE 37294
// begin vc_chassis := 31 ;
37249: LD_ADDR_OWVAR 37
37253: PUSH
37254: LD_INT 31
37256: ST_TO_ADDR
// vc_control := control_rider ;
37257: LD_ADDR_OWVAR 38
37261: PUSH
37262: LD_INT 4
37264: ST_TO_ADDR
// animal := CreateVehicle ;
37265: LD_ADDR_VAR 0 12
37269: PUSH
37270: CALL_OW 45
37274: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37275: LD_VAR 0 12
37279: PPUSH
37280: LD_VAR 0 8
37284: PPUSH
37285: LD_INT 0
37287: PPUSH
37288: CALL 39424 0 3
// end ;
37292: GO 37246
37294: POP
37295: POP
// if horses then
37296: LD_VAR 0 5
37300: IFFALSE 37367
// for i = 1 to horses do
37302: LD_ADDR_VAR 0 11
37306: PUSH
37307: DOUBLE
37308: LD_INT 1
37310: DEC
37311: ST_TO_ADDR
37312: LD_VAR 0 5
37316: PUSH
37317: FOR_TO
37318: IFFALSE 37365
// begin hc_class := 21 ;
37320: LD_ADDR_OWVAR 28
37324: PUSH
37325: LD_INT 21
37327: ST_TO_ADDR
// hc_gallery :=  ;
37328: LD_ADDR_OWVAR 33
37332: PUSH
37333: LD_STRING 
37335: ST_TO_ADDR
// animal := CreateHuman ;
37336: LD_ADDR_VAR 0 12
37340: PUSH
37341: CALL_OW 44
37345: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37346: LD_VAR 0 12
37350: PPUSH
37351: LD_VAR 0 8
37355: PPUSH
37356: LD_INT 0
37358: PPUSH
37359: CALL 39424 0 3
// end ;
37363: GO 37317
37365: POP
37366: POP
// if birds then
37367: LD_VAR 0 1
37371: IFFALSE 37438
// for i = 1 to birds do
37373: LD_ADDR_VAR 0 11
37377: PUSH
37378: DOUBLE
37379: LD_INT 1
37381: DEC
37382: ST_TO_ADDR
37383: LD_VAR 0 1
37387: PUSH
37388: FOR_TO
37389: IFFALSE 37436
// begin hc_class := 18 ;
37391: LD_ADDR_OWVAR 28
37395: PUSH
37396: LD_INT 18
37398: ST_TO_ADDR
// hc_gallery =  ;
37399: LD_ADDR_OWVAR 33
37403: PUSH
37404: LD_STRING 
37406: ST_TO_ADDR
// animal := CreateHuman ;
37407: LD_ADDR_VAR 0 12
37411: PUSH
37412: CALL_OW 44
37416: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37417: LD_VAR 0 12
37421: PPUSH
37422: LD_VAR 0 8
37426: PPUSH
37427: LD_INT 0
37429: PPUSH
37430: CALL 39424 0 3
// end ;
37434: GO 37388
37436: POP
37437: POP
// if tigers then
37438: LD_VAR 0 2
37442: IFFALSE 37526
// for i = 1 to tigers do
37444: LD_ADDR_VAR 0 11
37448: PUSH
37449: DOUBLE
37450: LD_INT 1
37452: DEC
37453: ST_TO_ADDR
37454: LD_VAR 0 2
37458: PUSH
37459: FOR_TO
37460: IFFALSE 37524
// begin hc_class = class_tiger ;
37462: LD_ADDR_OWVAR 28
37466: PUSH
37467: LD_INT 14
37469: ST_TO_ADDR
// hc_gallery =  ;
37470: LD_ADDR_OWVAR 33
37474: PUSH
37475: LD_STRING 
37477: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37478: LD_ADDR_OWVAR 35
37482: PUSH
37483: LD_INT 7
37485: NEG
37486: PPUSH
37487: LD_INT 7
37489: PPUSH
37490: CALL_OW 12
37494: ST_TO_ADDR
// animal := CreateHuman ;
37495: LD_ADDR_VAR 0 12
37499: PUSH
37500: CALL_OW 44
37504: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37505: LD_VAR 0 12
37509: PPUSH
37510: LD_VAR 0 8
37514: PPUSH
37515: LD_INT 0
37517: PPUSH
37518: CALL 39424 0 3
// end ;
37522: GO 37459
37524: POP
37525: POP
// if apemans then
37526: LD_VAR 0 3
37530: IFFALSE 37653
// for i = 1 to apemans do
37532: LD_ADDR_VAR 0 11
37536: PUSH
37537: DOUBLE
37538: LD_INT 1
37540: DEC
37541: ST_TO_ADDR
37542: LD_VAR 0 3
37546: PUSH
37547: FOR_TO
37548: IFFALSE 37651
// begin hc_class = class_apeman ;
37550: LD_ADDR_OWVAR 28
37554: PUSH
37555: LD_INT 12
37557: ST_TO_ADDR
// hc_gallery =  ;
37558: LD_ADDR_OWVAR 33
37562: PUSH
37563: LD_STRING 
37565: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37566: LD_ADDR_OWVAR 35
37570: PUSH
37571: LD_INT 2
37573: NEG
37574: PPUSH
37575: LD_INT 2
37577: PPUSH
37578: CALL_OW 12
37582: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37583: LD_ADDR_OWVAR 31
37587: PUSH
37588: LD_INT 1
37590: PPUSH
37591: LD_INT 3
37593: PPUSH
37594: CALL_OW 12
37598: PUSH
37599: LD_INT 1
37601: PPUSH
37602: LD_INT 3
37604: PPUSH
37605: CALL_OW 12
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: LD_INT 0
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: ST_TO_ADDR
// animal := CreateHuman ;
37622: LD_ADDR_VAR 0 12
37626: PUSH
37627: CALL_OW 44
37631: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37632: LD_VAR 0 12
37636: PPUSH
37637: LD_VAR 0 8
37641: PPUSH
37642: LD_INT 0
37644: PPUSH
37645: CALL 39424 0 3
// end ;
37649: GO 37547
37651: POP
37652: POP
// if enchidnas then
37653: LD_VAR 0 4
37657: IFFALSE 37724
// for i = 1 to enchidnas do
37659: LD_ADDR_VAR 0 11
37663: PUSH
37664: DOUBLE
37665: LD_INT 1
37667: DEC
37668: ST_TO_ADDR
37669: LD_VAR 0 4
37673: PUSH
37674: FOR_TO
37675: IFFALSE 37722
// begin hc_class = 13 ;
37677: LD_ADDR_OWVAR 28
37681: PUSH
37682: LD_INT 13
37684: ST_TO_ADDR
// hc_gallery =  ;
37685: LD_ADDR_OWVAR 33
37689: PUSH
37690: LD_STRING 
37692: ST_TO_ADDR
// animal := CreateHuman ;
37693: LD_ADDR_VAR 0 12
37697: PUSH
37698: CALL_OW 44
37702: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37703: LD_VAR 0 12
37707: PPUSH
37708: LD_VAR 0 8
37712: PPUSH
37713: LD_INT 0
37715: PPUSH
37716: CALL 39424 0 3
// end ;
37720: GO 37674
37722: POP
37723: POP
// if fishes then
37724: LD_VAR 0 7
37728: IFFALSE 37795
// for i = 1 to fishes do
37730: LD_ADDR_VAR 0 11
37734: PUSH
37735: DOUBLE
37736: LD_INT 1
37738: DEC
37739: ST_TO_ADDR
37740: LD_VAR 0 7
37744: PUSH
37745: FOR_TO
37746: IFFALSE 37793
// begin hc_class = 20 ;
37748: LD_ADDR_OWVAR 28
37752: PUSH
37753: LD_INT 20
37755: ST_TO_ADDR
// hc_gallery =  ;
37756: LD_ADDR_OWVAR 33
37760: PUSH
37761: LD_STRING 
37763: ST_TO_ADDR
// animal := CreateHuman ;
37764: LD_ADDR_VAR 0 12
37768: PUSH
37769: CALL_OW 44
37773: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37774: LD_VAR 0 12
37778: PPUSH
37779: LD_VAR 0 9
37783: PPUSH
37784: LD_INT 0
37786: PPUSH
37787: CALL 39424 0 3
// end ;
37791: GO 37745
37793: POP
37794: POP
// end ;
37795: LD_VAR 0 10
37799: RET
// export function WantHeal ( sci , unit ) ; begin
37800: LD_INT 0
37802: PPUSH
// if GetTaskList ( sci ) > 0 then
37803: LD_VAR 0 1
37807: PPUSH
37808: CALL_OW 437
37812: PUSH
37813: LD_INT 0
37815: GREATER
37816: IFFALSE 37886
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37818: LD_VAR 0 1
37822: PPUSH
37823: CALL_OW 437
37827: PUSH
37828: LD_INT 1
37830: ARRAY
37831: PUSH
37832: LD_INT 1
37834: ARRAY
37835: PUSH
37836: LD_STRING l
37838: EQUAL
37839: PUSH
37840: LD_VAR 0 1
37844: PPUSH
37845: CALL_OW 437
37849: PUSH
37850: LD_INT 1
37852: ARRAY
37853: PUSH
37854: LD_INT 4
37856: ARRAY
37857: PUSH
37858: LD_VAR 0 2
37862: EQUAL
37863: AND
37864: IFFALSE 37876
// result := true else
37866: LD_ADDR_VAR 0 3
37870: PUSH
37871: LD_INT 1
37873: ST_TO_ADDR
37874: GO 37884
// result := false ;
37876: LD_ADDR_VAR 0 3
37880: PUSH
37881: LD_INT 0
37883: ST_TO_ADDR
// end else
37884: GO 37894
// result := false ;
37886: LD_ADDR_VAR 0 3
37890: PUSH
37891: LD_INT 0
37893: ST_TO_ADDR
// end ;
37894: LD_VAR 0 3
37898: RET
// export function HealTarget ( sci ) ; begin
37899: LD_INT 0
37901: PPUSH
// if not sci then
37902: LD_VAR 0 1
37906: NOT
37907: IFFALSE 37911
// exit ;
37909: GO 37976
// result := 0 ;
37911: LD_ADDR_VAR 0 2
37915: PUSH
37916: LD_INT 0
37918: ST_TO_ADDR
// if GetTaskList ( sci ) then
37919: LD_VAR 0 1
37923: PPUSH
37924: CALL_OW 437
37928: IFFALSE 37976
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37930: LD_VAR 0 1
37934: PPUSH
37935: CALL_OW 437
37939: PUSH
37940: LD_INT 1
37942: ARRAY
37943: PUSH
37944: LD_INT 1
37946: ARRAY
37947: PUSH
37948: LD_STRING l
37950: EQUAL
37951: IFFALSE 37976
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37953: LD_ADDR_VAR 0 2
37957: PUSH
37958: LD_VAR 0 1
37962: PPUSH
37963: CALL_OW 437
37967: PUSH
37968: LD_INT 1
37970: ARRAY
37971: PUSH
37972: LD_INT 4
37974: ARRAY
37975: ST_TO_ADDR
// end ;
37976: LD_VAR 0 2
37980: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37981: LD_INT 0
37983: PPUSH
37984: PPUSH
37985: PPUSH
37986: PPUSH
// if not base_units then
37987: LD_VAR 0 1
37991: NOT
37992: IFFALSE 37996
// exit ;
37994: GO 38083
// result := false ;
37996: LD_ADDR_VAR 0 2
38000: PUSH
38001: LD_INT 0
38003: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38004: LD_ADDR_VAR 0 5
38008: PUSH
38009: LD_VAR 0 1
38013: PPUSH
38014: LD_INT 21
38016: PUSH
38017: LD_INT 3
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PPUSH
38024: CALL_OW 72
38028: ST_TO_ADDR
// if not tmp then
38029: LD_VAR 0 5
38033: NOT
38034: IFFALSE 38038
// exit ;
38036: GO 38083
// for i in tmp do
38038: LD_ADDR_VAR 0 3
38042: PUSH
38043: LD_VAR 0 5
38047: PUSH
38048: FOR_IN
38049: IFFALSE 38081
// begin result := EnemyInRange ( i , 22 ) ;
38051: LD_ADDR_VAR 0 2
38055: PUSH
38056: LD_VAR 0 3
38060: PPUSH
38061: LD_INT 22
38063: PPUSH
38064: CALL 35661 0 2
38068: ST_TO_ADDR
// if result then
38069: LD_VAR 0 2
38073: IFFALSE 38079
// exit ;
38075: POP
38076: POP
38077: GO 38083
// end ;
38079: GO 38048
38081: POP
38082: POP
// end ;
38083: LD_VAR 0 2
38087: RET
// export function FilterByTag ( units , tag ) ; begin
38088: LD_INT 0
38090: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38091: LD_ADDR_VAR 0 3
38095: PUSH
38096: LD_VAR 0 1
38100: PPUSH
38101: LD_INT 120
38103: PUSH
38104: LD_VAR 0 2
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PPUSH
38113: CALL_OW 72
38117: ST_TO_ADDR
// end ;
38118: LD_VAR 0 3
38122: RET
// export function IsDriver ( un ) ; begin
38123: LD_INT 0
38125: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38126: LD_ADDR_VAR 0 2
38130: PUSH
38131: LD_VAR 0 1
38135: PUSH
38136: LD_INT 55
38138: PUSH
38139: EMPTY
38140: LIST
38141: PPUSH
38142: CALL_OW 69
38146: IN
38147: ST_TO_ADDR
// end ;
38148: LD_VAR 0 2
38152: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38153: LD_INT 0
38155: PPUSH
38156: PPUSH
// list := [ ] ;
38157: LD_ADDR_VAR 0 5
38161: PUSH
38162: EMPTY
38163: ST_TO_ADDR
// case d of 0 :
38164: LD_VAR 0 3
38168: PUSH
38169: LD_INT 0
38171: DOUBLE
38172: EQUAL
38173: IFTRUE 38177
38175: GO 38310
38177: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38178: LD_ADDR_VAR 0 5
38182: PUSH
38183: LD_VAR 0 1
38187: PUSH
38188: LD_INT 4
38190: MINUS
38191: PUSH
38192: LD_VAR 0 2
38196: PUSH
38197: LD_INT 4
38199: MINUS
38200: PUSH
38201: LD_INT 2
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: LIST
38208: PUSH
38209: LD_VAR 0 1
38213: PUSH
38214: LD_INT 3
38216: MINUS
38217: PUSH
38218: LD_VAR 0 2
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: LIST
38230: PUSH
38231: LD_VAR 0 1
38235: PUSH
38236: LD_INT 4
38238: PLUS
38239: PUSH
38240: LD_VAR 0 2
38244: PUSH
38245: LD_INT 4
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: LIST
38252: PUSH
38253: LD_VAR 0 1
38257: PUSH
38258: LD_INT 3
38260: PLUS
38261: PUSH
38262: LD_VAR 0 2
38266: PUSH
38267: LD_INT 3
38269: PLUS
38270: PUSH
38271: LD_INT 5
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: LIST
38278: PUSH
38279: LD_VAR 0 1
38283: PUSH
38284: LD_VAR 0 2
38288: PUSH
38289: LD_INT 4
38291: PLUS
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: LIST
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: ST_TO_ADDR
// end ; 1 :
38308: GO 39008
38310: LD_INT 1
38312: DOUBLE
38313: EQUAL
38314: IFTRUE 38318
38316: GO 38451
38318: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38319: LD_ADDR_VAR 0 5
38323: PUSH
38324: LD_VAR 0 1
38328: PUSH
38329: LD_VAR 0 2
38333: PUSH
38334: LD_INT 4
38336: MINUS
38337: PUSH
38338: LD_INT 3
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: LIST
38345: PUSH
38346: LD_VAR 0 1
38350: PUSH
38351: LD_INT 3
38353: MINUS
38354: PUSH
38355: LD_VAR 0 2
38359: PUSH
38360: LD_INT 3
38362: MINUS
38363: PUSH
38364: LD_INT 2
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: LIST
38371: PUSH
38372: LD_VAR 0 1
38376: PUSH
38377: LD_INT 4
38379: MINUS
38380: PUSH
38381: LD_VAR 0 2
38385: PUSH
38386: LD_INT 1
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: LIST
38393: PUSH
38394: LD_VAR 0 1
38398: PUSH
38399: LD_VAR 0 2
38403: PUSH
38404: LD_INT 3
38406: PLUS
38407: PUSH
38408: LD_INT 0
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: LIST
38415: PUSH
38416: LD_VAR 0 1
38420: PUSH
38421: LD_INT 4
38423: PLUS
38424: PUSH
38425: LD_VAR 0 2
38429: PUSH
38430: LD_INT 4
38432: PLUS
38433: PUSH
38434: LD_INT 5
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: LIST
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: ST_TO_ADDR
// end ; 2 :
38449: GO 39008
38451: LD_INT 2
38453: DOUBLE
38454: EQUAL
38455: IFTRUE 38459
38457: GO 38588
38459: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38460: LD_ADDR_VAR 0 5
38464: PUSH
38465: LD_VAR 0 1
38469: PUSH
38470: LD_VAR 0 2
38474: PUSH
38475: LD_INT 3
38477: MINUS
38478: PUSH
38479: LD_INT 3
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: LIST
38486: PUSH
38487: LD_VAR 0 1
38491: PUSH
38492: LD_INT 4
38494: PLUS
38495: PUSH
38496: LD_VAR 0 2
38500: PUSH
38501: LD_INT 4
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: LIST
38508: PUSH
38509: LD_VAR 0 1
38513: PUSH
38514: LD_VAR 0 2
38518: PUSH
38519: LD_INT 4
38521: PLUS
38522: PUSH
38523: LD_INT 0
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: LIST
38530: PUSH
38531: LD_VAR 0 1
38535: PUSH
38536: LD_INT 3
38538: MINUS
38539: PUSH
38540: LD_VAR 0 2
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: LIST
38552: PUSH
38553: LD_VAR 0 1
38557: PUSH
38558: LD_INT 4
38560: MINUS
38561: PUSH
38562: LD_VAR 0 2
38566: PUSH
38567: LD_INT 4
38569: MINUS
38570: PUSH
38571: LD_INT 2
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: LIST
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: ST_TO_ADDR
// end ; 3 :
38586: GO 39008
38588: LD_INT 3
38590: DOUBLE
38591: EQUAL
38592: IFTRUE 38596
38594: GO 38729
38596: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38597: LD_ADDR_VAR 0 5
38601: PUSH
38602: LD_VAR 0 1
38606: PUSH
38607: LD_INT 3
38609: PLUS
38610: PUSH
38611: LD_VAR 0 2
38615: PUSH
38616: LD_INT 4
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: LIST
38623: PUSH
38624: LD_VAR 0 1
38628: PUSH
38629: LD_INT 4
38631: PLUS
38632: PUSH
38633: LD_VAR 0 2
38637: PUSH
38638: LD_INT 4
38640: PLUS
38641: PUSH
38642: LD_INT 5
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: PUSH
38650: LD_VAR 0 1
38654: PUSH
38655: LD_INT 4
38657: MINUS
38658: PUSH
38659: LD_VAR 0 2
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: LIST
38671: PUSH
38672: LD_VAR 0 1
38676: PUSH
38677: LD_VAR 0 2
38681: PUSH
38682: LD_INT 4
38684: MINUS
38685: PUSH
38686: LD_INT 3
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: LIST
38693: PUSH
38694: LD_VAR 0 1
38698: PUSH
38699: LD_INT 3
38701: MINUS
38702: PUSH
38703: LD_VAR 0 2
38707: PUSH
38708: LD_INT 3
38710: MINUS
38711: PUSH
38712: LD_INT 2
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: LIST
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: ST_TO_ADDR
// end ; 4 :
38727: GO 39008
38729: LD_INT 4
38731: DOUBLE
38732: EQUAL
38733: IFTRUE 38737
38735: GO 38870
38737: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38738: LD_ADDR_VAR 0 5
38742: PUSH
38743: LD_VAR 0 1
38747: PUSH
38748: LD_VAR 0 2
38752: PUSH
38753: LD_INT 4
38755: PLUS
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: LIST
38764: PUSH
38765: LD_VAR 0 1
38769: PUSH
38770: LD_INT 3
38772: PLUS
38773: PUSH
38774: LD_VAR 0 2
38778: PUSH
38779: LD_INT 3
38781: PLUS
38782: PUSH
38783: LD_INT 5
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: PUSH
38791: LD_VAR 0 1
38795: PUSH
38796: LD_INT 4
38798: PLUS
38799: PUSH
38800: LD_VAR 0 2
38804: PUSH
38805: LD_INT 4
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: LIST
38812: PUSH
38813: LD_VAR 0 1
38817: PUSH
38818: LD_VAR 0 2
38822: PUSH
38823: LD_INT 3
38825: MINUS
38826: PUSH
38827: LD_INT 3
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: LIST
38834: PUSH
38835: LD_VAR 0 1
38839: PUSH
38840: LD_INT 4
38842: MINUS
38843: PUSH
38844: LD_VAR 0 2
38848: PUSH
38849: LD_INT 4
38851: MINUS
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: LIST
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: ST_TO_ADDR
// end ; 5 :
38868: GO 39008
38870: LD_INT 5
38872: DOUBLE
38873: EQUAL
38874: IFTRUE 38878
38876: GO 39007
38878: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38879: LD_ADDR_VAR 0 5
38883: PUSH
38884: LD_VAR 0 1
38888: PUSH
38889: LD_INT 4
38891: MINUS
38892: PUSH
38893: LD_VAR 0 2
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: PUSH
38906: LD_VAR 0 1
38910: PUSH
38911: LD_VAR 0 2
38915: PUSH
38916: LD_INT 4
38918: MINUS
38919: PUSH
38920: LD_INT 3
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: LIST
38927: PUSH
38928: LD_VAR 0 1
38932: PUSH
38933: LD_INT 4
38935: PLUS
38936: PUSH
38937: LD_VAR 0 2
38941: PUSH
38942: LD_INT 4
38944: PLUS
38945: PUSH
38946: LD_INT 5
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: LIST
38953: PUSH
38954: LD_VAR 0 1
38958: PUSH
38959: LD_INT 3
38961: PLUS
38962: PUSH
38963: LD_VAR 0 2
38967: PUSH
38968: LD_INT 4
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: LIST
38975: PUSH
38976: LD_VAR 0 1
38980: PUSH
38981: LD_VAR 0 2
38985: PUSH
38986: LD_INT 3
38988: PLUS
38989: PUSH
38990: LD_INT 0
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: LIST
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: ST_TO_ADDR
// end ; end ;
39005: GO 39008
39007: POP
// result := list ;
39008: LD_ADDR_VAR 0 4
39012: PUSH
39013: LD_VAR 0 5
39017: ST_TO_ADDR
// end ;
39018: LD_VAR 0 4
39022: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39023: LD_INT 0
39025: PPUSH
39026: PPUSH
39027: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39028: LD_VAR 0 1
39032: NOT
39033: PUSH
39034: LD_VAR 0 2
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: LD_INT 2
39044: PUSH
39045: LD_INT 3
39047: PUSH
39048: LD_INT 4
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: IN
39057: NOT
39058: OR
39059: IFFALSE 39063
// exit ;
39061: GO 39146
// tmp := [ ] ;
39063: LD_ADDR_VAR 0 5
39067: PUSH
39068: EMPTY
39069: ST_TO_ADDR
// for i in units do
39070: LD_ADDR_VAR 0 4
39074: PUSH
39075: LD_VAR 0 1
39079: PUSH
39080: FOR_IN
39081: IFFALSE 39115
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39083: LD_ADDR_VAR 0 5
39087: PUSH
39088: LD_VAR 0 5
39092: PPUSH
39093: LD_VAR 0 4
39097: PPUSH
39098: LD_VAR 0 2
39102: PPUSH
39103: CALL_OW 259
39107: PPUSH
39108: CALL 40519 0 2
39112: ST_TO_ADDR
39113: GO 39080
39115: POP
39116: POP
// if not tmp then
39117: LD_VAR 0 5
39121: NOT
39122: IFFALSE 39126
// exit ;
39124: GO 39146
// result := SortListByListDesc ( units , tmp ) ;
39126: LD_ADDR_VAR 0 3
39130: PUSH
39131: LD_VAR 0 1
39135: PPUSH
39136: LD_VAR 0 5
39140: PPUSH
39141: CALL_OW 77
39145: ST_TO_ADDR
// end ;
39146: LD_VAR 0 3
39150: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39151: LD_INT 0
39153: PPUSH
39154: PPUSH
39155: PPUSH
// result := false ;
39156: LD_ADDR_VAR 0 3
39160: PUSH
39161: LD_INT 0
39163: ST_TO_ADDR
// if not building then
39164: LD_VAR 0 2
39168: NOT
39169: IFFALSE 39173
// exit ;
39171: GO 39311
// x := GetX ( building ) ;
39173: LD_ADDR_VAR 0 4
39177: PUSH
39178: LD_VAR 0 2
39182: PPUSH
39183: CALL_OW 250
39187: ST_TO_ADDR
// y := GetY ( building ) ;
39188: LD_ADDR_VAR 0 5
39192: PUSH
39193: LD_VAR 0 2
39197: PPUSH
39198: CALL_OW 251
39202: ST_TO_ADDR
// if not x or not y then
39203: LD_VAR 0 4
39207: NOT
39208: PUSH
39209: LD_VAR 0 5
39213: NOT
39214: OR
39215: IFFALSE 39219
// exit ;
39217: GO 39311
// if GetTaskList ( unit ) then
39219: LD_VAR 0 1
39223: PPUSH
39224: CALL_OW 437
39228: IFFALSE 39311
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39230: LD_STRING e
39232: PUSH
39233: LD_VAR 0 1
39237: PPUSH
39238: CALL_OW 437
39242: PUSH
39243: LD_INT 1
39245: ARRAY
39246: PUSH
39247: LD_INT 1
39249: ARRAY
39250: EQUAL
39251: PUSH
39252: LD_VAR 0 4
39256: PUSH
39257: LD_VAR 0 1
39261: PPUSH
39262: CALL_OW 437
39266: PUSH
39267: LD_INT 1
39269: ARRAY
39270: PUSH
39271: LD_INT 2
39273: ARRAY
39274: EQUAL
39275: AND
39276: PUSH
39277: LD_VAR 0 5
39281: PUSH
39282: LD_VAR 0 1
39286: PPUSH
39287: CALL_OW 437
39291: PUSH
39292: LD_INT 1
39294: ARRAY
39295: PUSH
39296: LD_INT 3
39298: ARRAY
39299: EQUAL
39300: AND
39301: IFFALSE 39311
// result := true end ;
39303: LD_ADDR_VAR 0 3
39307: PUSH
39308: LD_INT 1
39310: ST_TO_ADDR
// end ;
39311: LD_VAR 0 3
39315: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39316: LD_INT 0
39318: PPUSH
// result := false ;
39319: LD_ADDR_VAR 0 4
39323: PUSH
39324: LD_INT 0
39326: ST_TO_ADDR
// if GetTaskList ( unit ) then
39327: LD_VAR 0 1
39331: PPUSH
39332: CALL_OW 437
39336: IFFALSE 39419
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39338: LD_STRING M
39340: PUSH
39341: LD_VAR 0 1
39345: PPUSH
39346: CALL_OW 437
39350: PUSH
39351: LD_INT 1
39353: ARRAY
39354: PUSH
39355: LD_INT 1
39357: ARRAY
39358: EQUAL
39359: PUSH
39360: LD_VAR 0 2
39364: PUSH
39365: LD_VAR 0 1
39369: PPUSH
39370: CALL_OW 437
39374: PUSH
39375: LD_INT 1
39377: ARRAY
39378: PUSH
39379: LD_INT 2
39381: ARRAY
39382: EQUAL
39383: AND
39384: PUSH
39385: LD_VAR 0 3
39389: PUSH
39390: LD_VAR 0 1
39394: PPUSH
39395: CALL_OW 437
39399: PUSH
39400: LD_INT 1
39402: ARRAY
39403: PUSH
39404: LD_INT 3
39406: ARRAY
39407: EQUAL
39408: AND
39409: IFFALSE 39419
// result := true ;
39411: LD_ADDR_VAR 0 4
39415: PUSH
39416: LD_INT 1
39418: ST_TO_ADDR
// end ; end ;
39419: LD_VAR 0 4
39423: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39424: LD_INT 0
39426: PPUSH
39427: PPUSH
39428: PPUSH
39429: PPUSH
// if not unit or not area then
39430: LD_VAR 0 1
39434: NOT
39435: PUSH
39436: LD_VAR 0 2
39440: NOT
39441: OR
39442: IFFALSE 39446
// exit ;
39444: GO 39622
// tmp := AreaToList ( area , i ) ;
39446: LD_ADDR_VAR 0 6
39450: PUSH
39451: LD_VAR 0 2
39455: PPUSH
39456: LD_VAR 0 5
39460: PPUSH
39461: CALL_OW 517
39465: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39466: LD_ADDR_VAR 0 5
39470: PUSH
39471: DOUBLE
39472: LD_INT 1
39474: DEC
39475: ST_TO_ADDR
39476: LD_VAR 0 6
39480: PUSH
39481: LD_INT 1
39483: ARRAY
39484: PUSH
39485: FOR_TO
39486: IFFALSE 39620
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39488: LD_ADDR_VAR 0 7
39492: PUSH
39493: LD_VAR 0 6
39497: PUSH
39498: LD_INT 1
39500: ARRAY
39501: PUSH
39502: LD_VAR 0 5
39506: ARRAY
39507: PUSH
39508: LD_VAR 0 6
39512: PUSH
39513: LD_INT 2
39515: ARRAY
39516: PUSH
39517: LD_VAR 0 5
39521: ARRAY
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39527: LD_INT 92
39529: PUSH
39530: LD_VAR 0 7
39534: PUSH
39535: LD_INT 1
39537: ARRAY
39538: PUSH
39539: LD_VAR 0 7
39543: PUSH
39544: LD_INT 2
39546: ARRAY
39547: PUSH
39548: LD_INT 2
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: PPUSH
39557: CALL_OW 69
39561: PUSH
39562: LD_INT 0
39564: EQUAL
39565: IFFALSE 39618
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39567: LD_VAR 0 1
39571: PPUSH
39572: LD_VAR 0 7
39576: PUSH
39577: LD_INT 1
39579: ARRAY
39580: PPUSH
39581: LD_VAR 0 7
39585: PUSH
39586: LD_INT 2
39588: ARRAY
39589: PPUSH
39590: LD_VAR 0 3
39594: PPUSH
39595: CALL_OW 48
// result := IsPlaced ( unit ) ;
39599: LD_ADDR_VAR 0 4
39603: PUSH
39604: LD_VAR 0 1
39608: PPUSH
39609: CALL_OW 305
39613: ST_TO_ADDR
// exit ;
39614: POP
39615: POP
39616: GO 39622
// end ; end ;
39618: GO 39485
39620: POP
39621: POP
// end ;
39622: LD_VAR 0 4
39626: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39627: LD_INT 0
39629: PPUSH
39630: PPUSH
39631: PPUSH
// if not side or side > 8 then
39632: LD_VAR 0 1
39636: NOT
39637: PUSH
39638: LD_VAR 0 1
39642: PUSH
39643: LD_INT 8
39645: GREATER
39646: OR
39647: IFFALSE 39651
// exit ;
39649: GO 39838
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39651: LD_ADDR_VAR 0 4
39655: PUSH
39656: LD_INT 22
39658: PUSH
39659: LD_VAR 0 1
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 21
39670: PUSH
39671: LD_INT 3
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PPUSH
39682: CALL_OW 69
39686: ST_TO_ADDR
// if not tmp then
39687: LD_VAR 0 4
39691: NOT
39692: IFFALSE 39696
// exit ;
39694: GO 39838
// enable_addtolog := true ;
39696: LD_ADDR_OWVAR 81
39700: PUSH
39701: LD_INT 1
39703: ST_TO_ADDR
// AddToLog ( [ ) ;
39704: LD_STRING [
39706: PPUSH
39707: CALL_OW 561
// for i in tmp do
39711: LD_ADDR_VAR 0 3
39715: PUSH
39716: LD_VAR 0 4
39720: PUSH
39721: FOR_IN
39722: IFFALSE 39829
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39724: LD_STRING [
39726: PUSH
39727: LD_VAR 0 3
39731: PPUSH
39732: CALL_OW 266
39736: STR
39737: PUSH
39738: LD_STRING , 
39740: STR
39741: PUSH
39742: LD_VAR 0 3
39746: PPUSH
39747: CALL_OW 250
39751: STR
39752: PUSH
39753: LD_STRING , 
39755: STR
39756: PUSH
39757: LD_VAR 0 3
39761: PPUSH
39762: CALL_OW 251
39766: STR
39767: PUSH
39768: LD_STRING , 
39770: STR
39771: PUSH
39772: LD_VAR 0 3
39776: PPUSH
39777: CALL_OW 254
39781: STR
39782: PUSH
39783: LD_STRING , 
39785: STR
39786: PUSH
39787: LD_VAR 0 3
39791: PPUSH
39792: LD_INT 1
39794: PPUSH
39795: CALL_OW 268
39799: STR
39800: PUSH
39801: LD_STRING , 
39803: STR
39804: PUSH
39805: LD_VAR 0 3
39809: PPUSH
39810: LD_INT 2
39812: PPUSH
39813: CALL_OW 268
39817: STR
39818: PUSH
39819: LD_STRING ],
39821: STR
39822: PPUSH
39823: CALL_OW 561
// end ;
39827: GO 39721
39829: POP
39830: POP
// AddToLog ( ]; ) ;
39831: LD_STRING ];
39833: PPUSH
39834: CALL_OW 561
// end ;
39838: LD_VAR 0 2
39842: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39843: LD_INT 0
39845: PPUSH
39846: PPUSH
39847: PPUSH
39848: PPUSH
39849: PPUSH
// if not area or not rate or not max then
39850: LD_VAR 0 1
39854: NOT
39855: PUSH
39856: LD_VAR 0 2
39860: NOT
39861: OR
39862: PUSH
39863: LD_VAR 0 4
39867: NOT
39868: OR
39869: IFFALSE 39873
// exit ;
39871: GO 40062
// while 1 do
39873: LD_INT 1
39875: IFFALSE 40062
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39877: LD_ADDR_VAR 0 9
39881: PUSH
39882: LD_VAR 0 1
39886: PPUSH
39887: LD_INT 1
39889: PPUSH
39890: CALL_OW 287
39894: PUSH
39895: LD_INT 10
39897: MUL
39898: ST_TO_ADDR
// r := rate / 10 ;
39899: LD_ADDR_VAR 0 7
39903: PUSH
39904: LD_VAR 0 2
39908: PUSH
39909: LD_INT 10
39911: DIVREAL
39912: ST_TO_ADDR
// time := 1 1$00 ;
39913: LD_ADDR_VAR 0 8
39917: PUSH
39918: LD_INT 2100
39920: ST_TO_ADDR
// if amount < min then
39921: LD_VAR 0 9
39925: PUSH
39926: LD_VAR 0 3
39930: LESS
39931: IFFALSE 39949
// r := r * 2 else
39933: LD_ADDR_VAR 0 7
39937: PUSH
39938: LD_VAR 0 7
39942: PUSH
39943: LD_INT 2
39945: MUL
39946: ST_TO_ADDR
39947: GO 39975
// if amount > max then
39949: LD_VAR 0 9
39953: PUSH
39954: LD_VAR 0 4
39958: GREATER
39959: IFFALSE 39975
// r := r / 2 ;
39961: LD_ADDR_VAR 0 7
39965: PUSH
39966: LD_VAR 0 7
39970: PUSH
39971: LD_INT 2
39973: DIVREAL
39974: ST_TO_ADDR
// time := time / r ;
39975: LD_ADDR_VAR 0 8
39979: PUSH
39980: LD_VAR 0 8
39984: PUSH
39985: LD_VAR 0 7
39989: DIVREAL
39990: ST_TO_ADDR
// if time < 0 then
39991: LD_VAR 0 8
39995: PUSH
39996: LD_INT 0
39998: LESS
39999: IFFALSE 40016
// time := time * - 1 ;
40001: LD_ADDR_VAR 0 8
40005: PUSH
40006: LD_VAR 0 8
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: MUL
40015: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40016: LD_VAR 0 8
40020: PUSH
40021: LD_INT 35
40023: PPUSH
40024: LD_INT 875
40026: PPUSH
40027: CALL_OW 12
40031: PLUS
40032: PPUSH
40033: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40037: LD_INT 1
40039: PPUSH
40040: LD_INT 5
40042: PPUSH
40043: CALL_OW 12
40047: PPUSH
40048: LD_VAR 0 1
40052: PPUSH
40053: LD_INT 1
40055: PPUSH
40056: CALL_OW 55
// end ;
40060: GO 39873
// end ;
40062: LD_VAR 0 5
40066: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40067: LD_INT 0
40069: PPUSH
40070: PPUSH
40071: PPUSH
40072: PPUSH
40073: PPUSH
40074: PPUSH
40075: PPUSH
40076: PPUSH
// if not turrets or not factories then
40077: LD_VAR 0 1
40081: NOT
40082: PUSH
40083: LD_VAR 0 2
40087: NOT
40088: OR
40089: IFFALSE 40093
// exit ;
40091: GO 40400
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40093: LD_ADDR_VAR 0 10
40097: PUSH
40098: LD_INT 5
40100: PUSH
40101: LD_INT 6
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 2
40110: PUSH
40111: LD_INT 4
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 3
40120: PUSH
40121: LD_INT 5
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 24
40135: PUSH
40136: LD_INT 25
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 23
40145: PUSH
40146: LD_INT 27
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 42
40159: PUSH
40160: LD_INT 43
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 44
40169: PUSH
40170: LD_INT 46
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 45
40179: PUSH
40180: LD_INT 47
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: LIST
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: LIST
40196: ST_TO_ADDR
// result := [ ] ;
40197: LD_ADDR_VAR 0 3
40201: PUSH
40202: EMPTY
40203: ST_TO_ADDR
// for i in turrets do
40204: LD_ADDR_VAR 0 4
40208: PUSH
40209: LD_VAR 0 1
40213: PUSH
40214: FOR_IN
40215: IFFALSE 40398
// begin nat := GetNation ( i ) ;
40217: LD_ADDR_VAR 0 7
40221: PUSH
40222: LD_VAR 0 4
40226: PPUSH
40227: CALL_OW 248
40231: ST_TO_ADDR
// weapon := 0 ;
40232: LD_ADDR_VAR 0 8
40236: PUSH
40237: LD_INT 0
40239: ST_TO_ADDR
// if not nat then
40240: LD_VAR 0 7
40244: NOT
40245: IFFALSE 40249
// continue ;
40247: GO 40214
// for j in list [ nat ] do
40249: LD_ADDR_VAR 0 5
40253: PUSH
40254: LD_VAR 0 10
40258: PUSH
40259: LD_VAR 0 7
40263: ARRAY
40264: PUSH
40265: FOR_IN
40266: IFFALSE 40307
// if GetBWeapon ( i ) = j [ 1 ] then
40268: LD_VAR 0 4
40272: PPUSH
40273: CALL_OW 269
40277: PUSH
40278: LD_VAR 0 5
40282: PUSH
40283: LD_INT 1
40285: ARRAY
40286: EQUAL
40287: IFFALSE 40305
// begin weapon := j [ 2 ] ;
40289: LD_ADDR_VAR 0 8
40293: PUSH
40294: LD_VAR 0 5
40298: PUSH
40299: LD_INT 2
40301: ARRAY
40302: ST_TO_ADDR
// break ;
40303: GO 40307
// end ;
40305: GO 40265
40307: POP
40308: POP
// if not weapon then
40309: LD_VAR 0 8
40313: NOT
40314: IFFALSE 40318
// continue ;
40316: GO 40214
// for k in factories do
40318: LD_ADDR_VAR 0 6
40322: PUSH
40323: LD_VAR 0 2
40327: PUSH
40328: FOR_IN
40329: IFFALSE 40394
// begin weapons := AvailableWeaponList ( k ) ;
40331: LD_ADDR_VAR 0 9
40335: PUSH
40336: LD_VAR 0 6
40340: PPUSH
40341: CALL_OW 478
40345: ST_TO_ADDR
// if not weapons then
40346: LD_VAR 0 9
40350: NOT
40351: IFFALSE 40355
// continue ;
40353: GO 40328
// if weapon in weapons then
40355: LD_VAR 0 8
40359: PUSH
40360: LD_VAR 0 9
40364: IN
40365: IFFALSE 40392
// begin result := [ i , weapon ] ;
40367: LD_ADDR_VAR 0 3
40371: PUSH
40372: LD_VAR 0 4
40376: PUSH
40377: LD_VAR 0 8
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: ST_TO_ADDR
// exit ;
40386: POP
40387: POP
40388: POP
40389: POP
40390: GO 40400
// end ; end ;
40392: GO 40328
40394: POP
40395: POP
// end ;
40396: GO 40214
40398: POP
40399: POP
// end ;
40400: LD_VAR 0 3
40404: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40405: LD_INT 0
40407: PPUSH
// if not side or side > 8 then
40408: LD_VAR 0 3
40412: NOT
40413: PUSH
40414: LD_VAR 0 3
40418: PUSH
40419: LD_INT 8
40421: GREATER
40422: OR
40423: IFFALSE 40427
// exit ;
40425: GO 40486
// if not range then
40427: LD_VAR 0 4
40431: NOT
40432: IFFALSE 40443
// range := - 12 ;
40434: LD_ADDR_VAR 0 4
40438: PUSH
40439: LD_INT 12
40441: NEG
40442: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40443: LD_VAR 0 1
40447: PPUSH
40448: LD_VAR 0 2
40452: PPUSH
40453: LD_VAR 0 3
40457: PPUSH
40458: LD_VAR 0 4
40462: PPUSH
40463: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40467: LD_VAR 0 1
40471: PPUSH
40472: LD_VAR 0 2
40476: PPUSH
40477: LD_VAR 0 3
40481: PPUSH
40482: CALL_OW 331
// end ;
40486: LD_VAR 0 5
40490: RET
// export function Video ( mode ) ; begin
40491: LD_INT 0
40493: PPUSH
// ingame_video = mode ;
40494: LD_ADDR_OWVAR 52
40498: PUSH
40499: LD_VAR 0 1
40503: ST_TO_ADDR
// interface_hidden = mode ;
40504: LD_ADDR_OWVAR 54
40508: PUSH
40509: LD_VAR 0 1
40513: ST_TO_ADDR
// end ;
40514: LD_VAR 0 2
40518: RET
// export function Join ( array , element ) ; begin
40519: LD_INT 0
40521: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40522: LD_ADDR_VAR 0 3
40526: PUSH
40527: LD_VAR 0 1
40531: PPUSH
40532: LD_VAR 0 1
40536: PUSH
40537: LD_INT 1
40539: PLUS
40540: PPUSH
40541: LD_VAR 0 2
40545: PPUSH
40546: CALL_OW 1
40550: ST_TO_ADDR
// end ;
40551: LD_VAR 0 3
40555: RET
// export function JoinUnion ( array , element ) ; begin
40556: LD_INT 0
40558: PPUSH
// result := array union element ;
40559: LD_ADDR_VAR 0 3
40563: PUSH
40564: LD_VAR 0 1
40568: PUSH
40569: LD_VAR 0 2
40573: UNION
40574: ST_TO_ADDR
// end ;
40575: LD_VAR 0 3
40579: RET
// export function GetBehemoths ( side ) ; begin
40580: LD_INT 0
40582: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40583: LD_ADDR_VAR 0 2
40587: PUSH
40588: LD_INT 22
40590: PUSH
40591: LD_VAR 0 1
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 31
40602: PUSH
40603: LD_INT 25
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PPUSH
40614: CALL_OW 69
40618: ST_TO_ADDR
// end ;
40619: LD_VAR 0 2
40623: RET
// export function Shuffle ( array ) ; var i , index ; begin
40624: LD_INT 0
40626: PPUSH
40627: PPUSH
40628: PPUSH
// result := [ ] ;
40629: LD_ADDR_VAR 0 2
40633: PUSH
40634: EMPTY
40635: ST_TO_ADDR
// if not array then
40636: LD_VAR 0 1
40640: NOT
40641: IFFALSE 40645
// exit ;
40643: GO 40744
// Randomize ;
40645: CALL_OW 10
// for i = array downto 1 do
40649: LD_ADDR_VAR 0 3
40653: PUSH
40654: DOUBLE
40655: LD_VAR 0 1
40659: INC
40660: ST_TO_ADDR
40661: LD_INT 1
40663: PUSH
40664: FOR_DOWNTO
40665: IFFALSE 40742
// begin index := rand ( 1 , array ) ;
40667: LD_ADDR_VAR 0 4
40671: PUSH
40672: LD_INT 1
40674: PPUSH
40675: LD_VAR 0 1
40679: PPUSH
40680: CALL_OW 12
40684: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40685: LD_ADDR_VAR 0 2
40689: PUSH
40690: LD_VAR 0 2
40694: PPUSH
40695: LD_VAR 0 2
40699: PUSH
40700: LD_INT 1
40702: PLUS
40703: PPUSH
40704: LD_VAR 0 1
40708: PUSH
40709: LD_VAR 0 4
40713: ARRAY
40714: PPUSH
40715: CALL_OW 2
40719: ST_TO_ADDR
// array := Delete ( array , index ) ;
40720: LD_ADDR_VAR 0 1
40724: PUSH
40725: LD_VAR 0 1
40729: PPUSH
40730: LD_VAR 0 4
40734: PPUSH
40735: CALL_OW 3
40739: ST_TO_ADDR
// end ;
40740: GO 40664
40742: POP
40743: POP
// end ;
40744: LD_VAR 0 2
40748: RET
// export function GetBaseMaterials ( base ) ; begin
40749: LD_INT 0
40751: PPUSH
// result := [ 0 , 0 , 0 ] ;
40752: LD_ADDR_VAR 0 2
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: LIST
40770: ST_TO_ADDR
// if not base then
40771: LD_VAR 0 1
40775: NOT
40776: IFFALSE 40780
// exit ;
40778: GO 40829
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40780: LD_ADDR_VAR 0 2
40784: PUSH
40785: LD_VAR 0 1
40789: PPUSH
40790: LD_INT 1
40792: PPUSH
40793: CALL_OW 275
40797: PUSH
40798: LD_VAR 0 1
40802: PPUSH
40803: LD_INT 2
40805: PPUSH
40806: CALL_OW 275
40810: PUSH
40811: LD_VAR 0 1
40815: PPUSH
40816: LD_INT 3
40818: PPUSH
40819: CALL_OW 275
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: LIST
40828: ST_TO_ADDR
// end ;
40829: LD_VAR 0 2
40833: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40834: LD_INT 0
40836: PPUSH
40837: PPUSH
// result := array ;
40838: LD_ADDR_VAR 0 3
40842: PUSH
40843: LD_VAR 0 1
40847: ST_TO_ADDR
// if size >= result then
40848: LD_VAR 0 2
40852: PUSH
40853: LD_VAR 0 3
40857: GREATEREQUAL
40858: IFFALSE 40862
// exit ;
40860: GO 40912
// if size then
40862: LD_VAR 0 2
40866: IFFALSE 40912
// for i := array downto size do
40868: LD_ADDR_VAR 0 4
40872: PUSH
40873: DOUBLE
40874: LD_VAR 0 1
40878: INC
40879: ST_TO_ADDR
40880: LD_VAR 0 2
40884: PUSH
40885: FOR_DOWNTO
40886: IFFALSE 40910
// result := Delete ( result , result ) ;
40888: LD_ADDR_VAR 0 3
40892: PUSH
40893: LD_VAR 0 3
40897: PPUSH
40898: LD_VAR 0 3
40902: PPUSH
40903: CALL_OW 3
40907: ST_TO_ADDR
40908: GO 40885
40910: POP
40911: POP
// end ;
40912: LD_VAR 0 3
40916: RET
// export function ComExit ( unit ) ; var tmp ; begin
40917: LD_INT 0
40919: PPUSH
40920: PPUSH
// if not IsInUnit ( unit ) then
40921: LD_VAR 0 1
40925: PPUSH
40926: CALL_OW 310
40930: NOT
40931: IFFALSE 40935
// exit ;
40933: GO 40995
// tmp := IsInUnit ( unit ) ;
40935: LD_ADDR_VAR 0 3
40939: PUSH
40940: LD_VAR 0 1
40944: PPUSH
40945: CALL_OW 310
40949: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40950: LD_VAR 0 3
40954: PPUSH
40955: CALL_OW 247
40959: PUSH
40960: LD_INT 2
40962: EQUAL
40963: IFFALSE 40976
// ComExitVehicle ( unit ) else
40965: LD_VAR 0 1
40969: PPUSH
40970: CALL_OW 121
40974: GO 40985
// ComExitBuilding ( unit ) ;
40976: LD_VAR 0 1
40980: PPUSH
40981: CALL_OW 122
// result := tmp ;
40985: LD_ADDR_VAR 0 2
40989: PUSH
40990: LD_VAR 0 3
40994: ST_TO_ADDR
// end ;
40995: LD_VAR 0 2
40999: RET
// export function ComExitAll ( units ) ; var i ; begin
41000: LD_INT 0
41002: PPUSH
41003: PPUSH
// if not units then
41004: LD_VAR 0 1
41008: NOT
41009: IFFALSE 41013
// exit ;
41011: GO 41039
// for i in units do
41013: LD_ADDR_VAR 0 3
41017: PUSH
41018: LD_VAR 0 1
41022: PUSH
41023: FOR_IN
41024: IFFALSE 41037
// ComExit ( i ) ;
41026: LD_VAR 0 3
41030: PPUSH
41031: CALL 40917 0 1
41035: GO 41023
41037: POP
41038: POP
// end ;
41039: LD_VAR 0 2
41043: RET
// export function ResetHc ; begin
41044: LD_INT 0
41046: PPUSH
// InitHc ;
41047: CALL_OW 19
// hc_importance := 0 ;
41051: LD_ADDR_OWVAR 32
41055: PUSH
41056: LD_INT 0
41058: ST_TO_ADDR
// end ;
41059: LD_VAR 0 1
41063: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41064: LD_INT 0
41066: PPUSH
41067: PPUSH
41068: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41069: LD_ADDR_VAR 0 6
41073: PUSH
41074: LD_VAR 0 1
41078: PUSH
41079: LD_VAR 0 3
41083: PLUS
41084: PUSH
41085: LD_INT 2
41087: DIV
41088: ST_TO_ADDR
// if _x < 0 then
41089: LD_VAR 0 6
41093: PUSH
41094: LD_INT 0
41096: LESS
41097: IFFALSE 41114
// _x := _x * - 1 ;
41099: LD_ADDR_VAR 0 6
41103: PUSH
41104: LD_VAR 0 6
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: MUL
41113: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41114: LD_ADDR_VAR 0 7
41118: PUSH
41119: LD_VAR 0 2
41123: PUSH
41124: LD_VAR 0 4
41128: PLUS
41129: PUSH
41130: LD_INT 2
41132: DIV
41133: ST_TO_ADDR
// if _y < 0 then
41134: LD_VAR 0 7
41138: PUSH
41139: LD_INT 0
41141: LESS
41142: IFFALSE 41159
// _y := _y * - 1 ;
41144: LD_ADDR_VAR 0 7
41148: PUSH
41149: LD_VAR 0 7
41153: PUSH
41154: LD_INT 1
41156: NEG
41157: MUL
41158: ST_TO_ADDR
// result := [ _x , _y ] ;
41159: LD_ADDR_VAR 0 5
41163: PUSH
41164: LD_VAR 0 6
41168: PUSH
41169: LD_VAR 0 7
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: ST_TO_ADDR
// end ;
41178: LD_VAR 0 5
41182: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41183: LD_INT 0
41185: PPUSH
41186: PPUSH
41187: PPUSH
41188: PPUSH
// task := GetTaskList ( unit ) ;
41189: LD_ADDR_VAR 0 7
41193: PUSH
41194: LD_VAR 0 1
41198: PPUSH
41199: CALL_OW 437
41203: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41204: LD_VAR 0 7
41208: NOT
41209: PUSH
41210: LD_VAR 0 1
41214: PPUSH
41215: LD_VAR 0 2
41219: PPUSH
41220: CALL_OW 308
41224: NOT
41225: AND
41226: IFFALSE 41230
// exit ;
41228: GO 41348
// if IsInArea ( unit , area ) then
41230: LD_VAR 0 1
41234: PPUSH
41235: LD_VAR 0 2
41239: PPUSH
41240: CALL_OW 308
41244: IFFALSE 41262
// begin ComMoveToArea ( unit , goAway ) ;
41246: LD_VAR 0 1
41250: PPUSH
41251: LD_VAR 0 3
41255: PPUSH
41256: CALL_OW 113
// exit ;
41260: GO 41348
// end ; if task [ 1 ] [ 1 ] <> M then
41262: LD_VAR 0 7
41266: PUSH
41267: LD_INT 1
41269: ARRAY
41270: PUSH
41271: LD_INT 1
41273: ARRAY
41274: PUSH
41275: LD_STRING M
41277: NONEQUAL
41278: IFFALSE 41282
// exit ;
41280: GO 41348
// x := task [ 1 ] [ 2 ] ;
41282: LD_ADDR_VAR 0 5
41286: PUSH
41287: LD_VAR 0 7
41291: PUSH
41292: LD_INT 1
41294: ARRAY
41295: PUSH
41296: LD_INT 2
41298: ARRAY
41299: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41300: LD_ADDR_VAR 0 6
41304: PUSH
41305: LD_VAR 0 7
41309: PUSH
41310: LD_INT 1
41312: ARRAY
41313: PUSH
41314: LD_INT 3
41316: ARRAY
41317: ST_TO_ADDR
// if InArea ( x , y , area ) then
41318: LD_VAR 0 5
41322: PPUSH
41323: LD_VAR 0 6
41327: PPUSH
41328: LD_VAR 0 2
41332: PPUSH
41333: CALL_OW 309
41337: IFFALSE 41348
// ComStop ( unit ) ;
41339: LD_VAR 0 1
41343: PPUSH
41344: CALL_OW 141
// end ;
41348: LD_VAR 0 4
41352: RET
// export function Abs ( value ) ; begin
41353: LD_INT 0
41355: PPUSH
// result := value ;
41356: LD_ADDR_VAR 0 2
41360: PUSH
41361: LD_VAR 0 1
41365: ST_TO_ADDR
// if value < 0 then
41366: LD_VAR 0 1
41370: PUSH
41371: LD_INT 0
41373: LESS
41374: IFFALSE 41391
// result := value * - 1 ;
41376: LD_ADDR_VAR 0 2
41380: PUSH
41381: LD_VAR 0 1
41385: PUSH
41386: LD_INT 1
41388: NEG
41389: MUL
41390: ST_TO_ADDR
// end ;
41391: LD_VAR 0 2
41395: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41396: LD_INT 0
41398: PPUSH
41399: PPUSH
41400: PPUSH
41401: PPUSH
41402: PPUSH
41403: PPUSH
41404: PPUSH
41405: PPUSH
// if not unit or not building then
41406: LD_VAR 0 1
41410: NOT
41411: PUSH
41412: LD_VAR 0 2
41416: NOT
41417: OR
41418: IFFALSE 41422
// exit ;
41420: GO 41648
// x := GetX ( building ) ;
41422: LD_ADDR_VAR 0 4
41426: PUSH
41427: LD_VAR 0 2
41431: PPUSH
41432: CALL_OW 250
41436: ST_TO_ADDR
// y := GetY ( building ) ;
41437: LD_ADDR_VAR 0 6
41441: PUSH
41442: LD_VAR 0 2
41446: PPUSH
41447: CALL_OW 251
41451: ST_TO_ADDR
// d := GetDir ( building ) ;
41452: LD_ADDR_VAR 0 8
41456: PUSH
41457: LD_VAR 0 2
41461: PPUSH
41462: CALL_OW 254
41466: ST_TO_ADDR
// r := 4 ;
41467: LD_ADDR_VAR 0 9
41471: PUSH
41472: LD_INT 4
41474: ST_TO_ADDR
// for i := 1 to 5 do
41475: LD_ADDR_VAR 0 10
41479: PUSH
41480: DOUBLE
41481: LD_INT 1
41483: DEC
41484: ST_TO_ADDR
41485: LD_INT 5
41487: PUSH
41488: FOR_TO
41489: IFFALSE 41646
// begin _x := ShiftX ( x , d , r + i ) ;
41491: LD_ADDR_VAR 0 5
41495: PUSH
41496: LD_VAR 0 4
41500: PPUSH
41501: LD_VAR 0 8
41505: PPUSH
41506: LD_VAR 0 9
41510: PUSH
41511: LD_VAR 0 10
41515: PLUS
41516: PPUSH
41517: CALL_OW 272
41521: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41522: LD_ADDR_VAR 0 7
41526: PUSH
41527: LD_VAR 0 6
41531: PPUSH
41532: LD_VAR 0 8
41536: PPUSH
41537: LD_VAR 0 9
41541: PUSH
41542: LD_VAR 0 10
41546: PLUS
41547: PPUSH
41548: CALL_OW 273
41552: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41553: LD_VAR 0 5
41557: PPUSH
41558: LD_VAR 0 7
41562: PPUSH
41563: CALL_OW 488
41567: PUSH
41568: LD_VAR 0 5
41572: PPUSH
41573: LD_VAR 0 7
41577: PPUSH
41578: CALL_OW 428
41582: PPUSH
41583: CALL_OW 247
41587: PUSH
41588: LD_INT 3
41590: PUSH
41591: LD_INT 2
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: IN
41598: NOT
41599: AND
41600: IFFALSE 41644
// begin ComMoveXY ( unit , _x , _y ) ;
41602: LD_VAR 0 1
41606: PPUSH
41607: LD_VAR 0 5
41611: PPUSH
41612: LD_VAR 0 7
41616: PPUSH
41617: CALL_OW 111
// result := [ _x , _y ] ;
41621: LD_ADDR_VAR 0 3
41625: PUSH
41626: LD_VAR 0 5
41630: PUSH
41631: LD_VAR 0 7
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: ST_TO_ADDR
// exit ;
41640: POP
41641: POP
41642: GO 41648
// end ; end ;
41644: GO 41488
41646: POP
41647: POP
// end ;
41648: LD_VAR 0 3
41652: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41653: LD_INT 0
41655: PPUSH
41656: PPUSH
41657: PPUSH
// result := 0 ;
41658: LD_ADDR_VAR 0 3
41662: PUSH
41663: LD_INT 0
41665: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41666: LD_VAR 0 1
41670: PUSH
41671: LD_INT 0
41673: LESS
41674: PUSH
41675: LD_VAR 0 1
41679: PUSH
41680: LD_INT 8
41682: GREATER
41683: OR
41684: PUSH
41685: LD_VAR 0 2
41689: PUSH
41690: LD_INT 0
41692: LESS
41693: OR
41694: PUSH
41695: LD_VAR 0 2
41699: PUSH
41700: LD_INT 8
41702: GREATER
41703: OR
41704: IFFALSE 41708
// exit ;
41706: GO 41783
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41708: LD_ADDR_VAR 0 4
41712: PUSH
41713: LD_INT 22
41715: PUSH
41716: LD_VAR 0 2
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PPUSH
41725: CALL_OW 69
41729: PUSH
41730: FOR_IN
41731: IFFALSE 41781
// begin un := UnitShoot ( i ) ;
41733: LD_ADDR_VAR 0 5
41737: PUSH
41738: LD_VAR 0 4
41742: PPUSH
41743: CALL_OW 504
41747: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41748: LD_VAR 0 5
41752: PPUSH
41753: CALL_OW 255
41757: PUSH
41758: LD_VAR 0 1
41762: EQUAL
41763: IFFALSE 41779
// begin result := un ;
41765: LD_ADDR_VAR 0 3
41769: PUSH
41770: LD_VAR 0 5
41774: ST_TO_ADDR
// exit ;
41775: POP
41776: POP
41777: GO 41783
// end ; end ;
41779: GO 41730
41781: POP
41782: POP
// end ;
41783: LD_VAR 0 3
41787: RET
// export function GetCargoBay ( units ) ; begin
41788: LD_INT 0
41790: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41791: LD_ADDR_VAR 0 2
41795: PUSH
41796: LD_VAR 0 1
41800: PPUSH
41801: LD_INT 2
41803: PUSH
41804: LD_INT 34
41806: PUSH
41807: LD_INT 12
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 34
41816: PUSH
41817: LD_INT 51
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 34
41826: PUSH
41827: LD_INT 32
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 34
41836: PUSH
41837: LD_INT 89
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: PPUSH
41851: CALL_OW 72
41855: ST_TO_ADDR
// end ;
41856: LD_VAR 0 2
41860: RET
// export function Negate ( value ) ; begin
41861: LD_INT 0
41863: PPUSH
// result := not value ;
41864: LD_ADDR_VAR 0 2
41868: PUSH
41869: LD_VAR 0 1
41873: NOT
41874: ST_TO_ADDR
// end ;
41875: LD_VAR 0 2
41879: RET
// export function Inc ( value ) ; begin
41880: LD_INT 0
41882: PPUSH
// result := value + 1 ;
41883: LD_ADDR_VAR 0 2
41887: PUSH
41888: LD_VAR 0 1
41892: PUSH
41893: LD_INT 1
41895: PLUS
41896: ST_TO_ADDR
// end ;
41897: LD_VAR 0 2
41901: RET
// export function Dec ( value ) ; begin
41902: LD_INT 0
41904: PPUSH
// result := value - 1 ;
41905: LD_ADDR_VAR 0 2
41909: PUSH
41910: LD_VAR 0 1
41914: PUSH
41915: LD_INT 1
41917: MINUS
41918: ST_TO_ADDR
// end ;
41919: LD_VAR 0 2
41923: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41924: LD_INT 0
41926: PPUSH
41927: PPUSH
41928: PPUSH
41929: PPUSH
41930: PPUSH
41931: PPUSH
41932: PPUSH
41933: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41934: LD_VAR 0 1
41938: PPUSH
41939: LD_VAR 0 2
41943: PPUSH
41944: CALL_OW 488
41948: NOT
41949: PUSH
41950: LD_VAR 0 3
41954: PPUSH
41955: LD_VAR 0 4
41959: PPUSH
41960: CALL_OW 488
41964: NOT
41965: OR
41966: IFFALSE 41979
// begin result := - 1 ;
41968: LD_ADDR_VAR 0 5
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: ST_TO_ADDR
// exit ;
41977: GO 42214
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41979: LD_ADDR_VAR 0 12
41983: PUSH
41984: LD_VAR 0 1
41988: PPUSH
41989: LD_VAR 0 2
41993: PPUSH
41994: LD_VAR 0 3
41998: PPUSH
41999: LD_VAR 0 4
42003: PPUSH
42004: CALL 41064 0 4
42008: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42009: LD_ADDR_VAR 0 11
42013: PUSH
42014: LD_VAR 0 1
42018: PPUSH
42019: LD_VAR 0 2
42023: PPUSH
42024: LD_VAR 0 12
42028: PUSH
42029: LD_INT 1
42031: ARRAY
42032: PPUSH
42033: LD_VAR 0 12
42037: PUSH
42038: LD_INT 2
42040: ARRAY
42041: PPUSH
42042: CALL_OW 298
42046: ST_TO_ADDR
// distance := 9999 ;
42047: LD_ADDR_VAR 0 10
42051: PUSH
42052: LD_INT 9999
42054: ST_TO_ADDR
// for i := 0 to 5 do
42055: LD_ADDR_VAR 0 6
42059: PUSH
42060: DOUBLE
42061: LD_INT 0
42063: DEC
42064: ST_TO_ADDR
42065: LD_INT 5
42067: PUSH
42068: FOR_TO
42069: IFFALSE 42212
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42071: LD_ADDR_VAR 0 7
42075: PUSH
42076: LD_VAR 0 1
42080: PPUSH
42081: LD_VAR 0 6
42085: PPUSH
42086: LD_VAR 0 11
42090: PPUSH
42091: CALL_OW 272
42095: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42096: LD_ADDR_VAR 0 8
42100: PUSH
42101: LD_VAR 0 2
42105: PPUSH
42106: LD_VAR 0 6
42110: PPUSH
42111: LD_VAR 0 11
42115: PPUSH
42116: CALL_OW 273
42120: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42121: LD_VAR 0 7
42125: PPUSH
42126: LD_VAR 0 8
42130: PPUSH
42131: CALL_OW 488
42135: NOT
42136: IFFALSE 42140
// continue ;
42138: GO 42068
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42140: LD_ADDR_VAR 0 9
42144: PUSH
42145: LD_VAR 0 12
42149: PUSH
42150: LD_INT 1
42152: ARRAY
42153: PPUSH
42154: LD_VAR 0 12
42158: PUSH
42159: LD_INT 2
42161: ARRAY
42162: PPUSH
42163: LD_VAR 0 7
42167: PPUSH
42168: LD_VAR 0 8
42172: PPUSH
42173: CALL_OW 298
42177: ST_TO_ADDR
// if tmp < distance then
42178: LD_VAR 0 9
42182: PUSH
42183: LD_VAR 0 10
42187: LESS
42188: IFFALSE 42210
// begin result := i ;
42190: LD_ADDR_VAR 0 5
42194: PUSH
42195: LD_VAR 0 6
42199: ST_TO_ADDR
// distance := tmp ;
42200: LD_ADDR_VAR 0 10
42204: PUSH
42205: LD_VAR 0 9
42209: ST_TO_ADDR
// end ; end ;
42210: GO 42068
42212: POP
42213: POP
// end ;
42214: LD_VAR 0 5
42218: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42219: LD_INT 0
42221: PPUSH
42222: PPUSH
// if not driver or not IsInUnit ( driver ) then
42223: LD_VAR 0 1
42227: NOT
42228: PUSH
42229: LD_VAR 0 1
42233: PPUSH
42234: CALL_OW 310
42238: NOT
42239: OR
42240: IFFALSE 42244
// exit ;
42242: GO 42334
// vehicle := IsInUnit ( driver ) ;
42244: LD_ADDR_VAR 0 3
42248: PUSH
42249: LD_VAR 0 1
42253: PPUSH
42254: CALL_OW 310
42258: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42259: LD_VAR 0 1
42263: PPUSH
42264: LD_STRING \
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: LD_INT 0
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: PUSH
42294: LD_STRING E
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_VAR 0 3
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PPUSH
42330: CALL_OW 446
// end ;
42334: LD_VAR 0 2
42338: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42339: LD_INT 0
42341: PPUSH
42342: PPUSH
// if not driver or not IsInUnit ( driver ) then
42343: LD_VAR 0 1
42347: NOT
42348: PUSH
42349: LD_VAR 0 1
42353: PPUSH
42354: CALL_OW 310
42358: NOT
42359: OR
42360: IFFALSE 42364
// exit ;
42362: GO 42454
// vehicle := IsInUnit ( driver ) ;
42364: LD_ADDR_VAR 0 3
42368: PUSH
42369: LD_VAR 0 1
42373: PPUSH
42374: CALL_OW 310
42378: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42379: LD_VAR 0 1
42383: PPUSH
42384: LD_STRING \
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: PUSH
42414: LD_STRING E
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: LD_VAR 0 3
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PPUSH
42450: CALL_OW 447
// end ;
42454: LD_VAR 0 2
42458: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42459: LD_INT 0
42461: PPUSH
42462: PPUSH
42463: PPUSH
// tmp := [ ] ;
42464: LD_ADDR_VAR 0 5
42468: PUSH
42469: EMPTY
42470: ST_TO_ADDR
// for i in units do
42471: LD_ADDR_VAR 0 4
42475: PUSH
42476: LD_VAR 0 1
42480: PUSH
42481: FOR_IN
42482: IFFALSE 42520
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42484: LD_ADDR_VAR 0 5
42488: PUSH
42489: LD_VAR 0 5
42493: PPUSH
42494: LD_VAR 0 5
42498: PUSH
42499: LD_INT 1
42501: PLUS
42502: PPUSH
42503: LD_VAR 0 4
42507: PPUSH
42508: CALL_OW 256
42512: PPUSH
42513: CALL_OW 2
42517: ST_TO_ADDR
42518: GO 42481
42520: POP
42521: POP
// if not tmp then
42522: LD_VAR 0 5
42526: NOT
42527: IFFALSE 42531
// exit ;
42529: GO 42579
// if asc then
42531: LD_VAR 0 2
42535: IFFALSE 42559
// result := SortListByListAsc ( units , tmp ) else
42537: LD_ADDR_VAR 0 3
42541: PUSH
42542: LD_VAR 0 1
42546: PPUSH
42547: LD_VAR 0 5
42551: PPUSH
42552: CALL_OW 76
42556: ST_TO_ADDR
42557: GO 42579
// result := SortListByListDesc ( units , tmp ) ;
42559: LD_ADDR_VAR 0 3
42563: PUSH
42564: LD_VAR 0 1
42568: PPUSH
42569: LD_VAR 0 5
42573: PPUSH
42574: CALL_OW 77
42578: ST_TO_ADDR
// end ;
42579: LD_VAR 0 3
42583: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42584: LD_INT 0
42586: PPUSH
42587: PPUSH
// task := GetTaskList ( mech ) ;
42588: LD_ADDR_VAR 0 4
42592: PUSH
42593: LD_VAR 0 1
42597: PPUSH
42598: CALL_OW 437
42602: ST_TO_ADDR
// if not task then
42603: LD_VAR 0 4
42607: NOT
42608: IFFALSE 42612
// exit ;
42610: GO 42654
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42612: LD_ADDR_VAR 0 3
42616: PUSH
42617: LD_VAR 0 4
42621: PUSH
42622: LD_INT 1
42624: ARRAY
42625: PUSH
42626: LD_INT 1
42628: ARRAY
42629: PUSH
42630: LD_STRING r
42632: EQUAL
42633: PUSH
42634: LD_VAR 0 4
42638: PUSH
42639: LD_INT 1
42641: ARRAY
42642: PUSH
42643: LD_INT 4
42645: ARRAY
42646: PUSH
42647: LD_VAR 0 2
42651: EQUAL
42652: AND
42653: ST_TO_ADDR
// end ;
42654: LD_VAR 0 3
42658: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42659: LD_INT 0
42661: PPUSH
// SetDir ( unit , d ) ;
42662: LD_VAR 0 1
42666: PPUSH
42667: LD_VAR 0 4
42671: PPUSH
42672: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42676: LD_VAR 0 1
42680: PPUSH
42681: LD_VAR 0 2
42685: PPUSH
42686: LD_VAR 0 3
42690: PPUSH
42691: LD_VAR 0 5
42695: PPUSH
42696: CALL_OW 48
// end ;
42700: LD_VAR 0 6
42704: RET
// export function ToNaturalNumber ( number ) ; begin
42705: LD_INT 0
42707: PPUSH
// result := number div 1 ;
42708: LD_ADDR_VAR 0 2
42712: PUSH
42713: LD_VAR 0 1
42717: PUSH
42718: LD_INT 1
42720: DIV
42721: ST_TO_ADDR
// if number < 0 then
42722: LD_VAR 0 1
42726: PUSH
42727: LD_INT 0
42729: LESS
42730: IFFALSE 42740
// result := 0 ;
42732: LD_ADDR_VAR 0 2
42736: PUSH
42737: LD_INT 0
42739: ST_TO_ADDR
// end ;
42740: LD_VAR 0 2
42744: RET
// export function SortByClass ( units , class ) ; var un ; begin
42745: LD_INT 0
42747: PPUSH
42748: PPUSH
// if not units or not class then
42749: LD_VAR 0 1
42753: NOT
42754: PUSH
42755: LD_VAR 0 2
42759: NOT
42760: OR
42761: IFFALSE 42765
// exit ;
42763: GO 42860
// result := [ ] ;
42765: LD_ADDR_VAR 0 3
42769: PUSH
42770: EMPTY
42771: ST_TO_ADDR
// for un in units do
42772: LD_ADDR_VAR 0 4
42776: PUSH
42777: LD_VAR 0 1
42781: PUSH
42782: FOR_IN
42783: IFFALSE 42858
// if GetClass ( un ) = class then
42785: LD_VAR 0 4
42789: PPUSH
42790: CALL_OW 257
42794: PUSH
42795: LD_VAR 0 2
42799: EQUAL
42800: IFFALSE 42827
// result := Insert ( result , 1 , un ) else
42802: LD_ADDR_VAR 0 3
42806: PUSH
42807: LD_VAR 0 3
42811: PPUSH
42812: LD_INT 1
42814: PPUSH
42815: LD_VAR 0 4
42819: PPUSH
42820: CALL_OW 2
42824: ST_TO_ADDR
42825: GO 42856
// result := Replace ( result , result + 1 , un ) ;
42827: LD_ADDR_VAR 0 3
42831: PUSH
42832: LD_VAR 0 3
42836: PPUSH
42837: LD_VAR 0 3
42841: PUSH
42842: LD_INT 1
42844: PLUS
42845: PPUSH
42846: LD_VAR 0 4
42850: PPUSH
42851: CALL_OW 1
42855: ST_TO_ADDR
42856: GO 42782
42858: POP
42859: POP
// end ;
42860: LD_VAR 0 3
42864: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42865: LD_INT 0
42867: PPUSH
42868: PPUSH
42869: PPUSH
42870: PPUSH
42871: PPUSH
42872: PPUSH
42873: PPUSH
// result := [ ] ;
42874: LD_ADDR_VAR 0 4
42878: PUSH
42879: EMPTY
42880: ST_TO_ADDR
// if x - r < 0 then
42881: LD_VAR 0 1
42885: PUSH
42886: LD_VAR 0 3
42890: MINUS
42891: PUSH
42892: LD_INT 0
42894: LESS
42895: IFFALSE 42907
// min_x := 0 else
42897: LD_ADDR_VAR 0 8
42901: PUSH
42902: LD_INT 0
42904: ST_TO_ADDR
42905: GO 42923
// min_x := x - r ;
42907: LD_ADDR_VAR 0 8
42911: PUSH
42912: LD_VAR 0 1
42916: PUSH
42917: LD_VAR 0 3
42921: MINUS
42922: ST_TO_ADDR
// if y - r < 0 then
42923: LD_VAR 0 2
42927: PUSH
42928: LD_VAR 0 3
42932: MINUS
42933: PUSH
42934: LD_INT 0
42936: LESS
42937: IFFALSE 42949
// min_y := 0 else
42939: LD_ADDR_VAR 0 7
42943: PUSH
42944: LD_INT 0
42946: ST_TO_ADDR
42947: GO 42965
// min_y := y - r ;
42949: LD_ADDR_VAR 0 7
42953: PUSH
42954: LD_VAR 0 2
42958: PUSH
42959: LD_VAR 0 3
42963: MINUS
42964: ST_TO_ADDR
// max_x := x + r ;
42965: LD_ADDR_VAR 0 9
42969: PUSH
42970: LD_VAR 0 1
42974: PUSH
42975: LD_VAR 0 3
42979: PLUS
42980: ST_TO_ADDR
// max_y := y + r ;
42981: LD_ADDR_VAR 0 10
42985: PUSH
42986: LD_VAR 0 2
42990: PUSH
42991: LD_VAR 0 3
42995: PLUS
42996: ST_TO_ADDR
// for _x = min_x to max_x do
42997: LD_ADDR_VAR 0 5
43001: PUSH
43002: DOUBLE
43003: LD_VAR 0 8
43007: DEC
43008: ST_TO_ADDR
43009: LD_VAR 0 9
43013: PUSH
43014: FOR_TO
43015: IFFALSE 43116
// for _y = min_y to max_y do
43017: LD_ADDR_VAR 0 6
43021: PUSH
43022: DOUBLE
43023: LD_VAR 0 7
43027: DEC
43028: ST_TO_ADDR
43029: LD_VAR 0 10
43033: PUSH
43034: FOR_TO
43035: IFFALSE 43112
// begin if not ValidHex ( _x , _y ) then
43037: LD_VAR 0 5
43041: PPUSH
43042: LD_VAR 0 6
43046: PPUSH
43047: CALL_OW 488
43051: NOT
43052: IFFALSE 43056
// continue ;
43054: GO 43034
// if GetResourceTypeXY ( _x , _y ) then
43056: LD_VAR 0 5
43060: PPUSH
43061: LD_VAR 0 6
43065: PPUSH
43066: CALL_OW 283
43070: IFFALSE 43110
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43072: LD_ADDR_VAR 0 4
43076: PUSH
43077: LD_VAR 0 4
43081: PPUSH
43082: LD_VAR 0 4
43086: PUSH
43087: LD_INT 1
43089: PLUS
43090: PPUSH
43091: LD_VAR 0 5
43095: PUSH
43096: LD_VAR 0 6
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PPUSH
43105: CALL_OW 1
43109: ST_TO_ADDR
// end ;
43110: GO 43034
43112: POP
43113: POP
43114: GO 43014
43116: POP
43117: POP
// end ;
43118: LD_VAR 0 4
43122: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43123: LD_INT 0
43125: PPUSH
43126: PPUSH
43127: PPUSH
43128: PPUSH
43129: PPUSH
43130: PPUSH
43131: PPUSH
43132: PPUSH
// if not units then
43133: LD_VAR 0 1
43137: NOT
43138: IFFALSE 43142
// exit ;
43140: GO 43670
// result := UnitFilter ( units , [ f_ok ] ) ;
43142: LD_ADDR_VAR 0 3
43146: PUSH
43147: LD_VAR 0 1
43151: PPUSH
43152: LD_INT 50
43154: PUSH
43155: EMPTY
43156: LIST
43157: PPUSH
43158: CALL_OW 72
43162: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43163: LD_ADDR_VAR 0 8
43167: PUSH
43168: LD_VAR 0 1
43172: PUSH
43173: LD_INT 1
43175: ARRAY
43176: PPUSH
43177: CALL_OW 255
43181: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43182: LD_ADDR_VAR 0 10
43186: PUSH
43187: LD_INT 29
43189: PUSH
43190: LD_INT 91
43192: PUSH
43193: LD_INT 49
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: LIST
43200: ST_TO_ADDR
// if not result then
43201: LD_VAR 0 3
43205: NOT
43206: IFFALSE 43210
// exit ;
43208: GO 43670
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43210: LD_ADDR_VAR 0 5
43214: PUSH
43215: LD_INT 81
43217: PUSH
43218: LD_VAR 0 8
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PPUSH
43227: CALL_OW 69
43231: ST_TO_ADDR
// for i in result do
43232: LD_ADDR_VAR 0 4
43236: PUSH
43237: LD_VAR 0 3
43241: PUSH
43242: FOR_IN
43243: IFFALSE 43668
// begin tag := GetTag ( i ) + 1 ;
43245: LD_ADDR_VAR 0 9
43249: PUSH
43250: LD_VAR 0 4
43254: PPUSH
43255: CALL_OW 110
43259: PUSH
43260: LD_INT 1
43262: PLUS
43263: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43264: LD_ADDR_VAR 0 7
43268: PUSH
43269: LD_VAR 0 4
43273: PPUSH
43274: CALL_OW 250
43278: PPUSH
43279: LD_VAR 0 4
43283: PPUSH
43284: CALL_OW 251
43288: PPUSH
43289: LD_INT 4
43291: PPUSH
43292: CALL 42865 0 3
43296: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43297: LD_VAR 0 4
43301: PPUSH
43302: CALL_OW 247
43306: PUSH
43307: LD_INT 2
43309: EQUAL
43310: PUSH
43311: LD_VAR 0 7
43315: PUSH
43316: LD_INT 2
43318: GREATER
43319: AND
43320: PUSH
43321: LD_VAR 0 4
43325: PPUSH
43326: CALL_OW 264
43330: PUSH
43331: LD_VAR 0 10
43335: IN
43336: NOT
43337: AND
43338: IFFALSE 43377
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43340: LD_VAR 0 4
43344: PPUSH
43345: LD_VAR 0 7
43349: PUSH
43350: LD_INT 1
43352: ARRAY
43353: PUSH
43354: LD_INT 1
43356: ARRAY
43357: PPUSH
43358: LD_VAR 0 7
43362: PUSH
43363: LD_INT 1
43365: ARRAY
43366: PUSH
43367: LD_INT 2
43369: ARRAY
43370: PPUSH
43371: CALL_OW 116
43375: GO 43666
// if path > tag then
43377: LD_VAR 0 2
43381: PUSH
43382: LD_VAR 0 9
43386: GREATER
43387: IFFALSE 43595
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43389: LD_ADDR_VAR 0 6
43393: PUSH
43394: LD_VAR 0 5
43398: PPUSH
43399: LD_INT 91
43401: PUSH
43402: LD_VAR 0 4
43406: PUSH
43407: LD_INT 8
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: LIST
43414: PPUSH
43415: CALL_OW 72
43419: ST_TO_ADDR
// if nearEnemy then
43420: LD_VAR 0 6
43424: IFFALSE 43493
// begin if GetWeapon ( i ) = ru_time_lapser then
43426: LD_VAR 0 4
43430: PPUSH
43431: CALL_OW 264
43435: PUSH
43436: LD_INT 49
43438: EQUAL
43439: IFFALSE 43467
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43441: LD_VAR 0 4
43445: PPUSH
43446: LD_VAR 0 6
43450: PPUSH
43451: LD_VAR 0 4
43455: PPUSH
43456: CALL_OW 74
43460: PPUSH
43461: CALL_OW 112
43465: GO 43491
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43467: LD_VAR 0 4
43471: PPUSH
43472: LD_VAR 0 6
43476: PPUSH
43477: LD_VAR 0 4
43481: PPUSH
43482: CALL_OW 74
43486: PPUSH
43487: CALL 44741 0 2
// end else
43491: GO 43593
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43493: LD_VAR 0 4
43497: PPUSH
43498: LD_VAR 0 2
43502: PUSH
43503: LD_VAR 0 9
43507: ARRAY
43508: PUSH
43509: LD_INT 1
43511: ARRAY
43512: PPUSH
43513: LD_VAR 0 2
43517: PUSH
43518: LD_VAR 0 9
43522: ARRAY
43523: PUSH
43524: LD_INT 2
43526: ARRAY
43527: PPUSH
43528: CALL_OW 297
43532: PUSH
43533: LD_INT 6
43535: GREATER
43536: IFFALSE 43579
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43538: LD_VAR 0 4
43542: PPUSH
43543: LD_VAR 0 2
43547: PUSH
43548: LD_VAR 0 9
43552: ARRAY
43553: PUSH
43554: LD_INT 1
43556: ARRAY
43557: PPUSH
43558: LD_VAR 0 2
43562: PUSH
43563: LD_VAR 0 9
43567: ARRAY
43568: PUSH
43569: LD_INT 2
43571: ARRAY
43572: PPUSH
43573: CALL_OW 114
43577: GO 43593
// SetTag ( i , tag ) ;
43579: LD_VAR 0 4
43583: PPUSH
43584: LD_VAR 0 9
43588: PPUSH
43589: CALL_OW 109
// end else
43593: GO 43666
// if enemy then
43595: LD_VAR 0 5
43599: IFFALSE 43666
// begin if GetWeapon ( i ) = ru_time_lapser then
43601: LD_VAR 0 4
43605: PPUSH
43606: CALL_OW 264
43610: PUSH
43611: LD_INT 49
43613: EQUAL
43614: IFFALSE 43642
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43616: LD_VAR 0 4
43620: PPUSH
43621: LD_VAR 0 5
43625: PPUSH
43626: LD_VAR 0 4
43630: PPUSH
43631: CALL_OW 74
43635: PPUSH
43636: CALL_OW 112
43640: GO 43666
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43642: LD_VAR 0 4
43646: PPUSH
43647: LD_VAR 0 5
43651: PPUSH
43652: LD_VAR 0 4
43656: PPUSH
43657: CALL_OW 74
43661: PPUSH
43662: CALL 44741 0 2
// end ; end ;
43666: GO 43242
43668: POP
43669: POP
// end ;
43670: LD_VAR 0 3
43674: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43675: LD_INT 0
43677: PPUSH
43678: PPUSH
43679: PPUSH
// if not unit or IsInUnit ( unit ) then
43680: LD_VAR 0 1
43684: NOT
43685: PUSH
43686: LD_VAR 0 1
43690: PPUSH
43691: CALL_OW 310
43695: OR
43696: IFFALSE 43700
// exit ;
43698: GO 43791
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43700: LD_ADDR_VAR 0 4
43704: PUSH
43705: LD_VAR 0 1
43709: PPUSH
43710: CALL_OW 250
43714: PPUSH
43715: LD_VAR 0 2
43719: PPUSH
43720: LD_INT 1
43722: PPUSH
43723: CALL_OW 272
43727: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43728: LD_ADDR_VAR 0 5
43732: PUSH
43733: LD_VAR 0 1
43737: PPUSH
43738: CALL_OW 251
43742: PPUSH
43743: LD_VAR 0 2
43747: PPUSH
43748: LD_INT 1
43750: PPUSH
43751: CALL_OW 273
43755: ST_TO_ADDR
// if ValidHex ( x , y ) then
43756: LD_VAR 0 4
43760: PPUSH
43761: LD_VAR 0 5
43765: PPUSH
43766: CALL_OW 488
43770: IFFALSE 43791
// ComTurnXY ( unit , x , y ) ;
43772: LD_VAR 0 1
43776: PPUSH
43777: LD_VAR 0 4
43781: PPUSH
43782: LD_VAR 0 5
43786: PPUSH
43787: CALL_OW 118
// end ;
43791: LD_VAR 0 3
43795: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43796: LD_INT 0
43798: PPUSH
43799: PPUSH
// result := false ;
43800: LD_ADDR_VAR 0 3
43804: PUSH
43805: LD_INT 0
43807: ST_TO_ADDR
// if not units then
43808: LD_VAR 0 2
43812: NOT
43813: IFFALSE 43817
// exit ;
43815: GO 43862
// for i in units do
43817: LD_ADDR_VAR 0 4
43821: PUSH
43822: LD_VAR 0 2
43826: PUSH
43827: FOR_IN
43828: IFFALSE 43860
// if See ( side , i ) then
43830: LD_VAR 0 1
43834: PPUSH
43835: LD_VAR 0 4
43839: PPUSH
43840: CALL_OW 292
43844: IFFALSE 43858
// begin result := true ;
43846: LD_ADDR_VAR 0 3
43850: PUSH
43851: LD_INT 1
43853: ST_TO_ADDR
// exit ;
43854: POP
43855: POP
43856: GO 43862
// end ;
43858: GO 43827
43860: POP
43861: POP
// end ;
43862: LD_VAR 0 3
43866: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43867: LD_INT 0
43869: PPUSH
43870: PPUSH
43871: PPUSH
43872: PPUSH
// if not unit or not points then
43873: LD_VAR 0 1
43877: NOT
43878: PUSH
43879: LD_VAR 0 2
43883: NOT
43884: OR
43885: IFFALSE 43889
// exit ;
43887: GO 43979
// dist := 99999 ;
43889: LD_ADDR_VAR 0 5
43893: PUSH
43894: LD_INT 99999
43896: ST_TO_ADDR
// for i in points do
43897: LD_ADDR_VAR 0 4
43901: PUSH
43902: LD_VAR 0 2
43906: PUSH
43907: FOR_IN
43908: IFFALSE 43977
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43910: LD_ADDR_VAR 0 6
43914: PUSH
43915: LD_VAR 0 1
43919: PPUSH
43920: LD_VAR 0 4
43924: PUSH
43925: LD_INT 1
43927: ARRAY
43928: PPUSH
43929: LD_VAR 0 4
43933: PUSH
43934: LD_INT 2
43936: ARRAY
43937: PPUSH
43938: CALL_OW 297
43942: ST_TO_ADDR
// if tmpDist < dist then
43943: LD_VAR 0 6
43947: PUSH
43948: LD_VAR 0 5
43952: LESS
43953: IFFALSE 43975
// begin result := i ;
43955: LD_ADDR_VAR 0 3
43959: PUSH
43960: LD_VAR 0 4
43964: ST_TO_ADDR
// dist := tmpDist ;
43965: LD_ADDR_VAR 0 5
43969: PUSH
43970: LD_VAR 0 6
43974: ST_TO_ADDR
// end ; end ;
43975: GO 43907
43977: POP
43978: POP
// end ;
43979: LD_VAR 0 3
43983: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43984: LD_INT 0
43986: PPUSH
// uc_side := side ;
43987: LD_ADDR_OWVAR 20
43991: PUSH
43992: LD_VAR 0 1
43996: ST_TO_ADDR
// uc_nation := 3 ;
43997: LD_ADDR_OWVAR 21
44001: PUSH
44002: LD_INT 3
44004: ST_TO_ADDR
// vc_chassis := 25 ;
44005: LD_ADDR_OWVAR 37
44009: PUSH
44010: LD_INT 25
44012: ST_TO_ADDR
// vc_engine := engine_siberite ;
44013: LD_ADDR_OWVAR 39
44017: PUSH
44018: LD_INT 3
44020: ST_TO_ADDR
// vc_control := control_computer ;
44021: LD_ADDR_OWVAR 38
44025: PUSH
44026: LD_INT 3
44028: ST_TO_ADDR
// vc_weapon := 59 ;
44029: LD_ADDR_OWVAR 40
44033: PUSH
44034: LD_INT 59
44036: ST_TO_ADDR
// result := CreateVehicle ;
44037: LD_ADDR_VAR 0 5
44041: PUSH
44042: CALL_OW 45
44046: ST_TO_ADDR
// SetDir ( result , d ) ;
44047: LD_VAR 0 5
44051: PPUSH
44052: LD_VAR 0 4
44056: PPUSH
44057: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44061: LD_VAR 0 5
44065: PPUSH
44066: LD_VAR 0 2
44070: PPUSH
44071: LD_VAR 0 3
44075: PPUSH
44076: LD_INT 0
44078: PPUSH
44079: CALL_OW 48
// end ;
44083: LD_VAR 0 5
44087: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44088: LD_INT 0
44090: PPUSH
44091: PPUSH
44092: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44093: LD_ADDR_VAR 0 2
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44116: LD_VAR 0 1
44120: NOT
44121: PUSH
44122: LD_VAR 0 1
44126: PPUSH
44127: CALL_OW 264
44131: PUSH
44132: LD_INT 12
44134: PUSH
44135: LD_INT 51
44137: PUSH
44138: LD_INT 32
44140: PUSH
44141: LD_INT 89
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: IN
44150: NOT
44151: OR
44152: IFFALSE 44156
// exit ;
44154: GO 44254
// for i := 1 to 3 do
44156: LD_ADDR_VAR 0 3
44160: PUSH
44161: DOUBLE
44162: LD_INT 1
44164: DEC
44165: ST_TO_ADDR
44166: LD_INT 3
44168: PUSH
44169: FOR_TO
44170: IFFALSE 44252
// begin tmp := GetCargo ( cargo , i ) ;
44172: LD_ADDR_VAR 0 4
44176: PUSH
44177: LD_VAR 0 1
44181: PPUSH
44182: LD_VAR 0 3
44186: PPUSH
44187: CALL_OW 289
44191: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44192: LD_ADDR_VAR 0 2
44196: PUSH
44197: LD_VAR 0 2
44201: PPUSH
44202: LD_VAR 0 3
44206: PPUSH
44207: LD_VAR 0 4
44211: PPUSH
44212: CALL_OW 1
44216: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44217: LD_ADDR_VAR 0 2
44221: PUSH
44222: LD_VAR 0 2
44226: PPUSH
44227: LD_INT 4
44229: PPUSH
44230: LD_VAR 0 2
44234: PUSH
44235: LD_INT 4
44237: ARRAY
44238: PUSH
44239: LD_VAR 0 4
44243: PLUS
44244: PPUSH
44245: CALL_OW 1
44249: ST_TO_ADDR
// end ;
44250: GO 44169
44252: POP
44253: POP
// end ;
44254: LD_VAR 0 2
44258: RET
// export function Length ( array ) ; begin
44259: LD_INT 0
44261: PPUSH
// result := array + 0 ;
44262: LD_ADDR_VAR 0 2
44266: PUSH
44267: LD_VAR 0 1
44271: PUSH
44272: LD_INT 0
44274: PLUS
44275: ST_TO_ADDR
// end ;
44276: LD_VAR 0 2
44280: RET
// export function PrepareArray ( array ) ; begin
44281: LD_INT 0
44283: PPUSH
// result := array diff 0 ;
44284: LD_ADDR_VAR 0 2
44288: PUSH
44289: LD_VAR 0 1
44293: PUSH
44294: LD_INT 0
44296: DIFF
44297: ST_TO_ADDR
// if not result [ 1 ] then
44298: LD_VAR 0 2
44302: PUSH
44303: LD_INT 1
44305: ARRAY
44306: NOT
44307: IFFALSE 44327
// result := Delete ( result , 1 ) ;
44309: LD_ADDR_VAR 0 2
44313: PUSH
44314: LD_VAR 0 2
44318: PPUSH
44319: LD_INT 1
44321: PPUSH
44322: CALL_OW 3
44326: ST_TO_ADDR
// end ;
44327: LD_VAR 0 2
44331: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44332: LD_INT 0
44334: PPUSH
44335: PPUSH
44336: PPUSH
44337: PPUSH
// sibRocketRange := 25 ;
44338: LD_ADDR_VAR 0 6
44342: PUSH
44343: LD_INT 25
44345: ST_TO_ADDR
// result := false ;
44346: LD_ADDR_VAR 0 4
44350: PUSH
44351: LD_INT 0
44353: ST_TO_ADDR
// for i := 0 to 5 do
44354: LD_ADDR_VAR 0 5
44358: PUSH
44359: DOUBLE
44360: LD_INT 0
44362: DEC
44363: ST_TO_ADDR
44364: LD_INT 5
44366: PUSH
44367: FOR_TO
44368: IFFALSE 44435
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44370: LD_VAR 0 1
44374: PPUSH
44375: LD_VAR 0 5
44379: PPUSH
44380: LD_VAR 0 6
44384: PPUSH
44385: CALL_OW 272
44389: PPUSH
44390: LD_VAR 0 2
44394: PPUSH
44395: LD_VAR 0 5
44399: PPUSH
44400: LD_VAR 0 6
44404: PPUSH
44405: CALL_OW 273
44409: PPUSH
44410: LD_VAR 0 3
44414: PPUSH
44415: CALL_OW 309
44419: IFFALSE 44433
// begin result := true ;
44421: LD_ADDR_VAR 0 4
44425: PUSH
44426: LD_INT 1
44428: ST_TO_ADDR
// exit ;
44429: POP
44430: POP
44431: GO 44437
// end ;
44433: GO 44367
44435: POP
44436: POP
// end ;
44437: LD_VAR 0 4
44441: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44442: LD_INT 0
44444: PPUSH
44445: PPUSH
44446: PPUSH
// if btype = b_depot then
44447: LD_VAR 0 2
44451: PUSH
44452: LD_INT 0
44454: EQUAL
44455: IFFALSE 44467
// begin result := true ;
44457: LD_ADDR_VAR 0 3
44461: PUSH
44462: LD_INT 1
44464: ST_TO_ADDR
// exit ;
44465: GO 44583
// end ; pom := GetBase ( depot ) ;
44467: LD_ADDR_VAR 0 4
44471: PUSH
44472: LD_VAR 0 1
44476: PPUSH
44477: CALL_OW 274
44481: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44482: LD_ADDR_VAR 0 5
44486: PUSH
44487: LD_VAR 0 2
44491: PPUSH
44492: LD_VAR 0 1
44496: PPUSH
44497: CALL_OW 248
44501: PPUSH
44502: CALL_OW 450
44506: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44507: LD_ADDR_VAR 0 3
44511: PUSH
44512: LD_VAR 0 4
44516: PPUSH
44517: LD_INT 1
44519: PPUSH
44520: CALL_OW 275
44524: PUSH
44525: LD_VAR 0 5
44529: PUSH
44530: LD_INT 1
44532: ARRAY
44533: GREATEREQUAL
44534: PUSH
44535: LD_VAR 0 4
44539: PPUSH
44540: LD_INT 2
44542: PPUSH
44543: CALL_OW 275
44547: PUSH
44548: LD_VAR 0 5
44552: PUSH
44553: LD_INT 2
44555: ARRAY
44556: GREATEREQUAL
44557: AND
44558: PUSH
44559: LD_VAR 0 4
44563: PPUSH
44564: LD_INT 3
44566: PPUSH
44567: CALL_OW 275
44571: PUSH
44572: LD_VAR 0 5
44576: PUSH
44577: LD_INT 3
44579: ARRAY
44580: GREATEREQUAL
44581: AND
44582: ST_TO_ADDR
// end ;
44583: LD_VAR 0 3
44587: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44588: LD_INT 0
44590: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44591: LD_VAR 0 1
44595: PPUSH
44596: LD_VAR 0 2
44600: PPUSH
44601: LD_INT 0
44603: PPUSH
44604: LD_INT 0
44606: PPUSH
44607: LD_INT 1
44609: PPUSH
44610: LD_INT 0
44612: PPUSH
44613: CALL_OW 587
// end ;
44617: LD_VAR 0 3
44621: RET
// export function CenterOnNow ( unit ) ; begin
44622: LD_INT 0
44624: PPUSH
// result := IsInUnit ( unit ) ;
44625: LD_ADDR_VAR 0 2
44629: PUSH
44630: LD_VAR 0 1
44634: PPUSH
44635: CALL_OW 310
44639: ST_TO_ADDR
// if not result then
44640: LD_VAR 0 2
44644: NOT
44645: IFFALSE 44657
// result := unit ;
44647: LD_ADDR_VAR 0 2
44651: PUSH
44652: LD_VAR 0 1
44656: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44657: LD_VAR 0 1
44661: PPUSH
44662: CALL_OW 87
// end ;
44666: LD_VAR 0 2
44670: RET
// export function ComMoveHex ( unit , hex ) ; begin
44671: LD_INT 0
44673: PPUSH
// if not hex then
44674: LD_VAR 0 2
44678: NOT
44679: IFFALSE 44683
// exit ;
44681: GO 44736
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44683: LD_VAR 0 2
44687: PUSH
44688: LD_INT 1
44690: ARRAY
44691: PPUSH
44692: LD_VAR 0 2
44696: PUSH
44697: LD_INT 2
44699: ARRAY
44700: PPUSH
44701: CALL_OW 428
44705: IFFALSE 44709
// exit ;
44707: GO 44736
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44709: LD_VAR 0 1
44713: PPUSH
44714: LD_VAR 0 2
44718: PUSH
44719: LD_INT 1
44721: ARRAY
44722: PPUSH
44723: LD_VAR 0 2
44727: PUSH
44728: LD_INT 2
44730: ARRAY
44731: PPUSH
44732: CALL_OW 111
// end ;
44736: LD_VAR 0 3
44740: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44741: LD_INT 0
44743: PPUSH
44744: PPUSH
44745: PPUSH
// if not unit or not enemy then
44746: LD_VAR 0 1
44750: NOT
44751: PUSH
44752: LD_VAR 0 2
44756: NOT
44757: OR
44758: IFFALSE 44762
// exit ;
44760: GO 44886
// x := GetX ( enemy ) ;
44762: LD_ADDR_VAR 0 4
44766: PUSH
44767: LD_VAR 0 2
44771: PPUSH
44772: CALL_OW 250
44776: ST_TO_ADDR
// y := GetY ( enemy ) ;
44777: LD_ADDR_VAR 0 5
44781: PUSH
44782: LD_VAR 0 2
44786: PPUSH
44787: CALL_OW 251
44791: ST_TO_ADDR
// if ValidHex ( x , y ) then
44792: LD_VAR 0 4
44796: PPUSH
44797: LD_VAR 0 5
44801: PPUSH
44802: CALL_OW 488
44806: IFFALSE 44886
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44808: LD_VAR 0 2
44812: PPUSH
44813: CALL_OW 247
44817: PUSH
44818: LD_INT 3
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: IN
44828: PUSH
44829: LD_VAR 0 1
44833: PPUSH
44834: CALL_OW 255
44838: PPUSH
44839: LD_VAR 0 2
44843: PPUSH
44844: CALL_OW 292
44848: OR
44849: IFFALSE 44867
// ComAttackUnit ( unit , enemy ) else
44851: LD_VAR 0 1
44855: PPUSH
44856: LD_VAR 0 2
44860: PPUSH
44861: CALL_OW 115
44865: GO 44886
// ComAgressiveMove ( unit , x , y ) ;
44867: LD_VAR 0 1
44871: PPUSH
44872: LD_VAR 0 4
44876: PPUSH
44877: LD_VAR 0 5
44881: PPUSH
44882: CALL_OW 114
// end ;
44886: LD_VAR 0 3
44890: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44891: LD_INT 0
44893: PPUSH
44894: PPUSH
44895: PPUSH
// list := AreaToList ( area , 0 ) ;
44896: LD_ADDR_VAR 0 5
44900: PUSH
44901: LD_VAR 0 1
44905: PPUSH
44906: LD_INT 0
44908: PPUSH
44909: CALL_OW 517
44913: ST_TO_ADDR
// if not list then
44914: LD_VAR 0 5
44918: NOT
44919: IFFALSE 44923
// exit ;
44921: GO 45053
// if all then
44923: LD_VAR 0 2
44927: IFFALSE 45015
// begin for i := 1 to list [ 1 ] do
44929: LD_ADDR_VAR 0 4
44933: PUSH
44934: DOUBLE
44935: LD_INT 1
44937: DEC
44938: ST_TO_ADDR
44939: LD_VAR 0 5
44943: PUSH
44944: LD_INT 1
44946: ARRAY
44947: PUSH
44948: FOR_TO
44949: IFFALSE 45011
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44951: LD_ADDR_VAR 0 3
44955: PUSH
44956: LD_VAR 0 3
44960: PPUSH
44961: LD_VAR 0 3
44965: PUSH
44966: LD_INT 1
44968: PLUS
44969: PPUSH
44970: LD_VAR 0 5
44974: PUSH
44975: LD_INT 1
44977: ARRAY
44978: PUSH
44979: LD_VAR 0 4
44983: ARRAY
44984: PUSH
44985: LD_VAR 0 5
44989: PUSH
44990: LD_INT 2
44992: ARRAY
44993: PUSH
44994: LD_VAR 0 4
44998: ARRAY
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PPUSH
45004: CALL_OW 1
45008: ST_TO_ADDR
45009: GO 44948
45011: POP
45012: POP
// exit ;
45013: GO 45053
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45015: LD_ADDR_VAR 0 3
45019: PUSH
45020: LD_VAR 0 5
45024: PUSH
45025: LD_INT 1
45027: ARRAY
45028: PUSH
45029: LD_INT 1
45031: ARRAY
45032: PUSH
45033: LD_VAR 0 5
45037: PUSH
45038: LD_INT 2
45040: ARRAY
45041: PUSH
45042: LD_INT 1
45044: ARRAY
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: EMPTY
45051: LIST
45052: ST_TO_ADDR
// end ;
45053: LD_VAR 0 3
45057: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45058: LD_INT 0
45060: PPUSH
45061: PPUSH
// list := AreaToList ( area , 0 ) ;
45062: LD_ADDR_VAR 0 4
45066: PUSH
45067: LD_VAR 0 1
45071: PPUSH
45072: LD_INT 0
45074: PPUSH
45075: CALL_OW 517
45079: ST_TO_ADDR
// if not list then
45080: LD_VAR 0 4
45084: NOT
45085: IFFALSE 45089
// exit ;
45087: GO 45130
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45089: LD_ADDR_VAR 0 3
45093: PUSH
45094: LD_VAR 0 4
45098: PUSH
45099: LD_INT 1
45101: ARRAY
45102: PUSH
45103: LD_INT 1
45105: ARRAY
45106: PUSH
45107: LD_VAR 0 4
45111: PUSH
45112: LD_INT 2
45114: ARRAY
45115: PUSH
45116: LD_INT 1
45118: ARRAY
45119: PUSH
45120: LD_VAR 0 2
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: LIST
45129: ST_TO_ADDR
// end ;
45130: LD_VAR 0 3
45134: RET
// export function First ( array ) ; begin
45135: LD_INT 0
45137: PPUSH
// if not array then
45138: LD_VAR 0 1
45142: NOT
45143: IFFALSE 45147
// exit ;
45145: GO 45161
// result := array [ 1 ] ;
45147: LD_ADDR_VAR 0 2
45151: PUSH
45152: LD_VAR 0 1
45156: PUSH
45157: LD_INT 1
45159: ARRAY
45160: ST_TO_ADDR
// end ;
45161: LD_VAR 0 2
45165: RET
// export function Last ( array ) ; begin
45166: LD_INT 0
45168: PPUSH
// if not array then
45169: LD_VAR 0 1
45173: NOT
45174: IFFALSE 45178
// exit ;
45176: GO 45194
// result := array [ array ] ;
45178: LD_ADDR_VAR 0 2
45182: PUSH
45183: LD_VAR 0 1
45187: PUSH
45188: LD_VAR 0 1
45192: ARRAY
45193: ST_TO_ADDR
// end ;
45194: LD_VAR 0 2
45198: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45199: LD_INT 0
45201: PPUSH
45202: PPUSH
// result := [ ] ;
45203: LD_ADDR_VAR 0 5
45207: PUSH
45208: EMPTY
45209: ST_TO_ADDR
// if not array then
45210: LD_VAR 0 1
45214: NOT
45215: IFFALSE 45219
// exit ;
45217: GO 45331
// for i := 1 to array do
45219: LD_ADDR_VAR 0 6
45223: PUSH
45224: DOUBLE
45225: LD_INT 1
45227: DEC
45228: ST_TO_ADDR
45229: LD_VAR 0 1
45233: PUSH
45234: FOR_TO
45235: IFFALSE 45329
// if array [ i ] [ index ] = value then
45237: LD_VAR 0 1
45241: PUSH
45242: LD_VAR 0 6
45246: ARRAY
45247: PUSH
45248: LD_VAR 0 2
45252: ARRAY
45253: PUSH
45254: LD_VAR 0 3
45258: EQUAL
45259: IFFALSE 45327
// begin if indexColumn then
45261: LD_VAR 0 4
45265: IFFALSE 45301
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45267: LD_ADDR_VAR 0 5
45271: PUSH
45272: LD_VAR 0 5
45276: PPUSH
45277: LD_VAR 0 1
45281: PUSH
45282: LD_VAR 0 6
45286: ARRAY
45287: PUSH
45288: LD_VAR 0 4
45292: ARRAY
45293: PPUSH
45294: CALL 40519 0 2
45298: ST_TO_ADDR
45299: GO 45327
// result := Join ( result , array [ i ] ) ;
45301: LD_ADDR_VAR 0 5
45305: PUSH
45306: LD_VAR 0 5
45310: PPUSH
45311: LD_VAR 0 1
45315: PUSH
45316: LD_VAR 0 6
45320: ARRAY
45321: PPUSH
45322: CALL 40519 0 2
45326: ST_TO_ADDR
// end ;
45327: GO 45234
45329: POP
45330: POP
// end ;
45331: LD_VAR 0 5
45335: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45336: LD_INT 0
45338: PPUSH
// if not vehicles or not parkingPoint then
45339: LD_VAR 0 1
45343: NOT
45344: PUSH
45345: LD_VAR 0 2
45349: NOT
45350: OR
45351: IFFALSE 45355
// exit ;
45353: GO 45453
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45355: LD_ADDR_VAR 0 1
45359: PUSH
45360: LD_VAR 0 1
45364: PPUSH
45365: LD_INT 50
45367: PUSH
45368: EMPTY
45369: LIST
45370: PUSH
45371: LD_INT 3
45373: PUSH
45374: LD_INT 92
45376: PUSH
45377: LD_VAR 0 2
45381: PUSH
45382: LD_INT 1
45384: ARRAY
45385: PUSH
45386: LD_VAR 0 2
45390: PUSH
45391: LD_INT 2
45393: ARRAY
45394: PUSH
45395: LD_INT 8
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PPUSH
45412: CALL_OW 72
45416: ST_TO_ADDR
// if not vehicles then
45417: LD_VAR 0 1
45421: NOT
45422: IFFALSE 45426
// exit ;
45424: GO 45453
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45426: LD_VAR 0 1
45430: PPUSH
45431: LD_VAR 0 2
45435: PUSH
45436: LD_INT 1
45438: ARRAY
45439: PPUSH
45440: LD_VAR 0 2
45444: PUSH
45445: LD_INT 2
45447: ARRAY
45448: PPUSH
45449: CALL_OW 111
// end ;
45453: LD_VAR 0 3
45457: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45458: LD_INT 0
45460: PPUSH
45461: PPUSH
45462: PPUSH
// if not side or not area then
45463: LD_VAR 0 1
45467: NOT
45468: PUSH
45469: LD_VAR 0 2
45473: NOT
45474: OR
45475: IFFALSE 45479
// exit ;
45477: GO 45598
// tmp := AreaToList ( area , 0 ) ;
45479: LD_ADDR_VAR 0 5
45483: PUSH
45484: LD_VAR 0 2
45488: PPUSH
45489: LD_INT 0
45491: PPUSH
45492: CALL_OW 517
45496: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45497: LD_ADDR_VAR 0 4
45501: PUSH
45502: DOUBLE
45503: LD_INT 1
45505: DEC
45506: ST_TO_ADDR
45507: LD_VAR 0 5
45511: PUSH
45512: LD_INT 1
45514: ARRAY
45515: PUSH
45516: FOR_TO
45517: IFFALSE 45596
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45519: LD_VAR 0 5
45523: PUSH
45524: LD_INT 1
45526: ARRAY
45527: PUSH
45528: LD_VAR 0 4
45532: ARRAY
45533: PPUSH
45534: LD_VAR 0 5
45538: PUSH
45539: LD_INT 2
45541: ARRAY
45542: PUSH
45543: LD_VAR 0 4
45547: ARRAY
45548: PPUSH
45549: CALL_OW 351
45553: IFFALSE 45594
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45555: LD_VAR 0 5
45559: PUSH
45560: LD_INT 1
45562: ARRAY
45563: PUSH
45564: LD_VAR 0 4
45568: ARRAY
45569: PPUSH
45570: LD_VAR 0 5
45574: PUSH
45575: LD_INT 2
45577: ARRAY
45578: PUSH
45579: LD_VAR 0 4
45583: ARRAY
45584: PPUSH
45585: LD_VAR 0 1
45589: PPUSH
45590: CALL_OW 244
// end ;
45594: GO 45516
45596: POP
45597: POP
// end ; end_of_file
45598: LD_VAR 0 3
45602: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45603: LD_INT 0
45605: PPUSH
45606: PPUSH
// disable ( mpActive ) ;
45607: LD_INT 100
45609: DISABLE_MARKED
// disable ( mpWin ) ;
45610: LD_INT 101
45612: DISABLE_MARKED
// disable ( mpLose ) ;
45613: LD_INT 102
45615: DISABLE_MARKED
// mpGameType := 0 ;
45616: LD_ADDR_EXP 1
45620: PUSH
45621: LD_INT 0
45623: ST_TO_ADDR
// mpGameSettings := [ ] ;
45624: LD_ADDR_EXP 4
45628: PUSH
45629: EMPTY
45630: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45631: LD_ADDR_EXP 2
45635: PUSH
45636: EMPTY
45637: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45638: LD_ADDR_EXP 3
45642: PUSH
45643: EMPTY
45644: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45645: LD_ADDR_EXP 27
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45660: LD_ADDR_EXP 10
45664: PUSH
45665: EMPTY
45666: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45667: LD_ADDR_EXP 11
45671: PUSH
45672: EMPTY
45673: ST_TO_ADDR
// mpDepots := [ ] ;
45674: LD_ADDR_EXP 12
45678: PUSH
45679: EMPTY
45680: ST_TO_ADDR
// mpBuildings := [ ] ;
45681: LD_ADDR_EXP 15
45685: PUSH
45686: EMPTY
45687: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45688: LD_ADDR_EXP 16
45692: PUSH
45693: EMPTY
45694: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45695: LD_ADDR_EXP 17
45699: PUSH
45700: EMPTY
45701: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45702: LD_ADDR_EXP 18
45706: PUSH
45707: EMPTY
45708: ST_TO_ADDR
// mpStartingResources := [ ] ;
45709: LD_ADDR_EXP 13
45713: PUSH
45714: EMPTY
45715: ST_TO_ADDR
// mpStartPos := [ ] ;
45716: LD_ADDR_EXP 19
45720: PUSH
45721: EMPTY
45722: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45723: LD_ADDR_EXP 20
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45732: LD_ADDR_EXP 21
45736: PUSH
45737: EMPTY
45738: ST_TO_ADDR
// mpApemans := [ ] ;
45739: LD_ADDR_EXP 28
45743: PUSH
45744: EMPTY
45745: ST_TO_ADDR
// mpApemansArea := [ ] ;
45746: LD_ADDR_EXP 29
45750: PUSH
45751: EMPTY
45752: ST_TO_ADDR
// mpRespawn := [ ] ;
45753: LD_ADDR_EXP 30
45757: PUSH
45758: EMPTY
45759: ST_TO_ADDR
// mpKingArea := 0 ;
45760: LD_ADDR_EXP 31
45764: PUSH
45765: LD_INT 0
45767: ST_TO_ADDR
// mpPoints := [ ] ;
45768: LD_ADDR_EXP 32
45772: PUSH
45773: EMPTY
45774: ST_TO_ADDR
// mpVehicles := 0 ;
45775: LD_ADDR_EXP 33
45779: PUSH
45780: LD_INT 0
45782: ST_TO_ADDR
// mpShipments := 0 ;
45783: LD_ADDR_EXP 25
45787: PUSH
45788: LD_INT 0
45790: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45791: LD_ADDR_EXP 37
45795: PUSH
45796: EMPTY
45797: PUSH
45798: EMPTY
45799: PUSH
45800: EMPTY
45801: PUSH
45802: EMPTY
45803: PUSH
45804: EMPTY
45805: PUSH
45806: EMPTY
45807: PUSH
45808: EMPTY
45809: PUSH
45810: EMPTY
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: ST_TO_ADDR
// mpEmissions := 0 ;
45822: LD_ADDR_EXP 34
45826: PUSH
45827: LD_INT 0
45829: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45830: LD_ADDR_EXP 23
45834: PUSH
45835: LD_INT 3
45837: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45838: LD_ADDR_EXP 22
45842: PUSH
45843: LD_INT 15
45845: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45846: LD_ADDR_EXP 35
45850: PUSH
45851: LD_INT 0
45853: ST_TO_ADDR
// mpGameActive := false ;
45854: LD_ADDR_EXP 36
45858: PUSH
45859: LD_INT 0
45861: ST_TO_ADDR
// mpBlockRespThread := false ;
45862: LD_ADDR_EXP 38
45866: PUSH
45867: LD_INT 0
45869: ST_TO_ADDR
// for i := 1 to 32 do
45870: LD_ADDR_VAR 0 2
45874: PUSH
45875: DOUBLE
45876: LD_INT 1
45878: DEC
45879: ST_TO_ADDR
45880: LD_INT 32
45882: PUSH
45883: FOR_TO
45884: IFFALSE 45911
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
45886: LD_ADDR_EXP 4
45890: PUSH
45891: LD_EXP 4
45895: PPUSH
45896: LD_VAR 0 2
45900: PPUSH
45901: LD_INT 0
45903: PPUSH
45904: CALL_OW 1
45908: ST_TO_ADDR
45909: GO 45883
45911: POP
45912: POP
// end ;
45913: LD_VAR 0 1
45917: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
45918: LD_INT 0
45920: PPUSH
45921: PPUSH
45922: PPUSH
45923: PPUSH
45924: PPUSH
45925: PPUSH
45926: PPUSH
45927: PPUSH
45928: PPUSH
45929: PPUSH
45930: PPUSH
45931: PPUSH
45932: PPUSH
45933: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
45934: LD_ADDR_VAR 0 14
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: LD_INT 3
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: LIST
45952: ST_TO_ADDR
// for i in gameTypes do
45953: LD_ADDR_VAR 0 2
45957: PUSH
45958: LD_VAR 0 14
45962: PUSH
45963: FOR_IN
45964: IFFALSE 45973
// disable ( i ) ;
45966: LD_VAR 0 2
45970: DISABLE_MARKED
45971: GO 45963
45973: POP
45974: POP
// if Multiplayer then
45975: LD_OWVAR 4
45979: IFFALSE 46163
// begin mpGameType := mp_game_type ;
45981: LD_ADDR_EXP 1
45985: PUSH
45986: LD_OWVAR 6
45990: ST_TO_ADDR
// your_side := mp_player_side ;
45991: LD_ADDR_OWVAR 2
45995: PUSH
45996: LD_OWVAR 7
46000: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46001: LD_ADDR_EXP 5
46005: PUSH
46006: LD_OWVAR 17
46010: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46011: LD_ADDR_EXP 6
46015: PUSH
46016: LD_OWVAR 15
46020: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46021: LD_ADDR_EXP 7
46025: PUSH
46026: LD_OWVAR 16
46030: ST_TO_ADDR
// mpTeams := mp_teams ;
46031: LD_ADDR_EXP 8
46035: PUSH
46036: LD_OWVAR 12
46040: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46041: LD_ADDR_VAR 0 2
46045: PUSH
46046: DOUBLE
46047: LD_INT 1
46049: DEC
46050: ST_TO_ADDR
46051: LD_EXP 2
46055: PPUSH
46056: CALL 4910 0 1
46060: PUSH
46061: FOR_TO
46062: IFFALSE 46138
// begin setting := mpGameSettingsKeys [ i ] ;
46064: LD_ADDR_VAR 0 12
46068: PUSH
46069: LD_EXP 2
46073: PUSH
46074: LD_VAR 0 2
46078: ARRAY
46079: ST_TO_ADDR
// if setting then
46080: LD_VAR 0 12
46084: IFFALSE 46136
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46086: LD_ADDR_EXP 4
46090: PUSH
46091: LD_EXP 4
46095: PPUSH
46096: LD_VAR 0 2
46100: PPUSH
46101: LD_EXP 3
46105: PUSH
46106: LD_VAR 0 2
46110: ARRAY
46111: PUSH
46112: LD_VAR 0 2
46116: PUSH
46117: LD_INT 1
46119: MINUS
46120: PPUSH
46121: CALL_OW 426
46125: PUSH
46126: LD_INT 1
46128: PLUS
46129: ARRAY
46130: PPUSH
46131: CALL_OW 1
46135: ST_TO_ADDR
// end ;
46136: GO 46061
46138: POP
46139: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46140: LD_ADDR_EXP 9
46144: PUSH
46145: LD_EXP 6
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: EMPTY
46154: LIST
46155: DIFF
46156: PUSH
46157: LD_INT 1
46159: GREATER
46160: ST_TO_ADDR
// end else
46161: GO 46163
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46163: LD_EXP 1
46167: PPUSH
46168: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
46172: LD_EXP 16
46176: PPUSH
46177: CALL 4910 0 1
46181: IFFALSE 46212
// begin for i in mpMarkedAreas do
46183: LD_ADDR_VAR 0 2
46187: PUSH
46188: LD_EXP 16
46192: PUSH
46193: FOR_IN
46194: IFFALSE 46210
// SetAreaMapShow ( i , 0 ) ;
46196: LD_VAR 0 2
46200: PPUSH
46201: LD_INT 0
46203: PPUSH
46204: CALL_OW 424
46208: GO 46193
46210: POP
46211: POP
// end ; for i := 1 to 8 do
46212: LD_ADDR_VAR 0 2
46216: PUSH
46217: DOUBLE
46218: LD_INT 1
46220: DEC
46221: ST_TO_ADDR
46222: LD_INT 8
46224: PUSH
46225: FOR_TO
46226: IFFALSE 47442
// begin if not mpSidePositions [ i ] then
46228: LD_EXP 5
46232: PUSH
46233: LD_VAR 0 2
46237: ARRAY
46238: NOT
46239: IFFALSE 46243
// continue ;
46241: GO 46225
// side := i ;
46243: LD_ADDR_VAR 0 7
46247: PUSH
46248: LD_VAR 0 2
46252: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46253: LD_ADDR_VAR 0 9
46257: PUSH
46258: LD_EXP 7
46262: PUSH
46263: LD_VAR 0 2
46267: ARRAY
46268: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46269: LD_ADDR_VAR 0 8
46273: PUSH
46274: LD_EXP 5
46278: PUSH
46279: LD_VAR 0 2
46283: ARRAY
46284: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46285: LD_EXP 10
46289: PPUSH
46290: CALL 4910 0 1
46294: IFFALSE 46371
// begin for j in mpOilDeposits [ pos ] do
46296: LD_ADDR_VAR 0 3
46300: PUSH
46301: LD_EXP 10
46305: PUSH
46306: LD_VAR 0 8
46310: ARRAY
46311: PUSH
46312: FOR_IN
46313: IFFALSE 46369
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46315: LD_VAR 0 3
46319: PUSH
46320: LD_INT 1
46322: ARRAY
46323: PPUSH
46324: LD_VAR 0 3
46328: PUSH
46329: LD_INT 2
46331: ARRAY
46332: PPUSH
46333: LD_INT 2
46335: PPUSH
46336: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46340: LD_VAR 0 3
46344: PUSH
46345: LD_INT 1
46347: ARRAY
46348: PPUSH
46349: LD_VAR 0 3
46353: PUSH
46354: LD_INT 2
46356: ARRAY
46357: PPUSH
46358: LD_VAR 0 7
46362: PPUSH
46363: CALL_OW 441
// end ;
46367: GO 46312
46369: POP
46370: POP
// end ; if Count ( mpSibDeposits ) then
46371: LD_EXP 11
46375: PPUSH
46376: CALL 4910 0 1
46380: IFFALSE 46457
// begin for j in mpSibDeposits [ pos ] do
46382: LD_ADDR_VAR 0 3
46386: PUSH
46387: LD_EXP 11
46391: PUSH
46392: LD_VAR 0 8
46396: ARRAY
46397: PUSH
46398: FOR_IN
46399: IFFALSE 46455
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46401: LD_VAR 0 3
46405: PUSH
46406: LD_INT 1
46408: ARRAY
46409: PPUSH
46410: LD_VAR 0 3
46414: PUSH
46415: LD_INT 2
46417: ARRAY
46418: PPUSH
46419: LD_INT 3
46421: PPUSH
46422: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46426: LD_VAR 0 3
46430: PUSH
46431: LD_INT 1
46433: ARRAY
46434: PPUSH
46435: LD_VAR 0 3
46439: PUSH
46440: LD_INT 2
46442: ARRAY
46443: PPUSH
46444: LD_VAR 0 7
46448: PPUSH
46449: CALL_OW 441
// end ;
46453: GO 46398
46455: POP
46456: POP
// end ; InitBc ;
46457: CALL_OW 21
// InitUc ;
46461: CALL_OW 18
// uc_side := side ;
46465: LD_ADDR_OWVAR 20
46469: PUSH
46470: LD_VAR 0 7
46474: ST_TO_ADDR
// uc_nation := nation ;
46475: LD_ADDR_OWVAR 21
46479: PUSH
46480: LD_VAR 0 9
46484: ST_TO_ADDR
// if Count ( mpDepots ) then
46485: LD_EXP 12
46489: PPUSH
46490: CALL 4910 0 1
46494: IFFALSE 46664
// begin bc_level := 0 ;
46496: LD_ADDR_OWVAR 43
46500: PUSH
46501: LD_INT 0
46503: ST_TO_ADDR
// bc_type := b_depot ;
46504: LD_ADDR_OWVAR 42
46508: PUSH
46509: LD_INT 0
46511: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46512: LD_ADDR_VAR 0 4
46516: PUSH
46517: LD_EXP 12
46521: PUSH
46522: LD_VAR 0 8
46526: ARRAY
46527: PUSH
46528: LD_INT 1
46530: ARRAY
46531: PPUSH
46532: LD_EXP 12
46536: PUSH
46537: LD_VAR 0 8
46541: ARRAY
46542: PUSH
46543: LD_INT 2
46545: ARRAY
46546: PPUSH
46547: LD_EXP 12
46551: PUSH
46552: LD_VAR 0 8
46556: ARRAY
46557: PUSH
46558: LD_INT 3
46560: ARRAY
46561: PPUSH
46562: CALL_OW 47
46566: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46567: LD_VAR 0 4
46571: PPUSH
46572: LD_STRING @
46574: PUSH
46575: LD_VAR 0 7
46579: STR
46580: PPUSH
46581: CALL_OW 500
// SetTag ( b , side ) ;
46585: LD_VAR 0 4
46589: PPUSH
46590: LD_VAR 0 7
46594: PPUSH
46595: CALL_OW 109
// if Count ( mpStartingResources ) then
46599: LD_EXP 13
46603: PPUSH
46604: CALL 4910 0 1
46608: IFFALSE 46662
// begin for j := 1 to mpStartingResources do
46610: LD_ADDR_VAR 0 3
46614: PUSH
46615: DOUBLE
46616: LD_INT 1
46618: DEC
46619: ST_TO_ADDR
46620: LD_EXP 13
46624: PUSH
46625: FOR_TO
46626: IFFALSE 46660
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46628: LD_VAR 0 4
46632: PPUSH
46633: CALL_OW 274
46637: PPUSH
46638: LD_VAR 0 3
46642: PPUSH
46643: LD_EXP 13
46647: PUSH
46648: LD_VAR 0 3
46652: ARRAY
46653: PPUSH
46654: CALL_OW 277
46658: GO 46625
46660: POP
46661: POP
// end ; end else
46662: GO 46811
// if Count ( mpStartingResources ) then
46664: LD_EXP 13
46668: PPUSH
46669: CALL 4910 0 1
46673: IFFALSE 46811
// begin for j := 1 to mpStartingResources do
46675: LD_ADDR_VAR 0 3
46679: PUSH
46680: DOUBLE
46681: LD_INT 1
46683: DEC
46684: ST_TO_ADDR
46685: LD_EXP 13
46689: PUSH
46690: FOR_TO
46691: IFFALSE 46809
// begin resources := mpStartingResources [ j ] ;
46693: LD_ADDR_VAR 0 13
46697: PUSH
46698: LD_EXP 13
46702: PUSH
46703: LD_VAR 0 3
46707: ARRAY
46708: ST_TO_ADDR
// repeat if resources >= 50 then
46709: LD_VAR 0 13
46713: PUSH
46714: LD_INT 50
46716: GREATEREQUAL
46717: IFFALSE 46763
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46719: LD_VAR 0 3
46723: PPUSH
46724: LD_INT 5
46726: PPUSH
46727: LD_VAR 0 5
46731: PPUSH
46732: LD_VAR 0 6
46736: PPUSH
46737: LD_INT 4
46739: PPUSH
46740: LD_INT 0
46742: PPUSH
46743: CALL_OW 60
// resources := resources - 50 ;
46747: LD_ADDR_VAR 0 13
46751: PUSH
46752: LD_VAR 0 13
46756: PUSH
46757: LD_INT 50
46759: MINUS
46760: ST_TO_ADDR
// end else
46761: GO 46797
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46763: LD_VAR 0 3
46767: PPUSH
46768: LD_VAR 0 13
46772: PUSH
46773: LD_INT 10
46775: DIV
46776: PPUSH
46777: LD_VAR 0 5
46781: PPUSH
46782: LD_VAR 0 6
46786: PPUSH
46787: LD_INT 4
46789: PPUSH
46790: LD_INT 0
46792: PPUSH
46793: CALL_OW 60
// until resources <= 0 ;
46797: LD_VAR 0 13
46801: PUSH
46802: LD_INT 0
46804: LESSEQUAL
46805: IFFALSE 46709
// end ;
46807: GO 46690
46809: POP
46810: POP
// end ; if Count ( mpBuildings ) then
46811: LD_EXP 15
46815: PPUSH
46816: CALL 4910 0 1
46820: IFFALSE 46898
// begin for j in mpBuildings [ pos ] do
46822: LD_ADDR_VAR 0 3
46826: PUSH
46827: LD_EXP 15
46831: PUSH
46832: LD_VAR 0 8
46836: ARRAY
46837: PUSH
46838: FOR_IN
46839: IFFALSE 46896
// begin bc_level := 0 ;
46841: LD_ADDR_OWVAR 43
46845: PUSH
46846: LD_INT 0
46848: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46849: LD_ADDR_OWVAR 42
46853: PUSH
46854: LD_VAR 0 3
46858: PUSH
46859: LD_INT 1
46861: ARRAY
46862: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46863: LD_VAR 0 3
46867: PUSH
46868: LD_INT 2
46870: ARRAY
46871: PPUSH
46872: LD_VAR 0 3
46876: PUSH
46877: LD_INT 3
46879: ARRAY
46880: PPUSH
46881: LD_VAR 0 3
46885: PUSH
46886: LD_INT 4
46888: ARRAY
46889: PPUSH
46890: CALL_OW 47
// end ;
46894: GO 46838
46896: POP
46897: POP
// end ; if mpBattleFlag > - 1 then
46898: LD_EXP 20
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: GREATER
46907: IFFALSE 47066
// begin x := mpStartPos [ pos ] [ 1 ] ;
46909: LD_ADDR_VAR 0 5
46913: PUSH
46914: LD_EXP 19
46918: PUSH
46919: LD_VAR 0 8
46923: ARRAY
46924: PUSH
46925: LD_INT 1
46927: ARRAY
46928: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
46929: LD_ADDR_VAR 0 6
46933: PUSH
46934: LD_EXP 19
46938: PUSH
46939: LD_VAR 0 8
46943: ARRAY
46944: PUSH
46945: LD_INT 2
46947: ARRAY
46948: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
46949: LD_VAR 0 5
46953: PPUSH
46954: LD_VAR 0 6
46958: PPUSH
46959: LD_INT 12
46961: PPUSH
46962: LD_INT 2
46964: PPUSH
46965: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
46969: LD_ADDR_EXP 21
46973: PUSH
46974: LD_EXP 21
46978: PPUSH
46979: LD_VAR 0 7
46983: PPUSH
46984: LD_VAR 0 7
46988: PPUSH
46989: LD_VAR 0 5
46993: PPUSH
46994: LD_VAR 0 6
46998: PPUSH
46999: LD_INT 1
47001: PUSH
47002: LD_INT 100
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 2
47011: PUSH
47012: LD_INT 70
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 3
47021: PUSH
47022: LD_INT 40
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 10
47031: PUSH
47032: LD_INT 25
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 20
47041: PUSH
47042: LD_INT 100
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: PPUSH
47056: CALL_OW 418
47060: PPUSH
47061: CALL_OW 1
47065: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47066: LD_EXP 24
47070: PUSH
47071: LD_INT 20
47073: PPUSH
47074: LD_VAR 0 7
47078: PPUSH
47079: CALL_OW 321
47083: PUSH
47084: LD_INT 1
47086: EQUAL
47087: AND
47088: IFFALSE 47105
// SetTech ( tech_SibDet , side , state_researched ) ;
47090: LD_INT 20
47092: PPUSH
47093: LD_VAR 0 7
47097: PPUSH
47098: LD_INT 2
47100: PPUSH
47101: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47105: LD_INT 24
47107: PPUSH
47108: LD_VAR 0 7
47112: PPUSH
47113: LD_INT 0
47115: PPUSH
47116: CALL_OW 322
// if mpSibBomb = 1 then
47120: LD_EXP 26
47124: PUSH
47125: LD_INT 1
47127: EQUAL
47128: IFFALSE 47147
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47130: LD_INT 25
47132: PPUSH
47133: LD_VAR 0 7
47137: PPUSH
47138: LD_INT 1
47140: PPUSH
47141: CALL_OW 322
// end else
47145: GO 47162
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47147: LD_INT 25
47149: PPUSH
47150: LD_VAR 0 7
47154: PPUSH
47155: LD_INT 0
47157: PPUSH
47158: CALL_OW 322
// end ; if mpVehicles then
47162: LD_EXP 33
47166: IFFALSE 47265
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47168: LD_ADDR_VAR 0 3
47172: PUSH
47173: LD_VAR 0 7
47177: PPUSH
47178: LD_VAR 0 9
47182: PPUSH
47183: LD_EXP 33
47187: PPUSH
47188: CALL 48352 0 3
47192: PUSH
47193: FOR_IN
47194: IFFALSE 47263
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47196: LD_VAR 0 3
47200: PPUSH
47201: LD_INT 0
47203: PPUSH
47204: LD_INT 5
47206: PPUSH
47207: CALL_OW 12
47211: PPUSH
47212: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47216: LD_VAR 0 3
47220: PPUSH
47221: LD_EXP 19
47225: PUSH
47226: LD_VAR 0 8
47230: ARRAY
47231: PUSH
47232: LD_INT 1
47234: ARRAY
47235: PPUSH
47236: LD_EXP 19
47240: PUSH
47241: LD_VAR 0 8
47245: ARRAY
47246: PUSH
47247: LD_INT 2
47249: ARRAY
47250: PPUSH
47251: LD_INT 12
47253: PPUSH
47254: LD_INT 0
47256: PPUSH
47257: CALL_OW 50
// end ;
47261: GO 47193
47263: POP
47264: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47265: LD_ADDR_VAR 0 11
47269: PUSH
47270: LD_VAR 0 7
47274: PPUSH
47275: LD_VAR 0 9
47279: PPUSH
47280: LD_EXP 22
47284: PPUSH
47285: LD_EXP 23
47289: PPUSH
47290: CALL 47854 0 4
47294: ST_TO_ADDR
// for j in team do
47295: LD_ADDR_VAR 0 3
47299: PUSH
47300: LD_VAR 0 11
47304: PUSH
47305: FOR_IN
47306: IFFALSE 47355
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47308: LD_VAR 0 3
47312: PPUSH
47313: LD_EXP 19
47317: PUSH
47318: LD_VAR 0 8
47322: ARRAY
47323: PUSH
47324: LD_INT 1
47326: ARRAY
47327: PPUSH
47328: LD_EXP 19
47332: PUSH
47333: LD_VAR 0 8
47337: ARRAY
47338: PUSH
47339: LD_INT 2
47341: ARRAY
47342: PPUSH
47343: LD_INT 12
47345: PPUSH
47346: LD_INT 0
47348: PPUSH
47349: CALL_OW 50
47353: GO 47305
47355: POP
47356: POP
// if mpApemans then
47357: LD_EXP 28
47361: IFFALSE 47440
// begin for j := 1 to mpApemans do
47363: LD_ADDR_VAR 0 3
47367: PUSH
47368: DOUBLE
47369: LD_INT 1
47371: DEC
47372: ST_TO_ADDR
47373: LD_EXP 28
47377: PUSH
47378: FOR_TO
47379: IFFALSE 47438
// begin PrepareApeman ( - 5 ) ;
47381: LD_INT 5
47383: NEG
47384: PPUSH
47385: CALL 36767 0 1
// ape := CreateHuman ;
47389: LD_ADDR_VAR 0 10
47393: PUSH
47394: CALL_OW 44
47398: ST_TO_ADDR
// SetTag ( ape , side ) ;
47399: LD_VAR 0 10
47403: PPUSH
47404: LD_VAR 0 7
47408: PPUSH
47409: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47413: LD_VAR 0 10
47417: PPUSH
47418: LD_EXP 29
47422: PUSH
47423: LD_VAR 0 8
47427: ARRAY
47428: PPUSH
47429: LD_INT 0
47431: PPUSH
47432: CALL_OW 49
// end ;
47436: GO 47378
47438: POP
47439: POP
// end ; end ;
47440: GO 46225
47442: POP
47443: POP
// if not mpTeamGame then
47444: LD_EXP 9
47448: NOT
47449: IFFALSE 47547
// begin for i := 1 to 8 do
47451: LD_ADDR_VAR 0 2
47455: PUSH
47456: DOUBLE
47457: LD_INT 1
47459: DEC
47460: ST_TO_ADDR
47461: LD_INT 8
47463: PUSH
47464: FOR_TO
47465: IFFALSE 47543
// for j := 1 to 8 do
47467: LD_ADDR_VAR 0 3
47471: PUSH
47472: DOUBLE
47473: LD_INT 1
47475: DEC
47476: ST_TO_ADDR
47477: LD_INT 8
47479: PUSH
47480: FOR_TO
47481: IFFALSE 47539
// if i <> j then
47483: LD_VAR 0 2
47487: PUSH
47488: LD_VAR 0 3
47492: NONEQUAL
47493: IFFALSE 47517
// SetAttitude ( i , j , att_neutral , true ) else
47495: LD_VAR 0 2
47499: PPUSH
47500: LD_VAR 0 3
47504: PPUSH
47505: LD_INT 0
47507: PPUSH
47508: LD_INT 1
47510: PPUSH
47511: CALL_OW 80
47515: GO 47537
// SetAttitude ( i , j , att_friend , true ) ;
47517: LD_VAR 0 2
47521: PPUSH
47522: LD_VAR 0 3
47526: PPUSH
47527: LD_INT 1
47529: PPUSH
47530: LD_INT 1
47532: PPUSH
47533: CALL_OW 80
47537: GO 47480
47539: POP
47540: POP
47541: GO 47464
47543: POP
47544: POP
// end else
47545: GO 47722
// begin if mpSharedVision then
47547: LD_EXP 14
47551: IFFALSE 47616
// begin for i in mpTeams do
47553: LD_ADDR_VAR 0 2
47557: PUSH
47558: LD_EXP 8
47562: PUSH
47563: FOR_IN
47564: IFFALSE 47614
// for j := 2 to i do
47566: LD_ADDR_VAR 0 3
47570: PUSH
47571: DOUBLE
47572: LD_INT 2
47574: DEC
47575: ST_TO_ADDR
47576: LD_VAR 0 2
47580: PUSH
47581: FOR_TO
47582: IFFALSE 47610
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47584: LD_VAR 0 2
47588: PUSH
47589: LD_VAR 0 3
47593: ARRAY
47594: PPUSH
47595: LD_VAR 0 2
47599: PUSH
47600: LD_INT 1
47602: ARRAY
47603: PPUSH
47604: CALL_OW 343
47608: GO 47581
47610: POP
47611: POP
47612: GO 47563
47614: POP
47615: POP
// end ; for i := 1 to 8 do
47616: LD_ADDR_VAR 0 2
47620: PUSH
47621: DOUBLE
47622: LD_INT 1
47624: DEC
47625: ST_TO_ADDR
47626: LD_INT 8
47628: PUSH
47629: FOR_TO
47630: IFFALSE 47720
// for j := 1 to 8 do
47632: LD_ADDR_VAR 0 3
47636: PUSH
47637: DOUBLE
47638: LD_INT 1
47640: DEC
47641: ST_TO_ADDR
47642: LD_INT 8
47644: PUSH
47645: FOR_TO
47646: IFFALSE 47716
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47648: LD_EXP 6
47652: PUSH
47653: LD_VAR 0 2
47657: ARRAY
47658: PUSH
47659: LD_EXP 6
47663: PUSH
47664: LD_VAR 0 3
47668: ARRAY
47669: EQUAL
47670: IFFALSE 47694
// SetAttitude ( i , j , att_friend , true ) else
47672: LD_VAR 0 2
47676: PPUSH
47677: LD_VAR 0 3
47681: PPUSH
47682: LD_INT 1
47684: PPUSH
47685: LD_INT 1
47687: PPUSH
47688: CALL_OW 80
47692: GO 47714
// SetAttitude ( i , j , att_enemy , true ) ;
47694: LD_VAR 0 2
47698: PPUSH
47699: LD_VAR 0 3
47703: PPUSH
47704: LD_INT 2
47706: PPUSH
47707: LD_INT 1
47709: PPUSH
47710: CALL_OW 80
47714: GO 47645
47716: POP
47717: POP
47718: GO 47629
47720: POP
47721: POP
// end ; music_nat := mpSideNations [ your_side ] ;
47722: LD_ADDR_OWVAR 71
47726: PUSH
47727: LD_EXP 7
47731: PUSH
47732: LD_OWVAR 2
47736: ARRAY
47737: ST_TO_ADDR
// if IAmSpec then
47738: CALL_OW 531
47742: IFFALSE 47783
// begin FogOff ( true ) ;
47744: LD_INT 1
47746: PPUSH
47747: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47751: LD_EXP 27
47755: PUSH
47756: LD_INT 1
47758: ARRAY
47759: PUSH
47760: LD_INT 2
47762: DIV
47763: PPUSH
47764: LD_EXP 27
47768: PUSH
47769: LD_INT 2
47771: ARRAY
47772: PUSH
47773: LD_INT 2
47775: DIV
47776: PPUSH
47777: CALL_OW 86
// end else
47781: GO 47829
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47783: LD_EXP 19
47787: PUSH
47788: LD_EXP 5
47792: PUSH
47793: LD_OWVAR 2
47797: ARRAY
47798: ARRAY
47799: PUSH
47800: LD_INT 1
47802: ARRAY
47803: PPUSH
47804: LD_EXP 19
47808: PUSH
47809: LD_EXP 5
47813: PUSH
47814: LD_OWVAR 2
47818: ARRAY
47819: ARRAY
47820: PUSH
47821: LD_INT 2
47823: ARRAY
47824: PPUSH
47825: CALL_OW 86
// end ; BeginBuildUp ;
47829: CALL 48830 0 0
// enable ( mpActive ) ;
47833: LD_INT 100
47835: ENABLE_MARKED
// enable ( mpGameType ) ;
47836: LD_EXP 1
47840: ENABLE_MARKED
// mpGameActive := true ;
47841: LD_ADDR_EXP 36
47845: PUSH
47846: LD_INT 1
47848: ST_TO_ADDR
// end ;
47849: LD_VAR 0 1
47853: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
47854: LD_INT 0
47856: PPUSH
47857: PPUSH
47858: PPUSH
47859: PPUSH
// result := [ ] ;
47860: LD_ADDR_VAR 0 5
47864: PUSH
47865: EMPTY
47866: ST_TO_ADDR
// class := class_soldier ;
47867: LD_ADDR_VAR 0 8
47871: PUSH
47872: LD_INT 1
47874: ST_TO_ADDR
// uc_side := side ;
47875: LD_ADDR_OWVAR 20
47879: PUSH
47880: LD_VAR 0 1
47884: ST_TO_ADDR
// uc_nation := nation ;
47885: LD_ADDR_OWVAR 21
47889: PUSH
47890: LD_VAR 0 2
47894: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
47895: LD_ADDR_OWVAR 26
47899: PUSH
47900: LD_OWVAR 19
47904: PUSH
47905: LD_VAR 0 1
47909: ARRAY
47910: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
47911: LD_INT 1
47913: PPUSH
47914: LD_INT 2
47916: PPUSH
47917: CALL_OW 12
47921: PPUSH
47922: LD_VAR 0 8
47926: PPUSH
47927: LD_VAR 0 4
47931: PUSH
47932: LD_INT 2
47934: PLUS
47935: PPUSH
47936: CALL_OW 380
// hc_importance := 105 ;
47940: LD_ADDR_OWVAR 32
47944: PUSH
47945: LD_INT 105
47947: ST_TO_ADDR
// if Multiplayer then
47948: LD_OWVAR 4
47952: IFFALSE 47992
// begin hc_gallery := MULTIAVATARS ;
47954: LD_ADDR_OWVAR 33
47958: PUSH
47959: LD_STRING MULTIAVATARS
47961: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
47962: LD_ADDR_OWVAR 34
47966: PUSH
47967: LD_VAR 0 1
47971: PPUSH
47972: CALL_OW 525
47976: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
47977: LD_ADDR_OWVAR 27
47981: PUSH
47982: LD_VAR 0 1
47986: PPUSH
47987: CALL_OW 526
47991: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
47992: LD_ADDR_VAR 0 5
47996: PUSH
47997: LD_VAR 0 5
48001: PPUSH
48002: CALL_OW 44
48006: PPUSH
48007: CALL 40519 0 2
48011: ST_TO_ADDR
// if mpTeamPreset then
48012: LD_LOC 1
48016: IFFALSE 48112
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
48018: LD_LOC 1
48022: PUSH
48023: LD_INT 1
48025: ARRAY
48026: PPUSH
48027: LD_VAR 0 5
48031: PUSH
48032: LD_VAR 0 5
48036: ARRAY
48037: PPUSH
48038: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
48042: LD_VAR 0 5
48046: PUSH
48047: LD_VAR 0 5
48051: ARRAY
48052: PPUSH
48053: LD_INT 1
48055: PPUSH
48056: LD_LOC 1
48060: PUSH
48061: LD_INT 1
48063: ARRAY
48064: PPUSH
48065: LD_INT 1
48067: PPUSH
48068: CALL_OW 260
48072: PPUSH
48073: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
48077: LD_VAR 0 5
48081: PUSH
48082: LD_VAR 0 5
48086: ARRAY
48087: PPUSH
48088: LD_INT 2
48090: PPUSH
48091: LD_LOC 1
48095: PUSH
48096: LD_INT 1
48098: ARRAY
48099: PPUSH
48100: LD_INT 2
48102: PPUSH
48103: CALL_OW 260
48107: PPUSH
48108: CALL_OW 239
// end ; InitHc_All ( ) ;
48112: CALL_OW 584
// class := 2 ;
48116: LD_ADDR_VAR 0 8
48120: PUSH
48121: LD_INT 2
48123: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48124: LD_ADDR_VAR 0 6
48128: PUSH
48129: DOUBLE
48130: LD_INT 1
48132: DEC
48133: ST_TO_ADDR
48134: LD_VAR 0 3
48138: PUSH
48139: LD_INT 1
48141: MINUS
48142: PUSH
48143: FOR_TO
48144: IFFALSE 48328
// begin PrepareHuman ( false , class , skill ) ;
48146: LD_INT 0
48148: PPUSH
48149: LD_VAR 0 8
48153: PPUSH
48154: LD_VAR 0 4
48158: PPUSH
48159: CALL_OW 380
// un := CreateHuman ;
48163: LD_ADDR_VAR 0 7
48167: PUSH
48168: CALL_OW 44
48172: ST_TO_ADDR
// result := Join ( result , un ) ;
48173: LD_ADDR_VAR 0 5
48177: PUSH
48178: LD_VAR 0 5
48182: PPUSH
48183: LD_VAR 0 7
48187: PPUSH
48188: CALL 40519 0 2
48192: ST_TO_ADDR
// if mpTeamPreset then
48193: LD_LOC 1
48197: IFFALSE 48293
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
48199: LD_LOC 1
48203: PUSH
48204: LD_VAR 0 6
48208: PUSH
48209: LD_INT 1
48211: PLUS
48212: ARRAY
48213: PPUSH
48214: LD_VAR 0 7
48218: PPUSH
48219: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
48223: LD_VAR 0 7
48227: PPUSH
48228: LD_INT 1
48230: PPUSH
48231: LD_LOC 1
48235: PUSH
48236: LD_VAR 0 6
48240: PUSH
48241: LD_INT 1
48243: PLUS
48244: ARRAY
48245: PPUSH
48246: LD_INT 1
48248: PPUSH
48249: CALL_OW 260
48253: PPUSH
48254: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
48258: LD_VAR 0 7
48262: PPUSH
48263: LD_INT 2
48265: PPUSH
48266: LD_LOC 1
48270: PUSH
48271: LD_VAR 0 6
48275: PUSH
48276: LD_INT 1
48278: PLUS
48279: ARRAY
48280: PPUSH
48281: LD_INT 2
48283: PPUSH
48284: CALL_OW 260
48288: PPUSH
48289: CALL_OW 239
// end ; class := Inc ( class ) ;
48293: LD_ADDR_VAR 0 8
48297: PUSH
48298: LD_VAR 0 8
48302: PPUSH
48303: CALL 41880 0 1
48307: ST_TO_ADDR
// if class = 5 then
48308: LD_VAR 0 8
48312: PUSH
48313: LD_INT 5
48315: EQUAL
48316: IFFALSE 48326
// class := 1 ;
48318: LD_ADDR_VAR 0 8
48322: PUSH
48323: LD_INT 1
48325: ST_TO_ADDR
// end ;
48326: GO 48143
48328: POP
48329: POP
// if not mpTeamPreset then
48330: LD_LOC 1
48334: NOT
48335: IFFALSE 48347
// mpTeamPreset := result ;
48337: LD_ADDR_LOC 1
48341: PUSH
48342: LD_VAR 0 5
48346: ST_TO_ADDR
// end ;
48347: LD_VAR 0 5
48351: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48352: LD_INT 0
48354: PPUSH
48355: PPUSH
// result := [ ] ;
48356: LD_ADDR_VAR 0 4
48360: PUSH
48361: EMPTY
48362: ST_TO_ADDR
// if not vehicles then
48363: LD_VAR 0 3
48367: NOT
48368: IFFALSE 48372
// exit ;
48370: GO 48531
// for i := 1 to vehicles [ nation ] do
48372: LD_ADDR_VAR 0 5
48376: PUSH
48377: DOUBLE
48378: LD_INT 1
48380: DEC
48381: ST_TO_ADDR
48382: LD_VAR 0 3
48386: PUSH
48387: LD_VAR 0 2
48391: ARRAY
48392: PUSH
48393: FOR_TO
48394: IFFALSE 48529
// begin uc_side := side ;
48396: LD_ADDR_OWVAR 20
48400: PUSH
48401: LD_VAR 0 1
48405: ST_TO_ADDR
// uc_nation := nation ;
48406: LD_ADDR_OWVAR 21
48410: PUSH
48411: LD_VAR 0 2
48415: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48416: LD_VAR 0 3
48420: PUSH
48421: LD_VAR 0 2
48425: ARRAY
48426: PUSH
48427: LD_VAR 0 5
48431: ARRAY
48432: PUSH
48433: LD_INT 1
48435: ARRAY
48436: PPUSH
48437: LD_VAR 0 3
48441: PUSH
48442: LD_VAR 0 2
48446: ARRAY
48447: PUSH
48448: LD_VAR 0 5
48452: ARRAY
48453: PUSH
48454: LD_INT 2
48456: ARRAY
48457: PPUSH
48458: LD_VAR 0 3
48462: PUSH
48463: LD_VAR 0 2
48467: ARRAY
48468: PUSH
48469: LD_VAR 0 5
48473: ARRAY
48474: PUSH
48475: LD_INT 3
48477: ARRAY
48478: PPUSH
48479: LD_VAR 0 3
48483: PUSH
48484: LD_VAR 0 2
48488: ARRAY
48489: PUSH
48490: LD_VAR 0 5
48494: ARRAY
48495: PUSH
48496: LD_INT 4
48498: ARRAY
48499: PPUSH
48500: LD_INT 80
48502: PPUSH
48503: CALL 7648 0 5
// result := Join ( result , CreateVehicle ) ;
48507: LD_ADDR_VAR 0 4
48511: PUSH
48512: LD_VAR 0 4
48516: PPUSH
48517: CALL_OW 45
48521: PPUSH
48522: CALL 40519 0 2
48526: ST_TO_ADDR
// end ;
48527: GO 48393
48529: POP
48530: POP
// end ;
48531: LD_VAR 0 4
48535: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48536: LD_INT 0
48538: PPUSH
48539: PPUSH
// for i in mpBattleFlags do
48540: LD_ADDR_VAR 0 3
48544: PUSH
48545: LD_EXP 21
48549: PUSH
48550: FOR_IN
48551: IFFALSE 48628
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48553: LD_VAR 0 3
48557: PPUSH
48558: LD_INT 1
48560: PUSH
48561: LD_VAR 0 1
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 2
48572: PUSH
48573: LD_VAR 0 1
48577: PUSH
48578: LD_REAL  7.00000000000000E-0001
48581: MUL
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 3
48589: PUSH
48590: LD_VAR 0 1
48594: PUSH
48595: LD_REAL  4.00000000000000E-0001
48598: MUL
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 20
48606: PUSH
48607: LD_VAR 0 1
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: PPUSH
48622: CALL_OW 423
48626: GO 48550
48628: POP
48629: POP
// end ;
48630: LD_VAR 0 2
48634: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48635: LD_INT 100
48637: IFFALSE 48732
48639: GO 48641
48641: DISABLE
48642: LD_INT 0
48644: PPUSH
48645: PPUSH
// begin if mpBattleFlag <= 0 then
48646: LD_EXP 20
48650: PUSH
48651: LD_INT 0
48653: LESSEQUAL
48654: IFFALSE 48658
// exit ;
48656: GO 48732
// strength := 100 ;
48658: LD_ADDR_VAR 0 2
48662: PUSH
48663: LD_INT 100
48665: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48666: LD_EXP 20
48670: PPUSH
48671: CALL_OW 67
// strength := Dec ( strength ) ;
48675: LD_ADDR_VAR 0 2
48679: PUSH
48680: LD_VAR 0 2
48684: PPUSH
48685: CALL 41902 0 1
48689: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48690: LD_VAR 0 2
48694: PPUSH
48695: CALL 48536 0 1
// until not strength ;
48699: LD_VAR 0 2
48703: NOT
48704: IFFALSE 48666
// for i in mpBattleFlags do
48706: LD_ADDR_VAR 0 1
48710: PUSH
48711: LD_EXP 21
48715: PUSH
48716: FOR_IN
48717: IFFALSE 48730
// KillBattleFlag ( i ) ;
48719: LD_VAR 0 1
48723: PPUSH
48724: CALL_OW 419
48728: GO 48716
48730: POP
48731: POP
// end ;
48732: PPOPN 2
48734: END
// every 0 0$1 marked mpActive do var side , tmp ;
48735: GO 48737
48737: DISABLE
48738: LD_INT 0
48740: PPUSH
48741: PPUSH
// begin if mpSibBomb <= 1 then
48742: LD_EXP 26
48746: PUSH
48747: LD_INT 1
48749: LESSEQUAL
48750: IFFALSE 48754
// exit ;
48752: GO 48827
// tmp := mpSibBomb ;
48754: LD_ADDR_VAR 0 2
48758: PUSH
48759: LD_EXP 26
48763: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48764: LD_INT 35
48766: PPUSH
48767: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48771: LD_ADDR_VAR 0 2
48775: PUSH
48776: LD_VAR 0 2
48780: PUSH
48781: LD_INT 35
48783: MINUS
48784: ST_TO_ADDR
// until not tmp ;
48785: LD_VAR 0 2
48789: NOT
48790: IFFALSE 48764
// for side := 1 to 8 do
48792: LD_ADDR_VAR 0 1
48796: PUSH
48797: DOUBLE
48798: LD_INT 1
48800: DEC
48801: ST_TO_ADDR
48802: LD_INT 8
48804: PUSH
48805: FOR_TO
48806: IFFALSE 48825
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48808: LD_INT 25
48810: PPUSH
48811: LD_VAR 0 1
48815: PPUSH
48816: LD_INT 1
48818: PPUSH
48819: CALL_OW 322
48823: GO 48805
48825: POP
48826: POP
// end ;
48827: PPOPN 2
48829: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48830: LD_INT 0
48832: PPUSH
48833: PPUSH
48834: PPUSH
// mpBuildUpTimeDelay := 0 ;
48835: LD_ADDR_EXP 39
48839: PUSH
48840: LD_INT 0
48842: ST_TO_ADDR
// if not mpBuildUpTime then
48843: LD_EXP 18
48847: NOT
48848: IFFALSE 48852
// exit ;
48850: GO 49035
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
48852: LD_ADDR_EXP 39
48856: PUSH
48857: LD_INT 8400
48859: PUSH
48860: LD_INT 2100
48862: PUSH
48863: LD_EXP 18
48867: MUL
48868: PLUS
48869: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
48870: LD_ADDR_EXP 40
48874: PUSH
48875: LD_INT 1
48877: ST_TO_ADDR
// for i := 1 to 8 do
48878: LD_ADDR_VAR 0 2
48882: PUSH
48883: DOUBLE
48884: LD_INT 1
48886: DEC
48887: ST_TO_ADDR
48888: LD_INT 8
48890: PUSH
48891: FOR_TO
48892: IFFALSE 49033
// if mpSidePositions [ i ] then
48894: LD_EXP 5
48898: PUSH
48899: LD_VAR 0 2
48903: ARRAY
48904: IFFALSE 49031
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
48906: LD_EXP 17
48910: PUSH
48911: LD_EXP 5
48915: PUSH
48916: LD_VAR 0 2
48920: ARRAY
48921: ARRAY
48922: PPUSH
48923: LD_INT 5
48925: PPUSH
48926: CALL_OW 424
// for j := 1 to 8 do
48930: LD_ADDR_VAR 0 3
48934: PUSH
48935: DOUBLE
48936: LD_INT 1
48938: DEC
48939: ST_TO_ADDR
48940: LD_INT 8
48942: PUSH
48943: FOR_TO
48944: IFFALSE 49029
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48946: LD_EXP 5
48950: PUSH
48951: LD_VAR 0 3
48955: ARRAY
48956: PUSH
48957: LD_EXP 6
48961: PUSH
48962: LD_VAR 0 2
48966: ARRAY
48967: PUSH
48968: LD_EXP 6
48972: PUSH
48973: LD_VAR 0 3
48977: ARRAY
48978: NONEQUAL
48979: PUSH
48980: LD_EXP 9
48984: NOT
48985: PUSH
48986: LD_VAR 0 2
48990: PUSH
48991: LD_VAR 0 3
48995: NONEQUAL
48996: AND
48997: OR
48998: AND
48999: IFFALSE 49027
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49001: LD_VAR 0 3
49005: PPUSH
49006: LD_EXP 17
49010: PUSH
49011: LD_EXP 5
49015: PUSH
49016: LD_VAR 0 2
49020: ARRAY
49021: ARRAY
49022: PPUSH
49023: CALL_OW 333
49027: GO 48943
49029: POP
49030: POP
// end ;
49031: GO 48891
49033: POP
49034: POP
// end ;
49035: LD_VAR 0 1
49039: RET
// function EndBuildUp ; var i , j ; begin
49040: LD_INT 0
49042: PPUSH
49043: PPUSH
49044: PPUSH
// mpBuildUpTimeActive := false ;
49045: LD_ADDR_EXP 40
49049: PUSH
49050: LD_INT 0
49052: ST_TO_ADDR
// for i := 1 to 8 do
49053: LD_ADDR_VAR 0 2
49057: PUSH
49058: DOUBLE
49059: LD_INT 1
49061: DEC
49062: ST_TO_ADDR
49063: LD_INT 8
49065: PUSH
49066: FOR_TO
49067: IFFALSE 49208
// if mpSidePositions [ i ] then
49069: LD_EXP 5
49073: PUSH
49074: LD_VAR 0 2
49078: ARRAY
49079: IFFALSE 49206
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
49081: LD_EXP 17
49085: PUSH
49086: LD_EXP 5
49090: PUSH
49091: LD_VAR 0 2
49095: ARRAY
49096: ARRAY
49097: PPUSH
49098: LD_INT 0
49100: PPUSH
49101: CALL_OW 424
// for j := 1 to 8 do
49105: LD_ADDR_VAR 0 3
49109: PUSH
49110: DOUBLE
49111: LD_INT 1
49113: DEC
49114: ST_TO_ADDR
49115: LD_INT 8
49117: PUSH
49118: FOR_TO
49119: IFFALSE 49204
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49121: LD_EXP 5
49125: PUSH
49126: LD_VAR 0 3
49130: ARRAY
49131: PUSH
49132: LD_EXP 6
49136: PUSH
49137: LD_VAR 0 2
49141: ARRAY
49142: PUSH
49143: LD_EXP 6
49147: PUSH
49148: LD_VAR 0 3
49152: ARRAY
49153: NONEQUAL
49154: PUSH
49155: LD_EXP 9
49159: NOT
49160: PUSH
49161: LD_VAR 0 2
49165: PUSH
49166: LD_VAR 0 3
49170: NONEQUAL
49171: AND
49172: OR
49173: AND
49174: IFFALSE 49202
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49176: LD_VAR 0 3
49180: PPUSH
49181: LD_EXP 17
49185: PUSH
49186: LD_EXP 5
49190: PUSH
49191: LD_VAR 0 2
49195: ARRAY
49196: ARRAY
49197: PPUSH
49198: CALL_OW 334
49202: GO 49118
49204: POP
49205: POP
// end ;
49206: GO 49066
49208: POP
49209: POP
// end ;
49210: LD_VAR 0 1
49214: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49215: LD_EXP 40
49219: IFFALSE 49394
49221: GO 49223
49223: DISABLE
49224: LD_INT 0
49226: PPUSH
49227: PPUSH
// begin for i := 1 to 8 do
49228: LD_ADDR_VAR 0 1
49232: PUSH
49233: DOUBLE
49234: LD_INT 1
49236: DEC
49237: ST_TO_ADDR
49238: LD_INT 8
49240: PUSH
49241: FOR_TO
49242: IFFALSE 49391
// if mpSidePositions [ i ] then
49244: LD_EXP 5
49248: PUSH
49249: LD_VAR 0 1
49253: ARRAY
49254: IFFALSE 49389
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49256: LD_ADDR_VAR 0 2
49260: PUSH
49261: LD_EXP 17
49265: PUSH
49266: LD_EXP 5
49270: PUSH
49271: LD_VAR 0 1
49275: ARRAY
49276: ARRAY
49277: PPUSH
49278: LD_INT 2
49280: PUSH
49281: LD_INT 21
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 21
49293: PUSH
49294: LD_INT 2
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 22
49308: PUSH
49309: LD_OWVAR 2
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PPUSH
49322: CALL_OW 70
49326: PUSH
49327: FOR_IN
49328: IFFALSE 49387
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49330: LD_EXP 6
49334: PUSH
49335: LD_VAR 0 1
49339: ARRAY
49340: PUSH
49341: LD_EXP 6
49345: PUSH
49346: LD_OWVAR 2
49350: ARRAY
49351: NONEQUAL
49352: PUSH
49353: LD_EXP 9
49357: NOT
49358: PUSH
49359: LD_VAR 0 1
49363: PUSH
49364: LD_OWVAR 2
49368: NONEQUAL
49369: AND
49370: OR
49371: IFFALSE 49385
// ComMoveToArea ( un , BuildUpEscape ) ;
49373: LD_VAR 0 2
49377: PPUSH
49378: LD_INT 13
49380: PPUSH
49381: CALL_OW 113
49385: GO 49327
49387: POP
49388: POP
49389: GO 49241
49391: POP
49392: POP
// enable ;
49393: ENABLE
// end ;
49394: PPOPN 2
49396: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49397: LD_EXP 18
49401: IFFALSE 49451
49403: GO 49405
49405: DISABLE
49406: LD_INT 0
49408: PPUSH
// begin tmp := mpBuildUpTime ;
49409: LD_ADDR_VAR 0 1
49413: PUSH
49414: LD_EXP 18
49418: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49419: LD_INT 35
49421: PPUSH
49422: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49426: LD_ADDR_VAR 0 1
49430: PUSH
49431: LD_VAR 0 1
49435: PUSH
49436: LD_INT 35
49438: MINUS
49439: ST_TO_ADDR
// until not tmp ;
49440: LD_VAR 0 1
49444: NOT
49445: IFFALSE 49419
// EndBuildUp ;
49447: CALL 49040 0 0
// end ;
49451: PPOPN 1
49453: END
// every 0 0$1 trigger mpActive marked mpWin do
49454: LD_INT 100
49456: IFFALSE 49490
49458: GO 49460
49460: DISABLE
// begin if IAmServer then
49461: CALL_OW 518
49465: IFFALSE 49474
// wait ( 0 0$3 ) ;
49467: LD_INT 105
49469: PPUSH
49470: CALL_OW 67
// if Multiplayer then
49474: LD_OWVAR 4
49478: IFFALSE 49486
// YouWinInMultiplayer else
49480: CALL_OW 106
49484: GO 49490
// YouWin ;
49486: CALL_OW 103
// end ;
49490: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49491: LD_INT 0
49493: PPUSH
// result := false ;
49494: LD_ADDR_VAR 0 3
49498: PUSH
49499: LD_INT 0
49501: ST_TO_ADDR
// case gameType of GameTypeNormal :
49502: LD_VAR 0 1
49506: PUSH
49507: LD_INT 1
49509: DOUBLE
49510: EQUAL
49511: IFTRUE 49515
49513: GO 49588
49515: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49516: LD_ADDR_VAR 0 3
49520: PUSH
49521: LD_INT 22
49523: PUSH
49524: LD_VAR 0 2
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: LD_INT 21
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 33
49548: PUSH
49549: LD_INT 3
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 33
49558: PUSH
49559: LD_INT 5
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PPUSH
49576: CALL_OW 69
49580: PPUSH
49581: CALL 4910 0 1
49585: ST_TO_ADDR
// end ; GameTypeSurvival :
49586: GO 49823
49588: LD_INT 2
49590: DOUBLE
49591: EQUAL
49592: IFTRUE 49596
49594: GO 49724
49596: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49597: LD_ADDR_VAR 0 3
49601: PUSH
49602: LD_INT 22
49604: PUSH
49605: LD_VAR 0 2
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: LD_INT 30
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 30
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: LIST
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PPUSH
49646: CALL_OW 69
49650: PPUSH
49651: CALL 4910 0 1
49655: PUSH
49656: LD_INT 22
49658: PUSH
49659: LD_VAR 0 2
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: LD_INT 21
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 33
49683: PUSH
49684: LD_INT 3
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 33
49693: PUSH
49694: LD_INT 5
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PPUSH
49711: CALL_OW 69
49715: PPUSH
49716: CALL 4910 0 1
49720: AND
49721: ST_TO_ADDR
// end ; GameTypeKing :
49722: GO 49823
49724: LD_INT 3
49726: DOUBLE
49727: EQUAL
49728: IFTRUE 49732
49730: GO 49822
49732: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
49733: LD_ADDR_VAR 0 3
49737: PUSH
49738: LD_INT 22
49740: PUSH
49741: LD_VAR 0 2
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: LD_INT 21
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 33
49765: PUSH
49766: LD_INT 3
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 33
49775: PUSH
49776: LD_INT 5
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PPUSH
49793: CALL_OW 69
49797: PPUSH
49798: CALL 4910 0 1
49802: PUSH
49803: LD_VAR 0 2
49807: PPUSH
49808: CALL 53009 0 1
49812: PUSH
49813: LD_EXP 32
49817: LESS
49818: AND
49819: ST_TO_ADDR
// end ; end ;
49820: GO 49823
49822: POP
// end ;
49823: LD_VAR 0 3
49827: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49828: LD_INT 100
49830: IFFALSE 50052
49832: GO 49834
49834: DISABLE
49835: LD_INT 0
49837: PPUSH
49838: PPUSH
// begin if Multiplayer then
49839: LD_OWVAR 4
49843: IFFALSE 49851
// SetPlayerSpectator ( ) else
49845: CALL_OW 572
49849: GO 49860
// FogOff ( your_side ) ;
49851: LD_OWVAR 2
49855: PPUSH
49856: CALL_OW 344
// repeat gameIsOn := false ;
49860: LD_ADDR_VAR 0 1
49864: PUSH
49865: LD_INT 0
49867: ST_TO_ADDR
// for i := 1 to 8 do
49868: LD_ADDR_VAR 0 2
49872: PUSH
49873: DOUBLE
49874: LD_INT 1
49876: DEC
49877: ST_TO_ADDR
49878: LD_INT 8
49880: PUSH
49881: FOR_TO
49882: IFFALSE 50004
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49884: LD_EXP 5
49888: PUSH
49889: LD_VAR 0 2
49893: ARRAY
49894: PUSH
49895: LD_VAR 0 2
49899: PPUSH
49900: CALL_OW 108
49904: AND
49905: PUSH
49906: LD_VAR 0 2
49910: PUSH
49911: LD_OWVAR 2
49915: NONEQUAL
49916: AND
49917: IFFALSE 50002
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
49919: LD_EXP 6
49923: PUSH
49924: LD_VAR 0 2
49928: ARRAY
49929: NOT
49930: PUSH
49931: LD_EXP 6
49935: PUSH
49936: LD_VAR 0 2
49940: ARRAY
49941: PUSH
49942: LD_EXP 6
49946: PUSH
49947: LD_OWVAR 2
49951: ARRAY
49952: NONEQUAL
49953: PUSH
49954: LD_OWVAR 2
49958: PPUSH
49959: LD_VAR 0 2
49963: PPUSH
49964: CALL_OW 81
49968: PUSH
49969: LD_INT 1
49971: NONEQUAL
49972: AND
49973: OR
49974: IFFALSE 50002
// if HasPowerByGameType ( mpGameType , i ) then
49976: LD_EXP 1
49980: PPUSH
49981: LD_VAR 0 2
49985: PPUSH
49986: CALL 49491 0 2
49990: IFFALSE 50002
// begin gameIsOn := true ;
49992: LD_ADDR_VAR 0 1
49996: PUSH
49997: LD_INT 1
49999: ST_TO_ADDR
// break ;
50000: GO 50004
// end ;
50002: GO 49881
50004: POP
50005: POP
// wait ( 100 ) ;
50006: LD_INT 100
50008: PPUSH
50009: CALL_OW 67
// until not gameIsOn ;
50013: LD_VAR 0 1
50017: NOT
50018: IFFALSE 49860
// if IAmServer then
50020: CALL_OW 518
50024: IFFALSE 50033
// wait ( 0 0$3 ) ;
50026: LD_INT 105
50028: PPUSH
50029: CALL_OW 67
// if Multiplayer then
50033: LD_OWVAR 4
50037: IFFALSE 50045
// YouLostInMultiplayer else
50039: CALL_OW 107
50043: GO 50052
// YouLost (  ) ;
50045: LD_STRING 
50047: PPUSH
50048: CALL_OW 104
// end ;
50052: PPOPN 2
50054: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
50055: LD_EXP 30
50059: IFFALSE 50406
50061: GO 50063
50063: DISABLE
50064: LD_INT 0
50066: PPUSH
50067: PPUSH
50068: PPUSH
50069: PPUSH
50070: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
50071: LD_ADDR_VAR 0 5
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: LD_INT 3
50084: PUSH
50085: LD_INT 4
50087: PUSH
50088: LD_INT 5
50090: PUSH
50091: LD_INT 6
50093: PUSH
50094: LD_INT 7
50096: PUSH
50097: LD_INT 8
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
50110: LD_INT 350
50112: PPUSH
50113: CALL_OW 67
// for i := 1 to 8 do
50117: LD_ADDR_VAR 0 1
50121: PUSH
50122: DOUBLE
50123: LD_INT 1
50125: DEC
50126: ST_TO_ADDR
50127: LD_INT 8
50129: PUSH
50130: FOR_TO
50131: IFFALSE 50376
// begin j := sides [ i ] ;
50133: LD_ADDR_VAR 0 2
50137: PUSH
50138: LD_VAR 0 5
50142: PUSH
50143: LD_VAR 0 1
50147: ARRAY
50148: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
50149: LD_EXP 37
50153: PUSH
50154: LD_VAR 0 2
50158: ARRAY
50159: PPUSH
50160: CALL 4910 0 1
50164: PUSH
50165: LD_VAR 0 2
50169: PPUSH
50170: CALL_OW 108
50174: AND
50175: PUSH
50176: LD_EXP 1
50180: PPUSH
50181: LD_VAR 0 2
50185: PPUSH
50186: CALL 49491 0 2
50190: AND
50191: IFFALSE 50374
// begin wait ( mpRespawn div 3 ) ;
50193: LD_EXP 30
50197: PUSH
50198: LD_INT 3
50200: DIV
50201: PPUSH
50202: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50206: LD_ADDR_VAR 0 3
50210: PUSH
50211: LD_INT 22
50213: PUSH
50214: LD_VAR 0 2
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 50
50225: PUSH
50226: EMPTY
50227: LIST
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: LD_INT 30
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 30
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: LIST
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: LIST
50261: PPUSH
50262: CALL_OW 69
50266: ST_TO_ADDR
// if not tmp then
50267: LD_VAR 0 3
50271: NOT
50272: IFFALSE 50276
// continue ;
50274: GO 50130
// spawn := tmp [ 1 ] ;
50276: LD_ADDR_VAR 0 4
50280: PUSH
50281: LD_VAR 0 3
50285: PUSH
50286: LD_INT 1
50288: ARRAY
50289: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50290: LD_EXP 37
50294: PUSH
50295: LD_VAR 0 2
50299: ARRAY
50300: PUSH
50301: LD_INT 1
50303: ARRAY
50304: PPUSH
50305: LD_VAR 0 4
50309: PPUSH
50310: CALL_OW 250
50314: PPUSH
50315: LD_VAR 0 4
50319: PPUSH
50320: CALL_OW 251
50324: PPUSH
50325: LD_INT 32
50327: PPUSH
50328: LD_INT 1
50330: PPUSH
50331: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50335: LD_ADDR_EXP 37
50339: PUSH
50340: LD_EXP 37
50344: PPUSH
50345: LD_VAR 0 2
50349: PPUSH
50350: LD_EXP 37
50354: PUSH
50355: LD_VAR 0 2
50359: ARRAY
50360: PPUSH
50361: LD_INT 1
50363: PPUSH
50364: CALL_OW 3
50368: PPUSH
50369: CALL_OW 1
50373: ST_TO_ADDR
// end ; end ;
50374: GO 50130
50376: POP
50377: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50378: LD_ADDR_VAR 0 5
50382: PUSH
50383: LD_VAR 0 5
50387: PPUSH
50388: LD_INT 1
50390: PPUSH
50391: LD_INT 8
50393: PPUSH
50394: LD_INT 1
50396: PPUSH
50397: CALL 7188 0 4
50401: ST_TO_ADDR
// until false ;
50402: LD_INT 0
50404: IFFALSE 50110
// end ;
50406: PPOPN 5
50408: END
// every 0 0$1 marked mpActive do
50409: GO 50411
50411: DISABLE
// begin enable ;
50412: ENABLE
// if not mpDisplayStrings then
50413: LD_EXP 35
50417: NOT
50418: IFFALSE 50429
// begin display_strings := [ ] ;
50420: LD_ADDR_OWVAR 47
50424: PUSH
50425: EMPTY
50426: ST_TO_ADDR
// exit ;
50427: GO 50439
// end ; display_strings := mpDisplayStrings ;
50429: LD_ADDR_OWVAR 47
50433: PUSH
50434: LD_EXP 35
50438: ST_TO_ADDR
// end ; end_of_file
50439: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50440: LD_INT 0
50442: PPUSH
50443: PPUSH
50444: PPUSH
50445: PPUSH
50446: PPUSH
50447: PPUSH
50448: PPUSH
50449: PPUSH
50450: PPUSH
// if GetType ( un ) = unit_vehicle then
50451: LD_VAR 0 1
50455: PPUSH
50456: CALL_OW 247
50460: PUSH
50461: LD_INT 2
50463: EQUAL
50464: IFFALSE 50468
// exit ;
50466: GO 51038
// side := GetSide ( un ) ;
50468: LD_ADDR_VAR 0 9
50472: PUSH
50473: LD_VAR 0 1
50477: PPUSH
50478: CALL_OW 255
50482: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50483: LD_EXP 1
50487: PUSH
50488: LD_INT 2
50490: EQUAL
50491: IFFALSE 50584
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
50493: LD_VAR 0 1
50497: PPUSH
50498: CALL_OW 266
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: IN
50513: PUSH
50514: LD_VAR 0 1
50518: PPUSH
50519: CALL_OW 110
50523: PUSH
50524: LD_VAR 0 9
50528: EQUAL
50529: AND
50530: IFFALSE 50584
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50532: LD_ADDR_VAR 0 3
50536: PUSH
50537: LD_INT 22
50539: PUSH
50540: LD_VAR 0 9
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 21
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PPUSH
50563: CALL_OW 69
50567: PUSH
50568: FOR_IN
50569: IFFALSE 50582
// KillUnit ( i ) ;
50571: LD_VAR 0 3
50575: PPUSH
50576: CALL_OW 66
50580: GO 50568
50582: POP
50583: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50584: LD_VAR 0 1
50588: PPUSH
50589: CALL_OW 257
50593: PUSH
50594: LD_INT 12
50596: PUSH
50597: LD_INT 17
50599: PUSH
50600: LD_INT 15
50602: PUSH
50603: LD_INT 16
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: IN
50612: PUSH
50613: LD_VAR 0 1
50617: PPUSH
50618: CALL_OW 263
50622: PUSH
50623: LD_INT 5
50625: EQUAL
50626: OR
50627: IFFALSE 50767
// begin tag := GetTag ( un ) ;
50629: LD_ADDR_VAR 0 5
50633: PUSH
50634: LD_VAR 0 1
50638: PPUSH
50639: CALL_OW 110
50643: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50644: LD_ADDR_VAR 0 7
50648: PUSH
50649: LD_EXP 29
50653: PUSH
50654: LD_EXP 5
50658: PUSH
50659: LD_VAR 0 5
50663: ARRAY
50664: ARRAY
50665: ST_TO_ADDR
// if not area then
50666: LD_VAR 0 7
50670: NOT
50671: IFFALSE 50675
// exit ;
50673: GO 51038
// wait ( 4 4$00 ) ;
50675: LD_INT 8400
50677: PPUSH
50678: CALL_OW 67
// repeat wait ( 10 ) ;
50682: LD_INT 10
50684: PPUSH
50685: CALL_OW 67
// until not mpBlockRespThread ;
50689: LD_EXP 38
50693: NOT
50694: IFFALSE 50682
// mpBlockRespThread := true ;
50696: LD_ADDR_EXP 38
50700: PUSH
50701: LD_INT 1
50703: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
50704: LD_INT 0
50706: PPUSH
50707: CALL 36767 0 1
// ape := CreateHuman ;
50711: LD_ADDR_VAR 0 4
50715: PUSH
50716: CALL_OW 44
50720: ST_TO_ADDR
// SetTag ( ape , tag ) ;
50721: LD_VAR 0 4
50725: PPUSH
50726: LD_VAR 0 5
50730: PPUSH
50731: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
50735: LD_VAR 0 4
50739: PPUSH
50740: LD_VAR 0 7
50744: PPUSH
50745: LD_INT 0
50747: PPUSH
50748: CALL_OW 49
// wait ( 10 ) ;
50752: LD_INT 10
50754: PPUSH
50755: CALL_OW 67
// mpBlockRespThread := false ;
50759: LD_ADDR_EXP 38
50763: PUSH
50764: LD_INT 0
50766: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
50767: LD_VAR 0 1
50771: PPUSH
50772: CALL_OW 247
50776: PUSH
50777: LD_INT 1
50779: EQUAL
50780: PUSH
50781: LD_VAR 0 1
50785: PPUSH
50786: CALL_OW 248
50790: PUSH
50791: LD_INT 0
50793: GREATER
50794: AND
50795: IFFALSE 51038
// begin if not mpRespawn then
50797: LD_EXP 30
50801: NOT
50802: IFFALSE 50806
// exit ;
50804: GO 51038
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
50806: LD_VAR 0 9
50810: PPUSH
50811: CALL_OW 108
50815: NOT
50816: PUSH
50817: LD_EXP 1
50821: PPUSH
50822: LD_VAR 0 9
50826: PPUSH
50827: CALL 49491 0 2
50831: NOT
50832: AND
50833: IFFALSE 50837
// exit ;
50835: GO 51038
// side := GetSide ( un ) ;
50837: LD_ADDR_VAR 0 9
50841: PUSH
50842: LD_VAR 0 1
50846: PPUSH
50847: CALL_OW 255
50851: ST_TO_ADDR
// nation := GetNation ( un ) ;
50852: LD_ADDR_VAR 0 8
50856: PUSH
50857: LD_VAR 0 1
50861: PPUSH
50862: CALL_OW 248
50866: ST_TO_ADDR
// class := GetClass ( un ) ;
50867: LD_ADDR_VAR 0 6
50871: PUSH
50872: LD_VAR 0 1
50876: PPUSH
50877: CALL_OW 257
50881: ST_TO_ADDR
// if class > 4 then
50882: LD_VAR 0 6
50886: PUSH
50887: LD_INT 4
50889: GREATER
50890: IFFALSE 50900
// class := 1 ;
50892: LD_ADDR_VAR 0 6
50896: PUSH
50897: LD_INT 1
50899: ST_TO_ADDR
// repeat wait ( 10 ) ;
50900: LD_INT 10
50902: PPUSH
50903: CALL_OW 67
// until not mpBlockRespThread ;
50907: LD_EXP 38
50911: NOT
50912: IFFALSE 50900
// mpBlockRespThread := true ;
50914: LD_ADDR_EXP 38
50918: PUSH
50919: LD_INT 1
50921: ST_TO_ADDR
// uc_side := side ;
50922: LD_ADDR_OWVAR 20
50926: PUSH
50927: LD_VAR 0 9
50931: ST_TO_ADDR
// uc_nation := nation ;
50932: LD_ADDR_OWVAR 21
50936: PUSH
50937: LD_VAR 0 8
50941: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
50942: LD_INT 0
50944: PPUSH
50945: LD_VAR 0 6
50949: PPUSH
50950: LD_INT 2
50952: PPUSH
50953: CALL_OW 380
// un := CreateHuman ;
50957: LD_ADDR_VAR 0 1
50961: PUSH
50962: CALL_OW 44
50966: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
50967: LD_ADDR_EXP 37
50971: PUSH
50972: LD_EXP 37
50976: PPUSH
50977: LD_VAR 0 9
50981: PPUSH
50982: LD_EXP 37
50986: PUSH
50987: LD_VAR 0 9
50991: ARRAY
50992: PPUSH
50993: LD_EXP 37
50997: PUSH
50998: LD_VAR 0 9
51002: ARRAY
51003: PUSH
51004: LD_INT 1
51006: PLUS
51007: PPUSH
51008: LD_VAR 0 1
51012: PPUSH
51013: CALL_OW 1
51017: PPUSH
51018: CALL_OW 1
51022: ST_TO_ADDR
// wait ( 10 ) ;
51023: LD_INT 10
51025: PPUSH
51026: CALL_OW 67
// mpBlockRespThread := false ;
51030: LD_ADDR_EXP 38
51034: PUSH
51035: LD_INT 0
51037: ST_TO_ADDR
// end ; end ;
51038: LD_VAR 0 2
51042: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
51043: LD_INT 0
51045: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
51046: LD_VAR 0 1
51050: PPUSH
51051: CALL_OW 266
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: IN
51066: IFFALSE 51091
// SetBName ( building , @ & GetSide ( building ) ) ;
51068: LD_VAR 0 1
51072: PPUSH
51073: LD_STRING @
51075: PUSH
51076: LD_VAR 0 1
51080: PPUSH
51081: CALL_OW 255
51085: STR
51086: PPUSH
51087: CALL_OW 500
// end ;
51091: LD_VAR 0 2
51095: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
51096: LD_INT 0
51098: PPUSH
51099: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
51100: LD_EXP 1
51104: PUSH
51105: LD_INT 2
51107: EQUAL
51108: PUSH
51109: LD_VAR 0 1
51113: PPUSH
51114: CALL_OW 266
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: IN
51129: AND
51130: IFFALSE 51195
// begin KillUnit ( building ) ;
51132: LD_VAR 0 1
51136: PPUSH
51137: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
51141: LD_ADDR_VAR 0 5
51145: PUSH
51146: LD_INT 22
51148: PUSH
51149: LD_VAR 0 2
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 21
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PPUSH
51172: CALL_OW 69
51176: PUSH
51177: FOR_IN
51178: IFFALSE 51191
// KillUnit ( i ) ;
51180: LD_VAR 0 5
51184: PPUSH
51185: CALL_OW 66
51189: GO 51177
51191: POP
51192: POP
// exit ;
51193: GO 51240
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
51195: LD_VAR 0 1
51199: PPUSH
51200: CALL_OW 266
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: IN
51215: IFFALSE 51240
// SetBName ( building , @ & GetSide ( building ) ) ;
51217: LD_VAR 0 1
51221: PPUSH
51222: LD_STRING @
51224: PUSH
51225: LD_VAR 0 1
51229: PPUSH
51230: CALL_OW 255
51234: STR
51235: PPUSH
51236: CALL_OW 500
// end ; end_of_file
51240: LD_VAR 0 4
51244: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
51245: LD_EXP 36
51249: PUSH
51250: CALL 51455 0 0
51254: AND
51255: PUSH
51256: LD_OWVAR 4
51260: AND
51261: IFFALSE 51452
51263: GO 51265
51265: DISABLE
51266: LD_INT 0
51268: PPUSH
51269: PPUSH
// begin canWin := false ;
51270: LD_ADDR_VAR 0 2
51274: PUSH
51275: LD_INT 0
51277: ST_TO_ADDR
// if not HasPower ( your_side ) then
51278: LD_OWVAR 2
51282: PPUSH
51283: CALL 51495 0 1
51287: NOT
51288: IFFALSE 51299
// begin Multiplayer_Loose_Message ;
51290: CALL_OW 521
// enable ( mpLose ) ;
51294: LD_INT 102
51296: ENABLE_MARKED
// end else
51297: GO 51452
// begin canWin := true ;
51299: LD_ADDR_VAR 0 2
51303: PUSH
51304: LD_INT 1
51306: ST_TO_ADDR
// for i := 1 to 8 do
51307: LD_ADDR_VAR 0 1
51311: PUSH
51312: DOUBLE
51313: LD_INT 1
51315: DEC
51316: ST_TO_ADDR
51317: LD_INT 8
51319: PUSH
51320: FOR_TO
51321: IFFALSE 51438
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51323: LD_EXP 5
51327: PUSH
51328: LD_VAR 0 1
51332: ARRAY
51333: PUSH
51334: LD_VAR 0 1
51338: PPUSH
51339: CALL_OW 108
51343: AND
51344: PUSH
51345: LD_VAR 0 1
51349: PUSH
51350: LD_OWVAR 2
51354: NONEQUAL
51355: AND
51356: IFFALSE 51436
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51358: LD_EXP 6
51362: PUSH
51363: LD_VAR 0 1
51367: ARRAY
51368: NOT
51369: PUSH
51370: LD_EXP 6
51374: PUSH
51375: LD_VAR 0 1
51379: ARRAY
51380: PUSH
51381: LD_EXP 6
51385: PUSH
51386: LD_OWVAR 2
51390: ARRAY
51391: NONEQUAL
51392: PUSH
51393: LD_OWVAR 2
51397: PPUSH
51398: LD_VAR 0 1
51402: PPUSH
51403: CALL_OW 81
51407: PUSH
51408: LD_INT 1
51410: NONEQUAL
51411: AND
51412: OR
51413: IFFALSE 51436
// if HasPower ( i ) then
51415: LD_VAR 0 1
51419: PPUSH
51420: CALL 51495 0 1
51424: IFFALSE 51436
// begin canWin := false ;
51426: LD_ADDR_VAR 0 2
51430: PUSH
51431: LD_INT 0
51433: ST_TO_ADDR
// break ;
51434: GO 51438
// end ;
51436: GO 51320
51438: POP
51439: POP
// if canWin then
51440: LD_VAR 0 2
51444: IFFALSE 51451
// enable ( mpWin ) else
51446: LD_INT 101
51448: ENABLE_MARKED
51449: GO 51452
// enable ;
51451: ENABLE
// end ; end ;
51452: PPOPN 2
51454: END
// function CanWinLoose ; begin
51455: LD_INT 0
51457: PPUSH
// result := true ;
51458: LD_ADDR_VAR 0 1
51462: PUSH
51463: LD_INT 1
51465: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51466: CALL_OW 531
51470: PUSH
51471: CALL_OW 519
51475: PUSH
51476: LD_INT 1
51478: GREATER
51479: AND
51480: IFFALSE 51490
// result := false ;
51482: LD_ADDR_VAR 0 1
51486: PUSH
51487: LD_INT 0
51489: ST_TO_ADDR
// end ;
51490: LD_VAR 0 1
51494: RET
// function HasPower ( i ) ; begin
51495: LD_INT 0
51497: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51498: LD_ADDR_VAR 0 2
51502: PUSH
51503: LD_INT 22
51505: PUSH
51506: LD_VAR 0 1
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: LD_INT 21
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 33
51530: PUSH
51531: LD_INT 3
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 33
51540: PUSH
51541: LD_INT 5
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PPUSH
51558: CALL_OW 69
51562: ST_TO_ADDR
// end ; end_of_file
51563: LD_VAR 0 2
51567: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51568: LD_EXP 36
51572: IFFALSE 51615
51574: GO 51576
51576: DISABLE
51577: LD_INT 0
51579: PPUSH
// begin for i := 1 to 8 do
51580: LD_ADDR_VAR 0 1
51584: PUSH
51585: DOUBLE
51586: LD_INT 1
51588: DEC
51589: ST_TO_ADDR
51590: LD_INT 8
51592: PUSH
51593: FOR_TO
51594: IFFALSE 51613
// SetRestrict ( b_depot , i , state_disabled ) ;
51596: LD_INT 0
51598: PPUSH
51599: LD_VAR 0 1
51603: PPUSH
51604: LD_INT 0
51606: PPUSH
51607: CALL_OW 324
51611: GO 51593
51613: POP
51614: POP
// end ;
51615: PPOPN 1
51617: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51618: LD_EXP 36
51622: PUSH
51623: CALL 51828 0 0
51627: AND
51628: PUSH
51629: LD_OWVAR 4
51633: AND
51634: IFFALSE 51825
51636: GO 51638
51638: DISABLE
51639: LD_INT 0
51641: PPUSH
51642: PPUSH
// begin canWin := false ;
51643: LD_ADDR_VAR 0 2
51647: PUSH
51648: LD_INT 0
51650: ST_TO_ADDR
// if not HasPower ( your_side ) then
51651: LD_OWVAR 2
51655: PPUSH
51656: CALL 51868 0 1
51660: NOT
51661: IFFALSE 51672
// begin Multiplayer_Loose_Message ;
51663: CALL_OW 521
// enable ( mpLose ) ;
51667: LD_INT 102
51669: ENABLE_MARKED
// end else
51670: GO 51825
// begin canWin := true ;
51672: LD_ADDR_VAR 0 2
51676: PUSH
51677: LD_INT 1
51679: ST_TO_ADDR
// for i := 1 to 8 do
51680: LD_ADDR_VAR 0 1
51684: PUSH
51685: DOUBLE
51686: LD_INT 1
51688: DEC
51689: ST_TO_ADDR
51690: LD_INT 8
51692: PUSH
51693: FOR_TO
51694: IFFALSE 51811
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51696: LD_EXP 5
51700: PUSH
51701: LD_VAR 0 1
51705: ARRAY
51706: PUSH
51707: LD_VAR 0 1
51711: PPUSH
51712: CALL_OW 108
51716: AND
51717: PUSH
51718: LD_VAR 0 1
51722: PUSH
51723: LD_OWVAR 2
51727: NONEQUAL
51728: AND
51729: IFFALSE 51809
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51731: LD_EXP 6
51735: PUSH
51736: LD_VAR 0 1
51740: ARRAY
51741: NOT
51742: PUSH
51743: LD_EXP 6
51747: PUSH
51748: LD_VAR 0 1
51752: ARRAY
51753: PUSH
51754: LD_EXP 6
51758: PUSH
51759: LD_OWVAR 2
51763: ARRAY
51764: NONEQUAL
51765: PUSH
51766: LD_OWVAR 2
51770: PPUSH
51771: LD_VAR 0 1
51775: PPUSH
51776: CALL_OW 81
51780: PUSH
51781: LD_INT 1
51783: NONEQUAL
51784: AND
51785: OR
51786: IFFALSE 51809
// if HasPower ( i ) then
51788: LD_VAR 0 1
51792: PPUSH
51793: CALL 51868 0 1
51797: IFFALSE 51809
// begin canWin := false ;
51799: LD_ADDR_VAR 0 2
51803: PUSH
51804: LD_INT 0
51806: ST_TO_ADDR
// break ;
51807: GO 51811
// end ;
51809: GO 51693
51811: POP
51812: POP
// if canWin then
51813: LD_VAR 0 2
51817: IFFALSE 51824
// enable ( mpWin ) else
51819: LD_INT 101
51821: ENABLE_MARKED
51822: GO 51825
// enable ;
51824: ENABLE
// end ; end ;
51825: PPOPN 2
51827: END
// function CanWinLoose ; begin
51828: LD_INT 0
51830: PPUSH
// result := true ;
51831: LD_ADDR_VAR 0 1
51835: PUSH
51836: LD_INT 1
51838: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51839: CALL_OW 531
51843: PUSH
51844: CALL_OW 519
51848: PUSH
51849: LD_INT 1
51851: GREATER
51852: AND
51853: IFFALSE 51863
// result := false ;
51855: LD_ADDR_VAR 0 1
51859: PUSH
51860: LD_INT 0
51862: ST_TO_ADDR
// end ;
51863: LD_VAR 0 1
51867: RET
// function HasPower ( i ) ; begin
51868: LD_INT 0
51870: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
51871: LD_INT 22
51873: PUSH
51874: LD_VAR 0 1
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: LD_INT 30
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 30
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: LIST
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PPUSH
51915: CALL_OW 69
51919: NOT
51920: IFFALSE 51924
// exit ;
51922: GO 51989
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51924: LD_ADDR_VAR 0 2
51928: PUSH
51929: LD_INT 22
51931: PUSH
51932: LD_VAR 0 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: LD_INT 21
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 33
51956: PUSH
51957: LD_INT 3
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 33
51966: PUSH
51967: LD_INT 5
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PPUSH
51984: CALL_OW 69
51988: ST_TO_ADDR
// end ; end_of_file
51989: LD_VAR 0 2
51993: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
51994: LD_EXP 36
51998: IFFALSE 52337
52000: GO 52002
52002: DISABLE
52003: LD_INT 0
52005: PPUSH
52006: PPUSH
52007: PPUSH
// begin mpKingPoints := [ ] ;
52008: LD_ADDR_EXP 41
52012: PUSH
52013: EMPTY
52014: ST_TO_ADDR
// if mpTeamGame then
52015: LD_EXP 9
52019: IFFALSE 52073
// begin for i := 1 to Count ( mpTeams ) do
52021: LD_ADDR_VAR 0 1
52025: PUSH
52026: DOUBLE
52027: LD_INT 1
52029: DEC
52030: ST_TO_ADDR
52031: LD_EXP 8
52035: PPUSH
52036: CALL 4910 0 1
52040: PUSH
52041: FOR_TO
52042: IFFALSE 52069
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52044: LD_ADDR_EXP 41
52048: PUSH
52049: LD_EXP 41
52053: PPUSH
52054: LD_VAR 0 1
52058: PPUSH
52059: LD_INT 0
52061: PPUSH
52062: CALL_OW 1
52066: ST_TO_ADDR
52067: GO 52041
52069: POP
52070: POP
// end else
52071: GO 52116
// begin for i := 1 to 8 do
52073: LD_ADDR_VAR 0 1
52077: PUSH
52078: DOUBLE
52079: LD_INT 1
52081: DEC
52082: ST_TO_ADDR
52083: LD_INT 8
52085: PUSH
52086: FOR_TO
52087: IFFALSE 52114
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52089: LD_ADDR_EXP 41
52093: PUSH
52094: LD_EXP 41
52098: PPUSH
52099: LD_VAR 0 1
52103: PPUSH
52104: LD_INT 0
52106: PPUSH
52107: CALL_OW 1
52111: ST_TO_ADDR
52112: GO 52086
52114: POP
52115: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
52116: LD_ADDR_VAR 0 3
52120: PUSH
52121: LD_INT 17
52123: PPUSH
52124: LD_INT 0
52126: PPUSH
52127: CALL_OW 517
52131: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52132: LD_ADDR_VAR 0 1
52136: PUSH
52137: DOUBLE
52138: LD_INT 1
52140: DEC
52141: ST_TO_ADDR
52142: LD_VAR 0 3
52146: PUSH
52147: LD_INT 1
52149: ARRAY
52150: PUSH
52151: FOR_TO
52152: IFFALSE 52219
// for j := 1 to 8 do
52154: LD_ADDR_VAR 0 2
52158: PUSH
52159: DOUBLE
52160: LD_INT 1
52162: DEC
52163: ST_TO_ADDR
52164: LD_INT 8
52166: PUSH
52167: FOR_TO
52168: IFFALSE 52215
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
52170: LD_VAR 0 3
52174: PUSH
52175: LD_INT 1
52177: ARRAY
52178: PUSH
52179: LD_VAR 0 1
52183: ARRAY
52184: PPUSH
52185: LD_VAR 0 3
52189: PUSH
52190: LD_INT 2
52192: ARRAY
52193: PUSH
52194: LD_VAR 0 1
52198: ARRAY
52199: PPUSH
52200: LD_VAR 0 2
52204: PPUSH
52205: LD_INT 12
52207: NEG
52208: PPUSH
52209: CALL_OW 330
52213: GO 52167
52215: POP
52216: POP
52217: GO 52151
52219: POP
52220: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
52221: LD_EXP 31
52225: PPUSH
52226: LD_INT 1
52228: PPUSH
52229: CALL_OW 424
// UpdateCounter ;
52233: CALL 52839 0 0
// repeat wait ( 0 0$1 ) ;
52237: LD_INT 35
52239: PPUSH
52240: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52244: LD_ADDR_VAR 0 3
52248: PUSH
52249: LD_EXP 31
52253: PPUSH
52254: LD_INT 3
52256: PUSH
52257: LD_INT 57
52259: PUSH
52260: EMPTY
52261: LIST
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 50
52269: PUSH
52270: EMPTY
52271: LIST
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: LD_INT 30
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 30
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: LIST
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: LIST
52305: PPUSH
52306: CALL_OW 70
52310: ST_TO_ADDR
// if not tmp then
52311: LD_VAR 0 3
52315: NOT
52316: IFFALSE 52320
// continue ;
52318: GO 52237
// AddPoints ( tmp ) ;
52320: LD_VAR 0 3
52324: PPUSH
52325: CALL 52517 0 1
// UpdateCounter ;
52329: CALL 52839 0 0
// until false ;
52333: LD_INT 0
52335: IFFALSE 52237
// end ;
52337: PPOPN 3
52339: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52340: LD_EXP 36
52344: PUSH
52345: LD_EXP 34
52349: AND
52350: IFFALSE 52514
52352: GO 52354
52354: DISABLE
52355: LD_INT 0
52357: PPUSH
52358: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52359: LD_ADDR_VAR 0 2
52363: PUSH
52364: LD_INT 17
52366: PPUSH
52367: LD_INT 0
52369: PPUSH
52370: CALL_OW 517
52374: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52375: LD_ADDR_VAR 0 1
52379: PUSH
52380: DOUBLE
52381: LD_INT 1
52383: DEC
52384: ST_TO_ADDR
52385: LD_VAR 0 2
52389: PUSH
52390: LD_INT 1
52392: ARRAY
52393: PUSH
52394: FOR_TO
52395: IFFALSE 52436
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52397: LD_VAR 0 2
52401: PUSH
52402: LD_INT 1
52404: ARRAY
52405: PUSH
52406: LD_VAR 0 1
52410: ARRAY
52411: PPUSH
52412: LD_VAR 0 2
52416: PUSH
52417: LD_INT 2
52419: ARRAY
52420: PUSH
52421: LD_VAR 0 1
52425: ARRAY
52426: PPUSH
52427: LD_INT 125
52429: PPUSH
52430: CALL_OW 495
52434: GO 52394
52436: POP
52437: POP
// repeat wait ( mpEmissions ) ;
52438: LD_EXP 34
52442: PPUSH
52443: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52447: LD_ADDR_VAR 0 1
52451: PUSH
52452: DOUBLE
52453: LD_INT 1
52455: DEC
52456: ST_TO_ADDR
52457: LD_VAR 0 2
52461: PUSH
52462: LD_INT 1
52464: ARRAY
52465: PUSH
52466: FOR_TO
52467: IFFALSE 52508
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52469: LD_VAR 0 2
52473: PUSH
52474: LD_INT 1
52476: ARRAY
52477: PUSH
52478: LD_VAR 0 1
52482: ARRAY
52483: PPUSH
52484: LD_VAR 0 2
52488: PUSH
52489: LD_INT 2
52491: ARRAY
52492: PUSH
52493: LD_VAR 0 1
52497: ARRAY
52498: PPUSH
52499: LD_INT 15
52501: PPUSH
52502: CALL_OW 495
52506: GO 52466
52508: POP
52509: POP
// until false ;
52510: LD_INT 0
52512: IFFALSE 52438
// end ;
52514: PPOPN 2
52516: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52517: LD_INT 0
52519: PPUSH
52520: PPUSH
52521: PPUSH
52522: PPUSH
52523: PPUSH
// if mpTeamGame then
52524: LD_EXP 9
52528: IFFALSE 52725
// begin first := depots [ 1 ] ;
52530: LD_ADDR_VAR 0 4
52534: PUSH
52535: LD_VAR 0 1
52539: PUSH
52540: LD_INT 1
52542: ARRAY
52543: ST_TO_ADDR
// side := GetSide ( first ) ;
52544: LD_ADDR_VAR 0 6
52548: PUSH
52549: LD_VAR 0 4
52553: PPUSH
52554: CALL_OW 255
52558: ST_TO_ADDR
// for i := 1 to mpTeams do
52559: LD_ADDR_VAR 0 3
52563: PUSH
52564: DOUBLE
52565: LD_INT 1
52567: DEC
52568: ST_TO_ADDR
52569: LD_EXP 8
52573: PUSH
52574: FOR_TO
52575: IFFALSE 52609
// if side in mpTeams [ i ] then
52577: LD_VAR 0 6
52581: PUSH
52582: LD_EXP 8
52586: PUSH
52587: LD_VAR 0 3
52591: ARRAY
52592: IN
52593: IFFALSE 52607
// begin team := i ;
52595: LD_ADDR_VAR 0 5
52599: PUSH
52600: LD_VAR 0 3
52604: ST_TO_ADDR
// break ;
52605: GO 52609
// end ;
52607: GO 52574
52609: POP
52610: POP
// if not team then
52611: LD_VAR 0 5
52615: NOT
52616: IFFALSE 52620
// exit ;
52618: GO 52834
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52620: LD_EXP 31
52624: PPUSH
52625: LD_INT 81
52627: PUSH
52628: LD_VAR 0 6
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PPUSH
52637: CALL_OW 70
52641: IFFALSE 52645
// exit ;
52643: GO 52834
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52645: LD_ADDR_EXP 41
52649: PUSH
52650: LD_EXP 41
52654: PPUSH
52655: LD_VAR 0 5
52659: PPUSH
52660: LD_EXP 41
52664: PUSH
52665: LD_VAR 0 5
52669: ARRAY
52670: PUSH
52671: LD_INT 1
52673: PLUS
52674: PPUSH
52675: CALL_OW 1
52679: ST_TO_ADDR
// for i in mpTeams [ team ] do
52680: LD_ADDR_VAR 0 3
52684: PUSH
52685: LD_EXP 8
52689: PUSH
52690: LD_VAR 0 5
52694: ARRAY
52695: PUSH
52696: FOR_IN
52697: IFFALSE 52721
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52699: LD_VAR 0 3
52703: PPUSH
52704: LD_EXP 41
52708: PUSH
52709: LD_VAR 0 5
52713: ARRAY
52714: PPUSH
52715: CALL_OW 506
52719: GO 52696
52721: POP
52722: POP
// end else
52723: GO 52834
// begin first := depots [ 1 ] ;
52725: LD_ADDR_VAR 0 4
52729: PUSH
52730: LD_VAR 0 1
52734: PUSH
52735: LD_INT 1
52737: ARRAY
52738: ST_TO_ADDR
// side := GetSide ( first ) ;
52739: LD_ADDR_VAR 0 6
52743: PUSH
52744: LD_VAR 0 4
52748: PPUSH
52749: CALL_OW 255
52753: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52754: LD_EXP 31
52758: PPUSH
52759: LD_INT 81
52761: PUSH
52762: LD_VAR 0 6
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PPUSH
52771: CALL_OW 70
52775: IFFALSE 52779
// exit ;
52777: GO 52834
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
52779: LD_ADDR_EXP 41
52783: PUSH
52784: LD_EXP 41
52788: PPUSH
52789: LD_VAR 0 6
52793: PPUSH
52794: LD_EXP 41
52798: PUSH
52799: LD_VAR 0 6
52803: ARRAY
52804: PUSH
52805: LD_INT 1
52807: PLUS
52808: PPUSH
52809: CALL_OW 1
52813: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
52814: LD_VAR 0 6
52818: PPUSH
52819: LD_EXP 41
52823: PUSH
52824: LD_VAR 0 6
52828: ARRAY
52829: PPUSH
52830: CALL_OW 506
// end ; end ;
52834: LD_VAR 0 2
52838: RET
// function UpdateCounter ; var i ; begin
52839: LD_INT 0
52841: PPUSH
52842: PPUSH
// result := [ ] ;
52843: LD_ADDR_VAR 0 1
52847: PUSH
52848: EMPTY
52849: ST_TO_ADDR
// if mpTeamGame then
52850: LD_EXP 9
52854: IFFALSE 52921
// begin for i := 1 to mpTeams do
52856: LD_ADDR_VAR 0 2
52860: PUSH
52861: DOUBLE
52862: LD_INT 1
52864: DEC
52865: ST_TO_ADDR
52866: LD_EXP 8
52870: PUSH
52871: FOR_TO
52872: IFFALSE 52917
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
52874: LD_ADDR_VAR 0 1
52878: PUSH
52879: LD_VAR 0 1
52883: PUSH
52884: LD_STRING #KingoftheHill-Team
52886: PUSH
52887: LD_VAR 0 2
52891: PUSH
52892: LD_EXP 41
52896: PUSH
52897: LD_VAR 0 2
52901: ARRAY
52902: PUSH
52903: LD_EXP 32
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: ADD
52914: ST_TO_ADDR
52915: GO 52871
52917: POP
52918: POP
// end else
52919: GO 52994
// begin for i := 1 to 8 do
52921: LD_ADDR_VAR 0 2
52925: PUSH
52926: DOUBLE
52927: LD_INT 1
52929: DEC
52930: ST_TO_ADDR
52931: LD_INT 8
52933: PUSH
52934: FOR_TO
52935: IFFALSE 52992
// if mpSidePositions [ i ] then
52937: LD_EXP 5
52941: PUSH
52942: LD_VAR 0 2
52946: ARRAY
52947: IFFALSE 52990
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
52949: LD_ADDR_VAR 0 1
52953: PUSH
52954: LD_VAR 0 1
52958: PUSH
52959: LD_STRING #KingoftheHill-Player
52961: PUSH
52962: LD_VAR 0 2
52966: PUSH
52967: LD_EXP 41
52971: PUSH
52972: LD_VAR 0 2
52976: ARRAY
52977: PUSH
52978: LD_EXP 32
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: ADD
52989: ST_TO_ADDR
52990: GO 52934
52992: POP
52993: POP
// end ; mpDisplayStrings := result ;
52994: LD_ADDR_EXP 35
52998: PUSH
52999: LD_VAR 0 1
53003: ST_TO_ADDR
// end ;
53004: LD_VAR 0 1
53008: RET
// export function HowMuchPointsKing ( side ) ; begin
53009: LD_INT 0
53011: PPUSH
// result := HowMuchPoints ( side ) ;
53012: LD_ADDR_VAR 0 2
53016: PUSH
53017: LD_VAR 0 1
53021: PPUSH
53022: CALL 53032 0 1
53026: ST_TO_ADDR
// end ;
53027: LD_VAR 0 2
53031: RET
// function HowMuchPoints ( side ) ; var i ; begin
53032: LD_INT 0
53034: PPUSH
53035: PPUSH
// if mpTeamGame then
53036: LD_EXP 9
53040: IFFALSE 53109
// begin for i := 1 to Count ( mpTeams ) do
53042: LD_ADDR_VAR 0 3
53046: PUSH
53047: DOUBLE
53048: LD_INT 1
53050: DEC
53051: ST_TO_ADDR
53052: LD_EXP 8
53056: PPUSH
53057: CALL 4910 0 1
53061: PUSH
53062: FOR_TO
53063: IFFALSE 53105
// begin if side in mpTeams [ i ] then
53065: LD_VAR 0 1
53069: PUSH
53070: LD_EXP 8
53074: PUSH
53075: LD_VAR 0 3
53079: ARRAY
53080: IN
53081: IFFALSE 53103
// begin result := mpKingPoints [ i ] ;
53083: LD_ADDR_VAR 0 2
53087: PUSH
53088: LD_EXP 41
53092: PUSH
53093: LD_VAR 0 3
53097: ARRAY
53098: ST_TO_ADDR
// exit ;
53099: POP
53100: POP
53101: GO 53125
// end ; end ;
53103: GO 53062
53105: POP
53106: POP
// end else
53107: GO 53125
// result := mpKingPoints [ side ] ;
53109: LD_ADDR_VAR 0 2
53113: PUSH
53114: LD_EXP 41
53118: PUSH
53119: LD_VAR 0 1
53123: ARRAY
53124: ST_TO_ADDR
// end ;
53125: LD_VAR 0 2
53129: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
53130: LD_EXP 36
53134: PUSH
53135: CALL 53457 0 0
53139: AND
53140: PUSH
53141: LD_OWVAR 4
53145: AND
53146: IFFALSE 53382
53148: GO 53150
53150: DISABLE
53151: LD_INT 0
53153: PPUSH
53154: PPUSH
// begin canWin := false ;
53155: LD_ADDR_VAR 0 2
53159: PUSH
53160: LD_INT 0
53162: ST_TO_ADDR
// if not HasPower ( your_side ) then
53163: LD_OWVAR 2
53167: PPUSH
53168: CALL 53497 0 1
53172: NOT
53173: IFFALSE 53184
// begin Multiplayer_Loose_Message ;
53175: CALL_OW 521
// enable ( mpLose ) ;
53179: LD_INT 102
53181: ENABLE_MARKED
// end else
53182: GO 53382
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
53184: LD_ADDR_VAR 0 2
53188: PUSH
53189: LD_OWVAR 2
53193: PPUSH
53194: CALL 53032 0 1
53198: PUSH
53199: LD_EXP 32
53203: GREATEREQUAL
53204: PUSH
53205: LD_OWVAR 2
53209: PPUSH
53210: CALL 53497 0 1
53214: AND
53215: PUSH
53216: CALL 53385 0 0
53220: NOT
53221: OR
53222: ST_TO_ADDR
// for i := 1 to 8 do
53223: LD_ADDR_VAR 0 1
53227: PUSH
53228: DOUBLE
53229: LD_INT 1
53231: DEC
53232: ST_TO_ADDR
53233: LD_INT 8
53235: PUSH
53236: FOR_TO
53237: IFFALSE 53368
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53239: LD_EXP 5
53243: PUSH
53244: LD_VAR 0 1
53248: ARRAY
53249: PUSH
53250: LD_VAR 0 1
53254: PPUSH
53255: CALL_OW 108
53259: AND
53260: PUSH
53261: LD_VAR 0 1
53265: PUSH
53266: LD_OWVAR 2
53270: NONEQUAL
53271: AND
53272: IFFALSE 53366
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53274: LD_EXP 6
53278: PUSH
53279: LD_VAR 0 1
53283: ARRAY
53284: NOT
53285: PUSH
53286: LD_EXP 6
53290: PUSH
53291: LD_VAR 0 1
53295: ARRAY
53296: PUSH
53297: LD_EXP 6
53301: PUSH
53302: LD_OWVAR 2
53306: ARRAY
53307: NONEQUAL
53308: PUSH
53309: LD_OWVAR 2
53313: PPUSH
53314: LD_VAR 0 1
53318: PPUSH
53319: CALL_OW 81
53323: PUSH
53324: LD_INT 1
53326: NONEQUAL
53327: AND
53328: OR
53329: IFFALSE 53366
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53331: LD_VAR 0 1
53335: PPUSH
53336: CALL 53032 0 1
53340: PUSH
53341: LD_EXP 32
53345: GREATEREQUAL
53346: PUSH
53347: LD_VAR 0 1
53351: PPUSH
53352: CALL 53497 0 1
53356: AND
53357: IFFALSE 53366
// begin enable ( mpLose ) ;
53359: LD_INT 102
53361: ENABLE_MARKED
// exit ;
53362: POP
53363: POP
53364: GO 53382
// end ;
53366: GO 53236
53368: POP
53369: POP
// if canWin then
53370: LD_VAR 0 2
53374: IFFALSE 53381
// enable ( mpWin ) else
53376: LD_INT 101
53378: ENABLE_MARKED
53379: GO 53382
// enable ;
53381: ENABLE
// end ; end ;
53382: PPOPN 2
53384: END
// function EnemiesInGame ; var i ; begin
53385: LD_INT 0
53387: PPUSH
53388: PPUSH
// result := false ;
53389: LD_ADDR_VAR 0 1
53393: PUSH
53394: LD_INT 0
53396: ST_TO_ADDR
// for i := 1 to 8 do
53397: LD_ADDR_VAR 0 2
53401: PUSH
53402: DOUBLE
53403: LD_INT 1
53405: DEC
53406: ST_TO_ADDR
53407: LD_INT 8
53409: PUSH
53410: FOR_TO
53411: IFFALSE 53450
// if i <> your_side and HasPower ( i ) then
53413: LD_VAR 0 2
53417: PUSH
53418: LD_OWVAR 2
53422: NONEQUAL
53423: PUSH
53424: LD_VAR 0 2
53428: PPUSH
53429: CALL 53497 0 1
53433: AND
53434: IFFALSE 53448
// begin result := true ;
53436: LD_ADDR_VAR 0 1
53440: PUSH
53441: LD_INT 1
53443: ST_TO_ADDR
// exit ;
53444: POP
53445: POP
53446: GO 53452
// end ;
53448: GO 53410
53450: POP
53451: POP
// end ;
53452: LD_VAR 0 1
53456: RET
// function CanWinLoose ; begin
53457: LD_INT 0
53459: PPUSH
// result := true ;
53460: LD_ADDR_VAR 0 1
53464: PUSH
53465: LD_INT 1
53467: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53468: CALL_OW 531
53472: PUSH
53473: CALL_OW 519
53477: PUSH
53478: LD_INT 1
53480: GREATER
53481: AND
53482: IFFALSE 53492
// result := false ;
53484: LD_ADDR_VAR 0 1
53488: PUSH
53489: LD_INT 0
53491: ST_TO_ADDR
// end ;
53492: LD_VAR 0 1
53496: RET
// function HasPower ( i ) ; begin
53497: LD_INT 0
53499: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53500: LD_ADDR_VAR 0 2
53504: PUSH
53505: LD_INT 22
53507: PUSH
53508: LD_VAR 0 1
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 2
53519: PUSH
53520: LD_INT 21
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 33
53532: PUSH
53533: LD_INT 3
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 33
53542: PUSH
53543: LD_INT 5
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PPUSH
53560: CALL_OW 69
53564: ST_TO_ADDR
// end ; end_of_file end_of_file
53565: LD_VAR 0 2
53569: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53570: LD_VAR 0 1
53574: PUSH
53575: LD_INT 200
53577: DOUBLE
53578: GREATEREQUAL
53579: IFFALSE 53587
53581: LD_INT 299
53583: DOUBLE
53584: LESSEQUAL
53585: IFTRUE 53589
53587: GO 53621
53589: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53590: LD_VAR 0 1
53594: PPUSH
53595: LD_VAR 0 2
53599: PPUSH
53600: LD_VAR 0 3
53604: PPUSH
53605: LD_VAR 0 4
53609: PPUSH
53610: LD_VAR 0 5
53614: PPUSH
53615: CALL 54318 0 5
53619: GO 53698
53621: LD_INT 300
53623: DOUBLE
53624: GREATEREQUAL
53625: IFFALSE 53633
53627: LD_INT 399
53629: DOUBLE
53630: LESSEQUAL
53631: IFTRUE 53635
53633: GO 53697
53635: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53636: LD_VAR 0 1
53640: PPUSH
53641: LD_VAR 0 2
53645: PPUSH
53646: LD_VAR 0 3
53650: PPUSH
53651: LD_VAR 0 4
53655: PPUSH
53656: LD_VAR 0 5
53660: PPUSH
53661: LD_VAR 0 6
53665: PPUSH
53666: LD_VAR 0 7
53670: PPUSH
53671: LD_VAR 0 8
53675: PPUSH
53676: LD_VAR 0 9
53680: PPUSH
53681: LD_VAR 0 10
53685: PPUSH
53686: LD_VAR 0 11
53690: PPUSH
53691: CALL 59065 0 11
53695: GO 53698
53697: POP
// end ;
53698: PPOPN 11
53700: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53701: LD_VAR 0 1
53705: PPUSH
53706: LD_VAR 0 2
53710: PPUSH
53711: LD_VAR 0 3
53715: PPUSH
53716: LD_VAR 0 4
53720: PPUSH
53721: LD_VAR 0 5
53725: PPUSH
53726: CALL 53783 0 5
// end ; end_of_file
53730: PPOPN 5
53732: END
// export function SOS_UnitDestroyed ( un ) ; begin
53733: LD_INT 0
53735: PPUSH
// ComRadiation ( un ) ;
53736: LD_VAR 0 1
53740: PPUSH
53741: CALL 54722 0 1
// end ;
53745: LD_VAR 0 2
53749: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53750: LD_INT 0
53752: PPUSH
// ComRadiation ( un ) ;
53753: LD_VAR 0 1
53757: PPUSH
53758: CALL 54722 0 1
// end ;
53762: LD_VAR 0 2
53766: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53767: LD_INT 0
53769: PPUSH
// end ;
53770: LD_VAR 0 4
53774: RET
// export function SOS_Command ( cmd ) ; begin
53775: LD_INT 0
53777: PPUSH
// end ;
53778: LD_VAR 0 2
53782: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53783: LD_INT 0
53785: PPUSH
// end ;
53786: LD_VAR 0 6
53790: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
53791: LD_INT 0
53793: PPUSH
53794: PPUSH
53795: PPUSH
53796: PPUSH
53797: PPUSH
// if not vehicle or not factory then
53798: LD_VAR 0 1
53802: NOT
53803: PUSH
53804: LD_VAR 0 2
53808: NOT
53809: OR
53810: IFFALSE 53814
// exit ;
53812: GO 54313
// if not factoryWaypoints then
53814: LD_EXP 52
53818: NOT
53819: IFFALSE 53823
// exit ;
53821: GO 54313
// for i := 1 to Count ( factoryWaypoints ) do
53823: LD_ADDR_VAR 0 4
53827: PUSH
53828: DOUBLE
53829: LD_INT 1
53831: DEC
53832: ST_TO_ADDR
53833: LD_EXP 52
53837: PPUSH
53838: CALL 4910 0 1
53842: PUSH
53843: FOR_TO
53844: IFFALSE 54311
// if factoryWaypoints [ i ] [ 2 ] = factory then
53846: LD_EXP 52
53850: PUSH
53851: LD_VAR 0 4
53855: ARRAY
53856: PUSH
53857: LD_INT 2
53859: ARRAY
53860: PUSH
53861: LD_VAR 0 2
53865: EQUAL
53866: IFFALSE 54309
// begin if GetControl ( vehicle ) = control_manual then
53868: LD_VAR 0 1
53872: PPUSH
53873: CALL_OW 263
53877: PUSH
53878: LD_INT 1
53880: EQUAL
53881: IFFALSE 54192
// begin driver := IsDrivenBy ( vehicle ) ;
53883: LD_ADDR_VAR 0 6
53887: PUSH
53888: LD_VAR 0 1
53892: PPUSH
53893: CALL_OW 311
53897: ST_TO_ADDR
// tag := GetTag ( driver ) ;
53898: LD_ADDR_VAR 0 5
53902: PUSH
53903: LD_VAR 0 6
53907: PPUSH
53908: CALL_OW 110
53912: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
53913: LD_VAR 0 5
53917: PUSH
53918: LD_INT 501
53920: EQUAL
53921: PUSH
53922: LD_VAR 0 1
53926: PPUSH
53927: CALL_OW 110
53931: PUSH
53932: LD_INT 501
53934: EQUAL
53935: OR
53936: IFFALSE 53942
// exit ;
53938: POP
53939: POP
53940: GO 54313
// if not HasTask ( driver ) then
53942: LD_VAR 0 6
53946: PPUSH
53947: CALL_OW 314
53951: NOT
53952: IFFALSE 54190
// begin SetTag ( driver , tDriver ) ;
53954: LD_VAR 0 6
53958: PPUSH
53959: LD_INT 501
53961: PPUSH
53962: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
53966: LD_VAR 0 1
53970: PPUSH
53971: LD_INT 501
53973: PPUSH
53974: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53978: LD_ADDR_VAR 0 7
53982: PUSH
53983: LD_EXP 52
53987: PUSH
53988: LD_VAR 0 4
53992: ARRAY
53993: PUSH
53994: LD_INT 3
53996: ARRAY
53997: PPUSH
53998: LD_EXP 52
54002: PUSH
54003: LD_VAR 0 4
54007: ARRAY
54008: PUSH
54009: LD_INT 4
54011: ARRAY
54012: PPUSH
54013: CALL_OW 428
54017: ST_TO_ADDR
// if hex then
54018: LD_VAR 0 7
54022: IFFALSE 54040
// ComMoveUnit ( driver , hex ) else
54024: LD_VAR 0 6
54028: PPUSH
54029: LD_VAR 0 7
54033: PPUSH
54034: CALL_OW 112
54038: GO 54079
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54040: LD_VAR 0 6
54044: PPUSH
54045: LD_EXP 52
54049: PUSH
54050: LD_VAR 0 4
54054: ARRAY
54055: PUSH
54056: LD_INT 3
54058: ARRAY
54059: PPUSH
54060: LD_EXP 52
54064: PUSH
54065: LD_VAR 0 4
54069: ARRAY
54070: PUSH
54071: LD_INT 4
54073: ARRAY
54074: PPUSH
54075: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54079: LD_VAR 0 6
54083: PPUSH
54084: CALL_OW 181
// if Multiplayer then
54088: LD_OWVAR 4
54092: IFFALSE 54141
// begin repeat wait ( 10 ) ;
54094: LD_INT 10
54096: PPUSH
54097: CALL_OW 67
// until not IsInUnit ( driver ) ;
54101: LD_VAR 0 6
54105: PPUSH
54106: CALL_OW 310
54110: NOT
54111: IFFALSE 54094
// if not HasTask ( driver ) then
54113: LD_VAR 0 6
54117: PPUSH
54118: CALL_OW 314
54122: NOT
54123: IFFALSE 54139
// ComEnterUnit ( driver , factory ) ;
54125: LD_VAR 0 6
54129: PPUSH
54130: LD_VAR 0 2
54134: PPUSH
54135: CALL_OW 120
// end else
54139: GO 54155
// AddComEnterUnit ( driver , factory ) ;
54141: LD_VAR 0 6
54145: PPUSH
54146: LD_VAR 0 2
54150: PPUSH
54151: CALL_OW 180
// wait ( 0 0$1 ) ;
54155: LD_INT 35
54157: PPUSH
54158: CALL_OW 67
// SetTag ( driver , tag ) ;
54162: LD_VAR 0 6
54166: PPUSH
54167: LD_VAR 0 5
54171: PPUSH
54172: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
54176: LD_VAR 0 1
54180: PPUSH
54181: LD_INT 0
54183: PPUSH
54184: CALL_OW 109
// break ;
54188: GO 54311
// end ; end else
54190: GO 54309
// if GetControl ( vehicle ) = control_remote then
54192: LD_VAR 0 1
54196: PPUSH
54197: CALL_OW 263
54201: PUSH
54202: LD_INT 2
54204: EQUAL
54205: IFFALSE 54268
// begin wait ( 0 0$2 ) ;
54207: LD_INT 70
54209: PPUSH
54210: CALL_OW 67
// if Connect ( vehicle ) then
54214: LD_VAR 0 1
54218: PPUSH
54219: CALL 11116 0 1
54223: IFFALSE 54264
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54225: LD_VAR 0 1
54229: PPUSH
54230: LD_EXP 52
54234: PUSH
54235: LD_VAR 0 4
54239: ARRAY
54240: PUSH
54241: LD_INT 3
54243: ARRAY
54244: PPUSH
54245: LD_EXP 52
54249: PUSH
54250: LD_VAR 0 4
54254: ARRAY
54255: PUSH
54256: LD_INT 4
54258: ARRAY
54259: PPUSH
54260: CALL_OW 171
// break ;
54264: GO 54311
// end else
54266: GO 54309
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54268: LD_VAR 0 1
54272: PPUSH
54273: LD_EXP 52
54277: PUSH
54278: LD_VAR 0 4
54282: ARRAY
54283: PUSH
54284: LD_INT 3
54286: ARRAY
54287: PPUSH
54288: LD_EXP 52
54292: PUSH
54293: LD_VAR 0 4
54297: ARRAY
54298: PUSH
54299: LD_INT 4
54301: ARRAY
54302: PPUSH
54303: CALL_OW 171
// break ;
54307: GO 54311
// end ; end ;
54309: GO 53843
54311: POP
54312: POP
// end ;
54313: LD_VAR 0 3
54317: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54318: LD_INT 0
54320: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54321: LD_VAR 0 1
54325: PUSH
54326: LD_INT 250
54328: EQUAL
54329: PUSH
54330: LD_VAR 0 2
54334: PPUSH
54335: CALL_OW 264
54339: PUSH
54340: LD_INT 81
54342: EQUAL
54343: AND
54344: IFFALSE 54365
// MinerPlaceMine ( unit , x , y ) ;
54346: LD_VAR 0 2
54350: PPUSH
54351: LD_VAR 0 4
54355: PPUSH
54356: LD_VAR 0 5
54360: PPUSH
54361: CALL 57457 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54365: LD_VAR 0 1
54369: PUSH
54370: LD_INT 251
54372: EQUAL
54373: PUSH
54374: LD_VAR 0 2
54378: PPUSH
54379: CALL_OW 264
54383: PUSH
54384: LD_INT 81
54386: EQUAL
54387: AND
54388: IFFALSE 54409
// MinerDetonateMine ( unit , x , y ) ;
54390: LD_VAR 0 2
54394: PPUSH
54395: LD_VAR 0 4
54399: PPUSH
54400: LD_VAR 0 5
54404: PPUSH
54405: CALL 57732 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54409: LD_VAR 0 1
54413: PUSH
54414: LD_INT 252
54416: EQUAL
54417: PUSH
54418: LD_VAR 0 2
54422: PPUSH
54423: CALL_OW 264
54427: PUSH
54428: LD_INT 81
54430: EQUAL
54431: AND
54432: IFFALSE 54453
// MinerCreateMinefield ( unit , x , y ) ;
54434: LD_VAR 0 2
54438: PPUSH
54439: LD_VAR 0 4
54443: PPUSH
54444: LD_VAR 0 5
54448: PPUSH
54449: CALL 58149 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54453: LD_VAR 0 1
54457: PUSH
54458: LD_INT 253
54460: EQUAL
54461: PUSH
54462: LD_VAR 0 2
54466: PPUSH
54467: CALL_OW 257
54471: PUSH
54472: LD_INT 5
54474: EQUAL
54475: AND
54476: IFFALSE 54497
// ComBinocular ( unit , x , y ) ;
54478: LD_VAR 0 2
54482: PPUSH
54483: LD_VAR 0 4
54487: PPUSH
54488: LD_VAR 0 5
54492: PPUSH
54493: CALL 58518 0 3
// if selectedUnit then
54497: LD_VAR 0 3
54501: IFFALSE 54557
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54503: LD_VAR 0 1
54507: PUSH
54508: LD_INT 254
54510: EQUAL
54511: PUSH
54512: LD_VAR 0 2
54516: PPUSH
54517: CALL_OW 264
54521: PUSH
54522: LD_INT 99
54524: EQUAL
54525: AND
54526: PUSH
54527: LD_VAR 0 3
54531: PPUSH
54532: CALL_OW 263
54536: PUSH
54537: LD_INT 3
54539: EQUAL
54540: AND
54541: IFFALSE 54557
// HackDestroyVehicle ( unit , selectedUnit ) ;
54543: LD_VAR 0 2
54547: PPUSH
54548: LD_VAR 0 3
54552: PPUSH
54553: CALL 56821 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54557: LD_VAR 0 1
54561: PUSH
54562: LD_INT 255
54564: EQUAL
54565: PUSH
54566: LD_VAR 0 2
54570: PPUSH
54571: CALL_OW 264
54575: PUSH
54576: LD_INT 14
54578: PUSH
54579: LD_INT 53
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: IN
54586: AND
54587: PUSH
54588: LD_VAR 0 4
54592: PPUSH
54593: LD_VAR 0 5
54597: PPUSH
54598: CALL_OW 488
54602: AND
54603: IFFALSE 54627
// CutTreeXYR ( unit , x , y , 12 ) ;
54605: LD_VAR 0 2
54609: PPUSH
54610: LD_VAR 0 4
54614: PPUSH
54615: LD_VAR 0 5
54619: PPUSH
54620: LD_INT 12
54622: PPUSH
54623: CALL 54818 0 4
// if cmd = 256 then
54627: LD_VAR 0 1
54631: PUSH
54632: LD_INT 256
54634: EQUAL
54635: IFFALSE 54656
// SetFactoryWaypoint ( unit , x , y ) ;
54637: LD_VAR 0 2
54641: PPUSH
54642: LD_VAR 0 4
54646: PPUSH
54647: LD_VAR 0 5
54651: PPUSH
54652: CALL 59073 0 3
// if cmd = 257 then
54656: LD_VAR 0 1
54660: PUSH
54661: LD_INT 257
54663: EQUAL
54664: IFFALSE 54685
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54666: LD_VAR 0 2
54670: PPUSH
54671: LD_VAR 0 4
54675: PPUSH
54676: LD_VAR 0 5
54680: PPUSH
54681: CALL 59563 0 3
// if cmd = 258 then
54685: LD_VAR 0 1
54689: PUSH
54690: LD_INT 258
54692: EQUAL
54693: IFFALSE 54717
// BurnTreeXYR ( unit , x , y , 8 ) ;
54695: LD_VAR 0 2
54699: PPUSH
54700: LD_VAR 0 4
54704: PPUSH
54705: LD_VAR 0 5
54709: PPUSH
54710: LD_INT 8
54712: PPUSH
54713: CALL 55212 0 4
// end ;
54717: LD_VAR 0 6
54721: RET
// export function ComRadiation ( un ) ; var eff ; begin
54722: LD_INT 0
54724: PPUSH
54725: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54726: LD_VAR 0 1
54730: PPUSH
54731: CALL_OW 264
54735: PUSH
54736: LD_INT 91
54738: NONEQUAL
54739: IFFALSE 54743
// exit ;
54741: GO 54813
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54743: LD_INT 68
54745: PPUSH
54746: LD_VAR 0 1
54750: PPUSH
54751: CALL_OW 255
54755: PPUSH
54756: CALL_OW 321
54760: PUSH
54761: LD_INT 2
54763: EQUAL
54764: IFFALSE 54776
// eff := 70 else
54766: LD_ADDR_VAR 0 3
54770: PUSH
54771: LD_INT 70
54773: ST_TO_ADDR
54774: GO 54784
// eff := 30 ;
54776: LD_ADDR_VAR 0 3
54780: PUSH
54781: LD_INT 30
54783: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54784: LD_VAR 0 1
54788: PPUSH
54789: CALL_OW 250
54793: PPUSH
54794: LD_VAR 0 1
54798: PPUSH
54799: CALL_OW 251
54803: PPUSH
54804: LD_VAR 0 3
54808: PPUSH
54809: CALL_OW 495
// end ;
54813: LD_VAR 0 2
54817: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54818: LD_INT 0
54820: PPUSH
54821: PPUSH
54822: PPUSH
54823: PPUSH
54824: PPUSH
54825: PPUSH
54826: PPUSH
54827: PPUSH
54828: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54829: LD_VAR 0 1
54833: PPUSH
54834: CALL_OW 302
54838: NOT
54839: PUSH
54840: LD_VAR 0 2
54844: PPUSH
54845: LD_VAR 0 3
54849: PPUSH
54850: CALL_OW 488
54854: NOT
54855: OR
54856: PUSH
54857: LD_VAR 0 4
54861: NOT
54862: OR
54863: IFFALSE 54867
// exit ;
54865: GO 55207
// list := [ ] ;
54867: LD_ADDR_VAR 0 13
54871: PUSH
54872: EMPTY
54873: ST_TO_ADDR
// if x - r < 0 then
54874: LD_VAR 0 2
54878: PUSH
54879: LD_VAR 0 4
54883: MINUS
54884: PUSH
54885: LD_INT 0
54887: LESS
54888: IFFALSE 54900
// min_x := 0 else
54890: LD_ADDR_VAR 0 7
54894: PUSH
54895: LD_INT 0
54897: ST_TO_ADDR
54898: GO 54916
// min_x := x - r ;
54900: LD_ADDR_VAR 0 7
54904: PUSH
54905: LD_VAR 0 2
54909: PUSH
54910: LD_VAR 0 4
54914: MINUS
54915: ST_TO_ADDR
// if y - r < 0 then
54916: LD_VAR 0 3
54920: PUSH
54921: LD_VAR 0 4
54925: MINUS
54926: PUSH
54927: LD_INT 0
54929: LESS
54930: IFFALSE 54942
// min_y := 0 else
54932: LD_ADDR_VAR 0 8
54936: PUSH
54937: LD_INT 0
54939: ST_TO_ADDR
54940: GO 54958
// min_y := y - r ;
54942: LD_ADDR_VAR 0 8
54946: PUSH
54947: LD_VAR 0 3
54951: PUSH
54952: LD_VAR 0 4
54956: MINUS
54957: ST_TO_ADDR
// max_x := x + r ;
54958: LD_ADDR_VAR 0 9
54962: PUSH
54963: LD_VAR 0 2
54967: PUSH
54968: LD_VAR 0 4
54972: PLUS
54973: ST_TO_ADDR
// max_y := y + r ;
54974: LD_ADDR_VAR 0 10
54978: PUSH
54979: LD_VAR 0 3
54983: PUSH
54984: LD_VAR 0 4
54988: PLUS
54989: ST_TO_ADDR
// for _x = min_x to max_x do
54990: LD_ADDR_VAR 0 11
54994: PUSH
54995: DOUBLE
54996: LD_VAR 0 7
55000: DEC
55001: ST_TO_ADDR
55002: LD_VAR 0 9
55006: PUSH
55007: FOR_TO
55008: IFFALSE 55125
// for _y = min_y to max_y do
55010: LD_ADDR_VAR 0 12
55014: PUSH
55015: DOUBLE
55016: LD_VAR 0 8
55020: DEC
55021: ST_TO_ADDR
55022: LD_VAR 0 10
55026: PUSH
55027: FOR_TO
55028: IFFALSE 55121
// begin if not ValidHex ( _x , _y ) then
55030: LD_VAR 0 11
55034: PPUSH
55035: LD_VAR 0 12
55039: PPUSH
55040: CALL_OW 488
55044: NOT
55045: IFFALSE 55049
// continue ;
55047: GO 55027
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55049: LD_VAR 0 11
55053: PPUSH
55054: LD_VAR 0 12
55058: PPUSH
55059: CALL_OW 351
55063: PUSH
55064: LD_VAR 0 11
55068: PPUSH
55069: LD_VAR 0 12
55073: PPUSH
55074: CALL_OW 554
55078: AND
55079: IFFALSE 55119
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55081: LD_ADDR_VAR 0 13
55085: PUSH
55086: LD_VAR 0 13
55090: PPUSH
55091: LD_VAR 0 13
55095: PUSH
55096: LD_INT 1
55098: PLUS
55099: PPUSH
55100: LD_VAR 0 11
55104: PUSH
55105: LD_VAR 0 12
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PPUSH
55114: CALL_OW 2
55118: ST_TO_ADDR
// end ;
55119: GO 55027
55121: POP
55122: POP
55123: GO 55007
55125: POP
55126: POP
// if not list then
55127: LD_VAR 0 13
55131: NOT
55132: IFFALSE 55136
// exit ;
55134: GO 55207
// for i in list do
55136: LD_ADDR_VAR 0 6
55140: PUSH
55141: LD_VAR 0 13
55145: PUSH
55146: FOR_IN
55147: IFFALSE 55205
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55149: LD_VAR 0 1
55153: PPUSH
55154: LD_STRING M
55156: PUSH
55157: LD_VAR 0 6
55161: PUSH
55162: LD_INT 1
55164: ARRAY
55165: PUSH
55166: LD_VAR 0 6
55170: PUSH
55171: LD_INT 2
55173: ARRAY
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: PUSH
55196: EMPTY
55197: LIST
55198: PPUSH
55199: CALL_OW 447
55203: GO 55146
55205: POP
55206: POP
// end ;
55207: LD_VAR 0 5
55211: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55212: LD_INT 0
55214: PPUSH
55215: PPUSH
55216: PPUSH
55217: PPUSH
55218: PPUSH
55219: PPUSH
55220: PPUSH
55221: PPUSH
55222: PPUSH
55223: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55224: LD_VAR 0 1
55228: PPUSH
55229: CALL_OW 302
55233: NOT
55234: PUSH
55235: LD_VAR 0 2
55239: PPUSH
55240: LD_VAR 0 3
55244: PPUSH
55245: CALL_OW 488
55249: NOT
55250: OR
55251: PUSH
55252: LD_VAR 0 4
55256: NOT
55257: OR
55258: IFFALSE 55262
// exit ;
55260: GO 55775
// list := [ ] ;
55262: LD_ADDR_VAR 0 13
55266: PUSH
55267: EMPTY
55268: ST_TO_ADDR
// if x - r < 0 then
55269: LD_VAR 0 2
55273: PUSH
55274: LD_VAR 0 4
55278: MINUS
55279: PUSH
55280: LD_INT 0
55282: LESS
55283: IFFALSE 55295
// min_x := 0 else
55285: LD_ADDR_VAR 0 7
55289: PUSH
55290: LD_INT 0
55292: ST_TO_ADDR
55293: GO 55311
// min_x := x - r ;
55295: LD_ADDR_VAR 0 7
55299: PUSH
55300: LD_VAR 0 2
55304: PUSH
55305: LD_VAR 0 4
55309: MINUS
55310: ST_TO_ADDR
// if y - r < 0 then
55311: LD_VAR 0 3
55315: PUSH
55316: LD_VAR 0 4
55320: MINUS
55321: PUSH
55322: LD_INT 0
55324: LESS
55325: IFFALSE 55337
// min_y := 0 else
55327: LD_ADDR_VAR 0 8
55331: PUSH
55332: LD_INT 0
55334: ST_TO_ADDR
55335: GO 55353
// min_y := y - r ;
55337: LD_ADDR_VAR 0 8
55341: PUSH
55342: LD_VAR 0 3
55346: PUSH
55347: LD_VAR 0 4
55351: MINUS
55352: ST_TO_ADDR
// max_x := x + r ;
55353: LD_ADDR_VAR 0 9
55357: PUSH
55358: LD_VAR 0 2
55362: PUSH
55363: LD_VAR 0 4
55367: PLUS
55368: ST_TO_ADDR
// max_y := y + r ;
55369: LD_ADDR_VAR 0 10
55373: PUSH
55374: LD_VAR 0 3
55378: PUSH
55379: LD_VAR 0 4
55383: PLUS
55384: ST_TO_ADDR
// for _x = min_x to max_x do
55385: LD_ADDR_VAR 0 11
55389: PUSH
55390: DOUBLE
55391: LD_VAR 0 7
55395: DEC
55396: ST_TO_ADDR
55397: LD_VAR 0 9
55401: PUSH
55402: FOR_TO
55403: IFFALSE 55520
// for _y = min_y to max_y do
55405: LD_ADDR_VAR 0 12
55409: PUSH
55410: DOUBLE
55411: LD_VAR 0 8
55415: DEC
55416: ST_TO_ADDR
55417: LD_VAR 0 10
55421: PUSH
55422: FOR_TO
55423: IFFALSE 55516
// begin if not ValidHex ( _x , _y ) then
55425: LD_VAR 0 11
55429: PPUSH
55430: LD_VAR 0 12
55434: PPUSH
55435: CALL_OW 488
55439: NOT
55440: IFFALSE 55444
// continue ;
55442: GO 55422
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55444: LD_VAR 0 11
55448: PPUSH
55449: LD_VAR 0 12
55453: PPUSH
55454: CALL_OW 351
55458: PUSH
55459: LD_VAR 0 11
55463: PPUSH
55464: LD_VAR 0 12
55468: PPUSH
55469: CALL_OW 554
55473: AND
55474: IFFALSE 55514
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55476: LD_ADDR_VAR 0 13
55480: PUSH
55481: LD_VAR 0 13
55485: PPUSH
55486: LD_VAR 0 13
55490: PUSH
55491: LD_INT 1
55493: PLUS
55494: PPUSH
55495: LD_VAR 0 11
55499: PUSH
55500: LD_VAR 0 12
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PPUSH
55509: CALL_OW 2
55513: ST_TO_ADDR
// end ;
55514: GO 55422
55516: POP
55517: POP
55518: GO 55402
55520: POP
55521: POP
// if not list then
55522: LD_VAR 0 13
55526: NOT
55527: IFFALSE 55531
// exit ;
55529: GO 55775
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55531: LD_ADDR_VAR 0 13
55535: PUSH
55536: LD_VAR 0 1
55540: PPUSH
55541: LD_VAR 0 13
55545: PPUSH
55546: LD_INT 1
55548: PPUSH
55549: LD_INT 1
55551: PPUSH
55552: CALL 8258 0 4
55556: ST_TO_ADDR
// ComStop ( flame ) ;
55557: LD_VAR 0 1
55561: PPUSH
55562: CALL_OW 141
// for i in list do
55566: LD_ADDR_VAR 0 6
55570: PUSH
55571: LD_VAR 0 13
55575: PUSH
55576: FOR_IN
55577: IFFALSE 55608
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55579: LD_VAR 0 1
55583: PPUSH
55584: LD_VAR 0 6
55588: PUSH
55589: LD_INT 1
55591: ARRAY
55592: PPUSH
55593: LD_VAR 0 6
55597: PUSH
55598: LD_INT 2
55600: ARRAY
55601: PPUSH
55602: CALL_OW 176
55606: GO 55576
55608: POP
55609: POP
// repeat wait ( 0 0$1 ) ;
55610: LD_INT 35
55612: PPUSH
55613: CALL_OW 67
// task := GetTaskList ( flame ) ;
55617: LD_ADDR_VAR 0 14
55621: PUSH
55622: LD_VAR 0 1
55626: PPUSH
55627: CALL_OW 437
55631: ST_TO_ADDR
// if not task then
55632: LD_VAR 0 14
55636: NOT
55637: IFFALSE 55641
// exit ;
55639: GO 55775
// if task [ 1 ] [ 1 ] <> | then
55641: LD_VAR 0 14
55645: PUSH
55646: LD_INT 1
55648: ARRAY
55649: PUSH
55650: LD_INT 1
55652: ARRAY
55653: PUSH
55654: LD_STRING |
55656: NONEQUAL
55657: IFFALSE 55661
// exit ;
55659: GO 55775
// _x := task [ 1 ] [ 2 ] ;
55661: LD_ADDR_VAR 0 11
55665: PUSH
55666: LD_VAR 0 14
55670: PUSH
55671: LD_INT 1
55673: ARRAY
55674: PUSH
55675: LD_INT 2
55677: ARRAY
55678: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55679: LD_ADDR_VAR 0 12
55683: PUSH
55684: LD_VAR 0 14
55688: PUSH
55689: LD_INT 1
55691: ARRAY
55692: PUSH
55693: LD_INT 3
55695: ARRAY
55696: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55697: LD_VAR 0 11
55701: PPUSH
55702: LD_VAR 0 12
55706: PPUSH
55707: CALL_OW 351
55711: NOT
55712: PUSH
55713: LD_VAR 0 11
55717: PPUSH
55718: LD_VAR 0 12
55722: PPUSH
55723: CALL_OW 554
55727: NOT
55728: OR
55729: IFFALSE 55763
// begin task := Delete ( task , 1 ) ;
55731: LD_ADDR_VAR 0 14
55735: PUSH
55736: LD_VAR 0 14
55740: PPUSH
55741: LD_INT 1
55743: PPUSH
55744: CALL_OW 3
55748: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55749: LD_VAR 0 1
55753: PPUSH
55754: LD_VAR 0 14
55758: PPUSH
55759: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55763: LD_VAR 0 1
55767: PPUSH
55768: CALL_OW 314
55772: NOT
55773: IFFALSE 55610
// end ;
55775: LD_VAR 0 5
55779: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55780: LD_EXP 42
55784: NOT
55785: IFFALSE 55835
55787: GO 55789
55789: DISABLE
// begin initHack := true ;
55790: LD_ADDR_EXP 42
55794: PUSH
55795: LD_INT 1
55797: ST_TO_ADDR
// hackTanks := [ ] ;
55798: LD_ADDR_EXP 43
55802: PUSH
55803: EMPTY
55804: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55805: LD_ADDR_EXP 44
55809: PUSH
55810: EMPTY
55811: ST_TO_ADDR
// hackLimit := 3 ;
55812: LD_ADDR_EXP 45
55816: PUSH
55817: LD_INT 3
55819: ST_TO_ADDR
// hackDist := 12 ;
55820: LD_ADDR_EXP 46
55824: PUSH
55825: LD_INT 12
55827: ST_TO_ADDR
// hackCounter := [ ] ;
55828: LD_ADDR_EXP 47
55832: PUSH
55833: EMPTY
55834: ST_TO_ADDR
// end ;
55835: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55836: LD_EXP 42
55840: PUSH
55841: LD_INT 34
55843: PUSH
55844: LD_INT 99
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PPUSH
55851: CALL_OW 69
55855: AND
55856: IFFALSE 56109
55858: GO 55860
55860: DISABLE
55861: LD_INT 0
55863: PPUSH
55864: PPUSH
// begin enable ;
55865: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55866: LD_ADDR_VAR 0 1
55870: PUSH
55871: LD_INT 34
55873: PUSH
55874: LD_INT 99
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PPUSH
55881: CALL_OW 69
55885: PUSH
55886: FOR_IN
55887: IFFALSE 56107
// begin if not i in hackTanks then
55889: LD_VAR 0 1
55893: PUSH
55894: LD_EXP 43
55898: IN
55899: NOT
55900: IFFALSE 55983
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55902: LD_ADDR_EXP 43
55906: PUSH
55907: LD_EXP 43
55911: PPUSH
55912: LD_EXP 43
55916: PUSH
55917: LD_INT 1
55919: PLUS
55920: PPUSH
55921: LD_VAR 0 1
55925: PPUSH
55926: CALL_OW 1
55930: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55931: LD_ADDR_EXP 44
55935: PUSH
55936: LD_EXP 44
55940: PPUSH
55941: LD_EXP 44
55945: PUSH
55946: LD_INT 1
55948: PLUS
55949: PPUSH
55950: EMPTY
55951: PPUSH
55952: CALL_OW 1
55956: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
55957: LD_ADDR_EXP 47
55961: PUSH
55962: LD_EXP 47
55966: PPUSH
55967: LD_EXP 47
55971: PUSH
55972: LD_INT 1
55974: PLUS
55975: PPUSH
55976: EMPTY
55977: PPUSH
55978: CALL_OW 1
55982: ST_TO_ADDR
// end ; if not IsOk ( i ) then
55983: LD_VAR 0 1
55987: PPUSH
55988: CALL_OW 302
55992: NOT
55993: IFFALSE 56006
// begin HackUnlinkAll ( i ) ;
55995: LD_VAR 0 1
55999: PPUSH
56000: CALL 56112 0 1
// continue ;
56004: GO 55886
// end ; HackCheckCapturedStatus ( i ) ;
56006: LD_VAR 0 1
56010: PPUSH
56011: CALL 56555 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56015: LD_ADDR_VAR 0 2
56019: PUSH
56020: LD_INT 81
56022: PUSH
56023: LD_VAR 0 1
56027: PPUSH
56028: CALL_OW 255
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 33
56039: PUSH
56040: LD_INT 3
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 91
56049: PUSH
56050: LD_VAR 0 1
56054: PUSH
56055: LD_EXP 46
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 50
56067: PUSH
56068: EMPTY
56069: LIST
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: PPUSH
56077: CALL_OW 69
56081: ST_TO_ADDR
// if not tmp then
56082: LD_VAR 0 2
56086: NOT
56087: IFFALSE 56091
// continue ;
56089: GO 55886
// HackLink ( i , tmp ) ;
56091: LD_VAR 0 1
56095: PPUSH
56096: LD_VAR 0 2
56100: PPUSH
56101: CALL 56248 0 2
// end ;
56105: GO 55886
56107: POP
56108: POP
// end ;
56109: PPOPN 2
56111: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56112: LD_INT 0
56114: PPUSH
56115: PPUSH
56116: PPUSH
// if not hack in hackTanks then
56117: LD_VAR 0 1
56121: PUSH
56122: LD_EXP 43
56126: IN
56127: NOT
56128: IFFALSE 56132
// exit ;
56130: GO 56243
// index := GetElementIndex ( hackTanks , hack ) ;
56132: LD_ADDR_VAR 0 4
56136: PUSH
56137: LD_EXP 43
56141: PPUSH
56142: LD_VAR 0 1
56146: PPUSH
56147: CALL 7555 0 2
56151: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56152: LD_EXP 44
56156: PUSH
56157: LD_VAR 0 4
56161: ARRAY
56162: IFFALSE 56243
// begin for i in hackTanksCaptured [ index ] do
56164: LD_ADDR_VAR 0 3
56168: PUSH
56169: LD_EXP 44
56173: PUSH
56174: LD_VAR 0 4
56178: ARRAY
56179: PUSH
56180: FOR_IN
56181: IFFALSE 56207
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56183: LD_VAR 0 3
56187: PUSH
56188: LD_INT 1
56190: ARRAY
56191: PPUSH
56192: LD_VAR 0 3
56196: PUSH
56197: LD_INT 2
56199: ARRAY
56200: PPUSH
56201: CALL_OW 235
56205: GO 56180
56207: POP
56208: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56209: LD_ADDR_EXP 44
56213: PUSH
56214: LD_EXP 44
56218: PPUSH
56219: LD_VAR 0 4
56223: PPUSH
56224: EMPTY
56225: PPUSH
56226: CALL_OW 1
56230: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56231: LD_VAR 0 1
56235: PPUSH
56236: LD_INT 0
56238: PPUSH
56239: CALL_OW 505
// end ; end ;
56243: LD_VAR 0 2
56247: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56248: LD_INT 0
56250: PPUSH
56251: PPUSH
56252: PPUSH
// if not hack in hackTanks or not vehicles then
56253: LD_VAR 0 1
56257: PUSH
56258: LD_EXP 43
56262: IN
56263: NOT
56264: PUSH
56265: LD_VAR 0 2
56269: NOT
56270: OR
56271: IFFALSE 56275
// exit ;
56273: GO 56550
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56275: LD_ADDR_VAR 0 2
56279: PUSH
56280: LD_VAR 0 1
56284: PPUSH
56285: LD_VAR 0 2
56289: PPUSH
56290: LD_INT 1
56292: PPUSH
56293: LD_INT 1
56295: PPUSH
56296: CALL 8205 0 4
56300: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56301: LD_ADDR_VAR 0 5
56305: PUSH
56306: LD_EXP 43
56310: PPUSH
56311: LD_VAR 0 1
56315: PPUSH
56316: CALL 7555 0 2
56320: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56321: LD_EXP 44
56325: PUSH
56326: LD_VAR 0 5
56330: ARRAY
56331: PUSH
56332: LD_EXP 45
56336: LESS
56337: IFFALSE 56526
// begin for i := 1 to vehicles do
56339: LD_ADDR_VAR 0 4
56343: PUSH
56344: DOUBLE
56345: LD_INT 1
56347: DEC
56348: ST_TO_ADDR
56349: LD_VAR 0 2
56353: PUSH
56354: FOR_TO
56355: IFFALSE 56524
// begin if hackTanksCaptured [ index ] = hackLimit then
56357: LD_EXP 44
56361: PUSH
56362: LD_VAR 0 5
56366: ARRAY
56367: PUSH
56368: LD_EXP 45
56372: EQUAL
56373: IFFALSE 56377
// break ;
56375: GO 56524
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56377: LD_ADDR_EXP 47
56381: PUSH
56382: LD_EXP 47
56386: PPUSH
56387: LD_VAR 0 5
56391: PPUSH
56392: LD_EXP 47
56396: PUSH
56397: LD_VAR 0 5
56401: ARRAY
56402: PUSH
56403: LD_INT 1
56405: PLUS
56406: PPUSH
56407: CALL_OW 1
56411: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56412: LD_ADDR_EXP 44
56416: PUSH
56417: LD_EXP 44
56421: PPUSH
56422: LD_VAR 0 5
56426: PUSH
56427: LD_EXP 44
56431: PUSH
56432: LD_VAR 0 5
56436: ARRAY
56437: PUSH
56438: LD_INT 1
56440: PLUS
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PPUSH
56446: LD_VAR 0 2
56450: PUSH
56451: LD_VAR 0 4
56455: ARRAY
56456: PUSH
56457: LD_VAR 0 2
56461: PUSH
56462: LD_VAR 0 4
56466: ARRAY
56467: PPUSH
56468: CALL_OW 255
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PPUSH
56477: CALL 7770 0 3
56481: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56482: LD_VAR 0 2
56486: PUSH
56487: LD_VAR 0 4
56491: ARRAY
56492: PPUSH
56493: LD_VAR 0 1
56497: PPUSH
56498: CALL_OW 255
56502: PPUSH
56503: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56507: LD_VAR 0 2
56511: PUSH
56512: LD_VAR 0 4
56516: ARRAY
56517: PPUSH
56518: CALL_OW 141
// end ;
56522: GO 56354
56524: POP
56525: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56526: LD_VAR 0 1
56530: PPUSH
56531: LD_EXP 44
56535: PUSH
56536: LD_VAR 0 5
56540: ARRAY
56541: PUSH
56542: LD_INT 0
56544: PLUS
56545: PPUSH
56546: CALL_OW 505
// end ;
56550: LD_VAR 0 3
56554: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56555: LD_INT 0
56557: PPUSH
56558: PPUSH
56559: PPUSH
56560: PPUSH
// if not hack in hackTanks then
56561: LD_VAR 0 1
56565: PUSH
56566: LD_EXP 43
56570: IN
56571: NOT
56572: IFFALSE 56576
// exit ;
56574: GO 56816
// index := GetElementIndex ( hackTanks , hack ) ;
56576: LD_ADDR_VAR 0 4
56580: PUSH
56581: LD_EXP 43
56585: PPUSH
56586: LD_VAR 0 1
56590: PPUSH
56591: CALL 7555 0 2
56595: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56596: LD_ADDR_VAR 0 3
56600: PUSH
56601: DOUBLE
56602: LD_EXP 44
56606: PUSH
56607: LD_VAR 0 4
56611: ARRAY
56612: INC
56613: ST_TO_ADDR
56614: LD_INT 1
56616: PUSH
56617: FOR_DOWNTO
56618: IFFALSE 56790
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56620: LD_ADDR_VAR 0 5
56624: PUSH
56625: LD_EXP 44
56629: PUSH
56630: LD_VAR 0 4
56634: ARRAY
56635: PUSH
56636: LD_VAR 0 3
56640: ARRAY
56641: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56642: LD_VAR 0 5
56646: PUSH
56647: LD_INT 1
56649: ARRAY
56650: PPUSH
56651: CALL_OW 302
56655: NOT
56656: PUSH
56657: LD_VAR 0 5
56661: PUSH
56662: LD_INT 1
56664: ARRAY
56665: PPUSH
56666: CALL_OW 255
56670: PUSH
56671: LD_VAR 0 1
56675: PPUSH
56676: CALL_OW 255
56680: NONEQUAL
56681: OR
56682: IFFALSE 56788
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56684: LD_VAR 0 5
56688: PUSH
56689: LD_INT 1
56691: ARRAY
56692: PPUSH
56693: CALL_OW 305
56697: PUSH
56698: LD_VAR 0 5
56702: PUSH
56703: LD_INT 1
56705: ARRAY
56706: PPUSH
56707: CALL_OW 255
56711: PUSH
56712: LD_VAR 0 1
56716: PPUSH
56717: CALL_OW 255
56721: EQUAL
56722: AND
56723: IFFALSE 56747
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56725: LD_VAR 0 5
56729: PUSH
56730: LD_INT 1
56732: ARRAY
56733: PPUSH
56734: LD_VAR 0 5
56738: PUSH
56739: LD_INT 2
56741: ARRAY
56742: PPUSH
56743: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56747: LD_ADDR_EXP 44
56751: PUSH
56752: LD_EXP 44
56756: PPUSH
56757: LD_VAR 0 4
56761: PPUSH
56762: LD_EXP 44
56766: PUSH
56767: LD_VAR 0 4
56771: ARRAY
56772: PPUSH
56773: LD_VAR 0 3
56777: PPUSH
56778: CALL_OW 3
56782: PPUSH
56783: CALL_OW 1
56787: ST_TO_ADDR
// end ; end ;
56788: GO 56617
56790: POP
56791: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56792: LD_VAR 0 1
56796: PPUSH
56797: LD_EXP 44
56801: PUSH
56802: LD_VAR 0 4
56806: ARRAY
56807: PUSH
56808: LD_INT 0
56810: PLUS
56811: PPUSH
56812: CALL_OW 505
// end ;
56816: LD_VAR 0 2
56820: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56821: LD_INT 0
56823: PPUSH
56824: PPUSH
56825: PPUSH
56826: PPUSH
// if not hack in hackTanks then
56827: LD_VAR 0 1
56831: PUSH
56832: LD_EXP 43
56836: IN
56837: NOT
56838: IFFALSE 56842
// exit ;
56840: GO 56927
// index := GetElementIndex ( hackTanks , hack ) ;
56842: LD_ADDR_VAR 0 5
56846: PUSH
56847: LD_EXP 43
56851: PPUSH
56852: LD_VAR 0 1
56856: PPUSH
56857: CALL 7555 0 2
56861: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56862: LD_ADDR_VAR 0 4
56866: PUSH
56867: DOUBLE
56868: LD_INT 1
56870: DEC
56871: ST_TO_ADDR
56872: LD_EXP 44
56876: PUSH
56877: LD_VAR 0 5
56881: ARRAY
56882: PUSH
56883: FOR_TO
56884: IFFALSE 56925
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56886: LD_EXP 44
56890: PUSH
56891: LD_VAR 0 5
56895: ARRAY
56896: PUSH
56897: LD_VAR 0 4
56901: ARRAY
56902: PUSH
56903: LD_INT 1
56905: ARRAY
56906: PUSH
56907: LD_VAR 0 2
56911: EQUAL
56912: IFFALSE 56923
// KillUnit ( vehicle ) ;
56914: LD_VAR 0 2
56918: PPUSH
56919: CALL_OW 66
56923: GO 56883
56925: POP
56926: POP
// end ;
56927: LD_VAR 0 3
56931: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
56932: LD_EXP 48
56936: NOT
56937: IFFALSE 56972
56939: GO 56941
56941: DISABLE
// begin initMiner := true ;
56942: LD_ADDR_EXP 48
56946: PUSH
56947: LD_INT 1
56949: ST_TO_ADDR
// minersList := [ ] ;
56950: LD_ADDR_EXP 49
56954: PUSH
56955: EMPTY
56956: ST_TO_ADDR
// minerMinesList := [ ] ;
56957: LD_ADDR_EXP 50
56961: PUSH
56962: EMPTY
56963: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
56964: LD_ADDR_EXP 51
56968: PUSH
56969: LD_INT 5
56971: ST_TO_ADDR
// end ;
56972: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
56973: LD_EXP 48
56977: PUSH
56978: LD_INT 34
56980: PUSH
56981: LD_INT 81
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PPUSH
56988: CALL_OW 69
56992: AND
56993: IFFALSE 57454
56995: GO 56997
56997: DISABLE
56998: LD_INT 0
57000: PPUSH
57001: PPUSH
57002: PPUSH
57003: PPUSH
// begin enable ;
57004: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57005: LD_ADDR_VAR 0 1
57009: PUSH
57010: LD_INT 34
57012: PUSH
57013: LD_INT 81
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PPUSH
57020: CALL_OW 69
57024: PUSH
57025: FOR_IN
57026: IFFALSE 57098
// begin if not i in minersList then
57028: LD_VAR 0 1
57032: PUSH
57033: LD_EXP 49
57037: IN
57038: NOT
57039: IFFALSE 57096
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57041: LD_ADDR_EXP 49
57045: PUSH
57046: LD_EXP 49
57050: PPUSH
57051: LD_EXP 49
57055: PUSH
57056: LD_INT 1
57058: PLUS
57059: PPUSH
57060: LD_VAR 0 1
57064: PPUSH
57065: CALL_OW 1
57069: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57070: LD_ADDR_EXP 50
57074: PUSH
57075: LD_EXP 50
57079: PPUSH
57080: LD_EXP 50
57084: PUSH
57085: LD_INT 1
57087: PLUS
57088: PPUSH
57089: EMPTY
57090: PPUSH
57091: CALL_OW 1
57095: ST_TO_ADDR
// end end ;
57096: GO 57025
57098: POP
57099: POP
// for i := minerMinesList downto 1 do
57100: LD_ADDR_VAR 0 1
57104: PUSH
57105: DOUBLE
57106: LD_EXP 50
57110: INC
57111: ST_TO_ADDR
57112: LD_INT 1
57114: PUSH
57115: FOR_DOWNTO
57116: IFFALSE 57452
// begin if IsLive ( minersList [ i ] ) then
57118: LD_EXP 49
57122: PUSH
57123: LD_VAR 0 1
57127: ARRAY
57128: PPUSH
57129: CALL_OW 300
57133: IFFALSE 57161
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57135: LD_EXP 49
57139: PUSH
57140: LD_VAR 0 1
57144: ARRAY
57145: PPUSH
57146: LD_EXP 50
57150: PUSH
57151: LD_VAR 0 1
57155: ARRAY
57156: PPUSH
57157: CALL_OW 505
// if not minerMinesList [ i ] then
57161: LD_EXP 50
57165: PUSH
57166: LD_VAR 0 1
57170: ARRAY
57171: NOT
57172: IFFALSE 57176
// continue ;
57174: GO 57115
// for j := minerMinesList [ i ] downto 1 do
57176: LD_ADDR_VAR 0 2
57180: PUSH
57181: DOUBLE
57182: LD_EXP 50
57186: PUSH
57187: LD_VAR 0 1
57191: ARRAY
57192: INC
57193: ST_TO_ADDR
57194: LD_INT 1
57196: PUSH
57197: FOR_DOWNTO
57198: IFFALSE 57448
// begin side := GetSide ( minersList [ i ] ) ;
57200: LD_ADDR_VAR 0 3
57204: PUSH
57205: LD_EXP 49
57209: PUSH
57210: LD_VAR 0 1
57214: ARRAY
57215: PPUSH
57216: CALL_OW 255
57220: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57221: LD_ADDR_VAR 0 4
57225: PUSH
57226: LD_EXP 50
57230: PUSH
57231: LD_VAR 0 1
57235: ARRAY
57236: PUSH
57237: LD_VAR 0 2
57241: ARRAY
57242: PUSH
57243: LD_INT 1
57245: ARRAY
57246: PPUSH
57247: LD_EXP 50
57251: PUSH
57252: LD_VAR 0 1
57256: ARRAY
57257: PUSH
57258: LD_VAR 0 2
57262: ARRAY
57263: PUSH
57264: LD_INT 2
57266: ARRAY
57267: PPUSH
57268: CALL_OW 428
57272: ST_TO_ADDR
// if not tmp then
57273: LD_VAR 0 4
57277: NOT
57278: IFFALSE 57282
// continue ;
57280: GO 57197
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57282: LD_VAR 0 4
57286: PUSH
57287: LD_INT 81
57289: PUSH
57290: LD_VAR 0 3
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PPUSH
57299: CALL_OW 69
57303: IN
57304: PUSH
57305: LD_EXP 50
57309: PUSH
57310: LD_VAR 0 1
57314: ARRAY
57315: PUSH
57316: LD_VAR 0 2
57320: ARRAY
57321: PUSH
57322: LD_INT 1
57324: ARRAY
57325: PPUSH
57326: LD_EXP 50
57330: PUSH
57331: LD_VAR 0 1
57335: ARRAY
57336: PUSH
57337: LD_VAR 0 2
57341: ARRAY
57342: PUSH
57343: LD_INT 2
57345: ARRAY
57346: PPUSH
57347: CALL_OW 458
57351: AND
57352: IFFALSE 57446
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57354: LD_EXP 50
57358: PUSH
57359: LD_VAR 0 1
57363: ARRAY
57364: PUSH
57365: LD_VAR 0 2
57369: ARRAY
57370: PUSH
57371: LD_INT 1
57373: ARRAY
57374: PPUSH
57375: LD_EXP 50
57379: PUSH
57380: LD_VAR 0 1
57384: ARRAY
57385: PUSH
57386: LD_VAR 0 2
57390: ARRAY
57391: PUSH
57392: LD_INT 2
57394: ARRAY
57395: PPUSH
57396: LD_VAR 0 3
57400: PPUSH
57401: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57405: LD_ADDR_EXP 50
57409: PUSH
57410: LD_EXP 50
57414: PPUSH
57415: LD_VAR 0 1
57419: PPUSH
57420: LD_EXP 50
57424: PUSH
57425: LD_VAR 0 1
57429: ARRAY
57430: PPUSH
57431: LD_VAR 0 2
57435: PPUSH
57436: CALL_OW 3
57440: PPUSH
57441: CALL_OW 1
57445: ST_TO_ADDR
// end ; end ;
57446: GO 57197
57448: POP
57449: POP
// end ;
57450: GO 57115
57452: POP
57453: POP
// end ;
57454: PPOPN 4
57456: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57457: LD_INT 0
57459: PPUSH
57460: PPUSH
// result := false ;
57461: LD_ADDR_VAR 0 4
57465: PUSH
57466: LD_INT 0
57468: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57469: LD_VAR 0 1
57473: PPUSH
57474: CALL_OW 264
57478: PUSH
57479: LD_INT 81
57481: EQUAL
57482: NOT
57483: IFFALSE 57487
// exit ;
57485: GO 57727
// index := GetElementIndex ( minersList , unit ) ;
57487: LD_ADDR_VAR 0 5
57491: PUSH
57492: LD_EXP 49
57496: PPUSH
57497: LD_VAR 0 1
57501: PPUSH
57502: CALL 7555 0 2
57506: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57507: LD_EXP 50
57511: PUSH
57512: LD_VAR 0 5
57516: ARRAY
57517: PUSH
57518: LD_EXP 51
57522: GREATEREQUAL
57523: IFFALSE 57527
// exit ;
57525: GO 57727
// ComMoveXY ( unit , x , y ) ;
57527: LD_VAR 0 1
57531: PPUSH
57532: LD_VAR 0 2
57536: PPUSH
57537: LD_VAR 0 3
57541: PPUSH
57542: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57546: LD_INT 35
57548: PPUSH
57549: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57553: LD_VAR 0 1
57557: PPUSH
57558: LD_VAR 0 2
57562: PPUSH
57563: LD_VAR 0 3
57567: PPUSH
57568: CALL 39316 0 3
57572: NOT
57573: PUSH
57574: LD_VAR 0 1
57578: PPUSH
57579: CALL_OW 314
57583: AND
57584: IFFALSE 57588
// exit ;
57586: GO 57727
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57588: LD_VAR 0 2
57592: PPUSH
57593: LD_VAR 0 3
57597: PPUSH
57598: CALL_OW 428
57602: PUSH
57603: LD_VAR 0 1
57607: EQUAL
57608: PUSH
57609: LD_VAR 0 1
57613: PPUSH
57614: CALL_OW 314
57618: NOT
57619: AND
57620: IFFALSE 57546
// PlaySoundXY ( x , y , PlantMine ) ;
57622: LD_VAR 0 2
57626: PPUSH
57627: LD_VAR 0 3
57631: PPUSH
57632: LD_STRING PlantMine
57634: PPUSH
57635: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57639: LD_VAR 0 2
57643: PPUSH
57644: LD_VAR 0 3
57648: PPUSH
57649: LD_VAR 0 1
57653: PPUSH
57654: CALL_OW 255
57658: PPUSH
57659: LD_INT 0
57661: PPUSH
57662: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57666: LD_ADDR_EXP 50
57670: PUSH
57671: LD_EXP 50
57675: PPUSH
57676: LD_VAR 0 5
57680: PUSH
57681: LD_EXP 50
57685: PUSH
57686: LD_VAR 0 5
57690: ARRAY
57691: PUSH
57692: LD_INT 1
57694: PLUS
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PPUSH
57700: LD_VAR 0 2
57704: PUSH
57705: LD_VAR 0 3
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PPUSH
57714: CALL 7770 0 3
57718: ST_TO_ADDR
// result := true ;
57719: LD_ADDR_VAR 0 4
57723: PUSH
57724: LD_INT 1
57726: ST_TO_ADDR
// end ;
57727: LD_VAR 0 4
57731: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57732: LD_INT 0
57734: PPUSH
57735: PPUSH
57736: PPUSH
// if not unit in minersList then
57737: LD_VAR 0 1
57741: PUSH
57742: LD_EXP 49
57746: IN
57747: NOT
57748: IFFALSE 57752
// exit ;
57750: GO 58144
// index := GetElementIndex ( minersList , unit ) ;
57752: LD_ADDR_VAR 0 6
57756: PUSH
57757: LD_EXP 49
57761: PPUSH
57762: LD_VAR 0 1
57766: PPUSH
57767: CALL 7555 0 2
57771: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57772: LD_ADDR_VAR 0 5
57776: PUSH
57777: DOUBLE
57778: LD_EXP 50
57782: PUSH
57783: LD_VAR 0 6
57787: ARRAY
57788: INC
57789: ST_TO_ADDR
57790: LD_INT 1
57792: PUSH
57793: FOR_DOWNTO
57794: IFFALSE 57955
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57796: LD_EXP 50
57800: PUSH
57801: LD_VAR 0 6
57805: ARRAY
57806: PUSH
57807: LD_VAR 0 5
57811: ARRAY
57812: PUSH
57813: LD_INT 1
57815: ARRAY
57816: PUSH
57817: LD_VAR 0 2
57821: EQUAL
57822: PUSH
57823: LD_EXP 50
57827: PUSH
57828: LD_VAR 0 6
57832: ARRAY
57833: PUSH
57834: LD_VAR 0 5
57838: ARRAY
57839: PUSH
57840: LD_INT 2
57842: ARRAY
57843: PUSH
57844: LD_VAR 0 3
57848: EQUAL
57849: AND
57850: IFFALSE 57953
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57852: LD_EXP 50
57856: PUSH
57857: LD_VAR 0 6
57861: ARRAY
57862: PUSH
57863: LD_VAR 0 5
57867: ARRAY
57868: PUSH
57869: LD_INT 1
57871: ARRAY
57872: PPUSH
57873: LD_EXP 50
57877: PUSH
57878: LD_VAR 0 6
57882: ARRAY
57883: PUSH
57884: LD_VAR 0 5
57888: ARRAY
57889: PUSH
57890: LD_INT 2
57892: ARRAY
57893: PPUSH
57894: LD_VAR 0 1
57898: PPUSH
57899: CALL_OW 255
57903: PPUSH
57904: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57908: LD_ADDR_EXP 50
57912: PUSH
57913: LD_EXP 50
57917: PPUSH
57918: LD_VAR 0 6
57922: PPUSH
57923: LD_EXP 50
57927: PUSH
57928: LD_VAR 0 6
57932: ARRAY
57933: PPUSH
57934: LD_VAR 0 5
57938: PPUSH
57939: CALL_OW 3
57943: PPUSH
57944: CALL_OW 1
57948: ST_TO_ADDR
// exit ;
57949: POP
57950: POP
57951: GO 58144
// end ; end ;
57953: GO 57793
57955: POP
57956: POP
// for i := minerMinesList [ index ] downto 1 do
57957: LD_ADDR_VAR 0 5
57961: PUSH
57962: DOUBLE
57963: LD_EXP 50
57967: PUSH
57968: LD_VAR 0 6
57972: ARRAY
57973: INC
57974: ST_TO_ADDR
57975: LD_INT 1
57977: PUSH
57978: FOR_DOWNTO
57979: IFFALSE 58142
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
57981: LD_EXP 50
57985: PUSH
57986: LD_VAR 0 6
57990: ARRAY
57991: PUSH
57992: LD_VAR 0 5
57996: ARRAY
57997: PUSH
57998: LD_INT 1
58000: ARRAY
58001: PPUSH
58002: LD_EXP 50
58006: PUSH
58007: LD_VAR 0 6
58011: ARRAY
58012: PUSH
58013: LD_VAR 0 5
58017: ARRAY
58018: PUSH
58019: LD_INT 2
58021: ARRAY
58022: PPUSH
58023: LD_VAR 0 2
58027: PPUSH
58028: LD_VAR 0 3
58032: PPUSH
58033: CALL_OW 298
58037: PUSH
58038: LD_INT 6
58040: LESS
58041: IFFALSE 58140
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58043: LD_EXP 50
58047: PUSH
58048: LD_VAR 0 6
58052: ARRAY
58053: PUSH
58054: LD_VAR 0 5
58058: ARRAY
58059: PUSH
58060: LD_INT 1
58062: ARRAY
58063: PPUSH
58064: LD_EXP 50
58068: PUSH
58069: LD_VAR 0 6
58073: ARRAY
58074: PUSH
58075: LD_VAR 0 5
58079: ARRAY
58080: PUSH
58081: LD_INT 2
58083: ARRAY
58084: PPUSH
58085: LD_VAR 0 1
58089: PPUSH
58090: CALL_OW 255
58094: PPUSH
58095: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58099: LD_ADDR_EXP 50
58103: PUSH
58104: LD_EXP 50
58108: PPUSH
58109: LD_VAR 0 6
58113: PPUSH
58114: LD_EXP 50
58118: PUSH
58119: LD_VAR 0 6
58123: ARRAY
58124: PPUSH
58125: LD_VAR 0 5
58129: PPUSH
58130: CALL_OW 3
58134: PPUSH
58135: CALL_OW 1
58139: ST_TO_ADDR
// end ; end ;
58140: GO 57978
58142: POP
58143: POP
// end ;
58144: LD_VAR 0 4
58148: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58149: LD_INT 0
58151: PPUSH
58152: PPUSH
58153: PPUSH
58154: PPUSH
58155: PPUSH
58156: PPUSH
58157: PPUSH
58158: PPUSH
58159: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58160: LD_VAR 0 1
58164: PPUSH
58165: CALL_OW 264
58169: PUSH
58170: LD_INT 81
58172: EQUAL
58173: NOT
58174: PUSH
58175: LD_VAR 0 1
58179: PUSH
58180: LD_EXP 49
58184: IN
58185: NOT
58186: OR
58187: IFFALSE 58191
// exit ;
58189: GO 58513
// index := GetElementIndex ( minersList , unit ) ;
58191: LD_ADDR_VAR 0 6
58195: PUSH
58196: LD_EXP 49
58200: PPUSH
58201: LD_VAR 0 1
58205: PPUSH
58206: CALL 7555 0 2
58210: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58211: LD_ADDR_VAR 0 8
58215: PUSH
58216: LD_EXP 51
58220: PUSH
58221: LD_EXP 50
58225: PUSH
58226: LD_VAR 0 6
58230: ARRAY
58231: MINUS
58232: ST_TO_ADDR
// if not minesFreeAmount then
58233: LD_VAR 0 8
58237: NOT
58238: IFFALSE 58242
// exit ;
58240: GO 58513
// tmp := [ ] ;
58242: LD_ADDR_VAR 0 7
58246: PUSH
58247: EMPTY
58248: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58249: LD_ADDR_VAR 0 5
58253: PUSH
58254: DOUBLE
58255: LD_INT 1
58257: DEC
58258: ST_TO_ADDR
58259: LD_VAR 0 8
58263: PUSH
58264: FOR_TO
58265: IFFALSE 58460
// begin _d := rand ( 0 , 5 ) ;
58267: LD_ADDR_VAR 0 11
58271: PUSH
58272: LD_INT 0
58274: PPUSH
58275: LD_INT 5
58277: PPUSH
58278: CALL_OW 12
58282: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58283: LD_ADDR_VAR 0 12
58287: PUSH
58288: LD_INT 2
58290: PPUSH
58291: LD_INT 6
58293: PPUSH
58294: CALL_OW 12
58298: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58299: LD_ADDR_VAR 0 9
58303: PUSH
58304: LD_VAR 0 2
58308: PPUSH
58309: LD_VAR 0 11
58313: PPUSH
58314: LD_VAR 0 12
58318: PPUSH
58319: CALL_OW 272
58323: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58324: LD_ADDR_VAR 0 10
58328: PUSH
58329: LD_VAR 0 3
58333: PPUSH
58334: LD_VAR 0 11
58338: PPUSH
58339: LD_VAR 0 12
58343: PPUSH
58344: CALL_OW 273
58348: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58349: LD_VAR 0 9
58353: PPUSH
58354: LD_VAR 0 10
58358: PPUSH
58359: CALL_OW 488
58363: PUSH
58364: LD_VAR 0 9
58368: PUSH
58369: LD_VAR 0 10
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_VAR 0 7
58382: IN
58383: NOT
58384: AND
58385: PUSH
58386: LD_VAR 0 9
58390: PPUSH
58391: LD_VAR 0 10
58395: PPUSH
58396: CALL_OW 458
58400: NOT
58401: AND
58402: IFFALSE 58444
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58404: LD_ADDR_VAR 0 7
58408: PUSH
58409: LD_VAR 0 7
58413: PPUSH
58414: LD_VAR 0 7
58418: PUSH
58419: LD_INT 1
58421: PLUS
58422: PPUSH
58423: LD_VAR 0 9
58427: PUSH
58428: LD_VAR 0 10
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PPUSH
58437: CALL_OW 1
58441: ST_TO_ADDR
58442: GO 58458
// i := i - 1 ;
58444: LD_ADDR_VAR 0 5
58448: PUSH
58449: LD_VAR 0 5
58453: PUSH
58454: LD_INT 1
58456: MINUS
58457: ST_TO_ADDR
// end ;
58458: GO 58264
58460: POP
58461: POP
// for i in tmp do
58462: LD_ADDR_VAR 0 5
58466: PUSH
58467: LD_VAR 0 7
58471: PUSH
58472: FOR_IN
58473: IFFALSE 58511
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58475: LD_VAR 0 1
58479: PPUSH
58480: LD_VAR 0 5
58484: PUSH
58485: LD_INT 1
58487: ARRAY
58488: PPUSH
58489: LD_VAR 0 5
58493: PUSH
58494: LD_INT 2
58496: ARRAY
58497: PPUSH
58498: CALL 57457 0 3
58502: NOT
58503: IFFALSE 58509
// exit ;
58505: POP
58506: POP
58507: GO 58513
58509: GO 58472
58511: POP
58512: POP
// end ;
58513: LD_VAR 0 4
58517: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58518: LD_INT 0
58520: PPUSH
58521: PPUSH
58522: PPUSH
58523: PPUSH
58524: PPUSH
58525: PPUSH
58526: PPUSH
58527: PPUSH
58528: PPUSH
// if GetClass ( unit ) <> class_sniper then
58529: LD_VAR 0 1
58533: PPUSH
58534: CALL_OW 257
58538: PUSH
58539: LD_INT 5
58541: NONEQUAL
58542: IFFALSE 58546
// exit ;
58544: GO 59012
// dist := 8 ;
58546: LD_ADDR_VAR 0 5
58550: PUSH
58551: LD_INT 8
58553: ST_TO_ADDR
// viewRange := 12 ;
58554: LD_ADDR_VAR 0 8
58558: PUSH
58559: LD_INT 12
58561: ST_TO_ADDR
// side := GetSide ( unit ) ;
58562: LD_ADDR_VAR 0 6
58566: PUSH
58567: LD_VAR 0 1
58571: PPUSH
58572: CALL_OW 255
58576: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58577: LD_INT 61
58579: PPUSH
58580: LD_VAR 0 6
58584: PPUSH
58585: CALL_OW 321
58589: PUSH
58590: LD_INT 2
58592: EQUAL
58593: IFFALSE 58603
// viewRange := 16 ;
58595: LD_ADDR_VAR 0 8
58599: PUSH
58600: LD_INT 16
58602: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58603: LD_VAR 0 1
58607: PPUSH
58608: LD_VAR 0 2
58612: PPUSH
58613: LD_VAR 0 3
58617: PPUSH
58618: CALL_OW 297
58622: PUSH
58623: LD_VAR 0 5
58627: GREATER
58628: IFFALSE 58707
// begin ComMoveXY ( unit , x , y ) ;
58630: LD_VAR 0 1
58634: PPUSH
58635: LD_VAR 0 2
58639: PPUSH
58640: LD_VAR 0 3
58644: PPUSH
58645: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58649: LD_INT 35
58651: PPUSH
58652: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58656: LD_VAR 0 1
58660: PPUSH
58661: LD_VAR 0 2
58665: PPUSH
58666: LD_VAR 0 3
58670: PPUSH
58671: CALL 39316 0 3
58675: NOT
58676: IFFALSE 58680
// exit ;
58678: GO 59012
// until GetDistUnitXY ( unit , x , y ) < dist ;
58680: LD_VAR 0 1
58684: PPUSH
58685: LD_VAR 0 2
58689: PPUSH
58690: LD_VAR 0 3
58694: PPUSH
58695: CALL_OW 297
58699: PUSH
58700: LD_VAR 0 5
58704: LESS
58705: IFFALSE 58649
// end ; ComTurnXY ( unit , x , y ) ;
58707: LD_VAR 0 1
58711: PPUSH
58712: LD_VAR 0 2
58716: PPUSH
58717: LD_VAR 0 3
58721: PPUSH
58722: CALL_OW 118
// repeat if Multiplayer then
58726: LD_OWVAR 4
58730: IFFALSE 58741
// wait ( 35 ) else
58732: LD_INT 35
58734: PPUSH
58735: CALL_OW 67
58739: GO 58748
// wait ( 5 ) ;
58741: LD_INT 5
58743: PPUSH
58744: CALL_OW 67
// _d := GetDir ( unit ) ;
58748: LD_ADDR_VAR 0 11
58752: PUSH
58753: LD_VAR 0 1
58757: PPUSH
58758: CALL_OW 254
58762: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58763: LD_ADDR_VAR 0 7
58767: PUSH
58768: LD_VAR 0 1
58772: PPUSH
58773: CALL_OW 250
58777: PPUSH
58778: LD_VAR 0 1
58782: PPUSH
58783: CALL_OW 251
58787: PPUSH
58788: LD_VAR 0 2
58792: PPUSH
58793: LD_VAR 0 3
58797: PPUSH
58798: CALL 41924 0 4
58802: ST_TO_ADDR
// until dir = _d ;
58803: LD_VAR 0 7
58807: PUSH
58808: LD_VAR 0 11
58812: EQUAL
58813: IFFALSE 58726
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58815: LD_ADDR_VAR 0 9
58819: PUSH
58820: LD_VAR 0 1
58824: PPUSH
58825: CALL_OW 250
58829: PPUSH
58830: LD_VAR 0 7
58834: PPUSH
58835: LD_VAR 0 5
58839: PPUSH
58840: CALL_OW 272
58844: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58845: LD_ADDR_VAR 0 10
58849: PUSH
58850: LD_VAR 0 1
58854: PPUSH
58855: CALL_OW 251
58859: PPUSH
58860: LD_VAR 0 7
58864: PPUSH
58865: LD_VAR 0 5
58869: PPUSH
58870: CALL_OW 273
58874: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58875: LD_VAR 0 9
58879: PPUSH
58880: LD_VAR 0 10
58884: PPUSH
58885: CALL_OW 488
58889: NOT
58890: IFFALSE 58894
// exit ;
58892: GO 59012
// ComAnimCustom ( unit , 1 ) ;
58894: LD_VAR 0 1
58898: PPUSH
58899: LD_INT 1
58901: PPUSH
58902: CALL_OW 592
// p := 0 ;
58906: LD_ADDR_VAR 0 12
58910: PUSH
58911: LD_INT 0
58913: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58914: LD_VAR 0 9
58918: PPUSH
58919: LD_VAR 0 10
58923: PPUSH
58924: LD_VAR 0 6
58928: PPUSH
58929: LD_VAR 0 8
58933: PPUSH
58934: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
58938: LD_INT 35
58940: PPUSH
58941: CALL_OW 67
// p := Inc ( p ) ;
58945: LD_ADDR_VAR 0 12
58949: PUSH
58950: LD_VAR 0 12
58954: PPUSH
58955: CALL 41880 0 1
58959: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
58960: LD_VAR 0 12
58964: PUSH
58965: LD_INT 3
58967: EQUAL
58968: PUSH
58969: LD_VAR 0 1
58973: PPUSH
58974: CALL_OW 302
58978: NOT
58979: OR
58980: PUSH
58981: LD_VAR 0 1
58985: PPUSH
58986: CALL_OW 301
58990: OR
58991: IFFALSE 58938
// RemoveSeeing ( _x , _y , side ) ;
58993: LD_VAR 0 9
58997: PPUSH
58998: LD_VAR 0 10
59002: PPUSH
59003: LD_VAR 0 6
59007: PPUSH
59008: CALL_OW 331
// end ; end_of_file
59012: LD_VAR 0 4
59016: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59017: PPOPN 6
59019: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
59020: CALL 59049 0 0
// end ; end_of_file
59024: PPOPN 1
59026: END
// every 0 0$1 do
59027: GO 59029
59029: DISABLE
// begin enable ;
59030: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59031: LD_STRING updateTimer(
59033: PUSH
59034: LD_OWVAR 1
59038: STR
59039: PUSH
59040: LD_STRING );
59042: STR
59043: PPUSH
59044: CALL_OW 559
// end ;
59048: END
// export function SOS_MapStart ( ) ; begin
59049: LD_INT 0
59051: PPUSH
// UpdateFactoryWaypoints ( ) ;
59052: CALL 59421 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59056: CALL 59673 0 0
// end ;
59060: LD_VAR 0 1
59064: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59065: LD_INT 0
59067: PPUSH
// end ;
59068: LD_VAR 0 12
59072: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59073: LD_INT 0
59075: PPUSH
59076: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59077: LD_VAR 0 1
59081: NOT
59082: PUSH
59083: LD_VAR 0 2
59087: PPUSH
59088: LD_VAR 0 3
59092: PPUSH
59093: CALL_OW 488
59097: NOT
59098: OR
59099: PUSH
59100: LD_VAR 0 1
59104: PPUSH
59105: CALL_OW 266
59109: PUSH
59110: LD_INT 3
59112: NONEQUAL
59113: PUSH
59114: LD_VAR 0 1
59118: PPUSH
59119: CALL_OW 247
59123: PUSH
59124: LD_INT 1
59126: EQUAL
59127: NOT
59128: AND
59129: OR
59130: IFFALSE 59134
// exit ;
59132: GO 59416
// if GetType ( factory ) = unit_human then
59134: LD_VAR 0 1
59138: PPUSH
59139: CALL_OW 247
59143: PUSH
59144: LD_INT 1
59146: EQUAL
59147: IFFALSE 59164
// factory := IsInUnit ( factory ) ;
59149: LD_ADDR_VAR 0 1
59153: PUSH
59154: LD_VAR 0 1
59158: PPUSH
59159: CALL_OW 310
59163: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59164: LD_VAR 0 1
59168: PPUSH
59169: CALL_OW 266
59173: PUSH
59174: LD_INT 3
59176: NONEQUAL
59177: IFFALSE 59181
// exit ;
59179: GO 59416
// for i := 1 to Count ( factoryWaypoints ) do
59181: LD_ADDR_VAR 0 5
59185: PUSH
59186: DOUBLE
59187: LD_INT 1
59189: DEC
59190: ST_TO_ADDR
59191: LD_EXP 52
59195: PPUSH
59196: CALL 4910 0 1
59200: PUSH
59201: FOR_TO
59202: IFFALSE 59364
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59204: LD_VAR 0 2
59208: PPUSH
59209: LD_VAR 0 3
59213: PPUSH
59214: CALL_OW 428
59218: PUSH
59219: LD_EXP 52
59223: PUSH
59224: LD_VAR 0 5
59228: ARRAY
59229: PUSH
59230: LD_INT 2
59232: ARRAY
59233: EQUAL
59234: IFFALSE 59266
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59236: LD_ADDR_EXP 52
59240: PUSH
59241: LD_EXP 52
59245: PPUSH
59246: LD_VAR 0 5
59250: PPUSH
59251: CALL_OW 3
59255: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59256: CALL 59421 0 0
// exit ;
59260: POP
59261: POP
59262: GO 59416
// end else
59264: GO 59362
// if factory = factoryWaypoints [ i ] [ 2 ] then
59266: LD_VAR 0 1
59270: PUSH
59271: LD_EXP 52
59275: PUSH
59276: LD_VAR 0 5
59280: ARRAY
59281: PUSH
59282: LD_INT 2
59284: ARRAY
59285: EQUAL
59286: IFFALSE 59362
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59288: LD_ADDR_EXP 52
59292: PUSH
59293: LD_EXP 52
59297: PPUSH
59298: LD_VAR 0 5
59302: PPUSH
59303: CALL_OW 3
59307: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59308: LD_ADDR_EXP 52
59312: PUSH
59313: LD_EXP 52
59317: PPUSH
59318: LD_VAR 0 1
59322: PPUSH
59323: CALL_OW 255
59327: PUSH
59328: LD_VAR 0 1
59332: PUSH
59333: LD_VAR 0 2
59337: PUSH
59338: LD_VAR 0 3
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: PPUSH
59349: CALL 40519 0 2
59353: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59354: CALL 59421 0 0
// exit ;
59358: POP
59359: POP
59360: GO 59416
// end ; end ;
59362: GO 59201
59364: POP
59365: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59366: LD_ADDR_EXP 52
59370: PUSH
59371: LD_EXP 52
59375: PPUSH
59376: LD_VAR 0 1
59380: PPUSH
59381: CALL_OW 255
59385: PUSH
59386: LD_VAR 0 1
59390: PUSH
59391: LD_VAR 0 2
59395: PUSH
59396: LD_VAR 0 3
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: PPUSH
59407: CALL 40519 0 2
59411: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59412: CALL 59421 0 0
// end ;
59416: LD_VAR 0 4
59420: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59421: LD_INT 0
59423: PPUSH
59424: PPUSH
59425: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59426: LD_STRING resetFactoryWaypoint();
59428: PPUSH
59429: CALL_OW 559
// if factoryWaypoints then
59433: LD_EXP 52
59437: IFFALSE 59558
// begin list := factoryWaypoints ;
59439: LD_ADDR_VAR 0 3
59443: PUSH
59444: LD_EXP 52
59448: ST_TO_ADDR
// for i := 1 to list do
59449: LD_ADDR_VAR 0 2
59453: PUSH
59454: DOUBLE
59455: LD_INT 1
59457: DEC
59458: ST_TO_ADDR
59459: LD_VAR 0 3
59463: PUSH
59464: FOR_TO
59465: IFFALSE 59556
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59467: LD_STRING setFactoryWaypointXY(
59469: PUSH
59470: LD_VAR 0 3
59474: PUSH
59475: LD_VAR 0 2
59479: ARRAY
59480: PUSH
59481: LD_INT 1
59483: ARRAY
59484: STR
59485: PUSH
59486: LD_STRING ,
59488: STR
59489: PUSH
59490: LD_VAR 0 3
59494: PUSH
59495: LD_VAR 0 2
59499: ARRAY
59500: PUSH
59501: LD_INT 2
59503: ARRAY
59504: STR
59505: PUSH
59506: LD_STRING ,
59508: STR
59509: PUSH
59510: LD_VAR 0 3
59514: PUSH
59515: LD_VAR 0 2
59519: ARRAY
59520: PUSH
59521: LD_INT 3
59523: ARRAY
59524: STR
59525: PUSH
59526: LD_STRING ,
59528: STR
59529: PUSH
59530: LD_VAR 0 3
59534: PUSH
59535: LD_VAR 0 2
59539: ARRAY
59540: PUSH
59541: LD_INT 4
59543: ARRAY
59544: STR
59545: PUSH
59546: LD_STRING )
59548: STR
59549: PPUSH
59550: CALL_OW 559
59554: GO 59464
59556: POP
59557: POP
// end ; end ;
59558: LD_VAR 0 1
59562: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59563: LD_INT 0
59565: PPUSH
// if HexInfo ( x , y ) = warehouse then
59566: LD_VAR 0 2
59570: PPUSH
59571: LD_VAR 0 3
59575: PPUSH
59576: CALL_OW 428
59580: PUSH
59581: LD_VAR 0 1
59585: EQUAL
59586: IFFALSE 59613
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59588: LD_ADDR_EXP 53
59592: PUSH
59593: LD_EXP 53
59597: PPUSH
59598: LD_VAR 0 1
59602: PPUSH
59603: LD_INT 0
59605: PPUSH
59606: CALL_OW 1
59610: ST_TO_ADDR
59611: GO 59664
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59613: LD_ADDR_EXP 53
59617: PUSH
59618: LD_EXP 53
59622: PPUSH
59623: LD_VAR 0 1
59627: PPUSH
59628: LD_VAR 0 1
59632: PPUSH
59633: CALL_OW 255
59637: PUSH
59638: LD_VAR 0 1
59642: PUSH
59643: LD_VAR 0 2
59647: PUSH
59648: LD_VAR 0 3
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: PPUSH
59659: CALL_OW 1
59663: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59664: CALL 59673 0 0
// end ;
59668: LD_VAR 0 4
59672: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59673: LD_INT 0
59675: PPUSH
59676: PPUSH
59677: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59678: LD_STRING resetWarehouseGatheringPoints();
59680: PPUSH
59681: CALL_OW 559
// if warehouseGatheringPoints then
59685: LD_EXP 53
59689: IFFALSE 59815
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59691: LD_ADDR_VAR 0 3
59695: PUSH
59696: LD_EXP 53
59700: PPUSH
59701: CALL 44281 0 1
59705: ST_TO_ADDR
// for i := 1 to list do
59706: LD_ADDR_VAR 0 2
59710: PUSH
59711: DOUBLE
59712: LD_INT 1
59714: DEC
59715: ST_TO_ADDR
59716: LD_VAR 0 3
59720: PUSH
59721: FOR_TO
59722: IFFALSE 59813
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59724: LD_STRING setWarehouseGatheringPointXY(
59726: PUSH
59727: LD_VAR 0 3
59731: PUSH
59732: LD_VAR 0 2
59736: ARRAY
59737: PUSH
59738: LD_INT 1
59740: ARRAY
59741: STR
59742: PUSH
59743: LD_STRING ,
59745: STR
59746: PUSH
59747: LD_VAR 0 3
59751: PUSH
59752: LD_VAR 0 2
59756: ARRAY
59757: PUSH
59758: LD_INT 2
59760: ARRAY
59761: STR
59762: PUSH
59763: LD_STRING ,
59765: STR
59766: PUSH
59767: LD_VAR 0 3
59771: PUSH
59772: LD_VAR 0 2
59776: ARRAY
59777: PUSH
59778: LD_INT 3
59780: ARRAY
59781: STR
59782: PUSH
59783: LD_STRING ,
59785: STR
59786: PUSH
59787: LD_VAR 0 3
59791: PUSH
59792: LD_VAR 0 2
59796: ARRAY
59797: PUSH
59798: LD_INT 4
59800: ARRAY
59801: STR
59802: PUSH
59803: LD_STRING )
59805: STR
59806: PPUSH
59807: CALL_OW 559
59811: GO 59721
59813: POP
59814: POP
// end ; end ;
59815: LD_VAR 0 1
59819: RET
