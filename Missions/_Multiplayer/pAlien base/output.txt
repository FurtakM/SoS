// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2738 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3114 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 2 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 2
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 3 , 0 , 3 , 3 , 3 , 3 , 3 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 3
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 3
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 220 , 160 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 220
 809: PUSH
 810: LD_INT 160
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 8
 838: PUSH
 839: LD_INT 9
 841: PUSH
 842: LD_INT 10
 844: PUSH
 845: LD_INT 11
 847: PUSH
 848: LD_INT 12
 850: PUSH
 851: LD_INT 13
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_EXP 19
 871: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 872: LD_VAR 0 1
 876: PUSH
 877: LD_INT 2
 879: EQUAL
 880: IFFALSE 892
// baseLevel := 1 else
 882: LD_ADDR_VAR 0 7
 886: PUSH
 887: LD_INT 1
 889: ST_TO_ADDR
 890: GO 906
// baseLevel := mpGameSettings [ 1 ] ;
 892: LD_ADDR_VAR 0 7
 896: PUSH
 897: LD_EXP 6
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 906: LD_ADDR_EXP 24
 910: PUSH
 911: LD_EXP 6
 915: PUSH
 916: LD_INT 2
 918: ARRAY
 919: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 920: LD_ADDR_EXP 25
 924: PUSH
 925: LD_EXP 6
 929: PUSH
 930: LD_INT 3
 932: ARRAY
 933: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 934: LD_ADDR_EXP 15
 938: PUSH
 939: LD_EXP 6
 943: PUSH
 944: LD_INT 4
 946: ARRAY
 947: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 948: LD_ADDR_EXP 27
 952: PUSH
 953: LD_EXP 6
 957: PUSH
 958: LD_INT 5
 960: ARRAY
 961: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 962: LD_ADDR_VAR 0 5
 966: PUSH
 967: LD_EXP 6
 971: PUSH
 972: LD_INT 6
 974: ARRAY
 975: PUSH
 976: LD_INT 0
 978: GREATER
 979: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 980: LD_ADDR_VAR 0 6
 984: PUSH
 985: LD_EXP 6
 989: PUSH
 990: LD_INT 7
 992: ARRAY
 993: PUSH
 994: LD_INT 0
 996: GREATER
 997: ST_TO_ADDR
// mpKingArea := 0 ;
 998: LD_ADDR_EXP 34
1002: PUSH
1003: LD_INT 0
1005: ST_TO_ADDR
// mpPoints := 0 ;
1006: LD_ADDR_EXP 35
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// mpEmissions := 0 ;
1014: LD_ADDR_EXP 37
1018: PUSH
1019: LD_INT 0
1021: ST_TO_ADDR
// kingArea := 0 ;
1022: LD_ADDR_EXP 1
1026: PUSH
1027: LD_INT 0
1029: ST_TO_ADDR
// kingCamArea := 0 ;
1030: LD_ADDR_EXP 2
1034: PUSH
1035: LD_INT 0
1037: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1038: LD_EXP 6
1042: PUSH
1043: LD_INT 9
1045: ARRAY
1046: IFFALSE 1178
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1048: LD_ADDR_EXP 36
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 3
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 12
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 24
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 12
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 23
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 21
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 42
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 21
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 42
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: LIST
1177: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1178: LD_ADDR_EXP 16
1182: PUSH
1183: LD_EXP 6
1187: PUSH
1188: LD_INT 11
1190: ARRAY
1191: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1192: LD_ADDR_EXP 22
1196: PUSH
1197: LD_EXP 6
1201: PUSH
1202: LD_INT 12
1204: ARRAY
1205: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1206: LD_ADDR_EXP 26
1210: PUSH
1211: LD_EXP 6
1215: PUSH
1216: LD_INT 13
1218: ARRAY
1219: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1220: LD_ADDR_EXP 33
1224: PUSH
1225: LD_EXP 6
1229: PUSH
1230: LD_INT 14
1232: ARRAY
1233: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1234: LD_ADDR_EXP 30
1238: PUSH
1239: LD_EXP 6
1243: PUSH
1244: LD_INT 15
1246: ARRAY
1247: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1248: LD_ADDR_EXP 28
1252: PUSH
1253: LD_EXP 6
1257: PUSH
1258: LD_INT 18
1260: ARRAY
1261: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1262: LD_ADDR_EXP 20
1266: PUSH
1267: LD_EXP 6
1271: PUSH
1272: LD_INT 21
1274: ARRAY
1275: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1276: LD_ADDR_EXP 31
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 3
1286: PUSH
1287: LD_INT 4
1289: PUSH
1290: LD_INT 5
1292: PUSH
1293: LD_INT 6
1295: PUSH
1296: LD_INT 7
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 5 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) ] ;
1307: LD_ADDR_VAR 0 8
1311: PUSH
1312: LD_INT 16
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: CALL 52276 0 2
1322: PUSH
1323: LD_INT 17
1325: PPUSH
1326: LD_INT 2
1328: PPUSH
1329: CALL 52276 0 2
1333: PUSH
1334: LD_INT 18
1336: PPUSH
1337: LD_INT 3
1339: PPUSH
1340: CALL 52276 0 2
1344: PUSH
1345: LD_INT 19
1347: PPUSH
1348: LD_INT 5
1350: PPUSH
1351: CALL 52276 0 2
1355: PUSH
1356: LD_INT 20
1358: PPUSH
1359: LD_INT 5
1361: PPUSH
1362: CALL 52276 0 2
1366: PUSH
1367: LD_INT 21
1369: PPUSH
1370: LD_INT 0
1372: PPUSH
1373: CALL 52276 0 2
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: DOUBLE
1392: LD_INT 1
1394: DEC
1395: ST_TO_ADDR
1396: LD_VAR 0 8
1400: PPUSH
1401: CALL 12122 0 1
1405: PUSH
1406: FOR_TO
1407: IFFALSE 1511
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1409: LD_ADDR_EXP 21
1413: PUSH
1414: LD_EXP 21
1418: PPUSH
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_VAR 0 8
1428: PUSH
1429: LD_VAR 0 3
1433: ARRAY
1434: PUSH
1435: LD_INT 1
1437: ARRAY
1438: PPUSH
1439: LD_VAR 0 8
1443: PUSH
1444: LD_VAR 0 3
1448: ARRAY
1449: PUSH
1450: LD_INT 3
1452: ARRAY
1453: PPUSH
1454: LD_INT 10
1456: PPUSH
1457: CALL_OW 272
1461: PUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 2
1475: ARRAY
1476: PPUSH
1477: LD_VAR 0 8
1481: PUSH
1482: LD_VAR 0 3
1486: ARRAY
1487: PUSH
1488: LD_INT 3
1490: ARRAY
1491: PPUSH
1492: LD_INT 10
1494: PPUSH
1495: CALL_OW 273
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 1
1508: ST_TO_ADDR
1509: GO 1406
1511: POP
1512: POP
// if hasOil then
1513: LD_VAR 0 5
1517: IFFALSE 1628
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1519: LD_ADDR_VAR 0 4
1523: PUSH
1524: LD_EXP 6
1528: PUSH
1529: LD_INT 6
1531: ARRAY
1532: PUSH
1533: LD_INT 2
1535: EQUAL
1536: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1537: LD_ADDR_EXP 12
1541: PUSH
1542: LD_INT 22
1544: PPUSH
1545: LD_VAR 0 4
1549: PPUSH
1550: CALL 52109 0 2
1554: PUSH
1555: LD_INT 24
1557: PPUSH
1558: LD_VAR 0 4
1562: PPUSH
1563: CALL 52109 0 2
1567: PUSH
1568: LD_INT 26
1570: PPUSH
1571: LD_VAR 0 4
1575: PPUSH
1576: CALL 52109 0 2
1580: PUSH
1581: LD_INT 28
1583: PPUSH
1584: LD_VAR 0 4
1588: PPUSH
1589: CALL 52109 0 2
1593: PUSH
1594: LD_INT 30
1596: PPUSH
1597: LD_VAR 0 4
1601: PPUSH
1602: CALL 52109 0 2
1606: PUSH
1607: LD_INT 32
1609: PPUSH
1610: LD_VAR 0 4
1614: PPUSH
1615: CALL 52109 0 2
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: ST_TO_ADDR
// end ; if hasSib then
1628: LD_VAR 0 6
1632: IFFALSE 1743
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1634: LD_ADDR_VAR 0 4
1638: PUSH
1639: LD_EXP 6
1643: PUSH
1644: LD_INT 7
1646: ARRAY
1647: PUSH
1648: LD_INT 2
1650: EQUAL
1651: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1652: LD_ADDR_EXP 13
1656: PUSH
1657: LD_INT 23
1659: PPUSH
1660: LD_VAR 0 4
1664: PPUSH
1665: CALL 52109 0 2
1669: PUSH
1670: LD_INT 25
1672: PPUSH
1673: LD_VAR 0 4
1677: PPUSH
1678: CALL 52109 0 2
1682: PUSH
1683: LD_INT 27
1685: PPUSH
1686: LD_VAR 0 4
1690: PPUSH
1691: CALL 52109 0 2
1695: PUSH
1696: LD_INT 29
1698: PPUSH
1699: LD_VAR 0 4
1703: PPUSH
1704: CALL 52109 0 2
1708: PUSH
1709: LD_INT 31
1711: PPUSH
1712: LD_VAR 0 4
1716: PPUSH
1717: CALL 52109 0 2
1721: PUSH
1722: LD_INT 33
1724: PPUSH
1725: LD_VAR 0 4
1729: PPUSH
1730: CALL 52109 0 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1743: LD_VAR 0 7
1747: PUSH
1748: LD_INT 1
1750: GREATEREQUAL
1751: IFFALSE 1763
// mpDepots := startPos ;
1753: LD_ADDR_EXP 14
1757: PUSH
1758: LD_VAR 0 8
1762: ST_TO_ADDR
// if baseLevel >= 2 then
1763: LD_VAR 0 7
1767: PUSH
1768: LD_INT 2
1770: GREATEREQUAL
1771: IFFALSE 2086
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] ] ;
1773: LD_ADDR_EXP 17
1777: PUSH
1778: LD_INT 31
1780: PUSH
1781: LD_INT 35
1783: PPUSH
1784: LD_INT 5
1786: PPUSH
1787: CALL 52276 0 2
1791: ADD
1792: PUSH
1793: LD_INT 31
1795: PUSH
1796: LD_INT 36
1798: PPUSH
1799: LD_INT 5
1801: PPUSH
1802: CALL 52276 0 2
1806: ADD
1807: PUSH
1808: LD_INT 4
1810: PUSH
1811: LD_INT 34
1813: PPUSH
1814: LD_INT 5
1816: PPUSH
1817: CALL 52276 0 2
1821: ADD
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 31
1830: PUSH
1831: LD_INT 38
1833: PPUSH
1834: LD_INT 5
1836: PPUSH
1837: CALL 52276 0 2
1841: ADD
1842: PUSH
1843: LD_INT 31
1845: PUSH
1846: LD_INT 39
1848: PPUSH
1849: LD_INT 0
1851: PPUSH
1852: CALL 52276 0 2
1856: ADD
1857: PUSH
1858: LD_INT 4
1860: PUSH
1861: LD_INT 37
1863: PPUSH
1864: LD_INT 5
1866: PPUSH
1867: CALL 52276 0 2
1871: ADD
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 31
1880: PUSH
1881: LD_INT 41
1883: PPUSH
1884: LD_INT 0
1886: PPUSH
1887: CALL 52276 0 2
1891: ADD
1892: PUSH
1893: LD_INT 31
1895: PUSH
1896: LD_INT 42
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL 52276 0 2
1906: ADD
1907: PUSH
1908: LD_INT 4
1910: PUSH
1911: LD_INT 40
1913: PPUSH
1914: LD_INT 0
1916: PPUSH
1917: CALL 52276 0 2
1921: ADD
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 31
1930: PUSH
1931: LD_INT 44
1933: PPUSH
1934: LD_INT 2
1936: PPUSH
1937: CALL 52276 0 2
1941: ADD
1942: PUSH
1943: LD_INT 31
1945: PUSH
1946: LD_INT 45
1948: PPUSH
1949: LD_INT 2
1951: PPUSH
1952: CALL 52276 0 2
1956: ADD
1957: PUSH
1958: LD_INT 4
1960: PUSH
1961: LD_INT 43
1963: PPUSH
1964: LD_INT 2
1966: PPUSH
1967: CALL 52276 0 2
1971: ADD
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 31
1980: PUSH
1981: LD_INT 47
1983: PPUSH
1984: LD_INT 2
1986: PPUSH
1987: CALL 52276 0 2
1991: ADD
1992: PUSH
1993: LD_INT 31
1995: PUSH
1996: LD_INT 48
1998: PPUSH
1999: LD_INT 3
2001: PPUSH
2002: CALL 52276 0 2
2006: ADD
2007: PUSH
2008: LD_INT 4
2010: PUSH
2011: LD_INT 46
2013: PPUSH
2014: LD_INT 2
2016: PPUSH
2017: CALL 52276 0 2
2021: ADD
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 31
2030: PUSH
2031: LD_INT 50
2033: PPUSH
2034: LD_INT 3
2036: PPUSH
2037: CALL 52276 0 2
2041: ADD
2042: PUSH
2043: LD_INT 31
2045: PUSH
2046: LD_INT 51
2048: PPUSH
2049: LD_INT 3
2051: PPUSH
2052: CALL 52276 0 2
2056: ADD
2057: PUSH
2058: LD_INT 4
2060: PUSH
2061: LD_INT 49
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL 52276 0 2
2071: ADD
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: ST_TO_ADDR
// end ; end ;
2086: LD_VAR 0 2
2090: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2091: GO 2093
2093: DISABLE
2094: LD_INT 0
2096: PPUSH
2097: PPUSH
2098: PPUSH
2099: PPUSH
2100: PPUSH
2101: PPUSH
2102: PPUSH
2103: PPUSH
// begin if not mpShipments then
2104: LD_EXP 27
2108: NOT
2109: IFFALSE 2113
// exit ;
2111: GO 2651
// case mpShipments of 1 :
2113: LD_EXP 27
2117: PUSH
2118: LD_INT 1
2120: DOUBLE
2121: EQUAL
2122: IFTRUE 2126
2124: GO 2161
2126: POP
// begin time := 0 0$30 ;
2127: LD_ADDR_VAR 0 4
2131: PUSH
2132: LD_INT 1050
2134: ST_TO_ADDR
// normalTime := 0 0$30 ;
2135: LD_ADDR_VAR 0 6
2139: PUSH
2140: LD_INT 1050
2142: ST_TO_ADDR
// maxTime := 1 1$20 ;
2143: LD_ADDR_VAR 0 8
2147: PUSH
2148: LD_INT 2800
2150: ST_TO_ADDR
// delayTime := 0 0$5 ;
2151: LD_ADDR_VAR 0 7
2155: PUSH
2156: LD_INT 175
2158: ST_TO_ADDR
// end ; 2 :
2159: GO 2291
2161: LD_INT 2
2163: DOUBLE
2164: EQUAL
2165: IFTRUE 2169
2167: GO 2204
2169: POP
// begin time := 0 0$25 ;
2170: LD_ADDR_VAR 0 4
2174: PUSH
2175: LD_INT 875
2177: ST_TO_ADDR
// normalTime := 0 0$25 ;
2178: LD_ADDR_VAR 0 6
2182: PUSH
2183: LD_INT 875
2185: ST_TO_ADDR
// maxTime := 1 1$10 ;
2186: LD_ADDR_VAR 0 8
2190: PUSH
2191: LD_INT 2450
2193: ST_TO_ADDR
// delayTime := 0 0$4 ;
2194: LD_ADDR_VAR 0 7
2198: PUSH
2199: LD_INT 140
2201: ST_TO_ADDR
// end ; 3 :
2202: GO 2291
2204: LD_INT 3
2206: DOUBLE
2207: EQUAL
2208: IFTRUE 2212
2210: GO 2247
2212: POP
// begin time := 0 0$20 ;
2213: LD_ADDR_VAR 0 4
2217: PUSH
2218: LD_INT 700
2220: ST_TO_ADDR
// normalTime := 0 0$20 ;
2221: LD_ADDR_VAR 0 6
2225: PUSH
2226: LD_INT 700
2228: ST_TO_ADDR
// maxTime := 1 1$00 ;
2229: LD_ADDR_VAR 0 8
2233: PUSH
2234: LD_INT 2100
2236: ST_TO_ADDR
// delayTime := 0 0$3 ;
2237: LD_ADDR_VAR 0 7
2241: PUSH
2242: LD_INT 105
2244: ST_TO_ADDR
// end ; 4 :
2245: GO 2291
2247: LD_INT 4
2249: DOUBLE
2250: EQUAL
2251: IFTRUE 2255
2253: GO 2290
2255: POP
// begin time := 0 0$15 ;
2256: LD_ADDR_VAR 0 4
2260: PUSH
2261: LD_INT 525
2263: ST_TO_ADDR
// normalTime := 0 0$15 ;
2264: LD_ADDR_VAR 0 6
2268: PUSH
2269: LD_INT 525
2271: ST_TO_ADDR
// maxTime := 0 0$55 ;
2272: LD_ADDR_VAR 0 8
2276: PUSH
2277: LD_INT 1925
2279: ST_TO_ADDR
// delayTime := 0 0$2 ;
2280: LD_ADDR_VAR 0 7
2284: PUSH
2285: LD_INT 70
2287: ST_TO_ADDR
// end ; end ;
2288: GO 2291
2290: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_INT 8
2298: PUSH
2299: LD_INT 9
2301: PUSH
2302: LD_INT 10
2304: PUSH
2305: LD_INT 11
2307: PUSH
2308: LD_INT 12
2310: PUSH
2311: LD_INT 13
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: ST_TO_ADDR
// areas := [ ] ;
2322: LD_ADDR_VAR 0 5
2326: PUSH
2327: EMPTY
2328: ST_TO_ADDR
// for i := 1 to 8 do
2329: LD_ADDR_VAR 0 1
2333: PUSH
2334: DOUBLE
2335: LD_INT 1
2337: DEC
2338: ST_TO_ADDR
2339: LD_INT 8
2341: PUSH
2342: FOR_TO
2343: IFFALSE 2390
// begin if not mpSidePositions [ i ] then
2345: LD_EXP 7
2349: PUSH
2350: LD_VAR 0 1
2354: ARRAY
2355: NOT
2356: IFFALSE 2360
// continue ;
2358: GO 2342
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2360: LD_ADDR_VAR 0 5
2364: PUSH
2365: LD_VAR 0 5
2369: PUSH
2370: LD_VAR 0 3
2374: PUSH
2375: LD_EXP 7
2379: PUSH
2380: LD_VAR 0 1
2384: ARRAY
2385: ARRAY
2386: ADD
2387: ST_TO_ADDR
// end ;
2388: GO 2342
2390: POP
2391: POP
// x := 1 ;
2392: LD_ADDR_VAR 0 2
2396: PUSH
2397: LD_INT 1
2399: ST_TO_ADDR
// repeat wait ( time ) ;
2400: LD_VAR 0 4
2404: PPUSH
2405: CALL_OW 67
// x := Inc ( x ) ;
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL 49092 0 1
2423: ST_TO_ADDR
// if x > 5 then
2424: LD_VAR 0 2
2428: PUSH
2429: LD_INT 5
2431: GREATER
2432: IFFALSE 2442
// x := 1 ;
2434: LD_ADDR_VAR 0 2
2438: PUSH
2439: LD_INT 1
2441: ST_TO_ADDR
// for i in areas do
2442: LD_ADDR_VAR 0 1
2446: PUSH
2447: LD_VAR 0 5
2451: PUSH
2452: FOR_IN
2453: IFFALSE 2492
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2455: LD_VAR 0 1
2459: PPUSH
2460: LD_INT 1
2462: PPUSH
2463: CALL_OW 287
2467: PUSH
2468: LD_INT 20
2470: LESS
2471: IFFALSE 2490
// begin CreateCratesArea ( x , i , true ) ;
2473: LD_VAR 0 2
2477: PPUSH
2478: LD_VAR 0 1
2482: PPUSH
2483: LD_INT 1
2485: PPUSH
2486: CALL_OW 55
// end ; end ;
2490: GO 2452
2492: POP
2493: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 20 then
2494: LD_INT 1
2496: PPUSH
2497: LD_INT 1
2499: PPUSH
2500: CALL_OW 287
2504: PUSH
2505: LD_INT 20
2507: LESS
2508: IFFALSE 2525
// CreateCratesArea ( x , MZBaseArea , true ) ;
2510: LD_VAR 0 2
2514: PPUSH
2515: LD_INT 1
2517: PPUSH
2518: LD_INT 1
2520: PPUSH
2521: CALL_OW 55
// if GetResourceArea ( MZSpecialArea , mat_cans ) = 0 then
2525: LD_INT 15
2527: PPUSH
2528: LD_INT 1
2530: PPUSH
2531: CALL_OW 287
2535: PUSH
2536: LD_INT 0
2538: EQUAL
2539: IFFALSE 2578
// begin for i := 1 to 3 do
2541: LD_ADDR_VAR 0 1
2545: PUSH
2546: DOUBLE
2547: LD_INT 1
2549: DEC
2550: ST_TO_ADDR
2551: LD_INT 3
2553: PUSH
2554: FOR_TO
2555: IFFALSE 2574
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2557: LD_VAR 0 2
2561: PPUSH
2562: LD_INT 15
2564: PPUSH
2565: LD_INT 1
2567: PPUSH
2568: CALL_OW 55
2572: GO 2554
2574: POP
2575: POP
// end else
2576: GO 2609
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
2578: LD_INT 15
2580: PPUSH
2581: LD_INT 1
2583: PPUSH
2584: CALL_OW 287
2588: PUSH
2589: LD_INT 30
2591: LESS
2592: IFFALSE 2609
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2594: LD_VAR 0 2
2598: PPUSH
2599: LD_INT 15
2601: PPUSH
2602: LD_INT 1
2604: PPUSH
2605: CALL_OW 55
// time := time + delayTime ;
2609: LD_ADDR_VAR 0 4
2613: PUSH
2614: LD_VAR 0 4
2618: PUSH
2619: LD_VAR 0 7
2623: PLUS
2624: ST_TO_ADDR
// if time > maxTime then
2625: LD_VAR 0 4
2629: PUSH
2630: LD_VAR 0 8
2634: GREATER
2635: IFFALSE 2647
// time := normalTime ;
2637: LD_ADDR_VAR 0 4
2641: PUSH
2642: LD_VAR 0 6
2646: ST_TO_ADDR
// until false ;
2647: LD_INT 0
2649: IFFALSE 2400
// end ; end_of_file
2651: PPOPN 8
2653: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2654: LD_VAR 0 1
2658: PPUSH
2659: CALL 52984 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: CALL 7848 0 1
// end ;
2672: PPOPN 1
2674: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2675: LD_VAR 0 1
2679: PPUSH
2680: CALL 53001 0 1
// end ;
2684: PPOPN 1
2686: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2687: LD_VAR 0 1
2691: PPUSH
2692: CALL 8513 0 1
2696: PPOPN 1
2698: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2699: LD_VAR 0 1
2703: PPUSH
2704: LD_VAR 0 2
2708: PPUSH
2709: CALL 53042 0 2
2713: PPOPN 2
2715: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2716: LD_VAR 0 1
2720: PPUSH
2721: LD_VAR 0 2
2725: PPUSH
2726: LD_VAR 0 3
2730: PPUSH
2731: CALL 8566 0 3
2735: PPOPN 3
2737: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2738: LD_INT 0
2740: PPUSH
2741: PPUSH
// disable ( mpActive ) ;
2742: LD_INT 100
2744: DISABLE_MARKED
// disable ( mpWin ) ;
2745: LD_INT 101
2747: DISABLE_MARKED
// disable ( mpLose ) ;
2748: LD_INT 102
2750: DISABLE_MARKED
// mpGameType := 0 ;
2751: LD_ADDR_EXP 3
2755: PUSH
2756: LD_INT 0
2758: ST_TO_ADDR
// mpGameSettings := [ ] ;
2759: LD_ADDR_EXP 6
2763: PUSH
2764: EMPTY
2765: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2766: LD_ADDR_EXP 4
2770: PUSH
2771: EMPTY
2772: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2773: LD_ADDR_EXP 5
2777: PUSH
2778: EMPTY
2779: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2780: LD_ADDR_EXP 29
2784: PUSH
2785: LD_INT 2
2787: PUSH
2788: LD_INT 2
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2795: LD_ADDR_EXP 12
2799: PUSH
2800: EMPTY
2801: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2802: LD_ADDR_EXP 13
2806: PUSH
2807: EMPTY
2808: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2809: LD_ADDR_EXP 41
2813: PUSH
2814: EMPTY
2815: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2816: LD_ADDR_EXP 42
2820: PUSH
2821: EMPTY
2822: ST_TO_ADDR
// mpDepots := [ ] ;
2823: LD_ADDR_EXP 14
2827: PUSH
2828: EMPTY
2829: ST_TO_ADDR
// mpBuildings := [ ] ;
2830: LD_ADDR_EXP 17
2834: PUSH
2835: EMPTY
2836: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2837: LD_ADDR_EXP 18
2841: PUSH
2842: EMPTY
2843: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2844: LD_ADDR_EXP 19
2848: PUSH
2849: EMPTY
2850: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2851: LD_ADDR_EXP 20
2855: PUSH
2856: EMPTY
2857: ST_TO_ADDR
// mpStartingResources := [ ] ;
2858: LD_ADDR_EXP 15
2862: PUSH
2863: EMPTY
2864: ST_TO_ADDR
// mpStartPos := [ ] ;
2865: LD_ADDR_EXP 21
2869: PUSH
2870: EMPTY
2871: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2872: LD_ADDR_EXP 22
2876: PUSH
2877: LD_INT 1
2879: NEG
2880: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2881: LD_ADDR_EXP 23
2885: PUSH
2886: EMPTY
2887: ST_TO_ADDR
// mpApemans := [ ] ;
2888: LD_ADDR_EXP 30
2892: PUSH
2893: EMPTY
2894: ST_TO_ADDR
// mpApemansArea := [ ] ;
2895: LD_ADDR_EXP 31
2899: PUSH
2900: EMPTY
2901: ST_TO_ADDR
// mpRespawn := [ ] ;
2902: LD_ADDR_EXP 33
2906: PUSH
2907: EMPTY
2908: ST_TO_ADDR
// mpKingArea := 0 ;
2909: LD_ADDR_EXP 34
2913: PUSH
2914: LD_INT 0
2916: ST_TO_ADDR
// mpPoints := [ ] ;
2917: LD_ADDR_EXP 35
2921: PUSH
2922: EMPTY
2923: ST_TO_ADDR
// mpVehicles := 0 ;
2924: LD_ADDR_EXP 36
2928: PUSH
2929: LD_INT 0
2931: ST_TO_ADDR
// mpShipments := 0 ;
2932: LD_ADDR_EXP 27
2936: PUSH
2937: LD_INT 0
2939: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2940: LD_ADDR_EXP 40
2944: PUSH
2945: EMPTY
2946: PUSH
2947: EMPTY
2948: PUSH
2949: EMPTY
2950: PUSH
2951: EMPTY
2952: PUSH
2953: EMPTY
2954: PUSH
2955: EMPTY
2956: PUSH
2957: EMPTY
2958: PUSH
2959: EMPTY
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: LIST
2970: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2971: LD_ADDR_EXP 32
2975: PUSH
2976: EMPTY
2977: PUSH
2978: EMPTY
2979: PUSH
2980: EMPTY
2981: PUSH
2982: EMPTY
2983: PUSH
2984: EMPTY
2985: PUSH
2986: EMPTY
2987: PUSH
2988: EMPTY
2989: PUSH
2990: EMPTY
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: LIST
2996: LIST
2997: LIST
2998: LIST
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// mpEmissions := 0 ;
3002: LD_ADDR_EXP 37
3006: PUSH
3007: LD_INT 0
3009: ST_TO_ADDR
// mpTeleports := 0 ;
3010: LD_ADDR_EXP 43
3014: PUSH
3015: LD_INT 0
3017: ST_TO_ADDR
// mpArtifacts := 0 ;
3018: LD_ADDR_EXP 44
3022: PUSH
3023: LD_INT 0
3025: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3026: LD_ADDR_EXP 25
3030: PUSH
3031: LD_INT 3
3033: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3034: LD_ADDR_EXP 24
3038: PUSH
3039: LD_INT 15
3041: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3042: LD_ADDR_EXP 38
3046: PUSH
3047: LD_INT 0
3049: ST_TO_ADDR
// mpGameActive := false ;
3050: LD_ADDR_EXP 39
3054: PUSH
3055: LD_INT 0
3057: ST_TO_ADDR
// mpBlockRespThread := false ;
3058: LD_ADDR_EXP 45
3062: PUSH
3063: LD_INT 0
3065: ST_TO_ADDR
// for i := 1 to 32 do
3066: LD_ADDR_VAR 0 2
3070: PUSH
3071: DOUBLE
3072: LD_INT 1
3074: DEC
3075: ST_TO_ADDR
3076: LD_INT 32
3078: PUSH
3079: FOR_TO
3080: IFFALSE 3107
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3082: LD_ADDR_EXP 6
3086: PUSH
3087: LD_EXP 6
3091: PPUSH
3092: LD_VAR 0 2
3096: PPUSH
3097: LD_INT 0
3099: PPUSH
3100: CALL_OW 1
3104: ST_TO_ADDR
3105: GO 3079
3107: POP
3108: POP
// end ;
3109: LD_VAR 0 1
3113: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3114: LD_INT 0
3116: PPUSH
3117: PPUSH
3118: PPUSH
3119: PPUSH
3120: PPUSH
3121: PPUSH
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3130: LD_ADDR_VAR 0 14
3134: PUSH
3135: LD_INT 1
3137: PUSH
3138: LD_INT 2
3140: PUSH
3141: LD_INT 3
3143: PUSH
3144: LD_INT 5
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: ST_TO_ADDR
// for i in gameTypes do
3153: LD_ADDR_VAR 0 2
3157: PUSH
3158: LD_VAR 0 14
3162: PUSH
3163: FOR_IN
3164: IFFALSE 3173
// disable ( i ) ;
3166: LD_VAR 0 2
3170: DISABLE_MARKED
3171: GO 3163
3173: POP
3174: POP
// if Multiplayer then
3175: LD_OWVAR 4
3179: IFFALSE 3363
// begin mpGameType := mp_game_type ;
3181: LD_ADDR_EXP 3
3185: PUSH
3186: LD_OWVAR 6
3190: ST_TO_ADDR
// your_side := mp_player_side ;
3191: LD_ADDR_OWVAR 2
3195: PUSH
3196: LD_OWVAR 7
3200: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3201: LD_ADDR_EXP 7
3205: PUSH
3206: LD_OWVAR 17
3210: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3211: LD_ADDR_EXP 8
3215: PUSH
3216: LD_OWVAR 15
3220: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3221: LD_ADDR_EXP 9
3225: PUSH
3226: LD_OWVAR 16
3230: ST_TO_ADDR
// mpTeams := mp_teams ;
3231: LD_ADDR_EXP 10
3235: PUSH
3236: LD_OWVAR 12
3240: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3241: LD_ADDR_VAR 0 2
3245: PUSH
3246: DOUBLE
3247: LD_INT 1
3249: DEC
3250: ST_TO_ADDR
3251: LD_EXP 4
3255: PPUSH
3256: CALL 12122 0 1
3260: PUSH
3261: FOR_TO
3262: IFFALSE 3338
// begin setting := mpGameSettingsKeys [ i ] ;
3264: LD_ADDR_VAR 0 12
3268: PUSH
3269: LD_EXP 4
3273: PUSH
3274: LD_VAR 0 2
3278: ARRAY
3279: ST_TO_ADDR
// if setting then
3280: LD_VAR 0 12
3284: IFFALSE 3336
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3286: LD_ADDR_EXP 6
3290: PUSH
3291: LD_EXP 6
3295: PPUSH
3296: LD_VAR 0 2
3300: PPUSH
3301: LD_EXP 5
3305: PUSH
3306: LD_VAR 0 2
3310: ARRAY
3311: PUSH
3312: LD_VAR 0 2
3316: PUSH
3317: LD_INT 1
3319: MINUS
3320: PPUSH
3321: CALL_OW 426
3325: PUSH
3326: LD_INT 1
3328: PLUS
3329: ARRAY
3330: PPUSH
3331: CALL_OW 1
3335: ST_TO_ADDR
// end ;
3336: GO 3261
3338: POP
3339: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3340: LD_ADDR_EXP 11
3344: PUSH
3345: LD_EXP 8
3349: PUSH
3350: LD_INT 0
3352: PUSH
3353: EMPTY
3354: LIST
3355: DIFF
3356: PUSH
3357: LD_INT 1
3359: GREATER
3360: ST_TO_ADDR
// end else
3361: GO 3363
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3363: LD_EXP 3
3367: PPUSH
3368: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3372: LD_EXP 18
3376: PPUSH
3377: CALL 12122 0 1
3381: IFFALSE 3412
// begin for i in mpMarkedAreas do
3383: LD_ADDR_VAR 0 2
3387: PUSH
3388: LD_EXP 18
3392: PUSH
3393: FOR_IN
3394: IFFALSE 3410
// SetAreaMapShow ( i , 0 ) ;
3396: LD_VAR 0 2
3400: PPUSH
3401: LD_INT 0
3403: PPUSH
3404: CALL_OW 424
3408: GO 3393
3410: POP
3411: POP
// end ; for i := 1 to 8 do
3412: LD_ADDR_VAR 0 2
3416: PUSH
3417: DOUBLE
3418: LD_INT 1
3420: DEC
3421: ST_TO_ADDR
3422: LD_INT 8
3424: PUSH
3425: FOR_TO
3426: IFFALSE 4760
// begin if not mpSidePositions [ i ] then
3428: LD_EXP 7
3432: PUSH
3433: LD_VAR 0 2
3437: ARRAY
3438: NOT
3439: IFFALSE 3443
// continue ;
3441: GO 3425
// side := i ;
3443: LD_ADDR_VAR 0 7
3447: PUSH
3448: LD_VAR 0 2
3452: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3453: LD_ADDR_VAR 0 9
3457: PUSH
3458: LD_EXP 9
3462: PUSH
3463: LD_VAR 0 2
3467: ARRAY
3468: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3469: LD_ADDR_VAR 0 8
3473: PUSH
3474: LD_EXP 7
3478: PUSH
3479: LD_VAR 0 2
3483: ARRAY
3484: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3485: LD_EXP 12
3489: PPUSH
3490: CALL 12122 0 1
3494: IFFALSE 3571
// begin for j in mpOilDeposits [ pos ] do
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 12
3505: PUSH
3506: LD_VAR 0 8
3510: ARRAY
3511: PUSH
3512: FOR_IN
3513: IFFALSE 3569
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3515: LD_VAR 0 3
3519: PUSH
3520: LD_INT 1
3522: ARRAY
3523: PPUSH
3524: LD_VAR 0 3
3528: PUSH
3529: LD_INT 2
3531: ARRAY
3532: PPUSH
3533: LD_INT 2
3535: PPUSH
3536: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3540: LD_VAR 0 3
3544: PUSH
3545: LD_INT 1
3547: ARRAY
3548: PPUSH
3549: LD_VAR 0 3
3553: PUSH
3554: LD_INT 2
3556: ARRAY
3557: PPUSH
3558: LD_VAR 0 7
3562: PPUSH
3563: CALL_OW 441
// end ;
3567: GO 3512
3569: POP
3570: POP
// end ; if Count ( mpSibDeposits ) then
3571: LD_EXP 13
3575: PPUSH
3576: CALL 12122 0 1
3580: IFFALSE 3657
// begin for j in mpSibDeposits [ pos ] do
3582: LD_ADDR_VAR 0 3
3586: PUSH
3587: LD_EXP 13
3591: PUSH
3592: LD_VAR 0 8
3596: ARRAY
3597: PUSH
3598: FOR_IN
3599: IFFALSE 3655
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3601: LD_VAR 0 3
3605: PUSH
3606: LD_INT 1
3608: ARRAY
3609: PPUSH
3610: LD_VAR 0 3
3614: PUSH
3615: LD_INT 2
3617: ARRAY
3618: PPUSH
3619: LD_INT 3
3621: PPUSH
3622: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3626: LD_VAR 0 3
3630: PUSH
3631: LD_INT 1
3633: ARRAY
3634: PPUSH
3635: LD_VAR 0 3
3639: PUSH
3640: LD_INT 2
3642: ARRAY
3643: PPUSH
3644: LD_VAR 0 7
3648: PPUSH
3649: CALL_OW 441
// end ;
3653: GO 3598
3655: POP
3656: POP
// end ; InitBc ;
3657: CALL_OW 21
// InitUc ;
3661: CALL_OW 18
// uc_side := side ;
3665: LD_ADDR_OWVAR 20
3669: PUSH
3670: LD_VAR 0 7
3674: ST_TO_ADDR
// uc_nation := nation ;
3675: LD_ADDR_OWVAR 21
3679: PUSH
3680: LD_VAR 0 9
3684: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3685: LD_EXP 22
3689: PUSH
3690: LD_INT 1
3692: NEG
3693: GREATER
3694: IFFALSE 3853
// begin x := mpStartPos [ pos ] [ 1 ] ;
3696: LD_ADDR_VAR 0 5
3700: PUSH
3701: LD_EXP 21
3705: PUSH
3706: LD_VAR 0 8
3710: ARRAY
3711: PUSH
3712: LD_INT 1
3714: ARRAY
3715: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3716: LD_ADDR_VAR 0 6
3720: PUSH
3721: LD_EXP 21
3725: PUSH
3726: LD_VAR 0 8
3730: ARRAY
3731: PUSH
3732: LD_INT 2
3734: ARRAY
3735: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3736: LD_VAR 0 5
3740: PPUSH
3741: LD_VAR 0 6
3745: PPUSH
3746: LD_INT 12
3748: PPUSH
3749: LD_INT 2
3751: PPUSH
3752: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3756: LD_ADDR_EXP 23
3760: PUSH
3761: LD_EXP 23
3765: PPUSH
3766: LD_VAR 0 7
3770: PPUSH
3771: LD_VAR 0 7
3775: PPUSH
3776: LD_VAR 0 5
3780: PPUSH
3781: LD_VAR 0 6
3785: PPUSH
3786: LD_INT 1
3788: PUSH
3789: LD_INT 100
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: PUSH
3796: LD_INT 2
3798: PUSH
3799: LD_INT 70
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: PUSH
3806: LD_INT 3
3808: PUSH
3809: LD_INT 40
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 10
3818: PUSH
3819: LD_INT 25
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: LD_INT 20
3828: PUSH
3829: LD_INT 100
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PPUSH
3843: CALL_OW 418
3847: PPUSH
3848: CALL_OW 1
3852: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3853: LD_EXP 14
3857: PPUSH
3858: CALL 12122 0 1
3862: IFFALSE 4046
// begin if mpGameType = GameTypeSurvival then
3864: LD_EXP 3
3868: PUSH
3869: LD_INT 2
3871: EQUAL
3872: IFFALSE 3892
// begin bc_level := 10 ;
3874: LD_ADDR_OWVAR 43
3878: PUSH
3879: LD_INT 10
3881: ST_TO_ADDR
// bc_type := b_warehouse ;
3882: LD_ADDR_OWVAR 42
3886: PUSH
3887: LD_INT 1
3889: ST_TO_ADDR
// end else
3890: GO 3908
// begin bc_level := 0 ;
3892: LD_ADDR_OWVAR 43
3896: PUSH
3897: LD_INT 0
3899: ST_TO_ADDR
// bc_type := b_depot ;
3900: LD_ADDR_OWVAR 42
3904: PUSH
3905: LD_INT 0
3907: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3908: LD_ADDR_VAR 0 4
3912: PUSH
3913: LD_EXP 14
3917: PUSH
3918: LD_VAR 0 8
3922: ARRAY
3923: PUSH
3924: LD_INT 1
3926: ARRAY
3927: PPUSH
3928: LD_EXP 14
3932: PUSH
3933: LD_VAR 0 8
3937: ARRAY
3938: PUSH
3939: LD_INT 2
3941: ARRAY
3942: PPUSH
3943: LD_EXP 14
3947: PUSH
3948: LD_VAR 0 8
3952: ARRAY
3953: PUSH
3954: LD_INT 3
3956: ARRAY
3957: PPUSH
3958: CALL_OW 47
3962: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3963: LD_VAR 0 4
3967: PPUSH
3968: LD_STRING @
3970: PUSH
3971: LD_VAR 0 7
3975: STR
3976: PPUSH
3977: CALL_OW 500
// if Count ( mpStartingResources ) then
3981: LD_EXP 15
3985: PPUSH
3986: CALL 12122 0 1
3990: IFFALSE 4044
// begin for j := 1 to mpStartingResources do
3992: LD_ADDR_VAR 0 3
3996: PUSH
3997: DOUBLE
3998: LD_INT 1
4000: DEC
4001: ST_TO_ADDR
4002: LD_EXP 15
4006: PUSH
4007: FOR_TO
4008: IFFALSE 4042
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4010: LD_VAR 0 4
4014: PPUSH
4015: CALL_OW 274
4019: PPUSH
4020: LD_VAR 0 3
4024: PPUSH
4025: LD_EXP 15
4029: PUSH
4030: LD_VAR 0 3
4034: ARRAY
4035: PPUSH
4036: CALL_OW 277
4040: GO 4007
4042: POP
4043: POP
// end ; end else
4044: GO 4253
// if Count ( mpStartingResources ) then
4046: LD_EXP 15
4050: PPUSH
4051: CALL 12122 0 1
4055: IFFALSE 4253
// begin x := mpStartPos [ pos ] [ 1 ] ;
4057: LD_ADDR_VAR 0 5
4061: PUSH
4062: LD_EXP 21
4066: PUSH
4067: LD_VAR 0 8
4071: ARRAY
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4077: LD_ADDR_VAR 0 6
4081: PUSH
4082: LD_EXP 21
4086: PUSH
4087: LD_VAR 0 8
4091: ARRAY
4092: PUSH
4093: LD_INT 2
4095: ARRAY
4096: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4097: LD_ADDR_VAR 0 3
4101: PUSH
4102: DOUBLE
4103: LD_INT 1
4105: DEC
4106: ST_TO_ADDR
4107: LD_EXP 15
4111: PUSH
4112: FOR_TO
4113: IFFALSE 4251
// begin resources := mpStartingResources [ j ] ;
4115: LD_ADDR_VAR 0 13
4119: PUSH
4120: LD_EXP 15
4124: PUSH
4125: LD_VAR 0 3
4129: ARRAY
4130: ST_TO_ADDR
// if resources = 0 then
4131: LD_VAR 0 13
4135: PUSH
4136: LD_INT 0
4138: EQUAL
4139: IFFALSE 4143
// continue ;
4141: GO 4112
// repeat if resources >= 50 then
4143: LD_VAR 0 13
4147: PUSH
4148: LD_INT 50
4150: GREATEREQUAL
4151: IFFALSE 4197
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4153: LD_VAR 0 3
4157: PPUSH
4158: LD_INT 5
4160: PPUSH
4161: LD_VAR 0 5
4165: PPUSH
4166: LD_VAR 0 6
4170: PPUSH
4171: LD_INT 6
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 60
// resources := resources - 50 ;
4181: LD_ADDR_VAR 0 13
4185: PUSH
4186: LD_VAR 0 13
4190: PUSH
4191: LD_INT 50
4193: MINUS
4194: ST_TO_ADDR
// end else
4195: GO 4239
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4197: LD_VAR 0 3
4201: PPUSH
4202: LD_VAR 0 13
4206: PUSH
4207: LD_INT 10
4209: DIV
4210: PPUSH
4211: LD_VAR 0 5
4215: PPUSH
4216: LD_VAR 0 6
4220: PPUSH
4221: LD_INT 6
4223: PPUSH
4224: LD_INT 0
4226: PPUSH
4227: CALL_OW 60
// resources := 0 ;
4231: LD_ADDR_VAR 0 13
4235: PUSH
4236: LD_INT 0
4238: ST_TO_ADDR
// end ; until resources <= 0 ;
4239: LD_VAR 0 13
4243: PUSH
4244: LD_INT 0
4246: LESSEQUAL
4247: IFFALSE 4143
// end ;
4249: GO 4112
4251: POP
4252: POP
// end ; if Count ( mpBuildings ) then
4253: LD_EXP 17
4257: PPUSH
4258: CALL 12122 0 1
4262: IFFALSE 4340
// begin for j in mpBuildings [ pos ] do
4264: LD_ADDR_VAR 0 3
4268: PUSH
4269: LD_EXP 17
4273: PUSH
4274: LD_VAR 0 8
4278: ARRAY
4279: PUSH
4280: FOR_IN
4281: IFFALSE 4338
// begin bc_level := 0 ;
4283: LD_ADDR_OWVAR 43
4287: PUSH
4288: LD_INT 0
4290: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4291: LD_ADDR_OWVAR 42
4295: PUSH
4296: LD_VAR 0 3
4300: PUSH
4301: LD_INT 1
4303: ARRAY
4304: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4305: LD_VAR 0 3
4309: PUSH
4310: LD_INT 2
4312: ARRAY
4313: PPUSH
4314: LD_VAR 0 3
4318: PUSH
4319: LD_INT 3
4321: ARRAY
4322: PPUSH
4323: LD_VAR 0 3
4327: PUSH
4328: LD_INT 4
4330: ARRAY
4331: PPUSH
4332: CALL_OW 47
// end ;
4336: GO 4280
4338: POP
4339: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4340: LD_EXP 26
4344: PUSH
4345: LD_INT 20
4347: PPUSH
4348: LD_VAR 0 7
4352: PPUSH
4353: CALL_OW 321
4357: PUSH
4358: LD_INT 1
4360: EQUAL
4361: AND
4362: IFFALSE 4379
// SetTech ( tech_SibDet , side , state_researched ) ;
4364: LD_INT 20
4366: PPUSH
4367: LD_VAR 0 7
4371: PPUSH
4372: LD_INT 2
4374: PPUSH
4375: CALL_OW 322
// if not mpArtifacts then
4379: LD_EXP 44
4383: NOT
4384: IFFALSE 4401
// SetTech ( tech_artifact , side , state_disabled ) ;
4386: LD_INT 24
4388: PPUSH
4389: LD_VAR 0 7
4393: PPUSH
4394: LD_INT 0
4396: PPUSH
4397: CALL_OW 322
// if mpSibBomb = 1 then
4401: LD_EXP 28
4405: PUSH
4406: LD_INT 1
4408: EQUAL
4409: IFFALSE 4428
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4411: LD_INT 25
4413: PPUSH
4414: LD_VAR 0 7
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 322
// end else
4426: GO 4443
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4428: LD_INT 25
4430: PPUSH
4431: LD_VAR 0 7
4435: PPUSH
4436: LD_INT 0
4438: PPUSH
4439: CALL_OW 322
// end ; if mpVehicles then
4443: LD_EXP 36
4447: IFFALSE 4546
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4449: LD_ADDR_VAR 0 3
4453: PUSH
4454: LD_VAR 0 7
4458: PPUSH
4459: LD_VAR 0 9
4463: PPUSH
4464: LD_EXP 36
4468: PPUSH
4469: CALL 5670 0 3
4473: PUSH
4474: FOR_IN
4475: IFFALSE 4544
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4477: LD_VAR 0 3
4481: PPUSH
4482: LD_INT 0
4484: PPUSH
4485: LD_INT 5
4487: PPUSH
4488: CALL_OW 12
4492: PPUSH
4493: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4497: LD_VAR 0 3
4501: PPUSH
4502: LD_EXP 21
4506: PUSH
4507: LD_VAR 0 8
4511: ARRAY
4512: PUSH
4513: LD_INT 1
4515: ARRAY
4516: PPUSH
4517: LD_EXP 21
4521: PUSH
4522: LD_VAR 0 8
4526: ARRAY
4527: PUSH
4528: LD_INT 2
4530: ARRAY
4531: PPUSH
4532: LD_INT 12
4534: PPUSH
4535: LD_INT 0
4537: PPUSH
4538: CALL_OW 50
// end ;
4542: GO 4474
4544: POP
4545: POP
// end ; uc_nation := nation ;
4546: LD_ADDR_OWVAR 21
4550: PUSH
4551: LD_VAR 0 9
4555: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4556: LD_ADDR_VAR 0 11
4560: PUSH
4561: LD_VAR 0 7
4565: PPUSH
4566: LD_VAR 0 9
4570: PPUSH
4571: LD_EXP 24
4575: PPUSH
4576: LD_EXP 25
4580: PPUSH
4581: CALL 5172 0 4
4585: ST_TO_ADDR
// for j in team do
4586: LD_ADDR_VAR 0 3
4590: PUSH
4591: LD_VAR 0 11
4595: PUSH
4596: FOR_IN
4597: IFFALSE 4646
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4599: LD_VAR 0 3
4603: PPUSH
4604: LD_EXP 21
4608: PUSH
4609: LD_VAR 0 8
4613: ARRAY
4614: PUSH
4615: LD_INT 1
4617: ARRAY
4618: PPUSH
4619: LD_EXP 21
4623: PUSH
4624: LD_VAR 0 8
4628: ARRAY
4629: PUSH
4630: LD_INT 2
4632: ARRAY
4633: PPUSH
4634: LD_INT 12
4636: PPUSH
4637: LD_INT 0
4639: PPUSH
4640: CALL_OW 50
4644: GO 4596
4646: POP
4647: POP
// if mpApemans then
4648: LD_EXP 30
4652: IFFALSE 4758
// begin for j := 1 to mpApemans do
4654: LD_ADDR_VAR 0 3
4658: PUSH
4659: DOUBLE
4660: LD_INT 1
4662: DEC
4663: ST_TO_ADDR
4664: LD_EXP 30
4668: PUSH
4669: FOR_TO
4670: IFFALSE 4756
// begin PrepareApeman ( - 5 ) ;
4672: LD_INT 5
4674: NEG
4675: PPUSH
4676: CALL 43979 0 1
// ape := CreateHuman ;
4680: LD_ADDR_VAR 0 10
4684: PUSH
4685: CALL_OW 44
4689: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4690: LD_ADDR_EXP 32
4694: PUSH
4695: LD_EXP 32
4699: PPUSH
4700: LD_VAR 0 8
4704: PPUSH
4705: LD_EXP 32
4709: PUSH
4710: LD_VAR 0 8
4714: ARRAY
4715: PPUSH
4716: LD_VAR 0 10
4720: PPUSH
4721: CALL 47731 0 2
4725: PPUSH
4726: CALL_OW 1
4730: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4731: LD_VAR 0 10
4735: PPUSH
4736: LD_EXP 31
4740: PUSH
4741: LD_VAR 0 8
4745: ARRAY
4746: PPUSH
4747: LD_INT 0
4749: PPUSH
4750: CALL_OW 49
// end ;
4754: GO 4669
4756: POP
4757: POP
// end ; end ;
4758: GO 3425
4760: POP
4761: POP
// if not mpTeamGame then
4762: LD_EXP 11
4766: NOT
4767: IFFALSE 4865
// begin for i := 1 to 8 do
4769: LD_ADDR_VAR 0 2
4773: PUSH
4774: DOUBLE
4775: LD_INT 1
4777: DEC
4778: ST_TO_ADDR
4779: LD_INT 8
4781: PUSH
4782: FOR_TO
4783: IFFALSE 4861
// for j := 1 to 8 do
4785: LD_ADDR_VAR 0 3
4789: PUSH
4790: DOUBLE
4791: LD_INT 1
4793: DEC
4794: ST_TO_ADDR
4795: LD_INT 8
4797: PUSH
4798: FOR_TO
4799: IFFALSE 4857
// if i <> j then
4801: LD_VAR 0 2
4805: PUSH
4806: LD_VAR 0 3
4810: NONEQUAL
4811: IFFALSE 4835
// SetAttitude ( i , j , att_neutral , true ) else
4813: LD_VAR 0 2
4817: PPUSH
4818: LD_VAR 0 3
4822: PPUSH
4823: LD_INT 0
4825: PPUSH
4826: LD_INT 1
4828: PPUSH
4829: CALL_OW 80
4833: GO 4855
// SetAttitude ( i , j , att_friend , true ) ;
4835: LD_VAR 0 2
4839: PPUSH
4840: LD_VAR 0 3
4844: PPUSH
4845: LD_INT 1
4847: PPUSH
4848: LD_INT 1
4850: PPUSH
4851: CALL_OW 80
4855: GO 4798
4857: POP
4858: POP
4859: GO 4782
4861: POP
4862: POP
// end else
4863: GO 5040
// begin if mpSharedVision then
4865: LD_EXP 16
4869: IFFALSE 4934
// begin for i in mpTeams do
4871: LD_ADDR_VAR 0 2
4875: PUSH
4876: LD_EXP 10
4880: PUSH
4881: FOR_IN
4882: IFFALSE 4932
// for j := 2 to i do
4884: LD_ADDR_VAR 0 3
4888: PUSH
4889: DOUBLE
4890: LD_INT 2
4892: DEC
4893: ST_TO_ADDR
4894: LD_VAR 0 2
4898: PUSH
4899: FOR_TO
4900: IFFALSE 4928
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4902: LD_VAR 0 2
4906: PUSH
4907: LD_VAR 0 3
4911: ARRAY
4912: PPUSH
4913: LD_VAR 0 2
4917: PUSH
4918: LD_INT 1
4920: ARRAY
4921: PPUSH
4922: CALL_OW 343
4926: GO 4899
4928: POP
4929: POP
4930: GO 4881
4932: POP
4933: POP
// end ; for i := 1 to 8 do
4934: LD_ADDR_VAR 0 2
4938: PUSH
4939: DOUBLE
4940: LD_INT 1
4942: DEC
4943: ST_TO_ADDR
4944: LD_INT 8
4946: PUSH
4947: FOR_TO
4948: IFFALSE 5038
// for j := 1 to 8 do
4950: LD_ADDR_VAR 0 3
4954: PUSH
4955: DOUBLE
4956: LD_INT 1
4958: DEC
4959: ST_TO_ADDR
4960: LD_INT 8
4962: PUSH
4963: FOR_TO
4964: IFFALSE 5034
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4966: LD_EXP 8
4970: PUSH
4971: LD_VAR 0 2
4975: ARRAY
4976: PUSH
4977: LD_EXP 8
4981: PUSH
4982: LD_VAR 0 3
4986: ARRAY
4987: EQUAL
4988: IFFALSE 5012
// SetAttitude ( i , j , att_friend , true ) else
4990: LD_VAR 0 2
4994: PPUSH
4995: LD_VAR 0 3
4999: PPUSH
5000: LD_INT 1
5002: PPUSH
5003: LD_INT 1
5005: PPUSH
5006: CALL_OW 80
5010: GO 5032
// SetAttitude ( i , j , att_enemy , true ) ;
5012: LD_VAR 0 2
5016: PPUSH
5017: LD_VAR 0 3
5021: PPUSH
5022: LD_INT 2
5024: PPUSH
5025: LD_INT 1
5027: PPUSH
5028: CALL_OW 80
5032: GO 4963
5034: POP
5035: POP
5036: GO 4947
5038: POP
5039: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5040: LD_ADDR_OWVAR 71
5044: PUSH
5045: LD_EXP 9
5049: PUSH
5050: LD_OWVAR 2
5054: ARRAY
5055: ST_TO_ADDR
// if IAmSpec then
5056: CALL_OW 531
5060: IFFALSE 5101
// begin FogOff ( true ) ;
5062: LD_INT 1
5064: PPUSH
5065: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5069: LD_EXP 29
5073: PUSH
5074: LD_INT 1
5076: ARRAY
5077: PUSH
5078: LD_INT 2
5080: DIV
5081: PPUSH
5082: LD_EXP 29
5086: PUSH
5087: LD_INT 2
5089: ARRAY
5090: PUSH
5091: LD_INT 2
5093: DIV
5094: PPUSH
5095: CALL_OW 86
// end else
5099: GO 5147
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5101: LD_EXP 21
5105: PUSH
5106: LD_EXP 7
5110: PUSH
5111: LD_OWVAR 2
5115: ARRAY
5116: ARRAY
5117: PUSH
5118: LD_INT 1
5120: ARRAY
5121: PPUSH
5122: LD_EXP 21
5126: PUSH
5127: LD_EXP 7
5131: PUSH
5132: LD_OWVAR 2
5136: ARRAY
5137: ARRAY
5138: PUSH
5139: LD_INT 2
5141: ARRAY
5142: PPUSH
5143: CALL_OW 86
// end ; BeginBuildUp ;
5147: CALL 6203 0 0
// enable ( mpActive ) ;
5151: LD_INT 100
5153: ENABLE_MARKED
// enable ( mpGameType ) ;
5154: LD_EXP 3
5158: ENABLE_MARKED
// mpGameActive := true ;
5159: LD_ADDR_EXP 39
5163: PUSH
5164: LD_INT 1
5166: ST_TO_ADDR
// end ;
5167: LD_VAR 0 1
5171: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5172: LD_INT 0
5174: PPUSH
5175: PPUSH
5176: PPUSH
5177: PPUSH
// result := [ ] ;
5178: LD_ADDR_VAR 0 5
5182: PUSH
5183: EMPTY
5184: ST_TO_ADDR
// class := class_soldier ;
5185: LD_ADDR_VAR 0 8
5189: PUSH
5190: LD_INT 1
5192: ST_TO_ADDR
// uc_side := side ;
5193: LD_ADDR_OWVAR 20
5197: PUSH
5198: LD_VAR 0 1
5202: ST_TO_ADDR
// uc_nation := nation ;
5203: LD_ADDR_OWVAR 21
5207: PUSH
5208: LD_VAR 0 2
5212: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5213: LD_ADDR_OWVAR 26
5217: PUSH
5218: LD_OWVAR 19
5222: PUSH
5223: LD_VAR 0 1
5227: ARRAY
5228: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5229: LD_INT 1
5231: PPUSH
5232: LD_INT 2
5234: PPUSH
5235: CALL_OW 12
5239: PPUSH
5240: LD_VAR 0 8
5244: PPUSH
5245: LD_VAR 0 4
5249: PUSH
5250: LD_INT 2
5252: PLUS
5253: PPUSH
5254: CALL_OW 380
// hc_importance := 105 ;
5258: LD_ADDR_OWVAR 32
5262: PUSH
5263: LD_INT 105
5265: ST_TO_ADDR
// if Multiplayer then
5266: LD_OWVAR 4
5270: IFFALSE 5310
// begin hc_gallery := MULTIAVATARS ;
5272: LD_ADDR_OWVAR 33
5276: PUSH
5277: LD_STRING MULTIAVATARS
5279: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5280: LD_ADDR_OWVAR 34
5284: PUSH
5285: LD_VAR 0 1
5289: PPUSH
5290: CALL_OW 525
5294: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5295: LD_ADDR_OWVAR 27
5299: PUSH
5300: LD_VAR 0 1
5304: PPUSH
5305: CALL_OW 526
5309: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5310: LD_ADDR_VAR 0 5
5314: PUSH
5315: LD_VAR 0 5
5319: PPUSH
5320: CALL_OW 44
5324: PPUSH
5325: CALL 47731 0 2
5329: ST_TO_ADDR
// if mpTeamPreset then
5330: LD_LOC 1
5334: IFFALSE 5430
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5336: LD_LOC 1
5340: PUSH
5341: LD_INT 1
5343: ARRAY
5344: PPUSH
5345: LD_VAR 0 5
5349: PUSH
5350: LD_VAR 0 5
5354: ARRAY
5355: PPUSH
5356: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5360: LD_VAR 0 5
5364: PUSH
5365: LD_VAR 0 5
5369: ARRAY
5370: PPUSH
5371: LD_INT 1
5373: PPUSH
5374: LD_LOC 1
5378: PUSH
5379: LD_INT 1
5381: ARRAY
5382: PPUSH
5383: LD_INT 1
5385: PPUSH
5386: CALL_OW 260
5390: PPUSH
5391: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5395: LD_VAR 0 5
5399: PUSH
5400: LD_VAR 0 5
5404: ARRAY
5405: PPUSH
5406: LD_INT 2
5408: PPUSH
5409: LD_LOC 1
5413: PUSH
5414: LD_INT 1
5416: ARRAY
5417: PPUSH
5418: LD_INT 2
5420: PPUSH
5421: CALL_OW 260
5425: PPUSH
5426: CALL_OW 239
// end ; InitHc_All ( ) ;
5430: CALL_OW 584
// class := 2 ;
5434: LD_ADDR_VAR 0 8
5438: PUSH
5439: LD_INT 2
5441: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5442: LD_ADDR_VAR 0 6
5446: PUSH
5447: DOUBLE
5448: LD_INT 1
5450: DEC
5451: ST_TO_ADDR
5452: LD_VAR 0 3
5456: PUSH
5457: LD_INT 1
5459: MINUS
5460: PUSH
5461: FOR_TO
5462: IFFALSE 5646
// begin PrepareHuman ( false , class , skill ) ;
5464: LD_INT 0
5466: PPUSH
5467: LD_VAR 0 8
5471: PPUSH
5472: LD_VAR 0 4
5476: PPUSH
5477: CALL_OW 380
// un := CreateHuman ;
5481: LD_ADDR_VAR 0 7
5485: PUSH
5486: CALL_OW 44
5490: ST_TO_ADDR
// result := Join ( result , un ) ;
5491: LD_ADDR_VAR 0 5
5495: PUSH
5496: LD_VAR 0 5
5500: PPUSH
5501: LD_VAR 0 7
5505: PPUSH
5506: CALL 47731 0 2
5510: ST_TO_ADDR
// if mpTeamPreset then
5511: LD_LOC 1
5515: IFFALSE 5611
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5517: LD_LOC 1
5521: PUSH
5522: LD_VAR 0 6
5526: PUSH
5527: LD_INT 1
5529: PLUS
5530: ARRAY
5531: PPUSH
5532: LD_VAR 0 7
5536: PPUSH
5537: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5541: LD_VAR 0 7
5545: PPUSH
5546: LD_INT 1
5548: PPUSH
5549: LD_LOC 1
5553: PUSH
5554: LD_VAR 0 6
5558: PUSH
5559: LD_INT 1
5561: PLUS
5562: ARRAY
5563: PPUSH
5564: LD_INT 1
5566: PPUSH
5567: CALL_OW 260
5571: PPUSH
5572: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5576: LD_VAR 0 7
5580: PPUSH
5581: LD_INT 2
5583: PPUSH
5584: LD_LOC 1
5588: PUSH
5589: LD_VAR 0 6
5593: PUSH
5594: LD_INT 1
5596: PLUS
5597: ARRAY
5598: PPUSH
5599: LD_INT 2
5601: PPUSH
5602: CALL_OW 260
5606: PPUSH
5607: CALL_OW 239
// end ; class := Inc ( class ) ;
5611: LD_ADDR_VAR 0 8
5615: PUSH
5616: LD_VAR 0 8
5620: PPUSH
5621: CALL 49092 0 1
5625: ST_TO_ADDR
// if class = 5 then
5626: LD_VAR 0 8
5630: PUSH
5631: LD_INT 5
5633: EQUAL
5634: IFFALSE 5644
// class := 1 ;
5636: LD_ADDR_VAR 0 8
5640: PUSH
5641: LD_INT 1
5643: ST_TO_ADDR
// end ;
5644: GO 5461
5646: POP
5647: POP
// if not mpTeamPreset then
5648: LD_LOC 1
5652: NOT
5653: IFFALSE 5665
// mpTeamPreset := result ;
5655: LD_ADDR_LOC 1
5659: PUSH
5660: LD_VAR 0 5
5664: ST_TO_ADDR
// end ;
5665: LD_VAR 0 5
5669: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5670: LD_INT 0
5672: PPUSH
5673: PPUSH
// result := [ ] ;
5674: LD_ADDR_VAR 0 4
5678: PUSH
5679: EMPTY
5680: ST_TO_ADDR
// if not vehicles then
5681: LD_VAR 0 3
5685: NOT
5686: IFFALSE 5690
// exit ;
5688: GO 5904
// for i := 1 to vehicles [ nation ] do
5690: LD_ADDR_VAR 0 5
5694: PUSH
5695: DOUBLE
5696: LD_INT 1
5698: DEC
5699: ST_TO_ADDR
5700: LD_VAR 0 3
5704: PUSH
5705: LD_VAR 0 2
5709: ARRAY
5710: PUSH
5711: FOR_TO
5712: IFFALSE 5902
// begin uc_side := side ;
5714: LD_ADDR_OWVAR 20
5718: PUSH
5719: LD_VAR 0 1
5723: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5724: LD_VAR 0 3
5728: PUSH
5729: LD_VAR 0 2
5733: ARRAY
5734: PUSH
5735: LD_VAR 0 5
5739: ARRAY
5740: PPUSH
5741: CALL 12122 0 1
5745: PUSH
5746: LD_INT 4
5748: GREATER
5749: IFFALSE 5779
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5751: LD_ADDR_OWVAR 21
5755: PUSH
5756: LD_VAR 0 3
5760: PUSH
5761: LD_VAR 0 2
5765: ARRAY
5766: PUSH
5767: LD_VAR 0 5
5771: ARRAY
5772: PUSH
5773: LD_INT 5
5775: ARRAY
5776: ST_TO_ADDR
5777: GO 5789
// uc_nation := nation ;
5779: LD_ADDR_OWVAR 21
5783: PUSH
5784: LD_VAR 0 2
5788: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5789: LD_VAR 0 3
5793: PUSH
5794: LD_VAR 0 2
5798: ARRAY
5799: PUSH
5800: LD_VAR 0 5
5804: ARRAY
5805: PUSH
5806: LD_INT 1
5808: ARRAY
5809: PPUSH
5810: LD_VAR 0 3
5814: PUSH
5815: LD_VAR 0 2
5819: ARRAY
5820: PUSH
5821: LD_VAR 0 5
5825: ARRAY
5826: PUSH
5827: LD_INT 2
5829: ARRAY
5830: PPUSH
5831: LD_VAR 0 3
5835: PUSH
5836: LD_VAR 0 2
5840: ARRAY
5841: PUSH
5842: LD_VAR 0 5
5846: ARRAY
5847: PUSH
5848: LD_INT 3
5850: ARRAY
5851: PPUSH
5852: LD_VAR 0 3
5856: PUSH
5857: LD_VAR 0 2
5861: ARRAY
5862: PUSH
5863: LD_VAR 0 5
5867: ARRAY
5868: PUSH
5869: LD_INT 4
5871: ARRAY
5872: PPUSH
5873: LD_INT 80
5875: PPUSH
5876: CALL 14860 0 5
// result := Join ( result , CreateVehicle ) ;
5880: LD_ADDR_VAR 0 4
5884: PUSH
5885: LD_VAR 0 4
5889: PPUSH
5890: CALL_OW 45
5894: PPUSH
5895: CALL 47731 0 2
5899: ST_TO_ADDR
// end ;
5900: GO 5711
5902: POP
5903: POP
// end ;
5904: LD_VAR 0 4
5908: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5909: LD_INT 0
5911: PPUSH
5912: PPUSH
// for i in mpBattleFlags do
5913: LD_ADDR_VAR 0 3
5917: PUSH
5918: LD_EXP 23
5922: PUSH
5923: FOR_IN
5924: IFFALSE 6001
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5926: LD_VAR 0 3
5930: PPUSH
5931: LD_INT 1
5933: PUSH
5934: LD_VAR 0 1
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 2
5945: PUSH
5946: LD_VAR 0 1
5950: PUSH
5951: LD_REAL  7.00000000000000E-0001
5954: MUL
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: LD_VAR 0 1
5967: PUSH
5968: LD_REAL  4.00000000000000E-0001
5971: MUL
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 20
5979: PUSH
5980: LD_VAR 0 1
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: PPUSH
5995: CALL_OW 423
5999: GO 5923
6001: POP
6002: POP
// end ;
6003: LD_VAR 0 2
6007: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6008: LD_INT 100
6010: IFFALSE 6105
6012: GO 6014
6014: DISABLE
6015: LD_INT 0
6017: PPUSH
6018: PPUSH
// begin if mpBattleFlag <= 0 then
6019: LD_EXP 22
6023: PUSH
6024: LD_INT 0
6026: LESSEQUAL
6027: IFFALSE 6031
// exit ;
6029: GO 6105
// strength := 100 ;
6031: LD_ADDR_VAR 0 2
6035: PUSH
6036: LD_INT 100
6038: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6039: LD_EXP 22
6043: PPUSH
6044: CALL_OW 67
// strength := Dec ( strength ) ;
6048: LD_ADDR_VAR 0 2
6052: PUSH
6053: LD_VAR 0 2
6057: PPUSH
6058: CALL 49114 0 1
6062: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6063: LD_VAR 0 2
6067: PPUSH
6068: CALL 5909 0 1
// until not strength ;
6072: LD_VAR 0 2
6076: NOT
6077: IFFALSE 6039
// for i in mpBattleFlags do
6079: LD_ADDR_VAR 0 1
6083: PUSH
6084: LD_EXP 23
6088: PUSH
6089: FOR_IN
6090: IFFALSE 6103
// KillBattleFlag ( i ) ;
6092: LD_VAR 0 1
6096: PPUSH
6097: CALL_OW 419
6101: GO 6089
6103: POP
6104: POP
// end ;
6105: PPOPN 2
6107: END
// every 0 0$1 marked mpActive do var side , tmp ;
6108: GO 6110
6110: DISABLE
6111: LD_INT 0
6113: PPUSH
6114: PPUSH
// begin if mpSibBomb <= 1 then
6115: LD_EXP 28
6119: PUSH
6120: LD_INT 1
6122: LESSEQUAL
6123: IFFALSE 6127
// exit ;
6125: GO 6200
// tmp := mpSibBomb ;
6127: LD_ADDR_VAR 0 2
6131: PUSH
6132: LD_EXP 28
6136: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6137: LD_INT 35
6139: PPUSH
6140: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6144: LD_ADDR_VAR 0 2
6148: PUSH
6149: LD_VAR 0 2
6153: PUSH
6154: LD_INT 35
6156: MINUS
6157: ST_TO_ADDR
// until not tmp ;
6158: LD_VAR 0 2
6162: NOT
6163: IFFALSE 6137
// for side := 1 to 8 do
6165: LD_ADDR_VAR 0 1
6169: PUSH
6170: DOUBLE
6171: LD_INT 1
6173: DEC
6174: ST_TO_ADDR
6175: LD_INT 8
6177: PUSH
6178: FOR_TO
6179: IFFALSE 6198
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6181: LD_INT 25
6183: PPUSH
6184: LD_VAR 0 1
6188: PPUSH
6189: LD_INT 1
6191: PPUSH
6192: CALL_OW 322
6196: GO 6178
6198: POP
6199: POP
// end ;
6200: PPOPN 2
6202: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6203: LD_INT 0
6205: PPUSH
6206: PPUSH
6207: PPUSH
// mpBuildUpTimeDelay := 0 ;
6208: LD_ADDR_EXP 46
6212: PUSH
6213: LD_INT 0
6215: ST_TO_ADDR
// if not mpBuildUpTime then
6216: LD_EXP 20
6220: NOT
6221: IFFALSE 6225
// exit ;
6223: GO 6408
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6225: LD_ADDR_EXP 46
6229: PUSH
6230: LD_INT 8400
6232: PUSH
6233: LD_INT 2100
6235: PUSH
6236: LD_EXP 20
6240: MUL
6241: PLUS
6242: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6243: LD_ADDR_EXP 47
6247: PUSH
6248: LD_INT 1
6250: ST_TO_ADDR
// for i := 1 to 8 do
6251: LD_ADDR_VAR 0 2
6255: PUSH
6256: DOUBLE
6257: LD_INT 1
6259: DEC
6260: ST_TO_ADDR
6261: LD_INT 8
6263: PUSH
6264: FOR_TO
6265: IFFALSE 6406
// if mpSidePositions [ i ] then
6267: LD_EXP 7
6271: PUSH
6272: LD_VAR 0 2
6276: ARRAY
6277: IFFALSE 6404
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6279: LD_EXP 19
6283: PUSH
6284: LD_EXP 7
6288: PUSH
6289: LD_VAR 0 2
6293: ARRAY
6294: ARRAY
6295: PPUSH
6296: LD_INT 5
6298: PPUSH
6299: CALL_OW 424
// for j := 1 to 8 do
6303: LD_ADDR_VAR 0 3
6307: PUSH
6308: DOUBLE
6309: LD_INT 1
6311: DEC
6312: ST_TO_ADDR
6313: LD_INT 8
6315: PUSH
6316: FOR_TO
6317: IFFALSE 6402
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6319: LD_EXP 7
6323: PUSH
6324: LD_VAR 0 3
6328: ARRAY
6329: PUSH
6330: LD_EXP 8
6334: PUSH
6335: LD_VAR 0 2
6339: ARRAY
6340: PUSH
6341: LD_EXP 8
6345: PUSH
6346: LD_VAR 0 3
6350: ARRAY
6351: NONEQUAL
6352: PUSH
6353: LD_EXP 11
6357: NOT
6358: PUSH
6359: LD_VAR 0 2
6363: PUSH
6364: LD_VAR 0 3
6368: NONEQUAL
6369: AND
6370: OR
6371: AND
6372: IFFALSE 6400
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6374: LD_VAR 0 3
6378: PPUSH
6379: LD_EXP 19
6383: PUSH
6384: LD_EXP 7
6388: PUSH
6389: LD_VAR 0 2
6393: ARRAY
6394: ARRAY
6395: PPUSH
6396: CALL_OW 333
6400: GO 6316
6402: POP
6403: POP
// end ;
6404: GO 6264
6406: POP
6407: POP
// end ;
6408: LD_VAR 0 1
6412: RET
// function EndBuildUp ; var i , j ; begin
6413: LD_INT 0
6415: PPUSH
6416: PPUSH
6417: PPUSH
// mpBuildUpTimeActive := false ;
6418: LD_ADDR_EXP 47
6422: PUSH
6423: LD_INT 0
6425: ST_TO_ADDR
// for i := 1 to 8 do
6426: LD_ADDR_VAR 0 2
6430: PUSH
6431: DOUBLE
6432: LD_INT 1
6434: DEC
6435: ST_TO_ADDR
6436: LD_INT 8
6438: PUSH
6439: FOR_TO
6440: IFFALSE 6581
// if mpSidePositions [ i ] then
6442: LD_EXP 7
6446: PUSH
6447: LD_VAR 0 2
6451: ARRAY
6452: IFFALSE 6579
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6454: LD_EXP 19
6458: PUSH
6459: LD_EXP 7
6463: PUSH
6464: LD_VAR 0 2
6468: ARRAY
6469: ARRAY
6470: PPUSH
6471: LD_INT 0
6473: PPUSH
6474: CALL_OW 424
// for j := 1 to 8 do
6478: LD_ADDR_VAR 0 3
6482: PUSH
6483: DOUBLE
6484: LD_INT 1
6486: DEC
6487: ST_TO_ADDR
6488: LD_INT 8
6490: PUSH
6491: FOR_TO
6492: IFFALSE 6577
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6494: LD_EXP 7
6498: PUSH
6499: LD_VAR 0 3
6503: ARRAY
6504: PUSH
6505: LD_EXP 8
6509: PUSH
6510: LD_VAR 0 2
6514: ARRAY
6515: PUSH
6516: LD_EXP 8
6520: PUSH
6521: LD_VAR 0 3
6525: ARRAY
6526: NONEQUAL
6527: PUSH
6528: LD_EXP 11
6532: NOT
6533: PUSH
6534: LD_VAR 0 2
6538: PUSH
6539: LD_VAR 0 3
6543: NONEQUAL
6544: AND
6545: OR
6546: AND
6547: IFFALSE 6575
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6549: LD_VAR 0 3
6553: PPUSH
6554: LD_EXP 19
6558: PUSH
6559: LD_EXP 7
6563: PUSH
6564: LD_VAR 0 2
6568: ARRAY
6569: ARRAY
6570: PPUSH
6571: CALL_OW 334
6575: GO 6491
6577: POP
6578: POP
// end ;
6579: GO 6439
6581: POP
6582: POP
// end ;
6583: LD_VAR 0 1
6587: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6588: LD_EXP 47
6592: IFFALSE 6767
6594: GO 6596
6596: DISABLE
6597: LD_INT 0
6599: PPUSH
6600: PPUSH
// begin for i := 1 to 8 do
6601: LD_ADDR_VAR 0 1
6605: PUSH
6606: DOUBLE
6607: LD_INT 1
6609: DEC
6610: ST_TO_ADDR
6611: LD_INT 8
6613: PUSH
6614: FOR_TO
6615: IFFALSE 6764
// if mpSidePositions [ i ] then
6617: LD_EXP 7
6621: PUSH
6622: LD_VAR 0 1
6626: ARRAY
6627: IFFALSE 6762
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6629: LD_ADDR_VAR 0 2
6633: PUSH
6634: LD_EXP 19
6638: PUSH
6639: LD_EXP 7
6643: PUSH
6644: LD_VAR 0 1
6648: ARRAY
6649: ARRAY
6650: PPUSH
6651: LD_INT 2
6653: PUSH
6654: LD_INT 21
6656: PUSH
6657: LD_INT 1
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: LD_INT 21
6666: PUSH
6667: LD_INT 2
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: LIST
6678: PUSH
6679: LD_INT 22
6681: PUSH
6682: LD_OWVAR 2
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: PPUSH
6695: CALL_OW 70
6699: PUSH
6700: FOR_IN
6701: IFFALSE 6760
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6703: LD_EXP 8
6707: PUSH
6708: LD_VAR 0 1
6712: ARRAY
6713: PUSH
6714: LD_EXP 8
6718: PUSH
6719: LD_OWVAR 2
6723: ARRAY
6724: NONEQUAL
6725: PUSH
6726: LD_EXP 11
6730: NOT
6731: PUSH
6732: LD_VAR 0 1
6736: PUSH
6737: LD_OWVAR 2
6741: NONEQUAL
6742: AND
6743: OR
6744: IFFALSE 6758
// ComMoveToArea ( un , BuildUpEscape ) ;
6746: LD_VAR 0 2
6750: PPUSH
6751: LD_INT 14
6753: PPUSH
6754: CALL_OW 113
6758: GO 6700
6760: POP
6761: POP
6762: GO 6614
6764: POP
6765: POP
// enable ;
6766: ENABLE
// end ;
6767: PPOPN 2
6769: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6770: LD_EXP 20
6774: IFFALSE 6824
6776: GO 6778
6778: DISABLE
6779: LD_INT 0
6781: PPUSH
// begin tmp := mpBuildUpTime ;
6782: LD_ADDR_VAR 0 1
6786: PUSH
6787: LD_EXP 20
6791: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6792: LD_INT 35
6794: PPUSH
6795: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6799: LD_ADDR_VAR 0 1
6803: PUSH
6804: LD_VAR 0 1
6808: PUSH
6809: LD_INT 35
6811: MINUS
6812: ST_TO_ADDR
// until not tmp ;
6813: LD_VAR 0 1
6817: NOT
6818: IFFALSE 6792
// EndBuildUp ;
6820: CALL 6413 0 0
// end ;
6824: PPOPN 1
6826: END
// every 0 0$1 trigger mpActive marked mpWin do
6827: LD_INT 100
6829: IFFALSE 6863
6831: GO 6833
6833: DISABLE
// begin if IAmServer then
6834: CALL_OW 518
6838: IFFALSE 6847
// wait ( 0 0$3 ) ;
6840: LD_INT 105
6842: PPUSH
6843: CALL_OW 67
// if Multiplayer then
6847: LD_OWVAR 4
6851: IFFALSE 6859
// YouWinInMultiplayer else
6853: CALL_OW 106
6857: GO 6863
// YouWin ;
6859: CALL_OW 103
// end ;
6863: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6864: LD_INT 0
6866: PPUSH
// result := false ;
6867: LD_ADDR_VAR 0 3
6871: PUSH
6872: LD_INT 0
6874: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6875: LD_VAR 0 1
6879: PUSH
6880: LD_INT 1
6882: DOUBLE
6883: EQUAL
6884: IFTRUE 6894
6886: LD_INT 5
6888: DOUBLE
6889: EQUAL
6890: IFTRUE 6894
6892: GO 6967
6894: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6895: LD_ADDR_VAR 0 3
6899: PUSH
6900: LD_INT 22
6902: PUSH
6903: LD_VAR 0 2
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 2
6914: PUSH
6915: LD_INT 21
6917: PUSH
6918: LD_INT 1
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: LD_INT 33
6927: PUSH
6928: LD_INT 3
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PUSH
6935: LD_INT 33
6937: PUSH
6938: LD_INT 5
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PPUSH
6955: CALL_OW 69
6959: PPUSH
6960: CALL 12122 0 1
6964: ST_TO_ADDR
// end ; GameTypeSurvival :
6965: GO 7202
6967: LD_INT 2
6969: DOUBLE
6970: EQUAL
6971: IFTRUE 6975
6973: GO 7103
6975: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_INT 22
6983: PUSH
6984: LD_VAR 0 2
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 2
6995: PUSH
6996: LD_INT 30
6998: PUSH
6999: LD_INT 0
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 30
7008: PUSH
7009: LD_INT 1
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PPUSH
7025: CALL_OW 69
7029: PPUSH
7030: CALL 12122 0 1
7034: PUSH
7035: LD_INT 22
7037: PUSH
7038: LD_VAR 0 2
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: LD_INT 21
7052: PUSH
7053: LD_INT 1
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 33
7062: PUSH
7063: LD_INT 3
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 33
7072: PUSH
7073: LD_INT 5
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PPUSH
7090: CALL_OW 69
7094: PPUSH
7095: CALL 12122 0 1
7099: AND
7100: ST_TO_ADDR
// end ; GameTypeKing :
7101: GO 7202
7103: LD_INT 3
7105: DOUBLE
7106: EQUAL
7107: IFTRUE 7111
7109: GO 7201
7111: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7112: LD_ADDR_VAR 0 3
7116: PUSH
7117: LD_INT 22
7119: PUSH
7120: LD_VAR 0 2
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_INT 2
7131: PUSH
7132: LD_INT 21
7134: PUSH
7135: LD_INT 1
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: LD_INT 33
7144: PUSH
7145: LD_INT 3
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: LD_INT 33
7154: PUSH
7155: LD_INT 5
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 69
7176: PPUSH
7177: CALL 12122 0 1
7181: PUSH
7182: LD_VAR 0 2
7186: PPUSH
7187: CALL 59367 0 1
7191: PUSH
7192: LD_EXP 35
7196: LESS
7197: AND
7198: ST_TO_ADDR
// end ; end ;
7199: GO 7202
7201: POP
// end ;
7202: LD_VAR 0 3
7206: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7207: LD_INT 100
7209: IFFALSE 7431
7211: GO 7213
7213: DISABLE
7214: LD_INT 0
7216: PPUSH
7217: PPUSH
// begin if Multiplayer then
7218: LD_OWVAR 4
7222: IFFALSE 7230
// SetPlayerSpectator ( ) else
7224: CALL_OW 572
7228: GO 7239
// FogOff ( your_side ) ;
7230: LD_OWVAR 2
7234: PPUSH
7235: CALL_OW 344
// repeat gameIsOn := false ;
7239: LD_ADDR_VAR 0 1
7243: PUSH
7244: LD_INT 0
7246: ST_TO_ADDR
// for i := 1 to 8 do
7247: LD_ADDR_VAR 0 2
7251: PUSH
7252: DOUBLE
7253: LD_INT 1
7255: DEC
7256: ST_TO_ADDR
7257: LD_INT 8
7259: PUSH
7260: FOR_TO
7261: IFFALSE 7383
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7263: LD_EXP 7
7267: PUSH
7268: LD_VAR 0 2
7272: ARRAY
7273: PUSH
7274: LD_VAR 0 2
7278: PPUSH
7279: CALL_OW 108
7283: AND
7284: PUSH
7285: LD_VAR 0 2
7289: PUSH
7290: LD_OWVAR 2
7294: NONEQUAL
7295: AND
7296: IFFALSE 7381
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7298: LD_EXP 8
7302: PUSH
7303: LD_VAR 0 2
7307: ARRAY
7308: NOT
7309: PUSH
7310: LD_EXP 8
7314: PUSH
7315: LD_VAR 0 2
7319: ARRAY
7320: PUSH
7321: LD_EXP 8
7325: PUSH
7326: LD_OWVAR 2
7330: ARRAY
7331: NONEQUAL
7332: PUSH
7333: LD_OWVAR 2
7337: PPUSH
7338: LD_VAR 0 2
7342: PPUSH
7343: CALL_OW 81
7347: PUSH
7348: LD_INT 1
7350: NONEQUAL
7351: AND
7352: OR
7353: IFFALSE 7381
// if HasPowerByGameType ( mpGameType , i ) then
7355: LD_EXP 3
7359: PPUSH
7360: LD_VAR 0 2
7364: PPUSH
7365: CALL 6864 0 2
7369: IFFALSE 7381
// begin gameIsOn := true ;
7371: LD_ADDR_VAR 0 1
7375: PUSH
7376: LD_INT 1
7378: ST_TO_ADDR
// break ;
7379: GO 7383
// end ;
7381: GO 7260
7383: POP
7384: POP
// wait ( 100 ) ;
7385: LD_INT 100
7387: PPUSH
7388: CALL_OW 67
// until not gameIsOn ;
7392: LD_VAR 0 1
7396: NOT
7397: IFFALSE 7239
// if IAmServer then
7399: CALL_OW 518
7403: IFFALSE 7412
// wait ( 0 0$3 ) ;
7405: LD_INT 105
7407: PPUSH
7408: CALL_OW 67
// if Multiplayer then
7412: LD_OWVAR 4
7416: IFFALSE 7424
// YouLostInMultiplayer else
7418: CALL_OW 107
7422: GO 7431
// YouLost (  ) ;
7424: LD_STRING 
7426: PPUSH
7427: CALL_OW 104
// end ;
7431: PPOPN 2
7433: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7434: LD_EXP 33
7438: IFFALSE 7814
7440: GO 7442
7442: DISABLE
7443: LD_INT 0
7445: PPUSH
7446: PPUSH
7447: PPUSH
7448: PPUSH
7449: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7450: LD_ADDR_VAR 0 5
7454: PUSH
7455: LD_INT 1
7457: PUSH
7458: LD_INT 2
7460: PUSH
7461: LD_INT 3
7463: PUSH
7464: LD_INT 4
7466: PUSH
7467: LD_INT 5
7469: PUSH
7470: LD_INT 6
7472: PUSH
7473: LD_INT 7
7475: PUSH
7476: LD_INT 8
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7489: LD_INT 350
7491: PPUSH
7492: CALL_OW 67
// for i := 1 to 8 do
7496: LD_ADDR_VAR 0 1
7500: PUSH
7501: DOUBLE
7502: LD_INT 1
7504: DEC
7505: ST_TO_ADDR
7506: LD_INT 8
7508: PUSH
7509: FOR_TO
7510: IFFALSE 7784
// begin j := sides [ i ] ;
7512: LD_ADDR_VAR 0 2
7516: PUSH
7517: LD_VAR 0 5
7521: PUSH
7522: LD_VAR 0 1
7526: ARRAY
7527: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7528: LD_EXP 40
7532: PUSH
7533: LD_VAR 0 2
7537: ARRAY
7538: PPUSH
7539: CALL 12122 0 1
7543: PUSH
7544: LD_VAR 0 2
7548: PPUSH
7549: CALL_OW 108
7553: AND
7554: PUSH
7555: LD_EXP 3
7559: PPUSH
7560: LD_VAR 0 2
7564: PPUSH
7565: CALL 6864 0 2
7569: AND
7570: IFFALSE 7782
// begin wait ( mpRespawn div 3 ) ;
7572: LD_EXP 33
7576: PUSH
7577: LD_INT 3
7579: DIV
7580: PPUSH
7581: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7585: LD_ADDR_VAR 0 3
7589: PUSH
7590: LD_INT 22
7592: PUSH
7593: LD_VAR 0 2
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PUSH
7602: LD_INT 50
7604: PUSH
7605: EMPTY
7606: LIST
7607: PUSH
7608: LD_INT 2
7610: PUSH
7611: LD_INT 30
7613: PUSH
7614: LD_INT 0
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: LD_INT 30
7623: PUSH
7624: LD_INT 1
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: LIST
7640: PPUSH
7641: CALL_OW 69
7645: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7646: LD_VAR 0 3
7650: NOT
7651: PUSH
7652: LD_VAR 0 2
7656: PPUSH
7657: CALL_OW 108
7661: NOT
7662: OR
7663: PUSH
7664: LD_EXP 3
7668: PPUSH
7669: LD_VAR 0 2
7673: PPUSH
7674: CALL 6864 0 2
7678: NOT
7679: OR
7680: IFFALSE 7684
// continue ;
7682: GO 7509
// spawn := tmp [ 1 ] ;
7684: LD_ADDR_VAR 0 4
7688: PUSH
7689: LD_VAR 0 3
7693: PUSH
7694: LD_INT 1
7696: ARRAY
7697: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7698: LD_EXP 40
7702: PUSH
7703: LD_VAR 0 2
7707: ARRAY
7708: PUSH
7709: LD_INT 1
7711: ARRAY
7712: PPUSH
7713: LD_VAR 0 4
7717: PPUSH
7718: CALL_OW 250
7722: PPUSH
7723: LD_VAR 0 4
7727: PPUSH
7728: CALL_OW 251
7732: PPUSH
7733: LD_INT 32
7735: PPUSH
7736: LD_INT 1
7738: PPUSH
7739: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7743: LD_ADDR_EXP 40
7747: PUSH
7748: LD_EXP 40
7752: PPUSH
7753: LD_VAR 0 2
7757: PPUSH
7758: LD_EXP 40
7762: PUSH
7763: LD_VAR 0 2
7767: ARRAY
7768: PPUSH
7769: LD_INT 1
7771: PPUSH
7772: CALL_OW 3
7776: PPUSH
7777: CALL_OW 1
7781: ST_TO_ADDR
// end ; end ;
7782: GO 7509
7784: POP
7785: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7786: LD_ADDR_VAR 0 5
7790: PUSH
7791: LD_VAR 0 5
7795: PPUSH
7796: LD_INT 1
7798: PPUSH
7799: LD_INT 8
7801: PPUSH
7802: LD_INT 1
7804: PPUSH
7805: CALL 14400 0 4
7809: ST_TO_ADDR
// until false ;
7810: LD_INT 0
7812: IFFALSE 7489
// end ;
7814: PPOPN 5
7816: END
// every 0 0$1 marked mpActive do
7817: GO 7819
7819: DISABLE
// begin enable ;
7820: ENABLE
// if not mpDisplayStrings then
7821: LD_EXP 38
7825: NOT
7826: IFFALSE 7837
// begin display_strings := [ ] ;
7828: LD_ADDR_OWVAR 47
7832: PUSH
7833: EMPTY
7834: ST_TO_ADDR
// exit ;
7835: GO 7847
// end ; display_strings := mpDisplayStrings ;
7837: LD_ADDR_OWVAR 47
7841: PUSH
7842: LD_EXP 38
7846: ST_TO_ADDR
// end ; end_of_file
7847: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7848: LD_INT 0
7850: PPUSH
7851: PPUSH
7852: PPUSH
7853: PPUSH
7854: PPUSH
7855: PPUSH
7856: PPUSH
7857: PPUSH
7858: PPUSH
// if GetType ( un ) = unit_vehicle then
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 247
7868: PUSH
7869: LD_INT 2
7871: EQUAL
7872: IFFALSE 7876
// exit ;
7874: GO 8508
// side := GetSide ( un ) ;
7876: LD_ADDR_VAR 0 9
7880: PUSH
7881: LD_VAR 0 1
7885: PPUSH
7886: CALL_OW 255
7890: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7891: LD_EXP 3
7895: PUSH
7896: LD_INT 2
7898: EQUAL
7899: IFFALSE 7975
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7901: LD_VAR 0 1
7905: PPUSH
7906: CALL_OW 266
7910: PUSH
7911: LD_INT 0
7913: PUSH
7914: LD_INT 1
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: IN
7921: IFFALSE 7975
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7923: LD_ADDR_VAR 0 3
7927: PUSH
7928: LD_INT 22
7930: PUSH
7931: LD_VAR 0 9
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: PUSH
7940: LD_INT 21
7942: PUSH
7943: LD_INT 1
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PPUSH
7954: CALL_OW 69
7958: PUSH
7959: FOR_IN
7960: IFFALSE 7973
// KillUnit ( i ) ;
7962: LD_VAR 0 3
7966: PPUSH
7967: CALL_OW 66
7971: GO 7959
7973: POP
7974: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7975: LD_VAR 0 1
7979: PPUSH
7980: CALL_OW 257
7984: PUSH
7985: LD_INT 12
7987: PUSH
7988: LD_INT 17
7990: PUSH
7991: LD_INT 15
7993: PUSH
7994: LD_INT 16
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: IN
8003: PUSH
8004: LD_VAR 0 1
8008: PPUSH
8009: CALL_OW 263
8013: PUSH
8014: LD_INT 5
8016: EQUAL
8017: OR
8018: IFFALSE 8237
// begin tag := 0 ;
8020: LD_ADDR_VAR 0 5
8024: PUSH
8025: LD_INT 0
8027: ST_TO_ADDR
// for i := 1 to 8 do
8028: LD_ADDR_VAR 0 3
8032: PUSH
8033: DOUBLE
8034: LD_INT 1
8036: DEC
8037: ST_TO_ADDR
8038: LD_INT 8
8040: PUSH
8041: FOR_TO
8042: IFFALSE 8076
// if un in mpApePosIndex [ i ] then
8044: LD_VAR 0 1
8048: PUSH
8049: LD_EXP 32
8053: PUSH
8054: LD_VAR 0 3
8058: ARRAY
8059: IN
8060: IFFALSE 8074
// begin tag := i ;
8062: LD_ADDR_VAR 0 5
8066: PUSH
8067: LD_VAR 0 3
8071: ST_TO_ADDR
// break ;
8072: GO 8076
// end ;
8074: GO 8041
8076: POP
8077: POP
// if not tag then
8078: LD_VAR 0 5
8082: NOT
8083: IFFALSE 8087
// exit ;
8085: GO 8508
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8087: LD_ADDR_VAR 0 7
8091: PUSH
8092: LD_EXP 31
8096: PUSH
8097: LD_EXP 7
8101: PUSH
8102: LD_VAR 0 5
8106: ARRAY
8107: ARRAY
8108: ST_TO_ADDR
// if not area then
8109: LD_VAR 0 7
8113: NOT
8114: IFFALSE 8118
// exit ;
8116: GO 8508
// wait ( 4 4$00 ) ;
8118: LD_INT 8400
8120: PPUSH
8121: CALL_OW 67
// repeat wait ( 10 ) ;
8125: LD_INT 10
8127: PPUSH
8128: CALL_OW 67
// until not mpBlockRespThread ;
8132: LD_EXP 45
8136: NOT
8137: IFFALSE 8125
// mpBlockRespThread := true ;
8139: LD_ADDR_EXP 45
8143: PUSH
8144: LD_INT 1
8146: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8147: LD_INT 0
8149: PPUSH
8150: CALL 43979 0 1
// ape := CreateHuman ;
8154: LD_ADDR_VAR 0 4
8158: PUSH
8159: CALL_OW 44
8163: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8164: LD_ADDR_EXP 32
8168: PUSH
8169: LD_EXP 32
8173: PPUSH
8174: LD_VAR 0 5
8178: PPUSH
8179: LD_EXP 32
8183: PUSH
8184: LD_VAR 0 5
8188: ARRAY
8189: PPUSH
8190: LD_VAR 0 4
8194: PPUSH
8195: CALL 47731 0 2
8199: PPUSH
8200: CALL_OW 1
8204: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8205: LD_VAR 0 4
8209: PPUSH
8210: LD_VAR 0 7
8214: PPUSH
8215: LD_INT 0
8217: PPUSH
8218: CALL_OW 49
// wait ( 10 ) ;
8222: LD_INT 10
8224: PPUSH
8225: CALL_OW 67
// mpBlockRespThread := false ;
8229: LD_ADDR_EXP 45
8233: PUSH
8234: LD_INT 0
8236: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8237: LD_VAR 0 1
8241: PPUSH
8242: CALL_OW 247
8246: PUSH
8247: LD_INT 1
8249: EQUAL
8250: PUSH
8251: LD_VAR 0 1
8255: PPUSH
8256: CALL_OW 248
8260: PUSH
8261: LD_INT 0
8263: GREATER
8264: AND
8265: IFFALSE 8508
// begin if not mpRespawn then
8267: LD_EXP 33
8271: NOT
8272: IFFALSE 8276
// exit ;
8274: GO 8508
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8276: LD_VAR 0 9
8280: PPUSH
8281: CALL_OW 108
8285: NOT
8286: PUSH
8287: LD_EXP 3
8291: PPUSH
8292: LD_VAR 0 9
8296: PPUSH
8297: CALL 6864 0 2
8301: NOT
8302: AND
8303: IFFALSE 8307
// exit ;
8305: GO 8508
// side := GetSide ( un ) ;
8307: LD_ADDR_VAR 0 9
8311: PUSH
8312: LD_VAR 0 1
8316: PPUSH
8317: CALL_OW 255
8321: ST_TO_ADDR
// nation := GetNation ( un ) ;
8322: LD_ADDR_VAR 0 8
8326: PUSH
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 248
8336: ST_TO_ADDR
// class := GetClass ( un ) ;
8337: LD_ADDR_VAR 0 6
8341: PUSH
8342: LD_VAR 0 1
8346: PPUSH
8347: CALL_OW 257
8351: ST_TO_ADDR
// if class > 4 then
8352: LD_VAR 0 6
8356: PUSH
8357: LD_INT 4
8359: GREATER
8360: IFFALSE 8370
// class := 1 ;
8362: LD_ADDR_VAR 0 6
8366: PUSH
8367: LD_INT 1
8369: ST_TO_ADDR
// repeat wait ( 10 ) ;
8370: LD_INT 10
8372: PPUSH
8373: CALL_OW 67
// until not mpBlockRespThread ;
8377: LD_EXP 45
8381: NOT
8382: IFFALSE 8370
// mpBlockRespThread := true ;
8384: LD_ADDR_EXP 45
8388: PUSH
8389: LD_INT 1
8391: ST_TO_ADDR
// uc_side := side ;
8392: LD_ADDR_OWVAR 20
8396: PUSH
8397: LD_VAR 0 9
8401: ST_TO_ADDR
// uc_nation := nation ;
8402: LD_ADDR_OWVAR 21
8406: PUSH
8407: LD_VAR 0 8
8411: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8412: LD_INT 0
8414: PPUSH
8415: LD_VAR 0 6
8419: PPUSH
8420: LD_INT 2
8422: PPUSH
8423: CALL_OW 380
// un := CreateHuman ;
8427: LD_ADDR_VAR 0 1
8431: PUSH
8432: CALL_OW 44
8436: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8437: LD_ADDR_EXP 40
8441: PUSH
8442: LD_EXP 40
8446: PPUSH
8447: LD_VAR 0 9
8451: PPUSH
8452: LD_EXP 40
8456: PUSH
8457: LD_VAR 0 9
8461: ARRAY
8462: PPUSH
8463: LD_EXP 40
8467: PUSH
8468: LD_VAR 0 9
8472: ARRAY
8473: PUSH
8474: LD_INT 1
8476: PLUS
8477: PPUSH
8478: LD_VAR 0 1
8482: PPUSH
8483: CALL_OW 1
8487: PPUSH
8488: CALL_OW 1
8492: ST_TO_ADDR
// wait ( 10 ) ;
8493: LD_INT 10
8495: PPUSH
8496: CALL_OW 67
// mpBlockRespThread := false ;
8500: LD_ADDR_EXP 45
8504: PUSH
8505: LD_INT 0
8507: ST_TO_ADDR
// end ; end ;
8508: LD_VAR 0 2
8512: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8513: LD_INT 0
8515: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8516: LD_VAR 0 1
8520: PPUSH
8521: CALL_OW 266
8525: PUSH
8526: LD_INT 0
8528: PUSH
8529: LD_INT 1
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: IN
8536: IFFALSE 8561
// SetBName ( building , @ & GetSide ( building ) ) ;
8538: LD_VAR 0 1
8542: PPUSH
8543: LD_STRING @
8545: PUSH
8546: LD_VAR 0 1
8550: PPUSH
8551: CALL_OW 255
8555: STR
8556: PPUSH
8557: CALL_OW 500
// end ;
8561: LD_VAR 0 2
8565: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8566: LD_INT 0
8568: PPUSH
8569: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8570: LD_EXP 3
8574: PUSH
8575: LD_INT 2
8577: EQUAL
8578: PUSH
8579: LD_VAR 0 1
8583: PPUSH
8584: CALL_OW 266
8588: PUSH
8589: LD_INT 0
8591: PUSH
8592: LD_INT 1
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: IN
8599: AND
8600: IFFALSE 8665
// begin KillUnit ( building ) ;
8602: LD_VAR 0 1
8606: PPUSH
8607: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8611: LD_ADDR_VAR 0 5
8615: PUSH
8616: LD_INT 22
8618: PUSH
8619: LD_VAR 0 2
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 21
8630: PUSH
8631: LD_INT 1
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PPUSH
8642: CALL_OW 69
8646: PUSH
8647: FOR_IN
8648: IFFALSE 8661
// KillUnit ( i ) ;
8650: LD_VAR 0 5
8654: PPUSH
8655: CALL_OW 66
8659: GO 8647
8661: POP
8662: POP
// exit ;
8663: GO 8710
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8665: LD_VAR 0 1
8669: PPUSH
8670: CALL_OW 266
8674: PUSH
8675: LD_INT 0
8677: PUSH
8678: LD_INT 1
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: IN
8685: IFFALSE 8710
// SetBName ( building , @ & GetSide ( building ) ) ;
8687: LD_VAR 0 1
8691: PPUSH
8692: LD_STRING @
8694: PUSH
8695: LD_VAR 0 1
8699: PPUSH
8700: CALL_OW 255
8704: STR
8705: PPUSH
8706: CALL_OW 500
// end ;
8710: LD_VAR 0 4
8714: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8715: LD_INT 0
8717: PPUSH
8718: PPUSH
8719: PPUSH
// if mpGameType <> GameTypeFamine then
8720: LD_EXP 3
8724: PUSH
8725: LD_INT 5
8727: NONEQUAL
8728: IFFALSE 8732
// exit ;
8730: GO 8946
// for i := 1 to mpGlobalOilDeposits do
8732: LD_ADDR_VAR 0 6
8736: PUSH
8737: DOUBLE
8738: LD_INT 1
8740: DEC
8741: ST_TO_ADDR
8742: LD_EXP 41
8746: PUSH
8747: FOR_TO
8748: IFFALSE 8944
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8750: LD_EXP 41
8754: PUSH
8755: LD_VAR 0 6
8759: ARRAY
8760: PUSH
8761: LD_INT 1
8763: ARRAY
8764: PPUSH
8765: LD_EXP 41
8769: PUSH
8770: LD_VAR 0 6
8774: ARRAY
8775: PUSH
8776: LD_INT 2
8778: ARRAY
8779: PPUSH
8780: CALL_OW 428
8784: PUSH
8785: LD_VAR 0 1
8789: EQUAL
8790: IFFALSE 8942
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8792: LD_ADDR_VAR 0 7
8796: PUSH
8797: LD_EXP 41
8801: PUSH
8802: LD_VAR 0 6
8806: ARRAY
8807: PUSH
8808: LD_INT 3
8810: ARRAY
8811: ST_TO_ADDR
// value := Dec ( value ) ;
8812: LD_ADDR_VAR 0 7
8816: PUSH
8817: LD_VAR 0 7
8821: PPUSH
8822: CALL 49114 0 1
8826: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8827: LD_ADDR_EXP 41
8831: PUSH
8832: LD_EXP 41
8836: PPUSH
8837: LD_VAR 0 6
8841: PPUSH
8842: LD_EXP 41
8846: PUSH
8847: LD_VAR 0 6
8851: ARRAY
8852: PPUSH
8853: LD_INT 3
8855: PPUSH
8856: LD_VAR 0 7
8860: PPUSH
8861: CALL_OW 1
8865: PPUSH
8866: CALL_OW 1
8870: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8871: LD_VAR 0 1
8875: PPUSH
8876: LD_VAR 0 7
8880: PPUSH
8881: CALL_OW 505
// if value = 0 then
8885: LD_VAR 0 7
8889: PUSH
8890: LD_INT 0
8892: EQUAL
8893: IFFALSE 8942
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8895: LD_EXP 41
8899: PUSH
8900: LD_VAR 0 6
8904: ARRAY
8905: PUSH
8906: LD_INT 1
8908: ARRAY
8909: PPUSH
8910: LD_EXP 41
8914: PUSH
8915: LD_VAR 0 6
8919: ARRAY
8920: PUSH
8921: LD_INT 2
8923: ARRAY
8924: PPUSH
8925: CALL_OW 63
// KillUnit ( building ) ;
8929: LD_VAR 0 1
8933: PPUSH
8934: CALL_OW 66
// exit ;
8938: POP
8939: POP
8940: GO 8946
// end ; end ; end ;
8942: GO 8747
8944: POP
8945: POP
// end ;
8946: LD_VAR 0 5
8950: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
8951: LD_INT 0
8953: PPUSH
8954: PPUSH
8955: PPUSH
// if mpGameType <> GameTypeFamine then
8956: LD_EXP 3
8960: PUSH
8961: LD_INT 5
8963: NONEQUAL
8964: IFFALSE 8968
// exit ;
8966: GO 9182
// for i := 1 to mpGlobalSibDeposits do
8968: LD_ADDR_VAR 0 6
8972: PUSH
8973: DOUBLE
8974: LD_INT 1
8976: DEC
8977: ST_TO_ADDR
8978: LD_EXP 42
8982: PUSH
8983: FOR_TO
8984: IFFALSE 9180
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
8986: LD_EXP 42
8990: PUSH
8991: LD_VAR 0 6
8995: ARRAY
8996: PUSH
8997: LD_INT 1
8999: ARRAY
9000: PPUSH
9001: LD_EXP 42
9005: PUSH
9006: LD_VAR 0 6
9010: ARRAY
9011: PUSH
9012: LD_INT 2
9014: ARRAY
9015: PPUSH
9016: CALL_OW 428
9020: PUSH
9021: LD_VAR 0 1
9025: EQUAL
9026: IFFALSE 9178
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9028: LD_ADDR_VAR 0 7
9032: PUSH
9033: LD_EXP 42
9037: PUSH
9038: LD_VAR 0 6
9042: ARRAY
9043: PUSH
9044: LD_INT 3
9046: ARRAY
9047: ST_TO_ADDR
// value := Dec ( value ) ;
9048: LD_ADDR_VAR 0 7
9052: PUSH
9053: LD_VAR 0 7
9057: PPUSH
9058: CALL 49114 0 1
9062: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9063: LD_ADDR_EXP 42
9067: PUSH
9068: LD_EXP 42
9072: PPUSH
9073: LD_VAR 0 6
9077: PPUSH
9078: LD_EXP 42
9082: PUSH
9083: LD_VAR 0 6
9087: ARRAY
9088: PPUSH
9089: LD_INT 3
9091: PPUSH
9092: LD_VAR 0 7
9096: PPUSH
9097: CALL_OW 1
9101: PPUSH
9102: CALL_OW 1
9106: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9107: LD_VAR 0 1
9111: PPUSH
9112: LD_VAR 0 7
9116: PPUSH
9117: CALL_OW 505
// if value = 0 then
9121: LD_VAR 0 7
9125: PUSH
9126: LD_INT 0
9128: EQUAL
9129: IFFALSE 9178
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9131: LD_EXP 42
9135: PUSH
9136: LD_VAR 0 6
9140: ARRAY
9141: PUSH
9142: LD_INT 1
9144: ARRAY
9145: PPUSH
9146: LD_EXP 42
9150: PUSH
9151: LD_VAR 0 6
9155: ARRAY
9156: PUSH
9157: LD_INT 2
9159: ARRAY
9160: PPUSH
9161: CALL_OW 63
// KillUnit ( building ) ;
9165: LD_VAR 0 1
9169: PPUSH
9170: CALL_OW 66
// exit ;
9174: POP
9175: POP
9176: GO 9182
// end ; end ; end ;
9178: GO 8983
9180: POP
9181: POP
// end ; end_of_file
9182: LD_VAR 0 5
9186: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9187: LD_EXP 39
9191: PUSH
9192: CALL 9397 0 0
9196: AND
9197: PUSH
9198: LD_OWVAR 4
9202: AND
9203: IFFALSE 9394
9205: GO 9207
9207: DISABLE
9208: LD_INT 0
9210: PPUSH
9211: PPUSH
// begin canWin := false ;
9212: LD_ADDR_VAR 0 2
9216: PUSH
9217: LD_INT 0
9219: ST_TO_ADDR
// if not HasPower ( your_side ) then
9220: LD_OWVAR 2
9224: PPUSH
9225: CALL 9437 0 1
9229: NOT
9230: IFFALSE 9241
// begin Multiplayer_Loose_Message ;
9232: CALL_OW 521
// enable ( mpLose ) ;
9236: LD_INT 102
9238: ENABLE_MARKED
// end else
9239: GO 9394
// begin canWin := true ;
9241: LD_ADDR_VAR 0 2
9245: PUSH
9246: LD_INT 1
9248: ST_TO_ADDR
// for i := 1 to 8 do
9249: LD_ADDR_VAR 0 1
9253: PUSH
9254: DOUBLE
9255: LD_INT 1
9257: DEC
9258: ST_TO_ADDR
9259: LD_INT 8
9261: PUSH
9262: FOR_TO
9263: IFFALSE 9380
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9265: LD_EXP 7
9269: PUSH
9270: LD_VAR 0 1
9274: ARRAY
9275: PUSH
9276: LD_VAR 0 1
9280: PPUSH
9281: CALL_OW 108
9285: AND
9286: PUSH
9287: LD_VAR 0 1
9291: PUSH
9292: LD_OWVAR 2
9296: NONEQUAL
9297: AND
9298: IFFALSE 9378
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9300: LD_EXP 8
9304: PUSH
9305: LD_VAR 0 1
9309: ARRAY
9310: NOT
9311: PUSH
9312: LD_EXP 8
9316: PUSH
9317: LD_VAR 0 1
9321: ARRAY
9322: PUSH
9323: LD_EXP 8
9327: PUSH
9328: LD_OWVAR 2
9332: ARRAY
9333: NONEQUAL
9334: PUSH
9335: LD_OWVAR 2
9339: PPUSH
9340: LD_VAR 0 1
9344: PPUSH
9345: CALL_OW 81
9349: PUSH
9350: LD_INT 1
9352: NONEQUAL
9353: AND
9354: OR
9355: IFFALSE 9378
// if HasPower ( i ) then
9357: LD_VAR 0 1
9361: PPUSH
9362: CALL 9437 0 1
9366: IFFALSE 9378
// begin canWin := false ;
9368: LD_ADDR_VAR 0 2
9372: PUSH
9373: LD_INT 0
9375: ST_TO_ADDR
// break ;
9376: GO 9380
// end ;
9378: GO 9262
9380: POP
9381: POP
// if canWin then
9382: LD_VAR 0 2
9386: IFFALSE 9393
// enable ( mpWin ) else
9388: LD_INT 101
9390: ENABLE_MARKED
9391: GO 9394
// enable ;
9393: ENABLE
// end ; end ;
9394: PPOPN 2
9396: END
// function CanWinLoose ; begin
9397: LD_INT 0
9399: PPUSH
// result := true ;
9400: LD_ADDR_VAR 0 1
9404: PUSH
9405: LD_INT 1
9407: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9408: CALL_OW 531
9412: PUSH
9413: CALL_OW 519
9417: PUSH
9418: LD_INT 1
9420: GREATER
9421: AND
9422: IFFALSE 9432
// result := false ;
9424: LD_ADDR_VAR 0 1
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
// end ;
9432: LD_VAR 0 1
9436: RET
// function HasPower ( i ) ; begin
9437: LD_INT 0
9439: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9440: LD_ADDR_VAR 0 2
9444: PUSH
9445: LD_INT 22
9447: PUSH
9448: LD_VAR 0 1
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PUSH
9457: LD_INT 2
9459: PUSH
9460: LD_INT 21
9462: PUSH
9463: LD_INT 1
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PUSH
9470: LD_INT 33
9472: PUSH
9473: LD_INT 3
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 33
9482: PUSH
9483: LD_INT 5
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PPUSH
9500: CALL_OW 69
9504: ST_TO_ADDR
// end ; end_of_file
9505: LD_VAR 0 2
9509: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9510: LD_EXP 39
9514: IFFALSE 9557
9516: GO 9518
9518: DISABLE
9519: LD_INT 0
9521: PPUSH
// begin for i := 1 to 8 do
9522: LD_ADDR_VAR 0 1
9526: PUSH
9527: DOUBLE
9528: LD_INT 1
9530: DEC
9531: ST_TO_ADDR
9532: LD_INT 8
9534: PUSH
9535: FOR_TO
9536: IFFALSE 9555
// SetRestrict ( b_depot , i , state_disabled ) ;
9538: LD_INT 0
9540: PPUSH
9541: LD_VAR 0 1
9545: PPUSH
9546: LD_INT 0
9548: PPUSH
9549: CALL_OW 324
9553: GO 9535
9555: POP
9556: POP
// end ;
9557: PPOPN 1
9559: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9560: LD_EXP 39
9564: PUSH
9565: CALL 9770 0 0
9569: AND
9570: PUSH
9571: LD_OWVAR 4
9575: AND
9576: IFFALSE 9767
9578: GO 9580
9580: DISABLE
9581: LD_INT 0
9583: PPUSH
9584: PPUSH
// begin canWin := false ;
9585: LD_ADDR_VAR 0 2
9589: PUSH
9590: LD_INT 0
9592: ST_TO_ADDR
// if not HasPower ( your_side ) then
9593: LD_OWVAR 2
9597: PPUSH
9598: CALL 9810 0 1
9602: NOT
9603: IFFALSE 9614
// begin Multiplayer_Loose_Message ;
9605: CALL_OW 521
// enable ( mpLose ) ;
9609: LD_INT 102
9611: ENABLE_MARKED
// end else
9612: GO 9767
// begin canWin := true ;
9614: LD_ADDR_VAR 0 2
9618: PUSH
9619: LD_INT 1
9621: ST_TO_ADDR
// for i := 1 to 8 do
9622: LD_ADDR_VAR 0 1
9626: PUSH
9627: DOUBLE
9628: LD_INT 1
9630: DEC
9631: ST_TO_ADDR
9632: LD_INT 8
9634: PUSH
9635: FOR_TO
9636: IFFALSE 9753
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9638: LD_EXP 7
9642: PUSH
9643: LD_VAR 0 1
9647: ARRAY
9648: PUSH
9649: LD_VAR 0 1
9653: PPUSH
9654: CALL_OW 108
9658: AND
9659: PUSH
9660: LD_VAR 0 1
9664: PUSH
9665: LD_OWVAR 2
9669: NONEQUAL
9670: AND
9671: IFFALSE 9751
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9673: LD_EXP 8
9677: PUSH
9678: LD_VAR 0 1
9682: ARRAY
9683: NOT
9684: PUSH
9685: LD_EXP 8
9689: PUSH
9690: LD_VAR 0 1
9694: ARRAY
9695: PUSH
9696: LD_EXP 8
9700: PUSH
9701: LD_OWVAR 2
9705: ARRAY
9706: NONEQUAL
9707: PUSH
9708: LD_OWVAR 2
9712: PPUSH
9713: LD_VAR 0 1
9717: PPUSH
9718: CALL_OW 81
9722: PUSH
9723: LD_INT 1
9725: NONEQUAL
9726: AND
9727: OR
9728: IFFALSE 9751
// if HasPower ( i ) then
9730: LD_VAR 0 1
9734: PPUSH
9735: CALL 9810 0 1
9739: IFFALSE 9751
// begin canWin := false ;
9741: LD_ADDR_VAR 0 2
9745: PUSH
9746: LD_INT 0
9748: ST_TO_ADDR
// break ;
9749: GO 9753
// end ;
9751: GO 9635
9753: POP
9754: POP
// if canWin then
9755: LD_VAR 0 2
9759: IFFALSE 9766
// enable ( mpWin ) else
9761: LD_INT 101
9763: ENABLE_MARKED
9764: GO 9767
// enable ;
9766: ENABLE
// end ; end ;
9767: PPOPN 2
9769: END
// function CanWinLoose ; begin
9770: LD_INT 0
9772: PPUSH
// result := true ;
9773: LD_ADDR_VAR 0 1
9777: PUSH
9778: LD_INT 1
9780: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9781: CALL_OW 531
9785: PUSH
9786: CALL_OW 519
9790: PUSH
9791: LD_INT 1
9793: GREATER
9794: AND
9795: IFFALSE 9805
// result := false ;
9797: LD_ADDR_VAR 0 1
9801: PUSH
9802: LD_INT 0
9804: ST_TO_ADDR
// end ;
9805: LD_VAR 0 1
9809: RET
// function HasPower ( i ) ; begin
9810: LD_INT 0
9812: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9813: LD_INT 22
9815: PUSH
9816: LD_VAR 0 1
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PUSH
9825: LD_INT 2
9827: PUSH
9828: LD_INT 30
9830: PUSH
9831: LD_INT 0
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PUSH
9838: LD_INT 30
9840: PUSH
9841: LD_INT 1
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: LIST
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PPUSH
9857: CALL_OW 69
9861: NOT
9862: IFFALSE 9866
// exit ;
9864: GO 9931
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9866: LD_ADDR_VAR 0 2
9870: PUSH
9871: LD_INT 22
9873: PUSH
9874: LD_VAR 0 1
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PUSH
9883: LD_INT 2
9885: PUSH
9886: LD_INT 21
9888: PUSH
9889: LD_INT 1
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PUSH
9896: LD_INT 33
9898: PUSH
9899: LD_INT 3
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PUSH
9906: LD_INT 33
9908: PUSH
9909: LD_INT 5
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PPUSH
9926: CALL_OW 69
9930: ST_TO_ADDR
// end ; end_of_file
9931: LD_VAR 0 2
9935: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9936: LD_INT 0
9938: PPUSH
9939: PPUSH
// if exist_mode then
9940: LD_VAR 0 2
9944: IFFALSE 9990
// begin unit := CreateCharacter ( prefix & ident ) ;
9946: LD_ADDR_VAR 0 5
9950: PUSH
9951: LD_VAR 0 3
9955: PUSH
9956: LD_VAR 0 1
9960: STR
9961: PPUSH
9962: CALL_OW 34
9966: ST_TO_ADDR
// if unit then
9967: LD_VAR 0 5
9971: IFFALSE 9988
// DeleteCharacters ( prefix & ident ) ;
9973: LD_VAR 0 3
9977: PUSH
9978: LD_VAR 0 1
9982: STR
9983: PPUSH
9984: CALL_OW 40
// end else
9988: GO 10005
// unit := NewCharacter ( ident ) ;
9990: LD_ADDR_VAR 0 5
9994: PUSH
9995: LD_VAR 0 1
9999: PPUSH
10000: CALL_OW 25
10004: ST_TO_ADDR
// result := unit ;
10005: LD_ADDR_VAR 0 4
10009: PUSH
10010: LD_VAR 0 5
10014: ST_TO_ADDR
// end ;
10015: LD_VAR 0 4
10019: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10020: LD_INT 0
10022: PPUSH
10023: PPUSH
// if exist_mode then
10024: LD_VAR 0 2
10028: IFFALSE 10053
// unit := CreateCharacter ( prefix & ident ) else
10030: LD_ADDR_VAR 0 5
10034: PUSH
10035: LD_VAR 0 3
10039: PUSH
10040: LD_VAR 0 1
10044: STR
10045: PPUSH
10046: CALL_OW 34
10050: ST_TO_ADDR
10051: GO 10068
// unit := NewCharacter ( ident ) ;
10053: LD_ADDR_VAR 0 5
10057: PUSH
10058: LD_VAR 0 1
10062: PPUSH
10063: CALL_OW 25
10067: ST_TO_ADDR
// result := unit ;
10068: LD_ADDR_VAR 0 4
10072: PUSH
10073: LD_VAR 0 5
10077: ST_TO_ADDR
// end ;
10078: LD_VAR 0 4
10082: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10083: LD_INT 0
10085: PPUSH
10086: PPUSH
// if not side or not nation then
10087: LD_VAR 0 1
10091: NOT
10092: PUSH
10093: LD_VAR 0 2
10097: NOT
10098: OR
10099: IFFALSE 10103
// exit ;
10101: GO 10871
// case nation of nation_american :
10103: LD_VAR 0 2
10107: PUSH
10108: LD_INT 1
10110: DOUBLE
10111: EQUAL
10112: IFTRUE 10116
10114: GO 10330
10116: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10117: LD_ADDR_VAR 0 4
10121: PUSH
10122: LD_INT 35
10124: PUSH
10125: LD_INT 45
10127: PUSH
10128: LD_INT 46
10130: PUSH
10131: LD_INT 47
10133: PUSH
10134: LD_INT 82
10136: PUSH
10137: LD_INT 83
10139: PUSH
10140: LD_INT 84
10142: PUSH
10143: LD_INT 85
10145: PUSH
10146: LD_INT 86
10148: PUSH
10149: LD_INT 1
10151: PUSH
10152: LD_INT 2
10154: PUSH
10155: LD_INT 6
10157: PUSH
10158: LD_INT 15
10160: PUSH
10161: LD_INT 16
10163: PUSH
10164: LD_INT 7
10166: PUSH
10167: LD_INT 12
10169: PUSH
10170: LD_INT 13
10172: PUSH
10173: LD_INT 10
10175: PUSH
10176: LD_INT 14
10178: PUSH
10179: LD_INT 20
10181: PUSH
10182: LD_INT 21
10184: PUSH
10185: LD_INT 22
10187: PUSH
10188: LD_INT 25
10190: PUSH
10191: LD_INT 32
10193: PUSH
10194: LD_INT 27
10196: PUSH
10197: LD_INT 36
10199: PUSH
10200: LD_INT 69
10202: PUSH
10203: LD_INT 39
10205: PUSH
10206: LD_INT 34
10208: PUSH
10209: LD_INT 40
10211: PUSH
10212: LD_INT 48
10214: PUSH
10215: LD_INT 49
10217: PUSH
10218: LD_INT 50
10220: PUSH
10221: LD_INT 51
10223: PUSH
10224: LD_INT 52
10226: PUSH
10227: LD_INT 53
10229: PUSH
10230: LD_INT 54
10232: PUSH
10233: LD_INT 55
10235: PUSH
10236: LD_INT 56
10238: PUSH
10239: LD_INT 57
10241: PUSH
10242: LD_INT 58
10244: PUSH
10245: LD_INT 59
10247: PUSH
10248: LD_INT 60
10250: PUSH
10251: LD_INT 61
10253: PUSH
10254: LD_INT 62
10256: PUSH
10257: LD_INT 80
10259: PUSH
10260: LD_INT 82
10262: PUSH
10263: LD_INT 83
10265: PUSH
10266: LD_INT 84
10268: PUSH
10269: LD_INT 85
10271: PUSH
10272: LD_INT 86
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: ST_TO_ADDR
10328: GO 10795
10330: LD_INT 2
10332: DOUBLE
10333: EQUAL
10334: IFTRUE 10338
10336: GO 10564
10338: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10339: LD_ADDR_VAR 0 4
10343: PUSH
10344: LD_INT 35
10346: PUSH
10347: LD_INT 45
10349: PUSH
10350: LD_INT 46
10352: PUSH
10353: LD_INT 47
10355: PUSH
10356: LD_INT 82
10358: PUSH
10359: LD_INT 83
10361: PUSH
10362: LD_INT 84
10364: PUSH
10365: LD_INT 85
10367: PUSH
10368: LD_INT 87
10370: PUSH
10371: LD_INT 70
10373: PUSH
10374: LD_INT 1
10376: PUSH
10377: LD_INT 11
10379: PUSH
10380: LD_INT 3
10382: PUSH
10383: LD_INT 4
10385: PUSH
10386: LD_INT 5
10388: PUSH
10389: LD_INT 6
10391: PUSH
10392: LD_INT 15
10394: PUSH
10395: LD_INT 18
10397: PUSH
10398: LD_INT 7
10400: PUSH
10401: LD_INT 17
10403: PUSH
10404: LD_INT 8
10406: PUSH
10407: LD_INT 20
10409: PUSH
10410: LD_INT 21
10412: PUSH
10413: LD_INT 22
10415: PUSH
10416: LD_INT 72
10418: PUSH
10419: LD_INT 26
10421: PUSH
10422: LD_INT 69
10424: PUSH
10425: LD_INT 39
10427: PUSH
10428: LD_INT 40
10430: PUSH
10431: LD_INT 41
10433: PUSH
10434: LD_INT 42
10436: PUSH
10437: LD_INT 43
10439: PUSH
10440: LD_INT 48
10442: PUSH
10443: LD_INT 49
10445: PUSH
10446: LD_INT 50
10448: PUSH
10449: LD_INT 51
10451: PUSH
10452: LD_INT 52
10454: PUSH
10455: LD_INT 53
10457: PUSH
10458: LD_INT 54
10460: PUSH
10461: LD_INT 55
10463: PUSH
10464: LD_INT 56
10466: PUSH
10467: LD_INT 60
10469: PUSH
10470: LD_INT 61
10472: PUSH
10473: LD_INT 62
10475: PUSH
10476: LD_INT 66
10478: PUSH
10479: LD_INT 67
10481: PUSH
10482: LD_INT 68
10484: PUSH
10485: LD_INT 81
10487: PUSH
10488: LD_INT 82
10490: PUSH
10491: LD_INT 83
10493: PUSH
10494: LD_INT 84
10496: PUSH
10497: LD_INT 85
10499: PUSH
10500: LD_INT 87
10502: PUSH
10503: LD_INT 88
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: ST_TO_ADDR
10562: GO 10795
10564: LD_INT 3
10566: DOUBLE
10567: EQUAL
10568: IFTRUE 10572
10570: GO 10794
10572: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10573: LD_ADDR_VAR 0 4
10577: PUSH
10578: LD_INT 46
10580: PUSH
10581: LD_INT 47
10583: PUSH
10584: LD_INT 1
10586: PUSH
10587: LD_INT 2
10589: PUSH
10590: LD_INT 82
10592: PUSH
10593: LD_INT 83
10595: PUSH
10596: LD_INT 84
10598: PUSH
10599: LD_INT 85
10601: PUSH
10602: LD_INT 86
10604: PUSH
10605: LD_INT 11
10607: PUSH
10608: LD_INT 9
10610: PUSH
10611: LD_INT 20
10613: PUSH
10614: LD_INT 19
10616: PUSH
10617: LD_INT 21
10619: PUSH
10620: LD_INT 24
10622: PUSH
10623: LD_INT 22
10625: PUSH
10626: LD_INT 25
10628: PUSH
10629: LD_INT 28
10631: PUSH
10632: LD_INT 29
10634: PUSH
10635: LD_INT 30
10637: PUSH
10638: LD_INT 31
10640: PUSH
10641: LD_INT 37
10643: PUSH
10644: LD_INT 38
10646: PUSH
10647: LD_INT 32
10649: PUSH
10650: LD_INT 27
10652: PUSH
10653: LD_INT 33
10655: PUSH
10656: LD_INT 69
10658: PUSH
10659: LD_INT 39
10661: PUSH
10662: LD_INT 34
10664: PUSH
10665: LD_INT 40
10667: PUSH
10668: LD_INT 71
10670: PUSH
10671: LD_INT 23
10673: PUSH
10674: LD_INT 44
10676: PUSH
10677: LD_INT 48
10679: PUSH
10680: LD_INT 49
10682: PUSH
10683: LD_INT 50
10685: PUSH
10686: LD_INT 51
10688: PUSH
10689: LD_INT 52
10691: PUSH
10692: LD_INT 53
10694: PUSH
10695: LD_INT 54
10697: PUSH
10698: LD_INT 55
10700: PUSH
10701: LD_INT 56
10703: PUSH
10704: LD_INT 57
10706: PUSH
10707: LD_INT 58
10709: PUSH
10710: LD_INT 59
10712: PUSH
10713: LD_INT 63
10715: PUSH
10716: LD_INT 64
10718: PUSH
10719: LD_INT 65
10721: PUSH
10722: LD_INT 82
10724: PUSH
10725: LD_INT 83
10727: PUSH
10728: LD_INT 84
10730: PUSH
10731: LD_INT 85
10733: PUSH
10734: LD_INT 86
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: ST_TO_ADDR
10792: GO 10795
10794: POP
// if state > - 1 and state < 3 then
10795: LD_VAR 0 3
10799: PUSH
10800: LD_INT 1
10802: NEG
10803: GREATER
10804: PUSH
10805: LD_VAR 0 3
10809: PUSH
10810: LD_INT 3
10812: LESS
10813: AND
10814: IFFALSE 10871
// for i in result do
10816: LD_ADDR_VAR 0 5
10820: PUSH
10821: LD_VAR 0 4
10825: PUSH
10826: FOR_IN
10827: IFFALSE 10869
// if GetTech ( i , side ) <> state then
10829: LD_VAR 0 5
10833: PPUSH
10834: LD_VAR 0 1
10838: PPUSH
10839: CALL_OW 321
10843: PUSH
10844: LD_VAR 0 3
10848: NONEQUAL
10849: IFFALSE 10867
// result := result diff i ;
10851: LD_ADDR_VAR 0 4
10855: PUSH
10856: LD_VAR 0 4
10860: PUSH
10861: LD_VAR 0 5
10865: DIFF
10866: ST_TO_ADDR
10867: GO 10826
10869: POP
10870: POP
// end ;
10871: LD_VAR 0 4
10875: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10876: LD_INT 0
10878: PPUSH
10879: PPUSH
10880: PPUSH
// result := true ;
10881: LD_ADDR_VAR 0 3
10885: PUSH
10886: LD_INT 1
10888: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10889: LD_ADDR_VAR 0 5
10893: PUSH
10894: LD_VAR 0 2
10898: PPUSH
10899: CALL_OW 480
10903: ST_TO_ADDR
// if not tmp then
10904: LD_VAR 0 5
10908: NOT
10909: IFFALSE 10913
// exit ;
10911: GO 10962
// for i in tmp do
10913: LD_ADDR_VAR 0 4
10917: PUSH
10918: LD_VAR 0 5
10922: PUSH
10923: FOR_IN
10924: IFFALSE 10960
// if GetTech ( i , side ) <> state_researched then
10926: LD_VAR 0 4
10930: PPUSH
10931: LD_VAR 0 1
10935: PPUSH
10936: CALL_OW 321
10940: PUSH
10941: LD_INT 2
10943: NONEQUAL
10944: IFFALSE 10958
// begin result := false ;
10946: LD_ADDR_VAR 0 3
10950: PUSH
10951: LD_INT 0
10953: ST_TO_ADDR
// exit ;
10954: POP
10955: POP
10956: GO 10962
// end ;
10958: GO 10923
10960: POP
10961: POP
// end ;
10962: LD_VAR 0 3
10966: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10967: LD_INT 0
10969: PPUSH
10970: PPUSH
10971: PPUSH
10972: PPUSH
10973: PPUSH
10974: PPUSH
10975: PPUSH
10976: PPUSH
10977: PPUSH
10978: PPUSH
10979: PPUSH
10980: PPUSH
10981: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10982: LD_VAR 0 1
10986: NOT
10987: PUSH
10988: LD_VAR 0 1
10992: PPUSH
10993: CALL_OW 257
10997: PUSH
10998: LD_INT 9
11000: NONEQUAL
11001: OR
11002: IFFALSE 11006
// exit ;
11004: GO 11579
// side := GetSide ( unit ) ;
11006: LD_ADDR_VAR 0 9
11010: PUSH
11011: LD_VAR 0 1
11015: PPUSH
11016: CALL_OW 255
11020: ST_TO_ADDR
// tech_space := tech_spacanom ;
11021: LD_ADDR_VAR 0 12
11025: PUSH
11026: LD_INT 29
11028: ST_TO_ADDR
// tech_time := tech_taurad ;
11029: LD_ADDR_VAR 0 13
11033: PUSH
11034: LD_INT 28
11036: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11037: LD_ADDR_VAR 0 11
11041: PUSH
11042: LD_VAR 0 1
11046: PPUSH
11047: CALL_OW 310
11051: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11052: LD_VAR 0 11
11056: PPUSH
11057: CALL_OW 247
11061: PUSH
11062: LD_INT 2
11064: EQUAL
11065: IFFALSE 11069
// exit ;
11067: GO 11579
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11069: LD_ADDR_VAR 0 8
11073: PUSH
11074: LD_INT 81
11076: PUSH
11077: LD_VAR 0 9
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 3
11088: PUSH
11089: LD_INT 21
11091: PUSH
11092: LD_INT 3
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PPUSH
11107: CALL_OW 69
11111: ST_TO_ADDR
// if not tmp then
11112: LD_VAR 0 8
11116: NOT
11117: IFFALSE 11121
// exit ;
11119: GO 11579
// if in_unit then
11121: LD_VAR 0 11
11125: IFFALSE 11149
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11127: LD_ADDR_VAR 0 10
11131: PUSH
11132: LD_VAR 0 8
11136: PPUSH
11137: LD_VAR 0 11
11141: PPUSH
11142: CALL_OW 74
11146: ST_TO_ADDR
11147: GO 11169
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11149: LD_ADDR_VAR 0 10
11153: PUSH
11154: LD_VAR 0 8
11158: PPUSH
11159: LD_VAR 0 1
11163: PPUSH
11164: CALL_OW 74
11168: ST_TO_ADDR
// if not enemy then
11169: LD_VAR 0 10
11173: NOT
11174: IFFALSE 11178
// exit ;
11176: GO 11579
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11178: LD_VAR 0 11
11182: PUSH
11183: LD_VAR 0 11
11187: PPUSH
11188: LD_VAR 0 10
11192: PPUSH
11193: CALL_OW 296
11197: PUSH
11198: LD_INT 13
11200: GREATER
11201: AND
11202: PUSH
11203: LD_VAR 0 1
11207: PPUSH
11208: LD_VAR 0 10
11212: PPUSH
11213: CALL_OW 296
11217: PUSH
11218: LD_INT 12
11220: GREATER
11221: OR
11222: IFFALSE 11226
// exit ;
11224: GO 11579
// missile := [ 1 ] ;
11226: LD_ADDR_VAR 0 14
11230: PUSH
11231: LD_INT 1
11233: PUSH
11234: EMPTY
11235: LIST
11236: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11237: LD_VAR 0 9
11241: PPUSH
11242: LD_VAR 0 12
11246: PPUSH
11247: CALL_OW 325
11251: IFFALSE 11280
// missile := Replace ( missile , missile + 1 , 2 ) ;
11253: LD_ADDR_VAR 0 14
11257: PUSH
11258: LD_VAR 0 14
11262: PPUSH
11263: LD_VAR 0 14
11267: PUSH
11268: LD_INT 1
11270: PLUS
11271: PPUSH
11272: LD_INT 2
11274: PPUSH
11275: CALL_OW 1
11279: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11280: LD_VAR 0 9
11284: PPUSH
11285: LD_VAR 0 13
11289: PPUSH
11290: CALL_OW 325
11294: PUSH
11295: LD_VAR 0 10
11299: PPUSH
11300: CALL_OW 255
11304: PPUSH
11305: LD_VAR 0 13
11309: PPUSH
11310: CALL_OW 325
11314: NOT
11315: AND
11316: IFFALSE 11345
// missile := Replace ( missile , missile + 1 , 3 ) ;
11318: LD_ADDR_VAR 0 14
11322: PUSH
11323: LD_VAR 0 14
11327: PPUSH
11328: LD_VAR 0 14
11332: PUSH
11333: LD_INT 1
11335: PLUS
11336: PPUSH
11337: LD_INT 3
11339: PPUSH
11340: CALL_OW 1
11344: ST_TO_ADDR
// if missile < 2 then
11345: LD_VAR 0 14
11349: PUSH
11350: LD_INT 2
11352: LESS
11353: IFFALSE 11357
// exit ;
11355: GO 11579
// x := GetX ( enemy ) ;
11357: LD_ADDR_VAR 0 4
11361: PUSH
11362: LD_VAR 0 10
11366: PPUSH
11367: CALL_OW 250
11371: ST_TO_ADDR
// y := GetY ( enemy ) ;
11372: LD_ADDR_VAR 0 5
11376: PUSH
11377: LD_VAR 0 10
11381: PPUSH
11382: CALL_OW 251
11386: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11387: LD_ADDR_VAR 0 6
11391: PUSH
11392: LD_VAR 0 4
11396: PUSH
11397: LD_INT 1
11399: NEG
11400: PPUSH
11401: LD_INT 1
11403: PPUSH
11404: CALL_OW 12
11408: PLUS
11409: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11410: LD_ADDR_VAR 0 7
11414: PUSH
11415: LD_VAR 0 5
11419: PUSH
11420: LD_INT 1
11422: NEG
11423: PPUSH
11424: LD_INT 1
11426: PPUSH
11427: CALL_OW 12
11431: PLUS
11432: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11433: LD_VAR 0 6
11437: PPUSH
11438: LD_VAR 0 7
11442: PPUSH
11443: CALL_OW 488
11447: NOT
11448: IFFALSE 11470
// begin _x := x ;
11450: LD_ADDR_VAR 0 6
11454: PUSH
11455: LD_VAR 0 4
11459: ST_TO_ADDR
// _y := y ;
11460: LD_ADDR_VAR 0 7
11464: PUSH
11465: LD_VAR 0 5
11469: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11470: LD_ADDR_VAR 0 3
11474: PUSH
11475: LD_INT 1
11477: PPUSH
11478: LD_VAR 0 14
11482: PPUSH
11483: CALL_OW 12
11487: ST_TO_ADDR
// case i of 1 :
11488: LD_VAR 0 3
11492: PUSH
11493: LD_INT 1
11495: DOUBLE
11496: EQUAL
11497: IFTRUE 11501
11499: GO 11518
11501: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11502: LD_VAR 0 1
11506: PPUSH
11507: LD_VAR 0 10
11511: PPUSH
11512: CALL_OW 115
11516: GO 11579
11518: LD_INT 2
11520: DOUBLE
11521: EQUAL
11522: IFTRUE 11526
11524: GO 11548
11526: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11527: LD_VAR 0 1
11531: PPUSH
11532: LD_VAR 0 6
11536: PPUSH
11537: LD_VAR 0 7
11541: PPUSH
11542: CALL_OW 153
11546: GO 11579
11548: LD_INT 3
11550: DOUBLE
11551: EQUAL
11552: IFTRUE 11556
11554: GO 11578
11556: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11557: LD_VAR 0 1
11561: PPUSH
11562: LD_VAR 0 6
11566: PPUSH
11567: LD_VAR 0 7
11571: PPUSH
11572: CALL_OW 154
11576: GO 11579
11578: POP
// end ;
11579: LD_VAR 0 2
11583: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11584: LD_INT 0
11586: PPUSH
11587: PPUSH
11588: PPUSH
11589: PPUSH
11590: PPUSH
11591: PPUSH
// if not unit or not building then
11592: LD_VAR 0 1
11596: NOT
11597: PUSH
11598: LD_VAR 0 2
11602: NOT
11603: OR
11604: IFFALSE 11608
// exit ;
11606: GO 11766
// x := GetX ( building ) ;
11608: LD_ADDR_VAR 0 5
11612: PUSH
11613: LD_VAR 0 2
11617: PPUSH
11618: CALL_OW 250
11622: ST_TO_ADDR
// y := GetY ( building ) ;
11623: LD_ADDR_VAR 0 6
11627: PUSH
11628: LD_VAR 0 2
11632: PPUSH
11633: CALL_OW 251
11637: ST_TO_ADDR
// for i = 0 to 5 do
11638: LD_ADDR_VAR 0 4
11642: PUSH
11643: DOUBLE
11644: LD_INT 0
11646: DEC
11647: ST_TO_ADDR
11648: LD_INT 5
11650: PUSH
11651: FOR_TO
11652: IFFALSE 11764
// begin _x := ShiftX ( x , i , 3 ) ;
11654: LD_ADDR_VAR 0 7
11658: PUSH
11659: LD_VAR 0 5
11663: PPUSH
11664: LD_VAR 0 4
11668: PPUSH
11669: LD_INT 3
11671: PPUSH
11672: CALL_OW 272
11676: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11677: LD_ADDR_VAR 0 8
11681: PUSH
11682: LD_VAR 0 6
11686: PPUSH
11687: LD_VAR 0 4
11691: PPUSH
11692: LD_INT 3
11694: PPUSH
11695: CALL_OW 273
11699: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11700: LD_VAR 0 7
11704: PPUSH
11705: LD_VAR 0 8
11709: PPUSH
11710: CALL_OW 488
11714: NOT
11715: IFFALSE 11719
// continue ;
11717: GO 11651
// if HexInfo ( _x , _y ) = 0 then
11719: LD_VAR 0 7
11723: PPUSH
11724: LD_VAR 0 8
11728: PPUSH
11729: CALL_OW 428
11733: PUSH
11734: LD_INT 0
11736: EQUAL
11737: IFFALSE 11762
// begin ComMoveXY ( unit , _x , _y ) ;
11739: LD_VAR 0 1
11743: PPUSH
11744: LD_VAR 0 7
11748: PPUSH
11749: LD_VAR 0 8
11753: PPUSH
11754: CALL_OW 111
// exit ;
11758: POP
11759: POP
11760: GO 11766
// end ; end ;
11762: GO 11651
11764: POP
11765: POP
// end ;
11766: LD_VAR 0 3
11770: RET
// export function ScanBase ( side , base_area ) ; begin
11771: LD_INT 0
11773: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11774: LD_ADDR_VAR 0 3
11778: PUSH
11779: LD_VAR 0 2
11783: PPUSH
11784: LD_INT 81
11786: PUSH
11787: LD_VAR 0 1
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PPUSH
11796: CALL_OW 70
11800: ST_TO_ADDR
// end ;
11801: LD_VAR 0 3
11805: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11806: LD_INT 0
11808: PPUSH
11809: PPUSH
11810: PPUSH
11811: PPUSH
// result := false ;
11812: LD_ADDR_VAR 0 2
11816: PUSH
11817: LD_INT 0
11819: ST_TO_ADDR
// side := GetSide ( unit ) ;
11820: LD_ADDR_VAR 0 3
11824: PUSH
11825: LD_VAR 0 1
11829: PPUSH
11830: CALL_OW 255
11834: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11835: LD_ADDR_VAR 0 4
11839: PUSH
11840: LD_VAR 0 1
11844: PPUSH
11845: CALL_OW 248
11849: ST_TO_ADDR
// case nat of 1 :
11850: LD_VAR 0 4
11854: PUSH
11855: LD_INT 1
11857: DOUBLE
11858: EQUAL
11859: IFTRUE 11863
11861: GO 11874
11863: POP
// tech := tech_lassight ; 2 :
11864: LD_ADDR_VAR 0 5
11868: PUSH
11869: LD_INT 12
11871: ST_TO_ADDR
11872: GO 11913
11874: LD_INT 2
11876: DOUBLE
11877: EQUAL
11878: IFTRUE 11882
11880: GO 11893
11882: POP
// tech := tech_mortar ; 3 :
11883: LD_ADDR_VAR 0 5
11887: PUSH
11888: LD_INT 41
11890: ST_TO_ADDR
11891: GO 11913
11893: LD_INT 3
11895: DOUBLE
11896: EQUAL
11897: IFTRUE 11901
11899: GO 11912
11901: POP
// tech := tech_bazooka ; end ;
11902: LD_ADDR_VAR 0 5
11906: PUSH
11907: LD_INT 44
11909: ST_TO_ADDR
11910: GO 11913
11912: POP
// if Researched ( side , tech ) then
11913: LD_VAR 0 3
11917: PPUSH
11918: LD_VAR 0 5
11922: PPUSH
11923: CALL_OW 325
11927: IFFALSE 11954
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11929: LD_ADDR_VAR 0 2
11933: PUSH
11934: LD_INT 5
11936: PUSH
11937: LD_INT 8
11939: PUSH
11940: LD_INT 9
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: LIST
11947: PUSH
11948: LD_VAR 0 4
11952: ARRAY
11953: ST_TO_ADDR
// end ;
11954: LD_VAR 0 2
11958: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11959: LD_INT 0
11961: PPUSH
11962: PPUSH
11963: PPUSH
// if not mines then
11964: LD_VAR 0 2
11968: NOT
11969: IFFALSE 11973
// exit ;
11971: GO 12117
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11973: LD_ADDR_VAR 0 5
11977: PUSH
11978: LD_INT 81
11980: PUSH
11981: LD_VAR 0 1
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: LD_INT 3
11992: PUSH
11993: LD_INT 21
11995: PUSH
11996: LD_INT 3
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PPUSH
12011: CALL_OW 69
12015: ST_TO_ADDR
// for i in mines do
12016: LD_ADDR_VAR 0 4
12020: PUSH
12021: LD_VAR 0 2
12025: PUSH
12026: FOR_IN
12027: IFFALSE 12115
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12029: LD_VAR 0 4
12033: PUSH
12034: LD_INT 1
12036: ARRAY
12037: PPUSH
12038: LD_VAR 0 4
12042: PUSH
12043: LD_INT 2
12045: ARRAY
12046: PPUSH
12047: CALL_OW 458
12051: NOT
12052: IFFALSE 12056
// continue ;
12054: GO 12026
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12056: LD_VAR 0 4
12060: PUSH
12061: LD_INT 1
12063: ARRAY
12064: PPUSH
12065: LD_VAR 0 4
12069: PUSH
12070: LD_INT 2
12072: ARRAY
12073: PPUSH
12074: CALL_OW 428
12078: PUSH
12079: LD_VAR 0 5
12083: IN
12084: IFFALSE 12113
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12086: LD_VAR 0 4
12090: PUSH
12091: LD_INT 1
12093: ARRAY
12094: PPUSH
12095: LD_VAR 0 4
12099: PUSH
12100: LD_INT 2
12102: ARRAY
12103: PPUSH
12104: LD_VAR 0 1
12108: PPUSH
12109: CALL_OW 456
// end ;
12113: GO 12026
12115: POP
12116: POP
// end ;
12117: LD_VAR 0 3
12121: RET
// export function Count ( array ) ; begin
12122: LD_INT 0
12124: PPUSH
// result := array + 0 ;
12125: LD_ADDR_VAR 0 2
12129: PUSH
12130: LD_VAR 0 1
12134: PUSH
12135: LD_INT 0
12137: PLUS
12138: ST_TO_ADDR
// end ;
12139: LD_VAR 0 2
12143: RET
// export function IsEmpty ( building ) ; begin
12144: LD_INT 0
12146: PPUSH
// if not building then
12147: LD_VAR 0 1
12151: NOT
12152: IFFALSE 12156
// exit ;
12154: GO 12199
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12156: LD_ADDR_VAR 0 2
12160: PUSH
12161: LD_VAR 0 1
12165: PUSH
12166: LD_INT 22
12168: PUSH
12169: LD_VAR 0 1
12173: PPUSH
12174: CALL_OW 255
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: PUSH
12183: LD_INT 58
12185: PUSH
12186: EMPTY
12187: LIST
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PPUSH
12193: CALL_OW 69
12197: IN
12198: ST_TO_ADDR
// end ;
12199: LD_VAR 0 2
12203: RET
// export function IsNotFull ( building ) ; var places ; begin
12204: LD_INT 0
12206: PPUSH
12207: PPUSH
// if not building then
12208: LD_VAR 0 1
12212: NOT
12213: IFFALSE 12217
// exit ;
12215: GO 12245
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12217: LD_ADDR_VAR 0 2
12221: PUSH
12222: LD_VAR 0 1
12226: PPUSH
12227: LD_INT 3
12229: PUSH
12230: LD_INT 62
12232: PUSH
12233: EMPTY
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PPUSH
12240: CALL_OW 72
12244: ST_TO_ADDR
// end ;
12245: LD_VAR 0 2
12249: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12250: LD_INT 0
12252: PPUSH
12253: PPUSH
12254: PPUSH
12255: PPUSH
// tmp := [ ] ;
12256: LD_ADDR_VAR 0 3
12260: PUSH
12261: EMPTY
12262: ST_TO_ADDR
// list := [ ] ;
12263: LD_ADDR_VAR 0 5
12267: PUSH
12268: EMPTY
12269: ST_TO_ADDR
// for i = 16 to 25 do
12270: LD_ADDR_VAR 0 4
12274: PUSH
12275: DOUBLE
12276: LD_INT 16
12278: DEC
12279: ST_TO_ADDR
12280: LD_INT 25
12282: PUSH
12283: FOR_TO
12284: IFFALSE 12357
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12286: LD_ADDR_VAR 0 3
12290: PUSH
12291: LD_VAR 0 3
12295: PUSH
12296: LD_INT 22
12298: PUSH
12299: LD_VAR 0 1
12303: PPUSH
12304: CALL_OW 255
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: LD_INT 91
12315: PUSH
12316: LD_VAR 0 1
12320: PUSH
12321: LD_INT 6
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: PUSH
12329: LD_INT 30
12331: PUSH
12332: LD_VAR 0 4
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: PPUSH
12349: CALL_OW 69
12353: ADD
12354: ST_TO_ADDR
12355: GO 12283
12357: POP
12358: POP
// for i = 1 to tmp do
12359: LD_ADDR_VAR 0 4
12363: PUSH
12364: DOUBLE
12365: LD_INT 1
12367: DEC
12368: ST_TO_ADDR
12369: LD_VAR 0 3
12373: PUSH
12374: FOR_TO
12375: IFFALSE 12463
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12377: LD_ADDR_VAR 0 5
12381: PUSH
12382: LD_VAR 0 5
12386: PUSH
12387: LD_VAR 0 3
12391: PUSH
12392: LD_VAR 0 4
12396: ARRAY
12397: PPUSH
12398: CALL_OW 266
12402: PUSH
12403: LD_VAR 0 3
12407: PUSH
12408: LD_VAR 0 4
12412: ARRAY
12413: PPUSH
12414: CALL_OW 250
12418: PUSH
12419: LD_VAR 0 3
12423: PUSH
12424: LD_VAR 0 4
12428: ARRAY
12429: PPUSH
12430: CALL_OW 251
12434: PUSH
12435: LD_VAR 0 3
12439: PUSH
12440: LD_VAR 0 4
12444: ARRAY
12445: PPUSH
12446: CALL_OW 254
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: PUSH
12457: EMPTY
12458: LIST
12459: ADD
12460: ST_TO_ADDR
12461: GO 12374
12463: POP
12464: POP
// result := list ;
12465: LD_ADDR_VAR 0 2
12469: PUSH
12470: LD_VAR 0 5
12474: ST_TO_ADDR
// end ;
12475: LD_VAR 0 2
12479: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12480: LD_INT 0
12482: PPUSH
12483: PPUSH
12484: PPUSH
12485: PPUSH
12486: PPUSH
12487: PPUSH
12488: PPUSH
// if not factory then
12489: LD_VAR 0 1
12493: NOT
12494: IFFALSE 12498
// exit ;
12496: GO 13091
// if control = control_apeman then
12498: LD_VAR 0 4
12502: PUSH
12503: LD_INT 5
12505: EQUAL
12506: IFFALSE 12615
// begin tmp := UnitsInside ( factory ) ;
12508: LD_ADDR_VAR 0 8
12512: PUSH
12513: LD_VAR 0 1
12517: PPUSH
12518: CALL_OW 313
12522: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12523: LD_VAR 0 8
12527: PPUSH
12528: LD_INT 25
12530: PUSH
12531: LD_INT 12
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PPUSH
12538: CALL_OW 72
12542: NOT
12543: IFFALSE 12553
// control := control_manual ;
12545: LD_ADDR_VAR 0 4
12549: PUSH
12550: LD_INT 1
12552: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12553: LD_ADDR_VAR 0 8
12557: PUSH
12558: LD_VAR 0 1
12562: PPUSH
12563: CALL 12250 0 1
12567: ST_TO_ADDR
// if tmp then
12568: LD_VAR 0 8
12572: IFFALSE 12615
// begin for i in tmp do
12574: LD_ADDR_VAR 0 7
12578: PUSH
12579: LD_VAR 0 8
12583: PUSH
12584: FOR_IN
12585: IFFALSE 12613
// if i [ 1 ] = b_ext_radio then
12587: LD_VAR 0 7
12591: PUSH
12592: LD_INT 1
12594: ARRAY
12595: PUSH
12596: LD_INT 22
12598: EQUAL
12599: IFFALSE 12611
// begin control := control_remote ;
12601: LD_ADDR_VAR 0 4
12605: PUSH
12606: LD_INT 2
12608: ST_TO_ADDR
// break ;
12609: GO 12613
// end ;
12611: GO 12584
12613: POP
12614: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12615: LD_VAR 0 1
12619: PPUSH
12620: LD_VAR 0 2
12624: PPUSH
12625: LD_VAR 0 3
12629: PPUSH
12630: LD_VAR 0 4
12634: PPUSH
12635: LD_VAR 0 5
12639: PPUSH
12640: CALL_OW 448
12644: IFFALSE 12679
// begin result := [ chassis , engine , control , weapon ] ;
12646: LD_ADDR_VAR 0 6
12650: PUSH
12651: LD_VAR 0 2
12655: PUSH
12656: LD_VAR 0 3
12660: PUSH
12661: LD_VAR 0 4
12665: PUSH
12666: LD_VAR 0 5
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: ST_TO_ADDR
// exit ;
12677: GO 13091
// end ; _chassis := AvailableChassisList ( factory ) ;
12679: LD_ADDR_VAR 0 9
12683: PUSH
12684: LD_VAR 0 1
12688: PPUSH
12689: CALL_OW 475
12693: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12694: LD_ADDR_VAR 0 11
12698: PUSH
12699: LD_VAR 0 1
12703: PPUSH
12704: CALL_OW 476
12708: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12709: LD_ADDR_VAR 0 12
12713: PUSH
12714: LD_VAR 0 1
12718: PPUSH
12719: CALL_OW 477
12723: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12724: LD_ADDR_VAR 0 10
12728: PUSH
12729: LD_VAR 0 1
12733: PPUSH
12734: CALL_OW 478
12738: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12739: LD_VAR 0 9
12743: NOT
12744: PUSH
12745: LD_VAR 0 11
12749: NOT
12750: OR
12751: PUSH
12752: LD_VAR 0 12
12756: NOT
12757: OR
12758: PUSH
12759: LD_VAR 0 10
12763: NOT
12764: OR
12765: IFFALSE 12800
// begin result := [ chassis , engine , control , weapon ] ;
12767: LD_ADDR_VAR 0 6
12771: PUSH
12772: LD_VAR 0 2
12776: PUSH
12777: LD_VAR 0 3
12781: PUSH
12782: LD_VAR 0 4
12786: PUSH
12787: LD_VAR 0 5
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: ST_TO_ADDR
// exit ;
12798: GO 13091
// end ; if not chassis in _chassis then
12800: LD_VAR 0 2
12804: PUSH
12805: LD_VAR 0 9
12809: IN
12810: NOT
12811: IFFALSE 12837
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12813: LD_ADDR_VAR 0 2
12817: PUSH
12818: LD_VAR 0 9
12822: PUSH
12823: LD_INT 1
12825: PPUSH
12826: LD_VAR 0 9
12830: PPUSH
12831: CALL_OW 12
12835: ARRAY
12836: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12837: LD_VAR 0 2
12841: PPUSH
12842: LD_VAR 0 3
12846: PPUSH
12847: CALL 13096 0 2
12851: NOT
12852: IFFALSE 12911
// repeat engine := _engine [ 1 ] ;
12854: LD_ADDR_VAR 0 3
12858: PUSH
12859: LD_VAR 0 11
12863: PUSH
12864: LD_INT 1
12866: ARRAY
12867: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12868: LD_ADDR_VAR 0 11
12872: PUSH
12873: LD_VAR 0 11
12877: PPUSH
12878: LD_INT 1
12880: PPUSH
12881: CALL_OW 3
12885: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12886: LD_VAR 0 2
12890: PPUSH
12891: LD_VAR 0 3
12895: PPUSH
12896: CALL 13096 0 2
12900: PUSH
12901: LD_VAR 0 11
12905: PUSH
12906: EMPTY
12907: EQUAL
12908: OR
12909: IFFALSE 12854
// if not control in _control then
12911: LD_VAR 0 4
12915: PUSH
12916: LD_VAR 0 12
12920: IN
12921: NOT
12922: IFFALSE 12948
// control := _control [ rand ( 1 , _control ) ] ;
12924: LD_ADDR_VAR 0 4
12928: PUSH
12929: LD_VAR 0 12
12933: PUSH
12934: LD_INT 1
12936: PPUSH
12937: LD_VAR 0 12
12941: PPUSH
12942: CALL_OW 12
12946: ARRAY
12947: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12948: LD_VAR 0 2
12952: PPUSH
12953: LD_VAR 0 5
12957: PPUSH
12958: CALL 13316 0 2
12962: NOT
12963: IFFALSE 13022
// repeat weapon := _weapon [ 1 ] ;
12965: LD_ADDR_VAR 0 5
12969: PUSH
12970: LD_VAR 0 10
12974: PUSH
12975: LD_INT 1
12977: ARRAY
12978: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12979: LD_ADDR_VAR 0 10
12983: PUSH
12984: LD_VAR 0 10
12988: PPUSH
12989: LD_INT 1
12991: PPUSH
12992: CALL_OW 3
12996: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12997: LD_VAR 0 2
13001: PPUSH
13002: LD_VAR 0 5
13006: PPUSH
13007: CALL 13316 0 2
13011: PUSH
13012: LD_VAR 0 10
13016: PUSH
13017: EMPTY
13018: EQUAL
13019: OR
13020: IFFALSE 12965
// result := [ ] ;
13022: LD_ADDR_VAR 0 6
13026: PUSH
13027: EMPTY
13028: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13029: LD_VAR 0 1
13033: PPUSH
13034: LD_VAR 0 2
13038: PPUSH
13039: LD_VAR 0 3
13043: PPUSH
13044: LD_VAR 0 4
13048: PPUSH
13049: LD_VAR 0 5
13053: PPUSH
13054: CALL_OW 448
13058: IFFALSE 13091
// result := [ chassis , engine , control , weapon ] ;
13060: LD_ADDR_VAR 0 6
13064: PUSH
13065: LD_VAR 0 2
13069: PUSH
13070: LD_VAR 0 3
13074: PUSH
13075: LD_VAR 0 4
13079: PUSH
13080: LD_VAR 0 5
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: ST_TO_ADDR
// end ;
13091: LD_VAR 0 6
13095: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13096: LD_INT 0
13098: PPUSH
// if not chassis or not engine then
13099: LD_VAR 0 1
13103: NOT
13104: PUSH
13105: LD_VAR 0 2
13109: NOT
13110: OR
13111: IFFALSE 13115
// exit ;
13113: GO 13311
// case engine of engine_solar :
13115: LD_VAR 0 2
13119: PUSH
13120: LD_INT 2
13122: DOUBLE
13123: EQUAL
13124: IFTRUE 13128
13126: GO 13166
13128: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13129: LD_ADDR_VAR 0 3
13133: PUSH
13134: LD_INT 11
13136: PUSH
13137: LD_INT 12
13139: PUSH
13140: LD_INT 13
13142: PUSH
13143: LD_INT 14
13145: PUSH
13146: LD_INT 1
13148: PUSH
13149: LD_INT 2
13151: PUSH
13152: LD_INT 3
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: ST_TO_ADDR
13164: GO 13295
13166: LD_INT 1
13168: DOUBLE
13169: EQUAL
13170: IFTRUE 13174
13172: GO 13236
13174: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13175: LD_ADDR_VAR 0 3
13179: PUSH
13180: LD_INT 11
13182: PUSH
13183: LD_INT 12
13185: PUSH
13186: LD_INT 13
13188: PUSH
13189: LD_INT 14
13191: PUSH
13192: LD_INT 1
13194: PUSH
13195: LD_INT 2
13197: PUSH
13198: LD_INT 3
13200: PUSH
13201: LD_INT 4
13203: PUSH
13204: LD_INT 5
13206: PUSH
13207: LD_INT 21
13209: PUSH
13210: LD_INT 23
13212: PUSH
13213: LD_INT 22
13215: PUSH
13216: LD_INT 24
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: ST_TO_ADDR
13234: GO 13295
13236: LD_INT 3
13238: DOUBLE
13239: EQUAL
13240: IFTRUE 13244
13242: GO 13294
13244: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13245: LD_ADDR_VAR 0 3
13249: PUSH
13250: LD_INT 13
13252: PUSH
13253: LD_INT 14
13255: PUSH
13256: LD_INT 2
13258: PUSH
13259: LD_INT 3
13261: PUSH
13262: LD_INT 4
13264: PUSH
13265: LD_INT 5
13267: PUSH
13268: LD_INT 21
13270: PUSH
13271: LD_INT 22
13273: PUSH
13274: LD_INT 23
13276: PUSH
13277: LD_INT 24
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: ST_TO_ADDR
13292: GO 13295
13294: POP
// result := ( chassis in result ) ;
13295: LD_ADDR_VAR 0 3
13299: PUSH
13300: LD_VAR 0 1
13304: PUSH
13305: LD_VAR 0 3
13309: IN
13310: ST_TO_ADDR
// end ;
13311: LD_VAR 0 3
13315: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13316: LD_INT 0
13318: PPUSH
// if not chassis or not weapon then
13319: LD_VAR 0 1
13323: NOT
13324: PUSH
13325: LD_VAR 0 2
13329: NOT
13330: OR
13331: IFFALSE 13335
// exit ;
13333: GO 14395
// case weapon of us_machine_gun :
13335: LD_VAR 0 2
13339: PUSH
13340: LD_INT 2
13342: DOUBLE
13343: EQUAL
13344: IFTRUE 13348
13346: GO 13378
13348: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13349: LD_ADDR_VAR 0 3
13353: PUSH
13354: LD_INT 1
13356: PUSH
13357: LD_INT 2
13359: PUSH
13360: LD_INT 3
13362: PUSH
13363: LD_INT 4
13365: PUSH
13366: LD_INT 5
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: ST_TO_ADDR
13376: GO 14379
13378: LD_INT 3
13380: DOUBLE
13381: EQUAL
13382: IFTRUE 13386
13384: GO 13416
13386: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13387: LD_ADDR_VAR 0 3
13391: PUSH
13392: LD_INT 1
13394: PUSH
13395: LD_INT 2
13397: PUSH
13398: LD_INT 3
13400: PUSH
13401: LD_INT 4
13403: PUSH
13404: LD_INT 5
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: ST_TO_ADDR
13414: GO 14379
13416: LD_INT 11
13418: DOUBLE
13419: EQUAL
13420: IFTRUE 13424
13422: GO 13454
13424: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13425: LD_ADDR_VAR 0 3
13429: PUSH
13430: LD_INT 1
13432: PUSH
13433: LD_INT 2
13435: PUSH
13436: LD_INT 3
13438: PUSH
13439: LD_INT 4
13441: PUSH
13442: LD_INT 5
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: ST_TO_ADDR
13452: GO 14379
13454: LD_INT 4
13456: DOUBLE
13457: EQUAL
13458: IFTRUE 13462
13460: GO 13488
13462: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13463: LD_ADDR_VAR 0 3
13467: PUSH
13468: LD_INT 2
13470: PUSH
13471: LD_INT 3
13473: PUSH
13474: LD_INT 4
13476: PUSH
13477: LD_INT 5
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: ST_TO_ADDR
13486: GO 14379
13488: LD_INT 5
13490: DOUBLE
13491: EQUAL
13492: IFTRUE 13496
13494: GO 13522
13496: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13497: LD_ADDR_VAR 0 3
13501: PUSH
13502: LD_INT 2
13504: PUSH
13505: LD_INT 3
13507: PUSH
13508: LD_INT 4
13510: PUSH
13511: LD_INT 5
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: ST_TO_ADDR
13520: GO 14379
13522: LD_INT 9
13524: DOUBLE
13525: EQUAL
13526: IFTRUE 13530
13528: GO 13556
13530: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13531: LD_ADDR_VAR 0 3
13535: PUSH
13536: LD_INT 2
13538: PUSH
13539: LD_INT 3
13541: PUSH
13542: LD_INT 4
13544: PUSH
13545: LD_INT 5
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: ST_TO_ADDR
13554: GO 14379
13556: LD_INT 7
13558: DOUBLE
13559: EQUAL
13560: IFTRUE 13564
13562: GO 13590
13564: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13565: LD_ADDR_VAR 0 3
13569: PUSH
13570: LD_INT 2
13572: PUSH
13573: LD_INT 3
13575: PUSH
13576: LD_INT 4
13578: PUSH
13579: LD_INT 5
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: ST_TO_ADDR
13588: GO 14379
13590: LD_INT 12
13592: DOUBLE
13593: EQUAL
13594: IFTRUE 13598
13596: GO 13624
13598: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13599: LD_ADDR_VAR 0 3
13603: PUSH
13604: LD_INT 2
13606: PUSH
13607: LD_INT 3
13609: PUSH
13610: LD_INT 4
13612: PUSH
13613: LD_INT 5
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: ST_TO_ADDR
13622: GO 14379
13624: LD_INT 13
13626: DOUBLE
13627: EQUAL
13628: IFTRUE 13632
13630: GO 13658
13632: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13633: LD_ADDR_VAR 0 3
13637: PUSH
13638: LD_INT 2
13640: PUSH
13641: LD_INT 3
13643: PUSH
13644: LD_INT 4
13646: PUSH
13647: LD_INT 5
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: ST_TO_ADDR
13656: GO 14379
13658: LD_INT 14
13660: DOUBLE
13661: EQUAL
13662: IFTRUE 13666
13664: GO 13684
13666: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13667: LD_ADDR_VAR 0 3
13671: PUSH
13672: LD_INT 4
13674: PUSH
13675: LD_INT 5
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: ST_TO_ADDR
13682: GO 14379
13684: LD_INT 6
13686: DOUBLE
13687: EQUAL
13688: IFTRUE 13692
13690: GO 13710
13692: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13693: LD_ADDR_VAR 0 3
13697: PUSH
13698: LD_INT 4
13700: PUSH
13701: LD_INT 5
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: ST_TO_ADDR
13708: GO 14379
13710: LD_INT 10
13712: DOUBLE
13713: EQUAL
13714: IFTRUE 13718
13716: GO 13736
13718: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13719: LD_ADDR_VAR 0 3
13723: PUSH
13724: LD_INT 4
13726: PUSH
13727: LD_INT 5
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: ST_TO_ADDR
13734: GO 14379
13736: LD_INT 22
13738: DOUBLE
13739: EQUAL
13740: IFTRUE 13744
13742: GO 13770
13744: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13745: LD_ADDR_VAR 0 3
13749: PUSH
13750: LD_INT 11
13752: PUSH
13753: LD_INT 12
13755: PUSH
13756: LD_INT 13
13758: PUSH
13759: LD_INT 14
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: ST_TO_ADDR
13768: GO 14379
13770: LD_INT 23
13772: DOUBLE
13773: EQUAL
13774: IFTRUE 13778
13776: GO 13804
13778: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13779: LD_ADDR_VAR 0 3
13783: PUSH
13784: LD_INT 11
13786: PUSH
13787: LD_INT 12
13789: PUSH
13790: LD_INT 13
13792: PUSH
13793: LD_INT 14
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: ST_TO_ADDR
13802: GO 14379
13804: LD_INT 24
13806: DOUBLE
13807: EQUAL
13808: IFTRUE 13812
13810: GO 13838
13812: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13813: LD_ADDR_VAR 0 3
13817: PUSH
13818: LD_INT 11
13820: PUSH
13821: LD_INT 12
13823: PUSH
13824: LD_INT 13
13826: PUSH
13827: LD_INT 14
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: ST_TO_ADDR
13836: GO 14379
13838: LD_INT 30
13840: DOUBLE
13841: EQUAL
13842: IFTRUE 13846
13844: GO 13872
13846: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13847: LD_ADDR_VAR 0 3
13851: PUSH
13852: LD_INT 11
13854: PUSH
13855: LD_INT 12
13857: PUSH
13858: LD_INT 13
13860: PUSH
13861: LD_INT 14
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: ST_TO_ADDR
13870: GO 14379
13872: LD_INT 25
13874: DOUBLE
13875: EQUAL
13876: IFTRUE 13880
13878: GO 13898
13880: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13881: LD_ADDR_VAR 0 3
13885: PUSH
13886: LD_INT 13
13888: PUSH
13889: LD_INT 14
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: ST_TO_ADDR
13896: GO 14379
13898: LD_INT 27
13900: DOUBLE
13901: EQUAL
13902: IFTRUE 13906
13904: GO 13924
13906: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13907: LD_ADDR_VAR 0 3
13911: PUSH
13912: LD_INT 13
13914: PUSH
13915: LD_INT 14
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: ST_TO_ADDR
13922: GO 14379
13924: LD_INT 92
13926: DOUBLE
13927: EQUAL
13928: IFTRUE 13932
13930: GO 13958
13932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13933: LD_ADDR_VAR 0 3
13937: PUSH
13938: LD_INT 11
13940: PUSH
13941: LD_INT 12
13943: PUSH
13944: LD_INT 13
13946: PUSH
13947: LD_INT 14
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: ST_TO_ADDR
13956: GO 14379
13958: LD_INT 28
13960: DOUBLE
13961: EQUAL
13962: IFTRUE 13966
13964: GO 13984
13966: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13967: LD_ADDR_VAR 0 3
13971: PUSH
13972: LD_INT 13
13974: PUSH
13975: LD_INT 14
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: ST_TO_ADDR
13982: GO 14379
13984: LD_INT 29
13986: DOUBLE
13987: EQUAL
13988: IFTRUE 13992
13990: GO 14010
13992: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13993: LD_ADDR_VAR 0 3
13997: PUSH
13998: LD_INT 13
14000: PUSH
14001: LD_INT 14
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: ST_TO_ADDR
14008: GO 14379
14010: LD_INT 31
14012: DOUBLE
14013: EQUAL
14014: IFTRUE 14018
14016: GO 14036
14018: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14019: LD_ADDR_VAR 0 3
14023: PUSH
14024: LD_INT 13
14026: PUSH
14027: LD_INT 14
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: ST_TO_ADDR
14034: GO 14379
14036: LD_INT 26
14038: DOUBLE
14039: EQUAL
14040: IFTRUE 14044
14042: GO 14062
14044: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14045: LD_ADDR_VAR 0 3
14049: PUSH
14050: LD_INT 13
14052: PUSH
14053: LD_INT 14
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: ST_TO_ADDR
14060: GO 14379
14062: LD_INT 42
14064: DOUBLE
14065: EQUAL
14066: IFTRUE 14070
14068: GO 14096
14070: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14071: LD_ADDR_VAR 0 3
14075: PUSH
14076: LD_INT 21
14078: PUSH
14079: LD_INT 22
14081: PUSH
14082: LD_INT 23
14084: PUSH
14085: LD_INT 24
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: ST_TO_ADDR
14094: GO 14379
14096: LD_INT 43
14098: DOUBLE
14099: EQUAL
14100: IFTRUE 14104
14102: GO 14130
14104: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14105: LD_ADDR_VAR 0 3
14109: PUSH
14110: LD_INT 21
14112: PUSH
14113: LD_INT 22
14115: PUSH
14116: LD_INT 23
14118: PUSH
14119: LD_INT 24
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: ST_TO_ADDR
14128: GO 14379
14130: LD_INT 44
14132: DOUBLE
14133: EQUAL
14134: IFTRUE 14138
14136: GO 14164
14138: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14139: LD_ADDR_VAR 0 3
14143: PUSH
14144: LD_INT 21
14146: PUSH
14147: LD_INT 22
14149: PUSH
14150: LD_INT 23
14152: PUSH
14153: LD_INT 24
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: ST_TO_ADDR
14162: GO 14379
14164: LD_INT 45
14166: DOUBLE
14167: EQUAL
14168: IFTRUE 14172
14170: GO 14198
14172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14173: LD_ADDR_VAR 0 3
14177: PUSH
14178: LD_INT 21
14180: PUSH
14181: LD_INT 22
14183: PUSH
14184: LD_INT 23
14186: PUSH
14187: LD_INT 24
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: ST_TO_ADDR
14196: GO 14379
14198: LD_INT 49
14200: DOUBLE
14201: EQUAL
14202: IFTRUE 14206
14204: GO 14232
14206: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14207: LD_ADDR_VAR 0 3
14211: PUSH
14212: LD_INT 21
14214: PUSH
14215: LD_INT 22
14217: PUSH
14218: LD_INT 23
14220: PUSH
14221: LD_INT 24
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: ST_TO_ADDR
14230: GO 14379
14232: LD_INT 51
14234: DOUBLE
14235: EQUAL
14236: IFTRUE 14240
14238: GO 14266
14240: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14241: LD_ADDR_VAR 0 3
14245: PUSH
14246: LD_INT 21
14248: PUSH
14249: LD_INT 22
14251: PUSH
14252: LD_INT 23
14254: PUSH
14255: LD_INT 24
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: ST_TO_ADDR
14264: GO 14379
14266: LD_INT 52
14268: DOUBLE
14269: EQUAL
14270: IFTRUE 14274
14272: GO 14300
14274: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14275: LD_ADDR_VAR 0 3
14279: PUSH
14280: LD_INT 21
14282: PUSH
14283: LD_INT 22
14285: PUSH
14286: LD_INT 23
14288: PUSH
14289: LD_INT 24
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: ST_TO_ADDR
14298: GO 14379
14300: LD_INT 53
14302: DOUBLE
14303: EQUAL
14304: IFTRUE 14308
14306: GO 14326
14308: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14309: LD_ADDR_VAR 0 3
14313: PUSH
14314: LD_INT 23
14316: PUSH
14317: LD_INT 24
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: ST_TO_ADDR
14324: GO 14379
14326: LD_INT 46
14328: DOUBLE
14329: EQUAL
14330: IFTRUE 14334
14332: GO 14352
14334: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14335: LD_ADDR_VAR 0 3
14339: PUSH
14340: LD_INT 23
14342: PUSH
14343: LD_INT 24
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: ST_TO_ADDR
14350: GO 14379
14352: LD_INT 47
14354: DOUBLE
14355: EQUAL
14356: IFTRUE 14360
14358: GO 14378
14360: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14361: LD_ADDR_VAR 0 3
14365: PUSH
14366: LD_INT 23
14368: PUSH
14369: LD_INT 24
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: ST_TO_ADDR
14376: GO 14379
14378: POP
// result := ( chassis in result ) ;
14379: LD_ADDR_VAR 0 3
14383: PUSH
14384: LD_VAR 0 1
14388: PUSH
14389: LD_VAR 0 3
14393: IN
14394: ST_TO_ADDR
// end ;
14395: LD_VAR 0 3
14399: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14400: LD_INT 0
14402: PPUSH
14403: PPUSH
14404: PPUSH
14405: PPUSH
14406: PPUSH
14407: PPUSH
14408: PPUSH
// result := array ;
14409: LD_ADDR_VAR 0 5
14413: PUSH
14414: LD_VAR 0 1
14418: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14419: LD_VAR 0 1
14423: NOT
14424: PUSH
14425: LD_VAR 0 2
14429: NOT
14430: OR
14431: PUSH
14432: LD_VAR 0 3
14436: NOT
14437: OR
14438: PUSH
14439: LD_VAR 0 2
14443: PUSH
14444: LD_VAR 0 1
14448: GREATER
14449: OR
14450: PUSH
14451: LD_VAR 0 3
14455: PUSH
14456: LD_VAR 0 1
14460: GREATER
14461: OR
14462: IFFALSE 14466
// exit ;
14464: GO 14762
// if direction then
14466: LD_VAR 0 4
14470: IFFALSE 14534
// begin d := 1 ;
14472: LD_ADDR_VAR 0 9
14476: PUSH
14477: LD_INT 1
14479: ST_TO_ADDR
// if i_from > i_to then
14480: LD_VAR 0 2
14484: PUSH
14485: LD_VAR 0 3
14489: GREATER
14490: IFFALSE 14516
// length := ( array - i_from ) + i_to else
14492: LD_ADDR_VAR 0 11
14496: PUSH
14497: LD_VAR 0 1
14501: PUSH
14502: LD_VAR 0 2
14506: MINUS
14507: PUSH
14508: LD_VAR 0 3
14512: PLUS
14513: ST_TO_ADDR
14514: GO 14532
// length := i_to - i_from ;
14516: LD_ADDR_VAR 0 11
14520: PUSH
14521: LD_VAR 0 3
14525: PUSH
14526: LD_VAR 0 2
14530: MINUS
14531: ST_TO_ADDR
// end else
14532: GO 14595
// begin d := - 1 ;
14534: LD_ADDR_VAR 0 9
14538: PUSH
14539: LD_INT 1
14541: NEG
14542: ST_TO_ADDR
// if i_from > i_to then
14543: LD_VAR 0 2
14547: PUSH
14548: LD_VAR 0 3
14552: GREATER
14553: IFFALSE 14573
// length := i_from - i_to else
14555: LD_ADDR_VAR 0 11
14559: PUSH
14560: LD_VAR 0 2
14564: PUSH
14565: LD_VAR 0 3
14569: MINUS
14570: ST_TO_ADDR
14571: GO 14595
// length := ( array - i_to ) + i_from ;
14573: LD_ADDR_VAR 0 11
14577: PUSH
14578: LD_VAR 0 1
14582: PUSH
14583: LD_VAR 0 3
14587: MINUS
14588: PUSH
14589: LD_VAR 0 2
14593: PLUS
14594: ST_TO_ADDR
// end ; if not length then
14595: LD_VAR 0 11
14599: NOT
14600: IFFALSE 14604
// exit ;
14602: GO 14762
// tmp := array ;
14604: LD_ADDR_VAR 0 10
14608: PUSH
14609: LD_VAR 0 1
14613: ST_TO_ADDR
// for i = 1 to length do
14614: LD_ADDR_VAR 0 6
14618: PUSH
14619: DOUBLE
14620: LD_INT 1
14622: DEC
14623: ST_TO_ADDR
14624: LD_VAR 0 11
14628: PUSH
14629: FOR_TO
14630: IFFALSE 14750
// begin for j = 1 to array do
14632: LD_ADDR_VAR 0 7
14636: PUSH
14637: DOUBLE
14638: LD_INT 1
14640: DEC
14641: ST_TO_ADDR
14642: LD_VAR 0 1
14646: PUSH
14647: FOR_TO
14648: IFFALSE 14736
// begin k := j + d ;
14650: LD_ADDR_VAR 0 8
14654: PUSH
14655: LD_VAR 0 7
14659: PUSH
14660: LD_VAR 0 9
14664: PLUS
14665: ST_TO_ADDR
// if k > array then
14666: LD_VAR 0 8
14670: PUSH
14671: LD_VAR 0 1
14675: GREATER
14676: IFFALSE 14686
// k := 1 ;
14678: LD_ADDR_VAR 0 8
14682: PUSH
14683: LD_INT 1
14685: ST_TO_ADDR
// if not k then
14686: LD_VAR 0 8
14690: NOT
14691: IFFALSE 14703
// k := array ;
14693: LD_ADDR_VAR 0 8
14697: PUSH
14698: LD_VAR 0 1
14702: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14703: LD_ADDR_VAR 0 10
14707: PUSH
14708: LD_VAR 0 10
14712: PPUSH
14713: LD_VAR 0 8
14717: PPUSH
14718: LD_VAR 0 1
14722: PUSH
14723: LD_VAR 0 7
14727: ARRAY
14728: PPUSH
14729: CALL_OW 1
14733: ST_TO_ADDR
// end ;
14734: GO 14647
14736: POP
14737: POP
// array := tmp ;
14738: LD_ADDR_VAR 0 1
14742: PUSH
14743: LD_VAR 0 10
14747: ST_TO_ADDR
// end ;
14748: GO 14629
14750: POP
14751: POP
// result := array ;
14752: LD_ADDR_VAR 0 5
14756: PUSH
14757: LD_VAR 0 1
14761: ST_TO_ADDR
// end ;
14762: LD_VAR 0 5
14766: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14767: LD_INT 0
14769: PPUSH
14770: PPUSH
// result := 0 ;
14771: LD_ADDR_VAR 0 3
14775: PUSH
14776: LD_INT 0
14778: ST_TO_ADDR
// if not array or not value in array then
14779: LD_VAR 0 1
14783: NOT
14784: PUSH
14785: LD_VAR 0 2
14789: PUSH
14790: LD_VAR 0 1
14794: IN
14795: NOT
14796: OR
14797: IFFALSE 14801
// exit ;
14799: GO 14855
// for i = 1 to array do
14801: LD_ADDR_VAR 0 4
14805: PUSH
14806: DOUBLE
14807: LD_INT 1
14809: DEC
14810: ST_TO_ADDR
14811: LD_VAR 0 1
14815: PUSH
14816: FOR_TO
14817: IFFALSE 14853
// if value = array [ i ] then
14819: LD_VAR 0 2
14823: PUSH
14824: LD_VAR 0 1
14828: PUSH
14829: LD_VAR 0 4
14833: ARRAY
14834: EQUAL
14835: IFFALSE 14851
// begin result := i ;
14837: LD_ADDR_VAR 0 3
14841: PUSH
14842: LD_VAR 0 4
14846: ST_TO_ADDR
// exit ;
14847: POP
14848: POP
14849: GO 14855
// end ;
14851: GO 14816
14853: POP
14854: POP
// end ;
14855: LD_VAR 0 3
14859: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14860: LD_INT 0
14862: PPUSH
// vc_chassis := chassis ;
14863: LD_ADDR_OWVAR 37
14867: PUSH
14868: LD_VAR 0 1
14872: ST_TO_ADDR
// vc_engine := engine ;
14873: LD_ADDR_OWVAR 39
14877: PUSH
14878: LD_VAR 0 2
14882: ST_TO_ADDR
// vc_control := control ;
14883: LD_ADDR_OWVAR 38
14887: PUSH
14888: LD_VAR 0 3
14892: ST_TO_ADDR
// vc_weapon := weapon ;
14893: LD_ADDR_OWVAR 40
14897: PUSH
14898: LD_VAR 0 4
14902: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14903: LD_ADDR_OWVAR 41
14907: PUSH
14908: LD_VAR 0 5
14912: ST_TO_ADDR
// end ;
14913: LD_VAR 0 6
14917: RET
// export function WantPlant ( unit ) ; var task ; begin
14918: LD_INT 0
14920: PPUSH
14921: PPUSH
// result := false ;
14922: LD_ADDR_VAR 0 2
14926: PUSH
14927: LD_INT 0
14929: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14930: LD_ADDR_VAR 0 3
14934: PUSH
14935: LD_VAR 0 1
14939: PPUSH
14940: CALL_OW 437
14944: ST_TO_ADDR
// if task then
14945: LD_VAR 0 3
14949: IFFALSE 14977
// if task [ 1 ] [ 1 ] = p then
14951: LD_VAR 0 3
14955: PUSH
14956: LD_INT 1
14958: ARRAY
14959: PUSH
14960: LD_INT 1
14962: ARRAY
14963: PUSH
14964: LD_STRING p
14966: EQUAL
14967: IFFALSE 14977
// result := true ;
14969: LD_ADDR_VAR 0 2
14973: PUSH
14974: LD_INT 1
14976: ST_TO_ADDR
// end ;
14977: LD_VAR 0 2
14981: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14982: LD_INT 0
14984: PPUSH
14985: PPUSH
14986: PPUSH
14987: PPUSH
// if pos < 1 then
14988: LD_VAR 0 2
14992: PUSH
14993: LD_INT 1
14995: LESS
14996: IFFALSE 15000
// exit ;
14998: GO 15303
// if pos = 1 then
15000: LD_VAR 0 2
15004: PUSH
15005: LD_INT 1
15007: EQUAL
15008: IFFALSE 15041
// result := Replace ( arr , pos [ 1 ] , value ) else
15010: LD_ADDR_VAR 0 4
15014: PUSH
15015: LD_VAR 0 1
15019: PPUSH
15020: LD_VAR 0 2
15024: PUSH
15025: LD_INT 1
15027: ARRAY
15028: PPUSH
15029: LD_VAR 0 3
15033: PPUSH
15034: CALL_OW 1
15038: ST_TO_ADDR
15039: GO 15303
// begin tmp := arr ;
15041: LD_ADDR_VAR 0 6
15045: PUSH
15046: LD_VAR 0 1
15050: ST_TO_ADDR
// s_arr := [ tmp ] ;
15051: LD_ADDR_VAR 0 7
15055: PUSH
15056: LD_VAR 0 6
15060: PUSH
15061: EMPTY
15062: LIST
15063: ST_TO_ADDR
// for i = 1 to pos - 1 do
15064: LD_ADDR_VAR 0 5
15068: PUSH
15069: DOUBLE
15070: LD_INT 1
15072: DEC
15073: ST_TO_ADDR
15074: LD_VAR 0 2
15078: PUSH
15079: LD_INT 1
15081: MINUS
15082: PUSH
15083: FOR_TO
15084: IFFALSE 15129
// begin tmp := tmp [ pos [ i ] ] ;
15086: LD_ADDR_VAR 0 6
15090: PUSH
15091: LD_VAR 0 6
15095: PUSH
15096: LD_VAR 0 2
15100: PUSH
15101: LD_VAR 0 5
15105: ARRAY
15106: ARRAY
15107: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15108: LD_ADDR_VAR 0 7
15112: PUSH
15113: LD_VAR 0 7
15117: PUSH
15118: LD_VAR 0 6
15122: PUSH
15123: EMPTY
15124: LIST
15125: ADD
15126: ST_TO_ADDR
// end ;
15127: GO 15083
15129: POP
15130: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15131: LD_ADDR_VAR 0 6
15135: PUSH
15136: LD_VAR 0 6
15140: PPUSH
15141: LD_VAR 0 2
15145: PUSH
15146: LD_VAR 0 2
15150: ARRAY
15151: PPUSH
15152: LD_VAR 0 3
15156: PPUSH
15157: CALL_OW 1
15161: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15162: LD_ADDR_VAR 0 7
15166: PUSH
15167: LD_VAR 0 7
15171: PPUSH
15172: LD_VAR 0 7
15176: PPUSH
15177: LD_VAR 0 6
15181: PPUSH
15182: CALL_OW 1
15186: ST_TO_ADDR
// for i = s_arr downto 2 do
15187: LD_ADDR_VAR 0 5
15191: PUSH
15192: DOUBLE
15193: LD_VAR 0 7
15197: INC
15198: ST_TO_ADDR
15199: LD_INT 2
15201: PUSH
15202: FOR_DOWNTO
15203: IFFALSE 15287
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15205: LD_ADDR_VAR 0 6
15209: PUSH
15210: LD_VAR 0 7
15214: PUSH
15215: LD_VAR 0 5
15219: PUSH
15220: LD_INT 1
15222: MINUS
15223: ARRAY
15224: PPUSH
15225: LD_VAR 0 2
15229: PUSH
15230: LD_VAR 0 5
15234: PUSH
15235: LD_INT 1
15237: MINUS
15238: ARRAY
15239: PPUSH
15240: LD_VAR 0 7
15244: PUSH
15245: LD_VAR 0 5
15249: ARRAY
15250: PPUSH
15251: CALL_OW 1
15255: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15256: LD_ADDR_VAR 0 7
15260: PUSH
15261: LD_VAR 0 7
15265: PPUSH
15266: LD_VAR 0 5
15270: PUSH
15271: LD_INT 1
15273: MINUS
15274: PPUSH
15275: LD_VAR 0 6
15279: PPUSH
15280: CALL_OW 1
15284: ST_TO_ADDR
// end ;
15285: GO 15202
15287: POP
15288: POP
// result := s_arr [ 1 ] ;
15289: LD_ADDR_VAR 0 4
15293: PUSH
15294: LD_VAR 0 7
15298: PUSH
15299: LD_INT 1
15301: ARRAY
15302: ST_TO_ADDR
// end ; end ;
15303: LD_VAR 0 4
15307: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15308: LD_INT 0
15310: PPUSH
15311: PPUSH
// if not list then
15312: LD_VAR 0 1
15316: NOT
15317: IFFALSE 15321
// exit ;
15319: GO 15412
// i := list [ pos1 ] ;
15321: LD_ADDR_VAR 0 5
15325: PUSH
15326: LD_VAR 0 1
15330: PUSH
15331: LD_VAR 0 2
15335: ARRAY
15336: ST_TO_ADDR
// if not i then
15337: LD_VAR 0 5
15341: NOT
15342: IFFALSE 15346
// exit ;
15344: GO 15412
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15346: LD_ADDR_VAR 0 1
15350: PUSH
15351: LD_VAR 0 1
15355: PPUSH
15356: LD_VAR 0 2
15360: PPUSH
15361: LD_VAR 0 1
15365: PUSH
15366: LD_VAR 0 3
15370: ARRAY
15371: PPUSH
15372: CALL_OW 1
15376: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15377: LD_ADDR_VAR 0 1
15381: PUSH
15382: LD_VAR 0 1
15386: PPUSH
15387: LD_VAR 0 3
15391: PPUSH
15392: LD_VAR 0 5
15396: PPUSH
15397: CALL_OW 1
15401: ST_TO_ADDR
// result := list ;
15402: LD_ADDR_VAR 0 4
15406: PUSH
15407: LD_VAR 0 1
15411: ST_TO_ADDR
// end ;
15412: LD_VAR 0 4
15416: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15417: LD_INT 0
15419: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15420: LD_ADDR_VAR 0 5
15424: PUSH
15425: LD_VAR 0 1
15429: PPUSH
15430: CALL_OW 250
15434: PPUSH
15435: LD_VAR 0 1
15439: PPUSH
15440: CALL_OW 251
15444: PPUSH
15445: LD_VAR 0 2
15449: PPUSH
15450: LD_VAR 0 3
15454: PPUSH
15455: LD_VAR 0 4
15459: PPUSH
15460: CALL 15838 0 5
15464: ST_TO_ADDR
// end ;
15465: LD_VAR 0 5
15469: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15470: LD_INT 0
15472: PPUSH
15473: PPUSH
15474: PPUSH
15475: PPUSH
// if not list or not unit then
15476: LD_VAR 0 2
15480: NOT
15481: PUSH
15482: LD_VAR 0 1
15486: NOT
15487: OR
15488: IFFALSE 15492
// exit ;
15490: GO 15833
// result := [ ] ;
15492: LD_ADDR_VAR 0 5
15496: PUSH
15497: EMPTY
15498: ST_TO_ADDR
// for i in list do
15499: LD_ADDR_VAR 0 6
15503: PUSH
15504: LD_VAR 0 2
15508: PUSH
15509: FOR_IN
15510: IFFALSE 15728
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15512: LD_ADDR_VAR 0 8
15516: PUSH
15517: LD_VAR 0 1
15521: PPUSH
15522: LD_VAR 0 6
15526: PUSH
15527: LD_INT 1
15529: ARRAY
15530: PPUSH
15531: LD_VAR 0 6
15535: PUSH
15536: LD_INT 2
15538: ARRAY
15539: PPUSH
15540: CALL_OW 297
15544: ST_TO_ADDR
// if not Count ( result ) then
15545: LD_VAR 0 5
15549: PPUSH
15550: CALL 12122 0 1
15554: NOT
15555: IFFALSE 15588
// begin result := Join ( result , [ i , tmp ] ) ;
15557: LD_ADDR_VAR 0 5
15561: PUSH
15562: LD_VAR 0 5
15566: PPUSH
15567: LD_VAR 0 6
15571: PUSH
15572: LD_VAR 0 8
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PPUSH
15581: CALL 47731 0 2
15585: ST_TO_ADDR
// continue ;
15586: GO 15509
// end ; if result [ result ] [ 2 ] <= tmp then
15588: LD_VAR 0 5
15592: PUSH
15593: LD_VAR 0 5
15597: ARRAY
15598: PUSH
15599: LD_INT 2
15601: ARRAY
15602: PUSH
15603: LD_VAR 0 8
15607: LESSEQUAL
15608: IFFALSE 15641
// result := Join ( result , [ i , tmp ] ) else
15610: LD_ADDR_VAR 0 5
15614: PUSH
15615: LD_VAR 0 5
15619: PPUSH
15620: LD_VAR 0 6
15624: PUSH
15625: LD_VAR 0 8
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PPUSH
15634: CALL 47731 0 2
15638: ST_TO_ADDR
15639: GO 15726
// begin for j := 1 to Count ( result ) do
15641: LD_ADDR_VAR 0 7
15645: PUSH
15646: DOUBLE
15647: LD_INT 1
15649: DEC
15650: ST_TO_ADDR
15651: LD_VAR 0 5
15655: PPUSH
15656: CALL 12122 0 1
15660: PUSH
15661: FOR_TO
15662: IFFALSE 15724
// begin if tmp < result [ j ] [ 2 ] then
15664: LD_VAR 0 8
15668: PUSH
15669: LD_VAR 0 5
15673: PUSH
15674: LD_VAR 0 7
15678: ARRAY
15679: PUSH
15680: LD_INT 2
15682: ARRAY
15683: LESS
15684: IFFALSE 15722
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15686: LD_ADDR_VAR 0 5
15690: PUSH
15691: LD_VAR 0 5
15695: PPUSH
15696: LD_VAR 0 7
15700: PPUSH
15701: LD_VAR 0 6
15705: PUSH
15706: LD_VAR 0 8
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PPUSH
15715: CALL_OW 2
15719: ST_TO_ADDR
// break ;
15720: GO 15724
// end ; end ;
15722: GO 15661
15724: POP
15725: POP
// end ; end ;
15726: GO 15509
15728: POP
15729: POP
// if result and not asc then
15730: LD_VAR 0 5
15734: PUSH
15735: LD_VAR 0 3
15739: NOT
15740: AND
15741: IFFALSE 15758
// result := ReverseArray ( result ) ;
15743: LD_ADDR_VAR 0 5
15747: PUSH
15748: LD_VAR 0 5
15752: PPUSH
15753: CALL 42998 0 1
15757: ST_TO_ADDR
// tmp := [ ] ;
15758: LD_ADDR_VAR 0 8
15762: PUSH
15763: EMPTY
15764: ST_TO_ADDR
// if mode then
15765: LD_VAR 0 4
15769: IFFALSE 15833
// begin for i := 1 to result do
15771: LD_ADDR_VAR 0 6
15775: PUSH
15776: DOUBLE
15777: LD_INT 1
15779: DEC
15780: ST_TO_ADDR
15781: LD_VAR 0 5
15785: PUSH
15786: FOR_TO
15787: IFFALSE 15821
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15789: LD_ADDR_VAR 0 8
15793: PUSH
15794: LD_VAR 0 8
15798: PPUSH
15799: LD_VAR 0 5
15803: PUSH
15804: LD_VAR 0 6
15808: ARRAY
15809: PUSH
15810: LD_INT 1
15812: ARRAY
15813: PPUSH
15814: CALL 47731 0 2
15818: ST_TO_ADDR
15819: GO 15786
15821: POP
15822: POP
// result := tmp ;
15823: LD_ADDR_VAR 0 5
15827: PUSH
15828: LD_VAR 0 8
15832: ST_TO_ADDR
// end ; end ;
15833: LD_VAR 0 5
15837: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15838: LD_INT 0
15840: PPUSH
15841: PPUSH
15842: PPUSH
15843: PPUSH
// if not list then
15844: LD_VAR 0 3
15848: NOT
15849: IFFALSE 15853
// exit ;
15851: GO 16241
// result := [ ] ;
15853: LD_ADDR_VAR 0 6
15857: PUSH
15858: EMPTY
15859: ST_TO_ADDR
// for i in list do
15860: LD_ADDR_VAR 0 7
15864: PUSH
15865: LD_VAR 0 3
15869: PUSH
15870: FOR_IN
15871: IFFALSE 16073
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15873: LD_ADDR_VAR 0 9
15877: PUSH
15878: LD_VAR 0 7
15882: PPUSH
15883: LD_VAR 0 1
15887: PPUSH
15888: LD_VAR 0 2
15892: PPUSH
15893: CALL_OW 297
15897: ST_TO_ADDR
// if not result then
15898: LD_VAR 0 6
15902: NOT
15903: IFFALSE 15929
// result := [ [ i , tmp ] ] else
15905: LD_ADDR_VAR 0 6
15909: PUSH
15910: LD_VAR 0 7
15914: PUSH
15915: LD_VAR 0 9
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: EMPTY
15925: LIST
15926: ST_TO_ADDR
15927: GO 16071
// begin if result [ result ] [ 2 ] <= tmp then
15929: LD_VAR 0 6
15933: PUSH
15934: LD_VAR 0 6
15938: ARRAY
15939: PUSH
15940: LD_INT 2
15942: ARRAY
15943: PUSH
15944: LD_VAR 0 9
15948: LESSEQUAL
15949: IFFALSE 15991
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15951: LD_ADDR_VAR 0 6
15955: PUSH
15956: LD_VAR 0 6
15960: PPUSH
15961: LD_VAR 0 6
15965: PUSH
15966: LD_INT 1
15968: PLUS
15969: PPUSH
15970: LD_VAR 0 7
15974: PUSH
15975: LD_VAR 0 9
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PPUSH
15984: CALL_OW 2
15988: ST_TO_ADDR
15989: GO 16071
// for j := 1 to result do
15991: LD_ADDR_VAR 0 8
15995: PUSH
15996: DOUBLE
15997: LD_INT 1
15999: DEC
16000: ST_TO_ADDR
16001: LD_VAR 0 6
16005: PUSH
16006: FOR_TO
16007: IFFALSE 16069
// begin if tmp < result [ j ] [ 2 ] then
16009: LD_VAR 0 9
16013: PUSH
16014: LD_VAR 0 6
16018: PUSH
16019: LD_VAR 0 8
16023: ARRAY
16024: PUSH
16025: LD_INT 2
16027: ARRAY
16028: LESS
16029: IFFALSE 16067
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16031: LD_ADDR_VAR 0 6
16035: PUSH
16036: LD_VAR 0 6
16040: PPUSH
16041: LD_VAR 0 8
16045: PPUSH
16046: LD_VAR 0 7
16050: PUSH
16051: LD_VAR 0 9
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PPUSH
16060: CALL_OW 2
16064: ST_TO_ADDR
// break ;
16065: GO 16069
// end ; end ;
16067: GO 16006
16069: POP
16070: POP
// end ; end ;
16071: GO 15870
16073: POP
16074: POP
// if result and not asc then
16075: LD_VAR 0 6
16079: PUSH
16080: LD_VAR 0 4
16084: NOT
16085: AND
16086: IFFALSE 16161
// begin tmp := result ;
16088: LD_ADDR_VAR 0 9
16092: PUSH
16093: LD_VAR 0 6
16097: ST_TO_ADDR
// for i = tmp downto 1 do
16098: LD_ADDR_VAR 0 7
16102: PUSH
16103: DOUBLE
16104: LD_VAR 0 9
16108: INC
16109: ST_TO_ADDR
16110: LD_INT 1
16112: PUSH
16113: FOR_DOWNTO
16114: IFFALSE 16159
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16116: LD_ADDR_VAR 0 6
16120: PUSH
16121: LD_VAR 0 6
16125: PPUSH
16126: LD_VAR 0 9
16130: PUSH
16131: LD_VAR 0 7
16135: MINUS
16136: PUSH
16137: LD_INT 1
16139: PLUS
16140: PPUSH
16141: LD_VAR 0 9
16145: PUSH
16146: LD_VAR 0 7
16150: ARRAY
16151: PPUSH
16152: CALL_OW 1
16156: ST_TO_ADDR
16157: GO 16113
16159: POP
16160: POP
// end ; tmp := [ ] ;
16161: LD_ADDR_VAR 0 9
16165: PUSH
16166: EMPTY
16167: ST_TO_ADDR
// if mode then
16168: LD_VAR 0 5
16172: IFFALSE 16241
// begin for i = 1 to result do
16174: LD_ADDR_VAR 0 7
16178: PUSH
16179: DOUBLE
16180: LD_INT 1
16182: DEC
16183: ST_TO_ADDR
16184: LD_VAR 0 6
16188: PUSH
16189: FOR_TO
16190: IFFALSE 16229
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16192: LD_ADDR_VAR 0 9
16196: PUSH
16197: LD_VAR 0 9
16201: PPUSH
16202: LD_VAR 0 7
16206: PPUSH
16207: LD_VAR 0 6
16211: PUSH
16212: LD_VAR 0 7
16216: ARRAY
16217: PUSH
16218: LD_INT 1
16220: ARRAY
16221: PPUSH
16222: CALL_OW 1
16226: ST_TO_ADDR
16227: GO 16189
16229: POP
16230: POP
// result := tmp ;
16231: LD_ADDR_VAR 0 6
16235: PUSH
16236: LD_VAR 0 9
16240: ST_TO_ADDR
// end ; end ;
16241: LD_VAR 0 6
16245: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16246: LD_INT 0
16248: PPUSH
16249: PPUSH
16250: PPUSH
16251: PPUSH
16252: PPUSH
16253: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16254: LD_ADDR_VAR 0 5
16258: PUSH
16259: LD_INT 0
16261: PUSH
16262: LD_INT 0
16264: PUSH
16265: LD_INT 0
16267: PUSH
16268: EMPTY
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: ST_TO_ADDR
// if not x or not y then
16276: LD_VAR 0 2
16280: NOT
16281: PUSH
16282: LD_VAR 0 3
16286: NOT
16287: OR
16288: IFFALSE 16292
// exit ;
16290: GO 17942
// if not range then
16292: LD_VAR 0 4
16296: NOT
16297: IFFALSE 16307
// range := 10 ;
16299: LD_ADDR_VAR 0 4
16303: PUSH
16304: LD_INT 10
16306: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16307: LD_ADDR_VAR 0 8
16311: PUSH
16312: LD_INT 81
16314: PUSH
16315: LD_VAR 0 1
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 92
16326: PUSH
16327: LD_VAR 0 2
16331: PUSH
16332: LD_VAR 0 3
16336: PUSH
16337: LD_VAR 0 4
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 3
16350: PUSH
16351: LD_INT 21
16353: PUSH
16354: LD_INT 3
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: LIST
16369: PPUSH
16370: CALL_OW 69
16374: ST_TO_ADDR
// if not tmp then
16375: LD_VAR 0 8
16379: NOT
16380: IFFALSE 16384
// exit ;
16382: GO 17942
// for i in tmp do
16384: LD_ADDR_VAR 0 6
16388: PUSH
16389: LD_VAR 0 8
16393: PUSH
16394: FOR_IN
16395: IFFALSE 17917
// begin points := [ 0 , 0 , 0 ] ;
16397: LD_ADDR_VAR 0 9
16401: PUSH
16402: LD_INT 0
16404: PUSH
16405: LD_INT 0
16407: PUSH
16408: LD_INT 0
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: LIST
16415: ST_TO_ADDR
// bpoints := 1 ;
16416: LD_ADDR_VAR 0 10
16420: PUSH
16421: LD_INT 1
16423: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16424: LD_VAR 0 6
16428: PPUSH
16429: CALL_OW 247
16433: PUSH
16434: LD_INT 1
16436: DOUBLE
16437: EQUAL
16438: IFTRUE 16442
16440: GO 17020
16442: POP
// begin if GetClass ( i ) = 1 then
16443: LD_VAR 0 6
16447: PPUSH
16448: CALL_OW 257
16452: PUSH
16453: LD_INT 1
16455: EQUAL
16456: IFFALSE 16477
// points := [ 10 , 5 , 3 ] ;
16458: LD_ADDR_VAR 0 9
16462: PUSH
16463: LD_INT 10
16465: PUSH
16466: LD_INT 5
16468: PUSH
16469: LD_INT 3
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16477: LD_VAR 0 6
16481: PPUSH
16482: CALL_OW 257
16486: PUSH
16487: LD_INT 2
16489: PUSH
16490: LD_INT 3
16492: PUSH
16493: LD_INT 4
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: LIST
16500: IN
16501: IFFALSE 16522
// points := [ 3 , 2 , 1 ] ;
16503: LD_ADDR_VAR 0 9
16507: PUSH
16508: LD_INT 3
16510: PUSH
16511: LD_INT 2
16513: PUSH
16514: LD_INT 1
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: LIST
16521: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16522: LD_VAR 0 6
16526: PPUSH
16527: CALL_OW 257
16531: PUSH
16532: LD_INT 5
16534: EQUAL
16535: IFFALSE 16556
// points := [ 130 , 5 , 2 ] ;
16537: LD_ADDR_VAR 0 9
16541: PUSH
16542: LD_INT 130
16544: PUSH
16545: LD_INT 5
16547: PUSH
16548: LD_INT 2
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: LIST
16555: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16556: LD_VAR 0 6
16560: PPUSH
16561: CALL_OW 257
16565: PUSH
16566: LD_INT 8
16568: EQUAL
16569: IFFALSE 16590
// points := [ 35 , 35 , 30 ] ;
16571: LD_ADDR_VAR 0 9
16575: PUSH
16576: LD_INT 35
16578: PUSH
16579: LD_INT 35
16581: PUSH
16582: LD_INT 30
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: LIST
16589: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16590: LD_VAR 0 6
16594: PPUSH
16595: CALL_OW 257
16599: PUSH
16600: LD_INT 9
16602: EQUAL
16603: IFFALSE 16624
// points := [ 20 , 55 , 40 ] ;
16605: LD_ADDR_VAR 0 9
16609: PUSH
16610: LD_INT 20
16612: PUSH
16613: LD_INT 55
16615: PUSH
16616: LD_INT 40
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: LIST
16623: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16624: LD_VAR 0 6
16628: PPUSH
16629: CALL_OW 257
16633: PUSH
16634: LD_INT 12
16636: PUSH
16637: LD_INT 16
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: IN
16644: IFFALSE 16665
// points := [ 5 , 3 , 2 ] ;
16646: LD_ADDR_VAR 0 9
16650: PUSH
16651: LD_INT 5
16653: PUSH
16654: LD_INT 3
16656: PUSH
16657: LD_INT 2
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: LIST
16664: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16665: LD_VAR 0 6
16669: PPUSH
16670: CALL_OW 257
16674: PUSH
16675: LD_INT 17
16677: EQUAL
16678: IFFALSE 16699
// points := [ 100 , 50 , 75 ] ;
16680: LD_ADDR_VAR 0 9
16684: PUSH
16685: LD_INT 100
16687: PUSH
16688: LD_INT 50
16690: PUSH
16691: LD_INT 75
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: LIST
16698: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16699: LD_VAR 0 6
16703: PPUSH
16704: CALL_OW 257
16708: PUSH
16709: LD_INT 15
16711: EQUAL
16712: IFFALSE 16733
// points := [ 10 , 5 , 3 ] ;
16714: LD_ADDR_VAR 0 9
16718: PUSH
16719: LD_INT 10
16721: PUSH
16722: LD_INT 5
16724: PUSH
16725: LD_INT 3
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: LIST
16732: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16733: LD_VAR 0 6
16737: PPUSH
16738: CALL_OW 257
16742: PUSH
16743: LD_INT 14
16745: EQUAL
16746: IFFALSE 16767
// points := [ 10 , 0 , 0 ] ;
16748: LD_ADDR_VAR 0 9
16752: PUSH
16753: LD_INT 10
16755: PUSH
16756: LD_INT 0
16758: PUSH
16759: LD_INT 0
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: LIST
16766: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16767: LD_VAR 0 6
16771: PPUSH
16772: CALL_OW 257
16776: PUSH
16777: LD_INT 11
16779: EQUAL
16780: IFFALSE 16801
// points := [ 30 , 10 , 5 ] ;
16782: LD_ADDR_VAR 0 9
16786: PUSH
16787: LD_INT 30
16789: PUSH
16790: LD_INT 10
16792: PUSH
16793: LD_INT 5
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: LIST
16800: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16801: LD_VAR 0 1
16805: PPUSH
16806: LD_INT 5
16808: PPUSH
16809: CALL_OW 321
16813: PUSH
16814: LD_INT 2
16816: EQUAL
16817: IFFALSE 16834
// bpoints := bpoints * 1.8 ;
16819: LD_ADDR_VAR 0 10
16823: PUSH
16824: LD_VAR 0 10
16828: PUSH
16829: LD_REAL  1.80000000000000E+0000
16832: MUL
16833: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16834: LD_VAR 0 6
16838: PPUSH
16839: CALL_OW 257
16843: PUSH
16844: LD_INT 1
16846: PUSH
16847: LD_INT 2
16849: PUSH
16850: LD_INT 3
16852: PUSH
16853: LD_INT 4
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: IN
16862: PUSH
16863: LD_VAR 0 1
16867: PPUSH
16868: LD_INT 51
16870: PPUSH
16871: CALL_OW 321
16875: PUSH
16876: LD_INT 2
16878: EQUAL
16879: AND
16880: IFFALSE 16897
// bpoints := bpoints * 1.2 ;
16882: LD_ADDR_VAR 0 10
16886: PUSH
16887: LD_VAR 0 10
16891: PUSH
16892: LD_REAL  1.20000000000000E+0000
16895: MUL
16896: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16897: LD_VAR 0 6
16901: PPUSH
16902: CALL_OW 257
16906: PUSH
16907: LD_INT 5
16909: PUSH
16910: LD_INT 7
16912: PUSH
16913: LD_INT 9
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: LIST
16920: IN
16921: PUSH
16922: LD_VAR 0 1
16926: PPUSH
16927: LD_INT 52
16929: PPUSH
16930: CALL_OW 321
16934: PUSH
16935: LD_INT 2
16937: EQUAL
16938: AND
16939: IFFALSE 16956
// bpoints := bpoints * 1.5 ;
16941: LD_ADDR_VAR 0 10
16945: PUSH
16946: LD_VAR 0 10
16950: PUSH
16951: LD_REAL  1.50000000000000E+0000
16954: MUL
16955: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16956: LD_VAR 0 1
16960: PPUSH
16961: LD_INT 66
16963: PPUSH
16964: CALL_OW 321
16968: PUSH
16969: LD_INT 2
16971: EQUAL
16972: IFFALSE 16989
// bpoints := bpoints * 1.1 ;
16974: LD_ADDR_VAR 0 10
16978: PUSH
16979: LD_VAR 0 10
16983: PUSH
16984: LD_REAL  1.10000000000000E+0000
16987: MUL
16988: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16989: LD_ADDR_VAR 0 10
16993: PUSH
16994: LD_VAR 0 10
16998: PUSH
16999: LD_VAR 0 6
17003: PPUSH
17004: LD_INT 1
17006: PPUSH
17007: CALL_OW 259
17011: PUSH
17012: LD_REAL  1.15000000000000E+0000
17015: MUL
17016: MUL
17017: ST_TO_ADDR
// end ; unit_vehicle :
17018: GO 17846
17020: LD_INT 2
17022: DOUBLE
17023: EQUAL
17024: IFTRUE 17028
17026: GO 17834
17028: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17029: LD_VAR 0 6
17033: PPUSH
17034: CALL_OW 264
17038: PUSH
17039: LD_INT 2
17041: PUSH
17042: LD_INT 42
17044: PUSH
17045: LD_INT 24
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: IN
17053: IFFALSE 17074
// points := [ 25 , 5 , 3 ] ;
17055: LD_ADDR_VAR 0 9
17059: PUSH
17060: LD_INT 25
17062: PUSH
17063: LD_INT 5
17065: PUSH
17066: LD_INT 3
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: LIST
17073: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17074: LD_VAR 0 6
17078: PPUSH
17079: CALL_OW 264
17083: PUSH
17084: LD_INT 4
17086: PUSH
17087: LD_INT 43
17089: PUSH
17090: LD_INT 25
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: LIST
17097: IN
17098: IFFALSE 17119
// points := [ 40 , 15 , 5 ] ;
17100: LD_ADDR_VAR 0 9
17104: PUSH
17105: LD_INT 40
17107: PUSH
17108: LD_INT 15
17110: PUSH
17111: LD_INT 5
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: LIST
17118: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17119: LD_VAR 0 6
17123: PPUSH
17124: CALL_OW 264
17128: PUSH
17129: LD_INT 3
17131: PUSH
17132: LD_INT 23
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: IN
17139: IFFALSE 17160
// points := [ 7 , 25 , 8 ] ;
17141: LD_ADDR_VAR 0 9
17145: PUSH
17146: LD_INT 7
17148: PUSH
17149: LD_INT 25
17151: PUSH
17152: LD_INT 8
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: LIST
17159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17160: LD_VAR 0 6
17164: PPUSH
17165: CALL_OW 264
17169: PUSH
17170: LD_INT 5
17172: PUSH
17173: LD_INT 27
17175: PUSH
17176: LD_INT 44
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: LIST
17183: IN
17184: IFFALSE 17205
// points := [ 14 , 50 , 16 ] ;
17186: LD_ADDR_VAR 0 9
17190: PUSH
17191: LD_INT 14
17193: PUSH
17194: LD_INT 50
17196: PUSH
17197: LD_INT 16
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: LIST
17204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17205: LD_VAR 0 6
17209: PPUSH
17210: CALL_OW 264
17214: PUSH
17215: LD_INT 6
17217: PUSH
17218: LD_INT 46
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: IN
17225: IFFALSE 17246
// points := [ 32 , 120 , 70 ] ;
17227: LD_ADDR_VAR 0 9
17231: PUSH
17232: LD_INT 32
17234: PUSH
17235: LD_INT 120
17237: PUSH
17238: LD_INT 70
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: LIST
17245: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17246: LD_VAR 0 6
17250: PPUSH
17251: CALL_OW 264
17255: PUSH
17256: LD_INT 7
17258: PUSH
17259: LD_INT 28
17261: PUSH
17262: LD_INT 45
17264: PUSH
17265: LD_INT 92
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: IN
17274: IFFALSE 17295
// points := [ 35 , 20 , 45 ] ;
17276: LD_ADDR_VAR 0 9
17280: PUSH
17281: LD_INT 35
17283: PUSH
17284: LD_INT 20
17286: PUSH
17287: LD_INT 45
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: LIST
17294: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17295: LD_VAR 0 6
17299: PPUSH
17300: CALL_OW 264
17304: PUSH
17305: LD_INT 47
17307: PUSH
17308: EMPTY
17309: LIST
17310: IN
17311: IFFALSE 17332
// points := [ 67 , 45 , 75 ] ;
17313: LD_ADDR_VAR 0 9
17317: PUSH
17318: LD_INT 67
17320: PUSH
17321: LD_INT 45
17323: PUSH
17324: LD_INT 75
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: LIST
17331: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17332: LD_VAR 0 6
17336: PPUSH
17337: CALL_OW 264
17341: PUSH
17342: LD_INT 26
17344: PUSH
17345: EMPTY
17346: LIST
17347: IN
17348: IFFALSE 17369
// points := [ 120 , 30 , 80 ] ;
17350: LD_ADDR_VAR 0 9
17354: PUSH
17355: LD_INT 120
17357: PUSH
17358: LD_INT 30
17360: PUSH
17361: LD_INT 80
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: LIST
17368: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17369: LD_VAR 0 6
17373: PPUSH
17374: CALL_OW 264
17378: PUSH
17379: LD_INT 22
17381: PUSH
17382: EMPTY
17383: LIST
17384: IN
17385: IFFALSE 17406
// points := [ 40 , 1 , 1 ] ;
17387: LD_ADDR_VAR 0 9
17391: PUSH
17392: LD_INT 40
17394: PUSH
17395: LD_INT 1
17397: PUSH
17398: LD_INT 1
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: LIST
17405: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17406: LD_VAR 0 6
17410: PPUSH
17411: CALL_OW 264
17415: PUSH
17416: LD_INT 29
17418: PUSH
17419: EMPTY
17420: LIST
17421: IN
17422: IFFALSE 17443
// points := [ 70 , 200 , 400 ] ;
17424: LD_ADDR_VAR 0 9
17428: PUSH
17429: LD_INT 70
17431: PUSH
17432: LD_INT 200
17434: PUSH
17435: LD_INT 400
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: LIST
17442: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17443: LD_VAR 0 6
17447: PPUSH
17448: CALL_OW 264
17452: PUSH
17453: LD_INT 14
17455: PUSH
17456: LD_INT 53
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: IN
17463: IFFALSE 17484
// points := [ 40 , 10 , 20 ] ;
17465: LD_ADDR_VAR 0 9
17469: PUSH
17470: LD_INT 40
17472: PUSH
17473: LD_INT 10
17475: PUSH
17476: LD_INT 20
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: LIST
17483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17484: LD_VAR 0 6
17488: PPUSH
17489: CALL_OW 264
17493: PUSH
17494: LD_INT 9
17496: PUSH
17497: EMPTY
17498: LIST
17499: IN
17500: IFFALSE 17521
// points := [ 5 , 70 , 20 ] ;
17502: LD_ADDR_VAR 0 9
17506: PUSH
17507: LD_INT 5
17509: PUSH
17510: LD_INT 70
17512: PUSH
17513: LD_INT 20
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: LIST
17520: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17521: LD_VAR 0 6
17525: PPUSH
17526: CALL_OW 264
17530: PUSH
17531: LD_INT 10
17533: PUSH
17534: EMPTY
17535: LIST
17536: IN
17537: IFFALSE 17558
// points := [ 35 , 110 , 70 ] ;
17539: LD_ADDR_VAR 0 9
17543: PUSH
17544: LD_INT 35
17546: PUSH
17547: LD_INT 110
17549: PUSH
17550: LD_INT 70
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17558: LD_VAR 0 6
17562: PPUSH
17563: CALL_OW 265
17567: PUSH
17568: LD_INT 25
17570: EQUAL
17571: IFFALSE 17592
// points := [ 80 , 65 , 100 ] ;
17573: LD_ADDR_VAR 0 9
17577: PUSH
17578: LD_INT 80
17580: PUSH
17581: LD_INT 65
17583: PUSH
17584: LD_INT 100
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: LIST
17591: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17592: LD_VAR 0 6
17596: PPUSH
17597: CALL_OW 263
17601: PUSH
17602: LD_INT 1
17604: EQUAL
17605: IFFALSE 17640
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17607: LD_ADDR_VAR 0 10
17611: PUSH
17612: LD_VAR 0 10
17616: PUSH
17617: LD_VAR 0 6
17621: PPUSH
17622: CALL_OW 311
17626: PPUSH
17627: LD_INT 3
17629: PPUSH
17630: CALL_OW 259
17634: PUSH
17635: LD_INT 4
17637: MUL
17638: MUL
17639: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17640: LD_VAR 0 6
17644: PPUSH
17645: CALL_OW 263
17649: PUSH
17650: LD_INT 2
17652: EQUAL
17653: IFFALSE 17704
// begin j := IsControledBy ( i ) ;
17655: LD_ADDR_VAR 0 7
17659: PUSH
17660: LD_VAR 0 6
17664: PPUSH
17665: CALL_OW 312
17669: ST_TO_ADDR
// if j then
17670: LD_VAR 0 7
17674: IFFALSE 17704
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17676: LD_ADDR_VAR 0 10
17680: PUSH
17681: LD_VAR 0 10
17685: PUSH
17686: LD_VAR 0 7
17690: PPUSH
17691: LD_INT 3
17693: PPUSH
17694: CALL_OW 259
17698: PUSH
17699: LD_INT 3
17701: MUL
17702: MUL
17703: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17704: LD_VAR 0 6
17708: PPUSH
17709: CALL_OW 264
17713: PUSH
17714: LD_INT 5
17716: PUSH
17717: LD_INT 6
17719: PUSH
17720: LD_INT 46
17722: PUSH
17723: LD_INT 44
17725: PUSH
17726: LD_INT 47
17728: PUSH
17729: LD_INT 45
17731: PUSH
17732: LD_INT 28
17734: PUSH
17735: LD_INT 7
17737: PUSH
17738: LD_INT 27
17740: PUSH
17741: LD_INT 29
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: IN
17756: PUSH
17757: LD_VAR 0 1
17761: PPUSH
17762: LD_INT 52
17764: PPUSH
17765: CALL_OW 321
17769: PUSH
17770: LD_INT 2
17772: EQUAL
17773: AND
17774: IFFALSE 17791
// bpoints := bpoints * 1.2 ;
17776: LD_ADDR_VAR 0 10
17780: PUSH
17781: LD_VAR 0 10
17785: PUSH
17786: LD_REAL  1.20000000000000E+0000
17789: MUL
17790: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17791: LD_VAR 0 6
17795: PPUSH
17796: CALL_OW 264
17800: PUSH
17801: LD_INT 6
17803: PUSH
17804: LD_INT 46
17806: PUSH
17807: LD_INT 47
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: IN
17815: IFFALSE 17832
// bpoints := bpoints * 1.2 ;
17817: LD_ADDR_VAR 0 10
17821: PUSH
17822: LD_VAR 0 10
17826: PUSH
17827: LD_REAL  1.20000000000000E+0000
17830: MUL
17831: ST_TO_ADDR
// end ; unit_building :
17832: GO 17846
17834: LD_INT 3
17836: DOUBLE
17837: EQUAL
17838: IFTRUE 17842
17840: GO 17845
17842: POP
// ; end ;
17843: GO 17846
17845: POP
// for j = 1 to 3 do
17846: LD_ADDR_VAR 0 7
17850: PUSH
17851: DOUBLE
17852: LD_INT 1
17854: DEC
17855: ST_TO_ADDR
17856: LD_INT 3
17858: PUSH
17859: FOR_TO
17860: IFFALSE 17913
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17862: LD_ADDR_VAR 0 5
17866: PUSH
17867: LD_VAR 0 5
17871: PPUSH
17872: LD_VAR 0 7
17876: PPUSH
17877: LD_VAR 0 5
17881: PUSH
17882: LD_VAR 0 7
17886: ARRAY
17887: PUSH
17888: LD_VAR 0 9
17892: PUSH
17893: LD_VAR 0 7
17897: ARRAY
17898: PUSH
17899: LD_VAR 0 10
17903: MUL
17904: PLUS
17905: PPUSH
17906: CALL_OW 1
17910: ST_TO_ADDR
17911: GO 17859
17913: POP
17914: POP
// end ;
17915: GO 16394
17917: POP
17918: POP
// result := Replace ( result , 4 , tmp ) ;
17919: LD_ADDR_VAR 0 5
17923: PUSH
17924: LD_VAR 0 5
17928: PPUSH
17929: LD_INT 4
17931: PPUSH
17932: LD_VAR 0 8
17936: PPUSH
17937: CALL_OW 1
17941: ST_TO_ADDR
// end ;
17942: LD_VAR 0 5
17946: RET
// export function DangerAtRange ( unit , range ) ; begin
17947: LD_INT 0
17949: PPUSH
// if not unit then
17950: LD_VAR 0 1
17954: NOT
17955: IFFALSE 17959
// exit ;
17957: GO 18004
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17959: LD_ADDR_VAR 0 3
17963: PUSH
17964: LD_VAR 0 1
17968: PPUSH
17969: CALL_OW 255
17973: PPUSH
17974: LD_VAR 0 1
17978: PPUSH
17979: CALL_OW 250
17983: PPUSH
17984: LD_VAR 0 1
17988: PPUSH
17989: CALL_OW 251
17993: PPUSH
17994: LD_VAR 0 2
17998: PPUSH
17999: CALL 16246 0 4
18003: ST_TO_ADDR
// end ;
18004: LD_VAR 0 3
18008: RET
// export function DangerInArea ( side , area ) ; begin
18009: LD_INT 0
18011: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18012: LD_ADDR_VAR 0 3
18016: PUSH
18017: LD_VAR 0 2
18021: PPUSH
18022: LD_INT 81
18024: PUSH
18025: LD_VAR 0 1
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PPUSH
18034: CALL_OW 70
18038: ST_TO_ADDR
// end ;
18039: LD_VAR 0 3
18043: RET
// export function IsExtension ( b ) ; begin
18044: LD_INT 0
18046: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18047: LD_ADDR_VAR 0 2
18051: PUSH
18052: LD_VAR 0 1
18056: PUSH
18057: LD_INT 23
18059: PUSH
18060: LD_INT 20
18062: PUSH
18063: LD_INT 22
18065: PUSH
18066: LD_INT 17
18068: PUSH
18069: LD_INT 24
18071: PUSH
18072: LD_INT 21
18074: PUSH
18075: LD_INT 19
18077: PUSH
18078: LD_INT 16
18080: PUSH
18081: LD_INT 25
18083: PUSH
18084: LD_INT 18
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: IN
18099: ST_TO_ADDR
// end ;
18100: LD_VAR 0 2
18104: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18105: LD_INT 0
18107: PPUSH
18108: PPUSH
18109: PPUSH
// result := [ ] ;
18110: LD_ADDR_VAR 0 4
18114: PUSH
18115: EMPTY
18116: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18117: LD_ADDR_VAR 0 5
18121: PUSH
18122: LD_VAR 0 2
18126: PPUSH
18127: LD_INT 21
18129: PUSH
18130: LD_INT 3
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 70
18141: ST_TO_ADDR
// if not tmp then
18142: LD_VAR 0 5
18146: NOT
18147: IFFALSE 18151
// exit ;
18149: GO 18215
// if checkLink then
18151: LD_VAR 0 3
18155: IFFALSE 18205
// begin for i in tmp do
18157: LD_ADDR_VAR 0 6
18161: PUSH
18162: LD_VAR 0 5
18166: PUSH
18167: FOR_IN
18168: IFFALSE 18203
// if GetBase ( i ) <> base then
18170: LD_VAR 0 6
18174: PPUSH
18175: CALL_OW 274
18179: PUSH
18180: LD_VAR 0 1
18184: NONEQUAL
18185: IFFALSE 18201
// ComLinkToBase ( base , i ) ;
18187: LD_VAR 0 1
18191: PPUSH
18192: LD_VAR 0 6
18196: PPUSH
18197: CALL_OW 169
18201: GO 18167
18203: POP
18204: POP
// end ; result := tmp ;
18205: LD_ADDR_VAR 0 4
18209: PUSH
18210: LD_VAR 0 5
18214: ST_TO_ADDR
// end ;
18215: LD_VAR 0 4
18219: RET
// export function ComComplete ( units , b ) ; var i ; begin
18220: LD_INT 0
18222: PPUSH
18223: PPUSH
// if not units then
18224: LD_VAR 0 1
18228: NOT
18229: IFFALSE 18233
// exit ;
18231: GO 18323
// for i in units do
18233: LD_ADDR_VAR 0 4
18237: PUSH
18238: LD_VAR 0 1
18242: PUSH
18243: FOR_IN
18244: IFFALSE 18321
// if BuildingStatus ( b ) = bs_build then
18246: LD_VAR 0 2
18250: PPUSH
18251: CALL_OW 461
18255: PUSH
18256: LD_INT 1
18258: EQUAL
18259: IFFALSE 18319
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18261: LD_VAR 0 4
18265: PPUSH
18266: LD_STRING h
18268: PUSH
18269: LD_VAR 0 2
18273: PPUSH
18274: CALL_OW 250
18278: PUSH
18279: LD_VAR 0 2
18283: PPUSH
18284: CALL_OW 251
18288: PUSH
18289: LD_VAR 0 2
18293: PUSH
18294: LD_INT 0
18296: PUSH
18297: LD_INT 0
18299: PUSH
18300: LD_INT 0
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: PUSH
18312: EMPTY
18313: LIST
18314: PPUSH
18315: CALL_OW 446
18319: GO 18243
18321: POP
18322: POP
// end ;
18323: LD_VAR 0 3
18327: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18328: LD_INT 0
18330: PPUSH
18331: PPUSH
18332: PPUSH
18333: PPUSH
18334: PPUSH
18335: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18336: LD_VAR 0 1
18340: NOT
18341: PUSH
18342: LD_VAR 0 1
18346: PPUSH
18347: CALL_OW 263
18351: PUSH
18352: LD_INT 2
18354: NONEQUAL
18355: OR
18356: IFFALSE 18360
// exit ;
18358: GO 18676
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18360: LD_ADDR_VAR 0 6
18364: PUSH
18365: LD_INT 22
18367: PUSH
18368: LD_VAR 0 1
18372: PPUSH
18373: CALL_OW 255
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 2
18384: PUSH
18385: LD_INT 30
18387: PUSH
18388: LD_INT 36
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 34
18397: PUSH
18398: LD_INT 31
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: LIST
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PPUSH
18414: CALL_OW 69
18418: ST_TO_ADDR
// if not tmp then
18419: LD_VAR 0 6
18423: NOT
18424: IFFALSE 18428
// exit ;
18426: GO 18676
// result := [ ] ;
18428: LD_ADDR_VAR 0 2
18432: PUSH
18433: EMPTY
18434: ST_TO_ADDR
// for i in tmp do
18435: LD_ADDR_VAR 0 3
18439: PUSH
18440: LD_VAR 0 6
18444: PUSH
18445: FOR_IN
18446: IFFALSE 18517
// begin t := UnitsInside ( i ) ;
18448: LD_ADDR_VAR 0 4
18452: PUSH
18453: LD_VAR 0 3
18457: PPUSH
18458: CALL_OW 313
18462: ST_TO_ADDR
// if t then
18463: LD_VAR 0 4
18467: IFFALSE 18515
// for j in t do
18469: LD_ADDR_VAR 0 7
18473: PUSH
18474: LD_VAR 0 4
18478: PUSH
18479: FOR_IN
18480: IFFALSE 18513
// result := Replace ( result , result + 1 , j ) ;
18482: LD_ADDR_VAR 0 2
18486: PUSH
18487: LD_VAR 0 2
18491: PPUSH
18492: LD_VAR 0 2
18496: PUSH
18497: LD_INT 1
18499: PLUS
18500: PPUSH
18501: LD_VAR 0 7
18505: PPUSH
18506: CALL_OW 1
18510: ST_TO_ADDR
18511: GO 18479
18513: POP
18514: POP
// end ;
18515: GO 18445
18517: POP
18518: POP
// if not result then
18519: LD_VAR 0 2
18523: NOT
18524: IFFALSE 18528
// exit ;
18526: GO 18676
// mech := result [ 1 ] ;
18528: LD_ADDR_VAR 0 5
18532: PUSH
18533: LD_VAR 0 2
18537: PUSH
18538: LD_INT 1
18540: ARRAY
18541: ST_TO_ADDR
// if result > 1 then
18542: LD_VAR 0 2
18546: PUSH
18547: LD_INT 1
18549: GREATER
18550: IFFALSE 18662
// begin for i = 2 to result do
18552: LD_ADDR_VAR 0 3
18556: PUSH
18557: DOUBLE
18558: LD_INT 2
18560: DEC
18561: ST_TO_ADDR
18562: LD_VAR 0 2
18566: PUSH
18567: FOR_TO
18568: IFFALSE 18660
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18570: LD_ADDR_VAR 0 4
18574: PUSH
18575: LD_VAR 0 2
18579: PUSH
18580: LD_VAR 0 3
18584: ARRAY
18585: PPUSH
18586: LD_INT 3
18588: PPUSH
18589: CALL_OW 259
18593: PUSH
18594: LD_VAR 0 2
18598: PUSH
18599: LD_VAR 0 3
18603: ARRAY
18604: PPUSH
18605: CALL_OW 432
18609: MINUS
18610: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18611: LD_VAR 0 4
18615: PUSH
18616: LD_VAR 0 5
18620: PPUSH
18621: LD_INT 3
18623: PPUSH
18624: CALL_OW 259
18628: PUSH
18629: LD_VAR 0 5
18633: PPUSH
18634: CALL_OW 432
18638: MINUS
18639: GREATEREQUAL
18640: IFFALSE 18658
// mech := result [ i ] ;
18642: LD_ADDR_VAR 0 5
18646: PUSH
18647: LD_VAR 0 2
18651: PUSH
18652: LD_VAR 0 3
18656: ARRAY
18657: ST_TO_ADDR
// end ;
18658: GO 18567
18660: POP
18661: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18662: LD_VAR 0 1
18666: PPUSH
18667: LD_VAR 0 5
18671: PPUSH
18672: CALL_OW 135
// end ;
18676: LD_VAR 0 2
18680: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18681: LD_INT 0
18683: PPUSH
18684: PPUSH
18685: PPUSH
18686: PPUSH
18687: PPUSH
18688: PPUSH
18689: PPUSH
18690: PPUSH
18691: PPUSH
18692: PPUSH
18693: PPUSH
18694: PPUSH
18695: PPUSH
// result := [ ] ;
18696: LD_ADDR_VAR 0 7
18700: PUSH
18701: EMPTY
18702: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18703: LD_VAR 0 1
18707: PPUSH
18708: CALL_OW 266
18712: PUSH
18713: LD_INT 0
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: IN
18723: NOT
18724: IFFALSE 18728
// exit ;
18726: GO 20362
// if name then
18728: LD_VAR 0 3
18732: IFFALSE 18748
// SetBName ( base_dep , name ) ;
18734: LD_VAR 0 1
18738: PPUSH
18739: LD_VAR 0 3
18743: PPUSH
18744: CALL_OW 500
// base := GetBase ( base_dep ) ;
18748: LD_ADDR_VAR 0 15
18752: PUSH
18753: LD_VAR 0 1
18757: PPUSH
18758: CALL_OW 274
18762: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18763: LD_ADDR_VAR 0 16
18767: PUSH
18768: LD_VAR 0 1
18772: PPUSH
18773: CALL_OW 255
18777: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18778: LD_ADDR_VAR 0 17
18782: PUSH
18783: LD_VAR 0 1
18787: PPUSH
18788: CALL_OW 248
18792: ST_TO_ADDR
// if sources then
18793: LD_VAR 0 5
18797: IFFALSE 18844
// for i = 1 to 3 do
18799: LD_ADDR_VAR 0 8
18803: PUSH
18804: DOUBLE
18805: LD_INT 1
18807: DEC
18808: ST_TO_ADDR
18809: LD_INT 3
18811: PUSH
18812: FOR_TO
18813: IFFALSE 18842
// AddResourceType ( base , i , sources [ i ] ) ;
18815: LD_VAR 0 15
18819: PPUSH
18820: LD_VAR 0 8
18824: PPUSH
18825: LD_VAR 0 5
18829: PUSH
18830: LD_VAR 0 8
18834: ARRAY
18835: PPUSH
18836: CALL_OW 276
18840: GO 18812
18842: POP
18843: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18844: LD_ADDR_VAR 0 18
18848: PUSH
18849: LD_VAR 0 15
18853: PPUSH
18854: LD_VAR 0 2
18858: PPUSH
18859: LD_INT 1
18861: PPUSH
18862: CALL 18105 0 3
18866: ST_TO_ADDR
// InitHc ;
18867: CALL_OW 19
// InitUc ;
18871: CALL_OW 18
// uc_side := side ;
18875: LD_ADDR_OWVAR 20
18879: PUSH
18880: LD_VAR 0 16
18884: ST_TO_ADDR
// uc_nation := nation ;
18885: LD_ADDR_OWVAR 21
18889: PUSH
18890: LD_VAR 0 17
18894: ST_TO_ADDR
// if buildings then
18895: LD_VAR 0 18
18899: IFFALSE 20221
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18901: LD_ADDR_VAR 0 19
18905: PUSH
18906: LD_VAR 0 18
18910: PPUSH
18911: LD_INT 2
18913: PUSH
18914: LD_INT 30
18916: PUSH
18917: LD_INT 29
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 30
18926: PUSH
18927: LD_INT 30
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: LIST
18938: PPUSH
18939: CALL_OW 72
18943: ST_TO_ADDR
// if tmp then
18944: LD_VAR 0 19
18948: IFFALSE 18996
// for i in tmp do
18950: LD_ADDR_VAR 0 8
18954: PUSH
18955: LD_VAR 0 19
18959: PUSH
18960: FOR_IN
18961: IFFALSE 18994
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18963: LD_VAR 0 8
18967: PPUSH
18968: CALL_OW 250
18972: PPUSH
18973: LD_VAR 0 8
18977: PPUSH
18978: CALL_OW 251
18982: PPUSH
18983: LD_VAR 0 16
18987: PPUSH
18988: CALL_OW 441
18992: GO 18960
18994: POP
18995: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18996: LD_VAR 0 18
19000: PPUSH
19001: LD_INT 2
19003: PUSH
19004: LD_INT 30
19006: PUSH
19007: LD_INT 32
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 30
19016: PUSH
19017: LD_INT 33
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: LIST
19028: PPUSH
19029: CALL_OW 72
19033: IFFALSE 19121
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19035: LD_ADDR_VAR 0 8
19039: PUSH
19040: LD_VAR 0 18
19044: PPUSH
19045: LD_INT 2
19047: PUSH
19048: LD_INT 30
19050: PUSH
19051: LD_INT 32
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 30
19060: PUSH
19061: LD_INT 33
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: LIST
19072: PPUSH
19073: CALL_OW 72
19077: PUSH
19078: FOR_IN
19079: IFFALSE 19119
// begin if not GetBWeapon ( i ) then
19081: LD_VAR 0 8
19085: PPUSH
19086: CALL_OW 269
19090: NOT
19091: IFFALSE 19117
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19093: LD_VAR 0 8
19097: PPUSH
19098: LD_VAR 0 8
19102: PPUSH
19103: LD_VAR 0 2
19107: PPUSH
19108: CALL 20367 0 2
19112: PPUSH
19113: CALL_OW 431
// end ;
19117: GO 19078
19119: POP
19120: POP
// end ; for i = 1 to personel do
19121: LD_ADDR_VAR 0 8
19125: PUSH
19126: DOUBLE
19127: LD_INT 1
19129: DEC
19130: ST_TO_ADDR
19131: LD_VAR 0 6
19135: PUSH
19136: FOR_TO
19137: IFFALSE 20201
// begin if i > 4 then
19139: LD_VAR 0 8
19143: PUSH
19144: LD_INT 4
19146: GREATER
19147: IFFALSE 19151
// break ;
19149: GO 20201
// case i of 1 :
19151: LD_VAR 0 8
19155: PUSH
19156: LD_INT 1
19158: DOUBLE
19159: EQUAL
19160: IFTRUE 19164
19162: GO 19244
19164: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19165: LD_ADDR_VAR 0 12
19169: PUSH
19170: LD_VAR 0 18
19174: PPUSH
19175: LD_INT 22
19177: PUSH
19178: LD_VAR 0 16
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 58
19189: PUSH
19190: EMPTY
19191: LIST
19192: PUSH
19193: LD_INT 2
19195: PUSH
19196: LD_INT 30
19198: PUSH
19199: LD_INT 32
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 30
19208: PUSH
19209: LD_INT 4
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 30
19218: PUSH
19219: LD_INT 5
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: LIST
19236: PPUSH
19237: CALL_OW 72
19241: ST_TO_ADDR
19242: GO 19466
19244: LD_INT 2
19246: DOUBLE
19247: EQUAL
19248: IFTRUE 19252
19250: GO 19314
19252: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19253: LD_ADDR_VAR 0 12
19257: PUSH
19258: LD_VAR 0 18
19262: PPUSH
19263: LD_INT 22
19265: PUSH
19266: LD_VAR 0 16
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 2
19277: PUSH
19278: LD_INT 30
19280: PUSH
19281: LD_INT 0
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 30
19290: PUSH
19291: LD_INT 1
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: LIST
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PPUSH
19307: CALL_OW 72
19311: ST_TO_ADDR
19312: GO 19466
19314: LD_INT 3
19316: DOUBLE
19317: EQUAL
19318: IFTRUE 19322
19320: GO 19384
19322: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19323: LD_ADDR_VAR 0 12
19327: PUSH
19328: LD_VAR 0 18
19332: PPUSH
19333: LD_INT 22
19335: PUSH
19336: LD_VAR 0 16
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 2
19347: PUSH
19348: LD_INT 30
19350: PUSH
19351: LD_INT 2
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 30
19360: PUSH
19361: LD_INT 3
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: LIST
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PPUSH
19377: CALL_OW 72
19381: ST_TO_ADDR
19382: GO 19466
19384: LD_INT 4
19386: DOUBLE
19387: EQUAL
19388: IFTRUE 19392
19390: GO 19465
19392: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19393: LD_ADDR_VAR 0 12
19397: PUSH
19398: LD_VAR 0 18
19402: PPUSH
19403: LD_INT 22
19405: PUSH
19406: LD_VAR 0 16
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 2
19417: PUSH
19418: LD_INT 30
19420: PUSH
19421: LD_INT 6
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 30
19430: PUSH
19431: LD_INT 7
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 30
19440: PUSH
19441: LD_INT 8
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PPUSH
19458: CALL_OW 72
19462: ST_TO_ADDR
19463: GO 19466
19465: POP
// if i = 1 then
19466: LD_VAR 0 8
19470: PUSH
19471: LD_INT 1
19473: EQUAL
19474: IFFALSE 19585
// begin tmp := [ ] ;
19476: LD_ADDR_VAR 0 19
19480: PUSH
19481: EMPTY
19482: ST_TO_ADDR
// for j in f do
19483: LD_ADDR_VAR 0 9
19487: PUSH
19488: LD_VAR 0 12
19492: PUSH
19493: FOR_IN
19494: IFFALSE 19567
// if GetBType ( j ) = b_bunker then
19496: LD_VAR 0 9
19500: PPUSH
19501: CALL_OW 266
19505: PUSH
19506: LD_INT 32
19508: EQUAL
19509: IFFALSE 19536
// tmp := Insert ( tmp , 1 , j ) else
19511: LD_ADDR_VAR 0 19
19515: PUSH
19516: LD_VAR 0 19
19520: PPUSH
19521: LD_INT 1
19523: PPUSH
19524: LD_VAR 0 9
19528: PPUSH
19529: CALL_OW 2
19533: ST_TO_ADDR
19534: GO 19565
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19536: LD_ADDR_VAR 0 19
19540: PUSH
19541: LD_VAR 0 19
19545: PPUSH
19546: LD_VAR 0 19
19550: PUSH
19551: LD_INT 1
19553: PLUS
19554: PPUSH
19555: LD_VAR 0 9
19559: PPUSH
19560: CALL_OW 2
19564: ST_TO_ADDR
19565: GO 19493
19567: POP
19568: POP
// if tmp then
19569: LD_VAR 0 19
19573: IFFALSE 19585
// f := tmp ;
19575: LD_ADDR_VAR 0 12
19579: PUSH
19580: LD_VAR 0 19
19584: ST_TO_ADDR
// end ; x := personel [ i ] ;
19585: LD_ADDR_VAR 0 13
19589: PUSH
19590: LD_VAR 0 6
19594: PUSH
19595: LD_VAR 0 8
19599: ARRAY
19600: ST_TO_ADDR
// if x = - 1 then
19601: LD_VAR 0 13
19605: PUSH
19606: LD_INT 1
19608: NEG
19609: EQUAL
19610: IFFALSE 19819
// begin for j in f do
19612: LD_ADDR_VAR 0 9
19616: PUSH
19617: LD_VAR 0 12
19621: PUSH
19622: FOR_IN
19623: IFFALSE 19815
// repeat InitHc ;
19625: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19629: LD_VAR 0 9
19633: PPUSH
19634: CALL_OW 266
19638: PUSH
19639: LD_INT 5
19641: EQUAL
19642: IFFALSE 19712
// begin if UnitsInside ( j ) < 3 then
19644: LD_VAR 0 9
19648: PPUSH
19649: CALL_OW 313
19653: PUSH
19654: LD_INT 3
19656: LESS
19657: IFFALSE 19693
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19659: LD_INT 0
19661: PPUSH
19662: LD_INT 5
19664: PUSH
19665: LD_INT 8
19667: PUSH
19668: LD_INT 9
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: LIST
19675: PUSH
19676: LD_VAR 0 17
19680: ARRAY
19681: PPUSH
19682: LD_VAR 0 4
19686: PPUSH
19687: CALL_OW 380
19691: GO 19710
// PrepareHuman ( false , i , skill ) ;
19693: LD_INT 0
19695: PPUSH
19696: LD_VAR 0 8
19700: PPUSH
19701: LD_VAR 0 4
19705: PPUSH
19706: CALL_OW 380
// end else
19710: GO 19729
// PrepareHuman ( false , i , skill ) ;
19712: LD_INT 0
19714: PPUSH
19715: LD_VAR 0 8
19719: PPUSH
19720: LD_VAR 0 4
19724: PPUSH
19725: CALL_OW 380
// un := CreateHuman ;
19729: LD_ADDR_VAR 0 14
19733: PUSH
19734: CALL_OW 44
19738: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19739: LD_ADDR_VAR 0 7
19743: PUSH
19744: LD_VAR 0 7
19748: PPUSH
19749: LD_INT 1
19751: PPUSH
19752: LD_VAR 0 14
19756: PPUSH
19757: CALL_OW 2
19761: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19762: LD_VAR 0 14
19766: PPUSH
19767: LD_VAR 0 9
19771: PPUSH
19772: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19776: LD_VAR 0 9
19780: PPUSH
19781: CALL_OW 313
19785: PUSH
19786: LD_INT 6
19788: EQUAL
19789: PUSH
19790: LD_VAR 0 9
19794: PPUSH
19795: CALL_OW 266
19799: PUSH
19800: LD_INT 32
19802: PUSH
19803: LD_INT 31
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: IN
19810: OR
19811: IFFALSE 19625
19813: GO 19622
19815: POP
19816: POP
// end else
19817: GO 20199
// for j = 1 to x do
19819: LD_ADDR_VAR 0 9
19823: PUSH
19824: DOUBLE
19825: LD_INT 1
19827: DEC
19828: ST_TO_ADDR
19829: LD_VAR 0 13
19833: PUSH
19834: FOR_TO
19835: IFFALSE 20197
// begin InitHc ;
19837: CALL_OW 19
// if not f then
19841: LD_VAR 0 12
19845: NOT
19846: IFFALSE 19935
// begin PrepareHuman ( false , i , skill ) ;
19848: LD_INT 0
19850: PPUSH
19851: LD_VAR 0 8
19855: PPUSH
19856: LD_VAR 0 4
19860: PPUSH
19861: CALL_OW 380
// un := CreateHuman ;
19865: LD_ADDR_VAR 0 14
19869: PUSH
19870: CALL_OW 44
19874: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19875: LD_ADDR_VAR 0 7
19879: PUSH
19880: LD_VAR 0 7
19884: PPUSH
19885: LD_INT 1
19887: PPUSH
19888: LD_VAR 0 14
19892: PPUSH
19893: CALL_OW 2
19897: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19898: LD_VAR 0 14
19902: PPUSH
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 250
19912: PPUSH
19913: LD_VAR 0 1
19917: PPUSH
19918: CALL_OW 251
19922: PPUSH
19923: LD_INT 10
19925: PPUSH
19926: LD_INT 0
19928: PPUSH
19929: CALL_OW 50
// continue ;
19933: GO 19834
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19935: LD_VAR 0 12
19939: PUSH
19940: LD_INT 1
19942: ARRAY
19943: PPUSH
19944: CALL_OW 313
19948: PUSH
19949: LD_VAR 0 12
19953: PUSH
19954: LD_INT 1
19956: ARRAY
19957: PPUSH
19958: CALL_OW 266
19962: PUSH
19963: LD_INT 32
19965: PUSH
19966: LD_INT 31
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: IN
19973: AND
19974: PUSH
19975: LD_VAR 0 12
19979: PUSH
19980: LD_INT 1
19982: ARRAY
19983: PPUSH
19984: CALL_OW 313
19988: PUSH
19989: LD_INT 6
19991: EQUAL
19992: OR
19993: IFFALSE 20013
// f := Delete ( f , 1 ) ;
19995: LD_ADDR_VAR 0 12
19999: PUSH
20000: LD_VAR 0 12
20004: PPUSH
20005: LD_INT 1
20007: PPUSH
20008: CALL_OW 3
20012: ST_TO_ADDR
// if not f then
20013: LD_VAR 0 12
20017: NOT
20018: IFFALSE 20036
// begin x := x + 2 ;
20020: LD_ADDR_VAR 0 13
20024: PUSH
20025: LD_VAR 0 13
20029: PUSH
20030: LD_INT 2
20032: PLUS
20033: ST_TO_ADDR
// continue ;
20034: GO 19834
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20036: LD_VAR 0 12
20040: PUSH
20041: LD_INT 1
20043: ARRAY
20044: PPUSH
20045: CALL_OW 266
20049: PUSH
20050: LD_INT 5
20052: EQUAL
20053: IFFALSE 20127
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20055: LD_VAR 0 12
20059: PUSH
20060: LD_INT 1
20062: ARRAY
20063: PPUSH
20064: CALL_OW 313
20068: PUSH
20069: LD_INT 3
20071: LESS
20072: IFFALSE 20108
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20074: LD_INT 0
20076: PPUSH
20077: LD_INT 5
20079: PUSH
20080: LD_INT 8
20082: PUSH
20083: LD_INT 9
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: LIST
20090: PUSH
20091: LD_VAR 0 17
20095: ARRAY
20096: PPUSH
20097: LD_VAR 0 4
20101: PPUSH
20102: CALL_OW 380
20106: GO 20125
// PrepareHuman ( false , i , skill ) ;
20108: LD_INT 0
20110: PPUSH
20111: LD_VAR 0 8
20115: PPUSH
20116: LD_VAR 0 4
20120: PPUSH
20121: CALL_OW 380
// end else
20125: GO 20144
// PrepareHuman ( false , i , skill ) ;
20127: LD_INT 0
20129: PPUSH
20130: LD_VAR 0 8
20134: PPUSH
20135: LD_VAR 0 4
20139: PPUSH
20140: CALL_OW 380
// un := CreateHuman ;
20144: LD_ADDR_VAR 0 14
20148: PUSH
20149: CALL_OW 44
20153: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20154: LD_ADDR_VAR 0 7
20158: PUSH
20159: LD_VAR 0 7
20163: PPUSH
20164: LD_INT 1
20166: PPUSH
20167: LD_VAR 0 14
20171: PPUSH
20172: CALL_OW 2
20176: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20177: LD_VAR 0 14
20181: PPUSH
20182: LD_VAR 0 12
20186: PUSH
20187: LD_INT 1
20189: ARRAY
20190: PPUSH
20191: CALL_OW 52
// end ;
20195: GO 19834
20197: POP
20198: POP
// end ;
20199: GO 19136
20201: POP
20202: POP
// result := result ^ buildings ;
20203: LD_ADDR_VAR 0 7
20207: PUSH
20208: LD_VAR 0 7
20212: PUSH
20213: LD_VAR 0 18
20217: ADD
20218: ST_TO_ADDR
// end else
20219: GO 20362
// begin for i = 1 to personel do
20221: LD_ADDR_VAR 0 8
20225: PUSH
20226: DOUBLE
20227: LD_INT 1
20229: DEC
20230: ST_TO_ADDR
20231: LD_VAR 0 6
20235: PUSH
20236: FOR_TO
20237: IFFALSE 20360
// begin if i > 4 then
20239: LD_VAR 0 8
20243: PUSH
20244: LD_INT 4
20246: GREATER
20247: IFFALSE 20251
// break ;
20249: GO 20360
// x := personel [ i ] ;
20251: LD_ADDR_VAR 0 13
20255: PUSH
20256: LD_VAR 0 6
20260: PUSH
20261: LD_VAR 0 8
20265: ARRAY
20266: ST_TO_ADDR
// if x = - 1 then
20267: LD_VAR 0 13
20271: PUSH
20272: LD_INT 1
20274: NEG
20275: EQUAL
20276: IFFALSE 20280
// continue ;
20278: GO 20236
// PrepareHuman ( false , i , skill ) ;
20280: LD_INT 0
20282: PPUSH
20283: LD_VAR 0 8
20287: PPUSH
20288: LD_VAR 0 4
20292: PPUSH
20293: CALL_OW 380
// un := CreateHuman ;
20297: LD_ADDR_VAR 0 14
20301: PUSH
20302: CALL_OW 44
20306: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20307: LD_VAR 0 14
20311: PPUSH
20312: LD_VAR 0 1
20316: PPUSH
20317: CALL_OW 250
20321: PPUSH
20322: LD_VAR 0 1
20326: PPUSH
20327: CALL_OW 251
20331: PPUSH
20332: LD_INT 10
20334: PPUSH
20335: LD_INT 0
20337: PPUSH
20338: CALL_OW 50
// result := result ^ un ;
20342: LD_ADDR_VAR 0 7
20346: PUSH
20347: LD_VAR 0 7
20351: PUSH
20352: LD_VAR 0 14
20356: ADD
20357: ST_TO_ADDR
// end ;
20358: GO 20236
20360: POP
20361: POP
// end ; end ;
20362: LD_VAR 0 7
20366: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20367: LD_INT 0
20369: PPUSH
20370: PPUSH
20371: PPUSH
20372: PPUSH
20373: PPUSH
20374: PPUSH
20375: PPUSH
20376: PPUSH
20377: PPUSH
20378: PPUSH
20379: PPUSH
20380: PPUSH
20381: PPUSH
20382: PPUSH
20383: PPUSH
20384: PPUSH
// result := false ;
20385: LD_ADDR_VAR 0 3
20389: PUSH
20390: LD_INT 0
20392: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20393: LD_VAR 0 1
20397: NOT
20398: PUSH
20399: LD_VAR 0 1
20403: PPUSH
20404: CALL_OW 266
20408: PUSH
20409: LD_INT 32
20411: PUSH
20412: LD_INT 33
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: IN
20419: NOT
20420: OR
20421: IFFALSE 20425
// exit ;
20423: GO 21534
// nat := GetNation ( tower ) ;
20425: LD_ADDR_VAR 0 12
20429: PUSH
20430: LD_VAR 0 1
20434: PPUSH
20435: CALL_OW 248
20439: ST_TO_ADDR
// side := GetSide ( tower ) ;
20440: LD_ADDR_VAR 0 16
20444: PUSH
20445: LD_VAR 0 1
20449: PPUSH
20450: CALL_OW 255
20454: ST_TO_ADDR
// x := GetX ( tower ) ;
20455: LD_ADDR_VAR 0 10
20459: PUSH
20460: LD_VAR 0 1
20464: PPUSH
20465: CALL_OW 250
20469: ST_TO_ADDR
// y := GetY ( tower ) ;
20470: LD_ADDR_VAR 0 11
20474: PUSH
20475: LD_VAR 0 1
20479: PPUSH
20480: CALL_OW 251
20484: ST_TO_ADDR
// if not x or not y then
20485: LD_VAR 0 10
20489: NOT
20490: PUSH
20491: LD_VAR 0 11
20495: NOT
20496: OR
20497: IFFALSE 20501
// exit ;
20499: GO 21534
// weapon := 0 ;
20501: LD_ADDR_VAR 0 18
20505: PUSH
20506: LD_INT 0
20508: ST_TO_ADDR
// fac_list := [ ] ;
20509: LD_ADDR_VAR 0 17
20513: PUSH
20514: EMPTY
20515: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20516: LD_ADDR_VAR 0 6
20520: PUSH
20521: LD_VAR 0 1
20525: PPUSH
20526: CALL_OW 274
20530: PPUSH
20531: LD_VAR 0 2
20535: PPUSH
20536: LD_INT 0
20538: PPUSH
20539: CALL 18105 0 3
20543: PPUSH
20544: LD_INT 30
20546: PUSH
20547: LD_INT 3
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PPUSH
20554: CALL_OW 72
20558: ST_TO_ADDR
// if not factories then
20559: LD_VAR 0 6
20563: NOT
20564: IFFALSE 20568
// exit ;
20566: GO 21534
// for i in factories do
20568: LD_ADDR_VAR 0 8
20572: PUSH
20573: LD_VAR 0 6
20577: PUSH
20578: FOR_IN
20579: IFFALSE 20604
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20581: LD_ADDR_VAR 0 17
20585: PUSH
20586: LD_VAR 0 17
20590: PUSH
20591: LD_VAR 0 8
20595: PPUSH
20596: CALL_OW 478
20600: UNION
20601: ST_TO_ADDR
20602: GO 20578
20604: POP
20605: POP
// if not fac_list then
20606: LD_VAR 0 17
20610: NOT
20611: IFFALSE 20615
// exit ;
20613: GO 21534
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20615: LD_ADDR_VAR 0 5
20619: PUSH
20620: LD_INT 4
20622: PUSH
20623: LD_INT 5
20625: PUSH
20626: LD_INT 9
20628: PUSH
20629: LD_INT 10
20631: PUSH
20632: LD_INT 6
20634: PUSH
20635: LD_INT 7
20637: PUSH
20638: LD_INT 11
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 27
20652: PUSH
20653: LD_INT 28
20655: PUSH
20656: LD_INT 26
20658: PUSH
20659: LD_INT 30
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 43
20670: PUSH
20671: LD_INT 44
20673: PUSH
20674: LD_INT 46
20676: PUSH
20677: LD_INT 45
20679: PUSH
20680: LD_INT 47
20682: PUSH
20683: LD_INT 49
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: LIST
20698: PUSH
20699: LD_VAR 0 12
20703: ARRAY
20704: ST_TO_ADDR
// list := list isect fac_list ;
20705: LD_ADDR_VAR 0 5
20709: PUSH
20710: LD_VAR 0 5
20714: PUSH
20715: LD_VAR 0 17
20719: ISECT
20720: ST_TO_ADDR
// if not list then
20721: LD_VAR 0 5
20725: NOT
20726: IFFALSE 20730
// exit ;
20728: GO 21534
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20730: LD_VAR 0 12
20734: PUSH
20735: LD_INT 3
20737: EQUAL
20738: PUSH
20739: LD_INT 49
20741: PUSH
20742: LD_VAR 0 5
20746: IN
20747: AND
20748: PUSH
20749: LD_INT 31
20751: PPUSH
20752: LD_VAR 0 16
20756: PPUSH
20757: CALL_OW 321
20761: PUSH
20762: LD_INT 2
20764: EQUAL
20765: AND
20766: IFFALSE 20826
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20768: LD_INT 22
20770: PUSH
20771: LD_VAR 0 16
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 35
20782: PUSH
20783: LD_INT 49
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 91
20792: PUSH
20793: LD_VAR 0 1
20797: PUSH
20798: LD_INT 10
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: LIST
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: LIST
20810: PPUSH
20811: CALL_OW 69
20815: NOT
20816: IFFALSE 20826
// weapon := ru_time_lapser ;
20818: LD_ADDR_VAR 0 18
20822: PUSH
20823: LD_INT 49
20825: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20826: LD_VAR 0 12
20830: PUSH
20831: LD_INT 1
20833: PUSH
20834: LD_INT 2
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: IN
20841: PUSH
20842: LD_INT 11
20844: PUSH
20845: LD_VAR 0 5
20849: IN
20850: PUSH
20851: LD_INT 30
20853: PUSH
20854: LD_VAR 0 5
20858: IN
20859: OR
20860: AND
20861: PUSH
20862: LD_INT 6
20864: PPUSH
20865: LD_VAR 0 16
20869: PPUSH
20870: CALL_OW 321
20874: PUSH
20875: LD_INT 2
20877: EQUAL
20878: AND
20879: IFFALSE 21044
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20881: LD_INT 22
20883: PUSH
20884: LD_VAR 0 16
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 2
20895: PUSH
20896: LD_INT 35
20898: PUSH
20899: LD_INT 11
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 35
20908: PUSH
20909: LD_INT 30
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 91
20923: PUSH
20924: LD_VAR 0 1
20928: PUSH
20929: LD_INT 18
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: LIST
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: PPUSH
20942: CALL_OW 69
20946: NOT
20947: PUSH
20948: LD_INT 22
20950: PUSH
20951: LD_VAR 0 16
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 2
20962: PUSH
20963: LD_INT 30
20965: PUSH
20966: LD_INT 32
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 30
20975: PUSH
20976: LD_INT 33
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 91
20990: PUSH
20991: LD_VAR 0 1
20995: PUSH
20996: LD_INT 12
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: LIST
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: LIST
21008: PUSH
21009: EMPTY
21010: LIST
21011: PPUSH
21012: CALL_OW 69
21016: PUSH
21017: LD_INT 2
21019: GREATER
21020: AND
21021: IFFALSE 21044
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21023: LD_ADDR_VAR 0 18
21027: PUSH
21028: LD_INT 11
21030: PUSH
21031: LD_INT 30
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_VAR 0 12
21042: ARRAY
21043: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21044: LD_VAR 0 18
21048: NOT
21049: PUSH
21050: LD_INT 40
21052: PPUSH
21053: LD_VAR 0 16
21057: PPUSH
21058: CALL_OW 321
21062: PUSH
21063: LD_INT 2
21065: EQUAL
21066: AND
21067: PUSH
21068: LD_INT 7
21070: PUSH
21071: LD_VAR 0 5
21075: IN
21076: PUSH
21077: LD_INT 28
21079: PUSH
21080: LD_VAR 0 5
21084: IN
21085: OR
21086: PUSH
21087: LD_INT 45
21089: PUSH
21090: LD_VAR 0 5
21094: IN
21095: OR
21096: AND
21097: IFFALSE 21351
// begin hex := GetHexInfo ( x , y ) ;
21099: LD_ADDR_VAR 0 4
21103: PUSH
21104: LD_VAR 0 10
21108: PPUSH
21109: LD_VAR 0 11
21113: PPUSH
21114: CALL_OW 546
21118: ST_TO_ADDR
// if hex [ 1 ] then
21119: LD_VAR 0 4
21123: PUSH
21124: LD_INT 1
21126: ARRAY
21127: IFFALSE 21131
// exit ;
21129: GO 21534
// height := hex [ 2 ] ;
21131: LD_ADDR_VAR 0 15
21135: PUSH
21136: LD_VAR 0 4
21140: PUSH
21141: LD_INT 2
21143: ARRAY
21144: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21145: LD_ADDR_VAR 0 14
21149: PUSH
21150: LD_INT 0
21152: PUSH
21153: LD_INT 2
21155: PUSH
21156: LD_INT 3
21158: PUSH
21159: LD_INT 5
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: ST_TO_ADDR
// for i in tmp do
21168: LD_ADDR_VAR 0 8
21172: PUSH
21173: LD_VAR 0 14
21177: PUSH
21178: FOR_IN
21179: IFFALSE 21349
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21181: LD_ADDR_VAR 0 9
21185: PUSH
21186: LD_VAR 0 10
21190: PPUSH
21191: LD_VAR 0 8
21195: PPUSH
21196: LD_INT 5
21198: PPUSH
21199: CALL_OW 272
21203: PUSH
21204: LD_VAR 0 11
21208: PPUSH
21209: LD_VAR 0 8
21213: PPUSH
21214: LD_INT 5
21216: PPUSH
21217: CALL_OW 273
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21226: LD_VAR 0 9
21230: PUSH
21231: LD_INT 1
21233: ARRAY
21234: PPUSH
21235: LD_VAR 0 9
21239: PUSH
21240: LD_INT 2
21242: ARRAY
21243: PPUSH
21244: CALL_OW 488
21248: IFFALSE 21347
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21250: LD_ADDR_VAR 0 4
21254: PUSH
21255: LD_VAR 0 9
21259: PUSH
21260: LD_INT 1
21262: ARRAY
21263: PPUSH
21264: LD_VAR 0 9
21268: PUSH
21269: LD_INT 2
21271: ARRAY
21272: PPUSH
21273: CALL_OW 546
21277: ST_TO_ADDR
// if hex [ 1 ] then
21278: LD_VAR 0 4
21282: PUSH
21283: LD_INT 1
21285: ARRAY
21286: IFFALSE 21290
// continue ;
21288: GO 21178
// h := hex [ 2 ] ;
21290: LD_ADDR_VAR 0 13
21294: PUSH
21295: LD_VAR 0 4
21299: PUSH
21300: LD_INT 2
21302: ARRAY
21303: ST_TO_ADDR
// if h + 7 < height then
21304: LD_VAR 0 13
21308: PUSH
21309: LD_INT 7
21311: PLUS
21312: PUSH
21313: LD_VAR 0 15
21317: LESS
21318: IFFALSE 21347
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21320: LD_ADDR_VAR 0 18
21324: PUSH
21325: LD_INT 7
21327: PUSH
21328: LD_INT 28
21330: PUSH
21331: LD_INT 45
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: LIST
21338: PUSH
21339: LD_VAR 0 12
21343: ARRAY
21344: ST_TO_ADDR
// break ;
21345: GO 21349
// end ; end ; end ;
21347: GO 21178
21349: POP
21350: POP
// end ; if not weapon then
21351: LD_VAR 0 18
21355: NOT
21356: IFFALSE 21416
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21358: LD_ADDR_VAR 0 5
21362: PUSH
21363: LD_VAR 0 5
21367: PUSH
21368: LD_INT 11
21370: PUSH
21371: LD_INT 30
21373: PUSH
21374: LD_INT 49
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: LIST
21381: DIFF
21382: ST_TO_ADDR
// if not list then
21383: LD_VAR 0 5
21387: NOT
21388: IFFALSE 21392
// exit ;
21390: GO 21534
// weapon := list [ rand ( 1 , list ) ] ;
21392: LD_ADDR_VAR 0 18
21396: PUSH
21397: LD_VAR 0 5
21401: PUSH
21402: LD_INT 1
21404: PPUSH
21405: LD_VAR 0 5
21409: PPUSH
21410: CALL_OW 12
21414: ARRAY
21415: ST_TO_ADDR
// end ; if weapon then
21416: LD_VAR 0 18
21420: IFFALSE 21534
// begin tmp := CostOfWeapon ( weapon ) ;
21422: LD_ADDR_VAR 0 14
21426: PUSH
21427: LD_VAR 0 18
21431: PPUSH
21432: CALL_OW 451
21436: ST_TO_ADDR
// j := GetBase ( tower ) ;
21437: LD_ADDR_VAR 0 9
21441: PUSH
21442: LD_VAR 0 1
21446: PPUSH
21447: CALL_OW 274
21451: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21452: LD_VAR 0 9
21456: PPUSH
21457: LD_INT 1
21459: PPUSH
21460: CALL_OW 275
21464: PUSH
21465: LD_VAR 0 14
21469: PUSH
21470: LD_INT 1
21472: ARRAY
21473: GREATEREQUAL
21474: PUSH
21475: LD_VAR 0 9
21479: PPUSH
21480: LD_INT 2
21482: PPUSH
21483: CALL_OW 275
21487: PUSH
21488: LD_VAR 0 14
21492: PUSH
21493: LD_INT 2
21495: ARRAY
21496: GREATEREQUAL
21497: AND
21498: PUSH
21499: LD_VAR 0 9
21503: PPUSH
21504: LD_INT 3
21506: PPUSH
21507: CALL_OW 275
21511: PUSH
21512: LD_VAR 0 14
21516: PUSH
21517: LD_INT 3
21519: ARRAY
21520: GREATEREQUAL
21521: AND
21522: IFFALSE 21534
// result := weapon ;
21524: LD_ADDR_VAR 0 3
21528: PUSH
21529: LD_VAR 0 18
21533: ST_TO_ADDR
// end ; end ;
21534: LD_VAR 0 3
21538: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21539: LD_INT 0
21541: PPUSH
21542: PPUSH
// result := true ;
21543: LD_ADDR_VAR 0 3
21547: PUSH
21548: LD_INT 1
21550: ST_TO_ADDR
// if array1 = array2 then
21551: LD_VAR 0 1
21555: PUSH
21556: LD_VAR 0 2
21560: EQUAL
21561: IFFALSE 21621
// begin for i = 1 to array1 do
21563: LD_ADDR_VAR 0 4
21567: PUSH
21568: DOUBLE
21569: LD_INT 1
21571: DEC
21572: ST_TO_ADDR
21573: LD_VAR 0 1
21577: PUSH
21578: FOR_TO
21579: IFFALSE 21617
// if array1 [ i ] <> array2 [ i ] then
21581: LD_VAR 0 1
21585: PUSH
21586: LD_VAR 0 4
21590: ARRAY
21591: PUSH
21592: LD_VAR 0 2
21596: PUSH
21597: LD_VAR 0 4
21601: ARRAY
21602: NONEQUAL
21603: IFFALSE 21615
// begin result := false ;
21605: LD_ADDR_VAR 0 3
21609: PUSH
21610: LD_INT 0
21612: ST_TO_ADDR
// break ;
21613: GO 21617
// end ;
21615: GO 21578
21617: POP
21618: POP
// end else
21619: GO 21629
// result := false ;
21621: LD_ADDR_VAR 0 3
21625: PUSH
21626: LD_INT 0
21628: ST_TO_ADDR
// end ;
21629: LD_VAR 0 3
21633: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21634: LD_INT 0
21636: PPUSH
21637: PPUSH
// if not array1 or not array2 then
21638: LD_VAR 0 1
21642: NOT
21643: PUSH
21644: LD_VAR 0 2
21648: NOT
21649: OR
21650: IFFALSE 21654
// exit ;
21652: GO 21718
// result := true ;
21654: LD_ADDR_VAR 0 3
21658: PUSH
21659: LD_INT 1
21661: ST_TO_ADDR
// for i = 1 to array1 do
21662: LD_ADDR_VAR 0 4
21666: PUSH
21667: DOUBLE
21668: LD_INT 1
21670: DEC
21671: ST_TO_ADDR
21672: LD_VAR 0 1
21676: PUSH
21677: FOR_TO
21678: IFFALSE 21716
// if array1 [ i ] <> array2 [ i ] then
21680: LD_VAR 0 1
21684: PUSH
21685: LD_VAR 0 4
21689: ARRAY
21690: PUSH
21691: LD_VAR 0 2
21695: PUSH
21696: LD_VAR 0 4
21700: ARRAY
21701: NONEQUAL
21702: IFFALSE 21714
// begin result := false ;
21704: LD_ADDR_VAR 0 3
21708: PUSH
21709: LD_INT 0
21711: ST_TO_ADDR
// break ;
21712: GO 21716
// end ;
21714: GO 21677
21716: POP
21717: POP
// end ;
21718: LD_VAR 0 3
21722: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21723: LD_INT 0
21725: PPUSH
21726: PPUSH
21727: PPUSH
// pom := GetBase ( fac ) ;
21728: LD_ADDR_VAR 0 5
21732: PUSH
21733: LD_VAR 0 1
21737: PPUSH
21738: CALL_OW 274
21742: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21743: LD_ADDR_VAR 0 4
21747: PUSH
21748: LD_VAR 0 2
21752: PUSH
21753: LD_INT 1
21755: ARRAY
21756: PPUSH
21757: LD_VAR 0 2
21761: PUSH
21762: LD_INT 2
21764: ARRAY
21765: PPUSH
21766: LD_VAR 0 2
21770: PUSH
21771: LD_INT 3
21773: ARRAY
21774: PPUSH
21775: LD_VAR 0 2
21779: PUSH
21780: LD_INT 4
21782: ARRAY
21783: PPUSH
21784: CALL_OW 449
21788: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21789: LD_ADDR_VAR 0 3
21793: PUSH
21794: LD_VAR 0 5
21798: PPUSH
21799: LD_INT 1
21801: PPUSH
21802: CALL_OW 275
21806: PUSH
21807: LD_VAR 0 4
21811: PUSH
21812: LD_INT 1
21814: ARRAY
21815: GREATEREQUAL
21816: PUSH
21817: LD_VAR 0 5
21821: PPUSH
21822: LD_INT 2
21824: PPUSH
21825: CALL_OW 275
21829: PUSH
21830: LD_VAR 0 4
21834: PUSH
21835: LD_INT 2
21837: ARRAY
21838: GREATEREQUAL
21839: AND
21840: PUSH
21841: LD_VAR 0 5
21845: PPUSH
21846: LD_INT 3
21848: PPUSH
21849: CALL_OW 275
21853: PUSH
21854: LD_VAR 0 4
21858: PUSH
21859: LD_INT 3
21861: ARRAY
21862: GREATEREQUAL
21863: AND
21864: ST_TO_ADDR
// end ;
21865: LD_VAR 0 3
21869: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21870: LD_INT 0
21872: PPUSH
21873: PPUSH
21874: PPUSH
21875: PPUSH
// pom := GetBase ( building ) ;
21876: LD_ADDR_VAR 0 3
21880: PUSH
21881: LD_VAR 0 1
21885: PPUSH
21886: CALL_OW 274
21890: ST_TO_ADDR
// if not pom then
21891: LD_VAR 0 3
21895: NOT
21896: IFFALSE 21900
// exit ;
21898: GO 22070
// btype := GetBType ( building ) ;
21900: LD_ADDR_VAR 0 5
21904: PUSH
21905: LD_VAR 0 1
21909: PPUSH
21910: CALL_OW 266
21914: ST_TO_ADDR
// if btype = b_armoury then
21915: LD_VAR 0 5
21919: PUSH
21920: LD_INT 4
21922: EQUAL
21923: IFFALSE 21933
// btype := b_barracks ;
21925: LD_ADDR_VAR 0 5
21929: PUSH
21930: LD_INT 5
21932: ST_TO_ADDR
// if btype = b_depot then
21933: LD_VAR 0 5
21937: PUSH
21938: LD_INT 0
21940: EQUAL
21941: IFFALSE 21951
// btype := b_warehouse ;
21943: LD_ADDR_VAR 0 5
21947: PUSH
21948: LD_INT 1
21950: ST_TO_ADDR
// if btype = b_workshop then
21951: LD_VAR 0 5
21955: PUSH
21956: LD_INT 2
21958: EQUAL
21959: IFFALSE 21969
// btype := b_factory ;
21961: LD_ADDR_VAR 0 5
21965: PUSH
21966: LD_INT 3
21968: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21969: LD_ADDR_VAR 0 4
21973: PUSH
21974: LD_VAR 0 5
21978: PPUSH
21979: LD_VAR 0 1
21983: PPUSH
21984: CALL_OW 248
21988: PPUSH
21989: CALL_OW 450
21993: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21994: LD_ADDR_VAR 0 2
21998: PUSH
21999: LD_VAR 0 3
22003: PPUSH
22004: LD_INT 1
22006: PPUSH
22007: CALL_OW 275
22011: PUSH
22012: LD_VAR 0 4
22016: PUSH
22017: LD_INT 1
22019: ARRAY
22020: GREATEREQUAL
22021: PUSH
22022: LD_VAR 0 3
22026: PPUSH
22027: LD_INT 2
22029: PPUSH
22030: CALL_OW 275
22034: PUSH
22035: LD_VAR 0 4
22039: PUSH
22040: LD_INT 2
22042: ARRAY
22043: GREATEREQUAL
22044: AND
22045: PUSH
22046: LD_VAR 0 3
22050: PPUSH
22051: LD_INT 3
22053: PPUSH
22054: CALL_OW 275
22058: PUSH
22059: LD_VAR 0 4
22063: PUSH
22064: LD_INT 3
22066: ARRAY
22067: GREATEREQUAL
22068: AND
22069: ST_TO_ADDR
// end ;
22070: LD_VAR 0 2
22074: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22075: LD_INT 0
22077: PPUSH
22078: PPUSH
22079: PPUSH
// pom := GetBase ( building ) ;
22080: LD_ADDR_VAR 0 4
22084: PUSH
22085: LD_VAR 0 1
22089: PPUSH
22090: CALL_OW 274
22094: ST_TO_ADDR
// if not pom then
22095: LD_VAR 0 4
22099: NOT
22100: IFFALSE 22104
// exit ;
22102: GO 22205
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22104: LD_ADDR_VAR 0 5
22108: PUSH
22109: LD_VAR 0 2
22113: PPUSH
22114: LD_VAR 0 1
22118: PPUSH
22119: CALL_OW 248
22123: PPUSH
22124: CALL_OW 450
22128: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22129: LD_ADDR_VAR 0 3
22133: PUSH
22134: LD_VAR 0 4
22138: PPUSH
22139: LD_INT 1
22141: PPUSH
22142: CALL_OW 275
22146: PUSH
22147: LD_VAR 0 5
22151: PUSH
22152: LD_INT 1
22154: ARRAY
22155: GREATEREQUAL
22156: PUSH
22157: LD_VAR 0 4
22161: PPUSH
22162: LD_INT 2
22164: PPUSH
22165: CALL_OW 275
22169: PUSH
22170: LD_VAR 0 5
22174: PUSH
22175: LD_INT 2
22177: ARRAY
22178: GREATEREQUAL
22179: AND
22180: PUSH
22181: LD_VAR 0 4
22185: PPUSH
22186: LD_INT 3
22188: PPUSH
22189: CALL_OW 275
22193: PUSH
22194: LD_VAR 0 5
22198: PUSH
22199: LD_INT 3
22201: ARRAY
22202: GREATEREQUAL
22203: AND
22204: ST_TO_ADDR
// end ;
22205: LD_VAR 0 3
22209: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22210: LD_INT 0
22212: PPUSH
22213: PPUSH
22214: PPUSH
22215: PPUSH
22216: PPUSH
22217: PPUSH
22218: PPUSH
22219: PPUSH
22220: PPUSH
22221: PPUSH
22222: PPUSH
// result := false ;
22223: LD_ADDR_VAR 0 8
22227: PUSH
22228: LD_INT 0
22230: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22231: LD_VAR 0 5
22235: NOT
22236: PUSH
22237: LD_VAR 0 1
22241: NOT
22242: OR
22243: PUSH
22244: LD_VAR 0 2
22248: NOT
22249: OR
22250: PUSH
22251: LD_VAR 0 3
22255: NOT
22256: OR
22257: IFFALSE 22261
// exit ;
22259: GO 23075
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22261: LD_ADDR_VAR 0 14
22265: PUSH
22266: LD_VAR 0 1
22270: PPUSH
22271: LD_VAR 0 2
22275: PPUSH
22276: LD_VAR 0 3
22280: PPUSH
22281: LD_VAR 0 4
22285: PPUSH
22286: LD_VAR 0 5
22290: PUSH
22291: LD_INT 1
22293: ARRAY
22294: PPUSH
22295: CALL_OW 248
22299: PPUSH
22300: LD_INT 0
22302: PPUSH
22303: CALL 24328 0 6
22307: ST_TO_ADDR
// if not hexes then
22308: LD_VAR 0 14
22312: NOT
22313: IFFALSE 22317
// exit ;
22315: GO 23075
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22317: LD_ADDR_VAR 0 17
22321: PUSH
22322: LD_VAR 0 5
22326: PPUSH
22327: LD_INT 22
22329: PUSH
22330: LD_VAR 0 13
22334: PPUSH
22335: CALL_OW 255
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 2
22346: PUSH
22347: LD_INT 30
22349: PUSH
22350: LD_INT 0
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 30
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: LIST
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PPUSH
22376: CALL_OW 72
22380: ST_TO_ADDR
// for i = 1 to hexes do
22381: LD_ADDR_VAR 0 9
22385: PUSH
22386: DOUBLE
22387: LD_INT 1
22389: DEC
22390: ST_TO_ADDR
22391: LD_VAR 0 14
22395: PUSH
22396: FOR_TO
22397: IFFALSE 23073
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22399: LD_ADDR_VAR 0 13
22403: PUSH
22404: LD_VAR 0 14
22408: PUSH
22409: LD_VAR 0 9
22413: ARRAY
22414: PUSH
22415: LD_INT 1
22417: ARRAY
22418: PPUSH
22419: LD_VAR 0 14
22423: PUSH
22424: LD_VAR 0 9
22428: ARRAY
22429: PUSH
22430: LD_INT 2
22432: ARRAY
22433: PPUSH
22434: CALL_OW 428
22438: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22439: LD_VAR 0 14
22443: PUSH
22444: LD_VAR 0 9
22448: ARRAY
22449: PUSH
22450: LD_INT 1
22452: ARRAY
22453: PPUSH
22454: LD_VAR 0 14
22458: PUSH
22459: LD_VAR 0 9
22463: ARRAY
22464: PUSH
22465: LD_INT 2
22467: ARRAY
22468: PPUSH
22469: CALL_OW 351
22473: PUSH
22474: LD_VAR 0 14
22478: PUSH
22479: LD_VAR 0 9
22483: ARRAY
22484: PUSH
22485: LD_INT 1
22487: ARRAY
22488: PPUSH
22489: LD_VAR 0 14
22493: PUSH
22494: LD_VAR 0 9
22498: ARRAY
22499: PUSH
22500: LD_INT 2
22502: ARRAY
22503: PPUSH
22504: CALL_OW 488
22508: NOT
22509: OR
22510: PUSH
22511: LD_VAR 0 13
22515: PPUSH
22516: CALL_OW 247
22520: PUSH
22521: LD_INT 3
22523: EQUAL
22524: OR
22525: IFFALSE 22531
// exit ;
22527: POP
22528: POP
22529: GO 23075
// if not tmp then
22531: LD_VAR 0 13
22535: NOT
22536: IFFALSE 22540
// continue ;
22538: GO 22396
// result := true ;
22540: LD_ADDR_VAR 0 8
22544: PUSH
22545: LD_INT 1
22547: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22548: LD_VAR 0 6
22552: PUSH
22553: LD_VAR 0 13
22557: PPUSH
22558: CALL_OW 247
22562: PUSH
22563: LD_INT 2
22565: EQUAL
22566: AND
22567: PUSH
22568: LD_VAR 0 13
22572: PPUSH
22573: CALL_OW 263
22577: PUSH
22578: LD_INT 1
22580: EQUAL
22581: AND
22582: IFFALSE 22746
// begin if IsDrivenBy ( tmp ) then
22584: LD_VAR 0 13
22588: PPUSH
22589: CALL_OW 311
22593: IFFALSE 22597
// continue ;
22595: GO 22396
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22597: LD_VAR 0 6
22601: PPUSH
22602: LD_INT 3
22604: PUSH
22605: LD_INT 60
22607: PUSH
22608: EMPTY
22609: LIST
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 3
22617: PUSH
22618: LD_INT 55
22620: PUSH
22621: EMPTY
22622: LIST
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PPUSH
22632: CALL_OW 72
22636: IFFALSE 22744
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22638: LD_ADDR_VAR 0 18
22642: PUSH
22643: LD_VAR 0 6
22647: PPUSH
22648: LD_INT 3
22650: PUSH
22651: LD_INT 60
22653: PUSH
22654: EMPTY
22655: LIST
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 3
22663: PUSH
22664: LD_INT 55
22666: PUSH
22667: EMPTY
22668: LIST
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PPUSH
22678: CALL_OW 72
22682: PUSH
22683: LD_INT 1
22685: ARRAY
22686: ST_TO_ADDR
// if IsInUnit ( driver ) then
22687: LD_VAR 0 18
22691: PPUSH
22692: CALL_OW 310
22696: IFFALSE 22707
// ComExit ( driver ) ;
22698: LD_VAR 0 18
22702: PPUSH
22703: CALL 48129 0 1
// AddComEnterUnit ( driver , tmp ) ;
22707: LD_VAR 0 18
22711: PPUSH
22712: LD_VAR 0 13
22716: PPUSH
22717: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22721: LD_VAR 0 18
22725: PPUSH
22726: LD_VAR 0 7
22730: PPUSH
22731: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22735: LD_VAR 0 18
22739: PPUSH
22740: CALL_OW 181
// end ; continue ;
22744: GO 22396
// end ; if not cleaners or not tmp in cleaners then
22746: LD_VAR 0 6
22750: NOT
22751: PUSH
22752: LD_VAR 0 13
22756: PUSH
22757: LD_VAR 0 6
22761: IN
22762: NOT
22763: OR
22764: IFFALSE 23071
// begin if dep then
22766: LD_VAR 0 17
22770: IFFALSE 22906
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22772: LD_ADDR_VAR 0 16
22776: PUSH
22777: LD_VAR 0 17
22781: PUSH
22782: LD_INT 1
22784: ARRAY
22785: PPUSH
22786: CALL_OW 250
22790: PPUSH
22791: LD_VAR 0 17
22795: PUSH
22796: LD_INT 1
22798: ARRAY
22799: PPUSH
22800: CALL_OW 254
22804: PPUSH
22805: LD_INT 5
22807: PPUSH
22808: CALL_OW 272
22812: PUSH
22813: LD_VAR 0 17
22817: PUSH
22818: LD_INT 1
22820: ARRAY
22821: PPUSH
22822: CALL_OW 251
22826: PPUSH
22827: LD_VAR 0 17
22831: PUSH
22832: LD_INT 1
22834: ARRAY
22835: PPUSH
22836: CALL_OW 254
22840: PPUSH
22841: LD_INT 5
22843: PPUSH
22844: CALL_OW 273
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22853: LD_VAR 0 16
22857: PUSH
22858: LD_INT 1
22860: ARRAY
22861: PPUSH
22862: LD_VAR 0 16
22866: PUSH
22867: LD_INT 2
22869: ARRAY
22870: PPUSH
22871: CALL_OW 488
22875: IFFALSE 22906
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22877: LD_VAR 0 13
22881: PPUSH
22882: LD_VAR 0 16
22886: PUSH
22887: LD_INT 1
22889: ARRAY
22890: PPUSH
22891: LD_VAR 0 16
22895: PUSH
22896: LD_INT 2
22898: ARRAY
22899: PPUSH
22900: CALL_OW 111
// continue ;
22904: GO 22396
// end ; end ; r := GetDir ( tmp ) ;
22906: LD_ADDR_VAR 0 15
22910: PUSH
22911: LD_VAR 0 13
22915: PPUSH
22916: CALL_OW 254
22920: ST_TO_ADDR
// if r = 5 then
22921: LD_VAR 0 15
22925: PUSH
22926: LD_INT 5
22928: EQUAL
22929: IFFALSE 22939
// r := 0 ;
22931: LD_ADDR_VAR 0 15
22935: PUSH
22936: LD_INT 0
22938: ST_TO_ADDR
// for j = r to 5 do
22939: LD_ADDR_VAR 0 10
22943: PUSH
22944: DOUBLE
22945: LD_VAR 0 15
22949: DEC
22950: ST_TO_ADDR
22951: LD_INT 5
22953: PUSH
22954: FOR_TO
22955: IFFALSE 23069
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22957: LD_ADDR_VAR 0 11
22961: PUSH
22962: LD_VAR 0 13
22966: PPUSH
22967: CALL_OW 250
22971: PPUSH
22972: LD_VAR 0 10
22976: PPUSH
22977: LD_INT 2
22979: PPUSH
22980: CALL_OW 272
22984: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22985: LD_ADDR_VAR 0 12
22989: PUSH
22990: LD_VAR 0 13
22994: PPUSH
22995: CALL_OW 251
22999: PPUSH
23000: LD_VAR 0 10
23004: PPUSH
23005: LD_INT 2
23007: PPUSH
23008: CALL_OW 273
23012: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23013: LD_VAR 0 11
23017: PPUSH
23018: LD_VAR 0 12
23022: PPUSH
23023: CALL_OW 488
23027: PUSH
23028: LD_VAR 0 11
23032: PPUSH
23033: LD_VAR 0 12
23037: PPUSH
23038: CALL_OW 428
23042: NOT
23043: AND
23044: IFFALSE 23067
// begin ComMoveXY ( tmp , _x , _y ) ;
23046: LD_VAR 0 13
23050: PPUSH
23051: LD_VAR 0 11
23055: PPUSH
23056: LD_VAR 0 12
23060: PPUSH
23061: CALL_OW 111
// break ;
23065: GO 23069
// end ; end ;
23067: GO 22954
23069: POP
23070: POP
// end ; end ;
23071: GO 22396
23073: POP
23074: POP
// end ;
23075: LD_VAR 0 8
23079: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23080: LD_INT 0
23082: PPUSH
// result := true ;
23083: LD_ADDR_VAR 0 3
23087: PUSH
23088: LD_INT 1
23090: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23091: LD_VAR 0 2
23095: PUSH
23096: LD_INT 24
23098: DOUBLE
23099: EQUAL
23100: IFTRUE 23110
23102: LD_INT 33
23104: DOUBLE
23105: EQUAL
23106: IFTRUE 23110
23108: GO 23135
23110: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23111: LD_ADDR_VAR 0 3
23115: PUSH
23116: LD_INT 32
23118: PPUSH
23119: LD_VAR 0 1
23123: PPUSH
23124: CALL_OW 321
23128: PUSH
23129: LD_INT 2
23131: EQUAL
23132: ST_TO_ADDR
23133: GO 23451
23135: LD_INT 20
23137: DOUBLE
23138: EQUAL
23139: IFTRUE 23143
23141: GO 23168
23143: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23144: LD_ADDR_VAR 0 3
23148: PUSH
23149: LD_INT 6
23151: PPUSH
23152: LD_VAR 0 1
23156: PPUSH
23157: CALL_OW 321
23161: PUSH
23162: LD_INT 2
23164: EQUAL
23165: ST_TO_ADDR
23166: GO 23451
23168: LD_INT 22
23170: DOUBLE
23171: EQUAL
23172: IFTRUE 23182
23174: LD_INT 36
23176: DOUBLE
23177: EQUAL
23178: IFTRUE 23182
23180: GO 23207
23182: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23183: LD_ADDR_VAR 0 3
23187: PUSH
23188: LD_INT 15
23190: PPUSH
23191: LD_VAR 0 1
23195: PPUSH
23196: CALL_OW 321
23200: PUSH
23201: LD_INT 2
23203: EQUAL
23204: ST_TO_ADDR
23205: GO 23451
23207: LD_INT 30
23209: DOUBLE
23210: EQUAL
23211: IFTRUE 23215
23213: GO 23240
23215: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23216: LD_ADDR_VAR 0 3
23220: PUSH
23221: LD_INT 20
23223: PPUSH
23224: LD_VAR 0 1
23228: PPUSH
23229: CALL_OW 321
23233: PUSH
23234: LD_INT 2
23236: EQUAL
23237: ST_TO_ADDR
23238: GO 23451
23240: LD_INT 28
23242: DOUBLE
23243: EQUAL
23244: IFTRUE 23254
23246: LD_INT 21
23248: DOUBLE
23249: EQUAL
23250: IFTRUE 23254
23252: GO 23279
23254: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23255: LD_ADDR_VAR 0 3
23259: PUSH
23260: LD_INT 21
23262: PPUSH
23263: LD_VAR 0 1
23267: PPUSH
23268: CALL_OW 321
23272: PUSH
23273: LD_INT 2
23275: EQUAL
23276: ST_TO_ADDR
23277: GO 23451
23279: LD_INT 16
23281: DOUBLE
23282: EQUAL
23283: IFTRUE 23287
23285: GO 23312
23287: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23288: LD_ADDR_VAR 0 3
23292: PUSH
23293: LD_INT 84
23295: PPUSH
23296: LD_VAR 0 1
23300: PPUSH
23301: CALL_OW 321
23305: PUSH
23306: LD_INT 2
23308: EQUAL
23309: ST_TO_ADDR
23310: GO 23451
23312: LD_INT 19
23314: DOUBLE
23315: EQUAL
23316: IFTRUE 23326
23318: LD_INT 23
23320: DOUBLE
23321: EQUAL
23322: IFTRUE 23326
23324: GO 23351
23326: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23327: LD_ADDR_VAR 0 3
23331: PUSH
23332: LD_INT 83
23334: PPUSH
23335: LD_VAR 0 1
23339: PPUSH
23340: CALL_OW 321
23344: PUSH
23345: LD_INT 2
23347: EQUAL
23348: ST_TO_ADDR
23349: GO 23451
23351: LD_INT 17
23353: DOUBLE
23354: EQUAL
23355: IFTRUE 23359
23357: GO 23384
23359: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23360: LD_ADDR_VAR 0 3
23364: PUSH
23365: LD_INT 39
23367: PPUSH
23368: LD_VAR 0 1
23372: PPUSH
23373: CALL_OW 321
23377: PUSH
23378: LD_INT 2
23380: EQUAL
23381: ST_TO_ADDR
23382: GO 23451
23384: LD_INT 18
23386: DOUBLE
23387: EQUAL
23388: IFTRUE 23392
23390: GO 23417
23392: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23393: LD_ADDR_VAR 0 3
23397: PUSH
23398: LD_INT 40
23400: PPUSH
23401: LD_VAR 0 1
23405: PPUSH
23406: CALL_OW 321
23410: PUSH
23411: LD_INT 2
23413: EQUAL
23414: ST_TO_ADDR
23415: GO 23451
23417: LD_INT 27
23419: DOUBLE
23420: EQUAL
23421: IFTRUE 23425
23423: GO 23450
23425: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23426: LD_ADDR_VAR 0 3
23430: PUSH
23431: LD_INT 35
23433: PPUSH
23434: LD_VAR 0 1
23438: PPUSH
23439: CALL_OW 321
23443: PUSH
23444: LD_INT 2
23446: EQUAL
23447: ST_TO_ADDR
23448: GO 23451
23450: POP
// end ;
23451: LD_VAR 0 3
23455: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23456: LD_INT 0
23458: PPUSH
23459: PPUSH
23460: PPUSH
23461: PPUSH
23462: PPUSH
23463: PPUSH
23464: PPUSH
23465: PPUSH
23466: PPUSH
23467: PPUSH
23468: PPUSH
// result := false ;
23469: LD_ADDR_VAR 0 6
23473: PUSH
23474: LD_INT 0
23476: ST_TO_ADDR
// if btype = b_depot then
23477: LD_VAR 0 2
23481: PUSH
23482: LD_INT 0
23484: EQUAL
23485: IFFALSE 23497
// begin result := true ;
23487: LD_ADDR_VAR 0 6
23491: PUSH
23492: LD_INT 1
23494: ST_TO_ADDR
// exit ;
23495: GO 24323
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23497: LD_VAR 0 1
23501: NOT
23502: PUSH
23503: LD_VAR 0 1
23507: PPUSH
23508: CALL_OW 266
23512: PUSH
23513: LD_INT 0
23515: PUSH
23516: LD_INT 1
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: IN
23523: NOT
23524: OR
23525: PUSH
23526: LD_VAR 0 2
23530: NOT
23531: OR
23532: PUSH
23533: LD_VAR 0 5
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: LD_INT 1
23543: PUSH
23544: LD_INT 2
23546: PUSH
23547: LD_INT 3
23549: PUSH
23550: LD_INT 4
23552: PUSH
23553: LD_INT 5
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: IN
23564: NOT
23565: OR
23566: PUSH
23567: LD_VAR 0 3
23571: PPUSH
23572: LD_VAR 0 4
23576: PPUSH
23577: CALL_OW 488
23581: NOT
23582: OR
23583: IFFALSE 23587
// exit ;
23585: GO 24323
// side := GetSide ( depot ) ;
23587: LD_ADDR_VAR 0 9
23591: PUSH
23592: LD_VAR 0 1
23596: PPUSH
23597: CALL_OW 255
23601: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23602: LD_VAR 0 9
23606: PPUSH
23607: LD_VAR 0 2
23611: PPUSH
23612: CALL 23080 0 2
23616: NOT
23617: IFFALSE 23621
// exit ;
23619: GO 24323
// pom := GetBase ( depot ) ;
23621: LD_ADDR_VAR 0 10
23625: PUSH
23626: LD_VAR 0 1
23630: PPUSH
23631: CALL_OW 274
23635: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23636: LD_ADDR_VAR 0 11
23640: PUSH
23641: LD_VAR 0 2
23645: PPUSH
23646: LD_VAR 0 1
23650: PPUSH
23651: CALL_OW 248
23655: PPUSH
23656: CALL_OW 450
23660: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23661: LD_VAR 0 10
23665: PPUSH
23666: LD_INT 1
23668: PPUSH
23669: CALL_OW 275
23673: PUSH
23674: LD_VAR 0 11
23678: PUSH
23679: LD_INT 1
23681: ARRAY
23682: GREATEREQUAL
23683: PUSH
23684: LD_VAR 0 10
23688: PPUSH
23689: LD_INT 2
23691: PPUSH
23692: CALL_OW 275
23696: PUSH
23697: LD_VAR 0 11
23701: PUSH
23702: LD_INT 2
23704: ARRAY
23705: GREATEREQUAL
23706: AND
23707: PUSH
23708: LD_VAR 0 10
23712: PPUSH
23713: LD_INT 3
23715: PPUSH
23716: CALL_OW 275
23720: PUSH
23721: LD_VAR 0 11
23725: PUSH
23726: LD_INT 3
23728: ARRAY
23729: GREATEREQUAL
23730: AND
23731: NOT
23732: IFFALSE 23736
// exit ;
23734: GO 24323
// if GetBType ( depot ) = b_depot then
23736: LD_VAR 0 1
23740: PPUSH
23741: CALL_OW 266
23745: PUSH
23746: LD_INT 0
23748: EQUAL
23749: IFFALSE 23761
// dist := 28 else
23751: LD_ADDR_VAR 0 14
23755: PUSH
23756: LD_INT 28
23758: ST_TO_ADDR
23759: GO 23769
// dist := 36 ;
23761: LD_ADDR_VAR 0 14
23765: PUSH
23766: LD_INT 36
23768: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23769: LD_VAR 0 1
23773: PPUSH
23774: LD_VAR 0 3
23778: PPUSH
23779: LD_VAR 0 4
23783: PPUSH
23784: CALL_OW 297
23788: PUSH
23789: LD_VAR 0 14
23793: GREATER
23794: IFFALSE 23798
// exit ;
23796: GO 24323
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23798: LD_ADDR_VAR 0 12
23802: PUSH
23803: LD_VAR 0 2
23807: PPUSH
23808: LD_VAR 0 3
23812: PPUSH
23813: LD_VAR 0 4
23817: PPUSH
23818: LD_VAR 0 5
23822: PPUSH
23823: LD_VAR 0 1
23827: PPUSH
23828: CALL_OW 248
23832: PPUSH
23833: LD_INT 0
23835: PPUSH
23836: CALL 24328 0 6
23840: ST_TO_ADDR
// if not hexes then
23841: LD_VAR 0 12
23845: NOT
23846: IFFALSE 23850
// exit ;
23848: GO 24323
// hex := GetHexInfo ( x , y ) ;
23850: LD_ADDR_VAR 0 15
23854: PUSH
23855: LD_VAR 0 3
23859: PPUSH
23860: LD_VAR 0 4
23864: PPUSH
23865: CALL_OW 546
23869: ST_TO_ADDR
// if hex [ 1 ] then
23870: LD_VAR 0 15
23874: PUSH
23875: LD_INT 1
23877: ARRAY
23878: IFFALSE 23882
// exit ;
23880: GO 24323
// height := hex [ 2 ] ;
23882: LD_ADDR_VAR 0 13
23886: PUSH
23887: LD_VAR 0 15
23891: PUSH
23892: LD_INT 2
23894: ARRAY
23895: ST_TO_ADDR
// for i = 1 to hexes do
23896: LD_ADDR_VAR 0 7
23900: PUSH
23901: DOUBLE
23902: LD_INT 1
23904: DEC
23905: ST_TO_ADDR
23906: LD_VAR 0 12
23910: PUSH
23911: FOR_TO
23912: IFFALSE 24242
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23914: LD_VAR 0 12
23918: PUSH
23919: LD_VAR 0 7
23923: ARRAY
23924: PUSH
23925: LD_INT 1
23927: ARRAY
23928: PPUSH
23929: LD_VAR 0 12
23933: PUSH
23934: LD_VAR 0 7
23938: ARRAY
23939: PUSH
23940: LD_INT 2
23942: ARRAY
23943: PPUSH
23944: CALL_OW 488
23948: NOT
23949: PUSH
23950: LD_VAR 0 12
23954: PUSH
23955: LD_VAR 0 7
23959: ARRAY
23960: PUSH
23961: LD_INT 1
23963: ARRAY
23964: PPUSH
23965: LD_VAR 0 12
23969: PUSH
23970: LD_VAR 0 7
23974: ARRAY
23975: PUSH
23976: LD_INT 2
23978: ARRAY
23979: PPUSH
23980: CALL_OW 428
23984: PUSH
23985: LD_INT 0
23987: GREATER
23988: OR
23989: PUSH
23990: LD_VAR 0 12
23994: PUSH
23995: LD_VAR 0 7
23999: ARRAY
24000: PUSH
24001: LD_INT 1
24003: ARRAY
24004: PPUSH
24005: LD_VAR 0 12
24009: PUSH
24010: LD_VAR 0 7
24014: ARRAY
24015: PUSH
24016: LD_INT 2
24018: ARRAY
24019: PPUSH
24020: CALL_OW 351
24024: OR
24025: IFFALSE 24031
// exit ;
24027: POP
24028: POP
24029: GO 24323
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24031: LD_ADDR_VAR 0 8
24035: PUSH
24036: LD_VAR 0 12
24040: PUSH
24041: LD_VAR 0 7
24045: ARRAY
24046: PUSH
24047: LD_INT 1
24049: ARRAY
24050: PPUSH
24051: LD_VAR 0 12
24055: PUSH
24056: LD_VAR 0 7
24060: ARRAY
24061: PUSH
24062: LD_INT 2
24064: ARRAY
24065: PPUSH
24066: CALL_OW 546
24070: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24071: LD_VAR 0 8
24075: PUSH
24076: LD_INT 1
24078: ARRAY
24079: PUSH
24080: LD_VAR 0 8
24084: PUSH
24085: LD_INT 2
24087: ARRAY
24088: PUSH
24089: LD_VAR 0 13
24093: PUSH
24094: LD_INT 2
24096: PLUS
24097: GREATER
24098: OR
24099: PUSH
24100: LD_VAR 0 8
24104: PUSH
24105: LD_INT 2
24107: ARRAY
24108: PUSH
24109: LD_VAR 0 13
24113: PUSH
24114: LD_INT 2
24116: MINUS
24117: LESS
24118: OR
24119: PUSH
24120: LD_VAR 0 8
24124: PUSH
24125: LD_INT 3
24127: ARRAY
24128: PUSH
24129: LD_INT 0
24131: PUSH
24132: LD_INT 8
24134: PUSH
24135: LD_INT 9
24137: PUSH
24138: LD_INT 10
24140: PUSH
24141: LD_INT 11
24143: PUSH
24144: LD_INT 12
24146: PUSH
24147: LD_INT 13
24149: PUSH
24150: LD_INT 16
24152: PUSH
24153: LD_INT 17
24155: PUSH
24156: LD_INT 18
24158: PUSH
24159: LD_INT 19
24161: PUSH
24162: LD_INT 20
24164: PUSH
24165: LD_INT 21
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: IN
24183: NOT
24184: OR
24185: PUSH
24186: LD_VAR 0 8
24190: PUSH
24191: LD_INT 5
24193: ARRAY
24194: NOT
24195: OR
24196: PUSH
24197: LD_VAR 0 8
24201: PUSH
24202: LD_INT 6
24204: ARRAY
24205: PUSH
24206: LD_INT 1
24208: PUSH
24209: LD_INT 2
24211: PUSH
24212: LD_INT 7
24214: PUSH
24215: LD_INT 9
24217: PUSH
24218: LD_INT 10
24220: PUSH
24221: LD_INT 11
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: IN
24232: NOT
24233: OR
24234: IFFALSE 24240
// exit ;
24236: POP
24237: POP
24238: GO 24323
// end ;
24240: GO 23911
24242: POP
24243: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24244: LD_VAR 0 9
24248: PPUSH
24249: LD_VAR 0 3
24253: PPUSH
24254: LD_VAR 0 4
24258: PPUSH
24259: LD_INT 20
24261: PPUSH
24262: CALL 16246 0 4
24266: PUSH
24267: LD_INT 4
24269: ARRAY
24270: IFFALSE 24274
// exit ;
24272: GO 24323
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24274: LD_VAR 0 2
24278: PUSH
24279: LD_INT 29
24281: PUSH
24282: LD_INT 30
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: IN
24289: PUSH
24290: LD_VAR 0 3
24294: PPUSH
24295: LD_VAR 0 4
24299: PPUSH
24300: LD_VAR 0 9
24304: PPUSH
24305: CALL_OW 440
24309: NOT
24310: AND
24311: IFFALSE 24315
// exit ;
24313: GO 24323
// result := true ;
24315: LD_ADDR_VAR 0 6
24319: PUSH
24320: LD_INT 1
24322: ST_TO_ADDR
// end ;
24323: LD_VAR 0 6
24327: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24328: LD_INT 0
24330: PPUSH
24331: PPUSH
24332: PPUSH
24333: PPUSH
24334: PPUSH
24335: PPUSH
24336: PPUSH
24337: PPUSH
24338: PPUSH
24339: PPUSH
24340: PPUSH
24341: PPUSH
24342: PPUSH
24343: PPUSH
24344: PPUSH
24345: PPUSH
24346: PPUSH
24347: PPUSH
24348: PPUSH
24349: PPUSH
24350: PPUSH
24351: PPUSH
24352: PPUSH
24353: PPUSH
24354: PPUSH
24355: PPUSH
24356: PPUSH
24357: PPUSH
24358: PPUSH
24359: PPUSH
24360: PPUSH
24361: PPUSH
24362: PPUSH
24363: PPUSH
24364: PPUSH
24365: PPUSH
24366: PPUSH
24367: PPUSH
24368: PPUSH
24369: PPUSH
24370: PPUSH
24371: PPUSH
24372: PPUSH
24373: PPUSH
24374: PPUSH
24375: PPUSH
24376: PPUSH
24377: PPUSH
24378: PPUSH
24379: PPUSH
24380: PPUSH
24381: PPUSH
24382: PPUSH
24383: PPUSH
24384: PPUSH
24385: PPUSH
24386: PPUSH
24387: PPUSH
// result = [ ] ;
24388: LD_ADDR_VAR 0 7
24392: PUSH
24393: EMPTY
24394: ST_TO_ADDR
// temp_list = [ ] ;
24395: LD_ADDR_VAR 0 9
24399: PUSH
24400: EMPTY
24401: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24402: LD_VAR 0 4
24406: PUSH
24407: LD_INT 0
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: LD_INT 2
24415: PUSH
24416: LD_INT 3
24418: PUSH
24419: LD_INT 4
24421: PUSH
24422: LD_INT 5
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: IN
24433: NOT
24434: PUSH
24435: LD_VAR 0 1
24439: PUSH
24440: LD_INT 0
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: IN
24450: PUSH
24451: LD_VAR 0 5
24455: PUSH
24456: LD_INT 1
24458: PUSH
24459: LD_INT 2
24461: PUSH
24462: LD_INT 3
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: LIST
24469: IN
24470: NOT
24471: AND
24472: OR
24473: IFFALSE 24477
// exit ;
24475: GO 42868
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24477: LD_VAR 0 1
24481: PUSH
24482: LD_INT 6
24484: PUSH
24485: LD_INT 7
24487: PUSH
24488: LD_INT 8
24490: PUSH
24491: LD_INT 13
24493: PUSH
24494: LD_INT 12
24496: PUSH
24497: LD_INT 15
24499: PUSH
24500: LD_INT 11
24502: PUSH
24503: LD_INT 14
24505: PUSH
24506: LD_INT 10
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: IN
24520: IFFALSE 24530
// btype = b_lab ;
24522: LD_ADDR_VAR 0 1
24526: PUSH
24527: LD_INT 6
24529: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24530: LD_VAR 0 6
24534: PUSH
24535: LD_INT 0
24537: PUSH
24538: LD_INT 1
24540: PUSH
24541: LD_INT 2
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: LIST
24548: IN
24549: NOT
24550: PUSH
24551: LD_VAR 0 1
24555: PUSH
24556: LD_INT 0
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: LD_INT 2
24564: PUSH
24565: LD_INT 3
24567: PUSH
24568: LD_INT 6
24570: PUSH
24571: LD_INT 36
24573: PUSH
24574: LD_INT 4
24576: PUSH
24577: LD_INT 5
24579: PUSH
24580: LD_INT 31
24582: PUSH
24583: LD_INT 32
24585: PUSH
24586: LD_INT 33
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: IN
24602: NOT
24603: PUSH
24604: LD_VAR 0 6
24608: PUSH
24609: LD_INT 1
24611: EQUAL
24612: AND
24613: OR
24614: PUSH
24615: LD_VAR 0 1
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: LD_INT 3
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: IN
24630: NOT
24631: PUSH
24632: LD_VAR 0 6
24636: PUSH
24637: LD_INT 2
24639: EQUAL
24640: AND
24641: OR
24642: IFFALSE 24652
// mode = 0 ;
24644: LD_ADDR_VAR 0 6
24648: PUSH
24649: LD_INT 0
24651: ST_TO_ADDR
// case mode of 0 :
24652: LD_VAR 0 6
24656: PUSH
24657: LD_INT 0
24659: DOUBLE
24660: EQUAL
24661: IFTRUE 24665
24663: GO 36118
24665: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24666: LD_ADDR_VAR 0 11
24670: PUSH
24671: LD_INT 0
24673: PUSH
24674: LD_INT 0
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 0
24683: PUSH
24684: LD_INT 1
24686: NEG
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 1
24694: PUSH
24695: LD_INT 0
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 1
24704: PUSH
24705: LD_INT 1
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 0
24714: PUSH
24715: LD_INT 1
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 1
24724: NEG
24725: PUSH
24726: LD_INT 0
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 1
24735: NEG
24736: PUSH
24737: LD_INT 1
24739: NEG
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: LD_INT 2
24751: NEG
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 0
24759: PUSH
24760: LD_INT 2
24762: NEG
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: LD_INT 1
24773: NEG
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: LD_INT 2
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 0
24791: PUSH
24792: LD_INT 2
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 1
24801: NEG
24802: PUSH
24803: LD_INT 1
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: LD_INT 3
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: LD_INT 3
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 1
24832: NEG
24833: PUSH
24834: LD_INT 2
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24859: LD_ADDR_VAR 0 12
24863: PUSH
24864: LD_INT 0
24866: PUSH
24867: LD_INT 0
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 0
24876: PUSH
24877: LD_INT 1
24879: NEG
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 1
24887: PUSH
24888: LD_INT 0
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: LD_INT 1
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 1
24917: NEG
24918: PUSH
24919: LD_INT 0
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 1
24928: NEG
24929: PUSH
24930: LD_INT 1
24932: NEG
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 1
24940: PUSH
24941: LD_INT 1
24943: NEG
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 2
24951: PUSH
24952: LD_INT 0
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 2
24961: PUSH
24962: LD_INT 1
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 1
24971: NEG
24972: PUSH
24973: LD_INT 1
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 2
24982: NEG
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 2
24993: NEG
24994: PUSH
24995: LD_INT 1
24997: NEG
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 2
25005: NEG
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 3
25016: NEG
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 3
25027: NEG
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25055: LD_ADDR_VAR 0 13
25059: PUSH
25060: LD_INT 0
25062: PUSH
25063: LD_INT 0
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 0
25072: PUSH
25073: LD_INT 1
25075: NEG
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 1
25083: PUSH
25084: LD_INT 0
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 1
25093: PUSH
25094: LD_INT 1
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 0
25103: PUSH
25104: LD_INT 1
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 1
25113: NEG
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 1
25124: NEG
25125: PUSH
25126: LD_INT 1
25128: NEG
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 1
25136: NEG
25137: PUSH
25138: LD_INT 2
25140: NEG
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 2
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 2
25158: PUSH
25159: LD_INT 2
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: LD_INT 2
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 2
25178: NEG
25179: PUSH
25180: LD_INT 1
25182: NEG
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 2
25190: NEG
25191: PUSH
25192: LD_INT 2
25194: NEG
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 2
25202: NEG
25203: PUSH
25204: LD_INT 3
25206: NEG
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 3
25214: NEG
25215: PUSH
25216: LD_INT 2
25218: NEG
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 3
25226: NEG
25227: PUSH
25228: LD_INT 3
25230: NEG
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25254: LD_ADDR_VAR 0 14
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 0
25271: PUSH
25272: LD_INT 1
25274: NEG
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: PUSH
25283: LD_INT 0
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 1
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 0
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 1
25312: NEG
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 1
25323: NEG
25324: PUSH
25325: LD_INT 1
25327: NEG
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 1
25335: NEG
25336: PUSH
25337: LD_INT 2
25339: NEG
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 0
25347: PUSH
25348: LD_INT 2
25350: NEG
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: LD_INT 1
25361: NEG
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 1
25369: PUSH
25370: LD_INT 2
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 0
25379: PUSH
25380: LD_INT 2
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: LD_INT 3
25404: NEG
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 0
25412: PUSH
25413: LD_INT 3
25415: NEG
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 1
25423: PUSH
25424: LD_INT 2
25426: NEG
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25450: LD_ADDR_VAR 0 15
25454: PUSH
25455: LD_INT 0
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: LD_INT 1
25470: NEG
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 1
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 1
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: LD_INT 1
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 1
25508: NEG
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 1
25519: NEG
25520: PUSH
25521: LD_INT 1
25523: NEG
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 1
25531: PUSH
25532: LD_INT 1
25534: NEG
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 2
25542: PUSH
25543: LD_INT 0
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 2
25552: PUSH
25553: LD_INT 1
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 1
25562: NEG
25563: PUSH
25564: LD_INT 1
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 2
25573: NEG
25574: PUSH
25575: LD_INT 0
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 2
25584: NEG
25585: PUSH
25586: LD_INT 1
25588: NEG
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 2
25596: PUSH
25597: LD_INT 1
25599: NEG
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 3
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 3
25617: PUSH
25618: LD_INT 1
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25643: LD_ADDR_VAR 0 16
25647: PUSH
25648: LD_INT 0
25650: PUSH
25651: LD_INT 0
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 0
25660: PUSH
25661: LD_INT 1
25663: NEG
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: LD_INT 0
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 1
25681: PUSH
25682: LD_INT 1
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: LD_INT 1
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 1
25701: NEG
25702: PUSH
25703: LD_INT 0
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 1
25712: NEG
25713: PUSH
25714: LD_INT 1
25716: NEG
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 1
25724: NEG
25725: PUSH
25726: LD_INT 2
25728: NEG
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 2
25736: PUSH
25737: LD_INT 1
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 2
25746: PUSH
25747: LD_INT 2
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 1
25756: PUSH
25757: LD_INT 2
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 2
25766: NEG
25767: PUSH
25768: LD_INT 1
25770: NEG
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 2
25778: NEG
25779: PUSH
25780: LD_INT 2
25782: NEG
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 3
25790: PUSH
25791: LD_INT 2
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 3
25800: PUSH
25801: LD_INT 3
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 2
25810: PUSH
25811: LD_INT 3
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25836: LD_ADDR_VAR 0 17
25840: PUSH
25841: LD_INT 0
25843: PUSH
25844: LD_INT 0
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 0
25853: PUSH
25854: LD_INT 1
25856: NEG
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 1
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 1
25874: PUSH
25875: LD_INT 1
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 1
25894: NEG
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 1
25905: NEG
25906: PUSH
25907: LD_INT 1
25909: NEG
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 1
25917: NEG
25918: PUSH
25919: LD_INT 2
25921: NEG
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 0
25929: PUSH
25930: LD_INT 2
25932: NEG
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 1
25940: PUSH
25941: LD_INT 1
25943: NEG
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 2
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 2
25961: PUSH
25962: LD_INT 1
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 2
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 1
25981: PUSH
25982: LD_INT 2
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: LD_INT 2
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 1
26001: NEG
26002: PUSH
26003: LD_INT 1
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 2
26012: NEG
26013: PUSH
26014: LD_INT 0
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 2
26023: NEG
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 2
26035: NEG
26036: PUSH
26037: LD_INT 2
26039: NEG
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26066: LD_ADDR_VAR 0 18
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: LD_INT 0
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: LD_INT 1
26086: NEG
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: LD_INT 0
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 1
26104: PUSH
26105: LD_INT 1
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 0
26114: PUSH
26115: LD_INT 1
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 1
26124: NEG
26125: PUSH
26126: LD_INT 0
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 1
26135: NEG
26136: PUSH
26137: LD_INT 1
26139: NEG
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: LD_INT 2
26151: NEG
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 0
26159: PUSH
26160: LD_INT 2
26162: NEG
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 1
26170: PUSH
26171: LD_INT 1
26173: NEG
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 2
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 2
26191: PUSH
26192: LD_INT 1
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 2
26201: PUSH
26202: LD_INT 2
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 1
26211: PUSH
26212: LD_INT 2
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 0
26221: PUSH
26222: LD_INT 2
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: LD_INT 1
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 2
26242: NEG
26243: PUSH
26244: LD_INT 0
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 2
26253: NEG
26254: PUSH
26255: LD_INT 1
26257: NEG
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 2
26265: NEG
26266: PUSH
26267: LD_INT 2
26269: NEG
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26296: LD_ADDR_VAR 0 19
26300: PUSH
26301: LD_INT 0
26303: PUSH
26304: LD_INT 0
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 0
26313: PUSH
26314: LD_INT 1
26316: NEG
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: LD_INT 0
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 1
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: LD_INT 1
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 1
26354: NEG
26355: PUSH
26356: LD_INT 0
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: LD_INT 1
26369: NEG
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 1
26377: NEG
26378: PUSH
26379: LD_INT 2
26381: NEG
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: LD_INT 2
26392: NEG
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: LD_INT 1
26403: NEG
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 2
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 2
26421: PUSH
26422: LD_INT 1
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 2
26431: PUSH
26432: LD_INT 2
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: PUSH
26442: LD_INT 2
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 0
26451: PUSH
26452: LD_INT 2
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 1
26461: NEG
26462: PUSH
26463: LD_INT 1
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 2
26472: NEG
26473: PUSH
26474: LD_INT 0
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 2
26483: NEG
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 2
26495: NEG
26496: PUSH
26497: LD_INT 2
26499: NEG
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26526: LD_ADDR_VAR 0 20
26530: PUSH
26531: LD_INT 0
26533: PUSH
26534: LD_INT 0
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: LD_INT 1
26546: NEG
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 1
26564: PUSH
26565: LD_INT 1
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: LD_INT 1
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 1
26584: NEG
26585: PUSH
26586: LD_INT 0
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 1
26595: NEG
26596: PUSH
26597: LD_INT 1
26599: NEG
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 1
26607: NEG
26608: PUSH
26609: LD_INT 2
26611: NEG
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: LD_INT 2
26622: NEG
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 1
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 2
26641: PUSH
26642: LD_INT 0
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 2
26651: PUSH
26652: LD_INT 1
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 2
26661: PUSH
26662: LD_INT 2
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 1
26671: PUSH
26672: LD_INT 2
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: LD_INT 2
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 2
26702: NEG
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 2
26713: NEG
26714: PUSH
26715: LD_INT 1
26717: NEG
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 2
26725: NEG
26726: PUSH
26727: LD_INT 2
26729: NEG
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26756: LD_ADDR_VAR 0 21
26760: PUSH
26761: LD_INT 0
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: LD_INT 1
26776: NEG
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 1
26784: PUSH
26785: LD_INT 0
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: LD_INT 1
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 1
26814: NEG
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: NEG
26826: PUSH
26827: LD_INT 1
26829: NEG
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: NEG
26838: PUSH
26839: LD_INT 2
26841: NEG
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: LD_INT 2
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 2
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 2
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 2
26891: PUSH
26892: LD_INT 2
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: LD_INT 2
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: LD_INT 2
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 2
26932: NEG
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 2
26943: NEG
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 2
26955: NEG
26956: PUSH
26957: LD_INT 2
26959: NEG
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26986: LD_ADDR_VAR 0 22
26990: PUSH
26991: LD_INT 0
26993: PUSH
26994: LD_INT 0
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: LD_INT 1
27006: NEG
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: LD_INT 1
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: NEG
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: NEG
27056: PUSH
27057: LD_INT 1
27059: NEG
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 1
27067: NEG
27068: PUSH
27069: LD_INT 2
27071: NEG
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: LD_INT 2
27082: NEG
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: LD_INT 1
27093: NEG
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 2
27101: PUSH
27102: LD_INT 0
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 2
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 2
27121: PUSH
27122: LD_INT 2
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: LD_INT 2
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: LD_INT 2
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: LD_INT 1
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 2
27162: NEG
27163: PUSH
27164: LD_INT 0
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 2
27173: NEG
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 2
27185: NEG
27186: PUSH
27187: LD_INT 2
27189: NEG
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27216: LD_ADDR_VAR 0 23
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: LD_INT 0
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: LD_INT 1
27236: NEG
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: LD_INT 0
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 1
27254: PUSH
27255: LD_INT 1
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 0
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: LD_INT 0
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 1
27285: NEG
27286: PUSH
27287: LD_INT 1
27289: NEG
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 1
27297: NEG
27298: PUSH
27299: LD_INT 2
27301: NEG
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: LD_INT 2
27312: NEG
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: LD_INT 1
27323: NEG
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 2
27331: PUSH
27332: LD_INT 0
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 2
27341: PUSH
27342: LD_INT 1
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 2
27351: PUSH
27352: LD_INT 2
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 1
27361: PUSH
27362: LD_INT 2
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 0
27371: PUSH
27372: LD_INT 2
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 1
27381: NEG
27382: PUSH
27383: LD_INT 1
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 2
27392: NEG
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 2
27403: NEG
27404: PUSH
27405: LD_INT 1
27407: NEG
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 2
27415: NEG
27416: PUSH
27417: LD_INT 2
27419: NEG
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 2
27427: NEG
27428: PUSH
27429: LD_INT 3
27431: NEG
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: LD_INT 3
27443: NEG
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: PUSH
27452: LD_INT 2
27454: NEG
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 2
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27496: LD_ADDR_VAR 0 24
27500: PUSH
27501: LD_INT 0
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: LD_INT 1
27516: NEG
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 1
27524: PUSH
27525: LD_INT 0
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: LD_INT 1
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 0
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 1
27554: NEG
27555: PUSH
27556: LD_INT 0
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 1
27565: NEG
27566: PUSH
27567: LD_INT 1
27569: NEG
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: LD_INT 2
27581: NEG
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: LD_INT 2
27592: NEG
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: LD_INT 1
27603: NEG
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 2
27611: PUSH
27612: LD_INT 0
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 2
27621: PUSH
27622: LD_INT 1
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 2
27631: PUSH
27632: LD_INT 2
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: LD_INT 2
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 0
27651: PUSH
27652: LD_INT 2
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 1
27661: NEG
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 2
27672: NEG
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 2
27683: NEG
27684: PUSH
27685: LD_INT 1
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 2
27695: NEG
27696: PUSH
27697: LD_INT 2
27699: NEG
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 1
27707: PUSH
27708: LD_INT 2
27710: NEG
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 2
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 3
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 3
27739: PUSH
27740: LD_INT 2
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27772: LD_ADDR_VAR 0 25
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 0
27789: PUSH
27790: LD_INT 1
27792: NEG
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: LD_INT 1
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 1
27830: NEG
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 1
27841: NEG
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 1
27853: NEG
27854: PUSH
27855: LD_INT 2
27857: NEG
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: LD_INT 2
27868: NEG
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 2
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 2
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 2
27907: PUSH
27908: LD_INT 2
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: PUSH
27918: LD_INT 2
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 0
27927: PUSH
27928: LD_INT 2
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 1
27937: NEG
27938: PUSH
27939: LD_INT 1
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 2
27948: NEG
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 2
27959: NEG
27960: PUSH
27961: LD_INT 1
27963: NEG
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 2
27971: NEG
27972: PUSH
27973: LD_INT 2
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 3
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 3
27993: PUSH
27994: LD_INT 2
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 2
28003: PUSH
28004: LD_INT 3
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 1
28013: PUSH
28014: LD_INT 3
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28046: LD_ADDR_VAR 0 26
28050: PUSH
28051: LD_INT 0
28053: PUSH
28054: LD_INT 0
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 0
28063: PUSH
28064: LD_INT 1
28066: NEG
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 1
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 1
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 0
28094: PUSH
28095: LD_INT 1
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: PUSH
28106: LD_INT 0
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: LD_INT 1
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 1
28127: NEG
28128: PUSH
28129: LD_INT 2
28131: NEG
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 0
28139: PUSH
28140: LD_INT 2
28142: NEG
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 2
28161: PUSH
28162: LD_INT 0
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 2
28171: PUSH
28172: LD_INT 1
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 2
28181: PUSH
28182: LD_INT 2
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 1
28191: PUSH
28192: LD_INT 2
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 0
28201: PUSH
28202: LD_INT 2
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 1
28211: NEG
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 2
28222: NEG
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 2
28233: NEG
28234: PUSH
28235: LD_INT 1
28237: NEG
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 2
28245: NEG
28246: PUSH
28247: LD_INT 2
28249: NEG
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 2
28257: PUSH
28258: LD_INT 3
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 1
28267: PUSH
28268: LD_INT 3
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PUSH
28279: LD_INT 2
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 2
28288: NEG
28289: PUSH
28290: LD_INT 1
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28322: LD_ADDR_VAR 0 27
28326: PUSH
28327: LD_INT 0
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 0
28339: PUSH
28340: LD_INT 1
28342: NEG
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: LD_INT 1
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: LD_INT 1
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 1
28380: NEG
28381: PUSH
28382: LD_INT 0
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 1
28403: NEG
28404: PUSH
28405: LD_INT 2
28407: NEG
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: LD_INT 2
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: LD_INT 1
28429: NEG
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 2
28437: PUSH
28438: LD_INT 0
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 2
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 2
28457: PUSH
28458: LD_INT 2
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: LD_INT 2
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 0
28477: PUSH
28478: LD_INT 2
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 1
28487: NEG
28488: PUSH
28489: LD_INT 1
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 2
28498: NEG
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 2
28509: NEG
28510: PUSH
28511: LD_INT 1
28513: NEG
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 2
28521: NEG
28522: PUSH
28523: LD_INT 2
28525: NEG
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: LD_INT 2
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 2
28544: NEG
28545: PUSH
28546: LD_INT 1
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 3
28555: NEG
28556: PUSH
28557: LD_INT 1
28559: NEG
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 3
28567: NEG
28568: PUSH
28569: LD_INT 2
28571: NEG
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28602: LD_ADDR_VAR 0 28
28606: PUSH
28607: LD_INT 0
28609: PUSH
28610: LD_INT 0
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: LD_INT 0
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: LD_INT 1
28675: NEG
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 1
28683: NEG
28684: PUSH
28685: LD_INT 2
28687: NEG
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 0
28695: PUSH
28696: LD_INT 2
28698: NEG
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 1
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 2
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 2
28727: PUSH
28728: LD_INT 1
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 2
28737: PUSH
28738: LD_INT 2
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: LD_INT 2
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: LD_INT 2
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: LD_INT 1
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 2
28778: NEG
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 2
28789: NEG
28790: PUSH
28791: LD_INT 1
28793: NEG
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 2
28801: NEG
28802: PUSH
28803: LD_INT 2
28805: NEG
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 2
28813: NEG
28814: PUSH
28815: LD_INT 3
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 1
28825: NEG
28826: PUSH
28827: LD_INT 3
28829: NEG
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 3
28837: NEG
28838: PUSH
28839: LD_INT 1
28841: NEG
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 3
28849: NEG
28850: PUSH
28851: LD_INT 2
28853: NEG
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28884: LD_ADDR_VAR 0 29
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 1
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: LD_INT 1
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 1
28942: NEG
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 1
28953: NEG
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: LD_INT 2
28969: NEG
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 0
28977: PUSH
28978: LD_INT 2
28980: NEG
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: LD_INT 1
28991: NEG
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 2
28999: PUSH
29000: LD_INT 0
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 2
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: LD_INT 2
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 0
29029: PUSH
29030: LD_INT 2
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: NEG
29040: PUSH
29041: LD_INT 1
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 2
29050: NEG
29051: PUSH
29052: LD_INT 1
29054: NEG
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 2
29062: NEG
29063: PUSH
29064: LD_INT 2
29066: NEG
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 2
29074: NEG
29075: PUSH
29076: LD_INT 3
29078: NEG
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 2
29086: PUSH
29087: LD_INT 1
29089: NEG
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 3
29097: PUSH
29098: LD_INT 1
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 1
29107: PUSH
29108: LD_INT 3
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 1
29117: NEG
29118: PUSH
29119: LD_INT 2
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 3
29128: NEG
29129: PUSH
29130: LD_INT 2
29132: NEG
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29163: LD_ADDR_VAR 0 30
29167: PUSH
29168: LD_INT 0
29170: PUSH
29171: LD_INT 0
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 0
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 1
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: LD_INT 1
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 0
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 1
29221: NEG
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 1
29232: NEG
29233: PUSH
29234: LD_INT 1
29236: NEG
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 1
29244: NEG
29245: PUSH
29246: LD_INT 2
29248: NEG
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: LD_INT 2
29259: NEG
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 1
29267: PUSH
29268: LD_INT 1
29270: NEG
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 2
29278: PUSH
29279: LD_INT 0
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 2
29288: PUSH
29289: LD_INT 1
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 2
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: PUSH
29309: LD_INT 2
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 1
29318: NEG
29319: PUSH
29320: LD_INT 1
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 2
29329: NEG
29330: PUSH
29331: LD_INT 0
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 2
29340: NEG
29341: PUSH
29342: LD_INT 1
29344: NEG
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 1
29352: NEG
29353: PUSH
29354: LD_INT 3
29356: NEG
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 1
29364: PUSH
29365: LD_INT 2
29367: NEG
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 3
29375: PUSH
29376: LD_INT 2
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 3
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 2
29395: NEG
29396: PUSH
29397: LD_INT 1
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 3
29406: NEG
29407: PUSH
29408: LD_INT 1
29410: NEG
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29441: LD_ADDR_VAR 0 31
29445: PUSH
29446: LD_INT 0
29448: PUSH
29449: LD_INT 0
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 0
29458: PUSH
29459: LD_INT 1
29461: NEG
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 1
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 1
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: LD_INT 1
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 1
29499: NEG
29500: PUSH
29501: LD_INT 0
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 1
29510: NEG
29511: PUSH
29512: LD_INT 1
29514: NEG
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 1
29522: NEG
29523: PUSH
29524: LD_INT 2
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 1
29534: PUSH
29535: LD_INT 1
29537: NEG
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 2
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 2
29555: PUSH
29556: LD_INT 1
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 2
29565: PUSH
29566: LD_INT 2
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: LD_INT 2
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 0
29585: PUSH
29586: LD_INT 2
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 1
29595: NEG
29596: PUSH
29597: LD_INT 1
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 2
29606: NEG
29607: PUSH
29608: LD_INT 1
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 2
29618: NEG
29619: PUSH
29620: LD_INT 2
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 2
29630: NEG
29631: PUSH
29632: LD_INT 3
29634: NEG
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 2
29642: PUSH
29643: LD_INT 1
29645: NEG
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 3
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 1
29663: PUSH
29664: LD_INT 3
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 1
29673: NEG
29674: PUSH
29675: LD_INT 2
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 3
29684: NEG
29685: PUSH
29686: LD_INT 2
29688: NEG
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29719: LD_ADDR_VAR 0 32
29723: PUSH
29724: LD_INT 0
29726: PUSH
29727: LD_INT 0
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 0
29736: PUSH
29737: LD_INT 1
29739: NEG
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 1
29747: PUSH
29748: LD_INT 0
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 1
29757: PUSH
29758: LD_INT 1
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: LD_INT 1
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 1
29777: NEG
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 1
29788: NEG
29789: PUSH
29790: LD_INT 1
29792: NEG
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 1
29800: NEG
29801: PUSH
29802: LD_INT 2
29804: NEG
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 0
29812: PUSH
29813: LD_INT 2
29815: NEG
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: LD_INT 1
29826: NEG
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 2
29834: PUSH
29835: LD_INT 1
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 2
29844: PUSH
29845: LD_INT 2
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 1
29854: PUSH
29855: LD_INT 2
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 0
29864: PUSH
29865: LD_INT 2
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 1
29874: NEG
29875: PUSH
29876: LD_INT 1
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 2
29885: NEG
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 2
29896: NEG
29897: PUSH
29898: LD_INT 1
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 1
29908: NEG
29909: PUSH
29910: LD_INT 3
29912: NEG
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: LD_INT 2
29923: NEG
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 3
29931: PUSH
29932: LD_INT 2
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 2
29941: PUSH
29942: LD_INT 3
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 2
29951: NEG
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 3
29962: NEG
29963: PUSH
29964: LD_INT 1
29966: NEG
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29997: LD_ADDR_VAR 0 33
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 0
30014: PUSH
30015: LD_INT 1
30017: NEG
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: LD_INT 0
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 1
30035: PUSH
30036: LD_INT 1
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 0
30045: PUSH
30046: LD_INT 1
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 1
30055: NEG
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 1
30066: NEG
30067: PUSH
30068: LD_INT 1
30070: NEG
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 1
30078: NEG
30079: PUSH
30080: LD_INT 2
30082: NEG
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: LD_INT 1
30093: NEG
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 2
30101: PUSH
30102: LD_INT 0
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 2
30111: PUSH
30112: LD_INT 1
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 1
30121: PUSH
30122: LD_INT 2
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 0
30131: PUSH
30132: LD_INT 2
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 1
30141: NEG
30142: PUSH
30143: LD_INT 1
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 2
30152: NEG
30153: PUSH
30154: LD_INT 0
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 2
30163: NEG
30164: PUSH
30165: LD_INT 1
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 2
30175: NEG
30176: PUSH
30177: LD_INT 2
30179: NEG
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 2
30187: NEG
30188: PUSH
30189: LD_INT 3
30191: NEG
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 2
30199: PUSH
30200: LD_INT 1
30202: NEG
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 3
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 1
30220: PUSH
30221: LD_INT 3
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 1
30230: NEG
30231: PUSH
30232: LD_INT 2
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 3
30241: NEG
30242: PUSH
30243: LD_INT 2
30245: NEG
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30276: LD_ADDR_VAR 0 34
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 0
30293: PUSH
30294: LD_INT 1
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 1
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: LD_INT 1
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 1
30334: NEG
30335: PUSH
30336: LD_INT 0
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 1
30345: NEG
30346: PUSH
30347: LD_INT 1
30349: NEG
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 1
30357: NEG
30358: PUSH
30359: LD_INT 2
30361: NEG
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 0
30369: PUSH
30370: LD_INT 2
30372: NEG
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: LD_INT 1
30383: NEG
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 2
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 2
30401: PUSH
30402: LD_INT 2
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 1
30411: PUSH
30412: LD_INT 2
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: LD_INT 1
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 2
30432: NEG
30433: PUSH
30434: LD_INT 0
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 2
30443: NEG
30444: PUSH
30445: LD_INT 1
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 2
30455: NEG
30456: PUSH
30457: LD_INT 2
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 1
30467: NEG
30468: PUSH
30469: LD_INT 3
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 1
30479: PUSH
30480: LD_INT 2
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 3
30490: PUSH
30491: LD_INT 2
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 2
30500: PUSH
30501: LD_INT 3
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 2
30510: NEG
30511: PUSH
30512: LD_INT 1
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 3
30521: NEG
30522: PUSH
30523: LD_INT 1
30525: NEG
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30556: LD_ADDR_VAR 0 35
30560: PUSH
30561: LD_INT 0
30563: PUSH
30564: LD_INT 0
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: LD_INT 1
30576: NEG
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 1
30594: PUSH
30595: LD_INT 1
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 0
30604: PUSH
30605: LD_INT 1
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 1
30614: NEG
30615: PUSH
30616: LD_INT 0
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 1
30625: NEG
30626: PUSH
30627: LD_INT 1
30629: NEG
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: LD_INT 1
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 2
30647: NEG
30648: PUSH
30649: LD_INT 1
30651: NEG
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30668: LD_ADDR_VAR 0 36
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: LD_INT 0
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 0
30685: PUSH
30686: LD_INT 1
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 1
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: LD_INT 1
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 1
30737: NEG
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: NEG
30750: PUSH
30751: LD_INT 2
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 1
30761: PUSH
30762: LD_INT 2
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30780: LD_ADDR_VAR 0 37
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 0
30797: PUSH
30798: LD_INT 1
30800: NEG
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 1
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: LD_INT 1
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: LD_INT 1
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 1
30838: NEG
30839: PUSH
30840: LD_INT 0
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 1
30849: NEG
30850: PUSH
30851: LD_INT 1
30853: NEG
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 1
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 1
30872: NEG
30873: PUSH
30874: LD_INT 1
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30892: LD_ADDR_VAR 0 38
30896: PUSH
30897: LD_INT 0
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: LD_INT 1
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 1
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 1
30930: PUSH
30931: LD_INT 1
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 0
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 1
30950: NEG
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 1
30961: NEG
30962: PUSH
30963: LD_INT 1
30965: NEG
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 2
30973: PUSH
30974: LD_INT 1
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 2
30983: NEG
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31004: LD_ADDR_VAR 0 39
31008: PUSH
31009: LD_INT 0
31011: PUSH
31012: LD_INT 0
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 0
31021: PUSH
31022: LD_INT 1
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 1
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 1
31062: NEG
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: NEG
31074: PUSH
31075: LD_INT 1
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 1
31085: NEG
31086: PUSH
31087: LD_INT 2
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: LD_INT 2
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31116: LD_ADDR_VAR 0 40
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: LD_INT 0
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 0
31133: PUSH
31134: LD_INT 1
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 1
31154: PUSH
31155: LD_INT 1
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 0
31164: PUSH
31165: LD_INT 1
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 1
31174: NEG
31175: PUSH
31176: LD_INT 0
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 1
31185: NEG
31186: PUSH
31187: LD_INT 1
31189: NEG
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: LD_INT 1
31200: NEG
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 1
31208: NEG
31209: PUSH
31210: LD_INT 1
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31228: LD_ADDR_VAR 0 41
31232: PUSH
31233: LD_INT 0
31235: PUSH
31236: LD_INT 0
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 0
31245: PUSH
31246: LD_INT 1
31248: NEG
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: LD_INT 0
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 1
31266: PUSH
31267: LD_INT 1
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 0
31276: PUSH
31277: LD_INT 1
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: NEG
31287: PUSH
31288: LD_INT 0
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 1
31297: NEG
31298: PUSH
31299: LD_INT 1
31301: NEG
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: NEG
31310: PUSH
31311: LD_INT 2
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 1
31321: PUSH
31322: LD_INT 1
31324: NEG
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 2
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 2
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 2
31352: PUSH
31353: LD_INT 2
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 1
31362: PUSH
31363: LD_INT 2
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 1
31372: NEG
31373: PUSH
31374: LD_INT 1
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 2
31383: NEG
31384: PUSH
31385: LD_INT 0
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 2
31394: NEG
31395: PUSH
31396: LD_INT 1
31398: NEG
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 2
31406: NEG
31407: PUSH
31408: LD_INT 2
31410: NEG
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 2
31418: NEG
31419: PUSH
31420: LD_INT 3
31422: NEG
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 2
31430: PUSH
31431: LD_INT 1
31433: NEG
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 3
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 3
31451: PUSH
31452: LD_INT 1
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 3
31461: PUSH
31462: LD_INT 2
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 3
31471: PUSH
31472: LD_INT 3
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 2
31481: PUSH
31482: LD_INT 3
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 2
31491: NEG
31492: PUSH
31493: LD_INT 1
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 3
31502: NEG
31503: PUSH
31504: LD_INT 0
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 3
31513: NEG
31514: PUSH
31515: LD_INT 1
31517: NEG
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 3
31525: NEG
31526: PUSH
31527: LD_INT 2
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 3
31537: NEG
31538: PUSH
31539: LD_INT 3
31541: NEG
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31578: LD_ADDR_VAR 0 42
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: LD_INT 0
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: LD_INT 1
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 1
31659: NEG
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: LD_INT 2
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 2
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 2
31703: PUSH
31704: LD_INT 2
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 0
31723: PUSH
31724: LD_INT 2
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 1
31733: NEG
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 2
31744: NEG
31745: PUSH
31746: LD_INT 1
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 2
31756: NEG
31757: PUSH
31758: LD_INT 2
31760: NEG
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 2
31768: NEG
31769: PUSH
31770: LD_INT 3
31772: NEG
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 1
31780: NEG
31781: PUSH
31782: LD_INT 3
31784: NEG
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: LD_INT 3
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 1
31803: PUSH
31804: LD_INT 2
31806: NEG
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 3
31814: PUSH
31815: LD_INT 2
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 3
31824: PUSH
31825: LD_INT 3
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 2
31834: PUSH
31835: LD_INT 3
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: LD_INT 3
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: LD_INT 3
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 1
31864: NEG
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 3
31875: NEG
31876: PUSH
31877: LD_INT 2
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 3
31887: NEG
31888: PUSH
31889: LD_INT 3
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31928: LD_ADDR_VAR 0 43
31932: PUSH
31933: LD_INT 0
31935: PUSH
31936: LD_INT 0
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: LD_INT 1
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: LD_INT 0
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: LD_INT 1
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: LD_INT 0
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 1
31997: NEG
31998: PUSH
31999: LD_INT 1
32001: NEG
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 1
32009: NEG
32010: PUSH
32011: LD_INT 2
32013: NEG
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 0
32021: PUSH
32022: LD_INT 2
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 1
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 2
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 2
32053: PUSH
32054: LD_INT 1
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: LD_INT 2
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 0
32073: PUSH
32074: LD_INT 2
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 1
32083: NEG
32084: PUSH
32085: LD_INT 1
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 2
32094: NEG
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 2
32105: NEG
32106: PUSH
32107: LD_INT 1
32109: NEG
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 1
32117: NEG
32118: PUSH
32119: LD_INT 3
32121: NEG
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 0
32129: PUSH
32130: LD_INT 3
32132: NEG
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 1
32140: PUSH
32141: LD_INT 2
32143: NEG
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 2
32151: PUSH
32152: LD_INT 1
32154: NEG
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 3
32162: PUSH
32163: LD_INT 0
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 3
32172: PUSH
32173: LD_INT 1
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 1
32182: PUSH
32183: LD_INT 3
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 0
32192: PUSH
32193: LD_INT 3
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 1
32202: NEG
32203: PUSH
32204: LD_INT 2
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 2
32213: NEG
32214: PUSH
32215: LD_INT 1
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 3
32224: NEG
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 3
32235: NEG
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32276: LD_ADDR_VAR 0 44
32280: PUSH
32281: LD_INT 0
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 0
32293: PUSH
32294: LD_INT 1
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 1
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 1
32314: PUSH
32315: LD_INT 1
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: LD_INT 1
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 1
32334: NEG
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 1
32345: NEG
32346: PUSH
32347: LD_INT 1
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 1
32357: NEG
32358: PUSH
32359: LD_INT 2
32361: NEG
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: LD_INT 1
32372: NEG
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: LD_INT 0
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 2
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 2
32400: PUSH
32401: LD_INT 2
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 1
32410: PUSH
32411: LD_INT 2
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: LD_INT 1
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 2
32431: NEG
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 2
32442: NEG
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 2
32454: NEG
32455: PUSH
32456: LD_INT 2
32458: NEG
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 2
32466: NEG
32467: PUSH
32468: LD_INT 3
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 2
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 3
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 3
32499: PUSH
32500: LD_INT 1
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 3
32509: PUSH
32510: LD_INT 2
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 3
32519: PUSH
32520: LD_INT 3
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 2
32529: PUSH
32530: LD_INT 3
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 2
32539: NEG
32540: PUSH
32541: LD_INT 1
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 3
32550: NEG
32551: PUSH
32552: LD_INT 0
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 3
32561: NEG
32562: PUSH
32563: LD_INT 1
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 3
32573: NEG
32574: PUSH
32575: LD_INT 2
32577: NEG
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 3
32585: NEG
32586: PUSH
32587: LD_INT 3
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32626: LD_ADDR_VAR 0 45
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: LD_INT 0
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: LD_INT 1
32646: NEG
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: LD_INT 0
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 0
32674: PUSH
32675: LD_INT 1
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: NEG
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 1
32695: NEG
32696: PUSH
32697: LD_INT 1
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 1
32707: NEG
32708: PUSH
32709: LD_INT 2
32711: NEG
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: LD_INT 2
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: LD_INT 1
32733: NEG
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 2
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 2
32751: PUSH
32752: LD_INT 2
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: LD_INT 2
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 2
32792: NEG
32793: PUSH
32794: LD_INT 1
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 2
32804: NEG
32805: PUSH
32806: LD_INT 2
32808: NEG
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 2
32816: NEG
32817: PUSH
32818: LD_INT 3
32820: NEG
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 1
32828: NEG
32829: PUSH
32830: LD_INT 3
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: LD_INT 3
32843: NEG
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 1
32851: PUSH
32852: LD_INT 2
32854: NEG
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 3
32862: PUSH
32863: LD_INT 2
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 3
32872: PUSH
32873: LD_INT 3
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 2
32882: PUSH
32883: LD_INT 3
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 1
32892: PUSH
32893: LD_INT 3
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 0
32902: PUSH
32903: LD_INT 3
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 1
32912: NEG
32913: PUSH
32914: LD_INT 2
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 3
32923: NEG
32924: PUSH
32925: LD_INT 2
32927: NEG
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 3
32935: NEG
32936: PUSH
32937: LD_INT 3
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32976: LD_ADDR_VAR 0 46
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: LD_INT 0
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: LD_INT 1
32996: NEG
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: PUSH
33005: LD_INT 0
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 0
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 1
33034: NEG
33035: PUSH
33036: LD_INT 0
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 1
33045: NEG
33046: PUSH
33047: LD_INT 1
33049: NEG
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 1
33057: NEG
33058: PUSH
33059: LD_INT 2
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: LD_INT 2
33072: NEG
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: PUSH
33081: LD_INT 1
33083: NEG
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 2
33091: PUSH
33092: LD_INT 0
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 1
33111: PUSH
33112: LD_INT 2
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: LD_INT 2
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 1
33131: NEG
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 2
33142: NEG
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 2
33153: NEG
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 1
33165: NEG
33166: PUSH
33167: LD_INT 3
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: LD_INT 3
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: LD_INT 2
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 2
33199: PUSH
33200: LD_INT 1
33202: NEG
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 3
33210: PUSH
33211: LD_INT 0
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 3
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 1
33230: PUSH
33231: LD_INT 3
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: LD_INT 3
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 1
33250: NEG
33251: PUSH
33252: LD_INT 2
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 2
33261: NEG
33262: PUSH
33263: LD_INT 1
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 3
33272: NEG
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 3
33283: NEG
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33324: LD_ADDR_VAR 0 47
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: LD_INT 0
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: LD_INT 0
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 1
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 0
33372: PUSH
33373: LD_INT 1
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: LD_INT 0
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 1
33393: NEG
33394: PUSH
33395: LD_INT 1
33397: NEG
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: LD_INT 2
33409: NEG
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 0
33417: PUSH
33418: LD_INT 2
33420: NEG
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 1
33428: PUSH
33429: LD_INT 1
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 2
33439: NEG
33440: PUSH
33441: LD_INT 1
33443: NEG
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 2
33451: NEG
33452: PUSH
33453: LD_INT 2
33455: NEG
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33475: LD_ADDR_VAR 0 48
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: LD_INT 0
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: LD_INT 1
33495: NEG
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 1
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 1
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 0
33523: PUSH
33524: LD_INT 1
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 1
33533: NEG
33534: PUSH
33535: LD_INT 0
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 1
33544: NEG
33545: PUSH
33546: LD_INT 1
33548: NEG
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 1
33556: NEG
33557: PUSH
33558: LD_INT 2
33560: NEG
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 0
33568: PUSH
33569: LD_INT 2
33571: NEG
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 1
33579: PUSH
33580: LD_INT 1
33582: NEG
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 2
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 2
33600: PUSH
33601: LD_INT 1
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33622: LD_ADDR_VAR 0 49
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: LD_INT 0
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 0
33639: PUSH
33640: LD_INT 1
33642: NEG
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: LD_INT 0
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 1
33660: PUSH
33661: LD_INT 1
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: LD_INT 1
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 1
33680: NEG
33681: PUSH
33682: LD_INT 0
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 1
33691: NEG
33692: PUSH
33693: LD_INT 1
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: PUSH
33704: LD_INT 1
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: LD_INT 1
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 2
33734: PUSH
33735: LD_INT 2
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: LD_INT 2
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33766: LD_ADDR_VAR 0 50
33770: PUSH
33771: LD_INT 0
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 1
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 1
33804: PUSH
33805: LD_INT 1
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: LD_INT 1
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 1
33824: NEG
33825: PUSH
33826: LD_INT 0
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 1
33835: NEG
33836: PUSH
33837: LD_INT 1
33839: NEG
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 2
33847: PUSH
33848: LD_INT 1
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 2
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 2
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: LD_INT 1
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33910: LD_ADDR_VAR 0 51
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 1
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 1
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: LD_INT 1
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 1
33991: PUSH
33992: LD_INT 2
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 0
34001: PUSH
34002: LD_INT 2
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: NEG
34012: PUSH
34013: LD_INT 1
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 2
34022: NEG
34023: PUSH
34024: LD_INT 0
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 2
34033: NEG
34034: PUSH
34035: LD_INT 1
34037: NEG
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34057: LD_ADDR_VAR 0 52
34061: PUSH
34062: LD_INT 0
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: PUSH
34086: LD_INT 0
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: LD_INT 1
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 0
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 1
34115: NEG
34116: PUSH
34117: LD_INT 0
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 1
34126: NEG
34127: PUSH
34128: LD_INT 1
34130: NEG
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 1
34138: NEG
34139: PUSH
34140: LD_INT 2
34142: NEG
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 1
34150: NEG
34151: PUSH
34152: LD_INT 1
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 2
34161: NEG
34162: PUSH
34163: LD_INT 0
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 2
34172: NEG
34173: PUSH
34174: LD_INT 1
34176: NEG
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 2
34184: NEG
34185: PUSH
34186: LD_INT 2
34188: NEG
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34208: LD_ADDR_VAR 0 53
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 0
34225: PUSH
34226: LD_INT 1
34228: NEG
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 1
34236: PUSH
34237: LD_INT 0
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: LD_INT 1
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 0
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 1
34266: NEG
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 1
34277: NEG
34278: PUSH
34279: LD_INT 1
34281: NEG
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 1
34289: NEG
34290: PUSH
34291: LD_INT 2
34293: NEG
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 0
34301: PUSH
34302: LD_INT 2
34304: NEG
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 1
34312: PUSH
34313: LD_INT 1
34315: NEG
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 2
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 2
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 2
34343: PUSH
34344: LD_INT 2
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 1
34353: PUSH
34354: LD_INT 2
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 0
34363: PUSH
34364: LD_INT 2
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 1
34373: NEG
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 2
34384: NEG
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 2
34395: NEG
34396: PUSH
34397: LD_INT 1
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 2
34407: NEG
34408: PUSH
34409: LD_INT 2
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34438: LD_ADDR_VAR 0 54
34442: PUSH
34443: LD_INT 0
34445: PUSH
34446: LD_INT 0
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 0
34455: PUSH
34456: LD_INT 1
34458: NEG
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: LD_INT 0
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 1
34476: PUSH
34477: LD_INT 1
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 0
34486: PUSH
34487: LD_INT 1
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 1
34496: NEG
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: NEG
34508: PUSH
34509: LD_INT 1
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 1
34519: NEG
34520: PUSH
34521: LD_INT 2
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: LD_INT 2
34534: NEG
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: LD_INT 1
34545: NEG
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 2
34553: PUSH
34554: LD_INT 0
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 2
34563: PUSH
34564: LD_INT 1
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 2
34573: PUSH
34574: LD_INT 2
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 1
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: LD_INT 2
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: NEG
34604: PUSH
34605: LD_INT 1
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 2
34614: NEG
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 2
34625: NEG
34626: PUSH
34627: LD_INT 1
34629: NEG
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 2
34637: NEG
34638: PUSH
34639: LD_INT 2
34641: NEG
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34668: LD_ADDR_VAR 0 55
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 0
34685: PUSH
34686: LD_INT 1
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 1
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: PUSH
34707: LD_INT 1
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 0
34716: PUSH
34717: LD_INT 1
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 1
34737: NEG
34738: PUSH
34739: LD_INT 1
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: LD_INT 2
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: LD_INT 2
34764: NEG
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 1
34772: PUSH
34773: LD_INT 1
34775: NEG
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 2
34783: PUSH
34784: LD_INT 0
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 2
34793: PUSH
34794: LD_INT 1
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 2
34803: PUSH
34804: LD_INT 2
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 1
34813: PUSH
34814: LD_INT 2
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: LD_INT 2
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 1
34833: NEG
34834: PUSH
34835: LD_INT 1
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 2
34844: NEG
34845: PUSH
34846: LD_INT 0
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 2
34855: NEG
34856: PUSH
34857: LD_INT 1
34859: NEG
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 2
34867: NEG
34868: PUSH
34869: LD_INT 2
34871: NEG
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34898: LD_ADDR_VAR 0 56
34902: PUSH
34903: LD_INT 0
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: LD_INT 1
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 1
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 1
34936: PUSH
34937: LD_INT 1
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 0
34946: PUSH
34947: LD_INT 1
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 1
34956: NEG
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 1
34967: NEG
34968: PUSH
34969: LD_INT 1
34971: NEG
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 1
34979: NEG
34980: PUSH
34981: LD_INT 2
34983: NEG
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: LD_INT 2
34994: NEG
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 1
35002: PUSH
35003: LD_INT 1
35005: NEG
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 2
35013: PUSH
35014: LD_INT 0
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 2
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 2
35033: PUSH
35034: LD_INT 2
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 1
35043: PUSH
35044: LD_INT 2
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 0
35053: PUSH
35054: LD_INT 2
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: NEG
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 2
35074: NEG
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 2
35085: NEG
35086: PUSH
35087: LD_INT 1
35089: NEG
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 2
35097: NEG
35098: PUSH
35099: LD_INT 2
35101: NEG
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35128: LD_ADDR_VAR 0 57
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: LD_INT 1
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: PUSH
35167: LD_INT 1
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 1
35197: NEG
35198: PUSH
35199: LD_INT 1
35201: NEG
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 1
35209: NEG
35210: PUSH
35211: LD_INT 2
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: LD_INT 2
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: LD_INT 1
35235: NEG
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 2
35243: PUSH
35244: LD_INT 0
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 2
35253: PUSH
35254: LD_INT 1
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 2
35263: PUSH
35264: LD_INT 2
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 1
35273: PUSH
35274: LD_INT 2
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: LD_INT 2
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 1
35293: NEG
35294: PUSH
35295: LD_INT 1
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 2
35304: NEG
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 2
35315: NEG
35316: PUSH
35317: LD_INT 1
35319: NEG
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 2
35327: NEG
35328: PUSH
35329: LD_INT 2
35331: NEG
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35358: LD_ADDR_VAR 0 58
35362: PUSH
35363: LD_INT 0
35365: PUSH
35366: LD_INT 0
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: LD_INT 1
35378: NEG
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: PUSH
35387: LD_INT 0
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: PUSH
35397: LD_INT 1
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: NEG
35428: PUSH
35429: LD_INT 1
35431: NEG
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 1
35439: NEG
35440: PUSH
35441: LD_INT 2
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: LD_INT 2
35454: NEG
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 1
35462: PUSH
35463: LD_INT 1
35465: NEG
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 2
35473: PUSH
35474: LD_INT 0
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 2
35483: PUSH
35484: LD_INT 1
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: LD_INT 2
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: LD_INT 2
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 0
35513: PUSH
35514: LD_INT 2
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 1
35523: NEG
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 2
35534: NEG
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 2
35545: NEG
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 2
35557: NEG
35558: PUSH
35559: LD_INT 2
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35588: LD_ADDR_VAR 0 59
35592: PUSH
35593: LD_INT 0
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: LD_INT 1
35608: NEG
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 1
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 1
35626: PUSH
35627: LD_INT 1
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 0
35636: PUSH
35637: LD_INT 1
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 1
35657: NEG
35658: PUSH
35659: LD_INT 1
35661: NEG
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35676: LD_ADDR_VAR 0 60
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: PUSH
35715: LD_INT 1
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: LD_INT 1
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35764: LD_ADDR_VAR 0 61
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: LD_INT 0
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: LD_INT 1
35784: NEG
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 1
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: LD_INT 1
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: LD_INT 1
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: PUSH
35824: LD_INT 0
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 1
35833: NEG
35834: PUSH
35835: LD_INT 1
35837: NEG
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35852: LD_ADDR_VAR 0 62
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: LD_INT 1
35872: NEG
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: NEG
35911: PUSH
35912: LD_INT 0
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 1
35921: NEG
35922: PUSH
35923: LD_INT 1
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35940: LD_ADDR_VAR 0 63
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: LD_INT 1
35960: NEG
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: LD_INT 0
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: PUSH
35979: LD_INT 1
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 1
35998: NEG
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 1
36009: NEG
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36028: LD_ADDR_VAR 0 64
36032: PUSH
36033: LD_INT 0
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 0
36045: PUSH
36046: LD_INT 1
36048: NEG
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 1
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 1
36066: PUSH
36067: LD_INT 1
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 0
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 1
36086: NEG
36087: PUSH
36088: LD_INT 0
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 1
36097: NEG
36098: PUSH
36099: LD_INT 1
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: ST_TO_ADDR
// end ; 1 :
36116: GO 42013
36118: LD_INT 1
36120: DOUBLE
36121: EQUAL
36122: IFTRUE 36126
36124: GO 38749
36126: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36127: LD_ADDR_VAR 0 11
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: LD_INT 3
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: LD_INT 3
36149: NEG
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: LD_INT 2
36160: NEG
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: LIST
36170: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36171: LD_ADDR_VAR 0 12
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 3
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 3
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: LIST
36211: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36212: LD_ADDR_VAR 0 13
36216: PUSH
36217: LD_INT 3
36219: PUSH
36220: LD_INT 2
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 3
36229: PUSH
36230: LD_INT 3
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 2
36239: PUSH
36240: LD_INT 3
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: LIST
36251: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36252: LD_ADDR_VAR 0 14
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: LD_INT 3
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: LD_INT 3
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: LD_INT 2
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: LIST
36292: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36293: LD_ADDR_VAR 0 15
36297: PUSH
36298: LD_INT 2
36300: NEG
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 3
36311: NEG
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 3
36322: NEG
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: LIST
36336: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36337: LD_ADDR_VAR 0 16
36341: PUSH
36342: LD_INT 2
36344: NEG
36345: PUSH
36346: LD_INT 3
36348: NEG
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 3
36356: NEG
36357: PUSH
36358: LD_INT 2
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 3
36368: NEG
36369: PUSH
36370: LD_INT 3
36372: NEG
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: LIST
36382: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36383: LD_ADDR_VAR 0 17
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 3
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: LD_INT 3
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: LD_INT 2
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: LIST
36426: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36427: LD_ADDR_VAR 0 18
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: LD_INT 1
36437: NEG
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 3
36445: PUSH
36446: LD_INT 0
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 3
36455: PUSH
36456: LD_INT 1
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: LIST
36467: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36468: LD_ADDR_VAR 0 19
36472: PUSH
36473: LD_INT 3
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 3
36485: PUSH
36486: LD_INT 3
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 2
36495: PUSH
36496: LD_INT 3
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: LIST
36507: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36508: LD_ADDR_VAR 0 20
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: LD_INT 3
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: LD_INT 3
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 1
36535: NEG
36536: PUSH
36537: LD_INT 2
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: LIST
36548: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36549: LD_ADDR_VAR 0 21
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: LD_INT 1
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 3
36567: NEG
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 3
36578: NEG
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: LIST
36592: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36593: LD_ADDR_VAR 0 22
36597: PUSH
36598: LD_INT 2
36600: NEG
36601: PUSH
36602: LD_INT 3
36604: NEG
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 3
36612: NEG
36613: PUSH
36614: LD_INT 2
36616: NEG
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 3
36624: NEG
36625: PUSH
36626: LD_INT 3
36628: NEG
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: LIST
36638: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36639: LD_ADDR_VAR 0 23
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: LD_INT 3
36649: NEG
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: LD_INT 4
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: PUSH
36670: LD_INT 3
36672: NEG
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: LIST
36682: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36683: LD_ADDR_VAR 0 24
36687: PUSH
36688: LD_INT 3
36690: PUSH
36691: LD_INT 0
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 3
36700: PUSH
36701: LD_INT 1
36703: NEG
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 4
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: LIST
36723: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36724: LD_ADDR_VAR 0 25
36728: PUSH
36729: LD_INT 3
36731: PUSH
36732: LD_INT 3
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 4
36741: PUSH
36742: LD_INT 3
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 3
36751: PUSH
36752: LD_INT 4
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: LIST
36763: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36764: LD_ADDR_VAR 0 26
36768: PUSH
36769: LD_INT 0
36771: PUSH
36772: LD_INT 3
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 1
36781: PUSH
36782: LD_INT 4
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 1
36791: NEG
36792: PUSH
36793: LD_INT 3
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: LIST
36804: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36805: LD_ADDR_VAR 0 27
36809: PUSH
36810: LD_INT 3
36812: NEG
36813: PUSH
36814: LD_INT 0
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 3
36823: NEG
36824: PUSH
36825: LD_INT 1
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 4
36834: NEG
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: LIST
36848: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36849: LD_ADDR_VAR 0 28
36853: PUSH
36854: LD_INT 3
36856: NEG
36857: PUSH
36858: LD_INT 3
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 3
36868: NEG
36869: PUSH
36870: LD_INT 4
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 4
36880: NEG
36881: PUSH
36882: LD_INT 3
36884: NEG
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36895: LD_ADDR_VAR 0 29
36899: PUSH
36900: LD_INT 1
36902: NEG
36903: PUSH
36904: LD_INT 3
36906: NEG
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 0
36914: PUSH
36915: LD_INT 3
36917: NEG
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: LD_INT 2
36928: NEG
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 1
36936: NEG
36937: PUSH
36938: LD_INT 4
36940: NEG
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: LD_INT 4
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 1
36959: PUSH
36960: LD_INT 3
36962: NEG
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: LD_INT 5
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: LD_INT 5
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 1
36993: PUSH
36994: LD_INT 4
36996: NEG
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: LD_INT 6
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: LD_INT 6
37019: NEG
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 1
37027: PUSH
37028: LD_INT 5
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37050: LD_ADDR_VAR 0 30
37054: PUSH
37055: LD_INT 2
37057: PUSH
37058: LD_INT 1
37060: NEG
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 3
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 3
37078: PUSH
37079: LD_INT 1
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 3
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 4
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 4
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 4
37119: PUSH
37120: LD_INT 1
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 5
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 5
37140: PUSH
37141: LD_INT 1
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 5
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 6
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 6
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37193: LD_ADDR_VAR 0 31
37197: PUSH
37198: LD_INT 3
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 3
37210: PUSH
37211: LD_INT 3
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 2
37220: PUSH
37221: LD_INT 3
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 4
37230: PUSH
37231: LD_INT 3
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 4
37240: PUSH
37241: LD_INT 4
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 3
37250: PUSH
37251: LD_INT 4
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 5
37260: PUSH
37261: LD_INT 4
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 5
37270: PUSH
37271: LD_INT 5
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 4
37280: PUSH
37281: LD_INT 5
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 6
37290: PUSH
37291: LD_INT 5
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 6
37300: PUSH
37301: LD_INT 6
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 5
37310: PUSH
37311: LD_INT 6
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37332: LD_ADDR_VAR 0 32
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: LD_INT 3
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: LD_INT 3
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 1
37359: NEG
37360: PUSH
37361: LD_INT 2
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: PUSH
37371: LD_INT 4
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 0
37380: PUSH
37381: LD_INT 4
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 1
37390: NEG
37391: PUSH
37392: LD_INT 3
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: LD_INT 5
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: LD_INT 5
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: LD_INT 4
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: LD_INT 6
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 0
37442: PUSH
37443: LD_INT 6
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: LD_INT 5
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37475: LD_ADDR_VAR 0 33
37479: PUSH
37480: LD_INT 2
37482: NEG
37483: PUSH
37484: LD_INT 1
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 3
37493: NEG
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 3
37504: NEG
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 3
37516: NEG
37517: PUSH
37518: LD_INT 1
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 4
37527: NEG
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 4
37538: NEG
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 4
37550: NEG
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 5
37561: NEG
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 5
37572: NEG
37573: PUSH
37574: LD_INT 1
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 5
37584: NEG
37585: PUSH
37586: LD_INT 1
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 6
37595: NEG
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 6
37606: NEG
37607: PUSH
37608: LD_INT 1
37610: NEG
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37630: LD_ADDR_VAR 0 34
37634: PUSH
37635: LD_INT 2
37637: NEG
37638: PUSH
37639: LD_INT 3
37641: NEG
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 3
37649: NEG
37650: PUSH
37651: LD_INT 2
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 3
37661: NEG
37662: PUSH
37663: LD_INT 3
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 3
37673: NEG
37674: PUSH
37675: LD_INT 4
37677: NEG
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 4
37685: NEG
37686: PUSH
37687: LD_INT 3
37689: NEG
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 4
37697: NEG
37698: PUSH
37699: LD_INT 4
37701: NEG
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 4
37709: NEG
37710: PUSH
37711: LD_INT 5
37713: NEG
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 5
37721: NEG
37722: PUSH
37723: LD_INT 4
37725: NEG
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 5
37733: NEG
37734: PUSH
37735: LD_INT 5
37737: NEG
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 5
37745: NEG
37746: PUSH
37747: LD_INT 6
37749: NEG
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 6
37757: NEG
37758: PUSH
37759: LD_INT 5
37761: NEG
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 6
37769: NEG
37770: PUSH
37771: LD_INT 6
37773: NEG
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37793: LD_ADDR_VAR 0 41
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: LD_INT 2
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: LD_INT 3
37815: NEG
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: LIST
37836: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37837: LD_ADDR_VAR 0 42
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 2
37854: PUSH
37855: LD_INT 1
37857: NEG
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 3
37865: PUSH
37866: LD_INT 1
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: LIST
37877: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37878: LD_ADDR_VAR 0 43
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: LD_INT 2
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 3
37895: PUSH
37896: LD_INT 2
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 2
37905: PUSH
37906: LD_INT 3
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: LIST
37917: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37918: LD_ADDR_VAR 0 44
37922: PUSH
37923: LD_INT 0
37925: PUSH
37926: LD_INT 2
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 1
37935: PUSH
37936: LD_INT 3
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: LD_INT 2
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: LIST
37958: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37959: LD_ADDR_VAR 0 45
37963: PUSH
37964: LD_INT 2
37966: NEG
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 2
37977: NEG
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 3
37988: NEG
37989: PUSH
37990: LD_INT 1
37992: NEG
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: LIST
38002: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38003: LD_ADDR_VAR 0 46
38007: PUSH
38008: LD_INT 2
38010: NEG
38011: PUSH
38012: LD_INT 2
38014: NEG
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 2
38022: NEG
38023: PUSH
38024: LD_INT 3
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 3
38034: NEG
38035: PUSH
38036: LD_INT 2
38038: NEG
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: LIST
38048: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38049: LD_ADDR_VAR 0 47
38053: PUSH
38054: LD_INT 2
38056: NEG
38057: PUSH
38058: LD_INT 3
38060: NEG
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 1
38068: NEG
38069: PUSH
38070: LD_INT 3
38072: NEG
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38082: LD_ADDR_VAR 0 48
38086: PUSH
38087: LD_INT 1
38089: PUSH
38090: LD_INT 2
38092: NEG
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 2
38100: PUSH
38101: LD_INT 1
38103: NEG
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38113: LD_ADDR_VAR 0 49
38117: PUSH
38118: LD_INT 3
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 3
38130: PUSH
38131: LD_INT 2
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38142: LD_ADDR_VAR 0 50
38146: PUSH
38147: LD_INT 2
38149: PUSH
38150: LD_INT 3
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: LD_INT 3
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38171: LD_ADDR_VAR 0 51
38175: PUSH
38176: LD_INT 1
38178: NEG
38179: PUSH
38180: LD_INT 2
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 2
38189: NEG
38190: PUSH
38191: LD_INT 1
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38202: LD_ADDR_VAR 0 52
38206: PUSH
38207: LD_INT 3
38209: NEG
38210: PUSH
38211: LD_INT 1
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 3
38221: NEG
38222: PUSH
38223: LD_INT 2
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38235: LD_ADDR_VAR 0 53
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: PUSH
38244: LD_INT 3
38246: NEG
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 0
38254: PUSH
38255: LD_INT 3
38257: NEG
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 1
38265: PUSH
38266: LD_INT 2
38268: NEG
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: LIST
38278: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38279: LD_ADDR_VAR 0 54
38283: PUSH
38284: LD_INT 2
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 3
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 3
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: LIST
38319: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38320: LD_ADDR_VAR 0 55
38324: PUSH
38325: LD_INT 3
38327: PUSH
38328: LD_INT 2
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 3
38337: PUSH
38338: LD_INT 3
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 2
38347: PUSH
38348: LD_INT 3
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: LIST
38359: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38360: LD_ADDR_VAR 0 56
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: LD_INT 3
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 0
38377: PUSH
38378: LD_INT 3
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: LD_INT 2
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: LIST
38400: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38401: LD_ADDR_VAR 0 57
38405: PUSH
38406: LD_INT 2
38408: NEG
38409: PUSH
38410: LD_INT 1
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 3
38419: NEG
38420: PUSH
38421: LD_INT 0
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 3
38430: NEG
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: LIST
38444: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38445: LD_ADDR_VAR 0 58
38449: PUSH
38450: LD_INT 2
38452: NEG
38453: PUSH
38454: LD_INT 3
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 3
38464: NEG
38465: PUSH
38466: LD_INT 2
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 3
38476: NEG
38477: PUSH
38478: LD_INT 3
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38491: LD_ADDR_VAR 0 59
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: LD_INT 2
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: LD_INT 2
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38535: LD_ADDR_VAR 0 60
38539: PUSH
38540: LD_INT 1
38542: PUSH
38543: LD_INT 1
38545: NEG
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 2
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: LD_INT 1
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: LIST
38575: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38576: LD_ADDR_VAR 0 61
38580: PUSH
38581: LD_INT 2
38583: PUSH
38584: LD_INT 1
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 2
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 1
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: LIST
38615: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38616: LD_ADDR_VAR 0 62
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: LD_INT 2
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: LD_INT 2
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: LIST
38656: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38657: LD_ADDR_VAR 0 63
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 2
38675: NEG
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 2
38686: NEG
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: LIST
38700: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38701: LD_ADDR_VAR 0 64
38705: PUSH
38706: LD_INT 1
38708: NEG
38709: PUSH
38710: LD_INT 2
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 2
38720: NEG
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 2
38732: NEG
38733: PUSH
38734: LD_INT 2
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: LIST
38746: ST_TO_ADDR
// end ; 2 :
38747: GO 42013
38749: LD_INT 2
38751: DOUBLE
38752: EQUAL
38753: IFTRUE 38757
38755: GO 42012
38757: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38758: LD_ADDR_VAR 0 29
38762: PUSH
38763: LD_INT 4
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 4
38775: PUSH
38776: LD_INT 1
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 5
38786: PUSH
38787: LD_INT 0
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 5
38796: PUSH
38797: LD_INT 1
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 4
38806: PUSH
38807: LD_INT 1
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 3
38816: PUSH
38817: LD_INT 0
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 3
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 3
38837: PUSH
38838: LD_INT 2
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 5
38848: PUSH
38849: LD_INT 2
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 3
38858: PUSH
38859: LD_INT 3
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 3
38868: PUSH
38869: LD_INT 2
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 4
38878: PUSH
38879: LD_INT 3
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 4
38888: PUSH
38889: LD_INT 4
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 3
38898: PUSH
38899: LD_INT 4
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 2
38908: PUSH
38909: LD_INT 3
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: LD_INT 2
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 4
38928: PUSH
38929: LD_INT 2
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 2
38938: PUSH
38939: LD_INT 4
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: LD_INT 4
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: LD_INT 3
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: LD_INT 4
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: LD_INT 5
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: LD_INT 5
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: LD_INT 4
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 1
39009: NEG
39010: PUSH
39011: LD_INT 3
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 2
39020: PUSH
39021: LD_INT 5
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 2
39030: NEG
39031: PUSH
39032: LD_INT 3
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 3
39041: NEG
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 3
39052: NEG
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 2
39064: NEG
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 2
39075: NEG
39076: PUSH
39077: LD_INT 1
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 3
39086: NEG
39087: PUSH
39088: LD_INT 1
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 4
39097: NEG
39098: PUSH
39099: LD_INT 0
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 4
39108: NEG
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 4
39120: NEG
39121: PUSH
39122: LD_INT 2
39124: NEG
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 2
39132: NEG
39133: PUSH
39134: LD_INT 2
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 4
39143: NEG
39144: PUSH
39145: LD_INT 4
39147: NEG
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 4
39155: NEG
39156: PUSH
39157: LD_INT 5
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 3
39167: NEG
39168: PUSH
39169: LD_INT 4
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 3
39179: NEG
39180: PUSH
39181: LD_INT 3
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 4
39191: NEG
39192: PUSH
39193: LD_INT 3
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 5
39203: NEG
39204: PUSH
39205: LD_INT 4
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 5
39215: NEG
39216: PUSH
39217: LD_INT 5
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 3
39227: NEG
39228: PUSH
39229: LD_INT 5
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 5
39239: NEG
39240: PUSH
39241: LD_INT 3
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39296: LD_ADDR_VAR 0 30
39300: PUSH
39301: LD_INT 4
39303: PUSH
39304: LD_INT 4
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 4
39313: PUSH
39314: LD_INT 3
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 5
39323: PUSH
39324: LD_INT 4
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 5
39333: PUSH
39334: LD_INT 5
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 4
39343: PUSH
39344: LD_INT 5
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 3
39353: PUSH
39354: LD_INT 4
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 3
39363: PUSH
39364: LD_INT 3
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 5
39373: PUSH
39374: LD_INT 3
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 3
39383: PUSH
39384: LD_INT 5
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: LD_INT 3
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: LD_INT 2
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: LD_INT 3
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: LD_INT 4
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: LD_INT 4
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: NEG
39444: PUSH
39445: LD_INT 3
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 2
39465: PUSH
39466: LD_INT 4
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 2
39475: NEG
39476: PUSH
39477: LD_INT 2
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 4
39486: NEG
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 4
39497: NEG
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 3
39509: NEG
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 3
39520: NEG
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 4
39531: NEG
39532: PUSH
39533: LD_INT 1
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 5
39542: NEG
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 5
39553: NEG
39554: PUSH
39555: LD_INT 1
39557: NEG
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 5
39565: NEG
39566: PUSH
39567: LD_INT 2
39569: NEG
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 3
39577: NEG
39578: PUSH
39579: LD_INT 2
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 3
39588: NEG
39589: PUSH
39590: LD_INT 3
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 3
39600: NEG
39601: PUSH
39602: LD_INT 4
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 2
39612: NEG
39613: PUSH
39614: LD_INT 3
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 2
39624: NEG
39625: PUSH
39626: LD_INT 2
39628: NEG
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 3
39636: NEG
39637: PUSH
39638: LD_INT 2
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 4
39648: NEG
39649: PUSH
39650: LD_INT 3
39652: NEG
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 4
39660: NEG
39661: PUSH
39662: LD_INT 4
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 2
39672: NEG
39673: PUSH
39674: LD_INT 4
39676: NEG
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 4
39684: NEG
39685: PUSH
39686: LD_INT 2
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 0
39696: PUSH
39697: LD_INT 4
39699: NEG
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: LD_INT 5
39710: NEG
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: LD_INT 4
39721: NEG
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: LD_INT 3
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: LD_INT 3
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: LD_INT 4
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: NEG
39764: PUSH
39765: LD_INT 5
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 2
39775: PUSH
39776: LD_INT 3
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 2
39786: NEG
39787: PUSH
39788: LD_INT 5
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39843: LD_ADDR_VAR 0 31
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: LD_INT 4
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: LD_INT 3
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 1
39870: PUSH
39871: LD_INT 4
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: PUSH
39881: LD_INT 5
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: LD_INT 5
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: LD_INT 4
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 1
39911: NEG
39912: PUSH
39913: LD_INT 3
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 2
39922: PUSH
39923: LD_INT 5
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 2
39932: NEG
39933: PUSH
39934: LD_INT 3
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 3
39943: NEG
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 3
39954: NEG
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: NEG
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 2
39977: NEG
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 3
39988: NEG
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 4
39999: NEG
40000: PUSH
40001: LD_INT 0
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 4
40010: NEG
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 4
40022: NEG
40023: PUSH
40024: LD_INT 2
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 2
40034: NEG
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 4
40045: NEG
40046: PUSH
40047: LD_INT 4
40049: NEG
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 4
40057: NEG
40058: PUSH
40059: LD_INT 5
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 3
40069: NEG
40070: PUSH
40071: LD_INT 4
40073: NEG
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 3
40081: NEG
40082: PUSH
40083: LD_INT 3
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 4
40093: NEG
40094: PUSH
40095: LD_INT 3
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 5
40105: NEG
40106: PUSH
40107: LD_INT 4
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 5
40117: NEG
40118: PUSH
40119: LD_INT 5
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 3
40129: NEG
40130: PUSH
40131: LD_INT 5
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 5
40141: NEG
40142: PUSH
40143: LD_INT 3
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: LD_INT 3
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: LD_INT 4
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: PUSH
40176: LD_INT 3
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: LD_INT 2
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: LD_INT 2
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: LD_INT 3
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: NEG
40221: PUSH
40222: LD_INT 4
40224: NEG
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 2
40232: PUSH
40233: LD_INT 2
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: NEG
40244: PUSH
40245: LD_INT 4
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 4
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 4
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 5
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 5
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 4
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 3
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 3
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 3
40327: PUSH
40328: LD_INT 2
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 5
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40393: LD_ADDR_VAR 0 32
40397: PUSH
40398: LD_INT 4
40400: NEG
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 4
40411: NEG
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 3
40423: NEG
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 3
40434: NEG
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 4
40445: NEG
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 5
40456: NEG
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 5
40467: NEG
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 5
40479: NEG
40480: PUSH
40481: LD_INT 2
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 3
40491: NEG
40492: PUSH
40493: LD_INT 2
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 3
40502: NEG
40503: PUSH
40504: LD_INT 3
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 3
40514: NEG
40515: PUSH
40516: LD_INT 4
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 2
40526: NEG
40527: PUSH
40528: LD_INT 3
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 2
40538: NEG
40539: PUSH
40540: LD_INT 2
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 3
40550: NEG
40551: PUSH
40552: LD_INT 2
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 4
40562: NEG
40563: PUSH
40564: LD_INT 3
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 4
40574: NEG
40575: PUSH
40576: LD_INT 4
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 2
40586: NEG
40587: PUSH
40588: LD_INT 4
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 4
40598: NEG
40599: PUSH
40600: LD_INT 2
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 4
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: LD_INT 5
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: LD_INT 4
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: LD_INT 3
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: LD_INT 3
40657: NEG
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: LD_INT 4
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: LD_INT 5
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 2
40689: PUSH
40690: LD_INT 3
40692: NEG
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 2
40700: NEG
40701: PUSH
40702: LD_INT 5
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 3
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 3
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 4
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 4
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 3
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 2
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 2
40773: PUSH
40774: LD_INT 1
40776: NEG
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 2
40784: PUSH
40785: LD_INT 2
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 4
40795: PUSH
40796: LD_INT 2
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 4
40805: PUSH
40806: LD_INT 4
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 4
40815: PUSH
40816: LD_INT 3
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 5
40825: PUSH
40826: LD_INT 4
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 5
40835: PUSH
40836: LD_INT 5
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 4
40845: PUSH
40846: LD_INT 5
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 3
40855: PUSH
40856: LD_INT 4
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 3
40865: PUSH
40866: LD_INT 3
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 5
40875: PUSH
40876: LD_INT 3
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 3
40885: PUSH
40886: LD_INT 5
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40940: LD_ADDR_VAR 0 33
40944: PUSH
40945: LD_INT 4
40947: NEG
40948: PUSH
40949: LD_INT 4
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 4
40959: NEG
40960: PUSH
40961: LD_INT 5
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 3
40971: NEG
40972: PUSH
40973: LD_INT 4
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 3
40983: NEG
40984: PUSH
40985: LD_INT 3
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 4
40995: NEG
40996: PUSH
40997: LD_INT 3
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 5
41007: NEG
41008: PUSH
41009: LD_INT 4
41011: NEG
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 5
41019: NEG
41020: PUSH
41021: LD_INT 5
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 3
41031: NEG
41032: PUSH
41033: LD_INT 5
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 5
41043: NEG
41044: PUSH
41045: LD_INT 3
41047: NEG
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: LD_INT 3
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: LD_INT 4
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 1
41077: PUSH
41078: LD_INT 3
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 2
41091: NEG
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 2
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: LD_INT 3
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 1
41122: NEG
41123: PUSH
41124: LD_INT 4
41126: NEG
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 2
41134: PUSH
41135: LD_INT 2
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 2
41145: NEG
41146: PUSH
41147: LD_INT 4
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 4
41157: PUSH
41158: LD_INT 0
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 4
41167: PUSH
41168: LD_INT 1
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 5
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 5
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 4
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 3
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 3
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 3
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 5
41240: PUSH
41241: LD_INT 2
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 3
41250: PUSH
41251: LD_INT 3
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 3
41260: PUSH
41261: LD_INT 2
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 4
41270: PUSH
41271: LD_INT 3
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 4
41280: PUSH
41281: LD_INT 4
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 3
41290: PUSH
41291: LD_INT 4
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 2
41300: PUSH
41301: LD_INT 3
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: LD_INT 2
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 4
41320: PUSH
41321: LD_INT 2
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: LD_INT 4
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: LD_INT 4
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: LD_INT 3
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: PUSH
41361: LD_INT 4
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: PUSH
41371: LD_INT 5
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: LD_INT 5
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: NEG
41391: PUSH
41392: LD_INT 4
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: LD_INT 3
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 2
41412: PUSH
41413: LD_INT 5
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 2
41422: NEG
41423: PUSH
41424: LD_INT 3
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41478: LD_ADDR_VAR 0 34
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 4
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: LD_INT 5
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: LD_INT 4
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: LD_INT 3
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: LD_INT 3
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: LD_INT 4
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: LD_INT 5
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 2
41564: PUSH
41565: LD_INT 3
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 2
41575: NEG
41576: PUSH
41577: LD_INT 5
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 3
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 3
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 4
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 4
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 3
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 2
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: LD_INT 1
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: LD_INT 2
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 4
41670: PUSH
41671: LD_INT 2
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 4
41680: PUSH
41681: LD_INT 4
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 4
41690: PUSH
41691: LD_INT 3
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 5
41700: PUSH
41701: LD_INT 4
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 5
41710: PUSH
41711: LD_INT 5
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 4
41720: PUSH
41721: LD_INT 5
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 3
41730: PUSH
41731: LD_INT 4
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 3
41740: PUSH
41741: LD_INT 3
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 5
41750: PUSH
41751: LD_INT 3
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 3
41760: PUSH
41761: LD_INT 5
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: LD_INT 3
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: LD_INT 2
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: LD_INT 3
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: LD_INT 4
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: LD_INT 4
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: LD_INT 3
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: LD_INT 2
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 2
41842: PUSH
41843: LD_INT 4
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 2
41852: NEG
41853: PUSH
41854: LD_INT 2
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 4
41863: NEG
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 4
41874: NEG
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 3
41886: NEG
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 3
41897: NEG
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 4
41908: NEG
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 5
41919: NEG
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 5
41930: NEG
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 5
41942: NEG
41943: PUSH
41944: LD_INT 2
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 3
41954: NEG
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: ST_TO_ADDR
// end ; end ;
42010: GO 42013
42012: POP
// case btype of b_depot , b_warehouse :
42013: LD_VAR 0 1
42017: PUSH
42018: LD_INT 0
42020: DOUBLE
42021: EQUAL
42022: IFTRUE 42032
42024: LD_INT 1
42026: DOUBLE
42027: EQUAL
42028: IFTRUE 42032
42030: GO 42233
42032: POP
// case nation of nation_american :
42033: LD_VAR 0 5
42037: PUSH
42038: LD_INT 1
42040: DOUBLE
42041: EQUAL
42042: IFTRUE 42046
42044: GO 42102
42046: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42047: LD_ADDR_VAR 0 9
42051: PUSH
42052: LD_VAR 0 11
42056: PUSH
42057: LD_VAR 0 12
42061: PUSH
42062: LD_VAR 0 13
42066: PUSH
42067: LD_VAR 0 14
42071: PUSH
42072: LD_VAR 0 15
42076: PUSH
42077: LD_VAR 0 16
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: PUSH
42090: LD_VAR 0 4
42094: PUSH
42095: LD_INT 1
42097: PLUS
42098: ARRAY
42099: ST_TO_ADDR
42100: GO 42231
42102: LD_INT 2
42104: DOUBLE
42105: EQUAL
42106: IFTRUE 42110
42108: GO 42166
42110: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42111: LD_ADDR_VAR 0 9
42115: PUSH
42116: LD_VAR 0 17
42120: PUSH
42121: LD_VAR 0 18
42125: PUSH
42126: LD_VAR 0 19
42130: PUSH
42131: LD_VAR 0 20
42135: PUSH
42136: LD_VAR 0 21
42140: PUSH
42141: LD_VAR 0 22
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: PUSH
42154: LD_VAR 0 4
42158: PUSH
42159: LD_INT 1
42161: PLUS
42162: ARRAY
42163: ST_TO_ADDR
42164: GO 42231
42166: LD_INT 3
42168: DOUBLE
42169: EQUAL
42170: IFTRUE 42174
42172: GO 42230
42174: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42175: LD_ADDR_VAR 0 9
42179: PUSH
42180: LD_VAR 0 23
42184: PUSH
42185: LD_VAR 0 24
42189: PUSH
42190: LD_VAR 0 25
42194: PUSH
42195: LD_VAR 0 26
42199: PUSH
42200: LD_VAR 0 27
42204: PUSH
42205: LD_VAR 0 28
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: PUSH
42218: LD_VAR 0 4
42222: PUSH
42223: LD_INT 1
42225: PLUS
42226: ARRAY
42227: ST_TO_ADDR
42228: GO 42231
42230: POP
42231: GO 42786
42233: LD_INT 2
42235: DOUBLE
42236: EQUAL
42237: IFTRUE 42247
42239: LD_INT 3
42241: DOUBLE
42242: EQUAL
42243: IFTRUE 42247
42245: GO 42303
42247: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42248: LD_ADDR_VAR 0 9
42252: PUSH
42253: LD_VAR 0 29
42257: PUSH
42258: LD_VAR 0 30
42262: PUSH
42263: LD_VAR 0 31
42267: PUSH
42268: LD_VAR 0 32
42272: PUSH
42273: LD_VAR 0 33
42277: PUSH
42278: LD_VAR 0 34
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: PUSH
42291: LD_VAR 0 4
42295: PUSH
42296: LD_INT 1
42298: PLUS
42299: ARRAY
42300: ST_TO_ADDR
42301: GO 42786
42303: LD_INT 16
42305: DOUBLE
42306: EQUAL
42307: IFTRUE 42365
42309: LD_INT 17
42311: DOUBLE
42312: EQUAL
42313: IFTRUE 42365
42315: LD_INT 18
42317: DOUBLE
42318: EQUAL
42319: IFTRUE 42365
42321: LD_INT 19
42323: DOUBLE
42324: EQUAL
42325: IFTRUE 42365
42327: LD_INT 22
42329: DOUBLE
42330: EQUAL
42331: IFTRUE 42365
42333: LD_INT 20
42335: DOUBLE
42336: EQUAL
42337: IFTRUE 42365
42339: LD_INT 21
42341: DOUBLE
42342: EQUAL
42343: IFTRUE 42365
42345: LD_INT 23
42347: DOUBLE
42348: EQUAL
42349: IFTRUE 42365
42351: LD_INT 24
42353: DOUBLE
42354: EQUAL
42355: IFTRUE 42365
42357: LD_INT 25
42359: DOUBLE
42360: EQUAL
42361: IFTRUE 42365
42363: GO 42421
42365: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42366: LD_ADDR_VAR 0 9
42370: PUSH
42371: LD_VAR 0 35
42375: PUSH
42376: LD_VAR 0 36
42380: PUSH
42381: LD_VAR 0 37
42385: PUSH
42386: LD_VAR 0 38
42390: PUSH
42391: LD_VAR 0 39
42395: PUSH
42396: LD_VAR 0 40
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: PUSH
42409: LD_VAR 0 4
42413: PUSH
42414: LD_INT 1
42416: PLUS
42417: ARRAY
42418: ST_TO_ADDR
42419: GO 42786
42421: LD_INT 6
42423: DOUBLE
42424: EQUAL
42425: IFTRUE 42477
42427: LD_INT 7
42429: DOUBLE
42430: EQUAL
42431: IFTRUE 42477
42433: LD_INT 8
42435: DOUBLE
42436: EQUAL
42437: IFTRUE 42477
42439: LD_INT 13
42441: DOUBLE
42442: EQUAL
42443: IFTRUE 42477
42445: LD_INT 12
42447: DOUBLE
42448: EQUAL
42449: IFTRUE 42477
42451: LD_INT 15
42453: DOUBLE
42454: EQUAL
42455: IFTRUE 42477
42457: LD_INT 11
42459: DOUBLE
42460: EQUAL
42461: IFTRUE 42477
42463: LD_INT 14
42465: DOUBLE
42466: EQUAL
42467: IFTRUE 42477
42469: LD_INT 10
42471: DOUBLE
42472: EQUAL
42473: IFTRUE 42477
42475: GO 42533
42477: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42478: LD_ADDR_VAR 0 9
42482: PUSH
42483: LD_VAR 0 41
42487: PUSH
42488: LD_VAR 0 42
42492: PUSH
42493: LD_VAR 0 43
42497: PUSH
42498: LD_VAR 0 44
42502: PUSH
42503: LD_VAR 0 45
42507: PUSH
42508: LD_VAR 0 46
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: PUSH
42521: LD_VAR 0 4
42525: PUSH
42526: LD_INT 1
42528: PLUS
42529: ARRAY
42530: ST_TO_ADDR
42531: GO 42786
42533: LD_INT 36
42535: DOUBLE
42536: EQUAL
42537: IFTRUE 42541
42539: GO 42597
42541: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42542: LD_ADDR_VAR 0 9
42546: PUSH
42547: LD_VAR 0 47
42551: PUSH
42552: LD_VAR 0 48
42556: PUSH
42557: LD_VAR 0 49
42561: PUSH
42562: LD_VAR 0 50
42566: PUSH
42567: LD_VAR 0 51
42571: PUSH
42572: LD_VAR 0 52
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: PUSH
42585: LD_VAR 0 4
42589: PUSH
42590: LD_INT 1
42592: PLUS
42593: ARRAY
42594: ST_TO_ADDR
42595: GO 42786
42597: LD_INT 4
42599: DOUBLE
42600: EQUAL
42601: IFTRUE 42623
42603: LD_INT 5
42605: DOUBLE
42606: EQUAL
42607: IFTRUE 42623
42609: LD_INT 34
42611: DOUBLE
42612: EQUAL
42613: IFTRUE 42623
42615: LD_INT 37
42617: DOUBLE
42618: EQUAL
42619: IFTRUE 42623
42621: GO 42679
42623: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42624: LD_ADDR_VAR 0 9
42628: PUSH
42629: LD_VAR 0 53
42633: PUSH
42634: LD_VAR 0 54
42638: PUSH
42639: LD_VAR 0 55
42643: PUSH
42644: LD_VAR 0 56
42648: PUSH
42649: LD_VAR 0 57
42653: PUSH
42654: LD_VAR 0 58
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: PUSH
42667: LD_VAR 0 4
42671: PUSH
42672: LD_INT 1
42674: PLUS
42675: ARRAY
42676: ST_TO_ADDR
42677: GO 42786
42679: LD_INT 31
42681: DOUBLE
42682: EQUAL
42683: IFTRUE 42729
42685: LD_INT 32
42687: DOUBLE
42688: EQUAL
42689: IFTRUE 42729
42691: LD_INT 33
42693: DOUBLE
42694: EQUAL
42695: IFTRUE 42729
42697: LD_INT 27
42699: DOUBLE
42700: EQUAL
42701: IFTRUE 42729
42703: LD_INT 26
42705: DOUBLE
42706: EQUAL
42707: IFTRUE 42729
42709: LD_INT 28
42711: DOUBLE
42712: EQUAL
42713: IFTRUE 42729
42715: LD_INT 29
42717: DOUBLE
42718: EQUAL
42719: IFTRUE 42729
42721: LD_INT 30
42723: DOUBLE
42724: EQUAL
42725: IFTRUE 42729
42727: GO 42785
42729: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42730: LD_ADDR_VAR 0 9
42734: PUSH
42735: LD_VAR 0 59
42739: PUSH
42740: LD_VAR 0 60
42744: PUSH
42745: LD_VAR 0 61
42749: PUSH
42750: LD_VAR 0 62
42754: PUSH
42755: LD_VAR 0 63
42759: PUSH
42760: LD_VAR 0 64
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: PUSH
42773: LD_VAR 0 4
42777: PUSH
42778: LD_INT 1
42780: PLUS
42781: ARRAY
42782: ST_TO_ADDR
42783: GO 42786
42785: POP
// temp_list2 = [ ] ;
42786: LD_ADDR_VAR 0 10
42790: PUSH
42791: EMPTY
42792: ST_TO_ADDR
// for i in temp_list do
42793: LD_ADDR_VAR 0 8
42797: PUSH
42798: LD_VAR 0 9
42802: PUSH
42803: FOR_IN
42804: IFFALSE 42856
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42806: LD_ADDR_VAR 0 10
42810: PUSH
42811: LD_VAR 0 10
42815: PUSH
42816: LD_VAR 0 8
42820: PUSH
42821: LD_INT 1
42823: ARRAY
42824: PUSH
42825: LD_VAR 0 2
42829: PLUS
42830: PUSH
42831: LD_VAR 0 8
42835: PUSH
42836: LD_INT 2
42838: ARRAY
42839: PUSH
42840: LD_VAR 0 3
42844: PLUS
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: EMPTY
42851: LIST
42852: ADD
42853: ST_TO_ADDR
42854: GO 42803
42856: POP
42857: POP
// result = temp_list2 ;
42858: LD_ADDR_VAR 0 7
42862: PUSH
42863: LD_VAR 0 10
42867: ST_TO_ADDR
// end ;
42868: LD_VAR 0 7
42872: RET
// export function EnemyInRange ( unit , dist ) ; begin
42873: LD_INT 0
42875: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42876: LD_ADDR_VAR 0 3
42880: PUSH
42881: LD_VAR 0 1
42885: PPUSH
42886: CALL_OW 255
42890: PPUSH
42891: LD_VAR 0 1
42895: PPUSH
42896: CALL_OW 250
42900: PPUSH
42901: LD_VAR 0 1
42905: PPUSH
42906: CALL_OW 251
42910: PPUSH
42911: LD_VAR 0 2
42915: PPUSH
42916: CALL 16246 0 4
42920: PUSH
42921: LD_INT 4
42923: ARRAY
42924: ST_TO_ADDR
// end ;
42925: LD_VAR 0 3
42929: RET
// export function PlayerSeeMe ( unit ) ; begin
42930: LD_INT 0
42932: PPUSH
// result := See ( your_side , unit ) ;
42933: LD_ADDR_VAR 0 2
42937: PUSH
42938: LD_OWVAR 2
42942: PPUSH
42943: LD_VAR 0 1
42947: PPUSH
42948: CALL_OW 292
42952: ST_TO_ADDR
// end ;
42953: LD_VAR 0 2
42957: RET
// export function ReverseDir ( unit ) ; begin
42958: LD_INT 0
42960: PPUSH
// if not unit then
42961: LD_VAR 0 1
42965: NOT
42966: IFFALSE 42970
// exit ;
42968: GO 42993
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42970: LD_ADDR_VAR 0 2
42974: PUSH
42975: LD_VAR 0 1
42979: PPUSH
42980: CALL_OW 254
42984: PUSH
42985: LD_INT 3
42987: PLUS
42988: PUSH
42989: LD_INT 6
42991: MOD
42992: ST_TO_ADDR
// end ;
42993: LD_VAR 0 2
42997: RET
// export function ReverseArray ( array ) ; var i ; begin
42998: LD_INT 0
43000: PPUSH
43001: PPUSH
// if not array then
43002: LD_VAR 0 1
43006: NOT
43007: IFFALSE 43011
// exit ;
43009: GO 43066
// result := [ ] ;
43011: LD_ADDR_VAR 0 2
43015: PUSH
43016: EMPTY
43017: ST_TO_ADDR
// for i := array downto 1 do
43018: LD_ADDR_VAR 0 3
43022: PUSH
43023: DOUBLE
43024: LD_VAR 0 1
43028: INC
43029: ST_TO_ADDR
43030: LD_INT 1
43032: PUSH
43033: FOR_DOWNTO
43034: IFFALSE 43064
// result := Join ( result , array [ i ] ) ;
43036: LD_ADDR_VAR 0 2
43040: PUSH
43041: LD_VAR 0 2
43045: PPUSH
43046: LD_VAR 0 1
43050: PUSH
43051: LD_VAR 0 3
43055: ARRAY
43056: PPUSH
43057: CALL 47731 0 2
43061: ST_TO_ADDR
43062: GO 43033
43064: POP
43065: POP
// end ;
43066: LD_VAR 0 2
43070: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43071: LD_INT 0
43073: PPUSH
43074: PPUSH
43075: PPUSH
43076: PPUSH
43077: PPUSH
43078: PPUSH
// if not unit or not hexes then
43079: LD_VAR 0 1
43083: NOT
43084: PUSH
43085: LD_VAR 0 2
43089: NOT
43090: OR
43091: IFFALSE 43095
// exit ;
43093: GO 43218
// dist := 9999 ;
43095: LD_ADDR_VAR 0 5
43099: PUSH
43100: LD_INT 9999
43102: ST_TO_ADDR
// for i = 1 to hexes do
43103: LD_ADDR_VAR 0 4
43107: PUSH
43108: DOUBLE
43109: LD_INT 1
43111: DEC
43112: ST_TO_ADDR
43113: LD_VAR 0 2
43117: PUSH
43118: FOR_TO
43119: IFFALSE 43206
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43121: LD_ADDR_VAR 0 6
43125: PUSH
43126: LD_VAR 0 1
43130: PPUSH
43131: LD_VAR 0 2
43135: PUSH
43136: LD_VAR 0 4
43140: ARRAY
43141: PUSH
43142: LD_INT 1
43144: ARRAY
43145: PPUSH
43146: LD_VAR 0 2
43150: PUSH
43151: LD_VAR 0 4
43155: ARRAY
43156: PUSH
43157: LD_INT 2
43159: ARRAY
43160: PPUSH
43161: CALL_OW 297
43165: ST_TO_ADDR
// if tdist < dist then
43166: LD_VAR 0 6
43170: PUSH
43171: LD_VAR 0 5
43175: LESS
43176: IFFALSE 43204
// begin hex := hexes [ i ] ;
43178: LD_ADDR_VAR 0 8
43182: PUSH
43183: LD_VAR 0 2
43187: PUSH
43188: LD_VAR 0 4
43192: ARRAY
43193: ST_TO_ADDR
// dist := tdist ;
43194: LD_ADDR_VAR 0 5
43198: PUSH
43199: LD_VAR 0 6
43203: ST_TO_ADDR
// end ; end ;
43204: GO 43118
43206: POP
43207: POP
// result := hex ;
43208: LD_ADDR_VAR 0 3
43212: PUSH
43213: LD_VAR 0 8
43217: ST_TO_ADDR
// end ;
43218: LD_VAR 0 3
43222: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43223: LD_INT 0
43225: PPUSH
43226: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43227: LD_VAR 0 1
43231: NOT
43232: PUSH
43233: LD_VAR 0 1
43237: PUSH
43238: LD_INT 21
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 23
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PPUSH
43262: CALL_OW 69
43266: IN
43267: NOT
43268: OR
43269: IFFALSE 43273
// exit ;
43271: GO 43320
// for i = 1 to 3 do
43273: LD_ADDR_VAR 0 3
43277: PUSH
43278: DOUBLE
43279: LD_INT 1
43281: DEC
43282: ST_TO_ADDR
43283: LD_INT 3
43285: PUSH
43286: FOR_TO
43287: IFFALSE 43318
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43289: LD_VAR 0 1
43293: PPUSH
43294: CALL_OW 250
43298: PPUSH
43299: LD_VAR 0 1
43303: PPUSH
43304: CALL_OW 251
43308: PPUSH
43309: LD_INT 1
43311: PPUSH
43312: CALL_OW 453
43316: GO 43286
43318: POP
43319: POP
// end ;
43320: LD_VAR 0 2
43324: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43325: LD_INT 0
43327: PPUSH
43328: PPUSH
43329: PPUSH
43330: PPUSH
43331: PPUSH
43332: PPUSH
// if not unit or not enemy_unit then
43333: LD_VAR 0 1
43337: NOT
43338: PUSH
43339: LD_VAR 0 2
43343: NOT
43344: OR
43345: IFFALSE 43349
// exit ;
43347: GO 43816
// if GetLives ( i ) < 250 then
43349: LD_VAR 0 4
43353: PPUSH
43354: CALL_OW 256
43358: PUSH
43359: LD_INT 250
43361: LESS
43362: IFFALSE 43375
// begin ComAutodestruct ( i ) ;
43364: LD_VAR 0 4
43368: PPUSH
43369: CALL 43223 0 1
// exit ;
43373: GO 43816
// end ; x := GetX ( enemy_unit ) ;
43375: LD_ADDR_VAR 0 7
43379: PUSH
43380: LD_VAR 0 2
43384: PPUSH
43385: CALL_OW 250
43389: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43390: LD_ADDR_VAR 0 8
43394: PUSH
43395: LD_VAR 0 2
43399: PPUSH
43400: CALL_OW 251
43404: ST_TO_ADDR
// if not x or not y then
43405: LD_VAR 0 7
43409: NOT
43410: PUSH
43411: LD_VAR 0 8
43415: NOT
43416: OR
43417: IFFALSE 43421
// exit ;
43419: GO 43816
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43421: LD_ADDR_VAR 0 6
43425: PUSH
43426: LD_VAR 0 7
43430: PPUSH
43431: LD_INT 0
43433: PPUSH
43434: LD_INT 4
43436: PPUSH
43437: CALL_OW 272
43441: PUSH
43442: LD_VAR 0 8
43446: PPUSH
43447: LD_INT 0
43449: PPUSH
43450: LD_INT 4
43452: PPUSH
43453: CALL_OW 273
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_VAR 0 7
43466: PPUSH
43467: LD_INT 1
43469: PPUSH
43470: LD_INT 4
43472: PPUSH
43473: CALL_OW 272
43477: PUSH
43478: LD_VAR 0 8
43482: PPUSH
43483: LD_INT 1
43485: PPUSH
43486: LD_INT 4
43488: PPUSH
43489: CALL_OW 273
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_VAR 0 7
43502: PPUSH
43503: LD_INT 2
43505: PPUSH
43506: LD_INT 4
43508: PPUSH
43509: CALL_OW 272
43513: PUSH
43514: LD_VAR 0 8
43518: PPUSH
43519: LD_INT 2
43521: PPUSH
43522: LD_INT 4
43524: PPUSH
43525: CALL_OW 273
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_VAR 0 7
43538: PPUSH
43539: LD_INT 3
43541: PPUSH
43542: LD_INT 4
43544: PPUSH
43545: CALL_OW 272
43549: PUSH
43550: LD_VAR 0 8
43554: PPUSH
43555: LD_INT 3
43557: PPUSH
43558: LD_INT 4
43560: PPUSH
43561: CALL_OW 273
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_VAR 0 7
43574: PPUSH
43575: LD_INT 4
43577: PPUSH
43578: LD_INT 4
43580: PPUSH
43581: CALL_OW 272
43585: PUSH
43586: LD_VAR 0 8
43590: PPUSH
43591: LD_INT 4
43593: PPUSH
43594: LD_INT 4
43596: PPUSH
43597: CALL_OW 273
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_VAR 0 7
43610: PPUSH
43611: LD_INT 5
43613: PPUSH
43614: LD_INT 4
43616: PPUSH
43617: CALL_OW 272
43621: PUSH
43622: LD_VAR 0 8
43626: PPUSH
43627: LD_INT 5
43629: PPUSH
43630: LD_INT 4
43632: PPUSH
43633: CALL_OW 273
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: ST_TO_ADDR
// for i = tmp downto 1 do
43650: LD_ADDR_VAR 0 4
43654: PUSH
43655: DOUBLE
43656: LD_VAR 0 6
43660: INC
43661: ST_TO_ADDR
43662: LD_INT 1
43664: PUSH
43665: FOR_DOWNTO
43666: IFFALSE 43767
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43668: LD_VAR 0 6
43672: PUSH
43673: LD_VAR 0 4
43677: ARRAY
43678: PUSH
43679: LD_INT 1
43681: ARRAY
43682: PPUSH
43683: LD_VAR 0 6
43687: PUSH
43688: LD_VAR 0 4
43692: ARRAY
43693: PUSH
43694: LD_INT 2
43696: ARRAY
43697: PPUSH
43698: CALL_OW 488
43702: NOT
43703: PUSH
43704: LD_VAR 0 6
43708: PUSH
43709: LD_VAR 0 4
43713: ARRAY
43714: PUSH
43715: LD_INT 1
43717: ARRAY
43718: PPUSH
43719: LD_VAR 0 6
43723: PUSH
43724: LD_VAR 0 4
43728: ARRAY
43729: PUSH
43730: LD_INT 2
43732: ARRAY
43733: PPUSH
43734: CALL_OW 428
43738: PUSH
43739: LD_INT 0
43741: NONEQUAL
43742: OR
43743: IFFALSE 43765
// tmp := Delete ( tmp , i ) ;
43745: LD_ADDR_VAR 0 6
43749: PUSH
43750: LD_VAR 0 6
43754: PPUSH
43755: LD_VAR 0 4
43759: PPUSH
43760: CALL_OW 3
43764: ST_TO_ADDR
43765: GO 43665
43767: POP
43768: POP
// j := GetClosestHex ( unit , tmp ) ;
43769: LD_ADDR_VAR 0 5
43773: PUSH
43774: LD_VAR 0 1
43778: PPUSH
43779: LD_VAR 0 6
43783: PPUSH
43784: CALL 43071 0 2
43788: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43789: LD_VAR 0 1
43793: PPUSH
43794: LD_VAR 0 5
43798: PUSH
43799: LD_INT 1
43801: ARRAY
43802: PPUSH
43803: LD_VAR 0 5
43807: PUSH
43808: LD_INT 2
43810: ARRAY
43811: PPUSH
43812: CALL_OW 111
// end ;
43816: LD_VAR 0 3
43820: RET
// export function PrepareApemanSoldier ( ) ; begin
43821: LD_INT 0
43823: PPUSH
// uc_nation := 0 ;
43824: LD_ADDR_OWVAR 21
43828: PUSH
43829: LD_INT 0
43831: ST_TO_ADDR
// hc_sex := sex_male ;
43832: LD_ADDR_OWVAR 27
43836: PUSH
43837: LD_INT 1
43839: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
43840: LD_ADDR_OWVAR 28
43844: PUSH
43845: LD_INT 15
43847: ST_TO_ADDR
// hc_gallery :=  ;
43848: LD_ADDR_OWVAR 33
43852: PUSH
43853: LD_STRING 
43855: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43856: LD_ADDR_OWVAR 31
43860: PUSH
43861: LD_INT 0
43863: PPUSH
43864: LD_INT 3
43866: PPUSH
43867: CALL_OW 12
43871: PUSH
43872: LD_INT 0
43874: PPUSH
43875: LD_INT 3
43877: PPUSH
43878: CALL_OW 12
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: ST_TO_ADDR
// end ;
43895: LD_VAR 0 1
43899: RET
// export function PrepareApemanEngineer ( ) ; begin
43900: LD_INT 0
43902: PPUSH
// uc_nation := 0 ;
43903: LD_ADDR_OWVAR 21
43907: PUSH
43908: LD_INT 0
43910: ST_TO_ADDR
// hc_sex := sex_male ;
43911: LD_ADDR_OWVAR 27
43915: PUSH
43916: LD_INT 1
43918: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43919: LD_ADDR_OWVAR 28
43923: PUSH
43924: LD_INT 16
43926: ST_TO_ADDR
// hc_gallery :=  ;
43927: LD_ADDR_OWVAR 33
43931: PUSH
43932: LD_STRING 
43934: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43935: LD_ADDR_OWVAR 31
43939: PUSH
43940: LD_INT 0
43942: PPUSH
43943: LD_INT 3
43945: PPUSH
43946: CALL_OW 12
43950: PUSH
43951: LD_INT 0
43953: PPUSH
43954: LD_INT 3
43956: PPUSH
43957: CALL_OW 12
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: ST_TO_ADDR
// end ;
43974: LD_VAR 0 1
43978: RET
// export function PrepareApeman ( agressivity ) ; begin
43979: LD_INT 0
43981: PPUSH
// uc_side := 0 ;
43982: LD_ADDR_OWVAR 20
43986: PUSH
43987: LD_INT 0
43989: ST_TO_ADDR
// uc_nation := 0 ;
43990: LD_ADDR_OWVAR 21
43994: PUSH
43995: LD_INT 0
43997: ST_TO_ADDR
// hc_sex := sex_male ;
43998: LD_ADDR_OWVAR 27
44002: PUSH
44003: LD_INT 1
44005: ST_TO_ADDR
// hc_class := class_apeman ;
44006: LD_ADDR_OWVAR 28
44010: PUSH
44011: LD_INT 12
44013: ST_TO_ADDR
// hc_gallery :=  ;
44014: LD_ADDR_OWVAR 33
44018: PUSH
44019: LD_STRING 
44021: ST_TO_ADDR
// if agressivity = 0 then
44022: LD_VAR 0 1
44026: PUSH
44027: LD_INT 0
44029: EQUAL
44030: IFFALSE 44042
// hc_agressivity := 0 else
44032: LD_ADDR_OWVAR 35
44036: PUSH
44037: LD_INT 0
44039: ST_TO_ADDR
44040: GO 44063
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44042: LD_ADDR_OWVAR 35
44046: PUSH
44047: LD_VAR 0 1
44051: NEG
44052: PPUSH
44053: LD_VAR 0 1
44057: PPUSH
44058: CALL_OW 12
44062: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44063: LD_ADDR_OWVAR 31
44067: PUSH
44068: LD_INT 0
44070: PPUSH
44071: LD_INT 3
44073: PPUSH
44074: CALL_OW 12
44078: PUSH
44079: LD_INT 0
44081: PPUSH
44082: LD_INT 3
44084: PPUSH
44085: CALL_OW 12
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: ST_TO_ADDR
// end ;
44102: LD_VAR 0 2
44106: RET
// export function PrepareTiger ( agressivity ) ; begin
44107: LD_INT 0
44109: PPUSH
// uc_side := 0 ;
44110: LD_ADDR_OWVAR 20
44114: PUSH
44115: LD_INT 0
44117: ST_TO_ADDR
// uc_nation := 0 ;
44118: LD_ADDR_OWVAR 21
44122: PUSH
44123: LD_INT 0
44125: ST_TO_ADDR
// hc_class := class_tiger ;
44126: LD_ADDR_OWVAR 28
44130: PUSH
44131: LD_INT 14
44133: ST_TO_ADDR
// hc_gallery :=  ;
44134: LD_ADDR_OWVAR 33
44138: PUSH
44139: LD_STRING 
44141: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44142: LD_ADDR_OWVAR 35
44146: PUSH
44147: LD_VAR 0 1
44151: NEG
44152: PPUSH
44153: LD_VAR 0 1
44157: PPUSH
44158: CALL_OW 12
44162: ST_TO_ADDR
// end ;
44163: LD_VAR 0 2
44167: RET
// export function PrepareEnchidna ( ) ; begin
44168: LD_INT 0
44170: PPUSH
// uc_side := 0 ;
44171: LD_ADDR_OWVAR 20
44175: PUSH
44176: LD_INT 0
44178: ST_TO_ADDR
// uc_nation := 0 ;
44179: LD_ADDR_OWVAR 21
44183: PUSH
44184: LD_INT 0
44186: ST_TO_ADDR
// hc_class := class_baggie ;
44187: LD_ADDR_OWVAR 28
44191: PUSH
44192: LD_INT 13
44194: ST_TO_ADDR
// hc_gallery :=  ;
44195: LD_ADDR_OWVAR 33
44199: PUSH
44200: LD_STRING 
44202: ST_TO_ADDR
// end ;
44203: LD_VAR 0 1
44207: RET
// export function PrepareFrog ( ) ; begin
44208: LD_INT 0
44210: PPUSH
// uc_side := 0 ;
44211: LD_ADDR_OWVAR 20
44215: PUSH
44216: LD_INT 0
44218: ST_TO_ADDR
// uc_nation := 0 ;
44219: LD_ADDR_OWVAR 21
44223: PUSH
44224: LD_INT 0
44226: ST_TO_ADDR
// hc_class := class_frog ;
44227: LD_ADDR_OWVAR 28
44231: PUSH
44232: LD_INT 19
44234: ST_TO_ADDR
// hc_gallery :=  ;
44235: LD_ADDR_OWVAR 33
44239: PUSH
44240: LD_STRING 
44242: ST_TO_ADDR
// end ;
44243: LD_VAR 0 1
44247: RET
// export function PrepareFish ( ) ; begin
44248: LD_INT 0
44250: PPUSH
// uc_side := 0 ;
44251: LD_ADDR_OWVAR 20
44255: PUSH
44256: LD_INT 0
44258: ST_TO_ADDR
// uc_nation := 0 ;
44259: LD_ADDR_OWVAR 21
44263: PUSH
44264: LD_INT 0
44266: ST_TO_ADDR
// hc_class := class_fish ;
44267: LD_ADDR_OWVAR 28
44271: PUSH
44272: LD_INT 20
44274: ST_TO_ADDR
// hc_gallery :=  ;
44275: LD_ADDR_OWVAR 33
44279: PUSH
44280: LD_STRING 
44282: ST_TO_ADDR
// end ;
44283: LD_VAR 0 1
44287: RET
// export function PrepareBird ( ) ; begin
44288: LD_INT 0
44290: PPUSH
// uc_side := 0 ;
44291: LD_ADDR_OWVAR 20
44295: PUSH
44296: LD_INT 0
44298: ST_TO_ADDR
// uc_nation := 0 ;
44299: LD_ADDR_OWVAR 21
44303: PUSH
44304: LD_INT 0
44306: ST_TO_ADDR
// hc_class := class_phororhacos ;
44307: LD_ADDR_OWVAR 28
44311: PUSH
44312: LD_INT 18
44314: ST_TO_ADDR
// hc_gallery :=  ;
44315: LD_ADDR_OWVAR 33
44319: PUSH
44320: LD_STRING 
44322: ST_TO_ADDR
// end ;
44323: LD_VAR 0 1
44327: RET
// export function PrepareHorse ( ) ; begin
44328: LD_INT 0
44330: PPUSH
// uc_side := 0 ;
44331: LD_ADDR_OWVAR 20
44335: PUSH
44336: LD_INT 0
44338: ST_TO_ADDR
// uc_nation := 0 ;
44339: LD_ADDR_OWVAR 21
44343: PUSH
44344: LD_INT 0
44346: ST_TO_ADDR
// hc_class := class_horse ;
44347: LD_ADDR_OWVAR 28
44351: PUSH
44352: LD_INT 21
44354: ST_TO_ADDR
// hc_gallery :=  ;
44355: LD_ADDR_OWVAR 33
44359: PUSH
44360: LD_STRING 
44362: ST_TO_ADDR
// end ;
44363: LD_VAR 0 1
44367: RET
// export function PrepareMastodont ( ) ; begin
44368: LD_INT 0
44370: PPUSH
// uc_side := 0 ;
44371: LD_ADDR_OWVAR 20
44375: PUSH
44376: LD_INT 0
44378: ST_TO_ADDR
// uc_nation := 0 ;
44379: LD_ADDR_OWVAR 21
44383: PUSH
44384: LD_INT 0
44386: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44387: LD_ADDR_OWVAR 37
44391: PUSH
44392: LD_INT 31
44394: ST_TO_ADDR
// vc_control := control_rider ;
44395: LD_ADDR_OWVAR 38
44399: PUSH
44400: LD_INT 4
44402: ST_TO_ADDR
// end ;
44403: LD_VAR 0 1
44407: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44408: LD_INT 0
44410: PPUSH
44411: PPUSH
44412: PPUSH
// uc_side = 0 ;
44413: LD_ADDR_OWVAR 20
44417: PUSH
44418: LD_INT 0
44420: ST_TO_ADDR
// uc_nation = 0 ;
44421: LD_ADDR_OWVAR 21
44425: PUSH
44426: LD_INT 0
44428: ST_TO_ADDR
// InitHc_All ( ) ;
44429: CALL_OW 584
// InitVc ;
44433: CALL_OW 20
// if mastodonts then
44437: LD_VAR 0 6
44441: IFFALSE 44508
// for i = 1 to mastodonts do
44443: LD_ADDR_VAR 0 11
44447: PUSH
44448: DOUBLE
44449: LD_INT 1
44451: DEC
44452: ST_TO_ADDR
44453: LD_VAR 0 6
44457: PUSH
44458: FOR_TO
44459: IFFALSE 44506
// begin vc_chassis := 31 ;
44461: LD_ADDR_OWVAR 37
44465: PUSH
44466: LD_INT 31
44468: ST_TO_ADDR
// vc_control := control_rider ;
44469: LD_ADDR_OWVAR 38
44473: PUSH
44474: LD_INT 4
44476: ST_TO_ADDR
// animal := CreateVehicle ;
44477: LD_ADDR_VAR 0 12
44481: PUSH
44482: CALL_OW 45
44486: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44487: LD_VAR 0 12
44491: PPUSH
44492: LD_VAR 0 8
44496: PPUSH
44497: LD_INT 0
44499: PPUSH
44500: CALL 46636 0 3
// end ;
44504: GO 44458
44506: POP
44507: POP
// if horses then
44508: LD_VAR 0 5
44512: IFFALSE 44579
// for i = 1 to horses do
44514: LD_ADDR_VAR 0 11
44518: PUSH
44519: DOUBLE
44520: LD_INT 1
44522: DEC
44523: ST_TO_ADDR
44524: LD_VAR 0 5
44528: PUSH
44529: FOR_TO
44530: IFFALSE 44577
// begin hc_class := 21 ;
44532: LD_ADDR_OWVAR 28
44536: PUSH
44537: LD_INT 21
44539: ST_TO_ADDR
// hc_gallery :=  ;
44540: LD_ADDR_OWVAR 33
44544: PUSH
44545: LD_STRING 
44547: ST_TO_ADDR
// animal := CreateHuman ;
44548: LD_ADDR_VAR 0 12
44552: PUSH
44553: CALL_OW 44
44557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44558: LD_VAR 0 12
44562: PPUSH
44563: LD_VAR 0 8
44567: PPUSH
44568: LD_INT 0
44570: PPUSH
44571: CALL 46636 0 3
// end ;
44575: GO 44529
44577: POP
44578: POP
// if birds then
44579: LD_VAR 0 1
44583: IFFALSE 44650
// for i = 1 to birds do
44585: LD_ADDR_VAR 0 11
44589: PUSH
44590: DOUBLE
44591: LD_INT 1
44593: DEC
44594: ST_TO_ADDR
44595: LD_VAR 0 1
44599: PUSH
44600: FOR_TO
44601: IFFALSE 44648
// begin hc_class := 18 ;
44603: LD_ADDR_OWVAR 28
44607: PUSH
44608: LD_INT 18
44610: ST_TO_ADDR
// hc_gallery =  ;
44611: LD_ADDR_OWVAR 33
44615: PUSH
44616: LD_STRING 
44618: ST_TO_ADDR
// animal := CreateHuman ;
44619: LD_ADDR_VAR 0 12
44623: PUSH
44624: CALL_OW 44
44628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44629: LD_VAR 0 12
44633: PPUSH
44634: LD_VAR 0 8
44638: PPUSH
44639: LD_INT 0
44641: PPUSH
44642: CALL 46636 0 3
// end ;
44646: GO 44600
44648: POP
44649: POP
// if tigers then
44650: LD_VAR 0 2
44654: IFFALSE 44738
// for i = 1 to tigers do
44656: LD_ADDR_VAR 0 11
44660: PUSH
44661: DOUBLE
44662: LD_INT 1
44664: DEC
44665: ST_TO_ADDR
44666: LD_VAR 0 2
44670: PUSH
44671: FOR_TO
44672: IFFALSE 44736
// begin hc_class = class_tiger ;
44674: LD_ADDR_OWVAR 28
44678: PUSH
44679: LD_INT 14
44681: ST_TO_ADDR
// hc_gallery =  ;
44682: LD_ADDR_OWVAR 33
44686: PUSH
44687: LD_STRING 
44689: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44690: LD_ADDR_OWVAR 35
44694: PUSH
44695: LD_INT 7
44697: NEG
44698: PPUSH
44699: LD_INT 7
44701: PPUSH
44702: CALL_OW 12
44706: ST_TO_ADDR
// animal := CreateHuman ;
44707: LD_ADDR_VAR 0 12
44711: PUSH
44712: CALL_OW 44
44716: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44717: LD_VAR 0 12
44721: PPUSH
44722: LD_VAR 0 8
44726: PPUSH
44727: LD_INT 0
44729: PPUSH
44730: CALL 46636 0 3
// end ;
44734: GO 44671
44736: POP
44737: POP
// if apemans then
44738: LD_VAR 0 3
44742: IFFALSE 44865
// for i = 1 to apemans do
44744: LD_ADDR_VAR 0 11
44748: PUSH
44749: DOUBLE
44750: LD_INT 1
44752: DEC
44753: ST_TO_ADDR
44754: LD_VAR 0 3
44758: PUSH
44759: FOR_TO
44760: IFFALSE 44863
// begin hc_class = class_apeman ;
44762: LD_ADDR_OWVAR 28
44766: PUSH
44767: LD_INT 12
44769: ST_TO_ADDR
// hc_gallery =  ;
44770: LD_ADDR_OWVAR 33
44774: PUSH
44775: LD_STRING 
44777: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
44778: LD_ADDR_OWVAR 35
44782: PUSH
44783: LD_INT 2
44785: NEG
44786: PPUSH
44787: LD_INT 2
44789: PPUSH
44790: CALL_OW 12
44794: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44795: LD_ADDR_OWVAR 31
44799: PUSH
44800: LD_INT 1
44802: PPUSH
44803: LD_INT 3
44805: PPUSH
44806: CALL_OW 12
44810: PUSH
44811: LD_INT 1
44813: PPUSH
44814: LD_INT 3
44816: PPUSH
44817: CALL_OW 12
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: ST_TO_ADDR
// animal := CreateHuman ;
44834: LD_ADDR_VAR 0 12
44838: PUSH
44839: CALL_OW 44
44843: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44844: LD_VAR 0 12
44848: PPUSH
44849: LD_VAR 0 8
44853: PPUSH
44854: LD_INT 0
44856: PPUSH
44857: CALL 46636 0 3
// end ;
44861: GO 44759
44863: POP
44864: POP
// if enchidnas then
44865: LD_VAR 0 4
44869: IFFALSE 44936
// for i = 1 to enchidnas do
44871: LD_ADDR_VAR 0 11
44875: PUSH
44876: DOUBLE
44877: LD_INT 1
44879: DEC
44880: ST_TO_ADDR
44881: LD_VAR 0 4
44885: PUSH
44886: FOR_TO
44887: IFFALSE 44934
// begin hc_class = 13 ;
44889: LD_ADDR_OWVAR 28
44893: PUSH
44894: LD_INT 13
44896: ST_TO_ADDR
// hc_gallery =  ;
44897: LD_ADDR_OWVAR 33
44901: PUSH
44902: LD_STRING 
44904: ST_TO_ADDR
// animal := CreateHuman ;
44905: LD_ADDR_VAR 0 12
44909: PUSH
44910: CALL_OW 44
44914: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44915: LD_VAR 0 12
44919: PPUSH
44920: LD_VAR 0 8
44924: PPUSH
44925: LD_INT 0
44927: PPUSH
44928: CALL 46636 0 3
// end ;
44932: GO 44886
44934: POP
44935: POP
// if fishes then
44936: LD_VAR 0 7
44940: IFFALSE 45007
// for i = 1 to fishes do
44942: LD_ADDR_VAR 0 11
44946: PUSH
44947: DOUBLE
44948: LD_INT 1
44950: DEC
44951: ST_TO_ADDR
44952: LD_VAR 0 7
44956: PUSH
44957: FOR_TO
44958: IFFALSE 45005
// begin hc_class = 20 ;
44960: LD_ADDR_OWVAR 28
44964: PUSH
44965: LD_INT 20
44967: ST_TO_ADDR
// hc_gallery =  ;
44968: LD_ADDR_OWVAR 33
44972: PUSH
44973: LD_STRING 
44975: ST_TO_ADDR
// animal := CreateHuman ;
44976: LD_ADDR_VAR 0 12
44980: PUSH
44981: CALL_OW 44
44985: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44986: LD_VAR 0 12
44990: PPUSH
44991: LD_VAR 0 9
44995: PPUSH
44996: LD_INT 0
44998: PPUSH
44999: CALL 46636 0 3
// end ;
45003: GO 44957
45005: POP
45006: POP
// end ;
45007: LD_VAR 0 10
45011: RET
// export function WantHeal ( sci , unit ) ; begin
45012: LD_INT 0
45014: PPUSH
// if GetTaskList ( sci ) > 0 then
45015: LD_VAR 0 1
45019: PPUSH
45020: CALL_OW 437
45024: PUSH
45025: LD_INT 0
45027: GREATER
45028: IFFALSE 45098
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45030: LD_VAR 0 1
45034: PPUSH
45035: CALL_OW 437
45039: PUSH
45040: LD_INT 1
45042: ARRAY
45043: PUSH
45044: LD_INT 1
45046: ARRAY
45047: PUSH
45048: LD_STRING l
45050: EQUAL
45051: PUSH
45052: LD_VAR 0 1
45056: PPUSH
45057: CALL_OW 437
45061: PUSH
45062: LD_INT 1
45064: ARRAY
45065: PUSH
45066: LD_INT 4
45068: ARRAY
45069: PUSH
45070: LD_VAR 0 2
45074: EQUAL
45075: AND
45076: IFFALSE 45088
// result := true else
45078: LD_ADDR_VAR 0 3
45082: PUSH
45083: LD_INT 1
45085: ST_TO_ADDR
45086: GO 45096
// result := false ;
45088: LD_ADDR_VAR 0 3
45092: PUSH
45093: LD_INT 0
45095: ST_TO_ADDR
// end else
45096: GO 45106
// result := false ;
45098: LD_ADDR_VAR 0 3
45102: PUSH
45103: LD_INT 0
45105: ST_TO_ADDR
// end ;
45106: LD_VAR 0 3
45110: RET
// export function HealTarget ( sci ) ; begin
45111: LD_INT 0
45113: PPUSH
// if not sci then
45114: LD_VAR 0 1
45118: NOT
45119: IFFALSE 45123
// exit ;
45121: GO 45188
// result := 0 ;
45123: LD_ADDR_VAR 0 2
45127: PUSH
45128: LD_INT 0
45130: ST_TO_ADDR
// if GetTaskList ( sci ) then
45131: LD_VAR 0 1
45135: PPUSH
45136: CALL_OW 437
45140: IFFALSE 45188
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45142: LD_VAR 0 1
45146: PPUSH
45147: CALL_OW 437
45151: PUSH
45152: LD_INT 1
45154: ARRAY
45155: PUSH
45156: LD_INT 1
45158: ARRAY
45159: PUSH
45160: LD_STRING l
45162: EQUAL
45163: IFFALSE 45188
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45165: LD_ADDR_VAR 0 2
45169: PUSH
45170: LD_VAR 0 1
45174: PPUSH
45175: CALL_OW 437
45179: PUSH
45180: LD_INT 1
45182: ARRAY
45183: PUSH
45184: LD_INT 4
45186: ARRAY
45187: ST_TO_ADDR
// end ;
45188: LD_VAR 0 2
45192: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45193: LD_INT 0
45195: PPUSH
45196: PPUSH
45197: PPUSH
45198: PPUSH
// if not base_units then
45199: LD_VAR 0 1
45203: NOT
45204: IFFALSE 45208
// exit ;
45206: GO 45295
// result := false ;
45208: LD_ADDR_VAR 0 2
45212: PUSH
45213: LD_INT 0
45215: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45216: LD_ADDR_VAR 0 5
45220: PUSH
45221: LD_VAR 0 1
45225: PPUSH
45226: LD_INT 21
45228: PUSH
45229: LD_INT 3
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PPUSH
45236: CALL_OW 72
45240: ST_TO_ADDR
// if not tmp then
45241: LD_VAR 0 5
45245: NOT
45246: IFFALSE 45250
// exit ;
45248: GO 45295
// for i in tmp do
45250: LD_ADDR_VAR 0 3
45254: PUSH
45255: LD_VAR 0 5
45259: PUSH
45260: FOR_IN
45261: IFFALSE 45293
// begin result := EnemyInRange ( i , 22 ) ;
45263: LD_ADDR_VAR 0 2
45267: PUSH
45268: LD_VAR 0 3
45272: PPUSH
45273: LD_INT 22
45275: PPUSH
45276: CALL 42873 0 2
45280: ST_TO_ADDR
// if result then
45281: LD_VAR 0 2
45285: IFFALSE 45291
// exit ;
45287: POP
45288: POP
45289: GO 45295
// end ;
45291: GO 45260
45293: POP
45294: POP
// end ;
45295: LD_VAR 0 2
45299: RET
// export function FilterByTag ( units , tag ) ; begin
45300: LD_INT 0
45302: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45303: LD_ADDR_VAR 0 3
45307: PUSH
45308: LD_VAR 0 1
45312: PPUSH
45313: LD_INT 120
45315: PUSH
45316: LD_VAR 0 2
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PPUSH
45325: CALL_OW 72
45329: ST_TO_ADDR
// end ;
45330: LD_VAR 0 3
45334: RET
// export function IsDriver ( un ) ; begin
45335: LD_INT 0
45337: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45338: LD_ADDR_VAR 0 2
45342: PUSH
45343: LD_VAR 0 1
45347: PUSH
45348: LD_INT 55
45350: PUSH
45351: EMPTY
45352: LIST
45353: PPUSH
45354: CALL_OW 69
45358: IN
45359: ST_TO_ADDR
// end ;
45360: LD_VAR 0 2
45364: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45365: LD_INT 0
45367: PPUSH
45368: PPUSH
// list := [ ] ;
45369: LD_ADDR_VAR 0 5
45373: PUSH
45374: EMPTY
45375: ST_TO_ADDR
// case d of 0 :
45376: LD_VAR 0 3
45380: PUSH
45381: LD_INT 0
45383: DOUBLE
45384: EQUAL
45385: IFTRUE 45389
45387: GO 45522
45389: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45390: LD_ADDR_VAR 0 5
45394: PUSH
45395: LD_VAR 0 1
45399: PUSH
45400: LD_INT 4
45402: MINUS
45403: PUSH
45404: LD_VAR 0 2
45408: PUSH
45409: LD_INT 4
45411: MINUS
45412: PUSH
45413: LD_INT 2
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: PUSH
45421: LD_VAR 0 1
45425: PUSH
45426: LD_INT 3
45428: MINUS
45429: PUSH
45430: LD_VAR 0 2
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: LIST
45442: PUSH
45443: LD_VAR 0 1
45447: PUSH
45448: LD_INT 4
45450: PLUS
45451: PUSH
45452: LD_VAR 0 2
45456: PUSH
45457: LD_INT 4
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: LIST
45464: PUSH
45465: LD_VAR 0 1
45469: PUSH
45470: LD_INT 3
45472: PLUS
45473: PUSH
45474: LD_VAR 0 2
45478: PUSH
45479: LD_INT 3
45481: PLUS
45482: PUSH
45483: LD_INT 5
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: LIST
45490: PUSH
45491: LD_VAR 0 1
45495: PUSH
45496: LD_VAR 0 2
45500: PUSH
45501: LD_INT 4
45503: PLUS
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: LIST
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: ST_TO_ADDR
// end ; 1 :
45520: GO 46220
45522: LD_INT 1
45524: DOUBLE
45525: EQUAL
45526: IFTRUE 45530
45528: GO 45663
45530: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45531: LD_ADDR_VAR 0 5
45535: PUSH
45536: LD_VAR 0 1
45540: PUSH
45541: LD_VAR 0 2
45545: PUSH
45546: LD_INT 4
45548: MINUS
45549: PUSH
45550: LD_INT 3
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: LIST
45557: PUSH
45558: LD_VAR 0 1
45562: PUSH
45563: LD_INT 3
45565: MINUS
45566: PUSH
45567: LD_VAR 0 2
45571: PUSH
45572: LD_INT 3
45574: MINUS
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: LIST
45583: PUSH
45584: LD_VAR 0 1
45588: PUSH
45589: LD_INT 4
45591: MINUS
45592: PUSH
45593: LD_VAR 0 2
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: LIST
45605: PUSH
45606: LD_VAR 0 1
45610: PUSH
45611: LD_VAR 0 2
45615: PUSH
45616: LD_INT 3
45618: PLUS
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: LIST
45627: PUSH
45628: LD_VAR 0 1
45632: PUSH
45633: LD_INT 4
45635: PLUS
45636: PUSH
45637: LD_VAR 0 2
45641: PUSH
45642: LD_INT 4
45644: PLUS
45645: PUSH
45646: LD_INT 5
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: LIST
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: ST_TO_ADDR
// end ; 2 :
45661: GO 46220
45663: LD_INT 2
45665: DOUBLE
45666: EQUAL
45667: IFTRUE 45671
45669: GO 45800
45671: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45672: LD_ADDR_VAR 0 5
45676: PUSH
45677: LD_VAR 0 1
45681: PUSH
45682: LD_VAR 0 2
45686: PUSH
45687: LD_INT 3
45689: MINUS
45690: PUSH
45691: LD_INT 3
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: LIST
45698: PUSH
45699: LD_VAR 0 1
45703: PUSH
45704: LD_INT 4
45706: PLUS
45707: PUSH
45708: LD_VAR 0 2
45712: PUSH
45713: LD_INT 4
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: LIST
45720: PUSH
45721: LD_VAR 0 1
45725: PUSH
45726: LD_VAR 0 2
45730: PUSH
45731: LD_INT 4
45733: PLUS
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: LIST
45742: PUSH
45743: LD_VAR 0 1
45747: PUSH
45748: LD_INT 3
45750: MINUS
45751: PUSH
45752: LD_VAR 0 2
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: LIST
45764: PUSH
45765: LD_VAR 0 1
45769: PUSH
45770: LD_INT 4
45772: MINUS
45773: PUSH
45774: LD_VAR 0 2
45778: PUSH
45779: LD_INT 4
45781: MINUS
45782: PUSH
45783: LD_INT 2
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: LIST
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: ST_TO_ADDR
// end ; 3 :
45798: GO 46220
45800: LD_INT 3
45802: DOUBLE
45803: EQUAL
45804: IFTRUE 45808
45806: GO 45941
45808: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
45809: LD_ADDR_VAR 0 5
45813: PUSH
45814: LD_VAR 0 1
45818: PUSH
45819: LD_INT 3
45821: PLUS
45822: PUSH
45823: LD_VAR 0 2
45827: PUSH
45828: LD_INT 4
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: LIST
45835: PUSH
45836: LD_VAR 0 1
45840: PUSH
45841: LD_INT 4
45843: PLUS
45844: PUSH
45845: LD_VAR 0 2
45849: PUSH
45850: LD_INT 4
45852: PLUS
45853: PUSH
45854: LD_INT 5
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: LIST
45861: PUSH
45862: LD_VAR 0 1
45866: PUSH
45867: LD_INT 4
45869: MINUS
45870: PUSH
45871: LD_VAR 0 2
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: LIST
45883: PUSH
45884: LD_VAR 0 1
45888: PUSH
45889: LD_VAR 0 2
45893: PUSH
45894: LD_INT 4
45896: MINUS
45897: PUSH
45898: LD_INT 3
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: LIST
45905: PUSH
45906: LD_VAR 0 1
45910: PUSH
45911: LD_INT 3
45913: MINUS
45914: PUSH
45915: LD_VAR 0 2
45919: PUSH
45920: LD_INT 3
45922: MINUS
45923: PUSH
45924: LD_INT 2
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: LIST
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: ST_TO_ADDR
// end ; 4 :
45939: GO 46220
45941: LD_INT 4
45943: DOUBLE
45944: EQUAL
45945: IFTRUE 45949
45947: GO 46082
45949: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45950: LD_ADDR_VAR 0 5
45954: PUSH
45955: LD_VAR 0 1
45959: PUSH
45960: LD_VAR 0 2
45964: PUSH
45965: LD_INT 4
45967: PLUS
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: PUSH
45977: LD_VAR 0 1
45981: PUSH
45982: LD_INT 3
45984: PLUS
45985: PUSH
45986: LD_VAR 0 2
45990: PUSH
45991: LD_INT 3
45993: PLUS
45994: PUSH
45995: LD_INT 5
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: LIST
46002: PUSH
46003: LD_VAR 0 1
46007: PUSH
46008: LD_INT 4
46010: PLUS
46011: PUSH
46012: LD_VAR 0 2
46016: PUSH
46017: LD_INT 4
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: LIST
46024: PUSH
46025: LD_VAR 0 1
46029: PUSH
46030: LD_VAR 0 2
46034: PUSH
46035: LD_INT 3
46037: MINUS
46038: PUSH
46039: LD_INT 3
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: LIST
46046: PUSH
46047: LD_VAR 0 1
46051: PUSH
46052: LD_INT 4
46054: MINUS
46055: PUSH
46056: LD_VAR 0 2
46060: PUSH
46061: LD_INT 4
46063: MINUS
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: LIST
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: ST_TO_ADDR
// end ; 5 :
46080: GO 46220
46082: LD_INT 5
46084: DOUBLE
46085: EQUAL
46086: IFTRUE 46090
46088: GO 46219
46090: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46091: LD_ADDR_VAR 0 5
46095: PUSH
46096: LD_VAR 0 1
46100: PUSH
46101: LD_INT 4
46103: MINUS
46104: PUSH
46105: LD_VAR 0 2
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: LIST
46117: PUSH
46118: LD_VAR 0 1
46122: PUSH
46123: LD_VAR 0 2
46127: PUSH
46128: LD_INT 4
46130: MINUS
46131: PUSH
46132: LD_INT 3
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: LIST
46139: PUSH
46140: LD_VAR 0 1
46144: PUSH
46145: LD_INT 4
46147: PLUS
46148: PUSH
46149: LD_VAR 0 2
46153: PUSH
46154: LD_INT 4
46156: PLUS
46157: PUSH
46158: LD_INT 5
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: LIST
46165: PUSH
46166: LD_VAR 0 1
46170: PUSH
46171: LD_INT 3
46173: PLUS
46174: PUSH
46175: LD_VAR 0 2
46179: PUSH
46180: LD_INT 4
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: LIST
46187: PUSH
46188: LD_VAR 0 1
46192: PUSH
46193: LD_VAR 0 2
46197: PUSH
46198: LD_INT 3
46200: PLUS
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: LIST
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: ST_TO_ADDR
// end ; end ;
46217: GO 46220
46219: POP
// result := list ;
46220: LD_ADDR_VAR 0 4
46224: PUSH
46225: LD_VAR 0 5
46229: ST_TO_ADDR
// end ;
46230: LD_VAR 0 4
46234: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46235: LD_INT 0
46237: PPUSH
46238: PPUSH
46239: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46240: LD_VAR 0 1
46244: NOT
46245: PUSH
46246: LD_VAR 0 2
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: LD_INT 3
46259: PUSH
46260: LD_INT 4
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: IN
46269: NOT
46270: OR
46271: IFFALSE 46275
// exit ;
46273: GO 46358
// tmp := [ ] ;
46275: LD_ADDR_VAR 0 5
46279: PUSH
46280: EMPTY
46281: ST_TO_ADDR
// for i in units do
46282: LD_ADDR_VAR 0 4
46286: PUSH
46287: LD_VAR 0 1
46291: PUSH
46292: FOR_IN
46293: IFFALSE 46327
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46295: LD_ADDR_VAR 0 5
46299: PUSH
46300: LD_VAR 0 5
46304: PPUSH
46305: LD_VAR 0 4
46309: PPUSH
46310: LD_VAR 0 2
46314: PPUSH
46315: CALL_OW 259
46319: PPUSH
46320: CALL 47731 0 2
46324: ST_TO_ADDR
46325: GO 46292
46327: POP
46328: POP
// if not tmp then
46329: LD_VAR 0 5
46333: NOT
46334: IFFALSE 46338
// exit ;
46336: GO 46358
// result := SortListByListDesc ( units , tmp ) ;
46338: LD_ADDR_VAR 0 3
46342: PUSH
46343: LD_VAR 0 1
46347: PPUSH
46348: LD_VAR 0 5
46352: PPUSH
46353: CALL_OW 77
46357: ST_TO_ADDR
// end ;
46358: LD_VAR 0 3
46362: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46363: LD_INT 0
46365: PPUSH
46366: PPUSH
46367: PPUSH
// result := false ;
46368: LD_ADDR_VAR 0 3
46372: PUSH
46373: LD_INT 0
46375: ST_TO_ADDR
// if not building then
46376: LD_VAR 0 2
46380: NOT
46381: IFFALSE 46385
// exit ;
46383: GO 46523
// x := GetX ( building ) ;
46385: LD_ADDR_VAR 0 4
46389: PUSH
46390: LD_VAR 0 2
46394: PPUSH
46395: CALL_OW 250
46399: ST_TO_ADDR
// y := GetY ( building ) ;
46400: LD_ADDR_VAR 0 5
46404: PUSH
46405: LD_VAR 0 2
46409: PPUSH
46410: CALL_OW 251
46414: ST_TO_ADDR
// if not x or not y then
46415: LD_VAR 0 4
46419: NOT
46420: PUSH
46421: LD_VAR 0 5
46425: NOT
46426: OR
46427: IFFALSE 46431
// exit ;
46429: GO 46523
// if GetTaskList ( unit ) then
46431: LD_VAR 0 1
46435: PPUSH
46436: CALL_OW 437
46440: IFFALSE 46523
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46442: LD_STRING e
46444: PUSH
46445: LD_VAR 0 1
46449: PPUSH
46450: CALL_OW 437
46454: PUSH
46455: LD_INT 1
46457: ARRAY
46458: PUSH
46459: LD_INT 1
46461: ARRAY
46462: EQUAL
46463: PUSH
46464: LD_VAR 0 4
46468: PUSH
46469: LD_VAR 0 1
46473: PPUSH
46474: CALL_OW 437
46478: PUSH
46479: LD_INT 1
46481: ARRAY
46482: PUSH
46483: LD_INT 2
46485: ARRAY
46486: EQUAL
46487: AND
46488: PUSH
46489: LD_VAR 0 5
46493: PUSH
46494: LD_VAR 0 1
46498: PPUSH
46499: CALL_OW 437
46503: PUSH
46504: LD_INT 1
46506: ARRAY
46507: PUSH
46508: LD_INT 3
46510: ARRAY
46511: EQUAL
46512: AND
46513: IFFALSE 46523
// result := true end ;
46515: LD_ADDR_VAR 0 3
46519: PUSH
46520: LD_INT 1
46522: ST_TO_ADDR
// end ;
46523: LD_VAR 0 3
46527: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46528: LD_INT 0
46530: PPUSH
// result := false ;
46531: LD_ADDR_VAR 0 4
46535: PUSH
46536: LD_INT 0
46538: ST_TO_ADDR
// if GetTaskList ( unit ) then
46539: LD_VAR 0 1
46543: PPUSH
46544: CALL_OW 437
46548: IFFALSE 46631
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46550: LD_STRING M
46552: PUSH
46553: LD_VAR 0 1
46557: PPUSH
46558: CALL_OW 437
46562: PUSH
46563: LD_INT 1
46565: ARRAY
46566: PUSH
46567: LD_INT 1
46569: ARRAY
46570: EQUAL
46571: PUSH
46572: LD_VAR 0 2
46576: PUSH
46577: LD_VAR 0 1
46581: PPUSH
46582: CALL_OW 437
46586: PUSH
46587: LD_INT 1
46589: ARRAY
46590: PUSH
46591: LD_INT 2
46593: ARRAY
46594: EQUAL
46595: AND
46596: PUSH
46597: LD_VAR 0 3
46601: PUSH
46602: LD_VAR 0 1
46606: PPUSH
46607: CALL_OW 437
46611: PUSH
46612: LD_INT 1
46614: ARRAY
46615: PUSH
46616: LD_INT 3
46618: ARRAY
46619: EQUAL
46620: AND
46621: IFFALSE 46631
// result := true ;
46623: LD_ADDR_VAR 0 4
46627: PUSH
46628: LD_INT 1
46630: ST_TO_ADDR
// end ; end ;
46631: LD_VAR 0 4
46635: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
46636: LD_INT 0
46638: PPUSH
46639: PPUSH
46640: PPUSH
46641: PPUSH
// if not unit or not area then
46642: LD_VAR 0 1
46646: NOT
46647: PUSH
46648: LD_VAR 0 2
46652: NOT
46653: OR
46654: IFFALSE 46658
// exit ;
46656: GO 46834
// tmp := AreaToList ( area , i ) ;
46658: LD_ADDR_VAR 0 6
46662: PUSH
46663: LD_VAR 0 2
46667: PPUSH
46668: LD_VAR 0 5
46672: PPUSH
46673: CALL_OW 517
46677: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46678: LD_ADDR_VAR 0 5
46682: PUSH
46683: DOUBLE
46684: LD_INT 1
46686: DEC
46687: ST_TO_ADDR
46688: LD_VAR 0 6
46692: PUSH
46693: LD_INT 1
46695: ARRAY
46696: PUSH
46697: FOR_TO
46698: IFFALSE 46832
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46700: LD_ADDR_VAR 0 7
46704: PUSH
46705: LD_VAR 0 6
46709: PUSH
46710: LD_INT 1
46712: ARRAY
46713: PUSH
46714: LD_VAR 0 5
46718: ARRAY
46719: PUSH
46720: LD_VAR 0 6
46724: PUSH
46725: LD_INT 2
46727: ARRAY
46728: PUSH
46729: LD_VAR 0 5
46733: ARRAY
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
46739: LD_INT 92
46741: PUSH
46742: LD_VAR 0 7
46746: PUSH
46747: LD_INT 1
46749: ARRAY
46750: PUSH
46751: LD_VAR 0 7
46755: PUSH
46756: LD_INT 2
46758: ARRAY
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: PPUSH
46769: CALL_OW 69
46773: PUSH
46774: LD_INT 0
46776: EQUAL
46777: IFFALSE 46830
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46779: LD_VAR 0 1
46783: PPUSH
46784: LD_VAR 0 7
46788: PUSH
46789: LD_INT 1
46791: ARRAY
46792: PPUSH
46793: LD_VAR 0 7
46797: PUSH
46798: LD_INT 2
46800: ARRAY
46801: PPUSH
46802: LD_VAR 0 3
46806: PPUSH
46807: CALL_OW 48
// result := IsPlaced ( unit ) ;
46811: LD_ADDR_VAR 0 4
46815: PUSH
46816: LD_VAR 0 1
46820: PPUSH
46821: CALL_OW 305
46825: ST_TO_ADDR
// exit ;
46826: POP
46827: POP
46828: GO 46834
// end ; end ;
46830: GO 46697
46832: POP
46833: POP
// end ;
46834: LD_VAR 0 4
46838: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
46839: LD_INT 0
46841: PPUSH
46842: PPUSH
46843: PPUSH
// if not side or side > 8 then
46844: LD_VAR 0 1
46848: NOT
46849: PUSH
46850: LD_VAR 0 1
46854: PUSH
46855: LD_INT 8
46857: GREATER
46858: OR
46859: IFFALSE 46863
// exit ;
46861: GO 47050
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46863: LD_ADDR_VAR 0 4
46867: PUSH
46868: LD_INT 22
46870: PUSH
46871: LD_VAR 0 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 21
46882: PUSH
46883: LD_INT 3
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PPUSH
46894: CALL_OW 69
46898: ST_TO_ADDR
// if not tmp then
46899: LD_VAR 0 4
46903: NOT
46904: IFFALSE 46908
// exit ;
46906: GO 47050
// enable_addtolog := true ;
46908: LD_ADDR_OWVAR 81
46912: PUSH
46913: LD_INT 1
46915: ST_TO_ADDR
// AddToLog ( [ ) ;
46916: LD_STRING [
46918: PPUSH
46919: CALL_OW 561
// for i in tmp do
46923: LD_ADDR_VAR 0 3
46927: PUSH
46928: LD_VAR 0 4
46932: PUSH
46933: FOR_IN
46934: IFFALSE 47041
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46936: LD_STRING [
46938: PUSH
46939: LD_VAR 0 3
46943: PPUSH
46944: CALL_OW 266
46948: STR
46949: PUSH
46950: LD_STRING , 
46952: STR
46953: PUSH
46954: LD_VAR 0 3
46958: PPUSH
46959: CALL_OW 250
46963: STR
46964: PUSH
46965: LD_STRING , 
46967: STR
46968: PUSH
46969: LD_VAR 0 3
46973: PPUSH
46974: CALL_OW 251
46978: STR
46979: PUSH
46980: LD_STRING , 
46982: STR
46983: PUSH
46984: LD_VAR 0 3
46988: PPUSH
46989: CALL_OW 254
46993: STR
46994: PUSH
46995: LD_STRING , 
46997: STR
46998: PUSH
46999: LD_VAR 0 3
47003: PPUSH
47004: LD_INT 1
47006: PPUSH
47007: CALL_OW 268
47011: STR
47012: PUSH
47013: LD_STRING , 
47015: STR
47016: PUSH
47017: LD_VAR 0 3
47021: PPUSH
47022: LD_INT 2
47024: PPUSH
47025: CALL_OW 268
47029: STR
47030: PUSH
47031: LD_STRING ],
47033: STR
47034: PPUSH
47035: CALL_OW 561
// end ;
47039: GO 46933
47041: POP
47042: POP
// AddToLog ( ]; ) ;
47043: LD_STRING ];
47045: PPUSH
47046: CALL_OW 561
// end ;
47050: LD_VAR 0 2
47054: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47055: LD_INT 0
47057: PPUSH
47058: PPUSH
47059: PPUSH
47060: PPUSH
47061: PPUSH
// if not area or not rate or not max then
47062: LD_VAR 0 1
47066: NOT
47067: PUSH
47068: LD_VAR 0 2
47072: NOT
47073: OR
47074: PUSH
47075: LD_VAR 0 4
47079: NOT
47080: OR
47081: IFFALSE 47085
// exit ;
47083: GO 47274
// while 1 do
47085: LD_INT 1
47087: IFFALSE 47274
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47089: LD_ADDR_VAR 0 9
47093: PUSH
47094: LD_VAR 0 1
47098: PPUSH
47099: LD_INT 1
47101: PPUSH
47102: CALL_OW 287
47106: PUSH
47107: LD_INT 10
47109: MUL
47110: ST_TO_ADDR
// r := rate / 10 ;
47111: LD_ADDR_VAR 0 7
47115: PUSH
47116: LD_VAR 0 2
47120: PUSH
47121: LD_INT 10
47123: DIVREAL
47124: ST_TO_ADDR
// time := 1 1$00 ;
47125: LD_ADDR_VAR 0 8
47129: PUSH
47130: LD_INT 2100
47132: ST_TO_ADDR
// if amount < min then
47133: LD_VAR 0 9
47137: PUSH
47138: LD_VAR 0 3
47142: LESS
47143: IFFALSE 47161
// r := r * 2 else
47145: LD_ADDR_VAR 0 7
47149: PUSH
47150: LD_VAR 0 7
47154: PUSH
47155: LD_INT 2
47157: MUL
47158: ST_TO_ADDR
47159: GO 47187
// if amount > max then
47161: LD_VAR 0 9
47165: PUSH
47166: LD_VAR 0 4
47170: GREATER
47171: IFFALSE 47187
// r := r / 2 ;
47173: LD_ADDR_VAR 0 7
47177: PUSH
47178: LD_VAR 0 7
47182: PUSH
47183: LD_INT 2
47185: DIVREAL
47186: ST_TO_ADDR
// time := time / r ;
47187: LD_ADDR_VAR 0 8
47191: PUSH
47192: LD_VAR 0 8
47196: PUSH
47197: LD_VAR 0 7
47201: DIVREAL
47202: ST_TO_ADDR
// if time < 0 then
47203: LD_VAR 0 8
47207: PUSH
47208: LD_INT 0
47210: LESS
47211: IFFALSE 47228
// time := time * - 1 ;
47213: LD_ADDR_VAR 0 8
47217: PUSH
47218: LD_VAR 0 8
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: MUL
47227: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47228: LD_VAR 0 8
47232: PUSH
47233: LD_INT 35
47235: PPUSH
47236: LD_INT 875
47238: PPUSH
47239: CALL_OW 12
47243: PLUS
47244: PPUSH
47245: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47249: LD_INT 1
47251: PPUSH
47252: LD_INT 5
47254: PPUSH
47255: CALL_OW 12
47259: PPUSH
47260: LD_VAR 0 1
47264: PPUSH
47265: LD_INT 1
47267: PPUSH
47268: CALL_OW 55
// end ;
47272: GO 47085
// end ;
47274: LD_VAR 0 5
47278: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47279: LD_INT 0
47281: PPUSH
47282: PPUSH
47283: PPUSH
47284: PPUSH
47285: PPUSH
47286: PPUSH
47287: PPUSH
47288: PPUSH
// if not turrets or not factories then
47289: LD_VAR 0 1
47293: NOT
47294: PUSH
47295: LD_VAR 0 2
47299: NOT
47300: OR
47301: IFFALSE 47305
// exit ;
47303: GO 47612
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47305: LD_ADDR_VAR 0 10
47309: PUSH
47310: LD_INT 5
47312: PUSH
47313: LD_INT 6
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: PUSH
47323: LD_INT 4
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 3
47332: PUSH
47333: LD_INT 5
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 24
47347: PUSH
47348: LD_INT 25
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 23
47357: PUSH
47358: LD_INT 27
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 42
47371: PUSH
47372: LD_INT 43
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 44
47381: PUSH
47382: LD_INT 46
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 45
47391: PUSH
47392: LD_INT 47
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: LIST
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: LIST
47408: ST_TO_ADDR
// result := [ ] ;
47409: LD_ADDR_VAR 0 3
47413: PUSH
47414: EMPTY
47415: ST_TO_ADDR
// for i in turrets do
47416: LD_ADDR_VAR 0 4
47420: PUSH
47421: LD_VAR 0 1
47425: PUSH
47426: FOR_IN
47427: IFFALSE 47610
// begin nat := GetNation ( i ) ;
47429: LD_ADDR_VAR 0 7
47433: PUSH
47434: LD_VAR 0 4
47438: PPUSH
47439: CALL_OW 248
47443: ST_TO_ADDR
// weapon := 0 ;
47444: LD_ADDR_VAR 0 8
47448: PUSH
47449: LD_INT 0
47451: ST_TO_ADDR
// if not nat then
47452: LD_VAR 0 7
47456: NOT
47457: IFFALSE 47461
// continue ;
47459: GO 47426
// for j in list [ nat ] do
47461: LD_ADDR_VAR 0 5
47465: PUSH
47466: LD_VAR 0 10
47470: PUSH
47471: LD_VAR 0 7
47475: ARRAY
47476: PUSH
47477: FOR_IN
47478: IFFALSE 47519
// if GetBWeapon ( i ) = j [ 1 ] then
47480: LD_VAR 0 4
47484: PPUSH
47485: CALL_OW 269
47489: PUSH
47490: LD_VAR 0 5
47494: PUSH
47495: LD_INT 1
47497: ARRAY
47498: EQUAL
47499: IFFALSE 47517
// begin weapon := j [ 2 ] ;
47501: LD_ADDR_VAR 0 8
47505: PUSH
47506: LD_VAR 0 5
47510: PUSH
47511: LD_INT 2
47513: ARRAY
47514: ST_TO_ADDR
// break ;
47515: GO 47519
// end ;
47517: GO 47477
47519: POP
47520: POP
// if not weapon then
47521: LD_VAR 0 8
47525: NOT
47526: IFFALSE 47530
// continue ;
47528: GO 47426
// for k in factories do
47530: LD_ADDR_VAR 0 6
47534: PUSH
47535: LD_VAR 0 2
47539: PUSH
47540: FOR_IN
47541: IFFALSE 47606
// begin weapons := AvailableWeaponList ( k ) ;
47543: LD_ADDR_VAR 0 9
47547: PUSH
47548: LD_VAR 0 6
47552: PPUSH
47553: CALL_OW 478
47557: ST_TO_ADDR
// if not weapons then
47558: LD_VAR 0 9
47562: NOT
47563: IFFALSE 47567
// continue ;
47565: GO 47540
// if weapon in weapons then
47567: LD_VAR 0 8
47571: PUSH
47572: LD_VAR 0 9
47576: IN
47577: IFFALSE 47604
// begin result := [ i , weapon ] ;
47579: LD_ADDR_VAR 0 3
47583: PUSH
47584: LD_VAR 0 4
47588: PUSH
47589: LD_VAR 0 8
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: ST_TO_ADDR
// exit ;
47598: POP
47599: POP
47600: POP
47601: POP
47602: GO 47612
// end ; end ;
47604: GO 47540
47606: POP
47607: POP
// end ;
47608: GO 47426
47610: POP
47611: POP
// end ;
47612: LD_VAR 0 3
47616: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
47617: LD_INT 0
47619: PPUSH
// if not side or side > 8 then
47620: LD_VAR 0 3
47624: NOT
47625: PUSH
47626: LD_VAR 0 3
47630: PUSH
47631: LD_INT 8
47633: GREATER
47634: OR
47635: IFFALSE 47639
// exit ;
47637: GO 47698
// if not range then
47639: LD_VAR 0 4
47643: NOT
47644: IFFALSE 47655
// range := - 12 ;
47646: LD_ADDR_VAR 0 4
47650: PUSH
47651: LD_INT 12
47653: NEG
47654: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47655: LD_VAR 0 1
47659: PPUSH
47660: LD_VAR 0 2
47664: PPUSH
47665: LD_VAR 0 3
47669: PPUSH
47670: LD_VAR 0 4
47674: PPUSH
47675: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47679: LD_VAR 0 1
47683: PPUSH
47684: LD_VAR 0 2
47688: PPUSH
47689: LD_VAR 0 3
47693: PPUSH
47694: CALL_OW 331
// end ;
47698: LD_VAR 0 5
47702: RET
// export function Video ( mode ) ; begin
47703: LD_INT 0
47705: PPUSH
// ingame_video = mode ;
47706: LD_ADDR_OWVAR 52
47710: PUSH
47711: LD_VAR 0 1
47715: ST_TO_ADDR
// interface_hidden = mode ;
47716: LD_ADDR_OWVAR 54
47720: PUSH
47721: LD_VAR 0 1
47725: ST_TO_ADDR
// end ;
47726: LD_VAR 0 2
47730: RET
// export function Join ( array , element ) ; begin
47731: LD_INT 0
47733: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47734: LD_ADDR_VAR 0 3
47738: PUSH
47739: LD_VAR 0 1
47743: PPUSH
47744: LD_VAR 0 1
47748: PUSH
47749: LD_INT 1
47751: PLUS
47752: PPUSH
47753: LD_VAR 0 2
47757: PPUSH
47758: CALL_OW 1
47762: ST_TO_ADDR
// end ;
47763: LD_VAR 0 3
47767: RET
// export function JoinUnion ( array , element ) ; begin
47768: LD_INT 0
47770: PPUSH
// result := array union element ;
47771: LD_ADDR_VAR 0 3
47775: PUSH
47776: LD_VAR 0 1
47780: PUSH
47781: LD_VAR 0 2
47785: UNION
47786: ST_TO_ADDR
// end ;
47787: LD_VAR 0 3
47791: RET
// export function GetBehemoths ( side ) ; begin
47792: LD_INT 0
47794: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
47795: LD_ADDR_VAR 0 2
47799: PUSH
47800: LD_INT 22
47802: PUSH
47803: LD_VAR 0 1
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 31
47814: PUSH
47815: LD_INT 25
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PPUSH
47826: CALL_OW 69
47830: ST_TO_ADDR
// end ;
47831: LD_VAR 0 2
47835: RET
// export function Shuffle ( array ) ; var i , index ; begin
47836: LD_INT 0
47838: PPUSH
47839: PPUSH
47840: PPUSH
// result := [ ] ;
47841: LD_ADDR_VAR 0 2
47845: PUSH
47846: EMPTY
47847: ST_TO_ADDR
// if not array then
47848: LD_VAR 0 1
47852: NOT
47853: IFFALSE 47857
// exit ;
47855: GO 47956
// Randomize ;
47857: CALL_OW 10
// for i = array downto 1 do
47861: LD_ADDR_VAR 0 3
47865: PUSH
47866: DOUBLE
47867: LD_VAR 0 1
47871: INC
47872: ST_TO_ADDR
47873: LD_INT 1
47875: PUSH
47876: FOR_DOWNTO
47877: IFFALSE 47954
// begin index := rand ( 1 , array ) ;
47879: LD_ADDR_VAR 0 4
47883: PUSH
47884: LD_INT 1
47886: PPUSH
47887: LD_VAR 0 1
47891: PPUSH
47892: CALL_OW 12
47896: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47897: LD_ADDR_VAR 0 2
47901: PUSH
47902: LD_VAR 0 2
47906: PPUSH
47907: LD_VAR 0 2
47911: PUSH
47912: LD_INT 1
47914: PLUS
47915: PPUSH
47916: LD_VAR 0 1
47920: PUSH
47921: LD_VAR 0 4
47925: ARRAY
47926: PPUSH
47927: CALL_OW 2
47931: ST_TO_ADDR
// array := Delete ( array , index ) ;
47932: LD_ADDR_VAR 0 1
47936: PUSH
47937: LD_VAR 0 1
47941: PPUSH
47942: LD_VAR 0 4
47946: PPUSH
47947: CALL_OW 3
47951: ST_TO_ADDR
// end ;
47952: GO 47876
47954: POP
47955: POP
// end ;
47956: LD_VAR 0 2
47960: RET
// export function GetBaseMaterials ( base ) ; begin
47961: LD_INT 0
47963: PPUSH
// result := [ 0 , 0 , 0 ] ;
47964: LD_ADDR_VAR 0 2
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: LIST
47982: ST_TO_ADDR
// if not base then
47983: LD_VAR 0 1
47987: NOT
47988: IFFALSE 47992
// exit ;
47990: GO 48041
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47992: LD_ADDR_VAR 0 2
47996: PUSH
47997: LD_VAR 0 1
48001: PPUSH
48002: LD_INT 1
48004: PPUSH
48005: CALL_OW 275
48009: PUSH
48010: LD_VAR 0 1
48014: PPUSH
48015: LD_INT 2
48017: PPUSH
48018: CALL_OW 275
48022: PUSH
48023: LD_VAR 0 1
48027: PPUSH
48028: LD_INT 3
48030: PPUSH
48031: CALL_OW 275
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: LIST
48040: ST_TO_ADDR
// end ;
48041: LD_VAR 0 2
48045: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48046: LD_INT 0
48048: PPUSH
48049: PPUSH
// result := array ;
48050: LD_ADDR_VAR 0 3
48054: PUSH
48055: LD_VAR 0 1
48059: ST_TO_ADDR
// if size >= result then
48060: LD_VAR 0 2
48064: PUSH
48065: LD_VAR 0 3
48069: GREATEREQUAL
48070: IFFALSE 48074
// exit ;
48072: GO 48124
// if size then
48074: LD_VAR 0 2
48078: IFFALSE 48124
// for i := array downto size do
48080: LD_ADDR_VAR 0 4
48084: PUSH
48085: DOUBLE
48086: LD_VAR 0 1
48090: INC
48091: ST_TO_ADDR
48092: LD_VAR 0 2
48096: PUSH
48097: FOR_DOWNTO
48098: IFFALSE 48122
// result := Delete ( result , result ) ;
48100: LD_ADDR_VAR 0 3
48104: PUSH
48105: LD_VAR 0 3
48109: PPUSH
48110: LD_VAR 0 3
48114: PPUSH
48115: CALL_OW 3
48119: ST_TO_ADDR
48120: GO 48097
48122: POP
48123: POP
// end ;
48124: LD_VAR 0 3
48128: RET
// export function ComExit ( unit ) ; var tmp ; begin
48129: LD_INT 0
48131: PPUSH
48132: PPUSH
// if not IsInUnit ( unit ) then
48133: LD_VAR 0 1
48137: PPUSH
48138: CALL_OW 310
48142: NOT
48143: IFFALSE 48147
// exit ;
48145: GO 48207
// tmp := IsInUnit ( unit ) ;
48147: LD_ADDR_VAR 0 3
48151: PUSH
48152: LD_VAR 0 1
48156: PPUSH
48157: CALL_OW 310
48161: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48162: LD_VAR 0 3
48166: PPUSH
48167: CALL_OW 247
48171: PUSH
48172: LD_INT 2
48174: EQUAL
48175: IFFALSE 48188
// ComExitVehicle ( unit ) else
48177: LD_VAR 0 1
48181: PPUSH
48182: CALL_OW 121
48186: GO 48197
// ComExitBuilding ( unit ) ;
48188: LD_VAR 0 1
48192: PPUSH
48193: CALL_OW 122
// result := tmp ;
48197: LD_ADDR_VAR 0 2
48201: PUSH
48202: LD_VAR 0 3
48206: ST_TO_ADDR
// end ;
48207: LD_VAR 0 2
48211: RET
// export function ComExitAll ( units ) ; var i ; begin
48212: LD_INT 0
48214: PPUSH
48215: PPUSH
// if not units then
48216: LD_VAR 0 1
48220: NOT
48221: IFFALSE 48225
// exit ;
48223: GO 48251
// for i in units do
48225: LD_ADDR_VAR 0 3
48229: PUSH
48230: LD_VAR 0 1
48234: PUSH
48235: FOR_IN
48236: IFFALSE 48249
// ComExit ( i ) ;
48238: LD_VAR 0 3
48242: PPUSH
48243: CALL 48129 0 1
48247: GO 48235
48249: POP
48250: POP
// end ;
48251: LD_VAR 0 2
48255: RET
// export function ResetHc ; begin
48256: LD_INT 0
48258: PPUSH
// InitHc ;
48259: CALL_OW 19
// hc_importance := 0 ;
48263: LD_ADDR_OWVAR 32
48267: PUSH
48268: LD_INT 0
48270: ST_TO_ADDR
// end ;
48271: LD_VAR 0 1
48275: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48276: LD_INT 0
48278: PPUSH
48279: PPUSH
48280: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48281: LD_ADDR_VAR 0 6
48285: PUSH
48286: LD_VAR 0 1
48290: PUSH
48291: LD_VAR 0 3
48295: PLUS
48296: PUSH
48297: LD_INT 2
48299: DIV
48300: ST_TO_ADDR
// if _x < 0 then
48301: LD_VAR 0 6
48305: PUSH
48306: LD_INT 0
48308: LESS
48309: IFFALSE 48326
// _x := _x * - 1 ;
48311: LD_ADDR_VAR 0 6
48315: PUSH
48316: LD_VAR 0 6
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: MUL
48325: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48326: LD_ADDR_VAR 0 7
48330: PUSH
48331: LD_VAR 0 2
48335: PUSH
48336: LD_VAR 0 4
48340: PLUS
48341: PUSH
48342: LD_INT 2
48344: DIV
48345: ST_TO_ADDR
// if _y < 0 then
48346: LD_VAR 0 7
48350: PUSH
48351: LD_INT 0
48353: LESS
48354: IFFALSE 48371
// _y := _y * - 1 ;
48356: LD_ADDR_VAR 0 7
48360: PUSH
48361: LD_VAR 0 7
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: MUL
48370: ST_TO_ADDR
// result := [ _x , _y ] ;
48371: LD_ADDR_VAR 0 5
48375: PUSH
48376: LD_VAR 0 6
48380: PUSH
48381: LD_VAR 0 7
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: ST_TO_ADDR
// end ;
48390: LD_VAR 0 5
48394: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48395: LD_INT 0
48397: PPUSH
48398: PPUSH
48399: PPUSH
48400: PPUSH
// task := GetTaskList ( unit ) ;
48401: LD_ADDR_VAR 0 7
48405: PUSH
48406: LD_VAR 0 1
48410: PPUSH
48411: CALL_OW 437
48415: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48416: LD_VAR 0 7
48420: NOT
48421: PUSH
48422: LD_VAR 0 1
48426: PPUSH
48427: LD_VAR 0 2
48431: PPUSH
48432: CALL_OW 308
48436: NOT
48437: AND
48438: IFFALSE 48442
// exit ;
48440: GO 48560
// if IsInArea ( unit , area ) then
48442: LD_VAR 0 1
48446: PPUSH
48447: LD_VAR 0 2
48451: PPUSH
48452: CALL_OW 308
48456: IFFALSE 48474
// begin ComMoveToArea ( unit , goAway ) ;
48458: LD_VAR 0 1
48462: PPUSH
48463: LD_VAR 0 3
48467: PPUSH
48468: CALL_OW 113
// exit ;
48472: GO 48560
// end ; if task [ 1 ] [ 1 ] <> M then
48474: LD_VAR 0 7
48478: PUSH
48479: LD_INT 1
48481: ARRAY
48482: PUSH
48483: LD_INT 1
48485: ARRAY
48486: PUSH
48487: LD_STRING M
48489: NONEQUAL
48490: IFFALSE 48494
// exit ;
48492: GO 48560
// x := task [ 1 ] [ 2 ] ;
48494: LD_ADDR_VAR 0 5
48498: PUSH
48499: LD_VAR 0 7
48503: PUSH
48504: LD_INT 1
48506: ARRAY
48507: PUSH
48508: LD_INT 2
48510: ARRAY
48511: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48512: LD_ADDR_VAR 0 6
48516: PUSH
48517: LD_VAR 0 7
48521: PUSH
48522: LD_INT 1
48524: ARRAY
48525: PUSH
48526: LD_INT 3
48528: ARRAY
48529: ST_TO_ADDR
// if InArea ( x , y , area ) then
48530: LD_VAR 0 5
48534: PPUSH
48535: LD_VAR 0 6
48539: PPUSH
48540: LD_VAR 0 2
48544: PPUSH
48545: CALL_OW 309
48549: IFFALSE 48560
// ComStop ( unit ) ;
48551: LD_VAR 0 1
48555: PPUSH
48556: CALL_OW 141
// end ;
48560: LD_VAR 0 4
48564: RET
// export function Abs ( value ) ; begin
48565: LD_INT 0
48567: PPUSH
// result := value ;
48568: LD_ADDR_VAR 0 2
48572: PUSH
48573: LD_VAR 0 1
48577: ST_TO_ADDR
// if value < 0 then
48578: LD_VAR 0 1
48582: PUSH
48583: LD_INT 0
48585: LESS
48586: IFFALSE 48603
// result := value * - 1 ;
48588: LD_ADDR_VAR 0 2
48592: PUSH
48593: LD_VAR 0 1
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: MUL
48602: ST_TO_ADDR
// end ;
48603: LD_VAR 0 2
48607: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
48608: LD_INT 0
48610: PPUSH
48611: PPUSH
48612: PPUSH
48613: PPUSH
48614: PPUSH
48615: PPUSH
48616: PPUSH
48617: PPUSH
// if not unit or not building then
48618: LD_VAR 0 1
48622: NOT
48623: PUSH
48624: LD_VAR 0 2
48628: NOT
48629: OR
48630: IFFALSE 48634
// exit ;
48632: GO 48860
// x := GetX ( building ) ;
48634: LD_ADDR_VAR 0 4
48638: PUSH
48639: LD_VAR 0 2
48643: PPUSH
48644: CALL_OW 250
48648: ST_TO_ADDR
// y := GetY ( building ) ;
48649: LD_ADDR_VAR 0 6
48653: PUSH
48654: LD_VAR 0 2
48658: PPUSH
48659: CALL_OW 251
48663: ST_TO_ADDR
// d := GetDir ( building ) ;
48664: LD_ADDR_VAR 0 8
48668: PUSH
48669: LD_VAR 0 2
48673: PPUSH
48674: CALL_OW 254
48678: ST_TO_ADDR
// r := 4 ;
48679: LD_ADDR_VAR 0 9
48683: PUSH
48684: LD_INT 4
48686: ST_TO_ADDR
// for i := 1 to 5 do
48687: LD_ADDR_VAR 0 10
48691: PUSH
48692: DOUBLE
48693: LD_INT 1
48695: DEC
48696: ST_TO_ADDR
48697: LD_INT 5
48699: PUSH
48700: FOR_TO
48701: IFFALSE 48858
// begin _x := ShiftX ( x , d , r + i ) ;
48703: LD_ADDR_VAR 0 5
48707: PUSH
48708: LD_VAR 0 4
48712: PPUSH
48713: LD_VAR 0 8
48717: PPUSH
48718: LD_VAR 0 9
48722: PUSH
48723: LD_VAR 0 10
48727: PLUS
48728: PPUSH
48729: CALL_OW 272
48733: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48734: LD_ADDR_VAR 0 7
48738: PUSH
48739: LD_VAR 0 6
48743: PPUSH
48744: LD_VAR 0 8
48748: PPUSH
48749: LD_VAR 0 9
48753: PUSH
48754: LD_VAR 0 10
48758: PLUS
48759: PPUSH
48760: CALL_OW 273
48764: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
48765: LD_VAR 0 5
48769: PPUSH
48770: LD_VAR 0 7
48774: PPUSH
48775: CALL_OW 488
48779: PUSH
48780: LD_VAR 0 5
48784: PPUSH
48785: LD_VAR 0 7
48789: PPUSH
48790: CALL_OW 428
48794: PPUSH
48795: CALL_OW 247
48799: PUSH
48800: LD_INT 3
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: IN
48810: NOT
48811: AND
48812: IFFALSE 48856
// begin ComMoveXY ( unit , _x , _y ) ;
48814: LD_VAR 0 1
48818: PPUSH
48819: LD_VAR 0 5
48823: PPUSH
48824: LD_VAR 0 7
48828: PPUSH
48829: CALL_OW 111
// result := [ _x , _y ] ;
48833: LD_ADDR_VAR 0 3
48837: PUSH
48838: LD_VAR 0 5
48842: PUSH
48843: LD_VAR 0 7
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: ST_TO_ADDR
// exit ;
48852: POP
48853: POP
48854: GO 48860
// end ; end ;
48856: GO 48700
48858: POP
48859: POP
// end ;
48860: LD_VAR 0 3
48864: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
48865: LD_INT 0
48867: PPUSH
48868: PPUSH
48869: PPUSH
// result := 0 ;
48870: LD_ADDR_VAR 0 3
48874: PUSH
48875: LD_INT 0
48877: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
48878: LD_VAR 0 1
48882: PUSH
48883: LD_INT 0
48885: LESS
48886: PUSH
48887: LD_VAR 0 1
48891: PUSH
48892: LD_INT 8
48894: GREATER
48895: OR
48896: PUSH
48897: LD_VAR 0 2
48901: PUSH
48902: LD_INT 0
48904: LESS
48905: OR
48906: PUSH
48907: LD_VAR 0 2
48911: PUSH
48912: LD_INT 8
48914: GREATER
48915: OR
48916: IFFALSE 48920
// exit ;
48918: GO 48995
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48920: LD_ADDR_VAR 0 4
48924: PUSH
48925: LD_INT 22
48927: PUSH
48928: LD_VAR 0 2
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PPUSH
48937: CALL_OW 69
48941: PUSH
48942: FOR_IN
48943: IFFALSE 48993
// begin un := UnitShoot ( i ) ;
48945: LD_ADDR_VAR 0 5
48949: PUSH
48950: LD_VAR 0 4
48954: PPUSH
48955: CALL_OW 504
48959: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48960: LD_VAR 0 5
48964: PPUSH
48965: CALL_OW 255
48969: PUSH
48970: LD_VAR 0 1
48974: EQUAL
48975: IFFALSE 48991
// begin result := un ;
48977: LD_ADDR_VAR 0 3
48981: PUSH
48982: LD_VAR 0 5
48986: ST_TO_ADDR
// exit ;
48987: POP
48988: POP
48989: GO 48995
// end ; end ;
48991: GO 48942
48993: POP
48994: POP
// end ;
48995: LD_VAR 0 3
48999: RET
// export function GetCargoBay ( units ) ; begin
49000: LD_INT 0
49002: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49003: LD_ADDR_VAR 0 2
49007: PUSH
49008: LD_VAR 0 1
49012: PPUSH
49013: LD_INT 2
49015: PUSH
49016: LD_INT 34
49018: PUSH
49019: LD_INT 12
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 34
49028: PUSH
49029: LD_INT 51
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 34
49038: PUSH
49039: LD_INT 32
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 34
49048: PUSH
49049: LD_INT 89
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: PPUSH
49063: CALL_OW 72
49067: ST_TO_ADDR
// end ;
49068: LD_VAR 0 2
49072: RET
// export function Negate ( value ) ; begin
49073: LD_INT 0
49075: PPUSH
// result := not value ;
49076: LD_ADDR_VAR 0 2
49080: PUSH
49081: LD_VAR 0 1
49085: NOT
49086: ST_TO_ADDR
// end ;
49087: LD_VAR 0 2
49091: RET
// export function Inc ( value ) ; begin
49092: LD_INT 0
49094: PPUSH
// result := value + 1 ;
49095: LD_ADDR_VAR 0 2
49099: PUSH
49100: LD_VAR 0 1
49104: PUSH
49105: LD_INT 1
49107: PLUS
49108: ST_TO_ADDR
// end ;
49109: LD_VAR 0 2
49113: RET
// export function Dec ( value ) ; begin
49114: LD_INT 0
49116: PPUSH
// result := value - 1 ;
49117: LD_ADDR_VAR 0 2
49121: PUSH
49122: LD_VAR 0 1
49126: PUSH
49127: LD_INT 1
49129: MINUS
49130: ST_TO_ADDR
// end ;
49131: LD_VAR 0 2
49135: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49136: LD_INT 0
49138: PPUSH
49139: PPUSH
49140: PPUSH
49141: PPUSH
49142: PPUSH
49143: PPUSH
49144: PPUSH
49145: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49146: LD_VAR 0 1
49150: PPUSH
49151: LD_VAR 0 2
49155: PPUSH
49156: CALL_OW 488
49160: NOT
49161: PUSH
49162: LD_VAR 0 3
49166: PPUSH
49167: LD_VAR 0 4
49171: PPUSH
49172: CALL_OW 488
49176: NOT
49177: OR
49178: IFFALSE 49191
// begin result := - 1 ;
49180: LD_ADDR_VAR 0 5
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: ST_TO_ADDR
// exit ;
49189: GO 49426
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49191: LD_ADDR_VAR 0 12
49195: PUSH
49196: LD_VAR 0 1
49200: PPUSH
49201: LD_VAR 0 2
49205: PPUSH
49206: LD_VAR 0 3
49210: PPUSH
49211: LD_VAR 0 4
49215: PPUSH
49216: CALL 48276 0 4
49220: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49221: LD_ADDR_VAR 0 11
49225: PUSH
49226: LD_VAR 0 1
49230: PPUSH
49231: LD_VAR 0 2
49235: PPUSH
49236: LD_VAR 0 12
49240: PUSH
49241: LD_INT 1
49243: ARRAY
49244: PPUSH
49245: LD_VAR 0 12
49249: PUSH
49250: LD_INT 2
49252: ARRAY
49253: PPUSH
49254: CALL_OW 298
49258: ST_TO_ADDR
// distance := 9999 ;
49259: LD_ADDR_VAR 0 10
49263: PUSH
49264: LD_INT 9999
49266: ST_TO_ADDR
// for i := 0 to 5 do
49267: LD_ADDR_VAR 0 6
49271: PUSH
49272: DOUBLE
49273: LD_INT 0
49275: DEC
49276: ST_TO_ADDR
49277: LD_INT 5
49279: PUSH
49280: FOR_TO
49281: IFFALSE 49424
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49283: LD_ADDR_VAR 0 7
49287: PUSH
49288: LD_VAR 0 1
49292: PPUSH
49293: LD_VAR 0 6
49297: PPUSH
49298: LD_VAR 0 11
49302: PPUSH
49303: CALL_OW 272
49307: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49308: LD_ADDR_VAR 0 8
49312: PUSH
49313: LD_VAR 0 2
49317: PPUSH
49318: LD_VAR 0 6
49322: PPUSH
49323: LD_VAR 0 11
49327: PPUSH
49328: CALL_OW 273
49332: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49333: LD_VAR 0 7
49337: PPUSH
49338: LD_VAR 0 8
49342: PPUSH
49343: CALL_OW 488
49347: NOT
49348: IFFALSE 49352
// continue ;
49350: GO 49280
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49352: LD_ADDR_VAR 0 9
49356: PUSH
49357: LD_VAR 0 12
49361: PUSH
49362: LD_INT 1
49364: ARRAY
49365: PPUSH
49366: LD_VAR 0 12
49370: PUSH
49371: LD_INT 2
49373: ARRAY
49374: PPUSH
49375: LD_VAR 0 7
49379: PPUSH
49380: LD_VAR 0 8
49384: PPUSH
49385: CALL_OW 298
49389: ST_TO_ADDR
// if tmp < distance then
49390: LD_VAR 0 9
49394: PUSH
49395: LD_VAR 0 10
49399: LESS
49400: IFFALSE 49422
// begin result := i ;
49402: LD_ADDR_VAR 0 5
49406: PUSH
49407: LD_VAR 0 6
49411: ST_TO_ADDR
// distance := tmp ;
49412: LD_ADDR_VAR 0 10
49416: PUSH
49417: LD_VAR 0 9
49421: ST_TO_ADDR
// end ; end ;
49422: GO 49280
49424: POP
49425: POP
// end ;
49426: LD_VAR 0 5
49430: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49431: LD_INT 0
49433: PPUSH
49434: PPUSH
// if not driver or not IsInUnit ( driver ) then
49435: LD_VAR 0 1
49439: NOT
49440: PUSH
49441: LD_VAR 0 1
49445: PPUSH
49446: CALL_OW 310
49450: NOT
49451: OR
49452: IFFALSE 49456
// exit ;
49454: GO 49546
// vehicle := IsInUnit ( driver ) ;
49456: LD_ADDR_VAR 0 3
49460: PUSH
49461: LD_VAR 0 1
49465: PPUSH
49466: CALL_OW 310
49470: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49471: LD_VAR 0 1
49475: PPUSH
49476: LD_STRING \
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: PUSH
49506: LD_STRING E
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_VAR 0 3
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PPUSH
49542: CALL_OW 446
// end ;
49546: LD_VAR 0 2
49550: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49551: LD_INT 0
49553: PPUSH
49554: PPUSH
// if not driver or not IsInUnit ( driver ) then
49555: LD_VAR 0 1
49559: NOT
49560: PUSH
49561: LD_VAR 0 1
49565: PPUSH
49566: CALL_OW 310
49570: NOT
49571: OR
49572: IFFALSE 49576
// exit ;
49574: GO 49666
// vehicle := IsInUnit ( driver ) ;
49576: LD_ADDR_VAR 0 3
49580: PUSH
49581: LD_VAR 0 1
49585: PPUSH
49586: CALL_OW 310
49590: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49591: LD_VAR 0 1
49595: PPUSH
49596: LD_STRING \
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: PUSH
49626: LD_STRING E
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_VAR 0 3
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PPUSH
49662: CALL_OW 447
// end ;
49666: LD_VAR 0 2
49670: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49671: LD_INT 0
49673: PPUSH
49674: PPUSH
49675: PPUSH
// tmp := [ ] ;
49676: LD_ADDR_VAR 0 5
49680: PUSH
49681: EMPTY
49682: ST_TO_ADDR
// for i in units do
49683: LD_ADDR_VAR 0 4
49687: PUSH
49688: LD_VAR 0 1
49692: PUSH
49693: FOR_IN
49694: IFFALSE 49732
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49696: LD_ADDR_VAR 0 5
49700: PUSH
49701: LD_VAR 0 5
49705: PPUSH
49706: LD_VAR 0 5
49710: PUSH
49711: LD_INT 1
49713: PLUS
49714: PPUSH
49715: LD_VAR 0 4
49719: PPUSH
49720: CALL_OW 256
49724: PPUSH
49725: CALL_OW 2
49729: ST_TO_ADDR
49730: GO 49693
49732: POP
49733: POP
// if not tmp then
49734: LD_VAR 0 5
49738: NOT
49739: IFFALSE 49743
// exit ;
49741: GO 49791
// if asc then
49743: LD_VAR 0 2
49747: IFFALSE 49771
// result := SortListByListAsc ( units , tmp ) else
49749: LD_ADDR_VAR 0 3
49753: PUSH
49754: LD_VAR 0 1
49758: PPUSH
49759: LD_VAR 0 5
49763: PPUSH
49764: CALL_OW 76
49768: ST_TO_ADDR
49769: GO 49791
// result := SortListByListDesc ( units , tmp ) ;
49771: LD_ADDR_VAR 0 3
49775: PUSH
49776: LD_VAR 0 1
49780: PPUSH
49781: LD_VAR 0 5
49785: PPUSH
49786: CALL_OW 77
49790: ST_TO_ADDR
// end ;
49791: LD_VAR 0 3
49795: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
49796: LD_INT 0
49798: PPUSH
49799: PPUSH
// task := GetTaskList ( mech ) ;
49800: LD_ADDR_VAR 0 4
49804: PUSH
49805: LD_VAR 0 1
49809: PPUSH
49810: CALL_OW 437
49814: ST_TO_ADDR
// if not task then
49815: LD_VAR 0 4
49819: NOT
49820: IFFALSE 49824
// exit ;
49822: GO 49866
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
49824: LD_ADDR_VAR 0 3
49828: PUSH
49829: LD_VAR 0 4
49833: PUSH
49834: LD_INT 1
49836: ARRAY
49837: PUSH
49838: LD_INT 1
49840: ARRAY
49841: PUSH
49842: LD_STRING r
49844: EQUAL
49845: PUSH
49846: LD_VAR 0 4
49850: PUSH
49851: LD_INT 1
49853: ARRAY
49854: PUSH
49855: LD_INT 4
49857: ARRAY
49858: PUSH
49859: LD_VAR 0 2
49863: EQUAL
49864: AND
49865: ST_TO_ADDR
// end ;
49866: LD_VAR 0 3
49870: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
49871: LD_INT 0
49873: PPUSH
// SetDir ( unit , d ) ;
49874: LD_VAR 0 1
49878: PPUSH
49879: LD_VAR 0 4
49883: PPUSH
49884: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
49888: LD_ADDR_VAR 0 6
49892: PUSH
49893: LD_VAR 0 1
49897: PPUSH
49898: LD_VAR 0 2
49902: PPUSH
49903: LD_VAR 0 3
49907: PPUSH
49908: LD_VAR 0 5
49912: PPUSH
49913: CALL_OW 48
49917: ST_TO_ADDR
// end ;
49918: LD_VAR 0 6
49922: RET
// export function ToNaturalNumber ( number ) ; begin
49923: LD_INT 0
49925: PPUSH
// result := number div 1 ;
49926: LD_ADDR_VAR 0 2
49930: PUSH
49931: LD_VAR 0 1
49935: PUSH
49936: LD_INT 1
49938: DIV
49939: ST_TO_ADDR
// if number < 0 then
49940: LD_VAR 0 1
49944: PUSH
49945: LD_INT 0
49947: LESS
49948: IFFALSE 49958
// result := 0 ;
49950: LD_ADDR_VAR 0 2
49954: PUSH
49955: LD_INT 0
49957: ST_TO_ADDR
// end ;
49958: LD_VAR 0 2
49962: RET
// export function SortByClass ( units , class ) ; var un ; begin
49963: LD_INT 0
49965: PPUSH
49966: PPUSH
// if not units or not class then
49967: LD_VAR 0 1
49971: NOT
49972: PUSH
49973: LD_VAR 0 2
49977: NOT
49978: OR
49979: IFFALSE 49983
// exit ;
49981: GO 50078
// result := [ ] ;
49983: LD_ADDR_VAR 0 3
49987: PUSH
49988: EMPTY
49989: ST_TO_ADDR
// for un in units do
49990: LD_ADDR_VAR 0 4
49994: PUSH
49995: LD_VAR 0 1
49999: PUSH
50000: FOR_IN
50001: IFFALSE 50076
// if GetClass ( un ) = class then
50003: LD_VAR 0 4
50007: PPUSH
50008: CALL_OW 257
50012: PUSH
50013: LD_VAR 0 2
50017: EQUAL
50018: IFFALSE 50045
// result := Insert ( result , 1 , un ) else
50020: LD_ADDR_VAR 0 3
50024: PUSH
50025: LD_VAR 0 3
50029: PPUSH
50030: LD_INT 1
50032: PPUSH
50033: LD_VAR 0 4
50037: PPUSH
50038: CALL_OW 2
50042: ST_TO_ADDR
50043: GO 50074
// result := Replace ( result , result + 1 , un ) ;
50045: LD_ADDR_VAR 0 3
50049: PUSH
50050: LD_VAR 0 3
50054: PPUSH
50055: LD_VAR 0 3
50059: PUSH
50060: LD_INT 1
50062: PLUS
50063: PPUSH
50064: LD_VAR 0 4
50068: PPUSH
50069: CALL_OW 1
50073: ST_TO_ADDR
50074: GO 50000
50076: POP
50077: POP
// end ;
50078: LD_VAR 0 3
50082: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50083: LD_INT 0
50085: PPUSH
50086: PPUSH
50087: PPUSH
50088: PPUSH
50089: PPUSH
50090: PPUSH
50091: PPUSH
// result := [ ] ;
50092: LD_ADDR_VAR 0 4
50096: PUSH
50097: EMPTY
50098: ST_TO_ADDR
// if x - r < 0 then
50099: LD_VAR 0 1
50103: PUSH
50104: LD_VAR 0 3
50108: MINUS
50109: PUSH
50110: LD_INT 0
50112: LESS
50113: IFFALSE 50125
// min_x := 0 else
50115: LD_ADDR_VAR 0 8
50119: PUSH
50120: LD_INT 0
50122: ST_TO_ADDR
50123: GO 50141
// min_x := x - r ;
50125: LD_ADDR_VAR 0 8
50129: PUSH
50130: LD_VAR 0 1
50134: PUSH
50135: LD_VAR 0 3
50139: MINUS
50140: ST_TO_ADDR
// if y - r < 0 then
50141: LD_VAR 0 2
50145: PUSH
50146: LD_VAR 0 3
50150: MINUS
50151: PUSH
50152: LD_INT 0
50154: LESS
50155: IFFALSE 50167
// min_y := 0 else
50157: LD_ADDR_VAR 0 7
50161: PUSH
50162: LD_INT 0
50164: ST_TO_ADDR
50165: GO 50183
// min_y := y - r ;
50167: LD_ADDR_VAR 0 7
50171: PUSH
50172: LD_VAR 0 2
50176: PUSH
50177: LD_VAR 0 3
50181: MINUS
50182: ST_TO_ADDR
// max_x := x + r ;
50183: LD_ADDR_VAR 0 9
50187: PUSH
50188: LD_VAR 0 1
50192: PUSH
50193: LD_VAR 0 3
50197: PLUS
50198: ST_TO_ADDR
// max_y := y + r ;
50199: LD_ADDR_VAR 0 10
50203: PUSH
50204: LD_VAR 0 2
50208: PUSH
50209: LD_VAR 0 3
50213: PLUS
50214: ST_TO_ADDR
// for _x = min_x to max_x do
50215: LD_ADDR_VAR 0 5
50219: PUSH
50220: DOUBLE
50221: LD_VAR 0 8
50225: DEC
50226: ST_TO_ADDR
50227: LD_VAR 0 9
50231: PUSH
50232: FOR_TO
50233: IFFALSE 50334
// for _y = min_y to max_y do
50235: LD_ADDR_VAR 0 6
50239: PUSH
50240: DOUBLE
50241: LD_VAR 0 7
50245: DEC
50246: ST_TO_ADDR
50247: LD_VAR 0 10
50251: PUSH
50252: FOR_TO
50253: IFFALSE 50330
// begin if not ValidHex ( _x , _y ) then
50255: LD_VAR 0 5
50259: PPUSH
50260: LD_VAR 0 6
50264: PPUSH
50265: CALL_OW 488
50269: NOT
50270: IFFALSE 50274
// continue ;
50272: GO 50252
// if GetResourceTypeXY ( _x , _y ) then
50274: LD_VAR 0 5
50278: PPUSH
50279: LD_VAR 0 6
50283: PPUSH
50284: CALL_OW 283
50288: IFFALSE 50328
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50290: LD_ADDR_VAR 0 4
50294: PUSH
50295: LD_VAR 0 4
50299: PPUSH
50300: LD_VAR 0 4
50304: PUSH
50305: LD_INT 1
50307: PLUS
50308: PPUSH
50309: LD_VAR 0 5
50313: PUSH
50314: LD_VAR 0 6
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PPUSH
50323: CALL_OW 1
50327: ST_TO_ADDR
// end ;
50328: GO 50252
50330: POP
50331: POP
50332: GO 50232
50334: POP
50335: POP
// end ;
50336: LD_VAR 0 4
50340: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50341: LD_INT 0
50343: PPUSH
50344: PPUSH
50345: PPUSH
50346: PPUSH
50347: PPUSH
50348: PPUSH
50349: PPUSH
50350: PPUSH
// if not units then
50351: LD_VAR 0 1
50355: NOT
50356: IFFALSE 50360
// exit ;
50358: GO 50888
// result := UnitFilter ( units , [ f_ok ] ) ;
50360: LD_ADDR_VAR 0 3
50364: PUSH
50365: LD_VAR 0 1
50369: PPUSH
50370: LD_INT 50
50372: PUSH
50373: EMPTY
50374: LIST
50375: PPUSH
50376: CALL_OW 72
50380: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50381: LD_ADDR_VAR 0 8
50385: PUSH
50386: LD_VAR 0 1
50390: PUSH
50391: LD_INT 1
50393: ARRAY
50394: PPUSH
50395: CALL_OW 255
50399: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50400: LD_ADDR_VAR 0 10
50404: PUSH
50405: LD_INT 29
50407: PUSH
50408: LD_INT 91
50410: PUSH
50411: LD_INT 49
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: LIST
50418: ST_TO_ADDR
// if not result then
50419: LD_VAR 0 3
50423: NOT
50424: IFFALSE 50428
// exit ;
50426: GO 50888
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
50428: LD_ADDR_VAR 0 5
50432: PUSH
50433: LD_INT 81
50435: PUSH
50436: LD_VAR 0 8
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PPUSH
50445: CALL_OW 69
50449: ST_TO_ADDR
// for i in result do
50450: LD_ADDR_VAR 0 4
50454: PUSH
50455: LD_VAR 0 3
50459: PUSH
50460: FOR_IN
50461: IFFALSE 50886
// begin tag := GetTag ( i ) + 1 ;
50463: LD_ADDR_VAR 0 9
50467: PUSH
50468: LD_VAR 0 4
50472: PPUSH
50473: CALL_OW 110
50477: PUSH
50478: LD_INT 1
50480: PLUS
50481: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
50482: LD_ADDR_VAR 0 7
50486: PUSH
50487: LD_VAR 0 4
50491: PPUSH
50492: CALL_OW 250
50496: PPUSH
50497: LD_VAR 0 4
50501: PPUSH
50502: CALL_OW 251
50506: PPUSH
50507: LD_INT 4
50509: PPUSH
50510: CALL 50083 0 3
50514: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
50515: LD_VAR 0 4
50519: PPUSH
50520: CALL_OW 247
50524: PUSH
50525: LD_INT 2
50527: EQUAL
50528: PUSH
50529: LD_VAR 0 7
50533: PUSH
50534: LD_INT 2
50536: GREATER
50537: AND
50538: PUSH
50539: LD_VAR 0 4
50543: PPUSH
50544: CALL_OW 264
50548: PUSH
50549: LD_VAR 0 10
50553: IN
50554: NOT
50555: AND
50556: IFFALSE 50595
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
50558: LD_VAR 0 4
50562: PPUSH
50563: LD_VAR 0 7
50567: PUSH
50568: LD_INT 1
50570: ARRAY
50571: PUSH
50572: LD_INT 1
50574: ARRAY
50575: PPUSH
50576: LD_VAR 0 7
50580: PUSH
50581: LD_INT 1
50583: ARRAY
50584: PUSH
50585: LD_INT 2
50587: ARRAY
50588: PPUSH
50589: CALL_OW 116
50593: GO 50884
// if path > tag then
50595: LD_VAR 0 2
50599: PUSH
50600: LD_VAR 0 9
50604: GREATER
50605: IFFALSE 50813
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
50607: LD_ADDR_VAR 0 6
50611: PUSH
50612: LD_VAR 0 5
50616: PPUSH
50617: LD_INT 91
50619: PUSH
50620: LD_VAR 0 4
50624: PUSH
50625: LD_INT 8
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: LIST
50632: PPUSH
50633: CALL_OW 72
50637: ST_TO_ADDR
// if nearEnemy then
50638: LD_VAR 0 6
50642: IFFALSE 50711
// begin if GetWeapon ( i ) = ru_time_lapser then
50644: LD_VAR 0 4
50648: PPUSH
50649: CALL_OW 264
50653: PUSH
50654: LD_INT 49
50656: EQUAL
50657: IFFALSE 50685
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
50659: LD_VAR 0 4
50663: PPUSH
50664: LD_VAR 0 6
50668: PPUSH
50669: LD_VAR 0 4
50673: PPUSH
50674: CALL_OW 74
50678: PPUSH
50679: CALL_OW 112
50683: GO 50709
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
50685: LD_VAR 0 4
50689: PPUSH
50690: LD_VAR 0 6
50694: PPUSH
50695: LD_VAR 0 4
50699: PPUSH
50700: CALL_OW 74
50704: PPUSH
50705: CALL 51959 0 2
// end else
50709: GO 50811
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
50711: LD_VAR 0 4
50715: PPUSH
50716: LD_VAR 0 2
50720: PUSH
50721: LD_VAR 0 9
50725: ARRAY
50726: PUSH
50727: LD_INT 1
50729: ARRAY
50730: PPUSH
50731: LD_VAR 0 2
50735: PUSH
50736: LD_VAR 0 9
50740: ARRAY
50741: PUSH
50742: LD_INT 2
50744: ARRAY
50745: PPUSH
50746: CALL_OW 297
50750: PUSH
50751: LD_INT 6
50753: GREATER
50754: IFFALSE 50797
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
50756: LD_VAR 0 4
50760: PPUSH
50761: LD_VAR 0 2
50765: PUSH
50766: LD_VAR 0 9
50770: ARRAY
50771: PUSH
50772: LD_INT 1
50774: ARRAY
50775: PPUSH
50776: LD_VAR 0 2
50780: PUSH
50781: LD_VAR 0 9
50785: ARRAY
50786: PUSH
50787: LD_INT 2
50789: ARRAY
50790: PPUSH
50791: CALL_OW 114
50795: GO 50811
// SetTag ( i , tag ) ;
50797: LD_VAR 0 4
50801: PPUSH
50802: LD_VAR 0 9
50806: PPUSH
50807: CALL_OW 109
// end else
50811: GO 50884
// if enemy then
50813: LD_VAR 0 5
50817: IFFALSE 50884
// begin if GetWeapon ( i ) = ru_time_lapser then
50819: LD_VAR 0 4
50823: PPUSH
50824: CALL_OW 264
50828: PUSH
50829: LD_INT 49
50831: EQUAL
50832: IFFALSE 50860
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
50834: LD_VAR 0 4
50838: PPUSH
50839: LD_VAR 0 5
50843: PPUSH
50844: LD_VAR 0 4
50848: PPUSH
50849: CALL_OW 74
50853: PPUSH
50854: CALL_OW 112
50858: GO 50884
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
50860: LD_VAR 0 4
50864: PPUSH
50865: LD_VAR 0 5
50869: PPUSH
50870: LD_VAR 0 4
50874: PPUSH
50875: CALL_OW 74
50879: PPUSH
50880: CALL 51959 0 2
// end ; end ;
50884: GO 50460
50886: POP
50887: POP
// end ;
50888: LD_VAR 0 3
50892: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50893: LD_INT 0
50895: PPUSH
50896: PPUSH
50897: PPUSH
// if not unit or IsInUnit ( unit ) then
50898: LD_VAR 0 1
50902: NOT
50903: PUSH
50904: LD_VAR 0 1
50908: PPUSH
50909: CALL_OW 310
50913: OR
50914: IFFALSE 50918
// exit ;
50916: GO 51009
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50918: LD_ADDR_VAR 0 4
50922: PUSH
50923: LD_VAR 0 1
50927: PPUSH
50928: CALL_OW 250
50932: PPUSH
50933: LD_VAR 0 2
50937: PPUSH
50938: LD_INT 1
50940: PPUSH
50941: CALL_OW 272
50945: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50946: LD_ADDR_VAR 0 5
50950: PUSH
50951: LD_VAR 0 1
50955: PPUSH
50956: CALL_OW 251
50960: PPUSH
50961: LD_VAR 0 2
50965: PPUSH
50966: LD_INT 1
50968: PPUSH
50969: CALL_OW 273
50973: ST_TO_ADDR
// if ValidHex ( x , y ) then
50974: LD_VAR 0 4
50978: PPUSH
50979: LD_VAR 0 5
50983: PPUSH
50984: CALL_OW 488
50988: IFFALSE 51009
// ComTurnXY ( unit , x , y ) ;
50990: LD_VAR 0 1
50994: PPUSH
50995: LD_VAR 0 4
50999: PPUSH
51000: LD_VAR 0 5
51004: PPUSH
51005: CALL_OW 118
// end ;
51009: LD_VAR 0 3
51013: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51014: LD_INT 0
51016: PPUSH
51017: PPUSH
// result := false ;
51018: LD_ADDR_VAR 0 3
51022: PUSH
51023: LD_INT 0
51025: ST_TO_ADDR
// if not units then
51026: LD_VAR 0 2
51030: NOT
51031: IFFALSE 51035
// exit ;
51033: GO 51080
// for i in units do
51035: LD_ADDR_VAR 0 4
51039: PUSH
51040: LD_VAR 0 2
51044: PUSH
51045: FOR_IN
51046: IFFALSE 51078
// if See ( side , i ) then
51048: LD_VAR 0 1
51052: PPUSH
51053: LD_VAR 0 4
51057: PPUSH
51058: CALL_OW 292
51062: IFFALSE 51076
// begin result := true ;
51064: LD_ADDR_VAR 0 3
51068: PUSH
51069: LD_INT 1
51071: ST_TO_ADDR
// exit ;
51072: POP
51073: POP
51074: GO 51080
// end ;
51076: GO 51045
51078: POP
51079: POP
// end ;
51080: LD_VAR 0 3
51084: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51085: LD_INT 0
51087: PPUSH
51088: PPUSH
51089: PPUSH
51090: PPUSH
// if not unit or not points then
51091: LD_VAR 0 1
51095: NOT
51096: PUSH
51097: LD_VAR 0 2
51101: NOT
51102: OR
51103: IFFALSE 51107
// exit ;
51105: GO 51197
// dist := 99999 ;
51107: LD_ADDR_VAR 0 5
51111: PUSH
51112: LD_INT 99999
51114: ST_TO_ADDR
// for i in points do
51115: LD_ADDR_VAR 0 4
51119: PUSH
51120: LD_VAR 0 2
51124: PUSH
51125: FOR_IN
51126: IFFALSE 51195
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51128: LD_ADDR_VAR 0 6
51132: PUSH
51133: LD_VAR 0 1
51137: PPUSH
51138: LD_VAR 0 4
51142: PUSH
51143: LD_INT 1
51145: ARRAY
51146: PPUSH
51147: LD_VAR 0 4
51151: PUSH
51152: LD_INT 2
51154: ARRAY
51155: PPUSH
51156: CALL_OW 297
51160: ST_TO_ADDR
// if tmpDist < dist then
51161: LD_VAR 0 6
51165: PUSH
51166: LD_VAR 0 5
51170: LESS
51171: IFFALSE 51193
// begin result := i ;
51173: LD_ADDR_VAR 0 3
51177: PUSH
51178: LD_VAR 0 4
51182: ST_TO_ADDR
// dist := tmpDist ;
51183: LD_ADDR_VAR 0 5
51187: PUSH
51188: LD_VAR 0 6
51192: ST_TO_ADDR
// end ; end ;
51193: GO 51125
51195: POP
51196: POP
// end ;
51197: LD_VAR 0 3
51201: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51202: LD_INT 0
51204: PPUSH
// uc_side := side ;
51205: LD_ADDR_OWVAR 20
51209: PUSH
51210: LD_VAR 0 1
51214: ST_TO_ADDR
// uc_nation := 3 ;
51215: LD_ADDR_OWVAR 21
51219: PUSH
51220: LD_INT 3
51222: ST_TO_ADDR
// vc_chassis := 25 ;
51223: LD_ADDR_OWVAR 37
51227: PUSH
51228: LD_INT 25
51230: ST_TO_ADDR
// vc_engine := engine_siberite ;
51231: LD_ADDR_OWVAR 39
51235: PUSH
51236: LD_INT 3
51238: ST_TO_ADDR
// vc_control := control_computer ;
51239: LD_ADDR_OWVAR 38
51243: PUSH
51244: LD_INT 3
51246: ST_TO_ADDR
// vc_weapon := 59 ;
51247: LD_ADDR_OWVAR 40
51251: PUSH
51252: LD_INT 59
51254: ST_TO_ADDR
// result := CreateVehicle ;
51255: LD_ADDR_VAR 0 5
51259: PUSH
51260: CALL_OW 45
51264: ST_TO_ADDR
// SetDir ( result , d ) ;
51265: LD_VAR 0 5
51269: PPUSH
51270: LD_VAR 0 4
51274: PPUSH
51275: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51279: LD_VAR 0 5
51283: PPUSH
51284: LD_VAR 0 2
51288: PPUSH
51289: LD_VAR 0 3
51293: PPUSH
51294: LD_INT 0
51296: PPUSH
51297: CALL_OW 48
// end ;
51301: LD_VAR 0 5
51305: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51306: LD_INT 0
51308: PPUSH
51309: PPUSH
51310: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51311: LD_ADDR_VAR 0 2
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51334: LD_VAR 0 1
51338: NOT
51339: PUSH
51340: LD_VAR 0 1
51344: PPUSH
51345: CALL_OW 264
51349: PUSH
51350: LD_INT 12
51352: PUSH
51353: LD_INT 51
51355: PUSH
51356: LD_INT 32
51358: PUSH
51359: LD_INT 89
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: IN
51368: NOT
51369: OR
51370: IFFALSE 51374
// exit ;
51372: GO 51472
// for i := 1 to 3 do
51374: LD_ADDR_VAR 0 3
51378: PUSH
51379: DOUBLE
51380: LD_INT 1
51382: DEC
51383: ST_TO_ADDR
51384: LD_INT 3
51386: PUSH
51387: FOR_TO
51388: IFFALSE 51470
// begin tmp := GetCargo ( cargo , i ) ;
51390: LD_ADDR_VAR 0 4
51394: PUSH
51395: LD_VAR 0 1
51399: PPUSH
51400: LD_VAR 0 3
51404: PPUSH
51405: CALL_OW 289
51409: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51410: LD_ADDR_VAR 0 2
51414: PUSH
51415: LD_VAR 0 2
51419: PPUSH
51420: LD_VAR 0 3
51424: PPUSH
51425: LD_VAR 0 4
51429: PPUSH
51430: CALL_OW 1
51434: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
51435: LD_ADDR_VAR 0 2
51439: PUSH
51440: LD_VAR 0 2
51444: PPUSH
51445: LD_INT 4
51447: PPUSH
51448: LD_VAR 0 2
51452: PUSH
51453: LD_INT 4
51455: ARRAY
51456: PUSH
51457: LD_VAR 0 4
51461: PLUS
51462: PPUSH
51463: CALL_OW 1
51467: ST_TO_ADDR
// end ;
51468: GO 51387
51470: POP
51471: POP
// end ;
51472: LD_VAR 0 2
51476: RET
// export function Length ( array ) ; begin
51477: LD_INT 0
51479: PPUSH
// result := array + 0 ;
51480: LD_ADDR_VAR 0 2
51484: PUSH
51485: LD_VAR 0 1
51489: PUSH
51490: LD_INT 0
51492: PLUS
51493: ST_TO_ADDR
// end ;
51494: LD_VAR 0 2
51498: RET
// export function PrepareArray ( array ) ; begin
51499: LD_INT 0
51501: PPUSH
// result := array diff 0 ;
51502: LD_ADDR_VAR 0 2
51506: PUSH
51507: LD_VAR 0 1
51511: PUSH
51512: LD_INT 0
51514: DIFF
51515: ST_TO_ADDR
// if not result [ 1 ] then
51516: LD_VAR 0 2
51520: PUSH
51521: LD_INT 1
51523: ARRAY
51524: NOT
51525: IFFALSE 51545
// result := Delete ( result , 1 ) ;
51527: LD_ADDR_VAR 0 2
51531: PUSH
51532: LD_VAR 0 2
51536: PPUSH
51537: LD_INT 1
51539: PPUSH
51540: CALL_OW 3
51544: ST_TO_ADDR
// end ;
51545: LD_VAR 0 2
51549: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
51550: LD_INT 0
51552: PPUSH
51553: PPUSH
51554: PPUSH
51555: PPUSH
// sibRocketRange := 25 ;
51556: LD_ADDR_VAR 0 6
51560: PUSH
51561: LD_INT 25
51563: ST_TO_ADDR
// result := false ;
51564: LD_ADDR_VAR 0 4
51568: PUSH
51569: LD_INT 0
51571: ST_TO_ADDR
// for i := 0 to 5 do
51572: LD_ADDR_VAR 0 5
51576: PUSH
51577: DOUBLE
51578: LD_INT 0
51580: DEC
51581: ST_TO_ADDR
51582: LD_INT 5
51584: PUSH
51585: FOR_TO
51586: IFFALSE 51653
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
51588: LD_VAR 0 1
51592: PPUSH
51593: LD_VAR 0 5
51597: PPUSH
51598: LD_VAR 0 6
51602: PPUSH
51603: CALL_OW 272
51607: PPUSH
51608: LD_VAR 0 2
51612: PPUSH
51613: LD_VAR 0 5
51617: PPUSH
51618: LD_VAR 0 6
51622: PPUSH
51623: CALL_OW 273
51627: PPUSH
51628: LD_VAR 0 3
51632: PPUSH
51633: CALL_OW 309
51637: IFFALSE 51651
// begin result := true ;
51639: LD_ADDR_VAR 0 4
51643: PUSH
51644: LD_INT 1
51646: ST_TO_ADDR
// exit ;
51647: POP
51648: POP
51649: GO 51655
// end ;
51651: GO 51585
51653: POP
51654: POP
// end ;
51655: LD_VAR 0 4
51659: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
51660: LD_INT 0
51662: PPUSH
51663: PPUSH
51664: PPUSH
// if btype = b_depot then
51665: LD_VAR 0 2
51669: PUSH
51670: LD_INT 0
51672: EQUAL
51673: IFFALSE 51685
// begin result := true ;
51675: LD_ADDR_VAR 0 3
51679: PUSH
51680: LD_INT 1
51682: ST_TO_ADDR
// exit ;
51683: GO 51801
// end ; pom := GetBase ( depot ) ;
51685: LD_ADDR_VAR 0 4
51689: PUSH
51690: LD_VAR 0 1
51694: PPUSH
51695: CALL_OW 274
51699: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51700: LD_ADDR_VAR 0 5
51704: PUSH
51705: LD_VAR 0 2
51709: PPUSH
51710: LD_VAR 0 1
51714: PPUSH
51715: CALL_OW 248
51719: PPUSH
51720: CALL_OW 450
51724: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
51725: LD_ADDR_VAR 0 3
51729: PUSH
51730: LD_VAR 0 4
51734: PPUSH
51735: LD_INT 1
51737: PPUSH
51738: CALL_OW 275
51742: PUSH
51743: LD_VAR 0 5
51747: PUSH
51748: LD_INT 1
51750: ARRAY
51751: GREATEREQUAL
51752: PUSH
51753: LD_VAR 0 4
51757: PPUSH
51758: LD_INT 2
51760: PPUSH
51761: CALL_OW 275
51765: PUSH
51766: LD_VAR 0 5
51770: PUSH
51771: LD_INT 2
51773: ARRAY
51774: GREATEREQUAL
51775: AND
51776: PUSH
51777: LD_VAR 0 4
51781: PPUSH
51782: LD_INT 3
51784: PPUSH
51785: CALL_OW 275
51789: PUSH
51790: LD_VAR 0 5
51794: PUSH
51795: LD_INT 3
51797: ARRAY
51798: GREATEREQUAL
51799: AND
51800: ST_TO_ADDR
// end ;
51801: LD_VAR 0 3
51805: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
51806: LD_INT 0
51808: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
51809: LD_VAR 0 1
51813: PPUSH
51814: LD_VAR 0 2
51818: PPUSH
51819: LD_INT 0
51821: PPUSH
51822: LD_INT 0
51824: PPUSH
51825: LD_INT 1
51827: PPUSH
51828: LD_INT 0
51830: PPUSH
51831: CALL_OW 587
// end ;
51835: LD_VAR 0 3
51839: RET
// export function CenterOnNow ( unit ) ; begin
51840: LD_INT 0
51842: PPUSH
// result := IsInUnit ( unit ) ;
51843: LD_ADDR_VAR 0 2
51847: PUSH
51848: LD_VAR 0 1
51852: PPUSH
51853: CALL_OW 310
51857: ST_TO_ADDR
// if not result then
51858: LD_VAR 0 2
51862: NOT
51863: IFFALSE 51875
// result := unit ;
51865: LD_ADDR_VAR 0 2
51869: PUSH
51870: LD_VAR 0 1
51874: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
51875: LD_VAR 0 1
51879: PPUSH
51880: CALL_OW 87
// end ;
51884: LD_VAR 0 2
51888: RET
// export function ComMoveHex ( unit , hex ) ; begin
51889: LD_INT 0
51891: PPUSH
// if not hex then
51892: LD_VAR 0 2
51896: NOT
51897: IFFALSE 51901
// exit ;
51899: GO 51954
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
51901: LD_VAR 0 2
51905: PUSH
51906: LD_INT 1
51908: ARRAY
51909: PPUSH
51910: LD_VAR 0 2
51914: PUSH
51915: LD_INT 2
51917: ARRAY
51918: PPUSH
51919: CALL_OW 428
51923: IFFALSE 51927
// exit ;
51925: GO 51954
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
51927: LD_VAR 0 1
51931: PPUSH
51932: LD_VAR 0 2
51936: PUSH
51937: LD_INT 1
51939: ARRAY
51940: PPUSH
51941: LD_VAR 0 2
51945: PUSH
51946: LD_INT 2
51948: ARRAY
51949: PPUSH
51950: CALL_OW 111
// end ;
51954: LD_VAR 0 3
51958: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
51959: LD_INT 0
51961: PPUSH
51962: PPUSH
51963: PPUSH
// if not unit or not enemy then
51964: LD_VAR 0 1
51968: NOT
51969: PUSH
51970: LD_VAR 0 2
51974: NOT
51975: OR
51976: IFFALSE 51980
// exit ;
51978: GO 52104
// x := GetX ( enemy ) ;
51980: LD_ADDR_VAR 0 4
51984: PUSH
51985: LD_VAR 0 2
51989: PPUSH
51990: CALL_OW 250
51994: ST_TO_ADDR
// y := GetY ( enemy ) ;
51995: LD_ADDR_VAR 0 5
51999: PUSH
52000: LD_VAR 0 2
52004: PPUSH
52005: CALL_OW 251
52009: ST_TO_ADDR
// if ValidHex ( x , y ) then
52010: LD_VAR 0 4
52014: PPUSH
52015: LD_VAR 0 5
52019: PPUSH
52020: CALL_OW 488
52024: IFFALSE 52104
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52026: LD_VAR 0 2
52030: PPUSH
52031: CALL_OW 247
52035: PUSH
52036: LD_INT 3
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: IN
52046: PUSH
52047: LD_VAR 0 1
52051: PPUSH
52052: CALL_OW 255
52056: PPUSH
52057: LD_VAR 0 2
52061: PPUSH
52062: CALL_OW 292
52066: OR
52067: IFFALSE 52085
// ComAttackUnit ( unit , enemy ) else
52069: LD_VAR 0 1
52073: PPUSH
52074: LD_VAR 0 2
52078: PPUSH
52079: CALL_OW 115
52083: GO 52104
// ComAgressiveMove ( unit , x , y ) ;
52085: LD_VAR 0 1
52089: PPUSH
52090: LD_VAR 0 4
52094: PPUSH
52095: LD_VAR 0 5
52099: PPUSH
52100: CALL_OW 114
// end ;
52104: LD_VAR 0 3
52108: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52109: LD_INT 0
52111: PPUSH
52112: PPUSH
52113: PPUSH
// list := AreaToList ( area , 0 ) ;
52114: LD_ADDR_VAR 0 5
52118: PUSH
52119: LD_VAR 0 1
52123: PPUSH
52124: LD_INT 0
52126: PPUSH
52127: CALL_OW 517
52131: ST_TO_ADDR
// if not list then
52132: LD_VAR 0 5
52136: NOT
52137: IFFALSE 52141
// exit ;
52139: GO 52271
// if all then
52141: LD_VAR 0 2
52145: IFFALSE 52233
// begin for i := 1 to list [ 1 ] do
52147: LD_ADDR_VAR 0 4
52151: PUSH
52152: DOUBLE
52153: LD_INT 1
52155: DEC
52156: ST_TO_ADDR
52157: LD_VAR 0 5
52161: PUSH
52162: LD_INT 1
52164: ARRAY
52165: PUSH
52166: FOR_TO
52167: IFFALSE 52229
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52169: LD_ADDR_VAR 0 3
52173: PUSH
52174: LD_VAR 0 3
52178: PPUSH
52179: LD_VAR 0 3
52183: PUSH
52184: LD_INT 1
52186: PLUS
52187: PPUSH
52188: LD_VAR 0 5
52192: PUSH
52193: LD_INT 1
52195: ARRAY
52196: PUSH
52197: LD_VAR 0 4
52201: ARRAY
52202: PUSH
52203: LD_VAR 0 5
52207: PUSH
52208: LD_INT 2
52210: ARRAY
52211: PUSH
52212: LD_VAR 0 4
52216: ARRAY
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PPUSH
52222: CALL_OW 1
52226: ST_TO_ADDR
52227: GO 52166
52229: POP
52230: POP
// exit ;
52231: GO 52271
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52233: LD_ADDR_VAR 0 3
52237: PUSH
52238: LD_VAR 0 5
52242: PUSH
52243: LD_INT 1
52245: ARRAY
52246: PUSH
52247: LD_INT 1
52249: ARRAY
52250: PUSH
52251: LD_VAR 0 5
52255: PUSH
52256: LD_INT 2
52258: ARRAY
52259: PUSH
52260: LD_INT 1
52262: ARRAY
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: EMPTY
52269: LIST
52270: ST_TO_ADDR
// end ;
52271: LD_VAR 0 3
52275: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52276: LD_INT 0
52278: PPUSH
52279: PPUSH
// list := AreaToList ( area , 0 ) ;
52280: LD_ADDR_VAR 0 4
52284: PUSH
52285: LD_VAR 0 1
52289: PPUSH
52290: LD_INT 0
52292: PPUSH
52293: CALL_OW 517
52297: ST_TO_ADDR
// if not list then
52298: LD_VAR 0 4
52302: NOT
52303: IFFALSE 52307
// exit ;
52305: GO 52348
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52307: LD_ADDR_VAR 0 3
52311: PUSH
52312: LD_VAR 0 4
52316: PUSH
52317: LD_INT 1
52319: ARRAY
52320: PUSH
52321: LD_INT 1
52323: ARRAY
52324: PUSH
52325: LD_VAR 0 4
52329: PUSH
52330: LD_INT 2
52332: ARRAY
52333: PUSH
52334: LD_INT 1
52336: ARRAY
52337: PUSH
52338: LD_VAR 0 2
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: LIST
52347: ST_TO_ADDR
// end ;
52348: LD_VAR 0 3
52352: RET
// export function First ( array ) ; begin
52353: LD_INT 0
52355: PPUSH
// if not array then
52356: LD_VAR 0 1
52360: NOT
52361: IFFALSE 52365
// exit ;
52363: GO 52379
// result := array [ 1 ] ;
52365: LD_ADDR_VAR 0 2
52369: PUSH
52370: LD_VAR 0 1
52374: PUSH
52375: LD_INT 1
52377: ARRAY
52378: ST_TO_ADDR
// end ;
52379: LD_VAR 0 2
52383: RET
// export function Last ( array ) ; begin
52384: LD_INT 0
52386: PPUSH
// if not array then
52387: LD_VAR 0 1
52391: NOT
52392: IFFALSE 52396
// exit ;
52394: GO 52412
// result := array [ array ] ;
52396: LD_ADDR_VAR 0 2
52400: PUSH
52401: LD_VAR 0 1
52405: PUSH
52406: LD_VAR 0 1
52410: ARRAY
52411: ST_TO_ADDR
// end ;
52412: LD_VAR 0 2
52416: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
52417: LD_INT 0
52419: PPUSH
52420: PPUSH
// result := [ ] ;
52421: LD_ADDR_VAR 0 5
52425: PUSH
52426: EMPTY
52427: ST_TO_ADDR
// if not array then
52428: LD_VAR 0 1
52432: NOT
52433: IFFALSE 52437
// exit ;
52435: GO 52549
// for i := 1 to array do
52437: LD_ADDR_VAR 0 6
52441: PUSH
52442: DOUBLE
52443: LD_INT 1
52445: DEC
52446: ST_TO_ADDR
52447: LD_VAR 0 1
52451: PUSH
52452: FOR_TO
52453: IFFALSE 52547
// if array [ i ] [ index ] = value then
52455: LD_VAR 0 1
52459: PUSH
52460: LD_VAR 0 6
52464: ARRAY
52465: PUSH
52466: LD_VAR 0 2
52470: ARRAY
52471: PUSH
52472: LD_VAR 0 3
52476: EQUAL
52477: IFFALSE 52545
// begin if indexColumn then
52479: LD_VAR 0 4
52483: IFFALSE 52519
// result := Join ( result , array [ i ] [ indexColumn ] ) else
52485: LD_ADDR_VAR 0 5
52489: PUSH
52490: LD_VAR 0 5
52494: PPUSH
52495: LD_VAR 0 1
52499: PUSH
52500: LD_VAR 0 6
52504: ARRAY
52505: PUSH
52506: LD_VAR 0 4
52510: ARRAY
52511: PPUSH
52512: CALL 47731 0 2
52516: ST_TO_ADDR
52517: GO 52545
// result := Join ( result , array [ i ] ) ;
52519: LD_ADDR_VAR 0 5
52523: PUSH
52524: LD_VAR 0 5
52528: PPUSH
52529: LD_VAR 0 1
52533: PUSH
52534: LD_VAR 0 6
52538: ARRAY
52539: PPUSH
52540: CALL 47731 0 2
52544: ST_TO_ADDR
// end ;
52545: GO 52452
52547: POP
52548: POP
// end ;
52549: LD_VAR 0 5
52553: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
52554: LD_INT 0
52556: PPUSH
// if not vehicles or not parkingPoint then
52557: LD_VAR 0 1
52561: NOT
52562: PUSH
52563: LD_VAR 0 2
52567: NOT
52568: OR
52569: IFFALSE 52573
// exit ;
52571: GO 52671
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
52573: LD_ADDR_VAR 0 1
52577: PUSH
52578: LD_VAR 0 1
52582: PPUSH
52583: LD_INT 50
52585: PUSH
52586: EMPTY
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: LD_INT 92
52594: PUSH
52595: LD_VAR 0 2
52599: PUSH
52600: LD_INT 1
52602: ARRAY
52603: PUSH
52604: LD_VAR 0 2
52608: PUSH
52609: LD_INT 2
52611: ARRAY
52612: PUSH
52613: LD_INT 8
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PPUSH
52630: CALL_OW 72
52634: ST_TO_ADDR
// if not vehicles then
52635: LD_VAR 0 1
52639: NOT
52640: IFFALSE 52644
// exit ;
52642: GO 52671
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
52644: LD_VAR 0 1
52648: PPUSH
52649: LD_VAR 0 2
52653: PUSH
52654: LD_INT 1
52656: ARRAY
52657: PPUSH
52658: LD_VAR 0 2
52662: PUSH
52663: LD_INT 2
52665: ARRAY
52666: PPUSH
52667: CALL_OW 111
// end ;
52671: LD_VAR 0 3
52675: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
52676: LD_INT 0
52678: PPUSH
52679: PPUSH
52680: PPUSH
// if not side or not area then
52681: LD_VAR 0 1
52685: NOT
52686: PUSH
52687: LD_VAR 0 2
52691: NOT
52692: OR
52693: IFFALSE 52697
// exit ;
52695: GO 52816
// tmp := AreaToList ( area , 0 ) ;
52697: LD_ADDR_VAR 0 5
52701: PUSH
52702: LD_VAR 0 2
52706: PPUSH
52707: LD_INT 0
52709: PPUSH
52710: CALL_OW 517
52714: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52715: LD_ADDR_VAR 0 4
52719: PUSH
52720: DOUBLE
52721: LD_INT 1
52723: DEC
52724: ST_TO_ADDR
52725: LD_VAR 0 5
52729: PUSH
52730: LD_INT 1
52732: ARRAY
52733: PUSH
52734: FOR_TO
52735: IFFALSE 52814
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
52737: LD_VAR 0 5
52741: PUSH
52742: LD_INT 1
52744: ARRAY
52745: PUSH
52746: LD_VAR 0 4
52750: ARRAY
52751: PPUSH
52752: LD_VAR 0 5
52756: PUSH
52757: LD_INT 2
52759: ARRAY
52760: PUSH
52761: LD_VAR 0 4
52765: ARRAY
52766: PPUSH
52767: CALL_OW 351
52771: IFFALSE 52812
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
52773: LD_VAR 0 5
52777: PUSH
52778: LD_INT 1
52780: ARRAY
52781: PUSH
52782: LD_VAR 0 4
52786: ARRAY
52787: PPUSH
52788: LD_VAR 0 5
52792: PUSH
52793: LD_INT 2
52795: ARRAY
52796: PUSH
52797: LD_VAR 0 4
52801: ARRAY
52802: PPUSH
52803: LD_VAR 0 1
52807: PPUSH
52808: CALL_OW 244
// end ;
52812: GO 52734
52814: POP
52815: POP
// end ; end_of_file
52816: LD_VAR 0 3
52820: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
52821: LD_VAR 0 1
52825: PUSH
52826: LD_INT 200
52828: DOUBLE
52829: GREATEREQUAL
52830: IFFALSE 52838
52832: LD_INT 299
52834: DOUBLE
52835: LESSEQUAL
52836: IFTRUE 52840
52838: GO 52872
52840: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
52841: LD_VAR 0 1
52845: PPUSH
52846: LD_VAR 0 2
52850: PPUSH
52851: LD_VAR 0 3
52855: PPUSH
52856: LD_VAR 0 4
52860: PPUSH
52861: LD_VAR 0 5
52865: PPUSH
52866: CALL 53649 0 5
52870: GO 52949
52872: LD_INT 300
52874: DOUBLE
52875: GREATEREQUAL
52876: IFFALSE 52884
52878: LD_INT 399
52880: DOUBLE
52881: LESSEQUAL
52882: IFTRUE 52886
52884: GO 52948
52886: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
52887: LD_VAR 0 1
52891: PPUSH
52892: LD_VAR 0 2
52896: PPUSH
52897: LD_VAR 0 3
52901: PPUSH
52902: LD_VAR 0 4
52906: PPUSH
52907: LD_VAR 0 5
52911: PPUSH
52912: LD_VAR 0 6
52916: PPUSH
52917: LD_VAR 0 7
52921: PPUSH
52922: LD_VAR 0 8
52926: PPUSH
52927: LD_VAR 0 9
52931: PPUSH
52932: LD_VAR 0 10
52936: PPUSH
52937: LD_VAR 0 11
52941: PPUSH
52942: CALL 60576 0 11
52946: GO 52949
52948: POP
// end ;
52949: PPOPN 11
52951: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
52952: LD_VAR 0 1
52956: PPUSH
52957: LD_VAR 0 2
52961: PPUSH
52962: LD_VAR 0 3
52966: PPUSH
52967: LD_VAR 0 4
52971: PPUSH
52972: LD_VAR 0 5
52976: PPUSH
52977: CALL 53034 0 5
// end ; end_of_file
52981: PPOPN 5
52983: END
// export function SOS_UnitDestroyed ( un ) ; begin
52984: LD_INT 0
52986: PPUSH
// ComRadiation ( un ) ;
52987: LD_VAR 0 1
52991: PPUSH
52992: CALL 54053 0 1
// end ;
52996: LD_VAR 0 2
53000: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53001: LD_INT 0
53003: PPUSH
// ComRadiation ( un ) ;
53004: LD_VAR 0 1
53008: PPUSH
53009: CALL 54053 0 1
// end ;
53013: LD_VAR 0 2
53017: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53018: LD_INT 0
53020: PPUSH
// end ;
53021: LD_VAR 0 4
53025: RET
// export function SOS_Command ( cmd ) ; begin
53026: LD_INT 0
53028: PPUSH
// end ;
53029: LD_VAR 0 2
53033: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53034: LD_INT 0
53036: PPUSH
// end ;
53037: LD_VAR 0 6
53041: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53042: LD_INT 0
53044: PPUSH
53045: PPUSH
53046: PPUSH
53047: PPUSH
// if not vehicle or not factory then
53048: LD_VAR 0 1
53052: NOT
53053: PUSH
53054: LD_VAR 0 2
53058: NOT
53059: OR
53060: IFFALSE 53064
// exit ;
53062: GO 53644
// if not factoryWaypoints then
53064: LD_EXP 59
53068: NOT
53069: IFFALSE 53073
// exit ;
53071: GO 53644
// for i := 1 to Count ( factoryWaypoints ) do
53073: LD_ADDR_VAR 0 4
53077: PUSH
53078: DOUBLE
53079: LD_INT 1
53081: DEC
53082: ST_TO_ADDR
53083: LD_EXP 59
53087: PPUSH
53088: CALL 12122 0 1
53092: PUSH
53093: FOR_TO
53094: IFFALSE 53642
// if factoryWaypoints [ i ] [ 2 ] = factory then
53096: LD_EXP 59
53100: PUSH
53101: LD_VAR 0 4
53105: ARRAY
53106: PUSH
53107: LD_INT 2
53109: ARRAY
53110: PUSH
53111: LD_VAR 0 2
53115: EQUAL
53116: IFFALSE 53640
// begin if GetControl ( vehicle ) = control_manual then
53118: LD_VAR 0 1
53122: PPUSH
53123: CALL_OW 263
53127: PUSH
53128: LD_INT 1
53130: EQUAL
53131: IFFALSE 53493
// begin driver := IsDrivenBy ( vehicle ) ;
53133: LD_ADDR_VAR 0 5
53137: PUSH
53138: LD_VAR 0 1
53142: PPUSH
53143: CALL_OW 311
53147: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
53148: LD_VAR 0 5
53152: PUSH
53153: LD_EXP 60
53157: IN
53158: PUSH
53159: LD_VAR 0 1
53163: PUSH
53164: LD_EXP 60
53168: IN
53169: OR
53170: IFFALSE 53176
// exit ;
53172: POP
53173: POP
53174: GO 53644
// if not HasTask ( driver ) then
53176: LD_VAR 0 5
53180: PPUSH
53181: CALL_OW 314
53185: NOT
53186: IFFALSE 53491
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
53188: LD_ADDR_EXP 60
53192: PUSH
53193: LD_EXP 60
53197: PPUSH
53198: LD_VAR 0 5
53202: PPUSH
53203: CALL 47731 0 2
53207: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
53208: LD_ADDR_EXP 60
53212: PUSH
53213: LD_EXP 60
53217: PPUSH
53218: LD_VAR 0 1
53222: PPUSH
53223: CALL 47731 0 2
53227: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53228: LD_ADDR_VAR 0 6
53232: PUSH
53233: LD_EXP 59
53237: PUSH
53238: LD_VAR 0 4
53242: ARRAY
53243: PUSH
53244: LD_INT 3
53246: ARRAY
53247: PPUSH
53248: LD_EXP 59
53252: PUSH
53253: LD_VAR 0 4
53257: ARRAY
53258: PUSH
53259: LD_INT 4
53261: ARRAY
53262: PPUSH
53263: CALL_OW 428
53267: ST_TO_ADDR
// if hex then
53268: LD_VAR 0 6
53272: IFFALSE 53290
// ComMoveUnit ( driver , hex ) else
53274: LD_VAR 0 5
53278: PPUSH
53279: LD_VAR 0 6
53283: PPUSH
53284: CALL_OW 112
53288: GO 53374
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
53290: LD_VAR 0 1
53294: PPUSH
53295: LD_EXP 59
53299: PUSH
53300: LD_VAR 0 4
53304: ARRAY
53305: PUSH
53306: LD_INT 3
53308: ARRAY
53309: PPUSH
53310: LD_EXP 59
53314: PUSH
53315: LD_VAR 0 4
53319: ARRAY
53320: PUSH
53321: LD_INT 4
53323: ARRAY
53324: PPUSH
53325: CALL_OW 297
53329: PUSH
53330: LD_INT 0
53332: GREATER
53333: IFFALSE 53374
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53335: LD_VAR 0 5
53339: PPUSH
53340: LD_EXP 59
53344: PUSH
53345: LD_VAR 0 4
53349: ARRAY
53350: PUSH
53351: LD_INT 3
53353: ARRAY
53354: PPUSH
53355: LD_EXP 59
53359: PUSH
53360: LD_VAR 0 4
53364: ARRAY
53365: PUSH
53366: LD_INT 4
53368: ARRAY
53369: PPUSH
53370: CALL_OW 111
// AddComExitVehicle ( driver ) ;
53374: LD_VAR 0 5
53378: PPUSH
53379: CALL_OW 181
// if Multiplayer then
53383: LD_OWVAR 4
53387: IFFALSE 53436
// begin repeat wait ( 10 ) ;
53389: LD_INT 10
53391: PPUSH
53392: CALL_OW 67
// until not IsInUnit ( driver ) ;
53396: LD_VAR 0 5
53400: PPUSH
53401: CALL_OW 310
53405: NOT
53406: IFFALSE 53389
// if not HasTask ( driver ) then
53408: LD_VAR 0 5
53412: PPUSH
53413: CALL_OW 314
53417: NOT
53418: IFFALSE 53434
// ComEnterUnit ( driver , factory ) ;
53420: LD_VAR 0 5
53424: PPUSH
53425: LD_VAR 0 2
53429: PPUSH
53430: CALL_OW 120
// end else
53434: GO 53450
// AddComEnterUnit ( driver , factory ) ;
53436: LD_VAR 0 5
53440: PPUSH
53441: LD_VAR 0 2
53445: PPUSH
53446: CALL_OW 180
// wait ( 0 0$1 ) ;
53450: LD_INT 35
53452: PPUSH
53453: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
53457: LD_ADDR_EXP 60
53461: PUSH
53462: LD_EXP 60
53466: PUSH
53467: LD_VAR 0 5
53471: DIFF
53472: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
53473: LD_ADDR_EXP 60
53477: PUSH
53478: LD_EXP 60
53482: PUSH
53483: LD_VAR 0 1
53487: DIFF
53488: ST_TO_ADDR
// break ;
53489: GO 53642
// end ; end else
53491: GO 53640
// if GetControl ( vehicle ) = control_remote then
53493: LD_VAR 0 1
53497: PPUSH
53498: CALL_OW 263
53502: PUSH
53503: LD_INT 2
53505: EQUAL
53506: IFFALSE 53592
// begin wait ( 0 0$2 ) ;
53508: LD_INT 70
53510: PPUSH
53511: CALL_OW 67
// repeat wait ( 10 ) ;
53515: LD_INT 10
53517: PPUSH
53518: CALL_OW 67
// Connect ( vehicle ) ;
53522: LD_VAR 0 1
53526: PPUSH
53527: CALL 18328 0 1
// until IsControledBy ( vehicle ) ;
53531: LD_VAR 0 1
53535: PPUSH
53536: CALL_OW 312
53540: IFFALSE 53515
// wait ( 10 ) ;
53542: LD_INT 10
53544: PPUSH
53545: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53549: LD_VAR 0 1
53553: PPUSH
53554: LD_EXP 59
53558: PUSH
53559: LD_VAR 0 4
53563: ARRAY
53564: PUSH
53565: LD_INT 3
53567: ARRAY
53568: PPUSH
53569: LD_EXP 59
53573: PUSH
53574: LD_VAR 0 4
53578: ARRAY
53579: PUSH
53580: LD_INT 4
53582: ARRAY
53583: PPUSH
53584: CALL_OW 111
// break ;
53588: GO 53642
// end else
53590: GO 53640
// begin wait ( 0 0$3 ) ;
53592: LD_INT 105
53594: PPUSH
53595: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53599: LD_VAR 0 1
53603: PPUSH
53604: LD_EXP 59
53608: PUSH
53609: LD_VAR 0 4
53613: ARRAY
53614: PUSH
53615: LD_INT 3
53617: ARRAY
53618: PPUSH
53619: LD_EXP 59
53623: PUSH
53624: LD_VAR 0 4
53628: ARRAY
53629: PUSH
53630: LD_INT 4
53632: ARRAY
53633: PPUSH
53634: CALL_OW 111
// break ;
53638: GO 53642
// end ; end ;
53640: GO 53093
53642: POP
53643: POP
// end ;
53644: LD_VAR 0 3
53648: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
53649: LD_INT 0
53651: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
53652: LD_VAR 0 1
53656: PUSH
53657: LD_INT 250
53659: EQUAL
53660: PUSH
53661: LD_VAR 0 2
53665: PPUSH
53666: CALL_OW 264
53670: PUSH
53671: LD_INT 81
53673: EQUAL
53674: AND
53675: IFFALSE 53696
// MinerPlaceMine ( unit , x , y ) ;
53677: LD_VAR 0 2
53681: PPUSH
53682: LD_VAR 0 4
53686: PPUSH
53687: LD_VAR 0 5
53691: PPUSH
53692: CALL 56788 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
53696: LD_VAR 0 1
53700: PUSH
53701: LD_INT 251
53703: EQUAL
53704: PUSH
53705: LD_VAR 0 2
53709: PPUSH
53710: CALL_OW 264
53714: PUSH
53715: LD_INT 81
53717: EQUAL
53718: AND
53719: IFFALSE 53740
// MinerDetonateMine ( unit , x , y ) ;
53721: LD_VAR 0 2
53725: PPUSH
53726: LD_VAR 0 4
53730: PPUSH
53731: LD_VAR 0 5
53735: PPUSH
53736: CALL 57063 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
53740: LD_VAR 0 1
53744: PUSH
53745: LD_INT 252
53747: EQUAL
53748: PUSH
53749: LD_VAR 0 2
53753: PPUSH
53754: CALL_OW 264
53758: PUSH
53759: LD_INT 81
53761: EQUAL
53762: AND
53763: IFFALSE 53784
// MinerCreateMinefield ( unit , x , y ) ;
53765: LD_VAR 0 2
53769: PPUSH
53770: LD_VAR 0 4
53774: PPUSH
53775: LD_VAR 0 5
53779: PPUSH
53780: CALL 57480 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
53784: LD_VAR 0 1
53788: PUSH
53789: LD_INT 253
53791: EQUAL
53792: PUSH
53793: LD_VAR 0 2
53797: PPUSH
53798: CALL_OW 257
53802: PUSH
53803: LD_INT 5
53805: EQUAL
53806: AND
53807: IFFALSE 53828
// ComBinocular ( unit , x , y ) ;
53809: LD_VAR 0 2
53813: PPUSH
53814: LD_VAR 0 4
53818: PPUSH
53819: LD_VAR 0 5
53823: PPUSH
53824: CALL 57849 0 3
// if selectedUnit then
53828: LD_VAR 0 3
53832: IFFALSE 53888
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
53834: LD_VAR 0 1
53838: PUSH
53839: LD_INT 254
53841: EQUAL
53842: PUSH
53843: LD_VAR 0 2
53847: PPUSH
53848: CALL_OW 264
53852: PUSH
53853: LD_INT 99
53855: EQUAL
53856: AND
53857: PUSH
53858: LD_VAR 0 3
53862: PPUSH
53863: CALL_OW 263
53867: PUSH
53868: LD_INT 3
53870: EQUAL
53871: AND
53872: IFFALSE 53888
// HackDestroyVehicle ( unit , selectedUnit ) ;
53874: LD_VAR 0 2
53878: PPUSH
53879: LD_VAR 0 3
53883: PPUSH
53884: CALL 56152 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
53888: LD_VAR 0 1
53892: PUSH
53893: LD_INT 255
53895: EQUAL
53896: PUSH
53897: LD_VAR 0 2
53901: PPUSH
53902: CALL_OW 264
53906: PUSH
53907: LD_INT 14
53909: PUSH
53910: LD_INT 53
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: IN
53917: AND
53918: PUSH
53919: LD_VAR 0 4
53923: PPUSH
53924: LD_VAR 0 5
53928: PPUSH
53929: CALL_OW 488
53933: AND
53934: IFFALSE 53958
// CutTreeXYR ( unit , x , y , 12 ) ;
53936: LD_VAR 0 2
53940: PPUSH
53941: LD_VAR 0 4
53945: PPUSH
53946: LD_VAR 0 5
53950: PPUSH
53951: LD_INT 12
53953: PPUSH
53954: CALL 54149 0 4
// if cmd = 256 then
53958: LD_VAR 0 1
53962: PUSH
53963: LD_INT 256
53965: EQUAL
53966: IFFALSE 53987
// SetFactoryWaypoint ( unit , x , y ) ;
53968: LD_VAR 0 2
53972: PPUSH
53973: LD_VAR 0 4
53977: PPUSH
53978: LD_VAR 0 5
53982: PPUSH
53983: CALL 60584 0 3
// if cmd = 257 then
53987: LD_VAR 0 1
53991: PUSH
53992: LD_INT 257
53994: EQUAL
53995: IFFALSE 54016
// SetWarehouseGatheringPoint ( unit , x , y ) ;
53997: LD_VAR 0 2
54001: PPUSH
54002: LD_VAR 0 4
54006: PPUSH
54007: LD_VAR 0 5
54011: PPUSH
54012: CALL 61074 0 3
// if cmd = 258 then
54016: LD_VAR 0 1
54020: PUSH
54021: LD_INT 258
54023: EQUAL
54024: IFFALSE 54048
// BurnTreeXYR ( unit , x , y , 8 ) ;
54026: LD_VAR 0 2
54030: PPUSH
54031: LD_VAR 0 4
54035: PPUSH
54036: LD_VAR 0 5
54040: PPUSH
54041: LD_INT 8
54043: PPUSH
54044: CALL 54543 0 4
// end ;
54048: LD_VAR 0 6
54052: RET
// export function ComRadiation ( un ) ; var eff ; begin
54053: LD_INT 0
54055: PPUSH
54056: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54057: LD_VAR 0 1
54061: PPUSH
54062: CALL_OW 264
54066: PUSH
54067: LD_INT 91
54069: NONEQUAL
54070: IFFALSE 54074
// exit ;
54072: GO 54144
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54074: LD_INT 68
54076: PPUSH
54077: LD_VAR 0 1
54081: PPUSH
54082: CALL_OW 255
54086: PPUSH
54087: CALL_OW 321
54091: PUSH
54092: LD_INT 2
54094: EQUAL
54095: IFFALSE 54107
// eff := 50 else
54097: LD_ADDR_VAR 0 3
54101: PUSH
54102: LD_INT 50
54104: ST_TO_ADDR
54105: GO 54115
// eff := 25 ;
54107: LD_ADDR_VAR 0 3
54111: PUSH
54112: LD_INT 25
54114: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54115: LD_VAR 0 1
54119: PPUSH
54120: CALL_OW 250
54124: PPUSH
54125: LD_VAR 0 1
54129: PPUSH
54130: CALL_OW 251
54134: PPUSH
54135: LD_VAR 0 3
54139: PPUSH
54140: CALL_OW 495
// end ;
54144: LD_VAR 0 2
54148: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54149: LD_INT 0
54151: PPUSH
54152: PPUSH
54153: PPUSH
54154: PPUSH
54155: PPUSH
54156: PPUSH
54157: PPUSH
54158: PPUSH
54159: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54160: LD_VAR 0 1
54164: PPUSH
54165: CALL_OW 302
54169: NOT
54170: PUSH
54171: LD_VAR 0 2
54175: PPUSH
54176: LD_VAR 0 3
54180: PPUSH
54181: CALL_OW 488
54185: NOT
54186: OR
54187: PUSH
54188: LD_VAR 0 4
54192: NOT
54193: OR
54194: IFFALSE 54198
// exit ;
54196: GO 54538
// list := [ ] ;
54198: LD_ADDR_VAR 0 13
54202: PUSH
54203: EMPTY
54204: ST_TO_ADDR
// if x - r < 0 then
54205: LD_VAR 0 2
54209: PUSH
54210: LD_VAR 0 4
54214: MINUS
54215: PUSH
54216: LD_INT 0
54218: LESS
54219: IFFALSE 54231
// min_x := 0 else
54221: LD_ADDR_VAR 0 7
54225: PUSH
54226: LD_INT 0
54228: ST_TO_ADDR
54229: GO 54247
// min_x := x - r ;
54231: LD_ADDR_VAR 0 7
54235: PUSH
54236: LD_VAR 0 2
54240: PUSH
54241: LD_VAR 0 4
54245: MINUS
54246: ST_TO_ADDR
// if y - r < 0 then
54247: LD_VAR 0 3
54251: PUSH
54252: LD_VAR 0 4
54256: MINUS
54257: PUSH
54258: LD_INT 0
54260: LESS
54261: IFFALSE 54273
// min_y := 0 else
54263: LD_ADDR_VAR 0 8
54267: PUSH
54268: LD_INT 0
54270: ST_TO_ADDR
54271: GO 54289
// min_y := y - r ;
54273: LD_ADDR_VAR 0 8
54277: PUSH
54278: LD_VAR 0 3
54282: PUSH
54283: LD_VAR 0 4
54287: MINUS
54288: ST_TO_ADDR
// max_x := x + r ;
54289: LD_ADDR_VAR 0 9
54293: PUSH
54294: LD_VAR 0 2
54298: PUSH
54299: LD_VAR 0 4
54303: PLUS
54304: ST_TO_ADDR
// max_y := y + r ;
54305: LD_ADDR_VAR 0 10
54309: PUSH
54310: LD_VAR 0 3
54314: PUSH
54315: LD_VAR 0 4
54319: PLUS
54320: ST_TO_ADDR
// for _x = min_x to max_x do
54321: LD_ADDR_VAR 0 11
54325: PUSH
54326: DOUBLE
54327: LD_VAR 0 7
54331: DEC
54332: ST_TO_ADDR
54333: LD_VAR 0 9
54337: PUSH
54338: FOR_TO
54339: IFFALSE 54456
// for _y = min_y to max_y do
54341: LD_ADDR_VAR 0 12
54345: PUSH
54346: DOUBLE
54347: LD_VAR 0 8
54351: DEC
54352: ST_TO_ADDR
54353: LD_VAR 0 10
54357: PUSH
54358: FOR_TO
54359: IFFALSE 54452
// begin if not ValidHex ( _x , _y ) then
54361: LD_VAR 0 11
54365: PPUSH
54366: LD_VAR 0 12
54370: PPUSH
54371: CALL_OW 488
54375: NOT
54376: IFFALSE 54380
// continue ;
54378: GO 54358
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
54380: LD_VAR 0 11
54384: PPUSH
54385: LD_VAR 0 12
54389: PPUSH
54390: CALL_OW 351
54394: PUSH
54395: LD_VAR 0 11
54399: PPUSH
54400: LD_VAR 0 12
54404: PPUSH
54405: CALL_OW 554
54409: AND
54410: IFFALSE 54450
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54412: LD_ADDR_VAR 0 13
54416: PUSH
54417: LD_VAR 0 13
54421: PPUSH
54422: LD_VAR 0 13
54426: PUSH
54427: LD_INT 1
54429: PLUS
54430: PPUSH
54431: LD_VAR 0 11
54435: PUSH
54436: LD_VAR 0 12
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PPUSH
54445: CALL_OW 2
54449: ST_TO_ADDR
// end ;
54450: GO 54358
54452: POP
54453: POP
54454: GO 54338
54456: POP
54457: POP
// if not list then
54458: LD_VAR 0 13
54462: NOT
54463: IFFALSE 54467
// exit ;
54465: GO 54538
// for i in list do
54467: LD_ADDR_VAR 0 6
54471: PUSH
54472: LD_VAR 0 13
54476: PUSH
54477: FOR_IN
54478: IFFALSE 54536
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
54480: LD_VAR 0 1
54484: PPUSH
54485: LD_STRING M
54487: PUSH
54488: LD_VAR 0 6
54492: PUSH
54493: LD_INT 1
54495: ARRAY
54496: PUSH
54497: LD_VAR 0 6
54501: PUSH
54502: LD_INT 2
54504: ARRAY
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: PUSH
54527: EMPTY
54528: LIST
54529: PPUSH
54530: CALL_OW 447
54534: GO 54477
54536: POP
54537: POP
// end ;
54538: LD_VAR 0 5
54542: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
54543: LD_INT 0
54545: PPUSH
54546: PPUSH
54547: PPUSH
54548: PPUSH
54549: PPUSH
54550: PPUSH
54551: PPUSH
54552: PPUSH
54553: PPUSH
54554: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
54555: LD_VAR 0 1
54559: PPUSH
54560: CALL_OW 302
54564: NOT
54565: PUSH
54566: LD_VAR 0 2
54570: PPUSH
54571: LD_VAR 0 3
54575: PPUSH
54576: CALL_OW 488
54580: NOT
54581: OR
54582: PUSH
54583: LD_VAR 0 4
54587: NOT
54588: OR
54589: IFFALSE 54593
// exit ;
54591: GO 55106
// list := [ ] ;
54593: LD_ADDR_VAR 0 13
54597: PUSH
54598: EMPTY
54599: ST_TO_ADDR
// if x - r < 0 then
54600: LD_VAR 0 2
54604: PUSH
54605: LD_VAR 0 4
54609: MINUS
54610: PUSH
54611: LD_INT 0
54613: LESS
54614: IFFALSE 54626
// min_x := 0 else
54616: LD_ADDR_VAR 0 7
54620: PUSH
54621: LD_INT 0
54623: ST_TO_ADDR
54624: GO 54642
// min_x := x - r ;
54626: LD_ADDR_VAR 0 7
54630: PUSH
54631: LD_VAR 0 2
54635: PUSH
54636: LD_VAR 0 4
54640: MINUS
54641: ST_TO_ADDR
// if y - r < 0 then
54642: LD_VAR 0 3
54646: PUSH
54647: LD_VAR 0 4
54651: MINUS
54652: PUSH
54653: LD_INT 0
54655: LESS
54656: IFFALSE 54668
// min_y := 0 else
54658: LD_ADDR_VAR 0 8
54662: PUSH
54663: LD_INT 0
54665: ST_TO_ADDR
54666: GO 54684
// min_y := y - r ;
54668: LD_ADDR_VAR 0 8
54672: PUSH
54673: LD_VAR 0 3
54677: PUSH
54678: LD_VAR 0 4
54682: MINUS
54683: ST_TO_ADDR
// max_x := x + r ;
54684: LD_ADDR_VAR 0 9
54688: PUSH
54689: LD_VAR 0 2
54693: PUSH
54694: LD_VAR 0 4
54698: PLUS
54699: ST_TO_ADDR
// max_y := y + r ;
54700: LD_ADDR_VAR 0 10
54704: PUSH
54705: LD_VAR 0 3
54709: PUSH
54710: LD_VAR 0 4
54714: PLUS
54715: ST_TO_ADDR
// for _x = min_x to max_x do
54716: LD_ADDR_VAR 0 11
54720: PUSH
54721: DOUBLE
54722: LD_VAR 0 7
54726: DEC
54727: ST_TO_ADDR
54728: LD_VAR 0 9
54732: PUSH
54733: FOR_TO
54734: IFFALSE 54851
// for _y = min_y to max_y do
54736: LD_ADDR_VAR 0 12
54740: PUSH
54741: DOUBLE
54742: LD_VAR 0 8
54746: DEC
54747: ST_TO_ADDR
54748: LD_VAR 0 10
54752: PUSH
54753: FOR_TO
54754: IFFALSE 54847
// begin if not ValidHex ( _x , _y ) then
54756: LD_VAR 0 11
54760: PPUSH
54761: LD_VAR 0 12
54765: PPUSH
54766: CALL_OW 488
54770: NOT
54771: IFFALSE 54775
// continue ;
54773: GO 54753
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
54775: LD_VAR 0 11
54779: PPUSH
54780: LD_VAR 0 12
54784: PPUSH
54785: CALL_OW 351
54789: PUSH
54790: LD_VAR 0 11
54794: PPUSH
54795: LD_VAR 0 12
54799: PPUSH
54800: CALL_OW 554
54804: AND
54805: IFFALSE 54845
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54807: LD_ADDR_VAR 0 13
54811: PUSH
54812: LD_VAR 0 13
54816: PPUSH
54817: LD_VAR 0 13
54821: PUSH
54822: LD_INT 1
54824: PLUS
54825: PPUSH
54826: LD_VAR 0 11
54830: PUSH
54831: LD_VAR 0 12
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PPUSH
54840: CALL_OW 2
54844: ST_TO_ADDR
// end ;
54845: GO 54753
54847: POP
54848: POP
54849: GO 54733
54851: POP
54852: POP
// if not list then
54853: LD_VAR 0 13
54857: NOT
54858: IFFALSE 54862
// exit ;
54860: GO 55106
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
54862: LD_ADDR_VAR 0 13
54866: PUSH
54867: LD_VAR 0 1
54871: PPUSH
54872: LD_VAR 0 13
54876: PPUSH
54877: LD_INT 1
54879: PPUSH
54880: LD_INT 1
54882: PPUSH
54883: CALL 15470 0 4
54887: ST_TO_ADDR
// ComStop ( flame ) ;
54888: LD_VAR 0 1
54892: PPUSH
54893: CALL_OW 141
// for i in list do
54897: LD_ADDR_VAR 0 6
54901: PUSH
54902: LD_VAR 0 13
54906: PUSH
54907: FOR_IN
54908: IFFALSE 54939
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
54910: LD_VAR 0 1
54914: PPUSH
54915: LD_VAR 0 6
54919: PUSH
54920: LD_INT 1
54922: ARRAY
54923: PPUSH
54924: LD_VAR 0 6
54928: PUSH
54929: LD_INT 2
54931: ARRAY
54932: PPUSH
54933: CALL_OW 176
54937: GO 54907
54939: POP
54940: POP
// repeat wait ( 0 0$1 ) ;
54941: LD_INT 35
54943: PPUSH
54944: CALL_OW 67
// task := GetTaskList ( flame ) ;
54948: LD_ADDR_VAR 0 14
54952: PUSH
54953: LD_VAR 0 1
54957: PPUSH
54958: CALL_OW 437
54962: ST_TO_ADDR
// if not task then
54963: LD_VAR 0 14
54967: NOT
54968: IFFALSE 54972
// exit ;
54970: GO 55106
// if task [ 1 ] [ 1 ] <> | then
54972: LD_VAR 0 14
54976: PUSH
54977: LD_INT 1
54979: ARRAY
54980: PUSH
54981: LD_INT 1
54983: ARRAY
54984: PUSH
54985: LD_STRING |
54987: NONEQUAL
54988: IFFALSE 54992
// exit ;
54990: GO 55106
// _x := task [ 1 ] [ 2 ] ;
54992: LD_ADDR_VAR 0 11
54996: PUSH
54997: LD_VAR 0 14
55001: PUSH
55002: LD_INT 1
55004: ARRAY
55005: PUSH
55006: LD_INT 2
55008: ARRAY
55009: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55010: LD_ADDR_VAR 0 12
55014: PUSH
55015: LD_VAR 0 14
55019: PUSH
55020: LD_INT 1
55022: ARRAY
55023: PUSH
55024: LD_INT 3
55026: ARRAY
55027: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55028: LD_VAR 0 11
55032: PPUSH
55033: LD_VAR 0 12
55037: PPUSH
55038: CALL_OW 351
55042: NOT
55043: PUSH
55044: LD_VAR 0 11
55048: PPUSH
55049: LD_VAR 0 12
55053: PPUSH
55054: CALL_OW 554
55058: NOT
55059: OR
55060: IFFALSE 55094
// begin task := Delete ( task , 1 ) ;
55062: LD_ADDR_VAR 0 14
55066: PUSH
55067: LD_VAR 0 14
55071: PPUSH
55072: LD_INT 1
55074: PPUSH
55075: CALL_OW 3
55079: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55080: LD_VAR 0 1
55084: PPUSH
55085: LD_VAR 0 14
55089: PPUSH
55090: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55094: LD_VAR 0 1
55098: PPUSH
55099: CALL_OW 314
55103: NOT
55104: IFFALSE 54941
// end ;
55106: LD_VAR 0 5
55110: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55111: LD_EXP 48
55115: NOT
55116: IFFALSE 55166
55118: GO 55120
55120: DISABLE
// begin initHack := true ;
55121: LD_ADDR_EXP 48
55125: PUSH
55126: LD_INT 1
55128: ST_TO_ADDR
// hackTanks := [ ] ;
55129: LD_ADDR_EXP 49
55133: PUSH
55134: EMPTY
55135: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55136: LD_ADDR_EXP 50
55140: PUSH
55141: EMPTY
55142: ST_TO_ADDR
// hackLimit := 3 ;
55143: LD_ADDR_EXP 51
55147: PUSH
55148: LD_INT 3
55150: ST_TO_ADDR
// hackDist := 12 ;
55151: LD_ADDR_EXP 52
55155: PUSH
55156: LD_INT 12
55158: ST_TO_ADDR
// hackCounter := [ ] ;
55159: LD_ADDR_EXP 53
55163: PUSH
55164: EMPTY
55165: ST_TO_ADDR
// end ;
55166: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55167: LD_EXP 48
55171: PUSH
55172: LD_INT 34
55174: PUSH
55175: LD_INT 99
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PPUSH
55182: CALL_OW 69
55186: AND
55187: IFFALSE 55440
55189: GO 55191
55191: DISABLE
55192: LD_INT 0
55194: PPUSH
55195: PPUSH
// begin enable ;
55196: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55197: LD_ADDR_VAR 0 1
55201: PUSH
55202: LD_INT 34
55204: PUSH
55205: LD_INT 99
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PPUSH
55212: CALL_OW 69
55216: PUSH
55217: FOR_IN
55218: IFFALSE 55438
// begin if not i in hackTanks then
55220: LD_VAR 0 1
55224: PUSH
55225: LD_EXP 49
55229: IN
55230: NOT
55231: IFFALSE 55314
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55233: LD_ADDR_EXP 49
55237: PUSH
55238: LD_EXP 49
55242: PPUSH
55243: LD_EXP 49
55247: PUSH
55248: LD_INT 1
55250: PLUS
55251: PPUSH
55252: LD_VAR 0 1
55256: PPUSH
55257: CALL_OW 1
55261: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55262: LD_ADDR_EXP 50
55266: PUSH
55267: LD_EXP 50
55271: PPUSH
55272: LD_EXP 50
55276: PUSH
55277: LD_INT 1
55279: PLUS
55280: PPUSH
55281: EMPTY
55282: PPUSH
55283: CALL_OW 1
55287: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
55288: LD_ADDR_EXP 53
55292: PUSH
55293: LD_EXP 53
55297: PPUSH
55298: LD_EXP 53
55302: PUSH
55303: LD_INT 1
55305: PLUS
55306: PPUSH
55307: EMPTY
55308: PPUSH
55309: CALL_OW 1
55313: ST_TO_ADDR
// end ; if not IsOk ( i ) then
55314: LD_VAR 0 1
55318: PPUSH
55319: CALL_OW 302
55323: NOT
55324: IFFALSE 55337
// begin HackUnlinkAll ( i ) ;
55326: LD_VAR 0 1
55330: PPUSH
55331: CALL 55443 0 1
// continue ;
55335: GO 55217
// end ; HackCheckCapturedStatus ( i ) ;
55337: LD_VAR 0 1
55341: PPUSH
55342: CALL 55886 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
55346: LD_ADDR_VAR 0 2
55350: PUSH
55351: LD_INT 81
55353: PUSH
55354: LD_VAR 0 1
55358: PPUSH
55359: CALL_OW 255
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 33
55370: PUSH
55371: LD_INT 3
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 91
55380: PUSH
55381: LD_VAR 0 1
55385: PUSH
55386: LD_EXP 52
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 50
55398: PUSH
55399: EMPTY
55400: LIST
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: PPUSH
55408: CALL_OW 69
55412: ST_TO_ADDR
// if not tmp then
55413: LD_VAR 0 2
55417: NOT
55418: IFFALSE 55422
// continue ;
55420: GO 55217
// HackLink ( i , tmp ) ;
55422: LD_VAR 0 1
55426: PPUSH
55427: LD_VAR 0 2
55431: PPUSH
55432: CALL 55579 0 2
// end ;
55436: GO 55217
55438: POP
55439: POP
// end ;
55440: PPOPN 2
55442: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
55443: LD_INT 0
55445: PPUSH
55446: PPUSH
55447: PPUSH
// if not hack in hackTanks then
55448: LD_VAR 0 1
55452: PUSH
55453: LD_EXP 49
55457: IN
55458: NOT
55459: IFFALSE 55463
// exit ;
55461: GO 55574
// index := GetElementIndex ( hackTanks , hack ) ;
55463: LD_ADDR_VAR 0 4
55467: PUSH
55468: LD_EXP 49
55472: PPUSH
55473: LD_VAR 0 1
55477: PPUSH
55478: CALL 14767 0 2
55482: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
55483: LD_EXP 50
55487: PUSH
55488: LD_VAR 0 4
55492: ARRAY
55493: IFFALSE 55574
// begin for i in hackTanksCaptured [ index ] do
55495: LD_ADDR_VAR 0 3
55499: PUSH
55500: LD_EXP 50
55504: PUSH
55505: LD_VAR 0 4
55509: ARRAY
55510: PUSH
55511: FOR_IN
55512: IFFALSE 55538
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
55514: LD_VAR 0 3
55518: PUSH
55519: LD_INT 1
55521: ARRAY
55522: PPUSH
55523: LD_VAR 0 3
55527: PUSH
55528: LD_INT 2
55530: ARRAY
55531: PPUSH
55532: CALL_OW 235
55536: GO 55511
55538: POP
55539: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
55540: LD_ADDR_EXP 50
55544: PUSH
55545: LD_EXP 50
55549: PPUSH
55550: LD_VAR 0 4
55554: PPUSH
55555: EMPTY
55556: PPUSH
55557: CALL_OW 1
55561: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
55562: LD_VAR 0 1
55566: PPUSH
55567: LD_INT 0
55569: PPUSH
55570: CALL_OW 505
// end ; end ;
55574: LD_VAR 0 2
55578: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
55579: LD_INT 0
55581: PPUSH
55582: PPUSH
55583: PPUSH
// if not hack in hackTanks or not vehicles then
55584: LD_VAR 0 1
55588: PUSH
55589: LD_EXP 49
55593: IN
55594: NOT
55595: PUSH
55596: LD_VAR 0 2
55600: NOT
55601: OR
55602: IFFALSE 55606
// exit ;
55604: GO 55881
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
55606: LD_ADDR_VAR 0 2
55610: PUSH
55611: LD_VAR 0 1
55615: PPUSH
55616: LD_VAR 0 2
55620: PPUSH
55621: LD_INT 1
55623: PPUSH
55624: LD_INT 1
55626: PPUSH
55627: CALL 15417 0 4
55631: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
55632: LD_ADDR_VAR 0 5
55636: PUSH
55637: LD_EXP 49
55641: PPUSH
55642: LD_VAR 0 1
55646: PPUSH
55647: CALL 14767 0 2
55651: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
55652: LD_EXP 50
55656: PUSH
55657: LD_VAR 0 5
55661: ARRAY
55662: PUSH
55663: LD_EXP 51
55667: LESS
55668: IFFALSE 55857
// begin for i := 1 to vehicles do
55670: LD_ADDR_VAR 0 4
55674: PUSH
55675: DOUBLE
55676: LD_INT 1
55678: DEC
55679: ST_TO_ADDR
55680: LD_VAR 0 2
55684: PUSH
55685: FOR_TO
55686: IFFALSE 55855
// begin if hackTanksCaptured [ index ] = hackLimit then
55688: LD_EXP 50
55692: PUSH
55693: LD_VAR 0 5
55697: ARRAY
55698: PUSH
55699: LD_EXP 51
55703: EQUAL
55704: IFFALSE 55708
// break ;
55706: GO 55855
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
55708: LD_ADDR_EXP 53
55712: PUSH
55713: LD_EXP 53
55717: PPUSH
55718: LD_VAR 0 5
55722: PPUSH
55723: LD_EXP 53
55727: PUSH
55728: LD_VAR 0 5
55732: ARRAY
55733: PUSH
55734: LD_INT 1
55736: PLUS
55737: PPUSH
55738: CALL_OW 1
55742: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
55743: LD_ADDR_EXP 50
55747: PUSH
55748: LD_EXP 50
55752: PPUSH
55753: LD_VAR 0 5
55757: PUSH
55758: LD_EXP 50
55762: PUSH
55763: LD_VAR 0 5
55767: ARRAY
55768: PUSH
55769: LD_INT 1
55771: PLUS
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PPUSH
55777: LD_VAR 0 2
55781: PUSH
55782: LD_VAR 0 4
55786: ARRAY
55787: PUSH
55788: LD_VAR 0 2
55792: PUSH
55793: LD_VAR 0 4
55797: ARRAY
55798: PPUSH
55799: CALL_OW 255
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PPUSH
55808: CALL 14982 0 3
55812: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
55813: LD_VAR 0 2
55817: PUSH
55818: LD_VAR 0 4
55822: ARRAY
55823: PPUSH
55824: LD_VAR 0 1
55828: PPUSH
55829: CALL_OW 255
55833: PPUSH
55834: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
55838: LD_VAR 0 2
55842: PUSH
55843: LD_VAR 0 4
55847: ARRAY
55848: PPUSH
55849: CALL_OW 141
// end ;
55853: GO 55685
55855: POP
55856: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55857: LD_VAR 0 1
55861: PPUSH
55862: LD_EXP 50
55866: PUSH
55867: LD_VAR 0 5
55871: ARRAY
55872: PUSH
55873: LD_INT 0
55875: PLUS
55876: PPUSH
55877: CALL_OW 505
// end ;
55881: LD_VAR 0 3
55885: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
55886: LD_INT 0
55888: PPUSH
55889: PPUSH
55890: PPUSH
55891: PPUSH
// if not hack in hackTanks then
55892: LD_VAR 0 1
55896: PUSH
55897: LD_EXP 49
55901: IN
55902: NOT
55903: IFFALSE 55907
// exit ;
55905: GO 56147
// index := GetElementIndex ( hackTanks , hack ) ;
55907: LD_ADDR_VAR 0 4
55911: PUSH
55912: LD_EXP 49
55916: PPUSH
55917: LD_VAR 0 1
55921: PPUSH
55922: CALL 14767 0 2
55926: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
55927: LD_ADDR_VAR 0 3
55931: PUSH
55932: DOUBLE
55933: LD_EXP 50
55937: PUSH
55938: LD_VAR 0 4
55942: ARRAY
55943: INC
55944: ST_TO_ADDR
55945: LD_INT 1
55947: PUSH
55948: FOR_DOWNTO
55949: IFFALSE 56121
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
55951: LD_ADDR_VAR 0 5
55955: PUSH
55956: LD_EXP 50
55960: PUSH
55961: LD_VAR 0 4
55965: ARRAY
55966: PUSH
55967: LD_VAR 0 3
55971: ARRAY
55972: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
55973: LD_VAR 0 5
55977: PUSH
55978: LD_INT 1
55980: ARRAY
55981: PPUSH
55982: CALL_OW 302
55986: NOT
55987: PUSH
55988: LD_VAR 0 5
55992: PUSH
55993: LD_INT 1
55995: ARRAY
55996: PPUSH
55997: CALL_OW 255
56001: PUSH
56002: LD_VAR 0 1
56006: PPUSH
56007: CALL_OW 255
56011: NONEQUAL
56012: OR
56013: IFFALSE 56119
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56015: LD_VAR 0 5
56019: PUSH
56020: LD_INT 1
56022: ARRAY
56023: PPUSH
56024: CALL_OW 305
56028: PUSH
56029: LD_VAR 0 5
56033: PUSH
56034: LD_INT 1
56036: ARRAY
56037: PPUSH
56038: CALL_OW 255
56042: PUSH
56043: LD_VAR 0 1
56047: PPUSH
56048: CALL_OW 255
56052: EQUAL
56053: AND
56054: IFFALSE 56078
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56056: LD_VAR 0 5
56060: PUSH
56061: LD_INT 1
56063: ARRAY
56064: PPUSH
56065: LD_VAR 0 5
56069: PUSH
56070: LD_INT 2
56072: ARRAY
56073: PPUSH
56074: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56078: LD_ADDR_EXP 50
56082: PUSH
56083: LD_EXP 50
56087: PPUSH
56088: LD_VAR 0 4
56092: PPUSH
56093: LD_EXP 50
56097: PUSH
56098: LD_VAR 0 4
56102: ARRAY
56103: PPUSH
56104: LD_VAR 0 3
56108: PPUSH
56109: CALL_OW 3
56113: PPUSH
56114: CALL_OW 1
56118: ST_TO_ADDR
// end ; end ;
56119: GO 55948
56121: POP
56122: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56123: LD_VAR 0 1
56127: PPUSH
56128: LD_EXP 50
56132: PUSH
56133: LD_VAR 0 4
56137: ARRAY
56138: PUSH
56139: LD_INT 0
56141: PLUS
56142: PPUSH
56143: CALL_OW 505
// end ;
56147: LD_VAR 0 2
56151: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56152: LD_INT 0
56154: PPUSH
56155: PPUSH
56156: PPUSH
56157: PPUSH
// if not hack in hackTanks then
56158: LD_VAR 0 1
56162: PUSH
56163: LD_EXP 49
56167: IN
56168: NOT
56169: IFFALSE 56173
// exit ;
56171: GO 56258
// index := GetElementIndex ( hackTanks , hack ) ;
56173: LD_ADDR_VAR 0 5
56177: PUSH
56178: LD_EXP 49
56182: PPUSH
56183: LD_VAR 0 1
56187: PPUSH
56188: CALL 14767 0 2
56192: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56193: LD_ADDR_VAR 0 4
56197: PUSH
56198: DOUBLE
56199: LD_INT 1
56201: DEC
56202: ST_TO_ADDR
56203: LD_EXP 50
56207: PUSH
56208: LD_VAR 0 5
56212: ARRAY
56213: PUSH
56214: FOR_TO
56215: IFFALSE 56256
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56217: LD_EXP 50
56221: PUSH
56222: LD_VAR 0 5
56226: ARRAY
56227: PUSH
56228: LD_VAR 0 4
56232: ARRAY
56233: PUSH
56234: LD_INT 1
56236: ARRAY
56237: PUSH
56238: LD_VAR 0 2
56242: EQUAL
56243: IFFALSE 56254
// KillUnit ( vehicle ) ;
56245: LD_VAR 0 2
56249: PPUSH
56250: CALL_OW 66
56254: GO 56214
56256: POP
56257: POP
// end ;
56258: LD_VAR 0 3
56262: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
56263: LD_EXP 54
56267: NOT
56268: IFFALSE 56303
56270: GO 56272
56272: DISABLE
// begin initMiner := true ;
56273: LD_ADDR_EXP 54
56277: PUSH
56278: LD_INT 1
56280: ST_TO_ADDR
// minersList := [ ] ;
56281: LD_ADDR_EXP 55
56285: PUSH
56286: EMPTY
56287: ST_TO_ADDR
// minerMinesList := [ ] ;
56288: LD_ADDR_EXP 56
56292: PUSH
56293: EMPTY
56294: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
56295: LD_ADDR_EXP 57
56299: PUSH
56300: LD_INT 5
56302: ST_TO_ADDR
// end ;
56303: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
56304: LD_EXP 54
56308: PUSH
56309: LD_INT 34
56311: PUSH
56312: LD_INT 81
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PPUSH
56319: CALL_OW 69
56323: AND
56324: IFFALSE 56785
56326: GO 56328
56328: DISABLE
56329: LD_INT 0
56331: PPUSH
56332: PPUSH
56333: PPUSH
56334: PPUSH
// begin enable ;
56335: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
56336: LD_ADDR_VAR 0 1
56340: PUSH
56341: LD_INT 34
56343: PUSH
56344: LD_INT 81
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PPUSH
56351: CALL_OW 69
56355: PUSH
56356: FOR_IN
56357: IFFALSE 56429
// begin if not i in minersList then
56359: LD_VAR 0 1
56363: PUSH
56364: LD_EXP 55
56368: IN
56369: NOT
56370: IFFALSE 56427
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
56372: LD_ADDR_EXP 55
56376: PUSH
56377: LD_EXP 55
56381: PPUSH
56382: LD_EXP 55
56386: PUSH
56387: LD_INT 1
56389: PLUS
56390: PPUSH
56391: LD_VAR 0 1
56395: PPUSH
56396: CALL_OW 1
56400: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56401: LD_ADDR_EXP 56
56405: PUSH
56406: LD_EXP 56
56410: PPUSH
56411: LD_EXP 56
56415: PUSH
56416: LD_INT 1
56418: PLUS
56419: PPUSH
56420: EMPTY
56421: PPUSH
56422: CALL_OW 1
56426: ST_TO_ADDR
// end end ;
56427: GO 56356
56429: POP
56430: POP
// for i := minerMinesList downto 1 do
56431: LD_ADDR_VAR 0 1
56435: PUSH
56436: DOUBLE
56437: LD_EXP 56
56441: INC
56442: ST_TO_ADDR
56443: LD_INT 1
56445: PUSH
56446: FOR_DOWNTO
56447: IFFALSE 56783
// begin if IsLive ( minersList [ i ] ) then
56449: LD_EXP 55
56453: PUSH
56454: LD_VAR 0 1
56458: ARRAY
56459: PPUSH
56460: CALL_OW 300
56464: IFFALSE 56492
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
56466: LD_EXP 55
56470: PUSH
56471: LD_VAR 0 1
56475: ARRAY
56476: PPUSH
56477: LD_EXP 56
56481: PUSH
56482: LD_VAR 0 1
56486: ARRAY
56487: PPUSH
56488: CALL_OW 505
// if not minerMinesList [ i ] then
56492: LD_EXP 56
56496: PUSH
56497: LD_VAR 0 1
56501: ARRAY
56502: NOT
56503: IFFALSE 56507
// continue ;
56505: GO 56446
// for j := minerMinesList [ i ] downto 1 do
56507: LD_ADDR_VAR 0 2
56511: PUSH
56512: DOUBLE
56513: LD_EXP 56
56517: PUSH
56518: LD_VAR 0 1
56522: ARRAY
56523: INC
56524: ST_TO_ADDR
56525: LD_INT 1
56527: PUSH
56528: FOR_DOWNTO
56529: IFFALSE 56779
// begin side := GetSide ( minersList [ i ] ) ;
56531: LD_ADDR_VAR 0 3
56535: PUSH
56536: LD_EXP 55
56540: PUSH
56541: LD_VAR 0 1
56545: ARRAY
56546: PPUSH
56547: CALL_OW 255
56551: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
56552: LD_ADDR_VAR 0 4
56556: PUSH
56557: LD_EXP 56
56561: PUSH
56562: LD_VAR 0 1
56566: ARRAY
56567: PUSH
56568: LD_VAR 0 2
56572: ARRAY
56573: PUSH
56574: LD_INT 1
56576: ARRAY
56577: PPUSH
56578: LD_EXP 56
56582: PUSH
56583: LD_VAR 0 1
56587: ARRAY
56588: PUSH
56589: LD_VAR 0 2
56593: ARRAY
56594: PUSH
56595: LD_INT 2
56597: ARRAY
56598: PPUSH
56599: CALL_OW 428
56603: ST_TO_ADDR
// if not tmp then
56604: LD_VAR 0 4
56608: NOT
56609: IFFALSE 56613
// continue ;
56611: GO 56528
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
56613: LD_VAR 0 4
56617: PUSH
56618: LD_INT 81
56620: PUSH
56621: LD_VAR 0 3
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PPUSH
56630: CALL_OW 69
56634: IN
56635: PUSH
56636: LD_EXP 56
56640: PUSH
56641: LD_VAR 0 1
56645: ARRAY
56646: PUSH
56647: LD_VAR 0 2
56651: ARRAY
56652: PUSH
56653: LD_INT 1
56655: ARRAY
56656: PPUSH
56657: LD_EXP 56
56661: PUSH
56662: LD_VAR 0 1
56666: ARRAY
56667: PUSH
56668: LD_VAR 0 2
56672: ARRAY
56673: PUSH
56674: LD_INT 2
56676: ARRAY
56677: PPUSH
56678: CALL_OW 458
56682: AND
56683: IFFALSE 56777
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
56685: LD_EXP 56
56689: PUSH
56690: LD_VAR 0 1
56694: ARRAY
56695: PUSH
56696: LD_VAR 0 2
56700: ARRAY
56701: PUSH
56702: LD_INT 1
56704: ARRAY
56705: PPUSH
56706: LD_EXP 56
56710: PUSH
56711: LD_VAR 0 1
56715: ARRAY
56716: PUSH
56717: LD_VAR 0 2
56721: ARRAY
56722: PUSH
56723: LD_INT 2
56725: ARRAY
56726: PPUSH
56727: LD_VAR 0 3
56731: PPUSH
56732: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
56736: LD_ADDR_EXP 56
56740: PUSH
56741: LD_EXP 56
56745: PPUSH
56746: LD_VAR 0 1
56750: PPUSH
56751: LD_EXP 56
56755: PUSH
56756: LD_VAR 0 1
56760: ARRAY
56761: PPUSH
56762: LD_VAR 0 2
56766: PPUSH
56767: CALL_OW 3
56771: PPUSH
56772: CALL_OW 1
56776: ST_TO_ADDR
// end ; end ;
56777: GO 56528
56779: POP
56780: POP
// end ;
56781: GO 56446
56783: POP
56784: POP
// end ;
56785: PPOPN 4
56787: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
56788: LD_INT 0
56790: PPUSH
56791: PPUSH
// result := false ;
56792: LD_ADDR_VAR 0 4
56796: PUSH
56797: LD_INT 0
56799: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
56800: LD_VAR 0 1
56804: PPUSH
56805: CALL_OW 264
56809: PUSH
56810: LD_INT 81
56812: EQUAL
56813: NOT
56814: IFFALSE 56818
// exit ;
56816: GO 57058
// index := GetElementIndex ( minersList , unit ) ;
56818: LD_ADDR_VAR 0 5
56822: PUSH
56823: LD_EXP 55
56827: PPUSH
56828: LD_VAR 0 1
56832: PPUSH
56833: CALL 14767 0 2
56837: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
56838: LD_EXP 56
56842: PUSH
56843: LD_VAR 0 5
56847: ARRAY
56848: PUSH
56849: LD_EXP 57
56853: GREATEREQUAL
56854: IFFALSE 56858
// exit ;
56856: GO 57058
// ComMoveXY ( unit , x , y ) ;
56858: LD_VAR 0 1
56862: PPUSH
56863: LD_VAR 0 2
56867: PPUSH
56868: LD_VAR 0 3
56872: PPUSH
56873: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
56877: LD_INT 35
56879: PPUSH
56880: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
56884: LD_VAR 0 1
56888: PPUSH
56889: LD_VAR 0 2
56893: PPUSH
56894: LD_VAR 0 3
56898: PPUSH
56899: CALL 46528 0 3
56903: NOT
56904: PUSH
56905: LD_VAR 0 1
56909: PPUSH
56910: CALL_OW 314
56914: AND
56915: IFFALSE 56919
// exit ;
56917: GO 57058
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
56919: LD_VAR 0 2
56923: PPUSH
56924: LD_VAR 0 3
56928: PPUSH
56929: CALL_OW 428
56933: PUSH
56934: LD_VAR 0 1
56938: EQUAL
56939: PUSH
56940: LD_VAR 0 1
56944: PPUSH
56945: CALL_OW 314
56949: NOT
56950: AND
56951: IFFALSE 56877
// PlaySoundXY ( x , y , PlantMine ) ;
56953: LD_VAR 0 2
56957: PPUSH
56958: LD_VAR 0 3
56962: PPUSH
56963: LD_STRING PlantMine
56965: PPUSH
56966: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
56970: LD_VAR 0 2
56974: PPUSH
56975: LD_VAR 0 3
56979: PPUSH
56980: LD_VAR 0 1
56984: PPUSH
56985: CALL_OW 255
56989: PPUSH
56990: LD_INT 0
56992: PPUSH
56993: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
56997: LD_ADDR_EXP 56
57001: PUSH
57002: LD_EXP 56
57006: PPUSH
57007: LD_VAR 0 5
57011: PUSH
57012: LD_EXP 56
57016: PUSH
57017: LD_VAR 0 5
57021: ARRAY
57022: PUSH
57023: LD_INT 1
57025: PLUS
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PPUSH
57031: LD_VAR 0 2
57035: PUSH
57036: LD_VAR 0 3
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PPUSH
57045: CALL 14982 0 3
57049: ST_TO_ADDR
// result := true ;
57050: LD_ADDR_VAR 0 4
57054: PUSH
57055: LD_INT 1
57057: ST_TO_ADDR
// end ;
57058: LD_VAR 0 4
57062: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57063: LD_INT 0
57065: PPUSH
57066: PPUSH
57067: PPUSH
// if not unit in minersList then
57068: LD_VAR 0 1
57072: PUSH
57073: LD_EXP 55
57077: IN
57078: NOT
57079: IFFALSE 57083
// exit ;
57081: GO 57475
// index := GetElementIndex ( minersList , unit ) ;
57083: LD_ADDR_VAR 0 6
57087: PUSH
57088: LD_EXP 55
57092: PPUSH
57093: LD_VAR 0 1
57097: PPUSH
57098: CALL 14767 0 2
57102: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57103: LD_ADDR_VAR 0 5
57107: PUSH
57108: DOUBLE
57109: LD_EXP 56
57113: PUSH
57114: LD_VAR 0 6
57118: ARRAY
57119: INC
57120: ST_TO_ADDR
57121: LD_INT 1
57123: PUSH
57124: FOR_DOWNTO
57125: IFFALSE 57286
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57127: LD_EXP 56
57131: PUSH
57132: LD_VAR 0 6
57136: ARRAY
57137: PUSH
57138: LD_VAR 0 5
57142: ARRAY
57143: PUSH
57144: LD_INT 1
57146: ARRAY
57147: PUSH
57148: LD_VAR 0 2
57152: EQUAL
57153: PUSH
57154: LD_EXP 56
57158: PUSH
57159: LD_VAR 0 6
57163: ARRAY
57164: PUSH
57165: LD_VAR 0 5
57169: ARRAY
57170: PUSH
57171: LD_INT 2
57173: ARRAY
57174: PUSH
57175: LD_VAR 0 3
57179: EQUAL
57180: AND
57181: IFFALSE 57284
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57183: LD_EXP 56
57187: PUSH
57188: LD_VAR 0 6
57192: ARRAY
57193: PUSH
57194: LD_VAR 0 5
57198: ARRAY
57199: PUSH
57200: LD_INT 1
57202: ARRAY
57203: PPUSH
57204: LD_EXP 56
57208: PUSH
57209: LD_VAR 0 6
57213: ARRAY
57214: PUSH
57215: LD_VAR 0 5
57219: ARRAY
57220: PUSH
57221: LD_INT 2
57223: ARRAY
57224: PPUSH
57225: LD_VAR 0 1
57229: PPUSH
57230: CALL_OW 255
57234: PPUSH
57235: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57239: LD_ADDR_EXP 56
57243: PUSH
57244: LD_EXP 56
57248: PPUSH
57249: LD_VAR 0 6
57253: PPUSH
57254: LD_EXP 56
57258: PUSH
57259: LD_VAR 0 6
57263: ARRAY
57264: PPUSH
57265: LD_VAR 0 5
57269: PPUSH
57270: CALL_OW 3
57274: PPUSH
57275: CALL_OW 1
57279: ST_TO_ADDR
// exit ;
57280: POP
57281: POP
57282: GO 57475
// end ; end ;
57284: GO 57124
57286: POP
57287: POP
// for i := minerMinesList [ index ] downto 1 do
57288: LD_ADDR_VAR 0 5
57292: PUSH
57293: DOUBLE
57294: LD_EXP 56
57298: PUSH
57299: LD_VAR 0 6
57303: ARRAY
57304: INC
57305: ST_TO_ADDR
57306: LD_INT 1
57308: PUSH
57309: FOR_DOWNTO
57310: IFFALSE 57473
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
57312: LD_EXP 56
57316: PUSH
57317: LD_VAR 0 6
57321: ARRAY
57322: PUSH
57323: LD_VAR 0 5
57327: ARRAY
57328: PUSH
57329: LD_INT 1
57331: ARRAY
57332: PPUSH
57333: LD_EXP 56
57337: PUSH
57338: LD_VAR 0 6
57342: ARRAY
57343: PUSH
57344: LD_VAR 0 5
57348: ARRAY
57349: PUSH
57350: LD_INT 2
57352: ARRAY
57353: PPUSH
57354: LD_VAR 0 2
57358: PPUSH
57359: LD_VAR 0 3
57363: PPUSH
57364: CALL_OW 298
57368: PUSH
57369: LD_INT 6
57371: LESS
57372: IFFALSE 57471
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57374: LD_EXP 56
57378: PUSH
57379: LD_VAR 0 6
57383: ARRAY
57384: PUSH
57385: LD_VAR 0 5
57389: ARRAY
57390: PUSH
57391: LD_INT 1
57393: ARRAY
57394: PPUSH
57395: LD_EXP 56
57399: PUSH
57400: LD_VAR 0 6
57404: ARRAY
57405: PUSH
57406: LD_VAR 0 5
57410: ARRAY
57411: PUSH
57412: LD_INT 2
57414: ARRAY
57415: PPUSH
57416: LD_VAR 0 1
57420: PPUSH
57421: CALL_OW 255
57425: PPUSH
57426: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57430: LD_ADDR_EXP 56
57434: PUSH
57435: LD_EXP 56
57439: PPUSH
57440: LD_VAR 0 6
57444: PPUSH
57445: LD_EXP 56
57449: PUSH
57450: LD_VAR 0 6
57454: ARRAY
57455: PPUSH
57456: LD_VAR 0 5
57460: PPUSH
57461: CALL_OW 3
57465: PPUSH
57466: CALL_OW 1
57470: ST_TO_ADDR
// end ; end ;
57471: GO 57309
57473: POP
57474: POP
// end ;
57475: LD_VAR 0 4
57479: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
57480: LD_INT 0
57482: PPUSH
57483: PPUSH
57484: PPUSH
57485: PPUSH
57486: PPUSH
57487: PPUSH
57488: PPUSH
57489: PPUSH
57490: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
57491: LD_VAR 0 1
57495: PPUSH
57496: CALL_OW 264
57500: PUSH
57501: LD_INT 81
57503: EQUAL
57504: NOT
57505: PUSH
57506: LD_VAR 0 1
57510: PUSH
57511: LD_EXP 55
57515: IN
57516: NOT
57517: OR
57518: IFFALSE 57522
// exit ;
57520: GO 57844
// index := GetElementIndex ( minersList , unit ) ;
57522: LD_ADDR_VAR 0 6
57526: PUSH
57527: LD_EXP 55
57531: PPUSH
57532: LD_VAR 0 1
57536: PPUSH
57537: CALL 14767 0 2
57541: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
57542: LD_ADDR_VAR 0 8
57546: PUSH
57547: LD_EXP 57
57551: PUSH
57552: LD_EXP 56
57556: PUSH
57557: LD_VAR 0 6
57561: ARRAY
57562: MINUS
57563: ST_TO_ADDR
// if not minesFreeAmount then
57564: LD_VAR 0 8
57568: NOT
57569: IFFALSE 57573
// exit ;
57571: GO 57844
// tmp := [ ] ;
57573: LD_ADDR_VAR 0 7
57577: PUSH
57578: EMPTY
57579: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
57580: LD_ADDR_VAR 0 5
57584: PUSH
57585: DOUBLE
57586: LD_INT 1
57588: DEC
57589: ST_TO_ADDR
57590: LD_VAR 0 8
57594: PUSH
57595: FOR_TO
57596: IFFALSE 57791
// begin _d := rand ( 0 , 5 ) ;
57598: LD_ADDR_VAR 0 11
57602: PUSH
57603: LD_INT 0
57605: PPUSH
57606: LD_INT 5
57608: PPUSH
57609: CALL_OW 12
57613: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
57614: LD_ADDR_VAR 0 12
57618: PUSH
57619: LD_INT 2
57621: PPUSH
57622: LD_INT 6
57624: PPUSH
57625: CALL_OW 12
57629: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
57630: LD_ADDR_VAR 0 9
57634: PUSH
57635: LD_VAR 0 2
57639: PPUSH
57640: LD_VAR 0 11
57644: PPUSH
57645: LD_VAR 0 12
57649: PPUSH
57650: CALL_OW 272
57654: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
57655: LD_ADDR_VAR 0 10
57659: PUSH
57660: LD_VAR 0 3
57664: PPUSH
57665: LD_VAR 0 11
57669: PPUSH
57670: LD_VAR 0 12
57674: PPUSH
57675: CALL_OW 273
57679: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
57680: LD_VAR 0 9
57684: PPUSH
57685: LD_VAR 0 10
57689: PPUSH
57690: CALL_OW 488
57694: PUSH
57695: LD_VAR 0 9
57699: PUSH
57700: LD_VAR 0 10
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_VAR 0 7
57713: IN
57714: NOT
57715: AND
57716: PUSH
57717: LD_VAR 0 9
57721: PPUSH
57722: LD_VAR 0 10
57726: PPUSH
57727: CALL_OW 458
57731: NOT
57732: AND
57733: IFFALSE 57775
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
57735: LD_ADDR_VAR 0 7
57739: PUSH
57740: LD_VAR 0 7
57744: PPUSH
57745: LD_VAR 0 7
57749: PUSH
57750: LD_INT 1
57752: PLUS
57753: PPUSH
57754: LD_VAR 0 9
57758: PUSH
57759: LD_VAR 0 10
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PPUSH
57768: CALL_OW 1
57772: ST_TO_ADDR
57773: GO 57789
// i := i - 1 ;
57775: LD_ADDR_VAR 0 5
57779: PUSH
57780: LD_VAR 0 5
57784: PUSH
57785: LD_INT 1
57787: MINUS
57788: ST_TO_ADDR
// end ;
57789: GO 57595
57791: POP
57792: POP
// for i in tmp do
57793: LD_ADDR_VAR 0 5
57797: PUSH
57798: LD_VAR 0 7
57802: PUSH
57803: FOR_IN
57804: IFFALSE 57842
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
57806: LD_VAR 0 1
57810: PPUSH
57811: LD_VAR 0 5
57815: PUSH
57816: LD_INT 1
57818: ARRAY
57819: PPUSH
57820: LD_VAR 0 5
57824: PUSH
57825: LD_INT 2
57827: ARRAY
57828: PPUSH
57829: CALL 56788 0 3
57833: NOT
57834: IFFALSE 57840
// exit ;
57836: POP
57837: POP
57838: GO 57844
57840: GO 57803
57842: POP
57843: POP
// end ;
57844: LD_VAR 0 4
57848: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
57849: LD_INT 0
57851: PPUSH
57852: PPUSH
57853: PPUSH
57854: PPUSH
57855: PPUSH
57856: PPUSH
57857: PPUSH
57858: PPUSH
57859: PPUSH
// if GetClass ( unit ) <> class_sniper then
57860: LD_VAR 0 1
57864: PPUSH
57865: CALL_OW 257
57869: PUSH
57870: LD_INT 5
57872: NONEQUAL
57873: IFFALSE 57877
// exit ;
57875: GO 58343
// dist := 8 ;
57877: LD_ADDR_VAR 0 5
57881: PUSH
57882: LD_INT 8
57884: ST_TO_ADDR
// viewRange := 12 ;
57885: LD_ADDR_VAR 0 8
57889: PUSH
57890: LD_INT 12
57892: ST_TO_ADDR
// side := GetSide ( unit ) ;
57893: LD_ADDR_VAR 0 6
57897: PUSH
57898: LD_VAR 0 1
57902: PPUSH
57903: CALL_OW 255
57907: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
57908: LD_INT 61
57910: PPUSH
57911: LD_VAR 0 6
57915: PPUSH
57916: CALL_OW 321
57920: PUSH
57921: LD_INT 2
57923: EQUAL
57924: IFFALSE 57934
// viewRange := 16 ;
57926: LD_ADDR_VAR 0 8
57930: PUSH
57931: LD_INT 16
57933: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
57934: LD_VAR 0 1
57938: PPUSH
57939: LD_VAR 0 2
57943: PPUSH
57944: LD_VAR 0 3
57948: PPUSH
57949: CALL_OW 297
57953: PUSH
57954: LD_VAR 0 5
57958: GREATER
57959: IFFALSE 58038
// begin ComMoveXY ( unit , x , y ) ;
57961: LD_VAR 0 1
57965: PPUSH
57966: LD_VAR 0 2
57970: PPUSH
57971: LD_VAR 0 3
57975: PPUSH
57976: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57980: LD_INT 35
57982: PPUSH
57983: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
57987: LD_VAR 0 1
57991: PPUSH
57992: LD_VAR 0 2
57996: PPUSH
57997: LD_VAR 0 3
58001: PPUSH
58002: CALL 46528 0 3
58006: NOT
58007: IFFALSE 58011
// exit ;
58009: GO 58343
// until GetDistUnitXY ( unit , x , y ) < dist ;
58011: LD_VAR 0 1
58015: PPUSH
58016: LD_VAR 0 2
58020: PPUSH
58021: LD_VAR 0 3
58025: PPUSH
58026: CALL_OW 297
58030: PUSH
58031: LD_VAR 0 5
58035: LESS
58036: IFFALSE 57980
// end ; ComTurnXY ( unit , x , y ) ;
58038: LD_VAR 0 1
58042: PPUSH
58043: LD_VAR 0 2
58047: PPUSH
58048: LD_VAR 0 3
58052: PPUSH
58053: CALL_OW 118
// repeat if Multiplayer then
58057: LD_OWVAR 4
58061: IFFALSE 58072
// wait ( 35 ) else
58063: LD_INT 35
58065: PPUSH
58066: CALL_OW 67
58070: GO 58079
// wait ( 5 ) ;
58072: LD_INT 5
58074: PPUSH
58075: CALL_OW 67
// _d := GetDir ( unit ) ;
58079: LD_ADDR_VAR 0 11
58083: PUSH
58084: LD_VAR 0 1
58088: PPUSH
58089: CALL_OW 254
58093: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58094: LD_ADDR_VAR 0 7
58098: PUSH
58099: LD_VAR 0 1
58103: PPUSH
58104: CALL_OW 250
58108: PPUSH
58109: LD_VAR 0 1
58113: PPUSH
58114: CALL_OW 251
58118: PPUSH
58119: LD_VAR 0 2
58123: PPUSH
58124: LD_VAR 0 3
58128: PPUSH
58129: CALL 49136 0 4
58133: ST_TO_ADDR
// until dir = _d ;
58134: LD_VAR 0 7
58138: PUSH
58139: LD_VAR 0 11
58143: EQUAL
58144: IFFALSE 58057
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58146: LD_ADDR_VAR 0 9
58150: PUSH
58151: LD_VAR 0 1
58155: PPUSH
58156: CALL_OW 250
58160: PPUSH
58161: LD_VAR 0 7
58165: PPUSH
58166: LD_VAR 0 5
58170: PPUSH
58171: CALL_OW 272
58175: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58176: LD_ADDR_VAR 0 10
58180: PUSH
58181: LD_VAR 0 1
58185: PPUSH
58186: CALL_OW 251
58190: PPUSH
58191: LD_VAR 0 7
58195: PPUSH
58196: LD_VAR 0 5
58200: PPUSH
58201: CALL_OW 273
58205: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58206: LD_VAR 0 9
58210: PPUSH
58211: LD_VAR 0 10
58215: PPUSH
58216: CALL_OW 488
58220: NOT
58221: IFFALSE 58225
// exit ;
58223: GO 58343
// ComAnimCustom ( unit , 1 ) ;
58225: LD_VAR 0 1
58229: PPUSH
58230: LD_INT 1
58232: PPUSH
58233: CALL_OW 592
// p := 0 ;
58237: LD_ADDR_VAR 0 12
58241: PUSH
58242: LD_INT 0
58244: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58245: LD_VAR 0 9
58249: PPUSH
58250: LD_VAR 0 10
58254: PPUSH
58255: LD_VAR 0 6
58259: PPUSH
58260: LD_VAR 0 8
58264: PPUSH
58265: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
58269: LD_INT 35
58271: PPUSH
58272: CALL_OW 67
// p := Inc ( p ) ;
58276: LD_ADDR_VAR 0 12
58280: PUSH
58281: LD_VAR 0 12
58285: PPUSH
58286: CALL 49092 0 1
58290: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
58291: LD_VAR 0 12
58295: PUSH
58296: LD_INT 3
58298: EQUAL
58299: PUSH
58300: LD_VAR 0 1
58304: PPUSH
58305: CALL_OW 302
58309: NOT
58310: OR
58311: PUSH
58312: LD_VAR 0 1
58316: PPUSH
58317: CALL_OW 301
58321: OR
58322: IFFALSE 58269
// RemoveSeeing ( _x , _y , side ) ;
58324: LD_VAR 0 9
58328: PPUSH
58329: LD_VAR 0 10
58333: PPUSH
58334: LD_VAR 0 6
58338: PPUSH
58339: CALL_OW 331
// end ; end_of_file
58343: LD_VAR 0 4
58347: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
58348: LD_EXP 39
58352: IFFALSE 58693
58354: GO 58356
58356: DISABLE
58357: LD_INT 0
58359: PPUSH
58360: PPUSH
58361: PPUSH
// begin mpKingPoints := [ ] ;
58362: LD_ADDR_EXP 58
58366: PUSH
58367: EMPTY
58368: ST_TO_ADDR
// if mpTeamGame then
58369: LD_EXP 11
58373: IFFALSE 58427
// begin for i := 1 to Count ( mpTeams ) do
58375: LD_ADDR_VAR 0 1
58379: PUSH
58380: DOUBLE
58381: LD_INT 1
58383: DEC
58384: ST_TO_ADDR
58385: LD_EXP 10
58389: PPUSH
58390: CALL 12122 0 1
58394: PUSH
58395: FOR_TO
58396: IFFALSE 58423
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
58398: LD_ADDR_EXP 58
58402: PUSH
58403: LD_EXP 58
58407: PPUSH
58408: LD_VAR 0 1
58412: PPUSH
58413: LD_INT 0
58415: PPUSH
58416: CALL_OW 1
58420: ST_TO_ADDR
58421: GO 58395
58423: POP
58424: POP
// end else
58425: GO 58470
// begin for i := 1 to 8 do
58427: LD_ADDR_VAR 0 1
58431: PUSH
58432: DOUBLE
58433: LD_INT 1
58435: DEC
58436: ST_TO_ADDR
58437: LD_INT 8
58439: PUSH
58440: FOR_TO
58441: IFFALSE 58468
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
58443: LD_ADDR_EXP 58
58447: PUSH
58448: LD_EXP 58
58452: PPUSH
58453: LD_VAR 0 1
58457: PPUSH
58458: LD_INT 0
58460: PPUSH
58461: CALL_OW 1
58465: ST_TO_ADDR
58466: GO 58440
58468: POP
58469: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
58470: LD_ADDR_VAR 0 3
58474: PUSH
58475: LD_EXP 2
58479: PPUSH
58480: LD_INT 0
58482: PPUSH
58483: CALL_OW 517
58487: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58488: LD_ADDR_VAR 0 1
58492: PUSH
58493: DOUBLE
58494: LD_INT 1
58496: DEC
58497: ST_TO_ADDR
58498: LD_VAR 0 3
58502: PUSH
58503: LD_INT 1
58505: ARRAY
58506: PUSH
58507: FOR_TO
58508: IFFALSE 58575
// for j := 1 to 8 do
58510: LD_ADDR_VAR 0 2
58514: PUSH
58515: DOUBLE
58516: LD_INT 1
58518: DEC
58519: ST_TO_ADDR
58520: LD_INT 8
58522: PUSH
58523: FOR_TO
58524: IFFALSE 58571
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
58526: LD_VAR 0 3
58530: PUSH
58531: LD_INT 1
58533: ARRAY
58534: PUSH
58535: LD_VAR 0 1
58539: ARRAY
58540: PPUSH
58541: LD_VAR 0 3
58545: PUSH
58546: LD_INT 2
58548: ARRAY
58549: PUSH
58550: LD_VAR 0 1
58554: ARRAY
58555: PPUSH
58556: LD_VAR 0 2
58560: PPUSH
58561: LD_INT 12
58563: NEG
58564: PPUSH
58565: CALL_OW 330
58569: GO 58523
58571: POP
58572: POP
58573: GO 58507
58575: POP
58576: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
58577: LD_EXP 34
58581: PPUSH
58582: LD_INT 1
58584: PPUSH
58585: CALL_OW 424
// UpdateCounter ;
58589: CALL 59197 0 0
// repeat wait ( 0 0$1 ) ;
58593: LD_INT 35
58595: PPUSH
58596: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58600: LD_ADDR_VAR 0 3
58604: PUSH
58605: LD_EXP 34
58609: PPUSH
58610: LD_INT 3
58612: PUSH
58613: LD_INT 57
58615: PUSH
58616: EMPTY
58617: LIST
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 50
58625: PUSH
58626: EMPTY
58627: LIST
58628: PUSH
58629: LD_INT 2
58631: PUSH
58632: LD_INT 30
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 30
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: LIST
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: LIST
58661: PPUSH
58662: CALL_OW 70
58666: ST_TO_ADDR
// if not tmp then
58667: LD_VAR 0 3
58671: NOT
58672: IFFALSE 58676
// continue ;
58674: GO 58593
// AddPoints ( tmp ) ;
58676: LD_VAR 0 3
58680: PPUSH
58681: CALL 58875 0 1
// UpdateCounter ;
58685: CALL 59197 0 0
// until false ;
58689: LD_INT 0
58691: IFFALSE 58593
// end ;
58693: PPOPN 3
58695: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
58696: LD_EXP 39
58700: PUSH
58701: LD_EXP 37
58705: AND
58706: IFFALSE 58872
58708: GO 58710
58710: DISABLE
58711: LD_INT 0
58713: PPUSH
58714: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
58715: LD_ADDR_VAR 0 2
58719: PUSH
58720: LD_EXP 2
58724: PPUSH
58725: LD_INT 0
58727: PPUSH
58728: CALL_OW 517
58732: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58733: LD_ADDR_VAR 0 1
58737: PUSH
58738: DOUBLE
58739: LD_INT 1
58741: DEC
58742: ST_TO_ADDR
58743: LD_VAR 0 2
58747: PUSH
58748: LD_INT 1
58750: ARRAY
58751: PUSH
58752: FOR_TO
58753: IFFALSE 58794
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
58755: LD_VAR 0 2
58759: PUSH
58760: LD_INT 1
58762: ARRAY
58763: PUSH
58764: LD_VAR 0 1
58768: ARRAY
58769: PPUSH
58770: LD_VAR 0 2
58774: PUSH
58775: LD_INT 2
58777: ARRAY
58778: PUSH
58779: LD_VAR 0 1
58783: ARRAY
58784: PPUSH
58785: LD_INT 125
58787: PPUSH
58788: CALL_OW 495
58792: GO 58752
58794: POP
58795: POP
// repeat wait ( mpEmissions ) ;
58796: LD_EXP 37
58800: PPUSH
58801: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
58805: LD_ADDR_VAR 0 1
58809: PUSH
58810: DOUBLE
58811: LD_INT 1
58813: DEC
58814: ST_TO_ADDR
58815: LD_VAR 0 2
58819: PUSH
58820: LD_INT 1
58822: ARRAY
58823: PUSH
58824: FOR_TO
58825: IFFALSE 58866
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
58827: LD_VAR 0 2
58831: PUSH
58832: LD_INT 1
58834: ARRAY
58835: PUSH
58836: LD_VAR 0 1
58840: ARRAY
58841: PPUSH
58842: LD_VAR 0 2
58846: PUSH
58847: LD_INT 2
58849: ARRAY
58850: PUSH
58851: LD_VAR 0 1
58855: ARRAY
58856: PPUSH
58857: LD_INT 15
58859: PPUSH
58860: CALL_OW 495
58864: GO 58824
58866: POP
58867: POP
// until false ;
58868: LD_INT 0
58870: IFFALSE 58796
// end ;
58872: PPOPN 2
58874: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
58875: LD_INT 0
58877: PPUSH
58878: PPUSH
58879: PPUSH
58880: PPUSH
58881: PPUSH
// if mpTeamGame then
58882: LD_EXP 11
58886: IFFALSE 59083
// begin first := depots [ 1 ] ;
58888: LD_ADDR_VAR 0 4
58892: PUSH
58893: LD_VAR 0 1
58897: PUSH
58898: LD_INT 1
58900: ARRAY
58901: ST_TO_ADDR
// side := GetSide ( first ) ;
58902: LD_ADDR_VAR 0 6
58906: PUSH
58907: LD_VAR 0 4
58911: PPUSH
58912: CALL_OW 255
58916: ST_TO_ADDR
// for i := 1 to mpTeams do
58917: LD_ADDR_VAR 0 3
58921: PUSH
58922: DOUBLE
58923: LD_INT 1
58925: DEC
58926: ST_TO_ADDR
58927: LD_EXP 10
58931: PUSH
58932: FOR_TO
58933: IFFALSE 58967
// if side in mpTeams [ i ] then
58935: LD_VAR 0 6
58939: PUSH
58940: LD_EXP 10
58944: PUSH
58945: LD_VAR 0 3
58949: ARRAY
58950: IN
58951: IFFALSE 58965
// begin team := i ;
58953: LD_ADDR_VAR 0 5
58957: PUSH
58958: LD_VAR 0 3
58962: ST_TO_ADDR
// break ;
58963: GO 58967
// end ;
58965: GO 58932
58967: POP
58968: POP
// if not team then
58969: LD_VAR 0 5
58973: NOT
58974: IFFALSE 58978
// exit ;
58976: GO 59192
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58978: LD_EXP 34
58982: PPUSH
58983: LD_INT 81
58985: PUSH
58986: LD_VAR 0 6
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PPUSH
58995: CALL_OW 70
58999: IFFALSE 59003
// exit ;
59001: GO 59192
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
59003: LD_ADDR_EXP 58
59007: PUSH
59008: LD_EXP 58
59012: PPUSH
59013: LD_VAR 0 5
59017: PPUSH
59018: LD_EXP 58
59022: PUSH
59023: LD_VAR 0 5
59027: ARRAY
59028: PUSH
59029: LD_INT 1
59031: PLUS
59032: PPUSH
59033: CALL_OW 1
59037: ST_TO_ADDR
// for i in mpTeams [ team ] do
59038: LD_ADDR_VAR 0 3
59042: PUSH
59043: LD_EXP 10
59047: PUSH
59048: LD_VAR 0 5
59052: ARRAY
59053: PUSH
59054: FOR_IN
59055: IFFALSE 59079
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
59057: LD_VAR 0 3
59061: PPUSH
59062: LD_EXP 58
59066: PUSH
59067: LD_VAR 0 5
59071: ARRAY
59072: PPUSH
59073: CALL_OW 506
59077: GO 59054
59079: POP
59080: POP
// end else
59081: GO 59192
// begin first := depots [ 1 ] ;
59083: LD_ADDR_VAR 0 4
59087: PUSH
59088: LD_VAR 0 1
59092: PUSH
59093: LD_INT 1
59095: ARRAY
59096: ST_TO_ADDR
// side := GetSide ( first ) ;
59097: LD_ADDR_VAR 0 6
59101: PUSH
59102: LD_VAR 0 4
59106: PPUSH
59107: CALL_OW 255
59111: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59112: LD_EXP 34
59116: PPUSH
59117: LD_INT 81
59119: PUSH
59120: LD_VAR 0 6
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PPUSH
59129: CALL_OW 70
59133: IFFALSE 59137
// exit ;
59135: GO 59192
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
59137: LD_ADDR_EXP 58
59141: PUSH
59142: LD_EXP 58
59146: PPUSH
59147: LD_VAR 0 6
59151: PPUSH
59152: LD_EXP 58
59156: PUSH
59157: LD_VAR 0 6
59161: ARRAY
59162: PUSH
59163: LD_INT 1
59165: PLUS
59166: PPUSH
59167: CALL_OW 1
59171: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
59172: LD_VAR 0 6
59176: PPUSH
59177: LD_EXP 58
59181: PUSH
59182: LD_VAR 0 6
59186: ARRAY
59187: PPUSH
59188: CALL_OW 506
// end ; end ;
59192: LD_VAR 0 2
59196: RET
// function UpdateCounter ; var i ; begin
59197: LD_INT 0
59199: PPUSH
59200: PPUSH
// result := [ ] ;
59201: LD_ADDR_VAR 0 1
59205: PUSH
59206: EMPTY
59207: ST_TO_ADDR
// if mpTeamGame then
59208: LD_EXP 11
59212: IFFALSE 59279
// begin for i := 1 to mpTeams do
59214: LD_ADDR_VAR 0 2
59218: PUSH
59219: DOUBLE
59220: LD_INT 1
59222: DEC
59223: ST_TO_ADDR
59224: LD_EXP 10
59228: PUSH
59229: FOR_TO
59230: IFFALSE 59275
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
59232: LD_ADDR_VAR 0 1
59236: PUSH
59237: LD_VAR 0 1
59241: PUSH
59242: LD_STRING #KingoftheHill-Team
59244: PUSH
59245: LD_VAR 0 2
59249: PUSH
59250: LD_EXP 58
59254: PUSH
59255: LD_VAR 0 2
59259: ARRAY
59260: PUSH
59261: LD_EXP 35
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: ADD
59272: ST_TO_ADDR
59273: GO 59229
59275: POP
59276: POP
// end else
59277: GO 59352
// begin for i := 1 to 8 do
59279: LD_ADDR_VAR 0 2
59283: PUSH
59284: DOUBLE
59285: LD_INT 1
59287: DEC
59288: ST_TO_ADDR
59289: LD_INT 8
59291: PUSH
59292: FOR_TO
59293: IFFALSE 59350
// if mpSidePositions [ i ] then
59295: LD_EXP 7
59299: PUSH
59300: LD_VAR 0 2
59304: ARRAY
59305: IFFALSE 59348
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
59307: LD_ADDR_VAR 0 1
59311: PUSH
59312: LD_VAR 0 1
59316: PUSH
59317: LD_STRING #KingoftheHill-Player
59319: PUSH
59320: LD_VAR 0 2
59324: PUSH
59325: LD_EXP 58
59329: PUSH
59330: LD_VAR 0 2
59334: ARRAY
59335: PUSH
59336: LD_EXP 35
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: ADD
59347: ST_TO_ADDR
59348: GO 59292
59350: POP
59351: POP
// end ; mpDisplayStrings := result ;
59352: LD_ADDR_EXP 38
59356: PUSH
59357: LD_VAR 0 1
59361: ST_TO_ADDR
// end ;
59362: LD_VAR 0 1
59366: RET
// export function HowMuchPointsKing ( side ) ; begin
59367: LD_INT 0
59369: PPUSH
// result := HowMuchPoints ( side ) ;
59370: LD_ADDR_VAR 0 2
59374: PUSH
59375: LD_VAR 0 1
59379: PPUSH
59380: CALL 59390 0 1
59384: ST_TO_ADDR
// end ;
59385: LD_VAR 0 2
59389: RET
// function HowMuchPoints ( side ) ; var i ; begin
59390: LD_INT 0
59392: PPUSH
59393: PPUSH
// if mpTeamGame then
59394: LD_EXP 11
59398: IFFALSE 59467
// begin for i := 1 to Count ( mpTeams ) do
59400: LD_ADDR_VAR 0 3
59404: PUSH
59405: DOUBLE
59406: LD_INT 1
59408: DEC
59409: ST_TO_ADDR
59410: LD_EXP 10
59414: PPUSH
59415: CALL 12122 0 1
59419: PUSH
59420: FOR_TO
59421: IFFALSE 59463
// begin if side in mpTeams [ i ] then
59423: LD_VAR 0 1
59427: PUSH
59428: LD_EXP 10
59432: PUSH
59433: LD_VAR 0 3
59437: ARRAY
59438: IN
59439: IFFALSE 59461
// begin result := mpKingPoints [ i ] ;
59441: LD_ADDR_VAR 0 2
59445: PUSH
59446: LD_EXP 58
59450: PUSH
59451: LD_VAR 0 3
59455: ARRAY
59456: ST_TO_ADDR
// exit ;
59457: POP
59458: POP
59459: GO 59483
// end ; end ;
59461: GO 59420
59463: POP
59464: POP
// end else
59465: GO 59483
// result := mpKingPoints [ side ] ;
59467: LD_ADDR_VAR 0 2
59471: PUSH
59472: LD_EXP 58
59476: PUSH
59477: LD_VAR 0 1
59481: ARRAY
59482: ST_TO_ADDR
// end ;
59483: LD_VAR 0 2
59487: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
59488: LD_EXP 39
59492: PUSH
59493: CALL 59815 0 0
59497: AND
59498: PUSH
59499: LD_OWVAR 4
59503: AND
59504: IFFALSE 59740
59506: GO 59508
59508: DISABLE
59509: LD_INT 0
59511: PPUSH
59512: PPUSH
// begin canWin := false ;
59513: LD_ADDR_VAR 0 2
59517: PUSH
59518: LD_INT 0
59520: ST_TO_ADDR
// if not HasPower ( your_side ) then
59521: LD_OWVAR 2
59525: PPUSH
59526: CALL 59855 0 1
59530: NOT
59531: IFFALSE 59542
// begin Multiplayer_Loose_Message ;
59533: CALL_OW 521
// enable ( mpLose ) ;
59537: LD_INT 102
59539: ENABLE_MARKED
// end else
59540: GO 59740
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
59542: LD_ADDR_VAR 0 2
59546: PUSH
59547: LD_OWVAR 2
59551: PPUSH
59552: CALL 59390 0 1
59556: PUSH
59557: LD_EXP 35
59561: GREATEREQUAL
59562: PUSH
59563: LD_OWVAR 2
59567: PPUSH
59568: CALL 59855 0 1
59572: AND
59573: PUSH
59574: CALL 59743 0 0
59578: NOT
59579: OR
59580: ST_TO_ADDR
// for i := 1 to 8 do
59581: LD_ADDR_VAR 0 1
59585: PUSH
59586: DOUBLE
59587: LD_INT 1
59589: DEC
59590: ST_TO_ADDR
59591: LD_INT 8
59593: PUSH
59594: FOR_TO
59595: IFFALSE 59726
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
59597: LD_EXP 7
59601: PUSH
59602: LD_VAR 0 1
59606: ARRAY
59607: PUSH
59608: LD_VAR 0 1
59612: PPUSH
59613: CALL_OW 108
59617: AND
59618: PUSH
59619: LD_VAR 0 1
59623: PUSH
59624: LD_OWVAR 2
59628: NONEQUAL
59629: AND
59630: IFFALSE 59724
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
59632: LD_EXP 8
59636: PUSH
59637: LD_VAR 0 1
59641: ARRAY
59642: NOT
59643: PUSH
59644: LD_EXP 8
59648: PUSH
59649: LD_VAR 0 1
59653: ARRAY
59654: PUSH
59655: LD_EXP 8
59659: PUSH
59660: LD_OWVAR 2
59664: ARRAY
59665: NONEQUAL
59666: PUSH
59667: LD_OWVAR 2
59671: PPUSH
59672: LD_VAR 0 1
59676: PPUSH
59677: CALL_OW 81
59681: PUSH
59682: LD_INT 1
59684: NONEQUAL
59685: AND
59686: OR
59687: IFFALSE 59724
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
59689: LD_VAR 0 1
59693: PPUSH
59694: CALL 59390 0 1
59698: PUSH
59699: LD_EXP 35
59703: GREATEREQUAL
59704: PUSH
59705: LD_VAR 0 1
59709: PPUSH
59710: CALL 59855 0 1
59714: AND
59715: IFFALSE 59724
// begin enable ( mpLose ) ;
59717: LD_INT 102
59719: ENABLE_MARKED
// exit ;
59720: POP
59721: POP
59722: GO 59740
// end ;
59724: GO 59594
59726: POP
59727: POP
// if canWin then
59728: LD_VAR 0 2
59732: IFFALSE 59739
// enable ( mpWin ) else
59734: LD_INT 101
59736: ENABLE_MARKED
59737: GO 59740
// enable ;
59739: ENABLE
// end ; end ;
59740: PPOPN 2
59742: END
// function EnemiesInGame ; var i ; begin
59743: LD_INT 0
59745: PPUSH
59746: PPUSH
// result := false ;
59747: LD_ADDR_VAR 0 1
59751: PUSH
59752: LD_INT 0
59754: ST_TO_ADDR
// for i := 1 to 8 do
59755: LD_ADDR_VAR 0 2
59759: PUSH
59760: DOUBLE
59761: LD_INT 1
59763: DEC
59764: ST_TO_ADDR
59765: LD_INT 8
59767: PUSH
59768: FOR_TO
59769: IFFALSE 59808
// if i <> your_side and HasPower ( i ) then
59771: LD_VAR 0 2
59775: PUSH
59776: LD_OWVAR 2
59780: NONEQUAL
59781: PUSH
59782: LD_VAR 0 2
59786: PPUSH
59787: CALL 59855 0 1
59791: AND
59792: IFFALSE 59806
// begin result := true ;
59794: LD_ADDR_VAR 0 1
59798: PUSH
59799: LD_INT 1
59801: ST_TO_ADDR
// exit ;
59802: POP
59803: POP
59804: GO 59810
// end ;
59806: GO 59768
59808: POP
59809: POP
// end ;
59810: LD_VAR 0 1
59814: RET
// function CanWinLoose ; begin
59815: LD_INT 0
59817: PPUSH
// result := true ;
59818: LD_ADDR_VAR 0 1
59822: PUSH
59823: LD_INT 1
59825: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
59826: CALL_OW 531
59830: PUSH
59831: CALL_OW 519
59835: PUSH
59836: LD_INT 1
59838: GREATER
59839: AND
59840: IFFALSE 59850
// result := false ;
59842: LD_ADDR_VAR 0 1
59846: PUSH
59847: LD_INT 0
59849: ST_TO_ADDR
// end ;
59850: LD_VAR 0 1
59854: RET
// function HasPower ( i ) ; begin
59855: LD_INT 0
59857: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
59858: LD_ADDR_VAR 0 2
59862: PUSH
59863: LD_INT 22
59865: PUSH
59866: LD_VAR 0 1
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: LD_INT 21
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 33
59890: PUSH
59891: LD_INT 3
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 33
59900: PUSH
59901: LD_INT 5
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PPUSH
59918: CALL_OW 69
59922: ST_TO_ADDR
// end ; end_of_file
59923: LD_VAR 0 2
59927: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59928: PPOPN 6
59930: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
59931: LD_EXP 3
59935: PUSH
59936: LD_INT 4
59938: EQUAL
59939: IFFALSE 59975
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59941: LD_STRING setGameDifficulty(
59943: PUSH
59944: LD_OWVAR 67
59948: STR
59949: PUSH
59950: LD_STRING )
59952: STR
59953: PPUSH
59954: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59958: LD_STRING displayDifficulty(
59960: PUSH
59961: LD_OWVAR 67
59965: STR
59966: PUSH
59967: LD_STRING )
59969: STR
59970: PPUSH
59971: CALL_OW 559
// end ; SOS_MapStart ( ) ;
59975: CALL 60004 0 0
// end ; end_of_file
59979: PPOPN 1
59981: END
// every 0 0$1 do
59982: GO 59984
59984: DISABLE
// begin enable ;
59985: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59986: LD_STRING updateTimer(
59988: PUSH
59989: LD_OWVAR 1
59993: STR
59994: PUSH
59995: LD_STRING );
59997: STR
59998: PPUSH
59999: CALL_OW 559
// end ;
60003: END
// export function SOS_MapStart ( ) ; begin
60004: LD_INT 0
60006: PPUSH
// UpdateFactoryWaypoints ( ) ;
60007: CALL 60932 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60011: CALL 61184 0 0
// ParseMultiDataToLua ( ) ;
60015: CALL 61331 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60019: LD_STRING setSpecLogoNumber(
60021: PUSH
60022: LD_INT 2
60024: STR
60025: PUSH
60026: LD_STRING ,
60028: STR
60029: PUSH
60030: LD_INT 1
60032: STR
60033: PUSH
60034: LD_STRING )
60036: STR
60037: PPUSH
60038: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60042: LD_STRING setSpecLogoNumber(
60044: PUSH
60045: LD_INT 3
60047: STR
60048: PUSH
60049: LD_STRING ,
60051: STR
60052: PUSH
60053: LD_INT 2
60055: STR
60056: PUSH
60057: LD_STRING )
60059: STR
60060: PPUSH
60061: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
60065: LD_STRING setSpecLogoNumber(
60067: PUSH
60068: LD_INT 4
60070: STR
60071: PUSH
60072: LD_STRING ,
60074: STR
60075: PUSH
60076: LD_INT 3
60078: STR
60079: PUSH
60080: LD_STRING )
60082: STR
60083: PPUSH
60084: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
60088: LD_STRING setSpecLogoNumber(
60090: PUSH
60091: LD_INT 5
60093: STR
60094: PUSH
60095: LD_STRING ,
60097: STR
60098: PUSH
60099: LD_INT 4
60101: STR
60102: PUSH
60103: LD_STRING )
60105: STR
60106: PPUSH
60107: CALL_OW 559
// end ;
60111: LD_VAR 0 1
60115: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
60116: LD_INT 0
60118: PPUSH
60119: PPUSH
60120: PPUSH
60121: PPUSH
60122: PPUSH
60123: PPUSH
60124: PPUSH
60125: PPUSH
60126: PPUSH
// for i := 1 to 8 do
60127: LD_ADDR_VAR 0 2
60131: PUSH
60132: DOUBLE
60133: LD_INT 1
60135: DEC
60136: ST_TO_ADDR
60137: LD_INT 8
60139: PUSH
60140: FOR_TO
60141: IFFALSE 60526
// begin if mpSidePositions [ i ] then
60143: LD_EXP 7
60147: PUSH
60148: LD_VAR 0 2
60152: ARRAY
60153: IFFALSE 60524
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
60155: LD_ADDR_VAR 0 7
60159: PUSH
60160: LD_INT 22
60162: PUSH
60163: LD_VAR 0 2
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 21
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PPUSH
60186: CALL_OW 69
60190: PPUSH
60191: CALL 12122 0 1
60195: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60196: LD_ADDR_VAR 0 9
60200: PUSH
60201: LD_INT 22
60203: PUSH
60204: LD_VAR 0 2
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: LD_INT 30
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 30
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: LIST
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PPUSH
60245: CALL_OW 69
60249: ST_TO_ADDR
// crates := 0 ;
60250: LD_ADDR_VAR 0 4
60254: PUSH
60255: LD_INT 0
60257: ST_TO_ADDR
// oil := 0 ;
60258: LD_ADDR_VAR 0 5
60262: PUSH
60263: LD_INT 0
60265: ST_TO_ADDR
// sib := 0 ;
60266: LD_ADDR_VAR 0 6
60270: PUSH
60271: LD_INT 0
60273: ST_TO_ADDR
// if bases then
60274: LD_VAR 0 9
60278: IFFALSE 60384
// begin for j in bases do
60280: LD_ADDR_VAR 0 3
60284: PUSH
60285: LD_VAR 0 9
60289: PUSH
60290: FOR_IN
60291: IFFALSE 60382
// begin base := GetBase ( j ) ;
60293: LD_ADDR_VAR 0 8
60297: PUSH
60298: LD_VAR 0 3
60302: PPUSH
60303: CALL_OW 274
60307: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
60308: LD_ADDR_VAR 0 4
60312: PUSH
60313: LD_VAR 0 4
60317: PUSH
60318: LD_VAR 0 8
60322: PPUSH
60323: LD_INT 1
60325: PPUSH
60326: CALL_OW 275
60330: PLUS
60331: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
60332: LD_ADDR_VAR 0 5
60336: PUSH
60337: LD_VAR 0 5
60341: PUSH
60342: LD_VAR 0 8
60346: PPUSH
60347: LD_INT 2
60349: PPUSH
60350: CALL_OW 275
60354: PLUS
60355: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
60356: LD_ADDR_VAR 0 6
60360: PUSH
60361: LD_VAR 0 6
60365: PUSH
60366: LD_VAR 0 8
60370: PPUSH
60371: LD_INT 3
60373: PPUSH
60374: CALL_OW 275
60378: PLUS
60379: ST_TO_ADDR
// end ;
60380: GO 60290
60382: POP
60383: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
60384: LD_STRING setSpecText(
60386: PUSH
60387: LD_VAR 0 2
60391: STR
60392: PUSH
60393: LD_STRING ,
60395: STR
60396: PUSH
60397: LD_INT 2
60399: STR
60400: PUSH
60401: LD_STRING ,
60403: STR
60404: PUSH
60405: LD_VAR 0 4
60409: STR
60410: PUSH
60411: LD_STRING )
60413: STR
60414: PPUSH
60415: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
60419: LD_STRING setSpecText(
60421: PUSH
60422: LD_VAR 0 2
60426: STR
60427: PUSH
60428: LD_STRING ,
60430: STR
60431: PUSH
60432: LD_INT 3
60434: STR
60435: PUSH
60436: LD_STRING ,
60438: STR
60439: PUSH
60440: LD_VAR 0 5
60444: STR
60445: PUSH
60446: LD_STRING )
60448: STR
60449: PPUSH
60450: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
60454: LD_STRING setSpecText(
60456: PUSH
60457: LD_VAR 0 2
60461: STR
60462: PUSH
60463: LD_STRING ,
60465: STR
60466: PUSH
60467: LD_INT 4
60469: STR
60470: PUSH
60471: LD_STRING ,
60473: STR
60474: PUSH
60475: LD_VAR 0 6
60479: STR
60480: PUSH
60481: LD_STRING )
60483: STR
60484: PPUSH
60485: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
60489: LD_STRING setSpecText(
60491: PUSH
60492: LD_VAR 0 2
60496: STR
60497: PUSH
60498: LD_STRING ,
60500: STR
60501: PUSH
60502: LD_INT 5
60504: STR
60505: PUSH
60506: LD_STRING ,
60508: STR
60509: PUSH
60510: LD_VAR 0 7
60514: STR
60515: PUSH
60516: LD_STRING )
60518: STR
60519: PPUSH
60520: CALL_OW 559
// end ; end ;
60524: GO 60140
60526: POP
60527: POP
// end ;
60528: LD_VAR 0 1
60532: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
60533: LD_INT 2
60535: PUSH
60536: LD_INT 30
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 30
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: LIST
60560: PPUSH
60561: CALL_OW 69
60565: IFFALSE 60575
60567: GO 60569
60569: DISABLE
// begin enable ;
60570: ENABLE
// UpdateSpectatorBar ;
60571: CALL 60116 0 0
// end ;
60575: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60576: LD_INT 0
60578: PPUSH
// end ;
60579: LD_VAR 0 12
60583: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
60584: LD_INT 0
60586: PPUSH
60587: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
60588: LD_VAR 0 1
60592: NOT
60593: PUSH
60594: LD_VAR 0 2
60598: PPUSH
60599: LD_VAR 0 3
60603: PPUSH
60604: CALL_OW 488
60608: NOT
60609: OR
60610: PUSH
60611: LD_VAR 0 1
60615: PPUSH
60616: CALL_OW 266
60620: PUSH
60621: LD_INT 3
60623: NONEQUAL
60624: PUSH
60625: LD_VAR 0 1
60629: PPUSH
60630: CALL_OW 247
60634: PUSH
60635: LD_INT 1
60637: EQUAL
60638: NOT
60639: AND
60640: OR
60641: IFFALSE 60645
// exit ;
60643: GO 60927
// if GetType ( factory ) = unit_human then
60645: LD_VAR 0 1
60649: PPUSH
60650: CALL_OW 247
60654: PUSH
60655: LD_INT 1
60657: EQUAL
60658: IFFALSE 60675
// factory := IsInUnit ( factory ) ;
60660: LD_ADDR_VAR 0 1
60664: PUSH
60665: LD_VAR 0 1
60669: PPUSH
60670: CALL_OW 310
60674: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60675: LD_VAR 0 1
60679: PPUSH
60680: CALL_OW 266
60684: PUSH
60685: LD_INT 3
60687: NONEQUAL
60688: IFFALSE 60692
// exit ;
60690: GO 60927
// for i := 1 to Count ( factoryWaypoints ) do
60692: LD_ADDR_VAR 0 5
60696: PUSH
60697: DOUBLE
60698: LD_INT 1
60700: DEC
60701: ST_TO_ADDR
60702: LD_EXP 59
60706: PPUSH
60707: CALL 12122 0 1
60711: PUSH
60712: FOR_TO
60713: IFFALSE 60875
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
60715: LD_VAR 0 2
60719: PPUSH
60720: LD_VAR 0 3
60724: PPUSH
60725: CALL_OW 428
60729: PUSH
60730: LD_EXP 59
60734: PUSH
60735: LD_VAR 0 5
60739: ARRAY
60740: PUSH
60741: LD_INT 2
60743: ARRAY
60744: EQUAL
60745: IFFALSE 60777
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60747: LD_ADDR_EXP 59
60751: PUSH
60752: LD_EXP 59
60756: PPUSH
60757: LD_VAR 0 5
60761: PPUSH
60762: CALL_OW 3
60766: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60767: CALL 60932 0 0
// exit ;
60771: POP
60772: POP
60773: GO 60927
// end else
60775: GO 60873
// if factory = factoryWaypoints [ i ] [ 2 ] then
60777: LD_VAR 0 1
60781: PUSH
60782: LD_EXP 59
60786: PUSH
60787: LD_VAR 0 5
60791: ARRAY
60792: PUSH
60793: LD_INT 2
60795: ARRAY
60796: EQUAL
60797: IFFALSE 60873
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60799: LD_ADDR_EXP 59
60803: PUSH
60804: LD_EXP 59
60808: PPUSH
60809: LD_VAR 0 5
60813: PPUSH
60814: CALL_OW 3
60818: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60819: LD_ADDR_EXP 59
60823: PUSH
60824: LD_EXP 59
60828: PPUSH
60829: LD_VAR 0 1
60833: PPUSH
60834: CALL_OW 255
60838: PUSH
60839: LD_VAR 0 1
60843: PUSH
60844: LD_VAR 0 2
60848: PUSH
60849: LD_VAR 0 3
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: PPUSH
60860: CALL 47731 0 2
60864: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60865: CALL 60932 0 0
// exit ;
60869: POP
60870: POP
60871: GO 60927
// end ; end ;
60873: GO 60712
60875: POP
60876: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60877: LD_ADDR_EXP 59
60881: PUSH
60882: LD_EXP 59
60886: PPUSH
60887: LD_VAR 0 1
60891: PPUSH
60892: CALL_OW 255
60896: PUSH
60897: LD_VAR 0 1
60901: PUSH
60902: LD_VAR 0 2
60906: PUSH
60907: LD_VAR 0 3
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: PPUSH
60918: CALL 47731 0 2
60922: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60923: CALL 60932 0 0
// end ;
60927: LD_VAR 0 4
60931: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60932: LD_INT 0
60934: PPUSH
60935: PPUSH
60936: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60937: LD_STRING resetFactoryWaypoint();
60939: PPUSH
60940: CALL_OW 559
// if factoryWaypoints then
60944: LD_EXP 59
60948: IFFALSE 61069
// begin list := factoryWaypoints ;
60950: LD_ADDR_VAR 0 3
60954: PUSH
60955: LD_EXP 59
60959: ST_TO_ADDR
// for i := 1 to list do
60960: LD_ADDR_VAR 0 2
60964: PUSH
60965: DOUBLE
60966: LD_INT 1
60968: DEC
60969: ST_TO_ADDR
60970: LD_VAR 0 3
60974: PUSH
60975: FOR_TO
60976: IFFALSE 61067
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60978: LD_STRING setFactoryWaypointXY(
60980: PUSH
60981: LD_VAR 0 3
60985: PUSH
60986: LD_VAR 0 2
60990: ARRAY
60991: PUSH
60992: LD_INT 1
60994: ARRAY
60995: STR
60996: PUSH
60997: LD_STRING ,
60999: STR
61000: PUSH
61001: LD_VAR 0 3
61005: PUSH
61006: LD_VAR 0 2
61010: ARRAY
61011: PUSH
61012: LD_INT 2
61014: ARRAY
61015: STR
61016: PUSH
61017: LD_STRING ,
61019: STR
61020: PUSH
61021: LD_VAR 0 3
61025: PUSH
61026: LD_VAR 0 2
61030: ARRAY
61031: PUSH
61032: LD_INT 3
61034: ARRAY
61035: STR
61036: PUSH
61037: LD_STRING ,
61039: STR
61040: PUSH
61041: LD_VAR 0 3
61045: PUSH
61046: LD_VAR 0 2
61050: ARRAY
61051: PUSH
61052: LD_INT 4
61054: ARRAY
61055: STR
61056: PUSH
61057: LD_STRING )
61059: STR
61060: PPUSH
61061: CALL_OW 559
61065: GO 60975
61067: POP
61068: POP
// end ; end ;
61069: LD_VAR 0 1
61073: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61074: LD_INT 0
61076: PPUSH
// if HexInfo ( x , y ) = warehouse then
61077: LD_VAR 0 2
61081: PPUSH
61082: LD_VAR 0 3
61086: PPUSH
61087: CALL_OW 428
61091: PUSH
61092: LD_VAR 0 1
61096: EQUAL
61097: IFFALSE 61124
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61099: LD_ADDR_EXP 61
61103: PUSH
61104: LD_EXP 61
61108: PPUSH
61109: LD_VAR 0 1
61113: PPUSH
61114: LD_INT 0
61116: PPUSH
61117: CALL_OW 1
61121: ST_TO_ADDR
61122: GO 61175
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61124: LD_ADDR_EXP 61
61128: PUSH
61129: LD_EXP 61
61133: PPUSH
61134: LD_VAR 0 1
61138: PPUSH
61139: LD_VAR 0 1
61143: PPUSH
61144: CALL_OW 255
61148: PUSH
61149: LD_VAR 0 1
61153: PUSH
61154: LD_VAR 0 2
61158: PUSH
61159: LD_VAR 0 3
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: PPUSH
61170: CALL_OW 1
61174: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61175: CALL 61184 0 0
// end ;
61179: LD_VAR 0 4
61183: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61184: LD_INT 0
61186: PPUSH
61187: PPUSH
61188: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61189: LD_STRING resetWarehouseGatheringPoints();
61191: PPUSH
61192: CALL_OW 559
// if warehouseGatheringPoints then
61196: LD_EXP 61
61200: IFFALSE 61326
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61202: LD_ADDR_VAR 0 3
61206: PUSH
61207: LD_EXP 61
61211: PPUSH
61212: CALL 51499 0 1
61216: ST_TO_ADDR
// for i := 1 to list do
61217: LD_ADDR_VAR 0 2
61221: PUSH
61222: DOUBLE
61223: LD_INT 1
61225: DEC
61226: ST_TO_ADDR
61227: LD_VAR 0 3
61231: PUSH
61232: FOR_TO
61233: IFFALSE 61324
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61235: LD_STRING setWarehouseGatheringPointXY(
61237: PUSH
61238: LD_VAR 0 3
61242: PUSH
61243: LD_VAR 0 2
61247: ARRAY
61248: PUSH
61249: LD_INT 1
61251: ARRAY
61252: STR
61253: PUSH
61254: LD_STRING ,
61256: STR
61257: PUSH
61258: LD_VAR 0 3
61262: PUSH
61263: LD_VAR 0 2
61267: ARRAY
61268: PUSH
61269: LD_INT 2
61271: ARRAY
61272: STR
61273: PUSH
61274: LD_STRING ,
61276: STR
61277: PUSH
61278: LD_VAR 0 3
61282: PUSH
61283: LD_VAR 0 2
61287: ARRAY
61288: PUSH
61289: LD_INT 3
61291: ARRAY
61292: STR
61293: PUSH
61294: LD_STRING ,
61296: STR
61297: PUSH
61298: LD_VAR 0 3
61302: PUSH
61303: LD_VAR 0 2
61307: ARRAY
61308: PUSH
61309: LD_INT 4
61311: ARRAY
61312: STR
61313: PUSH
61314: LD_STRING )
61316: STR
61317: PPUSH
61318: CALL_OW 559
61322: GO 61232
61324: POP
61325: POP
// end ; end ;
61326: LD_VAR 0 1
61330: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
61331: LD_INT 0
61333: PPUSH
61334: PPUSH
// if not mpSidePositions then
61335: LD_EXP 7
61339: NOT
61340: IFFALSE 61344
// exit ;
61342: GO 61415
// result :=  ;
61344: LD_ADDR_VAR 0 1
61348: PUSH
61349: LD_STRING 
61351: ST_TO_ADDR
// for i := 1 to 8 do
61352: LD_ADDR_VAR 0 2
61356: PUSH
61357: DOUBLE
61358: LD_INT 1
61360: DEC
61361: ST_TO_ADDR
61362: LD_INT 8
61364: PUSH
61365: FOR_TO
61366: IFFALSE 61396
// begin result := result & mpSidePositions [ i ] & ; ;
61368: LD_ADDR_VAR 0 1
61372: PUSH
61373: LD_VAR 0 1
61377: PUSH
61378: LD_EXP 7
61382: PUSH
61383: LD_VAR 0 2
61387: ARRAY
61388: STR
61389: PUSH
61390: LD_STRING ;
61392: STR
61393: ST_TO_ADDR
// end ;
61394: GO 61365
61396: POP
61397: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
61398: LD_STRING setMultiplayerRealPosition("
61400: PUSH
61401: LD_VAR 0 1
61405: STR
61406: PUSH
61407: LD_STRING ");
61409: STR
61410: PPUSH
61411: CALL_OW 559
// end ;
61415: LD_VAR 0 1
61419: RET
