// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2738 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3114 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 2 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 2
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 3 , 0 , 3 , 3 , 3 , 3 , 3 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 3
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 3
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 220 , 160 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 220
 809: PUSH
 810: LD_INT 160
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 8
 838: PUSH
 839: LD_INT 9
 841: PUSH
 842: LD_INT 10
 844: PUSH
 845: LD_INT 11
 847: PUSH
 848: LD_INT 12
 850: PUSH
 851: LD_INT 13
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_EXP 19
 871: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 872: LD_VAR 0 1
 876: PUSH
 877: LD_INT 2
 879: EQUAL
 880: IFFALSE 892
// baseLevel := 1 else
 882: LD_ADDR_VAR 0 7
 886: PUSH
 887: LD_INT 1
 889: ST_TO_ADDR
 890: GO 906
// baseLevel := mpGameSettings [ 1 ] ;
 892: LD_ADDR_VAR 0 7
 896: PUSH
 897: LD_EXP 6
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 906: LD_ADDR_EXP 24
 910: PUSH
 911: LD_EXP 6
 915: PUSH
 916: LD_INT 2
 918: ARRAY
 919: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 920: LD_ADDR_EXP 25
 924: PUSH
 925: LD_EXP 6
 929: PUSH
 930: LD_INT 3
 932: ARRAY
 933: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 934: LD_ADDR_EXP 15
 938: PUSH
 939: LD_EXP 6
 943: PUSH
 944: LD_INT 4
 946: ARRAY
 947: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 948: LD_ADDR_EXP 27
 952: PUSH
 953: LD_EXP 6
 957: PUSH
 958: LD_INT 5
 960: ARRAY
 961: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 962: LD_ADDR_VAR 0 5
 966: PUSH
 967: LD_EXP 6
 971: PUSH
 972: LD_INT 6
 974: ARRAY
 975: PUSH
 976: LD_INT 0
 978: GREATER
 979: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 980: LD_ADDR_VAR 0 6
 984: PUSH
 985: LD_EXP 6
 989: PUSH
 990: LD_INT 7
 992: ARRAY
 993: PUSH
 994: LD_INT 0
 996: GREATER
 997: ST_TO_ADDR
// mpKingArea := 0 ;
 998: LD_ADDR_EXP 34
1002: PUSH
1003: LD_INT 0
1005: ST_TO_ADDR
// mpPoints := 0 ;
1006: LD_ADDR_EXP 35
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// mpEmissions := 0 ;
1014: LD_ADDR_EXP 37
1018: PUSH
1019: LD_INT 0
1021: ST_TO_ADDR
// kingArea := 0 ;
1022: LD_ADDR_EXP 1
1026: PUSH
1027: LD_INT 0
1029: ST_TO_ADDR
// kingCamArea := 0 ;
1030: LD_ADDR_EXP 2
1034: PUSH
1035: LD_INT 0
1037: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1038: LD_EXP 6
1042: PUSH
1043: LD_INT 9
1045: ARRAY
1046: IFFALSE 1178
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1048: LD_ADDR_EXP 36
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 3
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 12
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 24
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 12
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 23
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 21
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 42
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 21
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 42
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: LIST
1177: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1178: LD_ADDR_EXP 16
1182: PUSH
1183: LD_EXP 6
1187: PUSH
1188: LD_INT 11
1190: ARRAY
1191: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1192: LD_ADDR_EXP 22
1196: PUSH
1197: LD_EXP 6
1201: PUSH
1202: LD_INT 12
1204: ARRAY
1205: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1206: LD_ADDR_EXP 26
1210: PUSH
1211: LD_EXP 6
1215: PUSH
1216: LD_INT 13
1218: ARRAY
1219: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1220: LD_ADDR_EXP 33
1224: PUSH
1225: LD_EXP 6
1229: PUSH
1230: LD_INT 14
1232: ARRAY
1233: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1234: LD_ADDR_EXP 30
1238: PUSH
1239: LD_EXP 6
1243: PUSH
1244: LD_INT 15
1246: ARRAY
1247: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1248: LD_ADDR_EXP 28
1252: PUSH
1253: LD_EXP 6
1257: PUSH
1258: LD_INT 18
1260: ARRAY
1261: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1262: LD_ADDR_EXP 20
1266: PUSH
1267: LD_EXP 6
1271: PUSH
1272: LD_INT 21
1274: ARRAY
1275: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1276: LD_ADDR_EXP 31
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 3
1286: PUSH
1287: LD_INT 4
1289: PUSH
1290: LD_INT 5
1292: PUSH
1293: LD_INT 6
1295: PUSH
1296: LD_INT 7
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 5 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) ] ;
1307: LD_ADDR_VAR 0 8
1311: PUSH
1312: LD_INT 16
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: CALL 52875 0 2
1322: PUSH
1323: LD_INT 17
1325: PPUSH
1326: LD_INT 2
1328: PPUSH
1329: CALL 52875 0 2
1333: PUSH
1334: LD_INT 18
1336: PPUSH
1337: LD_INT 3
1339: PPUSH
1340: CALL 52875 0 2
1344: PUSH
1345: LD_INT 19
1347: PPUSH
1348: LD_INT 5
1350: PPUSH
1351: CALL 52875 0 2
1355: PUSH
1356: LD_INT 20
1358: PPUSH
1359: LD_INT 5
1361: PPUSH
1362: CALL 52875 0 2
1366: PUSH
1367: LD_INT 21
1369: PPUSH
1370: LD_INT 0
1372: PPUSH
1373: CALL 52875 0 2
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: DOUBLE
1392: LD_INT 1
1394: DEC
1395: ST_TO_ADDR
1396: LD_VAR 0 8
1400: PPUSH
1401: CALL 12224 0 1
1405: PUSH
1406: FOR_TO
1407: IFFALSE 1511
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1409: LD_ADDR_EXP 21
1413: PUSH
1414: LD_EXP 21
1418: PPUSH
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_VAR 0 8
1428: PUSH
1429: LD_VAR 0 3
1433: ARRAY
1434: PUSH
1435: LD_INT 1
1437: ARRAY
1438: PPUSH
1439: LD_VAR 0 8
1443: PUSH
1444: LD_VAR 0 3
1448: ARRAY
1449: PUSH
1450: LD_INT 3
1452: ARRAY
1453: PPUSH
1454: LD_INT 10
1456: PPUSH
1457: CALL_OW 272
1461: PUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 2
1475: ARRAY
1476: PPUSH
1477: LD_VAR 0 8
1481: PUSH
1482: LD_VAR 0 3
1486: ARRAY
1487: PUSH
1488: LD_INT 3
1490: ARRAY
1491: PPUSH
1492: LD_INT 10
1494: PPUSH
1495: CALL_OW 273
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 1
1508: ST_TO_ADDR
1509: GO 1406
1511: POP
1512: POP
// if hasOil then
1513: LD_VAR 0 5
1517: IFFALSE 1628
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1519: LD_ADDR_VAR 0 4
1523: PUSH
1524: LD_EXP 6
1528: PUSH
1529: LD_INT 6
1531: ARRAY
1532: PUSH
1533: LD_INT 2
1535: EQUAL
1536: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1537: LD_ADDR_EXP 12
1541: PUSH
1542: LD_INT 22
1544: PPUSH
1545: LD_VAR 0 4
1549: PPUSH
1550: CALL 52708 0 2
1554: PUSH
1555: LD_INT 24
1557: PPUSH
1558: LD_VAR 0 4
1562: PPUSH
1563: CALL 52708 0 2
1567: PUSH
1568: LD_INT 26
1570: PPUSH
1571: LD_VAR 0 4
1575: PPUSH
1576: CALL 52708 0 2
1580: PUSH
1581: LD_INT 28
1583: PPUSH
1584: LD_VAR 0 4
1588: PPUSH
1589: CALL 52708 0 2
1593: PUSH
1594: LD_INT 30
1596: PPUSH
1597: LD_VAR 0 4
1601: PPUSH
1602: CALL 52708 0 2
1606: PUSH
1607: LD_INT 32
1609: PPUSH
1610: LD_VAR 0 4
1614: PPUSH
1615: CALL 52708 0 2
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: ST_TO_ADDR
// end ; if hasSib then
1628: LD_VAR 0 6
1632: IFFALSE 1743
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1634: LD_ADDR_VAR 0 4
1638: PUSH
1639: LD_EXP 6
1643: PUSH
1644: LD_INT 7
1646: ARRAY
1647: PUSH
1648: LD_INT 2
1650: EQUAL
1651: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1652: LD_ADDR_EXP 13
1656: PUSH
1657: LD_INT 23
1659: PPUSH
1660: LD_VAR 0 4
1664: PPUSH
1665: CALL 52708 0 2
1669: PUSH
1670: LD_INT 25
1672: PPUSH
1673: LD_VAR 0 4
1677: PPUSH
1678: CALL 52708 0 2
1682: PUSH
1683: LD_INT 27
1685: PPUSH
1686: LD_VAR 0 4
1690: PPUSH
1691: CALL 52708 0 2
1695: PUSH
1696: LD_INT 29
1698: PPUSH
1699: LD_VAR 0 4
1703: PPUSH
1704: CALL 52708 0 2
1708: PUSH
1709: LD_INT 31
1711: PPUSH
1712: LD_VAR 0 4
1716: PPUSH
1717: CALL 52708 0 2
1721: PUSH
1722: LD_INT 33
1724: PPUSH
1725: LD_VAR 0 4
1729: PPUSH
1730: CALL 52708 0 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1743: LD_VAR 0 7
1747: PUSH
1748: LD_INT 1
1750: GREATEREQUAL
1751: IFFALSE 1763
// mpDepots := startPos ;
1753: LD_ADDR_EXP 14
1757: PUSH
1758: LD_VAR 0 8
1762: ST_TO_ADDR
// if baseLevel >= 2 then
1763: LD_VAR 0 7
1767: PUSH
1768: LD_INT 2
1770: GREATEREQUAL
1771: IFFALSE 2086
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] ] ;
1773: LD_ADDR_EXP 17
1777: PUSH
1778: LD_INT 31
1780: PUSH
1781: LD_INT 35
1783: PPUSH
1784: LD_INT 5
1786: PPUSH
1787: CALL 52875 0 2
1791: ADD
1792: PUSH
1793: LD_INT 31
1795: PUSH
1796: LD_INT 36
1798: PPUSH
1799: LD_INT 5
1801: PPUSH
1802: CALL 52875 0 2
1806: ADD
1807: PUSH
1808: LD_INT 4
1810: PUSH
1811: LD_INT 34
1813: PPUSH
1814: LD_INT 5
1816: PPUSH
1817: CALL 52875 0 2
1821: ADD
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 31
1830: PUSH
1831: LD_INT 38
1833: PPUSH
1834: LD_INT 5
1836: PPUSH
1837: CALL 52875 0 2
1841: ADD
1842: PUSH
1843: LD_INT 31
1845: PUSH
1846: LD_INT 39
1848: PPUSH
1849: LD_INT 0
1851: PPUSH
1852: CALL 52875 0 2
1856: ADD
1857: PUSH
1858: LD_INT 4
1860: PUSH
1861: LD_INT 37
1863: PPUSH
1864: LD_INT 5
1866: PPUSH
1867: CALL 52875 0 2
1871: ADD
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 31
1880: PUSH
1881: LD_INT 41
1883: PPUSH
1884: LD_INT 0
1886: PPUSH
1887: CALL 52875 0 2
1891: ADD
1892: PUSH
1893: LD_INT 31
1895: PUSH
1896: LD_INT 42
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL 52875 0 2
1906: ADD
1907: PUSH
1908: LD_INT 4
1910: PUSH
1911: LD_INT 40
1913: PPUSH
1914: LD_INT 0
1916: PPUSH
1917: CALL 52875 0 2
1921: ADD
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 31
1930: PUSH
1931: LD_INT 44
1933: PPUSH
1934: LD_INT 2
1936: PPUSH
1937: CALL 52875 0 2
1941: ADD
1942: PUSH
1943: LD_INT 31
1945: PUSH
1946: LD_INT 45
1948: PPUSH
1949: LD_INT 2
1951: PPUSH
1952: CALL 52875 0 2
1956: ADD
1957: PUSH
1958: LD_INT 4
1960: PUSH
1961: LD_INT 43
1963: PPUSH
1964: LD_INT 2
1966: PPUSH
1967: CALL 52875 0 2
1971: ADD
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 31
1980: PUSH
1981: LD_INT 47
1983: PPUSH
1984: LD_INT 2
1986: PPUSH
1987: CALL 52875 0 2
1991: ADD
1992: PUSH
1993: LD_INT 31
1995: PUSH
1996: LD_INT 48
1998: PPUSH
1999: LD_INT 3
2001: PPUSH
2002: CALL 52875 0 2
2006: ADD
2007: PUSH
2008: LD_INT 4
2010: PUSH
2011: LD_INT 46
2013: PPUSH
2014: LD_INT 2
2016: PPUSH
2017: CALL 52875 0 2
2021: ADD
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 31
2030: PUSH
2031: LD_INT 50
2033: PPUSH
2034: LD_INT 3
2036: PPUSH
2037: CALL 52875 0 2
2041: ADD
2042: PUSH
2043: LD_INT 31
2045: PUSH
2046: LD_INT 51
2048: PPUSH
2049: LD_INT 3
2051: PPUSH
2052: CALL 52875 0 2
2056: ADD
2057: PUSH
2058: LD_INT 4
2060: PUSH
2061: LD_INT 49
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL 52875 0 2
2071: ADD
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: ST_TO_ADDR
// end ; end ;
2086: LD_VAR 0 2
2090: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2091: GO 2093
2093: DISABLE
2094: LD_INT 0
2096: PPUSH
2097: PPUSH
2098: PPUSH
2099: PPUSH
2100: PPUSH
2101: PPUSH
2102: PPUSH
2103: PPUSH
// begin if not mpShipments then
2104: LD_EXP 27
2108: NOT
2109: IFFALSE 2113
// exit ;
2111: GO 2651
// case mpShipments of 1 :
2113: LD_EXP 27
2117: PUSH
2118: LD_INT 1
2120: DOUBLE
2121: EQUAL
2122: IFTRUE 2126
2124: GO 2161
2126: POP
// begin time := 0 0$30 ;
2127: LD_ADDR_VAR 0 4
2131: PUSH
2132: LD_INT 1050
2134: ST_TO_ADDR
// normalTime := 0 0$30 ;
2135: LD_ADDR_VAR 0 6
2139: PUSH
2140: LD_INT 1050
2142: ST_TO_ADDR
// maxTime := 1 1$20 ;
2143: LD_ADDR_VAR 0 8
2147: PUSH
2148: LD_INT 2800
2150: ST_TO_ADDR
// delayTime := 0 0$5 ;
2151: LD_ADDR_VAR 0 7
2155: PUSH
2156: LD_INT 175
2158: ST_TO_ADDR
// end ; 2 :
2159: GO 2291
2161: LD_INT 2
2163: DOUBLE
2164: EQUAL
2165: IFTRUE 2169
2167: GO 2204
2169: POP
// begin time := 0 0$25 ;
2170: LD_ADDR_VAR 0 4
2174: PUSH
2175: LD_INT 875
2177: ST_TO_ADDR
// normalTime := 0 0$25 ;
2178: LD_ADDR_VAR 0 6
2182: PUSH
2183: LD_INT 875
2185: ST_TO_ADDR
// maxTime := 1 1$10 ;
2186: LD_ADDR_VAR 0 8
2190: PUSH
2191: LD_INT 2450
2193: ST_TO_ADDR
// delayTime := 0 0$4 ;
2194: LD_ADDR_VAR 0 7
2198: PUSH
2199: LD_INT 140
2201: ST_TO_ADDR
// end ; 3 :
2202: GO 2291
2204: LD_INT 3
2206: DOUBLE
2207: EQUAL
2208: IFTRUE 2212
2210: GO 2247
2212: POP
// begin time := 0 0$20 ;
2213: LD_ADDR_VAR 0 4
2217: PUSH
2218: LD_INT 700
2220: ST_TO_ADDR
// normalTime := 0 0$20 ;
2221: LD_ADDR_VAR 0 6
2225: PUSH
2226: LD_INT 700
2228: ST_TO_ADDR
// maxTime := 1 1$00 ;
2229: LD_ADDR_VAR 0 8
2233: PUSH
2234: LD_INT 2100
2236: ST_TO_ADDR
// delayTime := 0 0$3 ;
2237: LD_ADDR_VAR 0 7
2241: PUSH
2242: LD_INT 105
2244: ST_TO_ADDR
// end ; 4 :
2245: GO 2291
2247: LD_INT 4
2249: DOUBLE
2250: EQUAL
2251: IFTRUE 2255
2253: GO 2290
2255: POP
// begin time := 0 0$15 ;
2256: LD_ADDR_VAR 0 4
2260: PUSH
2261: LD_INT 525
2263: ST_TO_ADDR
// normalTime := 0 0$15 ;
2264: LD_ADDR_VAR 0 6
2268: PUSH
2269: LD_INT 525
2271: ST_TO_ADDR
// maxTime := 0 0$55 ;
2272: LD_ADDR_VAR 0 8
2276: PUSH
2277: LD_INT 1925
2279: ST_TO_ADDR
// delayTime := 0 0$2 ;
2280: LD_ADDR_VAR 0 7
2284: PUSH
2285: LD_INT 70
2287: ST_TO_ADDR
// end ; end ;
2288: GO 2291
2290: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_INT 8
2298: PUSH
2299: LD_INT 9
2301: PUSH
2302: LD_INT 10
2304: PUSH
2305: LD_INT 11
2307: PUSH
2308: LD_INT 12
2310: PUSH
2311: LD_INT 13
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: ST_TO_ADDR
// areas := [ ] ;
2322: LD_ADDR_VAR 0 5
2326: PUSH
2327: EMPTY
2328: ST_TO_ADDR
// for i := 1 to 8 do
2329: LD_ADDR_VAR 0 1
2333: PUSH
2334: DOUBLE
2335: LD_INT 1
2337: DEC
2338: ST_TO_ADDR
2339: LD_INT 8
2341: PUSH
2342: FOR_TO
2343: IFFALSE 2390
// begin if not mpSidePositions [ i ] then
2345: LD_EXP 7
2349: PUSH
2350: LD_VAR 0 1
2354: ARRAY
2355: NOT
2356: IFFALSE 2360
// continue ;
2358: GO 2342
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2360: LD_ADDR_VAR 0 5
2364: PUSH
2365: LD_VAR 0 5
2369: PUSH
2370: LD_VAR 0 3
2374: PUSH
2375: LD_EXP 7
2379: PUSH
2380: LD_VAR 0 1
2384: ARRAY
2385: ARRAY
2386: ADD
2387: ST_TO_ADDR
// end ;
2388: GO 2342
2390: POP
2391: POP
// x := 1 ;
2392: LD_ADDR_VAR 0 2
2396: PUSH
2397: LD_INT 1
2399: ST_TO_ADDR
// repeat wait ( time ) ;
2400: LD_VAR 0 4
2404: PPUSH
2405: CALL_OW 67
// x := Inc ( x ) ;
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL 49529 0 1
2423: ST_TO_ADDR
// if x > 5 then
2424: LD_VAR 0 2
2428: PUSH
2429: LD_INT 5
2431: GREATER
2432: IFFALSE 2442
// x := 1 ;
2434: LD_ADDR_VAR 0 2
2438: PUSH
2439: LD_INT 1
2441: ST_TO_ADDR
// for i in areas do
2442: LD_ADDR_VAR 0 1
2446: PUSH
2447: LD_VAR 0 5
2451: PUSH
2452: FOR_IN
2453: IFFALSE 2492
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2455: LD_VAR 0 1
2459: PPUSH
2460: LD_INT 1
2462: PPUSH
2463: CALL_OW 287
2467: PUSH
2468: LD_INT 20
2470: LESS
2471: IFFALSE 2490
// begin CreateCratesArea ( x , i , true ) ;
2473: LD_VAR 0 2
2477: PPUSH
2478: LD_VAR 0 1
2482: PPUSH
2483: LD_INT 1
2485: PPUSH
2486: CALL_OW 55
// end ; end ;
2490: GO 2452
2492: POP
2493: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 20 then
2494: LD_INT 1
2496: PPUSH
2497: LD_INT 1
2499: PPUSH
2500: CALL_OW 287
2504: PUSH
2505: LD_INT 20
2507: LESS
2508: IFFALSE 2525
// CreateCratesArea ( x , MZBaseArea , true ) ;
2510: LD_VAR 0 2
2514: PPUSH
2515: LD_INT 1
2517: PPUSH
2518: LD_INT 1
2520: PPUSH
2521: CALL_OW 55
// if GetResourceArea ( MZSpecialArea , mat_cans ) = 0 then
2525: LD_INT 15
2527: PPUSH
2528: LD_INT 1
2530: PPUSH
2531: CALL_OW 287
2535: PUSH
2536: LD_INT 0
2538: EQUAL
2539: IFFALSE 2578
// begin for i := 1 to 3 do
2541: LD_ADDR_VAR 0 1
2545: PUSH
2546: DOUBLE
2547: LD_INT 1
2549: DEC
2550: ST_TO_ADDR
2551: LD_INT 3
2553: PUSH
2554: FOR_TO
2555: IFFALSE 2574
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2557: LD_VAR 0 2
2561: PPUSH
2562: LD_INT 15
2564: PPUSH
2565: LD_INT 1
2567: PPUSH
2568: CALL_OW 55
2572: GO 2554
2574: POP
2575: POP
// end else
2576: GO 2609
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
2578: LD_INT 15
2580: PPUSH
2581: LD_INT 1
2583: PPUSH
2584: CALL_OW 287
2588: PUSH
2589: LD_INT 30
2591: LESS
2592: IFFALSE 2609
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2594: LD_VAR 0 2
2598: PPUSH
2599: LD_INT 15
2601: PPUSH
2602: LD_INT 1
2604: PPUSH
2605: CALL_OW 55
// time := time + delayTime ;
2609: LD_ADDR_VAR 0 4
2613: PUSH
2614: LD_VAR 0 4
2618: PUSH
2619: LD_VAR 0 7
2623: PLUS
2624: ST_TO_ADDR
// if time > maxTime then
2625: LD_VAR 0 4
2629: PUSH
2630: LD_VAR 0 8
2634: GREATER
2635: IFFALSE 2647
// time := normalTime ;
2637: LD_ADDR_VAR 0 4
2641: PUSH
2642: LD_VAR 0 6
2646: ST_TO_ADDR
// until false ;
2647: LD_INT 0
2649: IFFALSE 2400
// end ; end_of_file
2651: PPOPN 8
2653: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2654: LD_VAR 0 1
2658: PPUSH
2659: CALL 53673 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: CALL 7886 0 1
// end ;
2672: PPOPN 1
2674: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2675: LD_VAR 0 1
2679: PPUSH
2680: CALL 53690 0 1
// end ;
2684: PPOPN 1
2686: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2687: LD_VAR 0 1
2691: PPUSH
2692: CALL 8557 0 1
2696: PPOPN 1
2698: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2699: LD_VAR 0 1
2703: PPUSH
2704: LD_VAR 0 2
2708: PPUSH
2709: CALL 53731 0 2
2713: PPOPN 2
2715: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2716: LD_VAR 0 1
2720: PPUSH
2721: LD_VAR 0 2
2725: PPUSH
2726: LD_VAR 0 3
2730: PPUSH
2731: CALL 8610 0 3
2735: PPOPN 3
2737: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2738: LD_INT 0
2740: PPUSH
2741: PPUSH
// disable ( mpActive ) ;
2742: LD_INT 100
2744: DISABLE_MARKED
// disable ( mpWin ) ;
2745: LD_INT 101
2747: DISABLE_MARKED
// disable ( mpLose ) ;
2748: LD_INT 102
2750: DISABLE_MARKED
// mpGameType := 0 ;
2751: LD_ADDR_EXP 3
2755: PUSH
2756: LD_INT 0
2758: ST_TO_ADDR
// mpGameSettings := [ ] ;
2759: LD_ADDR_EXP 6
2763: PUSH
2764: EMPTY
2765: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2766: LD_ADDR_EXP 4
2770: PUSH
2771: EMPTY
2772: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2773: LD_ADDR_EXP 5
2777: PUSH
2778: EMPTY
2779: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2780: LD_ADDR_EXP 29
2784: PUSH
2785: LD_INT 2
2787: PUSH
2788: LD_INT 2
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2795: LD_ADDR_EXP 12
2799: PUSH
2800: EMPTY
2801: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2802: LD_ADDR_EXP 13
2806: PUSH
2807: EMPTY
2808: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2809: LD_ADDR_EXP 41
2813: PUSH
2814: EMPTY
2815: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2816: LD_ADDR_EXP 42
2820: PUSH
2821: EMPTY
2822: ST_TO_ADDR
// mpDepots := [ ] ;
2823: LD_ADDR_EXP 14
2827: PUSH
2828: EMPTY
2829: ST_TO_ADDR
// mpBuildings := [ ] ;
2830: LD_ADDR_EXP 17
2834: PUSH
2835: EMPTY
2836: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2837: LD_ADDR_EXP 18
2841: PUSH
2842: EMPTY
2843: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2844: LD_ADDR_EXP 19
2848: PUSH
2849: EMPTY
2850: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2851: LD_ADDR_EXP 20
2855: PUSH
2856: EMPTY
2857: ST_TO_ADDR
// mpStartingResources := [ ] ;
2858: LD_ADDR_EXP 15
2862: PUSH
2863: EMPTY
2864: ST_TO_ADDR
// mpStartPos := [ ] ;
2865: LD_ADDR_EXP 21
2869: PUSH
2870: EMPTY
2871: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2872: LD_ADDR_EXP 22
2876: PUSH
2877: LD_INT 1
2879: NEG
2880: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2881: LD_ADDR_EXP 23
2885: PUSH
2886: EMPTY
2887: ST_TO_ADDR
// mpApemans := [ ] ;
2888: LD_ADDR_EXP 30
2892: PUSH
2893: EMPTY
2894: ST_TO_ADDR
// mpApemansArea := [ ] ;
2895: LD_ADDR_EXP 31
2899: PUSH
2900: EMPTY
2901: ST_TO_ADDR
// mpRespawn := [ ] ;
2902: LD_ADDR_EXP 33
2906: PUSH
2907: EMPTY
2908: ST_TO_ADDR
// mpKingArea := 0 ;
2909: LD_ADDR_EXP 34
2913: PUSH
2914: LD_INT 0
2916: ST_TO_ADDR
// mpPoints := [ ] ;
2917: LD_ADDR_EXP 35
2921: PUSH
2922: EMPTY
2923: ST_TO_ADDR
// mpVehicles := 0 ;
2924: LD_ADDR_EXP 36
2928: PUSH
2929: LD_INT 0
2931: ST_TO_ADDR
// mpShipments := 0 ;
2932: LD_ADDR_EXP 27
2936: PUSH
2937: LD_INT 0
2939: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2940: LD_ADDR_EXP 40
2944: PUSH
2945: EMPTY
2946: PUSH
2947: EMPTY
2948: PUSH
2949: EMPTY
2950: PUSH
2951: EMPTY
2952: PUSH
2953: EMPTY
2954: PUSH
2955: EMPTY
2956: PUSH
2957: EMPTY
2958: PUSH
2959: EMPTY
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: LIST
2970: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2971: LD_ADDR_EXP 32
2975: PUSH
2976: EMPTY
2977: PUSH
2978: EMPTY
2979: PUSH
2980: EMPTY
2981: PUSH
2982: EMPTY
2983: PUSH
2984: EMPTY
2985: PUSH
2986: EMPTY
2987: PUSH
2988: EMPTY
2989: PUSH
2990: EMPTY
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: LIST
2996: LIST
2997: LIST
2998: LIST
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// mpEmissions := 0 ;
3002: LD_ADDR_EXP 37
3006: PUSH
3007: LD_INT 0
3009: ST_TO_ADDR
// mpTeleports := 0 ;
3010: LD_ADDR_EXP 43
3014: PUSH
3015: LD_INT 0
3017: ST_TO_ADDR
// mpArtifacts := 0 ;
3018: LD_ADDR_EXP 44
3022: PUSH
3023: LD_INT 0
3025: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3026: LD_ADDR_EXP 25
3030: PUSH
3031: LD_INT 3
3033: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3034: LD_ADDR_EXP 24
3038: PUSH
3039: LD_INT 15
3041: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3042: LD_ADDR_EXP 38
3046: PUSH
3047: LD_INT 0
3049: ST_TO_ADDR
// mpGameActive := false ;
3050: LD_ADDR_EXP 39
3054: PUSH
3055: LD_INT 0
3057: ST_TO_ADDR
// mpBlockRespThread := false ;
3058: LD_ADDR_EXP 45
3062: PUSH
3063: LD_INT 0
3065: ST_TO_ADDR
// for i := 1 to 32 do
3066: LD_ADDR_VAR 0 2
3070: PUSH
3071: DOUBLE
3072: LD_INT 1
3074: DEC
3075: ST_TO_ADDR
3076: LD_INT 32
3078: PUSH
3079: FOR_TO
3080: IFFALSE 3107
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3082: LD_ADDR_EXP 6
3086: PUSH
3087: LD_EXP 6
3091: PPUSH
3092: LD_VAR 0 2
3096: PPUSH
3097: LD_INT 0
3099: PPUSH
3100: CALL_OW 1
3104: ST_TO_ADDR
3105: GO 3079
3107: POP
3108: POP
// end ;
3109: LD_VAR 0 1
3113: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3114: LD_INT 0
3116: PPUSH
3117: PPUSH
3118: PPUSH
3119: PPUSH
3120: PPUSH
3121: PPUSH
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3130: LD_ADDR_VAR 0 14
3134: PUSH
3135: LD_INT 1
3137: PUSH
3138: LD_INT 2
3140: PUSH
3141: LD_INT 3
3143: PUSH
3144: LD_INT 5
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: ST_TO_ADDR
// for i in gameTypes do
3153: LD_ADDR_VAR 0 2
3157: PUSH
3158: LD_VAR 0 14
3162: PUSH
3163: FOR_IN
3164: IFFALSE 3173
// disable ( i ) ;
3166: LD_VAR 0 2
3170: DISABLE_MARKED
3171: GO 3163
3173: POP
3174: POP
// if Multiplayer then
3175: LD_OWVAR 4
3179: IFFALSE 3363
// begin mpGameType := mp_game_type ;
3181: LD_ADDR_EXP 3
3185: PUSH
3186: LD_OWVAR 6
3190: ST_TO_ADDR
// your_side := mp_player_side ;
3191: LD_ADDR_OWVAR 2
3195: PUSH
3196: LD_OWVAR 7
3200: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3201: LD_ADDR_EXP 7
3205: PUSH
3206: LD_OWVAR 17
3210: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3211: LD_ADDR_EXP 8
3215: PUSH
3216: LD_OWVAR 15
3220: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3221: LD_ADDR_EXP 9
3225: PUSH
3226: LD_OWVAR 16
3230: ST_TO_ADDR
// mpTeams := mp_teams ;
3231: LD_ADDR_EXP 10
3235: PUSH
3236: LD_OWVAR 12
3240: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3241: LD_ADDR_VAR 0 2
3245: PUSH
3246: DOUBLE
3247: LD_INT 1
3249: DEC
3250: ST_TO_ADDR
3251: LD_EXP 4
3255: PPUSH
3256: CALL 12224 0 1
3260: PUSH
3261: FOR_TO
3262: IFFALSE 3338
// begin setting := mpGameSettingsKeys [ i ] ;
3264: LD_ADDR_VAR 0 12
3268: PUSH
3269: LD_EXP 4
3273: PUSH
3274: LD_VAR 0 2
3278: ARRAY
3279: ST_TO_ADDR
// if setting then
3280: LD_VAR 0 12
3284: IFFALSE 3336
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3286: LD_ADDR_EXP 6
3290: PUSH
3291: LD_EXP 6
3295: PPUSH
3296: LD_VAR 0 2
3300: PPUSH
3301: LD_EXP 5
3305: PUSH
3306: LD_VAR 0 2
3310: ARRAY
3311: PUSH
3312: LD_VAR 0 2
3316: PUSH
3317: LD_INT 1
3319: MINUS
3320: PPUSH
3321: CALL_OW 426
3325: PUSH
3326: LD_INT 1
3328: PLUS
3329: ARRAY
3330: PPUSH
3331: CALL_OW 1
3335: ST_TO_ADDR
// end ;
3336: GO 3261
3338: POP
3339: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3340: LD_ADDR_EXP 11
3344: PUSH
3345: LD_EXP 8
3349: PUSH
3350: LD_INT 0
3352: PUSH
3353: EMPTY
3354: LIST
3355: DIFF
3356: PUSH
3357: LD_INT 1
3359: GREATER
3360: ST_TO_ADDR
// end else
3361: GO 3363
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3363: LD_EXP 3
3367: PPUSH
3368: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3372: LD_EXP 18
3376: PPUSH
3377: CALL 12224 0 1
3381: IFFALSE 3412
// begin for i in mpMarkedAreas do
3383: LD_ADDR_VAR 0 2
3387: PUSH
3388: LD_EXP 18
3392: PUSH
3393: FOR_IN
3394: IFFALSE 3410
// SetAreaMapShow ( i , 0 ) ;
3396: LD_VAR 0 2
3400: PPUSH
3401: LD_INT 0
3403: PPUSH
3404: CALL_OW 424
3408: GO 3393
3410: POP
3411: POP
// end ; for i := 1 to 8 do
3412: LD_ADDR_VAR 0 2
3416: PUSH
3417: DOUBLE
3418: LD_INT 1
3420: DEC
3421: ST_TO_ADDR
3422: LD_INT 8
3424: PUSH
3425: FOR_TO
3426: IFFALSE 4762
// begin if not mpSidePositions [ i ] then
3428: LD_EXP 7
3432: PUSH
3433: LD_VAR 0 2
3437: ARRAY
3438: NOT
3439: IFFALSE 3443
// continue ;
3441: GO 3425
// side := i ;
3443: LD_ADDR_VAR 0 7
3447: PUSH
3448: LD_VAR 0 2
3452: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3453: LD_ADDR_VAR 0 9
3457: PUSH
3458: LD_EXP 9
3462: PUSH
3463: LD_VAR 0 2
3467: ARRAY
3468: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3469: LD_ADDR_VAR 0 8
3473: PUSH
3474: LD_EXP 7
3478: PUSH
3479: LD_VAR 0 2
3483: ARRAY
3484: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3485: LD_EXP 12
3489: PPUSH
3490: CALL 12224 0 1
3494: IFFALSE 3571
// begin for j in mpOilDeposits [ pos ] do
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 12
3505: PUSH
3506: LD_VAR 0 8
3510: ARRAY
3511: PUSH
3512: FOR_IN
3513: IFFALSE 3569
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3515: LD_VAR 0 3
3519: PUSH
3520: LD_INT 1
3522: ARRAY
3523: PPUSH
3524: LD_VAR 0 3
3528: PUSH
3529: LD_INT 2
3531: ARRAY
3532: PPUSH
3533: LD_INT 2
3535: PPUSH
3536: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3540: LD_VAR 0 3
3544: PUSH
3545: LD_INT 1
3547: ARRAY
3548: PPUSH
3549: LD_VAR 0 3
3553: PUSH
3554: LD_INT 2
3556: ARRAY
3557: PPUSH
3558: LD_VAR 0 7
3562: PPUSH
3563: CALL_OW 441
// end ;
3567: GO 3512
3569: POP
3570: POP
// end ; if Count ( mpSibDeposits ) then
3571: LD_EXP 13
3575: PPUSH
3576: CALL 12224 0 1
3580: IFFALSE 3657
// begin for j in mpSibDeposits [ pos ] do
3582: LD_ADDR_VAR 0 3
3586: PUSH
3587: LD_EXP 13
3591: PUSH
3592: LD_VAR 0 8
3596: ARRAY
3597: PUSH
3598: FOR_IN
3599: IFFALSE 3655
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3601: LD_VAR 0 3
3605: PUSH
3606: LD_INT 1
3608: ARRAY
3609: PPUSH
3610: LD_VAR 0 3
3614: PUSH
3615: LD_INT 2
3617: ARRAY
3618: PPUSH
3619: LD_INT 3
3621: PPUSH
3622: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3626: LD_VAR 0 3
3630: PUSH
3631: LD_INT 1
3633: ARRAY
3634: PPUSH
3635: LD_VAR 0 3
3639: PUSH
3640: LD_INT 2
3642: ARRAY
3643: PPUSH
3644: LD_VAR 0 7
3648: PPUSH
3649: CALL_OW 441
// end ;
3653: GO 3598
3655: POP
3656: POP
// end ; InitBc ;
3657: CALL_OW 21
// InitUc ;
3661: CALL_OW 18
// uc_side := side ;
3665: LD_ADDR_OWVAR 20
3669: PUSH
3670: LD_VAR 0 7
3674: ST_TO_ADDR
// uc_nation := nation ;
3675: LD_ADDR_OWVAR 21
3679: PUSH
3680: LD_VAR 0 9
3684: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3685: LD_EXP 22
3689: PUSH
3690: LD_INT 1
3692: NEG
3693: GREATER
3694: IFFALSE 3853
// begin x := mpStartPos [ pos ] [ 1 ] ;
3696: LD_ADDR_VAR 0 5
3700: PUSH
3701: LD_EXP 21
3705: PUSH
3706: LD_VAR 0 8
3710: ARRAY
3711: PUSH
3712: LD_INT 1
3714: ARRAY
3715: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3716: LD_ADDR_VAR 0 6
3720: PUSH
3721: LD_EXP 21
3725: PUSH
3726: LD_VAR 0 8
3730: ARRAY
3731: PUSH
3732: LD_INT 2
3734: ARRAY
3735: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3736: LD_VAR 0 5
3740: PPUSH
3741: LD_VAR 0 6
3745: PPUSH
3746: LD_INT 12
3748: PPUSH
3749: LD_INT 2
3751: PPUSH
3752: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3756: LD_ADDR_EXP 23
3760: PUSH
3761: LD_EXP 23
3765: PPUSH
3766: LD_VAR 0 7
3770: PPUSH
3771: LD_VAR 0 7
3775: PPUSH
3776: LD_VAR 0 5
3780: PPUSH
3781: LD_VAR 0 6
3785: PPUSH
3786: LD_INT 1
3788: PUSH
3789: LD_INT 100
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: PUSH
3796: LD_INT 2
3798: PUSH
3799: LD_INT 70
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: PUSH
3806: LD_INT 3
3808: PUSH
3809: LD_INT 40
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 10
3818: PUSH
3819: LD_INT 25
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: LD_INT 20
3828: PUSH
3829: LD_INT 100
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PPUSH
3843: CALL_OW 418
3847: PPUSH
3848: CALL_OW 1
3852: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3853: LD_EXP 14
3857: PPUSH
3858: CALL 12224 0 1
3862: IFFALSE 4046
// begin if mpGameType = GameTypeSurvival then
3864: LD_EXP 3
3868: PUSH
3869: LD_INT 2
3871: EQUAL
3872: IFFALSE 3892
// begin bc_level := 10 ;
3874: LD_ADDR_OWVAR 43
3878: PUSH
3879: LD_INT 10
3881: ST_TO_ADDR
// bc_type := b_warehouse ;
3882: LD_ADDR_OWVAR 42
3886: PUSH
3887: LD_INT 1
3889: ST_TO_ADDR
// end else
3890: GO 3908
// begin bc_level := 0 ;
3892: LD_ADDR_OWVAR 43
3896: PUSH
3897: LD_INT 0
3899: ST_TO_ADDR
// bc_type := b_depot ;
3900: LD_ADDR_OWVAR 42
3904: PUSH
3905: LD_INT 0
3907: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3908: LD_ADDR_VAR 0 4
3912: PUSH
3913: LD_EXP 14
3917: PUSH
3918: LD_VAR 0 8
3922: ARRAY
3923: PUSH
3924: LD_INT 1
3926: ARRAY
3927: PPUSH
3928: LD_EXP 14
3932: PUSH
3933: LD_VAR 0 8
3937: ARRAY
3938: PUSH
3939: LD_INT 2
3941: ARRAY
3942: PPUSH
3943: LD_EXP 14
3947: PUSH
3948: LD_VAR 0 8
3952: ARRAY
3953: PUSH
3954: LD_INT 3
3956: ARRAY
3957: PPUSH
3958: CALL_OW 47
3962: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3963: LD_VAR 0 4
3967: PPUSH
3968: LD_STRING @
3970: PUSH
3971: LD_VAR 0 7
3975: STR
3976: PPUSH
3977: CALL_OW 500
// if Count ( mpStartingResources ) then
3981: LD_EXP 15
3985: PPUSH
3986: CALL 12224 0 1
3990: IFFALSE 4044
// begin for j := 1 to mpStartingResources do
3992: LD_ADDR_VAR 0 3
3996: PUSH
3997: DOUBLE
3998: LD_INT 1
4000: DEC
4001: ST_TO_ADDR
4002: LD_EXP 15
4006: PUSH
4007: FOR_TO
4008: IFFALSE 4042
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4010: LD_VAR 0 4
4014: PPUSH
4015: CALL_OW 274
4019: PPUSH
4020: LD_VAR 0 3
4024: PPUSH
4025: LD_EXP 15
4029: PUSH
4030: LD_VAR 0 3
4034: ARRAY
4035: PPUSH
4036: CALL_OW 277
4040: GO 4007
4042: POP
4043: POP
// end ; end else
4044: GO 4253
// if Count ( mpStartingResources ) then
4046: LD_EXP 15
4050: PPUSH
4051: CALL 12224 0 1
4055: IFFALSE 4253
// begin x := mpStartPos [ pos ] [ 1 ] ;
4057: LD_ADDR_VAR 0 5
4061: PUSH
4062: LD_EXP 21
4066: PUSH
4067: LD_VAR 0 8
4071: ARRAY
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4077: LD_ADDR_VAR 0 6
4081: PUSH
4082: LD_EXP 21
4086: PUSH
4087: LD_VAR 0 8
4091: ARRAY
4092: PUSH
4093: LD_INT 2
4095: ARRAY
4096: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4097: LD_ADDR_VAR 0 3
4101: PUSH
4102: DOUBLE
4103: LD_INT 1
4105: DEC
4106: ST_TO_ADDR
4107: LD_EXP 15
4111: PUSH
4112: FOR_TO
4113: IFFALSE 4251
// begin resources := mpStartingResources [ j ] ;
4115: LD_ADDR_VAR 0 13
4119: PUSH
4120: LD_EXP 15
4124: PUSH
4125: LD_VAR 0 3
4129: ARRAY
4130: ST_TO_ADDR
// if resources = 0 then
4131: LD_VAR 0 13
4135: PUSH
4136: LD_INT 0
4138: EQUAL
4139: IFFALSE 4143
// continue ;
4141: GO 4112
// repeat if resources >= 50 then
4143: LD_VAR 0 13
4147: PUSH
4148: LD_INT 50
4150: GREATEREQUAL
4151: IFFALSE 4197
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4153: LD_VAR 0 3
4157: PPUSH
4158: LD_INT 5
4160: PPUSH
4161: LD_VAR 0 5
4165: PPUSH
4166: LD_VAR 0 6
4170: PPUSH
4171: LD_INT 6
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 60
// resources := resources - 50 ;
4181: LD_ADDR_VAR 0 13
4185: PUSH
4186: LD_VAR 0 13
4190: PUSH
4191: LD_INT 50
4193: MINUS
4194: ST_TO_ADDR
// end else
4195: GO 4239
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4197: LD_VAR 0 3
4201: PPUSH
4202: LD_VAR 0 13
4206: PUSH
4207: LD_INT 10
4209: DIV
4210: PPUSH
4211: LD_VAR 0 5
4215: PPUSH
4216: LD_VAR 0 6
4220: PPUSH
4221: LD_INT 6
4223: PPUSH
4224: LD_INT 0
4226: PPUSH
4227: CALL_OW 60
// resources := 0 ;
4231: LD_ADDR_VAR 0 13
4235: PUSH
4236: LD_INT 0
4238: ST_TO_ADDR
// end ; until resources <= 0 ;
4239: LD_VAR 0 13
4243: PUSH
4244: LD_INT 0
4246: LESSEQUAL
4247: IFFALSE 4143
// end ;
4249: GO 4112
4251: POP
4252: POP
// end ; if Count ( mpBuildings ) then
4253: LD_EXP 17
4257: PPUSH
4258: CALL 12224 0 1
4262: IFFALSE 4340
// begin for j in mpBuildings [ pos ] do
4264: LD_ADDR_VAR 0 3
4268: PUSH
4269: LD_EXP 17
4273: PUSH
4274: LD_VAR 0 8
4278: ARRAY
4279: PUSH
4280: FOR_IN
4281: IFFALSE 4338
// begin bc_level := 0 ;
4283: LD_ADDR_OWVAR 43
4287: PUSH
4288: LD_INT 0
4290: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4291: LD_ADDR_OWVAR 42
4295: PUSH
4296: LD_VAR 0 3
4300: PUSH
4301: LD_INT 1
4303: ARRAY
4304: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4305: LD_VAR 0 3
4309: PUSH
4310: LD_INT 2
4312: ARRAY
4313: PPUSH
4314: LD_VAR 0 3
4318: PUSH
4319: LD_INT 3
4321: ARRAY
4322: PPUSH
4323: LD_VAR 0 3
4327: PUSH
4328: LD_INT 4
4330: ARRAY
4331: PPUSH
4332: CALL_OW 47
// end ;
4336: GO 4280
4338: POP
4339: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4340: LD_EXP 26
4344: IFFALSE 4364
4346: PUSH
4347: LD_INT 20
4349: PPUSH
4350: LD_VAR 0 7
4354: PPUSH
4355: CALL_OW 321
4359: PUSH
4360: LD_INT 1
4362: EQUAL
4363: AND
4364: IFFALSE 4381
// SetTech ( tech_SibDet , side , state_researched ) ;
4366: LD_INT 20
4368: PPUSH
4369: LD_VAR 0 7
4373: PPUSH
4374: LD_INT 2
4376: PPUSH
4377: CALL_OW 322
// if not mpArtifacts then
4381: LD_EXP 44
4385: NOT
4386: IFFALSE 4403
// SetTech ( tech_artifact , side , state_disabled ) ;
4388: LD_INT 24
4390: PPUSH
4391: LD_VAR 0 7
4395: PPUSH
4396: LD_INT 0
4398: PPUSH
4399: CALL_OW 322
// if mpSibBomb = 1 then
4403: LD_EXP 28
4407: PUSH
4408: LD_INT 1
4410: EQUAL
4411: IFFALSE 4430
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4413: LD_INT 25
4415: PPUSH
4416: LD_VAR 0 7
4420: PPUSH
4421: LD_INT 1
4423: PPUSH
4424: CALL_OW 322
// end else
4428: GO 4445
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4430: LD_INT 25
4432: PPUSH
4433: LD_VAR 0 7
4437: PPUSH
4438: LD_INT 0
4440: PPUSH
4441: CALL_OW 322
// end ; if mpVehicles then
4445: LD_EXP 36
4449: IFFALSE 4548
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4451: LD_ADDR_VAR 0 3
4455: PUSH
4456: LD_VAR 0 7
4460: PPUSH
4461: LD_VAR 0 9
4465: PPUSH
4466: LD_EXP 36
4470: PPUSH
4471: CALL 5672 0 3
4475: PUSH
4476: FOR_IN
4477: IFFALSE 4546
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4479: LD_VAR 0 3
4483: PPUSH
4484: LD_INT 0
4486: PPUSH
4487: LD_INT 5
4489: PPUSH
4490: CALL_OW 12
4494: PPUSH
4495: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4499: LD_VAR 0 3
4503: PPUSH
4504: LD_EXP 21
4508: PUSH
4509: LD_VAR 0 8
4513: ARRAY
4514: PUSH
4515: LD_INT 1
4517: ARRAY
4518: PPUSH
4519: LD_EXP 21
4523: PUSH
4524: LD_VAR 0 8
4528: ARRAY
4529: PUSH
4530: LD_INT 2
4532: ARRAY
4533: PPUSH
4534: LD_INT 12
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 50
// end ;
4544: GO 4476
4546: POP
4547: POP
// end ; uc_nation := nation ;
4548: LD_ADDR_OWVAR 21
4552: PUSH
4553: LD_VAR 0 9
4557: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4558: LD_ADDR_VAR 0 11
4562: PUSH
4563: LD_VAR 0 7
4567: PPUSH
4568: LD_VAR 0 9
4572: PPUSH
4573: LD_EXP 24
4577: PPUSH
4578: LD_EXP 25
4582: PPUSH
4583: CALL 5174 0 4
4587: ST_TO_ADDR
// for j in team do
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: LD_VAR 0 11
4597: PUSH
4598: FOR_IN
4599: IFFALSE 4648
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4601: LD_VAR 0 3
4605: PPUSH
4606: LD_EXP 21
4610: PUSH
4611: LD_VAR 0 8
4615: ARRAY
4616: PUSH
4617: LD_INT 1
4619: ARRAY
4620: PPUSH
4621: LD_EXP 21
4625: PUSH
4626: LD_VAR 0 8
4630: ARRAY
4631: PUSH
4632: LD_INT 2
4634: ARRAY
4635: PPUSH
4636: LD_INT 12
4638: PPUSH
4639: LD_INT 0
4641: PPUSH
4642: CALL_OW 50
4646: GO 4598
4648: POP
4649: POP
// if mpApemans then
4650: LD_EXP 30
4654: IFFALSE 4760
// begin for j := 1 to mpApemans do
4656: LD_ADDR_VAR 0 3
4660: PUSH
4661: DOUBLE
4662: LD_INT 1
4664: DEC
4665: ST_TO_ADDR
4666: LD_EXP 30
4670: PUSH
4671: FOR_TO
4672: IFFALSE 4758
// begin PrepareApeman ( - 5 ) ;
4674: LD_INT 5
4676: NEG
4677: PPUSH
4678: CALL 44283 0 1
// ape := CreateHuman ;
4682: LD_ADDR_VAR 0 10
4686: PUSH
4687: CALL_OW 44
4691: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4692: LD_ADDR_EXP 32
4696: PUSH
4697: LD_EXP 32
4701: PPUSH
4702: LD_VAR 0 8
4706: PPUSH
4707: LD_EXP 32
4711: PUSH
4712: LD_VAR 0 8
4716: ARRAY
4717: PPUSH
4718: LD_VAR 0 10
4722: PPUSH
4723: CALL 48156 0 2
4727: PPUSH
4728: CALL_OW 1
4732: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4733: LD_VAR 0 10
4737: PPUSH
4738: LD_EXP 31
4742: PUSH
4743: LD_VAR 0 8
4747: ARRAY
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: CALL_OW 49
// end ;
4756: GO 4671
4758: POP
4759: POP
// end ; end ;
4760: GO 3425
4762: POP
4763: POP
// if not mpTeamGame then
4764: LD_EXP 11
4768: NOT
4769: IFFALSE 4867
// begin for i := 1 to 8 do
4771: LD_ADDR_VAR 0 2
4775: PUSH
4776: DOUBLE
4777: LD_INT 1
4779: DEC
4780: ST_TO_ADDR
4781: LD_INT 8
4783: PUSH
4784: FOR_TO
4785: IFFALSE 4863
// for j := 1 to 8 do
4787: LD_ADDR_VAR 0 3
4791: PUSH
4792: DOUBLE
4793: LD_INT 1
4795: DEC
4796: ST_TO_ADDR
4797: LD_INT 8
4799: PUSH
4800: FOR_TO
4801: IFFALSE 4859
// if i <> j then
4803: LD_VAR 0 2
4807: PUSH
4808: LD_VAR 0 3
4812: NONEQUAL
4813: IFFALSE 4837
// SetAttitude ( i , j , att_neutral , true ) else
4815: LD_VAR 0 2
4819: PPUSH
4820: LD_VAR 0 3
4824: PPUSH
4825: LD_INT 0
4827: PPUSH
4828: LD_INT 1
4830: PPUSH
4831: CALL_OW 80
4835: GO 4857
// SetAttitude ( i , j , att_friend , true ) ;
4837: LD_VAR 0 2
4841: PPUSH
4842: LD_VAR 0 3
4846: PPUSH
4847: LD_INT 1
4849: PPUSH
4850: LD_INT 1
4852: PPUSH
4853: CALL_OW 80
4857: GO 4800
4859: POP
4860: POP
4861: GO 4784
4863: POP
4864: POP
// end else
4865: GO 5042
// begin if mpSharedVision then
4867: LD_EXP 16
4871: IFFALSE 4936
// begin for i in mpTeams do
4873: LD_ADDR_VAR 0 2
4877: PUSH
4878: LD_EXP 10
4882: PUSH
4883: FOR_IN
4884: IFFALSE 4934
// for j := 2 to i do
4886: LD_ADDR_VAR 0 3
4890: PUSH
4891: DOUBLE
4892: LD_INT 2
4894: DEC
4895: ST_TO_ADDR
4896: LD_VAR 0 2
4900: PUSH
4901: FOR_TO
4902: IFFALSE 4930
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4904: LD_VAR 0 2
4908: PUSH
4909: LD_VAR 0 3
4913: ARRAY
4914: PPUSH
4915: LD_VAR 0 2
4919: PUSH
4920: LD_INT 1
4922: ARRAY
4923: PPUSH
4924: CALL_OW 343
4928: GO 4901
4930: POP
4931: POP
4932: GO 4883
4934: POP
4935: POP
// end ; for i := 1 to 8 do
4936: LD_ADDR_VAR 0 2
4940: PUSH
4941: DOUBLE
4942: LD_INT 1
4944: DEC
4945: ST_TO_ADDR
4946: LD_INT 8
4948: PUSH
4949: FOR_TO
4950: IFFALSE 5040
// for j := 1 to 8 do
4952: LD_ADDR_VAR 0 3
4956: PUSH
4957: DOUBLE
4958: LD_INT 1
4960: DEC
4961: ST_TO_ADDR
4962: LD_INT 8
4964: PUSH
4965: FOR_TO
4966: IFFALSE 5036
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4968: LD_EXP 8
4972: PUSH
4973: LD_VAR 0 2
4977: ARRAY
4978: PUSH
4979: LD_EXP 8
4983: PUSH
4984: LD_VAR 0 3
4988: ARRAY
4989: EQUAL
4990: IFFALSE 5014
// SetAttitude ( i , j , att_friend , true ) else
4992: LD_VAR 0 2
4996: PPUSH
4997: LD_VAR 0 3
5001: PPUSH
5002: LD_INT 1
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: CALL_OW 80
5012: GO 5034
// SetAttitude ( i , j , att_enemy , true ) ;
5014: LD_VAR 0 2
5018: PPUSH
5019: LD_VAR 0 3
5023: PPUSH
5024: LD_INT 2
5026: PPUSH
5027: LD_INT 1
5029: PPUSH
5030: CALL_OW 80
5034: GO 4965
5036: POP
5037: POP
5038: GO 4949
5040: POP
5041: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5042: LD_ADDR_OWVAR 71
5046: PUSH
5047: LD_EXP 9
5051: PUSH
5052: LD_OWVAR 2
5056: ARRAY
5057: ST_TO_ADDR
// if IAmSpec then
5058: CALL_OW 531
5062: IFFALSE 5103
// begin FogOff ( true ) ;
5064: LD_INT 1
5066: PPUSH
5067: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5071: LD_EXP 29
5075: PUSH
5076: LD_INT 1
5078: ARRAY
5079: PUSH
5080: LD_INT 2
5082: DIV
5083: PPUSH
5084: LD_EXP 29
5088: PUSH
5089: LD_INT 2
5091: ARRAY
5092: PUSH
5093: LD_INT 2
5095: DIV
5096: PPUSH
5097: CALL_OW 86
// end else
5101: GO 5149
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5103: LD_EXP 21
5107: PUSH
5108: LD_EXP 7
5112: PUSH
5113: LD_OWVAR 2
5117: ARRAY
5118: ARRAY
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PPUSH
5124: LD_EXP 21
5128: PUSH
5129: LD_EXP 7
5133: PUSH
5134: LD_OWVAR 2
5138: ARRAY
5139: ARRAY
5140: PUSH
5141: LD_INT 2
5143: ARRAY
5144: PPUSH
5145: CALL_OW 86
// end ; BeginBuildUp ;
5149: CALL 6205 0 0
// enable ( mpActive ) ;
5153: LD_INT 100
5155: ENABLE_MARKED
// enable ( mpGameType ) ;
5156: LD_EXP 3
5160: ENABLE_MARKED
// mpGameActive := true ;
5161: LD_ADDR_EXP 39
5165: PUSH
5166: LD_INT 1
5168: ST_TO_ADDR
// end ;
5169: LD_VAR 0 1
5173: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5174: LD_INT 0
5176: PPUSH
5177: PPUSH
5178: PPUSH
5179: PPUSH
// result := [ ] ;
5180: LD_ADDR_VAR 0 5
5184: PUSH
5185: EMPTY
5186: ST_TO_ADDR
// class := class_soldier ;
5187: LD_ADDR_VAR 0 8
5191: PUSH
5192: LD_INT 1
5194: ST_TO_ADDR
// uc_side := side ;
5195: LD_ADDR_OWVAR 20
5199: PUSH
5200: LD_VAR 0 1
5204: ST_TO_ADDR
// uc_nation := nation ;
5205: LD_ADDR_OWVAR 21
5209: PUSH
5210: LD_VAR 0 2
5214: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5215: LD_ADDR_OWVAR 26
5219: PUSH
5220: LD_OWVAR 19
5224: PUSH
5225: LD_VAR 0 1
5229: ARRAY
5230: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5231: LD_INT 1
5233: PPUSH
5234: LD_INT 2
5236: PPUSH
5237: CALL_OW 12
5241: PPUSH
5242: LD_VAR 0 8
5246: PPUSH
5247: LD_VAR 0 4
5251: PUSH
5252: LD_INT 2
5254: PLUS
5255: PPUSH
5256: CALL_OW 380
// hc_importance := 105 ;
5260: LD_ADDR_OWVAR 32
5264: PUSH
5265: LD_INT 105
5267: ST_TO_ADDR
// if Multiplayer then
5268: LD_OWVAR 4
5272: IFFALSE 5312
// begin hc_gallery := MULTIAVATARS ;
5274: LD_ADDR_OWVAR 33
5278: PUSH
5279: LD_STRING MULTIAVATARS
5281: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5282: LD_ADDR_OWVAR 34
5286: PUSH
5287: LD_VAR 0 1
5291: PPUSH
5292: CALL_OW 525
5296: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5297: LD_ADDR_OWVAR 27
5301: PUSH
5302: LD_VAR 0 1
5306: PPUSH
5307: CALL_OW 526
5311: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5312: LD_ADDR_VAR 0 5
5316: PUSH
5317: LD_VAR 0 5
5321: PPUSH
5322: CALL_OW 44
5326: PPUSH
5327: CALL 48156 0 2
5331: ST_TO_ADDR
// if mpTeamPreset then
5332: LD_LOC 1
5336: IFFALSE 5432
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5338: LD_LOC 1
5342: PUSH
5343: LD_INT 1
5345: ARRAY
5346: PPUSH
5347: LD_VAR 0 5
5351: PUSH
5352: LD_VAR 0 5
5356: ARRAY
5357: PPUSH
5358: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5362: LD_VAR 0 5
5366: PUSH
5367: LD_VAR 0 5
5371: ARRAY
5372: PPUSH
5373: LD_INT 1
5375: PPUSH
5376: LD_LOC 1
5380: PUSH
5381: LD_INT 1
5383: ARRAY
5384: PPUSH
5385: LD_INT 1
5387: PPUSH
5388: CALL_OW 260
5392: PPUSH
5393: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5397: LD_VAR 0 5
5401: PUSH
5402: LD_VAR 0 5
5406: ARRAY
5407: PPUSH
5408: LD_INT 2
5410: PPUSH
5411: LD_LOC 1
5415: PUSH
5416: LD_INT 1
5418: ARRAY
5419: PPUSH
5420: LD_INT 2
5422: PPUSH
5423: CALL_OW 260
5427: PPUSH
5428: CALL_OW 239
// end ; InitHc_All ( ) ;
5432: CALL_OW 584
// class := 2 ;
5436: LD_ADDR_VAR 0 8
5440: PUSH
5441: LD_INT 2
5443: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5444: LD_ADDR_VAR 0 6
5448: PUSH
5449: DOUBLE
5450: LD_INT 1
5452: DEC
5453: ST_TO_ADDR
5454: LD_VAR 0 3
5458: PUSH
5459: LD_INT 1
5461: MINUS
5462: PUSH
5463: FOR_TO
5464: IFFALSE 5648
// begin PrepareHuman ( false , class , skill ) ;
5466: LD_INT 0
5468: PPUSH
5469: LD_VAR 0 8
5473: PPUSH
5474: LD_VAR 0 4
5478: PPUSH
5479: CALL_OW 380
// un := CreateHuman ;
5483: LD_ADDR_VAR 0 7
5487: PUSH
5488: CALL_OW 44
5492: ST_TO_ADDR
// result := Join ( result , un ) ;
5493: LD_ADDR_VAR 0 5
5497: PUSH
5498: LD_VAR 0 5
5502: PPUSH
5503: LD_VAR 0 7
5507: PPUSH
5508: CALL 48156 0 2
5512: ST_TO_ADDR
// if mpTeamPreset then
5513: LD_LOC 1
5517: IFFALSE 5613
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5519: LD_LOC 1
5523: PUSH
5524: LD_VAR 0 6
5528: PUSH
5529: LD_INT 1
5531: PLUS
5532: ARRAY
5533: PPUSH
5534: LD_VAR 0 7
5538: PPUSH
5539: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5543: LD_VAR 0 7
5547: PPUSH
5548: LD_INT 1
5550: PPUSH
5551: LD_LOC 1
5555: PUSH
5556: LD_VAR 0 6
5560: PUSH
5561: LD_INT 1
5563: PLUS
5564: ARRAY
5565: PPUSH
5566: LD_INT 1
5568: PPUSH
5569: CALL_OW 260
5573: PPUSH
5574: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5578: LD_VAR 0 7
5582: PPUSH
5583: LD_INT 2
5585: PPUSH
5586: LD_LOC 1
5590: PUSH
5591: LD_VAR 0 6
5595: PUSH
5596: LD_INT 1
5598: PLUS
5599: ARRAY
5600: PPUSH
5601: LD_INT 2
5603: PPUSH
5604: CALL_OW 260
5608: PPUSH
5609: CALL_OW 239
// end ; class := Inc ( class ) ;
5613: LD_ADDR_VAR 0 8
5617: PUSH
5618: LD_VAR 0 8
5622: PPUSH
5623: CALL 49529 0 1
5627: ST_TO_ADDR
// if class = 5 then
5628: LD_VAR 0 8
5632: PUSH
5633: LD_INT 5
5635: EQUAL
5636: IFFALSE 5646
// class := 1 ;
5638: LD_ADDR_VAR 0 8
5642: PUSH
5643: LD_INT 1
5645: ST_TO_ADDR
// end ;
5646: GO 5463
5648: POP
5649: POP
// if not mpTeamPreset then
5650: LD_LOC 1
5654: NOT
5655: IFFALSE 5667
// mpTeamPreset := result ;
5657: LD_ADDR_LOC 1
5661: PUSH
5662: LD_VAR 0 5
5666: ST_TO_ADDR
// end ;
5667: LD_VAR 0 5
5671: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5672: LD_INT 0
5674: PPUSH
5675: PPUSH
// result := [ ] ;
5676: LD_ADDR_VAR 0 4
5680: PUSH
5681: EMPTY
5682: ST_TO_ADDR
// if not vehicles then
5683: LD_VAR 0 3
5687: NOT
5688: IFFALSE 5692
// exit ;
5690: GO 5906
// for i := 1 to vehicles [ nation ] do
5692: LD_ADDR_VAR 0 5
5696: PUSH
5697: DOUBLE
5698: LD_INT 1
5700: DEC
5701: ST_TO_ADDR
5702: LD_VAR 0 3
5706: PUSH
5707: LD_VAR 0 2
5711: ARRAY
5712: PUSH
5713: FOR_TO
5714: IFFALSE 5904
// begin uc_side := side ;
5716: LD_ADDR_OWVAR 20
5720: PUSH
5721: LD_VAR 0 1
5725: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5726: LD_VAR 0 3
5730: PUSH
5731: LD_VAR 0 2
5735: ARRAY
5736: PUSH
5737: LD_VAR 0 5
5741: ARRAY
5742: PPUSH
5743: CALL 12224 0 1
5747: PUSH
5748: LD_INT 4
5750: GREATER
5751: IFFALSE 5781
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5753: LD_ADDR_OWVAR 21
5757: PUSH
5758: LD_VAR 0 3
5762: PUSH
5763: LD_VAR 0 2
5767: ARRAY
5768: PUSH
5769: LD_VAR 0 5
5773: ARRAY
5774: PUSH
5775: LD_INT 5
5777: ARRAY
5778: ST_TO_ADDR
5779: GO 5791
// uc_nation := nation ;
5781: LD_ADDR_OWVAR 21
5785: PUSH
5786: LD_VAR 0 2
5790: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5791: LD_VAR 0 3
5795: PUSH
5796: LD_VAR 0 2
5800: ARRAY
5801: PUSH
5802: LD_VAR 0 5
5806: ARRAY
5807: PUSH
5808: LD_INT 1
5810: ARRAY
5811: PPUSH
5812: LD_VAR 0 3
5816: PUSH
5817: LD_VAR 0 2
5821: ARRAY
5822: PUSH
5823: LD_VAR 0 5
5827: ARRAY
5828: PUSH
5829: LD_INT 2
5831: ARRAY
5832: PPUSH
5833: LD_VAR 0 3
5837: PUSH
5838: LD_VAR 0 2
5842: ARRAY
5843: PUSH
5844: LD_VAR 0 5
5848: ARRAY
5849: PUSH
5850: LD_INT 3
5852: ARRAY
5853: PPUSH
5854: LD_VAR 0 3
5858: PUSH
5859: LD_VAR 0 2
5863: ARRAY
5864: PUSH
5865: LD_VAR 0 5
5869: ARRAY
5870: PUSH
5871: LD_INT 4
5873: ARRAY
5874: PPUSH
5875: LD_INT 80
5877: PPUSH
5878: CALL 14986 0 5
// result := Join ( result , CreateVehicle ) ;
5882: LD_ADDR_VAR 0 4
5886: PUSH
5887: LD_VAR 0 4
5891: PPUSH
5892: CALL_OW 45
5896: PPUSH
5897: CALL 48156 0 2
5901: ST_TO_ADDR
// end ;
5902: GO 5713
5904: POP
5905: POP
// end ;
5906: LD_VAR 0 4
5910: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5911: LD_INT 0
5913: PPUSH
5914: PPUSH
// for i in mpBattleFlags do
5915: LD_ADDR_VAR 0 3
5919: PUSH
5920: LD_EXP 23
5924: PUSH
5925: FOR_IN
5926: IFFALSE 6003
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5928: LD_VAR 0 3
5932: PPUSH
5933: LD_INT 1
5935: PUSH
5936: LD_VAR 0 1
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 2
5947: PUSH
5948: LD_VAR 0 1
5952: PUSH
5953: LD_REAL  7.00000000000000E-0001
5956: MUL
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: LD_INT 3
5964: PUSH
5965: LD_VAR 0 1
5969: PUSH
5970: LD_REAL  4.00000000000000E-0001
5973: MUL
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: LD_INT 20
5981: PUSH
5982: LD_VAR 0 1
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: PPUSH
5997: CALL_OW 423
6001: GO 5925
6003: POP
6004: POP
// end ;
6005: LD_VAR 0 2
6009: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6010: LD_INT 100
6012: IFFALSE 6107
6014: GO 6016
6016: DISABLE
6017: LD_INT 0
6019: PPUSH
6020: PPUSH
// begin if mpBattleFlag <= 0 then
6021: LD_EXP 22
6025: PUSH
6026: LD_INT 0
6028: LESSEQUAL
6029: IFFALSE 6033
// exit ;
6031: GO 6107
// strength := 100 ;
6033: LD_ADDR_VAR 0 2
6037: PUSH
6038: LD_INT 100
6040: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6041: LD_EXP 22
6045: PPUSH
6046: CALL_OW 67
// strength := Dec ( strength ) ;
6050: LD_ADDR_VAR 0 2
6054: PUSH
6055: LD_VAR 0 2
6059: PPUSH
6060: CALL 49551 0 1
6064: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6065: LD_VAR 0 2
6069: PPUSH
6070: CALL 5911 0 1
// until not strength ;
6074: LD_VAR 0 2
6078: NOT
6079: IFFALSE 6041
// for i in mpBattleFlags do
6081: LD_ADDR_VAR 0 1
6085: PUSH
6086: LD_EXP 23
6090: PUSH
6091: FOR_IN
6092: IFFALSE 6105
// KillBattleFlag ( i ) ;
6094: LD_VAR 0 1
6098: PPUSH
6099: CALL_OW 419
6103: GO 6091
6105: POP
6106: POP
// end ;
6107: PPOPN 2
6109: END
// every 0 0$1 marked mpActive do var side , tmp ;
6110: GO 6112
6112: DISABLE
6113: LD_INT 0
6115: PPUSH
6116: PPUSH
// begin if mpSibBomb <= 1 then
6117: LD_EXP 28
6121: PUSH
6122: LD_INT 1
6124: LESSEQUAL
6125: IFFALSE 6129
// exit ;
6127: GO 6202
// tmp := mpSibBomb ;
6129: LD_ADDR_VAR 0 2
6133: PUSH
6134: LD_EXP 28
6138: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6139: LD_INT 35
6141: PPUSH
6142: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6146: LD_ADDR_VAR 0 2
6150: PUSH
6151: LD_VAR 0 2
6155: PUSH
6156: LD_INT 35
6158: MINUS
6159: ST_TO_ADDR
// until not tmp ;
6160: LD_VAR 0 2
6164: NOT
6165: IFFALSE 6139
// for side := 1 to 8 do
6167: LD_ADDR_VAR 0 1
6171: PUSH
6172: DOUBLE
6173: LD_INT 1
6175: DEC
6176: ST_TO_ADDR
6177: LD_INT 8
6179: PUSH
6180: FOR_TO
6181: IFFALSE 6200
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6183: LD_INT 25
6185: PPUSH
6186: LD_VAR 0 1
6190: PPUSH
6191: LD_INT 1
6193: PPUSH
6194: CALL_OW 322
6198: GO 6180
6200: POP
6201: POP
// end ;
6202: PPOPN 2
6204: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6205: LD_INT 0
6207: PPUSH
6208: PPUSH
6209: PPUSH
// mpBuildUpTimeDelay := 0 ;
6210: LD_ADDR_EXP 46
6214: PUSH
6215: LD_INT 0
6217: ST_TO_ADDR
// if not mpBuildUpTime then
6218: LD_EXP 20
6222: NOT
6223: IFFALSE 6227
// exit ;
6225: GO 6416
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6227: LD_ADDR_EXP 46
6231: PUSH
6232: LD_INT 8400
6234: PUSH
6235: LD_INT 2100
6237: PUSH
6238: LD_EXP 20
6242: MUL
6243: PLUS
6244: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6245: LD_ADDR_EXP 47
6249: PUSH
6250: LD_INT 1
6252: ST_TO_ADDR
// for i := 1 to 8 do
6253: LD_ADDR_VAR 0 2
6257: PUSH
6258: DOUBLE
6259: LD_INT 1
6261: DEC
6262: ST_TO_ADDR
6263: LD_INT 8
6265: PUSH
6266: FOR_TO
6267: IFFALSE 6414
// if mpSidePositions [ i ] then
6269: LD_EXP 7
6273: PUSH
6274: LD_VAR 0 2
6278: ARRAY
6279: IFFALSE 6412
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6281: LD_EXP 19
6285: PUSH
6286: LD_EXP 7
6290: PUSH
6291: LD_VAR 0 2
6295: ARRAY
6296: ARRAY
6297: PPUSH
6298: LD_INT 5
6300: PPUSH
6301: CALL_OW 424
// for j := 1 to 8 do
6305: LD_ADDR_VAR 0 3
6309: PUSH
6310: DOUBLE
6311: LD_INT 1
6313: DEC
6314: ST_TO_ADDR
6315: LD_INT 8
6317: PUSH
6318: FOR_TO
6319: IFFALSE 6410
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6321: LD_EXP 7
6325: PUSH
6326: LD_VAR 0 3
6330: ARRAY
6331: IFFALSE 6380
6333: PUSH
6334: LD_EXP 8
6338: PUSH
6339: LD_VAR 0 2
6343: ARRAY
6344: PUSH
6345: LD_EXP 8
6349: PUSH
6350: LD_VAR 0 3
6354: ARRAY
6355: NONEQUAL
6356: IFTRUE 6379
6358: PUSH
6359: LD_EXP 11
6363: NOT
6364: IFFALSE 6378
6366: PUSH
6367: LD_VAR 0 2
6371: PUSH
6372: LD_VAR 0 3
6376: NONEQUAL
6377: AND
6378: OR
6379: AND
6380: IFFALSE 6408
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6382: LD_VAR 0 3
6386: PPUSH
6387: LD_EXP 19
6391: PUSH
6392: LD_EXP 7
6396: PUSH
6397: LD_VAR 0 2
6401: ARRAY
6402: ARRAY
6403: PPUSH
6404: CALL_OW 333
6408: GO 6318
6410: POP
6411: POP
// end ;
6412: GO 6266
6414: POP
6415: POP
// end ;
6416: LD_VAR 0 1
6420: RET
// function EndBuildUp ; var i , j ; begin
6421: LD_INT 0
6423: PPUSH
6424: PPUSH
6425: PPUSH
// mpBuildUpTimeActive := false ;
6426: LD_ADDR_EXP 47
6430: PUSH
6431: LD_INT 0
6433: ST_TO_ADDR
// for i := 1 to 8 do
6434: LD_ADDR_VAR 0 2
6438: PUSH
6439: DOUBLE
6440: LD_INT 1
6442: DEC
6443: ST_TO_ADDR
6444: LD_INT 8
6446: PUSH
6447: FOR_TO
6448: IFFALSE 6595
// if mpSidePositions [ i ] then
6450: LD_EXP 7
6454: PUSH
6455: LD_VAR 0 2
6459: ARRAY
6460: IFFALSE 6593
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6462: LD_EXP 19
6466: PUSH
6467: LD_EXP 7
6471: PUSH
6472: LD_VAR 0 2
6476: ARRAY
6477: ARRAY
6478: PPUSH
6479: LD_INT 0
6481: PPUSH
6482: CALL_OW 424
// for j := 1 to 8 do
6486: LD_ADDR_VAR 0 3
6490: PUSH
6491: DOUBLE
6492: LD_INT 1
6494: DEC
6495: ST_TO_ADDR
6496: LD_INT 8
6498: PUSH
6499: FOR_TO
6500: IFFALSE 6591
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6502: LD_EXP 7
6506: PUSH
6507: LD_VAR 0 3
6511: ARRAY
6512: IFFALSE 6561
6514: PUSH
6515: LD_EXP 8
6519: PUSH
6520: LD_VAR 0 2
6524: ARRAY
6525: PUSH
6526: LD_EXP 8
6530: PUSH
6531: LD_VAR 0 3
6535: ARRAY
6536: NONEQUAL
6537: IFTRUE 6560
6539: PUSH
6540: LD_EXP 11
6544: NOT
6545: IFFALSE 6559
6547: PUSH
6548: LD_VAR 0 2
6552: PUSH
6553: LD_VAR 0 3
6557: NONEQUAL
6558: AND
6559: OR
6560: AND
6561: IFFALSE 6589
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6563: LD_VAR 0 3
6567: PPUSH
6568: LD_EXP 19
6572: PUSH
6573: LD_EXP 7
6577: PUSH
6578: LD_VAR 0 2
6582: ARRAY
6583: ARRAY
6584: PPUSH
6585: CALL_OW 334
6589: GO 6499
6591: POP
6592: POP
// end ;
6593: GO 6447
6595: POP
6596: POP
// end ;
6597: LD_VAR 0 1
6601: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6602: LD_EXP 47
6606: IFFALSE 6785
6608: GO 6610
6610: DISABLE
6611: LD_INT 0
6613: PPUSH
6614: PPUSH
// begin for i := 1 to 8 do
6615: LD_ADDR_VAR 0 1
6619: PUSH
6620: DOUBLE
6621: LD_INT 1
6623: DEC
6624: ST_TO_ADDR
6625: LD_INT 8
6627: PUSH
6628: FOR_TO
6629: IFFALSE 6782
// if mpSidePositions [ i ] then
6631: LD_EXP 7
6635: PUSH
6636: LD_VAR 0 1
6640: ARRAY
6641: IFFALSE 6780
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6643: LD_ADDR_VAR 0 2
6647: PUSH
6648: LD_EXP 19
6652: PUSH
6653: LD_EXP 7
6657: PUSH
6658: LD_VAR 0 1
6662: ARRAY
6663: ARRAY
6664: PPUSH
6665: LD_INT 2
6667: PUSH
6668: LD_INT 21
6670: PUSH
6671: LD_INT 1
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: LD_INT 21
6680: PUSH
6681: LD_INT 2
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 22
6695: PUSH
6696: LD_OWVAR 2
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PPUSH
6709: CALL_OW 70
6713: PUSH
6714: FOR_IN
6715: IFFALSE 6778
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6717: LD_EXP 8
6721: PUSH
6722: LD_VAR 0 1
6726: ARRAY
6727: PUSH
6728: LD_EXP 8
6732: PUSH
6733: LD_OWVAR 2
6737: ARRAY
6738: NONEQUAL
6739: IFTRUE 6762
6741: PUSH
6742: LD_EXP 11
6746: NOT
6747: IFFALSE 6761
6749: PUSH
6750: LD_VAR 0 1
6754: PUSH
6755: LD_OWVAR 2
6759: NONEQUAL
6760: AND
6761: OR
6762: IFFALSE 6776
// ComMoveToArea ( un , BuildUpEscape ) ;
6764: LD_VAR 0 2
6768: PPUSH
6769: LD_INT 14
6771: PPUSH
6772: CALL_OW 113
6776: GO 6714
6778: POP
6779: POP
6780: GO 6628
6782: POP
6783: POP
// enable ;
6784: ENABLE
// end ;
6785: PPOPN 2
6787: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6788: LD_EXP 20
6792: IFFALSE 6842
6794: GO 6796
6796: DISABLE
6797: LD_INT 0
6799: PPUSH
// begin tmp := mpBuildUpTime ;
6800: LD_ADDR_VAR 0 1
6804: PUSH
6805: LD_EXP 20
6809: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6810: LD_INT 35
6812: PPUSH
6813: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6817: LD_ADDR_VAR 0 1
6821: PUSH
6822: LD_VAR 0 1
6826: PUSH
6827: LD_INT 35
6829: MINUS
6830: ST_TO_ADDR
// until not tmp ;
6831: LD_VAR 0 1
6835: NOT
6836: IFFALSE 6810
// EndBuildUp ;
6838: CALL 6421 0 0
// end ;
6842: PPOPN 1
6844: END
// every 0 0$1 trigger mpActive marked mpWin do
6845: LD_INT 100
6847: IFFALSE 6881
6849: GO 6851
6851: DISABLE
// begin if IAmServer then
6852: CALL_OW 518
6856: IFFALSE 6865
// wait ( 0 0$3 ) ;
6858: LD_INT 105
6860: PPUSH
6861: CALL_OW 67
// if Multiplayer then
6865: LD_OWVAR 4
6869: IFFALSE 6877
// YouWinInMultiplayer else
6871: CALL_OW 106
6875: GO 6881
// YouWin ;
6877: CALL_OW 103
// end ;
6881: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6882: LD_INT 0
6884: PPUSH
// result := false ;
6885: LD_ADDR_VAR 0 3
6889: PUSH
6890: LD_INT 0
6892: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6893: LD_VAR 0 1
6897: PUSH
6898: LD_INT 1
6900: DOUBLE
6901: EQUAL
6902: IFTRUE 6912
6904: LD_INT 5
6906: DOUBLE
6907: EQUAL
6908: IFTRUE 6912
6910: GO 6985
6912: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6913: LD_ADDR_VAR 0 3
6917: PUSH
6918: LD_INT 22
6920: PUSH
6921: LD_VAR 0 2
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 2
6932: PUSH
6933: LD_INT 21
6935: PUSH
6936: LD_INT 1
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 33
6945: PUSH
6946: LD_INT 3
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 33
6955: PUSH
6956: LD_INT 5
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PPUSH
6973: CALL_OW 69
6977: PPUSH
6978: CALL 12224 0 1
6982: ST_TO_ADDR
// end ; GameTypeSurvival :
6983: GO 7224
6985: LD_INT 2
6987: DOUBLE
6988: EQUAL
6989: IFTRUE 6993
6991: GO 7123
6993: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6994: LD_ADDR_VAR 0 3
6998: PUSH
6999: LD_INT 22
7001: PUSH
7002: LD_VAR 0 2
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 2
7013: PUSH
7014: LD_INT 30
7016: PUSH
7017: LD_INT 0
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 30
7026: PUSH
7027: LD_INT 1
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PPUSH
7043: CALL_OW 69
7047: PPUSH
7048: CALL 12224 0 1
7052: IFFALSE 7120
7054: PUSH
7055: LD_INT 22
7057: PUSH
7058: LD_VAR 0 2
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 2
7069: PUSH
7070: LD_INT 21
7072: PUSH
7073: LD_INT 1
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 33
7082: PUSH
7083: LD_INT 3
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 33
7092: PUSH
7093: LD_INT 5
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PPUSH
7110: CALL_OW 69
7114: PPUSH
7115: CALL 12224 0 1
7119: AND
7120: ST_TO_ADDR
// end ; GameTypeKing :
7121: GO 7224
7123: LD_INT 3
7125: DOUBLE
7126: EQUAL
7127: IFTRUE 7131
7129: GO 7223
7131: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_INT 22
7139: PUSH
7140: LD_VAR 0 2
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 2
7151: PUSH
7152: LD_INT 21
7154: PUSH
7155: LD_INT 1
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 33
7164: PUSH
7165: LD_INT 3
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 33
7174: PUSH
7175: LD_INT 5
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PPUSH
7192: CALL_OW 69
7196: PPUSH
7197: CALL 12224 0 1
7201: IFFALSE 7220
7203: PUSH
7204: LD_VAR 0 2
7208: PPUSH
7209: CALL 60120 0 1
7213: PUSH
7214: LD_EXP 35
7218: LESS
7219: AND
7220: ST_TO_ADDR
// end ; end ;
7221: GO 7224
7223: POP
// end ;
7224: LD_VAR 0 3
7228: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7229: LD_INT 100
7231: IFFALSE 7461
7233: GO 7235
7235: DISABLE
7236: LD_INT 0
7238: PPUSH
7239: PPUSH
// begin if Multiplayer then
7240: LD_OWVAR 4
7244: IFFALSE 7252
// SetPlayerSpectator ( ) else
7246: CALL_OW 572
7250: GO 7261
// FogOff ( your_side ) ;
7252: LD_OWVAR 2
7256: PPUSH
7257: CALL_OW 344
// repeat gameIsOn := false ;
7261: LD_ADDR_VAR 0 1
7265: PUSH
7266: LD_INT 0
7268: ST_TO_ADDR
// for i := 1 to 8 do
7269: LD_ADDR_VAR 0 2
7273: PUSH
7274: DOUBLE
7275: LD_INT 1
7277: DEC
7278: ST_TO_ADDR
7279: LD_INT 8
7281: PUSH
7282: FOR_TO
7283: IFFALSE 7413
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7285: LD_EXP 7
7289: PUSH
7290: LD_VAR 0 2
7294: ARRAY
7295: IFFALSE 7308
7297: PUSH
7298: LD_VAR 0 2
7302: PPUSH
7303: CALL_OW 108
7307: AND
7308: IFFALSE 7322
7310: PUSH
7311: LD_VAR 0 2
7315: PUSH
7316: LD_OWVAR 2
7320: NONEQUAL
7321: AND
7322: IFFALSE 7411
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7324: LD_EXP 8
7328: PUSH
7329: LD_VAR 0 2
7333: ARRAY
7334: NOT
7335: IFTRUE 7383
7337: PUSH
7338: LD_EXP 8
7342: PUSH
7343: LD_VAR 0 2
7347: ARRAY
7348: PUSH
7349: LD_EXP 8
7353: PUSH
7354: LD_OWVAR 2
7358: ARRAY
7359: NONEQUAL
7360: IFFALSE 7382
7362: PUSH
7363: LD_OWVAR 2
7367: PPUSH
7368: LD_VAR 0 2
7372: PPUSH
7373: CALL_OW 81
7377: PUSH
7378: LD_INT 1
7380: NONEQUAL
7381: AND
7382: OR
7383: IFFALSE 7411
// if HasPowerByGameType ( mpGameType , i ) then
7385: LD_EXP 3
7389: PPUSH
7390: LD_VAR 0 2
7394: PPUSH
7395: CALL 6882 0 2
7399: IFFALSE 7411
// begin gameIsOn := true ;
7401: LD_ADDR_VAR 0 1
7405: PUSH
7406: LD_INT 1
7408: ST_TO_ADDR
// break ;
7409: GO 7413
// end ;
7411: GO 7282
7413: POP
7414: POP
// wait ( 100 ) ;
7415: LD_INT 100
7417: PPUSH
7418: CALL_OW 67
// until not gameIsOn ;
7422: LD_VAR 0 1
7426: NOT
7427: IFFALSE 7261
// if IAmServer then
7429: CALL_OW 518
7433: IFFALSE 7442
// wait ( 0 0$3 ) ;
7435: LD_INT 105
7437: PPUSH
7438: CALL_OW 67
// if Multiplayer then
7442: LD_OWVAR 4
7446: IFFALSE 7454
// YouLostInMultiplayer else
7448: CALL_OW 107
7452: GO 7461
// YouLost (  ) ;
7454: LD_STRING 
7456: PPUSH
7457: CALL_OW 104
// end ;
7461: PPOPN 2
7463: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7464: LD_EXP 33
7468: IFFALSE 7852
7470: GO 7472
7472: DISABLE
7473: LD_INT 0
7475: PPUSH
7476: PPUSH
7477: PPUSH
7478: PPUSH
7479: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7480: LD_ADDR_VAR 0 5
7484: PUSH
7485: LD_INT 1
7487: PUSH
7488: LD_INT 2
7490: PUSH
7491: LD_INT 3
7493: PUSH
7494: LD_INT 4
7496: PUSH
7497: LD_INT 5
7499: PUSH
7500: LD_INT 6
7502: PUSH
7503: LD_INT 7
7505: PUSH
7506: LD_INT 8
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7519: LD_INT 350
7521: PPUSH
7522: CALL_OW 67
// for i := 1 to 8 do
7526: LD_ADDR_VAR 0 1
7530: PUSH
7531: DOUBLE
7532: LD_INT 1
7534: DEC
7535: ST_TO_ADDR
7536: LD_INT 8
7538: PUSH
7539: FOR_TO
7540: IFFALSE 7822
// begin j := sides [ i ] ;
7542: LD_ADDR_VAR 0 2
7546: PUSH
7547: LD_VAR 0 5
7551: PUSH
7552: LD_VAR 0 1
7556: ARRAY
7557: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7558: LD_EXP 40
7562: PUSH
7563: LD_VAR 0 2
7567: ARRAY
7568: PPUSH
7569: CALL 12224 0 1
7573: IFFALSE 7586
7575: PUSH
7576: LD_VAR 0 2
7580: PPUSH
7581: CALL_OW 108
7585: AND
7586: IFFALSE 7604
7588: PUSH
7589: LD_EXP 3
7593: PPUSH
7594: LD_VAR 0 2
7598: PPUSH
7599: CALL 6882 0 2
7603: AND
7604: IFFALSE 7820
// begin wait ( mpRespawn div 3 ) ;
7606: LD_EXP 33
7610: PUSH
7611: LD_INT 3
7613: DIV
7614: PPUSH
7615: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7619: LD_ADDR_VAR 0 3
7623: PUSH
7624: LD_INT 22
7626: PUSH
7627: LD_VAR 0 2
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 50
7638: PUSH
7639: EMPTY
7640: LIST
7641: PUSH
7642: LD_INT 2
7644: PUSH
7645: LD_INT 30
7647: PUSH
7648: LD_INT 0
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 30
7657: PUSH
7658: LD_INT 1
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: LIST
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: LIST
7674: PPUSH
7675: CALL_OW 69
7679: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7680: LD_VAR 0 3
7684: NOT
7685: IFTRUE 7699
7687: PUSH
7688: LD_VAR 0 2
7692: PPUSH
7693: CALL_OW 108
7697: NOT
7698: OR
7699: IFTRUE 7718
7701: PUSH
7702: LD_EXP 3
7706: PPUSH
7707: LD_VAR 0 2
7711: PPUSH
7712: CALL 6882 0 2
7716: NOT
7717: OR
7718: IFFALSE 7722
// continue ;
7720: GO 7539
// spawn := tmp [ 1 ] ;
7722: LD_ADDR_VAR 0 4
7726: PUSH
7727: LD_VAR 0 3
7731: PUSH
7732: LD_INT 1
7734: ARRAY
7735: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7736: LD_EXP 40
7740: PUSH
7741: LD_VAR 0 2
7745: ARRAY
7746: PUSH
7747: LD_INT 1
7749: ARRAY
7750: PPUSH
7751: LD_VAR 0 4
7755: PPUSH
7756: CALL_OW 250
7760: PPUSH
7761: LD_VAR 0 4
7765: PPUSH
7766: CALL_OW 251
7770: PPUSH
7771: LD_INT 32
7773: PPUSH
7774: LD_INT 1
7776: PPUSH
7777: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7781: LD_ADDR_EXP 40
7785: PUSH
7786: LD_EXP 40
7790: PPUSH
7791: LD_VAR 0 2
7795: PPUSH
7796: LD_EXP 40
7800: PUSH
7801: LD_VAR 0 2
7805: ARRAY
7806: PPUSH
7807: LD_INT 1
7809: PPUSH
7810: CALL_OW 3
7814: PPUSH
7815: CALL_OW 1
7819: ST_TO_ADDR
// end ; end ;
7820: GO 7539
7822: POP
7823: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7824: LD_ADDR_VAR 0 5
7828: PUSH
7829: LD_VAR 0 5
7833: PPUSH
7834: LD_INT 1
7836: PPUSH
7837: LD_INT 8
7839: PPUSH
7840: LD_INT 1
7842: PPUSH
7843: CALL 14516 0 4
7847: ST_TO_ADDR
// until false ;
7848: LD_INT 0
7850: IFFALSE 7519
// end ;
7852: PPOPN 5
7854: END
// every 0 0$1 marked mpActive do
7855: GO 7857
7857: DISABLE
// begin enable ;
7858: ENABLE
// if not mpDisplayStrings then
7859: LD_EXP 38
7863: NOT
7864: IFFALSE 7875
// begin display_strings := [ ] ;
7866: LD_ADDR_OWVAR 47
7870: PUSH
7871: EMPTY
7872: ST_TO_ADDR
// exit ;
7873: GO 7885
// end ; display_strings := mpDisplayStrings ;
7875: LD_ADDR_OWVAR 47
7879: PUSH
7880: LD_EXP 38
7884: ST_TO_ADDR
// end ; end_of_file
7885: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7886: LD_INT 0
7888: PPUSH
7889: PPUSH
7890: PPUSH
7891: PPUSH
7892: PPUSH
7893: PPUSH
7894: PPUSH
7895: PPUSH
7896: PPUSH
// if GetType ( un ) = unit_vehicle then
7897: LD_VAR 0 1
7901: PPUSH
7902: CALL_OW 247
7906: PUSH
7907: LD_INT 2
7909: EQUAL
7910: IFFALSE 7914
// exit ;
7912: GO 8552
// side := GetSide ( un ) ;
7914: LD_ADDR_VAR 0 9
7918: PUSH
7919: LD_VAR 0 1
7923: PPUSH
7924: CALL_OW 255
7928: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7929: LD_EXP 3
7933: PUSH
7934: LD_INT 2
7936: EQUAL
7937: IFFALSE 8013
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7939: LD_VAR 0 1
7943: PPUSH
7944: CALL_OW 266
7948: PUSH
7949: LD_INT 0
7951: PUSH
7952: LD_INT 1
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: IN
7959: IFFALSE 8013
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7961: LD_ADDR_VAR 0 3
7965: PUSH
7966: LD_INT 22
7968: PUSH
7969: LD_VAR 0 9
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 21
7980: PUSH
7981: LD_INT 1
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PPUSH
7992: CALL_OW 69
7996: PUSH
7997: FOR_IN
7998: IFFALSE 8011
// KillUnit ( i ) ;
8000: LD_VAR 0 3
8004: PPUSH
8005: CALL_OW 66
8009: GO 7997
8011: POP
8012: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8013: LD_VAR 0 1
8017: PPUSH
8018: CALL_OW 257
8022: PUSH
8023: LD_INT 12
8025: PUSH
8026: LD_INT 17
8028: PUSH
8029: LD_INT 15
8031: PUSH
8032: LD_INT 16
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: IN
8041: IFTRUE 8058
8043: PUSH
8044: LD_VAR 0 1
8048: PPUSH
8049: CALL_OW 263
8053: PUSH
8054: LD_INT 5
8056: EQUAL
8057: OR
8058: IFFALSE 8277
// begin tag := 0 ;
8060: LD_ADDR_VAR 0 5
8064: PUSH
8065: LD_INT 0
8067: ST_TO_ADDR
// for i := 1 to 8 do
8068: LD_ADDR_VAR 0 3
8072: PUSH
8073: DOUBLE
8074: LD_INT 1
8076: DEC
8077: ST_TO_ADDR
8078: LD_INT 8
8080: PUSH
8081: FOR_TO
8082: IFFALSE 8116
// if un in mpApePosIndex [ i ] then
8084: LD_VAR 0 1
8088: PUSH
8089: LD_EXP 32
8093: PUSH
8094: LD_VAR 0 3
8098: ARRAY
8099: IN
8100: IFFALSE 8114
// begin tag := i ;
8102: LD_ADDR_VAR 0 5
8106: PUSH
8107: LD_VAR 0 3
8111: ST_TO_ADDR
// break ;
8112: GO 8116
// end ;
8114: GO 8081
8116: POP
8117: POP
// if not tag then
8118: LD_VAR 0 5
8122: NOT
8123: IFFALSE 8127
// exit ;
8125: GO 8552
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8127: LD_ADDR_VAR 0 7
8131: PUSH
8132: LD_EXP 31
8136: PUSH
8137: LD_EXP 7
8141: PUSH
8142: LD_VAR 0 5
8146: ARRAY
8147: ARRAY
8148: ST_TO_ADDR
// if not area then
8149: LD_VAR 0 7
8153: NOT
8154: IFFALSE 8158
// exit ;
8156: GO 8552
// wait ( 4 4$00 ) ;
8158: LD_INT 8400
8160: PPUSH
8161: CALL_OW 67
// repeat wait ( 10 ) ;
8165: LD_INT 10
8167: PPUSH
8168: CALL_OW 67
// until not mpBlockRespThread ;
8172: LD_EXP 45
8176: NOT
8177: IFFALSE 8165
// mpBlockRespThread := true ;
8179: LD_ADDR_EXP 45
8183: PUSH
8184: LD_INT 1
8186: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8187: LD_INT 0
8189: PPUSH
8190: CALL 44283 0 1
// ape := CreateHuman ;
8194: LD_ADDR_VAR 0 4
8198: PUSH
8199: CALL_OW 44
8203: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8204: LD_ADDR_EXP 32
8208: PUSH
8209: LD_EXP 32
8213: PPUSH
8214: LD_VAR 0 5
8218: PPUSH
8219: LD_EXP 32
8223: PUSH
8224: LD_VAR 0 5
8228: ARRAY
8229: PPUSH
8230: LD_VAR 0 4
8234: PPUSH
8235: CALL 48156 0 2
8239: PPUSH
8240: CALL_OW 1
8244: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8245: LD_VAR 0 4
8249: PPUSH
8250: LD_VAR 0 7
8254: PPUSH
8255: LD_INT 0
8257: PPUSH
8258: CALL_OW 49
// wait ( 10 ) ;
8262: LD_INT 10
8264: PPUSH
8265: CALL_OW 67
// mpBlockRespThread := false ;
8269: LD_ADDR_EXP 45
8273: PUSH
8274: LD_INT 0
8276: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8277: LD_VAR 0 1
8281: PPUSH
8282: CALL_OW 247
8286: PUSH
8287: LD_INT 1
8289: EQUAL
8290: IFFALSE 8307
8292: PUSH
8293: LD_VAR 0 1
8297: PPUSH
8298: CALL_OW 248
8302: PUSH
8303: LD_INT 0
8305: GREATER
8306: AND
8307: IFFALSE 8552
// begin if not mpRespawn then
8309: LD_EXP 33
8313: NOT
8314: IFFALSE 8318
// exit ;
8316: GO 8552
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8318: LD_VAR 0 9
8322: PPUSH
8323: CALL_OW 108
8327: NOT
8328: IFFALSE 8347
8330: PUSH
8331: LD_EXP 3
8335: PPUSH
8336: LD_VAR 0 9
8340: PPUSH
8341: CALL 6882 0 2
8345: NOT
8346: AND
8347: IFFALSE 8351
// exit ;
8349: GO 8552
// side := GetSide ( un ) ;
8351: LD_ADDR_VAR 0 9
8355: PUSH
8356: LD_VAR 0 1
8360: PPUSH
8361: CALL_OW 255
8365: ST_TO_ADDR
// nation := GetNation ( un ) ;
8366: LD_ADDR_VAR 0 8
8370: PUSH
8371: LD_VAR 0 1
8375: PPUSH
8376: CALL_OW 248
8380: ST_TO_ADDR
// class := GetClass ( un ) ;
8381: LD_ADDR_VAR 0 6
8385: PUSH
8386: LD_VAR 0 1
8390: PPUSH
8391: CALL_OW 257
8395: ST_TO_ADDR
// if class > 4 then
8396: LD_VAR 0 6
8400: PUSH
8401: LD_INT 4
8403: GREATER
8404: IFFALSE 8414
// class := 1 ;
8406: LD_ADDR_VAR 0 6
8410: PUSH
8411: LD_INT 1
8413: ST_TO_ADDR
// repeat wait ( 10 ) ;
8414: LD_INT 10
8416: PPUSH
8417: CALL_OW 67
// until not mpBlockRespThread ;
8421: LD_EXP 45
8425: NOT
8426: IFFALSE 8414
// mpBlockRespThread := true ;
8428: LD_ADDR_EXP 45
8432: PUSH
8433: LD_INT 1
8435: ST_TO_ADDR
// uc_side := side ;
8436: LD_ADDR_OWVAR 20
8440: PUSH
8441: LD_VAR 0 9
8445: ST_TO_ADDR
// uc_nation := nation ;
8446: LD_ADDR_OWVAR 21
8450: PUSH
8451: LD_VAR 0 8
8455: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8456: LD_INT 0
8458: PPUSH
8459: LD_VAR 0 6
8463: PPUSH
8464: LD_INT 2
8466: PPUSH
8467: CALL_OW 380
// un := CreateHuman ;
8471: LD_ADDR_VAR 0 1
8475: PUSH
8476: CALL_OW 44
8480: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8481: LD_ADDR_EXP 40
8485: PUSH
8486: LD_EXP 40
8490: PPUSH
8491: LD_VAR 0 9
8495: PPUSH
8496: LD_EXP 40
8500: PUSH
8501: LD_VAR 0 9
8505: ARRAY
8506: PPUSH
8507: LD_EXP 40
8511: PUSH
8512: LD_VAR 0 9
8516: ARRAY
8517: PUSH
8518: LD_INT 1
8520: PLUS
8521: PPUSH
8522: LD_VAR 0 1
8526: PPUSH
8527: CALL_OW 1
8531: PPUSH
8532: CALL_OW 1
8536: ST_TO_ADDR
// wait ( 10 ) ;
8537: LD_INT 10
8539: PPUSH
8540: CALL_OW 67
// mpBlockRespThread := false ;
8544: LD_ADDR_EXP 45
8548: PUSH
8549: LD_INT 0
8551: ST_TO_ADDR
// end ; end ;
8552: LD_VAR 0 2
8556: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8557: LD_INT 0
8559: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8560: LD_VAR 0 1
8564: PPUSH
8565: CALL_OW 266
8569: PUSH
8570: LD_INT 0
8572: PUSH
8573: LD_INT 1
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: IN
8580: IFFALSE 8605
// SetBName ( building , @ & GetSide ( building ) ) ;
8582: LD_VAR 0 1
8586: PPUSH
8587: LD_STRING @
8589: PUSH
8590: LD_VAR 0 1
8594: PPUSH
8595: CALL_OW 255
8599: STR
8600: PPUSH
8601: CALL_OW 500
// end ;
8605: LD_VAR 0 2
8609: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8610: LD_INT 0
8612: PPUSH
8613: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8614: LD_EXP 3
8618: PUSH
8619: LD_INT 2
8621: EQUAL
8622: IFFALSE 8646
8624: PUSH
8625: LD_VAR 0 1
8629: PPUSH
8630: CALL_OW 266
8634: PUSH
8635: LD_INT 0
8637: PUSH
8638: LD_INT 1
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: IN
8645: AND
8646: IFFALSE 8725
// begin SetSide ( building , oldSide ) ;
8648: LD_VAR 0 1
8652: PPUSH
8653: LD_VAR 0 2
8657: PPUSH
8658: CALL_OW 235
// KillUnit ( building ) ;
8662: LD_VAR 0 1
8666: PPUSH
8667: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8671: LD_ADDR_VAR 0 5
8675: PUSH
8676: LD_INT 22
8678: PUSH
8679: LD_VAR 0 2
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 21
8690: PUSH
8691: LD_INT 1
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PPUSH
8702: CALL_OW 69
8706: PUSH
8707: FOR_IN
8708: IFFALSE 8721
// KillUnit ( i ) ;
8710: LD_VAR 0 5
8714: PPUSH
8715: CALL_OW 66
8719: GO 8707
8721: POP
8722: POP
// exit ;
8723: GO 8770
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8725: LD_VAR 0 1
8729: PPUSH
8730: CALL_OW 266
8734: PUSH
8735: LD_INT 0
8737: PUSH
8738: LD_INT 1
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: IN
8745: IFFALSE 8770
// SetBName ( building , @ & GetSide ( building ) ) ;
8747: LD_VAR 0 1
8751: PPUSH
8752: LD_STRING @
8754: PUSH
8755: LD_VAR 0 1
8759: PPUSH
8760: CALL_OW 255
8764: STR
8765: PPUSH
8766: CALL_OW 500
// end ;
8770: LD_VAR 0 4
8774: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8775: LD_INT 0
8777: PPUSH
8778: PPUSH
8779: PPUSH
// if mpGameType <> GameTypeFamine then
8780: LD_EXP 3
8784: PUSH
8785: LD_INT 5
8787: NONEQUAL
8788: IFFALSE 8792
// exit ;
8790: GO 9006
// for i := 1 to mpGlobalOilDeposits do
8792: LD_ADDR_VAR 0 6
8796: PUSH
8797: DOUBLE
8798: LD_INT 1
8800: DEC
8801: ST_TO_ADDR
8802: LD_EXP 41
8806: PUSH
8807: FOR_TO
8808: IFFALSE 9004
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8810: LD_EXP 41
8814: PUSH
8815: LD_VAR 0 6
8819: ARRAY
8820: PUSH
8821: LD_INT 1
8823: ARRAY
8824: PPUSH
8825: LD_EXP 41
8829: PUSH
8830: LD_VAR 0 6
8834: ARRAY
8835: PUSH
8836: LD_INT 2
8838: ARRAY
8839: PPUSH
8840: CALL_OW 428
8844: PUSH
8845: LD_VAR 0 1
8849: EQUAL
8850: IFFALSE 9002
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8852: LD_ADDR_VAR 0 7
8856: PUSH
8857: LD_EXP 41
8861: PUSH
8862: LD_VAR 0 6
8866: ARRAY
8867: PUSH
8868: LD_INT 3
8870: ARRAY
8871: ST_TO_ADDR
// value := Dec ( value ) ;
8872: LD_ADDR_VAR 0 7
8876: PUSH
8877: LD_VAR 0 7
8881: PPUSH
8882: CALL 49551 0 1
8886: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8887: LD_ADDR_EXP 41
8891: PUSH
8892: LD_EXP 41
8896: PPUSH
8897: LD_VAR 0 6
8901: PPUSH
8902: LD_EXP 41
8906: PUSH
8907: LD_VAR 0 6
8911: ARRAY
8912: PPUSH
8913: LD_INT 3
8915: PPUSH
8916: LD_VAR 0 7
8920: PPUSH
8921: CALL_OW 1
8925: PPUSH
8926: CALL_OW 1
8930: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8931: LD_VAR 0 1
8935: PPUSH
8936: LD_VAR 0 7
8940: PPUSH
8941: CALL_OW 505
// if value = 0 then
8945: LD_VAR 0 7
8949: PUSH
8950: LD_INT 0
8952: EQUAL
8953: IFFALSE 9002
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8955: LD_EXP 41
8959: PUSH
8960: LD_VAR 0 6
8964: ARRAY
8965: PUSH
8966: LD_INT 1
8968: ARRAY
8969: PPUSH
8970: LD_EXP 41
8974: PUSH
8975: LD_VAR 0 6
8979: ARRAY
8980: PUSH
8981: LD_INT 2
8983: ARRAY
8984: PPUSH
8985: CALL_OW 63
// KillUnit ( building ) ;
8989: LD_VAR 0 1
8993: PPUSH
8994: CALL_OW 66
// exit ;
8998: POP
8999: POP
9000: GO 9006
// end ; end ; end ;
9002: GO 8807
9004: POP
9005: POP
// end ;
9006: LD_VAR 0 5
9010: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9011: LD_INT 0
9013: PPUSH
9014: PPUSH
9015: PPUSH
// if mpGameType <> GameTypeFamine then
9016: LD_EXP 3
9020: PUSH
9021: LD_INT 5
9023: NONEQUAL
9024: IFFALSE 9028
// exit ;
9026: GO 9242
// for i := 1 to mpGlobalSibDeposits do
9028: LD_ADDR_VAR 0 6
9032: PUSH
9033: DOUBLE
9034: LD_INT 1
9036: DEC
9037: ST_TO_ADDR
9038: LD_EXP 42
9042: PUSH
9043: FOR_TO
9044: IFFALSE 9240
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9046: LD_EXP 42
9050: PUSH
9051: LD_VAR 0 6
9055: ARRAY
9056: PUSH
9057: LD_INT 1
9059: ARRAY
9060: PPUSH
9061: LD_EXP 42
9065: PUSH
9066: LD_VAR 0 6
9070: ARRAY
9071: PUSH
9072: LD_INT 2
9074: ARRAY
9075: PPUSH
9076: CALL_OW 428
9080: PUSH
9081: LD_VAR 0 1
9085: EQUAL
9086: IFFALSE 9238
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9088: LD_ADDR_VAR 0 7
9092: PUSH
9093: LD_EXP 42
9097: PUSH
9098: LD_VAR 0 6
9102: ARRAY
9103: PUSH
9104: LD_INT 3
9106: ARRAY
9107: ST_TO_ADDR
// value := Dec ( value ) ;
9108: LD_ADDR_VAR 0 7
9112: PUSH
9113: LD_VAR 0 7
9117: PPUSH
9118: CALL 49551 0 1
9122: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9123: LD_ADDR_EXP 42
9127: PUSH
9128: LD_EXP 42
9132: PPUSH
9133: LD_VAR 0 6
9137: PPUSH
9138: LD_EXP 42
9142: PUSH
9143: LD_VAR 0 6
9147: ARRAY
9148: PPUSH
9149: LD_INT 3
9151: PPUSH
9152: LD_VAR 0 7
9156: PPUSH
9157: CALL_OW 1
9161: PPUSH
9162: CALL_OW 1
9166: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9167: LD_VAR 0 1
9171: PPUSH
9172: LD_VAR 0 7
9176: PPUSH
9177: CALL_OW 505
// if value = 0 then
9181: LD_VAR 0 7
9185: PUSH
9186: LD_INT 0
9188: EQUAL
9189: IFFALSE 9238
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9191: LD_EXP 42
9195: PUSH
9196: LD_VAR 0 6
9200: ARRAY
9201: PUSH
9202: LD_INT 1
9204: ARRAY
9205: PPUSH
9206: LD_EXP 42
9210: PUSH
9211: LD_VAR 0 6
9215: ARRAY
9216: PUSH
9217: LD_INT 2
9219: ARRAY
9220: PPUSH
9221: CALL_OW 63
// KillUnit ( building ) ;
9225: LD_VAR 0 1
9229: PPUSH
9230: CALL_OW 66
// exit ;
9234: POP
9235: POP
9236: GO 9242
// end ; end ; end ;
9238: GO 9043
9240: POP
9241: POP
// end ; end_of_file
9242: LD_VAR 0 5
9246: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9247: LD_EXP 39
9251: IFFALSE 9259
9253: PUSH
9254: CALL 9469 0 0
9258: AND
9259: IFFALSE 9267
9261: PUSH
9262: LD_OWVAR 4
9266: AND
9267: IFFALSE 9466
9269: GO 9271
9271: DISABLE
9272: LD_INT 0
9274: PPUSH
9275: PPUSH
// begin canWin := false ;
9276: LD_ADDR_VAR 0 2
9280: PUSH
9281: LD_INT 0
9283: ST_TO_ADDR
// if not HasPower ( your_side ) then
9284: LD_OWVAR 2
9288: PPUSH
9289: CALL 9511 0 1
9293: NOT
9294: IFFALSE 9305
// begin Multiplayer_Loose_Message ;
9296: CALL_OW 521
// enable ( mpLose ) ;
9300: LD_INT 102
9302: ENABLE_MARKED
// end else
9303: GO 9466
// begin canWin := true ;
9305: LD_ADDR_VAR 0 2
9309: PUSH
9310: LD_INT 1
9312: ST_TO_ADDR
// for i := 1 to 8 do
9313: LD_ADDR_VAR 0 1
9317: PUSH
9318: DOUBLE
9319: LD_INT 1
9321: DEC
9322: ST_TO_ADDR
9323: LD_INT 8
9325: PUSH
9326: FOR_TO
9327: IFFALSE 9452
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9329: LD_EXP 7
9333: PUSH
9334: LD_VAR 0 1
9338: ARRAY
9339: IFFALSE 9352
9341: PUSH
9342: LD_VAR 0 1
9346: PPUSH
9347: CALL_OW 108
9351: AND
9352: IFFALSE 9366
9354: PUSH
9355: LD_VAR 0 1
9359: PUSH
9360: LD_OWVAR 2
9364: NONEQUAL
9365: AND
9366: IFFALSE 9450
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9368: LD_EXP 8
9372: PUSH
9373: LD_VAR 0 1
9377: ARRAY
9378: NOT
9379: IFTRUE 9427
9381: PUSH
9382: LD_EXP 8
9386: PUSH
9387: LD_VAR 0 1
9391: ARRAY
9392: PUSH
9393: LD_EXP 8
9397: PUSH
9398: LD_OWVAR 2
9402: ARRAY
9403: NONEQUAL
9404: IFFALSE 9426
9406: PUSH
9407: LD_OWVAR 2
9411: PPUSH
9412: LD_VAR 0 1
9416: PPUSH
9417: CALL_OW 81
9421: PUSH
9422: LD_INT 1
9424: NONEQUAL
9425: AND
9426: OR
9427: IFFALSE 9450
// if HasPower ( i ) then
9429: LD_VAR 0 1
9433: PPUSH
9434: CALL 9511 0 1
9438: IFFALSE 9450
// begin canWin := false ;
9440: LD_ADDR_VAR 0 2
9444: PUSH
9445: LD_INT 0
9447: ST_TO_ADDR
// break ;
9448: GO 9452
// end ;
9450: GO 9326
9452: POP
9453: POP
// if canWin then
9454: LD_VAR 0 2
9458: IFFALSE 9465
// enable ( mpWin ) else
9460: LD_INT 101
9462: ENABLE_MARKED
9463: GO 9466
// enable ;
9465: ENABLE
// end ; end ;
9466: PPOPN 2
9468: END
// function CanWinLoose ; begin
9469: LD_INT 0
9471: PPUSH
// result := true ;
9472: LD_ADDR_VAR 0 1
9476: PUSH
9477: LD_INT 1
9479: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9480: CALL_OW 531
9484: IFFALSE 9496
9486: PUSH
9487: CALL_OW 519
9491: PUSH
9492: LD_INT 1
9494: GREATER
9495: AND
9496: IFFALSE 9506
// result := false ;
9498: LD_ADDR_VAR 0 1
9502: PUSH
9503: LD_INT 0
9505: ST_TO_ADDR
// end ;
9506: LD_VAR 0 1
9510: RET
// function HasPower ( i ) ; begin
9511: LD_INT 0
9513: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9514: LD_ADDR_VAR 0 2
9518: PUSH
9519: LD_INT 22
9521: PUSH
9522: LD_VAR 0 1
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 2
9533: PUSH
9534: LD_INT 21
9536: PUSH
9537: LD_INT 1
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: PUSH
9544: LD_INT 33
9546: PUSH
9547: LD_INT 3
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PUSH
9554: LD_INT 33
9556: PUSH
9557: LD_INT 5
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PPUSH
9574: CALL_OW 69
9578: ST_TO_ADDR
// end ; end_of_file
9579: LD_VAR 0 2
9583: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9584: LD_EXP 39
9588: IFFALSE 9631
9590: GO 9592
9592: DISABLE
9593: LD_INT 0
9595: PPUSH
// begin for i := 1 to 8 do
9596: LD_ADDR_VAR 0 1
9600: PUSH
9601: DOUBLE
9602: LD_INT 1
9604: DEC
9605: ST_TO_ADDR
9606: LD_INT 8
9608: PUSH
9609: FOR_TO
9610: IFFALSE 9629
// SetRestrict ( b_depot , i , state_disabled ) ;
9612: LD_INT 0
9614: PPUSH
9615: LD_VAR 0 1
9619: PPUSH
9620: LD_INT 0
9622: PPUSH
9623: CALL_OW 324
9627: GO 9609
9629: POP
9630: POP
// end ;
9631: PPOPN 1
9633: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9634: LD_EXP 39
9638: IFFALSE 9646
9640: PUSH
9641: CALL 9856 0 0
9645: AND
9646: IFFALSE 9654
9648: PUSH
9649: LD_OWVAR 4
9653: AND
9654: IFFALSE 9853
9656: GO 9658
9658: DISABLE
9659: LD_INT 0
9661: PPUSH
9662: PPUSH
// begin canWin := false ;
9663: LD_ADDR_VAR 0 2
9667: PUSH
9668: LD_INT 0
9670: ST_TO_ADDR
// if not HasPower ( your_side ) then
9671: LD_OWVAR 2
9675: PPUSH
9676: CALL 9898 0 1
9680: NOT
9681: IFFALSE 9692
// begin Multiplayer_Loose_Message ;
9683: CALL_OW 521
// enable ( mpLose ) ;
9687: LD_INT 102
9689: ENABLE_MARKED
// end else
9690: GO 9853
// begin canWin := true ;
9692: LD_ADDR_VAR 0 2
9696: PUSH
9697: LD_INT 1
9699: ST_TO_ADDR
// for i := 1 to 8 do
9700: LD_ADDR_VAR 0 1
9704: PUSH
9705: DOUBLE
9706: LD_INT 1
9708: DEC
9709: ST_TO_ADDR
9710: LD_INT 8
9712: PUSH
9713: FOR_TO
9714: IFFALSE 9839
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9716: LD_EXP 7
9720: PUSH
9721: LD_VAR 0 1
9725: ARRAY
9726: IFFALSE 9739
9728: PUSH
9729: LD_VAR 0 1
9733: PPUSH
9734: CALL_OW 108
9738: AND
9739: IFFALSE 9753
9741: PUSH
9742: LD_VAR 0 1
9746: PUSH
9747: LD_OWVAR 2
9751: NONEQUAL
9752: AND
9753: IFFALSE 9837
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9755: LD_EXP 8
9759: PUSH
9760: LD_VAR 0 1
9764: ARRAY
9765: NOT
9766: IFTRUE 9814
9768: PUSH
9769: LD_EXP 8
9773: PUSH
9774: LD_VAR 0 1
9778: ARRAY
9779: PUSH
9780: LD_EXP 8
9784: PUSH
9785: LD_OWVAR 2
9789: ARRAY
9790: NONEQUAL
9791: IFFALSE 9813
9793: PUSH
9794: LD_OWVAR 2
9798: PPUSH
9799: LD_VAR 0 1
9803: PPUSH
9804: CALL_OW 81
9808: PUSH
9809: LD_INT 1
9811: NONEQUAL
9812: AND
9813: OR
9814: IFFALSE 9837
// if HasPower ( i ) then
9816: LD_VAR 0 1
9820: PPUSH
9821: CALL 9898 0 1
9825: IFFALSE 9837
// begin canWin := false ;
9827: LD_ADDR_VAR 0 2
9831: PUSH
9832: LD_INT 0
9834: ST_TO_ADDR
// break ;
9835: GO 9839
// end ;
9837: GO 9713
9839: POP
9840: POP
// if canWin then
9841: LD_VAR 0 2
9845: IFFALSE 9852
// enable ( mpWin ) else
9847: LD_INT 101
9849: ENABLE_MARKED
9850: GO 9853
// enable ;
9852: ENABLE
// end ; end ;
9853: PPOPN 2
9855: END
// function CanWinLoose ; begin
9856: LD_INT 0
9858: PPUSH
// result := true ;
9859: LD_ADDR_VAR 0 1
9863: PUSH
9864: LD_INT 1
9866: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9867: CALL_OW 531
9871: IFFALSE 9883
9873: PUSH
9874: CALL_OW 519
9878: PUSH
9879: LD_INT 1
9881: GREATER
9882: AND
9883: IFFALSE 9893
// result := false ;
9885: LD_ADDR_VAR 0 1
9889: PUSH
9890: LD_INT 0
9892: ST_TO_ADDR
// end ;
9893: LD_VAR 0 1
9897: RET
// function HasPower ( i ) ; begin
9898: LD_INT 0
9900: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9901: LD_INT 22
9903: PUSH
9904: LD_VAR 0 1
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: LD_INT 2
9915: PUSH
9916: LD_INT 30
9918: PUSH
9919: LD_INT 0
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 30
9928: PUSH
9929: LD_INT 1
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: LIST
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PPUSH
9945: CALL_OW 69
9949: NOT
9950: IFFALSE 9954
// exit ;
9952: GO 10019
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9954: LD_ADDR_VAR 0 2
9958: PUSH
9959: LD_INT 22
9961: PUSH
9962: LD_VAR 0 1
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: LD_INT 2
9973: PUSH
9974: LD_INT 21
9976: PUSH
9977: LD_INT 1
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PUSH
9984: LD_INT 33
9986: PUSH
9987: LD_INT 3
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: LD_INT 33
9996: PUSH
9997: LD_INT 5
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PPUSH
10014: CALL_OW 69
10018: ST_TO_ADDR
// end ; end_of_file
10019: LD_VAR 0 2
10023: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10024: LD_INT 0
10026: PPUSH
10027: PPUSH
// if exist_mode then
10028: LD_VAR 0 2
10032: IFFALSE 10078
// begin unit := CreateCharacter ( prefix & ident ) ;
10034: LD_ADDR_VAR 0 5
10038: PUSH
10039: LD_VAR 0 3
10043: PUSH
10044: LD_VAR 0 1
10048: STR
10049: PPUSH
10050: CALL_OW 34
10054: ST_TO_ADDR
// if unit then
10055: LD_VAR 0 5
10059: IFFALSE 10076
// DeleteCharacters ( prefix & ident ) ;
10061: LD_VAR 0 3
10065: PUSH
10066: LD_VAR 0 1
10070: STR
10071: PPUSH
10072: CALL_OW 40
// end else
10076: GO 10093
// unit := NewCharacter ( ident ) ;
10078: LD_ADDR_VAR 0 5
10082: PUSH
10083: LD_VAR 0 1
10087: PPUSH
10088: CALL_OW 25
10092: ST_TO_ADDR
// result := unit ;
10093: LD_ADDR_VAR 0 4
10097: PUSH
10098: LD_VAR 0 5
10102: ST_TO_ADDR
// end ;
10103: LD_VAR 0 4
10107: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10108: LD_INT 0
10110: PPUSH
10111: PPUSH
// if exist_mode then
10112: LD_VAR 0 2
10116: IFFALSE 10141
// unit := CreateCharacter ( prefix & ident ) else
10118: LD_ADDR_VAR 0 5
10122: PUSH
10123: LD_VAR 0 3
10127: PUSH
10128: LD_VAR 0 1
10132: STR
10133: PPUSH
10134: CALL_OW 34
10138: ST_TO_ADDR
10139: GO 10156
// unit := NewCharacter ( ident ) ;
10141: LD_ADDR_VAR 0 5
10145: PUSH
10146: LD_VAR 0 1
10150: PPUSH
10151: CALL_OW 25
10155: ST_TO_ADDR
// result := unit ;
10156: LD_ADDR_VAR 0 4
10160: PUSH
10161: LD_VAR 0 5
10165: ST_TO_ADDR
// end ;
10166: LD_VAR 0 4
10170: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10171: LD_INT 0
10173: PPUSH
10174: PPUSH
// if not side or not nation then
10175: LD_VAR 0 1
10179: NOT
10180: IFTRUE 10189
10182: PUSH
10183: LD_VAR 0 2
10187: NOT
10188: OR
10189: IFFALSE 10193
// exit ;
10191: GO 10963
// case nation of nation_american :
10193: LD_VAR 0 2
10197: PUSH
10198: LD_INT 1
10200: DOUBLE
10201: EQUAL
10202: IFTRUE 10206
10204: GO 10420
10206: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10207: LD_ADDR_VAR 0 4
10211: PUSH
10212: LD_INT 35
10214: PUSH
10215: LD_INT 45
10217: PUSH
10218: LD_INT 46
10220: PUSH
10221: LD_INT 47
10223: PUSH
10224: LD_INT 82
10226: PUSH
10227: LD_INT 83
10229: PUSH
10230: LD_INT 84
10232: PUSH
10233: LD_INT 85
10235: PUSH
10236: LD_INT 86
10238: PUSH
10239: LD_INT 1
10241: PUSH
10242: LD_INT 2
10244: PUSH
10245: LD_INT 6
10247: PUSH
10248: LD_INT 15
10250: PUSH
10251: LD_INT 16
10253: PUSH
10254: LD_INT 7
10256: PUSH
10257: LD_INT 12
10259: PUSH
10260: LD_INT 13
10262: PUSH
10263: LD_INT 10
10265: PUSH
10266: LD_INT 14
10268: PUSH
10269: LD_INT 20
10271: PUSH
10272: LD_INT 21
10274: PUSH
10275: LD_INT 22
10277: PUSH
10278: LD_INT 25
10280: PUSH
10281: LD_INT 32
10283: PUSH
10284: LD_INT 27
10286: PUSH
10287: LD_INT 36
10289: PUSH
10290: LD_INT 69
10292: PUSH
10293: LD_INT 39
10295: PUSH
10296: LD_INT 34
10298: PUSH
10299: LD_INT 40
10301: PUSH
10302: LD_INT 48
10304: PUSH
10305: LD_INT 49
10307: PUSH
10308: LD_INT 50
10310: PUSH
10311: LD_INT 51
10313: PUSH
10314: LD_INT 52
10316: PUSH
10317: LD_INT 53
10319: PUSH
10320: LD_INT 54
10322: PUSH
10323: LD_INT 55
10325: PUSH
10326: LD_INT 56
10328: PUSH
10329: LD_INT 57
10331: PUSH
10332: LD_INT 58
10334: PUSH
10335: LD_INT 59
10337: PUSH
10338: LD_INT 60
10340: PUSH
10341: LD_INT 61
10343: PUSH
10344: LD_INT 62
10346: PUSH
10347: LD_INT 80
10349: PUSH
10350: LD_INT 82
10352: PUSH
10353: LD_INT 83
10355: PUSH
10356: LD_INT 84
10358: PUSH
10359: LD_INT 85
10361: PUSH
10362: LD_INT 86
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: ST_TO_ADDR
10418: GO 10885
10420: LD_INT 2
10422: DOUBLE
10423: EQUAL
10424: IFTRUE 10428
10426: GO 10654
10428: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10429: LD_ADDR_VAR 0 4
10433: PUSH
10434: LD_INT 35
10436: PUSH
10437: LD_INT 45
10439: PUSH
10440: LD_INT 46
10442: PUSH
10443: LD_INT 47
10445: PUSH
10446: LD_INT 82
10448: PUSH
10449: LD_INT 83
10451: PUSH
10452: LD_INT 84
10454: PUSH
10455: LD_INT 85
10457: PUSH
10458: LD_INT 87
10460: PUSH
10461: LD_INT 70
10463: PUSH
10464: LD_INT 1
10466: PUSH
10467: LD_INT 11
10469: PUSH
10470: LD_INT 3
10472: PUSH
10473: LD_INT 4
10475: PUSH
10476: LD_INT 5
10478: PUSH
10479: LD_INT 6
10481: PUSH
10482: LD_INT 15
10484: PUSH
10485: LD_INT 18
10487: PUSH
10488: LD_INT 7
10490: PUSH
10491: LD_INT 17
10493: PUSH
10494: LD_INT 8
10496: PUSH
10497: LD_INT 20
10499: PUSH
10500: LD_INT 21
10502: PUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 72
10508: PUSH
10509: LD_INT 26
10511: PUSH
10512: LD_INT 69
10514: PUSH
10515: LD_INT 39
10517: PUSH
10518: LD_INT 40
10520: PUSH
10521: LD_INT 41
10523: PUSH
10524: LD_INT 42
10526: PUSH
10527: LD_INT 43
10529: PUSH
10530: LD_INT 48
10532: PUSH
10533: LD_INT 49
10535: PUSH
10536: LD_INT 50
10538: PUSH
10539: LD_INT 51
10541: PUSH
10542: LD_INT 52
10544: PUSH
10545: LD_INT 53
10547: PUSH
10548: LD_INT 54
10550: PUSH
10551: LD_INT 55
10553: PUSH
10554: LD_INT 56
10556: PUSH
10557: LD_INT 60
10559: PUSH
10560: LD_INT 61
10562: PUSH
10563: LD_INT 62
10565: PUSH
10566: LD_INT 66
10568: PUSH
10569: LD_INT 67
10571: PUSH
10572: LD_INT 68
10574: PUSH
10575: LD_INT 81
10577: PUSH
10578: LD_INT 82
10580: PUSH
10581: LD_INT 83
10583: PUSH
10584: LD_INT 84
10586: PUSH
10587: LD_INT 85
10589: PUSH
10590: LD_INT 87
10592: PUSH
10593: LD_INT 88
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: ST_TO_ADDR
10652: GO 10885
10654: LD_INT 3
10656: DOUBLE
10657: EQUAL
10658: IFTRUE 10662
10660: GO 10884
10662: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10663: LD_ADDR_VAR 0 4
10667: PUSH
10668: LD_INT 46
10670: PUSH
10671: LD_INT 47
10673: PUSH
10674: LD_INT 1
10676: PUSH
10677: LD_INT 2
10679: PUSH
10680: LD_INT 82
10682: PUSH
10683: LD_INT 83
10685: PUSH
10686: LD_INT 84
10688: PUSH
10689: LD_INT 85
10691: PUSH
10692: LD_INT 86
10694: PUSH
10695: LD_INT 11
10697: PUSH
10698: LD_INT 9
10700: PUSH
10701: LD_INT 20
10703: PUSH
10704: LD_INT 19
10706: PUSH
10707: LD_INT 21
10709: PUSH
10710: LD_INT 24
10712: PUSH
10713: LD_INT 22
10715: PUSH
10716: LD_INT 25
10718: PUSH
10719: LD_INT 28
10721: PUSH
10722: LD_INT 29
10724: PUSH
10725: LD_INT 30
10727: PUSH
10728: LD_INT 31
10730: PUSH
10731: LD_INT 37
10733: PUSH
10734: LD_INT 38
10736: PUSH
10737: LD_INT 32
10739: PUSH
10740: LD_INT 27
10742: PUSH
10743: LD_INT 33
10745: PUSH
10746: LD_INT 69
10748: PUSH
10749: LD_INT 39
10751: PUSH
10752: LD_INT 34
10754: PUSH
10755: LD_INT 40
10757: PUSH
10758: LD_INT 71
10760: PUSH
10761: LD_INT 23
10763: PUSH
10764: LD_INT 44
10766: PUSH
10767: LD_INT 48
10769: PUSH
10770: LD_INT 49
10772: PUSH
10773: LD_INT 50
10775: PUSH
10776: LD_INT 51
10778: PUSH
10779: LD_INT 52
10781: PUSH
10782: LD_INT 53
10784: PUSH
10785: LD_INT 54
10787: PUSH
10788: LD_INT 55
10790: PUSH
10791: LD_INT 56
10793: PUSH
10794: LD_INT 57
10796: PUSH
10797: LD_INT 58
10799: PUSH
10800: LD_INT 59
10802: PUSH
10803: LD_INT 63
10805: PUSH
10806: LD_INT 64
10808: PUSH
10809: LD_INT 65
10811: PUSH
10812: LD_INT 82
10814: PUSH
10815: LD_INT 83
10817: PUSH
10818: LD_INT 84
10820: PUSH
10821: LD_INT 85
10823: PUSH
10824: LD_INT 86
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: ST_TO_ADDR
10882: GO 10885
10884: POP
// if state > - 1 and state < 3 then
10885: LD_VAR 0 3
10889: PUSH
10890: LD_INT 1
10892: NEG
10893: GREATER
10894: IFFALSE 10906
10896: PUSH
10897: LD_VAR 0 3
10901: PUSH
10902: LD_INT 3
10904: LESS
10905: AND
10906: IFFALSE 10963
// for i in result do
10908: LD_ADDR_VAR 0 5
10912: PUSH
10913: LD_VAR 0 4
10917: PUSH
10918: FOR_IN
10919: IFFALSE 10961
// if GetTech ( i , side ) <> state then
10921: LD_VAR 0 5
10925: PPUSH
10926: LD_VAR 0 1
10930: PPUSH
10931: CALL_OW 321
10935: PUSH
10936: LD_VAR 0 3
10940: NONEQUAL
10941: IFFALSE 10959
// result := result diff i ;
10943: LD_ADDR_VAR 0 4
10947: PUSH
10948: LD_VAR 0 4
10952: PUSH
10953: LD_VAR 0 5
10957: DIFF
10958: ST_TO_ADDR
10959: GO 10918
10961: POP
10962: POP
// end ;
10963: LD_VAR 0 4
10967: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10968: LD_INT 0
10970: PPUSH
10971: PPUSH
10972: PPUSH
// result := true ;
10973: LD_ADDR_VAR 0 3
10977: PUSH
10978: LD_INT 1
10980: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10981: LD_ADDR_VAR 0 5
10985: PUSH
10986: LD_VAR 0 2
10990: PPUSH
10991: CALL_OW 480
10995: ST_TO_ADDR
// if not tmp then
10996: LD_VAR 0 5
11000: NOT
11001: IFFALSE 11005
// exit ;
11003: GO 11054
// for i in tmp do
11005: LD_ADDR_VAR 0 4
11009: PUSH
11010: LD_VAR 0 5
11014: PUSH
11015: FOR_IN
11016: IFFALSE 11052
// if GetTech ( i , side ) <> state_researched then
11018: LD_VAR 0 4
11022: PPUSH
11023: LD_VAR 0 1
11027: PPUSH
11028: CALL_OW 321
11032: PUSH
11033: LD_INT 2
11035: NONEQUAL
11036: IFFALSE 11050
// begin result := false ;
11038: LD_ADDR_VAR 0 3
11042: PUSH
11043: LD_INT 0
11045: ST_TO_ADDR
// exit ;
11046: POP
11047: POP
11048: GO 11054
// end ;
11050: GO 11015
11052: POP
11053: POP
// end ;
11054: LD_VAR 0 3
11058: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11059: LD_INT 0
11061: PPUSH
11062: PPUSH
11063: PPUSH
11064: PPUSH
11065: PPUSH
11066: PPUSH
11067: PPUSH
11068: PPUSH
11069: PPUSH
11070: PPUSH
11071: PPUSH
11072: PPUSH
11073: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11074: LD_VAR 0 1
11078: NOT
11079: IFTRUE 11096
11081: PUSH
11082: LD_VAR 0 1
11086: PPUSH
11087: CALL_OW 257
11091: PUSH
11092: LD_INT 9
11094: NONEQUAL
11095: OR
11096: IFFALSE 11100
// exit ;
11098: GO 11679
// side := GetSide ( unit ) ;
11100: LD_ADDR_VAR 0 9
11104: PUSH
11105: LD_VAR 0 1
11109: PPUSH
11110: CALL_OW 255
11114: ST_TO_ADDR
// tech_space := tech_spacanom ;
11115: LD_ADDR_VAR 0 12
11119: PUSH
11120: LD_INT 29
11122: ST_TO_ADDR
// tech_time := tech_taurad ;
11123: LD_ADDR_VAR 0 13
11127: PUSH
11128: LD_INT 28
11130: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11131: LD_ADDR_VAR 0 11
11135: PUSH
11136: LD_VAR 0 1
11140: PPUSH
11141: CALL_OW 310
11145: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11146: LD_VAR 0 11
11150: PPUSH
11151: CALL_OW 247
11155: PUSH
11156: LD_INT 2
11158: EQUAL
11159: IFFALSE 11163
// exit ;
11161: GO 11679
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11163: LD_ADDR_VAR 0 8
11167: PUSH
11168: LD_INT 81
11170: PUSH
11171: LD_VAR 0 9
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: LD_INT 3
11182: PUSH
11183: LD_INT 21
11185: PUSH
11186: LD_INT 3
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PPUSH
11201: CALL_OW 69
11205: ST_TO_ADDR
// if not tmp then
11206: LD_VAR 0 8
11210: NOT
11211: IFFALSE 11215
// exit ;
11213: GO 11679
// if in_unit then
11215: LD_VAR 0 11
11219: IFFALSE 11243
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11221: LD_ADDR_VAR 0 10
11225: PUSH
11226: LD_VAR 0 8
11230: PPUSH
11231: LD_VAR 0 11
11235: PPUSH
11236: CALL_OW 74
11240: ST_TO_ADDR
11241: GO 11263
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11243: LD_ADDR_VAR 0 10
11247: PUSH
11248: LD_VAR 0 8
11252: PPUSH
11253: LD_VAR 0 1
11257: PPUSH
11258: CALL_OW 74
11262: ST_TO_ADDR
// if not enemy then
11263: LD_VAR 0 10
11267: NOT
11268: IFFALSE 11272
// exit ;
11270: GO 11679
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11272: LD_VAR 0 11
11276: IFFALSE 11298
11278: PUSH
11279: LD_VAR 0 11
11283: PPUSH
11284: LD_VAR 0 10
11288: PPUSH
11289: CALL_OW 296
11293: PUSH
11294: LD_INT 13
11296: GREATER
11297: AND
11298: IFTRUE 11320
11300: PUSH
11301: LD_VAR 0 1
11305: PPUSH
11306: LD_VAR 0 10
11310: PPUSH
11311: CALL_OW 296
11315: PUSH
11316: LD_INT 12
11318: GREATER
11319: OR
11320: IFFALSE 11324
// exit ;
11322: GO 11679
// missile := [ 1 ] ;
11324: LD_ADDR_VAR 0 14
11328: PUSH
11329: LD_INT 1
11331: PUSH
11332: EMPTY
11333: LIST
11334: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11335: LD_VAR 0 9
11339: PPUSH
11340: LD_VAR 0 12
11344: PPUSH
11345: CALL_OW 325
11349: IFFALSE 11378
// missile := Replace ( missile , missile + 1 , 2 ) ;
11351: LD_ADDR_VAR 0 14
11355: PUSH
11356: LD_VAR 0 14
11360: PPUSH
11361: LD_VAR 0 14
11365: PUSH
11366: LD_INT 1
11368: PLUS
11369: PPUSH
11370: LD_INT 2
11372: PPUSH
11373: CALL_OW 1
11377: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11378: LD_VAR 0 9
11382: PPUSH
11383: LD_VAR 0 13
11387: PPUSH
11388: CALL_OW 325
11392: IFFALSE 11416
11394: PUSH
11395: LD_VAR 0 10
11399: PPUSH
11400: CALL_OW 255
11404: PPUSH
11405: LD_VAR 0 13
11409: PPUSH
11410: CALL_OW 325
11414: NOT
11415: AND
11416: IFFALSE 11445
// missile := Replace ( missile , missile + 1 , 3 ) ;
11418: LD_ADDR_VAR 0 14
11422: PUSH
11423: LD_VAR 0 14
11427: PPUSH
11428: LD_VAR 0 14
11432: PUSH
11433: LD_INT 1
11435: PLUS
11436: PPUSH
11437: LD_INT 3
11439: PPUSH
11440: CALL_OW 1
11444: ST_TO_ADDR
// if missile < 2 then
11445: LD_VAR 0 14
11449: PUSH
11450: LD_INT 2
11452: LESS
11453: IFFALSE 11457
// exit ;
11455: GO 11679
// x := GetX ( enemy ) ;
11457: LD_ADDR_VAR 0 4
11461: PUSH
11462: LD_VAR 0 10
11466: PPUSH
11467: CALL_OW 250
11471: ST_TO_ADDR
// y := GetY ( enemy ) ;
11472: LD_ADDR_VAR 0 5
11476: PUSH
11477: LD_VAR 0 10
11481: PPUSH
11482: CALL_OW 251
11486: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11487: LD_ADDR_VAR 0 6
11491: PUSH
11492: LD_VAR 0 4
11496: PUSH
11497: LD_INT 1
11499: NEG
11500: PPUSH
11501: LD_INT 1
11503: PPUSH
11504: CALL_OW 12
11508: PLUS
11509: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11510: LD_ADDR_VAR 0 7
11514: PUSH
11515: LD_VAR 0 5
11519: PUSH
11520: LD_INT 1
11522: NEG
11523: PPUSH
11524: LD_INT 1
11526: PPUSH
11527: CALL_OW 12
11531: PLUS
11532: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11533: LD_VAR 0 6
11537: PPUSH
11538: LD_VAR 0 7
11542: PPUSH
11543: CALL_OW 488
11547: NOT
11548: IFFALSE 11570
// begin _x := x ;
11550: LD_ADDR_VAR 0 6
11554: PUSH
11555: LD_VAR 0 4
11559: ST_TO_ADDR
// _y := y ;
11560: LD_ADDR_VAR 0 7
11564: PUSH
11565: LD_VAR 0 5
11569: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11570: LD_ADDR_VAR 0 3
11574: PUSH
11575: LD_INT 1
11577: PPUSH
11578: LD_VAR 0 14
11582: PPUSH
11583: CALL_OW 12
11587: ST_TO_ADDR
// case i of 1 :
11588: LD_VAR 0 3
11592: PUSH
11593: LD_INT 1
11595: DOUBLE
11596: EQUAL
11597: IFTRUE 11601
11599: GO 11618
11601: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11602: LD_VAR 0 1
11606: PPUSH
11607: LD_VAR 0 10
11611: PPUSH
11612: CALL_OW 115
11616: GO 11679
11618: LD_INT 2
11620: DOUBLE
11621: EQUAL
11622: IFTRUE 11626
11624: GO 11648
11626: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11627: LD_VAR 0 1
11631: PPUSH
11632: LD_VAR 0 6
11636: PPUSH
11637: LD_VAR 0 7
11641: PPUSH
11642: CALL_OW 153
11646: GO 11679
11648: LD_INT 3
11650: DOUBLE
11651: EQUAL
11652: IFTRUE 11656
11654: GO 11678
11656: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11657: LD_VAR 0 1
11661: PPUSH
11662: LD_VAR 0 6
11666: PPUSH
11667: LD_VAR 0 7
11671: PPUSH
11672: CALL_OW 154
11676: GO 11679
11678: POP
// end ;
11679: LD_VAR 0 2
11683: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11684: LD_INT 0
11686: PPUSH
11687: PPUSH
11688: PPUSH
11689: PPUSH
11690: PPUSH
11691: PPUSH
// if not unit or not building then
11692: LD_VAR 0 1
11696: NOT
11697: IFTRUE 11706
11699: PUSH
11700: LD_VAR 0 2
11704: NOT
11705: OR
11706: IFFALSE 11710
// exit ;
11708: GO 11868
// x := GetX ( building ) ;
11710: LD_ADDR_VAR 0 5
11714: PUSH
11715: LD_VAR 0 2
11719: PPUSH
11720: CALL_OW 250
11724: ST_TO_ADDR
// y := GetY ( building ) ;
11725: LD_ADDR_VAR 0 6
11729: PUSH
11730: LD_VAR 0 2
11734: PPUSH
11735: CALL_OW 251
11739: ST_TO_ADDR
// for i := 0 to 5 do
11740: LD_ADDR_VAR 0 4
11744: PUSH
11745: DOUBLE
11746: LD_INT 0
11748: DEC
11749: ST_TO_ADDR
11750: LD_INT 5
11752: PUSH
11753: FOR_TO
11754: IFFALSE 11866
// begin _x := ShiftX ( x , i , 3 ) ;
11756: LD_ADDR_VAR 0 7
11760: PUSH
11761: LD_VAR 0 5
11765: PPUSH
11766: LD_VAR 0 4
11770: PPUSH
11771: LD_INT 3
11773: PPUSH
11774: CALL_OW 272
11778: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11779: LD_ADDR_VAR 0 8
11783: PUSH
11784: LD_VAR 0 6
11788: PPUSH
11789: LD_VAR 0 4
11793: PPUSH
11794: LD_INT 3
11796: PPUSH
11797: CALL_OW 273
11801: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11802: LD_VAR 0 7
11806: PPUSH
11807: LD_VAR 0 8
11811: PPUSH
11812: CALL_OW 488
11816: NOT
11817: IFFALSE 11821
// continue ;
11819: GO 11753
// if HexInfo ( _x , _y ) = 0 then
11821: LD_VAR 0 7
11825: PPUSH
11826: LD_VAR 0 8
11830: PPUSH
11831: CALL_OW 428
11835: PUSH
11836: LD_INT 0
11838: EQUAL
11839: IFFALSE 11864
// begin ComMoveXY ( unit , _x , _y ) ;
11841: LD_VAR 0 1
11845: PPUSH
11846: LD_VAR 0 7
11850: PPUSH
11851: LD_VAR 0 8
11855: PPUSH
11856: CALL_OW 111
// exit ;
11860: POP
11861: POP
11862: GO 11868
// end ; end ;
11864: GO 11753
11866: POP
11867: POP
// end ;
11868: LD_VAR 0 3
11872: RET
// export function ScanBase ( side , base_area ) ; begin
11873: LD_INT 0
11875: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11876: LD_ADDR_VAR 0 3
11880: PUSH
11881: LD_VAR 0 2
11885: PPUSH
11886: LD_INT 81
11888: PUSH
11889: LD_VAR 0 1
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PPUSH
11898: CALL_OW 70
11902: ST_TO_ADDR
// end ;
11903: LD_VAR 0 3
11907: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11908: LD_INT 0
11910: PPUSH
11911: PPUSH
11912: PPUSH
11913: PPUSH
// result := false ;
11914: LD_ADDR_VAR 0 2
11918: PUSH
11919: LD_INT 0
11921: ST_TO_ADDR
// side := GetSide ( unit ) ;
11922: LD_ADDR_VAR 0 3
11926: PUSH
11927: LD_VAR 0 1
11931: PPUSH
11932: CALL_OW 255
11936: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11937: LD_ADDR_VAR 0 4
11941: PUSH
11942: LD_VAR 0 1
11946: PPUSH
11947: CALL_OW 248
11951: ST_TO_ADDR
// case nat of 1 :
11952: LD_VAR 0 4
11956: PUSH
11957: LD_INT 1
11959: DOUBLE
11960: EQUAL
11961: IFTRUE 11965
11963: GO 11976
11965: POP
// tech := tech_lassight ; 2 :
11966: LD_ADDR_VAR 0 5
11970: PUSH
11971: LD_INT 12
11973: ST_TO_ADDR
11974: GO 12015
11976: LD_INT 2
11978: DOUBLE
11979: EQUAL
11980: IFTRUE 11984
11982: GO 11995
11984: POP
// tech := tech_mortar ; 3 :
11985: LD_ADDR_VAR 0 5
11989: PUSH
11990: LD_INT 41
11992: ST_TO_ADDR
11993: GO 12015
11995: LD_INT 3
11997: DOUBLE
11998: EQUAL
11999: IFTRUE 12003
12001: GO 12014
12003: POP
// tech := tech_bazooka ; end ;
12004: LD_ADDR_VAR 0 5
12008: PUSH
12009: LD_INT 44
12011: ST_TO_ADDR
12012: GO 12015
12014: POP
// if Researched ( side , tech ) then
12015: LD_VAR 0 3
12019: PPUSH
12020: LD_VAR 0 5
12024: PPUSH
12025: CALL_OW 325
12029: IFFALSE 12056
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12031: LD_ADDR_VAR 0 2
12035: PUSH
12036: LD_INT 5
12038: PUSH
12039: LD_INT 8
12041: PUSH
12042: LD_INT 9
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: LIST
12049: PUSH
12050: LD_VAR 0 4
12054: ARRAY
12055: ST_TO_ADDR
// end ;
12056: LD_VAR 0 2
12060: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12061: LD_INT 0
12063: PPUSH
12064: PPUSH
12065: PPUSH
// if not mines then
12066: LD_VAR 0 2
12070: NOT
12071: IFFALSE 12075
// exit ;
12073: GO 12219
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12075: LD_ADDR_VAR 0 5
12079: PUSH
12080: LD_INT 81
12082: PUSH
12083: LD_VAR 0 1
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 3
12094: PUSH
12095: LD_INT 21
12097: PUSH
12098: LD_INT 3
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PPUSH
12113: CALL_OW 69
12117: ST_TO_ADDR
// for i in mines do
12118: LD_ADDR_VAR 0 4
12122: PUSH
12123: LD_VAR 0 2
12127: PUSH
12128: FOR_IN
12129: IFFALSE 12217
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12131: LD_VAR 0 4
12135: PUSH
12136: LD_INT 1
12138: ARRAY
12139: PPUSH
12140: LD_VAR 0 4
12144: PUSH
12145: LD_INT 2
12147: ARRAY
12148: PPUSH
12149: CALL_OW 458
12153: NOT
12154: IFFALSE 12158
// continue ;
12156: GO 12128
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12158: LD_VAR 0 4
12162: PUSH
12163: LD_INT 1
12165: ARRAY
12166: PPUSH
12167: LD_VAR 0 4
12171: PUSH
12172: LD_INT 2
12174: ARRAY
12175: PPUSH
12176: CALL_OW 428
12180: PUSH
12181: LD_VAR 0 5
12185: IN
12186: IFFALSE 12215
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12188: LD_VAR 0 4
12192: PUSH
12193: LD_INT 1
12195: ARRAY
12196: PPUSH
12197: LD_VAR 0 4
12201: PUSH
12202: LD_INT 2
12204: ARRAY
12205: PPUSH
12206: LD_VAR 0 1
12210: PPUSH
12211: CALL_OW 456
// end ;
12215: GO 12128
12217: POP
12218: POP
// end ;
12219: LD_VAR 0 3
12223: RET
// export function Count ( array ) ; begin
12224: LD_INT 0
12226: PPUSH
// result := array + 0 ;
12227: LD_ADDR_VAR 0 2
12231: PUSH
12232: LD_VAR 0 1
12236: PUSH
12237: LD_INT 0
12239: PLUS
12240: ST_TO_ADDR
// end ;
12241: LD_VAR 0 2
12245: RET
// export function IsEmpty ( building ) ; begin
12246: LD_INT 0
12248: PPUSH
// if not building then
12249: LD_VAR 0 1
12253: NOT
12254: IFFALSE 12258
// exit ;
12256: GO 12301
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12258: LD_ADDR_VAR 0 2
12262: PUSH
12263: LD_VAR 0 1
12267: PUSH
12268: LD_INT 22
12270: PUSH
12271: LD_VAR 0 1
12275: PPUSH
12276: CALL_OW 255
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: LD_INT 58
12287: PUSH
12288: EMPTY
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 69
12299: IN
12300: ST_TO_ADDR
// end ;
12301: LD_VAR 0 2
12305: RET
// export function IsNotFull ( building ) ; var places ; begin
12306: LD_INT 0
12308: PPUSH
12309: PPUSH
// if not building then
12310: LD_VAR 0 1
12314: NOT
12315: IFFALSE 12319
// exit ;
12317: GO 12347
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12319: LD_ADDR_VAR 0 2
12323: PUSH
12324: LD_VAR 0 1
12328: PPUSH
12329: LD_INT 3
12331: PUSH
12332: LD_INT 62
12334: PUSH
12335: EMPTY
12336: LIST
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PPUSH
12342: CALL_OW 72
12346: ST_TO_ADDR
// end ;
12347: LD_VAR 0 2
12351: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12352: LD_INT 0
12354: PPUSH
12355: PPUSH
12356: PPUSH
12357: PPUSH
// tmp := [ ] ;
12358: LD_ADDR_VAR 0 3
12362: PUSH
12363: EMPTY
12364: ST_TO_ADDR
// list := [ ] ;
12365: LD_ADDR_VAR 0 5
12369: PUSH
12370: EMPTY
12371: ST_TO_ADDR
// for i = 16 to 25 do
12372: LD_ADDR_VAR 0 4
12376: PUSH
12377: DOUBLE
12378: LD_INT 16
12380: DEC
12381: ST_TO_ADDR
12382: LD_INT 25
12384: PUSH
12385: FOR_TO
12386: IFFALSE 12459
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12388: LD_ADDR_VAR 0 3
12392: PUSH
12393: LD_VAR 0 3
12397: PUSH
12398: LD_INT 22
12400: PUSH
12401: LD_VAR 0 1
12405: PPUSH
12406: CALL_OW 255
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 91
12417: PUSH
12418: LD_VAR 0 1
12422: PUSH
12423: LD_INT 6
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 30
12433: PUSH
12434: LD_VAR 0 4
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: PUSH
12448: EMPTY
12449: LIST
12450: PPUSH
12451: CALL_OW 69
12455: ADD
12456: ST_TO_ADDR
12457: GO 12385
12459: POP
12460: POP
// for i = 1 to tmp do
12461: LD_ADDR_VAR 0 4
12465: PUSH
12466: DOUBLE
12467: LD_INT 1
12469: DEC
12470: ST_TO_ADDR
12471: LD_VAR 0 3
12475: PUSH
12476: FOR_TO
12477: IFFALSE 12565
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12479: LD_ADDR_VAR 0 5
12483: PUSH
12484: LD_VAR 0 5
12488: PUSH
12489: LD_VAR 0 3
12493: PUSH
12494: LD_VAR 0 4
12498: ARRAY
12499: PPUSH
12500: CALL_OW 266
12504: PUSH
12505: LD_VAR 0 3
12509: PUSH
12510: LD_VAR 0 4
12514: ARRAY
12515: PPUSH
12516: CALL_OW 250
12520: PUSH
12521: LD_VAR 0 3
12525: PUSH
12526: LD_VAR 0 4
12530: ARRAY
12531: PPUSH
12532: CALL_OW 251
12536: PUSH
12537: LD_VAR 0 3
12541: PUSH
12542: LD_VAR 0 4
12546: ARRAY
12547: PPUSH
12548: CALL_OW 254
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: PUSH
12559: EMPTY
12560: LIST
12561: ADD
12562: ST_TO_ADDR
12563: GO 12476
12565: POP
12566: POP
// result := list ;
12567: LD_ADDR_VAR 0 2
12571: PUSH
12572: LD_VAR 0 5
12576: ST_TO_ADDR
// end ;
12577: LD_VAR 0 2
12581: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12582: LD_INT 0
12584: PPUSH
12585: PPUSH
12586: PPUSH
12587: PPUSH
12588: PPUSH
12589: PPUSH
12590: PPUSH
// if not factory then
12591: LD_VAR 0 1
12595: NOT
12596: IFFALSE 12600
// exit ;
12598: GO 13203
// if control = control_apeman then
12600: LD_VAR 0 4
12604: PUSH
12605: LD_INT 5
12607: EQUAL
12608: IFFALSE 12717
// begin tmp := UnitsInside ( factory ) ;
12610: LD_ADDR_VAR 0 8
12614: PUSH
12615: LD_VAR 0 1
12619: PPUSH
12620: CALL_OW 313
12624: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12625: LD_VAR 0 8
12629: PPUSH
12630: LD_INT 25
12632: PUSH
12633: LD_INT 12
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PPUSH
12640: CALL_OW 72
12644: NOT
12645: IFFALSE 12655
// control := control_manual ;
12647: LD_ADDR_VAR 0 4
12651: PUSH
12652: LD_INT 1
12654: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12655: LD_ADDR_VAR 0 8
12659: PUSH
12660: LD_VAR 0 1
12664: PPUSH
12665: CALL 12352 0 1
12669: ST_TO_ADDR
// if tmp then
12670: LD_VAR 0 8
12674: IFFALSE 12717
// begin for i in tmp do
12676: LD_ADDR_VAR 0 7
12680: PUSH
12681: LD_VAR 0 8
12685: PUSH
12686: FOR_IN
12687: IFFALSE 12715
// if i [ 1 ] = b_ext_radio then
12689: LD_VAR 0 7
12693: PUSH
12694: LD_INT 1
12696: ARRAY
12697: PUSH
12698: LD_INT 22
12700: EQUAL
12701: IFFALSE 12713
// begin control := control_remote ;
12703: LD_ADDR_VAR 0 4
12707: PUSH
12708: LD_INT 2
12710: ST_TO_ADDR
// break ;
12711: GO 12715
// end ;
12713: GO 12686
12715: POP
12716: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12717: LD_VAR 0 1
12721: PPUSH
12722: LD_VAR 0 2
12726: PPUSH
12727: LD_VAR 0 3
12731: PPUSH
12732: LD_VAR 0 4
12736: PPUSH
12737: LD_VAR 0 5
12741: PPUSH
12742: CALL_OW 448
12746: IFFALSE 12781
// begin result := [ chassis , engine , control , weapon ] ;
12748: LD_ADDR_VAR 0 6
12752: PUSH
12753: LD_VAR 0 2
12757: PUSH
12758: LD_VAR 0 3
12762: PUSH
12763: LD_VAR 0 4
12767: PUSH
12768: LD_VAR 0 5
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: ST_TO_ADDR
// exit ;
12779: GO 13203
// end ; _chassis := AvailableChassisList ( factory ) ;
12781: LD_ADDR_VAR 0 9
12785: PUSH
12786: LD_VAR 0 1
12790: PPUSH
12791: CALL_OW 475
12795: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12796: LD_ADDR_VAR 0 11
12800: PUSH
12801: LD_VAR 0 1
12805: PPUSH
12806: CALL_OW 476
12810: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12811: LD_ADDR_VAR 0 12
12815: PUSH
12816: LD_VAR 0 1
12820: PPUSH
12821: CALL_OW 477
12825: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12826: LD_ADDR_VAR 0 10
12830: PUSH
12831: LD_VAR 0 1
12835: PPUSH
12836: CALL_OW 478
12840: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12841: LD_VAR 0 9
12845: NOT
12846: IFTRUE 12855
12848: PUSH
12849: LD_VAR 0 11
12853: NOT
12854: OR
12855: IFTRUE 12864
12857: PUSH
12858: LD_VAR 0 12
12862: NOT
12863: OR
12864: IFTRUE 12873
12866: PUSH
12867: LD_VAR 0 10
12871: NOT
12872: OR
12873: IFFALSE 12908
// begin result := [ chassis , engine , control , weapon ] ;
12875: LD_ADDR_VAR 0 6
12879: PUSH
12880: LD_VAR 0 2
12884: PUSH
12885: LD_VAR 0 3
12889: PUSH
12890: LD_VAR 0 4
12894: PUSH
12895: LD_VAR 0 5
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: ST_TO_ADDR
// exit ;
12906: GO 13203
// end ; if not chassis in _chassis then
12908: LD_VAR 0 2
12912: PUSH
12913: LD_VAR 0 9
12917: IN
12918: NOT
12919: IFFALSE 12945
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12921: LD_ADDR_VAR 0 2
12925: PUSH
12926: LD_VAR 0 9
12930: PUSH
12931: LD_INT 1
12933: PPUSH
12934: LD_VAR 0 9
12938: PPUSH
12939: CALL_OW 12
12943: ARRAY
12944: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12945: LD_VAR 0 2
12949: PPUSH
12950: LD_VAR 0 3
12954: PPUSH
12955: CALL 13208 0 2
12959: NOT
12960: IFFALSE 13021
// repeat engine := _engine [ 1 ] ;
12962: LD_ADDR_VAR 0 3
12966: PUSH
12967: LD_VAR 0 11
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12976: LD_ADDR_VAR 0 11
12980: PUSH
12981: LD_VAR 0 11
12985: PPUSH
12986: LD_INT 1
12988: PPUSH
12989: CALL_OW 3
12993: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12994: LD_VAR 0 2
12998: PPUSH
12999: LD_VAR 0 3
13003: PPUSH
13004: CALL 13208 0 2
13008: IFTRUE 13019
13010: PUSH
13011: LD_VAR 0 11
13015: PUSH
13016: EMPTY
13017: EQUAL
13018: OR
13019: IFFALSE 12962
// if not control in _control then
13021: LD_VAR 0 4
13025: PUSH
13026: LD_VAR 0 12
13030: IN
13031: NOT
13032: IFFALSE 13058
// control := _control [ rand ( 1 , _control ) ] ;
13034: LD_ADDR_VAR 0 4
13038: PUSH
13039: LD_VAR 0 12
13043: PUSH
13044: LD_INT 1
13046: PPUSH
13047: LD_VAR 0 12
13051: PPUSH
13052: CALL_OW 12
13056: ARRAY
13057: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13058: LD_VAR 0 2
13062: PPUSH
13063: LD_VAR 0 5
13067: PPUSH
13068: CALL 13430 0 2
13072: NOT
13073: IFFALSE 13134
// repeat weapon := _weapon [ 1 ] ;
13075: LD_ADDR_VAR 0 5
13079: PUSH
13080: LD_VAR 0 10
13084: PUSH
13085: LD_INT 1
13087: ARRAY
13088: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13089: LD_ADDR_VAR 0 10
13093: PUSH
13094: LD_VAR 0 10
13098: PPUSH
13099: LD_INT 1
13101: PPUSH
13102: CALL_OW 3
13106: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13107: LD_VAR 0 2
13111: PPUSH
13112: LD_VAR 0 5
13116: PPUSH
13117: CALL 13430 0 2
13121: IFTRUE 13132
13123: PUSH
13124: LD_VAR 0 10
13128: PUSH
13129: EMPTY
13130: EQUAL
13131: OR
13132: IFFALSE 13075
// result := [ ] ;
13134: LD_ADDR_VAR 0 6
13138: PUSH
13139: EMPTY
13140: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13141: LD_VAR 0 1
13145: PPUSH
13146: LD_VAR 0 2
13150: PPUSH
13151: LD_VAR 0 3
13155: PPUSH
13156: LD_VAR 0 4
13160: PPUSH
13161: LD_VAR 0 5
13165: PPUSH
13166: CALL_OW 448
13170: IFFALSE 13203
// result := [ chassis , engine , control , weapon ] ;
13172: LD_ADDR_VAR 0 6
13176: PUSH
13177: LD_VAR 0 2
13181: PUSH
13182: LD_VAR 0 3
13186: PUSH
13187: LD_VAR 0 4
13191: PUSH
13192: LD_VAR 0 5
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: ST_TO_ADDR
// end ;
13203: LD_VAR 0 6
13207: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13208: LD_INT 0
13210: PPUSH
// if not chassis or not engine then
13211: LD_VAR 0 1
13215: NOT
13216: IFTRUE 13225
13218: PUSH
13219: LD_VAR 0 2
13223: NOT
13224: OR
13225: IFFALSE 13229
// exit ;
13227: GO 13425
// case engine of engine_solar :
13229: LD_VAR 0 2
13233: PUSH
13234: LD_INT 2
13236: DOUBLE
13237: EQUAL
13238: IFTRUE 13242
13240: GO 13280
13242: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13243: LD_ADDR_VAR 0 3
13247: PUSH
13248: LD_INT 11
13250: PUSH
13251: LD_INT 12
13253: PUSH
13254: LD_INT 13
13256: PUSH
13257: LD_INT 14
13259: PUSH
13260: LD_INT 1
13262: PUSH
13263: LD_INT 2
13265: PUSH
13266: LD_INT 3
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: ST_TO_ADDR
13278: GO 13409
13280: LD_INT 1
13282: DOUBLE
13283: EQUAL
13284: IFTRUE 13288
13286: GO 13350
13288: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13289: LD_ADDR_VAR 0 3
13293: PUSH
13294: LD_INT 11
13296: PUSH
13297: LD_INT 12
13299: PUSH
13300: LD_INT 13
13302: PUSH
13303: LD_INT 14
13305: PUSH
13306: LD_INT 1
13308: PUSH
13309: LD_INT 2
13311: PUSH
13312: LD_INT 3
13314: PUSH
13315: LD_INT 4
13317: PUSH
13318: LD_INT 5
13320: PUSH
13321: LD_INT 21
13323: PUSH
13324: LD_INT 23
13326: PUSH
13327: LD_INT 22
13329: PUSH
13330: LD_INT 24
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: ST_TO_ADDR
13348: GO 13409
13350: LD_INT 3
13352: DOUBLE
13353: EQUAL
13354: IFTRUE 13358
13356: GO 13408
13358: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13359: LD_ADDR_VAR 0 3
13363: PUSH
13364: LD_INT 13
13366: PUSH
13367: LD_INT 14
13369: PUSH
13370: LD_INT 2
13372: PUSH
13373: LD_INT 3
13375: PUSH
13376: LD_INT 4
13378: PUSH
13379: LD_INT 5
13381: PUSH
13382: LD_INT 21
13384: PUSH
13385: LD_INT 22
13387: PUSH
13388: LD_INT 23
13390: PUSH
13391: LD_INT 24
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: ST_TO_ADDR
13406: GO 13409
13408: POP
// result := ( chassis in result ) ;
13409: LD_ADDR_VAR 0 3
13413: PUSH
13414: LD_VAR 0 1
13418: PUSH
13419: LD_VAR 0 3
13423: IN
13424: ST_TO_ADDR
// end ;
13425: LD_VAR 0 3
13429: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13430: LD_INT 0
13432: PPUSH
// if not chassis or not weapon then
13433: LD_VAR 0 1
13437: NOT
13438: IFTRUE 13447
13440: PUSH
13441: LD_VAR 0 2
13445: NOT
13446: OR
13447: IFFALSE 13451
// exit ;
13449: GO 14511
// case weapon of us_machine_gun :
13451: LD_VAR 0 2
13455: PUSH
13456: LD_INT 2
13458: DOUBLE
13459: EQUAL
13460: IFTRUE 13464
13462: GO 13494
13464: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13465: LD_ADDR_VAR 0 3
13469: PUSH
13470: LD_INT 1
13472: PUSH
13473: LD_INT 2
13475: PUSH
13476: LD_INT 3
13478: PUSH
13479: LD_INT 4
13481: PUSH
13482: LD_INT 5
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: ST_TO_ADDR
13492: GO 14495
13494: LD_INT 3
13496: DOUBLE
13497: EQUAL
13498: IFTRUE 13502
13500: GO 13532
13502: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13503: LD_ADDR_VAR 0 3
13507: PUSH
13508: LD_INT 1
13510: PUSH
13511: LD_INT 2
13513: PUSH
13514: LD_INT 3
13516: PUSH
13517: LD_INT 4
13519: PUSH
13520: LD_INT 5
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: ST_TO_ADDR
13530: GO 14495
13532: LD_INT 11
13534: DOUBLE
13535: EQUAL
13536: IFTRUE 13540
13538: GO 13570
13540: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13541: LD_ADDR_VAR 0 3
13545: PUSH
13546: LD_INT 1
13548: PUSH
13549: LD_INT 2
13551: PUSH
13552: LD_INT 3
13554: PUSH
13555: LD_INT 4
13557: PUSH
13558: LD_INT 5
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: ST_TO_ADDR
13568: GO 14495
13570: LD_INT 4
13572: DOUBLE
13573: EQUAL
13574: IFTRUE 13578
13576: GO 13604
13578: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13579: LD_ADDR_VAR 0 3
13583: PUSH
13584: LD_INT 2
13586: PUSH
13587: LD_INT 3
13589: PUSH
13590: LD_INT 4
13592: PUSH
13593: LD_INT 5
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: ST_TO_ADDR
13602: GO 14495
13604: LD_INT 5
13606: DOUBLE
13607: EQUAL
13608: IFTRUE 13612
13610: GO 13638
13612: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13613: LD_ADDR_VAR 0 3
13617: PUSH
13618: LD_INT 2
13620: PUSH
13621: LD_INT 3
13623: PUSH
13624: LD_INT 4
13626: PUSH
13627: LD_INT 5
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: ST_TO_ADDR
13636: GO 14495
13638: LD_INT 9
13640: DOUBLE
13641: EQUAL
13642: IFTRUE 13646
13644: GO 13672
13646: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13647: LD_ADDR_VAR 0 3
13651: PUSH
13652: LD_INT 2
13654: PUSH
13655: LD_INT 3
13657: PUSH
13658: LD_INT 4
13660: PUSH
13661: LD_INT 5
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: ST_TO_ADDR
13670: GO 14495
13672: LD_INT 7
13674: DOUBLE
13675: EQUAL
13676: IFTRUE 13680
13678: GO 13706
13680: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13681: LD_ADDR_VAR 0 3
13685: PUSH
13686: LD_INT 2
13688: PUSH
13689: LD_INT 3
13691: PUSH
13692: LD_INT 4
13694: PUSH
13695: LD_INT 5
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: ST_TO_ADDR
13704: GO 14495
13706: LD_INT 12
13708: DOUBLE
13709: EQUAL
13710: IFTRUE 13714
13712: GO 13740
13714: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13715: LD_ADDR_VAR 0 3
13719: PUSH
13720: LD_INT 2
13722: PUSH
13723: LD_INT 3
13725: PUSH
13726: LD_INT 4
13728: PUSH
13729: LD_INT 5
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: ST_TO_ADDR
13738: GO 14495
13740: LD_INT 13
13742: DOUBLE
13743: EQUAL
13744: IFTRUE 13748
13746: GO 13774
13748: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13749: LD_ADDR_VAR 0 3
13753: PUSH
13754: LD_INT 2
13756: PUSH
13757: LD_INT 3
13759: PUSH
13760: LD_INT 4
13762: PUSH
13763: LD_INT 5
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: ST_TO_ADDR
13772: GO 14495
13774: LD_INT 14
13776: DOUBLE
13777: EQUAL
13778: IFTRUE 13782
13780: GO 13800
13782: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13783: LD_ADDR_VAR 0 3
13787: PUSH
13788: LD_INT 4
13790: PUSH
13791: LD_INT 5
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: ST_TO_ADDR
13798: GO 14495
13800: LD_INT 6
13802: DOUBLE
13803: EQUAL
13804: IFTRUE 13808
13806: GO 13826
13808: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13809: LD_ADDR_VAR 0 3
13813: PUSH
13814: LD_INT 4
13816: PUSH
13817: LD_INT 5
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: ST_TO_ADDR
13824: GO 14495
13826: LD_INT 10
13828: DOUBLE
13829: EQUAL
13830: IFTRUE 13834
13832: GO 13852
13834: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13835: LD_ADDR_VAR 0 3
13839: PUSH
13840: LD_INT 4
13842: PUSH
13843: LD_INT 5
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: ST_TO_ADDR
13850: GO 14495
13852: LD_INT 22
13854: DOUBLE
13855: EQUAL
13856: IFTRUE 13860
13858: GO 13886
13860: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13861: LD_ADDR_VAR 0 3
13865: PUSH
13866: LD_INT 11
13868: PUSH
13869: LD_INT 12
13871: PUSH
13872: LD_INT 13
13874: PUSH
13875: LD_INT 14
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: ST_TO_ADDR
13884: GO 14495
13886: LD_INT 23
13888: DOUBLE
13889: EQUAL
13890: IFTRUE 13894
13892: GO 13920
13894: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13895: LD_ADDR_VAR 0 3
13899: PUSH
13900: LD_INT 11
13902: PUSH
13903: LD_INT 12
13905: PUSH
13906: LD_INT 13
13908: PUSH
13909: LD_INT 14
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: ST_TO_ADDR
13918: GO 14495
13920: LD_INT 24
13922: DOUBLE
13923: EQUAL
13924: IFTRUE 13928
13926: GO 13954
13928: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13929: LD_ADDR_VAR 0 3
13933: PUSH
13934: LD_INT 11
13936: PUSH
13937: LD_INT 12
13939: PUSH
13940: LD_INT 13
13942: PUSH
13943: LD_INT 14
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: ST_TO_ADDR
13952: GO 14495
13954: LD_INT 30
13956: DOUBLE
13957: EQUAL
13958: IFTRUE 13962
13960: GO 13988
13962: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13963: LD_ADDR_VAR 0 3
13967: PUSH
13968: LD_INT 11
13970: PUSH
13971: LD_INT 12
13973: PUSH
13974: LD_INT 13
13976: PUSH
13977: LD_INT 14
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: ST_TO_ADDR
13986: GO 14495
13988: LD_INT 25
13990: DOUBLE
13991: EQUAL
13992: IFTRUE 13996
13994: GO 14014
13996: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13997: LD_ADDR_VAR 0 3
14001: PUSH
14002: LD_INT 13
14004: PUSH
14005: LD_INT 14
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: ST_TO_ADDR
14012: GO 14495
14014: LD_INT 27
14016: DOUBLE
14017: EQUAL
14018: IFTRUE 14022
14020: GO 14040
14022: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14023: LD_ADDR_VAR 0 3
14027: PUSH
14028: LD_INT 13
14030: PUSH
14031: LD_INT 14
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: ST_TO_ADDR
14038: GO 14495
14040: LD_INT 92
14042: DOUBLE
14043: EQUAL
14044: IFTRUE 14048
14046: GO 14074
14048: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14049: LD_ADDR_VAR 0 3
14053: PUSH
14054: LD_INT 11
14056: PUSH
14057: LD_INT 12
14059: PUSH
14060: LD_INT 13
14062: PUSH
14063: LD_INT 14
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: ST_TO_ADDR
14072: GO 14495
14074: LD_INT 28
14076: DOUBLE
14077: EQUAL
14078: IFTRUE 14082
14080: GO 14100
14082: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14083: LD_ADDR_VAR 0 3
14087: PUSH
14088: LD_INT 13
14090: PUSH
14091: LD_INT 14
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: ST_TO_ADDR
14098: GO 14495
14100: LD_INT 29
14102: DOUBLE
14103: EQUAL
14104: IFTRUE 14108
14106: GO 14126
14108: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14109: LD_ADDR_VAR 0 3
14113: PUSH
14114: LD_INT 13
14116: PUSH
14117: LD_INT 14
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: ST_TO_ADDR
14124: GO 14495
14126: LD_INT 31
14128: DOUBLE
14129: EQUAL
14130: IFTRUE 14134
14132: GO 14152
14134: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14135: LD_ADDR_VAR 0 3
14139: PUSH
14140: LD_INT 13
14142: PUSH
14143: LD_INT 14
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: ST_TO_ADDR
14150: GO 14495
14152: LD_INT 26
14154: DOUBLE
14155: EQUAL
14156: IFTRUE 14160
14158: GO 14178
14160: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14161: LD_ADDR_VAR 0 3
14165: PUSH
14166: LD_INT 13
14168: PUSH
14169: LD_INT 14
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: ST_TO_ADDR
14176: GO 14495
14178: LD_INT 42
14180: DOUBLE
14181: EQUAL
14182: IFTRUE 14186
14184: GO 14212
14186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14187: LD_ADDR_VAR 0 3
14191: PUSH
14192: LD_INT 21
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_INT 23
14200: PUSH
14201: LD_INT 24
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: ST_TO_ADDR
14210: GO 14495
14212: LD_INT 43
14214: DOUBLE
14215: EQUAL
14216: IFTRUE 14220
14218: GO 14246
14220: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14221: LD_ADDR_VAR 0 3
14225: PUSH
14226: LD_INT 21
14228: PUSH
14229: LD_INT 22
14231: PUSH
14232: LD_INT 23
14234: PUSH
14235: LD_INT 24
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: ST_TO_ADDR
14244: GO 14495
14246: LD_INT 44
14248: DOUBLE
14249: EQUAL
14250: IFTRUE 14254
14252: GO 14280
14254: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14255: LD_ADDR_VAR 0 3
14259: PUSH
14260: LD_INT 21
14262: PUSH
14263: LD_INT 22
14265: PUSH
14266: LD_INT 23
14268: PUSH
14269: LD_INT 24
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: ST_TO_ADDR
14278: GO 14495
14280: LD_INT 45
14282: DOUBLE
14283: EQUAL
14284: IFTRUE 14288
14286: GO 14314
14288: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14289: LD_ADDR_VAR 0 3
14293: PUSH
14294: LD_INT 21
14296: PUSH
14297: LD_INT 22
14299: PUSH
14300: LD_INT 23
14302: PUSH
14303: LD_INT 24
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: ST_TO_ADDR
14312: GO 14495
14314: LD_INT 49
14316: DOUBLE
14317: EQUAL
14318: IFTRUE 14322
14320: GO 14348
14322: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14323: LD_ADDR_VAR 0 3
14327: PUSH
14328: LD_INT 21
14330: PUSH
14331: LD_INT 22
14333: PUSH
14334: LD_INT 23
14336: PUSH
14337: LD_INT 24
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: ST_TO_ADDR
14346: GO 14495
14348: LD_INT 51
14350: DOUBLE
14351: EQUAL
14352: IFTRUE 14356
14354: GO 14382
14356: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14357: LD_ADDR_VAR 0 3
14361: PUSH
14362: LD_INT 21
14364: PUSH
14365: LD_INT 22
14367: PUSH
14368: LD_INT 23
14370: PUSH
14371: LD_INT 24
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: ST_TO_ADDR
14380: GO 14495
14382: LD_INT 52
14384: DOUBLE
14385: EQUAL
14386: IFTRUE 14390
14388: GO 14416
14390: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14391: LD_ADDR_VAR 0 3
14395: PUSH
14396: LD_INT 21
14398: PUSH
14399: LD_INT 22
14401: PUSH
14402: LD_INT 23
14404: PUSH
14405: LD_INT 24
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: ST_TO_ADDR
14414: GO 14495
14416: LD_INT 53
14418: DOUBLE
14419: EQUAL
14420: IFTRUE 14424
14422: GO 14442
14424: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14425: LD_ADDR_VAR 0 3
14429: PUSH
14430: LD_INT 23
14432: PUSH
14433: LD_INT 24
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: ST_TO_ADDR
14440: GO 14495
14442: LD_INT 46
14444: DOUBLE
14445: EQUAL
14446: IFTRUE 14450
14448: GO 14468
14450: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14451: LD_ADDR_VAR 0 3
14455: PUSH
14456: LD_INT 23
14458: PUSH
14459: LD_INT 24
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: ST_TO_ADDR
14466: GO 14495
14468: LD_INT 47
14470: DOUBLE
14471: EQUAL
14472: IFTRUE 14476
14474: GO 14494
14476: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14477: LD_ADDR_VAR 0 3
14481: PUSH
14482: LD_INT 23
14484: PUSH
14485: LD_INT 24
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: ST_TO_ADDR
14492: GO 14495
14494: POP
// result := ( chassis in result ) ;
14495: LD_ADDR_VAR 0 3
14499: PUSH
14500: LD_VAR 0 1
14504: PUSH
14505: LD_VAR 0 3
14509: IN
14510: ST_TO_ADDR
// end ;
14511: LD_VAR 0 3
14515: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14516: LD_INT 0
14518: PPUSH
14519: PPUSH
14520: PPUSH
14521: PPUSH
14522: PPUSH
14523: PPUSH
14524: PPUSH
// result := array ;
14525: LD_ADDR_VAR 0 5
14529: PUSH
14530: LD_VAR 0 1
14534: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14535: LD_VAR 0 1
14539: NOT
14540: IFTRUE 14549
14542: PUSH
14543: LD_VAR 0 2
14547: NOT
14548: OR
14549: IFTRUE 14558
14551: PUSH
14552: LD_VAR 0 3
14556: NOT
14557: OR
14558: IFTRUE 14572
14560: PUSH
14561: LD_VAR 0 2
14565: PUSH
14566: LD_VAR 0 1
14570: GREATER
14571: OR
14572: IFTRUE 14586
14574: PUSH
14575: LD_VAR 0 3
14579: PUSH
14580: LD_VAR 0 1
14584: GREATER
14585: OR
14586: IFFALSE 14590
// exit ;
14588: GO 14886
// if direction then
14590: LD_VAR 0 4
14594: IFFALSE 14658
// begin d := 1 ;
14596: LD_ADDR_VAR 0 9
14600: PUSH
14601: LD_INT 1
14603: ST_TO_ADDR
// if i_from > i_to then
14604: LD_VAR 0 2
14608: PUSH
14609: LD_VAR 0 3
14613: GREATER
14614: IFFALSE 14640
// length := ( array - i_from ) + i_to else
14616: LD_ADDR_VAR 0 11
14620: PUSH
14621: LD_VAR 0 1
14625: PUSH
14626: LD_VAR 0 2
14630: MINUS
14631: PUSH
14632: LD_VAR 0 3
14636: PLUS
14637: ST_TO_ADDR
14638: GO 14656
// length := i_to - i_from ;
14640: LD_ADDR_VAR 0 11
14644: PUSH
14645: LD_VAR 0 3
14649: PUSH
14650: LD_VAR 0 2
14654: MINUS
14655: ST_TO_ADDR
// end else
14656: GO 14719
// begin d := - 1 ;
14658: LD_ADDR_VAR 0 9
14662: PUSH
14663: LD_INT 1
14665: NEG
14666: ST_TO_ADDR
// if i_from > i_to then
14667: LD_VAR 0 2
14671: PUSH
14672: LD_VAR 0 3
14676: GREATER
14677: IFFALSE 14697
// length := i_from - i_to else
14679: LD_ADDR_VAR 0 11
14683: PUSH
14684: LD_VAR 0 2
14688: PUSH
14689: LD_VAR 0 3
14693: MINUS
14694: ST_TO_ADDR
14695: GO 14719
// length := ( array - i_to ) + i_from ;
14697: LD_ADDR_VAR 0 11
14701: PUSH
14702: LD_VAR 0 1
14706: PUSH
14707: LD_VAR 0 3
14711: MINUS
14712: PUSH
14713: LD_VAR 0 2
14717: PLUS
14718: ST_TO_ADDR
// end ; if not length then
14719: LD_VAR 0 11
14723: NOT
14724: IFFALSE 14728
// exit ;
14726: GO 14886
// tmp := array ;
14728: LD_ADDR_VAR 0 10
14732: PUSH
14733: LD_VAR 0 1
14737: ST_TO_ADDR
// for i = 1 to length do
14738: LD_ADDR_VAR 0 6
14742: PUSH
14743: DOUBLE
14744: LD_INT 1
14746: DEC
14747: ST_TO_ADDR
14748: LD_VAR 0 11
14752: PUSH
14753: FOR_TO
14754: IFFALSE 14874
// begin for j = 1 to array do
14756: LD_ADDR_VAR 0 7
14760: PUSH
14761: DOUBLE
14762: LD_INT 1
14764: DEC
14765: ST_TO_ADDR
14766: LD_VAR 0 1
14770: PUSH
14771: FOR_TO
14772: IFFALSE 14860
// begin k := j + d ;
14774: LD_ADDR_VAR 0 8
14778: PUSH
14779: LD_VAR 0 7
14783: PUSH
14784: LD_VAR 0 9
14788: PLUS
14789: ST_TO_ADDR
// if k > array then
14790: LD_VAR 0 8
14794: PUSH
14795: LD_VAR 0 1
14799: GREATER
14800: IFFALSE 14810
// k := 1 ;
14802: LD_ADDR_VAR 0 8
14806: PUSH
14807: LD_INT 1
14809: ST_TO_ADDR
// if not k then
14810: LD_VAR 0 8
14814: NOT
14815: IFFALSE 14827
// k := array ;
14817: LD_ADDR_VAR 0 8
14821: PUSH
14822: LD_VAR 0 1
14826: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14827: LD_ADDR_VAR 0 10
14831: PUSH
14832: LD_VAR 0 10
14836: PPUSH
14837: LD_VAR 0 8
14841: PPUSH
14842: LD_VAR 0 1
14846: PUSH
14847: LD_VAR 0 7
14851: ARRAY
14852: PPUSH
14853: CALL_OW 1
14857: ST_TO_ADDR
// end ;
14858: GO 14771
14860: POP
14861: POP
// array := tmp ;
14862: LD_ADDR_VAR 0 1
14866: PUSH
14867: LD_VAR 0 10
14871: ST_TO_ADDR
// end ;
14872: GO 14753
14874: POP
14875: POP
// result := array ;
14876: LD_ADDR_VAR 0 5
14880: PUSH
14881: LD_VAR 0 1
14885: ST_TO_ADDR
// end ;
14886: LD_VAR 0 5
14890: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14891: LD_INT 0
14893: PPUSH
14894: PPUSH
// result := 0 ;
14895: LD_ADDR_VAR 0 3
14899: PUSH
14900: LD_INT 0
14902: ST_TO_ADDR
// if not array or not value in array then
14903: LD_VAR 0 1
14907: NOT
14908: IFTRUE 14923
14910: PUSH
14911: LD_VAR 0 2
14915: PUSH
14916: LD_VAR 0 1
14920: IN
14921: NOT
14922: OR
14923: IFFALSE 14927
// exit ;
14925: GO 14981
// for i = 1 to array do
14927: LD_ADDR_VAR 0 4
14931: PUSH
14932: DOUBLE
14933: LD_INT 1
14935: DEC
14936: ST_TO_ADDR
14937: LD_VAR 0 1
14941: PUSH
14942: FOR_TO
14943: IFFALSE 14979
// if value = array [ i ] then
14945: LD_VAR 0 2
14949: PUSH
14950: LD_VAR 0 1
14954: PUSH
14955: LD_VAR 0 4
14959: ARRAY
14960: EQUAL
14961: IFFALSE 14977
// begin result := i ;
14963: LD_ADDR_VAR 0 3
14967: PUSH
14968: LD_VAR 0 4
14972: ST_TO_ADDR
// exit ;
14973: POP
14974: POP
14975: GO 14981
// end ;
14977: GO 14942
14979: POP
14980: POP
// end ;
14981: LD_VAR 0 3
14985: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14986: LD_INT 0
14988: PPUSH
// vc_chassis := chassis ;
14989: LD_ADDR_OWVAR 37
14993: PUSH
14994: LD_VAR 0 1
14998: ST_TO_ADDR
// vc_engine := engine ;
14999: LD_ADDR_OWVAR 39
15003: PUSH
15004: LD_VAR 0 2
15008: ST_TO_ADDR
// vc_control := control ;
15009: LD_ADDR_OWVAR 38
15013: PUSH
15014: LD_VAR 0 3
15018: ST_TO_ADDR
// vc_weapon := weapon ;
15019: LD_ADDR_OWVAR 40
15023: PUSH
15024: LD_VAR 0 4
15028: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15029: LD_ADDR_OWVAR 41
15033: PUSH
15034: LD_VAR 0 5
15038: ST_TO_ADDR
// end ;
15039: LD_VAR 0 6
15043: RET
// export function WantPlant ( unit ) ; var task ; begin
15044: LD_INT 0
15046: PPUSH
15047: PPUSH
// result := false ;
15048: LD_ADDR_VAR 0 2
15052: PUSH
15053: LD_INT 0
15055: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15056: LD_ADDR_VAR 0 3
15060: PUSH
15061: LD_VAR 0 1
15065: PPUSH
15066: CALL_OW 437
15070: ST_TO_ADDR
// if task then
15071: LD_VAR 0 3
15075: IFFALSE 15103
// if task [ 1 ] [ 1 ] = p then
15077: LD_VAR 0 3
15081: PUSH
15082: LD_INT 1
15084: ARRAY
15085: PUSH
15086: LD_INT 1
15088: ARRAY
15089: PUSH
15090: LD_STRING p
15092: EQUAL
15093: IFFALSE 15103
// result := true ;
15095: LD_ADDR_VAR 0 2
15099: PUSH
15100: LD_INT 1
15102: ST_TO_ADDR
// end ;
15103: LD_VAR 0 2
15107: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15108: LD_INT 0
15110: PPUSH
15111: PPUSH
15112: PPUSH
15113: PPUSH
// if pos < 1 then
15114: LD_VAR 0 2
15118: PUSH
15119: LD_INT 1
15121: LESS
15122: IFFALSE 15126
// exit ;
15124: GO 15429
// if pos = 1 then
15126: LD_VAR 0 2
15130: PUSH
15131: LD_INT 1
15133: EQUAL
15134: IFFALSE 15167
// result := Replace ( arr , pos [ 1 ] , value ) else
15136: LD_ADDR_VAR 0 4
15140: PUSH
15141: LD_VAR 0 1
15145: PPUSH
15146: LD_VAR 0 2
15150: PUSH
15151: LD_INT 1
15153: ARRAY
15154: PPUSH
15155: LD_VAR 0 3
15159: PPUSH
15160: CALL_OW 1
15164: ST_TO_ADDR
15165: GO 15429
// begin tmp := arr ;
15167: LD_ADDR_VAR 0 6
15171: PUSH
15172: LD_VAR 0 1
15176: ST_TO_ADDR
// s_arr := [ tmp ] ;
15177: LD_ADDR_VAR 0 7
15181: PUSH
15182: LD_VAR 0 6
15186: PUSH
15187: EMPTY
15188: LIST
15189: ST_TO_ADDR
// for i = 1 to pos - 1 do
15190: LD_ADDR_VAR 0 5
15194: PUSH
15195: DOUBLE
15196: LD_INT 1
15198: DEC
15199: ST_TO_ADDR
15200: LD_VAR 0 2
15204: PUSH
15205: LD_INT 1
15207: MINUS
15208: PUSH
15209: FOR_TO
15210: IFFALSE 15255
// begin tmp := tmp [ pos [ i ] ] ;
15212: LD_ADDR_VAR 0 6
15216: PUSH
15217: LD_VAR 0 6
15221: PUSH
15222: LD_VAR 0 2
15226: PUSH
15227: LD_VAR 0 5
15231: ARRAY
15232: ARRAY
15233: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15234: LD_ADDR_VAR 0 7
15238: PUSH
15239: LD_VAR 0 7
15243: PUSH
15244: LD_VAR 0 6
15248: PUSH
15249: EMPTY
15250: LIST
15251: ADD
15252: ST_TO_ADDR
// end ;
15253: GO 15209
15255: POP
15256: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15257: LD_ADDR_VAR 0 6
15261: PUSH
15262: LD_VAR 0 6
15266: PPUSH
15267: LD_VAR 0 2
15271: PUSH
15272: LD_VAR 0 2
15276: ARRAY
15277: PPUSH
15278: LD_VAR 0 3
15282: PPUSH
15283: CALL_OW 1
15287: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15288: LD_ADDR_VAR 0 7
15292: PUSH
15293: LD_VAR 0 7
15297: PPUSH
15298: LD_VAR 0 7
15302: PPUSH
15303: LD_VAR 0 6
15307: PPUSH
15308: CALL_OW 1
15312: ST_TO_ADDR
// for i = s_arr downto 2 do
15313: LD_ADDR_VAR 0 5
15317: PUSH
15318: DOUBLE
15319: LD_VAR 0 7
15323: INC
15324: ST_TO_ADDR
15325: LD_INT 2
15327: PUSH
15328: FOR_DOWNTO
15329: IFFALSE 15413
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15331: LD_ADDR_VAR 0 6
15335: PUSH
15336: LD_VAR 0 7
15340: PUSH
15341: LD_VAR 0 5
15345: PUSH
15346: LD_INT 1
15348: MINUS
15349: ARRAY
15350: PPUSH
15351: LD_VAR 0 2
15355: PUSH
15356: LD_VAR 0 5
15360: PUSH
15361: LD_INT 1
15363: MINUS
15364: ARRAY
15365: PPUSH
15366: LD_VAR 0 7
15370: PUSH
15371: LD_VAR 0 5
15375: ARRAY
15376: PPUSH
15377: CALL_OW 1
15381: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15382: LD_ADDR_VAR 0 7
15386: PUSH
15387: LD_VAR 0 7
15391: PPUSH
15392: LD_VAR 0 5
15396: PUSH
15397: LD_INT 1
15399: MINUS
15400: PPUSH
15401: LD_VAR 0 6
15405: PPUSH
15406: CALL_OW 1
15410: ST_TO_ADDR
// end ;
15411: GO 15328
15413: POP
15414: POP
// result := s_arr [ 1 ] ;
15415: LD_ADDR_VAR 0 4
15419: PUSH
15420: LD_VAR 0 7
15424: PUSH
15425: LD_INT 1
15427: ARRAY
15428: ST_TO_ADDR
// end ; end ;
15429: LD_VAR 0 4
15433: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15434: LD_INT 0
15436: PPUSH
15437: PPUSH
// if not list then
15438: LD_VAR 0 1
15442: NOT
15443: IFFALSE 15447
// exit ;
15445: GO 15538
// i := list [ pos1 ] ;
15447: LD_ADDR_VAR 0 5
15451: PUSH
15452: LD_VAR 0 1
15456: PUSH
15457: LD_VAR 0 2
15461: ARRAY
15462: ST_TO_ADDR
// if not i then
15463: LD_VAR 0 5
15467: NOT
15468: IFFALSE 15472
// exit ;
15470: GO 15538
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15472: LD_ADDR_VAR 0 1
15476: PUSH
15477: LD_VAR 0 1
15481: PPUSH
15482: LD_VAR 0 2
15486: PPUSH
15487: LD_VAR 0 1
15491: PUSH
15492: LD_VAR 0 3
15496: ARRAY
15497: PPUSH
15498: CALL_OW 1
15502: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15503: LD_ADDR_VAR 0 1
15507: PUSH
15508: LD_VAR 0 1
15512: PPUSH
15513: LD_VAR 0 3
15517: PPUSH
15518: LD_VAR 0 5
15522: PPUSH
15523: CALL_OW 1
15527: ST_TO_ADDR
// result := list ;
15528: LD_ADDR_VAR 0 4
15532: PUSH
15533: LD_VAR 0 1
15537: ST_TO_ADDR
// end ;
15538: LD_VAR 0 4
15542: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15543: LD_INT 0
15545: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15546: LD_ADDR_VAR 0 5
15550: PUSH
15551: LD_VAR 0 1
15555: PPUSH
15556: CALL_OW 250
15560: PPUSH
15561: LD_VAR 0 1
15565: PPUSH
15566: CALL_OW 251
15570: PPUSH
15571: LD_VAR 0 2
15575: PPUSH
15576: LD_VAR 0 3
15580: PPUSH
15581: LD_VAR 0 4
15585: PPUSH
15586: CALL 15968 0 5
15590: ST_TO_ADDR
// end ;
15591: LD_VAR 0 5
15595: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15596: LD_INT 0
15598: PPUSH
15599: PPUSH
15600: PPUSH
15601: PPUSH
// if not list or not unit then
15602: LD_VAR 0 2
15606: NOT
15607: IFTRUE 15616
15609: PUSH
15610: LD_VAR 0 1
15614: NOT
15615: OR
15616: IFFALSE 15620
// exit ;
15618: GO 15963
// result := [ ] ;
15620: LD_ADDR_VAR 0 5
15624: PUSH
15625: EMPTY
15626: ST_TO_ADDR
// for i in list do
15627: LD_ADDR_VAR 0 6
15631: PUSH
15632: LD_VAR 0 2
15636: PUSH
15637: FOR_IN
15638: IFFALSE 15856
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15640: LD_ADDR_VAR 0 8
15644: PUSH
15645: LD_VAR 0 1
15649: PPUSH
15650: LD_VAR 0 6
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: PPUSH
15659: LD_VAR 0 6
15663: PUSH
15664: LD_INT 2
15666: ARRAY
15667: PPUSH
15668: CALL_OW 297
15672: ST_TO_ADDR
// if not Count ( result ) then
15673: LD_VAR 0 5
15677: PPUSH
15678: CALL 12224 0 1
15682: NOT
15683: IFFALSE 15716
// begin result := Join ( result , [ i , tmp ] ) ;
15685: LD_ADDR_VAR 0 5
15689: PUSH
15690: LD_VAR 0 5
15694: PPUSH
15695: LD_VAR 0 6
15699: PUSH
15700: LD_VAR 0 8
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PPUSH
15709: CALL 48156 0 2
15713: ST_TO_ADDR
// continue ;
15714: GO 15637
// end ; if result [ result ] [ 2 ] <= tmp then
15716: LD_VAR 0 5
15720: PUSH
15721: LD_VAR 0 5
15725: ARRAY
15726: PUSH
15727: LD_INT 2
15729: ARRAY
15730: PUSH
15731: LD_VAR 0 8
15735: LESSEQUAL
15736: IFFALSE 15769
// result := Join ( result , [ i , tmp ] ) else
15738: LD_ADDR_VAR 0 5
15742: PUSH
15743: LD_VAR 0 5
15747: PPUSH
15748: LD_VAR 0 6
15752: PUSH
15753: LD_VAR 0 8
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PPUSH
15762: CALL 48156 0 2
15766: ST_TO_ADDR
15767: GO 15854
// begin for j := 1 to Count ( result ) do
15769: LD_ADDR_VAR 0 7
15773: PUSH
15774: DOUBLE
15775: LD_INT 1
15777: DEC
15778: ST_TO_ADDR
15779: LD_VAR 0 5
15783: PPUSH
15784: CALL 12224 0 1
15788: PUSH
15789: FOR_TO
15790: IFFALSE 15852
// begin if tmp < result [ j ] [ 2 ] then
15792: LD_VAR 0 8
15796: PUSH
15797: LD_VAR 0 5
15801: PUSH
15802: LD_VAR 0 7
15806: ARRAY
15807: PUSH
15808: LD_INT 2
15810: ARRAY
15811: LESS
15812: IFFALSE 15850
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15814: LD_ADDR_VAR 0 5
15818: PUSH
15819: LD_VAR 0 5
15823: PPUSH
15824: LD_VAR 0 7
15828: PPUSH
15829: LD_VAR 0 6
15833: PUSH
15834: LD_VAR 0 8
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PPUSH
15843: CALL_OW 2
15847: ST_TO_ADDR
// break ;
15848: GO 15852
// end ; end ;
15850: GO 15789
15852: POP
15853: POP
// end ; end ;
15854: GO 15637
15856: POP
15857: POP
// if result and not asc then
15858: LD_VAR 0 5
15862: IFFALSE 15871
15864: PUSH
15865: LD_VAR 0 3
15869: NOT
15870: AND
15871: IFFALSE 15888
// result := ReverseArray ( result ) ;
15873: LD_ADDR_VAR 0 5
15877: PUSH
15878: LD_VAR 0 5
15882: PPUSH
15883: CALL 43246 0 1
15887: ST_TO_ADDR
// tmp := [ ] ;
15888: LD_ADDR_VAR 0 8
15892: PUSH
15893: EMPTY
15894: ST_TO_ADDR
// if mode then
15895: LD_VAR 0 4
15899: IFFALSE 15963
// begin for i := 1 to result do
15901: LD_ADDR_VAR 0 6
15905: PUSH
15906: DOUBLE
15907: LD_INT 1
15909: DEC
15910: ST_TO_ADDR
15911: LD_VAR 0 5
15915: PUSH
15916: FOR_TO
15917: IFFALSE 15951
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15919: LD_ADDR_VAR 0 8
15923: PUSH
15924: LD_VAR 0 8
15928: PPUSH
15929: LD_VAR 0 5
15933: PUSH
15934: LD_VAR 0 6
15938: ARRAY
15939: PUSH
15940: LD_INT 1
15942: ARRAY
15943: PPUSH
15944: CALL 48156 0 2
15948: ST_TO_ADDR
15949: GO 15916
15951: POP
15952: POP
// result := tmp ;
15953: LD_ADDR_VAR 0 5
15957: PUSH
15958: LD_VAR 0 8
15962: ST_TO_ADDR
// end ; end ;
15963: LD_VAR 0 5
15967: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15968: LD_INT 0
15970: PPUSH
15971: PPUSH
15972: PPUSH
15973: PPUSH
// if not list then
15974: LD_VAR 0 3
15978: NOT
15979: IFFALSE 15983
// exit ;
15981: GO 16373
// result := [ ] ;
15983: LD_ADDR_VAR 0 6
15987: PUSH
15988: EMPTY
15989: ST_TO_ADDR
// for i in list do
15990: LD_ADDR_VAR 0 7
15994: PUSH
15995: LD_VAR 0 3
15999: PUSH
16000: FOR_IN
16001: IFFALSE 16203
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16003: LD_ADDR_VAR 0 9
16007: PUSH
16008: LD_VAR 0 7
16012: PPUSH
16013: LD_VAR 0 1
16017: PPUSH
16018: LD_VAR 0 2
16022: PPUSH
16023: CALL_OW 297
16027: ST_TO_ADDR
// if not result then
16028: LD_VAR 0 6
16032: NOT
16033: IFFALSE 16059
// result := [ [ i , tmp ] ] else
16035: LD_ADDR_VAR 0 6
16039: PUSH
16040: LD_VAR 0 7
16044: PUSH
16045: LD_VAR 0 9
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: ST_TO_ADDR
16057: GO 16201
// begin if result [ result ] [ 2 ] <= tmp then
16059: LD_VAR 0 6
16063: PUSH
16064: LD_VAR 0 6
16068: ARRAY
16069: PUSH
16070: LD_INT 2
16072: ARRAY
16073: PUSH
16074: LD_VAR 0 9
16078: LESSEQUAL
16079: IFFALSE 16121
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16081: LD_ADDR_VAR 0 6
16085: PUSH
16086: LD_VAR 0 6
16090: PPUSH
16091: LD_VAR 0 6
16095: PUSH
16096: LD_INT 1
16098: PLUS
16099: PPUSH
16100: LD_VAR 0 7
16104: PUSH
16105: LD_VAR 0 9
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PPUSH
16114: CALL_OW 2
16118: ST_TO_ADDR
16119: GO 16201
// for j := 1 to result do
16121: LD_ADDR_VAR 0 8
16125: PUSH
16126: DOUBLE
16127: LD_INT 1
16129: DEC
16130: ST_TO_ADDR
16131: LD_VAR 0 6
16135: PUSH
16136: FOR_TO
16137: IFFALSE 16199
// begin if tmp < result [ j ] [ 2 ] then
16139: LD_VAR 0 9
16143: PUSH
16144: LD_VAR 0 6
16148: PUSH
16149: LD_VAR 0 8
16153: ARRAY
16154: PUSH
16155: LD_INT 2
16157: ARRAY
16158: LESS
16159: IFFALSE 16197
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16161: LD_ADDR_VAR 0 6
16165: PUSH
16166: LD_VAR 0 6
16170: PPUSH
16171: LD_VAR 0 8
16175: PPUSH
16176: LD_VAR 0 7
16180: PUSH
16181: LD_VAR 0 9
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PPUSH
16190: CALL_OW 2
16194: ST_TO_ADDR
// break ;
16195: GO 16199
// end ; end ;
16197: GO 16136
16199: POP
16200: POP
// end ; end ;
16201: GO 16000
16203: POP
16204: POP
// if result and not asc then
16205: LD_VAR 0 6
16209: IFFALSE 16218
16211: PUSH
16212: LD_VAR 0 4
16216: NOT
16217: AND
16218: IFFALSE 16293
// begin tmp := result ;
16220: LD_ADDR_VAR 0 9
16224: PUSH
16225: LD_VAR 0 6
16229: ST_TO_ADDR
// for i = tmp downto 1 do
16230: LD_ADDR_VAR 0 7
16234: PUSH
16235: DOUBLE
16236: LD_VAR 0 9
16240: INC
16241: ST_TO_ADDR
16242: LD_INT 1
16244: PUSH
16245: FOR_DOWNTO
16246: IFFALSE 16291
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16248: LD_ADDR_VAR 0 6
16252: PUSH
16253: LD_VAR 0 6
16257: PPUSH
16258: LD_VAR 0 9
16262: PUSH
16263: LD_VAR 0 7
16267: MINUS
16268: PUSH
16269: LD_INT 1
16271: PLUS
16272: PPUSH
16273: LD_VAR 0 9
16277: PUSH
16278: LD_VAR 0 7
16282: ARRAY
16283: PPUSH
16284: CALL_OW 1
16288: ST_TO_ADDR
16289: GO 16245
16291: POP
16292: POP
// end ; tmp := [ ] ;
16293: LD_ADDR_VAR 0 9
16297: PUSH
16298: EMPTY
16299: ST_TO_ADDR
// if mode then
16300: LD_VAR 0 5
16304: IFFALSE 16373
// begin for i = 1 to result do
16306: LD_ADDR_VAR 0 7
16310: PUSH
16311: DOUBLE
16312: LD_INT 1
16314: DEC
16315: ST_TO_ADDR
16316: LD_VAR 0 6
16320: PUSH
16321: FOR_TO
16322: IFFALSE 16361
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16324: LD_ADDR_VAR 0 9
16328: PUSH
16329: LD_VAR 0 9
16333: PPUSH
16334: LD_VAR 0 7
16338: PPUSH
16339: LD_VAR 0 6
16343: PUSH
16344: LD_VAR 0 7
16348: ARRAY
16349: PUSH
16350: LD_INT 1
16352: ARRAY
16353: PPUSH
16354: CALL_OW 1
16358: ST_TO_ADDR
16359: GO 16321
16361: POP
16362: POP
// result := tmp ;
16363: LD_ADDR_VAR 0 6
16367: PUSH
16368: LD_VAR 0 9
16372: ST_TO_ADDR
// end ; end ;
16373: LD_VAR 0 6
16377: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16378: LD_INT 0
16380: PPUSH
16381: PPUSH
16382: PPUSH
16383: PPUSH
16384: PPUSH
16385: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16386: LD_ADDR_VAR 0 5
16390: PUSH
16391: LD_INT 0
16393: PUSH
16394: LD_INT 0
16396: PUSH
16397: LD_INT 0
16399: PUSH
16400: EMPTY
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: ST_TO_ADDR
// if not x or not y then
16408: LD_VAR 0 2
16412: NOT
16413: IFTRUE 16422
16415: PUSH
16416: LD_VAR 0 3
16420: NOT
16421: OR
16422: IFFALSE 16426
// exit ;
16424: GO 18082
// if not range then
16426: LD_VAR 0 4
16430: NOT
16431: IFFALSE 16441
// range := 10 ;
16433: LD_ADDR_VAR 0 4
16437: PUSH
16438: LD_INT 10
16440: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16441: LD_ADDR_VAR 0 8
16445: PUSH
16446: LD_INT 81
16448: PUSH
16449: LD_VAR 0 1
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 92
16460: PUSH
16461: LD_VAR 0 2
16465: PUSH
16466: LD_VAR 0 3
16470: PUSH
16471: LD_VAR 0 4
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 3
16484: PUSH
16485: LD_INT 21
16487: PUSH
16488: LD_INT 3
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: LIST
16503: PPUSH
16504: CALL_OW 69
16508: ST_TO_ADDR
// if not tmp then
16509: LD_VAR 0 8
16513: NOT
16514: IFFALSE 16518
// exit ;
16516: GO 18082
// for i in tmp do
16518: LD_ADDR_VAR 0 6
16522: PUSH
16523: LD_VAR 0 8
16527: PUSH
16528: FOR_IN
16529: IFFALSE 18057
// begin points := [ 0 , 0 , 0 ] ;
16531: LD_ADDR_VAR 0 9
16535: PUSH
16536: LD_INT 0
16538: PUSH
16539: LD_INT 0
16541: PUSH
16542: LD_INT 0
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: LIST
16549: ST_TO_ADDR
// bpoints := 1 ;
16550: LD_ADDR_VAR 0 10
16554: PUSH
16555: LD_INT 1
16557: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16558: LD_VAR 0 6
16562: PPUSH
16563: CALL_OW 247
16567: PUSH
16568: LD_INT 1
16570: DOUBLE
16571: EQUAL
16572: IFTRUE 16576
16574: GO 17158
16576: POP
// begin if GetClass ( i ) = 1 then
16577: LD_VAR 0 6
16581: PPUSH
16582: CALL_OW 257
16586: PUSH
16587: LD_INT 1
16589: EQUAL
16590: IFFALSE 16611
// points := [ 10 , 5 , 3 ] ;
16592: LD_ADDR_VAR 0 9
16596: PUSH
16597: LD_INT 10
16599: PUSH
16600: LD_INT 5
16602: PUSH
16603: LD_INT 3
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: LIST
16610: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16611: LD_VAR 0 6
16615: PPUSH
16616: CALL_OW 257
16620: PUSH
16621: LD_INT 2
16623: PUSH
16624: LD_INT 3
16626: PUSH
16627: LD_INT 4
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: LIST
16634: IN
16635: IFFALSE 16656
// points := [ 3 , 2 , 1 ] ;
16637: LD_ADDR_VAR 0 9
16641: PUSH
16642: LD_INT 3
16644: PUSH
16645: LD_INT 2
16647: PUSH
16648: LD_INT 1
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: LIST
16655: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16656: LD_VAR 0 6
16660: PPUSH
16661: CALL_OW 257
16665: PUSH
16666: LD_INT 5
16668: EQUAL
16669: IFFALSE 16690
// points := [ 130 , 5 , 2 ] ;
16671: LD_ADDR_VAR 0 9
16675: PUSH
16676: LD_INT 130
16678: PUSH
16679: LD_INT 5
16681: PUSH
16682: LD_INT 2
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16690: LD_VAR 0 6
16694: PPUSH
16695: CALL_OW 257
16699: PUSH
16700: LD_INT 8
16702: EQUAL
16703: IFFALSE 16724
// points := [ 35 , 35 , 30 ] ;
16705: LD_ADDR_VAR 0 9
16709: PUSH
16710: LD_INT 35
16712: PUSH
16713: LD_INT 35
16715: PUSH
16716: LD_INT 30
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: LIST
16723: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16724: LD_VAR 0 6
16728: PPUSH
16729: CALL_OW 257
16733: PUSH
16734: LD_INT 9
16736: EQUAL
16737: IFFALSE 16758
// points := [ 20 , 55 , 40 ] ;
16739: LD_ADDR_VAR 0 9
16743: PUSH
16744: LD_INT 20
16746: PUSH
16747: LD_INT 55
16749: PUSH
16750: LD_INT 40
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: LIST
16757: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16758: LD_VAR 0 6
16762: PPUSH
16763: CALL_OW 257
16767: PUSH
16768: LD_INT 12
16770: PUSH
16771: LD_INT 16
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: IN
16778: IFFALSE 16799
// points := [ 5 , 3 , 2 ] ;
16780: LD_ADDR_VAR 0 9
16784: PUSH
16785: LD_INT 5
16787: PUSH
16788: LD_INT 3
16790: PUSH
16791: LD_INT 2
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: LIST
16798: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16799: LD_VAR 0 6
16803: PPUSH
16804: CALL_OW 257
16808: PUSH
16809: LD_INT 17
16811: EQUAL
16812: IFFALSE 16833
// points := [ 100 , 50 , 75 ] ;
16814: LD_ADDR_VAR 0 9
16818: PUSH
16819: LD_INT 100
16821: PUSH
16822: LD_INT 50
16824: PUSH
16825: LD_INT 75
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: LIST
16832: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16833: LD_VAR 0 6
16837: PPUSH
16838: CALL_OW 257
16842: PUSH
16843: LD_INT 15
16845: EQUAL
16846: IFFALSE 16867
// points := [ 10 , 5 , 3 ] ;
16848: LD_ADDR_VAR 0 9
16852: PUSH
16853: LD_INT 10
16855: PUSH
16856: LD_INT 5
16858: PUSH
16859: LD_INT 3
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: LIST
16866: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16867: LD_VAR 0 6
16871: PPUSH
16872: CALL_OW 257
16876: PUSH
16877: LD_INT 14
16879: EQUAL
16880: IFFALSE 16901
// points := [ 10 , 0 , 0 ] ;
16882: LD_ADDR_VAR 0 9
16886: PUSH
16887: LD_INT 10
16889: PUSH
16890: LD_INT 0
16892: PUSH
16893: LD_INT 0
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: LIST
16900: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16901: LD_VAR 0 6
16905: PPUSH
16906: CALL_OW 257
16910: PUSH
16911: LD_INT 11
16913: EQUAL
16914: IFFALSE 16935
// points := [ 30 , 10 , 5 ] ;
16916: LD_ADDR_VAR 0 9
16920: PUSH
16921: LD_INT 30
16923: PUSH
16924: LD_INT 10
16926: PUSH
16927: LD_INT 5
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: LIST
16934: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16935: LD_VAR 0 1
16939: PPUSH
16940: LD_INT 5
16942: PPUSH
16943: CALL_OW 321
16947: PUSH
16948: LD_INT 2
16950: EQUAL
16951: IFFALSE 16968
// bpoints := bpoints * 1.8 ;
16953: LD_ADDR_VAR 0 10
16957: PUSH
16958: LD_VAR 0 10
16962: PUSH
16963: LD_REAL  1.80000000000000E+0000
16966: MUL
16967: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16968: LD_VAR 0 6
16972: PPUSH
16973: CALL_OW 257
16977: PUSH
16978: LD_INT 1
16980: PUSH
16981: LD_INT 2
16983: PUSH
16984: LD_INT 3
16986: PUSH
16987: LD_INT 4
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: IN
16996: IFFALSE 17016
16998: PUSH
16999: LD_VAR 0 1
17003: PPUSH
17004: LD_INT 51
17006: PPUSH
17007: CALL_OW 321
17011: PUSH
17012: LD_INT 2
17014: EQUAL
17015: AND
17016: IFFALSE 17033
// bpoints := bpoints * 1.2 ;
17018: LD_ADDR_VAR 0 10
17022: PUSH
17023: LD_VAR 0 10
17027: PUSH
17028: LD_REAL  1.20000000000000E+0000
17031: MUL
17032: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17033: LD_VAR 0 6
17037: PPUSH
17038: CALL_OW 257
17042: PUSH
17043: LD_INT 5
17045: PUSH
17046: LD_INT 7
17048: PUSH
17049: LD_INT 9
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: LIST
17056: IN
17057: IFFALSE 17077
17059: PUSH
17060: LD_VAR 0 1
17064: PPUSH
17065: LD_INT 52
17067: PPUSH
17068: CALL_OW 321
17072: PUSH
17073: LD_INT 2
17075: EQUAL
17076: AND
17077: IFFALSE 17094
// bpoints := bpoints * 1.5 ;
17079: LD_ADDR_VAR 0 10
17083: PUSH
17084: LD_VAR 0 10
17088: PUSH
17089: LD_REAL  1.50000000000000E+0000
17092: MUL
17093: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17094: LD_VAR 0 1
17098: PPUSH
17099: LD_INT 66
17101: PPUSH
17102: CALL_OW 321
17106: PUSH
17107: LD_INT 2
17109: EQUAL
17110: IFFALSE 17127
// bpoints := bpoints * 1.1 ;
17112: LD_ADDR_VAR 0 10
17116: PUSH
17117: LD_VAR 0 10
17121: PUSH
17122: LD_REAL  1.10000000000000E+0000
17125: MUL
17126: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17127: LD_ADDR_VAR 0 10
17131: PUSH
17132: LD_VAR 0 10
17136: PUSH
17137: LD_VAR 0 6
17141: PPUSH
17142: LD_INT 1
17144: PPUSH
17145: CALL_OW 259
17149: PUSH
17150: LD_REAL  1.15000000000000E+0000
17153: MUL
17154: MUL
17155: ST_TO_ADDR
// end ; unit_vehicle :
17156: GO 17986
17158: LD_INT 2
17160: DOUBLE
17161: EQUAL
17162: IFTRUE 17166
17164: GO 17974
17166: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17167: LD_VAR 0 6
17171: PPUSH
17172: CALL_OW 264
17176: PUSH
17177: LD_INT 2
17179: PUSH
17180: LD_INT 42
17182: PUSH
17183: LD_INT 24
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: LIST
17190: IN
17191: IFFALSE 17212
// points := [ 25 , 5 , 3 ] ;
17193: LD_ADDR_VAR 0 9
17197: PUSH
17198: LD_INT 25
17200: PUSH
17201: LD_INT 5
17203: PUSH
17204: LD_INT 3
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: LIST
17211: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17212: LD_VAR 0 6
17216: PPUSH
17217: CALL_OW 264
17221: PUSH
17222: LD_INT 4
17224: PUSH
17225: LD_INT 43
17227: PUSH
17228: LD_INT 25
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: IN
17236: IFFALSE 17257
// points := [ 40 , 15 , 5 ] ;
17238: LD_ADDR_VAR 0 9
17242: PUSH
17243: LD_INT 40
17245: PUSH
17246: LD_INT 15
17248: PUSH
17249: LD_INT 5
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: LIST
17256: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17257: LD_VAR 0 6
17261: PPUSH
17262: CALL_OW 264
17266: PUSH
17267: LD_INT 3
17269: PUSH
17270: LD_INT 23
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: IN
17277: IFFALSE 17298
// points := [ 7 , 25 , 8 ] ;
17279: LD_ADDR_VAR 0 9
17283: PUSH
17284: LD_INT 7
17286: PUSH
17287: LD_INT 25
17289: PUSH
17290: LD_INT 8
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: LIST
17297: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17298: LD_VAR 0 6
17302: PPUSH
17303: CALL_OW 264
17307: PUSH
17308: LD_INT 5
17310: PUSH
17311: LD_INT 27
17313: PUSH
17314: LD_INT 44
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: LIST
17321: IN
17322: IFFALSE 17343
// points := [ 14 , 50 , 16 ] ;
17324: LD_ADDR_VAR 0 9
17328: PUSH
17329: LD_INT 14
17331: PUSH
17332: LD_INT 50
17334: PUSH
17335: LD_INT 16
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17343: LD_VAR 0 6
17347: PPUSH
17348: CALL_OW 264
17352: PUSH
17353: LD_INT 6
17355: PUSH
17356: LD_INT 46
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: IN
17363: IFFALSE 17384
// points := [ 32 , 120 , 70 ] ;
17365: LD_ADDR_VAR 0 9
17369: PUSH
17370: LD_INT 32
17372: PUSH
17373: LD_INT 120
17375: PUSH
17376: LD_INT 70
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: LIST
17383: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17384: LD_VAR 0 6
17388: PPUSH
17389: CALL_OW 264
17393: PUSH
17394: LD_INT 7
17396: PUSH
17397: LD_INT 28
17399: PUSH
17400: LD_INT 45
17402: PUSH
17403: LD_INT 92
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: IN
17412: IFFALSE 17433
// points := [ 35 , 20 , 45 ] ;
17414: LD_ADDR_VAR 0 9
17418: PUSH
17419: LD_INT 35
17421: PUSH
17422: LD_INT 20
17424: PUSH
17425: LD_INT 45
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: LIST
17432: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17433: LD_VAR 0 6
17437: PPUSH
17438: CALL_OW 264
17442: PUSH
17443: LD_INT 47
17445: PUSH
17446: EMPTY
17447: LIST
17448: IN
17449: IFFALSE 17470
// points := [ 67 , 45 , 75 ] ;
17451: LD_ADDR_VAR 0 9
17455: PUSH
17456: LD_INT 67
17458: PUSH
17459: LD_INT 45
17461: PUSH
17462: LD_INT 75
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17470: LD_VAR 0 6
17474: PPUSH
17475: CALL_OW 264
17479: PUSH
17480: LD_INT 26
17482: PUSH
17483: EMPTY
17484: LIST
17485: IN
17486: IFFALSE 17507
// points := [ 120 , 30 , 80 ] ;
17488: LD_ADDR_VAR 0 9
17492: PUSH
17493: LD_INT 120
17495: PUSH
17496: LD_INT 30
17498: PUSH
17499: LD_INT 80
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: LIST
17506: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17507: LD_VAR 0 6
17511: PPUSH
17512: CALL_OW 264
17516: PUSH
17517: LD_INT 22
17519: PUSH
17520: EMPTY
17521: LIST
17522: IN
17523: IFFALSE 17544
// points := [ 40 , 1 , 1 ] ;
17525: LD_ADDR_VAR 0 9
17529: PUSH
17530: LD_INT 40
17532: PUSH
17533: LD_INT 1
17535: PUSH
17536: LD_INT 1
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: LIST
17543: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17544: LD_VAR 0 6
17548: PPUSH
17549: CALL_OW 264
17553: PUSH
17554: LD_INT 29
17556: PUSH
17557: EMPTY
17558: LIST
17559: IN
17560: IFFALSE 17581
// points := [ 70 , 200 , 400 ] ;
17562: LD_ADDR_VAR 0 9
17566: PUSH
17567: LD_INT 70
17569: PUSH
17570: LD_INT 200
17572: PUSH
17573: LD_INT 400
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: LIST
17580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17581: LD_VAR 0 6
17585: PPUSH
17586: CALL_OW 264
17590: PUSH
17591: LD_INT 14
17593: PUSH
17594: LD_INT 53
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: IN
17601: IFFALSE 17622
// points := [ 40 , 10 , 20 ] ;
17603: LD_ADDR_VAR 0 9
17607: PUSH
17608: LD_INT 40
17610: PUSH
17611: LD_INT 10
17613: PUSH
17614: LD_INT 20
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: LIST
17621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17622: LD_VAR 0 6
17626: PPUSH
17627: CALL_OW 264
17631: PUSH
17632: LD_INT 9
17634: PUSH
17635: EMPTY
17636: LIST
17637: IN
17638: IFFALSE 17659
// points := [ 5 , 70 , 20 ] ;
17640: LD_ADDR_VAR 0 9
17644: PUSH
17645: LD_INT 5
17647: PUSH
17648: LD_INT 70
17650: PUSH
17651: LD_INT 20
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: LIST
17658: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17659: LD_VAR 0 6
17663: PPUSH
17664: CALL_OW 264
17668: PUSH
17669: LD_INT 10
17671: PUSH
17672: EMPTY
17673: LIST
17674: IN
17675: IFFALSE 17696
// points := [ 35 , 110 , 70 ] ;
17677: LD_ADDR_VAR 0 9
17681: PUSH
17682: LD_INT 35
17684: PUSH
17685: LD_INT 110
17687: PUSH
17688: LD_INT 70
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: LIST
17695: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17696: LD_VAR 0 6
17700: PPUSH
17701: CALL_OW 265
17705: PUSH
17706: LD_INT 25
17708: EQUAL
17709: IFFALSE 17730
// points := [ 80 , 65 , 100 ] ;
17711: LD_ADDR_VAR 0 9
17715: PUSH
17716: LD_INT 80
17718: PUSH
17719: LD_INT 65
17721: PUSH
17722: LD_INT 100
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: LIST
17729: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17730: LD_VAR 0 6
17734: PPUSH
17735: CALL_OW 263
17739: PUSH
17740: LD_INT 1
17742: EQUAL
17743: IFFALSE 17778
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17745: LD_ADDR_VAR 0 10
17749: PUSH
17750: LD_VAR 0 10
17754: PUSH
17755: LD_VAR 0 6
17759: PPUSH
17760: CALL_OW 311
17764: PPUSH
17765: LD_INT 3
17767: PPUSH
17768: CALL_OW 259
17772: PUSH
17773: LD_INT 4
17775: MUL
17776: MUL
17777: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17778: LD_VAR 0 6
17782: PPUSH
17783: CALL_OW 263
17787: PUSH
17788: LD_INT 2
17790: EQUAL
17791: IFFALSE 17842
// begin j := IsControledBy ( i ) ;
17793: LD_ADDR_VAR 0 7
17797: PUSH
17798: LD_VAR 0 6
17802: PPUSH
17803: CALL_OW 312
17807: ST_TO_ADDR
// if j then
17808: LD_VAR 0 7
17812: IFFALSE 17842
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17814: LD_ADDR_VAR 0 10
17818: PUSH
17819: LD_VAR 0 10
17823: PUSH
17824: LD_VAR 0 7
17828: PPUSH
17829: LD_INT 3
17831: PPUSH
17832: CALL_OW 259
17836: PUSH
17837: LD_INT 3
17839: MUL
17840: MUL
17841: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17842: LD_VAR 0 6
17846: PPUSH
17847: CALL_OW 264
17851: PUSH
17852: LD_INT 5
17854: PUSH
17855: LD_INT 6
17857: PUSH
17858: LD_INT 46
17860: PUSH
17861: LD_INT 44
17863: PUSH
17864: LD_INT 47
17866: PUSH
17867: LD_INT 45
17869: PUSH
17870: LD_INT 28
17872: PUSH
17873: LD_INT 7
17875: PUSH
17876: LD_INT 27
17878: PUSH
17879: LD_INT 29
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: IN
17894: IFFALSE 17914
17896: PUSH
17897: LD_VAR 0 1
17901: PPUSH
17902: LD_INT 52
17904: PPUSH
17905: CALL_OW 321
17909: PUSH
17910: LD_INT 2
17912: EQUAL
17913: AND
17914: IFFALSE 17931
// bpoints := bpoints * 1.2 ;
17916: LD_ADDR_VAR 0 10
17920: PUSH
17921: LD_VAR 0 10
17925: PUSH
17926: LD_REAL  1.20000000000000E+0000
17929: MUL
17930: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17931: LD_VAR 0 6
17935: PPUSH
17936: CALL_OW 264
17940: PUSH
17941: LD_INT 6
17943: PUSH
17944: LD_INT 46
17946: PUSH
17947: LD_INT 47
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: LIST
17954: IN
17955: IFFALSE 17972
// bpoints := bpoints * 1.2 ;
17957: LD_ADDR_VAR 0 10
17961: PUSH
17962: LD_VAR 0 10
17966: PUSH
17967: LD_REAL  1.20000000000000E+0000
17970: MUL
17971: ST_TO_ADDR
// end ; unit_building :
17972: GO 17986
17974: LD_INT 3
17976: DOUBLE
17977: EQUAL
17978: IFTRUE 17982
17980: GO 17985
17982: POP
// ; end ;
17983: GO 17986
17985: POP
// for j = 1 to 3 do
17986: LD_ADDR_VAR 0 7
17990: PUSH
17991: DOUBLE
17992: LD_INT 1
17994: DEC
17995: ST_TO_ADDR
17996: LD_INT 3
17998: PUSH
17999: FOR_TO
18000: IFFALSE 18053
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18002: LD_ADDR_VAR 0 5
18006: PUSH
18007: LD_VAR 0 5
18011: PPUSH
18012: LD_VAR 0 7
18016: PPUSH
18017: LD_VAR 0 5
18021: PUSH
18022: LD_VAR 0 7
18026: ARRAY
18027: PUSH
18028: LD_VAR 0 9
18032: PUSH
18033: LD_VAR 0 7
18037: ARRAY
18038: PUSH
18039: LD_VAR 0 10
18043: MUL
18044: PLUS
18045: PPUSH
18046: CALL_OW 1
18050: ST_TO_ADDR
18051: GO 17999
18053: POP
18054: POP
// end ;
18055: GO 16528
18057: POP
18058: POP
// result := Replace ( result , 4 , tmp ) ;
18059: LD_ADDR_VAR 0 5
18063: PUSH
18064: LD_VAR 0 5
18068: PPUSH
18069: LD_INT 4
18071: PPUSH
18072: LD_VAR 0 8
18076: PPUSH
18077: CALL_OW 1
18081: ST_TO_ADDR
// end ;
18082: LD_VAR 0 5
18086: RET
// export function DangerAtRange ( unit , range ) ; begin
18087: LD_INT 0
18089: PPUSH
// if not unit then
18090: LD_VAR 0 1
18094: NOT
18095: IFFALSE 18099
// exit ;
18097: GO 18144
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18099: LD_ADDR_VAR 0 3
18103: PUSH
18104: LD_VAR 0 1
18108: PPUSH
18109: CALL_OW 255
18113: PPUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 250
18123: PPUSH
18124: LD_VAR 0 1
18128: PPUSH
18129: CALL_OW 251
18133: PPUSH
18134: LD_VAR 0 2
18138: PPUSH
18139: CALL 16378 0 4
18143: ST_TO_ADDR
// end ;
18144: LD_VAR 0 3
18148: RET
// export function DangerInArea ( side , area ) ; begin
18149: LD_INT 0
18151: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18152: LD_ADDR_VAR 0 3
18156: PUSH
18157: LD_VAR 0 2
18161: PPUSH
18162: LD_INT 81
18164: PUSH
18165: LD_VAR 0 1
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PPUSH
18174: CALL_OW 70
18178: ST_TO_ADDR
// end ;
18179: LD_VAR 0 3
18183: RET
// export function IsExtension ( b ) ; begin
18184: LD_INT 0
18186: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18187: LD_ADDR_VAR 0 2
18191: PUSH
18192: LD_VAR 0 1
18196: PUSH
18197: LD_INT 23
18199: PUSH
18200: LD_INT 20
18202: PUSH
18203: LD_INT 22
18205: PUSH
18206: LD_INT 17
18208: PUSH
18209: LD_INT 24
18211: PUSH
18212: LD_INT 21
18214: PUSH
18215: LD_INT 19
18217: PUSH
18218: LD_INT 16
18220: PUSH
18221: LD_INT 25
18223: PUSH
18224: LD_INT 18
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: IN
18239: ST_TO_ADDR
// end ;
18240: LD_VAR 0 2
18244: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18245: LD_INT 0
18247: PPUSH
18248: PPUSH
18249: PPUSH
// result := [ ] ;
18250: LD_ADDR_VAR 0 4
18254: PUSH
18255: EMPTY
18256: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18257: LD_ADDR_VAR 0 5
18261: PUSH
18262: LD_VAR 0 2
18266: PPUSH
18267: LD_INT 21
18269: PUSH
18270: LD_INT 3
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PPUSH
18277: CALL_OW 70
18281: ST_TO_ADDR
// if not tmp then
18282: LD_VAR 0 5
18286: NOT
18287: IFFALSE 18291
// exit ;
18289: GO 18355
// if checkLink then
18291: LD_VAR 0 3
18295: IFFALSE 18345
// begin for i in tmp do
18297: LD_ADDR_VAR 0 6
18301: PUSH
18302: LD_VAR 0 5
18306: PUSH
18307: FOR_IN
18308: IFFALSE 18343
// if GetBase ( i ) <> base then
18310: LD_VAR 0 6
18314: PPUSH
18315: CALL_OW 274
18319: PUSH
18320: LD_VAR 0 1
18324: NONEQUAL
18325: IFFALSE 18341
// ComLinkToBase ( base , i ) ;
18327: LD_VAR 0 1
18331: PPUSH
18332: LD_VAR 0 6
18336: PPUSH
18337: CALL_OW 169
18341: GO 18307
18343: POP
18344: POP
// end ; result := tmp ;
18345: LD_ADDR_VAR 0 4
18349: PUSH
18350: LD_VAR 0 5
18354: ST_TO_ADDR
// end ;
18355: LD_VAR 0 4
18359: RET
// export function ComComplete ( units , b ) ; var i ; begin
18360: LD_INT 0
18362: PPUSH
18363: PPUSH
// if not units then
18364: LD_VAR 0 1
18368: NOT
18369: IFFALSE 18373
// exit ;
18371: GO 18463
// for i in units do
18373: LD_ADDR_VAR 0 4
18377: PUSH
18378: LD_VAR 0 1
18382: PUSH
18383: FOR_IN
18384: IFFALSE 18461
// if BuildingStatus ( b ) = bs_build then
18386: LD_VAR 0 2
18390: PPUSH
18391: CALL_OW 461
18395: PUSH
18396: LD_INT 1
18398: EQUAL
18399: IFFALSE 18459
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18401: LD_VAR 0 4
18405: PPUSH
18406: LD_STRING h
18408: PUSH
18409: LD_VAR 0 2
18413: PPUSH
18414: CALL_OW 250
18418: PUSH
18419: LD_VAR 0 2
18423: PPUSH
18424: CALL_OW 251
18428: PUSH
18429: LD_VAR 0 2
18433: PUSH
18434: LD_INT 0
18436: PUSH
18437: LD_INT 0
18439: PUSH
18440: LD_INT 0
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: PUSH
18452: EMPTY
18453: LIST
18454: PPUSH
18455: CALL_OW 446
18459: GO 18383
18461: POP
18462: POP
// end ;
18463: LD_VAR 0 3
18467: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18468: LD_INT 0
18470: PPUSH
18471: PPUSH
18472: PPUSH
18473: PPUSH
18474: PPUSH
18475: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18476: LD_VAR 0 1
18480: NOT
18481: IFTRUE 18498
18483: PUSH
18484: LD_VAR 0 1
18488: PPUSH
18489: CALL_OW 263
18493: PUSH
18494: LD_INT 2
18496: NONEQUAL
18497: OR
18498: IFFALSE 18502
// exit ;
18500: GO 18818
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18502: LD_ADDR_VAR 0 6
18506: PUSH
18507: LD_INT 22
18509: PUSH
18510: LD_VAR 0 1
18514: PPUSH
18515: CALL_OW 255
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 2
18526: PUSH
18527: LD_INT 30
18529: PUSH
18530: LD_INT 36
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 34
18539: PUSH
18540: LD_INT 31
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: LIST
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PPUSH
18556: CALL_OW 69
18560: ST_TO_ADDR
// if not tmp then
18561: LD_VAR 0 6
18565: NOT
18566: IFFALSE 18570
// exit ;
18568: GO 18818
// result := [ ] ;
18570: LD_ADDR_VAR 0 2
18574: PUSH
18575: EMPTY
18576: ST_TO_ADDR
// for i in tmp do
18577: LD_ADDR_VAR 0 3
18581: PUSH
18582: LD_VAR 0 6
18586: PUSH
18587: FOR_IN
18588: IFFALSE 18659
// begin t := UnitsInside ( i ) ;
18590: LD_ADDR_VAR 0 4
18594: PUSH
18595: LD_VAR 0 3
18599: PPUSH
18600: CALL_OW 313
18604: ST_TO_ADDR
// if t then
18605: LD_VAR 0 4
18609: IFFALSE 18657
// for j in t do
18611: LD_ADDR_VAR 0 7
18615: PUSH
18616: LD_VAR 0 4
18620: PUSH
18621: FOR_IN
18622: IFFALSE 18655
// result := Replace ( result , result + 1 , j ) ;
18624: LD_ADDR_VAR 0 2
18628: PUSH
18629: LD_VAR 0 2
18633: PPUSH
18634: LD_VAR 0 2
18638: PUSH
18639: LD_INT 1
18641: PLUS
18642: PPUSH
18643: LD_VAR 0 7
18647: PPUSH
18648: CALL_OW 1
18652: ST_TO_ADDR
18653: GO 18621
18655: POP
18656: POP
// end ;
18657: GO 18587
18659: POP
18660: POP
// if not result then
18661: LD_VAR 0 2
18665: NOT
18666: IFFALSE 18670
// exit ;
18668: GO 18818
// mech := result [ 1 ] ;
18670: LD_ADDR_VAR 0 5
18674: PUSH
18675: LD_VAR 0 2
18679: PUSH
18680: LD_INT 1
18682: ARRAY
18683: ST_TO_ADDR
// if result > 1 then
18684: LD_VAR 0 2
18688: PUSH
18689: LD_INT 1
18691: GREATER
18692: IFFALSE 18804
// begin for i = 2 to result do
18694: LD_ADDR_VAR 0 3
18698: PUSH
18699: DOUBLE
18700: LD_INT 2
18702: DEC
18703: ST_TO_ADDR
18704: LD_VAR 0 2
18708: PUSH
18709: FOR_TO
18710: IFFALSE 18802
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18712: LD_ADDR_VAR 0 4
18716: PUSH
18717: LD_VAR 0 2
18721: PUSH
18722: LD_VAR 0 3
18726: ARRAY
18727: PPUSH
18728: LD_INT 3
18730: PPUSH
18731: CALL_OW 259
18735: PUSH
18736: LD_VAR 0 2
18740: PUSH
18741: LD_VAR 0 3
18745: ARRAY
18746: PPUSH
18747: CALL_OW 432
18751: MINUS
18752: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18753: LD_VAR 0 4
18757: PUSH
18758: LD_VAR 0 5
18762: PPUSH
18763: LD_INT 3
18765: PPUSH
18766: CALL_OW 259
18770: PUSH
18771: LD_VAR 0 5
18775: PPUSH
18776: CALL_OW 432
18780: MINUS
18781: GREATEREQUAL
18782: IFFALSE 18800
// mech := result [ i ] ;
18784: LD_ADDR_VAR 0 5
18788: PUSH
18789: LD_VAR 0 2
18793: PUSH
18794: LD_VAR 0 3
18798: ARRAY
18799: ST_TO_ADDR
// end ;
18800: GO 18709
18802: POP
18803: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18804: LD_VAR 0 1
18808: PPUSH
18809: LD_VAR 0 5
18813: PPUSH
18814: CALL_OW 135
// end ;
18818: LD_VAR 0 2
18822: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18823: LD_INT 0
18825: PPUSH
18826: PPUSH
18827: PPUSH
18828: PPUSH
18829: PPUSH
18830: PPUSH
18831: PPUSH
18832: PPUSH
18833: PPUSH
18834: PPUSH
18835: PPUSH
18836: PPUSH
18837: PPUSH
// result := [ ] ;
18838: LD_ADDR_VAR 0 7
18842: PUSH
18843: EMPTY
18844: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18845: LD_VAR 0 1
18849: PPUSH
18850: CALL_OW 266
18854: PUSH
18855: LD_INT 0
18857: PUSH
18858: LD_INT 1
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: IN
18865: NOT
18866: IFFALSE 18870
// exit ;
18868: GO 20510
// if name then
18870: LD_VAR 0 3
18874: IFFALSE 18890
// SetBName ( base_dep , name ) ;
18876: LD_VAR 0 1
18880: PPUSH
18881: LD_VAR 0 3
18885: PPUSH
18886: CALL_OW 500
// base := GetBase ( base_dep ) ;
18890: LD_ADDR_VAR 0 15
18894: PUSH
18895: LD_VAR 0 1
18899: PPUSH
18900: CALL_OW 274
18904: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18905: LD_ADDR_VAR 0 16
18909: PUSH
18910: LD_VAR 0 1
18914: PPUSH
18915: CALL_OW 255
18919: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18920: LD_ADDR_VAR 0 17
18924: PUSH
18925: LD_VAR 0 1
18929: PPUSH
18930: CALL_OW 248
18934: ST_TO_ADDR
// if sources then
18935: LD_VAR 0 5
18939: IFFALSE 18986
// for i = 1 to 3 do
18941: LD_ADDR_VAR 0 8
18945: PUSH
18946: DOUBLE
18947: LD_INT 1
18949: DEC
18950: ST_TO_ADDR
18951: LD_INT 3
18953: PUSH
18954: FOR_TO
18955: IFFALSE 18984
// AddResourceType ( base , i , sources [ i ] ) ;
18957: LD_VAR 0 15
18961: PPUSH
18962: LD_VAR 0 8
18966: PPUSH
18967: LD_VAR 0 5
18971: PUSH
18972: LD_VAR 0 8
18976: ARRAY
18977: PPUSH
18978: CALL_OW 276
18982: GO 18954
18984: POP
18985: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18986: LD_ADDR_VAR 0 18
18990: PUSH
18991: LD_VAR 0 15
18995: PPUSH
18996: LD_VAR 0 2
19000: PPUSH
19001: LD_INT 1
19003: PPUSH
19004: CALL 18245 0 3
19008: ST_TO_ADDR
// InitHc ;
19009: CALL_OW 19
// InitUc ;
19013: CALL_OW 18
// uc_side := side ;
19017: LD_ADDR_OWVAR 20
19021: PUSH
19022: LD_VAR 0 16
19026: ST_TO_ADDR
// uc_nation := nation ;
19027: LD_ADDR_OWVAR 21
19031: PUSH
19032: LD_VAR 0 17
19036: ST_TO_ADDR
// if buildings then
19037: LD_VAR 0 18
19041: IFFALSE 20369
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19043: LD_ADDR_VAR 0 19
19047: PUSH
19048: LD_VAR 0 18
19052: PPUSH
19053: LD_INT 2
19055: PUSH
19056: LD_INT 30
19058: PUSH
19059: LD_INT 29
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 30
19068: PUSH
19069: LD_INT 30
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: LIST
19080: PPUSH
19081: CALL_OW 72
19085: ST_TO_ADDR
// if tmp then
19086: LD_VAR 0 19
19090: IFFALSE 19138
// for i in tmp do
19092: LD_ADDR_VAR 0 8
19096: PUSH
19097: LD_VAR 0 19
19101: PUSH
19102: FOR_IN
19103: IFFALSE 19136
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19105: LD_VAR 0 8
19109: PPUSH
19110: CALL_OW 250
19114: PPUSH
19115: LD_VAR 0 8
19119: PPUSH
19120: CALL_OW 251
19124: PPUSH
19125: LD_VAR 0 16
19129: PPUSH
19130: CALL_OW 441
19134: GO 19102
19136: POP
19137: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19138: LD_VAR 0 18
19142: PPUSH
19143: LD_INT 2
19145: PUSH
19146: LD_INT 30
19148: PUSH
19149: LD_INT 32
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 30
19158: PUSH
19159: LD_INT 33
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: LIST
19170: PPUSH
19171: CALL_OW 72
19175: IFFALSE 19263
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19177: LD_ADDR_VAR 0 8
19181: PUSH
19182: LD_VAR 0 18
19186: PPUSH
19187: LD_INT 2
19189: PUSH
19190: LD_INT 30
19192: PUSH
19193: LD_INT 32
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 30
19202: PUSH
19203: LD_INT 33
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: LIST
19214: PPUSH
19215: CALL_OW 72
19219: PUSH
19220: FOR_IN
19221: IFFALSE 19261
// begin if not GetBWeapon ( i ) then
19223: LD_VAR 0 8
19227: PPUSH
19228: CALL_OW 269
19232: NOT
19233: IFFALSE 19259
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19235: LD_VAR 0 8
19239: PPUSH
19240: LD_VAR 0 8
19244: PPUSH
19245: LD_VAR 0 2
19249: PPUSH
19250: CALL 20515 0 2
19254: PPUSH
19255: CALL_OW 431
// end ;
19259: GO 19220
19261: POP
19262: POP
// end ; for i = 1 to personel do
19263: LD_ADDR_VAR 0 8
19267: PUSH
19268: DOUBLE
19269: LD_INT 1
19271: DEC
19272: ST_TO_ADDR
19273: LD_VAR 0 6
19277: PUSH
19278: FOR_TO
19279: IFFALSE 20349
// begin if i > 4 then
19281: LD_VAR 0 8
19285: PUSH
19286: LD_INT 4
19288: GREATER
19289: IFFALSE 19293
// break ;
19291: GO 20349
// case i of 1 :
19293: LD_VAR 0 8
19297: PUSH
19298: LD_INT 1
19300: DOUBLE
19301: EQUAL
19302: IFTRUE 19306
19304: GO 19386
19306: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19307: LD_ADDR_VAR 0 12
19311: PUSH
19312: LD_VAR 0 18
19316: PPUSH
19317: LD_INT 22
19319: PUSH
19320: LD_VAR 0 16
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 58
19331: PUSH
19332: EMPTY
19333: LIST
19334: PUSH
19335: LD_INT 2
19337: PUSH
19338: LD_INT 30
19340: PUSH
19341: LD_INT 32
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 30
19350: PUSH
19351: LD_INT 4
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 30
19360: PUSH
19361: LD_INT 5
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: LIST
19378: PPUSH
19379: CALL_OW 72
19383: ST_TO_ADDR
19384: GO 19608
19386: LD_INT 2
19388: DOUBLE
19389: EQUAL
19390: IFTRUE 19394
19392: GO 19456
19394: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19395: LD_ADDR_VAR 0 12
19399: PUSH
19400: LD_VAR 0 18
19404: PPUSH
19405: LD_INT 22
19407: PUSH
19408: LD_VAR 0 16
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 2
19419: PUSH
19420: LD_INT 30
19422: PUSH
19423: LD_INT 0
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 30
19432: PUSH
19433: LD_INT 1
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: LIST
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PPUSH
19449: CALL_OW 72
19453: ST_TO_ADDR
19454: GO 19608
19456: LD_INT 3
19458: DOUBLE
19459: EQUAL
19460: IFTRUE 19464
19462: GO 19526
19464: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19465: LD_ADDR_VAR 0 12
19469: PUSH
19470: LD_VAR 0 18
19474: PPUSH
19475: LD_INT 22
19477: PUSH
19478: LD_VAR 0 16
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 2
19489: PUSH
19490: LD_INT 30
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 30
19502: PUSH
19503: LD_INT 3
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: LIST
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PPUSH
19519: CALL_OW 72
19523: ST_TO_ADDR
19524: GO 19608
19526: LD_INT 4
19528: DOUBLE
19529: EQUAL
19530: IFTRUE 19534
19532: GO 19607
19534: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19535: LD_ADDR_VAR 0 12
19539: PUSH
19540: LD_VAR 0 18
19544: PPUSH
19545: LD_INT 22
19547: PUSH
19548: LD_VAR 0 16
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 2
19559: PUSH
19560: LD_INT 30
19562: PUSH
19563: LD_INT 6
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 30
19572: PUSH
19573: LD_INT 7
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 30
19582: PUSH
19583: LD_INT 8
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PPUSH
19600: CALL_OW 72
19604: ST_TO_ADDR
19605: GO 19608
19607: POP
// if i = 1 then
19608: LD_VAR 0 8
19612: PUSH
19613: LD_INT 1
19615: EQUAL
19616: IFFALSE 19727
// begin tmp := [ ] ;
19618: LD_ADDR_VAR 0 19
19622: PUSH
19623: EMPTY
19624: ST_TO_ADDR
// for j in f do
19625: LD_ADDR_VAR 0 9
19629: PUSH
19630: LD_VAR 0 12
19634: PUSH
19635: FOR_IN
19636: IFFALSE 19709
// if GetBType ( j ) = b_bunker then
19638: LD_VAR 0 9
19642: PPUSH
19643: CALL_OW 266
19647: PUSH
19648: LD_INT 32
19650: EQUAL
19651: IFFALSE 19678
// tmp := Insert ( tmp , 1 , j ) else
19653: LD_ADDR_VAR 0 19
19657: PUSH
19658: LD_VAR 0 19
19662: PPUSH
19663: LD_INT 1
19665: PPUSH
19666: LD_VAR 0 9
19670: PPUSH
19671: CALL_OW 2
19675: ST_TO_ADDR
19676: GO 19707
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19678: LD_ADDR_VAR 0 19
19682: PUSH
19683: LD_VAR 0 19
19687: PPUSH
19688: LD_VAR 0 19
19692: PUSH
19693: LD_INT 1
19695: PLUS
19696: PPUSH
19697: LD_VAR 0 9
19701: PPUSH
19702: CALL_OW 2
19706: ST_TO_ADDR
19707: GO 19635
19709: POP
19710: POP
// if tmp then
19711: LD_VAR 0 19
19715: IFFALSE 19727
// f := tmp ;
19717: LD_ADDR_VAR 0 12
19721: PUSH
19722: LD_VAR 0 19
19726: ST_TO_ADDR
// end ; x := personel [ i ] ;
19727: LD_ADDR_VAR 0 13
19731: PUSH
19732: LD_VAR 0 6
19736: PUSH
19737: LD_VAR 0 8
19741: ARRAY
19742: ST_TO_ADDR
// if x = - 1 then
19743: LD_VAR 0 13
19747: PUSH
19748: LD_INT 1
19750: NEG
19751: EQUAL
19752: IFFALSE 19963
// begin for j in f do
19754: LD_ADDR_VAR 0 9
19758: PUSH
19759: LD_VAR 0 12
19763: PUSH
19764: FOR_IN
19765: IFFALSE 19959
// repeat InitHc ;
19767: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19771: LD_VAR 0 9
19775: PPUSH
19776: CALL_OW 266
19780: PUSH
19781: LD_INT 5
19783: EQUAL
19784: IFFALSE 19854
// begin if UnitsInside ( j ) < 3 then
19786: LD_VAR 0 9
19790: PPUSH
19791: CALL_OW 313
19795: PUSH
19796: LD_INT 3
19798: LESS
19799: IFFALSE 19835
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19801: LD_INT 0
19803: PPUSH
19804: LD_INT 5
19806: PUSH
19807: LD_INT 8
19809: PUSH
19810: LD_INT 9
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: LIST
19817: PUSH
19818: LD_VAR 0 17
19822: ARRAY
19823: PPUSH
19824: LD_VAR 0 4
19828: PPUSH
19829: CALL_OW 380
19833: GO 19852
// PrepareHuman ( false , i , skill ) ;
19835: LD_INT 0
19837: PPUSH
19838: LD_VAR 0 8
19842: PPUSH
19843: LD_VAR 0 4
19847: PPUSH
19848: CALL_OW 380
// end else
19852: GO 19871
// PrepareHuman ( false , i , skill ) ;
19854: LD_INT 0
19856: PPUSH
19857: LD_VAR 0 8
19861: PPUSH
19862: LD_VAR 0 4
19866: PPUSH
19867: CALL_OW 380
// un := CreateHuman ;
19871: LD_ADDR_VAR 0 14
19875: PUSH
19876: CALL_OW 44
19880: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19881: LD_ADDR_VAR 0 7
19885: PUSH
19886: LD_VAR 0 7
19890: PPUSH
19891: LD_INT 1
19893: PPUSH
19894: LD_VAR 0 14
19898: PPUSH
19899: CALL_OW 2
19903: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19904: LD_VAR 0 14
19908: PPUSH
19909: LD_VAR 0 9
19913: PPUSH
19914: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19918: LD_VAR 0 9
19922: PPUSH
19923: CALL_OW 313
19927: PUSH
19928: LD_INT 6
19930: EQUAL
19931: IFTRUE 19955
19933: PUSH
19934: LD_VAR 0 9
19938: PPUSH
19939: CALL_OW 266
19943: PUSH
19944: LD_INT 32
19946: PUSH
19947: LD_INT 31
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: IN
19954: OR
19955: IFFALSE 19767
19957: GO 19764
19959: POP
19960: POP
// end else
19961: GO 20347
// for j = 1 to x do
19963: LD_ADDR_VAR 0 9
19967: PUSH
19968: DOUBLE
19969: LD_INT 1
19971: DEC
19972: ST_TO_ADDR
19973: LD_VAR 0 13
19977: PUSH
19978: FOR_TO
19979: IFFALSE 20345
// begin InitHc ;
19981: CALL_OW 19
// if not f then
19985: LD_VAR 0 12
19989: NOT
19990: IFFALSE 20079
// begin PrepareHuman ( false , i , skill ) ;
19992: LD_INT 0
19994: PPUSH
19995: LD_VAR 0 8
19999: PPUSH
20000: LD_VAR 0 4
20004: PPUSH
20005: CALL_OW 380
// un := CreateHuman ;
20009: LD_ADDR_VAR 0 14
20013: PUSH
20014: CALL_OW 44
20018: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20019: LD_ADDR_VAR 0 7
20023: PUSH
20024: LD_VAR 0 7
20028: PPUSH
20029: LD_INT 1
20031: PPUSH
20032: LD_VAR 0 14
20036: PPUSH
20037: CALL_OW 2
20041: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20042: LD_VAR 0 14
20046: PPUSH
20047: LD_VAR 0 1
20051: PPUSH
20052: CALL_OW 250
20056: PPUSH
20057: LD_VAR 0 1
20061: PPUSH
20062: CALL_OW 251
20066: PPUSH
20067: LD_INT 10
20069: PPUSH
20070: LD_INT 0
20072: PPUSH
20073: CALL_OW 50
// continue ;
20077: GO 19978
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20079: LD_VAR 0 12
20083: PUSH
20084: LD_INT 1
20086: ARRAY
20087: PPUSH
20088: CALL_OW 313
20092: IFFALSE 20120
20094: PUSH
20095: LD_VAR 0 12
20099: PUSH
20100: LD_INT 1
20102: ARRAY
20103: PPUSH
20104: CALL_OW 266
20108: PUSH
20109: LD_INT 32
20111: PUSH
20112: LD_INT 31
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: IN
20119: AND
20120: IFTRUE 20141
20122: PUSH
20123: LD_VAR 0 12
20127: PUSH
20128: LD_INT 1
20130: ARRAY
20131: PPUSH
20132: CALL_OW 313
20136: PUSH
20137: LD_INT 6
20139: EQUAL
20140: OR
20141: IFFALSE 20161
// f := Delete ( f , 1 ) ;
20143: LD_ADDR_VAR 0 12
20147: PUSH
20148: LD_VAR 0 12
20152: PPUSH
20153: LD_INT 1
20155: PPUSH
20156: CALL_OW 3
20160: ST_TO_ADDR
// if not f then
20161: LD_VAR 0 12
20165: NOT
20166: IFFALSE 20184
// begin x := x + 2 ;
20168: LD_ADDR_VAR 0 13
20172: PUSH
20173: LD_VAR 0 13
20177: PUSH
20178: LD_INT 2
20180: PLUS
20181: ST_TO_ADDR
// continue ;
20182: GO 19978
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20184: LD_VAR 0 12
20188: PUSH
20189: LD_INT 1
20191: ARRAY
20192: PPUSH
20193: CALL_OW 266
20197: PUSH
20198: LD_INT 5
20200: EQUAL
20201: IFFALSE 20275
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20203: LD_VAR 0 12
20207: PUSH
20208: LD_INT 1
20210: ARRAY
20211: PPUSH
20212: CALL_OW 313
20216: PUSH
20217: LD_INT 3
20219: LESS
20220: IFFALSE 20256
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20222: LD_INT 0
20224: PPUSH
20225: LD_INT 5
20227: PUSH
20228: LD_INT 8
20230: PUSH
20231: LD_INT 9
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: LIST
20238: PUSH
20239: LD_VAR 0 17
20243: ARRAY
20244: PPUSH
20245: LD_VAR 0 4
20249: PPUSH
20250: CALL_OW 380
20254: GO 20273
// PrepareHuman ( false , i , skill ) ;
20256: LD_INT 0
20258: PPUSH
20259: LD_VAR 0 8
20263: PPUSH
20264: LD_VAR 0 4
20268: PPUSH
20269: CALL_OW 380
// end else
20273: GO 20292
// PrepareHuman ( false , i , skill ) ;
20275: LD_INT 0
20277: PPUSH
20278: LD_VAR 0 8
20282: PPUSH
20283: LD_VAR 0 4
20287: PPUSH
20288: CALL_OW 380
// un := CreateHuman ;
20292: LD_ADDR_VAR 0 14
20296: PUSH
20297: CALL_OW 44
20301: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20302: LD_ADDR_VAR 0 7
20306: PUSH
20307: LD_VAR 0 7
20311: PPUSH
20312: LD_INT 1
20314: PPUSH
20315: LD_VAR 0 14
20319: PPUSH
20320: CALL_OW 2
20324: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20325: LD_VAR 0 14
20329: PPUSH
20330: LD_VAR 0 12
20334: PUSH
20335: LD_INT 1
20337: ARRAY
20338: PPUSH
20339: CALL_OW 52
// end ;
20343: GO 19978
20345: POP
20346: POP
// end ;
20347: GO 19278
20349: POP
20350: POP
// result := result ^ buildings ;
20351: LD_ADDR_VAR 0 7
20355: PUSH
20356: LD_VAR 0 7
20360: PUSH
20361: LD_VAR 0 18
20365: ADD
20366: ST_TO_ADDR
// end else
20367: GO 20510
// begin for i = 1 to personel do
20369: LD_ADDR_VAR 0 8
20373: PUSH
20374: DOUBLE
20375: LD_INT 1
20377: DEC
20378: ST_TO_ADDR
20379: LD_VAR 0 6
20383: PUSH
20384: FOR_TO
20385: IFFALSE 20508
// begin if i > 4 then
20387: LD_VAR 0 8
20391: PUSH
20392: LD_INT 4
20394: GREATER
20395: IFFALSE 20399
// break ;
20397: GO 20508
// x := personel [ i ] ;
20399: LD_ADDR_VAR 0 13
20403: PUSH
20404: LD_VAR 0 6
20408: PUSH
20409: LD_VAR 0 8
20413: ARRAY
20414: ST_TO_ADDR
// if x = - 1 then
20415: LD_VAR 0 13
20419: PUSH
20420: LD_INT 1
20422: NEG
20423: EQUAL
20424: IFFALSE 20428
// continue ;
20426: GO 20384
// PrepareHuman ( false , i , skill ) ;
20428: LD_INT 0
20430: PPUSH
20431: LD_VAR 0 8
20435: PPUSH
20436: LD_VAR 0 4
20440: PPUSH
20441: CALL_OW 380
// un := CreateHuman ;
20445: LD_ADDR_VAR 0 14
20449: PUSH
20450: CALL_OW 44
20454: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20455: LD_VAR 0 14
20459: PPUSH
20460: LD_VAR 0 1
20464: PPUSH
20465: CALL_OW 250
20469: PPUSH
20470: LD_VAR 0 1
20474: PPUSH
20475: CALL_OW 251
20479: PPUSH
20480: LD_INT 10
20482: PPUSH
20483: LD_INT 0
20485: PPUSH
20486: CALL_OW 50
// result := result ^ un ;
20490: LD_ADDR_VAR 0 7
20494: PUSH
20495: LD_VAR 0 7
20499: PUSH
20500: LD_VAR 0 14
20504: ADD
20505: ST_TO_ADDR
// end ;
20506: GO 20384
20508: POP
20509: POP
// end ; end ;
20510: LD_VAR 0 7
20514: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20515: LD_INT 0
20517: PPUSH
20518: PPUSH
20519: PPUSH
20520: PPUSH
20521: PPUSH
20522: PPUSH
20523: PPUSH
20524: PPUSH
20525: PPUSH
20526: PPUSH
20527: PPUSH
20528: PPUSH
20529: PPUSH
20530: PPUSH
20531: PPUSH
20532: PPUSH
// result := false ;
20533: LD_ADDR_VAR 0 3
20537: PUSH
20538: LD_INT 0
20540: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20541: LD_VAR 0 1
20545: NOT
20546: IFTRUE 20571
20548: PUSH
20549: LD_VAR 0 1
20553: PPUSH
20554: CALL_OW 266
20558: PUSH
20559: LD_INT 32
20561: PUSH
20562: LD_INT 33
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: IN
20569: NOT
20570: OR
20571: IFFALSE 20575
// exit ;
20573: GO 21710
// nat := GetNation ( tower ) ;
20575: LD_ADDR_VAR 0 12
20579: PUSH
20580: LD_VAR 0 1
20584: PPUSH
20585: CALL_OW 248
20589: ST_TO_ADDR
// side := GetSide ( tower ) ;
20590: LD_ADDR_VAR 0 16
20594: PUSH
20595: LD_VAR 0 1
20599: PPUSH
20600: CALL_OW 255
20604: ST_TO_ADDR
// x := GetX ( tower ) ;
20605: LD_ADDR_VAR 0 10
20609: PUSH
20610: LD_VAR 0 1
20614: PPUSH
20615: CALL_OW 250
20619: ST_TO_ADDR
// y := GetY ( tower ) ;
20620: LD_ADDR_VAR 0 11
20624: PUSH
20625: LD_VAR 0 1
20629: PPUSH
20630: CALL_OW 251
20634: ST_TO_ADDR
// if not x or not y then
20635: LD_VAR 0 10
20639: NOT
20640: IFTRUE 20649
20642: PUSH
20643: LD_VAR 0 11
20647: NOT
20648: OR
20649: IFFALSE 20653
// exit ;
20651: GO 21710
// weapon := 0 ;
20653: LD_ADDR_VAR 0 18
20657: PUSH
20658: LD_INT 0
20660: ST_TO_ADDR
// fac_list := [ ] ;
20661: LD_ADDR_VAR 0 17
20665: PUSH
20666: EMPTY
20667: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20668: LD_ADDR_VAR 0 6
20672: PUSH
20673: LD_VAR 0 1
20677: PPUSH
20678: CALL_OW 274
20682: PPUSH
20683: LD_VAR 0 2
20687: PPUSH
20688: LD_INT 0
20690: PPUSH
20691: CALL 18245 0 3
20695: PPUSH
20696: LD_INT 30
20698: PUSH
20699: LD_INT 3
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PPUSH
20706: CALL_OW 72
20710: ST_TO_ADDR
// if not factories then
20711: LD_VAR 0 6
20715: NOT
20716: IFFALSE 20720
// exit ;
20718: GO 21710
// for i in factories do
20720: LD_ADDR_VAR 0 8
20724: PUSH
20725: LD_VAR 0 6
20729: PUSH
20730: FOR_IN
20731: IFFALSE 20756
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20733: LD_ADDR_VAR 0 17
20737: PUSH
20738: LD_VAR 0 17
20742: PUSH
20743: LD_VAR 0 8
20747: PPUSH
20748: CALL_OW 478
20752: UNION
20753: ST_TO_ADDR
20754: GO 20730
20756: POP
20757: POP
// if not fac_list then
20758: LD_VAR 0 17
20762: NOT
20763: IFFALSE 20767
// exit ;
20765: GO 21710
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20767: LD_ADDR_VAR 0 5
20771: PUSH
20772: LD_INT 4
20774: PUSH
20775: LD_INT 5
20777: PUSH
20778: LD_INT 9
20780: PUSH
20781: LD_INT 10
20783: PUSH
20784: LD_INT 6
20786: PUSH
20787: LD_INT 7
20789: PUSH
20790: LD_INT 11
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 27
20804: PUSH
20805: LD_INT 28
20807: PUSH
20808: LD_INT 26
20810: PUSH
20811: LD_INT 30
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 43
20822: PUSH
20823: LD_INT 44
20825: PUSH
20826: LD_INT 46
20828: PUSH
20829: LD_INT 45
20831: PUSH
20832: LD_INT 47
20834: PUSH
20835: LD_INT 49
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: LIST
20850: PUSH
20851: LD_VAR 0 12
20855: ARRAY
20856: ST_TO_ADDR
// list := list isect fac_list ;
20857: LD_ADDR_VAR 0 5
20861: PUSH
20862: LD_VAR 0 5
20866: PUSH
20867: LD_VAR 0 17
20871: ISECT
20872: ST_TO_ADDR
// if not list then
20873: LD_VAR 0 5
20877: NOT
20878: IFFALSE 20882
// exit ;
20880: GO 21710
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20882: LD_VAR 0 12
20886: PUSH
20887: LD_INT 3
20889: EQUAL
20890: IFFALSE 20902
20892: PUSH
20893: LD_INT 49
20895: PUSH
20896: LD_VAR 0 5
20900: IN
20901: AND
20902: IFFALSE 20922
20904: PUSH
20905: LD_INT 31
20907: PPUSH
20908: LD_VAR 0 16
20912: PPUSH
20913: CALL_OW 321
20917: PUSH
20918: LD_INT 2
20920: EQUAL
20921: AND
20922: IFFALSE 20982
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20924: LD_INT 22
20926: PUSH
20927: LD_VAR 0 16
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 35
20938: PUSH
20939: LD_INT 49
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 91
20948: PUSH
20949: LD_VAR 0 1
20953: PUSH
20954: LD_INT 10
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: LIST
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: LIST
20966: PPUSH
20967: CALL_OW 69
20971: NOT
20972: IFFALSE 20982
// weapon := ru_time_lapser ;
20974: LD_ADDR_VAR 0 18
20978: PUSH
20979: LD_INT 49
20981: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20982: LD_VAR 0 12
20986: PUSH
20987: LD_INT 1
20989: PUSH
20990: LD_INT 2
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: IN
20997: IFFALSE 21021
20999: PUSH
21000: LD_INT 11
21002: PUSH
21003: LD_VAR 0 5
21007: IN
21008: IFTRUE 21020
21010: PUSH
21011: LD_INT 30
21013: PUSH
21014: LD_VAR 0 5
21018: IN
21019: OR
21020: AND
21021: IFFALSE 21041
21023: PUSH
21024: LD_INT 6
21026: PPUSH
21027: LD_VAR 0 16
21031: PPUSH
21032: CALL_OW 321
21036: PUSH
21037: LD_INT 2
21039: EQUAL
21040: AND
21041: IFFALSE 21208
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21043: LD_INT 22
21045: PUSH
21046: LD_VAR 0 16
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 2
21057: PUSH
21058: LD_INT 35
21060: PUSH
21061: LD_INT 11
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 35
21070: PUSH
21071: LD_INT 30
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 91
21085: PUSH
21086: LD_VAR 0 1
21090: PUSH
21091: LD_INT 18
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: LIST
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: LIST
21103: PPUSH
21104: CALL_OW 69
21108: NOT
21109: IFFALSE 21185
21111: PUSH
21112: LD_INT 22
21114: PUSH
21115: LD_VAR 0 16
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 2
21126: PUSH
21127: LD_INT 30
21129: PUSH
21130: LD_INT 32
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 30
21139: PUSH
21140: LD_INT 33
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 91
21154: PUSH
21155: LD_VAR 0 1
21159: PUSH
21160: LD_INT 12
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: LIST
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: LIST
21172: PUSH
21173: EMPTY
21174: LIST
21175: PPUSH
21176: CALL_OW 69
21180: PUSH
21181: LD_INT 2
21183: GREATER
21184: AND
21185: IFFALSE 21208
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21187: LD_ADDR_VAR 0 18
21191: PUSH
21192: LD_INT 11
21194: PUSH
21195: LD_INT 30
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_VAR 0 12
21206: ARRAY
21207: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21208: LD_VAR 0 18
21212: NOT
21213: IFFALSE 21233
21215: PUSH
21216: LD_INT 40
21218: PPUSH
21219: LD_VAR 0 16
21223: PPUSH
21224: CALL_OW 321
21228: PUSH
21229: LD_INT 2
21231: EQUAL
21232: AND
21233: IFFALSE 21269
21235: PUSH
21236: LD_INT 7
21238: PUSH
21239: LD_VAR 0 5
21243: IN
21244: IFTRUE 21256
21246: PUSH
21247: LD_INT 28
21249: PUSH
21250: LD_VAR 0 5
21254: IN
21255: OR
21256: IFTRUE 21268
21258: PUSH
21259: LD_INT 45
21261: PUSH
21262: LD_VAR 0 5
21266: IN
21267: OR
21268: AND
21269: IFFALSE 21523
// begin hex := GetHexInfo ( x , y ) ;
21271: LD_ADDR_VAR 0 4
21275: PUSH
21276: LD_VAR 0 10
21280: PPUSH
21281: LD_VAR 0 11
21285: PPUSH
21286: CALL_OW 546
21290: ST_TO_ADDR
// if hex [ 1 ] then
21291: LD_VAR 0 4
21295: PUSH
21296: LD_INT 1
21298: ARRAY
21299: IFFALSE 21303
// exit ;
21301: GO 21710
// height := hex [ 2 ] ;
21303: LD_ADDR_VAR 0 15
21307: PUSH
21308: LD_VAR 0 4
21312: PUSH
21313: LD_INT 2
21315: ARRAY
21316: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21317: LD_ADDR_VAR 0 14
21321: PUSH
21322: LD_INT 0
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 3
21330: PUSH
21331: LD_INT 5
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: ST_TO_ADDR
// for i in tmp do
21340: LD_ADDR_VAR 0 8
21344: PUSH
21345: LD_VAR 0 14
21349: PUSH
21350: FOR_IN
21351: IFFALSE 21521
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21353: LD_ADDR_VAR 0 9
21357: PUSH
21358: LD_VAR 0 10
21362: PPUSH
21363: LD_VAR 0 8
21367: PPUSH
21368: LD_INT 5
21370: PPUSH
21371: CALL_OW 272
21375: PUSH
21376: LD_VAR 0 11
21380: PPUSH
21381: LD_VAR 0 8
21385: PPUSH
21386: LD_INT 5
21388: PPUSH
21389: CALL_OW 273
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21398: LD_VAR 0 9
21402: PUSH
21403: LD_INT 1
21405: ARRAY
21406: PPUSH
21407: LD_VAR 0 9
21411: PUSH
21412: LD_INT 2
21414: ARRAY
21415: PPUSH
21416: CALL_OW 488
21420: IFFALSE 21519
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21422: LD_ADDR_VAR 0 4
21426: PUSH
21427: LD_VAR 0 9
21431: PUSH
21432: LD_INT 1
21434: ARRAY
21435: PPUSH
21436: LD_VAR 0 9
21440: PUSH
21441: LD_INT 2
21443: ARRAY
21444: PPUSH
21445: CALL_OW 546
21449: ST_TO_ADDR
// if hex [ 1 ] then
21450: LD_VAR 0 4
21454: PUSH
21455: LD_INT 1
21457: ARRAY
21458: IFFALSE 21462
// continue ;
21460: GO 21350
// h := hex [ 2 ] ;
21462: LD_ADDR_VAR 0 13
21466: PUSH
21467: LD_VAR 0 4
21471: PUSH
21472: LD_INT 2
21474: ARRAY
21475: ST_TO_ADDR
// if h + 7 < height then
21476: LD_VAR 0 13
21480: PUSH
21481: LD_INT 7
21483: PLUS
21484: PUSH
21485: LD_VAR 0 15
21489: LESS
21490: IFFALSE 21519
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21492: LD_ADDR_VAR 0 18
21496: PUSH
21497: LD_INT 7
21499: PUSH
21500: LD_INT 28
21502: PUSH
21503: LD_INT 45
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: LD_VAR 0 12
21515: ARRAY
21516: ST_TO_ADDR
// break ;
21517: GO 21521
// end ; end ; end ;
21519: GO 21350
21521: POP
21522: POP
// end ; if not weapon then
21523: LD_VAR 0 18
21527: NOT
21528: IFFALSE 21588
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21530: LD_ADDR_VAR 0 5
21534: PUSH
21535: LD_VAR 0 5
21539: PUSH
21540: LD_INT 11
21542: PUSH
21543: LD_INT 30
21545: PUSH
21546: LD_INT 49
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: LIST
21553: DIFF
21554: ST_TO_ADDR
// if not list then
21555: LD_VAR 0 5
21559: NOT
21560: IFFALSE 21564
// exit ;
21562: GO 21710
// weapon := list [ rand ( 1 , list ) ] ;
21564: LD_ADDR_VAR 0 18
21568: PUSH
21569: LD_VAR 0 5
21573: PUSH
21574: LD_INT 1
21576: PPUSH
21577: LD_VAR 0 5
21581: PPUSH
21582: CALL_OW 12
21586: ARRAY
21587: ST_TO_ADDR
// end ; if weapon then
21588: LD_VAR 0 18
21592: IFFALSE 21710
// begin tmp := CostOfWeapon ( weapon ) ;
21594: LD_ADDR_VAR 0 14
21598: PUSH
21599: LD_VAR 0 18
21603: PPUSH
21604: CALL_OW 451
21608: ST_TO_ADDR
// j := GetBase ( tower ) ;
21609: LD_ADDR_VAR 0 9
21613: PUSH
21614: LD_VAR 0 1
21618: PPUSH
21619: CALL_OW 274
21623: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21624: LD_VAR 0 9
21628: PPUSH
21629: LD_INT 1
21631: PPUSH
21632: CALL_OW 275
21636: PUSH
21637: LD_VAR 0 14
21641: PUSH
21642: LD_INT 1
21644: ARRAY
21645: GREATEREQUAL
21646: IFFALSE 21672
21648: PUSH
21649: LD_VAR 0 9
21653: PPUSH
21654: LD_INT 2
21656: PPUSH
21657: CALL_OW 275
21661: PUSH
21662: LD_VAR 0 14
21666: PUSH
21667: LD_INT 2
21669: ARRAY
21670: GREATEREQUAL
21671: AND
21672: IFFALSE 21698
21674: PUSH
21675: LD_VAR 0 9
21679: PPUSH
21680: LD_INT 3
21682: PPUSH
21683: CALL_OW 275
21687: PUSH
21688: LD_VAR 0 14
21692: PUSH
21693: LD_INT 3
21695: ARRAY
21696: GREATEREQUAL
21697: AND
21698: IFFALSE 21710
// result := weapon ;
21700: LD_ADDR_VAR 0 3
21704: PUSH
21705: LD_VAR 0 18
21709: ST_TO_ADDR
// end ; end ;
21710: LD_VAR 0 3
21714: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21715: LD_INT 0
21717: PPUSH
21718: PPUSH
// result := true ;
21719: LD_ADDR_VAR 0 3
21723: PUSH
21724: LD_INT 1
21726: ST_TO_ADDR
// if array1 = array2 then
21727: LD_VAR 0 1
21731: PUSH
21732: LD_VAR 0 2
21736: EQUAL
21737: IFFALSE 21797
// begin for i = 1 to array1 do
21739: LD_ADDR_VAR 0 4
21743: PUSH
21744: DOUBLE
21745: LD_INT 1
21747: DEC
21748: ST_TO_ADDR
21749: LD_VAR 0 1
21753: PUSH
21754: FOR_TO
21755: IFFALSE 21793
// if array1 [ i ] <> array2 [ i ] then
21757: LD_VAR 0 1
21761: PUSH
21762: LD_VAR 0 4
21766: ARRAY
21767: PUSH
21768: LD_VAR 0 2
21772: PUSH
21773: LD_VAR 0 4
21777: ARRAY
21778: NONEQUAL
21779: IFFALSE 21791
// begin result := false ;
21781: LD_ADDR_VAR 0 3
21785: PUSH
21786: LD_INT 0
21788: ST_TO_ADDR
// break ;
21789: GO 21793
// end ;
21791: GO 21754
21793: POP
21794: POP
// end else
21795: GO 21805
// result := false ;
21797: LD_ADDR_VAR 0 3
21801: PUSH
21802: LD_INT 0
21804: ST_TO_ADDR
// end ;
21805: LD_VAR 0 3
21809: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21810: LD_INT 0
21812: PPUSH
21813: PPUSH
// if not array1 or not array2 then
21814: LD_VAR 0 1
21818: NOT
21819: IFTRUE 21828
21821: PUSH
21822: LD_VAR 0 2
21826: NOT
21827: OR
21828: IFFALSE 21832
// exit ;
21830: GO 21896
// result := true ;
21832: LD_ADDR_VAR 0 3
21836: PUSH
21837: LD_INT 1
21839: ST_TO_ADDR
// for i = 1 to array1 do
21840: LD_ADDR_VAR 0 4
21844: PUSH
21845: DOUBLE
21846: LD_INT 1
21848: DEC
21849: ST_TO_ADDR
21850: LD_VAR 0 1
21854: PUSH
21855: FOR_TO
21856: IFFALSE 21894
// if array1 [ i ] <> array2 [ i ] then
21858: LD_VAR 0 1
21862: PUSH
21863: LD_VAR 0 4
21867: ARRAY
21868: PUSH
21869: LD_VAR 0 2
21873: PUSH
21874: LD_VAR 0 4
21878: ARRAY
21879: NONEQUAL
21880: IFFALSE 21892
// begin result := false ;
21882: LD_ADDR_VAR 0 3
21886: PUSH
21887: LD_INT 0
21889: ST_TO_ADDR
// break ;
21890: GO 21894
// end ;
21892: GO 21855
21894: POP
21895: POP
// end ;
21896: LD_VAR 0 3
21900: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21901: LD_INT 0
21903: PPUSH
21904: PPUSH
21905: PPUSH
// pom := GetBase ( fac ) ;
21906: LD_ADDR_VAR 0 5
21910: PUSH
21911: LD_VAR 0 1
21915: PPUSH
21916: CALL_OW 274
21920: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21921: LD_ADDR_VAR 0 4
21925: PUSH
21926: LD_VAR 0 2
21930: PUSH
21931: LD_INT 1
21933: ARRAY
21934: PPUSH
21935: LD_VAR 0 2
21939: PUSH
21940: LD_INT 2
21942: ARRAY
21943: PPUSH
21944: LD_VAR 0 2
21948: PUSH
21949: LD_INT 3
21951: ARRAY
21952: PPUSH
21953: LD_VAR 0 2
21957: PUSH
21958: LD_INT 4
21960: ARRAY
21961: PPUSH
21962: CALL_OW 449
21966: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21967: LD_ADDR_VAR 0 3
21971: PUSH
21972: LD_VAR 0 5
21976: PPUSH
21977: LD_INT 1
21979: PPUSH
21980: CALL_OW 275
21984: PUSH
21985: LD_VAR 0 4
21989: PUSH
21990: LD_INT 1
21992: ARRAY
21993: GREATEREQUAL
21994: IFFALSE 22020
21996: PUSH
21997: LD_VAR 0 5
22001: PPUSH
22002: LD_INT 2
22004: PPUSH
22005: CALL_OW 275
22009: PUSH
22010: LD_VAR 0 4
22014: PUSH
22015: LD_INT 2
22017: ARRAY
22018: GREATEREQUAL
22019: AND
22020: IFFALSE 22046
22022: PUSH
22023: LD_VAR 0 5
22027: PPUSH
22028: LD_INT 3
22030: PPUSH
22031: CALL_OW 275
22035: PUSH
22036: LD_VAR 0 4
22040: PUSH
22041: LD_INT 3
22043: ARRAY
22044: GREATEREQUAL
22045: AND
22046: ST_TO_ADDR
// end ;
22047: LD_VAR 0 3
22051: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22052: LD_INT 0
22054: PPUSH
22055: PPUSH
22056: PPUSH
22057: PPUSH
// pom := GetBase ( building ) ;
22058: LD_ADDR_VAR 0 3
22062: PUSH
22063: LD_VAR 0 1
22067: PPUSH
22068: CALL_OW 274
22072: ST_TO_ADDR
// if not pom then
22073: LD_VAR 0 3
22077: NOT
22078: IFFALSE 22082
// exit ;
22080: GO 22256
// btype := GetBType ( building ) ;
22082: LD_ADDR_VAR 0 5
22086: PUSH
22087: LD_VAR 0 1
22091: PPUSH
22092: CALL_OW 266
22096: ST_TO_ADDR
// if btype = b_armoury then
22097: LD_VAR 0 5
22101: PUSH
22102: LD_INT 4
22104: EQUAL
22105: IFFALSE 22115
// btype := b_barracks ;
22107: LD_ADDR_VAR 0 5
22111: PUSH
22112: LD_INT 5
22114: ST_TO_ADDR
// if btype = b_depot then
22115: LD_VAR 0 5
22119: PUSH
22120: LD_INT 0
22122: EQUAL
22123: IFFALSE 22133
// btype := b_warehouse ;
22125: LD_ADDR_VAR 0 5
22129: PUSH
22130: LD_INT 1
22132: ST_TO_ADDR
// if btype = b_workshop then
22133: LD_VAR 0 5
22137: PUSH
22138: LD_INT 2
22140: EQUAL
22141: IFFALSE 22151
// btype := b_factory ;
22143: LD_ADDR_VAR 0 5
22147: PUSH
22148: LD_INT 3
22150: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22151: LD_ADDR_VAR 0 4
22155: PUSH
22156: LD_VAR 0 5
22160: PPUSH
22161: LD_VAR 0 1
22165: PPUSH
22166: CALL_OW 248
22170: PPUSH
22171: CALL_OW 450
22175: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22176: LD_ADDR_VAR 0 2
22180: PUSH
22181: LD_VAR 0 3
22185: PPUSH
22186: LD_INT 1
22188: PPUSH
22189: CALL_OW 275
22193: PUSH
22194: LD_VAR 0 4
22198: PUSH
22199: LD_INT 1
22201: ARRAY
22202: GREATEREQUAL
22203: IFFALSE 22229
22205: PUSH
22206: LD_VAR 0 3
22210: PPUSH
22211: LD_INT 2
22213: PPUSH
22214: CALL_OW 275
22218: PUSH
22219: LD_VAR 0 4
22223: PUSH
22224: LD_INT 2
22226: ARRAY
22227: GREATEREQUAL
22228: AND
22229: IFFALSE 22255
22231: PUSH
22232: LD_VAR 0 3
22236: PPUSH
22237: LD_INT 3
22239: PPUSH
22240: CALL_OW 275
22244: PUSH
22245: LD_VAR 0 4
22249: PUSH
22250: LD_INT 3
22252: ARRAY
22253: GREATEREQUAL
22254: AND
22255: ST_TO_ADDR
// end ;
22256: LD_VAR 0 2
22260: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22261: LD_INT 0
22263: PPUSH
22264: PPUSH
22265: PPUSH
// pom := GetBase ( building ) ;
22266: LD_ADDR_VAR 0 4
22270: PUSH
22271: LD_VAR 0 1
22275: PPUSH
22276: CALL_OW 274
22280: ST_TO_ADDR
// if not pom then
22281: LD_VAR 0 4
22285: NOT
22286: IFFALSE 22290
// exit ;
22288: GO 22395
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22290: LD_ADDR_VAR 0 5
22294: PUSH
22295: LD_VAR 0 2
22299: PPUSH
22300: LD_VAR 0 1
22304: PPUSH
22305: CALL_OW 248
22309: PPUSH
22310: CALL_OW 450
22314: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22315: LD_ADDR_VAR 0 3
22319: PUSH
22320: LD_VAR 0 4
22324: PPUSH
22325: LD_INT 1
22327: PPUSH
22328: CALL_OW 275
22332: PUSH
22333: LD_VAR 0 5
22337: PUSH
22338: LD_INT 1
22340: ARRAY
22341: GREATEREQUAL
22342: IFFALSE 22368
22344: PUSH
22345: LD_VAR 0 4
22349: PPUSH
22350: LD_INT 2
22352: PPUSH
22353: CALL_OW 275
22357: PUSH
22358: LD_VAR 0 5
22362: PUSH
22363: LD_INT 2
22365: ARRAY
22366: GREATEREQUAL
22367: AND
22368: IFFALSE 22394
22370: PUSH
22371: LD_VAR 0 4
22375: PPUSH
22376: LD_INT 3
22378: PPUSH
22379: CALL_OW 275
22383: PUSH
22384: LD_VAR 0 5
22388: PUSH
22389: LD_INT 3
22391: ARRAY
22392: GREATEREQUAL
22393: AND
22394: ST_TO_ADDR
// end ;
22395: LD_VAR 0 3
22399: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22400: LD_INT 0
22402: PPUSH
22403: PPUSH
22404: PPUSH
22405: PPUSH
22406: PPUSH
22407: PPUSH
22408: PPUSH
22409: PPUSH
22410: PPUSH
22411: PPUSH
22412: PPUSH
// result := false ;
22413: LD_ADDR_VAR 0 8
22417: PUSH
22418: LD_INT 0
22420: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22421: LD_VAR 0 5
22425: NOT
22426: IFTRUE 22435
22428: PUSH
22429: LD_VAR 0 1
22433: NOT
22434: OR
22435: IFTRUE 22444
22437: PUSH
22438: LD_VAR 0 2
22442: NOT
22443: OR
22444: IFTRUE 22453
22446: PUSH
22447: LD_VAR 0 3
22451: NOT
22452: OR
22453: IFFALSE 22457
// exit ;
22455: GO 23283
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22457: LD_ADDR_VAR 0 14
22461: PUSH
22462: LD_VAR 0 1
22466: PPUSH
22467: LD_VAR 0 2
22471: PPUSH
22472: LD_VAR 0 3
22476: PPUSH
22477: LD_VAR 0 4
22481: PPUSH
22482: LD_VAR 0 5
22486: PUSH
22487: LD_INT 1
22489: ARRAY
22490: PPUSH
22491: CALL_OW 248
22495: PPUSH
22496: LD_INT 0
22498: PPUSH
22499: CALL 24564 0 6
22503: ST_TO_ADDR
// if not hexes then
22504: LD_VAR 0 14
22508: NOT
22509: IFFALSE 22513
// exit ;
22511: GO 23283
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22513: LD_ADDR_VAR 0 17
22517: PUSH
22518: LD_VAR 0 5
22522: PPUSH
22523: LD_INT 22
22525: PUSH
22526: LD_VAR 0 13
22530: PPUSH
22531: CALL_OW 255
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 2
22542: PUSH
22543: LD_INT 30
22545: PUSH
22546: LD_INT 0
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 30
22555: PUSH
22556: LD_INT 1
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: LIST
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PPUSH
22572: CALL_OW 72
22576: ST_TO_ADDR
// for i = 1 to hexes do
22577: LD_ADDR_VAR 0 9
22581: PUSH
22582: DOUBLE
22583: LD_INT 1
22585: DEC
22586: ST_TO_ADDR
22587: LD_VAR 0 14
22591: PUSH
22592: FOR_TO
22593: IFFALSE 23281
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22595: LD_ADDR_VAR 0 13
22599: PUSH
22600: LD_VAR 0 14
22604: PUSH
22605: LD_VAR 0 9
22609: ARRAY
22610: PUSH
22611: LD_INT 1
22613: ARRAY
22614: PPUSH
22615: LD_VAR 0 14
22619: PUSH
22620: LD_VAR 0 9
22624: ARRAY
22625: PUSH
22626: LD_INT 2
22628: ARRAY
22629: PPUSH
22630: CALL_OW 428
22634: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22635: LD_VAR 0 14
22639: PUSH
22640: LD_VAR 0 9
22644: ARRAY
22645: PUSH
22646: LD_INT 1
22648: ARRAY
22649: PPUSH
22650: LD_VAR 0 14
22654: PUSH
22655: LD_VAR 0 9
22659: ARRAY
22660: PUSH
22661: LD_INT 2
22663: ARRAY
22664: PPUSH
22665: CALL_OW 351
22669: IFTRUE 22708
22671: PUSH
22672: LD_VAR 0 14
22676: PUSH
22677: LD_VAR 0 9
22681: ARRAY
22682: PUSH
22683: LD_INT 1
22685: ARRAY
22686: PPUSH
22687: LD_VAR 0 14
22691: PUSH
22692: LD_VAR 0 9
22696: ARRAY
22697: PUSH
22698: LD_INT 2
22700: ARRAY
22701: PPUSH
22702: CALL_OW 488
22706: NOT
22707: OR
22708: IFTRUE 22725
22710: PUSH
22711: LD_VAR 0 13
22715: PPUSH
22716: CALL_OW 247
22720: PUSH
22721: LD_INT 3
22723: EQUAL
22724: OR
22725: IFFALSE 22731
// exit ;
22727: POP
22728: POP
22729: GO 23283
// if not tmp then
22731: LD_VAR 0 13
22735: NOT
22736: IFFALSE 22740
// continue ;
22738: GO 22592
// result := true ;
22740: LD_ADDR_VAR 0 8
22744: PUSH
22745: LD_INT 1
22747: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22748: LD_VAR 0 6
22752: IFFALSE 22769
22754: PUSH
22755: LD_VAR 0 13
22759: PPUSH
22760: CALL_OW 247
22764: PUSH
22765: LD_INT 2
22767: EQUAL
22768: AND
22769: IFFALSE 22786
22771: PUSH
22772: LD_VAR 0 13
22776: PPUSH
22777: CALL_OW 263
22781: PUSH
22782: LD_INT 1
22784: EQUAL
22785: AND
22786: IFFALSE 22950
// begin if IsDrivenBy ( tmp ) then
22788: LD_VAR 0 13
22792: PPUSH
22793: CALL_OW 311
22797: IFFALSE 22801
// continue ;
22799: GO 22592
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22801: LD_VAR 0 6
22805: PPUSH
22806: LD_INT 3
22808: PUSH
22809: LD_INT 60
22811: PUSH
22812: EMPTY
22813: LIST
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 3
22821: PUSH
22822: LD_INT 55
22824: PUSH
22825: EMPTY
22826: LIST
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PPUSH
22836: CALL_OW 72
22840: IFFALSE 22948
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22842: LD_ADDR_VAR 0 18
22846: PUSH
22847: LD_VAR 0 6
22851: PPUSH
22852: LD_INT 3
22854: PUSH
22855: LD_INT 60
22857: PUSH
22858: EMPTY
22859: LIST
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 3
22867: PUSH
22868: LD_INT 55
22870: PUSH
22871: EMPTY
22872: LIST
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PPUSH
22882: CALL_OW 72
22886: PUSH
22887: LD_INT 1
22889: ARRAY
22890: ST_TO_ADDR
// if IsInUnit ( driver ) then
22891: LD_VAR 0 18
22895: PPUSH
22896: CALL_OW 310
22900: IFFALSE 22911
// ComExit ( driver ) ;
22902: LD_VAR 0 18
22906: PPUSH
22907: CALL 48554 0 1
// AddComEnterUnit ( driver , tmp ) ;
22911: LD_VAR 0 18
22915: PPUSH
22916: LD_VAR 0 13
22920: PPUSH
22921: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22925: LD_VAR 0 18
22929: PPUSH
22930: LD_VAR 0 7
22934: PPUSH
22935: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22939: LD_VAR 0 18
22943: PPUSH
22944: CALL_OW 181
// end ; continue ;
22948: GO 22592
// end ; if not cleaners or not tmp in cleaners then
22950: LD_VAR 0 6
22954: NOT
22955: IFTRUE 22970
22957: PUSH
22958: LD_VAR 0 13
22962: PUSH
22963: LD_VAR 0 6
22967: IN
22968: NOT
22969: OR
22970: IFFALSE 23279
// begin if dep then
22972: LD_VAR 0 17
22976: IFFALSE 23112
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22978: LD_ADDR_VAR 0 16
22982: PUSH
22983: LD_VAR 0 17
22987: PUSH
22988: LD_INT 1
22990: ARRAY
22991: PPUSH
22992: CALL_OW 250
22996: PPUSH
22997: LD_VAR 0 17
23001: PUSH
23002: LD_INT 1
23004: ARRAY
23005: PPUSH
23006: CALL_OW 254
23010: PPUSH
23011: LD_INT 5
23013: PPUSH
23014: CALL_OW 272
23018: PUSH
23019: LD_VAR 0 17
23023: PUSH
23024: LD_INT 1
23026: ARRAY
23027: PPUSH
23028: CALL_OW 251
23032: PPUSH
23033: LD_VAR 0 17
23037: PUSH
23038: LD_INT 1
23040: ARRAY
23041: PPUSH
23042: CALL_OW 254
23046: PPUSH
23047: LD_INT 5
23049: PPUSH
23050: CALL_OW 273
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23059: LD_VAR 0 16
23063: PUSH
23064: LD_INT 1
23066: ARRAY
23067: PPUSH
23068: LD_VAR 0 16
23072: PUSH
23073: LD_INT 2
23075: ARRAY
23076: PPUSH
23077: CALL_OW 488
23081: IFFALSE 23112
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23083: LD_VAR 0 13
23087: PPUSH
23088: LD_VAR 0 16
23092: PUSH
23093: LD_INT 1
23095: ARRAY
23096: PPUSH
23097: LD_VAR 0 16
23101: PUSH
23102: LD_INT 2
23104: ARRAY
23105: PPUSH
23106: CALL_OW 111
// continue ;
23110: GO 22592
// end ; end ; r := GetDir ( tmp ) ;
23112: LD_ADDR_VAR 0 15
23116: PUSH
23117: LD_VAR 0 13
23121: PPUSH
23122: CALL_OW 254
23126: ST_TO_ADDR
// if r = 5 then
23127: LD_VAR 0 15
23131: PUSH
23132: LD_INT 5
23134: EQUAL
23135: IFFALSE 23145
// r := 0 ;
23137: LD_ADDR_VAR 0 15
23141: PUSH
23142: LD_INT 0
23144: ST_TO_ADDR
// for j = r to 5 do
23145: LD_ADDR_VAR 0 10
23149: PUSH
23150: DOUBLE
23151: LD_VAR 0 15
23155: DEC
23156: ST_TO_ADDR
23157: LD_INT 5
23159: PUSH
23160: FOR_TO
23161: IFFALSE 23277
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23163: LD_ADDR_VAR 0 11
23167: PUSH
23168: LD_VAR 0 13
23172: PPUSH
23173: CALL_OW 250
23177: PPUSH
23178: LD_VAR 0 10
23182: PPUSH
23183: LD_INT 2
23185: PPUSH
23186: CALL_OW 272
23190: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23191: LD_ADDR_VAR 0 12
23195: PUSH
23196: LD_VAR 0 13
23200: PPUSH
23201: CALL_OW 251
23205: PPUSH
23206: LD_VAR 0 10
23210: PPUSH
23211: LD_INT 2
23213: PPUSH
23214: CALL_OW 273
23218: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23219: LD_VAR 0 11
23223: PPUSH
23224: LD_VAR 0 12
23228: PPUSH
23229: CALL_OW 488
23233: IFFALSE 23252
23235: PUSH
23236: LD_VAR 0 11
23240: PPUSH
23241: LD_VAR 0 12
23245: PPUSH
23246: CALL_OW 428
23250: NOT
23251: AND
23252: IFFALSE 23275
// begin ComMoveXY ( tmp , _x , _y ) ;
23254: LD_VAR 0 13
23258: PPUSH
23259: LD_VAR 0 11
23263: PPUSH
23264: LD_VAR 0 12
23268: PPUSH
23269: CALL_OW 111
// break ;
23273: GO 23277
// end ; end ;
23275: GO 23160
23277: POP
23278: POP
// end ; end ;
23279: GO 22592
23281: POP
23282: POP
// end ;
23283: LD_VAR 0 8
23287: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23288: LD_INT 0
23290: PPUSH
// result := true ;
23291: LD_ADDR_VAR 0 3
23295: PUSH
23296: LD_INT 1
23298: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23299: LD_VAR 0 2
23303: PUSH
23304: LD_INT 24
23306: DOUBLE
23307: EQUAL
23308: IFTRUE 23318
23310: LD_INT 33
23312: DOUBLE
23313: EQUAL
23314: IFTRUE 23318
23316: GO 23343
23318: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23319: LD_ADDR_VAR 0 3
23323: PUSH
23324: LD_INT 32
23326: PPUSH
23327: LD_VAR 0 1
23331: PPUSH
23332: CALL_OW 321
23336: PUSH
23337: LD_INT 2
23339: EQUAL
23340: ST_TO_ADDR
23341: GO 23659
23343: LD_INT 20
23345: DOUBLE
23346: EQUAL
23347: IFTRUE 23351
23349: GO 23376
23351: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23352: LD_ADDR_VAR 0 3
23356: PUSH
23357: LD_INT 6
23359: PPUSH
23360: LD_VAR 0 1
23364: PPUSH
23365: CALL_OW 321
23369: PUSH
23370: LD_INT 2
23372: EQUAL
23373: ST_TO_ADDR
23374: GO 23659
23376: LD_INT 22
23378: DOUBLE
23379: EQUAL
23380: IFTRUE 23390
23382: LD_INT 36
23384: DOUBLE
23385: EQUAL
23386: IFTRUE 23390
23388: GO 23415
23390: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23391: LD_ADDR_VAR 0 3
23395: PUSH
23396: LD_INT 15
23398: PPUSH
23399: LD_VAR 0 1
23403: PPUSH
23404: CALL_OW 321
23408: PUSH
23409: LD_INT 2
23411: EQUAL
23412: ST_TO_ADDR
23413: GO 23659
23415: LD_INT 30
23417: DOUBLE
23418: EQUAL
23419: IFTRUE 23423
23421: GO 23448
23423: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23424: LD_ADDR_VAR 0 3
23428: PUSH
23429: LD_INT 20
23431: PPUSH
23432: LD_VAR 0 1
23436: PPUSH
23437: CALL_OW 321
23441: PUSH
23442: LD_INT 2
23444: EQUAL
23445: ST_TO_ADDR
23446: GO 23659
23448: LD_INT 28
23450: DOUBLE
23451: EQUAL
23452: IFTRUE 23462
23454: LD_INT 21
23456: DOUBLE
23457: EQUAL
23458: IFTRUE 23462
23460: GO 23487
23462: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23463: LD_ADDR_VAR 0 3
23467: PUSH
23468: LD_INT 21
23470: PPUSH
23471: LD_VAR 0 1
23475: PPUSH
23476: CALL_OW 321
23480: PUSH
23481: LD_INT 2
23483: EQUAL
23484: ST_TO_ADDR
23485: GO 23659
23487: LD_INT 16
23489: DOUBLE
23490: EQUAL
23491: IFTRUE 23495
23493: GO 23520
23495: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23496: LD_ADDR_VAR 0 3
23500: PUSH
23501: LD_INT 84
23503: PPUSH
23504: LD_VAR 0 1
23508: PPUSH
23509: CALL_OW 321
23513: PUSH
23514: LD_INT 2
23516: EQUAL
23517: ST_TO_ADDR
23518: GO 23659
23520: LD_INT 19
23522: DOUBLE
23523: EQUAL
23524: IFTRUE 23534
23526: LD_INT 23
23528: DOUBLE
23529: EQUAL
23530: IFTRUE 23534
23532: GO 23559
23534: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23535: LD_ADDR_VAR 0 3
23539: PUSH
23540: LD_INT 83
23542: PPUSH
23543: LD_VAR 0 1
23547: PPUSH
23548: CALL_OW 321
23552: PUSH
23553: LD_INT 2
23555: EQUAL
23556: ST_TO_ADDR
23557: GO 23659
23559: LD_INT 17
23561: DOUBLE
23562: EQUAL
23563: IFTRUE 23567
23565: GO 23592
23567: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23568: LD_ADDR_VAR 0 3
23572: PUSH
23573: LD_INT 39
23575: PPUSH
23576: LD_VAR 0 1
23580: PPUSH
23581: CALL_OW 321
23585: PUSH
23586: LD_INT 2
23588: EQUAL
23589: ST_TO_ADDR
23590: GO 23659
23592: LD_INT 18
23594: DOUBLE
23595: EQUAL
23596: IFTRUE 23600
23598: GO 23625
23600: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23601: LD_ADDR_VAR 0 3
23605: PUSH
23606: LD_INT 40
23608: PPUSH
23609: LD_VAR 0 1
23613: PPUSH
23614: CALL_OW 321
23618: PUSH
23619: LD_INT 2
23621: EQUAL
23622: ST_TO_ADDR
23623: GO 23659
23625: LD_INT 27
23627: DOUBLE
23628: EQUAL
23629: IFTRUE 23633
23631: GO 23658
23633: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23634: LD_ADDR_VAR 0 3
23638: PUSH
23639: LD_INT 35
23641: PPUSH
23642: LD_VAR 0 1
23646: PPUSH
23647: CALL_OW 321
23651: PUSH
23652: LD_INT 2
23654: EQUAL
23655: ST_TO_ADDR
23656: GO 23659
23658: POP
// end ;
23659: LD_VAR 0 3
23663: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23664: LD_INT 0
23666: PPUSH
23667: PPUSH
23668: PPUSH
23669: PPUSH
23670: PPUSH
23671: PPUSH
23672: PPUSH
23673: PPUSH
23674: PPUSH
23675: PPUSH
23676: PPUSH
// result := false ;
23677: LD_ADDR_VAR 0 6
23681: PUSH
23682: LD_INT 0
23684: ST_TO_ADDR
// if btype = b_depot then
23685: LD_VAR 0 2
23689: PUSH
23690: LD_INT 0
23692: EQUAL
23693: IFFALSE 23705
// begin result := true ;
23695: LD_ADDR_VAR 0 6
23699: PUSH
23700: LD_INT 1
23702: ST_TO_ADDR
// exit ;
23703: GO 24559
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23705: LD_VAR 0 1
23709: NOT
23710: IFTRUE 23735
23712: PUSH
23713: LD_VAR 0 1
23717: PPUSH
23718: CALL_OW 266
23722: PUSH
23723: LD_INT 0
23725: PUSH
23726: LD_INT 1
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: IN
23733: NOT
23734: OR
23735: IFTRUE 23744
23737: PUSH
23738: LD_VAR 0 2
23742: NOT
23743: OR
23744: IFTRUE 23780
23746: PUSH
23747: LD_VAR 0 5
23751: PUSH
23752: LD_INT 0
23754: PUSH
23755: LD_INT 1
23757: PUSH
23758: LD_INT 2
23760: PUSH
23761: LD_INT 3
23763: PUSH
23764: LD_INT 4
23766: PUSH
23767: LD_INT 5
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: IN
23778: NOT
23779: OR
23780: IFTRUE 23799
23782: PUSH
23783: LD_VAR 0 3
23787: PPUSH
23788: LD_VAR 0 4
23792: PPUSH
23793: CALL_OW 488
23797: NOT
23798: OR
23799: IFFALSE 23803
// exit ;
23801: GO 24559
// side := GetSide ( depot ) ;
23803: LD_ADDR_VAR 0 9
23807: PUSH
23808: LD_VAR 0 1
23812: PPUSH
23813: CALL_OW 255
23817: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23818: LD_VAR 0 9
23822: PPUSH
23823: LD_VAR 0 2
23827: PPUSH
23828: CALL 23288 0 2
23832: NOT
23833: IFFALSE 23837
// exit ;
23835: GO 24559
// pom := GetBase ( depot ) ;
23837: LD_ADDR_VAR 0 10
23841: PUSH
23842: LD_VAR 0 1
23846: PPUSH
23847: CALL_OW 274
23851: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23852: LD_ADDR_VAR 0 11
23856: PUSH
23857: LD_VAR 0 2
23861: PPUSH
23862: LD_VAR 0 1
23866: PPUSH
23867: CALL_OW 248
23871: PPUSH
23872: CALL_OW 450
23876: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23877: LD_VAR 0 10
23881: PPUSH
23882: LD_INT 1
23884: PPUSH
23885: CALL_OW 275
23889: PUSH
23890: LD_VAR 0 11
23894: PUSH
23895: LD_INT 1
23897: ARRAY
23898: GREATEREQUAL
23899: IFFALSE 23925
23901: PUSH
23902: LD_VAR 0 10
23906: PPUSH
23907: LD_INT 2
23909: PPUSH
23910: CALL_OW 275
23914: PUSH
23915: LD_VAR 0 11
23919: PUSH
23920: LD_INT 2
23922: ARRAY
23923: GREATEREQUAL
23924: AND
23925: IFFALSE 23951
23927: PUSH
23928: LD_VAR 0 10
23932: PPUSH
23933: LD_INT 3
23935: PPUSH
23936: CALL_OW 275
23940: PUSH
23941: LD_VAR 0 11
23945: PUSH
23946: LD_INT 3
23948: ARRAY
23949: GREATEREQUAL
23950: AND
23951: NOT
23952: IFFALSE 23956
// exit ;
23954: GO 24559
// if GetBType ( depot ) = b_depot then
23956: LD_VAR 0 1
23960: PPUSH
23961: CALL_OW 266
23965: PUSH
23966: LD_INT 0
23968: EQUAL
23969: IFFALSE 23981
// dist := 28 else
23971: LD_ADDR_VAR 0 14
23975: PUSH
23976: LD_INT 28
23978: ST_TO_ADDR
23979: GO 23989
// dist := 36 ;
23981: LD_ADDR_VAR 0 14
23985: PUSH
23986: LD_INT 36
23988: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23989: LD_VAR 0 1
23993: PPUSH
23994: LD_VAR 0 3
23998: PPUSH
23999: LD_VAR 0 4
24003: PPUSH
24004: CALL_OW 297
24008: PUSH
24009: LD_VAR 0 14
24013: GREATER
24014: IFFALSE 24018
// exit ;
24016: GO 24559
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24018: LD_ADDR_VAR 0 12
24022: PUSH
24023: LD_VAR 0 2
24027: PPUSH
24028: LD_VAR 0 3
24032: PPUSH
24033: LD_VAR 0 4
24037: PPUSH
24038: LD_VAR 0 5
24042: PPUSH
24043: LD_VAR 0 1
24047: PPUSH
24048: CALL_OW 248
24052: PPUSH
24053: LD_INT 0
24055: PPUSH
24056: CALL 24564 0 6
24060: ST_TO_ADDR
// if not hexes then
24061: LD_VAR 0 12
24065: NOT
24066: IFFALSE 24070
// exit ;
24068: GO 24559
// hex := GetHexInfo ( x , y ) ;
24070: LD_ADDR_VAR 0 15
24074: PUSH
24075: LD_VAR 0 3
24079: PPUSH
24080: LD_VAR 0 4
24084: PPUSH
24085: CALL_OW 546
24089: ST_TO_ADDR
// if hex [ 1 ] then
24090: LD_VAR 0 15
24094: PUSH
24095: LD_INT 1
24097: ARRAY
24098: IFFALSE 24102
// exit ;
24100: GO 24559
// height := hex [ 2 ] ;
24102: LD_ADDR_VAR 0 13
24106: PUSH
24107: LD_VAR 0 15
24111: PUSH
24112: LD_INT 2
24114: ARRAY
24115: ST_TO_ADDR
// for i = 1 to hexes do
24116: LD_ADDR_VAR 0 7
24120: PUSH
24121: DOUBLE
24122: LD_INT 1
24124: DEC
24125: ST_TO_ADDR
24126: LD_VAR 0 12
24130: PUSH
24131: FOR_TO
24132: IFFALSE 24476
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24134: LD_VAR 0 12
24138: PUSH
24139: LD_VAR 0 7
24143: ARRAY
24144: PUSH
24145: LD_INT 1
24147: ARRAY
24148: PPUSH
24149: LD_VAR 0 12
24153: PUSH
24154: LD_VAR 0 7
24158: ARRAY
24159: PUSH
24160: LD_INT 2
24162: ARRAY
24163: PPUSH
24164: CALL_OW 488
24168: NOT
24169: IFTRUE 24211
24171: PUSH
24172: LD_VAR 0 12
24176: PUSH
24177: LD_VAR 0 7
24181: ARRAY
24182: PUSH
24183: LD_INT 1
24185: ARRAY
24186: PPUSH
24187: LD_VAR 0 12
24191: PUSH
24192: LD_VAR 0 7
24196: ARRAY
24197: PUSH
24198: LD_INT 2
24200: ARRAY
24201: PPUSH
24202: CALL_OW 428
24206: PUSH
24207: LD_INT 0
24209: GREATER
24210: OR
24211: IFTRUE 24249
24213: PUSH
24214: LD_VAR 0 12
24218: PUSH
24219: LD_VAR 0 7
24223: ARRAY
24224: PUSH
24225: LD_INT 1
24227: ARRAY
24228: PPUSH
24229: LD_VAR 0 12
24233: PUSH
24234: LD_VAR 0 7
24238: ARRAY
24239: PUSH
24240: LD_INT 2
24242: ARRAY
24243: PPUSH
24244: CALL_OW 351
24248: OR
24249: IFFALSE 24255
// exit ;
24251: POP
24252: POP
24253: GO 24559
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24255: LD_ADDR_VAR 0 8
24259: PUSH
24260: LD_VAR 0 12
24264: PUSH
24265: LD_VAR 0 7
24269: ARRAY
24270: PUSH
24271: LD_INT 1
24273: ARRAY
24274: PPUSH
24275: LD_VAR 0 12
24279: PUSH
24280: LD_VAR 0 7
24284: ARRAY
24285: PUSH
24286: LD_INT 2
24288: ARRAY
24289: PPUSH
24290: CALL_OW 546
24294: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24295: LD_VAR 0 8
24299: PUSH
24300: LD_INT 1
24302: ARRAY
24303: IFTRUE 24325
24305: PUSH
24306: LD_VAR 0 8
24310: PUSH
24311: LD_INT 2
24313: ARRAY
24314: PUSH
24315: LD_VAR 0 13
24319: PUSH
24320: LD_INT 2
24322: PLUS
24323: GREATER
24324: OR
24325: IFTRUE 24347
24327: PUSH
24328: LD_VAR 0 8
24332: PUSH
24333: LD_INT 2
24335: ARRAY
24336: PUSH
24337: LD_VAR 0 13
24341: PUSH
24342: LD_INT 2
24344: MINUS
24345: LESS
24346: OR
24347: IFTRUE 24415
24349: PUSH
24350: LD_VAR 0 8
24354: PUSH
24355: LD_INT 3
24357: ARRAY
24358: PUSH
24359: LD_INT 0
24361: PUSH
24362: LD_INT 8
24364: PUSH
24365: LD_INT 9
24367: PUSH
24368: LD_INT 10
24370: PUSH
24371: LD_INT 11
24373: PUSH
24374: LD_INT 12
24376: PUSH
24377: LD_INT 13
24379: PUSH
24380: LD_INT 16
24382: PUSH
24383: LD_INT 17
24385: PUSH
24386: LD_INT 18
24388: PUSH
24389: LD_INT 19
24391: PUSH
24392: LD_INT 20
24394: PUSH
24395: LD_INT 21
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: IN
24413: NOT
24414: OR
24415: IFTRUE 24428
24417: PUSH
24418: LD_VAR 0 8
24422: PUSH
24423: LD_INT 5
24425: ARRAY
24426: NOT
24427: OR
24428: IFTRUE 24468
24430: PUSH
24431: LD_VAR 0 8
24435: PUSH
24436: LD_INT 6
24438: ARRAY
24439: PUSH
24440: LD_INT 1
24442: PUSH
24443: LD_INT 2
24445: PUSH
24446: LD_INT 7
24448: PUSH
24449: LD_INT 9
24451: PUSH
24452: LD_INT 10
24454: PUSH
24455: LD_INT 11
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: IN
24466: NOT
24467: OR
24468: IFFALSE 24474
// exit ;
24470: POP
24471: POP
24472: GO 24559
// end ;
24474: GO 24131
24476: POP
24477: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24478: LD_VAR 0 9
24482: PPUSH
24483: LD_VAR 0 3
24487: PPUSH
24488: LD_VAR 0 4
24492: PPUSH
24493: LD_INT 20
24495: PPUSH
24496: CALL 16378 0 4
24500: PUSH
24501: LD_INT 4
24503: ARRAY
24504: IFFALSE 24508
// exit ;
24506: GO 24559
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24508: LD_VAR 0 2
24512: PUSH
24513: LD_INT 29
24515: PUSH
24516: LD_INT 30
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: IN
24523: IFFALSE 24547
24525: PUSH
24526: LD_VAR 0 3
24530: PPUSH
24531: LD_VAR 0 4
24535: PPUSH
24536: LD_VAR 0 9
24540: PPUSH
24541: CALL_OW 440
24545: NOT
24546: AND
24547: IFFALSE 24551
// exit ;
24549: GO 24559
// result := true ;
24551: LD_ADDR_VAR 0 6
24555: PUSH
24556: LD_INT 1
24558: ST_TO_ADDR
// end ;
24559: LD_VAR 0 6
24563: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24564: LD_INT 0
24566: PPUSH
24567: PPUSH
24568: PPUSH
24569: PPUSH
24570: PPUSH
24571: PPUSH
24572: PPUSH
24573: PPUSH
24574: PPUSH
24575: PPUSH
24576: PPUSH
24577: PPUSH
24578: PPUSH
24579: PPUSH
24580: PPUSH
24581: PPUSH
24582: PPUSH
24583: PPUSH
24584: PPUSH
24585: PPUSH
24586: PPUSH
24587: PPUSH
24588: PPUSH
24589: PPUSH
24590: PPUSH
24591: PPUSH
24592: PPUSH
24593: PPUSH
24594: PPUSH
24595: PPUSH
24596: PPUSH
24597: PPUSH
24598: PPUSH
24599: PPUSH
24600: PPUSH
24601: PPUSH
24602: PPUSH
24603: PPUSH
24604: PPUSH
24605: PPUSH
24606: PPUSH
24607: PPUSH
24608: PPUSH
24609: PPUSH
24610: PPUSH
24611: PPUSH
24612: PPUSH
24613: PPUSH
24614: PPUSH
24615: PPUSH
24616: PPUSH
24617: PPUSH
24618: PPUSH
24619: PPUSH
24620: PPUSH
24621: PPUSH
24622: PPUSH
24623: PPUSH
// result = [ ] ;
24624: LD_ADDR_VAR 0 7
24628: PUSH
24629: EMPTY
24630: ST_TO_ADDR
// temp_list = [ ] ;
24631: LD_ADDR_VAR 0 9
24635: PUSH
24636: EMPTY
24637: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24638: LD_VAR 0 4
24642: PUSH
24643: LD_INT 0
24645: PUSH
24646: LD_INT 1
24648: PUSH
24649: LD_INT 2
24651: PUSH
24652: LD_INT 3
24654: PUSH
24655: LD_INT 4
24657: PUSH
24658: LD_INT 5
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: IN
24669: NOT
24670: IFTRUE 24713
24672: PUSH
24673: LD_VAR 0 1
24677: PUSH
24678: LD_INT 0
24680: PUSH
24681: LD_INT 1
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: IN
24688: IFFALSE 24712
24690: PUSH
24691: LD_VAR 0 5
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: LD_INT 2
24701: PUSH
24702: LD_INT 3
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: LIST
24709: IN
24710: NOT
24711: AND
24712: OR
24713: IFFALSE 24717
// exit ;
24715: GO 43116
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24717: LD_VAR 0 1
24721: PUSH
24722: LD_INT 6
24724: PUSH
24725: LD_INT 7
24727: PUSH
24728: LD_INT 8
24730: PUSH
24731: LD_INT 13
24733: PUSH
24734: LD_INT 12
24736: PUSH
24737: LD_INT 15
24739: PUSH
24740: LD_INT 11
24742: PUSH
24743: LD_INT 14
24745: PUSH
24746: LD_INT 10
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: IN
24760: IFFALSE 24770
// btype = b_lab ;
24762: LD_ADDR_VAR 0 1
24766: PUSH
24767: LD_INT 6
24769: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24770: LD_VAR 0 6
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: LD_INT 2
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: LIST
24788: IN
24789: NOT
24790: IFTRUE 24858
24792: PUSH
24793: LD_VAR 0 1
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: LD_INT 2
24806: PUSH
24807: LD_INT 3
24809: PUSH
24810: LD_INT 6
24812: PUSH
24813: LD_INT 36
24815: PUSH
24816: LD_INT 4
24818: PUSH
24819: LD_INT 5
24821: PUSH
24822: LD_INT 31
24824: PUSH
24825: LD_INT 32
24827: PUSH
24828: LD_INT 33
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: IN
24844: NOT
24845: IFFALSE 24857
24847: PUSH
24848: LD_VAR 0 6
24852: PUSH
24853: LD_INT 1
24855: EQUAL
24856: AND
24857: OR
24858: IFTRUE 24890
24860: PUSH
24861: LD_VAR 0 1
24865: PUSH
24866: LD_INT 2
24868: PUSH
24869: LD_INT 3
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: IN
24876: NOT
24877: IFFALSE 24889
24879: PUSH
24880: LD_VAR 0 6
24884: PUSH
24885: LD_INT 2
24887: EQUAL
24888: AND
24889: OR
24890: IFFALSE 24900
// mode = 0 ;
24892: LD_ADDR_VAR 0 6
24896: PUSH
24897: LD_INT 0
24899: ST_TO_ADDR
// case mode of 0 :
24900: LD_VAR 0 6
24904: PUSH
24905: LD_INT 0
24907: DOUBLE
24908: EQUAL
24909: IFTRUE 24913
24911: GO 36366
24913: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24914: LD_ADDR_VAR 0 11
24918: PUSH
24919: LD_INT 0
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: LD_INT 1
24934: NEG
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 1
24942: PUSH
24943: LD_INT 0
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 1
24952: PUSH
24953: LD_INT 1
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: LD_INT 1
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 1
24972: NEG
24973: PUSH
24974: LD_INT 0
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 1
24983: NEG
24984: PUSH
24985: LD_INT 1
24987: NEG
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 1
24995: NEG
24996: PUSH
24997: LD_INT 2
24999: NEG
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 0
25007: PUSH
25008: LD_INT 2
25010: NEG
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 1
25018: PUSH
25019: LD_INT 1
25021: NEG
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 1
25029: PUSH
25030: LD_INT 2
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 0
25039: PUSH
25040: LD_INT 2
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 1
25049: NEG
25050: PUSH
25051: LD_INT 1
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 1
25060: PUSH
25061: LD_INT 3
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 0
25070: PUSH
25071: LD_INT 3
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 1
25080: NEG
25081: PUSH
25082: LD_INT 2
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25107: LD_ADDR_VAR 0 12
25111: PUSH
25112: LD_INT 0
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: LD_INT 1
25127: NEG
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: LD_INT 0
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 1
25145: PUSH
25146: LD_INT 1
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 1
25165: NEG
25166: PUSH
25167: LD_INT 0
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: LD_INT 1
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: LD_INT 1
25191: NEG
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 2
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 2
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 1
25219: NEG
25220: PUSH
25221: LD_INT 1
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 2
25230: NEG
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 2
25241: NEG
25242: PUSH
25243: LD_INT 1
25245: NEG
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 2
25253: NEG
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 3
25264: NEG
25265: PUSH
25266: LD_INT 0
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 3
25275: NEG
25276: PUSH
25277: LD_INT 1
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25303: LD_ADDR_VAR 0 13
25307: PUSH
25308: LD_INT 0
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 0
25320: PUSH
25321: LD_INT 1
25323: NEG
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: LD_INT 0
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: LD_INT 1
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 0
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: NEG
25362: PUSH
25363: LD_INT 0
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 1
25372: NEG
25373: PUSH
25374: LD_INT 1
25376: NEG
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 1
25384: NEG
25385: PUSH
25386: LD_INT 2
25388: NEG
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 2
25396: PUSH
25397: LD_INT 1
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: LD_INT 2
25406: PUSH
25407: LD_INT 2
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: LD_INT 2
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 2
25426: NEG
25427: PUSH
25428: LD_INT 1
25430: NEG
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 2
25438: NEG
25439: PUSH
25440: LD_INT 2
25442: NEG
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 2
25450: NEG
25451: PUSH
25452: LD_INT 3
25454: NEG
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 3
25462: NEG
25463: PUSH
25464: LD_INT 2
25466: NEG
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 3
25474: NEG
25475: PUSH
25476: LD_INT 3
25478: NEG
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25502: LD_ADDR_VAR 0 14
25506: PUSH
25507: LD_INT 0
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: LD_INT 1
25522: NEG
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 1
25530: PUSH
25531: LD_INT 0
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: LD_INT 1
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 0
25550: PUSH
25551: LD_INT 1
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 1
25560: NEG
25561: PUSH
25562: LD_INT 0
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 1
25571: NEG
25572: PUSH
25573: LD_INT 1
25575: NEG
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: PUSH
25585: LD_INT 2
25587: NEG
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 0
25595: PUSH
25596: LD_INT 2
25598: NEG
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 1
25606: PUSH
25607: LD_INT 1
25609: NEG
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: LD_INT 2
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 0
25627: PUSH
25628: LD_INT 2
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 1
25637: NEG
25638: PUSH
25639: LD_INT 1
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 1
25648: NEG
25649: PUSH
25650: LD_INT 3
25652: NEG
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 0
25660: PUSH
25661: LD_INT 3
25663: NEG
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: LD_INT 2
25674: NEG
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25698: LD_ADDR_VAR 0 15
25702: PUSH
25703: LD_INT 0
25705: PUSH
25706: LD_INT 0
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 0
25715: PUSH
25716: LD_INT 1
25718: NEG
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 1
25726: PUSH
25727: LD_INT 0
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: LD_INT 1
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 0
25746: PUSH
25747: LD_INT 1
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 1
25756: NEG
25757: PUSH
25758: LD_INT 0
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 1
25767: NEG
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 1
25779: PUSH
25780: LD_INT 1
25782: NEG
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 2
25790: PUSH
25791: LD_INT 0
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 2
25800: PUSH
25801: LD_INT 1
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 1
25810: NEG
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 2
25821: NEG
25822: PUSH
25823: LD_INT 0
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 2
25832: NEG
25833: PUSH
25834: LD_INT 1
25836: NEG
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 2
25844: PUSH
25845: LD_INT 1
25847: NEG
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 3
25855: PUSH
25856: LD_INT 0
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 3
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25891: LD_ADDR_VAR 0 16
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: LD_INT 1
25911: NEG
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: LD_INT 0
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 1
25929: PUSH
25930: LD_INT 1
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 0
25939: PUSH
25940: LD_INT 1
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 1
25949: NEG
25950: PUSH
25951: LD_INT 0
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 1
25960: NEG
25961: PUSH
25962: LD_INT 1
25964: NEG
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 1
25972: NEG
25973: PUSH
25974: LD_INT 2
25976: NEG
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 2
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 2
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 1
26004: PUSH
26005: LD_INT 2
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 2
26014: NEG
26015: PUSH
26016: LD_INT 1
26018: NEG
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 2
26026: NEG
26027: PUSH
26028: LD_INT 2
26030: NEG
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 3
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 3
26048: PUSH
26049: LD_INT 3
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 2
26058: PUSH
26059: LD_INT 3
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26084: LD_ADDR_VAR 0 17
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 0
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 1
26142: NEG
26143: PUSH
26144: LD_INT 0
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 1
26165: NEG
26166: PUSH
26167: LD_INT 2
26169: NEG
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 0
26177: PUSH
26178: LD_INT 2
26180: NEG
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 2
26199: PUSH
26200: LD_INT 0
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 2
26209: PUSH
26210: LD_INT 1
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 2
26219: PUSH
26220: LD_INT 2
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: LD_INT 2
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: LD_INT 2
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 2
26260: NEG
26261: PUSH
26262: LD_INT 0
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 2
26271: NEG
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 2
26283: NEG
26284: PUSH
26285: LD_INT 2
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26314: LD_ADDR_VAR 0 18
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: LD_INT 0
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: LD_INT 1
26334: NEG
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: LD_INT 0
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 0
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 1
26372: NEG
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 1
26383: NEG
26384: PUSH
26385: LD_INT 1
26387: NEG
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: NEG
26396: PUSH
26397: LD_INT 2
26399: NEG
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: LD_INT 2
26410: NEG
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 1
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 2
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 2
26439: PUSH
26440: LD_INT 1
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 2
26449: PUSH
26450: LD_INT 2
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: LD_INT 2
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 2
26490: NEG
26491: PUSH
26492: LD_INT 0
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 2
26501: NEG
26502: PUSH
26503: LD_INT 1
26505: NEG
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 2
26513: NEG
26514: PUSH
26515: LD_INT 2
26517: NEG
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26544: LD_ADDR_VAR 0 19
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: LD_INT 0
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 1
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 1
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: NEG
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 1
26613: NEG
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 1
26625: NEG
26626: PUSH
26627: LD_INT 2
26629: NEG
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: LD_INT 2
26640: NEG
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 1
26648: PUSH
26649: LD_INT 1
26651: NEG
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 2
26659: PUSH
26660: LD_INT 0
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 2
26669: PUSH
26670: LD_INT 1
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 2
26679: PUSH
26680: LD_INT 2
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 1
26689: PUSH
26690: LD_INT 2
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 0
26699: PUSH
26700: LD_INT 2
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 1
26709: NEG
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 2
26720: NEG
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 2
26731: NEG
26732: PUSH
26733: LD_INT 1
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 2
26743: NEG
26744: PUSH
26745: LD_INT 2
26747: NEG
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26774: LD_ADDR_VAR 0 20
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: LD_INT 0
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 0
26791: PUSH
26792: LD_INT 1
26794: NEG
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 1
26802: PUSH
26803: LD_INT 0
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 1
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 0
26822: PUSH
26823: LD_INT 1
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 1
26843: NEG
26844: PUSH
26845: LD_INT 1
26847: NEG
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 1
26855: NEG
26856: PUSH
26857: LD_INT 2
26859: NEG
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 0
26867: PUSH
26868: LD_INT 2
26870: NEG
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 1
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 2
26889: PUSH
26890: LD_INT 0
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 2
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 2
26909: PUSH
26910: LD_INT 2
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 1
26919: PUSH
26920: LD_INT 2
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 0
26929: PUSH
26930: LD_INT 2
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 1
26939: NEG
26940: PUSH
26941: LD_INT 1
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 2
26950: NEG
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 2
26961: NEG
26962: PUSH
26963: LD_INT 1
26965: NEG
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 2
26973: NEG
26974: PUSH
26975: LD_INT 2
26977: NEG
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27004: LD_ADDR_VAR 0 21
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: LD_INT 0
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: LD_INT 1
27024: NEG
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 1
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 1
27042: PUSH
27043: LD_INT 1
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 1
27062: NEG
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: LD_INT 1
27077: NEG
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 1
27085: NEG
27086: PUSH
27087: LD_INT 2
27089: NEG
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 0
27097: PUSH
27098: LD_INT 2
27100: NEG
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: LD_INT 1
27111: NEG
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 2
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 2
27129: PUSH
27130: LD_INT 1
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 2
27139: PUSH
27140: LD_INT 2
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 1
27149: PUSH
27150: LD_INT 2
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 0
27159: PUSH
27160: LD_INT 2
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 1
27169: NEG
27170: PUSH
27171: LD_INT 1
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 2
27180: NEG
27181: PUSH
27182: LD_INT 0
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 2
27191: NEG
27192: PUSH
27193: LD_INT 1
27195: NEG
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 2
27203: NEG
27204: PUSH
27205: LD_INT 2
27207: NEG
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27234: LD_ADDR_VAR 0 22
27238: PUSH
27239: LD_INT 0
27241: PUSH
27242: LD_INT 0
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: LD_INT 1
27254: NEG
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 1
27262: PUSH
27263: LD_INT 0
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: LD_INT 1
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 0
27282: PUSH
27283: LD_INT 1
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 1
27292: NEG
27293: PUSH
27294: LD_INT 0
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 1
27303: NEG
27304: PUSH
27305: LD_INT 1
27307: NEG
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 1
27315: NEG
27316: PUSH
27317: LD_INT 2
27319: NEG
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 0
27327: PUSH
27328: LD_INT 2
27330: NEG
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: LD_INT 1
27341: NEG
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 2
27349: PUSH
27350: LD_INT 0
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 2
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 2
27369: PUSH
27370: LD_INT 2
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: LD_INT 2
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: LD_INT 2
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 1
27399: NEG
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 2
27410: NEG
27411: PUSH
27412: LD_INT 0
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 2
27421: NEG
27422: PUSH
27423: LD_INT 1
27425: NEG
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 2
27433: NEG
27434: PUSH
27435: LD_INT 2
27437: NEG
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27464: LD_ADDR_VAR 0 23
27468: PUSH
27469: LD_INT 0
27471: PUSH
27472: LD_INT 0
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 0
27481: PUSH
27482: LD_INT 1
27484: NEG
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: LD_INT 0
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: LD_INT 1
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: LD_INT 0
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 1
27533: NEG
27534: PUSH
27535: LD_INT 1
27537: NEG
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 1
27545: NEG
27546: PUSH
27547: LD_INT 2
27549: NEG
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: LD_INT 2
27560: NEG
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 1
27568: PUSH
27569: LD_INT 1
27571: NEG
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 2
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 2
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 2
27599: PUSH
27600: LD_INT 2
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: PUSH
27610: LD_INT 2
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: LD_INT 2
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 1
27629: NEG
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 2
27640: NEG
27641: PUSH
27642: LD_INT 0
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 2
27651: NEG
27652: PUSH
27653: LD_INT 1
27655: NEG
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 2
27663: NEG
27664: PUSH
27665: LD_INT 2
27667: NEG
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 2
27675: NEG
27676: PUSH
27677: LD_INT 3
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 1
27687: NEG
27688: PUSH
27689: LD_INT 3
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 1
27699: PUSH
27700: LD_INT 2
27702: NEG
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 2
27710: PUSH
27711: LD_INT 1
27713: NEG
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27744: LD_ADDR_VAR 0 24
27748: PUSH
27749: LD_INT 0
27751: PUSH
27752: LD_INT 0
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 0
27761: PUSH
27762: LD_INT 1
27764: NEG
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 1
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 1
27782: PUSH
27783: LD_INT 1
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 0
27792: PUSH
27793: LD_INT 1
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 1
27802: NEG
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 1
27813: NEG
27814: PUSH
27815: LD_INT 1
27817: NEG
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 1
27825: NEG
27826: PUSH
27827: LD_INT 2
27829: NEG
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: LD_INT 2
27840: NEG
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 1
27848: PUSH
27849: LD_INT 1
27851: NEG
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: LD_INT 0
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 2
27869: PUSH
27870: LD_INT 1
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 2
27879: PUSH
27880: LD_INT 2
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 1
27889: PUSH
27890: LD_INT 2
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: LD_INT 2
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 1
27909: NEG
27910: PUSH
27911: LD_INT 1
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 2
27920: NEG
27921: PUSH
27922: LD_INT 0
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 2
27931: NEG
27932: PUSH
27933: LD_INT 1
27935: NEG
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 2
27943: NEG
27944: PUSH
27945: LD_INT 2
27947: NEG
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 1
27955: PUSH
27956: LD_INT 2
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 2
27966: PUSH
27967: LD_INT 1
27969: NEG
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 3
27977: PUSH
27978: LD_INT 1
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 3
27987: PUSH
27988: LD_INT 2
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28020: LD_ADDR_VAR 0 25
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: LD_INT 0
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 0
28037: PUSH
28038: LD_INT 1
28040: NEG
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 1
28048: PUSH
28049: LD_INT 0
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: LD_INT 1
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 0
28068: PUSH
28069: LD_INT 1
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 1
28078: NEG
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 1
28089: NEG
28090: PUSH
28091: LD_INT 1
28093: NEG
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 1
28101: NEG
28102: PUSH
28103: LD_INT 2
28105: NEG
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 0
28113: PUSH
28114: LD_INT 2
28116: NEG
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: LD_INT 1
28127: NEG
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 2
28135: PUSH
28136: LD_INT 0
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 2
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 2
28155: PUSH
28156: LD_INT 2
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 1
28165: PUSH
28166: LD_INT 2
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 0
28175: PUSH
28176: LD_INT 2
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 1
28185: NEG
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 2
28196: NEG
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 2
28207: NEG
28208: PUSH
28209: LD_INT 1
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 2
28219: NEG
28220: PUSH
28221: LD_INT 2
28223: NEG
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 3
28231: PUSH
28232: LD_INT 1
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 3
28241: PUSH
28242: LD_INT 2
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: LD_INT 3
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 1
28261: PUSH
28262: LD_INT 3
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28294: LD_ADDR_VAR 0 26
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: LD_INT 0
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 0
28311: PUSH
28312: LD_INT 1
28314: NEG
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 1
28332: PUSH
28333: LD_INT 1
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: LD_INT 1
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 1
28352: NEG
28353: PUSH
28354: LD_INT 0
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 1
28363: NEG
28364: PUSH
28365: LD_INT 1
28367: NEG
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 1
28375: NEG
28376: PUSH
28377: LD_INT 2
28379: NEG
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: LD_INT 2
28390: NEG
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 1
28398: PUSH
28399: LD_INT 1
28401: NEG
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 2
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 2
28429: PUSH
28430: LD_INT 2
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 0
28449: PUSH
28450: LD_INT 2
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 1
28459: NEG
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 2
28470: NEG
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 2
28481: NEG
28482: PUSH
28483: LD_INT 1
28485: NEG
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 2
28493: NEG
28494: PUSH
28495: LD_INT 2
28497: NEG
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 2
28505: PUSH
28506: LD_INT 3
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 1
28515: PUSH
28516: LD_INT 3
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 1
28525: NEG
28526: PUSH
28527: LD_INT 2
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 2
28536: NEG
28537: PUSH
28538: LD_INT 1
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28570: LD_ADDR_VAR 0 27
28574: PUSH
28575: LD_INT 0
28577: PUSH
28578: LD_INT 0
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 0
28587: PUSH
28588: LD_INT 1
28590: NEG
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 1
28598: PUSH
28599: LD_INT 0
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: LD_INT 1
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 0
28618: PUSH
28619: LD_INT 1
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 1
28628: NEG
28629: PUSH
28630: LD_INT 0
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PUSH
28641: LD_INT 1
28643: NEG
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 1
28651: NEG
28652: PUSH
28653: LD_INT 2
28655: NEG
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: LD_INT 2
28666: NEG
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 1
28674: PUSH
28675: LD_INT 1
28677: NEG
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 2
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 2
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 2
28705: PUSH
28706: LD_INT 2
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: LD_INT 2
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: LD_INT 2
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 1
28735: NEG
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 2
28746: NEG
28747: PUSH
28748: LD_INT 0
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 2
28757: NEG
28758: PUSH
28759: LD_INT 1
28761: NEG
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 2
28769: NEG
28770: PUSH
28771: LD_INT 2
28773: NEG
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 1
28781: NEG
28782: PUSH
28783: LD_INT 2
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 2
28792: NEG
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 3
28803: NEG
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 3
28815: NEG
28816: PUSH
28817: LD_INT 2
28819: NEG
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28850: LD_ADDR_VAR 0 28
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: LD_INT 1
28870: NEG
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 1
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 1
28888: PUSH
28889: LD_INT 1
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: LD_INT 1
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 1
28908: NEG
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 1
28931: NEG
28932: PUSH
28933: LD_INT 2
28935: NEG
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 0
28943: PUSH
28944: LD_INT 2
28946: NEG
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 2
28965: PUSH
28966: LD_INT 0
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 2
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 2
28985: PUSH
28986: LD_INT 2
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: LD_INT 2
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 0
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 1
29015: NEG
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 2
29026: NEG
29027: PUSH
29028: LD_INT 0
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 2
29037: NEG
29038: PUSH
29039: LD_INT 1
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 2
29049: NEG
29050: PUSH
29051: LD_INT 2
29053: NEG
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 2
29061: NEG
29062: PUSH
29063: LD_INT 3
29065: NEG
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 1
29073: NEG
29074: PUSH
29075: LD_INT 3
29077: NEG
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 3
29085: NEG
29086: PUSH
29087: LD_INT 1
29089: NEG
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 3
29097: NEG
29098: PUSH
29099: LD_INT 2
29101: NEG
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29132: LD_ADDR_VAR 0 29
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 0
29149: PUSH
29150: LD_INT 1
29152: NEG
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 1
29160: PUSH
29161: LD_INT 0
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: LD_INT 1
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 0
29180: PUSH
29181: LD_INT 1
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 1
29190: NEG
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 1
29213: NEG
29214: PUSH
29215: LD_INT 2
29217: NEG
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: LD_INT 2
29228: NEG
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 1
29236: PUSH
29237: LD_INT 1
29239: NEG
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 2
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 2
29257: PUSH
29258: LD_INT 1
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 1
29267: PUSH
29268: LD_INT 2
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 0
29277: PUSH
29278: LD_INT 2
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 1
29287: NEG
29288: PUSH
29289: LD_INT 1
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 2
29298: NEG
29299: PUSH
29300: LD_INT 1
29302: NEG
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 2
29310: NEG
29311: PUSH
29312: LD_INT 2
29314: NEG
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 2
29322: NEG
29323: PUSH
29324: LD_INT 3
29326: NEG
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 2
29334: PUSH
29335: LD_INT 1
29337: NEG
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 3
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: LD_INT 3
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 1
29365: NEG
29366: PUSH
29367: LD_INT 2
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 3
29376: NEG
29377: PUSH
29378: LD_INT 2
29380: NEG
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29411: LD_ADDR_VAR 0 30
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: LD_INT 0
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 0
29428: PUSH
29429: LD_INT 1
29431: NEG
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 1
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 1
29449: PUSH
29450: LD_INT 1
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 0
29459: PUSH
29460: LD_INT 1
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 1
29469: NEG
29470: PUSH
29471: LD_INT 0
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 1
29480: NEG
29481: PUSH
29482: LD_INT 1
29484: NEG
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 1
29492: NEG
29493: PUSH
29494: LD_INT 2
29496: NEG
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 0
29504: PUSH
29505: LD_INT 2
29507: NEG
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 1
29515: PUSH
29516: LD_INT 1
29518: NEG
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 2
29526: PUSH
29527: LD_INT 0
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 2
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 2
29546: PUSH
29547: LD_INT 2
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 1
29556: PUSH
29557: LD_INT 2
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: LD_INT 1
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 2
29577: NEG
29578: PUSH
29579: LD_INT 0
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 2
29588: NEG
29589: PUSH
29590: LD_INT 1
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 1
29600: NEG
29601: PUSH
29602: LD_INT 3
29604: NEG
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 1
29612: PUSH
29613: LD_INT 2
29615: NEG
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: LD_INT 2
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 2
29633: PUSH
29634: LD_INT 3
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 2
29643: NEG
29644: PUSH
29645: LD_INT 1
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 3
29654: NEG
29655: PUSH
29656: LD_INT 1
29658: NEG
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29689: LD_ADDR_VAR 0 31
29693: PUSH
29694: LD_INT 0
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 0
29706: PUSH
29707: LD_INT 1
29709: NEG
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: PUSH
29728: LD_INT 1
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 0
29737: PUSH
29738: LD_INT 1
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 1
29747: NEG
29748: PUSH
29749: LD_INT 0
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 1
29758: NEG
29759: PUSH
29760: LD_INT 1
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 1
29770: NEG
29771: PUSH
29772: LD_INT 2
29774: NEG
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 1
29782: PUSH
29783: LD_INT 1
29785: NEG
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 2
29793: PUSH
29794: LD_INT 0
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 2
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: LD_INT 2
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: LD_INT 2
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 1
29843: NEG
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 2
29854: NEG
29855: PUSH
29856: LD_INT 1
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 2
29866: NEG
29867: PUSH
29868: LD_INT 2
29870: NEG
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 2
29878: NEG
29879: PUSH
29880: LD_INT 3
29882: NEG
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 2
29890: PUSH
29891: LD_INT 1
29893: NEG
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 3
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 1
29911: PUSH
29912: LD_INT 3
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 1
29921: NEG
29922: PUSH
29923: LD_INT 2
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 3
29932: NEG
29933: PUSH
29934: LD_INT 2
29936: NEG
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29967: LD_ADDR_VAR 0 32
29971: PUSH
29972: LD_INT 0
29974: PUSH
29975: LD_INT 0
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 0
29984: PUSH
29985: LD_INT 1
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 1
29995: PUSH
29996: LD_INT 0
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 1
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 0
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 1
30025: NEG
30026: PUSH
30027: LD_INT 0
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 1
30036: NEG
30037: PUSH
30038: LD_INT 1
30040: NEG
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 1
30048: NEG
30049: PUSH
30050: LD_INT 2
30052: NEG
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 0
30060: PUSH
30061: LD_INT 2
30063: NEG
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 1
30071: PUSH
30072: LD_INT 1
30074: NEG
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 2
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 2
30092: PUSH
30093: LD_INT 2
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 1
30102: PUSH
30103: LD_INT 2
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 0
30112: PUSH
30113: LD_INT 2
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 1
30122: NEG
30123: PUSH
30124: LD_INT 1
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 2
30133: NEG
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 2
30144: NEG
30145: PUSH
30146: LD_INT 1
30148: NEG
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 1
30156: NEG
30157: PUSH
30158: LD_INT 3
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 1
30168: PUSH
30169: LD_INT 2
30171: NEG
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 3
30179: PUSH
30180: LD_INT 2
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 2
30189: PUSH
30190: LD_INT 3
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 2
30199: NEG
30200: PUSH
30201: LD_INT 1
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 3
30210: NEG
30211: PUSH
30212: LD_INT 1
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30245: LD_ADDR_VAR 0 33
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: LD_INT 0
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 0
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: LD_INT 0
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 1
30283: PUSH
30284: LD_INT 1
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 0
30293: PUSH
30294: LD_INT 1
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 1
30314: NEG
30315: PUSH
30316: LD_INT 1
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: LD_INT 2
30330: NEG
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 1
30338: PUSH
30339: LD_INT 1
30341: NEG
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 2
30349: PUSH
30350: LD_INT 0
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: LD_INT 1
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 1
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 0
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 1
30389: NEG
30390: PUSH
30391: LD_INT 1
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 2
30400: NEG
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 2
30411: NEG
30412: PUSH
30413: LD_INT 1
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 2
30423: NEG
30424: PUSH
30425: LD_INT 2
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 2
30435: NEG
30436: PUSH
30437: LD_INT 3
30439: NEG
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 2
30447: PUSH
30448: LD_INT 1
30450: NEG
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 3
30458: PUSH
30459: LD_INT 1
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: LD_INT 3
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 1
30478: NEG
30479: PUSH
30480: LD_INT 2
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 3
30489: NEG
30490: PUSH
30491: LD_INT 2
30493: NEG
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30524: LD_ADDR_VAR 0 34
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: LD_INT 0
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 0
30541: PUSH
30542: LD_INT 1
30544: NEG
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: LD_INT 0
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 1
30562: PUSH
30563: LD_INT 1
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: LD_INT 1
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: LD_INT 0
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 1
30593: NEG
30594: PUSH
30595: LD_INT 1
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 1
30605: NEG
30606: PUSH
30607: LD_INT 2
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 0
30617: PUSH
30618: LD_INT 2
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 1
30628: PUSH
30629: LD_INT 1
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 2
30639: PUSH
30640: LD_INT 1
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: LD_INT 2
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 1
30659: PUSH
30660: LD_INT 2
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 1
30669: NEG
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 2
30680: NEG
30681: PUSH
30682: LD_INT 0
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 2
30691: NEG
30692: PUSH
30693: LD_INT 1
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 2
30703: NEG
30704: PUSH
30705: LD_INT 2
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 1
30715: NEG
30716: PUSH
30717: LD_INT 3
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: PUSH
30728: LD_INT 2
30730: NEG
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 3
30738: PUSH
30739: LD_INT 2
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 2
30748: PUSH
30749: LD_INT 3
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 2
30758: NEG
30759: PUSH
30760: LD_INT 1
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 3
30769: NEG
30770: PUSH
30771: LD_INT 1
30773: NEG
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30804: LD_ADDR_VAR 0 35
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: LD_INT 0
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: LD_INT 1
30824: NEG
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 1
30862: NEG
30863: PUSH
30864: LD_INT 0
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 1
30873: NEG
30874: PUSH
30875: LD_INT 1
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 2
30885: PUSH
30886: LD_INT 1
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 2
30895: NEG
30896: PUSH
30897: LD_INT 1
30899: NEG
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30916: LD_ADDR_VAR 0 36
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: LD_INT 0
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 0
30933: PUSH
30934: LD_INT 1
30936: NEG
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 1
30944: PUSH
30945: LD_INT 0
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 1
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 0
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: LD_INT 0
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 1
30985: NEG
30986: PUSH
30987: LD_INT 1
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 1
30997: NEG
30998: PUSH
30999: LD_INT 2
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 1
31009: PUSH
31010: LD_INT 2
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31028: LD_ADDR_VAR 0 37
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: LD_INT 1
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 1
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 1
31097: NEG
31098: PUSH
31099: LD_INT 1
31101: NEG
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31140: LD_ADDR_VAR 0 38
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: LD_INT 0
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 0
31157: PUSH
31158: LD_INT 1
31160: NEG
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 0
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 1
31198: NEG
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 1
31209: NEG
31210: PUSH
31211: LD_INT 1
31213: NEG
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 2
31221: PUSH
31222: LD_INT 1
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 2
31231: NEG
31232: PUSH
31233: LD_INT 1
31235: NEG
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31252: LD_ADDR_VAR 0 39
31256: PUSH
31257: LD_INT 0
31259: PUSH
31260: LD_INT 0
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 0
31269: PUSH
31270: LD_INT 1
31272: NEG
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 1
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 0
31300: PUSH
31301: LD_INT 1
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 1
31310: NEG
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 1
31321: NEG
31322: PUSH
31323: LD_INT 1
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: LD_INT 2
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: LD_INT 2
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31364: LD_ADDR_VAR 0 40
31368: PUSH
31369: LD_INT 0
31371: PUSH
31372: LD_INT 0
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 0
31381: PUSH
31382: LD_INT 1
31384: NEG
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: LD_INT 0
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 1
31402: PUSH
31403: LD_INT 1
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 1
31422: NEG
31423: PUSH
31424: LD_INT 0
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 1
31433: NEG
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 1
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 1
31456: NEG
31457: PUSH
31458: LD_INT 1
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31476: LD_ADDR_VAR 0 41
31480: PUSH
31481: LD_INT 0
31483: PUSH
31484: LD_INT 0
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 0
31493: PUSH
31494: LD_INT 1
31496: NEG
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: LD_INT 0
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 1
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 0
31524: PUSH
31525: LD_INT 1
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 1
31534: NEG
31535: PUSH
31536: LD_INT 0
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 1
31545: NEG
31546: PUSH
31547: LD_INT 1
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 1
31557: NEG
31558: PUSH
31559: LD_INT 2
31561: NEG
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: LD_INT 1
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 2
31580: PUSH
31581: LD_INT 0
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 2
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 2
31600: PUSH
31601: LD_INT 2
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 1
31610: PUSH
31611: LD_INT 2
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 1
31620: NEG
31621: PUSH
31622: LD_INT 1
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 2
31631: NEG
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 2
31642: NEG
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 2
31654: NEG
31655: PUSH
31656: LD_INT 2
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 2
31666: NEG
31667: PUSH
31668: LD_INT 3
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 2
31678: PUSH
31679: LD_INT 1
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 3
31689: PUSH
31690: LD_INT 0
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 3
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 3
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 3
31719: PUSH
31720: LD_INT 3
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 2
31729: PUSH
31730: LD_INT 3
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 2
31739: NEG
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 3
31750: NEG
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 3
31761: NEG
31762: PUSH
31763: LD_INT 1
31765: NEG
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 3
31773: NEG
31774: PUSH
31775: LD_INT 2
31777: NEG
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 3
31785: NEG
31786: PUSH
31787: LD_INT 3
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31826: LD_ADDR_VAR 0 42
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 0
31843: PUSH
31844: LD_INT 1
31846: NEG
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 1
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 0
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 1
31884: NEG
31885: PUSH
31886: LD_INT 0
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: LD_INT 1
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: LD_INT 2
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 0
31919: PUSH
31920: LD_INT 2
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 1
31930: PUSH
31931: LD_INT 1
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 2
31941: PUSH
31942: LD_INT 1
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 2
31951: PUSH
31952: LD_INT 2
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: LD_INT 2
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 0
31971: PUSH
31972: LD_INT 2
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 1
31981: NEG
31982: PUSH
31983: LD_INT 1
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 2
31992: NEG
31993: PUSH
31994: LD_INT 1
31996: NEG
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 2
32004: NEG
32005: PUSH
32006: LD_INT 2
32008: NEG
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 2
32016: NEG
32017: PUSH
32018: LD_INT 3
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 1
32028: NEG
32029: PUSH
32030: LD_INT 3
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: LD_INT 3
32043: NEG
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 1
32051: PUSH
32052: LD_INT 2
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 3
32062: PUSH
32063: LD_INT 2
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 3
32072: PUSH
32073: LD_INT 3
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: LD_INT 3
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 1
32092: PUSH
32093: LD_INT 3
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 0
32102: PUSH
32103: LD_INT 3
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 1
32112: NEG
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 3
32123: NEG
32124: PUSH
32125: LD_INT 2
32127: NEG
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 3
32135: NEG
32136: PUSH
32137: LD_INT 3
32139: NEG
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32176: LD_ADDR_VAR 0 43
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 1
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: LD_INT 1
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 0
32224: PUSH
32225: LD_INT 1
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 1
32234: NEG
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: LD_INT 2
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 0
32269: PUSH
32270: LD_INT 2
32272: NEG
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: LD_INT 1
32283: NEG
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: LD_INT 0
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 2
32301: PUSH
32302: LD_INT 1
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 1
32311: PUSH
32312: LD_INT 2
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 0
32321: PUSH
32322: LD_INT 2
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 1
32331: NEG
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 2
32342: NEG
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 2
32353: NEG
32354: PUSH
32355: LD_INT 1
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: PUSH
32367: LD_INT 3
32369: NEG
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 0
32377: PUSH
32378: LD_INT 3
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 1
32388: PUSH
32389: LD_INT 2
32391: NEG
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 2
32399: PUSH
32400: LD_INT 1
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 3
32410: PUSH
32411: LD_INT 0
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 3
32420: PUSH
32421: LD_INT 1
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 1
32430: PUSH
32431: LD_INT 3
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: LD_INT 3
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: LD_INT 2
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 2
32461: NEG
32462: PUSH
32463: LD_INT 1
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 3
32472: NEG
32473: PUSH
32474: LD_INT 0
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 3
32483: NEG
32484: PUSH
32485: LD_INT 1
32487: NEG
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32524: LD_ADDR_VAR 0 44
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 0
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 1
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 0
32572: PUSH
32573: LD_INT 1
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 1
32582: NEG
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: LD_INT 1
32597: NEG
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 1
32605: NEG
32606: PUSH
32607: LD_INT 2
32609: NEG
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: LD_INT 1
32620: NEG
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 2
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 2
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: PUSH
32649: LD_INT 2
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 1
32658: PUSH
32659: LD_INT 2
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 1
32668: NEG
32669: PUSH
32670: LD_INT 1
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 2
32679: NEG
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 2
32690: NEG
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 2
32702: NEG
32703: PUSH
32704: LD_INT 2
32706: NEG
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 2
32714: NEG
32715: PUSH
32716: LD_INT 3
32718: NEG
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 2
32726: PUSH
32727: LD_INT 1
32729: NEG
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 3
32737: PUSH
32738: LD_INT 0
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 3
32747: PUSH
32748: LD_INT 1
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 3
32757: PUSH
32758: LD_INT 2
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 3
32767: PUSH
32768: LD_INT 3
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: LD_INT 3
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 2
32787: NEG
32788: PUSH
32789: LD_INT 1
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 3
32798: NEG
32799: PUSH
32800: LD_INT 0
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 3
32809: NEG
32810: PUSH
32811: LD_INT 1
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 3
32821: NEG
32822: PUSH
32823: LD_INT 2
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 3
32833: NEG
32834: PUSH
32835: LD_INT 3
32837: NEG
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32874: LD_ADDR_VAR 0 45
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: LD_INT 0
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 0
32891: PUSH
32892: LD_INT 1
32894: NEG
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 1
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: LD_INT 1
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 1
32932: NEG
32933: PUSH
32934: LD_INT 0
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: LD_INT 1
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: LD_INT 2
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 0
32967: PUSH
32968: LD_INT 2
32970: NEG
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: LD_INT 1
32981: NEG
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 2
32989: PUSH
32990: LD_INT 1
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 2
32999: PUSH
33000: LD_INT 2
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: LD_INT 2
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 0
33019: PUSH
33020: LD_INT 2
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: NEG
33030: PUSH
33031: LD_INT 1
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 2
33040: NEG
33041: PUSH
33042: LD_INT 1
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 2
33052: NEG
33053: PUSH
33054: LD_INT 2
33056: NEG
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 2
33064: NEG
33065: PUSH
33066: LD_INT 3
33068: NEG
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: NEG
33077: PUSH
33078: LD_INT 3
33080: NEG
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 0
33088: PUSH
33089: LD_INT 3
33091: NEG
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 1
33099: PUSH
33100: LD_INT 2
33102: NEG
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 3
33110: PUSH
33111: LD_INT 2
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 3
33120: PUSH
33121: LD_INT 3
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 2
33130: PUSH
33131: LD_INT 3
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 1
33140: PUSH
33141: LD_INT 3
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 0
33150: PUSH
33151: LD_INT 3
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 1
33160: NEG
33161: PUSH
33162: LD_INT 2
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 3
33171: NEG
33172: PUSH
33173: LD_INT 2
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 3
33183: NEG
33184: PUSH
33185: LD_INT 3
33187: NEG
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33224: LD_ADDR_VAR 0 46
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: LD_INT 0
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 0
33241: PUSH
33242: LD_INT 1
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 1
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 1
33262: PUSH
33263: LD_INT 1
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 0
33272: PUSH
33273: LD_INT 1
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 1
33282: NEG
33283: PUSH
33284: LD_INT 0
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: LD_INT 1
33297: NEG
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 1
33305: NEG
33306: PUSH
33307: LD_INT 2
33309: NEG
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 0
33317: PUSH
33318: LD_INT 2
33320: NEG
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 1
33328: PUSH
33329: LD_INT 1
33331: NEG
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 2
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 2
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 1
33359: PUSH
33360: LD_INT 2
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: LD_INT 2
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: NEG
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 2
33390: NEG
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 2
33401: NEG
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 1
33413: NEG
33414: PUSH
33415: LD_INT 3
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 0
33425: PUSH
33426: LD_INT 3
33428: NEG
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 1
33436: PUSH
33437: LD_INT 2
33439: NEG
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 2
33447: PUSH
33448: LD_INT 1
33450: NEG
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 3
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 3
33468: PUSH
33469: LD_INT 1
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: LD_INT 3
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 0
33488: PUSH
33489: LD_INT 3
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 1
33498: NEG
33499: PUSH
33500: LD_INT 2
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 2
33509: NEG
33510: PUSH
33511: LD_INT 1
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 3
33520: NEG
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 3
33531: NEG
33532: PUSH
33533: LD_INT 1
33535: NEG
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33572: LD_ADDR_VAR 0 47
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: LD_INT 0
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 0
33589: PUSH
33590: LD_INT 1
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: LD_INT 0
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 0
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 1
33630: NEG
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 1
33641: NEG
33642: PUSH
33643: LD_INT 1
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 1
33653: NEG
33654: PUSH
33655: LD_INT 2
33657: NEG
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 0
33665: PUSH
33666: LD_INT 2
33668: NEG
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 1
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 2
33687: NEG
33688: PUSH
33689: LD_INT 1
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 2
33699: NEG
33700: PUSH
33701: LD_INT 2
33703: NEG
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33723: LD_ADDR_VAR 0 48
33727: PUSH
33728: LD_INT 0
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 0
33740: PUSH
33741: LD_INT 1
33743: NEG
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 1
33761: PUSH
33762: LD_INT 1
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 0
33771: PUSH
33772: LD_INT 1
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 1
33781: NEG
33782: PUSH
33783: LD_INT 0
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 1
33792: NEG
33793: PUSH
33794: LD_INT 1
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 1
33804: NEG
33805: PUSH
33806: LD_INT 2
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: LD_INT 2
33819: NEG
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 1
33827: PUSH
33828: LD_INT 1
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 2
33838: PUSH
33839: LD_INT 0
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 2
33848: PUSH
33849: LD_INT 1
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33870: LD_ADDR_VAR 0 49
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 0
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: LD_INT 1
33890: NEG
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: PUSH
33899: LD_INT 0
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 1
33908: PUSH
33909: LD_INT 1
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 0
33918: PUSH
33919: LD_INT 1
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 1
33928: NEG
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 1
33939: NEG
33940: PUSH
33941: LD_INT 1
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: LD_INT 1
33954: NEG
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 2
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 2
33972: PUSH
33973: LD_INT 1
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 2
33982: PUSH
33983: LD_INT 2
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 1
33992: PUSH
33993: LD_INT 2
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34014: LD_ADDR_VAR 0 50
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 0
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 0
34031: PUSH
34032: LD_INT 1
34034: NEG
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 0
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 1
34072: NEG
34073: PUSH
34074: LD_INT 0
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 1
34083: NEG
34084: PUSH
34085: LD_INT 1
34087: NEG
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 2
34095: PUSH
34096: LD_INT 1
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 2
34105: PUSH
34106: LD_INT 2
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 1
34115: PUSH
34116: LD_INT 2
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 0
34125: PUSH
34126: LD_INT 2
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 1
34135: NEG
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34158: LD_ADDR_VAR 0 51
34162: PUSH
34163: LD_INT 0
34165: PUSH
34166: LD_INT 0
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 0
34175: PUSH
34176: LD_INT 1
34178: NEG
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 1
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 1
34196: PUSH
34197: LD_INT 1
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 0
34206: PUSH
34207: LD_INT 1
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 1
34216: NEG
34217: PUSH
34218: LD_INT 0
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: LD_INT 1
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 1
34239: PUSH
34240: LD_INT 2
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: LD_INT 2
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 1
34259: NEG
34260: PUSH
34261: LD_INT 1
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 2
34270: NEG
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 2
34281: NEG
34282: PUSH
34283: LD_INT 1
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34305: LD_ADDR_VAR 0 52
34309: PUSH
34310: LD_INT 0
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 0
34322: PUSH
34323: LD_INT 1
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 1
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 0
34353: PUSH
34354: LD_INT 1
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 1
34363: NEG
34364: PUSH
34365: LD_INT 0
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: LD_INT 1
34378: NEG
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: LD_INT 2
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 1
34398: NEG
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 2
34409: NEG
34410: PUSH
34411: LD_INT 0
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 2
34420: NEG
34421: PUSH
34422: LD_INT 1
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 2
34432: NEG
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34456: LD_ADDR_VAR 0 53
34460: PUSH
34461: LD_INT 0
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: LD_INT 1
34476: NEG
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 1
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 0
34504: PUSH
34505: LD_INT 1
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 1
34514: NEG
34515: PUSH
34516: LD_INT 0
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 1
34525: NEG
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 1
34537: NEG
34538: PUSH
34539: LD_INT 2
34541: NEG
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 0
34549: PUSH
34550: LD_INT 2
34552: NEG
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 1
34560: PUSH
34561: LD_INT 1
34563: NEG
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 2
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 2
34581: PUSH
34582: LD_INT 1
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 2
34591: PUSH
34592: LD_INT 2
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 1
34601: PUSH
34602: LD_INT 2
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 0
34611: PUSH
34612: LD_INT 2
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 1
34621: NEG
34622: PUSH
34623: LD_INT 1
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 2
34632: NEG
34633: PUSH
34634: LD_INT 0
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 2
34643: NEG
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 2
34655: NEG
34656: PUSH
34657: LD_INT 2
34659: NEG
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34686: LD_ADDR_VAR 0 54
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 0
34703: PUSH
34704: LD_INT 1
34706: NEG
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 1
34714: PUSH
34715: LD_INT 0
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 1
34724: PUSH
34725: LD_INT 1
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 0
34734: PUSH
34735: LD_INT 1
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 1
34744: NEG
34745: PUSH
34746: LD_INT 0
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 1
34755: NEG
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: NEG
34768: PUSH
34769: LD_INT 2
34771: NEG
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 0
34779: PUSH
34780: LD_INT 2
34782: NEG
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: LD_INT 1
34793: NEG
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 2
34801: PUSH
34802: LD_INT 0
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 2
34811: PUSH
34812: LD_INT 1
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 2
34821: PUSH
34822: LD_INT 2
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 1
34831: PUSH
34832: LD_INT 2
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 0
34841: PUSH
34842: LD_INT 2
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 1
34851: NEG
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 2
34862: NEG
34863: PUSH
34864: LD_INT 0
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 2
34873: NEG
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 2
34885: NEG
34886: PUSH
34887: LD_INT 2
34889: NEG
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34916: LD_ADDR_VAR 0 55
34920: PUSH
34921: LD_INT 0
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 0
34933: PUSH
34934: LD_INT 1
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 1
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: LD_INT 1
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 0
34964: PUSH
34965: LD_INT 1
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: NEG
34975: PUSH
34976: LD_INT 0
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 1
34985: NEG
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: NEG
34998: PUSH
34999: LD_INT 2
35001: NEG
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 0
35009: PUSH
35010: LD_INT 2
35012: NEG
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: LD_INT 1
35023: NEG
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 2
35031: PUSH
35032: LD_INT 0
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 2
35041: PUSH
35042: LD_INT 1
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 2
35051: PUSH
35052: LD_INT 2
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 1
35061: PUSH
35062: LD_INT 2
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: LD_INT 2
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 1
35081: NEG
35082: PUSH
35083: LD_INT 1
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 2
35092: NEG
35093: PUSH
35094: LD_INT 0
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 2
35103: NEG
35104: PUSH
35105: LD_INT 1
35107: NEG
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 2
35115: NEG
35116: PUSH
35117: LD_INT 2
35119: NEG
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35146: LD_ADDR_VAR 0 56
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 0
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: PUSH
35185: LD_INT 1
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 0
35194: PUSH
35195: LD_INT 1
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 1
35204: NEG
35205: PUSH
35206: LD_INT 0
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 1
35215: NEG
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 1
35227: NEG
35228: PUSH
35229: LD_INT 2
35231: NEG
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 0
35239: PUSH
35240: LD_INT 2
35242: NEG
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 1
35250: PUSH
35251: LD_INT 1
35253: NEG
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 2
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 2
35271: PUSH
35272: LD_INT 1
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 2
35281: PUSH
35282: LD_INT 2
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 1
35291: PUSH
35292: LD_INT 2
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 0
35301: PUSH
35302: LD_INT 2
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: PUSH
35313: LD_INT 1
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 2
35322: NEG
35323: PUSH
35324: LD_INT 0
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 2
35333: NEG
35334: PUSH
35335: LD_INT 1
35337: NEG
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 2
35345: NEG
35346: PUSH
35347: LD_INT 2
35349: NEG
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35376: LD_ADDR_VAR 0 57
35380: PUSH
35381: LD_INT 0
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: LD_INT 1
35396: NEG
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 1
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: PUSH
35415: LD_INT 1
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 0
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 1
35434: NEG
35435: PUSH
35436: LD_INT 0
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: LD_INT 1
35449: NEG
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 1
35457: NEG
35458: PUSH
35459: LD_INT 2
35461: NEG
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: LD_INT 2
35472: NEG
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 2
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 2
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: LD_INT 2
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 1
35521: PUSH
35522: LD_INT 2
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 0
35531: PUSH
35532: LD_INT 2
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 1
35541: NEG
35542: PUSH
35543: LD_INT 1
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 2
35552: NEG
35553: PUSH
35554: LD_INT 0
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 2
35563: NEG
35564: PUSH
35565: LD_INT 1
35567: NEG
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 2
35575: NEG
35576: PUSH
35577: LD_INT 2
35579: NEG
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35606: LD_ADDR_VAR 0 58
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: LD_INT 0
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 0
35623: PUSH
35624: LD_INT 1
35626: NEG
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 1
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 1
35644: PUSH
35645: LD_INT 1
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 1
35664: NEG
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: LD_INT 1
35679: NEG
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 1
35687: NEG
35688: PUSH
35689: LD_INT 2
35691: NEG
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: LD_INT 2
35702: NEG
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 1
35710: PUSH
35711: LD_INT 1
35713: NEG
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 2
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 2
35731: PUSH
35732: LD_INT 1
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 2
35741: PUSH
35742: LD_INT 2
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: LD_INT 2
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: LD_INT 2
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 1
35771: NEG
35772: PUSH
35773: LD_INT 1
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 2
35782: NEG
35783: PUSH
35784: LD_INT 0
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 2
35793: NEG
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 2
35805: NEG
35806: PUSH
35807: LD_INT 2
35809: NEG
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35836: LD_ADDR_VAR 0 59
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: LD_INT 0
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 0
35853: PUSH
35854: LD_INT 1
35856: NEG
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 1
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 0
35884: PUSH
35885: LD_INT 1
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: LD_INT 0
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 1
35905: NEG
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35924: LD_ADDR_VAR 0 60
35928: PUSH
35929: LD_INT 0
35931: PUSH
35932: LD_INT 0
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 0
35941: PUSH
35942: LD_INT 1
35944: NEG
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 1
35962: PUSH
35963: LD_INT 1
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 0
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 1
35982: NEG
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36012: LD_ADDR_VAR 0 61
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: LD_INT 0
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 0
36029: PUSH
36030: LD_INT 1
36032: NEG
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 1
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 0
36060: PUSH
36061: LD_INT 1
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 1
36070: NEG
36071: PUSH
36072: LD_INT 0
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 1
36081: NEG
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36100: LD_ADDR_VAR 0 62
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 0
36117: PUSH
36118: LD_INT 1
36120: NEG
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: LD_INT 0
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 1
36138: PUSH
36139: LD_INT 1
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 1
36169: NEG
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36188: LD_ADDR_VAR 0 63
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: LD_INT 1
36208: NEG
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: LD_INT 1
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 1
36246: NEG
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36276: LD_ADDR_VAR 0 64
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: LD_INT 0
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: LD_INT 1
36296: NEG
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 1
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 0
36324: PUSH
36325: LD_INT 1
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: NEG
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: NEG
36346: PUSH
36347: LD_INT 1
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: ST_TO_ADDR
// end ; 1 :
36364: GO 42261
36366: LD_INT 1
36368: DOUBLE
36369: EQUAL
36370: IFTRUE 36374
36372: GO 38997
36374: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36375: LD_ADDR_VAR 0 11
36379: PUSH
36380: LD_INT 1
36382: NEG
36383: PUSH
36384: LD_INT 3
36386: NEG
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 0
36394: PUSH
36395: LD_INT 3
36397: NEG
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 1
36405: PUSH
36406: LD_INT 2
36408: NEG
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: LIST
36418: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36419: LD_ADDR_VAR 0 12
36423: PUSH
36424: LD_INT 2
36426: PUSH
36427: LD_INT 1
36429: NEG
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 3
36437: PUSH
36438: LD_INT 0
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 3
36447: PUSH
36448: LD_INT 1
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: LIST
36459: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36460: LD_ADDR_VAR 0 13
36464: PUSH
36465: LD_INT 3
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 3
36477: PUSH
36478: LD_INT 3
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 2
36487: PUSH
36488: LD_INT 3
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: LIST
36499: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36500: LD_ADDR_VAR 0 14
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: LD_INT 3
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 0
36517: PUSH
36518: LD_INT 3
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 1
36527: NEG
36528: PUSH
36529: LD_INT 2
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: LIST
36540: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36541: LD_ADDR_VAR 0 15
36545: PUSH
36546: LD_INT 2
36548: NEG
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 3
36559: NEG
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 3
36570: NEG
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: LIST
36584: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36585: LD_ADDR_VAR 0 16
36589: PUSH
36590: LD_INT 2
36592: NEG
36593: PUSH
36594: LD_INT 3
36596: NEG
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 3
36604: NEG
36605: PUSH
36606: LD_INT 2
36608: NEG
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 3
36616: NEG
36617: PUSH
36618: LD_INT 3
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: LIST
36630: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36631: LD_ADDR_VAR 0 17
36635: PUSH
36636: LD_INT 1
36638: NEG
36639: PUSH
36640: LD_INT 3
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: LD_INT 3
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: LD_INT 2
36664: NEG
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: LIST
36674: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36675: LD_ADDR_VAR 0 18
36679: PUSH
36680: LD_INT 2
36682: PUSH
36683: LD_INT 1
36685: NEG
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 3
36693: PUSH
36694: LD_INT 0
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 3
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: LIST
36715: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36716: LD_ADDR_VAR 0 19
36720: PUSH
36721: LD_INT 3
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 3
36733: PUSH
36734: LD_INT 3
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 2
36743: PUSH
36744: LD_INT 3
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36756: LD_ADDR_VAR 0 20
36760: PUSH
36761: LD_INT 1
36763: PUSH
36764: LD_INT 3
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: LD_INT 3
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: NEG
36784: PUSH
36785: LD_INT 2
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: LIST
36796: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36797: LD_ADDR_VAR 0 21
36801: PUSH
36802: LD_INT 2
36804: NEG
36805: PUSH
36806: LD_INT 1
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 3
36815: NEG
36816: PUSH
36817: LD_INT 0
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 3
36826: NEG
36827: PUSH
36828: LD_INT 1
36830: NEG
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: LIST
36840: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36841: LD_ADDR_VAR 0 22
36845: PUSH
36846: LD_INT 2
36848: NEG
36849: PUSH
36850: LD_INT 3
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 3
36860: NEG
36861: PUSH
36862: LD_INT 2
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 3
36872: NEG
36873: PUSH
36874: LD_INT 3
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: LIST
36886: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36887: LD_ADDR_VAR 0 23
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: LD_INT 3
36897: NEG
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 1
36905: NEG
36906: PUSH
36907: LD_INT 4
36909: NEG
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: LD_INT 3
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: LIST
36930: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36931: LD_ADDR_VAR 0 24
36935: PUSH
36936: LD_INT 3
36938: PUSH
36939: LD_INT 0
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 3
36948: PUSH
36949: LD_INT 1
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 4
36959: PUSH
36960: LD_INT 1
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: LIST
36971: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36972: LD_ADDR_VAR 0 25
36976: PUSH
36977: LD_INT 3
36979: PUSH
36980: LD_INT 3
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 4
36989: PUSH
36990: LD_INT 3
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 3
36999: PUSH
37000: LD_INT 4
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: LIST
37011: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37012: LD_ADDR_VAR 0 26
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: LD_INT 3
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: LD_INT 4
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 1
37039: NEG
37040: PUSH
37041: LD_INT 3
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: LIST
37052: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37053: LD_ADDR_VAR 0 27
37057: PUSH
37058: LD_INT 3
37060: NEG
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 3
37071: NEG
37072: PUSH
37073: LD_INT 1
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 4
37082: NEG
37083: PUSH
37084: LD_INT 1
37086: NEG
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: LIST
37096: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37097: LD_ADDR_VAR 0 28
37101: PUSH
37102: LD_INT 3
37104: NEG
37105: PUSH
37106: LD_INT 3
37108: NEG
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 3
37116: NEG
37117: PUSH
37118: LD_INT 4
37120: NEG
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 4
37128: NEG
37129: PUSH
37130: LD_INT 3
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: LIST
37142: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37143: LD_ADDR_VAR 0 29
37147: PUSH
37148: LD_INT 1
37150: NEG
37151: PUSH
37152: LD_INT 3
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: LD_INT 3
37165: NEG
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: PUSH
37174: LD_INT 2
37176: NEG
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 1
37184: NEG
37185: PUSH
37186: LD_INT 4
37188: NEG
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: LD_INT 4
37199: NEG
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: LD_INT 3
37210: NEG
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 1
37218: NEG
37219: PUSH
37220: LD_INT 5
37222: NEG
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 0
37230: PUSH
37231: LD_INT 5
37233: NEG
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 1
37241: PUSH
37242: LD_INT 4
37244: NEG
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 1
37252: NEG
37253: PUSH
37254: LD_INT 6
37256: NEG
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 0
37264: PUSH
37265: LD_INT 6
37267: NEG
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 1
37275: PUSH
37276: LD_INT 5
37278: NEG
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37298: LD_ADDR_VAR 0 30
37302: PUSH
37303: LD_INT 2
37305: PUSH
37306: LD_INT 1
37308: NEG
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 3
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 3
37326: PUSH
37327: LD_INT 1
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 3
37336: PUSH
37337: LD_INT 1
37339: NEG
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 4
37347: PUSH
37348: LD_INT 0
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 4
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 4
37367: PUSH
37368: LD_INT 1
37370: NEG
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 5
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 5
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 5
37398: PUSH
37399: LD_INT 1
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 6
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 6
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37441: LD_ADDR_VAR 0 31
37445: PUSH
37446: LD_INT 3
37448: PUSH
37449: LD_INT 2
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 3
37458: PUSH
37459: LD_INT 3
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 2
37468: PUSH
37469: LD_INT 3
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 4
37478: PUSH
37479: LD_INT 3
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 4
37488: PUSH
37489: LD_INT 4
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 3
37498: PUSH
37499: LD_INT 4
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 5
37508: PUSH
37509: LD_INT 4
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 5
37518: PUSH
37519: LD_INT 5
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 4
37528: PUSH
37529: LD_INT 5
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 6
37538: PUSH
37539: LD_INT 5
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 6
37548: PUSH
37549: LD_INT 6
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 5
37558: PUSH
37559: LD_INT 6
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37580: LD_ADDR_VAR 0 32
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: LD_INT 3
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 3
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 1
37607: NEG
37608: PUSH
37609: LD_INT 2
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: LD_INT 4
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: LD_INT 4
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: LD_INT 3
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: PUSH
37650: LD_INT 5
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: LD_INT 5
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: NEG
37670: PUSH
37671: LD_INT 4
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: PUSH
37681: LD_INT 6
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 0
37690: PUSH
37691: LD_INT 6
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 1
37700: NEG
37701: PUSH
37702: LD_INT 5
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37723: LD_ADDR_VAR 0 33
37727: PUSH
37728: LD_INT 2
37730: NEG
37731: PUSH
37732: LD_INT 1
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 3
37741: NEG
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 3
37752: NEG
37753: PUSH
37754: LD_INT 1
37756: NEG
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 3
37764: NEG
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 4
37775: NEG
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 4
37786: NEG
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 4
37798: NEG
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 5
37809: NEG
37810: PUSH
37811: LD_INT 0
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 5
37820: NEG
37821: PUSH
37822: LD_INT 1
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 5
37832: NEG
37833: PUSH
37834: LD_INT 1
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 6
37843: NEG
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 6
37854: NEG
37855: PUSH
37856: LD_INT 1
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37878: LD_ADDR_VAR 0 34
37882: PUSH
37883: LD_INT 2
37885: NEG
37886: PUSH
37887: LD_INT 3
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 3
37897: NEG
37898: PUSH
37899: LD_INT 2
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 3
37909: NEG
37910: PUSH
37911: LD_INT 3
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 3
37921: NEG
37922: PUSH
37923: LD_INT 4
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 4
37933: NEG
37934: PUSH
37935: LD_INT 3
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 4
37945: NEG
37946: PUSH
37947: LD_INT 4
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 4
37957: NEG
37958: PUSH
37959: LD_INT 5
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 5
37969: NEG
37970: PUSH
37971: LD_INT 4
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 5
37981: NEG
37982: PUSH
37983: LD_INT 5
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 5
37993: NEG
37994: PUSH
37995: LD_INT 6
37997: NEG
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 6
38005: NEG
38006: PUSH
38007: LD_INT 5
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 6
38017: NEG
38018: PUSH
38019: LD_INT 6
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38041: LD_ADDR_VAR 0 41
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: LD_INT 2
38051: NEG
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 1
38059: NEG
38060: PUSH
38061: LD_INT 3
38063: NEG
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: LD_INT 2
38074: NEG
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: LIST
38084: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38085: LD_ADDR_VAR 0 42
38089: PUSH
38090: LD_INT 2
38092: PUSH
38093: LD_INT 0
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 2
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 3
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: LIST
38125: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38126: LD_ADDR_VAR 0 43
38130: PUSH
38131: LD_INT 2
38133: PUSH
38134: LD_INT 2
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 3
38143: PUSH
38144: LD_INT 2
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 2
38153: PUSH
38154: LD_INT 3
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: LIST
38165: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38166: LD_ADDR_VAR 0 44
38170: PUSH
38171: LD_INT 0
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 1
38183: PUSH
38184: LD_INT 3
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 1
38193: NEG
38194: PUSH
38195: LD_INT 2
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: LIST
38206: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38207: LD_ADDR_VAR 0 45
38211: PUSH
38212: LD_INT 2
38214: NEG
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 2
38225: NEG
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 3
38236: NEG
38237: PUSH
38238: LD_INT 1
38240: NEG
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: LIST
38250: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38251: LD_ADDR_VAR 0 46
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: LD_INT 2
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 2
38270: NEG
38271: PUSH
38272: LD_INT 3
38274: NEG
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 3
38282: NEG
38283: PUSH
38284: LD_INT 2
38286: NEG
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: LIST
38296: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38297: LD_ADDR_VAR 0 47
38301: PUSH
38302: LD_INT 2
38304: NEG
38305: PUSH
38306: LD_INT 3
38308: NEG
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 1
38316: NEG
38317: PUSH
38318: LD_INT 3
38320: NEG
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38330: LD_ADDR_VAR 0 48
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: LD_INT 2
38340: NEG
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 2
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38361: LD_ADDR_VAR 0 49
38365: PUSH
38366: LD_INT 3
38368: PUSH
38369: LD_INT 1
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 3
38378: PUSH
38379: LD_INT 2
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38390: LD_ADDR_VAR 0 50
38394: PUSH
38395: LD_INT 2
38397: PUSH
38398: LD_INT 3
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: LD_INT 3
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38419: LD_ADDR_VAR 0 51
38423: PUSH
38424: LD_INT 1
38426: NEG
38427: PUSH
38428: LD_INT 2
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 2
38437: NEG
38438: PUSH
38439: LD_INT 1
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38450: LD_ADDR_VAR 0 52
38454: PUSH
38455: LD_INT 3
38457: NEG
38458: PUSH
38459: LD_INT 1
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 3
38469: NEG
38470: PUSH
38471: LD_INT 2
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38483: LD_ADDR_VAR 0 53
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: LD_INT 3
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: LD_INT 3
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 1
38513: PUSH
38514: LD_INT 2
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38527: LD_ADDR_VAR 0 54
38531: PUSH
38532: LD_INT 2
38534: PUSH
38535: LD_INT 1
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 3
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 3
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: LIST
38567: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38568: LD_ADDR_VAR 0 55
38572: PUSH
38573: LD_INT 3
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 3
38585: PUSH
38586: LD_INT 3
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 2
38595: PUSH
38596: LD_INT 3
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: LIST
38607: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38608: LD_ADDR_VAR 0 56
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: LD_INT 3
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: LD_INT 3
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: NEG
38636: PUSH
38637: LD_INT 2
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: LIST
38648: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38649: LD_ADDR_VAR 0 57
38653: PUSH
38654: LD_INT 2
38656: NEG
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 3
38667: NEG
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 3
38678: NEG
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: LIST
38692: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38693: LD_ADDR_VAR 0 58
38697: PUSH
38698: LD_INT 2
38700: NEG
38701: PUSH
38702: LD_INT 3
38704: NEG
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 3
38712: NEG
38713: PUSH
38714: LD_INT 2
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 3
38724: NEG
38725: PUSH
38726: LD_INT 3
38728: NEG
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: LIST
38738: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38739: LD_ADDR_VAR 0 59
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: LD_INT 2
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: LD_INT 2
38761: NEG
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 1
38769: PUSH
38770: LD_INT 1
38772: NEG
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: LIST
38782: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38783: LD_ADDR_VAR 0 60
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 2
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: LIST
38823: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38824: LD_ADDR_VAR 0 61
38828: PUSH
38829: LD_INT 2
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 2
38841: PUSH
38842: LD_INT 2
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: LIST
38863: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38864: LD_ADDR_VAR 0 62
38868: PUSH
38869: LD_INT 1
38871: PUSH
38872: LD_INT 2
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 0
38881: PUSH
38882: LD_INT 2
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 1
38891: NEG
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: LIST
38904: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38905: LD_ADDR_VAR 0 63
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 2
38923: NEG
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 2
38934: NEG
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: LIST
38948: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38949: LD_ADDR_VAR 0 64
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: LD_INT 2
38960: NEG
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 2
38968: NEG
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 2
38980: NEG
38981: PUSH
38982: LD_INT 2
38984: NEG
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: LIST
38994: ST_TO_ADDR
// end ; 2 :
38995: GO 42261
38997: LD_INT 2
38999: DOUBLE
39000: EQUAL
39001: IFTRUE 39005
39003: GO 42260
39005: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39006: LD_ADDR_VAR 0 29
39010: PUSH
39011: LD_INT 4
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 4
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 5
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 5
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 4
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 3
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 3
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 3
39085: PUSH
39086: LD_INT 2
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 5
39096: PUSH
39097: LD_INT 2
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 3
39106: PUSH
39107: LD_INT 3
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 3
39116: PUSH
39117: LD_INT 2
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 4
39126: PUSH
39127: LD_INT 3
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 4
39136: PUSH
39137: LD_INT 4
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 3
39146: PUSH
39147: LD_INT 4
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 2
39156: PUSH
39157: LD_INT 3
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 2
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 4
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: LD_INT 4
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: LD_INT 4
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: LD_INT 3
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: LD_INT 4
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: LD_INT 5
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: LD_INT 5
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: NEG
39247: PUSH
39248: LD_INT 4
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: LD_INT 3
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 2
39268: PUSH
39269: LD_INT 5
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 2
39278: NEG
39279: PUSH
39280: LD_INT 3
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 3
39289: NEG
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 3
39300: NEG
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 2
39312: NEG
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 2
39323: NEG
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 3
39334: NEG
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 4
39345: NEG
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 4
39356: NEG
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 4
39368: NEG
39369: PUSH
39370: LD_INT 2
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 2
39380: NEG
39381: PUSH
39382: LD_INT 2
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 4
39391: NEG
39392: PUSH
39393: LD_INT 4
39395: NEG
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 4
39403: NEG
39404: PUSH
39405: LD_INT 5
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 3
39415: NEG
39416: PUSH
39417: LD_INT 4
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 3
39427: NEG
39428: PUSH
39429: LD_INT 3
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 4
39439: NEG
39440: PUSH
39441: LD_INT 3
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 5
39451: NEG
39452: PUSH
39453: LD_INT 4
39455: NEG
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 5
39463: NEG
39464: PUSH
39465: LD_INT 5
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 3
39475: NEG
39476: PUSH
39477: LD_INT 5
39479: NEG
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 5
39487: NEG
39488: PUSH
39489: LD_INT 3
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39544: LD_ADDR_VAR 0 30
39548: PUSH
39549: LD_INT 4
39551: PUSH
39552: LD_INT 4
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 4
39561: PUSH
39562: LD_INT 3
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 5
39571: PUSH
39572: LD_INT 4
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 5
39581: PUSH
39582: LD_INT 5
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 4
39591: PUSH
39592: LD_INT 5
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 3
39601: PUSH
39602: LD_INT 4
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 3
39611: PUSH
39612: LD_INT 3
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 5
39621: PUSH
39622: LD_INT 3
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 3
39631: PUSH
39632: LD_INT 5
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: LD_INT 3
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: LD_INT 2
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: LD_INT 3
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: LD_INT 4
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: LD_INT 4
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: LD_INT 3
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 2
39713: PUSH
39714: LD_INT 4
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 2
39723: NEG
39724: PUSH
39725: LD_INT 2
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 4
39734: NEG
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 4
39745: NEG
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 3
39757: NEG
39758: PUSH
39759: LD_INT 0
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 3
39768: NEG
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 4
39779: NEG
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 5
39790: NEG
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 5
39801: NEG
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 5
39813: NEG
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 3
39825: NEG
39826: PUSH
39827: LD_INT 2
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 3
39836: NEG
39837: PUSH
39838: LD_INT 3
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 3
39848: NEG
39849: PUSH
39850: LD_INT 4
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 2
39860: NEG
39861: PUSH
39862: LD_INT 3
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 2
39872: NEG
39873: PUSH
39874: LD_INT 2
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 3
39884: NEG
39885: PUSH
39886: LD_INT 2
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 4
39896: NEG
39897: PUSH
39898: LD_INT 3
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 4
39908: NEG
39909: PUSH
39910: LD_INT 4
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 2
39920: NEG
39921: PUSH
39922: LD_INT 4
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 4
39932: NEG
39933: PUSH
39934: LD_INT 2
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: LD_INT 4
39947: NEG
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: LD_INT 5
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: PUSH
39967: LD_INT 4
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: LD_INT 3
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 0
39988: PUSH
39989: LD_INT 3
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: NEG
40000: PUSH
40001: LD_INT 4
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: LD_INT 5
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 2
40023: PUSH
40024: LD_INT 3
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 2
40034: NEG
40035: PUSH
40036: LD_INT 5
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40091: LD_ADDR_VAR 0 31
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: LD_INT 4
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: LD_INT 3
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: LD_INT 4
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: LD_INT 5
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: LD_INT 5
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: NEG
40149: PUSH
40150: LD_INT 4
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: PUSH
40161: LD_INT 3
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 2
40170: PUSH
40171: LD_INT 5
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: NEG
40181: PUSH
40182: LD_INT 3
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 3
40191: NEG
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 3
40202: NEG
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 2
40214: NEG
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 2
40225: NEG
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 3
40236: NEG
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 4
40247: NEG
40248: PUSH
40249: LD_INT 0
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 4
40258: NEG
40259: PUSH
40260: LD_INT 1
40262: NEG
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 4
40270: NEG
40271: PUSH
40272: LD_INT 2
40274: NEG
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 2
40282: NEG
40283: PUSH
40284: LD_INT 2
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 4
40293: NEG
40294: PUSH
40295: LD_INT 4
40297: NEG
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 4
40305: NEG
40306: PUSH
40307: LD_INT 5
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 3
40317: NEG
40318: PUSH
40319: LD_INT 4
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 3
40329: NEG
40330: PUSH
40331: LD_INT 3
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 4
40341: NEG
40342: PUSH
40343: LD_INT 3
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 5
40353: NEG
40354: PUSH
40355: LD_INT 4
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 5
40365: NEG
40366: PUSH
40367: LD_INT 5
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 3
40377: NEG
40378: PUSH
40379: LD_INT 5
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 5
40389: NEG
40390: PUSH
40391: LD_INT 3
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: LD_INT 3
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: LD_INT 4
40415: NEG
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: LD_INT 3
40426: NEG
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: LD_INT 2
40437: NEG
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: LD_INT 2
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: LD_INT 3
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: LD_INT 4
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: LD_INT 2
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 2
40491: NEG
40492: PUSH
40493: LD_INT 4
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 4
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 4
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 5
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 5
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 4
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 3
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 3
40564: PUSH
40565: LD_INT 1
40567: NEG
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 3
40575: PUSH
40576: LD_INT 2
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 5
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40641: LD_ADDR_VAR 0 32
40645: PUSH
40646: LD_INT 4
40648: NEG
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 4
40659: NEG
40660: PUSH
40661: LD_INT 1
40663: NEG
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 3
40671: NEG
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 3
40682: NEG
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 4
40693: NEG
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 5
40704: NEG
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 5
40715: NEG
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 5
40727: NEG
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 3
40739: NEG
40740: PUSH
40741: LD_INT 2
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 3
40750: NEG
40751: PUSH
40752: LD_INT 3
40754: NEG
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 3
40762: NEG
40763: PUSH
40764: LD_INT 4
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 2
40774: NEG
40775: PUSH
40776: LD_INT 3
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 2
40786: NEG
40787: PUSH
40788: LD_INT 2
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 3
40798: NEG
40799: PUSH
40800: LD_INT 2
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 4
40810: NEG
40811: PUSH
40812: LD_INT 3
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 4
40822: NEG
40823: PUSH
40824: LD_INT 4
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: LD_INT 4
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 4
40846: NEG
40847: PUSH
40848: LD_INT 2
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: LD_INT 4
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: LD_INT 5
40872: NEG
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 4
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: LD_INT 3
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 3
40905: NEG
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: LD_INT 4
40917: NEG
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: LD_INT 5
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 2
40937: PUSH
40938: LD_INT 3
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 2
40948: NEG
40949: PUSH
40950: LD_INT 5
40952: NEG
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 3
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 3
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 4
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 4
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 3
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 2
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 2
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: LD_INT 2
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 4
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 4
41053: PUSH
41054: LD_INT 4
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 4
41063: PUSH
41064: LD_INT 3
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 5
41073: PUSH
41074: LD_INT 4
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 5
41083: PUSH
41084: LD_INT 5
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 4
41093: PUSH
41094: LD_INT 5
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 3
41103: PUSH
41104: LD_INT 4
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 3
41113: PUSH
41114: LD_INT 3
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 5
41123: PUSH
41124: LD_INT 3
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 3
41133: PUSH
41134: LD_INT 5
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41188: LD_ADDR_VAR 0 33
41192: PUSH
41193: LD_INT 4
41195: NEG
41196: PUSH
41197: LD_INT 4
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 4
41207: NEG
41208: PUSH
41209: LD_INT 5
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 3
41219: NEG
41220: PUSH
41221: LD_INT 4
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 3
41231: NEG
41232: PUSH
41233: LD_INT 3
41235: NEG
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 4
41243: NEG
41244: PUSH
41245: LD_INT 3
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 5
41255: NEG
41256: PUSH
41257: LD_INT 4
41259: NEG
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 5
41267: NEG
41268: PUSH
41269: LD_INT 5
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 3
41279: NEG
41280: PUSH
41281: LD_INT 5
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 5
41291: NEG
41292: PUSH
41293: LD_INT 3
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 3
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: LD_INT 4
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: LD_INT 3
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: LD_INT 2
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 2
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: LD_INT 3
41362: NEG
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: LD_INT 4
41374: NEG
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: LD_INT 2
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: LD_INT 4
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 4
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 4
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 5
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 5
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 4
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 3
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 3
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 3
41477: PUSH
41478: LD_INT 2
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 5
41488: PUSH
41489: LD_INT 2
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 3
41498: PUSH
41499: LD_INT 3
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 3
41508: PUSH
41509: LD_INT 2
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 4
41518: PUSH
41519: LD_INT 3
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 4
41528: PUSH
41529: LD_INT 4
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 3
41538: PUSH
41539: LD_INT 4
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: LD_INT 3
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 2
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 4
41568: PUSH
41569: LD_INT 2
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: PUSH
41579: LD_INT 4
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 4
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 3
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: LD_INT 4
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 5
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 5
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: LD_INT 4
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: LD_INT 3
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 2
41660: PUSH
41661: LD_INT 5
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 2
41670: NEG
41671: PUSH
41672: LD_INT 3
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41726: LD_ADDR_VAR 0 34
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: LD_INT 4
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 0
41744: PUSH
41745: LD_INT 5
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: LD_INT 4
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: LD_INT 3
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: LD_INT 3
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: LD_INT 4
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: LD_INT 5
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 2
41812: PUSH
41813: LD_INT 3
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 2
41823: NEG
41824: PUSH
41825: LD_INT 5
41827: NEG
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 3
41835: PUSH
41836: LD_INT 0
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 3
41845: PUSH
41846: LD_INT 1
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 4
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 4
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 3
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 2
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: LD_INT 2
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 4
41918: PUSH
41919: LD_INT 2
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 4
41928: PUSH
41929: LD_INT 4
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 4
41938: PUSH
41939: LD_INT 3
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 5
41948: PUSH
41949: LD_INT 4
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 5
41958: PUSH
41959: LD_INT 5
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 4
41968: PUSH
41969: LD_INT 5
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 3
41978: PUSH
41979: LD_INT 4
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 3
41988: PUSH
41989: LD_INT 3
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 5
41998: PUSH
41999: LD_INT 3
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 3
42008: PUSH
42009: LD_INT 5
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: LD_INT 3
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: LD_INT 2
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: LD_INT 3
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: LD_INT 4
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: LD_INT 4
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: LD_INT 3
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 2
42090: PUSH
42091: LD_INT 4
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: LD_INT 2
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 4
42111: NEG
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 4
42122: NEG
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 3
42134: NEG
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 3
42145: NEG
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 4
42156: NEG
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 5
42167: NEG
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 5
42178: NEG
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 5
42190: NEG
42191: PUSH
42192: LD_INT 2
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 3
42202: NEG
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: ST_TO_ADDR
// end ; end ;
42258: GO 42261
42260: POP
// case btype of b_depot , b_warehouse :
42261: LD_VAR 0 1
42265: PUSH
42266: LD_INT 0
42268: DOUBLE
42269: EQUAL
42270: IFTRUE 42280
42272: LD_INT 1
42274: DOUBLE
42275: EQUAL
42276: IFTRUE 42280
42278: GO 42481
42280: POP
// case nation of nation_american :
42281: LD_VAR 0 5
42285: PUSH
42286: LD_INT 1
42288: DOUBLE
42289: EQUAL
42290: IFTRUE 42294
42292: GO 42350
42294: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42295: LD_ADDR_VAR 0 9
42299: PUSH
42300: LD_VAR 0 11
42304: PUSH
42305: LD_VAR 0 12
42309: PUSH
42310: LD_VAR 0 13
42314: PUSH
42315: LD_VAR 0 14
42319: PUSH
42320: LD_VAR 0 15
42324: PUSH
42325: LD_VAR 0 16
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: PUSH
42338: LD_VAR 0 4
42342: PUSH
42343: LD_INT 1
42345: PLUS
42346: ARRAY
42347: ST_TO_ADDR
42348: GO 42479
42350: LD_INT 2
42352: DOUBLE
42353: EQUAL
42354: IFTRUE 42358
42356: GO 42414
42358: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42359: LD_ADDR_VAR 0 9
42363: PUSH
42364: LD_VAR 0 17
42368: PUSH
42369: LD_VAR 0 18
42373: PUSH
42374: LD_VAR 0 19
42378: PUSH
42379: LD_VAR 0 20
42383: PUSH
42384: LD_VAR 0 21
42388: PUSH
42389: LD_VAR 0 22
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: PUSH
42402: LD_VAR 0 4
42406: PUSH
42407: LD_INT 1
42409: PLUS
42410: ARRAY
42411: ST_TO_ADDR
42412: GO 42479
42414: LD_INT 3
42416: DOUBLE
42417: EQUAL
42418: IFTRUE 42422
42420: GO 42478
42422: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42423: LD_ADDR_VAR 0 9
42427: PUSH
42428: LD_VAR 0 23
42432: PUSH
42433: LD_VAR 0 24
42437: PUSH
42438: LD_VAR 0 25
42442: PUSH
42443: LD_VAR 0 26
42447: PUSH
42448: LD_VAR 0 27
42452: PUSH
42453: LD_VAR 0 28
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: PUSH
42466: LD_VAR 0 4
42470: PUSH
42471: LD_INT 1
42473: PLUS
42474: ARRAY
42475: ST_TO_ADDR
42476: GO 42479
42478: POP
42479: GO 43034
42481: LD_INT 2
42483: DOUBLE
42484: EQUAL
42485: IFTRUE 42495
42487: LD_INT 3
42489: DOUBLE
42490: EQUAL
42491: IFTRUE 42495
42493: GO 42551
42495: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42496: LD_ADDR_VAR 0 9
42500: PUSH
42501: LD_VAR 0 29
42505: PUSH
42506: LD_VAR 0 30
42510: PUSH
42511: LD_VAR 0 31
42515: PUSH
42516: LD_VAR 0 32
42520: PUSH
42521: LD_VAR 0 33
42525: PUSH
42526: LD_VAR 0 34
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: PUSH
42539: LD_VAR 0 4
42543: PUSH
42544: LD_INT 1
42546: PLUS
42547: ARRAY
42548: ST_TO_ADDR
42549: GO 43034
42551: LD_INT 16
42553: DOUBLE
42554: EQUAL
42555: IFTRUE 42613
42557: LD_INT 17
42559: DOUBLE
42560: EQUAL
42561: IFTRUE 42613
42563: LD_INT 18
42565: DOUBLE
42566: EQUAL
42567: IFTRUE 42613
42569: LD_INT 19
42571: DOUBLE
42572: EQUAL
42573: IFTRUE 42613
42575: LD_INT 22
42577: DOUBLE
42578: EQUAL
42579: IFTRUE 42613
42581: LD_INT 20
42583: DOUBLE
42584: EQUAL
42585: IFTRUE 42613
42587: LD_INT 21
42589: DOUBLE
42590: EQUAL
42591: IFTRUE 42613
42593: LD_INT 23
42595: DOUBLE
42596: EQUAL
42597: IFTRUE 42613
42599: LD_INT 24
42601: DOUBLE
42602: EQUAL
42603: IFTRUE 42613
42605: LD_INT 25
42607: DOUBLE
42608: EQUAL
42609: IFTRUE 42613
42611: GO 42669
42613: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42614: LD_ADDR_VAR 0 9
42618: PUSH
42619: LD_VAR 0 35
42623: PUSH
42624: LD_VAR 0 36
42628: PUSH
42629: LD_VAR 0 37
42633: PUSH
42634: LD_VAR 0 38
42638: PUSH
42639: LD_VAR 0 39
42643: PUSH
42644: LD_VAR 0 40
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: PUSH
42657: LD_VAR 0 4
42661: PUSH
42662: LD_INT 1
42664: PLUS
42665: ARRAY
42666: ST_TO_ADDR
42667: GO 43034
42669: LD_INT 6
42671: DOUBLE
42672: EQUAL
42673: IFTRUE 42725
42675: LD_INT 7
42677: DOUBLE
42678: EQUAL
42679: IFTRUE 42725
42681: LD_INT 8
42683: DOUBLE
42684: EQUAL
42685: IFTRUE 42725
42687: LD_INT 13
42689: DOUBLE
42690: EQUAL
42691: IFTRUE 42725
42693: LD_INT 12
42695: DOUBLE
42696: EQUAL
42697: IFTRUE 42725
42699: LD_INT 15
42701: DOUBLE
42702: EQUAL
42703: IFTRUE 42725
42705: LD_INT 11
42707: DOUBLE
42708: EQUAL
42709: IFTRUE 42725
42711: LD_INT 14
42713: DOUBLE
42714: EQUAL
42715: IFTRUE 42725
42717: LD_INT 10
42719: DOUBLE
42720: EQUAL
42721: IFTRUE 42725
42723: GO 42781
42725: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42726: LD_ADDR_VAR 0 9
42730: PUSH
42731: LD_VAR 0 41
42735: PUSH
42736: LD_VAR 0 42
42740: PUSH
42741: LD_VAR 0 43
42745: PUSH
42746: LD_VAR 0 44
42750: PUSH
42751: LD_VAR 0 45
42755: PUSH
42756: LD_VAR 0 46
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: PUSH
42769: LD_VAR 0 4
42773: PUSH
42774: LD_INT 1
42776: PLUS
42777: ARRAY
42778: ST_TO_ADDR
42779: GO 43034
42781: LD_INT 36
42783: DOUBLE
42784: EQUAL
42785: IFTRUE 42789
42787: GO 42845
42789: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42790: LD_ADDR_VAR 0 9
42794: PUSH
42795: LD_VAR 0 47
42799: PUSH
42800: LD_VAR 0 48
42804: PUSH
42805: LD_VAR 0 49
42809: PUSH
42810: LD_VAR 0 50
42814: PUSH
42815: LD_VAR 0 51
42819: PUSH
42820: LD_VAR 0 52
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: PUSH
42833: LD_VAR 0 4
42837: PUSH
42838: LD_INT 1
42840: PLUS
42841: ARRAY
42842: ST_TO_ADDR
42843: GO 43034
42845: LD_INT 4
42847: DOUBLE
42848: EQUAL
42849: IFTRUE 42871
42851: LD_INT 5
42853: DOUBLE
42854: EQUAL
42855: IFTRUE 42871
42857: LD_INT 34
42859: DOUBLE
42860: EQUAL
42861: IFTRUE 42871
42863: LD_INT 37
42865: DOUBLE
42866: EQUAL
42867: IFTRUE 42871
42869: GO 42927
42871: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42872: LD_ADDR_VAR 0 9
42876: PUSH
42877: LD_VAR 0 53
42881: PUSH
42882: LD_VAR 0 54
42886: PUSH
42887: LD_VAR 0 55
42891: PUSH
42892: LD_VAR 0 56
42896: PUSH
42897: LD_VAR 0 57
42901: PUSH
42902: LD_VAR 0 58
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: PUSH
42915: LD_VAR 0 4
42919: PUSH
42920: LD_INT 1
42922: PLUS
42923: ARRAY
42924: ST_TO_ADDR
42925: GO 43034
42927: LD_INT 31
42929: DOUBLE
42930: EQUAL
42931: IFTRUE 42977
42933: LD_INT 32
42935: DOUBLE
42936: EQUAL
42937: IFTRUE 42977
42939: LD_INT 33
42941: DOUBLE
42942: EQUAL
42943: IFTRUE 42977
42945: LD_INT 27
42947: DOUBLE
42948: EQUAL
42949: IFTRUE 42977
42951: LD_INT 26
42953: DOUBLE
42954: EQUAL
42955: IFTRUE 42977
42957: LD_INT 28
42959: DOUBLE
42960: EQUAL
42961: IFTRUE 42977
42963: LD_INT 29
42965: DOUBLE
42966: EQUAL
42967: IFTRUE 42977
42969: LD_INT 30
42971: DOUBLE
42972: EQUAL
42973: IFTRUE 42977
42975: GO 43033
42977: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42978: LD_ADDR_VAR 0 9
42982: PUSH
42983: LD_VAR 0 59
42987: PUSH
42988: LD_VAR 0 60
42992: PUSH
42993: LD_VAR 0 61
42997: PUSH
42998: LD_VAR 0 62
43002: PUSH
43003: LD_VAR 0 63
43007: PUSH
43008: LD_VAR 0 64
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: PUSH
43021: LD_VAR 0 4
43025: PUSH
43026: LD_INT 1
43028: PLUS
43029: ARRAY
43030: ST_TO_ADDR
43031: GO 43034
43033: POP
// temp_list2 = [ ] ;
43034: LD_ADDR_VAR 0 10
43038: PUSH
43039: EMPTY
43040: ST_TO_ADDR
// for i in temp_list do
43041: LD_ADDR_VAR 0 8
43045: PUSH
43046: LD_VAR 0 9
43050: PUSH
43051: FOR_IN
43052: IFFALSE 43104
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43054: LD_ADDR_VAR 0 10
43058: PUSH
43059: LD_VAR 0 10
43063: PUSH
43064: LD_VAR 0 8
43068: PUSH
43069: LD_INT 1
43071: ARRAY
43072: PUSH
43073: LD_VAR 0 2
43077: PLUS
43078: PUSH
43079: LD_VAR 0 8
43083: PUSH
43084: LD_INT 2
43086: ARRAY
43087: PUSH
43088: LD_VAR 0 3
43092: PLUS
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: EMPTY
43099: LIST
43100: ADD
43101: ST_TO_ADDR
43102: GO 43051
43104: POP
43105: POP
// result = temp_list2 ;
43106: LD_ADDR_VAR 0 7
43110: PUSH
43111: LD_VAR 0 10
43115: ST_TO_ADDR
// end ;
43116: LD_VAR 0 7
43120: RET
// export function EnemyInRange ( unit , dist ) ; begin
43121: LD_INT 0
43123: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43124: LD_ADDR_VAR 0 3
43128: PUSH
43129: LD_VAR 0 1
43133: PPUSH
43134: CALL_OW 255
43138: PPUSH
43139: LD_VAR 0 1
43143: PPUSH
43144: CALL_OW 250
43148: PPUSH
43149: LD_VAR 0 1
43153: PPUSH
43154: CALL_OW 251
43158: PPUSH
43159: LD_VAR 0 2
43163: PPUSH
43164: CALL 16378 0 4
43168: PUSH
43169: LD_INT 4
43171: ARRAY
43172: ST_TO_ADDR
// end ;
43173: LD_VAR 0 3
43177: RET
// export function PlayerSeeMe ( unit ) ; begin
43178: LD_INT 0
43180: PPUSH
// result := See ( your_side , unit ) ;
43181: LD_ADDR_VAR 0 2
43185: PUSH
43186: LD_OWVAR 2
43190: PPUSH
43191: LD_VAR 0 1
43195: PPUSH
43196: CALL_OW 292
43200: ST_TO_ADDR
// end ;
43201: LD_VAR 0 2
43205: RET
// export function ReverseDir ( unit ) ; begin
43206: LD_INT 0
43208: PPUSH
// if not unit then
43209: LD_VAR 0 1
43213: NOT
43214: IFFALSE 43218
// exit ;
43216: GO 43241
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43218: LD_ADDR_VAR 0 2
43222: PUSH
43223: LD_VAR 0 1
43227: PPUSH
43228: CALL_OW 254
43232: PUSH
43233: LD_INT 3
43235: PLUS
43236: PUSH
43237: LD_INT 6
43239: MOD
43240: ST_TO_ADDR
// end ;
43241: LD_VAR 0 2
43245: RET
// export function ReverseArray ( array ) ; var i ; begin
43246: LD_INT 0
43248: PPUSH
43249: PPUSH
// if not array then
43250: LD_VAR 0 1
43254: NOT
43255: IFFALSE 43259
// exit ;
43257: GO 43314
// result := [ ] ;
43259: LD_ADDR_VAR 0 2
43263: PUSH
43264: EMPTY
43265: ST_TO_ADDR
// for i := array downto 1 do
43266: LD_ADDR_VAR 0 3
43270: PUSH
43271: DOUBLE
43272: LD_VAR 0 1
43276: INC
43277: ST_TO_ADDR
43278: LD_INT 1
43280: PUSH
43281: FOR_DOWNTO
43282: IFFALSE 43312
// result := Join ( result , array [ i ] ) ;
43284: LD_ADDR_VAR 0 2
43288: PUSH
43289: LD_VAR 0 2
43293: PPUSH
43294: LD_VAR 0 1
43298: PUSH
43299: LD_VAR 0 3
43303: ARRAY
43304: PPUSH
43305: CALL 48156 0 2
43309: ST_TO_ADDR
43310: GO 43281
43312: POP
43313: POP
// end ;
43314: LD_VAR 0 2
43318: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43319: LD_INT 0
43321: PPUSH
43322: PPUSH
43323: PPUSH
43324: PPUSH
43325: PPUSH
43326: PPUSH
// if not unit or not hexes then
43327: LD_VAR 0 1
43331: NOT
43332: IFTRUE 43341
43334: PUSH
43335: LD_VAR 0 2
43339: NOT
43340: OR
43341: IFFALSE 43345
// exit ;
43343: GO 43468
// dist := 9999 ;
43345: LD_ADDR_VAR 0 5
43349: PUSH
43350: LD_INT 9999
43352: ST_TO_ADDR
// for i = 1 to hexes do
43353: LD_ADDR_VAR 0 4
43357: PUSH
43358: DOUBLE
43359: LD_INT 1
43361: DEC
43362: ST_TO_ADDR
43363: LD_VAR 0 2
43367: PUSH
43368: FOR_TO
43369: IFFALSE 43456
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43371: LD_ADDR_VAR 0 6
43375: PUSH
43376: LD_VAR 0 1
43380: PPUSH
43381: LD_VAR 0 2
43385: PUSH
43386: LD_VAR 0 4
43390: ARRAY
43391: PUSH
43392: LD_INT 1
43394: ARRAY
43395: PPUSH
43396: LD_VAR 0 2
43400: PUSH
43401: LD_VAR 0 4
43405: ARRAY
43406: PUSH
43407: LD_INT 2
43409: ARRAY
43410: PPUSH
43411: CALL_OW 297
43415: ST_TO_ADDR
// if tdist < dist then
43416: LD_VAR 0 6
43420: PUSH
43421: LD_VAR 0 5
43425: LESS
43426: IFFALSE 43454
// begin hex := hexes [ i ] ;
43428: LD_ADDR_VAR 0 8
43432: PUSH
43433: LD_VAR 0 2
43437: PUSH
43438: LD_VAR 0 4
43442: ARRAY
43443: ST_TO_ADDR
// dist := tdist ;
43444: LD_ADDR_VAR 0 5
43448: PUSH
43449: LD_VAR 0 6
43453: ST_TO_ADDR
// end ; end ;
43454: GO 43368
43456: POP
43457: POP
// result := hex ;
43458: LD_ADDR_VAR 0 3
43462: PUSH
43463: LD_VAR 0 8
43467: ST_TO_ADDR
// end ;
43468: LD_VAR 0 3
43472: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43473: LD_INT 0
43475: PPUSH
43476: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43477: LD_VAR 0 1
43481: NOT
43482: IFTRUE 43521
43484: PUSH
43485: LD_VAR 0 1
43489: PUSH
43490: LD_INT 21
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 23
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PPUSH
43514: CALL_OW 69
43518: IN
43519: NOT
43520: OR
43521: IFFALSE 43525
// exit ;
43523: GO 43572
// for i = 1 to 3 do
43525: LD_ADDR_VAR 0 3
43529: PUSH
43530: DOUBLE
43531: LD_INT 1
43533: DEC
43534: ST_TO_ADDR
43535: LD_INT 3
43537: PUSH
43538: FOR_TO
43539: IFFALSE 43570
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43541: LD_VAR 0 1
43545: PPUSH
43546: CALL_OW 250
43550: PPUSH
43551: LD_VAR 0 1
43555: PPUSH
43556: CALL_OW 251
43560: PPUSH
43561: LD_INT 1
43563: PPUSH
43564: CALL_OW 453
43568: GO 43538
43570: POP
43571: POP
// end ;
43572: LD_VAR 0 2
43576: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43577: LD_INT 0
43579: PPUSH
43580: PPUSH
43581: PPUSH
43582: PPUSH
43583: PPUSH
43584: PPUSH
// if not unit or not enemy_unit then
43585: LD_VAR 0 1
43589: NOT
43590: IFTRUE 43599
43592: PUSH
43593: LD_VAR 0 2
43597: NOT
43598: OR
43599: IFFALSE 43603
// exit ;
43601: GO 44074
// if GetLives ( i ) < 250 then
43603: LD_VAR 0 4
43607: PPUSH
43608: CALL_OW 256
43612: PUSH
43613: LD_INT 250
43615: LESS
43616: IFFALSE 43629
// begin ComAutodestruct ( i ) ;
43618: LD_VAR 0 4
43622: PPUSH
43623: CALL 43473 0 1
// exit ;
43627: GO 44074
// end ; x := GetX ( enemy_unit ) ;
43629: LD_ADDR_VAR 0 7
43633: PUSH
43634: LD_VAR 0 2
43638: PPUSH
43639: CALL_OW 250
43643: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43644: LD_ADDR_VAR 0 8
43648: PUSH
43649: LD_VAR 0 2
43653: PPUSH
43654: CALL_OW 251
43658: ST_TO_ADDR
// if not x or not y then
43659: LD_VAR 0 7
43663: NOT
43664: IFTRUE 43673
43666: PUSH
43667: LD_VAR 0 8
43671: NOT
43672: OR
43673: IFFALSE 43677
// exit ;
43675: GO 44074
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43677: LD_ADDR_VAR 0 6
43681: PUSH
43682: LD_VAR 0 7
43686: PPUSH
43687: LD_INT 0
43689: PPUSH
43690: LD_INT 4
43692: PPUSH
43693: CALL_OW 272
43697: PUSH
43698: LD_VAR 0 8
43702: PPUSH
43703: LD_INT 0
43705: PPUSH
43706: LD_INT 4
43708: PPUSH
43709: CALL_OW 273
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_VAR 0 7
43722: PPUSH
43723: LD_INT 1
43725: PPUSH
43726: LD_INT 4
43728: PPUSH
43729: CALL_OW 272
43733: PUSH
43734: LD_VAR 0 8
43738: PPUSH
43739: LD_INT 1
43741: PPUSH
43742: LD_INT 4
43744: PPUSH
43745: CALL_OW 273
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_VAR 0 7
43758: PPUSH
43759: LD_INT 2
43761: PPUSH
43762: LD_INT 4
43764: PPUSH
43765: CALL_OW 272
43769: PUSH
43770: LD_VAR 0 8
43774: PPUSH
43775: LD_INT 2
43777: PPUSH
43778: LD_INT 4
43780: PPUSH
43781: CALL_OW 273
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_VAR 0 7
43794: PPUSH
43795: LD_INT 3
43797: PPUSH
43798: LD_INT 4
43800: PPUSH
43801: CALL_OW 272
43805: PUSH
43806: LD_VAR 0 8
43810: PPUSH
43811: LD_INT 3
43813: PPUSH
43814: LD_INT 4
43816: PPUSH
43817: CALL_OW 273
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_VAR 0 7
43830: PPUSH
43831: LD_INT 4
43833: PPUSH
43834: LD_INT 4
43836: PPUSH
43837: CALL_OW 272
43841: PUSH
43842: LD_VAR 0 8
43846: PPUSH
43847: LD_INT 4
43849: PPUSH
43850: LD_INT 4
43852: PPUSH
43853: CALL_OW 273
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_VAR 0 7
43866: PPUSH
43867: LD_INT 5
43869: PPUSH
43870: LD_INT 4
43872: PPUSH
43873: CALL_OW 272
43877: PUSH
43878: LD_VAR 0 8
43882: PPUSH
43883: LD_INT 5
43885: PPUSH
43886: LD_INT 4
43888: PPUSH
43889: CALL_OW 273
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: ST_TO_ADDR
// for i = tmp downto 1 do
43906: LD_ADDR_VAR 0 4
43910: PUSH
43911: DOUBLE
43912: LD_VAR 0 6
43916: INC
43917: ST_TO_ADDR
43918: LD_INT 1
43920: PUSH
43921: FOR_DOWNTO
43922: IFFALSE 44025
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43924: LD_VAR 0 6
43928: PUSH
43929: LD_VAR 0 4
43933: ARRAY
43934: PUSH
43935: LD_INT 1
43937: ARRAY
43938: PPUSH
43939: LD_VAR 0 6
43943: PUSH
43944: LD_VAR 0 4
43948: ARRAY
43949: PUSH
43950: LD_INT 2
43952: ARRAY
43953: PPUSH
43954: CALL_OW 488
43958: NOT
43959: IFTRUE 44001
43961: PUSH
43962: LD_VAR 0 6
43966: PUSH
43967: LD_VAR 0 4
43971: ARRAY
43972: PUSH
43973: LD_INT 1
43975: ARRAY
43976: PPUSH
43977: LD_VAR 0 6
43981: PUSH
43982: LD_VAR 0 4
43986: ARRAY
43987: PUSH
43988: LD_INT 2
43990: ARRAY
43991: PPUSH
43992: CALL_OW 428
43996: PUSH
43997: LD_INT 0
43999: NONEQUAL
44000: OR
44001: IFFALSE 44023
// tmp := Delete ( tmp , i ) ;
44003: LD_ADDR_VAR 0 6
44007: PUSH
44008: LD_VAR 0 6
44012: PPUSH
44013: LD_VAR 0 4
44017: PPUSH
44018: CALL_OW 3
44022: ST_TO_ADDR
44023: GO 43921
44025: POP
44026: POP
// j := GetClosestHex ( unit , tmp ) ;
44027: LD_ADDR_VAR 0 5
44031: PUSH
44032: LD_VAR 0 1
44036: PPUSH
44037: LD_VAR 0 6
44041: PPUSH
44042: CALL 43319 0 2
44046: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44047: LD_VAR 0 1
44051: PPUSH
44052: LD_VAR 0 5
44056: PUSH
44057: LD_INT 1
44059: ARRAY
44060: PPUSH
44061: LD_VAR 0 5
44065: PUSH
44066: LD_INT 2
44068: ARRAY
44069: PPUSH
44070: CALL_OW 111
// end ;
44074: LD_VAR 0 3
44078: RET
// export function PrepareApemanSoldier ( ) ; begin
44079: LD_INT 0
44081: PPUSH
// uc_nation := 0 ;
44082: LD_ADDR_OWVAR 21
44086: PUSH
44087: LD_INT 0
44089: ST_TO_ADDR
// hc_sex := sex_male ;
44090: LD_ADDR_OWVAR 27
44094: PUSH
44095: LD_INT 1
44097: ST_TO_ADDR
// hc_name :=  ;
44098: LD_ADDR_OWVAR 26
44102: PUSH
44103: LD_STRING 
44105: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44106: LD_ADDR_OWVAR 28
44110: PUSH
44111: LD_INT 15
44113: ST_TO_ADDR
// hc_gallery :=  ;
44114: LD_ADDR_OWVAR 33
44118: PUSH
44119: LD_STRING 
44121: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44122: LD_ADDR_OWVAR 31
44126: PUSH
44127: LD_INT 0
44129: PPUSH
44130: LD_INT 3
44132: PPUSH
44133: CALL_OW 12
44137: PUSH
44138: LD_INT 0
44140: PPUSH
44141: LD_INT 3
44143: PPUSH
44144: CALL_OW 12
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44161: LD_ADDR_OWVAR 29
44165: PUSH
44166: LD_INT 12
44168: PUSH
44169: LD_INT 12
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: ST_TO_ADDR
// end ;
44176: LD_VAR 0 1
44180: RET
// export function PrepareApemanEngineer ( ) ; begin
44181: LD_INT 0
44183: PPUSH
// uc_nation := 0 ;
44184: LD_ADDR_OWVAR 21
44188: PUSH
44189: LD_INT 0
44191: ST_TO_ADDR
// hc_sex := sex_male ;
44192: LD_ADDR_OWVAR 27
44196: PUSH
44197: LD_INT 1
44199: ST_TO_ADDR
// hc_name :=  ;
44200: LD_ADDR_OWVAR 26
44204: PUSH
44205: LD_STRING 
44207: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44208: LD_ADDR_OWVAR 28
44212: PUSH
44213: LD_INT 16
44215: ST_TO_ADDR
// hc_gallery :=  ;
44216: LD_ADDR_OWVAR 33
44220: PUSH
44221: LD_STRING 
44223: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44224: LD_ADDR_OWVAR 31
44228: PUSH
44229: LD_INT 0
44231: PPUSH
44232: LD_INT 3
44234: PPUSH
44235: CALL_OW 12
44239: PUSH
44240: LD_INT 0
44242: PPUSH
44243: LD_INT 3
44245: PPUSH
44246: CALL_OW 12
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44263: LD_ADDR_OWVAR 29
44267: PUSH
44268: LD_INT 12
44270: PUSH
44271: LD_INT 12
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: ST_TO_ADDR
// end ;
44278: LD_VAR 0 1
44282: RET
// export function PrepareApeman ( agressivity ) ; begin
44283: LD_INT 0
44285: PPUSH
// uc_side := 0 ;
44286: LD_ADDR_OWVAR 20
44290: PUSH
44291: LD_INT 0
44293: ST_TO_ADDR
// uc_nation := 0 ;
44294: LD_ADDR_OWVAR 21
44298: PUSH
44299: LD_INT 0
44301: ST_TO_ADDR
// hc_sex := sex_male ;
44302: LD_ADDR_OWVAR 27
44306: PUSH
44307: LD_INT 1
44309: ST_TO_ADDR
// hc_class := class_apeman ;
44310: LD_ADDR_OWVAR 28
44314: PUSH
44315: LD_INT 12
44317: ST_TO_ADDR
// hc_gallery :=  ;
44318: LD_ADDR_OWVAR 33
44322: PUSH
44323: LD_STRING 
44325: ST_TO_ADDR
// hc_name :=  ;
44326: LD_ADDR_OWVAR 26
44330: PUSH
44331: LD_STRING 
44333: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44334: LD_ADDR_OWVAR 29
44338: PUSH
44339: LD_INT 12
44341: PUSH
44342: LD_INT 12
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: ST_TO_ADDR
// if agressivity = 0 then
44349: LD_VAR 0 1
44353: PUSH
44354: LD_INT 0
44356: EQUAL
44357: IFFALSE 44369
// hc_agressivity := 0 else
44359: LD_ADDR_OWVAR 35
44363: PUSH
44364: LD_INT 0
44366: ST_TO_ADDR
44367: GO 44390
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44369: LD_ADDR_OWVAR 35
44373: PUSH
44374: LD_VAR 0 1
44378: NEG
44379: PPUSH
44380: LD_VAR 0 1
44384: PPUSH
44385: CALL_OW 12
44389: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44390: LD_ADDR_OWVAR 31
44394: PUSH
44395: LD_INT 0
44397: PPUSH
44398: LD_INT 3
44400: PPUSH
44401: CALL_OW 12
44405: PUSH
44406: LD_INT 0
44408: PPUSH
44409: LD_INT 3
44411: PPUSH
44412: CALL_OW 12
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: ST_TO_ADDR
// end ;
44429: LD_VAR 0 2
44433: RET
// export function PrepareTiger ( agressivity ) ; begin
44434: LD_INT 0
44436: PPUSH
// uc_side := 0 ;
44437: LD_ADDR_OWVAR 20
44441: PUSH
44442: LD_INT 0
44444: ST_TO_ADDR
// uc_nation := 0 ;
44445: LD_ADDR_OWVAR 21
44449: PUSH
44450: LD_INT 0
44452: ST_TO_ADDR
// InitHc ;
44453: CALL_OW 19
// hc_class := class_tiger ;
44457: LD_ADDR_OWVAR 28
44461: PUSH
44462: LD_INT 14
44464: ST_TO_ADDR
// hc_gallery :=  ;
44465: LD_ADDR_OWVAR 33
44469: PUSH
44470: LD_STRING 
44472: ST_TO_ADDR
// hc_name :=  ;
44473: LD_ADDR_OWVAR 26
44477: PUSH
44478: LD_STRING 
44480: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44481: LD_ADDR_OWVAR 35
44485: PUSH
44486: LD_VAR 0 1
44490: NEG
44491: PPUSH
44492: LD_VAR 0 1
44496: PPUSH
44497: CALL_OW 12
44501: ST_TO_ADDR
// end ;
44502: LD_VAR 0 2
44506: RET
// export function PrepareEnchidna ( ) ; begin
44507: LD_INT 0
44509: PPUSH
// uc_side := 0 ;
44510: LD_ADDR_OWVAR 20
44514: PUSH
44515: LD_INT 0
44517: ST_TO_ADDR
// uc_nation := 0 ;
44518: LD_ADDR_OWVAR 21
44522: PUSH
44523: LD_INT 0
44525: ST_TO_ADDR
// InitHc ;
44526: CALL_OW 19
// hc_class := class_baggie ;
44530: LD_ADDR_OWVAR 28
44534: PUSH
44535: LD_INT 13
44537: ST_TO_ADDR
// hc_gallery :=  ;
44538: LD_ADDR_OWVAR 33
44542: PUSH
44543: LD_STRING 
44545: ST_TO_ADDR
// hc_name :=  ;
44546: LD_ADDR_OWVAR 26
44550: PUSH
44551: LD_STRING 
44553: ST_TO_ADDR
// end ;
44554: LD_VAR 0 1
44558: RET
// export function PrepareFrog ( ) ; begin
44559: LD_INT 0
44561: PPUSH
// uc_side := 0 ;
44562: LD_ADDR_OWVAR 20
44566: PUSH
44567: LD_INT 0
44569: ST_TO_ADDR
// uc_nation := 0 ;
44570: LD_ADDR_OWVAR 21
44574: PUSH
44575: LD_INT 0
44577: ST_TO_ADDR
// InitHc ;
44578: CALL_OW 19
// hc_class := class_frog ;
44582: LD_ADDR_OWVAR 28
44586: PUSH
44587: LD_INT 19
44589: ST_TO_ADDR
// hc_gallery :=  ;
44590: LD_ADDR_OWVAR 33
44594: PUSH
44595: LD_STRING 
44597: ST_TO_ADDR
// hc_name :=  ;
44598: LD_ADDR_OWVAR 26
44602: PUSH
44603: LD_STRING 
44605: ST_TO_ADDR
// end ;
44606: LD_VAR 0 1
44610: RET
// export function PrepareFish ( ) ; begin
44611: LD_INT 0
44613: PPUSH
// uc_side := 0 ;
44614: LD_ADDR_OWVAR 20
44618: PUSH
44619: LD_INT 0
44621: ST_TO_ADDR
// uc_nation := 0 ;
44622: LD_ADDR_OWVAR 21
44626: PUSH
44627: LD_INT 0
44629: ST_TO_ADDR
// InitHc ;
44630: CALL_OW 19
// hc_class := class_fish ;
44634: LD_ADDR_OWVAR 28
44638: PUSH
44639: LD_INT 20
44641: ST_TO_ADDR
// hc_gallery :=  ;
44642: LD_ADDR_OWVAR 33
44646: PUSH
44647: LD_STRING 
44649: ST_TO_ADDR
// hc_name :=  ;
44650: LD_ADDR_OWVAR 26
44654: PUSH
44655: LD_STRING 
44657: ST_TO_ADDR
// end ;
44658: LD_VAR 0 1
44662: RET
// export function PrepareBird ( ) ; begin
44663: LD_INT 0
44665: PPUSH
// uc_side := 0 ;
44666: LD_ADDR_OWVAR 20
44670: PUSH
44671: LD_INT 0
44673: ST_TO_ADDR
// uc_nation := 0 ;
44674: LD_ADDR_OWVAR 21
44678: PUSH
44679: LD_INT 0
44681: ST_TO_ADDR
// InitHc ;
44682: CALL_OW 19
// hc_class := class_phororhacos ;
44686: LD_ADDR_OWVAR 28
44690: PUSH
44691: LD_INT 18
44693: ST_TO_ADDR
// hc_gallery :=  ;
44694: LD_ADDR_OWVAR 33
44698: PUSH
44699: LD_STRING 
44701: ST_TO_ADDR
// hc_name :=  ;
44702: LD_ADDR_OWVAR 26
44706: PUSH
44707: LD_STRING 
44709: ST_TO_ADDR
// end ;
44710: LD_VAR 0 1
44714: RET
// export function PrepareHorse ( ) ; begin
44715: LD_INT 0
44717: PPUSH
// uc_side := 0 ;
44718: LD_ADDR_OWVAR 20
44722: PUSH
44723: LD_INT 0
44725: ST_TO_ADDR
// uc_nation := 0 ;
44726: LD_ADDR_OWVAR 21
44730: PUSH
44731: LD_INT 0
44733: ST_TO_ADDR
// InitHc ;
44734: CALL_OW 19
// hc_class := class_horse ;
44738: LD_ADDR_OWVAR 28
44742: PUSH
44743: LD_INT 21
44745: ST_TO_ADDR
// hc_gallery :=  ;
44746: LD_ADDR_OWVAR 33
44750: PUSH
44751: LD_STRING 
44753: ST_TO_ADDR
// hc_name :=  ;
44754: LD_ADDR_OWVAR 26
44758: PUSH
44759: LD_STRING 
44761: ST_TO_ADDR
// end ;
44762: LD_VAR 0 1
44766: RET
// export function PrepareMastodont ( ) ; begin
44767: LD_INT 0
44769: PPUSH
// uc_side := 0 ;
44770: LD_ADDR_OWVAR 20
44774: PUSH
44775: LD_INT 0
44777: ST_TO_ADDR
// uc_nation := 0 ;
44778: LD_ADDR_OWVAR 21
44782: PUSH
44783: LD_INT 0
44785: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44786: LD_ADDR_OWVAR 37
44790: PUSH
44791: LD_INT 31
44793: ST_TO_ADDR
// vc_control := control_rider ;
44794: LD_ADDR_OWVAR 38
44798: PUSH
44799: LD_INT 4
44801: ST_TO_ADDR
// end ;
44802: LD_VAR 0 1
44806: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44807: LD_INT 0
44809: PPUSH
44810: PPUSH
44811: PPUSH
// uc_side = 0 ;
44812: LD_ADDR_OWVAR 20
44816: PUSH
44817: LD_INT 0
44819: ST_TO_ADDR
// uc_nation = 0 ;
44820: LD_ADDR_OWVAR 21
44824: PUSH
44825: LD_INT 0
44827: ST_TO_ADDR
// InitHc_All ( ) ;
44828: CALL_OW 584
// InitVc ;
44832: CALL_OW 20
// if mastodonts then
44836: LD_VAR 0 6
44840: IFFALSE 44907
// for i = 1 to mastodonts do
44842: LD_ADDR_VAR 0 11
44846: PUSH
44847: DOUBLE
44848: LD_INT 1
44850: DEC
44851: ST_TO_ADDR
44852: LD_VAR 0 6
44856: PUSH
44857: FOR_TO
44858: IFFALSE 44905
// begin vc_chassis := 31 ;
44860: LD_ADDR_OWVAR 37
44864: PUSH
44865: LD_INT 31
44867: ST_TO_ADDR
// vc_control := control_rider ;
44868: LD_ADDR_OWVAR 38
44872: PUSH
44873: LD_INT 4
44875: ST_TO_ADDR
// animal := CreateVehicle ;
44876: LD_ADDR_VAR 0 12
44880: PUSH
44881: CALL_OW 45
44885: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44886: LD_VAR 0 12
44890: PPUSH
44891: LD_VAR 0 8
44895: PPUSH
44896: LD_INT 0
44898: PPUSH
44899: CALL 47049 0 3
// end ;
44903: GO 44857
44905: POP
44906: POP
// if horses then
44907: LD_VAR 0 5
44911: IFFALSE 44978
// for i = 1 to horses do
44913: LD_ADDR_VAR 0 11
44917: PUSH
44918: DOUBLE
44919: LD_INT 1
44921: DEC
44922: ST_TO_ADDR
44923: LD_VAR 0 5
44927: PUSH
44928: FOR_TO
44929: IFFALSE 44976
// begin hc_class := 21 ;
44931: LD_ADDR_OWVAR 28
44935: PUSH
44936: LD_INT 21
44938: ST_TO_ADDR
// hc_gallery :=  ;
44939: LD_ADDR_OWVAR 33
44943: PUSH
44944: LD_STRING 
44946: ST_TO_ADDR
// animal := CreateHuman ;
44947: LD_ADDR_VAR 0 12
44951: PUSH
44952: CALL_OW 44
44956: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44957: LD_VAR 0 12
44961: PPUSH
44962: LD_VAR 0 8
44966: PPUSH
44967: LD_INT 0
44969: PPUSH
44970: CALL 47049 0 3
// end ;
44974: GO 44928
44976: POP
44977: POP
// if birds then
44978: LD_VAR 0 1
44982: IFFALSE 45049
// for i = 1 to birds do
44984: LD_ADDR_VAR 0 11
44988: PUSH
44989: DOUBLE
44990: LD_INT 1
44992: DEC
44993: ST_TO_ADDR
44994: LD_VAR 0 1
44998: PUSH
44999: FOR_TO
45000: IFFALSE 45047
// begin hc_class := 18 ;
45002: LD_ADDR_OWVAR 28
45006: PUSH
45007: LD_INT 18
45009: ST_TO_ADDR
// hc_gallery =  ;
45010: LD_ADDR_OWVAR 33
45014: PUSH
45015: LD_STRING 
45017: ST_TO_ADDR
// animal := CreateHuman ;
45018: LD_ADDR_VAR 0 12
45022: PUSH
45023: CALL_OW 44
45027: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45028: LD_VAR 0 12
45032: PPUSH
45033: LD_VAR 0 8
45037: PPUSH
45038: LD_INT 0
45040: PPUSH
45041: CALL 47049 0 3
// end ;
45045: GO 44999
45047: POP
45048: POP
// if tigers then
45049: LD_VAR 0 2
45053: IFFALSE 45137
// for i = 1 to tigers do
45055: LD_ADDR_VAR 0 11
45059: PUSH
45060: DOUBLE
45061: LD_INT 1
45063: DEC
45064: ST_TO_ADDR
45065: LD_VAR 0 2
45069: PUSH
45070: FOR_TO
45071: IFFALSE 45135
// begin hc_class = class_tiger ;
45073: LD_ADDR_OWVAR 28
45077: PUSH
45078: LD_INT 14
45080: ST_TO_ADDR
// hc_gallery =  ;
45081: LD_ADDR_OWVAR 33
45085: PUSH
45086: LD_STRING 
45088: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45089: LD_ADDR_OWVAR 35
45093: PUSH
45094: LD_INT 7
45096: NEG
45097: PPUSH
45098: LD_INT 7
45100: PPUSH
45101: CALL_OW 12
45105: ST_TO_ADDR
// animal := CreateHuman ;
45106: LD_ADDR_VAR 0 12
45110: PUSH
45111: CALL_OW 44
45115: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45116: LD_VAR 0 12
45120: PPUSH
45121: LD_VAR 0 8
45125: PPUSH
45126: LD_INT 0
45128: PPUSH
45129: CALL 47049 0 3
// end ;
45133: GO 45070
45135: POP
45136: POP
// if apemans then
45137: LD_VAR 0 3
45141: IFFALSE 45264
// for i = 1 to apemans do
45143: LD_ADDR_VAR 0 11
45147: PUSH
45148: DOUBLE
45149: LD_INT 1
45151: DEC
45152: ST_TO_ADDR
45153: LD_VAR 0 3
45157: PUSH
45158: FOR_TO
45159: IFFALSE 45262
// begin hc_class = class_apeman ;
45161: LD_ADDR_OWVAR 28
45165: PUSH
45166: LD_INT 12
45168: ST_TO_ADDR
// hc_gallery =  ;
45169: LD_ADDR_OWVAR 33
45173: PUSH
45174: LD_STRING 
45176: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45177: LD_ADDR_OWVAR 35
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PPUSH
45186: LD_INT 2
45188: PPUSH
45189: CALL_OW 12
45193: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45194: LD_ADDR_OWVAR 31
45198: PUSH
45199: LD_INT 1
45201: PPUSH
45202: LD_INT 3
45204: PPUSH
45205: CALL_OW 12
45209: PUSH
45210: LD_INT 1
45212: PPUSH
45213: LD_INT 3
45215: PPUSH
45216: CALL_OW 12
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: ST_TO_ADDR
// animal := CreateHuman ;
45233: LD_ADDR_VAR 0 12
45237: PUSH
45238: CALL_OW 44
45242: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45243: LD_VAR 0 12
45247: PPUSH
45248: LD_VAR 0 8
45252: PPUSH
45253: LD_INT 0
45255: PPUSH
45256: CALL 47049 0 3
// end ;
45260: GO 45158
45262: POP
45263: POP
// if enchidnas then
45264: LD_VAR 0 4
45268: IFFALSE 45335
// for i = 1 to enchidnas do
45270: LD_ADDR_VAR 0 11
45274: PUSH
45275: DOUBLE
45276: LD_INT 1
45278: DEC
45279: ST_TO_ADDR
45280: LD_VAR 0 4
45284: PUSH
45285: FOR_TO
45286: IFFALSE 45333
// begin hc_class = 13 ;
45288: LD_ADDR_OWVAR 28
45292: PUSH
45293: LD_INT 13
45295: ST_TO_ADDR
// hc_gallery =  ;
45296: LD_ADDR_OWVAR 33
45300: PUSH
45301: LD_STRING 
45303: ST_TO_ADDR
// animal := CreateHuman ;
45304: LD_ADDR_VAR 0 12
45308: PUSH
45309: CALL_OW 44
45313: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45314: LD_VAR 0 12
45318: PPUSH
45319: LD_VAR 0 8
45323: PPUSH
45324: LD_INT 0
45326: PPUSH
45327: CALL 47049 0 3
// end ;
45331: GO 45285
45333: POP
45334: POP
// if fishes then
45335: LD_VAR 0 7
45339: IFFALSE 45406
// for i = 1 to fishes do
45341: LD_ADDR_VAR 0 11
45345: PUSH
45346: DOUBLE
45347: LD_INT 1
45349: DEC
45350: ST_TO_ADDR
45351: LD_VAR 0 7
45355: PUSH
45356: FOR_TO
45357: IFFALSE 45404
// begin hc_class = 20 ;
45359: LD_ADDR_OWVAR 28
45363: PUSH
45364: LD_INT 20
45366: ST_TO_ADDR
// hc_gallery =  ;
45367: LD_ADDR_OWVAR 33
45371: PUSH
45372: LD_STRING 
45374: ST_TO_ADDR
// animal := CreateHuman ;
45375: LD_ADDR_VAR 0 12
45379: PUSH
45380: CALL_OW 44
45384: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45385: LD_VAR 0 12
45389: PPUSH
45390: LD_VAR 0 9
45394: PPUSH
45395: LD_INT 0
45397: PPUSH
45398: CALL 47049 0 3
// end ;
45402: GO 45356
45404: POP
45405: POP
// end ;
45406: LD_VAR 0 10
45410: RET
// export function WantHeal ( sci , unit ) ; begin
45411: LD_INT 0
45413: PPUSH
// if GetTaskList ( sci ) > 0 then
45414: LD_VAR 0 1
45418: PPUSH
45419: CALL_OW 437
45423: PUSH
45424: LD_INT 0
45426: GREATER
45427: IFFALSE 45499
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45429: LD_VAR 0 1
45433: PPUSH
45434: CALL_OW 437
45438: PUSH
45439: LD_INT 1
45441: ARRAY
45442: PUSH
45443: LD_INT 1
45445: ARRAY
45446: PUSH
45447: LD_STRING l
45449: EQUAL
45450: IFFALSE 45477
45452: PUSH
45453: LD_VAR 0 1
45457: PPUSH
45458: CALL_OW 437
45462: PUSH
45463: LD_INT 1
45465: ARRAY
45466: PUSH
45467: LD_INT 4
45469: ARRAY
45470: PUSH
45471: LD_VAR 0 2
45475: EQUAL
45476: AND
45477: IFFALSE 45489
// result := true else
45479: LD_ADDR_VAR 0 3
45483: PUSH
45484: LD_INT 1
45486: ST_TO_ADDR
45487: GO 45497
// result := false ;
45489: LD_ADDR_VAR 0 3
45493: PUSH
45494: LD_INT 0
45496: ST_TO_ADDR
// end else
45497: GO 45507
// result := false ;
45499: LD_ADDR_VAR 0 3
45503: PUSH
45504: LD_INT 0
45506: ST_TO_ADDR
// end ;
45507: LD_VAR 0 3
45511: RET
// export function HealTarget ( sci ) ; begin
45512: LD_INT 0
45514: PPUSH
// if not sci then
45515: LD_VAR 0 1
45519: NOT
45520: IFFALSE 45524
// exit ;
45522: GO 45589
// result := 0 ;
45524: LD_ADDR_VAR 0 2
45528: PUSH
45529: LD_INT 0
45531: ST_TO_ADDR
// if GetTaskList ( sci ) then
45532: LD_VAR 0 1
45536: PPUSH
45537: CALL_OW 437
45541: IFFALSE 45589
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45543: LD_VAR 0 1
45547: PPUSH
45548: CALL_OW 437
45552: PUSH
45553: LD_INT 1
45555: ARRAY
45556: PUSH
45557: LD_INT 1
45559: ARRAY
45560: PUSH
45561: LD_STRING l
45563: EQUAL
45564: IFFALSE 45589
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45566: LD_ADDR_VAR 0 2
45570: PUSH
45571: LD_VAR 0 1
45575: PPUSH
45576: CALL_OW 437
45580: PUSH
45581: LD_INT 1
45583: ARRAY
45584: PUSH
45585: LD_INT 4
45587: ARRAY
45588: ST_TO_ADDR
// end ;
45589: LD_VAR 0 2
45593: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45594: LD_INT 0
45596: PPUSH
45597: PPUSH
45598: PPUSH
45599: PPUSH
// if not base_units then
45600: LD_VAR 0 1
45604: NOT
45605: IFFALSE 45609
// exit ;
45607: GO 45696
// result := false ;
45609: LD_ADDR_VAR 0 2
45613: PUSH
45614: LD_INT 0
45616: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45617: LD_ADDR_VAR 0 5
45621: PUSH
45622: LD_VAR 0 1
45626: PPUSH
45627: LD_INT 21
45629: PUSH
45630: LD_INT 3
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PPUSH
45637: CALL_OW 72
45641: ST_TO_ADDR
// if not tmp then
45642: LD_VAR 0 5
45646: NOT
45647: IFFALSE 45651
// exit ;
45649: GO 45696
// for i in tmp do
45651: LD_ADDR_VAR 0 3
45655: PUSH
45656: LD_VAR 0 5
45660: PUSH
45661: FOR_IN
45662: IFFALSE 45694
// begin result := EnemyInRange ( i , 22 ) ;
45664: LD_ADDR_VAR 0 2
45668: PUSH
45669: LD_VAR 0 3
45673: PPUSH
45674: LD_INT 22
45676: PPUSH
45677: CALL 43121 0 2
45681: ST_TO_ADDR
// if result then
45682: LD_VAR 0 2
45686: IFFALSE 45692
// exit ;
45688: POP
45689: POP
45690: GO 45696
// end ;
45692: GO 45661
45694: POP
45695: POP
// end ;
45696: LD_VAR 0 2
45700: RET
// export function FilterByTag ( units , tag ) ; begin
45701: LD_INT 0
45703: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45704: LD_ADDR_VAR 0 3
45708: PUSH
45709: LD_VAR 0 1
45713: PPUSH
45714: LD_INT 120
45716: PUSH
45717: LD_VAR 0 2
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PPUSH
45726: CALL_OW 72
45730: ST_TO_ADDR
// end ;
45731: LD_VAR 0 3
45735: RET
// export function IsDriver ( un ) ; begin
45736: LD_INT 0
45738: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45739: LD_ADDR_VAR 0 2
45743: PUSH
45744: LD_VAR 0 1
45748: PUSH
45749: LD_INT 55
45751: PUSH
45752: EMPTY
45753: LIST
45754: PPUSH
45755: CALL_OW 69
45759: IN
45760: ST_TO_ADDR
// end ;
45761: LD_VAR 0 2
45765: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45766: LD_INT 0
45768: PPUSH
45769: PPUSH
// list := [ ] ;
45770: LD_ADDR_VAR 0 5
45774: PUSH
45775: EMPTY
45776: ST_TO_ADDR
// case d of 0 :
45777: LD_VAR 0 3
45781: PUSH
45782: LD_INT 0
45784: DOUBLE
45785: EQUAL
45786: IFTRUE 45790
45788: GO 45923
45790: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45791: LD_ADDR_VAR 0 5
45795: PUSH
45796: LD_VAR 0 1
45800: PUSH
45801: LD_INT 4
45803: MINUS
45804: PUSH
45805: LD_VAR 0 2
45809: PUSH
45810: LD_INT 4
45812: MINUS
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: LIST
45821: PUSH
45822: LD_VAR 0 1
45826: PUSH
45827: LD_INT 3
45829: MINUS
45830: PUSH
45831: LD_VAR 0 2
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: LIST
45843: PUSH
45844: LD_VAR 0 1
45848: PUSH
45849: LD_INT 4
45851: PLUS
45852: PUSH
45853: LD_VAR 0 2
45857: PUSH
45858: LD_INT 4
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: LIST
45865: PUSH
45866: LD_VAR 0 1
45870: PUSH
45871: LD_INT 3
45873: PLUS
45874: PUSH
45875: LD_VAR 0 2
45879: PUSH
45880: LD_INT 3
45882: PLUS
45883: PUSH
45884: LD_INT 5
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: LIST
45891: PUSH
45892: LD_VAR 0 1
45896: PUSH
45897: LD_VAR 0 2
45901: PUSH
45902: LD_INT 4
45904: PLUS
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: LIST
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: ST_TO_ADDR
// end ; 1 :
45921: GO 46621
45923: LD_INT 1
45925: DOUBLE
45926: EQUAL
45927: IFTRUE 45931
45929: GO 46064
45931: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45932: LD_ADDR_VAR 0 5
45936: PUSH
45937: LD_VAR 0 1
45941: PUSH
45942: LD_VAR 0 2
45946: PUSH
45947: LD_INT 4
45949: MINUS
45950: PUSH
45951: LD_INT 3
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: LIST
45958: PUSH
45959: LD_VAR 0 1
45963: PUSH
45964: LD_INT 3
45966: MINUS
45967: PUSH
45968: LD_VAR 0 2
45972: PUSH
45973: LD_INT 3
45975: MINUS
45976: PUSH
45977: LD_INT 2
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: LIST
45984: PUSH
45985: LD_VAR 0 1
45989: PUSH
45990: LD_INT 4
45992: MINUS
45993: PUSH
45994: LD_VAR 0 2
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: LIST
46006: PUSH
46007: LD_VAR 0 1
46011: PUSH
46012: LD_VAR 0 2
46016: PUSH
46017: LD_INT 3
46019: PLUS
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: LIST
46028: PUSH
46029: LD_VAR 0 1
46033: PUSH
46034: LD_INT 4
46036: PLUS
46037: PUSH
46038: LD_VAR 0 2
46042: PUSH
46043: LD_INT 4
46045: PLUS
46046: PUSH
46047: LD_INT 5
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: LIST
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: ST_TO_ADDR
// end ; 2 :
46062: GO 46621
46064: LD_INT 2
46066: DOUBLE
46067: EQUAL
46068: IFTRUE 46072
46070: GO 46201
46072: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46073: LD_ADDR_VAR 0 5
46077: PUSH
46078: LD_VAR 0 1
46082: PUSH
46083: LD_VAR 0 2
46087: PUSH
46088: LD_INT 3
46090: MINUS
46091: PUSH
46092: LD_INT 3
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: LIST
46099: PUSH
46100: LD_VAR 0 1
46104: PUSH
46105: LD_INT 4
46107: PLUS
46108: PUSH
46109: LD_VAR 0 2
46113: PUSH
46114: LD_INT 4
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: LIST
46121: PUSH
46122: LD_VAR 0 1
46126: PUSH
46127: LD_VAR 0 2
46131: PUSH
46132: LD_INT 4
46134: PLUS
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: LIST
46143: PUSH
46144: LD_VAR 0 1
46148: PUSH
46149: LD_INT 3
46151: MINUS
46152: PUSH
46153: LD_VAR 0 2
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: LIST
46165: PUSH
46166: LD_VAR 0 1
46170: PUSH
46171: LD_INT 4
46173: MINUS
46174: PUSH
46175: LD_VAR 0 2
46179: PUSH
46180: LD_INT 4
46182: MINUS
46183: PUSH
46184: LD_INT 2
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: LIST
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: ST_TO_ADDR
// end ; 3 :
46199: GO 46621
46201: LD_INT 3
46203: DOUBLE
46204: EQUAL
46205: IFTRUE 46209
46207: GO 46342
46209: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46210: LD_ADDR_VAR 0 5
46214: PUSH
46215: LD_VAR 0 1
46219: PUSH
46220: LD_INT 3
46222: PLUS
46223: PUSH
46224: LD_VAR 0 2
46228: PUSH
46229: LD_INT 4
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: LIST
46236: PUSH
46237: LD_VAR 0 1
46241: PUSH
46242: LD_INT 4
46244: PLUS
46245: PUSH
46246: LD_VAR 0 2
46250: PUSH
46251: LD_INT 4
46253: PLUS
46254: PUSH
46255: LD_INT 5
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: PUSH
46263: LD_VAR 0 1
46267: PUSH
46268: LD_INT 4
46270: MINUS
46271: PUSH
46272: LD_VAR 0 2
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: LIST
46284: PUSH
46285: LD_VAR 0 1
46289: PUSH
46290: LD_VAR 0 2
46294: PUSH
46295: LD_INT 4
46297: MINUS
46298: PUSH
46299: LD_INT 3
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: LIST
46306: PUSH
46307: LD_VAR 0 1
46311: PUSH
46312: LD_INT 3
46314: MINUS
46315: PUSH
46316: LD_VAR 0 2
46320: PUSH
46321: LD_INT 3
46323: MINUS
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: LIST
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: ST_TO_ADDR
// end ; 4 :
46340: GO 46621
46342: LD_INT 4
46344: DOUBLE
46345: EQUAL
46346: IFTRUE 46350
46348: GO 46483
46350: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46351: LD_ADDR_VAR 0 5
46355: PUSH
46356: LD_VAR 0 1
46360: PUSH
46361: LD_VAR 0 2
46365: PUSH
46366: LD_INT 4
46368: PLUS
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: LIST
46377: PUSH
46378: LD_VAR 0 1
46382: PUSH
46383: LD_INT 3
46385: PLUS
46386: PUSH
46387: LD_VAR 0 2
46391: PUSH
46392: LD_INT 3
46394: PLUS
46395: PUSH
46396: LD_INT 5
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: LIST
46403: PUSH
46404: LD_VAR 0 1
46408: PUSH
46409: LD_INT 4
46411: PLUS
46412: PUSH
46413: LD_VAR 0 2
46417: PUSH
46418: LD_INT 4
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: LIST
46425: PUSH
46426: LD_VAR 0 1
46430: PUSH
46431: LD_VAR 0 2
46435: PUSH
46436: LD_INT 3
46438: MINUS
46439: PUSH
46440: LD_INT 3
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: LIST
46447: PUSH
46448: LD_VAR 0 1
46452: PUSH
46453: LD_INT 4
46455: MINUS
46456: PUSH
46457: LD_VAR 0 2
46461: PUSH
46462: LD_INT 4
46464: MINUS
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: LIST
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: ST_TO_ADDR
// end ; 5 :
46481: GO 46621
46483: LD_INT 5
46485: DOUBLE
46486: EQUAL
46487: IFTRUE 46491
46489: GO 46620
46491: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46492: LD_ADDR_VAR 0 5
46496: PUSH
46497: LD_VAR 0 1
46501: PUSH
46502: LD_INT 4
46504: MINUS
46505: PUSH
46506: LD_VAR 0 2
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: LIST
46518: PUSH
46519: LD_VAR 0 1
46523: PUSH
46524: LD_VAR 0 2
46528: PUSH
46529: LD_INT 4
46531: MINUS
46532: PUSH
46533: LD_INT 3
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: LIST
46540: PUSH
46541: LD_VAR 0 1
46545: PUSH
46546: LD_INT 4
46548: PLUS
46549: PUSH
46550: LD_VAR 0 2
46554: PUSH
46555: LD_INT 4
46557: PLUS
46558: PUSH
46559: LD_INT 5
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: LIST
46566: PUSH
46567: LD_VAR 0 1
46571: PUSH
46572: LD_INT 3
46574: PLUS
46575: PUSH
46576: LD_VAR 0 2
46580: PUSH
46581: LD_INT 4
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: LIST
46588: PUSH
46589: LD_VAR 0 1
46593: PUSH
46594: LD_VAR 0 2
46598: PUSH
46599: LD_INT 3
46601: PLUS
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: LIST
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: ST_TO_ADDR
// end ; end ;
46618: GO 46621
46620: POP
// result := list ;
46621: LD_ADDR_VAR 0 4
46625: PUSH
46626: LD_VAR 0 5
46630: ST_TO_ADDR
// end ;
46631: LD_VAR 0 4
46635: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46636: LD_INT 0
46638: PPUSH
46639: PPUSH
46640: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46641: LD_VAR 0 1
46645: NOT
46646: IFTRUE 46674
46648: PUSH
46649: LD_VAR 0 2
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: LD_INT 2
46659: PUSH
46660: LD_INT 3
46662: PUSH
46663: LD_INT 4
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: IN
46672: NOT
46673: OR
46674: IFFALSE 46678
// exit ;
46676: GO 46761
// tmp := [ ] ;
46678: LD_ADDR_VAR 0 5
46682: PUSH
46683: EMPTY
46684: ST_TO_ADDR
// for i in units do
46685: LD_ADDR_VAR 0 4
46689: PUSH
46690: LD_VAR 0 1
46694: PUSH
46695: FOR_IN
46696: IFFALSE 46730
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46698: LD_ADDR_VAR 0 5
46702: PUSH
46703: LD_VAR 0 5
46707: PPUSH
46708: LD_VAR 0 4
46712: PPUSH
46713: LD_VAR 0 2
46717: PPUSH
46718: CALL_OW 259
46722: PPUSH
46723: CALL 48156 0 2
46727: ST_TO_ADDR
46728: GO 46695
46730: POP
46731: POP
// if not tmp then
46732: LD_VAR 0 5
46736: NOT
46737: IFFALSE 46741
// exit ;
46739: GO 46761
// result := SortListByListDesc ( units , tmp ) ;
46741: LD_ADDR_VAR 0 3
46745: PUSH
46746: LD_VAR 0 1
46750: PPUSH
46751: LD_VAR 0 5
46755: PPUSH
46756: CALL_OW 77
46760: ST_TO_ADDR
// end ;
46761: LD_VAR 0 3
46765: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46766: LD_INT 0
46768: PPUSH
46769: PPUSH
46770: PPUSH
// result := false ;
46771: LD_ADDR_VAR 0 3
46775: PUSH
46776: LD_INT 0
46778: ST_TO_ADDR
// if not building then
46779: LD_VAR 0 2
46783: NOT
46784: IFFALSE 46788
// exit ;
46786: GO 46932
// x := GetX ( building ) ;
46788: LD_ADDR_VAR 0 4
46792: PUSH
46793: LD_VAR 0 2
46797: PPUSH
46798: CALL_OW 250
46802: ST_TO_ADDR
// y := GetY ( building ) ;
46803: LD_ADDR_VAR 0 5
46807: PUSH
46808: LD_VAR 0 2
46812: PPUSH
46813: CALL_OW 251
46817: ST_TO_ADDR
// if not x or not y then
46818: LD_VAR 0 4
46822: NOT
46823: IFTRUE 46832
46825: PUSH
46826: LD_VAR 0 5
46830: NOT
46831: OR
46832: IFFALSE 46836
// exit ;
46834: GO 46932
// if GetTaskList ( unit ) then
46836: LD_VAR 0 1
46840: PPUSH
46841: CALL_OW 437
46845: IFFALSE 46932
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46847: LD_STRING e
46849: PUSH
46850: LD_VAR 0 1
46854: PPUSH
46855: CALL_OW 437
46859: PUSH
46860: LD_INT 1
46862: ARRAY
46863: PUSH
46864: LD_INT 1
46866: ARRAY
46867: EQUAL
46868: IFFALSE 46895
46870: PUSH
46871: LD_VAR 0 4
46875: PUSH
46876: LD_VAR 0 1
46880: PPUSH
46881: CALL_OW 437
46885: PUSH
46886: LD_INT 1
46888: ARRAY
46889: PUSH
46890: LD_INT 2
46892: ARRAY
46893: EQUAL
46894: AND
46895: IFFALSE 46922
46897: PUSH
46898: LD_VAR 0 5
46902: PUSH
46903: LD_VAR 0 1
46907: PPUSH
46908: CALL_OW 437
46912: PUSH
46913: LD_INT 1
46915: ARRAY
46916: PUSH
46917: LD_INT 3
46919: ARRAY
46920: EQUAL
46921: AND
46922: IFFALSE 46932
// result := true end ;
46924: LD_ADDR_VAR 0 3
46928: PUSH
46929: LD_INT 1
46931: ST_TO_ADDR
// end ;
46932: LD_VAR 0 3
46936: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46937: LD_INT 0
46939: PPUSH
// result := false ;
46940: LD_ADDR_VAR 0 4
46944: PUSH
46945: LD_INT 0
46947: ST_TO_ADDR
// if GetTaskList ( unit ) then
46948: LD_VAR 0 1
46952: PPUSH
46953: CALL_OW 437
46957: IFFALSE 47044
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46959: LD_STRING M
46961: PUSH
46962: LD_VAR 0 1
46966: PPUSH
46967: CALL_OW 437
46971: PUSH
46972: LD_INT 1
46974: ARRAY
46975: PUSH
46976: LD_INT 1
46978: ARRAY
46979: EQUAL
46980: IFFALSE 47007
46982: PUSH
46983: LD_VAR 0 2
46987: PUSH
46988: LD_VAR 0 1
46992: PPUSH
46993: CALL_OW 437
46997: PUSH
46998: LD_INT 1
47000: ARRAY
47001: PUSH
47002: LD_INT 2
47004: ARRAY
47005: EQUAL
47006: AND
47007: IFFALSE 47034
47009: PUSH
47010: LD_VAR 0 3
47014: PUSH
47015: LD_VAR 0 1
47019: PPUSH
47020: CALL_OW 437
47024: PUSH
47025: LD_INT 1
47027: ARRAY
47028: PUSH
47029: LD_INT 3
47031: ARRAY
47032: EQUAL
47033: AND
47034: IFFALSE 47044
// result := true ;
47036: LD_ADDR_VAR 0 4
47040: PUSH
47041: LD_INT 1
47043: ST_TO_ADDR
// end ; end ;
47044: LD_VAR 0 4
47048: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47049: LD_INT 0
47051: PPUSH
47052: PPUSH
47053: PPUSH
47054: PPUSH
// if not unit or not area then
47055: LD_VAR 0 1
47059: NOT
47060: IFTRUE 47069
47062: PUSH
47063: LD_VAR 0 2
47067: NOT
47068: OR
47069: IFFALSE 47073
// exit ;
47071: GO 47249
// tmp := AreaToList ( area , i ) ;
47073: LD_ADDR_VAR 0 6
47077: PUSH
47078: LD_VAR 0 2
47082: PPUSH
47083: LD_VAR 0 5
47087: PPUSH
47088: CALL_OW 517
47092: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47093: LD_ADDR_VAR 0 5
47097: PUSH
47098: DOUBLE
47099: LD_INT 1
47101: DEC
47102: ST_TO_ADDR
47103: LD_VAR 0 6
47107: PUSH
47108: LD_INT 1
47110: ARRAY
47111: PUSH
47112: FOR_TO
47113: IFFALSE 47247
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47115: LD_ADDR_VAR 0 7
47119: PUSH
47120: LD_VAR 0 6
47124: PUSH
47125: LD_INT 1
47127: ARRAY
47128: PUSH
47129: LD_VAR 0 5
47133: ARRAY
47134: PUSH
47135: LD_VAR 0 6
47139: PUSH
47140: LD_INT 2
47142: ARRAY
47143: PUSH
47144: LD_VAR 0 5
47148: ARRAY
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47154: LD_INT 92
47156: PUSH
47157: LD_VAR 0 7
47161: PUSH
47162: LD_INT 1
47164: ARRAY
47165: PUSH
47166: LD_VAR 0 7
47170: PUSH
47171: LD_INT 2
47173: ARRAY
47174: PUSH
47175: LD_INT 2
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: PPUSH
47184: CALL_OW 69
47188: PUSH
47189: LD_INT 0
47191: EQUAL
47192: IFFALSE 47245
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47194: LD_VAR 0 1
47198: PPUSH
47199: LD_VAR 0 7
47203: PUSH
47204: LD_INT 1
47206: ARRAY
47207: PPUSH
47208: LD_VAR 0 7
47212: PUSH
47213: LD_INT 2
47215: ARRAY
47216: PPUSH
47217: LD_VAR 0 3
47221: PPUSH
47222: CALL_OW 48
// result := IsPlaced ( unit ) ;
47226: LD_ADDR_VAR 0 4
47230: PUSH
47231: LD_VAR 0 1
47235: PPUSH
47236: CALL_OW 305
47240: ST_TO_ADDR
// exit ;
47241: POP
47242: POP
47243: GO 47249
// end ; end ;
47245: GO 47112
47247: POP
47248: POP
// end ;
47249: LD_VAR 0 4
47253: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47254: LD_INT 0
47256: PPUSH
47257: PPUSH
47258: PPUSH
// if not side or side > 8 then
47259: LD_VAR 0 1
47263: NOT
47264: IFTRUE 47276
47266: PUSH
47267: LD_VAR 0 1
47271: PUSH
47272: LD_INT 8
47274: GREATER
47275: OR
47276: IFFALSE 47280
// exit ;
47278: GO 47467
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47280: LD_ADDR_VAR 0 4
47284: PUSH
47285: LD_INT 22
47287: PUSH
47288: LD_VAR 0 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 21
47299: PUSH
47300: LD_INT 3
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PPUSH
47311: CALL_OW 69
47315: ST_TO_ADDR
// if not tmp then
47316: LD_VAR 0 4
47320: NOT
47321: IFFALSE 47325
// exit ;
47323: GO 47467
// enable_addtolog := true ;
47325: LD_ADDR_OWVAR 81
47329: PUSH
47330: LD_INT 1
47332: ST_TO_ADDR
// AddToLog ( [ ) ;
47333: LD_STRING [
47335: PPUSH
47336: CALL_OW 561
// for i in tmp do
47340: LD_ADDR_VAR 0 3
47344: PUSH
47345: LD_VAR 0 4
47349: PUSH
47350: FOR_IN
47351: IFFALSE 47458
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47353: LD_STRING [
47355: PUSH
47356: LD_VAR 0 3
47360: PPUSH
47361: CALL_OW 266
47365: STR
47366: PUSH
47367: LD_STRING , 
47369: STR
47370: PUSH
47371: LD_VAR 0 3
47375: PPUSH
47376: CALL_OW 250
47380: STR
47381: PUSH
47382: LD_STRING , 
47384: STR
47385: PUSH
47386: LD_VAR 0 3
47390: PPUSH
47391: CALL_OW 251
47395: STR
47396: PUSH
47397: LD_STRING , 
47399: STR
47400: PUSH
47401: LD_VAR 0 3
47405: PPUSH
47406: CALL_OW 254
47410: STR
47411: PUSH
47412: LD_STRING , 
47414: STR
47415: PUSH
47416: LD_VAR 0 3
47420: PPUSH
47421: LD_INT 1
47423: PPUSH
47424: CALL_OW 268
47428: STR
47429: PUSH
47430: LD_STRING , 
47432: STR
47433: PUSH
47434: LD_VAR 0 3
47438: PPUSH
47439: LD_INT 2
47441: PPUSH
47442: CALL_OW 268
47446: STR
47447: PUSH
47448: LD_STRING ],
47450: STR
47451: PPUSH
47452: CALL_OW 561
// end ;
47456: GO 47350
47458: POP
47459: POP
// AddToLog ( ]; ) ;
47460: LD_STRING ];
47462: PPUSH
47463: CALL_OW 561
// end ;
47467: LD_VAR 0 2
47471: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47472: LD_INT 0
47474: PPUSH
47475: PPUSH
47476: PPUSH
47477: PPUSH
47478: PPUSH
// if not area or not rate or not max then
47479: LD_VAR 0 1
47483: NOT
47484: IFTRUE 47493
47486: PUSH
47487: LD_VAR 0 2
47491: NOT
47492: OR
47493: IFTRUE 47502
47495: PUSH
47496: LD_VAR 0 4
47500: NOT
47501: OR
47502: IFFALSE 47506
// exit ;
47504: GO 47695
// while 1 do
47506: LD_INT 1
47508: IFFALSE 47695
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47510: LD_ADDR_VAR 0 9
47514: PUSH
47515: LD_VAR 0 1
47519: PPUSH
47520: LD_INT 1
47522: PPUSH
47523: CALL_OW 287
47527: PUSH
47528: LD_INT 10
47530: MUL
47531: ST_TO_ADDR
// r := rate / 10 ;
47532: LD_ADDR_VAR 0 7
47536: PUSH
47537: LD_VAR 0 2
47541: PUSH
47542: LD_INT 10
47544: DIVREAL
47545: ST_TO_ADDR
// time := 1 1$00 ;
47546: LD_ADDR_VAR 0 8
47550: PUSH
47551: LD_INT 2100
47553: ST_TO_ADDR
// if amount < min then
47554: LD_VAR 0 9
47558: PUSH
47559: LD_VAR 0 3
47563: LESS
47564: IFFALSE 47582
// r := r * 2 else
47566: LD_ADDR_VAR 0 7
47570: PUSH
47571: LD_VAR 0 7
47575: PUSH
47576: LD_INT 2
47578: MUL
47579: ST_TO_ADDR
47580: GO 47608
// if amount > max then
47582: LD_VAR 0 9
47586: PUSH
47587: LD_VAR 0 4
47591: GREATER
47592: IFFALSE 47608
// r := r / 2 ;
47594: LD_ADDR_VAR 0 7
47598: PUSH
47599: LD_VAR 0 7
47603: PUSH
47604: LD_INT 2
47606: DIVREAL
47607: ST_TO_ADDR
// time := time / r ;
47608: LD_ADDR_VAR 0 8
47612: PUSH
47613: LD_VAR 0 8
47617: PUSH
47618: LD_VAR 0 7
47622: DIVREAL
47623: ST_TO_ADDR
// if time < 0 then
47624: LD_VAR 0 8
47628: PUSH
47629: LD_INT 0
47631: LESS
47632: IFFALSE 47649
// time := time * - 1 ;
47634: LD_ADDR_VAR 0 8
47638: PUSH
47639: LD_VAR 0 8
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: MUL
47648: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47649: LD_VAR 0 8
47653: PUSH
47654: LD_INT 35
47656: PPUSH
47657: LD_INT 875
47659: PPUSH
47660: CALL_OW 12
47664: PLUS
47665: PPUSH
47666: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47670: LD_INT 1
47672: PPUSH
47673: LD_INT 5
47675: PPUSH
47676: CALL_OW 12
47680: PPUSH
47681: LD_VAR 0 1
47685: PPUSH
47686: LD_INT 1
47688: PPUSH
47689: CALL_OW 55
// end ;
47693: GO 47506
// end ;
47695: LD_VAR 0 5
47699: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47700: LD_INT 0
47702: PPUSH
47703: PPUSH
47704: PPUSH
47705: PPUSH
47706: PPUSH
47707: PPUSH
47708: PPUSH
47709: PPUSH
// if not turrets or not factories then
47710: LD_VAR 0 1
47714: NOT
47715: IFTRUE 47724
47717: PUSH
47718: LD_VAR 0 2
47722: NOT
47723: OR
47724: IFFALSE 47728
// exit ;
47726: GO 48035
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47728: LD_ADDR_VAR 0 10
47732: PUSH
47733: LD_INT 5
47735: PUSH
47736: LD_INT 6
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: LD_INT 4
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 3
47755: PUSH
47756: LD_INT 5
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 24
47770: PUSH
47771: LD_INT 25
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 23
47780: PUSH
47781: LD_INT 27
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 42
47794: PUSH
47795: LD_INT 43
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 44
47804: PUSH
47805: LD_INT 46
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 45
47814: PUSH
47815: LD_INT 47
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: LIST
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: LIST
47831: ST_TO_ADDR
// result := [ ] ;
47832: LD_ADDR_VAR 0 3
47836: PUSH
47837: EMPTY
47838: ST_TO_ADDR
// for i in turrets do
47839: LD_ADDR_VAR 0 4
47843: PUSH
47844: LD_VAR 0 1
47848: PUSH
47849: FOR_IN
47850: IFFALSE 48033
// begin nat := GetNation ( i ) ;
47852: LD_ADDR_VAR 0 7
47856: PUSH
47857: LD_VAR 0 4
47861: PPUSH
47862: CALL_OW 248
47866: ST_TO_ADDR
// weapon := 0 ;
47867: LD_ADDR_VAR 0 8
47871: PUSH
47872: LD_INT 0
47874: ST_TO_ADDR
// if not nat then
47875: LD_VAR 0 7
47879: NOT
47880: IFFALSE 47884
// continue ;
47882: GO 47849
// for j in list [ nat ] do
47884: LD_ADDR_VAR 0 5
47888: PUSH
47889: LD_VAR 0 10
47893: PUSH
47894: LD_VAR 0 7
47898: ARRAY
47899: PUSH
47900: FOR_IN
47901: IFFALSE 47942
// if GetBWeapon ( i ) = j [ 1 ] then
47903: LD_VAR 0 4
47907: PPUSH
47908: CALL_OW 269
47912: PUSH
47913: LD_VAR 0 5
47917: PUSH
47918: LD_INT 1
47920: ARRAY
47921: EQUAL
47922: IFFALSE 47940
// begin weapon := j [ 2 ] ;
47924: LD_ADDR_VAR 0 8
47928: PUSH
47929: LD_VAR 0 5
47933: PUSH
47934: LD_INT 2
47936: ARRAY
47937: ST_TO_ADDR
// break ;
47938: GO 47942
// end ;
47940: GO 47900
47942: POP
47943: POP
// if not weapon then
47944: LD_VAR 0 8
47948: NOT
47949: IFFALSE 47953
// continue ;
47951: GO 47849
// for k in factories do
47953: LD_ADDR_VAR 0 6
47957: PUSH
47958: LD_VAR 0 2
47962: PUSH
47963: FOR_IN
47964: IFFALSE 48029
// begin weapons := AvailableWeaponList ( k ) ;
47966: LD_ADDR_VAR 0 9
47970: PUSH
47971: LD_VAR 0 6
47975: PPUSH
47976: CALL_OW 478
47980: ST_TO_ADDR
// if not weapons then
47981: LD_VAR 0 9
47985: NOT
47986: IFFALSE 47990
// continue ;
47988: GO 47963
// if weapon in weapons then
47990: LD_VAR 0 8
47994: PUSH
47995: LD_VAR 0 9
47999: IN
48000: IFFALSE 48027
// begin result := [ i , weapon ] ;
48002: LD_ADDR_VAR 0 3
48006: PUSH
48007: LD_VAR 0 4
48011: PUSH
48012: LD_VAR 0 8
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: ST_TO_ADDR
// exit ;
48021: POP
48022: POP
48023: POP
48024: POP
48025: GO 48035
// end ; end ;
48027: GO 47963
48029: POP
48030: POP
// end ;
48031: GO 47849
48033: POP
48034: POP
// end ;
48035: LD_VAR 0 3
48039: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48040: LD_INT 0
48042: PPUSH
// if not side or side > 8 then
48043: LD_VAR 0 3
48047: NOT
48048: IFTRUE 48060
48050: PUSH
48051: LD_VAR 0 3
48055: PUSH
48056: LD_INT 8
48058: GREATER
48059: OR
48060: IFFALSE 48064
// exit ;
48062: GO 48123
// if not range then
48064: LD_VAR 0 4
48068: NOT
48069: IFFALSE 48080
// range := - 12 ;
48071: LD_ADDR_VAR 0 4
48075: PUSH
48076: LD_INT 12
48078: NEG
48079: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48080: LD_VAR 0 1
48084: PPUSH
48085: LD_VAR 0 2
48089: PPUSH
48090: LD_VAR 0 3
48094: PPUSH
48095: LD_VAR 0 4
48099: PPUSH
48100: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48104: LD_VAR 0 1
48108: PPUSH
48109: LD_VAR 0 2
48113: PPUSH
48114: LD_VAR 0 3
48118: PPUSH
48119: CALL_OW 331
// end ;
48123: LD_VAR 0 5
48127: RET
// export function Video ( mode ) ; begin
48128: LD_INT 0
48130: PPUSH
// ingame_video = mode ;
48131: LD_ADDR_OWVAR 52
48135: PUSH
48136: LD_VAR 0 1
48140: ST_TO_ADDR
// interface_hidden = mode ;
48141: LD_ADDR_OWVAR 54
48145: PUSH
48146: LD_VAR 0 1
48150: ST_TO_ADDR
// end ;
48151: LD_VAR 0 2
48155: RET
// export function Join ( array , element ) ; begin
48156: LD_INT 0
48158: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48159: LD_ADDR_VAR 0 3
48163: PUSH
48164: LD_VAR 0 1
48168: PPUSH
48169: LD_VAR 0 1
48173: PUSH
48174: LD_INT 1
48176: PLUS
48177: PPUSH
48178: LD_VAR 0 2
48182: PPUSH
48183: CALL_OW 1
48187: ST_TO_ADDR
// end ;
48188: LD_VAR 0 3
48192: RET
// export function JoinUnion ( array , element ) ; begin
48193: LD_INT 0
48195: PPUSH
// result := array union element ;
48196: LD_ADDR_VAR 0 3
48200: PUSH
48201: LD_VAR 0 1
48205: PUSH
48206: LD_VAR 0 2
48210: UNION
48211: ST_TO_ADDR
// end ;
48212: LD_VAR 0 3
48216: RET
// export function GetBehemoths ( side ) ; begin
48217: LD_INT 0
48219: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48220: LD_ADDR_VAR 0 2
48224: PUSH
48225: LD_INT 22
48227: PUSH
48228: LD_VAR 0 1
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 31
48239: PUSH
48240: LD_INT 25
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PPUSH
48251: CALL_OW 69
48255: ST_TO_ADDR
// end ;
48256: LD_VAR 0 2
48260: RET
// export function Shuffle ( array ) ; var i , index ; begin
48261: LD_INT 0
48263: PPUSH
48264: PPUSH
48265: PPUSH
// result := [ ] ;
48266: LD_ADDR_VAR 0 2
48270: PUSH
48271: EMPTY
48272: ST_TO_ADDR
// if not array then
48273: LD_VAR 0 1
48277: NOT
48278: IFFALSE 48282
// exit ;
48280: GO 48381
// Randomize ;
48282: CALL_OW 10
// for i = array downto 1 do
48286: LD_ADDR_VAR 0 3
48290: PUSH
48291: DOUBLE
48292: LD_VAR 0 1
48296: INC
48297: ST_TO_ADDR
48298: LD_INT 1
48300: PUSH
48301: FOR_DOWNTO
48302: IFFALSE 48379
// begin index := rand ( 1 , array ) ;
48304: LD_ADDR_VAR 0 4
48308: PUSH
48309: LD_INT 1
48311: PPUSH
48312: LD_VAR 0 1
48316: PPUSH
48317: CALL_OW 12
48321: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48322: LD_ADDR_VAR 0 2
48326: PUSH
48327: LD_VAR 0 2
48331: PPUSH
48332: LD_VAR 0 2
48336: PUSH
48337: LD_INT 1
48339: PLUS
48340: PPUSH
48341: LD_VAR 0 1
48345: PUSH
48346: LD_VAR 0 4
48350: ARRAY
48351: PPUSH
48352: CALL_OW 2
48356: ST_TO_ADDR
// array := Delete ( array , index ) ;
48357: LD_ADDR_VAR 0 1
48361: PUSH
48362: LD_VAR 0 1
48366: PPUSH
48367: LD_VAR 0 4
48371: PPUSH
48372: CALL_OW 3
48376: ST_TO_ADDR
// end ;
48377: GO 48301
48379: POP
48380: POP
// end ;
48381: LD_VAR 0 2
48385: RET
// export function GetBaseMaterials ( base ) ; begin
48386: LD_INT 0
48388: PPUSH
// result := [ 0 , 0 , 0 ] ;
48389: LD_ADDR_VAR 0 2
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: LIST
48407: ST_TO_ADDR
// if not base then
48408: LD_VAR 0 1
48412: NOT
48413: IFFALSE 48417
// exit ;
48415: GO 48466
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48417: LD_ADDR_VAR 0 2
48421: PUSH
48422: LD_VAR 0 1
48426: PPUSH
48427: LD_INT 1
48429: PPUSH
48430: CALL_OW 275
48434: PUSH
48435: LD_VAR 0 1
48439: PPUSH
48440: LD_INT 2
48442: PPUSH
48443: CALL_OW 275
48447: PUSH
48448: LD_VAR 0 1
48452: PPUSH
48453: LD_INT 3
48455: PPUSH
48456: CALL_OW 275
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: LIST
48465: ST_TO_ADDR
// end ;
48466: LD_VAR 0 2
48470: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48471: LD_INT 0
48473: PPUSH
48474: PPUSH
// result := array ;
48475: LD_ADDR_VAR 0 3
48479: PUSH
48480: LD_VAR 0 1
48484: ST_TO_ADDR
// if size >= result then
48485: LD_VAR 0 2
48489: PUSH
48490: LD_VAR 0 3
48494: GREATEREQUAL
48495: IFFALSE 48499
// exit ;
48497: GO 48549
// if size then
48499: LD_VAR 0 2
48503: IFFALSE 48549
// for i := array downto size do
48505: LD_ADDR_VAR 0 4
48509: PUSH
48510: DOUBLE
48511: LD_VAR 0 1
48515: INC
48516: ST_TO_ADDR
48517: LD_VAR 0 2
48521: PUSH
48522: FOR_DOWNTO
48523: IFFALSE 48547
// result := Delete ( result , result ) ;
48525: LD_ADDR_VAR 0 3
48529: PUSH
48530: LD_VAR 0 3
48534: PPUSH
48535: LD_VAR 0 3
48539: PPUSH
48540: CALL_OW 3
48544: ST_TO_ADDR
48545: GO 48522
48547: POP
48548: POP
// end ;
48549: LD_VAR 0 3
48553: RET
// export function ComExit ( unit ) ; var tmp ; begin
48554: LD_INT 0
48556: PPUSH
48557: PPUSH
// if not IsInUnit ( unit ) then
48558: LD_VAR 0 1
48562: PPUSH
48563: CALL_OW 310
48567: NOT
48568: IFFALSE 48572
// exit ;
48570: GO 48632
// tmp := IsInUnit ( unit ) ;
48572: LD_ADDR_VAR 0 3
48576: PUSH
48577: LD_VAR 0 1
48581: PPUSH
48582: CALL_OW 310
48586: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48587: LD_VAR 0 3
48591: PPUSH
48592: CALL_OW 247
48596: PUSH
48597: LD_INT 2
48599: EQUAL
48600: IFFALSE 48613
// ComExitVehicle ( unit ) else
48602: LD_VAR 0 1
48606: PPUSH
48607: CALL_OW 121
48611: GO 48622
// ComExitBuilding ( unit ) ;
48613: LD_VAR 0 1
48617: PPUSH
48618: CALL_OW 122
// result := tmp ;
48622: LD_ADDR_VAR 0 2
48626: PUSH
48627: LD_VAR 0 3
48631: ST_TO_ADDR
// end ;
48632: LD_VAR 0 2
48636: RET
// export function ComExitAll ( units ) ; var i ; begin
48637: LD_INT 0
48639: PPUSH
48640: PPUSH
// if not units then
48641: LD_VAR 0 1
48645: NOT
48646: IFFALSE 48650
// exit ;
48648: GO 48676
// for i in units do
48650: LD_ADDR_VAR 0 3
48654: PUSH
48655: LD_VAR 0 1
48659: PUSH
48660: FOR_IN
48661: IFFALSE 48674
// ComExit ( i ) ;
48663: LD_VAR 0 3
48667: PPUSH
48668: CALL 48554 0 1
48672: GO 48660
48674: POP
48675: POP
// end ;
48676: LD_VAR 0 2
48680: RET
// export function ResetHc ; begin
48681: LD_INT 0
48683: PPUSH
// InitHc ;
48684: CALL_OW 19
// hc_importance := 0 ;
48688: LD_ADDR_OWVAR 32
48692: PUSH
48693: LD_INT 0
48695: ST_TO_ADDR
// end ;
48696: LD_VAR 0 1
48700: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48701: LD_INT 0
48703: PPUSH
48704: PPUSH
48705: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48706: LD_ADDR_VAR 0 6
48710: PUSH
48711: LD_VAR 0 1
48715: PUSH
48716: LD_VAR 0 3
48720: PLUS
48721: PUSH
48722: LD_INT 2
48724: DIV
48725: ST_TO_ADDR
// if _x < 0 then
48726: LD_VAR 0 6
48730: PUSH
48731: LD_INT 0
48733: LESS
48734: IFFALSE 48751
// _x := _x * - 1 ;
48736: LD_ADDR_VAR 0 6
48740: PUSH
48741: LD_VAR 0 6
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: MUL
48750: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48751: LD_ADDR_VAR 0 7
48755: PUSH
48756: LD_VAR 0 2
48760: PUSH
48761: LD_VAR 0 4
48765: PLUS
48766: PUSH
48767: LD_INT 2
48769: DIV
48770: ST_TO_ADDR
// if _y < 0 then
48771: LD_VAR 0 7
48775: PUSH
48776: LD_INT 0
48778: LESS
48779: IFFALSE 48796
// _y := _y * - 1 ;
48781: LD_ADDR_VAR 0 7
48785: PUSH
48786: LD_VAR 0 7
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: MUL
48795: ST_TO_ADDR
// result := [ _x , _y ] ;
48796: LD_ADDR_VAR 0 5
48800: PUSH
48801: LD_VAR 0 6
48805: PUSH
48806: LD_VAR 0 7
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: ST_TO_ADDR
// end ;
48815: LD_VAR 0 5
48819: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48820: LD_INT 0
48822: PPUSH
48823: PPUSH
48824: PPUSH
48825: PPUSH
// task := GetTaskList ( unit ) ;
48826: LD_ADDR_VAR 0 7
48830: PUSH
48831: LD_VAR 0 1
48835: PPUSH
48836: CALL_OW 437
48840: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48841: LD_VAR 0 7
48845: NOT
48846: IFFALSE 48865
48848: PUSH
48849: LD_VAR 0 1
48853: PPUSH
48854: LD_VAR 0 2
48858: PPUSH
48859: CALL_OW 308
48863: NOT
48864: AND
48865: IFFALSE 48869
// exit ;
48867: GO 48987
// if IsInArea ( unit , area ) then
48869: LD_VAR 0 1
48873: PPUSH
48874: LD_VAR 0 2
48878: PPUSH
48879: CALL_OW 308
48883: IFFALSE 48901
// begin ComMoveToArea ( unit , goAway ) ;
48885: LD_VAR 0 1
48889: PPUSH
48890: LD_VAR 0 3
48894: PPUSH
48895: CALL_OW 113
// exit ;
48899: GO 48987
// end ; if task [ 1 ] [ 1 ] <> M then
48901: LD_VAR 0 7
48905: PUSH
48906: LD_INT 1
48908: ARRAY
48909: PUSH
48910: LD_INT 1
48912: ARRAY
48913: PUSH
48914: LD_STRING M
48916: NONEQUAL
48917: IFFALSE 48921
// exit ;
48919: GO 48987
// x := task [ 1 ] [ 2 ] ;
48921: LD_ADDR_VAR 0 5
48925: PUSH
48926: LD_VAR 0 7
48930: PUSH
48931: LD_INT 1
48933: ARRAY
48934: PUSH
48935: LD_INT 2
48937: ARRAY
48938: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48939: LD_ADDR_VAR 0 6
48943: PUSH
48944: LD_VAR 0 7
48948: PUSH
48949: LD_INT 1
48951: ARRAY
48952: PUSH
48953: LD_INT 3
48955: ARRAY
48956: ST_TO_ADDR
// if InArea ( x , y , area ) then
48957: LD_VAR 0 5
48961: PPUSH
48962: LD_VAR 0 6
48966: PPUSH
48967: LD_VAR 0 2
48971: PPUSH
48972: CALL_OW 309
48976: IFFALSE 48987
// ComStop ( unit ) ;
48978: LD_VAR 0 1
48982: PPUSH
48983: CALL_OW 141
// end ;
48987: LD_VAR 0 4
48991: RET
// export function Abs ( value ) ; begin
48992: LD_INT 0
48994: PPUSH
// result := value ;
48995: LD_ADDR_VAR 0 2
48999: PUSH
49000: LD_VAR 0 1
49004: ST_TO_ADDR
// if value < 0 then
49005: LD_VAR 0 1
49009: PUSH
49010: LD_INT 0
49012: LESS
49013: IFFALSE 49030
// result := value * - 1 ;
49015: LD_ADDR_VAR 0 2
49019: PUSH
49020: LD_VAR 0 1
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: MUL
49029: ST_TO_ADDR
// end ;
49030: LD_VAR 0 2
49034: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49035: LD_INT 0
49037: PPUSH
49038: PPUSH
49039: PPUSH
49040: PPUSH
49041: PPUSH
49042: PPUSH
49043: PPUSH
49044: PPUSH
// if not unit or not building then
49045: LD_VAR 0 1
49049: NOT
49050: IFTRUE 49059
49052: PUSH
49053: LD_VAR 0 2
49057: NOT
49058: OR
49059: IFFALSE 49063
// exit ;
49061: GO 49291
// x := GetX ( building ) ;
49063: LD_ADDR_VAR 0 4
49067: PUSH
49068: LD_VAR 0 2
49072: PPUSH
49073: CALL_OW 250
49077: ST_TO_ADDR
// y := GetY ( building ) ;
49078: LD_ADDR_VAR 0 6
49082: PUSH
49083: LD_VAR 0 2
49087: PPUSH
49088: CALL_OW 251
49092: ST_TO_ADDR
// d := GetDir ( building ) ;
49093: LD_ADDR_VAR 0 8
49097: PUSH
49098: LD_VAR 0 2
49102: PPUSH
49103: CALL_OW 254
49107: ST_TO_ADDR
// r := 4 ;
49108: LD_ADDR_VAR 0 9
49112: PUSH
49113: LD_INT 4
49115: ST_TO_ADDR
// for i := 1 to 5 do
49116: LD_ADDR_VAR 0 10
49120: PUSH
49121: DOUBLE
49122: LD_INT 1
49124: DEC
49125: ST_TO_ADDR
49126: LD_INT 5
49128: PUSH
49129: FOR_TO
49130: IFFALSE 49289
// begin _x := ShiftX ( x , d , r + i ) ;
49132: LD_ADDR_VAR 0 5
49136: PUSH
49137: LD_VAR 0 4
49141: PPUSH
49142: LD_VAR 0 8
49146: PPUSH
49147: LD_VAR 0 9
49151: PUSH
49152: LD_VAR 0 10
49156: PLUS
49157: PPUSH
49158: CALL_OW 272
49162: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49163: LD_ADDR_VAR 0 7
49167: PUSH
49168: LD_VAR 0 6
49172: PPUSH
49173: LD_VAR 0 8
49177: PPUSH
49178: LD_VAR 0 9
49182: PUSH
49183: LD_VAR 0 10
49187: PLUS
49188: PPUSH
49189: CALL_OW 273
49193: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49194: LD_VAR 0 5
49198: PPUSH
49199: LD_VAR 0 7
49203: PPUSH
49204: CALL_OW 488
49208: IFFALSE 49243
49210: PUSH
49211: LD_VAR 0 5
49215: PPUSH
49216: LD_VAR 0 7
49220: PPUSH
49221: CALL_OW 428
49225: PPUSH
49226: CALL_OW 247
49230: PUSH
49231: LD_INT 3
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: IN
49241: NOT
49242: AND
49243: IFFALSE 49287
// begin ComMoveXY ( unit , _x , _y ) ;
49245: LD_VAR 0 1
49249: PPUSH
49250: LD_VAR 0 5
49254: PPUSH
49255: LD_VAR 0 7
49259: PPUSH
49260: CALL_OW 111
// result := [ _x , _y ] ;
49264: LD_ADDR_VAR 0 3
49268: PUSH
49269: LD_VAR 0 5
49273: PUSH
49274: LD_VAR 0 7
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: ST_TO_ADDR
// exit ;
49283: POP
49284: POP
49285: GO 49291
// end ; end ;
49287: GO 49129
49289: POP
49290: POP
// end ;
49291: LD_VAR 0 3
49295: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49296: LD_INT 0
49298: PPUSH
49299: PPUSH
49300: PPUSH
// result := 0 ;
49301: LD_ADDR_VAR 0 3
49305: PUSH
49306: LD_INT 0
49308: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49309: LD_VAR 0 1
49313: PUSH
49314: LD_INT 0
49316: LESS
49317: IFTRUE 49329
49319: PUSH
49320: LD_VAR 0 1
49324: PUSH
49325: LD_INT 8
49327: GREATER
49328: OR
49329: IFTRUE 49341
49331: PUSH
49332: LD_VAR 0 2
49336: PUSH
49337: LD_INT 0
49339: LESS
49340: OR
49341: IFTRUE 49353
49343: PUSH
49344: LD_VAR 0 2
49348: PUSH
49349: LD_INT 8
49351: GREATER
49352: OR
49353: IFFALSE 49357
// exit ;
49355: GO 49432
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49357: LD_ADDR_VAR 0 4
49361: PUSH
49362: LD_INT 22
49364: PUSH
49365: LD_VAR 0 2
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PPUSH
49374: CALL_OW 69
49378: PUSH
49379: FOR_IN
49380: IFFALSE 49430
// begin un := UnitShoot ( i ) ;
49382: LD_ADDR_VAR 0 5
49386: PUSH
49387: LD_VAR 0 4
49391: PPUSH
49392: CALL_OW 504
49396: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49397: LD_VAR 0 5
49401: PPUSH
49402: CALL_OW 255
49406: PUSH
49407: LD_VAR 0 1
49411: EQUAL
49412: IFFALSE 49428
// begin result := un ;
49414: LD_ADDR_VAR 0 3
49418: PUSH
49419: LD_VAR 0 5
49423: ST_TO_ADDR
// exit ;
49424: POP
49425: POP
49426: GO 49432
// end ; end ;
49428: GO 49379
49430: POP
49431: POP
// end ;
49432: LD_VAR 0 3
49436: RET
// export function GetCargoBay ( units ) ; begin
49437: LD_INT 0
49439: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49440: LD_ADDR_VAR 0 2
49444: PUSH
49445: LD_VAR 0 1
49449: PPUSH
49450: LD_INT 2
49452: PUSH
49453: LD_INT 34
49455: PUSH
49456: LD_INT 12
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 34
49465: PUSH
49466: LD_INT 51
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 34
49475: PUSH
49476: LD_INT 32
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 34
49485: PUSH
49486: LD_INT 89
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: PPUSH
49500: CALL_OW 72
49504: ST_TO_ADDR
// end ;
49505: LD_VAR 0 2
49509: RET
// export function Negate ( value ) ; begin
49510: LD_INT 0
49512: PPUSH
// result := not value ;
49513: LD_ADDR_VAR 0 2
49517: PUSH
49518: LD_VAR 0 1
49522: NOT
49523: ST_TO_ADDR
// end ;
49524: LD_VAR 0 2
49528: RET
// export function Inc ( value ) ; begin
49529: LD_INT 0
49531: PPUSH
// result := value + 1 ;
49532: LD_ADDR_VAR 0 2
49536: PUSH
49537: LD_VAR 0 1
49541: PUSH
49542: LD_INT 1
49544: PLUS
49545: ST_TO_ADDR
// end ;
49546: LD_VAR 0 2
49550: RET
// export function Dec ( value ) ; begin
49551: LD_INT 0
49553: PPUSH
// result := value - 1 ;
49554: LD_ADDR_VAR 0 2
49558: PUSH
49559: LD_VAR 0 1
49563: PUSH
49564: LD_INT 1
49566: MINUS
49567: ST_TO_ADDR
// end ;
49568: LD_VAR 0 2
49572: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49573: LD_INT 0
49575: PPUSH
49576: PPUSH
49577: PPUSH
49578: PPUSH
49579: PPUSH
49580: PPUSH
49581: PPUSH
49582: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49583: LD_VAR 0 1
49587: PPUSH
49588: LD_VAR 0 2
49592: PPUSH
49593: CALL_OW 488
49597: NOT
49598: IFTRUE 49617
49600: PUSH
49601: LD_VAR 0 3
49605: PPUSH
49606: LD_VAR 0 4
49610: PPUSH
49611: CALL_OW 488
49615: NOT
49616: OR
49617: IFFALSE 49630
// begin result := - 1 ;
49619: LD_ADDR_VAR 0 5
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: ST_TO_ADDR
// exit ;
49628: GO 49865
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49630: LD_ADDR_VAR 0 12
49634: PUSH
49635: LD_VAR 0 1
49639: PPUSH
49640: LD_VAR 0 2
49644: PPUSH
49645: LD_VAR 0 3
49649: PPUSH
49650: LD_VAR 0 4
49654: PPUSH
49655: CALL 48701 0 4
49659: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49660: LD_ADDR_VAR 0 11
49664: PUSH
49665: LD_VAR 0 1
49669: PPUSH
49670: LD_VAR 0 2
49674: PPUSH
49675: LD_VAR 0 12
49679: PUSH
49680: LD_INT 1
49682: ARRAY
49683: PPUSH
49684: LD_VAR 0 12
49688: PUSH
49689: LD_INT 2
49691: ARRAY
49692: PPUSH
49693: CALL_OW 298
49697: ST_TO_ADDR
// distance := 9999 ;
49698: LD_ADDR_VAR 0 10
49702: PUSH
49703: LD_INT 9999
49705: ST_TO_ADDR
// for i := 0 to 5 do
49706: LD_ADDR_VAR 0 6
49710: PUSH
49711: DOUBLE
49712: LD_INT 0
49714: DEC
49715: ST_TO_ADDR
49716: LD_INT 5
49718: PUSH
49719: FOR_TO
49720: IFFALSE 49863
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49722: LD_ADDR_VAR 0 7
49726: PUSH
49727: LD_VAR 0 1
49731: PPUSH
49732: LD_VAR 0 6
49736: PPUSH
49737: LD_VAR 0 11
49741: PPUSH
49742: CALL_OW 272
49746: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49747: LD_ADDR_VAR 0 8
49751: PUSH
49752: LD_VAR 0 2
49756: PPUSH
49757: LD_VAR 0 6
49761: PPUSH
49762: LD_VAR 0 11
49766: PPUSH
49767: CALL_OW 273
49771: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49772: LD_VAR 0 7
49776: PPUSH
49777: LD_VAR 0 8
49781: PPUSH
49782: CALL_OW 488
49786: NOT
49787: IFFALSE 49791
// continue ;
49789: GO 49719
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49791: LD_ADDR_VAR 0 9
49795: PUSH
49796: LD_VAR 0 12
49800: PUSH
49801: LD_INT 1
49803: ARRAY
49804: PPUSH
49805: LD_VAR 0 12
49809: PUSH
49810: LD_INT 2
49812: ARRAY
49813: PPUSH
49814: LD_VAR 0 7
49818: PPUSH
49819: LD_VAR 0 8
49823: PPUSH
49824: CALL_OW 298
49828: ST_TO_ADDR
// if tmp < distance then
49829: LD_VAR 0 9
49833: PUSH
49834: LD_VAR 0 10
49838: LESS
49839: IFFALSE 49861
// begin result := i ;
49841: LD_ADDR_VAR 0 5
49845: PUSH
49846: LD_VAR 0 6
49850: ST_TO_ADDR
// distance := tmp ;
49851: LD_ADDR_VAR 0 10
49855: PUSH
49856: LD_VAR 0 9
49860: ST_TO_ADDR
// end ; end ;
49861: GO 49719
49863: POP
49864: POP
// end ;
49865: LD_VAR 0 5
49869: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49870: LD_INT 0
49872: PPUSH
49873: PPUSH
// if not driver or not IsInUnit ( driver ) then
49874: LD_VAR 0 1
49878: NOT
49879: IFTRUE 49893
49881: PUSH
49882: LD_VAR 0 1
49886: PPUSH
49887: CALL_OW 310
49891: NOT
49892: OR
49893: IFFALSE 49897
// exit ;
49895: GO 49987
// vehicle := IsInUnit ( driver ) ;
49897: LD_ADDR_VAR 0 3
49901: PUSH
49902: LD_VAR 0 1
49906: PPUSH
49907: CALL_OW 310
49911: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49912: LD_VAR 0 1
49916: PPUSH
49917: LD_STRING \
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: PUSH
49947: LD_STRING E
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: LD_VAR 0 3
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PPUSH
49983: CALL_OW 446
// end ;
49987: LD_VAR 0 2
49991: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49992: LD_INT 0
49994: PPUSH
49995: PPUSH
// if not driver or not IsInUnit ( driver ) then
49996: LD_VAR 0 1
50000: NOT
50001: IFTRUE 50015
50003: PUSH
50004: LD_VAR 0 1
50008: PPUSH
50009: CALL_OW 310
50013: NOT
50014: OR
50015: IFFALSE 50019
// exit ;
50017: GO 50109
// vehicle := IsInUnit ( driver ) ;
50019: LD_ADDR_VAR 0 3
50023: PUSH
50024: LD_VAR 0 1
50028: PPUSH
50029: CALL_OW 310
50033: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50034: LD_VAR 0 1
50038: PPUSH
50039: LD_STRING \
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: PUSH
50069: LD_STRING E
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_VAR 0 3
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PPUSH
50105: CALL_OW 447
// end ;
50109: LD_VAR 0 2
50113: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50114: LD_INT 0
50116: PPUSH
50117: PPUSH
50118: PPUSH
// tmp := [ ] ;
50119: LD_ADDR_VAR 0 5
50123: PUSH
50124: EMPTY
50125: ST_TO_ADDR
// for i in units do
50126: LD_ADDR_VAR 0 4
50130: PUSH
50131: LD_VAR 0 1
50135: PUSH
50136: FOR_IN
50137: IFFALSE 50175
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50139: LD_ADDR_VAR 0 5
50143: PUSH
50144: LD_VAR 0 5
50148: PPUSH
50149: LD_VAR 0 5
50153: PUSH
50154: LD_INT 1
50156: PLUS
50157: PPUSH
50158: LD_VAR 0 4
50162: PPUSH
50163: CALL_OW 256
50167: PPUSH
50168: CALL_OW 2
50172: ST_TO_ADDR
50173: GO 50136
50175: POP
50176: POP
// if not tmp then
50177: LD_VAR 0 5
50181: NOT
50182: IFFALSE 50186
// exit ;
50184: GO 50234
// if asc then
50186: LD_VAR 0 2
50190: IFFALSE 50214
// result := SortListByListAsc ( units , tmp ) else
50192: LD_ADDR_VAR 0 3
50196: PUSH
50197: LD_VAR 0 1
50201: PPUSH
50202: LD_VAR 0 5
50206: PPUSH
50207: CALL_OW 76
50211: ST_TO_ADDR
50212: GO 50234
// result := SortListByListDesc ( units , tmp ) ;
50214: LD_ADDR_VAR 0 3
50218: PUSH
50219: LD_VAR 0 1
50223: PPUSH
50224: LD_VAR 0 5
50228: PPUSH
50229: CALL_OW 77
50233: ST_TO_ADDR
// end ;
50234: LD_VAR 0 3
50238: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50239: LD_INT 0
50241: PPUSH
50242: PPUSH
// task := GetTaskList ( mech ) ;
50243: LD_ADDR_VAR 0 4
50247: PUSH
50248: LD_VAR 0 1
50252: PPUSH
50253: CALL_OW 437
50257: ST_TO_ADDR
// if not task then
50258: LD_VAR 0 4
50262: NOT
50263: IFFALSE 50267
// exit ;
50265: GO 50311
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50267: LD_ADDR_VAR 0 3
50271: PUSH
50272: LD_VAR 0 4
50276: PUSH
50277: LD_INT 1
50279: ARRAY
50280: PUSH
50281: LD_INT 1
50283: ARRAY
50284: PUSH
50285: LD_STRING r
50287: EQUAL
50288: IFFALSE 50310
50290: PUSH
50291: LD_VAR 0 4
50295: PUSH
50296: LD_INT 1
50298: ARRAY
50299: PUSH
50300: LD_INT 4
50302: ARRAY
50303: PUSH
50304: LD_VAR 0 2
50308: EQUAL
50309: AND
50310: ST_TO_ADDR
// end ;
50311: LD_VAR 0 3
50315: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50316: LD_INT 0
50318: PPUSH
// SetDir ( unit , d ) ;
50319: LD_VAR 0 1
50323: PPUSH
50324: LD_VAR 0 4
50328: PPUSH
50329: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50333: LD_ADDR_VAR 0 6
50337: PUSH
50338: LD_VAR 0 1
50342: PPUSH
50343: LD_VAR 0 2
50347: PPUSH
50348: LD_VAR 0 3
50352: PPUSH
50353: LD_VAR 0 5
50357: PPUSH
50358: CALL_OW 48
50362: ST_TO_ADDR
// end ;
50363: LD_VAR 0 6
50367: RET
// export function ToNaturalNumber ( number ) ; begin
50368: LD_INT 0
50370: PPUSH
// result := number div 1 ;
50371: LD_ADDR_VAR 0 2
50375: PUSH
50376: LD_VAR 0 1
50380: PUSH
50381: LD_INT 1
50383: DIV
50384: ST_TO_ADDR
// if number < 0 then
50385: LD_VAR 0 1
50389: PUSH
50390: LD_INT 0
50392: LESS
50393: IFFALSE 50403
// result := 0 ;
50395: LD_ADDR_VAR 0 2
50399: PUSH
50400: LD_INT 0
50402: ST_TO_ADDR
// end ;
50403: LD_VAR 0 2
50407: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50408: LD_INT 0
50410: PPUSH
50411: PPUSH
50412: PPUSH
// if not buildings then
50413: LD_VAR 0 1
50417: NOT
50418: IFFALSE 50422
// exit ;
50420: GO 50537
// tmp := [ ] ;
50422: LD_ADDR_VAR 0 5
50426: PUSH
50427: EMPTY
50428: ST_TO_ADDR
// for b in buildings do
50429: LD_ADDR_VAR 0 4
50433: PUSH
50434: LD_VAR 0 1
50438: PUSH
50439: FOR_IN
50440: IFFALSE 50478
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50442: LD_ADDR_VAR 0 5
50446: PUSH
50447: LD_VAR 0 5
50451: PPUSH
50452: LD_VAR 0 5
50456: PUSH
50457: LD_INT 1
50459: PLUS
50460: PPUSH
50461: LD_VAR 0 4
50465: PPUSH
50466: CALL_OW 266
50470: PPUSH
50471: CALL_OW 1
50475: ST_TO_ADDR
50476: GO 50439
50478: POP
50479: POP
// if not tmp then
50480: LD_VAR 0 5
50484: NOT
50485: IFFALSE 50489
// exit ;
50487: GO 50537
// if asc then
50489: LD_VAR 0 2
50493: IFFALSE 50517
// result := SortListByListAsc ( buildings , tmp ) else
50495: LD_ADDR_VAR 0 3
50499: PUSH
50500: LD_VAR 0 1
50504: PPUSH
50505: LD_VAR 0 5
50509: PPUSH
50510: CALL_OW 76
50514: ST_TO_ADDR
50515: GO 50537
// result := SortListByListDesc ( buildings , tmp ) ;
50517: LD_ADDR_VAR 0 3
50521: PUSH
50522: LD_VAR 0 1
50526: PPUSH
50527: LD_VAR 0 5
50531: PPUSH
50532: CALL_OW 77
50536: ST_TO_ADDR
// end ;
50537: LD_VAR 0 3
50541: RET
// export function SortByClass ( units , class ) ; var un ; begin
50542: LD_INT 0
50544: PPUSH
50545: PPUSH
// if not units or not class then
50546: LD_VAR 0 1
50550: NOT
50551: IFTRUE 50560
50553: PUSH
50554: LD_VAR 0 2
50558: NOT
50559: OR
50560: IFFALSE 50564
// exit ;
50562: GO 50659
// result := [ ] ;
50564: LD_ADDR_VAR 0 3
50568: PUSH
50569: EMPTY
50570: ST_TO_ADDR
// for un in units do
50571: LD_ADDR_VAR 0 4
50575: PUSH
50576: LD_VAR 0 1
50580: PUSH
50581: FOR_IN
50582: IFFALSE 50657
// if GetClass ( un ) = class then
50584: LD_VAR 0 4
50588: PPUSH
50589: CALL_OW 257
50593: PUSH
50594: LD_VAR 0 2
50598: EQUAL
50599: IFFALSE 50626
// result := Insert ( result , 1 , un ) else
50601: LD_ADDR_VAR 0 3
50605: PUSH
50606: LD_VAR 0 3
50610: PPUSH
50611: LD_INT 1
50613: PPUSH
50614: LD_VAR 0 4
50618: PPUSH
50619: CALL_OW 2
50623: ST_TO_ADDR
50624: GO 50655
// result := Replace ( result , result + 1 , un ) ;
50626: LD_ADDR_VAR 0 3
50630: PUSH
50631: LD_VAR 0 3
50635: PPUSH
50636: LD_VAR 0 3
50640: PUSH
50641: LD_INT 1
50643: PLUS
50644: PPUSH
50645: LD_VAR 0 4
50649: PPUSH
50650: CALL_OW 1
50654: ST_TO_ADDR
50655: GO 50581
50657: POP
50658: POP
// end ;
50659: LD_VAR 0 3
50663: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50664: LD_INT 0
50666: PPUSH
50667: PPUSH
50668: PPUSH
50669: PPUSH
50670: PPUSH
50671: PPUSH
50672: PPUSH
// result := [ ] ;
50673: LD_ADDR_VAR 0 4
50677: PUSH
50678: EMPTY
50679: ST_TO_ADDR
// if x - r < 0 then
50680: LD_VAR 0 1
50684: PUSH
50685: LD_VAR 0 3
50689: MINUS
50690: PUSH
50691: LD_INT 0
50693: LESS
50694: IFFALSE 50706
// min_x := 0 else
50696: LD_ADDR_VAR 0 8
50700: PUSH
50701: LD_INT 0
50703: ST_TO_ADDR
50704: GO 50722
// min_x := x - r ;
50706: LD_ADDR_VAR 0 8
50710: PUSH
50711: LD_VAR 0 1
50715: PUSH
50716: LD_VAR 0 3
50720: MINUS
50721: ST_TO_ADDR
// if y - r < 0 then
50722: LD_VAR 0 2
50726: PUSH
50727: LD_VAR 0 3
50731: MINUS
50732: PUSH
50733: LD_INT 0
50735: LESS
50736: IFFALSE 50748
// min_y := 0 else
50738: LD_ADDR_VAR 0 7
50742: PUSH
50743: LD_INT 0
50745: ST_TO_ADDR
50746: GO 50764
// min_y := y - r ;
50748: LD_ADDR_VAR 0 7
50752: PUSH
50753: LD_VAR 0 2
50757: PUSH
50758: LD_VAR 0 3
50762: MINUS
50763: ST_TO_ADDR
// max_x := x + r ;
50764: LD_ADDR_VAR 0 9
50768: PUSH
50769: LD_VAR 0 1
50773: PUSH
50774: LD_VAR 0 3
50778: PLUS
50779: ST_TO_ADDR
// max_y := y + r ;
50780: LD_ADDR_VAR 0 10
50784: PUSH
50785: LD_VAR 0 2
50789: PUSH
50790: LD_VAR 0 3
50794: PLUS
50795: ST_TO_ADDR
// for _x = min_x to max_x do
50796: LD_ADDR_VAR 0 5
50800: PUSH
50801: DOUBLE
50802: LD_VAR 0 8
50806: DEC
50807: ST_TO_ADDR
50808: LD_VAR 0 9
50812: PUSH
50813: FOR_TO
50814: IFFALSE 50915
// for _y = min_y to max_y do
50816: LD_ADDR_VAR 0 6
50820: PUSH
50821: DOUBLE
50822: LD_VAR 0 7
50826: DEC
50827: ST_TO_ADDR
50828: LD_VAR 0 10
50832: PUSH
50833: FOR_TO
50834: IFFALSE 50911
// begin if not ValidHex ( _x , _y ) then
50836: LD_VAR 0 5
50840: PPUSH
50841: LD_VAR 0 6
50845: PPUSH
50846: CALL_OW 488
50850: NOT
50851: IFFALSE 50855
// continue ;
50853: GO 50833
// if GetResourceTypeXY ( _x , _y ) then
50855: LD_VAR 0 5
50859: PPUSH
50860: LD_VAR 0 6
50864: PPUSH
50865: CALL_OW 283
50869: IFFALSE 50909
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50871: LD_ADDR_VAR 0 4
50875: PUSH
50876: LD_VAR 0 4
50880: PPUSH
50881: LD_VAR 0 4
50885: PUSH
50886: LD_INT 1
50888: PLUS
50889: PPUSH
50890: LD_VAR 0 5
50894: PUSH
50895: LD_VAR 0 6
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PPUSH
50904: CALL_OW 1
50908: ST_TO_ADDR
// end ;
50909: GO 50833
50911: POP
50912: POP
50913: GO 50813
50915: POP
50916: POP
// end ;
50917: LD_VAR 0 4
50921: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50922: LD_INT 0
50924: PPUSH
50925: PPUSH
50926: PPUSH
50927: PPUSH
50928: PPUSH
50929: PPUSH
50930: PPUSH
50931: PPUSH
// if not units then
50932: LD_VAR 0 1
50936: NOT
50937: IFFALSE 50941
// exit ;
50939: GO 51473
// result := UnitFilter ( units , [ f_ok ] ) ;
50941: LD_ADDR_VAR 0 3
50945: PUSH
50946: LD_VAR 0 1
50950: PPUSH
50951: LD_INT 50
50953: PUSH
50954: EMPTY
50955: LIST
50956: PPUSH
50957: CALL_OW 72
50961: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50962: LD_ADDR_VAR 0 8
50966: PUSH
50967: LD_VAR 0 1
50971: PUSH
50972: LD_INT 1
50974: ARRAY
50975: PPUSH
50976: CALL_OW 255
50980: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50981: LD_ADDR_VAR 0 10
50985: PUSH
50986: LD_INT 29
50988: PUSH
50989: LD_INT 91
50991: PUSH
50992: LD_INT 49
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: LIST
50999: ST_TO_ADDR
// if not result then
51000: LD_VAR 0 3
51004: NOT
51005: IFFALSE 51009
// exit ;
51007: GO 51473
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51009: LD_ADDR_VAR 0 5
51013: PUSH
51014: LD_INT 81
51016: PUSH
51017: LD_VAR 0 8
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PPUSH
51026: CALL_OW 69
51030: ST_TO_ADDR
// for i in result do
51031: LD_ADDR_VAR 0 4
51035: PUSH
51036: LD_VAR 0 3
51040: PUSH
51041: FOR_IN
51042: IFFALSE 51471
// begin tag := GetTag ( i ) + 1 ;
51044: LD_ADDR_VAR 0 9
51048: PUSH
51049: LD_VAR 0 4
51053: PPUSH
51054: CALL_OW 110
51058: PUSH
51059: LD_INT 1
51061: PLUS
51062: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51063: LD_ADDR_VAR 0 7
51067: PUSH
51068: LD_VAR 0 4
51072: PPUSH
51073: CALL_OW 250
51077: PPUSH
51078: LD_VAR 0 4
51082: PPUSH
51083: CALL_OW 251
51087: PPUSH
51088: LD_INT 4
51090: PPUSH
51091: CALL 50664 0 3
51095: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51096: LD_VAR 0 4
51100: PPUSH
51101: CALL_OW 247
51105: PUSH
51106: LD_INT 2
51108: EQUAL
51109: IFFALSE 51121
51111: PUSH
51112: LD_VAR 0 7
51116: PUSH
51117: LD_INT 2
51119: GREATER
51120: AND
51121: IFFALSE 51141
51123: PUSH
51124: LD_VAR 0 4
51128: PPUSH
51129: CALL_OW 264
51133: PUSH
51134: LD_VAR 0 10
51138: IN
51139: NOT
51140: AND
51141: IFFALSE 51180
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51143: LD_VAR 0 4
51147: PPUSH
51148: LD_VAR 0 7
51152: PUSH
51153: LD_INT 1
51155: ARRAY
51156: PUSH
51157: LD_INT 1
51159: ARRAY
51160: PPUSH
51161: LD_VAR 0 7
51165: PUSH
51166: LD_INT 1
51168: ARRAY
51169: PUSH
51170: LD_INT 2
51172: ARRAY
51173: PPUSH
51174: CALL_OW 116
51178: GO 51469
// if path > tag then
51180: LD_VAR 0 2
51184: PUSH
51185: LD_VAR 0 9
51189: GREATER
51190: IFFALSE 51398
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51192: LD_ADDR_VAR 0 6
51196: PUSH
51197: LD_VAR 0 5
51201: PPUSH
51202: LD_INT 91
51204: PUSH
51205: LD_VAR 0 4
51209: PUSH
51210: LD_INT 8
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: LIST
51217: PPUSH
51218: CALL_OW 72
51222: ST_TO_ADDR
// if nearEnemy then
51223: LD_VAR 0 6
51227: IFFALSE 51296
// begin if GetWeapon ( i ) = ru_time_lapser then
51229: LD_VAR 0 4
51233: PPUSH
51234: CALL_OW 264
51238: PUSH
51239: LD_INT 49
51241: EQUAL
51242: IFFALSE 51270
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51244: LD_VAR 0 4
51248: PPUSH
51249: LD_VAR 0 6
51253: PPUSH
51254: LD_VAR 0 4
51258: PPUSH
51259: CALL_OW 74
51263: PPUSH
51264: CALL_OW 112
51268: GO 51294
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51270: LD_VAR 0 4
51274: PPUSH
51275: LD_VAR 0 6
51279: PPUSH
51280: LD_VAR 0 4
51284: PPUSH
51285: CALL_OW 74
51289: PPUSH
51290: CALL 52554 0 2
// end else
51294: GO 51396
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51296: LD_VAR 0 4
51300: PPUSH
51301: LD_VAR 0 2
51305: PUSH
51306: LD_VAR 0 9
51310: ARRAY
51311: PUSH
51312: LD_INT 1
51314: ARRAY
51315: PPUSH
51316: LD_VAR 0 2
51320: PUSH
51321: LD_VAR 0 9
51325: ARRAY
51326: PUSH
51327: LD_INT 2
51329: ARRAY
51330: PPUSH
51331: CALL_OW 297
51335: PUSH
51336: LD_INT 6
51338: GREATER
51339: IFFALSE 51382
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51341: LD_VAR 0 4
51345: PPUSH
51346: LD_VAR 0 2
51350: PUSH
51351: LD_VAR 0 9
51355: ARRAY
51356: PUSH
51357: LD_INT 1
51359: ARRAY
51360: PPUSH
51361: LD_VAR 0 2
51365: PUSH
51366: LD_VAR 0 9
51370: ARRAY
51371: PUSH
51372: LD_INT 2
51374: ARRAY
51375: PPUSH
51376: CALL_OW 114
51380: GO 51396
// SetTag ( i , tag ) ;
51382: LD_VAR 0 4
51386: PPUSH
51387: LD_VAR 0 9
51391: PPUSH
51392: CALL_OW 109
// end else
51396: GO 51469
// if enemy then
51398: LD_VAR 0 5
51402: IFFALSE 51469
// begin if GetWeapon ( i ) = ru_time_lapser then
51404: LD_VAR 0 4
51408: PPUSH
51409: CALL_OW 264
51413: PUSH
51414: LD_INT 49
51416: EQUAL
51417: IFFALSE 51445
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51419: LD_VAR 0 4
51423: PPUSH
51424: LD_VAR 0 5
51428: PPUSH
51429: LD_VAR 0 4
51433: PPUSH
51434: CALL_OW 74
51438: PPUSH
51439: CALL_OW 112
51443: GO 51469
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51445: LD_VAR 0 4
51449: PPUSH
51450: LD_VAR 0 5
51454: PPUSH
51455: LD_VAR 0 4
51459: PPUSH
51460: CALL_OW 74
51464: PPUSH
51465: CALL 52554 0 2
// end ; end ;
51469: GO 51041
51471: POP
51472: POP
// end ;
51473: LD_VAR 0 3
51477: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51478: LD_INT 0
51480: PPUSH
51481: PPUSH
51482: PPUSH
// if not unit or IsInUnit ( unit ) then
51483: LD_VAR 0 1
51487: NOT
51488: IFTRUE 51501
51490: PUSH
51491: LD_VAR 0 1
51495: PPUSH
51496: CALL_OW 310
51500: OR
51501: IFFALSE 51505
// exit ;
51503: GO 51596
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51505: LD_ADDR_VAR 0 4
51509: PUSH
51510: LD_VAR 0 1
51514: PPUSH
51515: CALL_OW 250
51519: PPUSH
51520: LD_VAR 0 2
51524: PPUSH
51525: LD_INT 1
51527: PPUSH
51528: CALL_OW 272
51532: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51533: LD_ADDR_VAR 0 5
51537: PUSH
51538: LD_VAR 0 1
51542: PPUSH
51543: CALL_OW 251
51547: PPUSH
51548: LD_VAR 0 2
51552: PPUSH
51553: LD_INT 1
51555: PPUSH
51556: CALL_OW 273
51560: ST_TO_ADDR
// if ValidHex ( x , y ) then
51561: LD_VAR 0 4
51565: PPUSH
51566: LD_VAR 0 5
51570: PPUSH
51571: CALL_OW 488
51575: IFFALSE 51596
// ComTurnXY ( unit , x , y ) ;
51577: LD_VAR 0 1
51581: PPUSH
51582: LD_VAR 0 4
51586: PPUSH
51587: LD_VAR 0 5
51591: PPUSH
51592: CALL_OW 118
// end ;
51596: LD_VAR 0 3
51600: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51601: LD_INT 0
51603: PPUSH
51604: PPUSH
// result := false ;
51605: LD_ADDR_VAR 0 3
51609: PUSH
51610: LD_INT 0
51612: ST_TO_ADDR
// if not units then
51613: LD_VAR 0 2
51617: NOT
51618: IFFALSE 51622
// exit ;
51620: GO 51667
// for i in units do
51622: LD_ADDR_VAR 0 4
51626: PUSH
51627: LD_VAR 0 2
51631: PUSH
51632: FOR_IN
51633: IFFALSE 51665
// if See ( side , i ) then
51635: LD_VAR 0 1
51639: PPUSH
51640: LD_VAR 0 4
51644: PPUSH
51645: CALL_OW 292
51649: IFFALSE 51663
// begin result := true ;
51651: LD_ADDR_VAR 0 3
51655: PUSH
51656: LD_INT 1
51658: ST_TO_ADDR
// exit ;
51659: POP
51660: POP
51661: GO 51667
// end ;
51663: GO 51632
51665: POP
51666: POP
// end ;
51667: LD_VAR 0 3
51671: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51672: LD_INT 0
51674: PPUSH
51675: PPUSH
51676: PPUSH
51677: PPUSH
// if not unit or not points then
51678: LD_VAR 0 1
51682: NOT
51683: IFTRUE 51692
51685: PUSH
51686: LD_VAR 0 2
51690: NOT
51691: OR
51692: IFFALSE 51696
// exit ;
51694: GO 51786
// dist := 99999 ;
51696: LD_ADDR_VAR 0 5
51700: PUSH
51701: LD_INT 99999
51703: ST_TO_ADDR
// for i in points do
51704: LD_ADDR_VAR 0 4
51708: PUSH
51709: LD_VAR 0 2
51713: PUSH
51714: FOR_IN
51715: IFFALSE 51784
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51717: LD_ADDR_VAR 0 6
51721: PUSH
51722: LD_VAR 0 1
51726: PPUSH
51727: LD_VAR 0 4
51731: PUSH
51732: LD_INT 1
51734: ARRAY
51735: PPUSH
51736: LD_VAR 0 4
51740: PUSH
51741: LD_INT 2
51743: ARRAY
51744: PPUSH
51745: CALL_OW 297
51749: ST_TO_ADDR
// if tmpDist < dist then
51750: LD_VAR 0 6
51754: PUSH
51755: LD_VAR 0 5
51759: LESS
51760: IFFALSE 51782
// begin result := i ;
51762: LD_ADDR_VAR 0 3
51766: PUSH
51767: LD_VAR 0 4
51771: ST_TO_ADDR
// dist := tmpDist ;
51772: LD_ADDR_VAR 0 5
51776: PUSH
51777: LD_VAR 0 6
51781: ST_TO_ADDR
// end ; end ;
51782: GO 51714
51784: POP
51785: POP
// end ;
51786: LD_VAR 0 3
51790: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51791: LD_INT 0
51793: PPUSH
// uc_side := side ;
51794: LD_ADDR_OWVAR 20
51798: PUSH
51799: LD_VAR 0 1
51803: ST_TO_ADDR
// uc_nation := 3 ;
51804: LD_ADDR_OWVAR 21
51808: PUSH
51809: LD_INT 3
51811: ST_TO_ADDR
// vc_chassis := 25 ;
51812: LD_ADDR_OWVAR 37
51816: PUSH
51817: LD_INT 25
51819: ST_TO_ADDR
// vc_engine := engine_siberite ;
51820: LD_ADDR_OWVAR 39
51824: PUSH
51825: LD_INT 3
51827: ST_TO_ADDR
// vc_control := control_computer ;
51828: LD_ADDR_OWVAR 38
51832: PUSH
51833: LD_INT 3
51835: ST_TO_ADDR
// vc_weapon := 59 ;
51836: LD_ADDR_OWVAR 40
51840: PUSH
51841: LD_INT 59
51843: ST_TO_ADDR
// result := CreateVehicle ;
51844: LD_ADDR_VAR 0 5
51848: PUSH
51849: CALL_OW 45
51853: ST_TO_ADDR
// SetDir ( result , d ) ;
51854: LD_VAR 0 5
51858: PPUSH
51859: LD_VAR 0 4
51863: PPUSH
51864: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51868: LD_VAR 0 5
51872: PPUSH
51873: LD_VAR 0 2
51877: PPUSH
51878: LD_VAR 0 3
51882: PPUSH
51883: LD_INT 0
51885: PPUSH
51886: CALL_OW 48
// end ;
51890: LD_VAR 0 5
51894: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51895: LD_INT 0
51897: PPUSH
51898: PPUSH
51899: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51900: LD_ADDR_VAR 0 2
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51923: LD_VAR 0 1
51927: NOT
51928: IFTRUE 51961
51930: PUSH
51931: LD_VAR 0 1
51935: PPUSH
51936: CALL_OW 264
51940: PUSH
51941: LD_INT 12
51943: PUSH
51944: LD_INT 51
51946: PUSH
51947: LD_INT 32
51949: PUSH
51950: LD_INT 89
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: IN
51959: NOT
51960: OR
51961: IFFALSE 51965
// exit ;
51963: GO 52063
// for i := 1 to 3 do
51965: LD_ADDR_VAR 0 3
51969: PUSH
51970: DOUBLE
51971: LD_INT 1
51973: DEC
51974: ST_TO_ADDR
51975: LD_INT 3
51977: PUSH
51978: FOR_TO
51979: IFFALSE 52061
// begin tmp := GetCargo ( cargo , i ) ;
51981: LD_ADDR_VAR 0 4
51985: PUSH
51986: LD_VAR 0 1
51990: PPUSH
51991: LD_VAR 0 3
51995: PPUSH
51996: CALL_OW 289
52000: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52001: LD_ADDR_VAR 0 2
52005: PUSH
52006: LD_VAR 0 2
52010: PPUSH
52011: LD_VAR 0 3
52015: PPUSH
52016: LD_VAR 0 4
52020: PPUSH
52021: CALL_OW 1
52025: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52026: LD_ADDR_VAR 0 2
52030: PUSH
52031: LD_VAR 0 2
52035: PPUSH
52036: LD_INT 4
52038: PPUSH
52039: LD_VAR 0 2
52043: PUSH
52044: LD_INT 4
52046: ARRAY
52047: PUSH
52048: LD_VAR 0 4
52052: PLUS
52053: PPUSH
52054: CALL_OW 1
52058: ST_TO_ADDR
// end ;
52059: GO 51978
52061: POP
52062: POP
// end ;
52063: LD_VAR 0 2
52067: RET
// export function Length ( array ) ; begin
52068: LD_INT 0
52070: PPUSH
// result := array + 0 ;
52071: LD_ADDR_VAR 0 2
52075: PUSH
52076: LD_VAR 0 1
52080: PUSH
52081: LD_INT 0
52083: PLUS
52084: ST_TO_ADDR
// end ;
52085: LD_VAR 0 2
52089: RET
// export function PrepareArray ( array ) ; begin
52090: LD_INT 0
52092: PPUSH
// result := array diff 0 ;
52093: LD_ADDR_VAR 0 2
52097: PUSH
52098: LD_VAR 0 1
52102: PUSH
52103: LD_INT 0
52105: DIFF
52106: ST_TO_ADDR
// if not result [ 1 ] then
52107: LD_VAR 0 2
52111: PUSH
52112: LD_INT 1
52114: ARRAY
52115: NOT
52116: IFFALSE 52136
// result := Delete ( result , 1 ) ;
52118: LD_ADDR_VAR 0 2
52122: PUSH
52123: LD_VAR 0 2
52127: PPUSH
52128: LD_INT 1
52130: PPUSH
52131: CALL_OW 3
52135: ST_TO_ADDR
// end ;
52136: LD_VAR 0 2
52140: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52141: LD_INT 0
52143: PPUSH
52144: PPUSH
52145: PPUSH
52146: PPUSH
// sibRocketRange := 25 ;
52147: LD_ADDR_VAR 0 6
52151: PUSH
52152: LD_INT 25
52154: ST_TO_ADDR
// result := false ;
52155: LD_ADDR_VAR 0 4
52159: PUSH
52160: LD_INT 0
52162: ST_TO_ADDR
// for i := 0 to 5 do
52163: LD_ADDR_VAR 0 5
52167: PUSH
52168: DOUBLE
52169: LD_INT 0
52171: DEC
52172: ST_TO_ADDR
52173: LD_INT 5
52175: PUSH
52176: FOR_TO
52177: IFFALSE 52244
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52179: LD_VAR 0 1
52183: PPUSH
52184: LD_VAR 0 5
52188: PPUSH
52189: LD_VAR 0 6
52193: PPUSH
52194: CALL_OW 272
52198: PPUSH
52199: LD_VAR 0 2
52203: PPUSH
52204: LD_VAR 0 5
52208: PPUSH
52209: LD_VAR 0 6
52213: PPUSH
52214: CALL_OW 273
52218: PPUSH
52219: LD_VAR 0 3
52223: PPUSH
52224: CALL_OW 309
52228: IFFALSE 52242
// begin result := true ;
52230: LD_ADDR_VAR 0 4
52234: PUSH
52235: LD_INT 1
52237: ST_TO_ADDR
// exit ;
52238: POP
52239: POP
52240: GO 52246
// end ;
52242: GO 52176
52244: POP
52245: POP
// end ;
52246: LD_VAR 0 4
52250: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52251: LD_INT 0
52253: PPUSH
52254: PPUSH
52255: PPUSH
// if btype = b_depot then
52256: LD_VAR 0 2
52260: PUSH
52261: LD_INT 0
52263: EQUAL
52264: IFFALSE 52276
// begin result := true ;
52266: LD_ADDR_VAR 0 3
52270: PUSH
52271: LD_INT 1
52273: ST_TO_ADDR
// exit ;
52274: GO 52396
// end ; pom := GetBase ( depot ) ;
52276: LD_ADDR_VAR 0 4
52280: PUSH
52281: LD_VAR 0 1
52285: PPUSH
52286: CALL_OW 274
52290: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52291: LD_ADDR_VAR 0 5
52295: PUSH
52296: LD_VAR 0 2
52300: PPUSH
52301: LD_VAR 0 1
52305: PPUSH
52306: CALL_OW 248
52310: PPUSH
52311: CALL_OW 450
52315: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52316: LD_ADDR_VAR 0 3
52320: PUSH
52321: LD_VAR 0 4
52325: PPUSH
52326: LD_INT 1
52328: PPUSH
52329: CALL_OW 275
52333: PUSH
52334: LD_VAR 0 5
52338: PUSH
52339: LD_INT 1
52341: ARRAY
52342: GREATEREQUAL
52343: IFFALSE 52369
52345: PUSH
52346: LD_VAR 0 4
52350: PPUSH
52351: LD_INT 2
52353: PPUSH
52354: CALL_OW 275
52358: PUSH
52359: LD_VAR 0 5
52363: PUSH
52364: LD_INT 2
52366: ARRAY
52367: GREATEREQUAL
52368: AND
52369: IFFALSE 52395
52371: PUSH
52372: LD_VAR 0 4
52376: PPUSH
52377: LD_INT 3
52379: PPUSH
52380: CALL_OW 275
52384: PUSH
52385: LD_VAR 0 5
52389: PUSH
52390: LD_INT 3
52392: ARRAY
52393: GREATEREQUAL
52394: AND
52395: ST_TO_ADDR
// end ;
52396: LD_VAR 0 3
52400: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52401: LD_INT 0
52403: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52404: LD_VAR 0 1
52408: PPUSH
52409: LD_VAR 0 2
52413: PPUSH
52414: LD_INT 0
52416: PPUSH
52417: LD_INT 0
52419: PPUSH
52420: LD_INT 1
52422: PPUSH
52423: LD_INT 0
52425: PPUSH
52426: CALL_OW 587
// end ;
52430: LD_VAR 0 3
52434: RET
// export function CenterOnNow ( unit ) ; begin
52435: LD_INT 0
52437: PPUSH
// result := IsInUnit ( unit ) ;
52438: LD_ADDR_VAR 0 2
52442: PUSH
52443: LD_VAR 0 1
52447: PPUSH
52448: CALL_OW 310
52452: ST_TO_ADDR
// if not result then
52453: LD_VAR 0 2
52457: NOT
52458: IFFALSE 52470
// result := unit ;
52460: LD_ADDR_VAR 0 2
52464: PUSH
52465: LD_VAR 0 1
52469: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52470: LD_VAR 0 1
52474: PPUSH
52475: CALL_OW 87
// end ;
52479: LD_VAR 0 2
52483: RET
// export function ComMoveHex ( unit , hex ) ; begin
52484: LD_INT 0
52486: PPUSH
// if not hex then
52487: LD_VAR 0 2
52491: NOT
52492: IFFALSE 52496
// exit ;
52494: GO 52549
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52496: LD_VAR 0 2
52500: PUSH
52501: LD_INT 1
52503: ARRAY
52504: PPUSH
52505: LD_VAR 0 2
52509: PUSH
52510: LD_INT 2
52512: ARRAY
52513: PPUSH
52514: CALL_OW 428
52518: IFFALSE 52522
// exit ;
52520: GO 52549
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52522: LD_VAR 0 1
52526: PPUSH
52527: LD_VAR 0 2
52531: PUSH
52532: LD_INT 1
52534: ARRAY
52535: PPUSH
52536: LD_VAR 0 2
52540: PUSH
52541: LD_INT 2
52543: ARRAY
52544: PPUSH
52545: CALL_OW 111
// end ;
52549: LD_VAR 0 3
52553: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52554: LD_INT 0
52556: PPUSH
52557: PPUSH
52558: PPUSH
// if not unit or not enemy then
52559: LD_VAR 0 1
52563: NOT
52564: IFTRUE 52573
52566: PUSH
52567: LD_VAR 0 2
52571: NOT
52572: OR
52573: IFFALSE 52577
// exit ;
52575: GO 52703
// x := GetX ( enemy ) ;
52577: LD_ADDR_VAR 0 4
52581: PUSH
52582: LD_VAR 0 2
52586: PPUSH
52587: CALL_OW 250
52591: ST_TO_ADDR
// y := GetY ( enemy ) ;
52592: LD_ADDR_VAR 0 5
52596: PUSH
52597: LD_VAR 0 2
52601: PPUSH
52602: CALL_OW 251
52606: ST_TO_ADDR
// if ValidHex ( x , y ) then
52607: LD_VAR 0 4
52611: PPUSH
52612: LD_VAR 0 5
52616: PPUSH
52617: CALL_OW 488
52621: IFFALSE 52703
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52623: LD_VAR 0 2
52627: PPUSH
52628: CALL_OW 247
52632: PUSH
52633: LD_INT 3
52635: PUSH
52636: LD_INT 2
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: IN
52643: IFTRUE 52666
52645: PUSH
52646: LD_VAR 0 1
52650: PPUSH
52651: CALL_OW 255
52655: PPUSH
52656: LD_VAR 0 2
52660: PPUSH
52661: CALL_OW 292
52665: OR
52666: IFFALSE 52684
// ComAttackUnit ( unit , enemy ) else
52668: LD_VAR 0 1
52672: PPUSH
52673: LD_VAR 0 2
52677: PPUSH
52678: CALL_OW 115
52682: GO 52703
// ComAgressiveMove ( unit , x , y ) ;
52684: LD_VAR 0 1
52688: PPUSH
52689: LD_VAR 0 4
52693: PPUSH
52694: LD_VAR 0 5
52698: PPUSH
52699: CALL_OW 114
// end ;
52703: LD_VAR 0 3
52707: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52708: LD_INT 0
52710: PPUSH
52711: PPUSH
52712: PPUSH
// list := AreaToList ( area , 0 ) ;
52713: LD_ADDR_VAR 0 5
52717: PUSH
52718: LD_VAR 0 1
52722: PPUSH
52723: LD_INT 0
52725: PPUSH
52726: CALL_OW 517
52730: ST_TO_ADDR
// if not list then
52731: LD_VAR 0 5
52735: NOT
52736: IFFALSE 52740
// exit ;
52738: GO 52870
// if all then
52740: LD_VAR 0 2
52744: IFFALSE 52832
// begin for i := 1 to list [ 1 ] do
52746: LD_ADDR_VAR 0 4
52750: PUSH
52751: DOUBLE
52752: LD_INT 1
52754: DEC
52755: ST_TO_ADDR
52756: LD_VAR 0 5
52760: PUSH
52761: LD_INT 1
52763: ARRAY
52764: PUSH
52765: FOR_TO
52766: IFFALSE 52828
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52768: LD_ADDR_VAR 0 3
52772: PUSH
52773: LD_VAR 0 3
52777: PPUSH
52778: LD_VAR 0 3
52782: PUSH
52783: LD_INT 1
52785: PLUS
52786: PPUSH
52787: LD_VAR 0 5
52791: PUSH
52792: LD_INT 1
52794: ARRAY
52795: PUSH
52796: LD_VAR 0 4
52800: ARRAY
52801: PUSH
52802: LD_VAR 0 5
52806: PUSH
52807: LD_INT 2
52809: ARRAY
52810: PUSH
52811: LD_VAR 0 4
52815: ARRAY
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PPUSH
52821: CALL_OW 1
52825: ST_TO_ADDR
52826: GO 52765
52828: POP
52829: POP
// exit ;
52830: GO 52870
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52832: LD_ADDR_VAR 0 3
52836: PUSH
52837: LD_VAR 0 5
52841: PUSH
52842: LD_INT 1
52844: ARRAY
52845: PUSH
52846: LD_INT 1
52848: ARRAY
52849: PUSH
52850: LD_VAR 0 5
52854: PUSH
52855: LD_INT 2
52857: ARRAY
52858: PUSH
52859: LD_INT 1
52861: ARRAY
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: EMPTY
52868: LIST
52869: ST_TO_ADDR
// end ;
52870: LD_VAR 0 3
52874: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52875: LD_INT 0
52877: PPUSH
52878: PPUSH
// list := AreaToList ( area , 0 ) ;
52879: LD_ADDR_VAR 0 4
52883: PUSH
52884: LD_VAR 0 1
52888: PPUSH
52889: LD_INT 0
52891: PPUSH
52892: CALL_OW 517
52896: ST_TO_ADDR
// if not list then
52897: LD_VAR 0 4
52901: NOT
52902: IFFALSE 52906
// exit ;
52904: GO 52947
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52906: LD_ADDR_VAR 0 3
52910: PUSH
52911: LD_VAR 0 4
52915: PUSH
52916: LD_INT 1
52918: ARRAY
52919: PUSH
52920: LD_INT 1
52922: ARRAY
52923: PUSH
52924: LD_VAR 0 4
52928: PUSH
52929: LD_INT 2
52931: ARRAY
52932: PUSH
52933: LD_INT 1
52935: ARRAY
52936: PUSH
52937: LD_VAR 0 2
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: LIST
52946: ST_TO_ADDR
// end ;
52947: LD_VAR 0 3
52951: RET
// export function First ( array ) ; begin
52952: LD_INT 0
52954: PPUSH
// if not array then
52955: LD_VAR 0 1
52959: NOT
52960: IFFALSE 52964
// exit ;
52962: GO 52978
// result := array [ 1 ] ;
52964: LD_ADDR_VAR 0 2
52968: PUSH
52969: LD_VAR 0 1
52973: PUSH
52974: LD_INT 1
52976: ARRAY
52977: ST_TO_ADDR
// end ;
52978: LD_VAR 0 2
52982: RET
// export function Last ( array ) ; begin
52983: LD_INT 0
52985: PPUSH
// if not array then
52986: LD_VAR 0 1
52990: NOT
52991: IFFALSE 52995
// exit ;
52993: GO 53011
// result := array [ array ] ;
52995: LD_ADDR_VAR 0 2
52999: PUSH
53000: LD_VAR 0 1
53004: PUSH
53005: LD_VAR 0 1
53009: ARRAY
53010: ST_TO_ADDR
// end ;
53011: LD_VAR 0 2
53015: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53016: LD_INT 0
53018: PPUSH
53019: PPUSH
// result := [ ] ;
53020: LD_ADDR_VAR 0 5
53024: PUSH
53025: EMPTY
53026: ST_TO_ADDR
// if not array then
53027: LD_VAR 0 1
53031: NOT
53032: IFFALSE 53036
// exit ;
53034: GO 53148
// for i := 1 to array do
53036: LD_ADDR_VAR 0 6
53040: PUSH
53041: DOUBLE
53042: LD_INT 1
53044: DEC
53045: ST_TO_ADDR
53046: LD_VAR 0 1
53050: PUSH
53051: FOR_TO
53052: IFFALSE 53146
// if array [ i ] [ index ] = value then
53054: LD_VAR 0 1
53058: PUSH
53059: LD_VAR 0 6
53063: ARRAY
53064: PUSH
53065: LD_VAR 0 2
53069: ARRAY
53070: PUSH
53071: LD_VAR 0 3
53075: EQUAL
53076: IFFALSE 53144
// begin if indexColumn then
53078: LD_VAR 0 4
53082: IFFALSE 53118
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53084: LD_ADDR_VAR 0 5
53088: PUSH
53089: LD_VAR 0 5
53093: PPUSH
53094: LD_VAR 0 1
53098: PUSH
53099: LD_VAR 0 6
53103: ARRAY
53104: PUSH
53105: LD_VAR 0 4
53109: ARRAY
53110: PPUSH
53111: CALL 48156 0 2
53115: ST_TO_ADDR
53116: GO 53144
// result := Join ( result , array [ i ] ) ;
53118: LD_ADDR_VAR 0 5
53122: PUSH
53123: LD_VAR 0 5
53127: PPUSH
53128: LD_VAR 0 1
53132: PUSH
53133: LD_VAR 0 6
53137: ARRAY
53138: PPUSH
53139: CALL 48156 0 2
53143: ST_TO_ADDR
// end ;
53144: GO 53051
53146: POP
53147: POP
// end ;
53148: LD_VAR 0 5
53152: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53153: LD_INT 0
53155: PPUSH
// if not vehicles or not parkingPoint then
53156: LD_VAR 0 1
53160: NOT
53161: IFTRUE 53170
53163: PUSH
53164: LD_VAR 0 2
53168: NOT
53169: OR
53170: IFFALSE 53174
// exit ;
53172: GO 53272
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53174: LD_ADDR_VAR 0 1
53178: PUSH
53179: LD_VAR 0 1
53183: PPUSH
53184: LD_INT 50
53186: PUSH
53187: EMPTY
53188: LIST
53189: PUSH
53190: LD_INT 3
53192: PUSH
53193: LD_INT 92
53195: PUSH
53196: LD_VAR 0 2
53200: PUSH
53201: LD_INT 1
53203: ARRAY
53204: PUSH
53205: LD_VAR 0 2
53209: PUSH
53210: LD_INT 2
53212: ARRAY
53213: PUSH
53214: LD_INT 8
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PPUSH
53231: CALL_OW 72
53235: ST_TO_ADDR
// if not vehicles then
53236: LD_VAR 0 1
53240: NOT
53241: IFFALSE 53245
// exit ;
53243: GO 53272
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53245: LD_VAR 0 1
53249: PPUSH
53250: LD_VAR 0 2
53254: PUSH
53255: LD_INT 1
53257: ARRAY
53258: PPUSH
53259: LD_VAR 0 2
53263: PUSH
53264: LD_INT 2
53266: ARRAY
53267: PPUSH
53268: CALL_OW 111
// end ;
53272: LD_VAR 0 3
53276: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53277: LD_INT 0
53279: PPUSH
53280: PPUSH
53281: PPUSH
// if not side or not area then
53282: LD_VAR 0 1
53286: NOT
53287: IFTRUE 53296
53289: PUSH
53290: LD_VAR 0 2
53294: NOT
53295: OR
53296: IFFALSE 53300
// exit ;
53298: GO 53419
// tmp := AreaToList ( area , 0 ) ;
53300: LD_ADDR_VAR 0 5
53304: PUSH
53305: LD_VAR 0 2
53309: PPUSH
53310: LD_INT 0
53312: PPUSH
53313: CALL_OW 517
53317: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53318: LD_ADDR_VAR 0 4
53322: PUSH
53323: DOUBLE
53324: LD_INT 1
53326: DEC
53327: ST_TO_ADDR
53328: LD_VAR 0 5
53332: PUSH
53333: LD_INT 1
53335: ARRAY
53336: PUSH
53337: FOR_TO
53338: IFFALSE 53417
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53340: LD_VAR 0 5
53344: PUSH
53345: LD_INT 1
53347: ARRAY
53348: PUSH
53349: LD_VAR 0 4
53353: ARRAY
53354: PPUSH
53355: LD_VAR 0 5
53359: PUSH
53360: LD_INT 2
53362: ARRAY
53363: PUSH
53364: LD_VAR 0 4
53368: ARRAY
53369: PPUSH
53370: CALL_OW 351
53374: IFFALSE 53415
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53376: LD_VAR 0 5
53380: PUSH
53381: LD_INT 1
53383: ARRAY
53384: PUSH
53385: LD_VAR 0 4
53389: ARRAY
53390: PPUSH
53391: LD_VAR 0 5
53395: PUSH
53396: LD_INT 2
53398: ARRAY
53399: PUSH
53400: LD_VAR 0 4
53404: ARRAY
53405: PPUSH
53406: LD_VAR 0 1
53410: PPUSH
53411: CALL_OW 244
// end ;
53415: GO 53337
53417: POP
53418: POP
// end ;
53419: LD_VAR 0 3
53423: RET
// export function UniqueArray ( array ) ; var i ; begin
53424: LD_INT 0
53426: PPUSH
53427: PPUSH
// result := [ ] ;
53428: LD_ADDR_VAR 0 2
53432: PUSH
53433: EMPTY
53434: ST_TO_ADDR
// if not array then
53435: LD_VAR 0 1
53439: NOT
53440: IFFALSE 53444
// exit ;
53442: GO 53505
// for i := 1 to array do
53444: LD_ADDR_VAR 0 3
53448: PUSH
53449: DOUBLE
53450: LD_INT 1
53452: DEC
53453: ST_TO_ADDR
53454: LD_VAR 0 1
53458: PUSH
53459: FOR_TO
53460: IFFALSE 53503
// if not array [ i ] in result then
53462: LD_VAR 0 1
53466: PUSH
53467: LD_VAR 0 3
53471: ARRAY
53472: PUSH
53473: LD_VAR 0 2
53477: IN
53478: NOT
53479: IFFALSE 53501
// result := Join ( result , i ) ;
53481: LD_ADDR_VAR 0 2
53485: PUSH
53486: LD_VAR 0 2
53490: PPUSH
53491: LD_VAR 0 3
53495: PPUSH
53496: CALL 48156 0 2
53500: ST_TO_ADDR
53501: GO 53459
53503: POP
53504: POP
// end ; end_of_file
53505: LD_VAR 0 2
53509: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53510: LD_VAR 0 1
53514: PUSH
53515: LD_INT 200
53517: DOUBLE
53518: GREATEREQUAL
53519: IFFALSE 53527
53521: LD_INT 299
53523: DOUBLE
53524: LESSEQUAL
53525: IFTRUE 53529
53527: GO 53561
53529: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53530: LD_VAR 0 1
53534: PPUSH
53535: LD_VAR 0 2
53539: PPUSH
53540: LD_VAR 0 3
53544: PPUSH
53545: LD_VAR 0 4
53549: PPUSH
53550: LD_VAR 0 5
53554: PPUSH
53555: CALL 54342 0 5
53559: GO 53638
53561: LD_INT 300
53563: DOUBLE
53564: GREATEREQUAL
53565: IFFALSE 53573
53567: LD_INT 399
53569: DOUBLE
53570: LESSEQUAL
53571: IFTRUE 53575
53573: GO 53637
53575: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53576: LD_VAR 0 1
53580: PPUSH
53581: LD_VAR 0 2
53585: PPUSH
53586: LD_VAR 0 3
53590: PPUSH
53591: LD_VAR 0 4
53595: PPUSH
53596: LD_VAR 0 5
53600: PPUSH
53601: LD_VAR 0 6
53605: PPUSH
53606: LD_VAR 0 7
53610: PPUSH
53611: LD_VAR 0 8
53615: PPUSH
53616: LD_VAR 0 9
53620: PPUSH
53621: LD_VAR 0 10
53625: PPUSH
53626: LD_VAR 0 11
53630: PPUSH
53631: CALL 61351 0 11
53635: GO 53638
53637: POP
// end ;
53638: PPOPN 11
53640: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53641: LD_VAR 0 1
53645: PPUSH
53646: LD_VAR 0 2
53650: PPUSH
53651: LD_VAR 0 3
53655: PPUSH
53656: LD_VAR 0 4
53660: PPUSH
53661: LD_VAR 0 5
53665: PPUSH
53666: CALL 53723 0 5
// end ; end_of_file
53670: PPOPN 5
53672: END
// export function SOS_UnitDestroyed ( un ) ; begin
53673: LD_INT 0
53675: PPUSH
// ComRadiation ( un ) ;
53676: LD_VAR 0 1
53680: PPUSH
53681: CALL 54762 0 1
// end ;
53685: LD_VAR 0 2
53689: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53690: LD_INT 0
53692: PPUSH
// ComRadiation ( un ) ;
53693: LD_VAR 0 1
53697: PPUSH
53698: CALL 54762 0 1
// end ;
53702: LD_VAR 0 2
53706: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53707: LD_INT 0
53709: PPUSH
// end ;
53710: LD_VAR 0 4
53714: RET
// export function SOS_Command ( cmd ) ; begin
53715: LD_INT 0
53717: PPUSH
// end ;
53718: LD_VAR 0 2
53722: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53723: LD_INT 0
53725: PPUSH
// end ;
53726: LD_VAR 0 6
53730: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53731: LD_INT 0
53733: PPUSH
53734: PPUSH
53735: PPUSH
53736: PPUSH
// if not vehicle or not factory then
53737: LD_VAR 0 1
53741: NOT
53742: IFTRUE 53751
53744: PUSH
53745: LD_VAR 0 2
53749: NOT
53750: OR
53751: IFFALSE 53755
// exit ;
53753: GO 54337
// if not factoryWaypoints then
53755: LD_EXP 59
53759: NOT
53760: IFFALSE 53764
// exit ;
53762: GO 54337
// for i := 1 to Count ( factoryWaypoints ) do
53764: LD_ADDR_VAR 0 4
53768: PUSH
53769: DOUBLE
53770: LD_INT 1
53772: DEC
53773: ST_TO_ADDR
53774: LD_EXP 59
53778: PPUSH
53779: CALL 12224 0 1
53783: PUSH
53784: FOR_TO
53785: IFFALSE 54335
// if factoryWaypoints [ i ] [ 2 ] = factory then
53787: LD_EXP 59
53791: PUSH
53792: LD_VAR 0 4
53796: ARRAY
53797: PUSH
53798: LD_INT 2
53800: ARRAY
53801: PUSH
53802: LD_VAR 0 2
53806: EQUAL
53807: IFFALSE 54333
// begin if GetControl ( vehicle ) = control_manual then
53809: LD_VAR 0 1
53813: PPUSH
53814: CALL_OW 263
53818: PUSH
53819: LD_INT 1
53821: EQUAL
53822: IFFALSE 54186
// begin driver := IsDrivenBy ( vehicle ) ;
53824: LD_ADDR_VAR 0 5
53828: PUSH
53829: LD_VAR 0 1
53833: PPUSH
53834: CALL_OW 311
53838: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
53839: LD_VAR 0 5
53843: PUSH
53844: LD_EXP 60
53848: IN
53849: IFTRUE 53863
53851: PUSH
53852: LD_VAR 0 1
53856: PUSH
53857: LD_EXP 60
53861: IN
53862: OR
53863: IFFALSE 53869
// exit ;
53865: POP
53866: POP
53867: GO 54337
// if not HasTask ( driver ) then
53869: LD_VAR 0 5
53873: PPUSH
53874: CALL_OW 314
53878: NOT
53879: IFFALSE 54184
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
53881: LD_ADDR_EXP 60
53885: PUSH
53886: LD_EXP 60
53890: PPUSH
53891: LD_VAR 0 5
53895: PPUSH
53896: CALL 48156 0 2
53900: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
53901: LD_ADDR_EXP 60
53905: PUSH
53906: LD_EXP 60
53910: PPUSH
53911: LD_VAR 0 1
53915: PPUSH
53916: CALL 48156 0 2
53920: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53921: LD_ADDR_VAR 0 6
53925: PUSH
53926: LD_EXP 59
53930: PUSH
53931: LD_VAR 0 4
53935: ARRAY
53936: PUSH
53937: LD_INT 3
53939: ARRAY
53940: PPUSH
53941: LD_EXP 59
53945: PUSH
53946: LD_VAR 0 4
53950: ARRAY
53951: PUSH
53952: LD_INT 4
53954: ARRAY
53955: PPUSH
53956: CALL_OW 428
53960: ST_TO_ADDR
// if hex then
53961: LD_VAR 0 6
53965: IFFALSE 53983
// ComMoveUnit ( driver , hex ) else
53967: LD_VAR 0 5
53971: PPUSH
53972: LD_VAR 0 6
53976: PPUSH
53977: CALL_OW 112
53981: GO 54067
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
53983: LD_VAR 0 1
53987: PPUSH
53988: LD_EXP 59
53992: PUSH
53993: LD_VAR 0 4
53997: ARRAY
53998: PUSH
53999: LD_INT 3
54001: ARRAY
54002: PPUSH
54003: LD_EXP 59
54007: PUSH
54008: LD_VAR 0 4
54012: ARRAY
54013: PUSH
54014: LD_INT 4
54016: ARRAY
54017: PPUSH
54018: CALL_OW 297
54022: PUSH
54023: LD_INT 0
54025: GREATER
54026: IFFALSE 54067
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54028: LD_VAR 0 5
54032: PPUSH
54033: LD_EXP 59
54037: PUSH
54038: LD_VAR 0 4
54042: ARRAY
54043: PUSH
54044: LD_INT 3
54046: ARRAY
54047: PPUSH
54048: LD_EXP 59
54052: PUSH
54053: LD_VAR 0 4
54057: ARRAY
54058: PUSH
54059: LD_INT 4
54061: ARRAY
54062: PPUSH
54063: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54067: LD_VAR 0 5
54071: PPUSH
54072: CALL_OW 181
// if Multiplayer then
54076: LD_OWVAR 4
54080: IFFALSE 54129
// begin repeat wait ( 10 ) ;
54082: LD_INT 10
54084: PPUSH
54085: CALL_OW 67
// until not IsInUnit ( driver ) ;
54089: LD_VAR 0 5
54093: PPUSH
54094: CALL_OW 310
54098: NOT
54099: IFFALSE 54082
// if not HasTask ( driver ) then
54101: LD_VAR 0 5
54105: PPUSH
54106: CALL_OW 314
54110: NOT
54111: IFFALSE 54127
// ComEnterUnit ( driver , factory ) ;
54113: LD_VAR 0 5
54117: PPUSH
54118: LD_VAR 0 2
54122: PPUSH
54123: CALL_OW 120
// end else
54127: GO 54143
// AddComEnterUnit ( driver , factory ) ;
54129: LD_VAR 0 5
54133: PPUSH
54134: LD_VAR 0 2
54138: PPUSH
54139: CALL_OW 180
// wait ( 0 0$1 ) ;
54143: LD_INT 35
54145: PPUSH
54146: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54150: LD_ADDR_EXP 60
54154: PUSH
54155: LD_EXP 60
54159: PUSH
54160: LD_VAR 0 5
54164: DIFF
54165: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54166: LD_ADDR_EXP 60
54170: PUSH
54171: LD_EXP 60
54175: PUSH
54176: LD_VAR 0 1
54180: DIFF
54181: ST_TO_ADDR
// break ;
54182: GO 54335
// end ; end else
54184: GO 54333
// if GetControl ( vehicle ) = control_remote then
54186: LD_VAR 0 1
54190: PPUSH
54191: CALL_OW 263
54195: PUSH
54196: LD_INT 2
54198: EQUAL
54199: IFFALSE 54285
// begin wait ( 0 0$2 ) ;
54201: LD_INT 70
54203: PPUSH
54204: CALL_OW 67
// repeat wait ( 10 ) ;
54208: LD_INT 10
54210: PPUSH
54211: CALL_OW 67
// Connect ( vehicle ) ;
54215: LD_VAR 0 1
54219: PPUSH
54220: CALL 18468 0 1
// until IsControledBy ( vehicle ) ;
54224: LD_VAR 0 1
54228: PPUSH
54229: CALL_OW 312
54233: IFFALSE 54208
// wait ( 10 ) ;
54235: LD_INT 10
54237: PPUSH
54238: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54242: LD_VAR 0 1
54246: PPUSH
54247: LD_EXP 59
54251: PUSH
54252: LD_VAR 0 4
54256: ARRAY
54257: PUSH
54258: LD_INT 3
54260: ARRAY
54261: PPUSH
54262: LD_EXP 59
54266: PUSH
54267: LD_VAR 0 4
54271: ARRAY
54272: PUSH
54273: LD_INT 4
54275: ARRAY
54276: PPUSH
54277: CALL_OW 111
// break ;
54281: GO 54335
// end else
54283: GO 54333
// begin wait ( 0 0$3 ) ;
54285: LD_INT 105
54287: PPUSH
54288: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54292: LD_VAR 0 1
54296: PPUSH
54297: LD_EXP 59
54301: PUSH
54302: LD_VAR 0 4
54306: ARRAY
54307: PUSH
54308: LD_INT 3
54310: ARRAY
54311: PPUSH
54312: LD_EXP 59
54316: PUSH
54317: LD_VAR 0 4
54321: ARRAY
54322: PUSH
54323: LD_INT 4
54325: ARRAY
54326: PPUSH
54327: CALL_OW 111
// break ;
54331: GO 54335
// end ; end ;
54333: GO 53784
54335: POP
54336: POP
// end ;
54337: LD_VAR 0 3
54341: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54342: LD_INT 0
54344: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54345: LD_VAR 0 1
54349: PUSH
54350: LD_INT 250
54352: EQUAL
54353: IFFALSE 54370
54355: PUSH
54356: LD_VAR 0 2
54360: PPUSH
54361: CALL_OW 264
54365: PUSH
54366: LD_INT 81
54368: EQUAL
54369: AND
54370: IFFALSE 54391
// MinerPlaceMine ( unit , x , y ) ;
54372: LD_VAR 0 2
54376: PPUSH
54377: LD_VAR 0 4
54381: PPUSH
54382: LD_VAR 0 5
54386: PPUSH
54387: CALL 57523 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54391: LD_VAR 0 1
54395: PUSH
54396: LD_INT 251
54398: EQUAL
54399: IFFALSE 54416
54401: PUSH
54402: LD_VAR 0 2
54406: PPUSH
54407: CALL_OW 264
54411: PUSH
54412: LD_INT 81
54414: EQUAL
54415: AND
54416: IFFALSE 54437
// MinerDetonateMine ( unit , x , y ) ;
54418: LD_VAR 0 2
54422: PPUSH
54423: LD_VAR 0 4
54427: PPUSH
54428: LD_VAR 0 5
54432: PPUSH
54433: CALL 57802 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54437: LD_VAR 0 1
54441: PUSH
54442: LD_INT 252
54444: EQUAL
54445: IFFALSE 54462
54447: PUSH
54448: LD_VAR 0 2
54452: PPUSH
54453: CALL_OW 264
54457: PUSH
54458: LD_INT 81
54460: EQUAL
54461: AND
54462: IFFALSE 54483
// MinerCreateMinefield ( unit , x , y ) ;
54464: LD_VAR 0 2
54468: PPUSH
54469: LD_VAR 0 4
54473: PPUSH
54474: LD_VAR 0 5
54478: PPUSH
54479: CALL 58221 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54483: LD_VAR 0 1
54487: PUSH
54488: LD_INT 253
54490: EQUAL
54491: IFFALSE 54508
54493: PUSH
54494: LD_VAR 0 2
54498: PPUSH
54499: CALL_OW 257
54503: PUSH
54504: LD_INT 5
54506: EQUAL
54507: AND
54508: IFFALSE 54529
// ComBinocular ( unit , x , y ) ;
54510: LD_VAR 0 2
54514: PPUSH
54515: LD_VAR 0 4
54519: PPUSH
54520: LD_VAR 0 5
54524: PPUSH
54525: CALL 58596 0 3
// if selectedUnit then
54529: LD_VAR 0 3
54533: IFFALSE 54593
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54535: LD_VAR 0 1
54539: PUSH
54540: LD_INT 254
54542: EQUAL
54543: IFFALSE 54560
54545: PUSH
54546: LD_VAR 0 2
54550: PPUSH
54551: CALL_OW 264
54555: PUSH
54556: LD_INT 99
54558: EQUAL
54559: AND
54560: IFFALSE 54577
54562: PUSH
54563: LD_VAR 0 3
54567: PPUSH
54568: CALL_OW 263
54572: PUSH
54573: LD_INT 3
54575: EQUAL
54576: AND
54577: IFFALSE 54593
// HackDestroyVehicle ( unit , selectedUnit ) ;
54579: LD_VAR 0 2
54583: PPUSH
54584: LD_VAR 0 3
54588: PPUSH
54589: CALL 56883 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54593: LD_VAR 0 1
54597: PUSH
54598: LD_INT 255
54600: EQUAL
54601: IFFALSE 54625
54603: PUSH
54604: LD_VAR 0 2
54608: PPUSH
54609: CALL_OW 264
54613: PUSH
54614: LD_INT 14
54616: PUSH
54617: LD_INT 53
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: IN
54624: AND
54625: IFFALSE 54643
54627: PUSH
54628: LD_VAR 0 4
54632: PPUSH
54633: LD_VAR 0 5
54637: PPUSH
54638: CALL_OW 488
54642: AND
54643: IFFALSE 54667
// CutTreeXYR ( unit , x , y , 12 ) ;
54645: LD_VAR 0 2
54649: PPUSH
54650: LD_VAR 0 4
54654: PPUSH
54655: LD_VAR 0 5
54659: PPUSH
54660: LD_INT 12
54662: PPUSH
54663: CALL 54858 0 4
// if cmd = 256 then
54667: LD_VAR 0 1
54671: PUSH
54672: LD_INT 256
54674: EQUAL
54675: IFFALSE 54696
// SetFactoryWaypoint ( unit , x , y ) ;
54677: LD_VAR 0 2
54681: PPUSH
54682: LD_VAR 0 4
54686: PPUSH
54687: LD_VAR 0 5
54691: PPUSH
54692: CALL 61359 0 3
// if cmd = 257 then
54696: LD_VAR 0 1
54700: PUSH
54701: LD_INT 257
54703: EQUAL
54704: IFFALSE 54725
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54706: LD_VAR 0 2
54710: PPUSH
54711: LD_VAR 0 4
54715: PPUSH
54716: LD_VAR 0 5
54720: PPUSH
54721: CALL 61855 0 3
// if cmd = 258 then
54725: LD_VAR 0 1
54729: PUSH
54730: LD_INT 258
54732: EQUAL
54733: IFFALSE 54757
// BurnTreeXYR ( unit , x , y , 8 ) ;
54735: LD_VAR 0 2
54739: PPUSH
54740: LD_VAR 0 4
54744: PPUSH
54745: LD_VAR 0 5
54749: PPUSH
54750: LD_INT 8
54752: PPUSH
54753: CALL 55258 0 4
// end ;
54757: LD_VAR 0 6
54761: RET
// export function ComRadiation ( un ) ; var eff ; begin
54762: LD_INT 0
54764: PPUSH
54765: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54766: LD_VAR 0 1
54770: PPUSH
54771: CALL_OW 264
54775: PUSH
54776: LD_INT 91
54778: NONEQUAL
54779: IFFALSE 54783
// exit ;
54781: GO 54853
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54783: LD_INT 68
54785: PPUSH
54786: LD_VAR 0 1
54790: PPUSH
54791: CALL_OW 255
54795: PPUSH
54796: CALL_OW 321
54800: PUSH
54801: LD_INT 2
54803: EQUAL
54804: IFFALSE 54816
// eff := 50 else
54806: LD_ADDR_VAR 0 3
54810: PUSH
54811: LD_INT 50
54813: ST_TO_ADDR
54814: GO 54824
// eff := 25 ;
54816: LD_ADDR_VAR 0 3
54820: PUSH
54821: LD_INT 25
54823: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54824: LD_VAR 0 1
54828: PPUSH
54829: CALL_OW 250
54833: PPUSH
54834: LD_VAR 0 1
54838: PPUSH
54839: CALL_OW 251
54843: PPUSH
54844: LD_VAR 0 3
54848: PPUSH
54849: CALL_OW 495
// end ;
54853: LD_VAR 0 2
54857: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54858: LD_INT 0
54860: PPUSH
54861: PPUSH
54862: PPUSH
54863: PPUSH
54864: PPUSH
54865: PPUSH
54866: PPUSH
54867: PPUSH
54868: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54869: LD_VAR 0 1
54873: PPUSH
54874: CALL_OW 302
54878: NOT
54879: IFTRUE 54898
54881: PUSH
54882: LD_VAR 0 2
54886: PPUSH
54887: LD_VAR 0 3
54891: PPUSH
54892: CALL_OW 488
54896: NOT
54897: OR
54898: IFTRUE 54907
54900: PUSH
54901: LD_VAR 0 4
54905: NOT
54906: OR
54907: IFFALSE 54911
// exit ;
54909: GO 55253
// list := [ ] ;
54911: LD_ADDR_VAR 0 13
54915: PUSH
54916: EMPTY
54917: ST_TO_ADDR
// if x - r < 0 then
54918: LD_VAR 0 2
54922: PUSH
54923: LD_VAR 0 4
54927: MINUS
54928: PUSH
54929: LD_INT 0
54931: LESS
54932: IFFALSE 54944
// min_x := 0 else
54934: LD_ADDR_VAR 0 7
54938: PUSH
54939: LD_INT 0
54941: ST_TO_ADDR
54942: GO 54960
// min_x := x - r ;
54944: LD_ADDR_VAR 0 7
54948: PUSH
54949: LD_VAR 0 2
54953: PUSH
54954: LD_VAR 0 4
54958: MINUS
54959: ST_TO_ADDR
// if y - r < 0 then
54960: LD_VAR 0 3
54964: PUSH
54965: LD_VAR 0 4
54969: MINUS
54970: PUSH
54971: LD_INT 0
54973: LESS
54974: IFFALSE 54986
// min_y := 0 else
54976: LD_ADDR_VAR 0 8
54980: PUSH
54981: LD_INT 0
54983: ST_TO_ADDR
54984: GO 55002
// min_y := y - r ;
54986: LD_ADDR_VAR 0 8
54990: PUSH
54991: LD_VAR 0 3
54995: PUSH
54996: LD_VAR 0 4
55000: MINUS
55001: ST_TO_ADDR
// max_x := x + r ;
55002: LD_ADDR_VAR 0 9
55006: PUSH
55007: LD_VAR 0 2
55011: PUSH
55012: LD_VAR 0 4
55016: PLUS
55017: ST_TO_ADDR
// max_y := y + r ;
55018: LD_ADDR_VAR 0 10
55022: PUSH
55023: LD_VAR 0 3
55027: PUSH
55028: LD_VAR 0 4
55032: PLUS
55033: ST_TO_ADDR
// for _x = min_x to max_x do
55034: LD_ADDR_VAR 0 11
55038: PUSH
55039: DOUBLE
55040: LD_VAR 0 7
55044: DEC
55045: ST_TO_ADDR
55046: LD_VAR 0 9
55050: PUSH
55051: FOR_TO
55052: IFFALSE 55171
// for _y = min_y to max_y do
55054: LD_ADDR_VAR 0 12
55058: PUSH
55059: DOUBLE
55060: LD_VAR 0 8
55064: DEC
55065: ST_TO_ADDR
55066: LD_VAR 0 10
55070: PUSH
55071: FOR_TO
55072: IFFALSE 55167
// begin if not ValidHex ( _x , _y ) then
55074: LD_VAR 0 11
55078: PPUSH
55079: LD_VAR 0 12
55083: PPUSH
55084: CALL_OW 488
55088: NOT
55089: IFFALSE 55093
// continue ;
55091: GO 55071
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55093: LD_VAR 0 11
55097: PPUSH
55098: LD_VAR 0 12
55102: PPUSH
55103: CALL_OW 351
55107: IFFALSE 55125
55109: PUSH
55110: LD_VAR 0 11
55114: PPUSH
55115: LD_VAR 0 12
55119: PPUSH
55120: CALL_OW 554
55124: AND
55125: IFFALSE 55165
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55127: LD_ADDR_VAR 0 13
55131: PUSH
55132: LD_VAR 0 13
55136: PPUSH
55137: LD_VAR 0 13
55141: PUSH
55142: LD_INT 1
55144: PLUS
55145: PPUSH
55146: LD_VAR 0 11
55150: PUSH
55151: LD_VAR 0 12
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PPUSH
55160: CALL_OW 2
55164: ST_TO_ADDR
// end ;
55165: GO 55071
55167: POP
55168: POP
55169: GO 55051
55171: POP
55172: POP
// if not list then
55173: LD_VAR 0 13
55177: NOT
55178: IFFALSE 55182
// exit ;
55180: GO 55253
// for i in list do
55182: LD_ADDR_VAR 0 6
55186: PUSH
55187: LD_VAR 0 13
55191: PUSH
55192: FOR_IN
55193: IFFALSE 55251
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55195: LD_VAR 0 1
55199: PPUSH
55200: LD_STRING M
55202: PUSH
55203: LD_VAR 0 6
55207: PUSH
55208: LD_INT 1
55210: ARRAY
55211: PUSH
55212: LD_VAR 0 6
55216: PUSH
55217: LD_INT 2
55219: ARRAY
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: PUSH
55242: EMPTY
55243: LIST
55244: PPUSH
55245: CALL_OW 447
55249: GO 55192
55251: POP
55252: POP
// end ;
55253: LD_VAR 0 5
55257: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55258: LD_INT 0
55260: PPUSH
55261: PPUSH
55262: PPUSH
55263: PPUSH
55264: PPUSH
55265: PPUSH
55266: PPUSH
55267: PPUSH
55268: PPUSH
55269: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55270: LD_VAR 0 1
55274: PPUSH
55275: CALL_OW 302
55279: NOT
55280: IFTRUE 55299
55282: PUSH
55283: LD_VAR 0 2
55287: PPUSH
55288: LD_VAR 0 3
55292: PPUSH
55293: CALL_OW 488
55297: NOT
55298: OR
55299: IFTRUE 55308
55301: PUSH
55302: LD_VAR 0 4
55306: NOT
55307: OR
55308: IFFALSE 55312
// exit ;
55310: GO 55829
// list := [ ] ;
55312: LD_ADDR_VAR 0 13
55316: PUSH
55317: EMPTY
55318: ST_TO_ADDR
// if x - r < 0 then
55319: LD_VAR 0 2
55323: PUSH
55324: LD_VAR 0 4
55328: MINUS
55329: PUSH
55330: LD_INT 0
55332: LESS
55333: IFFALSE 55345
// min_x := 0 else
55335: LD_ADDR_VAR 0 7
55339: PUSH
55340: LD_INT 0
55342: ST_TO_ADDR
55343: GO 55361
// min_x := x - r ;
55345: LD_ADDR_VAR 0 7
55349: PUSH
55350: LD_VAR 0 2
55354: PUSH
55355: LD_VAR 0 4
55359: MINUS
55360: ST_TO_ADDR
// if y - r < 0 then
55361: LD_VAR 0 3
55365: PUSH
55366: LD_VAR 0 4
55370: MINUS
55371: PUSH
55372: LD_INT 0
55374: LESS
55375: IFFALSE 55387
// min_y := 0 else
55377: LD_ADDR_VAR 0 8
55381: PUSH
55382: LD_INT 0
55384: ST_TO_ADDR
55385: GO 55403
// min_y := y - r ;
55387: LD_ADDR_VAR 0 8
55391: PUSH
55392: LD_VAR 0 3
55396: PUSH
55397: LD_VAR 0 4
55401: MINUS
55402: ST_TO_ADDR
// max_x := x + r ;
55403: LD_ADDR_VAR 0 9
55407: PUSH
55408: LD_VAR 0 2
55412: PUSH
55413: LD_VAR 0 4
55417: PLUS
55418: ST_TO_ADDR
// max_y := y + r ;
55419: LD_ADDR_VAR 0 10
55423: PUSH
55424: LD_VAR 0 3
55428: PUSH
55429: LD_VAR 0 4
55433: PLUS
55434: ST_TO_ADDR
// for _x = min_x to max_x do
55435: LD_ADDR_VAR 0 11
55439: PUSH
55440: DOUBLE
55441: LD_VAR 0 7
55445: DEC
55446: ST_TO_ADDR
55447: LD_VAR 0 9
55451: PUSH
55452: FOR_TO
55453: IFFALSE 55572
// for _y = min_y to max_y do
55455: LD_ADDR_VAR 0 12
55459: PUSH
55460: DOUBLE
55461: LD_VAR 0 8
55465: DEC
55466: ST_TO_ADDR
55467: LD_VAR 0 10
55471: PUSH
55472: FOR_TO
55473: IFFALSE 55568
// begin if not ValidHex ( _x , _y ) then
55475: LD_VAR 0 11
55479: PPUSH
55480: LD_VAR 0 12
55484: PPUSH
55485: CALL_OW 488
55489: NOT
55490: IFFALSE 55494
// continue ;
55492: GO 55472
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55494: LD_VAR 0 11
55498: PPUSH
55499: LD_VAR 0 12
55503: PPUSH
55504: CALL_OW 351
55508: IFFALSE 55526
55510: PUSH
55511: LD_VAR 0 11
55515: PPUSH
55516: LD_VAR 0 12
55520: PPUSH
55521: CALL_OW 554
55525: AND
55526: IFFALSE 55566
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55528: LD_ADDR_VAR 0 13
55532: PUSH
55533: LD_VAR 0 13
55537: PPUSH
55538: LD_VAR 0 13
55542: PUSH
55543: LD_INT 1
55545: PLUS
55546: PPUSH
55547: LD_VAR 0 11
55551: PUSH
55552: LD_VAR 0 12
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PPUSH
55561: CALL_OW 2
55565: ST_TO_ADDR
// end ;
55566: GO 55472
55568: POP
55569: POP
55570: GO 55452
55572: POP
55573: POP
// if not list then
55574: LD_VAR 0 13
55578: NOT
55579: IFFALSE 55583
// exit ;
55581: GO 55829
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55583: LD_ADDR_VAR 0 13
55587: PUSH
55588: LD_VAR 0 1
55592: PPUSH
55593: LD_VAR 0 13
55597: PPUSH
55598: LD_INT 1
55600: PPUSH
55601: LD_INT 1
55603: PPUSH
55604: CALL 15596 0 4
55608: ST_TO_ADDR
// ComStop ( flame ) ;
55609: LD_VAR 0 1
55613: PPUSH
55614: CALL_OW 141
// for i in list do
55618: LD_ADDR_VAR 0 6
55622: PUSH
55623: LD_VAR 0 13
55627: PUSH
55628: FOR_IN
55629: IFFALSE 55660
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55631: LD_VAR 0 1
55635: PPUSH
55636: LD_VAR 0 6
55640: PUSH
55641: LD_INT 1
55643: ARRAY
55644: PPUSH
55645: LD_VAR 0 6
55649: PUSH
55650: LD_INT 2
55652: ARRAY
55653: PPUSH
55654: CALL_OW 176
55658: GO 55628
55660: POP
55661: POP
// repeat wait ( 0 0$1 ) ;
55662: LD_INT 35
55664: PPUSH
55665: CALL_OW 67
// task := GetTaskList ( flame ) ;
55669: LD_ADDR_VAR 0 14
55673: PUSH
55674: LD_VAR 0 1
55678: PPUSH
55679: CALL_OW 437
55683: ST_TO_ADDR
// if not task then
55684: LD_VAR 0 14
55688: NOT
55689: IFFALSE 55693
// exit ;
55691: GO 55829
// if task [ 1 ] [ 1 ] <> | then
55693: LD_VAR 0 14
55697: PUSH
55698: LD_INT 1
55700: ARRAY
55701: PUSH
55702: LD_INT 1
55704: ARRAY
55705: PUSH
55706: LD_STRING |
55708: NONEQUAL
55709: IFFALSE 55713
// exit ;
55711: GO 55829
// _x := task [ 1 ] [ 2 ] ;
55713: LD_ADDR_VAR 0 11
55717: PUSH
55718: LD_VAR 0 14
55722: PUSH
55723: LD_INT 1
55725: ARRAY
55726: PUSH
55727: LD_INT 2
55729: ARRAY
55730: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55731: LD_ADDR_VAR 0 12
55735: PUSH
55736: LD_VAR 0 14
55740: PUSH
55741: LD_INT 1
55743: ARRAY
55744: PUSH
55745: LD_INT 3
55747: ARRAY
55748: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55749: LD_VAR 0 11
55753: PPUSH
55754: LD_VAR 0 12
55758: PPUSH
55759: CALL_OW 351
55763: NOT
55764: IFTRUE 55783
55766: PUSH
55767: LD_VAR 0 11
55771: PPUSH
55772: LD_VAR 0 12
55776: PPUSH
55777: CALL_OW 554
55781: NOT
55782: OR
55783: IFFALSE 55817
// begin task := Delete ( task , 1 ) ;
55785: LD_ADDR_VAR 0 14
55789: PUSH
55790: LD_VAR 0 14
55794: PPUSH
55795: LD_INT 1
55797: PPUSH
55798: CALL_OW 3
55802: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55803: LD_VAR 0 1
55807: PPUSH
55808: LD_VAR 0 14
55812: PPUSH
55813: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55817: LD_VAR 0 1
55821: PPUSH
55822: CALL_OW 314
55826: NOT
55827: IFFALSE 55662
// end ;
55829: LD_VAR 0 5
55833: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55834: LD_EXP 48
55838: NOT
55839: IFFALSE 55889
55841: GO 55843
55843: DISABLE
// begin initHack := true ;
55844: LD_ADDR_EXP 48
55848: PUSH
55849: LD_INT 1
55851: ST_TO_ADDR
// hackTanks := [ ] ;
55852: LD_ADDR_EXP 49
55856: PUSH
55857: EMPTY
55858: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55859: LD_ADDR_EXP 50
55863: PUSH
55864: EMPTY
55865: ST_TO_ADDR
// hackLimit := 3 ;
55866: LD_ADDR_EXP 51
55870: PUSH
55871: LD_INT 3
55873: ST_TO_ADDR
// hackDist := 12 ;
55874: LD_ADDR_EXP 52
55878: PUSH
55879: LD_INT 12
55881: ST_TO_ADDR
// hackCounter := [ ] ;
55882: LD_ADDR_EXP 53
55886: PUSH
55887: EMPTY
55888: ST_TO_ADDR
// end ;
55889: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55890: LD_EXP 48
55894: IFFALSE 55912
55896: PUSH
55897: LD_INT 34
55899: PUSH
55900: LD_INT 99
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PPUSH
55907: CALL_OW 69
55911: AND
55912: IFFALSE 56165
55914: GO 55916
55916: DISABLE
55917: LD_INT 0
55919: PPUSH
55920: PPUSH
// begin enable ;
55921: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55922: LD_ADDR_VAR 0 1
55926: PUSH
55927: LD_INT 34
55929: PUSH
55930: LD_INT 99
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PPUSH
55937: CALL_OW 69
55941: PUSH
55942: FOR_IN
55943: IFFALSE 56163
// begin if not i in hackTanks then
55945: LD_VAR 0 1
55949: PUSH
55950: LD_EXP 49
55954: IN
55955: NOT
55956: IFFALSE 56039
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55958: LD_ADDR_EXP 49
55962: PUSH
55963: LD_EXP 49
55967: PPUSH
55968: LD_EXP 49
55972: PUSH
55973: LD_INT 1
55975: PLUS
55976: PPUSH
55977: LD_VAR 0 1
55981: PPUSH
55982: CALL_OW 1
55986: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55987: LD_ADDR_EXP 50
55991: PUSH
55992: LD_EXP 50
55996: PPUSH
55997: LD_EXP 50
56001: PUSH
56002: LD_INT 1
56004: PLUS
56005: PPUSH
56006: EMPTY
56007: PPUSH
56008: CALL_OW 1
56012: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56013: LD_ADDR_EXP 53
56017: PUSH
56018: LD_EXP 53
56022: PPUSH
56023: LD_EXP 53
56027: PUSH
56028: LD_INT 1
56030: PLUS
56031: PPUSH
56032: EMPTY
56033: PPUSH
56034: CALL_OW 1
56038: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56039: LD_VAR 0 1
56043: PPUSH
56044: CALL_OW 302
56048: NOT
56049: IFFALSE 56062
// begin HackUnlinkAll ( i ) ;
56051: LD_VAR 0 1
56055: PPUSH
56056: CALL 56168 0 1
// continue ;
56060: GO 55942
// end ; HackCheckCapturedStatus ( i ) ;
56062: LD_VAR 0 1
56066: PPUSH
56067: CALL 56613 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56071: LD_ADDR_VAR 0 2
56075: PUSH
56076: LD_INT 81
56078: PUSH
56079: LD_VAR 0 1
56083: PPUSH
56084: CALL_OW 255
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 33
56095: PUSH
56096: LD_INT 3
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 91
56105: PUSH
56106: LD_VAR 0 1
56110: PUSH
56111: LD_EXP 52
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 50
56123: PUSH
56124: EMPTY
56125: LIST
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: PPUSH
56133: CALL_OW 69
56137: ST_TO_ADDR
// if not tmp then
56138: LD_VAR 0 2
56142: NOT
56143: IFFALSE 56147
// continue ;
56145: GO 55942
// HackLink ( i , tmp ) ;
56147: LD_VAR 0 1
56151: PPUSH
56152: LD_VAR 0 2
56156: PPUSH
56157: CALL 56304 0 2
// end ;
56161: GO 55942
56163: POP
56164: POP
// end ;
56165: PPOPN 2
56167: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56168: LD_INT 0
56170: PPUSH
56171: PPUSH
56172: PPUSH
// if not hack in hackTanks then
56173: LD_VAR 0 1
56177: PUSH
56178: LD_EXP 49
56182: IN
56183: NOT
56184: IFFALSE 56188
// exit ;
56186: GO 56299
// index := GetElementIndex ( hackTanks , hack ) ;
56188: LD_ADDR_VAR 0 4
56192: PUSH
56193: LD_EXP 49
56197: PPUSH
56198: LD_VAR 0 1
56202: PPUSH
56203: CALL 14891 0 2
56207: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56208: LD_EXP 50
56212: PUSH
56213: LD_VAR 0 4
56217: ARRAY
56218: IFFALSE 56299
// begin for i in hackTanksCaptured [ index ] do
56220: LD_ADDR_VAR 0 3
56224: PUSH
56225: LD_EXP 50
56229: PUSH
56230: LD_VAR 0 4
56234: ARRAY
56235: PUSH
56236: FOR_IN
56237: IFFALSE 56263
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56239: LD_VAR 0 3
56243: PUSH
56244: LD_INT 1
56246: ARRAY
56247: PPUSH
56248: LD_VAR 0 3
56252: PUSH
56253: LD_INT 2
56255: ARRAY
56256: PPUSH
56257: CALL_OW 235
56261: GO 56236
56263: POP
56264: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56265: LD_ADDR_EXP 50
56269: PUSH
56270: LD_EXP 50
56274: PPUSH
56275: LD_VAR 0 4
56279: PPUSH
56280: EMPTY
56281: PPUSH
56282: CALL_OW 1
56286: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56287: LD_VAR 0 1
56291: PPUSH
56292: LD_INT 0
56294: PPUSH
56295: CALL_OW 505
// end ; end ;
56299: LD_VAR 0 2
56303: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56304: LD_INT 0
56306: PPUSH
56307: PPUSH
56308: PPUSH
// if not hack in hackTanks or not vehicles then
56309: LD_VAR 0 1
56313: PUSH
56314: LD_EXP 49
56318: IN
56319: NOT
56320: IFTRUE 56329
56322: PUSH
56323: LD_VAR 0 2
56327: NOT
56328: OR
56329: IFFALSE 56333
// exit ;
56331: GO 56608
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56333: LD_ADDR_VAR 0 2
56337: PUSH
56338: LD_VAR 0 1
56342: PPUSH
56343: LD_VAR 0 2
56347: PPUSH
56348: LD_INT 1
56350: PPUSH
56351: LD_INT 1
56353: PPUSH
56354: CALL 15543 0 4
56358: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56359: LD_ADDR_VAR 0 5
56363: PUSH
56364: LD_EXP 49
56368: PPUSH
56369: LD_VAR 0 1
56373: PPUSH
56374: CALL 14891 0 2
56378: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56379: LD_EXP 50
56383: PUSH
56384: LD_VAR 0 5
56388: ARRAY
56389: PUSH
56390: LD_EXP 51
56394: LESS
56395: IFFALSE 56584
// begin for i := 1 to vehicles do
56397: LD_ADDR_VAR 0 4
56401: PUSH
56402: DOUBLE
56403: LD_INT 1
56405: DEC
56406: ST_TO_ADDR
56407: LD_VAR 0 2
56411: PUSH
56412: FOR_TO
56413: IFFALSE 56582
// begin if hackTanksCaptured [ index ] = hackLimit then
56415: LD_EXP 50
56419: PUSH
56420: LD_VAR 0 5
56424: ARRAY
56425: PUSH
56426: LD_EXP 51
56430: EQUAL
56431: IFFALSE 56435
// break ;
56433: GO 56582
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56435: LD_ADDR_EXP 53
56439: PUSH
56440: LD_EXP 53
56444: PPUSH
56445: LD_VAR 0 5
56449: PPUSH
56450: LD_EXP 53
56454: PUSH
56455: LD_VAR 0 5
56459: ARRAY
56460: PUSH
56461: LD_INT 1
56463: PLUS
56464: PPUSH
56465: CALL_OW 1
56469: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56470: LD_ADDR_EXP 50
56474: PUSH
56475: LD_EXP 50
56479: PPUSH
56480: LD_VAR 0 5
56484: PUSH
56485: LD_EXP 50
56489: PUSH
56490: LD_VAR 0 5
56494: ARRAY
56495: PUSH
56496: LD_INT 1
56498: PLUS
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PPUSH
56504: LD_VAR 0 2
56508: PUSH
56509: LD_VAR 0 4
56513: ARRAY
56514: PUSH
56515: LD_VAR 0 2
56519: PUSH
56520: LD_VAR 0 4
56524: ARRAY
56525: PPUSH
56526: CALL_OW 255
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PPUSH
56535: CALL 15108 0 3
56539: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56540: LD_VAR 0 2
56544: PUSH
56545: LD_VAR 0 4
56549: ARRAY
56550: PPUSH
56551: LD_VAR 0 1
56555: PPUSH
56556: CALL_OW 255
56560: PPUSH
56561: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56565: LD_VAR 0 2
56569: PUSH
56570: LD_VAR 0 4
56574: ARRAY
56575: PPUSH
56576: CALL_OW 141
// end ;
56580: GO 56412
56582: POP
56583: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56584: LD_VAR 0 1
56588: PPUSH
56589: LD_EXP 50
56593: PUSH
56594: LD_VAR 0 5
56598: ARRAY
56599: PUSH
56600: LD_INT 0
56602: PLUS
56603: PPUSH
56604: CALL_OW 505
// end ;
56608: LD_VAR 0 3
56612: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56613: LD_INT 0
56615: PPUSH
56616: PPUSH
56617: PPUSH
56618: PPUSH
// if not hack in hackTanks then
56619: LD_VAR 0 1
56623: PUSH
56624: LD_EXP 49
56628: IN
56629: NOT
56630: IFFALSE 56634
// exit ;
56632: GO 56878
// index := GetElementIndex ( hackTanks , hack ) ;
56634: LD_ADDR_VAR 0 4
56638: PUSH
56639: LD_EXP 49
56643: PPUSH
56644: LD_VAR 0 1
56648: PPUSH
56649: CALL 14891 0 2
56653: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56654: LD_ADDR_VAR 0 3
56658: PUSH
56659: DOUBLE
56660: LD_EXP 50
56664: PUSH
56665: LD_VAR 0 4
56669: ARRAY
56670: INC
56671: ST_TO_ADDR
56672: LD_INT 1
56674: PUSH
56675: FOR_DOWNTO
56676: IFFALSE 56852
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56678: LD_ADDR_VAR 0 5
56682: PUSH
56683: LD_EXP 50
56687: PUSH
56688: LD_VAR 0 4
56692: ARRAY
56693: PUSH
56694: LD_VAR 0 3
56698: ARRAY
56699: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56700: LD_VAR 0 5
56704: PUSH
56705: LD_INT 1
56707: ARRAY
56708: PPUSH
56709: CALL_OW 302
56713: NOT
56714: IFTRUE 56742
56716: PUSH
56717: LD_VAR 0 5
56721: PUSH
56722: LD_INT 1
56724: ARRAY
56725: PPUSH
56726: CALL_OW 255
56730: PUSH
56731: LD_VAR 0 1
56735: PPUSH
56736: CALL_OW 255
56740: NONEQUAL
56741: OR
56742: IFFALSE 56850
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56744: LD_VAR 0 5
56748: PUSH
56749: LD_INT 1
56751: ARRAY
56752: PPUSH
56753: CALL_OW 305
56757: IFFALSE 56785
56759: PUSH
56760: LD_VAR 0 5
56764: PUSH
56765: LD_INT 1
56767: ARRAY
56768: PPUSH
56769: CALL_OW 255
56773: PUSH
56774: LD_VAR 0 1
56778: PPUSH
56779: CALL_OW 255
56783: EQUAL
56784: AND
56785: IFFALSE 56809
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56787: LD_VAR 0 5
56791: PUSH
56792: LD_INT 1
56794: ARRAY
56795: PPUSH
56796: LD_VAR 0 5
56800: PUSH
56801: LD_INT 2
56803: ARRAY
56804: PPUSH
56805: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56809: LD_ADDR_EXP 50
56813: PUSH
56814: LD_EXP 50
56818: PPUSH
56819: LD_VAR 0 4
56823: PPUSH
56824: LD_EXP 50
56828: PUSH
56829: LD_VAR 0 4
56833: ARRAY
56834: PPUSH
56835: LD_VAR 0 3
56839: PPUSH
56840: CALL_OW 3
56844: PPUSH
56845: CALL_OW 1
56849: ST_TO_ADDR
// end ; end ;
56850: GO 56675
56852: POP
56853: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56854: LD_VAR 0 1
56858: PPUSH
56859: LD_EXP 50
56863: PUSH
56864: LD_VAR 0 4
56868: ARRAY
56869: PUSH
56870: LD_INT 0
56872: PLUS
56873: PPUSH
56874: CALL_OW 505
// end ;
56878: LD_VAR 0 2
56882: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56883: LD_INT 0
56885: PPUSH
56886: PPUSH
56887: PPUSH
56888: PPUSH
// if not hack in hackTanks then
56889: LD_VAR 0 1
56893: PUSH
56894: LD_EXP 49
56898: IN
56899: NOT
56900: IFFALSE 56904
// exit ;
56902: GO 56989
// index := GetElementIndex ( hackTanks , hack ) ;
56904: LD_ADDR_VAR 0 5
56908: PUSH
56909: LD_EXP 49
56913: PPUSH
56914: LD_VAR 0 1
56918: PPUSH
56919: CALL 14891 0 2
56923: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56924: LD_ADDR_VAR 0 4
56928: PUSH
56929: DOUBLE
56930: LD_INT 1
56932: DEC
56933: ST_TO_ADDR
56934: LD_EXP 50
56938: PUSH
56939: LD_VAR 0 5
56943: ARRAY
56944: PUSH
56945: FOR_TO
56946: IFFALSE 56987
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56948: LD_EXP 50
56952: PUSH
56953: LD_VAR 0 5
56957: ARRAY
56958: PUSH
56959: LD_VAR 0 4
56963: ARRAY
56964: PUSH
56965: LD_INT 1
56967: ARRAY
56968: PUSH
56969: LD_VAR 0 2
56973: EQUAL
56974: IFFALSE 56985
// KillUnit ( vehicle ) ;
56976: LD_VAR 0 2
56980: PPUSH
56981: CALL_OW 66
56985: GO 56945
56987: POP
56988: POP
// end ;
56989: LD_VAR 0 3
56993: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
56994: LD_EXP 54
56998: NOT
56999: IFFALSE 57034
57001: GO 57003
57003: DISABLE
// begin initMiner := true ;
57004: LD_ADDR_EXP 54
57008: PUSH
57009: LD_INT 1
57011: ST_TO_ADDR
// minersList := [ ] ;
57012: LD_ADDR_EXP 55
57016: PUSH
57017: EMPTY
57018: ST_TO_ADDR
// minerMinesList := [ ] ;
57019: LD_ADDR_EXP 56
57023: PUSH
57024: EMPTY
57025: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57026: LD_ADDR_EXP 57
57030: PUSH
57031: LD_INT 5
57033: ST_TO_ADDR
// end ;
57034: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57035: LD_EXP 54
57039: IFFALSE 57057
57041: PUSH
57042: LD_INT 34
57044: PUSH
57045: LD_INT 81
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PPUSH
57052: CALL_OW 69
57056: AND
57057: IFFALSE 57520
57059: GO 57061
57061: DISABLE
57062: LD_INT 0
57064: PPUSH
57065: PPUSH
57066: PPUSH
57067: PPUSH
// begin enable ;
57068: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57069: LD_ADDR_VAR 0 1
57073: PUSH
57074: LD_INT 34
57076: PUSH
57077: LD_INT 81
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PPUSH
57084: CALL_OW 69
57088: PUSH
57089: FOR_IN
57090: IFFALSE 57162
// begin if not i in minersList then
57092: LD_VAR 0 1
57096: PUSH
57097: LD_EXP 55
57101: IN
57102: NOT
57103: IFFALSE 57160
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57105: LD_ADDR_EXP 55
57109: PUSH
57110: LD_EXP 55
57114: PPUSH
57115: LD_EXP 55
57119: PUSH
57120: LD_INT 1
57122: PLUS
57123: PPUSH
57124: LD_VAR 0 1
57128: PPUSH
57129: CALL_OW 1
57133: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57134: LD_ADDR_EXP 56
57138: PUSH
57139: LD_EXP 56
57143: PPUSH
57144: LD_EXP 56
57148: PUSH
57149: LD_INT 1
57151: PLUS
57152: PPUSH
57153: EMPTY
57154: PPUSH
57155: CALL_OW 1
57159: ST_TO_ADDR
// end end ;
57160: GO 57089
57162: POP
57163: POP
// for i := minerMinesList downto 1 do
57164: LD_ADDR_VAR 0 1
57168: PUSH
57169: DOUBLE
57170: LD_EXP 56
57174: INC
57175: ST_TO_ADDR
57176: LD_INT 1
57178: PUSH
57179: FOR_DOWNTO
57180: IFFALSE 57518
// begin if IsLive ( minersList [ i ] ) then
57182: LD_EXP 55
57186: PUSH
57187: LD_VAR 0 1
57191: ARRAY
57192: PPUSH
57193: CALL_OW 300
57197: IFFALSE 57225
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57199: LD_EXP 55
57203: PUSH
57204: LD_VAR 0 1
57208: ARRAY
57209: PPUSH
57210: LD_EXP 56
57214: PUSH
57215: LD_VAR 0 1
57219: ARRAY
57220: PPUSH
57221: CALL_OW 505
// if not minerMinesList [ i ] then
57225: LD_EXP 56
57229: PUSH
57230: LD_VAR 0 1
57234: ARRAY
57235: NOT
57236: IFFALSE 57240
// continue ;
57238: GO 57179
// for j := minerMinesList [ i ] downto 1 do
57240: LD_ADDR_VAR 0 2
57244: PUSH
57245: DOUBLE
57246: LD_EXP 56
57250: PUSH
57251: LD_VAR 0 1
57255: ARRAY
57256: INC
57257: ST_TO_ADDR
57258: LD_INT 1
57260: PUSH
57261: FOR_DOWNTO
57262: IFFALSE 57514
// begin side := GetSide ( minersList [ i ] ) ;
57264: LD_ADDR_VAR 0 3
57268: PUSH
57269: LD_EXP 55
57273: PUSH
57274: LD_VAR 0 1
57278: ARRAY
57279: PPUSH
57280: CALL_OW 255
57284: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57285: LD_ADDR_VAR 0 4
57289: PUSH
57290: LD_EXP 56
57294: PUSH
57295: LD_VAR 0 1
57299: ARRAY
57300: PUSH
57301: LD_VAR 0 2
57305: ARRAY
57306: PUSH
57307: LD_INT 1
57309: ARRAY
57310: PPUSH
57311: LD_EXP 56
57315: PUSH
57316: LD_VAR 0 1
57320: ARRAY
57321: PUSH
57322: LD_VAR 0 2
57326: ARRAY
57327: PUSH
57328: LD_INT 2
57330: ARRAY
57331: PPUSH
57332: CALL_OW 428
57336: ST_TO_ADDR
// if not tmp then
57337: LD_VAR 0 4
57341: NOT
57342: IFFALSE 57346
// continue ;
57344: GO 57261
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57346: LD_VAR 0 4
57350: PUSH
57351: LD_INT 81
57353: PUSH
57354: LD_VAR 0 3
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PPUSH
57363: CALL_OW 69
57367: IN
57368: IFFALSE 57418
57370: PUSH
57371: LD_EXP 56
57375: PUSH
57376: LD_VAR 0 1
57380: ARRAY
57381: PUSH
57382: LD_VAR 0 2
57386: ARRAY
57387: PUSH
57388: LD_INT 1
57390: ARRAY
57391: PPUSH
57392: LD_EXP 56
57396: PUSH
57397: LD_VAR 0 1
57401: ARRAY
57402: PUSH
57403: LD_VAR 0 2
57407: ARRAY
57408: PUSH
57409: LD_INT 2
57411: ARRAY
57412: PPUSH
57413: CALL_OW 458
57417: AND
57418: IFFALSE 57512
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57420: LD_EXP 56
57424: PUSH
57425: LD_VAR 0 1
57429: ARRAY
57430: PUSH
57431: LD_VAR 0 2
57435: ARRAY
57436: PUSH
57437: LD_INT 1
57439: ARRAY
57440: PPUSH
57441: LD_EXP 56
57445: PUSH
57446: LD_VAR 0 1
57450: ARRAY
57451: PUSH
57452: LD_VAR 0 2
57456: ARRAY
57457: PUSH
57458: LD_INT 2
57460: ARRAY
57461: PPUSH
57462: LD_VAR 0 3
57466: PPUSH
57467: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57471: LD_ADDR_EXP 56
57475: PUSH
57476: LD_EXP 56
57480: PPUSH
57481: LD_VAR 0 1
57485: PPUSH
57486: LD_EXP 56
57490: PUSH
57491: LD_VAR 0 1
57495: ARRAY
57496: PPUSH
57497: LD_VAR 0 2
57501: PPUSH
57502: CALL_OW 3
57506: PPUSH
57507: CALL_OW 1
57511: ST_TO_ADDR
// end ; end ;
57512: GO 57261
57514: POP
57515: POP
// end ;
57516: GO 57179
57518: POP
57519: POP
// end ;
57520: PPOPN 4
57522: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57523: LD_INT 0
57525: PPUSH
57526: PPUSH
// result := false ;
57527: LD_ADDR_VAR 0 4
57531: PUSH
57532: LD_INT 0
57534: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57535: LD_VAR 0 1
57539: PPUSH
57540: CALL_OW 264
57544: PUSH
57545: LD_INT 81
57547: EQUAL
57548: NOT
57549: IFFALSE 57553
// exit ;
57551: GO 57797
// index := GetElementIndex ( minersList , unit ) ;
57553: LD_ADDR_VAR 0 5
57557: PUSH
57558: LD_EXP 55
57562: PPUSH
57563: LD_VAR 0 1
57567: PPUSH
57568: CALL 14891 0 2
57572: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57573: LD_EXP 56
57577: PUSH
57578: LD_VAR 0 5
57582: ARRAY
57583: PUSH
57584: LD_EXP 57
57588: GREATEREQUAL
57589: IFFALSE 57593
// exit ;
57591: GO 57797
// ComMoveXY ( unit , x , y ) ;
57593: LD_VAR 0 1
57597: PPUSH
57598: LD_VAR 0 2
57602: PPUSH
57603: LD_VAR 0 3
57607: PPUSH
57608: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57612: LD_INT 35
57614: PPUSH
57615: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57619: LD_VAR 0 1
57623: PPUSH
57624: LD_VAR 0 2
57628: PPUSH
57629: LD_VAR 0 3
57633: PPUSH
57634: CALL 46937 0 3
57638: NOT
57639: IFFALSE 57652
57641: PUSH
57642: LD_VAR 0 1
57646: PPUSH
57647: CALL_OW 314
57651: AND
57652: IFFALSE 57656
// exit ;
57654: GO 57797
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57656: LD_VAR 0 2
57660: PPUSH
57661: LD_VAR 0 3
57665: PPUSH
57666: CALL_OW 428
57670: PUSH
57671: LD_VAR 0 1
57675: EQUAL
57676: IFFALSE 57690
57678: PUSH
57679: LD_VAR 0 1
57683: PPUSH
57684: CALL_OW 314
57688: NOT
57689: AND
57690: IFFALSE 57612
// PlaySoundXY ( x , y , PlantMine ) ;
57692: LD_VAR 0 2
57696: PPUSH
57697: LD_VAR 0 3
57701: PPUSH
57702: LD_STRING PlantMine
57704: PPUSH
57705: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57709: LD_VAR 0 2
57713: PPUSH
57714: LD_VAR 0 3
57718: PPUSH
57719: LD_VAR 0 1
57723: PPUSH
57724: CALL_OW 255
57728: PPUSH
57729: LD_INT 0
57731: PPUSH
57732: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57736: LD_ADDR_EXP 56
57740: PUSH
57741: LD_EXP 56
57745: PPUSH
57746: LD_VAR 0 5
57750: PUSH
57751: LD_EXP 56
57755: PUSH
57756: LD_VAR 0 5
57760: ARRAY
57761: PUSH
57762: LD_INT 1
57764: PLUS
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PPUSH
57770: LD_VAR 0 2
57774: PUSH
57775: LD_VAR 0 3
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PPUSH
57784: CALL 15108 0 3
57788: ST_TO_ADDR
// result := true ;
57789: LD_ADDR_VAR 0 4
57793: PUSH
57794: LD_INT 1
57796: ST_TO_ADDR
// end ;
57797: LD_VAR 0 4
57801: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57802: LD_INT 0
57804: PPUSH
57805: PPUSH
57806: PPUSH
// if not unit in minersList then
57807: LD_VAR 0 1
57811: PUSH
57812: LD_EXP 55
57816: IN
57817: NOT
57818: IFFALSE 57822
// exit ;
57820: GO 58216
// index := GetElementIndex ( minersList , unit ) ;
57822: LD_ADDR_VAR 0 6
57826: PUSH
57827: LD_EXP 55
57831: PPUSH
57832: LD_VAR 0 1
57836: PPUSH
57837: CALL 14891 0 2
57841: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57842: LD_ADDR_VAR 0 5
57846: PUSH
57847: DOUBLE
57848: LD_EXP 56
57852: PUSH
57853: LD_VAR 0 6
57857: ARRAY
57858: INC
57859: ST_TO_ADDR
57860: LD_INT 1
57862: PUSH
57863: FOR_DOWNTO
57864: IFFALSE 58027
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57866: LD_EXP 56
57870: PUSH
57871: LD_VAR 0 6
57875: ARRAY
57876: PUSH
57877: LD_VAR 0 5
57881: ARRAY
57882: PUSH
57883: LD_INT 1
57885: ARRAY
57886: PUSH
57887: LD_VAR 0 2
57891: EQUAL
57892: IFFALSE 57922
57894: PUSH
57895: LD_EXP 56
57899: PUSH
57900: LD_VAR 0 6
57904: ARRAY
57905: PUSH
57906: LD_VAR 0 5
57910: ARRAY
57911: PUSH
57912: LD_INT 2
57914: ARRAY
57915: PUSH
57916: LD_VAR 0 3
57920: EQUAL
57921: AND
57922: IFFALSE 58025
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57924: LD_EXP 56
57928: PUSH
57929: LD_VAR 0 6
57933: ARRAY
57934: PUSH
57935: LD_VAR 0 5
57939: ARRAY
57940: PUSH
57941: LD_INT 1
57943: ARRAY
57944: PPUSH
57945: LD_EXP 56
57949: PUSH
57950: LD_VAR 0 6
57954: ARRAY
57955: PUSH
57956: LD_VAR 0 5
57960: ARRAY
57961: PUSH
57962: LD_INT 2
57964: ARRAY
57965: PPUSH
57966: LD_VAR 0 1
57970: PPUSH
57971: CALL_OW 255
57975: PPUSH
57976: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57980: LD_ADDR_EXP 56
57984: PUSH
57985: LD_EXP 56
57989: PPUSH
57990: LD_VAR 0 6
57994: PPUSH
57995: LD_EXP 56
57999: PUSH
58000: LD_VAR 0 6
58004: ARRAY
58005: PPUSH
58006: LD_VAR 0 5
58010: PPUSH
58011: CALL_OW 3
58015: PPUSH
58016: CALL_OW 1
58020: ST_TO_ADDR
// exit ;
58021: POP
58022: POP
58023: GO 58216
// end ; end ;
58025: GO 57863
58027: POP
58028: POP
// for i := minerMinesList [ index ] downto 1 do
58029: LD_ADDR_VAR 0 5
58033: PUSH
58034: DOUBLE
58035: LD_EXP 56
58039: PUSH
58040: LD_VAR 0 6
58044: ARRAY
58045: INC
58046: ST_TO_ADDR
58047: LD_INT 1
58049: PUSH
58050: FOR_DOWNTO
58051: IFFALSE 58214
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58053: LD_EXP 56
58057: PUSH
58058: LD_VAR 0 6
58062: ARRAY
58063: PUSH
58064: LD_VAR 0 5
58068: ARRAY
58069: PUSH
58070: LD_INT 1
58072: ARRAY
58073: PPUSH
58074: LD_EXP 56
58078: PUSH
58079: LD_VAR 0 6
58083: ARRAY
58084: PUSH
58085: LD_VAR 0 5
58089: ARRAY
58090: PUSH
58091: LD_INT 2
58093: ARRAY
58094: PPUSH
58095: LD_VAR 0 2
58099: PPUSH
58100: LD_VAR 0 3
58104: PPUSH
58105: CALL_OW 298
58109: PUSH
58110: LD_INT 6
58112: LESS
58113: IFFALSE 58212
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58115: LD_EXP 56
58119: PUSH
58120: LD_VAR 0 6
58124: ARRAY
58125: PUSH
58126: LD_VAR 0 5
58130: ARRAY
58131: PUSH
58132: LD_INT 1
58134: ARRAY
58135: PPUSH
58136: LD_EXP 56
58140: PUSH
58141: LD_VAR 0 6
58145: ARRAY
58146: PUSH
58147: LD_VAR 0 5
58151: ARRAY
58152: PUSH
58153: LD_INT 2
58155: ARRAY
58156: PPUSH
58157: LD_VAR 0 1
58161: PPUSH
58162: CALL_OW 255
58166: PPUSH
58167: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58171: LD_ADDR_EXP 56
58175: PUSH
58176: LD_EXP 56
58180: PPUSH
58181: LD_VAR 0 6
58185: PPUSH
58186: LD_EXP 56
58190: PUSH
58191: LD_VAR 0 6
58195: ARRAY
58196: PPUSH
58197: LD_VAR 0 5
58201: PPUSH
58202: CALL_OW 3
58206: PPUSH
58207: CALL_OW 1
58211: ST_TO_ADDR
// end ; end ;
58212: GO 58050
58214: POP
58215: POP
// end ;
58216: LD_VAR 0 4
58220: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58221: LD_INT 0
58223: PPUSH
58224: PPUSH
58225: PPUSH
58226: PPUSH
58227: PPUSH
58228: PPUSH
58229: PPUSH
58230: PPUSH
58231: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58232: LD_VAR 0 1
58236: PPUSH
58237: CALL_OW 264
58241: PUSH
58242: LD_INT 81
58244: EQUAL
58245: NOT
58246: IFTRUE 58261
58248: PUSH
58249: LD_VAR 0 1
58253: PUSH
58254: LD_EXP 55
58258: IN
58259: NOT
58260: OR
58261: IFFALSE 58265
// exit ;
58263: GO 58591
// index := GetElementIndex ( minersList , unit ) ;
58265: LD_ADDR_VAR 0 6
58269: PUSH
58270: LD_EXP 55
58274: PPUSH
58275: LD_VAR 0 1
58279: PPUSH
58280: CALL 14891 0 2
58284: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58285: LD_ADDR_VAR 0 8
58289: PUSH
58290: LD_EXP 57
58294: PUSH
58295: LD_EXP 56
58299: PUSH
58300: LD_VAR 0 6
58304: ARRAY
58305: MINUS
58306: ST_TO_ADDR
// if not minesFreeAmount then
58307: LD_VAR 0 8
58311: NOT
58312: IFFALSE 58316
// exit ;
58314: GO 58591
// tmp := [ ] ;
58316: LD_ADDR_VAR 0 7
58320: PUSH
58321: EMPTY
58322: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58323: LD_ADDR_VAR 0 5
58327: PUSH
58328: DOUBLE
58329: LD_INT 1
58331: DEC
58332: ST_TO_ADDR
58333: LD_VAR 0 8
58337: PUSH
58338: FOR_TO
58339: IFFALSE 58538
// begin _d := rand ( 0 , 5 ) ;
58341: LD_ADDR_VAR 0 11
58345: PUSH
58346: LD_INT 0
58348: PPUSH
58349: LD_INT 5
58351: PPUSH
58352: CALL_OW 12
58356: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58357: LD_ADDR_VAR 0 12
58361: PUSH
58362: LD_INT 2
58364: PPUSH
58365: LD_INT 6
58367: PPUSH
58368: CALL_OW 12
58372: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58373: LD_ADDR_VAR 0 9
58377: PUSH
58378: LD_VAR 0 2
58382: PPUSH
58383: LD_VAR 0 11
58387: PPUSH
58388: LD_VAR 0 12
58392: PPUSH
58393: CALL_OW 272
58397: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58398: LD_ADDR_VAR 0 10
58402: PUSH
58403: LD_VAR 0 3
58407: PPUSH
58408: LD_VAR 0 11
58412: PPUSH
58413: LD_VAR 0 12
58417: PPUSH
58418: CALL_OW 273
58422: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58423: LD_VAR 0 9
58427: PPUSH
58428: LD_VAR 0 10
58432: PPUSH
58433: CALL_OW 488
58437: IFFALSE 58461
58439: PUSH
58440: LD_VAR 0 9
58444: PUSH
58445: LD_VAR 0 10
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_VAR 0 7
58458: IN
58459: NOT
58460: AND
58461: IFFALSE 58480
58463: PUSH
58464: LD_VAR 0 9
58468: PPUSH
58469: LD_VAR 0 10
58473: PPUSH
58474: CALL_OW 458
58478: NOT
58479: AND
58480: IFFALSE 58522
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58482: LD_ADDR_VAR 0 7
58486: PUSH
58487: LD_VAR 0 7
58491: PPUSH
58492: LD_VAR 0 7
58496: PUSH
58497: LD_INT 1
58499: PLUS
58500: PPUSH
58501: LD_VAR 0 9
58505: PUSH
58506: LD_VAR 0 10
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PPUSH
58515: CALL_OW 1
58519: ST_TO_ADDR
58520: GO 58536
// i := i - 1 ;
58522: LD_ADDR_VAR 0 5
58526: PUSH
58527: LD_VAR 0 5
58531: PUSH
58532: LD_INT 1
58534: MINUS
58535: ST_TO_ADDR
// end ;
58536: GO 58338
58538: POP
58539: POP
// for i in tmp do
58540: LD_ADDR_VAR 0 5
58544: PUSH
58545: LD_VAR 0 7
58549: PUSH
58550: FOR_IN
58551: IFFALSE 58589
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58553: LD_VAR 0 1
58557: PPUSH
58558: LD_VAR 0 5
58562: PUSH
58563: LD_INT 1
58565: ARRAY
58566: PPUSH
58567: LD_VAR 0 5
58571: PUSH
58572: LD_INT 2
58574: ARRAY
58575: PPUSH
58576: CALL 57523 0 3
58580: NOT
58581: IFFALSE 58587
// exit ;
58583: POP
58584: POP
58585: GO 58591
58587: GO 58550
58589: POP
58590: POP
// end ;
58591: LD_VAR 0 4
58595: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58596: LD_INT 0
58598: PPUSH
58599: PPUSH
58600: PPUSH
58601: PPUSH
58602: PPUSH
58603: PPUSH
58604: PPUSH
58605: PPUSH
58606: PPUSH
// if GetClass ( unit ) <> class_sniper then
58607: LD_VAR 0 1
58611: PPUSH
58612: CALL_OW 257
58616: PUSH
58617: LD_INT 5
58619: NONEQUAL
58620: IFFALSE 58624
// exit ;
58622: GO 59094
// dist := 8 ;
58624: LD_ADDR_VAR 0 5
58628: PUSH
58629: LD_INT 8
58631: ST_TO_ADDR
// viewRange := 12 ;
58632: LD_ADDR_VAR 0 8
58636: PUSH
58637: LD_INT 12
58639: ST_TO_ADDR
// side := GetSide ( unit ) ;
58640: LD_ADDR_VAR 0 6
58644: PUSH
58645: LD_VAR 0 1
58649: PPUSH
58650: CALL_OW 255
58654: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58655: LD_INT 61
58657: PPUSH
58658: LD_VAR 0 6
58662: PPUSH
58663: CALL_OW 321
58667: PUSH
58668: LD_INT 2
58670: EQUAL
58671: IFFALSE 58681
// viewRange := 16 ;
58673: LD_ADDR_VAR 0 8
58677: PUSH
58678: LD_INT 16
58680: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58681: LD_VAR 0 1
58685: PPUSH
58686: LD_VAR 0 2
58690: PPUSH
58691: LD_VAR 0 3
58695: PPUSH
58696: CALL_OW 297
58700: PUSH
58701: LD_VAR 0 5
58705: GREATER
58706: IFFALSE 58785
// begin ComMoveXY ( unit , x , y ) ;
58708: LD_VAR 0 1
58712: PPUSH
58713: LD_VAR 0 2
58717: PPUSH
58718: LD_VAR 0 3
58722: PPUSH
58723: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58727: LD_INT 35
58729: PPUSH
58730: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58734: LD_VAR 0 1
58738: PPUSH
58739: LD_VAR 0 2
58743: PPUSH
58744: LD_VAR 0 3
58748: PPUSH
58749: CALL 46937 0 3
58753: NOT
58754: IFFALSE 58758
// exit ;
58756: GO 59094
// until GetDistUnitXY ( unit , x , y ) < dist ;
58758: LD_VAR 0 1
58762: PPUSH
58763: LD_VAR 0 2
58767: PPUSH
58768: LD_VAR 0 3
58772: PPUSH
58773: CALL_OW 297
58777: PUSH
58778: LD_VAR 0 5
58782: LESS
58783: IFFALSE 58727
// end ; ComTurnXY ( unit , x , y ) ;
58785: LD_VAR 0 1
58789: PPUSH
58790: LD_VAR 0 2
58794: PPUSH
58795: LD_VAR 0 3
58799: PPUSH
58800: CALL_OW 118
// repeat if Multiplayer then
58804: LD_OWVAR 4
58808: IFFALSE 58819
// wait ( 35 ) else
58810: LD_INT 35
58812: PPUSH
58813: CALL_OW 67
58817: GO 58826
// wait ( 5 ) ;
58819: LD_INT 5
58821: PPUSH
58822: CALL_OW 67
// _d := GetDir ( unit ) ;
58826: LD_ADDR_VAR 0 11
58830: PUSH
58831: LD_VAR 0 1
58835: PPUSH
58836: CALL_OW 254
58840: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58841: LD_ADDR_VAR 0 7
58845: PUSH
58846: LD_VAR 0 1
58850: PPUSH
58851: CALL_OW 250
58855: PPUSH
58856: LD_VAR 0 1
58860: PPUSH
58861: CALL_OW 251
58865: PPUSH
58866: LD_VAR 0 2
58870: PPUSH
58871: LD_VAR 0 3
58875: PPUSH
58876: CALL 49573 0 4
58880: ST_TO_ADDR
// until dir = _d ;
58881: LD_VAR 0 7
58885: PUSH
58886: LD_VAR 0 11
58890: EQUAL
58891: IFFALSE 58804
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58893: LD_ADDR_VAR 0 9
58897: PUSH
58898: LD_VAR 0 1
58902: PPUSH
58903: CALL_OW 250
58907: PPUSH
58908: LD_VAR 0 7
58912: PPUSH
58913: LD_VAR 0 5
58917: PPUSH
58918: CALL_OW 272
58922: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58923: LD_ADDR_VAR 0 10
58927: PUSH
58928: LD_VAR 0 1
58932: PPUSH
58933: CALL_OW 251
58937: PPUSH
58938: LD_VAR 0 7
58942: PPUSH
58943: LD_VAR 0 5
58947: PPUSH
58948: CALL_OW 273
58952: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58953: LD_VAR 0 9
58957: PPUSH
58958: LD_VAR 0 10
58962: PPUSH
58963: CALL_OW 488
58967: NOT
58968: IFFALSE 58972
// exit ;
58970: GO 59094
// ComAnimCustom ( unit , 1 ) ;
58972: LD_VAR 0 1
58976: PPUSH
58977: LD_INT 1
58979: PPUSH
58980: CALL_OW 592
// p := 0 ;
58984: LD_ADDR_VAR 0 12
58988: PUSH
58989: LD_INT 0
58991: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58992: LD_VAR 0 9
58996: PPUSH
58997: LD_VAR 0 10
59001: PPUSH
59002: LD_VAR 0 6
59006: PPUSH
59007: LD_VAR 0 8
59011: PPUSH
59012: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59016: LD_INT 35
59018: PPUSH
59019: CALL_OW 67
// p := Inc ( p ) ;
59023: LD_ADDR_VAR 0 12
59027: PUSH
59028: LD_VAR 0 12
59032: PPUSH
59033: CALL 49529 0 1
59037: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59038: LD_VAR 0 12
59042: PUSH
59043: LD_INT 3
59045: EQUAL
59046: IFTRUE 59060
59048: PUSH
59049: LD_VAR 0 1
59053: PPUSH
59054: CALL_OW 302
59058: NOT
59059: OR
59060: IFTRUE 59073
59062: PUSH
59063: LD_VAR 0 1
59067: PPUSH
59068: CALL_OW 301
59072: OR
59073: IFFALSE 59016
// RemoveSeeing ( _x , _y , side ) ;
59075: LD_VAR 0 9
59079: PPUSH
59080: LD_VAR 0 10
59084: PPUSH
59085: LD_VAR 0 6
59089: PPUSH
59090: CALL_OW 331
// end ; end_of_file
59094: LD_VAR 0 4
59098: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
59099: LD_EXP 39
59103: IFFALSE 59444
59105: GO 59107
59107: DISABLE
59108: LD_INT 0
59110: PPUSH
59111: PPUSH
59112: PPUSH
// begin mpKingPoints := [ ] ;
59113: LD_ADDR_EXP 58
59117: PUSH
59118: EMPTY
59119: ST_TO_ADDR
// if mpTeamGame then
59120: LD_EXP 11
59124: IFFALSE 59178
// begin for i := 1 to Count ( mpTeams ) do
59126: LD_ADDR_VAR 0 1
59130: PUSH
59131: DOUBLE
59132: LD_INT 1
59134: DEC
59135: ST_TO_ADDR
59136: LD_EXP 10
59140: PPUSH
59141: CALL 12224 0 1
59145: PUSH
59146: FOR_TO
59147: IFFALSE 59174
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59149: LD_ADDR_EXP 58
59153: PUSH
59154: LD_EXP 58
59158: PPUSH
59159: LD_VAR 0 1
59163: PPUSH
59164: LD_INT 0
59166: PPUSH
59167: CALL_OW 1
59171: ST_TO_ADDR
59172: GO 59146
59174: POP
59175: POP
// end else
59176: GO 59221
// begin for i := 1 to 8 do
59178: LD_ADDR_VAR 0 1
59182: PUSH
59183: DOUBLE
59184: LD_INT 1
59186: DEC
59187: ST_TO_ADDR
59188: LD_INT 8
59190: PUSH
59191: FOR_TO
59192: IFFALSE 59219
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59194: LD_ADDR_EXP 58
59198: PUSH
59199: LD_EXP 58
59203: PPUSH
59204: LD_VAR 0 1
59208: PPUSH
59209: LD_INT 0
59211: PPUSH
59212: CALL_OW 1
59216: ST_TO_ADDR
59217: GO 59191
59219: POP
59220: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
59221: LD_ADDR_VAR 0 3
59225: PUSH
59226: LD_EXP 2
59230: PPUSH
59231: LD_INT 0
59233: PPUSH
59234: CALL_OW 517
59238: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59239: LD_ADDR_VAR 0 1
59243: PUSH
59244: DOUBLE
59245: LD_INT 1
59247: DEC
59248: ST_TO_ADDR
59249: LD_VAR 0 3
59253: PUSH
59254: LD_INT 1
59256: ARRAY
59257: PUSH
59258: FOR_TO
59259: IFFALSE 59326
// for j := 1 to 8 do
59261: LD_ADDR_VAR 0 2
59265: PUSH
59266: DOUBLE
59267: LD_INT 1
59269: DEC
59270: ST_TO_ADDR
59271: LD_INT 8
59273: PUSH
59274: FOR_TO
59275: IFFALSE 59322
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
59277: LD_VAR 0 3
59281: PUSH
59282: LD_INT 1
59284: ARRAY
59285: PUSH
59286: LD_VAR 0 1
59290: ARRAY
59291: PPUSH
59292: LD_VAR 0 3
59296: PUSH
59297: LD_INT 2
59299: ARRAY
59300: PUSH
59301: LD_VAR 0 1
59305: ARRAY
59306: PPUSH
59307: LD_VAR 0 2
59311: PPUSH
59312: LD_INT 12
59314: NEG
59315: PPUSH
59316: CALL_OW 330
59320: GO 59274
59322: POP
59323: POP
59324: GO 59258
59326: POP
59327: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
59328: LD_EXP 34
59332: PPUSH
59333: LD_INT 1
59335: PPUSH
59336: CALL_OW 424
// UpdateCounter ;
59340: CALL 59950 0 0
// repeat wait ( 0 0$1 ) ;
59344: LD_INT 35
59346: PPUSH
59347: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59351: LD_ADDR_VAR 0 3
59355: PUSH
59356: LD_EXP 34
59360: PPUSH
59361: LD_INT 3
59363: PUSH
59364: LD_INT 57
59366: PUSH
59367: EMPTY
59368: LIST
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 50
59376: PUSH
59377: EMPTY
59378: LIST
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: LD_INT 30
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 30
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: LIST
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: LIST
59412: PPUSH
59413: CALL_OW 70
59417: ST_TO_ADDR
// if not tmp then
59418: LD_VAR 0 3
59422: NOT
59423: IFFALSE 59427
// continue ;
59425: GO 59344
// AddPoints ( tmp ) ;
59427: LD_VAR 0 3
59431: PPUSH
59432: CALL 59628 0 1
// UpdateCounter ;
59436: CALL 59950 0 0
// until false ;
59440: LD_INT 0
59442: IFFALSE 59344
// end ;
59444: PPOPN 3
59446: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
59447: LD_EXP 39
59451: IFFALSE 59459
59453: PUSH
59454: LD_EXP 37
59458: AND
59459: IFFALSE 59625
59461: GO 59463
59463: DISABLE
59464: LD_INT 0
59466: PPUSH
59467: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
59468: LD_ADDR_VAR 0 2
59472: PUSH
59473: LD_EXP 2
59477: PPUSH
59478: LD_INT 0
59480: PPUSH
59481: CALL_OW 517
59485: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59486: LD_ADDR_VAR 0 1
59490: PUSH
59491: DOUBLE
59492: LD_INT 1
59494: DEC
59495: ST_TO_ADDR
59496: LD_VAR 0 2
59500: PUSH
59501: LD_INT 1
59503: ARRAY
59504: PUSH
59505: FOR_TO
59506: IFFALSE 59547
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
59508: LD_VAR 0 2
59512: PUSH
59513: LD_INT 1
59515: ARRAY
59516: PUSH
59517: LD_VAR 0 1
59521: ARRAY
59522: PPUSH
59523: LD_VAR 0 2
59527: PUSH
59528: LD_INT 2
59530: ARRAY
59531: PUSH
59532: LD_VAR 0 1
59536: ARRAY
59537: PPUSH
59538: LD_INT 125
59540: PPUSH
59541: CALL_OW 495
59545: GO 59505
59547: POP
59548: POP
// repeat wait ( mpEmissions ) ;
59549: LD_EXP 37
59553: PPUSH
59554: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
59558: LD_ADDR_VAR 0 1
59562: PUSH
59563: DOUBLE
59564: LD_INT 1
59566: DEC
59567: ST_TO_ADDR
59568: LD_VAR 0 2
59572: PUSH
59573: LD_INT 1
59575: ARRAY
59576: PUSH
59577: FOR_TO
59578: IFFALSE 59619
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
59580: LD_VAR 0 2
59584: PUSH
59585: LD_INT 1
59587: ARRAY
59588: PUSH
59589: LD_VAR 0 1
59593: ARRAY
59594: PPUSH
59595: LD_VAR 0 2
59599: PUSH
59600: LD_INT 2
59602: ARRAY
59603: PUSH
59604: LD_VAR 0 1
59608: ARRAY
59609: PPUSH
59610: LD_INT 15
59612: PPUSH
59613: CALL_OW 495
59617: GO 59577
59619: POP
59620: POP
// until false ;
59621: LD_INT 0
59623: IFFALSE 59549
// end ;
59625: PPOPN 2
59627: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
59628: LD_INT 0
59630: PPUSH
59631: PPUSH
59632: PPUSH
59633: PPUSH
59634: PPUSH
// if mpTeamGame then
59635: LD_EXP 11
59639: IFFALSE 59836
// begin first := depots [ 1 ] ;
59641: LD_ADDR_VAR 0 4
59645: PUSH
59646: LD_VAR 0 1
59650: PUSH
59651: LD_INT 1
59653: ARRAY
59654: ST_TO_ADDR
// side := GetSide ( first ) ;
59655: LD_ADDR_VAR 0 6
59659: PUSH
59660: LD_VAR 0 4
59664: PPUSH
59665: CALL_OW 255
59669: ST_TO_ADDR
// for i := 1 to mpTeams do
59670: LD_ADDR_VAR 0 3
59674: PUSH
59675: DOUBLE
59676: LD_INT 1
59678: DEC
59679: ST_TO_ADDR
59680: LD_EXP 10
59684: PUSH
59685: FOR_TO
59686: IFFALSE 59720
// if side in mpTeams [ i ] then
59688: LD_VAR 0 6
59692: PUSH
59693: LD_EXP 10
59697: PUSH
59698: LD_VAR 0 3
59702: ARRAY
59703: IN
59704: IFFALSE 59718
// begin team := i ;
59706: LD_ADDR_VAR 0 5
59710: PUSH
59711: LD_VAR 0 3
59715: ST_TO_ADDR
// break ;
59716: GO 59720
// end ;
59718: GO 59685
59720: POP
59721: POP
// if not team then
59722: LD_VAR 0 5
59726: NOT
59727: IFFALSE 59731
// exit ;
59729: GO 59945
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59731: LD_EXP 34
59735: PPUSH
59736: LD_INT 81
59738: PUSH
59739: LD_VAR 0 6
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PPUSH
59748: CALL_OW 70
59752: IFFALSE 59756
// exit ;
59754: GO 59945
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
59756: LD_ADDR_EXP 58
59760: PUSH
59761: LD_EXP 58
59765: PPUSH
59766: LD_VAR 0 5
59770: PPUSH
59771: LD_EXP 58
59775: PUSH
59776: LD_VAR 0 5
59780: ARRAY
59781: PUSH
59782: LD_INT 1
59784: PLUS
59785: PPUSH
59786: CALL_OW 1
59790: ST_TO_ADDR
// for i in mpTeams [ team ] do
59791: LD_ADDR_VAR 0 3
59795: PUSH
59796: LD_EXP 10
59800: PUSH
59801: LD_VAR 0 5
59805: ARRAY
59806: PUSH
59807: FOR_IN
59808: IFFALSE 59832
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
59810: LD_VAR 0 3
59814: PPUSH
59815: LD_EXP 58
59819: PUSH
59820: LD_VAR 0 5
59824: ARRAY
59825: PPUSH
59826: CALL_OW 506
59830: GO 59807
59832: POP
59833: POP
// end else
59834: GO 59945
// begin first := depots [ 1 ] ;
59836: LD_ADDR_VAR 0 4
59840: PUSH
59841: LD_VAR 0 1
59845: PUSH
59846: LD_INT 1
59848: ARRAY
59849: ST_TO_ADDR
// side := GetSide ( first ) ;
59850: LD_ADDR_VAR 0 6
59854: PUSH
59855: LD_VAR 0 4
59859: PPUSH
59860: CALL_OW 255
59864: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59865: LD_EXP 34
59869: PPUSH
59870: LD_INT 81
59872: PUSH
59873: LD_VAR 0 6
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PPUSH
59882: CALL_OW 70
59886: IFFALSE 59890
// exit ;
59888: GO 59945
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
59890: LD_ADDR_EXP 58
59894: PUSH
59895: LD_EXP 58
59899: PPUSH
59900: LD_VAR 0 6
59904: PPUSH
59905: LD_EXP 58
59909: PUSH
59910: LD_VAR 0 6
59914: ARRAY
59915: PUSH
59916: LD_INT 1
59918: PLUS
59919: PPUSH
59920: CALL_OW 1
59924: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
59925: LD_VAR 0 6
59929: PPUSH
59930: LD_EXP 58
59934: PUSH
59935: LD_VAR 0 6
59939: ARRAY
59940: PPUSH
59941: CALL_OW 506
// end ; end ;
59945: LD_VAR 0 2
59949: RET
// function UpdateCounter ; var i ; begin
59950: LD_INT 0
59952: PPUSH
59953: PPUSH
// result := [ ] ;
59954: LD_ADDR_VAR 0 1
59958: PUSH
59959: EMPTY
59960: ST_TO_ADDR
// if mpTeamGame then
59961: LD_EXP 11
59965: IFFALSE 60032
// begin for i := 1 to mpTeams do
59967: LD_ADDR_VAR 0 2
59971: PUSH
59972: DOUBLE
59973: LD_INT 1
59975: DEC
59976: ST_TO_ADDR
59977: LD_EXP 10
59981: PUSH
59982: FOR_TO
59983: IFFALSE 60028
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
59985: LD_ADDR_VAR 0 1
59989: PUSH
59990: LD_VAR 0 1
59994: PUSH
59995: LD_STRING #KingoftheHill-Team
59997: PUSH
59998: LD_VAR 0 2
60002: PUSH
60003: LD_EXP 58
60007: PUSH
60008: LD_VAR 0 2
60012: ARRAY
60013: PUSH
60014: LD_EXP 35
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: ADD
60025: ST_TO_ADDR
60026: GO 59982
60028: POP
60029: POP
// end else
60030: GO 60105
// begin for i := 1 to 8 do
60032: LD_ADDR_VAR 0 2
60036: PUSH
60037: DOUBLE
60038: LD_INT 1
60040: DEC
60041: ST_TO_ADDR
60042: LD_INT 8
60044: PUSH
60045: FOR_TO
60046: IFFALSE 60103
// if mpSidePositions [ i ] then
60048: LD_EXP 7
60052: PUSH
60053: LD_VAR 0 2
60057: ARRAY
60058: IFFALSE 60101
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
60060: LD_ADDR_VAR 0 1
60064: PUSH
60065: LD_VAR 0 1
60069: PUSH
60070: LD_STRING #KingoftheHill-Player
60072: PUSH
60073: LD_VAR 0 2
60077: PUSH
60078: LD_EXP 58
60082: PUSH
60083: LD_VAR 0 2
60087: ARRAY
60088: PUSH
60089: LD_EXP 35
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: ADD
60100: ST_TO_ADDR
60101: GO 60045
60103: POP
60104: POP
// end ; mpDisplayStrings := result ;
60105: LD_ADDR_EXP 38
60109: PUSH
60110: LD_VAR 0 1
60114: ST_TO_ADDR
// end ;
60115: LD_VAR 0 1
60119: RET
// export function HowMuchPointsKing ( side ) ; begin
60120: LD_INT 0
60122: PPUSH
// result := HowMuchPoints ( side ) ;
60123: LD_ADDR_VAR 0 2
60127: PUSH
60128: LD_VAR 0 1
60132: PPUSH
60133: CALL 60143 0 1
60137: ST_TO_ADDR
// end ;
60138: LD_VAR 0 2
60142: RET
// function HowMuchPoints ( side ) ; var i ; begin
60143: LD_INT 0
60145: PPUSH
60146: PPUSH
// if mpTeamGame then
60147: LD_EXP 11
60151: IFFALSE 60220
// begin for i := 1 to Count ( mpTeams ) do
60153: LD_ADDR_VAR 0 3
60157: PUSH
60158: DOUBLE
60159: LD_INT 1
60161: DEC
60162: ST_TO_ADDR
60163: LD_EXP 10
60167: PPUSH
60168: CALL 12224 0 1
60172: PUSH
60173: FOR_TO
60174: IFFALSE 60216
// begin if side in mpTeams [ i ] then
60176: LD_VAR 0 1
60180: PUSH
60181: LD_EXP 10
60185: PUSH
60186: LD_VAR 0 3
60190: ARRAY
60191: IN
60192: IFFALSE 60214
// begin result := mpKingPoints [ i ] ;
60194: LD_ADDR_VAR 0 2
60198: PUSH
60199: LD_EXP 58
60203: PUSH
60204: LD_VAR 0 3
60208: ARRAY
60209: ST_TO_ADDR
// exit ;
60210: POP
60211: POP
60212: GO 60236
// end ; end ;
60214: GO 60173
60216: POP
60217: POP
// end else
60218: GO 60236
// result := mpKingPoints [ side ] ;
60220: LD_ADDR_VAR 0 2
60224: PUSH
60225: LD_EXP 58
60229: PUSH
60230: LD_VAR 0 1
60234: ARRAY
60235: ST_TO_ADDR
// end ;
60236: LD_VAR 0 2
60240: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
60241: LD_EXP 39
60245: IFFALSE 60253
60247: PUSH
60248: CALL 60588 0 0
60252: AND
60253: IFFALSE 60261
60255: PUSH
60256: LD_OWVAR 4
60260: AND
60261: IFFALSE 60511
60263: GO 60265
60265: DISABLE
60266: LD_INT 0
60268: PPUSH
60269: PPUSH
// begin canWin := false ;
60270: LD_ADDR_VAR 0 2
60274: PUSH
60275: LD_INT 0
60277: ST_TO_ADDR
// if not HasPower ( your_side ) then
60278: LD_OWVAR 2
60282: PPUSH
60283: CALL 60630 0 1
60287: NOT
60288: IFFALSE 60299
// begin Multiplayer_Loose_Message ;
60290: CALL_OW 521
// enable ( mpLose ) ;
60294: LD_INT 102
60296: ENABLE_MARKED
// end else
60297: GO 60511
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
60299: LD_ADDR_VAR 0 2
60303: PUSH
60304: LD_OWVAR 2
60308: PPUSH
60309: CALL 60143 0 1
60313: PUSH
60314: LD_EXP 35
60318: GREATEREQUAL
60319: IFFALSE 60332
60321: PUSH
60322: LD_OWVAR 2
60326: PPUSH
60327: CALL 60630 0 1
60331: AND
60332: IFTRUE 60341
60334: PUSH
60335: CALL 60514 0 0
60339: NOT
60340: OR
60341: ST_TO_ADDR
// for i := 1 to 8 do
60342: LD_ADDR_VAR 0 1
60346: PUSH
60347: DOUBLE
60348: LD_INT 1
60350: DEC
60351: ST_TO_ADDR
60352: LD_INT 8
60354: PUSH
60355: FOR_TO
60356: IFFALSE 60497
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
60358: LD_EXP 7
60362: PUSH
60363: LD_VAR 0 1
60367: ARRAY
60368: IFFALSE 60381
60370: PUSH
60371: LD_VAR 0 1
60375: PPUSH
60376: CALL_OW 108
60380: AND
60381: IFFALSE 60395
60383: PUSH
60384: LD_VAR 0 1
60388: PUSH
60389: LD_OWVAR 2
60393: NONEQUAL
60394: AND
60395: IFFALSE 60495
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60397: LD_EXP 8
60401: PUSH
60402: LD_VAR 0 1
60406: ARRAY
60407: NOT
60408: IFTRUE 60456
60410: PUSH
60411: LD_EXP 8
60415: PUSH
60416: LD_VAR 0 1
60420: ARRAY
60421: PUSH
60422: LD_EXP 8
60426: PUSH
60427: LD_OWVAR 2
60431: ARRAY
60432: NONEQUAL
60433: IFFALSE 60455
60435: PUSH
60436: LD_OWVAR 2
60440: PPUSH
60441: LD_VAR 0 1
60445: PPUSH
60446: CALL_OW 81
60450: PUSH
60451: LD_INT 1
60453: NONEQUAL
60454: AND
60455: OR
60456: IFFALSE 60495
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
60458: LD_VAR 0 1
60462: PPUSH
60463: CALL 60143 0 1
60467: PUSH
60468: LD_EXP 35
60472: GREATEREQUAL
60473: IFFALSE 60486
60475: PUSH
60476: LD_VAR 0 1
60480: PPUSH
60481: CALL 60630 0 1
60485: AND
60486: IFFALSE 60495
// begin enable ( mpLose ) ;
60488: LD_INT 102
60490: ENABLE_MARKED
// exit ;
60491: POP
60492: POP
60493: GO 60511
// end ;
60495: GO 60355
60497: POP
60498: POP
// if canWin then
60499: LD_VAR 0 2
60503: IFFALSE 60510
// enable ( mpWin ) else
60505: LD_INT 101
60507: ENABLE_MARKED
60508: GO 60511
// enable ;
60510: ENABLE
// end ; end ;
60511: PPOPN 2
60513: END
// function EnemiesInGame ; var i ; begin
60514: LD_INT 0
60516: PPUSH
60517: PPUSH
// result := false ;
60518: LD_ADDR_VAR 0 1
60522: PUSH
60523: LD_INT 0
60525: ST_TO_ADDR
// for i := 1 to 8 do
60526: LD_ADDR_VAR 0 2
60530: PUSH
60531: DOUBLE
60532: LD_INT 1
60534: DEC
60535: ST_TO_ADDR
60536: LD_INT 8
60538: PUSH
60539: FOR_TO
60540: IFFALSE 60581
// if i <> your_side and HasPower ( i ) then
60542: LD_VAR 0 2
60546: PUSH
60547: LD_OWVAR 2
60551: NONEQUAL
60552: IFFALSE 60565
60554: PUSH
60555: LD_VAR 0 2
60559: PPUSH
60560: CALL 60630 0 1
60564: AND
60565: IFFALSE 60579
// begin result := true ;
60567: LD_ADDR_VAR 0 1
60571: PUSH
60572: LD_INT 1
60574: ST_TO_ADDR
// exit ;
60575: POP
60576: POP
60577: GO 60583
// end ;
60579: GO 60539
60581: POP
60582: POP
// end ;
60583: LD_VAR 0 1
60587: RET
// function CanWinLoose ; begin
60588: LD_INT 0
60590: PPUSH
// result := true ;
60591: LD_ADDR_VAR 0 1
60595: PUSH
60596: LD_INT 1
60598: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
60599: CALL_OW 531
60603: IFFALSE 60615
60605: PUSH
60606: CALL_OW 519
60610: PUSH
60611: LD_INT 1
60613: GREATER
60614: AND
60615: IFFALSE 60625
// result := false ;
60617: LD_ADDR_VAR 0 1
60621: PUSH
60622: LD_INT 0
60624: ST_TO_ADDR
// end ;
60625: LD_VAR 0 1
60629: RET
// function HasPower ( i ) ; begin
60630: LD_INT 0
60632: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
60633: LD_ADDR_VAR 0 2
60637: PUSH
60638: LD_INT 22
60640: PUSH
60641: LD_VAR 0 1
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: LD_INT 21
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 33
60665: PUSH
60666: LD_INT 3
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 33
60675: PUSH
60676: LD_INT 5
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PPUSH
60693: CALL_OW 69
60697: ST_TO_ADDR
// end ; end_of_file
60698: LD_VAR 0 2
60702: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60703: PPOPN 6
60705: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60706: LD_EXP 3
60710: PUSH
60711: LD_INT 4
60713: EQUAL
60714: IFFALSE 60750
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60716: LD_STRING setGameDifficulty(
60718: PUSH
60719: LD_OWVAR 67
60723: STR
60724: PUSH
60725: LD_STRING )
60727: STR
60728: PPUSH
60729: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60733: LD_STRING displayDifficulty(
60735: PUSH
60736: LD_OWVAR 67
60740: STR
60741: PUSH
60742: LD_STRING )
60744: STR
60745: PPUSH
60746: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60750: CALL 60779 0 0
// end ; end_of_file
60754: PPOPN 1
60756: END
// every 0 0$1 do
60757: GO 60759
60759: DISABLE
// begin enable ;
60760: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60761: LD_STRING updateTimer(
60763: PUSH
60764: LD_OWVAR 1
60768: STR
60769: PUSH
60770: LD_STRING );
60772: STR
60773: PPUSH
60774: CALL_OW 559
// end ;
60778: END
// export function SOS_MapStart ( ) ; begin
60779: LD_INT 0
60781: PPUSH
// UpdateFactoryWaypoints ( ) ;
60782: CALL 61713 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60786: CALL 61965 0 0
// ParseMultiDataToLua ( ) ;
60790: CALL 62112 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60794: LD_STRING setSpecLogoNumber(
60796: PUSH
60797: LD_INT 2
60799: STR
60800: PUSH
60801: LD_STRING ,
60803: STR
60804: PUSH
60805: LD_INT 1
60807: STR
60808: PUSH
60809: LD_STRING )
60811: STR
60812: PPUSH
60813: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60817: LD_STRING setSpecLogoNumber(
60819: PUSH
60820: LD_INT 3
60822: STR
60823: PUSH
60824: LD_STRING ,
60826: STR
60827: PUSH
60828: LD_INT 2
60830: STR
60831: PUSH
60832: LD_STRING )
60834: STR
60835: PPUSH
60836: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
60840: LD_STRING setSpecLogoNumber(
60842: PUSH
60843: LD_INT 4
60845: STR
60846: PUSH
60847: LD_STRING ,
60849: STR
60850: PUSH
60851: LD_INT 3
60853: STR
60854: PUSH
60855: LD_STRING )
60857: STR
60858: PPUSH
60859: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
60863: LD_STRING setSpecLogoNumber(
60865: PUSH
60866: LD_INT 5
60868: STR
60869: PUSH
60870: LD_STRING ,
60872: STR
60873: PUSH
60874: LD_INT 4
60876: STR
60877: PUSH
60878: LD_STRING )
60880: STR
60881: PPUSH
60882: CALL_OW 559
// end ;
60886: LD_VAR 0 1
60890: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
60891: LD_INT 0
60893: PPUSH
60894: PPUSH
60895: PPUSH
60896: PPUSH
60897: PPUSH
60898: PPUSH
60899: PPUSH
60900: PPUSH
60901: PPUSH
// for i := 1 to 8 do
60902: LD_ADDR_VAR 0 2
60906: PUSH
60907: DOUBLE
60908: LD_INT 1
60910: DEC
60911: ST_TO_ADDR
60912: LD_INT 8
60914: PUSH
60915: FOR_TO
60916: IFFALSE 61301
// begin if mpSidePositions [ i ] then
60918: LD_EXP 7
60922: PUSH
60923: LD_VAR 0 2
60927: ARRAY
60928: IFFALSE 61299
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
60930: LD_ADDR_VAR 0 7
60934: PUSH
60935: LD_INT 22
60937: PUSH
60938: LD_VAR 0 2
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 21
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PPUSH
60961: CALL_OW 69
60965: PPUSH
60966: CALL 12224 0 1
60970: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60971: LD_ADDR_VAR 0 9
60975: PUSH
60976: LD_INT 22
60978: PUSH
60979: LD_VAR 0 2
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 2
60990: PUSH
60991: LD_INT 30
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 30
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: LIST
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PPUSH
61020: CALL_OW 69
61024: ST_TO_ADDR
// crates := 0 ;
61025: LD_ADDR_VAR 0 4
61029: PUSH
61030: LD_INT 0
61032: ST_TO_ADDR
// oil := 0 ;
61033: LD_ADDR_VAR 0 5
61037: PUSH
61038: LD_INT 0
61040: ST_TO_ADDR
// sib := 0 ;
61041: LD_ADDR_VAR 0 6
61045: PUSH
61046: LD_INT 0
61048: ST_TO_ADDR
// if bases then
61049: LD_VAR 0 9
61053: IFFALSE 61159
// begin for j in bases do
61055: LD_ADDR_VAR 0 3
61059: PUSH
61060: LD_VAR 0 9
61064: PUSH
61065: FOR_IN
61066: IFFALSE 61157
// begin base := GetBase ( j ) ;
61068: LD_ADDR_VAR 0 8
61072: PUSH
61073: LD_VAR 0 3
61077: PPUSH
61078: CALL_OW 274
61082: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61083: LD_ADDR_VAR 0 4
61087: PUSH
61088: LD_VAR 0 4
61092: PUSH
61093: LD_VAR 0 8
61097: PPUSH
61098: LD_INT 1
61100: PPUSH
61101: CALL_OW 275
61105: PLUS
61106: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61107: LD_ADDR_VAR 0 5
61111: PUSH
61112: LD_VAR 0 5
61116: PUSH
61117: LD_VAR 0 8
61121: PPUSH
61122: LD_INT 2
61124: PPUSH
61125: CALL_OW 275
61129: PLUS
61130: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61131: LD_ADDR_VAR 0 6
61135: PUSH
61136: LD_VAR 0 6
61140: PUSH
61141: LD_VAR 0 8
61145: PPUSH
61146: LD_INT 3
61148: PPUSH
61149: CALL_OW 275
61153: PLUS
61154: ST_TO_ADDR
// end ;
61155: GO 61065
61157: POP
61158: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61159: LD_STRING setSpecText(
61161: PUSH
61162: LD_VAR 0 2
61166: STR
61167: PUSH
61168: LD_STRING ,
61170: STR
61171: PUSH
61172: LD_INT 2
61174: STR
61175: PUSH
61176: LD_STRING ,
61178: STR
61179: PUSH
61180: LD_VAR 0 4
61184: STR
61185: PUSH
61186: LD_STRING )
61188: STR
61189: PPUSH
61190: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61194: LD_STRING setSpecText(
61196: PUSH
61197: LD_VAR 0 2
61201: STR
61202: PUSH
61203: LD_STRING ,
61205: STR
61206: PUSH
61207: LD_INT 3
61209: STR
61210: PUSH
61211: LD_STRING ,
61213: STR
61214: PUSH
61215: LD_VAR 0 5
61219: STR
61220: PUSH
61221: LD_STRING )
61223: STR
61224: PPUSH
61225: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61229: LD_STRING setSpecText(
61231: PUSH
61232: LD_VAR 0 2
61236: STR
61237: PUSH
61238: LD_STRING ,
61240: STR
61241: PUSH
61242: LD_INT 4
61244: STR
61245: PUSH
61246: LD_STRING ,
61248: STR
61249: PUSH
61250: LD_VAR 0 6
61254: STR
61255: PUSH
61256: LD_STRING )
61258: STR
61259: PPUSH
61260: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61264: LD_STRING setSpecText(
61266: PUSH
61267: LD_VAR 0 2
61271: STR
61272: PUSH
61273: LD_STRING ,
61275: STR
61276: PUSH
61277: LD_INT 5
61279: STR
61280: PUSH
61281: LD_STRING ,
61283: STR
61284: PUSH
61285: LD_VAR 0 7
61289: STR
61290: PUSH
61291: LD_STRING )
61293: STR
61294: PPUSH
61295: CALL_OW 559
// end ; end ;
61299: GO 60915
61301: POP
61302: POP
// end ;
61303: LD_VAR 0 1
61307: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61308: LD_INT 2
61310: PUSH
61311: LD_INT 30
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 30
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: LIST
61335: PPUSH
61336: CALL_OW 69
61340: IFFALSE 61350
61342: GO 61344
61344: DISABLE
// begin enable ;
61345: ENABLE
// UpdateSpectatorBar ;
61346: CALL 60891 0 0
// end ;
61350: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61351: LD_INT 0
61353: PPUSH
// end ;
61354: LD_VAR 0 12
61358: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61359: LD_INT 0
61361: PPUSH
61362: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61363: LD_VAR 0 1
61367: NOT
61368: IFTRUE 61387
61370: PUSH
61371: LD_VAR 0 2
61375: PPUSH
61376: LD_VAR 0 3
61380: PPUSH
61381: CALL_OW 488
61385: NOT
61386: OR
61387: IFTRUE 61422
61389: PUSH
61390: LD_VAR 0 1
61394: PPUSH
61395: CALL_OW 266
61399: PUSH
61400: LD_INT 3
61402: NONEQUAL
61403: IFFALSE 61421
61405: PUSH
61406: LD_VAR 0 1
61410: PPUSH
61411: CALL_OW 247
61415: PUSH
61416: LD_INT 1
61418: EQUAL
61419: NOT
61420: AND
61421: OR
61422: IFFALSE 61426
// exit ;
61424: GO 61708
// if GetType ( factory ) = unit_human then
61426: LD_VAR 0 1
61430: PPUSH
61431: CALL_OW 247
61435: PUSH
61436: LD_INT 1
61438: EQUAL
61439: IFFALSE 61456
// factory := IsInUnit ( factory ) ;
61441: LD_ADDR_VAR 0 1
61445: PUSH
61446: LD_VAR 0 1
61450: PPUSH
61451: CALL_OW 310
61455: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61456: LD_VAR 0 1
61460: PPUSH
61461: CALL_OW 266
61465: PUSH
61466: LD_INT 3
61468: NONEQUAL
61469: IFFALSE 61473
// exit ;
61471: GO 61708
// for i := 1 to Count ( factoryWaypoints ) do
61473: LD_ADDR_VAR 0 5
61477: PUSH
61478: DOUBLE
61479: LD_INT 1
61481: DEC
61482: ST_TO_ADDR
61483: LD_EXP 59
61487: PPUSH
61488: CALL 12224 0 1
61492: PUSH
61493: FOR_TO
61494: IFFALSE 61656
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61496: LD_VAR 0 2
61500: PPUSH
61501: LD_VAR 0 3
61505: PPUSH
61506: CALL_OW 428
61510: PUSH
61511: LD_EXP 59
61515: PUSH
61516: LD_VAR 0 5
61520: ARRAY
61521: PUSH
61522: LD_INT 2
61524: ARRAY
61525: EQUAL
61526: IFFALSE 61558
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61528: LD_ADDR_EXP 59
61532: PUSH
61533: LD_EXP 59
61537: PPUSH
61538: LD_VAR 0 5
61542: PPUSH
61543: CALL_OW 3
61547: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61548: CALL 61713 0 0
// exit ;
61552: POP
61553: POP
61554: GO 61708
// end else
61556: GO 61654
// if factory = factoryWaypoints [ i ] [ 2 ] then
61558: LD_VAR 0 1
61562: PUSH
61563: LD_EXP 59
61567: PUSH
61568: LD_VAR 0 5
61572: ARRAY
61573: PUSH
61574: LD_INT 2
61576: ARRAY
61577: EQUAL
61578: IFFALSE 61654
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61580: LD_ADDR_EXP 59
61584: PUSH
61585: LD_EXP 59
61589: PPUSH
61590: LD_VAR 0 5
61594: PPUSH
61595: CALL_OW 3
61599: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61600: LD_ADDR_EXP 59
61604: PUSH
61605: LD_EXP 59
61609: PPUSH
61610: LD_VAR 0 1
61614: PPUSH
61615: CALL_OW 255
61619: PUSH
61620: LD_VAR 0 1
61624: PUSH
61625: LD_VAR 0 2
61629: PUSH
61630: LD_VAR 0 3
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: PPUSH
61641: CALL 48156 0 2
61645: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61646: CALL 61713 0 0
// exit ;
61650: POP
61651: POP
61652: GO 61708
// end ; end ;
61654: GO 61493
61656: POP
61657: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61658: LD_ADDR_EXP 59
61662: PUSH
61663: LD_EXP 59
61667: PPUSH
61668: LD_VAR 0 1
61672: PPUSH
61673: CALL_OW 255
61677: PUSH
61678: LD_VAR 0 1
61682: PUSH
61683: LD_VAR 0 2
61687: PUSH
61688: LD_VAR 0 3
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: PPUSH
61699: CALL 48156 0 2
61703: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61704: CALL 61713 0 0
// end ;
61708: LD_VAR 0 4
61712: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61713: LD_INT 0
61715: PPUSH
61716: PPUSH
61717: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61718: LD_STRING resetFactoryWaypoint();
61720: PPUSH
61721: CALL_OW 559
// if factoryWaypoints then
61725: LD_EXP 59
61729: IFFALSE 61850
// begin list := factoryWaypoints ;
61731: LD_ADDR_VAR 0 3
61735: PUSH
61736: LD_EXP 59
61740: ST_TO_ADDR
// for i := 1 to list do
61741: LD_ADDR_VAR 0 2
61745: PUSH
61746: DOUBLE
61747: LD_INT 1
61749: DEC
61750: ST_TO_ADDR
61751: LD_VAR 0 3
61755: PUSH
61756: FOR_TO
61757: IFFALSE 61848
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61759: LD_STRING setFactoryWaypointXY(
61761: PUSH
61762: LD_VAR 0 3
61766: PUSH
61767: LD_VAR 0 2
61771: ARRAY
61772: PUSH
61773: LD_INT 1
61775: ARRAY
61776: STR
61777: PUSH
61778: LD_STRING ,
61780: STR
61781: PUSH
61782: LD_VAR 0 3
61786: PUSH
61787: LD_VAR 0 2
61791: ARRAY
61792: PUSH
61793: LD_INT 2
61795: ARRAY
61796: STR
61797: PUSH
61798: LD_STRING ,
61800: STR
61801: PUSH
61802: LD_VAR 0 3
61806: PUSH
61807: LD_VAR 0 2
61811: ARRAY
61812: PUSH
61813: LD_INT 3
61815: ARRAY
61816: STR
61817: PUSH
61818: LD_STRING ,
61820: STR
61821: PUSH
61822: LD_VAR 0 3
61826: PUSH
61827: LD_VAR 0 2
61831: ARRAY
61832: PUSH
61833: LD_INT 4
61835: ARRAY
61836: STR
61837: PUSH
61838: LD_STRING )
61840: STR
61841: PPUSH
61842: CALL_OW 559
61846: GO 61756
61848: POP
61849: POP
// end ; end ;
61850: LD_VAR 0 1
61854: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61855: LD_INT 0
61857: PPUSH
// if HexInfo ( x , y ) = warehouse then
61858: LD_VAR 0 2
61862: PPUSH
61863: LD_VAR 0 3
61867: PPUSH
61868: CALL_OW 428
61872: PUSH
61873: LD_VAR 0 1
61877: EQUAL
61878: IFFALSE 61905
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61880: LD_ADDR_EXP 61
61884: PUSH
61885: LD_EXP 61
61889: PPUSH
61890: LD_VAR 0 1
61894: PPUSH
61895: LD_INT 0
61897: PPUSH
61898: CALL_OW 1
61902: ST_TO_ADDR
61903: GO 61956
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61905: LD_ADDR_EXP 61
61909: PUSH
61910: LD_EXP 61
61914: PPUSH
61915: LD_VAR 0 1
61919: PPUSH
61920: LD_VAR 0 1
61924: PPUSH
61925: CALL_OW 255
61929: PUSH
61930: LD_VAR 0 1
61934: PUSH
61935: LD_VAR 0 2
61939: PUSH
61940: LD_VAR 0 3
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: PPUSH
61951: CALL_OW 1
61955: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61956: CALL 61965 0 0
// end ;
61960: LD_VAR 0 4
61964: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61965: LD_INT 0
61967: PPUSH
61968: PPUSH
61969: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61970: LD_STRING resetWarehouseGatheringPoints();
61972: PPUSH
61973: CALL_OW 559
// if warehouseGatheringPoints then
61977: LD_EXP 61
61981: IFFALSE 62107
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61983: LD_ADDR_VAR 0 3
61987: PUSH
61988: LD_EXP 61
61992: PPUSH
61993: CALL 52090 0 1
61997: ST_TO_ADDR
// for i := 1 to list do
61998: LD_ADDR_VAR 0 2
62002: PUSH
62003: DOUBLE
62004: LD_INT 1
62006: DEC
62007: ST_TO_ADDR
62008: LD_VAR 0 3
62012: PUSH
62013: FOR_TO
62014: IFFALSE 62105
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62016: LD_STRING setWarehouseGatheringPointXY(
62018: PUSH
62019: LD_VAR 0 3
62023: PUSH
62024: LD_VAR 0 2
62028: ARRAY
62029: PUSH
62030: LD_INT 1
62032: ARRAY
62033: STR
62034: PUSH
62035: LD_STRING ,
62037: STR
62038: PUSH
62039: LD_VAR 0 3
62043: PUSH
62044: LD_VAR 0 2
62048: ARRAY
62049: PUSH
62050: LD_INT 2
62052: ARRAY
62053: STR
62054: PUSH
62055: LD_STRING ,
62057: STR
62058: PUSH
62059: LD_VAR 0 3
62063: PUSH
62064: LD_VAR 0 2
62068: ARRAY
62069: PUSH
62070: LD_INT 3
62072: ARRAY
62073: STR
62074: PUSH
62075: LD_STRING ,
62077: STR
62078: PUSH
62079: LD_VAR 0 3
62083: PUSH
62084: LD_VAR 0 2
62088: ARRAY
62089: PUSH
62090: LD_INT 4
62092: ARRAY
62093: STR
62094: PUSH
62095: LD_STRING )
62097: STR
62098: PPUSH
62099: CALL_OW 559
62103: GO 62013
62105: POP
62106: POP
// end ; end ;
62107: LD_VAR 0 1
62111: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62112: LD_INT 0
62114: PPUSH
62115: PPUSH
// if not mpSidePositions then
62116: LD_EXP 7
62120: NOT
62121: IFFALSE 62125
// exit ;
62123: GO 62196
// result :=  ;
62125: LD_ADDR_VAR 0 1
62129: PUSH
62130: LD_STRING 
62132: ST_TO_ADDR
// for i := 1 to 8 do
62133: LD_ADDR_VAR 0 2
62137: PUSH
62138: DOUBLE
62139: LD_INT 1
62141: DEC
62142: ST_TO_ADDR
62143: LD_INT 8
62145: PUSH
62146: FOR_TO
62147: IFFALSE 62177
// begin result := result & mpSidePositions [ i ] & ; ;
62149: LD_ADDR_VAR 0 1
62153: PUSH
62154: LD_VAR 0 1
62158: PUSH
62159: LD_EXP 7
62163: PUSH
62164: LD_VAR 0 2
62168: ARRAY
62169: STR
62170: PUSH
62171: LD_STRING ;
62173: STR
62174: ST_TO_ADDR
// end ;
62175: GO 62146
62177: POP
62178: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62179: LD_STRING setMultiplayerRealPosition("
62181: PUSH
62182: LD_VAR 0 1
62186: STR
62187: PUSH
62188: LD_STRING ");
62190: STR
62191: PPUSH
62192: CALL_OW 559
// end ;
62196: LD_VAR 0 1
62200: RET
