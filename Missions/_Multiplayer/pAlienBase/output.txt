// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2738 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3114 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 2 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 2
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 3 , 0 , 3 , 3 , 3 , 3 , 3 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 3
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 3
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 220 , 160 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 220
 809: PUSH
 810: LD_INT 160
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 8
 838: PUSH
 839: LD_INT 9
 841: PUSH
 842: LD_INT 10
 844: PUSH
 845: LD_INT 11
 847: PUSH
 848: LD_INT 12
 850: PUSH
 851: LD_INT 13
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_EXP 19
 871: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 872: LD_VAR 0 1
 876: PUSH
 877: LD_INT 2
 879: EQUAL
 880: IFFALSE 892
// baseLevel := 1 else
 882: LD_ADDR_VAR 0 7
 886: PUSH
 887: LD_INT 1
 889: ST_TO_ADDR
 890: GO 906
// baseLevel := mpGameSettings [ 1 ] ;
 892: LD_ADDR_VAR 0 7
 896: PUSH
 897: LD_EXP 6
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 906: LD_ADDR_EXP 24
 910: PUSH
 911: LD_EXP 6
 915: PUSH
 916: LD_INT 2
 918: ARRAY
 919: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 920: LD_ADDR_EXP 25
 924: PUSH
 925: LD_EXP 6
 929: PUSH
 930: LD_INT 3
 932: ARRAY
 933: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 934: LD_ADDR_EXP 15
 938: PUSH
 939: LD_EXP 6
 943: PUSH
 944: LD_INT 4
 946: ARRAY
 947: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 948: LD_ADDR_EXP 27
 952: PUSH
 953: LD_EXP 6
 957: PUSH
 958: LD_INT 5
 960: ARRAY
 961: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 962: LD_ADDR_VAR 0 5
 966: PUSH
 967: LD_EXP 6
 971: PUSH
 972: LD_INT 6
 974: ARRAY
 975: PUSH
 976: LD_INT 0
 978: GREATER
 979: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 980: LD_ADDR_VAR 0 6
 984: PUSH
 985: LD_EXP 6
 989: PUSH
 990: LD_INT 7
 992: ARRAY
 993: PUSH
 994: LD_INT 0
 996: GREATER
 997: ST_TO_ADDR
// mpKingArea := 0 ;
 998: LD_ADDR_EXP 34
1002: PUSH
1003: LD_INT 0
1005: ST_TO_ADDR
// mpPoints := 0 ;
1006: LD_ADDR_EXP 35
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// mpEmissions := 0 ;
1014: LD_ADDR_EXP 37
1018: PUSH
1019: LD_INT 0
1021: ST_TO_ADDR
// kingArea := 0 ;
1022: LD_ADDR_EXP 1
1026: PUSH
1027: LD_INT 0
1029: ST_TO_ADDR
// kingCamArea := 0 ;
1030: LD_ADDR_EXP 2
1034: PUSH
1035: LD_INT 0
1037: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1038: LD_EXP 6
1042: PUSH
1043: LD_INT 9
1045: ARRAY
1046: IFFALSE 1178
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1048: LD_ADDR_EXP 36
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 3
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 12
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 24
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 12
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 23
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 21
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 42
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 21
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 42
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: LIST
1177: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1178: LD_ADDR_EXP 16
1182: PUSH
1183: LD_EXP 6
1187: PUSH
1188: LD_INT 11
1190: ARRAY
1191: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1192: LD_ADDR_EXP 22
1196: PUSH
1197: LD_EXP 6
1201: PUSH
1202: LD_INT 12
1204: ARRAY
1205: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1206: LD_ADDR_EXP 26
1210: PUSH
1211: LD_EXP 6
1215: PUSH
1216: LD_INT 13
1218: ARRAY
1219: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1220: LD_ADDR_EXP 33
1224: PUSH
1225: LD_EXP 6
1229: PUSH
1230: LD_INT 14
1232: ARRAY
1233: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1234: LD_ADDR_EXP 30
1238: PUSH
1239: LD_EXP 6
1243: PUSH
1244: LD_INT 15
1246: ARRAY
1247: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1248: LD_ADDR_EXP 28
1252: PUSH
1253: LD_EXP 6
1257: PUSH
1258: LD_INT 18
1260: ARRAY
1261: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1262: LD_ADDR_EXP 20
1266: PUSH
1267: LD_EXP 6
1271: PUSH
1272: LD_INT 21
1274: ARRAY
1275: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1276: LD_ADDR_EXP 31
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 3
1286: PUSH
1287: LD_INT 4
1289: PUSH
1290: LD_INT 5
1292: PUSH
1293: LD_INT 6
1295: PUSH
1296: LD_INT 7
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 5 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) ] ;
1307: LD_ADDR_VAR 0 8
1311: PUSH
1312: LD_INT 16
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: CALL 52911 0 2
1322: PUSH
1323: LD_INT 17
1325: PPUSH
1326: LD_INT 2
1328: PPUSH
1329: CALL 52911 0 2
1333: PUSH
1334: LD_INT 18
1336: PPUSH
1337: LD_INT 3
1339: PPUSH
1340: CALL 52911 0 2
1344: PUSH
1345: LD_INT 19
1347: PPUSH
1348: LD_INT 5
1350: PPUSH
1351: CALL 52911 0 2
1355: PUSH
1356: LD_INT 20
1358: PPUSH
1359: LD_INT 5
1361: PPUSH
1362: CALL 52911 0 2
1366: PUSH
1367: LD_INT 21
1369: PPUSH
1370: LD_INT 0
1372: PPUSH
1373: CALL 52911 0 2
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: DOUBLE
1392: LD_INT 1
1394: DEC
1395: ST_TO_ADDR
1396: LD_VAR 0 8
1400: PPUSH
1401: CALL 12260 0 1
1405: PUSH
1406: FOR_TO
1407: IFFALSE 1511
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1409: LD_ADDR_EXP 21
1413: PUSH
1414: LD_EXP 21
1418: PPUSH
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_VAR 0 8
1428: PUSH
1429: LD_VAR 0 3
1433: ARRAY
1434: PUSH
1435: LD_INT 1
1437: ARRAY
1438: PPUSH
1439: LD_VAR 0 8
1443: PUSH
1444: LD_VAR 0 3
1448: ARRAY
1449: PUSH
1450: LD_INT 3
1452: ARRAY
1453: PPUSH
1454: LD_INT 10
1456: PPUSH
1457: CALL_OW 272
1461: PUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 2
1475: ARRAY
1476: PPUSH
1477: LD_VAR 0 8
1481: PUSH
1482: LD_VAR 0 3
1486: ARRAY
1487: PUSH
1488: LD_INT 3
1490: ARRAY
1491: PPUSH
1492: LD_INT 10
1494: PPUSH
1495: CALL_OW 273
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 1
1508: ST_TO_ADDR
1509: GO 1406
1511: POP
1512: POP
// if hasOil then
1513: LD_VAR 0 5
1517: IFFALSE 1628
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1519: LD_ADDR_VAR 0 4
1523: PUSH
1524: LD_EXP 6
1528: PUSH
1529: LD_INT 6
1531: ARRAY
1532: PUSH
1533: LD_INT 2
1535: EQUAL
1536: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1537: LD_ADDR_EXP 12
1541: PUSH
1542: LD_INT 22
1544: PPUSH
1545: LD_VAR 0 4
1549: PPUSH
1550: CALL 52744 0 2
1554: PUSH
1555: LD_INT 24
1557: PPUSH
1558: LD_VAR 0 4
1562: PPUSH
1563: CALL 52744 0 2
1567: PUSH
1568: LD_INT 26
1570: PPUSH
1571: LD_VAR 0 4
1575: PPUSH
1576: CALL 52744 0 2
1580: PUSH
1581: LD_INT 28
1583: PPUSH
1584: LD_VAR 0 4
1588: PPUSH
1589: CALL 52744 0 2
1593: PUSH
1594: LD_INT 30
1596: PPUSH
1597: LD_VAR 0 4
1601: PPUSH
1602: CALL 52744 0 2
1606: PUSH
1607: LD_INT 32
1609: PPUSH
1610: LD_VAR 0 4
1614: PPUSH
1615: CALL 52744 0 2
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: ST_TO_ADDR
// end ; if hasSib then
1628: LD_VAR 0 6
1632: IFFALSE 1743
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1634: LD_ADDR_VAR 0 4
1638: PUSH
1639: LD_EXP 6
1643: PUSH
1644: LD_INT 7
1646: ARRAY
1647: PUSH
1648: LD_INT 2
1650: EQUAL
1651: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1652: LD_ADDR_EXP 13
1656: PUSH
1657: LD_INT 23
1659: PPUSH
1660: LD_VAR 0 4
1664: PPUSH
1665: CALL 52744 0 2
1669: PUSH
1670: LD_INT 25
1672: PPUSH
1673: LD_VAR 0 4
1677: PPUSH
1678: CALL 52744 0 2
1682: PUSH
1683: LD_INT 27
1685: PPUSH
1686: LD_VAR 0 4
1690: PPUSH
1691: CALL 52744 0 2
1695: PUSH
1696: LD_INT 29
1698: PPUSH
1699: LD_VAR 0 4
1703: PPUSH
1704: CALL 52744 0 2
1708: PUSH
1709: LD_INT 31
1711: PPUSH
1712: LD_VAR 0 4
1716: PPUSH
1717: CALL 52744 0 2
1721: PUSH
1722: LD_INT 33
1724: PPUSH
1725: LD_VAR 0 4
1729: PPUSH
1730: CALL 52744 0 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1743: LD_VAR 0 7
1747: PUSH
1748: LD_INT 1
1750: GREATEREQUAL
1751: IFFALSE 1763
// mpDepots := startPos ;
1753: LD_ADDR_EXP 14
1757: PUSH
1758: LD_VAR 0 8
1762: ST_TO_ADDR
// if baseLevel >= 2 then
1763: LD_VAR 0 7
1767: PUSH
1768: LD_INT 2
1770: GREATEREQUAL
1771: IFFALSE 2086
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] ] ;
1773: LD_ADDR_EXP 17
1777: PUSH
1778: LD_INT 31
1780: PUSH
1781: LD_INT 35
1783: PPUSH
1784: LD_INT 5
1786: PPUSH
1787: CALL 52911 0 2
1791: ADD
1792: PUSH
1793: LD_INT 31
1795: PUSH
1796: LD_INT 36
1798: PPUSH
1799: LD_INT 5
1801: PPUSH
1802: CALL 52911 0 2
1806: ADD
1807: PUSH
1808: LD_INT 4
1810: PUSH
1811: LD_INT 34
1813: PPUSH
1814: LD_INT 5
1816: PPUSH
1817: CALL 52911 0 2
1821: ADD
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 31
1830: PUSH
1831: LD_INT 38
1833: PPUSH
1834: LD_INT 5
1836: PPUSH
1837: CALL 52911 0 2
1841: ADD
1842: PUSH
1843: LD_INT 31
1845: PUSH
1846: LD_INT 39
1848: PPUSH
1849: LD_INT 0
1851: PPUSH
1852: CALL 52911 0 2
1856: ADD
1857: PUSH
1858: LD_INT 4
1860: PUSH
1861: LD_INT 37
1863: PPUSH
1864: LD_INT 5
1866: PPUSH
1867: CALL 52911 0 2
1871: ADD
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 31
1880: PUSH
1881: LD_INT 41
1883: PPUSH
1884: LD_INT 0
1886: PPUSH
1887: CALL 52911 0 2
1891: ADD
1892: PUSH
1893: LD_INT 31
1895: PUSH
1896: LD_INT 42
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL 52911 0 2
1906: ADD
1907: PUSH
1908: LD_INT 4
1910: PUSH
1911: LD_INT 40
1913: PPUSH
1914: LD_INT 0
1916: PPUSH
1917: CALL 52911 0 2
1921: ADD
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 31
1930: PUSH
1931: LD_INT 44
1933: PPUSH
1934: LD_INT 2
1936: PPUSH
1937: CALL 52911 0 2
1941: ADD
1942: PUSH
1943: LD_INT 31
1945: PUSH
1946: LD_INT 45
1948: PPUSH
1949: LD_INT 2
1951: PPUSH
1952: CALL 52911 0 2
1956: ADD
1957: PUSH
1958: LD_INT 4
1960: PUSH
1961: LD_INT 43
1963: PPUSH
1964: LD_INT 2
1966: PPUSH
1967: CALL 52911 0 2
1971: ADD
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 31
1980: PUSH
1981: LD_INT 47
1983: PPUSH
1984: LD_INT 2
1986: PPUSH
1987: CALL 52911 0 2
1991: ADD
1992: PUSH
1993: LD_INT 31
1995: PUSH
1996: LD_INT 48
1998: PPUSH
1999: LD_INT 3
2001: PPUSH
2002: CALL 52911 0 2
2006: ADD
2007: PUSH
2008: LD_INT 4
2010: PUSH
2011: LD_INT 46
2013: PPUSH
2014: LD_INT 2
2016: PPUSH
2017: CALL 52911 0 2
2021: ADD
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 31
2030: PUSH
2031: LD_INT 50
2033: PPUSH
2034: LD_INT 3
2036: PPUSH
2037: CALL 52911 0 2
2041: ADD
2042: PUSH
2043: LD_INT 31
2045: PUSH
2046: LD_INT 51
2048: PPUSH
2049: LD_INT 3
2051: PPUSH
2052: CALL 52911 0 2
2056: ADD
2057: PUSH
2058: LD_INT 4
2060: PUSH
2061: LD_INT 49
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL 52911 0 2
2071: ADD
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: ST_TO_ADDR
// end ; end ;
2086: LD_VAR 0 2
2090: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2091: GO 2093
2093: DISABLE
2094: LD_INT 0
2096: PPUSH
2097: PPUSH
2098: PPUSH
2099: PPUSH
2100: PPUSH
2101: PPUSH
2102: PPUSH
2103: PPUSH
// begin if not mpShipments then
2104: LD_EXP 27
2108: NOT
2109: IFFALSE 2113
// exit ;
2111: GO 2651
// case mpShipments of 1 :
2113: LD_EXP 27
2117: PUSH
2118: LD_INT 1
2120: DOUBLE
2121: EQUAL
2122: IFTRUE 2126
2124: GO 2161
2126: POP
// begin time := 0 0$30 ;
2127: LD_ADDR_VAR 0 4
2131: PUSH
2132: LD_INT 1050
2134: ST_TO_ADDR
// normalTime := 0 0$30 ;
2135: LD_ADDR_VAR 0 6
2139: PUSH
2140: LD_INT 1050
2142: ST_TO_ADDR
// maxTime := 1 1$20 ;
2143: LD_ADDR_VAR 0 8
2147: PUSH
2148: LD_INT 2800
2150: ST_TO_ADDR
// delayTime := 0 0$5 ;
2151: LD_ADDR_VAR 0 7
2155: PUSH
2156: LD_INT 175
2158: ST_TO_ADDR
// end ; 2 :
2159: GO 2291
2161: LD_INT 2
2163: DOUBLE
2164: EQUAL
2165: IFTRUE 2169
2167: GO 2204
2169: POP
// begin time := 0 0$25 ;
2170: LD_ADDR_VAR 0 4
2174: PUSH
2175: LD_INT 875
2177: ST_TO_ADDR
// normalTime := 0 0$25 ;
2178: LD_ADDR_VAR 0 6
2182: PUSH
2183: LD_INT 875
2185: ST_TO_ADDR
// maxTime := 1 1$10 ;
2186: LD_ADDR_VAR 0 8
2190: PUSH
2191: LD_INT 2450
2193: ST_TO_ADDR
// delayTime := 0 0$4 ;
2194: LD_ADDR_VAR 0 7
2198: PUSH
2199: LD_INT 140
2201: ST_TO_ADDR
// end ; 3 :
2202: GO 2291
2204: LD_INT 3
2206: DOUBLE
2207: EQUAL
2208: IFTRUE 2212
2210: GO 2247
2212: POP
// begin time := 0 0$20 ;
2213: LD_ADDR_VAR 0 4
2217: PUSH
2218: LD_INT 700
2220: ST_TO_ADDR
// normalTime := 0 0$20 ;
2221: LD_ADDR_VAR 0 6
2225: PUSH
2226: LD_INT 700
2228: ST_TO_ADDR
// maxTime := 1 1$00 ;
2229: LD_ADDR_VAR 0 8
2233: PUSH
2234: LD_INT 2100
2236: ST_TO_ADDR
// delayTime := 0 0$3 ;
2237: LD_ADDR_VAR 0 7
2241: PUSH
2242: LD_INT 105
2244: ST_TO_ADDR
// end ; 4 :
2245: GO 2291
2247: LD_INT 4
2249: DOUBLE
2250: EQUAL
2251: IFTRUE 2255
2253: GO 2290
2255: POP
// begin time := 0 0$15 ;
2256: LD_ADDR_VAR 0 4
2260: PUSH
2261: LD_INT 525
2263: ST_TO_ADDR
// normalTime := 0 0$15 ;
2264: LD_ADDR_VAR 0 6
2268: PUSH
2269: LD_INT 525
2271: ST_TO_ADDR
// maxTime := 0 0$55 ;
2272: LD_ADDR_VAR 0 8
2276: PUSH
2277: LD_INT 1925
2279: ST_TO_ADDR
// delayTime := 0 0$2 ;
2280: LD_ADDR_VAR 0 7
2284: PUSH
2285: LD_INT 70
2287: ST_TO_ADDR
// end ; end ;
2288: GO 2291
2290: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_INT 8
2298: PUSH
2299: LD_INT 9
2301: PUSH
2302: LD_INT 10
2304: PUSH
2305: LD_INT 11
2307: PUSH
2308: LD_INT 12
2310: PUSH
2311: LD_INT 13
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: ST_TO_ADDR
// areas := [ ] ;
2322: LD_ADDR_VAR 0 5
2326: PUSH
2327: EMPTY
2328: ST_TO_ADDR
// for i := 1 to 8 do
2329: LD_ADDR_VAR 0 1
2333: PUSH
2334: DOUBLE
2335: LD_INT 1
2337: DEC
2338: ST_TO_ADDR
2339: LD_INT 8
2341: PUSH
2342: FOR_TO
2343: IFFALSE 2390
// begin if not mpSidePositions [ i ] then
2345: LD_EXP 7
2349: PUSH
2350: LD_VAR 0 1
2354: ARRAY
2355: NOT
2356: IFFALSE 2360
// continue ;
2358: GO 2342
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2360: LD_ADDR_VAR 0 5
2364: PUSH
2365: LD_VAR 0 5
2369: PUSH
2370: LD_VAR 0 3
2374: PUSH
2375: LD_EXP 7
2379: PUSH
2380: LD_VAR 0 1
2384: ARRAY
2385: ARRAY
2386: ADD
2387: ST_TO_ADDR
// end ;
2388: GO 2342
2390: POP
2391: POP
// x := 1 ;
2392: LD_ADDR_VAR 0 2
2396: PUSH
2397: LD_INT 1
2399: ST_TO_ADDR
// repeat wait ( time ) ;
2400: LD_VAR 0 4
2404: PPUSH
2405: CALL_OW 67
// x := Inc ( x ) ;
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL 49565 0 1
2423: ST_TO_ADDR
// if x > 5 then
2424: LD_VAR 0 2
2428: PUSH
2429: LD_INT 5
2431: GREATER
2432: IFFALSE 2442
// x := 1 ;
2434: LD_ADDR_VAR 0 2
2438: PUSH
2439: LD_INT 1
2441: ST_TO_ADDR
// for i in areas do
2442: LD_ADDR_VAR 0 1
2446: PUSH
2447: LD_VAR 0 5
2451: PUSH
2452: FOR_IN
2453: IFFALSE 2492
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2455: LD_VAR 0 1
2459: PPUSH
2460: LD_INT 1
2462: PPUSH
2463: CALL_OW 287
2467: PUSH
2468: LD_INT 20
2470: LESS
2471: IFFALSE 2490
// begin CreateCratesArea ( x , i , true ) ;
2473: LD_VAR 0 2
2477: PPUSH
2478: LD_VAR 0 1
2482: PPUSH
2483: LD_INT 1
2485: PPUSH
2486: CALL_OW 55
// end ; end ;
2490: GO 2452
2492: POP
2493: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 20 then
2494: LD_INT 1
2496: PPUSH
2497: LD_INT 1
2499: PPUSH
2500: CALL_OW 287
2504: PUSH
2505: LD_INT 20
2507: LESS
2508: IFFALSE 2525
// CreateCratesArea ( x , MZBaseArea , true ) ;
2510: LD_VAR 0 2
2514: PPUSH
2515: LD_INT 1
2517: PPUSH
2518: LD_INT 1
2520: PPUSH
2521: CALL_OW 55
// if GetResourceArea ( MZSpecialArea , mat_cans ) = 0 then
2525: LD_INT 15
2527: PPUSH
2528: LD_INT 1
2530: PPUSH
2531: CALL_OW 287
2535: PUSH
2536: LD_INT 0
2538: EQUAL
2539: IFFALSE 2578
// begin for i := 1 to 3 do
2541: LD_ADDR_VAR 0 1
2545: PUSH
2546: DOUBLE
2547: LD_INT 1
2549: DEC
2550: ST_TO_ADDR
2551: LD_INT 3
2553: PUSH
2554: FOR_TO
2555: IFFALSE 2574
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2557: LD_VAR 0 2
2561: PPUSH
2562: LD_INT 15
2564: PPUSH
2565: LD_INT 1
2567: PPUSH
2568: CALL_OW 55
2572: GO 2554
2574: POP
2575: POP
// end else
2576: GO 2609
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
2578: LD_INT 15
2580: PPUSH
2581: LD_INT 1
2583: PPUSH
2584: CALL_OW 287
2588: PUSH
2589: LD_INT 30
2591: LESS
2592: IFFALSE 2609
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2594: LD_VAR 0 2
2598: PPUSH
2599: LD_INT 15
2601: PPUSH
2602: LD_INT 1
2604: PPUSH
2605: CALL_OW 55
// time := time + delayTime ;
2609: LD_ADDR_VAR 0 4
2613: PUSH
2614: LD_VAR 0 4
2618: PUSH
2619: LD_VAR 0 7
2623: PLUS
2624: ST_TO_ADDR
// if time > maxTime then
2625: LD_VAR 0 4
2629: PUSH
2630: LD_VAR 0 8
2634: GREATER
2635: IFFALSE 2647
// time := normalTime ;
2637: LD_ADDR_VAR 0 4
2641: PUSH
2642: LD_VAR 0 6
2646: ST_TO_ADDR
// until false ;
2647: LD_INT 0
2649: IFFALSE 2400
// end ; end_of_file
2651: PPOPN 8
2653: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2654: LD_VAR 0 1
2658: PPUSH
2659: CALL 53709 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: CALL 7886 0 1
// end ;
2672: PPOPN 1
2674: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2675: LD_VAR 0 1
2679: PPUSH
2680: CALL 53726 0 1
// end ;
2684: PPOPN 1
2686: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2687: LD_VAR 0 1
2691: PPUSH
2692: CALL 8593 0 1
2696: PPOPN 1
2698: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2699: LD_VAR 0 1
2703: PPUSH
2704: LD_VAR 0 2
2708: PPUSH
2709: CALL 53767 0 2
2713: PPOPN 2
2715: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2716: LD_VAR 0 1
2720: PPUSH
2721: LD_VAR 0 2
2725: PPUSH
2726: LD_VAR 0 3
2730: PPUSH
2731: CALL 8646 0 3
2735: PPOPN 3
2737: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2738: LD_INT 0
2740: PPUSH
2741: PPUSH
// disable ( mpActive ) ;
2742: LD_INT 100
2744: DISABLE_MARKED
// disable ( mpWin ) ;
2745: LD_INT 101
2747: DISABLE_MARKED
// disable ( mpLose ) ;
2748: LD_INT 102
2750: DISABLE_MARKED
// mpGameType := 0 ;
2751: LD_ADDR_EXP 3
2755: PUSH
2756: LD_INT 0
2758: ST_TO_ADDR
// mpGameSettings := [ ] ;
2759: LD_ADDR_EXP 6
2763: PUSH
2764: EMPTY
2765: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2766: LD_ADDR_EXP 4
2770: PUSH
2771: EMPTY
2772: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2773: LD_ADDR_EXP 5
2777: PUSH
2778: EMPTY
2779: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2780: LD_ADDR_EXP 29
2784: PUSH
2785: LD_INT 2
2787: PUSH
2788: LD_INT 2
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2795: LD_ADDR_EXP 12
2799: PUSH
2800: EMPTY
2801: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2802: LD_ADDR_EXP 13
2806: PUSH
2807: EMPTY
2808: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2809: LD_ADDR_EXP 41
2813: PUSH
2814: EMPTY
2815: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2816: LD_ADDR_EXP 42
2820: PUSH
2821: EMPTY
2822: ST_TO_ADDR
// mpDepots := [ ] ;
2823: LD_ADDR_EXP 14
2827: PUSH
2828: EMPTY
2829: ST_TO_ADDR
// mpBuildings := [ ] ;
2830: LD_ADDR_EXP 17
2834: PUSH
2835: EMPTY
2836: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2837: LD_ADDR_EXP 18
2841: PUSH
2842: EMPTY
2843: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2844: LD_ADDR_EXP 19
2848: PUSH
2849: EMPTY
2850: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2851: LD_ADDR_EXP 20
2855: PUSH
2856: EMPTY
2857: ST_TO_ADDR
// mpStartingResources := [ ] ;
2858: LD_ADDR_EXP 15
2862: PUSH
2863: EMPTY
2864: ST_TO_ADDR
// mpStartPos := [ ] ;
2865: LD_ADDR_EXP 21
2869: PUSH
2870: EMPTY
2871: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2872: LD_ADDR_EXP 22
2876: PUSH
2877: LD_INT 1
2879: NEG
2880: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2881: LD_ADDR_EXP 23
2885: PUSH
2886: EMPTY
2887: ST_TO_ADDR
// mpApemans := [ ] ;
2888: LD_ADDR_EXP 30
2892: PUSH
2893: EMPTY
2894: ST_TO_ADDR
// mpApemansArea := [ ] ;
2895: LD_ADDR_EXP 31
2899: PUSH
2900: EMPTY
2901: ST_TO_ADDR
// mpRespawn := [ ] ;
2902: LD_ADDR_EXP 33
2906: PUSH
2907: EMPTY
2908: ST_TO_ADDR
// mpKingArea := 0 ;
2909: LD_ADDR_EXP 34
2913: PUSH
2914: LD_INT 0
2916: ST_TO_ADDR
// mpPoints := [ ] ;
2917: LD_ADDR_EXP 35
2921: PUSH
2922: EMPTY
2923: ST_TO_ADDR
// mpVehicles := 0 ;
2924: LD_ADDR_EXP 36
2928: PUSH
2929: LD_INT 0
2931: ST_TO_ADDR
// mpShipments := 0 ;
2932: LD_ADDR_EXP 27
2936: PUSH
2937: LD_INT 0
2939: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2940: LD_ADDR_EXP 40
2944: PUSH
2945: EMPTY
2946: PUSH
2947: EMPTY
2948: PUSH
2949: EMPTY
2950: PUSH
2951: EMPTY
2952: PUSH
2953: EMPTY
2954: PUSH
2955: EMPTY
2956: PUSH
2957: EMPTY
2958: PUSH
2959: EMPTY
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: LIST
2970: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2971: LD_ADDR_EXP 32
2975: PUSH
2976: EMPTY
2977: PUSH
2978: EMPTY
2979: PUSH
2980: EMPTY
2981: PUSH
2982: EMPTY
2983: PUSH
2984: EMPTY
2985: PUSH
2986: EMPTY
2987: PUSH
2988: EMPTY
2989: PUSH
2990: EMPTY
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: LIST
2996: LIST
2997: LIST
2998: LIST
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// mpEmissions := 0 ;
3002: LD_ADDR_EXP 37
3006: PUSH
3007: LD_INT 0
3009: ST_TO_ADDR
// mpTeleports := 0 ;
3010: LD_ADDR_EXP 43
3014: PUSH
3015: LD_INT 0
3017: ST_TO_ADDR
// mpArtifacts := 0 ;
3018: LD_ADDR_EXP 44
3022: PUSH
3023: LD_INT 0
3025: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3026: LD_ADDR_EXP 25
3030: PUSH
3031: LD_INT 3
3033: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3034: LD_ADDR_EXP 24
3038: PUSH
3039: LD_INT 15
3041: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3042: LD_ADDR_EXP 38
3046: PUSH
3047: LD_INT 0
3049: ST_TO_ADDR
// mpGameActive := false ;
3050: LD_ADDR_EXP 39
3054: PUSH
3055: LD_INT 0
3057: ST_TO_ADDR
// mpBlockRespThread := false ;
3058: LD_ADDR_EXP 45
3062: PUSH
3063: LD_INT 0
3065: ST_TO_ADDR
// for i := 1 to 32 do
3066: LD_ADDR_VAR 0 2
3070: PUSH
3071: DOUBLE
3072: LD_INT 1
3074: DEC
3075: ST_TO_ADDR
3076: LD_INT 32
3078: PUSH
3079: FOR_TO
3080: IFFALSE 3107
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3082: LD_ADDR_EXP 6
3086: PUSH
3087: LD_EXP 6
3091: PPUSH
3092: LD_VAR 0 2
3096: PPUSH
3097: LD_INT 0
3099: PPUSH
3100: CALL_OW 1
3104: ST_TO_ADDR
3105: GO 3079
3107: POP
3108: POP
// end ;
3109: LD_VAR 0 1
3113: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3114: LD_INT 0
3116: PPUSH
3117: PPUSH
3118: PPUSH
3119: PPUSH
3120: PPUSH
3121: PPUSH
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3130: LD_ADDR_VAR 0 14
3134: PUSH
3135: LD_INT 1
3137: PUSH
3138: LD_INT 2
3140: PUSH
3141: LD_INT 3
3143: PUSH
3144: LD_INT 5
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: ST_TO_ADDR
// for i in gameTypes do
3153: LD_ADDR_VAR 0 2
3157: PUSH
3158: LD_VAR 0 14
3162: PUSH
3163: FOR_IN
3164: IFFALSE 3173
// disable ( i ) ;
3166: LD_VAR 0 2
3170: DISABLE_MARKED
3171: GO 3163
3173: POP
3174: POP
// if Multiplayer then
3175: LD_OWVAR 4
3179: IFFALSE 3363
// begin mpGameType := mp_game_type ;
3181: LD_ADDR_EXP 3
3185: PUSH
3186: LD_OWVAR 6
3190: ST_TO_ADDR
// your_side := mp_player_side ;
3191: LD_ADDR_OWVAR 2
3195: PUSH
3196: LD_OWVAR 7
3200: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3201: LD_ADDR_EXP 7
3205: PUSH
3206: LD_OWVAR 17
3210: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3211: LD_ADDR_EXP 8
3215: PUSH
3216: LD_OWVAR 15
3220: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3221: LD_ADDR_EXP 9
3225: PUSH
3226: LD_OWVAR 16
3230: ST_TO_ADDR
// mpTeams := mp_teams ;
3231: LD_ADDR_EXP 10
3235: PUSH
3236: LD_OWVAR 12
3240: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3241: LD_ADDR_VAR 0 2
3245: PUSH
3246: DOUBLE
3247: LD_INT 1
3249: DEC
3250: ST_TO_ADDR
3251: LD_EXP 4
3255: PPUSH
3256: CALL 12260 0 1
3260: PUSH
3261: FOR_TO
3262: IFFALSE 3338
// begin setting := mpGameSettingsKeys [ i ] ;
3264: LD_ADDR_VAR 0 12
3268: PUSH
3269: LD_EXP 4
3273: PUSH
3274: LD_VAR 0 2
3278: ARRAY
3279: ST_TO_ADDR
// if setting then
3280: LD_VAR 0 12
3284: IFFALSE 3336
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3286: LD_ADDR_EXP 6
3290: PUSH
3291: LD_EXP 6
3295: PPUSH
3296: LD_VAR 0 2
3300: PPUSH
3301: LD_EXP 5
3305: PUSH
3306: LD_VAR 0 2
3310: ARRAY
3311: PUSH
3312: LD_VAR 0 2
3316: PUSH
3317: LD_INT 1
3319: MINUS
3320: PPUSH
3321: CALL_OW 426
3325: PUSH
3326: LD_INT 1
3328: PLUS
3329: ARRAY
3330: PPUSH
3331: CALL_OW 1
3335: ST_TO_ADDR
// end ;
3336: GO 3261
3338: POP
3339: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3340: LD_ADDR_EXP 11
3344: PUSH
3345: LD_EXP 8
3349: PUSH
3350: LD_INT 0
3352: PUSH
3353: EMPTY
3354: LIST
3355: DIFF
3356: PUSH
3357: LD_INT 1
3359: GREATER
3360: ST_TO_ADDR
// end else
3361: GO 3363
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3363: LD_EXP 3
3367: PPUSH
3368: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3372: LD_EXP 18
3376: PPUSH
3377: CALL 12260 0 1
3381: IFFALSE 3412
// begin for i in mpMarkedAreas do
3383: LD_ADDR_VAR 0 2
3387: PUSH
3388: LD_EXP 18
3392: PUSH
3393: FOR_IN
3394: IFFALSE 3410
// SetAreaMapShow ( i , 0 ) ;
3396: LD_VAR 0 2
3400: PPUSH
3401: LD_INT 0
3403: PPUSH
3404: CALL_OW 424
3408: GO 3393
3410: POP
3411: POP
// end ; for i := 1 to 8 do
3412: LD_ADDR_VAR 0 2
3416: PUSH
3417: DOUBLE
3418: LD_INT 1
3420: DEC
3421: ST_TO_ADDR
3422: LD_INT 8
3424: PUSH
3425: FOR_TO
3426: IFFALSE 4762
// begin if not mpSidePositions [ i ] then
3428: LD_EXP 7
3432: PUSH
3433: LD_VAR 0 2
3437: ARRAY
3438: NOT
3439: IFFALSE 3443
// continue ;
3441: GO 3425
// side := i ;
3443: LD_ADDR_VAR 0 7
3447: PUSH
3448: LD_VAR 0 2
3452: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3453: LD_ADDR_VAR 0 9
3457: PUSH
3458: LD_EXP 9
3462: PUSH
3463: LD_VAR 0 2
3467: ARRAY
3468: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3469: LD_ADDR_VAR 0 8
3473: PUSH
3474: LD_EXP 7
3478: PUSH
3479: LD_VAR 0 2
3483: ARRAY
3484: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3485: LD_EXP 12
3489: PPUSH
3490: CALL 12260 0 1
3494: IFFALSE 3571
// begin for j in mpOilDeposits [ pos ] do
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 12
3505: PUSH
3506: LD_VAR 0 8
3510: ARRAY
3511: PUSH
3512: FOR_IN
3513: IFFALSE 3569
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3515: LD_VAR 0 3
3519: PUSH
3520: LD_INT 1
3522: ARRAY
3523: PPUSH
3524: LD_VAR 0 3
3528: PUSH
3529: LD_INT 2
3531: ARRAY
3532: PPUSH
3533: LD_INT 2
3535: PPUSH
3536: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3540: LD_VAR 0 3
3544: PUSH
3545: LD_INT 1
3547: ARRAY
3548: PPUSH
3549: LD_VAR 0 3
3553: PUSH
3554: LD_INT 2
3556: ARRAY
3557: PPUSH
3558: LD_VAR 0 7
3562: PPUSH
3563: CALL_OW 441
// end ;
3567: GO 3512
3569: POP
3570: POP
// end ; if Count ( mpSibDeposits ) then
3571: LD_EXP 13
3575: PPUSH
3576: CALL 12260 0 1
3580: IFFALSE 3657
// begin for j in mpSibDeposits [ pos ] do
3582: LD_ADDR_VAR 0 3
3586: PUSH
3587: LD_EXP 13
3591: PUSH
3592: LD_VAR 0 8
3596: ARRAY
3597: PUSH
3598: FOR_IN
3599: IFFALSE 3655
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3601: LD_VAR 0 3
3605: PUSH
3606: LD_INT 1
3608: ARRAY
3609: PPUSH
3610: LD_VAR 0 3
3614: PUSH
3615: LD_INT 2
3617: ARRAY
3618: PPUSH
3619: LD_INT 3
3621: PPUSH
3622: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3626: LD_VAR 0 3
3630: PUSH
3631: LD_INT 1
3633: ARRAY
3634: PPUSH
3635: LD_VAR 0 3
3639: PUSH
3640: LD_INT 2
3642: ARRAY
3643: PPUSH
3644: LD_VAR 0 7
3648: PPUSH
3649: CALL_OW 441
// end ;
3653: GO 3598
3655: POP
3656: POP
// end ; InitBc ;
3657: CALL_OW 21
// InitUc ;
3661: CALL_OW 18
// uc_side := side ;
3665: LD_ADDR_OWVAR 20
3669: PUSH
3670: LD_VAR 0 7
3674: ST_TO_ADDR
// uc_nation := nation ;
3675: LD_ADDR_OWVAR 21
3679: PUSH
3680: LD_VAR 0 9
3684: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3685: LD_EXP 22
3689: PUSH
3690: LD_INT 1
3692: NEG
3693: GREATER
3694: IFFALSE 3853
// begin x := mpStartPos [ pos ] [ 1 ] ;
3696: LD_ADDR_VAR 0 5
3700: PUSH
3701: LD_EXP 21
3705: PUSH
3706: LD_VAR 0 8
3710: ARRAY
3711: PUSH
3712: LD_INT 1
3714: ARRAY
3715: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3716: LD_ADDR_VAR 0 6
3720: PUSH
3721: LD_EXP 21
3725: PUSH
3726: LD_VAR 0 8
3730: ARRAY
3731: PUSH
3732: LD_INT 2
3734: ARRAY
3735: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3736: LD_VAR 0 5
3740: PPUSH
3741: LD_VAR 0 6
3745: PPUSH
3746: LD_INT 12
3748: PPUSH
3749: LD_INT 2
3751: PPUSH
3752: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3756: LD_ADDR_EXP 23
3760: PUSH
3761: LD_EXP 23
3765: PPUSH
3766: LD_VAR 0 7
3770: PPUSH
3771: LD_VAR 0 7
3775: PPUSH
3776: LD_VAR 0 5
3780: PPUSH
3781: LD_VAR 0 6
3785: PPUSH
3786: LD_INT 1
3788: PUSH
3789: LD_INT 100
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: PUSH
3796: LD_INT 2
3798: PUSH
3799: LD_INT 70
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: PUSH
3806: LD_INT 3
3808: PUSH
3809: LD_INT 40
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 10
3818: PUSH
3819: LD_INT 25
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: LD_INT 20
3828: PUSH
3829: LD_INT 100
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PPUSH
3843: CALL_OW 418
3847: PPUSH
3848: CALL_OW 1
3852: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3853: LD_EXP 14
3857: PPUSH
3858: CALL 12260 0 1
3862: IFFALSE 4046
// begin if mpGameType = GameTypeSurvival then
3864: LD_EXP 3
3868: PUSH
3869: LD_INT 2
3871: EQUAL
3872: IFFALSE 3892
// begin bc_level := 10 ;
3874: LD_ADDR_OWVAR 43
3878: PUSH
3879: LD_INT 10
3881: ST_TO_ADDR
// bc_type := b_warehouse ;
3882: LD_ADDR_OWVAR 42
3886: PUSH
3887: LD_INT 1
3889: ST_TO_ADDR
// end else
3890: GO 3908
// begin bc_level := 0 ;
3892: LD_ADDR_OWVAR 43
3896: PUSH
3897: LD_INT 0
3899: ST_TO_ADDR
// bc_type := b_depot ;
3900: LD_ADDR_OWVAR 42
3904: PUSH
3905: LD_INT 0
3907: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3908: LD_ADDR_VAR 0 4
3912: PUSH
3913: LD_EXP 14
3917: PUSH
3918: LD_VAR 0 8
3922: ARRAY
3923: PUSH
3924: LD_INT 1
3926: ARRAY
3927: PPUSH
3928: LD_EXP 14
3932: PUSH
3933: LD_VAR 0 8
3937: ARRAY
3938: PUSH
3939: LD_INT 2
3941: ARRAY
3942: PPUSH
3943: LD_EXP 14
3947: PUSH
3948: LD_VAR 0 8
3952: ARRAY
3953: PUSH
3954: LD_INT 3
3956: ARRAY
3957: PPUSH
3958: CALL_OW 47
3962: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3963: LD_VAR 0 4
3967: PPUSH
3968: LD_STRING @
3970: PUSH
3971: LD_VAR 0 7
3975: STR
3976: PPUSH
3977: CALL_OW 500
// if Count ( mpStartingResources ) then
3981: LD_EXP 15
3985: PPUSH
3986: CALL 12260 0 1
3990: IFFALSE 4044
// begin for j := 1 to mpStartingResources do
3992: LD_ADDR_VAR 0 3
3996: PUSH
3997: DOUBLE
3998: LD_INT 1
4000: DEC
4001: ST_TO_ADDR
4002: LD_EXP 15
4006: PUSH
4007: FOR_TO
4008: IFFALSE 4042
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4010: LD_VAR 0 4
4014: PPUSH
4015: CALL_OW 274
4019: PPUSH
4020: LD_VAR 0 3
4024: PPUSH
4025: LD_EXP 15
4029: PUSH
4030: LD_VAR 0 3
4034: ARRAY
4035: PPUSH
4036: CALL_OW 277
4040: GO 4007
4042: POP
4043: POP
// end ; end else
4044: GO 4253
// if Count ( mpStartingResources ) then
4046: LD_EXP 15
4050: PPUSH
4051: CALL 12260 0 1
4055: IFFALSE 4253
// begin x := mpStartPos [ pos ] [ 1 ] ;
4057: LD_ADDR_VAR 0 5
4061: PUSH
4062: LD_EXP 21
4066: PUSH
4067: LD_VAR 0 8
4071: ARRAY
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4077: LD_ADDR_VAR 0 6
4081: PUSH
4082: LD_EXP 21
4086: PUSH
4087: LD_VAR 0 8
4091: ARRAY
4092: PUSH
4093: LD_INT 2
4095: ARRAY
4096: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4097: LD_ADDR_VAR 0 3
4101: PUSH
4102: DOUBLE
4103: LD_INT 1
4105: DEC
4106: ST_TO_ADDR
4107: LD_EXP 15
4111: PUSH
4112: FOR_TO
4113: IFFALSE 4251
// begin resources := mpStartingResources [ j ] ;
4115: LD_ADDR_VAR 0 13
4119: PUSH
4120: LD_EXP 15
4124: PUSH
4125: LD_VAR 0 3
4129: ARRAY
4130: ST_TO_ADDR
// if resources = 0 then
4131: LD_VAR 0 13
4135: PUSH
4136: LD_INT 0
4138: EQUAL
4139: IFFALSE 4143
// continue ;
4141: GO 4112
// repeat if resources >= 50 then
4143: LD_VAR 0 13
4147: PUSH
4148: LD_INT 50
4150: GREATEREQUAL
4151: IFFALSE 4197
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4153: LD_VAR 0 3
4157: PPUSH
4158: LD_INT 5
4160: PPUSH
4161: LD_VAR 0 5
4165: PPUSH
4166: LD_VAR 0 6
4170: PPUSH
4171: LD_INT 6
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 60
// resources := resources - 50 ;
4181: LD_ADDR_VAR 0 13
4185: PUSH
4186: LD_VAR 0 13
4190: PUSH
4191: LD_INT 50
4193: MINUS
4194: ST_TO_ADDR
// end else
4195: GO 4239
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4197: LD_VAR 0 3
4201: PPUSH
4202: LD_VAR 0 13
4206: PUSH
4207: LD_INT 10
4209: DIV
4210: PPUSH
4211: LD_VAR 0 5
4215: PPUSH
4216: LD_VAR 0 6
4220: PPUSH
4221: LD_INT 6
4223: PPUSH
4224: LD_INT 0
4226: PPUSH
4227: CALL_OW 60
// resources := 0 ;
4231: LD_ADDR_VAR 0 13
4235: PUSH
4236: LD_INT 0
4238: ST_TO_ADDR
// end ; until resources <= 0 ;
4239: LD_VAR 0 13
4243: PUSH
4244: LD_INT 0
4246: LESSEQUAL
4247: IFFALSE 4143
// end ;
4249: GO 4112
4251: POP
4252: POP
// end ; if Count ( mpBuildings ) then
4253: LD_EXP 17
4257: PPUSH
4258: CALL 12260 0 1
4262: IFFALSE 4340
// begin for j in mpBuildings [ pos ] do
4264: LD_ADDR_VAR 0 3
4268: PUSH
4269: LD_EXP 17
4273: PUSH
4274: LD_VAR 0 8
4278: ARRAY
4279: PUSH
4280: FOR_IN
4281: IFFALSE 4338
// begin bc_level := 0 ;
4283: LD_ADDR_OWVAR 43
4287: PUSH
4288: LD_INT 0
4290: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4291: LD_ADDR_OWVAR 42
4295: PUSH
4296: LD_VAR 0 3
4300: PUSH
4301: LD_INT 1
4303: ARRAY
4304: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4305: LD_VAR 0 3
4309: PUSH
4310: LD_INT 2
4312: ARRAY
4313: PPUSH
4314: LD_VAR 0 3
4318: PUSH
4319: LD_INT 3
4321: ARRAY
4322: PPUSH
4323: LD_VAR 0 3
4327: PUSH
4328: LD_INT 4
4330: ARRAY
4331: PPUSH
4332: CALL_OW 47
// end ;
4336: GO 4280
4338: POP
4339: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4340: LD_EXP 26
4344: IFFALSE 4364
4346: PUSH
4347: LD_INT 20
4349: PPUSH
4350: LD_VAR 0 7
4354: PPUSH
4355: CALL_OW 321
4359: PUSH
4360: LD_INT 1
4362: EQUAL
4363: AND
4364: IFFALSE 4381
// SetTech ( tech_SibDet , side , state_researched ) ;
4366: LD_INT 20
4368: PPUSH
4369: LD_VAR 0 7
4373: PPUSH
4374: LD_INT 2
4376: PPUSH
4377: CALL_OW 322
// if not mpArtifacts then
4381: LD_EXP 44
4385: NOT
4386: IFFALSE 4403
// SetTech ( tech_artifact , side , state_disabled ) ;
4388: LD_INT 24
4390: PPUSH
4391: LD_VAR 0 7
4395: PPUSH
4396: LD_INT 0
4398: PPUSH
4399: CALL_OW 322
// if mpSibBomb = 1 then
4403: LD_EXP 28
4407: PUSH
4408: LD_INT 1
4410: EQUAL
4411: IFFALSE 4430
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4413: LD_INT 25
4415: PPUSH
4416: LD_VAR 0 7
4420: PPUSH
4421: LD_INT 1
4423: PPUSH
4424: CALL_OW 322
// end else
4428: GO 4445
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4430: LD_INT 25
4432: PPUSH
4433: LD_VAR 0 7
4437: PPUSH
4438: LD_INT 0
4440: PPUSH
4441: CALL_OW 322
// end ; if mpVehicles then
4445: LD_EXP 36
4449: IFFALSE 4548
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4451: LD_ADDR_VAR 0 3
4455: PUSH
4456: LD_VAR 0 7
4460: PPUSH
4461: LD_VAR 0 9
4465: PPUSH
4466: LD_EXP 36
4470: PPUSH
4471: CALL 5672 0 3
4475: PUSH
4476: FOR_IN
4477: IFFALSE 4546
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4479: LD_VAR 0 3
4483: PPUSH
4484: LD_INT 0
4486: PPUSH
4487: LD_INT 5
4489: PPUSH
4490: CALL_OW 12
4494: PPUSH
4495: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4499: LD_VAR 0 3
4503: PPUSH
4504: LD_EXP 21
4508: PUSH
4509: LD_VAR 0 8
4513: ARRAY
4514: PUSH
4515: LD_INT 1
4517: ARRAY
4518: PPUSH
4519: LD_EXP 21
4523: PUSH
4524: LD_VAR 0 8
4528: ARRAY
4529: PUSH
4530: LD_INT 2
4532: ARRAY
4533: PPUSH
4534: LD_INT 12
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 50
// end ;
4544: GO 4476
4546: POP
4547: POP
// end ; uc_nation := nation ;
4548: LD_ADDR_OWVAR 21
4552: PUSH
4553: LD_VAR 0 9
4557: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4558: LD_ADDR_VAR 0 11
4562: PUSH
4563: LD_VAR 0 7
4567: PPUSH
4568: LD_VAR 0 9
4572: PPUSH
4573: LD_EXP 24
4577: PPUSH
4578: LD_EXP 25
4582: PPUSH
4583: CALL 5174 0 4
4587: ST_TO_ADDR
// for j in team do
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: LD_VAR 0 11
4597: PUSH
4598: FOR_IN
4599: IFFALSE 4648
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4601: LD_VAR 0 3
4605: PPUSH
4606: LD_EXP 21
4610: PUSH
4611: LD_VAR 0 8
4615: ARRAY
4616: PUSH
4617: LD_INT 1
4619: ARRAY
4620: PPUSH
4621: LD_EXP 21
4625: PUSH
4626: LD_VAR 0 8
4630: ARRAY
4631: PUSH
4632: LD_INT 2
4634: ARRAY
4635: PPUSH
4636: LD_INT 12
4638: PPUSH
4639: LD_INT 0
4641: PPUSH
4642: CALL_OW 50
4646: GO 4598
4648: POP
4649: POP
// if mpApemans then
4650: LD_EXP 30
4654: IFFALSE 4760
// begin for j := 1 to mpApemans do
4656: LD_ADDR_VAR 0 3
4660: PUSH
4661: DOUBLE
4662: LD_INT 1
4664: DEC
4665: ST_TO_ADDR
4666: LD_EXP 30
4670: PUSH
4671: FOR_TO
4672: IFFALSE 4758
// begin PrepareApeman ( - 5 ) ;
4674: LD_INT 5
4676: NEG
4677: PPUSH
4678: CALL 44319 0 1
// ape := CreateHuman ;
4682: LD_ADDR_VAR 0 10
4686: PUSH
4687: CALL_OW 44
4691: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4692: LD_ADDR_EXP 32
4696: PUSH
4697: LD_EXP 32
4701: PPUSH
4702: LD_VAR 0 8
4706: PPUSH
4707: LD_EXP 32
4711: PUSH
4712: LD_VAR 0 8
4716: ARRAY
4717: PPUSH
4718: LD_VAR 0 10
4722: PPUSH
4723: CALL 48192 0 2
4727: PPUSH
4728: CALL_OW 1
4732: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4733: LD_VAR 0 10
4737: PPUSH
4738: LD_EXP 31
4742: PUSH
4743: LD_VAR 0 8
4747: ARRAY
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: CALL_OW 49
// end ;
4756: GO 4671
4758: POP
4759: POP
// end ; end ;
4760: GO 3425
4762: POP
4763: POP
// if not mpTeamGame then
4764: LD_EXP 11
4768: NOT
4769: IFFALSE 4867
// begin for i := 1 to 8 do
4771: LD_ADDR_VAR 0 2
4775: PUSH
4776: DOUBLE
4777: LD_INT 1
4779: DEC
4780: ST_TO_ADDR
4781: LD_INT 8
4783: PUSH
4784: FOR_TO
4785: IFFALSE 4863
// for j := 1 to 8 do
4787: LD_ADDR_VAR 0 3
4791: PUSH
4792: DOUBLE
4793: LD_INT 1
4795: DEC
4796: ST_TO_ADDR
4797: LD_INT 8
4799: PUSH
4800: FOR_TO
4801: IFFALSE 4859
// if i <> j then
4803: LD_VAR 0 2
4807: PUSH
4808: LD_VAR 0 3
4812: NONEQUAL
4813: IFFALSE 4837
// SetAttitude ( i , j , att_neutral , true ) else
4815: LD_VAR 0 2
4819: PPUSH
4820: LD_VAR 0 3
4824: PPUSH
4825: LD_INT 0
4827: PPUSH
4828: LD_INT 1
4830: PPUSH
4831: CALL_OW 80
4835: GO 4857
// SetAttitude ( i , j , att_friend , true ) ;
4837: LD_VAR 0 2
4841: PPUSH
4842: LD_VAR 0 3
4846: PPUSH
4847: LD_INT 1
4849: PPUSH
4850: LD_INT 1
4852: PPUSH
4853: CALL_OW 80
4857: GO 4800
4859: POP
4860: POP
4861: GO 4784
4863: POP
4864: POP
// end else
4865: GO 5042
// begin if mpSharedVision then
4867: LD_EXP 16
4871: IFFALSE 4936
// begin for i in mpTeams do
4873: LD_ADDR_VAR 0 2
4877: PUSH
4878: LD_EXP 10
4882: PUSH
4883: FOR_IN
4884: IFFALSE 4934
// for j := 2 to i do
4886: LD_ADDR_VAR 0 3
4890: PUSH
4891: DOUBLE
4892: LD_INT 2
4894: DEC
4895: ST_TO_ADDR
4896: LD_VAR 0 2
4900: PUSH
4901: FOR_TO
4902: IFFALSE 4930
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4904: LD_VAR 0 2
4908: PUSH
4909: LD_VAR 0 3
4913: ARRAY
4914: PPUSH
4915: LD_VAR 0 2
4919: PUSH
4920: LD_INT 1
4922: ARRAY
4923: PPUSH
4924: CALL_OW 343
4928: GO 4901
4930: POP
4931: POP
4932: GO 4883
4934: POP
4935: POP
// end ; for i := 1 to 8 do
4936: LD_ADDR_VAR 0 2
4940: PUSH
4941: DOUBLE
4942: LD_INT 1
4944: DEC
4945: ST_TO_ADDR
4946: LD_INT 8
4948: PUSH
4949: FOR_TO
4950: IFFALSE 5040
// for j := 1 to 8 do
4952: LD_ADDR_VAR 0 3
4956: PUSH
4957: DOUBLE
4958: LD_INT 1
4960: DEC
4961: ST_TO_ADDR
4962: LD_INT 8
4964: PUSH
4965: FOR_TO
4966: IFFALSE 5036
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4968: LD_EXP 8
4972: PUSH
4973: LD_VAR 0 2
4977: ARRAY
4978: PUSH
4979: LD_EXP 8
4983: PUSH
4984: LD_VAR 0 3
4988: ARRAY
4989: EQUAL
4990: IFFALSE 5014
// SetAttitude ( i , j , att_friend , true ) else
4992: LD_VAR 0 2
4996: PPUSH
4997: LD_VAR 0 3
5001: PPUSH
5002: LD_INT 1
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: CALL_OW 80
5012: GO 5034
// SetAttitude ( i , j , att_enemy , true ) ;
5014: LD_VAR 0 2
5018: PPUSH
5019: LD_VAR 0 3
5023: PPUSH
5024: LD_INT 2
5026: PPUSH
5027: LD_INT 1
5029: PPUSH
5030: CALL_OW 80
5034: GO 4965
5036: POP
5037: POP
5038: GO 4949
5040: POP
5041: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5042: LD_ADDR_OWVAR 71
5046: PUSH
5047: LD_EXP 9
5051: PUSH
5052: LD_OWVAR 2
5056: ARRAY
5057: ST_TO_ADDR
// if IAmSpec then
5058: CALL_OW 531
5062: IFFALSE 5103
// begin FogOff ( true ) ;
5064: LD_INT 1
5066: PPUSH
5067: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5071: LD_EXP 29
5075: PUSH
5076: LD_INT 1
5078: ARRAY
5079: PUSH
5080: LD_INT 2
5082: DIV
5083: PPUSH
5084: LD_EXP 29
5088: PUSH
5089: LD_INT 2
5091: ARRAY
5092: PUSH
5093: LD_INT 2
5095: DIV
5096: PPUSH
5097: CALL_OW 86
// end else
5101: GO 5149
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5103: LD_EXP 21
5107: PUSH
5108: LD_EXP 7
5112: PUSH
5113: LD_OWVAR 2
5117: ARRAY
5118: ARRAY
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PPUSH
5124: LD_EXP 21
5128: PUSH
5129: LD_EXP 7
5133: PUSH
5134: LD_OWVAR 2
5138: ARRAY
5139: ARRAY
5140: PUSH
5141: LD_INT 2
5143: ARRAY
5144: PPUSH
5145: CALL_OW 86
// end ; BeginBuildUp ;
5149: CALL 6205 0 0
// enable ( mpActive ) ;
5153: LD_INT 100
5155: ENABLE_MARKED
// enable ( mpGameType ) ;
5156: LD_EXP 3
5160: ENABLE_MARKED
// mpGameActive := true ;
5161: LD_ADDR_EXP 39
5165: PUSH
5166: LD_INT 1
5168: ST_TO_ADDR
// end ;
5169: LD_VAR 0 1
5173: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5174: LD_INT 0
5176: PPUSH
5177: PPUSH
5178: PPUSH
5179: PPUSH
// result := [ ] ;
5180: LD_ADDR_VAR 0 5
5184: PUSH
5185: EMPTY
5186: ST_TO_ADDR
// class := class_soldier ;
5187: LD_ADDR_VAR 0 8
5191: PUSH
5192: LD_INT 1
5194: ST_TO_ADDR
// uc_side := side ;
5195: LD_ADDR_OWVAR 20
5199: PUSH
5200: LD_VAR 0 1
5204: ST_TO_ADDR
// uc_nation := nation ;
5205: LD_ADDR_OWVAR 21
5209: PUSH
5210: LD_VAR 0 2
5214: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5215: LD_ADDR_OWVAR 26
5219: PUSH
5220: LD_OWVAR 19
5224: PUSH
5225: LD_VAR 0 1
5229: ARRAY
5230: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5231: LD_INT 1
5233: PPUSH
5234: LD_INT 2
5236: PPUSH
5237: CALL_OW 12
5241: PPUSH
5242: LD_VAR 0 8
5246: PPUSH
5247: LD_VAR 0 4
5251: PUSH
5252: LD_INT 2
5254: PLUS
5255: PPUSH
5256: CALL_OW 380
// hc_importance := 105 ;
5260: LD_ADDR_OWVAR 32
5264: PUSH
5265: LD_INT 105
5267: ST_TO_ADDR
// if Multiplayer then
5268: LD_OWVAR 4
5272: IFFALSE 5312
// begin hc_gallery := MULTIAVATARS ;
5274: LD_ADDR_OWVAR 33
5278: PUSH
5279: LD_STRING MULTIAVATARS
5281: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5282: LD_ADDR_OWVAR 34
5286: PUSH
5287: LD_VAR 0 1
5291: PPUSH
5292: CALL_OW 525
5296: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5297: LD_ADDR_OWVAR 27
5301: PUSH
5302: LD_VAR 0 1
5306: PPUSH
5307: CALL_OW 526
5311: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5312: LD_ADDR_VAR 0 5
5316: PUSH
5317: LD_VAR 0 5
5321: PPUSH
5322: CALL_OW 44
5326: PPUSH
5327: CALL 48192 0 2
5331: ST_TO_ADDR
// if mpTeamPreset then
5332: LD_LOC 1
5336: IFFALSE 5432
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5338: LD_LOC 1
5342: PUSH
5343: LD_INT 1
5345: ARRAY
5346: PPUSH
5347: LD_VAR 0 5
5351: PUSH
5352: LD_VAR 0 5
5356: ARRAY
5357: PPUSH
5358: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5362: LD_VAR 0 5
5366: PUSH
5367: LD_VAR 0 5
5371: ARRAY
5372: PPUSH
5373: LD_INT 1
5375: PPUSH
5376: LD_LOC 1
5380: PUSH
5381: LD_INT 1
5383: ARRAY
5384: PPUSH
5385: LD_INT 1
5387: PPUSH
5388: CALL_OW 260
5392: PPUSH
5393: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5397: LD_VAR 0 5
5401: PUSH
5402: LD_VAR 0 5
5406: ARRAY
5407: PPUSH
5408: LD_INT 2
5410: PPUSH
5411: LD_LOC 1
5415: PUSH
5416: LD_INT 1
5418: ARRAY
5419: PPUSH
5420: LD_INT 2
5422: PPUSH
5423: CALL_OW 260
5427: PPUSH
5428: CALL_OW 239
// end ; InitHc_All ( ) ;
5432: CALL_OW 584
// class := 2 ;
5436: LD_ADDR_VAR 0 8
5440: PUSH
5441: LD_INT 2
5443: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5444: LD_ADDR_VAR 0 6
5448: PUSH
5449: DOUBLE
5450: LD_INT 1
5452: DEC
5453: ST_TO_ADDR
5454: LD_VAR 0 3
5458: PUSH
5459: LD_INT 1
5461: MINUS
5462: PUSH
5463: FOR_TO
5464: IFFALSE 5648
// begin PrepareHuman ( false , class , skill ) ;
5466: LD_INT 0
5468: PPUSH
5469: LD_VAR 0 8
5473: PPUSH
5474: LD_VAR 0 4
5478: PPUSH
5479: CALL_OW 380
// un := CreateHuman ;
5483: LD_ADDR_VAR 0 7
5487: PUSH
5488: CALL_OW 44
5492: ST_TO_ADDR
// result := Join ( result , un ) ;
5493: LD_ADDR_VAR 0 5
5497: PUSH
5498: LD_VAR 0 5
5502: PPUSH
5503: LD_VAR 0 7
5507: PPUSH
5508: CALL 48192 0 2
5512: ST_TO_ADDR
// if mpTeamPreset then
5513: LD_LOC 1
5517: IFFALSE 5613
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5519: LD_LOC 1
5523: PUSH
5524: LD_VAR 0 6
5528: PUSH
5529: LD_INT 1
5531: PLUS
5532: ARRAY
5533: PPUSH
5534: LD_VAR 0 7
5538: PPUSH
5539: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5543: LD_VAR 0 7
5547: PPUSH
5548: LD_INT 1
5550: PPUSH
5551: LD_LOC 1
5555: PUSH
5556: LD_VAR 0 6
5560: PUSH
5561: LD_INT 1
5563: PLUS
5564: ARRAY
5565: PPUSH
5566: LD_INT 1
5568: PPUSH
5569: CALL_OW 260
5573: PPUSH
5574: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5578: LD_VAR 0 7
5582: PPUSH
5583: LD_INT 2
5585: PPUSH
5586: LD_LOC 1
5590: PUSH
5591: LD_VAR 0 6
5595: PUSH
5596: LD_INT 1
5598: PLUS
5599: ARRAY
5600: PPUSH
5601: LD_INT 2
5603: PPUSH
5604: CALL_OW 260
5608: PPUSH
5609: CALL_OW 239
// end ; class := Inc ( class ) ;
5613: LD_ADDR_VAR 0 8
5617: PUSH
5618: LD_VAR 0 8
5622: PPUSH
5623: CALL 49565 0 1
5627: ST_TO_ADDR
// if class = 5 then
5628: LD_VAR 0 8
5632: PUSH
5633: LD_INT 5
5635: EQUAL
5636: IFFALSE 5646
// class := 1 ;
5638: LD_ADDR_VAR 0 8
5642: PUSH
5643: LD_INT 1
5645: ST_TO_ADDR
// end ;
5646: GO 5463
5648: POP
5649: POP
// if not mpTeamPreset then
5650: LD_LOC 1
5654: NOT
5655: IFFALSE 5667
// mpTeamPreset := result ;
5657: LD_ADDR_LOC 1
5661: PUSH
5662: LD_VAR 0 5
5666: ST_TO_ADDR
// end ;
5667: LD_VAR 0 5
5671: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5672: LD_INT 0
5674: PPUSH
5675: PPUSH
// result := [ ] ;
5676: LD_ADDR_VAR 0 4
5680: PUSH
5681: EMPTY
5682: ST_TO_ADDR
// if not vehicles then
5683: LD_VAR 0 3
5687: NOT
5688: IFFALSE 5692
// exit ;
5690: GO 5906
// for i := 1 to vehicles [ nation ] do
5692: LD_ADDR_VAR 0 5
5696: PUSH
5697: DOUBLE
5698: LD_INT 1
5700: DEC
5701: ST_TO_ADDR
5702: LD_VAR 0 3
5706: PUSH
5707: LD_VAR 0 2
5711: ARRAY
5712: PUSH
5713: FOR_TO
5714: IFFALSE 5904
// begin uc_side := side ;
5716: LD_ADDR_OWVAR 20
5720: PUSH
5721: LD_VAR 0 1
5725: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5726: LD_VAR 0 3
5730: PUSH
5731: LD_VAR 0 2
5735: ARRAY
5736: PUSH
5737: LD_VAR 0 5
5741: ARRAY
5742: PPUSH
5743: CALL 12260 0 1
5747: PUSH
5748: LD_INT 4
5750: GREATER
5751: IFFALSE 5781
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5753: LD_ADDR_OWVAR 21
5757: PUSH
5758: LD_VAR 0 3
5762: PUSH
5763: LD_VAR 0 2
5767: ARRAY
5768: PUSH
5769: LD_VAR 0 5
5773: ARRAY
5774: PUSH
5775: LD_INT 5
5777: ARRAY
5778: ST_TO_ADDR
5779: GO 5791
// uc_nation := nation ;
5781: LD_ADDR_OWVAR 21
5785: PUSH
5786: LD_VAR 0 2
5790: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5791: LD_VAR 0 3
5795: PUSH
5796: LD_VAR 0 2
5800: ARRAY
5801: PUSH
5802: LD_VAR 0 5
5806: ARRAY
5807: PUSH
5808: LD_INT 1
5810: ARRAY
5811: PPUSH
5812: LD_VAR 0 3
5816: PUSH
5817: LD_VAR 0 2
5821: ARRAY
5822: PUSH
5823: LD_VAR 0 5
5827: ARRAY
5828: PUSH
5829: LD_INT 2
5831: ARRAY
5832: PPUSH
5833: LD_VAR 0 3
5837: PUSH
5838: LD_VAR 0 2
5842: ARRAY
5843: PUSH
5844: LD_VAR 0 5
5848: ARRAY
5849: PUSH
5850: LD_INT 3
5852: ARRAY
5853: PPUSH
5854: LD_VAR 0 3
5858: PUSH
5859: LD_VAR 0 2
5863: ARRAY
5864: PUSH
5865: LD_VAR 0 5
5869: ARRAY
5870: PUSH
5871: LD_INT 4
5873: ARRAY
5874: PPUSH
5875: LD_INT 80
5877: PPUSH
5878: CALL 15022 0 5
// result := Join ( result , CreateVehicle ) ;
5882: LD_ADDR_VAR 0 4
5886: PUSH
5887: LD_VAR 0 4
5891: PPUSH
5892: CALL_OW 45
5896: PPUSH
5897: CALL 48192 0 2
5901: ST_TO_ADDR
// end ;
5902: GO 5713
5904: POP
5905: POP
// end ;
5906: LD_VAR 0 4
5910: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5911: LD_INT 0
5913: PPUSH
5914: PPUSH
// for i in mpBattleFlags do
5915: LD_ADDR_VAR 0 3
5919: PUSH
5920: LD_EXP 23
5924: PUSH
5925: FOR_IN
5926: IFFALSE 6003
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5928: LD_VAR 0 3
5932: PPUSH
5933: LD_INT 1
5935: PUSH
5936: LD_VAR 0 1
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 2
5947: PUSH
5948: LD_VAR 0 1
5952: PUSH
5953: LD_REAL  7.00000000000000E-0001
5956: MUL
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: LD_INT 3
5964: PUSH
5965: LD_VAR 0 1
5969: PUSH
5970: LD_REAL  4.00000000000000E-0001
5973: MUL
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: LD_INT 20
5981: PUSH
5982: LD_VAR 0 1
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: PPUSH
5997: CALL_OW 423
6001: GO 5925
6003: POP
6004: POP
// end ;
6005: LD_VAR 0 2
6009: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6010: LD_INT 100
6012: IFFALSE 6107
6014: GO 6016
6016: DISABLE
6017: LD_INT 0
6019: PPUSH
6020: PPUSH
// begin if mpBattleFlag <= 0 then
6021: LD_EXP 22
6025: PUSH
6026: LD_INT 0
6028: LESSEQUAL
6029: IFFALSE 6033
// exit ;
6031: GO 6107
// strength := 100 ;
6033: LD_ADDR_VAR 0 2
6037: PUSH
6038: LD_INT 100
6040: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6041: LD_EXP 22
6045: PPUSH
6046: CALL_OW 67
// strength := Dec ( strength ) ;
6050: LD_ADDR_VAR 0 2
6054: PUSH
6055: LD_VAR 0 2
6059: PPUSH
6060: CALL 49587 0 1
6064: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6065: LD_VAR 0 2
6069: PPUSH
6070: CALL 5911 0 1
// until not strength ;
6074: LD_VAR 0 2
6078: NOT
6079: IFFALSE 6041
// for i in mpBattleFlags do
6081: LD_ADDR_VAR 0 1
6085: PUSH
6086: LD_EXP 23
6090: PUSH
6091: FOR_IN
6092: IFFALSE 6105
// KillBattleFlag ( i ) ;
6094: LD_VAR 0 1
6098: PPUSH
6099: CALL_OW 419
6103: GO 6091
6105: POP
6106: POP
// end ;
6107: PPOPN 2
6109: END
// every 0 0$1 marked mpActive do var side , tmp ;
6110: GO 6112
6112: DISABLE
6113: LD_INT 0
6115: PPUSH
6116: PPUSH
// begin if mpSibBomb <= 1 then
6117: LD_EXP 28
6121: PUSH
6122: LD_INT 1
6124: LESSEQUAL
6125: IFFALSE 6129
// exit ;
6127: GO 6202
// tmp := mpSibBomb ;
6129: LD_ADDR_VAR 0 2
6133: PUSH
6134: LD_EXP 28
6138: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6139: LD_INT 35
6141: PPUSH
6142: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6146: LD_ADDR_VAR 0 2
6150: PUSH
6151: LD_VAR 0 2
6155: PUSH
6156: LD_INT 35
6158: MINUS
6159: ST_TO_ADDR
// until not tmp ;
6160: LD_VAR 0 2
6164: NOT
6165: IFFALSE 6139
// for side := 1 to 8 do
6167: LD_ADDR_VAR 0 1
6171: PUSH
6172: DOUBLE
6173: LD_INT 1
6175: DEC
6176: ST_TO_ADDR
6177: LD_INT 8
6179: PUSH
6180: FOR_TO
6181: IFFALSE 6200
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6183: LD_INT 25
6185: PPUSH
6186: LD_VAR 0 1
6190: PPUSH
6191: LD_INT 1
6193: PPUSH
6194: CALL_OW 322
6198: GO 6180
6200: POP
6201: POP
// end ;
6202: PPOPN 2
6204: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6205: LD_INT 0
6207: PPUSH
6208: PPUSH
6209: PPUSH
// mpBuildUpTimeDelay := 0 ;
6210: LD_ADDR_EXP 46
6214: PUSH
6215: LD_INT 0
6217: ST_TO_ADDR
// if not mpBuildUpTime then
6218: LD_EXP 20
6222: NOT
6223: IFFALSE 6227
// exit ;
6225: GO 6416
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6227: LD_ADDR_EXP 46
6231: PUSH
6232: LD_INT 8400
6234: PUSH
6235: LD_INT 2100
6237: PUSH
6238: LD_EXP 20
6242: MUL
6243: PLUS
6244: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6245: LD_ADDR_EXP 47
6249: PUSH
6250: LD_INT 1
6252: ST_TO_ADDR
// for i := 1 to 8 do
6253: LD_ADDR_VAR 0 2
6257: PUSH
6258: DOUBLE
6259: LD_INT 1
6261: DEC
6262: ST_TO_ADDR
6263: LD_INT 8
6265: PUSH
6266: FOR_TO
6267: IFFALSE 6414
// if mpSidePositions [ i ] then
6269: LD_EXP 7
6273: PUSH
6274: LD_VAR 0 2
6278: ARRAY
6279: IFFALSE 6412
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6281: LD_EXP 19
6285: PUSH
6286: LD_EXP 7
6290: PUSH
6291: LD_VAR 0 2
6295: ARRAY
6296: ARRAY
6297: PPUSH
6298: LD_INT 5
6300: PPUSH
6301: CALL_OW 424
// for j := 1 to 8 do
6305: LD_ADDR_VAR 0 3
6309: PUSH
6310: DOUBLE
6311: LD_INT 1
6313: DEC
6314: ST_TO_ADDR
6315: LD_INT 8
6317: PUSH
6318: FOR_TO
6319: IFFALSE 6410
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6321: LD_EXP 7
6325: PUSH
6326: LD_VAR 0 3
6330: ARRAY
6331: IFFALSE 6380
6333: PUSH
6334: LD_EXP 8
6338: PUSH
6339: LD_VAR 0 2
6343: ARRAY
6344: PUSH
6345: LD_EXP 8
6349: PUSH
6350: LD_VAR 0 3
6354: ARRAY
6355: NONEQUAL
6356: IFTRUE 6379
6358: PUSH
6359: LD_EXP 11
6363: NOT
6364: IFFALSE 6378
6366: PUSH
6367: LD_VAR 0 2
6371: PUSH
6372: LD_VAR 0 3
6376: NONEQUAL
6377: AND
6378: OR
6379: AND
6380: IFFALSE 6408
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6382: LD_VAR 0 3
6386: PPUSH
6387: LD_EXP 19
6391: PUSH
6392: LD_EXP 7
6396: PUSH
6397: LD_VAR 0 2
6401: ARRAY
6402: ARRAY
6403: PPUSH
6404: CALL_OW 333
6408: GO 6318
6410: POP
6411: POP
// end ;
6412: GO 6266
6414: POP
6415: POP
// end ;
6416: LD_VAR 0 1
6420: RET
// function EndBuildUp ; var i , j ; begin
6421: LD_INT 0
6423: PPUSH
6424: PPUSH
6425: PPUSH
// mpBuildUpTimeActive := false ;
6426: LD_ADDR_EXP 47
6430: PUSH
6431: LD_INT 0
6433: ST_TO_ADDR
// for i := 1 to 8 do
6434: LD_ADDR_VAR 0 2
6438: PUSH
6439: DOUBLE
6440: LD_INT 1
6442: DEC
6443: ST_TO_ADDR
6444: LD_INT 8
6446: PUSH
6447: FOR_TO
6448: IFFALSE 6595
// if mpSidePositions [ i ] then
6450: LD_EXP 7
6454: PUSH
6455: LD_VAR 0 2
6459: ARRAY
6460: IFFALSE 6593
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6462: LD_EXP 19
6466: PUSH
6467: LD_EXP 7
6471: PUSH
6472: LD_VAR 0 2
6476: ARRAY
6477: ARRAY
6478: PPUSH
6479: LD_INT 0
6481: PPUSH
6482: CALL_OW 424
// for j := 1 to 8 do
6486: LD_ADDR_VAR 0 3
6490: PUSH
6491: DOUBLE
6492: LD_INT 1
6494: DEC
6495: ST_TO_ADDR
6496: LD_INT 8
6498: PUSH
6499: FOR_TO
6500: IFFALSE 6591
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6502: LD_EXP 7
6506: PUSH
6507: LD_VAR 0 3
6511: ARRAY
6512: IFFALSE 6561
6514: PUSH
6515: LD_EXP 8
6519: PUSH
6520: LD_VAR 0 2
6524: ARRAY
6525: PUSH
6526: LD_EXP 8
6530: PUSH
6531: LD_VAR 0 3
6535: ARRAY
6536: NONEQUAL
6537: IFTRUE 6560
6539: PUSH
6540: LD_EXP 11
6544: NOT
6545: IFFALSE 6559
6547: PUSH
6548: LD_VAR 0 2
6552: PUSH
6553: LD_VAR 0 3
6557: NONEQUAL
6558: AND
6559: OR
6560: AND
6561: IFFALSE 6589
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6563: LD_VAR 0 3
6567: PPUSH
6568: LD_EXP 19
6572: PUSH
6573: LD_EXP 7
6577: PUSH
6578: LD_VAR 0 2
6582: ARRAY
6583: ARRAY
6584: PPUSH
6585: CALL_OW 334
6589: GO 6499
6591: POP
6592: POP
// end ;
6593: GO 6447
6595: POP
6596: POP
// end ;
6597: LD_VAR 0 1
6601: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6602: LD_EXP 47
6606: IFFALSE 6785
6608: GO 6610
6610: DISABLE
6611: LD_INT 0
6613: PPUSH
6614: PPUSH
// begin for i := 1 to 8 do
6615: LD_ADDR_VAR 0 1
6619: PUSH
6620: DOUBLE
6621: LD_INT 1
6623: DEC
6624: ST_TO_ADDR
6625: LD_INT 8
6627: PUSH
6628: FOR_TO
6629: IFFALSE 6782
// if mpSidePositions [ i ] then
6631: LD_EXP 7
6635: PUSH
6636: LD_VAR 0 1
6640: ARRAY
6641: IFFALSE 6780
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6643: LD_ADDR_VAR 0 2
6647: PUSH
6648: LD_EXP 19
6652: PUSH
6653: LD_EXP 7
6657: PUSH
6658: LD_VAR 0 1
6662: ARRAY
6663: ARRAY
6664: PPUSH
6665: LD_INT 2
6667: PUSH
6668: LD_INT 21
6670: PUSH
6671: LD_INT 1
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: LD_INT 21
6680: PUSH
6681: LD_INT 2
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 22
6695: PUSH
6696: LD_OWVAR 2
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PPUSH
6709: CALL_OW 70
6713: PUSH
6714: FOR_IN
6715: IFFALSE 6778
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6717: LD_EXP 8
6721: PUSH
6722: LD_VAR 0 1
6726: ARRAY
6727: PUSH
6728: LD_EXP 8
6732: PUSH
6733: LD_OWVAR 2
6737: ARRAY
6738: NONEQUAL
6739: IFTRUE 6762
6741: PUSH
6742: LD_EXP 11
6746: NOT
6747: IFFALSE 6761
6749: PUSH
6750: LD_VAR 0 1
6754: PUSH
6755: LD_OWVAR 2
6759: NONEQUAL
6760: AND
6761: OR
6762: IFFALSE 6776
// ComMoveToArea ( un , BuildUpEscape ) ;
6764: LD_VAR 0 2
6768: PPUSH
6769: LD_INT 14
6771: PPUSH
6772: CALL_OW 113
6776: GO 6714
6778: POP
6779: POP
6780: GO 6628
6782: POP
6783: POP
// enable ;
6784: ENABLE
// end ;
6785: PPOPN 2
6787: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6788: LD_EXP 20
6792: IFFALSE 6842
6794: GO 6796
6796: DISABLE
6797: LD_INT 0
6799: PPUSH
// begin tmp := mpBuildUpTime ;
6800: LD_ADDR_VAR 0 1
6804: PUSH
6805: LD_EXP 20
6809: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6810: LD_INT 35
6812: PPUSH
6813: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6817: LD_ADDR_VAR 0 1
6821: PUSH
6822: LD_VAR 0 1
6826: PUSH
6827: LD_INT 35
6829: MINUS
6830: ST_TO_ADDR
// until not tmp ;
6831: LD_VAR 0 1
6835: NOT
6836: IFFALSE 6810
// EndBuildUp ;
6838: CALL 6421 0 0
// end ;
6842: PPOPN 1
6844: END
// every 0 0$1 trigger mpActive marked mpWin do
6845: LD_INT 100
6847: IFFALSE 6881
6849: GO 6851
6851: DISABLE
// begin if IAmServer then
6852: CALL_OW 518
6856: IFFALSE 6865
// wait ( 0 0$3 ) ;
6858: LD_INT 105
6860: PPUSH
6861: CALL_OW 67
// if Multiplayer then
6865: LD_OWVAR 4
6869: IFFALSE 6877
// YouWinInMultiplayer else
6871: CALL_OW 106
6875: GO 6881
// YouWin ;
6877: CALL_OW 103
// end ;
6881: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6882: LD_INT 0
6884: PPUSH
// result := false ;
6885: LD_ADDR_VAR 0 3
6889: PUSH
6890: LD_INT 0
6892: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6893: LD_VAR 0 1
6897: PUSH
6898: LD_INT 1
6900: DOUBLE
6901: EQUAL
6902: IFTRUE 6912
6904: LD_INT 5
6906: DOUBLE
6907: EQUAL
6908: IFTRUE 6912
6910: GO 6985
6912: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6913: LD_ADDR_VAR 0 3
6917: PUSH
6918: LD_INT 22
6920: PUSH
6921: LD_VAR 0 2
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 2
6932: PUSH
6933: LD_INT 21
6935: PUSH
6936: LD_INT 1
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 33
6945: PUSH
6946: LD_INT 3
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 33
6955: PUSH
6956: LD_INT 5
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PPUSH
6973: CALL_OW 69
6977: PPUSH
6978: CALL 12260 0 1
6982: ST_TO_ADDR
// end ; GameTypeSurvival :
6983: GO 7224
6985: LD_INT 2
6987: DOUBLE
6988: EQUAL
6989: IFTRUE 6993
6991: GO 7123
6993: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6994: LD_ADDR_VAR 0 3
6998: PUSH
6999: LD_INT 22
7001: PUSH
7002: LD_VAR 0 2
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 2
7013: PUSH
7014: LD_INT 30
7016: PUSH
7017: LD_INT 0
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 30
7026: PUSH
7027: LD_INT 1
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PPUSH
7043: CALL_OW 69
7047: PPUSH
7048: CALL 12260 0 1
7052: IFFALSE 7120
7054: PUSH
7055: LD_INT 22
7057: PUSH
7058: LD_VAR 0 2
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 2
7069: PUSH
7070: LD_INT 21
7072: PUSH
7073: LD_INT 1
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 33
7082: PUSH
7083: LD_INT 3
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 33
7092: PUSH
7093: LD_INT 5
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PPUSH
7110: CALL_OW 69
7114: PPUSH
7115: CALL 12260 0 1
7119: AND
7120: ST_TO_ADDR
// end ; GameTypeKing :
7121: GO 7224
7123: LD_INT 3
7125: DOUBLE
7126: EQUAL
7127: IFTRUE 7131
7129: GO 7223
7131: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_INT 22
7139: PUSH
7140: LD_VAR 0 2
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 2
7151: PUSH
7152: LD_INT 21
7154: PUSH
7155: LD_INT 1
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 33
7164: PUSH
7165: LD_INT 3
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 33
7174: PUSH
7175: LD_INT 5
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PPUSH
7192: CALL_OW 69
7196: PPUSH
7197: CALL 12260 0 1
7201: IFFALSE 7220
7203: PUSH
7204: LD_VAR 0 2
7208: PPUSH
7209: CALL 60156 0 1
7213: PUSH
7214: LD_EXP 35
7218: LESS
7219: AND
7220: ST_TO_ADDR
// end ; end ;
7221: GO 7224
7223: POP
// end ;
7224: LD_VAR 0 3
7228: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7229: LD_INT 100
7231: IFFALSE 7461
7233: GO 7235
7235: DISABLE
7236: LD_INT 0
7238: PPUSH
7239: PPUSH
// begin if Multiplayer then
7240: LD_OWVAR 4
7244: IFFALSE 7252
// SetPlayerSpectator ( ) else
7246: CALL_OW 572
7250: GO 7261
// FogOff ( your_side ) ;
7252: LD_OWVAR 2
7256: PPUSH
7257: CALL_OW 344
// repeat gameIsOn := false ;
7261: LD_ADDR_VAR 0 1
7265: PUSH
7266: LD_INT 0
7268: ST_TO_ADDR
// for i := 1 to 8 do
7269: LD_ADDR_VAR 0 2
7273: PUSH
7274: DOUBLE
7275: LD_INT 1
7277: DEC
7278: ST_TO_ADDR
7279: LD_INT 8
7281: PUSH
7282: FOR_TO
7283: IFFALSE 7413
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7285: LD_EXP 7
7289: PUSH
7290: LD_VAR 0 2
7294: ARRAY
7295: IFFALSE 7308
7297: PUSH
7298: LD_VAR 0 2
7302: PPUSH
7303: CALL_OW 108
7307: AND
7308: IFFALSE 7322
7310: PUSH
7311: LD_VAR 0 2
7315: PUSH
7316: LD_OWVAR 2
7320: NONEQUAL
7321: AND
7322: IFFALSE 7411
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7324: LD_EXP 8
7328: PUSH
7329: LD_VAR 0 2
7333: ARRAY
7334: NOT
7335: IFTRUE 7383
7337: PUSH
7338: LD_EXP 8
7342: PUSH
7343: LD_VAR 0 2
7347: ARRAY
7348: PUSH
7349: LD_EXP 8
7353: PUSH
7354: LD_OWVAR 2
7358: ARRAY
7359: NONEQUAL
7360: IFFALSE 7382
7362: PUSH
7363: LD_OWVAR 2
7367: PPUSH
7368: LD_VAR 0 2
7372: PPUSH
7373: CALL_OW 81
7377: PUSH
7378: LD_INT 1
7380: NONEQUAL
7381: AND
7382: OR
7383: IFFALSE 7411
// if HasPowerByGameType ( mpGameType , i ) then
7385: LD_EXP 3
7389: PPUSH
7390: LD_VAR 0 2
7394: PPUSH
7395: CALL 6882 0 2
7399: IFFALSE 7411
// begin gameIsOn := true ;
7401: LD_ADDR_VAR 0 1
7405: PUSH
7406: LD_INT 1
7408: ST_TO_ADDR
// break ;
7409: GO 7413
// end ;
7411: GO 7282
7413: POP
7414: POP
// wait ( 100 ) ;
7415: LD_INT 100
7417: PPUSH
7418: CALL_OW 67
// until not gameIsOn ;
7422: LD_VAR 0 1
7426: NOT
7427: IFFALSE 7261
// if IAmServer then
7429: CALL_OW 518
7433: IFFALSE 7442
// wait ( 0 0$3 ) ;
7435: LD_INT 105
7437: PPUSH
7438: CALL_OW 67
// if Multiplayer then
7442: LD_OWVAR 4
7446: IFFALSE 7454
// YouLostInMultiplayer else
7448: CALL_OW 107
7452: GO 7461
// YouLost (  ) ;
7454: LD_STRING 
7456: PPUSH
7457: CALL_OW 104
// end ;
7461: PPOPN 2
7463: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7464: LD_EXP 33
7468: IFFALSE 7852
7470: GO 7472
7472: DISABLE
7473: LD_INT 0
7475: PPUSH
7476: PPUSH
7477: PPUSH
7478: PPUSH
7479: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7480: LD_ADDR_VAR 0 5
7484: PUSH
7485: LD_INT 1
7487: PUSH
7488: LD_INT 2
7490: PUSH
7491: LD_INT 3
7493: PUSH
7494: LD_INT 4
7496: PUSH
7497: LD_INT 5
7499: PUSH
7500: LD_INT 6
7502: PUSH
7503: LD_INT 7
7505: PUSH
7506: LD_INT 8
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7519: LD_INT 350
7521: PPUSH
7522: CALL_OW 67
// for i := 1 to 8 do
7526: LD_ADDR_VAR 0 1
7530: PUSH
7531: DOUBLE
7532: LD_INT 1
7534: DEC
7535: ST_TO_ADDR
7536: LD_INT 8
7538: PUSH
7539: FOR_TO
7540: IFFALSE 7822
// begin j := sides [ i ] ;
7542: LD_ADDR_VAR 0 2
7546: PUSH
7547: LD_VAR 0 5
7551: PUSH
7552: LD_VAR 0 1
7556: ARRAY
7557: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7558: LD_EXP 40
7562: PUSH
7563: LD_VAR 0 2
7567: ARRAY
7568: PPUSH
7569: CALL 12260 0 1
7573: IFFALSE 7586
7575: PUSH
7576: LD_VAR 0 2
7580: PPUSH
7581: CALL_OW 108
7585: AND
7586: IFFALSE 7604
7588: PUSH
7589: LD_EXP 3
7593: PPUSH
7594: LD_VAR 0 2
7598: PPUSH
7599: CALL 6882 0 2
7603: AND
7604: IFFALSE 7820
// begin wait ( mpRespawn div 2 ) ;
7606: LD_EXP 33
7610: PUSH
7611: LD_INT 2
7613: DIV
7614: PPUSH
7615: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7619: LD_ADDR_VAR 0 3
7623: PUSH
7624: LD_INT 22
7626: PUSH
7627: LD_VAR 0 2
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 50
7638: PUSH
7639: EMPTY
7640: LIST
7641: PUSH
7642: LD_INT 2
7644: PUSH
7645: LD_INT 30
7647: PUSH
7648: LD_INT 0
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 30
7657: PUSH
7658: LD_INT 1
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: LIST
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: LIST
7674: PPUSH
7675: CALL_OW 69
7679: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7680: LD_VAR 0 3
7684: NOT
7685: IFTRUE 7699
7687: PUSH
7688: LD_VAR 0 2
7692: PPUSH
7693: CALL_OW 108
7697: NOT
7698: OR
7699: IFTRUE 7718
7701: PUSH
7702: LD_EXP 3
7706: PPUSH
7707: LD_VAR 0 2
7711: PPUSH
7712: CALL 6882 0 2
7716: NOT
7717: OR
7718: IFFALSE 7722
// continue ;
7720: GO 7539
// spawn := tmp [ 1 ] ;
7722: LD_ADDR_VAR 0 4
7726: PUSH
7727: LD_VAR 0 3
7731: PUSH
7732: LD_INT 1
7734: ARRAY
7735: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7736: LD_EXP 40
7740: PUSH
7741: LD_VAR 0 2
7745: ARRAY
7746: PUSH
7747: LD_INT 1
7749: ARRAY
7750: PPUSH
7751: LD_VAR 0 4
7755: PPUSH
7756: CALL_OW 250
7760: PPUSH
7761: LD_VAR 0 4
7765: PPUSH
7766: CALL_OW 251
7770: PPUSH
7771: LD_INT 32
7773: PPUSH
7774: LD_INT 1
7776: PPUSH
7777: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7781: LD_ADDR_EXP 40
7785: PUSH
7786: LD_EXP 40
7790: PPUSH
7791: LD_VAR 0 2
7795: PPUSH
7796: LD_EXP 40
7800: PUSH
7801: LD_VAR 0 2
7805: ARRAY
7806: PPUSH
7807: LD_INT 1
7809: PPUSH
7810: CALL_OW 3
7814: PPUSH
7815: CALL_OW 1
7819: ST_TO_ADDR
// end ; end ;
7820: GO 7539
7822: POP
7823: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7824: LD_ADDR_VAR 0 5
7828: PUSH
7829: LD_VAR 0 5
7833: PPUSH
7834: LD_INT 1
7836: PPUSH
7837: LD_INT 8
7839: PPUSH
7840: LD_INT 1
7842: PPUSH
7843: CALL 14552 0 4
7847: ST_TO_ADDR
// until false ;
7848: LD_INT 0
7850: IFFALSE 7519
// end ;
7852: PPOPN 5
7854: END
// every 0 0$1 marked mpActive do
7855: GO 7857
7857: DISABLE
// begin enable ;
7858: ENABLE
// if not mpDisplayStrings then
7859: LD_EXP 38
7863: NOT
7864: IFFALSE 7875
// begin display_strings := [ ] ;
7866: LD_ADDR_OWVAR 47
7870: PUSH
7871: EMPTY
7872: ST_TO_ADDR
// exit ;
7873: GO 7885
// end ; display_strings := mpDisplayStrings ;
7875: LD_ADDR_OWVAR 47
7879: PUSH
7880: LD_EXP 38
7884: ST_TO_ADDR
// end ; end_of_file
7885: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7886: LD_INT 0
7888: PPUSH
7889: PPUSH
7890: PPUSH
7891: PPUSH
7892: PPUSH
7893: PPUSH
7894: PPUSH
7895: PPUSH
7896: PPUSH
// if GetType ( un ) = unit_vehicle then
7897: LD_VAR 0 1
7901: PPUSH
7902: CALL_OW 247
7906: PUSH
7907: LD_INT 2
7909: EQUAL
7910: IFFALSE 7914
// exit ;
7912: GO 8588
// side := GetSide ( un ) ;
7914: LD_ADDR_VAR 0 9
7918: PUSH
7919: LD_VAR 0 1
7923: PPUSH
7924: CALL_OW 255
7928: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7929: LD_EXP 3
7933: PUSH
7934: LD_INT 2
7936: EQUAL
7937: IFFALSE 8031
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7939: LD_VAR 0 1
7943: PPUSH
7944: CALL_OW 266
7948: PUSH
7949: LD_INT 0
7951: PUSH
7952: LD_INT 1
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: IN
7959: IFFALSE 8031
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
7961: LD_ADDR_VAR 0 3
7965: PUSH
7966: LD_INT 22
7968: PUSH
7969: LD_VAR 0 9
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 2
7980: PUSH
7981: LD_INT 21
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 33
7993: PUSH
7994: LD_INT 3
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: LIST
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: PPUSH
8010: CALL_OW 69
8014: PUSH
8015: FOR_IN
8016: IFFALSE 8029
// KillUnit ( i ) ;
8018: LD_VAR 0 3
8022: PPUSH
8023: CALL_OW 66
8027: GO 8015
8029: POP
8030: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8031: LD_VAR 0 1
8035: PPUSH
8036: CALL_OW 257
8040: PUSH
8041: LD_INT 12
8043: PUSH
8044: LD_INT 17
8046: PUSH
8047: LD_INT 15
8049: PUSH
8050: LD_INT 16
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: IN
8059: IFTRUE 8076
8061: PUSH
8062: LD_VAR 0 1
8066: PPUSH
8067: CALL_OW 263
8071: PUSH
8072: LD_INT 5
8074: EQUAL
8075: OR
8076: IFFALSE 8313
// begin tag := 0 ;
8078: LD_ADDR_VAR 0 5
8082: PUSH
8083: LD_INT 0
8085: ST_TO_ADDR
// for i := 1 to 8 do
8086: LD_ADDR_VAR 0 3
8090: PUSH
8091: DOUBLE
8092: LD_INT 1
8094: DEC
8095: ST_TO_ADDR
8096: LD_INT 8
8098: PUSH
8099: FOR_TO
8100: IFFALSE 8134
// if un in mpApePosIndex [ i ] then
8102: LD_VAR 0 1
8106: PUSH
8107: LD_EXP 32
8111: PUSH
8112: LD_VAR 0 3
8116: ARRAY
8117: IN
8118: IFFALSE 8132
// begin tag := i ;
8120: LD_ADDR_VAR 0 5
8124: PUSH
8125: LD_VAR 0 3
8129: ST_TO_ADDR
// break ;
8130: GO 8134
// end ;
8132: GO 8099
8134: POP
8135: POP
// if not tag then
8136: LD_VAR 0 5
8140: NOT
8141: IFFALSE 8145
// exit ;
8143: GO 8588
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8145: LD_ADDR_VAR 0 7
8149: PUSH
8150: LD_EXP 31
8154: PUSH
8155: LD_EXP 7
8159: PUSH
8160: LD_VAR 0 5
8164: ARRAY
8165: ARRAY
8166: ST_TO_ADDR
// if not area then
8167: LD_VAR 0 7
8171: NOT
8172: IFFALSE 8176
// exit ;
8174: GO 8588
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8176: LD_INT 14700
8178: PUSH
8179: LD_VAR 0 1
8183: PUSH
8184: LD_INT 5
8186: MOD
8187: PUSH
8188: LD_INT 1
8190: PLUS
8191: PUSH
8192: LD_INT 700
8194: MUL
8195: PLUS
8196: PPUSH
8197: CALL_OW 67
// repeat wait ( 10 ) ;
8201: LD_INT 10
8203: PPUSH
8204: CALL_OW 67
// until not mpBlockRespThread ;
8208: LD_EXP 45
8212: NOT
8213: IFFALSE 8201
// mpBlockRespThread := true ;
8215: LD_ADDR_EXP 45
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8223: LD_INT 0
8225: PPUSH
8226: CALL 44319 0 1
// ape := CreateHuman ;
8230: LD_ADDR_VAR 0 4
8234: PUSH
8235: CALL_OW 44
8239: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8240: LD_ADDR_EXP 32
8244: PUSH
8245: LD_EXP 32
8249: PPUSH
8250: LD_VAR 0 5
8254: PPUSH
8255: LD_EXP 32
8259: PUSH
8260: LD_VAR 0 5
8264: ARRAY
8265: PPUSH
8266: LD_VAR 0 4
8270: PPUSH
8271: CALL 48192 0 2
8275: PPUSH
8276: CALL_OW 1
8280: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8281: LD_VAR 0 4
8285: PPUSH
8286: LD_VAR 0 7
8290: PPUSH
8291: LD_INT 0
8293: PPUSH
8294: CALL_OW 49
// wait ( 10 ) ;
8298: LD_INT 10
8300: PPUSH
8301: CALL_OW 67
// mpBlockRespThread := false ;
8305: LD_ADDR_EXP 45
8309: PUSH
8310: LD_INT 0
8312: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8313: LD_VAR 0 1
8317: PPUSH
8318: CALL_OW 247
8322: PUSH
8323: LD_INT 1
8325: EQUAL
8326: IFFALSE 8343
8328: PUSH
8329: LD_VAR 0 1
8333: PPUSH
8334: CALL_OW 248
8338: PUSH
8339: LD_INT 0
8341: GREATER
8342: AND
8343: IFFALSE 8588
// begin if not mpRespawn then
8345: LD_EXP 33
8349: NOT
8350: IFFALSE 8354
// exit ;
8352: GO 8588
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8354: LD_VAR 0 9
8358: PPUSH
8359: CALL_OW 108
8363: NOT
8364: IFFALSE 8383
8366: PUSH
8367: LD_EXP 3
8371: PPUSH
8372: LD_VAR 0 9
8376: PPUSH
8377: CALL 6882 0 2
8381: NOT
8382: AND
8383: IFFALSE 8387
// exit ;
8385: GO 8588
// side := GetSide ( un ) ;
8387: LD_ADDR_VAR 0 9
8391: PUSH
8392: LD_VAR 0 1
8396: PPUSH
8397: CALL_OW 255
8401: ST_TO_ADDR
// nation := GetNation ( un ) ;
8402: LD_ADDR_VAR 0 8
8406: PUSH
8407: LD_VAR 0 1
8411: PPUSH
8412: CALL_OW 248
8416: ST_TO_ADDR
// class := GetClass ( un ) ;
8417: LD_ADDR_VAR 0 6
8421: PUSH
8422: LD_VAR 0 1
8426: PPUSH
8427: CALL_OW 257
8431: ST_TO_ADDR
// if class > 4 then
8432: LD_VAR 0 6
8436: PUSH
8437: LD_INT 4
8439: GREATER
8440: IFFALSE 8450
// class := 1 ;
8442: LD_ADDR_VAR 0 6
8446: PUSH
8447: LD_INT 1
8449: ST_TO_ADDR
// repeat wait ( 10 ) ;
8450: LD_INT 10
8452: PPUSH
8453: CALL_OW 67
// until not mpBlockRespThread ;
8457: LD_EXP 45
8461: NOT
8462: IFFALSE 8450
// mpBlockRespThread := true ;
8464: LD_ADDR_EXP 45
8468: PUSH
8469: LD_INT 1
8471: ST_TO_ADDR
// uc_side := side ;
8472: LD_ADDR_OWVAR 20
8476: PUSH
8477: LD_VAR 0 9
8481: ST_TO_ADDR
// uc_nation := nation ;
8482: LD_ADDR_OWVAR 21
8486: PUSH
8487: LD_VAR 0 8
8491: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8492: LD_INT 0
8494: PPUSH
8495: LD_VAR 0 6
8499: PPUSH
8500: LD_INT 2
8502: PPUSH
8503: CALL_OW 380
// un := CreateHuman ;
8507: LD_ADDR_VAR 0 1
8511: PUSH
8512: CALL_OW 44
8516: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8517: LD_ADDR_EXP 40
8521: PUSH
8522: LD_EXP 40
8526: PPUSH
8527: LD_VAR 0 9
8531: PPUSH
8532: LD_EXP 40
8536: PUSH
8537: LD_VAR 0 9
8541: ARRAY
8542: PPUSH
8543: LD_EXP 40
8547: PUSH
8548: LD_VAR 0 9
8552: ARRAY
8553: PUSH
8554: LD_INT 1
8556: PLUS
8557: PPUSH
8558: LD_VAR 0 1
8562: PPUSH
8563: CALL_OW 1
8567: PPUSH
8568: CALL_OW 1
8572: ST_TO_ADDR
// wait ( 10 ) ;
8573: LD_INT 10
8575: PPUSH
8576: CALL_OW 67
// mpBlockRespThread := false ;
8580: LD_ADDR_EXP 45
8584: PUSH
8585: LD_INT 0
8587: ST_TO_ADDR
// end ; end ;
8588: LD_VAR 0 2
8592: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8593: LD_INT 0
8595: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8596: LD_VAR 0 1
8600: PPUSH
8601: CALL_OW 266
8605: PUSH
8606: LD_INT 0
8608: PUSH
8609: LD_INT 1
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: IN
8616: IFFALSE 8641
// SetBName ( building , @ & GetSide ( building ) ) ;
8618: LD_VAR 0 1
8622: PPUSH
8623: LD_STRING @
8625: PUSH
8626: LD_VAR 0 1
8630: PPUSH
8631: CALL_OW 255
8635: STR
8636: PPUSH
8637: CALL_OW 500
// end ;
8641: LD_VAR 0 2
8645: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8646: LD_INT 0
8648: PPUSH
8649: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8650: LD_EXP 3
8654: PUSH
8655: LD_INT 2
8657: EQUAL
8658: IFFALSE 8682
8660: PUSH
8661: LD_VAR 0 1
8665: PPUSH
8666: CALL_OW 266
8670: PUSH
8671: LD_INT 0
8673: PUSH
8674: LD_INT 1
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: IN
8681: AND
8682: IFFALSE 8761
// begin SetSide ( building , oldSide ) ;
8684: LD_VAR 0 1
8688: PPUSH
8689: LD_VAR 0 2
8693: PPUSH
8694: CALL_OW 235
// KillUnit ( building ) ;
8698: LD_VAR 0 1
8702: PPUSH
8703: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8707: LD_ADDR_VAR 0 5
8711: PUSH
8712: LD_INT 22
8714: PUSH
8715: LD_VAR 0 2
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PUSH
8724: LD_INT 21
8726: PUSH
8727: LD_INT 1
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PPUSH
8738: CALL_OW 69
8742: PUSH
8743: FOR_IN
8744: IFFALSE 8757
// KillUnit ( i ) ;
8746: LD_VAR 0 5
8750: PPUSH
8751: CALL_OW 66
8755: GO 8743
8757: POP
8758: POP
// exit ;
8759: GO 8806
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8761: LD_VAR 0 1
8765: PPUSH
8766: CALL_OW 266
8770: PUSH
8771: LD_INT 0
8773: PUSH
8774: LD_INT 1
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: IN
8781: IFFALSE 8806
// SetBName ( building , @ & GetSide ( building ) ) ;
8783: LD_VAR 0 1
8787: PPUSH
8788: LD_STRING @
8790: PUSH
8791: LD_VAR 0 1
8795: PPUSH
8796: CALL_OW 255
8800: STR
8801: PPUSH
8802: CALL_OW 500
// end ;
8806: LD_VAR 0 4
8810: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8811: LD_INT 0
8813: PPUSH
8814: PPUSH
8815: PPUSH
// if mpGameType <> GameTypeFamine then
8816: LD_EXP 3
8820: PUSH
8821: LD_INT 5
8823: NONEQUAL
8824: IFFALSE 8828
// exit ;
8826: GO 9042
// for i := 1 to mpGlobalOilDeposits do
8828: LD_ADDR_VAR 0 6
8832: PUSH
8833: DOUBLE
8834: LD_INT 1
8836: DEC
8837: ST_TO_ADDR
8838: LD_EXP 41
8842: PUSH
8843: FOR_TO
8844: IFFALSE 9040
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8846: LD_EXP 41
8850: PUSH
8851: LD_VAR 0 6
8855: ARRAY
8856: PUSH
8857: LD_INT 1
8859: ARRAY
8860: PPUSH
8861: LD_EXP 41
8865: PUSH
8866: LD_VAR 0 6
8870: ARRAY
8871: PUSH
8872: LD_INT 2
8874: ARRAY
8875: PPUSH
8876: CALL_OW 428
8880: PUSH
8881: LD_VAR 0 1
8885: EQUAL
8886: IFFALSE 9038
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8888: LD_ADDR_VAR 0 7
8892: PUSH
8893: LD_EXP 41
8897: PUSH
8898: LD_VAR 0 6
8902: ARRAY
8903: PUSH
8904: LD_INT 3
8906: ARRAY
8907: ST_TO_ADDR
// value := Dec ( value ) ;
8908: LD_ADDR_VAR 0 7
8912: PUSH
8913: LD_VAR 0 7
8917: PPUSH
8918: CALL 49587 0 1
8922: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8923: LD_ADDR_EXP 41
8927: PUSH
8928: LD_EXP 41
8932: PPUSH
8933: LD_VAR 0 6
8937: PPUSH
8938: LD_EXP 41
8942: PUSH
8943: LD_VAR 0 6
8947: ARRAY
8948: PPUSH
8949: LD_INT 3
8951: PPUSH
8952: LD_VAR 0 7
8956: PPUSH
8957: CALL_OW 1
8961: PPUSH
8962: CALL_OW 1
8966: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8967: LD_VAR 0 1
8971: PPUSH
8972: LD_VAR 0 7
8976: PPUSH
8977: CALL_OW 505
// if value = 0 then
8981: LD_VAR 0 7
8985: PUSH
8986: LD_INT 0
8988: EQUAL
8989: IFFALSE 9038
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8991: LD_EXP 41
8995: PUSH
8996: LD_VAR 0 6
9000: ARRAY
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: LD_EXP 41
9010: PUSH
9011: LD_VAR 0 6
9015: ARRAY
9016: PUSH
9017: LD_INT 2
9019: ARRAY
9020: PPUSH
9021: CALL_OW 63
// KillUnit ( building ) ;
9025: LD_VAR 0 1
9029: PPUSH
9030: CALL_OW 66
// exit ;
9034: POP
9035: POP
9036: GO 9042
// end ; end ; end ;
9038: GO 8843
9040: POP
9041: POP
// end ;
9042: LD_VAR 0 5
9046: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9047: LD_INT 0
9049: PPUSH
9050: PPUSH
9051: PPUSH
// if mpGameType <> GameTypeFamine then
9052: LD_EXP 3
9056: PUSH
9057: LD_INT 5
9059: NONEQUAL
9060: IFFALSE 9064
// exit ;
9062: GO 9278
// for i := 1 to mpGlobalSibDeposits do
9064: LD_ADDR_VAR 0 6
9068: PUSH
9069: DOUBLE
9070: LD_INT 1
9072: DEC
9073: ST_TO_ADDR
9074: LD_EXP 42
9078: PUSH
9079: FOR_TO
9080: IFFALSE 9276
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9082: LD_EXP 42
9086: PUSH
9087: LD_VAR 0 6
9091: ARRAY
9092: PUSH
9093: LD_INT 1
9095: ARRAY
9096: PPUSH
9097: LD_EXP 42
9101: PUSH
9102: LD_VAR 0 6
9106: ARRAY
9107: PUSH
9108: LD_INT 2
9110: ARRAY
9111: PPUSH
9112: CALL_OW 428
9116: PUSH
9117: LD_VAR 0 1
9121: EQUAL
9122: IFFALSE 9274
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9124: LD_ADDR_VAR 0 7
9128: PUSH
9129: LD_EXP 42
9133: PUSH
9134: LD_VAR 0 6
9138: ARRAY
9139: PUSH
9140: LD_INT 3
9142: ARRAY
9143: ST_TO_ADDR
// value := Dec ( value ) ;
9144: LD_ADDR_VAR 0 7
9148: PUSH
9149: LD_VAR 0 7
9153: PPUSH
9154: CALL 49587 0 1
9158: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9159: LD_ADDR_EXP 42
9163: PUSH
9164: LD_EXP 42
9168: PPUSH
9169: LD_VAR 0 6
9173: PPUSH
9174: LD_EXP 42
9178: PUSH
9179: LD_VAR 0 6
9183: ARRAY
9184: PPUSH
9185: LD_INT 3
9187: PPUSH
9188: LD_VAR 0 7
9192: PPUSH
9193: CALL_OW 1
9197: PPUSH
9198: CALL_OW 1
9202: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9203: LD_VAR 0 1
9207: PPUSH
9208: LD_VAR 0 7
9212: PPUSH
9213: CALL_OW 505
// if value = 0 then
9217: LD_VAR 0 7
9221: PUSH
9222: LD_INT 0
9224: EQUAL
9225: IFFALSE 9274
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9227: LD_EXP 42
9231: PUSH
9232: LD_VAR 0 6
9236: ARRAY
9237: PUSH
9238: LD_INT 1
9240: ARRAY
9241: PPUSH
9242: LD_EXP 42
9246: PUSH
9247: LD_VAR 0 6
9251: ARRAY
9252: PUSH
9253: LD_INT 2
9255: ARRAY
9256: PPUSH
9257: CALL_OW 63
// KillUnit ( building ) ;
9261: LD_VAR 0 1
9265: PPUSH
9266: CALL_OW 66
// exit ;
9270: POP
9271: POP
9272: GO 9278
// end ; end ; end ;
9274: GO 9079
9276: POP
9277: POP
// end ; end_of_file
9278: LD_VAR 0 5
9282: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9283: LD_EXP 39
9287: IFFALSE 9295
9289: PUSH
9290: CALL 9505 0 0
9294: AND
9295: IFFALSE 9303
9297: PUSH
9298: LD_OWVAR 4
9302: AND
9303: IFFALSE 9502
9305: GO 9307
9307: DISABLE
9308: LD_INT 0
9310: PPUSH
9311: PPUSH
// begin canWin := false ;
9312: LD_ADDR_VAR 0 2
9316: PUSH
9317: LD_INT 0
9319: ST_TO_ADDR
// if not HasPower ( your_side ) then
9320: LD_OWVAR 2
9324: PPUSH
9325: CALL 9547 0 1
9329: NOT
9330: IFFALSE 9341
// begin Multiplayer_Loose_Message ;
9332: CALL_OW 521
// enable ( mpLose ) ;
9336: LD_INT 102
9338: ENABLE_MARKED
// end else
9339: GO 9502
// begin canWin := true ;
9341: LD_ADDR_VAR 0 2
9345: PUSH
9346: LD_INT 1
9348: ST_TO_ADDR
// for i := 1 to 8 do
9349: LD_ADDR_VAR 0 1
9353: PUSH
9354: DOUBLE
9355: LD_INT 1
9357: DEC
9358: ST_TO_ADDR
9359: LD_INT 8
9361: PUSH
9362: FOR_TO
9363: IFFALSE 9488
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9365: LD_EXP 7
9369: PUSH
9370: LD_VAR 0 1
9374: ARRAY
9375: IFFALSE 9388
9377: PUSH
9378: LD_VAR 0 1
9382: PPUSH
9383: CALL_OW 108
9387: AND
9388: IFFALSE 9402
9390: PUSH
9391: LD_VAR 0 1
9395: PUSH
9396: LD_OWVAR 2
9400: NONEQUAL
9401: AND
9402: IFFALSE 9486
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9404: LD_EXP 8
9408: PUSH
9409: LD_VAR 0 1
9413: ARRAY
9414: NOT
9415: IFTRUE 9463
9417: PUSH
9418: LD_EXP 8
9422: PUSH
9423: LD_VAR 0 1
9427: ARRAY
9428: PUSH
9429: LD_EXP 8
9433: PUSH
9434: LD_OWVAR 2
9438: ARRAY
9439: NONEQUAL
9440: IFFALSE 9462
9442: PUSH
9443: LD_OWVAR 2
9447: PPUSH
9448: LD_VAR 0 1
9452: PPUSH
9453: CALL_OW 81
9457: PUSH
9458: LD_INT 1
9460: NONEQUAL
9461: AND
9462: OR
9463: IFFALSE 9486
// if HasPower ( i ) then
9465: LD_VAR 0 1
9469: PPUSH
9470: CALL 9547 0 1
9474: IFFALSE 9486
// begin canWin := false ;
9476: LD_ADDR_VAR 0 2
9480: PUSH
9481: LD_INT 0
9483: ST_TO_ADDR
// break ;
9484: GO 9488
// end ;
9486: GO 9362
9488: POP
9489: POP
// if canWin then
9490: LD_VAR 0 2
9494: IFFALSE 9501
// enable ( mpWin ) else
9496: LD_INT 101
9498: ENABLE_MARKED
9499: GO 9502
// enable ;
9501: ENABLE
// end ; end ;
9502: PPOPN 2
9504: END
// function CanWinLoose ; begin
9505: LD_INT 0
9507: PPUSH
// result := true ;
9508: LD_ADDR_VAR 0 1
9512: PUSH
9513: LD_INT 1
9515: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9516: CALL_OW 531
9520: IFFALSE 9532
9522: PUSH
9523: CALL_OW 519
9527: PUSH
9528: LD_INT 1
9530: GREATER
9531: AND
9532: IFFALSE 9542
// result := false ;
9534: LD_ADDR_VAR 0 1
9538: PUSH
9539: LD_INT 0
9541: ST_TO_ADDR
// end ;
9542: LD_VAR 0 1
9546: RET
// function HasPower ( i ) ; begin
9547: LD_INT 0
9549: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9550: LD_ADDR_VAR 0 2
9554: PUSH
9555: LD_INT 22
9557: PUSH
9558: LD_VAR 0 1
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 2
9569: PUSH
9570: LD_INT 21
9572: PUSH
9573: LD_INT 1
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: PUSH
9580: LD_INT 33
9582: PUSH
9583: LD_INT 3
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PUSH
9590: LD_INT 33
9592: PUSH
9593: LD_INT 5
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PPUSH
9610: CALL_OW 69
9614: ST_TO_ADDR
// end ; end_of_file
9615: LD_VAR 0 2
9619: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9620: LD_EXP 39
9624: IFFALSE 9667
9626: GO 9628
9628: DISABLE
9629: LD_INT 0
9631: PPUSH
// begin for i := 1 to 8 do
9632: LD_ADDR_VAR 0 1
9636: PUSH
9637: DOUBLE
9638: LD_INT 1
9640: DEC
9641: ST_TO_ADDR
9642: LD_INT 8
9644: PUSH
9645: FOR_TO
9646: IFFALSE 9665
// SetRestrict ( b_depot , i , state_disabled ) ;
9648: LD_INT 0
9650: PPUSH
9651: LD_VAR 0 1
9655: PPUSH
9656: LD_INT 0
9658: PPUSH
9659: CALL_OW 324
9663: GO 9645
9665: POP
9666: POP
// end ;
9667: PPOPN 1
9669: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9670: LD_EXP 39
9674: IFFALSE 9682
9676: PUSH
9677: CALL 9892 0 0
9681: AND
9682: IFFALSE 9690
9684: PUSH
9685: LD_OWVAR 4
9689: AND
9690: IFFALSE 9889
9692: GO 9694
9694: DISABLE
9695: LD_INT 0
9697: PPUSH
9698: PPUSH
// begin canWin := false ;
9699: LD_ADDR_VAR 0 2
9703: PUSH
9704: LD_INT 0
9706: ST_TO_ADDR
// if not HasPower ( your_side ) then
9707: LD_OWVAR 2
9711: PPUSH
9712: CALL 9934 0 1
9716: NOT
9717: IFFALSE 9728
// begin Multiplayer_Loose_Message ;
9719: CALL_OW 521
// enable ( mpLose ) ;
9723: LD_INT 102
9725: ENABLE_MARKED
// end else
9726: GO 9889
// begin canWin := true ;
9728: LD_ADDR_VAR 0 2
9732: PUSH
9733: LD_INT 1
9735: ST_TO_ADDR
// for i := 1 to 8 do
9736: LD_ADDR_VAR 0 1
9740: PUSH
9741: DOUBLE
9742: LD_INT 1
9744: DEC
9745: ST_TO_ADDR
9746: LD_INT 8
9748: PUSH
9749: FOR_TO
9750: IFFALSE 9875
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9752: LD_EXP 7
9756: PUSH
9757: LD_VAR 0 1
9761: ARRAY
9762: IFFALSE 9775
9764: PUSH
9765: LD_VAR 0 1
9769: PPUSH
9770: CALL_OW 108
9774: AND
9775: IFFALSE 9789
9777: PUSH
9778: LD_VAR 0 1
9782: PUSH
9783: LD_OWVAR 2
9787: NONEQUAL
9788: AND
9789: IFFALSE 9873
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9791: LD_EXP 8
9795: PUSH
9796: LD_VAR 0 1
9800: ARRAY
9801: NOT
9802: IFTRUE 9850
9804: PUSH
9805: LD_EXP 8
9809: PUSH
9810: LD_VAR 0 1
9814: ARRAY
9815: PUSH
9816: LD_EXP 8
9820: PUSH
9821: LD_OWVAR 2
9825: ARRAY
9826: NONEQUAL
9827: IFFALSE 9849
9829: PUSH
9830: LD_OWVAR 2
9834: PPUSH
9835: LD_VAR 0 1
9839: PPUSH
9840: CALL_OW 81
9844: PUSH
9845: LD_INT 1
9847: NONEQUAL
9848: AND
9849: OR
9850: IFFALSE 9873
// if HasPower ( i ) then
9852: LD_VAR 0 1
9856: PPUSH
9857: CALL 9934 0 1
9861: IFFALSE 9873
// begin canWin := false ;
9863: LD_ADDR_VAR 0 2
9867: PUSH
9868: LD_INT 0
9870: ST_TO_ADDR
// break ;
9871: GO 9875
// end ;
9873: GO 9749
9875: POP
9876: POP
// if canWin then
9877: LD_VAR 0 2
9881: IFFALSE 9888
// enable ( mpWin ) else
9883: LD_INT 101
9885: ENABLE_MARKED
9886: GO 9889
// enable ;
9888: ENABLE
// end ; end ;
9889: PPOPN 2
9891: END
// function CanWinLoose ; begin
9892: LD_INT 0
9894: PPUSH
// result := true ;
9895: LD_ADDR_VAR 0 1
9899: PUSH
9900: LD_INT 1
9902: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9903: CALL_OW 531
9907: IFFALSE 9919
9909: PUSH
9910: CALL_OW 519
9914: PUSH
9915: LD_INT 1
9917: GREATER
9918: AND
9919: IFFALSE 9929
// result := false ;
9921: LD_ADDR_VAR 0 1
9925: PUSH
9926: LD_INT 0
9928: ST_TO_ADDR
// end ;
9929: LD_VAR 0 1
9933: RET
// function HasPower ( i ) ; begin
9934: LD_INT 0
9936: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9937: LD_INT 22
9939: PUSH
9940: LD_VAR 0 1
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 2
9951: PUSH
9952: LD_INT 30
9954: PUSH
9955: LD_INT 0
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: LD_INT 30
9964: PUSH
9965: LD_INT 1
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: PPUSH
9981: CALL_OW 69
9985: NOT
9986: IFFALSE 9990
// exit ;
9988: GO 10055
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9990: LD_ADDR_VAR 0 2
9994: PUSH
9995: LD_INT 22
9997: PUSH
9998: LD_VAR 0 1
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PUSH
10007: LD_INT 2
10009: PUSH
10010: LD_INT 21
10012: PUSH
10013: LD_INT 1
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PUSH
10020: LD_INT 33
10022: PUSH
10023: LD_INT 3
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 33
10032: PUSH
10033: LD_INT 5
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PPUSH
10050: CALL_OW 69
10054: ST_TO_ADDR
// end ; end_of_file
10055: LD_VAR 0 2
10059: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10060: LD_INT 0
10062: PPUSH
10063: PPUSH
// if exist_mode then
10064: LD_VAR 0 2
10068: IFFALSE 10114
// begin unit := CreateCharacter ( prefix & ident ) ;
10070: LD_ADDR_VAR 0 5
10074: PUSH
10075: LD_VAR 0 3
10079: PUSH
10080: LD_VAR 0 1
10084: STR
10085: PPUSH
10086: CALL_OW 34
10090: ST_TO_ADDR
// if unit then
10091: LD_VAR 0 5
10095: IFFALSE 10112
// DeleteCharacters ( prefix & ident ) ;
10097: LD_VAR 0 3
10101: PUSH
10102: LD_VAR 0 1
10106: STR
10107: PPUSH
10108: CALL_OW 40
// end else
10112: GO 10129
// unit := NewCharacter ( ident ) ;
10114: LD_ADDR_VAR 0 5
10118: PUSH
10119: LD_VAR 0 1
10123: PPUSH
10124: CALL_OW 25
10128: ST_TO_ADDR
// result := unit ;
10129: LD_ADDR_VAR 0 4
10133: PUSH
10134: LD_VAR 0 5
10138: ST_TO_ADDR
// end ;
10139: LD_VAR 0 4
10143: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10144: LD_INT 0
10146: PPUSH
10147: PPUSH
// if exist_mode then
10148: LD_VAR 0 2
10152: IFFALSE 10177
// unit := CreateCharacter ( prefix & ident ) else
10154: LD_ADDR_VAR 0 5
10158: PUSH
10159: LD_VAR 0 3
10163: PUSH
10164: LD_VAR 0 1
10168: STR
10169: PPUSH
10170: CALL_OW 34
10174: ST_TO_ADDR
10175: GO 10192
// unit := NewCharacter ( ident ) ;
10177: LD_ADDR_VAR 0 5
10181: PUSH
10182: LD_VAR 0 1
10186: PPUSH
10187: CALL_OW 25
10191: ST_TO_ADDR
// result := unit ;
10192: LD_ADDR_VAR 0 4
10196: PUSH
10197: LD_VAR 0 5
10201: ST_TO_ADDR
// end ;
10202: LD_VAR 0 4
10206: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10207: LD_INT 0
10209: PPUSH
10210: PPUSH
// if not side or not nation then
10211: LD_VAR 0 1
10215: NOT
10216: IFTRUE 10225
10218: PUSH
10219: LD_VAR 0 2
10223: NOT
10224: OR
10225: IFFALSE 10229
// exit ;
10227: GO 10999
// case nation of nation_american :
10229: LD_VAR 0 2
10233: PUSH
10234: LD_INT 1
10236: DOUBLE
10237: EQUAL
10238: IFTRUE 10242
10240: GO 10456
10242: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10243: LD_ADDR_VAR 0 4
10247: PUSH
10248: LD_INT 35
10250: PUSH
10251: LD_INT 45
10253: PUSH
10254: LD_INT 46
10256: PUSH
10257: LD_INT 47
10259: PUSH
10260: LD_INT 82
10262: PUSH
10263: LD_INT 83
10265: PUSH
10266: LD_INT 84
10268: PUSH
10269: LD_INT 85
10271: PUSH
10272: LD_INT 86
10274: PUSH
10275: LD_INT 1
10277: PUSH
10278: LD_INT 2
10280: PUSH
10281: LD_INT 6
10283: PUSH
10284: LD_INT 15
10286: PUSH
10287: LD_INT 16
10289: PUSH
10290: LD_INT 7
10292: PUSH
10293: LD_INT 12
10295: PUSH
10296: LD_INT 13
10298: PUSH
10299: LD_INT 10
10301: PUSH
10302: LD_INT 14
10304: PUSH
10305: LD_INT 20
10307: PUSH
10308: LD_INT 21
10310: PUSH
10311: LD_INT 22
10313: PUSH
10314: LD_INT 25
10316: PUSH
10317: LD_INT 32
10319: PUSH
10320: LD_INT 27
10322: PUSH
10323: LD_INT 36
10325: PUSH
10326: LD_INT 69
10328: PUSH
10329: LD_INT 39
10331: PUSH
10332: LD_INT 34
10334: PUSH
10335: LD_INT 40
10337: PUSH
10338: LD_INT 48
10340: PUSH
10341: LD_INT 49
10343: PUSH
10344: LD_INT 50
10346: PUSH
10347: LD_INT 51
10349: PUSH
10350: LD_INT 52
10352: PUSH
10353: LD_INT 53
10355: PUSH
10356: LD_INT 54
10358: PUSH
10359: LD_INT 55
10361: PUSH
10362: LD_INT 56
10364: PUSH
10365: LD_INT 57
10367: PUSH
10368: LD_INT 58
10370: PUSH
10371: LD_INT 59
10373: PUSH
10374: LD_INT 60
10376: PUSH
10377: LD_INT 61
10379: PUSH
10380: LD_INT 62
10382: PUSH
10383: LD_INT 80
10385: PUSH
10386: LD_INT 82
10388: PUSH
10389: LD_INT 83
10391: PUSH
10392: LD_INT 84
10394: PUSH
10395: LD_INT 85
10397: PUSH
10398: LD_INT 86
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: ST_TO_ADDR
10454: GO 10921
10456: LD_INT 2
10458: DOUBLE
10459: EQUAL
10460: IFTRUE 10464
10462: GO 10690
10464: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10465: LD_ADDR_VAR 0 4
10469: PUSH
10470: LD_INT 35
10472: PUSH
10473: LD_INT 45
10475: PUSH
10476: LD_INT 46
10478: PUSH
10479: LD_INT 47
10481: PUSH
10482: LD_INT 82
10484: PUSH
10485: LD_INT 83
10487: PUSH
10488: LD_INT 84
10490: PUSH
10491: LD_INT 85
10493: PUSH
10494: LD_INT 87
10496: PUSH
10497: LD_INT 70
10499: PUSH
10500: LD_INT 1
10502: PUSH
10503: LD_INT 11
10505: PUSH
10506: LD_INT 3
10508: PUSH
10509: LD_INT 4
10511: PUSH
10512: LD_INT 5
10514: PUSH
10515: LD_INT 6
10517: PUSH
10518: LD_INT 15
10520: PUSH
10521: LD_INT 18
10523: PUSH
10524: LD_INT 7
10526: PUSH
10527: LD_INT 17
10529: PUSH
10530: LD_INT 8
10532: PUSH
10533: LD_INT 20
10535: PUSH
10536: LD_INT 21
10538: PUSH
10539: LD_INT 22
10541: PUSH
10542: LD_INT 72
10544: PUSH
10545: LD_INT 26
10547: PUSH
10548: LD_INT 69
10550: PUSH
10551: LD_INT 39
10553: PUSH
10554: LD_INT 40
10556: PUSH
10557: LD_INT 41
10559: PUSH
10560: LD_INT 42
10562: PUSH
10563: LD_INT 43
10565: PUSH
10566: LD_INT 48
10568: PUSH
10569: LD_INT 49
10571: PUSH
10572: LD_INT 50
10574: PUSH
10575: LD_INT 51
10577: PUSH
10578: LD_INT 52
10580: PUSH
10581: LD_INT 53
10583: PUSH
10584: LD_INT 54
10586: PUSH
10587: LD_INT 55
10589: PUSH
10590: LD_INT 56
10592: PUSH
10593: LD_INT 60
10595: PUSH
10596: LD_INT 61
10598: PUSH
10599: LD_INT 62
10601: PUSH
10602: LD_INT 66
10604: PUSH
10605: LD_INT 67
10607: PUSH
10608: LD_INT 68
10610: PUSH
10611: LD_INT 81
10613: PUSH
10614: LD_INT 82
10616: PUSH
10617: LD_INT 83
10619: PUSH
10620: LD_INT 84
10622: PUSH
10623: LD_INT 85
10625: PUSH
10626: LD_INT 87
10628: PUSH
10629: LD_INT 88
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: ST_TO_ADDR
10688: GO 10921
10690: LD_INT 3
10692: DOUBLE
10693: EQUAL
10694: IFTRUE 10698
10696: GO 10920
10698: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10699: LD_ADDR_VAR 0 4
10703: PUSH
10704: LD_INT 46
10706: PUSH
10707: LD_INT 47
10709: PUSH
10710: LD_INT 1
10712: PUSH
10713: LD_INT 2
10715: PUSH
10716: LD_INT 82
10718: PUSH
10719: LD_INT 83
10721: PUSH
10722: LD_INT 84
10724: PUSH
10725: LD_INT 85
10727: PUSH
10728: LD_INT 86
10730: PUSH
10731: LD_INT 11
10733: PUSH
10734: LD_INT 9
10736: PUSH
10737: LD_INT 20
10739: PUSH
10740: LD_INT 19
10742: PUSH
10743: LD_INT 21
10745: PUSH
10746: LD_INT 24
10748: PUSH
10749: LD_INT 22
10751: PUSH
10752: LD_INT 25
10754: PUSH
10755: LD_INT 28
10757: PUSH
10758: LD_INT 29
10760: PUSH
10761: LD_INT 30
10763: PUSH
10764: LD_INT 31
10766: PUSH
10767: LD_INT 37
10769: PUSH
10770: LD_INT 38
10772: PUSH
10773: LD_INT 32
10775: PUSH
10776: LD_INT 27
10778: PUSH
10779: LD_INT 33
10781: PUSH
10782: LD_INT 69
10784: PUSH
10785: LD_INT 39
10787: PUSH
10788: LD_INT 34
10790: PUSH
10791: LD_INT 40
10793: PUSH
10794: LD_INT 71
10796: PUSH
10797: LD_INT 23
10799: PUSH
10800: LD_INT 44
10802: PUSH
10803: LD_INT 48
10805: PUSH
10806: LD_INT 49
10808: PUSH
10809: LD_INT 50
10811: PUSH
10812: LD_INT 51
10814: PUSH
10815: LD_INT 52
10817: PUSH
10818: LD_INT 53
10820: PUSH
10821: LD_INT 54
10823: PUSH
10824: LD_INT 55
10826: PUSH
10827: LD_INT 56
10829: PUSH
10830: LD_INT 57
10832: PUSH
10833: LD_INT 58
10835: PUSH
10836: LD_INT 59
10838: PUSH
10839: LD_INT 63
10841: PUSH
10842: LD_INT 64
10844: PUSH
10845: LD_INT 65
10847: PUSH
10848: LD_INT 82
10850: PUSH
10851: LD_INT 83
10853: PUSH
10854: LD_INT 84
10856: PUSH
10857: LD_INT 85
10859: PUSH
10860: LD_INT 86
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: ST_TO_ADDR
10918: GO 10921
10920: POP
// if state > - 1 and state < 3 then
10921: LD_VAR 0 3
10925: PUSH
10926: LD_INT 1
10928: NEG
10929: GREATER
10930: IFFALSE 10942
10932: PUSH
10933: LD_VAR 0 3
10937: PUSH
10938: LD_INT 3
10940: LESS
10941: AND
10942: IFFALSE 10999
// for i in result do
10944: LD_ADDR_VAR 0 5
10948: PUSH
10949: LD_VAR 0 4
10953: PUSH
10954: FOR_IN
10955: IFFALSE 10997
// if GetTech ( i , side ) <> state then
10957: LD_VAR 0 5
10961: PPUSH
10962: LD_VAR 0 1
10966: PPUSH
10967: CALL_OW 321
10971: PUSH
10972: LD_VAR 0 3
10976: NONEQUAL
10977: IFFALSE 10995
// result := result diff i ;
10979: LD_ADDR_VAR 0 4
10983: PUSH
10984: LD_VAR 0 4
10988: PUSH
10989: LD_VAR 0 5
10993: DIFF
10994: ST_TO_ADDR
10995: GO 10954
10997: POP
10998: POP
// end ;
10999: LD_VAR 0 4
11003: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11004: LD_INT 0
11006: PPUSH
11007: PPUSH
11008: PPUSH
// result := true ;
11009: LD_ADDR_VAR 0 3
11013: PUSH
11014: LD_INT 1
11016: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11017: LD_ADDR_VAR 0 5
11021: PUSH
11022: LD_VAR 0 2
11026: PPUSH
11027: CALL_OW 480
11031: ST_TO_ADDR
// if not tmp then
11032: LD_VAR 0 5
11036: NOT
11037: IFFALSE 11041
// exit ;
11039: GO 11090
// for i in tmp do
11041: LD_ADDR_VAR 0 4
11045: PUSH
11046: LD_VAR 0 5
11050: PUSH
11051: FOR_IN
11052: IFFALSE 11088
// if GetTech ( i , side ) <> state_researched then
11054: LD_VAR 0 4
11058: PPUSH
11059: LD_VAR 0 1
11063: PPUSH
11064: CALL_OW 321
11068: PUSH
11069: LD_INT 2
11071: NONEQUAL
11072: IFFALSE 11086
// begin result := false ;
11074: LD_ADDR_VAR 0 3
11078: PUSH
11079: LD_INT 0
11081: ST_TO_ADDR
// exit ;
11082: POP
11083: POP
11084: GO 11090
// end ;
11086: GO 11051
11088: POP
11089: POP
// end ;
11090: LD_VAR 0 3
11094: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11095: LD_INT 0
11097: PPUSH
11098: PPUSH
11099: PPUSH
11100: PPUSH
11101: PPUSH
11102: PPUSH
11103: PPUSH
11104: PPUSH
11105: PPUSH
11106: PPUSH
11107: PPUSH
11108: PPUSH
11109: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11110: LD_VAR 0 1
11114: NOT
11115: IFTRUE 11132
11117: PUSH
11118: LD_VAR 0 1
11122: PPUSH
11123: CALL_OW 257
11127: PUSH
11128: LD_INT 9
11130: NONEQUAL
11131: OR
11132: IFFALSE 11136
// exit ;
11134: GO 11715
// side := GetSide ( unit ) ;
11136: LD_ADDR_VAR 0 9
11140: PUSH
11141: LD_VAR 0 1
11145: PPUSH
11146: CALL_OW 255
11150: ST_TO_ADDR
// tech_space := tech_spacanom ;
11151: LD_ADDR_VAR 0 12
11155: PUSH
11156: LD_INT 29
11158: ST_TO_ADDR
// tech_time := tech_taurad ;
11159: LD_ADDR_VAR 0 13
11163: PUSH
11164: LD_INT 28
11166: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11167: LD_ADDR_VAR 0 11
11171: PUSH
11172: LD_VAR 0 1
11176: PPUSH
11177: CALL_OW 310
11181: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11182: LD_VAR 0 11
11186: PPUSH
11187: CALL_OW 247
11191: PUSH
11192: LD_INT 2
11194: EQUAL
11195: IFFALSE 11199
// exit ;
11197: GO 11715
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11199: LD_ADDR_VAR 0 8
11203: PUSH
11204: LD_INT 81
11206: PUSH
11207: LD_VAR 0 9
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 3
11218: PUSH
11219: LD_INT 21
11221: PUSH
11222: LD_INT 3
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PPUSH
11237: CALL_OW 69
11241: ST_TO_ADDR
// if not tmp then
11242: LD_VAR 0 8
11246: NOT
11247: IFFALSE 11251
// exit ;
11249: GO 11715
// if in_unit then
11251: LD_VAR 0 11
11255: IFFALSE 11279
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11257: LD_ADDR_VAR 0 10
11261: PUSH
11262: LD_VAR 0 8
11266: PPUSH
11267: LD_VAR 0 11
11271: PPUSH
11272: CALL_OW 74
11276: ST_TO_ADDR
11277: GO 11299
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11279: LD_ADDR_VAR 0 10
11283: PUSH
11284: LD_VAR 0 8
11288: PPUSH
11289: LD_VAR 0 1
11293: PPUSH
11294: CALL_OW 74
11298: ST_TO_ADDR
// if not enemy then
11299: LD_VAR 0 10
11303: NOT
11304: IFFALSE 11308
// exit ;
11306: GO 11715
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11308: LD_VAR 0 11
11312: IFFALSE 11334
11314: PUSH
11315: LD_VAR 0 11
11319: PPUSH
11320: LD_VAR 0 10
11324: PPUSH
11325: CALL_OW 296
11329: PUSH
11330: LD_INT 13
11332: GREATER
11333: AND
11334: IFTRUE 11356
11336: PUSH
11337: LD_VAR 0 1
11341: PPUSH
11342: LD_VAR 0 10
11346: PPUSH
11347: CALL_OW 296
11351: PUSH
11352: LD_INT 12
11354: GREATER
11355: OR
11356: IFFALSE 11360
// exit ;
11358: GO 11715
// missile := [ 1 ] ;
11360: LD_ADDR_VAR 0 14
11364: PUSH
11365: LD_INT 1
11367: PUSH
11368: EMPTY
11369: LIST
11370: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11371: LD_VAR 0 9
11375: PPUSH
11376: LD_VAR 0 12
11380: PPUSH
11381: CALL_OW 325
11385: IFFALSE 11414
// missile := Replace ( missile , missile + 1 , 2 ) ;
11387: LD_ADDR_VAR 0 14
11391: PUSH
11392: LD_VAR 0 14
11396: PPUSH
11397: LD_VAR 0 14
11401: PUSH
11402: LD_INT 1
11404: PLUS
11405: PPUSH
11406: LD_INT 2
11408: PPUSH
11409: CALL_OW 1
11413: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11414: LD_VAR 0 9
11418: PPUSH
11419: LD_VAR 0 13
11423: PPUSH
11424: CALL_OW 325
11428: IFFALSE 11452
11430: PUSH
11431: LD_VAR 0 10
11435: PPUSH
11436: CALL_OW 255
11440: PPUSH
11441: LD_VAR 0 13
11445: PPUSH
11446: CALL_OW 325
11450: NOT
11451: AND
11452: IFFALSE 11481
// missile := Replace ( missile , missile + 1 , 3 ) ;
11454: LD_ADDR_VAR 0 14
11458: PUSH
11459: LD_VAR 0 14
11463: PPUSH
11464: LD_VAR 0 14
11468: PUSH
11469: LD_INT 1
11471: PLUS
11472: PPUSH
11473: LD_INT 3
11475: PPUSH
11476: CALL_OW 1
11480: ST_TO_ADDR
// if missile < 2 then
11481: LD_VAR 0 14
11485: PUSH
11486: LD_INT 2
11488: LESS
11489: IFFALSE 11493
// exit ;
11491: GO 11715
// x := GetX ( enemy ) ;
11493: LD_ADDR_VAR 0 4
11497: PUSH
11498: LD_VAR 0 10
11502: PPUSH
11503: CALL_OW 250
11507: ST_TO_ADDR
// y := GetY ( enemy ) ;
11508: LD_ADDR_VAR 0 5
11512: PUSH
11513: LD_VAR 0 10
11517: PPUSH
11518: CALL_OW 251
11522: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11523: LD_ADDR_VAR 0 6
11527: PUSH
11528: LD_VAR 0 4
11532: PUSH
11533: LD_INT 1
11535: NEG
11536: PPUSH
11537: LD_INT 1
11539: PPUSH
11540: CALL_OW 12
11544: PLUS
11545: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11546: LD_ADDR_VAR 0 7
11550: PUSH
11551: LD_VAR 0 5
11555: PUSH
11556: LD_INT 1
11558: NEG
11559: PPUSH
11560: LD_INT 1
11562: PPUSH
11563: CALL_OW 12
11567: PLUS
11568: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11569: LD_VAR 0 6
11573: PPUSH
11574: LD_VAR 0 7
11578: PPUSH
11579: CALL_OW 488
11583: NOT
11584: IFFALSE 11606
// begin _x := x ;
11586: LD_ADDR_VAR 0 6
11590: PUSH
11591: LD_VAR 0 4
11595: ST_TO_ADDR
// _y := y ;
11596: LD_ADDR_VAR 0 7
11600: PUSH
11601: LD_VAR 0 5
11605: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11606: LD_ADDR_VAR 0 3
11610: PUSH
11611: LD_INT 1
11613: PPUSH
11614: LD_VAR 0 14
11618: PPUSH
11619: CALL_OW 12
11623: ST_TO_ADDR
// case i of 1 :
11624: LD_VAR 0 3
11628: PUSH
11629: LD_INT 1
11631: DOUBLE
11632: EQUAL
11633: IFTRUE 11637
11635: GO 11654
11637: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11638: LD_VAR 0 1
11642: PPUSH
11643: LD_VAR 0 10
11647: PPUSH
11648: CALL_OW 115
11652: GO 11715
11654: LD_INT 2
11656: DOUBLE
11657: EQUAL
11658: IFTRUE 11662
11660: GO 11684
11662: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11663: LD_VAR 0 1
11667: PPUSH
11668: LD_VAR 0 6
11672: PPUSH
11673: LD_VAR 0 7
11677: PPUSH
11678: CALL_OW 153
11682: GO 11715
11684: LD_INT 3
11686: DOUBLE
11687: EQUAL
11688: IFTRUE 11692
11690: GO 11714
11692: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11693: LD_VAR 0 1
11697: PPUSH
11698: LD_VAR 0 6
11702: PPUSH
11703: LD_VAR 0 7
11707: PPUSH
11708: CALL_OW 154
11712: GO 11715
11714: POP
// end ;
11715: LD_VAR 0 2
11719: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11720: LD_INT 0
11722: PPUSH
11723: PPUSH
11724: PPUSH
11725: PPUSH
11726: PPUSH
11727: PPUSH
// if not unit or not building then
11728: LD_VAR 0 1
11732: NOT
11733: IFTRUE 11742
11735: PUSH
11736: LD_VAR 0 2
11740: NOT
11741: OR
11742: IFFALSE 11746
// exit ;
11744: GO 11904
// x := GetX ( building ) ;
11746: LD_ADDR_VAR 0 5
11750: PUSH
11751: LD_VAR 0 2
11755: PPUSH
11756: CALL_OW 250
11760: ST_TO_ADDR
// y := GetY ( building ) ;
11761: LD_ADDR_VAR 0 6
11765: PUSH
11766: LD_VAR 0 2
11770: PPUSH
11771: CALL_OW 251
11775: ST_TO_ADDR
// for i := 0 to 5 do
11776: LD_ADDR_VAR 0 4
11780: PUSH
11781: DOUBLE
11782: LD_INT 0
11784: DEC
11785: ST_TO_ADDR
11786: LD_INT 5
11788: PUSH
11789: FOR_TO
11790: IFFALSE 11902
// begin _x := ShiftX ( x , i , 3 ) ;
11792: LD_ADDR_VAR 0 7
11796: PUSH
11797: LD_VAR 0 5
11801: PPUSH
11802: LD_VAR 0 4
11806: PPUSH
11807: LD_INT 3
11809: PPUSH
11810: CALL_OW 272
11814: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11815: LD_ADDR_VAR 0 8
11819: PUSH
11820: LD_VAR 0 6
11824: PPUSH
11825: LD_VAR 0 4
11829: PPUSH
11830: LD_INT 3
11832: PPUSH
11833: CALL_OW 273
11837: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11838: LD_VAR 0 7
11842: PPUSH
11843: LD_VAR 0 8
11847: PPUSH
11848: CALL_OW 488
11852: NOT
11853: IFFALSE 11857
// continue ;
11855: GO 11789
// if HexInfo ( _x , _y ) = 0 then
11857: LD_VAR 0 7
11861: PPUSH
11862: LD_VAR 0 8
11866: PPUSH
11867: CALL_OW 428
11871: PUSH
11872: LD_INT 0
11874: EQUAL
11875: IFFALSE 11900
// begin ComMoveXY ( unit , _x , _y ) ;
11877: LD_VAR 0 1
11881: PPUSH
11882: LD_VAR 0 7
11886: PPUSH
11887: LD_VAR 0 8
11891: PPUSH
11892: CALL_OW 111
// exit ;
11896: POP
11897: POP
11898: GO 11904
// end ; end ;
11900: GO 11789
11902: POP
11903: POP
// end ;
11904: LD_VAR 0 3
11908: RET
// export function ScanBase ( side , base_area ) ; begin
11909: LD_INT 0
11911: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11912: LD_ADDR_VAR 0 3
11916: PUSH
11917: LD_VAR 0 2
11921: PPUSH
11922: LD_INT 81
11924: PUSH
11925: LD_VAR 0 1
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: PPUSH
11934: CALL_OW 70
11938: ST_TO_ADDR
// end ;
11939: LD_VAR 0 3
11943: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11944: LD_INT 0
11946: PPUSH
11947: PPUSH
11948: PPUSH
11949: PPUSH
// result := false ;
11950: LD_ADDR_VAR 0 2
11954: PUSH
11955: LD_INT 0
11957: ST_TO_ADDR
// side := GetSide ( unit ) ;
11958: LD_ADDR_VAR 0 3
11962: PUSH
11963: LD_VAR 0 1
11967: PPUSH
11968: CALL_OW 255
11972: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11973: LD_ADDR_VAR 0 4
11977: PUSH
11978: LD_VAR 0 1
11982: PPUSH
11983: CALL_OW 248
11987: ST_TO_ADDR
// case nat of 1 :
11988: LD_VAR 0 4
11992: PUSH
11993: LD_INT 1
11995: DOUBLE
11996: EQUAL
11997: IFTRUE 12001
11999: GO 12012
12001: POP
// tech := tech_lassight ; 2 :
12002: LD_ADDR_VAR 0 5
12006: PUSH
12007: LD_INT 12
12009: ST_TO_ADDR
12010: GO 12051
12012: LD_INT 2
12014: DOUBLE
12015: EQUAL
12016: IFTRUE 12020
12018: GO 12031
12020: POP
// tech := tech_mortar ; 3 :
12021: LD_ADDR_VAR 0 5
12025: PUSH
12026: LD_INT 41
12028: ST_TO_ADDR
12029: GO 12051
12031: LD_INT 3
12033: DOUBLE
12034: EQUAL
12035: IFTRUE 12039
12037: GO 12050
12039: POP
// tech := tech_bazooka ; end ;
12040: LD_ADDR_VAR 0 5
12044: PUSH
12045: LD_INT 44
12047: ST_TO_ADDR
12048: GO 12051
12050: POP
// if Researched ( side , tech ) then
12051: LD_VAR 0 3
12055: PPUSH
12056: LD_VAR 0 5
12060: PPUSH
12061: CALL_OW 325
12065: IFFALSE 12092
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12067: LD_ADDR_VAR 0 2
12071: PUSH
12072: LD_INT 5
12074: PUSH
12075: LD_INT 8
12077: PUSH
12078: LD_INT 9
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: LIST
12085: PUSH
12086: LD_VAR 0 4
12090: ARRAY
12091: ST_TO_ADDR
// end ;
12092: LD_VAR 0 2
12096: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12097: LD_INT 0
12099: PPUSH
12100: PPUSH
12101: PPUSH
// if not mines then
12102: LD_VAR 0 2
12106: NOT
12107: IFFALSE 12111
// exit ;
12109: GO 12255
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12111: LD_ADDR_VAR 0 5
12115: PUSH
12116: LD_INT 81
12118: PUSH
12119: LD_VAR 0 1
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 3
12130: PUSH
12131: LD_INT 21
12133: PUSH
12134: LD_INT 3
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 69
12153: ST_TO_ADDR
// for i in mines do
12154: LD_ADDR_VAR 0 4
12158: PUSH
12159: LD_VAR 0 2
12163: PUSH
12164: FOR_IN
12165: IFFALSE 12253
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12167: LD_VAR 0 4
12171: PUSH
12172: LD_INT 1
12174: ARRAY
12175: PPUSH
12176: LD_VAR 0 4
12180: PUSH
12181: LD_INT 2
12183: ARRAY
12184: PPUSH
12185: CALL_OW 458
12189: NOT
12190: IFFALSE 12194
// continue ;
12192: GO 12164
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12194: LD_VAR 0 4
12198: PUSH
12199: LD_INT 1
12201: ARRAY
12202: PPUSH
12203: LD_VAR 0 4
12207: PUSH
12208: LD_INT 2
12210: ARRAY
12211: PPUSH
12212: CALL_OW 428
12216: PUSH
12217: LD_VAR 0 5
12221: IN
12222: IFFALSE 12251
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12224: LD_VAR 0 4
12228: PUSH
12229: LD_INT 1
12231: ARRAY
12232: PPUSH
12233: LD_VAR 0 4
12237: PUSH
12238: LD_INT 2
12240: ARRAY
12241: PPUSH
12242: LD_VAR 0 1
12246: PPUSH
12247: CALL_OW 456
// end ;
12251: GO 12164
12253: POP
12254: POP
// end ;
12255: LD_VAR 0 3
12259: RET
// export function Count ( array ) ; begin
12260: LD_INT 0
12262: PPUSH
// result := array + 0 ;
12263: LD_ADDR_VAR 0 2
12267: PUSH
12268: LD_VAR 0 1
12272: PUSH
12273: LD_INT 0
12275: PLUS
12276: ST_TO_ADDR
// end ;
12277: LD_VAR 0 2
12281: RET
// export function IsEmpty ( building ) ; begin
12282: LD_INT 0
12284: PPUSH
// if not building then
12285: LD_VAR 0 1
12289: NOT
12290: IFFALSE 12294
// exit ;
12292: GO 12337
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12294: LD_ADDR_VAR 0 2
12298: PUSH
12299: LD_VAR 0 1
12303: PUSH
12304: LD_INT 22
12306: PUSH
12307: LD_VAR 0 1
12311: PPUSH
12312: CALL_OW 255
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: LD_INT 58
12323: PUSH
12324: EMPTY
12325: LIST
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PPUSH
12331: CALL_OW 69
12335: IN
12336: ST_TO_ADDR
// end ;
12337: LD_VAR 0 2
12341: RET
// export function IsNotFull ( building ) ; var places ; begin
12342: LD_INT 0
12344: PPUSH
12345: PPUSH
// if not building then
12346: LD_VAR 0 1
12350: NOT
12351: IFFALSE 12355
// exit ;
12353: GO 12383
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12355: LD_ADDR_VAR 0 2
12359: PUSH
12360: LD_VAR 0 1
12364: PPUSH
12365: LD_INT 3
12367: PUSH
12368: LD_INT 62
12370: PUSH
12371: EMPTY
12372: LIST
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PPUSH
12378: CALL_OW 72
12382: ST_TO_ADDR
// end ;
12383: LD_VAR 0 2
12387: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12388: LD_INT 0
12390: PPUSH
12391: PPUSH
12392: PPUSH
12393: PPUSH
// tmp := [ ] ;
12394: LD_ADDR_VAR 0 3
12398: PUSH
12399: EMPTY
12400: ST_TO_ADDR
// list := [ ] ;
12401: LD_ADDR_VAR 0 5
12405: PUSH
12406: EMPTY
12407: ST_TO_ADDR
// for i = 16 to 25 do
12408: LD_ADDR_VAR 0 4
12412: PUSH
12413: DOUBLE
12414: LD_INT 16
12416: DEC
12417: ST_TO_ADDR
12418: LD_INT 25
12420: PUSH
12421: FOR_TO
12422: IFFALSE 12495
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12424: LD_ADDR_VAR 0 3
12428: PUSH
12429: LD_VAR 0 3
12433: PUSH
12434: LD_INT 22
12436: PUSH
12437: LD_VAR 0 1
12441: PPUSH
12442: CALL_OW 255
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PUSH
12451: LD_INT 91
12453: PUSH
12454: LD_VAR 0 1
12458: PUSH
12459: LD_INT 6
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 30
12469: PUSH
12470: LD_VAR 0 4
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: LIST
12483: PUSH
12484: EMPTY
12485: LIST
12486: PPUSH
12487: CALL_OW 69
12491: ADD
12492: ST_TO_ADDR
12493: GO 12421
12495: POP
12496: POP
// for i = 1 to tmp do
12497: LD_ADDR_VAR 0 4
12501: PUSH
12502: DOUBLE
12503: LD_INT 1
12505: DEC
12506: ST_TO_ADDR
12507: LD_VAR 0 3
12511: PUSH
12512: FOR_TO
12513: IFFALSE 12601
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12515: LD_ADDR_VAR 0 5
12519: PUSH
12520: LD_VAR 0 5
12524: PUSH
12525: LD_VAR 0 3
12529: PUSH
12530: LD_VAR 0 4
12534: ARRAY
12535: PPUSH
12536: CALL_OW 266
12540: PUSH
12541: LD_VAR 0 3
12545: PUSH
12546: LD_VAR 0 4
12550: ARRAY
12551: PPUSH
12552: CALL_OW 250
12556: PUSH
12557: LD_VAR 0 3
12561: PUSH
12562: LD_VAR 0 4
12566: ARRAY
12567: PPUSH
12568: CALL_OW 251
12572: PUSH
12573: LD_VAR 0 3
12577: PUSH
12578: LD_VAR 0 4
12582: ARRAY
12583: PPUSH
12584: CALL_OW 254
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: ADD
12598: ST_TO_ADDR
12599: GO 12512
12601: POP
12602: POP
// result := list ;
12603: LD_ADDR_VAR 0 2
12607: PUSH
12608: LD_VAR 0 5
12612: ST_TO_ADDR
// end ;
12613: LD_VAR 0 2
12617: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12618: LD_INT 0
12620: PPUSH
12621: PPUSH
12622: PPUSH
12623: PPUSH
12624: PPUSH
12625: PPUSH
12626: PPUSH
// if not factory then
12627: LD_VAR 0 1
12631: NOT
12632: IFFALSE 12636
// exit ;
12634: GO 13239
// if control = control_apeman then
12636: LD_VAR 0 4
12640: PUSH
12641: LD_INT 5
12643: EQUAL
12644: IFFALSE 12753
// begin tmp := UnitsInside ( factory ) ;
12646: LD_ADDR_VAR 0 8
12650: PUSH
12651: LD_VAR 0 1
12655: PPUSH
12656: CALL_OW 313
12660: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12661: LD_VAR 0 8
12665: PPUSH
12666: LD_INT 25
12668: PUSH
12669: LD_INT 12
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PPUSH
12676: CALL_OW 72
12680: NOT
12681: IFFALSE 12691
// control := control_manual ;
12683: LD_ADDR_VAR 0 4
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12691: LD_ADDR_VAR 0 8
12695: PUSH
12696: LD_VAR 0 1
12700: PPUSH
12701: CALL 12388 0 1
12705: ST_TO_ADDR
// if tmp then
12706: LD_VAR 0 8
12710: IFFALSE 12753
// begin for i in tmp do
12712: LD_ADDR_VAR 0 7
12716: PUSH
12717: LD_VAR 0 8
12721: PUSH
12722: FOR_IN
12723: IFFALSE 12751
// if i [ 1 ] = b_ext_radio then
12725: LD_VAR 0 7
12729: PUSH
12730: LD_INT 1
12732: ARRAY
12733: PUSH
12734: LD_INT 22
12736: EQUAL
12737: IFFALSE 12749
// begin control := control_remote ;
12739: LD_ADDR_VAR 0 4
12743: PUSH
12744: LD_INT 2
12746: ST_TO_ADDR
// break ;
12747: GO 12751
// end ;
12749: GO 12722
12751: POP
12752: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12753: LD_VAR 0 1
12757: PPUSH
12758: LD_VAR 0 2
12762: PPUSH
12763: LD_VAR 0 3
12767: PPUSH
12768: LD_VAR 0 4
12772: PPUSH
12773: LD_VAR 0 5
12777: PPUSH
12778: CALL_OW 448
12782: IFFALSE 12817
// begin result := [ chassis , engine , control , weapon ] ;
12784: LD_ADDR_VAR 0 6
12788: PUSH
12789: LD_VAR 0 2
12793: PUSH
12794: LD_VAR 0 3
12798: PUSH
12799: LD_VAR 0 4
12803: PUSH
12804: LD_VAR 0 5
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: ST_TO_ADDR
// exit ;
12815: GO 13239
// end ; _chassis := AvailableChassisList ( factory ) ;
12817: LD_ADDR_VAR 0 9
12821: PUSH
12822: LD_VAR 0 1
12826: PPUSH
12827: CALL_OW 475
12831: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12832: LD_ADDR_VAR 0 11
12836: PUSH
12837: LD_VAR 0 1
12841: PPUSH
12842: CALL_OW 476
12846: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12847: LD_ADDR_VAR 0 12
12851: PUSH
12852: LD_VAR 0 1
12856: PPUSH
12857: CALL_OW 477
12861: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12862: LD_ADDR_VAR 0 10
12866: PUSH
12867: LD_VAR 0 1
12871: PPUSH
12872: CALL_OW 478
12876: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12877: LD_VAR 0 9
12881: NOT
12882: IFTRUE 12891
12884: PUSH
12885: LD_VAR 0 11
12889: NOT
12890: OR
12891: IFTRUE 12900
12893: PUSH
12894: LD_VAR 0 12
12898: NOT
12899: OR
12900: IFTRUE 12909
12902: PUSH
12903: LD_VAR 0 10
12907: NOT
12908: OR
12909: IFFALSE 12944
// begin result := [ chassis , engine , control , weapon ] ;
12911: LD_ADDR_VAR 0 6
12915: PUSH
12916: LD_VAR 0 2
12920: PUSH
12921: LD_VAR 0 3
12925: PUSH
12926: LD_VAR 0 4
12930: PUSH
12931: LD_VAR 0 5
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: ST_TO_ADDR
// exit ;
12942: GO 13239
// end ; if not chassis in _chassis then
12944: LD_VAR 0 2
12948: PUSH
12949: LD_VAR 0 9
12953: IN
12954: NOT
12955: IFFALSE 12981
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12957: LD_ADDR_VAR 0 2
12961: PUSH
12962: LD_VAR 0 9
12966: PUSH
12967: LD_INT 1
12969: PPUSH
12970: LD_VAR 0 9
12974: PPUSH
12975: CALL_OW 12
12979: ARRAY
12980: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12981: LD_VAR 0 2
12985: PPUSH
12986: LD_VAR 0 3
12990: PPUSH
12991: CALL 13244 0 2
12995: NOT
12996: IFFALSE 13057
// repeat engine := _engine [ 1 ] ;
12998: LD_ADDR_VAR 0 3
13002: PUSH
13003: LD_VAR 0 11
13007: PUSH
13008: LD_INT 1
13010: ARRAY
13011: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13012: LD_ADDR_VAR 0 11
13016: PUSH
13017: LD_VAR 0 11
13021: PPUSH
13022: LD_INT 1
13024: PPUSH
13025: CALL_OW 3
13029: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13030: LD_VAR 0 2
13034: PPUSH
13035: LD_VAR 0 3
13039: PPUSH
13040: CALL 13244 0 2
13044: IFTRUE 13055
13046: PUSH
13047: LD_VAR 0 11
13051: PUSH
13052: EMPTY
13053: EQUAL
13054: OR
13055: IFFALSE 12998
// if not control in _control then
13057: LD_VAR 0 4
13061: PUSH
13062: LD_VAR 0 12
13066: IN
13067: NOT
13068: IFFALSE 13094
// control := _control [ rand ( 1 , _control ) ] ;
13070: LD_ADDR_VAR 0 4
13074: PUSH
13075: LD_VAR 0 12
13079: PUSH
13080: LD_INT 1
13082: PPUSH
13083: LD_VAR 0 12
13087: PPUSH
13088: CALL_OW 12
13092: ARRAY
13093: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13094: LD_VAR 0 2
13098: PPUSH
13099: LD_VAR 0 5
13103: PPUSH
13104: CALL 13466 0 2
13108: NOT
13109: IFFALSE 13170
// repeat weapon := _weapon [ 1 ] ;
13111: LD_ADDR_VAR 0 5
13115: PUSH
13116: LD_VAR 0 10
13120: PUSH
13121: LD_INT 1
13123: ARRAY
13124: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13125: LD_ADDR_VAR 0 10
13129: PUSH
13130: LD_VAR 0 10
13134: PPUSH
13135: LD_INT 1
13137: PPUSH
13138: CALL_OW 3
13142: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13143: LD_VAR 0 2
13147: PPUSH
13148: LD_VAR 0 5
13152: PPUSH
13153: CALL 13466 0 2
13157: IFTRUE 13168
13159: PUSH
13160: LD_VAR 0 10
13164: PUSH
13165: EMPTY
13166: EQUAL
13167: OR
13168: IFFALSE 13111
// result := [ ] ;
13170: LD_ADDR_VAR 0 6
13174: PUSH
13175: EMPTY
13176: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13177: LD_VAR 0 1
13181: PPUSH
13182: LD_VAR 0 2
13186: PPUSH
13187: LD_VAR 0 3
13191: PPUSH
13192: LD_VAR 0 4
13196: PPUSH
13197: LD_VAR 0 5
13201: PPUSH
13202: CALL_OW 448
13206: IFFALSE 13239
// result := [ chassis , engine , control , weapon ] ;
13208: LD_ADDR_VAR 0 6
13212: PUSH
13213: LD_VAR 0 2
13217: PUSH
13218: LD_VAR 0 3
13222: PUSH
13223: LD_VAR 0 4
13227: PUSH
13228: LD_VAR 0 5
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: ST_TO_ADDR
// end ;
13239: LD_VAR 0 6
13243: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13244: LD_INT 0
13246: PPUSH
// if not chassis or not engine then
13247: LD_VAR 0 1
13251: NOT
13252: IFTRUE 13261
13254: PUSH
13255: LD_VAR 0 2
13259: NOT
13260: OR
13261: IFFALSE 13265
// exit ;
13263: GO 13461
// case engine of engine_solar :
13265: LD_VAR 0 2
13269: PUSH
13270: LD_INT 2
13272: DOUBLE
13273: EQUAL
13274: IFTRUE 13278
13276: GO 13316
13278: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13279: LD_ADDR_VAR 0 3
13283: PUSH
13284: LD_INT 11
13286: PUSH
13287: LD_INT 12
13289: PUSH
13290: LD_INT 13
13292: PUSH
13293: LD_INT 14
13295: PUSH
13296: LD_INT 1
13298: PUSH
13299: LD_INT 2
13301: PUSH
13302: LD_INT 3
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: ST_TO_ADDR
13314: GO 13445
13316: LD_INT 1
13318: DOUBLE
13319: EQUAL
13320: IFTRUE 13324
13322: GO 13386
13324: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13325: LD_ADDR_VAR 0 3
13329: PUSH
13330: LD_INT 11
13332: PUSH
13333: LD_INT 12
13335: PUSH
13336: LD_INT 13
13338: PUSH
13339: LD_INT 14
13341: PUSH
13342: LD_INT 1
13344: PUSH
13345: LD_INT 2
13347: PUSH
13348: LD_INT 3
13350: PUSH
13351: LD_INT 4
13353: PUSH
13354: LD_INT 5
13356: PUSH
13357: LD_INT 21
13359: PUSH
13360: LD_INT 23
13362: PUSH
13363: LD_INT 22
13365: PUSH
13366: LD_INT 24
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: ST_TO_ADDR
13384: GO 13445
13386: LD_INT 3
13388: DOUBLE
13389: EQUAL
13390: IFTRUE 13394
13392: GO 13444
13394: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13395: LD_ADDR_VAR 0 3
13399: PUSH
13400: LD_INT 13
13402: PUSH
13403: LD_INT 14
13405: PUSH
13406: LD_INT 2
13408: PUSH
13409: LD_INT 3
13411: PUSH
13412: LD_INT 4
13414: PUSH
13415: LD_INT 5
13417: PUSH
13418: LD_INT 21
13420: PUSH
13421: LD_INT 22
13423: PUSH
13424: LD_INT 23
13426: PUSH
13427: LD_INT 24
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: ST_TO_ADDR
13442: GO 13445
13444: POP
// result := ( chassis in result ) ;
13445: LD_ADDR_VAR 0 3
13449: PUSH
13450: LD_VAR 0 1
13454: PUSH
13455: LD_VAR 0 3
13459: IN
13460: ST_TO_ADDR
// end ;
13461: LD_VAR 0 3
13465: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13466: LD_INT 0
13468: PPUSH
// if not chassis or not weapon then
13469: LD_VAR 0 1
13473: NOT
13474: IFTRUE 13483
13476: PUSH
13477: LD_VAR 0 2
13481: NOT
13482: OR
13483: IFFALSE 13487
// exit ;
13485: GO 14547
// case weapon of us_machine_gun :
13487: LD_VAR 0 2
13491: PUSH
13492: LD_INT 2
13494: DOUBLE
13495: EQUAL
13496: IFTRUE 13500
13498: GO 13530
13500: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13501: LD_ADDR_VAR 0 3
13505: PUSH
13506: LD_INT 1
13508: PUSH
13509: LD_INT 2
13511: PUSH
13512: LD_INT 3
13514: PUSH
13515: LD_INT 4
13517: PUSH
13518: LD_INT 5
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: ST_TO_ADDR
13528: GO 14531
13530: LD_INT 3
13532: DOUBLE
13533: EQUAL
13534: IFTRUE 13538
13536: GO 13568
13538: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13539: LD_ADDR_VAR 0 3
13543: PUSH
13544: LD_INT 1
13546: PUSH
13547: LD_INT 2
13549: PUSH
13550: LD_INT 3
13552: PUSH
13553: LD_INT 4
13555: PUSH
13556: LD_INT 5
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: ST_TO_ADDR
13566: GO 14531
13568: LD_INT 11
13570: DOUBLE
13571: EQUAL
13572: IFTRUE 13576
13574: GO 13606
13576: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13577: LD_ADDR_VAR 0 3
13581: PUSH
13582: LD_INT 1
13584: PUSH
13585: LD_INT 2
13587: PUSH
13588: LD_INT 3
13590: PUSH
13591: LD_INT 4
13593: PUSH
13594: LD_INT 5
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: ST_TO_ADDR
13604: GO 14531
13606: LD_INT 4
13608: DOUBLE
13609: EQUAL
13610: IFTRUE 13614
13612: GO 13640
13614: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13615: LD_ADDR_VAR 0 3
13619: PUSH
13620: LD_INT 2
13622: PUSH
13623: LD_INT 3
13625: PUSH
13626: LD_INT 4
13628: PUSH
13629: LD_INT 5
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: ST_TO_ADDR
13638: GO 14531
13640: LD_INT 5
13642: DOUBLE
13643: EQUAL
13644: IFTRUE 13648
13646: GO 13674
13648: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13649: LD_ADDR_VAR 0 3
13653: PUSH
13654: LD_INT 2
13656: PUSH
13657: LD_INT 3
13659: PUSH
13660: LD_INT 4
13662: PUSH
13663: LD_INT 5
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: ST_TO_ADDR
13672: GO 14531
13674: LD_INT 9
13676: DOUBLE
13677: EQUAL
13678: IFTRUE 13682
13680: GO 13708
13682: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13683: LD_ADDR_VAR 0 3
13687: PUSH
13688: LD_INT 2
13690: PUSH
13691: LD_INT 3
13693: PUSH
13694: LD_INT 4
13696: PUSH
13697: LD_INT 5
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: ST_TO_ADDR
13706: GO 14531
13708: LD_INT 7
13710: DOUBLE
13711: EQUAL
13712: IFTRUE 13716
13714: GO 13742
13716: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13717: LD_ADDR_VAR 0 3
13721: PUSH
13722: LD_INT 2
13724: PUSH
13725: LD_INT 3
13727: PUSH
13728: LD_INT 4
13730: PUSH
13731: LD_INT 5
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: ST_TO_ADDR
13740: GO 14531
13742: LD_INT 12
13744: DOUBLE
13745: EQUAL
13746: IFTRUE 13750
13748: GO 13776
13750: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13751: LD_ADDR_VAR 0 3
13755: PUSH
13756: LD_INT 2
13758: PUSH
13759: LD_INT 3
13761: PUSH
13762: LD_INT 4
13764: PUSH
13765: LD_INT 5
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: ST_TO_ADDR
13774: GO 14531
13776: LD_INT 13
13778: DOUBLE
13779: EQUAL
13780: IFTRUE 13784
13782: GO 13810
13784: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13785: LD_ADDR_VAR 0 3
13789: PUSH
13790: LD_INT 2
13792: PUSH
13793: LD_INT 3
13795: PUSH
13796: LD_INT 4
13798: PUSH
13799: LD_INT 5
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: ST_TO_ADDR
13808: GO 14531
13810: LD_INT 14
13812: DOUBLE
13813: EQUAL
13814: IFTRUE 13818
13816: GO 13836
13818: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13819: LD_ADDR_VAR 0 3
13823: PUSH
13824: LD_INT 4
13826: PUSH
13827: LD_INT 5
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: ST_TO_ADDR
13834: GO 14531
13836: LD_INT 6
13838: DOUBLE
13839: EQUAL
13840: IFTRUE 13844
13842: GO 13862
13844: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13845: LD_ADDR_VAR 0 3
13849: PUSH
13850: LD_INT 4
13852: PUSH
13853: LD_INT 5
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: ST_TO_ADDR
13860: GO 14531
13862: LD_INT 10
13864: DOUBLE
13865: EQUAL
13866: IFTRUE 13870
13868: GO 13888
13870: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13871: LD_ADDR_VAR 0 3
13875: PUSH
13876: LD_INT 4
13878: PUSH
13879: LD_INT 5
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: ST_TO_ADDR
13886: GO 14531
13888: LD_INT 22
13890: DOUBLE
13891: EQUAL
13892: IFTRUE 13896
13894: GO 13922
13896: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13897: LD_ADDR_VAR 0 3
13901: PUSH
13902: LD_INT 11
13904: PUSH
13905: LD_INT 12
13907: PUSH
13908: LD_INT 13
13910: PUSH
13911: LD_INT 14
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: ST_TO_ADDR
13920: GO 14531
13922: LD_INT 23
13924: DOUBLE
13925: EQUAL
13926: IFTRUE 13930
13928: GO 13956
13930: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13931: LD_ADDR_VAR 0 3
13935: PUSH
13936: LD_INT 11
13938: PUSH
13939: LD_INT 12
13941: PUSH
13942: LD_INT 13
13944: PUSH
13945: LD_INT 14
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: ST_TO_ADDR
13954: GO 14531
13956: LD_INT 24
13958: DOUBLE
13959: EQUAL
13960: IFTRUE 13964
13962: GO 13990
13964: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13965: LD_ADDR_VAR 0 3
13969: PUSH
13970: LD_INT 11
13972: PUSH
13973: LD_INT 12
13975: PUSH
13976: LD_INT 13
13978: PUSH
13979: LD_INT 14
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: ST_TO_ADDR
13988: GO 14531
13990: LD_INT 30
13992: DOUBLE
13993: EQUAL
13994: IFTRUE 13998
13996: GO 14024
13998: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13999: LD_ADDR_VAR 0 3
14003: PUSH
14004: LD_INT 11
14006: PUSH
14007: LD_INT 12
14009: PUSH
14010: LD_INT 13
14012: PUSH
14013: LD_INT 14
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: ST_TO_ADDR
14022: GO 14531
14024: LD_INT 25
14026: DOUBLE
14027: EQUAL
14028: IFTRUE 14032
14030: GO 14050
14032: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14033: LD_ADDR_VAR 0 3
14037: PUSH
14038: LD_INT 13
14040: PUSH
14041: LD_INT 14
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: ST_TO_ADDR
14048: GO 14531
14050: LD_INT 27
14052: DOUBLE
14053: EQUAL
14054: IFTRUE 14058
14056: GO 14076
14058: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14059: LD_ADDR_VAR 0 3
14063: PUSH
14064: LD_INT 13
14066: PUSH
14067: LD_INT 14
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: ST_TO_ADDR
14074: GO 14531
14076: LD_INT 92
14078: DOUBLE
14079: EQUAL
14080: IFTRUE 14084
14082: GO 14110
14084: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14085: LD_ADDR_VAR 0 3
14089: PUSH
14090: LD_INT 11
14092: PUSH
14093: LD_INT 12
14095: PUSH
14096: LD_INT 13
14098: PUSH
14099: LD_INT 14
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: ST_TO_ADDR
14108: GO 14531
14110: LD_INT 28
14112: DOUBLE
14113: EQUAL
14114: IFTRUE 14118
14116: GO 14136
14118: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14119: LD_ADDR_VAR 0 3
14123: PUSH
14124: LD_INT 13
14126: PUSH
14127: LD_INT 14
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: ST_TO_ADDR
14134: GO 14531
14136: LD_INT 29
14138: DOUBLE
14139: EQUAL
14140: IFTRUE 14144
14142: GO 14162
14144: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14145: LD_ADDR_VAR 0 3
14149: PUSH
14150: LD_INT 13
14152: PUSH
14153: LD_INT 14
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: ST_TO_ADDR
14160: GO 14531
14162: LD_INT 31
14164: DOUBLE
14165: EQUAL
14166: IFTRUE 14170
14168: GO 14188
14170: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14171: LD_ADDR_VAR 0 3
14175: PUSH
14176: LD_INT 13
14178: PUSH
14179: LD_INT 14
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: ST_TO_ADDR
14186: GO 14531
14188: LD_INT 26
14190: DOUBLE
14191: EQUAL
14192: IFTRUE 14196
14194: GO 14214
14196: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14197: LD_ADDR_VAR 0 3
14201: PUSH
14202: LD_INT 13
14204: PUSH
14205: LD_INT 14
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: ST_TO_ADDR
14212: GO 14531
14214: LD_INT 42
14216: DOUBLE
14217: EQUAL
14218: IFTRUE 14222
14220: GO 14248
14222: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14223: LD_ADDR_VAR 0 3
14227: PUSH
14228: LD_INT 21
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_INT 23
14236: PUSH
14237: LD_INT 24
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: ST_TO_ADDR
14246: GO 14531
14248: LD_INT 43
14250: DOUBLE
14251: EQUAL
14252: IFTRUE 14256
14254: GO 14282
14256: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14257: LD_ADDR_VAR 0 3
14261: PUSH
14262: LD_INT 21
14264: PUSH
14265: LD_INT 22
14267: PUSH
14268: LD_INT 23
14270: PUSH
14271: LD_INT 24
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: ST_TO_ADDR
14280: GO 14531
14282: LD_INT 44
14284: DOUBLE
14285: EQUAL
14286: IFTRUE 14290
14288: GO 14316
14290: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14291: LD_ADDR_VAR 0 3
14295: PUSH
14296: LD_INT 21
14298: PUSH
14299: LD_INT 22
14301: PUSH
14302: LD_INT 23
14304: PUSH
14305: LD_INT 24
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: ST_TO_ADDR
14314: GO 14531
14316: LD_INT 45
14318: DOUBLE
14319: EQUAL
14320: IFTRUE 14324
14322: GO 14350
14324: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14325: LD_ADDR_VAR 0 3
14329: PUSH
14330: LD_INT 21
14332: PUSH
14333: LD_INT 22
14335: PUSH
14336: LD_INT 23
14338: PUSH
14339: LD_INT 24
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: ST_TO_ADDR
14348: GO 14531
14350: LD_INT 49
14352: DOUBLE
14353: EQUAL
14354: IFTRUE 14358
14356: GO 14384
14358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14359: LD_ADDR_VAR 0 3
14363: PUSH
14364: LD_INT 21
14366: PUSH
14367: LD_INT 22
14369: PUSH
14370: LD_INT 23
14372: PUSH
14373: LD_INT 24
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: ST_TO_ADDR
14382: GO 14531
14384: LD_INT 51
14386: DOUBLE
14387: EQUAL
14388: IFTRUE 14392
14390: GO 14418
14392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14393: LD_ADDR_VAR 0 3
14397: PUSH
14398: LD_INT 21
14400: PUSH
14401: LD_INT 22
14403: PUSH
14404: LD_INT 23
14406: PUSH
14407: LD_INT 24
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: ST_TO_ADDR
14416: GO 14531
14418: LD_INT 52
14420: DOUBLE
14421: EQUAL
14422: IFTRUE 14426
14424: GO 14452
14426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14427: LD_ADDR_VAR 0 3
14431: PUSH
14432: LD_INT 21
14434: PUSH
14435: LD_INT 22
14437: PUSH
14438: LD_INT 23
14440: PUSH
14441: LD_INT 24
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: ST_TO_ADDR
14450: GO 14531
14452: LD_INT 53
14454: DOUBLE
14455: EQUAL
14456: IFTRUE 14460
14458: GO 14478
14460: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14461: LD_ADDR_VAR 0 3
14465: PUSH
14466: LD_INT 23
14468: PUSH
14469: LD_INT 24
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: ST_TO_ADDR
14476: GO 14531
14478: LD_INT 46
14480: DOUBLE
14481: EQUAL
14482: IFTRUE 14486
14484: GO 14504
14486: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14487: LD_ADDR_VAR 0 3
14491: PUSH
14492: LD_INT 23
14494: PUSH
14495: LD_INT 24
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: ST_TO_ADDR
14502: GO 14531
14504: LD_INT 47
14506: DOUBLE
14507: EQUAL
14508: IFTRUE 14512
14510: GO 14530
14512: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14513: LD_ADDR_VAR 0 3
14517: PUSH
14518: LD_INT 23
14520: PUSH
14521: LD_INT 24
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: ST_TO_ADDR
14528: GO 14531
14530: POP
// result := ( chassis in result ) ;
14531: LD_ADDR_VAR 0 3
14535: PUSH
14536: LD_VAR 0 1
14540: PUSH
14541: LD_VAR 0 3
14545: IN
14546: ST_TO_ADDR
// end ;
14547: LD_VAR 0 3
14551: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14552: LD_INT 0
14554: PPUSH
14555: PPUSH
14556: PPUSH
14557: PPUSH
14558: PPUSH
14559: PPUSH
14560: PPUSH
// result := array ;
14561: LD_ADDR_VAR 0 5
14565: PUSH
14566: LD_VAR 0 1
14570: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14571: LD_VAR 0 1
14575: NOT
14576: IFTRUE 14585
14578: PUSH
14579: LD_VAR 0 2
14583: NOT
14584: OR
14585: IFTRUE 14594
14587: PUSH
14588: LD_VAR 0 3
14592: NOT
14593: OR
14594: IFTRUE 14608
14596: PUSH
14597: LD_VAR 0 2
14601: PUSH
14602: LD_VAR 0 1
14606: GREATER
14607: OR
14608: IFTRUE 14622
14610: PUSH
14611: LD_VAR 0 3
14615: PUSH
14616: LD_VAR 0 1
14620: GREATER
14621: OR
14622: IFFALSE 14626
// exit ;
14624: GO 14922
// if direction then
14626: LD_VAR 0 4
14630: IFFALSE 14694
// begin d := 1 ;
14632: LD_ADDR_VAR 0 9
14636: PUSH
14637: LD_INT 1
14639: ST_TO_ADDR
// if i_from > i_to then
14640: LD_VAR 0 2
14644: PUSH
14645: LD_VAR 0 3
14649: GREATER
14650: IFFALSE 14676
// length := ( array - i_from ) + i_to else
14652: LD_ADDR_VAR 0 11
14656: PUSH
14657: LD_VAR 0 1
14661: PUSH
14662: LD_VAR 0 2
14666: MINUS
14667: PUSH
14668: LD_VAR 0 3
14672: PLUS
14673: ST_TO_ADDR
14674: GO 14692
// length := i_to - i_from ;
14676: LD_ADDR_VAR 0 11
14680: PUSH
14681: LD_VAR 0 3
14685: PUSH
14686: LD_VAR 0 2
14690: MINUS
14691: ST_TO_ADDR
// end else
14692: GO 14755
// begin d := - 1 ;
14694: LD_ADDR_VAR 0 9
14698: PUSH
14699: LD_INT 1
14701: NEG
14702: ST_TO_ADDR
// if i_from > i_to then
14703: LD_VAR 0 2
14707: PUSH
14708: LD_VAR 0 3
14712: GREATER
14713: IFFALSE 14733
// length := i_from - i_to else
14715: LD_ADDR_VAR 0 11
14719: PUSH
14720: LD_VAR 0 2
14724: PUSH
14725: LD_VAR 0 3
14729: MINUS
14730: ST_TO_ADDR
14731: GO 14755
// length := ( array - i_to ) + i_from ;
14733: LD_ADDR_VAR 0 11
14737: PUSH
14738: LD_VAR 0 1
14742: PUSH
14743: LD_VAR 0 3
14747: MINUS
14748: PUSH
14749: LD_VAR 0 2
14753: PLUS
14754: ST_TO_ADDR
// end ; if not length then
14755: LD_VAR 0 11
14759: NOT
14760: IFFALSE 14764
// exit ;
14762: GO 14922
// tmp := array ;
14764: LD_ADDR_VAR 0 10
14768: PUSH
14769: LD_VAR 0 1
14773: ST_TO_ADDR
// for i = 1 to length do
14774: LD_ADDR_VAR 0 6
14778: PUSH
14779: DOUBLE
14780: LD_INT 1
14782: DEC
14783: ST_TO_ADDR
14784: LD_VAR 0 11
14788: PUSH
14789: FOR_TO
14790: IFFALSE 14910
// begin for j = 1 to array do
14792: LD_ADDR_VAR 0 7
14796: PUSH
14797: DOUBLE
14798: LD_INT 1
14800: DEC
14801: ST_TO_ADDR
14802: LD_VAR 0 1
14806: PUSH
14807: FOR_TO
14808: IFFALSE 14896
// begin k := j + d ;
14810: LD_ADDR_VAR 0 8
14814: PUSH
14815: LD_VAR 0 7
14819: PUSH
14820: LD_VAR 0 9
14824: PLUS
14825: ST_TO_ADDR
// if k > array then
14826: LD_VAR 0 8
14830: PUSH
14831: LD_VAR 0 1
14835: GREATER
14836: IFFALSE 14846
// k := 1 ;
14838: LD_ADDR_VAR 0 8
14842: PUSH
14843: LD_INT 1
14845: ST_TO_ADDR
// if not k then
14846: LD_VAR 0 8
14850: NOT
14851: IFFALSE 14863
// k := array ;
14853: LD_ADDR_VAR 0 8
14857: PUSH
14858: LD_VAR 0 1
14862: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14863: LD_ADDR_VAR 0 10
14867: PUSH
14868: LD_VAR 0 10
14872: PPUSH
14873: LD_VAR 0 8
14877: PPUSH
14878: LD_VAR 0 1
14882: PUSH
14883: LD_VAR 0 7
14887: ARRAY
14888: PPUSH
14889: CALL_OW 1
14893: ST_TO_ADDR
// end ;
14894: GO 14807
14896: POP
14897: POP
// array := tmp ;
14898: LD_ADDR_VAR 0 1
14902: PUSH
14903: LD_VAR 0 10
14907: ST_TO_ADDR
// end ;
14908: GO 14789
14910: POP
14911: POP
// result := array ;
14912: LD_ADDR_VAR 0 5
14916: PUSH
14917: LD_VAR 0 1
14921: ST_TO_ADDR
// end ;
14922: LD_VAR 0 5
14926: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14927: LD_INT 0
14929: PPUSH
14930: PPUSH
// result := 0 ;
14931: LD_ADDR_VAR 0 3
14935: PUSH
14936: LD_INT 0
14938: ST_TO_ADDR
// if not array or not value in array then
14939: LD_VAR 0 1
14943: NOT
14944: IFTRUE 14959
14946: PUSH
14947: LD_VAR 0 2
14951: PUSH
14952: LD_VAR 0 1
14956: IN
14957: NOT
14958: OR
14959: IFFALSE 14963
// exit ;
14961: GO 15017
// for i = 1 to array do
14963: LD_ADDR_VAR 0 4
14967: PUSH
14968: DOUBLE
14969: LD_INT 1
14971: DEC
14972: ST_TO_ADDR
14973: LD_VAR 0 1
14977: PUSH
14978: FOR_TO
14979: IFFALSE 15015
// if value = array [ i ] then
14981: LD_VAR 0 2
14985: PUSH
14986: LD_VAR 0 1
14990: PUSH
14991: LD_VAR 0 4
14995: ARRAY
14996: EQUAL
14997: IFFALSE 15013
// begin result := i ;
14999: LD_ADDR_VAR 0 3
15003: PUSH
15004: LD_VAR 0 4
15008: ST_TO_ADDR
// exit ;
15009: POP
15010: POP
15011: GO 15017
// end ;
15013: GO 14978
15015: POP
15016: POP
// end ;
15017: LD_VAR 0 3
15021: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15022: LD_INT 0
15024: PPUSH
// vc_chassis := chassis ;
15025: LD_ADDR_OWVAR 37
15029: PUSH
15030: LD_VAR 0 1
15034: ST_TO_ADDR
// vc_engine := engine ;
15035: LD_ADDR_OWVAR 39
15039: PUSH
15040: LD_VAR 0 2
15044: ST_TO_ADDR
// vc_control := control ;
15045: LD_ADDR_OWVAR 38
15049: PUSH
15050: LD_VAR 0 3
15054: ST_TO_ADDR
// vc_weapon := weapon ;
15055: LD_ADDR_OWVAR 40
15059: PUSH
15060: LD_VAR 0 4
15064: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15065: LD_ADDR_OWVAR 41
15069: PUSH
15070: LD_VAR 0 5
15074: ST_TO_ADDR
// end ;
15075: LD_VAR 0 6
15079: RET
// export function WantPlant ( unit ) ; var task ; begin
15080: LD_INT 0
15082: PPUSH
15083: PPUSH
// result := false ;
15084: LD_ADDR_VAR 0 2
15088: PUSH
15089: LD_INT 0
15091: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15092: LD_ADDR_VAR 0 3
15096: PUSH
15097: LD_VAR 0 1
15101: PPUSH
15102: CALL_OW 437
15106: ST_TO_ADDR
// if task then
15107: LD_VAR 0 3
15111: IFFALSE 15139
// if task [ 1 ] [ 1 ] = p then
15113: LD_VAR 0 3
15117: PUSH
15118: LD_INT 1
15120: ARRAY
15121: PUSH
15122: LD_INT 1
15124: ARRAY
15125: PUSH
15126: LD_STRING p
15128: EQUAL
15129: IFFALSE 15139
// result := true ;
15131: LD_ADDR_VAR 0 2
15135: PUSH
15136: LD_INT 1
15138: ST_TO_ADDR
// end ;
15139: LD_VAR 0 2
15143: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15144: LD_INT 0
15146: PPUSH
15147: PPUSH
15148: PPUSH
15149: PPUSH
// if pos < 1 then
15150: LD_VAR 0 2
15154: PUSH
15155: LD_INT 1
15157: LESS
15158: IFFALSE 15162
// exit ;
15160: GO 15465
// if pos = 1 then
15162: LD_VAR 0 2
15166: PUSH
15167: LD_INT 1
15169: EQUAL
15170: IFFALSE 15203
// result := Replace ( arr , pos [ 1 ] , value ) else
15172: LD_ADDR_VAR 0 4
15176: PUSH
15177: LD_VAR 0 1
15181: PPUSH
15182: LD_VAR 0 2
15186: PUSH
15187: LD_INT 1
15189: ARRAY
15190: PPUSH
15191: LD_VAR 0 3
15195: PPUSH
15196: CALL_OW 1
15200: ST_TO_ADDR
15201: GO 15465
// begin tmp := arr ;
15203: LD_ADDR_VAR 0 6
15207: PUSH
15208: LD_VAR 0 1
15212: ST_TO_ADDR
// s_arr := [ tmp ] ;
15213: LD_ADDR_VAR 0 7
15217: PUSH
15218: LD_VAR 0 6
15222: PUSH
15223: EMPTY
15224: LIST
15225: ST_TO_ADDR
// for i = 1 to pos - 1 do
15226: LD_ADDR_VAR 0 5
15230: PUSH
15231: DOUBLE
15232: LD_INT 1
15234: DEC
15235: ST_TO_ADDR
15236: LD_VAR 0 2
15240: PUSH
15241: LD_INT 1
15243: MINUS
15244: PUSH
15245: FOR_TO
15246: IFFALSE 15291
// begin tmp := tmp [ pos [ i ] ] ;
15248: LD_ADDR_VAR 0 6
15252: PUSH
15253: LD_VAR 0 6
15257: PUSH
15258: LD_VAR 0 2
15262: PUSH
15263: LD_VAR 0 5
15267: ARRAY
15268: ARRAY
15269: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15270: LD_ADDR_VAR 0 7
15274: PUSH
15275: LD_VAR 0 7
15279: PUSH
15280: LD_VAR 0 6
15284: PUSH
15285: EMPTY
15286: LIST
15287: ADD
15288: ST_TO_ADDR
// end ;
15289: GO 15245
15291: POP
15292: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15293: LD_ADDR_VAR 0 6
15297: PUSH
15298: LD_VAR 0 6
15302: PPUSH
15303: LD_VAR 0 2
15307: PUSH
15308: LD_VAR 0 2
15312: ARRAY
15313: PPUSH
15314: LD_VAR 0 3
15318: PPUSH
15319: CALL_OW 1
15323: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15324: LD_ADDR_VAR 0 7
15328: PUSH
15329: LD_VAR 0 7
15333: PPUSH
15334: LD_VAR 0 7
15338: PPUSH
15339: LD_VAR 0 6
15343: PPUSH
15344: CALL_OW 1
15348: ST_TO_ADDR
// for i = s_arr downto 2 do
15349: LD_ADDR_VAR 0 5
15353: PUSH
15354: DOUBLE
15355: LD_VAR 0 7
15359: INC
15360: ST_TO_ADDR
15361: LD_INT 2
15363: PUSH
15364: FOR_DOWNTO
15365: IFFALSE 15449
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15367: LD_ADDR_VAR 0 6
15371: PUSH
15372: LD_VAR 0 7
15376: PUSH
15377: LD_VAR 0 5
15381: PUSH
15382: LD_INT 1
15384: MINUS
15385: ARRAY
15386: PPUSH
15387: LD_VAR 0 2
15391: PUSH
15392: LD_VAR 0 5
15396: PUSH
15397: LD_INT 1
15399: MINUS
15400: ARRAY
15401: PPUSH
15402: LD_VAR 0 7
15406: PUSH
15407: LD_VAR 0 5
15411: ARRAY
15412: PPUSH
15413: CALL_OW 1
15417: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15418: LD_ADDR_VAR 0 7
15422: PUSH
15423: LD_VAR 0 7
15427: PPUSH
15428: LD_VAR 0 5
15432: PUSH
15433: LD_INT 1
15435: MINUS
15436: PPUSH
15437: LD_VAR 0 6
15441: PPUSH
15442: CALL_OW 1
15446: ST_TO_ADDR
// end ;
15447: GO 15364
15449: POP
15450: POP
// result := s_arr [ 1 ] ;
15451: LD_ADDR_VAR 0 4
15455: PUSH
15456: LD_VAR 0 7
15460: PUSH
15461: LD_INT 1
15463: ARRAY
15464: ST_TO_ADDR
// end ; end ;
15465: LD_VAR 0 4
15469: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15470: LD_INT 0
15472: PPUSH
15473: PPUSH
// if not list then
15474: LD_VAR 0 1
15478: NOT
15479: IFFALSE 15483
// exit ;
15481: GO 15574
// i := list [ pos1 ] ;
15483: LD_ADDR_VAR 0 5
15487: PUSH
15488: LD_VAR 0 1
15492: PUSH
15493: LD_VAR 0 2
15497: ARRAY
15498: ST_TO_ADDR
// if not i then
15499: LD_VAR 0 5
15503: NOT
15504: IFFALSE 15508
// exit ;
15506: GO 15574
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15508: LD_ADDR_VAR 0 1
15512: PUSH
15513: LD_VAR 0 1
15517: PPUSH
15518: LD_VAR 0 2
15522: PPUSH
15523: LD_VAR 0 1
15527: PUSH
15528: LD_VAR 0 3
15532: ARRAY
15533: PPUSH
15534: CALL_OW 1
15538: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15539: LD_ADDR_VAR 0 1
15543: PUSH
15544: LD_VAR 0 1
15548: PPUSH
15549: LD_VAR 0 3
15553: PPUSH
15554: LD_VAR 0 5
15558: PPUSH
15559: CALL_OW 1
15563: ST_TO_ADDR
// result := list ;
15564: LD_ADDR_VAR 0 4
15568: PUSH
15569: LD_VAR 0 1
15573: ST_TO_ADDR
// end ;
15574: LD_VAR 0 4
15578: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15579: LD_INT 0
15581: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15582: LD_ADDR_VAR 0 5
15586: PUSH
15587: LD_VAR 0 1
15591: PPUSH
15592: CALL_OW 250
15596: PPUSH
15597: LD_VAR 0 1
15601: PPUSH
15602: CALL_OW 251
15606: PPUSH
15607: LD_VAR 0 2
15611: PPUSH
15612: LD_VAR 0 3
15616: PPUSH
15617: LD_VAR 0 4
15621: PPUSH
15622: CALL 16004 0 5
15626: ST_TO_ADDR
// end ;
15627: LD_VAR 0 5
15631: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15632: LD_INT 0
15634: PPUSH
15635: PPUSH
15636: PPUSH
15637: PPUSH
// if not list or not unit then
15638: LD_VAR 0 2
15642: NOT
15643: IFTRUE 15652
15645: PUSH
15646: LD_VAR 0 1
15650: NOT
15651: OR
15652: IFFALSE 15656
// exit ;
15654: GO 15999
// result := [ ] ;
15656: LD_ADDR_VAR 0 5
15660: PUSH
15661: EMPTY
15662: ST_TO_ADDR
// for i in list do
15663: LD_ADDR_VAR 0 6
15667: PUSH
15668: LD_VAR 0 2
15672: PUSH
15673: FOR_IN
15674: IFFALSE 15892
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15676: LD_ADDR_VAR 0 8
15680: PUSH
15681: LD_VAR 0 1
15685: PPUSH
15686: LD_VAR 0 6
15690: PUSH
15691: LD_INT 1
15693: ARRAY
15694: PPUSH
15695: LD_VAR 0 6
15699: PUSH
15700: LD_INT 2
15702: ARRAY
15703: PPUSH
15704: CALL_OW 297
15708: ST_TO_ADDR
// if not Count ( result ) then
15709: LD_VAR 0 5
15713: PPUSH
15714: CALL 12260 0 1
15718: NOT
15719: IFFALSE 15752
// begin result := Join ( result , [ i , tmp ] ) ;
15721: LD_ADDR_VAR 0 5
15725: PUSH
15726: LD_VAR 0 5
15730: PPUSH
15731: LD_VAR 0 6
15735: PUSH
15736: LD_VAR 0 8
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PPUSH
15745: CALL 48192 0 2
15749: ST_TO_ADDR
// continue ;
15750: GO 15673
// end ; if result [ result ] [ 2 ] <= tmp then
15752: LD_VAR 0 5
15756: PUSH
15757: LD_VAR 0 5
15761: ARRAY
15762: PUSH
15763: LD_INT 2
15765: ARRAY
15766: PUSH
15767: LD_VAR 0 8
15771: LESSEQUAL
15772: IFFALSE 15805
// result := Join ( result , [ i , tmp ] ) else
15774: LD_ADDR_VAR 0 5
15778: PUSH
15779: LD_VAR 0 5
15783: PPUSH
15784: LD_VAR 0 6
15788: PUSH
15789: LD_VAR 0 8
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PPUSH
15798: CALL 48192 0 2
15802: ST_TO_ADDR
15803: GO 15890
// begin for j := 1 to Count ( result ) do
15805: LD_ADDR_VAR 0 7
15809: PUSH
15810: DOUBLE
15811: LD_INT 1
15813: DEC
15814: ST_TO_ADDR
15815: LD_VAR 0 5
15819: PPUSH
15820: CALL 12260 0 1
15824: PUSH
15825: FOR_TO
15826: IFFALSE 15888
// begin if tmp < result [ j ] [ 2 ] then
15828: LD_VAR 0 8
15832: PUSH
15833: LD_VAR 0 5
15837: PUSH
15838: LD_VAR 0 7
15842: ARRAY
15843: PUSH
15844: LD_INT 2
15846: ARRAY
15847: LESS
15848: IFFALSE 15886
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15850: LD_ADDR_VAR 0 5
15854: PUSH
15855: LD_VAR 0 5
15859: PPUSH
15860: LD_VAR 0 7
15864: PPUSH
15865: LD_VAR 0 6
15869: PUSH
15870: LD_VAR 0 8
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PPUSH
15879: CALL_OW 2
15883: ST_TO_ADDR
// break ;
15884: GO 15888
// end ; end ;
15886: GO 15825
15888: POP
15889: POP
// end ; end ;
15890: GO 15673
15892: POP
15893: POP
// if result and not asc then
15894: LD_VAR 0 5
15898: IFFALSE 15907
15900: PUSH
15901: LD_VAR 0 3
15905: NOT
15906: AND
15907: IFFALSE 15924
// result := ReverseArray ( result ) ;
15909: LD_ADDR_VAR 0 5
15913: PUSH
15914: LD_VAR 0 5
15918: PPUSH
15919: CALL 43282 0 1
15923: ST_TO_ADDR
// tmp := [ ] ;
15924: LD_ADDR_VAR 0 8
15928: PUSH
15929: EMPTY
15930: ST_TO_ADDR
// if mode then
15931: LD_VAR 0 4
15935: IFFALSE 15999
// begin for i := 1 to result do
15937: LD_ADDR_VAR 0 6
15941: PUSH
15942: DOUBLE
15943: LD_INT 1
15945: DEC
15946: ST_TO_ADDR
15947: LD_VAR 0 5
15951: PUSH
15952: FOR_TO
15953: IFFALSE 15987
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15955: LD_ADDR_VAR 0 8
15959: PUSH
15960: LD_VAR 0 8
15964: PPUSH
15965: LD_VAR 0 5
15969: PUSH
15970: LD_VAR 0 6
15974: ARRAY
15975: PUSH
15976: LD_INT 1
15978: ARRAY
15979: PPUSH
15980: CALL 48192 0 2
15984: ST_TO_ADDR
15985: GO 15952
15987: POP
15988: POP
// result := tmp ;
15989: LD_ADDR_VAR 0 5
15993: PUSH
15994: LD_VAR 0 8
15998: ST_TO_ADDR
// end ; end ;
15999: LD_VAR 0 5
16003: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16004: LD_INT 0
16006: PPUSH
16007: PPUSH
16008: PPUSH
16009: PPUSH
// if not list then
16010: LD_VAR 0 3
16014: NOT
16015: IFFALSE 16019
// exit ;
16017: GO 16409
// result := [ ] ;
16019: LD_ADDR_VAR 0 6
16023: PUSH
16024: EMPTY
16025: ST_TO_ADDR
// for i in list do
16026: LD_ADDR_VAR 0 7
16030: PUSH
16031: LD_VAR 0 3
16035: PUSH
16036: FOR_IN
16037: IFFALSE 16239
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16039: LD_ADDR_VAR 0 9
16043: PUSH
16044: LD_VAR 0 7
16048: PPUSH
16049: LD_VAR 0 1
16053: PPUSH
16054: LD_VAR 0 2
16058: PPUSH
16059: CALL_OW 297
16063: ST_TO_ADDR
// if not result then
16064: LD_VAR 0 6
16068: NOT
16069: IFFALSE 16095
// result := [ [ i , tmp ] ] else
16071: LD_ADDR_VAR 0 6
16075: PUSH
16076: LD_VAR 0 7
16080: PUSH
16081: LD_VAR 0 9
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: EMPTY
16091: LIST
16092: ST_TO_ADDR
16093: GO 16237
// begin if result [ result ] [ 2 ] <= tmp then
16095: LD_VAR 0 6
16099: PUSH
16100: LD_VAR 0 6
16104: ARRAY
16105: PUSH
16106: LD_INT 2
16108: ARRAY
16109: PUSH
16110: LD_VAR 0 9
16114: LESSEQUAL
16115: IFFALSE 16157
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16117: LD_ADDR_VAR 0 6
16121: PUSH
16122: LD_VAR 0 6
16126: PPUSH
16127: LD_VAR 0 6
16131: PUSH
16132: LD_INT 1
16134: PLUS
16135: PPUSH
16136: LD_VAR 0 7
16140: PUSH
16141: LD_VAR 0 9
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PPUSH
16150: CALL_OW 2
16154: ST_TO_ADDR
16155: GO 16237
// for j := 1 to result do
16157: LD_ADDR_VAR 0 8
16161: PUSH
16162: DOUBLE
16163: LD_INT 1
16165: DEC
16166: ST_TO_ADDR
16167: LD_VAR 0 6
16171: PUSH
16172: FOR_TO
16173: IFFALSE 16235
// begin if tmp < result [ j ] [ 2 ] then
16175: LD_VAR 0 9
16179: PUSH
16180: LD_VAR 0 6
16184: PUSH
16185: LD_VAR 0 8
16189: ARRAY
16190: PUSH
16191: LD_INT 2
16193: ARRAY
16194: LESS
16195: IFFALSE 16233
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16197: LD_ADDR_VAR 0 6
16201: PUSH
16202: LD_VAR 0 6
16206: PPUSH
16207: LD_VAR 0 8
16211: PPUSH
16212: LD_VAR 0 7
16216: PUSH
16217: LD_VAR 0 9
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PPUSH
16226: CALL_OW 2
16230: ST_TO_ADDR
// break ;
16231: GO 16235
// end ; end ;
16233: GO 16172
16235: POP
16236: POP
// end ; end ;
16237: GO 16036
16239: POP
16240: POP
// if result and not asc then
16241: LD_VAR 0 6
16245: IFFALSE 16254
16247: PUSH
16248: LD_VAR 0 4
16252: NOT
16253: AND
16254: IFFALSE 16329
// begin tmp := result ;
16256: LD_ADDR_VAR 0 9
16260: PUSH
16261: LD_VAR 0 6
16265: ST_TO_ADDR
// for i = tmp downto 1 do
16266: LD_ADDR_VAR 0 7
16270: PUSH
16271: DOUBLE
16272: LD_VAR 0 9
16276: INC
16277: ST_TO_ADDR
16278: LD_INT 1
16280: PUSH
16281: FOR_DOWNTO
16282: IFFALSE 16327
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16284: LD_ADDR_VAR 0 6
16288: PUSH
16289: LD_VAR 0 6
16293: PPUSH
16294: LD_VAR 0 9
16298: PUSH
16299: LD_VAR 0 7
16303: MINUS
16304: PUSH
16305: LD_INT 1
16307: PLUS
16308: PPUSH
16309: LD_VAR 0 9
16313: PUSH
16314: LD_VAR 0 7
16318: ARRAY
16319: PPUSH
16320: CALL_OW 1
16324: ST_TO_ADDR
16325: GO 16281
16327: POP
16328: POP
// end ; tmp := [ ] ;
16329: LD_ADDR_VAR 0 9
16333: PUSH
16334: EMPTY
16335: ST_TO_ADDR
// if mode then
16336: LD_VAR 0 5
16340: IFFALSE 16409
// begin for i = 1 to result do
16342: LD_ADDR_VAR 0 7
16346: PUSH
16347: DOUBLE
16348: LD_INT 1
16350: DEC
16351: ST_TO_ADDR
16352: LD_VAR 0 6
16356: PUSH
16357: FOR_TO
16358: IFFALSE 16397
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16360: LD_ADDR_VAR 0 9
16364: PUSH
16365: LD_VAR 0 9
16369: PPUSH
16370: LD_VAR 0 7
16374: PPUSH
16375: LD_VAR 0 6
16379: PUSH
16380: LD_VAR 0 7
16384: ARRAY
16385: PUSH
16386: LD_INT 1
16388: ARRAY
16389: PPUSH
16390: CALL_OW 1
16394: ST_TO_ADDR
16395: GO 16357
16397: POP
16398: POP
// result := tmp ;
16399: LD_ADDR_VAR 0 6
16403: PUSH
16404: LD_VAR 0 9
16408: ST_TO_ADDR
// end ; end ;
16409: LD_VAR 0 6
16413: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16414: LD_INT 0
16416: PPUSH
16417: PPUSH
16418: PPUSH
16419: PPUSH
16420: PPUSH
16421: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16422: LD_ADDR_VAR 0 5
16426: PUSH
16427: LD_INT 0
16429: PUSH
16430: LD_INT 0
16432: PUSH
16433: LD_INT 0
16435: PUSH
16436: EMPTY
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: ST_TO_ADDR
// if not x or not y then
16444: LD_VAR 0 2
16448: NOT
16449: IFTRUE 16458
16451: PUSH
16452: LD_VAR 0 3
16456: NOT
16457: OR
16458: IFFALSE 16462
// exit ;
16460: GO 18118
// if not range then
16462: LD_VAR 0 4
16466: NOT
16467: IFFALSE 16477
// range := 10 ;
16469: LD_ADDR_VAR 0 4
16473: PUSH
16474: LD_INT 10
16476: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16477: LD_ADDR_VAR 0 8
16481: PUSH
16482: LD_INT 81
16484: PUSH
16485: LD_VAR 0 1
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 92
16496: PUSH
16497: LD_VAR 0 2
16501: PUSH
16502: LD_VAR 0 3
16506: PUSH
16507: LD_VAR 0 4
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 3
16520: PUSH
16521: LD_INT 21
16523: PUSH
16524: LD_INT 3
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: PPUSH
16540: CALL_OW 69
16544: ST_TO_ADDR
// if not tmp then
16545: LD_VAR 0 8
16549: NOT
16550: IFFALSE 16554
// exit ;
16552: GO 18118
// for i in tmp do
16554: LD_ADDR_VAR 0 6
16558: PUSH
16559: LD_VAR 0 8
16563: PUSH
16564: FOR_IN
16565: IFFALSE 18093
// begin points := [ 0 , 0 , 0 ] ;
16567: LD_ADDR_VAR 0 9
16571: PUSH
16572: LD_INT 0
16574: PUSH
16575: LD_INT 0
16577: PUSH
16578: LD_INT 0
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: LIST
16585: ST_TO_ADDR
// bpoints := 1 ;
16586: LD_ADDR_VAR 0 10
16590: PUSH
16591: LD_INT 1
16593: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16594: LD_VAR 0 6
16598: PPUSH
16599: CALL_OW 247
16603: PUSH
16604: LD_INT 1
16606: DOUBLE
16607: EQUAL
16608: IFTRUE 16612
16610: GO 17194
16612: POP
// begin if GetClass ( i ) = 1 then
16613: LD_VAR 0 6
16617: PPUSH
16618: CALL_OW 257
16622: PUSH
16623: LD_INT 1
16625: EQUAL
16626: IFFALSE 16647
// points := [ 10 , 5 , 3 ] ;
16628: LD_ADDR_VAR 0 9
16632: PUSH
16633: LD_INT 10
16635: PUSH
16636: LD_INT 5
16638: PUSH
16639: LD_INT 3
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16647: LD_VAR 0 6
16651: PPUSH
16652: CALL_OW 257
16656: PUSH
16657: LD_INT 2
16659: PUSH
16660: LD_INT 3
16662: PUSH
16663: LD_INT 4
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: LIST
16670: IN
16671: IFFALSE 16692
// points := [ 3 , 2 , 1 ] ;
16673: LD_ADDR_VAR 0 9
16677: PUSH
16678: LD_INT 3
16680: PUSH
16681: LD_INT 2
16683: PUSH
16684: LD_INT 1
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: LIST
16691: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16692: LD_VAR 0 6
16696: PPUSH
16697: CALL_OW 257
16701: PUSH
16702: LD_INT 5
16704: EQUAL
16705: IFFALSE 16726
// points := [ 130 , 5 , 2 ] ;
16707: LD_ADDR_VAR 0 9
16711: PUSH
16712: LD_INT 130
16714: PUSH
16715: LD_INT 5
16717: PUSH
16718: LD_INT 2
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: LIST
16725: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16726: LD_VAR 0 6
16730: PPUSH
16731: CALL_OW 257
16735: PUSH
16736: LD_INT 8
16738: EQUAL
16739: IFFALSE 16760
// points := [ 35 , 35 , 30 ] ;
16741: LD_ADDR_VAR 0 9
16745: PUSH
16746: LD_INT 35
16748: PUSH
16749: LD_INT 35
16751: PUSH
16752: LD_INT 30
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: LIST
16759: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16760: LD_VAR 0 6
16764: PPUSH
16765: CALL_OW 257
16769: PUSH
16770: LD_INT 9
16772: EQUAL
16773: IFFALSE 16794
// points := [ 20 , 55 , 40 ] ;
16775: LD_ADDR_VAR 0 9
16779: PUSH
16780: LD_INT 20
16782: PUSH
16783: LD_INT 55
16785: PUSH
16786: LD_INT 40
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: LIST
16793: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16794: LD_VAR 0 6
16798: PPUSH
16799: CALL_OW 257
16803: PUSH
16804: LD_INT 12
16806: PUSH
16807: LD_INT 16
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: IN
16814: IFFALSE 16835
// points := [ 5 , 3 , 2 ] ;
16816: LD_ADDR_VAR 0 9
16820: PUSH
16821: LD_INT 5
16823: PUSH
16824: LD_INT 3
16826: PUSH
16827: LD_INT 2
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: LIST
16834: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16835: LD_VAR 0 6
16839: PPUSH
16840: CALL_OW 257
16844: PUSH
16845: LD_INT 17
16847: EQUAL
16848: IFFALSE 16869
// points := [ 100 , 50 , 75 ] ;
16850: LD_ADDR_VAR 0 9
16854: PUSH
16855: LD_INT 100
16857: PUSH
16858: LD_INT 50
16860: PUSH
16861: LD_INT 75
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: LIST
16868: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16869: LD_VAR 0 6
16873: PPUSH
16874: CALL_OW 257
16878: PUSH
16879: LD_INT 15
16881: EQUAL
16882: IFFALSE 16903
// points := [ 10 , 5 , 3 ] ;
16884: LD_ADDR_VAR 0 9
16888: PUSH
16889: LD_INT 10
16891: PUSH
16892: LD_INT 5
16894: PUSH
16895: LD_INT 3
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: LIST
16902: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16903: LD_VAR 0 6
16907: PPUSH
16908: CALL_OW 257
16912: PUSH
16913: LD_INT 14
16915: EQUAL
16916: IFFALSE 16937
// points := [ 10 , 0 , 0 ] ;
16918: LD_ADDR_VAR 0 9
16922: PUSH
16923: LD_INT 10
16925: PUSH
16926: LD_INT 0
16928: PUSH
16929: LD_INT 0
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16937: LD_VAR 0 6
16941: PPUSH
16942: CALL_OW 257
16946: PUSH
16947: LD_INT 11
16949: EQUAL
16950: IFFALSE 16971
// points := [ 30 , 10 , 5 ] ;
16952: LD_ADDR_VAR 0 9
16956: PUSH
16957: LD_INT 30
16959: PUSH
16960: LD_INT 10
16962: PUSH
16963: LD_INT 5
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: LIST
16970: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16971: LD_VAR 0 1
16975: PPUSH
16976: LD_INT 5
16978: PPUSH
16979: CALL_OW 321
16983: PUSH
16984: LD_INT 2
16986: EQUAL
16987: IFFALSE 17004
// bpoints := bpoints * 1.8 ;
16989: LD_ADDR_VAR 0 10
16993: PUSH
16994: LD_VAR 0 10
16998: PUSH
16999: LD_REAL  1.80000000000000E+0000
17002: MUL
17003: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17004: LD_VAR 0 6
17008: PPUSH
17009: CALL_OW 257
17013: PUSH
17014: LD_INT 1
17016: PUSH
17017: LD_INT 2
17019: PUSH
17020: LD_INT 3
17022: PUSH
17023: LD_INT 4
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: IN
17032: IFFALSE 17052
17034: PUSH
17035: LD_VAR 0 1
17039: PPUSH
17040: LD_INT 51
17042: PPUSH
17043: CALL_OW 321
17047: PUSH
17048: LD_INT 2
17050: EQUAL
17051: AND
17052: IFFALSE 17069
// bpoints := bpoints * 1.2 ;
17054: LD_ADDR_VAR 0 10
17058: PUSH
17059: LD_VAR 0 10
17063: PUSH
17064: LD_REAL  1.20000000000000E+0000
17067: MUL
17068: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17069: LD_VAR 0 6
17073: PPUSH
17074: CALL_OW 257
17078: PUSH
17079: LD_INT 5
17081: PUSH
17082: LD_INT 7
17084: PUSH
17085: LD_INT 9
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: LIST
17092: IN
17093: IFFALSE 17113
17095: PUSH
17096: LD_VAR 0 1
17100: PPUSH
17101: LD_INT 52
17103: PPUSH
17104: CALL_OW 321
17108: PUSH
17109: LD_INT 2
17111: EQUAL
17112: AND
17113: IFFALSE 17130
// bpoints := bpoints * 1.5 ;
17115: LD_ADDR_VAR 0 10
17119: PUSH
17120: LD_VAR 0 10
17124: PUSH
17125: LD_REAL  1.50000000000000E+0000
17128: MUL
17129: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17130: LD_VAR 0 1
17134: PPUSH
17135: LD_INT 66
17137: PPUSH
17138: CALL_OW 321
17142: PUSH
17143: LD_INT 2
17145: EQUAL
17146: IFFALSE 17163
// bpoints := bpoints * 1.1 ;
17148: LD_ADDR_VAR 0 10
17152: PUSH
17153: LD_VAR 0 10
17157: PUSH
17158: LD_REAL  1.10000000000000E+0000
17161: MUL
17162: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17163: LD_ADDR_VAR 0 10
17167: PUSH
17168: LD_VAR 0 10
17172: PUSH
17173: LD_VAR 0 6
17177: PPUSH
17178: LD_INT 1
17180: PPUSH
17181: CALL_OW 259
17185: PUSH
17186: LD_REAL  1.15000000000000E+0000
17189: MUL
17190: MUL
17191: ST_TO_ADDR
// end ; unit_vehicle :
17192: GO 18022
17194: LD_INT 2
17196: DOUBLE
17197: EQUAL
17198: IFTRUE 17202
17200: GO 18010
17202: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17203: LD_VAR 0 6
17207: PPUSH
17208: CALL_OW 264
17212: PUSH
17213: LD_INT 2
17215: PUSH
17216: LD_INT 42
17218: PUSH
17219: LD_INT 24
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: LIST
17226: IN
17227: IFFALSE 17248
// points := [ 25 , 5 , 3 ] ;
17229: LD_ADDR_VAR 0 9
17233: PUSH
17234: LD_INT 25
17236: PUSH
17237: LD_INT 5
17239: PUSH
17240: LD_INT 3
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: LIST
17247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17248: LD_VAR 0 6
17252: PPUSH
17253: CALL_OW 264
17257: PUSH
17258: LD_INT 4
17260: PUSH
17261: LD_INT 43
17263: PUSH
17264: LD_INT 25
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: LIST
17271: IN
17272: IFFALSE 17293
// points := [ 40 , 15 , 5 ] ;
17274: LD_ADDR_VAR 0 9
17278: PUSH
17279: LD_INT 40
17281: PUSH
17282: LD_INT 15
17284: PUSH
17285: LD_INT 5
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: LIST
17292: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17293: LD_VAR 0 6
17297: PPUSH
17298: CALL_OW 264
17302: PUSH
17303: LD_INT 3
17305: PUSH
17306: LD_INT 23
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: IN
17313: IFFALSE 17334
// points := [ 7 , 25 , 8 ] ;
17315: LD_ADDR_VAR 0 9
17319: PUSH
17320: LD_INT 7
17322: PUSH
17323: LD_INT 25
17325: PUSH
17326: LD_INT 8
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: LIST
17333: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17334: LD_VAR 0 6
17338: PPUSH
17339: CALL_OW 264
17343: PUSH
17344: LD_INT 5
17346: PUSH
17347: LD_INT 27
17349: PUSH
17350: LD_INT 44
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: LIST
17357: IN
17358: IFFALSE 17379
// points := [ 14 , 50 , 16 ] ;
17360: LD_ADDR_VAR 0 9
17364: PUSH
17365: LD_INT 14
17367: PUSH
17368: LD_INT 50
17370: PUSH
17371: LD_INT 16
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17379: LD_VAR 0 6
17383: PPUSH
17384: CALL_OW 264
17388: PUSH
17389: LD_INT 6
17391: PUSH
17392: LD_INT 46
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: IN
17399: IFFALSE 17420
// points := [ 32 , 120 , 70 ] ;
17401: LD_ADDR_VAR 0 9
17405: PUSH
17406: LD_INT 32
17408: PUSH
17409: LD_INT 120
17411: PUSH
17412: LD_INT 70
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: LIST
17419: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17420: LD_VAR 0 6
17424: PPUSH
17425: CALL_OW 264
17429: PUSH
17430: LD_INT 7
17432: PUSH
17433: LD_INT 28
17435: PUSH
17436: LD_INT 45
17438: PUSH
17439: LD_INT 92
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: IN
17448: IFFALSE 17469
// points := [ 35 , 20 , 45 ] ;
17450: LD_ADDR_VAR 0 9
17454: PUSH
17455: LD_INT 35
17457: PUSH
17458: LD_INT 20
17460: PUSH
17461: LD_INT 45
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: LIST
17468: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17469: LD_VAR 0 6
17473: PPUSH
17474: CALL_OW 264
17478: PUSH
17479: LD_INT 47
17481: PUSH
17482: EMPTY
17483: LIST
17484: IN
17485: IFFALSE 17506
// points := [ 67 , 45 , 75 ] ;
17487: LD_ADDR_VAR 0 9
17491: PUSH
17492: LD_INT 67
17494: PUSH
17495: LD_INT 45
17497: PUSH
17498: LD_INT 75
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17506: LD_VAR 0 6
17510: PPUSH
17511: CALL_OW 264
17515: PUSH
17516: LD_INT 26
17518: PUSH
17519: EMPTY
17520: LIST
17521: IN
17522: IFFALSE 17543
// points := [ 120 , 30 , 80 ] ;
17524: LD_ADDR_VAR 0 9
17528: PUSH
17529: LD_INT 120
17531: PUSH
17532: LD_INT 30
17534: PUSH
17535: LD_INT 80
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: LIST
17542: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17543: LD_VAR 0 6
17547: PPUSH
17548: CALL_OW 264
17552: PUSH
17553: LD_INT 22
17555: PUSH
17556: EMPTY
17557: LIST
17558: IN
17559: IFFALSE 17580
// points := [ 40 , 1 , 1 ] ;
17561: LD_ADDR_VAR 0 9
17565: PUSH
17566: LD_INT 40
17568: PUSH
17569: LD_INT 1
17571: PUSH
17572: LD_INT 1
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: LIST
17579: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17580: LD_VAR 0 6
17584: PPUSH
17585: CALL_OW 264
17589: PUSH
17590: LD_INT 29
17592: PUSH
17593: EMPTY
17594: LIST
17595: IN
17596: IFFALSE 17617
// points := [ 70 , 200 , 400 ] ;
17598: LD_ADDR_VAR 0 9
17602: PUSH
17603: LD_INT 70
17605: PUSH
17606: LD_INT 200
17608: PUSH
17609: LD_INT 400
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: LIST
17616: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17617: LD_VAR 0 6
17621: PPUSH
17622: CALL_OW 264
17626: PUSH
17627: LD_INT 14
17629: PUSH
17630: LD_INT 53
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: IN
17637: IFFALSE 17658
// points := [ 40 , 10 , 20 ] ;
17639: LD_ADDR_VAR 0 9
17643: PUSH
17644: LD_INT 40
17646: PUSH
17647: LD_INT 10
17649: PUSH
17650: LD_INT 20
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: LIST
17657: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17658: LD_VAR 0 6
17662: PPUSH
17663: CALL_OW 264
17667: PUSH
17668: LD_INT 9
17670: PUSH
17671: EMPTY
17672: LIST
17673: IN
17674: IFFALSE 17695
// points := [ 5 , 70 , 20 ] ;
17676: LD_ADDR_VAR 0 9
17680: PUSH
17681: LD_INT 5
17683: PUSH
17684: LD_INT 70
17686: PUSH
17687: LD_INT 20
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: LIST
17694: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17695: LD_VAR 0 6
17699: PPUSH
17700: CALL_OW 264
17704: PUSH
17705: LD_INT 10
17707: PUSH
17708: EMPTY
17709: LIST
17710: IN
17711: IFFALSE 17732
// points := [ 35 , 110 , 70 ] ;
17713: LD_ADDR_VAR 0 9
17717: PUSH
17718: LD_INT 35
17720: PUSH
17721: LD_INT 110
17723: PUSH
17724: LD_INT 70
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: LIST
17731: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17732: LD_VAR 0 6
17736: PPUSH
17737: CALL_OW 265
17741: PUSH
17742: LD_INT 25
17744: EQUAL
17745: IFFALSE 17766
// points := [ 80 , 65 , 100 ] ;
17747: LD_ADDR_VAR 0 9
17751: PUSH
17752: LD_INT 80
17754: PUSH
17755: LD_INT 65
17757: PUSH
17758: LD_INT 100
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: LIST
17765: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17766: LD_VAR 0 6
17770: PPUSH
17771: CALL_OW 263
17775: PUSH
17776: LD_INT 1
17778: EQUAL
17779: IFFALSE 17814
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17781: LD_ADDR_VAR 0 10
17785: PUSH
17786: LD_VAR 0 10
17790: PUSH
17791: LD_VAR 0 6
17795: PPUSH
17796: CALL_OW 311
17800: PPUSH
17801: LD_INT 3
17803: PPUSH
17804: CALL_OW 259
17808: PUSH
17809: LD_INT 4
17811: MUL
17812: MUL
17813: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17814: LD_VAR 0 6
17818: PPUSH
17819: CALL_OW 263
17823: PUSH
17824: LD_INT 2
17826: EQUAL
17827: IFFALSE 17878
// begin j := IsControledBy ( i ) ;
17829: LD_ADDR_VAR 0 7
17833: PUSH
17834: LD_VAR 0 6
17838: PPUSH
17839: CALL_OW 312
17843: ST_TO_ADDR
// if j then
17844: LD_VAR 0 7
17848: IFFALSE 17878
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17850: LD_ADDR_VAR 0 10
17854: PUSH
17855: LD_VAR 0 10
17859: PUSH
17860: LD_VAR 0 7
17864: PPUSH
17865: LD_INT 3
17867: PPUSH
17868: CALL_OW 259
17872: PUSH
17873: LD_INT 3
17875: MUL
17876: MUL
17877: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17878: LD_VAR 0 6
17882: PPUSH
17883: CALL_OW 264
17887: PUSH
17888: LD_INT 5
17890: PUSH
17891: LD_INT 6
17893: PUSH
17894: LD_INT 46
17896: PUSH
17897: LD_INT 44
17899: PUSH
17900: LD_INT 47
17902: PUSH
17903: LD_INT 45
17905: PUSH
17906: LD_INT 28
17908: PUSH
17909: LD_INT 7
17911: PUSH
17912: LD_INT 27
17914: PUSH
17915: LD_INT 29
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: IN
17930: IFFALSE 17950
17932: PUSH
17933: LD_VAR 0 1
17937: PPUSH
17938: LD_INT 52
17940: PPUSH
17941: CALL_OW 321
17945: PUSH
17946: LD_INT 2
17948: EQUAL
17949: AND
17950: IFFALSE 17967
// bpoints := bpoints * 1.2 ;
17952: LD_ADDR_VAR 0 10
17956: PUSH
17957: LD_VAR 0 10
17961: PUSH
17962: LD_REAL  1.20000000000000E+0000
17965: MUL
17966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17967: LD_VAR 0 6
17971: PPUSH
17972: CALL_OW 264
17976: PUSH
17977: LD_INT 6
17979: PUSH
17980: LD_INT 46
17982: PUSH
17983: LD_INT 47
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: LIST
17990: IN
17991: IFFALSE 18008
// bpoints := bpoints * 1.2 ;
17993: LD_ADDR_VAR 0 10
17997: PUSH
17998: LD_VAR 0 10
18002: PUSH
18003: LD_REAL  1.20000000000000E+0000
18006: MUL
18007: ST_TO_ADDR
// end ; unit_building :
18008: GO 18022
18010: LD_INT 3
18012: DOUBLE
18013: EQUAL
18014: IFTRUE 18018
18016: GO 18021
18018: POP
// ; end ;
18019: GO 18022
18021: POP
// for j = 1 to 3 do
18022: LD_ADDR_VAR 0 7
18026: PUSH
18027: DOUBLE
18028: LD_INT 1
18030: DEC
18031: ST_TO_ADDR
18032: LD_INT 3
18034: PUSH
18035: FOR_TO
18036: IFFALSE 18089
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18038: LD_ADDR_VAR 0 5
18042: PUSH
18043: LD_VAR 0 5
18047: PPUSH
18048: LD_VAR 0 7
18052: PPUSH
18053: LD_VAR 0 5
18057: PUSH
18058: LD_VAR 0 7
18062: ARRAY
18063: PUSH
18064: LD_VAR 0 9
18068: PUSH
18069: LD_VAR 0 7
18073: ARRAY
18074: PUSH
18075: LD_VAR 0 10
18079: MUL
18080: PLUS
18081: PPUSH
18082: CALL_OW 1
18086: ST_TO_ADDR
18087: GO 18035
18089: POP
18090: POP
// end ;
18091: GO 16564
18093: POP
18094: POP
// result := Replace ( result , 4 , tmp ) ;
18095: LD_ADDR_VAR 0 5
18099: PUSH
18100: LD_VAR 0 5
18104: PPUSH
18105: LD_INT 4
18107: PPUSH
18108: LD_VAR 0 8
18112: PPUSH
18113: CALL_OW 1
18117: ST_TO_ADDR
// end ;
18118: LD_VAR 0 5
18122: RET
// export function DangerAtRange ( unit , range ) ; begin
18123: LD_INT 0
18125: PPUSH
// if not unit then
18126: LD_VAR 0 1
18130: NOT
18131: IFFALSE 18135
// exit ;
18133: GO 18180
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18135: LD_ADDR_VAR 0 3
18139: PUSH
18140: LD_VAR 0 1
18144: PPUSH
18145: CALL_OW 255
18149: PPUSH
18150: LD_VAR 0 1
18154: PPUSH
18155: CALL_OW 250
18159: PPUSH
18160: LD_VAR 0 1
18164: PPUSH
18165: CALL_OW 251
18169: PPUSH
18170: LD_VAR 0 2
18174: PPUSH
18175: CALL 16414 0 4
18179: ST_TO_ADDR
// end ;
18180: LD_VAR 0 3
18184: RET
// export function DangerInArea ( side , area ) ; begin
18185: LD_INT 0
18187: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18188: LD_ADDR_VAR 0 3
18192: PUSH
18193: LD_VAR 0 2
18197: PPUSH
18198: LD_INT 81
18200: PUSH
18201: LD_VAR 0 1
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PPUSH
18210: CALL_OW 70
18214: ST_TO_ADDR
// end ;
18215: LD_VAR 0 3
18219: RET
// export function IsExtension ( b ) ; begin
18220: LD_INT 0
18222: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18223: LD_ADDR_VAR 0 2
18227: PUSH
18228: LD_VAR 0 1
18232: PUSH
18233: LD_INT 23
18235: PUSH
18236: LD_INT 20
18238: PUSH
18239: LD_INT 22
18241: PUSH
18242: LD_INT 17
18244: PUSH
18245: LD_INT 24
18247: PUSH
18248: LD_INT 21
18250: PUSH
18251: LD_INT 19
18253: PUSH
18254: LD_INT 16
18256: PUSH
18257: LD_INT 25
18259: PUSH
18260: LD_INT 18
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: IN
18275: ST_TO_ADDR
// end ;
18276: LD_VAR 0 2
18280: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18281: LD_INT 0
18283: PPUSH
18284: PPUSH
18285: PPUSH
// result := [ ] ;
18286: LD_ADDR_VAR 0 4
18290: PUSH
18291: EMPTY
18292: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18293: LD_ADDR_VAR 0 5
18297: PUSH
18298: LD_VAR 0 2
18302: PPUSH
18303: LD_INT 21
18305: PUSH
18306: LD_INT 3
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PPUSH
18313: CALL_OW 70
18317: ST_TO_ADDR
// if not tmp then
18318: LD_VAR 0 5
18322: NOT
18323: IFFALSE 18327
// exit ;
18325: GO 18391
// if checkLink then
18327: LD_VAR 0 3
18331: IFFALSE 18381
// begin for i in tmp do
18333: LD_ADDR_VAR 0 6
18337: PUSH
18338: LD_VAR 0 5
18342: PUSH
18343: FOR_IN
18344: IFFALSE 18379
// if GetBase ( i ) <> base then
18346: LD_VAR 0 6
18350: PPUSH
18351: CALL_OW 274
18355: PUSH
18356: LD_VAR 0 1
18360: NONEQUAL
18361: IFFALSE 18377
// ComLinkToBase ( base , i ) ;
18363: LD_VAR 0 1
18367: PPUSH
18368: LD_VAR 0 6
18372: PPUSH
18373: CALL_OW 169
18377: GO 18343
18379: POP
18380: POP
// end ; result := tmp ;
18381: LD_ADDR_VAR 0 4
18385: PUSH
18386: LD_VAR 0 5
18390: ST_TO_ADDR
// end ;
18391: LD_VAR 0 4
18395: RET
// export function ComComplete ( units , b ) ; var i ; begin
18396: LD_INT 0
18398: PPUSH
18399: PPUSH
// if not units then
18400: LD_VAR 0 1
18404: NOT
18405: IFFALSE 18409
// exit ;
18407: GO 18499
// for i in units do
18409: LD_ADDR_VAR 0 4
18413: PUSH
18414: LD_VAR 0 1
18418: PUSH
18419: FOR_IN
18420: IFFALSE 18497
// if BuildingStatus ( b ) = bs_build then
18422: LD_VAR 0 2
18426: PPUSH
18427: CALL_OW 461
18431: PUSH
18432: LD_INT 1
18434: EQUAL
18435: IFFALSE 18495
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18437: LD_VAR 0 4
18441: PPUSH
18442: LD_STRING h
18444: PUSH
18445: LD_VAR 0 2
18449: PPUSH
18450: CALL_OW 250
18454: PUSH
18455: LD_VAR 0 2
18459: PPUSH
18460: CALL_OW 251
18464: PUSH
18465: LD_VAR 0 2
18469: PUSH
18470: LD_INT 0
18472: PUSH
18473: LD_INT 0
18475: PUSH
18476: LD_INT 0
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: PUSH
18488: EMPTY
18489: LIST
18490: PPUSH
18491: CALL_OW 446
18495: GO 18419
18497: POP
18498: POP
// end ;
18499: LD_VAR 0 3
18503: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18504: LD_INT 0
18506: PPUSH
18507: PPUSH
18508: PPUSH
18509: PPUSH
18510: PPUSH
18511: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18512: LD_VAR 0 1
18516: NOT
18517: IFTRUE 18534
18519: PUSH
18520: LD_VAR 0 1
18524: PPUSH
18525: CALL_OW 263
18529: PUSH
18530: LD_INT 2
18532: NONEQUAL
18533: OR
18534: IFFALSE 18538
// exit ;
18536: GO 18854
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18538: LD_ADDR_VAR 0 6
18542: PUSH
18543: LD_INT 22
18545: PUSH
18546: LD_VAR 0 1
18550: PPUSH
18551: CALL_OW 255
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 2
18562: PUSH
18563: LD_INT 30
18565: PUSH
18566: LD_INT 36
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 34
18575: PUSH
18576: LD_INT 31
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: LIST
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PPUSH
18592: CALL_OW 69
18596: ST_TO_ADDR
// if not tmp then
18597: LD_VAR 0 6
18601: NOT
18602: IFFALSE 18606
// exit ;
18604: GO 18854
// result := [ ] ;
18606: LD_ADDR_VAR 0 2
18610: PUSH
18611: EMPTY
18612: ST_TO_ADDR
// for i in tmp do
18613: LD_ADDR_VAR 0 3
18617: PUSH
18618: LD_VAR 0 6
18622: PUSH
18623: FOR_IN
18624: IFFALSE 18695
// begin t := UnitsInside ( i ) ;
18626: LD_ADDR_VAR 0 4
18630: PUSH
18631: LD_VAR 0 3
18635: PPUSH
18636: CALL_OW 313
18640: ST_TO_ADDR
// if t then
18641: LD_VAR 0 4
18645: IFFALSE 18693
// for j in t do
18647: LD_ADDR_VAR 0 7
18651: PUSH
18652: LD_VAR 0 4
18656: PUSH
18657: FOR_IN
18658: IFFALSE 18691
// result := Replace ( result , result + 1 , j ) ;
18660: LD_ADDR_VAR 0 2
18664: PUSH
18665: LD_VAR 0 2
18669: PPUSH
18670: LD_VAR 0 2
18674: PUSH
18675: LD_INT 1
18677: PLUS
18678: PPUSH
18679: LD_VAR 0 7
18683: PPUSH
18684: CALL_OW 1
18688: ST_TO_ADDR
18689: GO 18657
18691: POP
18692: POP
// end ;
18693: GO 18623
18695: POP
18696: POP
// if not result then
18697: LD_VAR 0 2
18701: NOT
18702: IFFALSE 18706
// exit ;
18704: GO 18854
// mech := result [ 1 ] ;
18706: LD_ADDR_VAR 0 5
18710: PUSH
18711: LD_VAR 0 2
18715: PUSH
18716: LD_INT 1
18718: ARRAY
18719: ST_TO_ADDR
// if result > 1 then
18720: LD_VAR 0 2
18724: PUSH
18725: LD_INT 1
18727: GREATER
18728: IFFALSE 18840
// begin for i = 2 to result do
18730: LD_ADDR_VAR 0 3
18734: PUSH
18735: DOUBLE
18736: LD_INT 2
18738: DEC
18739: ST_TO_ADDR
18740: LD_VAR 0 2
18744: PUSH
18745: FOR_TO
18746: IFFALSE 18838
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18748: LD_ADDR_VAR 0 4
18752: PUSH
18753: LD_VAR 0 2
18757: PUSH
18758: LD_VAR 0 3
18762: ARRAY
18763: PPUSH
18764: LD_INT 3
18766: PPUSH
18767: CALL_OW 259
18771: PUSH
18772: LD_VAR 0 2
18776: PUSH
18777: LD_VAR 0 3
18781: ARRAY
18782: PPUSH
18783: CALL_OW 432
18787: MINUS
18788: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18789: LD_VAR 0 4
18793: PUSH
18794: LD_VAR 0 5
18798: PPUSH
18799: LD_INT 3
18801: PPUSH
18802: CALL_OW 259
18806: PUSH
18807: LD_VAR 0 5
18811: PPUSH
18812: CALL_OW 432
18816: MINUS
18817: GREATEREQUAL
18818: IFFALSE 18836
// mech := result [ i ] ;
18820: LD_ADDR_VAR 0 5
18824: PUSH
18825: LD_VAR 0 2
18829: PUSH
18830: LD_VAR 0 3
18834: ARRAY
18835: ST_TO_ADDR
// end ;
18836: GO 18745
18838: POP
18839: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18840: LD_VAR 0 1
18844: PPUSH
18845: LD_VAR 0 5
18849: PPUSH
18850: CALL_OW 135
// end ;
18854: LD_VAR 0 2
18858: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18859: LD_INT 0
18861: PPUSH
18862: PPUSH
18863: PPUSH
18864: PPUSH
18865: PPUSH
18866: PPUSH
18867: PPUSH
18868: PPUSH
18869: PPUSH
18870: PPUSH
18871: PPUSH
18872: PPUSH
18873: PPUSH
// result := [ ] ;
18874: LD_ADDR_VAR 0 7
18878: PUSH
18879: EMPTY
18880: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18881: LD_VAR 0 1
18885: PPUSH
18886: CALL_OW 266
18890: PUSH
18891: LD_INT 0
18893: PUSH
18894: LD_INT 1
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: IN
18901: NOT
18902: IFFALSE 18906
// exit ;
18904: GO 20546
// if name then
18906: LD_VAR 0 3
18910: IFFALSE 18926
// SetBName ( base_dep , name ) ;
18912: LD_VAR 0 1
18916: PPUSH
18917: LD_VAR 0 3
18921: PPUSH
18922: CALL_OW 500
// base := GetBase ( base_dep ) ;
18926: LD_ADDR_VAR 0 15
18930: PUSH
18931: LD_VAR 0 1
18935: PPUSH
18936: CALL_OW 274
18940: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18941: LD_ADDR_VAR 0 16
18945: PUSH
18946: LD_VAR 0 1
18950: PPUSH
18951: CALL_OW 255
18955: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18956: LD_ADDR_VAR 0 17
18960: PUSH
18961: LD_VAR 0 1
18965: PPUSH
18966: CALL_OW 248
18970: ST_TO_ADDR
// if sources then
18971: LD_VAR 0 5
18975: IFFALSE 19022
// for i = 1 to 3 do
18977: LD_ADDR_VAR 0 8
18981: PUSH
18982: DOUBLE
18983: LD_INT 1
18985: DEC
18986: ST_TO_ADDR
18987: LD_INT 3
18989: PUSH
18990: FOR_TO
18991: IFFALSE 19020
// AddResourceType ( base , i , sources [ i ] ) ;
18993: LD_VAR 0 15
18997: PPUSH
18998: LD_VAR 0 8
19002: PPUSH
19003: LD_VAR 0 5
19007: PUSH
19008: LD_VAR 0 8
19012: ARRAY
19013: PPUSH
19014: CALL_OW 276
19018: GO 18990
19020: POP
19021: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19022: LD_ADDR_VAR 0 18
19026: PUSH
19027: LD_VAR 0 15
19031: PPUSH
19032: LD_VAR 0 2
19036: PPUSH
19037: LD_INT 1
19039: PPUSH
19040: CALL 18281 0 3
19044: ST_TO_ADDR
// InitHc ;
19045: CALL_OW 19
// InitUc ;
19049: CALL_OW 18
// uc_side := side ;
19053: LD_ADDR_OWVAR 20
19057: PUSH
19058: LD_VAR 0 16
19062: ST_TO_ADDR
// uc_nation := nation ;
19063: LD_ADDR_OWVAR 21
19067: PUSH
19068: LD_VAR 0 17
19072: ST_TO_ADDR
// if buildings then
19073: LD_VAR 0 18
19077: IFFALSE 20405
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19079: LD_ADDR_VAR 0 19
19083: PUSH
19084: LD_VAR 0 18
19088: PPUSH
19089: LD_INT 2
19091: PUSH
19092: LD_INT 30
19094: PUSH
19095: LD_INT 29
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 30
19104: PUSH
19105: LD_INT 30
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: LIST
19116: PPUSH
19117: CALL_OW 72
19121: ST_TO_ADDR
// if tmp then
19122: LD_VAR 0 19
19126: IFFALSE 19174
// for i in tmp do
19128: LD_ADDR_VAR 0 8
19132: PUSH
19133: LD_VAR 0 19
19137: PUSH
19138: FOR_IN
19139: IFFALSE 19172
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19141: LD_VAR 0 8
19145: PPUSH
19146: CALL_OW 250
19150: PPUSH
19151: LD_VAR 0 8
19155: PPUSH
19156: CALL_OW 251
19160: PPUSH
19161: LD_VAR 0 16
19165: PPUSH
19166: CALL_OW 441
19170: GO 19138
19172: POP
19173: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19174: LD_VAR 0 18
19178: PPUSH
19179: LD_INT 2
19181: PUSH
19182: LD_INT 30
19184: PUSH
19185: LD_INT 32
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 30
19194: PUSH
19195: LD_INT 33
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: LIST
19206: PPUSH
19207: CALL_OW 72
19211: IFFALSE 19299
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19213: LD_ADDR_VAR 0 8
19217: PUSH
19218: LD_VAR 0 18
19222: PPUSH
19223: LD_INT 2
19225: PUSH
19226: LD_INT 30
19228: PUSH
19229: LD_INT 32
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 30
19238: PUSH
19239: LD_INT 33
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: LIST
19250: PPUSH
19251: CALL_OW 72
19255: PUSH
19256: FOR_IN
19257: IFFALSE 19297
// begin if not GetBWeapon ( i ) then
19259: LD_VAR 0 8
19263: PPUSH
19264: CALL_OW 269
19268: NOT
19269: IFFALSE 19295
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19271: LD_VAR 0 8
19275: PPUSH
19276: LD_VAR 0 8
19280: PPUSH
19281: LD_VAR 0 2
19285: PPUSH
19286: CALL 20551 0 2
19290: PPUSH
19291: CALL_OW 431
// end ;
19295: GO 19256
19297: POP
19298: POP
// end ; for i = 1 to personel do
19299: LD_ADDR_VAR 0 8
19303: PUSH
19304: DOUBLE
19305: LD_INT 1
19307: DEC
19308: ST_TO_ADDR
19309: LD_VAR 0 6
19313: PUSH
19314: FOR_TO
19315: IFFALSE 20385
// begin if i > 4 then
19317: LD_VAR 0 8
19321: PUSH
19322: LD_INT 4
19324: GREATER
19325: IFFALSE 19329
// break ;
19327: GO 20385
// case i of 1 :
19329: LD_VAR 0 8
19333: PUSH
19334: LD_INT 1
19336: DOUBLE
19337: EQUAL
19338: IFTRUE 19342
19340: GO 19422
19342: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19343: LD_ADDR_VAR 0 12
19347: PUSH
19348: LD_VAR 0 18
19352: PPUSH
19353: LD_INT 22
19355: PUSH
19356: LD_VAR 0 16
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 58
19367: PUSH
19368: EMPTY
19369: LIST
19370: PUSH
19371: LD_INT 2
19373: PUSH
19374: LD_INT 30
19376: PUSH
19377: LD_INT 32
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 30
19386: PUSH
19387: LD_INT 4
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 30
19396: PUSH
19397: LD_INT 5
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: LIST
19414: PPUSH
19415: CALL_OW 72
19419: ST_TO_ADDR
19420: GO 19644
19422: LD_INT 2
19424: DOUBLE
19425: EQUAL
19426: IFTRUE 19430
19428: GO 19492
19430: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19431: LD_ADDR_VAR 0 12
19435: PUSH
19436: LD_VAR 0 18
19440: PPUSH
19441: LD_INT 22
19443: PUSH
19444: LD_VAR 0 16
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 2
19455: PUSH
19456: LD_INT 30
19458: PUSH
19459: LD_INT 0
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 30
19468: PUSH
19469: LD_INT 1
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: LIST
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PPUSH
19485: CALL_OW 72
19489: ST_TO_ADDR
19490: GO 19644
19492: LD_INT 3
19494: DOUBLE
19495: EQUAL
19496: IFTRUE 19500
19498: GO 19562
19500: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19501: LD_ADDR_VAR 0 12
19505: PUSH
19506: LD_VAR 0 18
19510: PPUSH
19511: LD_INT 22
19513: PUSH
19514: LD_VAR 0 16
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 2
19525: PUSH
19526: LD_INT 30
19528: PUSH
19529: LD_INT 2
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 30
19538: PUSH
19539: LD_INT 3
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: LIST
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PPUSH
19555: CALL_OW 72
19559: ST_TO_ADDR
19560: GO 19644
19562: LD_INT 4
19564: DOUBLE
19565: EQUAL
19566: IFTRUE 19570
19568: GO 19643
19570: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19571: LD_ADDR_VAR 0 12
19575: PUSH
19576: LD_VAR 0 18
19580: PPUSH
19581: LD_INT 22
19583: PUSH
19584: LD_VAR 0 16
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 2
19595: PUSH
19596: LD_INT 30
19598: PUSH
19599: LD_INT 6
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 30
19608: PUSH
19609: LD_INT 7
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 30
19618: PUSH
19619: LD_INT 8
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PPUSH
19636: CALL_OW 72
19640: ST_TO_ADDR
19641: GO 19644
19643: POP
// if i = 1 then
19644: LD_VAR 0 8
19648: PUSH
19649: LD_INT 1
19651: EQUAL
19652: IFFALSE 19763
// begin tmp := [ ] ;
19654: LD_ADDR_VAR 0 19
19658: PUSH
19659: EMPTY
19660: ST_TO_ADDR
// for j in f do
19661: LD_ADDR_VAR 0 9
19665: PUSH
19666: LD_VAR 0 12
19670: PUSH
19671: FOR_IN
19672: IFFALSE 19745
// if GetBType ( j ) = b_bunker then
19674: LD_VAR 0 9
19678: PPUSH
19679: CALL_OW 266
19683: PUSH
19684: LD_INT 32
19686: EQUAL
19687: IFFALSE 19714
// tmp := Insert ( tmp , 1 , j ) else
19689: LD_ADDR_VAR 0 19
19693: PUSH
19694: LD_VAR 0 19
19698: PPUSH
19699: LD_INT 1
19701: PPUSH
19702: LD_VAR 0 9
19706: PPUSH
19707: CALL_OW 2
19711: ST_TO_ADDR
19712: GO 19743
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19714: LD_ADDR_VAR 0 19
19718: PUSH
19719: LD_VAR 0 19
19723: PPUSH
19724: LD_VAR 0 19
19728: PUSH
19729: LD_INT 1
19731: PLUS
19732: PPUSH
19733: LD_VAR 0 9
19737: PPUSH
19738: CALL_OW 2
19742: ST_TO_ADDR
19743: GO 19671
19745: POP
19746: POP
// if tmp then
19747: LD_VAR 0 19
19751: IFFALSE 19763
// f := tmp ;
19753: LD_ADDR_VAR 0 12
19757: PUSH
19758: LD_VAR 0 19
19762: ST_TO_ADDR
// end ; x := personel [ i ] ;
19763: LD_ADDR_VAR 0 13
19767: PUSH
19768: LD_VAR 0 6
19772: PUSH
19773: LD_VAR 0 8
19777: ARRAY
19778: ST_TO_ADDR
// if x = - 1 then
19779: LD_VAR 0 13
19783: PUSH
19784: LD_INT 1
19786: NEG
19787: EQUAL
19788: IFFALSE 19999
// begin for j in f do
19790: LD_ADDR_VAR 0 9
19794: PUSH
19795: LD_VAR 0 12
19799: PUSH
19800: FOR_IN
19801: IFFALSE 19995
// repeat InitHc ;
19803: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19807: LD_VAR 0 9
19811: PPUSH
19812: CALL_OW 266
19816: PUSH
19817: LD_INT 5
19819: EQUAL
19820: IFFALSE 19890
// begin if UnitsInside ( j ) < 3 then
19822: LD_VAR 0 9
19826: PPUSH
19827: CALL_OW 313
19831: PUSH
19832: LD_INT 3
19834: LESS
19835: IFFALSE 19871
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19837: LD_INT 0
19839: PPUSH
19840: LD_INT 5
19842: PUSH
19843: LD_INT 8
19845: PUSH
19846: LD_INT 9
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: LIST
19853: PUSH
19854: LD_VAR 0 17
19858: ARRAY
19859: PPUSH
19860: LD_VAR 0 4
19864: PPUSH
19865: CALL_OW 380
19869: GO 19888
// PrepareHuman ( false , i , skill ) ;
19871: LD_INT 0
19873: PPUSH
19874: LD_VAR 0 8
19878: PPUSH
19879: LD_VAR 0 4
19883: PPUSH
19884: CALL_OW 380
// end else
19888: GO 19907
// PrepareHuman ( false , i , skill ) ;
19890: LD_INT 0
19892: PPUSH
19893: LD_VAR 0 8
19897: PPUSH
19898: LD_VAR 0 4
19902: PPUSH
19903: CALL_OW 380
// un := CreateHuman ;
19907: LD_ADDR_VAR 0 14
19911: PUSH
19912: CALL_OW 44
19916: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19917: LD_ADDR_VAR 0 7
19921: PUSH
19922: LD_VAR 0 7
19926: PPUSH
19927: LD_INT 1
19929: PPUSH
19930: LD_VAR 0 14
19934: PPUSH
19935: CALL_OW 2
19939: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19940: LD_VAR 0 14
19944: PPUSH
19945: LD_VAR 0 9
19949: PPUSH
19950: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19954: LD_VAR 0 9
19958: PPUSH
19959: CALL_OW 313
19963: PUSH
19964: LD_INT 6
19966: EQUAL
19967: IFTRUE 19991
19969: PUSH
19970: LD_VAR 0 9
19974: PPUSH
19975: CALL_OW 266
19979: PUSH
19980: LD_INT 32
19982: PUSH
19983: LD_INT 31
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: IN
19990: OR
19991: IFFALSE 19803
19993: GO 19800
19995: POP
19996: POP
// end else
19997: GO 20383
// for j = 1 to x do
19999: LD_ADDR_VAR 0 9
20003: PUSH
20004: DOUBLE
20005: LD_INT 1
20007: DEC
20008: ST_TO_ADDR
20009: LD_VAR 0 13
20013: PUSH
20014: FOR_TO
20015: IFFALSE 20381
// begin InitHc ;
20017: CALL_OW 19
// if not f then
20021: LD_VAR 0 12
20025: NOT
20026: IFFALSE 20115
// begin PrepareHuman ( false , i , skill ) ;
20028: LD_INT 0
20030: PPUSH
20031: LD_VAR 0 8
20035: PPUSH
20036: LD_VAR 0 4
20040: PPUSH
20041: CALL_OW 380
// un := CreateHuman ;
20045: LD_ADDR_VAR 0 14
20049: PUSH
20050: CALL_OW 44
20054: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20055: LD_ADDR_VAR 0 7
20059: PUSH
20060: LD_VAR 0 7
20064: PPUSH
20065: LD_INT 1
20067: PPUSH
20068: LD_VAR 0 14
20072: PPUSH
20073: CALL_OW 2
20077: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20078: LD_VAR 0 14
20082: PPUSH
20083: LD_VAR 0 1
20087: PPUSH
20088: CALL_OW 250
20092: PPUSH
20093: LD_VAR 0 1
20097: PPUSH
20098: CALL_OW 251
20102: PPUSH
20103: LD_INT 10
20105: PPUSH
20106: LD_INT 0
20108: PPUSH
20109: CALL_OW 50
// continue ;
20113: GO 20014
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20115: LD_VAR 0 12
20119: PUSH
20120: LD_INT 1
20122: ARRAY
20123: PPUSH
20124: CALL_OW 313
20128: IFFALSE 20156
20130: PUSH
20131: LD_VAR 0 12
20135: PUSH
20136: LD_INT 1
20138: ARRAY
20139: PPUSH
20140: CALL_OW 266
20144: PUSH
20145: LD_INT 32
20147: PUSH
20148: LD_INT 31
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: IN
20155: AND
20156: IFTRUE 20177
20158: PUSH
20159: LD_VAR 0 12
20163: PUSH
20164: LD_INT 1
20166: ARRAY
20167: PPUSH
20168: CALL_OW 313
20172: PUSH
20173: LD_INT 6
20175: EQUAL
20176: OR
20177: IFFALSE 20197
// f := Delete ( f , 1 ) ;
20179: LD_ADDR_VAR 0 12
20183: PUSH
20184: LD_VAR 0 12
20188: PPUSH
20189: LD_INT 1
20191: PPUSH
20192: CALL_OW 3
20196: ST_TO_ADDR
// if not f then
20197: LD_VAR 0 12
20201: NOT
20202: IFFALSE 20220
// begin x := x + 2 ;
20204: LD_ADDR_VAR 0 13
20208: PUSH
20209: LD_VAR 0 13
20213: PUSH
20214: LD_INT 2
20216: PLUS
20217: ST_TO_ADDR
// continue ;
20218: GO 20014
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20220: LD_VAR 0 12
20224: PUSH
20225: LD_INT 1
20227: ARRAY
20228: PPUSH
20229: CALL_OW 266
20233: PUSH
20234: LD_INT 5
20236: EQUAL
20237: IFFALSE 20311
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20239: LD_VAR 0 12
20243: PUSH
20244: LD_INT 1
20246: ARRAY
20247: PPUSH
20248: CALL_OW 313
20252: PUSH
20253: LD_INT 3
20255: LESS
20256: IFFALSE 20292
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20258: LD_INT 0
20260: PPUSH
20261: LD_INT 5
20263: PUSH
20264: LD_INT 8
20266: PUSH
20267: LD_INT 9
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: LIST
20274: PUSH
20275: LD_VAR 0 17
20279: ARRAY
20280: PPUSH
20281: LD_VAR 0 4
20285: PPUSH
20286: CALL_OW 380
20290: GO 20309
// PrepareHuman ( false , i , skill ) ;
20292: LD_INT 0
20294: PPUSH
20295: LD_VAR 0 8
20299: PPUSH
20300: LD_VAR 0 4
20304: PPUSH
20305: CALL_OW 380
// end else
20309: GO 20328
// PrepareHuman ( false , i , skill ) ;
20311: LD_INT 0
20313: PPUSH
20314: LD_VAR 0 8
20318: PPUSH
20319: LD_VAR 0 4
20323: PPUSH
20324: CALL_OW 380
// un := CreateHuman ;
20328: LD_ADDR_VAR 0 14
20332: PUSH
20333: CALL_OW 44
20337: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20338: LD_ADDR_VAR 0 7
20342: PUSH
20343: LD_VAR 0 7
20347: PPUSH
20348: LD_INT 1
20350: PPUSH
20351: LD_VAR 0 14
20355: PPUSH
20356: CALL_OW 2
20360: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20361: LD_VAR 0 14
20365: PPUSH
20366: LD_VAR 0 12
20370: PUSH
20371: LD_INT 1
20373: ARRAY
20374: PPUSH
20375: CALL_OW 52
// end ;
20379: GO 20014
20381: POP
20382: POP
// end ;
20383: GO 19314
20385: POP
20386: POP
// result := result ^ buildings ;
20387: LD_ADDR_VAR 0 7
20391: PUSH
20392: LD_VAR 0 7
20396: PUSH
20397: LD_VAR 0 18
20401: ADD
20402: ST_TO_ADDR
// end else
20403: GO 20546
// begin for i = 1 to personel do
20405: LD_ADDR_VAR 0 8
20409: PUSH
20410: DOUBLE
20411: LD_INT 1
20413: DEC
20414: ST_TO_ADDR
20415: LD_VAR 0 6
20419: PUSH
20420: FOR_TO
20421: IFFALSE 20544
// begin if i > 4 then
20423: LD_VAR 0 8
20427: PUSH
20428: LD_INT 4
20430: GREATER
20431: IFFALSE 20435
// break ;
20433: GO 20544
// x := personel [ i ] ;
20435: LD_ADDR_VAR 0 13
20439: PUSH
20440: LD_VAR 0 6
20444: PUSH
20445: LD_VAR 0 8
20449: ARRAY
20450: ST_TO_ADDR
// if x = - 1 then
20451: LD_VAR 0 13
20455: PUSH
20456: LD_INT 1
20458: NEG
20459: EQUAL
20460: IFFALSE 20464
// continue ;
20462: GO 20420
// PrepareHuman ( false , i , skill ) ;
20464: LD_INT 0
20466: PPUSH
20467: LD_VAR 0 8
20471: PPUSH
20472: LD_VAR 0 4
20476: PPUSH
20477: CALL_OW 380
// un := CreateHuman ;
20481: LD_ADDR_VAR 0 14
20485: PUSH
20486: CALL_OW 44
20490: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20491: LD_VAR 0 14
20495: PPUSH
20496: LD_VAR 0 1
20500: PPUSH
20501: CALL_OW 250
20505: PPUSH
20506: LD_VAR 0 1
20510: PPUSH
20511: CALL_OW 251
20515: PPUSH
20516: LD_INT 10
20518: PPUSH
20519: LD_INT 0
20521: PPUSH
20522: CALL_OW 50
// result := result ^ un ;
20526: LD_ADDR_VAR 0 7
20530: PUSH
20531: LD_VAR 0 7
20535: PUSH
20536: LD_VAR 0 14
20540: ADD
20541: ST_TO_ADDR
// end ;
20542: GO 20420
20544: POP
20545: POP
// end ; end ;
20546: LD_VAR 0 7
20550: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20551: LD_INT 0
20553: PPUSH
20554: PPUSH
20555: PPUSH
20556: PPUSH
20557: PPUSH
20558: PPUSH
20559: PPUSH
20560: PPUSH
20561: PPUSH
20562: PPUSH
20563: PPUSH
20564: PPUSH
20565: PPUSH
20566: PPUSH
20567: PPUSH
20568: PPUSH
// result := false ;
20569: LD_ADDR_VAR 0 3
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20577: LD_VAR 0 1
20581: NOT
20582: IFTRUE 20607
20584: PUSH
20585: LD_VAR 0 1
20589: PPUSH
20590: CALL_OW 266
20594: PUSH
20595: LD_INT 32
20597: PUSH
20598: LD_INT 33
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: IN
20605: NOT
20606: OR
20607: IFFALSE 20611
// exit ;
20609: GO 21746
// nat := GetNation ( tower ) ;
20611: LD_ADDR_VAR 0 12
20615: PUSH
20616: LD_VAR 0 1
20620: PPUSH
20621: CALL_OW 248
20625: ST_TO_ADDR
// side := GetSide ( tower ) ;
20626: LD_ADDR_VAR 0 16
20630: PUSH
20631: LD_VAR 0 1
20635: PPUSH
20636: CALL_OW 255
20640: ST_TO_ADDR
// x := GetX ( tower ) ;
20641: LD_ADDR_VAR 0 10
20645: PUSH
20646: LD_VAR 0 1
20650: PPUSH
20651: CALL_OW 250
20655: ST_TO_ADDR
// y := GetY ( tower ) ;
20656: LD_ADDR_VAR 0 11
20660: PUSH
20661: LD_VAR 0 1
20665: PPUSH
20666: CALL_OW 251
20670: ST_TO_ADDR
// if not x or not y then
20671: LD_VAR 0 10
20675: NOT
20676: IFTRUE 20685
20678: PUSH
20679: LD_VAR 0 11
20683: NOT
20684: OR
20685: IFFALSE 20689
// exit ;
20687: GO 21746
// weapon := 0 ;
20689: LD_ADDR_VAR 0 18
20693: PUSH
20694: LD_INT 0
20696: ST_TO_ADDR
// fac_list := [ ] ;
20697: LD_ADDR_VAR 0 17
20701: PUSH
20702: EMPTY
20703: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20704: LD_ADDR_VAR 0 6
20708: PUSH
20709: LD_VAR 0 1
20713: PPUSH
20714: CALL_OW 274
20718: PPUSH
20719: LD_VAR 0 2
20723: PPUSH
20724: LD_INT 0
20726: PPUSH
20727: CALL 18281 0 3
20731: PPUSH
20732: LD_INT 30
20734: PUSH
20735: LD_INT 3
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PPUSH
20742: CALL_OW 72
20746: ST_TO_ADDR
// if not factories then
20747: LD_VAR 0 6
20751: NOT
20752: IFFALSE 20756
// exit ;
20754: GO 21746
// for i in factories do
20756: LD_ADDR_VAR 0 8
20760: PUSH
20761: LD_VAR 0 6
20765: PUSH
20766: FOR_IN
20767: IFFALSE 20792
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20769: LD_ADDR_VAR 0 17
20773: PUSH
20774: LD_VAR 0 17
20778: PUSH
20779: LD_VAR 0 8
20783: PPUSH
20784: CALL_OW 478
20788: UNION
20789: ST_TO_ADDR
20790: GO 20766
20792: POP
20793: POP
// if not fac_list then
20794: LD_VAR 0 17
20798: NOT
20799: IFFALSE 20803
// exit ;
20801: GO 21746
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20803: LD_ADDR_VAR 0 5
20807: PUSH
20808: LD_INT 4
20810: PUSH
20811: LD_INT 5
20813: PUSH
20814: LD_INT 9
20816: PUSH
20817: LD_INT 10
20819: PUSH
20820: LD_INT 6
20822: PUSH
20823: LD_INT 7
20825: PUSH
20826: LD_INT 11
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 27
20840: PUSH
20841: LD_INT 28
20843: PUSH
20844: LD_INT 26
20846: PUSH
20847: LD_INT 30
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 43
20858: PUSH
20859: LD_INT 44
20861: PUSH
20862: LD_INT 46
20864: PUSH
20865: LD_INT 45
20867: PUSH
20868: LD_INT 47
20870: PUSH
20871: LD_INT 49
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: LIST
20886: PUSH
20887: LD_VAR 0 12
20891: ARRAY
20892: ST_TO_ADDR
// list := list isect fac_list ;
20893: LD_ADDR_VAR 0 5
20897: PUSH
20898: LD_VAR 0 5
20902: PUSH
20903: LD_VAR 0 17
20907: ISECT
20908: ST_TO_ADDR
// if not list then
20909: LD_VAR 0 5
20913: NOT
20914: IFFALSE 20918
// exit ;
20916: GO 21746
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20918: LD_VAR 0 12
20922: PUSH
20923: LD_INT 3
20925: EQUAL
20926: IFFALSE 20938
20928: PUSH
20929: LD_INT 49
20931: PUSH
20932: LD_VAR 0 5
20936: IN
20937: AND
20938: IFFALSE 20958
20940: PUSH
20941: LD_INT 31
20943: PPUSH
20944: LD_VAR 0 16
20948: PPUSH
20949: CALL_OW 321
20953: PUSH
20954: LD_INT 2
20956: EQUAL
20957: AND
20958: IFFALSE 21018
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20960: LD_INT 22
20962: PUSH
20963: LD_VAR 0 16
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 35
20974: PUSH
20975: LD_INT 49
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 91
20984: PUSH
20985: LD_VAR 0 1
20989: PUSH
20990: LD_INT 10
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: LIST
21002: PPUSH
21003: CALL_OW 69
21007: NOT
21008: IFFALSE 21018
// weapon := ru_time_lapser ;
21010: LD_ADDR_VAR 0 18
21014: PUSH
21015: LD_INT 49
21017: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21018: LD_VAR 0 12
21022: PUSH
21023: LD_INT 1
21025: PUSH
21026: LD_INT 2
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: IN
21033: IFFALSE 21057
21035: PUSH
21036: LD_INT 11
21038: PUSH
21039: LD_VAR 0 5
21043: IN
21044: IFTRUE 21056
21046: PUSH
21047: LD_INT 30
21049: PUSH
21050: LD_VAR 0 5
21054: IN
21055: OR
21056: AND
21057: IFFALSE 21077
21059: PUSH
21060: LD_INT 6
21062: PPUSH
21063: LD_VAR 0 16
21067: PPUSH
21068: CALL_OW 321
21072: PUSH
21073: LD_INT 2
21075: EQUAL
21076: AND
21077: IFFALSE 21244
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21079: LD_INT 22
21081: PUSH
21082: LD_VAR 0 16
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 2
21093: PUSH
21094: LD_INT 35
21096: PUSH
21097: LD_INT 11
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 35
21106: PUSH
21107: LD_INT 30
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 91
21121: PUSH
21122: LD_VAR 0 1
21126: PUSH
21127: LD_INT 18
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: LIST
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: LIST
21139: PPUSH
21140: CALL_OW 69
21144: NOT
21145: IFFALSE 21221
21147: PUSH
21148: LD_INT 22
21150: PUSH
21151: LD_VAR 0 16
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 2
21162: PUSH
21163: LD_INT 30
21165: PUSH
21166: LD_INT 32
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 30
21175: PUSH
21176: LD_INT 33
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 91
21190: PUSH
21191: LD_VAR 0 1
21195: PUSH
21196: LD_INT 12
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: LIST
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: LIST
21208: PUSH
21209: EMPTY
21210: LIST
21211: PPUSH
21212: CALL_OW 69
21216: PUSH
21217: LD_INT 2
21219: GREATER
21220: AND
21221: IFFALSE 21244
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21223: LD_ADDR_VAR 0 18
21227: PUSH
21228: LD_INT 11
21230: PUSH
21231: LD_INT 30
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_VAR 0 12
21242: ARRAY
21243: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21244: LD_VAR 0 18
21248: NOT
21249: IFFALSE 21269
21251: PUSH
21252: LD_INT 40
21254: PPUSH
21255: LD_VAR 0 16
21259: PPUSH
21260: CALL_OW 321
21264: PUSH
21265: LD_INT 2
21267: EQUAL
21268: AND
21269: IFFALSE 21305
21271: PUSH
21272: LD_INT 7
21274: PUSH
21275: LD_VAR 0 5
21279: IN
21280: IFTRUE 21292
21282: PUSH
21283: LD_INT 28
21285: PUSH
21286: LD_VAR 0 5
21290: IN
21291: OR
21292: IFTRUE 21304
21294: PUSH
21295: LD_INT 45
21297: PUSH
21298: LD_VAR 0 5
21302: IN
21303: OR
21304: AND
21305: IFFALSE 21559
// begin hex := GetHexInfo ( x , y ) ;
21307: LD_ADDR_VAR 0 4
21311: PUSH
21312: LD_VAR 0 10
21316: PPUSH
21317: LD_VAR 0 11
21321: PPUSH
21322: CALL_OW 546
21326: ST_TO_ADDR
// if hex [ 1 ] then
21327: LD_VAR 0 4
21331: PUSH
21332: LD_INT 1
21334: ARRAY
21335: IFFALSE 21339
// exit ;
21337: GO 21746
// height := hex [ 2 ] ;
21339: LD_ADDR_VAR 0 15
21343: PUSH
21344: LD_VAR 0 4
21348: PUSH
21349: LD_INT 2
21351: ARRAY
21352: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21353: LD_ADDR_VAR 0 14
21357: PUSH
21358: LD_INT 0
21360: PUSH
21361: LD_INT 2
21363: PUSH
21364: LD_INT 3
21366: PUSH
21367: LD_INT 5
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: ST_TO_ADDR
// for i in tmp do
21376: LD_ADDR_VAR 0 8
21380: PUSH
21381: LD_VAR 0 14
21385: PUSH
21386: FOR_IN
21387: IFFALSE 21557
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21389: LD_ADDR_VAR 0 9
21393: PUSH
21394: LD_VAR 0 10
21398: PPUSH
21399: LD_VAR 0 8
21403: PPUSH
21404: LD_INT 5
21406: PPUSH
21407: CALL_OW 272
21411: PUSH
21412: LD_VAR 0 11
21416: PPUSH
21417: LD_VAR 0 8
21421: PPUSH
21422: LD_INT 5
21424: PPUSH
21425: CALL_OW 273
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21434: LD_VAR 0 9
21438: PUSH
21439: LD_INT 1
21441: ARRAY
21442: PPUSH
21443: LD_VAR 0 9
21447: PUSH
21448: LD_INT 2
21450: ARRAY
21451: PPUSH
21452: CALL_OW 488
21456: IFFALSE 21555
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21458: LD_ADDR_VAR 0 4
21462: PUSH
21463: LD_VAR 0 9
21467: PUSH
21468: LD_INT 1
21470: ARRAY
21471: PPUSH
21472: LD_VAR 0 9
21476: PUSH
21477: LD_INT 2
21479: ARRAY
21480: PPUSH
21481: CALL_OW 546
21485: ST_TO_ADDR
// if hex [ 1 ] then
21486: LD_VAR 0 4
21490: PUSH
21491: LD_INT 1
21493: ARRAY
21494: IFFALSE 21498
// continue ;
21496: GO 21386
// h := hex [ 2 ] ;
21498: LD_ADDR_VAR 0 13
21502: PUSH
21503: LD_VAR 0 4
21507: PUSH
21508: LD_INT 2
21510: ARRAY
21511: ST_TO_ADDR
// if h + 7 < height then
21512: LD_VAR 0 13
21516: PUSH
21517: LD_INT 7
21519: PLUS
21520: PUSH
21521: LD_VAR 0 15
21525: LESS
21526: IFFALSE 21555
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21528: LD_ADDR_VAR 0 18
21532: PUSH
21533: LD_INT 7
21535: PUSH
21536: LD_INT 28
21538: PUSH
21539: LD_INT 45
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: LIST
21546: PUSH
21547: LD_VAR 0 12
21551: ARRAY
21552: ST_TO_ADDR
// break ;
21553: GO 21557
// end ; end ; end ;
21555: GO 21386
21557: POP
21558: POP
// end ; if not weapon then
21559: LD_VAR 0 18
21563: NOT
21564: IFFALSE 21624
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21566: LD_ADDR_VAR 0 5
21570: PUSH
21571: LD_VAR 0 5
21575: PUSH
21576: LD_INT 11
21578: PUSH
21579: LD_INT 30
21581: PUSH
21582: LD_INT 49
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: LIST
21589: DIFF
21590: ST_TO_ADDR
// if not list then
21591: LD_VAR 0 5
21595: NOT
21596: IFFALSE 21600
// exit ;
21598: GO 21746
// weapon := list [ rand ( 1 , list ) ] ;
21600: LD_ADDR_VAR 0 18
21604: PUSH
21605: LD_VAR 0 5
21609: PUSH
21610: LD_INT 1
21612: PPUSH
21613: LD_VAR 0 5
21617: PPUSH
21618: CALL_OW 12
21622: ARRAY
21623: ST_TO_ADDR
// end ; if weapon then
21624: LD_VAR 0 18
21628: IFFALSE 21746
// begin tmp := CostOfWeapon ( weapon ) ;
21630: LD_ADDR_VAR 0 14
21634: PUSH
21635: LD_VAR 0 18
21639: PPUSH
21640: CALL_OW 451
21644: ST_TO_ADDR
// j := GetBase ( tower ) ;
21645: LD_ADDR_VAR 0 9
21649: PUSH
21650: LD_VAR 0 1
21654: PPUSH
21655: CALL_OW 274
21659: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21660: LD_VAR 0 9
21664: PPUSH
21665: LD_INT 1
21667: PPUSH
21668: CALL_OW 275
21672: PUSH
21673: LD_VAR 0 14
21677: PUSH
21678: LD_INT 1
21680: ARRAY
21681: GREATEREQUAL
21682: IFFALSE 21708
21684: PUSH
21685: LD_VAR 0 9
21689: PPUSH
21690: LD_INT 2
21692: PPUSH
21693: CALL_OW 275
21697: PUSH
21698: LD_VAR 0 14
21702: PUSH
21703: LD_INT 2
21705: ARRAY
21706: GREATEREQUAL
21707: AND
21708: IFFALSE 21734
21710: PUSH
21711: LD_VAR 0 9
21715: PPUSH
21716: LD_INT 3
21718: PPUSH
21719: CALL_OW 275
21723: PUSH
21724: LD_VAR 0 14
21728: PUSH
21729: LD_INT 3
21731: ARRAY
21732: GREATEREQUAL
21733: AND
21734: IFFALSE 21746
// result := weapon ;
21736: LD_ADDR_VAR 0 3
21740: PUSH
21741: LD_VAR 0 18
21745: ST_TO_ADDR
// end ; end ;
21746: LD_VAR 0 3
21750: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21751: LD_INT 0
21753: PPUSH
21754: PPUSH
// result := true ;
21755: LD_ADDR_VAR 0 3
21759: PUSH
21760: LD_INT 1
21762: ST_TO_ADDR
// if array1 = array2 then
21763: LD_VAR 0 1
21767: PUSH
21768: LD_VAR 0 2
21772: EQUAL
21773: IFFALSE 21833
// begin for i = 1 to array1 do
21775: LD_ADDR_VAR 0 4
21779: PUSH
21780: DOUBLE
21781: LD_INT 1
21783: DEC
21784: ST_TO_ADDR
21785: LD_VAR 0 1
21789: PUSH
21790: FOR_TO
21791: IFFALSE 21829
// if array1 [ i ] <> array2 [ i ] then
21793: LD_VAR 0 1
21797: PUSH
21798: LD_VAR 0 4
21802: ARRAY
21803: PUSH
21804: LD_VAR 0 2
21808: PUSH
21809: LD_VAR 0 4
21813: ARRAY
21814: NONEQUAL
21815: IFFALSE 21827
// begin result := false ;
21817: LD_ADDR_VAR 0 3
21821: PUSH
21822: LD_INT 0
21824: ST_TO_ADDR
// break ;
21825: GO 21829
// end ;
21827: GO 21790
21829: POP
21830: POP
// end else
21831: GO 21841
// result := false ;
21833: LD_ADDR_VAR 0 3
21837: PUSH
21838: LD_INT 0
21840: ST_TO_ADDR
// end ;
21841: LD_VAR 0 3
21845: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21846: LD_INT 0
21848: PPUSH
21849: PPUSH
// if not array1 or not array2 then
21850: LD_VAR 0 1
21854: NOT
21855: IFTRUE 21864
21857: PUSH
21858: LD_VAR 0 2
21862: NOT
21863: OR
21864: IFFALSE 21868
// exit ;
21866: GO 21932
// result := true ;
21868: LD_ADDR_VAR 0 3
21872: PUSH
21873: LD_INT 1
21875: ST_TO_ADDR
// for i = 1 to array1 do
21876: LD_ADDR_VAR 0 4
21880: PUSH
21881: DOUBLE
21882: LD_INT 1
21884: DEC
21885: ST_TO_ADDR
21886: LD_VAR 0 1
21890: PUSH
21891: FOR_TO
21892: IFFALSE 21930
// if array1 [ i ] <> array2 [ i ] then
21894: LD_VAR 0 1
21898: PUSH
21899: LD_VAR 0 4
21903: ARRAY
21904: PUSH
21905: LD_VAR 0 2
21909: PUSH
21910: LD_VAR 0 4
21914: ARRAY
21915: NONEQUAL
21916: IFFALSE 21928
// begin result := false ;
21918: LD_ADDR_VAR 0 3
21922: PUSH
21923: LD_INT 0
21925: ST_TO_ADDR
// break ;
21926: GO 21930
// end ;
21928: GO 21891
21930: POP
21931: POP
// end ;
21932: LD_VAR 0 3
21936: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21937: LD_INT 0
21939: PPUSH
21940: PPUSH
21941: PPUSH
// pom := GetBase ( fac ) ;
21942: LD_ADDR_VAR 0 5
21946: PUSH
21947: LD_VAR 0 1
21951: PPUSH
21952: CALL_OW 274
21956: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21957: LD_ADDR_VAR 0 4
21961: PUSH
21962: LD_VAR 0 2
21966: PUSH
21967: LD_INT 1
21969: ARRAY
21970: PPUSH
21971: LD_VAR 0 2
21975: PUSH
21976: LD_INT 2
21978: ARRAY
21979: PPUSH
21980: LD_VAR 0 2
21984: PUSH
21985: LD_INT 3
21987: ARRAY
21988: PPUSH
21989: LD_VAR 0 2
21993: PUSH
21994: LD_INT 4
21996: ARRAY
21997: PPUSH
21998: CALL_OW 449
22002: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22003: LD_ADDR_VAR 0 3
22007: PUSH
22008: LD_VAR 0 5
22012: PPUSH
22013: LD_INT 1
22015: PPUSH
22016: CALL_OW 275
22020: PUSH
22021: LD_VAR 0 4
22025: PUSH
22026: LD_INT 1
22028: ARRAY
22029: GREATEREQUAL
22030: IFFALSE 22056
22032: PUSH
22033: LD_VAR 0 5
22037: PPUSH
22038: LD_INT 2
22040: PPUSH
22041: CALL_OW 275
22045: PUSH
22046: LD_VAR 0 4
22050: PUSH
22051: LD_INT 2
22053: ARRAY
22054: GREATEREQUAL
22055: AND
22056: IFFALSE 22082
22058: PUSH
22059: LD_VAR 0 5
22063: PPUSH
22064: LD_INT 3
22066: PPUSH
22067: CALL_OW 275
22071: PUSH
22072: LD_VAR 0 4
22076: PUSH
22077: LD_INT 3
22079: ARRAY
22080: GREATEREQUAL
22081: AND
22082: ST_TO_ADDR
// end ;
22083: LD_VAR 0 3
22087: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22088: LD_INT 0
22090: PPUSH
22091: PPUSH
22092: PPUSH
22093: PPUSH
// pom := GetBase ( building ) ;
22094: LD_ADDR_VAR 0 3
22098: PUSH
22099: LD_VAR 0 1
22103: PPUSH
22104: CALL_OW 274
22108: ST_TO_ADDR
// if not pom then
22109: LD_VAR 0 3
22113: NOT
22114: IFFALSE 22118
// exit ;
22116: GO 22292
// btype := GetBType ( building ) ;
22118: LD_ADDR_VAR 0 5
22122: PUSH
22123: LD_VAR 0 1
22127: PPUSH
22128: CALL_OW 266
22132: ST_TO_ADDR
// if btype = b_armoury then
22133: LD_VAR 0 5
22137: PUSH
22138: LD_INT 4
22140: EQUAL
22141: IFFALSE 22151
// btype := b_barracks ;
22143: LD_ADDR_VAR 0 5
22147: PUSH
22148: LD_INT 5
22150: ST_TO_ADDR
// if btype = b_depot then
22151: LD_VAR 0 5
22155: PUSH
22156: LD_INT 0
22158: EQUAL
22159: IFFALSE 22169
// btype := b_warehouse ;
22161: LD_ADDR_VAR 0 5
22165: PUSH
22166: LD_INT 1
22168: ST_TO_ADDR
// if btype = b_workshop then
22169: LD_VAR 0 5
22173: PUSH
22174: LD_INT 2
22176: EQUAL
22177: IFFALSE 22187
// btype := b_factory ;
22179: LD_ADDR_VAR 0 5
22183: PUSH
22184: LD_INT 3
22186: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22187: LD_ADDR_VAR 0 4
22191: PUSH
22192: LD_VAR 0 5
22196: PPUSH
22197: LD_VAR 0 1
22201: PPUSH
22202: CALL_OW 248
22206: PPUSH
22207: CALL_OW 450
22211: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22212: LD_ADDR_VAR 0 2
22216: PUSH
22217: LD_VAR 0 3
22221: PPUSH
22222: LD_INT 1
22224: PPUSH
22225: CALL_OW 275
22229: PUSH
22230: LD_VAR 0 4
22234: PUSH
22235: LD_INT 1
22237: ARRAY
22238: GREATEREQUAL
22239: IFFALSE 22265
22241: PUSH
22242: LD_VAR 0 3
22246: PPUSH
22247: LD_INT 2
22249: PPUSH
22250: CALL_OW 275
22254: PUSH
22255: LD_VAR 0 4
22259: PUSH
22260: LD_INT 2
22262: ARRAY
22263: GREATEREQUAL
22264: AND
22265: IFFALSE 22291
22267: PUSH
22268: LD_VAR 0 3
22272: PPUSH
22273: LD_INT 3
22275: PPUSH
22276: CALL_OW 275
22280: PUSH
22281: LD_VAR 0 4
22285: PUSH
22286: LD_INT 3
22288: ARRAY
22289: GREATEREQUAL
22290: AND
22291: ST_TO_ADDR
// end ;
22292: LD_VAR 0 2
22296: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22297: LD_INT 0
22299: PPUSH
22300: PPUSH
22301: PPUSH
// pom := GetBase ( building ) ;
22302: LD_ADDR_VAR 0 4
22306: PUSH
22307: LD_VAR 0 1
22311: PPUSH
22312: CALL_OW 274
22316: ST_TO_ADDR
// if not pom then
22317: LD_VAR 0 4
22321: NOT
22322: IFFALSE 22326
// exit ;
22324: GO 22431
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22326: LD_ADDR_VAR 0 5
22330: PUSH
22331: LD_VAR 0 2
22335: PPUSH
22336: LD_VAR 0 1
22340: PPUSH
22341: CALL_OW 248
22345: PPUSH
22346: CALL_OW 450
22350: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22351: LD_ADDR_VAR 0 3
22355: PUSH
22356: LD_VAR 0 4
22360: PPUSH
22361: LD_INT 1
22363: PPUSH
22364: CALL_OW 275
22368: PUSH
22369: LD_VAR 0 5
22373: PUSH
22374: LD_INT 1
22376: ARRAY
22377: GREATEREQUAL
22378: IFFALSE 22404
22380: PUSH
22381: LD_VAR 0 4
22385: PPUSH
22386: LD_INT 2
22388: PPUSH
22389: CALL_OW 275
22393: PUSH
22394: LD_VAR 0 5
22398: PUSH
22399: LD_INT 2
22401: ARRAY
22402: GREATEREQUAL
22403: AND
22404: IFFALSE 22430
22406: PUSH
22407: LD_VAR 0 4
22411: PPUSH
22412: LD_INT 3
22414: PPUSH
22415: CALL_OW 275
22419: PUSH
22420: LD_VAR 0 5
22424: PUSH
22425: LD_INT 3
22427: ARRAY
22428: GREATEREQUAL
22429: AND
22430: ST_TO_ADDR
// end ;
22431: LD_VAR 0 3
22435: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22436: LD_INT 0
22438: PPUSH
22439: PPUSH
22440: PPUSH
22441: PPUSH
22442: PPUSH
22443: PPUSH
22444: PPUSH
22445: PPUSH
22446: PPUSH
22447: PPUSH
22448: PPUSH
// result := false ;
22449: LD_ADDR_VAR 0 8
22453: PUSH
22454: LD_INT 0
22456: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22457: LD_VAR 0 5
22461: NOT
22462: IFTRUE 22471
22464: PUSH
22465: LD_VAR 0 1
22469: NOT
22470: OR
22471: IFTRUE 22480
22473: PUSH
22474: LD_VAR 0 2
22478: NOT
22479: OR
22480: IFTRUE 22489
22482: PUSH
22483: LD_VAR 0 3
22487: NOT
22488: OR
22489: IFFALSE 22493
// exit ;
22491: GO 23319
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22493: LD_ADDR_VAR 0 14
22497: PUSH
22498: LD_VAR 0 1
22502: PPUSH
22503: LD_VAR 0 2
22507: PPUSH
22508: LD_VAR 0 3
22512: PPUSH
22513: LD_VAR 0 4
22517: PPUSH
22518: LD_VAR 0 5
22522: PUSH
22523: LD_INT 1
22525: ARRAY
22526: PPUSH
22527: CALL_OW 248
22531: PPUSH
22532: LD_INT 0
22534: PPUSH
22535: CALL 24600 0 6
22539: ST_TO_ADDR
// if not hexes then
22540: LD_VAR 0 14
22544: NOT
22545: IFFALSE 22549
// exit ;
22547: GO 23319
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22549: LD_ADDR_VAR 0 17
22553: PUSH
22554: LD_VAR 0 5
22558: PPUSH
22559: LD_INT 22
22561: PUSH
22562: LD_VAR 0 13
22566: PPUSH
22567: CALL_OW 255
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 2
22578: PUSH
22579: LD_INT 30
22581: PUSH
22582: LD_INT 0
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 30
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: LIST
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PPUSH
22608: CALL_OW 72
22612: ST_TO_ADDR
// for i = 1 to hexes do
22613: LD_ADDR_VAR 0 9
22617: PUSH
22618: DOUBLE
22619: LD_INT 1
22621: DEC
22622: ST_TO_ADDR
22623: LD_VAR 0 14
22627: PUSH
22628: FOR_TO
22629: IFFALSE 23317
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22631: LD_ADDR_VAR 0 13
22635: PUSH
22636: LD_VAR 0 14
22640: PUSH
22641: LD_VAR 0 9
22645: ARRAY
22646: PUSH
22647: LD_INT 1
22649: ARRAY
22650: PPUSH
22651: LD_VAR 0 14
22655: PUSH
22656: LD_VAR 0 9
22660: ARRAY
22661: PUSH
22662: LD_INT 2
22664: ARRAY
22665: PPUSH
22666: CALL_OW 428
22670: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22671: LD_VAR 0 14
22675: PUSH
22676: LD_VAR 0 9
22680: ARRAY
22681: PUSH
22682: LD_INT 1
22684: ARRAY
22685: PPUSH
22686: LD_VAR 0 14
22690: PUSH
22691: LD_VAR 0 9
22695: ARRAY
22696: PUSH
22697: LD_INT 2
22699: ARRAY
22700: PPUSH
22701: CALL_OW 351
22705: IFTRUE 22744
22707: PUSH
22708: LD_VAR 0 14
22712: PUSH
22713: LD_VAR 0 9
22717: ARRAY
22718: PUSH
22719: LD_INT 1
22721: ARRAY
22722: PPUSH
22723: LD_VAR 0 14
22727: PUSH
22728: LD_VAR 0 9
22732: ARRAY
22733: PUSH
22734: LD_INT 2
22736: ARRAY
22737: PPUSH
22738: CALL_OW 488
22742: NOT
22743: OR
22744: IFTRUE 22761
22746: PUSH
22747: LD_VAR 0 13
22751: PPUSH
22752: CALL_OW 247
22756: PUSH
22757: LD_INT 3
22759: EQUAL
22760: OR
22761: IFFALSE 22767
// exit ;
22763: POP
22764: POP
22765: GO 23319
// if not tmp then
22767: LD_VAR 0 13
22771: NOT
22772: IFFALSE 22776
// continue ;
22774: GO 22628
// result := true ;
22776: LD_ADDR_VAR 0 8
22780: PUSH
22781: LD_INT 1
22783: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22784: LD_VAR 0 6
22788: IFFALSE 22805
22790: PUSH
22791: LD_VAR 0 13
22795: PPUSH
22796: CALL_OW 247
22800: PUSH
22801: LD_INT 2
22803: EQUAL
22804: AND
22805: IFFALSE 22822
22807: PUSH
22808: LD_VAR 0 13
22812: PPUSH
22813: CALL_OW 263
22817: PUSH
22818: LD_INT 1
22820: EQUAL
22821: AND
22822: IFFALSE 22986
// begin if IsDrivenBy ( tmp ) then
22824: LD_VAR 0 13
22828: PPUSH
22829: CALL_OW 311
22833: IFFALSE 22837
// continue ;
22835: GO 22628
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22837: LD_VAR 0 6
22841: PPUSH
22842: LD_INT 3
22844: PUSH
22845: LD_INT 60
22847: PUSH
22848: EMPTY
22849: LIST
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 3
22857: PUSH
22858: LD_INT 55
22860: PUSH
22861: EMPTY
22862: LIST
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PPUSH
22872: CALL_OW 72
22876: IFFALSE 22984
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22878: LD_ADDR_VAR 0 18
22882: PUSH
22883: LD_VAR 0 6
22887: PPUSH
22888: LD_INT 3
22890: PUSH
22891: LD_INT 60
22893: PUSH
22894: EMPTY
22895: LIST
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 3
22903: PUSH
22904: LD_INT 55
22906: PUSH
22907: EMPTY
22908: LIST
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PPUSH
22918: CALL_OW 72
22922: PUSH
22923: LD_INT 1
22925: ARRAY
22926: ST_TO_ADDR
// if IsInUnit ( driver ) then
22927: LD_VAR 0 18
22931: PPUSH
22932: CALL_OW 310
22936: IFFALSE 22947
// ComExit ( driver ) ;
22938: LD_VAR 0 18
22942: PPUSH
22943: CALL 48590 0 1
// AddComEnterUnit ( driver , tmp ) ;
22947: LD_VAR 0 18
22951: PPUSH
22952: LD_VAR 0 13
22956: PPUSH
22957: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22961: LD_VAR 0 18
22965: PPUSH
22966: LD_VAR 0 7
22970: PPUSH
22971: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22975: LD_VAR 0 18
22979: PPUSH
22980: CALL_OW 181
// end ; continue ;
22984: GO 22628
// end ; if not cleaners or not tmp in cleaners then
22986: LD_VAR 0 6
22990: NOT
22991: IFTRUE 23006
22993: PUSH
22994: LD_VAR 0 13
22998: PUSH
22999: LD_VAR 0 6
23003: IN
23004: NOT
23005: OR
23006: IFFALSE 23315
// begin if dep then
23008: LD_VAR 0 17
23012: IFFALSE 23148
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23014: LD_ADDR_VAR 0 16
23018: PUSH
23019: LD_VAR 0 17
23023: PUSH
23024: LD_INT 1
23026: ARRAY
23027: PPUSH
23028: CALL_OW 250
23032: PPUSH
23033: LD_VAR 0 17
23037: PUSH
23038: LD_INT 1
23040: ARRAY
23041: PPUSH
23042: CALL_OW 254
23046: PPUSH
23047: LD_INT 5
23049: PPUSH
23050: CALL_OW 272
23054: PUSH
23055: LD_VAR 0 17
23059: PUSH
23060: LD_INT 1
23062: ARRAY
23063: PPUSH
23064: CALL_OW 251
23068: PPUSH
23069: LD_VAR 0 17
23073: PUSH
23074: LD_INT 1
23076: ARRAY
23077: PPUSH
23078: CALL_OW 254
23082: PPUSH
23083: LD_INT 5
23085: PPUSH
23086: CALL_OW 273
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23095: LD_VAR 0 16
23099: PUSH
23100: LD_INT 1
23102: ARRAY
23103: PPUSH
23104: LD_VAR 0 16
23108: PUSH
23109: LD_INT 2
23111: ARRAY
23112: PPUSH
23113: CALL_OW 488
23117: IFFALSE 23148
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23119: LD_VAR 0 13
23123: PPUSH
23124: LD_VAR 0 16
23128: PUSH
23129: LD_INT 1
23131: ARRAY
23132: PPUSH
23133: LD_VAR 0 16
23137: PUSH
23138: LD_INT 2
23140: ARRAY
23141: PPUSH
23142: CALL_OW 111
// continue ;
23146: GO 22628
// end ; end ; r := GetDir ( tmp ) ;
23148: LD_ADDR_VAR 0 15
23152: PUSH
23153: LD_VAR 0 13
23157: PPUSH
23158: CALL_OW 254
23162: ST_TO_ADDR
// if r = 5 then
23163: LD_VAR 0 15
23167: PUSH
23168: LD_INT 5
23170: EQUAL
23171: IFFALSE 23181
// r := 0 ;
23173: LD_ADDR_VAR 0 15
23177: PUSH
23178: LD_INT 0
23180: ST_TO_ADDR
// for j = r to 5 do
23181: LD_ADDR_VAR 0 10
23185: PUSH
23186: DOUBLE
23187: LD_VAR 0 15
23191: DEC
23192: ST_TO_ADDR
23193: LD_INT 5
23195: PUSH
23196: FOR_TO
23197: IFFALSE 23313
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23199: LD_ADDR_VAR 0 11
23203: PUSH
23204: LD_VAR 0 13
23208: PPUSH
23209: CALL_OW 250
23213: PPUSH
23214: LD_VAR 0 10
23218: PPUSH
23219: LD_INT 2
23221: PPUSH
23222: CALL_OW 272
23226: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23227: LD_ADDR_VAR 0 12
23231: PUSH
23232: LD_VAR 0 13
23236: PPUSH
23237: CALL_OW 251
23241: PPUSH
23242: LD_VAR 0 10
23246: PPUSH
23247: LD_INT 2
23249: PPUSH
23250: CALL_OW 273
23254: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23255: LD_VAR 0 11
23259: PPUSH
23260: LD_VAR 0 12
23264: PPUSH
23265: CALL_OW 488
23269: IFFALSE 23288
23271: PUSH
23272: LD_VAR 0 11
23276: PPUSH
23277: LD_VAR 0 12
23281: PPUSH
23282: CALL_OW 428
23286: NOT
23287: AND
23288: IFFALSE 23311
// begin ComMoveXY ( tmp , _x , _y ) ;
23290: LD_VAR 0 13
23294: PPUSH
23295: LD_VAR 0 11
23299: PPUSH
23300: LD_VAR 0 12
23304: PPUSH
23305: CALL_OW 111
// break ;
23309: GO 23313
// end ; end ;
23311: GO 23196
23313: POP
23314: POP
// end ; end ;
23315: GO 22628
23317: POP
23318: POP
// end ;
23319: LD_VAR 0 8
23323: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23324: LD_INT 0
23326: PPUSH
// result := true ;
23327: LD_ADDR_VAR 0 3
23331: PUSH
23332: LD_INT 1
23334: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23335: LD_VAR 0 2
23339: PUSH
23340: LD_INT 24
23342: DOUBLE
23343: EQUAL
23344: IFTRUE 23354
23346: LD_INT 33
23348: DOUBLE
23349: EQUAL
23350: IFTRUE 23354
23352: GO 23379
23354: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23355: LD_ADDR_VAR 0 3
23359: PUSH
23360: LD_INT 32
23362: PPUSH
23363: LD_VAR 0 1
23367: PPUSH
23368: CALL_OW 321
23372: PUSH
23373: LD_INT 2
23375: EQUAL
23376: ST_TO_ADDR
23377: GO 23695
23379: LD_INT 20
23381: DOUBLE
23382: EQUAL
23383: IFTRUE 23387
23385: GO 23412
23387: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23388: LD_ADDR_VAR 0 3
23392: PUSH
23393: LD_INT 6
23395: PPUSH
23396: LD_VAR 0 1
23400: PPUSH
23401: CALL_OW 321
23405: PUSH
23406: LD_INT 2
23408: EQUAL
23409: ST_TO_ADDR
23410: GO 23695
23412: LD_INT 22
23414: DOUBLE
23415: EQUAL
23416: IFTRUE 23426
23418: LD_INT 36
23420: DOUBLE
23421: EQUAL
23422: IFTRUE 23426
23424: GO 23451
23426: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23427: LD_ADDR_VAR 0 3
23431: PUSH
23432: LD_INT 15
23434: PPUSH
23435: LD_VAR 0 1
23439: PPUSH
23440: CALL_OW 321
23444: PUSH
23445: LD_INT 2
23447: EQUAL
23448: ST_TO_ADDR
23449: GO 23695
23451: LD_INT 30
23453: DOUBLE
23454: EQUAL
23455: IFTRUE 23459
23457: GO 23484
23459: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23460: LD_ADDR_VAR 0 3
23464: PUSH
23465: LD_INT 20
23467: PPUSH
23468: LD_VAR 0 1
23472: PPUSH
23473: CALL_OW 321
23477: PUSH
23478: LD_INT 2
23480: EQUAL
23481: ST_TO_ADDR
23482: GO 23695
23484: LD_INT 28
23486: DOUBLE
23487: EQUAL
23488: IFTRUE 23498
23490: LD_INT 21
23492: DOUBLE
23493: EQUAL
23494: IFTRUE 23498
23496: GO 23523
23498: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23499: LD_ADDR_VAR 0 3
23503: PUSH
23504: LD_INT 21
23506: PPUSH
23507: LD_VAR 0 1
23511: PPUSH
23512: CALL_OW 321
23516: PUSH
23517: LD_INT 2
23519: EQUAL
23520: ST_TO_ADDR
23521: GO 23695
23523: LD_INT 16
23525: DOUBLE
23526: EQUAL
23527: IFTRUE 23531
23529: GO 23556
23531: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23532: LD_ADDR_VAR 0 3
23536: PUSH
23537: LD_INT 84
23539: PPUSH
23540: LD_VAR 0 1
23544: PPUSH
23545: CALL_OW 321
23549: PUSH
23550: LD_INT 2
23552: EQUAL
23553: ST_TO_ADDR
23554: GO 23695
23556: LD_INT 19
23558: DOUBLE
23559: EQUAL
23560: IFTRUE 23570
23562: LD_INT 23
23564: DOUBLE
23565: EQUAL
23566: IFTRUE 23570
23568: GO 23595
23570: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23571: LD_ADDR_VAR 0 3
23575: PUSH
23576: LD_INT 83
23578: PPUSH
23579: LD_VAR 0 1
23583: PPUSH
23584: CALL_OW 321
23588: PUSH
23589: LD_INT 2
23591: EQUAL
23592: ST_TO_ADDR
23593: GO 23695
23595: LD_INT 17
23597: DOUBLE
23598: EQUAL
23599: IFTRUE 23603
23601: GO 23628
23603: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23604: LD_ADDR_VAR 0 3
23608: PUSH
23609: LD_INT 39
23611: PPUSH
23612: LD_VAR 0 1
23616: PPUSH
23617: CALL_OW 321
23621: PUSH
23622: LD_INT 2
23624: EQUAL
23625: ST_TO_ADDR
23626: GO 23695
23628: LD_INT 18
23630: DOUBLE
23631: EQUAL
23632: IFTRUE 23636
23634: GO 23661
23636: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23637: LD_ADDR_VAR 0 3
23641: PUSH
23642: LD_INT 40
23644: PPUSH
23645: LD_VAR 0 1
23649: PPUSH
23650: CALL_OW 321
23654: PUSH
23655: LD_INT 2
23657: EQUAL
23658: ST_TO_ADDR
23659: GO 23695
23661: LD_INT 27
23663: DOUBLE
23664: EQUAL
23665: IFTRUE 23669
23667: GO 23694
23669: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23670: LD_ADDR_VAR 0 3
23674: PUSH
23675: LD_INT 35
23677: PPUSH
23678: LD_VAR 0 1
23682: PPUSH
23683: CALL_OW 321
23687: PUSH
23688: LD_INT 2
23690: EQUAL
23691: ST_TO_ADDR
23692: GO 23695
23694: POP
// end ;
23695: LD_VAR 0 3
23699: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23700: LD_INT 0
23702: PPUSH
23703: PPUSH
23704: PPUSH
23705: PPUSH
23706: PPUSH
23707: PPUSH
23708: PPUSH
23709: PPUSH
23710: PPUSH
23711: PPUSH
23712: PPUSH
// result := false ;
23713: LD_ADDR_VAR 0 6
23717: PUSH
23718: LD_INT 0
23720: ST_TO_ADDR
// if btype = b_depot then
23721: LD_VAR 0 2
23725: PUSH
23726: LD_INT 0
23728: EQUAL
23729: IFFALSE 23741
// begin result := true ;
23731: LD_ADDR_VAR 0 6
23735: PUSH
23736: LD_INT 1
23738: ST_TO_ADDR
// exit ;
23739: GO 24595
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23741: LD_VAR 0 1
23745: NOT
23746: IFTRUE 23771
23748: PUSH
23749: LD_VAR 0 1
23753: PPUSH
23754: CALL_OW 266
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: IN
23769: NOT
23770: OR
23771: IFTRUE 23780
23773: PUSH
23774: LD_VAR 0 2
23778: NOT
23779: OR
23780: IFTRUE 23816
23782: PUSH
23783: LD_VAR 0 5
23787: PUSH
23788: LD_INT 0
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: LD_INT 2
23796: PUSH
23797: LD_INT 3
23799: PUSH
23800: LD_INT 4
23802: PUSH
23803: LD_INT 5
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: IN
23814: NOT
23815: OR
23816: IFTRUE 23835
23818: PUSH
23819: LD_VAR 0 3
23823: PPUSH
23824: LD_VAR 0 4
23828: PPUSH
23829: CALL_OW 488
23833: NOT
23834: OR
23835: IFFALSE 23839
// exit ;
23837: GO 24595
// side := GetSide ( depot ) ;
23839: LD_ADDR_VAR 0 9
23843: PUSH
23844: LD_VAR 0 1
23848: PPUSH
23849: CALL_OW 255
23853: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23854: LD_VAR 0 9
23858: PPUSH
23859: LD_VAR 0 2
23863: PPUSH
23864: CALL 23324 0 2
23868: NOT
23869: IFFALSE 23873
// exit ;
23871: GO 24595
// pom := GetBase ( depot ) ;
23873: LD_ADDR_VAR 0 10
23877: PUSH
23878: LD_VAR 0 1
23882: PPUSH
23883: CALL_OW 274
23887: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23888: LD_ADDR_VAR 0 11
23892: PUSH
23893: LD_VAR 0 2
23897: PPUSH
23898: LD_VAR 0 1
23902: PPUSH
23903: CALL_OW 248
23907: PPUSH
23908: CALL_OW 450
23912: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23913: LD_VAR 0 10
23917: PPUSH
23918: LD_INT 1
23920: PPUSH
23921: CALL_OW 275
23925: PUSH
23926: LD_VAR 0 11
23930: PUSH
23931: LD_INT 1
23933: ARRAY
23934: GREATEREQUAL
23935: IFFALSE 23961
23937: PUSH
23938: LD_VAR 0 10
23942: PPUSH
23943: LD_INT 2
23945: PPUSH
23946: CALL_OW 275
23950: PUSH
23951: LD_VAR 0 11
23955: PUSH
23956: LD_INT 2
23958: ARRAY
23959: GREATEREQUAL
23960: AND
23961: IFFALSE 23987
23963: PUSH
23964: LD_VAR 0 10
23968: PPUSH
23969: LD_INT 3
23971: PPUSH
23972: CALL_OW 275
23976: PUSH
23977: LD_VAR 0 11
23981: PUSH
23982: LD_INT 3
23984: ARRAY
23985: GREATEREQUAL
23986: AND
23987: NOT
23988: IFFALSE 23992
// exit ;
23990: GO 24595
// if GetBType ( depot ) = b_depot then
23992: LD_VAR 0 1
23996: PPUSH
23997: CALL_OW 266
24001: PUSH
24002: LD_INT 0
24004: EQUAL
24005: IFFALSE 24017
// dist := 28 else
24007: LD_ADDR_VAR 0 14
24011: PUSH
24012: LD_INT 28
24014: ST_TO_ADDR
24015: GO 24025
// dist := 36 ;
24017: LD_ADDR_VAR 0 14
24021: PUSH
24022: LD_INT 36
24024: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24025: LD_VAR 0 1
24029: PPUSH
24030: LD_VAR 0 3
24034: PPUSH
24035: LD_VAR 0 4
24039: PPUSH
24040: CALL_OW 297
24044: PUSH
24045: LD_VAR 0 14
24049: GREATER
24050: IFFALSE 24054
// exit ;
24052: GO 24595
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24054: LD_ADDR_VAR 0 12
24058: PUSH
24059: LD_VAR 0 2
24063: PPUSH
24064: LD_VAR 0 3
24068: PPUSH
24069: LD_VAR 0 4
24073: PPUSH
24074: LD_VAR 0 5
24078: PPUSH
24079: LD_VAR 0 1
24083: PPUSH
24084: CALL_OW 248
24088: PPUSH
24089: LD_INT 0
24091: PPUSH
24092: CALL 24600 0 6
24096: ST_TO_ADDR
// if not hexes then
24097: LD_VAR 0 12
24101: NOT
24102: IFFALSE 24106
// exit ;
24104: GO 24595
// hex := GetHexInfo ( x , y ) ;
24106: LD_ADDR_VAR 0 15
24110: PUSH
24111: LD_VAR 0 3
24115: PPUSH
24116: LD_VAR 0 4
24120: PPUSH
24121: CALL_OW 546
24125: ST_TO_ADDR
// if hex [ 1 ] then
24126: LD_VAR 0 15
24130: PUSH
24131: LD_INT 1
24133: ARRAY
24134: IFFALSE 24138
// exit ;
24136: GO 24595
// height := hex [ 2 ] ;
24138: LD_ADDR_VAR 0 13
24142: PUSH
24143: LD_VAR 0 15
24147: PUSH
24148: LD_INT 2
24150: ARRAY
24151: ST_TO_ADDR
// for i = 1 to hexes do
24152: LD_ADDR_VAR 0 7
24156: PUSH
24157: DOUBLE
24158: LD_INT 1
24160: DEC
24161: ST_TO_ADDR
24162: LD_VAR 0 12
24166: PUSH
24167: FOR_TO
24168: IFFALSE 24512
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24170: LD_VAR 0 12
24174: PUSH
24175: LD_VAR 0 7
24179: ARRAY
24180: PUSH
24181: LD_INT 1
24183: ARRAY
24184: PPUSH
24185: LD_VAR 0 12
24189: PUSH
24190: LD_VAR 0 7
24194: ARRAY
24195: PUSH
24196: LD_INT 2
24198: ARRAY
24199: PPUSH
24200: CALL_OW 488
24204: NOT
24205: IFTRUE 24247
24207: PUSH
24208: LD_VAR 0 12
24212: PUSH
24213: LD_VAR 0 7
24217: ARRAY
24218: PUSH
24219: LD_INT 1
24221: ARRAY
24222: PPUSH
24223: LD_VAR 0 12
24227: PUSH
24228: LD_VAR 0 7
24232: ARRAY
24233: PUSH
24234: LD_INT 2
24236: ARRAY
24237: PPUSH
24238: CALL_OW 428
24242: PUSH
24243: LD_INT 0
24245: GREATER
24246: OR
24247: IFTRUE 24285
24249: PUSH
24250: LD_VAR 0 12
24254: PUSH
24255: LD_VAR 0 7
24259: ARRAY
24260: PUSH
24261: LD_INT 1
24263: ARRAY
24264: PPUSH
24265: LD_VAR 0 12
24269: PUSH
24270: LD_VAR 0 7
24274: ARRAY
24275: PUSH
24276: LD_INT 2
24278: ARRAY
24279: PPUSH
24280: CALL_OW 351
24284: OR
24285: IFFALSE 24291
// exit ;
24287: POP
24288: POP
24289: GO 24595
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24291: LD_ADDR_VAR 0 8
24295: PUSH
24296: LD_VAR 0 12
24300: PUSH
24301: LD_VAR 0 7
24305: ARRAY
24306: PUSH
24307: LD_INT 1
24309: ARRAY
24310: PPUSH
24311: LD_VAR 0 12
24315: PUSH
24316: LD_VAR 0 7
24320: ARRAY
24321: PUSH
24322: LD_INT 2
24324: ARRAY
24325: PPUSH
24326: CALL_OW 546
24330: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24331: LD_VAR 0 8
24335: PUSH
24336: LD_INT 1
24338: ARRAY
24339: IFTRUE 24361
24341: PUSH
24342: LD_VAR 0 8
24346: PUSH
24347: LD_INT 2
24349: ARRAY
24350: PUSH
24351: LD_VAR 0 13
24355: PUSH
24356: LD_INT 2
24358: PLUS
24359: GREATER
24360: OR
24361: IFTRUE 24383
24363: PUSH
24364: LD_VAR 0 8
24368: PUSH
24369: LD_INT 2
24371: ARRAY
24372: PUSH
24373: LD_VAR 0 13
24377: PUSH
24378: LD_INT 2
24380: MINUS
24381: LESS
24382: OR
24383: IFTRUE 24451
24385: PUSH
24386: LD_VAR 0 8
24390: PUSH
24391: LD_INT 3
24393: ARRAY
24394: PUSH
24395: LD_INT 0
24397: PUSH
24398: LD_INT 8
24400: PUSH
24401: LD_INT 9
24403: PUSH
24404: LD_INT 10
24406: PUSH
24407: LD_INT 11
24409: PUSH
24410: LD_INT 12
24412: PUSH
24413: LD_INT 13
24415: PUSH
24416: LD_INT 16
24418: PUSH
24419: LD_INT 17
24421: PUSH
24422: LD_INT 18
24424: PUSH
24425: LD_INT 19
24427: PUSH
24428: LD_INT 20
24430: PUSH
24431: LD_INT 21
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: IN
24449: NOT
24450: OR
24451: IFTRUE 24464
24453: PUSH
24454: LD_VAR 0 8
24458: PUSH
24459: LD_INT 5
24461: ARRAY
24462: NOT
24463: OR
24464: IFTRUE 24504
24466: PUSH
24467: LD_VAR 0 8
24471: PUSH
24472: LD_INT 6
24474: ARRAY
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: LD_INT 2
24481: PUSH
24482: LD_INT 7
24484: PUSH
24485: LD_INT 9
24487: PUSH
24488: LD_INT 10
24490: PUSH
24491: LD_INT 11
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: IN
24502: NOT
24503: OR
24504: IFFALSE 24510
// exit ;
24506: POP
24507: POP
24508: GO 24595
// end ;
24510: GO 24167
24512: POP
24513: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24514: LD_VAR 0 9
24518: PPUSH
24519: LD_VAR 0 3
24523: PPUSH
24524: LD_VAR 0 4
24528: PPUSH
24529: LD_INT 20
24531: PPUSH
24532: CALL 16414 0 4
24536: PUSH
24537: LD_INT 4
24539: ARRAY
24540: IFFALSE 24544
// exit ;
24542: GO 24595
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24544: LD_VAR 0 2
24548: PUSH
24549: LD_INT 29
24551: PUSH
24552: LD_INT 30
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: IN
24559: IFFALSE 24583
24561: PUSH
24562: LD_VAR 0 3
24566: PPUSH
24567: LD_VAR 0 4
24571: PPUSH
24572: LD_VAR 0 9
24576: PPUSH
24577: CALL_OW 440
24581: NOT
24582: AND
24583: IFFALSE 24587
// exit ;
24585: GO 24595
// result := true ;
24587: LD_ADDR_VAR 0 6
24591: PUSH
24592: LD_INT 1
24594: ST_TO_ADDR
// end ;
24595: LD_VAR 0 6
24599: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24600: LD_INT 0
24602: PPUSH
24603: PPUSH
24604: PPUSH
24605: PPUSH
24606: PPUSH
24607: PPUSH
24608: PPUSH
24609: PPUSH
24610: PPUSH
24611: PPUSH
24612: PPUSH
24613: PPUSH
24614: PPUSH
24615: PPUSH
24616: PPUSH
24617: PPUSH
24618: PPUSH
24619: PPUSH
24620: PPUSH
24621: PPUSH
24622: PPUSH
24623: PPUSH
24624: PPUSH
24625: PPUSH
24626: PPUSH
24627: PPUSH
24628: PPUSH
24629: PPUSH
24630: PPUSH
24631: PPUSH
24632: PPUSH
24633: PPUSH
24634: PPUSH
24635: PPUSH
24636: PPUSH
24637: PPUSH
24638: PPUSH
24639: PPUSH
24640: PPUSH
24641: PPUSH
24642: PPUSH
24643: PPUSH
24644: PPUSH
24645: PPUSH
24646: PPUSH
24647: PPUSH
24648: PPUSH
24649: PPUSH
24650: PPUSH
24651: PPUSH
24652: PPUSH
24653: PPUSH
24654: PPUSH
24655: PPUSH
24656: PPUSH
24657: PPUSH
24658: PPUSH
24659: PPUSH
// result = [ ] ;
24660: LD_ADDR_VAR 0 7
24664: PUSH
24665: EMPTY
24666: ST_TO_ADDR
// temp_list = [ ] ;
24667: LD_ADDR_VAR 0 9
24671: PUSH
24672: EMPTY
24673: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24674: LD_VAR 0 4
24678: PUSH
24679: LD_INT 0
24681: PUSH
24682: LD_INT 1
24684: PUSH
24685: LD_INT 2
24687: PUSH
24688: LD_INT 3
24690: PUSH
24691: LD_INT 4
24693: PUSH
24694: LD_INT 5
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: IN
24705: NOT
24706: IFTRUE 24749
24708: PUSH
24709: LD_VAR 0 1
24713: PUSH
24714: LD_INT 0
24716: PUSH
24717: LD_INT 1
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: IN
24724: IFFALSE 24748
24726: PUSH
24727: LD_VAR 0 5
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: LD_INT 2
24737: PUSH
24738: LD_INT 3
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: LIST
24745: IN
24746: NOT
24747: AND
24748: OR
24749: IFFALSE 24753
// exit ;
24751: GO 43152
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24753: LD_VAR 0 1
24757: PUSH
24758: LD_INT 6
24760: PUSH
24761: LD_INT 7
24763: PUSH
24764: LD_INT 8
24766: PUSH
24767: LD_INT 13
24769: PUSH
24770: LD_INT 12
24772: PUSH
24773: LD_INT 15
24775: PUSH
24776: LD_INT 11
24778: PUSH
24779: LD_INT 14
24781: PUSH
24782: LD_INT 10
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: IN
24796: IFFALSE 24806
// btype = b_lab ;
24798: LD_ADDR_VAR 0 1
24802: PUSH
24803: LD_INT 6
24805: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24806: LD_VAR 0 6
24810: PUSH
24811: LD_INT 0
24813: PUSH
24814: LD_INT 1
24816: PUSH
24817: LD_INT 2
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: LIST
24824: IN
24825: NOT
24826: IFTRUE 24894
24828: PUSH
24829: LD_VAR 0 1
24833: PUSH
24834: LD_INT 0
24836: PUSH
24837: LD_INT 1
24839: PUSH
24840: LD_INT 2
24842: PUSH
24843: LD_INT 3
24845: PUSH
24846: LD_INT 6
24848: PUSH
24849: LD_INT 36
24851: PUSH
24852: LD_INT 4
24854: PUSH
24855: LD_INT 5
24857: PUSH
24858: LD_INT 31
24860: PUSH
24861: LD_INT 32
24863: PUSH
24864: LD_INT 33
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: IN
24880: NOT
24881: IFFALSE 24893
24883: PUSH
24884: LD_VAR 0 6
24888: PUSH
24889: LD_INT 1
24891: EQUAL
24892: AND
24893: OR
24894: IFTRUE 24926
24896: PUSH
24897: LD_VAR 0 1
24901: PUSH
24902: LD_INT 2
24904: PUSH
24905: LD_INT 3
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: IN
24912: NOT
24913: IFFALSE 24925
24915: PUSH
24916: LD_VAR 0 6
24920: PUSH
24921: LD_INT 2
24923: EQUAL
24924: AND
24925: OR
24926: IFFALSE 24936
// mode = 0 ;
24928: LD_ADDR_VAR 0 6
24932: PUSH
24933: LD_INT 0
24935: ST_TO_ADDR
// case mode of 0 :
24936: LD_VAR 0 6
24940: PUSH
24941: LD_INT 0
24943: DOUBLE
24944: EQUAL
24945: IFTRUE 24949
24947: GO 36402
24949: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24950: LD_ADDR_VAR 0 11
24954: PUSH
24955: LD_INT 0
24957: PUSH
24958: LD_INT 0
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 0
24967: PUSH
24968: LD_INT 1
24970: NEG
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: LD_INT 0
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 1
24988: PUSH
24989: LD_INT 1
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 0
24998: PUSH
24999: LD_INT 1
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 1
25008: NEG
25009: PUSH
25010: LD_INT 0
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: LD_INT 2
25035: NEG
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 0
25043: PUSH
25044: LD_INT 2
25046: NEG
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 1
25054: PUSH
25055: LD_INT 1
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: LD_INT 2
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: LD_INT 2
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 1
25085: NEG
25086: PUSH
25087: LD_INT 1
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 1
25096: PUSH
25097: LD_INT 3
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 0
25106: PUSH
25107: LD_INT 3
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 1
25116: NEG
25117: PUSH
25118: LD_INT 2
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25143: LD_ADDR_VAR 0 12
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: LD_INT 0
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 0
25160: PUSH
25161: LD_INT 1
25163: NEG
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 1
25171: PUSH
25172: LD_INT 0
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 1
25201: NEG
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: NEG
25213: PUSH
25214: LD_INT 1
25216: NEG
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 1
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 2
25235: PUSH
25236: LD_INT 0
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 2
25245: PUSH
25246: LD_INT 1
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 1
25255: NEG
25256: PUSH
25257: LD_INT 1
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 2
25266: NEG
25267: PUSH
25268: LD_INT 0
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 2
25277: NEG
25278: PUSH
25279: LD_INT 1
25281: NEG
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 2
25289: NEG
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 3
25300: NEG
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 3
25311: NEG
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25339: LD_ADDR_VAR 0 13
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: LD_INT 0
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: LD_INT 1
25359: NEG
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: LD_INT 0
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: LD_INT 1
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: LD_INT 1
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 1
25397: NEG
25398: PUSH
25399: LD_INT 0
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 1
25408: NEG
25409: PUSH
25410: LD_INT 1
25412: NEG
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 1
25420: NEG
25421: PUSH
25422: LD_INT 2
25424: NEG
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 2
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 2
25442: PUSH
25443: LD_INT 2
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: PUSH
25453: LD_INT 2
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 2
25462: NEG
25463: PUSH
25464: LD_INT 1
25466: NEG
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 2
25474: NEG
25475: PUSH
25476: LD_INT 2
25478: NEG
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 2
25486: NEG
25487: PUSH
25488: LD_INT 3
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 3
25498: NEG
25499: PUSH
25500: LD_INT 2
25502: NEG
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 3
25510: NEG
25511: PUSH
25512: LD_INT 3
25514: NEG
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25538: LD_ADDR_VAR 0 14
25542: PUSH
25543: LD_INT 0
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 0
25555: PUSH
25556: LD_INT 1
25558: NEG
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 1
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 1
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 1
25596: NEG
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 1
25607: NEG
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 1
25619: NEG
25620: PUSH
25621: LD_INT 2
25623: NEG
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: LD_INT 2
25634: NEG
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: LD_INT 1
25645: NEG
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 1
25653: PUSH
25654: LD_INT 2
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 0
25663: PUSH
25664: LD_INT 2
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 1
25673: NEG
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 1
25684: NEG
25685: PUSH
25686: LD_INT 3
25688: NEG
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 0
25696: PUSH
25697: LD_INT 3
25699: NEG
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: LD_INT 2
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25734: LD_ADDR_VAR 0 15
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: LD_INT 0
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 1
25792: NEG
25793: PUSH
25794: LD_INT 0
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 1
25803: NEG
25804: PUSH
25805: LD_INT 1
25807: NEG
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: LD_INT 1
25818: NEG
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 2
25826: PUSH
25827: LD_INT 0
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 2
25836: PUSH
25837: LD_INT 1
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 1
25846: NEG
25847: PUSH
25848: LD_INT 1
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 2
25857: NEG
25858: PUSH
25859: LD_INT 0
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 2
25868: NEG
25869: PUSH
25870: LD_INT 1
25872: NEG
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 2
25880: PUSH
25881: LD_INT 1
25883: NEG
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 3
25891: PUSH
25892: LD_INT 0
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 3
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25927: LD_ADDR_VAR 0 16
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: LD_INT 0
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: LD_INT 1
25947: NEG
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 1
25955: PUSH
25956: LD_INT 0
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 1
25965: PUSH
25966: LD_INT 1
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: LD_INT 1
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 1
25985: NEG
25986: PUSH
25987: LD_INT 0
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 1
25996: NEG
25997: PUSH
25998: LD_INT 1
26000: NEG
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 1
26008: NEG
26009: PUSH
26010: LD_INT 2
26012: NEG
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 2
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 2
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 1
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 2
26050: NEG
26051: PUSH
26052: LD_INT 1
26054: NEG
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 2
26062: NEG
26063: PUSH
26064: LD_INT 2
26066: NEG
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 3
26074: PUSH
26075: LD_INT 2
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 3
26084: PUSH
26085: LD_INT 3
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 2
26094: PUSH
26095: LD_INT 3
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26120: LD_ADDR_VAR 0 17
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 0
26137: PUSH
26138: LD_INT 1
26140: NEG
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: LD_INT 0
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 1
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: NEG
26179: PUSH
26180: LD_INT 0
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 1
26189: NEG
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 1
26201: NEG
26202: PUSH
26203: LD_INT 2
26205: NEG
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: LD_INT 2
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: LD_INT 1
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: LD_INT 0
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 2
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 2
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 1
26265: PUSH
26266: LD_INT 2
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 0
26275: PUSH
26276: LD_INT 2
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 1
26285: NEG
26286: PUSH
26287: LD_INT 1
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 2
26296: NEG
26297: PUSH
26298: LD_INT 0
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 2
26307: NEG
26308: PUSH
26309: LD_INT 1
26311: NEG
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 2
26319: NEG
26320: PUSH
26321: LD_INT 2
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26350: LD_ADDR_VAR 0 18
26354: PUSH
26355: LD_INT 0
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: LD_INT 1
26370: NEG
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 1
26408: NEG
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: NEG
26420: PUSH
26421: LD_INT 1
26423: NEG
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: LD_INT 2
26435: NEG
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: LD_INT 2
26446: NEG
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 1
26454: PUSH
26455: LD_INT 1
26457: NEG
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 2
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: LD_INT 1
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 2
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: LD_INT 2
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: LD_INT 2
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 2
26526: NEG
26527: PUSH
26528: LD_INT 0
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: NEG
26538: PUSH
26539: LD_INT 1
26541: NEG
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 2
26549: NEG
26550: PUSH
26551: LD_INT 2
26553: NEG
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26580: LD_ADDR_VAR 0 19
26584: PUSH
26585: LD_INT 0
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: LD_INT 1
26600: NEG
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 1
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 1
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: LD_INT 1
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 1
26649: NEG
26650: PUSH
26651: LD_INT 1
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 1
26661: NEG
26662: PUSH
26663: LD_INT 2
26665: NEG
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 0
26673: PUSH
26674: LD_INT 2
26676: NEG
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 2
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: LD_INT 1
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 2
26715: PUSH
26716: LD_INT 2
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 1
26725: PUSH
26726: LD_INT 2
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: LD_INT 2
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: LD_INT 1
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 2
26756: NEG
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 2
26767: NEG
26768: PUSH
26769: LD_INT 1
26771: NEG
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 2
26779: NEG
26780: PUSH
26781: LD_INT 2
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26810: LD_ADDR_VAR 0 20
26814: PUSH
26815: LD_INT 0
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: LD_INT 1
26830: NEG
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: LD_INT 1
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: LD_INT 1
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: LD_INT 0
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 1
26879: NEG
26880: PUSH
26881: LD_INT 1
26883: NEG
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 1
26891: NEG
26892: PUSH
26893: LD_INT 2
26895: NEG
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: LD_INT 2
26906: NEG
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: LD_INT 1
26917: NEG
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 2
26925: PUSH
26926: LD_INT 0
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 2
26935: PUSH
26936: LD_INT 1
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 2
26945: PUSH
26946: LD_INT 2
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: LD_INT 2
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: LD_INT 2
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: NEG
26976: PUSH
26977: LD_INT 1
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 2
26986: NEG
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 2
26997: NEG
26998: PUSH
26999: LD_INT 1
27001: NEG
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 2
27009: NEG
27010: PUSH
27011: LD_INT 2
27013: NEG
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27040: LD_ADDR_VAR 0 21
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: LD_INT 1
27060: NEG
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 1
27068: PUSH
27069: LD_INT 0
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: LD_INT 1
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: LD_INT 1
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: NEG
27099: PUSH
27100: LD_INT 0
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: NEG
27110: PUSH
27111: LD_INT 1
27113: NEG
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 1
27121: NEG
27122: PUSH
27123: LD_INT 2
27125: NEG
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 0
27133: PUSH
27134: LD_INT 2
27136: NEG
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 1
27144: PUSH
27145: LD_INT 1
27147: NEG
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 2
27155: PUSH
27156: LD_INT 0
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 2
27165: PUSH
27166: LD_INT 1
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 2
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 1
27185: PUSH
27186: LD_INT 2
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 0
27195: PUSH
27196: LD_INT 2
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 1
27205: NEG
27206: PUSH
27207: LD_INT 1
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 2
27216: NEG
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 2
27227: NEG
27228: PUSH
27229: LD_INT 1
27231: NEG
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 2
27239: NEG
27240: PUSH
27241: LD_INT 2
27243: NEG
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27270: LD_ADDR_VAR 0 22
27274: PUSH
27275: LD_INT 0
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: LD_INT 1
27290: NEG
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: LD_INT 0
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 0
27318: PUSH
27319: LD_INT 1
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: LD_INT 0
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 1
27339: NEG
27340: PUSH
27341: LD_INT 1
27343: NEG
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 1
27351: NEG
27352: PUSH
27353: LD_INT 2
27355: NEG
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 0
27363: PUSH
27364: LD_INT 2
27366: NEG
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 1
27374: PUSH
27375: LD_INT 1
27377: NEG
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 2
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 2
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 2
27405: PUSH
27406: LD_INT 2
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: PUSH
27416: LD_INT 2
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: LD_INT 2
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 1
27435: NEG
27436: PUSH
27437: LD_INT 1
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 2
27446: NEG
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 2
27457: NEG
27458: PUSH
27459: LD_INT 1
27461: NEG
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 2
27469: NEG
27470: PUSH
27471: LD_INT 2
27473: NEG
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27500: LD_ADDR_VAR 0 23
27504: PUSH
27505: LD_INT 0
27507: PUSH
27508: LD_INT 0
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 0
27517: PUSH
27518: LD_INT 1
27520: NEG
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 1
27528: PUSH
27529: LD_INT 0
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 1
27538: PUSH
27539: LD_INT 1
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 0
27548: PUSH
27549: LD_INT 1
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 1
27558: NEG
27559: PUSH
27560: LD_INT 0
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 1
27569: NEG
27570: PUSH
27571: LD_INT 1
27573: NEG
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: NEG
27582: PUSH
27583: LD_INT 2
27585: NEG
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 0
27593: PUSH
27594: LD_INT 2
27596: NEG
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 1
27604: PUSH
27605: LD_INT 1
27607: NEG
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: LD_INT 0
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 2
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 2
27635: PUSH
27636: LD_INT 2
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: LD_INT 2
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: LD_INT 2
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 1
27665: NEG
27666: PUSH
27667: LD_INT 1
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 2
27676: NEG
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 2
27687: NEG
27688: PUSH
27689: LD_INT 1
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 2
27699: NEG
27700: PUSH
27701: LD_INT 2
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 2
27711: NEG
27712: PUSH
27713: LD_INT 3
27715: NEG
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: LD_INT 3
27727: NEG
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 1
27735: PUSH
27736: LD_INT 2
27738: NEG
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 2
27746: PUSH
27747: LD_INT 1
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27780: LD_ADDR_VAR 0 24
27784: PUSH
27785: LD_INT 0
27787: PUSH
27788: LD_INT 0
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 0
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 1
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 1
27818: PUSH
27819: LD_INT 1
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 0
27828: PUSH
27829: LD_INT 1
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 1
27838: NEG
27839: PUSH
27840: LD_INT 0
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 1
27849: NEG
27850: PUSH
27851: LD_INT 1
27853: NEG
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: LD_INT 2
27865: NEG
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 0
27873: PUSH
27874: LD_INT 2
27876: NEG
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 1
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 2
27895: PUSH
27896: LD_INT 0
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 2
27905: PUSH
27906: LD_INT 1
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 2
27915: PUSH
27916: LD_INT 2
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 1
27925: PUSH
27926: LD_INT 2
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: LD_INT 2
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 1
27945: NEG
27946: PUSH
27947: LD_INT 1
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 2
27956: NEG
27957: PUSH
27958: LD_INT 0
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 2
27967: NEG
27968: PUSH
27969: LD_INT 1
27971: NEG
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 2
27979: NEG
27980: PUSH
27981: LD_INT 2
27983: NEG
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 1
27991: PUSH
27992: LD_INT 2
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 2
28002: PUSH
28003: LD_INT 1
28005: NEG
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 3
28013: PUSH
28014: LD_INT 1
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 3
28023: PUSH
28024: LD_INT 2
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28056: LD_ADDR_VAR 0 25
28060: PUSH
28061: LD_INT 0
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 0
28073: PUSH
28074: LD_INT 1
28076: NEG
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 1
28084: PUSH
28085: LD_INT 0
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 1
28094: PUSH
28095: LD_INT 1
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 0
28104: PUSH
28105: LD_INT 1
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 1
28114: NEG
28115: PUSH
28116: LD_INT 0
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: LD_INT 1
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 1
28137: NEG
28138: PUSH
28139: LD_INT 2
28141: NEG
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 0
28149: PUSH
28150: LD_INT 2
28152: NEG
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: LD_INT 1
28163: NEG
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 2
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 2
28181: PUSH
28182: LD_INT 1
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 2
28191: PUSH
28192: LD_INT 2
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: LD_INT 2
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: LD_INT 2
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 1
28221: NEG
28222: PUSH
28223: LD_INT 1
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 2
28232: NEG
28233: PUSH
28234: LD_INT 0
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 2
28243: NEG
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 2
28255: NEG
28256: PUSH
28257: LD_INT 2
28259: NEG
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 3
28267: PUSH
28268: LD_INT 1
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 3
28277: PUSH
28278: LD_INT 2
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 2
28287: PUSH
28288: LD_INT 3
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 1
28297: PUSH
28298: LD_INT 3
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28330: LD_ADDR_VAR 0 26
28334: PUSH
28335: LD_INT 0
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: LD_INT 1
28350: NEG
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 1
28358: PUSH
28359: LD_INT 0
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 1
28368: PUSH
28369: LD_INT 1
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 0
28378: PUSH
28379: LD_INT 1
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 1
28388: NEG
28389: PUSH
28390: LD_INT 0
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 1
28399: NEG
28400: PUSH
28401: LD_INT 1
28403: NEG
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 1
28411: NEG
28412: PUSH
28413: LD_INT 2
28415: NEG
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 0
28423: PUSH
28424: LD_INT 2
28426: NEG
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 1
28434: PUSH
28435: LD_INT 1
28437: NEG
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: LD_INT 0
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 2
28455: PUSH
28456: LD_INT 1
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 2
28465: PUSH
28466: LD_INT 2
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 1
28475: PUSH
28476: LD_INT 2
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: LD_INT 2
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 1
28495: NEG
28496: PUSH
28497: LD_INT 1
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 2
28506: NEG
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 2
28517: NEG
28518: PUSH
28519: LD_INT 1
28521: NEG
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 2
28529: NEG
28530: PUSH
28531: LD_INT 2
28533: NEG
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 2
28541: PUSH
28542: LD_INT 3
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: LD_INT 3
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 1
28561: NEG
28562: PUSH
28563: LD_INT 2
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 2
28572: NEG
28573: PUSH
28574: LD_INT 1
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28606: LD_ADDR_VAR 0 27
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: LD_INT 0
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: LD_INT 1
28626: NEG
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: LD_INT 1
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: LD_INT 1
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: NEG
28665: PUSH
28666: LD_INT 0
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 1
28675: NEG
28676: PUSH
28677: LD_INT 1
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: LD_INT 2
28691: NEG
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 0
28699: PUSH
28700: LD_INT 2
28702: NEG
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 1
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 2
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 2
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 2
28741: PUSH
28742: LD_INT 2
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 1
28751: PUSH
28752: LD_INT 2
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 0
28761: PUSH
28762: LD_INT 2
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 1
28771: NEG
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 2
28782: NEG
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 2
28793: NEG
28794: PUSH
28795: LD_INT 1
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 2
28805: NEG
28806: PUSH
28807: LD_INT 2
28809: NEG
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 1
28817: NEG
28818: PUSH
28819: LD_INT 2
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 2
28828: NEG
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 3
28839: NEG
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 3
28851: NEG
28852: PUSH
28853: LD_INT 2
28855: NEG
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28886: LD_ADDR_VAR 0 28
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: LD_INT 1
28906: NEG
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 1
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: PUSH
28925: LD_INT 1
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 1
28944: NEG
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: LD_INT 1
28959: NEG
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 1
28967: NEG
28968: PUSH
28969: LD_INT 2
28971: NEG
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 1
28990: PUSH
28991: LD_INT 1
28993: NEG
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: LD_INT 0
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 2
29011: PUSH
29012: LD_INT 1
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 2
29021: PUSH
29022: LD_INT 2
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 1
29031: PUSH
29032: LD_INT 2
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 0
29041: PUSH
29042: LD_INT 2
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 1
29051: NEG
29052: PUSH
29053: LD_INT 1
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 2
29062: NEG
29063: PUSH
29064: LD_INT 0
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 2
29073: NEG
29074: PUSH
29075: LD_INT 1
29077: NEG
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 2
29085: NEG
29086: PUSH
29087: LD_INT 2
29089: NEG
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 2
29097: NEG
29098: PUSH
29099: LD_INT 3
29101: NEG
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 1
29109: NEG
29110: PUSH
29111: LD_INT 3
29113: NEG
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 3
29121: NEG
29122: PUSH
29123: LD_INT 1
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 3
29133: NEG
29134: PUSH
29135: LD_INT 2
29137: NEG
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29168: LD_ADDR_VAR 0 29
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 0
29185: PUSH
29186: LD_INT 1
29188: NEG
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 1
29196: PUSH
29197: LD_INT 0
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 0
29216: PUSH
29217: LD_INT 1
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 1
29226: NEG
29227: PUSH
29228: LD_INT 0
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: LD_INT 1
29241: NEG
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 1
29249: NEG
29250: PUSH
29251: LD_INT 2
29253: NEG
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 0
29261: PUSH
29262: LD_INT 2
29264: NEG
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: LD_INT 1
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 2
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 2
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 1
29303: PUSH
29304: LD_INT 2
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: LD_INT 2
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 1
29323: NEG
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 2
29334: NEG
29335: PUSH
29336: LD_INT 1
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 2
29346: NEG
29347: PUSH
29348: LD_INT 2
29350: NEG
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 2
29358: NEG
29359: PUSH
29360: LD_INT 3
29362: NEG
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 2
29370: PUSH
29371: LD_INT 1
29373: NEG
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 3
29381: PUSH
29382: LD_INT 1
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 1
29391: PUSH
29392: LD_INT 3
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 3
29412: NEG
29413: PUSH
29414: LD_INT 2
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29447: LD_ADDR_VAR 0 30
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: LD_INT 0
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 0
29464: PUSH
29465: LD_INT 1
29467: NEG
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: LD_INT 0
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: LD_INT 1
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 0
29495: PUSH
29496: LD_INT 1
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 1
29505: NEG
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: NEG
29517: PUSH
29518: LD_INT 1
29520: NEG
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 1
29528: NEG
29529: PUSH
29530: LD_INT 2
29532: NEG
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 0
29540: PUSH
29541: LD_INT 2
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 1
29551: PUSH
29552: LD_INT 1
29554: NEG
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 2
29562: PUSH
29563: LD_INT 0
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 2
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 2
29582: PUSH
29583: LD_INT 2
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 1
29592: PUSH
29593: LD_INT 2
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 1
29602: NEG
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 2
29613: NEG
29614: PUSH
29615: LD_INT 0
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 2
29624: NEG
29625: PUSH
29626: LD_INT 1
29628: NEG
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 1
29636: NEG
29637: PUSH
29638: LD_INT 3
29640: NEG
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 1
29648: PUSH
29649: LD_INT 2
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 3
29659: PUSH
29660: LD_INT 2
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 2
29669: PUSH
29670: LD_INT 3
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 2
29679: NEG
29680: PUSH
29681: LD_INT 1
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 3
29690: NEG
29691: PUSH
29692: LD_INT 1
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29725: LD_ADDR_VAR 0 31
29729: PUSH
29730: LD_INT 0
29732: PUSH
29733: LD_INT 0
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 0
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 1
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 1
29763: PUSH
29764: LD_INT 1
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 0
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 1
29783: NEG
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: NEG
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 1
29806: NEG
29807: PUSH
29808: LD_INT 2
29810: NEG
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 1
29818: PUSH
29819: LD_INT 1
29821: NEG
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: LD_INT 0
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: LD_INT 1
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 2
29849: PUSH
29850: LD_INT 2
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 1
29859: PUSH
29860: LD_INT 2
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 0
29869: PUSH
29870: LD_INT 2
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 1
29879: NEG
29880: PUSH
29881: LD_INT 1
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 2
29890: NEG
29891: PUSH
29892: LD_INT 1
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 2
29902: NEG
29903: PUSH
29904: LD_INT 2
29906: NEG
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 2
29914: NEG
29915: PUSH
29916: LD_INT 3
29918: NEG
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 2
29926: PUSH
29927: LD_INT 1
29929: NEG
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 3
29937: PUSH
29938: LD_INT 1
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: LD_INT 3
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 1
29957: NEG
29958: PUSH
29959: LD_INT 2
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 3
29968: NEG
29969: PUSH
29970: LD_INT 2
29972: NEG
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30003: LD_ADDR_VAR 0 32
30007: PUSH
30008: LD_INT 0
30010: PUSH
30011: LD_INT 0
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 0
30020: PUSH
30021: LD_INT 1
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: LD_INT 0
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 1
30041: PUSH
30042: LD_INT 1
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: LD_INT 1
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 1
30061: NEG
30062: PUSH
30063: LD_INT 0
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: NEG
30073: PUSH
30074: LD_INT 1
30076: NEG
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 1
30084: NEG
30085: PUSH
30086: LD_INT 2
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 0
30096: PUSH
30097: LD_INT 2
30099: NEG
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: LD_INT 1
30110: NEG
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 2
30118: PUSH
30119: LD_INT 1
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 2
30128: PUSH
30129: LD_INT 2
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 1
30138: PUSH
30139: LD_INT 2
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: LD_INT 2
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 1
30158: NEG
30159: PUSH
30160: LD_INT 1
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 2
30169: NEG
30170: PUSH
30171: LD_INT 0
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 2
30180: NEG
30181: PUSH
30182: LD_INT 1
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 1
30192: NEG
30193: PUSH
30194: LD_INT 3
30196: NEG
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 1
30204: PUSH
30205: LD_INT 2
30207: NEG
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 3
30215: PUSH
30216: LD_INT 2
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 2
30225: PUSH
30226: LD_INT 3
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 2
30235: NEG
30236: PUSH
30237: LD_INT 1
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 3
30246: NEG
30247: PUSH
30248: LD_INT 1
30250: NEG
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30281: LD_ADDR_VAR 0 33
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 0
30298: PUSH
30299: LD_INT 1
30301: NEG
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 1
30309: PUSH
30310: LD_INT 0
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 1
30319: PUSH
30320: LD_INT 1
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 0
30329: PUSH
30330: LD_INT 1
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 1
30339: NEG
30340: PUSH
30341: LD_INT 0
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 1
30350: NEG
30351: PUSH
30352: LD_INT 1
30354: NEG
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 1
30362: NEG
30363: PUSH
30364: LD_INT 2
30366: NEG
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: LD_INT 1
30377: NEG
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 2
30385: PUSH
30386: LD_INT 0
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 2
30395: PUSH
30396: LD_INT 1
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: LD_INT 2
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 0
30415: PUSH
30416: LD_INT 2
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: LD_INT 1
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 2
30436: NEG
30437: PUSH
30438: LD_INT 0
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 2
30447: NEG
30448: PUSH
30449: LD_INT 1
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 2
30459: NEG
30460: PUSH
30461: LD_INT 2
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 2
30471: NEG
30472: PUSH
30473: LD_INT 3
30475: NEG
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 2
30483: PUSH
30484: LD_INT 1
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 3
30494: PUSH
30495: LD_INT 1
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 1
30504: PUSH
30505: LD_INT 3
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 1
30514: NEG
30515: PUSH
30516: LD_INT 2
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 3
30525: NEG
30526: PUSH
30527: LD_INT 2
30529: NEG
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30560: LD_ADDR_VAR 0 34
30564: PUSH
30565: LD_INT 0
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: LD_INT 1
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 1
30588: PUSH
30589: LD_INT 0
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: LD_INT 1
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: LD_INT 1
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 1
30618: NEG
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 1
30629: NEG
30630: PUSH
30631: LD_INT 1
30633: NEG
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 1
30641: NEG
30642: PUSH
30643: LD_INT 2
30645: NEG
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: LD_INT 2
30656: NEG
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: LD_INT 1
30667: NEG
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 2
30675: PUSH
30676: LD_INT 1
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 2
30685: PUSH
30686: LD_INT 2
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 1
30695: PUSH
30696: LD_INT 2
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 1
30705: NEG
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 2
30716: NEG
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 2
30727: NEG
30728: PUSH
30729: LD_INT 1
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 2
30739: NEG
30740: PUSH
30741: LD_INT 2
30743: NEG
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 1
30751: NEG
30752: PUSH
30753: LD_INT 3
30755: NEG
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 1
30763: PUSH
30764: LD_INT 2
30766: NEG
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 3
30774: PUSH
30775: LD_INT 2
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 2
30784: PUSH
30785: LD_INT 3
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 2
30794: NEG
30795: PUSH
30796: LD_INT 1
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 3
30805: NEG
30806: PUSH
30807: LD_INT 1
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30840: LD_ADDR_VAR 0 35
30844: PUSH
30845: LD_INT 0
30847: PUSH
30848: LD_INT 0
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 0
30857: PUSH
30858: LD_INT 1
30860: NEG
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 1
30868: PUSH
30869: LD_INT 0
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 1
30878: PUSH
30879: LD_INT 1
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 0
30888: PUSH
30889: LD_INT 1
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 1
30898: NEG
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 1
30909: NEG
30910: PUSH
30911: LD_INT 1
30913: NEG
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 2
30921: PUSH
30922: LD_INT 1
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 2
30931: NEG
30932: PUSH
30933: LD_INT 1
30935: NEG
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30952: LD_ADDR_VAR 0 36
30956: PUSH
30957: LD_INT 0
30959: PUSH
30960: LD_INT 0
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 0
30969: PUSH
30970: LD_INT 1
30972: NEG
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: LD_INT 1
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: LD_INT 1
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: NEG
31011: PUSH
31012: LD_INT 0
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 1
31021: NEG
31022: PUSH
31023: LD_INT 1
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: LD_INT 2
31037: NEG
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: LD_INT 2
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31064: LD_ADDR_VAR 0 37
31068: PUSH
31069: LD_INT 0
31071: PUSH
31072: LD_INT 0
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 0
31081: PUSH
31082: LD_INT 1
31084: NEG
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 1
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 0
31112: PUSH
31113: LD_INT 1
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 1
31122: NEG
31123: PUSH
31124: LD_INT 0
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 1
31133: NEG
31134: PUSH
31135: LD_INT 1
31137: NEG
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 1
31145: PUSH
31146: LD_INT 1
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 1
31156: NEG
31157: PUSH
31158: LD_INT 1
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31176: LD_ADDR_VAR 0 38
31180: PUSH
31181: LD_INT 0
31183: PUSH
31184: LD_INT 0
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: LD_INT 1
31196: NEG
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 1
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 1
31214: PUSH
31215: LD_INT 1
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 0
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 1
31234: NEG
31235: PUSH
31236: LD_INT 0
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 1
31245: NEG
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 2
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 2
31267: NEG
31268: PUSH
31269: LD_INT 1
31271: NEG
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31288: LD_ADDR_VAR 0 39
31292: PUSH
31293: LD_INT 0
31295: PUSH
31296: LD_INT 0
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 0
31305: PUSH
31306: LD_INT 1
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: LD_INT 0
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 1
31326: PUSH
31327: LD_INT 1
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 0
31336: PUSH
31337: LD_INT 1
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 1
31346: NEG
31347: PUSH
31348: LD_INT 0
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PUSH
31359: LD_INT 1
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 1
31369: NEG
31370: PUSH
31371: LD_INT 2
31373: NEG
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 1
31381: PUSH
31382: LD_INT 2
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31400: LD_ADDR_VAR 0 40
31404: PUSH
31405: LD_INT 0
31407: PUSH
31408: LD_INT 0
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 0
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: LD_INT 0
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: LD_INT 1
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 0
31448: PUSH
31449: LD_INT 1
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: LD_INT 0
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: LD_INT 1
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 1
31481: PUSH
31482: LD_INT 1
31484: NEG
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 1
31492: NEG
31493: PUSH
31494: LD_INT 1
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31512: LD_ADDR_VAR 0 41
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: LD_INT 0
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 0
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: LD_INT 0
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 0
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: PUSH
31572: LD_INT 0
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 1
31581: NEG
31582: PUSH
31583: LD_INT 1
31585: NEG
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 1
31593: NEG
31594: PUSH
31595: LD_INT 2
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 1
31605: PUSH
31606: LD_INT 1
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 2
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 2
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 2
31636: PUSH
31637: LD_INT 2
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: LD_INT 2
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: NEG
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 2
31667: NEG
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 2
31678: NEG
31679: PUSH
31680: LD_INT 1
31682: NEG
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 2
31690: NEG
31691: PUSH
31692: LD_INT 2
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 2
31702: NEG
31703: PUSH
31704: LD_INT 3
31706: NEG
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 2
31714: PUSH
31715: LD_INT 1
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 3
31725: PUSH
31726: LD_INT 0
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 3
31735: PUSH
31736: LD_INT 1
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 3
31745: PUSH
31746: LD_INT 2
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 3
31755: PUSH
31756: LD_INT 3
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 2
31765: PUSH
31766: LD_INT 3
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 2
31775: NEG
31776: PUSH
31777: LD_INT 1
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 3
31786: NEG
31787: PUSH
31788: LD_INT 0
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 3
31797: NEG
31798: PUSH
31799: LD_INT 1
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 3
31809: NEG
31810: PUSH
31811: LD_INT 2
31813: NEG
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 3
31821: NEG
31822: PUSH
31823: LD_INT 3
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31862: LD_ADDR_VAR 0 42
31866: PUSH
31867: LD_INT 0
31869: PUSH
31870: LD_INT 0
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: LD_INT 1
31882: NEG
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: LD_INT 0
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: LD_INT 1
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 0
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 1
31920: NEG
31921: PUSH
31922: LD_INT 0
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 1
31931: NEG
31932: PUSH
31933: LD_INT 1
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 1
31943: NEG
31944: PUSH
31945: LD_INT 2
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: LD_INT 2
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: LD_INT 1
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 2
31977: PUSH
31978: LD_INT 1
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 2
31987: PUSH
31988: LD_INT 2
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: LD_INT 2
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 0
32007: PUSH
32008: LD_INT 2
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 1
32017: NEG
32018: PUSH
32019: LD_INT 1
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 2
32028: NEG
32029: PUSH
32030: LD_INT 1
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 2
32040: NEG
32041: PUSH
32042: LD_INT 2
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 2
32052: NEG
32053: PUSH
32054: LD_INT 3
32056: NEG
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 1
32064: NEG
32065: PUSH
32066: LD_INT 3
32068: NEG
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 0
32076: PUSH
32077: LD_INT 3
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 1
32087: PUSH
32088: LD_INT 2
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 3
32098: PUSH
32099: LD_INT 2
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 3
32108: PUSH
32109: LD_INT 3
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 2
32118: PUSH
32119: LD_INT 3
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 1
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 0
32138: PUSH
32139: LD_INT 3
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 1
32148: NEG
32149: PUSH
32150: LD_INT 2
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 3
32159: NEG
32160: PUSH
32161: LD_INT 2
32163: NEG
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 3
32171: NEG
32172: PUSH
32173: LD_INT 3
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32212: LD_ADDR_VAR 0 43
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: LD_INT 0
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 0
32229: PUSH
32230: LD_INT 1
32232: NEG
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 1
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 1
32250: PUSH
32251: LD_INT 1
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 0
32260: PUSH
32261: LD_INT 1
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 1
32270: NEG
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 1
32281: NEG
32282: PUSH
32283: LD_INT 1
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 1
32293: NEG
32294: PUSH
32295: LD_INT 2
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 0
32305: PUSH
32306: LD_INT 2
32308: NEG
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: LD_INT 0
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 2
32337: PUSH
32338: LD_INT 1
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: LD_INT 2
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 0
32357: PUSH
32358: LD_INT 2
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 1
32367: NEG
32368: PUSH
32369: LD_INT 1
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 2
32378: NEG
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 2
32389: NEG
32390: PUSH
32391: LD_INT 1
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: LD_INT 3
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 0
32413: PUSH
32414: LD_INT 3
32416: NEG
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 1
32424: PUSH
32425: LD_INT 2
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 2
32435: PUSH
32436: LD_INT 1
32438: NEG
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 3
32446: PUSH
32447: LD_INT 0
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 3
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 1
32466: PUSH
32467: LD_INT 3
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 0
32476: PUSH
32477: LD_INT 3
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PUSH
32488: LD_INT 2
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 3
32508: NEG
32509: PUSH
32510: LD_INT 0
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 3
32519: NEG
32520: PUSH
32521: LD_INT 1
32523: NEG
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32560: LD_ADDR_VAR 0 44
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: LD_INT 0
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: LD_INT 1
32580: NEG
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 1
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 1
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 0
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 1
32618: NEG
32619: PUSH
32620: LD_INT 0
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 1
32629: NEG
32630: PUSH
32631: LD_INT 1
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 1
32641: NEG
32642: PUSH
32643: LD_INT 2
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 1
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 2
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: LD_INT 1
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 2
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: NEG
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: NEG
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 2
32726: NEG
32727: PUSH
32728: LD_INT 1
32730: NEG
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 2
32738: NEG
32739: PUSH
32740: LD_INT 2
32742: NEG
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 2
32750: NEG
32751: PUSH
32752: LD_INT 3
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 2
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 3
32773: PUSH
32774: LD_INT 0
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 3
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 3
32793: PUSH
32794: LD_INT 2
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 3
32803: PUSH
32804: LD_INT 3
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: LD_INT 3
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 2
32823: NEG
32824: PUSH
32825: LD_INT 1
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 3
32834: NEG
32835: PUSH
32836: LD_INT 0
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 3
32845: NEG
32846: PUSH
32847: LD_INT 1
32849: NEG
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 3
32857: NEG
32858: PUSH
32859: LD_INT 2
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 3
32869: NEG
32870: PUSH
32871: LD_INT 3
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32910: LD_ADDR_VAR 0 45
32914: PUSH
32915: LD_INT 0
32917: PUSH
32918: LD_INT 0
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: LD_INT 1
32930: NEG
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 1
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 1
32948: PUSH
32949: LD_INT 1
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 0
32958: PUSH
32959: LD_INT 1
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 1
32968: NEG
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 1
32979: NEG
32980: PUSH
32981: LD_INT 1
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: LD_INT 2
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: LD_INT 2
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: LD_INT 1
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 2
33025: PUSH
33026: LD_INT 1
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 2
33035: PUSH
33036: LD_INT 2
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 1
33045: PUSH
33046: LD_INT 2
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: LD_INT 2
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 1
33065: NEG
33066: PUSH
33067: LD_INT 1
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 2
33076: NEG
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 2
33088: NEG
33089: PUSH
33090: LD_INT 2
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 2
33100: NEG
33101: PUSH
33102: LD_INT 3
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 1
33112: NEG
33113: PUSH
33114: LD_INT 3
33116: NEG
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 0
33124: PUSH
33125: LD_INT 3
33127: NEG
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: LD_INT 2
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 3
33146: PUSH
33147: LD_INT 2
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 3
33156: PUSH
33157: LD_INT 3
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 2
33166: PUSH
33167: LD_INT 3
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: PUSH
33177: LD_INT 3
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: LD_INT 3
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 1
33196: NEG
33197: PUSH
33198: LD_INT 2
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 3
33207: NEG
33208: PUSH
33209: LD_INT 2
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 3
33219: NEG
33220: PUSH
33221: LD_INT 3
33223: NEG
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33260: LD_ADDR_VAR 0 46
33264: PUSH
33265: LD_INT 0
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 0
33277: PUSH
33278: LD_INT 1
33280: NEG
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 1
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 1
33298: PUSH
33299: LD_INT 1
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: LD_INT 1
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 1
33318: NEG
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 1
33329: NEG
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 1
33341: NEG
33342: PUSH
33343: LD_INT 2
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: LD_INT 2
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: LD_INT 1
33367: NEG
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 2
33375: PUSH
33376: LD_INT 0
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 2
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 1
33395: PUSH
33396: LD_INT 2
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 0
33405: PUSH
33406: LD_INT 2
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: PUSH
33417: LD_INT 1
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 2
33426: NEG
33427: PUSH
33428: LD_INT 0
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 2
33437: NEG
33438: PUSH
33439: LD_INT 1
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: NEG
33450: PUSH
33451: LD_INT 3
33453: NEG
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: LD_INT 3
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 1
33472: PUSH
33473: LD_INT 2
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: LD_INT 1
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 3
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 3
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 1
33514: PUSH
33515: LD_INT 3
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 3
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: LD_INT 2
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 2
33545: NEG
33546: PUSH
33547: LD_INT 1
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 3
33556: NEG
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 3
33567: NEG
33568: PUSH
33569: LD_INT 1
33571: NEG
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33608: LD_ADDR_VAR 0 47
33612: PUSH
33613: LD_INT 0
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: LD_INT 1
33628: NEG
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: PUSH
33637: LD_INT 0
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 0
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 1
33666: NEG
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: NEG
33678: PUSH
33679: LD_INT 1
33681: NEG
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 1
33689: NEG
33690: PUSH
33691: LD_INT 2
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 0
33701: PUSH
33702: LD_INT 2
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 1
33712: PUSH
33713: LD_INT 1
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 2
33723: NEG
33724: PUSH
33725: LD_INT 1
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 2
33735: NEG
33736: PUSH
33737: LD_INT 2
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33759: LD_ADDR_VAR 0 48
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 1
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: LD_INT 1
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 1
33817: NEG
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 1
33828: NEG
33829: PUSH
33830: LD_INT 1
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: LD_INT 2
33844: NEG
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 0
33852: PUSH
33853: LD_INT 2
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: LD_INT 1
33866: NEG
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 2
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 2
33884: PUSH
33885: LD_INT 1
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33906: LD_ADDR_VAR 0 49
33910: PUSH
33911: LD_INT 0
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: LD_INT 1
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: PUSH
33935: LD_INT 0
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 1
33964: NEG
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: NEG
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: LD_INT 1
33990: NEG
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 2
33998: PUSH
33999: LD_INT 0
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 2
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 2
34018: PUSH
34019: LD_INT 2
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 1
34028: PUSH
34029: LD_INT 2
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34050: LD_ADDR_VAR 0 50
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: LD_INT 0
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: LD_INT 1
34070: NEG
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 1
34088: PUSH
34089: LD_INT 1
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: LD_INT 1
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 1
34108: NEG
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: NEG
34120: PUSH
34121: LD_INT 1
34123: NEG
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 2
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: LD_INT 2
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 1
34151: PUSH
34152: LD_INT 2
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: LD_INT 2
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 1
34171: NEG
34172: PUSH
34173: LD_INT 1
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34194: LD_ADDR_VAR 0 51
34198: PUSH
34199: LD_INT 0
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 0
34211: PUSH
34212: LD_INT 1
34214: NEG
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: LD_INT 0
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 0
34242: PUSH
34243: LD_INT 1
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 1
34252: NEG
34253: PUSH
34254: LD_INT 0
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: LD_INT 1
34267: NEG
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 1
34275: PUSH
34276: LD_INT 2
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 0
34285: PUSH
34286: LD_INT 2
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 1
34295: NEG
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 2
34306: NEG
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 2
34317: NEG
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34341: LD_ADDR_VAR 0 52
34345: PUSH
34346: LD_INT 0
34348: PUSH
34349: LD_INT 0
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: LD_INT 1
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 1
34369: PUSH
34370: LD_INT 0
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 1
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 1
34399: NEG
34400: PUSH
34401: LD_INT 0
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: NEG
34411: PUSH
34412: LD_INT 1
34414: NEG
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 1
34422: NEG
34423: PUSH
34424: LD_INT 2
34426: NEG
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 1
34434: NEG
34435: PUSH
34436: LD_INT 1
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 2
34445: NEG
34446: PUSH
34447: LD_INT 0
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 2
34456: NEG
34457: PUSH
34458: LD_INT 1
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 2
34468: NEG
34469: PUSH
34470: LD_INT 2
34472: NEG
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34492: LD_ADDR_VAR 0 53
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: LD_INT 0
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 1
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 1
34561: NEG
34562: PUSH
34563: LD_INT 1
34565: NEG
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: NEG
34574: PUSH
34575: LD_INT 2
34577: NEG
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: LD_INT 2
34588: NEG
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 1
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 2
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 2
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: LD_INT 2
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 2
34668: NEG
34669: PUSH
34670: LD_INT 0
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 2
34679: NEG
34680: PUSH
34681: LD_INT 1
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 2
34691: NEG
34692: PUSH
34693: LD_INT 2
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34722: LD_ADDR_VAR 0 54
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 1
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: NEG
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: NEG
34792: PUSH
34793: LD_INT 1
34795: NEG
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: LD_INT 2
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 0
34815: PUSH
34816: LD_INT 2
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: LD_INT 1
34829: NEG
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 2
34837: PUSH
34838: LD_INT 0
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 2
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: LD_INT 2
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: LD_INT 2
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: LD_INT 1
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 2
34898: NEG
34899: PUSH
34900: LD_INT 0
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 2
34909: NEG
34910: PUSH
34911: LD_INT 1
34913: NEG
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 2
34921: NEG
34922: PUSH
34923: LD_INT 2
34925: NEG
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34952: LD_ADDR_VAR 0 55
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: LD_INT 0
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: LD_INT 1
34972: NEG
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: LD_INT 1
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: PUSH
35012: LD_INT 0
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 1
35021: NEG
35022: PUSH
35023: LD_INT 1
35025: NEG
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 1
35033: NEG
35034: PUSH
35035: LD_INT 2
35037: NEG
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 0
35045: PUSH
35046: LD_INT 2
35048: NEG
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: LD_INT 1
35059: NEG
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 2
35067: PUSH
35068: LD_INT 0
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 2
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 2
35087: PUSH
35088: LD_INT 2
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: LD_INT 2
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 1
35117: NEG
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 2
35128: NEG
35129: PUSH
35130: LD_INT 0
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 2
35139: NEG
35140: PUSH
35141: LD_INT 1
35143: NEG
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 2
35151: NEG
35152: PUSH
35153: LD_INT 2
35155: NEG
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35182: LD_ADDR_VAR 0 56
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: LD_INT 1
35202: NEG
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 1
35240: NEG
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: LD_INT 1
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 1
35263: NEG
35264: PUSH
35265: LD_INT 2
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 0
35275: PUSH
35276: LD_INT 2
35278: NEG
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 1
35286: PUSH
35287: LD_INT 1
35289: NEG
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 2
35297: PUSH
35298: LD_INT 0
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 2
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 2
35317: PUSH
35318: LD_INT 2
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 1
35327: PUSH
35328: LD_INT 2
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 0
35337: PUSH
35338: LD_INT 2
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 1
35347: NEG
35348: PUSH
35349: LD_INT 1
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 2
35358: NEG
35359: PUSH
35360: LD_INT 0
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 2
35369: NEG
35370: PUSH
35371: LD_INT 1
35373: NEG
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 2
35381: NEG
35382: PUSH
35383: LD_INT 2
35385: NEG
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35412: LD_ADDR_VAR 0 57
35416: PUSH
35417: LD_INT 0
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: LD_INT 1
35432: NEG
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 1
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: LD_INT 1
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: NEG
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: LD_INT 1
35485: NEG
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 1
35493: NEG
35494: PUSH
35495: LD_INT 2
35497: NEG
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 0
35505: PUSH
35506: LD_INT 2
35508: NEG
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 1
35516: PUSH
35517: LD_INT 1
35519: NEG
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 2
35527: PUSH
35528: LD_INT 0
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 2
35547: PUSH
35548: LD_INT 2
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 1
35557: PUSH
35558: LD_INT 2
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: LD_INT 2
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 1
35577: NEG
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 2
35588: NEG
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 2
35599: NEG
35600: PUSH
35601: LD_INT 1
35603: NEG
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 2
35611: NEG
35612: PUSH
35613: LD_INT 2
35615: NEG
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35642: LD_ADDR_VAR 0 58
35646: PUSH
35647: LD_INT 0
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 1
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: LD_INT 1
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 1
35711: NEG
35712: PUSH
35713: LD_INT 1
35715: NEG
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 1
35723: NEG
35724: PUSH
35725: LD_INT 2
35727: NEG
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 0
35735: PUSH
35736: LD_INT 2
35738: NEG
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: LD_INT 1
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: LD_INT 1
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 2
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: LD_INT 2
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 1
35807: NEG
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 2
35818: NEG
35819: PUSH
35820: LD_INT 0
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 2
35829: NEG
35830: PUSH
35831: LD_INT 1
35833: NEG
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 2
35841: NEG
35842: PUSH
35843: LD_INT 2
35845: NEG
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35872: LD_ADDR_VAR 0 59
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: LD_INT 0
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: LD_INT 1
35892: NEG
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: LD_INT 0
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 0
35920: PUSH
35921: LD_INT 1
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: LD_INT 0
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 1
35941: NEG
35942: PUSH
35943: LD_INT 1
35945: NEG
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35960: LD_ADDR_VAR 0 60
35964: PUSH
35965: LD_INT 0
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: LD_INT 1
35980: NEG
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 1
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: LD_INT 1
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 1
36018: NEG
36019: PUSH
36020: LD_INT 0
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: LD_INT 1
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36048: LD_ADDR_VAR 0 61
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: LD_INT 1
36068: NEG
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 1
36076: PUSH
36077: LD_INT 0
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 1
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 0
36096: PUSH
36097: LD_INT 1
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 1
36106: NEG
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: LD_INT 1
36121: NEG
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36136: LD_ADDR_VAR 0 62
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: LD_INT 1
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 1
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: NEG
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36224: LD_ADDR_VAR 0 63
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: LD_INT 0
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 0
36241: PUSH
36242: LD_INT 1
36244: NEG
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 1
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: LD_INT 1
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: NEG
36283: PUSH
36284: LD_INT 0
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 1
36293: NEG
36294: PUSH
36295: LD_INT 1
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36312: LD_ADDR_VAR 0 64
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: LD_INT 0
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: NEG
36371: PUSH
36372: LD_INT 0
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 1
36381: NEG
36382: PUSH
36383: LD_INT 1
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: ST_TO_ADDR
// end ; 1 :
36400: GO 42297
36402: LD_INT 1
36404: DOUBLE
36405: EQUAL
36406: IFTRUE 36410
36408: GO 39033
36410: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36411: LD_ADDR_VAR 0 11
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: LD_INT 3
36422: NEG
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 0
36430: PUSH
36431: LD_INT 3
36433: NEG
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 1
36441: PUSH
36442: LD_INT 2
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: LIST
36454: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36455: LD_ADDR_VAR 0 12
36459: PUSH
36460: LD_INT 2
36462: PUSH
36463: LD_INT 1
36465: NEG
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 3
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 3
36483: PUSH
36484: LD_INT 1
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: LIST
36495: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36496: LD_ADDR_VAR 0 13
36500: PUSH
36501: LD_INT 3
36503: PUSH
36504: LD_INT 2
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 3
36513: PUSH
36514: LD_INT 3
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 2
36523: PUSH
36524: LD_INT 3
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36536: LD_ADDR_VAR 0 14
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: LD_INT 3
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: LD_INT 3
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 1
36563: NEG
36564: PUSH
36565: LD_INT 2
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: LIST
36576: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36577: LD_ADDR_VAR 0 15
36581: PUSH
36582: LD_INT 2
36584: NEG
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 3
36595: NEG
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 3
36606: NEG
36607: PUSH
36608: LD_INT 1
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: LIST
36620: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36621: LD_ADDR_VAR 0 16
36625: PUSH
36626: LD_INT 2
36628: NEG
36629: PUSH
36630: LD_INT 3
36632: NEG
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 3
36640: NEG
36641: PUSH
36642: LD_INT 2
36644: NEG
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 3
36652: NEG
36653: PUSH
36654: LD_INT 3
36656: NEG
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: LIST
36666: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36667: LD_ADDR_VAR 0 17
36671: PUSH
36672: LD_INT 1
36674: NEG
36675: PUSH
36676: LD_INT 3
36678: NEG
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 0
36686: PUSH
36687: LD_INT 3
36689: NEG
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: LD_INT 2
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: LIST
36710: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36711: LD_ADDR_VAR 0 18
36715: PUSH
36716: LD_INT 2
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 3
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 3
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36752: LD_ADDR_VAR 0 19
36756: PUSH
36757: LD_INT 3
36759: PUSH
36760: LD_INT 2
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 3
36769: PUSH
36770: LD_INT 3
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 2
36779: PUSH
36780: LD_INT 3
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: LIST
36791: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36792: LD_ADDR_VAR 0 20
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: LD_INT 3
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: LD_INT 3
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: NEG
36820: PUSH
36821: LD_INT 2
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: LIST
36832: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36833: LD_ADDR_VAR 0 21
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 3
36851: NEG
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 3
36862: NEG
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: LIST
36876: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36877: LD_ADDR_VAR 0 22
36881: PUSH
36882: LD_INT 2
36884: NEG
36885: PUSH
36886: LD_INT 3
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 3
36896: NEG
36897: PUSH
36898: LD_INT 2
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 3
36908: NEG
36909: PUSH
36910: LD_INT 3
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: LIST
36922: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36923: LD_ADDR_VAR 0 23
36927: PUSH
36928: LD_INT 0
36930: PUSH
36931: LD_INT 3
36933: NEG
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: PUSH
36943: LD_INT 4
36945: NEG
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 1
36953: PUSH
36954: LD_INT 3
36956: NEG
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: LIST
36966: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36967: LD_ADDR_VAR 0 24
36971: PUSH
36972: LD_INT 3
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 3
36984: PUSH
36985: LD_INT 1
36987: NEG
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 4
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: LIST
37007: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37008: LD_ADDR_VAR 0 25
37012: PUSH
37013: LD_INT 3
37015: PUSH
37016: LD_INT 3
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 4
37025: PUSH
37026: LD_INT 3
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 3
37035: PUSH
37036: LD_INT 4
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: LIST
37047: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37048: LD_ADDR_VAR 0 26
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: LD_INT 3
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: PUSH
37066: LD_INT 4
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: LD_INT 3
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: LIST
37088: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37089: LD_ADDR_VAR 0 27
37093: PUSH
37094: LD_INT 3
37096: NEG
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 3
37107: NEG
37108: PUSH
37109: LD_INT 1
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 4
37118: NEG
37119: PUSH
37120: LD_INT 1
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: LIST
37132: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37133: LD_ADDR_VAR 0 28
37137: PUSH
37138: LD_INT 3
37140: NEG
37141: PUSH
37142: LD_INT 3
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 3
37152: NEG
37153: PUSH
37154: LD_INT 4
37156: NEG
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 4
37164: NEG
37165: PUSH
37166: LD_INT 3
37168: NEG
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: LIST
37178: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37179: LD_ADDR_VAR 0 29
37183: PUSH
37184: LD_INT 1
37186: NEG
37187: PUSH
37188: LD_INT 3
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: LD_INT 3
37201: NEG
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: LD_INT 2
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: LD_INT 4
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: LD_INT 4
37235: NEG
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: PUSH
37244: LD_INT 3
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: NEG
37255: PUSH
37256: LD_INT 5
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: LD_INT 5
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: LD_INT 4
37280: NEG
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 1
37288: NEG
37289: PUSH
37290: LD_INT 6
37292: NEG
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 0
37300: PUSH
37301: LD_INT 6
37303: NEG
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 1
37311: PUSH
37312: LD_INT 5
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37334: LD_ADDR_VAR 0 30
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 3
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 3
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 3
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 4
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 4
37393: PUSH
37394: LD_INT 1
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 4
37403: PUSH
37404: LD_INT 1
37406: NEG
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 5
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 5
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 5
37434: PUSH
37435: LD_INT 1
37437: NEG
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 6
37445: PUSH
37446: LD_INT 0
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 6
37455: PUSH
37456: LD_INT 1
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37477: LD_ADDR_VAR 0 31
37481: PUSH
37482: LD_INT 3
37484: PUSH
37485: LD_INT 2
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 3
37494: PUSH
37495: LD_INT 3
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 2
37504: PUSH
37505: LD_INT 3
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 4
37514: PUSH
37515: LD_INT 3
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 4
37524: PUSH
37525: LD_INT 4
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 3
37534: PUSH
37535: LD_INT 4
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 5
37544: PUSH
37545: LD_INT 4
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 5
37554: PUSH
37555: LD_INT 5
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 4
37564: PUSH
37565: LD_INT 5
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 6
37574: PUSH
37575: LD_INT 5
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 6
37584: PUSH
37585: LD_INT 6
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 5
37594: PUSH
37595: LD_INT 6
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37616: LD_ADDR_VAR 0 32
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: LD_INT 3
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: LD_INT 3
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 1
37643: NEG
37644: PUSH
37645: LD_INT 2
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 1
37654: PUSH
37655: LD_INT 4
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: LD_INT 4
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: LD_INT 3
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: LD_INT 5
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: LD_INT 5
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 1
37705: NEG
37706: PUSH
37707: LD_INT 4
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: LD_INT 6
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 0
37726: PUSH
37727: LD_INT 6
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 1
37736: NEG
37737: PUSH
37738: LD_INT 5
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37759: LD_ADDR_VAR 0 33
37763: PUSH
37764: LD_INT 2
37766: NEG
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 3
37777: NEG
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 3
37788: NEG
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 3
37800: NEG
37801: PUSH
37802: LD_INT 1
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 4
37811: NEG
37812: PUSH
37813: LD_INT 0
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 4
37822: NEG
37823: PUSH
37824: LD_INT 1
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 4
37834: NEG
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 5
37845: NEG
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 5
37856: NEG
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 5
37868: NEG
37869: PUSH
37870: LD_INT 1
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 6
37879: NEG
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 6
37890: NEG
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37914: LD_ADDR_VAR 0 34
37918: PUSH
37919: LD_INT 2
37921: NEG
37922: PUSH
37923: LD_INT 3
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 3
37933: NEG
37934: PUSH
37935: LD_INT 2
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 3
37945: NEG
37946: PUSH
37947: LD_INT 3
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 3
37957: NEG
37958: PUSH
37959: LD_INT 4
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 4
37969: NEG
37970: PUSH
37971: LD_INT 3
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 4
37981: NEG
37982: PUSH
37983: LD_INT 4
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 4
37993: NEG
37994: PUSH
37995: LD_INT 5
37997: NEG
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 5
38005: NEG
38006: PUSH
38007: LD_INT 4
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 5
38017: NEG
38018: PUSH
38019: LD_INT 5
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 5
38029: NEG
38030: PUSH
38031: LD_INT 6
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 6
38041: NEG
38042: PUSH
38043: LD_INT 5
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 6
38053: NEG
38054: PUSH
38055: LD_INT 6
38057: NEG
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38077: LD_ADDR_VAR 0 41
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 2
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: LD_INT 3
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 1
38107: PUSH
38108: LD_INT 2
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: LIST
38120: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38121: LD_ADDR_VAR 0 42
38125: PUSH
38126: LD_INT 2
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 2
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 3
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: LIST
38161: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38162: LD_ADDR_VAR 0 43
38166: PUSH
38167: LD_INT 2
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 3
38179: PUSH
38180: LD_INT 2
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 2
38189: PUSH
38190: LD_INT 3
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: LIST
38201: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38202: LD_ADDR_VAR 0 44
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: LD_INT 2
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: LD_INT 3
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: LD_INT 2
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: LIST
38242: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38243: LD_ADDR_VAR 0 45
38247: PUSH
38248: LD_INT 2
38250: NEG
38251: PUSH
38252: LD_INT 0
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 2
38261: NEG
38262: PUSH
38263: LD_INT 1
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 3
38272: NEG
38273: PUSH
38274: LD_INT 1
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: LIST
38286: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38287: LD_ADDR_VAR 0 46
38291: PUSH
38292: LD_INT 2
38294: NEG
38295: PUSH
38296: LD_INT 2
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 2
38306: NEG
38307: PUSH
38308: LD_INT 3
38310: NEG
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 3
38318: NEG
38319: PUSH
38320: LD_INT 2
38322: NEG
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: LIST
38332: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38333: LD_ADDR_VAR 0 47
38337: PUSH
38338: LD_INT 2
38340: NEG
38341: PUSH
38342: LD_INT 3
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: LD_INT 3
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38366: LD_ADDR_VAR 0 48
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: LD_INT 2
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 2
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38397: LD_ADDR_VAR 0 49
38401: PUSH
38402: LD_INT 3
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 3
38414: PUSH
38415: LD_INT 2
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38426: LD_ADDR_VAR 0 50
38430: PUSH
38431: LD_INT 2
38433: PUSH
38434: LD_INT 3
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 1
38443: PUSH
38444: LD_INT 3
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38455: LD_ADDR_VAR 0 51
38459: PUSH
38460: LD_INT 1
38462: NEG
38463: PUSH
38464: LD_INT 2
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 2
38473: NEG
38474: PUSH
38475: LD_INT 1
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38486: LD_ADDR_VAR 0 52
38490: PUSH
38491: LD_INT 3
38493: NEG
38494: PUSH
38495: LD_INT 1
38497: NEG
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 3
38505: NEG
38506: PUSH
38507: LD_INT 2
38509: NEG
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38519: LD_ADDR_VAR 0 53
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: LD_INT 3
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 3
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: LD_INT 2
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: LIST
38562: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38563: LD_ADDR_VAR 0 54
38567: PUSH
38568: LD_INT 2
38570: PUSH
38571: LD_INT 1
38573: NEG
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 3
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 3
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: LIST
38603: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38604: LD_ADDR_VAR 0 55
38608: PUSH
38609: LD_INT 3
38611: PUSH
38612: LD_INT 2
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 3
38621: PUSH
38622: LD_INT 3
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 2
38631: PUSH
38632: LD_INT 3
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: LIST
38643: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38644: LD_ADDR_VAR 0 56
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: LD_INT 3
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 0
38661: PUSH
38662: LD_INT 3
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 1
38671: NEG
38672: PUSH
38673: LD_INT 2
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: LIST
38684: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38685: LD_ADDR_VAR 0 57
38689: PUSH
38690: LD_INT 2
38692: NEG
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 3
38703: NEG
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 3
38714: NEG
38715: PUSH
38716: LD_INT 1
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: LIST
38728: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38729: LD_ADDR_VAR 0 58
38733: PUSH
38734: LD_INT 2
38736: NEG
38737: PUSH
38738: LD_INT 3
38740: NEG
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 3
38748: NEG
38749: PUSH
38750: LD_INT 2
38752: NEG
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 3
38760: NEG
38761: PUSH
38762: LD_INT 3
38764: NEG
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: LIST
38774: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38775: LD_ADDR_VAR 0 59
38779: PUSH
38780: LD_INT 1
38782: NEG
38783: PUSH
38784: LD_INT 2
38786: NEG
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: LD_INT 2
38797: NEG
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: LIST
38818: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38819: LD_ADDR_VAR 0 60
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: LD_INT 0
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 2
38847: PUSH
38848: LD_INT 1
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: LIST
38859: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38860: LD_ADDR_VAR 0 61
38864: PUSH
38865: LD_INT 2
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 2
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: LD_INT 2
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: LIST
38899: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38900: LD_ADDR_VAR 0 62
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: LD_INT 2
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 2
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: LIST
38940: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38941: LD_ADDR_VAR 0 63
38945: PUSH
38946: LD_INT 1
38948: NEG
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 2
38959: NEG
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 2
38970: NEG
38971: PUSH
38972: LD_INT 1
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: LIST
38984: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38985: LD_ADDR_VAR 0 64
38989: PUSH
38990: LD_INT 1
38992: NEG
38993: PUSH
38994: LD_INT 2
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 2
39004: NEG
39005: PUSH
39006: LD_INT 1
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 2
39016: NEG
39017: PUSH
39018: LD_INT 2
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: ST_TO_ADDR
// end ; 2 :
39031: GO 42297
39033: LD_INT 2
39035: DOUBLE
39036: EQUAL
39037: IFTRUE 39041
39039: GO 42296
39041: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39042: LD_ADDR_VAR 0 29
39046: PUSH
39047: LD_INT 4
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 4
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 5
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 5
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 4
39090: PUSH
39091: LD_INT 1
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 3
39100: PUSH
39101: LD_INT 0
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 3
39110: PUSH
39111: LD_INT 1
39113: NEG
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 3
39121: PUSH
39122: LD_INT 2
39124: NEG
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 5
39132: PUSH
39133: LD_INT 2
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 3
39142: PUSH
39143: LD_INT 3
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 3
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 4
39162: PUSH
39163: LD_INT 3
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 4
39172: PUSH
39173: LD_INT 4
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 3
39182: PUSH
39183: LD_INT 4
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 2
39192: PUSH
39193: LD_INT 3
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 4
39212: PUSH
39213: LD_INT 2
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 2
39222: PUSH
39223: LD_INT 4
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: LD_INT 4
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: LD_INT 3
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: LD_INT 4
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 5
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 5
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: LD_INT 4
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: LD_INT 3
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 2
39304: PUSH
39305: LD_INT 5
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 2
39314: NEG
39315: PUSH
39316: LD_INT 3
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 3
39325: NEG
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 3
39336: NEG
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 2
39348: NEG
39349: PUSH
39350: LD_INT 0
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 2
39359: NEG
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 3
39370: NEG
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 4
39381: NEG
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 4
39392: NEG
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 4
39404: NEG
39405: PUSH
39406: LD_INT 2
39408: NEG
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: LD_INT 2
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 4
39427: NEG
39428: PUSH
39429: LD_INT 4
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 4
39439: NEG
39440: PUSH
39441: LD_INT 5
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 3
39451: NEG
39452: PUSH
39453: LD_INT 4
39455: NEG
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 3
39463: NEG
39464: PUSH
39465: LD_INT 3
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 4
39475: NEG
39476: PUSH
39477: LD_INT 3
39479: NEG
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 5
39487: NEG
39488: PUSH
39489: LD_INT 4
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 5
39499: NEG
39500: PUSH
39501: LD_INT 5
39503: NEG
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 3
39511: NEG
39512: PUSH
39513: LD_INT 5
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 5
39523: NEG
39524: PUSH
39525: LD_INT 3
39527: NEG
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39580: LD_ADDR_VAR 0 30
39584: PUSH
39585: LD_INT 4
39587: PUSH
39588: LD_INT 4
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 4
39597: PUSH
39598: LD_INT 3
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 5
39607: PUSH
39608: LD_INT 4
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 5
39617: PUSH
39618: LD_INT 5
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 4
39627: PUSH
39628: LD_INT 5
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 3
39637: PUSH
39638: LD_INT 4
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 3
39647: PUSH
39648: LD_INT 3
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 5
39657: PUSH
39658: LD_INT 3
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 3
39667: PUSH
39668: LD_INT 5
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: LD_INT 3
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: LD_INT 2
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: LD_INT 3
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: LD_INT 4
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: LD_INT 4
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: LD_INT 3
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: LD_INT 2
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 2
39749: PUSH
39750: LD_INT 4
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 2
39759: NEG
39760: PUSH
39761: LD_INT 2
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 4
39770: NEG
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 4
39781: NEG
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 3
39793: NEG
39794: PUSH
39795: LD_INT 0
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 3
39804: NEG
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 4
39815: NEG
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 5
39826: NEG
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 5
39837: NEG
39838: PUSH
39839: LD_INT 1
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 5
39849: NEG
39850: PUSH
39851: LD_INT 2
39853: NEG
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 3
39861: NEG
39862: PUSH
39863: LD_INT 2
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 3
39872: NEG
39873: PUSH
39874: LD_INT 3
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 3
39884: NEG
39885: PUSH
39886: LD_INT 4
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 2
39896: NEG
39897: PUSH
39898: LD_INT 3
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 2
39908: NEG
39909: PUSH
39910: LD_INT 2
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 3
39920: NEG
39921: PUSH
39922: LD_INT 2
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 4
39932: NEG
39933: PUSH
39934: LD_INT 3
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 4
39944: NEG
39945: PUSH
39946: LD_INT 4
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 2
39956: NEG
39957: PUSH
39958: LD_INT 4
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 4
39968: NEG
39969: PUSH
39970: LD_INT 2
39972: NEG
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: LD_INT 4
39983: NEG
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 0
39991: PUSH
39992: LD_INT 5
39994: NEG
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 1
40002: PUSH
40003: LD_INT 4
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 1
40013: PUSH
40014: LD_INT 3
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: LD_INT 3
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: LD_INT 4
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: NEG
40048: PUSH
40049: LD_INT 5
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 2
40059: PUSH
40060: LD_INT 3
40062: NEG
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 2
40070: NEG
40071: PUSH
40072: LD_INT 5
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40127: LD_ADDR_VAR 0 31
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: LD_INT 4
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 0
40144: PUSH
40145: LD_INT 3
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: LD_INT 4
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: LD_INT 5
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: LD_INT 5
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: NEG
40185: PUSH
40186: LD_INT 4
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: LD_INT 3
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 2
40206: PUSH
40207: LD_INT 5
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 2
40216: NEG
40217: PUSH
40218: LD_INT 3
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 3
40227: NEG
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 3
40238: NEG
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 2
40250: NEG
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 2
40261: NEG
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 3
40272: NEG
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 4
40283: NEG
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 4
40294: NEG
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 4
40306: NEG
40307: PUSH
40308: LD_INT 2
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: LD_INT 2
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 4
40329: NEG
40330: PUSH
40331: LD_INT 4
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 4
40341: NEG
40342: PUSH
40343: LD_INT 5
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 3
40353: NEG
40354: PUSH
40355: LD_INT 4
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 3
40365: NEG
40366: PUSH
40367: LD_INT 3
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 4
40377: NEG
40378: PUSH
40379: LD_INT 3
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 5
40389: NEG
40390: PUSH
40391: LD_INT 4
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 5
40401: NEG
40402: PUSH
40403: LD_INT 5
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 3
40413: NEG
40414: PUSH
40415: LD_INT 5
40417: NEG
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 5
40425: NEG
40426: PUSH
40427: LD_INT 3
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: LD_INT 3
40440: NEG
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: LD_INT 4
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: LD_INT 3
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 1
40470: PUSH
40471: LD_INT 2
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: LD_INT 2
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: LD_INT 3
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: LD_INT 4
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: PUSH
40517: LD_INT 2
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: LD_INT 4
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 4
40539: PUSH
40540: LD_INT 0
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 4
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 5
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 5
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 4
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 3
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 3
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 3
40611: PUSH
40612: LD_INT 2
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 5
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40677: LD_ADDR_VAR 0 32
40681: PUSH
40682: LD_INT 4
40684: NEG
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 4
40695: NEG
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 3
40707: NEG
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 3
40718: NEG
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 4
40729: NEG
40730: PUSH
40731: LD_INT 1
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 5
40740: NEG
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 5
40751: NEG
40752: PUSH
40753: LD_INT 1
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 5
40763: NEG
40764: PUSH
40765: LD_INT 2
40767: NEG
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 3
40775: NEG
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 3
40786: NEG
40787: PUSH
40788: LD_INT 3
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 3
40798: NEG
40799: PUSH
40800: LD_INT 4
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 2
40810: NEG
40811: PUSH
40812: LD_INT 3
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: LD_INT 2
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 3
40834: NEG
40835: PUSH
40836: LD_INT 2
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 4
40846: NEG
40847: PUSH
40848: LD_INT 3
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 4
40858: NEG
40859: PUSH
40860: LD_INT 4
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 2
40870: NEG
40871: PUSH
40872: LD_INT 4
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 4
40882: NEG
40883: PUSH
40884: LD_INT 2
40886: NEG
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 4
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: LD_INT 5
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: PUSH
40917: LD_INT 4
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: LD_INT 3
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: LD_INT 3
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: LD_INT 4
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: NEG
40962: PUSH
40963: LD_INT 5
40965: NEG
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 2
40973: PUSH
40974: LD_INT 3
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 2
40984: NEG
40985: PUSH
40986: LD_INT 5
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 3
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 3
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 4
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 4
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 3
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: LD_INT 2
41071: NEG
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 4
41079: PUSH
41080: LD_INT 2
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 4
41089: PUSH
41090: LD_INT 4
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 4
41099: PUSH
41100: LD_INT 3
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 5
41109: PUSH
41110: LD_INT 4
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 5
41119: PUSH
41120: LD_INT 5
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 4
41129: PUSH
41130: LD_INT 5
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 3
41139: PUSH
41140: LD_INT 4
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 3
41149: PUSH
41150: LD_INT 3
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 5
41159: PUSH
41160: LD_INT 3
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 3
41169: PUSH
41170: LD_INT 5
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41224: LD_ADDR_VAR 0 33
41228: PUSH
41229: LD_INT 4
41231: NEG
41232: PUSH
41233: LD_INT 4
41235: NEG
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 4
41243: NEG
41244: PUSH
41245: LD_INT 5
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 3
41255: NEG
41256: PUSH
41257: LD_INT 4
41259: NEG
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 3
41267: NEG
41268: PUSH
41269: LD_INT 3
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 4
41279: NEG
41280: PUSH
41281: LD_INT 3
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 5
41291: NEG
41292: PUSH
41293: LD_INT 4
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 5
41303: NEG
41304: PUSH
41305: LD_INT 5
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 3
41315: NEG
41316: PUSH
41317: LD_INT 5
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 5
41327: NEG
41328: PUSH
41329: LD_INT 3
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: LD_INT 3
41342: NEG
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: LD_INT 4
41353: NEG
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: LD_INT 3
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: LD_INT 2
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 1
41394: NEG
41395: PUSH
41396: LD_INT 3
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: LD_INT 4
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: NEG
41430: PUSH
41431: LD_INT 4
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 4
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 4
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 5
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 5
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 4
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 3
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 3
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 3
41513: PUSH
41514: LD_INT 2
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 5
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 3
41534: PUSH
41535: LD_INT 3
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 3
41544: PUSH
41545: LD_INT 2
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 4
41554: PUSH
41555: LD_INT 3
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 4
41564: PUSH
41565: LD_INT 4
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 3
41574: PUSH
41575: LD_INT 4
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 2
41584: PUSH
41585: LD_INT 3
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: PUSH
41595: LD_INT 2
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 4
41604: PUSH
41605: LD_INT 2
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: PUSH
41615: LD_INT 4
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: LD_INT 4
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: LD_INT 3
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: LD_INT 4
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: LD_INT 5
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: LD_INT 5
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 4
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: NEG
41686: PUSH
41687: LD_INT 3
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 2
41696: PUSH
41697: LD_INT 5
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: NEG
41707: PUSH
41708: LD_INT 3
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41762: LD_ADDR_VAR 0 34
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: LD_INT 4
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: LD_INT 5
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 1
41791: PUSH
41792: LD_INT 4
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: LD_INT 3
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: LD_INT 3
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: LD_INT 4
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: LD_INT 5
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 2
41848: PUSH
41849: LD_INT 3
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 2
41859: NEG
41860: PUSH
41861: LD_INT 5
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 3
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 3
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 4
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 4
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 3
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 2
41943: PUSH
41944: LD_INT 2
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 4
41954: PUSH
41955: LD_INT 2
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 4
41964: PUSH
41965: LD_INT 4
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 4
41974: PUSH
41975: LD_INT 3
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 5
41984: PUSH
41985: LD_INT 4
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 5
41994: PUSH
41995: LD_INT 5
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 4
42004: PUSH
42005: LD_INT 5
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 3
42014: PUSH
42015: LD_INT 4
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 3
42024: PUSH
42025: LD_INT 3
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 5
42034: PUSH
42035: LD_INT 3
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 3
42044: PUSH
42045: LD_INT 5
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: LD_INT 3
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: LD_INT 2
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: LD_INT 3
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: LD_INT 4
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: LD_INT 4
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: LD_INT 3
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 2
42126: PUSH
42127: LD_INT 4
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 4
42147: NEG
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 4
42158: NEG
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 3
42170: NEG
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 3
42181: NEG
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 4
42192: NEG
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 5
42203: NEG
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 5
42214: NEG
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 5
42226: NEG
42227: PUSH
42228: LD_INT 2
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 3
42238: NEG
42239: PUSH
42240: LD_INT 2
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: ST_TO_ADDR
// end ; end ;
42294: GO 42297
42296: POP
// case btype of b_depot , b_warehouse :
42297: LD_VAR 0 1
42301: PUSH
42302: LD_INT 0
42304: DOUBLE
42305: EQUAL
42306: IFTRUE 42316
42308: LD_INT 1
42310: DOUBLE
42311: EQUAL
42312: IFTRUE 42316
42314: GO 42517
42316: POP
// case nation of nation_american :
42317: LD_VAR 0 5
42321: PUSH
42322: LD_INT 1
42324: DOUBLE
42325: EQUAL
42326: IFTRUE 42330
42328: GO 42386
42330: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42331: LD_ADDR_VAR 0 9
42335: PUSH
42336: LD_VAR 0 11
42340: PUSH
42341: LD_VAR 0 12
42345: PUSH
42346: LD_VAR 0 13
42350: PUSH
42351: LD_VAR 0 14
42355: PUSH
42356: LD_VAR 0 15
42360: PUSH
42361: LD_VAR 0 16
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: PUSH
42374: LD_VAR 0 4
42378: PUSH
42379: LD_INT 1
42381: PLUS
42382: ARRAY
42383: ST_TO_ADDR
42384: GO 42515
42386: LD_INT 2
42388: DOUBLE
42389: EQUAL
42390: IFTRUE 42394
42392: GO 42450
42394: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42395: LD_ADDR_VAR 0 9
42399: PUSH
42400: LD_VAR 0 17
42404: PUSH
42405: LD_VAR 0 18
42409: PUSH
42410: LD_VAR 0 19
42414: PUSH
42415: LD_VAR 0 20
42419: PUSH
42420: LD_VAR 0 21
42424: PUSH
42425: LD_VAR 0 22
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: PUSH
42438: LD_VAR 0 4
42442: PUSH
42443: LD_INT 1
42445: PLUS
42446: ARRAY
42447: ST_TO_ADDR
42448: GO 42515
42450: LD_INT 3
42452: DOUBLE
42453: EQUAL
42454: IFTRUE 42458
42456: GO 42514
42458: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42459: LD_ADDR_VAR 0 9
42463: PUSH
42464: LD_VAR 0 23
42468: PUSH
42469: LD_VAR 0 24
42473: PUSH
42474: LD_VAR 0 25
42478: PUSH
42479: LD_VAR 0 26
42483: PUSH
42484: LD_VAR 0 27
42488: PUSH
42489: LD_VAR 0 28
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: PUSH
42502: LD_VAR 0 4
42506: PUSH
42507: LD_INT 1
42509: PLUS
42510: ARRAY
42511: ST_TO_ADDR
42512: GO 42515
42514: POP
42515: GO 43070
42517: LD_INT 2
42519: DOUBLE
42520: EQUAL
42521: IFTRUE 42531
42523: LD_INT 3
42525: DOUBLE
42526: EQUAL
42527: IFTRUE 42531
42529: GO 42587
42531: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42532: LD_ADDR_VAR 0 9
42536: PUSH
42537: LD_VAR 0 29
42541: PUSH
42542: LD_VAR 0 30
42546: PUSH
42547: LD_VAR 0 31
42551: PUSH
42552: LD_VAR 0 32
42556: PUSH
42557: LD_VAR 0 33
42561: PUSH
42562: LD_VAR 0 34
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: PUSH
42575: LD_VAR 0 4
42579: PUSH
42580: LD_INT 1
42582: PLUS
42583: ARRAY
42584: ST_TO_ADDR
42585: GO 43070
42587: LD_INT 16
42589: DOUBLE
42590: EQUAL
42591: IFTRUE 42649
42593: LD_INT 17
42595: DOUBLE
42596: EQUAL
42597: IFTRUE 42649
42599: LD_INT 18
42601: DOUBLE
42602: EQUAL
42603: IFTRUE 42649
42605: LD_INT 19
42607: DOUBLE
42608: EQUAL
42609: IFTRUE 42649
42611: LD_INT 22
42613: DOUBLE
42614: EQUAL
42615: IFTRUE 42649
42617: LD_INT 20
42619: DOUBLE
42620: EQUAL
42621: IFTRUE 42649
42623: LD_INT 21
42625: DOUBLE
42626: EQUAL
42627: IFTRUE 42649
42629: LD_INT 23
42631: DOUBLE
42632: EQUAL
42633: IFTRUE 42649
42635: LD_INT 24
42637: DOUBLE
42638: EQUAL
42639: IFTRUE 42649
42641: LD_INT 25
42643: DOUBLE
42644: EQUAL
42645: IFTRUE 42649
42647: GO 42705
42649: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42650: LD_ADDR_VAR 0 9
42654: PUSH
42655: LD_VAR 0 35
42659: PUSH
42660: LD_VAR 0 36
42664: PUSH
42665: LD_VAR 0 37
42669: PUSH
42670: LD_VAR 0 38
42674: PUSH
42675: LD_VAR 0 39
42679: PUSH
42680: LD_VAR 0 40
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: PUSH
42693: LD_VAR 0 4
42697: PUSH
42698: LD_INT 1
42700: PLUS
42701: ARRAY
42702: ST_TO_ADDR
42703: GO 43070
42705: LD_INT 6
42707: DOUBLE
42708: EQUAL
42709: IFTRUE 42761
42711: LD_INT 7
42713: DOUBLE
42714: EQUAL
42715: IFTRUE 42761
42717: LD_INT 8
42719: DOUBLE
42720: EQUAL
42721: IFTRUE 42761
42723: LD_INT 13
42725: DOUBLE
42726: EQUAL
42727: IFTRUE 42761
42729: LD_INT 12
42731: DOUBLE
42732: EQUAL
42733: IFTRUE 42761
42735: LD_INT 15
42737: DOUBLE
42738: EQUAL
42739: IFTRUE 42761
42741: LD_INT 11
42743: DOUBLE
42744: EQUAL
42745: IFTRUE 42761
42747: LD_INT 14
42749: DOUBLE
42750: EQUAL
42751: IFTRUE 42761
42753: LD_INT 10
42755: DOUBLE
42756: EQUAL
42757: IFTRUE 42761
42759: GO 42817
42761: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42762: LD_ADDR_VAR 0 9
42766: PUSH
42767: LD_VAR 0 41
42771: PUSH
42772: LD_VAR 0 42
42776: PUSH
42777: LD_VAR 0 43
42781: PUSH
42782: LD_VAR 0 44
42786: PUSH
42787: LD_VAR 0 45
42791: PUSH
42792: LD_VAR 0 46
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: PUSH
42805: LD_VAR 0 4
42809: PUSH
42810: LD_INT 1
42812: PLUS
42813: ARRAY
42814: ST_TO_ADDR
42815: GO 43070
42817: LD_INT 36
42819: DOUBLE
42820: EQUAL
42821: IFTRUE 42825
42823: GO 42881
42825: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42826: LD_ADDR_VAR 0 9
42830: PUSH
42831: LD_VAR 0 47
42835: PUSH
42836: LD_VAR 0 48
42840: PUSH
42841: LD_VAR 0 49
42845: PUSH
42846: LD_VAR 0 50
42850: PUSH
42851: LD_VAR 0 51
42855: PUSH
42856: LD_VAR 0 52
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: PUSH
42869: LD_VAR 0 4
42873: PUSH
42874: LD_INT 1
42876: PLUS
42877: ARRAY
42878: ST_TO_ADDR
42879: GO 43070
42881: LD_INT 4
42883: DOUBLE
42884: EQUAL
42885: IFTRUE 42907
42887: LD_INT 5
42889: DOUBLE
42890: EQUAL
42891: IFTRUE 42907
42893: LD_INT 34
42895: DOUBLE
42896: EQUAL
42897: IFTRUE 42907
42899: LD_INT 37
42901: DOUBLE
42902: EQUAL
42903: IFTRUE 42907
42905: GO 42963
42907: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42908: LD_ADDR_VAR 0 9
42912: PUSH
42913: LD_VAR 0 53
42917: PUSH
42918: LD_VAR 0 54
42922: PUSH
42923: LD_VAR 0 55
42927: PUSH
42928: LD_VAR 0 56
42932: PUSH
42933: LD_VAR 0 57
42937: PUSH
42938: LD_VAR 0 58
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: PUSH
42951: LD_VAR 0 4
42955: PUSH
42956: LD_INT 1
42958: PLUS
42959: ARRAY
42960: ST_TO_ADDR
42961: GO 43070
42963: LD_INT 31
42965: DOUBLE
42966: EQUAL
42967: IFTRUE 43013
42969: LD_INT 32
42971: DOUBLE
42972: EQUAL
42973: IFTRUE 43013
42975: LD_INT 33
42977: DOUBLE
42978: EQUAL
42979: IFTRUE 43013
42981: LD_INT 27
42983: DOUBLE
42984: EQUAL
42985: IFTRUE 43013
42987: LD_INT 26
42989: DOUBLE
42990: EQUAL
42991: IFTRUE 43013
42993: LD_INT 28
42995: DOUBLE
42996: EQUAL
42997: IFTRUE 43013
42999: LD_INT 29
43001: DOUBLE
43002: EQUAL
43003: IFTRUE 43013
43005: LD_INT 30
43007: DOUBLE
43008: EQUAL
43009: IFTRUE 43013
43011: GO 43069
43013: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43014: LD_ADDR_VAR 0 9
43018: PUSH
43019: LD_VAR 0 59
43023: PUSH
43024: LD_VAR 0 60
43028: PUSH
43029: LD_VAR 0 61
43033: PUSH
43034: LD_VAR 0 62
43038: PUSH
43039: LD_VAR 0 63
43043: PUSH
43044: LD_VAR 0 64
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: PUSH
43057: LD_VAR 0 4
43061: PUSH
43062: LD_INT 1
43064: PLUS
43065: ARRAY
43066: ST_TO_ADDR
43067: GO 43070
43069: POP
// temp_list2 = [ ] ;
43070: LD_ADDR_VAR 0 10
43074: PUSH
43075: EMPTY
43076: ST_TO_ADDR
// for i in temp_list do
43077: LD_ADDR_VAR 0 8
43081: PUSH
43082: LD_VAR 0 9
43086: PUSH
43087: FOR_IN
43088: IFFALSE 43140
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43090: LD_ADDR_VAR 0 10
43094: PUSH
43095: LD_VAR 0 10
43099: PUSH
43100: LD_VAR 0 8
43104: PUSH
43105: LD_INT 1
43107: ARRAY
43108: PUSH
43109: LD_VAR 0 2
43113: PLUS
43114: PUSH
43115: LD_VAR 0 8
43119: PUSH
43120: LD_INT 2
43122: ARRAY
43123: PUSH
43124: LD_VAR 0 3
43128: PLUS
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: EMPTY
43135: LIST
43136: ADD
43137: ST_TO_ADDR
43138: GO 43087
43140: POP
43141: POP
// result = temp_list2 ;
43142: LD_ADDR_VAR 0 7
43146: PUSH
43147: LD_VAR 0 10
43151: ST_TO_ADDR
// end ;
43152: LD_VAR 0 7
43156: RET
// export function EnemyInRange ( unit , dist ) ; begin
43157: LD_INT 0
43159: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43160: LD_ADDR_VAR 0 3
43164: PUSH
43165: LD_VAR 0 1
43169: PPUSH
43170: CALL_OW 255
43174: PPUSH
43175: LD_VAR 0 1
43179: PPUSH
43180: CALL_OW 250
43184: PPUSH
43185: LD_VAR 0 1
43189: PPUSH
43190: CALL_OW 251
43194: PPUSH
43195: LD_VAR 0 2
43199: PPUSH
43200: CALL 16414 0 4
43204: PUSH
43205: LD_INT 4
43207: ARRAY
43208: ST_TO_ADDR
// end ;
43209: LD_VAR 0 3
43213: RET
// export function PlayerSeeMe ( unit ) ; begin
43214: LD_INT 0
43216: PPUSH
// result := See ( your_side , unit ) ;
43217: LD_ADDR_VAR 0 2
43221: PUSH
43222: LD_OWVAR 2
43226: PPUSH
43227: LD_VAR 0 1
43231: PPUSH
43232: CALL_OW 292
43236: ST_TO_ADDR
// end ;
43237: LD_VAR 0 2
43241: RET
// export function ReverseDir ( unit ) ; begin
43242: LD_INT 0
43244: PPUSH
// if not unit then
43245: LD_VAR 0 1
43249: NOT
43250: IFFALSE 43254
// exit ;
43252: GO 43277
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43254: LD_ADDR_VAR 0 2
43258: PUSH
43259: LD_VAR 0 1
43263: PPUSH
43264: CALL_OW 254
43268: PUSH
43269: LD_INT 3
43271: PLUS
43272: PUSH
43273: LD_INT 6
43275: MOD
43276: ST_TO_ADDR
// end ;
43277: LD_VAR 0 2
43281: RET
// export function ReverseArray ( array ) ; var i ; begin
43282: LD_INT 0
43284: PPUSH
43285: PPUSH
// if not array then
43286: LD_VAR 0 1
43290: NOT
43291: IFFALSE 43295
// exit ;
43293: GO 43350
// result := [ ] ;
43295: LD_ADDR_VAR 0 2
43299: PUSH
43300: EMPTY
43301: ST_TO_ADDR
// for i := array downto 1 do
43302: LD_ADDR_VAR 0 3
43306: PUSH
43307: DOUBLE
43308: LD_VAR 0 1
43312: INC
43313: ST_TO_ADDR
43314: LD_INT 1
43316: PUSH
43317: FOR_DOWNTO
43318: IFFALSE 43348
// result := Join ( result , array [ i ] ) ;
43320: LD_ADDR_VAR 0 2
43324: PUSH
43325: LD_VAR 0 2
43329: PPUSH
43330: LD_VAR 0 1
43334: PUSH
43335: LD_VAR 0 3
43339: ARRAY
43340: PPUSH
43341: CALL 48192 0 2
43345: ST_TO_ADDR
43346: GO 43317
43348: POP
43349: POP
// end ;
43350: LD_VAR 0 2
43354: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43355: LD_INT 0
43357: PPUSH
43358: PPUSH
43359: PPUSH
43360: PPUSH
43361: PPUSH
43362: PPUSH
// if not unit or not hexes then
43363: LD_VAR 0 1
43367: NOT
43368: IFTRUE 43377
43370: PUSH
43371: LD_VAR 0 2
43375: NOT
43376: OR
43377: IFFALSE 43381
// exit ;
43379: GO 43504
// dist := 9999 ;
43381: LD_ADDR_VAR 0 5
43385: PUSH
43386: LD_INT 9999
43388: ST_TO_ADDR
// for i = 1 to hexes do
43389: LD_ADDR_VAR 0 4
43393: PUSH
43394: DOUBLE
43395: LD_INT 1
43397: DEC
43398: ST_TO_ADDR
43399: LD_VAR 0 2
43403: PUSH
43404: FOR_TO
43405: IFFALSE 43492
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43407: LD_ADDR_VAR 0 6
43411: PUSH
43412: LD_VAR 0 1
43416: PPUSH
43417: LD_VAR 0 2
43421: PUSH
43422: LD_VAR 0 4
43426: ARRAY
43427: PUSH
43428: LD_INT 1
43430: ARRAY
43431: PPUSH
43432: LD_VAR 0 2
43436: PUSH
43437: LD_VAR 0 4
43441: ARRAY
43442: PUSH
43443: LD_INT 2
43445: ARRAY
43446: PPUSH
43447: CALL_OW 297
43451: ST_TO_ADDR
// if tdist < dist then
43452: LD_VAR 0 6
43456: PUSH
43457: LD_VAR 0 5
43461: LESS
43462: IFFALSE 43490
// begin hex := hexes [ i ] ;
43464: LD_ADDR_VAR 0 8
43468: PUSH
43469: LD_VAR 0 2
43473: PUSH
43474: LD_VAR 0 4
43478: ARRAY
43479: ST_TO_ADDR
// dist := tdist ;
43480: LD_ADDR_VAR 0 5
43484: PUSH
43485: LD_VAR 0 6
43489: ST_TO_ADDR
// end ; end ;
43490: GO 43404
43492: POP
43493: POP
// result := hex ;
43494: LD_ADDR_VAR 0 3
43498: PUSH
43499: LD_VAR 0 8
43503: ST_TO_ADDR
// end ;
43504: LD_VAR 0 3
43508: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43509: LD_INT 0
43511: PPUSH
43512: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43513: LD_VAR 0 1
43517: NOT
43518: IFTRUE 43557
43520: PUSH
43521: LD_VAR 0 1
43525: PUSH
43526: LD_INT 21
43528: PUSH
43529: LD_INT 2
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 23
43538: PUSH
43539: LD_INT 2
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PPUSH
43550: CALL_OW 69
43554: IN
43555: NOT
43556: OR
43557: IFFALSE 43561
// exit ;
43559: GO 43608
// for i = 1 to 3 do
43561: LD_ADDR_VAR 0 3
43565: PUSH
43566: DOUBLE
43567: LD_INT 1
43569: DEC
43570: ST_TO_ADDR
43571: LD_INT 3
43573: PUSH
43574: FOR_TO
43575: IFFALSE 43606
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43577: LD_VAR 0 1
43581: PPUSH
43582: CALL_OW 250
43586: PPUSH
43587: LD_VAR 0 1
43591: PPUSH
43592: CALL_OW 251
43596: PPUSH
43597: LD_INT 1
43599: PPUSH
43600: CALL_OW 453
43604: GO 43574
43606: POP
43607: POP
// end ;
43608: LD_VAR 0 2
43612: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43613: LD_INT 0
43615: PPUSH
43616: PPUSH
43617: PPUSH
43618: PPUSH
43619: PPUSH
43620: PPUSH
// if not unit or not enemy_unit then
43621: LD_VAR 0 1
43625: NOT
43626: IFTRUE 43635
43628: PUSH
43629: LD_VAR 0 2
43633: NOT
43634: OR
43635: IFFALSE 43639
// exit ;
43637: GO 44110
// if GetLives ( i ) < 250 then
43639: LD_VAR 0 4
43643: PPUSH
43644: CALL_OW 256
43648: PUSH
43649: LD_INT 250
43651: LESS
43652: IFFALSE 43665
// begin ComAutodestruct ( i ) ;
43654: LD_VAR 0 4
43658: PPUSH
43659: CALL 43509 0 1
// exit ;
43663: GO 44110
// end ; x := GetX ( enemy_unit ) ;
43665: LD_ADDR_VAR 0 7
43669: PUSH
43670: LD_VAR 0 2
43674: PPUSH
43675: CALL_OW 250
43679: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43680: LD_ADDR_VAR 0 8
43684: PUSH
43685: LD_VAR 0 2
43689: PPUSH
43690: CALL_OW 251
43694: ST_TO_ADDR
// if not x or not y then
43695: LD_VAR 0 7
43699: NOT
43700: IFTRUE 43709
43702: PUSH
43703: LD_VAR 0 8
43707: NOT
43708: OR
43709: IFFALSE 43713
// exit ;
43711: GO 44110
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43713: LD_ADDR_VAR 0 6
43717: PUSH
43718: LD_VAR 0 7
43722: PPUSH
43723: LD_INT 0
43725: PPUSH
43726: LD_INT 4
43728: PPUSH
43729: CALL_OW 272
43733: PUSH
43734: LD_VAR 0 8
43738: PPUSH
43739: LD_INT 0
43741: PPUSH
43742: LD_INT 4
43744: PPUSH
43745: CALL_OW 273
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_VAR 0 7
43758: PPUSH
43759: LD_INT 1
43761: PPUSH
43762: LD_INT 4
43764: PPUSH
43765: CALL_OW 272
43769: PUSH
43770: LD_VAR 0 8
43774: PPUSH
43775: LD_INT 1
43777: PPUSH
43778: LD_INT 4
43780: PPUSH
43781: CALL_OW 273
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_VAR 0 7
43794: PPUSH
43795: LD_INT 2
43797: PPUSH
43798: LD_INT 4
43800: PPUSH
43801: CALL_OW 272
43805: PUSH
43806: LD_VAR 0 8
43810: PPUSH
43811: LD_INT 2
43813: PPUSH
43814: LD_INT 4
43816: PPUSH
43817: CALL_OW 273
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_VAR 0 7
43830: PPUSH
43831: LD_INT 3
43833: PPUSH
43834: LD_INT 4
43836: PPUSH
43837: CALL_OW 272
43841: PUSH
43842: LD_VAR 0 8
43846: PPUSH
43847: LD_INT 3
43849: PPUSH
43850: LD_INT 4
43852: PPUSH
43853: CALL_OW 273
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_VAR 0 7
43866: PPUSH
43867: LD_INT 4
43869: PPUSH
43870: LD_INT 4
43872: PPUSH
43873: CALL_OW 272
43877: PUSH
43878: LD_VAR 0 8
43882: PPUSH
43883: LD_INT 4
43885: PPUSH
43886: LD_INT 4
43888: PPUSH
43889: CALL_OW 273
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_VAR 0 7
43902: PPUSH
43903: LD_INT 5
43905: PPUSH
43906: LD_INT 4
43908: PPUSH
43909: CALL_OW 272
43913: PUSH
43914: LD_VAR 0 8
43918: PPUSH
43919: LD_INT 5
43921: PPUSH
43922: LD_INT 4
43924: PPUSH
43925: CALL_OW 273
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: ST_TO_ADDR
// for i = tmp downto 1 do
43942: LD_ADDR_VAR 0 4
43946: PUSH
43947: DOUBLE
43948: LD_VAR 0 6
43952: INC
43953: ST_TO_ADDR
43954: LD_INT 1
43956: PUSH
43957: FOR_DOWNTO
43958: IFFALSE 44061
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43960: LD_VAR 0 6
43964: PUSH
43965: LD_VAR 0 4
43969: ARRAY
43970: PUSH
43971: LD_INT 1
43973: ARRAY
43974: PPUSH
43975: LD_VAR 0 6
43979: PUSH
43980: LD_VAR 0 4
43984: ARRAY
43985: PUSH
43986: LD_INT 2
43988: ARRAY
43989: PPUSH
43990: CALL_OW 488
43994: NOT
43995: IFTRUE 44037
43997: PUSH
43998: LD_VAR 0 6
44002: PUSH
44003: LD_VAR 0 4
44007: ARRAY
44008: PUSH
44009: LD_INT 1
44011: ARRAY
44012: PPUSH
44013: LD_VAR 0 6
44017: PUSH
44018: LD_VAR 0 4
44022: ARRAY
44023: PUSH
44024: LD_INT 2
44026: ARRAY
44027: PPUSH
44028: CALL_OW 428
44032: PUSH
44033: LD_INT 0
44035: NONEQUAL
44036: OR
44037: IFFALSE 44059
// tmp := Delete ( tmp , i ) ;
44039: LD_ADDR_VAR 0 6
44043: PUSH
44044: LD_VAR 0 6
44048: PPUSH
44049: LD_VAR 0 4
44053: PPUSH
44054: CALL_OW 3
44058: ST_TO_ADDR
44059: GO 43957
44061: POP
44062: POP
// j := GetClosestHex ( unit , tmp ) ;
44063: LD_ADDR_VAR 0 5
44067: PUSH
44068: LD_VAR 0 1
44072: PPUSH
44073: LD_VAR 0 6
44077: PPUSH
44078: CALL 43355 0 2
44082: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44083: LD_VAR 0 1
44087: PPUSH
44088: LD_VAR 0 5
44092: PUSH
44093: LD_INT 1
44095: ARRAY
44096: PPUSH
44097: LD_VAR 0 5
44101: PUSH
44102: LD_INT 2
44104: ARRAY
44105: PPUSH
44106: CALL_OW 111
// end ;
44110: LD_VAR 0 3
44114: RET
// export function PrepareApemanSoldier ( ) ; begin
44115: LD_INT 0
44117: PPUSH
// uc_nation := 0 ;
44118: LD_ADDR_OWVAR 21
44122: PUSH
44123: LD_INT 0
44125: ST_TO_ADDR
// hc_sex := sex_male ;
44126: LD_ADDR_OWVAR 27
44130: PUSH
44131: LD_INT 1
44133: ST_TO_ADDR
// hc_name :=  ;
44134: LD_ADDR_OWVAR 26
44138: PUSH
44139: LD_STRING 
44141: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44142: LD_ADDR_OWVAR 28
44146: PUSH
44147: LD_INT 15
44149: ST_TO_ADDR
// hc_gallery :=  ;
44150: LD_ADDR_OWVAR 33
44154: PUSH
44155: LD_STRING 
44157: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44158: LD_ADDR_OWVAR 31
44162: PUSH
44163: LD_INT 0
44165: PPUSH
44166: LD_INT 3
44168: PPUSH
44169: CALL_OW 12
44173: PUSH
44174: LD_INT 0
44176: PPUSH
44177: LD_INT 3
44179: PPUSH
44180: CALL_OW 12
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44197: LD_ADDR_OWVAR 29
44201: PUSH
44202: LD_INT 12
44204: PUSH
44205: LD_INT 12
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: ST_TO_ADDR
// end ;
44212: LD_VAR 0 1
44216: RET
// export function PrepareApemanEngineer ( ) ; begin
44217: LD_INT 0
44219: PPUSH
// uc_nation := 0 ;
44220: LD_ADDR_OWVAR 21
44224: PUSH
44225: LD_INT 0
44227: ST_TO_ADDR
// hc_sex := sex_male ;
44228: LD_ADDR_OWVAR 27
44232: PUSH
44233: LD_INT 1
44235: ST_TO_ADDR
// hc_name :=  ;
44236: LD_ADDR_OWVAR 26
44240: PUSH
44241: LD_STRING 
44243: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44244: LD_ADDR_OWVAR 28
44248: PUSH
44249: LD_INT 16
44251: ST_TO_ADDR
// hc_gallery :=  ;
44252: LD_ADDR_OWVAR 33
44256: PUSH
44257: LD_STRING 
44259: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44260: LD_ADDR_OWVAR 31
44264: PUSH
44265: LD_INT 0
44267: PPUSH
44268: LD_INT 3
44270: PPUSH
44271: CALL_OW 12
44275: PUSH
44276: LD_INT 0
44278: PPUSH
44279: LD_INT 3
44281: PPUSH
44282: CALL_OW 12
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44299: LD_ADDR_OWVAR 29
44303: PUSH
44304: LD_INT 12
44306: PUSH
44307: LD_INT 12
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: ST_TO_ADDR
// end ;
44314: LD_VAR 0 1
44318: RET
// export function PrepareApeman ( agressivity ) ; begin
44319: LD_INT 0
44321: PPUSH
// uc_side := 0 ;
44322: LD_ADDR_OWVAR 20
44326: PUSH
44327: LD_INT 0
44329: ST_TO_ADDR
// uc_nation := 0 ;
44330: LD_ADDR_OWVAR 21
44334: PUSH
44335: LD_INT 0
44337: ST_TO_ADDR
// hc_sex := sex_male ;
44338: LD_ADDR_OWVAR 27
44342: PUSH
44343: LD_INT 1
44345: ST_TO_ADDR
// hc_class := class_apeman ;
44346: LD_ADDR_OWVAR 28
44350: PUSH
44351: LD_INT 12
44353: ST_TO_ADDR
// hc_gallery :=  ;
44354: LD_ADDR_OWVAR 33
44358: PUSH
44359: LD_STRING 
44361: ST_TO_ADDR
// hc_name :=  ;
44362: LD_ADDR_OWVAR 26
44366: PUSH
44367: LD_STRING 
44369: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44370: LD_ADDR_OWVAR 29
44374: PUSH
44375: LD_INT 12
44377: PUSH
44378: LD_INT 12
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: ST_TO_ADDR
// if agressivity = 0 then
44385: LD_VAR 0 1
44389: PUSH
44390: LD_INT 0
44392: EQUAL
44393: IFFALSE 44405
// hc_agressivity := 0 else
44395: LD_ADDR_OWVAR 35
44399: PUSH
44400: LD_INT 0
44402: ST_TO_ADDR
44403: GO 44426
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44405: LD_ADDR_OWVAR 35
44409: PUSH
44410: LD_VAR 0 1
44414: NEG
44415: PPUSH
44416: LD_VAR 0 1
44420: PPUSH
44421: CALL_OW 12
44425: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44426: LD_ADDR_OWVAR 31
44430: PUSH
44431: LD_INT 0
44433: PPUSH
44434: LD_INT 3
44436: PPUSH
44437: CALL_OW 12
44441: PUSH
44442: LD_INT 0
44444: PPUSH
44445: LD_INT 3
44447: PPUSH
44448: CALL_OW 12
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: ST_TO_ADDR
// end ;
44465: LD_VAR 0 2
44469: RET
// export function PrepareTiger ( agressivity ) ; begin
44470: LD_INT 0
44472: PPUSH
// uc_side := 0 ;
44473: LD_ADDR_OWVAR 20
44477: PUSH
44478: LD_INT 0
44480: ST_TO_ADDR
// uc_nation := 0 ;
44481: LD_ADDR_OWVAR 21
44485: PUSH
44486: LD_INT 0
44488: ST_TO_ADDR
// InitHc ;
44489: CALL_OW 19
// hc_class := class_tiger ;
44493: LD_ADDR_OWVAR 28
44497: PUSH
44498: LD_INT 14
44500: ST_TO_ADDR
// hc_gallery :=  ;
44501: LD_ADDR_OWVAR 33
44505: PUSH
44506: LD_STRING 
44508: ST_TO_ADDR
// hc_name :=  ;
44509: LD_ADDR_OWVAR 26
44513: PUSH
44514: LD_STRING 
44516: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44517: LD_ADDR_OWVAR 35
44521: PUSH
44522: LD_VAR 0 1
44526: NEG
44527: PPUSH
44528: LD_VAR 0 1
44532: PPUSH
44533: CALL_OW 12
44537: ST_TO_ADDR
// end ;
44538: LD_VAR 0 2
44542: RET
// export function PrepareEnchidna ( ) ; begin
44543: LD_INT 0
44545: PPUSH
// uc_side := 0 ;
44546: LD_ADDR_OWVAR 20
44550: PUSH
44551: LD_INT 0
44553: ST_TO_ADDR
// uc_nation := 0 ;
44554: LD_ADDR_OWVAR 21
44558: PUSH
44559: LD_INT 0
44561: ST_TO_ADDR
// InitHc ;
44562: CALL_OW 19
// hc_class := class_baggie ;
44566: LD_ADDR_OWVAR 28
44570: PUSH
44571: LD_INT 13
44573: ST_TO_ADDR
// hc_gallery :=  ;
44574: LD_ADDR_OWVAR 33
44578: PUSH
44579: LD_STRING 
44581: ST_TO_ADDR
// hc_name :=  ;
44582: LD_ADDR_OWVAR 26
44586: PUSH
44587: LD_STRING 
44589: ST_TO_ADDR
// end ;
44590: LD_VAR 0 1
44594: RET
// export function PrepareFrog ( ) ; begin
44595: LD_INT 0
44597: PPUSH
// uc_side := 0 ;
44598: LD_ADDR_OWVAR 20
44602: PUSH
44603: LD_INT 0
44605: ST_TO_ADDR
// uc_nation := 0 ;
44606: LD_ADDR_OWVAR 21
44610: PUSH
44611: LD_INT 0
44613: ST_TO_ADDR
// InitHc ;
44614: CALL_OW 19
// hc_class := class_frog ;
44618: LD_ADDR_OWVAR 28
44622: PUSH
44623: LD_INT 19
44625: ST_TO_ADDR
// hc_gallery :=  ;
44626: LD_ADDR_OWVAR 33
44630: PUSH
44631: LD_STRING 
44633: ST_TO_ADDR
// hc_name :=  ;
44634: LD_ADDR_OWVAR 26
44638: PUSH
44639: LD_STRING 
44641: ST_TO_ADDR
// end ;
44642: LD_VAR 0 1
44646: RET
// export function PrepareFish ( ) ; begin
44647: LD_INT 0
44649: PPUSH
// uc_side := 0 ;
44650: LD_ADDR_OWVAR 20
44654: PUSH
44655: LD_INT 0
44657: ST_TO_ADDR
// uc_nation := 0 ;
44658: LD_ADDR_OWVAR 21
44662: PUSH
44663: LD_INT 0
44665: ST_TO_ADDR
// InitHc ;
44666: CALL_OW 19
// hc_class := class_fish ;
44670: LD_ADDR_OWVAR 28
44674: PUSH
44675: LD_INT 20
44677: ST_TO_ADDR
// hc_gallery :=  ;
44678: LD_ADDR_OWVAR 33
44682: PUSH
44683: LD_STRING 
44685: ST_TO_ADDR
// hc_name :=  ;
44686: LD_ADDR_OWVAR 26
44690: PUSH
44691: LD_STRING 
44693: ST_TO_ADDR
// end ;
44694: LD_VAR 0 1
44698: RET
// export function PrepareBird ( ) ; begin
44699: LD_INT 0
44701: PPUSH
// uc_side := 0 ;
44702: LD_ADDR_OWVAR 20
44706: PUSH
44707: LD_INT 0
44709: ST_TO_ADDR
// uc_nation := 0 ;
44710: LD_ADDR_OWVAR 21
44714: PUSH
44715: LD_INT 0
44717: ST_TO_ADDR
// InitHc ;
44718: CALL_OW 19
// hc_class := class_phororhacos ;
44722: LD_ADDR_OWVAR 28
44726: PUSH
44727: LD_INT 18
44729: ST_TO_ADDR
// hc_gallery :=  ;
44730: LD_ADDR_OWVAR 33
44734: PUSH
44735: LD_STRING 
44737: ST_TO_ADDR
// hc_name :=  ;
44738: LD_ADDR_OWVAR 26
44742: PUSH
44743: LD_STRING 
44745: ST_TO_ADDR
// end ;
44746: LD_VAR 0 1
44750: RET
// export function PrepareHorse ( ) ; begin
44751: LD_INT 0
44753: PPUSH
// uc_side := 0 ;
44754: LD_ADDR_OWVAR 20
44758: PUSH
44759: LD_INT 0
44761: ST_TO_ADDR
// uc_nation := 0 ;
44762: LD_ADDR_OWVAR 21
44766: PUSH
44767: LD_INT 0
44769: ST_TO_ADDR
// InitHc ;
44770: CALL_OW 19
// hc_class := class_horse ;
44774: LD_ADDR_OWVAR 28
44778: PUSH
44779: LD_INT 21
44781: ST_TO_ADDR
// hc_gallery :=  ;
44782: LD_ADDR_OWVAR 33
44786: PUSH
44787: LD_STRING 
44789: ST_TO_ADDR
// hc_name :=  ;
44790: LD_ADDR_OWVAR 26
44794: PUSH
44795: LD_STRING 
44797: ST_TO_ADDR
// end ;
44798: LD_VAR 0 1
44802: RET
// export function PrepareMastodont ( ) ; begin
44803: LD_INT 0
44805: PPUSH
// uc_side := 0 ;
44806: LD_ADDR_OWVAR 20
44810: PUSH
44811: LD_INT 0
44813: ST_TO_ADDR
// uc_nation := 0 ;
44814: LD_ADDR_OWVAR 21
44818: PUSH
44819: LD_INT 0
44821: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44822: LD_ADDR_OWVAR 37
44826: PUSH
44827: LD_INT 31
44829: ST_TO_ADDR
// vc_control := control_rider ;
44830: LD_ADDR_OWVAR 38
44834: PUSH
44835: LD_INT 4
44837: ST_TO_ADDR
// end ;
44838: LD_VAR 0 1
44842: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44843: LD_INT 0
44845: PPUSH
44846: PPUSH
44847: PPUSH
// uc_side = 0 ;
44848: LD_ADDR_OWVAR 20
44852: PUSH
44853: LD_INT 0
44855: ST_TO_ADDR
// uc_nation = 0 ;
44856: LD_ADDR_OWVAR 21
44860: PUSH
44861: LD_INT 0
44863: ST_TO_ADDR
// InitHc_All ( ) ;
44864: CALL_OW 584
// InitVc ;
44868: CALL_OW 20
// if mastodonts then
44872: LD_VAR 0 6
44876: IFFALSE 44943
// for i = 1 to mastodonts do
44878: LD_ADDR_VAR 0 11
44882: PUSH
44883: DOUBLE
44884: LD_INT 1
44886: DEC
44887: ST_TO_ADDR
44888: LD_VAR 0 6
44892: PUSH
44893: FOR_TO
44894: IFFALSE 44941
// begin vc_chassis := 31 ;
44896: LD_ADDR_OWVAR 37
44900: PUSH
44901: LD_INT 31
44903: ST_TO_ADDR
// vc_control := control_rider ;
44904: LD_ADDR_OWVAR 38
44908: PUSH
44909: LD_INT 4
44911: ST_TO_ADDR
// animal := CreateVehicle ;
44912: LD_ADDR_VAR 0 12
44916: PUSH
44917: CALL_OW 45
44921: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44922: LD_VAR 0 12
44926: PPUSH
44927: LD_VAR 0 8
44931: PPUSH
44932: LD_INT 0
44934: PPUSH
44935: CALL 47085 0 3
// end ;
44939: GO 44893
44941: POP
44942: POP
// if horses then
44943: LD_VAR 0 5
44947: IFFALSE 45014
// for i = 1 to horses do
44949: LD_ADDR_VAR 0 11
44953: PUSH
44954: DOUBLE
44955: LD_INT 1
44957: DEC
44958: ST_TO_ADDR
44959: LD_VAR 0 5
44963: PUSH
44964: FOR_TO
44965: IFFALSE 45012
// begin hc_class := 21 ;
44967: LD_ADDR_OWVAR 28
44971: PUSH
44972: LD_INT 21
44974: ST_TO_ADDR
// hc_gallery :=  ;
44975: LD_ADDR_OWVAR 33
44979: PUSH
44980: LD_STRING 
44982: ST_TO_ADDR
// animal := CreateHuman ;
44983: LD_ADDR_VAR 0 12
44987: PUSH
44988: CALL_OW 44
44992: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44993: LD_VAR 0 12
44997: PPUSH
44998: LD_VAR 0 8
45002: PPUSH
45003: LD_INT 0
45005: PPUSH
45006: CALL 47085 0 3
// end ;
45010: GO 44964
45012: POP
45013: POP
// if birds then
45014: LD_VAR 0 1
45018: IFFALSE 45085
// for i = 1 to birds do
45020: LD_ADDR_VAR 0 11
45024: PUSH
45025: DOUBLE
45026: LD_INT 1
45028: DEC
45029: ST_TO_ADDR
45030: LD_VAR 0 1
45034: PUSH
45035: FOR_TO
45036: IFFALSE 45083
// begin hc_class := 18 ;
45038: LD_ADDR_OWVAR 28
45042: PUSH
45043: LD_INT 18
45045: ST_TO_ADDR
// hc_gallery =  ;
45046: LD_ADDR_OWVAR 33
45050: PUSH
45051: LD_STRING 
45053: ST_TO_ADDR
// animal := CreateHuman ;
45054: LD_ADDR_VAR 0 12
45058: PUSH
45059: CALL_OW 44
45063: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45064: LD_VAR 0 12
45068: PPUSH
45069: LD_VAR 0 8
45073: PPUSH
45074: LD_INT 0
45076: PPUSH
45077: CALL 47085 0 3
// end ;
45081: GO 45035
45083: POP
45084: POP
// if tigers then
45085: LD_VAR 0 2
45089: IFFALSE 45173
// for i = 1 to tigers do
45091: LD_ADDR_VAR 0 11
45095: PUSH
45096: DOUBLE
45097: LD_INT 1
45099: DEC
45100: ST_TO_ADDR
45101: LD_VAR 0 2
45105: PUSH
45106: FOR_TO
45107: IFFALSE 45171
// begin hc_class = class_tiger ;
45109: LD_ADDR_OWVAR 28
45113: PUSH
45114: LD_INT 14
45116: ST_TO_ADDR
// hc_gallery =  ;
45117: LD_ADDR_OWVAR 33
45121: PUSH
45122: LD_STRING 
45124: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45125: LD_ADDR_OWVAR 35
45129: PUSH
45130: LD_INT 7
45132: NEG
45133: PPUSH
45134: LD_INT 7
45136: PPUSH
45137: CALL_OW 12
45141: ST_TO_ADDR
// animal := CreateHuman ;
45142: LD_ADDR_VAR 0 12
45146: PUSH
45147: CALL_OW 44
45151: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45152: LD_VAR 0 12
45156: PPUSH
45157: LD_VAR 0 8
45161: PPUSH
45162: LD_INT 0
45164: PPUSH
45165: CALL 47085 0 3
// end ;
45169: GO 45106
45171: POP
45172: POP
// if apemans then
45173: LD_VAR 0 3
45177: IFFALSE 45300
// for i = 1 to apemans do
45179: LD_ADDR_VAR 0 11
45183: PUSH
45184: DOUBLE
45185: LD_INT 1
45187: DEC
45188: ST_TO_ADDR
45189: LD_VAR 0 3
45193: PUSH
45194: FOR_TO
45195: IFFALSE 45298
// begin hc_class = class_apeman ;
45197: LD_ADDR_OWVAR 28
45201: PUSH
45202: LD_INT 12
45204: ST_TO_ADDR
// hc_gallery =  ;
45205: LD_ADDR_OWVAR 33
45209: PUSH
45210: LD_STRING 
45212: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45213: LD_ADDR_OWVAR 35
45217: PUSH
45218: LD_INT 2
45220: NEG
45221: PPUSH
45222: LD_INT 2
45224: PPUSH
45225: CALL_OW 12
45229: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45230: LD_ADDR_OWVAR 31
45234: PUSH
45235: LD_INT 1
45237: PPUSH
45238: LD_INT 3
45240: PPUSH
45241: CALL_OW 12
45245: PUSH
45246: LD_INT 1
45248: PPUSH
45249: LD_INT 3
45251: PPUSH
45252: CALL_OW 12
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: ST_TO_ADDR
// animal := CreateHuman ;
45269: LD_ADDR_VAR 0 12
45273: PUSH
45274: CALL_OW 44
45278: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45279: LD_VAR 0 12
45283: PPUSH
45284: LD_VAR 0 8
45288: PPUSH
45289: LD_INT 0
45291: PPUSH
45292: CALL 47085 0 3
// end ;
45296: GO 45194
45298: POP
45299: POP
// if enchidnas then
45300: LD_VAR 0 4
45304: IFFALSE 45371
// for i = 1 to enchidnas do
45306: LD_ADDR_VAR 0 11
45310: PUSH
45311: DOUBLE
45312: LD_INT 1
45314: DEC
45315: ST_TO_ADDR
45316: LD_VAR 0 4
45320: PUSH
45321: FOR_TO
45322: IFFALSE 45369
// begin hc_class = 13 ;
45324: LD_ADDR_OWVAR 28
45328: PUSH
45329: LD_INT 13
45331: ST_TO_ADDR
// hc_gallery =  ;
45332: LD_ADDR_OWVAR 33
45336: PUSH
45337: LD_STRING 
45339: ST_TO_ADDR
// animal := CreateHuman ;
45340: LD_ADDR_VAR 0 12
45344: PUSH
45345: CALL_OW 44
45349: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45350: LD_VAR 0 12
45354: PPUSH
45355: LD_VAR 0 8
45359: PPUSH
45360: LD_INT 0
45362: PPUSH
45363: CALL 47085 0 3
// end ;
45367: GO 45321
45369: POP
45370: POP
// if fishes then
45371: LD_VAR 0 7
45375: IFFALSE 45442
// for i = 1 to fishes do
45377: LD_ADDR_VAR 0 11
45381: PUSH
45382: DOUBLE
45383: LD_INT 1
45385: DEC
45386: ST_TO_ADDR
45387: LD_VAR 0 7
45391: PUSH
45392: FOR_TO
45393: IFFALSE 45440
// begin hc_class = 20 ;
45395: LD_ADDR_OWVAR 28
45399: PUSH
45400: LD_INT 20
45402: ST_TO_ADDR
// hc_gallery =  ;
45403: LD_ADDR_OWVAR 33
45407: PUSH
45408: LD_STRING 
45410: ST_TO_ADDR
// animal := CreateHuman ;
45411: LD_ADDR_VAR 0 12
45415: PUSH
45416: CALL_OW 44
45420: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45421: LD_VAR 0 12
45425: PPUSH
45426: LD_VAR 0 9
45430: PPUSH
45431: LD_INT 0
45433: PPUSH
45434: CALL 47085 0 3
// end ;
45438: GO 45392
45440: POP
45441: POP
// end ;
45442: LD_VAR 0 10
45446: RET
// export function WantHeal ( sci , unit ) ; begin
45447: LD_INT 0
45449: PPUSH
// if GetTaskList ( sci ) > 0 then
45450: LD_VAR 0 1
45454: PPUSH
45455: CALL_OW 437
45459: PUSH
45460: LD_INT 0
45462: GREATER
45463: IFFALSE 45535
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45465: LD_VAR 0 1
45469: PPUSH
45470: CALL_OW 437
45474: PUSH
45475: LD_INT 1
45477: ARRAY
45478: PUSH
45479: LD_INT 1
45481: ARRAY
45482: PUSH
45483: LD_STRING l
45485: EQUAL
45486: IFFALSE 45513
45488: PUSH
45489: LD_VAR 0 1
45493: PPUSH
45494: CALL_OW 437
45498: PUSH
45499: LD_INT 1
45501: ARRAY
45502: PUSH
45503: LD_INT 4
45505: ARRAY
45506: PUSH
45507: LD_VAR 0 2
45511: EQUAL
45512: AND
45513: IFFALSE 45525
// result := true else
45515: LD_ADDR_VAR 0 3
45519: PUSH
45520: LD_INT 1
45522: ST_TO_ADDR
45523: GO 45533
// result := false ;
45525: LD_ADDR_VAR 0 3
45529: PUSH
45530: LD_INT 0
45532: ST_TO_ADDR
// end else
45533: GO 45543
// result := false ;
45535: LD_ADDR_VAR 0 3
45539: PUSH
45540: LD_INT 0
45542: ST_TO_ADDR
// end ;
45543: LD_VAR 0 3
45547: RET
// export function HealTarget ( sci ) ; begin
45548: LD_INT 0
45550: PPUSH
// if not sci then
45551: LD_VAR 0 1
45555: NOT
45556: IFFALSE 45560
// exit ;
45558: GO 45625
// result := 0 ;
45560: LD_ADDR_VAR 0 2
45564: PUSH
45565: LD_INT 0
45567: ST_TO_ADDR
// if GetTaskList ( sci ) then
45568: LD_VAR 0 1
45572: PPUSH
45573: CALL_OW 437
45577: IFFALSE 45625
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45579: LD_VAR 0 1
45583: PPUSH
45584: CALL_OW 437
45588: PUSH
45589: LD_INT 1
45591: ARRAY
45592: PUSH
45593: LD_INT 1
45595: ARRAY
45596: PUSH
45597: LD_STRING l
45599: EQUAL
45600: IFFALSE 45625
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45602: LD_ADDR_VAR 0 2
45606: PUSH
45607: LD_VAR 0 1
45611: PPUSH
45612: CALL_OW 437
45616: PUSH
45617: LD_INT 1
45619: ARRAY
45620: PUSH
45621: LD_INT 4
45623: ARRAY
45624: ST_TO_ADDR
// end ;
45625: LD_VAR 0 2
45629: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45630: LD_INT 0
45632: PPUSH
45633: PPUSH
45634: PPUSH
45635: PPUSH
// if not base_units then
45636: LD_VAR 0 1
45640: NOT
45641: IFFALSE 45645
// exit ;
45643: GO 45732
// result := false ;
45645: LD_ADDR_VAR 0 2
45649: PUSH
45650: LD_INT 0
45652: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45653: LD_ADDR_VAR 0 5
45657: PUSH
45658: LD_VAR 0 1
45662: PPUSH
45663: LD_INT 21
45665: PUSH
45666: LD_INT 3
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PPUSH
45673: CALL_OW 72
45677: ST_TO_ADDR
// if not tmp then
45678: LD_VAR 0 5
45682: NOT
45683: IFFALSE 45687
// exit ;
45685: GO 45732
// for i in tmp do
45687: LD_ADDR_VAR 0 3
45691: PUSH
45692: LD_VAR 0 5
45696: PUSH
45697: FOR_IN
45698: IFFALSE 45730
// begin result := EnemyInRange ( i , 22 ) ;
45700: LD_ADDR_VAR 0 2
45704: PUSH
45705: LD_VAR 0 3
45709: PPUSH
45710: LD_INT 22
45712: PPUSH
45713: CALL 43157 0 2
45717: ST_TO_ADDR
// if result then
45718: LD_VAR 0 2
45722: IFFALSE 45728
// exit ;
45724: POP
45725: POP
45726: GO 45732
// end ;
45728: GO 45697
45730: POP
45731: POP
// end ;
45732: LD_VAR 0 2
45736: RET
// export function FilterByTag ( units , tag ) ; begin
45737: LD_INT 0
45739: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45740: LD_ADDR_VAR 0 3
45744: PUSH
45745: LD_VAR 0 1
45749: PPUSH
45750: LD_INT 120
45752: PUSH
45753: LD_VAR 0 2
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PPUSH
45762: CALL_OW 72
45766: ST_TO_ADDR
// end ;
45767: LD_VAR 0 3
45771: RET
// export function IsDriver ( un ) ; begin
45772: LD_INT 0
45774: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45775: LD_ADDR_VAR 0 2
45779: PUSH
45780: LD_VAR 0 1
45784: PUSH
45785: LD_INT 55
45787: PUSH
45788: EMPTY
45789: LIST
45790: PPUSH
45791: CALL_OW 69
45795: IN
45796: ST_TO_ADDR
// end ;
45797: LD_VAR 0 2
45801: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45802: LD_INT 0
45804: PPUSH
45805: PPUSH
// list := [ ] ;
45806: LD_ADDR_VAR 0 5
45810: PUSH
45811: EMPTY
45812: ST_TO_ADDR
// case d of 0 :
45813: LD_VAR 0 3
45817: PUSH
45818: LD_INT 0
45820: DOUBLE
45821: EQUAL
45822: IFTRUE 45826
45824: GO 45959
45826: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45827: LD_ADDR_VAR 0 5
45831: PUSH
45832: LD_VAR 0 1
45836: PUSH
45837: LD_INT 4
45839: MINUS
45840: PUSH
45841: LD_VAR 0 2
45845: PUSH
45846: LD_INT 4
45848: MINUS
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: LIST
45857: PUSH
45858: LD_VAR 0 1
45862: PUSH
45863: LD_INT 3
45865: MINUS
45866: PUSH
45867: LD_VAR 0 2
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: LIST
45879: PUSH
45880: LD_VAR 0 1
45884: PUSH
45885: LD_INT 4
45887: PLUS
45888: PUSH
45889: LD_VAR 0 2
45893: PUSH
45894: LD_INT 4
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: LIST
45901: PUSH
45902: LD_VAR 0 1
45906: PUSH
45907: LD_INT 3
45909: PLUS
45910: PUSH
45911: LD_VAR 0 2
45915: PUSH
45916: LD_INT 3
45918: PLUS
45919: PUSH
45920: LD_INT 5
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: LIST
45927: PUSH
45928: LD_VAR 0 1
45932: PUSH
45933: LD_VAR 0 2
45937: PUSH
45938: LD_INT 4
45940: PLUS
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: LIST
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: ST_TO_ADDR
// end ; 1 :
45957: GO 46657
45959: LD_INT 1
45961: DOUBLE
45962: EQUAL
45963: IFTRUE 45967
45965: GO 46100
45967: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45968: LD_ADDR_VAR 0 5
45972: PUSH
45973: LD_VAR 0 1
45977: PUSH
45978: LD_VAR 0 2
45982: PUSH
45983: LD_INT 4
45985: MINUS
45986: PUSH
45987: LD_INT 3
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: LIST
45994: PUSH
45995: LD_VAR 0 1
45999: PUSH
46000: LD_INT 3
46002: MINUS
46003: PUSH
46004: LD_VAR 0 2
46008: PUSH
46009: LD_INT 3
46011: MINUS
46012: PUSH
46013: LD_INT 2
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: LIST
46020: PUSH
46021: LD_VAR 0 1
46025: PUSH
46026: LD_INT 4
46028: MINUS
46029: PUSH
46030: LD_VAR 0 2
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: LIST
46042: PUSH
46043: LD_VAR 0 1
46047: PUSH
46048: LD_VAR 0 2
46052: PUSH
46053: LD_INT 3
46055: PLUS
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: LIST
46064: PUSH
46065: LD_VAR 0 1
46069: PUSH
46070: LD_INT 4
46072: PLUS
46073: PUSH
46074: LD_VAR 0 2
46078: PUSH
46079: LD_INT 4
46081: PLUS
46082: PUSH
46083: LD_INT 5
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: LIST
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: ST_TO_ADDR
// end ; 2 :
46098: GO 46657
46100: LD_INT 2
46102: DOUBLE
46103: EQUAL
46104: IFTRUE 46108
46106: GO 46237
46108: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46109: LD_ADDR_VAR 0 5
46113: PUSH
46114: LD_VAR 0 1
46118: PUSH
46119: LD_VAR 0 2
46123: PUSH
46124: LD_INT 3
46126: MINUS
46127: PUSH
46128: LD_INT 3
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: LIST
46135: PUSH
46136: LD_VAR 0 1
46140: PUSH
46141: LD_INT 4
46143: PLUS
46144: PUSH
46145: LD_VAR 0 2
46149: PUSH
46150: LD_INT 4
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: LIST
46157: PUSH
46158: LD_VAR 0 1
46162: PUSH
46163: LD_VAR 0 2
46167: PUSH
46168: LD_INT 4
46170: PLUS
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: LIST
46179: PUSH
46180: LD_VAR 0 1
46184: PUSH
46185: LD_INT 3
46187: MINUS
46188: PUSH
46189: LD_VAR 0 2
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: LIST
46201: PUSH
46202: LD_VAR 0 1
46206: PUSH
46207: LD_INT 4
46209: MINUS
46210: PUSH
46211: LD_VAR 0 2
46215: PUSH
46216: LD_INT 4
46218: MINUS
46219: PUSH
46220: LD_INT 2
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: LIST
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: ST_TO_ADDR
// end ; 3 :
46235: GO 46657
46237: LD_INT 3
46239: DOUBLE
46240: EQUAL
46241: IFTRUE 46245
46243: GO 46378
46245: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46246: LD_ADDR_VAR 0 5
46250: PUSH
46251: LD_VAR 0 1
46255: PUSH
46256: LD_INT 3
46258: PLUS
46259: PUSH
46260: LD_VAR 0 2
46264: PUSH
46265: LD_INT 4
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: LIST
46272: PUSH
46273: LD_VAR 0 1
46277: PUSH
46278: LD_INT 4
46280: PLUS
46281: PUSH
46282: LD_VAR 0 2
46286: PUSH
46287: LD_INT 4
46289: PLUS
46290: PUSH
46291: LD_INT 5
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: LIST
46298: PUSH
46299: LD_VAR 0 1
46303: PUSH
46304: LD_INT 4
46306: MINUS
46307: PUSH
46308: LD_VAR 0 2
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: LIST
46320: PUSH
46321: LD_VAR 0 1
46325: PUSH
46326: LD_VAR 0 2
46330: PUSH
46331: LD_INT 4
46333: MINUS
46334: PUSH
46335: LD_INT 3
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: LIST
46342: PUSH
46343: LD_VAR 0 1
46347: PUSH
46348: LD_INT 3
46350: MINUS
46351: PUSH
46352: LD_VAR 0 2
46356: PUSH
46357: LD_INT 3
46359: MINUS
46360: PUSH
46361: LD_INT 2
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: LIST
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: ST_TO_ADDR
// end ; 4 :
46376: GO 46657
46378: LD_INT 4
46380: DOUBLE
46381: EQUAL
46382: IFTRUE 46386
46384: GO 46519
46386: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46387: LD_ADDR_VAR 0 5
46391: PUSH
46392: LD_VAR 0 1
46396: PUSH
46397: LD_VAR 0 2
46401: PUSH
46402: LD_INT 4
46404: PLUS
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: LIST
46413: PUSH
46414: LD_VAR 0 1
46418: PUSH
46419: LD_INT 3
46421: PLUS
46422: PUSH
46423: LD_VAR 0 2
46427: PUSH
46428: LD_INT 3
46430: PLUS
46431: PUSH
46432: LD_INT 5
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: LIST
46439: PUSH
46440: LD_VAR 0 1
46444: PUSH
46445: LD_INT 4
46447: PLUS
46448: PUSH
46449: LD_VAR 0 2
46453: PUSH
46454: LD_INT 4
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: LIST
46461: PUSH
46462: LD_VAR 0 1
46466: PUSH
46467: LD_VAR 0 2
46471: PUSH
46472: LD_INT 3
46474: MINUS
46475: PUSH
46476: LD_INT 3
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: LIST
46483: PUSH
46484: LD_VAR 0 1
46488: PUSH
46489: LD_INT 4
46491: MINUS
46492: PUSH
46493: LD_VAR 0 2
46497: PUSH
46498: LD_INT 4
46500: MINUS
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: LIST
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: ST_TO_ADDR
// end ; 5 :
46517: GO 46657
46519: LD_INT 5
46521: DOUBLE
46522: EQUAL
46523: IFTRUE 46527
46525: GO 46656
46527: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46528: LD_ADDR_VAR 0 5
46532: PUSH
46533: LD_VAR 0 1
46537: PUSH
46538: LD_INT 4
46540: MINUS
46541: PUSH
46542: LD_VAR 0 2
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: LIST
46554: PUSH
46555: LD_VAR 0 1
46559: PUSH
46560: LD_VAR 0 2
46564: PUSH
46565: LD_INT 4
46567: MINUS
46568: PUSH
46569: LD_INT 3
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: LIST
46576: PUSH
46577: LD_VAR 0 1
46581: PUSH
46582: LD_INT 4
46584: PLUS
46585: PUSH
46586: LD_VAR 0 2
46590: PUSH
46591: LD_INT 4
46593: PLUS
46594: PUSH
46595: LD_INT 5
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: LIST
46602: PUSH
46603: LD_VAR 0 1
46607: PUSH
46608: LD_INT 3
46610: PLUS
46611: PUSH
46612: LD_VAR 0 2
46616: PUSH
46617: LD_INT 4
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: LIST
46624: PUSH
46625: LD_VAR 0 1
46629: PUSH
46630: LD_VAR 0 2
46634: PUSH
46635: LD_INT 3
46637: PLUS
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: LIST
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: ST_TO_ADDR
// end ; end ;
46654: GO 46657
46656: POP
// result := list ;
46657: LD_ADDR_VAR 0 4
46661: PUSH
46662: LD_VAR 0 5
46666: ST_TO_ADDR
// end ;
46667: LD_VAR 0 4
46671: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46672: LD_INT 0
46674: PPUSH
46675: PPUSH
46676: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46677: LD_VAR 0 1
46681: NOT
46682: IFTRUE 46710
46684: PUSH
46685: LD_VAR 0 2
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: LD_INT 3
46698: PUSH
46699: LD_INT 4
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: IN
46708: NOT
46709: OR
46710: IFFALSE 46714
// exit ;
46712: GO 46797
// tmp := [ ] ;
46714: LD_ADDR_VAR 0 5
46718: PUSH
46719: EMPTY
46720: ST_TO_ADDR
// for i in units do
46721: LD_ADDR_VAR 0 4
46725: PUSH
46726: LD_VAR 0 1
46730: PUSH
46731: FOR_IN
46732: IFFALSE 46766
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46734: LD_ADDR_VAR 0 5
46738: PUSH
46739: LD_VAR 0 5
46743: PPUSH
46744: LD_VAR 0 4
46748: PPUSH
46749: LD_VAR 0 2
46753: PPUSH
46754: CALL_OW 259
46758: PPUSH
46759: CALL 48192 0 2
46763: ST_TO_ADDR
46764: GO 46731
46766: POP
46767: POP
// if not tmp then
46768: LD_VAR 0 5
46772: NOT
46773: IFFALSE 46777
// exit ;
46775: GO 46797
// result := SortListByListDesc ( units , tmp ) ;
46777: LD_ADDR_VAR 0 3
46781: PUSH
46782: LD_VAR 0 1
46786: PPUSH
46787: LD_VAR 0 5
46791: PPUSH
46792: CALL_OW 77
46796: ST_TO_ADDR
// end ;
46797: LD_VAR 0 3
46801: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46802: LD_INT 0
46804: PPUSH
46805: PPUSH
46806: PPUSH
// result := false ;
46807: LD_ADDR_VAR 0 3
46811: PUSH
46812: LD_INT 0
46814: ST_TO_ADDR
// if not building then
46815: LD_VAR 0 2
46819: NOT
46820: IFFALSE 46824
// exit ;
46822: GO 46968
// x := GetX ( building ) ;
46824: LD_ADDR_VAR 0 4
46828: PUSH
46829: LD_VAR 0 2
46833: PPUSH
46834: CALL_OW 250
46838: ST_TO_ADDR
// y := GetY ( building ) ;
46839: LD_ADDR_VAR 0 5
46843: PUSH
46844: LD_VAR 0 2
46848: PPUSH
46849: CALL_OW 251
46853: ST_TO_ADDR
// if not x or not y then
46854: LD_VAR 0 4
46858: NOT
46859: IFTRUE 46868
46861: PUSH
46862: LD_VAR 0 5
46866: NOT
46867: OR
46868: IFFALSE 46872
// exit ;
46870: GO 46968
// if GetTaskList ( unit ) then
46872: LD_VAR 0 1
46876: PPUSH
46877: CALL_OW 437
46881: IFFALSE 46968
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46883: LD_STRING e
46885: PUSH
46886: LD_VAR 0 1
46890: PPUSH
46891: CALL_OW 437
46895: PUSH
46896: LD_INT 1
46898: ARRAY
46899: PUSH
46900: LD_INT 1
46902: ARRAY
46903: EQUAL
46904: IFFALSE 46931
46906: PUSH
46907: LD_VAR 0 4
46911: PUSH
46912: LD_VAR 0 1
46916: PPUSH
46917: CALL_OW 437
46921: PUSH
46922: LD_INT 1
46924: ARRAY
46925: PUSH
46926: LD_INT 2
46928: ARRAY
46929: EQUAL
46930: AND
46931: IFFALSE 46958
46933: PUSH
46934: LD_VAR 0 5
46938: PUSH
46939: LD_VAR 0 1
46943: PPUSH
46944: CALL_OW 437
46948: PUSH
46949: LD_INT 1
46951: ARRAY
46952: PUSH
46953: LD_INT 3
46955: ARRAY
46956: EQUAL
46957: AND
46958: IFFALSE 46968
// result := true end ;
46960: LD_ADDR_VAR 0 3
46964: PUSH
46965: LD_INT 1
46967: ST_TO_ADDR
// end ;
46968: LD_VAR 0 3
46972: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46973: LD_INT 0
46975: PPUSH
// result := false ;
46976: LD_ADDR_VAR 0 4
46980: PUSH
46981: LD_INT 0
46983: ST_TO_ADDR
// if GetTaskList ( unit ) then
46984: LD_VAR 0 1
46988: PPUSH
46989: CALL_OW 437
46993: IFFALSE 47080
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46995: LD_STRING M
46997: PUSH
46998: LD_VAR 0 1
47002: PPUSH
47003: CALL_OW 437
47007: PUSH
47008: LD_INT 1
47010: ARRAY
47011: PUSH
47012: LD_INT 1
47014: ARRAY
47015: EQUAL
47016: IFFALSE 47043
47018: PUSH
47019: LD_VAR 0 2
47023: PUSH
47024: LD_VAR 0 1
47028: PPUSH
47029: CALL_OW 437
47033: PUSH
47034: LD_INT 1
47036: ARRAY
47037: PUSH
47038: LD_INT 2
47040: ARRAY
47041: EQUAL
47042: AND
47043: IFFALSE 47070
47045: PUSH
47046: LD_VAR 0 3
47050: PUSH
47051: LD_VAR 0 1
47055: PPUSH
47056: CALL_OW 437
47060: PUSH
47061: LD_INT 1
47063: ARRAY
47064: PUSH
47065: LD_INT 3
47067: ARRAY
47068: EQUAL
47069: AND
47070: IFFALSE 47080
// result := true ;
47072: LD_ADDR_VAR 0 4
47076: PUSH
47077: LD_INT 1
47079: ST_TO_ADDR
// end ; end ;
47080: LD_VAR 0 4
47084: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47085: LD_INT 0
47087: PPUSH
47088: PPUSH
47089: PPUSH
47090: PPUSH
// if not unit or not area then
47091: LD_VAR 0 1
47095: NOT
47096: IFTRUE 47105
47098: PUSH
47099: LD_VAR 0 2
47103: NOT
47104: OR
47105: IFFALSE 47109
// exit ;
47107: GO 47285
// tmp := AreaToList ( area , i ) ;
47109: LD_ADDR_VAR 0 6
47113: PUSH
47114: LD_VAR 0 2
47118: PPUSH
47119: LD_VAR 0 5
47123: PPUSH
47124: CALL_OW 517
47128: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47129: LD_ADDR_VAR 0 5
47133: PUSH
47134: DOUBLE
47135: LD_INT 1
47137: DEC
47138: ST_TO_ADDR
47139: LD_VAR 0 6
47143: PUSH
47144: LD_INT 1
47146: ARRAY
47147: PUSH
47148: FOR_TO
47149: IFFALSE 47283
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47151: LD_ADDR_VAR 0 7
47155: PUSH
47156: LD_VAR 0 6
47160: PUSH
47161: LD_INT 1
47163: ARRAY
47164: PUSH
47165: LD_VAR 0 5
47169: ARRAY
47170: PUSH
47171: LD_VAR 0 6
47175: PUSH
47176: LD_INT 2
47178: ARRAY
47179: PUSH
47180: LD_VAR 0 5
47184: ARRAY
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47190: LD_INT 92
47192: PUSH
47193: LD_VAR 0 7
47197: PUSH
47198: LD_INT 1
47200: ARRAY
47201: PUSH
47202: LD_VAR 0 7
47206: PUSH
47207: LD_INT 2
47209: ARRAY
47210: PUSH
47211: LD_INT 2
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: PPUSH
47220: CALL_OW 69
47224: PUSH
47225: LD_INT 0
47227: EQUAL
47228: IFFALSE 47281
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47230: LD_VAR 0 1
47234: PPUSH
47235: LD_VAR 0 7
47239: PUSH
47240: LD_INT 1
47242: ARRAY
47243: PPUSH
47244: LD_VAR 0 7
47248: PUSH
47249: LD_INT 2
47251: ARRAY
47252: PPUSH
47253: LD_VAR 0 3
47257: PPUSH
47258: CALL_OW 48
// result := IsPlaced ( unit ) ;
47262: LD_ADDR_VAR 0 4
47266: PUSH
47267: LD_VAR 0 1
47271: PPUSH
47272: CALL_OW 305
47276: ST_TO_ADDR
// exit ;
47277: POP
47278: POP
47279: GO 47285
// end ; end ;
47281: GO 47148
47283: POP
47284: POP
// end ;
47285: LD_VAR 0 4
47289: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47290: LD_INT 0
47292: PPUSH
47293: PPUSH
47294: PPUSH
// if not side or side > 8 then
47295: LD_VAR 0 1
47299: NOT
47300: IFTRUE 47312
47302: PUSH
47303: LD_VAR 0 1
47307: PUSH
47308: LD_INT 8
47310: GREATER
47311: OR
47312: IFFALSE 47316
// exit ;
47314: GO 47503
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47316: LD_ADDR_VAR 0 4
47320: PUSH
47321: LD_INT 22
47323: PUSH
47324: LD_VAR 0 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 21
47335: PUSH
47336: LD_INT 3
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PPUSH
47347: CALL_OW 69
47351: ST_TO_ADDR
// if not tmp then
47352: LD_VAR 0 4
47356: NOT
47357: IFFALSE 47361
// exit ;
47359: GO 47503
// enable_addtolog := true ;
47361: LD_ADDR_OWVAR 81
47365: PUSH
47366: LD_INT 1
47368: ST_TO_ADDR
// AddToLog ( [ ) ;
47369: LD_STRING [
47371: PPUSH
47372: CALL_OW 561
// for i in tmp do
47376: LD_ADDR_VAR 0 3
47380: PUSH
47381: LD_VAR 0 4
47385: PUSH
47386: FOR_IN
47387: IFFALSE 47494
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47389: LD_STRING [
47391: PUSH
47392: LD_VAR 0 3
47396: PPUSH
47397: CALL_OW 266
47401: STR
47402: PUSH
47403: LD_STRING , 
47405: STR
47406: PUSH
47407: LD_VAR 0 3
47411: PPUSH
47412: CALL_OW 250
47416: STR
47417: PUSH
47418: LD_STRING , 
47420: STR
47421: PUSH
47422: LD_VAR 0 3
47426: PPUSH
47427: CALL_OW 251
47431: STR
47432: PUSH
47433: LD_STRING , 
47435: STR
47436: PUSH
47437: LD_VAR 0 3
47441: PPUSH
47442: CALL_OW 254
47446: STR
47447: PUSH
47448: LD_STRING , 
47450: STR
47451: PUSH
47452: LD_VAR 0 3
47456: PPUSH
47457: LD_INT 1
47459: PPUSH
47460: CALL_OW 268
47464: STR
47465: PUSH
47466: LD_STRING , 
47468: STR
47469: PUSH
47470: LD_VAR 0 3
47474: PPUSH
47475: LD_INT 2
47477: PPUSH
47478: CALL_OW 268
47482: STR
47483: PUSH
47484: LD_STRING ],
47486: STR
47487: PPUSH
47488: CALL_OW 561
// end ;
47492: GO 47386
47494: POP
47495: POP
// AddToLog ( ]; ) ;
47496: LD_STRING ];
47498: PPUSH
47499: CALL_OW 561
// end ;
47503: LD_VAR 0 2
47507: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47508: LD_INT 0
47510: PPUSH
47511: PPUSH
47512: PPUSH
47513: PPUSH
47514: PPUSH
// if not area or not rate or not max then
47515: LD_VAR 0 1
47519: NOT
47520: IFTRUE 47529
47522: PUSH
47523: LD_VAR 0 2
47527: NOT
47528: OR
47529: IFTRUE 47538
47531: PUSH
47532: LD_VAR 0 4
47536: NOT
47537: OR
47538: IFFALSE 47542
// exit ;
47540: GO 47731
// while 1 do
47542: LD_INT 1
47544: IFFALSE 47731
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47546: LD_ADDR_VAR 0 9
47550: PUSH
47551: LD_VAR 0 1
47555: PPUSH
47556: LD_INT 1
47558: PPUSH
47559: CALL_OW 287
47563: PUSH
47564: LD_INT 10
47566: MUL
47567: ST_TO_ADDR
// r := rate / 10 ;
47568: LD_ADDR_VAR 0 7
47572: PUSH
47573: LD_VAR 0 2
47577: PUSH
47578: LD_INT 10
47580: DIVREAL
47581: ST_TO_ADDR
// time := 1 1$00 ;
47582: LD_ADDR_VAR 0 8
47586: PUSH
47587: LD_INT 2100
47589: ST_TO_ADDR
// if amount < min then
47590: LD_VAR 0 9
47594: PUSH
47595: LD_VAR 0 3
47599: LESS
47600: IFFALSE 47618
// r := r * 2 else
47602: LD_ADDR_VAR 0 7
47606: PUSH
47607: LD_VAR 0 7
47611: PUSH
47612: LD_INT 2
47614: MUL
47615: ST_TO_ADDR
47616: GO 47644
// if amount > max then
47618: LD_VAR 0 9
47622: PUSH
47623: LD_VAR 0 4
47627: GREATER
47628: IFFALSE 47644
// r := r / 2 ;
47630: LD_ADDR_VAR 0 7
47634: PUSH
47635: LD_VAR 0 7
47639: PUSH
47640: LD_INT 2
47642: DIVREAL
47643: ST_TO_ADDR
// time := time / r ;
47644: LD_ADDR_VAR 0 8
47648: PUSH
47649: LD_VAR 0 8
47653: PUSH
47654: LD_VAR 0 7
47658: DIVREAL
47659: ST_TO_ADDR
// if time < 0 then
47660: LD_VAR 0 8
47664: PUSH
47665: LD_INT 0
47667: LESS
47668: IFFALSE 47685
// time := time * - 1 ;
47670: LD_ADDR_VAR 0 8
47674: PUSH
47675: LD_VAR 0 8
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: MUL
47684: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47685: LD_VAR 0 8
47689: PUSH
47690: LD_INT 35
47692: PPUSH
47693: LD_INT 875
47695: PPUSH
47696: CALL_OW 12
47700: PLUS
47701: PPUSH
47702: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47706: LD_INT 1
47708: PPUSH
47709: LD_INT 5
47711: PPUSH
47712: CALL_OW 12
47716: PPUSH
47717: LD_VAR 0 1
47721: PPUSH
47722: LD_INT 1
47724: PPUSH
47725: CALL_OW 55
// end ;
47729: GO 47542
// end ;
47731: LD_VAR 0 5
47735: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47736: LD_INT 0
47738: PPUSH
47739: PPUSH
47740: PPUSH
47741: PPUSH
47742: PPUSH
47743: PPUSH
47744: PPUSH
47745: PPUSH
// if not turrets or not factories then
47746: LD_VAR 0 1
47750: NOT
47751: IFTRUE 47760
47753: PUSH
47754: LD_VAR 0 2
47758: NOT
47759: OR
47760: IFFALSE 47764
// exit ;
47762: GO 48071
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47764: LD_ADDR_VAR 0 10
47768: PUSH
47769: LD_INT 5
47771: PUSH
47772: LD_INT 6
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: LD_INT 4
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 3
47791: PUSH
47792: LD_INT 5
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 24
47806: PUSH
47807: LD_INT 25
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 23
47816: PUSH
47817: LD_INT 27
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 42
47830: PUSH
47831: LD_INT 43
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 44
47840: PUSH
47841: LD_INT 46
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 45
47850: PUSH
47851: LD_INT 47
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: LIST
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: LIST
47867: ST_TO_ADDR
// result := [ ] ;
47868: LD_ADDR_VAR 0 3
47872: PUSH
47873: EMPTY
47874: ST_TO_ADDR
// for i in turrets do
47875: LD_ADDR_VAR 0 4
47879: PUSH
47880: LD_VAR 0 1
47884: PUSH
47885: FOR_IN
47886: IFFALSE 48069
// begin nat := GetNation ( i ) ;
47888: LD_ADDR_VAR 0 7
47892: PUSH
47893: LD_VAR 0 4
47897: PPUSH
47898: CALL_OW 248
47902: ST_TO_ADDR
// weapon := 0 ;
47903: LD_ADDR_VAR 0 8
47907: PUSH
47908: LD_INT 0
47910: ST_TO_ADDR
// if not nat then
47911: LD_VAR 0 7
47915: NOT
47916: IFFALSE 47920
// continue ;
47918: GO 47885
// for j in list [ nat ] do
47920: LD_ADDR_VAR 0 5
47924: PUSH
47925: LD_VAR 0 10
47929: PUSH
47930: LD_VAR 0 7
47934: ARRAY
47935: PUSH
47936: FOR_IN
47937: IFFALSE 47978
// if GetBWeapon ( i ) = j [ 1 ] then
47939: LD_VAR 0 4
47943: PPUSH
47944: CALL_OW 269
47948: PUSH
47949: LD_VAR 0 5
47953: PUSH
47954: LD_INT 1
47956: ARRAY
47957: EQUAL
47958: IFFALSE 47976
// begin weapon := j [ 2 ] ;
47960: LD_ADDR_VAR 0 8
47964: PUSH
47965: LD_VAR 0 5
47969: PUSH
47970: LD_INT 2
47972: ARRAY
47973: ST_TO_ADDR
// break ;
47974: GO 47978
// end ;
47976: GO 47936
47978: POP
47979: POP
// if not weapon then
47980: LD_VAR 0 8
47984: NOT
47985: IFFALSE 47989
// continue ;
47987: GO 47885
// for k in factories do
47989: LD_ADDR_VAR 0 6
47993: PUSH
47994: LD_VAR 0 2
47998: PUSH
47999: FOR_IN
48000: IFFALSE 48065
// begin weapons := AvailableWeaponList ( k ) ;
48002: LD_ADDR_VAR 0 9
48006: PUSH
48007: LD_VAR 0 6
48011: PPUSH
48012: CALL_OW 478
48016: ST_TO_ADDR
// if not weapons then
48017: LD_VAR 0 9
48021: NOT
48022: IFFALSE 48026
// continue ;
48024: GO 47999
// if weapon in weapons then
48026: LD_VAR 0 8
48030: PUSH
48031: LD_VAR 0 9
48035: IN
48036: IFFALSE 48063
// begin result := [ i , weapon ] ;
48038: LD_ADDR_VAR 0 3
48042: PUSH
48043: LD_VAR 0 4
48047: PUSH
48048: LD_VAR 0 8
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: ST_TO_ADDR
// exit ;
48057: POP
48058: POP
48059: POP
48060: POP
48061: GO 48071
// end ; end ;
48063: GO 47999
48065: POP
48066: POP
// end ;
48067: GO 47885
48069: POP
48070: POP
// end ;
48071: LD_VAR 0 3
48075: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48076: LD_INT 0
48078: PPUSH
// if not side or side > 8 then
48079: LD_VAR 0 3
48083: NOT
48084: IFTRUE 48096
48086: PUSH
48087: LD_VAR 0 3
48091: PUSH
48092: LD_INT 8
48094: GREATER
48095: OR
48096: IFFALSE 48100
// exit ;
48098: GO 48159
// if not range then
48100: LD_VAR 0 4
48104: NOT
48105: IFFALSE 48116
// range := - 12 ;
48107: LD_ADDR_VAR 0 4
48111: PUSH
48112: LD_INT 12
48114: NEG
48115: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48116: LD_VAR 0 1
48120: PPUSH
48121: LD_VAR 0 2
48125: PPUSH
48126: LD_VAR 0 3
48130: PPUSH
48131: LD_VAR 0 4
48135: PPUSH
48136: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48140: LD_VAR 0 1
48144: PPUSH
48145: LD_VAR 0 2
48149: PPUSH
48150: LD_VAR 0 3
48154: PPUSH
48155: CALL_OW 331
// end ;
48159: LD_VAR 0 5
48163: RET
// export function Video ( mode ) ; begin
48164: LD_INT 0
48166: PPUSH
// ingame_video = mode ;
48167: LD_ADDR_OWVAR 52
48171: PUSH
48172: LD_VAR 0 1
48176: ST_TO_ADDR
// interface_hidden = mode ;
48177: LD_ADDR_OWVAR 54
48181: PUSH
48182: LD_VAR 0 1
48186: ST_TO_ADDR
// end ;
48187: LD_VAR 0 2
48191: RET
// export function Join ( array , element ) ; begin
48192: LD_INT 0
48194: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48195: LD_ADDR_VAR 0 3
48199: PUSH
48200: LD_VAR 0 1
48204: PPUSH
48205: LD_VAR 0 1
48209: PUSH
48210: LD_INT 1
48212: PLUS
48213: PPUSH
48214: LD_VAR 0 2
48218: PPUSH
48219: CALL_OW 1
48223: ST_TO_ADDR
// end ;
48224: LD_VAR 0 3
48228: RET
// export function JoinUnion ( array , element ) ; begin
48229: LD_INT 0
48231: PPUSH
// result := array union element ;
48232: LD_ADDR_VAR 0 3
48236: PUSH
48237: LD_VAR 0 1
48241: PUSH
48242: LD_VAR 0 2
48246: UNION
48247: ST_TO_ADDR
// end ;
48248: LD_VAR 0 3
48252: RET
// export function GetBehemoths ( side ) ; begin
48253: LD_INT 0
48255: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48256: LD_ADDR_VAR 0 2
48260: PUSH
48261: LD_INT 22
48263: PUSH
48264: LD_VAR 0 1
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 31
48275: PUSH
48276: LD_INT 25
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PPUSH
48287: CALL_OW 69
48291: ST_TO_ADDR
// end ;
48292: LD_VAR 0 2
48296: RET
// export function Shuffle ( array ) ; var i , index ; begin
48297: LD_INT 0
48299: PPUSH
48300: PPUSH
48301: PPUSH
// result := [ ] ;
48302: LD_ADDR_VAR 0 2
48306: PUSH
48307: EMPTY
48308: ST_TO_ADDR
// if not array then
48309: LD_VAR 0 1
48313: NOT
48314: IFFALSE 48318
// exit ;
48316: GO 48417
// Randomize ;
48318: CALL_OW 10
// for i = array downto 1 do
48322: LD_ADDR_VAR 0 3
48326: PUSH
48327: DOUBLE
48328: LD_VAR 0 1
48332: INC
48333: ST_TO_ADDR
48334: LD_INT 1
48336: PUSH
48337: FOR_DOWNTO
48338: IFFALSE 48415
// begin index := rand ( 1 , array ) ;
48340: LD_ADDR_VAR 0 4
48344: PUSH
48345: LD_INT 1
48347: PPUSH
48348: LD_VAR 0 1
48352: PPUSH
48353: CALL_OW 12
48357: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48358: LD_ADDR_VAR 0 2
48362: PUSH
48363: LD_VAR 0 2
48367: PPUSH
48368: LD_VAR 0 2
48372: PUSH
48373: LD_INT 1
48375: PLUS
48376: PPUSH
48377: LD_VAR 0 1
48381: PUSH
48382: LD_VAR 0 4
48386: ARRAY
48387: PPUSH
48388: CALL_OW 2
48392: ST_TO_ADDR
// array := Delete ( array , index ) ;
48393: LD_ADDR_VAR 0 1
48397: PUSH
48398: LD_VAR 0 1
48402: PPUSH
48403: LD_VAR 0 4
48407: PPUSH
48408: CALL_OW 3
48412: ST_TO_ADDR
// end ;
48413: GO 48337
48415: POP
48416: POP
// end ;
48417: LD_VAR 0 2
48421: RET
// export function GetBaseMaterials ( base ) ; begin
48422: LD_INT 0
48424: PPUSH
// result := [ 0 , 0 , 0 ] ;
48425: LD_ADDR_VAR 0 2
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: LIST
48443: ST_TO_ADDR
// if not base then
48444: LD_VAR 0 1
48448: NOT
48449: IFFALSE 48453
// exit ;
48451: GO 48502
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48453: LD_ADDR_VAR 0 2
48457: PUSH
48458: LD_VAR 0 1
48462: PPUSH
48463: LD_INT 1
48465: PPUSH
48466: CALL_OW 275
48470: PUSH
48471: LD_VAR 0 1
48475: PPUSH
48476: LD_INT 2
48478: PPUSH
48479: CALL_OW 275
48483: PUSH
48484: LD_VAR 0 1
48488: PPUSH
48489: LD_INT 3
48491: PPUSH
48492: CALL_OW 275
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: LIST
48501: ST_TO_ADDR
// end ;
48502: LD_VAR 0 2
48506: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48507: LD_INT 0
48509: PPUSH
48510: PPUSH
// result := array ;
48511: LD_ADDR_VAR 0 3
48515: PUSH
48516: LD_VAR 0 1
48520: ST_TO_ADDR
// if size >= result then
48521: LD_VAR 0 2
48525: PUSH
48526: LD_VAR 0 3
48530: GREATEREQUAL
48531: IFFALSE 48535
// exit ;
48533: GO 48585
// if size then
48535: LD_VAR 0 2
48539: IFFALSE 48585
// for i := array downto size do
48541: LD_ADDR_VAR 0 4
48545: PUSH
48546: DOUBLE
48547: LD_VAR 0 1
48551: INC
48552: ST_TO_ADDR
48553: LD_VAR 0 2
48557: PUSH
48558: FOR_DOWNTO
48559: IFFALSE 48583
// result := Delete ( result , result ) ;
48561: LD_ADDR_VAR 0 3
48565: PUSH
48566: LD_VAR 0 3
48570: PPUSH
48571: LD_VAR 0 3
48575: PPUSH
48576: CALL_OW 3
48580: ST_TO_ADDR
48581: GO 48558
48583: POP
48584: POP
// end ;
48585: LD_VAR 0 3
48589: RET
// export function ComExit ( unit ) ; var tmp ; begin
48590: LD_INT 0
48592: PPUSH
48593: PPUSH
// if not IsInUnit ( unit ) then
48594: LD_VAR 0 1
48598: PPUSH
48599: CALL_OW 310
48603: NOT
48604: IFFALSE 48608
// exit ;
48606: GO 48668
// tmp := IsInUnit ( unit ) ;
48608: LD_ADDR_VAR 0 3
48612: PUSH
48613: LD_VAR 0 1
48617: PPUSH
48618: CALL_OW 310
48622: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48623: LD_VAR 0 3
48627: PPUSH
48628: CALL_OW 247
48632: PUSH
48633: LD_INT 2
48635: EQUAL
48636: IFFALSE 48649
// ComExitVehicle ( unit ) else
48638: LD_VAR 0 1
48642: PPUSH
48643: CALL_OW 121
48647: GO 48658
// ComExitBuilding ( unit ) ;
48649: LD_VAR 0 1
48653: PPUSH
48654: CALL_OW 122
// result := tmp ;
48658: LD_ADDR_VAR 0 2
48662: PUSH
48663: LD_VAR 0 3
48667: ST_TO_ADDR
// end ;
48668: LD_VAR 0 2
48672: RET
// export function ComExitAll ( units ) ; var i ; begin
48673: LD_INT 0
48675: PPUSH
48676: PPUSH
// if not units then
48677: LD_VAR 0 1
48681: NOT
48682: IFFALSE 48686
// exit ;
48684: GO 48712
// for i in units do
48686: LD_ADDR_VAR 0 3
48690: PUSH
48691: LD_VAR 0 1
48695: PUSH
48696: FOR_IN
48697: IFFALSE 48710
// ComExit ( i ) ;
48699: LD_VAR 0 3
48703: PPUSH
48704: CALL 48590 0 1
48708: GO 48696
48710: POP
48711: POP
// end ;
48712: LD_VAR 0 2
48716: RET
// export function ResetHc ; begin
48717: LD_INT 0
48719: PPUSH
// InitHc ;
48720: CALL_OW 19
// hc_importance := 0 ;
48724: LD_ADDR_OWVAR 32
48728: PUSH
48729: LD_INT 0
48731: ST_TO_ADDR
// end ;
48732: LD_VAR 0 1
48736: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48737: LD_INT 0
48739: PPUSH
48740: PPUSH
48741: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48742: LD_ADDR_VAR 0 6
48746: PUSH
48747: LD_VAR 0 1
48751: PUSH
48752: LD_VAR 0 3
48756: PLUS
48757: PUSH
48758: LD_INT 2
48760: DIV
48761: ST_TO_ADDR
// if _x < 0 then
48762: LD_VAR 0 6
48766: PUSH
48767: LD_INT 0
48769: LESS
48770: IFFALSE 48787
// _x := _x * - 1 ;
48772: LD_ADDR_VAR 0 6
48776: PUSH
48777: LD_VAR 0 6
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: MUL
48786: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48787: LD_ADDR_VAR 0 7
48791: PUSH
48792: LD_VAR 0 2
48796: PUSH
48797: LD_VAR 0 4
48801: PLUS
48802: PUSH
48803: LD_INT 2
48805: DIV
48806: ST_TO_ADDR
// if _y < 0 then
48807: LD_VAR 0 7
48811: PUSH
48812: LD_INT 0
48814: LESS
48815: IFFALSE 48832
// _y := _y * - 1 ;
48817: LD_ADDR_VAR 0 7
48821: PUSH
48822: LD_VAR 0 7
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: MUL
48831: ST_TO_ADDR
// result := [ _x , _y ] ;
48832: LD_ADDR_VAR 0 5
48836: PUSH
48837: LD_VAR 0 6
48841: PUSH
48842: LD_VAR 0 7
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: ST_TO_ADDR
// end ;
48851: LD_VAR 0 5
48855: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48856: LD_INT 0
48858: PPUSH
48859: PPUSH
48860: PPUSH
48861: PPUSH
// task := GetTaskList ( unit ) ;
48862: LD_ADDR_VAR 0 7
48866: PUSH
48867: LD_VAR 0 1
48871: PPUSH
48872: CALL_OW 437
48876: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48877: LD_VAR 0 7
48881: NOT
48882: IFFALSE 48901
48884: PUSH
48885: LD_VAR 0 1
48889: PPUSH
48890: LD_VAR 0 2
48894: PPUSH
48895: CALL_OW 308
48899: NOT
48900: AND
48901: IFFALSE 48905
// exit ;
48903: GO 49023
// if IsInArea ( unit , area ) then
48905: LD_VAR 0 1
48909: PPUSH
48910: LD_VAR 0 2
48914: PPUSH
48915: CALL_OW 308
48919: IFFALSE 48937
// begin ComMoveToArea ( unit , goAway ) ;
48921: LD_VAR 0 1
48925: PPUSH
48926: LD_VAR 0 3
48930: PPUSH
48931: CALL_OW 113
// exit ;
48935: GO 49023
// end ; if task [ 1 ] [ 1 ] <> M then
48937: LD_VAR 0 7
48941: PUSH
48942: LD_INT 1
48944: ARRAY
48945: PUSH
48946: LD_INT 1
48948: ARRAY
48949: PUSH
48950: LD_STRING M
48952: NONEQUAL
48953: IFFALSE 48957
// exit ;
48955: GO 49023
// x := task [ 1 ] [ 2 ] ;
48957: LD_ADDR_VAR 0 5
48961: PUSH
48962: LD_VAR 0 7
48966: PUSH
48967: LD_INT 1
48969: ARRAY
48970: PUSH
48971: LD_INT 2
48973: ARRAY
48974: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48975: LD_ADDR_VAR 0 6
48979: PUSH
48980: LD_VAR 0 7
48984: PUSH
48985: LD_INT 1
48987: ARRAY
48988: PUSH
48989: LD_INT 3
48991: ARRAY
48992: ST_TO_ADDR
// if InArea ( x , y , area ) then
48993: LD_VAR 0 5
48997: PPUSH
48998: LD_VAR 0 6
49002: PPUSH
49003: LD_VAR 0 2
49007: PPUSH
49008: CALL_OW 309
49012: IFFALSE 49023
// ComStop ( unit ) ;
49014: LD_VAR 0 1
49018: PPUSH
49019: CALL_OW 141
// end ;
49023: LD_VAR 0 4
49027: RET
// export function Abs ( value ) ; begin
49028: LD_INT 0
49030: PPUSH
// result := value ;
49031: LD_ADDR_VAR 0 2
49035: PUSH
49036: LD_VAR 0 1
49040: ST_TO_ADDR
// if value < 0 then
49041: LD_VAR 0 1
49045: PUSH
49046: LD_INT 0
49048: LESS
49049: IFFALSE 49066
// result := value * - 1 ;
49051: LD_ADDR_VAR 0 2
49055: PUSH
49056: LD_VAR 0 1
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: MUL
49065: ST_TO_ADDR
// end ;
49066: LD_VAR 0 2
49070: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49071: LD_INT 0
49073: PPUSH
49074: PPUSH
49075: PPUSH
49076: PPUSH
49077: PPUSH
49078: PPUSH
49079: PPUSH
49080: PPUSH
// if not unit or not building then
49081: LD_VAR 0 1
49085: NOT
49086: IFTRUE 49095
49088: PUSH
49089: LD_VAR 0 2
49093: NOT
49094: OR
49095: IFFALSE 49099
// exit ;
49097: GO 49327
// x := GetX ( building ) ;
49099: LD_ADDR_VAR 0 4
49103: PUSH
49104: LD_VAR 0 2
49108: PPUSH
49109: CALL_OW 250
49113: ST_TO_ADDR
// y := GetY ( building ) ;
49114: LD_ADDR_VAR 0 6
49118: PUSH
49119: LD_VAR 0 2
49123: PPUSH
49124: CALL_OW 251
49128: ST_TO_ADDR
// d := GetDir ( building ) ;
49129: LD_ADDR_VAR 0 8
49133: PUSH
49134: LD_VAR 0 2
49138: PPUSH
49139: CALL_OW 254
49143: ST_TO_ADDR
// r := 4 ;
49144: LD_ADDR_VAR 0 9
49148: PUSH
49149: LD_INT 4
49151: ST_TO_ADDR
// for i := 1 to 5 do
49152: LD_ADDR_VAR 0 10
49156: PUSH
49157: DOUBLE
49158: LD_INT 1
49160: DEC
49161: ST_TO_ADDR
49162: LD_INT 5
49164: PUSH
49165: FOR_TO
49166: IFFALSE 49325
// begin _x := ShiftX ( x , d , r + i ) ;
49168: LD_ADDR_VAR 0 5
49172: PUSH
49173: LD_VAR 0 4
49177: PPUSH
49178: LD_VAR 0 8
49182: PPUSH
49183: LD_VAR 0 9
49187: PUSH
49188: LD_VAR 0 10
49192: PLUS
49193: PPUSH
49194: CALL_OW 272
49198: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49199: LD_ADDR_VAR 0 7
49203: PUSH
49204: LD_VAR 0 6
49208: PPUSH
49209: LD_VAR 0 8
49213: PPUSH
49214: LD_VAR 0 9
49218: PUSH
49219: LD_VAR 0 10
49223: PLUS
49224: PPUSH
49225: CALL_OW 273
49229: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49230: LD_VAR 0 5
49234: PPUSH
49235: LD_VAR 0 7
49239: PPUSH
49240: CALL_OW 488
49244: IFFALSE 49279
49246: PUSH
49247: LD_VAR 0 5
49251: PPUSH
49252: LD_VAR 0 7
49256: PPUSH
49257: CALL_OW 428
49261: PPUSH
49262: CALL_OW 247
49266: PUSH
49267: LD_INT 3
49269: PUSH
49270: LD_INT 2
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: IN
49277: NOT
49278: AND
49279: IFFALSE 49323
// begin ComMoveXY ( unit , _x , _y ) ;
49281: LD_VAR 0 1
49285: PPUSH
49286: LD_VAR 0 5
49290: PPUSH
49291: LD_VAR 0 7
49295: PPUSH
49296: CALL_OW 111
// result := [ _x , _y ] ;
49300: LD_ADDR_VAR 0 3
49304: PUSH
49305: LD_VAR 0 5
49309: PUSH
49310: LD_VAR 0 7
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: ST_TO_ADDR
// exit ;
49319: POP
49320: POP
49321: GO 49327
// end ; end ;
49323: GO 49165
49325: POP
49326: POP
// end ;
49327: LD_VAR 0 3
49331: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49332: LD_INT 0
49334: PPUSH
49335: PPUSH
49336: PPUSH
// result := 0 ;
49337: LD_ADDR_VAR 0 3
49341: PUSH
49342: LD_INT 0
49344: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49345: LD_VAR 0 1
49349: PUSH
49350: LD_INT 0
49352: LESS
49353: IFTRUE 49365
49355: PUSH
49356: LD_VAR 0 1
49360: PUSH
49361: LD_INT 8
49363: GREATER
49364: OR
49365: IFTRUE 49377
49367: PUSH
49368: LD_VAR 0 2
49372: PUSH
49373: LD_INT 0
49375: LESS
49376: OR
49377: IFTRUE 49389
49379: PUSH
49380: LD_VAR 0 2
49384: PUSH
49385: LD_INT 8
49387: GREATER
49388: OR
49389: IFFALSE 49393
// exit ;
49391: GO 49468
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49393: LD_ADDR_VAR 0 4
49397: PUSH
49398: LD_INT 22
49400: PUSH
49401: LD_VAR 0 2
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PPUSH
49410: CALL_OW 69
49414: PUSH
49415: FOR_IN
49416: IFFALSE 49466
// begin un := UnitShoot ( i ) ;
49418: LD_ADDR_VAR 0 5
49422: PUSH
49423: LD_VAR 0 4
49427: PPUSH
49428: CALL_OW 504
49432: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49433: LD_VAR 0 5
49437: PPUSH
49438: CALL_OW 255
49442: PUSH
49443: LD_VAR 0 1
49447: EQUAL
49448: IFFALSE 49464
// begin result := un ;
49450: LD_ADDR_VAR 0 3
49454: PUSH
49455: LD_VAR 0 5
49459: ST_TO_ADDR
// exit ;
49460: POP
49461: POP
49462: GO 49468
// end ; end ;
49464: GO 49415
49466: POP
49467: POP
// end ;
49468: LD_VAR 0 3
49472: RET
// export function GetCargoBay ( units ) ; begin
49473: LD_INT 0
49475: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49476: LD_ADDR_VAR 0 2
49480: PUSH
49481: LD_VAR 0 1
49485: PPUSH
49486: LD_INT 2
49488: PUSH
49489: LD_INT 34
49491: PUSH
49492: LD_INT 12
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 34
49501: PUSH
49502: LD_INT 51
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 34
49511: PUSH
49512: LD_INT 32
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 34
49521: PUSH
49522: LD_INT 89
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: PPUSH
49536: CALL_OW 72
49540: ST_TO_ADDR
// end ;
49541: LD_VAR 0 2
49545: RET
// export function Negate ( value ) ; begin
49546: LD_INT 0
49548: PPUSH
// result := not value ;
49549: LD_ADDR_VAR 0 2
49553: PUSH
49554: LD_VAR 0 1
49558: NOT
49559: ST_TO_ADDR
// end ;
49560: LD_VAR 0 2
49564: RET
// export function Inc ( value ) ; begin
49565: LD_INT 0
49567: PPUSH
// result := value + 1 ;
49568: LD_ADDR_VAR 0 2
49572: PUSH
49573: LD_VAR 0 1
49577: PUSH
49578: LD_INT 1
49580: PLUS
49581: ST_TO_ADDR
// end ;
49582: LD_VAR 0 2
49586: RET
// export function Dec ( value ) ; begin
49587: LD_INT 0
49589: PPUSH
// result := value - 1 ;
49590: LD_ADDR_VAR 0 2
49594: PUSH
49595: LD_VAR 0 1
49599: PUSH
49600: LD_INT 1
49602: MINUS
49603: ST_TO_ADDR
// end ;
49604: LD_VAR 0 2
49608: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49609: LD_INT 0
49611: PPUSH
49612: PPUSH
49613: PPUSH
49614: PPUSH
49615: PPUSH
49616: PPUSH
49617: PPUSH
49618: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49619: LD_VAR 0 1
49623: PPUSH
49624: LD_VAR 0 2
49628: PPUSH
49629: CALL_OW 488
49633: NOT
49634: IFTRUE 49653
49636: PUSH
49637: LD_VAR 0 3
49641: PPUSH
49642: LD_VAR 0 4
49646: PPUSH
49647: CALL_OW 488
49651: NOT
49652: OR
49653: IFFALSE 49666
// begin result := - 1 ;
49655: LD_ADDR_VAR 0 5
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: ST_TO_ADDR
// exit ;
49664: GO 49901
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49666: LD_ADDR_VAR 0 12
49670: PUSH
49671: LD_VAR 0 1
49675: PPUSH
49676: LD_VAR 0 2
49680: PPUSH
49681: LD_VAR 0 3
49685: PPUSH
49686: LD_VAR 0 4
49690: PPUSH
49691: CALL 48737 0 4
49695: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49696: LD_ADDR_VAR 0 11
49700: PUSH
49701: LD_VAR 0 1
49705: PPUSH
49706: LD_VAR 0 2
49710: PPUSH
49711: LD_VAR 0 12
49715: PUSH
49716: LD_INT 1
49718: ARRAY
49719: PPUSH
49720: LD_VAR 0 12
49724: PUSH
49725: LD_INT 2
49727: ARRAY
49728: PPUSH
49729: CALL_OW 298
49733: ST_TO_ADDR
// distance := 9999 ;
49734: LD_ADDR_VAR 0 10
49738: PUSH
49739: LD_INT 9999
49741: ST_TO_ADDR
// for i := 0 to 5 do
49742: LD_ADDR_VAR 0 6
49746: PUSH
49747: DOUBLE
49748: LD_INT 0
49750: DEC
49751: ST_TO_ADDR
49752: LD_INT 5
49754: PUSH
49755: FOR_TO
49756: IFFALSE 49899
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49758: LD_ADDR_VAR 0 7
49762: PUSH
49763: LD_VAR 0 1
49767: PPUSH
49768: LD_VAR 0 6
49772: PPUSH
49773: LD_VAR 0 11
49777: PPUSH
49778: CALL_OW 272
49782: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49783: LD_ADDR_VAR 0 8
49787: PUSH
49788: LD_VAR 0 2
49792: PPUSH
49793: LD_VAR 0 6
49797: PPUSH
49798: LD_VAR 0 11
49802: PPUSH
49803: CALL_OW 273
49807: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49808: LD_VAR 0 7
49812: PPUSH
49813: LD_VAR 0 8
49817: PPUSH
49818: CALL_OW 488
49822: NOT
49823: IFFALSE 49827
// continue ;
49825: GO 49755
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49827: LD_ADDR_VAR 0 9
49831: PUSH
49832: LD_VAR 0 12
49836: PUSH
49837: LD_INT 1
49839: ARRAY
49840: PPUSH
49841: LD_VAR 0 12
49845: PUSH
49846: LD_INT 2
49848: ARRAY
49849: PPUSH
49850: LD_VAR 0 7
49854: PPUSH
49855: LD_VAR 0 8
49859: PPUSH
49860: CALL_OW 298
49864: ST_TO_ADDR
// if tmp < distance then
49865: LD_VAR 0 9
49869: PUSH
49870: LD_VAR 0 10
49874: LESS
49875: IFFALSE 49897
// begin result := i ;
49877: LD_ADDR_VAR 0 5
49881: PUSH
49882: LD_VAR 0 6
49886: ST_TO_ADDR
// distance := tmp ;
49887: LD_ADDR_VAR 0 10
49891: PUSH
49892: LD_VAR 0 9
49896: ST_TO_ADDR
// end ; end ;
49897: GO 49755
49899: POP
49900: POP
// end ;
49901: LD_VAR 0 5
49905: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49906: LD_INT 0
49908: PPUSH
49909: PPUSH
// if not driver or not IsInUnit ( driver ) then
49910: LD_VAR 0 1
49914: NOT
49915: IFTRUE 49929
49917: PUSH
49918: LD_VAR 0 1
49922: PPUSH
49923: CALL_OW 310
49927: NOT
49928: OR
49929: IFFALSE 49933
// exit ;
49931: GO 50023
// vehicle := IsInUnit ( driver ) ;
49933: LD_ADDR_VAR 0 3
49937: PUSH
49938: LD_VAR 0 1
49942: PPUSH
49943: CALL_OW 310
49947: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49948: LD_VAR 0 1
49952: PPUSH
49953: LD_STRING \
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: PUSH
49983: LD_STRING E
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_VAR 0 3
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PPUSH
50019: CALL_OW 446
// end ;
50023: LD_VAR 0 2
50027: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50028: LD_INT 0
50030: PPUSH
50031: PPUSH
// if not driver or not IsInUnit ( driver ) then
50032: LD_VAR 0 1
50036: NOT
50037: IFTRUE 50051
50039: PUSH
50040: LD_VAR 0 1
50044: PPUSH
50045: CALL_OW 310
50049: NOT
50050: OR
50051: IFFALSE 50055
// exit ;
50053: GO 50145
// vehicle := IsInUnit ( driver ) ;
50055: LD_ADDR_VAR 0 3
50059: PUSH
50060: LD_VAR 0 1
50064: PPUSH
50065: CALL_OW 310
50069: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50070: LD_VAR 0 1
50074: PPUSH
50075: LD_STRING \
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: PUSH
50105: LD_STRING E
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: LD_VAR 0 3
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PPUSH
50141: CALL_OW 447
// end ;
50145: LD_VAR 0 2
50149: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50150: LD_INT 0
50152: PPUSH
50153: PPUSH
50154: PPUSH
// tmp := [ ] ;
50155: LD_ADDR_VAR 0 5
50159: PUSH
50160: EMPTY
50161: ST_TO_ADDR
// for i in units do
50162: LD_ADDR_VAR 0 4
50166: PUSH
50167: LD_VAR 0 1
50171: PUSH
50172: FOR_IN
50173: IFFALSE 50211
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50175: LD_ADDR_VAR 0 5
50179: PUSH
50180: LD_VAR 0 5
50184: PPUSH
50185: LD_VAR 0 5
50189: PUSH
50190: LD_INT 1
50192: PLUS
50193: PPUSH
50194: LD_VAR 0 4
50198: PPUSH
50199: CALL_OW 256
50203: PPUSH
50204: CALL_OW 2
50208: ST_TO_ADDR
50209: GO 50172
50211: POP
50212: POP
// if not tmp then
50213: LD_VAR 0 5
50217: NOT
50218: IFFALSE 50222
// exit ;
50220: GO 50270
// if asc then
50222: LD_VAR 0 2
50226: IFFALSE 50250
// result := SortListByListAsc ( units , tmp ) else
50228: LD_ADDR_VAR 0 3
50232: PUSH
50233: LD_VAR 0 1
50237: PPUSH
50238: LD_VAR 0 5
50242: PPUSH
50243: CALL_OW 76
50247: ST_TO_ADDR
50248: GO 50270
// result := SortListByListDesc ( units , tmp ) ;
50250: LD_ADDR_VAR 0 3
50254: PUSH
50255: LD_VAR 0 1
50259: PPUSH
50260: LD_VAR 0 5
50264: PPUSH
50265: CALL_OW 77
50269: ST_TO_ADDR
// end ;
50270: LD_VAR 0 3
50274: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50275: LD_INT 0
50277: PPUSH
50278: PPUSH
// task := GetTaskList ( mech ) ;
50279: LD_ADDR_VAR 0 4
50283: PUSH
50284: LD_VAR 0 1
50288: PPUSH
50289: CALL_OW 437
50293: ST_TO_ADDR
// if not task then
50294: LD_VAR 0 4
50298: NOT
50299: IFFALSE 50303
// exit ;
50301: GO 50347
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50303: LD_ADDR_VAR 0 3
50307: PUSH
50308: LD_VAR 0 4
50312: PUSH
50313: LD_INT 1
50315: ARRAY
50316: PUSH
50317: LD_INT 1
50319: ARRAY
50320: PUSH
50321: LD_STRING r
50323: EQUAL
50324: IFFALSE 50346
50326: PUSH
50327: LD_VAR 0 4
50331: PUSH
50332: LD_INT 1
50334: ARRAY
50335: PUSH
50336: LD_INT 4
50338: ARRAY
50339: PUSH
50340: LD_VAR 0 2
50344: EQUAL
50345: AND
50346: ST_TO_ADDR
// end ;
50347: LD_VAR 0 3
50351: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50352: LD_INT 0
50354: PPUSH
// SetDir ( unit , d ) ;
50355: LD_VAR 0 1
50359: PPUSH
50360: LD_VAR 0 4
50364: PPUSH
50365: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50369: LD_ADDR_VAR 0 6
50373: PUSH
50374: LD_VAR 0 1
50378: PPUSH
50379: LD_VAR 0 2
50383: PPUSH
50384: LD_VAR 0 3
50388: PPUSH
50389: LD_VAR 0 5
50393: PPUSH
50394: CALL_OW 48
50398: ST_TO_ADDR
// end ;
50399: LD_VAR 0 6
50403: RET
// export function ToNaturalNumber ( number ) ; begin
50404: LD_INT 0
50406: PPUSH
// result := number div 1 ;
50407: LD_ADDR_VAR 0 2
50411: PUSH
50412: LD_VAR 0 1
50416: PUSH
50417: LD_INT 1
50419: DIV
50420: ST_TO_ADDR
// if number < 0 then
50421: LD_VAR 0 1
50425: PUSH
50426: LD_INT 0
50428: LESS
50429: IFFALSE 50439
// result := 0 ;
50431: LD_ADDR_VAR 0 2
50435: PUSH
50436: LD_INT 0
50438: ST_TO_ADDR
// end ;
50439: LD_VAR 0 2
50443: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50444: LD_INT 0
50446: PPUSH
50447: PPUSH
50448: PPUSH
// if not buildings then
50449: LD_VAR 0 1
50453: NOT
50454: IFFALSE 50458
// exit ;
50456: GO 50573
// tmp := [ ] ;
50458: LD_ADDR_VAR 0 5
50462: PUSH
50463: EMPTY
50464: ST_TO_ADDR
// for b in buildings do
50465: LD_ADDR_VAR 0 4
50469: PUSH
50470: LD_VAR 0 1
50474: PUSH
50475: FOR_IN
50476: IFFALSE 50514
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50478: LD_ADDR_VAR 0 5
50482: PUSH
50483: LD_VAR 0 5
50487: PPUSH
50488: LD_VAR 0 5
50492: PUSH
50493: LD_INT 1
50495: PLUS
50496: PPUSH
50497: LD_VAR 0 4
50501: PPUSH
50502: CALL_OW 266
50506: PPUSH
50507: CALL_OW 1
50511: ST_TO_ADDR
50512: GO 50475
50514: POP
50515: POP
// if not tmp then
50516: LD_VAR 0 5
50520: NOT
50521: IFFALSE 50525
// exit ;
50523: GO 50573
// if asc then
50525: LD_VAR 0 2
50529: IFFALSE 50553
// result := SortListByListAsc ( buildings , tmp ) else
50531: LD_ADDR_VAR 0 3
50535: PUSH
50536: LD_VAR 0 1
50540: PPUSH
50541: LD_VAR 0 5
50545: PPUSH
50546: CALL_OW 76
50550: ST_TO_ADDR
50551: GO 50573
// result := SortListByListDesc ( buildings , tmp ) ;
50553: LD_ADDR_VAR 0 3
50557: PUSH
50558: LD_VAR 0 1
50562: PPUSH
50563: LD_VAR 0 5
50567: PPUSH
50568: CALL_OW 77
50572: ST_TO_ADDR
// end ;
50573: LD_VAR 0 3
50577: RET
// export function SortByClass ( units , class ) ; var un ; begin
50578: LD_INT 0
50580: PPUSH
50581: PPUSH
// if not units or not class then
50582: LD_VAR 0 1
50586: NOT
50587: IFTRUE 50596
50589: PUSH
50590: LD_VAR 0 2
50594: NOT
50595: OR
50596: IFFALSE 50600
// exit ;
50598: GO 50695
// result := [ ] ;
50600: LD_ADDR_VAR 0 3
50604: PUSH
50605: EMPTY
50606: ST_TO_ADDR
// for un in units do
50607: LD_ADDR_VAR 0 4
50611: PUSH
50612: LD_VAR 0 1
50616: PUSH
50617: FOR_IN
50618: IFFALSE 50693
// if GetClass ( un ) = class then
50620: LD_VAR 0 4
50624: PPUSH
50625: CALL_OW 257
50629: PUSH
50630: LD_VAR 0 2
50634: EQUAL
50635: IFFALSE 50662
// result := Insert ( result , 1 , un ) else
50637: LD_ADDR_VAR 0 3
50641: PUSH
50642: LD_VAR 0 3
50646: PPUSH
50647: LD_INT 1
50649: PPUSH
50650: LD_VAR 0 4
50654: PPUSH
50655: CALL_OW 2
50659: ST_TO_ADDR
50660: GO 50691
// result := Replace ( result , result + 1 , un ) ;
50662: LD_ADDR_VAR 0 3
50666: PUSH
50667: LD_VAR 0 3
50671: PPUSH
50672: LD_VAR 0 3
50676: PUSH
50677: LD_INT 1
50679: PLUS
50680: PPUSH
50681: LD_VAR 0 4
50685: PPUSH
50686: CALL_OW 1
50690: ST_TO_ADDR
50691: GO 50617
50693: POP
50694: POP
// end ;
50695: LD_VAR 0 3
50699: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50700: LD_INT 0
50702: PPUSH
50703: PPUSH
50704: PPUSH
50705: PPUSH
50706: PPUSH
50707: PPUSH
50708: PPUSH
// result := [ ] ;
50709: LD_ADDR_VAR 0 4
50713: PUSH
50714: EMPTY
50715: ST_TO_ADDR
// if x - r < 0 then
50716: LD_VAR 0 1
50720: PUSH
50721: LD_VAR 0 3
50725: MINUS
50726: PUSH
50727: LD_INT 0
50729: LESS
50730: IFFALSE 50742
// min_x := 0 else
50732: LD_ADDR_VAR 0 8
50736: PUSH
50737: LD_INT 0
50739: ST_TO_ADDR
50740: GO 50758
// min_x := x - r ;
50742: LD_ADDR_VAR 0 8
50746: PUSH
50747: LD_VAR 0 1
50751: PUSH
50752: LD_VAR 0 3
50756: MINUS
50757: ST_TO_ADDR
// if y - r < 0 then
50758: LD_VAR 0 2
50762: PUSH
50763: LD_VAR 0 3
50767: MINUS
50768: PUSH
50769: LD_INT 0
50771: LESS
50772: IFFALSE 50784
// min_y := 0 else
50774: LD_ADDR_VAR 0 7
50778: PUSH
50779: LD_INT 0
50781: ST_TO_ADDR
50782: GO 50800
// min_y := y - r ;
50784: LD_ADDR_VAR 0 7
50788: PUSH
50789: LD_VAR 0 2
50793: PUSH
50794: LD_VAR 0 3
50798: MINUS
50799: ST_TO_ADDR
// max_x := x + r ;
50800: LD_ADDR_VAR 0 9
50804: PUSH
50805: LD_VAR 0 1
50809: PUSH
50810: LD_VAR 0 3
50814: PLUS
50815: ST_TO_ADDR
// max_y := y + r ;
50816: LD_ADDR_VAR 0 10
50820: PUSH
50821: LD_VAR 0 2
50825: PUSH
50826: LD_VAR 0 3
50830: PLUS
50831: ST_TO_ADDR
// for _x = min_x to max_x do
50832: LD_ADDR_VAR 0 5
50836: PUSH
50837: DOUBLE
50838: LD_VAR 0 8
50842: DEC
50843: ST_TO_ADDR
50844: LD_VAR 0 9
50848: PUSH
50849: FOR_TO
50850: IFFALSE 50951
// for _y = min_y to max_y do
50852: LD_ADDR_VAR 0 6
50856: PUSH
50857: DOUBLE
50858: LD_VAR 0 7
50862: DEC
50863: ST_TO_ADDR
50864: LD_VAR 0 10
50868: PUSH
50869: FOR_TO
50870: IFFALSE 50947
// begin if not ValidHex ( _x , _y ) then
50872: LD_VAR 0 5
50876: PPUSH
50877: LD_VAR 0 6
50881: PPUSH
50882: CALL_OW 488
50886: NOT
50887: IFFALSE 50891
// continue ;
50889: GO 50869
// if GetResourceTypeXY ( _x , _y ) then
50891: LD_VAR 0 5
50895: PPUSH
50896: LD_VAR 0 6
50900: PPUSH
50901: CALL_OW 283
50905: IFFALSE 50945
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50907: LD_ADDR_VAR 0 4
50911: PUSH
50912: LD_VAR 0 4
50916: PPUSH
50917: LD_VAR 0 4
50921: PUSH
50922: LD_INT 1
50924: PLUS
50925: PPUSH
50926: LD_VAR 0 5
50930: PUSH
50931: LD_VAR 0 6
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PPUSH
50940: CALL_OW 1
50944: ST_TO_ADDR
// end ;
50945: GO 50869
50947: POP
50948: POP
50949: GO 50849
50951: POP
50952: POP
// end ;
50953: LD_VAR 0 4
50957: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50958: LD_INT 0
50960: PPUSH
50961: PPUSH
50962: PPUSH
50963: PPUSH
50964: PPUSH
50965: PPUSH
50966: PPUSH
50967: PPUSH
// if not units then
50968: LD_VAR 0 1
50972: NOT
50973: IFFALSE 50977
// exit ;
50975: GO 51509
// result := UnitFilter ( units , [ f_ok ] ) ;
50977: LD_ADDR_VAR 0 3
50981: PUSH
50982: LD_VAR 0 1
50986: PPUSH
50987: LD_INT 50
50989: PUSH
50990: EMPTY
50991: LIST
50992: PPUSH
50993: CALL_OW 72
50997: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50998: LD_ADDR_VAR 0 8
51002: PUSH
51003: LD_VAR 0 1
51007: PUSH
51008: LD_INT 1
51010: ARRAY
51011: PPUSH
51012: CALL_OW 255
51016: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51017: LD_ADDR_VAR 0 10
51021: PUSH
51022: LD_INT 29
51024: PUSH
51025: LD_INT 91
51027: PUSH
51028: LD_INT 49
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: LIST
51035: ST_TO_ADDR
// if not result then
51036: LD_VAR 0 3
51040: NOT
51041: IFFALSE 51045
// exit ;
51043: GO 51509
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51045: LD_ADDR_VAR 0 5
51049: PUSH
51050: LD_INT 81
51052: PUSH
51053: LD_VAR 0 8
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PPUSH
51062: CALL_OW 69
51066: ST_TO_ADDR
// for i in result do
51067: LD_ADDR_VAR 0 4
51071: PUSH
51072: LD_VAR 0 3
51076: PUSH
51077: FOR_IN
51078: IFFALSE 51507
// begin tag := GetTag ( i ) + 1 ;
51080: LD_ADDR_VAR 0 9
51084: PUSH
51085: LD_VAR 0 4
51089: PPUSH
51090: CALL_OW 110
51094: PUSH
51095: LD_INT 1
51097: PLUS
51098: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51099: LD_ADDR_VAR 0 7
51103: PUSH
51104: LD_VAR 0 4
51108: PPUSH
51109: CALL_OW 250
51113: PPUSH
51114: LD_VAR 0 4
51118: PPUSH
51119: CALL_OW 251
51123: PPUSH
51124: LD_INT 4
51126: PPUSH
51127: CALL 50700 0 3
51131: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51132: LD_VAR 0 4
51136: PPUSH
51137: CALL_OW 247
51141: PUSH
51142: LD_INT 2
51144: EQUAL
51145: IFFALSE 51157
51147: PUSH
51148: LD_VAR 0 7
51152: PUSH
51153: LD_INT 2
51155: GREATER
51156: AND
51157: IFFALSE 51177
51159: PUSH
51160: LD_VAR 0 4
51164: PPUSH
51165: CALL_OW 264
51169: PUSH
51170: LD_VAR 0 10
51174: IN
51175: NOT
51176: AND
51177: IFFALSE 51216
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51179: LD_VAR 0 4
51183: PPUSH
51184: LD_VAR 0 7
51188: PUSH
51189: LD_INT 1
51191: ARRAY
51192: PUSH
51193: LD_INT 1
51195: ARRAY
51196: PPUSH
51197: LD_VAR 0 7
51201: PUSH
51202: LD_INT 1
51204: ARRAY
51205: PUSH
51206: LD_INT 2
51208: ARRAY
51209: PPUSH
51210: CALL_OW 116
51214: GO 51505
// if path > tag then
51216: LD_VAR 0 2
51220: PUSH
51221: LD_VAR 0 9
51225: GREATER
51226: IFFALSE 51434
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51228: LD_ADDR_VAR 0 6
51232: PUSH
51233: LD_VAR 0 5
51237: PPUSH
51238: LD_INT 91
51240: PUSH
51241: LD_VAR 0 4
51245: PUSH
51246: LD_INT 8
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: LIST
51253: PPUSH
51254: CALL_OW 72
51258: ST_TO_ADDR
// if nearEnemy then
51259: LD_VAR 0 6
51263: IFFALSE 51332
// begin if GetWeapon ( i ) = ru_time_lapser then
51265: LD_VAR 0 4
51269: PPUSH
51270: CALL_OW 264
51274: PUSH
51275: LD_INT 49
51277: EQUAL
51278: IFFALSE 51306
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51280: LD_VAR 0 4
51284: PPUSH
51285: LD_VAR 0 6
51289: PPUSH
51290: LD_VAR 0 4
51294: PPUSH
51295: CALL_OW 74
51299: PPUSH
51300: CALL_OW 112
51304: GO 51330
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51306: LD_VAR 0 4
51310: PPUSH
51311: LD_VAR 0 6
51315: PPUSH
51316: LD_VAR 0 4
51320: PPUSH
51321: CALL_OW 74
51325: PPUSH
51326: CALL 52590 0 2
// end else
51330: GO 51432
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51332: LD_VAR 0 4
51336: PPUSH
51337: LD_VAR 0 2
51341: PUSH
51342: LD_VAR 0 9
51346: ARRAY
51347: PUSH
51348: LD_INT 1
51350: ARRAY
51351: PPUSH
51352: LD_VAR 0 2
51356: PUSH
51357: LD_VAR 0 9
51361: ARRAY
51362: PUSH
51363: LD_INT 2
51365: ARRAY
51366: PPUSH
51367: CALL_OW 297
51371: PUSH
51372: LD_INT 6
51374: GREATER
51375: IFFALSE 51418
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51377: LD_VAR 0 4
51381: PPUSH
51382: LD_VAR 0 2
51386: PUSH
51387: LD_VAR 0 9
51391: ARRAY
51392: PUSH
51393: LD_INT 1
51395: ARRAY
51396: PPUSH
51397: LD_VAR 0 2
51401: PUSH
51402: LD_VAR 0 9
51406: ARRAY
51407: PUSH
51408: LD_INT 2
51410: ARRAY
51411: PPUSH
51412: CALL_OW 114
51416: GO 51432
// SetTag ( i , tag ) ;
51418: LD_VAR 0 4
51422: PPUSH
51423: LD_VAR 0 9
51427: PPUSH
51428: CALL_OW 109
// end else
51432: GO 51505
// if enemy then
51434: LD_VAR 0 5
51438: IFFALSE 51505
// begin if GetWeapon ( i ) = ru_time_lapser then
51440: LD_VAR 0 4
51444: PPUSH
51445: CALL_OW 264
51449: PUSH
51450: LD_INT 49
51452: EQUAL
51453: IFFALSE 51481
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51455: LD_VAR 0 4
51459: PPUSH
51460: LD_VAR 0 5
51464: PPUSH
51465: LD_VAR 0 4
51469: PPUSH
51470: CALL_OW 74
51474: PPUSH
51475: CALL_OW 112
51479: GO 51505
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51481: LD_VAR 0 4
51485: PPUSH
51486: LD_VAR 0 5
51490: PPUSH
51491: LD_VAR 0 4
51495: PPUSH
51496: CALL_OW 74
51500: PPUSH
51501: CALL 52590 0 2
// end ; end ;
51505: GO 51077
51507: POP
51508: POP
// end ;
51509: LD_VAR 0 3
51513: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51514: LD_INT 0
51516: PPUSH
51517: PPUSH
51518: PPUSH
// if not unit or IsInUnit ( unit ) then
51519: LD_VAR 0 1
51523: NOT
51524: IFTRUE 51537
51526: PUSH
51527: LD_VAR 0 1
51531: PPUSH
51532: CALL_OW 310
51536: OR
51537: IFFALSE 51541
// exit ;
51539: GO 51632
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51541: LD_ADDR_VAR 0 4
51545: PUSH
51546: LD_VAR 0 1
51550: PPUSH
51551: CALL_OW 250
51555: PPUSH
51556: LD_VAR 0 2
51560: PPUSH
51561: LD_INT 1
51563: PPUSH
51564: CALL_OW 272
51568: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51569: LD_ADDR_VAR 0 5
51573: PUSH
51574: LD_VAR 0 1
51578: PPUSH
51579: CALL_OW 251
51583: PPUSH
51584: LD_VAR 0 2
51588: PPUSH
51589: LD_INT 1
51591: PPUSH
51592: CALL_OW 273
51596: ST_TO_ADDR
// if ValidHex ( x , y ) then
51597: LD_VAR 0 4
51601: PPUSH
51602: LD_VAR 0 5
51606: PPUSH
51607: CALL_OW 488
51611: IFFALSE 51632
// ComTurnXY ( unit , x , y ) ;
51613: LD_VAR 0 1
51617: PPUSH
51618: LD_VAR 0 4
51622: PPUSH
51623: LD_VAR 0 5
51627: PPUSH
51628: CALL_OW 118
// end ;
51632: LD_VAR 0 3
51636: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51637: LD_INT 0
51639: PPUSH
51640: PPUSH
// result := false ;
51641: LD_ADDR_VAR 0 3
51645: PUSH
51646: LD_INT 0
51648: ST_TO_ADDR
// if not units then
51649: LD_VAR 0 2
51653: NOT
51654: IFFALSE 51658
// exit ;
51656: GO 51703
// for i in units do
51658: LD_ADDR_VAR 0 4
51662: PUSH
51663: LD_VAR 0 2
51667: PUSH
51668: FOR_IN
51669: IFFALSE 51701
// if See ( side , i ) then
51671: LD_VAR 0 1
51675: PPUSH
51676: LD_VAR 0 4
51680: PPUSH
51681: CALL_OW 292
51685: IFFALSE 51699
// begin result := true ;
51687: LD_ADDR_VAR 0 3
51691: PUSH
51692: LD_INT 1
51694: ST_TO_ADDR
// exit ;
51695: POP
51696: POP
51697: GO 51703
// end ;
51699: GO 51668
51701: POP
51702: POP
// end ;
51703: LD_VAR 0 3
51707: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51708: LD_INT 0
51710: PPUSH
51711: PPUSH
51712: PPUSH
51713: PPUSH
// if not unit or not points then
51714: LD_VAR 0 1
51718: NOT
51719: IFTRUE 51728
51721: PUSH
51722: LD_VAR 0 2
51726: NOT
51727: OR
51728: IFFALSE 51732
// exit ;
51730: GO 51822
// dist := 99999 ;
51732: LD_ADDR_VAR 0 5
51736: PUSH
51737: LD_INT 99999
51739: ST_TO_ADDR
// for i in points do
51740: LD_ADDR_VAR 0 4
51744: PUSH
51745: LD_VAR 0 2
51749: PUSH
51750: FOR_IN
51751: IFFALSE 51820
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51753: LD_ADDR_VAR 0 6
51757: PUSH
51758: LD_VAR 0 1
51762: PPUSH
51763: LD_VAR 0 4
51767: PUSH
51768: LD_INT 1
51770: ARRAY
51771: PPUSH
51772: LD_VAR 0 4
51776: PUSH
51777: LD_INT 2
51779: ARRAY
51780: PPUSH
51781: CALL_OW 297
51785: ST_TO_ADDR
// if tmpDist < dist then
51786: LD_VAR 0 6
51790: PUSH
51791: LD_VAR 0 5
51795: LESS
51796: IFFALSE 51818
// begin result := i ;
51798: LD_ADDR_VAR 0 3
51802: PUSH
51803: LD_VAR 0 4
51807: ST_TO_ADDR
// dist := tmpDist ;
51808: LD_ADDR_VAR 0 5
51812: PUSH
51813: LD_VAR 0 6
51817: ST_TO_ADDR
// end ; end ;
51818: GO 51750
51820: POP
51821: POP
// end ;
51822: LD_VAR 0 3
51826: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51827: LD_INT 0
51829: PPUSH
// uc_side := side ;
51830: LD_ADDR_OWVAR 20
51834: PUSH
51835: LD_VAR 0 1
51839: ST_TO_ADDR
// uc_nation := 3 ;
51840: LD_ADDR_OWVAR 21
51844: PUSH
51845: LD_INT 3
51847: ST_TO_ADDR
// vc_chassis := 25 ;
51848: LD_ADDR_OWVAR 37
51852: PUSH
51853: LD_INT 25
51855: ST_TO_ADDR
// vc_engine := engine_siberite ;
51856: LD_ADDR_OWVAR 39
51860: PUSH
51861: LD_INT 3
51863: ST_TO_ADDR
// vc_control := control_computer ;
51864: LD_ADDR_OWVAR 38
51868: PUSH
51869: LD_INT 3
51871: ST_TO_ADDR
// vc_weapon := 59 ;
51872: LD_ADDR_OWVAR 40
51876: PUSH
51877: LD_INT 59
51879: ST_TO_ADDR
// result := CreateVehicle ;
51880: LD_ADDR_VAR 0 5
51884: PUSH
51885: CALL_OW 45
51889: ST_TO_ADDR
// SetDir ( result , d ) ;
51890: LD_VAR 0 5
51894: PPUSH
51895: LD_VAR 0 4
51899: PPUSH
51900: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51904: LD_VAR 0 5
51908: PPUSH
51909: LD_VAR 0 2
51913: PPUSH
51914: LD_VAR 0 3
51918: PPUSH
51919: LD_INT 0
51921: PPUSH
51922: CALL_OW 48
// end ;
51926: LD_VAR 0 5
51930: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51931: LD_INT 0
51933: PPUSH
51934: PPUSH
51935: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51936: LD_ADDR_VAR 0 2
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51959: LD_VAR 0 1
51963: NOT
51964: IFTRUE 51997
51966: PUSH
51967: LD_VAR 0 1
51971: PPUSH
51972: CALL_OW 264
51976: PUSH
51977: LD_INT 12
51979: PUSH
51980: LD_INT 51
51982: PUSH
51983: LD_INT 32
51985: PUSH
51986: LD_INT 89
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: IN
51995: NOT
51996: OR
51997: IFFALSE 52001
// exit ;
51999: GO 52099
// for i := 1 to 3 do
52001: LD_ADDR_VAR 0 3
52005: PUSH
52006: DOUBLE
52007: LD_INT 1
52009: DEC
52010: ST_TO_ADDR
52011: LD_INT 3
52013: PUSH
52014: FOR_TO
52015: IFFALSE 52097
// begin tmp := GetCargo ( cargo , i ) ;
52017: LD_ADDR_VAR 0 4
52021: PUSH
52022: LD_VAR 0 1
52026: PPUSH
52027: LD_VAR 0 3
52031: PPUSH
52032: CALL_OW 289
52036: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52037: LD_ADDR_VAR 0 2
52041: PUSH
52042: LD_VAR 0 2
52046: PPUSH
52047: LD_VAR 0 3
52051: PPUSH
52052: LD_VAR 0 4
52056: PPUSH
52057: CALL_OW 1
52061: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52062: LD_ADDR_VAR 0 2
52066: PUSH
52067: LD_VAR 0 2
52071: PPUSH
52072: LD_INT 4
52074: PPUSH
52075: LD_VAR 0 2
52079: PUSH
52080: LD_INT 4
52082: ARRAY
52083: PUSH
52084: LD_VAR 0 4
52088: PLUS
52089: PPUSH
52090: CALL_OW 1
52094: ST_TO_ADDR
// end ;
52095: GO 52014
52097: POP
52098: POP
// end ;
52099: LD_VAR 0 2
52103: RET
// export function Length ( array ) ; begin
52104: LD_INT 0
52106: PPUSH
// result := array + 0 ;
52107: LD_ADDR_VAR 0 2
52111: PUSH
52112: LD_VAR 0 1
52116: PUSH
52117: LD_INT 0
52119: PLUS
52120: ST_TO_ADDR
// end ;
52121: LD_VAR 0 2
52125: RET
// export function PrepareArray ( array ) ; begin
52126: LD_INT 0
52128: PPUSH
// result := array diff 0 ;
52129: LD_ADDR_VAR 0 2
52133: PUSH
52134: LD_VAR 0 1
52138: PUSH
52139: LD_INT 0
52141: DIFF
52142: ST_TO_ADDR
// if not result [ 1 ] then
52143: LD_VAR 0 2
52147: PUSH
52148: LD_INT 1
52150: ARRAY
52151: NOT
52152: IFFALSE 52172
// result := Delete ( result , 1 ) ;
52154: LD_ADDR_VAR 0 2
52158: PUSH
52159: LD_VAR 0 2
52163: PPUSH
52164: LD_INT 1
52166: PPUSH
52167: CALL_OW 3
52171: ST_TO_ADDR
// end ;
52172: LD_VAR 0 2
52176: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52177: LD_INT 0
52179: PPUSH
52180: PPUSH
52181: PPUSH
52182: PPUSH
// sibRocketRange := 25 ;
52183: LD_ADDR_VAR 0 6
52187: PUSH
52188: LD_INT 25
52190: ST_TO_ADDR
// result := false ;
52191: LD_ADDR_VAR 0 4
52195: PUSH
52196: LD_INT 0
52198: ST_TO_ADDR
// for i := 0 to 5 do
52199: LD_ADDR_VAR 0 5
52203: PUSH
52204: DOUBLE
52205: LD_INT 0
52207: DEC
52208: ST_TO_ADDR
52209: LD_INT 5
52211: PUSH
52212: FOR_TO
52213: IFFALSE 52280
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52215: LD_VAR 0 1
52219: PPUSH
52220: LD_VAR 0 5
52224: PPUSH
52225: LD_VAR 0 6
52229: PPUSH
52230: CALL_OW 272
52234: PPUSH
52235: LD_VAR 0 2
52239: PPUSH
52240: LD_VAR 0 5
52244: PPUSH
52245: LD_VAR 0 6
52249: PPUSH
52250: CALL_OW 273
52254: PPUSH
52255: LD_VAR 0 3
52259: PPUSH
52260: CALL_OW 309
52264: IFFALSE 52278
// begin result := true ;
52266: LD_ADDR_VAR 0 4
52270: PUSH
52271: LD_INT 1
52273: ST_TO_ADDR
// exit ;
52274: POP
52275: POP
52276: GO 52282
// end ;
52278: GO 52212
52280: POP
52281: POP
// end ;
52282: LD_VAR 0 4
52286: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52287: LD_INT 0
52289: PPUSH
52290: PPUSH
52291: PPUSH
// if btype = b_depot then
52292: LD_VAR 0 2
52296: PUSH
52297: LD_INT 0
52299: EQUAL
52300: IFFALSE 52312
// begin result := true ;
52302: LD_ADDR_VAR 0 3
52306: PUSH
52307: LD_INT 1
52309: ST_TO_ADDR
// exit ;
52310: GO 52432
// end ; pom := GetBase ( depot ) ;
52312: LD_ADDR_VAR 0 4
52316: PUSH
52317: LD_VAR 0 1
52321: PPUSH
52322: CALL_OW 274
52326: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52327: LD_ADDR_VAR 0 5
52331: PUSH
52332: LD_VAR 0 2
52336: PPUSH
52337: LD_VAR 0 1
52341: PPUSH
52342: CALL_OW 248
52346: PPUSH
52347: CALL_OW 450
52351: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52352: LD_ADDR_VAR 0 3
52356: PUSH
52357: LD_VAR 0 4
52361: PPUSH
52362: LD_INT 1
52364: PPUSH
52365: CALL_OW 275
52369: PUSH
52370: LD_VAR 0 5
52374: PUSH
52375: LD_INT 1
52377: ARRAY
52378: GREATEREQUAL
52379: IFFALSE 52405
52381: PUSH
52382: LD_VAR 0 4
52386: PPUSH
52387: LD_INT 2
52389: PPUSH
52390: CALL_OW 275
52394: PUSH
52395: LD_VAR 0 5
52399: PUSH
52400: LD_INT 2
52402: ARRAY
52403: GREATEREQUAL
52404: AND
52405: IFFALSE 52431
52407: PUSH
52408: LD_VAR 0 4
52412: PPUSH
52413: LD_INT 3
52415: PPUSH
52416: CALL_OW 275
52420: PUSH
52421: LD_VAR 0 5
52425: PUSH
52426: LD_INT 3
52428: ARRAY
52429: GREATEREQUAL
52430: AND
52431: ST_TO_ADDR
// end ;
52432: LD_VAR 0 3
52436: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52437: LD_INT 0
52439: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52440: LD_VAR 0 1
52444: PPUSH
52445: LD_VAR 0 2
52449: PPUSH
52450: LD_INT 0
52452: PPUSH
52453: LD_INT 0
52455: PPUSH
52456: LD_INT 1
52458: PPUSH
52459: LD_INT 0
52461: PPUSH
52462: CALL_OW 587
// end ;
52466: LD_VAR 0 3
52470: RET
// export function CenterOnNow ( unit ) ; begin
52471: LD_INT 0
52473: PPUSH
// result := IsInUnit ( unit ) ;
52474: LD_ADDR_VAR 0 2
52478: PUSH
52479: LD_VAR 0 1
52483: PPUSH
52484: CALL_OW 310
52488: ST_TO_ADDR
// if not result then
52489: LD_VAR 0 2
52493: NOT
52494: IFFALSE 52506
// result := unit ;
52496: LD_ADDR_VAR 0 2
52500: PUSH
52501: LD_VAR 0 1
52505: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52506: LD_VAR 0 1
52510: PPUSH
52511: CALL_OW 87
// end ;
52515: LD_VAR 0 2
52519: RET
// export function ComMoveHex ( unit , hex ) ; begin
52520: LD_INT 0
52522: PPUSH
// if not hex then
52523: LD_VAR 0 2
52527: NOT
52528: IFFALSE 52532
// exit ;
52530: GO 52585
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52532: LD_VAR 0 2
52536: PUSH
52537: LD_INT 1
52539: ARRAY
52540: PPUSH
52541: LD_VAR 0 2
52545: PUSH
52546: LD_INT 2
52548: ARRAY
52549: PPUSH
52550: CALL_OW 428
52554: IFFALSE 52558
// exit ;
52556: GO 52585
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52558: LD_VAR 0 1
52562: PPUSH
52563: LD_VAR 0 2
52567: PUSH
52568: LD_INT 1
52570: ARRAY
52571: PPUSH
52572: LD_VAR 0 2
52576: PUSH
52577: LD_INT 2
52579: ARRAY
52580: PPUSH
52581: CALL_OW 111
// end ;
52585: LD_VAR 0 3
52589: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52590: LD_INT 0
52592: PPUSH
52593: PPUSH
52594: PPUSH
// if not unit or not enemy then
52595: LD_VAR 0 1
52599: NOT
52600: IFTRUE 52609
52602: PUSH
52603: LD_VAR 0 2
52607: NOT
52608: OR
52609: IFFALSE 52613
// exit ;
52611: GO 52739
// x := GetX ( enemy ) ;
52613: LD_ADDR_VAR 0 4
52617: PUSH
52618: LD_VAR 0 2
52622: PPUSH
52623: CALL_OW 250
52627: ST_TO_ADDR
// y := GetY ( enemy ) ;
52628: LD_ADDR_VAR 0 5
52632: PUSH
52633: LD_VAR 0 2
52637: PPUSH
52638: CALL_OW 251
52642: ST_TO_ADDR
// if ValidHex ( x , y ) then
52643: LD_VAR 0 4
52647: PPUSH
52648: LD_VAR 0 5
52652: PPUSH
52653: CALL_OW 488
52657: IFFALSE 52739
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52659: LD_VAR 0 2
52663: PPUSH
52664: CALL_OW 247
52668: PUSH
52669: LD_INT 3
52671: PUSH
52672: LD_INT 2
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: IN
52679: IFTRUE 52702
52681: PUSH
52682: LD_VAR 0 1
52686: PPUSH
52687: CALL_OW 255
52691: PPUSH
52692: LD_VAR 0 2
52696: PPUSH
52697: CALL_OW 292
52701: OR
52702: IFFALSE 52720
// ComAttackUnit ( unit , enemy ) else
52704: LD_VAR 0 1
52708: PPUSH
52709: LD_VAR 0 2
52713: PPUSH
52714: CALL_OW 115
52718: GO 52739
// ComAgressiveMove ( unit , x , y ) ;
52720: LD_VAR 0 1
52724: PPUSH
52725: LD_VAR 0 4
52729: PPUSH
52730: LD_VAR 0 5
52734: PPUSH
52735: CALL_OW 114
// end ;
52739: LD_VAR 0 3
52743: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52744: LD_INT 0
52746: PPUSH
52747: PPUSH
52748: PPUSH
// list := AreaToList ( area , 0 ) ;
52749: LD_ADDR_VAR 0 5
52753: PUSH
52754: LD_VAR 0 1
52758: PPUSH
52759: LD_INT 0
52761: PPUSH
52762: CALL_OW 517
52766: ST_TO_ADDR
// if not list then
52767: LD_VAR 0 5
52771: NOT
52772: IFFALSE 52776
// exit ;
52774: GO 52906
// if all then
52776: LD_VAR 0 2
52780: IFFALSE 52868
// begin for i := 1 to list [ 1 ] do
52782: LD_ADDR_VAR 0 4
52786: PUSH
52787: DOUBLE
52788: LD_INT 1
52790: DEC
52791: ST_TO_ADDR
52792: LD_VAR 0 5
52796: PUSH
52797: LD_INT 1
52799: ARRAY
52800: PUSH
52801: FOR_TO
52802: IFFALSE 52864
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52804: LD_ADDR_VAR 0 3
52808: PUSH
52809: LD_VAR 0 3
52813: PPUSH
52814: LD_VAR 0 3
52818: PUSH
52819: LD_INT 1
52821: PLUS
52822: PPUSH
52823: LD_VAR 0 5
52827: PUSH
52828: LD_INT 1
52830: ARRAY
52831: PUSH
52832: LD_VAR 0 4
52836: ARRAY
52837: PUSH
52838: LD_VAR 0 5
52842: PUSH
52843: LD_INT 2
52845: ARRAY
52846: PUSH
52847: LD_VAR 0 4
52851: ARRAY
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PPUSH
52857: CALL_OW 1
52861: ST_TO_ADDR
52862: GO 52801
52864: POP
52865: POP
// exit ;
52866: GO 52906
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52868: LD_ADDR_VAR 0 3
52872: PUSH
52873: LD_VAR 0 5
52877: PUSH
52878: LD_INT 1
52880: ARRAY
52881: PUSH
52882: LD_INT 1
52884: ARRAY
52885: PUSH
52886: LD_VAR 0 5
52890: PUSH
52891: LD_INT 2
52893: ARRAY
52894: PUSH
52895: LD_INT 1
52897: ARRAY
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: EMPTY
52904: LIST
52905: ST_TO_ADDR
// end ;
52906: LD_VAR 0 3
52910: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52911: LD_INT 0
52913: PPUSH
52914: PPUSH
// list := AreaToList ( area , 0 ) ;
52915: LD_ADDR_VAR 0 4
52919: PUSH
52920: LD_VAR 0 1
52924: PPUSH
52925: LD_INT 0
52927: PPUSH
52928: CALL_OW 517
52932: ST_TO_ADDR
// if not list then
52933: LD_VAR 0 4
52937: NOT
52938: IFFALSE 52942
// exit ;
52940: GO 52983
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52942: LD_ADDR_VAR 0 3
52946: PUSH
52947: LD_VAR 0 4
52951: PUSH
52952: LD_INT 1
52954: ARRAY
52955: PUSH
52956: LD_INT 1
52958: ARRAY
52959: PUSH
52960: LD_VAR 0 4
52964: PUSH
52965: LD_INT 2
52967: ARRAY
52968: PUSH
52969: LD_INT 1
52971: ARRAY
52972: PUSH
52973: LD_VAR 0 2
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: LIST
52982: ST_TO_ADDR
// end ;
52983: LD_VAR 0 3
52987: RET
// export function First ( array ) ; begin
52988: LD_INT 0
52990: PPUSH
// if not array then
52991: LD_VAR 0 1
52995: NOT
52996: IFFALSE 53000
// exit ;
52998: GO 53014
// result := array [ 1 ] ;
53000: LD_ADDR_VAR 0 2
53004: PUSH
53005: LD_VAR 0 1
53009: PUSH
53010: LD_INT 1
53012: ARRAY
53013: ST_TO_ADDR
// end ;
53014: LD_VAR 0 2
53018: RET
// export function Last ( array ) ; begin
53019: LD_INT 0
53021: PPUSH
// if not array then
53022: LD_VAR 0 1
53026: NOT
53027: IFFALSE 53031
// exit ;
53029: GO 53047
// result := array [ array ] ;
53031: LD_ADDR_VAR 0 2
53035: PUSH
53036: LD_VAR 0 1
53040: PUSH
53041: LD_VAR 0 1
53045: ARRAY
53046: ST_TO_ADDR
// end ;
53047: LD_VAR 0 2
53051: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53052: LD_INT 0
53054: PPUSH
53055: PPUSH
// result := [ ] ;
53056: LD_ADDR_VAR 0 5
53060: PUSH
53061: EMPTY
53062: ST_TO_ADDR
// if not array then
53063: LD_VAR 0 1
53067: NOT
53068: IFFALSE 53072
// exit ;
53070: GO 53184
// for i := 1 to array do
53072: LD_ADDR_VAR 0 6
53076: PUSH
53077: DOUBLE
53078: LD_INT 1
53080: DEC
53081: ST_TO_ADDR
53082: LD_VAR 0 1
53086: PUSH
53087: FOR_TO
53088: IFFALSE 53182
// if array [ i ] [ index ] = value then
53090: LD_VAR 0 1
53094: PUSH
53095: LD_VAR 0 6
53099: ARRAY
53100: PUSH
53101: LD_VAR 0 2
53105: ARRAY
53106: PUSH
53107: LD_VAR 0 3
53111: EQUAL
53112: IFFALSE 53180
// begin if indexColumn then
53114: LD_VAR 0 4
53118: IFFALSE 53154
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53120: LD_ADDR_VAR 0 5
53124: PUSH
53125: LD_VAR 0 5
53129: PPUSH
53130: LD_VAR 0 1
53134: PUSH
53135: LD_VAR 0 6
53139: ARRAY
53140: PUSH
53141: LD_VAR 0 4
53145: ARRAY
53146: PPUSH
53147: CALL 48192 0 2
53151: ST_TO_ADDR
53152: GO 53180
// result := Join ( result , array [ i ] ) ;
53154: LD_ADDR_VAR 0 5
53158: PUSH
53159: LD_VAR 0 5
53163: PPUSH
53164: LD_VAR 0 1
53168: PUSH
53169: LD_VAR 0 6
53173: ARRAY
53174: PPUSH
53175: CALL 48192 0 2
53179: ST_TO_ADDR
// end ;
53180: GO 53087
53182: POP
53183: POP
// end ;
53184: LD_VAR 0 5
53188: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53189: LD_INT 0
53191: PPUSH
// if not vehicles or not parkingPoint then
53192: LD_VAR 0 1
53196: NOT
53197: IFTRUE 53206
53199: PUSH
53200: LD_VAR 0 2
53204: NOT
53205: OR
53206: IFFALSE 53210
// exit ;
53208: GO 53308
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53210: LD_ADDR_VAR 0 1
53214: PUSH
53215: LD_VAR 0 1
53219: PPUSH
53220: LD_INT 50
53222: PUSH
53223: EMPTY
53224: LIST
53225: PUSH
53226: LD_INT 3
53228: PUSH
53229: LD_INT 92
53231: PUSH
53232: LD_VAR 0 2
53236: PUSH
53237: LD_INT 1
53239: ARRAY
53240: PUSH
53241: LD_VAR 0 2
53245: PUSH
53246: LD_INT 2
53248: ARRAY
53249: PUSH
53250: LD_INT 8
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PPUSH
53267: CALL_OW 72
53271: ST_TO_ADDR
// if not vehicles then
53272: LD_VAR 0 1
53276: NOT
53277: IFFALSE 53281
// exit ;
53279: GO 53308
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53281: LD_VAR 0 1
53285: PPUSH
53286: LD_VAR 0 2
53290: PUSH
53291: LD_INT 1
53293: ARRAY
53294: PPUSH
53295: LD_VAR 0 2
53299: PUSH
53300: LD_INT 2
53302: ARRAY
53303: PPUSH
53304: CALL_OW 111
// end ;
53308: LD_VAR 0 3
53312: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53313: LD_INT 0
53315: PPUSH
53316: PPUSH
53317: PPUSH
// if not side or not area then
53318: LD_VAR 0 1
53322: NOT
53323: IFTRUE 53332
53325: PUSH
53326: LD_VAR 0 2
53330: NOT
53331: OR
53332: IFFALSE 53336
// exit ;
53334: GO 53455
// tmp := AreaToList ( area , 0 ) ;
53336: LD_ADDR_VAR 0 5
53340: PUSH
53341: LD_VAR 0 2
53345: PPUSH
53346: LD_INT 0
53348: PPUSH
53349: CALL_OW 517
53353: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53354: LD_ADDR_VAR 0 4
53358: PUSH
53359: DOUBLE
53360: LD_INT 1
53362: DEC
53363: ST_TO_ADDR
53364: LD_VAR 0 5
53368: PUSH
53369: LD_INT 1
53371: ARRAY
53372: PUSH
53373: FOR_TO
53374: IFFALSE 53453
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53376: LD_VAR 0 5
53380: PUSH
53381: LD_INT 1
53383: ARRAY
53384: PUSH
53385: LD_VAR 0 4
53389: ARRAY
53390: PPUSH
53391: LD_VAR 0 5
53395: PUSH
53396: LD_INT 2
53398: ARRAY
53399: PUSH
53400: LD_VAR 0 4
53404: ARRAY
53405: PPUSH
53406: CALL_OW 351
53410: IFFALSE 53451
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53412: LD_VAR 0 5
53416: PUSH
53417: LD_INT 1
53419: ARRAY
53420: PUSH
53421: LD_VAR 0 4
53425: ARRAY
53426: PPUSH
53427: LD_VAR 0 5
53431: PUSH
53432: LD_INT 2
53434: ARRAY
53435: PUSH
53436: LD_VAR 0 4
53440: ARRAY
53441: PPUSH
53442: LD_VAR 0 1
53446: PPUSH
53447: CALL_OW 244
// end ;
53451: GO 53373
53453: POP
53454: POP
// end ;
53455: LD_VAR 0 3
53459: RET
// export function UniqueArray ( array ) ; var i ; begin
53460: LD_INT 0
53462: PPUSH
53463: PPUSH
// result := [ ] ;
53464: LD_ADDR_VAR 0 2
53468: PUSH
53469: EMPTY
53470: ST_TO_ADDR
// if not array then
53471: LD_VAR 0 1
53475: NOT
53476: IFFALSE 53480
// exit ;
53478: GO 53541
// for i := 1 to array do
53480: LD_ADDR_VAR 0 3
53484: PUSH
53485: DOUBLE
53486: LD_INT 1
53488: DEC
53489: ST_TO_ADDR
53490: LD_VAR 0 1
53494: PUSH
53495: FOR_TO
53496: IFFALSE 53539
// if not array [ i ] in result then
53498: LD_VAR 0 1
53502: PUSH
53503: LD_VAR 0 3
53507: ARRAY
53508: PUSH
53509: LD_VAR 0 2
53513: IN
53514: NOT
53515: IFFALSE 53537
// result := Join ( result , i ) ;
53517: LD_ADDR_VAR 0 2
53521: PUSH
53522: LD_VAR 0 2
53526: PPUSH
53527: LD_VAR 0 3
53531: PPUSH
53532: CALL 48192 0 2
53536: ST_TO_ADDR
53537: GO 53495
53539: POP
53540: POP
// end ; end_of_file
53541: LD_VAR 0 2
53545: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53546: LD_VAR 0 1
53550: PUSH
53551: LD_INT 200
53553: DOUBLE
53554: GREATEREQUAL
53555: IFFALSE 53563
53557: LD_INT 299
53559: DOUBLE
53560: LESSEQUAL
53561: IFTRUE 53565
53563: GO 53597
53565: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53566: LD_VAR 0 1
53570: PPUSH
53571: LD_VAR 0 2
53575: PPUSH
53576: LD_VAR 0 3
53580: PPUSH
53581: LD_VAR 0 4
53585: PPUSH
53586: LD_VAR 0 5
53590: PPUSH
53591: CALL 54378 0 5
53595: GO 53674
53597: LD_INT 300
53599: DOUBLE
53600: GREATEREQUAL
53601: IFFALSE 53609
53603: LD_INT 399
53605: DOUBLE
53606: LESSEQUAL
53607: IFTRUE 53611
53609: GO 53673
53611: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53612: LD_VAR 0 1
53616: PPUSH
53617: LD_VAR 0 2
53621: PPUSH
53622: LD_VAR 0 3
53626: PPUSH
53627: LD_VAR 0 4
53631: PPUSH
53632: LD_VAR 0 5
53636: PPUSH
53637: LD_VAR 0 6
53641: PPUSH
53642: LD_VAR 0 7
53646: PPUSH
53647: LD_VAR 0 8
53651: PPUSH
53652: LD_VAR 0 9
53656: PPUSH
53657: LD_VAR 0 10
53661: PPUSH
53662: LD_VAR 0 11
53666: PPUSH
53667: CALL 61464 0 11
53671: GO 53674
53673: POP
// end ;
53674: PPOPN 11
53676: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53677: LD_VAR 0 1
53681: PPUSH
53682: LD_VAR 0 2
53686: PPUSH
53687: LD_VAR 0 3
53691: PPUSH
53692: LD_VAR 0 4
53696: PPUSH
53697: LD_VAR 0 5
53701: PPUSH
53702: CALL 53759 0 5
// end ; end_of_file
53706: PPOPN 5
53708: END
// export function SOS_UnitDestroyed ( un ) ; begin
53709: LD_INT 0
53711: PPUSH
// ComRadiation ( un ) ;
53712: LD_VAR 0 1
53716: PPUSH
53717: CALL 54798 0 1
// end ;
53721: LD_VAR 0 2
53725: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53726: LD_INT 0
53728: PPUSH
// ComRadiation ( un ) ;
53729: LD_VAR 0 1
53733: PPUSH
53734: CALL 54798 0 1
// end ;
53738: LD_VAR 0 2
53742: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53743: LD_INT 0
53745: PPUSH
// end ;
53746: LD_VAR 0 4
53750: RET
// export function SOS_Command ( cmd ) ; begin
53751: LD_INT 0
53753: PPUSH
// end ;
53754: LD_VAR 0 2
53758: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53759: LD_INT 0
53761: PPUSH
// end ;
53762: LD_VAR 0 6
53766: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53767: LD_INT 0
53769: PPUSH
53770: PPUSH
53771: PPUSH
53772: PPUSH
// if not vehicle or not factory then
53773: LD_VAR 0 1
53777: NOT
53778: IFTRUE 53787
53780: PUSH
53781: LD_VAR 0 2
53785: NOT
53786: OR
53787: IFFALSE 53791
// exit ;
53789: GO 54373
// if not factoryWaypoints then
53791: LD_EXP 59
53795: NOT
53796: IFFALSE 53800
// exit ;
53798: GO 54373
// for i := 1 to Count ( factoryWaypoints ) do
53800: LD_ADDR_VAR 0 4
53804: PUSH
53805: DOUBLE
53806: LD_INT 1
53808: DEC
53809: ST_TO_ADDR
53810: LD_EXP 59
53814: PPUSH
53815: CALL 12260 0 1
53819: PUSH
53820: FOR_TO
53821: IFFALSE 54371
// if factoryWaypoints [ i ] [ 2 ] = factory then
53823: LD_EXP 59
53827: PUSH
53828: LD_VAR 0 4
53832: ARRAY
53833: PUSH
53834: LD_INT 2
53836: ARRAY
53837: PUSH
53838: LD_VAR 0 2
53842: EQUAL
53843: IFFALSE 54369
// begin if GetControl ( vehicle ) = control_manual then
53845: LD_VAR 0 1
53849: PPUSH
53850: CALL_OW 263
53854: PUSH
53855: LD_INT 1
53857: EQUAL
53858: IFFALSE 54222
// begin driver := IsDrivenBy ( vehicle ) ;
53860: LD_ADDR_VAR 0 5
53864: PUSH
53865: LD_VAR 0 1
53869: PPUSH
53870: CALL_OW 311
53874: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
53875: LD_VAR 0 5
53879: PUSH
53880: LD_EXP 60
53884: IN
53885: IFTRUE 53899
53887: PUSH
53888: LD_VAR 0 1
53892: PUSH
53893: LD_EXP 60
53897: IN
53898: OR
53899: IFFALSE 53905
// exit ;
53901: POP
53902: POP
53903: GO 54373
// if not HasTask ( driver ) then
53905: LD_VAR 0 5
53909: PPUSH
53910: CALL_OW 314
53914: NOT
53915: IFFALSE 54220
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
53917: LD_ADDR_EXP 60
53921: PUSH
53922: LD_EXP 60
53926: PPUSH
53927: LD_VAR 0 5
53931: PPUSH
53932: CALL 48192 0 2
53936: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
53937: LD_ADDR_EXP 60
53941: PUSH
53942: LD_EXP 60
53946: PPUSH
53947: LD_VAR 0 1
53951: PPUSH
53952: CALL 48192 0 2
53956: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53957: LD_ADDR_VAR 0 6
53961: PUSH
53962: LD_EXP 59
53966: PUSH
53967: LD_VAR 0 4
53971: ARRAY
53972: PUSH
53973: LD_INT 3
53975: ARRAY
53976: PPUSH
53977: LD_EXP 59
53981: PUSH
53982: LD_VAR 0 4
53986: ARRAY
53987: PUSH
53988: LD_INT 4
53990: ARRAY
53991: PPUSH
53992: CALL_OW 428
53996: ST_TO_ADDR
// if hex then
53997: LD_VAR 0 6
54001: IFFALSE 54019
// ComMoveUnit ( driver , hex ) else
54003: LD_VAR 0 5
54007: PPUSH
54008: LD_VAR 0 6
54012: PPUSH
54013: CALL_OW 112
54017: GO 54103
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54019: LD_VAR 0 1
54023: PPUSH
54024: LD_EXP 59
54028: PUSH
54029: LD_VAR 0 4
54033: ARRAY
54034: PUSH
54035: LD_INT 3
54037: ARRAY
54038: PPUSH
54039: LD_EXP 59
54043: PUSH
54044: LD_VAR 0 4
54048: ARRAY
54049: PUSH
54050: LD_INT 4
54052: ARRAY
54053: PPUSH
54054: CALL_OW 297
54058: PUSH
54059: LD_INT 0
54061: GREATER
54062: IFFALSE 54103
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54064: LD_VAR 0 5
54068: PPUSH
54069: LD_EXP 59
54073: PUSH
54074: LD_VAR 0 4
54078: ARRAY
54079: PUSH
54080: LD_INT 3
54082: ARRAY
54083: PPUSH
54084: LD_EXP 59
54088: PUSH
54089: LD_VAR 0 4
54093: ARRAY
54094: PUSH
54095: LD_INT 4
54097: ARRAY
54098: PPUSH
54099: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54103: LD_VAR 0 5
54107: PPUSH
54108: CALL_OW 181
// if Multiplayer then
54112: LD_OWVAR 4
54116: IFFALSE 54165
// begin repeat wait ( 10 ) ;
54118: LD_INT 10
54120: PPUSH
54121: CALL_OW 67
// until not IsInUnit ( driver ) ;
54125: LD_VAR 0 5
54129: PPUSH
54130: CALL_OW 310
54134: NOT
54135: IFFALSE 54118
// if not HasTask ( driver ) then
54137: LD_VAR 0 5
54141: PPUSH
54142: CALL_OW 314
54146: NOT
54147: IFFALSE 54163
// ComEnterUnit ( driver , factory ) ;
54149: LD_VAR 0 5
54153: PPUSH
54154: LD_VAR 0 2
54158: PPUSH
54159: CALL_OW 120
// end else
54163: GO 54179
// AddComEnterUnit ( driver , factory ) ;
54165: LD_VAR 0 5
54169: PPUSH
54170: LD_VAR 0 2
54174: PPUSH
54175: CALL_OW 180
// wait ( 0 0$1 ) ;
54179: LD_INT 35
54181: PPUSH
54182: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54186: LD_ADDR_EXP 60
54190: PUSH
54191: LD_EXP 60
54195: PUSH
54196: LD_VAR 0 5
54200: DIFF
54201: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54202: LD_ADDR_EXP 60
54206: PUSH
54207: LD_EXP 60
54211: PUSH
54212: LD_VAR 0 1
54216: DIFF
54217: ST_TO_ADDR
// break ;
54218: GO 54371
// end ; end else
54220: GO 54369
// if GetControl ( vehicle ) = control_remote then
54222: LD_VAR 0 1
54226: PPUSH
54227: CALL_OW 263
54231: PUSH
54232: LD_INT 2
54234: EQUAL
54235: IFFALSE 54321
// begin wait ( 0 0$2 ) ;
54237: LD_INT 70
54239: PPUSH
54240: CALL_OW 67
// repeat wait ( 10 ) ;
54244: LD_INT 10
54246: PPUSH
54247: CALL_OW 67
// Connect ( vehicle ) ;
54251: LD_VAR 0 1
54255: PPUSH
54256: CALL 18504 0 1
// until IsControledBy ( vehicle ) ;
54260: LD_VAR 0 1
54264: PPUSH
54265: CALL_OW 312
54269: IFFALSE 54244
// wait ( 10 ) ;
54271: LD_INT 10
54273: PPUSH
54274: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54278: LD_VAR 0 1
54282: PPUSH
54283: LD_EXP 59
54287: PUSH
54288: LD_VAR 0 4
54292: ARRAY
54293: PUSH
54294: LD_INT 3
54296: ARRAY
54297: PPUSH
54298: LD_EXP 59
54302: PUSH
54303: LD_VAR 0 4
54307: ARRAY
54308: PUSH
54309: LD_INT 4
54311: ARRAY
54312: PPUSH
54313: CALL_OW 111
// break ;
54317: GO 54371
// end else
54319: GO 54369
// begin wait ( 0 0$3 ) ;
54321: LD_INT 105
54323: PPUSH
54324: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54328: LD_VAR 0 1
54332: PPUSH
54333: LD_EXP 59
54337: PUSH
54338: LD_VAR 0 4
54342: ARRAY
54343: PUSH
54344: LD_INT 3
54346: ARRAY
54347: PPUSH
54348: LD_EXP 59
54352: PUSH
54353: LD_VAR 0 4
54357: ARRAY
54358: PUSH
54359: LD_INT 4
54361: ARRAY
54362: PPUSH
54363: CALL_OW 111
// break ;
54367: GO 54371
// end ; end ;
54369: GO 53820
54371: POP
54372: POP
// end ;
54373: LD_VAR 0 3
54377: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54378: LD_INT 0
54380: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54381: LD_VAR 0 1
54385: PUSH
54386: LD_INT 250
54388: EQUAL
54389: IFFALSE 54406
54391: PUSH
54392: LD_VAR 0 2
54396: PPUSH
54397: CALL_OW 264
54401: PUSH
54402: LD_INT 81
54404: EQUAL
54405: AND
54406: IFFALSE 54427
// MinerPlaceMine ( unit , x , y ) ;
54408: LD_VAR 0 2
54412: PPUSH
54413: LD_VAR 0 4
54417: PPUSH
54418: LD_VAR 0 5
54422: PPUSH
54423: CALL 57559 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54427: LD_VAR 0 1
54431: PUSH
54432: LD_INT 251
54434: EQUAL
54435: IFFALSE 54452
54437: PUSH
54438: LD_VAR 0 2
54442: PPUSH
54443: CALL_OW 264
54447: PUSH
54448: LD_INT 81
54450: EQUAL
54451: AND
54452: IFFALSE 54473
// MinerDetonateMine ( unit , x , y ) ;
54454: LD_VAR 0 2
54458: PPUSH
54459: LD_VAR 0 4
54463: PPUSH
54464: LD_VAR 0 5
54468: PPUSH
54469: CALL 57838 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54473: LD_VAR 0 1
54477: PUSH
54478: LD_INT 252
54480: EQUAL
54481: IFFALSE 54498
54483: PUSH
54484: LD_VAR 0 2
54488: PPUSH
54489: CALL_OW 264
54493: PUSH
54494: LD_INT 81
54496: EQUAL
54497: AND
54498: IFFALSE 54519
// MinerCreateMinefield ( unit , x , y ) ;
54500: LD_VAR 0 2
54504: PPUSH
54505: LD_VAR 0 4
54509: PPUSH
54510: LD_VAR 0 5
54514: PPUSH
54515: CALL 58257 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54519: LD_VAR 0 1
54523: PUSH
54524: LD_INT 253
54526: EQUAL
54527: IFFALSE 54544
54529: PUSH
54530: LD_VAR 0 2
54534: PPUSH
54535: CALL_OW 257
54539: PUSH
54540: LD_INT 5
54542: EQUAL
54543: AND
54544: IFFALSE 54565
// ComBinocular ( unit , x , y ) ;
54546: LD_VAR 0 2
54550: PPUSH
54551: LD_VAR 0 4
54555: PPUSH
54556: LD_VAR 0 5
54560: PPUSH
54561: CALL 58632 0 3
// if selectedUnit then
54565: LD_VAR 0 3
54569: IFFALSE 54629
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54571: LD_VAR 0 1
54575: PUSH
54576: LD_INT 254
54578: EQUAL
54579: IFFALSE 54596
54581: PUSH
54582: LD_VAR 0 2
54586: PPUSH
54587: CALL_OW 264
54591: PUSH
54592: LD_INT 99
54594: EQUAL
54595: AND
54596: IFFALSE 54613
54598: PUSH
54599: LD_VAR 0 3
54603: PPUSH
54604: CALL_OW 263
54608: PUSH
54609: LD_INT 3
54611: EQUAL
54612: AND
54613: IFFALSE 54629
// HackDestroyVehicle ( unit , selectedUnit ) ;
54615: LD_VAR 0 2
54619: PPUSH
54620: LD_VAR 0 3
54624: PPUSH
54625: CALL 56919 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54629: LD_VAR 0 1
54633: PUSH
54634: LD_INT 255
54636: EQUAL
54637: IFFALSE 54661
54639: PUSH
54640: LD_VAR 0 2
54644: PPUSH
54645: CALL_OW 264
54649: PUSH
54650: LD_INT 14
54652: PUSH
54653: LD_INT 53
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: IN
54660: AND
54661: IFFALSE 54679
54663: PUSH
54664: LD_VAR 0 4
54668: PPUSH
54669: LD_VAR 0 5
54673: PPUSH
54674: CALL_OW 488
54678: AND
54679: IFFALSE 54703
// CutTreeXYR ( unit , x , y , 12 ) ;
54681: LD_VAR 0 2
54685: PPUSH
54686: LD_VAR 0 4
54690: PPUSH
54691: LD_VAR 0 5
54695: PPUSH
54696: LD_INT 12
54698: PPUSH
54699: CALL 54894 0 4
// if cmd = 256 then
54703: LD_VAR 0 1
54707: PUSH
54708: LD_INT 256
54710: EQUAL
54711: IFFALSE 54732
// SetFactoryWaypoint ( unit , x , y ) ;
54713: LD_VAR 0 2
54717: PPUSH
54718: LD_VAR 0 4
54722: PPUSH
54723: LD_VAR 0 5
54727: PPUSH
54728: CALL 61472 0 3
// if cmd = 257 then
54732: LD_VAR 0 1
54736: PUSH
54737: LD_INT 257
54739: EQUAL
54740: IFFALSE 54761
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54742: LD_VAR 0 2
54746: PPUSH
54747: LD_VAR 0 4
54751: PPUSH
54752: LD_VAR 0 5
54756: PPUSH
54757: CALL 61968 0 3
// if cmd = 258 then
54761: LD_VAR 0 1
54765: PUSH
54766: LD_INT 258
54768: EQUAL
54769: IFFALSE 54793
// BurnTreeXYR ( unit , x , y , 8 ) ;
54771: LD_VAR 0 2
54775: PPUSH
54776: LD_VAR 0 4
54780: PPUSH
54781: LD_VAR 0 5
54785: PPUSH
54786: LD_INT 8
54788: PPUSH
54789: CALL 55294 0 4
// end ;
54793: LD_VAR 0 6
54797: RET
// export function ComRadiation ( un ) ; var eff ; begin
54798: LD_INT 0
54800: PPUSH
54801: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54802: LD_VAR 0 1
54806: PPUSH
54807: CALL_OW 264
54811: PUSH
54812: LD_INT 91
54814: NONEQUAL
54815: IFFALSE 54819
// exit ;
54817: GO 54889
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54819: LD_INT 68
54821: PPUSH
54822: LD_VAR 0 1
54826: PPUSH
54827: CALL_OW 255
54831: PPUSH
54832: CALL_OW 321
54836: PUSH
54837: LD_INT 2
54839: EQUAL
54840: IFFALSE 54852
// eff := 50 else
54842: LD_ADDR_VAR 0 3
54846: PUSH
54847: LD_INT 50
54849: ST_TO_ADDR
54850: GO 54860
// eff := 25 ;
54852: LD_ADDR_VAR 0 3
54856: PUSH
54857: LD_INT 25
54859: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54860: LD_VAR 0 1
54864: PPUSH
54865: CALL_OW 250
54869: PPUSH
54870: LD_VAR 0 1
54874: PPUSH
54875: CALL_OW 251
54879: PPUSH
54880: LD_VAR 0 3
54884: PPUSH
54885: CALL_OW 495
// end ;
54889: LD_VAR 0 2
54893: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54894: LD_INT 0
54896: PPUSH
54897: PPUSH
54898: PPUSH
54899: PPUSH
54900: PPUSH
54901: PPUSH
54902: PPUSH
54903: PPUSH
54904: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54905: LD_VAR 0 1
54909: PPUSH
54910: CALL_OW 302
54914: NOT
54915: IFTRUE 54934
54917: PUSH
54918: LD_VAR 0 2
54922: PPUSH
54923: LD_VAR 0 3
54927: PPUSH
54928: CALL_OW 488
54932: NOT
54933: OR
54934: IFTRUE 54943
54936: PUSH
54937: LD_VAR 0 4
54941: NOT
54942: OR
54943: IFFALSE 54947
// exit ;
54945: GO 55289
// list := [ ] ;
54947: LD_ADDR_VAR 0 13
54951: PUSH
54952: EMPTY
54953: ST_TO_ADDR
// if x - r < 0 then
54954: LD_VAR 0 2
54958: PUSH
54959: LD_VAR 0 4
54963: MINUS
54964: PUSH
54965: LD_INT 0
54967: LESS
54968: IFFALSE 54980
// min_x := 0 else
54970: LD_ADDR_VAR 0 7
54974: PUSH
54975: LD_INT 0
54977: ST_TO_ADDR
54978: GO 54996
// min_x := x - r ;
54980: LD_ADDR_VAR 0 7
54984: PUSH
54985: LD_VAR 0 2
54989: PUSH
54990: LD_VAR 0 4
54994: MINUS
54995: ST_TO_ADDR
// if y - r < 0 then
54996: LD_VAR 0 3
55000: PUSH
55001: LD_VAR 0 4
55005: MINUS
55006: PUSH
55007: LD_INT 0
55009: LESS
55010: IFFALSE 55022
// min_y := 0 else
55012: LD_ADDR_VAR 0 8
55016: PUSH
55017: LD_INT 0
55019: ST_TO_ADDR
55020: GO 55038
// min_y := y - r ;
55022: LD_ADDR_VAR 0 8
55026: PUSH
55027: LD_VAR 0 3
55031: PUSH
55032: LD_VAR 0 4
55036: MINUS
55037: ST_TO_ADDR
// max_x := x + r ;
55038: LD_ADDR_VAR 0 9
55042: PUSH
55043: LD_VAR 0 2
55047: PUSH
55048: LD_VAR 0 4
55052: PLUS
55053: ST_TO_ADDR
// max_y := y + r ;
55054: LD_ADDR_VAR 0 10
55058: PUSH
55059: LD_VAR 0 3
55063: PUSH
55064: LD_VAR 0 4
55068: PLUS
55069: ST_TO_ADDR
// for _x = min_x to max_x do
55070: LD_ADDR_VAR 0 11
55074: PUSH
55075: DOUBLE
55076: LD_VAR 0 7
55080: DEC
55081: ST_TO_ADDR
55082: LD_VAR 0 9
55086: PUSH
55087: FOR_TO
55088: IFFALSE 55207
// for _y = min_y to max_y do
55090: LD_ADDR_VAR 0 12
55094: PUSH
55095: DOUBLE
55096: LD_VAR 0 8
55100: DEC
55101: ST_TO_ADDR
55102: LD_VAR 0 10
55106: PUSH
55107: FOR_TO
55108: IFFALSE 55203
// begin if not ValidHex ( _x , _y ) then
55110: LD_VAR 0 11
55114: PPUSH
55115: LD_VAR 0 12
55119: PPUSH
55120: CALL_OW 488
55124: NOT
55125: IFFALSE 55129
// continue ;
55127: GO 55107
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55129: LD_VAR 0 11
55133: PPUSH
55134: LD_VAR 0 12
55138: PPUSH
55139: CALL_OW 351
55143: IFFALSE 55161
55145: PUSH
55146: LD_VAR 0 11
55150: PPUSH
55151: LD_VAR 0 12
55155: PPUSH
55156: CALL_OW 554
55160: AND
55161: IFFALSE 55201
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55163: LD_ADDR_VAR 0 13
55167: PUSH
55168: LD_VAR 0 13
55172: PPUSH
55173: LD_VAR 0 13
55177: PUSH
55178: LD_INT 1
55180: PLUS
55181: PPUSH
55182: LD_VAR 0 11
55186: PUSH
55187: LD_VAR 0 12
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PPUSH
55196: CALL_OW 2
55200: ST_TO_ADDR
// end ;
55201: GO 55107
55203: POP
55204: POP
55205: GO 55087
55207: POP
55208: POP
// if not list then
55209: LD_VAR 0 13
55213: NOT
55214: IFFALSE 55218
// exit ;
55216: GO 55289
// for i in list do
55218: LD_ADDR_VAR 0 6
55222: PUSH
55223: LD_VAR 0 13
55227: PUSH
55228: FOR_IN
55229: IFFALSE 55287
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55231: LD_VAR 0 1
55235: PPUSH
55236: LD_STRING M
55238: PUSH
55239: LD_VAR 0 6
55243: PUSH
55244: LD_INT 1
55246: ARRAY
55247: PUSH
55248: LD_VAR 0 6
55252: PUSH
55253: LD_INT 2
55255: ARRAY
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: PUSH
55278: EMPTY
55279: LIST
55280: PPUSH
55281: CALL_OW 447
55285: GO 55228
55287: POP
55288: POP
// end ;
55289: LD_VAR 0 5
55293: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55294: LD_INT 0
55296: PPUSH
55297: PPUSH
55298: PPUSH
55299: PPUSH
55300: PPUSH
55301: PPUSH
55302: PPUSH
55303: PPUSH
55304: PPUSH
55305: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55306: LD_VAR 0 1
55310: PPUSH
55311: CALL_OW 302
55315: NOT
55316: IFTRUE 55335
55318: PUSH
55319: LD_VAR 0 2
55323: PPUSH
55324: LD_VAR 0 3
55328: PPUSH
55329: CALL_OW 488
55333: NOT
55334: OR
55335: IFTRUE 55344
55337: PUSH
55338: LD_VAR 0 4
55342: NOT
55343: OR
55344: IFFALSE 55348
// exit ;
55346: GO 55865
// list := [ ] ;
55348: LD_ADDR_VAR 0 13
55352: PUSH
55353: EMPTY
55354: ST_TO_ADDR
// if x - r < 0 then
55355: LD_VAR 0 2
55359: PUSH
55360: LD_VAR 0 4
55364: MINUS
55365: PUSH
55366: LD_INT 0
55368: LESS
55369: IFFALSE 55381
// min_x := 0 else
55371: LD_ADDR_VAR 0 7
55375: PUSH
55376: LD_INT 0
55378: ST_TO_ADDR
55379: GO 55397
// min_x := x - r ;
55381: LD_ADDR_VAR 0 7
55385: PUSH
55386: LD_VAR 0 2
55390: PUSH
55391: LD_VAR 0 4
55395: MINUS
55396: ST_TO_ADDR
// if y - r < 0 then
55397: LD_VAR 0 3
55401: PUSH
55402: LD_VAR 0 4
55406: MINUS
55407: PUSH
55408: LD_INT 0
55410: LESS
55411: IFFALSE 55423
// min_y := 0 else
55413: LD_ADDR_VAR 0 8
55417: PUSH
55418: LD_INT 0
55420: ST_TO_ADDR
55421: GO 55439
// min_y := y - r ;
55423: LD_ADDR_VAR 0 8
55427: PUSH
55428: LD_VAR 0 3
55432: PUSH
55433: LD_VAR 0 4
55437: MINUS
55438: ST_TO_ADDR
// max_x := x + r ;
55439: LD_ADDR_VAR 0 9
55443: PUSH
55444: LD_VAR 0 2
55448: PUSH
55449: LD_VAR 0 4
55453: PLUS
55454: ST_TO_ADDR
// max_y := y + r ;
55455: LD_ADDR_VAR 0 10
55459: PUSH
55460: LD_VAR 0 3
55464: PUSH
55465: LD_VAR 0 4
55469: PLUS
55470: ST_TO_ADDR
// for _x = min_x to max_x do
55471: LD_ADDR_VAR 0 11
55475: PUSH
55476: DOUBLE
55477: LD_VAR 0 7
55481: DEC
55482: ST_TO_ADDR
55483: LD_VAR 0 9
55487: PUSH
55488: FOR_TO
55489: IFFALSE 55608
// for _y = min_y to max_y do
55491: LD_ADDR_VAR 0 12
55495: PUSH
55496: DOUBLE
55497: LD_VAR 0 8
55501: DEC
55502: ST_TO_ADDR
55503: LD_VAR 0 10
55507: PUSH
55508: FOR_TO
55509: IFFALSE 55604
// begin if not ValidHex ( _x , _y ) then
55511: LD_VAR 0 11
55515: PPUSH
55516: LD_VAR 0 12
55520: PPUSH
55521: CALL_OW 488
55525: NOT
55526: IFFALSE 55530
// continue ;
55528: GO 55508
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55530: LD_VAR 0 11
55534: PPUSH
55535: LD_VAR 0 12
55539: PPUSH
55540: CALL_OW 351
55544: IFFALSE 55562
55546: PUSH
55547: LD_VAR 0 11
55551: PPUSH
55552: LD_VAR 0 12
55556: PPUSH
55557: CALL_OW 554
55561: AND
55562: IFFALSE 55602
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55564: LD_ADDR_VAR 0 13
55568: PUSH
55569: LD_VAR 0 13
55573: PPUSH
55574: LD_VAR 0 13
55578: PUSH
55579: LD_INT 1
55581: PLUS
55582: PPUSH
55583: LD_VAR 0 11
55587: PUSH
55588: LD_VAR 0 12
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PPUSH
55597: CALL_OW 2
55601: ST_TO_ADDR
// end ;
55602: GO 55508
55604: POP
55605: POP
55606: GO 55488
55608: POP
55609: POP
// if not list then
55610: LD_VAR 0 13
55614: NOT
55615: IFFALSE 55619
// exit ;
55617: GO 55865
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55619: LD_ADDR_VAR 0 13
55623: PUSH
55624: LD_VAR 0 1
55628: PPUSH
55629: LD_VAR 0 13
55633: PPUSH
55634: LD_INT 1
55636: PPUSH
55637: LD_INT 1
55639: PPUSH
55640: CALL 15632 0 4
55644: ST_TO_ADDR
// ComStop ( flame ) ;
55645: LD_VAR 0 1
55649: PPUSH
55650: CALL_OW 141
// for i in list do
55654: LD_ADDR_VAR 0 6
55658: PUSH
55659: LD_VAR 0 13
55663: PUSH
55664: FOR_IN
55665: IFFALSE 55696
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55667: LD_VAR 0 1
55671: PPUSH
55672: LD_VAR 0 6
55676: PUSH
55677: LD_INT 1
55679: ARRAY
55680: PPUSH
55681: LD_VAR 0 6
55685: PUSH
55686: LD_INT 2
55688: ARRAY
55689: PPUSH
55690: CALL_OW 176
55694: GO 55664
55696: POP
55697: POP
// repeat wait ( 0 0$1 ) ;
55698: LD_INT 35
55700: PPUSH
55701: CALL_OW 67
// task := GetTaskList ( flame ) ;
55705: LD_ADDR_VAR 0 14
55709: PUSH
55710: LD_VAR 0 1
55714: PPUSH
55715: CALL_OW 437
55719: ST_TO_ADDR
// if not task then
55720: LD_VAR 0 14
55724: NOT
55725: IFFALSE 55729
// exit ;
55727: GO 55865
// if task [ 1 ] [ 1 ] <> | then
55729: LD_VAR 0 14
55733: PUSH
55734: LD_INT 1
55736: ARRAY
55737: PUSH
55738: LD_INT 1
55740: ARRAY
55741: PUSH
55742: LD_STRING |
55744: NONEQUAL
55745: IFFALSE 55749
// exit ;
55747: GO 55865
// _x := task [ 1 ] [ 2 ] ;
55749: LD_ADDR_VAR 0 11
55753: PUSH
55754: LD_VAR 0 14
55758: PUSH
55759: LD_INT 1
55761: ARRAY
55762: PUSH
55763: LD_INT 2
55765: ARRAY
55766: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55767: LD_ADDR_VAR 0 12
55771: PUSH
55772: LD_VAR 0 14
55776: PUSH
55777: LD_INT 1
55779: ARRAY
55780: PUSH
55781: LD_INT 3
55783: ARRAY
55784: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55785: LD_VAR 0 11
55789: PPUSH
55790: LD_VAR 0 12
55794: PPUSH
55795: CALL_OW 351
55799: NOT
55800: IFTRUE 55819
55802: PUSH
55803: LD_VAR 0 11
55807: PPUSH
55808: LD_VAR 0 12
55812: PPUSH
55813: CALL_OW 554
55817: NOT
55818: OR
55819: IFFALSE 55853
// begin task := Delete ( task , 1 ) ;
55821: LD_ADDR_VAR 0 14
55825: PUSH
55826: LD_VAR 0 14
55830: PPUSH
55831: LD_INT 1
55833: PPUSH
55834: CALL_OW 3
55838: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55839: LD_VAR 0 1
55843: PPUSH
55844: LD_VAR 0 14
55848: PPUSH
55849: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55853: LD_VAR 0 1
55857: PPUSH
55858: CALL_OW 314
55862: NOT
55863: IFFALSE 55698
// end ;
55865: LD_VAR 0 5
55869: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55870: LD_EXP 48
55874: NOT
55875: IFFALSE 55925
55877: GO 55879
55879: DISABLE
// begin initHack := true ;
55880: LD_ADDR_EXP 48
55884: PUSH
55885: LD_INT 1
55887: ST_TO_ADDR
// hackTanks := [ ] ;
55888: LD_ADDR_EXP 49
55892: PUSH
55893: EMPTY
55894: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55895: LD_ADDR_EXP 50
55899: PUSH
55900: EMPTY
55901: ST_TO_ADDR
// hackLimit := 3 ;
55902: LD_ADDR_EXP 51
55906: PUSH
55907: LD_INT 3
55909: ST_TO_ADDR
// hackDist := 12 ;
55910: LD_ADDR_EXP 52
55914: PUSH
55915: LD_INT 12
55917: ST_TO_ADDR
// hackCounter := [ ] ;
55918: LD_ADDR_EXP 53
55922: PUSH
55923: EMPTY
55924: ST_TO_ADDR
// end ;
55925: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55926: LD_EXP 48
55930: IFFALSE 55948
55932: PUSH
55933: LD_INT 34
55935: PUSH
55936: LD_INT 99
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PPUSH
55943: CALL_OW 69
55947: AND
55948: IFFALSE 56201
55950: GO 55952
55952: DISABLE
55953: LD_INT 0
55955: PPUSH
55956: PPUSH
// begin enable ;
55957: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55958: LD_ADDR_VAR 0 1
55962: PUSH
55963: LD_INT 34
55965: PUSH
55966: LD_INT 99
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PPUSH
55973: CALL_OW 69
55977: PUSH
55978: FOR_IN
55979: IFFALSE 56199
// begin if not i in hackTanks then
55981: LD_VAR 0 1
55985: PUSH
55986: LD_EXP 49
55990: IN
55991: NOT
55992: IFFALSE 56075
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55994: LD_ADDR_EXP 49
55998: PUSH
55999: LD_EXP 49
56003: PPUSH
56004: LD_EXP 49
56008: PUSH
56009: LD_INT 1
56011: PLUS
56012: PPUSH
56013: LD_VAR 0 1
56017: PPUSH
56018: CALL_OW 1
56022: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56023: LD_ADDR_EXP 50
56027: PUSH
56028: LD_EXP 50
56032: PPUSH
56033: LD_EXP 50
56037: PUSH
56038: LD_INT 1
56040: PLUS
56041: PPUSH
56042: EMPTY
56043: PPUSH
56044: CALL_OW 1
56048: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56049: LD_ADDR_EXP 53
56053: PUSH
56054: LD_EXP 53
56058: PPUSH
56059: LD_EXP 53
56063: PUSH
56064: LD_INT 1
56066: PLUS
56067: PPUSH
56068: EMPTY
56069: PPUSH
56070: CALL_OW 1
56074: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56075: LD_VAR 0 1
56079: PPUSH
56080: CALL_OW 302
56084: NOT
56085: IFFALSE 56098
// begin HackUnlinkAll ( i ) ;
56087: LD_VAR 0 1
56091: PPUSH
56092: CALL 56204 0 1
// continue ;
56096: GO 55978
// end ; HackCheckCapturedStatus ( i ) ;
56098: LD_VAR 0 1
56102: PPUSH
56103: CALL 56649 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56107: LD_ADDR_VAR 0 2
56111: PUSH
56112: LD_INT 81
56114: PUSH
56115: LD_VAR 0 1
56119: PPUSH
56120: CALL_OW 255
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 33
56131: PUSH
56132: LD_INT 3
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 91
56141: PUSH
56142: LD_VAR 0 1
56146: PUSH
56147: LD_EXP 52
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 50
56159: PUSH
56160: EMPTY
56161: LIST
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: PPUSH
56169: CALL_OW 69
56173: ST_TO_ADDR
// if not tmp then
56174: LD_VAR 0 2
56178: NOT
56179: IFFALSE 56183
// continue ;
56181: GO 55978
// HackLink ( i , tmp ) ;
56183: LD_VAR 0 1
56187: PPUSH
56188: LD_VAR 0 2
56192: PPUSH
56193: CALL 56340 0 2
// end ;
56197: GO 55978
56199: POP
56200: POP
// end ;
56201: PPOPN 2
56203: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56204: LD_INT 0
56206: PPUSH
56207: PPUSH
56208: PPUSH
// if not hack in hackTanks then
56209: LD_VAR 0 1
56213: PUSH
56214: LD_EXP 49
56218: IN
56219: NOT
56220: IFFALSE 56224
// exit ;
56222: GO 56335
// index := GetElementIndex ( hackTanks , hack ) ;
56224: LD_ADDR_VAR 0 4
56228: PUSH
56229: LD_EXP 49
56233: PPUSH
56234: LD_VAR 0 1
56238: PPUSH
56239: CALL 14927 0 2
56243: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56244: LD_EXP 50
56248: PUSH
56249: LD_VAR 0 4
56253: ARRAY
56254: IFFALSE 56335
// begin for i in hackTanksCaptured [ index ] do
56256: LD_ADDR_VAR 0 3
56260: PUSH
56261: LD_EXP 50
56265: PUSH
56266: LD_VAR 0 4
56270: ARRAY
56271: PUSH
56272: FOR_IN
56273: IFFALSE 56299
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56275: LD_VAR 0 3
56279: PUSH
56280: LD_INT 1
56282: ARRAY
56283: PPUSH
56284: LD_VAR 0 3
56288: PUSH
56289: LD_INT 2
56291: ARRAY
56292: PPUSH
56293: CALL_OW 235
56297: GO 56272
56299: POP
56300: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56301: LD_ADDR_EXP 50
56305: PUSH
56306: LD_EXP 50
56310: PPUSH
56311: LD_VAR 0 4
56315: PPUSH
56316: EMPTY
56317: PPUSH
56318: CALL_OW 1
56322: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56323: LD_VAR 0 1
56327: PPUSH
56328: LD_INT 0
56330: PPUSH
56331: CALL_OW 505
// end ; end ;
56335: LD_VAR 0 2
56339: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56340: LD_INT 0
56342: PPUSH
56343: PPUSH
56344: PPUSH
// if not hack in hackTanks or not vehicles then
56345: LD_VAR 0 1
56349: PUSH
56350: LD_EXP 49
56354: IN
56355: NOT
56356: IFTRUE 56365
56358: PUSH
56359: LD_VAR 0 2
56363: NOT
56364: OR
56365: IFFALSE 56369
// exit ;
56367: GO 56644
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56369: LD_ADDR_VAR 0 2
56373: PUSH
56374: LD_VAR 0 1
56378: PPUSH
56379: LD_VAR 0 2
56383: PPUSH
56384: LD_INT 1
56386: PPUSH
56387: LD_INT 1
56389: PPUSH
56390: CALL 15579 0 4
56394: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56395: LD_ADDR_VAR 0 5
56399: PUSH
56400: LD_EXP 49
56404: PPUSH
56405: LD_VAR 0 1
56409: PPUSH
56410: CALL 14927 0 2
56414: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56415: LD_EXP 50
56419: PUSH
56420: LD_VAR 0 5
56424: ARRAY
56425: PUSH
56426: LD_EXP 51
56430: LESS
56431: IFFALSE 56620
// begin for i := 1 to vehicles do
56433: LD_ADDR_VAR 0 4
56437: PUSH
56438: DOUBLE
56439: LD_INT 1
56441: DEC
56442: ST_TO_ADDR
56443: LD_VAR 0 2
56447: PUSH
56448: FOR_TO
56449: IFFALSE 56618
// begin if hackTanksCaptured [ index ] = hackLimit then
56451: LD_EXP 50
56455: PUSH
56456: LD_VAR 0 5
56460: ARRAY
56461: PUSH
56462: LD_EXP 51
56466: EQUAL
56467: IFFALSE 56471
// break ;
56469: GO 56618
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56471: LD_ADDR_EXP 53
56475: PUSH
56476: LD_EXP 53
56480: PPUSH
56481: LD_VAR 0 5
56485: PPUSH
56486: LD_EXP 53
56490: PUSH
56491: LD_VAR 0 5
56495: ARRAY
56496: PUSH
56497: LD_INT 1
56499: PLUS
56500: PPUSH
56501: CALL_OW 1
56505: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56506: LD_ADDR_EXP 50
56510: PUSH
56511: LD_EXP 50
56515: PPUSH
56516: LD_VAR 0 5
56520: PUSH
56521: LD_EXP 50
56525: PUSH
56526: LD_VAR 0 5
56530: ARRAY
56531: PUSH
56532: LD_INT 1
56534: PLUS
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PPUSH
56540: LD_VAR 0 2
56544: PUSH
56545: LD_VAR 0 4
56549: ARRAY
56550: PUSH
56551: LD_VAR 0 2
56555: PUSH
56556: LD_VAR 0 4
56560: ARRAY
56561: PPUSH
56562: CALL_OW 255
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PPUSH
56571: CALL 15144 0 3
56575: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56576: LD_VAR 0 2
56580: PUSH
56581: LD_VAR 0 4
56585: ARRAY
56586: PPUSH
56587: LD_VAR 0 1
56591: PPUSH
56592: CALL_OW 255
56596: PPUSH
56597: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56601: LD_VAR 0 2
56605: PUSH
56606: LD_VAR 0 4
56610: ARRAY
56611: PPUSH
56612: CALL_OW 141
// end ;
56616: GO 56448
56618: POP
56619: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56620: LD_VAR 0 1
56624: PPUSH
56625: LD_EXP 50
56629: PUSH
56630: LD_VAR 0 5
56634: ARRAY
56635: PUSH
56636: LD_INT 0
56638: PLUS
56639: PPUSH
56640: CALL_OW 505
// end ;
56644: LD_VAR 0 3
56648: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56649: LD_INT 0
56651: PPUSH
56652: PPUSH
56653: PPUSH
56654: PPUSH
// if not hack in hackTanks then
56655: LD_VAR 0 1
56659: PUSH
56660: LD_EXP 49
56664: IN
56665: NOT
56666: IFFALSE 56670
// exit ;
56668: GO 56914
// index := GetElementIndex ( hackTanks , hack ) ;
56670: LD_ADDR_VAR 0 4
56674: PUSH
56675: LD_EXP 49
56679: PPUSH
56680: LD_VAR 0 1
56684: PPUSH
56685: CALL 14927 0 2
56689: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56690: LD_ADDR_VAR 0 3
56694: PUSH
56695: DOUBLE
56696: LD_EXP 50
56700: PUSH
56701: LD_VAR 0 4
56705: ARRAY
56706: INC
56707: ST_TO_ADDR
56708: LD_INT 1
56710: PUSH
56711: FOR_DOWNTO
56712: IFFALSE 56888
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56714: LD_ADDR_VAR 0 5
56718: PUSH
56719: LD_EXP 50
56723: PUSH
56724: LD_VAR 0 4
56728: ARRAY
56729: PUSH
56730: LD_VAR 0 3
56734: ARRAY
56735: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56736: LD_VAR 0 5
56740: PUSH
56741: LD_INT 1
56743: ARRAY
56744: PPUSH
56745: CALL_OW 302
56749: NOT
56750: IFTRUE 56778
56752: PUSH
56753: LD_VAR 0 5
56757: PUSH
56758: LD_INT 1
56760: ARRAY
56761: PPUSH
56762: CALL_OW 255
56766: PUSH
56767: LD_VAR 0 1
56771: PPUSH
56772: CALL_OW 255
56776: NONEQUAL
56777: OR
56778: IFFALSE 56886
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56780: LD_VAR 0 5
56784: PUSH
56785: LD_INT 1
56787: ARRAY
56788: PPUSH
56789: CALL_OW 305
56793: IFFALSE 56821
56795: PUSH
56796: LD_VAR 0 5
56800: PUSH
56801: LD_INT 1
56803: ARRAY
56804: PPUSH
56805: CALL_OW 255
56809: PUSH
56810: LD_VAR 0 1
56814: PPUSH
56815: CALL_OW 255
56819: EQUAL
56820: AND
56821: IFFALSE 56845
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56823: LD_VAR 0 5
56827: PUSH
56828: LD_INT 1
56830: ARRAY
56831: PPUSH
56832: LD_VAR 0 5
56836: PUSH
56837: LD_INT 2
56839: ARRAY
56840: PPUSH
56841: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56845: LD_ADDR_EXP 50
56849: PUSH
56850: LD_EXP 50
56854: PPUSH
56855: LD_VAR 0 4
56859: PPUSH
56860: LD_EXP 50
56864: PUSH
56865: LD_VAR 0 4
56869: ARRAY
56870: PPUSH
56871: LD_VAR 0 3
56875: PPUSH
56876: CALL_OW 3
56880: PPUSH
56881: CALL_OW 1
56885: ST_TO_ADDR
// end ; end ;
56886: GO 56711
56888: POP
56889: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56890: LD_VAR 0 1
56894: PPUSH
56895: LD_EXP 50
56899: PUSH
56900: LD_VAR 0 4
56904: ARRAY
56905: PUSH
56906: LD_INT 0
56908: PLUS
56909: PPUSH
56910: CALL_OW 505
// end ;
56914: LD_VAR 0 2
56918: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56919: LD_INT 0
56921: PPUSH
56922: PPUSH
56923: PPUSH
56924: PPUSH
// if not hack in hackTanks then
56925: LD_VAR 0 1
56929: PUSH
56930: LD_EXP 49
56934: IN
56935: NOT
56936: IFFALSE 56940
// exit ;
56938: GO 57025
// index := GetElementIndex ( hackTanks , hack ) ;
56940: LD_ADDR_VAR 0 5
56944: PUSH
56945: LD_EXP 49
56949: PPUSH
56950: LD_VAR 0 1
56954: PPUSH
56955: CALL 14927 0 2
56959: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56960: LD_ADDR_VAR 0 4
56964: PUSH
56965: DOUBLE
56966: LD_INT 1
56968: DEC
56969: ST_TO_ADDR
56970: LD_EXP 50
56974: PUSH
56975: LD_VAR 0 5
56979: ARRAY
56980: PUSH
56981: FOR_TO
56982: IFFALSE 57023
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56984: LD_EXP 50
56988: PUSH
56989: LD_VAR 0 5
56993: ARRAY
56994: PUSH
56995: LD_VAR 0 4
56999: ARRAY
57000: PUSH
57001: LD_INT 1
57003: ARRAY
57004: PUSH
57005: LD_VAR 0 2
57009: EQUAL
57010: IFFALSE 57021
// KillUnit ( vehicle ) ;
57012: LD_VAR 0 2
57016: PPUSH
57017: CALL_OW 66
57021: GO 56981
57023: POP
57024: POP
// end ;
57025: LD_VAR 0 3
57029: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57030: LD_EXP 54
57034: NOT
57035: IFFALSE 57070
57037: GO 57039
57039: DISABLE
// begin initMiner := true ;
57040: LD_ADDR_EXP 54
57044: PUSH
57045: LD_INT 1
57047: ST_TO_ADDR
// minersList := [ ] ;
57048: LD_ADDR_EXP 55
57052: PUSH
57053: EMPTY
57054: ST_TO_ADDR
// minerMinesList := [ ] ;
57055: LD_ADDR_EXP 56
57059: PUSH
57060: EMPTY
57061: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57062: LD_ADDR_EXP 57
57066: PUSH
57067: LD_INT 5
57069: ST_TO_ADDR
// end ;
57070: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57071: LD_EXP 54
57075: IFFALSE 57093
57077: PUSH
57078: LD_INT 34
57080: PUSH
57081: LD_INT 81
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PPUSH
57088: CALL_OW 69
57092: AND
57093: IFFALSE 57556
57095: GO 57097
57097: DISABLE
57098: LD_INT 0
57100: PPUSH
57101: PPUSH
57102: PPUSH
57103: PPUSH
// begin enable ;
57104: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57105: LD_ADDR_VAR 0 1
57109: PUSH
57110: LD_INT 34
57112: PUSH
57113: LD_INT 81
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PPUSH
57120: CALL_OW 69
57124: PUSH
57125: FOR_IN
57126: IFFALSE 57198
// begin if not i in minersList then
57128: LD_VAR 0 1
57132: PUSH
57133: LD_EXP 55
57137: IN
57138: NOT
57139: IFFALSE 57196
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57141: LD_ADDR_EXP 55
57145: PUSH
57146: LD_EXP 55
57150: PPUSH
57151: LD_EXP 55
57155: PUSH
57156: LD_INT 1
57158: PLUS
57159: PPUSH
57160: LD_VAR 0 1
57164: PPUSH
57165: CALL_OW 1
57169: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57170: LD_ADDR_EXP 56
57174: PUSH
57175: LD_EXP 56
57179: PPUSH
57180: LD_EXP 56
57184: PUSH
57185: LD_INT 1
57187: PLUS
57188: PPUSH
57189: EMPTY
57190: PPUSH
57191: CALL_OW 1
57195: ST_TO_ADDR
// end end ;
57196: GO 57125
57198: POP
57199: POP
// for i := minerMinesList downto 1 do
57200: LD_ADDR_VAR 0 1
57204: PUSH
57205: DOUBLE
57206: LD_EXP 56
57210: INC
57211: ST_TO_ADDR
57212: LD_INT 1
57214: PUSH
57215: FOR_DOWNTO
57216: IFFALSE 57554
// begin if IsLive ( minersList [ i ] ) then
57218: LD_EXP 55
57222: PUSH
57223: LD_VAR 0 1
57227: ARRAY
57228: PPUSH
57229: CALL_OW 300
57233: IFFALSE 57261
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57235: LD_EXP 55
57239: PUSH
57240: LD_VAR 0 1
57244: ARRAY
57245: PPUSH
57246: LD_EXP 56
57250: PUSH
57251: LD_VAR 0 1
57255: ARRAY
57256: PPUSH
57257: CALL_OW 505
// if not minerMinesList [ i ] then
57261: LD_EXP 56
57265: PUSH
57266: LD_VAR 0 1
57270: ARRAY
57271: NOT
57272: IFFALSE 57276
// continue ;
57274: GO 57215
// for j := minerMinesList [ i ] downto 1 do
57276: LD_ADDR_VAR 0 2
57280: PUSH
57281: DOUBLE
57282: LD_EXP 56
57286: PUSH
57287: LD_VAR 0 1
57291: ARRAY
57292: INC
57293: ST_TO_ADDR
57294: LD_INT 1
57296: PUSH
57297: FOR_DOWNTO
57298: IFFALSE 57550
// begin side := GetSide ( minersList [ i ] ) ;
57300: LD_ADDR_VAR 0 3
57304: PUSH
57305: LD_EXP 55
57309: PUSH
57310: LD_VAR 0 1
57314: ARRAY
57315: PPUSH
57316: CALL_OW 255
57320: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57321: LD_ADDR_VAR 0 4
57325: PUSH
57326: LD_EXP 56
57330: PUSH
57331: LD_VAR 0 1
57335: ARRAY
57336: PUSH
57337: LD_VAR 0 2
57341: ARRAY
57342: PUSH
57343: LD_INT 1
57345: ARRAY
57346: PPUSH
57347: LD_EXP 56
57351: PUSH
57352: LD_VAR 0 1
57356: ARRAY
57357: PUSH
57358: LD_VAR 0 2
57362: ARRAY
57363: PUSH
57364: LD_INT 2
57366: ARRAY
57367: PPUSH
57368: CALL_OW 428
57372: ST_TO_ADDR
// if not tmp then
57373: LD_VAR 0 4
57377: NOT
57378: IFFALSE 57382
// continue ;
57380: GO 57297
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57382: LD_VAR 0 4
57386: PUSH
57387: LD_INT 81
57389: PUSH
57390: LD_VAR 0 3
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PPUSH
57399: CALL_OW 69
57403: IN
57404: IFFALSE 57454
57406: PUSH
57407: LD_EXP 56
57411: PUSH
57412: LD_VAR 0 1
57416: ARRAY
57417: PUSH
57418: LD_VAR 0 2
57422: ARRAY
57423: PUSH
57424: LD_INT 1
57426: ARRAY
57427: PPUSH
57428: LD_EXP 56
57432: PUSH
57433: LD_VAR 0 1
57437: ARRAY
57438: PUSH
57439: LD_VAR 0 2
57443: ARRAY
57444: PUSH
57445: LD_INT 2
57447: ARRAY
57448: PPUSH
57449: CALL_OW 458
57453: AND
57454: IFFALSE 57548
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57456: LD_EXP 56
57460: PUSH
57461: LD_VAR 0 1
57465: ARRAY
57466: PUSH
57467: LD_VAR 0 2
57471: ARRAY
57472: PUSH
57473: LD_INT 1
57475: ARRAY
57476: PPUSH
57477: LD_EXP 56
57481: PUSH
57482: LD_VAR 0 1
57486: ARRAY
57487: PUSH
57488: LD_VAR 0 2
57492: ARRAY
57493: PUSH
57494: LD_INT 2
57496: ARRAY
57497: PPUSH
57498: LD_VAR 0 3
57502: PPUSH
57503: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57507: LD_ADDR_EXP 56
57511: PUSH
57512: LD_EXP 56
57516: PPUSH
57517: LD_VAR 0 1
57521: PPUSH
57522: LD_EXP 56
57526: PUSH
57527: LD_VAR 0 1
57531: ARRAY
57532: PPUSH
57533: LD_VAR 0 2
57537: PPUSH
57538: CALL_OW 3
57542: PPUSH
57543: CALL_OW 1
57547: ST_TO_ADDR
// end ; end ;
57548: GO 57297
57550: POP
57551: POP
// end ;
57552: GO 57215
57554: POP
57555: POP
// end ;
57556: PPOPN 4
57558: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57559: LD_INT 0
57561: PPUSH
57562: PPUSH
// result := false ;
57563: LD_ADDR_VAR 0 4
57567: PUSH
57568: LD_INT 0
57570: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57571: LD_VAR 0 1
57575: PPUSH
57576: CALL_OW 264
57580: PUSH
57581: LD_INT 81
57583: EQUAL
57584: NOT
57585: IFFALSE 57589
// exit ;
57587: GO 57833
// index := GetElementIndex ( minersList , unit ) ;
57589: LD_ADDR_VAR 0 5
57593: PUSH
57594: LD_EXP 55
57598: PPUSH
57599: LD_VAR 0 1
57603: PPUSH
57604: CALL 14927 0 2
57608: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57609: LD_EXP 56
57613: PUSH
57614: LD_VAR 0 5
57618: ARRAY
57619: PUSH
57620: LD_EXP 57
57624: GREATEREQUAL
57625: IFFALSE 57629
// exit ;
57627: GO 57833
// ComMoveXY ( unit , x , y ) ;
57629: LD_VAR 0 1
57633: PPUSH
57634: LD_VAR 0 2
57638: PPUSH
57639: LD_VAR 0 3
57643: PPUSH
57644: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57648: LD_INT 35
57650: PPUSH
57651: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57655: LD_VAR 0 1
57659: PPUSH
57660: LD_VAR 0 2
57664: PPUSH
57665: LD_VAR 0 3
57669: PPUSH
57670: CALL 46973 0 3
57674: NOT
57675: IFFALSE 57688
57677: PUSH
57678: LD_VAR 0 1
57682: PPUSH
57683: CALL_OW 314
57687: AND
57688: IFFALSE 57692
// exit ;
57690: GO 57833
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57692: LD_VAR 0 2
57696: PPUSH
57697: LD_VAR 0 3
57701: PPUSH
57702: CALL_OW 428
57706: PUSH
57707: LD_VAR 0 1
57711: EQUAL
57712: IFFALSE 57726
57714: PUSH
57715: LD_VAR 0 1
57719: PPUSH
57720: CALL_OW 314
57724: NOT
57725: AND
57726: IFFALSE 57648
// PlaySoundXY ( x , y , PlantMine ) ;
57728: LD_VAR 0 2
57732: PPUSH
57733: LD_VAR 0 3
57737: PPUSH
57738: LD_STRING PlantMine
57740: PPUSH
57741: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57745: LD_VAR 0 2
57749: PPUSH
57750: LD_VAR 0 3
57754: PPUSH
57755: LD_VAR 0 1
57759: PPUSH
57760: CALL_OW 255
57764: PPUSH
57765: LD_INT 0
57767: PPUSH
57768: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57772: LD_ADDR_EXP 56
57776: PUSH
57777: LD_EXP 56
57781: PPUSH
57782: LD_VAR 0 5
57786: PUSH
57787: LD_EXP 56
57791: PUSH
57792: LD_VAR 0 5
57796: ARRAY
57797: PUSH
57798: LD_INT 1
57800: PLUS
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PPUSH
57806: LD_VAR 0 2
57810: PUSH
57811: LD_VAR 0 3
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PPUSH
57820: CALL 15144 0 3
57824: ST_TO_ADDR
// result := true ;
57825: LD_ADDR_VAR 0 4
57829: PUSH
57830: LD_INT 1
57832: ST_TO_ADDR
// end ;
57833: LD_VAR 0 4
57837: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57838: LD_INT 0
57840: PPUSH
57841: PPUSH
57842: PPUSH
// if not unit in minersList then
57843: LD_VAR 0 1
57847: PUSH
57848: LD_EXP 55
57852: IN
57853: NOT
57854: IFFALSE 57858
// exit ;
57856: GO 58252
// index := GetElementIndex ( minersList , unit ) ;
57858: LD_ADDR_VAR 0 6
57862: PUSH
57863: LD_EXP 55
57867: PPUSH
57868: LD_VAR 0 1
57872: PPUSH
57873: CALL 14927 0 2
57877: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57878: LD_ADDR_VAR 0 5
57882: PUSH
57883: DOUBLE
57884: LD_EXP 56
57888: PUSH
57889: LD_VAR 0 6
57893: ARRAY
57894: INC
57895: ST_TO_ADDR
57896: LD_INT 1
57898: PUSH
57899: FOR_DOWNTO
57900: IFFALSE 58063
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57902: LD_EXP 56
57906: PUSH
57907: LD_VAR 0 6
57911: ARRAY
57912: PUSH
57913: LD_VAR 0 5
57917: ARRAY
57918: PUSH
57919: LD_INT 1
57921: ARRAY
57922: PUSH
57923: LD_VAR 0 2
57927: EQUAL
57928: IFFALSE 57958
57930: PUSH
57931: LD_EXP 56
57935: PUSH
57936: LD_VAR 0 6
57940: ARRAY
57941: PUSH
57942: LD_VAR 0 5
57946: ARRAY
57947: PUSH
57948: LD_INT 2
57950: ARRAY
57951: PUSH
57952: LD_VAR 0 3
57956: EQUAL
57957: AND
57958: IFFALSE 58061
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57960: LD_EXP 56
57964: PUSH
57965: LD_VAR 0 6
57969: ARRAY
57970: PUSH
57971: LD_VAR 0 5
57975: ARRAY
57976: PUSH
57977: LD_INT 1
57979: ARRAY
57980: PPUSH
57981: LD_EXP 56
57985: PUSH
57986: LD_VAR 0 6
57990: ARRAY
57991: PUSH
57992: LD_VAR 0 5
57996: ARRAY
57997: PUSH
57998: LD_INT 2
58000: ARRAY
58001: PPUSH
58002: LD_VAR 0 1
58006: PPUSH
58007: CALL_OW 255
58011: PPUSH
58012: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58016: LD_ADDR_EXP 56
58020: PUSH
58021: LD_EXP 56
58025: PPUSH
58026: LD_VAR 0 6
58030: PPUSH
58031: LD_EXP 56
58035: PUSH
58036: LD_VAR 0 6
58040: ARRAY
58041: PPUSH
58042: LD_VAR 0 5
58046: PPUSH
58047: CALL_OW 3
58051: PPUSH
58052: CALL_OW 1
58056: ST_TO_ADDR
// exit ;
58057: POP
58058: POP
58059: GO 58252
// end ; end ;
58061: GO 57899
58063: POP
58064: POP
// for i := minerMinesList [ index ] downto 1 do
58065: LD_ADDR_VAR 0 5
58069: PUSH
58070: DOUBLE
58071: LD_EXP 56
58075: PUSH
58076: LD_VAR 0 6
58080: ARRAY
58081: INC
58082: ST_TO_ADDR
58083: LD_INT 1
58085: PUSH
58086: FOR_DOWNTO
58087: IFFALSE 58250
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58089: LD_EXP 56
58093: PUSH
58094: LD_VAR 0 6
58098: ARRAY
58099: PUSH
58100: LD_VAR 0 5
58104: ARRAY
58105: PUSH
58106: LD_INT 1
58108: ARRAY
58109: PPUSH
58110: LD_EXP 56
58114: PUSH
58115: LD_VAR 0 6
58119: ARRAY
58120: PUSH
58121: LD_VAR 0 5
58125: ARRAY
58126: PUSH
58127: LD_INT 2
58129: ARRAY
58130: PPUSH
58131: LD_VAR 0 2
58135: PPUSH
58136: LD_VAR 0 3
58140: PPUSH
58141: CALL_OW 298
58145: PUSH
58146: LD_INT 6
58148: LESS
58149: IFFALSE 58248
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58151: LD_EXP 56
58155: PUSH
58156: LD_VAR 0 6
58160: ARRAY
58161: PUSH
58162: LD_VAR 0 5
58166: ARRAY
58167: PUSH
58168: LD_INT 1
58170: ARRAY
58171: PPUSH
58172: LD_EXP 56
58176: PUSH
58177: LD_VAR 0 6
58181: ARRAY
58182: PUSH
58183: LD_VAR 0 5
58187: ARRAY
58188: PUSH
58189: LD_INT 2
58191: ARRAY
58192: PPUSH
58193: LD_VAR 0 1
58197: PPUSH
58198: CALL_OW 255
58202: PPUSH
58203: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58207: LD_ADDR_EXP 56
58211: PUSH
58212: LD_EXP 56
58216: PPUSH
58217: LD_VAR 0 6
58221: PPUSH
58222: LD_EXP 56
58226: PUSH
58227: LD_VAR 0 6
58231: ARRAY
58232: PPUSH
58233: LD_VAR 0 5
58237: PPUSH
58238: CALL_OW 3
58242: PPUSH
58243: CALL_OW 1
58247: ST_TO_ADDR
// end ; end ;
58248: GO 58086
58250: POP
58251: POP
// end ;
58252: LD_VAR 0 4
58256: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58257: LD_INT 0
58259: PPUSH
58260: PPUSH
58261: PPUSH
58262: PPUSH
58263: PPUSH
58264: PPUSH
58265: PPUSH
58266: PPUSH
58267: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58268: LD_VAR 0 1
58272: PPUSH
58273: CALL_OW 264
58277: PUSH
58278: LD_INT 81
58280: EQUAL
58281: NOT
58282: IFTRUE 58297
58284: PUSH
58285: LD_VAR 0 1
58289: PUSH
58290: LD_EXP 55
58294: IN
58295: NOT
58296: OR
58297: IFFALSE 58301
// exit ;
58299: GO 58627
// index := GetElementIndex ( minersList , unit ) ;
58301: LD_ADDR_VAR 0 6
58305: PUSH
58306: LD_EXP 55
58310: PPUSH
58311: LD_VAR 0 1
58315: PPUSH
58316: CALL 14927 0 2
58320: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58321: LD_ADDR_VAR 0 8
58325: PUSH
58326: LD_EXP 57
58330: PUSH
58331: LD_EXP 56
58335: PUSH
58336: LD_VAR 0 6
58340: ARRAY
58341: MINUS
58342: ST_TO_ADDR
// if not minesFreeAmount then
58343: LD_VAR 0 8
58347: NOT
58348: IFFALSE 58352
// exit ;
58350: GO 58627
// tmp := [ ] ;
58352: LD_ADDR_VAR 0 7
58356: PUSH
58357: EMPTY
58358: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58359: LD_ADDR_VAR 0 5
58363: PUSH
58364: DOUBLE
58365: LD_INT 1
58367: DEC
58368: ST_TO_ADDR
58369: LD_VAR 0 8
58373: PUSH
58374: FOR_TO
58375: IFFALSE 58574
// begin _d := rand ( 0 , 5 ) ;
58377: LD_ADDR_VAR 0 11
58381: PUSH
58382: LD_INT 0
58384: PPUSH
58385: LD_INT 5
58387: PPUSH
58388: CALL_OW 12
58392: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58393: LD_ADDR_VAR 0 12
58397: PUSH
58398: LD_INT 2
58400: PPUSH
58401: LD_INT 6
58403: PPUSH
58404: CALL_OW 12
58408: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58409: LD_ADDR_VAR 0 9
58413: PUSH
58414: LD_VAR 0 2
58418: PPUSH
58419: LD_VAR 0 11
58423: PPUSH
58424: LD_VAR 0 12
58428: PPUSH
58429: CALL_OW 272
58433: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58434: LD_ADDR_VAR 0 10
58438: PUSH
58439: LD_VAR 0 3
58443: PPUSH
58444: LD_VAR 0 11
58448: PPUSH
58449: LD_VAR 0 12
58453: PPUSH
58454: CALL_OW 273
58458: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58459: LD_VAR 0 9
58463: PPUSH
58464: LD_VAR 0 10
58468: PPUSH
58469: CALL_OW 488
58473: IFFALSE 58497
58475: PUSH
58476: LD_VAR 0 9
58480: PUSH
58481: LD_VAR 0 10
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_VAR 0 7
58494: IN
58495: NOT
58496: AND
58497: IFFALSE 58516
58499: PUSH
58500: LD_VAR 0 9
58504: PPUSH
58505: LD_VAR 0 10
58509: PPUSH
58510: CALL_OW 458
58514: NOT
58515: AND
58516: IFFALSE 58558
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58518: LD_ADDR_VAR 0 7
58522: PUSH
58523: LD_VAR 0 7
58527: PPUSH
58528: LD_VAR 0 7
58532: PUSH
58533: LD_INT 1
58535: PLUS
58536: PPUSH
58537: LD_VAR 0 9
58541: PUSH
58542: LD_VAR 0 10
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PPUSH
58551: CALL_OW 1
58555: ST_TO_ADDR
58556: GO 58572
// i := i - 1 ;
58558: LD_ADDR_VAR 0 5
58562: PUSH
58563: LD_VAR 0 5
58567: PUSH
58568: LD_INT 1
58570: MINUS
58571: ST_TO_ADDR
// end ;
58572: GO 58374
58574: POP
58575: POP
// for i in tmp do
58576: LD_ADDR_VAR 0 5
58580: PUSH
58581: LD_VAR 0 7
58585: PUSH
58586: FOR_IN
58587: IFFALSE 58625
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58589: LD_VAR 0 1
58593: PPUSH
58594: LD_VAR 0 5
58598: PUSH
58599: LD_INT 1
58601: ARRAY
58602: PPUSH
58603: LD_VAR 0 5
58607: PUSH
58608: LD_INT 2
58610: ARRAY
58611: PPUSH
58612: CALL 57559 0 3
58616: NOT
58617: IFFALSE 58623
// exit ;
58619: POP
58620: POP
58621: GO 58627
58623: GO 58586
58625: POP
58626: POP
// end ;
58627: LD_VAR 0 4
58631: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58632: LD_INT 0
58634: PPUSH
58635: PPUSH
58636: PPUSH
58637: PPUSH
58638: PPUSH
58639: PPUSH
58640: PPUSH
58641: PPUSH
58642: PPUSH
// if GetClass ( unit ) <> class_sniper then
58643: LD_VAR 0 1
58647: PPUSH
58648: CALL_OW 257
58652: PUSH
58653: LD_INT 5
58655: NONEQUAL
58656: IFFALSE 58660
// exit ;
58658: GO 59130
// dist := 8 ;
58660: LD_ADDR_VAR 0 5
58664: PUSH
58665: LD_INT 8
58667: ST_TO_ADDR
// viewRange := 12 ;
58668: LD_ADDR_VAR 0 8
58672: PUSH
58673: LD_INT 12
58675: ST_TO_ADDR
// side := GetSide ( unit ) ;
58676: LD_ADDR_VAR 0 6
58680: PUSH
58681: LD_VAR 0 1
58685: PPUSH
58686: CALL_OW 255
58690: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58691: LD_INT 61
58693: PPUSH
58694: LD_VAR 0 6
58698: PPUSH
58699: CALL_OW 321
58703: PUSH
58704: LD_INT 2
58706: EQUAL
58707: IFFALSE 58717
// viewRange := 16 ;
58709: LD_ADDR_VAR 0 8
58713: PUSH
58714: LD_INT 16
58716: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58717: LD_VAR 0 1
58721: PPUSH
58722: LD_VAR 0 2
58726: PPUSH
58727: LD_VAR 0 3
58731: PPUSH
58732: CALL_OW 297
58736: PUSH
58737: LD_VAR 0 5
58741: GREATER
58742: IFFALSE 58821
// begin ComMoveXY ( unit , x , y ) ;
58744: LD_VAR 0 1
58748: PPUSH
58749: LD_VAR 0 2
58753: PPUSH
58754: LD_VAR 0 3
58758: PPUSH
58759: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58763: LD_INT 35
58765: PPUSH
58766: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58770: LD_VAR 0 1
58774: PPUSH
58775: LD_VAR 0 2
58779: PPUSH
58780: LD_VAR 0 3
58784: PPUSH
58785: CALL 46973 0 3
58789: NOT
58790: IFFALSE 58794
// exit ;
58792: GO 59130
// until GetDistUnitXY ( unit , x , y ) < dist ;
58794: LD_VAR 0 1
58798: PPUSH
58799: LD_VAR 0 2
58803: PPUSH
58804: LD_VAR 0 3
58808: PPUSH
58809: CALL_OW 297
58813: PUSH
58814: LD_VAR 0 5
58818: LESS
58819: IFFALSE 58763
// end ; ComTurnXY ( unit , x , y ) ;
58821: LD_VAR 0 1
58825: PPUSH
58826: LD_VAR 0 2
58830: PPUSH
58831: LD_VAR 0 3
58835: PPUSH
58836: CALL_OW 118
// repeat if Multiplayer then
58840: LD_OWVAR 4
58844: IFFALSE 58855
// wait ( 35 ) else
58846: LD_INT 35
58848: PPUSH
58849: CALL_OW 67
58853: GO 58862
// wait ( 5 ) ;
58855: LD_INT 5
58857: PPUSH
58858: CALL_OW 67
// _d := GetDir ( unit ) ;
58862: LD_ADDR_VAR 0 11
58866: PUSH
58867: LD_VAR 0 1
58871: PPUSH
58872: CALL_OW 254
58876: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58877: LD_ADDR_VAR 0 7
58881: PUSH
58882: LD_VAR 0 1
58886: PPUSH
58887: CALL_OW 250
58891: PPUSH
58892: LD_VAR 0 1
58896: PPUSH
58897: CALL_OW 251
58901: PPUSH
58902: LD_VAR 0 2
58906: PPUSH
58907: LD_VAR 0 3
58911: PPUSH
58912: CALL 49609 0 4
58916: ST_TO_ADDR
// until dir = _d ;
58917: LD_VAR 0 7
58921: PUSH
58922: LD_VAR 0 11
58926: EQUAL
58927: IFFALSE 58840
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58929: LD_ADDR_VAR 0 9
58933: PUSH
58934: LD_VAR 0 1
58938: PPUSH
58939: CALL_OW 250
58943: PPUSH
58944: LD_VAR 0 7
58948: PPUSH
58949: LD_VAR 0 5
58953: PPUSH
58954: CALL_OW 272
58958: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58959: LD_ADDR_VAR 0 10
58963: PUSH
58964: LD_VAR 0 1
58968: PPUSH
58969: CALL_OW 251
58973: PPUSH
58974: LD_VAR 0 7
58978: PPUSH
58979: LD_VAR 0 5
58983: PPUSH
58984: CALL_OW 273
58988: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58989: LD_VAR 0 9
58993: PPUSH
58994: LD_VAR 0 10
58998: PPUSH
58999: CALL_OW 488
59003: NOT
59004: IFFALSE 59008
// exit ;
59006: GO 59130
// ComAnimCustom ( unit , 1 ) ;
59008: LD_VAR 0 1
59012: PPUSH
59013: LD_INT 1
59015: PPUSH
59016: CALL_OW 592
// p := 0 ;
59020: LD_ADDR_VAR 0 12
59024: PUSH
59025: LD_INT 0
59027: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59028: LD_VAR 0 9
59032: PPUSH
59033: LD_VAR 0 10
59037: PPUSH
59038: LD_VAR 0 6
59042: PPUSH
59043: LD_VAR 0 8
59047: PPUSH
59048: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59052: LD_INT 35
59054: PPUSH
59055: CALL_OW 67
// p := Inc ( p ) ;
59059: LD_ADDR_VAR 0 12
59063: PUSH
59064: LD_VAR 0 12
59068: PPUSH
59069: CALL 49565 0 1
59073: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59074: LD_VAR 0 12
59078: PUSH
59079: LD_INT 3
59081: EQUAL
59082: IFTRUE 59096
59084: PUSH
59085: LD_VAR 0 1
59089: PPUSH
59090: CALL_OW 302
59094: NOT
59095: OR
59096: IFTRUE 59109
59098: PUSH
59099: LD_VAR 0 1
59103: PPUSH
59104: CALL_OW 301
59108: OR
59109: IFFALSE 59052
// RemoveSeeing ( _x , _y , side ) ;
59111: LD_VAR 0 9
59115: PPUSH
59116: LD_VAR 0 10
59120: PPUSH
59121: LD_VAR 0 6
59125: PPUSH
59126: CALL_OW 331
// end ; end_of_file
59130: LD_VAR 0 4
59134: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
59135: LD_EXP 39
59139: IFFALSE 59480
59141: GO 59143
59143: DISABLE
59144: LD_INT 0
59146: PPUSH
59147: PPUSH
59148: PPUSH
// begin mpKingPoints := [ ] ;
59149: LD_ADDR_EXP 58
59153: PUSH
59154: EMPTY
59155: ST_TO_ADDR
// if mpTeamGame then
59156: LD_EXP 11
59160: IFFALSE 59214
// begin for i := 1 to Count ( mpTeams ) do
59162: LD_ADDR_VAR 0 1
59166: PUSH
59167: DOUBLE
59168: LD_INT 1
59170: DEC
59171: ST_TO_ADDR
59172: LD_EXP 10
59176: PPUSH
59177: CALL 12260 0 1
59181: PUSH
59182: FOR_TO
59183: IFFALSE 59210
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59185: LD_ADDR_EXP 58
59189: PUSH
59190: LD_EXP 58
59194: PPUSH
59195: LD_VAR 0 1
59199: PPUSH
59200: LD_INT 0
59202: PPUSH
59203: CALL_OW 1
59207: ST_TO_ADDR
59208: GO 59182
59210: POP
59211: POP
// end else
59212: GO 59257
// begin for i := 1 to 8 do
59214: LD_ADDR_VAR 0 1
59218: PUSH
59219: DOUBLE
59220: LD_INT 1
59222: DEC
59223: ST_TO_ADDR
59224: LD_INT 8
59226: PUSH
59227: FOR_TO
59228: IFFALSE 59255
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59230: LD_ADDR_EXP 58
59234: PUSH
59235: LD_EXP 58
59239: PPUSH
59240: LD_VAR 0 1
59244: PPUSH
59245: LD_INT 0
59247: PPUSH
59248: CALL_OW 1
59252: ST_TO_ADDR
59253: GO 59227
59255: POP
59256: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
59257: LD_ADDR_VAR 0 3
59261: PUSH
59262: LD_EXP 2
59266: PPUSH
59267: LD_INT 0
59269: PPUSH
59270: CALL_OW 517
59274: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59275: LD_ADDR_VAR 0 1
59279: PUSH
59280: DOUBLE
59281: LD_INT 1
59283: DEC
59284: ST_TO_ADDR
59285: LD_VAR 0 3
59289: PUSH
59290: LD_INT 1
59292: ARRAY
59293: PUSH
59294: FOR_TO
59295: IFFALSE 59362
// for j := 1 to 8 do
59297: LD_ADDR_VAR 0 2
59301: PUSH
59302: DOUBLE
59303: LD_INT 1
59305: DEC
59306: ST_TO_ADDR
59307: LD_INT 8
59309: PUSH
59310: FOR_TO
59311: IFFALSE 59358
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
59313: LD_VAR 0 3
59317: PUSH
59318: LD_INT 1
59320: ARRAY
59321: PUSH
59322: LD_VAR 0 1
59326: ARRAY
59327: PPUSH
59328: LD_VAR 0 3
59332: PUSH
59333: LD_INT 2
59335: ARRAY
59336: PUSH
59337: LD_VAR 0 1
59341: ARRAY
59342: PPUSH
59343: LD_VAR 0 2
59347: PPUSH
59348: LD_INT 12
59350: NEG
59351: PPUSH
59352: CALL_OW 330
59356: GO 59310
59358: POP
59359: POP
59360: GO 59294
59362: POP
59363: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
59364: LD_EXP 34
59368: PPUSH
59369: LD_INT 1
59371: PPUSH
59372: CALL_OW 424
// UpdateCounter ;
59376: CALL 59986 0 0
// repeat wait ( 0 0$1 ) ;
59380: LD_INT 35
59382: PPUSH
59383: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59387: LD_ADDR_VAR 0 3
59391: PUSH
59392: LD_EXP 34
59396: PPUSH
59397: LD_INT 3
59399: PUSH
59400: LD_INT 57
59402: PUSH
59403: EMPTY
59404: LIST
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 50
59412: PUSH
59413: EMPTY
59414: LIST
59415: PUSH
59416: LD_INT 2
59418: PUSH
59419: LD_INT 30
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 30
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: LIST
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: LIST
59448: PPUSH
59449: CALL_OW 70
59453: ST_TO_ADDR
// if not tmp then
59454: LD_VAR 0 3
59458: NOT
59459: IFFALSE 59463
// continue ;
59461: GO 59380
// AddPoints ( tmp ) ;
59463: LD_VAR 0 3
59467: PPUSH
59468: CALL 59664 0 1
// UpdateCounter ;
59472: CALL 59986 0 0
// until false ;
59476: LD_INT 0
59478: IFFALSE 59380
// end ;
59480: PPOPN 3
59482: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
59483: LD_EXP 39
59487: IFFALSE 59495
59489: PUSH
59490: LD_EXP 37
59494: AND
59495: IFFALSE 59661
59497: GO 59499
59499: DISABLE
59500: LD_INT 0
59502: PPUSH
59503: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
59504: LD_ADDR_VAR 0 2
59508: PUSH
59509: LD_EXP 2
59513: PPUSH
59514: LD_INT 0
59516: PPUSH
59517: CALL_OW 517
59521: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59522: LD_ADDR_VAR 0 1
59526: PUSH
59527: DOUBLE
59528: LD_INT 1
59530: DEC
59531: ST_TO_ADDR
59532: LD_VAR 0 2
59536: PUSH
59537: LD_INT 1
59539: ARRAY
59540: PUSH
59541: FOR_TO
59542: IFFALSE 59583
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
59544: LD_VAR 0 2
59548: PUSH
59549: LD_INT 1
59551: ARRAY
59552: PUSH
59553: LD_VAR 0 1
59557: ARRAY
59558: PPUSH
59559: LD_VAR 0 2
59563: PUSH
59564: LD_INT 2
59566: ARRAY
59567: PUSH
59568: LD_VAR 0 1
59572: ARRAY
59573: PPUSH
59574: LD_INT 125
59576: PPUSH
59577: CALL_OW 495
59581: GO 59541
59583: POP
59584: POP
// repeat wait ( mpEmissions ) ;
59585: LD_EXP 37
59589: PPUSH
59590: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
59594: LD_ADDR_VAR 0 1
59598: PUSH
59599: DOUBLE
59600: LD_INT 1
59602: DEC
59603: ST_TO_ADDR
59604: LD_VAR 0 2
59608: PUSH
59609: LD_INT 1
59611: ARRAY
59612: PUSH
59613: FOR_TO
59614: IFFALSE 59655
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
59616: LD_VAR 0 2
59620: PUSH
59621: LD_INT 1
59623: ARRAY
59624: PUSH
59625: LD_VAR 0 1
59629: ARRAY
59630: PPUSH
59631: LD_VAR 0 2
59635: PUSH
59636: LD_INT 2
59638: ARRAY
59639: PUSH
59640: LD_VAR 0 1
59644: ARRAY
59645: PPUSH
59646: LD_INT 15
59648: PPUSH
59649: CALL_OW 495
59653: GO 59613
59655: POP
59656: POP
// until false ;
59657: LD_INT 0
59659: IFFALSE 59585
// end ;
59661: PPOPN 2
59663: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
59664: LD_INT 0
59666: PPUSH
59667: PPUSH
59668: PPUSH
59669: PPUSH
59670: PPUSH
// if mpTeamGame then
59671: LD_EXP 11
59675: IFFALSE 59872
// begin first := depots [ 1 ] ;
59677: LD_ADDR_VAR 0 4
59681: PUSH
59682: LD_VAR 0 1
59686: PUSH
59687: LD_INT 1
59689: ARRAY
59690: ST_TO_ADDR
// side := GetSide ( first ) ;
59691: LD_ADDR_VAR 0 6
59695: PUSH
59696: LD_VAR 0 4
59700: PPUSH
59701: CALL_OW 255
59705: ST_TO_ADDR
// for i := 1 to mpTeams do
59706: LD_ADDR_VAR 0 3
59710: PUSH
59711: DOUBLE
59712: LD_INT 1
59714: DEC
59715: ST_TO_ADDR
59716: LD_EXP 10
59720: PUSH
59721: FOR_TO
59722: IFFALSE 59756
// if side in mpTeams [ i ] then
59724: LD_VAR 0 6
59728: PUSH
59729: LD_EXP 10
59733: PUSH
59734: LD_VAR 0 3
59738: ARRAY
59739: IN
59740: IFFALSE 59754
// begin team := i ;
59742: LD_ADDR_VAR 0 5
59746: PUSH
59747: LD_VAR 0 3
59751: ST_TO_ADDR
// break ;
59752: GO 59756
// end ;
59754: GO 59721
59756: POP
59757: POP
// if not team then
59758: LD_VAR 0 5
59762: NOT
59763: IFFALSE 59767
// exit ;
59765: GO 59981
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59767: LD_EXP 34
59771: PPUSH
59772: LD_INT 81
59774: PUSH
59775: LD_VAR 0 6
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PPUSH
59784: CALL_OW 70
59788: IFFALSE 59792
// exit ;
59790: GO 59981
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
59792: LD_ADDR_EXP 58
59796: PUSH
59797: LD_EXP 58
59801: PPUSH
59802: LD_VAR 0 5
59806: PPUSH
59807: LD_EXP 58
59811: PUSH
59812: LD_VAR 0 5
59816: ARRAY
59817: PUSH
59818: LD_INT 1
59820: PLUS
59821: PPUSH
59822: CALL_OW 1
59826: ST_TO_ADDR
// for i in mpTeams [ team ] do
59827: LD_ADDR_VAR 0 3
59831: PUSH
59832: LD_EXP 10
59836: PUSH
59837: LD_VAR 0 5
59841: ARRAY
59842: PUSH
59843: FOR_IN
59844: IFFALSE 59868
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
59846: LD_VAR 0 3
59850: PPUSH
59851: LD_EXP 58
59855: PUSH
59856: LD_VAR 0 5
59860: ARRAY
59861: PPUSH
59862: CALL_OW 506
59866: GO 59843
59868: POP
59869: POP
// end else
59870: GO 59981
// begin first := depots [ 1 ] ;
59872: LD_ADDR_VAR 0 4
59876: PUSH
59877: LD_VAR 0 1
59881: PUSH
59882: LD_INT 1
59884: ARRAY
59885: ST_TO_ADDR
// side := GetSide ( first ) ;
59886: LD_ADDR_VAR 0 6
59890: PUSH
59891: LD_VAR 0 4
59895: PPUSH
59896: CALL_OW 255
59900: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59901: LD_EXP 34
59905: PPUSH
59906: LD_INT 81
59908: PUSH
59909: LD_VAR 0 6
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PPUSH
59918: CALL_OW 70
59922: IFFALSE 59926
// exit ;
59924: GO 59981
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
59926: LD_ADDR_EXP 58
59930: PUSH
59931: LD_EXP 58
59935: PPUSH
59936: LD_VAR 0 6
59940: PPUSH
59941: LD_EXP 58
59945: PUSH
59946: LD_VAR 0 6
59950: ARRAY
59951: PUSH
59952: LD_INT 1
59954: PLUS
59955: PPUSH
59956: CALL_OW 1
59960: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
59961: LD_VAR 0 6
59965: PPUSH
59966: LD_EXP 58
59970: PUSH
59971: LD_VAR 0 6
59975: ARRAY
59976: PPUSH
59977: CALL_OW 506
// end ; end ;
59981: LD_VAR 0 2
59985: RET
// function UpdateCounter ; var i ; begin
59986: LD_INT 0
59988: PPUSH
59989: PPUSH
// result := [ ] ;
59990: LD_ADDR_VAR 0 1
59994: PUSH
59995: EMPTY
59996: ST_TO_ADDR
// if mpTeamGame then
59997: LD_EXP 11
60001: IFFALSE 60068
// begin for i := 1 to mpTeams do
60003: LD_ADDR_VAR 0 2
60007: PUSH
60008: DOUBLE
60009: LD_INT 1
60011: DEC
60012: ST_TO_ADDR
60013: LD_EXP 10
60017: PUSH
60018: FOR_TO
60019: IFFALSE 60064
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
60021: LD_ADDR_VAR 0 1
60025: PUSH
60026: LD_VAR 0 1
60030: PUSH
60031: LD_STRING #KingoftheHill-Team
60033: PUSH
60034: LD_VAR 0 2
60038: PUSH
60039: LD_EXP 58
60043: PUSH
60044: LD_VAR 0 2
60048: ARRAY
60049: PUSH
60050: LD_EXP 35
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: ADD
60061: ST_TO_ADDR
60062: GO 60018
60064: POP
60065: POP
// end else
60066: GO 60141
// begin for i := 1 to 8 do
60068: LD_ADDR_VAR 0 2
60072: PUSH
60073: DOUBLE
60074: LD_INT 1
60076: DEC
60077: ST_TO_ADDR
60078: LD_INT 8
60080: PUSH
60081: FOR_TO
60082: IFFALSE 60139
// if mpSidePositions [ i ] then
60084: LD_EXP 7
60088: PUSH
60089: LD_VAR 0 2
60093: ARRAY
60094: IFFALSE 60137
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
60096: LD_ADDR_VAR 0 1
60100: PUSH
60101: LD_VAR 0 1
60105: PUSH
60106: LD_STRING #KingoftheHill-Player
60108: PUSH
60109: LD_VAR 0 2
60113: PUSH
60114: LD_EXP 58
60118: PUSH
60119: LD_VAR 0 2
60123: ARRAY
60124: PUSH
60125: LD_EXP 35
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: ADD
60136: ST_TO_ADDR
60137: GO 60081
60139: POP
60140: POP
// end ; mpDisplayStrings := result ;
60141: LD_ADDR_EXP 38
60145: PUSH
60146: LD_VAR 0 1
60150: ST_TO_ADDR
// end ;
60151: LD_VAR 0 1
60155: RET
// export function HowMuchPointsKing ( side ) ; begin
60156: LD_INT 0
60158: PPUSH
// result := HowMuchPoints ( side ) ;
60159: LD_ADDR_VAR 0 2
60163: PUSH
60164: LD_VAR 0 1
60168: PPUSH
60169: CALL 60179 0 1
60173: ST_TO_ADDR
// end ;
60174: LD_VAR 0 2
60178: RET
// function HowMuchPoints ( side ) ; var i ; begin
60179: LD_INT 0
60181: PPUSH
60182: PPUSH
// if mpTeamGame then
60183: LD_EXP 11
60187: IFFALSE 60256
// begin for i := 1 to Count ( mpTeams ) do
60189: LD_ADDR_VAR 0 3
60193: PUSH
60194: DOUBLE
60195: LD_INT 1
60197: DEC
60198: ST_TO_ADDR
60199: LD_EXP 10
60203: PPUSH
60204: CALL 12260 0 1
60208: PUSH
60209: FOR_TO
60210: IFFALSE 60252
// begin if side in mpTeams [ i ] then
60212: LD_VAR 0 1
60216: PUSH
60217: LD_EXP 10
60221: PUSH
60222: LD_VAR 0 3
60226: ARRAY
60227: IN
60228: IFFALSE 60250
// begin result := mpKingPoints [ i ] ;
60230: LD_ADDR_VAR 0 2
60234: PUSH
60235: LD_EXP 58
60239: PUSH
60240: LD_VAR 0 3
60244: ARRAY
60245: ST_TO_ADDR
// exit ;
60246: POP
60247: POP
60248: GO 60272
// end ; end ;
60250: GO 60209
60252: POP
60253: POP
// end else
60254: GO 60272
// result := mpKingPoints [ side ] ;
60256: LD_ADDR_VAR 0 2
60260: PUSH
60261: LD_EXP 58
60265: PUSH
60266: LD_VAR 0 1
60270: ARRAY
60271: ST_TO_ADDR
// end ;
60272: LD_VAR 0 2
60276: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
60277: LD_EXP 39
60281: IFFALSE 60289
60283: PUSH
60284: CALL 60701 0 0
60288: AND
60289: IFFALSE 60297
60291: PUSH
60292: LD_OWVAR 4
60296: AND
60297: IFFALSE 60550
60299: GO 60301
60301: DISABLE
60302: LD_INT 0
60304: PPUSH
60305: PPUSH
// begin canWin := false ;
60306: LD_ADDR_VAR 0 2
60310: PUSH
60311: LD_INT 0
60313: ST_TO_ADDR
// if not HasPower ( your_side ) then
60314: LD_OWVAR 2
60318: PPUSH
60319: CALL 60743 0 1
60323: NOT
60324: IFFALSE 60335
// begin Multiplayer_Loose_Message ;
60326: CALL_OW 521
// enable ( mpLose ) ;
60330: LD_INT 102
60332: ENABLE_MARKED
// end else
60333: GO 60550
// begin if not EnemiesInGame then
60335: CALL 60553 0 0
60339: NOT
60340: IFFALSE 60347
// begin enable ( mpWin ) ;
60342: LD_INT 101
60344: ENABLE_MARKED
// exit ;
60345: GO 60550
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
60347: LD_ADDR_VAR 0 2
60351: PUSH
60352: LD_OWVAR 2
60356: PPUSH
60357: CALL 60179 0 1
60361: PUSH
60362: LD_EXP 35
60366: GREATEREQUAL
60367: IFFALSE 60380
60369: PUSH
60370: LD_OWVAR 2
60374: PPUSH
60375: CALL 60743 0 1
60379: AND
60380: ST_TO_ADDR
// for i := 1 to 8 do
60381: LD_ADDR_VAR 0 1
60385: PUSH
60386: DOUBLE
60387: LD_INT 1
60389: DEC
60390: ST_TO_ADDR
60391: LD_INT 8
60393: PUSH
60394: FOR_TO
60395: IFFALSE 60536
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
60397: LD_EXP 7
60401: PUSH
60402: LD_VAR 0 1
60406: ARRAY
60407: IFFALSE 60420
60409: PUSH
60410: LD_VAR 0 1
60414: PPUSH
60415: CALL_OW 108
60419: AND
60420: IFFALSE 60434
60422: PUSH
60423: LD_VAR 0 1
60427: PUSH
60428: LD_OWVAR 2
60432: NONEQUAL
60433: AND
60434: IFFALSE 60534
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60436: LD_EXP 8
60440: PUSH
60441: LD_VAR 0 1
60445: ARRAY
60446: NOT
60447: IFTRUE 60495
60449: PUSH
60450: LD_EXP 8
60454: PUSH
60455: LD_VAR 0 1
60459: ARRAY
60460: PUSH
60461: LD_EXP 8
60465: PUSH
60466: LD_OWVAR 2
60470: ARRAY
60471: NONEQUAL
60472: IFFALSE 60494
60474: PUSH
60475: LD_OWVAR 2
60479: PPUSH
60480: LD_VAR 0 1
60484: PPUSH
60485: CALL_OW 81
60489: PUSH
60490: LD_INT 1
60492: NONEQUAL
60493: AND
60494: OR
60495: IFFALSE 60534
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
60497: LD_VAR 0 1
60501: PPUSH
60502: CALL 60179 0 1
60506: PUSH
60507: LD_EXP 35
60511: GREATEREQUAL
60512: IFFALSE 60525
60514: PUSH
60515: LD_VAR 0 1
60519: PPUSH
60520: CALL 60743 0 1
60524: AND
60525: IFFALSE 60534
// begin enable ( mpLose ) ;
60527: LD_INT 102
60529: ENABLE_MARKED
// exit ;
60530: POP
60531: POP
60532: GO 60550
// end ;
60534: GO 60394
60536: POP
60537: POP
// if canWin then
60538: LD_VAR 0 2
60542: IFFALSE 60549
// enable ( mpWin ) else
60544: LD_INT 101
60546: ENABLE_MARKED
60547: GO 60550
// enable ;
60549: ENABLE
// end ; end ;
60550: PPOPN 2
60552: END
// function EnemiesInGame ; var i ; begin
60553: LD_INT 0
60555: PPUSH
60556: PPUSH
// result := false ;
60557: LD_ADDR_VAR 0 1
60561: PUSH
60562: LD_INT 0
60564: ST_TO_ADDR
// for i := 1 to 8 do
60565: LD_ADDR_VAR 0 2
60569: PUSH
60570: DOUBLE
60571: LD_INT 1
60573: DEC
60574: ST_TO_ADDR
60575: LD_INT 8
60577: PUSH
60578: FOR_TO
60579: IFFALSE 60694
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
60581: LD_VAR 0 2
60585: PUSH
60586: LD_OWVAR 2
60590: NONEQUAL
60591: IFFALSE 60604
60593: PUSH
60594: LD_VAR 0 2
60598: PPUSH
60599: CALL 60743 0 1
60603: AND
60604: IFFALSE 60617
60606: PUSH
60607: LD_VAR 0 2
60611: PPUSH
60612: CALL_OW 108
60616: AND
60617: IFFALSE 60692
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60619: LD_EXP 8
60623: PUSH
60624: LD_VAR 0 2
60628: ARRAY
60629: NOT
60630: IFTRUE 60678
60632: PUSH
60633: LD_EXP 8
60637: PUSH
60638: LD_VAR 0 2
60642: ARRAY
60643: PUSH
60644: LD_EXP 8
60648: PUSH
60649: LD_OWVAR 2
60653: ARRAY
60654: NONEQUAL
60655: IFFALSE 60677
60657: PUSH
60658: LD_OWVAR 2
60662: PPUSH
60663: LD_VAR 0 2
60667: PPUSH
60668: CALL_OW 81
60672: PUSH
60673: LD_INT 1
60675: NONEQUAL
60676: AND
60677: OR
60678: IFFALSE 60692
// begin result := true ;
60680: LD_ADDR_VAR 0 1
60684: PUSH
60685: LD_INT 1
60687: ST_TO_ADDR
// exit ;
60688: POP
60689: POP
60690: GO 60696
// end ;
60692: GO 60578
60694: POP
60695: POP
// end ;
60696: LD_VAR 0 1
60700: RET
// function CanWinLoose ; begin
60701: LD_INT 0
60703: PPUSH
// result := true ;
60704: LD_ADDR_VAR 0 1
60708: PUSH
60709: LD_INT 1
60711: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
60712: CALL_OW 531
60716: IFFALSE 60728
60718: PUSH
60719: CALL_OW 519
60723: PUSH
60724: LD_INT 1
60726: GREATER
60727: AND
60728: IFFALSE 60738
// result := false ;
60730: LD_ADDR_VAR 0 1
60734: PUSH
60735: LD_INT 0
60737: ST_TO_ADDR
// end ;
60738: LD_VAR 0 1
60742: RET
// function HasPower ( i ) ; begin
60743: LD_INT 0
60745: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
60746: LD_ADDR_VAR 0 2
60750: PUSH
60751: LD_INT 22
60753: PUSH
60754: LD_VAR 0 1
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 2
60765: PUSH
60766: LD_INT 21
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 33
60778: PUSH
60779: LD_INT 3
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 33
60788: PUSH
60789: LD_INT 5
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PPUSH
60806: CALL_OW 69
60810: ST_TO_ADDR
// end ; end_of_file
60811: LD_VAR 0 2
60815: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60816: PPOPN 6
60818: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60819: LD_EXP 3
60823: PUSH
60824: LD_INT 4
60826: EQUAL
60827: IFFALSE 60863
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60829: LD_STRING setGameDifficulty(
60831: PUSH
60832: LD_OWVAR 67
60836: STR
60837: PUSH
60838: LD_STRING )
60840: STR
60841: PPUSH
60842: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60846: LD_STRING displayDifficulty(
60848: PUSH
60849: LD_OWVAR 67
60853: STR
60854: PUSH
60855: LD_STRING )
60857: STR
60858: PPUSH
60859: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60863: CALL 60892 0 0
// end ; end_of_file
60867: PPOPN 1
60869: END
// every 0 0$1 do
60870: GO 60872
60872: DISABLE
// begin enable ;
60873: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60874: LD_STRING updateTimer(
60876: PUSH
60877: LD_OWVAR 1
60881: STR
60882: PUSH
60883: LD_STRING );
60885: STR
60886: PPUSH
60887: CALL_OW 559
// end ;
60891: END
// export function SOS_MapStart ( ) ; begin
60892: LD_INT 0
60894: PPUSH
// UpdateFactoryWaypoints ( ) ;
60895: CALL 61826 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60899: CALL 62078 0 0
// ParseMultiDataToLua ( ) ;
60903: CALL 62225 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60907: LD_STRING setSpecLogoNumber(
60909: PUSH
60910: LD_INT 2
60912: STR
60913: PUSH
60914: LD_STRING ,
60916: STR
60917: PUSH
60918: LD_INT 1
60920: STR
60921: PUSH
60922: LD_STRING )
60924: STR
60925: PPUSH
60926: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60930: LD_STRING setSpecLogoNumber(
60932: PUSH
60933: LD_INT 3
60935: STR
60936: PUSH
60937: LD_STRING ,
60939: STR
60940: PUSH
60941: LD_INT 2
60943: STR
60944: PUSH
60945: LD_STRING )
60947: STR
60948: PPUSH
60949: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
60953: LD_STRING setSpecLogoNumber(
60955: PUSH
60956: LD_INT 4
60958: STR
60959: PUSH
60960: LD_STRING ,
60962: STR
60963: PUSH
60964: LD_INT 3
60966: STR
60967: PUSH
60968: LD_STRING )
60970: STR
60971: PPUSH
60972: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
60976: LD_STRING setSpecLogoNumber(
60978: PUSH
60979: LD_INT 5
60981: STR
60982: PUSH
60983: LD_STRING ,
60985: STR
60986: PUSH
60987: LD_INT 4
60989: STR
60990: PUSH
60991: LD_STRING )
60993: STR
60994: PPUSH
60995: CALL_OW 559
// end ;
60999: LD_VAR 0 1
61003: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
61004: LD_INT 0
61006: PPUSH
61007: PPUSH
61008: PPUSH
61009: PPUSH
61010: PPUSH
61011: PPUSH
61012: PPUSH
61013: PPUSH
61014: PPUSH
// for i := 1 to 8 do
61015: LD_ADDR_VAR 0 2
61019: PUSH
61020: DOUBLE
61021: LD_INT 1
61023: DEC
61024: ST_TO_ADDR
61025: LD_INT 8
61027: PUSH
61028: FOR_TO
61029: IFFALSE 61414
// begin if mpSidePositions [ i ] then
61031: LD_EXP 7
61035: PUSH
61036: LD_VAR 0 2
61040: ARRAY
61041: IFFALSE 61412
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61043: LD_ADDR_VAR 0 7
61047: PUSH
61048: LD_INT 22
61050: PUSH
61051: LD_VAR 0 2
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 21
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PPUSH
61074: CALL_OW 69
61078: PPUSH
61079: CALL 12260 0 1
61083: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61084: LD_ADDR_VAR 0 9
61088: PUSH
61089: LD_INT 22
61091: PUSH
61092: LD_VAR 0 2
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: PUSH
61104: LD_INT 30
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 30
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: LIST
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PPUSH
61133: CALL_OW 69
61137: ST_TO_ADDR
// crates := 0 ;
61138: LD_ADDR_VAR 0 4
61142: PUSH
61143: LD_INT 0
61145: ST_TO_ADDR
// oil := 0 ;
61146: LD_ADDR_VAR 0 5
61150: PUSH
61151: LD_INT 0
61153: ST_TO_ADDR
// sib := 0 ;
61154: LD_ADDR_VAR 0 6
61158: PUSH
61159: LD_INT 0
61161: ST_TO_ADDR
// if bases then
61162: LD_VAR 0 9
61166: IFFALSE 61272
// begin for j in bases do
61168: LD_ADDR_VAR 0 3
61172: PUSH
61173: LD_VAR 0 9
61177: PUSH
61178: FOR_IN
61179: IFFALSE 61270
// begin base := GetBase ( j ) ;
61181: LD_ADDR_VAR 0 8
61185: PUSH
61186: LD_VAR 0 3
61190: PPUSH
61191: CALL_OW 274
61195: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61196: LD_ADDR_VAR 0 4
61200: PUSH
61201: LD_VAR 0 4
61205: PUSH
61206: LD_VAR 0 8
61210: PPUSH
61211: LD_INT 1
61213: PPUSH
61214: CALL_OW 275
61218: PLUS
61219: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61220: LD_ADDR_VAR 0 5
61224: PUSH
61225: LD_VAR 0 5
61229: PUSH
61230: LD_VAR 0 8
61234: PPUSH
61235: LD_INT 2
61237: PPUSH
61238: CALL_OW 275
61242: PLUS
61243: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61244: LD_ADDR_VAR 0 6
61248: PUSH
61249: LD_VAR 0 6
61253: PUSH
61254: LD_VAR 0 8
61258: PPUSH
61259: LD_INT 3
61261: PPUSH
61262: CALL_OW 275
61266: PLUS
61267: ST_TO_ADDR
// end ;
61268: GO 61178
61270: POP
61271: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61272: LD_STRING setSpecText(
61274: PUSH
61275: LD_VAR 0 2
61279: STR
61280: PUSH
61281: LD_STRING ,
61283: STR
61284: PUSH
61285: LD_INT 2
61287: STR
61288: PUSH
61289: LD_STRING ,
61291: STR
61292: PUSH
61293: LD_VAR 0 4
61297: STR
61298: PUSH
61299: LD_STRING )
61301: STR
61302: PPUSH
61303: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61307: LD_STRING setSpecText(
61309: PUSH
61310: LD_VAR 0 2
61314: STR
61315: PUSH
61316: LD_STRING ,
61318: STR
61319: PUSH
61320: LD_INT 3
61322: STR
61323: PUSH
61324: LD_STRING ,
61326: STR
61327: PUSH
61328: LD_VAR 0 5
61332: STR
61333: PUSH
61334: LD_STRING )
61336: STR
61337: PPUSH
61338: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61342: LD_STRING setSpecText(
61344: PUSH
61345: LD_VAR 0 2
61349: STR
61350: PUSH
61351: LD_STRING ,
61353: STR
61354: PUSH
61355: LD_INT 4
61357: STR
61358: PUSH
61359: LD_STRING ,
61361: STR
61362: PUSH
61363: LD_VAR 0 6
61367: STR
61368: PUSH
61369: LD_STRING )
61371: STR
61372: PPUSH
61373: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61377: LD_STRING setSpecText(
61379: PUSH
61380: LD_VAR 0 2
61384: STR
61385: PUSH
61386: LD_STRING ,
61388: STR
61389: PUSH
61390: LD_INT 5
61392: STR
61393: PUSH
61394: LD_STRING ,
61396: STR
61397: PUSH
61398: LD_VAR 0 7
61402: STR
61403: PUSH
61404: LD_STRING )
61406: STR
61407: PPUSH
61408: CALL_OW 559
// end ; end ;
61412: GO 61028
61414: POP
61415: POP
// end ;
61416: LD_VAR 0 1
61420: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61421: LD_INT 2
61423: PUSH
61424: LD_INT 30
61426: PUSH
61427: LD_INT 0
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 30
61436: PUSH
61437: LD_INT 1
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: LIST
61448: PPUSH
61449: CALL_OW 69
61453: IFFALSE 61463
61455: GO 61457
61457: DISABLE
// begin enable ;
61458: ENABLE
// UpdateSpectatorBar ;
61459: CALL 61004 0 0
// end ;
61463: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61464: LD_INT 0
61466: PPUSH
// end ;
61467: LD_VAR 0 12
61471: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61472: LD_INT 0
61474: PPUSH
61475: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61476: LD_VAR 0 1
61480: NOT
61481: IFTRUE 61500
61483: PUSH
61484: LD_VAR 0 2
61488: PPUSH
61489: LD_VAR 0 3
61493: PPUSH
61494: CALL_OW 488
61498: NOT
61499: OR
61500: IFTRUE 61535
61502: PUSH
61503: LD_VAR 0 1
61507: PPUSH
61508: CALL_OW 266
61512: PUSH
61513: LD_INT 3
61515: NONEQUAL
61516: IFFALSE 61534
61518: PUSH
61519: LD_VAR 0 1
61523: PPUSH
61524: CALL_OW 247
61528: PUSH
61529: LD_INT 1
61531: EQUAL
61532: NOT
61533: AND
61534: OR
61535: IFFALSE 61539
// exit ;
61537: GO 61821
// if GetType ( factory ) = unit_human then
61539: LD_VAR 0 1
61543: PPUSH
61544: CALL_OW 247
61548: PUSH
61549: LD_INT 1
61551: EQUAL
61552: IFFALSE 61569
// factory := IsInUnit ( factory ) ;
61554: LD_ADDR_VAR 0 1
61558: PUSH
61559: LD_VAR 0 1
61563: PPUSH
61564: CALL_OW 310
61568: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61569: LD_VAR 0 1
61573: PPUSH
61574: CALL_OW 266
61578: PUSH
61579: LD_INT 3
61581: NONEQUAL
61582: IFFALSE 61586
// exit ;
61584: GO 61821
// for i := 1 to Count ( factoryWaypoints ) do
61586: LD_ADDR_VAR 0 5
61590: PUSH
61591: DOUBLE
61592: LD_INT 1
61594: DEC
61595: ST_TO_ADDR
61596: LD_EXP 59
61600: PPUSH
61601: CALL 12260 0 1
61605: PUSH
61606: FOR_TO
61607: IFFALSE 61769
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61609: LD_VAR 0 2
61613: PPUSH
61614: LD_VAR 0 3
61618: PPUSH
61619: CALL_OW 428
61623: PUSH
61624: LD_EXP 59
61628: PUSH
61629: LD_VAR 0 5
61633: ARRAY
61634: PUSH
61635: LD_INT 2
61637: ARRAY
61638: EQUAL
61639: IFFALSE 61671
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61641: LD_ADDR_EXP 59
61645: PUSH
61646: LD_EXP 59
61650: PPUSH
61651: LD_VAR 0 5
61655: PPUSH
61656: CALL_OW 3
61660: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61661: CALL 61826 0 0
// exit ;
61665: POP
61666: POP
61667: GO 61821
// end else
61669: GO 61767
// if factory = factoryWaypoints [ i ] [ 2 ] then
61671: LD_VAR 0 1
61675: PUSH
61676: LD_EXP 59
61680: PUSH
61681: LD_VAR 0 5
61685: ARRAY
61686: PUSH
61687: LD_INT 2
61689: ARRAY
61690: EQUAL
61691: IFFALSE 61767
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61693: LD_ADDR_EXP 59
61697: PUSH
61698: LD_EXP 59
61702: PPUSH
61703: LD_VAR 0 5
61707: PPUSH
61708: CALL_OW 3
61712: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61713: LD_ADDR_EXP 59
61717: PUSH
61718: LD_EXP 59
61722: PPUSH
61723: LD_VAR 0 1
61727: PPUSH
61728: CALL_OW 255
61732: PUSH
61733: LD_VAR 0 1
61737: PUSH
61738: LD_VAR 0 2
61742: PUSH
61743: LD_VAR 0 3
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: PPUSH
61754: CALL 48192 0 2
61758: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61759: CALL 61826 0 0
// exit ;
61763: POP
61764: POP
61765: GO 61821
// end ; end ;
61767: GO 61606
61769: POP
61770: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61771: LD_ADDR_EXP 59
61775: PUSH
61776: LD_EXP 59
61780: PPUSH
61781: LD_VAR 0 1
61785: PPUSH
61786: CALL_OW 255
61790: PUSH
61791: LD_VAR 0 1
61795: PUSH
61796: LD_VAR 0 2
61800: PUSH
61801: LD_VAR 0 3
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: PPUSH
61812: CALL 48192 0 2
61816: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61817: CALL 61826 0 0
// end ;
61821: LD_VAR 0 4
61825: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61826: LD_INT 0
61828: PPUSH
61829: PPUSH
61830: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61831: LD_STRING resetFactoryWaypoint();
61833: PPUSH
61834: CALL_OW 559
// if factoryWaypoints then
61838: LD_EXP 59
61842: IFFALSE 61963
// begin list := factoryWaypoints ;
61844: LD_ADDR_VAR 0 3
61848: PUSH
61849: LD_EXP 59
61853: ST_TO_ADDR
// for i := 1 to list do
61854: LD_ADDR_VAR 0 2
61858: PUSH
61859: DOUBLE
61860: LD_INT 1
61862: DEC
61863: ST_TO_ADDR
61864: LD_VAR 0 3
61868: PUSH
61869: FOR_TO
61870: IFFALSE 61961
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61872: LD_STRING setFactoryWaypointXY(
61874: PUSH
61875: LD_VAR 0 3
61879: PUSH
61880: LD_VAR 0 2
61884: ARRAY
61885: PUSH
61886: LD_INT 1
61888: ARRAY
61889: STR
61890: PUSH
61891: LD_STRING ,
61893: STR
61894: PUSH
61895: LD_VAR 0 3
61899: PUSH
61900: LD_VAR 0 2
61904: ARRAY
61905: PUSH
61906: LD_INT 2
61908: ARRAY
61909: STR
61910: PUSH
61911: LD_STRING ,
61913: STR
61914: PUSH
61915: LD_VAR 0 3
61919: PUSH
61920: LD_VAR 0 2
61924: ARRAY
61925: PUSH
61926: LD_INT 3
61928: ARRAY
61929: STR
61930: PUSH
61931: LD_STRING ,
61933: STR
61934: PUSH
61935: LD_VAR 0 3
61939: PUSH
61940: LD_VAR 0 2
61944: ARRAY
61945: PUSH
61946: LD_INT 4
61948: ARRAY
61949: STR
61950: PUSH
61951: LD_STRING )
61953: STR
61954: PPUSH
61955: CALL_OW 559
61959: GO 61869
61961: POP
61962: POP
// end ; end ;
61963: LD_VAR 0 1
61967: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61968: LD_INT 0
61970: PPUSH
// if HexInfo ( x , y ) = warehouse then
61971: LD_VAR 0 2
61975: PPUSH
61976: LD_VAR 0 3
61980: PPUSH
61981: CALL_OW 428
61985: PUSH
61986: LD_VAR 0 1
61990: EQUAL
61991: IFFALSE 62018
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61993: LD_ADDR_EXP 61
61997: PUSH
61998: LD_EXP 61
62002: PPUSH
62003: LD_VAR 0 1
62007: PPUSH
62008: LD_INT 0
62010: PPUSH
62011: CALL_OW 1
62015: ST_TO_ADDR
62016: GO 62069
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62018: LD_ADDR_EXP 61
62022: PUSH
62023: LD_EXP 61
62027: PPUSH
62028: LD_VAR 0 1
62032: PPUSH
62033: LD_VAR 0 1
62037: PPUSH
62038: CALL_OW 255
62042: PUSH
62043: LD_VAR 0 1
62047: PUSH
62048: LD_VAR 0 2
62052: PUSH
62053: LD_VAR 0 3
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: PPUSH
62064: CALL_OW 1
62068: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62069: CALL 62078 0 0
// end ;
62073: LD_VAR 0 4
62077: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62078: LD_INT 0
62080: PPUSH
62081: PPUSH
62082: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62083: LD_STRING resetWarehouseGatheringPoints();
62085: PPUSH
62086: CALL_OW 559
// if warehouseGatheringPoints then
62090: LD_EXP 61
62094: IFFALSE 62220
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62096: LD_ADDR_VAR 0 3
62100: PUSH
62101: LD_EXP 61
62105: PPUSH
62106: CALL 52126 0 1
62110: ST_TO_ADDR
// for i := 1 to list do
62111: LD_ADDR_VAR 0 2
62115: PUSH
62116: DOUBLE
62117: LD_INT 1
62119: DEC
62120: ST_TO_ADDR
62121: LD_VAR 0 3
62125: PUSH
62126: FOR_TO
62127: IFFALSE 62218
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62129: LD_STRING setWarehouseGatheringPointXY(
62131: PUSH
62132: LD_VAR 0 3
62136: PUSH
62137: LD_VAR 0 2
62141: ARRAY
62142: PUSH
62143: LD_INT 1
62145: ARRAY
62146: STR
62147: PUSH
62148: LD_STRING ,
62150: STR
62151: PUSH
62152: LD_VAR 0 3
62156: PUSH
62157: LD_VAR 0 2
62161: ARRAY
62162: PUSH
62163: LD_INT 2
62165: ARRAY
62166: STR
62167: PUSH
62168: LD_STRING ,
62170: STR
62171: PUSH
62172: LD_VAR 0 3
62176: PUSH
62177: LD_VAR 0 2
62181: ARRAY
62182: PUSH
62183: LD_INT 3
62185: ARRAY
62186: STR
62187: PUSH
62188: LD_STRING ,
62190: STR
62191: PUSH
62192: LD_VAR 0 3
62196: PUSH
62197: LD_VAR 0 2
62201: ARRAY
62202: PUSH
62203: LD_INT 4
62205: ARRAY
62206: STR
62207: PUSH
62208: LD_STRING )
62210: STR
62211: PPUSH
62212: CALL_OW 559
62216: GO 62126
62218: POP
62219: POP
// end ; end ;
62220: LD_VAR 0 1
62224: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62225: LD_INT 0
62227: PPUSH
62228: PPUSH
// if not mpSidePositions then
62229: LD_EXP 7
62233: NOT
62234: IFFALSE 62238
// exit ;
62236: GO 62309
// result :=  ;
62238: LD_ADDR_VAR 0 1
62242: PUSH
62243: LD_STRING 
62245: ST_TO_ADDR
// for i := 1 to 8 do
62246: LD_ADDR_VAR 0 2
62250: PUSH
62251: DOUBLE
62252: LD_INT 1
62254: DEC
62255: ST_TO_ADDR
62256: LD_INT 8
62258: PUSH
62259: FOR_TO
62260: IFFALSE 62290
// begin result := result & mpSidePositions [ i ] & ; ;
62262: LD_ADDR_VAR 0 1
62266: PUSH
62267: LD_VAR 0 1
62271: PUSH
62272: LD_EXP 7
62276: PUSH
62277: LD_VAR 0 2
62281: ARRAY
62282: STR
62283: PUSH
62284: LD_STRING ;
62286: STR
62287: ST_TO_ADDR
// end ;
62288: GO 62259
62290: POP
62291: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62292: LD_STRING setMultiplayerRealPosition("
62294: PUSH
62295: LD_VAR 0 1
62299: STR
62300: PUSH
62301: LD_STRING ");
62303: STR
62304: PPUSH
62305: CALL_OW 559
// end ;
62309: LD_VAR 0 1
62313: RET
