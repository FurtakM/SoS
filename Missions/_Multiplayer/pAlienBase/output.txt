// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2814 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3237 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 2 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 2
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 3 , 0 , 3 , 3 , 3 , 3 , 3 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 3
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 3
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 220 , 160 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 220
 809: PUSH
 810: LD_INT 160
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 8
 838: PUSH
 839: LD_INT 9
 841: PUSH
 842: LD_INT 10
 844: PUSH
 845: LD_INT 11
 847: PUSH
 848: LD_INT 12
 850: PUSH
 851: LD_INT 13
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_EXP 19
 871: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 872: LD_VAR 0 1
 876: PUSH
 877: LD_INT 2
 879: EQUAL
 880: IFFALSE 892
// baseLevel := 1 else
 882: LD_ADDR_VAR 0 7
 886: PUSH
 887: LD_INT 1
 889: ST_TO_ADDR
 890: GO 906
// baseLevel := mpGameSettings [ 1 ] ;
 892: LD_ADDR_VAR 0 7
 896: PUSH
 897: LD_EXP 6
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 906: LD_ADDR_EXP 24
 910: PUSH
 911: LD_EXP 6
 915: PUSH
 916: LD_INT 2
 918: ARRAY
 919: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 920: LD_ADDR_EXP 25
 924: PUSH
 925: LD_EXP 6
 929: PUSH
 930: LD_INT 3
 932: ARRAY
 933: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 934: LD_ADDR_EXP 15
 938: PUSH
 939: LD_EXP 6
 943: PUSH
 944: LD_INT 4
 946: ARRAY
 947: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 948: LD_ADDR_EXP 27
 952: PUSH
 953: LD_EXP 6
 957: PUSH
 958: LD_INT 5
 960: ARRAY
 961: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 962: LD_ADDR_VAR 0 5
 966: PUSH
 967: LD_EXP 6
 971: PUSH
 972: LD_INT 6
 974: ARRAY
 975: PUSH
 976: LD_INT 0
 978: GREATER
 979: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 980: LD_ADDR_VAR 0 6
 984: PUSH
 985: LD_EXP 6
 989: PUSH
 990: LD_INT 7
 992: ARRAY
 993: PUSH
 994: LD_INT 0
 996: GREATER
 997: ST_TO_ADDR
// mpKingArea := 0 ;
 998: LD_ADDR_EXP 34
1002: PUSH
1003: LD_INT 0
1005: ST_TO_ADDR
// mpPoints := 0 ;
1006: LD_ADDR_EXP 35
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// mpEmissions := 0 ;
1014: LD_ADDR_EXP 37
1018: PUSH
1019: LD_INT 0
1021: ST_TO_ADDR
// kingArea := 0 ;
1022: LD_ADDR_EXP 1
1026: PUSH
1027: LD_INT 0
1029: ST_TO_ADDR
// kingCamArea := 0 ;
1030: LD_ADDR_EXP 2
1034: PUSH
1035: LD_INT 0
1037: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1038: LD_EXP 6
1042: PUSH
1043: LD_INT 9
1045: ARRAY
1046: IFFALSE 1178
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1048: LD_ADDR_EXP 36
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 3
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 12
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 24
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 12
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 23
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 21
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 42
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 21
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 42
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: LIST
1177: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1178: LD_ADDR_EXP 16
1182: PUSH
1183: LD_EXP 6
1187: PUSH
1188: LD_INT 11
1190: ARRAY
1191: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1192: LD_ADDR_EXP 22
1196: PUSH
1197: LD_EXP 6
1201: PUSH
1202: LD_INT 12
1204: ARRAY
1205: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1206: LD_ADDR_EXP 26
1210: PUSH
1211: LD_EXP 6
1215: PUSH
1216: LD_INT 13
1218: ARRAY
1219: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1220: LD_ADDR_EXP 33
1224: PUSH
1225: LD_EXP 6
1229: PUSH
1230: LD_INT 14
1232: ARRAY
1233: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1234: LD_ADDR_EXP 30
1238: PUSH
1239: LD_EXP 6
1243: PUSH
1244: LD_INT 15
1246: ARRAY
1247: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1248: LD_ADDR_EXP 28
1252: PUSH
1253: LD_EXP 6
1257: PUSH
1258: LD_INT 18
1260: ARRAY
1261: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1262: LD_ADDR_EXP 20
1266: PUSH
1267: LD_EXP 6
1271: PUSH
1272: LD_INT 21
1274: ARRAY
1275: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1276: LD_ADDR_EXP 31
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 3
1286: PUSH
1287: LD_INT 4
1289: PUSH
1290: LD_INT 5
1292: PUSH
1293: LD_INT 6
1295: PUSH
1296: LD_INT 7
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 5 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) ] ;
1307: LD_ADDR_VAR 0 8
1311: PUSH
1312: LD_INT 16
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: CALL 54269 0 2
1322: PUSH
1323: LD_INT 17
1325: PPUSH
1326: LD_INT 2
1328: PPUSH
1329: CALL 54269 0 2
1333: PUSH
1334: LD_INT 18
1336: PPUSH
1337: LD_INT 3
1339: PPUSH
1340: CALL 54269 0 2
1344: PUSH
1345: LD_INT 19
1347: PPUSH
1348: LD_INT 5
1350: PPUSH
1351: CALL 54269 0 2
1355: PUSH
1356: LD_INT 20
1358: PPUSH
1359: LD_INT 5
1361: PPUSH
1362: CALL 54269 0 2
1366: PUSH
1367: LD_INT 21
1369: PPUSH
1370: LD_INT 0
1372: PPUSH
1373: CALL 54269 0 2
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: DOUBLE
1392: LD_INT 1
1394: DEC
1395: ST_TO_ADDR
1396: LD_VAR 0 8
1400: PPUSH
1401: CALL 13574 0 1
1405: PUSH
1406: FOR_TO
1407: IFFALSE 1511
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1409: LD_ADDR_EXP 21
1413: PUSH
1414: LD_EXP 21
1418: PPUSH
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_VAR 0 8
1428: PUSH
1429: LD_VAR 0 3
1433: ARRAY
1434: PUSH
1435: LD_INT 1
1437: ARRAY
1438: PPUSH
1439: LD_VAR 0 8
1443: PUSH
1444: LD_VAR 0 3
1448: ARRAY
1449: PUSH
1450: LD_INT 3
1452: ARRAY
1453: PPUSH
1454: LD_INT 10
1456: PPUSH
1457: CALL_OW 272
1461: PUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 2
1475: ARRAY
1476: PPUSH
1477: LD_VAR 0 8
1481: PUSH
1482: LD_VAR 0 3
1486: ARRAY
1487: PUSH
1488: LD_INT 3
1490: ARRAY
1491: PPUSH
1492: LD_INT 10
1494: PPUSH
1495: CALL_OW 273
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 1
1508: ST_TO_ADDR
1509: GO 1406
1511: POP
1512: POP
// if hasOil then
1513: LD_VAR 0 5
1517: IFFALSE 1628
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1519: LD_ADDR_VAR 0 4
1523: PUSH
1524: LD_EXP 6
1528: PUSH
1529: LD_INT 6
1531: ARRAY
1532: PUSH
1533: LD_INT 2
1535: EQUAL
1536: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1537: LD_ADDR_EXP 12
1541: PUSH
1542: LD_INT 22
1544: PPUSH
1545: LD_VAR 0 4
1549: PPUSH
1550: CALL 54102 0 2
1554: PUSH
1555: LD_INT 24
1557: PPUSH
1558: LD_VAR 0 4
1562: PPUSH
1563: CALL 54102 0 2
1567: PUSH
1568: LD_INT 26
1570: PPUSH
1571: LD_VAR 0 4
1575: PPUSH
1576: CALL 54102 0 2
1580: PUSH
1581: LD_INT 28
1583: PPUSH
1584: LD_VAR 0 4
1588: PPUSH
1589: CALL 54102 0 2
1593: PUSH
1594: LD_INT 30
1596: PPUSH
1597: LD_VAR 0 4
1601: PPUSH
1602: CALL 54102 0 2
1606: PUSH
1607: LD_INT 32
1609: PPUSH
1610: LD_VAR 0 4
1614: PPUSH
1615: CALL 54102 0 2
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: ST_TO_ADDR
// end ; if hasSib then
1628: LD_VAR 0 6
1632: IFFALSE 1743
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1634: LD_ADDR_VAR 0 4
1638: PUSH
1639: LD_EXP 6
1643: PUSH
1644: LD_INT 7
1646: ARRAY
1647: PUSH
1648: LD_INT 2
1650: EQUAL
1651: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1652: LD_ADDR_EXP 13
1656: PUSH
1657: LD_INT 23
1659: PPUSH
1660: LD_VAR 0 4
1664: PPUSH
1665: CALL 54102 0 2
1669: PUSH
1670: LD_INT 25
1672: PPUSH
1673: LD_VAR 0 4
1677: PPUSH
1678: CALL 54102 0 2
1682: PUSH
1683: LD_INT 27
1685: PPUSH
1686: LD_VAR 0 4
1690: PPUSH
1691: CALL 54102 0 2
1695: PUSH
1696: LD_INT 29
1698: PPUSH
1699: LD_VAR 0 4
1703: PPUSH
1704: CALL 54102 0 2
1708: PUSH
1709: LD_INT 31
1711: PPUSH
1712: LD_VAR 0 4
1716: PPUSH
1717: CALL 54102 0 2
1721: PUSH
1722: LD_INT 33
1724: PPUSH
1725: LD_VAR 0 4
1729: PPUSH
1730: CALL 54102 0 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1743: LD_VAR 0 7
1747: PUSH
1748: LD_INT 1
1750: GREATEREQUAL
1751: IFFALSE 1763
// mpDepots := startPos ;
1753: LD_ADDR_EXP 14
1757: PUSH
1758: LD_VAR 0 8
1762: ST_TO_ADDR
// if baseLevel >= 2 then
1763: LD_VAR 0 7
1767: PUSH
1768: LD_INT 2
1770: GREATEREQUAL
1771: IFFALSE 2086
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] ] ;
1773: LD_ADDR_EXP 17
1777: PUSH
1778: LD_INT 31
1780: PUSH
1781: LD_INT 35
1783: PPUSH
1784: LD_INT 5
1786: PPUSH
1787: CALL 54269 0 2
1791: ADD
1792: PUSH
1793: LD_INT 31
1795: PUSH
1796: LD_INT 36
1798: PPUSH
1799: LD_INT 5
1801: PPUSH
1802: CALL 54269 0 2
1806: ADD
1807: PUSH
1808: LD_INT 4
1810: PUSH
1811: LD_INT 34
1813: PPUSH
1814: LD_INT 5
1816: PPUSH
1817: CALL 54269 0 2
1821: ADD
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 31
1830: PUSH
1831: LD_INT 38
1833: PPUSH
1834: LD_INT 5
1836: PPUSH
1837: CALL 54269 0 2
1841: ADD
1842: PUSH
1843: LD_INT 31
1845: PUSH
1846: LD_INT 39
1848: PPUSH
1849: LD_INT 0
1851: PPUSH
1852: CALL 54269 0 2
1856: ADD
1857: PUSH
1858: LD_INT 4
1860: PUSH
1861: LD_INT 37
1863: PPUSH
1864: LD_INT 5
1866: PPUSH
1867: CALL 54269 0 2
1871: ADD
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 31
1880: PUSH
1881: LD_INT 41
1883: PPUSH
1884: LD_INT 0
1886: PPUSH
1887: CALL 54269 0 2
1891: ADD
1892: PUSH
1893: LD_INT 31
1895: PUSH
1896: LD_INT 42
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL 54269 0 2
1906: ADD
1907: PUSH
1908: LD_INT 4
1910: PUSH
1911: LD_INT 40
1913: PPUSH
1914: LD_INT 0
1916: PPUSH
1917: CALL 54269 0 2
1921: ADD
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 31
1930: PUSH
1931: LD_INT 44
1933: PPUSH
1934: LD_INT 2
1936: PPUSH
1937: CALL 54269 0 2
1941: ADD
1942: PUSH
1943: LD_INT 31
1945: PUSH
1946: LD_INT 45
1948: PPUSH
1949: LD_INT 2
1951: PPUSH
1952: CALL 54269 0 2
1956: ADD
1957: PUSH
1958: LD_INT 4
1960: PUSH
1961: LD_INT 43
1963: PPUSH
1964: LD_INT 2
1966: PPUSH
1967: CALL 54269 0 2
1971: ADD
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 31
1980: PUSH
1981: LD_INT 47
1983: PPUSH
1984: LD_INT 2
1986: PPUSH
1987: CALL 54269 0 2
1991: ADD
1992: PUSH
1993: LD_INT 31
1995: PUSH
1996: LD_INT 48
1998: PPUSH
1999: LD_INT 3
2001: PPUSH
2002: CALL 54269 0 2
2006: ADD
2007: PUSH
2008: LD_INT 4
2010: PUSH
2011: LD_INT 46
2013: PPUSH
2014: LD_INT 2
2016: PPUSH
2017: CALL 54269 0 2
2021: ADD
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 31
2030: PUSH
2031: LD_INT 50
2033: PPUSH
2034: LD_INT 3
2036: PPUSH
2037: CALL 54269 0 2
2041: ADD
2042: PUSH
2043: LD_INT 31
2045: PUSH
2046: LD_INT 51
2048: PPUSH
2049: LD_INT 3
2051: PPUSH
2052: CALL 54269 0 2
2056: ADD
2057: PUSH
2058: LD_INT 4
2060: PUSH
2061: LD_INT 49
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL 54269 0 2
2071: ADD
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: ST_TO_ADDR
// end ; end ;
2086: LD_VAR 0 2
2090: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2091: GO 2093
2093: DISABLE
2094: LD_INT 0
2096: PPUSH
2097: PPUSH
2098: PPUSH
2099: PPUSH
2100: PPUSH
2101: PPUSH
2102: PPUSH
2103: PPUSH
// begin if not mpShipments then
2104: LD_EXP 27
2108: NOT
2109: IFFALSE 2113
// exit ;
2111: GO 2651
// case mpShipments of 1 :
2113: LD_EXP 27
2117: PUSH
2118: LD_INT 1
2120: DOUBLE
2121: EQUAL
2122: IFTRUE 2126
2124: GO 2161
2126: POP
// begin time := 0 0$30 ;
2127: LD_ADDR_VAR 0 4
2131: PUSH
2132: LD_INT 1050
2134: ST_TO_ADDR
// normalTime := 0 0$30 ;
2135: LD_ADDR_VAR 0 6
2139: PUSH
2140: LD_INT 1050
2142: ST_TO_ADDR
// maxTime := 1 1$20 ;
2143: LD_ADDR_VAR 0 8
2147: PUSH
2148: LD_INT 2800
2150: ST_TO_ADDR
// delayTime := 0 0$5 ;
2151: LD_ADDR_VAR 0 7
2155: PUSH
2156: LD_INT 175
2158: ST_TO_ADDR
// end ; 2 :
2159: GO 2291
2161: LD_INT 2
2163: DOUBLE
2164: EQUAL
2165: IFTRUE 2169
2167: GO 2204
2169: POP
// begin time := 0 0$25 ;
2170: LD_ADDR_VAR 0 4
2174: PUSH
2175: LD_INT 875
2177: ST_TO_ADDR
// normalTime := 0 0$25 ;
2178: LD_ADDR_VAR 0 6
2182: PUSH
2183: LD_INT 875
2185: ST_TO_ADDR
// maxTime := 1 1$10 ;
2186: LD_ADDR_VAR 0 8
2190: PUSH
2191: LD_INT 2450
2193: ST_TO_ADDR
// delayTime := 0 0$4 ;
2194: LD_ADDR_VAR 0 7
2198: PUSH
2199: LD_INT 140
2201: ST_TO_ADDR
// end ; 3 :
2202: GO 2291
2204: LD_INT 3
2206: DOUBLE
2207: EQUAL
2208: IFTRUE 2212
2210: GO 2247
2212: POP
// begin time := 0 0$20 ;
2213: LD_ADDR_VAR 0 4
2217: PUSH
2218: LD_INT 700
2220: ST_TO_ADDR
// normalTime := 0 0$20 ;
2221: LD_ADDR_VAR 0 6
2225: PUSH
2226: LD_INT 700
2228: ST_TO_ADDR
// maxTime := 1 1$00 ;
2229: LD_ADDR_VAR 0 8
2233: PUSH
2234: LD_INT 2100
2236: ST_TO_ADDR
// delayTime := 0 0$3 ;
2237: LD_ADDR_VAR 0 7
2241: PUSH
2242: LD_INT 105
2244: ST_TO_ADDR
// end ; 4 :
2245: GO 2291
2247: LD_INT 4
2249: DOUBLE
2250: EQUAL
2251: IFTRUE 2255
2253: GO 2290
2255: POP
// begin time := 0 0$15 ;
2256: LD_ADDR_VAR 0 4
2260: PUSH
2261: LD_INT 525
2263: ST_TO_ADDR
// normalTime := 0 0$15 ;
2264: LD_ADDR_VAR 0 6
2268: PUSH
2269: LD_INT 525
2271: ST_TO_ADDR
// maxTime := 0 0$55 ;
2272: LD_ADDR_VAR 0 8
2276: PUSH
2277: LD_INT 1925
2279: ST_TO_ADDR
// delayTime := 0 0$2 ;
2280: LD_ADDR_VAR 0 7
2284: PUSH
2285: LD_INT 70
2287: ST_TO_ADDR
// end ; end ;
2288: GO 2291
2290: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_INT 8
2298: PUSH
2299: LD_INT 9
2301: PUSH
2302: LD_INT 10
2304: PUSH
2305: LD_INT 11
2307: PUSH
2308: LD_INT 12
2310: PUSH
2311: LD_INT 13
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: ST_TO_ADDR
// areas := [ ] ;
2322: LD_ADDR_VAR 0 5
2326: PUSH
2327: EMPTY
2328: ST_TO_ADDR
// for i := 1 to 8 do
2329: LD_ADDR_VAR 0 1
2333: PUSH
2334: DOUBLE
2335: LD_INT 1
2337: DEC
2338: ST_TO_ADDR
2339: LD_INT 8
2341: PUSH
2342: FOR_TO
2343: IFFALSE 2390
// begin if not mpSidePositions [ i ] then
2345: LD_EXP 7
2349: PUSH
2350: LD_VAR 0 1
2354: ARRAY
2355: NOT
2356: IFFALSE 2360
// continue ;
2358: GO 2342
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2360: LD_ADDR_VAR 0 5
2364: PUSH
2365: LD_VAR 0 5
2369: PUSH
2370: LD_VAR 0 3
2374: PUSH
2375: LD_EXP 7
2379: PUSH
2380: LD_VAR 0 1
2384: ARRAY
2385: ARRAY
2386: ADD
2387: ST_TO_ADDR
// end ;
2388: GO 2342
2390: POP
2391: POP
// x := 1 ;
2392: LD_ADDR_VAR 0 2
2396: PUSH
2397: LD_INT 1
2399: ST_TO_ADDR
// repeat wait ( time ) ;
2400: LD_VAR 0 4
2404: PPUSH
2405: CALL_OW 67
// x := Inc ( x ) ;
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL 50923 0 1
2423: ST_TO_ADDR
// if x > 5 then
2424: LD_VAR 0 2
2428: PUSH
2429: LD_INT 5
2431: GREATER
2432: IFFALSE 2442
// x := 1 ;
2434: LD_ADDR_VAR 0 2
2438: PUSH
2439: LD_INT 1
2441: ST_TO_ADDR
// for i in areas do
2442: LD_ADDR_VAR 0 1
2446: PUSH
2447: LD_VAR 0 5
2451: PUSH
2452: FOR_IN
2453: IFFALSE 2492
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2455: LD_VAR 0 1
2459: PPUSH
2460: LD_INT 1
2462: PPUSH
2463: CALL_OW 287
2467: PUSH
2468: LD_INT 20
2470: LESS
2471: IFFALSE 2490
// begin CreateCratesArea ( x , i , true ) ;
2473: LD_VAR 0 2
2477: PPUSH
2478: LD_VAR 0 1
2482: PPUSH
2483: LD_INT 1
2485: PPUSH
2486: CALL_OW 55
// end ; end ;
2490: GO 2452
2492: POP
2493: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 20 then
2494: LD_INT 1
2496: PPUSH
2497: LD_INT 1
2499: PPUSH
2500: CALL_OW 287
2504: PUSH
2505: LD_INT 20
2507: LESS
2508: IFFALSE 2525
// CreateCratesArea ( x , MZBaseArea , true ) ;
2510: LD_VAR 0 2
2514: PPUSH
2515: LD_INT 1
2517: PPUSH
2518: LD_INT 1
2520: PPUSH
2521: CALL_OW 55
// if GetResourceArea ( MZSpecialArea , mat_cans ) = 0 then
2525: LD_INT 15
2527: PPUSH
2528: LD_INT 1
2530: PPUSH
2531: CALL_OW 287
2535: PUSH
2536: LD_INT 0
2538: EQUAL
2539: IFFALSE 2578
// begin for i := 1 to 3 do
2541: LD_ADDR_VAR 0 1
2545: PUSH
2546: DOUBLE
2547: LD_INT 1
2549: DEC
2550: ST_TO_ADDR
2551: LD_INT 3
2553: PUSH
2554: FOR_TO
2555: IFFALSE 2574
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2557: LD_VAR 0 2
2561: PPUSH
2562: LD_INT 15
2564: PPUSH
2565: LD_INT 1
2567: PPUSH
2568: CALL_OW 55
2572: GO 2554
2574: POP
2575: POP
// end else
2576: GO 2609
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
2578: LD_INT 15
2580: PPUSH
2581: LD_INT 1
2583: PPUSH
2584: CALL_OW 287
2588: PUSH
2589: LD_INT 30
2591: LESS
2592: IFFALSE 2609
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2594: LD_VAR 0 2
2598: PPUSH
2599: LD_INT 15
2601: PPUSH
2602: LD_INT 1
2604: PPUSH
2605: CALL_OW 55
// time := time + delayTime ;
2609: LD_ADDR_VAR 0 4
2613: PUSH
2614: LD_VAR 0 4
2618: PUSH
2619: LD_VAR 0 7
2623: PLUS
2624: ST_TO_ADDR
// if time > maxTime then
2625: LD_VAR 0 4
2629: PUSH
2630: LD_VAR 0 8
2634: GREATER
2635: IFFALSE 2647
// time := normalTime ;
2637: LD_ADDR_VAR 0 4
2641: PUSH
2642: LD_VAR 0 6
2646: ST_TO_ADDR
// until false ;
2647: LD_INT 0
2649: IFFALSE 2400
// end ; end_of_file
2651: PPOPN 8
2653: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2654: LD_VAR 0 1
2658: PPUSH
2659: CALL 55067 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: CALL 8360 0 1
// end ;
2672: PPOPN 1
2674: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2675: LD_VAR 0 1
2679: PPUSH
2680: CALL 55084 0 1
// end ;
2684: PPOPN 1
2686: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2687: LD_VAR 0 1
2691: PPUSH
2692: CALL 9413 0 1
2696: PPOPN 1
2698: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2699: LD_VAR 0 1
2703: PPUSH
2704: LD_VAR 0 2
2708: PPUSH
2709: CALL 55125 0 2
2713: PPOPN 2
2715: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2716: LD_VAR 0 1
2720: PPUSH
2721: LD_VAR 0 2
2725: PPUSH
2726: CALL 9166 0 2
2730: PPOPN 2
2732: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2733: LD_VAR 0 1
2737: PPUSH
2738: LD_VAR 0 2
2742: PPUSH
2743: LD_VAR 0 3
2747: PPUSH
2748: CALL 9466 0 3
2752: PPOPN 3
2754: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2755: LD_VAR 0 1
2759: PPUSH
2760: LD_VAR 0 2
2764: PPUSH
2765: LD_VAR 0 3
2769: PPUSH
2770: LD_VAR 0 4
2774: PPUSH
2775: LD_VAR 0 5
2779: PPUSH
2780: CALL 10150 0 5
// end ;
2784: PPOPN 5
2786: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2787: LD_VAR 0 1
2791: PPUSH
2792: LD_VAR 0 2
2796: PPUSH
2797: LD_VAR 0 3
2801: PPUSH
2802: LD_VAR 0 4
2806: PPUSH
2807: CALL 10253 0 4
2811: PPOPN 4
2813: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2814: LD_INT 0
2816: PPUSH
2817: PPUSH
// disable ( mpActive ) ;
2818: LD_INT 100
2820: DISABLE_MARKED
// disable ( mpWin ) ;
2821: LD_INT 101
2823: DISABLE_MARKED
// disable ( mpLose ) ;
2824: LD_INT 102
2826: DISABLE_MARKED
// mpGameType := 0 ;
2827: LD_ADDR_EXP 3
2831: PUSH
2832: LD_INT 0
2834: ST_TO_ADDR
// mpGameSettings := [ ] ;
2835: LD_ADDR_EXP 6
2839: PUSH
2840: EMPTY
2841: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2842: LD_ADDR_EXP 4
2846: PUSH
2847: EMPTY
2848: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2849: LD_ADDR_EXP 5
2853: PUSH
2854: EMPTY
2855: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2856: LD_ADDR_EXP 29
2860: PUSH
2861: LD_INT 2
2863: PUSH
2864: LD_INT 2
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2871: LD_ADDR_EXP 12
2875: PUSH
2876: EMPTY
2877: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2878: LD_ADDR_EXP 13
2882: PUSH
2883: EMPTY
2884: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2885: LD_ADDR_EXP 42
2889: PUSH
2890: EMPTY
2891: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2892: LD_ADDR_EXP 43
2896: PUSH
2897: EMPTY
2898: ST_TO_ADDR
// mpDepots := [ ] ;
2899: LD_ADDR_EXP 14
2903: PUSH
2904: EMPTY
2905: ST_TO_ADDR
// mpBuildings := [ ] ;
2906: LD_ADDR_EXP 17
2910: PUSH
2911: EMPTY
2912: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2913: LD_ADDR_EXP 18
2917: PUSH
2918: EMPTY
2919: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2920: LD_ADDR_EXP 19
2924: PUSH
2925: EMPTY
2926: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2927: LD_ADDR_EXP 20
2931: PUSH
2932: EMPTY
2933: ST_TO_ADDR
// mpStartingResources := [ ] ;
2934: LD_ADDR_EXP 15
2938: PUSH
2939: EMPTY
2940: ST_TO_ADDR
// mpStartPos := [ ] ;
2941: LD_ADDR_EXP 21
2945: PUSH
2946: EMPTY
2947: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2948: LD_ADDR_EXP 22
2952: PUSH
2953: LD_INT 1
2955: NEG
2956: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2957: LD_ADDR_EXP 23
2961: PUSH
2962: EMPTY
2963: ST_TO_ADDR
// mpApemans := [ ] ;
2964: LD_ADDR_EXP 30
2968: PUSH
2969: EMPTY
2970: ST_TO_ADDR
// mpApemansArea := [ ] ;
2971: LD_ADDR_EXP 31
2975: PUSH
2976: EMPTY
2977: ST_TO_ADDR
// mpRespawn := [ ] ;
2978: LD_ADDR_EXP 33
2982: PUSH
2983: EMPTY
2984: ST_TO_ADDR
// mpKingArea := 0 ;
2985: LD_ADDR_EXP 34
2989: PUSH
2990: LD_INT 0
2992: ST_TO_ADDR
// mpPoints := [ ] ;
2993: LD_ADDR_EXP 35
2997: PUSH
2998: EMPTY
2999: ST_TO_ADDR
// mpVehicles := 0 ;
3000: LD_ADDR_EXP 36
3004: PUSH
3005: LD_INT 0
3007: ST_TO_ADDR
// mpShipments := 0 ;
3008: LD_ADDR_EXP 27
3012: PUSH
3013: LD_INT 0
3015: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3016: LD_ADDR_EXP 40
3020: PUSH
3021: EMPTY
3022: PUSH
3023: EMPTY
3024: PUSH
3025: EMPTY
3026: PUSH
3027: EMPTY
3028: PUSH
3029: EMPTY
3030: PUSH
3031: EMPTY
3032: PUSH
3033: EMPTY
3034: PUSH
3035: EMPTY
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3047: LD_ADDR_EXP 32
3051: PUSH
3052: EMPTY
3053: PUSH
3054: EMPTY
3055: PUSH
3056: EMPTY
3057: PUSH
3058: EMPTY
3059: PUSH
3060: EMPTY
3061: PUSH
3062: EMPTY
3063: PUSH
3064: EMPTY
3065: PUSH
3066: EMPTY
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
3078: LD_ADDR_EXP 41
3082: PUSH
3083: LD_INT 0
3085: PUSH
3086: LD_INT 0
3088: PUSH
3089: LD_INT 0
3091: PUSH
3092: LD_INT 0
3094: PUSH
3095: LD_INT 0
3097: PUSH
3098: LD_INT 0
3100: PUSH
3101: LD_INT 0
3103: PUSH
3104: LD_INT 0
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: ST_TO_ADDR
// mpEmissions := 0 ;
3117: LD_ADDR_EXP 37
3121: PUSH
3122: LD_INT 0
3124: ST_TO_ADDR
// mpTeleports := 0 ;
3125: LD_ADDR_EXP 44
3129: PUSH
3130: LD_INT 0
3132: ST_TO_ADDR
// mpArtifacts := 0 ;
3133: LD_ADDR_EXP 45
3137: PUSH
3138: LD_INT 0
3140: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3141: LD_ADDR_EXP 46
3145: PUSH
3146: LD_INT 0
3148: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3149: LD_ADDR_EXP 25
3153: PUSH
3154: LD_INT 3
3156: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3157: LD_ADDR_EXP 24
3161: PUSH
3162: LD_INT 15
3164: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3165: LD_ADDR_EXP 38
3169: PUSH
3170: LD_INT 0
3172: ST_TO_ADDR
// mpGameActive := false ;
3173: LD_ADDR_EXP 39
3177: PUSH
3178: LD_INT 0
3180: ST_TO_ADDR
// mpBlockRespThread := false ;
3181: LD_ADDR_EXP 47
3185: PUSH
3186: LD_INT 0
3188: ST_TO_ADDR
// for i := 1 to 32 do
3189: LD_ADDR_VAR 0 2
3193: PUSH
3194: DOUBLE
3195: LD_INT 1
3197: DEC
3198: ST_TO_ADDR
3199: LD_INT 32
3201: PUSH
3202: FOR_TO
3203: IFFALSE 3230
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3205: LD_ADDR_EXP 6
3209: PUSH
3210: LD_EXP 6
3214: PPUSH
3215: LD_VAR 0 2
3219: PPUSH
3220: LD_INT 0
3222: PPUSH
3223: CALL_OW 1
3227: ST_TO_ADDR
3228: GO 3202
3230: POP
3231: POP
// end ;
3232: LD_VAR 0 1
3236: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3237: LD_INT 0
3239: PPUSH
3240: PPUSH
3241: PPUSH
3242: PPUSH
3243: PPUSH
3244: PPUSH
3245: PPUSH
3246: PPUSH
3247: PPUSH
3248: PPUSH
3249: PPUSH
3250: PPUSH
3251: PPUSH
3252: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
3253: LD_ADDR_VAR 0 14
3257: PUSH
3258: LD_INT 1
3260: PUSH
3261: LD_INT 2
3263: PUSH
3264: LD_INT 3
3266: PUSH
3267: LD_INT 5
3269: PUSH
3270: LD_INT 6
3272: PUSH
3273: LD_INT 7
3275: PUSH
3276: LD_INT 8
3278: PUSH
3279: EMPTY
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: ST_TO_ADDR
// for i in gameTypes do
3288: LD_ADDR_VAR 0 2
3292: PUSH
3293: LD_VAR 0 14
3297: PUSH
3298: FOR_IN
3299: IFFALSE 3308
// disable ( i ) ;
3301: LD_VAR 0 2
3305: DISABLE_MARKED
3306: GO 3298
3308: POP
3309: POP
// if Multiplayer then
3310: LD_OWVAR 4
3314: IFFALSE 3498
// begin mpGameType := mp_game_type ;
3316: LD_ADDR_EXP 3
3320: PUSH
3321: LD_OWVAR 6
3325: ST_TO_ADDR
// your_side := mp_player_side ;
3326: LD_ADDR_OWVAR 2
3330: PUSH
3331: LD_OWVAR 7
3335: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3336: LD_ADDR_EXP 7
3340: PUSH
3341: LD_OWVAR 17
3345: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3346: LD_ADDR_EXP 8
3350: PUSH
3351: LD_OWVAR 15
3355: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3356: LD_ADDR_EXP 9
3360: PUSH
3361: LD_OWVAR 16
3365: ST_TO_ADDR
// mpTeams := mp_teams ;
3366: LD_ADDR_EXP 10
3370: PUSH
3371: LD_OWVAR 12
3375: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3376: LD_ADDR_VAR 0 2
3380: PUSH
3381: DOUBLE
3382: LD_INT 1
3384: DEC
3385: ST_TO_ADDR
3386: LD_EXP 4
3390: PPUSH
3391: CALL 13574 0 1
3395: PUSH
3396: FOR_TO
3397: IFFALSE 3473
// begin setting := mpGameSettingsKeys [ i ] ;
3399: LD_ADDR_VAR 0 12
3403: PUSH
3404: LD_EXP 4
3408: PUSH
3409: LD_VAR 0 2
3413: ARRAY
3414: ST_TO_ADDR
// if setting then
3415: LD_VAR 0 12
3419: IFFALSE 3471
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3421: LD_ADDR_EXP 6
3425: PUSH
3426: LD_EXP 6
3430: PPUSH
3431: LD_VAR 0 2
3435: PPUSH
3436: LD_EXP 5
3440: PUSH
3441: LD_VAR 0 2
3445: ARRAY
3446: PUSH
3447: LD_VAR 0 2
3451: PUSH
3452: LD_INT 1
3454: MINUS
3455: PPUSH
3456: CALL_OW 426
3460: PUSH
3461: LD_INT 1
3463: PLUS
3464: ARRAY
3465: PPUSH
3466: CALL_OW 1
3470: ST_TO_ADDR
// end ;
3471: GO 3396
3473: POP
3474: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3475: LD_ADDR_EXP 11
3479: PUSH
3480: LD_EXP 8
3484: PUSH
3485: LD_INT 0
3487: PUSH
3488: EMPTY
3489: LIST
3490: DIFF
3491: PUSH
3492: LD_INT 1
3494: GREATER
3495: ST_TO_ADDR
// end else
3496: GO 3498
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3498: LD_EXP 3
3502: PPUSH
3503: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3507: LD_EXP 18
3511: PPUSH
3512: CALL 13574 0 1
3516: IFFALSE 3547
// begin for i in mpMarkedAreas do
3518: LD_ADDR_VAR 0 2
3522: PUSH
3523: LD_EXP 18
3527: PUSH
3528: FOR_IN
3529: IFFALSE 3545
// SetAreaMapShow ( i , 0 ) ;
3531: LD_VAR 0 2
3535: PPUSH
3536: LD_INT 0
3538: PPUSH
3539: CALL_OW 424
3543: GO 3528
3545: POP
3546: POP
// end ; for i := 1 to 8 do
3547: LD_ADDR_VAR 0 2
3551: PUSH
3552: DOUBLE
3553: LD_INT 1
3555: DEC
3556: ST_TO_ADDR
3557: LD_INT 8
3559: PUSH
3560: FOR_TO
3561: IFFALSE 5020
// begin if not mpSidePositions [ i ] then
3563: LD_EXP 7
3567: PUSH
3568: LD_VAR 0 2
3572: ARRAY
3573: NOT
3574: IFFALSE 3578
// continue ;
3576: GO 3560
// side := i ;
3578: LD_ADDR_VAR 0 7
3582: PUSH
3583: LD_VAR 0 2
3587: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3588: LD_ADDR_VAR 0 9
3592: PUSH
3593: LD_EXP 9
3597: PUSH
3598: LD_VAR 0 2
3602: ARRAY
3603: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3604: LD_ADDR_VAR 0 8
3608: PUSH
3609: LD_EXP 7
3613: PUSH
3614: LD_VAR 0 2
3618: ARRAY
3619: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3620: LD_EXP 12
3624: PPUSH
3625: CALL 13574 0 1
3629: IFFALSE 3706
// begin for j in mpOilDeposits [ pos ] do
3631: LD_ADDR_VAR 0 3
3635: PUSH
3636: LD_EXP 12
3640: PUSH
3641: LD_VAR 0 8
3645: ARRAY
3646: PUSH
3647: FOR_IN
3648: IFFALSE 3704
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3650: LD_VAR 0 3
3654: PUSH
3655: LD_INT 1
3657: ARRAY
3658: PPUSH
3659: LD_VAR 0 3
3663: PUSH
3664: LD_INT 2
3666: ARRAY
3667: PPUSH
3668: LD_INT 2
3670: PPUSH
3671: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3675: LD_VAR 0 3
3679: PUSH
3680: LD_INT 1
3682: ARRAY
3683: PPUSH
3684: LD_VAR 0 3
3688: PUSH
3689: LD_INT 2
3691: ARRAY
3692: PPUSH
3693: LD_VAR 0 7
3697: PPUSH
3698: CALL_OW 441
// end ;
3702: GO 3647
3704: POP
3705: POP
// end ; if Count ( mpSibDeposits ) then
3706: LD_EXP 13
3710: PPUSH
3711: CALL 13574 0 1
3715: IFFALSE 3792
// begin for j in mpSibDeposits [ pos ] do
3717: LD_ADDR_VAR 0 3
3721: PUSH
3722: LD_EXP 13
3726: PUSH
3727: LD_VAR 0 8
3731: ARRAY
3732: PUSH
3733: FOR_IN
3734: IFFALSE 3790
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3736: LD_VAR 0 3
3740: PUSH
3741: LD_INT 1
3743: ARRAY
3744: PPUSH
3745: LD_VAR 0 3
3749: PUSH
3750: LD_INT 2
3752: ARRAY
3753: PPUSH
3754: LD_INT 3
3756: PPUSH
3757: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3761: LD_VAR 0 3
3765: PUSH
3766: LD_INT 1
3768: ARRAY
3769: PPUSH
3770: LD_VAR 0 3
3774: PUSH
3775: LD_INT 2
3777: ARRAY
3778: PPUSH
3779: LD_VAR 0 7
3783: PPUSH
3784: CALL_OW 441
// end ;
3788: GO 3733
3790: POP
3791: POP
// end ; InitBc ;
3792: CALL_OW 21
// InitUc ;
3796: CALL_OW 18
// uc_side := side ;
3800: LD_ADDR_OWVAR 20
3804: PUSH
3805: LD_VAR 0 7
3809: ST_TO_ADDR
// uc_nation := nation ;
3810: LD_ADDR_OWVAR 21
3814: PUSH
3815: LD_VAR 0 9
3819: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3820: LD_EXP 22
3824: PUSH
3825: LD_INT 1
3827: NEG
3828: GREATER
3829: IFFALSE 3988
// begin x := mpStartPos [ pos ] [ 1 ] ;
3831: LD_ADDR_VAR 0 5
3835: PUSH
3836: LD_EXP 21
3840: PUSH
3841: LD_VAR 0 8
3845: ARRAY
3846: PUSH
3847: LD_INT 1
3849: ARRAY
3850: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3851: LD_ADDR_VAR 0 6
3855: PUSH
3856: LD_EXP 21
3860: PUSH
3861: LD_VAR 0 8
3865: ARRAY
3866: PUSH
3867: LD_INT 2
3869: ARRAY
3870: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3871: LD_VAR 0 5
3875: PPUSH
3876: LD_VAR 0 6
3880: PPUSH
3881: LD_INT 12
3883: PPUSH
3884: LD_INT 2
3886: PPUSH
3887: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3891: LD_ADDR_EXP 23
3895: PUSH
3896: LD_EXP 23
3900: PPUSH
3901: LD_VAR 0 7
3905: PPUSH
3906: LD_VAR 0 7
3910: PPUSH
3911: LD_VAR 0 5
3915: PPUSH
3916: LD_VAR 0 6
3920: PPUSH
3921: LD_INT 1
3923: PUSH
3924: LD_INT 100
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 2
3933: PUSH
3934: LD_INT 70
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 3
3943: PUSH
3944: LD_INT 40
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: LD_INT 10
3953: PUSH
3954: LD_INT 25
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: PUSH
3961: LD_INT 20
3963: PUSH
3964: LD_INT 100
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: PPUSH
3978: CALL_OW 418
3982: PPUSH
3983: CALL_OW 1
3987: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3988: LD_EXP 14
3992: PPUSH
3993: CALL 13574 0 1
3997: IFFALSE 4196
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
3999: LD_EXP 3
4003: PUSH
4004: LD_INT 2
4006: PUSH
4007: LD_INT 8
4009: PUSH
4010: LD_INT 6
4012: PUSH
4013: LD_INT 7
4015: PUSH
4016: EMPTY
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: IN
4022: IFFALSE 4042
// begin bc_level := 10 ;
4024: LD_ADDR_OWVAR 43
4028: PUSH
4029: LD_INT 10
4031: ST_TO_ADDR
// bc_type := b_warehouse ;
4032: LD_ADDR_OWVAR 42
4036: PUSH
4037: LD_INT 1
4039: ST_TO_ADDR
// end else
4040: GO 4058
// begin bc_level := 0 ;
4042: LD_ADDR_OWVAR 43
4046: PUSH
4047: LD_INT 0
4049: ST_TO_ADDR
// bc_type := b_depot ;
4050: LD_ADDR_OWVAR 42
4054: PUSH
4055: LD_INT 0
4057: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4058: LD_ADDR_VAR 0 4
4062: PUSH
4063: LD_EXP 14
4067: PUSH
4068: LD_VAR 0 8
4072: ARRAY
4073: PUSH
4074: LD_INT 1
4076: ARRAY
4077: PPUSH
4078: LD_EXP 14
4082: PUSH
4083: LD_VAR 0 8
4087: ARRAY
4088: PUSH
4089: LD_INT 2
4091: ARRAY
4092: PPUSH
4093: LD_EXP 14
4097: PUSH
4098: LD_VAR 0 8
4102: ARRAY
4103: PUSH
4104: LD_INT 3
4106: ARRAY
4107: PPUSH
4108: CALL_OW 47
4112: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4113: LD_VAR 0 4
4117: PPUSH
4118: LD_STRING @
4120: PUSH
4121: LD_VAR 0 7
4125: STR
4126: PPUSH
4127: CALL_OW 500
// if Count ( mpStartingResources ) then
4131: LD_EXP 15
4135: PPUSH
4136: CALL 13574 0 1
4140: IFFALSE 4194
// begin for j := 1 to mpStartingResources do
4142: LD_ADDR_VAR 0 3
4146: PUSH
4147: DOUBLE
4148: LD_INT 1
4150: DEC
4151: ST_TO_ADDR
4152: LD_EXP 15
4156: PUSH
4157: FOR_TO
4158: IFFALSE 4192
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4160: LD_VAR 0 4
4164: PPUSH
4165: CALL_OW 274
4169: PPUSH
4170: LD_VAR 0 3
4174: PPUSH
4175: LD_EXP 15
4179: PUSH
4180: LD_VAR 0 3
4184: ARRAY
4185: PPUSH
4186: CALL_OW 277
4190: GO 4157
4192: POP
4193: POP
// end ; end else
4194: GO 4403
// if Count ( mpStartingResources ) then
4196: LD_EXP 15
4200: PPUSH
4201: CALL 13574 0 1
4205: IFFALSE 4403
// begin x := mpStartPos [ pos ] [ 1 ] ;
4207: LD_ADDR_VAR 0 5
4211: PUSH
4212: LD_EXP 21
4216: PUSH
4217: LD_VAR 0 8
4221: ARRAY
4222: PUSH
4223: LD_INT 1
4225: ARRAY
4226: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4227: LD_ADDR_VAR 0 6
4231: PUSH
4232: LD_EXP 21
4236: PUSH
4237: LD_VAR 0 8
4241: ARRAY
4242: PUSH
4243: LD_INT 2
4245: ARRAY
4246: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4247: LD_ADDR_VAR 0 3
4251: PUSH
4252: DOUBLE
4253: LD_INT 1
4255: DEC
4256: ST_TO_ADDR
4257: LD_EXP 15
4261: PUSH
4262: FOR_TO
4263: IFFALSE 4401
// begin resources := mpStartingResources [ j ] ;
4265: LD_ADDR_VAR 0 13
4269: PUSH
4270: LD_EXP 15
4274: PUSH
4275: LD_VAR 0 3
4279: ARRAY
4280: ST_TO_ADDR
// if resources = 0 then
4281: LD_VAR 0 13
4285: PUSH
4286: LD_INT 0
4288: EQUAL
4289: IFFALSE 4293
// continue ;
4291: GO 4262
// repeat if resources >= 50 then
4293: LD_VAR 0 13
4297: PUSH
4298: LD_INT 50
4300: GREATEREQUAL
4301: IFFALSE 4347
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4303: LD_VAR 0 3
4307: PPUSH
4308: LD_INT 5
4310: PPUSH
4311: LD_VAR 0 5
4315: PPUSH
4316: LD_VAR 0 6
4320: PPUSH
4321: LD_INT 6
4323: PPUSH
4324: LD_INT 0
4326: PPUSH
4327: CALL_OW 60
// resources := resources - 50 ;
4331: LD_ADDR_VAR 0 13
4335: PUSH
4336: LD_VAR 0 13
4340: PUSH
4341: LD_INT 50
4343: MINUS
4344: ST_TO_ADDR
// end else
4345: GO 4389
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4347: LD_VAR 0 3
4351: PPUSH
4352: LD_VAR 0 13
4356: PUSH
4357: LD_INT 10
4359: DIV
4360: PPUSH
4361: LD_VAR 0 5
4365: PPUSH
4366: LD_VAR 0 6
4370: PPUSH
4371: LD_INT 6
4373: PPUSH
4374: LD_INT 0
4376: PPUSH
4377: CALL_OW 60
// resources := 0 ;
4381: LD_ADDR_VAR 0 13
4385: PUSH
4386: LD_INT 0
4388: ST_TO_ADDR
// end ; until resources <= 0 ;
4389: LD_VAR 0 13
4393: PUSH
4394: LD_INT 0
4396: LESSEQUAL
4397: IFFALSE 4293
// end ;
4399: GO 4262
4401: POP
4402: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
4403: LD_EXP 17
4407: PPUSH
4408: CALL 13574 0 1
4412: IFFALSE 4432
4414: PUSH
4415: LD_EXP 3
4419: PUSH
4420: LD_INT 2
4422: PUSH
4423: LD_INT 8
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: IN
4430: NOT
4431: AND
4432: IFFALSE 4510
// begin for j in mpBuildings [ pos ] do
4434: LD_ADDR_VAR 0 3
4438: PUSH
4439: LD_EXP 17
4443: PUSH
4444: LD_VAR 0 8
4448: ARRAY
4449: PUSH
4450: FOR_IN
4451: IFFALSE 4508
// begin bc_level := 0 ;
4453: LD_ADDR_OWVAR 43
4457: PUSH
4458: LD_INT 0
4460: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4461: LD_ADDR_OWVAR 42
4465: PUSH
4466: LD_VAR 0 3
4470: PUSH
4471: LD_INT 1
4473: ARRAY
4474: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4475: LD_VAR 0 3
4479: PUSH
4480: LD_INT 2
4482: ARRAY
4483: PPUSH
4484: LD_VAR 0 3
4488: PUSH
4489: LD_INT 3
4491: ARRAY
4492: PPUSH
4493: LD_VAR 0 3
4497: PUSH
4498: LD_INT 4
4500: ARRAY
4501: PPUSH
4502: CALL_OW 47
// end ;
4506: GO 4450
4508: POP
4509: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4510: LD_EXP 26
4514: IFFALSE 4534
4516: PUSH
4517: LD_INT 20
4519: PPUSH
4520: LD_VAR 0 7
4524: PPUSH
4525: CALL_OW 321
4529: PUSH
4530: LD_INT 1
4532: EQUAL
4533: AND
4534: IFFALSE 4551
// SetTech ( tech_SibDet , side , state_researched ) ;
4536: LD_INT 20
4538: PPUSH
4539: LD_VAR 0 7
4543: PPUSH
4544: LD_INT 2
4546: PPUSH
4547: CALL_OW 322
// if not mpArtifacts then
4551: LD_EXP 45
4555: NOT
4556: IFFALSE 4573
// SetTech ( tech_artifact , side , state_disabled ) ;
4558: LD_INT 24
4560: PPUSH
4561: LD_VAR 0 7
4565: PPUSH
4566: LD_INT 0
4568: PPUSH
4569: CALL_OW 322
// if mpSibBomb = 1 then
4573: LD_EXP 28
4577: PUSH
4578: LD_INT 1
4580: EQUAL
4581: IFFALSE 4600
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4583: LD_INT 25
4585: PPUSH
4586: LD_VAR 0 7
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: CALL_OW 322
// end else
4598: GO 4615
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4600: LD_INT 25
4602: PPUSH
4603: LD_VAR 0 7
4607: PPUSH
4608: LD_INT 0
4610: PPUSH
4611: CALL_OW 322
// end ; if mpVehicles then
4615: LD_EXP 36
4619: IFFALSE 4718
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4621: LD_ADDR_VAR 0 3
4625: PUSH
4626: LD_VAR 0 7
4630: PPUSH
4631: LD_VAR 0 9
4635: PPUSH
4636: LD_EXP 36
4640: PPUSH
4641: CALL 5977 0 3
4645: PUSH
4646: FOR_IN
4647: IFFALSE 4716
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4649: LD_VAR 0 3
4653: PPUSH
4654: LD_INT 0
4656: PPUSH
4657: LD_INT 5
4659: PPUSH
4660: CALL_OW 12
4664: PPUSH
4665: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_EXP 21
4678: PUSH
4679: LD_VAR 0 8
4683: ARRAY
4684: PUSH
4685: LD_INT 1
4687: ARRAY
4688: PPUSH
4689: LD_EXP 21
4693: PUSH
4694: LD_VAR 0 8
4698: ARRAY
4699: PUSH
4700: LD_INT 2
4702: ARRAY
4703: PPUSH
4704: LD_INT 12
4706: PPUSH
4707: LD_INT 0
4709: PPUSH
4710: CALL_OW 50
// end ;
4714: GO 4646
4716: POP
4717: POP
// end ; uc_nation := nation ;
4718: LD_ADDR_OWVAR 21
4722: PUSH
4723: LD_VAR 0 9
4727: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4728: LD_EXP 3
4732: PUSH
4733: LD_INT 6
4735: PUSH
4736: LD_INT 7
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: IN
4743: IFFALSE 4768
4745: PUSH
4746: LD_EXP 7
4750: PUSH
4751: LD_VAR 0 2
4755: ARRAY
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: LD_INT 2
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: IN
4767: AND
4768: IFFALSE 4816
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4770: LD_ADDR_VAR 0 11
4774: PUSH
4775: LD_VAR 0 7
4779: PPUSH
4780: LD_VAR 0 9
4784: PPUSH
4785: LD_EXP 24
4789: PUSH
4790: LD_EXP 24
4794: PUSH
4795: LD_INT 2
4797: DIV
4798: PLUS
4799: PPUSH
4800: LD_EXP 25
4804: PUSH
4805: LD_INT 1
4807: PLUS
4808: PPUSH
4809: CALL 5432 0 4
4813: ST_TO_ADDR
4814: GO 4846
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4816: LD_ADDR_VAR 0 11
4820: PUSH
4821: LD_VAR 0 7
4825: PPUSH
4826: LD_VAR 0 9
4830: PPUSH
4831: LD_EXP 24
4835: PPUSH
4836: LD_EXP 25
4840: PPUSH
4841: CALL 5432 0 4
4845: ST_TO_ADDR
// for j in team do
4846: LD_ADDR_VAR 0 3
4850: PUSH
4851: LD_VAR 0 11
4855: PUSH
4856: FOR_IN
4857: IFFALSE 4906
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4859: LD_VAR 0 3
4863: PPUSH
4864: LD_EXP 21
4868: PUSH
4869: LD_VAR 0 8
4873: ARRAY
4874: PUSH
4875: LD_INT 1
4877: ARRAY
4878: PPUSH
4879: LD_EXP 21
4883: PUSH
4884: LD_VAR 0 8
4888: ARRAY
4889: PUSH
4890: LD_INT 2
4892: ARRAY
4893: PPUSH
4894: LD_INT 12
4896: PPUSH
4897: LD_INT 0
4899: PPUSH
4900: CALL_OW 50
4904: GO 4856
4906: POP
4907: POP
// if mpApemans then
4908: LD_EXP 30
4912: IFFALSE 5018
// begin for j := 1 to mpApemans do
4914: LD_ADDR_VAR 0 3
4918: PUSH
4919: DOUBLE
4920: LD_INT 1
4922: DEC
4923: ST_TO_ADDR
4924: LD_EXP 30
4928: PUSH
4929: FOR_TO
4930: IFFALSE 5016
// begin PrepareApeman ( - 5 ) ;
4932: LD_INT 5
4934: NEG
4935: PPUSH
4936: CALL 45677 0 1
// ape := CreateHuman ;
4940: LD_ADDR_VAR 0 10
4944: PUSH
4945: CALL_OW 44
4949: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4950: LD_ADDR_EXP 32
4954: PUSH
4955: LD_EXP 32
4959: PPUSH
4960: LD_VAR 0 8
4964: PPUSH
4965: LD_EXP 32
4969: PUSH
4970: LD_VAR 0 8
4974: ARRAY
4975: PPUSH
4976: LD_VAR 0 10
4980: PPUSH
4981: CALL 49550 0 2
4985: PPUSH
4986: CALL_OW 1
4990: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4991: LD_VAR 0 10
4995: PPUSH
4996: LD_EXP 31
5000: PUSH
5001: LD_VAR 0 8
5005: ARRAY
5006: PPUSH
5007: LD_INT 0
5009: PPUSH
5010: CALL_OW 49
// end ;
5014: GO 4929
5016: POP
5017: POP
// end ; end ;
5018: GO 3560
5020: POP
5021: POP
// if not mpTeamGame then
5022: LD_EXP 11
5026: NOT
5027: IFFALSE 5125
// begin for i := 1 to 8 do
5029: LD_ADDR_VAR 0 2
5033: PUSH
5034: DOUBLE
5035: LD_INT 1
5037: DEC
5038: ST_TO_ADDR
5039: LD_INT 8
5041: PUSH
5042: FOR_TO
5043: IFFALSE 5121
// for j := 1 to 8 do
5045: LD_ADDR_VAR 0 3
5049: PUSH
5050: DOUBLE
5051: LD_INT 1
5053: DEC
5054: ST_TO_ADDR
5055: LD_INT 8
5057: PUSH
5058: FOR_TO
5059: IFFALSE 5117
// if i <> j then
5061: LD_VAR 0 2
5065: PUSH
5066: LD_VAR 0 3
5070: NONEQUAL
5071: IFFALSE 5095
// SetAttitude ( i , j , att_neutral , true ) else
5073: LD_VAR 0 2
5077: PPUSH
5078: LD_VAR 0 3
5082: PPUSH
5083: LD_INT 0
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: CALL_OW 80
5093: GO 5115
// SetAttitude ( i , j , att_friend , true ) ;
5095: LD_VAR 0 2
5099: PPUSH
5100: LD_VAR 0 3
5104: PPUSH
5105: LD_INT 1
5107: PPUSH
5108: LD_INT 1
5110: PPUSH
5111: CALL_OW 80
5115: GO 5058
5117: POP
5118: POP
5119: GO 5042
5121: POP
5122: POP
// end else
5123: GO 5300
// begin if mpSharedVision then
5125: LD_EXP 16
5129: IFFALSE 5194
// begin for i in mpTeams do
5131: LD_ADDR_VAR 0 2
5135: PUSH
5136: LD_EXP 10
5140: PUSH
5141: FOR_IN
5142: IFFALSE 5192
// for j := 2 to i do
5144: LD_ADDR_VAR 0 3
5148: PUSH
5149: DOUBLE
5150: LD_INT 2
5152: DEC
5153: ST_TO_ADDR
5154: LD_VAR 0 2
5158: PUSH
5159: FOR_TO
5160: IFFALSE 5188
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5162: LD_VAR 0 2
5166: PUSH
5167: LD_VAR 0 3
5171: ARRAY
5172: PPUSH
5173: LD_VAR 0 2
5177: PUSH
5178: LD_INT 1
5180: ARRAY
5181: PPUSH
5182: CALL_OW 343
5186: GO 5159
5188: POP
5189: POP
5190: GO 5141
5192: POP
5193: POP
// end ; for i := 1 to 8 do
5194: LD_ADDR_VAR 0 2
5198: PUSH
5199: DOUBLE
5200: LD_INT 1
5202: DEC
5203: ST_TO_ADDR
5204: LD_INT 8
5206: PUSH
5207: FOR_TO
5208: IFFALSE 5298
// for j := 1 to 8 do
5210: LD_ADDR_VAR 0 3
5214: PUSH
5215: DOUBLE
5216: LD_INT 1
5218: DEC
5219: ST_TO_ADDR
5220: LD_INT 8
5222: PUSH
5223: FOR_TO
5224: IFFALSE 5294
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5226: LD_EXP 8
5230: PUSH
5231: LD_VAR 0 2
5235: ARRAY
5236: PUSH
5237: LD_EXP 8
5241: PUSH
5242: LD_VAR 0 3
5246: ARRAY
5247: EQUAL
5248: IFFALSE 5272
// SetAttitude ( i , j , att_friend , true ) else
5250: LD_VAR 0 2
5254: PPUSH
5255: LD_VAR 0 3
5259: PPUSH
5260: LD_INT 1
5262: PPUSH
5263: LD_INT 1
5265: PPUSH
5266: CALL_OW 80
5270: GO 5292
// SetAttitude ( i , j , att_enemy , true ) ;
5272: LD_VAR 0 2
5276: PPUSH
5277: LD_VAR 0 3
5281: PPUSH
5282: LD_INT 2
5284: PPUSH
5285: LD_INT 1
5287: PPUSH
5288: CALL_OW 80
5292: GO 5223
5294: POP
5295: POP
5296: GO 5207
5298: POP
5299: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5300: LD_ADDR_OWVAR 71
5304: PUSH
5305: LD_EXP 9
5309: PUSH
5310: LD_OWVAR 2
5314: ARRAY
5315: ST_TO_ADDR
// if IAmSpec then
5316: CALL_OW 531
5320: IFFALSE 5361
// begin FogOff ( true ) ;
5322: LD_INT 1
5324: PPUSH
5325: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5329: LD_EXP 29
5333: PUSH
5334: LD_INT 1
5336: ARRAY
5337: PUSH
5338: LD_INT 2
5340: DIV
5341: PPUSH
5342: LD_EXP 29
5346: PUSH
5347: LD_INT 2
5349: ARRAY
5350: PUSH
5351: LD_INT 2
5353: DIV
5354: PPUSH
5355: CALL_OW 86
// end else
5359: GO 5407
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5361: LD_EXP 21
5365: PUSH
5366: LD_EXP 7
5370: PUSH
5371: LD_OWVAR 2
5375: ARRAY
5376: ARRAY
5377: PUSH
5378: LD_INT 1
5380: ARRAY
5381: PPUSH
5382: LD_EXP 21
5386: PUSH
5387: LD_EXP 7
5391: PUSH
5392: LD_OWVAR 2
5396: ARRAY
5397: ARRAY
5398: PUSH
5399: LD_INT 2
5401: ARRAY
5402: PPUSH
5403: CALL_OW 86
// end ; BeginBuildUp ;
5407: CALL 6510 0 0
// enable ( mpActive ) ;
5411: LD_INT 100
5413: ENABLE_MARKED
// enable ( mpGameType ) ;
5414: LD_EXP 3
5418: ENABLE_MARKED
// mpGameActive := true ;
5419: LD_ADDR_EXP 39
5423: PUSH
5424: LD_INT 1
5426: ST_TO_ADDR
// end ;
5427: LD_VAR 0 1
5431: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
5432: LD_INT 0
5434: PPUSH
5435: PPUSH
5436: PPUSH
5437: PPUSH
5438: PPUSH
// result := [ ] ;
5439: LD_ADDR_VAR 0 5
5443: PUSH
5444: EMPTY
5445: ST_TO_ADDR
// class := class_soldier ;
5446: LD_ADDR_VAR 0 8
5450: PUSH
5451: LD_INT 1
5453: ST_TO_ADDR
// uc_side := side ;
5454: LD_ADDR_OWVAR 20
5458: PUSH
5459: LD_VAR 0 1
5463: ST_TO_ADDR
// uc_nation := nation ;
5464: LD_ADDR_OWVAR 21
5468: PUSH
5469: LD_VAR 0 2
5473: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5474: LD_ADDR_OWVAR 26
5478: PUSH
5479: LD_OWVAR 19
5483: PUSH
5484: LD_VAR 0 1
5488: ARRAY
5489: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5490: LD_INT 1
5492: PPUSH
5493: LD_INT 2
5495: PPUSH
5496: CALL_OW 12
5500: PPUSH
5501: LD_VAR 0 8
5505: PPUSH
5506: LD_VAR 0 4
5510: PUSH
5511: LD_INT 2
5513: PLUS
5514: PPUSH
5515: CALL_OW 380
// hc_importance := 105 ;
5519: LD_ADDR_OWVAR 32
5523: PUSH
5524: LD_INT 105
5526: ST_TO_ADDR
// if Multiplayer then
5527: LD_OWVAR 4
5531: IFFALSE 5571
// begin hc_gallery := MULTIAVATARS ;
5533: LD_ADDR_OWVAR 33
5537: PUSH
5538: LD_STRING MULTIAVATARS
5540: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5541: LD_ADDR_OWVAR 34
5545: PUSH
5546: LD_VAR 0 1
5550: PPUSH
5551: CALL_OW 525
5555: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5556: LD_ADDR_OWVAR 27
5560: PUSH
5561: LD_VAR 0 1
5565: PPUSH
5566: CALL_OW 526
5570: ST_TO_ADDR
// end ; commander := CreateHuman ;
5571: LD_ADDR_VAR 0 9
5575: PUSH
5576: CALL_OW 44
5580: ST_TO_ADDR
// result := Join ( result , commander ) ;
5581: LD_ADDR_VAR 0 5
5585: PUSH
5586: LD_VAR 0 5
5590: PPUSH
5591: LD_VAR 0 9
5595: PPUSH
5596: CALL 49550 0 2
5600: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
5601: LD_ADDR_EXP 41
5605: PUSH
5606: LD_EXP 41
5610: PPUSH
5611: LD_VAR 0 1
5615: PPUSH
5616: LD_VAR 0 9
5620: PPUSH
5621: CALL_OW 1
5625: ST_TO_ADDR
// if mpTeamPreset then
5626: LD_LOC 1
5630: IFFALSE 5726
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5632: LD_LOC 1
5636: PUSH
5637: LD_INT 1
5639: ARRAY
5640: PPUSH
5641: LD_VAR 0 5
5645: PUSH
5646: LD_VAR 0 5
5650: ARRAY
5651: PPUSH
5652: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5656: LD_VAR 0 5
5660: PUSH
5661: LD_VAR 0 5
5665: ARRAY
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_LOC 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_INT 1
5681: PPUSH
5682: CALL_OW 260
5686: PPUSH
5687: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5691: LD_VAR 0 5
5695: PUSH
5696: LD_VAR 0 5
5700: ARRAY
5701: PPUSH
5702: LD_INT 2
5704: PPUSH
5705: LD_LOC 1
5709: PUSH
5710: LD_INT 1
5712: ARRAY
5713: PPUSH
5714: LD_INT 2
5716: PPUSH
5717: CALL_OW 260
5721: PPUSH
5722: CALL_OW 239
// end ; InitHc_All ( ) ;
5726: CALL_OW 584
// class := 2 ;
5730: LD_ADDR_VAR 0 8
5734: PUSH
5735: LD_INT 2
5737: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5738: LD_ADDR_VAR 0 6
5742: PUSH
5743: DOUBLE
5744: LD_INT 1
5746: DEC
5747: ST_TO_ADDR
5748: LD_VAR 0 3
5752: PUSH
5753: LD_INT 1
5755: MINUS
5756: PUSH
5757: FOR_TO
5758: IFFALSE 5953
// begin PrepareHuman ( false , class , skill ) ;
5760: LD_INT 0
5762: PPUSH
5763: LD_VAR 0 8
5767: PPUSH
5768: LD_VAR 0 4
5772: PPUSH
5773: CALL_OW 380
// un := CreateHuman ;
5777: LD_ADDR_VAR 0 7
5781: PUSH
5782: CALL_OW 44
5786: ST_TO_ADDR
// result := Join ( result , un ) ;
5787: LD_ADDR_VAR 0 5
5791: PUSH
5792: LD_VAR 0 5
5796: PPUSH
5797: LD_VAR 0 7
5801: PPUSH
5802: CALL 49550 0 2
5806: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5807: LD_LOC 1
5811: PPUSH
5812: CALL 13574 0 1
5816: PUSH
5817: LD_VAR 0 3
5821: GREATEREQUAL
5822: IFFALSE 5918
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5824: LD_LOC 1
5828: PUSH
5829: LD_VAR 0 6
5833: PUSH
5834: LD_INT 1
5836: PLUS
5837: ARRAY
5838: PPUSH
5839: LD_VAR 0 7
5843: PPUSH
5844: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5848: LD_VAR 0 7
5852: PPUSH
5853: LD_INT 1
5855: PPUSH
5856: LD_LOC 1
5860: PUSH
5861: LD_VAR 0 6
5865: PUSH
5866: LD_INT 1
5868: PLUS
5869: ARRAY
5870: PPUSH
5871: LD_INT 1
5873: PPUSH
5874: CALL_OW 260
5878: PPUSH
5879: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5883: LD_VAR 0 7
5887: PPUSH
5888: LD_INT 2
5890: PPUSH
5891: LD_LOC 1
5895: PUSH
5896: LD_VAR 0 6
5900: PUSH
5901: LD_INT 1
5903: PLUS
5904: ARRAY
5905: PPUSH
5906: LD_INT 2
5908: PPUSH
5909: CALL_OW 260
5913: PPUSH
5914: CALL_OW 239
// end ; class := Inc ( class ) ;
5918: LD_ADDR_VAR 0 8
5922: PUSH
5923: LD_VAR 0 8
5927: PPUSH
5928: CALL 50923 0 1
5932: ST_TO_ADDR
// if class = 5 then
5933: LD_VAR 0 8
5937: PUSH
5938: LD_INT 5
5940: EQUAL
5941: IFFALSE 5951
// class := 1 ;
5943: LD_ADDR_VAR 0 8
5947: PUSH
5948: LD_INT 1
5950: ST_TO_ADDR
// end ;
5951: GO 5757
5953: POP
5954: POP
// if not mpTeamPreset then
5955: LD_LOC 1
5959: NOT
5960: IFFALSE 5972
// mpTeamPreset := result ;
5962: LD_ADDR_LOC 1
5966: PUSH
5967: LD_VAR 0 5
5971: ST_TO_ADDR
// end ;
5972: LD_VAR 0 5
5976: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5977: LD_INT 0
5979: PPUSH
5980: PPUSH
// result := [ ] ;
5981: LD_ADDR_VAR 0 4
5985: PUSH
5986: EMPTY
5987: ST_TO_ADDR
// if not vehicles then
5988: LD_VAR 0 3
5992: NOT
5993: IFFALSE 5997
// exit ;
5995: GO 6211
// for i := 1 to vehicles [ nation ] do
5997: LD_ADDR_VAR 0 5
6001: PUSH
6002: DOUBLE
6003: LD_INT 1
6005: DEC
6006: ST_TO_ADDR
6007: LD_VAR 0 3
6011: PUSH
6012: LD_VAR 0 2
6016: ARRAY
6017: PUSH
6018: FOR_TO
6019: IFFALSE 6209
// begin uc_side := side ;
6021: LD_ADDR_OWVAR 20
6025: PUSH
6026: LD_VAR 0 1
6030: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6031: LD_VAR 0 3
6035: PUSH
6036: LD_VAR 0 2
6040: ARRAY
6041: PUSH
6042: LD_VAR 0 5
6046: ARRAY
6047: PPUSH
6048: CALL 13574 0 1
6052: PUSH
6053: LD_INT 4
6055: GREATER
6056: IFFALSE 6086
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6058: LD_ADDR_OWVAR 21
6062: PUSH
6063: LD_VAR 0 3
6067: PUSH
6068: LD_VAR 0 2
6072: ARRAY
6073: PUSH
6074: LD_VAR 0 5
6078: ARRAY
6079: PUSH
6080: LD_INT 5
6082: ARRAY
6083: ST_TO_ADDR
6084: GO 6096
// uc_nation := nation ;
6086: LD_ADDR_OWVAR 21
6090: PUSH
6091: LD_VAR 0 2
6095: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6096: LD_VAR 0 3
6100: PUSH
6101: LD_VAR 0 2
6105: ARRAY
6106: PUSH
6107: LD_VAR 0 5
6111: ARRAY
6112: PUSH
6113: LD_INT 1
6115: ARRAY
6116: PPUSH
6117: LD_VAR 0 3
6121: PUSH
6122: LD_VAR 0 2
6126: ARRAY
6127: PUSH
6128: LD_VAR 0 5
6132: ARRAY
6133: PUSH
6134: LD_INT 2
6136: ARRAY
6137: PPUSH
6138: LD_VAR 0 3
6142: PUSH
6143: LD_VAR 0 2
6147: ARRAY
6148: PUSH
6149: LD_VAR 0 5
6153: ARRAY
6154: PUSH
6155: LD_INT 3
6157: ARRAY
6158: PPUSH
6159: LD_VAR 0 3
6163: PUSH
6164: LD_VAR 0 2
6168: ARRAY
6169: PUSH
6170: LD_VAR 0 5
6174: ARRAY
6175: PUSH
6176: LD_INT 4
6178: ARRAY
6179: PPUSH
6180: LD_INT 80
6182: PPUSH
6183: CALL 16370 0 5
// result := Join ( result , CreateVehicle ) ;
6187: LD_ADDR_VAR 0 4
6191: PUSH
6192: LD_VAR 0 4
6196: PPUSH
6197: CALL_OW 45
6201: PPUSH
6202: CALL 49550 0 2
6206: ST_TO_ADDR
// end ;
6207: GO 6018
6209: POP
6210: POP
// end ;
6211: LD_VAR 0 4
6215: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6216: LD_INT 0
6218: PPUSH
6219: PPUSH
// for i in mpBattleFlags do
6220: LD_ADDR_VAR 0 3
6224: PUSH
6225: LD_EXP 23
6229: PUSH
6230: FOR_IN
6231: IFFALSE 6308
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6233: LD_VAR 0 3
6237: PPUSH
6238: LD_INT 1
6240: PUSH
6241: LD_VAR 0 1
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: LD_INT 2
6252: PUSH
6253: LD_VAR 0 1
6257: PUSH
6258: LD_REAL  7.00000000000000E-0001
6261: MUL
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 3
6269: PUSH
6270: LD_VAR 0 1
6274: PUSH
6275: LD_REAL  4.00000000000000E-0001
6278: MUL
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: PUSH
6284: LD_INT 20
6286: PUSH
6287: LD_VAR 0 1
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: PPUSH
6302: CALL_OW 423
6306: GO 6230
6308: POP
6309: POP
// end ;
6310: LD_VAR 0 2
6314: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6315: LD_INT 100
6317: IFFALSE 6412
6319: GO 6321
6321: DISABLE
6322: LD_INT 0
6324: PPUSH
6325: PPUSH
// begin if mpBattleFlag <= 0 then
6326: LD_EXP 22
6330: PUSH
6331: LD_INT 0
6333: LESSEQUAL
6334: IFFALSE 6338
// exit ;
6336: GO 6412
// strength := 100 ;
6338: LD_ADDR_VAR 0 2
6342: PUSH
6343: LD_INT 100
6345: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6346: LD_EXP 22
6350: PPUSH
6351: CALL_OW 67
// strength := Dec ( strength ) ;
6355: LD_ADDR_VAR 0 2
6359: PUSH
6360: LD_VAR 0 2
6364: PPUSH
6365: CALL 50945 0 1
6369: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6370: LD_VAR 0 2
6374: PPUSH
6375: CALL 6216 0 1
// until not strength ;
6379: LD_VAR 0 2
6383: NOT
6384: IFFALSE 6346
// for i in mpBattleFlags do
6386: LD_ADDR_VAR 0 1
6390: PUSH
6391: LD_EXP 23
6395: PUSH
6396: FOR_IN
6397: IFFALSE 6410
// KillBattleFlag ( i ) ;
6399: LD_VAR 0 1
6403: PPUSH
6404: CALL_OW 419
6408: GO 6396
6410: POP
6411: POP
// end ;
6412: PPOPN 2
6414: END
// every 0 0$1 marked mpActive do var side , tmp ;
6415: GO 6417
6417: DISABLE
6418: LD_INT 0
6420: PPUSH
6421: PPUSH
// begin if mpSibBomb <= 1 then
6422: LD_EXP 28
6426: PUSH
6427: LD_INT 1
6429: LESSEQUAL
6430: IFFALSE 6434
// exit ;
6432: GO 6507
// tmp := mpSibBomb ;
6434: LD_ADDR_VAR 0 2
6438: PUSH
6439: LD_EXP 28
6443: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6444: LD_INT 35
6446: PPUSH
6447: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6451: LD_ADDR_VAR 0 2
6455: PUSH
6456: LD_VAR 0 2
6460: PUSH
6461: LD_INT 35
6463: MINUS
6464: ST_TO_ADDR
// until not tmp ;
6465: LD_VAR 0 2
6469: NOT
6470: IFFALSE 6444
// for side := 1 to 8 do
6472: LD_ADDR_VAR 0 1
6476: PUSH
6477: DOUBLE
6478: LD_INT 1
6480: DEC
6481: ST_TO_ADDR
6482: LD_INT 8
6484: PUSH
6485: FOR_TO
6486: IFFALSE 6505
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6488: LD_INT 25
6490: PPUSH
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 1
6498: PPUSH
6499: CALL_OW 322
6503: GO 6485
6505: POP
6506: POP
// end ;
6507: PPOPN 2
6509: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6510: LD_INT 0
6512: PPUSH
6513: PPUSH
6514: PPUSH
// mpBuildUpTimeDelay := 0 ;
6515: LD_ADDR_EXP 48
6519: PUSH
6520: LD_INT 0
6522: ST_TO_ADDR
// if not mpBuildUpTime then
6523: LD_EXP 20
6527: NOT
6528: IFFALSE 6532
// exit ;
6530: GO 6721
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6532: LD_ADDR_EXP 48
6536: PUSH
6537: LD_INT 8400
6539: PUSH
6540: LD_INT 2100
6542: PUSH
6543: LD_EXP 20
6547: MUL
6548: PLUS
6549: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6550: LD_ADDR_EXP 49
6554: PUSH
6555: LD_INT 1
6557: ST_TO_ADDR
// for i := 1 to 8 do
6558: LD_ADDR_VAR 0 2
6562: PUSH
6563: DOUBLE
6564: LD_INT 1
6566: DEC
6567: ST_TO_ADDR
6568: LD_INT 8
6570: PUSH
6571: FOR_TO
6572: IFFALSE 6719
// if mpSidePositions [ i ] then
6574: LD_EXP 7
6578: PUSH
6579: LD_VAR 0 2
6583: ARRAY
6584: IFFALSE 6717
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6586: LD_EXP 19
6590: PUSH
6591: LD_EXP 7
6595: PUSH
6596: LD_VAR 0 2
6600: ARRAY
6601: ARRAY
6602: PPUSH
6603: LD_INT 5
6605: PPUSH
6606: CALL_OW 424
// for j := 1 to 8 do
6610: LD_ADDR_VAR 0 3
6614: PUSH
6615: DOUBLE
6616: LD_INT 1
6618: DEC
6619: ST_TO_ADDR
6620: LD_INT 8
6622: PUSH
6623: FOR_TO
6624: IFFALSE 6715
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6626: LD_EXP 7
6630: PUSH
6631: LD_VAR 0 3
6635: ARRAY
6636: IFFALSE 6685
6638: PUSH
6639: LD_EXP 8
6643: PUSH
6644: LD_VAR 0 2
6648: ARRAY
6649: PUSH
6650: LD_EXP 8
6654: PUSH
6655: LD_VAR 0 3
6659: ARRAY
6660: NONEQUAL
6661: IFTRUE 6684
6663: PUSH
6664: LD_EXP 11
6668: NOT
6669: IFFALSE 6683
6671: PUSH
6672: LD_VAR 0 2
6676: PUSH
6677: LD_VAR 0 3
6681: NONEQUAL
6682: AND
6683: OR
6684: AND
6685: IFFALSE 6713
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6687: LD_VAR 0 3
6691: PPUSH
6692: LD_EXP 19
6696: PUSH
6697: LD_EXP 7
6701: PUSH
6702: LD_VAR 0 2
6706: ARRAY
6707: ARRAY
6708: PPUSH
6709: CALL_OW 333
6713: GO 6623
6715: POP
6716: POP
// end ;
6717: GO 6571
6719: POP
6720: POP
// end ;
6721: LD_VAR 0 1
6725: RET
// function EndBuildUp ; var i , j ; begin
6726: LD_INT 0
6728: PPUSH
6729: PPUSH
6730: PPUSH
// mpBuildUpTimeActive := false ;
6731: LD_ADDR_EXP 49
6735: PUSH
6736: LD_INT 0
6738: ST_TO_ADDR
// for i := 1 to 8 do
6739: LD_ADDR_VAR 0 2
6743: PUSH
6744: DOUBLE
6745: LD_INT 1
6747: DEC
6748: ST_TO_ADDR
6749: LD_INT 8
6751: PUSH
6752: FOR_TO
6753: IFFALSE 6900
// if mpSidePositions [ i ] then
6755: LD_EXP 7
6759: PUSH
6760: LD_VAR 0 2
6764: ARRAY
6765: IFFALSE 6898
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6767: LD_EXP 19
6771: PUSH
6772: LD_EXP 7
6776: PUSH
6777: LD_VAR 0 2
6781: ARRAY
6782: ARRAY
6783: PPUSH
6784: LD_INT 0
6786: PPUSH
6787: CALL_OW 424
// for j := 1 to 8 do
6791: LD_ADDR_VAR 0 3
6795: PUSH
6796: DOUBLE
6797: LD_INT 1
6799: DEC
6800: ST_TO_ADDR
6801: LD_INT 8
6803: PUSH
6804: FOR_TO
6805: IFFALSE 6896
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6807: LD_EXP 7
6811: PUSH
6812: LD_VAR 0 3
6816: ARRAY
6817: IFFALSE 6866
6819: PUSH
6820: LD_EXP 8
6824: PUSH
6825: LD_VAR 0 2
6829: ARRAY
6830: PUSH
6831: LD_EXP 8
6835: PUSH
6836: LD_VAR 0 3
6840: ARRAY
6841: NONEQUAL
6842: IFTRUE 6865
6844: PUSH
6845: LD_EXP 11
6849: NOT
6850: IFFALSE 6864
6852: PUSH
6853: LD_VAR 0 2
6857: PUSH
6858: LD_VAR 0 3
6862: NONEQUAL
6863: AND
6864: OR
6865: AND
6866: IFFALSE 6894
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6868: LD_VAR 0 3
6872: PPUSH
6873: LD_EXP 19
6877: PUSH
6878: LD_EXP 7
6882: PUSH
6883: LD_VAR 0 2
6887: ARRAY
6888: ARRAY
6889: PPUSH
6890: CALL_OW 334
6894: GO 6804
6896: POP
6897: POP
// end ;
6898: GO 6752
6900: POP
6901: POP
// end ;
6902: LD_VAR 0 1
6906: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6907: LD_EXP 49
6911: IFFALSE 7090
6913: GO 6915
6915: DISABLE
6916: LD_INT 0
6918: PPUSH
6919: PPUSH
// begin for i := 1 to 8 do
6920: LD_ADDR_VAR 0 1
6924: PUSH
6925: DOUBLE
6926: LD_INT 1
6928: DEC
6929: ST_TO_ADDR
6930: LD_INT 8
6932: PUSH
6933: FOR_TO
6934: IFFALSE 7087
// if mpSidePositions [ i ] then
6936: LD_EXP 7
6940: PUSH
6941: LD_VAR 0 1
6945: ARRAY
6946: IFFALSE 7085
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6948: LD_ADDR_VAR 0 2
6952: PUSH
6953: LD_EXP 19
6957: PUSH
6958: LD_EXP 7
6962: PUSH
6963: LD_VAR 0 1
6967: ARRAY
6968: ARRAY
6969: PPUSH
6970: LD_INT 2
6972: PUSH
6973: LD_INT 21
6975: PUSH
6976: LD_INT 1
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PUSH
6983: LD_INT 21
6985: PUSH
6986: LD_INT 2
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: LIST
6997: PUSH
6998: LD_INT 22
7000: PUSH
7001: LD_OWVAR 2
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PPUSH
7014: CALL_OW 70
7018: PUSH
7019: FOR_IN
7020: IFFALSE 7083
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7022: LD_EXP 8
7026: PUSH
7027: LD_VAR 0 1
7031: ARRAY
7032: PUSH
7033: LD_EXP 8
7037: PUSH
7038: LD_OWVAR 2
7042: ARRAY
7043: NONEQUAL
7044: IFTRUE 7067
7046: PUSH
7047: LD_EXP 11
7051: NOT
7052: IFFALSE 7066
7054: PUSH
7055: LD_VAR 0 1
7059: PUSH
7060: LD_OWVAR 2
7064: NONEQUAL
7065: AND
7066: OR
7067: IFFALSE 7081
// ComMoveToArea ( un , BuildUpEscape ) ;
7069: LD_VAR 0 2
7073: PPUSH
7074: LD_INT 14
7076: PPUSH
7077: CALL_OW 113
7081: GO 7019
7083: POP
7084: POP
7085: GO 6933
7087: POP
7088: POP
// enable ;
7089: ENABLE
// end ;
7090: PPOPN 2
7092: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7093: LD_EXP 20
7097: IFFALSE 7147
7099: GO 7101
7101: DISABLE
7102: LD_INT 0
7104: PPUSH
// begin tmp := mpBuildUpTime ;
7105: LD_ADDR_VAR 0 1
7109: PUSH
7110: LD_EXP 20
7114: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7115: LD_INT 35
7117: PPUSH
7118: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7122: LD_ADDR_VAR 0 1
7126: PUSH
7127: LD_VAR 0 1
7131: PUSH
7132: LD_INT 35
7134: MINUS
7135: ST_TO_ADDR
// until not tmp ;
7136: LD_VAR 0 1
7140: NOT
7141: IFFALSE 7115
// EndBuildUp ;
7143: CALL 6726 0 0
// end ;
7147: PPOPN 1
7149: END
// every 0 0$1 trigger mpActive marked mpWin do
7150: LD_INT 100
7152: IFFALSE 7186
7154: GO 7156
7156: DISABLE
// begin if IAmServer then
7157: CALL_OW 518
7161: IFFALSE 7170
// wait ( 0 0$3 ) ;
7163: LD_INT 105
7165: PPUSH
7166: CALL_OW 67
// if Multiplayer then
7170: LD_OWVAR 4
7174: IFFALSE 7182
// YouWinInMultiplayer else
7176: CALL_OW 106
7180: GO 7186
// YouWin ;
7182: CALL_OW 103
// end ;
7186: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7187: LD_INT 0
7189: PPUSH
// result := false ;
7190: LD_ADDR_VAR 0 3
7194: PUSH
7195: LD_INT 0
7197: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7198: LD_VAR 0 1
7202: PUSH
7203: LD_INT 1
7205: DOUBLE
7206: EQUAL
7207: IFTRUE 7229
7209: LD_INT 5
7211: DOUBLE
7212: EQUAL
7213: IFTRUE 7229
7215: LD_INT 6
7217: DOUBLE
7218: EQUAL
7219: IFTRUE 7229
7221: LD_INT 7
7223: DOUBLE
7224: EQUAL
7225: IFTRUE 7229
7227: GO 7302
7229: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7230: LD_ADDR_VAR 0 3
7234: PUSH
7235: LD_INT 22
7237: PUSH
7238: LD_VAR 0 2
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 2
7249: PUSH
7250: LD_INT 21
7252: PUSH
7253: LD_INT 1
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: LD_INT 33
7262: PUSH
7263: LD_INT 3
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: PUSH
7270: LD_INT 33
7272: PUSH
7273: LD_INT 5
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PPUSH
7290: CALL_OW 69
7294: PPUSH
7295: CALL 13574 0 1
7299: ST_TO_ADDR
// end ; GameTypeSurvival :
7300: GO 7698
7302: LD_INT 2
7304: DOUBLE
7305: EQUAL
7306: IFTRUE 7310
7308: GO 7440
7310: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7311: LD_ADDR_VAR 0 3
7315: PUSH
7316: LD_INT 22
7318: PUSH
7319: LD_VAR 0 2
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: LD_INT 2
7330: PUSH
7331: LD_INT 30
7333: PUSH
7334: LD_INT 0
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 30
7343: PUSH
7344: LD_INT 1
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: PPUSH
7360: CALL_OW 69
7364: PPUSH
7365: CALL 13574 0 1
7369: IFFALSE 7437
7371: PUSH
7372: LD_INT 22
7374: PUSH
7375: LD_VAR 0 2
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: LD_INT 2
7386: PUSH
7387: LD_INT 21
7389: PUSH
7390: LD_INT 1
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PUSH
7397: LD_INT 33
7399: PUSH
7400: LD_INT 3
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 33
7409: PUSH
7410: LD_INT 5
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PPUSH
7427: CALL_OW 69
7431: PPUSH
7432: CALL 13574 0 1
7436: AND
7437: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
7438: GO 7698
7440: LD_INT 8
7442: DOUBLE
7443: EQUAL
7444: IFTRUE 7448
7446: GO 7597
7448: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7449: LD_ADDR_VAR 0 3
7453: PUSH
7454: LD_EXP 41
7458: PUSH
7459: LD_VAR 0 2
7463: ARRAY
7464: PPUSH
7465: CALL_OW 300
7469: IFFALSE 7526
7471: PUSH
7472: LD_INT 22
7474: PUSH
7475: LD_VAR 0 2
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: LD_INT 30
7489: PUSH
7490: LD_INT 0
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PUSH
7497: LD_INT 30
7499: PUSH
7500: LD_INT 1
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: LIST
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: CALL_OW 69
7520: PPUSH
7521: CALL 13574 0 1
7525: AND
7526: IFFALSE 7594
7528: PUSH
7529: LD_INT 22
7531: PUSH
7532: LD_VAR 0 2
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: PUSH
7541: LD_INT 2
7543: PUSH
7544: LD_INT 21
7546: PUSH
7547: LD_INT 1
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 33
7556: PUSH
7557: LD_INT 3
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 33
7566: PUSH
7567: LD_INT 5
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PPUSH
7584: CALL_OW 69
7588: PPUSH
7589: CALL 13574 0 1
7593: AND
7594: ST_TO_ADDR
// end ; GameTypeKing :
7595: GO 7698
7597: LD_INT 3
7599: DOUBLE
7600: EQUAL
7601: IFTRUE 7605
7603: GO 7697
7605: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7606: LD_ADDR_VAR 0 3
7610: PUSH
7611: LD_INT 22
7613: PUSH
7614: LD_VAR 0 2
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PUSH
7623: LD_INT 2
7625: PUSH
7626: LD_INT 21
7628: PUSH
7629: LD_INT 1
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 33
7638: PUSH
7639: LD_INT 3
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: LD_INT 33
7648: PUSH
7649: LD_INT 5
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PPUSH
7666: CALL_OW 69
7670: PPUSH
7671: CALL 13574 0 1
7675: IFFALSE 7694
7677: PUSH
7678: LD_VAR 0 2
7682: PPUSH
7683: CALL 62562 0 1
7687: PUSH
7688: LD_EXP 35
7692: LESS
7693: AND
7694: ST_TO_ADDR
// end ; end ;
7695: GO 7698
7697: POP
// end ;
7698: LD_VAR 0 3
7702: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7703: LD_INT 100
7705: IFFALSE 7935
7707: GO 7709
7709: DISABLE
7710: LD_INT 0
7712: PPUSH
7713: PPUSH
// begin if Multiplayer then
7714: LD_OWVAR 4
7718: IFFALSE 7726
// SetPlayerSpectator ( ) else
7720: CALL_OW 572
7724: GO 7735
// FogOff ( your_side ) ;
7726: LD_OWVAR 2
7730: PPUSH
7731: CALL_OW 344
// repeat gameIsOn := false ;
7735: LD_ADDR_VAR 0 1
7739: PUSH
7740: LD_INT 0
7742: ST_TO_ADDR
// for i := 1 to 8 do
7743: LD_ADDR_VAR 0 2
7747: PUSH
7748: DOUBLE
7749: LD_INT 1
7751: DEC
7752: ST_TO_ADDR
7753: LD_INT 8
7755: PUSH
7756: FOR_TO
7757: IFFALSE 7887
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7759: LD_EXP 7
7763: PUSH
7764: LD_VAR 0 2
7768: ARRAY
7769: IFFALSE 7782
7771: PUSH
7772: LD_VAR 0 2
7776: PPUSH
7777: CALL_OW 108
7781: AND
7782: IFFALSE 7796
7784: PUSH
7785: LD_VAR 0 2
7789: PUSH
7790: LD_OWVAR 2
7794: NONEQUAL
7795: AND
7796: IFFALSE 7885
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7798: LD_EXP 8
7802: PUSH
7803: LD_VAR 0 2
7807: ARRAY
7808: NOT
7809: IFTRUE 7857
7811: PUSH
7812: LD_EXP 8
7816: PUSH
7817: LD_VAR 0 2
7821: ARRAY
7822: PUSH
7823: LD_EXP 8
7827: PUSH
7828: LD_OWVAR 2
7832: ARRAY
7833: NONEQUAL
7834: IFFALSE 7856
7836: PUSH
7837: LD_OWVAR 2
7841: PPUSH
7842: LD_VAR 0 2
7846: PPUSH
7847: CALL_OW 81
7851: PUSH
7852: LD_INT 1
7854: NONEQUAL
7855: AND
7856: OR
7857: IFFALSE 7885
// if HasPowerByGameType ( mpGameType , i ) then
7859: LD_EXP 3
7863: PPUSH
7864: LD_VAR 0 2
7868: PPUSH
7869: CALL 7187 0 2
7873: IFFALSE 7885
// begin gameIsOn := true ;
7875: LD_ADDR_VAR 0 1
7879: PUSH
7880: LD_INT 1
7882: ST_TO_ADDR
// break ;
7883: GO 7887
// end ;
7885: GO 7756
7887: POP
7888: POP
// wait ( 100 ) ;
7889: LD_INT 100
7891: PPUSH
7892: CALL_OW 67
// until not gameIsOn ;
7896: LD_VAR 0 1
7900: NOT
7901: IFFALSE 7735
// if IAmServer then
7903: CALL_OW 518
7907: IFFALSE 7916
// wait ( 0 0$3 ) ;
7909: LD_INT 105
7911: PPUSH
7912: CALL_OW 67
// if Multiplayer then
7916: LD_OWVAR 4
7920: IFFALSE 7928
// YouLostInMultiplayer else
7922: CALL_OW 107
7926: GO 7935
// YouLost (  ) ;
7928: LD_STRING 
7930: PPUSH
7931: CALL_OW 104
// end ;
7935: PPOPN 2
7937: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7938: LD_EXP 33
7942: IFFALSE 8326
7944: GO 7946
7946: DISABLE
7947: LD_INT 0
7949: PPUSH
7950: PPUSH
7951: PPUSH
7952: PPUSH
7953: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7954: LD_ADDR_VAR 0 5
7958: PUSH
7959: LD_INT 1
7961: PUSH
7962: LD_INT 2
7964: PUSH
7965: LD_INT 3
7967: PUSH
7968: LD_INT 4
7970: PUSH
7971: LD_INT 5
7973: PUSH
7974: LD_INT 6
7976: PUSH
7977: LD_INT 7
7979: PUSH
7980: LD_INT 8
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7993: LD_INT 350
7995: PPUSH
7996: CALL_OW 67
// for i := 1 to 8 do
8000: LD_ADDR_VAR 0 1
8004: PUSH
8005: DOUBLE
8006: LD_INT 1
8008: DEC
8009: ST_TO_ADDR
8010: LD_INT 8
8012: PUSH
8013: FOR_TO
8014: IFFALSE 8296
// begin j := sides [ i ] ;
8016: LD_ADDR_VAR 0 2
8020: PUSH
8021: LD_VAR 0 5
8025: PUSH
8026: LD_VAR 0 1
8030: ARRAY
8031: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
8032: LD_EXP 40
8036: PUSH
8037: LD_VAR 0 2
8041: ARRAY
8042: PPUSH
8043: CALL 13574 0 1
8047: IFFALSE 8060
8049: PUSH
8050: LD_VAR 0 2
8054: PPUSH
8055: CALL_OW 108
8059: AND
8060: IFFALSE 8078
8062: PUSH
8063: LD_EXP 3
8067: PPUSH
8068: LD_VAR 0 2
8072: PPUSH
8073: CALL 7187 0 2
8077: AND
8078: IFFALSE 8294
// begin wait ( mpRespawn div 2 ) ;
8080: LD_EXP 33
8084: PUSH
8085: LD_INT 2
8087: DIV
8088: PPUSH
8089: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8093: LD_ADDR_VAR 0 3
8097: PUSH
8098: LD_INT 22
8100: PUSH
8101: LD_VAR 0 2
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: LD_INT 50
8112: PUSH
8113: EMPTY
8114: LIST
8115: PUSH
8116: LD_INT 2
8118: PUSH
8119: LD_INT 30
8121: PUSH
8122: LD_INT 0
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PUSH
8129: LD_INT 30
8131: PUSH
8132: LD_INT 1
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: LIST
8148: PPUSH
8149: CALL_OW 69
8153: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8154: LD_VAR 0 3
8158: NOT
8159: IFTRUE 8173
8161: PUSH
8162: LD_VAR 0 2
8166: PPUSH
8167: CALL_OW 108
8171: NOT
8172: OR
8173: IFTRUE 8192
8175: PUSH
8176: LD_EXP 3
8180: PPUSH
8181: LD_VAR 0 2
8185: PPUSH
8186: CALL 7187 0 2
8190: NOT
8191: OR
8192: IFFALSE 8196
// continue ;
8194: GO 8013
// spawn := tmp [ 1 ] ;
8196: LD_ADDR_VAR 0 4
8200: PUSH
8201: LD_VAR 0 3
8205: PUSH
8206: LD_INT 1
8208: ARRAY
8209: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8210: LD_EXP 40
8214: PUSH
8215: LD_VAR 0 2
8219: ARRAY
8220: PUSH
8221: LD_INT 1
8223: ARRAY
8224: PPUSH
8225: LD_VAR 0 4
8229: PPUSH
8230: CALL_OW 250
8234: PPUSH
8235: LD_VAR 0 4
8239: PPUSH
8240: CALL_OW 251
8244: PPUSH
8245: LD_INT 32
8247: PPUSH
8248: LD_INT 1
8250: PPUSH
8251: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8255: LD_ADDR_EXP 40
8259: PUSH
8260: LD_EXP 40
8264: PPUSH
8265: LD_VAR 0 2
8269: PPUSH
8270: LD_EXP 40
8274: PUSH
8275: LD_VAR 0 2
8279: ARRAY
8280: PPUSH
8281: LD_INT 1
8283: PPUSH
8284: CALL_OW 3
8288: PPUSH
8289: CALL_OW 1
8293: ST_TO_ADDR
// end ; end ;
8294: GO 8013
8296: POP
8297: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8298: LD_ADDR_VAR 0 5
8302: PUSH
8303: LD_VAR 0 5
8307: PPUSH
8308: LD_INT 1
8310: PPUSH
8311: LD_INT 8
8313: PPUSH
8314: LD_INT 1
8316: PPUSH
8317: CALL 15900 0 4
8321: ST_TO_ADDR
// until false ;
8322: LD_INT 0
8324: IFFALSE 7993
// end ;
8326: PPOPN 5
8328: END
// every 0 0$1 marked mpActive do
8329: GO 8331
8331: DISABLE
// begin enable ;
8332: ENABLE
// if not mpDisplayStrings then
8333: LD_EXP 38
8337: NOT
8338: IFFALSE 8349
// begin display_strings := [ ] ;
8340: LD_ADDR_OWVAR 47
8344: PUSH
8345: EMPTY
8346: ST_TO_ADDR
// exit ;
8347: GO 8359
// end ; display_strings := mpDisplayStrings ;
8349: LD_ADDR_OWVAR 47
8353: PUSH
8354: LD_EXP 38
8358: ST_TO_ADDR
// end ; end_of_file
8359: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8360: LD_INT 0
8362: PPUSH
8363: PPUSH
8364: PPUSH
8365: PPUSH
8366: PPUSH
8367: PPUSH
8368: PPUSH
8369: PPUSH
8370: PPUSH
// if GetType ( un ) = unit_vehicle then
8371: LD_VAR 0 1
8375: PPUSH
8376: CALL_OW 247
8380: PUSH
8381: LD_INT 2
8383: EQUAL
8384: IFFALSE 8388
// exit ;
8386: GO 9161
// side := GetSide ( un ) ;
8388: LD_ADDR_VAR 0 9
8392: PUSH
8393: LD_VAR 0 1
8397: PPUSH
8398: CALL_OW 255
8402: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
8403: LD_EXP 3
8407: PUSH
8408: LD_INT 2
8410: PUSH
8411: LD_INT 8
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: IN
8418: IFFALSE 8512
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8420: LD_VAR 0 1
8424: PPUSH
8425: CALL_OW 266
8429: PUSH
8430: LD_INT 0
8432: PUSH
8433: LD_INT 1
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: IN
8440: IFFALSE 8512
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8442: LD_ADDR_VAR 0 3
8446: PUSH
8447: LD_INT 22
8449: PUSH
8450: LD_VAR 0 9
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PUSH
8459: LD_INT 2
8461: PUSH
8462: LD_INT 21
8464: PUSH
8465: LD_INT 1
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: PUSH
8472: LD_INT 33
8474: PUSH
8475: LD_INT 3
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: LIST
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PPUSH
8491: CALL_OW 69
8495: PUSH
8496: FOR_IN
8497: IFFALSE 8510
// KillUnit ( i ) ;
8499: LD_VAR 0 3
8503: PPUSH
8504: CALL_OW 66
8508: GO 8496
8510: POP
8511: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
8512: LD_EXP 3
8516: PUSH
8517: LD_INT 8
8519: EQUAL
8520: IFFALSE 8604
// if un in mpCommanders then
8522: LD_VAR 0 1
8526: PUSH
8527: LD_EXP 41
8531: IN
8532: IFFALSE 8604
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8534: LD_ADDR_VAR 0 3
8538: PUSH
8539: LD_INT 22
8541: PUSH
8542: LD_VAR 0 9
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 2
8553: PUSH
8554: LD_INT 21
8556: PUSH
8557: LD_INT 1
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PUSH
8564: LD_INT 33
8566: PUSH
8567: LD_INT 3
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: LIST
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: PPUSH
8583: CALL_OW 69
8587: PUSH
8588: FOR_IN
8589: IFFALSE 8602
// KillUnit ( i ) ;
8591: LD_VAR 0 3
8595: PPUSH
8596: CALL_OW 66
8600: GO 8588
8602: POP
8603: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8604: LD_VAR 0 1
8608: PPUSH
8609: CALL_OW 257
8613: PUSH
8614: LD_INT 12
8616: PUSH
8617: LD_INT 17
8619: PUSH
8620: LD_INT 15
8622: PUSH
8623: LD_INT 16
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: IN
8632: IFTRUE 8649
8634: PUSH
8635: LD_VAR 0 1
8639: PPUSH
8640: CALL_OW 263
8644: PUSH
8645: LD_INT 5
8647: EQUAL
8648: OR
8649: IFFALSE 8886
// begin tag := 0 ;
8651: LD_ADDR_VAR 0 5
8655: PUSH
8656: LD_INT 0
8658: ST_TO_ADDR
// for i := 1 to 8 do
8659: LD_ADDR_VAR 0 3
8663: PUSH
8664: DOUBLE
8665: LD_INT 1
8667: DEC
8668: ST_TO_ADDR
8669: LD_INT 8
8671: PUSH
8672: FOR_TO
8673: IFFALSE 8707
// if un in mpApePosIndex [ i ] then
8675: LD_VAR 0 1
8679: PUSH
8680: LD_EXP 32
8684: PUSH
8685: LD_VAR 0 3
8689: ARRAY
8690: IN
8691: IFFALSE 8705
// begin tag := i ;
8693: LD_ADDR_VAR 0 5
8697: PUSH
8698: LD_VAR 0 3
8702: ST_TO_ADDR
// break ;
8703: GO 8707
// end ;
8705: GO 8672
8707: POP
8708: POP
// if not tag then
8709: LD_VAR 0 5
8713: NOT
8714: IFFALSE 8718
// exit ;
8716: GO 9161
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8718: LD_ADDR_VAR 0 7
8722: PUSH
8723: LD_EXP 31
8727: PUSH
8728: LD_EXP 7
8732: PUSH
8733: LD_VAR 0 5
8737: ARRAY
8738: ARRAY
8739: ST_TO_ADDR
// if not area then
8740: LD_VAR 0 7
8744: NOT
8745: IFFALSE 8749
// exit ;
8747: GO 9161
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8749: LD_INT 14700
8751: PUSH
8752: LD_VAR 0 1
8756: PUSH
8757: LD_INT 5
8759: MOD
8760: PUSH
8761: LD_INT 1
8763: PLUS
8764: PUSH
8765: LD_INT 700
8767: MUL
8768: PLUS
8769: PPUSH
8770: CALL_OW 67
// repeat wait ( 10 ) ;
8774: LD_INT 10
8776: PPUSH
8777: CALL_OW 67
// until not mpBlockRespThread ;
8781: LD_EXP 47
8785: NOT
8786: IFFALSE 8774
// mpBlockRespThread := true ;
8788: LD_ADDR_EXP 47
8792: PUSH
8793: LD_INT 1
8795: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8796: LD_INT 0
8798: PPUSH
8799: CALL 45677 0 1
// ape := CreateHuman ;
8803: LD_ADDR_VAR 0 4
8807: PUSH
8808: CALL_OW 44
8812: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8813: LD_ADDR_EXP 32
8817: PUSH
8818: LD_EXP 32
8822: PPUSH
8823: LD_VAR 0 5
8827: PPUSH
8828: LD_EXP 32
8832: PUSH
8833: LD_VAR 0 5
8837: ARRAY
8838: PPUSH
8839: LD_VAR 0 4
8843: PPUSH
8844: CALL 49550 0 2
8848: PPUSH
8849: CALL_OW 1
8853: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8854: LD_VAR 0 4
8858: PPUSH
8859: LD_VAR 0 7
8863: PPUSH
8864: LD_INT 0
8866: PPUSH
8867: CALL_OW 49
// wait ( 10 ) ;
8871: LD_INT 10
8873: PPUSH
8874: CALL_OW 67
// mpBlockRespThread := false ;
8878: LD_ADDR_EXP 47
8882: PUSH
8883: LD_INT 0
8885: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8886: LD_VAR 0 1
8890: PPUSH
8891: CALL_OW 247
8895: PUSH
8896: LD_INT 1
8898: EQUAL
8899: IFFALSE 8916
8901: PUSH
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 248
8911: PUSH
8912: LD_INT 0
8914: GREATER
8915: AND
8916: IFFALSE 9161
// begin if not mpRespawn then
8918: LD_EXP 33
8922: NOT
8923: IFFALSE 8927
// exit ;
8925: GO 9161
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8927: LD_VAR 0 9
8931: PPUSH
8932: CALL_OW 108
8936: NOT
8937: IFFALSE 8956
8939: PUSH
8940: LD_EXP 3
8944: PPUSH
8945: LD_VAR 0 9
8949: PPUSH
8950: CALL 7187 0 2
8954: NOT
8955: AND
8956: IFFALSE 8960
// exit ;
8958: GO 9161
// side := GetSide ( un ) ;
8960: LD_ADDR_VAR 0 9
8964: PUSH
8965: LD_VAR 0 1
8969: PPUSH
8970: CALL_OW 255
8974: ST_TO_ADDR
// nation := GetNation ( un ) ;
8975: LD_ADDR_VAR 0 8
8979: PUSH
8980: LD_VAR 0 1
8984: PPUSH
8985: CALL_OW 248
8989: ST_TO_ADDR
// class := GetClass ( un ) ;
8990: LD_ADDR_VAR 0 6
8994: PUSH
8995: LD_VAR 0 1
8999: PPUSH
9000: CALL_OW 257
9004: ST_TO_ADDR
// if class > 4 then
9005: LD_VAR 0 6
9009: PUSH
9010: LD_INT 4
9012: GREATER
9013: IFFALSE 9023
// class := 1 ;
9015: LD_ADDR_VAR 0 6
9019: PUSH
9020: LD_INT 1
9022: ST_TO_ADDR
// repeat wait ( 10 ) ;
9023: LD_INT 10
9025: PPUSH
9026: CALL_OW 67
// until not mpBlockRespThread ;
9030: LD_EXP 47
9034: NOT
9035: IFFALSE 9023
// mpBlockRespThread := true ;
9037: LD_ADDR_EXP 47
9041: PUSH
9042: LD_INT 1
9044: ST_TO_ADDR
// uc_side := side ;
9045: LD_ADDR_OWVAR 20
9049: PUSH
9050: LD_VAR 0 9
9054: ST_TO_ADDR
// uc_nation := nation ;
9055: LD_ADDR_OWVAR 21
9059: PUSH
9060: LD_VAR 0 8
9064: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
9065: LD_INT 0
9067: PPUSH
9068: LD_VAR 0 6
9072: PPUSH
9073: LD_INT 2
9075: PPUSH
9076: CALL_OW 380
// un := CreateHuman ;
9080: LD_ADDR_VAR 0 1
9084: PUSH
9085: CALL_OW 44
9089: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
9090: LD_ADDR_EXP 40
9094: PUSH
9095: LD_EXP 40
9099: PPUSH
9100: LD_VAR 0 9
9104: PPUSH
9105: LD_EXP 40
9109: PUSH
9110: LD_VAR 0 9
9114: ARRAY
9115: PPUSH
9116: LD_EXP 40
9120: PUSH
9121: LD_VAR 0 9
9125: ARRAY
9126: PUSH
9127: LD_INT 1
9129: PLUS
9130: PPUSH
9131: LD_VAR 0 1
9135: PPUSH
9136: CALL_OW 1
9140: PPUSH
9141: CALL_OW 1
9145: ST_TO_ADDR
// wait ( 10 ) ;
9146: LD_INT 10
9148: PPUSH
9149: CALL_OW 67
// mpBlockRespThread := false ;
9153: LD_ADDR_EXP 47
9157: PUSH
9158: LD_INT 0
9160: ST_TO_ADDR
// end ; end ;
9161: LD_VAR 0 2
9165: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
9166: LD_INT 0
9168: PPUSH
9169: PPUSH
9170: PPUSH
9171: PPUSH
9172: PPUSH
// tag := 0 ;
9173: LD_ADDR_VAR 0 5
9177: PUSH
9178: LD_INT 0
9180: ST_TO_ADDR
// for i := 1 to 8 do
9181: LD_ADDR_VAR 0 4
9185: PUSH
9186: DOUBLE
9187: LD_INT 1
9189: DEC
9190: ST_TO_ADDR
9191: LD_INT 8
9193: PUSH
9194: FOR_TO
9195: IFFALSE 9229
// if un in mpApePosIndex [ i ] then
9197: LD_VAR 0 2
9201: PUSH
9202: LD_EXP 32
9206: PUSH
9207: LD_VAR 0 4
9211: ARRAY
9212: IN
9213: IFFALSE 9227
// begin tag := i ;
9215: LD_ADDR_VAR 0 5
9219: PUSH
9220: LD_VAR 0 4
9224: ST_TO_ADDR
// break ;
9225: GO 9229
// end ;
9227: GO 9194
9229: POP
9230: POP
// if not tag then
9231: LD_VAR 0 5
9235: NOT
9236: IFFALSE 9240
// exit ;
9238: GO 9408
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9240: LD_ADDR_VAR 0 6
9244: PUSH
9245: LD_EXP 31
9249: PUSH
9250: LD_EXP 7
9254: PUSH
9255: LD_VAR 0 5
9259: ARRAY
9260: ARRAY
9261: ST_TO_ADDR
// if not area then
9262: LD_VAR 0 6
9266: NOT
9267: IFFALSE 9271
// exit ;
9269: GO 9408
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9271: LD_INT 14700
9273: PUSH
9274: LD_VAR 0 2
9278: PUSH
9279: LD_INT 5
9281: MOD
9282: PUSH
9283: LD_INT 1
9285: PLUS
9286: PUSH
9287: LD_INT 700
9289: MUL
9290: PLUS
9291: PPUSH
9292: CALL_OW 67
// repeat wait ( 10 ) ;
9296: LD_INT 10
9298: PPUSH
9299: CALL_OW 67
// until not mpBlockRespThread ;
9303: LD_EXP 47
9307: NOT
9308: IFFALSE 9296
// mpBlockRespThread := true ;
9310: LD_ADDR_EXP 47
9314: PUSH
9315: LD_INT 1
9317: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9318: LD_INT 0
9320: PPUSH
9321: CALL 45677 0 1
// ape := CreateHuman ;
9325: LD_ADDR_VAR 0 7
9329: PUSH
9330: CALL_OW 44
9334: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9335: LD_ADDR_EXP 32
9339: PUSH
9340: LD_EXP 32
9344: PPUSH
9345: LD_VAR 0 5
9349: PPUSH
9350: LD_EXP 32
9354: PUSH
9355: LD_VAR 0 5
9359: ARRAY
9360: PPUSH
9361: LD_VAR 0 7
9365: PPUSH
9366: CALL 49550 0 2
9370: PPUSH
9371: CALL_OW 1
9375: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9376: LD_VAR 0 7
9380: PPUSH
9381: LD_VAR 0 6
9385: PPUSH
9386: LD_INT 0
9388: PPUSH
9389: CALL_OW 49
// wait ( 10 ) ;
9393: LD_INT 10
9395: PPUSH
9396: CALL_OW 67
// mpBlockRespThread := false ;
9400: LD_ADDR_EXP 47
9404: PUSH
9405: LD_INT 0
9407: ST_TO_ADDR
// end ;
9408: LD_VAR 0 3
9412: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9413: LD_INT 0
9415: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9416: LD_VAR 0 1
9420: PPUSH
9421: CALL_OW 266
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 1
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: IN
9436: IFFALSE 9461
// SetBName ( building , @ & GetSide ( building ) ) ;
9438: LD_VAR 0 1
9442: PPUSH
9443: LD_STRING @
9445: PUSH
9446: LD_VAR 0 1
9450: PPUSH
9451: CALL_OW 255
9455: STR
9456: PPUSH
9457: CALL_OW 500
// end ;
9461: LD_VAR 0 2
9465: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9466: LD_INT 0
9468: PPUSH
9469: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
9470: LD_EXP 3
9474: PUSH
9475: LD_INT 2
9477: PUSH
9478: LD_INT 8
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: IN
9485: IFFALSE 9509
9487: PUSH
9488: LD_VAR 0 1
9492: PPUSH
9493: CALL_OW 266
9497: PUSH
9498: LD_INT 0
9500: PUSH
9501: LD_INT 1
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: IN
9508: AND
9509: IFFALSE 9588
// begin SetSide ( building , oldSide ) ;
9511: LD_VAR 0 1
9515: PPUSH
9516: LD_VAR 0 2
9520: PPUSH
9521: CALL_OW 235
// KillUnit ( building ) ;
9525: LD_VAR 0 1
9529: PPUSH
9530: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9534: LD_ADDR_VAR 0 5
9538: PUSH
9539: LD_INT 22
9541: PUSH
9542: LD_VAR 0 2
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: LD_INT 21
9553: PUSH
9554: LD_INT 1
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PPUSH
9565: CALL_OW 69
9569: PUSH
9570: FOR_IN
9571: IFFALSE 9584
// KillUnit ( i ) ;
9573: LD_VAR 0 5
9577: PPUSH
9578: CALL_OW 66
9582: GO 9570
9584: POP
9585: POP
// exit ;
9586: GO 9633
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9588: LD_VAR 0 1
9592: PPUSH
9593: CALL_OW 266
9597: PUSH
9598: LD_INT 0
9600: PUSH
9601: LD_INT 1
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: IN
9608: IFFALSE 9633
// SetBName ( building , @ & GetSide ( building ) ) ;
9610: LD_VAR 0 1
9614: PPUSH
9615: LD_STRING @
9617: PUSH
9618: LD_VAR 0 1
9622: PPUSH
9623: CALL_OW 255
9627: STR
9628: PPUSH
9629: CALL_OW 500
// end ;
9633: LD_VAR 0 4
9637: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9638: LD_INT 0
9640: PPUSH
9641: PPUSH
9642: PPUSH
// if mpGameType <> GameTypeFamine then
9643: LD_EXP 3
9647: PUSH
9648: LD_INT 5
9650: NONEQUAL
9651: IFFALSE 9655
// exit ;
9653: GO 9889
// for i := 1 to mpGlobalOilDeposits do
9655: LD_ADDR_VAR 0 6
9659: PUSH
9660: DOUBLE
9661: LD_INT 1
9663: DEC
9664: ST_TO_ADDR
9665: LD_EXP 42
9669: PUSH
9670: FOR_TO
9671: IFFALSE 9887
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9673: LD_EXP 42
9677: PUSH
9678: LD_VAR 0 6
9682: ARRAY
9683: PUSH
9684: LD_INT 1
9686: ARRAY
9687: PPUSH
9688: LD_EXP 42
9692: PUSH
9693: LD_VAR 0 6
9697: ARRAY
9698: PUSH
9699: LD_INT 2
9701: ARRAY
9702: PPUSH
9703: CALL_OW 428
9707: PUSH
9708: LD_VAR 0 1
9712: EQUAL
9713: IFFALSE 9885
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9715: LD_ADDR_VAR 0 7
9719: PUSH
9720: LD_EXP 42
9724: PUSH
9725: LD_VAR 0 6
9729: ARRAY
9730: PUSH
9731: LD_INT 3
9733: ARRAY
9734: ST_TO_ADDR
// value := value - amount ;
9735: LD_ADDR_VAR 0 7
9739: PUSH
9740: LD_VAR 0 7
9744: PUSH
9745: LD_VAR 0 4
9749: MINUS
9750: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9751: LD_ADDR_EXP 42
9755: PUSH
9756: LD_EXP 42
9760: PPUSH
9761: LD_VAR 0 6
9765: PPUSH
9766: LD_EXP 42
9770: PUSH
9771: LD_VAR 0 6
9775: ARRAY
9776: PPUSH
9777: LD_INT 3
9779: PPUSH
9780: LD_VAR 0 7
9784: PPUSH
9785: CALL_OW 1
9789: PPUSH
9790: CALL_OW 1
9794: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9795: LD_VAR 0 2
9799: PUSH
9800: LD_OWVAR 2
9804: PUSH
9805: LD_INT 9
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: IN
9812: IFFALSE 9828
// SetUnitDisplayNumber ( building , value ) ;
9814: LD_VAR 0 1
9818: PPUSH
9819: LD_VAR 0 7
9823: PPUSH
9824: CALL_OW 505
// if value <= 0 then
9828: LD_VAR 0 7
9832: PUSH
9833: LD_INT 0
9835: LESSEQUAL
9836: IFFALSE 9885
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9838: LD_EXP 42
9842: PUSH
9843: LD_VAR 0 6
9847: ARRAY
9848: PUSH
9849: LD_INT 1
9851: ARRAY
9852: PPUSH
9853: LD_EXP 42
9857: PUSH
9858: LD_VAR 0 6
9862: ARRAY
9863: PUSH
9864: LD_INT 2
9866: ARRAY
9867: PPUSH
9868: CALL_OW 63
// KillUnit ( building ) ;
9872: LD_VAR 0 1
9876: PPUSH
9877: CALL_OW 66
// exit ;
9881: POP
9882: POP
9883: GO 9889
// end ; end ; end ;
9885: GO 9670
9887: POP
9888: POP
// end ;
9889: LD_VAR 0 5
9893: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9894: LD_INT 0
9896: PPUSH
9897: PPUSH
9898: PPUSH
// if mpGameType <> GameTypeFamine then
9899: LD_EXP 3
9903: PUSH
9904: LD_INT 5
9906: NONEQUAL
9907: IFFALSE 9911
// exit ;
9909: GO 10145
// for i := 1 to mpGlobalSibDeposits do
9911: LD_ADDR_VAR 0 6
9915: PUSH
9916: DOUBLE
9917: LD_INT 1
9919: DEC
9920: ST_TO_ADDR
9921: LD_EXP 43
9925: PUSH
9926: FOR_TO
9927: IFFALSE 10143
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9929: LD_EXP 43
9933: PUSH
9934: LD_VAR 0 6
9938: ARRAY
9939: PUSH
9940: LD_INT 1
9942: ARRAY
9943: PPUSH
9944: LD_EXP 43
9948: PUSH
9949: LD_VAR 0 6
9953: ARRAY
9954: PUSH
9955: LD_INT 2
9957: ARRAY
9958: PPUSH
9959: CALL_OW 428
9963: PUSH
9964: LD_VAR 0 1
9968: EQUAL
9969: IFFALSE 10141
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9971: LD_ADDR_VAR 0 7
9975: PUSH
9976: LD_EXP 43
9980: PUSH
9981: LD_VAR 0 6
9985: ARRAY
9986: PUSH
9987: LD_INT 3
9989: ARRAY
9990: ST_TO_ADDR
// value := value - amount ;
9991: LD_ADDR_VAR 0 7
9995: PUSH
9996: LD_VAR 0 7
10000: PUSH
10001: LD_VAR 0 4
10005: MINUS
10006: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
10007: LD_ADDR_EXP 43
10011: PUSH
10012: LD_EXP 43
10016: PPUSH
10017: LD_VAR 0 6
10021: PPUSH
10022: LD_EXP 43
10026: PUSH
10027: LD_VAR 0 6
10031: ARRAY
10032: PPUSH
10033: LD_INT 3
10035: PPUSH
10036: LD_VAR 0 7
10040: PPUSH
10041: CALL_OW 1
10045: PPUSH
10046: CALL_OW 1
10050: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10051: LD_VAR 0 2
10055: PUSH
10056: LD_OWVAR 2
10060: PUSH
10061: LD_INT 9
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: IN
10068: IFFALSE 10084
// SetUnitDisplayNumber ( building , value ) ;
10070: LD_VAR 0 1
10074: PPUSH
10075: LD_VAR 0 7
10079: PPUSH
10080: CALL_OW 505
// if value <= 0 then
10084: LD_VAR 0 7
10088: PUSH
10089: LD_INT 0
10091: LESSEQUAL
10092: IFFALSE 10141
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
10094: LD_EXP 43
10098: PUSH
10099: LD_VAR 0 6
10103: ARRAY
10104: PUSH
10105: LD_INT 1
10107: ARRAY
10108: PPUSH
10109: LD_EXP 43
10113: PUSH
10114: LD_VAR 0 6
10118: ARRAY
10119: PUSH
10120: LD_INT 2
10122: ARRAY
10123: PPUSH
10124: CALL_OW 63
// KillUnit ( building ) ;
10128: LD_VAR 0 1
10132: PPUSH
10133: CALL_OW 66
// exit ;
10137: POP
10138: POP
10139: GO 10145
// end ; end ; end ;
10141: GO 9926
10143: POP
10144: POP
// end ;
10145: LD_VAR 0 5
10149: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
10150: LD_INT 0
10152: PPUSH
10153: PPUSH
// side := GetSide ( factory ) ;
10154: LD_ADDR_VAR 0 7
10158: PUSH
10159: LD_VAR 0 1
10163: PPUSH
10164: CALL_OW 255
10168: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
10169: LD_VAR 0 5
10173: PUSH
10174: LD_INT 81
10176: EQUAL
10177: IFFALSE 10215
10179: PUSH
10180: LD_INT 22
10182: PUSH
10183: LD_VAR 0 7
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: LD_INT 34
10194: PUSH
10195: LD_INT 81
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PPUSH
10206: CALL_OW 69
10210: PUSH
10211: LD_INT 0
10213: GREATER
10214: AND
10215: IFFALSE 10248
// begin ComCancel ( factory ) ;
10217: LD_VAR 0 1
10221: PPUSH
10222: CALL_OW 127
// if side = your_side then
10226: LD_VAR 0 7
10230: PUSH
10231: LD_OWVAR 2
10235: EQUAL
10236: IFFALSE 10248
// HintSpec ( VehLimit , 2 ) ;
10238: LD_STRING VehLimit
10240: PPUSH
10241: LD_INT 2
10243: PPUSH
10244: CALL_OW 338
// end ; end ;
10248: LD_VAR 0 6
10252: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
10253: LD_INT 0
10255: PPUSH
10256: PPUSH
10257: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
10258: LD_VAR 0 1
10262: PPUSH
10263: CALL_OW 264
10267: PUSH
10268: LD_INT 81
10270: EQUAL
10271: IFFALSE 10288
10273: PUSH
10274: LD_VAR 0 1
10278: PPUSH
10279: CALL_OW 263
10283: PUSH
10284: LD_INT 1
10286: EQUAL
10287: AND
10288: IFFALSE 10568
// begin for i := 1 to Count ( minersList ) do
10290: LD_ADDR_VAR 0 6
10294: PUSH
10295: DOUBLE
10296: LD_INT 1
10298: DEC
10299: ST_TO_ADDR
10300: LD_EXP 57
10304: PPUSH
10305: CALL 13574 0 1
10309: PUSH
10310: FOR_TO
10311: IFFALSE 10429
// begin if minersList [ i ] = oldId then
10313: LD_EXP 57
10317: PUSH
10318: LD_VAR 0 6
10322: ARRAY
10323: PUSH
10324: LD_VAR 0 2
10328: EQUAL
10329: IFFALSE 10427
// begin for j := 1 to minerMinesList [ i ] do
10331: LD_ADDR_VAR 0 7
10335: PUSH
10336: DOUBLE
10337: LD_INT 1
10339: DEC
10340: ST_TO_ADDR
10341: LD_EXP 58
10345: PUSH
10346: LD_VAR 0 6
10350: ARRAY
10351: PUSH
10352: FOR_TO
10353: IFFALSE 10403
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
10355: LD_EXP 58
10359: PUSH
10360: LD_VAR 0 6
10364: ARRAY
10365: PUSH
10366: LD_VAR 0 7
10370: ARRAY
10371: PUSH
10372: LD_INT 1
10374: ARRAY
10375: PPUSH
10376: LD_EXP 58
10380: PUSH
10381: LD_VAR 0 6
10385: ARRAY
10386: PUSH
10387: LD_VAR 0 7
10391: ARRAY
10392: PUSH
10393: LD_INT 2
10395: ARRAY
10396: PPUSH
10397: CALL_OW 612
10401: GO 10352
10403: POP
10404: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
10405: LD_ADDR_EXP 58
10409: PUSH
10410: LD_EXP 58
10414: PPUSH
10415: LD_VAR 0 6
10419: PPUSH
10420: CALL_OW 3
10424: ST_TO_ADDR
// break ;
10425: GO 10429
// end ; end ;
10427: GO 10310
10429: POP
10430: POP
// minersList := minersList diff oldId ;
10431: LD_ADDR_EXP 57
10435: PUSH
10436: LD_EXP 57
10440: PUSH
10441: LD_VAR 0 2
10445: DIFF
10446: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
10447: LD_INT 22
10449: PUSH
10450: LD_VAR 0 4
10454: PPUSH
10455: CALL_OW 255
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 34
10466: PUSH
10467: LD_INT 81
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PPUSH
10478: CALL_OW 69
10482: PUSH
10483: LD_INT 1
10485: GREATER
10486: IFFALSE 10513
// begin ComExit ( unit ) ;
10488: LD_VAR 0 4
10492: PPUSH
10493: CALL 49948 0 1
// SetSide ( newId , oldSide ) ;
10497: LD_VAR 0 1
10501: PPUSH
10502: LD_VAR 0 3
10506: PPUSH
10507: CALL_OW 235
// exit ;
10511: GO 10568
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
10513: LD_ADDR_EXP 57
10517: PUSH
10518: LD_EXP 57
10522: PPUSH
10523: LD_EXP 57
10527: PUSH
10528: LD_INT 1
10530: PLUS
10531: PPUSH
10532: LD_VAR 0 1
10536: PPUSH
10537: CALL_OW 1
10541: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10542: LD_ADDR_EXP 58
10546: PUSH
10547: LD_EXP 58
10551: PPUSH
10552: LD_EXP 58
10556: PUSH
10557: LD_INT 1
10559: PLUS
10560: PPUSH
10561: EMPTY
10562: PPUSH
10563: CALL_OW 1
10567: ST_TO_ADDR
// end ; end ; end_of_file
10568: LD_VAR 0 5
10572: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10573: LD_EXP 39
10577: IFFALSE 10585
10579: PUSH
10580: CALL 10795 0 0
10584: AND
10585: IFFALSE 10593
10587: PUSH
10588: LD_OWVAR 4
10592: AND
10593: IFFALSE 10792
10595: GO 10597
10597: DISABLE
10598: LD_INT 0
10600: PPUSH
10601: PPUSH
// begin canWin := false ;
10602: LD_ADDR_VAR 0 2
10606: PUSH
10607: LD_INT 0
10609: ST_TO_ADDR
// if not HasPower ( your_side ) then
10610: LD_OWVAR 2
10614: PPUSH
10615: CALL 10837 0 1
10619: NOT
10620: IFFALSE 10631
// begin Multiplayer_Loose_Message ;
10622: CALL_OW 521
// enable ( mpLose ) ;
10626: LD_INT 102
10628: ENABLE_MARKED
// end else
10629: GO 10792
// begin canWin := true ;
10631: LD_ADDR_VAR 0 2
10635: PUSH
10636: LD_INT 1
10638: ST_TO_ADDR
// for i := 1 to 8 do
10639: LD_ADDR_VAR 0 1
10643: PUSH
10644: DOUBLE
10645: LD_INT 1
10647: DEC
10648: ST_TO_ADDR
10649: LD_INT 8
10651: PUSH
10652: FOR_TO
10653: IFFALSE 10778
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10655: LD_EXP 7
10659: PUSH
10660: LD_VAR 0 1
10664: ARRAY
10665: IFFALSE 10678
10667: PUSH
10668: LD_VAR 0 1
10672: PPUSH
10673: CALL_OW 108
10677: AND
10678: IFFALSE 10692
10680: PUSH
10681: LD_VAR 0 1
10685: PUSH
10686: LD_OWVAR 2
10690: NONEQUAL
10691: AND
10692: IFFALSE 10776
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10694: LD_EXP 8
10698: PUSH
10699: LD_VAR 0 1
10703: ARRAY
10704: NOT
10705: IFTRUE 10753
10707: PUSH
10708: LD_EXP 8
10712: PUSH
10713: LD_VAR 0 1
10717: ARRAY
10718: PUSH
10719: LD_EXP 8
10723: PUSH
10724: LD_OWVAR 2
10728: ARRAY
10729: NONEQUAL
10730: IFFALSE 10752
10732: PUSH
10733: LD_OWVAR 2
10737: PPUSH
10738: LD_VAR 0 1
10742: PPUSH
10743: CALL_OW 81
10747: PUSH
10748: LD_INT 1
10750: NONEQUAL
10751: AND
10752: OR
10753: IFFALSE 10776
// if HasPower ( i ) then
10755: LD_VAR 0 1
10759: PPUSH
10760: CALL 10837 0 1
10764: IFFALSE 10776
// begin canWin := false ;
10766: LD_ADDR_VAR 0 2
10770: PUSH
10771: LD_INT 0
10773: ST_TO_ADDR
// break ;
10774: GO 10778
// end ;
10776: GO 10652
10778: POP
10779: POP
// if canWin then
10780: LD_VAR 0 2
10784: IFFALSE 10791
// enable ( mpWin ) else
10786: LD_INT 101
10788: ENABLE_MARKED
10789: GO 10792
// enable ;
10791: ENABLE
// end ; end ;
10792: PPOPN 2
10794: END
// function CanWinLoose ; begin
10795: LD_INT 0
10797: PPUSH
// result := true ;
10798: LD_ADDR_VAR 0 1
10802: PUSH
10803: LD_INT 1
10805: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10806: CALL_OW 531
10810: IFFALSE 10822
10812: PUSH
10813: CALL_OW 519
10817: PUSH
10818: LD_INT 1
10820: GREATER
10821: AND
10822: IFFALSE 10832
// result := false ;
10824: LD_ADDR_VAR 0 1
10828: PUSH
10829: LD_INT 0
10831: ST_TO_ADDR
// end ;
10832: LD_VAR 0 1
10836: RET
// function HasPower ( i ) ; begin
10837: LD_INT 0
10839: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10840: LD_ADDR_VAR 0 2
10844: PUSH
10845: LD_INT 22
10847: PUSH
10848: LD_VAR 0 1
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: LD_INT 2
10859: PUSH
10860: LD_INT 21
10862: PUSH
10863: LD_INT 1
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 33
10872: PUSH
10873: LD_INT 3
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: LD_INT 33
10882: PUSH
10883: LD_INT 5
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PPUSH
10900: CALL_OW 69
10904: ST_TO_ADDR
// end ; end_of_file
10905: LD_VAR 0 2
10909: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10910: LD_EXP 39
10914: IFFALSE 10957
10916: GO 10918
10918: DISABLE
10919: LD_INT 0
10921: PPUSH
// begin for i := 1 to 8 do
10922: LD_ADDR_VAR 0 1
10926: PUSH
10927: DOUBLE
10928: LD_INT 1
10930: DEC
10931: ST_TO_ADDR
10932: LD_INT 8
10934: PUSH
10935: FOR_TO
10936: IFFALSE 10955
// SetRestrict ( b_depot , i , state_disabled ) ;
10938: LD_INT 0
10940: PPUSH
10941: LD_VAR 0 1
10945: PPUSH
10946: LD_INT 0
10948: PPUSH
10949: CALL_OW 324
10953: GO 10935
10955: POP
10956: POP
// end ;
10957: PPOPN 1
10959: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10960: LD_EXP 39
10964: IFFALSE 10972
10966: PUSH
10967: CALL 11182 0 0
10971: AND
10972: IFFALSE 10980
10974: PUSH
10975: LD_OWVAR 4
10979: AND
10980: IFFALSE 11179
10982: GO 10984
10984: DISABLE
10985: LD_INT 0
10987: PPUSH
10988: PPUSH
// begin canWin := false ;
10989: LD_ADDR_VAR 0 2
10993: PUSH
10994: LD_INT 0
10996: ST_TO_ADDR
// if not HasPower ( your_side ) then
10997: LD_OWVAR 2
11001: PPUSH
11002: CALL 11224 0 1
11006: NOT
11007: IFFALSE 11018
// begin Multiplayer_Loose_Message ;
11009: CALL_OW 521
// enable ( mpLose ) ;
11013: LD_INT 102
11015: ENABLE_MARKED
// end else
11016: GO 11179
// begin canWin := true ;
11018: LD_ADDR_VAR 0 2
11022: PUSH
11023: LD_INT 1
11025: ST_TO_ADDR
// for i := 1 to 8 do
11026: LD_ADDR_VAR 0 1
11030: PUSH
11031: DOUBLE
11032: LD_INT 1
11034: DEC
11035: ST_TO_ADDR
11036: LD_INT 8
11038: PUSH
11039: FOR_TO
11040: IFFALSE 11165
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11042: LD_EXP 7
11046: PUSH
11047: LD_VAR 0 1
11051: ARRAY
11052: IFFALSE 11065
11054: PUSH
11055: LD_VAR 0 1
11059: PPUSH
11060: CALL_OW 108
11064: AND
11065: IFFALSE 11079
11067: PUSH
11068: LD_VAR 0 1
11072: PUSH
11073: LD_OWVAR 2
11077: NONEQUAL
11078: AND
11079: IFFALSE 11163
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11081: LD_EXP 8
11085: PUSH
11086: LD_VAR 0 1
11090: ARRAY
11091: NOT
11092: IFTRUE 11140
11094: PUSH
11095: LD_EXP 8
11099: PUSH
11100: LD_VAR 0 1
11104: ARRAY
11105: PUSH
11106: LD_EXP 8
11110: PUSH
11111: LD_OWVAR 2
11115: ARRAY
11116: NONEQUAL
11117: IFFALSE 11139
11119: PUSH
11120: LD_OWVAR 2
11124: PPUSH
11125: LD_VAR 0 1
11129: PPUSH
11130: CALL_OW 81
11134: PUSH
11135: LD_INT 1
11137: NONEQUAL
11138: AND
11139: OR
11140: IFFALSE 11163
// if HasPower ( i ) then
11142: LD_VAR 0 1
11146: PPUSH
11147: CALL 11224 0 1
11151: IFFALSE 11163
// begin canWin := false ;
11153: LD_ADDR_VAR 0 2
11157: PUSH
11158: LD_INT 0
11160: ST_TO_ADDR
// break ;
11161: GO 11165
// end ;
11163: GO 11039
11165: POP
11166: POP
// if canWin then
11167: LD_VAR 0 2
11171: IFFALSE 11178
// enable ( mpWin ) else
11173: LD_INT 101
11175: ENABLE_MARKED
11176: GO 11179
// enable ;
11178: ENABLE
// end ; end ;
11179: PPOPN 2
11181: END
// function CanWinLoose ; begin
11182: LD_INT 0
11184: PPUSH
// result := true ;
11185: LD_ADDR_VAR 0 1
11189: PUSH
11190: LD_INT 1
11192: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11193: CALL_OW 531
11197: IFFALSE 11209
11199: PUSH
11200: CALL_OW 519
11204: PUSH
11205: LD_INT 1
11207: GREATER
11208: AND
11209: IFFALSE 11219
// result := false ;
11211: LD_ADDR_VAR 0 1
11215: PUSH
11216: LD_INT 0
11218: ST_TO_ADDR
// end ;
11219: LD_VAR 0 1
11223: RET
// function HasPower ( i ) ; begin
11224: LD_INT 0
11226: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11227: LD_INT 22
11229: PUSH
11230: LD_VAR 0 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PUSH
11239: LD_INT 2
11241: PUSH
11242: LD_INT 30
11244: PUSH
11245: LD_INT 0
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: LD_INT 30
11254: PUSH
11255: LD_INT 1
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PPUSH
11271: CALL_OW 69
11275: NOT
11276: IFFALSE 11280
// exit ;
11278: GO 11345
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11280: LD_ADDR_VAR 0 2
11284: PUSH
11285: LD_INT 22
11287: PUSH
11288: LD_VAR 0 1
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: LD_INT 2
11299: PUSH
11300: LD_INT 21
11302: PUSH
11303: LD_INT 1
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: LD_INT 33
11312: PUSH
11313: LD_INT 3
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 33
11322: PUSH
11323: LD_INT 5
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PPUSH
11340: CALL_OW 69
11344: ST_TO_ADDR
// end ; end_of_file
11345: LD_VAR 0 2
11349: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11350: LD_INT 0
11352: PPUSH
11353: PPUSH
// if exist_mode then
11354: LD_VAR 0 2
11358: IFFALSE 11404
// begin unit := CreateCharacter ( prefix & ident ) ;
11360: LD_ADDR_VAR 0 5
11364: PUSH
11365: LD_VAR 0 3
11369: PUSH
11370: LD_VAR 0 1
11374: STR
11375: PPUSH
11376: CALL_OW 34
11380: ST_TO_ADDR
// if unit then
11381: LD_VAR 0 5
11385: IFFALSE 11402
// DeleteCharacters ( prefix & ident ) ;
11387: LD_VAR 0 3
11391: PUSH
11392: LD_VAR 0 1
11396: STR
11397: PPUSH
11398: CALL_OW 40
// end else
11402: GO 11419
// unit := NewCharacter ( ident ) ;
11404: LD_ADDR_VAR 0 5
11408: PUSH
11409: LD_VAR 0 1
11413: PPUSH
11414: CALL_OW 25
11418: ST_TO_ADDR
// result := unit ;
11419: LD_ADDR_VAR 0 4
11423: PUSH
11424: LD_VAR 0 5
11428: ST_TO_ADDR
// end ;
11429: LD_VAR 0 4
11433: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
11434: LD_INT 0
11436: PPUSH
11437: PPUSH
// if exist_mode then
11438: LD_VAR 0 2
11442: IFFALSE 11467
// unit := CreateCharacter ( prefix & ident ) else
11444: LD_ADDR_VAR 0 5
11448: PUSH
11449: LD_VAR 0 3
11453: PUSH
11454: LD_VAR 0 1
11458: STR
11459: PPUSH
11460: CALL_OW 34
11464: ST_TO_ADDR
11465: GO 11482
// unit := NewCharacter ( ident ) ;
11467: LD_ADDR_VAR 0 5
11471: PUSH
11472: LD_VAR 0 1
11476: PPUSH
11477: CALL_OW 25
11481: ST_TO_ADDR
// result := unit ;
11482: LD_ADDR_VAR 0 4
11486: PUSH
11487: LD_VAR 0 5
11491: ST_TO_ADDR
// end ;
11492: LD_VAR 0 4
11496: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11497: LD_INT 0
11499: PPUSH
11500: PPUSH
// if not side or not nation then
11501: LD_VAR 0 1
11505: NOT
11506: IFTRUE 11515
11508: PUSH
11509: LD_VAR 0 2
11513: NOT
11514: OR
11515: IFFALSE 11519
// exit ;
11517: GO 12313
// case nation of nation_american :
11519: LD_VAR 0 2
11523: PUSH
11524: LD_INT 1
11526: DOUBLE
11527: EQUAL
11528: IFTRUE 11532
11530: GO 11754
11532: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
11533: LD_ADDR_VAR 0 4
11537: PUSH
11538: LD_INT 35
11540: PUSH
11541: LD_INT 45
11543: PUSH
11544: LD_INT 46
11546: PUSH
11547: LD_INT 47
11549: PUSH
11550: LD_INT 82
11552: PUSH
11553: LD_INT 83
11555: PUSH
11556: LD_INT 84
11558: PUSH
11559: LD_INT 85
11561: PUSH
11562: LD_INT 86
11564: PUSH
11565: LD_INT 1
11567: PUSH
11568: LD_INT 2
11570: PUSH
11571: LD_INT 6
11573: PUSH
11574: LD_INT 15
11576: PUSH
11577: LD_INT 16
11579: PUSH
11580: LD_INT 7
11582: PUSH
11583: LD_INT 12
11585: PUSH
11586: LD_INT 13
11588: PUSH
11589: LD_INT 10
11591: PUSH
11592: LD_INT 14
11594: PUSH
11595: LD_INT 20
11597: PUSH
11598: LD_INT 21
11600: PUSH
11601: LD_INT 22
11603: PUSH
11604: LD_INT 25
11606: PUSH
11607: LD_INT 32
11609: PUSH
11610: LD_INT 27
11612: PUSH
11613: LD_INT 36
11615: PUSH
11616: LD_INT 69
11618: PUSH
11619: LD_INT 39
11621: PUSH
11622: LD_INT 34
11624: PUSH
11625: LD_INT 40
11627: PUSH
11628: LD_INT 48
11630: PUSH
11631: LD_INT 49
11633: PUSH
11634: LD_INT 50
11636: PUSH
11637: LD_INT 51
11639: PUSH
11640: LD_INT 52
11642: PUSH
11643: LD_INT 53
11645: PUSH
11646: LD_INT 54
11648: PUSH
11649: LD_INT 55
11651: PUSH
11652: LD_INT 56
11654: PUSH
11655: LD_INT 57
11657: PUSH
11658: LD_INT 58
11660: PUSH
11661: LD_INT 59
11663: PUSH
11664: LD_INT 60
11666: PUSH
11667: LD_INT 61
11669: PUSH
11670: LD_INT 62
11672: PUSH
11673: LD_INT 80
11675: PUSH
11676: LD_INT 82
11678: PUSH
11679: LD_INT 83
11681: PUSH
11682: LD_INT 84
11684: PUSH
11685: LD_INT 85
11687: PUSH
11688: LD_INT 86
11690: PUSH
11691: LD_INT 90
11693: PUSH
11694: LD_INT 93
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: ST_TO_ADDR
11752: GO 12235
11754: LD_INT 2
11756: DOUBLE
11757: EQUAL
11758: IFTRUE 11762
11760: GO 11996
11762: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11763: LD_ADDR_VAR 0 4
11767: PUSH
11768: LD_INT 35
11770: PUSH
11771: LD_INT 45
11773: PUSH
11774: LD_INT 46
11776: PUSH
11777: LD_INT 47
11779: PUSH
11780: LD_INT 82
11782: PUSH
11783: LD_INT 83
11785: PUSH
11786: LD_INT 84
11788: PUSH
11789: LD_INT 85
11791: PUSH
11792: LD_INT 87
11794: PUSH
11795: LD_INT 70
11797: PUSH
11798: LD_INT 1
11800: PUSH
11801: LD_INT 11
11803: PUSH
11804: LD_INT 3
11806: PUSH
11807: LD_INT 4
11809: PUSH
11810: LD_INT 5
11812: PUSH
11813: LD_INT 6
11815: PUSH
11816: LD_INT 15
11818: PUSH
11819: LD_INT 18
11821: PUSH
11822: LD_INT 7
11824: PUSH
11825: LD_INT 17
11827: PUSH
11828: LD_INT 8
11830: PUSH
11831: LD_INT 20
11833: PUSH
11834: LD_INT 21
11836: PUSH
11837: LD_INT 22
11839: PUSH
11840: LD_INT 72
11842: PUSH
11843: LD_INT 26
11845: PUSH
11846: LD_INT 69
11848: PUSH
11849: LD_INT 39
11851: PUSH
11852: LD_INT 40
11854: PUSH
11855: LD_INT 41
11857: PUSH
11858: LD_INT 42
11860: PUSH
11861: LD_INT 43
11863: PUSH
11864: LD_INT 48
11866: PUSH
11867: LD_INT 49
11869: PUSH
11870: LD_INT 50
11872: PUSH
11873: LD_INT 51
11875: PUSH
11876: LD_INT 52
11878: PUSH
11879: LD_INT 53
11881: PUSH
11882: LD_INT 54
11884: PUSH
11885: LD_INT 55
11887: PUSH
11888: LD_INT 56
11890: PUSH
11891: LD_INT 60
11893: PUSH
11894: LD_INT 61
11896: PUSH
11897: LD_INT 62
11899: PUSH
11900: LD_INT 66
11902: PUSH
11903: LD_INT 67
11905: PUSH
11906: LD_INT 68
11908: PUSH
11909: LD_INT 81
11911: PUSH
11912: LD_INT 82
11914: PUSH
11915: LD_INT 83
11917: PUSH
11918: LD_INT 84
11920: PUSH
11921: LD_INT 85
11923: PUSH
11924: LD_INT 87
11926: PUSH
11927: LD_INT 88
11929: PUSH
11930: LD_INT 92
11932: PUSH
11933: LD_INT 94
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: ST_TO_ADDR
11994: GO 12235
11996: LD_INT 3
11998: DOUBLE
11999: EQUAL
12000: IFTRUE 12004
12002: GO 12234
12004: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
12005: LD_ADDR_VAR 0 4
12009: PUSH
12010: LD_INT 46
12012: PUSH
12013: LD_INT 47
12015: PUSH
12016: LD_INT 1
12018: PUSH
12019: LD_INT 2
12021: PUSH
12022: LD_INT 82
12024: PUSH
12025: LD_INT 83
12027: PUSH
12028: LD_INT 84
12030: PUSH
12031: LD_INT 85
12033: PUSH
12034: LD_INT 86
12036: PUSH
12037: LD_INT 11
12039: PUSH
12040: LD_INT 9
12042: PUSH
12043: LD_INT 20
12045: PUSH
12046: LD_INT 19
12048: PUSH
12049: LD_INT 21
12051: PUSH
12052: LD_INT 24
12054: PUSH
12055: LD_INT 22
12057: PUSH
12058: LD_INT 25
12060: PUSH
12061: LD_INT 28
12063: PUSH
12064: LD_INT 29
12066: PUSH
12067: LD_INT 30
12069: PUSH
12070: LD_INT 31
12072: PUSH
12073: LD_INT 37
12075: PUSH
12076: LD_INT 38
12078: PUSH
12079: LD_INT 32
12081: PUSH
12082: LD_INT 27
12084: PUSH
12085: LD_INT 33
12087: PUSH
12088: LD_INT 69
12090: PUSH
12091: LD_INT 39
12093: PUSH
12094: LD_INT 34
12096: PUSH
12097: LD_INT 40
12099: PUSH
12100: LD_INT 71
12102: PUSH
12103: LD_INT 23
12105: PUSH
12106: LD_INT 44
12108: PUSH
12109: LD_INT 48
12111: PUSH
12112: LD_INT 49
12114: PUSH
12115: LD_INT 50
12117: PUSH
12118: LD_INT 51
12120: PUSH
12121: LD_INT 52
12123: PUSH
12124: LD_INT 53
12126: PUSH
12127: LD_INT 54
12129: PUSH
12130: LD_INT 55
12132: PUSH
12133: LD_INT 56
12135: PUSH
12136: LD_INT 57
12138: PUSH
12139: LD_INT 58
12141: PUSH
12142: LD_INT 59
12144: PUSH
12145: LD_INT 63
12147: PUSH
12148: LD_INT 64
12150: PUSH
12151: LD_INT 65
12153: PUSH
12154: LD_INT 82
12156: PUSH
12157: LD_INT 83
12159: PUSH
12160: LD_INT 84
12162: PUSH
12163: LD_INT 85
12165: PUSH
12166: LD_INT 86
12168: PUSH
12169: LD_INT 89
12171: PUSH
12172: LD_INT 91
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: ST_TO_ADDR
12232: GO 12235
12234: POP
// if state > - 1 and state < 3 then
12235: LD_VAR 0 3
12239: PUSH
12240: LD_INT 1
12242: NEG
12243: GREATER
12244: IFFALSE 12256
12246: PUSH
12247: LD_VAR 0 3
12251: PUSH
12252: LD_INT 3
12254: LESS
12255: AND
12256: IFFALSE 12313
// for i in result do
12258: LD_ADDR_VAR 0 5
12262: PUSH
12263: LD_VAR 0 4
12267: PUSH
12268: FOR_IN
12269: IFFALSE 12311
// if GetTech ( i , side ) <> state then
12271: LD_VAR 0 5
12275: PPUSH
12276: LD_VAR 0 1
12280: PPUSH
12281: CALL_OW 321
12285: PUSH
12286: LD_VAR 0 3
12290: NONEQUAL
12291: IFFALSE 12309
// result := result diff i ;
12293: LD_ADDR_VAR 0 4
12297: PUSH
12298: LD_VAR 0 4
12302: PUSH
12303: LD_VAR 0 5
12307: DIFF
12308: ST_TO_ADDR
12309: GO 12268
12311: POP
12312: POP
// end ;
12313: LD_VAR 0 4
12317: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
12318: LD_INT 0
12320: PPUSH
12321: PPUSH
12322: PPUSH
// result := true ;
12323: LD_ADDR_VAR 0 3
12327: PUSH
12328: LD_INT 1
12330: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
12331: LD_ADDR_VAR 0 5
12335: PUSH
12336: LD_VAR 0 2
12340: PPUSH
12341: CALL_OW 480
12345: ST_TO_ADDR
// if not tmp then
12346: LD_VAR 0 5
12350: NOT
12351: IFFALSE 12355
// exit ;
12353: GO 12404
// for i in tmp do
12355: LD_ADDR_VAR 0 4
12359: PUSH
12360: LD_VAR 0 5
12364: PUSH
12365: FOR_IN
12366: IFFALSE 12402
// if GetTech ( i , side ) <> state_researched then
12368: LD_VAR 0 4
12372: PPUSH
12373: LD_VAR 0 1
12377: PPUSH
12378: CALL_OW 321
12382: PUSH
12383: LD_INT 2
12385: NONEQUAL
12386: IFFALSE 12400
// begin result := false ;
12388: LD_ADDR_VAR 0 3
12392: PUSH
12393: LD_INT 0
12395: ST_TO_ADDR
// exit ;
12396: POP
12397: POP
12398: GO 12404
// end ;
12400: GO 12365
12402: POP
12403: POP
// end ;
12404: LD_VAR 0 3
12408: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12409: LD_INT 0
12411: PPUSH
12412: PPUSH
12413: PPUSH
12414: PPUSH
12415: PPUSH
12416: PPUSH
12417: PPUSH
12418: PPUSH
12419: PPUSH
12420: PPUSH
12421: PPUSH
12422: PPUSH
12423: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12424: LD_VAR 0 1
12428: NOT
12429: IFTRUE 12446
12431: PUSH
12432: LD_VAR 0 1
12436: PPUSH
12437: CALL_OW 257
12441: PUSH
12442: LD_INT 9
12444: NONEQUAL
12445: OR
12446: IFFALSE 12450
// exit ;
12448: GO 13029
// side := GetSide ( unit ) ;
12450: LD_ADDR_VAR 0 9
12454: PUSH
12455: LD_VAR 0 1
12459: PPUSH
12460: CALL_OW 255
12464: ST_TO_ADDR
// tech_space := tech_spacanom ;
12465: LD_ADDR_VAR 0 12
12469: PUSH
12470: LD_INT 29
12472: ST_TO_ADDR
// tech_time := tech_taurad ;
12473: LD_ADDR_VAR 0 13
12477: PUSH
12478: LD_INT 28
12480: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12481: LD_ADDR_VAR 0 11
12485: PUSH
12486: LD_VAR 0 1
12490: PPUSH
12491: CALL_OW 310
12495: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12496: LD_VAR 0 11
12500: PPUSH
12501: CALL_OW 247
12505: PUSH
12506: LD_INT 2
12508: EQUAL
12509: IFFALSE 12513
// exit ;
12511: GO 13029
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12513: LD_ADDR_VAR 0 8
12517: PUSH
12518: LD_INT 81
12520: PUSH
12521: LD_VAR 0 9
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 3
12532: PUSH
12533: LD_INT 21
12535: PUSH
12536: LD_INT 3
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 69
12555: ST_TO_ADDR
// if not tmp then
12556: LD_VAR 0 8
12560: NOT
12561: IFFALSE 12565
// exit ;
12563: GO 13029
// if in_unit then
12565: LD_VAR 0 11
12569: IFFALSE 12593
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12571: LD_ADDR_VAR 0 10
12575: PUSH
12576: LD_VAR 0 8
12580: PPUSH
12581: LD_VAR 0 11
12585: PPUSH
12586: CALL_OW 74
12590: ST_TO_ADDR
12591: GO 12613
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12593: LD_ADDR_VAR 0 10
12597: PUSH
12598: LD_VAR 0 8
12602: PPUSH
12603: LD_VAR 0 1
12607: PPUSH
12608: CALL_OW 74
12612: ST_TO_ADDR
// if not enemy then
12613: LD_VAR 0 10
12617: NOT
12618: IFFALSE 12622
// exit ;
12620: GO 13029
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12622: LD_VAR 0 11
12626: IFFALSE 12648
12628: PUSH
12629: LD_VAR 0 11
12633: PPUSH
12634: LD_VAR 0 10
12638: PPUSH
12639: CALL_OW 296
12643: PUSH
12644: LD_INT 13
12646: GREATER
12647: AND
12648: IFTRUE 12670
12650: PUSH
12651: LD_VAR 0 1
12655: PPUSH
12656: LD_VAR 0 10
12660: PPUSH
12661: CALL_OW 296
12665: PUSH
12666: LD_INT 12
12668: GREATER
12669: OR
12670: IFFALSE 12674
// exit ;
12672: GO 13029
// missile := [ 1 ] ;
12674: LD_ADDR_VAR 0 14
12678: PUSH
12679: LD_INT 1
12681: PUSH
12682: EMPTY
12683: LIST
12684: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12685: LD_VAR 0 9
12689: PPUSH
12690: LD_VAR 0 12
12694: PPUSH
12695: CALL_OW 325
12699: IFFALSE 12728
// missile := Replace ( missile , missile + 1 , 2 ) ;
12701: LD_ADDR_VAR 0 14
12705: PUSH
12706: LD_VAR 0 14
12710: PPUSH
12711: LD_VAR 0 14
12715: PUSH
12716: LD_INT 1
12718: PLUS
12719: PPUSH
12720: LD_INT 2
12722: PPUSH
12723: CALL_OW 1
12727: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12728: LD_VAR 0 9
12732: PPUSH
12733: LD_VAR 0 13
12737: PPUSH
12738: CALL_OW 325
12742: IFFALSE 12766
12744: PUSH
12745: LD_VAR 0 10
12749: PPUSH
12750: CALL_OW 255
12754: PPUSH
12755: LD_VAR 0 13
12759: PPUSH
12760: CALL_OW 325
12764: NOT
12765: AND
12766: IFFALSE 12795
// missile := Replace ( missile , missile + 1 , 3 ) ;
12768: LD_ADDR_VAR 0 14
12772: PUSH
12773: LD_VAR 0 14
12777: PPUSH
12778: LD_VAR 0 14
12782: PUSH
12783: LD_INT 1
12785: PLUS
12786: PPUSH
12787: LD_INT 3
12789: PPUSH
12790: CALL_OW 1
12794: ST_TO_ADDR
// if missile < 2 then
12795: LD_VAR 0 14
12799: PUSH
12800: LD_INT 2
12802: LESS
12803: IFFALSE 12807
// exit ;
12805: GO 13029
// x := GetX ( enemy ) ;
12807: LD_ADDR_VAR 0 4
12811: PUSH
12812: LD_VAR 0 10
12816: PPUSH
12817: CALL_OW 250
12821: ST_TO_ADDR
// y := GetY ( enemy ) ;
12822: LD_ADDR_VAR 0 5
12826: PUSH
12827: LD_VAR 0 10
12831: PPUSH
12832: CALL_OW 251
12836: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12837: LD_ADDR_VAR 0 6
12841: PUSH
12842: LD_VAR 0 4
12846: PUSH
12847: LD_INT 1
12849: NEG
12850: PPUSH
12851: LD_INT 1
12853: PPUSH
12854: CALL_OW 12
12858: PLUS
12859: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12860: LD_ADDR_VAR 0 7
12864: PUSH
12865: LD_VAR 0 5
12869: PUSH
12870: LD_INT 1
12872: NEG
12873: PPUSH
12874: LD_INT 1
12876: PPUSH
12877: CALL_OW 12
12881: PLUS
12882: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12883: LD_VAR 0 6
12887: PPUSH
12888: LD_VAR 0 7
12892: PPUSH
12893: CALL_OW 488
12897: NOT
12898: IFFALSE 12920
// begin _x := x ;
12900: LD_ADDR_VAR 0 6
12904: PUSH
12905: LD_VAR 0 4
12909: ST_TO_ADDR
// _y := y ;
12910: LD_ADDR_VAR 0 7
12914: PUSH
12915: LD_VAR 0 5
12919: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12920: LD_ADDR_VAR 0 3
12924: PUSH
12925: LD_INT 1
12927: PPUSH
12928: LD_VAR 0 14
12932: PPUSH
12933: CALL_OW 12
12937: ST_TO_ADDR
// case i of 1 :
12938: LD_VAR 0 3
12942: PUSH
12943: LD_INT 1
12945: DOUBLE
12946: EQUAL
12947: IFTRUE 12951
12949: GO 12968
12951: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12952: LD_VAR 0 1
12956: PPUSH
12957: LD_VAR 0 10
12961: PPUSH
12962: CALL_OW 115
12966: GO 13029
12968: LD_INT 2
12970: DOUBLE
12971: EQUAL
12972: IFTRUE 12976
12974: GO 12998
12976: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12977: LD_VAR 0 1
12981: PPUSH
12982: LD_VAR 0 6
12986: PPUSH
12987: LD_VAR 0 7
12991: PPUSH
12992: CALL_OW 153
12996: GO 13029
12998: LD_INT 3
13000: DOUBLE
13001: EQUAL
13002: IFTRUE 13006
13004: GO 13028
13006: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
13007: LD_VAR 0 1
13011: PPUSH
13012: LD_VAR 0 6
13016: PPUSH
13017: LD_VAR 0 7
13021: PPUSH
13022: CALL_OW 154
13026: GO 13029
13028: POP
// end ;
13029: LD_VAR 0 2
13033: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
13034: LD_INT 0
13036: PPUSH
13037: PPUSH
13038: PPUSH
13039: PPUSH
13040: PPUSH
13041: PPUSH
// if not unit or not building then
13042: LD_VAR 0 1
13046: NOT
13047: IFTRUE 13056
13049: PUSH
13050: LD_VAR 0 2
13054: NOT
13055: OR
13056: IFFALSE 13060
// exit ;
13058: GO 13218
// x := GetX ( building ) ;
13060: LD_ADDR_VAR 0 5
13064: PUSH
13065: LD_VAR 0 2
13069: PPUSH
13070: CALL_OW 250
13074: ST_TO_ADDR
// y := GetY ( building ) ;
13075: LD_ADDR_VAR 0 6
13079: PUSH
13080: LD_VAR 0 2
13084: PPUSH
13085: CALL_OW 251
13089: ST_TO_ADDR
// for i := 0 to 5 do
13090: LD_ADDR_VAR 0 4
13094: PUSH
13095: DOUBLE
13096: LD_INT 0
13098: DEC
13099: ST_TO_ADDR
13100: LD_INT 5
13102: PUSH
13103: FOR_TO
13104: IFFALSE 13216
// begin _x := ShiftX ( x , i , 3 ) ;
13106: LD_ADDR_VAR 0 7
13110: PUSH
13111: LD_VAR 0 5
13115: PPUSH
13116: LD_VAR 0 4
13120: PPUSH
13121: LD_INT 3
13123: PPUSH
13124: CALL_OW 272
13128: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13129: LD_ADDR_VAR 0 8
13133: PUSH
13134: LD_VAR 0 6
13138: PPUSH
13139: LD_VAR 0 4
13143: PPUSH
13144: LD_INT 3
13146: PPUSH
13147: CALL_OW 273
13151: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13152: LD_VAR 0 7
13156: PPUSH
13157: LD_VAR 0 8
13161: PPUSH
13162: CALL_OW 488
13166: NOT
13167: IFFALSE 13171
// continue ;
13169: GO 13103
// if HexInfo ( _x , _y ) = 0 then
13171: LD_VAR 0 7
13175: PPUSH
13176: LD_VAR 0 8
13180: PPUSH
13181: CALL_OW 428
13185: PUSH
13186: LD_INT 0
13188: EQUAL
13189: IFFALSE 13214
// begin ComMoveXY ( unit , _x , _y ) ;
13191: LD_VAR 0 1
13195: PPUSH
13196: LD_VAR 0 7
13200: PPUSH
13201: LD_VAR 0 8
13205: PPUSH
13206: CALL_OW 111
// exit ;
13210: POP
13211: POP
13212: GO 13218
// end ; end ;
13214: GO 13103
13216: POP
13217: POP
// end ;
13218: LD_VAR 0 3
13222: RET
// export function ScanBase ( side , base_area ) ; begin
13223: LD_INT 0
13225: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
13226: LD_ADDR_VAR 0 3
13230: PUSH
13231: LD_VAR 0 2
13235: PPUSH
13236: LD_INT 81
13238: PUSH
13239: LD_VAR 0 1
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PPUSH
13248: CALL_OW 70
13252: ST_TO_ADDR
// end ;
13253: LD_VAR 0 3
13257: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
13258: LD_INT 0
13260: PPUSH
13261: PPUSH
13262: PPUSH
13263: PPUSH
// result := false ;
13264: LD_ADDR_VAR 0 2
13268: PUSH
13269: LD_INT 0
13271: ST_TO_ADDR
// side := GetSide ( unit ) ;
13272: LD_ADDR_VAR 0 3
13276: PUSH
13277: LD_VAR 0 1
13281: PPUSH
13282: CALL_OW 255
13286: ST_TO_ADDR
// nat := GetNation ( unit ) ;
13287: LD_ADDR_VAR 0 4
13291: PUSH
13292: LD_VAR 0 1
13296: PPUSH
13297: CALL_OW 248
13301: ST_TO_ADDR
// case nat of 1 :
13302: LD_VAR 0 4
13306: PUSH
13307: LD_INT 1
13309: DOUBLE
13310: EQUAL
13311: IFTRUE 13315
13313: GO 13326
13315: POP
// tech := tech_lassight ; 2 :
13316: LD_ADDR_VAR 0 5
13320: PUSH
13321: LD_INT 12
13323: ST_TO_ADDR
13324: GO 13365
13326: LD_INT 2
13328: DOUBLE
13329: EQUAL
13330: IFTRUE 13334
13332: GO 13345
13334: POP
// tech := tech_mortar ; 3 :
13335: LD_ADDR_VAR 0 5
13339: PUSH
13340: LD_INT 41
13342: ST_TO_ADDR
13343: GO 13365
13345: LD_INT 3
13347: DOUBLE
13348: EQUAL
13349: IFTRUE 13353
13351: GO 13364
13353: POP
// tech := tech_bazooka ; end ;
13354: LD_ADDR_VAR 0 5
13358: PUSH
13359: LD_INT 44
13361: ST_TO_ADDR
13362: GO 13365
13364: POP
// if Researched ( side , tech ) then
13365: LD_VAR 0 3
13369: PPUSH
13370: LD_VAR 0 5
13374: PPUSH
13375: CALL_OW 325
13379: IFFALSE 13406
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13381: LD_ADDR_VAR 0 2
13385: PUSH
13386: LD_INT 5
13388: PUSH
13389: LD_INT 8
13391: PUSH
13392: LD_INT 9
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: LIST
13399: PUSH
13400: LD_VAR 0 4
13404: ARRAY
13405: ST_TO_ADDR
// end ;
13406: LD_VAR 0 2
13410: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13411: LD_INT 0
13413: PPUSH
13414: PPUSH
13415: PPUSH
// if not mines then
13416: LD_VAR 0 2
13420: NOT
13421: IFFALSE 13425
// exit ;
13423: GO 13569
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13425: LD_ADDR_VAR 0 5
13429: PUSH
13430: LD_INT 81
13432: PUSH
13433: LD_VAR 0 1
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: LD_INT 3
13444: PUSH
13445: LD_INT 21
13447: PUSH
13448: LD_INT 3
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PPUSH
13463: CALL_OW 69
13467: ST_TO_ADDR
// for i in mines do
13468: LD_ADDR_VAR 0 4
13472: PUSH
13473: LD_VAR 0 2
13477: PUSH
13478: FOR_IN
13479: IFFALSE 13567
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13481: LD_VAR 0 4
13485: PUSH
13486: LD_INT 1
13488: ARRAY
13489: PPUSH
13490: LD_VAR 0 4
13494: PUSH
13495: LD_INT 2
13497: ARRAY
13498: PPUSH
13499: CALL_OW 458
13503: NOT
13504: IFFALSE 13508
// continue ;
13506: GO 13478
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13508: LD_VAR 0 4
13512: PUSH
13513: LD_INT 1
13515: ARRAY
13516: PPUSH
13517: LD_VAR 0 4
13521: PUSH
13522: LD_INT 2
13524: ARRAY
13525: PPUSH
13526: CALL_OW 428
13530: PUSH
13531: LD_VAR 0 5
13535: IN
13536: IFFALSE 13565
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13538: LD_VAR 0 4
13542: PUSH
13543: LD_INT 1
13545: ARRAY
13546: PPUSH
13547: LD_VAR 0 4
13551: PUSH
13552: LD_INT 2
13554: ARRAY
13555: PPUSH
13556: LD_VAR 0 1
13560: PPUSH
13561: CALL_OW 456
// end ;
13565: GO 13478
13567: POP
13568: POP
// end ;
13569: LD_VAR 0 3
13573: RET
// export function Count ( array ) ; begin
13574: LD_INT 0
13576: PPUSH
// result := array + 0 ;
13577: LD_ADDR_VAR 0 2
13581: PUSH
13582: LD_VAR 0 1
13586: PUSH
13587: LD_INT 0
13589: PLUS
13590: ST_TO_ADDR
// end ;
13591: LD_VAR 0 2
13595: RET
// export function IsEmpty ( building ) ; begin
13596: LD_INT 0
13598: PPUSH
// if not building then
13599: LD_VAR 0 1
13603: NOT
13604: IFFALSE 13608
// exit ;
13606: GO 13651
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13608: LD_ADDR_VAR 0 2
13612: PUSH
13613: LD_VAR 0 1
13617: PUSH
13618: LD_INT 22
13620: PUSH
13621: LD_VAR 0 1
13625: PPUSH
13626: CALL_OW 255
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: LD_INT 58
13637: PUSH
13638: EMPTY
13639: LIST
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PPUSH
13645: CALL_OW 69
13649: IN
13650: ST_TO_ADDR
// end ;
13651: LD_VAR 0 2
13655: RET
// export function IsNotFull ( building ) ; var places ; begin
13656: LD_INT 0
13658: PPUSH
13659: PPUSH
// if not building then
13660: LD_VAR 0 1
13664: NOT
13665: IFFALSE 13669
// exit ;
13667: GO 13697
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
13669: LD_ADDR_VAR 0 2
13673: PUSH
13674: LD_VAR 0 1
13678: PPUSH
13679: LD_INT 3
13681: PUSH
13682: LD_INT 62
13684: PUSH
13685: EMPTY
13686: LIST
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PPUSH
13692: CALL_OW 72
13696: ST_TO_ADDR
// end ;
13697: LD_VAR 0 2
13701: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13702: LD_INT 0
13704: PPUSH
13705: PPUSH
13706: PPUSH
13707: PPUSH
// tmp := [ ] ;
13708: LD_ADDR_VAR 0 3
13712: PUSH
13713: EMPTY
13714: ST_TO_ADDR
// list := [ ] ;
13715: LD_ADDR_VAR 0 5
13719: PUSH
13720: EMPTY
13721: ST_TO_ADDR
// for i = 16 to 25 do
13722: LD_ADDR_VAR 0 4
13726: PUSH
13727: DOUBLE
13728: LD_INT 16
13730: DEC
13731: ST_TO_ADDR
13732: LD_INT 25
13734: PUSH
13735: FOR_TO
13736: IFFALSE 13809
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13738: LD_ADDR_VAR 0 3
13742: PUSH
13743: LD_VAR 0 3
13747: PUSH
13748: LD_INT 22
13750: PUSH
13751: LD_VAR 0 1
13755: PPUSH
13756: CALL_OW 255
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 91
13767: PUSH
13768: LD_VAR 0 1
13772: PUSH
13773: LD_INT 6
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: LIST
13780: PUSH
13781: LD_INT 30
13783: PUSH
13784: LD_VAR 0 4
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: PUSH
13798: EMPTY
13799: LIST
13800: PPUSH
13801: CALL_OW 69
13805: ADD
13806: ST_TO_ADDR
13807: GO 13735
13809: POP
13810: POP
// for i = 1 to tmp do
13811: LD_ADDR_VAR 0 4
13815: PUSH
13816: DOUBLE
13817: LD_INT 1
13819: DEC
13820: ST_TO_ADDR
13821: LD_VAR 0 3
13825: PUSH
13826: FOR_TO
13827: IFFALSE 13915
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13829: LD_ADDR_VAR 0 5
13833: PUSH
13834: LD_VAR 0 5
13838: PUSH
13839: LD_VAR 0 3
13843: PUSH
13844: LD_VAR 0 4
13848: ARRAY
13849: PPUSH
13850: CALL_OW 266
13854: PUSH
13855: LD_VAR 0 3
13859: PUSH
13860: LD_VAR 0 4
13864: ARRAY
13865: PPUSH
13866: CALL_OW 250
13870: PUSH
13871: LD_VAR 0 3
13875: PUSH
13876: LD_VAR 0 4
13880: ARRAY
13881: PPUSH
13882: CALL_OW 251
13886: PUSH
13887: LD_VAR 0 3
13891: PUSH
13892: LD_VAR 0 4
13896: ARRAY
13897: PPUSH
13898: CALL_OW 254
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: PUSH
13909: EMPTY
13910: LIST
13911: ADD
13912: ST_TO_ADDR
13913: GO 13826
13915: POP
13916: POP
// result := list ;
13917: LD_ADDR_VAR 0 2
13921: PUSH
13922: LD_VAR 0 5
13926: ST_TO_ADDR
// end ;
13927: LD_VAR 0 2
13931: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13932: LD_INT 0
13934: PPUSH
13935: PPUSH
13936: PPUSH
13937: PPUSH
13938: PPUSH
13939: PPUSH
13940: PPUSH
// if not factory then
13941: LD_VAR 0 1
13945: NOT
13946: IFFALSE 13950
// exit ;
13948: GO 14553
// if control = control_apeman then
13950: LD_VAR 0 4
13954: PUSH
13955: LD_INT 5
13957: EQUAL
13958: IFFALSE 14067
// begin tmp := UnitsInside ( factory ) ;
13960: LD_ADDR_VAR 0 8
13964: PUSH
13965: LD_VAR 0 1
13969: PPUSH
13970: CALL_OW 313
13974: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13975: LD_VAR 0 8
13979: PPUSH
13980: LD_INT 25
13982: PUSH
13983: LD_INT 12
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PPUSH
13990: CALL_OW 72
13994: NOT
13995: IFFALSE 14005
// control := control_manual ;
13997: LD_ADDR_VAR 0 4
14001: PUSH
14002: LD_INT 1
14004: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
14005: LD_ADDR_VAR 0 8
14009: PUSH
14010: LD_VAR 0 1
14014: PPUSH
14015: CALL 13702 0 1
14019: ST_TO_ADDR
// if tmp then
14020: LD_VAR 0 8
14024: IFFALSE 14067
// begin for i in tmp do
14026: LD_ADDR_VAR 0 7
14030: PUSH
14031: LD_VAR 0 8
14035: PUSH
14036: FOR_IN
14037: IFFALSE 14065
// if i [ 1 ] = b_ext_radio then
14039: LD_VAR 0 7
14043: PUSH
14044: LD_INT 1
14046: ARRAY
14047: PUSH
14048: LD_INT 22
14050: EQUAL
14051: IFFALSE 14063
// begin control := control_remote ;
14053: LD_ADDR_VAR 0 4
14057: PUSH
14058: LD_INT 2
14060: ST_TO_ADDR
// break ;
14061: GO 14065
// end ;
14063: GO 14036
14065: POP
14066: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14067: LD_VAR 0 1
14071: PPUSH
14072: LD_VAR 0 2
14076: PPUSH
14077: LD_VAR 0 3
14081: PPUSH
14082: LD_VAR 0 4
14086: PPUSH
14087: LD_VAR 0 5
14091: PPUSH
14092: CALL_OW 448
14096: IFFALSE 14131
// begin result := [ chassis , engine , control , weapon ] ;
14098: LD_ADDR_VAR 0 6
14102: PUSH
14103: LD_VAR 0 2
14107: PUSH
14108: LD_VAR 0 3
14112: PUSH
14113: LD_VAR 0 4
14117: PUSH
14118: LD_VAR 0 5
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: ST_TO_ADDR
// exit ;
14129: GO 14553
// end ; _chassis := AvailableChassisList ( factory ) ;
14131: LD_ADDR_VAR 0 9
14135: PUSH
14136: LD_VAR 0 1
14140: PPUSH
14141: CALL_OW 475
14145: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
14146: LD_ADDR_VAR 0 11
14150: PUSH
14151: LD_VAR 0 1
14155: PPUSH
14156: CALL_OW 476
14160: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
14161: LD_ADDR_VAR 0 12
14165: PUSH
14166: LD_VAR 0 1
14170: PPUSH
14171: CALL_OW 477
14175: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
14176: LD_ADDR_VAR 0 10
14180: PUSH
14181: LD_VAR 0 1
14185: PPUSH
14186: CALL_OW 478
14190: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
14191: LD_VAR 0 9
14195: NOT
14196: IFTRUE 14205
14198: PUSH
14199: LD_VAR 0 11
14203: NOT
14204: OR
14205: IFTRUE 14214
14207: PUSH
14208: LD_VAR 0 12
14212: NOT
14213: OR
14214: IFTRUE 14223
14216: PUSH
14217: LD_VAR 0 10
14221: NOT
14222: OR
14223: IFFALSE 14258
// begin result := [ chassis , engine , control , weapon ] ;
14225: LD_ADDR_VAR 0 6
14229: PUSH
14230: LD_VAR 0 2
14234: PUSH
14235: LD_VAR 0 3
14239: PUSH
14240: LD_VAR 0 4
14244: PUSH
14245: LD_VAR 0 5
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: ST_TO_ADDR
// exit ;
14256: GO 14553
// end ; if not chassis in _chassis then
14258: LD_VAR 0 2
14262: PUSH
14263: LD_VAR 0 9
14267: IN
14268: NOT
14269: IFFALSE 14295
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
14271: LD_ADDR_VAR 0 2
14275: PUSH
14276: LD_VAR 0 9
14280: PUSH
14281: LD_INT 1
14283: PPUSH
14284: LD_VAR 0 9
14288: PPUSH
14289: CALL_OW 12
14293: ARRAY
14294: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14295: LD_VAR 0 2
14299: PPUSH
14300: LD_VAR 0 3
14304: PPUSH
14305: CALL 14558 0 2
14309: NOT
14310: IFFALSE 14371
// repeat engine := _engine [ 1 ] ;
14312: LD_ADDR_VAR 0 3
14316: PUSH
14317: LD_VAR 0 11
14321: PUSH
14322: LD_INT 1
14324: ARRAY
14325: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14326: LD_ADDR_VAR 0 11
14330: PUSH
14331: LD_VAR 0 11
14335: PPUSH
14336: LD_INT 1
14338: PPUSH
14339: CALL_OW 3
14343: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14344: LD_VAR 0 2
14348: PPUSH
14349: LD_VAR 0 3
14353: PPUSH
14354: CALL 14558 0 2
14358: IFTRUE 14369
14360: PUSH
14361: LD_VAR 0 11
14365: PUSH
14366: EMPTY
14367: EQUAL
14368: OR
14369: IFFALSE 14312
// if not control in _control then
14371: LD_VAR 0 4
14375: PUSH
14376: LD_VAR 0 12
14380: IN
14381: NOT
14382: IFFALSE 14408
// control := _control [ rand ( 1 , _control ) ] ;
14384: LD_ADDR_VAR 0 4
14388: PUSH
14389: LD_VAR 0 12
14393: PUSH
14394: LD_INT 1
14396: PPUSH
14397: LD_VAR 0 12
14401: PPUSH
14402: CALL_OW 12
14406: ARRAY
14407: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14408: LD_VAR 0 2
14412: PPUSH
14413: LD_VAR 0 5
14417: PPUSH
14418: CALL 14780 0 2
14422: NOT
14423: IFFALSE 14484
// repeat weapon := _weapon [ 1 ] ;
14425: LD_ADDR_VAR 0 5
14429: PUSH
14430: LD_VAR 0 10
14434: PUSH
14435: LD_INT 1
14437: ARRAY
14438: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14439: LD_ADDR_VAR 0 10
14443: PUSH
14444: LD_VAR 0 10
14448: PPUSH
14449: LD_INT 1
14451: PPUSH
14452: CALL_OW 3
14456: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14457: LD_VAR 0 2
14461: PPUSH
14462: LD_VAR 0 5
14466: PPUSH
14467: CALL 14780 0 2
14471: IFTRUE 14482
14473: PUSH
14474: LD_VAR 0 10
14478: PUSH
14479: EMPTY
14480: EQUAL
14481: OR
14482: IFFALSE 14425
// result := [ ] ;
14484: LD_ADDR_VAR 0 6
14488: PUSH
14489: EMPTY
14490: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14491: LD_VAR 0 1
14495: PPUSH
14496: LD_VAR 0 2
14500: PPUSH
14501: LD_VAR 0 3
14505: PPUSH
14506: LD_VAR 0 4
14510: PPUSH
14511: LD_VAR 0 5
14515: PPUSH
14516: CALL_OW 448
14520: IFFALSE 14553
// result := [ chassis , engine , control , weapon ] ;
14522: LD_ADDR_VAR 0 6
14526: PUSH
14527: LD_VAR 0 2
14531: PUSH
14532: LD_VAR 0 3
14536: PUSH
14537: LD_VAR 0 4
14541: PUSH
14542: LD_VAR 0 5
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: ST_TO_ADDR
// end ;
14553: LD_VAR 0 6
14557: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14558: LD_INT 0
14560: PPUSH
// if not chassis or not engine then
14561: LD_VAR 0 1
14565: NOT
14566: IFTRUE 14575
14568: PUSH
14569: LD_VAR 0 2
14573: NOT
14574: OR
14575: IFFALSE 14579
// exit ;
14577: GO 14775
// case engine of engine_solar :
14579: LD_VAR 0 2
14583: PUSH
14584: LD_INT 2
14586: DOUBLE
14587: EQUAL
14588: IFTRUE 14592
14590: GO 14630
14592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14593: LD_ADDR_VAR 0 3
14597: PUSH
14598: LD_INT 11
14600: PUSH
14601: LD_INT 12
14603: PUSH
14604: LD_INT 13
14606: PUSH
14607: LD_INT 14
14609: PUSH
14610: LD_INT 1
14612: PUSH
14613: LD_INT 2
14615: PUSH
14616: LD_INT 3
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: ST_TO_ADDR
14628: GO 14759
14630: LD_INT 1
14632: DOUBLE
14633: EQUAL
14634: IFTRUE 14638
14636: GO 14700
14638: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14639: LD_ADDR_VAR 0 3
14643: PUSH
14644: LD_INT 11
14646: PUSH
14647: LD_INT 12
14649: PUSH
14650: LD_INT 13
14652: PUSH
14653: LD_INT 14
14655: PUSH
14656: LD_INT 1
14658: PUSH
14659: LD_INT 2
14661: PUSH
14662: LD_INT 3
14664: PUSH
14665: LD_INT 4
14667: PUSH
14668: LD_INT 5
14670: PUSH
14671: LD_INT 21
14673: PUSH
14674: LD_INT 23
14676: PUSH
14677: LD_INT 22
14679: PUSH
14680: LD_INT 24
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: ST_TO_ADDR
14698: GO 14759
14700: LD_INT 3
14702: DOUBLE
14703: EQUAL
14704: IFTRUE 14708
14706: GO 14758
14708: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14709: LD_ADDR_VAR 0 3
14713: PUSH
14714: LD_INT 13
14716: PUSH
14717: LD_INT 14
14719: PUSH
14720: LD_INT 2
14722: PUSH
14723: LD_INT 3
14725: PUSH
14726: LD_INT 4
14728: PUSH
14729: LD_INT 5
14731: PUSH
14732: LD_INT 21
14734: PUSH
14735: LD_INT 22
14737: PUSH
14738: LD_INT 23
14740: PUSH
14741: LD_INT 24
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: ST_TO_ADDR
14756: GO 14759
14758: POP
// result := ( chassis in result ) ;
14759: LD_ADDR_VAR 0 3
14763: PUSH
14764: LD_VAR 0 1
14768: PUSH
14769: LD_VAR 0 3
14773: IN
14774: ST_TO_ADDR
// end ;
14775: LD_VAR 0 3
14779: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14780: LD_INT 0
14782: PPUSH
// if not chassis or not weapon then
14783: LD_VAR 0 1
14787: NOT
14788: IFTRUE 14797
14790: PUSH
14791: LD_VAR 0 2
14795: NOT
14796: OR
14797: IFFALSE 14801
// exit ;
14799: GO 15895
// case weapon of us_machine_gun :
14801: LD_VAR 0 2
14805: PUSH
14806: LD_INT 2
14808: DOUBLE
14809: EQUAL
14810: IFTRUE 14814
14812: GO 14844
14814: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14815: LD_ADDR_VAR 0 3
14819: PUSH
14820: LD_INT 1
14822: PUSH
14823: LD_INT 2
14825: PUSH
14826: LD_INT 3
14828: PUSH
14829: LD_INT 4
14831: PUSH
14832: LD_INT 5
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: ST_TO_ADDR
14842: GO 15879
14844: LD_INT 3
14846: DOUBLE
14847: EQUAL
14848: IFTRUE 14852
14850: GO 14882
14852: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14853: LD_ADDR_VAR 0 3
14857: PUSH
14858: LD_INT 1
14860: PUSH
14861: LD_INT 2
14863: PUSH
14864: LD_INT 3
14866: PUSH
14867: LD_INT 4
14869: PUSH
14870: LD_INT 5
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: ST_TO_ADDR
14880: GO 15879
14882: LD_INT 11
14884: DOUBLE
14885: EQUAL
14886: IFTRUE 14890
14888: GO 14920
14890: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14891: LD_ADDR_VAR 0 3
14895: PUSH
14896: LD_INT 1
14898: PUSH
14899: LD_INT 2
14901: PUSH
14902: LD_INT 3
14904: PUSH
14905: LD_INT 4
14907: PUSH
14908: LD_INT 5
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: ST_TO_ADDR
14918: GO 15879
14920: LD_INT 4
14922: DOUBLE
14923: EQUAL
14924: IFTRUE 14928
14926: GO 14954
14928: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14929: LD_ADDR_VAR 0 3
14933: PUSH
14934: LD_INT 2
14936: PUSH
14937: LD_INT 3
14939: PUSH
14940: LD_INT 4
14942: PUSH
14943: LD_INT 5
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: ST_TO_ADDR
14952: GO 15879
14954: LD_INT 5
14956: DOUBLE
14957: EQUAL
14958: IFTRUE 14962
14960: GO 14988
14962: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14963: LD_ADDR_VAR 0 3
14967: PUSH
14968: LD_INT 2
14970: PUSH
14971: LD_INT 3
14973: PUSH
14974: LD_INT 4
14976: PUSH
14977: LD_INT 5
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: ST_TO_ADDR
14986: GO 15879
14988: LD_INT 9
14990: DOUBLE
14991: EQUAL
14992: IFTRUE 14996
14994: GO 15022
14996: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14997: LD_ADDR_VAR 0 3
15001: PUSH
15002: LD_INT 2
15004: PUSH
15005: LD_INT 3
15007: PUSH
15008: LD_INT 4
15010: PUSH
15011: LD_INT 5
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: ST_TO_ADDR
15020: GO 15879
15022: LD_INT 7
15024: DOUBLE
15025: EQUAL
15026: IFTRUE 15030
15028: GO 15056
15030: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
15031: LD_ADDR_VAR 0 3
15035: PUSH
15036: LD_INT 2
15038: PUSH
15039: LD_INT 3
15041: PUSH
15042: LD_INT 4
15044: PUSH
15045: LD_INT 5
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: ST_TO_ADDR
15054: GO 15879
15056: LD_INT 12
15058: DOUBLE
15059: EQUAL
15060: IFTRUE 15064
15062: GO 15090
15064: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
15065: LD_ADDR_VAR 0 3
15069: PUSH
15070: LD_INT 2
15072: PUSH
15073: LD_INT 3
15075: PUSH
15076: LD_INT 4
15078: PUSH
15079: LD_INT 5
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: ST_TO_ADDR
15088: GO 15879
15090: LD_INT 13
15092: DOUBLE
15093: EQUAL
15094: IFTRUE 15098
15096: GO 15124
15098: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15099: LD_ADDR_VAR 0 3
15103: PUSH
15104: LD_INT 2
15106: PUSH
15107: LD_INT 3
15109: PUSH
15110: LD_INT 4
15112: PUSH
15113: LD_INT 5
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: ST_TO_ADDR
15122: GO 15879
15124: LD_INT 14
15126: DOUBLE
15127: EQUAL
15128: IFTRUE 15132
15130: GO 15150
15132: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15133: LD_ADDR_VAR 0 3
15137: PUSH
15138: LD_INT 4
15140: PUSH
15141: LD_INT 5
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: ST_TO_ADDR
15148: GO 15879
15150: LD_INT 6
15152: DOUBLE
15153: EQUAL
15154: IFTRUE 15158
15156: GO 15176
15158: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
15159: LD_ADDR_VAR 0 3
15163: PUSH
15164: LD_INT 4
15166: PUSH
15167: LD_INT 5
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: ST_TO_ADDR
15174: GO 15879
15176: LD_INT 10
15178: DOUBLE
15179: EQUAL
15180: IFTRUE 15184
15182: GO 15202
15184: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
15185: LD_ADDR_VAR 0 3
15189: PUSH
15190: LD_INT 4
15192: PUSH
15193: LD_INT 5
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: ST_TO_ADDR
15200: GO 15879
15202: LD_INT 22
15204: DOUBLE
15205: EQUAL
15206: IFTRUE 15210
15208: GO 15236
15210: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
15211: LD_ADDR_VAR 0 3
15215: PUSH
15216: LD_INT 11
15218: PUSH
15219: LD_INT 12
15221: PUSH
15222: LD_INT 13
15224: PUSH
15225: LD_INT 14
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: ST_TO_ADDR
15234: GO 15879
15236: LD_INT 23
15238: DOUBLE
15239: EQUAL
15240: IFTRUE 15244
15242: GO 15270
15244: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
15245: LD_ADDR_VAR 0 3
15249: PUSH
15250: LD_INT 11
15252: PUSH
15253: LD_INT 12
15255: PUSH
15256: LD_INT 13
15258: PUSH
15259: LD_INT 14
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: ST_TO_ADDR
15268: GO 15879
15270: LD_INT 24
15272: DOUBLE
15273: EQUAL
15274: IFTRUE 15278
15276: GO 15304
15278: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
15279: LD_ADDR_VAR 0 3
15283: PUSH
15284: LD_INT 11
15286: PUSH
15287: LD_INT 12
15289: PUSH
15290: LD_INT 13
15292: PUSH
15293: LD_INT 14
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: ST_TO_ADDR
15302: GO 15879
15304: LD_INT 30
15306: DOUBLE
15307: EQUAL
15308: IFTRUE 15312
15310: GO 15338
15312: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15313: LD_ADDR_VAR 0 3
15317: PUSH
15318: LD_INT 11
15320: PUSH
15321: LD_INT 12
15323: PUSH
15324: LD_INT 13
15326: PUSH
15327: LD_INT 14
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: ST_TO_ADDR
15336: GO 15879
15338: LD_INT 25
15340: DOUBLE
15341: EQUAL
15342: IFTRUE 15346
15344: GO 15364
15346: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15347: LD_ADDR_VAR 0 3
15351: PUSH
15352: LD_INT 13
15354: PUSH
15355: LD_INT 14
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: ST_TO_ADDR
15362: GO 15879
15364: LD_INT 27
15366: DOUBLE
15367: EQUAL
15368: IFTRUE 15372
15370: GO 15390
15372: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
15373: LD_ADDR_VAR 0 3
15377: PUSH
15378: LD_INT 13
15380: PUSH
15381: LD_INT 14
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: ST_TO_ADDR
15388: GO 15879
15390: LD_INT 92
15392: DOUBLE
15393: EQUAL
15394: IFTRUE 15398
15396: GO 15424
15398: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15399: LD_ADDR_VAR 0 3
15403: PUSH
15404: LD_INT 11
15406: PUSH
15407: LD_INT 12
15409: PUSH
15410: LD_INT 13
15412: PUSH
15413: LD_INT 14
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: ST_TO_ADDR
15422: GO 15879
15424: LD_INT 28
15426: DOUBLE
15427: EQUAL
15428: IFTRUE 15432
15430: GO 15450
15432: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15433: LD_ADDR_VAR 0 3
15437: PUSH
15438: LD_INT 13
15440: PUSH
15441: LD_INT 14
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: ST_TO_ADDR
15448: GO 15879
15450: LD_INT 29
15452: DOUBLE
15453: EQUAL
15454: IFTRUE 15458
15456: GO 15476
15458: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15459: LD_ADDR_VAR 0 3
15463: PUSH
15464: LD_INT 13
15466: PUSH
15467: LD_INT 14
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: ST_TO_ADDR
15474: GO 15879
15476: LD_INT 31
15478: DOUBLE
15479: EQUAL
15480: IFTRUE 15484
15482: GO 15502
15484: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15485: LD_ADDR_VAR 0 3
15489: PUSH
15490: LD_INT 13
15492: PUSH
15493: LD_INT 14
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: ST_TO_ADDR
15500: GO 15879
15502: LD_INT 26
15504: DOUBLE
15505: EQUAL
15506: IFTRUE 15510
15508: GO 15528
15510: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15511: LD_ADDR_VAR 0 3
15515: PUSH
15516: LD_INT 13
15518: PUSH
15519: LD_INT 14
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: ST_TO_ADDR
15526: GO 15879
15528: LD_INT 42
15530: DOUBLE
15531: EQUAL
15532: IFTRUE 15536
15534: GO 15562
15536: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15537: LD_ADDR_VAR 0 3
15541: PUSH
15542: LD_INT 21
15544: PUSH
15545: LD_INT 22
15547: PUSH
15548: LD_INT 23
15550: PUSH
15551: LD_INT 24
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: ST_TO_ADDR
15560: GO 15879
15562: LD_INT 43
15564: DOUBLE
15565: EQUAL
15566: IFTRUE 15570
15568: GO 15596
15570: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15571: LD_ADDR_VAR 0 3
15575: PUSH
15576: LD_INT 21
15578: PUSH
15579: LD_INT 22
15581: PUSH
15582: LD_INT 23
15584: PUSH
15585: LD_INT 24
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: ST_TO_ADDR
15594: GO 15879
15596: LD_INT 44
15598: DOUBLE
15599: EQUAL
15600: IFTRUE 15604
15602: GO 15630
15604: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15605: LD_ADDR_VAR 0 3
15609: PUSH
15610: LD_INT 21
15612: PUSH
15613: LD_INT 22
15615: PUSH
15616: LD_INT 23
15618: PUSH
15619: LD_INT 24
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: ST_TO_ADDR
15628: GO 15879
15630: LD_INT 45
15632: DOUBLE
15633: EQUAL
15634: IFTRUE 15638
15636: GO 15664
15638: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15639: LD_ADDR_VAR 0 3
15643: PUSH
15644: LD_INT 21
15646: PUSH
15647: LD_INT 22
15649: PUSH
15650: LD_INT 23
15652: PUSH
15653: LD_INT 24
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: ST_TO_ADDR
15662: GO 15879
15664: LD_INT 49
15666: DOUBLE
15667: EQUAL
15668: IFTRUE 15672
15670: GO 15698
15672: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15673: LD_ADDR_VAR 0 3
15677: PUSH
15678: LD_INT 21
15680: PUSH
15681: LD_INT 22
15683: PUSH
15684: LD_INT 23
15686: PUSH
15687: LD_INT 24
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: ST_TO_ADDR
15696: GO 15879
15698: LD_INT 51
15700: DOUBLE
15701: EQUAL
15702: IFTRUE 15706
15704: GO 15732
15706: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15707: LD_ADDR_VAR 0 3
15711: PUSH
15712: LD_INT 21
15714: PUSH
15715: LD_INT 22
15717: PUSH
15718: LD_INT 23
15720: PUSH
15721: LD_INT 24
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: ST_TO_ADDR
15730: GO 15879
15732: LD_INT 52
15734: DOUBLE
15735: EQUAL
15736: IFTRUE 15740
15738: GO 15766
15740: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15741: LD_ADDR_VAR 0 3
15745: PUSH
15746: LD_INT 21
15748: PUSH
15749: LD_INT 22
15751: PUSH
15752: LD_INT 23
15754: PUSH
15755: LD_INT 24
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: ST_TO_ADDR
15764: GO 15879
15766: LD_INT 53
15768: DOUBLE
15769: EQUAL
15770: IFTRUE 15774
15772: GO 15792
15774: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15775: LD_ADDR_VAR 0 3
15779: PUSH
15780: LD_INT 23
15782: PUSH
15783: LD_INT 24
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: ST_TO_ADDR
15790: GO 15879
15792: LD_INT 46
15794: DOUBLE
15795: EQUAL
15796: IFTRUE 15800
15798: GO 15818
15800: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15801: LD_ADDR_VAR 0 3
15805: PUSH
15806: LD_INT 23
15808: PUSH
15809: LD_INT 24
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: ST_TO_ADDR
15816: GO 15879
15818: LD_INT 47
15820: DOUBLE
15821: EQUAL
15822: IFTRUE 15826
15824: GO 15844
15826: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15827: LD_ADDR_VAR 0 3
15831: PUSH
15832: LD_INT 23
15834: PUSH
15835: LD_INT 24
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: ST_TO_ADDR
15842: GO 15879
15844: LD_INT 98
15846: DOUBLE
15847: EQUAL
15848: IFTRUE 15852
15850: GO 15878
15852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15853: LD_ADDR_VAR 0 3
15857: PUSH
15858: LD_INT 21
15860: PUSH
15861: LD_INT 22
15863: PUSH
15864: LD_INT 23
15866: PUSH
15867: LD_INT 24
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: ST_TO_ADDR
15876: GO 15879
15878: POP
// result := ( chassis in result ) ;
15879: LD_ADDR_VAR 0 3
15883: PUSH
15884: LD_VAR 0 1
15888: PUSH
15889: LD_VAR 0 3
15893: IN
15894: ST_TO_ADDR
// end ;
15895: LD_VAR 0 3
15899: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15900: LD_INT 0
15902: PPUSH
15903: PPUSH
15904: PPUSH
15905: PPUSH
15906: PPUSH
15907: PPUSH
15908: PPUSH
// result := array ;
15909: LD_ADDR_VAR 0 5
15913: PUSH
15914: LD_VAR 0 1
15918: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15919: LD_VAR 0 1
15923: NOT
15924: IFTRUE 15933
15926: PUSH
15927: LD_VAR 0 2
15931: NOT
15932: OR
15933: IFTRUE 15942
15935: PUSH
15936: LD_VAR 0 3
15940: NOT
15941: OR
15942: IFTRUE 15956
15944: PUSH
15945: LD_VAR 0 2
15949: PUSH
15950: LD_VAR 0 1
15954: GREATER
15955: OR
15956: IFTRUE 15970
15958: PUSH
15959: LD_VAR 0 3
15963: PUSH
15964: LD_VAR 0 1
15968: GREATER
15969: OR
15970: IFFALSE 15974
// exit ;
15972: GO 16270
// if direction then
15974: LD_VAR 0 4
15978: IFFALSE 16042
// begin d := 1 ;
15980: LD_ADDR_VAR 0 9
15984: PUSH
15985: LD_INT 1
15987: ST_TO_ADDR
// if i_from > i_to then
15988: LD_VAR 0 2
15992: PUSH
15993: LD_VAR 0 3
15997: GREATER
15998: IFFALSE 16024
// length := ( array - i_from ) + i_to else
16000: LD_ADDR_VAR 0 11
16004: PUSH
16005: LD_VAR 0 1
16009: PUSH
16010: LD_VAR 0 2
16014: MINUS
16015: PUSH
16016: LD_VAR 0 3
16020: PLUS
16021: ST_TO_ADDR
16022: GO 16040
// length := i_to - i_from ;
16024: LD_ADDR_VAR 0 11
16028: PUSH
16029: LD_VAR 0 3
16033: PUSH
16034: LD_VAR 0 2
16038: MINUS
16039: ST_TO_ADDR
// end else
16040: GO 16103
// begin d := - 1 ;
16042: LD_ADDR_VAR 0 9
16046: PUSH
16047: LD_INT 1
16049: NEG
16050: ST_TO_ADDR
// if i_from > i_to then
16051: LD_VAR 0 2
16055: PUSH
16056: LD_VAR 0 3
16060: GREATER
16061: IFFALSE 16081
// length := i_from - i_to else
16063: LD_ADDR_VAR 0 11
16067: PUSH
16068: LD_VAR 0 2
16072: PUSH
16073: LD_VAR 0 3
16077: MINUS
16078: ST_TO_ADDR
16079: GO 16103
// length := ( array - i_to ) + i_from ;
16081: LD_ADDR_VAR 0 11
16085: PUSH
16086: LD_VAR 0 1
16090: PUSH
16091: LD_VAR 0 3
16095: MINUS
16096: PUSH
16097: LD_VAR 0 2
16101: PLUS
16102: ST_TO_ADDR
// end ; if not length then
16103: LD_VAR 0 11
16107: NOT
16108: IFFALSE 16112
// exit ;
16110: GO 16270
// tmp := array ;
16112: LD_ADDR_VAR 0 10
16116: PUSH
16117: LD_VAR 0 1
16121: ST_TO_ADDR
// for i = 1 to length do
16122: LD_ADDR_VAR 0 6
16126: PUSH
16127: DOUBLE
16128: LD_INT 1
16130: DEC
16131: ST_TO_ADDR
16132: LD_VAR 0 11
16136: PUSH
16137: FOR_TO
16138: IFFALSE 16258
// begin for j = 1 to array do
16140: LD_ADDR_VAR 0 7
16144: PUSH
16145: DOUBLE
16146: LD_INT 1
16148: DEC
16149: ST_TO_ADDR
16150: LD_VAR 0 1
16154: PUSH
16155: FOR_TO
16156: IFFALSE 16244
// begin k := j + d ;
16158: LD_ADDR_VAR 0 8
16162: PUSH
16163: LD_VAR 0 7
16167: PUSH
16168: LD_VAR 0 9
16172: PLUS
16173: ST_TO_ADDR
// if k > array then
16174: LD_VAR 0 8
16178: PUSH
16179: LD_VAR 0 1
16183: GREATER
16184: IFFALSE 16194
// k := 1 ;
16186: LD_ADDR_VAR 0 8
16190: PUSH
16191: LD_INT 1
16193: ST_TO_ADDR
// if not k then
16194: LD_VAR 0 8
16198: NOT
16199: IFFALSE 16211
// k := array ;
16201: LD_ADDR_VAR 0 8
16205: PUSH
16206: LD_VAR 0 1
16210: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16211: LD_ADDR_VAR 0 10
16215: PUSH
16216: LD_VAR 0 10
16220: PPUSH
16221: LD_VAR 0 8
16225: PPUSH
16226: LD_VAR 0 1
16230: PUSH
16231: LD_VAR 0 7
16235: ARRAY
16236: PPUSH
16237: CALL_OW 1
16241: ST_TO_ADDR
// end ;
16242: GO 16155
16244: POP
16245: POP
// array := tmp ;
16246: LD_ADDR_VAR 0 1
16250: PUSH
16251: LD_VAR 0 10
16255: ST_TO_ADDR
// end ;
16256: GO 16137
16258: POP
16259: POP
// result := array ;
16260: LD_ADDR_VAR 0 5
16264: PUSH
16265: LD_VAR 0 1
16269: ST_TO_ADDR
// end ;
16270: LD_VAR 0 5
16274: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
16275: LD_INT 0
16277: PPUSH
16278: PPUSH
// result := 0 ;
16279: LD_ADDR_VAR 0 3
16283: PUSH
16284: LD_INT 0
16286: ST_TO_ADDR
// if not array or not value in array then
16287: LD_VAR 0 1
16291: NOT
16292: IFTRUE 16307
16294: PUSH
16295: LD_VAR 0 2
16299: PUSH
16300: LD_VAR 0 1
16304: IN
16305: NOT
16306: OR
16307: IFFALSE 16311
// exit ;
16309: GO 16365
// for i = 1 to array do
16311: LD_ADDR_VAR 0 4
16315: PUSH
16316: DOUBLE
16317: LD_INT 1
16319: DEC
16320: ST_TO_ADDR
16321: LD_VAR 0 1
16325: PUSH
16326: FOR_TO
16327: IFFALSE 16363
// if value = array [ i ] then
16329: LD_VAR 0 2
16333: PUSH
16334: LD_VAR 0 1
16338: PUSH
16339: LD_VAR 0 4
16343: ARRAY
16344: EQUAL
16345: IFFALSE 16361
// begin result := i ;
16347: LD_ADDR_VAR 0 3
16351: PUSH
16352: LD_VAR 0 4
16356: ST_TO_ADDR
// exit ;
16357: POP
16358: POP
16359: GO 16365
// end ;
16361: GO 16326
16363: POP
16364: POP
// end ;
16365: LD_VAR 0 3
16369: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16370: LD_INT 0
16372: PPUSH
// vc_chassis := chassis ;
16373: LD_ADDR_OWVAR 37
16377: PUSH
16378: LD_VAR 0 1
16382: ST_TO_ADDR
// vc_engine := engine ;
16383: LD_ADDR_OWVAR 39
16387: PUSH
16388: LD_VAR 0 2
16392: ST_TO_ADDR
// vc_control := control ;
16393: LD_ADDR_OWVAR 38
16397: PUSH
16398: LD_VAR 0 3
16402: ST_TO_ADDR
// vc_weapon := weapon ;
16403: LD_ADDR_OWVAR 40
16407: PUSH
16408: LD_VAR 0 4
16412: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16413: LD_ADDR_OWVAR 41
16417: PUSH
16418: LD_VAR 0 5
16422: ST_TO_ADDR
// end ;
16423: LD_VAR 0 6
16427: RET
// export function WantPlant ( unit ) ; var task ; begin
16428: LD_INT 0
16430: PPUSH
16431: PPUSH
// result := false ;
16432: LD_ADDR_VAR 0 2
16436: PUSH
16437: LD_INT 0
16439: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16440: LD_ADDR_VAR 0 3
16444: PUSH
16445: LD_VAR 0 1
16449: PPUSH
16450: CALL_OW 437
16454: ST_TO_ADDR
// if task then
16455: LD_VAR 0 3
16459: IFFALSE 16487
// if task [ 1 ] [ 1 ] = p then
16461: LD_VAR 0 3
16465: PUSH
16466: LD_INT 1
16468: ARRAY
16469: PUSH
16470: LD_INT 1
16472: ARRAY
16473: PUSH
16474: LD_STRING p
16476: EQUAL
16477: IFFALSE 16487
// result := true ;
16479: LD_ADDR_VAR 0 2
16483: PUSH
16484: LD_INT 1
16486: ST_TO_ADDR
// end ;
16487: LD_VAR 0 2
16491: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16492: LD_INT 0
16494: PPUSH
16495: PPUSH
16496: PPUSH
16497: PPUSH
// if pos < 1 then
16498: LD_VAR 0 2
16502: PUSH
16503: LD_INT 1
16505: LESS
16506: IFFALSE 16510
// exit ;
16508: GO 16813
// if pos = 1 then
16510: LD_VAR 0 2
16514: PUSH
16515: LD_INT 1
16517: EQUAL
16518: IFFALSE 16551
// result := Replace ( arr , pos [ 1 ] , value ) else
16520: LD_ADDR_VAR 0 4
16524: PUSH
16525: LD_VAR 0 1
16529: PPUSH
16530: LD_VAR 0 2
16534: PUSH
16535: LD_INT 1
16537: ARRAY
16538: PPUSH
16539: LD_VAR 0 3
16543: PPUSH
16544: CALL_OW 1
16548: ST_TO_ADDR
16549: GO 16813
// begin tmp := arr ;
16551: LD_ADDR_VAR 0 6
16555: PUSH
16556: LD_VAR 0 1
16560: ST_TO_ADDR
// s_arr := [ tmp ] ;
16561: LD_ADDR_VAR 0 7
16565: PUSH
16566: LD_VAR 0 6
16570: PUSH
16571: EMPTY
16572: LIST
16573: ST_TO_ADDR
// for i = 1 to pos - 1 do
16574: LD_ADDR_VAR 0 5
16578: PUSH
16579: DOUBLE
16580: LD_INT 1
16582: DEC
16583: ST_TO_ADDR
16584: LD_VAR 0 2
16588: PUSH
16589: LD_INT 1
16591: MINUS
16592: PUSH
16593: FOR_TO
16594: IFFALSE 16639
// begin tmp := tmp [ pos [ i ] ] ;
16596: LD_ADDR_VAR 0 6
16600: PUSH
16601: LD_VAR 0 6
16605: PUSH
16606: LD_VAR 0 2
16610: PUSH
16611: LD_VAR 0 5
16615: ARRAY
16616: ARRAY
16617: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16618: LD_ADDR_VAR 0 7
16622: PUSH
16623: LD_VAR 0 7
16627: PUSH
16628: LD_VAR 0 6
16632: PUSH
16633: EMPTY
16634: LIST
16635: ADD
16636: ST_TO_ADDR
// end ;
16637: GO 16593
16639: POP
16640: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16641: LD_ADDR_VAR 0 6
16645: PUSH
16646: LD_VAR 0 6
16650: PPUSH
16651: LD_VAR 0 2
16655: PUSH
16656: LD_VAR 0 2
16660: ARRAY
16661: PPUSH
16662: LD_VAR 0 3
16666: PPUSH
16667: CALL_OW 1
16671: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16672: LD_ADDR_VAR 0 7
16676: PUSH
16677: LD_VAR 0 7
16681: PPUSH
16682: LD_VAR 0 7
16686: PPUSH
16687: LD_VAR 0 6
16691: PPUSH
16692: CALL_OW 1
16696: ST_TO_ADDR
// for i = s_arr downto 2 do
16697: LD_ADDR_VAR 0 5
16701: PUSH
16702: DOUBLE
16703: LD_VAR 0 7
16707: INC
16708: ST_TO_ADDR
16709: LD_INT 2
16711: PUSH
16712: FOR_DOWNTO
16713: IFFALSE 16797
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16715: LD_ADDR_VAR 0 6
16719: PUSH
16720: LD_VAR 0 7
16724: PUSH
16725: LD_VAR 0 5
16729: PUSH
16730: LD_INT 1
16732: MINUS
16733: ARRAY
16734: PPUSH
16735: LD_VAR 0 2
16739: PUSH
16740: LD_VAR 0 5
16744: PUSH
16745: LD_INT 1
16747: MINUS
16748: ARRAY
16749: PPUSH
16750: LD_VAR 0 7
16754: PUSH
16755: LD_VAR 0 5
16759: ARRAY
16760: PPUSH
16761: CALL_OW 1
16765: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16766: LD_ADDR_VAR 0 7
16770: PUSH
16771: LD_VAR 0 7
16775: PPUSH
16776: LD_VAR 0 5
16780: PUSH
16781: LD_INT 1
16783: MINUS
16784: PPUSH
16785: LD_VAR 0 6
16789: PPUSH
16790: CALL_OW 1
16794: ST_TO_ADDR
// end ;
16795: GO 16712
16797: POP
16798: POP
// result := s_arr [ 1 ] ;
16799: LD_ADDR_VAR 0 4
16803: PUSH
16804: LD_VAR 0 7
16808: PUSH
16809: LD_INT 1
16811: ARRAY
16812: ST_TO_ADDR
// end ; end ;
16813: LD_VAR 0 4
16817: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16818: LD_INT 0
16820: PPUSH
16821: PPUSH
// if not list then
16822: LD_VAR 0 1
16826: NOT
16827: IFFALSE 16831
// exit ;
16829: GO 16922
// i := list [ pos1 ] ;
16831: LD_ADDR_VAR 0 5
16835: PUSH
16836: LD_VAR 0 1
16840: PUSH
16841: LD_VAR 0 2
16845: ARRAY
16846: ST_TO_ADDR
// if not i then
16847: LD_VAR 0 5
16851: NOT
16852: IFFALSE 16856
// exit ;
16854: GO 16922
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16856: LD_ADDR_VAR 0 1
16860: PUSH
16861: LD_VAR 0 1
16865: PPUSH
16866: LD_VAR 0 2
16870: PPUSH
16871: LD_VAR 0 1
16875: PUSH
16876: LD_VAR 0 3
16880: ARRAY
16881: PPUSH
16882: CALL_OW 1
16886: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16887: LD_ADDR_VAR 0 1
16891: PUSH
16892: LD_VAR 0 1
16896: PPUSH
16897: LD_VAR 0 3
16901: PPUSH
16902: LD_VAR 0 5
16906: PPUSH
16907: CALL_OW 1
16911: ST_TO_ADDR
// result := list ;
16912: LD_ADDR_VAR 0 4
16916: PUSH
16917: LD_VAR 0 1
16921: ST_TO_ADDR
// end ;
16922: LD_VAR 0 4
16926: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16927: LD_INT 0
16929: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16930: LD_ADDR_VAR 0 5
16934: PUSH
16935: LD_VAR 0 1
16939: PPUSH
16940: CALL_OW 250
16944: PPUSH
16945: LD_VAR 0 1
16949: PPUSH
16950: CALL_OW 251
16954: PPUSH
16955: LD_VAR 0 2
16959: PPUSH
16960: LD_VAR 0 3
16964: PPUSH
16965: LD_VAR 0 4
16969: PPUSH
16970: CALL 17352 0 5
16974: ST_TO_ADDR
// end ;
16975: LD_VAR 0 5
16979: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16980: LD_INT 0
16982: PPUSH
16983: PPUSH
16984: PPUSH
16985: PPUSH
// if not list or not unit then
16986: LD_VAR 0 2
16990: NOT
16991: IFTRUE 17000
16993: PUSH
16994: LD_VAR 0 1
16998: NOT
16999: OR
17000: IFFALSE 17004
// exit ;
17002: GO 17347
// result := [ ] ;
17004: LD_ADDR_VAR 0 5
17008: PUSH
17009: EMPTY
17010: ST_TO_ADDR
// for i in list do
17011: LD_ADDR_VAR 0 6
17015: PUSH
17016: LD_VAR 0 2
17020: PUSH
17021: FOR_IN
17022: IFFALSE 17240
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
17024: LD_ADDR_VAR 0 8
17028: PUSH
17029: LD_VAR 0 1
17033: PPUSH
17034: LD_VAR 0 6
17038: PUSH
17039: LD_INT 1
17041: ARRAY
17042: PPUSH
17043: LD_VAR 0 6
17047: PUSH
17048: LD_INT 2
17050: ARRAY
17051: PPUSH
17052: CALL_OW 297
17056: ST_TO_ADDR
// if not Count ( result ) then
17057: LD_VAR 0 5
17061: PPUSH
17062: CALL 13574 0 1
17066: NOT
17067: IFFALSE 17100
// begin result := Join ( result , [ i , tmp ] ) ;
17069: LD_ADDR_VAR 0 5
17073: PUSH
17074: LD_VAR 0 5
17078: PPUSH
17079: LD_VAR 0 6
17083: PUSH
17084: LD_VAR 0 8
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PPUSH
17093: CALL 49550 0 2
17097: ST_TO_ADDR
// continue ;
17098: GO 17021
// end ; if result [ result ] [ 2 ] <= tmp then
17100: LD_VAR 0 5
17104: PUSH
17105: LD_VAR 0 5
17109: ARRAY
17110: PUSH
17111: LD_INT 2
17113: ARRAY
17114: PUSH
17115: LD_VAR 0 8
17119: LESSEQUAL
17120: IFFALSE 17153
// result := Join ( result , [ i , tmp ] ) else
17122: LD_ADDR_VAR 0 5
17126: PUSH
17127: LD_VAR 0 5
17131: PPUSH
17132: LD_VAR 0 6
17136: PUSH
17137: LD_VAR 0 8
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: PPUSH
17146: CALL 49550 0 2
17150: ST_TO_ADDR
17151: GO 17238
// begin for j := 1 to Count ( result ) do
17153: LD_ADDR_VAR 0 7
17157: PUSH
17158: DOUBLE
17159: LD_INT 1
17161: DEC
17162: ST_TO_ADDR
17163: LD_VAR 0 5
17167: PPUSH
17168: CALL 13574 0 1
17172: PUSH
17173: FOR_TO
17174: IFFALSE 17236
// begin if tmp < result [ j ] [ 2 ] then
17176: LD_VAR 0 8
17180: PUSH
17181: LD_VAR 0 5
17185: PUSH
17186: LD_VAR 0 7
17190: ARRAY
17191: PUSH
17192: LD_INT 2
17194: ARRAY
17195: LESS
17196: IFFALSE 17234
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17198: LD_ADDR_VAR 0 5
17202: PUSH
17203: LD_VAR 0 5
17207: PPUSH
17208: LD_VAR 0 7
17212: PPUSH
17213: LD_VAR 0 6
17217: PUSH
17218: LD_VAR 0 8
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PPUSH
17227: CALL_OW 2
17231: ST_TO_ADDR
// break ;
17232: GO 17236
// end ; end ;
17234: GO 17173
17236: POP
17237: POP
// end ; end ;
17238: GO 17021
17240: POP
17241: POP
// if result and not asc then
17242: LD_VAR 0 5
17246: IFFALSE 17255
17248: PUSH
17249: LD_VAR 0 3
17253: NOT
17254: AND
17255: IFFALSE 17272
// result := ReverseArray ( result ) ;
17257: LD_ADDR_VAR 0 5
17261: PUSH
17262: LD_VAR 0 5
17266: PPUSH
17267: CALL 44630 0 1
17271: ST_TO_ADDR
// tmp := [ ] ;
17272: LD_ADDR_VAR 0 8
17276: PUSH
17277: EMPTY
17278: ST_TO_ADDR
// if mode then
17279: LD_VAR 0 4
17283: IFFALSE 17347
// begin for i := 1 to result do
17285: LD_ADDR_VAR 0 6
17289: PUSH
17290: DOUBLE
17291: LD_INT 1
17293: DEC
17294: ST_TO_ADDR
17295: LD_VAR 0 5
17299: PUSH
17300: FOR_TO
17301: IFFALSE 17335
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
17303: LD_ADDR_VAR 0 8
17307: PUSH
17308: LD_VAR 0 8
17312: PPUSH
17313: LD_VAR 0 5
17317: PUSH
17318: LD_VAR 0 6
17322: ARRAY
17323: PUSH
17324: LD_INT 1
17326: ARRAY
17327: PPUSH
17328: CALL 49550 0 2
17332: ST_TO_ADDR
17333: GO 17300
17335: POP
17336: POP
// result := tmp ;
17337: LD_ADDR_VAR 0 5
17341: PUSH
17342: LD_VAR 0 8
17346: ST_TO_ADDR
// end ; end ;
17347: LD_VAR 0 5
17351: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17352: LD_INT 0
17354: PPUSH
17355: PPUSH
17356: PPUSH
17357: PPUSH
// if not list then
17358: LD_VAR 0 3
17362: NOT
17363: IFFALSE 17367
// exit ;
17365: GO 17757
// result := [ ] ;
17367: LD_ADDR_VAR 0 6
17371: PUSH
17372: EMPTY
17373: ST_TO_ADDR
// for i in list do
17374: LD_ADDR_VAR 0 7
17378: PUSH
17379: LD_VAR 0 3
17383: PUSH
17384: FOR_IN
17385: IFFALSE 17587
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17387: LD_ADDR_VAR 0 9
17391: PUSH
17392: LD_VAR 0 7
17396: PPUSH
17397: LD_VAR 0 1
17401: PPUSH
17402: LD_VAR 0 2
17406: PPUSH
17407: CALL_OW 297
17411: ST_TO_ADDR
// if not result then
17412: LD_VAR 0 6
17416: NOT
17417: IFFALSE 17443
// result := [ [ i , tmp ] ] else
17419: LD_ADDR_VAR 0 6
17423: PUSH
17424: LD_VAR 0 7
17428: PUSH
17429: LD_VAR 0 9
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PUSH
17438: EMPTY
17439: LIST
17440: ST_TO_ADDR
17441: GO 17585
// begin if result [ result ] [ 2 ] <= tmp then
17443: LD_VAR 0 6
17447: PUSH
17448: LD_VAR 0 6
17452: ARRAY
17453: PUSH
17454: LD_INT 2
17456: ARRAY
17457: PUSH
17458: LD_VAR 0 9
17462: LESSEQUAL
17463: IFFALSE 17505
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17465: LD_ADDR_VAR 0 6
17469: PUSH
17470: LD_VAR 0 6
17474: PPUSH
17475: LD_VAR 0 6
17479: PUSH
17480: LD_INT 1
17482: PLUS
17483: PPUSH
17484: LD_VAR 0 7
17488: PUSH
17489: LD_VAR 0 9
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PPUSH
17498: CALL_OW 2
17502: ST_TO_ADDR
17503: GO 17585
// for j := 1 to result do
17505: LD_ADDR_VAR 0 8
17509: PUSH
17510: DOUBLE
17511: LD_INT 1
17513: DEC
17514: ST_TO_ADDR
17515: LD_VAR 0 6
17519: PUSH
17520: FOR_TO
17521: IFFALSE 17583
// begin if tmp < result [ j ] [ 2 ] then
17523: LD_VAR 0 9
17527: PUSH
17528: LD_VAR 0 6
17532: PUSH
17533: LD_VAR 0 8
17537: ARRAY
17538: PUSH
17539: LD_INT 2
17541: ARRAY
17542: LESS
17543: IFFALSE 17581
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17545: LD_ADDR_VAR 0 6
17549: PUSH
17550: LD_VAR 0 6
17554: PPUSH
17555: LD_VAR 0 8
17559: PPUSH
17560: LD_VAR 0 7
17564: PUSH
17565: LD_VAR 0 9
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PPUSH
17574: CALL_OW 2
17578: ST_TO_ADDR
// break ;
17579: GO 17583
// end ; end ;
17581: GO 17520
17583: POP
17584: POP
// end ; end ;
17585: GO 17384
17587: POP
17588: POP
// if result and not asc then
17589: LD_VAR 0 6
17593: IFFALSE 17602
17595: PUSH
17596: LD_VAR 0 4
17600: NOT
17601: AND
17602: IFFALSE 17677
// begin tmp := result ;
17604: LD_ADDR_VAR 0 9
17608: PUSH
17609: LD_VAR 0 6
17613: ST_TO_ADDR
// for i = tmp downto 1 do
17614: LD_ADDR_VAR 0 7
17618: PUSH
17619: DOUBLE
17620: LD_VAR 0 9
17624: INC
17625: ST_TO_ADDR
17626: LD_INT 1
17628: PUSH
17629: FOR_DOWNTO
17630: IFFALSE 17675
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17632: LD_ADDR_VAR 0 6
17636: PUSH
17637: LD_VAR 0 6
17641: PPUSH
17642: LD_VAR 0 9
17646: PUSH
17647: LD_VAR 0 7
17651: MINUS
17652: PUSH
17653: LD_INT 1
17655: PLUS
17656: PPUSH
17657: LD_VAR 0 9
17661: PUSH
17662: LD_VAR 0 7
17666: ARRAY
17667: PPUSH
17668: CALL_OW 1
17672: ST_TO_ADDR
17673: GO 17629
17675: POP
17676: POP
// end ; tmp := [ ] ;
17677: LD_ADDR_VAR 0 9
17681: PUSH
17682: EMPTY
17683: ST_TO_ADDR
// if mode then
17684: LD_VAR 0 5
17688: IFFALSE 17757
// begin for i = 1 to result do
17690: LD_ADDR_VAR 0 7
17694: PUSH
17695: DOUBLE
17696: LD_INT 1
17698: DEC
17699: ST_TO_ADDR
17700: LD_VAR 0 6
17704: PUSH
17705: FOR_TO
17706: IFFALSE 17745
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17708: LD_ADDR_VAR 0 9
17712: PUSH
17713: LD_VAR 0 9
17717: PPUSH
17718: LD_VAR 0 7
17722: PPUSH
17723: LD_VAR 0 6
17727: PUSH
17728: LD_VAR 0 7
17732: ARRAY
17733: PUSH
17734: LD_INT 1
17736: ARRAY
17737: PPUSH
17738: CALL_OW 1
17742: ST_TO_ADDR
17743: GO 17705
17745: POP
17746: POP
// result := tmp ;
17747: LD_ADDR_VAR 0 6
17751: PUSH
17752: LD_VAR 0 9
17756: ST_TO_ADDR
// end ; end ;
17757: LD_VAR 0 6
17761: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17762: LD_INT 0
17764: PPUSH
17765: PPUSH
17766: PPUSH
17767: PPUSH
17768: PPUSH
17769: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17770: LD_ADDR_VAR 0 5
17774: PUSH
17775: LD_INT 0
17777: PUSH
17778: LD_INT 0
17780: PUSH
17781: LD_INT 0
17783: PUSH
17784: EMPTY
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: ST_TO_ADDR
// if not x or not y then
17792: LD_VAR 0 2
17796: NOT
17797: IFTRUE 17806
17799: PUSH
17800: LD_VAR 0 3
17804: NOT
17805: OR
17806: IFFALSE 17810
// exit ;
17808: GO 19466
// if not range then
17810: LD_VAR 0 4
17814: NOT
17815: IFFALSE 17825
// range := 10 ;
17817: LD_ADDR_VAR 0 4
17821: PUSH
17822: LD_INT 10
17824: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17825: LD_ADDR_VAR 0 8
17829: PUSH
17830: LD_INT 81
17832: PUSH
17833: LD_VAR 0 1
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 92
17844: PUSH
17845: LD_VAR 0 2
17849: PUSH
17850: LD_VAR 0 3
17854: PUSH
17855: LD_VAR 0 4
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 3
17868: PUSH
17869: LD_INT 21
17871: PUSH
17872: LD_INT 3
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: LIST
17887: PPUSH
17888: CALL_OW 69
17892: ST_TO_ADDR
// if not tmp then
17893: LD_VAR 0 8
17897: NOT
17898: IFFALSE 17902
// exit ;
17900: GO 19466
// for i in tmp do
17902: LD_ADDR_VAR 0 6
17906: PUSH
17907: LD_VAR 0 8
17911: PUSH
17912: FOR_IN
17913: IFFALSE 19441
// begin points := [ 0 , 0 , 0 ] ;
17915: LD_ADDR_VAR 0 9
17919: PUSH
17920: LD_INT 0
17922: PUSH
17923: LD_INT 0
17925: PUSH
17926: LD_INT 0
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: LIST
17933: ST_TO_ADDR
// bpoints := 1 ;
17934: LD_ADDR_VAR 0 10
17938: PUSH
17939: LD_INT 1
17941: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17942: LD_VAR 0 6
17946: PPUSH
17947: CALL_OW 247
17951: PUSH
17952: LD_INT 1
17954: DOUBLE
17955: EQUAL
17956: IFTRUE 17960
17958: GO 18542
17960: POP
// begin if GetClass ( i ) = 1 then
17961: LD_VAR 0 6
17965: PPUSH
17966: CALL_OW 257
17970: PUSH
17971: LD_INT 1
17973: EQUAL
17974: IFFALSE 17995
// points := [ 10 , 5 , 3 ] ;
17976: LD_ADDR_VAR 0 9
17980: PUSH
17981: LD_INT 10
17983: PUSH
17984: LD_INT 5
17986: PUSH
17987: LD_INT 3
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: LIST
17994: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17995: LD_VAR 0 6
17999: PPUSH
18000: CALL_OW 257
18004: PUSH
18005: LD_INT 2
18007: PUSH
18008: LD_INT 3
18010: PUSH
18011: LD_INT 4
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: IN
18019: IFFALSE 18040
// points := [ 3 , 2 , 1 ] ;
18021: LD_ADDR_VAR 0 9
18025: PUSH
18026: LD_INT 3
18028: PUSH
18029: LD_INT 2
18031: PUSH
18032: LD_INT 1
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: LIST
18039: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18040: LD_VAR 0 6
18044: PPUSH
18045: CALL_OW 257
18049: PUSH
18050: LD_INT 5
18052: EQUAL
18053: IFFALSE 18074
// points := [ 130 , 5 , 2 ] ;
18055: LD_ADDR_VAR 0 9
18059: PUSH
18060: LD_INT 130
18062: PUSH
18063: LD_INT 5
18065: PUSH
18066: LD_INT 2
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: LIST
18073: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18074: LD_VAR 0 6
18078: PPUSH
18079: CALL_OW 257
18083: PUSH
18084: LD_INT 8
18086: EQUAL
18087: IFFALSE 18108
// points := [ 35 , 35 , 30 ] ;
18089: LD_ADDR_VAR 0 9
18093: PUSH
18094: LD_INT 35
18096: PUSH
18097: LD_INT 35
18099: PUSH
18100: LD_INT 30
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: LIST
18107: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18108: LD_VAR 0 6
18112: PPUSH
18113: CALL_OW 257
18117: PUSH
18118: LD_INT 9
18120: EQUAL
18121: IFFALSE 18142
// points := [ 20 , 55 , 40 ] ;
18123: LD_ADDR_VAR 0 9
18127: PUSH
18128: LD_INT 20
18130: PUSH
18131: LD_INT 55
18133: PUSH
18134: LD_INT 40
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: LIST
18141: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18142: LD_VAR 0 6
18146: PPUSH
18147: CALL_OW 257
18151: PUSH
18152: LD_INT 12
18154: PUSH
18155: LD_INT 16
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: IN
18162: IFFALSE 18183
// points := [ 5 , 3 , 2 ] ;
18164: LD_ADDR_VAR 0 9
18168: PUSH
18169: LD_INT 5
18171: PUSH
18172: LD_INT 3
18174: PUSH
18175: LD_INT 2
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: LIST
18182: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18183: LD_VAR 0 6
18187: PPUSH
18188: CALL_OW 257
18192: PUSH
18193: LD_INT 17
18195: EQUAL
18196: IFFALSE 18217
// points := [ 100 , 50 , 75 ] ;
18198: LD_ADDR_VAR 0 9
18202: PUSH
18203: LD_INT 100
18205: PUSH
18206: LD_INT 50
18208: PUSH
18209: LD_INT 75
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: LIST
18216: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18217: LD_VAR 0 6
18221: PPUSH
18222: CALL_OW 257
18226: PUSH
18227: LD_INT 15
18229: EQUAL
18230: IFFALSE 18251
// points := [ 10 , 5 , 3 ] ;
18232: LD_ADDR_VAR 0 9
18236: PUSH
18237: LD_INT 10
18239: PUSH
18240: LD_INT 5
18242: PUSH
18243: LD_INT 3
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: LIST
18250: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18251: LD_VAR 0 6
18255: PPUSH
18256: CALL_OW 257
18260: PUSH
18261: LD_INT 14
18263: EQUAL
18264: IFFALSE 18285
// points := [ 10 , 0 , 0 ] ;
18266: LD_ADDR_VAR 0 9
18270: PUSH
18271: LD_INT 10
18273: PUSH
18274: LD_INT 0
18276: PUSH
18277: LD_INT 0
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: LIST
18284: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18285: LD_VAR 0 6
18289: PPUSH
18290: CALL_OW 257
18294: PUSH
18295: LD_INT 11
18297: EQUAL
18298: IFFALSE 18319
// points := [ 30 , 10 , 5 ] ;
18300: LD_ADDR_VAR 0 9
18304: PUSH
18305: LD_INT 30
18307: PUSH
18308: LD_INT 10
18310: PUSH
18311: LD_INT 5
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: LIST
18318: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18319: LD_VAR 0 1
18323: PPUSH
18324: LD_INT 5
18326: PPUSH
18327: CALL_OW 321
18331: PUSH
18332: LD_INT 2
18334: EQUAL
18335: IFFALSE 18352
// bpoints := bpoints * 1.8 ;
18337: LD_ADDR_VAR 0 10
18341: PUSH
18342: LD_VAR 0 10
18346: PUSH
18347: LD_REAL  1.80000000000000E+0000
18350: MUL
18351: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18352: LD_VAR 0 6
18356: PPUSH
18357: CALL_OW 257
18361: PUSH
18362: LD_INT 1
18364: PUSH
18365: LD_INT 2
18367: PUSH
18368: LD_INT 3
18370: PUSH
18371: LD_INT 4
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: IN
18380: IFFALSE 18400
18382: PUSH
18383: LD_VAR 0 1
18387: PPUSH
18388: LD_INT 51
18390: PPUSH
18391: CALL_OW 321
18395: PUSH
18396: LD_INT 2
18398: EQUAL
18399: AND
18400: IFFALSE 18417
// bpoints := bpoints * 1.2 ;
18402: LD_ADDR_VAR 0 10
18406: PUSH
18407: LD_VAR 0 10
18411: PUSH
18412: LD_REAL  1.20000000000000E+0000
18415: MUL
18416: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18417: LD_VAR 0 6
18421: PPUSH
18422: CALL_OW 257
18426: PUSH
18427: LD_INT 5
18429: PUSH
18430: LD_INT 7
18432: PUSH
18433: LD_INT 9
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: LIST
18440: IN
18441: IFFALSE 18461
18443: PUSH
18444: LD_VAR 0 1
18448: PPUSH
18449: LD_INT 52
18451: PPUSH
18452: CALL_OW 321
18456: PUSH
18457: LD_INT 2
18459: EQUAL
18460: AND
18461: IFFALSE 18478
// bpoints := bpoints * 1.5 ;
18463: LD_ADDR_VAR 0 10
18467: PUSH
18468: LD_VAR 0 10
18472: PUSH
18473: LD_REAL  1.50000000000000E+0000
18476: MUL
18477: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18478: LD_VAR 0 1
18482: PPUSH
18483: LD_INT 66
18485: PPUSH
18486: CALL_OW 321
18490: PUSH
18491: LD_INT 2
18493: EQUAL
18494: IFFALSE 18511
// bpoints := bpoints * 1.1 ;
18496: LD_ADDR_VAR 0 10
18500: PUSH
18501: LD_VAR 0 10
18505: PUSH
18506: LD_REAL  1.10000000000000E+0000
18509: MUL
18510: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18511: LD_ADDR_VAR 0 10
18515: PUSH
18516: LD_VAR 0 10
18520: PUSH
18521: LD_VAR 0 6
18525: PPUSH
18526: LD_INT 1
18528: PPUSH
18529: CALL_OW 259
18533: PUSH
18534: LD_REAL  1.15000000000000E+0000
18537: MUL
18538: MUL
18539: ST_TO_ADDR
// end ; unit_vehicle :
18540: GO 19370
18542: LD_INT 2
18544: DOUBLE
18545: EQUAL
18546: IFTRUE 18550
18548: GO 19358
18550: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18551: LD_VAR 0 6
18555: PPUSH
18556: CALL_OW 264
18560: PUSH
18561: LD_INT 2
18563: PUSH
18564: LD_INT 42
18566: PUSH
18567: LD_INT 24
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: LIST
18574: IN
18575: IFFALSE 18596
// points := [ 25 , 5 , 3 ] ;
18577: LD_ADDR_VAR 0 9
18581: PUSH
18582: LD_INT 25
18584: PUSH
18585: LD_INT 5
18587: PUSH
18588: LD_INT 3
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: LIST
18595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18596: LD_VAR 0 6
18600: PPUSH
18601: CALL_OW 264
18605: PUSH
18606: LD_INT 4
18608: PUSH
18609: LD_INT 43
18611: PUSH
18612: LD_INT 25
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: IN
18620: IFFALSE 18641
// points := [ 40 , 15 , 5 ] ;
18622: LD_ADDR_VAR 0 9
18626: PUSH
18627: LD_INT 40
18629: PUSH
18630: LD_INT 15
18632: PUSH
18633: LD_INT 5
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: LIST
18640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18641: LD_VAR 0 6
18645: PPUSH
18646: CALL_OW 264
18650: PUSH
18651: LD_INT 3
18653: PUSH
18654: LD_INT 23
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: IN
18661: IFFALSE 18682
// points := [ 7 , 25 , 8 ] ;
18663: LD_ADDR_VAR 0 9
18667: PUSH
18668: LD_INT 7
18670: PUSH
18671: LD_INT 25
18673: PUSH
18674: LD_INT 8
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: LIST
18681: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18682: LD_VAR 0 6
18686: PPUSH
18687: CALL_OW 264
18691: PUSH
18692: LD_INT 5
18694: PUSH
18695: LD_INT 27
18697: PUSH
18698: LD_INT 44
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: LIST
18705: IN
18706: IFFALSE 18727
// points := [ 14 , 50 , 16 ] ;
18708: LD_ADDR_VAR 0 9
18712: PUSH
18713: LD_INT 14
18715: PUSH
18716: LD_INT 50
18718: PUSH
18719: LD_INT 16
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18727: LD_VAR 0 6
18731: PPUSH
18732: CALL_OW 264
18736: PUSH
18737: LD_INT 6
18739: PUSH
18740: LD_INT 46
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: IN
18747: IFFALSE 18768
// points := [ 32 , 120 , 70 ] ;
18749: LD_ADDR_VAR 0 9
18753: PUSH
18754: LD_INT 32
18756: PUSH
18757: LD_INT 120
18759: PUSH
18760: LD_INT 70
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: LIST
18767: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18768: LD_VAR 0 6
18772: PPUSH
18773: CALL_OW 264
18777: PUSH
18778: LD_INT 7
18780: PUSH
18781: LD_INT 28
18783: PUSH
18784: LD_INT 45
18786: PUSH
18787: LD_INT 92
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: IN
18796: IFFALSE 18817
// points := [ 35 , 20 , 45 ] ;
18798: LD_ADDR_VAR 0 9
18802: PUSH
18803: LD_INT 35
18805: PUSH
18806: LD_INT 20
18808: PUSH
18809: LD_INT 45
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: LIST
18816: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18817: LD_VAR 0 6
18821: PPUSH
18822: CALL_OW 264
18826: PUSH
18827: LD_INT 47
18829: PUSH
18830: EMPTY
18831: LIST
18832: IN
18833: IFFALSE 18854
// points := [ 67 , 45 , 75 ] ;
18835: LD_ADDR_VAR 0 9
18839: PUSH
18840: LD_INT 67
18842: PUSH
18843: LD_INT 45
18845: PUSH
18846: LD_INT 75
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: LIST
18853: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18854: LD_VAR 0 6
18858: PPUSH
18859: CALL_OW 264
18863: PUSH
18864: LD_INT 26
18866: PUSH
18867: EMPTY
18868: LIST
18869: IN
18870: IFFALSE 18891
// points := [ 120 , 30 , 80 ] ;
18872: LD_ADDR_VAR 0 9
18876: PUSH
18877: LD_INT 120
18879: PUSH
18880: LD_INT 30
18882: PUSH
18883: LD_INT 80
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: LIST
18890: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18891: LD_VAR 0 6
18895: PPUSH
18896: CALL_OW 264
18900: PUSH
18901: LD_INT 22
18903: PUSH
18904: EMPTY
18905: LIST
18906: IN
18907: IFFALSE 18928
// points := [ 40 , 1 , 1 ] ;
18909: LD_ADDR_VAR 0 9
18913: PUSH
18914: LD_INT 40
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: LIST
18927: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18928: LD_VAR 0 6
18932: PPUSH
18933: CALL_OW 264
18937: PUSH
18938: LD_INT 29
18940: PUSH
18941: EMPTY
18942: LIST
18943: IN
18944: IFFALSE 18965
// points := [ 70 , 200 , 400 ] ;
18946: LD_ADDR_VAR 0 9
18950: PUSH
18951: LD_INT 70
18953: PUSH
18954: LD_INT 200
18956: PUSH
18957: LD_INT 400
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: LIST
18964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18965: LD_VAR 0 6
18969: PPUSH
18970: CALL_OW 264
18974: PUSH
18975: LD_INT 14
18977: PUSH
18978: LD_INT 53
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: IN
18985: IFFALSE 19006
// points := [ 40 , 10 , 20 ] ;
18987: LD_ADDR_VAR 0 9
18991: PUSH
18992: LD_INT 40
18994: PUSH
18995: LD_INT 10
18997: PUSH
18998: LD_INT 20
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: LIST
19005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19006: LD_VAR 0 6
19010: PPUSH
19011: CALL_OW 264
19015: PUSH
19016: LD_INT 9
19018: PUSH
19019: EMPTY
19020: LIST
19021: IN
19022: IFFALSE 19043
// points := [ 5 , 70 , 20 ] ;
19024: LD_ADDR_VAR 0 9
19028: PUSH
19029: LD_INT 5
19031: PUSH
19032: LD_INT 70
19034: PUSH
19035: LD_INT 20
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: LIST
19042: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19043: LD_VAR 0 6
19047: PPUSH
19048: CALL_OW 264
19052: PUSH
19053: LD_INT 10
19055: PUSH
19056: EMPTY
19057: LIST
19058: IN
19059: IFFALSE 19080
// points := [ 35 , 110 , 70 ] ;
19061: LD_ADDR_VAR 0 9
19065: PUSH
19066: LD_INT 35
19068: PUSH
19069: LD_INT 110
19071: PUSH
19072: LD_INT 70
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: LIST
19079: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19080: LD_VAR 0 6
19084: PPUSH
19085: CALL_OW 265
19089: PUSH
19090: LD_INT 25
19092: EQUAL
19093: IFFALSE 19114
// points := [ 80 , 65 , 100 ] ;
19095: LD_ADDR_VAR 0 9
19099: PUSH
19100: LD_INT 80
19102: PUSH
19103: LD_INT 65
19105: PUSH
19106: LD_INT 100
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: LIST
19113: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19114: LD_VAR 0 6
19118: PPUSH
19119: CALL_OW 263
19123: PUSH
19124: LD_INT 1
19126: EQUAL
19127: IFFALSE 19162
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19129: LD_ADDR_VAR 0 10
19133: PUSH
19134: LD_VAR 0 10
19138: PUSH
19139: LD_VAR 0 6
19143: PPUSH
19144: CALL_OW 311
19148: PPUSH
19149: LD_INT 3
19151: PPUSH
19152: CALL_OW 259
19156: PUSH
19157: LD_INT 4
19159: MUL
19160: MUL
19161: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19162: LD_VAR 0 6
19166: PPUSH
19167: CALL_OW 263
19171: PUSH
19172: LD_INT 2
19174: EQUAL
19175: IFFALSE 19226
// begin j := IsControledBy ( i ) ;
19177: LD_ADDR_VAR 0 7
19181: PUSH
19182: LD_VAR 0 6
19186: PPUSH
19187: CALL_OW 312
19191: ST_TO_ADDR
// if j then
19192: LD_VAR 0 7
19196: IFFALSE 19226
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19198: LD_ADDR_VAR 0 10
19202: PUSH
19203: LD_VAR 0 10
19207: PUSH
19208: LD_VAR 0 7
19212: PPUSH
19213: LD_INT 3
19215: PPUSH
19216: CALL_OW 259
19220: PUSH
19221: LD_INT 3
19223: MUL
19224: MUL
19225: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19226: LD_VAR 0 6
19230: PPUSH
19231: CALL_OW 264
19235: PUSH
19236: LD_INT 5
19238: PUSH
19239: LD_INT 6
19241: PUSH
19242: LD_INT 46
19244: PUSH
19245: LD_INT 44
19247: PUSH
19248: LD_INT 47
19250: PUSH
19251: LD_INT 45
19253: PUSH
19254: LD_INT 28
19256: PUSH
19257: LD_INT 7
19259: PUSH
19260: LD_INT 27
19262: PUSH
19263: LD_INT 29
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: IN
19278: IFFALSE 19298
19280: PUSH
19281: LD_VAR 0 1
19285: PPUSH
19286: LD_INT 52
19288: PPUSH
19289: CALL_OW 321
19293: PUSH
19294: LD_INT 2
19296: EQUAL
19297: AND
19298: IFFALSE 19315
// bpoints := bpoints * 1.2 ;
19300: LD_ADDR_VAR 0 10
19304: PUSH
19305: LD_VAR 0 10
19309: PUSH
19310: LD_REAL  1.20000000000000E+0000
19313: MUL
19314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19315: LD_VAR 0 6
19319: PPUSH
19320: CALL_OW 264
19324: PUSH
19325: LD_INT 6
19327: PUSH
19328: LD_INT 46
19330: PUSH
19331: LD_INT 47
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: LIST
19338: IN
19339: IFFALSE 19356
// bpoints := bpoints * 1.2 ;
19341: LD_ADDR_VAR 0 10
19345: PUSH
19346: LD_VAR 0 10
19350: PUSH
19351: LD_REAL  1.20000000000000E+0000
19354: MUL
19355: ST_TO_ADDR
// end ; unit_building :
19356: GO 19370
19358: LD_INT 3
19360: DOUBLE
19361: EQUAL
19362: IFTRUE 19366
19364: GO 19369
19366: POP
// ; end ;
19367: GO 19370
19369: POP
// for j = 1 to 3 do
19370: LD_ADDR_VAR 0 7
19374: PUSH
19375: DOUBLE
19376: LD_INT 1
19378: DEC
19379: ST_TO_ADDR
19380: LD_INT 3
19382: PUSH
19383: FOR_TO
19384: IFFALSE 19437
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19386: LD_ADDR_VAR 0 5
19390: PUSH
19391: LD_VAR 0 5
19395: PPUSH
19396: LD_VAR 0 7
19400: PPUSH
19401: LD_VAR 0 5
19405: PUSH
19406: LD_VAR 0 7
19410: ARRAY
19411: PUSH
19412: LD_VAR 0 9
19416: PUSH
19417: LD_VAR 0 7
19421: ARRAY
19422: PUSH
19423: LD_VAR 0 10
19427: MUL
19428: PLUS
19429: PPUSH
19430: CALL_OW 1
19434: ST_TO_ADDR
19435: GO 19383
19437: POP
19438: POP
// end ;
19439: GO 17912
19441: POP
19442: POP
// result := Replace ( result , 4 , tmp ) ;
19443: LD_ADDR_VAR 0 5
19447: PUSH
19448: LD_VAR 0 5
19452: PPUSH
19453: LD_INT 4
19455: PPUSH
19456: LD_VAR 0 8
19460: PPUSH
19461: CALL_OW 1
19465: ST_TO_ADDR
// end ;
19466: LD_VAR 0 5
19470: RET
// export function DangerAtRange ( unit , range ) ; begin
19471: LD_INT 0
19473: PPUSH
// if not unit then
19474: LD_VAR 0 1
19478: NOT
19479: IFFALSE 19483
// exit ;
19481: GO 19528
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19483: LD_ADDR_VAR 0 3
19487: PUSH
19488: LD_VAR 0 1
19492: PPUSH
19493: CALL_OW 255
19497: PPUSH
19498: LD_VAR 0 1
19502: PPUSH
19503: CALL_OW 250
19507: PPUSH
19508: LD_VAR 0 1
19512: PPUSH
19513: CALL_OW 251
19517: PPUSH
19518: LD_VAR 0 2
19522: PPUSH
19523: CALL 17762 0 4
19527: ST_TO_ADDR
// end ;
19528: LD_VAR 0 3
19532: RET
// export function DangerInArea ( side , area ) ; begin
19533: LD_INT 0
19535: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19536: LD_ADDR_VAR 0 3
19540: PUSH
19541: LD_VAR 0 2
19545: PPUSH
19546: LD_INT 81
19548: PUSH
19549: LD_VAR 0 1
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PPUSH
19558: CALL_OW 70
19562: ST_TO_ADDR
// end ;
19563: LD_VAR 0 3
19567: RET
// export function IsExtension ( b ) ; begin
19568: LD_INT 0
19570: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19571: LD_ADDR_VAR 0 2
19575: PUSH
19576: LD_VAR 0 1
19580: PUSH
19581: LD_INT 23
19583: PUSH
19584: LD_INT 20
19586: PUSH
19587: LD_INT 22
19589: PUSH
19590: LD_INT 17
19592: PUSH
19593: LD_INT 24
19595: PUSH
19596: LD_INT 21
19598: PUSH
19599: LD_INT 19
19601: PUSH
19602: LD_INT 16
19604: PUSH
19605: LD_INT 25
19607: PUSH
19608: LD_INT 18
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: IN
19623: ST_TO_ADDR
// end ;
19624: LD_VAR 0 2
19628: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
19629: LD_INT 0
19631: PPUSH
19632: PPUSH
19633: PPUSH
// result := [ ] ;
19634: LD_ADDR_VAR 0 4
19638: PUSH
19639: EMPTY
19640: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19641: LD_ADDR_VAR 0 5
19645: PUSH
19646: LD_VAR 0 2
19650: PPUSH
19651: LD_INT 21
19653: PUSH
19654: LD_INT 3
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PPUSH
19661: CALL_OW 70
19665: ST_TO_ADDR
// if not tmp then
19666: LD_VAR 0 5
19670: NOT
19671: IFFALSE 19675
// exit ;
19673: GO 19739
// if checkLink then
19675: LD_VAR 0 3
19679: IFFALSE 19729
// begin for i in tmp do
19681: LD_ADDR_VAR 0 6
19685: PUSH
19686: LD_VAR 0 5
19690: PUSH
19691: FOR_IN
19692: IFFALSE 19727
// if GetBase ( i ) <> base then
19694: LD_VAR 0 6
19698: PPUSH
19699: CALL_OW 274
19703: PUSH
19704: LD_VAR 0 1
19708: NONEQUAL
19709: IFFALSE 19725
// ComLinkToBase ( base , i ) ;
19711: LD_VAR 0 1
19715: PPUSH
19716: LD_VAR 0 6
19720: PPUSH
19721: CALL_OW 169
19725: GO 19691
19727: POP
19728: POP
// end ; result := tmp ;
19729: LD_ADDR_VAR 0 4
19733: PUSH
19734: LD_VAR 0 5
19738: ST_TO_ADDR
// end ;
19739: LD_VAR 0 4
19743: RET
// export function ComComplete ( units , b ) ; var i ; begin
19744: LD_INT 0
19746: PPUSH
19747: PPUSH
// if not units then
19748: LD_VAR 0 1
19752: NOT
19753: IFFALSE 19757
// exit ;
19755: GO 19847
// for i in units do
19757: LD_ADDR_VAR 0 4
19761: PUSH
19762: LD_VAR 0 1
19766: PUSH
19767: FOR_IN
19768: IFFALSE 19845
// if BuildingStatus ( b ) = bs_build then
19770: LD_VAR 0 2
19774: PPUSH
19775: CALL_OW 461
19779: PUSH
19780: LD_INT 1
19782: EQUAL
19783: IFFALSE 19843
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19785: LD_VAR 0 4
19789: PPUSH
19790: LD_STRING h
19792: PUSH
19793: LD_VAR 0 2
19797: PPUSH
19798: CALL_OW 250
19802: PUSH
19803: LD_VAR 0 2
19807: PPUSH
19808: CALL_OW 251
19812: PUSH
19813: LD_VAR 0 2
19817: PUSH
19818: LD_INT 0
19820: PUSH
19821: LD_INT 0
19823: PUSH
19824: LD_INT 0
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: PUSH
19836: EMPTY
19837: LIST
19838: PPUSH
19839: CALL_OW 446
19843: GO 19767
19845: POP
19846: POP
// end ;
19847: LD_VAR 0 3
19851: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19852: LD_INT 0
19854: PPUSH
19855: PPUSH
19856: PPUSH
19857: PPUSH
19858: PPUSH
19859: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19860: LD_VAR 0 1
19864: NOT
19865: IFTRUE 19882
19867: PUSH
19868: LD_VAR 0 1
19872: PPUSH
19873: CALL_OW 263
19877: PUSH
19878: LD_INT 2
19880: NONEQUAL
19881: OR
19882: IFFALSE 19886
// exit ;
19884: GO 20202
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19886: LD_ADDR_VAR 0 6
19890: PUSH
19891: LD_INT 22
19893: PUSH
19894: LD_VAR 0 1
19898: PPUSH
19899: CALL_OW 255
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 2
19910: PUSH
19911: LD_INT 30
19913: PUSH
19914: LD_INT 36
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 34
19923: PUSH
19924: LD_INT 31
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: LIST
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PPUSH
19940: CALL_OW 69
19944: ST_TO_ADDR
// if not tmp then
19945: LD_VAR 0 6
19949: NOT
19950: IFFALSE 19954
// exit ;
19952: GO 20202
// result := [ ] ;
19954: LD_ADDR_VAR 0 2
19958: PUSH
19959: EMPTY
19960: ST_TO_ADDR
// for i in tmp do
19961: LD_ADDR_VAR 0 3
19965: PUSH
19966: LD_VAR 0 6
19970: PUSH
19971: FOR_IN
19972: IFFALSE 20043
// begin t := UnitsInside ( i ) ;
19974: LD_ADDR_VAR 0 4
19978: PUSH
19979: LD_VAR 0 3
19983: PPUSH
19984: CALL_OW 313
19988: ST_TO_ADDR
// if t then
19989: LD_VAR 0 4
19993: IFFALSE 20041
// for j in t do
19995: LD_ADDR_VAR 0 7
19999: PUSH
20000: LD_VAR 0 4
20004: PUSH
20005: FOR_IN
20006: IFFALSE 20039
// result := Replace ( result , result + 1 , j ) ;
20008: LD_ADDR_VAR 0 2
20012: PUSH
20013: LD_VAR 0 2
20017: PPUSH
20018: LD_VAR 0 2
20022: PUSH
20023: LD_INT 1
20025: PLUS
20026: PPUSH
20027: LD_VAR 0 7
20031: PPUSH
20032: CALL_OW 1
20036: ST_TO_ADDR
20037: GO 20005
20039: POP
20040: POP
// end ;
20041: GO 19971
20043: POP
20044: POP
// if not result then
20045: LD_VAR 0 2
20049: NOT
20050: IFFALSE 20054
// exit ;
20052: GO 20202
// mech := result [ 1 ] ;
20054: LD_ADDR_VAR 0 5
20058: PUSH
20059: LD_VAR 0 2
20063: PUSH
20064: LD_INT 1
20066: ARRAY
20067: ST_TO_ADDR
// if result > 1 then
20068: LD_VAR 0 2
20072: PUSH
20073: LD_INT 1
20075: GREATER
20076: IFFALSE 20188
// begin for i = 2 to result do
20078: LD_ADDR_VAR 0 3
20082: PUSH
20083: DOUBLE
20084: LD_INT 2
20086: DEC
20087: ST_TO_ADDR
20088: LD_VAR 0 2
20092: PUSH
20093: FOR_TO
20094: IFFALSE 20186
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20096: LD_ADDR_VAR 0 4
20100: PUSH
20101: LD_VAR 0 2
20105: PUSH
20106: LD_VAR 0 3
20110: ARRAY
20111: PPUSH
20112: LD_INT 3
20114: PPUSH
20115: CALL_OW 259
20119: PUSH
20120: LD_VAR 0 2
20124: PUSH
20125: LD_VAR 0 3
20129: ARRAY
20130: PPUSH
20131: CALL_OW 432
20135: MINUS
20136: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20137: LD_VAR 0 4
20141: PUSH
20142: LD_VAR 0 5
20146: PPUSH
20147: LD_INT 3
20149: PPUSH
20150: CALL_OW 259
20154: PUSH
20155: LD_VAR 0 5
20159: PPUSH
20160: CALL_OW 432
20164: MINUS
20165: GREATEREQUAL
20166: IFFALSE 20184
// mech := result [ i ] ;
20168: LD_ADDR_VAR 0 5
20172: PUSH
20173: LD_VAR 0 2
20177: PUSH
20178: LD_VAR 0 3
20182: ARRAY
20183: ST_TO_ADDR
// end ;
20184: GO 20093
20186: POP
20187: POP
// end ; ComLinkTo ( vehicle , mech ) ;
20188: LD_VAR 0 1
20192: PPUSH
20193: LD_VAR 0 5
20197: PPUSH
20198: CALL_OW 135
// end ;
20202: LD_VAR 0 2
20206: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20207: LD_INT 0
20209: PPUSH
20210: PPUSH
20211: PPUSH
20212: PPUSH
20213: PPUSH
20214: PPUSH
20215: PPUSH
20216: PPUSH
20217: PPUSH
20218: PPUSH
20219: PPUSH
20220: PPUSH
20221: PPUSH
// result := [ ] ;
20222: LD_ADDR_VAR 0 7
20226: PUSH
20227: EMPTY
20228: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20229: LD_VAR 0 1
20233: PPUSH
20234: CALL_OW 266
20238: PUSH
20239: LD_INT 0
20241: PUSH
20242: LD_INT 1
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: IN
20249: NOT
20250: IFFALSE 20254
// exit ;
20252: GO 21894
// if name then
20254: LD_VAR 0 3
20258: IFFALSE 20274
// SetBName ( base_dep , name ) ;
20260: LD_VAR 0 1
20264: PPUSH
20265: LD_VAR 0 3
20269: PPUSH
20270: CALL_OW 500
// base := GetBase ( base_dep ) ;
20274: LD_ADDR_VAR 0 15
20278: PUSH
20279: LD_VAR 0 1
20283: PPUSH
20284: CALL_OW 274
20288: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20289: LD_ADDR_VAR 0 16
20293: PUSH
20294: LD_VAR 0 1
20298: PPUSH
20299: CALL_OW 255
20303: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20304: LD_ADDR_VAR 0 17
20308: PUSH
20309: LD_VAR 0 1
20313: PPUSH
20314: CALL_OW 248
20318: ST_TO_ADDR
// if sources then
20319: LD_VAR 0 5
20323: IFFALSE 20370
// for i = 1 to 3 do
20325: LD_ADDR_VAR 0 8
20329: PUSH
20330: DOUBLE
20331: LD_INT 1
20333: DEC
20334: ST_TO_ADDR
20335: LD_INT 3
20337: PUSH
20338: FOR_TO
20339: IFFALSE 20368
// AddResourceType ( base , i , sources [ i ] ) ;
20341: LD_VAR 0 15
20345: PPUSH
20346: LD_VAR 0 8
20350: PPUSH
20351: LD_VAR 0 5
20355: PUSH
20356: LD_VAR 0 8
20360: ARRAY
20361: PPUSH
20362: CALL_OW 276
20366: GO 20338
20368: POP
20369: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
20370: LD_ADDR_VAR 0 18
20374: PUSH
20375: LD_VAR 0 15
20379: PPUSH
20380: LD_VAR 0 2
20384: PPUSH
20385: LD_INT 1
20387: PPUSH
20388: CALL 19629 0 3
20392: ST_TO_ADDR
// InitHc ;
20393: CALL_OW 19
// InitUc ;
20397: CALL_OW 18
// uc_side := side ;
20401: LD_ADDR_OWVAR 20
20405: PUSH
20406: LD_VAR 0 16
20410: ST_TO_ADDR
// uc_nation := nation ;
20411: LD_ADDR_OWVAR 21
20415: PUSH
20416: LD_VAR 0 17
20420: ST_TO_ADDR
// if buildings then
20421: LD_VAR 0 18
20425: IFFALSE 21753
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20427: LD_ADDR_VAR 0 19
20431: PUSH
20432: LD_VAR 0 18
20436: PPUSH
20437: LD_INT 2
20439: PUSH
20440: LD_INT 30
20442: PUSH
20443: LD_INT 29
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 30
20452: PUSH
20453: LD_INT 30
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: LIST
20464: PPUSH
20465: CALL_OW 72
20469: ST_TO_ADDR
// if tmp then
20470: LD_VAR 0 19
20474: IFFALSE 20522
// for i in tmp do
20476: LD_ADDR_VAR 0 8
20480: PUSH
20481: LD_VAR 0 19
20485: PUSH
20486: FOR_IN
20487: IFFALSE 20520
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20489: LD_VAR 0 8
20493: PPUSH
20494: CALL_OW 250
20498: PPUSH
20499: LD_VAR 0 8
20503: PPUSH
20504: CALL_OW 251
20508: PPUSH
20509: LD_VAR 0 16
20513: PPUSH
20514: CALL_OW 441
20518: GO 20486
20520: POP
20521: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20522: LD_VAR 0 18
20526: PPUSH
20527: LD_INT 2
20529: PUSH
20530: LD_INT 30
20532: PUSH
20533: LD_INT 32
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 30
20542: PUSH
20543: LD_INT 33
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: LIST
20554: PPUSH
20555: CALL_OW 72
20559: IFFALSE 20647
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20561: LD_ADDR_VAR 0 8
20565: PUSH
20566: LD_VAR 0 18
20570: PPUSH
20571: LD_INT 2
20573: PUSH
20574: LD_INT 30
20576: PUSH
20577: LD_INT 32
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 30
20586: PUSH
20587: LD_INT 33
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: LIST
20598: PPUSH
20599: CALL_OW 72
20603: PUSH
20604: FOR_IN
20605: IFFALSE 20645
// begin if not GetBWeapon ( i ) then
20607: LD_VAR 0 8
20611: PPUSH
20612: CALL_OW 269
20616: NOT
20617: IFFALSE 20643
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20619: LD_VAR 0 8
20623: PPUSH
20624: LD_VAR 0 8
20628: PPUSH
20629: LD_VAR 0 2
20633: PPUSH
20634: CALL 21899 0 2
20638: PPUSH
20639: CALL_OW 431
// end ;
20643: GO 20604
20645: POP
20646: POP
// end ; for i = 1 to personel do
20647: LD_ADDR_VAR 0 8
20651: PUSH
20652: DOUBLE
20653: LD_INT 1
20655: DEC
20656: ST_TO_ADDR
20657: LD_VAR 0 6
20661: PUSH
20662: FOR_TO
20663: IFFALSE 21733
// begin if i > 4 then
20665: LD_VAR 0 8
20669: PUSH
20670: LD_INT 4
20672: GREATER
20673: IFFALSE 20677
// break ;
20675: GO 21733
// case i of 1 :
20677: LD_VAR 0 8
20681: PUSH
20682: LD_INT 1
20684: DOUBLE
20685: EQUAL
20686: IFTRUE 20690
20688: GO 20770
20690: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20691: LD_ADDR_VAR 0 12
20695: PUSH
20696: LD_VAR 0 18
20700: PPUSH
20701: LD_INT 22
20703: PUSH
20704: LD_VAR 0 16
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 58
20715: PUSH
20716: EMPTY
20717: LIST
20718: PUSH
20719: LD_INT 2
20721: PUSH
20722: LD_INT 30
20724: PUSH
20725: LD_INT 32
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 30
20734: PUSH
20735: LD_INT 4
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 30
20744: PUSH
20745: LD_INT 5
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: LIST
20762: PPUSH
20763: CALL_OW 72
20767: ST_TO_ADDR
20768: GO 20992
20770: LD_INT 2
20772: DOUBLE
20773: EQUAL
20774: IFTRUE 20778
20776: GO 20840
20778: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20779: LD_ADDR_VAR 0 12
20783: PUSH
20784: LD_VAR 0 18
20788: PPUSH
20789: LD_INT 22
20791: PUSH
20792: LD_VAR 0 16
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 2
20803: PUSH
20804: LD_INT 30
20806: PUSH
20807: LD_INT 0
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 30
20816: PUSH
20817: LD_INT 1
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: LIST
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PPUSH
20833: CALL_OW 72
20837: ST_TO_ADDR
20838: GO 20992
20840: LD_INT 3
20842: DOUBLE
20843: EQUAL
20844: IFTRUE 20848
20846: GO 20910
20848: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20849: LD_ADDR_VAR 0 12
20853: PUSH
20854: LD_VAR 0 18
20858: PPUSH
20859: LD_INT 22
20861: PUSH
20862: LD_VAR 0 16
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 2
20873: PUSH
20874: LD_INT 30
20876: PUSH
20877: LD_INT 2
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 30
20886: PUSH
20887: LD_INT 3
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: LIST
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PPUSH
20903: CALL_OW 72
20907: ST_TO_ADDR
20908: GO 20992
20910: LD_INT 4
20912: DOUBLE
20913: EQUAL
20914: IFTRUE 20918
20916: GO 20991
20918: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20919: LD_ADDR_VAR 0 12
20923: PUSH
20924: LD_VAR 0 18
20928: PPUSH
20929: LD_INT 22
20931: PUSH
20932: LD_VAR 0 16
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: LD_INT 30
20946: PUSH
20947: LD_INT 6
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 30
20956: PUSH
20957: LD_INT 7
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 30
20966: PUSH
20967: LD_INT 8
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PPUSH
20984: CALL_OW 72
20988: ST_TO_ADDR
20989: GO 20992
20991: POP
// if i = 1 then
20992: LD_VAR 0 8
20996: PUSH
20997: LD_INT 1
20999: EQUAL
21000: IFFALSE 21111
// begin tmp := [ ] ;
21002: LD_ADDR_VAR 0 19
21006: PUSH
21007: EMPTY
21008: ST_TO_ADDR
// for j in f do
21009: LD_ADDR_VAR 0 9
21013: PUSH
21014: LD_VAR 0 12
21018: PUSH
21019: FOR_IN
21020: IFFALSE 21093
// if GetBType ( j ) = b_bunker then
21022: LD_VAR 0 9
21026: PPUSH
21027: CALL_OW 266
21031: PUSH
21032: LD_INT 32
21034: EQUAL
21035: IFFALSE 21062
// tmp := Insert ( tmp , 1 , j ) else
21037: LD_ADDR_VAR 0 19
21041: PUSH
21042: LD_VAR 0 19
21046: PPUSH
21047: LD_INT 1
21049: PPUSH
21050: LD_VAR 0 9
21054: PPUSH
21055: CALL_OW 2
21059: ST_TO_ADDR
21060: GO 21091
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21062: LD_ADDR_VAR 0 19
21066: PUSH
21067: LD_VAR 0 19
21071: PPUSH
21072: LD_VAR 0 19
21076: PUSH
21077: LD_INT 1
21079: PLUS
21080: PPUSH
21081: LD_VAR 0 9
21085: PPUSH
21086: CALL_OW 2
21090: ST_TO_ADDR
21091: GO 21019
21093: POP
21094: POP
// if tmp then
21095: LD_VAR 0 19
21099: IFFALSE 21111
// f := tmp ;
21101: LD_ADDR_VAR 0 12
21105: PUSH
21106: LD_VAR 0 19
21110: ST_TO_ADDR
// end ; x := personel [ i ] ;
21111: LD_ADDR_VAR 0 13
21115: PUSH
21116: LD_VAR 0 6
21120: PUSH
21121: LD_VAR 0 8
21125: ARRAY
21126: ST_TO_ADDR
// if x = - 1 then
21127: LD_VAR 0 13
21131: PUSH
21132: LD_INT 1
21134: NEG
21135: EQUAL
21136: IFFALSE 21347
// begin for j in f do
21138: LD_ADDR_VAR 0 9
21142: PUSH
21143: LD_VAR 0 12
21147: PUSH
21148: FOR_IN
21149: IFFALSE 21343
// repeat InitHc ;
21151: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21155: LD_VAR 0 9
21159: PPUSH
21160: CALL_OW 266
21164: PUSH
21165: LD_INT 5
21167: EQUAL
21168: IFFALSE 21238
// begin if UnitsInside ( j ) < 3 then
21170: LD_VAR 0 9
21174: PPUSH
21175: CALL_OW 313
21179: PUSH
21180: LD_INT 3
21182: LESS
21183: IFFALSE 21219
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21185: LD_INT 0
21187: PPUSH
21188: LD_INT 5
21190: PUSH
21191: LD_INT 8
21193: PUSH
21194: LD_INT 9
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: LIST
21201: PUSH
21202: LD_VAR 0 17
21206: ARRAY
21207: PPUSH
21208: LD_VAR 0 4
21212: PPUSH
21213: CALL_OW 380
21217: GO 21236
// PrepareHuman ( false , i , skill ) ;
21219: LD_INT 0
21221: PPUSH
21222: LD_VAR 0 8
21226: PPUSH
21227: LD_VAR 0 4
21231: PPUSH
21232: CALL_OW 380
// end else
21236: GO 21255
// PrepareHuman ( false , i , skill ) ;
21238: LD_INT 0
21240: PPUSH
21241: LD_VAR 0 8
21245: PPUSH
21246: LD_VAR 0 4
21250: PPUSH
21251: CALL_OW 380
// un := CreateHuman ;
21255: LD_ADDR_VAR 0 14
21259: PUSH
21260: CALL_OW 44
21264: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21265: LD_ADDR_VAR 0 7
21269: PUSH
21270: LD_VAR 0 7
21274: PPUSH
21275: LD_INT 1
21277: PPUSH
21278: LD_VAR 0 14
21282: PPUSH
21283: CALL_OW 2
21287: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21288: LD_VAR 0 14
21292: PPUSH
21293: LD_VAR 0 9
21297: PPUSH
21298: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21302: LD_VAR 0 9
21306: PPUSH
21307: CALL_OW 313
21311: PUSH
21312: LD_INT 6
21314: EQUAL
21315: IFTRUE 21339
21317: PUSH
21318: LD_VAR 0 9
21322: PPUSH
21323: CALL_OW 266
21327: PUSH
21328: LD_INT 32
21330: PUSH
21331: LD_INT 31
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: IN
21338: OR
21339: IFFALSE 21151
21341: GO 21148
21343: POP
21344: POP
// end else
21345: GO 21731
// for j = 1 to x do
21347: LD_ADDR_VAR 0 9
21351: PUSH
21352: DOUBLE
21353: LD_INT 1
21355: DEC
21356: ST_TO_ADDR
21357: LD_VAR 0 13
21361: PUSH
21362: FOR_TO
21363: IFFALSE 21729
// begin InitHc ;
21365: CALL_OW 19
// if not f then
21369: LD_VAR 0 12
21373: NOT
21374: IFFALSE 21463
// begin PrepareHuman ( false , i , skill ) ;
21376: LD_INT 0
21378: PPUSH
21379: LD_VAR 0 8
21383: PPUSH
21384: LD_VAR 0 4
21388: PPUSH
21389: CALL_OW 380
// un := CreateHuman ;
21393: LD_ADDR_VAR 0 14
21397: PUSH
21398: CALL_OW 44
21402: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21403: LD_ADDR_VAR 0 7
21407: PUSH
21408: LD_VAR 0 7
21412: PPUSH
21413: LD_INT 1
21415: PPUSH
21416: LD_VAR 0 14
21420: PPUSH
21421: CALL_OW 2
21425: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21426: LD_VAR 0 14
21430: PPUSH
21431: LD_VAR 0 1
21435: PPUSH
21436: CALL_OW 250
21440: PPUSH
21441: LD_VAR 0 1
21445: PPUSH
21446: CALL_OW 251
21450: PPUSH
21451: LD_INT 10
21453: PPUSH
21454: LD_INT 0
21456: PPUSH
21457: CALL_OW 50
// continue ;
21461: GO 21362
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21463: LD_VAR 0 12
21467: PUSH
21468: LD_INT 1
21470: ARRAY
21471: PPUSH
21472: CALL_OW 313
21476: IFFALSE 21504
21478: PUSH
21479: LD_VAR 0 12
21483: PUSH
21484: LD_INT 1
21486: ARRAY
21487: PPUSH
21488: CALL_OW 266
21492: PUSH
21493: LD_INT 32
21495: PUSH
21496: LD_INT 31
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: IN
21503: AND
21504: IFTRUE 21525
21506: PUSH
21507: LD_VAR 0 12
21511: PUSH
21512: LD_INT 1
21514: ARRAY
21515: PPUSH
21516: CALL_OW 313
21520: PUSH
21521: LD_INT 6
21523: EQUAL
21524: OR
21525: IFFALSE 21545
// f := Delete ( f , 1 ) ;
21527: LD_ADDR_VAR 0 12
21531: PUSH
21532: LD_VAR 0 12
21536: PPUSH
21537: LD_INT 1
21539: PPUSH
21540: CALL_OW 3
21544: ST_TO_ADDR
// if not f then
21545: LD_VAR 0 12
21549: NOT
21550: IFFALSE 21568
// begin x := x + 2 ;
21552: LD_ADDR_VAR 0 13
21556: PUSH
21557: LD_VAR 0 13
21561: PUSH
21562: LD_INT 2
21564: PLUS
21565: ST_TO_ADDR
// continue ;
21566: GO 21362
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21568: LD_VAR 0 12
21572: PUSH
21573: LD_INT 1
21575: ARRAY
21576: PPUSH
21577: CALL_OW 266
21581: PUSH
21582: LD_INT 5
21584: EQUAL
21585: IFFALSE 21659
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21587: LD_VAR 0 12
21591: PUSH
21592: LD_INT 1
21594: ARRAY
21595: PPUSH
21596: CALL_OW 313
21600: PUSH
21601: LD_INT 3
21603: LESS
21604: IFFALSE 21640
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21606: LD_INT 0
21608: PPUSH
21609: LD_INT 5
21611: PUSH
21612: LD_INT 8
21614: PUSH
21615: LD_INT 9
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: LIST
21622: PUSH
21623: LD_VAR 0 17
21627: ARRAY
21628: PPUSH
21629: LD_VAR 0 4
21633: PPUSH
21634: CALL_OW 380
21638: GO 21657
// PrepareHuman ( false , i , skill ) ;
21640: LD_INT 0
21642: PPUSH
21643: LD_VAR 0 8
21647: PPUSH
21648: LD_VAR 0 4
21652: PPUSH
21653: CALL_OW 380
// end else
21657: GO 21676
// PrepareHuman ( false , i , skill ) ;
21659: LD_INT 0
21661: PPUSH
21662: LD_VAR 0 8
21666: PPUSH
21667: LD_VAR 0 4
21671: PPUSH
21672: CALL_OW 380
// un := CreateHuman ;
21676: LD_ADDR_VAR 0 14
21680: PUSH
21681: CALL_OW 44
21685: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21686: LD_ADDR_VAR 0 7
21690: PUSH
21691: LD_VAR 0 7
21695: PPUSH
21696: LD_INT 1
21698: PPUSH
21699: LD_VAR 0 14
21703: PPUSH
21704: CALL_OW 2
21708: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21709: LD_VAR 0 14
21713: PPUSH
21714: LD_VAR 0 12
21718: PUSH
21719: LD_INT 1
21721: ARRAY
21722: PPUSH
21723: CALL_OW 52
// end ;
21727: GO 21362
21729: POP
21730: POP
// end ;
21731: GO 20662
21733: POP
21734: POP
// result := result ^ buildings ;
21735: LD_ADDR_VAR 0 7
21739: PUSH
21740: LD_VAR 0 7
21744: PUSH
21745: LD_VAR 0 18
21749: ADD
21750: ST_TO_ADDR
// end else
21751: GO 21894
// begin for i = 1 to personel do
21753: LD_ADDR_VAR 0 8
21757: PUSH
21758: DOUBLE
21759: LD_INT 1
21761: DEC
21762: ST_TO_ADDR
21763: LD_VAR 0 6
21767: PUSH
21768: FOR_TO
21769: IFFALSE 21892
// begin if i > 4 then
21771: LD_VAR 0 8
21775: PUSH
21776: LD_INT 4
21778: GREATER
21779: IFFALSE 21783
// break ;
21781: GO 21892
// x := personel [ i ] ;
21783: LD_ADDR_VAR 0 13
21787: PUSH
21788: LD_VAR 0 6
21792: PUSH
21793: LD_VAR 0 8
21797: ARRAY
21798: ST_TO_ADDR
// if x = - 1 then
21799: LD_VAR 0 13
21803: PUSH
21804: LD_INT 1
21806: NEG
21807: EQUAL
21808: IFFALSE 21812
// continue ;
21810: GO 21768
// PrepareHuman ( false , i , skill ) ;
21812: LD_INT 0
21814: PPUSH
21815: LD_VAR 0 8
21819: PPUSH
21820: LD_VAR 0 4
21824: PPUSH
21825: CALL_OW 380
// un := CreateHuman ;
21829: LD_ADDR_VAR 0 14
21833: PUSH
21834: CALL_OW 44
21838: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21839: LD_VAR 0 14
21843: PPUSH
21844: LD_VAR 0 1
21848: PPUSH
21849: CALL_OW 250
21853: PPUSH
21854: LD_VAR 0 1
21858: PPUSH
21859: CALL_OW 251
21863: PPUSH
21864: LD_INT 10
21866: PPUSH
21867: LD_INT 0
21869: PPUSH
21870: CALL_OW 50
// result := result ^ un ;
21874: LD_ADDR_VAR 0 7
21878: PUSH
21879: LD_VAR 0 7
21883: PUSH
21884: LD_VAR 0 14
21888: ADD
21889: ST_TO_ADDR
// end ;
21890: GO 21768
21892: POP
21893: POP
// end ; end ;
21894: LD_VAR 0 7
21898: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21899: LD_INT 0
21901: PPUSH
21902: PPUSH
21903: PPUSH
21904: PPUSH
21905: PPUSH
21906: PPUSH
21907: PPUSH
21908: PPUSH
21909: PPUSH
21910: PPUSH
21911: PPUSH
21912: PPUSH
21913: PPUSH
21914: PPUSH
21915: PPUSH
21916: PPUSH
// result := false ;
21917: LD_ADDR_VAR 0 3
21921: PUSH
21922: LD_INT 0
21924: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21925: LD_VAR 0 1
21929: NOT
21930: IFTRUE 21955
21932: PUSH
21933: LD_VAR 0 1
21937: PPUSH
21938: CALL_OW 266
21942: PUSH
21943: LD_INT 32
21945: PUSH
21946: LD_INT 33
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: IN
21953: NOT
21954: OR
21955: IFFALSE 21959
// exit ;
21957: GO 23094
// nat := GetNation ( tower ) ;
21959: LD_ADDR_VAR 0 12
21963: PUSH
21964: LD_VAR 0 1
21968: PPUSH
21969: CALL_OW 248
21973: ST_TO_ADDR
// side := GetSide ( tower ) ;
21974: LD_ADDR_VAR 0 16
21978: PUSH
21979: LD_VAR 0 1
21983: PPUSH
21984: CALL_OW 255
21988: ST_TO_ADDR
// x := GetX ( tower ) ;
21989: LD_ADDR_VAR 0 10
21993: PUSH
21994: LD_VAR 0 1
21998: PPUSH
21999: CALL_OW 250
22003: ST_TO_ADDR
// y := GetY ( tower ) ;
22004: LD_ADDR_VAR 0 11
22008: PUSH
22009: LD_VAR 0 1
22013: PPUSH
22014: CALL_OW 251
22018: ST_TO_ADDR
// if not x or not y then
22019: LD_VAR 0 10
22023: NOT
22024: IFTRUE 22033
22026: PUSH
22027: LD_VAR 0 11
22031: NOT
22032: OR
22033: IFFALSE 22037
// exit ;
22035: GO 23094
// weapon := 0 ;
22037: LD_ADDR_VAR 0 18
22041: PUSH
22042: LD_INT 0
22044: ST_TO_ADDR
// fac_list := [ ] ;
22045: LD_ADDR_VAR 0 17
22049: PUSH
22050: EMPTY
22051: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
22052: LD_ADDR_VAR 0 6
22056: PUSH
22057: LD_VAR 0 1
22061: PPUSH
22062: CALL_OW 274
22066: PPUSH
22067: LD_VAR 0 2
22071: PPUSH
22072: LD_INT 0
22074: PPUSH
22075: CALL 19629 0 3
22079: PPUSH
22080: LD_INT 30
22082: PUSH
22083: LD_INT 3
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PPUSH
22090: CALL_OW 72
22094: ST_TO_ADDR
// if not factories then
22095: LD_VAR 0 6
22099: NOT
22100: IFFALSE 22104
// exit ;
22102: GO 23094
// for i in factories do
22104: LD_ADDR_VAR 0 8
22108: PUSH
22109: LD_VAR 0 6
22113: PUSH
22114: FOR_IN
22115: IFFALSE 22140
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22117: LD_ADDR_VAR 0 17
22121: PUSH
22122: LD_VAR 0 17
22126: PUSH
22127: LD_VAR 0 8
22131: PPUSH
22132: CALL_OW 478
22136: UNION
22137: ST_TO_ADDR
22138: GO 22114
22140: POP
22141: POP
// if not fac_list then
22142: LD_VAR 0 17
22146: NOT
22147: IFFALSE 22151
// exit ;
22149: GO 23094
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22151: LD_ADDR_VAR 0 5
22155: PUSH
22156: LD_INT 4
22158: PUSH
22159: LD_INT 5
22161: PUSH
22162: LD_INT 9
22164: PUSH
22165: LD_INT 10
22167: PUSH
22168: LD_INT 6
22170: PUSH
22171: LD_INT 7
22173: PUSH
22174: LD_INT 11
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 27
22188: PUSH
22189: LD_INT 28
22191: PUSH
22192: LD_INT 26
22194: PUSH
22195: LD_INT 30
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 43
22206: PUSH
22207: LD_INT 44
22209: PUSH
22210: LD_INT 46
22212: PUSH
22213: LD_INT 45
22215: PUSH
22216: LD_INT 47
22218: PUSH
22219: LD_INT 49
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: PUSH
22235: LD_VAR 0 12
22239: ARRAY
22240: ST_TO_ADDR
// list := list isect fac_list ;
22241: LD_ADDR_VAR 0 5
22245: PUSH
22246: LD_VAR 0 5
22250: PUSH
22251: LD_VAR 0 17
22255: ISECT
22256: ST_TO_ADDR
// if not list then
22257: LD_VAR 0 5
22261: NOT
22262: IFFALSE 22266
// exit ;
22264: GO 23094
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22266: LD_VAR 0 12
22270: PUSH
22271: LD_INT 3
22273: EQUAL
22274: IFFALSE 22286
22276: PUSH
22277: LD_INT 49
22279: PUSH
22280: LD_VAR 0 5
22284: IN
22285: AND
22286: IFFALSE 22306
22288: PUSH
22289: LD_INT 31
22291: PPUSH
22292: LD_VAR 0 16
22296: PPUSH
22297: CALL_OW 321
22301: PUSH
22302: LD_INT 2
22304: EQUAL
22305: AND
22306: IFFALSE 22366
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22308: LD_INT 22
22310: PUSH
22311: LD_VAR 0 16
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 35
22322: PUSH
22323: LD_INT 49
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 91
22332: PUSH
22333: LD_VAR 0 1
22337: PUSH
22338: LD_INT 10
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: LIST
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: LIST
22350: PPUSH
22351: CALL_OW 69
22355: NOT
22356: IFFALSE 22366
// weapon := ru_time_lapser ;
22358: LD_ADDR_VAR 0 18
22362: PUSH
22363: LD_INT 49
22365: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22366: LD_VAR 0 12
22370: PUSH
22371: LD_INT 1
22373: PUSH
22374: LD_INT 2
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: IN
22381: IFFALSE 22405
22383: PUSH
22384: LD_INT 11
22386: PUSH
22387: LD_VAR 0 5
22391: IN
22392: IFTRUE 22404
22394: PUSH
22395: LD_INT 30
22397: PUSH
22398: LD_VAR 0 5
22402: IN
22403: OR
22404: AND
22405: IFFALSE 22425
22407: PUSH
22408: LD_INT 6
22410: PPUSH
22411: LD_VAR 0 16
22415: PPUSH
22416: CALL_OW 321
22420: PUSH
22421: LD_INT 2
22423: EQUAL
22424: AND
22425: IFFALSE 22592
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22427: LD_INT 22
22429: PUSH
22430: LD_VAR 0 16
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 2
22441: PUSH
22442: LD_INT 35
22444: PUSH
22445: LD_INT 11
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 35
22454: PUSH
22455: LD_INT 30
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 91
22469: PUSH
22470: LD_VAR 0 1
22474: PUSH
22475: LD_INT 18
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: LIST
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: PPUSH
22488: CALL_OW 69
22492: NOT
22493: IFFALSE 22569
22495: PUSH
22496: LD_INT 22
22498: PUSH
22499: LD_VAR 0 16
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 2
22510: PUSH
22511: LD_INT 30
22513: PUSH
22514: LD_INT 32
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 30
22523: PUSH
22524: LD_INT 33
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 91
22538: PUSH
22539: LD_VAR 0 1
22543: PUSH
22544: LD_INT 12
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: LIST
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: LIST
22556: PUSH
22557: EMPTY
22558: LIST
22559: PPUSH
22560: CALL_OW 69
22564: PUSH
22565: LD_INT 2
22567: GREATER
22568: AND
22569: IFFALSE 22592
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22571: LD_ADDR_VAR 0 18
22575: PUSH
22576: LD_INT 11
22578: PUSH
22579: LD_INT 30
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_VAR 0 12
22590: ARRAY
22591: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22592: LD_VAR 0 18
22596: NOT
22597: IFFALSE 22617
22599: PUSH
22600: LD_INT 40
22602: PPUSH
22603: LD_VAR 0 16
22607: PPUSH
22608: CALL_OW 321
22612: PUSH
22613: LD_INT 2
22615: EQUAL
22616: AND
22617: IFFALSE 22653
22619: PUSH
22620: LD_INT 7
22622: PUSH
22623: LD_VAR 0 5
22627: IN
22628: IFTRUE 22640
22630: PUSH
22631: LD_INT 28
22633: PUSH
22634: LD_VAR 0 5
22638: IN
22639: OR
22640: IFTRUE 22652
22642: PUSH
22643: LD_INT 45
22645: PUSH
22646: LD_VAR 0 5
22650: IN
22651: OR
22652: AND
22653: IFFALSE 22907
// begin hex := GetHexInfo ( x , y ) ;
22655: LD_ADDR_VAR 0 4
22659: PUSH
22660: LD_VAR 0 10
22664: PPUSH
22665: LD_VAR 0 11
22669: PPUSH
22670: CALL_OW 546
22674: ST_TO_ADDR
// if hex [ 1 ] then
22675: LD_VAR 0 4
22679: PUSH
22680: LD_INT 1
22682: ARRAY
22683: IFFALSE 22687
// exit ;
22685: GO 23094
// height := hex [ 2 ] ;
22687: LD_ADDR_VAR 0 15
22691: PUSH
22692: LD_VAR 0 4
22696: PUSH
22697: LD_INT 2
22699: ARRAY
22700: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22701: LD_ADDR_VAR 0 14
22705: PUSH
22706: LD_INT 0
22708: PUSH
22709: LD_INT 2
22711: PUSH
22712: LD_INT 3
22714: PUSH
22715: LD_INT 5
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: ST_TO_ADDR
// for i in tmp do
22724: LD_ADDR_VAR 0 8
22728: PUSH
22729: LD_VAR 0 14
22733: PUSH
22734: FOR_IN
22735: IFFALSE 22905
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22737: LD_ADDR_VAR 0 9
22741: PUSH
22742: LD_VAR 0 10
22746: PPUSH
22747: LD_VAR 0 8
22751: PPUSH
22752: LD_INT 5
22754: PPUSH
22755: CALL_OW 272
22759: PUSH
22760: LD_VAR 0 11
22764: PPUSH
22765: LD_VAR 0 8
22769: PPUSH
22770: LD_INT 5
22772: PPUSH
22773: CALL_OW 273
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22782: LD_VAR 0 9
22786: PUSH
22787: LD_INT 1
22789: ARRAY
22790: PPUSH
22791: LD_VAR 0 9
22795: PUSH
22796: LD_INT 2
22798: ARRAY
22799: PPUSH
22800: CALL_OW 488
22804: IFFALSE 22903
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22806: LD_ADDR_VAR 0 4
22810: PUSH
22811: LD_VAR 0 9
22815: PUSH
22816: LD_INT 1
22818: ARRAY
22819: PPUSH
22820: LD_VAR 0 9
22824: PUSH
22825: LD_INT 2
22827: ARRAY
22828: PPUSH
22829: CALL_OW 546
22833: ST_TO_ADDR
// if hex [ 1 ] then
22834: LD_VAR 0 4
22838: PUSH
22839: LD_INT 1
22841: ARRAY
22842: IFFALSE 22846
// continue ;
22844: GO 22734
// h := hex [ 2 ] ;
22846: LD_ADDR_VAR 0 13
22850: PUSH
22851: LD_VAR 0 4
22855: PUSH
22856: LD_INT 2
22858: ARRAY
22859: ST_TO_ADDR
// if h + 7 < height then
22860: LD_VAR 0 13
22864: PUSH
22865: LD_INT 7
22867: PLUS
22868: PUSH
22869: LD_VAR 0 15
22873: LESS
22874: IFFALSE 22903
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22876: LD_ADDR_VAR 0 18
22880: PUSH
22881: LD_INT 7
22883: PUSH
22884: LD_INT 28
22886: PUSH
22887: LD_INT 45
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: LIST
22894: PUSH
22895: LD_VAR 0 12
22899: ARRAY
22900: ST_TO_ADDR
// break ;
22901: GO 22905
// end ; end ; end ;
22903: GO 22734
22905: POP
22906: POP
// end ; if not weapon then
22907: LD_VAR 0 18
22911: NOT
22912: IFFALSE 22972
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22914: LD_ADDR_VAR 0 5
22918: PUSH
22919: LD_VAR 0 5
22923: PUSH
22924: LD_INT 11
22926: PUSH
22927: LD_INT 30
22929: PUSH
22930: LD_INT 49
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: LIST
22937: DIFF
22938: ST_TO_ADDR
// if not list then
22939: LD_VAR 0 5
22943: NOT
22944: IFFALSE 22948
// exit ;
22946: GO 23094
// weapon := list [ rand ( 1 , list ) ] ;
22948: LD_ADDR_VAR 0 18
22952: PUSH
22953: LD_VAR 0 5
22957: PUSH
22958: LD_INT 1
22960: PPUSH
22961: LD_VAR 0 5
22965: PPUSH
22966: CALL_OW 12
22970: ARRAY
22971: ST_TO_ADDR
// end ; if weapon then
22972: LD_VAR 0 18
22976: IFFALSE 23094
// begin tmp := CostOfWeapon ( weapon ) ;
22978: LD_ADDR_VAR 0 14
22982: PUSH
22983: LD_VAR 0 18
22987: PPUSH
22988: CALL_OW 451
22992: ST_TO_ADDR
// j := GetBase ( tower ) ;
22993: LD_ADDR_VAR 0 9
22997: PUSH
22998: LD_VAR 0 1
23002: PPUSH
23003: CALL_OW 274
23007: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23008: LD_VAR 0 9
23012: PPUSH
23013: LD_INT 1
23015: PPUSH
23016: CALL_OW 275
23020: PUSH
23021: LD_VAR 0 14
23025: PUSH
23026: LD_INT 1
23028: ARRAY
23029: GREATEREQUAL
23030: IFFALSE 23056
23032: PUSH
23033: LD_VAR 0 9
23037: PPUSH
23038: LD_INT 2
23040: PPUSH
23041: CALL_OW 275
23045: PUSH
23046: LD_VAR 0 14
23050: PUSH
23051: LD_INT 2
23053: ARRAY
23054: GREATEREQUAL
23055: AND
23056: IFFALSE 23082
23058: PUSH
23059: LD_VAR 0 9
23063: PPUSH
23064: LD_INT 3
23066: PPUSH
23067: CALL_OW 275
23071: PUSH
23072: LD_VAR 0 14
23076: PUSH
23077: LD_INT 3
23079: ARRAY
23080: GREATEREQUAL
23081: AND
23082: IFFALSE 23094
// result := weapon ;
23084: LD_ADDR_VAR 0 3
23088: PUSH
23089: LD_VAR 0 18
23093: ST_TO_ADDR
// end ; end ;
23094: LD_VAR 0 3
23098: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23099: LD_INT 0
23101: PPUSH
23102: PPUSH
// result := true ;
23103: LD_ADDR_VAR 0 3
23107: PUSH
23108: LD_INT 1
23110: ST_TO_ADDR
// if array1 = array2 then
23111: LD_VAR 0 1
23115: PUSH
23116: LD_VAR 0 2
23120: EQUAL
23121: IFFALSE 23181
// begin for i = 1 to array1 do
23123: LD_ADDR_VAR 0 4
23127: PUSH
23128: DOUBLE
23129: LD_INT 1
23131: DEC
23132: ST_TO_ADDR
23133: LD_VAR 0 1
23137: PUSH
23138: FOR_TO
23139: IFFALSE 23177
// if array1 [ i ] <> array2 [ i ] then
23141: LD_VAR 0 1
23145: PUSH
23146: LD_VAR 0 4
23150: ARRAY
23151: PUSH
23152: LD_VAR 0 2
23156: PUSH
23157: LD_VAR 0 4
23161: ARRAY
23162: NONEQUAL
23163: IFFALSE 23175
// begin result := false ;
23165: LD_ADDR_VAR 0 3
23169: PUSH
23170: LD_INT 0
23172: ST_TO_ADDR
// break ;
23173: GO 23177
// end ;
23175: GO 23138
23177: POP
23178: POP
// end else
23179: GO 23189
// result := false ;
23181: LD_ADDR_VAR 0 3
23185: PUSH
23186: LD_INT 0
23188: ST_TO_ADDR
// end ;
23189: LD_VAR 0 3
23193: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
23194: LD_INT 0
23196: PPUSH
23197: PPUSH
// if not array1 or not array2 then
23198: LD_VAR 0 1
23202: NOT
23203: IFTRUE 23212
23205: PUSH
23206: LD_VAR 0 2
23210: NOT
23211: OR
23212: IFFALSE 23216
// exit ;
23214: GO 23280
// result := true ;
23216: LD_ADDR_VAR 0 3
23220: PUSH
23221: LD_INT 1
23223: ST_TO_ADDR
// for i = 1 to array1 do
23224: LD_ADDR_VAR 0 4
23228: PUSH
23229: DOUBLE
23230: LD_INT 1
23232: DEC
23233: ST_TO_ADDR
23234: LD_VAR 0 1
23238: PUSH
23239: FOR_TO
23240: IFFALSE 23278
// if array1 [ i ] <> array2 [ i ] then
23242: LD_VAR 0 1
23246: PUSH
23247: LD_VAR 0 4
23251: ARRAY
23252: PUSH
23253: LD_VAR 0 2
23257: PUSH
23258: LD_VAR 0 4
23262: ARRAY
23263: NONEQUAL
23264: IFFALSE 23276
// begin result := false ;
23266: LD_ADDR_VAR 0 3
23270: PUSH
23271: LD_INT 0
23273: ST_TO_ADDR
// break ;
23274: GO 23278
// end ;
23276: GO 23239
23278: POP
23279: POP
// end ;
23280: LD_VAR 0 3
23284: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23285: LD_INT 0
23287: PPUSH
23288: PPUSH
23289: PPUSH
// pom := GetBase ( fac ) ;
23290: LD_ADDR_VAR 0 5
23294: PUSH
23295: LD_VAR 0 1
23299: PPUSH
23300: CALL_OW 274
23304: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23305: LD_ADDR_VAR 0 4
23309: PUSH
23310: LD_VAR 0 2
23314: PUSH
23315: LD_INT 1
23317: ARRAY
23318: PPUSH
23319: LD_VAR 0 2
23323: PUSH
23324: LD_INT 2
23326: ARRAY
23327: PPUSH
23328: LD_VAR 0 2
23332: PUSH
23333: LD_INT 3
23335: ARRAY
23336: PPUSH
23337: LD_VAR 0 2
23341: PUSH
23342: LD_INT 4
23344: ARRAY
23345: PPUSH
23346: CALL_OW 449
23350: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23351: LD_ADDR_VAR 0 3
23355: PUSH
23356: LD_VAR 0 5
23360: PPUSH
23361: LD_INT 1
23363: PPUSH
23364: CALL_OW 275
23368: PUSH
23369: LD_VAR 0 4
23373: PUSH
23374: LD_INT 1
23376: ARRAY
23377: GREATEREQUAL
23378: IFFALSE 23404
23380: PUSH
23381: LD_VAR 0 5
23385: PPUSH
23386: LD_INT 2
23388: PPUSH
23389: CALL_OW 275
23393: PUSH
23394: LD_VAR 0 4
23398: PUSH
23399: LD_INT 2
23401: ARRAY
23402: GREATEREQUAL
23403: AND
23404: IFFALSE 23430
23406: PUSH
23407: LD_VAR 0 5
23411: PPUSH
23412: LD_INT 3
23414: PPUSH
23415: CALL_OW 275
23419: PUSH
23420: LD_VAR 0 4
23424: PUSH
23425: LD_INT 3
23427: ARRAY
23428: GREATEREQUAL
23429: AND
23430: ST_TO_ADDR
// end ;
23431: LD_VAR 0 3
23435: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23436: LD_INT 0
23438: PPUSH
23439: PPUSH
23440: PPUSH
23441: PPUSH
// pom := GetBase ( building ) ;
23442: LD_ADDR_VAR 0 3
23446: PUSH
23447: LD_VAR 0 1
23451: PPUSH
23452: CALL_OW 274
23456: ST_TO_ADDR
// if not pom then
23457: LD_VAR 0 3
23461: NOT
23462: IFFALSE 23466
// exit ;
23464: GO 23640
// btype := GetBType ( building ) ;
23466: LD_ADDR_VAR 0 5
23470: PUSH
23471: LD_VAR 0 1
23475: PPUSH
23476: CALL_OW 266
23480: ST_TO_ADDR
// if btype = b_armoury then
23481: LD_VAR 0 5
23485: PUSH
23486: LD_INT 4
23488: EQUAL
23489: IFFALSE 23499
// btype := b_barracks ;
23491: LD_ADDR_VAR 0 5
23495: PUSH
23496: LD_INT 5
23498: ST_TO_ADDR
// if btype = b_depot then
23499: LD_VAR 0 5
23503: PUSH
23504: LD_INT 0
23506: EQUAL
23507: IFFALSE 23517
// btype := b_warehouse ;
23509: LD_ADDR_VAR 0 5
23513: PUSH
23514: LD_INT 1
23516: ST_TO_ADDR
// if btype = b_workshop then
23517: LD_VAR 0 5
23521: PUSH
23522: LD_INT 2
23524: EQUAL
23525: IFFALSE 23535
// btype := b_factory ;
23527: LD_ADDR_VAR 0 5
23531: PUSH
23532: LD_INT 3
23534: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23535: LD_ADDR_VAR 0 4
23539: PUSH
23540: LD_VAR 0 5
23544: PPUSH
23545: LD_VAR 0 1
23549: PPUSH
23550: CALL_OW 248
23554: PPUSH
23555: CALL_OW 450
23559: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23560: LD_ADDR_VAR 0 2
23564: PUSH
23565: LD_VAR 0 3
23569: PPUSH
23570: LD_INT 1
23572: PPUSH
23573: CALL_OW 275
23577: PUSH
23578: LD_VAR 0 4
23582: PUSH
23583: LD_INT 1
23585: ARRAY
23586: GREATEREQUAL
23587: IFFALSE 23613
23589: PUSH
23590: LD_VAR 0 3
23594: PPUSH
23595: LD_INT 2
23597: PPUSH
23598: CALL_OW 275
23602: PUSH
23603: LD_VAR 0 4
23607: PUSH
23608: LD_INT 2
23610: ARRAY
23611: GREATEREQUAL
23612: AND
23613: IFFALSE 23639
23615: PUSH
23616: LD_VAR 0 3
23620: PPUSH
23621: LD_INT 3
23623: PPUSH
23624: CALL_OW 275
23628: PUSH
23629: LD_VAR 0 4
23633: PUSH
23634: LD_INT 3
23636: ARRAY
23637: GREATEREQUAL
23638: AND
23639: ST_TO_ADDR
// end ;
23640: LD_VAR 0 2
23644: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23645: LD_INT 0
23647: PPUSH
23648: PPUSH
23649: PPUSH
// pom := GetBase ( building ) ;
23650: LD_ADDR_VAR 0 4
23654: PUSH
23655: LD_VAR 0 1
23659: PPUSH
23660: CALL_OW 274
23664: ST_TO_ADDR
// if not pom then
23665: LD_VAR 0 4
23669: NOT
23670: IFFALSE 23674
// exit ;
23672: GO 23779
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23674: LD_ADDR_VAR 0 5
23678: PUSH
23679: LD_VAR 0 2
23683: PPUSH
23684: LD_VAR 0 1
23688: PPUSH
23689: CALL_OW 248
23693: PPUSH
23694: CALL_OW 450
23698: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23699: LD_ADDR_VAR 0 3
23703: PUSH
23704: LD_VAR 0 4
23708: PPUSH
23709: LD_INT 1
23711: PPUSH
23712: CALL_OW 275
23716: PUSH
23717: LD_VAR 0 5
23721: PUSH
23722: LD_INT 1
23724: ARRAY
23725: GREATEREQUAL
23726: IFFALSE 23752
23728: PUSH
23729: LD_VAR 0 4
23733: PPUSH
23734: LD_INT 2
23736: PPUSH
23737: CALL_OW 275
23741: PUSH
23742: LD_VAR 0 5
23746: PUSH
23747: LD_INT 2
23749: ARRAY
23750: GREATEREQUAL
23751: AND
23752: IFFALSE 23778
23754: PUSH
23755: LD_VAR 0 4
23759: PPUSH
23760: LD_INT 3
23762: PPUSH
23763: CALL_OW 275
23767: PUSH
23768: LD_VAR 0 5
23772: PUSH
23773: LD_INT 3
23775: ARRAY
23776: GREATEREQUAL
23777: AND
23778: ST_TO_ADDR
// end ;
23779: LD_VAR 0 3
23783: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23784: LD_INT 0
23786: PPUSH
23787: PPUSH
23788: PPUSH
23789: PPUSH
23790: PPUSH
23791: PPUSH
23792: PPUSH
23793: PPUSH
23794: PPUSH
23795: PPUSH
23796: PPUSH
// result := false ;
23797: LD_ADDR_VAR 0 8
23801: PUSH
23802: LD_INT 0
23804: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23805: LD_VAR 0 5
23809: NOT
23810: IFTRUE 23819
23812: PUSH
23813: LD_VAR 0 1
23817: NOT
23818: OR
23819: IFTRUE 23828
23821: PUSH
23822: LD_VAR 0 2
23826: NOT
23827: OR
23828: IFTRUE 23837
23830: PUSH
23831: LD_VAR 0 3
23835: NOT
23836: OR
23837: IFFALSE 23841
// exit ;
23839: GO 24667
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23841: LD_ADDR_VAR 0 14
23845: PUSH
23846: LD_VAR 0 1
23850: PPUSH
23851: LD_VAR 0 2
23855: PPUSH
23856: LD_VAR 0 3
23860: PPUSH
23861: LD_VAR 0 4
23865: PPUSH
23866: LD_VAR 0 5
23870: PUSH
23871: LD_INT 1
23873: ARRAY
23874: PPUSH
23875: CALL_OW 248
23879: PPUSH
23880: LD_INT 0
23882: PPUSH
23883: CALL 25948 0 6
23887: ST_TO_ADDR
// if not hexes then
23888: LD_VAR 0 14
23892: NOT
23893: IFFALSE 23897
// exit ;
23895: GO 24667
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23897: LD_ADDR_VAR 0 17
23901: PUSH
23902: LD_VAR 0 5
23906: PPUSH
23907: LD_INT 22
23909: PUSH
23910: LD_VAR 0 13
23914: PPUSH
23915: CALL_OW 255
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 2
23926: PUSH
23927: LD_INT 30
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 30
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: LIST
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PPUSH
23956: CALL_OW 72
23960: ST_TO_ADDR
// for i = 1 to hexes do
23961: LD_ADDR_VAR 0 9
23965: PUSH
23966: DOUBLE
23967: LD_INT 1
23969: DEC
23970: ST_TO_ADDR
23971: LD_VAR 0 14
23975: PUSH
23976: FOR_TO
23977: IFFALSE 24665
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23979: LD_ADDR_VAR 0 13
23983: PUSH
23984: LD_VAR 0 14
23988: PUSH
23989: LD_VAR 0 9
23993: ARRAY
23994: PUSH
23995: LD_INT 1
23997: ARRAY
23998: PPUSH
23999: LD_VAR 0 14
24003: PUSH
24004: LD_VAR 0 9
24008: ARRAY
24009: PUSH
24010: LD_INT 2
24012: ARRAY
24013: PPUSH
24014: CALL_OW 428
24018: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24019: LD_VAR 0 14
24023: PUSH
24024: LD_VAR 0 9
24028: ARRAY
24029: PUSH
24030: LD_INT 1
24032: ARRAY
24033: PPUSH
24034: LD_VAR 0 14
24038: PUSH
24039: LD_VAR 0 9
24043: ARRAY
24044: PUSH
24045: LD_INT 2
24047: ARRAY
24048: PPUSH
24049: CALL_OW 351
24053: IFTRUE 24092
24055: PUSH
24056: LD_VAR 0 14
24060: PUSH
24061: LD_VAR 0 9
24065: ARRAY
24066: PUSH
24067: LD_INT 1
24069: ARRAY
24070: PPUSH
24071: LD_VAR 0 14
24075: PUSH
24076: LD_VAR 0 9
24080: ARRAY
24081: PUSH
24082: LD_INT 2
24084: ARRAY
24085: PPUSH
24086: CALL_OW 488
24090: NOT
24091: OR
24092: IFTRUE 24109
24094: PUSH
24095: LD_VAR 0 13
24099: PPUSH
24100: CALL_OW 247
24104: PUSH
24105: LD_INT 3
24107: EQUAL
24108: OR
24109: IFFALSE 24115
// exit ;
24111: POP
24112: POP
24113: GO 24667
// if not tmp then
24115: LD_VAR 0 13
24119: NOT
24120: IFFALSE 24124
// continue ;
24122: GO 23976
// result := true ;
24124: LD_ADDR_VAR 0 8
24128: PUSH
24129: LD_INT 1
24131: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
24132: LD_VAR 0 6
24136: IFFALSE 24153
24138: PUSH
24139: LD_VAR 0 13
24143: PPUSH
24144: CALL_OW 247
24148: PUSH
24149: LD_INT 2
24151: EQUAL
24152: AND
24153: IFFALSE 24170
24155: PUSH
24156: LD_VAR 0 13
24160: PPUSH
24161: CALL_OW 263
24165: PUSH
24166: LD_INT 1
24168: EQUAL
24169: AND
24170: IFFALSE 24334
// begin if IsDrivenBy ( tmp ) then
24172: LD_VAR 0 13
24176: PPUSH
24177: CALL_OW 311
24181: IFFALSE 24185
// continue ;
24183: GO 23976
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
24185: LD_VAR 0 6
24189: PPUSH
24190: LD_INT 3
24192: PUSH
24193: LD_INT 60
24195: PUSH
24196: EMPTY
24197: LIST
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 3
24205: PUSH
24206: LD_INT 55
24208: PUSH
24209: EMPTY
24210: LIST
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PPUSH
24220: CALL_OW 72
24224: IFFALSE 24332
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
24226: LD_ADDR_VAR 0 18
24230: PUSH
24231: LD_VAR 0 6
24235: PPUSH
24236: LD_INT 3
24238: PUSH
24239: LD_INT 60
24241: PUSH
24242: EMPTY
24243: LIST
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 3
24251: PUSH
24252: LD_INT 55
24254: PUSH
24255: EMPTY
24256: LIST
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PPUSH
24266: CALL_OW 72
24270: PUSH
24271: LD_INT 1
24273: ARRAY
24274: ST_TO_ADDR
// if IsInUnit ( driver ) then
24275: LD_VAR 0 18
24279: PPUSH
24280: CALL_OW 310
24284: IFFALSE 24295
// ComExit ( driver ) ;
24286: LD_VAR 0 18
24290: PPUSH
24291: CALL 49948 0 1
// AddComEnterUnit ( driver , tmp ) ;
24295: LD_VAR 0 18
24299: PPUSH
24300: LD_VAR 0 13
24304: PPUSH
24305: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
24309: LD_VAR 0 18
24313: PPUSH
24314: LD_VAR 0 7
24318: PPUSH
24319: CALL_OW 173
// AddComExitVehicle ( driver ) ;
24323: LD_VAR 0 18
24327: PPUSH
24328: CALL_OW 181
// end ; continue ;
24332: GO 23976
// end ; if not cleaners or not tmp in cleaners then
24334: LD_VAR 0 6
24338: NOT
24339: IFTRUE 24354
24341: PUSH
24342: LD_VAR 0 13
24346: PUSH
24347: LD_VAR 0 6
24351: IN
24352: NOT
24353: OR
24354: IFFALSE 24663
// begin if dep then
24356: LD_VAR 0 17
24360: IFFALSE 24496
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24362: LD_ADDR_VAR 0 16
24366: PUSH
24367: LD_VAR 0 17
24371: PUSH
24372: LD_INT 1
24374: ARRAY
24375: PPUSH
24376: CALL_OW 250
24380: PPUSH
24381: LD_VAR 0 17
24385: PUSH
24386: LD_INT 1
24388: ARRAY
24389: PPUSH
24390: CALL_OW 254
24394: PPUSH
24395: LD_INT 5
24397: PPUSH
24398: CALL_OW 272
24402: PUSH
24403: LD_VAR 0 17
24407: PUSH
24408: LD_INT 1
24410: ARRAY
24411: PPUSH
24412: CALL_OW 251
24416: PPUSH
24417: LD_VAR 0 17
24421: PUSH
24422: LD_INT 1
24424: ARRAY
24425: PPUSH
24426: CALL_OW 254
24430: PPUSH
24431: LD_INT 5
24433: PPUSH
24434: CALL_OW 273
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24443: LD_VAR 0 16
24447: PUSH
24448: LD_INT 1
24450: ARRAY
24451: PPUSH
24452: LD_VAR 0 16
24456: PUSH
24457: LD_INT 2
24459: ARRAY
24460: PPUSH
24461: CALL_OW 488
24465: IFFALSE 24496
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24467: LD_VAR 0 13
24471: PPUSH
24472: LD_VAR 0 16
24476: PUSH
24477: LD_INT 1
24479: ARRAY
24480: PPUSH
24481: LD_VAR 0 16
24485: PUSH
24486: LD_INT 2
24488: ARRAY
24489: PPUSH
24490: CALL_OW 111
// continue ;
24494: GO 23976
// end ; end ; r := GetDir ( tmp ) ;
24496: LD_ADDR_VAR 0 15
24500: PUSH
24501: LD_VAR 0 13
24505: PPUSH
24506: CALL_OW 254
24510: ST_TO_ADDR
// if r = 5 then
24511: LD_VAR 0 15
24515: PUSH
24516: LD_INT 5
24518: EQUAL
24519: IFFALSE 24529
// r := 0 ;
24521: LD_ADDR_VAR 0 15
24525: PUSH
24526: LD_INT 0
24528: ST_TO_ADDR
// for j = r to 5 do
24529: LD_ADDR_VAR 0 10
24533: PUSH
24534: DOUBLE
24535: LD_VAR 0 15
24539: DEC
24540: ST_TO_ADDR
24541: LD_INT 5
24543: PUSH
24544: FOR_TO
24545: IFFALSE 24661
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24547: LD_ADDR_VAR 0 11
24551: PUSH
24552: LD_VAR 0 13
24556: PPUSH
24557: CALL_OW 250
24561: PPUSH
24562: LD_VAR 0 10
24566: PPUSH
24567: LD_INT 2
24569: PPUSH
24570: CALL_OW 272
24574: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24575: LD_ADDR_VAR 0 12
24579: PUSH
24580: LD_VAR 0 13
24584: PPUSH
24585: CALL_OW 251
24589: PPUSH
24590: LD_VAR 0 10
24594: PPUSH
24595: LD_INT 2
24597: PPUSH
24598: CALL_OW 273
24602: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24603: LD_VAR 0 11
24607: PPUSH
24608: LD_VAR 0 12
24612: PPUSH
24613: CALL_OW 488
24617: IFFALSE 24636
24619: PUSH
24620: LD_VAR 0 11
24624: PPUSH
24625: LD_VAR 0 12
24629: PPUSH
24630: CALL_OW 428
24634: NOT
24635: AND
24636: IFFALSE 24659
// begin ComMoveXY ( tmp , _x , _y ) ;
24638: LD_VAR 0 13
24642: PPUSH
24643: LD_VAR 0 11
24647: PPUSH
24648: LD_VAR 0 12
24652: PPUSH
24653: CALL_OW 111
// break ;
24657: GO 24661
// end ; end ;
24659: GO 24544
24661: POP
24662: POP
// end ; end ;
24663: GO 23976
24665: POP
24666: POP
// end ;
24667: LD_VAR 0 8
24671: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24672: LD_INT 0
24674: PPUSH
// result := true ;
24675: LD_ADDR_VAR 0 3
24679: PUSH
24680: LD_INT 1
24682: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24683: LD_VAR 0 2
24687: PUSH
24688: LD_INT 24
24690: DOUBLE
24691: EQUAL
24692: IFTRUE 24702
24694: LD_INT 33
24696: DOUBLE
24697: EQUAL
24698: IFTRUE 24702
24700: GO 24727
24702: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24703: LD_ADDR_VAR 0 3
24707: PUSH
24708: LD_INT 32
24710: PPUSH
24711: LD_VAR 0 1
24715: PPUSH
24716: CALL_OW 321
24720: PUSH
24721: LD_INT 2
24723: EQUAL
24724: ST_TO_ADDR
24725: GO 25043
24727: LD_INT 20
24729: DOUBLE
24730: EQUAL
24731: IFTRUE 24735
24733: GO 24760
24735: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24736: LD_ADDR_VAR 0 3
24740: PUSH
24741: LD_INT 6
24743: PPUSH
24744: LD_VAR 0 1
24748: PPUSH
24749: CALL_OW 321
24753: PUSH
24754: LD_INT 2
24756: EQUAL
24757: ST_TO_ADDR
24758: GO 25043
24760: LD_INT 22
24762: DOUBLE
24763: EQUAL
24764: IFTRUE 24774
24766: LD_INT 36
24768: DOUBLE
24769: EQUAL
24770: IFTRUE 24774
24772: GO 24799
24774: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24775: LD_ADDR_VAR 0 3
24779: PUSH
24780: LD_INT 15
24782: PPUSH
24783: LD_VAR 0 1
24787: PPUSH
24788: CALL_OW 321
24792: PUSH
24793: LD_INT 2
24795: EQUAL
24796: ST_TO_ADDR
24797: GO 25043
24799: LD_INT 30
24801: DOUBLE
24802: EQUAL
24803: IFTRUE 24807
24805: GO 24832
24807: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24808: LD_ADDR_VAR 0 3
24812: PUSH
24813: LD_INT 20
24815: PPUSH
24816: LD_VAR 0 1
24820: PPUSH
24821: CALL_OW 321
24825: PUSH
24826: LD_INT 2
24828: EQUAL
24829: ST_TO_ADDR
24830: GO 25043
24832: LD_INT 28
24834: DOUBLE
24835: EQUAL
24836: IFTRUE 24846
24838: LD_INT 21
24840: DOUBLE
24841: EQUAL
24842: IFTRUE 24846
24844: GO 24871
24846: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24847: LD_ADDR_VAR 0 3
24851: PUSH
24852: LD_INT 21
24854: PPUSH
24855: LD_VAR 0 1
24859: PPUSH
24860: CALL_OW 321
24864: PUSH
24865: LD_INT 2
24867: EQUAL
24868: ST_TO_ADDR
24869: GO 25043
24871: LD_INT 16
24873: DOUBLE
24874: EQUAL
24875: IFTRUE 24879
24877: GO 24904
24879: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24880: LD_ADDR_VAR 0 3
24884: PUSH
24885: LD_INT 84
24887: PPUSH
24888: LD_VAR 0 1
24892: PPUSH
24893: CALL_OW 321
24897: PUSH
24898: LD_INT 2
24900: EQUAL
24901: ST_TO_ADDR
24902: GO 25043
24904: LD_INT 19
24906: DOUBLE
24907: EQUAL
24908: IFTRUE 24918
24910: LD_INT 23
24912: DOUBLE
24913: EQUAL
24914: IFTRUE 24918
24916: GO 24943
24918: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24919: LD_ADDR_VAR 0 3
24923: PUSH
24924: LD_INT 83
24926: PPUSH
24927: LD_VAR 0 1
24931: PPUSH
24932: CALL_OW 321
24936: PUSH
24937: LD_INT 2
24939: EQUAL
24940: ST_TO_ADDR
24941: GO 25043
24943: LD_INT 17
24945: DOUBLE
24946: EQUAL
24947: IFTRUE 24951
24949: GO 24976
24951: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24952: LD_ADDR_VAR 0 3
24956: PUSH
24957: LD_INT 39
24959: PPUSH
24960: LD_VAR 0 1
24964: PPUSH
24965: CALL_OW 321
24969: PUSH
24970: LD_INT 2
24972: EQUAL
24973: ST_TO_ADDR
24974: GO 25043
24976: LD_INT 18
24978: DOUBLE
24979: EQUAL
24980: IFTRUE 24984
24982: GO 25009
24984: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24985: LD_ADDR_VAR 0 3
24989: PUSH
24990: LD_INT 40
24992: PPUSH
24993: LD_VAR 0 1
24997: PPUSH
24998: CALL_OW 321
25002: PUSH
25003: LD_INT 2
25005: EQUAL
25006: ST_TO_ADDR
25007: GO 25043
25009: LD_INT 27
25011: DOUBLE
25012: EQUAL
25013: IFTRUE 25017
25015: GO 25042
25017: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
25018: LD_ADDR_VAR 0 3
25022: PUSH
25023: LD_INT 35
25025: PPUSH
25026: LD_VAR 0 1
25030: PPUSH
25031: CALL_OW 321
25035: PUSH
25036: LD_INT 2
25038: EQUAL
25039: ST_TO_ADDR
25040: GO 25043
25042: POP
// end ;
25043: LD_VAR 0 3
25047: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
25048: LD_INT 0
25050: PPUSH
25051: PPUSH
25052: PPUSH
25053: PPUSH
25054: PPUSH
25055: PPUSH
25056: PPUSH
25057: PPUSH
25058: PPUSH
25059: PPUSH
25060: PPUSH
// result := false ;
25061: LD_ADDR_VAR 0 6
25065: PUSH
25066: LD_INT 0
25068: ST_TO_ADDR
// if btype = b_depot then
25069: LD_VAR 0 2
25073: PUSH
25074: LD_INT 0
25076: EQUAL
25077: IFFALSE 25089
// begin result := true ;
25079: LD_ADDR_VAR 0 6
25083: PUSH
25084: LD_INT 1
25086: ST_TO_ADDR
// exit ;
25087: GO 25943
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25089: LD_VAR 0 1
25093: NOT
25094: IFTRUE 25119
25096: PUSH
25097: LD_VAR 0 1
25101: PPUSH
25102: CALL_OW 266
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: LD_INT 1
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: IN
25117: NOT
25118: OR
25119: IFTRUE 25128
25121: PUSH
25122: LD_VAR 0 2
25126: NOT
25127: OR
25128: IFTRUE 25164
25130: PUSH
25131: LD_VAR 0 5
25135: PUSH
25136: LD_INT 0
25138: PUSH
25139: LD_INT 1
25141: PUSH
25142: LD_INT 2
25144: PUSH
25145: LD_INT 3
25147: PUSH
25148: LD_INT 4
25150: PUSH
25151: LD_INT 5
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: IN
25162: NOT
25163: OR
25164: IFTRUE 25183
25166: PUSH
25167: LD_VAR 0 3
25171: PPUSH
25172: LD_VAR 0 4
25176: PPUSH
25177: CALL_OW 488
25181: NOT
25182: OR
25183: IFFALSE 25187
// exit ;
25185: GO 25943
// side := GetSide ( depot ) ;
25187: LD_ADDR_VAR 0 9
25191: PUSH
25192: LD_VAR 0 1
25196: PPUSH
25197: CALL_OW 255
25201: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
25202: LD_VAR 0 9
25206: PPUSH
25207: LD_VAR 0 2
25211: PPUSH
25212: CALL 24672 0 2
25216: NOT
25217: IFFALSE 25221
// exit ;
25219: GO 25943
// pom := GetBase ( depot ) ;
25221: LD_ADDR_VAR 0 10
25225: PUSH
25226: LD_VAR 0 1
25230: PPUSH
25231: CALL_OW 274
25235: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25236: LD_ADDR_VAR 0 11
25240: PUSH
25241: LD_VAR 0 2
25245: PPUSH
25246: LD_VAR 0 1
25250: PPUSH
25251: CALL_OW 248
25255: PPUSH
25256: CALL_OW 450
25260: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25261: LD_VAR 0 10
25265: PPUSH
25266: LD_INT 1
25268: PPUSH
25269: CALL_OW 275
25273: PUSH
25274: LD_VAR 0 11
25278: PUSH
25279: LD_INT 1
25281: ARRAY
25282: GREATEREQUAL
25283: IFFALSE 25309
25285: PUSH
25286: LD_VAR 0 10
25290: PPUSH
25291: LD_INT 2
25293: PPUSH
25294: CALL_OW 275
25298: PUSH
25299: LD_VAR 0 11
25303: PUSH
25304: LD_INT 2
25306: ARRAY
25307: GREATEREQUAL
25308: AND
25309: IFFALSE 25335
25311: PUSH
25312: LD_VAR 0 10
25316: PPUSH
25317: LD_INT 3
25319: PPUSH
25320: CALL_OW 275
25324: PUSH
25325: LD_VAR 0 11
25329: PUSH
25330: LD_INT 3
25332: ARRAY
25333: GREATEREQUAL
25334: AND
25335: NOT
25336: IFFALSE 25340
// exit ;
25338: GO 25943
// if GetBType ( depot ) = b_depot then
25340: LD_VAR 0 1
25344: PPUSH
25345: CALL_OW 266
25349: PUSH
25350: LD_INT 0
25352: EQUAL
25353: IFFALSE 25365
// dist := 28 else
25355: LD_ADDR_VAR 0 14
25359: PUSH
25360: LD_INT 28
25362: ST_TO_ADDR
25363: GO 25373
// dist := 36 ;
25365: LD_ADDR_VAR 0 14
25369: PUSH
25370: LD_INT 36
25372: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25373: LD_VAR 0 1
25377: PPUSH
25378: LD_VAR 0 3
25382: PPUSH
25383: LD_VAR 0 4
25387: PPUSH
25388: CALL_OW 297
25392: PUSH
25393: LD_VAR 0 14
25397: GREATER
25398: IFFALSE 25402
// exit ;
25400: GO 25943
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25402: LD_ADDR_VAR 0 12
25406: PUSH
25407: LD_VAR 0 2
25411: PPUSH
25412: LD_VAR 0 3
25416: PPUSH
25417: LD_VAR 0 4
25421: PPUSH
25422: LD_VAR 0 5
25426: PPUSH
25427: LD_VAR 0 1
25431: PPUSH
25432: CALL_OW 248
25436: PPUSH
25437: LD_INT 0
25439: PPUSH
25440: CALL 25948 0 6
25444: ST_TO_ADDR
// if not hexes then
25445: LD_VAR 0 12
25449: NOT
25450: IFFALSE 25454
// exit ;
25452: GO 25943
// hex := GetHexInfo ( x , y ) ;
25454: LD_ADDR_VAR 0 15
25458: PUSH
25459: LD_VAR 0 3
25463: PPUSH
25464: LD_VAR 0 4
25468: PPUSH
25469: CALL_OW 546
25473: ST_TO_ADDR
// if hex [ 1 ] then
25474: LD_VAR 0 15
25478: PUSH
25479: LD_INT 1
25481: ARRAY
25482: IFFALSE 25486
// exit ;
25484: GO 25943
// height := hex [ 2 ] ;
25486: LD_ADDR_VAR 0 13
25490: PUSH
25491: LD_VAR 0 15
25495: PUSH
25496: LD_INT 2
25498: ARRAY
25499: ST_TO_ADDR
// for i = 1 to hexes do
25500: LD_ADDR_VAR 0 7
25504: PUSH
25505: DOUBLE
25506: LD_INT 1
25508: DEC
25509: ST_TO_ADDR
25510: LD_VAR 0 12
25514: PUSH
25515: FOR_TO
25516: IFFALSE 25860
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25518: LD_VAR 0 12
25522: PUSH
25523: LD_VAR 0 7
25527: ARRAY
25528: PUSH
25529: LD_INT 1
25531: ARRAY
25532: PPUSH
25533: LD_VAR 0 12
25537: PUSH
25538: LD_VAR 0 7
25542: ARRAY
25543: PUSH
25544: LD_INT 2
25546: ARRAY
25547: PPUSH
25548: CALL_OW 488
25552: NOT
25553: IFTRUE 25595
25555: PUSH
25556: LD_VAR 0 12
25560: PUSH
25561: LD_VAR 0 7
25565: ARRAY
25566: PUSH
25567: LD_INT 1
25569: ARRAY
25570: PPUSH
25571: LD_VAR 0 12
25575: PUSH
25576: LD_VAR 0 7
25580: ARRAY
25581: PUSH
25582: LD_INT 2
25584: ARRAY
25585: PPUSH
25586: CALL_OW 428
25590: PUSH
25591: LD_INT 0
25593: GREATER
25594: OR
25595: IFTRUE 25633
25597: PUSH
25598: LD_VAR 0 12
25602: PUSH
25603: LD_VAR 0 7
25607: ARRAY
25608: PUSH
25609: LD_INT 1
25611: ARRAY
25612: PPUSH
25613: LD_VAR 0 12
25617: PUSH
25618: LD_VAR 0 7
25622: ARRAY
25623: PUSH
25624: LD_INT 2
25626: ARRAY
25627: PPUSH
25628: CALL_OW 351
25632: OR
25633: IFFALSE 25639
// exit ;
25635: POP
25636: POP
25637: GO 25943
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25639: LD_ADDR_VAR 0 8
25643: PUSH
25644: LD_VAR 0 12
25648: PUSH
25649: LD_VAR 0 7
25653: ARRAY
25654: PUSH
25655: LD_INT 1
25657: ARRAY
25658: PPUSH
25659: LD_VAR 0 12
25663: PUSH
25664: LD_VAR 0 7
25668: ARRAY
25669: PUSH
25670: LD_INT 2
25672: ARRAY
25673: PPUSH
25674: CALL_OW 546
25678: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25679: LD_VAR 0 8
25683: PUSH
25684: LD_INT 1
25686: ARRAY
25687: IFTRUE 25709
25689: PUSH
25690: LD_VAR 0 8
25694: PUSH
25695: LD_INT 2
25697: ARRAY
25698: PUSH
25699: LD_VAR 0 13
25703: PUSH
25704: LD_INT 2
25706: PLUS
25707: GREATER
25708: OR
25709: IFTRUE 25731
25711: PUSH
25712: LD_VAR 0 8
25716: PUSH
25717: LD_INT 2
25719: ARRAY
25720: PUSH
25721: LD_VAR 0 13
25725: PUSH
25726: LD_INT 2
25728: MINUS
25729: LESS
25730: OR
25731: IFTRUE 25799
25733: PUSH
25734: LD_VAR 0 8
25738: PUSH
25739: LD_INT 3
25741: ARRAY
25742: PUSH
25743: LD_INT 0
25745: PUSH
25746: LD_INT 8
25748: PUSH
25749: LD_INT 9
25751: PUSH
25752: LD_INT 10
25754: PUSH
25755: LD_INT 11
25757: PUSH
25758: LD_INT 12
25760: PUSH
25761: LD_INT 13
25763: PUSH
25764: LD_INT 16
25766: PUSH
25767: LD_INT 17
25769: PUSH
25770: LD_INT 18
25772: PUSH
25773: LD_INT 19
25775: PUSH
25776: LD_INT 20
25778: PUSH
25779: LD_INT 21
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: IN
25797: NOT
25798: OR
25799: IFTRUE 25812
25801: PUSH
25802: LD_VAR 0 8
25806: PUSH
25807: LD_INT 5
25809: ARRAY
25810: NOT
25811: OR
25812: IFTRUE 25852
25814: PUSH
25815: LD_VAR 0 8
25819: PUSH
25820: LD_INT 6
25822: ARRAY
25823: PUSH
25824: LD_INT 1
25826: PUSH
25827: LD_INT 2
25829: PUSH
25830: LD_INT 7
25832: PUSH
25833: LD_INT 9
25835: PUSH
25836: LD_INT 10
25838: PUSH
25839: LD_INT 11
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: IN
25850: NOT
25851: OR
25852: IFFALSE 25858
// exit ;
25854: POP
25855: POP
25856: GO 25943
// end ;
25858: GO 25515
25860: POP
25861: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25862: LD_VAR 0 9
25866: PPUSH
25867: LD_VAR 0 3
25871: PPUSH
25872: LD_VAR 0 4
25876: PPUSH
25877: LD_INT 20
25879: PPUSH
25880: CALL 17762 0 4
25884: PUSH
25885: LD_INT 4
25887: ARRAY
25888: IFFALSE 25892
// exit ;
25890: GO 25943
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25892: LD_VAR 0 2
25896: PUSH
25897: LD_INT 29
25899: PUSH
25900: LD_INT 30
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: IN
25907: IFFALSE 25931
25909: PUSH
25910: LD_VAR 0 3
25914: PPUSH
25915: LD_VAR 0 4
25919: PPUSH
25920: LD_VAR 0 9
25924: PPUSH
25925: CALL_OW 440
25929: NOT
25930: AND
25931: IFFALSE 25935
// exit ;
25933: GO 25943
// result := true ;
25935: LD_ADDR_VAR 0 6
25939: PUSH
25940: LD_INT 1
25942: ST_TO_ADDR
// end ;
25943: LD_VAR 0 6
25947: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25948: LD_INT 0
25950: PPUSH
25951: PPUSH
25952: PPUSH
25953: PPUSH
25954: PPUSH
25955: PPUSH
25956: PPUSH
25957: PPUSH
25958: PPUSH
25959: PPUSH
25960: PPUSH
25961: PPUSH
25962: PPUSH
25963: PPUSH
25964: PPUSH
25965: PPUSH
25966: PPUSH
25967: PPUSH
25968: PPUSH
25969: PPUSH
25970: PPUSH
25971: PPUSH
25972: PPUSH
25973: PPUSH
25974: PPUSH
25975: PPUSH
25976: PPUSH
25977: PPUSH
25978: PPUSH
25979: PPUSH
25980: PPUSH
25981: PPUSH
25982: PPUSH
25983: PPUSH
25984: PPUSH
25985: PPUSH
25986: PPUSH
25987: PPUSH
25988: PPUSH
25989: PPUSH
25990: PPUSH
25991: PPUSH
25992: PPUSH
25993: PPUSH
25994: PPUSH
25995: PPUSH
25996: PPUSH
25997: PPUSH
25998: PPUSH
25999: PPUSH
26000: PPUSH
26001: PPUSH
26002: PPUSH
26003: PPUSH
26004: PPUSH
26005: PPUSH
26006: PPUSH
26007: PPUSH
// result = [ ] ;
26008: LD_ADDR_VAR 0 7
26012: PUSH
26013: EMPTY
26014: ST_TO_ADDR
// temp_list = [ ] ;
26015: LD_ADDR_VAR 0 9
26019: PUSH
26020: EMPTY
26021: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26022: LD_VAR 0 4
26026: PUSH
26027: LD_INT 0
26029: PUSH
26030: LD_INT 1
26032: PUSH
26033: LD_INT 2
26035: PUSH
26036: LD_INT 3
26038: PUSH
26039: LD_INT 4
26041: PUSH
26042: LD_INT 5
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: IN
26053: NOT
26054: IFTRUE 26097
26056: PUSH
26057: LD_VAR 0 1
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: IN
26072: IFFALSE 26096
26074: PUSH
26075: LD_VAR 0 5
26079: PUSH
26080: LD_INT 1
26082: PUSH
26083: LD_INT 2
26085: PUSH
26086: LD_INT 3
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: LIST
26093: IN
26094: NOT
26095: AND
26096: OR
26097: IFFALSE 26101
// exit ;
26099: GO 44500
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26101: LD_VAR 0 1
26105: PUSH
26106: LD_INT 6
26108: PUSH
26109: LD_INT 7
26111: PUSH
26112: LD_INT 8
26114: PUSH
26115: LD_INT 13
26117: PUSH
26118: LD_INT 12
26120: PUSH
26121: LD_INT 15
26123: PUSH
26124: LD_INT 11
26126: PUSH
26127: LD_INT 14
26129: PUSH
26130: LD_INT 10
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: IN
26144: IFFALSE 26154
// btype = b_lab ;
26146: LD_ADDR_VAR 0 1
26150: PUSH
26151: LD_INT 6
26153: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26154: LD_VAR 0 6
26158: PUSH
26159: LD_INT 0
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: LD_INT 2
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: LIST
26172: IN
26173: NOT
26174: IFTRUE 26242
26176: PUSH
26177: LD_VAR 0 1
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: LD_INT 1
26187: PUSH
26188: LD_INT 2
26190: PUSH
26191: LD_INT 3
26193: PUSH
26194: LD_INT 6
26196: PUSH
26197: LD_INT 36
26199: PUSH
26200: LD_INT 4
26202: PUSH
26203: LD_INT 5
26205: PUSH
26206: LD_INT 31
26208: PUSH
26209: LD_INT 32
26211: PUSH
26212: LD_INT 33
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: IN
26228: NOT
26229: IFFALSE 26241
26231: PUSH
26232: LD_VAR 0 6
26236: PUSH
26237: LD_INT 1
26239: EQUAL
26240: AND
26241: OR
26242: IFTRUE 26274
26244: PUSH
26245: LD_VAR 0 1
26249: PUSH
26250: LD_INT 2
26252: PUSH
26253: LD_INT 3
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: IN
26260: NOT
26261: IFFALSE 26273
26263: PUSH
26264: LD_VAR 0 6
26268: PUSH
26269: LD_INT 2
26271: EQUAL
26272: AND
26273: OR
26274: IFFALSE 26284
// mode = 0 ;
26276: LD_ADDR_VAR 0 6
26280: PUSH
26281: LD_INT 0
26283: ST_TO_ADDR
// case mode of 0 :
26284: LD_VAR 0 6
26288: PUSH
26289: LD_INT 0
26291: DOUBLE
26292: EQUAL
26293: IFTRUE 26297
26295: GO 37750
26297: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26298: LD_ADDR_VAR 0 11
26302: PUSH
26303: LD_INT 0
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: LD_INT 1
26318: NEG
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 1
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 1
26336: PUSH
26337: LD_INT 1
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: LD_INT 1
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 1
26356: NEG
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 1
26367: NEG
26368: PUSH
26369: LD_INT 1
26371: NEG
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 1
26379: NEG
26380: PUSH
26381: LD_INT 2
26383: NEG
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: LD_INT 2
26394: NEG
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 1
26402: PUSH
26403: LD_INT 1
26405: NEG
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 1
26413: PUSH
26414: LD_INT 2
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 0
26423: PUSH
26424: LD_INT 2
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 1
26433: NEG
26434: PUSH
26435: LD_INT 1
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 1
26444: PUSH
26445: LD_INT 3
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 0
26454: PUSH
26455: LD_INT 3
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 1
26464: NEG
26465: PUSH
26466: LD_INT 2
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26491: LD_ADDR_VAR 0 12
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: LD_INT 1
26511: NEG
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: LD_INT 0
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 1
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: LD_INT 1
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: LD_INT 0
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 1
26560: NEG
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 1
26572: PUSH
26573: LD_INT 1
26575: NEG
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 2
26583: PUSH
26584: LD_INT 0
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 2
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: LD_INT 1
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 2
26614: NEG
26615: PUSH
26616: LD_INT 0
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 2
26625: NEG
26626: PUSH
26627: LD_INT 1
26629: NEG
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 2
26637: NEG
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 3
26648: NEG
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 3
26659: NEG
26660: PUSH
26661: LD_INT 1
26663: NEG
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26687: LD_ADDR_VAR 0 13
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: LD_INT 0
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 0
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 1
26715: PUSH
26716: LD_INT 0
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 1
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: LD_INT 1
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 1
26756: NEG
26757: PUSH
26758: LD_INT 1
26760: NEG
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 1
26768: NEG
26769: PUSH
26770: LD_INT 2
26772: NEG
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 2
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 2
26790: PUSH
26791: LD_INT 2
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: LD_INT 2
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 2
26810: NEG
26811: PUSH
26812: LD_INT 1
26814: NEG
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 2
26822: NEG
26823: PUSH
26824: LD_INT 2
26826: NEG
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 2
26834: NEG
26835: PUSH
26836: LD_INT 3
26838: NEG
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 3
26846: NEG
26847: PUSH
26848: LD_INT 2
26850: NEG
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 3
26858: NEG
26859: PUSH
26860: LD_INT 3
26862: NEG
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26886: LD_ADDR_VAR 0 14
26890: PUSH
26891: LD_INT 0
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: LD_INT 1
26906: NEG
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 1
26924: PUSH
26925: LD_INT 1
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 0
26934: PUSH
26935: LD_INT 1
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 1
26944: NEG
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 1
26967: NEG
26968: PUSH
26969: LD_INT 2
26971: NEG
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: LD_INT 2
26982: NEG
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 1
26990: PUSH
26991: LD_INT 1
26993: NEG
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: LD_INT 2
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: LD_INT 2
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 1
27021: NEG
27022: PUSH
27023: LD_INT 1
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: LD_INT 3
27036: NEG
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: LD_INT 3
27047: NEG
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: LD_INT 2
27058: NEG
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27082: LD_ADDR_VAR 0 15
27086: PUSH
27087: LD_INT 0
27089: PUSH
27090: LD_INT 0
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 0
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 1
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 1
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 0
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: LD_INT 1
27155: NEG
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: LD_INT 1
27166: NEG
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 2
27174: PUSH
27175: LD_INT 0
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 2
27184: PUSH
27185: LD_INT 1
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 1
27194: NEG
27195: PUSH
27196: LD_INT 1
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 2
27205: NEG
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 2
27216: NEG
27217: PUSH
27218: LD_INT 1
27220: NEG
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 2
27228: PUSH
27229: LD_INT 1
27231: NEG
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 3
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 3
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27275: LD_ADDR_VAR 0 16
27279: PUSH
27280: LD_INT 0
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 1
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 1
27313: PUSH
27314: LD_INT 1
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 0
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 1
27333: NEG
27334: PUSH
27335: LD_INT 0
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 1
27344: NEG
27345: PUSH
27346: LD_INT 1
27348: NEG
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 1
27356: NEG
27357: PUSH
27358: LD_INT 2
27360: NEG
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 2
27368: PUSH
27369: LD_INT 1
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 2
27378: PUSH
27379: LD_INT 2
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 1
27388: PUSH
27389: LD_INT 2
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 2
27398: NEG
27399: PUSH
27400: LD_INT 1
27402: NEG
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 2
27410: NEG
27411: PUSH
27412: LD_INT 2
27414: NEG
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 3
27422: PUSH
27423: LD_INT 2
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 3
27432: PUSH
27433: LD_INT 3
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 2
27442: PUSH
27443: LD_INT 3
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27468: LD_ADDR_VAR 0 17
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: LD_INT 0
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 0
27485: PUSH
27486: LD_INT 1
27488: NEG
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 1
27496: PUSH
27497: LD_INT 0
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 1
27506: PUSH
27507: LD_INT 1
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: LD_INT 1
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 1
27526: NEG
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: NEG
27538: PUSH
27539: LD_INT 1
27541: NEG
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: LD_INT 2
27553: NEG
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: LD_INT 2
27564: NEG
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 1
27572: PUSH
27573: LD_INT 1
27575: NEG
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 2
27583: PUSH
27584: LD_INT 0
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 2
27593: PUSH
27594: LD_INT 1
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 2
27603: PUSH
27604: LD_INT 2
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: LD_INT 2
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: LD_INT 2
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 1
27633: NEG
27634: PUSH
27635: LD_INT 1
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 2
27644: NEG
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 2
27655: NEG
27656: PUSH
27657: LD_INT 1
27659: NEG
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 2
27667: NEG
27668: PUSH
27669: LD_INT 2
27671: NEG
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27698: LD_ADDR_VAR 0 18
27702: PUSH
27703: LD_INT 0
27705: PUSH
27706: LD_INT 0
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 0
27715: PUSH
27716: LD_INT 1
27718: NEG
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 1
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 1
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 0
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 1
27756: NEG
27757: PUSH
27758: LD_INT 0
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 1
27767: NEG
27768: PUSH
27769: LD_INT 1
27771: NEG
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 1
27779: NEG
27780: PUSH
27781: LD_INT 2
27783: NEG
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: LD_INT 2
27794: NEG
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: LD_INT 1
27805: NEG
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 2
27813: PUSH
27814: LD_INT 0
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 2
27823: PUSH
27824: LD_INT 1
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 2
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 1
27843: PUSH
27844: LD_INT 2
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 0
27853: PUSH
27854: LD_INT 2
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 1
27863: NEG
27864: PUSH
27865: LD_INT 1
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 2
27874: NEG
27875: PUSH
27876: LD_INT 0
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 2
27885: NEG
27886: PUSH
27887: LD_INT 1
27889: NEG
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 2
27897: NEG
27898: PUSH
27899: LD_INT 2
27901: NEG
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27928: LD_ADDR_VAR 0 19
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: LD_INT 0
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 0
27945: PUSH
27946: LD_INT 1
27948: NEG
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 1
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 1
27966: PUSH
27967: LD_INT 1
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 0
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 1
27986: NEG
27987: PUSH
27988: LD_INT 0
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 1
27997: NEG
27998: PUSH
27999: LD_INT 1
28001: NEG
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 1
28009: NEG
28010: PUSH
28011: LD_INT 2
28013: NEG
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: LD_INT 2
28024: NEG
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 1
28032: PUSH
28033: LD_INT 1
28035: NEG
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 2
28043: PUSH
28044: LD_INT 0
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 2
28053: PUSH
28054: LD_INT 1
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 2
28063: PUSH
28064: LD_INT 2
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: LD_INT 2
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: LD_INT 2
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: NEG
28094: PUSH
28095: LD_INT 1
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 2
28104: NEG
28105: PUSH
28106: LD_INT 0
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 2
28115: NEG
28116: PUSH
28117: LD_INT 1
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 2
28127: NEG
28128: PUSH
28129: LD_INT 2
28131: NEG
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28158: LD_ADDR_VAR 0 20
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 0
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 1
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 1
28196: PUSH
28197: LD_INT 1
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 0
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 1
28216: NEG
28217: PUSH
28218: LD_INT 0
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: LD_INT 1
28231: NEG
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 1
28239: NEG
28240: PUSH
28241: LD_INT 2
28243: NEG
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: LD_INT 2
28254: NEG
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: LD_INT 1
28265: NEG
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 2
28273: PUSH
28274: LD_INT 0
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 2
28283: PUSH
28284: LD_INT 1
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 2
28293: PUSH
28294: LD_INT 2
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 1
28303: PUSH
28304: LD_INT 2
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 0
28313: PUSH
28314: LD_INT 2
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 1
28323: NEG
28324: PUSH
28325: LD_INT 1
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 2
28334: NEG
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 2
28345: NEG
28346: PUSH
28347: LD_INT 1
28349: NEG
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 2
28357: NEG
28358: PUSH
28359: LD_INT 2
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28388: LD_ADDR_VAR 0 21
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: LD_INT 0
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 0
28405: PUSH
28406: LD_INT 1
28408: NEG
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 1
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 1
28446: NEG
28447: PUSH
28448: LD_INT 0
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PUSH
28459: LD_INT 1
28461: NEG
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: LD_INT 2
28473: NEG
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: LD_INT 2
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: LD_INT 1
28495: NEG
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 2
28503: PUSH
28504: LD_INT 0
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 2
28513: PUSH
28514: LD_INT 1
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 2
28523: PUSH
28524: LD_INT 2
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: PUSH
28534: LD_INT 2
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: LD_INT 2
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: NEG
28554: PUSH
28555: LD_INT 1
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 2
28564: NEG
28565: PUSH
28566: LD_INT 0
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 2
28575: NEG
28576: PUSH
28577: LD_INT 1
28579: NEG
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 2
28587: NEG
28588: PUSH
28589: LD_INT 2
28591: NEG
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28618: LD_ADDR_VAR 0 22
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: LD_INT 0
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 0
28635: PUSH
28636: LD_INT 1
28638: NEG
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 1
28646: PUSH
28647: LD_INT 0
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 1
28656: PUSH
28657: LD_INT 1
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: LD_INT 1
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 1
28676: NEG
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: LD_INT 1
28691: NEG
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 1
28699: NEG
28700: PUSH
28701: LD_INT 2
28703: NEG
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: LD_INT 2
28714: NEG
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: LD_INT 1
28725: NEG
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 2
28733: PUSH
28734: LD_INT 0
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 2
28743: PUSH
28744: LD_INT 1
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 2
28753: PUSH
28754: LD_INT 2
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: LD_INT 2
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 0
28773: PUSH
28774: LD_INT 2
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 1
28783: NEG
28784: PUSH
28785: LD_INT 1
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 2
28794: NEG
28795: PUSH
28796: LD_INT 0
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 2
28805: NEG
28806: PUSH
28807: LD_INT 1
28809: NEG
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 2
28817: NEG
28818: PUSH
28819: LD_INT 2
28821: NEG
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28848: LD_ADDR_VAR 0 23
28852: PUSH
28853: LD_INT 0
28855: PUSH
28856: LD_INT 0
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 0
28865: PUSH
28866: LD_INT 1
28868: NEG
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 1
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 1
28886: PUSH
28887: LD_INT 1
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: LD_INT 1
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 1
28906: NEG
28907: PUSH
28908: LD_INT 0
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: LD_INT 1
28921: NEG
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 1
28929: NEG
28930: PUSH
28931: LD_INT 2
28933: NEG
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: LD_INT 2
28944: NEG
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 2
28963: PUSH
28964: LD_INT 0
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 2
28973: PUSH
28974: LD_INT 1
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 2
28983: PUSH
28984: LD_INT 2
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 1
28993: PUSH
28994: LD_INT 2
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 0
29003: PUSH
29004: LD_INT 2
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 1
29013: NEG
29014: PUSH
29015: LD_INT 1
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 2
29024: NEG
29025: PUSH
29026: LD_INT 0
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 2
29035: NEG
29036: PUSH
29037: LD_INT 1
29039: NEG
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 2
29047: NEG
29048: PUSH
29049: LD_INT 2
29051: NEG
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 2
29059: NEG
29060: PUSH
29061: LD_INT 3
29063: NEG
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 1
29071: NEG
29072: PUSH
29073: LD_INT 3
29075: NEG
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 1
29083: PUSH
29084: LD_INT 2
29086: NEG
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 2
29094: PUSH
29095: LD_INT 1
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29128: LD_ADDR_VAR 0 24
29132: PUSH
29133: LD_INT 0
29135: PUSH
29136: LD_INT 0
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: LD_INT 1
29148: NEG
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 1
29156: PUSH
29157: LD_INT 0
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 1
29166: PUSH
29167: LD_INT 1
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 0
29176: PUSH
29177: LD_INT 1
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 1
29197: NEG
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 1
29209: NEG
29210: PUSH
29211: LD_INT 2
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: LD_INT 2
29224: NEG
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 1
29232: PUSH
29233: LD_INT 1
29235: NEG
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 2
29243: PUSH
29244: LD_INT 0
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 2
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 2
29263: PUSH
29264: LD_INT 2
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: LD_INT 2
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 0
29283: PUSH
29284: LD_INT 2
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 1
29293: NEG
29294: PUSH
29295: LD_INT 1
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 2
29304: NEG
29305: PUSH
29306: LD_INT 0
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 2
29315: NEG
29316: PUSH
29317: LD_INT 1
29319: NEG
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 2
29327: NEG
29328: PUSH
29329: LD_INT 2
29331: NEG
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 1
29339: PUSH
29340: LD_INT 2
29342: NEG
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 2
29350: PUSH
29351: LD_INT 1
29353: NEG
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 3
29361: PUSH
29362: LD_INT 1
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 3
29371: PUSH
29372: LD_INT 2
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29404: LD_ADDR_VAR 0 25
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: LD_INT 0
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 0
29421: PUSH
29422: LD_INT 1
29424: NEG
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: LD_INT 0
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 0
29452: PUSH
29453: LD_INT 1
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: NEG
29463: PUSH
29464: LD_INT 0
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 1
29473: NEG
29474: PUSH
29475: LD_INT 1
29477: NEG
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 1
29485: NEG
29486: PUSH
29487: LD_INT 2
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 0
29497: PUSH
29498: LD_INT 2
29500: NEG
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 1
29508: PUSH
29509: LD_INT 1
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 2
29519: PUSH
29520: LD_INT 0
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 2
29529: PUSH
29530: LD_INT 1
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 2
29539: PUSH
29540: LD_INT 2
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 1
29549: PUSH
29550: LD_INT 2
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 0
29559: PUSH
29560: LD_INT 2
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 1
29569: NEG
29570: PUSH
29571: LD_INT 1
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 2
29580: NEG
29581: PUSH
29582: LD_INT 0
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 2
29591: NEG
29592: PUSH
29593: LD_INT 1
29595: NEG
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 2
29603: NEG
29604: PUSH
29605: LD_INT 2
29607: NEG
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 3
29615: PUSH
29616: LD_INT 1
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 3
29625: PUSH
29626: LD_INT 2
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 2
29635: PUSH
29636: LD_INT 3
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 1
29645: PUSH
29646: LD_INT 3
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29678: LD_ADDR_VAR 0 26
29682: PUSH
29683: LD_INT 0
29685: PUSH
29686: LD_INT 0
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: LD_INT 1
29698: NEG
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 1
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 0
29726: PUSH
29727: LD_INT 1
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 1
29736: NEG
29737: PUSH
29738: LD_INT 0
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 1
29747: NEG
29748: PUSH
29749: LD_INT 1
29751: NEG
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 1
29759: NEG
29760: PUSH
29761: LD_INT 2
29763: NEG
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 0
29771: PUSH
29772: LD_INT 2
29774: NEG
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 1
29782: PUSH
29783: LD_INT 1
29785: NEG
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 2
29793: PUSH
29794: LD_INT 0
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 2
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: LD_INT 2
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: LD_INT 2
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 1
29843: NEG
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 2
29854: NEG
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 2
29865: NEG
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 2
29877: NEG
29878: PUSH
29879: LD_INT 2
29881: NEG
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 2
29889: PUSH
29890: LD_INT 3
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: LD_INT 3
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 1
29909: NEG
29910: PUSH
29911: LD_INT 2
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 2
29920: NEG
29921: PUSH
29922: LD_INT 1
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29954: LD_ADDR_VAR 0 27
29958: PUSH
29959: LD_INT 0
29961: PUSH
29962: LD_INT 0
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: LD_INT 1
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 1
29982: PUSH
29983: LD_INT 0
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 1
29992: PUSH
29993: LD_INT 1
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 0
30002: PUSH
30003: LD_INT 1
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 1
30012: NEG
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 1
30023: NEG
30024: PUSH
30025: LD_INT 1
30027: NEG
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 1
30035: NEG
30036: PUSH
30037: LD_INT 2
30039: NEG
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 0
30047: PUSH
30048: LD_INT 2
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 1
30058: PUSH
30059: LD_INT 1
30061: NEG
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 2
30069: PUSH
30070: LD_INT 0
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 2
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 2
30089: PUSH
30090: LD_INT 2
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: LD_INT 2
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 0
30109: PUSH
30110: LD_INT 2
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 1
30119: NEG
30120: PUSH
30121: LD_INT 1
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 2
30130: NEG
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 2
30141: NEG
30142: PUSH
30143: LD_INT 1
30145: NEG
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 2
30153: NEG
30154: PUSH
30155: LD_INT 2
30157: NEG
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 1
30165: NEG
30166: PUSH
30167: LD_INT 2
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 2
30176: NEG
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 3
30187: NEG
30188: PUSH
30189: LD_INT 1
30191: NEG
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 3
30199: NEG
30200: PUSH
30201: LD_INT 2
30203: NEG
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30234: LD_ADDR_VAR 0 28
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: LD_INT 0
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: LD_INT 1
30254: NEG
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 1
30262: PUSH
30263: LD_INT 0
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 0
30282: PUSH
30283: LD_INT 1
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 1
30292: NEG
30293: PUSH
30294: LD_INT 0
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: LD_INT 1
30307: NEG
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 1
30315: NEG
30316: PUSH
30317: LD_INT 2
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 0
30327: PUSH
30328: LD_INT 2
30330: NEG
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 1
30338: PUSH
30339: LD_INT 1
30341: NEG
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 2
30349: PUSH
30350: LD_INT 0
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: LD_INT 1
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 0
30389: PUSH
30390: LD_INT 2
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 1
30399: NEG
30400: PUSH
30401: LD_INT 1
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 2
30410: NEG
30411: PUSH
30412: LD_INT 0
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 2
30421: NEG
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 2
30433: NEG
30434: PUSH
30435: LD_INT 2
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 2
30445: NEG
30446: PUSH
30447: LD_INT 3
30449: NEG
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 1
30457: NEG
30458: PUSH
30459: LD_INT 3
30461: NEG
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 3
30469: NEG
30470: PUSH
30471: LD_INT 1
30473: NEG
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 3
30481: NEG
30482: PUSH
30483: LD_INT 2
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30516: LD_ADDR_VAR 0 29
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: LD_INT 0
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 0
30533: PUSH
30534: LD_INT 1
30536: NEG
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 1
30544: PUSH
30545: LD_INT 0
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 1
30554: PUSH
30555: LD_INT 1
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 0
30564: PUSH
30565: LD_INT 1
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 1
30574: NEG
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 1
30585: NEG
30586: PUSH
30587: LD_INT 1
30589: NEG
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 1
30597: NEG
30598: PUSH
30599: LD_INT 2
30601: NEG
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: LD_INT 2
30612: NEG
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 1
30620: PUSH
30621: LD_INT 1
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 2
30631: PUSH
30632: LD_INT 0
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 2
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: LD_INT 2
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 0
30661: PUSH
30662: LD_INT 2
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 1
30671: NEG
30672: PUSH
30673: LD_INT 1
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 2
30682: NEG
30683: PUSH
30684: LD_INT 1
30686: NEG
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 2
30694: NEG
30695: PUSH
30696: LD_INT 2
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 2
30706: NEG
30707: PUSH
30708: LD_INT 3
30710: NEG
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 2
30718: PUSH
30719: LD_INT 1
30721: NEG
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 3
30729: PUSH
30730: LD_INT 1
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 1
30739: PUSH
30740: LD_INT 3
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: NEG
30750: PUSH
30751: LD_INT 2
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 3
30760: NEG
30761: PUSH
30762: LD_INT 2
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30795: LD_ADDR_VAR 0 30
30799: PUSH
30800: LD_INT 0
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: LD_INT 1
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 1
30823: PUSH
30824: LD_INT 0
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 1
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 0
30843: PUSH
30844: LD_INT 1
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 1
30853: NEG
30854: PUSH
30855: LD_INT 0
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: LD_INT 1
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 1
30876: NEG
30877: PUSH
30878: LD_INT 2
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 0
30888: PUSH
30889: LD_INT 2
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 2
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 2
30930: PUSH
30931: LD_INT 2
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: LD_INT 2
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 1
30950: NEG
30951: PUSH
30952: LD_INT 1
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 2
30961: NEG
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 2
30972: NEG
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 1
30984: NEG
30985: PUSH
30986: LD_INT 3
30988: NEG
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 1
30996: PUSH
30997: LD_INT 2
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 3
31007: PUSH
31008: LD_INT 2
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 2
31017: PUSH
31018: LD_INT 3
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 2
31027: NEG
31028: PUSH
31029: LD_INT 1
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 3
31038: NEG
31039: PUSH
31040: LD_INT 1
31042: NEG
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31073: LD_ADDR_VAR 0 31
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: LD_INT 1
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 0
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 1
31131: NEG
31132: PUSH
31133: LD_INT 0
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 1
31142: NEG
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 1
31154: NEG
31155: PUSH
31156: LD_INT 2
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 1
31166: PUSH
31167: LD_INT 1
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 2
31177: PUSH
31178: LD_INT 0
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 2
31187: PUSH
31188: LD_INT 1
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 2
31197: PUSH
31198: LD_INT 2
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 1
31207: PUSH
31208: LD_INT 2
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 0
31217: PUSH
31218: LD_INT 2
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 1
31227: NEG
31228: PUSH
31229: LD_INT 1
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 2
31238: NEG
31239: PUSH
31240: LD_INT 1
31242: NEG
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 2
31250: NEG
31251: PUSH
31252: LD_INT 2
31254: NEG
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 2
31262: NEG
31263: PUSH
31264: LD_INT 3
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 2
31274: PUSH
31275: LD_INT 1
31277: NEG
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 3
31285: PUSH
31286: LD_INT 1
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: LD_INT 3
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 1
31305: NEG
31306: PUSH
31307: LD_INT 2
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 3
31316: NEG
31317: PUSH
31318: LD_INT 2
31320: NEG
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31351: LD_ADDR_VAR 0 32
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: LD_INT 0
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 0
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 1
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: LD_INT 1
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 1
31409: NEG
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: LD_INT 1
31424: NEG
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 1
31432: NEG
31433: PUSH
31434: LD_INT 2
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: LD_INT 2
31447: NEG
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 1
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: LD_INT 1
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 2
31476: PUSH
31477: LD_INT 2
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: LD_INT 2
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 0
31496: PUSH
31497: LD_INT 2
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 1
31506: NEG
31507: PUSH
31508: LD_INT 1
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 2
31517: NEG
31518: PUSH
31519: LD_INT 0
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 2
31528: NEG
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: LD_INT 3
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 1
31552: PUSH
31553: LD_INT 2
31555: NEG
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 3
31563: PUSH
31564: LD_INT 2
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 2
31573: PUSH
31574: LD_INT 3
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 2
31583: NEG
31584: PUSH
31585: LD_INT 1
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 3
31594: NEG
31595: PUSH
31596: LD_INT 1
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31629: LD_ADDR_VAR 0 33
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: LD_INT 1
31649: NEG
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: LD_INT 0
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 1
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 0
31677: PUSH
31678: LD_INT 1
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 1
31687: NEG
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: LD_INT 1
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 1
31710: NEG
31711: PUSH
31712: LD_INT 2
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 1
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 2
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 2
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: LD_INT 2
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 0
31763: PUSH
31764: LD_INT 2
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 1
31773: NEG
31774: PUSH
31775: LD_INT 1
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 2
31784: NEG
31785: PUSH
31786: LD_INT 0
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 2
31795: NEG
31796: PUSH
31797: LD_INT 1
31799: NEG
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: LD_INT 2
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 2
31819: NEG
31820: PUSH
31821: LD_INT 3
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 2
31831: PUSH
31832: LD_INT 1
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 3
31842: PUSH
31843: LD_INT 1
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 1
31852: PUSH
31853: LD_INT 3
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: NEG
31863: PUSH
31864: LD_INT 2
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 3
31873: NEG
31874: PUSH
31875: LD_INT 2
31877: NEG
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31908: LD_ADDR_VAR 0 34
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 0
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 1
31936: PUSH
31937: LD_INT 0
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 1
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 0
31956: PUSH
31957: LD_INT 1
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: NEG
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 1
31977: NEG
31978: PUSH
31979: LD_INT 1
31981: NEG
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: LD_INT 2
31993: NEG
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: LD_INT 2
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: LD_INT 1
32015: NEG
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 2
32023: PUSH
32024: LD_INT 1
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 2
32033: PUSH
32034: LD_INT 2
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: LD_INT 2
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: LD_INT 1
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 2
32064: NEG
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: NEG
32076: PUSH
32077: LD_INT 1
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 2
32087: NEG
32088: PUSH
32089: LD_INT 2
32091: NEG
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: LD_INT 3
32103: NEG
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 1
32111: PUSH
32112: LD_INT 2
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 3
32122: PUSH
32123: LD_INT 2
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 2
32132: PUSH
32133: LD_INT 3
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 2
32142: NEG
32143: PUSH
32144: LD_INT 1
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 3
32153: NEG
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32188: LD_ADDR_VAR 0 35
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: LD_INT 1
32208: NEG
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 1
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 0
32236: PUSH
32237: LD_INT 1
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 1
32246: NEG
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 2
32269: PUSH
32270: LD_INT 1
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 2
32279: NEG
32280: PUSH
32281: LD_INT 1
32283: NEG
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32300: LD_ADDR_VAR 0 36
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: LD_INT 0
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 0
32317: PUSH
32318: LD_INT 1
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 1
32338: PUSH
32339: LD_INT 1
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: LD_INT 1
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 1
32358: NEG
32359: PUSH
32360: LD_INT 0
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: NEG
32370: PUSH
32371: LD_INT 1
32373: NEG
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: LD_INT 2
32385: NEG
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: LD_INT 2
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32412: LD_ADDR_VAR 0 37
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: LD_INT 0
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: LD_INT 1
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 1
32493: PUSH
32494: LD_INT 1
32496: NEG
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 1
32504: NEG
32505: PUSH
32506: LD_INT 1
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32524: LD_ADDR_VAR 0 38
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 0
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 1
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 0
32572: PUSH
32573: LD_INT 1
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 1
32582: NEG
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: LD_INT 1
32597: NEG
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 2
32605: PUSH
32606: LD_INT 1
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 2
32615: NEG
32616: PUSH
32617: LD_INT 1
32619: NEG
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32636: LD_ADDR_VAR 0 39
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: LD_INT 0
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 1
32674: PUSH
32675: LD_INT 1
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: LD_INT 1
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 1
32705: NEG
32706: PUSH
32707: LD_INT 1
32709: NEG
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: NEG
32718: PUSH
32719: LD_INT 2
32721: NEG
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 1
32729: PUSH
32730: LD_INT 2
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32748: LD_ADDR_VAR 0 40
32752: PUSH
32753: LD_INT 0
32755: PUSH
32756: LD_INT 0
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: LD_INT 1
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: LD_INT 1
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: NEG
32807: PUSH
32808: LD_INT 0
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 1
32817: NEG
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 1
32829: PUSH
32830: LD_INT 1
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 1
32840: NEG
32841: PUSH
32842: LD_INT 1
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32860: LD_ADDR_VAR 0 41
32864: PUSH
32865: LD_INT 0
32867: PUSH
32868: LD_INT 0
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: LD_INT 1
32880: NEG
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 1
32888: PUSH
32889: LD_INT 0
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 1
32898: PUSH
32899: LD_INT 1
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 0
32908: PUSH
32909: LD_INT 1
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 1
32918: NEG
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 1
32929: NEG
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 1
32941: NEG
32942: PUSH
32943: LD_INT 2
32945: NEG
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 2
32964: PUSH
32965: LD_INT 0
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 2
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 2
32984: PUSH
32985: LD_INT 2
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: LD_INT 2
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: NEG
33005: PUSH
33006: LD_INT 1
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 2
33015: NEG
33016: PUSH
33017: LD_INT 0
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 2
33026: NEG
33027: PUSH
33028: LD_INT 1
33030: NEG
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 2
33038: NEG
33039: PUSH
33040: LD_INT 2
33042: NEG
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 2
33050: NEG
33051: PUSH
33052: LD_INT 3
33054: NEG
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 2
33062: PUSH
33063: LD_INT 1
33065: NEG
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 3
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 3
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 3
33093: PUSH
33094: LD_INT 2
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 3
33103: PUSH
33104: LD_INT 3
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 2
33113: PUSH
33114: LD_INT 3
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 2
33123: NEG
33124: PUSH
33125: LD_INT 1
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 3
33134: NEG
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 3
33145: NEG
33146: PUSH
33147: LD_INT 1
33149: NEG
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 3
33157: NEG
33158: PUSH
33159: LD_INT 2
33161: NEG
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 3
33169: NEG
33170: PUSH
33171: LD_INT 3
33173: NEG
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33210: LD_ADDR_VAR 0 42
33214: PUSH
33215: LD_INT 0
33217: PUSH
33218: LD_INT 0
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: LD_INT 1
33230: NEG
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 1
33238: PUSH
33239: LD_INT 0
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 1
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 0
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 1
33268: NEG
33269: PUSH
33270: LD_INT 0
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 1
33279: NEG
33280: PUSH
33281: LD_INT 1
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 1
33291: NEG
33292: PUSH
33293: LD_INT 2
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: LD_INT 2
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 1
33314: PUSH
33315: LD_INT 1
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 2
33325: PUSH
33326: LD_INT 1
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 2
33335: PUSH
33336: LD_INT 2
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 1
33345: PUSH
33346: LD_INT 2
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 0
33355: PUSH
33356: LD_INT 2
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 2
33376: NEG
33377: PUSH
33378: LD_INT 1
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 2
33388: NEG
33389: PUSH
33390: LD_INT 2
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 2
33400: NEG
33401: PUSH
33402: LD_INT 3
33404: NEG
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: LD_INT 3
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: LD_INT 3
33427: NEG
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 1
33435: PUSH
33436: LD_INT 2
33438: NEG
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 3
33446: PUSH
33447: LD_INT 2
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 3
33456: PUSH
33457: LD_INT 3
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 2
33466: PUSH
33467: LD_INT 3
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 1
33476: PUSH
33477: LD_INT 3
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: LD_INT 3
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: LD_INT 2
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 3
33507: NEG
33508: PUSH
33509: LD_INT 2
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 3
33519: NEG
33520: PUSH
33521: LD_INT 3
33523: NEG
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33560: LD_ADDR_VAR 0 43
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: LD_INT 1
33580: NEG
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: LD_INT 1
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 1
33641: NEG
33642: PUSH
33643: LD_INT 2
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 0
33653: PUSH
33654: LD_INT 2
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 2
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 2
33685: PUSH
33686: LD_INT 1
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 1
33695: PUSH
33696: LD_INT 2
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: LD_INT 2
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 1
33715: NEG
33716: PUSH
33717: LD_INT 1
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 2
33726: NEG
33727: PUSH
33728: LD_INT 0
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 2
33737: NEG
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: LD_INT 3
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: LD_INT 3
33764: NEG
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 1
33772: PUSH
33773: LD_INT 2
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 2
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 3
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 3
33804: PUSH
33805: LD_INT 1
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: LD_INT 3
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: LD_INT 3
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 1
33834: NEG
33835: PUSH
33836: LD_INT 2
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 2
33845: NEG
33846: PUSH
33847: LD_INT 1
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 3
33856: NEG
33857: PUSH
33858: LD_INT 0
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 3
33867: NEG
33868: PUSH
33869: LD_INT 1
33871: NEG
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33908: LD_ADDR_VAR 0 44
33912: PUSH
33913: LD_INT 0
33915: PUSH
33916: LD_INT 0
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: LD_INT 1
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 1
33936: PUSH
33937: LD_INT 0
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 1
33946: PUSH
33947: LD_INT 1
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 0
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 1
33966: NEG
33967: PUSH
33968: LD_INT 0
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 1
33977: NEG
33978: PUSH
33979: LD_INT 1
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 1
33989: NEG
33990: PUSH
33991: LD_INT 2
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 1
34001: PUSH
34002: LD_INT 1
34004: NEG
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 2
34012: PUSH
34013: LD_INT 0
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 2
34022: PUSH
34023: LD_INT 1
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 2
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: LD_INT 2
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 1
34052: NEG
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 2
34063: NEG
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 2
34074: NEG
34075: PUSH
34076: LD_INT 1
34078: NEG
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 2
34086: NEG
34087: PUSH
34088: LD_INT 2
34090: NEG
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 2
34098: NEG
34099: PUSH
34100: LD_INT 3
34102: NEG
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 2
34110: PUSH
34111: LD_INT 1
34113: NEG
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 3
34121: PUSH
34122: LD_INT 0
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 3
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 3
34141: PUSH
34142: LD_INT 2
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 3
34151: PUSH
34152: LD_INT 3
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 2
34161: PUSH
34162: LD_INT 3
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 2
34171: NEG
34172: PUSH
34173: LD_INT 1
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 3
34182: NEG
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 3
34193: NEG
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 3
34205: NEG
34206: PUSH
34207: LD_INT 2
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 3
34217: NEG
34218: PUSH
34219: LD_INT 3
34221: NEG
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34258: LD_ADDR_VAR 0 45
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: LD_INT 0
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: LD_INT 1
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: LD_INT 1
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 1
34316: NEG
34317: PUSH
34318: LD_INT 0
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 1
34327: NEG
34328: PUSH
34329: LD_INT 1
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: LD_INT 2
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 0
34351: PUSH
34352: LD_INT 2
34354: NEG
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 1
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 2
34373: PUSH
34374: LD_INT 1
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 2
34383: PUSH
34384: LD_INT 2
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 1
34393: PUSH
34394: LD_INT 2
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 0
34403: PUSH
34404: LD_INT 2
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 2
34424: NEG
34425: PUSH
34426: LD_INT 1
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: LD_INT 2
34440: NEG
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 2
34448: NEG
34449: PUSH
34450: LD_INT 3
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 1
34460: NEG
34461: PUSH
34462: LD_INT 3
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: LD_INT 3
34475: NEG
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 1
34483: PUSH
34484: LD_INT 2
34486: NEG
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 3
34494: PUSH
34495: LD_INT 2
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 3
34504: PUSH
34505: LD_INT 3
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 2
34514: PUSH
34515: LD_INT 3
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 1
34524: PUSH
34525: LD_INT 3
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 0
34534: PUSH
34535: LD_INT 3
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 1
34544: NEG
34545: PUSH
34546: LD_INT 2
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 3
34555: NEG
34556: PUSH
34557: LD_INT 2
34559: NEG
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 3
34567: NEG
34568: PUSH
34569: LD_INT 3
34571: NEG
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34608: LD_ADDR_VAR 0 46
34612: PUSH
34613: LD_INT 0
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 1
34636: PUSH
34637: LD_INT 0
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 1
34646: PUSH
34647: LD_INT 1
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 1
34677: NEG
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: LD_INT 2
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 0
34701: PUSH
34702: LD_INT 2
34704: NEG
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 2
34723: PUSH
34724: LD_INT 0
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 2
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: LD_INT 2
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: LD_INT 2
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 2
34774: NEG
34775: PUSH
34776: LD_INT 0
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 2
34785: NEG
34786: PUSH
34787: LD_INT 1
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: LD_INT 3
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: LD_INT 3
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: PUSH
34821: LD_INT 2
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 3
34842: PUSH
34843: LD_INT 0
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 3
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 1
34862: PUSH
34863: LD_INT 3
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 0
34872: PUSH
34873: LD_INT 3
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 1
34882: NEG
34883: PUSH
34884: LD_INT 2
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 2
34893: NEG
34894: PUSH
34895: LD_INT 1
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 3
34904: NEG
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 3
34915: NEG
34916: PUSH
34917: LD_INT 1
34919: NEG
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34956: LD_ADDR_VAR 0 47
34960: PUSH
34961: LD_INT 0
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 0
34973: PUSH
34974: LD_INT 1
34976: NEG
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 1
34984: PUSH
34985: LD_INT 0
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 1
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: NEG
35015: PUSH
35016: LD_INT 0
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 1
35025: NEG
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: LD_INT 2
35041: NEG
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 0
35049: PUSH
35050: LD_INT 2
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: LD_INT 1
35063: NEG
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 2
35071: NEG
35072: PUSH
35073: LD_INT 1
35075: NEG
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 2
35083: NEG
35084: PUSH
35085: LD_INT 2
35087: NEG
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35107: LD_ADDR_VAR 0 48
35111: PUSH
35112: LD_INT 0
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: LD_INT 1
35127: NEG
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 1
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: LD_INT 1
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 1
35165: NEG
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 1
35176: NEG
35177: PUSH
35178: LD_INT 1
35180: NEG
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 1
35188: NEG
35189: PUSH
35190: LD_INT 2
35192: NEG
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 0
35200: PUSH
35201: LD_INT 2
35203: NEG
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 1
35211: PUSH
35212: LD_INT 1
35214: NEG
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 2
35222: PUSH
35223: LD_INT 0
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: LD_INT 1
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35254: LD_ADDR_VAR 0 49
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: LD_INT 1
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 1
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 1
35312: NEG
35313: PUSH
35314: LD_INT 0
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: LD_INT 1
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: PUSH
35336: LD_INT 1
35338: NEG
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 2
35346: PUSH
35347: LD_INT 0
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 2
35356: PUSH
35357: LD_INT 1
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 2
35366: PUSH
35367: LD_INT 2
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: LD_INT 2
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35398: LD_ADDR_VAR 0 50
35402: PUSH
35403: LD_INT 0
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: LD_INT 1
35418: NEG
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: LD_INT 1
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: LD_INT 1
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 1
35467: NEG
35468: PUSH
35469: LD_INT 1
35471: NEG
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 2
35479: PUSH
35480: LD_INT 1
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 2
35489: PUSH
35490: LD_INT 2
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 1
35499: PUSH
35500: LD_INT 2
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 0
35509: PUSH
35510: LD_INT 2
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 1
35519: NEG
35520: PUSH
35521: LD_INT 1
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35542: LD_ADDR_VAR 0 51
35546: PUSH
35547: LD_INT 0
35549: PUSH
35550: LD_INT 0
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: LD_INT 1
35562: NEG
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 1
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 1
35580: PUSH
35581: LD_INT 1
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 1
35600: NEG
35601: PUSH
35602: LD_INT 0
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: LD_INT 1
35615: NEG
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 1
35623: PUSH
35624: LD_INT 2
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: LD_INT 2
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 1
35643: NEG
35644: PUSH
35645: LD_INT 1
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 2
35654: NEG
35655: PUSH
35656: LD_INT 0
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 2
35665: NEG
35666: PUSH
35667: LD_INT 1
35669: NEG
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35689: LD_ADDR_VAR 0 52
35693: PUSH
35694: LD_INT 0
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: LD_INT 1
35709: NEG
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 1
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: LD_INT 1
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: LD_INT 1
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 1
35758: NEG
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 1
35770: NEG
35771: PUSH
35772: LD_INT 2
35774: NEG
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: LD_INT 1
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 2
35793: NEG
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 2
35804: NEG
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 2
35816: NEG
35817: PUSH
35818: LD_INT 2
35820: NEG
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35840: LD_ADDR_VAR 0 53
35844: PUSH
35845: LD_INT 0
35847: PUSH
35848: LD_INT 0
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: LD_INT 1
35860: NEG
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 1
35868: PUSH
35869: LD_INT 0
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 1
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 1
35898: NEG
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 1
35921: NEG
35922: PUSH
35923: LD_INT 2
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: LD_INT 2
35936: NEG
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: LD_INT 1
35947: NEG
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 2
35955: PUSH
35956: LD_INT 0
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 2
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 2
35975: PUSH
35976: LD_INT 2
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: LD_INT 2
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: LD_INT 1
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 2
36016: NEG
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 2
36027: NEG
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 2
36039: NEG
36040: PUSH
36041: LD_INT 2
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36070: LD_ADDR_VAR 0 54
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: LD_INT 0
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: LD_INT 1
36090: NEG
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 1
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 1
36128: NEG
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 1
36151: NEG
36152: PUSH
36153: LD_INT 2
36155: NEG
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 0
36163: PUSH
36164: LD_INT 2
36166: NEG
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 2
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 2
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 2
36205: PUSH
36206: LD_INT 2
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 1
36215: PUSH
36216: LD_INT 2
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: LD_INT 2
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 1
36235: NEG
36236: PUSH
36237: LD_INT 1
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 2
36246: NEG
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 2
36257: NEG
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 2
36269: NEG
36270: PUSH
36271: LD_INT 2
36273: NEG
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36300: LD_ADDR_VAR 0 55
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: LD_INT 1
36320: NEG
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 1
36381: NEG
36382: PUSH
36383: LD_INT 2
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 0
36393: PUSH
36394: LD_INT 2
36396: NEG
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: LD_INT 1
36407: NEG
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 2
36415: PUSH
36416: LD_INT 0
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 2
36425: PUSH
36426: LD_INT 1
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 2
36435: PUSH
36436: LD_INT 2
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 1
36445: PUSH
36446: LD_INT 2
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: LD_INT 2
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 1
36465: NEG
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 2
36476: NEG
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 2
36487: NEG
36488: PUSH
36489: LD_INT 1
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: LD_INT 2
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36530: LD_ADDR_VAR 0 56
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: LD_INT 0
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: LD_INT 1
36550: NEG
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: LD_INT 0
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: LD_INT 1
36603: NEG
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 1
36611: NEG
36612: PUSH
36613: LD_INT 2
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: LD_INT 2
36626: NEG
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 2
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 2
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 2
36665: PUSH
36666: LD_INT 2
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: LD_INT 2
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 2
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 2
36706: NEG
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 2
36717: NEG
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 2
36729: NEG
36730: PUSH
36731: LD_INT 2
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36760: LD_ADDR_VAR 0 57
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: LD_INT 1
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 1
36829: NEG
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 1
36841: NEG
36842: PUSH
36843: LD_INT 2
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: LD_INT 2
36856: NEG
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: LD_INT 1
36867: NEG
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 2
36875: PUSH
36876: LD_INT 0
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 2
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 2
36895: PUSH
36896: LD_INT 2
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: LD_INT 2
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: LD_INT 2
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: NEG
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 2
36936: NEG
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 2
36947: NEG
36948: PUSH
36949: LD_INT 1
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 2
36959: NEG
36960: PUSH
36961: LD_INT 2
36963: NEG
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36990: LD_ADDR_VAR 0 58
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: LD_INT 1
37010: NEG
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 1
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 1
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 1
37048: NEG
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 1
37059: NEG
37060: PUSH
37061: LD_INT 1
37063: NEG
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: LD_INT 2
37075: NEG
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: LD_INT 2
37086: NEG
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: LD_INT 1
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 2
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 2
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 2
37125: PUSH
37126: LD_INT 2
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: LD_INT 2
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 2
37177: NEG
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 2
37189: NEG
37190: PUSH
37191: LD_INT 2
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37220: LD_ADDR_VAR 0 59
37224: PUSH
37225: LD_INT 0
37227: PUSH
37228: LD_INT 0
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 0
37237: PUSH
37238: LD_INT 1
37240: NEG
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 1
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 1
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: LD_INT 1
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 1
37278: NEG
37279: PUSH
37280: LD_INT 0
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: PUSH
37291: LD_INT 1
37293: NEG
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37308: LD_ADDR_VAR 0 60
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: LD_INT 1
37328: NEG
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: LD_INT 1
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 1
37366: NEG
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37396: LD_ADDR_VAR 0 61
37400: PUSH
37401: LD_INT 0
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 1
37465: NEG
37466: PUSH
37467: LD_INT 1
37469: NEG
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37484: LD_ADDR_VAR 0 62
37488: PUSH
37489: LD_INT 0
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 1
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 0
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: LD_INT 0
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 1
37553: NEG
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37572: LD_ADDR_VAR 0 63
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: LD_INT 1
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: LD_INT 1
37645: NEG
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37660: LD_ADDR_VAR 0 64
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 0
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 1
37718: NEG
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 1
37729: NEG
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: ST_TO_ADDR
// end ; 1 :
37748: GO 43645
37750: LD_INT 1
37752: DOUBLE
37753: EQUAL
37754: IFTRUE 37758
37756: GO 40381
37758: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37759: LD_ADDR_VAR 0 11
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: LD_INT 3
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 0
37778: PUSH
37779: LD_INT 3
37781: NEG
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 1
37789: PUSH
37790: LD_INT 2
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37803: LD_ADDR_VAR 0 12
37807: PUSH
37808: LD_INT 2
37810: PUSH
37811: LD_INT 1
37813: NEG
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 3
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 3
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37844: LD_ADDR_VAR 0 13
37848: PUSH
37849: LD_INT 3
37851: PUSH
37852: LD_INT 2
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 3
37861: PUSH
37862: LD_INT 3
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 2
37871: PUSH
37872: LD_INT 3
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: LIST
37883: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37884: LD_ADDR_VAR 0 14
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: LD_INT 3
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 0
37901: PUSH
37902: LD_INT 3
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 1
37911: NEG
37912: PUSH
37913: LD_INT 2
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: LIST
37924: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37925: LD_ADDR_VAR 0 15
37929: PUSH
37930: LD_INT 2
37932: NEG
37933: PUSH
37934: LD_INT 1
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 3
37943: NEG
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 3
37954: NEG
37955: PUSH
37956: LD_INT 1
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: LIST
37968: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37969: LD_ADDR_VAR 0 16
37973: PUSH
37974: LD_INT 2
37976: NEG
37977: PUSH
37978: LD_INT 3
37980: NEG
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 3
37988: NEG
37989: PUSH
37990: LD_INT 2
37992: NEG
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 3
38000: NEG
38001: PUSH
38002: LD_INT 3
38004: NEG
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: LIST
38014: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38015: LD_ADDR_VAR 0 17
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: LD_INT 3
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: LD_INT 3
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: LD_INT 2
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: LIST
38058: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38059: LD_ADDR_VAR 0 18
38063: PUSH
38064: LD_INT 2
38066: PUSH
38067: LD_INT 1
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 3
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 3
38087: PUSH
38088: LD_INT 1
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: LIST
38099: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38100: LD_ADDR_VAR 0 19
38104: PUSH
38105: LD_INT 3
38107: PUSH
38108: LD_INT 2
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 3
38117: PUSH
38118: LD_INT 3
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 2
38127: PUSH
38128: LD_INT 3
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: LIST
38139: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38140: LD_ADDR_VAR 0 20
38144: PUSH
38145: LD_INT 1
38147: PUSH
38148: LD_INT 3
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: LD_INT 3
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 1
38167: NEG
38168: PUSH
38169: LD_INT 2
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: LIST
38180: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38181: LD_ADDR_VAR 0 21
38185: PUSH
38186: LD_INT 2
38188: NEG
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 3
38199: NEG
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 3
38210: NEG
38211: PUSH
38212: LD_INT 1
38214: NEG
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: LIST
38224: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38225: LD_ADDR_VAR 0 22
38229: PUSH
38230: LD_INT 2
38232: NEG
38233: PUSH
38234: LD_INT 3
38236: NEG
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 3
38244: NEG
38245: PUSH
38246: LD_INT 2
38248: NEG
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 3
38256: NEG
38257: PUSH
38258: LD_INT 3
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: LIST
38270: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38271: LD_ADDR_VAR 0 23
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: LD_INT 3
38281: NEG
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: LD_INT 4
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: PUSH
38302: LD_INT 3
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: LIST
38314: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38315: LD_ADDR_VAR 0 24
38319: PUSH
38320: LD_INT 3
38322: PUSH
38323: LD_INT 0
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 3
38332: PUSH
38333: LD_INT 1
38335: NEG
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 4
38343: PUSH
38344: LD_INT 1
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: LIST
38355: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38356: LD_ADDR_VAR 0 25
38360: PUSH
38361: LD_INT 3
38363: PUSH
38364: LD_INT 3
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 4
38373: PUSH
38374: LD_INT 3
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 3
38383: PUSH
38384: LD_INT 4
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: LIST
38395: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38396: LD_ADDR_VAR 0 26
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: LD_INT 3
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 1
38413: PUSH
38414: LD_INT 4
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 1
38423: NEG
38424: PUSH
38425: LD_INT 3
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: LIST
38436: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38437: LD_ADDR_VAR 0 27
38441: PUSH
38442: LD_INT 3
38444: NEG
38445: PUSH
38446: LD_INT 0
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 3
38455: NEG
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 4
38466: NEG
38467: PUSH
38468: LD_INT 1
38470: NEG
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: LIST
38480: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38481: LD_ADDR_VAR 0 28
38485: PUSH
38486: LD_INT 3
38488: NEG
38489: PUSH
38490: LD_INT 3
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 3
38500: NEG
38501: PUSH
38502: LD_INT 4
38504: NEG
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 4
38512: NEG
38513: PUSH
38514: LD_INT 3
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38527: LD_ADDR_VAR 0 29
38531: PUSH
38532: LD_INT 1
38534: NEG
38535: PUSH
38536: LD_INT 3
38538: NEG
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 0
38546: PUSH
38547: LD_INT 3
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: LD_INT 2
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: LD_INT 4
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 0
38580: PUSH
38581: LD_INT 4
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 1
38591: PUSH
38592: LD_INT 3
38594: NEG
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 1
38602: NEG
38603: PUSH
38604: LD_INT 5
38606: NEG
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 0
38614: PUSH
38615: LD_INT 5
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 1
38625: PUSH
38626: LD_INT 4
38628: NEG
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: LD_INT 6
38640: NEG
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: LD_INT 6
38651: NEG
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 1
38659: PUSH
38660: LD_INT 5
38662: NEG
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38682: LD_ADDR_VAR 0 30
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 3
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 3
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 3
38720: PUSH
38721: LD_INT 1
38723: NEG
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 4
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 4
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 4
38751: PUSH
38752: LD_INT 1
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 5
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 5
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 5
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 6
38793: PUSH
38794: LD_INT 0
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 6
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38825: LD_ADDR_VAR 0 31
38829: PUSH
38830: LD_INT 3
38832: PUSH
38833: LD_INT 2
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 3
38842: PUSH
38843: LD_INT 3
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: LD_INT 3
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 4
38862: PUSH
38863: LD_INT 3
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 4
38872: PUSH
38873: LD_INT 4
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 3
38882: PUSH
38883: LD_INT 4
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 5
38892: PUSH
38893: LD_INT 4
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 5
38902: PUSH
38903: LD_INT 5
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 4
38912: PUSH
38913: LD_INT 5
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 6
38922: PUSH
38923: LD_INT 5
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 6
38932: PUSH
38933: LD_INT 6
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 5
38942: PUSH
38943: LD_INT 6
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38964: LD_ADDR_VAR 0 32
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: LD_INT 3
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 0
38981: PUSH
38982: LD_INT 3
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: PUSH
38993: LD_INT 2
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: PUSH
39003: LD_INT 4
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: LD_INT 4
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: LD_INT 3
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 1
39033: PUSH
39034: LD_INT 5
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: LD_INT 5
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: LD_INT 4
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 1
39064: PUSH
39065: LD_INT 6
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: LD_INT 6
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: LD_INT 5
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39107: LD_ADDR_VAR 0 33
39111: PUSH
39112: LD_INT 2
39114: NEG
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 3
39125: NEG
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 3
39136: NEG
39137: PUSH
39138: LD_INT 1
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 3
39148: NEG
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 4
39159: NEG
39160: PUSH
39161: LD_INT 0
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 4
39170: NEG
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 4
39182: NEG
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 5
39193: NEG
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 5
39204: NEG
39205: PUSH
39206: LD_INT 1
39208: NEG
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 5
39216: NEG
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 6
39227: NEG
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 6
39238: NEG
39239: PUSH
39240: LD_INT 1
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39262: LD_ADDR_VAR 0 34
39266: PUSH
39267: LD_INT 2
39269: NEG
39270: PUSH
39271: LD_INT 3
39273: NEG
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 3
39281: NEG
39282: PUSH
39283: LD_INT 2
39285: NEG
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 3
39293: NEG
39294: PUSH
39295: LD_INT 3
39297: NEG
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 3
39305: NEG
39306: PUSH
39307: LD_INT 4
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 4
39317: NEG
39318: PUSH
39319: LD_INT 3
39321: NEG
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 4
39329: NEG
39330: PUSH
39331: LD_INT 4
39333: NEG
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 4
39341: NEG
39342: PUSH
39343: LD_INT 5
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 5
39353: NEG
39354: PUSH
39355: LD_INT 4
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 5
39365: NEG
39366: PUSH
39367: LD_INT 5
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 5
39377: NEG
39378: PUSH
39379: LD_INT 6
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 6
39389: NEG
39390: PUSH
39391: LD_INT 5
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 6
39401: NEG
39402: PUSH
39403: LD_INT 6
39405: NEG
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39425: LD_ADDR_VAR 0 41
39429: PUSH
39430: LD_INT 0
39432: PUSH
39433: LD_INT 2
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: NEG
39444: PUSH
39445: LD_INT 3
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: LD_INT 2
39458: NEG
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: LIST
39468: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39469: LD_ADDR_VAR 0 42
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 3
39497: PUSH
39498: LD_INT 1
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: LIST
39509: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39510: LD_ADDR_VAR 0 43
39514: PUSH
39515: LD_INT 2
39517: PUSH
39518: LD_INT 2
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 3
39527: PUSH
39528: LD_INT 2
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 2
39537: PUSH
39538: LD_INT 3
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: LIST
39549: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39550: LD_ADDR_VAR 0 44
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: LD_INT 2
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: PUSH
39568: LD_INT 3
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 1
39577: NEG
39578: PUSH
39579: LD_INT 2
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: LIST
39590: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39591: LD_ADDR_VAR 0 45
39595: PUSH
39596: LD_INT 2
39598: NEG
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 2
39609: NEG
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 3
39620: NEG
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: LIST
39634: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39635: LD_ADDR_VAR 0 46
39639: PUSH
39640: LD_INT 2
39642: NEG
39643: PUSH
39644: LD_INT 2
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 2
39654: NEG
39655: PUSH
39656: LD_INT 3
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 3
39666: NEG
39667: PUSH
39668: LD_INT 2
39670: NEG
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: LIST
39680: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39681: LD_ADDR_VAR 0 47
39685: PUSH
39686: LD_INT 2
39688: NEG
39689: PUSH
39690: LD_INT 3
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 1
39700: NEG
39701: PUSH
39702: LD_INT 3
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39714: LD_ADDR_VAR 0 48
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: LD_INT 2
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 2
39732: PUSH
39733: LD_INT 1
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39745: LD_ADDR_VAR 0 49
39749: PUSH
39750: LD_INT 3
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 3
39762: PUSH
39763: LD_INT 2
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39774: LD_ADDR_VAR 0 50
39778: PUSH
39779: LD_INT 2
39781: PUSH
39782: LD_INT 3
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: LD_INT 3
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39803: LD_ADDR_VAR 0 51
39807: PUSH
39808: LD_INT 1
39810: NEG
39811: PUSH
39812: LD_INT 2
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 2
39821: NEG
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39834: LD_ADDR_VAR 0 52
39838: PUSH
39839: LD_INT 3
39841: NEG
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 3
39853: NEG
39854: PUSH
39855: LD_INT 2
39857: NEG
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39867: LD_ADDR_VAR 0 53
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: LD_INT 3
39878: NEG
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: LD_INT 3
39889: NEG
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 1
39897: PUSH
39898: LD_INT 2
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: LIST
39910: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39911: LD_ADDR_VAR 0 54
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: LD_INT 1
39921: NEG
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 3
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 3
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: LIST
39951: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39952: LD_ADDR_VAR 0 55
39956: PUSH
39957: LD_INT 3
39959: PUSH
39960: LD_INT 2
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 3
39969: PUSH
39970: LD_INT 3
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: LD_INT 3
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: LIST
39991: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39992: LD_ADDR_VAR 0 56
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: LD_INT 3
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 3
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: LD_INT 2
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: LIST
40032: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40033: LD_ADDR_VAR 0 57
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 3
40051: NEG
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 3
40062: NEG
40063: PUSH
40064: LD_INT 1
40066: NEG
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: LIST
40076: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40077: LD_ADDR_VAR 0 58
40081: PUSH
40082: LD_INT 2
40084: NEG
40085: PUSH
40086: LD_INT 3
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 3
40096: NEG
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 3
40108: NEG
40109: PUSH
40110: LD_INT 3
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: LIST
40122: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40123: LD_ADDR_VAR 0 59
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: LD_INT 2
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 2
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: LIST
40166: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40167: LD_ADDR_VAR 0 60
40171: PUSH
40172: LD_INT 1
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 2
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: LIST
40207: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40208: LD_ADDR_VAR 0 61
40212: PUSH
40213: LD_INT 2
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 2
40225: PUSH
40226: LD_INT 2
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: LD_INT 2
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: LIST
40247: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40248: LD_ADDR_VAR 0 62
40252: PUSH
40253: LD_INT 1
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: LD_INT 1
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: LIST
40288: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40289: LD_ADDR_VAR 0 63
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: LIST
40332: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40333: LD_ADDR_VAR 0 64
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: LD_INT 2
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 2
40352: NEG
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 2
40364: NEG
40365: PUSH
40366: LD_INT 2
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: LIST
40378: ST_TO_ADDR
// end ; 2 :
40379: GO 43645
40381: LD_INT 2
40383: DOUBLE
40384: EQUAL
40385: IFTRUE 40389
40387: GO 43644
40389: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40390: LD_ADDR_VAR 0 29
40394: PUSH
40395: LD_INT 4
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 4
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 5
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 5
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 4
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 3
40448: PUSH
40449: LD_INT 0
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 3
40458: PUSH
40459: LD_INT 1
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 3
40469: PUSH
40470: LD_INT 2
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 5
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 3
40490: PUSH
40491: LD_INT 3
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 3
40500: PUSH
40501: LD_INT 2
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 4
40510: PUSH
40511: LD_INT 3
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 4
40520: PUSH
40521: LD_INT 4
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 3
40530: PUSH
40531: LD_INT 4
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 2
40540: PUSH
40541: LD_INT 3
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 2
40550: PUSH
40551: LD_INT 2
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 4
40560: PUSH
40561: LD_INT 2
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 2
40570: PUSH
40571: LD_INT 4
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: LD_INT 4
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: LD_INT 3
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: LD_INT 4
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: LD_INT 5
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: LD_INT 5
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: LD_INT 4
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: LD_INT 3
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 2
40652: PUSH
40653: LD_INT 5
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 2
40662: NEG
40663: PUSH
40664: LD_INT 3
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 3
40673: NEG
40674: PUSH
40675: LD_INT 0
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 3
40684: NEG
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 2
40696: NEG
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 2
40707: NEG
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 3
40718: NEG
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 4
40729: NEG
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 4
40740: NEG
40741: PUSH
40742: LD_INT 1
40744: NEG
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 4
40752: NEG
40753: PUSH
40754: LD_INT 2
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 2
40764: NEG
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 4
40775: NEG
40776: PUSH
40777: LD_INT 4
40779: NEG
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 4
40787: NEG
40788: PUSH
40789: LD_INT 5
40791: NEG
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 3
40799: NEG
40800: PUSH
40801: LD_INT 4
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 3
40811: NEG
40812: PUSH
40813: LD_INT 3
40815: NEG
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 4
40823: NEG
40824: PUSH
40825: LD_INT 3
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 5
40835: NEG
40836: PUSH
40837: LD_INT 4
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 5
40847: NEG
40848: PUSH
40849: LD_INT 5
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 3
40859: NEG
40860: PUSH
40861: LD_INT 5
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 5
40871: NEG
40872: PUSH
40873: LD_INT 3
40875: NEG
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40928: LD_ADDR_VAR 0 30
40932: PUSH
40933: LD_INT 4
40935: PUSH
40936: LD_INT 4
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 4
40945: PUSH
40946: LD_INT 3
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 5
40955: PUSH
40956: LD_INT 4
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 5
40965: PUSH
40966: LD_INT 5
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 4
40975: PUSH
40976: LD_INT 5
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 3
40985: PUSH
40986: LD_INT 4
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 3
40995: PUSH
40996: LD_INT 3
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 5
41005: PUSH
41006: LD_INT 3
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 3
41015: PUSH
41016: LD_INT 5
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: LD_INT 3
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: LD_INT 2
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: LD_INT 3
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: LD_INT 4
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: LD_INT 4
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 1
41075: NEG
41076: PUSH
41077: LD_INT 3
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: PUSH
41098: LD_INT 4
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 2
41107: NEG
41108: PUSH
41109: LD_INT 2
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 4
41118: NEG
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 4
41129: NEG
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 3
41141: NEG
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 3
41152: NEG
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 4
41163: NEG
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 5
41174: NEG
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 5
41185: NEG
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 5
41197: NEG
41198: PUSH
41199: LD_INT 2
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 3
41209: NEG
41210: PUSH
41211: LD_INT 2
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 3
41220: NEG
41221: PUSH
41222: LD_INT 3
41224: NEG
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 3
41232: NEG
41233: PUSH
41234: LD_INT 4
41236: NEG
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 2
41244: NEG
41245: PUSH
41246: LD_INT 3
41248: NEG
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 2
41256: NEG
41257: PUSH
41258: LD_INT 2
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 3
41268: NEG
41269: PUSH
41270: LD_INT 2
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 4
41280: NEG
41281: PUSH
41282: LD_INT 3
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 4
41292: NEG
41293: PUSH
41294: LD_INT 4
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: NEG
41305: PUSH
41306: LD_INT 4
41308: NEG
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 4
41316: NEG
41317: PUSH
41318: LD_INT 2
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: LD_INT 4
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: LD_INT 5
41342: NEG
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: LD_INT 4
41353: NEG
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: LD_INT 3
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: LD_INT 3
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: LD_INT 4
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: LD_INT 5
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 2
41407: PUSH
41408: LD_INT 3
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: NEG
41419: PUSH
41420: LD_INT 5
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41475: LD_ADDR_VAR 0 31
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: LD_INT 4
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 3
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: PUSH
41503: LD_INT 4
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: LD_INT 5
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 0
41522: PUSH
41523: LD_INT 5
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: LD_INT 4
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: LD_INT 3
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 2
41554: PUSH
41555: LD_INT 5
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: LD_INT 3
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 3
41575: NEG
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 3
41586: NEG
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 2
41609: NEG
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 3
41620: NEG
41621: PUSH
41622: LD_INT 1
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 4
41631: NEG
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 4
41642: NEG
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 4
41654: NEG
41655: PUSH
41656: LD_INT 2
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 2
41666: NEG
41667: PUSH
41668: LD_INT 2
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 4
41677: NEG
41678: PUSH
41679: LD_INT 4
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 4
41689: NEG
41690: PUSH
41691: LD_INT 5
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 3
41701: NEG
41702: PUSH
41703: LD_INT 4
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 3
41713: NEG
41714: PUSH
41715: LD_INT 3
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 4
41725: NEG
41726: PUSH
41727: LD_INT 3
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 5
41737: NEG
41738: PUSH
41739: LD_INT 4
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 5
41749: NEG
41750: PUSH
41751: LD_INT 5
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 3
41761: NEG
41762: PUSH
41763: LD_INT 5
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 5
41773: NEG
41774: PUSH
41775: LD_INT 3
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: LD_INT 3
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: LD_INT 4
41799: NEG
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: LD_INT 3
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: LD_INT 2
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: LD_INT 2
41832: NEG
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: LD_INT 3
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: NEG
41853: PUSH
41854: LD_INT 4
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 2
41875: NEG
41876: PUSH
41877: LD_INT 4
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 4
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 4
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 5
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 5
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 4
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 3
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 3
41948: PUSH
41949: LD_INT 1
41951: NEG
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 3
41959: PUSH
41960: LD_INT 2
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 5
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42025: LD_ADDR_VAR 0 32
42029: PUSH
42030: LD_INT 4
42032: NEG
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 4
42043: NEG
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 3
42055: NEG
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 3
42066: NEG
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 4
42077: NEG
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 5
42088: NEG
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 5
42099: NEG
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 5
42111: NEG
42112: PUSH
42113: LD_INT 2
42115: NEG
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 3
42123: NEG
42124: PUSH
42125: LD_INT 2
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 3
42134: NEG
42135: PUSH
42136: LD_INT 3
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 3
42146: NEG
42147: PUSH
42148: LD_INT 4
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 2
42158: NEG
42159: PUSH
42160: LD_INT 3
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: NEG
42171: PUSH
42172: LD_INT 2
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 3
42182: NEG
42183: PUSH
42184: LD_INT 2
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 4
42194: NEG
42195: PUSH
42196: LD_INT 3
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 4
42206: NEG
42207: PUSH
42208: LD_INT 4
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 2
42218: NEG
42219: PUSH
42220: LD_INT 4
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 4
42230: NEG
42231: PUSH
42232: LD_INT 2
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: LD_INT 4
42245: NEG
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 5
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: LD_INT 4
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: LD_INT 3
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 3
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: LD_INT 4
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: LD_INT 5
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: LD_INT 3
42324: NEG
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 2
42332: NEG
42333: PUSH
42334: LD_INT 5
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 3
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 3
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 4
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 4
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 3
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 2
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 2
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 4
42427: PUSH
42428: LD_INT 2
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 4
42437: PUSH
42438: LD_INT 4
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 4
42447: PUSH
42448: LD_INT 3
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 5
42457: PUSH
42458: LD_INT 4
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 5
42467: PUSH
42468: LD_INT 5
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 4
42477: PUSH
42478: LD_INT 5
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 3
42487: PUSH
42488: LD_INT 4
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 3
42497: PUSH
42498: LD_INT 3
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 5
42507: PUSH
42508: LD_INT 3
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 3
42517: PUSH
42518: LD_INT 5
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42572: LD_ADDR_VAR 0 33
42576: PUSH
42577: LD_INT 4
42579: NEG
42580: PUSH
42581: LD_INT 4
42583: NEG
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 4
42591: NEG
42592: PUSH
42593: LD_INT 5
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 3
42603: NEG
42604: PUSH
42605: LD_INT 4
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 3
42615: NEG
42616: PUSH
42617: LD_INT 3
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 4
42627: NEG
42628: PUSH
42629: LD_INT 3
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 5
42639: NEG
42640: PUSH
42641: LD_INT 4
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 5
42651: NEG
42652: PUSH
42653: LD_INT 5
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 3
42663: NEG
42664: PUSH
42665: LD_INT 5
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 5
42675: NEG
42676: PUSH
42677: LD_INT 3
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: LD_INT 3
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: LD_INT 4
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: LD_INT 3
42712: NEG
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: LD_INT 2
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: LD_INT 2
42734: NEG
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: LD_INT 3
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: LD_INT 4
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: LD_INT 2
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 2
42777: NEG
42778: PUSH
42779: LD_INT 4
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 4
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 4
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 5
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 5
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 4
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 3
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 3
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 3
42861: PUSH
42862: LD_INT 2
42864: NEG
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 5
42872: PUSH
42873: LD_INT 2
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 3
42882: PUSH
42883: LD_INT 3
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 3
42892: PUSH
42893: LD_INT 2
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 4
42902: PUSH
42903: LD_INT 3
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 4
42912: PUSH
42913: LD_INT 4
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 3
42922: PUSH
42923: LD_INT 4
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: LD_INT 3
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: LD_INT 2
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 4
42952: PUSH
42953: LD_INT 2
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: LD_INT 4
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: LD_INT 4
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 3
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 4
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: LD_INT 5
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: LD_INT 5
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: LD_INT 4
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: LD_INT 3
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 2
43044: PUSH
43045: LD_INT 5
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 2
43054: NEG
43055: PUSH
43056: LD_INT 3
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43110: LD_ADDR_VAR 0 34
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: LD_INT 4
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: LD_INT 5
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: LD_INT 4
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: LD_INT 3
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: LD_INT 3
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: LD_INT 4
43176: NEG
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: LD_INT 5
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 2
43196: PUSH
43197: LD_INT 3
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 2
43207: NEG
43208: PUSH
43209: LD_INT 5
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 3
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 3
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 4
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 4
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 3
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 2
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 4
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 4
43312: PUSH
43313: LD_INT 4
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 4
43322: PUSH
43323: LD_INT 3
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 5
43332: PUSH
43333: LD_INT 4
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 5
43342: PUSH
43343: LD_INT 5
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 4
43352: PUSH
43353: LD_INT 5
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 3
43362: PUSH
43363: LD_INT 4
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 3
43372: PUSH
43373: LD_INT 3
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 5
43382: PUSH
43383: LD_INT 3
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 3
43392: PUSH
43393: LD_INT 5
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 3
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: LD_INT 2
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: LD_INT 3
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: LD_INT 4
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: LD_INT 4
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: LD_INT 3
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: LD_INT 2
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: PUSH
43475: LD_INT 4
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 2
43484: NEG
43485: PUSH
43486: LD_INT 2
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 4
43495: NEG
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 4
43506: NEG
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 3
43518: NEG
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 3
43529: NEG
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 4
43540: NEG
43541: PUSH
43542: LD_INT 1
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 5
43551: NEG
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 5
43562: NEG
43563: PUSH
43564: LD_INT 1
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 5
43574: NEG
43575: PUSH
43576: LD_INT 2
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 3
43586: NEG
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: ST_TO_ADDR
// end ; end ;
43642: GO 43645
43644: POP
// case btype of b_depot , b_warehouse :
43645: LD_VAR 0 1
43649: PUSH
43650: LD_INT 0
43652: DOUBLE
43653: EQUAL
43654: IFTRUE 43664
43656: LD_INT 1
43658: DOUBLE
43659: EQUAL
43660: IFTRUE 43664
43662: GO 43865
43664: POP
// case nation of nation_american :
43665: LD_VAR 0 5
43669: PUSH
43670: LD_INT 1
43672: DOUBLE
43673: EQUAL
43674: IFTRUE 43678
43676: GO 43734
43678: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43679: LD_ADDR_VAR 0 9
43683: PUSH
43684: LD_VAR 0 11
43688: PUSH
43689: LD_VAR 0 12
43693: PUSH
43694: LD_VAR 0 13
43698: PUSH
43699: LD_VAR 0 14
43703: PUSH
43704: LD_VAR 0 15
43708: PUSH
43709: LD_VAR 0 16
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: PUSH
43722: LD_VAR 0 4
43726: PUSH
43727: LD_INT 1
43729: PLUS
43730: ARRAY
43731: ST_TO_ADDR
43732: GO 43863
43734: LD_INT 2
43736: DOUBLE
43737: EQUAL
43738: IFTRUE 43742
43740: GO 43798
43742: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43743: LD_ADDR_VAR 0 9
43747: PUSH
43748: LD_VAR 0 17
43752: PUSH
43753: LD_VAR 0 18
43757: PUSH
43758: LD_VAR 0 19
43762: PUSH
43763: LD_VAR 0 20
43767: PUSH
43768: LD_VAR 0 21
43772: PUSH
43773: LD_VAR 0 22
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: PUSH
43786: LD_VAR 0 4
43790: PUSH
43791: LD_INT 1
43793: PLUS
43794: ARRAY
43795: ST_TO_ADDR
43796: GO 43863
43798: LD_INT 3
43800: DOUBLE
43801: EQUAL
43802: IFTRUE 43806
43804: GO 43862
43806: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43807: LD_ADDR_VAR 0 9
43811: PUSH
43812: LD_VAR 0 23
43816: PUSH
43817: LD_VAR 0 24
43821: PUSH
43822: LD_VAR 0 25
43826: PUSH
43827: LD_VAR 0 26
43831: PUSH
43832: LD_VAR 0 27
43836: PUSH
43837: LD_VAR 0 28
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: PUSH
43850: LD_VAR 0 4
43854: PUSH
43855: LD_INT 1
43857: PLUS
43858: ARRAY
43859: ST_TO_ADDR
43860: GO 43863
43862: POP
43863: GO 44418
43865: LD_INT 2
43867: DOUBLE
43868: EQUAL
43869: IFTRUE 43879
43871: LD_INT 3
43873: DOUBLE
43874: EQUAL
43875: IFTRUE 43879
43877: GO 43935
43879: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43880: LD_ADDR_VAR 0 9
43884: PUSH
43885: LD_VAR 0 29
43889: PUSH
43890: LD_VAR 0 30
43894: PUSH
43895: LD_VAR 0 31
43899: PUSH
43900: LD_VAR 0 32
43904: PUSH
43905: LD_VAR 0 33
43909: PUSH
43910: LD_VAR 0 34
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: PUSH
43923: LD_VAR 0 4
43927: PUSH
43928: LD_INT 1
43930: PLUS
43931: ARRAY
43932: ST_TO_ADDR
43933: GO 44418
43935: LD_INT 16
43937: DOUBLE
43938: EQUAL
43939: IFTRUE 43997
43941: LD_INT 17
43943: DOUBLE
43944: EQUAL
43945: IFTRUE 43997
43947: LD_INT 18
43949: DOUBLE
43950: EQUAL
43951: IFTRUE 43997
43953: LD_INT 19
43955: DOUBLE
43956: EQUAL
43957: IFTRUE 43997
43959: LD_INT 22
43961: DOUBLE
43962: EQUAL
43963: IFTRUE 43997
43965: LD_INT 20
43967: DOUBLE
43968: EQUAL
43969: IFTRUE 43997
43971: LD_INT 21
43973: DOUBLE
43974: EQUAL
43975: IFTRUE 43997
43977: LD_INT 23
43979: DOUBLE
43980: EQUAL
43981: IFTRUE 43997
43983: LD_INT 24
43985: DOUBLE
43986: EQUAL
43987: IFTRUE 43997
43989: LD_INT 25
43991: DOUBLE
43992: EQUAL
43993: IFTRUE 43997
43995: GO 44053
43997: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43998: LD_ADDR_VAR 0 9
44002: PUSH
44003: LD_VAR 0 35
44007: PUSH
44008: LD_VAR 0 36
44012: PUSH
44013: LD_VAR 0 37
44017: PUSH
44018: LD_VAR 0 38
44022: PUSH
44023: LD_VAR 0 39
44027: PUSH
44028: LD_VAR 0 40
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: PUSH
44041: LD_VAR 0 4
44045: PUSH
44046: LD_INT 1
44048: PLUS
44049: ARRAY
44050: ST_TO_ADDR
44051: GO 44418
44053: LD_INT 6
44055: DOUBLE
44056: EQUAL
44057: IFTRUE 44109
44059: LD_INT 7
44061: DOUBLE
44062: EQUAL
44063: IFTRUE 44109
44065: LD_INT 8
44067: DOUBLE
44068: EQUAL
44069: IFTRUE 44109
44071: LD_INT 13
44073: DOUBLE
44074: EQUAL
44075: IFTRUE 44109
44077: LD_INT 12
44079: DOUBLE
44080: EQUAL
44081: IFTRUE 44109
44083: LD_INT 15
44085: DOUBLE
44086: EQUAL
44087: IFTRUE 44109
44089: LD_INT 11
44091: DOUBLE
44092: EQUAL
44093: IFTRUE 44109
44095: LD_INT 14
44097: DOUBLE
44098: EQUAL
44099: IFTRUE 44109
44101: LD_INT 10
44103: DOUBLE
44104: EQUAL
44105: IFTRUE 44109
44107: GO 44165
44109: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44110: LD_ADDR_VAR 0 9
44114: PUSH
44115: LD_VAR 0 41
44119: PUSH
44120: LD_VAR 0 42
44124: PUSH
44125: LD_VAR 0 43
44129: PUSH
44130: LD_VAR 0 44
44134: PUSH
44135: LD_VAR 0 45
44139: PUSH
44140: LD_VAR 0 46
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: PUSH
44153: LD_VAR 0 4
44157: PUSH
44158: LD_INT 1
44160: PLUS
44161: ARRAY
44162: ST_TO_ADDR
44163: GO 44418
44165: LD_INT 36
44167: DOUBLE
44168: EQUAL
44169: IFTRUE 44173
44171: GO 44229
44173: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44174: LD_ADDR_VAR 0 9
44178: PUSH
44179: LD_VAR 0 47
44183: PUSH
44184: LD_VAR 0 48
44188: PUSH
44189: LD_VAR 0 49
44193: PUSH
44194: LD_VAR 0 50
44198: PUSH
44199: LD_VAR 0 51
44203: PUSH
44204: LD_VAR 0 52
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: PUSH
44217: LD_VAR 0 4
44221: PUSH
44222: LD_INT 1
44224: PLUS
44225: ARRAY
44226: ST_TO_ADDR
44227: GO 44418
44229: LD_INT 4
44231: DOUBLE
44232: EQUAL
44233: IFTRUE 44255
44235: LD_INT 5
44237: DOUBLE
44238: EQUAL
44239: IFTRUE 44255
44241: LD_INT 34
44243: DOUBLE
44244: EQUAL
44245: IFTRUE 44255
44247: LD_INT 37
44249: DOUBLE
44250: EQUAL
44251: IFTRUE 44255
44253: GO 44311
44255: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44256: LD_ADDR_VAR 0 9
44260: PUSH
44261: LD_VAR 0 53
44265: PUSH
44266: LD_VAR 0 54
44270: PUSH
44271: LD_VAR 0 55
44275: PUSH
44276: LD_VAR 0 56
44280: PUSH
44281: LD_VAR 0 57
44285: PUSH
44286: LD_VAR 0 58
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: PUSH
44299: LD_VAR 0 4
44303: PUSH
44304: LD_INT 1
44306: PLUS
44307: ARRAY
44308: ST_TO_ADDR
44309: GO 44418
44311: LD_INT 31
44313: DOUBLE
44314: EQUAL
44315: IFTRUE 44361
44317: LD_INT 32
44319: DOUBLE
44320: EQUAL
44321: IFTRUE 44361
44323: LD_INT 33
44325: DOUBLE
44326: EQUAL
44327: IFTRUE 44361
44329: LD_INT 27
44331: DOUBLE
44332: EQUAL
44333: IFTRUE 44361
44335: LD_INT 26
44337: DOUBLE
44338: EQUAL
44339: IFTRUE 44361
44341: LD_INT 28
44343: DOUBLE
44344: EQUAL
44345: IFTRUE 44361
44347: LD_INT 29
44349: DOUBLE
44350: EQUAL
44351: IFTRUE 44361
44353: LD_INT 30
44355: DOUBLE
44356: EQUAL
44357: IFTRUE 44361
44359: GO 44417
44361: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
44362: LD_ADDR_VAR 0 9
44366: PUSH
44367: LD_VAR 0 59
44371: PUSH
44372: LD_VAR 0 60
44376: PUSH
44377: LD_VAR 0 61
44381: PUSH
44382: LD_VAR 0 62
44386: PUSH
44387: LD_VAR 0 63
44391: PUSH
44392: LD_VAR 0 64
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: PUSH
44405: LD_VAR 0 4
44409: PUSH
44410: LD_INT 1
44412: PLUS
44413: ARRAY
44414: ST_TO_ADDR
44415: GO 44418
44417: POP
// temp_list2 = [ ] ;
44418: LD_ADDR_VAR 0 10
44422: PUSH
44423: EMPTY
44424: ST_TO_ADDR
// for i in temp_list do
44425: LD_ADDR_VAR 0 8
44429: PUSH
44430: LD_VAR 0 9
44434: PUSH
44435: FOR_IN
44436: IFFALSE 44488
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44438: LD_ADDR_VAR 0 10
44442: PUSH
44443: LD_VAR 0 10
44447: PUSH
44448: LD_VAR 0 8
44452: PUSH
44453: LD_INT 1
44455: ARRAY
44456: PUSH
44457: LD_VAR 0 2
44461: PLUS
44462: PUSH
44463: LD_VAR 0 8
44467: PUSH
44468: LD_INT 2
44470: ARRAY
44471: PUSH
44472: LD_VAR 0 3
44476: PLUS
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: EMPTY
44483: LIST
44484: ADD
44485: ST_TO_ADDR
44486: GO 44435
44488: POP
44489: POP
// result = temp_list2 ;
44490: LD_ADDR_VAR 0 7
44494: PUSH
44495: LD_VAR 0 10
44499: ST_TO_ADDR
// end ;
44500: LD_VAR 0 7
44504: RET
// export function EnemyInRange ( unit , dist ) ; begin
44505: LD_INT 0
44507: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44508: LD_ADDR_VAR 0 3
44512: PUSH
44513: LD_VAR 0 1
44517: PPUSH
44518: CALL_OW 255
44522: PPUSH
44523: LD_VAR 0 1
44527: PPUSH
44528: CALL_OW 250
44532: PPUSH
44533: LD_VAR 0 1
44537: PPUSH
44538: CALL_OW 251
44542: PPUSH
44543: LD_VAR 0 2
44547: PPUSH
44548: CALL 17762 0 4
44552: PUSH
44553: LD_INT 4
44555: ARRAY
44556: ST_TO_ADDR
// end ;
44557: LD_VAR 0 3
44561: RET
// export function PlayerSeeMe ( unit ) ; begin
44562: LD_INT 0
44564: PPUSH
// result := See ( your_side , unit ) ;
44565: LD_ADDR_VAR 0 2
44569: PUSH
44570: LD_OWVAR 2
44574: PPUSH
44575: LD_VAR 0 1
44579: PPUSH
44580: CALL_OW 292
44584: ST_TO_ADDR
// end ;
44585: LD_VAR 0 2
44589: RET
// export function ReverseDir ( unit ) ; begin
44590: LD_INT 0
44592: PPUSH
// if not unit then
44593: LD_VAR 0 1
44597: NOT
44598: IFFALSE 44602
// exit ;
44600: GO 44625
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44602: LD_ADDR_VAR 0 2
44606: PUSH
44607: LD_VAR 0 1
44611: PPUSH
44612: CALL_OW 254
44616: PUSH
44617: LD_INT 3
44619: PLUS
44620: PUSH
44621: LD_INT 6
44623: MOD
44624: ST_TO_ADDR
// end ;
44625: LD_VAR 0 2
44629: RET
// export function ReverseArray ( array ) ; var i ; begin
44630: LD_INT 0
44632: PPUSH
44633: PPUSH
// if not array then
44634: LD_VAR 0 1
44638: NOT
44639: IFFALSE 44643
// exit ;
44641: GO 44698
// result := [ ] ;
44643: LD_ADDR_VAR 0 2
44647: PUSH
44648: EMPTY
44649: ST_TO_ADDR
// for i := array downto 1 do
44650: LD_ADDR_VAR 0 3
44654: PUSH
44655: DOUBLE
44656: LD_VAR 0 1
44660: INC
44661: ST_TO_ADDR
44662: LD_INT 1
44664: PUSH
44665: FOR_DOWNTO
44666: IFFALSE 44696
// result := Join ( result , array [ i ] ) ;
44668: LD_ADDR_VAR 0 2
44672: PUSH
44673: LD_VAR 0 2
44677: PPUSH
44678: LD_VAR 0 1
44682: PUSH
44683: LD_VAR 0 3
44687: ARRAY
44688: PPUSH
44689: CALL 49550 0 2
44693: ST_TO_ADDR
44694: GO 44665
44696: POP
44697: POP
// end ;
44698: LD_VAR 0 2
44702: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44703: LD_INT 0
44705: PPUSH
44706: PPUSH
44707: PPUSH
44708: PPUSH
44709: PPUSH
44710: PPUSH
// if not unit or not hexes then
44711: LD_VAR 0 1
44715: NOT
44716: IFTRUE 44725
44718: PUSH
44719: LD_VAR 0 2
44723: NOT
44724: OR
44725: IFFALSE 44729
// exit ;
44727: GO 44852
// dist := 9999 ;
44729: LD_ADDR_VAR 0 5
44733: PUSH
44734: LD_INT 9999
44736: ST_TO_ADDR
// for i = 1 to hexes do
44737: LD_ADDR_VAR 0 4
44741: PUSH
44742: DOUBLE
44743: LD_INT 1
44745: DEC
44746: ST_TO_ADDR
44747: LD_VAR 0 2
44751: PUSH
44752: FOR_TO
44753: IFFALSE 44840
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44755: LD_ADDR_VAR 0 6
44759: PUSH
44760: LD_VAR 0 1
44764: PPUSH
44765: LD_VAR 0 2
44769: PUSH
44770: LD_VAR 0 4
44774: ARRAY
44775: PUSH
44776: LD_INT 1
44778: ARRAY
44779: PPUSH
44780: LD_VAR 0 2
44784: PUSH
44785: LD_VAR 0 4
44789: ARRAY
44790: PUSH
44791: LD_INT 2
44793: ARRAY
44794: PPUSH
44795: CALL_OW 297
44799: ST_TO_ADDR
// if tdist < dist then
44800: LD_VAR 0 6
44804: PUSH
44805: LD_VAR 0 5
44809: LESS
44810: IFFALSE 44838
// begin hex := hexes [ i ] ;
44812: LD_ADDR_VAR 0 8
44816: PUSH
44817: LD_VAR 0 2
44821: PUSH
44822: LD_VAR 0 4
44826: ARRAY
44827: ST_TO_ADDR
// dist := tdist ;
44828: LD_ADDR_VAR 0 5
44832: PUSH
44833: LD_VAR 0 6
44837: ST_TO_ADDR
// end ; end ;
44838: GO 44752
44840: POP
44841: POP
// result := hex ;
44842: LD_ADDR_VAR 0 3
44846: PUSH
44847: LD_VAR 0 8
44851: ST_TO_ADDR
// end ;
44852: LD_VAR 0 3
44856: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44857: LD_INT 0
44859: PPUSH
44860: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44861: LD_VAR 0 1
44865: NOT
44866: IFTRUE 44905
44868: PUSH
44869: LD_VAR 0 1
44873: PUSH
44874: LD_INT 21
44876: PUSH
44877: LD_INT 2
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 23
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PPUSH
44898: CALL_OW 69
44902: IN
44903: NOT
44904: OR
44905: IFFALSE 44909
// exit ;
44907: GO 44956
// for i = 1 to 3 do
44909: LD_ADDR_VAR 0 3
44913: PUSH
44914: DOUBLE
44915: LD_INT 1
44917: DEC
44918: ST_TO_ADDR
44919: LD_INT 3
44921: PUSH
44922: FOR_TO
44923: IFFALSE 44954
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44925: LD_VAR 0 1
44929: PPUSH
44930: CALL_OW 250
44934: PPUSH
44935: LD_VAR 0 1
44939: PPUSH
44940: CALL_OW 251
44944: PPUSH
44945: LD_INT 1
44947: PPUSH
44948: CALL_OW 453
44952: GO 44922
44954: POP
44955: POP
// end ;
44956: LD_VAR 0 2
44960: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44961: LD_INT 0
44963: PPUSH
44964: PPUSH
44965: PPUSH
44966: PPUSH
44967: PPUSH
44968: PPUSH
// if not unit or not enemy_unit then
44969: LD_VAR 0 1
44973: NOT
44974: IFTRUE 44983
44976: PUSH
44977: LD_VAR 0 2
44981: NOT
44982: OR
44983: IFFALSE 44987
// exit ;
44985: GO 45468
// if GetLives ( i ) < 250 then
44987: LD_VAR 0 4
44991: PPUSH
44992: CALL_OW 256
44996: PUSH
44997: LD_INT 250
44999: LESS
45000: IFFALSE 45013
// begin ComAutodestruct ( i ) ;
45002: LD_VAR 0 4
45006: PPUSH
45007: CALL 44857 0 1
// exit ;
45011: GO 45468
// end ; x := GetX ( enemy_unit ) ;
45013: LD_ADDR_VAR 0 7
45017: PUSH
45018: LD_VAR 0 2
45022: PPUSH
45023: CALL_OW 250
45027: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45028: LD_ADDR_VAR 0 8
45032: PUSH
45033: LD_VAR 0 2
45037: PPUSH
45038: CALL_OW 251
45042: ST_TO_ADDR
// if not x or not y then
45043: LD_VAR 0 7
45047: NOT
45048: IFTRUE 45057
45050: PUSH
45051: LD_VAR 0 8
45055: NOT
45056: OR
45057: IFFALSE 45061
// exit ;
45059: GO 45468
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45061: LD_ADDR_VAR 0 6
45065: PUSH
45066: LD_VAR 0 7
45070: PPUSH
45071: LD_INT 0
45073: PPUSH
45074: LD_INT 4
45076: PPUSH
45077: CALL_OW 272
45081: PUSH
45082: LD_VAR 0 8
45086: PPUSH
45087: LD_INT 0
45089: PPUSH
45090: LD_INT 4
45092: PPUSH
45093: CALL_OW 273
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_VAR 0 7
45106: PPUSH
45107: LD_INT 1
45109: PPUSH
45110: LD_INT 4
45112: PPUSH
45113: CALL_OW 272
45117: PUSH
45118: LD_VAR 0 8
45122: PPUSH
45123: LD_INT 1
45125: PPUSH
45126: LD_INT 4
45128: PPUSH
45129: CALL_OW 273
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_VAR 0 7
45142: PPUSH
45143: LD_INT 2
45145: PPUSH
45146: LD_INT 4
45148: PPUSH
45149: CALL_OW 272
45153: PUSH
45154: LD_VAR 0 8
45158: PPUSH
45159: LD_INT 2
45161: PPUSH
45162: LD_INT 4
45164: PPUSH
45165: CALL_OW 273
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_VAR 0 7
45178: PPUSH
45179: LD_INT 3
45181: PPUSH
45182: LD_INT 4
45184: PPUSH
45185: CALL_OW 272
45189: PUSH
45190: LD_VAR 0 8
45194: PPUSH
45195: LD_INT 3
45197: PPUSH
45198: LD_INT 4
45200: PPUSH
45201: CALL_OW 273
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_VAR 0 7
45214: PPUSH
45215: LD_INT 4
45217: PPUSH
45218: LD_INT 4
45220: PPUSH
45221: CALL_OW 272
45225: PUSH
45226: LD_VAR 0 8
45230: PPUSH
45231: LD_INT 4
45233: PPUSH
45234: LD_INT 4
45236: PPUSH
45237: CALL_OW 273
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_VAR 0 7
45250: PPUSH
45251: LD_INT 5
45253: PPUSH
45254: LD_INT 4
45256: PPUSH
45257: CALL_OW 272
45261: PUSH
45262: LD_VAR 0 8
45266: PPUSH
45267: LD_INT 5
45269: PPUSH
45270: LD_INT 4
45272: PPUSH
45273: CALL_OW 273
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: ST_TO_ADDR
// for i = tmp downto 1 do
45290: LD_ADDR_VAR 0 4
45294: PUSH
45295: DOUBLE
45296: LD_VAR 0 6
45300: INC
45301: ST_TO_ADDR
45302: LD_INT 1
45304: PUSH
45305: FOR_DOWNTO
45306: IFFALSE 45409
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45308: LD_VAR 0 6
45312: PUSH
45313: LD_VAR 0 4
45317: ARRAY
45318: PUSH
45319: LD_INT 1
45321: ARRAY
45322: PPUSH
45323: LD_VAR 0 6
45327: PUSH
45328: LD_VAR 0 4
45332: ARRAY
45333: PUSH
45334: LD_INT 2
45336: ARRAY
45337: PPUSH
45338: CALL_OW 488
45342: NOT
45343: IFTRUE 45385
45345: PUSH
45346: LD_VAR 0 6
45350: PUSH
45351: LD_VAR 0 4
45355: ARRAY
45356: PUSH
45357: LD_INT 1
45359: ARRAY
45360: PPUSH
45361: LD_VAR 0 6
45365: PUSH
45366: LD_VAR 0 4
45370: ARRAY
45371: PUSH
45372: LD_INT 2
45374: ARRAY
45375: PPUSH
45376: CALL_OW 428
45380: PUSH
45381: LD_INT 0
45383: NONEQUAL
45384: OR
45385: IFFALSE 45407
// tmp := Delete ( tmp , i ) ;
45387: LD_ADDR_VAR 0 6
45391: PUSH
45392: LD_VAR 0 6
45396: PPUSH
45397: LD_VAR 0 4
45401: PPUSH
45402: CALL_OW 3
45406: ST_TO_ADDR
45407: GO 45305
45409: POP
45410: POP
// j := GetClosestHex ( unit , tmp ) ;
45411: LD_ADDR_VAR 0 5
45415: PUSH
45416: LD_VAR 0 1
45420: PPUSH
45421: LD_VAR 0 6
45425: PPUSH
45426: CALL 44703 0 2
45430: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45431: LD_VAR 0 1
45435: PPUSH
45436: LD_VAR 0 5
45440: PUSH
45441: LD_INT 1
45443: ARRAY
45444: PPUSH
45445: LD_VAR 0 5
45449: PUSH
45450: LD_INT 2
45452: ARRAY
45453: PPUSH
45454: CALL_OW 111
// result := j ;
45458: LD_ADDR_VAR 0 3
45462: PUSH
45463: LD_VAR 0 5
45467: ST_TO_ADDR
// end ;
45468: LD_VAR 0 3
45472: RET
// export function PrepareApemanSoldier ( ) ; begin
45473: LD_INT 0
45475: PPUSH
// uc_nation := 0 ;
45476: LD_ADDR_OWVAR 21
45480: PUSH
45481: LD_INT 0
45483: ST_TO_ADDR
// hc_sex := sex_male ;
45484: LD_ADDR_OWVAR 27
45488: PUSH
45489: LD_INT 1
45491: ST_TO_ADDR
// hc_name :=  ;
45492: LD_ADDR_OWVAR 26
45496: PUSH
45497: LD_STRING 
45499: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
45500: LD_ADDR_OWVAR 28
45504: PUSH
45505: LD_INT 15
45507: ST_TO_ADDR
// hc_gallery :=  ;
45508: LD_ADDR_OWVAR 33
45512: PUSH
45513: LD_STRING 
45515: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45516: LD_ADDR_OWVAR 31
45520: PUSH
45521: LD_INT 0
45523: PPUSH
45524: LD_INT 3
45526: PPUSH
45527: CALL_OW 12
45531: PUSH
45532: LD_INT 0
45534: PPUSH
45535: LD_INT 3
45537: PPUSH
45538: CALL_OW 12
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45555: LD_ADDR_OWVAR 29
45559: PUSH
45560: LD_INT 10
45562: PUSH
45563: LD_INT 12
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: ST_TO_ADDR
// end ;
45570: LD_VAR 0 1
45574: RET
// export function PrepareApemanEngineer ( ) ; begin
45575: LD_INT 0
45577: PPUSH
// uc_nation := 0 ;
45578: LD_ADDR_OWVAR 21
45582: PUSH
45583: LD_INT 0
45585: ST_TO_ADDR
// hc_sex := sex_male ;
45586: LD_ADDR_OWVAR 27
45590: PUSH
45591: LD_INT 1
45593: ST_TO_ADDR
// hc_name :=  ;
45594: LD_ADDR_OWVAR 26
45598: PUSH
45599: LD_STRING 
45601: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
45602: LD_ADDR_OWVAR 28
45606: PUSH
45607: LD_INT 16
45609: ST_TO_ADDR
// hc_gallery :=  ;
45610: LD_ADDR_OWVAR 33
45614: PUSH
45615: LD_STRING 
45617: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45618: LD_ADDR_OWVAR 31
45622: PUSH
45623: LD_INT 0
45625: PPUSH
45626: LD_INT 3
45628: PPUSH
45629: CALL_OW 12
45633: PUSH
45634: LD_INT 0
45636: PPUSH
45637: LD_INT 3
45639: PPUSH
45640: CALL_OW 12
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45657: LD_ADDR_OWVAR 29
45661: PUSH
45662: LD_INT 10
45664: PUSH
45665: LD_INT 12
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: ST_TO_ADDR
// end ;
45672: LD_VAR 0 1
45676: RET
// export function PrepareApeman ( agressivity ) ; begin
45677: LD_INT 0
45679: PPUSH
// uc_side := 0 ;
45680: LD_ADDR_OWVAR 20
45684: PUSH
45685: LD_INT 0
45687: ST_TO_ADDR
// uc_nation := 0 ;
45688: LD_ADDR_OWVAR 21
45692: PUSH
45693: LD_INT 0
45695: ST_TO_ADDR
// hc_sex := sex_male ;
45696: LD_ADDR_OWVAR 27
45700: PUSH
45701: LD_INT 1
45703: ST_TO_ADDR
// hc_class := class_apeman ;
45704: LD_ADDR_OWVAR 28
45708: PUSH
45709: LD_INT 12
45711: ST_TO_ADDR
// hc_gallery :=  ;
45712: LD_ADDR_OWVAR 33
45716: PUSH
45717: LD_STRING 
45719: ST_TO_ADDR
// hc_name :=  ;
45720: LD_ADDR_OWVAR 26
45724: PUSH
45725: LD_STRING 
45727: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45728: LD_ADDR_OWVAR 29
45732: PUSH
45733: LD_INT 10
45735: PUSH
45736: LD_INT 12
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: ST_TO_ADDR
// if agressivity = 0 then
45743: LD_VAR 0 1
45747: PUSH
45748: LD_INT 0
45750: EQUAL
45751: IFFALSE 45763
// hc_agressivity := 0 else
45753: LD_ADDR_OWVAR 35
45757: PUSH
45758: LD_INT 0
45760: ST_TO_ADDR
45761: GO 45784
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45763: LD_ADDR_OWVAR 35
45767: PUSH
45768: LD_VAR 0 1
45772: NEG
45773: PPUSH
45774: LD_VAR 0 1
45778: PPUSH
45779: CALL_OW 12
45783: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45784: LD_ADDR_OWVAR 31
45788: PUSH
45789: LD_INT 0
45791: PPUSH
45792: LD_INT 3
45794: PPUSH
45795: CALL_OW 12
45799: PUSH
45800: LD_INT 0
45802: PPUSH
45803: LD_INT 3
45805: PPUSH
45806: CALL_OW 12
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: ST_TO_ADDR
// end ;
45823: LD_VAR 0 2
45827: RET
// export function PrepareTiger ( agressivity ) ; begin
45828: LD_INT 0
45830: PPUSH
// uc_side := 0 ;
45831: LD_ADDR_OWVAR 20
45835: PUSH
45836: LD_INT 0
45838: ST_TO_ADDR
// uc_nation := 0 ;
45839: LD_ADDR_OWVAR 21
45843: PUSH
45844: LD_INT 0
45846: ST_TO_ADDR
// InitHc ;
45847: CALL_OW 19
// hc_class := class_tiger ;
45851: LD_ADDR_OWVAR 28
45855: PUSH
45856: LD_INT 14
45858: ST_TO_ADDR
// hc_gallery :=  ;
45859: LD_ADDR_OWVAR 33
45863: PUSH
45864: LD_STRING 
45866: ST_TO_ADDR
// hc_name :=  ;
45867: LD_ADDR_OWVAR 26
45871: PUSH
45872: LD_STRING 
45874: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45875: LD_ADDR_OWVAR 35
45879: PUSH
45880: LD_VAR 0 1
45884: NEG
45885: PPUSH
45886: LD_VAR 0 1
45890: PPUSH
45891: CALL_OW 12
45895: ST_TO_ADDR
// end ;
45896: LD_VAR 0 2
45900: RET
// export function PrepareEnchidna ( ) ; begin
45901: LD_INT 0
45903: PPUSH
// uc_side := 0 ;
45904: LD_ADDR_OWVAR 20
45908: PUSH
45909: LD_INT 0
45911: ST_TO_ADDR
// uc_nation := 0 ;
45912: LD_ADDR_OWVAR 21
45916: PUSH
45917: LD_INT 0
45919: ST_TO_ADDR
// InitHc ;
45920: CALL_OW 19
// hc_class := class_baggie ;
45924: LD_ADDR_OWVAR 28
45928: PUSH
45929: LD_INT 13
45931: ST_TO_ADDR
// hc_gallery :=  ;
45932: LD_ADDR_OWVAR 33
45936: PUSH
45937: LD_STRING 
45939: ST_TO_ADDR
// hc_name :=  ;
45940: LD_ADDR_OWVAR 26
45944: PUSH
45945: LD_STRING 
45947: ST_TO_ADDR
// end ;
45948: LD_VAR 0 1
45952: RET
// export function PrepareFrog ( ) ; begin
45953: LD_INT 0
45955: PPUSH
// uc_side := 0 ;
45956: LD_ADDR_OWVAR 20
45960: PUSH
45961: LD_INT 0
45963: ST_TO_ADDR
// uc_nation := 0 ;
45964: LD_ADDR_OWVAR 21
45968: PUSH
45969: LD_INT 0
45971: ST_TO_ADDR
// InitHc ;
45972: CALL_OW 19
// hc_class := class_frog ;
45976: LD_ADDR_OWVAR 28
45980: PUSH
45981: LD_INT 19
45983: ST_TO_ADDR
// hc_gallery :=  ;
45984: LD_ADDR_OWVAR 33
45988: PUSH
45989: LD_STRING 
45991: ST_TO_ADDR
// hc_name :=  ;
45992: LD_ADDR_OWVAR 26
45996: PUSH
45997: LD_STRING 
45999: ST_TO_ADDR
// end ;
46000: LD_VAR 0 1
46004: RET
// export function PrepareFish ( ) ; begin
46005: LD_INT 0
46007: PPUSH
// uc_side := 0 ;
46008: LD_ADDR_OWVAR 20
46012: PUSH
46013: LD_INT 0
46015: ST_TO_ADDR
// uc_nation := 0 ;
46016: LD_ADDR_OWVAR 21
46020: PUSH
46021: LD_INT 0
46023: ST_TO_ADDR
// InitHc ;
46024: CALL_OW 19
// hc_class := class_fish ;
46028: LD_ADDR_OWVAR 28
46032: PUSH
46033: LD_INT 20
46035: ST_TO_ADDR
// hc_gallery :=  ;
46036: LD_ADDR_OWVAR 33
46040: PUSH
46041: LD_STRING 
46043: ST_TO_ADDR
// hc_name :=  ;
46044: LD_ADDR_OWVAR 26
46048: PUSH
46049: LD_STRING 
46051: ST_TO_ADDR
// end ;
46052: LD_VAR 0 1
46056: RET
// export function PrepareBird ( ) ; begin
46057: LD_INT 0
46059: PPUSH
// uc_side := 0 ;
46060: LD_ADDR_OWVAR 20
46064: PUSH
46065: LD_INT 0
46067: ST_TO_ADDR
// uc_nation := 0 ;
46068: LD_ADDR_OWVAR 21
46072: PUSH
46073: LD_INT 0
46075: ST_TO_ADDR
// InitHc ;
46076: CALL_OW 19
// hc_class := class_phororhacos ;
46080: LD_ADDR_OWVAR 28
46084: PUSH
46085: LD_INT 18
46087: ST_TO_ADDR
// hc_gallery :=  ;
46088: LD_ADDR_OWVAR 33
46092: PUSH
46093: LD_STRING 
46095: ST_TO_ADDR
// hc_name :=  ;
46096: LD_ADDR_OWVAR 26
46100: PUSH
46101: LD_STRING 
46103: ST_TO_ADDR
// end ;
46104: LD_VAR 0 1
46108: RET
// export function PrepareHorse ( ) ; begin
46109: LD_INT 0
46111: PPUSH
// uc_side := 0 ;
46112: LD_ADDR_OWVAR 20
46116: PUSH
46117: LD_INT 0
46119: ST_TO_ADDR
// uc_nation := 0 ;
46120: LD_ADDR_OWVAR 21
46124: PUSH
46125: LD_INT 0
46127: ST_TO_ADDR
// InitHc ;
46128: CALL_OW 19
// hc_class := class_horse ;
46132: LD_ADDR_OWVAR 28
46136: PUSH
46137: LD_INT 21
46139: ST_TO_ADDR
// hc_gallery :=  ;
46140: LD_ADDR_OWVAR 33
46144: PUSH
46145: LD_STRING 
46147: ST_TO_ADDR
// hc_name :=  ;
46148: LD_ADDR_OWVAR 26
46152: PUSH
46153: LD_STRING 
46155: ST_TO_ADDR
// end ;
46156: LD_VAR 0 1
46160: RET
// export function PrepareMastodont ( ) ; begin
46161: LD_INT 0
46163: PPUSH
// uc_side := 0 ;
46164: LD_ADDR_OWVAR 20
46168: PUSH
46169: LD_INT 0
46171: ST_TO_ADDR
// uc_nation := 0 ;
46172: LD_ADDR_OWVAR 21
46176: PUSH
46177: LD_INT 0
46179: ST_TO_ADDR
// vc_chassis := class_mastodont ;
46180: LD_ADDR_OWVAR 37
46184: PUSH
46185: LD_INT 31
46187: ST_TO_ADDR
// vc_control := control_rider ;
46188: LD_ADDR_OWVAR 38
46192: PUSH
46193: LD_INT 4
46195: ST_TO_ADDR
// end ;
46196: LD_VAR 0 1
46200: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46201: LD_INT 0
46203: PPUSH
46204: PPUSH
46205: PPUSH
// uc_side = 0 ;
46206: LD_ADDR_OWVAR 20
46210: PUSH
46211: LD_INT 0
46213: ST_TO_ADDR
// uc_nation = 0 ;
46214: LD_ADDR_OWVAR 21
46218: PUSH
46219: LD_INT 0
46221: ST_TO_ADDR
// InitHc_All ( ) ;
46222: CALL_OW 584
// InitVc ;
46226: CALL_OW 20
// if mastodonts then
46230: LD_VAR 0 6
46234: IFFALSE 46301
// for i = 1 to mastodonts do
46236: LD_ADDR_VAR 0 11
46240: PUSH
46241: DOUBLE
46242: LD_INT 1
46244: DEC
46245: ST_TO_ADDR
46246: LD_VAR 0 6
46250: PUSH
46251: FOR_TO
46252: IFFALSE 46299
// begin vc_chassis := 31 ;
46254: LD_ADDR_OWVAR 37
46258: PUSH
46259: LD_INT 31
46261: ST_TO_ADDR
// vc_control := control_rider ;
46262: LD_ADDR_OWVAR 38
46266: PUSH
46267: LD_INT 4
46269: ST_TO_ADDR
// animal := CreateVehicle ;
46270: LD_ADDR_VAR 0 12
46274: PUSH
46275: CALL_OW 45
46279: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46280: LD_VAR 0 12
46284: PPUSH
46285: LD_VAR 0 8
46289: PPUSH
46290: LD_INT 0
46292: PPUSH
46293: CALL 48443 0 3
// end ;
46297: GO 46251
46299: POP
46300: POP
// if horses then
46301: LD_VAR 0 5
46305: IFFALSE 46372
// for i = 1 to horses do
46307: LD_ADDR_VAR 0 11
46311: PUSH
46312: DOUBLE
46313: LD_INT 1
46315: DEC
46316: ST_TO_ADDR
46317: LD_VAR 0 5
46321: PUSH
46322: FOR_TO
46323: IFFALSE 46370
// begin hc_class := 21 ;
46325: LD_ADDR_OWVAR 28
46329: PUSH
46330: LD_INT 21
46332: ST_TO_ADDR
// hc_gallery :=  ;
46333: LD_ADDR_OWVAR 33
46337: PUSH
46338: LD_STRING 
46340: ST_TO_ADDR
// animal := CreateHuman ;
46341: LD_ADDR_VAR 0 12
46345: PUSH
46346: CALL_OW 44
46350: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46351: LD_VAR 0 12
46355: PPUSH
46356: LD_VAR 0 8
46360: PPUSH
46361: LD_INT 0
46363: PPUSH
46364: CALL 48443 0 3
// end ;
46368: GO 46322
46370: POP
46371: POP
// if birds then
46372: LD_VAR 0 1
46376: IFFALSE 46443
// for i = 1 to birds do
46378: LD_ADDR_VAR 0 11
46382: PUSH
46383: DOUBLE
46384: LD_INT 1
46386: DEC
46387: ST_TO_ADDR
46388: LD_VAR 0 1
46392: PUSH
46393: FOR_TO
46394: IFFALSE 46441
// begin hc_class := 18 ;
46396: LD_ADDR_OWVAR 28
46400: PUSH
46401: LD_INT 18
46403: ST_TO_ADDR
// hc_gallery =  ;
46404: LD_ADDR_OWVAR 33
46408: PUSH
46409: LD_STRING 
46411: ST_TO_ADDR
// animal := CreateHuman ;
46412: LD_ADDR_VAR 0 12
46416: PUSH
46417: CALL_OW 44
46421: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46422: LD_VAR 0 12
46426: PPUSH
46427: LD_VAR 0 8
46431: PPUSH
46432: LD_INT 0
46434: PPUSH
46435: CALL 48443 0 3
// end ;
46439: GO 46393
46441: POP
46442: POP
// if tigers then
46443: LD_VAR 0 2
46447: IFFALSE 46531
// for i = 1 to tigers do
46449: LD_ADDR_VAR 0 11
46453: PUSH
46454: DOUBLE
46455: LD_INT 1
46457: DEC
46458: ST_TO_ADDR
46459: LD_VAR 0 2
46463: PUSH
46464: FOR_TO
46465: IFFALSE 46529
// begin hc_class = class_tiger ;
46467: LD_ADDR_OWVAR 28
46471: PUSH
46472: LD_INT 14
46474: ST_TO_ADDR
// hc_gallery =  ;
46475: LD_ADDR_OWVAR 33
46479: PUSH
46480: LD_STRING 
46482: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46483: LD_ADDR_OWVAR 35
46487: PUSH
46488: LD_INT 7
46490: NEG
46491: PPUSH
46492: LD_INT 7
46494: PPUSH
46495: CALL_OW 12
46499: ST_TO_ADDR
// animal := CreateHuman ;
46500: LD_ADDR_VAR 0 12
46504: PUSH
46505: CALL_OW 44
46509: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46510: LD_VAR 0 12
46514: PPUSH
46515: LD_VAR 0 8
46519: PPUSH
46520: LD_INT 0
46522: PPUSH
46523: CALL 48443 0 3
// end ;
46527: GO 46464
46529: POP
46530: POP
// if apemans then
46531: LD_VAR 0 3
46535: IFFALSE 46658
// for i = 1 to apemans do
46537: LD_ADDR_VAR 0 11
46541: PUSH
46542: DOUBLE
46543: LD_INT 1
46545: DEC
46546: ST_TO_ADDR
46547: LD_VAR 0 3
46551: PUSH
46552: FOR_TO
46553: IFFALSE 46656
// begin hc_class = class_apeman ;
46555: LD_ADDR_OWVAR 28
46559: PUSH
46560: LD_INT 12
46562: ST_TO_ADDR
// hc_gallery =  ;
46563: LD_ADDR_OWVAR 33
46567: PUSH
46568: LD_STRING 
46570: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46571: LD_ADDR_OWVAR 35
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PPUSH
46580: LD_INT 2
46582: PPUSH
46583: CALL_OW 12
46587: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46588: LD_ADDR_OWVAR 31
46592: PUSH
46593: LD_INT 1
46595: PPUSH
46596: LD_INT 3
46598: PPUSH
46599: CALL_OW 12
46603: PUSH
46604: LD_INT 1
46606: PPUSH
46607: LD_INT 3
46609: PPUSH
46610: CALL_OW 12
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: ST_TO_ADDR
// animal := CreateHuman ;
46627: LD_ADDR_VAR 0 12
46631: PUSH
46632: CALL_OW 44
46636: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46637: LD_VAR 0 12
46641: PPUSH
46642: LD_VAR 0 8
46646: PPUSH
46647: LD_INT 0
46649: PPUSH
46650: CALL 48443 0 3
// end ;
46654: GO 46552
46656: POP
46657: POP
// if enchidnas then
46658: LD_VAR 0 4
46662: IFFALSE 46729
// for i = 1 to enchidnas do
46664: LD_ADDR_VAR 0 11
46668: PUSH
46669: DOUBLE
46670: LD_INT 1
46672: DEC
46673: ST_TO_ADDR
46674: LD_VAR 0 4
46678: PUSH
46679: FOR_TO
46680: IFFALSE 46727
// begin hc_class = 13 ;
46682: LD_ADDR_OWVAR 28
46686: PUSH
46687: LD_INT 13
46689: ST_TO_ADDR
// hc_gallery =  ;
46690: LD_ADDR_OWVAR 33
46694: PUSH
46695: LD_STRING 
46697: ST_TO_ADDR
// animal := CreateHuman ;
46698: LD_ADDR_VAR 0 12
46702: PUSH
46703: CALL_OW 44
46707: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46708: LD_VAR 0 12
46712: PPUSH
46713: LD_VAR 0 8
46717: PPUSH
46718: LD_INT 0
46720: PPUSH
46721: CALL 48443 0 3
// end ;
46725: GO 46679
46727: POP
46728: POP
// if fishes then
46729: LD_VAR 0 7
46733: IFFALSE 46800
// for i = 1 to fishes do
46735: LD_ADDR_VAR 0 11
46739: PUSH
46740: DOUBLE
46741: LD_INT 1
46743: DEC
46744: ST_TO_ADDR
46745: LD_VAR 0 7
46749: PUSH
46750: FOR_TO
46751: IFFALSE 46798
// begin hc_class = 20 ;
46753: LD_ADDR_OWVAR 28
46757: PUSH
46758: LD_INT 20
46760: ST_TO_ADDR
// hc_gallery =  ;
46761: LD_ADDR_OWVAR 33
46765: PUSH
46766: LD_STRING 
46768: ST_TO_ADDR
// animal := CreateHuman ;
46769: LD_ADDR_VAR 0 12
46773: PUSH
46774: CALL_OW 44
46778: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46779: LD_VAR 0 12
46783: PPUSH
46784: LD_VAR 0 9
46788: PPUSH
46789: LD_INT 0
46791: PPUSH
46792: CALL 48443 0 3
// end ;
46796: GO 46750
46798: POP
46799: POP
// end ;
46800: LD_VAR 0 10
46804: RET
// export function WantHeal ( sci , unit ) ; begin
46805: LD_INT 0
46807: PPUSH
// if GetTaskList ( sci ) > 0 then
46808: LD_VAR 0 1
46812: PPUSH
46813: CALL_OW 437
46817: PUSH
46818: LD_INT 0
46820: GREATER
46821: IFFALSE 46893
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46823: LD_VAR 0 1
46827: PPUSH
46828: CALL_OW 437
46832: PUSH
46833: LD_INT 1
46835: ARRAY
46836: PUSH
46837: LD_INT 1
46839: ARRAY
46840: PUSH
46841: LD_STRING l
46843: EQUAL
46844: IFFALSE 46871
46846: PUSH
46847: LD_VAR 0 1
46851: PPUSH
46852: CALL_OW 437
46856: PUSH
46857: LD_INT 1
46859: ARRAY
46860: PUSH
46861: LD_INT 4
46863: ARRAY
46864: PUSH
46865: LD_VAR 0 2
46869: EQUAL
46870: AND
46871: IFFALSE 46883
// result := true else
46873: LD_ADDR_VAR 0 3
46877: PUSH
46878: LD_INT 1
46880: ST_TO_ADDR
46881: GO 46891
// result := false ;
46883: LD_ADDR_VAR 0 3
46887: PUSH
46888: LD_INT 0
46890: ST_TO_ADDR
// end else
46891: GO 46901
// result := false ;
46893: LD_ADDR_VAR 0 3
46897: PUSH
46898: LD_INT 0
46900: ST_TO_ADDR
// end ;
46901: LD_VAR 0 3
46905: RET
// export function HealTarget ( sci ) ; begin
46906: LD_INT 0
46908: PPUSH
// if not sci then
46909: LD_VAR 0 1
46913: NOT
46914: IFFALSE 46918
// exit ;
46916: GO 46983
// result := 0 ;
46918: LD_ADDR_VAR 0 2
46922: PUSH
46923: LD_INT 0
46925: ST_TO_ADDR
// if GetTaskList ( sci ) then
46926: LD_VAR 0 1
46930: PPUSH
46931: CALL_OW 437
46935: IFFALSE 46983
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46937: LD_VAR 0 1
46941: PPUSH
46942: CALL_OW 437
46946: PUSH
46947: LD_INT 1
46949: ARRAY
46950: PUSH
46951: LD_INT 1
46953: ARRAY
46954: PUSH
46955: LD_STRING l
46957: EQUAL
46958: IFFALSE 46983
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46960: LD_ADDR_VAR 0 2
46964: PUSH
46965: LD_VAR 0 1
46969: PPUSH
46970: CALL_OW 437
46974: PUSH
46975: LD_INT 1
46977: ARRAY
46978: PUSH
46979: LD_INT 4
46981: ARRAY
46982: ST_TO_ADDR
// end ;
46983: LD_VAR 0 2
46987: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46988: LD_INT 0
46990: PPUSH
46991: PPUSH
46992: PPUSH
46993: PPUSH
// if not base_units then
46994: LD_VAR 0 1
46998: NOT
46999: IFFALSE 47003
// exit ;
47001: GO 47090
// result := false ;
47003: LD_ADDR_VAR 0 2
47007: PUSH
47008: LD_INT 0
47010: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
47011: LD_ADDR_VAR 0 5
47015: PUSH
47016: LD_VAR 0 1
47020: PPUSH
47021: LD_INT 21
47023: PUSH
47024: LD_INT 3
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PPUSH
47031: CALL_OW 72
47035: ST_TO_ADDR
// if not tmp then
47036: LD_VAR 0 5
47040: NOT
47041: IFFALSE 47045
// exit ;
47043: GO 47090
// for i in tmp do
47045: LD_ADDR_VAR 0 3
47049: PUSH
47050: LD_VAR 0 5
47054: PUSH
47055: FOR_IN
47056: IFFALSE 47088
// begin result := EnemyInRange ( i , 22 ) ;
47058: LD_ADDR_VAR 0 2
47062: PUSH
47063: LD_VAR 0 3
47067: PPUSH
47068: LD_INT 22
47070: PPUSH
47071: CALL 44505 0 2
47075: ST_TO_ADDR
// if result then
47076: LD_VAR 0 2
47080: IFFALSE 47086
// exit ;
47082: POP
47083: POP
47084: GO 47090
// end ;
47086: GO 47055
47088: POP
47089: POP
// end ;
47090: LD_VAR 0 2
47094: RET
// export function FilterByTag ( units , tag ) ; begin
47095: LD_INT 0
47097: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47098: LD_ADDR_VAR 0 3
47102: PUSH
47103: LD_VAR 0 1
47107: PPUSH
47108: LD_INT 120
47110: PUSH
47111: LD_VAR 0 2
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PPUSH
47120: CALL_OW 72
47124: ST_TO_ADDR
// end ;
47125: LD_VAR 0 3
47129: RET
// export function IsDriver ( un ) ; begin
47130: LD_INT 0
47132: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47133: LD_ADDR_VAR 0 2
47137: PUSH
47138: LD_VAR 0 1
47142: PUSH
47143: LD_INT 55
47145: PUSH
47146: EMPTY
47147: LIST
47148: PPUSH
47149: CALL_OW 69
47153: IN
47154: ST_TO_ADDR
// end ;
47155: LD_VAR 0 2
47159: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47160: LD_INT 0
47162: PPUSH
47163: PPUSH
// list := [ ] ;
47164: LD_ADDR_VAR 0 5
47168: PUSH
47169: EMPTY
47170: ST_TO_ADDR
// case d of 0 :
47171: LD_VAR 0 3
47175: PUSH
47176: LD_INT 0
47178: DOUBLE
47179: EQUAL
47180: IFTRUE 47184
47182: GO 47317
47184: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47185: LD_ADDR_VAR 0 5
47189: PUSH
47190: LD_VAR 0 1
47194: PUSH
47195: LD_INT 4
47197: MINUS
47198: PUSH
47199: LD_VAR 0 2
47203: PUSH
47204: LD_INT 4
47206: MINUS
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: LIST
47215: PUSH
47216: LD_VAR 0 1
47220: PUSH
47221: LD_INT 3
47223: MINUS
47224: PUSH
47225: LD_VAR 0 2
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: LIST
47237: PUSH
47238: LD_VAR 0 1
47242: PUSH
47243: LD_INT 4
47245: PLUS
47246: PUSH
47247: LD_VAR 0 2
47251: PUSH
47252: LD_INT 4
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: LIST
47259: PUSH
47260: LD_VAR 0 1
47264: PUSH
47265: LD_INT 3
47267: PLUS
47268: PUSH
47269: LD_VAR 0 2
47273: PUSH
47274: LD_INT 3
47276: PLUS
47277: PUSH
47278: LD_INT 5
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: LIST
47285: PUSH
47286: LD_VAR 0 1
47290: PUSH
47291: LD_VAR 0 2
47295: PUSH
47296: LD_INT 4
47298: PLUS
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: LIST
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: ST_TO_ADDR
// end ; 1 :
47315: GO 48015
47317: LD_INT 1
47319: DOUBLE
47320: EQUAL
47321: IFTRUE 47325
47323: GO 47458
47325: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47326: LD_ADDR_VAR 0 5
47330: PUSH
47331: LD_VAR 0 1
47335: PUSH
47336: LD_VAR 0 2
47340: PUSH
47341: LD_INT 4
47343: MINUS
47344: PUSH
47345: LD_INT 3
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: LIST
47352: PUSH
47353: LD_VAR 0 1
47357: PUSH
47358: LD_INT 3
47360: MINUS
47361: PUSH
47362: LD_VAR 0 2
47366: PUSH
47367: LD_INT 3
47369: MINUS
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: LIST
47378: PUSH
47379: LD_VAR 0 1
47383: PUSH
47384: LD_INT 4
47386: MINUS
47387: PUSH
47388: LD_VAR 0 2
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: LIST
47400: PUSH
47401: LD_VAR 0 1
47405: PUSH
47406: LD_VAR 0 2
47410: PUSH
47411: LD_INT 3
47413: PLUS
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: LIST
47422: PUSH
47423: LD_VAR 0 1
47427: PUSH
47428: LD_INT 4
47430: PLUS
47431: PUSH
47432: LD_VAR 0 2
47436: PUSH
47437: LD_INT 4
47439: PLUS
47440: PUSH
47441: LD_INT 5
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: LIST
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: ST_TO_ADDR
// end ; 2 :
47456: GO 48015
47458: LD_INT 2
47460: DOUBLE
47461: EQUAL
47462: IFTRUE 47466
47464: GO 47595
47466: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47467: LD_ADDR_VAR 0 5
47471: PUSH
47472: LD_VAR 0 1
47476: PUSH
47477: LD_VAR 0 2
47481: PUSH
47482: LD_INT 3
47484: MINUS
47485: PUSH
47486: LD_INT 3
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: LIST
47493: PUSH
47494: LD_VAR 0 1
47498: PUSH
47499: LD_INT 4
47501: PLUS
47502: PUSH
47503: LD_VAR 0 2
47507: PUSH
47508: LD_INT 4
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: LIST
47515: PUSH
47516: LD_VAR 0 1
47520: PUSH
47521: LD_VAR 0 2
47525: PUSH
47526: LD_INT 4
47528: PLUS
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: LIST
47537: PUSH
47538: LD_VAR 0 1
47542: PUSH
47543: LD_INT 3
47545: MINUS
47546: PUSH
47547: LD_VAR 0 2
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: LIST
47559: PUSH
47560: LD_VAR 0 1
47564: PUSH
47565: LD_INT 4
47567: MINUS
47568: PUSH
47569: LD_VAR 0 2
47573: PUSH
47574: LD_INT 4
47576: MINUS
47577: PUSH
47578: LD_INT 2
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: LIST
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: ST_TO_ADDR
// end ; 3 :
47593: GO 48015
47595: LD_INT 3
47597: DOUBLE
47598: EQUAL
47599: IFTRUE 47603
47601: GO 47736
47603: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47604: LD_ADDR_VAR 0 5
47608: PUSH
47609: LD_VAR 0 1
47613: PUSH
47614: LD_INT 3
47616: PLUS
47617: PUSH
47618: LD_VAR 0 2
47622: PUSH
47623: LD_INT 4
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: LIST
47630: PUSH
47631: LD_VAR 0 1
47635: PUSH
47636: LD_INT 4
47638: PLUS
47639: PUSH
47640: LD_VAR 0 2
47644: PUSH
47645: LD_INT 4
47647: PLUS
47648: PUSH
47649: LD_INT 5
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: LIST
47656: PUSH
47657: LD_VAR 0 1
47661: PUSH
47662: LD_INT 4
47664: MINUS
47665: PUSH
47666: LD_VAR 0 2
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: PUSH
47679: LD_VAR 0 1
47683: PUSH
47684: LD_VAR 0 2
47688: PUSH
47689: LD_INT 4
47691: MINUS
47692: PUSH
47693: LD_INT 3
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: LIST
47700: PUSH
47701: LD_VAR 0 1
47705: PUSH
47706: LD_INT 3
47708: MINUS
47709: PUSH
47710: LD_VAR 0 2
47714: PUSH
47715: LD_INT 3
47717: MINUS
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: LIST
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: ST_TO_ADDR
// end ; 4 :
47734: GO 48015
47736: LD_INT 4
47738: DOUBLE
47739: EQUAL
47740: IFTRUE 47744
47742: GO 47877
47744: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47745: LD_ADDR_VAR 0 5
47749: PUSH
47750: LD_VAR 0 1
47754: PUSH
47755: LD_VAR 0 2
47759: PUSH
47760: LD_INT 4
47762: PLUS
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: LIST
47771: PUSH
47772: LD_VAR 0 1
47776: PUSH
47777: LD_INT 3
47779: PLUS
47780: PUSH
47781: LD_VAR 0 2
47785: PUSH
47786: LD_INT 3
47788: PLUS
47789: PUSH
47790: LD_INT 5
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: LIST
47797: PUSH
47798: LD_VAR 0 1
47802: PUSH
47803: LD_INT 4
47805: PLUS
47806: PUSH
47807: LD_VAR 0 2
47811: PUSH
47812: LD_INT 4
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: LIST
47819: PUSH
47820: LD_VAR 0 1
47824: PUSH
47825: LD_VAR 0 2
47829: PUSH
47830: LD_INT 3
47832: MINUS
47833: PUSH
47834: LD_INT 3
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: LIST
47841: PUSH
47842: LD_VAR 0 1
47846: PUSH
47847: LD_INT 4
47849: MINUS
47850: PUSH
47851: LD_VAR 0 2
47855: PUSH
47856: LD_INT 4
47858: MINUS
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: LIST
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: ST_TO_ADDR
// end ; 5 :
47875: GO 48015
47877: LD_INT 5
47879: DOUBLE
47880: EQUAL
47881: IFTRUE 47885
47883: GO 48014
47885: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47886: LD_ADDR_VAR 0 5
47890: PUSH
47891: LD_VAR 0 1
47895: PUSH
47896: LD_INT 4
47898: MINUS
47899: PUSH
47900: LD_VAR 0 2
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: LIST
47912: PUSH
47913: LD_VAR 0 1
47917: PUSH
47918: LD_VAR 0 2
47922: PUSH
47923: LD_INT 4
47925: MINUS
47926: PUSH
47927: LD_INT 3
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: LIST
47934: PUSH
47935: LD_VAR 0 1
47939: PUSH
47940: LD_INT 4
47942: PLUS
47943: PUSH
47944: LD_VAR 0 2
47948: PUSH
47949: LD_INT 4
47951: PLUS
47952: PUSH
47953: LD_INT 5
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: LIST
47960: PUSH
47961: LD_VAR 0 1
47965: PUSH
47966: LD_INT 3
47968: PLUS
47969: PUSH
47970: LD_VAR 0 2
47974: PUSH
47975: LD_INT 4
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: LIST
47982: PUSH
47983: LD_VAR 0 1
47987: PUSH
47988: LD_VAR 0 2
47992: PUSH
47993: LD_INT 3
47995: PLUS
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: LIST
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: ST_TO_ADDR
// end ; end ;
48012: GO 48015
48014: POP
// result := list ;
48015: LD_ADDR_VAR 0 4
48019: PUSH
48020: LD_VAR 0 5
48024: ST_TO_ADDR
// end ;
48025: LD_VAR 0 4
48029: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48030: LD_INT 0
48032: PPUSH
48033: PPUSH
48034: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48035: LD_VAR 0 1
48039: NOT
48040: IFTRUE 48068
48042: PUSH
48043: LD_VAR 0 2
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 2
48053: PUSH
48054: LD_INT 3
48056: PUSH
48057: LD_INT 4
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: IN
48066: NOT
48067: OR
48068: IFFALSE 48072
// exit ;
48070: GO 48155
// tmp := [ ] ;
48072: LD_ADDR_VAR 0 5
48076: PUSH
48077: EMPTY
48078: ST_TO_ADDR
// for i in units do
48079: LD_ADDR_VAR 0 4
48083: PUSH
48084: LD_VAR 0 1
48088: PUSH
48089: FOR_IN
48090: IFFALSE 48124
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
48092: LD_ADDR_VAR 0 5
48096: PUSH
48097: LD_VAR 0 5
48101: PPUSH
48102: LD_VAR 0 4
48106: PPUSH
48107: LD_VAR 0 2
48111: PPUSH
48112: CALL_OW 259
48116: PPUSH
48117: CALL 49550 0 2
48121: ST_TO_ADDR
48122: GO 48089
48124: POP
48125: POP
// if not tmp then
48126: LD_VAR 0 5
48130: NOT
48131: IFFALSE 48135
// exit ;
48133: GO 48155
// result := SortListByListDesc ( units , tmp ) ;
48135: LD_ADDR_VAR 0 3
48139: PUSH
48140: LD_VAR 0 1
48144: PPUSH
48145: LD_VAR 0 5
48149: PPUSH
48150: CALL_OW 77
48154: ST_TO_ADDR
// end ;
48155: LD_VAR 0 3
48159: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48160: LD_INT 0
48162: PPUSH
48163: PPUSH
48164: PPUSH
// result := false ;
48165: LD_ADDR_VAR 0 3
48169: PUSH
48170: LD_INT 0
48172: ST_TO_ADDR
// if not building then
48173: LD_VAR 0 2
48177: NOT
48178: IFFALSE 48182
// exit ;
48180: GO 48326
// x := GetX ( building ) ;
48182: LD_ADDR_VAR 0 4
48186: PUSH
48187: LD_VAR 0 2
48191: PPUSH
48192: CALL_OW 250
48196: ST_TO_ADDR
// y := GetY ( building ) ;
48197: LD_ADDR_VAR 0 5
48201: PUSH
48202: LD_VAR 0 2
48206: PPUSH
48207: CALL_OW 251
48211: ST_TO_ADDR
// if not x or not y then
48212: LD_VAR 0 4
48216: NOT
48217: IFTRUE 48226
48219: PUSH
48220: LD_VAR 0 5
48224: NOT
48225: OR
48226: IFFALSE 48230
// exit ;
48228: GO 48326
// if GetTaskList ( unit ) then
48230: LD_VAR 0 1
48234: PPUSH
48235: CALL_OW 437
48239: IFFALSE 48326
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48241: LD_STRING e
48243: PUSH
48244: LD_VAR 0 1
48248: PPUSH
48249: CALL_OW 437
48253: PUSH
48254: LD_INT 1
48256: ARRAY
48257: PUSH
48258: LD_INT 1
48260: ARRAY
48261: EQUAL
48262: IFFALSE 48289
48264: PUSH
48265: LD_VAR 0 4
48269: PUSH
48270: LD_VAR 0 1
48274: PPUSH
48275: CALL_OW 437
48279: PUSH
48280: LD_INT 1
48282: ARRAY
48283: PUSH
48284: LD_INT 2
48286: ARRAY
48287: EQUAL
48288: AND
48289: IFFALSE 48316
48291: PUSH
48292: LD_VAR 0 5
48296: PUSH
48297: LD_VAR 0 1
48301: PPUSH
48302: CALL_OW 437
48306: PUSH
48307: LD_INT 1
48309: ARRAY
48310: PUSH
48311: LD_INT 3
48313: ARRAY
48314: EQUAL
48315: AND
48316: IFFALSE 48326
// result := true end ;
48318: LD_ADDR_VAR 0 3
48322: PUSH
48323: LD_INT 1
48325: ST_TO_ADDR
// end ;
48326: LD_VAR 0 3
48330: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48331: LD_INT 0
48333: PPUSH
// result := false ;
48334: LD_ADDR_VAR 0 4
48338: PUSH
48339: LD_INT 0
48341: ST_TO_ADDR
// if GetTaskList ( unit ) then
48342: LD_VAR 0 1
48346: PPUSH
48347: CALL_OW 437
48351: IFFALSE 48438
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48353: LD_STRING M
48355: PUSH
48356: LD_VAR 0 1
48360: PPUSH
48361: CALL_OW 437
48365: PUSH
48366: LD_INT 1
48368: ARRAY
48369: PUSH
48370: LD_INT 1
48372: ARRAY
48373: EQUAL
48374: IFFALSE 48401
48376: PUSH
48377: LD_VAR 0 2
48381: PUSH
48382: LD_VAR 0 1
48386: PPUSH
48387: CALL_OW 437
48391: PUSH
48392: LD_INT 1
48394: ARRAY
48395: PUSH
48396: LD_INT 2
48398: ARRAY
48399: EQUAL
48400: AND
48401: IFFALSE 48428
48403: PUSH
48404: LD_VAR 0 3
48408: PUSH
48409: LD_VAR 0 1
48413: PPUSH
48414: CALL_OW 437
48418: PUSH
48419: LD_INT 1
48421: ARRAY
48422: PUSH
48423: LD_INT 3
48425: ARRAY
48426: EQUAL
48427: AND
48428: IFFALSE 48438
// result := true ;
48430: LD_ADDR_VAR 0 4
48434: PUSH
48435: LD_INT 1
48437: ST_TO_ADDR
// end ; end ;
48438: LD_VAR 0 4
48442: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48443: LD_INT 0
48445: PPUSH
48446: PPUSH
48447: PPUSH
48448: PPUSH
// if not unit or not area then
48449: LD_VAR 0 1
48453: NOT
48454: IFTRUE 48463
48456: PUSH
48457: LD_VAR 0 2
48461: NOT
48462: OR
48463: IFFALSE 48467
// exit ;
48465: GO 48643
// tmp := AreaToList ( area , i ) ;
48467: LD_ADDR_VAR 0 6
48471: PUSH
48472: LD_VAR 0 2
48476: PPUSH
48477: LD_VAR 0 5
48481: PPUSH
48482: CALL_OW 517
48486: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48487: LD_ADDR_VAR 0 5
48491: PUSH
48492: DOUBLE
48493: LD_INT 1
48495: DEC
48496: ST_TO_ADDR
48497: LD_VAR 0 6
48501: PUSH
48502: LD_INT 1
48504: ARRAY
48505: PUSH
48506: FOR_TO
48507: IFFALSE 48641
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48509: LD_ADDR_VAR 0 7
48513: PUSH
48514: LD_VAR 0 6
48518: PUSH
48519: LD_INT 1
48521: ARRAY
48522: PUSH
48523: LD_VAR 0 5
48527: ARRAY
48528: PUSH
48529: LD_VAR 0 6
48533: PUSH
48534: LD_INT 2
48536: ARRAY
48537: PUSH
48538: LD_VAR 0 5
48542: ARRAY
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
48548: LD_INT 92
48550: PUSH
48551: LD_VAR 0 7
48555: PUSH
48556: LD_INT 1
48558: ARRAY
48559: PUSH
48560: LD_VAR 0 7
48564: PUSH
48565: LD_INT 2
48567: ARRAY
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: PPUSH
48578: CALL_OW 69
48582: PUSH
48583: LD_INT 0
48585: EQUAL
48586: IFFALSE 48639
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48588: LD_VAR 0 1
48592: PPUSH
48593: LD_VAR 0 7
48597: PUSH
48598: LD_INT 1
48600: ARRAY
48601: PPUSH
48602: LD_VAR 0 7
48606: PUSH
48607: LD_INT 2
48609: ARRAY
48610: PPUSH
48611: LD_VAR 0 3
48615: PPUSH
48616: CALL_OW 48
// result := IsPlaced ( unit ) ;
48620: LD_ADDR_VAR 0 4
48624: PUSH
48625: LD_VAR 0 1
48629: PPUSH
48630: CALL_OW 305
48634: ST_TO_ADDR
// exit ;
48635: POP
48636: POP
48637: GO 48643
// end ; end ;
48639: GO 48506
48641: POP
48642: POP
// end ;
48643: LD_VAR 0 4
48647: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48648: LD_INT 0
48650: PPUSH
48651: PPUSH
48652: PPUSH
// if not side or side > 8 then
48653: LD_VAR 0 1
48657: NOT
48658: IFTRUE 48670
48660: PUSH
48661: LD_VAR 0 1
48665: PUSH
48666: LD_INT 8
48668: GREATER
48669: OR
48670: IFFALSE 48674
// exit ;
48672: GO 48861
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48674: LD_ADDR_VAR 0 4
48678: PUSH
48679: LD_INT 22
48681: PUSH
48682: LD_VAR 0 1
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 21
48693: PUSH
48694: LD_INT 3
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PPUSH
48705: CALL_OW 69
48709: ST_TO_ADDR
// if not tmp then
48710: LD_VAR 0 4
48714: NOT
48715: IFFALSE 48719
// exit ;
48717: GO 48861
// enable_addtolog := true ;
48719: LD_ADDR_OWVAR 81
48723: PUSH
48724: LD_INT 1
48726: ST_TO_ADDR
// AddToLog ( [ ) ;
48727: LD_STRING [
48729: PPUSH
48730: CALL_OW 561
// for i in tmp do
48734: LD_ADDR_VAR 0 3
48738: PUSH
48739: LD_VAR 0 4
48743: PUSH
48744: FOR_IN
48745: IFFALSE 48852
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48747: LD_STRING [
48749: PUSH
48750: LD_VAR 0 3
48754: PPUSH
48755: CALL_OW 266
48759: STR
48760: PUSH
48761: LD_STRING , 
48763: STR
48764: PUSH
48765: LD_VAR 0 3
48769: PPUSH
48770: CALL_OW 250
48774: STR
48775: PUSH
48776: LD_STRING , 
48778: STR
48779: PUSH
48780: LD_VAR 0 3
48784: PPUSH
48785: CALL_OW 251
48789: STR
48790: PUSH
48791: LD_STRING , 
48793: STR
48794: PUSH
48795: LD_VAR 0 3
48799: PPUSH
48800: CALL_OW 254
48804: STR
48805: PUSH
48806: LD_STRING , 
48808: STR
48809: PUSH
48810: LD_VAR 0 3
48814: PPUSH
48815: LD_INT 1
48817: PPUSH
48818: CALL_OW 268
48822: STR
48823: PUSH
48824: LD_STRING , 
48826: STR
48827: PUSH
48828: LD_VAR 0 3
48832: PPUSH
48833: LD_INT 2
48835: PPUSH
48836: CALL_OW 268
48840: STR
48841: PUSH
48842: LD_STRING ],
48844: STR
48845: PPUSH
48846: CALL_OW 561
// end ;
48850: GO 48744
48852: POP
48853: POP
// AddToLog ( ]; ) ;
48854: LD_STRING ];
48856: PPUSH
48857: CALL_OW 561
// end ;
48861: LD_VAR 0 2
48865: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48866: LD_INT 0
48868: PPUSH
48869: PPUSH
48870: PPUSH
48871: PPUSH
48872: PPUSH
// if not area or not rate or not max then
48873: LD_VAR 0 1
48877: NOT
48878: IFTRUE 48887
48880: PUSH
48881: LD_VAR 0 2
48885: NOT
48886: OR
48887: IFTRUE 48896
48889: PUSH
48890: LD_VAR 0 4
48894: NOT
48895: OR
48896: IFFALSE 48900
// exit ;
48898: GO 49089
// while 1 do
48900: LD_INT 1
48902: IFFALSE 49089
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48904: LD_ADDR_VAR 0 9
48908: PUSH
48909: LD_VAR 0 1
48913: PPUSH
48914: LD_INT 1
48916: PPUSH
48917: CALL_OW 287
48921: PUSH
48922: LD_INT 10
48924: MUL
48925: ST_TO_ADDR
// r := rate / 10 ;
48926: LD_ADDR_VAR 0 7
48930: PUSH
48931: LD_VAR 0 2
48935: PUSH
48936: LD_INT 10
48938: DIVREAL
48939: ST_TO_ADDR
// time := 1 1$00 ;
48940: LD_ADDR_VAR 0 8
48944: PUSH
48945: LD_INT 2100
48947: ST_TO_ADDR
// if amount < min then
48948: LD_VAR 0 9
48952: PUSH
48953: LD_VAR 0 3
48957: LESS
48958: IFFALSE 48976
// r := r * 2 else
48960: LD_ADDR_VAR 0 7
48964: PUSH
48965: LD_VAR 0 7
48969: PUSH
48970: LD_INT 2
48972: MUL
48973: ST_TO_ADDR
48974: GO 49002
// if amount > max then
48976: LD_VAR 0 9
48980: PUSH
48981: LD_VAR 0 4
48985: GREATER
48986: IFFALSE 49002
// r := r / 2 ;
48988: LD_ADDR_VAR 0 7
48992: PUSH
48993: LD_VAR 0 7
48997: PUSH
48998: LD_INT 2
49000: DIVREAL
49001: ST_TO_ADDR
// time := time / r ;
49002: LD_ADDR_VAR 0 8
49006: PUSH
49007: LD_VAR 0 8
49011: PUSH
49012: LD_VAR 0 7
49016: DIVREAL
49017: ST_TO_ADDR
// if time < 0 then
49018: LD_VAR 0 8
49022: PUSH
49023: LD_INT 0
49025: LESS
49026: IFFALSE 49043
// time := time * - 1 ;
49028: LD_ADDR_VAR 0 8
49032: PUSH
49033: LD_VAR 0 8
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: MUL
49042: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
49043: LD_VAR 0 8
49047: PUSH
49048: LD_INT 35
49050: PPUSH
49051: LD_INT 875
49053: PPUSH
49054: CALL_OW 12
49058: PLUS
49059: PPUSH
49060: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49064: LD_INT 1
49066: PPUSH
49067: LD_INT 5
49069: PPUSH
49070: CALL_OW 12
49074: PPUSH
49075: LD_VAR 0 1
49079: PPUSH
49080: LD_INT 1
49082: PPUSH
49083: CALL_OW 55
// end ;
49087: GO 48900
// end ;
49089: LD_VAR 0 5
49093: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49094: LD_INT 0
49096: PPUSH
49097: PPUSH
49098: PPUSH
49099: PPUSH
49100: PPUSH
49101: PPUSH
49102: PPUSH
49103: PPUSH
// if not turrets or not factories then
49104: LD_VAR 0 1
49108: NOT
49109: IFTRUE 49118
49111: PUSH
49112: LD_VAR 0 2
49116: NOT
49117: OR
49118: IFFALSE 49122
// exit ;
49120: GO 49429
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49122: LD_ADDR_VAR 0 10
49126: PUSH
49127: LD_INT 5
49129: PUSH
49130: LD_INT 6
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 2
49139: PUSH
49140: LD_INT 4
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 3
49149: PUSH
49150: LD_INT 5
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 24
49164: PUSH
49165: LD_INT 25
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 23
49174: PUSH
49175: LD_INT 27
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 42
49188: PUSH
49189: LD_INT 43
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 44
49198: PUSH
49199: LD_INT 46
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 45
49208: PUSH
49209: LD_INT 47
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: LIST
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: LIST
49225: ST_TO_ADDR
// result := [ ] ;
49226: LD_ADDR_VAR 0 3
49230: PUSH
49231: EMPTY
49232: ST_TO_ADDR
// for i in turrets do
49233: LD_ADDR_VAR 0 4
49237: PUSH
49238: LD_VAR 0 1
49242: PUSH
49243: FOR_IN
49244: IFFALSE 49427
// begin nat := GetNation ( i ) ;
49246: LD_ADDR_VAR 0 7
49250: PUSH
49251: LD_VAR 0 4
49255: PPUSH
49256: CALL_OW 248
49260: ST_TO_ADDR
// weapon := 0 ;
49261: LD_ADDR_VAR 0 8
49265: PUSH
49266: LD_INT 0
49268: ST_TO_ADDR
// if not nat then
49269: LD_VAR 0 7
49273: NOT
49274: IFFALSE 49278
// continue ;
49276: GO 49243
// for j in list [ nat ] do
49278: LD_ADDR_VAR 0 5
49282: PUSH
49283: LD_VAR 0 10
49287: PUSH
49288: LD_VAR 0 7
49292: ARRAY
49293: PUSH
49294: FOR_IN
49295: IFFALSE 49336
// if GetBWeapon ( i ) = j [ 1 ] then
49297: LD_VAR 0 4
49301: PPUSH
49302: CALL_OW 269
49306: PUSH
49307: LD_VAR 0 5
49311: PUSH
49312: LD_INT 1
49314: ARRAY
49315: EQUAL
49316: IFFALSE 49334
// begin weapon := j [ 2 ] ;
49318: LD_ADDR_VAR 0 8
49322: PUSH
49323: LD_VAR 0 5
49327: PUSH
49328: LD_INT 2
49330: ARRAY
49331: ST_TO_ADDR
// break ;
49332: GO 49336
// end ;
49334: GO 49294
49336: POP
49337: POP
// if not weapon then
49338: LD_VAR 0 8
49342: NOT
49343: IFFALSE 49347
// continue ;
49345: GO 49243
// for k in factories do
49347: LD_ADDR_VAR 0 6
49351: PUSH
49352: LD_VAR 0 2
49356: PUSH
49357: FOR_IN
49358: IFFALSE 49423
// begin weapons := AvailableWeaponList ( k ) ;
49360: LD_ADDR_VAR 0 9
49364: PUSH
49365: LD_VAR 0 6
49369: PPUSH
49370: CALL_OW 478
49374: ST_TO_ADDR
// if not weapons then
49375: LD_VAR 0 9
49379: NOT
49380: IFFALSE 49384
// continue ;
49382: GO 49357
// if weapon in weapons then
49384: LD_VAR 0 8
49388: PUSH
49389: LD_VAR 0 9
49393: IN
49394: IFFALSE 49421
// begin result := [ i , weapon ] ;
49396: LD_ADDR_VAR 0 3
49400: PUSH
49401: LD_VAR 0 4
49405: PUSH
49406: LD_VAR 0 8
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: ST_TO_ADDR
// exit ;
49415: POP
49416: POP
49417: POP
49418: POP
49419: GO 49429
// end ; end ;
49421: GO 49357
49423: POP
49424: POP
// end ;
49425: GO 49243
49427: POP
49428: POP
// end ;
49429: LD_VAR 0 3
49433: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49434: LD_INT 0
49436: PPUSH
// if not side or side > 8 then
49437: LD_VAR 0 3
49441: NOT
49442: IFTRUE 49454
49444: PUSH
49445: LD_VAR 0 3
49449: PUSH
49450: LD_INT 8
49452: GREATER
49453: OR
49454: IFFALSE 49458
// exit ;
49456: GO 49517
// if not range then
49458: LD_VAR 0 4
49462: NOT
49463: IFFALSE 49474
// range := - 12 ;
49465: LD_ADDR_VAR 0 4
49469: PUSH
49470: LD_INT 12
49472: NEG
49473: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49474: LD_VAR 0 1
49478: PPUSH
49479: LD_VAR 0 2
49483: PPUSH
49484: LD_VAR 0 3
49488: PPUSH
49489: LD_VAR 0 4
49493: PPUSH
49494: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49498: LD_VAR 0 1
49502: PPUSH
49503: LD_VAR 0 2
49507: PPUSH
49508: LD_VAR 0 3
49512: PPUSH
49513: CALL_OW 331
// end ;
49517: LD_VAR 0 5
49521: RET
// export function Video ( mode ) ; begin
49522: LD_INT 0
49524: PPUSH
// ingame_video = mode ;
49525: LD_ADDR_OWVAR 52
49529: PUSH
49530: LD_VAR 0 1
49534: ST_TO_ADDR
// interface_hidden = mode ;
49535: LD_ADDR_OWVAR 54
49539: PUSH
49540: LD_VAR 0 1
49544: ST_TO_ADDR
// end ;
49545: LD_VAR 0 2
49549: RET
// export function Join ( array , element ) ; begin
49550: LD_INT 0
49552: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49553: LD_ADDR_VAR 0 3
49557: PUSH
49558: LD_VAR 0 1
49562: PPUSH
49563: LD_VAR 0 1
49567: PUSH
49568: LD_INT 1
49570: PLUS
49571: PPUSH
49572: LD_VAR 0 2
49576: PPUSH
49577: CALL_OW 1
49581: ST_TO_ADDR
// end ;
49582: LD_VAR 0 3
49586: RET
// export function JoinUnion ( array , element ) ; begin
49587: LD_INT 0
49589: PPUSH
// result := array union element ;
49590: LD_ADDR_VAR 0 3
49594: PUSH
49595: LD_VAR 0 1
49599: PUSH
49600: LD_VAR 0 2
49604: UNION
49605: ST_TO_ADDR
// end ;
49606: LD_VAR 0 3
49610: RET
// export function GetBehemoths ( side ) ; begin
49611: LD_INT 0
49613: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
49614: LD_ADDR_VAR 0 2
49618: PUSH
49619: LD_INT 22
49621: PUSH
49622: LD_VAR 0 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 31
49633: PUSH
49634: LD_INT 25
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PPUSH
49645: CALL_OW 69
49649: ST_TO_ADDR
// end ;
49650: LD_VAR 0 2
49654: RET
// export function Shuffle ( array ) ; var i , index ; begin
49655: LD_INT 0
49657: PPUSH
49658: PPUSH
49659: PPUSH
// result := [ ] ;
49660: LD_ADDR_VAR 0 2
49664: PUSH
49665: EMPTY
49666: ST_TO_ADDR
// if not array then
49667: LD_VAR 0 1
49671: NOT
49672: IFFALSE 49676
// exit ;
49674: GO 49775
// Randomize ;
49676: CALL_OW 10
// for i = array downto 1 do
49680: LD_ADDR_VAR 0 3
49684: PUSH
49685: DOUBLE
49686: LD_VAR 0 1
49690: INC
49691: ST_TO_ADDR
49692: LD_INT 1
49694: PUSH
49695: FOR_DOWNTO
49696: IFFALSE 49773
// begin index := rand ( 1 , array ) ;
49698: LD_ADDR_VAR 0 4
49702: PUSH
49703: LD_INT 1
49705: PPUSH
49706: LD_VAR 0 1
49710: PPUSH
49711: CALL_OW 12
49715: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49716: LD_ADDR_VAR 0 2
49720: PUSH
49721: LD_VAR 0 2
49725: PPUSH
49726: LD_VAR 0 2
49730: PUSH
49731: LD_INT 1
49733: PLUS
49734: PPUSH
49735: LD_VAR 0 1
49739: PUSH
49740: LD_VAR 0 4
49744: ARRAY
49745: PPUSH
49746: CALL_OW 2
49750: ST_TO_ADDR
// array := Delete ( array , index ) ;
49751: LD_ADDR_VAR 0 1
49755: PUSH
49756: LD_VAR 0 1
49760: PPUSH
49761: LD_VAR 0 4
49765: PPUSH
49766: CALL_OW 3
49770: ST_TO_ADDR
// end ;
49771: GO 49695
49773: POP
49774: POP
// end ;
49775: LD_VAR 0 2
49779: RET
// export function GetBaseMaterials ( base ) ; begin
49780: LD_INT 0
49782: PPUSH
// result := [ 0 , 0 , 0 ] ;
49783: LD_ADDR_VAR 0 2
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: LIST
49801: ST_TO_ADDR
// if not base then
49802: LD_VAR 0 1
49806: NOT
49807: IFFALSE 49811
// exit ;
49809: GO 49860
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49811: LD_ADDR_VAR 0 2
49815: PUSH
49816: LD_VAR 0 1
49820: PPUSH
49821: LD_INT 1
49823: PPUSH
49824: CALL_OW 275
49828: PUSH
49829: LD_VAR 0 1
49833: PPUSH
49834: LD_INT 2
49836: PPUSH
49837: CALL_OW 275
49841: PUSH
49842: LD_VAR 0 1
49846: PPUSH
49847: LD_INT 3
49849: PPUSH
49850: CALL_OW 275
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: LIST
49859: ST_TO_ADDR
// end ;
49860: LD_VAR 0 2
49864: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49865: LD_INT 0
49867: PPUSH
49868: PPUSH
// result := array ;
49869: LD_ADDR_VAR 0 3
49873: PUSH
49874: LD_VAR 0 1
49878: ST_TO_ADDR
// if size >= result then
49879: LD_VAR 0 2
49883: PUSH
49884: LD_VAR 0 3
49888: GREATEREQUAL
49889: IFFALSE 49893
// exit ;
49891: GO 49943
// if size then
49893: LD_VAR 0 2
49897: IFFALSE 49943
// for i := array downto size do
49899: LD_ADDR_VAR 0 4
49903: PUSH
49904: DOUBLE
49905: LD_VAR 0 1
49909: INC
49910: ST_TO_ADDR
49911: LD_VAR 0 2
49915: PUSH
49916: FOR_DOWNTO
49917: IFFALSE 49941
// result := Delete ( result , result ) ;
49919: LD_ADDR_VAR 0 3
49923: PUSH
49924: LD_VAR 0 3
49928: PPUSH
49929: LD_VAR 0 3
49933: PPUSH
49934: CALL_OW 3
49938: ST_TO_ADDR
49939: GO 49916
49941: POP
49942: POP
// end ;
49943: LD_VAR 0 3
49947: RET
// export function ComExit ( unit ) ; var tmp ; begin
49948: LD_INT 0
49950: PPUSH
49951: PPUSH
// if not IsInUnit ( unit ) then
49952: LD_VAR 0 1
49956: PPUSH
49957: CALL_OW 310
49961: NOT
49962: IFFALSE 49966
// exit ;
49964: GO 50026
// tmp := IsInUnit ( unit ) ;
49966: LD_ADDR_VAR 0 3
49970: PUSH
49971: LD_VAR 0 1
49975: PPUSH
49976: CALL_OW 310
49980: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49981: LD_VAR 0 3
49985: PPUSH
49986: CALL_OW 247
49990: PUSH
49991: LD_INT 2
49993: EQUAL
49994: IFFALSE 50007
// ComExitVehicle ( unit ) else
49996: LD_VAR 0 1
50000: PPUSH
50001: CALL_OW 121
50005: GO 50016
// ComExitBuilding ( unit ) ;
50007: LD_VAR 0 1
50011: PPUSH
50012: CALL_OW 122
// result := tmp ;
50016: LD_ADDR_VAR 0 2
50020: PUSH
50021: LD_VAR 0 3
50025: ST_TO_ADDR
// end ;
50026: LD_VAR 0 2
50030: RET
// export function ComExitAll ( units ) ; var i ; begin
50031: LD_INT 0
50033: PPUSH
50034: PPUSH
// if not units then
50035: LD_VAR 0 1
50039: NOT
50040: IFFALSE 50044
// exit ;
50042: GO 50070
// for i in units do
50044: LD_ADDR_VAR 0 3
50048: PUSH
50049: LD_VAR 0 1
50053: PUSH
50054: FOR_IN
50055: IFFALSE 50068
// ComExit ( i ) ;
50057: LD_VAR 0 3
50061: PPUSH
50062: CALL 49948 0 1
50066: GO 50054
50068: POP
50069: POP
// end ;
50070: LD_VAR 0 2
50074: RET
// export function ResetHc ; begin
50075: LD_INT 0
50077: PPUSH
// InitHc ;
50078: CALL_OW 19
// hc_importance := 0 ;
50082: LD_ADDR_OWVAR 32
50086: PUSH
50087: LD_INT 0
50089: ST_TO_ADDR
// end ;
50090: LD_VAR 0 1
50094: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50095: LD_INT 0
50097: PPUSH
50098: PPUSH
50099: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50100: LD_ADDR_VAR 0 6
50104: PUSH
50105: LD_VAR 0 1
50109: PUSH
50110: LD_VAR 0 3
50114: PLUS
50115: PUSH
50116: LD_INT 2
50118: DIV
50119: ST_TO_ADDR
// if _x < 0 then
50120: LD_VAR 0 6
50124: PUSH
50125: LD_INT 0
50127: LESS
50128: IFFALSE 50145
// _x := _x * - 1 ;
50130: LD_ADDR_VAR 0 6
50134: PUSH
50135: LD_VAR 0 6
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: MUL
50144: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50145: LD_ADDR_VAR 0 7
50149: PUSH
50150: LD_VAR 0 2
50154: PUSH
50155: LD_VAR 0 4
50159: PLUS
50160: PUSH
50161: LD_INT 2
50163: DIV
50164: ST_TO_ADDR
// if _y < 0 then
50165: LD_VAR 0 7
50169: PUSH
50170: LD_INT 0
50172: LESS
50173: IFFALSE 50190
// _y := _y * - 1 ;
50175: LD_ADDR_VAR 0 7
50179: PUSH
50180: LD_VAR 0 7
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: MUL
50189: ST_TO_ADDR
// result := [ _x , _y ] ;
50190: LD_ADDR_VAR 0 5
50194: PUSH
50195: LD_VAR 0 6
50199: PUSH
50200: LD_VAR 0 7
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: ST_TO_ADDR
// end ;
50209: LD_VAR 0 5
50213: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50214: LD_INT 0
50216: PPUSH
50217: PPUSH
50218: PPUSH
50219: PPUSH
// task := GetTaskList ( unit ) ;
50220: LD_ADDR_VAR 0 7
50224: PUSH
50225: LD_VAR 0 1
50229: PPUSH
50230: CALL_OW 437
50234: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50235: LD_VAR 0 7
50239: NOT
50240: IFFALSE 50259
50242: PUSH
50243: LD_VAR 0 1
50247: PPUSH
50248: LD_VAR 0 2
50252: PPUSH
50253: CALL_OW 308
50257: NOT
50258: AND
50259: IFFALSE 50263
// exit ;
50261: GO 50381
// if IsInArea ( unit , area ) then
50263: LD_VAR 0 1
50267: PPUSH
50268: LD_VAR 0 2
50272: PPUSH
50273: CALL_OW 308
50277: IFFALSE 50295
// begin ComMoveToArea ( unit , goAway ) ;
50279: LD_VAR 0 1
50283: PPUSH
50284: LD_VAR 0 3
50288: PPUSH
50289: CALL_OW 113
// exit ;
50293: GO 50381
// end ; if task [ 1 ] [ 1 ] <> M then
50295: LD_VAR 0 7
50299: PUSH
50300: LD_INT 1
50302: ARRAY
50303: PUSH
50304: LD_INT 1
50306: ARRAY
50307: PUSH
50308: LD_STRING M
50310: NONEQUAL
50311: IFFALSE 50315
// exit ;
50313: GO 50381
// x := task [ 1 ] [ 2 ] ;
50315: LD_ADDR_VAR 0 5
50319: PUSH
50320: LD_VAR 0 7
50324: PUSH
50325: LD_INT 1
50327: ARRAY
50328: PUSH
50329: LD_INT 2
50331: ARRAY
50332: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50333: LD_ADDR_VAR 0 6
50337: PUSH
50338: LD_VAR 0 7
50342: PUSH
50343: LD_INT 1
50345: ARRAY
50346: PUSH
50347: LD_INT 3
50349: ARRAY
50350: ST_TO_ADDR
// if InArea ( x , y , area ) then
50351: LD_VAR 0 5
50355: PPUSH
50356: LD_VAR 0 6
50360: PPUSH
50361: LD_VAR 0 2
50365: PPUSH
50366: CALL_OW 309
50370: IFFALSE 50381
// ComStop ( unit ) ;
50372: LD_VAR 0 1
50376: PPUSH
50377: CALL_OW 141
// end ;
50381: LD_VAR 0 4
50385: RET
// export function Abs ( value ) ; begin
50386: LD_INT 0
50388: PPUSH
// result := value ;
50389: LD_ADDR_VAR 0 2
50393: PUSH
50394: LD_VAR 0 1
50398: ST_TO_ADDR
// if value < 0 then
50399: LD_VAR 0 1
50403: PUSH
50404: LD_INT 0
50406: LESS
50407: IFFALSE 50424
// result := value * - 1 ;
50409: LD_ADDR_VAR 0 2
50413: PUSH
50414: LD_VAR 0 1
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: MUL
50423: ST_TO_ADDR
// end ;
50424: LD_VAR 0 2
50428: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50429: LD_INT 0
50431: PPUSH
50432: PPUSH
50433: PPUSH
50434: PPUSH
50435: PPUSH
50436: PPUSH
50437: PPUSH
50438: PPUSH
// if not unit or not building then
50439: LD_VAR 0 1
50443: NOT
50444: IFTRUE 50453
50446: PUSH
50447: LD_VAR 0 2
50451: NOT
50452: OR
50453: IFFALSE 50457
// exit ;
50455: GO 50685
// x := GetX ( building ) ;
50457: LD_ADDR_VAR 0 4
50461: PUSH
50462: LD_VAR 0 2
50466: PPUSH
50467: CALL_OW 250
50471: ST_TO_ADDR
// y := GetY ( building ) ;
50472: LD_ADDR_VAR 0 6
50476: PUSH
50477: LD_VAR 0 2
50481: PPUSH
50482: CALL_OW 251
50486: ST_TO_ADDR
// d := GetDir ( building ) ;
50487: LD_ADDR_VAR 0 8
50491: PUSH
50492: LD_VAR 0 2
50496: PPUSH
50497: CALL_OW 254
50501: ST_TO_ADDR
// r := 4 ;
50502: LD_ADDR_VAR 0 9
50506: PUSH
50507: LD_INT 4
50509: ST_TO_ADDR
// for i := 1 to 5 do
50510: LD_ADDR_VAR 0 10
50514: PUSH
50515: DOUBLE
50516: LD_INT 1
50518: DEC
50519: ST_TO_ADDR
50520: LD_INT 5
50522: PUSH
50523: FOR_TO
50524: IFFALSE 50683
// begin _x := ShiftX ( x , d , r + i ) ;
50526: LD_ADDR_VAR 0 5
50530: PUSH
50531: LD_VAR 0 4
50535: PPUSH
50536: LD_VAR 0 8
50540: PPUSH
50541: LD_VAR 0 9
50545: PUSH
50546: LD_VAR 0 10
50550: PLUS
50551: PPUSH
50552: CALL_OW 272
50556: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50557: LD_ADDR_VAR 0 7
50561: PUSH
50562: LD_VAR 0 6
50566: PPUSH
50567: LD_VAR 0 8
50571: PPUSH
50572: LD_VAR 0 9
50576: PUSH
50577: LD_VAR 0 10
50581: PLUS
50582: PPUSH
50583: CALL_OW 273
50587: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50588: LD_VAR 0 5
50592: PPUSH
50593: LD_VAR 0 7
50597: PPUSH
50598: CALL_OW 488
50602: IFFALSE 50637
50604: PUSH
50605: LD_VAR 0 5
50609: PPUSH
50610: LD_VAR 0 7
50614: PPUSH
50615: CALL_OW 428
50619: PPUSH
50620: CALL_OW 247
50624: PUSH
50625: LD_INT 3
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: IN
50635: NOT
50636: AND
50637: IFFALSE 50681
// begin ComMoveXY ( unit , _x , _y ) ;
50639: LD_VAR 0 1
50643: PPUSH
50644: LD_VAR 0 5
50648: PPUSH
50649: LD_VAR 0 7
50653: PPUSH
50654: CALL_OW 111
// result := [ _x , _y ] ;
50658: LD_ADDR_VAR 0 3
50662: PUSH
50663: LD_VAR 0 5
50667: PUSH
50668: LD_VAR 0 7
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: ST_TO_ADDR
// exit ;
50677: POP
50678: POP
50679: GO 50685
// end ; end ;
50681: GO 50523
50683: POP
50684: POP
// end ;
50685: LD_VAR 0 3
50689: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50690: LD_INT 0
50692: PPUSH
50693: PPUSH
50694: PPUSH
// result := 0 ;
50695: LD_ADDR_VAR 0 3
50699: PUSH
50700: LD_INT 0
50702: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50703: LD_VAR 0 1
50707: PUSH
50708: LD_INT 0
50710: LESS
50711: IFTRUE 50723
50713: PUSH
50714: LD_VAR 0 1
50718: PUSH
50719: LD_INT 8
50721: GREATER
50722: OR
50723: IFTRUE 50735
50725: PUSH
50726: LD_VAR 0 2
50730: PUSH
50731: LD_INT 0
50733: LESS
50734: OR
50735: IFTRUE 50747
50737: PUSH
50738: LD_VAR 0 2
50742: PUSH
50743: LD_INT 8
50745: GREATER
50746: OR
50747: IFFALSE 50751
// exit ;
50749: GO 50826
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50751: LD_ADDR_VAR 0 4
50755: PUSH
50756: LD_INT 22
50758: PUSH
50759: LD_VAR 0 2
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PPUSH
50768: CALL_OW 69
50772: PUSH
50773: FOR_IN
50774: IFFALSE 50824
// begin un := UnitShoot ( i ) ;
50776: LD_ADDR_VAR 0 5
50780: PUSH
50781: LD_VAR 0 4
50785: PPUSH
50786: CALL_OW 504
50790: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50791: LD_VAR 0 5
50795: PPUSH
50796: CALL_OW 255
50800: PUSH
50801: LD_VAR 0 1
50805: EQUAL
50806: IFFALSE 50822
// begin result := un ;
50808: LD_ADDR_VAR 0 3
50812: PUSH
50813: LD_VAR 0 5
50817: ST_TO_ADDR
// exit ;
50818: POP
50819: POP
50820: GO 50826
// end ; end ;
50822: GO 50773
50824: POP
50825: POP
// end ;
50826: LD_VAR 0 3
50830: RET
// export function GetCargoBay ( units ) ; begin
50831: LD_INT 0
50833: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50834: LD_ADDR_VAR 0 2
50838: PUSH
50839: LD_VAR 0 1
50843: PPUSH
50844: LD_INT 2
50846: PUSH
50847: LD_INT 34
50849: PUSH
50850: LD_INT 12
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 34
50859: PUSH
50860: LD_INT 51
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 34
50869: PUSH
50870: LD_INT 32
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 34
50879: PUSH
50880: LD_INT 89
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: PPUSH
50894: CALL_OW 72
50898: ST_TO_ADDR
// end ;
50899: LD_VAR 0 2
50903: RET
// export function Negate ( value ) ; begin
50904: LD_INT 0
50906: PPUSH
// result := not value ;
50907: LD_ADDR_VAR 0 2
50911: PUSH
50912: LD_VAR 0 1
50916: NOT
50917: ST_TO_ADDR
// end ;
50918: LD_VAR 0 2
50922: RET
// export function Inc ( value ) ; begin
50923: LD_INT 0
50925: PPUSH
// result := value + 1 ;
50926: LD_ADDR_VAR 0 2
50930: PUSH
50931: LD_VAR 0 1
50935: PUSH
50936: LD_INT 1
50938: PLUS
50939: ST_TO_ADDR
// end ;
50940: LD_VAR 0 2
50944: RET
// export function Dec ( value ) ; begin
50945: LD_INT 0
50947: PPUSH
// result := value - 1 ;
50948: LD_ADDR_VAR 0 2
50952: PUSH
50953: LD_VAR 0 1
50957: PUSH
50958: LD_INT 1
50960: MINUS
50961: ST_TO_ADDR
// end ;
50962: LD_VAR 0 2
50966: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50967: LD_INT 0
50969: PPUSH
50970: PPUSH
50971: PPUSH
50972: PPUSH
50973: PPUSH
50974: PPUSH
50975: PPUSH
50976: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50977: LD_VAR 0 1
50981: PPUSH
50982: LD_VAR 0 2
50986: PPUSH
50987: CALL_OW 488
50991: NOT
50992: IFTRUE 51011
50994: PUSH
50995: LD_VAR 0 3
50999: PPUSH
51000: LD_VAR 0 4
51004: PPUSH
51005: CALL_OW 488
51009: NOT
51010: OR
51011: IFFALSE 51024
// begin result := - 1 ;
51013: LD_ADDR_VAR 0 5
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: ST_TO_ADDR
// exit ;
51022: GO 51259
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
51024: LD_ADDR_VAR 0 12
51028: PUSH
51029: LD_VAR 0 1
51033: PPUSH
51034: LD_VAR 0 2
51038: PPUSH
51039: LD_VAR 0 3
51043: PPUSH
51044: LD_VAR 0 4
51048: PPUSH
51049: CALL 50095 0 4
51053: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
51054: LD_ADDR_VAR 0 11
51058: PUSH
51059: LD_VAR 0 1
51063: PPUSH
51064: LD_VAR 0 2
51068: PPUSH
51069: LD_VAR 0 12
51073: PUSH
51074: LD_INT 1
51076: ARRAY
51077: PPUSH
51078: LD_VAR 0 12
51082: PUSH
51083: LD_INT 2
51085: ARRAY
51086: PPUSH
51087: CALL_OW 298
51091: ST_TO_ADDR
// distance := 9999 ;
51092: LD_ADDR_VAR 0 10
51096: PUSH
51097: LD_INT 9999
51099: ST_TO_ADDR
// for i := 0 to 5 do
51100: LD_ADDR_VAR 0 6
51104: PUSH
51105: DOUBLE
51106: LD_INT 0
51108: DEC
51109: ST_TO_ADDR
51110: LD_INT 5
51112: PUSH
51113: FOR_TO
51114: IFFALSE 51257
// begin _x := ShiftX ( x1 , i , centerDist ) ;
51116: LD_ADDR_VAR 0 7
51120: PUSH
51121: LD_VAR 0 1
51125: PPUSH
51126: LD_VAR 0 6
51130: PPUSH
51131: LD_VAR 0 11
51135: PPUSH
51136: CALL_OW 272
51140: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51141: LD_ADDR_VAR 0 8
51145: PUSH
51146: LD_VAR 0 2
51150: PPUSH
51151: LD_VAR 0 6
51155: PPUSH
51156: LD_VAR 0 11
51160: PPUSH
51161: CALL_OW 273
51165: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51166: LD_VAR 0 7
51170: PPUSH
51171: LD_VAR 0 8
51175: PPUSH
51176: CALL_OW 488
51180: NOT
51181: IFFALSE 51185
// continue ;
51183: GO 51113
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51185: LD_ADDR_VAR 0 9
51189: PUSH
51190: LD_VAR 0 12
51194: PUSH
51195: LD_INT 1
51197: ARRAY
51198: PPUSH
51199: LD_VAR 0 12
51203: PUSH
51204: LD_INT 2
51206: ARRAY
51207: PPUSH
51208: LD_VAR 0 7
51212: PPUSH
51213: LD_VAR 0 8
51217: PPUSH
51218: CALL_OW 298
51222: ST_TO_ADDR
// if tmp < distance then
51223: LD_VAR 0 9
51227: PUSH
51228: LD_VAR 0 10
51232: LESS
51233: IFFALSE 51255
// begin result := i ;
51235: LD_ADDR_VAR 0 5
51239: PUSH
51240: LD_VAR 0 6
51244: ST_TO_ADDR
// distance := tmp ;
51245: LD_ADDR_VAR 0 10
51249: PUSH
51250: LD_VAR 0 9
51254: ST_TO_ADDR
// end ; end ;
51255: GO 51113
51257: POP
51258: POP
// end ;
51259: LD_VAR 0 5
51263: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51264: LD_INT 0
51266: PPUSH
51267: PPUSH
// if not driver or not IsInUnit ( driver ) then
51268: LD_VAR 0 1
51272: NOT
51273: IFTRUE 51287
51275: PUSH
51276: LD_VAR 0 1
51280: PPUSH
51281: CALL_OW 310
51285: NOT
51286: OR
51287: IFFALSE 51291
// exit ;
51289: GO 51381
// vehicle := IsInUnit ( driver ) ;
51291: LD_ADDR_VAR 0 3
51295: PUSH
51296: LD_VAR 0 1
51300: PPUSH
51301: CALL_OW 310
51305: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51306: LD_VAR 0 1
51310: PPUSH
51311: LD_STRING \
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: PUSH
51341: LD_STRING E
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: LD_VAR 0 3
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PPUSH
51377: CALL_OW 446
// end ;
51381: LD_VAR 0 2
51385: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51386: LD_INT 0
51388: PPUSH
51389: PPUSH
// if not driver or not IsInUnit ( driver ) then
51390: LD_VAR 0 1
51394: NOT
51395: IFTRUE 51409
51397: PUSH
51398: LD_VAR 0 1
51402: PPUSH
51403: CALL_OW 310
51407: NOT
51408: OR
51409: IFFALSE 51413
// exit ;
51411: GO 51503
// vehicle := IsInUnit ( driver ) ;
51413: LD_ADDR_VAR 0 3
51417: PUSH
51418: LD_VAR 0 1
51422: PPUSH
51423: CALL_OW 310
51427: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51428: LD_VAR 0 1
51432: PPUSH
51433: LD_STRING \
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: PUSH
51463: LD_STRING E
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_VAR 0 3
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PPUSH
51499: CALL_OW 447
// end ;
51503: LD_VAR 0 2
51507: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51508: LD_INT 0
51510: PPUSH
51511: PPUSH
51512: PPUSH
// tmp := [ ] ;
51513: LD_ADDR_VAR 0 5
51517: PUSH
51518: EMPTY
51519: ST_TO_ADDR
// for i in units do
51520: LD_ADDR_VAR 0 4
51524: PUSH
51525: LD_VAR 0 1
51529: PUSH
51530: FOR_IN
51531: IFFALSE 51569
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51533: LD_ADDR_VAR 0 5
51537: PUSH
51538: LD_VAR 0 5
51542: PPUSH
51543: LD_VAR 0 5
51547: PUSH
51548: LD_INT 1
51550: PLUS
51551: PPUSH
51552: LD_VAR 0 4
51556: PPUSH
51557: CALL_OW 256
51561: PPUSH
51562: CALL_OW 2
51566: ST_TO_ADDR
51567: GO 51530
51569: POP
51570: POP
// if not tmp then
51571: LD_VAR 0 5
51575: NOT
51576: IFFALSE 51580
// exit ;
51578: GO 51628
// if asc then
51580: LD_VAR 0 2
51584: IFFALSE 51608
// result := SortListByListAsc ( units , tmp ) else
51586: LD_ADDR_VAR 0 3
51590: PUSH
51591: LD_VAR 0 1
51595: PPUSH
51596: LD_VAR 0 5
51600: PPUSH
51601: CALL_OW 76
51605: ST_TO_ADDR
51606: GO 51628
// result := SortListByListDesc ( units , tmp ) ;
51608: LD_ADDR_VAR 0 3
51612: PUSH
51613: LD_VAR 0 1
51617: PPUSH
51618: LD_VAR 0 5
51622: PPUSH
51623: CALL_OW 77
51627: ST_TO_ADDR
// end ;
51628: LD_VAR 0 3
51632: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51633: LD_INT 0
51635: PPUSH
51636: PPUSH
// task := GetTaskList ( mech ) ;
51637: LD_ADDR_VAR 0 4
51641: PUSH
51642: LD_VAR 0 1
51646: PPUSH
51647: CALL_OW 437
51651: ST_TO_ADDR
// if not task then
51652: LD_VAR 0 4
51656: NOT
51657: IFFALSE 51661
// exit ;
51659: GO 51705
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51661: LD_ADDR_VAR 0 3
51665: PUSH
51666: LD_VAR 0 4
51670: PUSH
51671: LD_INT 1
51673: ARRAY
51674: PUSH
51675: LD_INT 1
51677: ARRAY
51678: PUSH
51679: LD_STRING r
51681: EQUAL
51682: IFFALSE 51704
51684: PUSH
51685: LD_VAR 0 4
51689: PUSH
51690: LD_INT 1
51692: ARRAY
51693: PUSH
51694: LD_INT 4
51696: ARRAY
51697: PUSH
51698: LD_VAR 0 2
51702: EQUAL
51703: AND
51704: ST_TO_ADDR
// end ;
51705: LD_VAR 0 3
51709: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51710: LD_INT 0
51712: PPUSH
// SetDir ( unit , d ) ;
51713: LD_VAR 0 1
51717: PPUSH
51718: LD_VAR 0 4
51722: PPUSH
51723: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51727: LD_ADDR_VAR 0 6
51731: PUSH
51732: LD_VAR 0 1
51736: PPUSH
51737: LD_VAR 0 2
51741: PPUSH
51742: LD_VAR 0 3
51746: PPUSH
51747: LD_VAR 0 5
51751: PPUSH
51752: CALL_OW 48
51756: ST_TO_ADDR
// end ;
51757: LD_VAR 0 6
51761: RET
// export function ToNaturalNumber ( number ) ; begin
51762: LD_INT 0
51764: PPUSH
// result := number div 1 ;
51765: LD_ADDR_VAR 0 2
51769: PUSH
51770: LD_VAR 0 1
51774: PUSH
51775: LD_INT 1
51777: DIV
51778: ST_TO_ADDR
// if number < 0 then
51779: LD_VAR 0 1
51783: PUSH
51784: LD_INT 0
51786: LESS
51787: IFFALSE 51797
// result := 0 ;
51789: LD_ADDR_VAR 0 2
51793: PUSH
51794: LD_INT 0
51796: ST_TO_ADDR
// end ;
51797: LD_VAR 0 2
51801: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51802: LD_INT 0
51804: PPUSH
51805: PPUSH
51806: PPUSH
// if not buildings then
51807: LD_VAR 0 1
51811: NOT
51812: IFFALSE 51816
// exit ;
51814: GO 51931
// tmp := [ ] ;
51816: LD_ADDR_VAR 0 5
51820: PUSH
51821: EMPTY
51822: ST_TO_ADDR
// for b in buildings do
51823: LD_ADDR_VAR 0 4
51827: PUSH
51828: LD_VAR 0 1
51832: PUSH
51833: FOR_IN
51834: IFFALSE 51872
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51836: LD_ADDR_VAR 0 5
51840: PUSH
51841: LD_VAR 0 5
51845: PPUSH
51846: LD_VAR 0 5
51850: PUSH
51851: LD_INT 1
51853: PLUS
51854: PPUSH
51855: LD_VAR 0 4
51859: PPUSH
51860: CALL_OW 266
51864: PPUSH
51865: CALL_OW 1
51869: ST_TO_ADDR
51870: GO 51833
51872: POP
51873: POP
// if not tmp then
51874: LD_VAR 0 5
51878: NOT
51879: IFFALSE 51883
// exit ;
51881: GO 51931
// if asc then
51883: LD_VAR 0 2
51887: IFFALSE 51911
// result := SortListByListAsc ( buildings , tmp ) else
51889: LD_ADDR_VAR 0 3
51893: PUSH
51894: LD_VAR 0 1
51898: PPUSH
51899: LD_VAR 0 5
51903: PPUSH
51904: CALL_OW 76
51908: ST_TO_ADDR
51909: GO 51931
// result := SortListByListDesc ( buildings , tmp ) ;
51911: LD_ADDR_VAR 0 3
51915: PUSH
51916: LD_VAR 0 1
51920: PPUSH
51921: LD_VAR 0 5
51925: PPUSH
51926: CALL_OW 77
51930: ST_TO_ADDR
// end ;
51931: LD_VAR 0 3
51935: RET
// export function SortByClass ( units , class ) ; var un ; begin
51936: LD_INT 0
51938: PPUSH
51939: PPUSH
// if not units or not class then
51940: LD_VAR 0 1
51944: NOT
51945: IFTRUE 51954
51947: PUSH
51948: LD_VAR 0 2
51952: NOT
51953: OR
51954: IFFALSE 51958
// exit ;
51956: GO 52053
// result := [ ] ;
51958: LD_ADDR_VAR 0 3
51962: PUSH
51963: EMPTY
51964: ST_TO_ADDR
// for un in units do
51965: LD_ADDR_VAR 0 4
51969: PUSH
51970: LD_VAR 0 1
51974: PUSH
51975: FOR_IN
51976: IFFALSE 52051
// if GetClass ( un ) = class then
51978: LD_VAR 0 4
51982: PPUSH
51983: CALL_OW 257
51987: PUSH
51988: LD_VAR 0 2
51992: EQUAL
51993: IFFALSE 52020
// result := Insert ( result , 1 , un ) else
51995: LD_ADDR_VAR 0 3
51999: PUSH
52000: LD_VAR 0 3
52004: PPUSH
52005: LD_INT 1
52007: PPUSH
52008: LD_VAR 0 4
52012: PPUSH
52013: CALL_OW 2
52017: ST_TO_ADDR
52018: GO 52049
// result := Replace ( result , result + 1 , un ) ;
52020: LD_ADDR_VAR 0 3
52024: PUSH
52025: LD_VAR 0 3
52029: PPUSH
52030: LD_VAR 0 3
52034: PUSH
52035: LD_INT 1
52037: PLUS
52038: PPUSH
52039: LD_VAR 0 4
52043: PPUSH
52044: CALL_OW 1
52048: ST_TO_ADDR
52049: GO 51975
52051: POP
52052: POP
// end ;
52053: LD_VAR 0 3
52057: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
52058: LD_INT 0
52060: PPUSH
52061: PPUSH
52062: PPUSH
52063: PPUSH
52064: PPUSH
52065: PPUSH
52066: PPUSH
// result := [ ] ;
52067: LD_ADDR_VAR 0 4
52071: PUSH
52072: EMPTY
52073: ST_TO_ADDR
// if x - r < 0 then
52074: LD_VAR 0 1
52078: PUSH
52079: LD_VAR 0 3
52083: MINUS
52084: PUSH
52085: LD_INT 0
52087: LESS
52088: IFFALSE 52100
// min_x := 0 else
52090: LD_ADDR_VAR 0 8
52094: PUSH
52095: LD_INT 0
52097: ST_TO_ADDR
52098: GO 52116
// min_x := x - r ;
52100: LD_ADDR_VAR 0 8
52104: PUSH
52105: LD_VAR 0 1
52109: PUSH
52110: LD_VAR 0 3
52114: MINUS
52115: ST_TO_ADDR
// if y - r < 0 then
52116: LD_VAR 0 2
52120: PUSH
52121: LD_VAR 0 3
52125: MINUS
52126: PUSH
52127: LD_INT 0
52129: LESS
52130: IFFALSE 52142
// min_y := 0 else
52132: LD_ADDR_VAR 0 7
52136: PUSH
52137: LD_INT 0
52139: ST_TO_ADDR
52140: GO 52158
// min_y := y - r ;
52142: LD_ADDR_VAR 0 7
52146: PUSH
52147: LD_VAR 0 2
52151: PUSH
52152: LD_VAR 0 3
52156: MINUS
52157: ST_TO_ADDR
// max_x := x + r ;
52158: LD_ADDR_VAR 0 9
52162: PUSH
52163: LD_VAR 0 1
52167: PUSH
52168: LD_VAR 0 3
52172: PLUS
52173: ST_TO_ADDR
// max_y := y + r ;
52174: LD_ADDR_VAR 0 10
52178: PUSH
52179: LD_VAR 0 2
52183: PUSH
52184: LD_VAR 0 3
52188: PLUS
52189: ST_TO_ADDR
// for _x = min_x to max_x do
52190: LD_ADDR_VAR 0 5
52194: PUSH
52195: DOUBLE
52196: LD_VAR 0 8
52200: DEC
52201: ST_TO_ADDR
52202: LD_VAR 0 9
52206: PUSH
52207: FOR_TO
52208: IFFALSE 52309
// for _y = min_y to max_y do
52210: LD_ADDR_VAR 0 6
52214: PUSH
52215: DOUBLE
52216: LD_VAR 0 7
52220: DEC
52221: ST_TO_ADDR
52222: LD_VAR 0 10
52226: PUSH
52227: FOR_TO
52228: IFFALSE 52305
// begin if not ValidHex ( _x , _y ) then
52230: LD_VAR 0 5
52234: PPUSH
52235: LD_VAR 0 6
52239: PPUSH
52240: CALL_OW 488
52244: NOT
52245: IFFALSE 52249
// continue ;
52247: GO 52227
// if GetResourceTypeXY ( _x , _y ) then
52249: LD_VAR 0 5
52253: PPUSH
52254: LD_VAR 0 6
52258: PPUSH
52259: CALL_OW 283
52263: IFFALSE 52303
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
52265: LD_ADDR_VAR 0 4
52269: PUSH
52270: LD_VAR 0 4
52274: PPUSH
52275: LD_VAR 0 4
52279: PUSH
52280: LD_INT 1
52282: PLUS
52283: PPUSH
52284: LD_VAR 0 5
52288: PUSH
52289: LD_VAR 0 6
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PPUSH
52298: CALL_OW 1
52302: ST_TO_ADDR
// end ;
52303: GO 52227
52305: POP
52306: POP
52307: GO 52207
52309: POP
52310: POP
// end ;
52311: LD_VAR 0 4
52315: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52316: LD_INT 0
52318: PPUSH
52319: PPUSH
52320: PPUSH
52321: PPUSH
52322: PPUSH
52323: PPUSH
52324: PPUSH
52325: PPUSH
// if not units then
52326: LD_VAR 0 1
52330: NOT
52331: IFFALSE 52335
// exit ;
52333: GO 52867
// result := UnitFilter ( units , [ f_ok ] ) ;
52335: LD_ADDR_VAR 0 3
52339: PUSH
52340: LD_VAR 0 1
52344: PPUSH
52345: LD_INT 50
52347: PUSH
52348: EMPTY
52349: LIST
52350: PPUSH
52351: CALL_OW 72
52355: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52356: LD_ADDR_VAR 0 8
52360: PUSH
52361: LD_VAR 0 1
52365: PUSH
52366: LD_INT 1
52368: ARRAY
52369: PPUSH
52370: CALL_OW 255
52374: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
52375: LD_ADDR_VAR 0 10
52379: PUSH
52380: LD_INT 29
52382: PUSH
52383: LD_INT 91
52385: PUSH
52386: LD_INT 49
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: LIST
52393: ST_TO_ADDR
// if not result then
52394: LD_VAR 0 3
52398: NOT
52399: IFFALSE 52403
// exit ;
52401: GO 52867
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52403: LD_ADDR_VAR 0 5
52407: PUSH
52408: LD_INT 81
52410: PUSH
52411: LD_VAR 0 8
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PPUSH
52420: CALL_OW 69
52424: ST_TO_ADDR
// for i in result do
52425: LD_ADDR_VAR 0 4
52429: PUSH
52430: LD_VAR 0 3
52434: PUSH
52435: FOR_IN
52436: IFFALSE 52865
// begin tag := GetTag ( i ) + 1 ;
52438: LD_ADDR_VAR 0 9
52442: PUSH
52443: LD_VAR 0 4
52447: PPUSH
52448: CALL_OW 110
52452: PUSH
52453: LD_INT 1
52455: PLUS
52456: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
52457: LD_ADDR_VAR 0 7
52461: PUSH
52462: LD_VAR 0 4
52466: PPUSH
52467: CALL_OW 250
52471: PPUSH
52472: LD_VAR 0 4
52476: PPUSH
52477: CALL_OW 251
52481: PPUSH
52482: LD_INT 4
52484: PPUSH
52485: CALL 52058 0 3
52489: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
52490: LD_VAR 0 4
52494: PPUSH
52495: CALL_OW 247
52499: PUSH
52500: LD_INT 2
52502: EQUAL
52503: IFFALSE 52515
52505: PUSH
52506: LD_VAR 0 7
52510: PUSH
52511: LD_INT 2
52513: GREATER
52514: AND
52515: IFFALSE 52535
52517: PUSH
52518: LD_VAR 0 4
52522: PPUSH
52523: CALL_OW 264
52527: PUSH
52528: LD_VAR 0 10
52532: IN
52533: NOT
52534: AND
52535: IFFALSE 52574
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52537: LD_VAR 0 4
52541: PPUSH
52542: LD_VAR 0 7
52546: PUSH
52547: LD_INT 1
52549: ARRAY
52550: PUSH
52551: LD_INT 1
52553: ARRAY
52554: PPUSH
52555: LD_VAR 0 7
52559: PUSH
52560: LD_INT 1
52562: ARRAY
52563: PUSH
52564: LD_INT 2
52566: ARRAY
52567: PPUSH
52568: CALL_OW 116
52572: GO 52863
// if path > tag then
52574: LD_VAR 0 2
52578: PUSH
52579: LD_VAR 0 9
52583: GREATER
52584: IFFALSE 52792
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
52586: LD_ADDR_VAR 0 6
52590: PUSH
52591: LD_VAR 0 5
52595: PPUSH
52596: LD_INT 91
52598: PUSH
52599: LD_VAR 0 4
52603: PUSH
52604: LD_INT 8
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: LIST
52611: PPUSH
52612: CALL_OW 72
52616: ST_TO_ADDR
// if nearEnemy then
52617: LD_VAR 0 6
52621: IFFALSE 52690
// begin if GetWeapon ( i ) = ru_time_lapser then
52623: LD_VAR 0 4
52627: PPUSH
52628: CALL_OW 264
52632: PUSH
52633: LD_INT 49
52635: EQUAL
52636: IFFALSE 52664
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52638: LD_VAR 0 4
52642: PPUSH
52643: LD_VAR 0 6
52647: PPUSH
52648: LD_VAR 0 4
52652: PPUSH
52653: CALL_OW 74
52657: PPUSH
52658: CALL_OW 112
52662: GO 52688
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52664: LD_VAR 0 4
52668: PPUSH
52669: LD_VAR 0 6
52673: PPUSH
52674: LD_VAR 0 4
52678: PPUSH
52679: CALL_OW 74
52683: PPUSH
52684: CALL 53948 0 2
// end else
52688: GO 52790
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52690: LD_VAR 0 4
52694: PPUSH
52695: LD_VAR 0 2
52699: PUSH
52700: LD_VAR 0 9
52704: ARRAY
52705: PUSH
52706: LD_INT 1
52708: ARRAY
52709: PPUSH
52710: LD_VAR 0 2
52714: PUSH
52715: LD_VAR 0 9
52719: ARRAY
52720: PUSH
52721: LD_INT 2
52723: ARRAY
52724: PPUSH
52725: CALL_OW 297
52729: PUSH
52730: LD_INT 6
52732: GREATER
52733: IFFALSE 52776
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52735: LD_VAR 0 4
52739: PPUSH
52740: LD_VAR 0 2
52744: PUSH
52745: LD_VAR 0 9
52749: ARRAY
52750: PUSH
52751: LD_INT 1
52753: ARRAY
52754: PPUSH
52755: LD_VAR 0 2
52759: PUSH
52760: LD_VAR 0 9
52764: ARRAY
52765: PUSH
52766: LD_INT 2
52768: ARRAY
52769: PPUSH
52770: CALL_OW 114
52774: GO 52790
// SetTag ( i , tag ) ;
52776: LD_VAR 0 4
52780: PPUSH
52781: LD_VAR 0 9
52785: PPUSH
52786: CALL_OW 109
// end else
52790: GO 52863
// if enemy then
52792: LD_VAR 0 5
52796: IFFALSE 52863
// begin if GetWeapon ( i ) = ru_time_lapser then
52798: LD_VAR 0 4
52802: PPUSH
52803: CALL_OW 264
52807: PUSH
52808: LD_INT 49
52810: EQUAL
52811: IFFALSE 52839
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52813: LD_VAR 0 4
52817: PPUSH
52818: LD_VAR 0 5
52822: PPUSH
52823: LD_VAR 0 4
52827: PPUSH
52828: CALL_OW 74
52832: PPUSH
52833: CALL_OW 112
52837: GO 52863
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52839: LD_VAR 0 4
52843: PPUSH
52844: LD_VAR 0 5
52848: PPUSH
52849: LD_VAR 0 4
52853: PPUSH
52854: CALL_OW 74
52858: PPUSH
52859: CALL 53948 0 2
// end ; end ;
52863: GO 52435
52865: POP
52866: POP
// end ;
52867: LD_VAR 0 3
52871: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52872: LD_INT 0
52874: PPUSH
52875: PPUSH
52876: PPUSH
// if not unit or IsInUnit ( unit ) then
52877: LD_VAR 0 1
52881: NOT
52882: IFTRUE 52895
52884: PUSH
52885: LD_VAR 0 1
52889: PPUSH
52890: CALL_OW 310
52894: OR
52895: IFFALSE 52899
// exit ;
52897: GO 52990
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52899: LD_ADDR_VAR 0 4
52903: PUSH
52904: LD_VAR 0 1
52908: PPUSH
52909: CALL_OW 250
52913: PPUSH
52914: LD_VAR 0 2
52918: PPUSH
52919: LD_INT 1
52921: PPUSH
52922: CALL_OW 272
52926: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52927: LD_ADDR_VAR 0 5
52931: PUSH
52932: LD_VAR 0 1
52936: PPUSH
52937: CALL_OW 251
52941: PPUSH
52942: LD_VAR 0 2
52946: PPUSH
52947: LD_INT 1
52949: PPUSH
52950: CALL_OW 273
52954: ST_TO_ADDR
// if ValidHex ( x , y ) then
52955: LD_VAR 0 4
52959: PPUSH
52960: LD_VAR 0 5
52964: PPUSH
52965: CALL_OW 488
52969: IFFALSE 52990
// ComTurnXY ( unit , x , y ) ;
52971: LD_VAR 0 1
52975: PPUSH
52976: LD_VAR 0 4
52980: PPUSH
52981: LD_VAR 0 5
52985: PPUSH
52986: CALL_OW 118
// end ;
52990: LD_VAR 0 3
52994: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52995: LD_INT 0
52997: PPUSH
52998: PPUSH
// result := false ;
52999: LD_ADDR_VAR 0 3
53003: PUSH
53004: LD_INT 0
53006: ST_TO_ADDR
// if not units then
53007: LD_VAR 0 2
53011: NOT
53012: IFFALSE 53016
// exit ;
53014: GO 53061
// for i in units do
53016: LD_ADDR_VAR 0 4
53020: PUSH
53021: LD_VAR 0 2
53025: PUSH
53026: FOR_IN
53027: IFFALSE 53059
// if See ( side , i ) then
53029: LD_VAR 0 1
53033: PPUSH
53034: LD_VAR 0 4
53038: PPUSH
53039: CALL_OW 292
53043: IFFALSE 53057
// begin result := true ;
53045: LD_ADDR_VAR 0 3
53049: PUSH
53050: LD_INT 1
53052: ST_TO_ADDR
// exit ;
53053: POP
53054: POP
53055: GO 53061
// end ;
53057: GO 53026
53059: POP
53060: POP
// end ;
53061: LD_VAR 0 3
53065: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
53066: LD_INT 0
53068: PPUSH
53069: PPUSH
53070: PPUSH
53071: PPUSH
// if not unit or not points then
53072: LD_VAR 0 1
53076: NOT
53077: IFTRUE 53086
53079: PUSH
53080: LD_VAR 0 2
53084: NOT
53085: OR
53086: IFFALSE 53090
// exit ;
53088: GO 53180
// dist := 99999 ;
53090: LD_ADDR_VAR 0 5
53094: PUSH
53095: LD_INT 99999
53097: ST_TO_ADDR
// for i in points do
53098: LD_ADDR_VAR 0 4
53102: PUSH
53103: LD_VAR 0 2
53107: PUSH
53108: FOR_IN
53109: IFFALSE 53178
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
53111: LD_ADDR_VAR 0 6
53115: PUSH
53116: LD_VAR 0 1
53120: PPUSH
53121: LD_VAR 0 4
53125: PUSH
53126: LD_INT 1
53128: ARRAY
53129: PPUSH
53130: LD_VAR 0 4
53134: PUSH
53135: LD_INT 2
53137: ARRAY
53138: PPUSH
53139: CALL_OW 297
53143: ST_TO_ADDR
// if tmpDist < dist then
53144: LD_VAR 0 6
53148: PUSH
53149: LD_VAR 0 5
53153: LESS
53154: IFFALSE 53176
// begin result := i ;
53156: LD_ADDR_VAR 0 3
53160: PUSH
53161: LD_VAR 0 4
53165: ST_TO_ADDR
// dist := tmpDist ;
53166: LD_ADDR_VAR 0 5
53170: PUSH
53171: LD_VAR 0 6
53175: ST_TO_ADDR
// end ; end ;
53176: GO 53108
53178: POP
53179: POP
// end ;
53180: LD_VAR 0 3
53184: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
53185: LD_INT 0
53187: PPUSH
// uc_side := side ;
53188: LD_ADDR_OWVAR 20
53192: PUSH
53193: LD_VAR 0 1
53197: ST_TO_ADDR
// uc_nation := 3 ;
53198: LD_ADDR_OWVAR 21
53202: PUSH
53203: LD_INT 3
53205: ST_TO_ADDR
// vc_chassis := 25 ;
53206: LD_ADDR_OWVAR 37
53210: PUSH
53211: LD_INT 25
53213: ST_TO_ADDR
// vc_engine := engine_siberite ;
53214: LD_ADDR_OWVAR 39
53218: PUSH
53219: LD_INT 3
53221: ST_TO_ADDR
// vc_control := control_computer ;
53222: LD_ADDR_OWVAR 38
53226: PUSH
53227: LD_INT 3
53229: ST_TO_ADDR
// vc_weapon := 59 ;
53230: LD_ADDR_OWVAR 40
53234: PUSH
53235: LD_INT 59
53237: ST_TO_ADDR
// result := CreateVehicle ;
53238: LD_ADDR_VAR 0 5
53242: PUSH
53243: CALL_OW 45
53247: ST_TO_ADDR
// SetDir ( result , d ) ;
53248: LD_VAR 0 5
53252: PPUSH
53253: LD_VAR 0 4
53257: PPUSH
53258: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
53262: LD_VAR 0 5
53266: PPUSH
53267: LD_VAR 0 2
53271: PPUSH
53272: LD_VAR 0 3
53276: PPUSH
53277: LD_INT 0
53279: PPUSH
53280: CALL_OW 48
// end ;
53284: LD_VAR 0 5
53288: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
53289: LD_INT 0
53291: PPUSH
53292: PPUSH
53293: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
53294: LD_ADDR_VAR 0 2
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
53317: LD_VAR 0 1
53321: NOT
53322: IFTRUE 53355
53324: PUSH
53325: LD_VAR 0 1
53329: PPUSH
53330: CALL_OW 264
53334: PUSH
53335: LD_INT 12
53337: PUSH
53338: LD_INT 51
53340: PUSH
53341: LD_INT 32
53343: PUSH
53344: LD_INT 89
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: IN
53353: NOT
53354: OR
53355: IFFALSE 53359
// exit ;
53357: GO 53457
// for i := 1 to 3 do
53359: LD_ADDR_VAR 0 3
53363: PUSH
53364: DOUBLE
53365: LD_INT 1
53367: DEC
53368: ST_TO_ADDR
53369: LD_INT 3
53371: PUSH
53372: FOR_TO
53373: IFFALSE 53455
// begin tmp := GetCargo ( cargo , i ) ;
53375: LD_ADDR_VAR 0 4
53379: PUSH
53380: LD_VAR 0 1
53384: PPUSH
53385: LD_VAR 0 3
53389: PPUSH
53390: CALL_OW 289
53394: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
53395: LD_ADDR_VAR 0 2
53399: PUSH
53400: LD_VAR 0 2
53404: PPUSH
53405: LD_VAR 0 3
53409: PPUSH
53410: LD_VAR 0 4
53414: PPUSH
53415: CALL_OW 1
53419: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
53420: LD_ADDR_VAR 0 2
53424: PUSH
53425: LD_VAR 0 2
53429: PPUSH
53430: LD_INT 4
53432: PPUSH
53433: LD_VAR 0 2
53437: PUSH
53438: LD_INT 4
53440: ARRAY
53441: PUSH
53442: LD_VAR 0 4
53446: PLUS
53447: PPUSH
53448: CALL_OW 1
53452: ST_TO_ADDR
// end ;
53453: GO 53372
53455: POP
53456: POP
// end ;
53457: LD_VAR 0 2
53461: RET
// export function Length ( array ) ; begin
53462: LD_INT 0
53464: PPUSH
// result := array + 0 ;
53465: LD_ADDR_VAR 0 2
53469: PUSH
53470: LD_VAR 0 1
53474: PUSH
53475: LD_INT 0
53477: PLUS
53478: ST_TO_ADDR
// end ;
53479: LD_VAR 0 2
53483: RET
// export function PrepareArray ( array ) ; begin
53484: LD_INT 0
53486: PPUSH
// result := array diff 0 ;
53487: LD_ADDR_VAR 0 2
53491: PUSH
53492: LD_VAR 0 1
53496: PUSH
53497: LD_INT 0
53499: DIFF
53500: ST_TO_ADDR
// if not result [ 1 ] then
53501: LD_VAR 0 2
53505: PUSH
53506: LD_INT 1
53508: ARRAY
53509: NOT
53510: IFFALSE 53530
// result := Delete ( result , 1 ) ;
53512: LD_ADDR_VAR 0 2
53516: PUSH
53517: LD_VAR 0 2
53521: PPUSH
53522: LD_INT 1
53524: PPUSH
53525: CALL_OW 3
53529: ST_TO_ADDR
// end ;
53530: LD_VAR 0 2
53534: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
53535: LD_INT 0
53537: PPUSH
53538: PPUSH
53539: PPUSH
53540: PPUSH
// sibRocketRange := 25 ;
53541: LD_ADDR_VAR 0 6
53545: PUSH
53546: LD_INT 25
53548: ST_TO_ADDR
// result := false ;
53549: LD_ADDR_VAR 0 4
53553: PUSH
53554: LD_INT 0
53556: ST_TO_ADDR
// for i := 0 to 5 do
53557: LD_ADDR_VAR 0 5
53561: PUSH
53562: DOUBLE
53563: LD_INT 0
53565: DEC
53566: ST_TO_ADDR
53567: LD_INT 5
53569: PUSH
53570: FOR_TO
53571: IFFALSE 53638
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
53573: LD_VAR 0 1
53577: PPUSH
53578: LD_VAR 0 5
53582: PPUSH
53583: LD_VAR 0 6
53587: PPUSH
53588: CALL_OW 272
53592: PPUSH
53593: LD_VAR 0 2
53597: PPUSH
53598: LD_VAR 0 5
53602: PPUSH
53603: LD_VAR 0 6
53607: PPUSH
53608: CALL_OW 273
53612: PPUSH
53613: LD_VAR 0 3
53617: PPUSH
53618: CALL_OW 309
53622: IFFALSE 53636
// begin result := true ;
53624: LD_ADDR_VAR 0 4
53628: PUSH
53629: LD_INT 1
53631: ST_TO_ADDR
// exit ;
53632: POP
53633: POP
53634: GO 53640
// end ;
53636: GO 53570
53638: POP
53639: POP
// end ;
53640: LD_VAR 0 4
53644: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
53645: LD_INT 0
53647: PPUSH
53648: PPUSH
53649: PPUSH
// if btype = b_depot then
53650: LD_VAR 0 2
53654: PUSH
53655: LD_INT 0
53657: EQUAL
53658: IFFALSE 53670
// begin result := true ;
53660: LD_ADDR_VAR 0 3
53664: PUSH
53665: LD_INT 1
53667: ST_TO_ADDR
// exit ;
53668: GO 53790
// end ; pom := GetBase ( depot ) ;
53670: LD_ADDR_VAR 0 4
53674: PUSH
53675: LD_VAR 0 1
53679: PPUSH
53680: CALL_OW 274
53684: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53685: LD_ADDR_VAR 0 5
53689: PUSH
53690: LD_VAR 0 2
53694: PPUSH
53695: LD_VAR 0 1
53699: PPUSH
53700: CALL_OW 248
53704: PPUSH
53705: CALL_OW 450
53709: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53710: LD_ADDR_VAR 0 3
53714: PUSH
53715: LD_VAR 0 4
53719: PPUSH
53720: LD_INT 1
53722: PPUSH
53723: CALL_OW 275
53727: PUSH
53728: LD_VAR 0 5
53732: PUSH
53733: LD_INT 1
53735: ARRAY
53736: GREATEREQUAL
53737: IFFALSE 53763
53739: PUSH
53740: LD_VAR 0 4
53744: PPUSH
53745: LD_INT 2
53747: PPUSH
53748: CALL_OW 275
53752: PUSH
53753: LD_VAR 0 5
53757: PUSH
53758: LD_INT 2
53760: ARRAY
53761: GREATEREQUAL
53762: AND
53763: IFFALSE 53789
53765: PUSH
53766: LD_VAR 0 4
53770: PPUSH
53771: LD_INT 3
53773: PPUSH
53774: CALL_OW 275
53778: PUSH
53779: LD_VAR 0 5
53783: PUSH
53784: LD_INT 3
53786: ARRAY
53787: GREATEREQUAL
53788: AND
53789: ST_TO_ADDR
// end ;
53790: LD_VAR 0 3
53794: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53795: LD_INT 0
53797: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53798: LD_VAR 0 1
53802: PPUSH
53803: LD_VAR 0 2
53807: PPUSH
53808: LD_INT 0
53810: PPUSH
53811: LD_INT 0
53813: PPUSH
53814: LD_INT 1
53816: PPUSH
53817: LD_INT 0
53819: PPUSH
53820: CALL_OW 587
// end ;
53824: LD_VAR 0 3
53828: RET
// export function CenterOnNow ( unit ) ; begin
53829: LD_INT 0
53831: PPUSH
// result := IsInUnit ( unit ) ;
53832: LD_ADDR_VAR 0 2
53836: PUSH
53837: LD_VAR 0 1
53841: PPUSH
53842: CALL_OW 310
53846: ST_TO_ADDR
// if not result then
53847: LD_VAR 0 2
53851: NOT
53852: IFFALSE 53864
// result := unit ;
53854: LD_ADDR_VAR 0 2
53858: PUSH
53859: LD_VAR 0 1
53863: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
53864: LD_VAR 0 1
53868: PPUSH
53869: CALL_OW 87
// end ;
53873: LD_VAR 0 2
53877: RET
// export function ComMoveHex ( unit , hex ) ; begin
53878: LD_INT 0
53880: PPUSH
// if not hex then
53881: LD_VAR 0 2
53885: NOT
53886: IFFALSE 53890
// exit ;
53888: GO 53943
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53890: LD_VAR 0 2
53894: PUSH
53895: LD_INT 1
53897: ARRAY
53898: PPUSH
53899: LD_VAR 0 2
53903: PUSH
53904: LD_INT 2
53906: ARRAY
53907: PPUSH
53908: CALL_OW 428
53912: IFFALSE 53916
// exit ;
53914: GO 53943
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53916: LD_VAR 0 1
53920: PPUSH
53921: LD_VAR 0 2
53925: PUSH
53926: LD_INT 1
53928: ARRAY
53929: PPUSH
53930: LD_VAR 0 2
53934: PUSH
53935: LD_INT 2
53937: ARRAY
53938: PPUSH
53939: CALL_OW 111
// end ;
53943: LD_VAR 0 3
53947: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53948: LD_INT 0
53950: PPUSH
53951: PPUSH
53952: PPUSH
// if not unit or not enemy then
53953: LD_VAR 0 1
53957: NOT
53958: IFTRUE 53967
53960: PUSH
53961: LD_VAR 0 2
53965: NOT
53966: OR
53967: IFFALSE 53971
// exit ;
53969: GO 54097
// x := GetX ( enemy ) ;
53971: LD_ADDR_VAR 0 4
53975: PUSH
53976: LD_VAR 0 2
53980: PPUSH
53981: CALL_OW 250
53985: ST_TO_ADDR
// y := GetY ( enemy ) ;
53986: LD_ADDR_VAR 0 5
53990: PUSH
53991: LD_VAR 0 2
53995: PPUSH
53996: CALL_OW 251
54000: ST_TO_ADDR
// if ValidHex ( x , y ) then
54001: LD_VAR 0 4
54005: PPUSH
54006: LD_VAR 0 5
54010: PPUSH
54011: CALL_OW 488
54015: IFFALSE 54097
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
54017: LD_VAR 0 2
54021: PPUSH
54022: CALL_OW 247
54026: PUSH
54027: LD_INT 3
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: IN
54037: IFTRUE 54060
54039: PUSH
54040: LD_VAR 0 1
54044: PPUSH
54045: CALL_OW 255
54049: PPUSH
54050: LD_VAR 0 2
54054: PPUSH
54055: CALL_OW 292
54059: OR
54060: IFFALSE 54078
// ComAttackUnit ( unit , enemy ) else
54062: LD_VAR 0 1
54066: PPUSH
54067: LD_VAR 0 2
54071: PPUSH
54072: CALL_OW 115
54076: GO 54097
// ComAgressiveMove ( unit , x , y ) ;
54078: LD_VAR 0 1
54082: PPUSH
54083: LD_VAR 0 4
54087: PPUSH
54088: LD_VAR 0 5
54092: PPUSH
54093: CALL_OW 114
// end ;
54097: LD_VAR 0 3
54101: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
54102: LD_INT 0
54104: PPUSH
54105: PPUSH
54106: PPUSH
// list := AreaToList ( area , 0 ) ;
54107: LD_ADDR_VAR 0 5
54111: PUSH
54112: LD_VAR 0 1
54116: PPUSH
54117: LD_INT 0
54119: PPUSH
54120: CALL_OW 517
54124: ST_TO_ADDR
// if not list then
54125: LD_VAR 0 5
54129: NOT
54130: IFFALSE 54134
// exit ;
54132: GO 54264
// if all then
54134: LD_VAR 0 2
54138: IFFALSE 54226
// begin for i := 1 to list [ 1 ] do
54140: LD_ADDR_VAR 0 4
54144: PUSH
54145: DOUBLE
54146: LD_INT 1
54148: DEC
54149: ST_TO_ADDR
54150: LD_VAR 0 5
54154: PUSH
54155: LD_INT 1
54157: ARRAY
54158: PUSH
54159: FOR_TO
54160: IFFALSE 54222
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
54162: LD_ADDR_VAR 0 3
54166: PUSH
54167: LD_VAR 0 3
54171: PPUSH
54172: LD_VAR 0 3
54176: PUSH
54177: LD_INT 1
54179: PLUS
54180: PPUSH
54181: LD_VAR 0 5
54185: PUSH
54186: LD_INT 1
54188: ARRAY
54189: PUSH
54190: LD_VAR 0 4
54194: ARRAY
54195: PUSH
54196: LD_VAR 0 5
54200: PUSH
54201: LD_INT 2
54203: ARRAY
54204: PUSH
54205: LD_VAR 0 4
54209: ARRAY
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PPUSH
54215: CALL_OW 1
54219: ST_TO_ADDR
54220: GO 54159
54222: POP
54223: POP
// exit ;
54224: GO 54264
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
54226: LD_ADDR_VAR 0 3
54230: PUSH
54231: LD_VAR 0 5
54235: PUSH
54236: LD_INT 1
54238: ARRAY
54239: PUSH
54240: LD_INT 1
54242: ARRAY
54243: PUSH
54244: LD_VAR 0 5
54248: PUSH
54249: LD_INT 2
54251: ARRAY
54252: PUSH
54253: LD_INT 1
54255: ARRAY
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: EMPTY
54262: LIST
54263: ST_TO_ADDR
// end ;
54264: LD_VAR 0 3
54268: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
54269: LD_INT 0
54271: PPUSH
54272: PPUSH
// list := AreaToList ( area , 0 ) ;
54273: LD_ADDR_VAR 0 4
54277: PUSH
54278: LD_VAR 0 1
54282: PPUSH
54283: LD_INT 0
54285: PPUSH
54286: CALL_OW 517
54290: ST_TO_ADDR
// if not list then
54291: LD_VAR 0 4
54295: NOT
54296: IFFALSE 54300
// exit ;
54298: GO 54341
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
54300: LD_ADDR_VAR 0 3
54304: PUSH
54305: LD_VAR 0 4
54309: PUSH
54310: LD_INT 1
54312: ARRAY
54313: PUSH
54314: LD_INT 1
54316: ARRAY
54317: PUSH
54318: LD_VAR 0 4
54322: PUSH
54323: LD_INT 2
54325: ARRAY
54326: PUSH
54327: LD_INT 1
54329: ARRAY
54330: PUSH
54331: LD_VAR 0 2
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: LIST
54340: ST_TO_ADDR
// end ;
54341: LD_VAR 0 3
54345: RET
// export function First ( array ) ; begin
54346: LD_INT 0
54348: PPUSH
// if not array then
54349: LD_VAR 0 1
54353: NOT
54354: IFFALSE 54358
// exit ;
54356: GO 54372
// result := array [ 1 ] ;
54358: LD_ADDR_VAR 0 2
54362: PUSH
54363: LD_VAR 0 1
54367: PUSH
54368: LD_INT 1
54370: ARRAY
54371: ST_TO_ADDR
// end ;
54372: LD_VAR 0 2
54376: RET
// export function Last ( array ) ; begin
54377: LD_INT 0
54379: PPUSH
// if not array then
54380: LD_VAR 0 1
54384: NOT
54385: IFFALSE 54389
// exit ;
54387: GO 54405
// result := array [ array ] ;
54389: LD_ADDR_VAR 0 2
54393: PUSH
54394: LD_VAR 0 1
54398: PUSH
54399: LD_VAR 0 1
54403: ARRAY
54404: ST_TO_ADDR
// end ;
54405: LD_VAR 0 2
54409: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
54410: LD_INT 0
54412: PPUSH
54413: PPUSH
// result := [ ] ;
54414: LD_ADDR_VAR 0 5
54418: PUSH
54419: EMPTY
54420: ST_TO_ADDR
// if not array then
54421: LD_VAR 0 1
54425: NOT
54426: IFFALSE 54430
// exit ;
54428: GO 54542
// for i := 1 to array do
54430: LD_ADDR_VAR 0 6
54434: PUSH
54435: DOUBLE
54436: LD_INT 1
54438: DEC
54439: ST_TO_ADDR
54440: LD_VAR 0 1
54444: PUSH
54445: FOR_TO
54446: IFFALSE 54540
// if array [ i ] [ index ] = value then
54448: LD_VAR 0 1
54452: PUSH
54453: LD_VAR 0 6
54457: ARRAY
54458: PUSH
54459: LD_VAR 0 2
54463: ARRAY
54464: PUSH
54465: LD_VAR 0 3
54469: EQUAL
54470: IFFALSE 54538
// begin if indexColumn then
54472: LD_VAR 0 4
54476: IFFALSE 54512
// result := Join ( result , array [ i ] [ indexColumn ] ) else
54478: LD_ADDR_VAR 0 5
54482: PUSH
54483: LD_VAR 0 5
54487: PPUSH
54488: LD_VAR 0 1
54492: PUSH
54493: LD_VAR 0 6
54497: ARRAY
54498: PUSH
54499: LD_VAR 0 4
54503: ARRAY
54504: PPUSH
54505: CALL 49550 0 2
54509: ST_TO_ADDR
54510: GO 54538
// result := Join ( result , array [ i ] ) ;
54512: LD_ADDR_VAR 0 5
54516: PUSH
54517: LD_VAR 0 5
54521: PPUSH
54522: LD_VAR 0 1
54526: PUSH
54527: LD_VAR 0 6
54531: ARRAY
54532: PPUSH
54533: CALL 49550 0 2
54537: ST_TO_ADDR
// end ;
54538: GO 54445
54540: POP
54541: POP
// end ;
54542: LD_VAR 0 5
54546: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
54547: LD_INT 0
54549: PPUSH
// if not vehicles or not parkingPoint then
54550: LD_VAR 0 1
54554: NOT
54555: IFTRUE 54564
54557: PUSH
54558: LD_VAR 0 2
54562: NOT
54563: OR
54564: IFFALSE 54568
// exit ;
54566: GO 54666
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
54568: LD_ADDR_VAR 0 1
54572: PUSH
54573: LD_VAR 0 1
54577: PPUSH
54578: LD_INT 50
54580: PUSH
54581: EMPTY
54582: LIST
54583: PUSH
54584: LD_INT 3
54586: PUSH
54587: LD_INT 92
54589: PUSH
54590: LD_VAR 0 2
54594: PUSH
54595: LD_INT 1
54597: ARRAY
54598: PUSH
54599: LD_VAR 0 2
54603: PUSH
54604: LD_INT 2
54606: ARRAY
54607: PUSH
54608: LD_INT 8
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PPUSH
54625: CALL_OW 72
54629: ST_TO_ADDR
// if not vehicles then
54630: LD_VAR 0 1
54634: NOT
54635: IFFALSE 54639
// exit ;
54637: GO 54666
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
54639: LD_VAR 0 1
54643: PPUSH
54644: LD_VAR 0 2
54648: PUSH
54649: LD_INT 1
54651: ARRAY
54652: PPUSH
54653: LD_VAR 0 2
54657: PUSH
54658: LD_INT 2
54660: ARRAY
54661: PPUSH
54662: CALL_OW 111
// end ;
54666: LD_VAR 0 3
54670: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
54671: LD_INT 0
54673: PPUSH
54674: PPUSH
54675: PPUSH
// if not side or not area then
54676: LD_VAR 0 1
54680: NOT
54681: IFTRUE 54690
54683: PUSH
54684: LD_VAR 0 2
54688: NOT
54689: OR
54690: IFFALSE 54694
// exit ;
54692: GO 54813
// tmp := AreaToList ( area , 0 ) ;
54694: LD_ADDR_VAR 0 5
54698: PUSH
54699: LD_VAR 0 2
54703: PPUSH
54704: LD_INT 0
54706: PPUSH
54707: CALL_OW 517
54711: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54712: LD_ADDR_VAR 0 4
54716: PUSH
54717: DOUBLE
54718: LD_INT 1
54720: DEC
54721: ST_TO_ADDR
54722: LD_VAR 0 5
54726: PUSH
54727: LD_INT 1
54729: ARRAY
54730: PUSH
54731: FOR_TO
54732: IFFALSE 54811
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54734: LD_VAR 0 5
54738: PUSH
54739: LD_INT 1
54741: ARRAY
54742: PUSH
54743: LD_VAR 0 4
54747: ARRAY
54748: PPUSH
54749: LD_VAR 0 5
54753: PUSH
54754: LD_INT 2
54756: ARRAY
54757: PUSH
54758: LD_VAR 0 4
54762: ARRAY
54763: PPUSH
54764: CALL_OW 351
54768: IFFALSE 54809
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54770: LD_VAR 0 5
54774: PUSH
54775: LD_INT 1
54777: ARRAY
54778: PUSH
54779: LD_VAR 0 4
54783: ARRAY
54784: PPUSH
54785: LD_VAR 0 5
54789: PUSH
54790: LD_INT 2
54792: ARRAY
54793: PUSH
54794: LD_VAR 0 4
54798: ARRAY
54799: PPUSH
54800: LD_VAR 0 1
54804: PPUSH
54805: CALL_OW 244
// end ;
54809: GO 54731
54811: POP
54812: POP
// end ;
54813: LD_VAR 0 3
54817: RET
// export function UniqueArray ( array ) ; var i ; begin
54818: LD_INT 0
54820: PPUSH
54821: PPUSH
// result := [ ] ;
54822: LD_ADDR_VAR 0 2
54826: PUSH
54827: EMPTY
54828: ST_TO_ADDR
// if not array then
54829: LD_VAR 0 1
54833: NOT
54834: IFFALSE 54838
// exit ;
54836: GO 54899
// for i := 1 to array do
54838: LD_ADDR_VAR 0 3
54842: PUSH
54843: DOUBLE
54844: LD_INT 1
54846: DEC
54847: ST_TO_ADDR
54848: LD_VAR 0 1
54852: PUSH
54853: FOR_TO
54854: IFFALSE 54897
// if not array [ i ] in result then
54856: LD_VAR 0 1
54860: PUSH
54861: LD_VAR 0 3
54865: ARRAY
54866: PUSH
54867: LD_VAR 0 2
54871: IN
54872: NOT
54873: IFFALSE 54895
// result := Join ( result , i ) ;
54875: LD_ADDR_VAR 0 2
54879: PUSH
54880: LD_VAR 0 2
54884: PPUSH
54885: LD_VAR 0 3
54889: PPUSH
54890: CALL 49550 0 2
54894: ST_TO_ADDR
54895: GO 54853
54897: POP
54898: POP
// end ; end_of_file
54899: LD_VAR 0 2
54903: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54904: LD_VAR 0 1
54908: PUSH
54909: LD_INT 200
54911: DOUBLE
54912: GREATEREQUAL
54913: IFFALSE 54921
54915: LD_INT 299
54917: DOUBLE
54918: LESSEQUAL
54919: IFTRUE 54923
54921: GO 54955
54923: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54924: LD_VAR 0 1
54928: PPUSH
54929: LD_VAR 0 2
54933: PPUSH
54934: LD_VAR 0 3
54938: PPUSH
54939: LD_VAR 0 4
54943: PPUSH
54944: LD_VAR 0 5
54948: PPUSH
54949: CALL 55817 0 5
54953: GO 55032
54955: LD_INT 300
54957: DOUBLE
54958: GREATEREQUAL
54959: IFFALSE 54967
54961: LD_INT 399
54963: DOUBLE
54964: LESSEQUAL
54965: IFTRUE 54969
54967: GO 55031
54969: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54970: LD_VAR 0 1
54974: PPUSH
54975: LD_VAR 0 2
54979: PPUSH
54980: LD_VAR 0 3
54984: PPUSH
54985: LD_VAR 0 4
54989: PPUSH
54990: LD_VAR 0 5
54994: PPUSH
54995: LD_VAR 0 6
54999: PPUSH
55000: LD_VAR 0 7
55004: PPUSH
55005: LD_VAR 0 8
55009: PPUSH
55010: LD_VAR 0 9
55014: PPUSH
55015: LD_VAR 0 10
55019: PPUSH
55020: LD_VAR 0 11
55024: PPUSH
55025: CALL 63926 0 11
55029: GO 55032
55031: POP
// end ;
55032: PPOPN 11
55034: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55035: LD_VAR 0 1
55039: PPUSH
55040: LD_VAR 0 2
55044: PPUSH
55045: LD_VAR 0 3
55049: PPUSH
55050: LD_VAR 0 4
55054: PPUSH
55055: LD_VAR 0 5
55059: PPUSH
55060: CALL 55117 0 5
// end ; end_of_file
55064: PPOPN 5
55066: END
// export function SOS_UnitDestroyed ( un ) ; begin
55067: LD_INT 0
55069: PPUSH
// ComRadiation ( un ) ;
55070: LD_VAR 0 1
55074: PPUSH
55075: CALL 56237 0 1
// end ;
55079: LD_VAR 0 2
55083: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55084: LD_INT 0
55086: PPUSH
// ComRadiation ( un ) ;
55087: LD_VAR 0 1
55091: PPUSH
55092: CALL 56237 0 1
// end ;
55096: LD_VAR 0 2
55100: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55101: LD_INT 0
55103: PPUSH
// end ;
55104: LD_VAR 0 4
55108: RET
// export function SOS_Command ( cmd ) ; begin
55109: LD_INT 0
55111: PPUSH
// end ;
55112: LD_VAR 0 2
55116: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55117: LD_INT 0
55119: PPUSH
// end ;
55120: LD_VAR 0 6
55124: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
55125: LD_INT 0
55127: PPUSH
55128: PPUSH
55129: PPUSH
55130: PPUSH
55131: PPUSH
// if not vehicle or not factory then
55132: LD_VAR 0 1
55136: NOT
55137: IFTRUE 55146
55139: PUSH
55140: LD_VAR 0 2
55144: NOT
55145: OR
55146: IFFALSE 55150
// exit ;
55148: GO 55812
// weapon := GetWeapon ( vehicle ) ;
55150: LD_ADDR_VAR 0 7
55154: PUSH
55155: LD_VAR 0 1
55159: PPUSH
55160: CALL_OW 264
55164: ST_TO_ADDR
// if weapon = ar_miner then
55165: LD_VAR 0 7
55169: PUSH
55170: LD_INT 81
55172: EQUAL
55173: IFFALSE 55230
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
55175: LD_ADDR_EXP 57
55179: PUSH
55180: LD_EXP 57
55184: PPUSH
55185: LD_EXP 57
55189: PUSH
55190: LD_INT 1
55192: PLUS
55193: PPUSH
55194: LD_VAR 0 1
55198: PPUSH
55199: CALL_OW 1
55203: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55204: LD_ADDR_EXP 58
55208: PUSH
55209: LD_EXP 58
55213: PPUSH
55214: LD_EXP 58
55218: PUSH
55219: LD_INT 1
55221: PLUS
55222: PPUSH
55223: EMPTY
55224: PPUSH
55225: CALL_OW 1
55229: ST_TO_ADDR
// end ; if not factoryWaypoints then
55230: LD_EXP 61
55234: NOT
55235: IFFALSE 55239
// exit ;
55237: GO 55812
// for i := 1 to Count ( factoryWaypoints ) do
55239: LD_ADDR_VAR 0 4
55243: PUSH
55244: DOUBLE
55245: LD_INT 1
55247: DEC
55248: ST_TO_ADDR
55249: LD_EXP 61
55253: PPUSH
55254: CALL 13574 0 1
55258: PUSH
55259: FOR_TO
55260: IFFALSE 55810
// if factoryWaypoints [ i ] [ 2 ] = factory then
55262: LD_EXP 61
55266: PUSH
55267: LD_VAR 0 4
55271: ARRAY
55272: PUSH
55273: LD_INT 2
55275: ARRAY
55276: PUSH
55277: LD_VAR 0 2
55281: EQUAL
55282: IFFALSE 55808
// begin if GetControl ( vehicle ) = control_manual then
55284: LD_VAR 0 1
55288: PPUSH
55289: CALL_OW 263
55293: PUSH
55294: LD_INT 1
55296: EQUAL
55297: IFFALSE 55661
// begin driver := IsDrivenBy ( vehicle ) ;
55299: LD_ADDR_VAR 0 5
55303: PUSH
55304: LD_VAR 0 1
55308: PPUSH
55309: CALL_OW 311
55313: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55314: LD_VAR 0 5
55318: PUSH
55319: LD_EXP 62
55323: IN
55324: IFTRUE 55338
55326: PUSH
55327: LD_VAR 0 1
55331: PUSH
55332: LD_EXP 62
55336: IN
55337: OR
55338: IFFALSE 55344
// exit ;
55340: POP
55341: POP
55342: GO 55812
// if not HasTask ( driver ) then
55344: LD_VAR 0 5
55348: PPUSH
55349: CALL_OW 314
55353: NOT
55354: IFFALSE 55659
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55356: LD_ADDR_EXP 62
55360: PUSH
55361: LD_EXP 62
55365: PPUSH
55366: LD_VAR 0 5
55370: PPUSH
55371: CALL 49550 0 2
55375: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55376: LD_ADDR_EXP 62
55380: PUSH
55381: LD_EXP 62
55385: PPUSH
55386: LD_VAR 0 1
55390: PPUSH
55391: CALL 49550 0 2
55395: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55396: LD_ADDR_VAR 0 6
55400: PUSH
55401: LD_EXP 61
55405: PUSH
55406: LD_VAR 0 4
55410: ARRAY
55411: PUSH
55412: LD_INT 3
55414: ARRAY
55415: PPUSH
55416: LD_EXP 61
55420: PUSH
55421: LD_VAR 0 4
55425: ARRAY
55426: PUSH
55427: LD_INT 4
55429: ARRAY
55430: PPUSH
55431: CALL_OW 428
55435: ST_TO_ADDR
// if hex then
55436: LD_VAR 0 6
55440: IFFALSE 55458
// ComMoveUnit ( driver , hex ) else
55442: LD_VAR 0 5
55446: PPUSH
55447: LD_VAR 0 6
55451: PPUSH
55452: CALL_OW 112
55456: GO 55542
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55458: LD_VAR 0 1
55462: PPUSH
55463: LD_EXP 61
55467: PUSH
55468: LD_VAR 0 4
55472: ARRAY
55473: PUSH
55474: LD_INT 3
55476: ARRAY
55477: PPUSH
55478: LD_EXP 61
55482: PUSH
55483: LD_VAR 0 4
55487: ARRAY
55488: PUSH
55489: LD_INT 4
55491: ARRAY
55492: PPUSH
55493: CALL_OW 297
55497: PUSH
55498: LD_INT 0
55500: GREATER
55501: IFFALSE 55542
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55503: LD_VAR 0 5
55507: PPUSH
55508: LD_EXP 61
55512: PUSH
55513: LD_VAR 0 4
55517: ARRAY
55518: PUSH
55519: LD_INT 3
55521: ARRAY
55522: PPUSH
55523: LD_EXP 61
55527: PUSH
55528: LD_VAR 0 4
55532: ARRAY
55533: PUSH
55534: LD_INT 4
55536: ARRAY
55537: PPUSH
55538: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55542: LD_VAR 0 5
55546: PPUSH
55547: CALL_OW 181
// if Multiplayer then
55551: LD_OWVAR 4
55555: IFFALSE 55604
// begin repeat wait ( 10 ) ;
55557: LD_INT 10
55559: PPUSH
55560: CALL_OW 67
// until not IsInUnit ( driver ) ;
55564: LD_VAR 0 5
55568: PPUSH
55569: CALL_OW 310
55573: NOT
55574: IFFALSE 55557
// if not HasTask ( driver ) then
55576: LD_VAR 0 5
55580: PPUSH
55581: CALL_OW 314
55585: NOT
55586: IFFALSE 55602
// ComEnterUnit ( driver , factory ) ;
55588: LD_VAR 0 5
55592: PPUSH
55593: LD_VAR 0 2
55597: PPUSH
55598: CALL_OW 120
// end else
55602: GO 55618
// AddComEnterUnit ( driver , factory ) ;
55604: LD_VAR 0 5
55608: PPUSH
55609: LD_VAR 0 2
55613: PPUSH
55614: CALL_OW 180
// wait ( 0 0$1 ) ;
55618: LD_INT 35
55620: PPUSH
55621: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55625: LD_ADDR_EXP 62
55629: PUSH
55630: LD_EXP 62
55634: PUSH
55635: LD_VAR 0 5
55639: DIFF
55640: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55641: LD_ADDR_EXP 62
55645: PUSH
55646: LD_EXP 62
55650: PUSH
55651: LD_VAR 0 1
55655: DIFF
55656: ST_TO_ADDR
// break ;
55657: GO 55810
// end ; end else
55659: GO 55808
// if GetControl ( vehicle ) = control_remote then
55661: LD_VAR 0 1
55665: PPUSH
55666: CALL_OW 263
55670: PUSH
55671: LD_INT 2
55673: EQUAL
55674: IFFALSE 55760
// begin wait ( 0 0$2 ) ;
55676: LD_INT 70
55678: PPUSH
55679: CALL_OW 67
// repeat wait ( 10 ) ;
55683: LD_INT 10
55685: PPUSH
55686: CALL_OW 67
// Connect ( vehicle ) ;
55690: LD_VAR 0 1
55694: PPUSH
55695: CALL 19852 0 1
// until IsControledBy ( vehicle ) ;
55699: LD_VAR 0 1
55703: PPUSH
55704: CALL_OW 312
55708: IFFALSE 55683
// wait ( 10 ) ;
55710: LD_INT 10
55712: PPUSH
55713: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55717: LD_VAR 0 1
55721: PPUSH
55722: LD_EXP 61
55726: PUSH
55727: LD_VAR 0 4
55731: ARRAY
55732: PUSH
55733: LD_INT 3
55735: ARRAY
55736: PPUSH
55737: LD_EXP 61
55741: PUSH
55742: LD_VAR 0 4
55746: ARRAY
55747: PUSH
55748: LD_INT 4
55750: ARRAY
55751: PPUSH
55752: CALL_OW 111
// break ;
55756: GO 55810
// end else
55758: GO 55808
// begin wait ( 0 0$3 ) ;
55760: LD_INT 105
55762: PPUSH
55763: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55767: LD_VAR 0 1
55771: PPUSH
55772: LD_EXP 61
55776: PUSH
55777: LD_VAR 0 4
55781: ARRAY
55782: PUSH
55783: LD_INT 3
55785: ARRAY
55786: PPUSH
55787: LD_EXP 61
55791: PUSH
55792: LD_VAR 0 4
55796: ARRAY
55797: PUSH
55798: LD_INT 4
55800: ARRAY
55801: PPUSH
55802: CALL_OW 111
// break ;
55806: GO 55810
// end ; end ;
55808: GO 55259
55810: POP
55811: POP
// end ;
55812: LD_VAR 0 3
55816: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55817: LD_INT 0
55819: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55820: LD_VAR 0 1
55824: PUSH
55825: LD_INT 250
55827: EQUAL
55828: IFFALSE 55845
55830: PUSH
55831: LD_VAR 0 2
55835: PPUSH
55836: CALL_OW 264
55840: PUSH
55841: LD_INT 81
55843: EQUAL
55844: AND
55845: IFFALSE 55866
// MinerPlaceMine ( unit , x , y ) ;
55847: LD_VAR 0 2
55851: PPUSH
55852: LD_VAR 0 4
55856: PPUSH
55857: LD_VAR 0 5
55861: PPUSH
55862: CALL 59212 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55866: LD_VAR 0 1
55870: PUSH
55871: LD_INT 251
55873: EQUAL
55874: IFFALSE 55891
55876: PUSH
55877: LD_VAR 0 2
55881: PPUSH
55882: CALL_OW 264
55886: PUSH
55887: LD_INT 81
55889: EQUAL
55890: AND
55891: IFFALSE 55912
// MinerDetonateMine ( unit , x , y ) ;
55893: LD_VAR 0 2
55897: PPUSH
55898: LD_VAR 0 4
55902: PPUSH
55903: LD_VAR 0 5
55907: PPUSH
55908: CALL 59619 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55912: LD_VAR 0 1
55916: PUSH
55917: LD_INT 252
55919: EQUAL
55920: IFFALSE 55937
55922: PUSH
55923: LD_VAR 0 2
55927: PPUSH
55928: CALL_OW 264
55932: PUSH
55933: LD_INT 81
55935: EQUAL
55936: AND
55937: IFFALSE 55958
// MinerCreateMinefield ( unit , x , y ) ;
55939: LD_VAR 0 2
55943: PPUSH
55944: LD_VAR 0 4
55948: PPUSH
55949: LD_VAR 0 5
55953: PPUSH
55954: CALL 59851 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55958: LD_VAR 0 1
55962: PUSH
55963: LD_INT 253
55965: EQUAL
55966: IFFALSE 55983
55968: PUSH
55969: LD_VAR 0 2
55973: PPUSH
55974: CALL_OW 257
55978: PUSH
55979: LD_INT 5
55981: EQUAL
55982: AND
55983: IFFALSE 56004
// ComBinocular ( unit , x , y ) ;
55985: LD_VAR 0 2
55989: PPUSH
55990: LD_VAR 0 4
55994: PPUSH
55995: LD_VAR 0 5
55999: PPUSH
56000: CALL 60226 0 3
// if selectedUnit then
56004: LD_VAR 0 3
56008: IFFALSE 56068
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56010: LD_VAR 0 1
56014: PUSH
56015: LD_INT 254
56017: EQUAL
56018: IFFALSE 56035
56020: PUSH
56021: LD_VAR 0 2
56025: PPUSH
56026: CALL_OW 264
56030: PUSH
56031: LD_INT 99
56033: EQUAL
56034: AND
56035: IFFALSE 56052
56037: PUSH
56038: LD_VAR 0 3
56042: PPUSH
56043: CALL_OW 263
56047: PUSH
56048: LD_INT 3
56050: EQUAL
56051: AND
56052: IFFALSE 56068
// HackDestroyVehicle ( unit , selectedUnit ) ;
56054: LD_VAR 0 2
56058: PPUSH
56059: LD_VAR 0 3
56063: PPUSH
56064: CALL 58402 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56068: LD_VAR 0 1
56072: PUSH
56073: LD_INT 255
56075: EQUAL
56076: IFFALSE 56100
56078: PUSH
56079: LD_VAR 0 2
56083: PPUSH
56084: CALL_OW 264
56088: PUSH
56089: LD_INT 14
56091: PUSH
56092: LD_INT 53
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: IN
56099: AND
56100: IFFALSE 56118
56102: PUSH
56103: LD_VAR 0 4
56107: PPUSH
56108: LD_VAR 0 5
56112: PPUSH
56113: CALL_OW 488
56117: AND
56118: IFFALSE 56142
// CutTreeXYR ( unit , x , y , 12 ) ;
56120: LD_VAR 0 2
56124: PPUSH
56125: LD_VAR 0 4
56129: PPUSH
56130: LD_VAR 0 5
56134: PPUSH
56135: LD_INT 12
56137: PPUSH
56138: CALL 56333 0 4
// if cmd = 256 then
56142: LD_VAR 0 1
56146: PUSH
56147: LD_INT 256
56149: EQUAL
56150: IFFALSE 56171
// SetFactoryWaypoint ( unit , x , y ) ;
56152: LD_VAR 0 2
56156: PPUSH
56157: LD_VAR 0 4
56161: PPUSH
56162: LD_VAR 0 5
56166: PPUSH
56167: CALL 63934 0 3
// if cmd = 257 then
56171: LD_VAR 0 1
56175: PUSH
56176: LD_INT 257
56178: EQUAL
56179: IFFALSE 56200
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56181: LD_VAR 0 2
56185: PPUSH
56186: LD_VAR 0 4
56190: PPUSH
56191: LD_VAR 0 5
56195: PPUSH
56196: CALL 64430 0 3
// if cmd = 258 then
56200: LD_VAR 0 1
56204: PUSH
56205: LD_INT 258
56207: EQUAL
56208: IFFALSE 56232
// BurnTreeXYR ( unit , x , y , 8 ) ;
56210: LD_VAR 0 2
56214: PPUSH
56215: LD_VAR 0 4
56219: PPUSH
56220: LD_VAR 0 5
56224: PPUSH
56225: LD_INT 8
56227: PPUSH
56228: CALL 56755 0 4
// end ;
56232: LD_VAR 0 6
56236: RET
// export function ComRadiation ( un ) ; var eff ; begin
56237: LD_INT 0
56239: PPUSH
56240: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56241: LD_VAR 0 1
56245: PPUSH
56246: CALL_OW 264
56250: PUSH
56251: LD_INT 91
56253: NONEQUAL
56254: IFFALSE 56258
// exit ;
56256: GO 56328
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56258: LD_INT 68
56260: PPUSH
56261: LD_VAR 0 1
56265: PPUSH
56266: CALL_OW 255
56270: PPUSH
56271: CALL_OW 321
56275: PUSH
56276: LD_INT 2
56278: EQUAL
56279: IFFALSE 56291
// eff := 50 else
56281: LD_ADDR_VAR 0 3
56285: PUSH
56286: LD_INT 50
56288: ST_TO_ADDR
56289: GO 56299
// eff := 25 ;
56291: LD_ADDR_VAR 0 3
56295: PUSH
56296: LD_INT 25
56298: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56299: LD_VAR 0 1
56303: PPUSH
56304: CALL_OW 250
56308: PPUSH
56309: LD_VAR 0 1
56313: PPUSH
56314: CALL_OW 251
56318: PPUSH
56319: LD_VAR 0 3
56323: PPUSH
56324: CALL_OW 495
// end ;
56328: LD_VAR 0 2
56332: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56333: LD_INT 0
56335: PPUSH
56336: PPUSH
56337: PPUSH
56338: PPUSH
56339: PPUSH
56340: PPUSH
56341: PPUSH
56342: PPUSH
56343: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56344: LD_VAR 0 1
56348: PPUSH
56349: CALL_OW 302
56353: NOT
56354: IFTRUE 56373
56356: PUSH
56357: LD_VAR 0 2
56361: PPUSH
56362: LD_VAR 0 3
56366: PPUSH
56367: CALL_OW 488
56371: NOT
56372: OR
56373: IFTRUE 56382
56375: PUSH
56376: LD_VAR 0 4
56380: NOT
56381: OR
56382: IFFALSE 56386
// exit ;
56384: GO 56750
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
56386: LD_VAR 0 1
56390: PPUSH
56391: CALL_OW 437
56395: PPUSH
56396: CALL 13574 0 1
56400: PUSH
56401: LD_INT 10
56403: GREATER
56404: IFFALSE 56408
// exit ;
56406: GO 56750
// list := [ ] ;
56408: LD_ADDR_VAR 0 13
56412: PUSH
56413: EMPTY
56414: ST_TO_ADDR
// if x - r < 0 then
56415: LD_VAR 0 2
56419: PUSH
56420: LD_VAR 0 4
56424: MINUS
56425: PUSH
56426: LD_INT 0
56428: LESS
56429: IFFALSE 56441
// min_x := 0 else
56431: LD_ADDR_VAR 0 7
56435: PUSH
56436: LD_INT 0
56438: ST_TO_ADDR
56439: GO 56457
// min_x := x - r ;
56441: LD_ADDR_VAR 0 7
56445: PUSH
56446: LD_VAR 0 2
56450: PUSH
56451: LD_VAR 0 4
56455: MINUS
56456: ST_TO_ADDR
// if y - r < 0 then
56457: LD_VAR 0 3
56461: PUSH
56462: LD_VAR 0 4
56466: MINUS
56467: PUSH
56468: LD_INT 0
56470: LESS
56471: IFFALSE 56483
// min_y := 0 else
56473: LD_ADDR_VAR 0 8
56477: PUSH
56478: LD_INT 0
56480: ST_TO_ADDR
56481: GO 56499
// min_y := y - r ;
56483: LD_ADDR_VAR 0 8
56487: PUSH
56488: LD_VAR 0 3
56492: PUSH
56493: LD_VAR 0 4
56497: MINUS
56498: ST_TO_ADDR
// max_x := x + r ;
56499: LD_ADDR_VAR 0 9
56503: PUSH
56504: LD_VAR 0 2
56508: PUSH
56509: LD_VAR 0 4
56513: PLUS
56514: ST_TO_ADDR
// max_y := y + r ;
56515: LD_ADDR_VAR 0 10
56519: PUSH
56520: LD_VAR 0 3
56524: PUSH
56525: LD_VAR 0 4
56529: PLUS
56530: ST_TO_ADDR
// for _x = min_x to max_x do
56531: LD_ADDR_VAR 0 11
56535: PUSH
56536: DOUBLE
56537: LD_VAR 0 7
56541: DEC
56542: ST_TO_ADDR
56543: LD_VAR 0 9
56547: PUSH
56548: FOR_TO
56549: IFFALSE 56668
// for _y = min_y to max_y do
56551: LD_ADDR_VAR 0 12
56555: PUSH
56556: DOUBLE
56557: LD_VAR 0 8
56561: DEC
56562: ST_TO_ADDR
56563: LD_VAR 0 10
56567: PUSH
56568: FOR_TO
56569: IFFALSE 56664
// begin if not ValidHex ( _x , _y ) then
56571: LD_VAR 0 11
56575: PPUSH
56576: LD_VAR 0 12
56580: PPUSH
56581: CALL_OW 488
56585: NOT
56586: IFFALSE 56590
// continue ;
56588: GO 56568
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56590: LD_VAR 0 11
56594: PPUSH
56595: LD_VAR 0 12
56599: PPUSH
56600: CALL_OW 351
56604: IFFALSE 56622
56606: PUSH
56607: LD_VAR 0 11
56611: PPUSH
56612: LD_VAR 0 12
56616: PPUSH
56617: CALL_OW 554
56621: AND
56622: IFFALSE 56662
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56624: LD_ADDR_VAR 0 13
56628: PUSH
56629: LD_VAR 0 13
56633: PPUSH
56634: LD_VAR 0 13
56638: PUSH
56639: LD_INT 1
56641: PLUS
56642: PPUSH
56643: LD_VAR 0 11
56647: PUSH
56648: LD_VAR 0 12
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PPUSH
56657: CALL_OW 2
56661: ST_TO_ADDR
// end ;
56662: GO 56568
56664: POP
56665: POP
56666: GO 56548
56668: POP
56669: POP
// if not list then
56670: LD_VAR 0 13
56674: NOT
56675: IFFALSE 56679
// exit ;
56677: GO 56750
// for i in list do
56679: LD_ADDR_VAR 0 6
56683: PUSH
56684: LD_VAR 0 13
56688: PUSH
56689: FOR_IN
56690: IFFALSE 56748
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56692: LD_VAR 0 1
56696: PPUSH
56697: LD_STRING M
56699: PUSH
56700: LD_VAR 0 6
56704: PUSH
56705: LD_INT 1
56707: ARRAY
56708: PUSH
56709: LD_VAR 0 6
56713: PUSH
56714: LD_INT 2
56716: ARRAY
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: PUSH
56739: EMPTY
56740: LIST
56741: PPUSH
56742: CALL_OW 447
56746: GO 56689
56748: POP
56749: POP
// end ;
56750: LD_VAR 0 5
56754: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56755: LD_INT 0
56757: PPUSH
56758: PPUSH
56759: PPUSH
56760: PPUSH
56761: PPUSH
56762: PPUSH
56763: PPUSH
56764: PPUSH
56765: PPUSH
56766: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56767: LD_VAR 0 1
56771: PPUSH
56772: CALL_OW 302
56776: NOT
56777: IFTRUE 56796
56779: PUSH
56780: LD_VAR 0 2
56784: PPUSH
56785: LD_VAR 0 3
56789: PPUSH
56790: CALL_OW 488
56794: NOT
56795: OR
56796: IFTRUE 56805
56798: PUSH
56799: LD_VAR 0 4
56803: NOT
56804: OR
56805: IFFALSE 56809
// exit ;
56807: GO 57348
// if Count ( GetTaskList ( flame ) ) > 10 then
56809: LD_VAR 0 1
56813: PPUSH
56814: CALL_OW 437
56818: PPUSH
56819: CALL 13574 0 1
56823: PUSH
56824: LD_INT 10
56826: GREATER
56827: IFFALSE 56831
// exit ;
56829: GO 57348
// list := [ ] ;
56831: LD_ADDR_VAR 0 13
56835: PUSH
56836: EMPTY
56837: ST_TO_ADDR
// if x - r < 0 then
56838: LD_VAR 0 2
56842: PUSH
56843: LD_VAR 0 4
56847: MINUS
56848: PUSH
56849: LD_INT 0
56851: LESS
56852: IFFALSE 56864
// min_x := 0 else
56854: LD_ADDR_VAR 0 7
56858: PUSH
56859: LD_INT 0
56861: ST_TO_ADDR
56862: GO 56880
// min_x := x - r ;
56864: LD_ADDR_VAR 0 7
56868: PUSH
56869: LD_VAR 0 2
56873: PUSH
56874: LD_VAR 0 4
56878: MINUS
56879: ST_TO_ADDR
// if y - r < 0 then
56880: LD_VAR 0 3
56884: PUSH
56885: LD_VAR 0 4
56889: MINUS
56890: PUSH
56891: LD_INT 0
56893: LESS
56894: IFFALSE 56906
// min_y := 0 else
56896: LD_ADDR_VAR 0 8
56900: PUSH
56901: LD_INT 0
56903: ST_TO_ADDR
56904: GO 56922
// min_y := y - r ;
56906: LD_ADDR_VAR 0 8
56910: PUSH
56911: LD_VAR 0 3
56915: PUSH
56916: LD_VAR 0 4
56920: MINUS
56921: ST_TO_ADDR
// max_x := x + r ;
56922: LD_ADDR_VAR 0 9
56926: PUSH
56927: LD_VAR 0 2
56931: PUSH
56932: LD_VAR 0 4
56936: PLUS
56937: ST_TO_ADDR
// max_y := y + r ;
56938: LD_ADDR_VAR 0 10
56942: PUSH
56943: LD_VAR 0 3
56947: PUSH
56948: LD_VAR 0 4
56952: PLUS
56953: ST_TO_ADDR
// for _x = min_x to max_x do
56954: LD_ADDR_VAR 0 11
56958: PUSH
56959: DOUBLE
56960: LD_VAR 0 7
56964: DEC
56965: ST_TO_ADDR
56966: LD_VAR 0 9
56970: PUSH
56971: FOR_TO
56972: IFFALSE 57091
// for _y = min_y to max_y do
56974: LD_ADDR_VAR 0 12
56978: PUSH
56979: DOUBLE
56980: LD_VAR 0 8
56984: DEC
56985: ST_TO_ADDR
56986: LD_VAR 0 10
56990: PUSH
56991: FOR_TO
56992: IFFALSE 57087
// begin if not ValidHex ( _x , _y ) then
56994: LD_VAR 0 11
56998: PPUSH
56999: LD_VAR 0 12
57003: PPUSH
57004: CALL_OW 488
57008: NOT
57009: IFFALSE 57013
// continue ;
57011: GO 56991
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57013: LD_VAR 0 11
57017: PPUSH
57018: LD_VAR 0 12
57022: PPUSH
57023: CALL_OW 351
57027: IFFALSE 57045
57029: PUSH
57030: LD_VAR 0 11
57034: PPUSH
57035: LD_VAR 0 12
57039: PPUSH
57040: CALL_OW 554
57044: AND
57045: IFFALSE 57085
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57047: LD_ADDR_VAR 0 13
57051: PUSH
57052: LD_VAR 0 13
57056: PPUSH
57057: LD_VAR 0 13
57061: PUSH
57062: LD_INT 1
57064: PLUS
57065: PPUSH
57066: LD_VAR 0 11
57070: PUSH
57071: LD_VAR 0 12
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PPUSH
57080: CALL_OW 2
57084: ST_TO_ADDR
// end ;
57085: GO 56991
57087: POP
57088: POP
57089: GO 56971
57091: POP
57092: POP
// if not list then
57093: LD_VAR 0 13
57097: NOT
57098: IFFALSE 57102
// exit ;
57100: GO 57348
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57102: LD_ADDR_VAR 0 13
57106: PUSH
57107: LD_VAR 0 1
57111: PPUSH
57112: LD_VAR 0 13
57116: PPUSH
57117: LD_INT 1
57119: PPUSH
57120: LD_INT 1
57122: PPUSH
57123: CALL 16980 0 4
57127: ST_TO_ADDR
// ComStop ( flame ) ;
57128: LD_VAR 0 1
57132: PPUSH
57133: CALL_OW 141
// for i in list do
57137: LD_ADDR_VAR 0 6
57141: PUSH
57142: LD_VAR 0 13
57146: PUSH
57147: FOR_IN
57148: IFFALSE 57179
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57150: LD_VAR 0 1
57154: PPUSH
57155: LD_VAR 0 6
57159: PUSH
57160: LD_INT 1
57162: ARRAY
57163: PPUSH
57164: LD_VAR 0 6
57168: PUSH
57169: LD_INT 2
57171: ARRAY
57172: PPUSH
57173: CALL_OW 176
57177: GO 57147
57179: POP
57180: POP
// repeat wait ( 0 0$1 ) ;
57181: LD_INT 35
57183: PPUSH
57184: CALL_OW 67
// task := GetTaskList ( flame ) ;
57188: LD_ADDR_VAR 0 14
57192: PUSH
57193: LD_VAR 0 1
57197: PPUSH
57198: CALL_OW 437
57202: ST_TO_ADDR
// if not task then
57203: LD_VAR 0 14
57207: NOT
57208: IFFALSE 57212
// exit ;
57210: GO 57348
// if task [ 1 ] [ 1 ] <> | then
57212: LD_VAR 0 14
57216: PUSH
57217: LD_INT 1
57219: ARRAY
57220: PUSH
57221: LD_INT 1
57223: ARRAY
57224: PUSH
57225: LD_STRING |
57227: NONEQUAL
57228: IFFALSE 57232
// exit ;
57230: GO 57348
// _x := task [ 1 ] [ 2 ] ;
57232: LD_ADDR_VAR 0 11
57236: PUSH
57237: LD_VAR 0 14
57241: PUSH
57242: LD_INT 1
57244: ARRAY
57245: PUSH
57246: LD_INT 2
57248: ARRAY
57249: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57250: LD_ADDR_VAR 0 12
57254: PUSH
57255: LD_VAR 0 14
57259: PUSH
57260: LD_INT 1
57262: ARRAY
57263: PUSH
57264: LD_INT 3
57266: ARRAY
57267: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57268: LD_VAR 0 11
57272: PPUSH
57273: LD_VAR 0 12
57277: PPUSH
57278: CALL_OW 351
57282: NOT
57283: IFTRUE 57302
57285: PUSH
57286: LD_VAR 0 11
57290: PPUSH
57291: LD_VAR 0 12
57295: PPUSH
57296: CALL_OW 554
57300: NOT
57301: OR
57302: IFFALSE 57336
// begin task := Delete ( task , 1 ) ;
57304: LD_ADDR_VAR 0 14
57308: PUSH
57309: LD_VAR 0 14
57313: PPUSH
57314: LD_INT 1
57316: PPUSH
57317: CALL_OW 3
57321: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57322: LD_VAR 0 1
57326: PPUSH
57327: LD_VAR 0 14
57331: PPUSH
57332: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57336: LD_VAR 0 1
57340: PPUSH
57341: CALL_OW 314
57345: NOT
57346: IFFALSE 57181
// end ;
57348: LD_VAR 0 5
57352: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57353: LD_EXP 50
57357: NOT
57358: IFFALSE 57408
57360: GO 57362
57362: DISABLE
// begin initHack := true ;
57363: LD_ADDR_EXP 50
57367: PUSH
57368: LD_INT 1
57370: ST_TO_ADDR
// hackTanks := [ ] ;
57371: LD_ADDR_EXP 51
57375: PUSH
57376: EMPTY
57377: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57378: LD_ADDR_EXP 52
57382: PUSH
57383: EMPTY
57384: ST_TO_ADDR
// hackLimit := 3 ;
57385: LD_ADDR_EXP 53
57389: PUSH
57390: LD_INT 3
57392: ST_TO_ADDR
// hackDist := 12 ;
57393: LD_ADDR_EXP 54
57397: PUSH
57398: LD_INT 12
57400: ST_TO_ADDR
// hackCounter := [ ] ;
57401: LD_ADDR_EXP 55
57405: PUSH
57406: EMPTY
57407: ST_TO_ADDR
// end ;
57408: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57409: LD_EXP 50
57413: IFFALSE 57431
57415: PUSH
57416: LD_INT 34
57418: PUSH
57419: LD_INT 99
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PPUSH
57426: CALL_OW 69
57430: AND
57431: IFFALSE 57684
57433: GO 57435
57435: DISABLE
57436: LD_INT 0
57438: PPUSH
57439: PPUSH
// begin enable ;
57440: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57441: LD_ADDR_VAR 0 1
57445: PUSH
57446: LD_INT 34
57448: PUSH
57449: LD_INT 99
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PPUSH
57456: CALL_OW 69
57460: PUSH
57461: FOR_IN
57462: IFFALSE 57682
// begin if not i in hackTanks then
57464: LD_VAR 0 1
57468: PUSH
57469: LD_EXP 51
57473: IN
57474: NOT
57475: IFFALSE 57558
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57477: LD_ADDR_EXP 51
57481: PUSH
57482: LD_EXP 51
57486: PPUSH
57487: LD_EXP 51
57491: PUSH
57492: LD_INT 1
57494: PLUS
57495: PPUSH
57496: LD_VAR 0 1
57500: PPUSH
57501: CALL_OW 1
57505: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57506: LD_ADDR_EXP 52
57510: PUSH
57511: LD_EXP 52
57515: PPUSH
57516: LD_EXP 52
57520: PUSH
57521: LD_INT 1
57523: PLUS
57524: PPUSH
57525: EMPTY
57526: PPUSH
57527: CALL_OW 1
57531: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57532: LD_ADDR_EXP 55
57536: PUSH
57537: LD_EXP 55
57541: PPUSH
57542: LD_EXP 55
57546: PUSH
57547: LD_INT 1
57549: PLUS
57550: PPUSH
57551: EMPTY
57552: PPUSH
57553: CALL_OW 1
57557: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57558: LD_VAR 0 1
57562: PPUSH
57563: CALL_OW 302
57567: NOT
57568: IFFALSE 57581
// begin HackUnlinkAll ( i ) ;
57570: LD_VAR 0 1
57574: PPUSH
57575: CALL 57687 0 1
// continue ;
57579: GO 57461
// end ; HackCheckCapturedStatus ( i ) ;
57581: LD_VAR 0 1
57585: PPUSH
57586: CALL 58132 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57590: LD_ADDR_VAR 0 2
57594: PUSH
57595: LD_INT 81
57597: PUSH
57598: LD_VAR 0 1
57602: PPUSH
57603: CALL_OW 255
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 33
57614: PUSH
57615: LD_INT 3
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 91
57624: PUSH
57625: LD_VAR 0 1
57629: PUSH
57630: LD_EXP 54
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 50
57642: PUSH
57643: EMPTY
57644: LIST
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: PPUSH
57652: CALL_OW 69
57656: ST_TO_ADDR
// if not tmp then
57657: LD_VAR 0 2
57661: NOT
57662: IFFALSE 57666
// continue ;
57664: GO 57461
// HackLink ( i , tmp ) ;
57666: LD_VAR 0 1
57670: PPUSH
57671: LD_VAR 0 2
57675: PPUSH
57676: CALL 57823 0 2
// end ;
57680: GO 57461
57682: POP
57683: POP
// end ;
57684: PPOPN 2
57686: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57687: LD_INT 0
57689: PPUSH
57690: PPUSH
57691: PPUSH
// if not hack in hackTanks then
57692: LD_VAR 0 1
57696: PUSH
57697: LD_EXP 51
57701: IN
57702: NOT
57703: IFFALSE 57707
// exit ;
57705: GO 57818
// index := GetElementIndex ( hackTanks , hack ) ;
57707: LD_ADDR_VAR 0 4
57711: PUSH
57712: LD_EXP 51
57716: PPUSH
57717: LD_VAR 0 1
57721: PPUSH
57722: CALL 16275 0 2
57726: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57727: LD_EXP 52
57731: PUSH
57732: LD_VAR 0 4
57736: ARRAY
57737: IFFALSE 57818
// begin for i in hackTanksCaptured [ index ] do
57739: LD_ADDR_VAR 0 3
57743: PUSH
57744: LD_EXP 52
57748: PUSH
57749: LD_VAR 0 4
57753: ARRAY
57754: PUSH
57755: FOR_IN
57756: IFFALSE 57782
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57758: LD_VAR 0 3
57762: PUSH
57763: LD_INT 1
57765: ARRAY
57766: PPUSH
57767: LD_VAR 0 3
57771: PUSH
57772: LD_INT 2
57774: ARRAY
57775: PPUSH
57776: CALL_OW 235
57780: GO 57755
57782: POP
57783: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57784: LD_ADDR_EXP 52
57788: PUSH
57789: LD_EXP 52
57793: PPUSH
57794: LD_VAR 0 4
57798: PPUSH
57799: EMPTY
57800: PPUSH
57801: CALL_OW 1
57805: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57806: LD_VAR 0 1
57810: PPUSH
57811: LD_INT 0
57813: PPUSH
57814: CALL_OW 505
// end ; end ;
57818: LD_VAR 0 2
57822: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57823: LD_INT 0
57825: PPUSH
57826: PPUSH
57827: PPUSH
// if not hack in hackTanks or not vehicles then
57828: LD_VAR 0 1
57832: PUSH
57833: LD_EXP 51
57837: IN
57838: NOT
57839: IFTRUE 57848
57841: PUSH
57842: LD_VAR 0 2
57846: NOT
57847: OR
57848: IFFALSE 57852
// exit ;
57850: GO 58127
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57852: LD_ADDR_VAR 0 2
57856: PUSH
57857: LD_VAR 0 1
57861: PPUSH
57862: LD_VAR 0 2
57866: PPUSH
57867: LD_INT 1
57869: PPUSH
57870: LD_INT 1
57872: PPUSH
57873: CALL 16927 0 4
57877: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57878: LD_ADDR_VAR 0 5
57882: PUSH
57883: LD_EXP 51
57887: PPUSH
57888: LD_VAR 0 1
57892: PPUSH
57893: CALL 16275 0 2
57897: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57898: LD_EXP 52
57902: PUSH
57903: LD_VAR 0 5
57907: ARRAY
57908: PUSH
57909: LD_EXP 53
57913: LESS
57914: IFFALSE 58103
// begin for i := 1 to vehicles do
57916: LD_ADDR_VAR 0 4
57920: PUSH
57921: DOUBLE
57922: LD_INT 1
57924: DEC
57925: ST_TO_ADDR
57926: LD_VAR 0 2
57930: PUSH
57931: FOR_TO
57932: IFFALSE 58101
// begin if hackTanksCaptured [ index ] = hackLimit then
57934: LD_EXP 52
57938: PUSH
57939: LD_VAR 0 5
57943: ARRAY
57944: PUSH
57945: LD_EXP 53
57949: EQUAL
57950: IFFALSE 57954
// break ;
57952: GO 58101
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57954: LD_ADDR_EXP 55
57958: PUSH
57959: LD_EXP 55
57963: PPUSH
57964: LD_VAR 0 5
57968: PPUSH
57969: LD_EXP 55
57973: PUSH
57974: LD_VAR 0 5
57978: ARRAY
57979: PUSH
57980: LD_INT 1
57982: PLUS
57983: PPUSH
57984: CALL_OW 1
57988: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57989: LD_ADDR_EXP 52
57993: PUSH
57994: LD_EXP 52
57998: PPUSH
57999: LD_VAR 0 5
58003: PUSH
58004: LD_EXP 52
58008: PUSH
58009: LD_VAR 0 5
58013: ARRAY
58014: PUSH
58015: LD_INT 1
58017: PLUS
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PPUSH
58023: LD_VAR 0 2
58027: PUSH
58028: LD_VAR 0 4
58032: ARRAY
58033: PUSH
58034: LD_VAR 0 2
58038: PUSH
58039: LD_VAR 0 4
58043: ARRAY
58044: PPUSH
58045: CALL_OW 255
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PPUSH
58054: CALL 16492 0 3
58058: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58059: LD_VAR 0 2
58063: PUSH
58064: LD_VAR 0 4
58068: ARRAY
58069: PPUSH
58070: LD_VAR 0 1
58074: PPUSH
58075: CALL_OW 255
58079: PPUSH
58080: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58084: LD_VAR 0 2
58088: PUSH
58089: LD_VAR 0 4
58093: ARRAY
58094: PPUSH
58095: CALL_OW 141
// end ;
58099: GO 57931
58101: POP
58102: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58103: LD_VAR 0 1
58107: PPUSH
58108: LD_EXP 52
58112: PUSH
58113: LD_VAR 0 5
58117: ARRAY
58118: PUSH
58119: LD_INT 0
58121: PLUS
58122: PPUSH
58123: CALL_OW 505
// end ;
58127: LD_VAR 0 3
58131: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58132: LD_INT 0
58134: PPUSH
58135: PPUSH
58136: PPUSH
58137: PPUSH
// if not hack in hackTanks then
58138: LD_VAR 0 1
58142: PUSH
58143: LD_EXP 51
58147: IN
58148: NOT
58149: IFFALSE 58153
// exit ;
58151: GO 58397
// index := GetElementIndex ( hackTanks , hack ) ;
58153: LD_ADDR_VAR 0 4
58157: PUSH
58158: LD_EXP 51
58162: PPUSH
58163: LD_VAR 0 1
58167: PPUSH
58168: CALL 16275 0 2
58172: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58173: LD_ADDR_VAR 0 3
58177: PUSH
58178: DOUBLE
58179: LD_EXP 52
58183: PUSH
58184: LD_VAR 0 4
58188: ARRAY
58189: INC
58190: ST_TO_ADDR
58191: LD_INT 1
58193: PUSH
58194: FOR_DOWNTO
58195: IFFALSE 58371
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58197: LD_ADDR_VAR 0 5
58201: PUSH
58202: LD_EXP 52
58206: PUSH
58207: LD_VAR 0 4
58211: ARRAY
58212: PUSH
58213: LD_VAR 0 3
58217: ARRAY
58218: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58219: LD_VAR 0 5
58223: PUSH
58224: LD_INT 1
58226: ARRAY
58227: PPUSH
58228: CALL_OW 302
58232: NOT
58233: IFTRUE 58261
58235: PUSH
58236: LD_VAR 0 5
58240: PUSH
58241: LD_INT 1
58243: ARRAY
58244: PPUSH
58245: CALL_OW 255
58249: PUSH
58250: LD_VAR 0 1
58254: PPUSH
58255: CALL_OW 255
58259: NONEQUAL
58260: OR
58261: IFFALSE 58369
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58263: LD_VAR 0 5
58267: PUSH
58268: LD_INT 1
58270: ARRAY
58271: PPUSH
58272: CALL_OW 305
58276: IFFALSE 58304
58278: PUSH
58279: LD_VAR 0 5
58283: PUSH
58284: LD_INT 1
58286: ARRAY
58287: PPUSH
58288: CALL_OW 255
58292: PUSH
58293: LD_VAR 0 1
58297: PPUSH
58298: CALL_OW 255
58302: EQUAL
58303: AND
58304: IFFALSE 58328
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58306: LD_VAR 0 5
58310: PUSH
58311: LD_INT 1
58313: ARRAY
58314: PPUSH
58315: LD_VAR 0 5
58319: PUSH
58320: LD_INT 2
58322: ARRAY
58323: PPUSH
58324: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58328: LD_ADDR_EXP 52
58332: PUSH
58333: LD_EXP 52
58337: PPUSH
58338: LD_VAR 0 4
58342: PPUSH
58343: LD_EXP 52
58347: PUSH
58348: LD_VAR 0 4
58352: ARRAY
58353: PPUSH
58354: LD_VAR 0 3
58358: PPUSH
58359: CALL_OW 3
58363: PPUSH
58364: CALL_OW 1
58368: ST_TO_ADDR
// end ; end ;
58369: GO 58194
58371: POP
58372: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58373: LD_VAR 0 1
58377: PPUSH
58378: LD_EXP 52
58382: PUSH
58383: LD_VAR 0 4
58387: ARRAY
58388: PUSH
58389: LD_INT 0
58391: PLUS
58392: PPUSH
58393: CALL_OW 505
// end ;
58397: LD_VAR 0 2
58401: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58402: LD_INT 0
58404: PPUSH
58405: PPUSH
58406: PPUSH
58407: PPUSH
// if not hack in hackTanks then
58408: LD_VAR 0 1
58412: PUSH
58413: LD_EXP 51
58417: IN
58418: NOT
58419: IFFALSE 58423
// exit ;
58421: GO 58508
// index := GetElementIndex ( hackTanks , hack ) ;
58423: LD_ADDR_VAR 0 5
58427: PUSH
58428: LD_EXP 51
58432: PPUSH
58433: LD_VAR 0 1
58437: PPUSH
58438: CALL 16275 0 2
58442: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58443: LD_ADDR_VAR 0 4
58447: PUSH
58448: DOUBLE
58449: LD_INT 1
58451: DEC
58452: ST_TO_ADDR
58453: LD_EXP 52
58457: PUSH
58458: LD_VAR 0 5
58462: ARRAY
58463: PUSH
58464: FOR_TO
58465: IFFALSE 58506
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58467: LD_EXP 52
58471: PUSH
58472: LD_VAR 0 5
58476: ARRAY
58477: PUSH
58478: LD_VAR 0 4
58482: ARRAY
58483: PUSH
58484: LD_INT 1
58486: ARRAY
58487: PUSH
58488: LD_VAR 0 2
58492: EQUAL
58493: IFFALSE 58504
// KillUnit ( vehicle ) ;
58495: LD_VAR 0 2
58499: PPUSH
58500: CALL_OW 66
58504: GO 58464
58506: POP
58507: POP
// end ;
58508: LD_VAR 0 3
58512: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
58513: LD_EXP 56
58517: NOT
58518: IFFALSE 58651
58520: GO 58522
58522: DISABLE
58523: LD_INT 0
58525: PPUSH
// begin initMiner := true ;
58526: LD_ADDR_EXP 56
58530: PUSH
58531: LD_INT 1
58533: ST_TO_ADDR
// minersList := [ ] ;
58534: LD_ADDR_EXP 57
58538: PUSH
58539: EMPTY
58540: ST_TO_ADDR
// minerMinesList := [ ] ;
58541: LD_ADDR_EXP 58
58545: PUSH
58546: EMPTY
58547: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
58548: LD_ADDR_EXP 59
58552: PUSH
58553: LD_INT 10
58555: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58556: LD_ADDR_VAR 0 1
58560: PUSH
58561: LD_INT 34
58563: PUSH
58564: LD_INT 81
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PPUSH
58571: CALL_OW 69
58575: PUSH
58576: FOR_IN
58577: IFFALSE 58649
// begin if not i in minersList then
58579: LD_VAR 0 1
58583: PUSH
58584: LD_EXP 57
58588: IN
58589: NOT
58590: IFFALSE 58647
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58592: LD_ADDR_EXP 57
58596: PUSH
58597: LD_EXP 57
58601: PPUSH
58602: LD_EXP 57
58606: PUSH
58607: LD_INT 1
58609: PLUS
58610: PPUSH
58611: LD_VAR 0 1
58615: PPUSH
58616: CALL_OW 1
58620: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58621: LD_ADDR_EXP 58
58625: PUSH
58626: LD_EXP 58
58630: PPUSH
58631: LD_EXP 58
58635: PUSH
58636: LD_INT 1
58638: PLUS
58639: PPUSH
58640: EMPTY
58641: PPUSH
58642: CALL_OW 1
58646: ST_TO_ADDR
// end end ;
58647: GO 58576
58649: POP
58650: POP
// end ;
58651: PPOPN 1
58653: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
58654: LD_EXP 56
58658: IFFALSE 58689
58660: PUSH
58661: LD_EXP 58
58665: PPUSH
58666: CALL 13574 0 1
58670: IFTRUE 58688
58672: PUSH
58673: LD_INT 34
58675: PUSH
58676: LD_INT 81
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PPUSH
58683: CALL_OW 69
58687: OR
58688: AND
58689: IFFALSE 59209
58691: GO 58693
58693: DISABLE
58694: LD_INT 0
58696: PPUSH
58697: PPUSH
58698: PPUSH
58699: PPUSH
// begin enable ;
58700: ENABLE
// for i := minerMinesList downto 1 do
58701: LD_ADDR_VAR 0 1
58705: PUSH
58706: DOUBLE
58707: LD_EXP 58
58711: INC
58712: ST_TO_ADDR
58713: LD_INT 1
58715: PUSH
58716: FOR_DOWNTO
58717: IFFALSE 59207
// begin side := GetSide ( minersList [ i ] ) ;
58719: LD_ADDR_VAR 0 3
58723: PUSH
58724: LD_EXP 57
58728: PUSH
58729: LD_VAR 0 1
58733: ARRAY
58734: PPUSH
58735: CALL_OW 255
58739: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
58740: LD_EXP 57
58744: PUSH
58745: LD_VAR 0 1
58749: ARRAY
58750: PPUSH
58751: CALL_OW 300
58755: IFFALSE 58776
58757: PUSH
58758: LD_VAR 0 3
58762: PUSH
58763: LD_OWVAR 2
58767: PUSH
58768: LD_INT 9
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: IN
58775: AND
58776: IFFALSE 58809
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58778: LD_EXP 57
58782: PUSH
58783: LD_VAR 0 1
58787: ARRAY
58788: PPUSH
58789: LD_EXP 58
58793: PUSH
58794: LD_VAR 0 1
58798: ARRAY
58799: PPUSH
58800: CALL 13574 0 1
58804: PPUSH
58805: CALL_OW 505
// if not minerMinesList [ i ] then
58809: LD_EXP 58
58813: PUSH
58814: LD_VAR 0 1
58818: ARRAY
58819: NOT
58820: IFFALSE 58824
// continue ;
58822: GO 58716
// for j := minerMinesList [ i ] downto 1 do
58824: LD_ADDR_VAR 0 2
58828: PUSH
58829: DOUBLE
58830: LD_EXP 58
58834: PUSH
58835: LD_VAR 0 1
58839: ARRAY
58840: INC
58841: ST_TO_ADDR
58842: LD_INT 1
58844: PUSH
58845: FOR_DOWNTO
58846: IFFALSE 59203
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58848: LD_EXP 57
58852: PUSH
58853: LD_VAR 0 1
58857: ARRAY
58858: PPUSH
58859: CALL_OW 301
58863: IFTRUE 58883
58865: PUSH
58866: LD_EXP 57
58870: PUSH
58871: LD_VAR 0 1
58875: ARRAY
58876: PPUSH
58877: CALL_OW 305
58881: NOT
58882: OR
58883: IFFALSE 58974
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58885: LD_EXP 58
58889: PUSH
58890: LD_VAR 0 1
58894: ARRAY
58895: PUSH
58896: LD_VAR 0 2
58900: ARRAY
58901: PUSH
58902: LD_INT 1
58904: ARRAY
58905: PPUSH
58906: LD_EXP 58
58910: PUSH
58911: LD_VAR 0 1
58915: ARRAY
58916: PUSH
58917: LD_VAR 0 2
58921: ARRAY
58922: PUSH
58923: LD_INT 2
58925: ARRAY
58926: PPUSH
58927: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58931: LD_ADDR_EXP 58
58935: PUSH
58936: LD_EXP 58
58940: PPUSH
58941: LD_VAR 0 1
58945: PPUSH
58946: LD_EXP 58
58950: PUSH
58951: LD_VAR 0 1
58955: ARRAY
58956: PPUSH
58957: LD_VAR 0 2
58961: PPUSH
58962: CALL_OW 3
58966: PPUSH
58967: CALL_OW 1
58971: ST_TO_ADDR
// continue ;
58972: GO 58845
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58974: LD_ADDR_VAR 0 4
58978: PUSH
58979: LD_EXP 58
58983: PUSH
58984: LD_VAR 0 1
58988: ARRAY
58989: PUSH
58990: LD_VAR 0 2
58994: ARRAY
58995: PUSH
58996: LD_INT 1
58998: ARRAY
58999: PPUSH
59000: LD_EXP 58
59004: PUSH
59005: LD_VAR 0 1
59009: ARRAY
59010: PUSH
59011: LD_VAR 0 2
59015: ARRAY
59016: PUSH
59017: LD_INT 2
59019: ARRAY
59020: PPUSH
59021: CALL_OW 428
59025: ST_TO_ADDR
// if not tmp then
59026: LD_VAR 0 4
59030: NOT
59031: IFFALSE 59035
// continue ;
59033: GO 58845
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59035: LD_VAR 0 4
59039: PUSH
59040: LD_INT 81
59042: PUSH
59043: LD_VAR 0 3
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PPUSH
59052: CALL_OW 69
59056: IN
59057: IFFALSE 59107
59059: PUSH
59060: LD_EXP 58
59064: PUSH
59065: LD_VAR 0 1
59069: ARRAY
59070: PUSH
59071: LD_VAR 0 2
59075: ARRAY
59076: PUSH
59077: LD_INT 1
59079: ARRAY
59080: PPUSH
59081: LD_EXP 58
59085: PUSH
59086: LD_VAR 0 1
59090: ARRAY
59091: PUSH
59092: LD_VAR 0 2
59096: ARRAY
59097: PUSH
59098: LD_INT 2
59100: ARRAY
59101: PPUSH
59102: CALL_OW 458
59106: AND
59107: IFFALSE 59201
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59109: LD_EXP 58
59113: PUSH
59114: LD_VAR 0 1
59118: ARRAY
59119: PUSH
59120: LD_VAR 0 2
59124: ARRAY
59125: PUSH
59126: LD_INT 1
59128: ARRAY
59129: PPUSH
59130: LD_EXP 58
59134: PUSH
59135: LD_VAR 0 1
59139: ARRAY
59140: PUSH
59141: LD_VAR 0 2
59145: ARRAY
59146: PUSH
59147: LD_INT 2
59149: ARRAY
59150: PPUSH
59151: LD_VAR 0 3
59155: PPUSH
59156: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59160: LD_ADDR_EXP 58
59164: PUSH
59165: LD_EXP 58
59169: PPUSH
59170: LD_VAR 0 1
59174: PPUSH
59175: LD_EXP 58
59179: PUSH
59180: LD_VAR 0 1
59184: ARRAY
59185: PPUSH
59186: LD_VAR 0 2
59190: PPUSH
59191: CALL_OW 3
59195: PPUSH
59196: CALL_OW 1
59200: ST_TO_ADDR
// end ; end ;
59201: GO 58845
59203: POP
59204: POP
// end ;
59205: GO 58716
59207: POP
59208: POP
// end ;
59209: PPOPN 4
59211: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
59212: LD_INT 0
59214: PPUSH
59215: PPUSH
59216: PPUSH
59217: PPUSH
// result := false ;
59218: LD_ADDR_VAR 0 4
59222: PUSH
59223: LD_INT 0
59225: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59226: LD_VAR 0 1
59230: PPUSH
59231: CALL_OW 264
59235: PUSH
59236: LD_INT 81
59238: EQUAL
59239: NOT
59240: IFFALSE 59244
// exit ;
59242: GO 59614
// side := GetSide ( unit ) ;
59244: LD_ADDR_VAR 0 6
59248: PUSH
59249: LD_VAR 0 1
59253: PPUSH
59254: CALL_OW 255
59258: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
59259: LD_ADDR_VAR 0 5
59263: PUSH
59264: LD_EXP 57
59268: PPUSH
59269: LD_VAR 0 1
59273: PPUSH
59274: CALL 16275 0 2
59278: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59279: LD_EXP 58
59283: PUSH
59284: LD_VAR 0 5
59288: ARRAY
59289: PUSH
59290: LD_EXP 59
59294: GREATEREQUAL
59295: IFFALSE 59299
// exit ;
59297: GO 59614
// ComMoveXY ( unit , x , y ) ;
59299: LD_VAR 0 1
59303: PPUSH
59304: LD_VAR 0 2
59308: PPUSH
59309: LD_VAR 0 3
59313: PPUSH
59314: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59318: LD_INT 35
59320: PPUSH
59321: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59325: LD_VAR 0 1
59329: PPUSH
59330: LD_VAR 0 2
59334: PPUSH
59335: LD_VAR 0 3
59339: PPUSH
59340: CALL 48331 0 3
59344: NOT
59345: IFFALSE 59358
59347: PUSH
59348: LD_VAR 0 1
59352: PPUSH
59353: CALL_OW 314
59357: AND
59358: IFFALSE 59362
// exit ;
59360: GO 59614
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59362: LD_VAR 0 2
59366: PPUSH
59367: LD_VAR 0 3
59371: PPUSH
59372: CALL_OW 428
59376: PUSH
59377: LD_VAR 0 1
59381: EQUAL
59382: IFFALSE 59396
59384: PUSH
59385: LD_VAR 0 1
59389: PPUSH
59390: CALL_OW 314
59394: NOT
59395: AND
59396: IFFALSE 59318
// if MineAtPos ( x , y ) then
59398: LD_VAR 0 2
59402: PPUSH
59403: LD_VAR 0 3
59407: PPUSH
59408: CALL_OW 458
59412: IFFALSE 59416
// exit ;
59414: GO 59614
// if your_side = side then
59416: LD_OWVAR 2
59420: PUSH
59421: LD_VAR 0 6
59425: EQUAL
59426: IFFALSE 59445
// PlaySoundXY ( x , y , PlantMine ) ;
59428: LD_VAR 0 2
59432: PPUSH
59433: LD_VAR 0 3
59437: PPUSH
59438: LD_STRING PlantMine
59440: PPUSH
59441: CALL_OW 366
// repeat wait ( 1 ) ;
59445: LD_INT 1
59447: PPUSH
59448: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
59452: LD_VAR 0 2
59456: PPUSH
59457: LD_VAR 0 3
59461: PPUSH
59462: LD_VAR 0 6
59466: PPUSH
59467: LD_INT 0
59469: PPUSH
59470: CALL_OW 454
59474: IFFALSE 59445
// if MineAtPos ( x , y ) then
59476: LD_VAR 0 2
59480: PPUSH
59481: LD_VAR 0 3
59485: PPUSH
59486: CALL_OW 458
59490: IFFALSE 59606
// begin for i in minerMinesList [ index ] do
59492: LD_ADDR_VAR 0 7
59496: PUSH
59497: LD_EXP 58
59501: PUSH
59502: LD_VAR 0 5
59506: ARRAY
59507: PUSH
59508: FOR_IN
59509: IFFALSE 59551
// if i [ 1 ] = x and i [ 2 ] = y then
59511: LD_VAR 0 7
59515: PUSH
59516: LD_INT 1
59518: ARRAY
59519: PUSH
59520: LD_VAR 0 2
59524: EQUAL
59525: IFFALSE 59543
59527: PUSH
59528: LD_VAR 0 7
59532: PUSH
59533: LD_INT 2
59535: ARRAY
59536: PUSH
59537: LD_VAR 0 3
59541: EQUAL
59542: AND
59543: IFFALSE 59549
// exit ;
59545: POP
59546: POP
59547: GO 59614
59549: GO 59508
59551: POP
59552: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59553: LD_ADDR_EXP 58
59557: PUSH
59558: LD_EXP 58
59562: PPUSH
59563: LD_VAR 0 5
59567: PUSH
59568: LD_EXP 58
59572: PUSH
59573: LD_VAR 0 5
59577: ARRAY
59578: PUSH
59579: LD_INT 1
59581: PLUS
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PPUSH
59587: LD_VAR 0 2
59591: PUSH
59592: LD_VAR 0 3
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PPUSH
59601: CALL 16492 0 3
59605: ST_TO_ADDR
// end ; result := true ;
59606: LD_ADDR_VAR 0 4
59610: PUSH
59611: LD_INT 1
59613: ST_TO_ADDR
// end ;
59614: LD_VAR 0 4
59618: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59619: LD_INT 0
59621: PPUSH
59622: PPUSH
59623: PPUSH
// if not unit in minersList then
59624: LD_VAR 0 1
59628: PUSH
59629: LD_EXP 57
59633: IN
59634: NOT
59635: IFFALSE 59639
// exit ;
59637: GO 59846
// index := GetElementIndex ( minersList , unit ) ;
59639: LD_ADDR_VAR 0 6
59643: PUSH
59644: LD_EXP 57
59648: PPUSH
59649: LD_VAR 0 1
59653: PPUSH
59654: CALL 16275 0 2
59658: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59659: LD_ADDR_VAR 0 5
59663: PUSH
59664: DOUBLE
59665: LD_EXP 58
59669: PUSH
59670: LD_VAR 0 6
59674: ARRAY
59675: INC
59676: ST_TO_ADDR
59677: LD_INT 1
59679: PUSH
59680: FOR_DOWNTO
59681: IFFALSE 59844
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59683: LD_EXP 58
59687: PUSH
59688: LD_VAR 0 6
59692: ARRAY
59693: PUSH
59694: LD_VAR 0 5
59698: ARRAY
59699: PUSH
59700: LD_INT 1
59702: ARRAY
59703: PPUSH
59704: LD_EXP 58
59708: PUSH
59709: LD_VAR 0 6
59713: ARRAY
59714: PUSH
59715: LD_VAR 0 5
59719: ARRAY
59720: PUSH
59721: LD_INT 2
59723: ARRAY
59724: PPUSH
59725: LD_VAR 0 2
59729: PPUSH
59730: LD_VAR 0 3
59734: PPUSH
59735: CALL_OW 298
59739: PUSH
59740: LD_INT 6
59742: LESS
59743: IFFALSE 59842
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59745: LD_EXP 58
59749: PUSH
59750: LD_VAR 0 6
59754: ARRAY
59755: PUSH
59756: LD_VAR 0 5
59760: ARRAY
59761: PUSH
59762: LD_INT 1
59764: ARRAY
59765: PPUSH
59766: LD_EXP 58
59770: PUSH
59771: LD_VAR 0 6
59775: ARRAY
59776: PUSH
59777: LD_VAR 0 5
59781: ARRAY
59782: PUSH
59783: LD_INT 2
59785: ARRAY
59786: PPUSH
59787: LD_VAR 0 1
59791: PPUSH
59792: CALL_OW 255
59796: PPUSH
59797: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59801: LD_ADDR_EXP 58
59805: PUSH
59806: LD_EXP 58
59810: PPUSH
59811: LD_VAR 0 6
59815: PPUSH
59816: LD_EXP 58
59820: PUSH
59821: LD_VAR 0 6
59825: ARRAY
59826: PPUSH
59827: LD_VAR 0 5
59831: PPUSH
59832: CALL_OW 3
59836: PPUSH
59837: CALL_OW 1
59841: ST_TO_ADDR
// end ; end ;
59842: GO 59680
59844: POP
59845: POP
// end ;
59846: LD_VAR 0 4
59850: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59851: LD_INT 0
59853: PPUSH
59854: PPUSH
59855: PPUSH
59856: PPUSH
59857: PPUSH
59858: PPUSH
59859: PPUSH
59860: PPUSH
59861: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59862: LD_VAR 0 1
59866: PPUSH
59867: CALL_OW 264
59871: PUSH
59872: LD_INT 81
59874: EQUAL
59875: NOT
59876: IFTRUE 59891
59878: PUSH
59879: LD_VAR 0 1
59883: PUSH
59884: LD_EXP 57
59888: IN
59889: NOT
59890: OR
59891: IFFALSE 59895
// exit ;
59893: GO 60221
// index := GetElementIndex ( minersList , unit ) ;
59895: LD_ADDR_VAR 0 6
59899: PUSH
59900: LD_EXP 57
59904: PPUSH
59905: LD_VAR 0 1
59909: PPUSH
59910: CALL 16275 0 2
59914: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59915: LD_ADDR_VAR 0 8
59919: PUSH
59920: LD_EXP 59
59924: PUSH
59925: LD_EXP 58
59929: PUSH
59930: LD_VAR 0 6
59934: ARRAY
59935: MINUS
59936: ST_TO_ADDR
// if not minesFreeAmount then
59937: LD_VAR 0 8
59941: NOT
59942: IFFALSE 59946
// exit ;
59944: GO 60221
// tmp := [ ] ;
59946: LD_ADDR_VAR 0 7
59950: PUSH
59951: EMPTY
59952: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59953: LD_ADDR_VAR 0 5
59957: PUSH
59958: DOUBLE
59959: LD_INT 1
59961: DEC
59962: ST_TO_ADDR
59963: LD_VAR 0 8
59967: PUSH
59968: FOR_TO
59969: IFFALSE 60168
// begin _d := rand ( 0 , 5 ) ;
59971: LD_ADDR_VAR 0 11
59975: PUSH
59976: LD_INT 0
59978: PPUSH
59979: LD_INT 5
59981: PPUSH
59982: CALL_OW 12
59986: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59987: LD_ADDR_VAR 0 12
59991: PUSH
59992: LD_INT 2
59994: PPUSH
59995: LD_INT 6
59997: PPUSH
59998: CALL_OW 12
60002: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60003: LD_ADDR_VAR 0 9
60007: PUSH
60008: LD_VAR 0 2
60012: PPUSH
60013: LD_VAR 0 11
60017: PPUSH
60018: LD_VAR 0 12
60022: PPUSH
60023: CALL_OW 272
60027: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60028: LD_ADDR_VAR 0 10
60032: PUSH
60033: LD_VAR 0 3
60037: PPUSH
60038: LD_VAR 0 11
60042: PPUSH
60043: LD_VAR 0 12
60047: PPUSH
60048: CALL_OW 273
60052: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60053: LD_VAR 0 9
60057: PPUSH
60058: LD_VAR 0 10
60062: PPUSH
60063: CALL_OW 488
60067: IFFALSE 60091
60069: PUSH
60070: LD_VAR 0 9
60074: PUSH
60075: LD_VAR 0 10
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_VAR 0 7
60088: IN
60089: NOT
60090: AND
60091: IFFALSE 60110
60093: PUSH
60094: LD_VAR 0 9
60098: PPUSH
60099: LD_VAR 0 10
60103: PPUSH
60104: CALL_OW 458
60108: NOT
60109: AND
60110: IFFALSE 60152
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60112: LD_ADDR_VAR 0 7
60116: PUSH
60117: LD_VAR 0 7
60121: PPUSH
60122: LD_VAR 0 7
60126: PUSH
60127: LD_INT 1
60129: PLUS
60130: PPUSH
60131: LD_VAR 0 9
60135: PUSH
60136: LD_VAR 0 10
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PPUSH
60145: CALL_OW 1
60149: ST_TO_ADDR
60150: GO 60166
// i := i - 1 ;
60152: LD_ADDR_VAR 0 5
60156: PUSH
60157: LD_VAR 0 5
60161: PUSH
60162: LD_INT 1
60164: MINUS
60165: ST_TO_ADDR
// end ;
60166: GO 59968
60168: POP
60169: POP
// for i in tmp do
60170: LD_ADDR_VAR 0 5
60174: PUSH
60175: LD_VAR 0 7
60179: PUSH
60180: FOR_IN
60181: IFFALSE 60219
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60183: LD_VAR 0 1
60187: PPUSH
60188: LD_VAR 0 5
60192: PUSH
60193: LD_INT 1
60195: ARRAY
60196: PPUSH
60197: LD_VAR 0 5
60201: PUSH
60202: LD_INT 2
60204: ARRAY
60205: PPUSH
60206: CALL 59212 0 3
60210: NOT
60211: IFFALSE 60217
// exit ;
60213: POP
60214: POP
60215: GO 60221
60217: GO 60180
60219: POP
60220: POP
// end ;
60221: LD_VAR 0 4
60225: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60226: LD_INT 0
60228: PPUSH
60229: PPUSH
60230: PPUSH
60231: PPUSH
60232: PPUSH
60233: PPUSH
60234: PPUSH
60235: PPUSH
60236: PPUSH
// if GetClass ( unit ) <> class_sniper then
60237: LD_VAR 0 1
60241: PPUSH
60242: CALL_OW 257
60246: PUSH
60247: LD_INT 5
60249: NONEQUAL
60250: IFFALSE 60254
// exit ;
60252: GO 60724
// dist := 8 ;
60254: LD_ADDR_VAR 0 5
60258: PUSH
60259: LD_INT 8
60261: ST_TO_ADDR
// viewRange := 12 ;
60262: LD_ADDR_VAR 0 8
60266: PUSH
60267: LD_INT 12
60269: ST_TO_ADDR
// side := GetSide ( unit ) ;
60270: LD_ADDR_VAR 0 6
60274: PUSH
60275: LD_VAR 0 1
60279: PPUSH
60280: CALL_OW 255
60284: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60285: LD_INT 61
60287: PPUSH
60288: LD_VAR 0 6
60292: PPUSH
60293: CALL_OW 321
60297: PUSH
60298: LD_INT 2
60300: EQUAL
60301: IFFALSE 60311
// viewRange := 16 ;
60303: LD_ADDR_VAR 0 8
60307: PUSH
60308: LD_INT 16
60310: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60311: LD_VAR 0 1
60315: PPUSH
60316: LD_VAR 0 2
60320: PPUSH
60321: LD_VAR 0 3
60325: PPUSH
60326: CALL_OW 297
60330: PUSH
60331: LD_VAR 0 5
60335: GREATER
60336: IFFALSE 60415
// begin ComMoveXY ( unit , x , y ) ;
60338: LD_VAR 0 1
60342: PPUSH
60343: LD_VAR 0 2
60347: PPUSH
60348: LD_VAR 0 3
60352: PPUSH
60353: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60357: LD_INT 35
60359: PPUSH
60360: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60364: LD_VAR 0 1
60368: PPUSH
60369: LD_VAR 0 2
60373: PPUSH
60374: LD_VAR 0 3
60378: PPUSH
60379: CALL 48331 0 3
60383: NOT
60384: IFFALSE 60388
// exit ;
60386: GO 60724
// until GetDistUnitXY ( unit , x , y ) < dist ;
60388: LD_VAR 0 1
60392: PPUSH
60393: LD_VAR 0 2
60397: PPUSH
60398: LD_VAR 0 3
60402: PPUSH
60403: CALL_OW 297
60407: PUSH
60408: LD_VAR 0 5
60412: LESS
60413: IFFALSE 60357
// end ; ComTurnXY ( unit , x , y ) ;
60415: LD_VAR 0 1
60419: PPUSH
60420: LD_VAR 0 2
60424: PPUSH
60425: LD_VAR 0 3
60429: PPUSH
60430: CALL_OW 118
// repeat if Multiplayer then
60434: LD_OWVAR 4
60438: IFFALSE 60449
// wait ( 35 ) else
60440: LD_INT 35
60442: PPUSH
60443: CALL_OW 67
60447: GO 60456
// wait ( 5 ) ;
60449: LD_INT 5
60451: PPUSH
60452: CALL_OW 67
// _d := GetDir ( unit ) ;
60456: LD_ADDR_VAR 0 11
60460: PUSH
60461: LD_VAR 0 1
60465: PPUSH
60466: CALL_OW 254
60470: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60471: LD_ADDR_VAR 0 7
60475: PUSH
60476: LD_VAR 0 1
60480: PPUSH
60481: CALL_OW 250
60485: PPUSH
60486: LD_VAR 0 1
60490: PPUSH
60491: CALL_OW 251
60495: PPUSH
60496: LD_VAR 0 2
60500: PPUSH
60501: LD_VAR 0 3
60505: PPUSH
60506: CALL 50967 0 4
60510: ST_TO_ADDR
// until dir = _d ;
60511: LD_VAR 0 7
60515: PUSH
60516: LD_VAR 0 11
60520: EQUAL
60521: IFFALSE 60434
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60523: LD_ADDR_VAR 0 9
60527: PUSH
60528: LD_VAR 0 1
60532: PPUSH
60533: CALL_OW 250
60537: PPUSH
60538: LD_VAR 0 7
60542: PPUSH
60543: LD_VAR 0 5
60547: PPUSH
60548: CALL_OW 272
60552: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60553: LD_ADDR_VAR 0 10
60557: PUSH
60558: LD_VAR 0 1
60562: PPUSH
60563: CALL_OW 251
60567: PPUSH
60568: LD_VAR 0 7
60572: PPUSH
60573: LD_VAR 0 5
60577: PPUSH
60578: CALL_OW 273
60582: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60583: LD_VAR 0 9
60587: PPUSH
60588: LD_VAR 0 10
60592: PPUSH
60593: CALL_OW 488
60597: NOT
60598: IFFALSE 60602
// exit ;
60600: GO 60724
// ComAnimCustom ( unit , 1 ) ;
60602: LD_VAR 0 1
60606: PPUSH
60607: LD_INT 1
60609: PPUSH
60610: CALL_OW 592
// p := 0 ;
60614: LD_ADDR_VAR 0 12
60618: PUSH
60619: LD_INT 0
60621: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60622: LD_VAR 0 9
60626: PPUSH
60627: LD_VAR 0 10
60631: PPUSH
60632: LD_VAR 0 6
60636: PPUSH
60637: LD_VAR 0 8
60641: PPUSH
60642: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60646: LD_INT 35
60648: PPUSH
60649: CALL_OW 67
// p := Inc ( p ) ;
60653: LD_ADDR_VAR 0 12
60657: PUSH
60658: LD_VAR 0 12
60662: PPUSH
60663: CALL 50923 0 1
60667: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60668: LD_VAR 0 12
60672: PUSH
60673: LD_INT 3
60675: EQUAL
60676: IFTRUE 60690
60678: PUSH
60679: LD_VAR 0 1
60683: PPUSH
60684: CALL_OW 302
60688: NOT
60689: OR
60690: IFTRUE 60703
60692: PUSH
60693: LD_VAR 0 1
60697: PPUSH
60698: CALL_OW 301
60702: OR
60703: IFFALSE 60646
// RemoveSeeing ( _x , _y , side ) ;
60705: LD_VAR 0 9
60709: PPUSH
60710: LD_VAR 0 10
60714: PPUSH
60715: LD_VAR 0 6
60719: PPUSH
60720: CALL_OW 331
// end ;
60724: LD_VAR 0 4
60728: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
60729: LD_INT 0
60731: PPUSH
60732: PPUSH
60733: PPUSH
60734: PPUSH
60735: PPUSH
60736: PPUSH
60737: PPUSH
60738: PPUSH
60739: PPUSH
60740: PPUSH
60741: PPUSH
// if not unit then
60742: LD_VAR 0 1
60746: NOT
60747: IFFALSE 60751
// exit ;
60749: GO 61022
// side := GetSide ( unit ) ;
60751: LD_ADDR_VAR 0 3
60755: PUSH
60756: LD_VAR 0 1
60760: PPUSH
60761: CALL_OW 255
60765: ST_TO_ADDR
// x := GetX ( unit ) ;
60766: LD_ADDR_VAR 0 5
60770: PUSH
60771: LD_VAR 0 1
60775: PPUSH
60776: CALL_OW 250
60780: ST_TO_ADDR
// y := GetY ( unit ) ;
60781: LD_ADDR_VAR 0 6
60785: PUSH
60786: LD_VAR 0 1
60790: PPUSH
60791: CALL_OW 251
60795: ST_TO_ADDR
// r := 8 ;
60796: LD_ADDR_VAR 0 4
60800: PUSH
60801: LD_INT 8
60803: ST_TO_ADDR
// if x - r < 0 then
60804: LD_VAR 0 5
60808: PUSH
60809: LD_VAR 0 4
60813: MINUS
60814: PUSH
60815: LD_INT 0
60817: LESS
60818: IFFALSE 60830
// min_x := 0 else
60820: LD_ADDR_VAR 0 7
60824: PUSH
60825: LD_INT 0
60827: ST_TO_ADDR
60828: GO 60846
// min_x := x - r ;
60830: LD_ADDR_VAR 0 7
60834: PUSH
60835: LD_VAR 0 5
60839: PUSH
60840: LD_VAR 0 4
60844: MINUS
60845: ST_TO_ADDR
// if y - r < 0 then
60846: LD_VAR 0 6
60850: PUSH
60851: LD_VAR 0 4
60855: MINUS
60856: PUSH
60857: LD_INT 0
60859: LESS
60860: IFFALSE 60872
// min_y := 0 else
60862: LD_ADDR_VAR 0 8
60866: PUSH
60867: LD_INT 0
60869: ST_TO_ADDR
60870: GO 60888
// min_y := y - r ;
60872: LD_ADDR_VAR 0 8
60876: PUSH
60877: LD_VAR 0 6
60881: PUSH
60882: LD_VAR 0 4
60886: MINUS
60887: ST_TO_ADDR
// max_x := x + r ;
60888: LD_ADDR_VAR 0 9
60892: PUSH
60893: LD_VAR 0 5
60897: PUSH
60898: LD_VAR 0 4
60902: PLUS
60903: ST_TO_ADDR
// max_y := y + r ;
60904: LD_ADDR_VAR 0 10
60908: PUSH
60909: LD_VAR 0 6
60913: PUSH
60914: LD_VAR 0 4
60918: PLUS
60919: ST_TO_ADDR
// for _x = min_x to max_x do
60920: LD_ADDR_VAR 0 11
60924: PUSH
60925: DOUBLE
60926: LD_VAR 0 7
60930: DEC
60931: ST_TO_ADDR
60932: LD_VAR 0 9
60936: PUSH
60937: FOR_TO
60938: IFFALSE 61020
// for _y = min_y to max_y do
60940: LD_ADDR_VAR 0 12
60944: PUSH
60945: DOUBLE
60946: LD_VAR 0 8
60950: DEC
60951: ST_TO_ADDR
60952: LD_VAR 0 10
60956: PUSH
60957: FOR_TO
60958: IFFALSE 61016
// begin if not ValidHex ( _x , _y ) then
60960: LD_VAR 0 11
60964: PPUSH
60965: LD_VAR 0 12
60969: PPUSH
60970: CALL_OW 488
60974: NOT
60975: IFFALSE 60979
// continue ;
60977: GO 60957
// if MineAtPos ( _x , _y ) then
60979: LD_VAR 0 11
60983: PPUSH
60984: LD_VAR 0 12
60988: PPUSH
60989: CALL_OW 458
60993: IFFALSE 61014
// ViewMineAtPos ( _x , _y , side ) ;
60995: LD_VAR 0 11
60999: PPUSH
61000: LD_VAR 0 12
61004: PPUSH
61005: LD_VAR 0 3
61009: PPUSH
61010: CALL_OW 457
// end ;
61014: GO 60957
61016: POP
61017: POP
61018: GO 60937
61020: POP
61021: POP
// end ;
61022: LD_VAR 0 2
61026: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
61027: LD_INT 0
61029: PPUSH
61030: PPUSH
61031: PPUSH
61032: PPUSH
61033: PPUSH
61034: PPUSH
61035: PPUSH
// if not units then
61036: LD_VAR 0 1
61040: NOT
61041: IFFALSE 61045
// exit ;
61043: GO 61509
// scaners := [ ] ;
61045: LD_ADDR_VAR 0 6
61049: PUSH
61050: EMPTY
61051: ST_TO_ADDR
// for i in units do
61052: LD_ADDR_VAR 0 3
61056: PUSH
61057: LD_VAR 0 1
61061: PUSH
61062: FOR_IN
61063: IFFALSE 61220
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
61065: LD_VAR 0 3
61069: PPUSH
61070: CALL_OW 264
61074: PUSH
61075: LD_INT 11
61077: NONEQUAL
61078: IFTRUE 61092
61080: PUSH
61081: LD_VAR 0 3
61085: PPUSH
61086: CALL_OW 302
61090: NOT
61091: OR
61092: IFTRUE 61109
61094: PUSH
61095: LD_VAR 0 3
61099: PPUSH
61100: CALL_OW 110
61104: PUSH
61105: LD_INT 502
61107: EQUAL
61108: OR
61109: IFFALSE 61113
// continue ;
61111: GO 61062
// ComStop ( i ) ;
61113: LD_VAR 0 3
61117: PPUSH
61118: CALL_OW 141
// x := GetX ( i ) ;
61122: LD_ADDR_VAR 0 4
61126: PUSH
61127: LD_VAR 0 3
61131: PPUSH
61132: CALL_OW 250
61136: ST_TO_ADDR
// y := GetY ( i ) ;
61137: LD_ADDR_VAR 0 5
61141: PUSH
61142: LD_VAR 0 3
61146: PPUSH
61147: CALL_OW 251
61151: ST_TO_ADDR
// if GetSide ( i ) = your_side then
61152: LD_VAR 0 3
61156: PPUSH
61157: CALL_OW 255
61161: PUSH
61162: LD_OWVAR 2
61166: EQUAL
61167: IFFALSE 61186
// PlaySoundXY ( x , y , mineDetector ) ;
61169: LD_VAR 0 4
61173: PPUSH
61174: LD_VAR 0 5
61178: PPUSH
61179: LD_STRING mineDetector
61181: PPUSH
61182: CALL_OW 366
// scaners := Join ( scaners , i ) ;
61186: LD_ADDR_VAR 0 6
61190: PUSH
61191: LD_VAR 0 6
61195: PPUSH
61196: LD_VAR 0 3
61200: PPUSH
61201: CALL 49550 0 2
61205: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
61206: LD_VAR 0 3
61210: PPUSH
61211: LD_INT 502
61213: PPUSH
61214: CALL_OW 109
// end ;
61218: GO 61062
61220: POP
61221: POP
// if not scaners then
61222: LD_VAR 0 6
61226: NOT
61227: IFFALSE 61231
// exit ;
61229: GO 61509
// wait ( 3 ) ;
61231: LD_INT 3
61233: PPUSH
61234: CALL_OW 67
// timer := 6 ;
61238: LD_ADDR_VAR 0 7
61242: PUSH
61243: LD_INT 6
61245: ST_TO_ADDR
// repeat for i in scaners do
61246: LD_ADDR_VAR 0 3
61250: PUSH
61251: LD_VAR 0 6
61255: PUSH
61256: FOR_IN
61257: IFFALSE 61407
// begin side := GetSide ( i ) ;
61259: LD_ADDR_VAR 0 8
61263: PUSH
61264: LD_VAR 0 3
61268: PPUSH
61269: CALL_OW 255
61273: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
61274: LD_VAR 0 3
61278: PPUSH
61279: CALL_OW 302
61283: NOT
61284: IFTRUE 61297
61286: PUSH
61287: LD_VAR 0 3
61291: PPUSH
61292: CALL_OW 314
61296: OR
61297: IFTRUE 61328
61299: PUSH
61300: LD_VAR 0 3
61304: PPUSH
61305: CALL_OW 263
61309: PUSH
61310: LD_INT 1
61312: EQUAL
61313: IFFALSE 61327
61315: PUSH
61316: LD_VAR 0 3
61320: PPUSH
61321: CALL_OW 311
61325: NOT
61326: AND
61327: OR
61328: IFFALSE 61372
// begin SetUnitDisplayNumber ( i , 0 ) ;
61330: LD_VAR 0 3
61334: PPUSH
61335: LD_INT 0
61337: PPUSH
61338: CALL_OW 505
// SetTag ( i , 0 ) ;
61342: LD_VAR 0 3
61346: PPUSH
61347: LD_INT 0
61349: PPUSH
61350: CALL_OW 109
// scaners := scaners diff i ;
61354: LD_ADDR_VAR 0 6
61358: PUSH
61359: LD_VAR 0 6
61363: PUSH
61364: LD_VAR 0 3
61368: DIFF
61369: ST_TO_ADDR
// continue ;
61370: GO 61256
// end ; if side in [ your_side , 9 ] then
61372: LD_VAR 0 8
61376: PUSH
61377: LD_OWVAR 2
61381: PUSH
61382: LD_INT 9
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: IN
61389: IFFALSE 61405
// SetUnitDisplayNumber ( i , timer ) ;
61391: LD_VAR 0 3
61395: PPUSH
61396: LD_VAR 0 7
61400: PPUSH
61401: CALL_OW 505
// end ;
61405: GO 61256
61407: POP
61408: POP
// if not scaners then
61409: LD_VAR 0 6
61413: NOT
61414: IFFALSE 61418
// exit ;
61416: GO 61509
// timer := Dec ( timer ) ;
61418: LD_ADDR_VAR 0 7
61422: PUSH
61423: LD_VAR 0 7
61427: PPUSH
61428: CALL 50945 0 1
61432: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61433: LD_INT 35
61435: PPUSH
61436: CALL_OW 67
// until timer = 0 ;
61440: LD_VAR 0 7
61444: PUSH
61445: LD_INT 0
61447: EQUAL
61448: IFFALSE 61246
// if not scaners then
61450: LD_VAR 0 6
61454: NOT
61455: IFFALSE 61459
// exit ;
61457: GO 61509
// for i in scaners do
61459: LD_ADDR_VAR 0 3
61463: PUSH
61464: LD_VAR 0 6
61468: PUSH
61469: FOR_IN
61470: IFFALSE 61507
// begin SetUnitDisplayNumber ( i , 0 ) ;
61472: LD_VAR 0 3
61476: PPUSH
61477: LD_INT 0
61479: PPUSH
61480: CALL_OW 505
// SetTag ( i , 0 ) ;
61484: LD_VAR 0 3
61488: PPUSH
61489: LD_INT 0
61491: PPUSH
61492: CALL_OW 109
// RevealDetectorMine ( i ) ;
61496: LD_VAR 0 3
61500: PPUSH
61501: CALL 60729 0 1
// end ;
61505: GO 61469
61507: POP
61508: POP
// end ;
61509: LD_VAR 0 2
61513: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
61514: LD_INT 0
61516: PPUSH
// if p1 = mine_detector_mode then
61517: LD_VAR 0 2
61521: PUSH
61522: LD_INT 103
61524: EQUAL
61525: IFFALSE 61536
// DetectMine ( units ) ;
61527: LD_VAR 0 1
61531: PPUSH
61532: CALL 61027 0 1
// end ; end_of_file
61536: LD_VAR 0 7
61540: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
61541: LD_EXP 39
61545: IFFALSE 61886
61547: GO 61549
61549: DISABLE
61550: LD_INT 0
61552: PPUSH
61553: PPUSH
61554: PPUSH
// begin mpKingPoints := [ ] ;
61555: LD_ADDR_EXP 60
61559: PUSH
61560: EMPTY
61561: ST_TO_ADDR
// if mpTeamGame then
61562: LD_EXP 11
61566: IFFALSE 61620
// begin for i := 1 to Count ( mpTeams ) do
61568: LD_ADDR_VAR 0 1
61572: PUSH
61573: DOUBLE
61574: LD_INT 1
61576: DEC
61577: ST_TO_ADDR
61578: LD_EXP 10
61582: PPUSH
61583: CALL 13574 0 1
61587: PUSH
61588: FOR_TO
61589: IFFALSE 61616
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61591: LD_ADDR_EXP 60
61595: PUSH
61596: LD_EXP 60
61600: PPUSH
61601: LD_VAR 0 1
61605: PPUSH
61606: LD_INT 0
61608: PPUSH
61609: CALL_OW 1
61613: ST_TO_ADDR
61614: GO 61588
61616: POP
61617: POP
// end else
61618: GO 61663
// begin for i := 1 to 8 do
61620: LD_ADDR_VAR 0 1
61624: PUSH
61625: DOUBLE
61626: LD_INT 1
61628: DEC
61629: ST_TO_ADDR
61630: LD_INT 8
61632: PUSH
61633: FOR_TO
61634: IFFALSE 61661
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61636: LD_ADDR_EXP 60
61640: PUSH
61641: LD_EXP 60
61645: PPUSH
61646: LD_VAR 0 1
61650: PPUSH
61651: LD_INT 0
61653: PPUSH
61654: CALL_OW 1
61658: ST_TO_ADDR
61659: GO 61633
61661: POP
61662: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
61663: LD_ADDR_VAR 0 3
61667: PUSH
61668: LD_EXP 2
61672: PPUSH
61673: LD_INT 0
61675: PPUSH
61676: CALL_OW 517
61680: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61681: LD_ADDR_VAR 0 1
61685: PUSH
61686: DOUBLE
61687: LD_INT 1
61689: DEC
61690: ST_TO_ADDR
61691: LD_VAR 0 3
61695: PUSH
61696: LD_INT 1
61698: ARRAY
61699: PUSH
61700: FOR_TO
61701: IFFALSE 61768
// for j := 1 to 8 do
61703: LD_ADDR_VAR 0 2
61707: PUSH
61708: DOUBLE
61709: LD_INT 1
61711: DEC
61712: ST_TO_ADDR
61713: LD_INT 8
61715: PUSH
61716: FOR_TO
61717: IFFALSE 61764
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
61719: LD_VAR 0 3
61723: PUSH
61724: LD_INT 1
61726: ARRAY
61727: PUSH
61728: LD_VAR 0 1
61732: ARRAY
61733: PPUSH
61734: LD_VAR 0 3
61738: PUSH
61739: LD_INT 2
61741: ARRAY
61742: PUSH
61743: LD_VAR 0 1
61747: ARRAY
61748: PPUSH
61749: LD_VAR 0 2
61753: PPUSH
61754: LD_INT 12
61756: NEG
61757: PPUSH
61758: CALL_OW 330
61762: GO 61716
61764: POP
61765: POP
61766: GO 61700
61768: POP
61769: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
61770: LD_EXP 34
61774: PPUSH
61775: LD_INT 1
61777: PPUSH
61778: CALL_OW 424
// UpdateCounter ;
61782: CALL 62392 0 0
// repeat wait ( 0 0$1 ) ;
61786: LD_INT 35
61788: PPUSH
61789: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61793: LD_ADDR_VAR 0 3
61797: PUSH
61798: LD_EXP 34
61802: PPUSH
61803: LD_INT 3
61805: PUSH
61806: LD_INT 57
61808: PUSH
61809: EMPTY
61810: LIST
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 50
61818: PUSH
61819: EMPTY
61820: LIST
61821: PUSH
61822: LD_INT 2
61824: PUSH
61825: LD_INT 30
61827: PUSH
61828: LD_INT 0
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 30
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: LIST
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: LIST
61854: PPUSH
61855: CALL_OW 70
61859: ST_TO_ADDR
// if not tmp then
61860: LD_VAR 0 3
61864: NOT
61865: IFFALSE 61869
// continue ;
61867: GO 61786
// AddPoints ( tmp ) ;
61869: LD_VAR 0 3
61873: PPUSH
61874: CALL 62070 0 1
// UpdateCounter ;
61878: CALL 62392 0 0
// until false ;
61882: LD_INT 0
61884: IFFALSE 61786
// end ;
61886: PPOPN 3
61888: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
61889: LD_EXP 39
61893: IFFALSE 61901
61895: PUSH
61896: LD_EXP 37
61900: AND
61901: IFFALSE 62067
61903: GO 61905
61905: DISABLE
61906: LD_INT 0
61908: PPUSH
61909: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
61910: LD_ADDR_VAR 0 2
61914: PUSH
61915: LD_EXP 2
61919: PPUSH
61920: LD_INT 0
61922: PPUSH
61923: CALL_OW 517
61927: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61928: LD_ADDR_VAR 0 1
61932: PUSH
61933: DOUBLE
61934: LD_INT 1
61936: DEC
61937: ST_TO_ADDR
61938: LD_VAR 0 2
61942: PUSH
61943: LD_INT 1
61945: ARRAY
61946: PUSH
61947: FOR_TO
61948: IFFALSE 61989
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
61950: LD_VAR 0 2
61954: PUSH
61955: LD_INT 1
61957: ARRAY
61958: PUSH
61959: LD_VAR 0 1
61963: ARRAY
61964: PPUSH
61965: LD_VAR 0 2
61969: PUSH
61970: LD_INT 2
61972: ARRAY
61973: PUSH
61974: LD_VAR 0 1
61978: ARRAY
61979: PPUSH
61980: LD_INT 125
61982: PPUSH
61983: CALL_OW 495
61987: GO 61947
61989: POP
61990: POP
// repeat wait ( mpEmissions ) ;
61991: LD_EXP 37
61995: PPUSH
61996: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
62000: LD_ADDR_VAR 0 1
62004: PUSH
62005: DOUBLE
62006: LD_INT 1
62008: DEC
62009: ST_TO_ADDR
62010: LD_VAR 0 2
62014: PUSH
62015: LD_INT 1
62017: ARRAY
62018: PUSH
62019: FOR_TO
62020: IFFALSE 62061
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
62022: LD_VAR 0 2
62026: PUSH
62027: LD_INT 1
62029: ARRAY
62030: PUSH
62031: LD_VAR 0 1
62035: ARRAY
62036: PPUSH
62037: LD_VAR 0 2
62041: PUSH
62042: LD_INT 2
62044: ARRAY
62045: PUSH
62046: LD_VAR 0 1
62050: ARRAY
62051: PPUSH
62052: LD_INT 15
62054: PPUSH
62055: CALL_OW 495
62059: GO 62019
62061: POP
62062: POP
// until false ;
62063: LD_INT 0
62065: IFFALSE 61991
// end ;
62067: PPOPN 2
62069: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
62070: LD_INT 0
62072: PPUSH
62073: PPUSH
62074: PPUSH
62075: PPUSH
62076: PPUSH
// if mpTeamGame then
62077: LD_EXP 11
62081: IFFALSE 62278
// begin first := depots [ 1 ] ;
62083: LD_ADDR_VAR 0 4
62087: PUSH
62088: LD_VAR 0 1
62092: PUSH
62093: LD_INT 1
62095: ARRAY
62096: ST_TO_ADDR
// side := GetSide ( first ) ;
62097: LD_ADDR_VAR 0 6
62101: PUSH
62102: LD_VAR 0 4
62106: PPUSH
62107: CALL_OW 255
62111: ST_TO_ADDR
// for i := 1 to mpTeams do
62112: LD_ADDR_VAR 0 3
62116: PUSH
62117: DOUBLE
62118: LD_INT 1
62120: DEC
62121: ST_TO_ADDR
62122: LD_EXP 10
62126: PUSH
62127: FOR_TO
62128: IFFALSE 62162
// if side in mpTeams [ i ] then
62130: LD_VAR 0 6
62134: PUSH
62135: LD_EXP 10
62139: PUSH
62140: LD_VAR 0 3
62144: ARRAY
62145: IN
62146: IFFALSE 62160
// begin team := i ;
62148: LD_ADDR_VAR 0 5
62152: PUSH
62153: LD_VAR 0 3
62157: ST_TO_ADDR
// break ;
62158: GO 62162
// end ;
62160: GO 62127
62162: POP
62163: POP
// if not team then
62164: LD_VAR 0 5
62168: NOT
62169: IFFALSE 62173
// exit ;
62171: GO 62387
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62173: LD_EXP 34
62177: PPUSH
62178: LD_INT 81
62180: PUSH
62181: LD_VAR 0 6
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PPUSH
62190: CALL_OW 70
62194: IFFALSE 62198
// exit ;
62196: GO 62387
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
62198: LD_ADDR_EXP 60
62202: PUSH
62203: LD_EXP 60
62207: PPUSH
62208: LD_VAR 0 5
62212: PPUSH
62213: LD_EXP 60
62217: PUSH
62218: LD_VAR 0 5
62222: ARRAY
62223: PUSH
62224: LD_INT 1
62226: PLUS
62227: PPUSH
62228: CALL_OW 1
62232: ST_TO_ADDR
// for i in mpTeams [ team ] do
62233: LD_ADDR_VAR 0 3
62237: PUSH
62238: LD_EXP 10
62242: PUSH
62243: LD_VAR 0 5
62247: ARRAY
62248: PUSH
62249: FOR_IN
62250: IFFALSE 62274
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
62252: LD_VAR 0 3
62256: PPUSH
62257: LD_EXP 60
62261: PUSH
62262: LD_VAR 0 5
62266: ARRAY
62267: PPUSH
62268: CALL_OW 506
62272: GO 62249
62274: POP
62275: POP
// end else
62276: GO 62387
// begin first := depots [ 1 ] ;
62278: LD_ADDR_VAR 0 4
62282: PUSH
62283: LD_VAR 0 1
62287: PUSH
62288: LD_INT 1
62290: ARRAY
62291: ST_TO_ADDR
// side := GetSide ( first ) ;
62292: LD_ADDR_VAR 0 6
62296: PUSH
62297: LD_VAR 0 4
62301: PPUSH
62302: CALL_OW 255
62306: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62307: LD_EXP 34
62311: PPUSH
62312: LD_INT 81
62314: PUSH
62315: LD_VAR 0 6
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PPUSH
62324: CALL_OW 70
62328: IFFALSE 62332
// exit ;
62330: GO 62387
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
62332: LD_ADDR_EXP 60
62336: PUSH
62337: LD_EXP 60
62341: PPUSH
62342: LD_VAR 0 6
62346: PPUSH
62347: LD_EXP 60
62351: PUSH
62352: LD_VAR 0 6
62356: ARRAY
62357: PUSH
62358: LD_INT 1
62360: PLUS
62361: PPUSH
62362: CALL_OW 1
62366: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
62367: LD_VAR 0 6
62371: PPUSH
62372: LD_EXP 60
62376: PUSH
62377: LD_VAR 0 6
62381: ARRAY
62382: PPUSH
62383: CALL_OW 506
// end ; end ;
62387: LD_VAR 0 2
62391: RET
// function UpdateCounter ; var i ; begin
62392: LD_INT 0
62394: PPUSH
62395: PPUSH
// result := [ ] ;
62396: LD_ADDR_VAR 0 1
62400: PUSH
62401: EMPTY
62402: ST_TO_ADDR
// if mpTeamGame then
62403: LD_EXP 11
62407: IFFALSE 62474
// begin for i := 1 to mpTeams do
62409: LD_ADDR_VAR 0 2
62413: PUSH
62414: DOUBLE
62415: LD_INT 1
62417: DEC
62418: ST_TO_ADDR
62419: LD_EXP 10
62423: PUSH
62424: FOR_TO
62425: IFFALSE 62470
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
62427: LD_ADDR_VAR 0 1
62431: PUSH
62432: LD_VAR 0 1
62436: PUSH
62437: LD_STRING #KingoftheHill-Team
62439: PUSH
62440: LD_VAR 0 2
62444: PUSH
62445: LD_EXP 60
62449: PUSH
62450: LD_VAR 0 2
62454: ARRAY
62455: PUSH
62456: LD_EXP 35
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: ADD
62467: ST_TO_ADDR
62468: GO 62424
62470: POP
62471: POP
// end else
62472: GO 62547
// begin for i := 1 to 8 do
62474: LD_ADDR_VAR 0 2
62478: PUSH
62479: DOUBLE
62480: LD_INT 1
62482: DEC
62483: ST_TO_ADDR
62484: LD_INT 8
62486: PUSH
62487: FOR_TO
62488: IFFALSE 62545
// if mpSidePositions [ i ] then
62490: LD_EXP 7
62494: PUSH
62495: LD_VAR 0 2
62499: ARRAY
62500: IFFALSE 62543
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
62502: LD_ADDR_VAR 0 1
62506: PUSH
62507: LD_VAR 0 1
62511: PUSH
62512: LD_STRING #KingoftheHill-Player
62514: PUSH
62515: LD_VAR 0 2
62519: PUSH
62520: LD_EXP 60
62524: PUSH
62525: LD_VAR 0 2
62529: ARRAY
62530: PUSH
62531: LD_EXP 35
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: ADD
62542: ST_TO_ADDR
62543: GO 62487
62545: POP
62546: POP
// end ; mpDisplayStrings := result ;
62547: LD_ADDR_EXP 38
62551: PUSH
62552: LD_VAR 0 1
62556: ST_TO_ADDR
// end ;
62557: LD_VAR 0 1
62561: RET
// export function HowMuchPointsKing ( side ) ; begin
62562: LD_INT 0
62564: PPUSH
// result := HowMuchPoints ( side ) ;
62565: LD_ADDR_VAR 0 2
62569: PUSH
62570: LD_VAR 0 1
62574: PPUSH
62575: CALL 62585 0 1
62579: ST_TO_ADDR
// end ;
62580: LD_VAR 0 2
62584: RET
// function HowMuchPoints ( side ) ; var i ; begin
62585: LD_INT 0
62587: PPUSH
62588: PPUSH
// if mpTeamGame then
62589: LD_EXP 11
62593: IFFALSE 62662
// begin for i := 1 to Count ( mpTeams ) do
62595: LD_ADDR_VAR 0 3
62599: PUSH
62600: DOUBLE
62601: LD_INT 1
62603: DEC
62604: ST_TO_ADDR
62605: LD_EXP 10
62609: PPUSH
62610: CALL 13574 0 1
62614: PUSH
62615: FOR_TO
62616: IFFALSE 62658
// begin if side in mpTeams [ i ] then
62618: LD_VAR 0 1
62622: PUSH
62623: LD_EXP 10
62627: PUSH
62628: LD_VAR 0 3
62632: ARRAY
62633: IN
62634: IFFALSE 62656
// begin result := mpKingPoints [ i ] ;
62636: LD_ADDR_VAR 0 2
62640: PUSH
62641: LD_EXP 60
62645: PUSH
62646: LD_VAR 0 3
62650: ARRAY
62651: ST_TO_ADDR
// exit ;
62652: POP
62653: POP
62654: GO 62678
// end ; end ;
62656: GO 62615
62658: POP
62659: POP
// end else
62660: GO 62678
// result := mpKingPoints [ side ] ;
62662: LD_ADDR_VAR 0 2
62666: PUSH
62667: LD_EXP 60
62671: PUSH
62672: LD_VAR 0 1
62676: ARRAY
62677: ST_TO_ADDR
// end ;
62678: LD_VAR 0 2
62682: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
62683: LD_EXP 39
62687: IFFALSE 62695
62689: PUSH
62690: CALL 63107 0 0
62694: AND
62695: IFFALSE 62703
62697: PUSH
62698: LD_OWVAR 4
62702: AND
62703: IFFALSE 62956
62705: GO 62707
62707: DISABLE
62708: LD_INT 0
62710: PPUSH
62711: PPUSH
// begin canWin := false ;
62712: LD_ADDR_VAR 0 2
62716: PUSH
62717: LD_INT 0
62719: ST_TO_ADDR
// if not HasPower ( your_side ) then
62720: LD_OWVAR 2
62724: PPUSH
62725: CALL 63149 0 1
62729: NOT
62730: IFFALSE 62741
// begin Multiplayer_Loose_Message ;
62732: CALL_OW 521
// enable ( mpLose ) ;
62736: LD_INT 102
62738: ENABLE_MARKED
// end else
62739: GO 62956
// begin if not EnemiesInGame then
62741: CALL 62959 0 0
62745: NOT
62746: IFFALSE 62753
// begin enable ( mpWin ) ;
62748: LD_INT 101
62750: ENABLE_MARKED
// exit ;
62751: GO 62956
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
62753: LD_ADDR_VAR 0 2
62757: PUSH
62758: LD_OWVAR 2
62762: PPUSH
62763: CALL 62585 0 1
62767: PUSH
62768: LD_EXP 35
62772: GREATEREQUAL
62773: IFFALSE 62786
62775: PUSH
62776: LD_OWVAR 2
62780: PPUSH
62781: CALL 63149 0 1
62785: AND
62786: ST_TO_ADDR
// for i := 1 to 8 do
62787: LD_ADDR_VAR 0 1
62791: PUSH
62792: DOUBLE
62793: LD_INT 1
62795: DEC
62796: ST_TO_ADDR
62797: LD_INT 8
62799: PUSH
62800: FOR_TO
62801: IFFALSE 62942
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62803: LD_EXP 7
62807: PUSH
62808: LD_VAR 0 1
62812: ARRAY
62813: IFFALSE 62826
62815: PUSH
62816: LD_VAR 0 1
62820: PPUSH
62821: CALL_OW 108
62825: AND
62826: IFFALSE 62840
62828: PUSH
62829: LD_VAR 0 1
62833: PUSH
62834: LD_OWVAR 2
62838: NONEQUAL
62839: AND
62840: IFFALSE 62940
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62842: LD_EXP 8
62846: PUSH
62847: LD_VAR 0 1
62851: ARRAY
62852: NOT
62853: IFTRUE 62901
62855: PUSH
62856: LD_EXP 8
62860: PUSH
62861: LD_VAR 0 1
62865: ARRAY
62866: PUSH
62867: LD_EXP 8
62871: PUSH
62872: LD_OWVAR 2
62876: ARRAY
62877: NONEQUAL
62878: IFFALSE 62900
62880: PUSH
62881: LD_OWVAR 2
62885: PPUSH
62886: LD_VAR 0 1
62890: PPUSH
62891: CALL_OW 81
62895: PUSH
62896: LD_INT 1
62898: NONEQUAL
62899: AND
62900: OR
62901: IFFALSE 62940
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
62903: LD_VAR 0 1
62907: PPUSH
62908: CALL 62585 0 1
62912: PUSH
62913: LD_EXP 35
62917: GREATEREQUAL
62918: IFFALSE 62931
62920: PUSH
62921: LD_VAR 0 1
62925: PPUSH
62926: CALL 63149 0 1
62930: AND
62931: IFFALSE 62940
// begin enable ( mpLose ) ;
62933: LD_INT 102
62935: ENABLE_MARKED
// exit ;
62936: POP
62937: POP
62938: GO 62956
// end ;
62940: GO 62800
62942: POP
62943: POP
// if canWin then
62944: LD_VAR 0 2
62948: IFFALSE 62955
// enable ( mpWin ) else
62950: LD_INT 101
62952: ENABLE_MARKED
62953: GO 62956
// enable ;
62955: ENABLE
// end ; end ;
62956: PPOPN 2
62958: END
// function EnemiesInGame ; var i ; begin
62959: LD_INT 0
62961: PPUSH
62962: PPUSH
// result := false ;
62963: LD_ADDR_VAR 0 1
62967: PUSH
62968: LD_INT 0
62970: ST_TO_ADDR
// for i := 1 to 8 do
62971: LD_ADDR_VAR 0 2
62975: PUSH
62976: DOUBLE
62977: LD_INT 1
62979: DEC
62980: ST_TO_ADDR
62981: LD_INT 8
62983: PUSH
62984: FOR_TO
62985: IFFALSE 63100
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
62987: LD_VAR 0 2
62991: PUSH
62992: LD_OWVAR 2
62996: NONEQUAL
62997: IFFALSE 63010
62999: PUSH
63000: LD_VAR 0 2
63004: PPUSH
63005: CALL 63149 0 1
63009: AND
63010: IFFALSE 63023
63012: PUSH
63013: LD_VAR 0 2
63017: PPUSH
63018: CALL_OW 108
63022: AND
63023: IFFALSE 63098
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
63025: LD_EXP 8
63029: PUSH
63030: LD_VAR 0 2
63034: ARRAY
63035: NOT
63036: IFTRUE 63084
63038: PUSH
63039: LD_EXP 8
63043: PUSH
63044: LD_VAR 0 2
63048: ARRAY
63049: PUSH
63050: LD_EXP 8
63054: PUSH
63055: LD_OWVAR 2
63059: ARRAY
63060: NONEQUAL
63061: IFFALSE 63083
63063: PUSH
63064: LD_OWVAR 2
63068: PPUSH
63069: LD_VAR 0 2
63073: PPUSH
63074: CALL_OW 81
63078: PUSH
63079: LD_INT 1
63081: NONEQUAL
63082: AND
63083: OR
63084: IFFALSE 63098
// begin result := true ;
63086: LD_ADDR_VAR 0 1
63090: PUSH
63091: LD_INT 1
63093: ST_TO_ADDR
// exit ;
63094: POP
63095: POP
63096: GO 63102
// end ;
63098: GO 62984
63100: POP
63101: POP
// end ;
63102: LD_VAR 0 1
63106: RET
// function CanWinLoose ; begin
63107: LD_INT 0
63109: PPUSH
// result := true ;
63110: LD_ADDR_VAR 0 1
63114: PUSH
63115: LD_INT 1
63117: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
63118: CALL_OW 531
63122: IFFALSE 63134
63124: PUSH
63125: CALL_OW 519
63129: PUSH
63130: LD_INT 1
63132: GREATER
63133: AND
63134: IFFALSE 63144
// result := false ;
63136: LD_ADDR_VAR 0 1
63140: PUSH
63141: LD_INT 0
63143: ST_TO_ADDR
// end ;
63144: LD_VAR 0 1
63148: RET
// function HasPower ( i ) ; begin
63149: LD_INT 0
63151: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
63152: LD_ADDR_VAR 0 2
63156: PUSH
63157: LD_INT 22
63159: PUSH
63160: LD_VAR 0 1
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 2
63171: PUSH
63172: LD_INT 21
63174: PUSH
63175: LD_INT 1
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 33
63184: PUSH
63185: LD_INT 3
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 33
63194: PUSH
63195: LD_INT 5
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PPUSH
63212: CALL_OW 69
63216: ST_TO_ADDR
// end ; end_of_file
63217: LD_VAR 0 2
63221: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63222: PPOPN 6
63224: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63225: LD_INT 0
63227: PPUSH
// begin if not units then
63228: LD_VAR 0 1
63232: NOT
63233: IFFALSE 63237
// exit ;
63235: GO 63271
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63237: LD_VAR 0 1
63241: PPUSH
63242: LD_VAR 0 2
63246: PPUSH
63247: LD_VAR 0 3
63251: PPUSH
63252: LD_VAR 0 4
63256: PPUSH
63257: LD_VAR 0 5
63261: PPUSH
63262: LD_VAR 0 6
63266: PPUSH
63267: CALL 61514 0 6
// end ;
63271: PPOPN 7
63273: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63274: LD_EXP 3
63278: PUSH
63279: LD_INT 4
63281: EQUAL
63282: IFFALSE 63318
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63284: LD_STRING setGameDifficulty(
63286: PUSH
63287: LD_OWVAR 67
63291: STR
63292: PUSH
63293: LD_STRING )
63295: STR
63296: PPUSH
63297: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63301: LD_STRING displayDifficulty(
63303: PUSH
63304: LD_OWVAR 67
63308: STR
63309: PUSH
63310: LD_STRING )
63312: STR
63313: PPUSH
63314: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63318: CALL 63347 0 0
// end ; end_of_file
63322: PPOPN 1
63324: END
// every 0 0$1 do
63325: GO 63327
63327: DISABLE
// begin enable ;
63328: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63329: LD_STRING updateTimer(
63331: PUSH
63332: LD_OWVAR 1
63336: STR
63337: PUSH
63338: LD_STRING );
63340: STR
63341: PPUSH
63342: CALL_OW 559
// end ;
63346: END
// export function SOS_MapStart ( ) ; begin
63347: LD_INT 0
63349: PPUSH
// UpdateFactoryWaypoints ( ) ;
63350: CALL 64288 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63354: CALL 64540 0 0
// ParseMultiDataToLua ( ) ;
63358: CALL 64687 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
63362: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
63364: PPUSH
63365: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63369: LD_STRING setSpecLogoNumber(
63371: PUSH
63372: LD_INT 2
63374: STR
63375: PUSH
63376: LD_STRING ,
63378: STR
63379: PUSH
63380: LD_INT 1
63382: STR
63383: PUSH
63384: LD_STRING )
63386: STR
63387: PPUSH
63388: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63392: LD_STRING setSpecLogoNumber(
63394: PUSH
63395: LD_INT 3
63397: STR
63398: PUSH
63399: LD_STRING ,
63401: STR
63402: PUSH
63403: LD_INT 2
63405: STR
63406: PUSH
63407: LD_STRING )
63409: STR
63410: PPUSH
63411: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63415: LD_STRING setSpecLogoNumber(
63417: PUSH
63418: LD_INT 4
63420: STR
63421: PUSH
63422: LD_STRING ,
63424: STR
63425: PUSH
63426: LD_INT 3
63428: STR
63429: PUSH
63430: LD_STRING )
63432: STR
63433: PPUSH
63434: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63438: LD_STRING setSpecLogoNumber(
63440: PUSH
63441: LD_INT 5
63443: STR
63444: PUSH
63445: LD_STRING ,
63447: STR
63448: PUSH
63449: LD_INT 4
63451: STR
63452: PUSH
63453: LD_STRING )
63455: STR
63456: PPUSH
63457: CALL_OW 559
// end ;
63461: LD_VAR 0 1
63465: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63466: LD_INT 0
63468: PPUSH
63469: PPUSH
63470: PPUSH
63471: PPUSH
63472: PPUSH
63473: PPUSH
63474: PPUSH
63475: PPUSH
63476: PPUSH
// for i := 1 to 8 do
63477: LD_ADDR_VAR 0 2
63481: PUSH
63482: DOUBLE
63483: LD_INT 1
63485: DEC
63486: ST_TO_ADDR
63487: LD_INT 8
63489: PUSH
63490: FOR_TO
63491: IFFALSE 63876
// begin if mpSidePositions [ i ] then
63493: LD_EXP 7
63497: PUSH
63498: LD_VAR 0 2
63502: ARRAY
63503: IFFALSE 63874
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63505: LD_ADDR_VAR 0 7
63509: PUSH
63510: LD_INT 22
63512: PUSH
63513: LD_VAR 0 2
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 21
63524: PUSH
63525: LD_INT 1
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PPUSH
63536: CALL_OW 69
63540: PPUSH
63541: CALL 13574 0 1
63545: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63546: LD_ADDR_VAR 0 9
63550: PUSH
63551: LD_INT 22
63553: PUSH
63554: LD_VAR 0 2
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 2
63565: PUSH
63566: LD_INT 30
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 30
63578: PUSH
63579: LD_INT 1
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: LIST
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PPUSH
63595: CALL_OW 69
63599: ST_TO_ADDR
// crates := 0 ;
63600: LD_ADDR_VAR 0 4
63604: PUSH
63605: LD_INT 0
63607: ST_TO_ADDR
// oil := 0 ;
63608: LD_ADDR_VAR 0 5
63612: PUSH
63613: LD_INT 0
63615: ST_TO_ADDR
// sib := 0 ;
63616: LD_ADDR_VAR 0 6
63620: PUSH
63621: LD_INT 0
63623: ST_TO_ADDR
// if bases then
63624: LD_VAR 0 9
63628: IFFALSE 63734
// begin for j in bases do
63630: LD_ADDR_VAR 0 3
63634: PUSH
63635: LD_VAR 0 9
63639: PUSH
63640: FOR_IN
63641: IFFALSE 63732
// begin base := GetBase ( j ) ;
63643: LD_ADDR_VAR 0 8
63647: PUSH
63648: LD_VAR 0 3
63652: PPUSH
63653: CALL_OW 274
63657: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63658: LD_ADDR_VAR 0 4
63662: PUSH
63663: LD_VAR 0 4
63667: PUSH
63668: LD_VAR 0 8
63672: PPUSH
63673: LD_INT 1
63675: PPUSH
63676: CALL_OW 275
63680: PLUS
63681: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63682: LD_ADDR_VAR 0 5
63686: PUSH
63687: LD_VAR 0 5
63691: PUSH
63692: LD_VAR 0 8
63696: PPUSH
63697: LD_INT 2
63699: PPUSH
63700: CALL_OW 275
63704: PLUS
63705: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63706: LD_ADDR_VAR 0 6
63710: PUSH
63711: LD_VAR 0 6
63715: PUSH
63716: LD_VAR 0 8
63720: PPUSH
63721: LD_INT 3
63723: PPUSH
63724: CALL_OW 275
63728: PLUS
63729: ST_TO_ADDR
// end ;
63730: GO 63640
63732: POP
63733: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63734: LD_STRING setSpecText(
63736: PUSH
63737: LD_VAR 0 2
63741: STR
63742: PUSH
63743: LD_STRING ,
63745: STR
63746: PUSH
63747: LD_INT 2
63749: STR
63750: PUSH
63751: LD_STRING ,
63753: STR
63754: PUSH
63755: LD_VAR 0 4
63759: STR
63760: PUSH
63761: LD_STRING )
63763: STR
63764: PPUSH
63765: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63769: LD_STRING setSpecText(
63771: PUSH
63772: LD_VAR 0 2
63776: STR
63777: PUSH
63778: LD_STRING ,
63780: STR
63781: PUSH
63782: LD_INT 3
63784: STR
63785: PUSH
63786: LD_STRING ,
63788: STR
63789: PUSH
63790: LD_VAR 0 5
63794: STR
63795: PUSH
63796: LD_STRING )
63798: STR
63799: PPUSH
63800: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63804: LD_STRING setSpecText(
63806: PUSH
63807: LD_VAR 0 2
63811: STR
63812: PUSH
63813: LD_STRING ,
63815: STR
63816: PUSH
63817: LD_INT 4
63819: STR
63820: PUSH
63821: LD_STRING ,
63823: STR
63824: PUSH
63825: LD_VAR 0 6
63829: STR
63830: PUSH
63831: LD_STRING )
63833: STR
63834: PPUSH
63835: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63839: LD_STRING setSpecText(
63841: PUSH
63842: LD_VAR 0 2
63846: STR
63847: PUSH
63848: LD_STRING ,
63850: STR
63851: PUSH
63852: LD_INT 5
63854: STR
63855: PUSH
63856: LD_STRING ,
63858: STR
63859: PUSH
63860: LD_VAR 0 7
63864: STR
63865: PUSH
63866: LD_STRING )
63868: STR
63869: PPUSH
63870: CALL_OW 559
// end ; end ;
63874: GO 63490
63876: POP
63877: POP
// end ;
63878: LD_VAR 0 1
63882: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63883: LD_INT 2
63885: PUSH
63886: LD_INT 30
63888: PUSH
63889: LD_INT 0
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 30
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: LIST
63910: PPUSH
63911: CALL_OW 69
63915: IFFALSE 63925
63917: GO 63919
63919: DISABLE
// begin enable ;
63920: ENABLE
// UpdateSpectatorBar ;
63921: CALL 63466 0 0
// end ;
63925: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63926: LD_INT 0
63928: PPUSH
// end ;
63929: LD_VAR 0 12
63933: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63934: LD_INT 0
63936: PPUSH
63937: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63938: LD_VAR 0 1
63942: NOT
63943: IFTRUE 63962
63945: PUSH
63946: LD_VAR 0 2
63950: PPUSH
63951: LD_VAR 0 3
63955: PPUSH
63956: CALL_OW 488
63960: NOT
63961: OR
63962: IFTRUE 63997
63964: PUSH
63965: LD_VAR 0 1
63969: PPUSH
63970: CALL_OW 266
63974: PUSH
63975: LD_INT 3
63977: NONEQUAL
63978: IFFALSE 63996
63980: PUSH
63981: LD_VAR 0 1
63985: PPUSH
63986: CALL_OW 247
63990: PUSH
63991: LD_INT 1
63993: EQUAL
63994: NOT
63995: AND
63996: OR
63997: IFFALSE 64001
// exit ;
63999: GO 64283
// if GetType ( factory ) = unit_human then
64001: LD_VAR 0 1
64005: PPUSH
64006: CALL_OW 247
64010: PUSH
64011: LD_INT 1
64013: EQUAL
64014: IFFALSE 64031
// factory := IsInUnit ( factory ) ;
64016: LD_ADDR_VAR 0 1
64020: PUSH
64021: LD_VAR 0 1
64025: PPUSH
64026: CALL_OW 310
64030: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64031: LD_VAR 0 1
64035: PPUSH
64036: CALL_OW 266
64040: PUSH
64041: LD_INT 3
64043: NONEQUAL
64044: IFFALSE 64048
// exit ;
64046: GO 64283
// for i := 1 to Count ( factoryWaypoints ) do
64048: LD_ADDR_VAR 0 5
64052: PUSH
64053: DOUBLE
64054: LD_INT 1
64056: DEC
64057: ST_TO_ADDR
64058: LD_EXP 61
64062: PPUSH
64063: CALL 13574 0 1
64067: PUSH
64068: FOR_TO
64069: IFFALSE 64231
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64071: LD_VAR 0 2
64075: PPUSH
64076: LD_VAR 0 3
64080: PPUSH
64081: CALL_OW 428
64085: PUSH
64086: LD_EXP 61
64090: PUSH
64091: LD_VAR 0 5
64095: ARRAY
64096: PUSH
64097: LD_INT 2
64099: ARRAY
64100: EQUAL
64101: IFFALSE 64133
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64103: LD_ADDR_EXP 61
64107: PUSH
64108: LD_EXP 61
64112: PPUSH
64113: LD_VAR 0 5
64117: PPUSH
64118: CALL_OW 3
64122: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64123: CALL 64288 0 0
// exit ;
64127: POP
64128: POP
64129: GO 64283
// end else
64131: GO 64229
// if factory = factoryWaypoints [ i ] [ 2 ] then
64133: LD_VAR 0 1
64137: PUSH
64138: LD_EXP 61
64142: PUSH
64143: LD_VAR 0 5
64147: ARRAY
64148: PUSH
64149: LD_INT 2
64151: ARRAY
64152: EQUAL
64153: IFFALSE 64229
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64155: LD_ADDR_EXP 61
64159: PUSH
64160: LD_EXP 61
64164: PPUSH
64165: LD_VAR 0 5
64169: PPUSH
64170: CALL_OW 3
64174: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64175: LD_ADDR_EXP 61
64179: PUSH
64180: LD_EXP 61
64184: PPUSH
64185: LD_VAR 0 1
64189: PPUSH
64190: CALL_OW 255
64194: PUSH
64195: LD_VAR 0 1
64199: PUSH
64200: LD_VAR 0 2
64204: PUSH
64205: LD_VAR 0 3
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: PPUSH
64216: CALL 49550 0 2
64220: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64221: CALL 64288 0 0
// exit ;
64225: POP
64226: POP
64227: GO 64283
// end ; end ;
64229: GO 64068
64231: POP
64232: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64233: LD_ADDR_EXP 61
64237: PUSH
64238: LD_EXP 61
64242: PPUSH
64243: LD_VAR 0 1
64247: PPUSH
64248: CALL_OW 255
64252: PUSH
64253: LD_VAR 0 1
64257: PUSH
64258: LD_VAR 0 2
64262: PUSH
64263: LD_VAR 0 3
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: PPUSH
64274: CALL 49550 0 2
64278: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64279: CALL 64288 0 0
// end ;
64283: LD_VAR 0 4
64287: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64288: LD_INT 0
64290: PPUSH
64291: PPUSH
64292: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64293: LD_STRING resetFactoryWaypoint();
64295: PPUSH
64296: CALL_OW 559
// if factoryWaypoints then
64300: LD_EXP 61
64304: IFFALSE 64425
// begin list := factoryWaypoints ;
64306: LD_ADDR_VAR 0 3
64310: PUSH
64311: LD_EXP 61
64315: ST_TO_ADDR
// for i := 1 to list do
64316: LD_ADDR_VAR 0 2
64320: PUSH
64321: DOUBLE
64322: LD_INT 1
64324: DEC
64325: ST_TO_ADDR
64326: LD_VAR 0 3
64330: PUSH
64331: FOR_TO
64332: IFFALSE 64423
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64334: LD_STRING setFactoryWaypointXY(
64336: PUSH
64337: LD_VAR 0 3
64341: PUSH
64342: LD_VAR 0 2
64346: ARRAY
64347: PUSH
64348: LD_INT 1
64350: ARRAY
64351: STR
64352: PUSH
64353: LD_STRING ,
64355: STR
64356: PUSH
64357: LD_VAR 0 3
64361: PUSH
64362: LD_VAR 0 2
64366: ARRAY
64367: PUSH
64368: LD_INT 2
64370: ARRAY
64371: STR
64372: PUSH
64373: LD_STRING ,
64375: STR
64376: PUSH
64377: LD_VAR 0 3
64381: PUSH
64382: LD_VAR 0 2
64386: ARRAY
64387: PUSH
64388: LD_INT 3
64390: ARRAY
64391: STR
64392: PUSH
64393: LD_STRING ,
64395: STR
64396: PUSH
64397: LD_VAR 0 3
64401: PUSH
64402: LD_VAR 0 2
64406: ARRAY
64407: PUSH
64408: LD_INT 4
64410: ARRAY
64411: STR
64412: PUSH
64413: LD_STRING )
64415: STR
64416: PPUSH
64417: CALL_OW 559
64421: GO 64331
64423: POP
64424: POP
// end ; end ;
64425: LD_VAR 0 1
64429: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64430: LD_INT 0
64432: PPUSH
// if HexInfo ( x , y ) = warehouse then
64433: LD_VAR 0 2
64437: PPUSH
64438: LD_VAR 0 3
64442: PPUSH
64443: CALL_OW 428
64447: PUSH
64448: LD_VAR 0 1
64452: EQUAL
64453: IFFALSE 64480
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64455: LD_ADDR_EXP 63
64459: PUSH
64460: LD_EXP 63
64464: PPUSH
64465: LD_VAR 0 1
64469: PPUSH
64470: LD_INT 0
64472: PPUSH
64473: CALL_OW 1
64477: ST_TO_ADDR
64478: GO 64531
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64480: LD_ADDR_EXP 63
64484: PUSH
64485: LD_EXP 63
64489: PPUSH
64490: LD_VAR 0 1
64494: PPUSH
64495: LD_VAR 0 1
64499: PPUSH
64500: CALL_OW 255
64504: PUSH
64505: LD_VAR 0 1
64509: PUSH
64510: LD_VAR 0 2
64514: PUSH
64515: LD_VAR 0 3
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: PPUSH
64526: CALL_OW 1
64530: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64531: CALL 64540 0 0
// end ;
64535: LD_VAR 0 4
64539: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64540: LD_INT 0
64542: PPUSH
64543: PPUSH
64544: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64545: LD_STRING resetWarehouseGatheringPoints();
64547: PPUSH
64548: CALL_OW 559
// if warehouseGatheringPoints then
64552: LD_EXP 63
64556: IFFALSE 64682
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64558: LD_ADDR_VAR 0 3
64562: PUSH
64563: LD_EXP 63
64567: PPUSH
64568: CALL 53484 0 1
64572: ST_TO_ADDR
// for i := 1 to list do
64573: LD_ADDR_VAR 0 2
64577: PUSH
64578: DOUBLE
64579: LD_INT 1
64581: DEC
64582: ST_TO_ADDR
64583: LD_VAR 0 3
64587: PUSH
64588: FOR_TO
64589: IFFALSE 64680
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64591: LD_STRING setWarehouseGatheringPointXY(
64593: PUSH
64594: LD_VAR 0 3
64598: PUSH
64599: LD_VAR 0 2
64603: ARRAY
64604: PUSH
64605: LD_INT 1
64607: ARRAY
64608: STR
64609: PUSH
64610: LD_STRING ,
64612: STR
64613: PUSH
64614: LD_VAR 0 3
64618: PUSH
64619: LD_VAR 0 2
64623: ARRAY
64624: PUSH
64625: LD_INT 2
64627: ARRAY
64628: STR
64629: PUSH
64630: LD_STRING ,
64632: STR
64633: PUSH
64634: LD_VAR 0 3
64638: PUSH
64639: LD_VAR 0 2
64643: ARRAY
64644: PUSH
64645: LD_INT 3
64647: ARRAY
64648: STR
64649: PUSH
64650: LD_STRING ,
64652: STR
64653: PUSH
64654: LD_VAR 0 3
64658: PUSH
64659: LD_VAR 0 2
64663: ARRAY
64664: PUSH
64665: LD_INT 4
64667: ARRAY
64668: STR
64669: PUSH
64670: LD_STRING )
64672: STR
64673: PPUSH
64674: CALL_OW 559
64678: GO 64588
64680: POP
64681: POP
// end ; end ;
64682: LD_VAR 0 1
64686: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64687: LD_INT 0
64689: PPUSH
64690: PPUSH
// if not mpSidePositions then
64691: LD_EXP 7
64695: NOT
64696: IFFALSE 64700
// exit ;
64698: GO 64771
// result :=  ;
64700: LD_ADDR_VAR 0 1
64704: PUSH
64705: LD_STRING 
64707: ST_TO_ADDR
// for i := 1 to 8 do
64708: LD_ADDR_VAR 0 2
64712: PUSH
64713: DOUBLE
64714: LD_INT 1
64716: DEC
64717: ST_TO_ADDR
64718: LD_INT 8
64720: PUSH
64721: FOR_TO
64722: IFFALSE 64752
// begin result := result & mpSidePositions [ i ] & ; ;
64724: LD_ADDR_VAR 0 1
64728: PUSH
64729: LD_VAR 0 1
64733: PUSH
64734: LD_EXP 7
64738: PUSH
64739: LD_VAR 0 2
64743: ARRAY
64744: STR
64745: PUSH
64746: LD_STRING ;
64748: STR
64749: ST_TO_ADDR
// end ;
64750: GO 64721
64752: POP
64753: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64754: LD_STRING setMultiplayerRealPosition("
64756: PUSH
64757: LD_VAR 0 1
64761: STR
64762: PUSH
64763: LD_STRING ");
64765: STR
64766: PPUSH
64767: CALL_OW 559
// end ; end_of_file
64771: LD_VAR 0 1
64775: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalHardcore do var i ;
64776: LD_EXP 39
64780: IFFALSE 64823
64782: GO 64784
64784: DISABLE
64785: LD_INT 0
64787: PPUSH
// begin for i := 1 to 8 do
64788: LD_ADDR_VAR 0 1
64792: PUSH
64793: DOUBLE
64794: LD_INT 1
64796: DEC
64797: ST_TO_ADDR
64798: LD_INT 8
64800: PUSH
64801: FOR_TO
64802: IFFALSE 64821
// SetRestrict ( b_depot , i , state_disabled ) ;
64804: LD_INT 0
64806: PPUSH
64807: LD_VAR 0 1
64811: PPUSH
64812: LD_INT 0
64814: PPUSH
64815: CALL_OW 324
64819: GO 64801
64821: POP
64822: POP
// end ;
64823: PPOPN 1
64825: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalHardcore do var i , canWin ;
64826: LD_EXP 39
64830: IFFALSE 64838
64832: PUSH
64833: CALL 65048 0 0
64837: AND
64838: IFFALSE 64846
64840: PUSH
64841: LD_OWVAR 4
64845: AND
64846: IFFALSE 65045
64848: GO 64850
64850: DISABLE
64851: LD_INT 0
64853: PPUSH
64854: PPUSH
// begin canWin := false ;
64855: LD_ADDR_VAR 0 2
64859: PUSH
64860: LD_INT 0
64862: ST_TO_ADDR
// if not HasPower ( your_side ) then
64863: LD_OWVAR 2
64867: PPUSH
64868: CALL 65090 0 1
64872: NOT
64873: IFFALSE 64884
// begin Multiplayer_Loose_Message ;
64875: CALL_OW 521
// enable ( mpLose ) ;
64879: LD_INT 102
64881: ENABLE_MARKED
// end else
64882: GO 65045
// begin canWin := true ;
64884: LD_ADDR_VAR 0 2
64888: PUSH
64889: LD_INT 1
64891: ST_TO_ADDR
// for i := 1 to 8 do
64892: LD_ADDR_VAR 0 1
64896: PUSH
64897: DOUBLE
64898: LD_INT 1
64900: DEC
64901: ST_TO_ADDR
64902: LD_INT 8
64904: PUSH
64905: FOR_TO
64906: IFFALSE 65031
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
64908: LD_EXP 7
64912: PUSH
64913: LD_VAR 0 1
64917: ARRAY
64918: IFFALSE 64931
64920: PUSH
64921: LD_VAR 0 1
64925: PPUSH
64926: CALL_OW 108
64930: AND
64931: IFFALSE 64945
64933: PUSH
64934: LD_VAR 0 1
64938: PUSH
64939: LD_OWVAR 2
64943: NONEQUAL
64944: AND
64945: IFFALSE 65029
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
64947: LD_EXP 8
64951: PUSH
64952: LD_VAR 0 1
64956: ARRAY
64957: NOT
64958: IFTRUE 65006
64960: PUSH
64961: LD_EXP 8
64965: PUSH
64966: LD_VAR 0 1
64970: ARRAY
64971: PUSH
64972: LD_EXP 8
64976: PUSH
64977: LD_OWVAR 2
64981: ARRAY
64982: NONEQUAL
64983: IFFALSE 65005
64985: PUSH
64986: LD_OWVAR 2
64990: PPUSH
64991: LD_VAR 0 1
64995: PPUSH
64996: CALL_OW 81
65000: PUSH
65001: LD_INT 1
65003: NONEQUAL
65004: AND
65005: OR
65006: IFFALSE 65029
// if HasPower ( i ) then
65008: LD_VAR 0 1
65012: PPUSH
65013: CALL 65090 0 1
65017: IFFALSE 65029
// begin canWin := false ;
65019: LD_ADDR_VAR 0 2
65023: PUSH
65024: LD_INT 0
65026: ST_TO_ADDR
// break ;
65027: GO 65031
// end ;
65029: GO 64905
65031: POP
65032: POP
// if canWin then
65033: LD_VAR 0 2
65037: IFFALSE 65044
// enable ( mpWin ) else
65039: LD_INT 101
65041: ENABLE_MARKED
65042: GO 65045
// enable ;
65044: ENABLE
// end ; end ;
65045: PPOPN 2
65047: END
// function CanWinLoose ; begin
65048: LD_INT 0
65050: PPUSH
// result := true ;
65051: LD_ADDR_VAR 0 1
65055: PUSH
65056: LD_INT 1
65058: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
65059: CALL_OW 531
65063: IFFALSE 65075
65065: PUSH
65066: CALL_OW 519
65070: PUSH
65071: LD_INT 1
65073: GREATER
65074: AND
65075: IFFALSE 65085
// result := false ;
65077: LD_ADDR_VAR 0 1
65081: PUSH
65082: LD_INT 0
65084: ST_TO_ADDR
// end ;
65085: LD_VAR 0 1
65089: RET
// function HasPower ( i ) ; begin
65090: LD_INT 0
65092: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
65093: LD_INT 22
65095: PUSH
65096: LD_VAR 0 1
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 2
65107: PUSH
65108: LD_INT 30
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 30
65120: PUSH
65121: LD_INT 1
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: LIST
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PPUSH
65137: CALL_OW 69
65141: NOT
65142: IFFALSE 65146
// exit ;
65144: GO 65211
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
65146: LD_ADDR_VAR 0 2
65150: PUSH
65151: LD_INT 22
65153: PUSH
65154: LD_VAR 0 1
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 2
65165: PUSH
65166: LD_INT 21
65168: PUSH
65169: LD_INT 1
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 33
65178: PUSH
65179: LD_INT 3
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 33
65188: PUSH
65189: LD_INT 5
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PPUSH
65206: CALL_OW 69
65210: ST_TO_ADDR
// end ;
65211: LD_VAR 0 2
65215: RET
