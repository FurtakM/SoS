// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2797 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3181 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 2 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 2
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 3 , 0 , 3 , 3 , 3 , 3 , 3 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 3
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 3
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 220 , 160 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 220
 809: PUSH
 810: LD_INT 160
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 8
 838: PUSH
 839: LD_INT 9
 841: PUSH
 842: LD_INT 10
 844: PUSH
 845: LD_INT 11
 847: PUSH
 848: LD_INT 12
 850: PUSH
 851: LD_INT 13
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_EXP 19
 871: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 872: LD_VAR 0 1
 876: PUSH
 877: LD_INT 2
 879: EQUAL
 880: IFFALSE 892
// baseLevel := 1 else
 882: LD_ADDR_VAR 0 7
 886: PUSH
 887: LD_INT 1
 889: ST_TO_ADDR
 890: GO 906
// baseLevel := mpGameSettings [ 1 ] ;
 892: LD_ADDR_VAR 0 7
 896: PUSH
 897: LD_EXP 6
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 906: LD_ADDR_EXP 24
 910: PUSH
 911: LD_EXP 6
 915: PUSH
 916: LD_INT 2
 918: ARRAY
 919: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 920: LD_ADDR_EXP 25
 924: PUSH
 925: LD_EXP 6
 929: PUSH
 930: LD_INT 3
 932: ARRAY
 933: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 934: LD_ADDR_EXP 15
 938: PUSH
 939: LD_EXP 6
 943: PUSH
 944: LD_INT 4
 946: ARRAY
 947: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 948: LD_ADDR_EXP 27
 952: PUSH
 953: LD_EXP 6
 957: PUSH
 958: LD_INT 5
 960: ARRAY
 961: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 962: LD_ADDR_VAR 0 5
 966: PUSH
 967: LD_EXP 6
 971: PUSH
 972: LD_INT 6
 974: ARRAY
 975: PUSH
 976: LD_INT 0
 978: GREATER
 979: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 980: LD_ADDR_VAR 0 6
 984: PUSH
 985: LD_EXP 6
 989: PUSH
 990: LD_INT 7
 992: ARRAY
 993: PUSH
 994: LD_INT 0
 996: GREATER
 997: ST_TO_ADDR
// mpKingArea := 0 ;
 998: LD_ADDR_EXP 34
1002: PUSH
1003: LD_INT 0
1005: ST_TO_ADDR
// mpPoints := 0 ;
1006: LD_ADDR_EXP 35
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// mpEmissions := 0 ;
1014: LD_ADDR_EXP 37
1018: PUSH
1019: LD_INT 0
1021: ST_TO_ADDR
// kingArea := 0 ;
1022: LD_ADDR_EXP 1
1026: PUSH
1027: LD_INT 0
1029: ST_TO_ADDR
// kingCamArea := 0 ;
1030: LD_ADDR_EXP 2
1034: PUSH
1035: LD_INT 0
1037: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1038: LD_EXP 6
1042: PUSH
1043: LD_INT 9
1045: ARRAY
1046: IFFALSE 1178
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1048: LD_ADDR_EXP 36
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 3
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 12
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 24
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 12
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 23
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 21
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 42
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 21
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 42
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: LIST
1177: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1178: LD_ADDR_EXP 16
1182: PUSH
1183: LD_EXP 6
1187: PUSH
1188: LD_INT 11
1190: ARRAY
1191: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1192: LD_ADDR_EXP 22
1196: PUSH
1197: LD_EXP 6
1201: PUSH
1202: LD_INT 12
1204: ARRAY
1205: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1206: LD_ADDR_EXP 26
1210: PUSH
1211: LD_EXP 6
1215: PUSH
1216: LD_INT 13
1218: ARRAY
1219: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1220: LD_ADDR_EXP 33
1224: PUSH
1225: LD_EXP 6
1229: PUSH
1230: LD_INT 14
1232: ARRAY
1233: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1234: LD_ADDR_EXP 30
1238: PUSH
1239: LD_EXP 6
1243: PUSH
1244: LD_INT 15
1246: ARRAY
1247: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1248: LD_ADDR_EXP 28
1252: PUSH
1253: LD_EXP 6
1257: PUSH
1258: LD_INT 18
1260: ARRAY
1261: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1262: LD_ADDR_EXP 20
1266: PUSH
1267: LD_EXP 6
1271: PUSH
1272: LD_INT 21
1274: ARRAY
1275: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1276: LD_ADDR_EXP 31
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 3
1286: PUSH
1287: LD_INT 4
1289: PUSH
1290: LD_INT 5
1292: PUSH
1293: LD_INT 6
1295: PUSH
1296: LD_INT 7
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 5 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) ] ;
1307: LD_ADDR_VAR 0 8
1311: PUSH
1312: LD_INT 16
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: CALL 53591 0 2
1322: PUSH
1323: LD_INT 17
1325: PPUSH
1326: LD_INT 2
1328: PPUSH
1329: CALL 53591 0 2
1333: PUSH
1334: LD_INT 18
1336: PPUSH
1337: LD_INT 3
1339: PPUSH
1340: CALL 53591 0 2
1344: PUSH
1345: LD_INT 19
1347: PPUSH
1348: LD_INT 5
1350: PPUSH
1351: CALL 53591 0 2
1355: PUSH
1356: LD_INT 20
1358: PPUSH
1359: LD_INT 5
1361: PPUSH
1362: CALL 53591 0 2
1366: PUSH
1367: LD_INT 21
1369: PPUSH
1370: LD_INT 0
1372: PPUSH
1373: CALL 53591 0 2
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: DOUBLE
1392: LD_INT 1
1394: DEC
1395: ST_TO_ADDR
1396: LD_VAR 0 8
1400: PPUSH
1401: CALL 12906 0 1
1405: PUSH
1406: FOR_TO
1407: IFFALSE 1511
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1409: LD_ADDR_EXP 21
1413: PUSH
1414: LD_EXP 21
1418: PPUSH
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_VAR 0 8
1428: PUSH
1429: LD_VAR 0 3
1433: ARRAY
1434: PUSH
1435: LD_INT 1
1437: ARRAY
1438: PPUSH
1439: LD_VAR 0 8
1443: PUSH
1444: LD_VAR 0 3
1448: ARRAY
1449: PUSH
1450: LD_INT 3
1452: ARRAY
1453: PPUSH
1454: LD_INT 10
1456: PPUSH
1457: CALL_OW 272
1461: PUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 2
1475: ARRAY
1476: PPUSH
1477: LD_VAR 0 8
1481: PUSH
1482: LD_VAR 0 3
1486: ARRAY
1487: PUSH
1488: LD_INT 3
1490: ARRAY
1491: PPUSH
1492: LD_INT 10
1494: PPUSH
1495: CALL_OW 273
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 1
1508: ST_TO_ADDR
1509: GO 1406
1511: POP
1512: POP
// if hasOil then
1513: LD_VAR 0 5
1517: IFFALSE 1628
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1519: LD_ADDR_VAR 0 4
1523: PUSH
1524: LD_EXP 6
1528: PUSH
1529: LD_INT 6
1531: ARRAY
1532: PUSH
1533: LD_INT 2
1535: EQUAL
1536: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1537: LD_ADDR_EXP 12
1541: PUSH
1542: LD_INT 22
1544: PPUSH
1545: LD_VAR 0 4
1549: PPUSH
1550: CALL 53424 0 2
1554: PUSH
1555: LD_INT 24
1557: PPUSH
1558: LD_VAR 0 4
1562: PPUSH
1563: CALL 53424 0 2
1567: PUSH
1568: LD_INT 26
1570: PPUSH
1571: LD_VAR 0 4
1575: PPUSH
1576: CALL 53424 0 2
1580: PUSH
1581: LD_INT 28
1583: PPUSH
1584: LD_VAR 0 4
1588: PPUSH
1589: CALL 53424 0 2
1593: PUSH
1594: LD_INT 30
1596: PPUSH
1597: LD_VAR 0 4
1601: PPUSH
1602: CALL 53424 0 2
1606: PUSH
1607: LD_INT 32
1609: PPUSH
1610: LD_VAR 0 4
1614: PPUSH
1615: CALL 53424 0 2
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: ST_TO_ADDR
// end ; if hasSib then
1628: LD_VAR 0 6
1632: IFFALSE 1743
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1634: LD_ADDR_VAR 0 4
1638: PUSH
1639: LD_EXP 6
1643: PUSH
1644: LD_INT 7
1646: ARRAY
1647: PUSH
1648: LD_INT 2
1650: EQUAL
1651: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1652: LD_ADDR_EXP 13
1656: PUSH
1657: LD_INT 23
1659: PPUSH
1660: LD_VAR 0 4
1664: PPUSH
1665: CALL 53424 0 2
1669: PUSH
1670: LD_INT 25
1672: PPUSH
1673: LD_VAR 0 4
1677: PPUSH
1678: CALL 53424 0 2
1682: PUSH
1683: LD_INT 27
1685: PPUSH
1686: LD_VAR 0 4
1690: PPUSH
1691: CALL 53424 0 2
1695: PUSH
1696: LD_INT 29
1698: PPUSH
1699: LD_VAR 0 4
1703: PPUSH
1704: CALL 53424 0 2
1708: PUSH
1709: LD_INT 31
1711: PPUSH
1712: LD_VAR 0 4
1716: PPUSH
1717: CALL 53424 0 2
1721: PUSH
1722: LD_INT 33
1724: PPUSH
1725: LD_VAR 0 4
1729: PPUSH
1730: CALL 53424 0 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1743: LD_VAR 0 7
1747: PUSH
1748: LD_INT 1
1750: GREATEREQUAL
1751: IFFALSE 1763
// mpDepots := startPos ;
1753: LD_ADDR_EXP 14
1757: PUSH
1758: LD_VAR 0 8
1762: ST_TO_ADDR
// if baseLevel >= 2 then
1763: LD_VAR 0 7
1767: PUSH
1768: LD_INT 2
1770: GREATEREQUAL
1771: IFFALSE 2086
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] ] ;
1773: LD_ADDR_EXP 17
1777: PUSH
1778: LD_INT 31
1780: PUSH
1781: LD_INT 35
1783: PPUSH
1784: LD_INT 5
1786: PPUSH
1787: CALL 53591 0 2
1791: ADD
1792: PUSH
1793: LD_INT 31
1795: PUSH
1796: LD_INT 36
1798: PPUSH
1799: LD_INT 5
1801: PPUSH
1802: CALL 53591 0 2
1806: ADD
1807: PUSH
1808: LD_INT 4
1810: PUSH
1811: LD_INT 34
1813: PPUSH
1814: LD_INT 5
1816: PPUSH
1817: CALL 53591 0 2
1821: ADD
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 31
1830: PUSH
1831: LD_INT 38
1833: PPUSH
1834: LD_INT 5
1836: PPUSH
1837: CALL 53591 0 2
1841: ADD
1842: PUSH
1843: LD_INT 31
1845: PUSH
1846: LD_INT 39
1848: PPUSH
1849: LD_INT 0
1851: PPUSH
1852: CALL 53591 0 2
1856: ADD
1857: PUSH
1858: LD_INT 4
1860: PUSH
1861: LD_INT 37
1863: PPUSH
1864: LD_INT 5
1866: PPUSH
1867: CALL 53591 0 2
1871: ADD
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 31
1880: PUSH
1881: LD_INT 41
1883: PPUSH
1884: LD_INT 0
1886: PPUSH
1887: CALL 53591 0 2
1891: ADD
1892: PUSH
1893: LD_INT 31
1895: PUSH
1896: LD_INT 42
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL 53591 0 2
1906: ADD
1907: PUSH
1908: LD_INT 4
1910: PUSH
1911: LD_INT 40
1913: PPUSH
1914: LD_INT 0
1916: PPUSH
1917: CALL 53591 0 2
1921: ADD
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 31
1930: PUSH
1931: LD_INT 44
1933: PPUSH
1934: LD_INT 2
1936: PPUSH
1937: CALL 53591 0 2
1941: ADD
1942: PUSH
1943: LD_INT 31
1945: PUSH
1946: LD_INT 45
1948: PPUSH
1949: LD_INT 2
1951: PPUSH
1952: CALL 53591 0 2
1956: ADD
1957: PUSH
1958: LD_INT 4
1960: PUSH
1961: LD_INT 43
1963: PPUSH
1964: LD_INT 2
1966: PPUSH
1967: CALL 53591 0 2
1971: ADD
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 31
1980: PUSH
1981: LD_INT 47
1983: PPUSH
1984: LD_INT 2
1986: PPUSH
1987: CALL 53591 0 2
1991: ADD
1992: PUSH
1993: LD_INT 31
1995: PUSH
1996: LD_INT 48
1998: PPUSH
1999: LD_INT 3
2001: PPUSH
2002: CALL 53591 0 2
2006: ADD
2007: PUSH
2008: LD_INT 4
2010: PUSH
2011: LD_INT 46
2013: PPUSH
2014: LD_INT 2
2016: PPUSH
2017: CALL 53591 0 2
2021: ADD
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 31
2030: PUSH
2031: LD_INT 50
2033: PPUSH
2034: LD_INT 3
2036: PPUSH
2037: CALL 53591 0 2
2041: ADD
2042: PUSH
2043: LD_INT 31
2045: PUSH
2046: LD_INT 51
2048: PPUSH
2049: LD_INT 3
2051: PPUSH
2052: CALL 53591 0 2
2056: ADD
2057: PUSH
2058: LD_INT 4
2060: PUSH
2061: LD_INT 49
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL 53591 0 2
2071: ADD
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: ST_TO_ADDR
// end ; end ;
2086: LD_VAR 0 2
2090: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2091: GO 2093
2093: DISABLE
2094: LD_INT 0
2096: PPUSH
2097: PPUSH
2098: PPUSH
2099: PPUSH
2100: PPUSH
2101: PPUSH
2102: PPUSH
2103: PPUSH
// begin if not mpShipments then
2104: LD_EXP 27
2108: NOT
2109: IFFALSE 2113
// exit ;
2111: GO 2651
// case mpShipments of 1 :
2113: LD_EXP 27
2117: PUSH
2118: LD_INT 1
2120: DOUBLE
2121: EQUAL
2122: IFTRUE 2126
2124: GO 2161
2126: POP
// begin time := 0 0$30 ;
2127: LD_ADDR_VAR 0 4
2131: PUSH
2132: LD_INT 1050
2134: ST_TO_ADDR
// normalTime := 0 0$30 ;
2135: LD_ADDR_VAR 0 6
2139: PUSH
2140: LD_INT 1050
2142: ST_TO_ADDR
// maxTime := 1 1$20 ;
2143: LD_ADDR_VAR 0 8
2147: PUSH
2148: LD_INT 2800
2150: ST_TO_ADDR
// delayTime := 0 0$5 ;
2151: LD_ADDR_VAR 0 7
2155: PUSH
2156: LD_INT 175
2158: ST_TO_ADDR
// end ; 2 :
2159: GO 2291
2161: LD_INT 2
2163: DOUBLE
2164: EQUAL
2165: IFTRUE 2169
2167: GO 2204
2169: POP
// begin time := 0 0$25 ;
2170: LD_ADDR_VAR 0 4
2174: PUSH
2175: LD_INT 875
2177: ST_TO_ADDR
// normalTime := 0 0$25 ;
2178: LD_ADDR_VAR 0 6
2182: PUSH
2183: LD_INT 875
2185: ST_TO_ADDR
// maxTime := 1 1$10 ;
2186: LD_ADDR_VAR 0 8
2190: PUSH
2191: LD_INT 2450
2193: ST_TO_ADDR
// delayTime := 0 0$4 ;
2194: LD_ADDR_VAR 0 7
2198: PUSH
2199: LD_INT 140
2201: ST_TO_ADDR
// end ; 3 :
2202: GO 2291
2204: LD_INT 3
2206: DOUBLE
2207: EQUAL
2208: IFTRUE 2212
2210: GO 2247
2212: POP
// begin time := 0 0$20 ;
2213: LD_ADDR_VAR 0 4
2217: PUSH
2218: LD_INT 700
2220: ST_TO_ADDR
// normalTime := 0 0$20 ;
2221: LD_ADDR_VAR 0 6
2225: PUSH
2226: LD_INT 700
2228: ST_TO_ADDR
// maxTime := 1 1$00 ;
2229: LD_ADDR_VAR 0 8
2233: PUSH
2234: LD_INT 2100
2236: ST_TO_ADDR
// delayTime := 0 0$3 ;
2237: LD_ADDR_VAR 0 7
2241: PUSH
2242: LD_INT 105
2244: ST_TO_ADDR
// end ; 4 :
2245: GO 2291
2247: LD_INT 4
2249: DOUBLE
2250: EQUAL
2251: IFTRUE 2255
2253: GO 2290
2255: POP
// begin time := 0 0$15 ;
2256: LD_ADDR_VAR 0 4
2260: PUSH
2261: LD_INT 525
2263: ST_TO_ADDR
// normalTime := 0 0$15 ;
2264: LD_ADDR_VAR 0 6
2268: PUSH
2269: LD_INT 525
2271: ST_TO_ADDR
// maxTime := 0 0$55 ;
2272: LD_ADDR_VAR 0 8
2276: PUSH
2277: LD_INT 1925
2279: ST_TO_ADDR
// delayTime := 0 0$2 ;
2280: LD_ADDR_VAR 0 7
2284: PUSH
2285: LD_INT 70
2287: ST_TO_ADDR
// end ; end ;
2288: GO 2291
2290: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_INT 8
2298: PUSH
2299: LD_INT 9
2301: PUSH
2302: LD_INT 10
2304: PUSH
2305: LD_INT 11
2307: PUSH
2308: LD_INT 12
2310: PUSH
2311: LD_INT 13
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: ST_TO_ADDR
// areas := [ ] ;
2322: LD_ADDR_VAR 0 5
2326: PUSH
2327: EMPTY
2328: ST_TO_ADDR
// for i := 1 to 8 do
2329: LD_ADDR_VAR 0 1
2333: PUSH
2334: DOUBLE
2335: LD_INT 1
2337: DEC
2338: ST_TO_ADDR
2339: LD_INT 8
2341: PUSH
2342: FOR_TO
2343: IFFALSE 2390
// begin if not mpSidePositions [ i ] then
2345: LD_EXP 7
2349: PUSH
2350: LD_VAR 0 1
2354: ARRAY
2355: NOT
2356: IFFALSE 2360
// continue ;
2358: GO 2342
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2360: LD_ADDR_VAR 0 5
2364: PUSH
2365: LD_VAR 0 5
2369: PUSH
2370: LD_VAR 0 3
2374: PUSH
2375: LD_EXP 7
2379: PUSH
2380: LD_VAR 0 1
2384: ARRAY
2385: ARRAY
2386: ADD
2387: ST_TO_ADDR
// end ;
2388: GO 2342
2390: POP
2391: POP
// x := 1 ;
2392: LD_ADDR_VAR 0 2
2396: PUSH
2397: LD_INT 1
2399: ST_TO_ADDR
// repeat wait ( time ) ;
2400: LD_VAR 0 4
2404: PPUSH
2405: CALL_OW 67
// x := Inc ( x ) ;
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL 50245 0 1
2423: ST_TO_ADDR
// if x > 5 then
2424: LD_VAR 0 2
2428: PUSH
2429: LD_INT 5
2431: GREATER
2432: IFFALSE 2442
// x := 1 ;
2434: LD_ADDR_VAR 0 2
2438: PUSH
2439: LD_INT 1
2441: ST_TO_ADDR
// for i in areas do
2442: LD_ADDR_VAR 0 1
2446: PUSH
2447: LD_VAR 0 5
2451: PUSH
2452: FOR_IN
2453: IFFALSE 2492
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2455: LD_VAR 0 1
2459: PPUSH
2460: LD_INT 1
2462: PPUSH
2463: CALL_OW 287
2467: PUSH
2468: LD_INT 20
2470: LESS
2471: IFFALSE 2490
// begin CreateCratesArea ( x , i , true ) ;
2473: LD_VAR 0 2
2477: PPUSH
2478: LD_VAR 0 1
2482: PPUSH
2483: LD_INT 1
2485: PPUSH
2486: CALL_OW 55
// end ; end ;
2490: GO 2452
2492: POP
2493: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 20 then
2494: LD_INT 1
2496: PPUSH
2497: LD_INT 1
2499: PPUSH
2500: CALL_OW 287
2504: PUSH
2505: LD_INT 20
2507: LESS
2508: IFFALSE 2525
// CreateCratesArea ( x , MZBaseArea , true ) ;
2510: LD_VAR 0 2
2514: PPUSH
2515: LD_INT 1
2517: PPUSH
2518: LD_INT 1
2520: PPUSH
2521: CALL_OW 55
// if GetResourceArea ( MZSpecialArea , mat_cans ) = 0 then
2525: LD_INT 15
2527: PPUSH
2528: LD_INT 1
2530: PPUSH
2531: CALL_OW 287
2535: PUSH
2536: LD_INT 0
2538: EQUAL
2539: IFFALSE 2578
// begin for i := 1 to 3 do
2541: LD_ADDR_VAR 0 1
2545: PUSH
2546: DOUBLE
2547: LD_INT 1
2549: DEC
2550: ST_TO_ADDR
2551: LD_INT 3
2553: PUSH
2554: FOR_TO
2555: IFFALSE 2574
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2557: LD_VAR 0 2
2561: PPUSH
2562: LD_INT 15
2564: PPUSH
2565: LD_INT 1
2567: PPUSH
2568: CALL_OW 55
2572: GO 2554
2574: POP
2575: POP
// end else
2576: GO 2609
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
2578: LD_INT 15
2580: PPUSH
2581: LD_INT 1
2583: PPUSH
2584: CALL_OW 287
2588: PUSH
2589: LD_INT 30
2591: LESS
2592: IFFALSE 2609
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2594: LD_VAR 0 2
2598: PPUSH
2599: LD_INT 15
2601: PPUSH
2602: LD_INT 1
2604: PPUSH
2605: CALL_OW 55
// time := time + delayTime ;
2609: LD_ADDR_VAR 0 4
2613: PUSH
2614: LD_VAR 0 4
2618: PUSH
2619: LD_VAR 0 7
2623: PLUS
2624: ST_TO_ADDR
// if time > maxTime then
2625: LD_VAR 0 4
2629: PUSH
2630: LD_VAR 0 8
2634: GREATER
2635: IFFALSE 2647
// time := normalTime ;
2637: LD_ADDR_VAR 0 4
2641: PUSH
2642: LD_VAR 0 6
2646: ST_TO_ADDR
// until false ;
2647: LD_INT 0
2649: IFFALSE 2400
// end ; end_of_file
2651: PPOPN 8
2653: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2654: LD_VAR 0 1
2658: PPUSH
2659: CALL 54389 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: CALL 8083 0 1
// end ;
2672: PPOPN 1
2674: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2675: LD_VAR 0 1
2679: PPUSH
2680: CALL 54406 0 1
// end ;
2684: PPOPN 1
2686: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2687: LD_VAR 0 1
2691: PPUSH
2692: CALL 8790 0 1
2696: PPOPN 1
2698: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2699: LD_VAR 0 1
2703: PPUSH
2704: LD_VAR 0 2
2708: PPUSH
2709: CALL 54447 0 2
2713: PPOPN 2
2715: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2716: LD_VAR 0 1
2720: PPUSH
2721: LD_VAR 0 2
2725: PPUSH
2726: LD_VAR 0 3
2730: PPUSH
2731: CALL 8843 0 3
2735: PPOPN 3
2737: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2738: LD_VAR 0 1
2742: PPUSH
2743: LD_VAR 0 2
2747: PPUSH
2748: LD_VAR 0 3
2752: PPUSH
2753: LD_VAR 0 4
2757: PPUSH
2758: LD_VAR 0 5
2762: PPUSH
2763: CALL 9482 0 5
// end ;
2767: PPOPN 5
2769: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2770: LD_VAR 0 1
2774: PPUSH
2775: LD_VAR 0 2
2779: PPUSH
2780: LD_VAR 0 3
2784: PPUSH
2785: LD_VAR 0 4
2789: PPUSH
2790: CALL 9585 0 4
2794: PPOPN 4
2796: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2797: LD_INT 0
2799: PPUSH
2800: PPUSH
// disable ( mpActive ) ;
2801: LD_INT 100
2803: DISABLE_MARKED
// disable ( mpWin ) ;
2804: LD_INT 101
2806: DISABLE_MARKED
// disable ( mpLose ) ;
2807: LD_INT 102
2809: DISABLE_MARKED
// mpGameType := 0 ;
2810: LD_ADDR_EXP 3
2814: PUSH
2815: LD_INT 0
2817: ST_TO_ADDR
// mpGameSettings := [ ] ;
2818: LD_ADDR_EXP 6
2822: PUSH
2823: EMPTY
2824: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2825: LD_ADDR_EXP 4
2829: PUSH
2830: EMPTY
2831: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2832: LD_ADDR_EXP 5
2836: PUSH
2837: EMPTY
2838: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2839: LD_ADDR_EXP 29
2843: PUSH
2844: LD_INT 2
2846: PUSH
2847: LD_INT 2
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2854: LD_ADDR_EXP 12
2858: PUSH
2859: EMPTY
2860: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2861: LD_ADDR_EXP 13
2865: PUSH
2866: EMPTY
2867: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2868: LD_ADDR_EXP 41
2872: PUSH
2873: EMPTY
2874: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2875: LD_ADDR_EXP 42
2879: PUSH
2880: EMPTY
2881: ST_TO_ADDR
// mpDepots := [ ] ;
2882: LD_ADDR_EXP 14
2886: PUSH
2887: EMPTY
2888: ST_TO_ADDR
// mpBuildings := [ ] ;
2889: LD_ADDR_EXP 17
2893: PUSH
2894: EMPTY
2895: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2896: LD_ADDR_EXP 18
2900: PUSH
2901: EMPTY
2902: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2903: LD_ADDR_EXP 19
2907: PUSH
2908: EMPTY
2909: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2910: LD_ADDR_EXP 20
2914: PUSH
2915: EMPTY
2916: ST_TO_ADDR
// mpStartingResources := [ ] ;
2917: LD_ADDR_EXP 15
2921: PUSH
2922: EMPTY
2923: ST_TO_ADDR
// mpStartPos := [ ] ;
2924: LD_ADDR_EXP 21
2928: PUSH
2929: EMPTY
2930: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2931: LD_ADDR_EXP 22
2935: PUSH
2936: LD_INT 1
2938: NEG
2939: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2940: LD_ADDR_EXP 23
2944: PUSH
2945: EMPTY
2946: ST_TO_ADDR
// mpApemans := [ ] ;
2947: LD_ADDR_EXP 30
2951: PUSH
2952: EMPTY
2953: ST_TO_ADDR
// mpApemansArea := [ ] ;
2954: LD_ADDR_EXP 31
2958: PUSH
2959: EMPTY
2960: ST_TO_ADDR
// mpRespawn := [ ] ;
2961: LD_ADDR_EXP 33
2965: PUSH
2966: EMPTY
2967: ST_TO_ADDR
// mpKingArea := 0 ;
2968: LD_ADDR_EXP 34
2972: PUSH
2973: LD_INT 0
2975: ST_TO_ADDR
// mpPoints := [ ] ;
2976: LD_ADDR_EXP 35
2980: PUSH
2981: EMPTY
2982: ST_TO_ADDR
// mpVehicles := 0 ;
2983: LD_ADDR_EXP 36
2987: PUSH
2988: LD_INT 0
2990: ST_TO_ADDR
// mpShipments := 0 ;
2991: LD_ADDR_EXP 27
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2999: LD_ADDR_EXP 40
3003: PUSH
3004: EMPTY
3005: PUSH
3006: EMPTY
3007: PUSH
3008: EMPTY
3009: PUSH
3010: EMPTY
3011: PUSH
3012: EMPTY
3013: PUSH
3014: EMPTY
3015: PUSH
3016: EMPTY
3017: PUSH
3018: EMPTY
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: LIST
3024: LIST
3025: LIST
3026: LIST
3027: LIST
3028: LIST
3029: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3030: LD_ADDR_EXP 32
3034: PUSH
3035: EMPTY
3036: PUSH
3037: EMPTY
3038: PUSH
3039: EMPTY
3040: PUSH
3041: EMPTY
3042: PUSH
3043: EMPTY
3044: PUSH
3045: EMPTY
3046: PUSH
3047: EMPTY
3048: PUSH
3049: EMPTY
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: ST_TO_ADDR
// mpEmissions := 0 ;
3061: LD_ADDR_EXP 37
3065: PUSH
3066: LD_INT 0
3068: ST_TO_ADDR
// mpTeleports := 0 ;
3069: LD_ADDR_EXP 43
3073: PUSH
3074: LD_INT 0
3076: ST_TO_ADDR
// mpArtifacts := 0 ;
3077: LD_ADDR_EXP 44
3081: PUSH
3082: LD_INT 0
3084: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3085: LD_ADDR_EXP 45
3089: PUSH
3090: LD_INT 0
3092: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3093: LD_ADDR_EXP 25
3097: PUSH
3098: LD_INT 3
3100: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3101: LD_ADDR_EXP 24
3105: PUSH
3106: LD_INT 15
3108: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3109: LD_ADDR_EXP 38
3113: PUSH
3114: LD_INT 0
3116: ST_TO_ADDR
// mpGameActive := false ;
3117: LD_ADDR_EXP 39
3121: PUSH
3122: LD_INT 0
3124: ST_TO_ADDR
// mpBlockRespThread := false ;
3125: LD_ADDR_EXP 46
3129: PUSH
3130: LD_INT 0
3132: ST_TO_ADDR
// for i := 1 to 32 do
3133: LD_ADDR_VAR 0 2
3137: PUSH
3138: DOUBLE
3139: LD_INT 1
3141: DEC
3142: ST_TO_ADDR
3143: LD_INT 32
3145: PUSH
3146: FOR_TO
3147: IFFALSE 3174
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3149: LD_ADDR_EXP 6
3153: PUSH
3154: LD_EXP 6
3158: PPUSH
3159: LD_VAR 0 2
3163: PPUSH
3164: LD_INT 0
3166: PPUSH
3167: CALL_OW 1
3171: ST_TO_ADDR
3172: GO 3146
3174: POP
3175: POP
// end ;
3176: LD_VAR 0 1
3180: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3181: LD_INT 0
3183: PPUSH
3184: PPUSH
3185: PPUSH
3186: PPUSH
3187: PPUSH
3188: PPUSH
3189: PPUSH
3190: PPUSH
3191: PPUSH
3192: PPUSH
3193: PPUSH
3194: PPUSH
3195: PPUSH
3196: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
3197: LD_ADDR_VAR 0 14
3201: PUSH
3202: LD_INT 1
3204: PUSH
3205: LD_INT 2
3207: PUSH
3208: LD_INT 3
3210: PUSH
3211: LD_INT 5
3213: PUSH
3214: LD_INT 6
3216: PUSH
3217: LD_INT 7
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: ST_TO_ADDR
// for i in gameTypes do
3228: LD_ADDR_VAR 0 2
3232: PUSH
3233: LD_VAR 0 14
3237: PUSH
3238: FOR_IN
3239: IFFALSE 3248
// disable ( i ) ;
3241: LD_VAR 0 2
3245: DISABLE_MARKED
3246: GO 3238
3248: POP
3249: POP
// if Multiplayer then
3250: LD_OWVAR 4
3254: IFFALSE 3438
// begin mpGameType := mp_game_type ;
3256: LD_ADDR_EXP 3
3260: PUSH
3261: LD_OWVAR 6
3265: ST_TO_ADDR
// your_side := mp_player_side ;
3266: LD_ADDR_OWVAR 2
3270: PUSH
3271: LD_OWVAR 7
3275: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3276: LD_ADDR_EXP 7
3280: PUSH
3281: LD_OWVAR 17
3285: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3286: LD_ADDR_EXP 8
3290: PUSH
3291: LD_OWVAR 15
3295: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3296: LD_ADDR_EXP 9
3300: PUSH
3301: LD_OWVAR 16
3305: ST_TO_ADDR
// mpTeams := mp_teams ;
3306: LD_ADDR_EXP 10
3310: PUSH
3311: LD_OWVAR 12
3315: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3316: LD_ADDR_VAR 0 2
3320: PUSH
3321: DOUBLE
3322: LD_INT 1
3324: DEC
3325: ST_TO_ADDR
3326: LD_EXP 4
3330: PPUSH
3331: CALL 12906 0 1
3335: PUSH
3336: FOR_TO
3337: IFFALSE 3413
// begin setting := mpGameSettingsKeys [ i ] ;
3339: LD_ADDR_VAR 0 12
3343: PUSH
3344: LD_EXP 4
3348: PUSH
3349: LD_VAR 0 2
3353: ARRAY
3354: ST_TO_ADDR
// if setting then
3355: LD_VAR 0 12
3359: IFFALSE 3411
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3361: LD_ADDR_EXP 6
3365: PUSH
3366: LD_EXP 6
3370: PPUSH
3371: LD_VAR 0 2
3375: PPUSH
3376: LD_EXP 5
3380: PUSH
3381: LD_VAR 0 2
3385: ARRAY
3386: PUSH
3387: LD_VAR 0 2
3391: PUSH
3392: LD_INT 1
3394: MINUS
3395: PPUSH
3396: CALL_OW 426
3400: PUSH
3401: LD_INT 1
3403: PLUS
3404: ARRAY
3405: PPUSH
3406: CALL_OW 1
3410: ST_TO_ADDR
// end ;
3411: GO 3336
3413: POP
3414: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3415: LD_ADDR_EXP 11
3419: PUSH
3420: LD_EXP 8
3424: PUSH
3425: LD_INT 0
3427: PUSH
3428: EMPTY
3429: LIST
3430: DIFF
3431: PUSH
3432: LD_INT 1
3434: GREATER
3435: ST_TO_ADDR
// end else
3436: GO 3438
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3438: LD_EXP 3
3442: PPUSH
3443: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3447: LD_EXP 18
3451: PPUSH
3452: CALL 12906 0 1
3456: IFFALSE 3487
// begin for i in mpMarkedAreas do
3458: LD_ADDR_VAR 0 2
3462: PUSH
3463: LD_EXP 18
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3485
// SetAreaMapShow ( i , 0 ) ;
3471: LD_VAR 0 2
3475: PPUSH
3476: LD_INT 0
3478: PPUSH
3479: CALL_OW 424
3483: GO 3468
3485: POP
3486: POP
// end ; for i := 1 to 8 do
3487: LD_ADDR_VAR 0 2
3491: PUSH
3492: DOUBLE
3493: LD_INT 1
3495: DEC
3496: ST_TO_ADDR
3497: LD_INT 8
3499: PUSH
3500: FOR_TO
3501: IFFALSE 4936
// begin if not mpSidePositions [ i ] then
3503: LD_EXP 7
3507: PUSH
3508: LD_VAR 0 2
3512: ARRAY
3513: NOT
3514: IFFALSE 3518
// continue ;
3516: GO 3500
// side := i ;
3518: LD_ADDR_VAR 0 7
3522: PUSH
3523: LD_VAR 0 2
3527: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3528: LD_ADDR_VAR 0 9
3532: PUSH
3533: LD_EXP 9
3537: PUSH
3538: LD_VAR 0 2
3542: ARRAY
3543: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3544: LD_ADDR_VAR 0 8
3548: PUSH
3549: LD_EXP 7
3553: PUSH
3554: LD_VAR 0 2
3558: ARRAY
3559: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3560: LD_EXP 12
3564: PPUSH
3565: CALL 12906 0 1
3569: IFFALSE 3646
// begin for j in mpOilDeposits [ pos ] do
3571: LD_ADDR_VAR 0 3
3575: PUSH
3576: LD_EXP 12
3580: PUSH
3581: LD_VAR 0 8
3585: ARRAY
3586: PUSH
3587: FOR_IN
3588: IFFALSE 3644
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3590: LD_VAR 0 3
3594: PUSH
3595: LD_INT 1
3597: ARRAY
3598: PPUSH
3599: LD_VAR 0 3
3603: PUSH
3604: LD_INT 2
3606: ARRAY
3607: PPUSH
3608: LD_INT 2
3610: PPUSH
3611: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3615: LD_VAR 0 3
3619: PUSH
3620: LD_INT 1
3622: ARRAY
3623: PPUSH
3624: LD_VAR 0 3
3628: PUSH
3629: LD_INT 2
3631: ARRAY
3632: PPUSH
3633: LD_VAR 0 7
3637: PPUSH
3638: CALL_OW 441
// end ;
3642: GO 3587
3644: POP
3645: POP
// end ; if Count ( mpSibDeposits ) then
3646: LD_EXP 13
3650: PPUSH
3651: CALL 12906 0 1
3655: IFFALSE 3732
// begin for j in mpSibDeposits [ pos ] do
3657: LD_ADDR_VAR 0 3
3661: PUSH
3662: LD_EXP 13
3666: PUSH
3667: LD_VAR 0 8
3671: ARRAY
3672: PUSH
3673: FOR_IN
3674: IFFALSE 3730
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3676: LD_VAR 0 3
3680: PUSH
3681: LD_INT 1
3683: ARRAY
3684: PPUSH
3685: LD_VAR 0 3
3689: PUSH
3690: LD_INT 2
3692: ARRAY
3693: PPUSH
3694: LD_INT 3
3696: PPUSH
3697: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3701: LD_VAR 0 3
3705: PUSH
3706: LD_INT 1
3708: ARRAY
3709: PPUSH
3710: LD_VAR 0 3
3714: PUSH
3715: LD_INT 2
3717: ARRAY
3718: PPUSH
3719: LD_VAR 0 7
3723: PPUSH
3724: CALL_OW 441
// end ;
3728: GO 3673
3730: POP
3731: POP
// end ; InitBc ;
3732: CALL_OW 21
// InitUc ;
3736: CALL_OW 18
// uc_side := side ;
3740: LD_ADDR_OWVAR 20
3744: PUSH
3745: LD_VAR 0 7
3749: ST_TO_ADDR
// uc_nation := nation ;
3750: LD_ADDR_OWVAR 21
3754: PUSH
3755: LD_VAR 0 9
3759: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3760: LD_EXP 22
3764: PUSH
3765: LD_INT 1
3767: NEG
3768: GREATER
3769: IFFALSE 3928
// begin x := mpStartPos [ pos ] [ 1 ] ;
3771: LD_ADDR_VAR 0 5
3775: PUSH
3776: LD_EXP 21
3780: PUSH
3781: LD_VAR 0 8
3785: ARRAY
3786: PUSH
3787: LD_INT 1
3789: ARRAY
3790: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3791: LD_ADDR_VAR 0 6
3795: PUSH
3796: LD_EXP 21
3800: PUSH
3801: LD_VAR 0 8
3805: ARRAY
3806: PUSH
3807: LD_INT 2
3809: ARRAY
3810: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3811: LD_VAR 0 5
3815: PPUSH
3816: LD_VAR 0 6
3820: PPUSH
3821: LD_INT 12
3823: PPUSH
3824: LD_INT 2
3826: PPUSH
3827: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3831: LD_ADDR_EXP 23
3835: PUSH
3836: LD_EXP 23
3840: PPUSH
3841: LD_VAR 0 7
3845: PPUSH
3846: LD_VAR 0 7
3850: PPUSH
3851: LD_VAR 0 5
3855: PPUSH
3856: LD_VAR 0 6
3860: PPUSH
3861: LD_INT 1
3863: PUSH
3864: LD_INT 100
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: PUSH
3871: LD_INT 2
3873: PUSH
3874: LD_INT 70
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: PUSH
3881: LD_INT 3
3883: PUSH
3884: LD_INT 40
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: PUSH
3891: LD_INT 10
3893: PUSH
3894: LD_INT 25
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: PUSH
3901: LD_INT 20
3903: PUSH
3904: LD_INT 100
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: PPUSH
3918: CALL_OW 418
3922: PPUSH
3923: CALL_OW 1
3927: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3928: LD_EXP 14
3932: PPUSH
3933: CALL 12906 0 1
3937: IFFALSE 4132
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
3939: LD_EXP 3
3943: PUSH
3944: LD_INT 2
3946: PUSH
3947: LD_INT 6
3949: PUSH
3950: LD_INT 7
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: LIST
3957: IN
3958: IFFALSE 3978
// begin bc_level := 10 ;
3960: LD_ADDR_OWVAR 43
3964: PUSH
3965: LD_INT 10
3967: ST_TO_ADDR
// bc_type := b_warehouse ;
3968: LD_ADDR_OWVAR 42
3972: PUSH
3973: LD_INT 1
3975: ST_TO_ADDR
// end else
3976: GO 3994
// begin bc_level := 0 ;
3978: LD_ADDR_OWVAR 43
3982: PUSH
3983: LD_INT 0
3985: ST_TO_ADDR
// bc_type := b_depot ;
3986: LD_ADDR_OWVAR 42
3990: PUSH
3991: LD_INT 0
3993: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3994: LD_ADDR_VAR 0 4
3998: PUSH
3999: LD_EXP 14
4003: PUSH
4004: LD_VAR 0 8
4008: ARRAY
4009: PUSH
4010: LD_INT 1
4012: ARRAY
4013: PPUSH
4014: LD_EXP 14
4018: PUSH
4019: LD_VAR 0 8
4023: ARRAY
4024: PUSH
4025: LD_INT 2
4027: ARRAY
4028: PPUSH
4029: LD_EXP 14
4033: PUSH
4034: LD_VAR 0 8
4038: ARRAY
4039: PUSH
4040: LD_INT 3
4042: ARRAY
4043: PPUSH
4044: CALL_OW 47
4048: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4049: LD_VAR 0 4
4053: PPUSH
4054: LD_STRING @
4056: PUSH
4057: LD_VAR 0 7
4061: STR
4062: PPUSH
4063: CALL_OW 500
// if Count ( mpStartingResources ) then
4067: LD_EXP 15
4071: PPUSH
4072: CALL 12906 0 1
4076: IFFALSE 4130
// begin for j := 1 to mpStartingResources do
4078: LD_ADDR_VAR 0 3
4082: PUSH
4083: DOUBLE
4084: LD_INT 1
4086: DEC
4087: ST_TO_ADDR
4088: LD_EXP 15
4092: PUSH
4093: FOR_TO
4094: IFFALSE 4128
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4096: LD_VAR 0 4
4100: PPUSH
4101: CALL_OW 274
4105: PPUSH
4106: LD_VAR 0 3
4110: PPUSH
4111: LD_EXP 15
4115: PUSH
4116: LD_VAR 0 3
4120: ARRAY
4121: PPUSH
4122: CALL_OW 277
4126: GO 4093
4128: POP
4129: POP
// end ; end else
4130: GO 4339
// if Count ( mpStartingResources ) then
4132: LD_EXP 15
4136: PPUSH
4137: CALL 12906 0 1
4141: IFFALSE 4339
// begin x := mpStartPos [ pos ] [ 1 ] ;
4143: LD_ADDR_VAR 0 5
4147: PUSH
4148: LD_EXP 21
4152: PUSH
4153: LD_VAR 0 8
4157: ARRAY
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4163: LD_ADDR_VAR 0 6
4167: PUSH
4168: LD_EXP 21
4172: PUSH
4173: LD_VAR 0 8
4177: ARRAY
4178: PUSH
4179: LD_INT 2
4181: ARRAY
4182: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4183: LD_ADDR_VAR 0 3
4187: PUSH
4188: DOUBLE
4189: LD_INT 1
4191: DEC
4192: ST_TO_ADDR
4193: LD_EXP 15
4197: PUSH
4198: FOR_TO
4199: IFFALSE 4337
// begin resources := mpStartingResources [ j ] ;
4201: LD_ADDR_VAR 0 13
4205: PUSH
4206: LD_EXP 15
4210: PUSH
4211: LD_VAR 0 3
4215: ARRAY
4216: ST_TO_ADDR
// if resources = 0 then
4217: LD_VAR 0 13
4221: PUSH
4222: LD_INT 0
4224: EQUAL
4225: IFFALSE 4229
// continue ;
4227: GO 4198
// repeat if resources >= 50 then
4229: LD_VAR 0 13
4233: PUSH
4234: LD_INT 50
4236: GREATEREQUAL
4237: IFFALSE 4283
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4239: LD_VAR 0 3
4243: PPUSH
4244: LD_INT 5
4246: PPUSH
4247: LD_VAR 0 5
4251: PPUSH
4252: LD_VAR 0 6
4256: PPUSH
4257: LD_INT 6
4259: PPUSH
4260: LD_INT 0
4262: PPUSH
4263: CALL_OW 60
// resources := resources - 50 ;
4267: LD_ADDR_VAR 0 13
4271: PUSH
4272: LD_VAR 0 13
4276: PUSH
4277: LD_INT 50
4279: MINUS
4280: ST_TO_ADDR
// end else
4281: GO 4325
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4283: LD_VAR 0 3
4287: PPUSH
4288: LD_VAR 0 13
4292: PUSH
4293: LD_INT 10
4295: DIV
4296: PPUSH
4297: LD_VAR 0 5
4301: PPUSH
4302: LD_VAR 0 6
4306: PPUSH
4307: LD_INT 6
4309: PPUSH
4310: LD_INT 0
4312: PPUSH
4313: CALL_OW 60
// resources := 0 ;
4317: LD_ADDR_VAR 0 13
4321: PUSH
4322: LD_INT 0
4324: ST_TO_ADDR
// end ; until resources <= 0 ;
4325: LD_VAR 0 13
4329: PUSH
4330: LD_INT 0
4332: LESSEQUAL
4333: IFFALSE 4229
// end ;
4335: GO 4198
4337: POP
4338: POP
// end ; if Count ( mpBuildings ) then
4339: LD_EXP 17
4343: PPUSH
4344: CALL 12906 0 1
4348: IFFALSE 4426
// begin for j in mpBuildings [ pos ] do
4350: LD_ADDR_VAR 0 3
4354: PUSH
4355: LD_EXP 17
4359: PUSH
4360: LD_VAR 0 8
4364: ARRAY
4365: PUSH
4366: FOR_IN
4367: IFFALSE 4424
// begin bc_level := 0 ;
4369: LD_ADDR_OWVAR 43
4373: PUSH
4374: LD_INT 0
4376: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4377: LD_ADDR_OWVAR 42
4381: PUSH
4382: LD_VAR 0 3
4386: PUSH
4387: LD_INT 1
4389: ARRAY
4390: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4391: LD_VAR 0 3
4395: PUSH
4396: LD_INT 2
4398: ARRAY
4399: PPUSH
4400: LD_VAR 0 3
4404: PUSH
4405: LD_INT 3
4407: ARRAY
4408: PPUSH
4409: LD_VAR 0 3
4413: PUSH
4414: LD_INT 4
4416: ARRAY
4417: PPUSH
4418: CALL_OW 47
// end ;
4422: GO 4366
4424: POP
4425: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4426: LD_EXP 26
4430: IFFALSE 4450
4432: PUSH
4433: LD_INT 20
4435: PPUSH
4436: LD_VAR 0 7
4440: PPUSH
4441: CALL_OW 321
4445: PUSH
4446: LD_INT 1
4448: EQUAL
4449: AND
4450: IFFALSE 4467
// SetTech ( tech_SibDet , side , state_researched ) ;
4452: LD_INT 20
4454: PPUSH
4455: LD_VAR 0 7
4459: PPUSH
4460: LD_INT 2
4462: PPUSH
4463: CALL_OW 322
// if not mpArtifacts then
4467: LD_EXP 44
4471: NOT
4472: IFFALSE 4489
// SetTech ( tech_artifact , side , state_disabled ) ;
4474: LD_INT 24
4476: PPUSH
4477: LD_VAR 0 7
4481: PPUSH
4482: LD_INT 0
4484: PPUSH
4485: CALL_OW 322
// if mpSibBomb = 1 then
4489: LD_EXP 28
4493: PUSH
4494: LD_INT 1
4496: EQUAL
4497: IFFALSE 4516
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4499: LD_INT 25
4501: PPUSH
4502: LD_VAR 0 7
4506: PPUSH
4507: LD_INT 1
4509: PPUSH
4510: CALL_OW 322
// end else
4514: GO 4531
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4516: LD_INT 25
4518: PPUSH
4519: LD_VAR 0 7
4523: PPUSH
4524: LD_INT 0
4526: PPUSH
4527: CALL_OW 322
// end ; if mpVehicles then
4531: LD_EXP 36
4535: IFFALSE 4634
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4537: LD_ADDR_VAR 0 3
4541: PUSH
4542: LD_VAR 0 7
4546: PPUSH
4547: LD_VAR 0 9
4551: PPUSH
4552: LD_EXP 36
4556: PPUSH
4557: CALL 5857 0 3
4561: PUSH
4562: FOR_IN
4563: IFFALSE 4632
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4565: LD_VAR 0 3
4569: PPUSH
4570: LD_INT 0
4572: PPUSH
4573: LD_INT 5
4575: PPUSH
4576: CALL_OW 12
4580: PPUSH
4581: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4585: LD_VAR 0 3
4589: PPUSH
4590: LD_EXP 21
4594: PUSH
4595: LD_VAR 0 8
4599: ARRAY
4600: PUSH
4601: LD_INT 1
4603: ARRAY
4604: PPUSH
4605: LD_EXP 21
4609: PUSH
4610: LD_VAR 0 8
4614: ARRAY
4615: PUSH
4616: LD_INT 2
4618: ARRAY
4619: PPUSH
4620: LD_INT 12
4622: PPUSH
4623: LD_INT 0
4625: PPUSH
4626: CALL_OW 50
// end ;
4630: GO 4562
4632: POP
4633: POP
// end ; uc_nation := nation ;
4634: LD_ADDR_OWVAR 21
4638: PUSH
4639: LD_VAR 0 9
4643: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4644: LD_EXP 3
4648: PUSH
4649: LD_INT 6
4651: PUSH
4652: LD_INT 7
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: IN
4659: IFFALSE 4684
4661: PUSH
4662: LD_EXP 7
4666: PUSH
4667: LD_VAR 0 2
4671: ARRAY
4672: PUSH
4673: LD_INT 1
4675: PUSH
4676: LD_INT 2
4678: PUSH
4679: EMPTY
4680: LIST
4681: LIST
4682: IN
4683: AND
4684: IFFALSE 4732
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4686: LD_ADDR_VAR 0 11
4690: PUSH
4691: LD_VAR 0 7
4695: PPUSH
4696: LD_VAR 0 9
4700: PPUSH
4701: LD_EXP 24
4705: PUSH
4706: LD_EXP 24
4710: PUSH
4711: LD_INT 2
4713: DIV
4714: PLUS
4715: PPUSH
4716: LD_EXP 25
4720: PUSH
4721: LD_INT 1
4723: PLUS
4724: PPUSH
4725: CALL 5348 0 4
4729: ST_TO_ADDR
4730: GO 4762
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4732: LD_ADDR_VAR 0 11
4736: PUSH
4737: LD_VAR 0 7
4741: PPUSH
4742: LD_VAR 0 9
4746: PPUSH
4747: LD_EXP 24
4751: PPUSH
4752: LD_EXP 25
4756: PPUSH
4757: CALL 5348 0 4
4761: ST_TO_ADDR
// for j in team do
4762: LD_ADDR_VAR 0 3
4766: PUSH
4767: LD_VAR 0 11
4771: PUSH
4772: FOR_IN
4773: IFFALSE 4822
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4775: LD_VAR 0 3
4779: PPUSH
4780: LD_EXP 21
4784: PUSH
4785: LD_VAR 0 8
4789: ARRAY
4790: PUSH
4791: LD_INT 1
4793: ARRAY
4794: PPUSH
4795: LD_EXP 21
4799: PUSH
4800: LD_VAR 0 8
4804: ARRAY
4805: PUSH
4806: LD_INT 2
4808: ARRAY
4809: PPUSH
4810: LD_INT 12
4812: PPUSH
4813: LD_INT 0
4815: PPUSH
4816: CALL_OW 50
4820: GO 4772
4822: POP
4823: POP
// if mpApemans then
4824: LD_EXP 30
4828: IFFALSE 4934
// begin for j := 1 to mpApemans do
4830: LD_ADDR_VAR 0 3
4834: PUSH
4835: DOUBLE
4836: LD_INT 1
4838: DEC
4839: ST_TO_ADDR
4840: LD_EXP 30
4844: PUSH
4845: FOR_TO
4846: IFFALSE 4932
// begin PrepareApeman ( - 5 ) ;
4848: LD_INT 5
4850: NEG
4851: PPUSH
4852: CALL 44999 0 1
// ape := CreateHuman ;
4856: LD_ADDR_VAR 0 10
4860: PUSH
4861: CALL_OW 44
4865: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4866: LD_ADDR_EXP 32
4870: PUSH
4871: LD_EXP 32
4875: PPUSH
4876: LD_VAR 0 8
4880: PPUSH
4881: LD_EXP 32
4885: PUSH
4886: LD_VAR 0 8
4890: ARRAY
4891: PPUSH
4892: LD_VAR 0 10
4896: PPUSH
4897: CALL 48872 0 2
4901: PPUSH
4902: CALL_OW 1
4906: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4907: LD_VAR 0 10
4911: PPUSH
4912: LD_EXP 31
4916: PUSH
4917: LD_VAR 0 8
4921: ARRAY
4922: PPUSH
4923: LD_INT 0
4925: PPUSH
4926: CALL_OW 49
// end ;
4930: GO 4845
4932: POP
4933: POP
// end ; end ;
4934: GO 3500
4936: POP
4937: POP
// if not mpTeamGame then
4938: LD_EXP 11
4942: NOT
4943: IFFALSE 5041
// begin for i := 1 to 8 do
4945: LD_ADDR_VAR 0 2
4949: PUSH
4950: DOUBLE
4951: LD_INT 1
4953: DEC
4954: ST_TO_ADDR
4955: LD_INT 8
4957: PUSH
4958: FOR_TO
4959: IFFALSE 5037
// for j := 1 to 8 do
4961: LD_ADDR_VAR 0 3
4965: PUSH
4966: DOUBLE
4967: LD_INT 1
4969: DEC
4970: ST_TO_ADDR
4971: LD_INT 8
4973: PUSH
4974: FOR_TO
4975: IFFALSE 5033
// if i <> j then
4977: LD_VAR 0 2
4981: PUSH
4982: LD_VAR 0 3
4986: NONEQUAL
4987: IFFALSE 5011
// SetAttitude ( i , j , att_neutral , true ) else
4989: LD_VAR 0 2
4993: PPUSH
4994: LD_VAR 0 3
4998: PPUSH
4999: LD_INT 0
5001: PPUSH
5002: LD_INT 1
5004: PPUSH
5005: CALL_OW 80
5009: GO 5031
// SetAttitude ( i , j , att_friend , true ) ;
5011: LD_VAR 0 2
5015: PPUSH
5016: LD_VAR 0 3
5020: PPUSH
5021: LD_INT 1
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 80
5031: GO 4974
5033: POP
5034: POP
5035: GO 4958
5037: POP
5038: POP
// end else
5039: GO 5216
// begin if mpSharedVision then
5041: LD_EXP 16
5045: IFFALSE 5110
// begin for i in mpTeams do
5047: LD_ADDR_VAR 0 2
5051: PUSH
5052: LD_EXP 10
5056: PUSH
5057: FOR_IN
5058: IFFALSE 5108
// for j := 2 to i do
5060: LD_ADDR_VAR 0 3
5064: PUSH
5065: DOUBLE
5066: LD_INT 2
5068: DEC
5069: ST_TO_ADDR
5070: LD_VAR 0 2
5074: PUSH
5075: FOR_TO
5076: IFFALSE 5104
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5078: LD_VAR 0 2
5082: PUSH
5083: LD_VAR 0 3
5087: ARRAY
5088: PPUSH
5089: LD_VAR 0 2
5093: PUSH
5094: LD_INT 1
5096: ARRAY
5097: PPUSH
5098: CALL_OW 343
5102: GO 5075
5104: POP
5105: POP
5106: GO 5057
5108: POP
5109: POP
// end ; for i := 1 to 8 do
5110: LD_ADDR_VAR 0 2
5114: PUSH
5115: DOUBLE
5116: LD_INT 1
5118: DEC
5119: ST_TO_ADDR
5120: LD_INT 8
5122: PUSH
5123: FOR_TO
5124: IFFALSE 5214
// for j := 1 to 8 do
5126: LD_ADDR_VAR 0 3
5130: PUSH
5131: DOUBLE
5132: LD_INT 1
5134: DEC
5135: ST_TO_ADDR
5136: LD_INT 8
5138: PUSH
5139: FOR_TO
5140: IFFALSE 5210
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5142: LD_EXP 8
5146: PUSH
5147: LD_VAR 0 2
5151: ARRAY
5152: PUSH
5153: LD_EXP 8
5157: PUSH
5158: LD_VAR 0 3
5162: ARRAY
5163: EQUAL
5164: IFFALSE 5188
// SetAttitude ( i , j , att_friend , true ) else
5166: LD_VAR 0 2
5170: PPUSH
5171: LD_VAR 0 3
5175: PPUSH
5176: LD_INT 1
5178: PPUSH
5179: LD_INT 1
5181: PPUSH
5182: CALL_OW 80
5186: GO 5208
// SetAttitude ( i , j , att_enemy , true ) ;
5188: LD_VAR 0 2
5192: PPUSH
5193: LD_VAR 0 3
5197: PPUSH
5198: LD_INT 2
5200: PPUSH
5201: LD_INT 1
5203: PPUSH
5204: CALL_OW 80
5208: GO 5139
5210: POP
5211: POP
5212: GO 5123
5214: POP
5215: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5216: LD_ADDR_OWVAR 71
5220: PUSH
5221: LD_EXP 9
5225: PUSH
5226: LD_OWVAR 2
5230: ARRAY
5231: ST_TO_ADDR
// if IAmSpec then
5232: CALL_OW 531
5236: IFFALSE 5277
// begin FogOff ( true ) ;
5238: LD_INT 1
5240: PPUSH
5241: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5245: LD_EXP 29
5249: PUSH
5250: LD_INT 1
5252: ARRAY
5253: PUSH
5254: LD_INT 2
5256: DIV
5257: PPUSH
5258: LD_EXP 29
5262: PUSH
5263: LD_INT 2
5265: ARRAY
5266: PUSH
5267: LD_INT 2
5269: DIV
5270: PPUSH
5271: CALL_OW 86
// end else
5275: GO 5323
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5277: LD_EXP 21
5281: PUSH
5282: LD_EXP 7
5286: PUSH
5287: LD_OWVAR 2
5291: ARRAY
5292: ARRAY
5293: PUSH
5294: LD_INT 1
5296: ARRAY
5297: PPUSH
5298: LD_EXP 21
5302: PUSH
5303: LD_EXP 7
5307: PUSH
5308: LD_OWVAR 2
5312: ARRAY
5313: ARRAY
5314: PUSH
5315: LD_INT 2
5317: ARRAY
5318: PPUSH
5319: CALL_OW 86
// end ; BeginBuildUp ;
5323: CALL 6390 0 0
// enable ( mpActive ) ;
5327: LD_INT 100
5329: ENABLE_MARKED
// enable ( mpGameType ) ;
5330: LD_EXP 3
5334: ENABLE_MARKED
// mpGameActive := true ;
5335: LD_ADDR_EXP 39
5339: PUSH
5340: LD_INT 1
5342: ST_TO_ADDR
// end ;
5343: LD_VAR 0 1
5347: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5348: LD_INT 0
5350: PPUSH
5351: PPUSH
5352: PPUSH
5353: PPUSH
// result := [ ] ;
5354: LD_ADDR_VAR 0 5
5358: PUSH
5359: EMPTY
5360: ST_TO_ADDR
// class := class_soldier ;
5361: LD_ADDR_VAR 0 8
5365: PUSH
5366: LD_INT 1
5368: ST_TO_ADDR
// uc_side := side ;
5369: LD_ADDR_OWVAR 20
5373: PUSH
5374: LD_VAR 0 1
5378: ST_TO_ADDR
// uc_nation := nation ;
5379: LD_ADDR_OWVAR 21
5383: PUSH
5384: LD_VAR 0 2
5388: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5389: LD_ADDR_OWVAR 26
5393: PUSH
5394: LD_OWVAR 19
5398: PUSH
5399: LD_VAR 0 1
5403: ARRAY
5404: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5405: LD_INT 1
5407: PPUSH
5408: LD_INT 2
5410: PPUSH
5411: CALL_OW 12
5415: PPUSH
5416: LD_VAR 0 8
5420: PPUSH
5421: LD_VAR 0 4
5425: PUSH
5426: LD_INT 2
5428: PLUS
5429: PPUSH
5430: CALL_OW 380
// hc_importance := 105 ;
5434: LD_ADDR_OWVAR 32
5438: PUSH
5439: LD_INT 105
5441: ST_TO_ADDR
// if Multiplayer then
5442: LD_OWVAR 4
5446: IFFALSE 5486
// begin hc_gallery := MULTIAVATARS ;
5448: LD_ADDR_OWVAR 33
5452: PUSH
5453: LD_STRING MULTIAVATARS
5455: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5456: LD_ADDR_OWVAR 34
5460: PUSH
5461: LD_VAR 0 1
5465: PPUSH
5466: CALL_OW 525
5470: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5471: LD_ADDR_OWVAR 27
5475: PUSH
5476: LD_VAR 0 1
5480: PPUSH
5481: CALL_OW 526
5485: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5486: LD_ADDR_VAR 0 5
5490: PUSH
5491: LD_VAR 0 5
5495: PPUSH
5496: CALL_OW 44
5500: PPUSH
5501: CALL 48872 0 2
5505: ST_TO_ADDR
// if mpTeamPreset then
5506: LD_LOC 1
5510: IFFALSE 5606
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5512: LD_LOC 1
5516: PUSH
5517: LD_INT 1
5519: ARRAY
5520: PPUSH
5521: LD_VAR 0 5
5525: PUSH
5526: LD_VAR 0 5
5530: ARRAY
5531: PPUSH
5532: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5536: LD_VAR 0 5
5540: PUSH
5541: LD_VAR 0 5
5545: ARRAY
5546: PPUSH
5547: LD_INT 1
5549: PPUSH
5550: LD_LOC 1
5554: PUSH
5555: LD_INT 1
5557: ARRAY
5558: PPUSH
5559: LD_INT 1
5561: PPUSH
5562: CALL_OW 260
5566: PPUSH
5567: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5571: LD_VAR 0 5
5575: PUSH
5576: LD_VAR 0 5
5580: ARRAY
5581: PPUSH
5582: LD_INT 2
5584: PPUSH
5585: LD_LOC 1
5589: PUSH
5590: LD_INT 1
5592: ARRAY
5593: PPUSH
5594: LD_INT 2
5596: PPUSH
5597: CALL_OW 260
5601: PPUSH
5602: CALL_OW 239
// end ; InitHc_All ( ) ;
5606: CALL_OW 584
// class := 2 ;
5610: LD_ADDR_VAR 0 8
5614: PUSH
5615: LD_INT 2
5617: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5618: LD_ADDR_VAR 0 6
5622: PUSH
5623: DOUBLE
5624: LD_INT 1
5626: DEC
5627: ST_TO_ADDR
5628: LD_VAR 0 3
5632: PUSH
5633: LD_INT 1
5635: MINUS
5636: PUSH
5637: FOR_TO
5638: IFFALSE 5833
// begin PrepareHuman ( false , class , skill ) ;
5640: LD_INT 0
5642: PPUSH
5643: LD_VAR 0 8
5647: PPUSH
5648: LD_VAR 0 4
5652: PPUSH
5653: CALL_OW 380
// un := CreateHuman ;
5657: LD_ADDR_VAR 0 7
5661: PUSH
5662: CALL_OW 44
5666: ST_TO_ADDR
// result := Join ( result , un ) ;
5667: LD_ADDR_VAR 0 5
5671: PUSH
5672: LD_VAR 0 5
5676: PPUSH
5677: LD_VAR 0 7
5681: PPUSH
5682: CALL 48872 0 2
5686: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5687: LD_LOC 1
5691: PPUSH
5692: CALL 12906 0 1
5696: PUSH
5697: LD_VAR 0 3
5701: GREATEREQUAL
5702: IFFALSE 5798
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5704: LD_LOC 1
5708: PUSH
5709: LD_VAR 0 6
5713: PUSH
5714: LD_INT 1
5716: PLUS
5717: ARRAY
5718: PPUSH
5719: LD_VAR 0 7
5723: PPUSH
5724: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5728: LD_VAR 0 7
5732: PPUSH
5733: LD_INT 1
5735: PPUSH
5736: LD_LOC 1
5740: PUSH
5741: LD_VAR 0 6
5745: PUSH
5746: LD_INT 1
5748: PLUS
5749: ARRAY
5750: PPUSH
5751: LD_INT 1
5753: PPUSH
5754: CALL_OW 260
5758: PPUSH
5759: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5763: LD_VAR 0 7
5767: PPUSH
5768: LD_INT 2
5770: PPUSH
5771: LD_LOC 1
5775: PUSH
5776: LD_VAR 0 6
5780: PUSH
5781: LD_INT 1
5783: PLUS
5784: ARRAY
5785: PPUSH
5786: LD_INT 2
5788: PPUSH
5789: CALL_OW 260
5793: PPUSH
5794: CALL_OW 239
// end ; class := Inc ( class ) ;
5798: LD_ADDR_VAR 0 8
5802: PUSH
5803: LD_VAR 0 8
5807: PPUSH
5808: CALL 50245 0 1
5812: ST_TO_ADDR
// if class = 5 then
5813: LD_VAR 0 8
5817: PUSH
5818: LD_INT 5
5820: EQUAL
5821: IFFALSE 5831
// class := 1 ;
5823: LD_ADDR_VAR 0 8
5827: PUSH
5828: LD_INT 1
5830: ST_TO_ADDR
// end ;
5831: GO 5637
5833: POP
5834: POP
// if not mpTeamPreset then
5835: LD_LOC 1
5839: NOT
5840: IFFALSE 5852
// mpTeamPreset := result ;
5842: LD_ADDR_LOC 1
5846: PUSH
5847: LD_VAR 0 5
5851: ST_TO_ADDR
// end ;
5852: LD_VAR 0 5
5856: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5857: LD_INT 0
5859: PPUSH
5860: PPUSH
// result := [ ] ;
5861: LD_ADDR_VAR 0 4
5865: PUSH
5866: EMPTY
5867: ST_TO_ADDR
// if not vehicles then
5868: LD_VAR 0 3
5872: NOT
5873: IFFALSE 5877
// exit ;
5875: GO 6091
// for i := 1 to vehicles [ nation ] do
5877: LD_ADDR_VAR 0 5
5881: PUSH
5882: DOUBLE
5883: LD_INT 1
5885: DEC
5886: ST_TO_ADDR
5887: LD_VAR 0 3
5891: PUSH
5892: LD_VAR 0 2
5896: ARRAY
5897: PUSH
5898: FOR_TO
5899: IFFALSE 6089
// begin uc_side := side ;
5901: LD_ADDR_OWVAR 20
5905: PUSH
5906: LD_VAR 0 1
5910: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5911: LD_VAR 0 3
5915: PUSH
5916: LD_VAR 0 2
5920: ARRAY
5921: PUSH
5922: LD_VAR 0 5
5926: ARRAY
5927: PPUSH
5928: CALL 12906 0 1
5932: PUSH
5933: LD_INT 4
5935: GREATER
5936: IFFALSE 5966
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5938: LD_ADDR_OWVAR 21
5942: PUSH
5943: LD_VAR 0 3
5947: PUSH
5948: LD_VAR 0 2
5952: ARRAY
5953: PUSH
5954: LD_VAR 0 5
5958: ARRAY
5959: PUSH
5960: LD_INT 5
5962: ARRAY
5963: ST_TO_ADDR
5964: GO 5976
// uc_nation := nation ;
5966: LD_ADDR_OWVAR 21
5970: PUSH
5971: LD_VAR 0 2
5975: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5976: LD_VAR 0 3
5980: PUSH
5981: LD_VAR 0 2
5985: ARRAY
5986: PUSH
5987: LD_VAR 0 5
5991: ARRAY
5992: PUSH
5993: LD_INT 1
5995: ARRAY
5996: PPUSH
5997: LD_VAR 0 3
6001: PUSH
6002: LD_VAR 0 2
6006: ARRAY
6007: PUSH
6008: LD_VAR 0 5
6012: ARRAY
6013: PUSH
6014: LD_INT 2
6016: ARRAY
6017: PPUSH
6018: LD_VAR 0 3
6022: PUSH
6023: LD_VAR 0 2
6027: ARRAY
6028: PUSH
6029: LD_VAR 0 5
6033: ARRAY
6034: PUSH
6035: LD_INT 3
6037: ARRAY
6038: PPUSH
6039: LD_VAR 0 3
6043: PUSH
6044: LD_VAR 0 2
6048: ARRAY
6049: PUSH
6050: LD_VAR 0 5
6054: ARRAY
6055: PUSH
6056: LD_INT 4
6058: ARRAY
6059: PPUSH
6060: LD_INT 80
6062: PPUSH
6063: CALL 15702 0 5
// result := Join ( result , CreateVehicle ) ;
6067: LD_ADDR_VAR 0 4
6071: PUSH
6072: LD_VAR 0 4
6076: PPUSH
6077: CALL_OW 45
6081: PPUSH
6082: CALL 48872 0 2
6086: ST_TO_ADDR
// end ;
6087: GO 5898
6089: POP
6090: POP
// end ;
6091: LD_VAR 0 4
6095: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6096: LD_INT 0
6098: PPUSH
6099: PPUSH
// for i in mpBattleFlags do
6100: LD_ADDR_VAR 0 3
6104: PUSH
6105: LD_EXP 23
6109: PUSH
6110: FOR_IN
6111: IFFALSE 6188
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6113: LD_VAR 0 3
6117: PPUSH
6118: LD_INT 1
6120: PUSH
6121: LD_VAR 0 1
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PUSH
6130: LD_INT 2
6132: PUSH
6133: LD_VAR 0 1
6137: PUSH
6138: LD_REAL  7.00000000000000E-0001
6141: MUL
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: LD_INT 3
6149: PUSH
6150: LD_VAR 0 1
6154: PUSH
6155: LD_REAL  4.00000000000000E-0001
6158: MUL
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: PUSH
6164: LD_INT 20
6166: PUSH
6167: LD_VAR 0 1
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: PPUSH
6182: CALL_OW 423
6186: GO 6110
6188: POP
6189: POP
// end ;
6190: LD_VAR 0 2
6194: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6195: LD_INT 100
6197: IFFALSE 6292
6199: GO 6201
6201: DISABLE
6202: LD_INT 0
6204: PPUSH
6205: PPUSH
// begin if mpBattleFlag <= 0 then
6206: LD_EXP 22
6210: PUSH
6211: LD_INT 0
6213: LESSEQUAL
6214: IFFALSE 6218
// exit ;
6216: GO 6292
// strength := 100 ;
6218: LD_ADDR_VAR 0 2
6222: PUSH
6223: LD_INT 100
6225: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6226: LD_EXP 22
6230: PPUSH
6231: CALL_OW 67
// strength := Dec ( strength ) ;
6235: LD_ADDR_VAR 0 2
6239: PUSH
6240: LD_VAR 0 2
6244: PPUSH
6245: CALL 50267 0 1
6249: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6250: LD_VAR 0 2
6254: PPUSH
6255: CALL 6096 0 1
// until not strength ;
6259: LD_VAR 0 2
6263: NOT
6264: IFFALSE 6226
// for i in mpBattleFlags do
6266: LD_ADDR_VAR 0 1
6270: PUSH
6271: LD_EXP 23
6275: PUSH
6276: FOR_IN
6277: IFFALSE 6290
// KillBattleFlag ( i ) ;
6279: LD_VAR 0 1
6283: PPUSH
6284: CALL_OW 419
6288: GO 6276
6290: POP
6291: POP
// end ;
6292: PPOPN 2
6294: END
// every 0 0$1 marked mpActive do var side , tmp ;
6295: GO 6297
6297: DISABLE
6298: LD_INT 0
6300: PPUSH
6301: PPUSH
// begin if mpSibBomb <= 1 then
6302: LD_EXP 28
6306: PUSH
6307: LD_INT 1
6309: LESSEQUAL
6310: IFFALSE 6314
// exit ;
6312: GO 6387
// tmp := mpSibBomb ;
6314: LD_ADDR_VAR 0 2
6318: PUSH
6319: LD_EXP 28
6323: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6324: LD_INT 35
6326: PPUSH
6327: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6331: LD_ADDR_VAR 0 2
6335: PUSH
6336: LD_VAR 0 2
6340: PUSH
6341: LD_INT 35
6343: MINUS
6344: ST_TO_ADDR
// until not tmp ;
6345: LD_VAR 0 2
6349: NOT
6350: IFFALSE 6324
// for side := 1 to 8 do
6352: LD_ADDR_VAR 0 1
6356: PUSH
6357: DOUBLE
6358: LD_INT 1
6360: DEC
6361: ST_TO_ADDR
6362: LD_INT 8
6364: PUSH
6365: FOR_TO
6366: IFFALSE 6385
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6368: LD_INT 25
6370: PPUSH
6371: LD_VAR 0 1
6375: PPUSH
6376: LD_INT 1
6378: PPUSH
6379: CALL_OW 322
6383: GO 6365
6385: POP
6386: POP
// end ;
6387: PPOPN 2
6389: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6390: LD_INT 0
6392: PPUSH
6393: PPUSH
6394: PPUSH
// mpBuildUpTimeDelay := 0 ;
6395: LD_ADDR_EXP 47
6399: PUSH
6400: LD_INT 0
6402: ST_TO_ADDR
// if not mpBuildUpTime then
6403: LD_EXP 20
6407: NOT
6408: IFFALSE 6412
// exit ;
6410: GO 6601
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6412: LD_ADDR_EXP 47
6416: PUSH
6417: LD_INT 8400
6419: PUSH
6420: LD_INT 2100
6422: PUSH
6423: LD_EXP 20
6427: MUL
6428: PLUS
6429: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6430: LD_ADDR_EXP 48
6434: PUSH
6435: LD_INT 1
6437: ST_TO_ADDR
// for i := 1 to 8 do
6438: LD_ADDR_VAR 0 2
6442: PUSH
6443: DOUBLE
6444: LD_INT 1
6446: DEC
6447: ST_TO_ADDR
6448: LD_INT 8
6450: PUSH
6451: FOR_TO
6452: IFFALSE 6599
// if mpSidePositions [ i ] then
6454: LD_EXP 7
6458: PUSH
6459: LD_VAR 0 2
6463: ARRAY
6464: IFFALSE 6597
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6466: LD_EXP 19
6470: PUSH
6471: LD_EXP 7
6475: PUSH
6476: LD_VAR 0 2
6480: ARRAY
6481: ARRAY
6482: PPUSH
6483: LD_INT 5
6485: PPUSH
6486: CALL_OW 424
// for j := 1 to 8 do
6490: LD_ADDR_VAR 0 3
6494: PUSH
6495: DOUBLE
6496: LD_INT 1
6498: DEC
6499: ST_TO_ADDR
6500: LD_INT 8
6502: PUSH
6503: FOR_TO
6504: IFFALSE 6595
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6506: LD_EXP 7
6510: PUSH
6511: LD_VAR 0 3
6515: ARRAY
6516: IFFALSE 6565
6518: PUSH
6519: LD_EXP 8
6523: PUSH
6524: LD_VAR 0 2
6528: ARRAY
6529: PUSH
6530: LD_EXP 8
6534: PUSH
6535: LD_VAR 0 3
6539: ARRAY
6540: NONEQUAL
6541: IFTRUE 6564
6543: PUSH
6544: LD_EXP 11
6548: NOT
6549: IFFALSE 6563
6551: PUSH
6552: LD_VAR 0 2
6556: PUSH
6557: LD_VAR 0 3
6561: NONEQUAL
6562: AND
6563: OR
6564: AND
6565: IFFALSE 6593
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6567: LD_VAR 0 3
6571: PPUSH
6572: LD_EXP 19
6576: PUSH
6577: LD_EXP 7
6581: PUSH
6582: LD_VAR 0 2
6586: ARRAY
6587: ARRAY
6588: PPUSH
6589: CALL_OW 333
6593: GO 6503
6595: POP
6596: POP
// end ;
6597: GO 6451
6599: POP
6600: POP
// end ;
6601: LD_VAR 0 1
6605: RET
// function EndBuildUp ; var i , j ; begin
6606: LD_INT 0
6608: PPUSH
6609: PPUSH
6610: PPUSH
// mpBuildUpTimeActive := false ;
6611: LD_ADDR_EXP 48
6615: PUSH
6616: LD_INT 0
6618: ST_TO_ADDR
// for i := 1 to 8 do
6619: LD_ADDR_VAR 0 2
6623: PUSH
6624: DOUBLE
6625: LD_INT 1
6627: DEC
6628: ST_TO_ADDR
6629: LD_INT 8
6631: PUSH
6632: FOR_TO
6633: IFFALSE 6780
// if mpSidePositions [ i ] then
6635: LD_EXP 7
6639: PUSH
6640: LD_VAR 0 2
6644: ARRAY
6645: IFFALSE 6778
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6647: LD_EXP 19
6651: PUSH
6652: LD_EXP 7
6656: PUSH
6657: LD_VAR 0 2
6661: ARRAY
6662: ARRAY
6663: PPUSH
6664: LD_INT 0
6666: PPUSH
6667: CALL_OW 424
// for j := 1 to 8 do
6671: LD_ADDR_VAR 0 3
6675: PUSH
6676: DOUBLE
6677: LD_INT 1
6679: DEC
6680: ST_TO_ADDR
6681: LD_INT 8
6683: PUSH
6684: FOR_TO
6685: IFFALSE 6776
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6687: LD_EXP 7
6691: PUSH
6692: LD_VAR 0 3
6696: ARRAY
6697: IFFALSE 6746
6699: PUSH
6700: LD_EXP 8
6704: PUSH
6705: LD_VAR 0 2
6709: ARRAY
6710: PUSH
6711: LD_EXP 8
6715: PUSH
6716: LD_VAR 0 3
6720: ARRAY
6721: NONEQUAL
6722: IFTRUE 6745
6724: PUSH
6725: LD_EXP 11
6729: NOT
6730: IFFALSE 6744
6732: PUSH
6733: LD_VAR 0 2
6737: PUSH
6738: LD_VAR 0 3
6742: NONEQUAL
6743: AND
6744: OR
6745: AND
6746: IFFALSE 6774
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6748: LD_VAR 0 3
6752: PPUSH
6753: LD_EXP 19
6757: PUSH
6758: LD_EXP 7
6762: PUSH
6763: LD_VAR 0 2
6767: ARRAY
6768: ARRAY
6769: PPUSH
6770: CALL_OW 334
6774: GO 6684
6776: POP
6777: POP
// end ;
6778: GO 6632
6780: POP
6781: POP
// end ;
6782: LD_VAR 0 1
6786: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6787: LD_EXP 48
6791: IFFALSE 6970
6793: GO 6795
6795: DISABLE
6796: LD_INT 0
6798: PPUSH
6799: PPUSH
// begin for i := 1 to 8 do
6800: LD_ADDR_VAR 0 1
6804: PUSH
6805: DOUBLE
6806: LD_INT 1
6808: DEC
6809: ST_TO_ADDR
6810: LD_INT 8
6812: PUSH
6813: FOR_TO
6814: IFFALSE 6967
// if mpSidePositions [ i ] then
6816: LD_EXP 7
6820: PUSH
6821: LD_VAR 0 1
6825: ARRAY
6826: IFFALSE 6965
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6828: LD_ADDR_VAR 0 2
6832: PUSH
6833: LD_EXP 19
6837: PUSH
6838: LD_EXP 7
6842: PUSH
6843: LD_VAR 0 1
6847: ARRAY
6848: ARRAY
6849: PPUSH
6850: LD_INT 2
6852: PUSH
6853: LD_INT 21
6855: PUSH
6856: LD_INT 1
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: PUSH
6863: LD_INT 21
6865: PUSH
6866: LD_INT 2
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: LIST
6877: PUSH
6878: LD_INT 22
6880: PUSH
6881: LD_OWVAR 2
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PPUSH
6894: CALL_OW 70
6898: PUSH
6899: FOR_IN
6900: IFFALSE 6963
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6902: LD_EXP 8
6906: PUSH
6907: LD_VAR 0 1
6911: ARRAY
6912: PUSH
6913: LD_EXP 8
6917: PUSH
6918: LD_OWVAR 2
6922: ARRAY
6923: NONEQUAL
6924: IFTRUE 6947
6926: PUSH
6927: LD_EXP 11
6931: NOT
6932: IFFALSE 6946
6934: PUSH
6935: LD_VAR 0 1
6939: PUSH
6940: LD_OWVAR 2
6944: NONEQUAL
6945: AND
6946: OR
6947: IFFALSE 6961
// ComMoveToArea ( un , BuildUpEscape ) ;
6949: LD_VAR 0 2
6953: PPUSH
6954: LD_INT 14
6956: PPUSH
6957: CALL_OW 113
6961: GO 6899
6963: POP
6964: POP
6965: GO 6813
6967: POP
6968: POP
// enable ;
6969: ENABLE
// end ;
6970: PPOPN 2
6972: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6973: LD_EXP 20
6977: IFFALSE 7027
6979: GO 6981
6981: DISABLE
6982: LD_INT 0
6984: PPUSH
// begin tmp := mpBuildUpTime ;
6985: LD_ADDR_VAR 0 1
6989: PUSH
6990: LD_EXP 20
6994: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6995: LD_INT 35
6997: PPUSH
6998: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7002: LD_ADDR_VAR 0 1
7006: PUSH
7007: LD_VAR 0 1
7011: PUSH
7012: LD_INT 35
7014: MINUS
7015: ST_TO_ADDR
// until not tmp ;
7016: LD_VAR 0 1
7020: NOT
7021: IFFALSE 6995
// EndBuildUp ;
7023: CALL 6606 0 0
// end ;
7027: PPOPN 1
7029: END
// every 0 0$1 trigger mpActive marked mpWin do
7030: LD_INT 100
7032: IFFALSE 7066
7034: GO 7036
7036: DISABLE
// begin if IAmServer then
7037: CALL_OW 518
7041: IFFALSE 7050
// wait ( 0 0$3 ) ;
7043: LD_INT 105
7045: PPUSH
7046: CALL_OW 67
// if Multiplayer then
7050: LD_OWVAR 4
7054: IFFALSE 7062
// YouWinInMultiplayer else
7056: CALL_OW 106
7060: GO 7066
// YouWin ;
7062: CALL_OW 103
// end ;
7066: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7067: LD_INT 0
7069: PPUSH
// result := false ;
7070: LD_ADDR_VAR 0 3
7074: PUSH
7075: LD_INT 0
7077: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7078: LD_VAR 0 1
7082: PUSH
7083: LD_INT 1
7085: DOUBLE
7086: EQUAL
7087: IFTRUE 7109
7089: LD_INT 5
7091: DOUBLE
7092: EQUAL
7093: IFTRUE 7109
7095: LD_INT 6
7097: DOUBLE
7098: EQUAL
7099: IFTRUE 7109
7101: LD_INT 7
7103: DOUBLE
7104: EQUAL
7105: IFTRUE 7109
7107: GO 7182
7109: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7110: LD_ADDR_VAR 0 3
7114: PUSH
7115: LD_INT 22
7117: PUSH
7118: LD_VAR 0 2
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PUSH
7127: LD_INT 2
7129: PUSH
7130: LD_INT 21
7132: PUSH
7133: LD_INT 1
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_INT 33
7142: PUSH
7143: LD_INT 3
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 33
7152: PUSH
7153: LD_INT 5
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PPUSH
7170: CALL_OW 69
7174: PPUSH
7175: CALL 12906 0 1
7179: ST_TO_ADDR
// end ; GameTypeSurvival :
7180: GO 7421
7182: LD_INT 2
7184: DOUBLE
7185: EQUAL
7186: IFTRUE 7190
7188: GO 7320
7190: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7191: LD_ADDR_VAR 0 3
7195: PUSH
7196: LD_INT 22
7198: PUSH
7199: LD_VAR 0 2
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 2
7210: PUSH
7211: LD_INT 30
7213: PUSH
7214: LD_INT 0
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 30
7223: PUSH
7224: LD_INT 1
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: LIST
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PPUSH
7240: CALL_OW 69
7244: PPUSH
7245: CALL 12906 0 1
7249: IFFALSE 7317
7251: PUSH
7252: LD_INT 22
7254: PUSH
7255: LD_VAR 0 2
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 2
7266: PUSH
7267: LD_INT 21
7269: PUSH
7270: LD_INT 1
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 33
7279: PUSH
7280: LD_INT 3
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 33
7289: PUSH
7290: LD_INT 5
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PPUSH
7307: CALL_OW 69
7311: PPUSH
7312: CALL 12906 0 1
7316: AND
7317: ST_TO_ADDR
// end ; GameTypeKing :
7318: GO 7421
7320: LD_INT 3
7322: DOUBLE
7323: EQUAL
7324: IFTRUE 7328
7326: GO 7420
7328: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7329: LD_ADDR_VAR 0 3
7333: PUSH
7334: LD_INT 22
7336: PUSH
7337: LD_VAR 0 2
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: PUSH
7346: LD_INT 2
7348: PUSH
7349: LD_INT 21
7351: PUSH
7352: LD_INT 1
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PUSH
7359: LD_INT 33
7361: PUSH
7362: LD_INT 3
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: PUSH
7369: LD_INT 33
7371: PUSH
7372: LD_INT 5
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 69
7393: PPUSH
7394: CALL 12906 0 1
7398: IFFALSE 7417
7400: PUSH
7401: LD_VAR 0 2
7405: PPUSH
7406: CALL 61784 0 1
7410: PUSH
7411: LD_EXP 35
7415: LESS
7416: AND
7417: ST_TO_ADDR
// end ; end ;
7418: GO 7421
7420: POP
// end ;
7421: LD_VAR 0 3
7425: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7426: LD_INT 100
7428: IFFALSE 7658
7430: GO 7432
7432: DISABLE
7433: LD_INT 0
7435: PPUSH
7436: PPUSH
// begin if Multiplayer then
7437: LD_OWVAR 4
7441: IFFALSE 7449
// SetPlayerSpectator ( ) else
7443: CALL_OW 572
7447: GO 7458
// FogOff ( your_side ) ;
7449: LD_OWVAR 2
7453: PPUSH
7454: CALL_OW 344
// repeat gameIsOn := false ;
7458: LD_ADDR_VAR 0 1
7462: PUSH
7463: LD_INT 0
7465: ST_TO_ADDR
// for i := 1 to 8 do
7466: LD_ADDR_VAR 0 2
7470: PUSH
7471: DOUBLE
7472: LD_INT 1
7474: DEC
7475: ST_TO_ADDR
7476: LD_INT 8
7478: PUSH
7479: FOR_TO
7480: IFFALSE 7610
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7482: LD_EXP 7
7486: PUSH
7487: LD_VAR 0 2
7491: ARRAY
7492: IFFALSE 7505
7494: PUSH
7495: LD_VAR 0 2
7499: PPUSH
7500: CALL_OW 108
7504: AND
7505: IFFALSE 7519
7507: PUSH
7508: LD_VAR 0 2
7512: PUSH
7513: LD_OWVAR 2
7517: NONEQUAL
7518: AND
7519: IFFALSE 7608
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7521: LD_EXP 8
7525: PUSH
7526: LD_VAR 0 2
7530: ARRAY
7531: NOT
7532: IFTRUE 7580
7534: PUSH
7535: LD_EXP 8
7539: PUSH
7540: LD_VAR 0 2
7544: ARRAY
7545: PUSH
7546: LD_EXP 8
7550: PUSH
7551: LD_OWVAR 2
7555: ARRAY
7556: NONEQUAL
7557: IFFALSE 7579
7559: PUSH
7560: LD_OWVAR 2
7564: PPUSH
7565: LD_VAR 0 2
7569: PPUSH
7570: CALL_OW 81
7574: PUSH
7575: LD_INT 1
7577: NONEQUAL
7578: AND
7579: OR
7580: IFFALSE 7608
// if HasPowerByGameType ( mpGameType , i ) then
7582: LD_EXP 3
7586: PPUSH
7587: LD_VAR 0 2
7591: PPUSH
7592: CALL 7067 0 2
7596: IFFALSE 7608
// begin gameIsOn := true ;
7598: LD_ADDR_VAR 0 1
7602: PUSH
7603: LD_INT 1
7605: ST_TO_ADDR
// break ;
7606: GO 7610
// end ;
7608: GO 7479
7610: POP
7611: POP
// wait ( 100 ) ;
7612: LD_INT 100
7614: PPUSH
7615: CALL_OW 67
// until not gameIsOn ;
7619: LD_VAR 0 1
7623: NOT
7624: IFFALSE 7458
// if IAmServer then
7626: CALL_OW 518
7630: IFFALSE 7639
// wait ( 0 0$3 ) ;
7632: LD_INT 105
7634: PPUSH
7635: CALL_OW 67
// if Multiplayer then
7639: LD_OWVAR 4
7643: IFFALSE 7651
// YouLostInMultiplayer else
7645: CALL_OW 107
7649: GO 7658
// YouLost (  ) ;
7651: LD_STRING 
7653: PPUSH
7654: CALL_OW 104
// end ;
7658: PPOPN 2
7660: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7661: LD_EXP 33
7665: IFFALSE 8049
7667: GO 7669
7669: DISABLE
7670: LD_INT 0
7672: PPUSH
7673: PPUSH
7674: PPUSH
7675: PPUSH
7676: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7677: LD_ADDR_VAR 0 5
7681: PUSH
7682: LD_INT 1
7684: PUSH
7685: LD_INT 2
7687: PUSH
7688: LD_INT 3
7690: PUSH
7691: LD_INT 4
7693: PUSH
7694: LD_INT 5
7696: PUSH
7697: LD_INT 6
7699: PUSH
7700: LD_INT 7
7702: PUSH
7703: LD_INT 8
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7716: LD_INT 350
7718: PPUSH
7719: CALL_OW 67
// for i := 1 to 8 do
7723: LD_ADDR_VAR 0 1
7727: PUSH
7728: DOUBLE
7729: LD_INT 1
7731: DEC
7732: ST_TO_ADDR
7733: LD_INT 8
7735: PUSH
7736: FOR_TO
7737: IFFALSE 8019
// begin j := sides [ i ] ;
7739: LD_ADDR_VAR 0 2
7743: PUSH
7744: LD_VAR 0 5
7748: PUSH
7749: LD_VAR 0 1
7753: ARRAY
7754: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7755: LD_EXP 40
7759: PUSH
7760: LD_VAR 0 2
7764: ARRAY
7765: PPUSH
7766: CALL 12906 0 1
7770: IFFALSE 7783
7772: PUSH
7773: LD_VAR 0 2
7777: PPUSH
7778: CALL_OW 108
7782: AND
7783: IFFALSE 7801
7785: PUSH
7786: LD_EXP 3
7790: PPUSH
7791: LD_VAR 0 2
7795: PPUSH
7796: CALL 7067 0 2
7800: AND
7801: IFFALSE 8017
// begin wait ( mpRespawn div 2 ) ;
7803: LD_EXP 33
7807: PUSH
7808: LD_INT 2
7810: DIV
7811: PPUSH
7812: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7816: LD_ADDR_VAR 0 3
7820: PUSH
7821: LD_INT 22
7823: PUSH
7824: LD_VAR 0 2
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PUSH
7833: LD_INT 50
7835: PUSH
7836: EMPTY
7837: LIST
7838: PUSH
7839: LD_INT 2
7841: PUSH
7842: LD_INT 30
7844: PUSH
7845: LD_INT 0
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 30
7854: PUSH
7855: LD_INT 1
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: LIST
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: LIST
7871: PPUSH
7872: CALL_OW 69
7876: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7877: LD_VAR 0 3
7881: NOT
7882: IFTRUE 7896
7884: PUSH
7885: LD_VAR 0 2
7889: PPUSH
7890: CALL_OW 108
7894: NOT
7895: OR
7896: IFTRUE 7915
7898: PUSH
7899: LD_EXP 3
7903: PPUSH
7904: LD_VAR 0 2
7908: PPUSH
7909: CALL 7067 0 2
7913: NOT
7914: OR
7915: IFFALSE 7919
// continue ;
7917: GO 7736
// spawn := tmp [ 1 ] ;
7919: LD_ADDR_VAR 0 4
7923: PUSH
7924: LD_VAR 0 3
7928: PUSH
7929: LD_INT 1
7931: ARRAY
7932: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7933: LD_EXP 40
7937: PUSH
7938: LD_VAR 0 2
7942: ARRAY
7943: PUSH
7944: LD_INT 1
7946: ARRAY
7947: PPUSH
7948: LD_VAR 0 4
7952: PPUSH
7953: CALL_OW 250
7957: PPUSH
7958: LD_VAR 0 4
7962: PPUSH
7963: CALL_OW 251
7967: PPUSH
7968: LD_INT 32
7970: PPUSH
7971: LD_INT 1
7973: PPUSH
7974: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7978: LD_ADDR_EXP 40
7982: PUSH
7983: LD_EXP 40
7987: PPUSH
7988: LD_VAR 0 2
7992: PPUSH
7993: LD_EXP 40
7997: PUSH
7998: LD_VAR 0 2
8002: ARRAY
8003: PPUSH
8004: LD_INT 1
8006: PPUSH
8007: CALL_OW 3
8011: PPUSH
8012: CALL_OW 1
8016: ST_TO_ADDR
// end ; end ;
8017: GO 7736
8019: POP
8020: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8021: LD_ADDR_VAR 0 5
8025: PUSH
8026: LD_VAR 0 5
8030: PPUSH
8031: LD_INT 1
8033: PPUSH
8034: LD_INT 8
8036: PPUSH
8037: LD_INT 1
8039: PPUSH
8040: CALL 15232 0 4
8044: ST_TO_ADDR
// until false ;
8045: LD_INT 0
8047: IFFALSE 7716
// end ;
8049: PPOPN 5
8051: END
// every 0 0$1 marked mpActive do
8052: GO 8054
8054: DISABLE
// begin enable ;
8055: ENABLE
// if not mpDisplayStrings then
8056: LD_EXP 38
8060: NOT
8061: IFFALSE 8072
// begin display_strings := [ ] ;
8063: LD_ADDR_OWVAR 47
8067: PUSH
8068: EMPTY
8069: ST_TO_ADDR
// exit ;
8070: GO 8082
// end ; display_strings := mpDisplayStrings ;
8072: LD_ADDR_OWVAR 47
8076: PUSH
8077: LD_EXP 38
8081: ST_TO_ADDR
// end ; end_of_file
8082: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8083: LD_INT 0
8085: PPUSH
8086: PPUSH
8087: PPUSH
8088: PPUSH
8089: PPUSH
8090: PPUSH
8091: PPUSH
8092: PPUSH
8093: PPUSH
// if GetType ( un ) = unit_vehicle then
8094: LD_VAR 0 1
8098: PPUSH
8099: CALL_OW 247
8103: PUSH
8104: LD_INT 2
8106: EQUAL
8107: IFFALSE 8111
// exit ;
8109: GO 8785
// side := GetSide ( un ) ;
8111: LD_ADDR_VAR 0 9
8115: PUSH
8116: LD_VAR 0 1
8120: PPUSH
8121: CALL_OW 255
8125: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
8126: LD_EXP 3
8130: PUSH
8131: LD_INT 2
8133: EQUAL
8134: IFFALSE 8228
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8136: LD_VAR 0 1
8140: PPUSH
8141: CALL_OW 266
8145: PUSH
8146: LD_INT 0
8148: PUSH
8149: LD_INT 1
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: IN
8156: IFFALSE 8228
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8158: LD_ADDR_VAR 0 3
8162: PUSH
8163: LD_INT 22
8165: PUSH
8166: LD_VAR 0 9
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: PUSH
8175: LD_INT 2
8177: PUSH
8178: LD_INT 21
8180: PUSH
8181: LD_INT 1
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 33
8190: PUSH
8191: LD_INT 3
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: LIST
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PPUSH
8207: CALL_OW 69
8211: PUSH
8212: FOR_IN
8213: IFFALSE 8226
// KillUnit ( i ) ;
8215: LD_VAR 0 3
8219: PPUSH
8220: CALL_OW 66
8224: GO 8212
8226: POP
8227: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8228: LD_VAR 0 1
8232: PPUSH
8233: CALL_OW 257
8237: PUSH
8238: LD_INT 12
8240: PUSH
8241: LD_INT 17
8243: PUSH
8244: LD_INT 15
8246: PUSH
8247: LD_INT 16
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: IN
8256: IFTRUE 8273
8258: PUSH
8259: LD_VAR 0 1
8263: PPUSH
8264: CALL_OW 263
8268: PUSH
8269: LD_INT 5
8271: EQUAL
8272: OR
8273: IFFALSE 8510
// begin tag := 0 ;
8275: LD_ADDR_VAR 0 5
8279: PUSH
8280: LD_INT 0
8282: ST_TO_ADDR
// for i := 1 to 8 do
8283: LD_ADDR_VAR 0 3
8287: PUSH
8288: DOUBLE
8289: LD_INT 1
8291: DEC
8292: ST_TO_ADDR
8293: LD_INT 8
8295: PUSH
8296: FOR_TO
8297: IFFALSE 8331
// if un in mpApePosIndex [ i ] then
8299: LD_VAR 0 1
8303: PUSH
8304: LD_EXP 32
8308: PUSH
8309: LD_VAR 0 3
8313: ARRAY
8314: IN
8315: IFFALSE 8329
// begin tag := i ;
8317: LD_ADDR_VAR 0 5
8321: PUSH
8322: LD_VAR 0 3
8326: ST_TO_ADDR
// break ;
8327: GO 8331
// end ;
8329: GO 8296
8331: POP
8332: POP
// if not tag then
8333: LD_VAR 0 5
8337: NOT
8338: IFFALSE 8342
// exit ;
8340: GO 8785
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8342: LD_ADDR_VAR 0 7
8346: PUSH
8347: LD_EXP 31
8351: PUSH
8352: LD_EXP 7
8356: PUSH
8357: LD_VAR 0 5
8361: ARRAY
8362: ARRAY
8363: ST_TO_ADDR
// if not area then
8364: LD_VAR 0 7
8368: NOT
8369: IFFALSE 8373
// exit ;
8371: GO 8785
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8373: LD_INT 14700
8375: PUSH
8376: LD_VAR 0 1
8380: PUSH
8381: LD_INT 5
8383: MOD
8384: PUSH
8385: LD_INT 1
8387: PLUS
8388: PUSH
8389: LD_INT 700
8391: MUL
8392: PLUS
8393: PPUSH
8394: CALL_OW 67
// repeat wait ( 10 ) ;
8398: LD_INT 10
8400: PPUSH
8401: CALL_OW 67
// until not mpBlockRespThread ;
8405: LD_EXP 46
8409: NOT
8410: IFFALSE 8398
// mpBlockRespThread := true ;
8412: LD_ADDR_EXP 46
8416: PUSH
8417: LD_INT 1
8419: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8420: LD_INT 0
8422: PPUSH
8423: CALL 44999 0 1
// ape := CreateHuman ;
8427: LD_ADDR_VAR 0 4
8431: PUSH
8432: CALL_OW 44
8436: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8437: LD_ADDR_EXP 32
8441: PUSH
8442: LD_EXP 32
8446: PPUSH
8447: LD_VAR 0 5
8451: PPUSH
8452: LD_EXP 32
8456: PUSH
8457: LD_VAR 0 5
8461: ARRAY
8462: PPUSH
8463: LD_VAR 0 4
8467: PPUSH
8468: CALL 48872 0 2
8472: PPUSH
8473: CALL_OW 1
8477: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8478: LD_VAR 0 4
8482: PPUSH
8483: LD_VAR 0 7
8487: PPUSH
8488: LD_INT 0
8490: PPUSH
8491: CALL_OW 49
// wait ( 10 ) ;
8495: LD_INT 10
8497: PPUSH
8498: CALL_OW 67
// mpBlockRespThread := false ;
8502: LD_ADDR_EXP 46
8506: PUSH
8507: LD_INT 0
8509: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8510: LD_VAR 0 1
8514: PPUSH
8515: CALL_OW 247
8519: PUSH
8520: LD_INT 1
8522: EQUAL
8523: IFFALSE 8540
8525: PUSH
8526: LD_VAR 0 1
8530: PPUSH
8531: CALL_OW 248
8535: PUSH
8536: LD_INT 0
8538: GREATER
8539: AND
8540: IFFALSE 8785
// begin if not mpRespawn then
8542: LD_EXP 33
8546: NOT
8547: IFFALSE 8551
// exit ;
8549: GO 8785
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8551: LD_VAR 0 9
8555: PPUSH
8556: CALL_OW 108
8560: NOT
8561: IFFALSE 8580
8563: PUSH
8564: LD_EXP 3
8568: PPUSH
8569: LD_VAR 0 9
8573: PPUSH
8574: CALL 7067 0 2
8578: NOT
8579: AND
8580: IFFALSE 8584
// exit ;
8582: GO 8785
// side := GetSide ( un ) ;
8584: LD_ADDR_VAR 0 9
8588: PUSH
8589: LD_VAR 0 1
8593: PPUSH
8594: CALL_OW 255
8598: ST_TO_ADDR
// nation := GetNation ( un ) ;
8599: LD_ADDR_VAR 0 8
8603: PUSH
8604: LD_VAR 0 1
8608: PPUSH
8609: CALL_OW 248
8613: ST_TO_ADDR
// class := GetClass ( un ) ;
8614: LD_ADDR_VAR 0 6
8618: PUSH
8619: LD_VAR 0 1
8623: PPUSH
8624: CALL_OW 257
8628: ST_TO_ADDR
// if class > 4 then
8629: LD_VAR 0 6
8633: PUSH
8634: LD_INT 4
8636: GREATER
8637: IFFALSE 8647
// class := 1 ;
8639: LD_ADDR_VAR 0 6
8643: PUSH
8644: LD_INT 1
8646: ST_TO_ADDR
// repeat wait ( 10 ) ;
8647: LD_INT 10
8649: PPUSH
8650: CALL_OW 67
// until not mpBlockRespThread ;
8654: LD_EXP 46
8658: NOT
8659: IFFALSE 8647
// mpBlockRespThread := true ;
8661: LD_ADDR_EXP 46
8665: PUSH
8666: LD_INT 1
8668: ST_TO_ADDR
// uc_side := side ;
8669: LD_ADDR_OWVAR 20
8673: PUSH
8674: LD_VAR 0 9
8678: ST_TO_ADDR
// uc_nation := nation ;
8679: LD_ADDR_OWVAR 21
8683: PUSH
8684: LD_VAR 0 8
8688: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8689: LD_INT 0
8691: PPUSH
8692: LD_VAR 0 6
8696: PPUSH
8697: LD_INT 2
8699: PPUSH
8700: CALL_OW 380
// un := CreateHuman ;
8704: LD_ADDR_VAR 0 1
8708: PUSH
8709: CALL_OW 44
8713: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8714: LD_ADDR_EXP 40
8718: PUSH
8719: LD_EXP 40
8723: PPUSH
8724: LD_VAR 0 9
8728: PPUSH
8729: LD_EXP 40
8733: PUSH
8734: LD_VAR 0 9
8738: ARRAY
8739: PPUSH
8740: LD_EXP 40
8744: PUSH
8745: LD_VAR 0 9
8749: ARRAY
8750: PUSH
8751: LD_INT 1
8753: PLUS
8754: PPUSH
8755: LD_VAR 0 1
8759: PPUSH
8760: CALL_OW 1
8764: PPUSH
8765: CALL_OW 1
8769: ST_TO_ADDR
// wait ( 10 ) ;
8770: LD_INT 10
8772: PPUSH
8773: CALL_OW 67
// mpBlockRespThread := false ;
8777: LD_ADDR_EXP 46
8781: PUSH
8782: LD_INT 0
8784: ST_TO_ADDR
// end ; end ;
8785: LD_VAR 0 2
8789: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8790: LD_INT 0
8792: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8793: LD_VAR 0 1
8797: PPUSH
8798: CALL_OW 266
8802: PUSH
8803: LD_INT 0
8805: PUSH
8806: LD_INT 1
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: IN
8813: IFFALSE 8838
// SetBName ( building , @ & GetSide ( building ) ) ;
8815: LD_VAR 0 1
8819: PPUSH
8820: LD_STRING @
8822: PUSH
8823: LD_VAR 0 1
8827: PPUSH
8828: CALL_OW 255
8832: STR
8833: PPUSH
8834: CALL_OW 500
// end ;
8838: LD_VAR 0 2
8842: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8843: LD_INT 0
8845: PPUSH
8846: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8847: LD_EXP 3
8851: PUSH
8852: LD_INT 2
8854: EQUAL
8855: IFFALSE 8879
8857: PUSH
8858: LD_VAR 0 1
8862: PPUSH
8863: CALL_OW 266
8867: PUSH
8868: LD_INT 0
8870: PUSH
8871: LD_INT 1
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: IN
8878: AND
8879: IFFALSE 8958
// begin SetSide ( building , oldSide ) ;
8881: LD_VAR 0 1
8885: PPUSH
8886: LD_VAR 0 2
8890: PPUSH
8891: CALL_OW 235
// KillUnit ( building ) ;
8895: LD_VAR 0 1
8899: PPUSH
8900: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8904: LD_ADDR_VAR 0 5
8908: PUSH
8909: LD_INT 22
8911: PUSH
8912: LD_VAR 0 2
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: LD_INT 21
8923: PUSH
8924: LD_INT 1
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 69
8939: PUSH
8940: FOR_IN
8941: IFFALSE 8954
// KillUnit ( i ) ;
8943: LD_VAR 0 5
8947: PPUSH
8948: CALL_OW 66
8952: GO 8940
8954: POP
8955: POP
// exit ;
8956: GO 9003
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8958: LD_VAR 0 1
8962: PPUSH
8963: CALL_OW 266
8967: PUSH
8968: LD_INT 0
8970: PUSH
8971: LD_INT 1
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: IN
8978: IFFALSE 9003
// SetBName ( building , @ & GetSide ( building ) ) ;
8980: LD_VAR 0 1
8984: PPUSH
8985: LD_STRING @
8987: PUSH
8988: LD_VAR 0 1
8992: PPUSH
8993: CALL_OW 255
8997: STR
8998: PPUSH
8999: CALL_OW 500
// end ;
9003: LD_VAR 0 4
9007: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9008: LD_INT 0
9010: PPUSH
9011: PPUSH
9012: PPUSH
// if mpGameType <> GameTypeFamine then
9013: LD_EXP 3
9017: PUSH
9018: LD_INT 5
9020: NONEQUAL
9021: IFFALSE 9025
// exit ;
9023: GO 9240
// for i := 1 to mpGlobalOilDeposits do
9025: LD_ADDR_VAR 0 6
9029: PUSH
9030: DOUBLE
9031: LD_INT 1
9033: DEC
9034: ST_TO_ADDR
9035: LD_EXP 41
9039: PUSH
9040: FOR_TO
9041: IFFALSE 9238
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9043: LD_EXP 41
9047: PUSH
9048: LD_VAR 0 6
9052: ARRAY
9053: PUSH
9054: LD_INT 1
9056: ARRAY
9057: PPUSH
9058: LD_EXP 41
9062: PUSH
9063: LD_VAR 0 6
9067: ARRAY
9068: PUSH
9069: LD_INT 2
9071: ARRAY
9072: PPUSH
9073: CALL_OW 428
9077: PUSH
9078: LD_VAR 0 1
9082: EQUAL
9083: IFFALSE 9236
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9085: LD_ADDR_VAR 0 7
9089: PUSH
9090: LD_EXP 41
9094: PUSH
9095: LD_VAR 0 6
9099: ARRAY
9100: PUSH
9101: LD_INT 3
9103: ARRAY
9104: ST_TO_ADDR
// value := value - amount ;
9105: LD_ADDR_VAR 0 7
9109: PUSH
9110: LD_VAR 0 7
9114: PUSH
9115: LD_VAR 0 4
9119: MINUS
9120: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9121: LD_ADDR_EXP 41
9125: PUSH
9126: LD_EXP 41
9130: PPUSH
9131: LD_VAR 0 6
9135: PPUSH
9136: LD_EXP 41
9140: PUSH
9141: LD_VAR 0 6
9145: ARRAY
9146: PPUSH
9147: LD_INT 3
9149: PPUSH
9150: LD_VAR 0 7
9154: PPUSH
9155: CALL_OW 1
9159: PPUSH
9160: CALL_OW 1
9164: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9165: LD_VAR 0 1
9169: PPUSH
9170: LD_VAR 0 7
9174: PPUSH
9175: CALL_OW 505
// if value <= 0 then
9179: LD_VAR 0 7
9183: PUSH
9184: LD_INT 0
9186: LESSEQUAL
9187: IFFALSE 9236
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9189: LD_EXP 41
9193: PUSH
9194: LD_VAR 0 6
9198: ARRAY
9199: PUSH
9200: LD_INT 1
9202: ARRAY
9203: PPUSH
9204: LD_EXP 41
9208: PUSH
9209: LD_VAR 0 6
9213: ARRAY
9214: PUSH
9215: LD_INT 2
9217: ARRAY
9218: PPUSH
9219: CALL_OW 63
// KillUnit ( building ) ;
9223: LD_VAR 0 1
9227: PPUSH
9228: CALL_OW 66
// exit ;
9232: POP
9233: POP
9234: GO 9240
// end ; end ; end ;
9236: GO 9040
9238: POP
9239: POP
// end ;
9240: LD_VAR 0 5
9244: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9245: LD_INT 0
9247: PPUSH
9248: PPUSH
9249: PPUSH
// if mpGameType <> GameTypeFamine then
9250: LD_EXP 3
9254: PUSH
9255: LD_INT 5
9257: NONEQUAL
9258: IFFALSE 9262
// exit ;
9260: GO 9477
// for i := 1 to mpGlobalSibDeposits do
9262: LD_ADDR_VAR 0 6
9266: PUSH
9267: DOUBLE
9268: LD_INT 1
9270: DEC
9271: ST_TO_ADDR
9272: LD_EXP 42
9276: PUSH
9277: FOR_TO
9278: IFFALSE 9475
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9280: LD_EXP 42
9284: PUSH
9285: LD_VAR 0 6
9289: ARRAY
9290: PUSH
9291: LD_INT 1
9293: ARRAY
9294: PPUSH
9295: LD_EXP 42
9299: PUSH
9300: LD_VAR 0 6
9304: ARRAY
9305: PUSH
9306: LD_INT 2
9308: ARRAY
9309: PPUSH
9310: CALL_OW 428
9314: PUSH
9315: LD_VAR 0 1
9319: EQUAL
9320: IFFALSE 9473
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9322: LD_ADDR_VAR 0 7
9326: PUSH
9327: LD_EXP 42
9331: PUSH
9332: LD_VAR 0 6
9336: ARRAY
9337: PUSH
9338: LD_INT 3
9340: ARRAY
9341: ST_TO_ADDR
// value := value - amount ;
9342: LD_ADDR_VAR 0 7
9346: PUSH
9347: LD_VAR 0 7
9351: PUSH
9352: LD_VAR 0 4
9356: MINUS
9357: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9358: LD_ADDR_EXP 42
9362: PUSH
9363: LD_EXP 42
9367: PPUSH
9368: LD_VAR 0 6
9372: PPUSH
9373: LD_EXP 42
9377: PUSH
9378: LD_VAR 0 6
9382: ARRAY
9383: PPUSH
9384: LD_INT 3
9386: PPUSH
9387: LD_VAR 0 7
9391: PPUSH
9392: CALL_OW 1
9396: PPUSH
9397: CALL_OW 1
9401: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9402: LD_VAR 0 1
9406: PPUSH
9407: LD_VAR 0 7
9411: PPUSH
9412: CALL_OW 505
// if value <= 0 then
9416: LD_VAR 0 7
9420: PUSH
9421: LD_INT 0
9423: LESSEQUAL
9424: IFFALSE 9473
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9426: LD_EXP 42
9430: PUSH
9431: LD_VAR 0 6
9435: ARRAY
9436: PUSH
9437: LD_INT 1
9439: ARRAY
9440: PPUSH
9441: LD_EXP 42
9445: PUSH
9446: LD_VAR 0 6
9450: ARRAY
9451: PUSH
9452: LD_INT 2
9454: ARRAY
9455: PPUSH
9456: CALL_OW 63
// KillUnit ( building ) ;
9460: LD_VAR 0 1
9464: PPUSH
9465: CALL_OW 66
// exit ;
9469: POP
9470: POP
9471: GO 9477
// end ; end ; end ;
9473: GO 9277
9475: POP
9476: POP
// end ;
9477: LD_VAR 0 5
9481: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
9482: LD_INT 0
9484: PPUSH
9485: PPUSH
// side := GetSide ( factory ) ;
9486: LD_ADDR_VAR 0 7
9490: PUSH
9491: LD_VAR 0 1
9495: PPUSH
9496: CALL_OW 255
9500: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9501: LD_VAR 0 5
9505: PUSH
9506: LD_INT 81
9508: EQUAL
9509: IFFALSE 9547
9511: PUSH
9512: LD_INT 22
9514: PUSH
9515: LD_VAR 0 7
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: PUSH
9524: LD_INT 34
9526: PUSH
9527: LD_INT 81
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PPUSH
9538: CALL_OW 69
9542: PUSH
9543: LD_INT 0
9545: GREATER
9546: AND
9547: IFFALSE 9580
// begin ComCancel ( factory ) ;
9549: LD_VAR 0 1
9553: PPUSH
9554: CALL_OW 127
// if side = your_side then
9558: LD_VAR 0 7
9562: PUSH
9563: LD_OWVAR 2
9567: EQUAL
9568: IFFALSE 9580
// HintSpec ( VehLimit , 2 ) ;
9570: LD_STRING VehLimit
9572: PPUSH
9573: LD_INT 2
9575: PPUSH
9576: CALL_OW 338
// end ; end ;
9580: LD_VAR 0 6
9584: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
9585: LD_INT 0
9587: PPUSH
9588: PPUSH
9589: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
9590: LD_VAR 0 1
9594: PPUSH
9595: CALL_OW 264
9599: PUSH
9600: LD_INT 81
9602: EQUAL
9603: IFFALSE 9620
9605: PUSH
9606: LD_VAR 0 1
9610: PPUSH
9611: CALL_OW 263
9615: PUSH
9616: LD_INT 1
9618: EQUAL
9619: AND
9620: IFFALSE 9900
// begin for i := 1 to Count ( minersList ) do
9622: LD_ADDR_VAR 0 6
9626: PUSH
9627: DOUBLE
9628: LD_INT 1
9630: DEC
9631: ST_TO_ADDR
9632: LD_EXP 56
9636: PPUSH
9637: CALL 12906 0 1
9641: PUSH
9642: FOR_TO
9643: IFFALSE 9761
// begin if minersList [ i ] = oldId then
9645: LD_EXP 56
9649: PUSH
9650: LD_VAR 0 6
9654: ARRAY
9655: PUSH
9656: LD_VAR 0 2
9660: EQUAL
9661: IFFALSE 9759
// begin for j := 1 to minerMinesList [ i ] do
9663: LD_ADDR_VAR 0 7
9667: PUSH
9668: DOUBLE
9669: LD_INT 1
9671: DEC
9672: ST_TO_ADDR
9673: LD_EXP 57
9677: PUSH
9678: LD_VAR 0 6
9682: ARRAY
9683: PUSH
9684: FOR_TO
9685: IFFALSE 9735
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
9687: LD_EXP 57
9691: PUSH
9692: LD_VAR 0 6
9696: ARRAY
9697: PUSH
9698: LD_VAR 0 7
9702: ARRAY
9703: PUSH
9704: LD_INT 1
9706: ARRAY
9707: PPUSH
9708: LD_EXP 57
9712: PUSH
9713: LD_VAR 0 6
9717: ARRAY
9718: PUSH
9719: LD_VAR 0 7
9723: ARRAY
9724: PUSH
9725: LD_INT 2
9727: ARRAY
9728: PPUSH
9729: CALL_OW 612
9733: GO 9684
9735: POP
9736: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
9737: LD_ADDR_EXP 57
9741: PUSH
9742: LD_EXP 57
9746: PPUSH
9747: LD_VAR 0 6
9751: PPUSH
9752: CALL_OW 3
9756: ST_TO_ADDR
// break ;
9757: GO 9761
// end ; end ;
9759: GO 9642
9761: POP
9762: POP
// minersList := minersList diff oldId ;
9763: LD_ADDR_EXP 56
9767: PUSH
9768: LD_EXP 56
9772: PUSH
9773: LD_VAR 0 2
9777: DIFF
9778: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
9779: LD_INT 22
9781: PUSH
9782: LD_VAR 0 4
9786: PPUSH
9787: CALL_OW 255
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: LD_INT 34
9798: PUSH
9799: LD_INT 81
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: PPUSH
9810: CALL_OW 69
9814: PUSH
9815: LD_INT 1
9817: GREATER
9818: IFFALSE 9845
// begin ComExit ( unit ) ;
9820: LD_VAR 0 4
9824: PPUSH
9825: CALL 49270 0 1
// SetSide ( newId , oldSide ) ;
9829: LD_VAR 0 1
9833: PPUSH
9834: LD_VAR 0 3
9838: PPUSH
9839: CALL_OW 235
// exit ;
9843: GO 9900
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
9845: LD_ADDR_EXP 56
9849: PUSH
9850: LD_EXP 56
9854: PPUSH
9855: LD_EXP 56
9859: PUSH
9860: LD_INT 1
9862: PLUS
9863: PPUSH
9864: LD_VAR 0 1
9868: PPUSH
9869: CALL_OW 1
9873: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
9874: LD_ADDR_EXP 57
9878: PUSH
9879: LD_EXP 57
9883: PPUSH
9884: LD_EXP 57
9888: PUSH
9889: LD_INT 1
9891: PLUS
9892: PPUSH
9893: EMPTY
9894: PPUSH
9895: CALL_OW 1
9899: ST_TO_ADDR
// end ; end ; end_of_file
9900: LD_VAR 0 5
9904: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9905: LD_EXP 39
9909: IFFALSE 9917
9911: PUSH
9912: CALL 10127 0 0
9916: AND
9917: IFFALSE 9925
9919: PUSH
9920: LD_OWVAR 4
9924: AND
9925: IFFALSE 10124
9927: GO 9929
9929: DISABLE
9930: LD_INT 0
9932: PPUSH
9933: PPUSH
// begin canWin := false ;
9934: LD_ADDR_VAR 0 2
9938: PUSH
9939: LD_INT 0
9941: ST_TO_ADDR
// if not HasPower ( your_side ) then
9942: LD_OWVAR 2
9946: PPUSH
9947: CALL 10169 0 1
9951: NOT
9952: IFFALSE 9963
// begin Multiplayer_Loose_Message ;
9954: CALL_OW 521
// enable ( mpLose ) ;
9958: LD_INT 102
9960: ENABLE_MARKED
// end else
9961: GO 10124
// begin canWin := true ;
9963: LD_ADDR_VAR 0 2
9967: PUSH
9968: LD_INT 1
9970: ST_TO_ADDR
// for i := 1 to 8 do
9971: LD_ADDR_VAR 0 1
9975: PUSH
9976: DOUBLE
9977: LD_INT 1
9979: DEC
9980: ST_TO_ADDR
9981: LD_INT 8
9983: PUSH
9984: FOR_TO
9985: IFFALSE 10110
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9987: LD_EXP 7
9991: PUSH
9992: LD_VAR 0 1
9996: ARRAY
9997: IFFALSE 10010
9999: PUSH
10000: LD_VAR 0 1
10004: PPUSH
10005: CALL_OW 108
10009: AND
10010: IFFALSE 10024
10012: PUSH
10013: LD_VAR 0 1
10017: PUSH
10018: LD_OWVAR 2
10022: NONEQUAL
10023: AND
10024: IFFALSE 10108
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10026: LD_EXP 8
10030: PUSH
10031: LD_VAR 0 1
10035: ARRAY
10036: NOT
10037: IFTRUE 10085
10039: PUSH
10040: LD_EXP 8
10044: PUSH
10045: LD_VAR 0 1
10049: ARRAY
10050: PUSH
10051: LD_EXP 8
10055: PUSH
10056: LD_OWVAR 2
10060: ARRAY
10061: NONEQUAL
10062: IFFALSE 10084
10064: PUSH
10065: LD_OWVAR 2
10069: PPUSH
10070: LD_VAR 0 1
10074: PPUSH
10075: CALL_OW 81
10079: PUSH
10080: LD_INT 1
10082: NONEQUAL
10083: AND
10084: OR
10085: IFFALSE 10108
// if HasPower ( i ) then
10087: LD_VAR 0 1
10091: PPUSH
10092: CALL 10169 0 1
10096: IFFALSE 10108
// begin canWin := false ;
10098: LD_ADDR_VAR 0 2
10102: PUSH
10103: LD_INT 0
10105: ST_TO_ADDR
// break ;
10106: GO 10110
// end ;
10108: GO 9984
10110: POP
10111: POP
// if canWin then
10112: LD_VAR 0 2
10116: IFFALSE 10123
// enable ( mpWin ) else
10118: LD_INT 101
10120: ENABLE_MARKED
10121: GO 10124
// enable ;
10123: ENABLE
// end ; end ;
10124: PPOPN 2
10126: END
// function CanWinLoose ; begin
10127: LD_INT 0
10129: PPUSH
// result := true ;
10130: LD_ADDR_VAR 0 1
10134: PUSH
10135: LD_INT 1
10137: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10138: CALL_OW 531
10142: IFFALSE 10154
10144: PUSH
10145: CALL_OW 519
10149: PUSH
10150: LD_INT 1
10152: GREATER
10153: AND
10154: IFFALSE 10164
// result := false ;
10156: LD_ADDR_VAR 0 1
10160: PUSH
10161: LD_INT 0
10163: ST_TO_ADDR
// end ;
10164: LD_VAR 0 1
10168: RET
// function HasPower ( i ) ; begin
10169: LD_INT 0
10171: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10172: LD_ADDR_VAR 0 2
10176: PUSH
10177: LD_INT 22
10179: PUSH
10180: LD_VAR 0 1
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: PUSH
10189: LD_INT 2
10191: PUSH
10192: LD_INT 21
10194: PUSH
10195: LD_INT 1
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: LD_INT 33
10204: PUSH
10205: LD_INT 3
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: LD_INT 33
10214: PUSH
10215: LD_INT 5
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PPUSH
10232: CALL_OW 69
10236: ST_TO_ADDR
// end ; end_of_file
10237: LD_VAR 0 2
10241: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10242: LD_EXP 39
10246: IFFALSE 10289
10248: GO 10250
10250: DISABLE
10251: LD_INT 0
10253: PPUSH
// begin for i := 1 to 8 do
10254: LD_ADDR_VAR 0 1
10258: PUSH
10259: DOUBLE
10260: LD_INT 1
10262: DEC
10263: ST_TO_ADDR
10264: LD_INT 8
10266: PUSH
10267: FOR_TO
10268: IFFALSE 10287
// SetRestrict ( b_depot , i , state_disabled ) ;
10270: LD_INT 0
10272: PPUSH
10273: LD_VAR 0 1
10277: PPUSH
10278: LD_INT 0
10280: PPUSH
10281: CALL_OW 324
10285: GO 10267
10287: POP
10288: POP
// end ;
10289: PPOPN 1
10291: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10292: LD_EXP 39
10296: IFFALSE 10304
10298: PUSH
10299: CALL 10514 0 0
10303: AND
10304: IFFALSE 10312
10306: PUSH
10307: LD_OWVAR 4
10311: AND
10312: IFFALSE 10511
10314: GO 10316
10316: DISABLE
10317: LD_INT 0
10319: PPUSH
10320: PPUSH
// begin canWin := false ;
10321: LD_ADDR_VAR 0 2
10325: PUSH
10326: LD_INT 0
10328: ST_TO_ADDR
// if not HasPower ( your_side ) then
10329: LD_OWVAR 2
10333: PPUSH
10334: CALL 10556 0 1
10338: NOT
10339: IFFALSE 10350
// begin Multiplayer_Loose_Message ;
10341: CALL_OW 521
// enable ( mpLose ) ;
10345: LD_INT 102
10347: ENABLE_MARKED
// end else
10348: GO 10511
// begin canWin := true ;
10350: LD_ADDR_VAR 0 2
10354: PUSH
10355: LD_INT 1
10357: ST_TO_ADDR
// for i := 1 to 8 do
10358: LD_ADDR_VAR 0 1
10362: PUSH
10363: DOUBLE
10364: LD_INT 1
10366: DEC
10367: ST_TO_ADDR
10368: LD_INT 8
10370: PUSH
10371: FOR_TO
10372: IFFALSE 10497
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10374: LD_EXP 7
10378: PUSH
10379: LD_VAR 0 1
10383: ARRAY
10384: IFFALSE 10397
10386: PUSH
10387: LD_VAR 0 1
10391: PPUSH
10392: CALL_OW 108
10396: AND
10397: IFFALSE 10411
10399: PUSH
10400: LD_VAR 0 1
10404: PUSH
10405: LD_OWVAR 2
10409: NONEQUAL
10410: AND
10411: IFFALSE 10495
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10413: LD_EXP 8
10417: PUSH
10418: LD_VAR 0 1
10422: ARRAY
10423: NOT
10424: IFTRUE 10472
10426: PUSH
10427: LD_EXP 8
10431: PUSH
10432: LD_VAR 0 1
10436: ARRAY
10437: PUSH
10438: LD_EXP 8
10442: PUSH
10443: LD_OWVAR 2
10447: ARRAY
10448: NONEQUAL
10449: IFFALSE 10471
10451: PUSH
10452: LD_OWVAR 2
10456: PPUSH
10457: LD_VAR 0 1
10461: PPUSH
10462: CALL_OW 81
10466: PUSH
10467: LD_INT 1
10469: NONEQUAL
10470: AND
10471: OR
10472: IFFALSE 10495
// if HasPower ( i ) then
10474: LD_VAR 0 1
10478: PPUSH
10479: CALL 10556 0 1
10483: IFFALSE 10495
// begin canWin := false ;
10485: LD_ADDR_VAR 0 2
10489: PUSH
10490: LD_INT 0
10492: ST_TO_ADDR
// break ;
10493: GO 10497
// end ;
10495: GO 10371
10497: POP
10498: POP
// if canWin then
10499: LD_VAR 0 2
10503: IFFALSE 10510
// enable ( mpWin ) else
10505: LD_INT 101
10507: ENABLE_MARKED
10508: GO 10511
// enable ;
10510: ENABLE
// end ; end ;
10511: PPOPN 2
10513: END
// function CanWinLoose ; begin
10514: LD_INT 0
10516: PPUSH
// result := true ;
10517: LD_ADDR_VAR 0 1
10521: PUSH
10522: LD_INT 1
10524: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10525: CALL_OW 531
10529: IFFALSE 10541
10531: PUSH
10532: CALL_OW 519
10536: PUSH
10537: LD_INT 1
10539: GREATER
10540: AND
10541: IFFALSE 10551
// result := false ;
10543: LD_ADDR_VAR 0 1
10547: PUSH
10548: LD_INT 0
10550: ST_TO_ADDR
// end ;
10551: LD_VAR 0 1
10555: RET
// function HasPower ( i ) ; begin
10556: LD_INT 0
10558: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10559: LD_INT 22
10561: PUSH
10562: LD_VAR 0 1
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: LD_INT 2
10573: PUSH
10574: LD_INT 30
10576: PUSH
10577: LD_INT 0
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PUSH
10584: LD_INT 30
10586: PUSH
10587: LD_INT 1
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: LIST
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PPUSH
10603: CALL_OW 69
10607: NOT
10608: IFFALSE 10612
// exit ;
10610: GO 10677
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10612: LD_ADDR_VAR 0 2
10616: PUSH
10617: LD_INT 22
10619: PUSH
10620: LD_VAR 0 1
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: LD_INT 21
10634: PUSH
10635: LD_INT 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 33
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: LD_INT 33
10654: PUSH
10655: LD_INT 5
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PPUSH
10672: CALL_OW 69
10676: ST_TO_ADDR
// end ; end_of_file
10677: LD_VAR 0 2
10681: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10682: LD_INT 0
10684: PPUSH
10685: PPUSH
// if exist_mode then
10686: LD_VAR 0 2
10690: IFFALSE 10736
// begin unit := CreateCharacter ( prefix & ident ) ;
10692: LD_ADDR_VAR 0 5
10696: PUSH
10697: LD_VAR 0 3
10701: PUSH
10702: LD_VAR 0 1
10706: STR
10707: PPUSH
10708: CALL_OW 34
10712: ST_TO_ADDR
// if unit then
10713: LD_VAR 0 5
10717: IFFALSE 10734
// DeleteCharacters ( prefix & ident ) ;
10719: LD_VAR 0 3
10723: PUSH
10724: LD_VAR 0 1
10728: STR
10729: PPUSH
10730: CALL_OW 40
// end else
10734: GO 10751
// unit := NewCharacter ( ident ) ;
10736: LD_ADDR_VAR 0 5
10740: PUSH
10741: LD_VAR 0 1
10745: PPUSH
10746: CALL_OW 25
10750: ST_TO_ADDR
// result := unit ;
10751: LD_ADDR_VAR 0 4
10755: PUSH
10756: LD_VAR 0 5
10760: ST_TO_ADDR
// end ;
10761: LD_VAR 0 4
10765: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10766: LD_INT 0
10768: PPUSH
10769: PPUSH
// if exist_mode then
10770: LD_VAR 0 2
10774: IFFALSE 10799
// unit := CreateCharacter ( prefix & ident ) else
10776: LD_ADDR_VAR 0 5
10780: PUSH
10781: LD_VAR 0 3
10785: PUSH
10786: LD_VAR 0 1
10790: STR
10791: PPUSH
10792: CALL_OW 34
10796: ST_TO_ADDR
10797: GO 10814
// unit := NewCharacter ( ident ) ;
10799: LD_ADDR_VAR 0 5
10803: PUSH
10804: LD_VAR 0 1
10808: PPUSH
10809: CALL_OW 25
10813: ST_TO_ADDR
// result := unit ;
10814: LD_ADDR_VAR 0 4
10818: PUSH
10819: LD_VAR 0 5
10823: ST_TO_ADDR
// end ;
10824: LD_VAR 0 4
10828: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10829: LD_INT 0
10831: PPUSH
10832: PPUSH
// if not side or not nation then
10833: LD_VAR 0 1
10837: NOT
10838: IFTRUE 10847
10840: PUSH
10841: LD_VAR 0 2
10845: NOT
10846: OR
10847: IFFALSE 10851
// exit ;
10849: GO 11645
// case nation of nation_american :
10851: LD_VAR 0 2
10855: PUSH
10856: LD_INT 1
10858: DOUBLE
10859: EQUAL
10860: IFTRUE 10864
10862: GO 11086
10864: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
10865: LD_ADDR_VAR 0 4
10869: PUSH
10870: LD_INT 35
10872: PUSH
10873: LD_INT 45
10875: PUSH
10876: LD_INT 46
10878: PUSH
10879: LD_INT 47
10881: PUSH
10882: LD_INT 82
10884: PUSH
10885: LD_INT 83
10887: PUSH
10888: LD_INT 84
10890: PUSH
10891: LD_INT 85
10893: PUSH
10894: LD_INT 86
10896: PUSH
10897: LD_INT 1
10899: PUSH
10900: LD_INT 2
10902: PUSH
10903: LD_INT 6
10905: PUSH
10906: LD_INT 15
10908: PUSH
10909: LD_INT 16
10911: PUSH
10912: LD_INT 7
10914: PUSH
10915: LD_INT 12
10917: PUSH
10918: LD_INT 13
10920: PUSH
10921: LD_INT 10
10923: PUSH
10924: LD_INT 14
10926: PUSH
10927: LD_INT 20
10929: PUSH
10930: LD_INT 21
10932: PUSH
10933: LD_INT 22
10935: PUSH
10936: LD_INT 25
10938: PUSH
10939: LD_INT 32
10941: PUSH
10942: LD_INT 27
10944: PUSH
10945: LD_INT 36
10947: PUSH
10948: LD_INT 69
10950: PUSH
10951: LD_INT 39
10953: PUSH
10954: LD_INT 34
10956: PUSH
10957: LD_INT 40
10959: PUSH
10960: LD_INT 48
10962: PUSH
10963: LD_INT 49
10965: PUSH
10966: LD_INT 50
10968: PUSH
10969: LD_INT 51
10971: PUSH
10972: LD_INT 52
10974: PUSH
10975: LD_INT 53
10977: PUSH
10978: LD_INT 54
10980: PUSH
10981: LD_INT 55
10983: PUSH
10984: LD_INT 56
10986: PUSH
10987: LD_INT 57
10989: PUSH
10990: LD_INT 58
10992: PUSH
10993: LD_INT 59
10995: PUSH
10996: LD_INT 60
10998: PUSH
10999: LD_INT 61
11001: PUSH
11002: LD_INT 62
11004: PUSH
11005: LD_INT 80
11007: PUSH
11008: LD_INT 82
11010: PUSH
11011: LD_INT 83
11013: PUSH
11014: LD_INT 84
11016: PUSH
11017: LD_INT 85
11019: PUSH
11020: LD_INT 86
11022: PUSH
11023: LD_INT 90
11025: PUSH
11026: LD_INT 93
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: ST_TO_ADDR
11084: GO 11567
11086: LD_INT 2
11088: DOUBLE
11089: EQUAL
11090: IFTRUE 11094
11092: GO 11328
11094: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11095: LD_ADDR_VAR 0 4
11099: PUSH
11100: LD_INT 35
11102: PUSH
11103: LD_INT 45
11105: PUSH
11106: LD_INT 46
11108: PUSH
11109: LD_INT 47
11111: PUSH
11112: LD_INT 82
11114: PUSH
11115: LD_INT 83
11117: PUSH
11118: LD_INT 84
11120: PUSH
11121: LD_INT 85
11123: PUSH
11124: LD_INT 87
11126: PUSH
11127: LD_INT 70
11129: PUSH
11130: LD_INT 1
11132: PUSH
11133: LD_INT 11
11135: PUSH
11136: LD_INT 3
11138: PUSH
11139: LD_INT 4
11141: PUSH
11142: LD_INT 5
11144: PUSH
11145: LD_INT 6
11147: PUSH
11148: LD_INT 15
11150: PUSH
11151: LD_INT 18
11153: PUSH
11154: LD_INT 7
11156: PUSH
11157: LD_INT 17
11159: PUSH
11160: LD_INT 8
11162: PUSH
11163: LD_INT 20
11165: PUSH
11166: LD_INT 21
11168: PUSH
11169: LD_INT 22
11171: PUSH
11172: LD_INT 72
11174: PUSH
11175: LD_INT 26
11177: PUSH
11178: LD_INT 69
11180: PUSH
11181: LD_INT 39
11183: PUSH
11184: LD_INT 40
11186: PUSH
11187: LD_INT 41
11189: PUSH
11190: LD_INT 42
11192: PUSH
11193: LD_INT 43
11195: PUSH
11196: LD_INT 48
11198: PUSH
11199: LD_INT 49
11201: PUSH
11202: LD_INT 50
11204: PUSH
11205: LD_INT 51
11207: PUSH
11208: LD_INT 52
11210: PUSH
11211: LD_INT 53
11213: PUSH
11214: LD_INT 54
11216: PUSH
11217: LD_INT 55
11219: PUSH
11220: LD_INT 56
11222: PUSH
11223: LD_INT 60
11225: PUSH
11226: LD_INT 61
11228: PUSH
11229: LD_INT 62
11231: PUSH
11232: LD_INT 66
11234: PUSH
11235: LD_INT 67
11237: PUSH
11238: LD_INT 68
11240: PUSH
11241: LD_INT 81
11243: PUSH
11244: LD_INT 82
11246: PUSH
11247: LD_INT 83
11249: PUSH
11250: LD_INT 84
11252: PUSH
11253: LD_INT 85
11255: PUSH
11256: LD_INT 87
11258: PUSH
11259: LD_INT 88
11261: PUSH
11262: LD_INT 92
11264: PUSH
11265: LD_INT 94
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: ST_TO_ADDR
11326: GO 11567
11328: LD_INT 3
11330: DOUBLE
11331: EQUAL
11332: IFTRUE 11336
11334: GO 11566
11336: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
11337: LD_ADDR_VAR 0 4
11341: PUSH
11342: LD_INT 46
11344: PUSH
11345: LD_INT 47
11347: PUSH
11348: LD_INT 1
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: LD_INT 82
11356: PUSH
11357: LD_INT 83
11359: PUSH
11360: LD_INT 84
11362: PUSH
11363: LD_INT 85
11365: PUSH
11366: LD_INT 86
11368: PUSH
11369: LD_INT 11
11371: PUSH
11372: LD_INT 9
11374: PUSH
11375: LD_INT 20
11377: PUSH
11378: LD_INT 19
11380: PUSH
11381: LD_INT 21
11383: PUSH
11384: LD_INT 24
11386: PUSH
11387: LD_INT 22
11389: PUSH
11390: LD_INT 25
11392: PUSH
11393: LD_INT 28
11395: PUSH
11396: LD_INT 29
11398: PUSH
11399: LD_INT 30
11401: PUSH
11402: LD_INT 31
11404: PUSH
11405: LD_INT 37
11407: PUSH
11408: LD_INT 38
11410: PUSH
11411: LD_INT 32
11413: PUSH
11414: LD_INT 27
11416: PUSH
11417: LD_INT 33
11419: PUSH
11420: LD_INT 69
11422: PUSH
11423: LD_INT 39
11425: PUSH
11426: LD_INT 34
11428: PUSH
11429: LD_INT 40
11431: PUSH
11432: LD_INT 71
11434: PUSH
11435: LD_INT 23
11437: PUSH
11438: LD_INT 44
11440: PUSH
11441: LD_INT 48
11443: PUSH
11444: LD_INT 49
11446: PUSH
11447: LD_INT 50
11449: PUSH
11450: LD_INT 51
11452: PUSH
11453: LD_INT 52
11455: PUSH
11456: LD_INT 53
11458: PUSH
11459: LD_INT 54
11461: PUSH
11462: LD_INT 55
11464: PUSH
11465: LD_INT 56
11467: PUSH
11468: LD_INT 57
11470: PUSH
11471: LD_INT 58
11473: PUSH
11474: LD_INT 59
11476: PUSH
11477: LD_INT 63
11479: PUSH
11480: LD_INT 64
11482: PUSH
11483: LD_INT 65
11485: PUSH
11486: LD_INT 82
11488: PUSH
11489: LD_INT 83
11491: PUSH
11492: LD_INT 84
11494: PUSH
11495: LD_INT 85
11497: PUSH
11498: LD_INT 86
11500: PUSH
11501: LD_INT 89
11503: PUSH
11504: LD_INT 91
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: ST_TO_ADDR
11564: GO 11567
11566: POP
// if state > - 1 and state < 3 then
11567: LD_VAR 0 3
11571: PUSH
11572: LD_INT 1
11574: NEG
11575: GREATER
11576: IFFALSE 11588
11578: PUSH
11579: LD_VAR 0 3
11583: PUSH
11584: LD_INT 3
11586: LESS
11587: AND
11588: IFFALSE 11645
// for i in result do
11590: LD_ADDR_VAR 0 5
11594: PUSH
11595: LD_VAR 0 4
11599: PUSH
11600: FOR_IN
11601: IFFALSE 11643
// if GetTech ( i , side ) <> state then
11603: LD_VAR 0 5
11607: PPUSH
11608: LD_VAR 0 1
11612: PPUSH
11613: CALL_OW 321
11617: PUSH
11618: LD_VAR 0 3
11622: NONEQUAL
11623: IFFALSE 11641
// result := result diff i ;
11625: LD_ADDR_VAR 0 4
11629: PUSH
11630: LD_VAR 0 4
11634: PUSH
11635: LD_VAR 0 5
11639: DIFF
11640: ST_TO_ADDR
11641: GO 11600
11643: POP
11644: POP
// end ;
11645: LD_VAR 0 4
11649: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11650: LD_INT 0
11652: PPUSH
11653: PPUSH
11654: PPUSH
// result := true ;
11655: LD_ADDR_VAR 0 3
11659: PUSH
11660: LD_INT 1
11662: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11663: LD_ADDR_VAR 0 5
11667: PUSH
11668: LD_VAR 0 2
11672: PPUSH
11673: CALL_OW 480
11677: ST_TO_ADDR
// if not tmp then
11678: LD_VAR 0 5
11682: NOT
11683: IFFALSE 11687
// exit ;
11685: GO 11736
// for i in tmp do
11687: LD_ADDR_VAR 0 4
11691: PUSH
11692: LD_VAR 0 5
11696: PUSH
11697: FOR_IN
11698: IFFALSE 11734
// if GetTech ( i , side ) <> state_researched then
11700: LD_VAR 0 4
11704: PPUSH
11705: LD_VAR 0 1
11709: PPUSH
11710: CALL_OW 321
11714: PUSH
11715: LD_INT 2
11717: NONEQUAL
11718: IFFALSE 11732
// begin result := false ;
11720: LD_ADDR_VAR 0 3
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// exit ;
11728: POP
11729: POP
11730: GO 11736
// end ;
11732: GO 11697
11734: POP
11735: POP
// end ;
11736: LD_VAR 0 3
11740: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11741: LD_INT 0
11743: PPUSH
11744: PPUSH
11745: PPUSH
11746: PPUSH
11747: PPUSH
11748: PPUSH
11749: PPUSH
11750: PPUSH
11751: PPUSH
11752: PPUSH
11753: PPUSH
11754: PPUSH
11755: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11756: LD_VAR 0 1
11760: NOT
11761: IFTRUE 11778
11763: PUSH
11764: LD_VAR 0 1
11768: PPUSH
11769: CALL_OW 257
11773: PUSH
11774: LD_INT 9
11776: NONEQUAL
11777: OR
11778: IFFALSE 11782
// exit ;
11780: GO 12361
// side := GetSide ( unit ) ;
11782: LD_ADDR_VAR 0 9
11786: PUSH
11787: LD_VAR 0 1
11791: PPUSH
11792: CALL_OW 255
11796: ST_TO_ADDR
// tech_space := tech_spacanom ;
11797: LD_ADDR_VAR 0 12
11801: PUSH
11802: LD_INT 29
11804: ST_TO_ADDR
// tech_time := tech_taurad ;
11805: LD_ADDR_VAR 0 13
11809: PUSH
11810: LD_INT 28
11812: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11813: LD_ADDR_VAR 0 11
11817: PUSH
11818: LD_VAR 0 1
11822: PPUSH
11823: CALL_OW 310
11827: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11828: LD_VAR 0 11
11832: PPUSH
11833: CALL_OW 247
11837: PUSH
11838: LD_INT 2
11840: EQUAL
11841: IFFALSE 11845
// exit ;
11843: GO 12361
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11845: LD_ADDR_VAR 0 8
11849: PUSH
11850: LD_INT 81
11852: PUSH
11853: LD_VAR 0 9
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 3
11864: PUSH
11865: LD_INT 21
11867: PUSH
11868: LD_INT 3
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PPUSH
11883: CALL_OW 69
11887: ST_TO_ADDR
// if not tmp then
11888: LD_VAR 0 8
11892: NOT
11893: IFFALSE 11897
// exit ;
11895: GO 12361
// if in_unit then
11897: LD_VAR 0 11
11901: IFFALSE 11925
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11903: LD_ADDR_VAR 0 10
11907: PUSH
11908: LD_VAR 0 8
11912: PPUSH
11913: LD_VAR 0 11
11917: PPUSH
11918: CALL_OW 74
11922: ST_TO_ADDR
11923: GO 11945
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11925: LD_ADDR_VAR 0 10
11929: PUSH
11930: LD_VAR 0 8
11934: PPUSH
11935: LD_VAR 0 1
11939: PPUSH
11940: CALL_OW 74
11944: ST_TO_ADDR
// if not enemy then
11945: LD_VAR 0 10
11949: NOT
11950: IFFALSE 11954
// exit ;
11952: GO 12361
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11954: LD_VAR 0 11
11958: IFFALSE 11980
11960: PUSH
11961: LD_VAR 0 11
11965: PPUSH
11966: LD_VAR 0 10
11970: PPUSH
11971: CALL_OW 296
11975: PUSH
11976: LD_INT 13
11978: GREATER
11979: AND
11980: IFTRUE 12002
11982: PUSH
11983: LD_VAR 0 1
11987: PPUSH
11988: LD_VAR 0 10
11992: PPUSH
11993: CALL_OW 296
11997: PUSH
11998: LD_INT 12
12000: GREATER
12001: OR
12002: IFFALSE 12006
// exit ;
12004: GO 12361
// missile := [ 1 ] ;
12006: LD_ADDR_VAR 0 14
12010: PUSH
12011: LD_INT 1
12013: PUSH
12014: EMPTY
12015: LIST
12016: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12017: LD_VAR 0 9
12021: PPUSH
12022: LD_VAR 0 12
12026: PPUSH
12027: CALL_OW 325
12031: IFFALSE 12060
// missile := Replace ( missile , missile + 1 , 2 ) ;
12033: LD_ADDR_VAR 0 14
12037: PUSH
12038: LD_VAR 0 14
12042: PPUSH
12043: LD_VAR 0 14
12047: PUSH
12048: LD_INT 1
12050: PLUS
12051: PPUSH
12052: LD_INT 2
12054: PPUSH
12055: CALL_OW 1
12059: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12060: LD_VAR 0 9
12064: PPUSH
12065: LD_VAR 0 13
12069: PPUSH
12070: CALL_OW 325
12074: IFFALSE 12098
12076: PUSH
12077: LD_VAR 0 10
12081: PPUSH
12082: CALL_OW 255
12086: PPUSH
12087: LD_VAR 0 13
12091: PPUSH
12092: CALL_OW 325
12096: NOT
12097: AND
12098: IFFALSE 12127
// missile := Replace ( missile , missile + 1 , 3 ) ;
12100: LD_ADDR_VAR 0 14
12104: PUSH
12105: LD_VAR 0 14
12109: PPUSH
12110: LD_VAR 0 14
12114: PUSH
12115: LD_INT 1
12117: PLUS
12118: PPUSH
12119: LD_INT 3
12121: PPUSH
12122: CALL_OW 1
12126: ST_TO_ADDR
// if missile < 2 then
12127: LD_VAR 0 14
12131: PUSH
12132: LD_INT 2
12134: LESS
12135: IFFALSE 12139
// exit ;
12137: GO 12361
// x := GetX ( enemy ) ;
12139: LD_ADDR_VAR 0 4
12143: PUSH
12144: LD_VAR 0 10
12148: PPUSH
12149: CALL_OW 250
12153: ST_TO_ADDR
// y := GetY ( enemy ) ;
12154: LD_ADDR_VAR 0 5
12158: PUSH
12159: LD_VAR 0 10
12163: PPUSH
12164: CALL_OW 251
12168: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12169: LD_ADDR_VAR 0 6
12173: PUSH
12174: LD_VAR 0 4
12178: PUSH
12179: LD_INT 1
12181: NEG
12182: PPUSH
12183: LD_INT 1
12185: PPUSH
12186: CALL_OW 12
12190: PLUS
12191: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12192: LD_ADDR_VAR 0 7
12196: PUSH
12197: LD_VAR 0 5
12201: PUSH
12202: LD_INT 1
12204: NEG
12205: PPUSH
12206: LD_INT 1
12208: PPUSH
12209: CALL_OW 12
12213: PLUS
12214: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12215: LD_VAR 0 6
12219: PPUSH
12220: LD_VAR 0 7
12224: PPUSH
12225: CALL_OW 488
12229: NOT
12230: IFFALSE 12252
// begin _x := x ;
12232: LD_ADDR_VAR 0 6
12236: PUSH
12237: LD_VAR 0 4
12241: ST_TO_ADDR
// _y := y ;
12242: LD_ADDR_VAR 0 7
12246: PUSH
12247: LD_VAR 0 5
12251: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12252: LD_ADDR_VAR 0 3
12256: PUSH
12257: LD_INT 1
12259: PPUSH
12260: LD_VAR 0 14
12264: PPUSH
12265: CALL_OW 12
12269: ST_TO_ADDR
// case i of 1 :
12270: LD_VAR 0 3
12274: PUSH
12275: LD_INT 1
12277: DOUBLE
12278: EQUAL
12279: IFTRUE 12283
12281: GO 12300
12283: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12284: LD_VAR 0 1
12288: PPUSH
12289: LD_VAR 0 10
12293: PPUSH
12294: CALL_OW 115
12298: GO 12361
12300: LD_INT 2
12302: DOUBLE
12303: EQUAL
12304: IFTRUE 12308
12306: GO 12330
12308: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12309: LD_VAR 0 1
12313: PPUSH
12314: LD_VAR 0 6
12318: PPUSH
12319: LD_VAR 0 7
12323: PPUSH
12324: CALL_OW 153
12328: GO 12361
12330: LD_INT 3
12332: DOUBLE
12333: EQUAL
12334: IFTRUE 12338
12336: GO 12360
12338: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12339: LD_VAR 0 1
12343: PPUSH
12344: LD_VAR 0 6
12348: PPUSH
12349: LD_VAR 0 7
12353: PPUSH
12354: CALL_OW 154
12358: GO 12361
12360: POP
// end ;
12361: LD_VAR 0 2
12365: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12366: LD_INT 0
12368: PPUSH
12369: PPUSH
12370: PPUSH
12371: PPUSH
12372: PPUSH
12373: PPUSH
// if not unit or not building then
12374: LD_VAR 0 1
12378: NOT
12379: IFTRUE 12388
12381: PUSH
12382: LD_VAR 0 2
12386: NOT
12387: OR
12388: IFFALSE 12392
// exit ;
12390: GO 12550
// x := GetX ( building ) ;
12392: LD_ADDR_VAR 0 5
12396: PUSH
12397: LD_VAR 0 2
12401: PPUSH
12402: CALL_OW 250
12406: ST_TO_ADDR
// y := GetY ( building ) ;
12407: LD_ADDR_VAR 0 6
12411: PUSH
12412: LD_VAR 0 2
12416: PPUSH
12417: CALL_OW 251
12421: ST_TO_ADDR
// for i := 0 to 5 do
12422: LD_ADDR_VAR 0 4
12426: PUSH
12427: DOUBLE
12428: LD_INT 0
12430: DEC
12431: ST_TO_ADDR
12432: LD_INT 5
12434: PUSH
12435: FOR_TO
12436: IFFALSE 12548
// begin _x := ShiftX ( x , i , 3 ) ;
12438: LD_ADDR_VAR 0 7
12442: PUSH
12443: LD_VAR 0 5
12447: PPUSH
12448: LD_VAR 0 4
12452: PPUSH
12453: LD_INT 3
12455: PPUSH
12456: CALL_OW 272
12460: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12461: LD_ADDR_VAR 0 8
12465: PUSH
12466: LD_VAR 0 6
12470: PPUSH
12471: LD_VAR 0 4
12475: PPUSH
12476: LD_INT 3
12478: PPUSH
12479: CALL_OW 273
12483: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12484: LD_VAR 0 7
12488: PPUSH
12489: LD_VAR 0 8
12493: PPUSH
12494: CALL_OW 488
12498: NOT
12499: IFFALSE 12503
// continue ;
12501: GO 12435
// if HexInfo ( _x , _y ) = 0 then
12503: LD_VAR 0 7
12507: PPUSH
12508: LD_VAR 0 8
12512: PPUSH
12513: CALL_OW 428
12517: PUSH
12518: LD_INT 0
12520: EQUAL
12521: IFFALSE 12546
// begin ComMoveXY ( unit , _x , _y ) ;
12523: LD_VAR 0 1
12527: PPUSH
12528: LD_VAR 0 7
12532: PPUSH
12533: LD_VAR 0 8
12537: PPUSH
12538: CALL_OW 111
// exit ;
12542: POP
12543: POP
12544: GO 12550
// end ; end ;
12546: GO 12435
12548: POP
12549: POP
// end ;
12550: LD_VAR 0 3
12554: RET
// export function ScanBase ( side , base_area ) ; begin
12555: LD_INT 0
12557: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12558: LD_ADDR_VAR 0 3
12562: PUSH
12563: LD_VAR 0 2
12567: PPUSH
12568: LD_INT 81
12570: PUSH
12571: LD_VAR 0 1
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PPUSH
12580: CALL_OW 70
12584: ST_TO_ADDR
// end ;
12585: LD_VAR 0 3
12589: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12590: LD_INT 0
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
// result := false ;
12596: LD_ADDR_VAR 0 2
12600: PUSH
12601: LD_INT 0
12603: ST_TO_ADDR
// side := GetSide ( unit ) ;
12604: LD_ADDR_VAR 0 3
12608: PUSH
12609: LD_VAR 0 1
12613: PPUSH
12614: CALL_OW 255
12618: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12619: LD_ADDR_VAR 0 4
12623: PUSH
12624: LD_VAR 0 1
12628: PPUSH
12629: CALL_OW 248
12633: ST_TO_ADDR
// case nat of 1 :
12634: LD_VAR 0 4
12638: PUSH
12639: LD_INT 1
12641: DOUBLE
12642: EQUAL
12643: IFTRUE 12647
12645: GO 12658
12647: POP
// tech := tech_lassight ; 2 :
12648: LD_ADDR_VAR 0 5
12652: PUSH
12653: LD_INT 12
12655: ST_TO_ADDR
12656: GO 12697
12658: LD_INT 2
12660: DOUBLE
12661: EQUAL
12662: IFTRUE 12666
12664: GO 12677
12666: POP
// tech := tech_mortar ; 3 :
12667: LD_ADDR_VAR 0 5
12671: PUSH
12672: LD_INT 41
12674: ST_TO_ADDR
12675: GO 12697
12677: LD_INT 3
12679: DOUBLE
12680: EQUAL
12681: IFTRUE 12685
12683: GO 12696
12685: POP
// tech := tech_bazooka ; end ;
12686: LD_ADDR_VAR 0 5
12690: PUSH
12691: LD_INT 44
12693: ST_TO_ADDR
12694: GO 12697
12696: POP
// if Researched ( side , tech ) then
12697: LD_VAR 0 3
12701: PPUSH
12702: LD_VAR 0 5
12706: PPUSH
12707: CALL_OW 325
12711: IFFALSE 12738
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12713: LD_ADDR_VAR 0 2
12717: PUSH
12718: LD_INT 5
12720: PUSH
12721: LD_INT 8
12723: PUSH
12724: LD_INT 9
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: LIST
12731: PUSH
12732: LD_VAR 0 4
12736: ARRAY
12737: ST_TO_ADDR
// end ;
12738: LD_VAR 0 2
12742: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12743: LD_INT 0
12745: PPUSH
12746: PPUSH
12747: PPUSH
// if not mines then
12748: LD_VAR 0 2
12752: NOT
12753: IFFALSE 12757
// exit ;
12755: GO 12901
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12757: LD_ADDR_VAR 0 5
12761: PUSH
12762: LD_INT 81
12764: PUSH
12765: LD_VAR 0 1
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: LD_INT 3
12776: PUSH
12777: LD_INT 21
12779: PUSH
12780: LD_INT 3
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PPUSH
12795: CALL_OW 69
12799: ST_TO_ADDR
// for i in mines do
12800: LD_ADDR_VAR 0 4
12804: PUSH
12805: LD_VAR 0 2
12809: PUSH
12810: FOR_IN
12811: IFFALSE 12899
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12813: LD_VAR 0 4
12817: PUSH
12818: LD_INT 1
12820: ARRAY
12821: PPUSH
12822: LD_VAR 0 4
12826: PUSH
12827: LD_INT 2
12829: ARRAY
12830: PPUSH
12831: CALL_OW 458
12835: NOT
12836: IFFALSE 12840
// continue ;
12838: GO 12810
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12840: LD_VAR 0 4
12844: PUSH
12845: LD_INT 1
12847: ARRAY
12848: PPUSH
12849: LD_VAR 0 4
12853: PUSH
12854: LD_INT 2
12856: ARRAY
12857: PPUSH
12858: CALL_OW 428
12862: PUSH
12863: LD_VAR 0 5
12867: IN
12868: IFFALSE 12897
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12870: LD_VAR 0 4
12874: PUSH
12875: LD_INT 1
12877: ARRAY
12878: PPUSH
12879: LD_VAR 0 4
12883: PUSH
12884: LD_INT 2
12886: ARRAY
12887: PPUSH
12888: LD_VAR 0 1
12892: PPUSH
12893: CALL_OW 456
// end ;
12897: GO 12810
12899: POP
12900: POP
// end ;
12901: LD_VAR 0 3
12905: RET
// export function Count ( array ) ; begin
12906: LD_INT 0
12908: PPUSH
// result := array + 0 ;
12909: LD_ADDR_VAR 0 2
12913: PUSH
12914: LD_VAR 0 1
12918: PUSH
12919: LD_INT 0
12921: PLUS
12922: ST_TO_ADDR
// end ;
12923: LD_VAR 0 2
12927: RET
// export function IsEmpty ( building ) ; begin
12928: LD_INT 0
12930: PPUSH
// if not building then
12931: LD_VAR 0 1
12935: NOT
12936: IFFALSE 12940
// exit ;
12938: GO 12983
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12940: LD_ADDR_VAR 0 2
12944: PUSH
12945: LD_VAR 0 1
12949: PUSH
12950: LD_INT 22
12952: PUSH
12953: LD_VAR 0 1
12957: PPUSH
12958: CALL_OW 255
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PUSH
12967: LD_INT 58
12969: PUSH
12970: EMPTY
12971: LIST
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 69
12981: IN
12982: ST_TO_ADDR
// end ;
12983: LD_VAR 0 2
12987: RET
// export function IsNotFull ( building ) ; var places ; begin
12988: LD_INT 0
12990: PPUSH
12991: PPUSH
// if not building then
12992: LD_VAR 0 1
12996: NOT
12997: IFFALSE 13001
// exit ;
12999: GO 13029
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: LD_VAR 0 1
13010: PPUSH
13011: LD_INT 3
13013: PUSH
13014: LD_INT 62
13016: PUSH
13017: EMPTY
13018: LIST
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PPUSH
13024: CALL_OW 72
13028: ST_TO_ADDR
// end ;
13029: LD_VAR 0 2
13033: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13034: LD_INT 0
13036: PPUSH
13037: PPUSH
13038: PPUSH
13039: PPUSH
// tmp := [ ] ;
13040: LD_ADDR_VAR 0 3
13044: PUSH
13045: EMPTY
13046: ST_TO_ADDR
// list := [ ] ;
13047: LD_ADDR_VAR 0 5
13051: PUSH
13052: EMPTY
13053: ST_TO_ADDR
// for i = 16 to 25 do
13054: LD_ADDR_VAR 0 4
13058: PUSH
13059: DOUBLE
13060: LD_INT 16
13062: DEC
13063: ST_TO_ADDR
13064: LD_INT 25
13066: PUSH
13067: FOR_TO
13068: IFFALSE 13141
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13070: LD_ADDR_VAR 0 3
13074: PUSH
13075: LD_VAR 0 3
13079: PUSH
13080: LD_INT 22
13082: PUSH
13083: LD_VAR 0 1
13087: PPUSH
13088: CALL_OW 255
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PUSH
13097: LD_INT 91
13099: PUSH
13100: LD_VAR 0 1
13104: PUSH
13105: LD_INT 6
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: LIST
13112: PUSH
13113: LD_INT 30
13115: PUSH
13116: LD_VAR 0 4
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: PUSH
13130: EMPTY
13131: LIST
13132: PPUSH
13133: CALL_OW 69
13137: ADD
13138: ST_TO_ADDR
13139: GO 13067
13141: POP
13142: POP
// for i = 1 to tmp do
13143: LD_ADDR_VAR 0 4
13147: PUSH
13148: DOUBLE
13149: LD_INT 1
13151: DEC
13152: ST_TO_ADDR
13153: LD_VAR 0 3
13157: PUSH
13158: FOR_TO
13159: IFFALSE 13247
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13161: LD_ADDR_VAR 0 5
13165: PUSH
13166: LD_VAR 0 5
13170: PUSH
13171: LD_VAR 0 3
13175: PUSH
13176: LD_VAR 0 4
13180: ARRAY
13181: PPUSH
13182: CALL_OW 266
13186: PUSH
13187: LD_VAR 0 3
13191: PUSH
13192: LD_VAR 0 4
13196: ARRAY
13197: PPUSH
13198: CALL_OW 250
13202: PUSH
13203: LD_VAR 0 3
13207: PUSH
13208: LD_VAR 0 4
13212: ARRAY
13213: PPUSH
13214: CALL_OW 251
13218: PUSH
13219: LD_VAR 0 3
13223: PUSH
13224: LD_VAR 0 4
13228: ARRAY
13229: PPUSH
13230: CALL_OW 254
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: PUSH
13241: EMPTY
13242: LIST
13243: ADD
13244: ST_TO_ADDR
13245: GO 13158
13247: POP
13248: POP
// result := list ;
13249: LD_ADDR_VAR 0 2
13253: PUSH
13254: LD_VAR 0 5
13258: ST_TO_ADDR
// end ;
13259: LD_VAR 0 2
13263: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13264: LD_INT 0
13266: PPUSH
13267: PPUSH
13268: PPUSH
13269: PPUSH
13270: PPUSH
13271: PPUSH
13272: PPUSH
// if not factory then
13273: LD_VAR 0 1
13277: NOT
13278: IFFALSE 13282
// exit ;
13280: GO 13885
// if control = control_apeman then
13282: LD_VAR 0 4
13286: PUSH
13287: LD_INT 5
13289: EQUAL
13290: IFFALSE 13399
// begin tmp := UnitsInside ( factory ) ;
13292: LD_ADDR_VAR 0 8
13296: PUSH
13297: LD_VAR 0 1
13301: PPUSH
13302: CALL_OW 313
13306: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13307: LD_VAR 0 8
13311: PPUSH
13312: LD_INT 25
13314: PUSH
13315: LD_INT 12
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PPUSH
13322: CALL_OW 72
13326: NOT
13327: IFFALSE 13337
// control := control_manual ;
13329: LD_ADDR_VAR 0 4
13333: PUSH
13334: LD_INT 1
13336: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13337: LD_ADDR_VAR 0 8
13341: PUSH
13342: LD_VAR 0 1
13346: PPUSH
13347: CALL 13034 0 1
13351: ST_TO_ADDR
// if tmp then
13352: LD_VAR 0 8
13356: IFFALSE 13399
// begin for i in tmp do
13358: LD_ADDR_VAR 0 7
13362: PUSH
13363: LD_VAR 0 8
13367: PUSH
13368: FOR_IN
13369: IFFALSE 13397
// if i [ 1 ] = b_ext_radio then
13371: LD_VAR 0 7
13375: PUSH
13376: LD_INT 1
13378: ARRAY
13379: PUSH
13380: LD_INT 22
13382: EQUAL
13383: IFFALSE 13395
// begin control := control_remote ;
13385: LD_ADDR_VAR 0 4
13389: PUSH
13390: LD_INT 2
13392: ST_TO_ADDR
// break ;
13393: GO 13397
// end ;
13395: GO 13368
13397: POP
13398: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13399: LD_VAR 0 1
13403: PPUSH
13404: LD_VAR 0 2
13408: PPUSH
13409: LD_VAR 0 3
13413: PPUSH
13414: LD_VAR 0 4
13418: PPUSH
13419: LD_VAR 0 5
13423: PPUSH
13424: CALL_OW 448
13428: IFFALSE 13463
// begin result := [ chassis , engine , control , weapon ] ;
13430: LD_ADDR_VAR 0 6
13434: PUSH
13435: LD_VAR 0 2
13439: PUSH
13440: LD_VAR 0 3
13444: PUSH
13445: LD_VAR 0 4
13449: PUSH
13450: LD_VAR 0 5
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: ST_TO_ADDR
// exit ;
13461: GO 13885
// end ; _chassis := AvailableChassisList ( factory ) ;
13463: LD_ADDR_VAR 0 9
13467: PUSH
13468: LD_VAR 0 1
13472: PPUSH
13473: CALL_OW 475
13477: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13478: LD_ADDR_VAR 0 11
13482: PUSH
13483: LD_VAR 0 1
13487: PPUSH
13488: CALL_OW 476
13492: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13493: LD_ADDR_VAR 0 12
13497: PUSH
13498: LD_VAR 0 1
13502: PPUSH
13503: CALL_OW 477
13507: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13508: LD_ADDR_VAR 0 10
13512: PUSH
13513: LD_VAR 0 1
13517: PPUSH
13518: CALL_OW 478
13522: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13523: LD_VAR 0 9
13527: NOT
13528: IFTRUE 13537
13530: PUSH
13531: LD_VAR 0 11
13535: NOT
13536: OR
13537: IFTRUE 13546
13539: PUSH
13540: LD_VAR 0 12
13544: NOT
13545: OR
13546: IFTRUE 13555
13548: PUSH
13549: LD_VAR 0 10
13553: NOT
13554: OR
13555: IFFALSE 13590
// begin result := [ chassis , engine , control , weapon ] ;
13557: LD_ADDR_VAR 0 6
13561: PUSH
13562: LD_VAR 0 2
13566: PUSH
13567: LD_VAR 0 3
13571: PUSH
13572: LD_VAR 0 4
13576: PUSH
13577: LD_VAR 0 5
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: ST_TO_ADDR
// exit ;
13588: GO 13885
// end ; if not chassis in _chassis then
13590: LD_VAR 0 2
13594: PUSH
13595: LD_VAR 0 9
13599: IN
13600: NOT
13601: IFFALSE 13627
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13603: LD_ADDR_VAR 0 2
13607: PUSH
13608: LD_VAR 0 9
13612: PUSH
13613: LD_INT 1
13615: PPUSH
13616: LD_VAR 0 9
13620: PPUSH
13621: CALL_OW 12
13625: ARRAY
13626: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13627: LD_VAR 0 2
13631: PPUSH
13632: LD_VAR 0 3
13636: PPUSH
13637: CALL 13890 0 2
13641: NOT
13642: IFFALSE 13703
// repeat engine := _engine [ 1 ] ;
13644: LD_ADDR_VAR 0 3
13648: PUSH
13649: LD_VAR 0 11
13653: PUSH
13654: LD_INT 1
13656: ARRAY
13657: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13658: LD_ADDR_VAR 0 11
13662: PUSH
13663: LD_VAR 0 11
13667: PPUSH
13668: LD_INT 1
13670: PPUSH
13671: CALL_OW 3
13675: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13676: LD_VAR 0 2
13680: PPUSH
13681: LD_VAR 0 3
13685: PPUSH
13686: CALL 13890 0 2
13690: IFTRUE 13701
13692: PUSH
13693: LD_VAR 0 11
13697: PUSH
13698: EMPTY
13699: EQUAL
13700: OR
13701: IFFALSE 13644
// if not control in _control then
13703: LD_VAR 0 4
13707: PUSH
13708: LD_VAR 0 12
13712: IN
13713: NOT
13714: IFFALSE 13740
// control := _control [ rand ( 1 , _control ) ] ;
13716: LD_ADDR_VAR 0 4
13720: PUSH
13721: LD_VAR 0 12
13725: PUSH
13726: LD_INT 1
13728: PPUSH
13729: LD_VAR 0 12
13733: PPUSH
13734: CALL_OW 12
13738: ARRAY
13739: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13740: LD_VAR 0 2
13744: PPUSH
13745: LD_VAR 0 5
13749: PPUSH
13750: CALL 14112 0 2
13754: NOT
13755: IFFALSE 13816
// repeat weapon := _weapon [ 1 ] ;
13757: LD_ADDR_VAR 0 5
13761: PUSH
13762: LD_VAR 0 10
13766: PUSH
13767: LD_INT 1
13769: ARRAY
13770: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13771: LD_ADDR_VAR 0 10
13775: PUSH
13776: LD_VAR 0 10
13780: PPUSH
13781: LD_INT 1
13783: PPUSH
13784: CALL_OW 3
13788: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13789: LD_VAR 0 2
13793: PPUSH
13794: LD_VAR 0 5
13798: PPUSH
13799: CALL 14112 0 2
13803: IFTRUE 13814
13805: PUSH
13806: LD_VAR 0 10
13810: PUSH
13811: EMPTY
13812: EQUAL
13813: OR
13814: IFFALSE 13757
// result := [ ] ;
13816: LD_ADDR_VAR 0 6
13820: PUSH
13821: EMPTY
13822: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13823: LD_VAR 0 1
13827: PPUSH
13828: LD_VAR 0 2
13832: PPUSH
13833: LD_VAR 0 3
13837: PPUSH
13838: LD_VAR 0 4
13842: PPUSH
13843: LD_VAR 0 5
13847: PPUSH
13848: CALL_OW 448
13852: IFFALSE 13885
// result := [ chassis , engine , control , weapon ] ;
13854: LD_ADDR_VAR 0 6
13858: PUSH
13859: LD_VAR 0 2
13863: PUSH
13864: LD_VAR 0 3
13868: PUSH
13869: LD_VAR 0 4
13873: PUSH
13874: LD_VAR 0 5
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: ST_TO_ADDR
// end ;
13885: LD_VAR 0 6
13889: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13890: LD_INT 0
13892: PPUSH
// if not chassis or not engine then
13893: LD_VAR 0 1
13897: NOT
13898: IFTRUE 13907
13900: PUSH
13901: LD_VAR 0 2
13905: NOT
13906: OR
13907: IFFALSE 13911
// exit ;
13909: GO 14107
// case engine of engine_solar :
13911: LD_VAR 0 2
13915: PUSH
13916: LD_INT 2
13918: DOUBLE
13919: EQUAL
13920: IFTRUE 13924
13922: GO 13962
13924: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13925: LD_ADDR_VAR 0 3
13929: PUSH
13930: LD_INT 11
13932: PUSH
13933: LD_INT 12
13935: PUSH
13936: LD_INT 13
13938: PUSH
13939: LD_INT 14
13941: PUSH
13942: LD_INT 1
13944: PUSH
13945: LD_INT 2
13947: PUSH
13948: LD_INT 3
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: ST_TO_ADDR
13960: GO 14091
13962: LD_INT 1
13964: DOUBLE
13965: EQUAL
13966: IFTRUE 13970
13968: GO 14032
13970: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13971: LD_ADDR_VAR 0 3
13975: PUSH
13976: LD_INT 11
13978: PUSH
13979: LD_INT 12
13981: PUSH
13982: LD_INT 13
13984: PUSH
13985: LD_INT 14
13987: PUSH
13988: LD_INT 1
13990: PUSH
13991: LD_INT 2
13993: PUSH
13994: LD_INT 3
13996: PUSH
13997: LD_INT 4
13999: PUSH
14000: LD_INT 5
14002: PUSH
14003: LD_INT 21
14005: PUSH
14006: LD_INT 23
14008: PUSH
14009: LD_INT 22
14011: PUSH
14012: LD_INT 24
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: ST_TO_ADDR
14030: GO 14091
14032: LD_INT 3
14034: DOUBLE
14035: EQUAL
14036: IFTRUE 14040
14038: GO 14090
14040: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14041: LD_ADDR_VAR 0 3
14045: PUSH
14046: LD_INT 13
14048: PUSH
14049: LD_INT 14
14051: PUSH
14052: LD_INT 2
14054: PUSH
14055: LD_INT 3
14057: PUSH
14058: LD_INT 4
14060: PUSH
14061: LD_INT 5
14063: PUSH
14064: LD_INT 21
14066: PUSH
14067: LD_INT 22
14069: PUSH
14070: LD_INT 23
14072: PUSH
14073: LD_INT 24
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: ST_TO_ADDR
14088: GO 14091
14090: POP
// result := ( chassis in result ) ;
14091: LD_ADDR_VAR 0 3
14095: PUSH
14096: LD_VAR 0 1
14100: PUSH
14101: LD_VAR 0 3
14105: IN
14106: ST_TO_ADDR
// end ;
14107: LD_VAR 0 3
14111: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14112: LD_INT 0
14114: PPUSH
// if not chassis or not weapon then
14115: LD_VAR 0 1
14119: NOT
14120: IFTRUE 14129
14122: PUSH
14123: LD_VAR 0 2
14127: NOT
14128: OR
14129: IFFALSE 14133
// exit ;
14131: GO 15227
// case weapon of us_machine_gun :
14133: LD_VAR 0 2
14137: PUSH
14138: LD_INT 2
14140: DOUBLE
14141: EQUAL
14142: IFTRUE 14146
14144: GO 14176
14146: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14147: LD_ADDR_VAR 0 3
14151: PUSH
14152: LD_INT 1
14154: PUSH
14155: LD_INT 2
14157: PUSH
14158: LD_INT 3
14160: PUSH
14161: LD_INT 4
14163: PUSH
14164: LD_INT 5
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: ST_TO_ADDR
14174: GO 15211
14176: LD_INT 3
14178: DOUBLE
14179: EQUAL
14180: IFTRUE 14184
14182: GO 14214
14184: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14185: LD_ADDR_VAR 0 3
14189: PUSH
14190: LD_INT 1
14192: PUSH
14193: LD_INT 2
14195: PUSH
14196: LD_INT 3
14198: PUSH
14199: LD_INT 4
14201: PUSH
14202: LD_INT 5
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: ST_TO_ADDR
14212: GO 15211
14214: LD_INT 11
14216: DOUBLE
14217: EQUAL
14218: IFTRUE 14222
14220: GO 14252
14222: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14223: LD_ADDR_VAR 0 3
14227: PUSH
14228: LD_INT 1
14230: PUSH
14231: LD_INT 2
14233: PUSH
14234: LD_INT 3
14236: PUSH
14237: LD_INT 4
14239: PUSH
14240: LD_INT 5
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: ST_TO_ADDR
14250: GO 15211
14252: LD_INT 4
14254: DOUBLE
14255: EQUAL
14256: IFTRUE 14260
14258: GO 14286
14260: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14261: LD_ADDR_VAR 0 3
14265: PUSH
14266: LD_INT 2
14268: PUSH
14269: LD_INT 3
14271: PUSH
14272: LD_INT 4
14274: PUSH
14275: LD_INT 5
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: ST_TO_ADDR
14284: GO 15211
14286: LD_INT 5
14288: DOUBLE
14289: EQUAL
14290: IFTRUE 14294
14292: GO 14320
14294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14295: LD_ADDR_VAR 0 3
14299: PUSH
14300: LD_INT 2
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: LD_INT 4
14308: PUSH
14309: LD_INT 5
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: ST_TO_ADDR
14318: GO 15211
14320: LD_INT 9
14322: DOUBLE
14323: EQUAL
14324: IFTRUE 14328
14326: GO 14354
14328: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14329: LD_ADDR_VAR 0 3
14333: PUSH
14334: LD_INT 2
14336: PUSH
14337: LD_INT 3
14339: PUSH
14340: LD_INT 4
14342: PUSH
14343: LD_INT 5
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: ST_TO_ADDR
14352: GO 15211
14354: LD_INT 7
14356: DOUBLE
14357: EQUAL
14358: IFTRUE 14362
14360: GO 14388
14362: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14363: LD_ADDR_VAR 0 3
14367: PUSH
14368: LD_INT 2
14370: PUSH
14371: LD_INT 3
14373: PUSH
14374: LD_INT 4
14376: PUSH
14377: LD_INT 5
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: ST_TO_ADDR
14386: GO 15211
14388: LD_INT 12
14390: DOUBLE
14391: EQUAL
14392: IFTRUE 14396
14394: GO 14422
14396: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14397: LD_ADDR_VAR 0 3
14401: PUSH
14402: LD_INT 2
14404: PUSH
14405: LD_INT 3
14407: PUSH
14408: LD_INT 4
14410: PUSH
14411: LD_INT 5
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: ST_TO_ADDR
14420: GO 15211
14422: LD_INT 13
14424: DOUBLE
14425: EQUAL
14426: IFTRUE 14430
14428: GO 14456
14430: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14431: LD_ADDR_VAR 0 3
14435: PUSH
14436: LD_INT 2
14438: PUSH
14439: LD_INT 3
14441: PUSH
14442: LD_INT 4
14444: PUSH
14445: LD_INT 5
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: ST_TO_ADDR
14454: GO 15211
14456: LD_INT 14
14458: DOUBLE
14459: EQUAL
14460: IFTRUE 14464
14462: GO 14482
14464: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14465: LD_ADDR_VAR 0 3
14469: PUSH
14470: LD_INT 4
14472: PUSH
14473: LD_INT 5
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: ST_TO_ADDR
14480: GO 15211
14482: LD_INT 6
14484: DOUBLE
14485: EQUAL
14486: IFTRUE 14490
14488: GO 14508
14490: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14491: LD_ADDR_VAR 0 3
14495: PUSH
14496: LD_INT 4
14498: PUSH
14499: LD_INT 5
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: ST_TO_ADDR
14506: GO 15211
14508: LD_INT 10
14510: DOUBLE
14511: EQUAL
14512: IFTRUE 14516
14514: GO 14534
14516: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14517: LD_ADDR_VAR 0 3
14521: PUSH
14522: LD_INT 4
14524: PUSH
14525: LD_INT 5
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: ST_TO_ADDR
14532: GO 15211
14534: LD_INT 22
14536: DOUBLE
14537: EQUAL
14538: IFTRUE 14542
14540: GO 14568
14542: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14543: LD_ADDR_VAR 0 3
14547: PUSH
14548: LD_INT 11
14550: PUSH
14551: LD_INT 12
14553: PUSH
14554: LD_INT 13
14556: PUSH
14557: LD_INT 14
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: ST_TO_ADDR
14566: GO 15211
14568: LD_INT 23
14570: DOUBLE
14571: EQUAL
14572: IFTRUE 14576
14574: GO 14602
14576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14577: LD_ADDR_VAR 0 3
14581: PUSH
14582: LD_INT 11
14584: PUSH
14585: LD_INT 12
14587: PUSH
14588: LD_INT 13
14590: PUSH
14591: LD_INT 14
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: ST_TO_ADDR
14600: GO 15211
14602: LD_INT 24
14604: DOUBLE
14605: EQUAL
14606: IFTRUE 14610
14608: GO 14636
14610: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14611: LD_ADDR_VAR 0 3
14615: PUSH
14616: LD_INT 11
14618: PUSH
14619: LD_INT 12
14621: PUSH
14622: LD_INT 13
14624: PUSH
14625: LD_INT 14
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: ST_TO_ADDR
14634: GO 15211
14636: LD_INT 30
14638: DOUBLE
14639: EQUAL
14640: IFTRUE 14644
14642: GO 14670
14644: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14645: LD_ADDR_VAR 0 3
14649: PUSH
14650: LD_INT 11
14652: PUSH
14653: LD_INT 12
14655: PUSH
14656: LD_INT 13
14658: PUSH
14659: LD_INT 14
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: ST_TO_ADDR
14668: GO 15211
14670: LD_INT 25
14672: DOUBLE
14673: EQUAL
14674: IFTRUE 14678
14676: GO 14696
14678: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14679: LD_ADDR_VAR 0 3
14683: PUSH
14684: LD_INT 13
14686: PUSH
14687: LD_INT 14
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: ST_TO_ADDR
14694: GO 15211
14696: LD_INT 27
14698: DOUBLE
14699: EQUAL
14700: IFTRUE 14704
14702: GO 14722
14704: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14705: LD_ADDR_VAR 0 3
14709: PUSH
14710: LD_INT 13
14712: PUSH
14713: LD_INT 14
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: ST_TO_ADDR
14720: GO 15211
14722: LD_INT 92
14724: DOUBLE
14725: EQUAL
14726: IFTRUE 14730
14728: GO 14756
14730: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14731: LD_ADDR_VAR 0 3
14735: PUSH
14736: LD_INT 11
14738: PUSH
14739: LD_INT 12
14741: PUSH
14742: LD_INT 13
14744: PUSH
14745: LD_INT 14
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: ST_TO_ADDR
14754: GO 15211
14756: LD_INT 28
14758: DOUBLE
14759: EQUAL
14760: IFTRUE 14764
14762: GO 14782
14764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14765: LD_ADDR_VAR 0 3
14769: PUSH
14770: LD_INT 13
14772: PUSH
14773: LD_INT 14
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: ST_TO_ADDR
14780: GO 15211
14782: LD_INT 29
14784: DOUBLE
14785: EQUAL
14786: IFTRUE 14790
14788: GO 14808
14790: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14791: LD_ADDR_VAR 0 3
14795: PUSH
14796: LD_INT 13
14798: PUSH
14799: LD_INT 14
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: ST_TO_ADDR
14806: GO 15211
14808: LD_INT 31
14810: DOUBLE
14811: EQUAL
14812: IFTRUE 14816
14814: GO 14834
14816: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14817: LD_ADDR_VAR 0 3
14821: PUSH
14822: LD_INT 13
14824: PUSH
14825: LD_INT 14
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: ST_TO_ADDR
14832: GO 15211
14834: LD_INT 26
14836: DOUBLE
14837: EQUAL
14838: IFTRUE 14842
14840: GO 14860
14842: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14843: LD_ADDR_VAR 0 3
14847: PUSH
14848: LD_INT 13
14850: PUSH
14851: LD_INT 14
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: ST_TO_ADDR
14858: GO 15211
14860: LD_INT 42
14862: DOUBLE
14863: EQUAL
14864: IFTRUE 14868
14866: GO 14894
14868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14869: LD_ADDR_VAR 0 3
14873: PUSH
14874: LD_INT 21
14876: PUSH
14877: LD_INT 22
14879: PUSH
14880: LD_INT 23
14882: PUSH
14883: LD_INT 24
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: ST_TO_ADDR
14892: GO 15211
14894: LD_INT 43
14896: DOUBLE
14897: EQUAL
14898: IFTRUE 14902
14900: GO 14928
14902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14903: LD_ADDR_VAR 0 3
14907: PUSH
14908: LD_INT 21
14910: PUSH
14911: LD_INT 22
14913: PUSH
14914: LD_INT 23
14916: PUSH
14917: LD_INT 24
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: ST_TO_ADDR
14926: GO 15211
14928: LD_INT 44
14930: DOUBLE
14931: EQUAL
14932: IFTRUE 14936
14934: GO 14962
14936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14937: LD_ADDR_VAR 0 3
14941: PUSH
14942: LD_INT 21
14944: PUSH
14945: LD_INT 22
14947: PUSH
14948: LD_INT 23
14950: PUSH
14951: LD_INT 24
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: ST_TO_ADDR
14960: GO 15211
14962: LD_INT 45
14964: DOUBLE
14965: EQUAL
14966: IFTRUE 14970
14968: GO 14996
14970: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14971: LD_ADDR_VAR 0 3
14975: PUSH
14976: LD_INT 21
14978: PUSH
14979: LD_INT 22
14981: PUSH
14982: LD_INT 23
14984: PUSH
14985: LD_INT 24
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: ST_TO_ADDR
14994: GO 15211
14996: LD_INT 49
14998: DOUBLE
14999: EQUAL
15000: IFTRUE 15004
15002: GO 15030
15004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15005: LD_ADDR_VAR 0 3
15009: PUSH
15010: LD_INT 21
15012: PUSH
15013: LD_INT 22
15015: PUSH
15016: LD_INT 23
15018: PUSH
15019: LD_INT 24
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: ST_TO_ADDR
15028: GO 15211
15030: LD_INT 51
15032: DOUBLE
15033: EQUAL
15034: IFTRUE 15038
15036: GO 15064
15038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15039: LD_ADDR_VAR 0 3
15043: PUSH
15044: LD_INT 21
15046: PUSH
15047: LD_INT 22
15049: PUSH
15050: LD_INT 23
15052: PUSH
15053: LD_INT 24
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: ST_TO_ADDR
15062: GO 15211
15064: LD_INT 52
15066: DOUBLE
15067: EQUAL
15068: IFTRUE 15072
15070: GO 15098
15072: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15073: LD_ADDR_VAR 0 3
15077: PUSH
15078: LD_INT 21
15080: PUSH
15081: LD_INT 22
15083: PUSH
15084: LD_INT 23
15086: PUSH
15087: LD_INT 24
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: ST_TO_ADDR
15096: GO 15211
15098: LD_INT 53
15100: DOUBLE
15101: EQUAL
15102: IFTRUE 15106
15104: GO 15124
15106: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15107: LD_ADDR_VAR 0 3
15111: PUSH
15112: LD_INT 23
15114: PUSH
15115: LD_INT 24
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: ST_TO_ADDR
15122: GO 15211
15124: LD_INT 46
15126: DOUBLE
15127: EQUAL
15128: IFTRUE 15132
15130: GO 15150
15132: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15133: LD_ADDR_VAR 0 3
15137: PUSH
15138: LD_INT 23
15140: PUSH
15141: LD_INT 24
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: ST_TO_ADDR
15148: GO 15211
15150: LD_INT 47
15152: DOUBLE
15153: EQUAL
15154: IFTRUE 15158
15156: GO 15176
15158: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15159: LD_ADDR_VAR 0 3
15163: PUSH
15164: LD_INT 23
15166: PUSH
15167: LD_INT 24
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: ST_TO_ADDR
15174: GO 15211
15176: LD_INT 98
15178: DOUBLE
15179: EQUAL
15180: IFTRUE 15184
15182: GO 15210
15184: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15185: LD_ADDR_VAR 0 3
15189: PUSH
15190: LD_INT 21
15192: PUSH
15193: LD_INT 22
15195: PUSH
15196: LD_INT 23
15198: PUSH
15199: LD_INT 24
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: ST_TO_ADDR
15208: GO 15211
15210: POP
// result := ( chassis in result ) ;
15211: LD_ADDR_VAR 0 3
15215: PUSH
15216: LD_VAR 0 1
15220: PUSH
15221: LD_VAR 0 3
15225: IN
15226: ST_TO_ADDR
// end ;
15227: LD_VAR 0 3
15231: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15232: LD_INT 0
15234: PPUSH
15235: PPUSH
15236: PPUSH
15237: PPUSH
15238: PPUSH
15239: PPUSH
15240: PPUSH
// result := array ;
15241: LD_ADDR_VAR 0 5
15245: PUSH
15246: LD_VAR 0 1
15250: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15251: LD_VAR 0 1
15255: NOT
15256: IFTRUE 15265
15258: PUSH
15259: LD_VAR 0 2
15263: NOT
15264: OR
15265: IFTRUE 15274
15267: PUSH
15268: LD_VAR 0 3
15272: NOT
15273: OR
15274: IFTRUE 15288
15276: PUSH
15277: LD_VAR 0 2
15281: PUSH
15282: LD_VAR 0 1
15286: GREATER
15287: OR
15288: IFTRUE 15302
15290: PUSH
15291: LD_VAR 0 3
15295: PUSH
15296: LD_VAR 0 1
15300: GREATER
15301: OR
15302: IFFALSE 15306
// exit ;
15304: GO 15602
// if direction then
15306: LD_VAR 0 4
15310: IFFALSE 15374
// begin d := 1 ;
15312: LD_ADDR_VAR 0 9
15316: PUSH
15317: LD_INT 1
15319: ST_TO_ADDR
// if i_from > i_to then
15320: LD_VAR 0 2
15324: PUSH
15325: LD_VAR 0 3
15329: GREATER
15330: IFFALSE 15356
// length := ( array - i_from ) + i_to else
15332: LD_ADDR_VAR 0 11
15336: PUSH
15337: LD_VAR 0 1
15341: PUSH
15342: LD_VAR 0 2
15346: MINUS
15347: PUSH
15348: LD_VAR 0 3
15352: PLUS
15353: ST_TO_ADDR
15354: GO 15372
// length := i_to - i_from ;
15356: LD_ADDR_VAR 0 11
15360: PUSH
15361: LD_VAR 0 3
15365: PUSH
15366: LD_VAR 0 2
15370: MINUS
15371: ST_TO_ADDR
// end else
15372: GO 15435
// begin d := - 1 ;
15374: LD_ADDR_VAR 0 9
15378: PUSH
15379: LD_INT 1
15381: NEG
15382: ST_TO_ADDR
// if i_from > i_to then
15383: LD_VAR 0 2
15387: PUSH
15388: LD_VAR 0 3
15392: GREATER
15393: IFFALSE 15413
// length := i_from - i_to else
15395: LD_ADDR_VAR 0 11
15399: PUSH
15400: LD_VAR 0 2
15404: PUSH
15405: LD_VAR 0 3
15409: MINUS
15410: ST_TO_ADDR
15411: GO 15435
// length := ( array - i_to ) + i_from ;
15413: LD_ADDR_VAR 0 11
15417: PUSH
15418: LD_VAR 0 1
15422: PUSH
15423: LD_VAR 0 3
15427: MINUS
15428: PUSH
15429: LD_VAR 0 2
15433: PLUS
15434: ST_TO_ADDR
// end ; if not length then
15435: LD_VAR 0 11
15439: NOT
15440: IFFALSE 15444
// exit ;
15442: GO 15602
// tmp := array ;
15444: LD_ADDR_VAR 0 10
15448: PUSH
15449: LD_VAR 0 1
15453: ST_TO_ADDR
// for i = 1 to length do
15454: LD_ADDR_VAR 0 6
15458: PUSH
15459: DOUBLE
15460: LD_INT 1
15462: DEC
15463: ST_TO_ADDR
15464: LD_VAR 0 11
15468: PUSH
15469: FOR_TO
15470: IFFALSE 15590
// begin for j = 1 to array do
15472: LD_ADDR_VAR 0 7
15476: PUSH
15477: DOUBLE
15478: LD_INT 1
15480: DEC
15481: ST_TO_ADDR
15482: LD_VAR 0 1
15486: PUSH
15487: FOR_TO
15488: IFFALSE 15576
// begin k := j + d ;
15490: LD_ADDR_VAR 0 8
15494: PUSH
15495: LD_VAR 0 7
15499: PUSH
15500: LD_VAR 0 9
15504: PLUS
15505: ST_TO_ADDR
// if k > array then
15506: LD_VAR 0 8
15510: PUSH
15511: LD_VAR 0 1
15515: GREATER
15516: IFFALSE 15526
// k := 1 ;
15518: LD_ADDR_VAR 0 8
15522: PUSH
15523: LD_INT 1
15525: ST_TO_ADDR
// if not k then
15526: LD_VAR 0 8
15530: NOT
15531: IFFALSE 15543
// k := array ;
15533: LD_ADDR_VAR 0 8
15537: PUSH
15538: LD_VAR 0 1
15542: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15543: LD_ADDR_VAR 0 10
15547: PUSH
15548: LD_VAR 0 10
15552: PPUSH
15553: LD_VAR 0 8
15557: PPUSH
15558: LD_VAR 0 1
15562: PUSH
15563: LD_VAR 0 7
15567: ARRAY
15568: PPUSH
15569: CALL_OW 1
15573: ST_TO_ADDR
// end ;
15574: GO 15487
15576: POP
15577: POP
// array := tmp ;
15578: LD_ADDR_VAR 0 1
15582: PUSH
15583: LD_VAR 0 10
15587: ST_TO_ADDR
// end ;
15588: GO 15469
15590: POP
15591: POP
// result := array ;
15592: LD_ADDR_VAR 0 5
15596: PUSH
15597: LD_VAR 0 1
15601: ST_TO_ADDR
// end ;
15602: LD_VAR 0 5
15606: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15607: LD_INT 0
15609: PPUSH
15610: PPUSH
// result := 0 ;
15611: LD_ADDR_VAR 0 3
15615: PUSH
15616: LD_INT 0
15618: ST_TO_ADDR
// if not array or not value in array then
15619: LD_VAR 0 1
15623: NOT
15624: IFTRUE 15639
15626: PUSH
15627: LD_VAR 0 2
15631: PUSH
15632: LD_VAR 0 1
15636: IN
15637: NOT
15638: OR
15639: IFFALSE 15643
// exit ;
15641: GO 15697
// for i = 1 to array do
15643: LD_ADDR_VAR 0 4
15647: PUSH
15648: DOUBLE
15649: LD_INT 1
15651: DEC
15652: ST_TO_ADDR
15653: LD_VAR 0 1
15657: PUSH
15658: FOR_TO
15659: IFFALSE 15695
// if value = array [ i ] then
15661: LD_VAR 0 2
15665: PUSH
15666: LD_VAR 0 1
15670: PUSH
15671: LD_VAR 0 4
15675: ARRAY
15676: EQUAL
15677: IFFALSE 15693
// begin result := i ;
15679: LD_ADDR_VAR 0 3
15683: PUSH
15684: LD_VAR 0 4
15688: ST_TO_ADDR
// exit ;
15689: POP
15690: POP
15691: GO 15697
// end ;
15693: GO 15658
15695: POP
15696: POP
// end ;
15697: LD_VAR 0 3
15701: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15702: LD_INT 0
15704: PPUSH
// vc_chassis := chassis ;
15705: LD_ADDR_OWVAR 37
15709: PUSH
15710: LD_VAR 0 1
15714: ST_TO_ADDR
// vc_engine := engine ;
15715: LD_ADDR_OWVAR 39
15719: PUSH
15720: LD_VAR 0 2
15724: ST_TO_ADDR
// vc_control := control ;
15725: LD_ADDR_OWVAR 38
15729: PUSH
15730: LD_VAR 0 3
15734: ST_TO_ADDR
// vc_weapon := weapon ;
15735: LD_ADDR_OWVAR 40
15739: PUSH
15740: LD_VAR 0 4
15744: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15745: LD_ADDR_OWVAR 41
15749: PUSH
15750: LD_VAR 0 5
15754: ST_TO_ADDR
// end ;
15755: LD_VAR 0 6
15759: RET
// export function WantPlant ( unit ) ; var task ; begin
15760: LD_INT 0
15762: PPUSH
15763: PPUSH
// result := false ;
15764: LD_ADDR_VAR 0 2
15768: PUSH
15769: LD_INT 0
15771: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15772: LD_ADDR_VAR 0 3
15776: PUSH
15777: LD_VAR 0 1
15781: PPUSH
15782: CALL_OW 437
15786: ST_TO_ADDR
// if task then
15787: LD_VAR 0 3
15791: IFFALSE 15819
// if task [ 1 ] [ 1 ] = p then
15793: LD_VAR 0 3
15797: PUSH
15798: LD_INT 1
15800: ARRAY
15801: PUSH
15802: LD_INT 1
15804: ARRAY
15805: PUSH
15806: LD_STRING p
15808: EQUAL
15809: IFFALSE 15819
// result := true ;
15811: LD_ADDR_VAR 0 2
15815: PUSH
15816: LD_INT 1
15818: ST_TO_ADDR
// end ;
15819: LD_VAR 0 2
15823: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15824: LD_INT 0
15826: PPUSH
15827: PPUSH
15828: PPUSH
15829: PPUSH
// if pos < 1 then
15830: LD_VAR 0 2
15834: PUSH
15835: LD_INT 1
15837: LESS
15838: IFFALSE 15842
// exit ;
15840: GO 16145
// if pos = 1 then
15842: LD_VAR 0 2
15846: PUSH
15847: LD_INT 1
15849: EQUAL
15850: IFFALSE 15883
// result := Replace ( arr , pos [ 1 ] , value ) else
15852: LD_ADDR_VAR 0 4
15856: PUSH
15857: LD_VAR 0 1
15861: PPUSH
15862: LD_VAR 0 2
15866: PUSH
15867: LD_INT 1
15869: ARRAY
15870: PPUSH
15871: LD_VAR 0 3
15875: PPUSH
15876: CALL_OW 1
15880: ST_TO_ADDR
15881: GO 16145
// begin tmp := arr ;
15883: LD_ADDR_VAR 0 6
15887: PUSH
15888: LD_VAR 0 1
15892: ST_TO_ADDR
// s_arr := [ tmp ] ;
15893: LD_ADDR_VAR 0 7
15897: PUSH
15898: LD_VAR 0 6
15902: PUSH
15903: EMPTY
15904: LIST
15905: ST_TO_ADDR
// for i = 1 to pos - 1 do
15906: LD_ADDR_VAR 0 5
15910: PUSH
15911: DOUBLE
15912: LD_INT 1
15914: DEC
15915: ST_TO_ADDR
15916: LD_VAR 0 2
15920: PUSH
15921: LD_INT 1
15923: MINUS
15924: PUSH
15925: FOR_TO
15926: IFFALSE 15971
// begin tmp := tmp [ pos [ i ] ] ;
15928: LD_ADDR_VAR 0 6
15932: PUSH
15933: LD_VAR 0 6
15937: PUSH
15938: LD_VAR 0 2
15942: PUSH
15943: LD_VAR 0 5
15947: ARRAY
15948: ARRAY
15949: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15950: LD_ADDR_VAR 0 7
15954: PUSH
15955: LD_VAR 0 7
15959: PUSH
15960: LD_VAR 0 6
15964: PUSH
15965: EMPTY
15966: LIST
15967: ADD
15968: ST_TO_ADDR
// end ;
15969: GO 15925
15971: POP
15972: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15973: LD_ADDR_VAR 0 6
15977: PUSH
15978: LD_VAR 0 6
15982: PPUSH
15983: LD_VAR 0 2
15987: PUSH
15988: LD_VAR 0 2
15992: ARRAY
15993: PPUSH
15994: LD_VAR 0 3
15998: PPUSH
15999: CALL_OW 1
16003: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16004: LD_ADDR_VAR 0 7
16008: PUSH
16009: LD_VAR 0 7
16013: PPUSH
16014: LD_VAR 0 7
16018: PPUSH
16019: LD_VAR 0 6
16023: PPUSH
16024: CALL_OW 1
16028: ST_TO_ADDR
// for i = s_arr downto 2 do
16029: LD_ADDR_VAR 0 5
16033: PUSH
16034: DOUBLE
16035: LD_VAR 0 7
16039: INC
16040: ST_TO_ADDR
16041: LD_INT 2
16043: PUSH
16044: FOR_DOWNTO
16045: IFFALSE 16129
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16047: LD_ADDR_VAR 0 6
16051: PUSH
16052: LD_VAR 0 7
16056: PUSH
16057: LD_VAR 0 5
16061: PUSH
16062: LD_INT 1
16064: MINUS
16065: ARRAY
16066: PPUSH
16067: LD_VAR 0 2
16071: PUSH
16072: LD_VAR 0 5
16076: PUSH
16077: LD_INT 1
16079: MINUS
16080: ARRAY
16081: PPUSH
16082: LD_VAR 0 7
16086: PUSH
16087: LD_VAR 0 5
16091: ARRAY
16092: PPUSH
16093: CALL_OW 1
16097: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16098: LD_ADDR_VAR 0 7
16102: PUSH
16103: LD_VAR 0 7
16107: PPUSH
16108: LD_VAR 0 5
16112: PUSH
16113: LD_INT 1
16115: MINUS
16116: PPUSH
16117: LD_VAR 0 6
16121: PPUSH
16122: CALL_OW 1
16126: ST_TO_ADDR
// end ;
16127: GO 16044
16129: POP
16130: POP
// result := s_arr [ 1 ] ;
16131: LD_ADDR_VAR 0 4
16135: PUSH
16136: LD_VAR 0 7
16140: PUSH
16141: LD_INT 1
16143: ARRAY
16144: ST_TO_ADDR
// end ; end ;
16145: LD_VAR 0 4
16149: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16150: LD_INT 0
16152: PPUSH
16153: PPUSH
// if not list then
16154: LD_VAR 0 1
16158: NOT
16159: IFFALSE 16163
// exit ;
16161: GO 16254
// i := list [ pos1 ] ;
16163: LD_ADDR_VAR 0 5
16167: PUSH
16168: LD_VAR 0 1
16172: PUSH
16173: LD_VAR 0 2
16177: ARRAY
16178: ST_TO_ADDR
// if not i then
16179: LD_VAR 0 5
16183: NOT
16184: IFFALSE 16188
// exit ;
16186: GO 16254
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16188: LD_ADDR_VAR 0 1
16192: PUSH
16193: LD_VAR 0 1
16197: PPUSH
16198: LD_VAR 0 2
16202: PPUSH
16203: LD_VAR 0 1
16207: PUSH
16208: LD_VAR 0 3
16212: ARRAY
16213: PPUSH
16214: CALL_OW 1
16218: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16219: LD_ADDR_VAR 0 1
16223: PUSH
16224: LD_VAR 0 1
16228: PPUSH
16229: LD_VAR 0 3
16233: PPUSH
16234: LD_VAR 0 5
16238: PPUSH
16239: CALL_OW 1
16243: ST_TO_ADDR
// result := list ;
16244: LD_ADDR_VAR 0 4
16248: PUSH
16249: LD_VAR 0 1
16253: ST_TO_ADDR
// end ;
16254: LD_VAR 0 4
16258: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16259: LD_INT 0
16261: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16262: LD_ADDR_VAR 0 5
16266: PUSH
16267: LD_VAR 0 1
16271: PPUSH
16272: CALL_OW 250
16276: PPUSH
16277: LD_VAR 0 1
16281: PPUSH
16282: CALL_OW 251
16286: PPUSH
16287: LD_VAR 0 2
16291: PPUSH
16292: LD_VAR 0 3
16296: PPUSH
16297: LD_VAR 0 4
16301: PPUSH
16302: CALL 16684 0 5
16306: ST_TO_ADDR
// end ;
16307: LD_VAR 0 5
16311: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16312: LD_INT 0
16314: PPUSH
16315: PPUSH
16316: PPUSH
16317: PPUSH
// if not list or not unit then
16318: LD_VAR 0 2
16322: NOT
16323: IFTRUE 16332
16325: PUSH
16326: LD_VAR 0 1
16330: NOT
16331: OR
16332: IFFALSE 16336
// exit ;
16334: GO 16679
// result := [ ] ;
16336: LD_ADDR_VAR 0 5
16340: PUSH
16341: EMPTY
16342: ST_TO_ADDR
// for i in list do
16343: LD_ADDR_VAR 0 6
16347: PUSH
16348: LD_VAR 0 2
16352: PUSH
16353: FOR_IN
16354: IFFALSE 16572
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
16356: LD_ADDR_VAR 0 8
16360: PUSH
16361: LD_VAR 0 1
16365: PPUSH
16366: LD_VAR 0 6
16370: PUSH
16371: LD_INT 1
16373: ARRAY
16374: PPUSH
16375: LD_VAR 0 6
16379: PUSH
16380: LD_INT 2
16382: ARRAY
16383: PPUSH
16384: CALL_OW 297
16388: ST_TO_ADDR
// if not Count ( result ) then
16389: LD_VAR 0 5
16393: PPUSH
16394: CALL 12906 0 1
16398: NOT
16399: IFFALSE 16432
// begin result := Join ( result , [ i , tmp ] ) ;
16401: LD_ADDR_VAR 0 5
16405: PUSH
16406: LD_VAR 0 5
16410: PPUSH
16411: LD_VAR 0 6
16415: PUSH
16416: LD_VAR 0 8
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PPUSH
16425: CALL 48872 0 2
16429: ST_TO_ADDR
// continue ;
16430: GO 16353
// end ; if result [ result ] [ 2 ] <= tmp then
16432: LD_VAR 0 5
16436: PUSH
16437: LD_VAR 0 5
16441: ARRAY
16442: PUSH
16443: LD_INT 2
16445: ARRAY
16446: PUSH
16447: LD_VAR 0 8
16451: LESSEQUAL
16452: IFFALSE 16485
// result := Join ( result , [ i , tmp ] ) else
16454: LD_ADDR_VAR 0 5
16458: PUSH
16459: LD_VAR 0 5
16463: PPUSH
16464: LD_VAR 0 6
16468: PUSH
16469: LD_VAR 0 8
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: PPUSH
16478: CALL 48872 0 2
16482: ST_TO_ADDR
16483: GO 16570
// begin for j := 1 to Count ( result ) do
16485: LD_ADDR_VAR 0 7
16489: PUSH
16490: DOUBLE
16491: LD_INT 1
16493: DEC
16494: ST_TO_ADDR
16495: LD_VAR 0 5
16499: PPUSH
16500: CALL 12906 0 1
16504: PUSH
16505: FOR_TO
16506: IFFALSE 16568
// begin if tmp < result [ j ] [ 2 ] then
16508: LD_VAR 0 8
16512: PUSH
16513: LD_VAR 0 5
16517: PUSH
16518: LD_VAR 0 7
16522: ARRAY
16523: PUSH
16524: LD_INT 2
16526: ARRAY
16527: LESS
16528: IFFALSE 16566
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16530: LD_ADDR_VAR 0 5
16534: PUSH
16535: LD_VAR 0 5
16539: PPUSH
16540: LD_VAR 0 7
16544: PPUSH
16545: LD_VAR 0 6
16549: PUSH
16550: LD_VAR 0 8
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PPUSH
16559: CALL_OW 2
16563: ST_TO_ADDR
// break ;
16564: GO 16568
// end ; end ;
16566: GO 16505
16568: POP
16569: POP
// end ; end ;
16570: GO 16353
16572: POP
16573: POP
// if result and not asc then
16574: LD_VAR 0 5
16578: IFFALSE 16587
16580: PUSH
16581: LD_VAR 0 3
16585: NOT
16586: AND
16587: IFFALSE 16604
// result := ReverseArray ( result ) ;
16589: LD_ADDR_VAR 0 5
16593: PUSH
16594: LD_VAR 0 5
16598: PPUSH
16599: CALL 43962 0 1
16603: ST_TO_ADDR
// tmp := [ ] ;
16604: LD_ADDR_VAR 0 8
16608: PUSH
16609: EMPTY
16610: ST_TO_ADDR
// if mode then
16611: LD_VAR 0 4
16615: IFFALSE 16679
// begin for i := 1 to result do
16617: LD_ADDR_VAR 0 6
16621: PUSH
16622: DOUBLE
16623: LD_INT 1
16625: DEC
16626: ST_TO_ADDR
16627: LD_VAR 0 5
16631: PUSH
16632: FOR_TO
16633: IFFALSE 16667
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
16635: LD_ADDR_VAR 0 8
16639: PUSH
16640: LD_VAR 0 8
16644: PPUSH
16645: LD_VAR 0 5
16649: PUSH
16650: LD_VAR 0 6
16654: ARRAY
16655: PUSH
16656: LD_INT 1
16658: ARRAY
16659: PPUSH
16660: CALL 48872 0 2
16664: ST_TO_ADDR
16665: GO 16632
16667: POP
16668: POP
// result := tmp ;
16669: LD_ADDR_VAR 0 5
16673: PUSH
16674: LD_VAR 0 8
16678: ST_TO_ADDR
// end ; end ;
16679: LD_VAR 0 5
16683: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16684: LD_INT 0
16686: PPUSH
16687: PPUSH
16688: PPUSH
16689: PPUSH
// if not list then
16690: LD_VAR 0 3
16694: NOT
16695: IFFALSE 16699
// exit ;
16697: GO 17089
// result := [ ] ;
16699: LD_ADDR_VAR 0 6
16703: PUSH
16704: EMPTY
16705: ST_TO_ADDR
// for i in list do
16706: LD_ADDR_VAR 0 7
16710: PUSH
16711: LD_VAR 0 3
16715: PUSH
16716: FOR_IN
16717: IFFALSE 16919
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16719: LD_ADDR_VAR 0 9
16723: PUSH
16724: LD_VAR 0 7
16728: PPUSH
16729: LD_VAR 0 1
16733: PPUSH
16734: LD_VAR 0 2
16738: PPUSH
16739: CALL_OW 297
16743: ST_TO_ADDR
// if not result then
16744: LD_VAR 0 6
16748: NOT
16749: IFFALSE 16775
// result := [ [ i , tmp ] ] else
16751: LD_ADDR_VAR 0 6
16755: PUSH
16756: LD_VAR 0 7
16760: PUSH
16761: LD_VAR 0 9
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: EMPTY
16771: LIST
16772: ST_TO_ADDR
16773: GO 16917
// begin if result [ result ] [ 2 ] <= tmp then
16775: LD_VAR 0 6
16779: PUSH
16780: LD_VAR 0 6
16784: ARRAY
16785: PUSH
16786: LD_INT 2
16788: ARRAY
16789: PUSH
16790: LD_VAR 0 9
16794: LESSEQUAL
16795: IFFALSE 16837
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16797: LD_ADDR_VAR 0 6
16801: PUSH
16802: LD_VAR 0 6
16806: PPUSH
16807: LD_VAR 0 6
16811: PUSH
16812: LD_INT 1
16814: PLUS
16815: PPUSH
16816: LD_VAR 0 7
16820: PUSH
16821: LD_VAR 0 9
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PPUSH
16830: CALL_OW 2
16834: ST_TO_ADDR
16835: GO 16917
// for j := 1 to result do
16837: LD_ADDR_VAR 0 8
16841: PUSH
16842: DOUBLE
16843: LD_INT 1
16845: DEC
16846: ST_TO_ADDR
16847: LD_VAR 0 6
16851: PUSH
16852: FOR_TO
16853: IFFALSE 16915
// begin if tmp < result [ j ] [ 2 ] then
16855: LD_VAR 0 9
16859: PUSH
16860: LD_VAR 0 6
16864: PUSH
16865: LD_VAR 0 8
16869: ARRAY
16870: PUSH
16871: LD_INT 2
16873: ARRAY
16874: LESS
16875: IFFALSE 16913
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16877: LD_ADDR_VAR 0 6
16881: PUSH
16882: LD_VAR 0 6
16886: PPUSH
16887: LD_VAR 0 8
16891: PPUSH
16892: LD_VAR 0 7
16896: PUSH
16897: LD_VAR 0 9
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: PPUSH
16906: CALL_OW 2
16910: ST_TO_ADDR
// break ;
16911: GO 16915
// end ; end ;
16913: GO 16852
16915: POP
16916: POP
// end ; end ;
16917: GO 16716
16919: POP
16920: POP
// if result and not asc then
16921: LD_VAR 0 6
16925: IFFALSE 16934
16927: PUSH
16928: LD_VAR 0 4
16932: NOT
16933: AND
16934: IFFALSE 17009
// begin tmp := result ;
16936: LD_ADDR_VAR 0 9
16940: PUSH
16941: LD_VAR 0 6
16945: ST_TO_ADDR
// for i = tmp downto 1 do
16946: LD_ADDR_VAR 0 7
16950: PUSH
16951: DOUBLE
16952: LD_VAR 0 9
16956: INC
16957: ST_TO_ADDR
16958: LD_INT 1
16960: PUSH
16961: FOR_DOWNTO
16962: IFFALSE 17007
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16964: LD_ADDR_VAR 0 6
16968: PUSH
16969: LD_VAR 0 6
16973: PPUSH
16974: LD_VAR 0 9
16978: PUSH
16979: LD_VAR 0 7
16983: MINUS
16984: PUSH
16985: LD_INT 1
16987: PLUS
16988: PPUSH
16989: LD_VAR 0 9
16993: PUSH
16994: LD_VAR 0 7
16998: ARRAY
16999: PPUSH
17000: CALL_OW 1
17004: ST_TO_ADDR
17005: GO 16961
17007: POP
17008: POP
// end ; tmp := [ ] ;
17009: LD_ADDR_VAR 0 9
17013: PUSH
17014: EMPTY
17015: ST_TO_ADDR
// if mode then
17016: LD_VAR 0 5
17020: IFFALSE 17089
// begin for i = 1 to result do
17022: LD_ADDR_VAR 0 7
17026: PUSH
17027: DOUBLE
17028: LD_INT 1
17030: DEC
17031: ST_TO_ADDR
17032: LD_VAR 0 6
17036: PUSH
17037: FOR_TO
17038: IFFALSE 17077
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17040: LD_ADDR_VAR 0 9
17044: PUSH
17045: LD_VAR 0 9
17049: PPUSH
17050: LD_VAR 0 7
17054: PPUSH
17055: LD_VAR 0 6
17059: PUSH
17060: LD_VAR 0 7
17064: ARRAY
17065: PUSH
17066: LD_INT 1
17068: ARRAY
17069: PPUSH
17070: CALL_OW 1
17074: ST_TO_ADDR
17075: GO 17037
17077: POP
17078: POP
// result := tmp ;
17079: LD_ADDR_VAR 0 6
17083: PUSH
17084: LD_VAR 0 9
17088: ST_TO_ADDR
// end ; end ;
17089: LD_VAR 0 6
17093: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17094: LD_INT 0
17096: PPUSH
17097: PPUSH
17098: PPUSH
17099: PPUSH
17100: PPUSH
17101: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17102: LD_ADDR_VAR 0 5
17106: PUSH
17107: LD_INT 0
17109: PUSH
17110: LD_INT 0
17112: PUSH
17113: LD_INT 0
17115: PUSH
17116: EMPTY
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: ST_TO_ADDR
// if not x or not y then
17124: LD_VAR 0 2
17128: NOT
17129: IFTRUE 17138
17131: PUSH
17132: LD_VAR 0 3
17136: NOT
17137: OR
17138: IFFALSE 17142
// exit ;
17140: GO 18798
// if not range then
17142: LD_VAR 0 4
17146: NOT
17147: IFFALSE 17157
// range := 10 ;
17149: LD_ADDR_VAR 0 4
17153: PUSH
17154: LD_INT 10
17156: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17157: LD_ADDR_VAR 0 8
17161: PUSH
17162: LD_INT 81
17164: PUSH
17165: LD_VAR 0 1
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 92
17176: PUSH
17177: LD_VAR 0 2
17181: PUSH
17182: LD_VAR 0 3
17186: PUSH
17187: LD_VAR 0 4
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 3
17200: PUSH
17201: LD_INT 21
17203: PUSH
17204: LD_INT 3
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: LIST
17219: PPUSH
17220: CALL_OW 69
17224: ST_TO_ADDR
// if not tmp then
17225: LD_VAR 0 8
17229: NOT
17230: IFFALSE 17234
// exit ;
17232: GO 18798
// for i in tmp do
17234: LD_ADDR_VAR 0 6
17238: PUSH
17239: LD_VAR 0 8
17243: PUSH
17244: FOR_IN
17245: IFFALSE 18773
// begin points := [ 0 , 0 , 0 ] ;
17247: LD_ADDR_VAR 0 9
17251: PUSH
17252: LD_INT 0
17254: PUSH
17255: LD_INT 0
17257: PUSH
17258: LD_INT 0
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: LIST
17265: ST_TO_ADDR
// bpoints := 1 ;
17266: LD_ADDR_VAR 0 10
17270: PUSH
17271: LD_INT 1
17273: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17274: LD_VAR 0 6
17278: PPUSH
17279: CALL_OW 247
17283: PUSH
17284: LD_INT 1
17286: DOUBLE
17287: EQUAL
17288: IFTRUE 17292
17290: GO 17874
17292: POP
// begin if GetClass ( i ) = 1 then
17293: LD_VAR 0 6
17297: PPUSH
17298: CALL_OW 257
17302: PUSH
17303: LD_INT 1
17305: EQUAL
17306: IFFALSE 17327
// points := [ 10 , 5 , 3 ] ;
17308: LD_ADDR_VAR 0 9
17312: PUSH
17313: LD_INT 10
17315: PUSH
17316: LD_INT 5
17318: PUSH
17319: LD_INT 3
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: LIST
17326: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17327: LD_VAR 0 6
17331: PPUSH
17332: CALL_OW 257
17336: PUSH
17337: LD_INT 2
17339: PUSH
17340: LD_INT 3
17342: PUSH
17343: LD_INT 4
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: LIST
17350: IN
17351: IFFALSE 17372
// points := [ 3 , 2 , 1 ] ;
17353: LD_ADDR_VAR 0 9
17357: PUSH
17358: LD_INT 3
17360: PUSH
17361: LD_INT 2
17363: PUSH
17364: LD_INT 1
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: LIST
17371: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17372: LD_VAR 0 6
17376: PPUSH
17377: CALL_OW 257
17381: PUSH
17382: LD_INT 5
17384: EQUAL
17385: IFFALSE 17406
// points := [ 130 , 5 , 2 ] ;
17387: LD_ADDR_VAR 0 9
17391: PUSH
17392: LD_INT 130
17394: PUSH
17395: LD_INT 5
17397: PUSH
17398: LD_INT 2
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: LIST
17405: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17406: LD_VAR 0 6
17410: PPUSH
17411: CALL_OW 257
17415: PUSH
17416: LD_INT 8
17418: EQUAL
17419: IFFALSE 17440
// points := [ 35 , 35 , 30 ] ;
17421: LD_ADDR_VAR 0 9
17425: PUSH
17426: LD_INT 35
17428: PUSH
17429: LD_INT 35
17431: PUSH
17432: LD_INT 30
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: LIST
17439: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17440: LD_VAR 0 6
17444: PPUSH
17445: CALL_OW 257
17449: PUSH
17450: LD_INT 9
17452: EQUAL
17453: IFFALSE 17474
// points := [ 20 , 55 , 40 ] ;
17455: LD_ADDR_VAR 0 9
17459: PUSH
17460: LD_INT 20
17462: PUSH
17463: LD_INT 55
17465: PUSH
17466: LD_INT 40
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: LIST
17473: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17474: LD_VAR 0 6
17478: PPUSH
17479: CALL_OW 257
17483: PUSH
17484: LD_INT 12
17486: PUSH
17487: LD_INT 16
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: IN
17494: IFFALSE 17515
// points := [ 5 , 3 , 2 ] ;
17496: LD_ADDR_VAR 0 9
17500: PUSH
17501: LD_INT 5
17503: PUSH
17504: LD_INT 3
17506: PUSH
17507: LD_INT 2
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17515: LD_VAR 0 6
17519: PPUSH
17520: CALL_OW 257
17524: PUSH
17525: LD_INT 17
17527: EQUAL
17528: IFFALSE 17549
// points := [ 100 , 50 , 75 ] ;
17530: LD_ADDR_VAR 0 9
17534: PUSH
17535: LD_INT 100
17537: PUSH
17538: LD_INT 50
17540: PUSH
17541: LD_INT 75
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: LIST
17548: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17549: LD_VAR 0 6
17553: PPUSH
17554: CALL_OW 257
17558: PUSH
17559: LD_INT 15
17561: EQUAL
17562: IFFALSE 17583
// points := [ 10 , 5 , 3 ] ;
17564: LD_ADDR_VAR 0 9
17568: PUSH
17569: LD_INT 10
17571: PUSH
17572: LD_INT 5
17574: PUSH
17575: LD_INT 3
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: LIST
17582: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17583: LD_VAR 0 6
17587: PPUSH
17588: CALL_OW 257
17592: PUSH
17593: LD_INT 14
17595: EQUAL
17596: IFFALSE 17617
// points := [ 10 , 0 , 0 ] ;
17598: LD_ADDR_VAR 0 9
17602: PUSH
17603: LD_INT 10
17605: PUSH
17606: LD_INT 0
17608: PUSH
17609: LD_INT 0
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: LIST
17616: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17617: LD_VAR 0 6
17621: PPUSH
17622: CALL_OW 257
17626: PUSH
17627: LD_INT 11
17629: EQUAL
17630: IFFALSE 17651
// points := [ 30 , 10 , 5 ] ;
17632: LD_ADDR_VAR 0 9
17636: PUSH
17637: LD_INT 30
17639: PUSH
17640: LD_INT 10
17642: PUSH
17643: LD_INT 5
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17651: LD_VAR 0 1
17655: PPUSH
17656: LD_INT 5
17658: PPUSH
17659: CALL_OW 321
17663: PUSH
17664: LD_INT 2
17666: EQUAL
17667: IFFALSE 17684
// bpoints := bpoints * 1.8 ;
17669: LD_ADDR_VAR 0 10
17673: PUSH
17674: LD_VAR 0 10
17678: PUSH
17679: LD_REAL  1.80000000000000E+0000
17682: MUL
17683: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17684: LD_VAR 0 6
17688: PPUSH
17689: CALL_OW 257
17693: PUSH
17694: LD_INT 1
17696: PUSH
17697: LD_INT 2
17699: PUSH
17700: LD_INT 3
17702: PUSH
17703: LD_INT 4
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: IN
17712: IFFALSE 17732
17714: PUSH
17715: LD_VAR 0 1
17719: PPUSH
17720: LD_INT 51
17722: PPUSH
17723: CALL_OW 321
17727: PUSH
17728: LD_INT 2
17730: EQUAL
17731: AND
17732: IFFALSE 17749
// bpoints := bpoints * 1.2 ;
17734: LD_ADDR_VAR 0 10
17738: PUSH
17739: LD_VAR 0 10
17743: PUSH
17744: LD_REAL  1.20000000000000E+0000
17747: MUL
17748: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17749: LD_VAR 0 6
17753: PPUSH
17754: CALL_OW 257
17758: PUSH
17759: LD_INT 5
17761: PUSH
17762: LD_INT 7
17764: PUSH
17765: LD_INT 9
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: LIST
17772: IN
17773: IFFALSE 17793
17775: PUSH
17776: LD_VAR 0 1
17780: PPUSH
17781: LD_INT 52
17783: PPUSH
17784: CALL_OW 321
17788: PUSH
17789: LD_INT 2
17791: EQUAL
17792: AND
17793: IFFALSE 17810
// bpoints := bpoints * 1.5 ;
17795: LD_ADDR_VAR 0 10
17799: PUSH
17800: LD_VAR 0 10
17804: PUSH
17805: LD_REAL  1.50000000000000E+0000
17808: MUL
17809: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17810: LD_VAR 0 1
17814: PPUSH
17815: LD_INT 66
17817: PPUSH
17818: CALL_OW 321
17822: PUSH
17823: LD_INT 2
17825: EQUAL
17826: IFFALSE 17843
// bpoints := bpoints * 1.1 ;
17828: LD_ADDR_VAR 0 10
17832: PUSH
17833: LD_VAR 0 10
17837: PUSH
17838: LD_REAL  1.10000000000000E+0000
17841: MUL
17842: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17843: LD_ADDR_VAR 0 10
17847: PUSH
17848: LD_VAR 0 10
17852: PUSH
17853: LD_VAR 0 6
17857: PPUSH
17858: LD_INT 1
17860: PPUSH
17861: CALL_OW 259
17865: PUSH
17866: LD_REAL  1.15000000000000E+0000
17869: MUL
17870: MUL
17871: ST_TO_ADDR
// end ; unit_vehicle :
17872: GO 18702
17874: LD_INT 2
17876: DOUBLE
17877: EQUAL
17878: IFTRUE 17882
17880: GO 18690
17882: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17883: LD_VAR 0 6
17887: PPUSH
17888: CALL_OW 264
17892: PUSH
17893: LD_INT 2
17895: PUSH
17896: LD_INT 42
17898: PUSH
17899: LD_INT 24
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: LIST
17906: IN
17907: IFFALSE 17928
// points := [ 25 , 5 , 3 ] ;
17909: LD_ADDR_VAR 0 9
17913: PUSH
17914: LD_INT 25
17916: PUSH
17917: LD_INT 5
17919: PUSH
17920: LD_INT 3
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: LIST
17927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17928: LD_VAR 0 6
17932: PPUSH
17933: CALL_OW 264
17937: PUSH
17938: LD_INT 4
17940: PUSH
17941: LD_INT 43
17943: PUSH
17944: LD_INT 25
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: LIST
17951: IN
17952: IFFALSE 17973
// points := [ 40 , 15 , 5 ] ;
17954: LD_ADDR_VAR 0 9
17958: PUSH
17959: LD_INT 40
17961: PUSH
17962: LD_INT 15
17964: PUSH
17965: LD_INT 5
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: LIST
17972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17973: LD_VAR 0 6
17977: PPUSH
17978: CALL_OW 264
17982: PUSH
17983: LD_INT 3
17985: PUSH
17986: LD_INT 23
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: IN
17993: IFFALSE 18014
// points := [ 7 , 25 , 8 ] ;
17995: LD_ADDR_VAR 0 9
17999: PUSH
18000: LD_INT 7
18002: PUSH
18003: LD_INT 25
18005: PUSH
18006: LD_INT 8
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: LIST
18013: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18014: LD_VAR 0 6
18018: PPUSH
18019: CALL_OW 264
18023: PUSH
18024: LD_INT 5
18026: PUSH
18027: LD_INT 27
18029: PUSH
18030: LD_INT 44
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: LIST
18037: IN
18038: IFFALSE 18059
// points := [ 14 , 50 , 16 ] ;
18040: LD_ADDR_VAR 0 9
18044: PUSH
18045: LD_INT 14
18047: PUSH
18048: LD_INT 50
18050: PUSH
18051: LD_INT 16
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: LIST
18058: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18059: LD_VAR 0 6
18063: PPUSH
18064: CALL_OW 264
18068: PUSH
18069: LD_INT 6
18071: PUSH
18072: LD_INT 46
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: IN
18079: IFFALSE 18100
// points := [ 32 , 120 , 70 ] ;
18081: LD_ADDR_VAR 0 9
18085: PUSH
18086: LD_INT 32
18088: PUSH
18089: LD_INT 120
18091: PUSH
18092: LD_INT 70
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: LIST
18099: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18100: LD_VAR 0 6
18104: PPUSH
18105: CALL_OW 264
18109: PUSH
18110: LD_INT 7
18112: PUSH
18113: LD_INT 28
18115: PUSH
18116: LD_INT 45
18118: PUSH
18119: LD_INT 92
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: IN
18128: IFFALSE 18149
// points := [ 35 , 20 , 45 ] ;
18130: LD_ADDR_VAR 0 9
18134: PUSH
18135: LD_INT 35
18137: PUSH
18138: LD_INT 20
18140: PUSH
18141: LD_INT 45
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: LIST
18148: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18149: LD_VAR 0 6
18153: PPUSH
18154: CALL_OW 264
18158: PUSH
18159: LD_INT 47
18161: PUSH
18162: EMPTY
18163: LIST
18164: IN
18165: IFFALSE 18186
// points := [ 67 , 45 , 75 ] ;
18167: LD_ADDR_VAR 0 9
18171: PUSH
18172: LD_INT 67
18174: PUSH
18175: LD_INT 45
18177: PUSH
18178: LD_INT 75
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: LIST
18185: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18186: LD_VAR 0 6
18190: PPUSH
18191: CALL_OW 264
18195: PUSH
18196: LD_INT 26
18198: PUSH
18199: EMPTY
18200: LIST
18201: IN
18202: IFFALSE 18223
// points := [ 120 , 30 , 80 ] ;
18204: LD_ADDR_VAR 0 9
18208: PUSH
18209: LD_INT 120
18211: PUSH
18212: LD_INT 30
18214: PUSH
18215: LD_INT 80
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: LIST
18222: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18223: LD_VAR 0 6
18227: PPUSH
18228: CALL_OW 264
18232: PUSH
18233: LD_INT 22
18235: PUSH
18236: EMPTY
18237: LIST
18238: IN
18239: IFFALSE 18260
// points := [ 40 , 1 , 1 ] ;
18241: LD_ADDR_VAR 0 9
18245: PUSH
18246: LD_INT 40
18248: PUSH
18249: LD_INT 1
18251: PUSH
18252: LD_INT 1
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: LIST
18259: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18260: LD_VAR 0 6
18264: PPUSH
18265: CALL_OW 264
18269: PUSH
18270: LD_INT 29
18272: PUSH
18273: EMPTY
18274: LIST
18275: IN
18276: IFFALSE 18297
// points := [ 70 , 200 , 400 ] ;
18278: LD_ADDR_VAR 0 9
18282: PUSH
18283: LD_INT 70
18285: PUSH
18286: LD_INT 200
18288: PUSH
18289: LD_INT 400
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: LIST
18296: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18297: LD_VAR 0 6
18301: PPUSH
18302: CALL_OW 264
18306: PUSH
18307: LD_INT 14
18309: PUSH
18310: LD_INT 53
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: IN
18317: IFFALSE 18338
// points := [ 40 , 10 , 20 ] ;
18319: LD_ADDR_VAR 0 9
18323: PUSH
18324: LD_INT 40
18326: PUSH
18327: LD_INT 10
18329: PUSH
18330: LD_INT 20
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18338: LD_VAR 0 6
18342: PPUSH
18343: CALL_OW 264
18347: PUSH
18348: LD_INT 9
18350: PUSH
18351: EMPTY
18352: LIST
18353: IN
18354: IFFALSE 18375
// points := [ 5 , 70 , 20 ] ;
18356: LD_ADDR_VAR 0 9
18360: PUSH
18361: LD_INT 5
18363: PUSH
18364: LD_INT 70
18366: PUSH
18367: LD_INT 20
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: LIST
18374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18375: LD_VAR 0 6
18379: PPUSH
18380: CALL_OW 264
18384: PUSH
18385: LD_INT 10
18387: PUSH
18388: EMPTY
18389: LIST
18390: IN
18391: IFFALSE 18412
// points := [ 35 , 110 , 70 ] ;
18393: LD_ADDR_VAR 0 9
18397: PUSH
18398: LD_INT 35
18400: PUSH
18401: LD_INT 110
18403: PUSH
18404: LD_INT 70
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: LIST
18411: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18412: LD_VAR 0 6
18416: PPUSH
18417: CALL_OW 265
18421: PUSH
18422: LD_INT 25
18424: EQUAL
18425: IFFALSE 18446
// points := [ 80 , 65 , 100 ] ;
18427: LD_ADDR_VAR 0 9
18431: PUSH
18432: LD_INT 80
18434: PUSH
18435: LD_INT 65
18437: PUSH
18438: LD_INT 100
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18446: LD_VAR 0 6
18450: PPUSH
18451: CALL_OW 263
18455: PUSH
18456: LD_INT 1
18458: EQUAL
18459: IFFALSE 18494
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18461: LD_ADDR_VAR 0 10
18465: PUSH
18466: LD_VAR 0 10
18470: PUSH
18471: LD_VAR 0 6
18475: PPUSH
18476: CALL_OW 311
18480: PPUSH
18481: LD_INT 3
18483: PPUSH
18484: CALL_OW 259
18488: PUSH
18489: LD_INT 4
18491: MUL
18492: MUL
18493: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18494: LD_VAR 0 6
18498: PPUSH
18499: CALL_OW 263
18503: PUSH
18504: LD_INT 2
18506: EQUAL
18507: IFFALSE 18558
// begin j := IsControledBy ( i ) ;
18509: LD_ADDR_VAR 0 7
18513: PUSH
18514: LD_VAR 0 6
18518: PPUSH
18519: CALL_OW 312
18523: ST_TO_ADDR
// if j then
18524: LD_VAR 0 7
18528: IFFALSE 18558
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18530: LD_ADDR_VAR 0 10
18534: PUSH
18535: LD_VAR 0 10
18539: PUSH
18540: LD_VAR 0 7
18544: PPUSH
18545: LD_INT 3
18547: PPUSH
18548: CALL_OW 259
18552: PUSH
18553: LD_INT 3
18555: MUL
18556: MUL
18557: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18558: LD_VAR 0 6
18562: PPUSH
18563: CALL_OW 264
18567: PUSH
18568: LD_INT 5
18570: PUSH
18571: LD_INT 6
18573: PUSH
18574: LD_INT 46
18576: PUSH
18577: LD_INT 44
18579: PUSH
18580: LD_INT 47
18582: PUSH
18583: LD_INT 45
18585: PUSH
18586: LD_INT 28
18588: PUSH
18589: LD_INT 7
18591: PUSH
18592: LD_INT 27
18594: PUSH
18595: LD_INT 29
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: IN
18610: IFFALSE 18630
18612: PUSH
18613: LD_VAR 0 1
18617: PPUSH
18618: LD_INT 52
18620: PPUSH
18621: CALL_OW 321
18625: PUSH
18626: LD_INT 2
18628: EQUAL
18629: AND
18630: IFFALSE 18647
// bpoints := bpoints * 1.2 ;
18632: LD_ADDR_VAR 0 10
18636: PUSH
18637: LD_VAR 0 10
18641: PUSH
18642: LD_REAL  1.20000000000000E+0000
18645: MUL
18646: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18647: LD_VAR 0 6
18651: PPUSH
18652: CALL_OW 264
18656: PUSH
18657: LD_INT 6
18659: PUSH
18660: LD_INT 46
18662: PUSH
18663: LD_INT 47
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: LIST
18670: IN
18671: IFFALSE 18688
// bpoints := bpoints * 1.2 ;
18673: LD_ADDR_VAR 0 10
18677: PUSH
18678: LD_VAR 0 10
18682: PUSH
18683: LD_REAL  1.20000000000000E+0000
18686: MUL
18687: ST_TO_ADDR
// end ; unit_building :
18688: GO 18702
18690: LD_INT 3
18692: DOUBLE
18693: EQUAL
18694: IFTRUE 18698
18696: GO 18701
18698: POP
// ; end ;
18699: GO 18702
18701: POP
// for j = 1 to 3 do
18702: LD_ADDR_VAR 0 7
18706: PUSH
18707: DOUBLE
18708: LD_INT 1
18710: DEC
18711: ST_TO_ADDR
18712: LD_INT 3
18714: PUSH
18715: FOR_TO
18716: IFFALSE 18769
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18718: LD_ADDR_VAR 0 5
18722: PUSH
18723: LD_VAR 0 5
18727: PPUSH
18728: LD_VAR 0 7
18732: PPUSH
18733: LD_VAR 0 5
18737: PUSH
18738: LD_VAR 0 7
18742: ARRAY
18743: PUSH
18744: LD_VAR 0 9
18748: PUSH
18749: LD_VAR 0 7
18753: ARRAY
18754: PUSH
18755: LD_VAR 0 10
18759: MUL
18760: PLUS
18761: PPUSH
18762: CALL_OW 1
18766: ST_TO_ADDR
18767: GO 18715
18769: POP
18770: POP
// end ;
18771: GO 17244
18773: POP
18774: POP
// result := Replace ( result , 4 , tmp ) ;
18775: LD_ADDR_VAR 0 5
18779: PUSH
18780: LD_VAR 0 5
18784: PPUSH
18785: LD_INT 4
18787: PPUSH
18788: LD_VAR 0 8
18792: PPUSH
18793: CALL_OW 1
18797: ST_TO_ADDR
// end ;
18798: LD_VAR 0 5
18802: RET
// export function DangerAtRange ( unit , range ) ; begin
18803: LD_INT 0
18805: PPUSH
// if not unit then
18806: LD_VAR 0 1
18810: NOT
18811: IFFALSE 18815
// exit ;
18813: GO 18860
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18815: LD_ADDR_VAR 0 3
18819: PUSH
18820: LD_VAR 0 1
18824: PPUSH
18825: CALL_OW 255
18829: PPUSH
18830: LD_VAR 0 1
18834: PPUSH
18835: CALL_OW 250
18839: PPUSH
18840: LD_VAR 0 1
18844: PPUSH
18845: CALL_OW 251
18849: PPUSH
18850: LD_VAR 0 2
18854: PPUSH
18855: CALL 17094 0 4
18859: ST_TO_ADDR
// end ;
18860: LD_VAR 0 3
18864: RET
// export function DangerInArea ( side , area ) ; begin
18865: LD_INT 0
18867: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18868: LD_ADDR_VAR 0 3
18872: PUSH
18873: LD_VAR 0 2
18877: PPUSH
18878: LD_INT 81
18880: PUSH
18881: LD_VAR 0 1
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PPUSH
18890: CALL_OW 70
18894: ST_TO_ADDR
// end ;
18895: LD_VAR 0 3
18899: RET
// export function IsExtension ( b ) ; begin
18900: LD_INT 0
18902: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18903: LD_ADDR_VAR 0 2
18907: PUSH
18908: LD_VAR 0 1
18912: PUSH
18913: LD_INT 23
18915: PUSH
18916: LD_INT 20
18918: PUSH
18919: LD_INT 22
18921: PUSH
18922: LD_INT 17
18924: PUSH
18925: LD_INT 24
18927: PUSH
18928: LD_INT 21
18930: PUSH
18931: LD_INT 19
18933: PUSH
18934: LD_INT 16
18936: PUSH
18937: LD_INT 25
18939: PUSH
18940: LD_INT 18
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: IN
18955: ST_TO_ADDR
// end ;
18956: LD_VAR 0 2
18960: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18961: LD_INT 0
18963: PPUSH
18964: PPUSH
18965: PPUSH
// result := [ ] ;
18966: LD_ADDR_VAR 0 4
18970: PUSH
18971: EMPTY
18972: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18973: LD_ADDR_VAR 0 5
18977: PUSH
18978: LD_VAR 0 2
18982: PPUSH
18983: LD_INT 21
18985: PUSH
18986: LD_INT 3
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PPUSH
18993: CALL_OW 70
18997: ST_TO_ADDR
// if not tmp then
18998: LD_VAR 0 5
19002: NOT
19003: IFFALSE 19007
// exit ;
19005: GO 19071
// if checkLink then
19007: LD_VAR 0 3
19011: IFFALSE 19061
// begin for i in tmp do
19013: LD_ADDR_VAR 0 6
19017: PUSH
19018: LD_VAR 0 5
19022: PUSH
19023: FOR_IN
19024: IFFALSE 19059
// if GetBase ( i ) <> base then
19026: LD_VAR 0 6
19030: PPUSH
19031: CALL_OW 274
19035: PUSH
19036: LD_VAR 0 1
19040: NONEQUAL
19041: IFFALSE 19057
// ComLinkToBase ( base , i ) ;
19043: LD_VAR 0 1
19047: PPUSH
19048: LD_VAR 0 6
19052: PPUSH
19053: CALL_OW 169
19057: GO 19023
19059: POP
19060: POP
// end ; result := tmp ;
19061: LD_ADDR_VAR 0 4
19065: PUSH
19066: LD_VAR 0 5
19070: ST_TO_ADDR
// end ;
19071: LD_VAR 0 4
19075: RET
// export function ComComplete ( units , b ) ; var i ; begin
19076: LD_INT 0
19078: PPUSH
19079: PPUSH
// if not units then
19080: LD_VAR 0 1
19084: NOT
19085: IFFALSE 19089
// exit ;
19087: GO 19179
// for i in units do
19089: LD_ADDR_VAR 0 4
19093: PUSH
19094: LD_VAR 0 1
19098: PUSH
19099: FOR_IN
19100: IFFALSE 19177
// if BuildingStatus ( b ) = bs_build then
19102: LD_VAR 0 2
19106: PPUSH
19107: CALL_OW 461
19111: PUSH
19112: LD_INT 1
19114: EQUAL
19115: IFFALSE 19175
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19117: LD_VAR 0 4
19121: PPUSH
19122: LD_STRING h
19124: PUSH
19125: LD_VAR 0 2
19129: PPUSH
19130: CALL_OW 250
19134: PUSH
19135: LD_VAR 0 2
19139: PPUSH
19140: CALL_OW 251
19144: PUSH
19145: LD_VAR 0 2
19149: PUSH
19150: LD_INT 0
19152: PUSH
19153: LD_INT 0
19155: PUSH
19156: LD_INT 0
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: PPUSH
19171: CALL_OW 446
19175: GO 19099
19177: POP
19178: POP
// end ;
19179: LD_VAR 0 3
19183: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19184: LD_INT 0
19186: PPUSH
19187: PPUSH
19188: PPUSH
19189: PPUSH
19190: PPUSH
19191: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19192: LD_VAR 0 1
19196: NOT
19197: IFTRUE 19214
19199: PUSH
19200: LD_VAR 0 1
19204: PPUSH
19205: CALL_OW 263
19209: PUSH
19210: LD_INT 2
19212: NONEQUAL
19213: OR
19214: IFFALSE 19218
// exit ;
19216: GO 19534
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19218: LD_ADDR_VAR 0 6
19222: PUSH
19223: LD_INT 22
19225: PUSH
19226: LD_VAR 0 1
19230: PPUSH
19231: CALL_OW 255
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 2
19242: PUSH
19243: LD_INT 30
19245: PUSH
19246: LD_INT 36
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 34
19255: PUSH
19256: LD_INT 31
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: LIST
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PPUSH
19272: CALL_OW 69
19276: ST_TO_ADDR
// if not tmp then
19277: LD_VAR 0 6
19281: NOT
19282: IFFALSE 19286
// exit ;
19284: GO 19534
// result := [ ] ;
19286: LD_ADDR_VAR 0 2
19290: PUSH
19291: EMPTY
19292: ST_TO_ADDR
// for i in tmp do
19293: LD_ADDR_VAR 0 3
19297: PUSH
19298: LD_VAR 0 6
19302: PUSH
19303: FOR_IN
19304: IFFALSE 19375
// begin t := UnitsInside ( i ) ;
19306: LD_ADDR_VAR 0 4
19310: PUSH
19311: LD_VAR 0 3
19315: PPUSH
19316: CALL_OW 313
19320: ST_TO_ADDR
// if t then
19321: LD_VAR 0 4
19325: IFFALSE 19373
// for j in t do
19327: LD_ADDR_VAR 0 7
19331: PUSH
19332: LD_VAR 0 4
19336: PUSH
19337: FOR_IN
19338: IFFALSE 19371
// result := Replace ( result , result + 1 , j ) ;
19340: LD_ADDR_VAR 0 2
19344: PUSH
19345: LD_VAR 0 2
19349: PPUSH
19350: LD_VAR 0 2
19354: PUSH
19355: LD_INT 1
19357: PLUS
19358: PPUSH
19359: LD_VAR 0 7
19363: PPUSH
19364: CALL_OW 1
19368: ST_TO_ADDR
19369: GO 19337
19371: POP
19372: POP
// end ;
19373: GO 19303
19375: POP
19376: POP
// if not result then
19377: LD_VAR 0 2
19381: NOT
19382: IFFALSE 19386
// exit ;
19384: GO 19534
// mech := result [ 1 ] ;
19386: LD_ADDR_VAR 0 5
19390: PUSH
19391: LD_VAR 0 2
19395: PUSH
19396: LD_INT 1
19398: ARRAY
19399: ST_TO_ADDR
// if result > 1 then
19400: LD_VAR 0 2
19404: PUSH
19405: LD_INT 1
19407: GREATER
19408: IFFALSE 19520
// begin for i = 2 to result do
19410: LD_ADDR_VAR 0 3
19414: PUSH
19415: DOUBLE
19416: LD_INT 2
19418: DEC
19419: ST_TO_ADDR
19420: LD_VAR 0 2
19424: PUSH
19425: FOR_TO
19426: IFFALSE 19518
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19428: LD_ADDR_VAR 0 4
19432: PUSH
19433: LD_VAR 0 2
19437: PUSH
19438: LD_VAR 0 3
19442: ARRAY
19443: PPUSH
19444: LD_INT 3
19446: PPUSH
19447: CALL_OW 259
19451: PUSH
19452: LD_VAR 0 2
19456: PUSH
19457: LD_VAR 0 3
19461: ARRAY
19462: PPUSH
19463: CALL_OW 432
19467: MINUS
19468: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19469: LD_VAR 0 4
19473: PUSH
19474: LD_VAR 0 5
19478: PPUSH
19479: LD_INT 3
19481: PPUSH
19482: CALL_OW 259
19486: PUSH
19487: LD_VAR 0 5
19491: PPUSH
19492: CALL_OW 432
19496: MINUS
19497: GREATEREQUAL
19498: IFFALSE 19516
// mech := result [ i ] ;
19500: LD_ADDR_VAR 0 5
19504: PUSH
19505: LD_VAR 0 2
19509: PUSH
19510: LD_VAR 0 3
19514: ARRAY
19515: ST_TO_ADDR
// end ;
19516: GO 19425
19518: POP
19519: POP
// end ; ComLinkTo ( vehicle , mech ) ;
19520: LD_VAR 0 1
19524: PPUSH
19525: LD_VAR 0 5
19529: PPUSH
19530: CALL_OW 135
// end ;
19534: LD_VAR 0 2
19538: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19539: LD_INT 0
19541: PPUSH
19542: PPUSH
19543: PPUSH
19544: PPUSH
19545: PPUSH
19546: PPUSH
19547: PPUSH
19548: PPUSH
19549: PPUSH
19550: PPUSH
19551: PPUSH
19552: PPUSH
19553: PPUSH
// result := [ ] ;
19554: LD_ADDR_VAR 0 7
19558: PUSH
19559: EMPTY
19560: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19561: LD_VAR 0 1
19565: PPUSH
19566: CALL_OW 266
19570: PUSH
19571: LD_INT 0
19573: PUSH
19574: LD_INT 1
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: IN
19581: NOT
19582: IFFALSE 19586
// exit ;
19584: GO 21226
// if name then
19586: LD_VAR 0 3
19590: IFFALSE 19606
// SetBName ( base_dep , name ) ;
19592: LD_VAR 0 1
19596: PPUSH
19597: LD_VAR 0 3
19601: PPUSH
19602: CALL_OW 500
// base := GetBase ( base_dep ) ;
19606: LD_ADDR_VAR 0 15
19610: PUSH
19611: LD_VAR 0 1
19615: PPUSH
19616: CALL_OW 274
19620: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19621: LD_ADDR_VAR 0 16
19625: PUSH
19626: LD_VAR 0 1
19630: PPUSH
19631: CALL_OW 255
19635: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19636: LD_ADDR_VAR 0 17
19640: PUSH
19641: LD_VAR 0 1
19645: PPUSH
19646: CALL_OW 248
19650: ST_TO_ADDR
// if sources then
19651: LD_VAR 0 5
19655: IFFALSE 19702
// for i = 1 to 3 do
19657: LD_ADDR_VAR 0 8
19661: PUSH
19662: DOUBLE
19663: LD_INT 1
19665: DEC
19666: ST_TO_ADDR
19667: LD_INT 3
19669: PUSH
19670: FOR_TO
19671: IFFALSE 19700
// AddResourceType ( base , i , sources [ i ] ) ;
19673: LD_VAR 0 15
19677: PPUSH
19678: LD_VAR 0 8
19682: PPUSH
19683: LD_VAR 0 5
19687: PUSH
19688: LD_VAR 0 8
19692: ARRAY
19693: PPUSH
19694: CALL_OW 276
19698: GO 19670
19700: POP
19701: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19702: LD_ADDR_VAR 0 18
19706: PUSH
19707: LD_VAR 0 15
19711: PPUSH
19712: LD_VAR 0 2
19716: PPUSH
19717: LD_INT 1
19719: PPUSH
19720: CALL 18961 0 3
19724: ST_TO_ADDR
// InitHc ;
19725: CALL_OW 19
// InitUc ;
19729: CALL_OW 18
// uc_side := side ;
19733: LD_ADDR_OWVAR 20
19737: PUSH
19738: LD_VAR 0 16
19742: ST_TO_ADDR
// uc_nation := nation ;
19743: LD_ADDR_OWVAR 21
19747: PUSH
19748: LD_VAR 0 17
19752: ST_TO_ADDR
// if buildings then
19753: LD_VAR 0 18
19757: IFFALSE 21085
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19759: LD_ADDR_VAR 0 19
19763: PUSH
19764: LD_VAR 0 18
19768: PPUSH
19769: LD_INT 2
19771: PUSH
19772: LD_INT 30
19774: PUSH
19775: LD_INT 29
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 30
19784: PUSH
19785: LD_INT 30
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: PPUSH
19797: CALL_OW 72
19801: ST_TO_ADDR
// if tmp then
19802: LD_VAR 0 19
19806: IFFALSE 19854
// for i in tmp do
19808: LD_ADDR_VAR 0 8
19812: PUSH
19813: LD_VAR 0 19
19817: PUSH
19818: FOR_IN
19819: IFFALSE 19852
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19821: LD_VAR 0 8
19825: PPUSH
19826: CALL_OW 250
19830: PPUSH
19831: LD_VAR 0 8
19835: PPUSH
19836: CALL_OW 251
19840: PPUSH
19841: LD_VAR 0 16
19845: PPUSH
19846: CALL_OW 441
19850: GO 19818
19852: POP
19853: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19854: LD_VAR 0 18
19858: PPUSH
19859: LD_INT 2
19861: PUSH
19862: LD_INT 30
19864: PUSH
19865: LD_INT 32
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 30
19874: PUSH
19875: LD_INT 33
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: LIST
19886: PPUSH
19887: CALL_OW 72
19891: IFFALSE 19979
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19893: LD_ADDR_VAR 0 8
19897: PUSH
19898: LD_VAR 0 18
19902: PPUSH
19903: LD_INT 2
19905: PUSH
19906: LD_INT 30
19908: PUSH
19909: LD_INT 32
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 30
19918: PUSH
19919: LD_INT 33
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: LIST
19930: PPUSH
19931: CALL_OW 72
19935: PUSH
19936: FOR_IN
19937: IFFALSE 19977
// begin if not GetBWeapon ( i ) then
19939: LD_VAR 0 8
19943: PPUSH
19944: CALL_OW 269
19948: NOT
19949: IFFALSE 19975
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19951: LD_VAR 0 8
19955: PPUSH
19956: LD_VAR 0 8
19960: PPUSH
19961: LD_VAR 0 2
19965: PPUSH
19966: CALL 21231 0 2
19970: PPUSH
19971: CALL_OW 431
// end ;
19975: GO 19936
19977: POP
19978: POP
// end ; for i = 1 to personel do
19979: LD_ADDR_VAR 0 8
19983: PUSH
19984: DOUBLE
19985: LD_INT 1
19987: DEC
19988: ST_TO_ADDR
19989: LD_VAR 0 6
19993: PUSH
19994: FOR_TO
19995: IFFALSE 21065
// begin if i > 4 then
19997: LD_VAR 0 8
20001: PUSH
20002: LD_INT 4
20004: GREATER
20005: IFFALSE 20009
// break ;
20007: GO 21065
// case i of 1 :
20009: LD_VAR 0 8
20013: PUSH
20014: LD_INT 1
20016: DOUBLE
20017: EQUAL
20018: IFTRUE 20022
20020: GO 20102
20022: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20023: LD_ADDR_VAR 0 12
20027: PUSH
20028: LD_VAR 0 18
20032: PPUSH
20033: LD_INT 22
20035: PUSH
20036: LD_VAR 0 16
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 58
20047: PUSH
20048: EMPTY
20049: LIST
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: LD_INT 30
20056: PUSH
20057: LD_INT 32
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 30
20066: PUSH
20067: LD_INT 4
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 30
20076: PUSH
20077: LD_INT 5
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: LIST
20094: PPUSH
20095: CALL_OW 72
20099: ST_TO_ADDR
20100: GO 20324
20102: LD_INT 2
20104: DOUBLE
20105: EQUAL
20106: IFTRUE 20110
20108: GO 20172
20110: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20111: LD_ADDR_VAR 0 12
20115: PUSH
20116: LD_VAR 0 18
20120: PPUSH
20121: LD_INT 22
20123: PUSH
20124: LD_VAR 0 16
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 2
20135: PUSH
20136: LD_INT 30
20138: PUSH
20139: LD_INT 0
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 30
20148: PUSH
20149: LD_INT 1
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: LIST
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PPUSH
20165: CALL_OW 72
20169: ST_TO_ADDR
20170: GO 20324
20172: LD_INT 3
20174: DOUBLE
20175: EQUAL
20176: IFTRUE 20180
20178: GO 20242
20180: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20181: LD_ADDR_VAR 0 12
20185: PUSH
20186: LD_VAR 0 18
20190: PPUSH
20191: LD_INT 22
20193: PUSH
20194: LD_VAR 0 16
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 2
20205: PUSH
20206: LD_INT 30
20208: PUSH
20209: LD_INT 2
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 30
20218: PUSH
20219: LD_INT 3
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: LIST
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PPUSH
20235: CALL_OW 72
20239: ST_TO_ADDR
20240: GO 20324
20242: LD_INT 4
20244: DOUBLE
20245: EQUAL
20246: IFTRUE 20250
20248: GO 20323
20250: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20251: LD_ADDR_VAR 0 12
20255: PUSH
20256: LD_VAR 0 18
20260: PPUSH
20261: LD_INT 22
20263: PUSH
20264: LD_VAR 0 16
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 2
20275: PUSH
20276: LD_INT 30
20278: PUSH
20279: LD_INT 6
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 30
20288: PUSH
20289: LD_INT 7
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 30
20298: PUSH
20299: LD_INT 8
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PPUSH
20316: CALL_OW 72
20320: ST_TO_ADDR
20321: GO 20324
20323: POP
// if i = 1 then
20324: LD_VAR 0 8
20328: PUSH
20329: LD_INT 1
20331: EQUAL
20332: IFFALSE 20443
// begin tmp := [ ] ;
20334: LD_ADDR_VAR 0 19
20338: PUSH
20339: EMPTY
20340: ST_TO_ADDR
// for j in f do
20341: LD_ADDR_VAR 0 9
20345: PUSH
20346: LD_VAR 0 12
20350: PUSH
20351: FOR_IN
20352: IFFALSE 20425
// if GetBType ( j ) = b_bunker then
20354: LD_VAR 0 9
20358: PPUSH
20359: CALL_OW 266
20363: PUSH
20364: LD_INT 32
20366: EQUAL
20367: IFFALSE 20394
// tmp := Insert ( tmp , 1 , j ) else
20369: LD_ADDR_VAR 0 19
20373: PUSH
20374: LD_VAR 0 19
20378: PPUSH
20379: LD_INT 1
20381: PPUSH
20382: LD_VAR 0 9
20386: PPUSH
20387: CALL_OW 2
20391: ST_TO_ADDR
20392: GO 20423
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20394: LD_ADDR_VAR 0 19
20398: PUSH
20399: LD_VAR 0 19
20403: PPUSH
20404: LD_VAR 0 19
20408: PUSH
20409: LD_INT 1
20411: PLUS
20412: PPUSH
20413: LD_VAR 0 9
20417: PPUSH
20418: CALL_OW 2
20422: ST_TO_ADDR
20423: GO 20351
20425: POP
20426: POP
// if tmp then
20427: LD_VAR 0 19
20431: IFFALSE 20443
// f := tmp ;
20433: LD_ADDR_VAR 0 12
20437: PUSH
20438: LD_VAR 0 19
20442: ST_TO_ADDR
// end ; x := personel [ i ] ;
20443: LD_ADDR_VAR 0 13
20447: PUSH
20448: LD_VAR 0 6
20452: PUSH
20453: LD_VAR 0 8
20457: ARRAY
20458: ST_TO_ADDR
// if x = - 1 then
20459: LD_VAR 0 13
20463: PUSH
20464: LD_INT 1
20466: NEG
20467: EQUAL
20468: IFFALSE 20679
// begin for j in f do
20470: LD_ADDR_VAR 0 9
20474: PUSH
20475: LD_VAR 0 12
20479: PUSH
20480: FOR_IN
20481: IFFALSE 20675
// repeat InitHc ;
20483: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20487: LD_VAR 0 9
20491: PPUSH
20492: CALL_OW 266
20496: PUSH
20497: LD_INT 5
20499: EQUAL
20500: IFFALSE 20570
// begin if UnitsInside ( j ) < 3 then
20502: LD_VAR 0 9
20506: PPUSH
20507: CALL_OW 313
20511: PUSH
20512: LD_INT 3
20514: LESS
20515: IFFALSE 20551
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20517: LD_INT 0
20519: PPUSH
20520: LD_INT 5
20522: PUSH
20523: LD_INT 8
20525: PUSH
20526: LD_INT 9
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: LIST
20533: PUSH
20534: LD_VAR 0 17
20538: ARRAY
20539: PPUSH
20540: LD_VAR 0 4
20544: PPUSH
20545: CALL_OW 380
20549: GO 20568
// PrepareHuman ( false , i , skill ) ;
20551: LD_INT 0
20553: PPUSH
20554: LD_VAR 0 8
20558: PPUSH
20559: LD_VAR 0 4
20563: PPUSH
20564: CALL_OW 380
// end else
20568: GO 20587
// PrepareHuman ( false , i , skill ) ;
20570: LD_INT 0
20572: PPUSH
20573: LD_VAR 0 8
20577: PPUSH
20578: LD_VAR 0 4
20582: PPUSH
20583: CALL_OW 380
// un := CreateHuman ;
20587: LD_ADDR_VAR 0 14
20591: PUSH
20592: CALL_OW 44
20596: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20597: LD_ADDR_VAR 0 7
20601: PUSH
20602: LD_VAR 0 7
20606: PPUSH
20607: LD_INT 1
20609: PPUSH
20610: LD_VAR 0 14
20614: PPUSH
20615: CALL_OW 2
20619: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20620: LD_VAR 0 14
20624: PPUSH
20625: LD_VAR 0 9
20629: PPUSH
20630: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20634: LD_VAR 0 9
20638: PPUSH
20639: CALL_OW 313
20643: PUSH
20644: LD_INT 6
20646: EQUAL
20647: IFTRUE 20671
20649: PUSH
20650: LD_VAR 0 9
20654: PPUSH
20655: CALL_OW 266
20659: PUSH
20660: LD_INT 32
20662: PUSH
20663: LD_INT 31
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: IN
20670: OR
20671: IFFALSE 20483
20673: GO 20480
20675: POP
20676: POP
// end else
20677: GO 21063
// for j = 1 to x do
20679: LD_ADDR_VAR 0 9
20683: PUSH
20684: DOUBLE
20685: LD_INT 1
20687: DEC
20688: ST_TO_ADDR
20689: LD_VAR 0 13
20693: PUSH
20694: FOR_TO
20695: IFFALSE 21061
// begin InitHc ;
20697: CALL_OW 19
// if not f then
20701: LD_VAR 0 12
20705: NOT
20706: IFFALSE 20795
// begin PrepareHuman ( false , i , skill ) ;
20708: LD_INT 0
20710: PPUSH
20711: LD_VAR 0 8
20715: PPUSH
20716: LD_VAR 0 4
20720: PPUSH
20721: CALL_OW 380
// un := CreateHuman ;
20725: LD_ADDR_VAR 0 14
20729: PUSH
20730: CALL_OW 44
20734: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20735: LD_ADDR_VAR 0 7
20739: PUSH
20740: LD_VAR 0 7
20744: PPUSH
20745: LD_INT 1
20747: PPUSH
20748: LD_VAR 0 14
20752: PPUSH
20753: CALL_OW 2
20757: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20758: LD_VAR 0 14
20762: PPUSH
20763: LD_VAR 0 1
20767: PPUSH
20768: CALL_OW 250
20772: PPUSH
20773: LD_VAR 0 1
20777: PPUSH
20778: CALL_OW 251
20782: PPUSH
20783: LD_INT 10
20785: PPUSH
20786: LD_INT 0
20788: PPUSH
20789: CALL_OW 50
// continue ;
20793: GO 20694
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20795: LD_VAR 0 12
20799: PUSH
20800: LD_INT 1
20802: ARRAY
20803: PPUSH
20804: CALL_OW 313
20808: IFFALSE 20836
20810: PUSH
20811: LD_VAR 0 12
20815: PUSH
20816: LD_INT 1
20818: ARRAY
20819: PPUSH
20820: CALL_OW 266
20824: PUSH
20825: LD_INT 32
20827: PUSH
20828: LD_INT 31
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: IN
20835: AND
20836: IFTRUE 20857
20838: PUSH
20839: LD_VAR 0 12
20843: PUSH
20844: LD_INT 1
20846: ARRAY
20847: PPUSH
20848: CALL_OW 313
20852: PUSH
20853: LD_INT 6
20855: EQUAL
20856: OR
20857: IFFALSE 20877
// f := Delete ( f , 1 ) ;
20859: LD_ADDR_VAR 0 12
20863: PUSH
20864: LD_VAR 0 12
20868: PPUSH
20869: LD_INT 1
20871: PPUSH
20872: CALL_OW 3
20876: ST_TO_ADDR
// if not f then
20877: LD_VAR 0 12
20881: NOT
20882: IFFALSE 20900
// begin x := x + 2 ;
20884: LD_ADDR_VAR 0 13
20888: PUSH
20889: LD_VAR 0 13
20893: PUSH
20894: LD_INT 2
20896: PLUS
20897: ST_TO_ADDR
// continue ;
20898: GO 20694
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20900: LD_VAR 0 12
20904: PUSH
20905: LD_INT 1
20907: ARRAY
20908: PPUSH
20909: CALL_OW 266
20913: PUSH
20914: LD_INT 5
20916: EQUAL
20917: IFFALSE 20991
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20919: LD_VAR 0 12
20923: PUSH
20924: LD_INT 1
20926: ARRAY
20927: PPUSH
20928: CALL_OW 313
20932: PUSH
20933: LD_INT 3
20935: LESS
20936: IFFALSE 20972
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20938: LD_INT 0
20940: PPUSH
20941: LD_INT 5
20943: PUSH
20944: LD_INT 8
20946: PUSH
20947: LD_INT 9
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: PUSH
20955: LD_VAR 0 17
20959: ARRAY
20960: PPUSH
20961: LD_VAR 0 4
20965: PPUSH
20966: CALL_OW 380
20970: GO 20989
// PrepareHuman ( false , i , skill ) ;
20972: LD_INT 0
20974: PPUSH
20975: LD_VAR 0 8
20979: PPUSH
20980: LD_VAR 0 4
20984: PPUSH
20985: CALL_OW 380
// end else
20989: GO 21008
// PrepareHuman ( false , i , skill ) ;
20991: LD_INT 0
20993: PPUSH
20994: LD_VAR 0 8
20998: PPUSH
20999: LD_VAR 0 4
21003: PPUSH
21004: CALL_OW 380
// un := CreateHuman ;
21008: LD_ADDR_VAR 0 14
21012: PUSH
21013: CALL_OW 44
21017: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21018: LD_ADDR_VAR 0 7
21022: PUSH
21023: LD_VAR 0 7
21027: PPUSH
21028: LD_INT 1
21030: PPUSH
21031: LD_VAR 0 14
21035: PPUSH
21036: CALL_OW 2
21040: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21041: LD_VAR 0 14
21045: PPUSH
21046: LD_VAR 0 12
21050: PUSH
21051: LD_INT 1
21053: ARRAY
21054: PPUSH
21055: CALL_OW 52
// end ;
21059: GO 20694
21061: POP
21062: POP
// end ;
21063: GO 19994
21065: POP
21066: POP
// result := result ^ buildings ;
21067: LD_ADDR_VAR 0 7
21071: PUSH
21072: LD_VAR 0 7
21076: PUSH
21077: LD_VAR 0 18
21081: ADD
21082: ST_TO_ADDR
// end else
21083: GO 21226
// begin for i = 1 to personel do
21085: LD_ADDR_VAR 0 8
21089: PUSH
21090: DOUBLE
21091: LD_INT 1
21093: DEC
21094: ST_TO_ADDR
21095: LD_VAR 0 6
21099: PUSH
21100: FOR_TO
21101: IFFALSE 21224
// begin if i > 4 then
21103: LD_VAR 0 8
21107: PUSH
21108: LD_INT 4
21110: GREATER
21111: IFFALSE 21115
// break ;
21113: GO 21224
// x := personel [ i ] ;
21115: LD_ADDR_VAR 0 13
21119: PUSH
21120: LD_VAR 0 6
21124: PUSH
21125: LD_VAR 0 8
21129: ARRAY
21130: ST_TO_ADDR
// if x = - 1 then
21131: LD_VAR 0 13
21135: PUSH
21136: LD_INT 1
21138: NEG
21139: EQUAL
21140: IFFALSE 21144
// continue ;
21142: GO 21100
// PrepareHuman ( false , i , skill ) ;
21144: LD_INT 0
21146: PPUSH
21147: LD_VAR 0 8
21151: PPUSH
21152: LD_VAR 0 4
21156: PPUSH
21157: CALL_OW 380
// un := CreateHuman ;
21161: LD_ADDR_VAR 0 14
21165: PUSH
21166: CALL_OW 44
21170: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21171: LD_VAR 0 14
21175: PPUSH
21176: LD_VAR 0 1
21180: PPUSH
21181: CALL_OW 250
21185: PPUSH
21186: LD_VAR 0 1
21190: PPUSH
21191: CALL_OW 251
21195: PPUSH
21196: LD_INT 10
21198: PPUSH
21199: LD_INT 0
21201: PPUSH
21202: CALL_OW 50
// result := result ^ un ;
21206: LD_ADDR_VAR 0 7
21210: PUSH
21211: LD_VAR 0 7
21215: PUSH
21216: LD_VAR 0 14
21220: ADD
21221: ST_TO_ADDR
// end ;
21222: GO 21100
21224: POP
21225: POP
// end ; end ;
21226: LD_VAR 0 7
21230: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21231: LD_INT 0
21233: PPUSH
21234: PPUSH
21235: PPUSH
21236: PPUSH
21237: PPUSH
21238: PPUSH
21239: PPUSH
21240: PPUSH
21241: PPUSH
21242: PPUSH
21243: PPUSH
21244: PPUSH
21245: PPUSH
21246: PPUSH
21247: PPUSH
21248: PPUSH
// result := false ;
21249: LD_ADDR_VAR 0 3
21253: PUSH
21254: LD_INT 0
21256: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21257: LD_VAR 0 1
21261: NOT
21262: IFTRUE 21287
21264: PUSH
21265: LD_VAR 0 1
21269: PPUSH
21270: CALL_OW 266
21274: PUSH
21275: LD_INT 32
21277: PUSH
21278: LD_INT 33
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: IN
21285: NOT
21286: OR
21287: IFFALSE 21291
// exit ;
21289: GO 22426
// nat := GetNation ( tower ) ;
21291: LD_ADDR_VAR 0 12
21295: PUSH
21296: LD_VAR 0 1
21300: PPUSH
21301: CALL_OW 248
21305: ST_TO_ADDR
// side := GetSide ( tower ) ;
21306: LD_ADDR_VAR 0 16
21310: PUSH
21311: LD_VAR 0 1
21315: PPUSH
21316: CALL_OW 255
21320: ST_TO_ADDR
// x := GetX ( tower ) ;
21321: LD_ADDR_VAR 0 10
21325: PUSH
21326: LD_VAR 0 1
21330: PPUSH
21331: CALL_OW 250
21335: ST_TO_ADDR
// y := GetY ( tower ) ;
21336: LD_ADDR_VAR 0 11
21340: PUSH
21341: LD_VAR 0 1
21345: PPUSH
21346: CALL_OW 251
21350: ST_TO_ADDR
// if not x or not y then
21351: LD_VAR 0 10
21355: NOT
21356: IFTRUE 21365
21358: PUSH
21359: LD_VAR 0 11
21363: NOT
21364: OR
21365: IFFALSE 21369
// exit ;
21367: GO 22426
// weapon := 0 ;
21369: LD_ADDR_VAR 0 18
21373: PUSH
21374: LD_INT 0
21376: ST_TO_ADDR
// fac_list := [ ] ;
21377: LD_ADDR_VAR 0 17
21381: PUSH
21382: EMPTY
21383: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
21384: LD_ADDR_VAR 0 6
21388: PUSH
21389: LD_VAR 0 1
21393: PPUSH
21394: CALL_OW 274
21398: PPUSH
21399: LD_VAR 0 2
21403: PPUSH
21404: LD_INT 0
21406: PPUSH
21407: CALL 18961 0 3
21411: PPUSH
21412: LD_INT 30
21414: PUSH
21415: LD_INT 3
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PPUSH
21422: CALL_OW 72
21426: ST_TO_ADDR
// if not factories then
21427: LD_VAR 0 6
21431: NOT
21432: IFFALSE 21436
// exit ;
21434: GO 22426
// for i in factories do
21436: LD_ADDR_VAR 0 8
21440: PUSH
21441: LD_VAR 0 6
21445: PUSH
21446: FOR_IN
21447: IFFALSE 21472
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21449: LD_ADDR_VAR 0 17
21453: PUSH
21454: LD_VAR 0 17
21458: PUSH
21459: LD_VAR 0 8
21463: PPUSH
21464: CALL_OW 478
21468: UNION
21469: ST_TO_ADDR
21470: GO 21446
21472: POP
21473: POP
// if not fac_list then
21474: LD_VAR 0 17
21478: NOT
21479: IFFALSE 21483
// exit ;
21481: GO 22426
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21483: LD_ADDR_VAR 0 5
21487: PUSH
21488: LD_INT 4
21490: PUSH
21491: LD_INT 5
21493: PUSH
21494: LD_INT 9
21496: PUSH
21497: LD_INT 10
21499: PUSH
21500: LD_INT 6
21502: PUSH
21503: LD_INT 7
21505: PUSH
21506: LD_INT 11
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 27
21520: PUSH
21521: LD_INT 28
21523: PUSH
21524: LD_INT 26
21526: PUSH
21527: LD_INT 30
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 43
21538: PUSH
21539: LD_INT 44
21541: PUSH
21542: LD_INT 46
21544: PUSH
21545: LD_INT 45
21547: PUSH
21548: LD_INT 47
21550: PUSH
21551: LD_INT 49
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: LIST
21566: PUSH
21567: LD_VAR 0 12
21571: ARRAY
21572: ST_TO_ADDR
// list := list isect fac_list ;
21573: LD_ADDR_VAR 0 5
21577: PUSH
21578: LD_VAR 0 5
21582: PUSH
21583: LD_VAR 0 17
21587: ISECT
21588: ST_TO_ADDR
// if not list then
21589: LD_VAR 0 5
21593: NOT
21594: IFFALSE 21598
// exit ;
21596: GO 22426
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21598: LD_VAR 0 12
21602: PUSH
21603: LD_INT 3
21605: EQUAL
21606: IFFALSE 21618
21608: PUSH
21609: LD_INT 49
21611: PUSH
21612: LD_VAR 0 5
21616: IN
21617: AND
21618: IFFALSE 21638
21620: PUSH
21621: LD_INT 31
21623: PPUSH
21624: LD_VAR 0 16
21628: PPUSH
21629: CALL_OW 321
21633: PUSH
21634: LD_INT 2
21636: EQUAL
21637: AND
21638: IFFALSE 21698
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21640: LD_INT 22
21642: PUSH
21643: LD_VAR 0 16
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 35
21654: PUSH
21655: LD_INT 49
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 91
21664: PUSH
21665: LD_VAR 0 1
21669: PUSH
21670: LD_INT 10
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: LIST
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: LIST
21682: PPUSH
21683: CALL_OW 69
21687: NOT
21688: IFFALSE 21698
// weapon := ru_time_lapser ;
21690: LD_ADDR_VAR 0 18
21694: PUSH
21695: LD_INT 49
21697: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21698: LD_VAR 0 12
21702: PUSH
21703: LD_INT 1
21705: PUSH
21706: LD_INT 2
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: IN
21713: IFFALSE 21737
21715: PUSH
21716: LD_INT 11
21718: PUSH
21719: LD_VAR 0 5
21723: IN
21724: IFTRUE 21736
21726: PUSH
21727: LD_INT 30
21729: PUSH
21730: LD_VAR 0 5
21734: IN
21735: OR
21736: AND
21737: IFFALSE 21757
21739: PUSH
21740: LD_INT 6
21742: PPUSH
21743: LD_VAR 0 16
21747: PPUSH
21748: CALL_OW 321
21752: PUSH
21753: LD_INT 2
21755: EQUAL
21756: AND
21757: IFFALSE 21924
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21759: LD_INT 22
21761: PUSH
21762: LD_VAR 0 16
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 2
21773: PUSH
21774: LD_INT 35
21776: PUSH
21777: LD_INT 11
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 35
21786: PUSH
21787: LD_INT 30
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 91
21801: PUSH
21802: LD_VAR 0 1
21806: PUSH
21807: LD_INT 18
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: LIST
21819: PPUSH
21820: CALL_OW 69
21824: NOT
21825: IFFALSE 21901
21827: PUSH
21828: LD_INT 22
21830: PUSH
21831: LD_VAR 0 16
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 2
21842: PUSH
21843: LD_INT 30
21845: PUSH
21846: LD_INT 32
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 30
21855: PUSH
21856: LD_INT 33
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 91
21870: PUSH
21871: LD_VAR 0 1
21875: PUSH
21876: LD_INT 12
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: LIST
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: LIST
21888: PUSH
21889: EMPTY
21890: LIST
21891: PPUSH
21892: CALL_OW 69
21896: PUSH
21897: LD_INT 2
21899: GREATER
21900: AND
21901: IFFALSE 21924
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21903: LD_ADDR_VAR 0 18
21907: PUSH
21908: LD_INT 11
21910: PUSH
21911: LD_INT 30
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_VAR 0 12
21922: ARRAY
21923: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21924: LD_VAR 0 18
21928: NOT
21929: IFFALSE 21949
21931: PUSH
21932: LD_INT 40
21934: PPUSH
21935: LD_VAR 0 16
21939: PPUSH
21940: CALL_OW 321
21944: PUSH
21945: LD_INT 2
21947: EQUAL
21948: AND
21949: IFFALSE 21985
21951: PUSH
21952: LD_INT 7
21954: PUSH
21955: LD_VAR 0 5
21959: IN
21960: IFTRUE 21972
21962: PUSH
21963: LD_INT 28
21965: PUSH
21966: LD_VAR 0 5
21970: IN
21971: OR
21972: IFTRUE 21984
21974: PUSH
21975: LD_INT 45
21977: PUSH
21978: LD_VAR 0 5
21982: IN
21983: OR
21984: AND
21985: IFFALSE 22239
// begin hex := GetHexInfo ( x , y ) ;
21987: LD_ADDR_VAR 0 4
21991: PUSH
21992: LD_VAR 0 10
21996: PPUSH
21997: LD_VAR 0 11
22001: PPUSH
22002: CALL_OW 546
22006: ST_TO_ADDR
// if hex [ 1 ] then
22007: LD_VAR 0 4
22011: PUSH
22012: LD_INT 1
22014: ARRAY
22015: IFFALSE 22019
// exit ;
22017: GO 22426
// height := hex [ 2 ] ;
22019: LD_ADDR_VAR 0 15
22023: PUSH
22024: LD_VAR 0 4
22028: PUSH
22029: LD_INT 2
22031: ARRAY
22032: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22033: LD_ADDR_VAR 0 14
22037: PUSH
22038: LD_INT 0
22040: PUSH
22041: LD_INT 2
22043: PUSH
22044: LD_INT 3
22046: PUSH
22047: LD_INT 5
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: ST_TO_ADDR
// for i in tmp do
22056: LD_ADDR_VAR 0 8
22060: PUSH
22061: LD_VAR 0 14
22065: PUSH
22066: FOR_IN
22067: IFFALSE 22237
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22069: LD_ADDR_VAR 0 9
22073: PUSH
22074: LD_VAR 0 10
22078: PPUSH
22079: LD_VAR 0 8
22083: PPUSH
22084: LD_INT 5
22086: PPUSH
22087: CALL_OW 272
22091: PUSH
22092: LD_VAR 0 11
22096: PPUSH
22097: LD_VAR 0 8
22101: PPUSH
22102: LD_INT 5
22104: PPUSH
22105: CALL_OW 273
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22114: LD_VAR 0 9
22118: PUSH
22119: LD_INT 1
22121: ARRAY
22122: PPUSH
22123: LD_VAR 0 9
22127: PUSH
22128: LD_INT 2
22130: ARRAY
22131: PPUSH
22132: CALL_OW 488
22136: IFFALSE 22235
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22138: LD_ADDR_VAR 0 4
22142: PUSH
22143: LD_VAR 0 9
22147: PUSH
22148: LD_INT 1
22150: ARRAY
22151: PPUSH
22152: LD_VAR 0 9
22156: PUSH
22157: LD_INT 2
22159: ARRAY
22160: PPUSH
22161: CALL_OW 546
22165: ST_TO_ADDR
// if hex [ 1 ] then
22166: LD_VAR 0 4
22170: PUSH
22171: LD_INT 1
22173: ARRAY
22174: IFFALSE 22178
// continue ;
22176: GO 22066
// h := hex [ 2 ] ;
22178: LD_ADDR_VAR 0 13
22182: PUSH
22183: LD_VAR 0 4
22187: PUSH
22188: LD_INT 2
22190: ARRAY
22191: ST_TO_ADDR
// if h + 7 < height then
22192: LD_VAR 0 13
22196: PUSH
22197: LD_INT 7
22199: PLUS
22200: PUSH
22201: LD_VAR 0 15
22205: LESS
22206: IFFALSE 22235
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22208: LD_ADDR_VAR 0 18
22212: PUSH
22213: LD_INT 7
22215: PUSH
22216: LD_INT 28
22218: PUSH
22219: LD_INT 45
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: PUSH
22227: LD_VAR 0 12
22231: ARRAY
22232: ST_TO_ADDR
// break ;
22233: GO 22237
// end ; end ; end ;
22235: GO 22066
22237: POP
22238: POP
// end ; if not weapon then
22239: LD_VAR 0 18
22243: NOT
22244: IFFALSE 22304
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22246: LD_ADDR_VAR 0 5
22250: PUSH
22251: LD_VAR 0 5
22255: PUSH
22256: LD_INT 11
22258: PUSH
22259: LD_INT 30
22261: PUSH
22262: LD_INT 49
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: LIST
22269: DIFF
22270: ST_TO_ADDR
// if not list then
22271: LD_VAR 0 5
22275: NOT
22276: IFFALSE 22280
// exit ;
22278: GO 22426
// weapon := list [ rand ( 1 , list ) ] ;
22280: LD_ADDR_VAR 0 18
22284: PUSH
22285: LD_VAR 0 5
22289: PUSH
22290: LD_INT 1
22292: PPUSH
22293: LD_VAR 0 5
22297: PPUSH
22298: CALL_OW 12
22302: ARRAY
22303: ST_TO_ADDR
// end ; if weapon then
22304: LD_VAR 0 18
22308: IFFALSE 22426
// begin tmp := CostOfWeapon ( weapon ) ;
22310: LD_ADDR_VAR 0 14
22314: PUSH
22315: LD_VAR 0 18
22319: PPUSH
22320: CALL_OW 451
22324: ST_TO_ADDR
// j := GetBase ( tower ) ;
22325: LD_ADDR_VAR 0 9
22329: PUSH
22330: LD_VAR 0 1
22334: PPUSH
22335: CALL_OW 274
22339: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22340: LD_VAR 0 9
22344: PPUSH
22345: LD_INT 1
22347: PPUSH
22348: CALL_OW 275
22352: PUSH
22353: LD_VAR 0 14
22357: PUSH
22358: LD_INT 1
22360: ARRAY
22361: GREATEREQUAL
22362: IFFALSE 22388
22364: PUSH
22365: LD_VAR 0 9
22369: PPUSH
22370: LD_INT 2
22372: PPUSH
22373: CALL_OW 275
22377: PUSH
22378: LD_VAR 0 14
22382: PUSH
22383: LD_INT 2
22385: ARRAY
22386: GREATEREQUAL
22387: AND
22388: IFFALSE 22414
22390: PUSH
22391: LD_VAR 0 9
22395: PPUSH
22396: LD_INT 3
22398: PPUSH
22399: CALL_OW 275
22403: PUSH
22404: LD_VAR 0 14
22408: PUSH
22409: LD_INT 3
22411: ARRAY
22412: GREATEREQUAL
22413: AND
22414: IFFALSE 22426
// result := weapon ;
22416: LD_ADDR_VAR 0 3
22420: PUSH
22421: LD_VAR 0 18
22425: ST_TO_ADDR
// end ; end ;
22426: LD_VAR 0 3
22430: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22431: LD_INT 0
22433: PPUSH
22434: PPUSH
// result := true ;
22435: LD_ADDR_VAR 0 3
22439: PUSH
22440: LD_INT 1
22442: ST_TO_ADDR
// if array1 = array2 then
22443: LD_VAR 0 1
22447: PUSH
22448: LD_VAR 0 2
22452: EQUAL
22453: IFFALSE 22513
// begin for i = 1 to array1 do
22455: LD_ADDR_VAR 0 4
22459: PUSH
22460: DOUBLE
22461: LD_INT 1
22463: DEC
22464: ST_TO_ADDR
22465: LD_VAR 0 1
22469: PUSH
22470: FOR_TO
22471: IFFALSE 22509
// if array1 [ i ] <> array2 [ i ] then
22473: LD_VAR 0 1
22477: PUSH
22478: LD_VAR 0 4
22482: ARRAY
22483: PUSH
22484: LD_VAR 0 2
22488: PUSH
22489: LD_VAR 0 4
22493: ARRAY
22494: NONEQUAL
22495: IFFALSE 22507
// begin result := false ;
22497: LD_ADDR_VAR 0 3
22501: PUSH
22502: LD_INT 0
22504: ST_TO_ADDR
// break ;
22505: GO 22509
// end ;
22507: GO 22470
22509: POP
22510: POP
// end else
22511: GO 22521
// result := false ;
22513: LD_ADDR_VAR 0 3
22517: PUSH
22518: LD_INT 0
22520: ST_TO_ADDR
// end ;
22521: LD_VAR 0 3
22525: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
22526: LD_INT 0
22528: PPUSH
22529: PPUSH
// if not array1 or not array2 then
22530: LD_VAR 0 1
22534: NOT
22535: IFTRUE 22544
22537: PUSH
22538: LD_VAR 0 2
22542: NOT
22543: OR
22544: IFFALSE 22548
// exit ;
22546: GO 22612
// result := true ;
22548: LD_ADDR_VAR 0 3
22552: PUSH
22553: LD_INT 1
22555: ST_TO_ADDR
// for i = 1 to array1 do
22556: LD_ADDR_VAR 0 4
22560: PUSH
22561: DOUBLE
22562: LD_INT 1
22564: DEC
22565: ST_TO_ADDR
22566: LD_VAR 0 1
22570: PUSH
22571: FOR_TO
22572: IFFALSE 22610
// if array1 [ i ] <> array2 [ i ] then
22574: LD_VAR 0 1
22578: PUSH
22579: LD_VAR 0 4
22583: ARRAY
22584: PUSH
22585: LD_VAR 0 2
22589: PUSH
22590: LD_VAR 0 4
22594: ARRAY
22595: NONEQUAL
22596: IFFALSE 22608
// begin result := false ;
22598: LD_ADDR_VAR 0 3
22602: PUSH
22603: LD_INT 0
22605: ST_TO_ADDR
// break ;
22606: GO 22610
// end ;
22608: GO 22571
22610: POP
22611: POP
// end ;
22612: LD_VAR 0 3
22616: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22617: LD_INT 0
22619: PPUSH
22620: PPUSH
22621: PPUSH
// pom := GetBase ( fac ) ;
22622: LD_ADDR_VAR 0 5
22626: PUSH
22627: LD_VAR 0 1
22631: PPUSH
22632: CALL_OW 274
22636: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22637: LD_ADDR_VAR 0 4
22641: PUSH
22642: LD_VAR 0 2
22646: PUSH
22647: LD_INT 1
22649: ARRAY
22650: PPUSH
22651: LD_VAR 0 2
22655: PUSH
22656: LD_INT 2
22658: ARRAY
22659: PPUSH
22660: LD_VAR 0 2
22664: PUSH
22665: LD_INT 3
22667: ARRAY
22668: PPUSH
22669: LD_VAR 0 2
22673: PUSH
22674: LD_INT 4
22676: ARRAY
22677: PPUSH
22678: CALL_OW 449
22682: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22683: LD_ADDR_VAR 0 3
22687: PUSH
22688: LD_VAR 0 5
22692: PPUSH
22693: LD_INT 1
22695: PPUSH
22696: CALL_OW 275
22700: PUSH
22701: LD_VAR 0 4
22705: PUSH
22706: LD_INT 1
22708: ARRAY
22709: GREATEREQUAL
22710: IFFALSE 22736
22712: PUSH
22713: LD_VAR 0 5
22717: PPUSH
22718: LD_INT 2
22720: PPUSH
22721: CALL_OW 275
22725: PUSH
22726: LD_VAR 0 4
22730: PUSH
22731: LD_INT 2
22733: ARRAY
22734: GREATEREQUAL
22735: AND
22736: IFFALSE 22762
22738: PUSH
22739: LD_VAR 0 5
22743: PPUSH
22744: LD_INT 3
22746: PPUSH
22747: CALL_OW 275
22751: PUSH
22752: LD_VAR 0 4
22756: PUSH
22757: LD_INT 3
22759: ARRAY
22760: GREATEREQUAL
22761: AND
22762: ST_TO_ADDR
// end ;
22763: LD_VAR 0 3
22767: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22768: LD_INT 0
22770: PPUSH
22771: PPUSH
22772: PPUSH
22773: PPUSH
// pom := GetBase ( building ) ;
22774: LD_ADDR_VAR 0 3
22778: PUSH
22779: LD_VAR 0 1
22783: PPUSH
22784: CALL_OW 274
22788: ST_TO_ADDR
// if not pom then
22789: LD_VAR 0 3
22793: NOT
22794: IFFALSE 22798
// exit ;
22796: GO 22972
// btype := GetBType ( building ) ;
22798: LD_ADDR_VAR 0 5
22802: PUSH
22803: LD_VAR 0 1
22807: PPUSH
22808: CALL_OW 266
22812: ST_TO_ADDR
// if btype = b_armoury then
22813: LD_VAR 0 5
22817: PUSH
22818: LD_INT 4
22820: EQUAL
22821: IFFALSE 22831
// btype := b_barracks ;
22823: LD_ADDR_VAR 0 5
22827: PUSH
22828: LD_INT 5
22830: ST_TO_ADDR
// if btype = b_depot then
22831: LD_VAR 0 5
22835: PUSH
22836: LD_INT 0
22838: EQUAL
22839: IFFALSE 22849
// btype := b_warehouse ;
22841: LD_ADDR_VAR 0 5
22845: PUSH
22846: LD_INT 1
22848: ST_TO_ADDR
// if btype = b_workshop then
22849: LD_VAR 0 5
22853: PUSH
22854: LD_INT 2
22856: EQUAL
22857: IFFALSE 22867
// btype := b_factory ;
22859: LD_ADDR_VAR 0 5
22863: PUSH
22864: LD_INT 3
22866: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22867: LD_ADDR_VAR 0 4
22871: PUSH
22872: LD_VAR 0 5
22876: PPUSH
22877: LD_VAR 0 1
22881: PPUSH
22882: CALL_OW 248
22886: PPUSH
22887: CALL_OW 450
22891: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22892: LD_ADDR_VAR 0 2
22896: PUSH
22897: LD_VAR 0 3
22901: PPUSH
22902: LD_INT 1
22904: PPUSH
22905: CALL_OW 275
22909: PUSH
22910: LD_VAR 0 4
22914: PUSH
22915: LD_INT 1
22917: ARRAY
22918: GREATEREQUAL
22919: IFFALSE 22945
22921: PUSH
22922: LD_VAR 0 3
22926: PPUSH
22927: LD_INT 2
22929: PPUSH
22930: CALL_OW 275
22934: PUSH
22935: LD_VAR 0 4
22939: PUSH
22940: LD_INT 2
22942: ARRAY
22943: GREATEREQUAL
22944: AND
22945: IFFALSE 22971
22947: PUSH
22948: LD_VAR 0 3
22952: PPUSH
22953: LD_INT 3
22955: PPUSH
22956: CALL_OW 275
22960: PUSH
22961: LD_VAR 0 4
22965: PUSH
22966: LD_INT 3
22968: ARRAY
22969: GREATEREQUAL
22970: AND
22971: ST_TO_ADDR
// end ;
22972: LD_VAR 0 2
22976: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22977: LD_INT 0
22979: PPUSH
22980: PPUSH
22981: PPUSH
// pom := GetBase ( building ) ;
22982: LD_ADDR_VAR 0 4
22986: PUSH
22987: LD_VAR 0 1
22991: PPUSH
22992: CALL_OW 274
22996: ST_TO_ADDR
// if not pom then
22997: LD_VAR 0 4
23001: NOT
23002: IFFALSE 23006
// exit ;
23004: GO 23111
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23006: LD_ADDR_VAR 0 5
23010: PUSH
23011: LD_VAR 0 2
23015: PPUSH
23016: LD_VAR 0 1
23020: PPUSH
23021: CALL_OW 248
23025: PPUSH
23026: CALL_OW 450
23030: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23031: LD_ADDR_VAR 0 3
23035: PUSH
23036: LD_VAR 0 4
23040: PPUSH
23041: LD_INT 1
23043: PPUSH
23044: CALL_OW 275
23048: PUSH
23049: LD_VAR 0 5
23053: PUSH
23054: LD_INT 1
23056: ARRAY
23057: GREATEREQUAL
23058: IFFALSE 23084
23060: PUSH
23061: LD_VAR 0 4
23065: PPUSH
23066: LD_INT 2
23068: PPUSH
23069: CALL_OW 275
23073: PUSH
23074: LD_VAR 0 5
23078: PUSH
23079: LD_INT 2
23081: ARRAY
23082: GREATEREQUAL
23083: AND
23084: IFFALSE 23110
23086: PUSH
23087: LD_VAR 0 4
23091: PPUSH
23092: LD_INT 3
23094: PPUSH
23095: CALL_OW 275
23099: PUSH
23100: LD_VAR 0 5
23104: PUSH
23105: LD_INT 3
23107: ARRAY
23108: GREATEREQUAL
23109: AND
23110: ST_TO_ADDR
// end ;
23111: LD_VAR 0 3
23115: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23116: LD_INT 0
23118: PPUSH
23119: PPUSH
23120: PPUSH
23121: PPUSH
23122: PPUSH
23123: PPUSH
23124: PPUSH
23125: PPUSH
23126: PPUSH
23127: PPUSH
23128: PPUSH
// result := false ;
23129: LD_ADDR_VAR 0 8
23133: PUSH
23134: LD_INT 0
23136: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23137: LD_VAR 0 5
23141: NOT
23142: IFTRUE 23151
23144: PUSH
23145: LD_VAR 0 1
23149: NOT
23150: OR
23151: IFTRUE 23160
23153: PUSH
23154: LD_VAR 0 2
23158: NOT
23159: OR
23160: IFTRUE 23169
23162: PUSH
23163: LD_VAR 0 3
23167: NOT
23168: OR
23169: IFFALSE 23173
// exit ;
23171: GO 23999
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23173: LD_ADDR_VAR 0 14
23177: PUSH
23178: LD_VAR 0 1
23182: PPUSH
23183: LD_VAR 0 2
23187: PPUSH
23188: LD_VAR 0 3
23192: PPUSH
23193: LD_VAR 0 4
23197: PPUSH
23198: LD_VAR 0 5
23202: PUSH
23203: LD_INT 1
23205: ARRAY
23206: PPUSH
23207: CALL_OW 248
23211: PPUSH
23212: LD_INT 0
23214: PPUSH
23215: CALL 25280 0 6
23219: ST_TO_ADDR
// if not hexes then
23220: LD_VAR 0 14
23224: NOT
23225: IFFALSE 23229
// exit ;
23227: GO 23999
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23229: LD_ADDR_VAR 0 17
23233: PUSH
23234: LD_VAR 0 5
23238: PPUSH
23239: LD_INT 22
23241: PUSH
23242: LD_VAR 0 13
23246: PPUSH
23247: CALL_OW 255
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 2
23258: PUSH
23259: LD_INT 30
23261: PUSH
23262: LD_INT 0
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 30
23271: PUSH
23272: LD_INT 1
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: LIST
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PPUSH
23288: CALL_OW 72
23292: ST_TO_ADDR
// for i = 1 to hexes do
23293: LD_ADDR_VAR 0 9
23297: PUSH
23298: DOUBLE
23299: LD_INT 1
23301: DEC
23302: ST_TO_ADDR
23303: LD_VAR 0 14
23307: PUSH
23308: FOR_TO
23309: IFFALSE 23997
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23311: LD_ADDR_VAR 0 13
23315: PUSH
23316: LD_VAR 0 14
23320: PUSH
23321: LD_VAR 0 9
23325: ARRAY
23326: PUSH
23327: LD_INT 1
23329: ARRAY
23330: PPUSH
23331: LD_VAR 0 14
23335: PUSH
23336: LD_VAR 0 9
23340: ARRAY
23341: PUSH
23342: LD_INT 2
23344: ARRAY
23345: PPUSH
23346: CALL_OW 428
23350: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23351: LD_VAR 0 14
23355: PUSH
23356: LD_VAR 0 9
23360: ARRAY
23361: PUSH
23362: LD_INT 1
23364: ARRAY
23365: PPUSH
23366: LD_VAR 0 14
23370: PUSH
23371: LD_VAR 0 9
23375: ARRAY
23376: PUSH
23377: LD_INT 2
23379: ARRAY
23380: PPUSH
23381: CALL_OW 351
23385: IFTRUE 23424
23387: PUSH
23388: LD_VAR 0 14
23392: PUSH
23393: LD_VAR 0 9
23397: ARRAY
23398: PUSH
23399: LD_INT 1
23401: ARRAY
23402: PPUSH
23403: LD_VAR 0 14
23407: PUSH
23408: LD_VAR 0 9
23412: ARRAY
23413: PUSH
23414: LD_INT 2
23416: ARRAY
23417: PPUSH
23418: CALL_OW 488
23422: NOT
23423: OR
23424: IFTRUE 23441
23426: PUSH
23427: LD_VAR 0 13
23431: PPUSH
23432: CALL_OW 247
23436: PUSH
23437: LD_INT 3
23439: EQUAL
23440: OR
23441: IFFALSE 23447
// exit ;
23443: POP
23444: POP
23445: GO 23999
// if not tmp then
23447: LD_VAR 0 13
23451: NOT
23452: IFFALSE 23456
// continue ;
23454: GO 23308
// result := true ;
23456: LD_ADDR_VAR 0 8
23460: PUSH
23461: LD_INT 1
23463: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
23464: LD_VAR 0 6
23468: IFFALSE 23485
23470: PUSH
23471: LD_VAR 0 13
23475: PPUSH
23476: CALL_OW 247
23480: PUSH
23481: LD_INT 2
23483: EQUAL
23484: AND
23485: IFFALSE 23502
23487: PUSH
23488: LD_VAR 0 13
23492: PPUSH
23493: CALL_OW 263
23497: PUSH
23498: LD_INT 1
23500: EQUAL
23501: AND
23502: IFFALSE 23666
// begin if IsDrivenBy ( tmp ) then
23504: LD_VAR 0 13
23508: PPUSH
23509: CALL_OW 311
23513: IFFALSE 23517
// continue ;
23515: GO 23308
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
23517: LD_VAR 0 6
23521: PPUSH
23522: LD_INT 3
23524: PUSH
23525: LD_INT 60
23527: PUSH
23528: EMPTY
23529: LIST
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 3
23537: PUSH
23538: LD_INT 55
23540: PUSH
23541: EMPTY
23542: LIST
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PPUSH
23552: CALL_OW 72
23556: IFFALSE 23664
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
23558: LD_ADDR_VAR 0 18
23562: PUSH
23563: LD_VAR 0 6
23567: PPUSH
23568: LD_INT 3
23570: PUSH
23571: LD_INT 60
23573: PUSH
23574: EMPTY
23575: LIST
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 3
23583: PUSH
23584: LD_INT 55
23586: PUSH
23587: EMPTY
23588: LIST
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PPUSH
23598: CALL_OW 72
23602: PUSH
23603: LD_INT 1
23605: ARRAY
23606: ST_TO_ADDR
// if IsInUnit ( driver ) then
23607: LD_VAR 0 18
23611: PPUSH
23612: CALL_OW 310
23616: IFFALSE 23627
// ComExit ( driver ) ;
23618: LD_VAR 0 18
23622: PPUSH
23623: CALL 49270 0 1
// AddComEnterUnit ( driver , tmp ) ;
23627: LD_VAR 0 18
23631: PPUSH
23632: LD_VAR 0 13
23636: PPUSH
23637: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23641: LD_VAR 0 18
23645: PPUSH
23646: LD_VAR 0 7
23650: PPUSH
23651: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23655: LD_VAR 0 18
23659: PPUSH
23660: CALL_OW 181
// end ; continue ;
23664: GO 23308
// end ; if not cleaners or not tmp in cleaners then
23666: LD_VAR 0 6
23670: NOT
23671: IFTRUE 23686
23673: PUSH
23674: LD_VAR 0 13
23678: PUSH
23679: LD_VAR 0 6
23683: IN
23684: NOT
23685: OR
23686: IFFALSE 23995
// begin if dep then
23688: LD_VAR 0 17
23692: IFFALSE 23828
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23694: LD_ADDR_VAR 0 16
23698: PUSH
23699: LD_VAR 0 17
23703: PUSH
23704: LD_INT 1
23706: ARRAY
23707: PPUSH
23708: CALL_OW 250
23712: PPUSH
23713: LD_VAR 0 17
23717: PUSH
23718: LD_INT 1
23720: ARRAY
23721: PPUSH
23722: CALL_OW 254
23726: PPUSH
23727: LD_INT 5
23729: PPUSH
23730: CALL_OW 272
23734: PUSH
23735: LD_VAR 0 17
23739: PUSH
23740: LD_INT 1
23742: ARRAY
23743: PPUSH
23744: CALL_OW 251
23748: PPUSH
23749: LD_VAR 0 17
23753: PUSH
23754: LD_INT 1
23756: ARRAY
23757: PPUSH
23758: CALL_OW 254
23762: PPUSH
23763: LD_INT 5
23765: PPUSH
23766: CALL_OW 273
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23775: LD_VAR 0 16
23779: PUSH
23780: LD_INT 1
23782: ARRAY
23783: PPUSH
23784: LD_VAR 0 16
23788: PUSH
23789: LD_INT 2
23791: ARRAY
23792: PPUSH
23793: CALL_OW 488
23797: IFFALSE 23828
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23799: LD_VAR 0 13
23803: PPUSH
23804: LD_VAR 0 16
23808: PUSH
23809: LD_INT 1
23811: ARRAY
23812: PPUSH
23813: LD_VAR 0 16
23817: PUSH
23818: LD_INT 2
23820: ARRAY
23821: PPUSH
23822: CALL_OW 111
// continue ;
23826: GO 23308
// end ; end ; r := GetDir ( tmp ) ;
23828: LD_ADDR_VAR 0 15
23832: PUSH
23833: LD_VAR 0 13
23837: PPUSH
23838: CALL_OW 254
23842: ST_TO_ADDR
// if r = 5 then
23843: LD_VAR 0 15
23847: PUSH
23848: LD_INT 5
23850: EQUAL
23851: IFFALSE 23861
// r := 0 ;
23853: LD_ADDR_VAR 0 15
23857: PUSH
23858: LD_INT 0
23860: ST_TO_ADDR
// for j = r to 5 do
23861: LD_ADDR_VAR 0 10
23865: PUSH
23866: DOUBLE
23867: LD_VAR 0 15
23871: DEC
23872: ST_TO_ADDR
23873: LD_INT 5
23875: PUSH
23876: FOR_TO
23877: IFFALSE 23993
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23879: LD_ADDR_VAR 0 11
23883: PUSH
23884: LD_VAR 0 13
23888: PPUSH
23889: CALL_OW 250
23893: PPUSH
23894: LD_VAR 0 10
23898: PPUSH
23899: LD_INT 2
23901: PPUSH
23902: CALL_OW 272
23906: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23907: LD_ADDR_VAR 0 12
23911: PUSH
23912: LD_VAR 0 13
23916: PPUSH
23917: CALL_OW 251
23921: PPUSH
23922: LD_VAR 0 10
23926: PPUSH
23927: LD_INT 2
23929: PPUSH
23930: CALL_OW 273
23934: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23935: LD_VAR 0 11
23939: PPUSH
23940: LD_VAR 0 12
23944: PPUSH
23945: CALL_OW 488
23949: IFFALSE 23968
23951: PUSH
23952: LD_VAR 0 11
23956: PPUSH
23957: LD_VAR 0 12
23961: PPUSH
23962: CALL_OW 428
23966: NOT
23967: AND
23968: IFFALSE 23991
// begin ComMoveXY ( tmp , _x , _y ) ;
23970: LD_VAR 0 13
23974: PPUSH
23975: LD_VAR 0 11
23979: PPUSH
23980: LD_VAR 0 12
23984: PPUSH
23985: CALL_OW 111
// break ;
23989: GO 23993
// end ; end ;
23991: GO 23876
23993: POP
23994: POP
// end ; end ;
23995: GO 23308
23997: POP
23998: POP
// end ;
23999: LD_VAR 0 8
24003: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24004: LD_INT 0
24006: PPUSH
// result := true ;
24007: LD_ADDR_VAR 0 3
24011: PUSH
24012: LD_INT 1
24014: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24015: LD_VAR 0 2
24019: PUSH
24020: LD_INT 24
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24034
24026: LD_INT 33
24028: DOUBLE
24029: EQUAL
24030: IFTRUE 24034
24032: GO 24059
24034: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24035: LD_ADDR_VAR 0 3
24039: PUSH
24040: LD_INT 32
24042: PPUSH
24043: LD_VAR 0 1
24047: PPUSH
24048: CALL_OW 321
24052: PUSH
24053: LD_INT 2
24055: EQUAL
24056: ST_TO_ADDR
24057: GO 24375
24059: LD_INT 20
24061: DOUBLE
24062: EQUAL
24063: IFTRUE 24067
24065: GO 24092
24067: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24068: LD_ADDR_VAR 0 3
24072: PUSH
24073: LD_INT 6
24075: PPUSH
24076: LD_VAR 0 1
24080: PPUSH
24081: CALL_OW 321
24085: PUSH
24086: LD_INT 2
24088: EQUAL
24089: ST_TO_ADDR
24090: GO 24375
24092: LD_INT 22
24094: DOUBLE
24095: EQUAL
24096: IFTRUE 24106
24098: LD_INT 36
24100: DOUBLE
24101: EQUAL
24102: IFTRUE 24106
24104: GO 24131
24106: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24107: LD_ADDR_VAR 0 3
24111: PUSH
24112: LD_INT 15
24114: PPUSH
24115: LD_VAR 0 1
24119: PPUSH
24120: CALL_OW 321
24124: PUSH
24125: LD_INT 2
24127: EQUAL
24128: ST_TO_ADDR
24129: GO 24375
24131: LD_INT 30
24133: DOUBLE
24134: EQUAL
24135: IFTRUE 24139
24137: GO 24164
24139: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24140: LD_ADDR_VAR 0 3
24144: PUSH
24145: LD_INT 20
24147: PPUSH
24148: LD_VAR 0 1
24152: PPUSH
24153: CALL_OW 321
24157: PUSH
24158: LD_INT 2
24160: EQUAL
24161: ST_TO_ADDR
24162: GO 24375
24164: LD_INT 28
24166: DOUBLE
24167: EQUAL
24168: IFTRUE 24178
24170: LD_INT 21
24172: DOUBLE
24173: EQUAL
24174: IFTRUE 24178
24176: GO 24203
24178: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24179: LD_ADDR_VAR 0 3
24183: PUSH
24184: LD_INT 21
24186: PPUSH
24187: LD_VAR 0 1
24191: PPUSH
24192: CALL_OW 321
24196: PUSH
24197: LD_INT 2
24199: EQUAL
24200: ST_TO_ADDR
24201: GO 24375
24203: LD_INT 16
24205: DOUBLE
24206: EQUAL
24207: IFTRUE 24211
24209: GO 24236
24211: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24212: LD_ADDR_VAR 0 3
24216: PUSH
24217: LD_INT 84
24219: PPUSH
24220: LD_VAR 0 1
24224: PPUSH
24225: CALL_OW 321
24229: PUSH
24230: LD_INT 2
24232: EQUAL
24233: ST_TO_ADDR
24234: GO 24375
24236: LD_INT 19
24238: DOUBLE
24239: EQUAL
24240: IFTRUE 24250
24242: LD_INT 23
24244: DOUBLE
24245: EQUAL
24246: IFTRUE 24250
24248: GO 24275
24250: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24251: LD_ADDR_VAR 0 3
24255: PUSH
24256: LD_INT 83
24258: PPUSH
24259: LD_VAR 0 1
24263: PPUSH
24264: CALL_OW 321
24268: PUSH
24269: LD_INT 2
24271: EQUAL
24272: ST_TO_ADDR
24273: GO 24375
24275: LD_INT 17
24277: DOUBLE
24278: EQUAL
24279: IFTRUE 24283
24281: GO 24308
24283: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24284: LD_ADDR_VAR 0 3
24288: PUSH
24289: LD_INT 39
24291: PPUSH
24292: LD_VAR 0 1
24296: PPUSH
24297: CALL_OW 321
24301: PUSH
24302: LD_INT 2
24304: EQUAL
24305: ST_TO_ADDR
24306: GO 24375
24308: LD_INT 18
24310: DOUBLE
24311: EQUAL
24312: IFTRUE 24316
24314: GO 24341
24316: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24317: LD_ADDR_VAR 0 3
24321: PUSH
24322: LD_INT 40
24324: PPUSH
24325: LD_VAR 0 1
24329: PPUSH
24330: CALL_OW 321
24334: PUSH
24335: LD_INT 2
24337: EQUAL
24338: ST_TO_ADDR
24339: GO 24375
24341: LD_INT 27
24343: DOUBLE
24344: EQUAL
24345: IFTRUE 24349
24347: GO 24374
24349: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
24350: LD_ADDR_VAR 0 3
24354: PUSH
24355: LD_INT 35
24357: PPUSH
24358: LD_VAR 0 1
24362: PPUSH
24363: CALL_OW 321
24367: PUSH
24368: LD_INT 2
24370: EQUAL
24371: ST_TO_ADDR
24372: GO 24375
24374: POP
// end ;
24375: LD_VAR 0 3
24379: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
24380: LD_INT 0
24382: PPUSH
24383: PPUSH
24384: PPUSH
24385: PPUSH
24386: PPUSH
24387: PPUSH
24388: PPUSH
24389: PPUSH
24390: PPUSH
24391: PPUSH
24392: PPUSH
// result := false ;
24393: LD_ADDR_VAR 0 6
24397: PUSH
24398: LD_INT 0
24400: ST_TO_ADDR
// if btype = b_depot then
24401: LD_VAR 0 2
24405: PUSH
24406: LD_INT 0
24408: EQUAL
24409: IFFALSE 24421
// begin result := true ;
24411: LD_ADDR_VAR 0 6
24415: PUSH
24416: LD_INT 1
24418: ST_TO_ADDR
// exit ;
24419: GO 25275
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24421: LD_VAR 0 1
24425: NOT
24426: IFTRUE 24451
24428: PUSH
24429: LD_VAR 0 1
24433: PPUSH
24434: CALL_OW 266
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: IN
24449: NOT
24450: OR
24451: IFTRUE 24460
24453: PUSH
24454: LD_VAR 0 2
24458: NOT
24459: OR
24460: IFTRUE 24496
24462: PUSH
24463: LD_VAR 0 5
24467: PUSH
24468: LD_INT 0
24470: PUSH
24471: LD_INT 1
24473: PUSH
24474: LD_INT 2
24476: PUSH
24477: LD_INT 3
24479: PUSH
24480: LD_INT 4
24482: PUSH
24483: LD_INT 5
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: IN
24494: NOT
24495: OR
24496: IFTRUE 24515
24498: PUSH
24499: LD_VAR 0 3
24503: PPUSH
24504: LD_VAR 0 4
24508: PPUSH
24509: CALL_OW 488
24513: NOT
24514: OR
24515: IFFALSE 24519
// exit ;
24517: GO 25275
// side := GetSide ( depot ) ;
24519: LD_ADDR_VAR 0 9
24523: PUSH
24524: LD_VAR 0 1
24528: PPUSH
24529: CALL_OW 255
24533: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
24534: LD_VAR 0 9
24538: PPUSH
24539: LD_VAR 0 2
24543: PPUSH
24544: CALL 24004 0 2
24548: NOT
24549: IFFALSE 24553
// exit ;
24551: GO 25275
// pom := GetBase ( depot ) ;
24553: LD_ADDR_VAR 0 10
24557: PUSH
24558: LD_VAR 0 1
24562: PPUSH
24563: CALL_OW 274
24567: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24568: LD_ADDR_VAR 0 11
24572: PUSH
24573: LD_VAR 0 2
24577: PPUSH
24578: LD_VAR 0 1
24582: PPUSH
24583: CALL_OW 248
24587: PPUSH
24588: CALL_OW 450
24592: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24593: LD_VAR 0 10
24597: PPUSH
24598: LD_INT 1
24600: PPUSH
24601: CALL_OW 275
24605: PUSH
24606: LD_VAR 0 11
24610: PUSH
24611: LD_INT 1
24613: ARRAY
24614: GREATEREQUAL
24615: IFFALSE 24641
24617: PUSH
24618: LD_VAR 0 10
24622: PPUSH
24623: LD_INT 2
24625: PPUSH
24626: CALL_OW 275
24630: PUSH
24631: LD_VAR 0 11
24635: PUSH
24636: LD_INT 2
24638: ARRAY
24639: GREATEREQUAL
24640: AND
24641: IFFALSE 24667
24643: PUSH
24644: LD_VAR 0 10
24648: PPUSH
24649: LD_INT 3
24651: PPUSH
24652: CALL_OW 275
24656: PUSH
24657: LD_VAR 0 11
24661: PUSH
24662: LD_INT 3
24664: ARRAY
24665: GREATEREQUAL
24666: AND
24667: NOT
24668: IFFALSE 24672
// exit ;
24670: GO 25275
// if GetBType ( depot ) = b_depot then
24672: LD_VAR 0 1
24676: PPUSH
24677: CALL_OW 266
24681: PUSH
24682: LD_INT 0
24684: EQUAL
24685: IFFALSE 24697
// dist := 28 else
24687: LD_ADDR_VAR 0 14
24691: PUSH
24692: LD_INT 28
24694: ST_TO_ADDR
24695: GO 24705
// dist := 36 ;
24697: LD_ADDR_VAR 0 14
24701: PUSH
24702: LD_INT 36
24704: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24705: LD_VAR 0 1
24709: PPUSH
24710: LD_VAR 0 3
24714: PPUSH
24715: LD_VAR 0 4
24719: PPUSH
24720: CALL_OW 297
24724: PUSH
24725: LD_VAR 0 14
24729: GREATER
24730: IFFALSE 24734
// exit ;
24732: GO 25275
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24734: LD_ADDR_VAR 0 12
24738: PUSH
24739: LD_VAR 0 2
24743: PPUSH
24744: LD_VAR 0 3
24748: PPUSH
24749: LD_VAR 0 4
24753: PPUSH
24754: LD_VAR 0 5
24758: PPUSH
24759: LD_VAR 0 1
24763: PPUSH
24764: CALL_OW 248
24768: PPUSH
24769: LD_INT 0
24771: PPUSH
24772: CALL 25280 0 6
24776: ST_TO_ADDR
// if not hexes then
24777: LD_VAR 0 12
24781: NOT
24782: IFFALSE 24786
// exit ;
24784: GO 25275
// hex := GetHexInfo ( x , y ) ;
24786: LD_ADDR_VAR 0 15
24790: PUSH
24791: LD_VAR 0 3
24795: PPUSH
24796: LD_VAR 0 4
24800: PPUSH
24801: CALL_OW 546
24805: ST_TO_ADDR
// if hex [ 1 ] then
24806: LD_VAR 0 15
24810: PUSH
24811: LD_INT 1
24813: ARRAY
24814: IFFALSE 24818
// exit ;
24816: GO 25275
// height := hex [ 2 ] ;
24818: LD_ADDR_VAR 0 13
24822: PUSH
24823: LD_VAR 0 15
24827: PUSH
24828: LD_INT 2
24830: ARRAY
24831: ST_TO_ADDR
// for i = 1 to hexes do
24832: LD_ADDR_VAR 0 7
24836: PUSH
24837: DOUBLE
24838: LD_INT 1
24840: DEC
24841: ST_TO_ADDR
24842: LD_VAR 0 12
24846: PUSH
24847: FOR_TO
24848: IFFALSE 25192
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24850: LD_VAR 0 12
24854: PUSH
24855: LD_VAR 0 7
24859: ARRAY
24860: PUSH
24861: LD_INT 1
24863: ARRAY
24864: PPUSH
24865: LD_VAR 0 12
24869: PUSH
24870: LD_VAR 0 7
24874: ARRAY
24875: PUSH
24876: LD_INT 2
24878: ARRAY
24879: PPUSH
24880: CALL_OW 488
24884: NOT
24885: IFTRUE 24927
24887: PUSH
24888: LD_VAR 0 12
24892: PUSH
24893: LD_VAR 0 7
24897: ARRAY
24898: PUSH
24899: LD_INT 1
24901: ARRAY
24902: PPUSH
24903: LD_VAR 0 12
24907: PUSH
24908: LD_VAR 0 7
24912: ARRAY
24913: PUSH
24914: LD_INT 2
24916: ARRAY
24917: PPUSH
24918: CALL_OW 428
24922: PUSH
24923: LD_INT 0
24925: GREATER
24926: OR
24927: IFTRUE 24965
24929: PUSH
24930: LD_VAR 0 12
24934: PUSH
24935: LD_VAR 0 7
24939: ARRAY
24940: PUSH
24941: LD_INT 1
24943: ARRAY
24944: PPUSH
24945: LD_VAR 0 12
24949: PUSH
24950: LD_VAR 0 7
24954: ARRAY
24955: PUSH
24956: LD_INT 2
24958: ARRAY
24959: PPUSH
24960: CALL_OW 351
24964: OR
24965: IFFALSE 24971
// exit ;
24967: POP
24968: POP
24969: GO 25275
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24971: LD_ADDR_VAR 0 8
24975: PUSH
24976: LD_VAR 0 12
24980: PUSH
24981: LD_VAR 0 7
24985: ARRAY
24986: PUSH
24987: LD_INT 1
24989: ARRAY
24990: PPUSH
24991: LD_VAR 0 12
24995: PUSH
24996: LD_VAR 0 7
25000: ARRAY
25001: PUSH
25002: LD_INT 2
25004: ARRAY
25005: PPUSH
25006: CALL_OW 546
25010: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25011: LD_VAR 0 8
25015: PUSH
25016: LD_INT 1
25018: ARRAY
25019: IFTRUE 25041
25021: PUSH
25022: LD_VAR 0 8
25026: PUSH
25027: LD_INT 2
25029: ARRAY
25030: PUSH
25031: LD_VAR 0 13
25035: PUSH
25036: LD_INT 2
25038: PLUS
25039: GREATER
25040: OR
25041: IFTRUE 25063
25043: PUSH
25044: LD_VAR 0 8
25048: PUSH
25049: LD_INT 2
25051: ARRAY
25052: PUSH
25053: LD_VAR 0 13
25057: PUSH
25058: LD_INT 2
25060: MINUS
25061: LESS
25062: OR
25063: IFTRUE 25131
25065: PUSH
25066: LD_VAR 0 8
25070: PUSH
25071: LD_INT 3
25073: ARRAY
25074: PUSH
25075: LD_INT 0
25077: PUSH
25078: LD_INT 8
25080: PUSH
25081: LD_INT 9
25083: PUSH
25084: LD_INT 10
25086: PUSH
25087: LD_INT 11
25089: PUSH
25090: LD_INT 12
25092: PUSH
25093: LD_INT 13
25095: PUSH
25096: LD_INT 16
25098: PUSH
25099: LD_INT 17
25101: PUSH
25102: LD_INT 18
25104: PUSH
25105: LD_INT 19
25107: PUSH
25108: LD_INT 20
25110: PUSH
25111: LD_INT 21
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: IN
25129: NOT
25130: OR
25131: IFTRUE 25144
25133: PUSH
25134: LD_VAR 0 8
25138: PUSH
25139: LD_INT 5
25141: ARRAY
25142: NOT
25143: OR
25144: IFTRUE 25184
25146: PUSH
25147: LD_VAR 0 8
25151: PUSH
25152: LD_INT 6
25154: ARRAY
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: LD_INT 2
25161: PUSH
25162: LD_INT 7
25164: PUSH
25165: LD_INT 9
25167: PUSH
25168: LD_INT 10
25170: PUSH
25171: LD_INT 11
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: IN
25182: NOT
25183: OR
25184: IFFALSE 25190
// exit ;
25186: POP
25187: POP
25188: GO 25275
// end ;
25190: GO 24847
25192: POP
25193: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25194: LD_VAR 0 9
25198: PPUSH
25199: LD_VAR 0 3
25203: PPUSH
25204: LD_VAR 0 4
25208: PPUSH
25209: LD_INT 20
25211: PPUSH
25212: CALL 17094 0 4
25216: PUSH
25217: LD_INT 4
25219: ARRAY
25220: IFFALSE 25224
// exit ;
25222: GO 25275
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25224: LD_VAR 0 2
25228: PUSH
25229: LD_INT 29
25231: PUSH
25232: LD_INT 30
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: IN
25239: IFFALSE 25263
25241: PUSH
25242: LD_VAR 0 3
25246: PPUSH
25247: LD_VAR 0 4
25251: PPUSH
25252: LD_VAR 0 9
25256: PPUSH
25257: CALL_OW 440
25261: NOT
25262: AND
25263: IFFALSE 25267
// exit ;
25265: GO 25275
// result := true ;
25267: LD_ADDR_VAR 0 6
25271: PUSH
25272: LD_INT 1
25274: ST_TO_ADDR
// end ;
25275: LD_VAR 0 6
25279: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25280: LD_INT 0
25282: PPUSH
25283: PPUSH
25284: PPUSH
25285: PPUSH
25286: PPUSH
25287: PPUSH
25288: PPUSH
25289: PPUSH
25290: PPUSH
25291: PPUSH
25292: PPUSH
25293: PPUSH
25294: PPUSH
25295: PPUSH
25296: PPUSH
25297: PPUSH
25298: PPUSH
25299: PPUSH
25300: PPUSH
25301: PPUSH
25302: PPUSH
25303: PPUSH
25304: PPUSH
25305: PPUSH
25306: PPUSH
25307: PPUSH
25308: PPUSH
25309: PPUSH
25310: PPUSH
25311: PPUSH
25312: PPUSH
25313: PPUSH
25314: PPUSH
25315: PPUSH
25316: PPUSH
25317: PPUSH
25318: PPUSH
25319: PPUSH
25320: PPUSH
25321: PPUSH
25322: PPUSH
25323: PPUSH
25324: PPUSH
25325: PPUSH
25326: PPUSH
25327: PPUSH
25328: PPUSH
25329: PPUSH
25330: PPUSH
25331: PPUSH
25332: PPUSH
25333: PPUSH
25334: PPUSH
25335: PPUSH
25336: PPUSH
25337: PPUSH
25338: PPUSH
25339: PPUSH
// result = [ ] ;
25340: LD_ADDR_VAR 0 7
25344: PUSH
25345: EMPTY
25346: ST_TO_ADDR
// temp_list = [ ] ;
25347: LD_ADDR_VAR 0 9
25351: PUSH
25352: EMPTY
25353: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25354: LD_VAR 0 4
25358: PUSH
25359: LD_INT 0
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: LD_INT 2
25367: PUSH
25368: LD_INT 3
25370: PUSH
25371: LD_INT 4
25373: PUSH
25374: LD_INT 5
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: IN
25385: NOT
25386: IFTRUE 25429
25388: PUSH
25389: LD_VAR 0 1
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: LD_INT 1
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: IN
25404: IFFALSE 25428
25406: PUSH
25407: LD_VAR 0 5
25411: PUSH
25412: LD_INT 1
25414: PUSH
25415: LD_INT 2
25417: PUSH
25418: LD_INT 3
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: LIST
25425: IN
25426: NOT
25427: AND
25428: OR
25429: IFFALSE 25433
// exit ;
25431: GO 43832
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25433: LD_VAR 0 1
25437: PUSH
25438: LD_INT 6
25440: PUSH
25441: LD_INT 7
25443: PUSH
25444: LD_INT 8
25446: PUSH
25447: LD_INT 13
25449: PUSH
25450: LD_INT 12
25452: PUSH
25453: LD_INT 15
25455: PUSH
25456: LD_INT 11
25458: PUSH
25459: LD_INT 14
25461: PUSH
25462: LD_INT 10
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: IN
25476: IFFALSE 25486
// btype = b_lab ;
25478: LD_ADDR_VAR 0 1
25482: PUSH
25483: LD_INT 6
25485: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25486: LD_VAR 0 6
25490: PUSH
25491: LD_INT 0
25493: PUSH
25494: LD_INT 1
25496: PUSH
25497: LD_INT 2
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: LIST
25504: IN
25505: NOT
25506: IFTRUE 25574
25508: PUSH
25509: LD_VAR 0 1
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: LD_INT 1
25519: PUSH
25520: LD_INT 2
25522: PUSH
25523: LD_INT 3
25525: PUSH
25526: LD_INT 6
25528: PUSH
25529: LD_INT 36
25531: PUSH
25532: LD_INT 4
25534: PUSH
25535: LD_INT 5
25537: PUSH
25538: LD_INT 31
25540: PUSH
25541: LD_INT 32
25543: PUSH
25544: LD_INT 33
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: IN
25560: NOT
25561: IFFALSE 25573
25563: PUSH
25564: LD_VAR 0 6
25568: PUSH
25569: LD_INT 1
25571: EQUAL
25572: AND
25573: OR
25574: IFTRUE 25606
25576: PUSH
25577: LD_VAR 0 1
25581: PUSH
25582: LD_INT 2
25584: PUSH
25585: LD_INT 3
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: IN
25592: NOT
25593: IFFALSE 25605
25595: PUSH
25596: LD_VAR 0 6
25600: PUSH
25601: LD_INT 2
25603: EQUAL
25604: AND
25605: OR
25606: IFFALSE 25616
// mode = 0 ;
25608: LD_ADDR_VAR 0 6
25612: PUSH
25613: LD_INT 0
25615: ST_TO_ADDR
// case mode of 0 :
25616: LD_VAR 0 6
25620: PUSH
25621: LD_INT 0
25623: DOUBLE
25624: EQUAL
25625: IFTRUE 25629
25627: GO 37082
25629: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25630: LD_ADDR_VAR 0 11
25634: PUSH
25635: LD_INT 0
25637: PUSH
25638: LD_INT 0
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 0
25647: PUSH
25648: LD_INT 1
25650: NEG
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 1
25658: PUSH
25659: LD_INT 0
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 0
25678: PUSH
25679: LD_INT 1
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 1
25688: NEG
25689: PUSH
25690: LD_INT 0
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 1
25699: NEG
25700: PUSH
25701: LD_INT 1
25703: NEG
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 1
25711: NEG
25712: PUSH
25713: LD_INT 2
25715: NEG
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: LD_INT 2
25726: NEG
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 1
25734: PUSH
25735: LD_INT 1
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: LD_INT 2
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: LD_INT 2
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 1
25765: NEG
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 1
25776: PUSH
25777: LD_INT 3
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 0
25786: PUSH
25787: LD_INT 3
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 1
25796: NEG
25797: PUSH
25798: LD_INT 2
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25823: LD_ADDR_VAR 0 12
25827: PUSH
25828: LD_INT 0
25830: PUSH
25831: LD_INT 0
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 0
25840: PUSH
25841: LD_INT 1
25843: NEG
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 1
25851: PUSH
25852: LD_INT 0
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 1
25861: PUSH
25862: LD_INT 1
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: LD_INT 1
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 1
25881: NEG
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 1
25892: NEG
25893: PUSH
25894: LD_INT 1
25896: NEG
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 2
25915: PUSH
25916: LD_INT 0
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 2
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 1
25935: NEG
25936: PUSH
25937: LD_INT 1
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 2
25946: NEG
25947: PUSH
25948: LD_INT 0
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 2
25957: NEG
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 2
25969: NEG
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 3
25980: NEG
25981: PUSH
25982: LD_INT 0
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 3
25991: NEG
25992: PUSH
25993: LD_INT 1
25995: NEG
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26019: LD_ADDR_VAR 0 13
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: LD_INT 0
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 0
26036: PUSH
26037: LD_INT 1
26039: NEG
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 1
26047: PUSH
26048: LD_INT 0
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: LD_INT 1
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: LD_INT 1
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 1
26077: NEG
26078: PUSH
26079: LD_INT 0
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 1
26088: NEG
26089: PUSH
26090: LD_INT 1
26092: NEG
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 1
26100: NEG
26101: PUSH
26102: LD_INT 2
26104: NEG
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 2
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 2
26122: PUSH
26123: LD_INT 2
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 1
26132: PUSH
26133: LD_INT 2
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 2
26142: NEG
26143: PUSH
26144: LD_INT 1
26146: NEG
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 2
26154: NEG
26155: PUSH
26156: LD_INT 2
26158: NEG
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 2
26166: NEG
26167: PUSH
26168: LD_INT 3
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 3
26178: NEG
26179: PUSH
26180: LD_INT 2
26182: NEG
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 3
26190: NEG
26191: PUSH
26192: LD_INT 3
26194: NEG
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26218: LD_ADDR_VAR 0 14
26222: PUSH
26223: LD_INT 0
26225: PUSH
26226: LD_INT 0
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: LD_INT 1
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: PUSH
26247: LD_INT 0
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 1
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 1
26276: NEG
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: LD_INT 1
26291: NEG
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 1
26299: NEG
26300: PUSH
26301: LD_INT 2
26303: NEG
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 0
26311: PUSH
26312: LD_INT 2
26314: NEG
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 1
26333: PUSH
26334: LD_INT 2
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: LD_INT 2
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 1
26353: NEG
26354: PUSH
26355: LD_INT 1
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 1
26364: NEG
26365: PUSH
26366: LD_INT 3
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: LD_INT 3
26379: NEG
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 1
26387: PUSH
26388: LD_INT 2
26390: NEG
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26414: LD_ADDR_VAR 0 15
26418: PUSH
26419: LD_INT 0
26421: PUSH
26422: LD_INT 0
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 0
26431: PUSH
26432: LD_INT 1
26434: NEG
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 1
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 1
26452: PUSH
26453: LD_INT 1
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 0
26462: PUSH
26463: LD_INT 1
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 1
26472: NEG
26473: PUSH
26474: LD_INT 0
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: LD_INT 1
26498: NEG
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 2
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 1
26526: NEG
26527: PUSH
26528: LD_INT 1
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: NEG
26538: PUSH
26539: LD_INT 0
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 2
26548: NEG
26549: PUSH
26550: LD_INT 1
26552: NEG
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 2
26560: PUSH
26561: LD_INT 1
26563: NEG
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 3
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 3
26581: PUSH
26582: LD_INT 1
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26607: LD_ADDR_VAR 0 16
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: LD_INT 0
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 0
26624: PUSH
26625: LD_INT 1
26627: NEG
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 1
26645: PUSH
26646: LD_INT 1
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: LD_INT 1
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 1
26665: NEG
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PUSH
26678: LD_INT 1
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 1
26688: NEG
26689: PUSH
26690: LD_INT 2
26692: NEG
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 2
26700: PUSH
26701: LD_INT 1
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 2
26710: PUSH
26711: LD_INT 2
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 1
26720: PUSH
26721: LD_INT 2
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 2
26730: NEG
26731: PUSH
26732: LD_INT 1
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 2
26742: NEG
26743: PUSH
26744: LD_INT 2
26746: NEG
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 3
26754: PUSH
26755: LD_INT 2
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 3
26764: PUSH
26765: LD_INT 3
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 2
26774: PUSH
26775: LD_INT 3
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26800: LD_ADDR_VAR 0 17
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 0
26817: PUSH
26818: LD_INT 1
26820: NEG
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: LD_INT 0
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 0
26848: PUSH
26849: LD_INT 1
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 1
26858: NEG
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 1
26869: NEG
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: LD_INT 2
26885: NEG
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 0
26893: PUSH
26894: LD_INT 2
26896: NEG
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: LD_INT 1
26907: NEG
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: LD_INT 0
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 2
26925: PUSH
26926: LD_INT 1
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 2
26935: PUSH
26936: LD_INT 2
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: LD_INT 2
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 0
26955: PUSH
26956: LD_INT 2
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 1
26965: NEG
26966: PUSH
26967: LD_INT 1
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 2
26976: NEG
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 2
26987: NEG
26988: PUSH
26989: LD_INT 1
26991: NEG
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 2
26999: NEG
27000: PUSH
27001: LD_INT 2
27003: NEG
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27030: LD_ADDR_VAR 0 18
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: LD_INT 1
27050: NEG
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 1
27058: PUSH
27059: LD_INT 0
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 1
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 0
27078: PUSH
27079: LD_INT 1
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 1
27088: NEG
27089: PUSH
27090: LD_INT 0
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 1
27099: NEG
27100: PUSH
27101: LD_INT 1
27103: NEG
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 1
27111: NEG
27112: PUSH
27113: LD_INT 2
27115: NEG
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 0
27123: PUSH
27124: LD_INT 2
27126: NEG
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: PUSH
27135: LD_INT 1
27137: NEG
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 2
27145: PUSH
27146: LD_INT 0
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 2
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 2
27165: PUSH
27166: LD_INT 2
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 1
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: LD_INT 2
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: NEG
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 2
27206: NEG
27207: PUSH
27208: LD_INT 0
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 2
27217: NEG
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 2
27229: NEG
27230: PUSH
27231: LD_INT 2
27233: NEG
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27260: LD_ADDR_VAR 0 19
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 0
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 0
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 1
27318: NEG
27319: PUSH
27320: LD_INT 0
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 1
27329: NEG
27330: PUSH
27331: LD_INT 1
27333: NEG
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 1
27341: NEG
27342: PUSH
27343: LD_INT 2
27345: NEG
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 0
27353: PUSH
27354: LD_INT 2
27356: NEG
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: LD_INT 1
27367: NEG
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 2
27375: PUSH
27376: LD_INT 0
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 2
27385: PUSH
27386: LD_INT 1
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 2
27395: PUSH
27396: LD_INT 2
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 1
27405: PUSH
27406: LD_INT 2
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: LD_INT 2
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 1
27425: NEG
27426: PUSH
27427: LD_INT 1
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 2
27436: NEG
27437: PUSH
27438: LD_INT 0
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 2
27447: NEG
27448: PUSH
27449: LD_INT 1
27451: NEG
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 2
27459: NEG
27460: PUSH
27461: LD_INT 2
27463: NEG
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27490: LD_ADDR_VAR 0 20
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 0
27507: PUSH
27508: LD_INT 1
27510: NEG
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 1
27518: PUSH
27519: LD_INT 0
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 1
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 0
27538: PUSH
27539: LD_INT 1
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 1
27548: NEG
27549: PUSH
27550: LD_INT 0
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 1
27559: NEG
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 1
27571: NEG
27572: PUSH
27573: LD_INT 2
27575: NEG
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 0
27583: PUSH
27584: LD_INT 2
27586: NEG
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: LD_INT 1
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 2
27605: PUSH
27606: LD_INT 0
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: LD_INT 1
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 2
27625: PUSH
27626: LD_INT 2
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 1
27635: PUSH
27636: LD_INT 2
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: LD_INT 2
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 1
27655: NEG
27656: PUSH
27657: LD_INT 1
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 2
27666: NEG
27667: PUSH
27668: LD_INT 0
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 2
27677: NEG
27678: PUSH
27679: LD_INT 1
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 2
27689: NEG
27690: PUSH
27691: LD_INT 2
27693: NEG
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27720: LD_ADDR_VAR 0 21
27724: PUSH
27725: LD_INT 0
27727: PUSH
27728: LD_INT 0
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 0
27737: PUSH
27738: LD_INT 1
27740: NEG
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: LD_INT 0
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 1
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: LD_INT 1
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: NEG
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: LD_INT 1
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: LD_INT 2
27805: NEG
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: LD_INT 2
27816: NEG
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 1
27824: PUSH
27825: LD_INT 1
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: PUSH
27836: LD_INT 0
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 2
27845: PUSH
27846: LD_INT 1
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: LD_INT 2
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: LD_INT 2
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 0
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: NEG
27886: PUSH
27887: LD_INT 1
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 2
27896: NEG
27897: PUSH
27898: LD_INT 0
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 2
27907: NEG
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 2
27919: NEG
27920: PUSH
27921: LD_INT 2
27923: NEG
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27950: LD_ADDR_VAR 0 22
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: LD_INT 0
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 0
27967: PUSH
27968: LD_INT 1
27970: NEG
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 1
27978: PUSH
27979: LD_INT 0
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: LD_INT 1
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 0
27998: PUSH
27999: LD_INT 1
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 1
28008: NEG
28009: PUSH
28010: LD_INT 0
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 1
28019: NEG
28020: PUSH
28021: LD_INT 1
28023: NEG
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 1
28031: NEG
28032: PUSH
28033: LD_INT 2
28035: NEG
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 0
28043: PUSH
28044: LD_INT 2
28046: NEG
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: LD_INT 1
28057: NEG
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 2
28065: PUSH
28066: LD_INT 0
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: LD_INT 1
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 0
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: LD_INT 1
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 2
28126: NEG
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 2
28137: NEG
28138: PUSH
28139: LD_INT 1
28141: NEG
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 2
28149: NEG
28150: PUSH
28151: LD_INT 2
28153: NEG
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28180: LD_ADDR_VAR 0 23
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: LD_INT 0
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 0
28197: PUSH
28198: LD_INT 1
28200: NEG
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 0
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 1
28238: NEG
28239: PUSH
28240: LD_INT 0
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 1
28249: NEG
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 1
28261: NEG
28262: PUSH
28263: LD_INT 2
28265: NEG
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: LD_INT 2
28276: NEG
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 1
28284: PUSH
28285: LD_INT 1
28287: NEG
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 2
28295: PUSH
28296: LD_INT 0
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 2
28305: PUSH
28306: LD_INT 1
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 2
28315: PUSH
28316: LD_INT 2
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 1
28325: PUSH
28326: LD_INT 2
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 0
28335: PUSH
28336: LD_INT 2
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: LD_INT 1
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 2
28356: NEG
28357: PUSH
28358: LD_INT 0
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 2
28367: NEG
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 2
28379: NEG
28380: PUSH
28381: LD_INT 2
28383: NEG
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 2
28391: NEG
28392: PUSH
28393: LD_INT 3
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 1
28403: NEG
28404: PUSH
28405: LD_INT 3
28407: NEG
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: LD_INT 2
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: LD_INT 1
28429: NEG
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28460: LD_ADDR_VAR 0 24
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: LD_INT 0
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 0
28477: PUSH
28478: LD_INT 1
28480: NEG
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 1
28498: PUSH
28499: LD_INT 1
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 0
28508: PUSH
28509: LD_INT 1
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 1
28518: NEG
28519: PUSH
28520: LD_INT 0
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 1
28529: NEG
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: LD_INT 2
28545: NEG
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 0
28553: PUSH
28554: LD_INT 2
28556: NEG
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 1
28564: PUSH
28565: LD_INT 1
28567: NEG
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 2
28575: PUSH
28576: LD_INT 0
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 2
28585: PUSH
28586: LD_INT 1
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 2
28595: PUSH
28596: LD_INT 2
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 1
28605: PUSH
28606: LD_INT 2
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 0
28615: PUSH
28616: LD_INT 2
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: PUSH
28627: LD_INT 1
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 2
28636: NEG
28637: PUSH
28638: LD_INT 0
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 2
28647: NEG
28648: PUSH
28649: LD_INT 1
28651: NEG
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 2
28659: NEG
28660: PUSH
28661: LD_INT 2
28663: NEG
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 1
28671: PUSH
28672: LD_INT 2
28674: NEG
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 2
28682: PUSH
28683: LD_INT 1
28685: NEG
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 3
28693: PUSH
28694: LD_INT 1
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 3
28703: PUSH
28704: LD_INT 2
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28736: LD_ADDR_VAR 0 25
28740: PUSH
28741: LD_INT 0
28743: PUSH
28744: LD_INT 0
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 0
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 1
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 1
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 0
28784: PUSH
28785: LD_INT 1
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: LD_INT 0
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: LD_INT 1
28809: NEG
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 1
28817: NEG
28818: PUSH
28819: LD_INT 2
28821: NEG
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 0
28829: PUSH
28830: LD_INT 2
28832: NEG
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 1
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 2
28851: PUSH
28852: LD_INT 0
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 2
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 2
28871: PUSH
28872: LD_INT 2
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: LD_INT 2
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: LD_INT 2
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 1
28901: NEG
28902: PUSH
28903: LD_INT 1
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 2
28912: NEG
28913: PUSH
28914: LD_INT 0
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 2
28923: NEG
28924: PUSH
28925: LD_INT 1
28927: NEG
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 2
28935: NEG
28936: PUSH
28937: LD_INT 2
28939: NEG
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 3
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 3
28957: PUSH
28958: LD_INT 2
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 2
28967: PUSH
28968: LD_INT 3
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 1
28977: PUSH
28978: LD_INT 3
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29010: LD_ADDR_VAR 0 26
29014: PUSH
29015: LD_INT 0
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 0
29027: PUSH
29028: LD_INT 1
29030: NEG
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 1
29038: PUSH
29039: LD_INT 0
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 1
29048: PUSH
29049: LD_INT 1
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 0
29058: PUSH
29059: LD_INT 1
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 1
29068: NEG
29069: PUSH
29070: LD_INT 0
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 1
29079: NEG
29080: PUSH
29081: LD_INT 1
29083: NEG
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 1
29091: NEG
29092: PUSH
29093: LD_INT 2
29095: NEG
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: LD_INT 2
29106: NEG
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 1
29114: PUSH
29115: LD_INT 1
29117: NEG
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 2
29125: PUSH
29126: LD_INT 0
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 2
29135: PUSH
29136: LD_INT 1
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 2
29145: PUSH
29146: LD_INT 2
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 1
29155: PUSH
29156: LD_INT 2
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: LD_INT 2
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 1
29175: NEG
29176: PUSH
29177: LD_INT 1
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 2
29186: NEG
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 2
29197: NEG
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 2
29209: NEG
29210: PUSH
29211: LD_INT 2
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 2
29221: PUSH
29222: LD_INT 3
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 1
29231: PUSH
29232: LD_INT 3
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 1
29241: NEG
29242: PUSH
29243: LD_INT 2
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 2
29252: NEG
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29286: LD_ADDR_VAR 0 27
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: LD_INT 0
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 0
29303: PUSH
29304: LD_INT 1
29306: NEG
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 1
29314: PUSH
29315: LD_INT 0
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 1
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 0
29334: PUSH
29335: LD_INT 1
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 1
29344: NEG
29345: PUSH
29346: LD_INT 0
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 1
29355: NEG
29356: PUSH
29357: LD_INT 1
29359: NEG
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 1
29367: NEG
29368: PUSH
29369: LD_INT 2
29371: NEG
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 0
29379: PUSH
29380: LD_INT 2
29382: NEG
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 1
29390: PUSH
29391: LD_INT 1
29393: NEG
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 2
29401: PUSH
29402: LD_INT 0
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 2
29411: PUSH
29412: LD_INT 1
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 2
29421: PUSH
29422: LD_INT 2
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: LD_INT 2
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 0
29441: PUSH
29442: LD_INT 2
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 1
29451: NEG
29452: PUSH
29453: LD_INT 1
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 2
29462: NEG
29463: PUSH
29464: LD_INT 0
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 2
29473: NEG
29474: PUSH
29475: LD_INT 1
29477: NEG
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 2
29485: NEG
29486: PUSH
29487: LD_INT 2
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 1
29497: NEG
29498: PUSH
29499: LD_INT 2
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 2
29508: NEG
29509: PUSH
29510: LD_INT 1
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 3
29519: NEG
29520: PUSH
29521: LD_INT 1
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 3
29531: NEG
29532: PUSH
29533: LD_INT 2
29535: NEG
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29566: LD_ADDR_VAR 0 28
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: LD_INT 0
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 0
29583: PUSH
29584: LD_INT 1
29586: NEG
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: LD_INT 0
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 1
29604: PUSH
29605: LD_INT 1
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 0
29614: PUSH
29615: LD_INT 1
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 1
29624: NEG
29625: PUSH
29626: LD_INT 0
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: NEG
29636: PUSH
29637: LD_INT 1
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 1
29647: NEG
29648: PUSH
29649: LD_INT 2
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 0
29659: PUSH
29660: LD_INT 2
29662: NEG
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 1
29670: PUSH
29671: LD_INT 1
29673: NEG
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 2
29681: PUSH
29682: LD_INT 0
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 2
29691: PUSH
29692: LD_INT 1
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 2
29701: PUSH
29702: LD_INT 2
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 1
29711: PUSH
29712: LD_INT 2
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 0
29721: PUSH
29722: LD_INT 2
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 1
29731: NEG
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 2
29742: NEG
29743: PUSH
29744: LD_INT 0
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 2
29753: NEG
29754: PUSH
29755: LD_INT 1
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 2
29765: NEG
29766: PUSH
29767: LD_INT 2
29769: NEG
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 2
29777: NEG
29778: PUSH
29779: LD_INT 3
29781: NEG
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 1
29789: NEG
29790: PUSH
29791: LD_INT 3
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 3
29801: NEG
29802: PUSH
29803: LD_INT 1
29805: NEG
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 3
29813: NEG
29814: PUSH
29815: LD_INT 2
29817: NEG
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29848: LD_ADDR_VAR 0 29
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: LD_INT 1
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 0
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 1
29906: NEG
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 1
29917: NEG
29918: PUSH
29919: LD_INT 1
29921: NEG
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: NEG
29930: PUSH
29931: LD_INT 2
29933: NEG
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 0
29941: PUSH
29942: LD_INT 2
29944: NEG
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: LD_INT 1
29955: NEG
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 2
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 2
29973: PUSH
29974: LD_INT 1
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: PUSH
29984: LD_INT 2
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: LD_INT 2
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 1
30003: NEG
30004: PUSH
30005: LD_INT 1
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 2
30014: NEG
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 2
30026: NEG
30027: PUSH
30028: LD_INT 2
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 2
30038: NEG
30039: PUSH
30040: LD_INT 3
30042: NEG
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 2
30050: PUSH
30051: LD_INT 1
30053: NEG
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 3
30061: PUSH
30062: LD_INT 1
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 1
30071: PUSH
30072: LD_INT 3
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 1
30081: NEG
30082: PUSH
30083: LD_INT 2
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 3
30092: NEG
30093: PUSH
30094: LD_INT 2
30096: NEG
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30127: LD_ADDR_VAR 0 30
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 0
30144: PUSH
30145: LD_INT 1
30147: NEG
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 1
30155: PUSH
30156: LD_INT 0
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 1
30165: PUSH
30166: LD_INT 1
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 0
30175: PUSH
30176: LD_INT 1
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 1
30185: NEG
30186: PUSH
30187: LD_INT 0
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 1
30196: NEG
30197: PUSH
30198: LD_INT 1
30200: NEG
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 1
30208: NEG
30209: PUSH
30210: LD_INT 2
30212: NEG
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 0
30220: PUSH
30221: LD_INT 2
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 1
30231: PUSH
30232: LD_INT 1
30234: NEG
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 2
30242: PUSH
30243: LD_INT 0
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 2
30252: PUSH
30253: LD_INT 1
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 2
30262: PUSH
30263: LD_INT 2
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: LD_INT 2
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 1
30282: NEG
30283: PUSH
30284: LD_INT 1
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 2
30293: NEG
30294: PUSH
30295: LD_INT 0
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 2
30304: NEG
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 1
30316: NEG
30317: PUSH
30318: LD_INT 3
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 1
30328: PUSH
30329: LD_INT 2
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: LD_INT 2
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 2
30349: PUSH
30350: LD_INT 3
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 2
30359: NEG
30360: PUSH
30361: LD_INT 1
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 3
30370: NEG
30371: PUSH
30372: LD_INT 1
30374: NEG
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30405: LD_ADDR_VAR 0 31
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: LD_INT 0
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 1
30433: PUSH
30434: LD_INT 0
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 1
30443: PUSH
30444: LD_INT 1
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: LD_INT 1
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 1
30463: NEG
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 1
30474: NEG
30475: PUSH
30476: LD_INT 1
30478: NEG
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 1
30486: NEG
30487: PUSH
30488: LD_INT 2
30490: NEG
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 1
30498: PUSH
30499: LD_INT 1
30501: NEG
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 2
30509: PUSH
30510: LD_INT 0
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 2
30519: PUSH
30520: LD_INT 1
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 2
30529: PUSH
30530: LD_INT 2
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 1
30539: PUSH
30540: LD_INT 2
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: LD_INT 2
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 1
30559: NEG
30560: PUSH
30561: LD_INT 1
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 2
30570: NEG
30571: PUSH
30572: LD_INT 1
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 2
30582: NEG
30583: PUSH
30584: LD_INT 2
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 2
30594: NEG
30595: PUSH
30596: LD_INT 3
30598: NEG
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 2
30606: PUSH
30607: LD_INT 1
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 3
30617: PUSH
30618: LD_INT 1
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 1
30627: PUSH
30628: LD_INT 3
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 1
30637: NEG
30638: PUSH
30639: LD_INT 2
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 3
30648: NEG
30649: PUSH
30650: LD_INT 2
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30683: LD_ADDR_VAR 0 32
30687: PUSH
30688: LD_INT 0
30690: PUSH
30691: LD_INT 0
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 0
30700: PUSH
30701: LD_INT 1
30703: NEG
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 1
30711: PUSH
30712: LD_INT 0
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 1
30721: PUSH
30722: LD_INT 1
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: LD_INT 0
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 1
30752: NEG
30753: PUSH
30754: LD_INT 1
30756: NEG
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 1
30764: NEG
30765: PUSH
30766: LD_INT 2
30768: NEG
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 0
30776: PUSH
30777: LD_INT 2
30779: NEG
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 1
30787: PUSH
30788: LD_INT 1
30790: NEG
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 2
30798: PUSH
30799: LD_INT 1
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 2
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: LD_INT 2
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: LD_INT 2
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 1
30838: NEG
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 2
30849: NEG
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 2
30860: NEG
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 1
30872: NEG
30873: PUSH
30874: LD_INT 3
30876: NEG
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 1
30884: PUSH
30885: LD_INT 2
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 3
30895: PUSH
30896: LD_INT 2
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 2
30905: PUSH
30906: LD_INT 3
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 2
30915: NEG
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 3
30926: NEG
30927: PUSH
30928: LD_INT 1
30930: NEG
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30961: LD_ADDR_VAR 0 33
30965: PUSH
30966: LD_INT 0
30968: PUSH
30969: LD_INT 0
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 0
30978: PUSH
30979: LD_INT 1
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 1
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: PUSH
31000: LD_INT 1
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 0
31009: PUSH
31010: LD_INT 1
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 1
31019: NEG
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 1
31042: NEG
31043: PUSH
31044: LD_INT 2
31046: NEG
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: LD_INT 1
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 2
31065: PUSH
31066: LD_INT 0
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 2
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 1
31085: PUSH
31086: LD_INT 2
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: LD_INT 2
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 1
31105: NEG
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 2
31116: NEG
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 2
31127: NEG
31128: PUSH
31129: LD_INT 1
31131: NEG
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 2
31139: NEG
31140: PUSH
31141: LD_INT 2
31143: NEG
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 2
31151: NEG
31152: PUSH
31153: LD_INT 3
31155: NEG
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 2
31163: PUSH
31164: LD_INT 1
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 3
31174: PUSH
31175: LD_INT 1
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 1
31184: PUSH
31185: LD_INT 3
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 1
31194: NEG
31195: PUSH
31196: LD_INT 2
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 3
31205: NEG
31206: PUSH
31207: LD_INT 2
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31240: LD_ADDR_VAR 0 34
31244: PUSH
31245: LD_INT 0
31247: PUSH
31248: LD_INT 0
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 0
31257: PUSH
31258: LD_INT 1
31260: NEG
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: LD_INT 0
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 1
31278: PUSH
31279: LD_INT 1
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 0
31288: PUSH
31289: LD_INT 1
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 1
31298: NEG
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: NEG
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 1
31321: NEG
31322: PUSH
31323: LD_INT 2
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: LD_INT 2
31336: NEG
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 1
31344: PUSH
31345: LD_INT 1
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 2
31355: PUSH
31356: LD_INT 1
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 2
31365: PUSH
31366: LD_INT 2
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 1
31375: PUSH
31376: LD_INT 2
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: LD_INT 1
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 2
31396: NEG
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 2
31407: NEG
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 2
31419: NEG
31420: PUSH
31421: LD_INT 2
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: PUSH
31433: LD_INT 3
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 1
31443: PUSH
31444: LD_INT 2
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 3
31454: PUSH
31455: LD_INT 2
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 2
31464: PUSH
31465: LD_INT 3
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 2
31474: NEG
31475: PUSH
31476: LD_INT 1
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 3
31485: NEG
31486: PUSH
31487: LD_INT 1
31489: NEG
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31520: LD_ADDR_VAR 0 35
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: LD_INT 0
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: LD_INT 1
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 1
31578: NEG
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: LD_INT 1
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: LD_INT 1
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 2
31611: NEG
31612: PUSH
31613: LD_INT 1
31615: NEG
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31632: LD_ADDR_VAR 0 36
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: LD_INT 0
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 0
31649: PUSH
31650: LD_INT 1
31652: NEG
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: LD_INT 0
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: LD_INT 1
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 0
31680: PUSH
31681: LD_INT 1
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 1
31690: NEG
31691: PUSH
31692: LD_INT 0
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 1
31701: NEG
31702: PUSH
31703: LD_INT 1
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: LD_INT 2
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 1
31725: PUSH
31726: LD_INT 2
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31744: LD_ADDR_VAR 0 37
31748: PUSH
31749: LD_INT 0
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: LD_INT 0
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: LD_INT 1
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 1
31802: NEG
31803: PUSH
31804: LD_INT 0
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 1
31813: NEG
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 1
31825: PUSH
31826: LD_INT 1
31828: NEG
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 1
31836: NEG
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31856: LD_ADDR_VAR 0 38
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: LD_INT 0
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: LD_INT 1
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 1
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 1
31894: PUSH
31895: LD_INT 1
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 0
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 1
31914: NEG
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 1
31925: NEG
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 2
31937: PUSH
31938: LD_INT 1
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 2
31947: NEG
31948: PUSH
31949: LD_INT 1
31951: NEG
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31968: LD_ADDR_VAR 0 39
31972: PUSH
31973: LD_INT 0
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: LD_INT 1
31988: NEG
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: LD_INT 0
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: LD_INT 1
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 0
32016: PUSH
32017: LD_INT 1
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 1
32026: NEG
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 1
32037: NEG
32038: PUSH
32039: LD_INT 1
32041: NEG
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 1
32049: NEG
32050: PUSH
32051: LD_INT 2
32053: NEG
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 1
32061: PUSH
32062: LD_INT 2
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32080: LD_ADDR_VAR 0 40
32084: PUSH
32085: LD_INT 0
32087: PUSH
32088: LD_INT 0
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 0
32097: PUSH
32098: LD_INT 1
32100: NEG
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 1
32108: PUSH
32109: LD_INT 0
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 1
32118: PUSH
32119: LD_INT 1
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 0
32128: PUSH
32129: LD_INT 1
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 1
32138: NEG
32139: PUSH
32140: LD_INT 0
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 1
32149: NEG
32150: PUSH
32151: LD_INT 1
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 1
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 1
32172: NEG
32173: PUSH
32174: LD_INT 1
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32192: LD_ADDR_VAR 0 41
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: PUSH
32221: LD_INT 0
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: LD_INT 1
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 1
32250: NEG
32251: PUSH
32252: LD_INT 0
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 1
32273: NEG
32274: PUSH
32275: LD_INT 2
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: LD_INT 1
32288: NEG
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 2
32296: PUSH
32297: LD_INT 0
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 2
32306: PUSH
32307: LD_INT 1
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 2
32316: PUSH
32317: LD_INT 2
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: LD_INT 2
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 1
32336: NEG
32337: PUSH
32338: LD_INT 1
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 2
32347: NEG
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 2
32358: NEG
32359: PUSH
32360: LD_INT 1
32362: NEG
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 2
32370: NEG
32371: PUSH
32372: LD_INT 2
32374: NEG
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 2
32382: NEG
32383: PUSH
32384: LD_INT 3
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 2
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 3
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 3
32415: PUSH
32416: LD_INT 1
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 3
32425: PUSH
32426: LD_INT 2
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 3
32435: PUSH
32436: LD_INT 3
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 2
32445: PUSH
32446: LD_INT 3
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 2
32455: NEG
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 3
32466: NEG
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 3
32477: NEG
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 3
32489: NEG
32490: PUSH
32491: LD_INT 2
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 3
32501: NEG
32502: PUSH
32503: LD_INT 3
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32542: LD_ADDR_VAR 0 42
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: LD_INT 0
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 0
32559: PUSH
32560: LD_INT 1
32562: NEG
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: LD_INT 0
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 1
32580: PUSH
32581: LD_INT 1
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 0
32590: PUSH
32591: LD_INT 1
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: NEG
32601: PUSH
32602: LD_INT 0
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 1
32611: NEG
32612: PUSH
32613: LD_INT 1
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 1
32623: NEG
32624: PUSH
32625: LD_INT 2
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 0
32635: PUSH
32636: LD_INT 2
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: LD_INT 1
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: LD_INT 1
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 2
32667: PUSH
32668: LD_INT 2
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 1
32677: PUSH
32678: LD_INT 2
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: LD_INT 2
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: LD_INT 1
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 2
32708: NEG
32709: PUSH
32710: LD_INT 1
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 2
32720: NEG
32721: PUSH
32722: LD_INT 2
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 2
32732: NEG
32733: PUSH
32734: LD_INT 3
32736: NEG
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 1
32744: NEG
32745: PUSH
32746: LD_INT 3
32748: NEG
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 0
32756: PUSH
32757: LD_INT 3
32759: NEG
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 1
32767: PUSH
32768: LD_INT 2
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 3
32778: PUSH
32779: LD_INT 2
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 3
32788: PUSH
32789: LD_INT 3
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 2
32798: PUSH
32799: LD_INT 3
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 1
32808: PUSH
32809: LD_INT 3
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: LD_INT 3
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 1
32828: NEG
32829: PUSH
32830: LD_INT 2
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 3
32839: NEG
32840: PUSH
32841: LD_INT 2
32843: NEG
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 3
32851: NEG
32852: PUSH
32853: LD_INT 3
32855: NEG
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32892: LD_ADDR_VAR 0 43
32896: PUSH
32897: LD_INT 0
32899: PUSH
32900: LD_INT 0
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: LD_INT 1
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: LD_INT 1
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 0
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 1
32950: NEG
32951: PUSH
32952: LD_INT 0
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 1
32961: NEG
32962: PUSH
32963: LD_INT 1
32965: NEG
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 1
32973: NEG
32974: PUSH
32975: LD_INT 2
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: LD_INT 2
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 2
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 2
33017: PUSH
33018: LD_INT 1
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: LD_INT 2
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: LD_INT 1
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 2
33058: NEG
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 2
33069: NEG
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 1
33081: NEG
33082: PUSH
33083: LD_INT 3
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 0
33093: PUSH
33094: LD_INT 3
33096: NEG
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: LD_INT 2
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 2
33115: PUSH
33116: LD_INT 1
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 3
33126: PUSH
33127: LD_INT 0
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 3
33136: PUSH
33137: LD_INT 1
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: PUSH
33147: LD_INT 3
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: LD_INT 3
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 1
33166: NEG
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 2
33177: NEG
33178: PUSH
33179: LD_INT 1
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 3
33188: NEG
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 3
33199: NEG
33200: PUSH
33201: LD_INT 1
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33240: LD_ADDR_VAR 0 44
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: LD_INT 0
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: LD_INT 1
33260: NEG
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 1
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 0
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 1
33298: NEG
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: LD_INT 2
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 1
33333: PUSH
33334: LD_INT 1
33336: NEG
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 2
33344: PUSH
33345: LD_INT 0
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 2
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 2
33364: PUSH
33365: LD_INT 2
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 1
33374: PUSH
33375: LD_INT 2
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 1
33384: NEG
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: NEG
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 2
33406: NEG
33407: PUSH
33408: LD_INT 1
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 2
33418: NEG
33419: PUSH
33420: LD_INT 2
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 2
33430: NEG
33431: PUSH
33432: LD_INT 3
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 2
33442: PUSH
33443: LD_INT 1
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 3
33453: PUSH
33454: LD_INT 0
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 3
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: LD_INT 2
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 3
33483: PUSH
33484: LD_INT 3
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 2
33493: PUSH
33494: LD_INT 3
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 2
33503: NEG
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 3
33514: NEG
33515: PUSH
33516: LD_INT 0
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 3
33525: NEG
33526: PUSH
33527: LD_INT 1
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 3
33537: NEG
33538: PUSH
33539: LD_INT 2
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 3
33549: NEG
33550: PUSH
33551: LD_INT 3
33553: NEG
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33590: LD_ADDR_VAR 0 45
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: LD_INT 1
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 1
33628: PUSH
33629: LD_INT 1
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: LD_INT 1
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 1
33648: NEG
33649: PUSH
33650: LD_INT 0
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: NEG
33660: PUSH
33661: LD_INT 1
33663: NEG
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 1
33671: NEG
33672: PUSH
33673: LD_INT 2
33675: NEG
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 0
33683: PUSH
33684: LD_INT 2
33686: NEG
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: LD_INT 1
33697: NEG
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 2
33705: PUSH
33706: LD_INT 1
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 2
33715: PUSH
33716: LD_INT 2
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 1
33725: PUSH
33726: LD_INT 2
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 0
33735: PUSH
33736: LD_INT 2
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 1
33745: NEG
33746: PUSH
33747: LD_INT 1
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 2
33756: NEG
33757: PUSH
33758: LD_INT 1
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 2
33768: NEG
33769: PUSH
33770: LD_INT 2
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 2
33780: NEG
33781: PUSH
33782: LD_INT 3
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 1
33792: NEG
33793: PUSH
33794: LD_INT 3
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: LD_INT 3
33807: NEG
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 1
33815: PUSH
33816: LD_INT 2
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 3
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 3
33836: PUSH
33837: LD_INT 3
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 2
33846: PUSH
33847: LD_INT 3
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 1
33856: PUSH
33857: LD_INT 3
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 0
33866: PUSH
33867: LD_INT 3
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 1
33876: NEG
33877: PUSH
33878: LD_INT 2
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 3
33887: NEG
33888: PUSH
33889: LD_INT 2
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 3
33899: NEG
33900: PUSH
33901: LD_INT 3
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33940: LD_ADDR_VAR 0 46
33944: PUSH
33945: LD_INT 0
33947: PUSH
33948: LD_INT 0
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 0
33957: PUSH
33958: LD_INT 1
33960: NEG
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 1
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 1
33978: PUSH
33979: LD_INT 1
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 0
33988: PUSH
33989: LD_INT 1
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 1
33998: NEG
33999: PUSH
34000: LD_INT 0
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 1
34009: NEG
34010: PUSH
34011: LD_INT 1
34013: NEG
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 1
34021: NEG
34022: PUSH
34023: LD_INT 2
34025: NEG
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 0
34033: PUSH
34034: LD_INT 2
34036: NEG
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: LD_INT 1
34047: NEG
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 2
34055: PUSH
34056: LD_INT 0
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 2
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 1
34075: PUSH
34076: LD_INT 2
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 0
34085: PUSH
34086: LD_INT 2
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 1
34095: NEG
34096: PUSH
34097: LD_INT 1
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 2
34106: NEG
34107: PUSH
34108: LD_INT 0
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 2
34117: NEG
34118: PUSH
34119: LD_INT 1
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: LD_INT 3
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: LD_INT 3
34144: NEG
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: LD_INT 2
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: LD_INT 1
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 3
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 3
34184: PUSH
34185: LD_INT 1
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: LD_INT 3
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: LD_INT 3
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 1
34214: NEG
34215: PUSH
34216: LD_INT 2
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: NEG
34226: PUSH
34227: LD_INT 1
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 3
34236: NEG
34237: PUSH
34238: LD_INT 0
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 3
34247: NEG
34248: PUSH
34249: LD_INT 1
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34288: LD_ADDR_VAR 0 47
34292: PUSH
34293: LD_INT 0
34295: PUSH
34296: LD_INT 0
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: LD_INT 1
34308: NEG
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 1
34316: PUSH
34317: LD_INT 0
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 1
34326: PUSH
34327: LD_INT 1
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: LD_INT 0
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 1
34357: NEG
34358: PUSH
34359: LD_INT 1
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: LD_INT 2
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 0
34381: PUSH
34382: LD_INT 2
34384: NEG
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: LD_INT 1
34395: NEG
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: NEG
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 2
34415: NEG
34416: PUSH
34417: LD_INT 2
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34439: LD_ADDR_VAR 0 48
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: LD_INT 0
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: LD_INT 1
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 1
34467: PUSH
34468: LD_INT 0
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: LD_INT 1
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: LD_INT 1
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: NEG
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: NEG
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: NEG
34521: PUSH
34522: LD_INT 2
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: LD_INT 2
34535: NEG
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34586: LD_ADDR_VAR 0 49
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 0
34603: PUSH
34604: LD_INT 1
34606: NEG
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 1
34624: PUSH
34625: LD_INT 1
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: NEG
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: LD_INT 1
34659: NEG
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: LD_INT 1
34670: NEG
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 2
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: LD_INT 1
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 2
34698: PUSH
34699: LD_INT 2
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 1
34708: PUSH
34709: LD_INT 2
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34730: LD_ADDR_VAR 0 50
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: LD_INT 0
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: LD_INT 1
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 1
34768: PUSH
34769: LD_INT 1
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 0
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 1
34788: NEG
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 1
34799: NEG
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 2
34811: PUSH
34812: LD_INT 1
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 2
34821: PUSH
34822: LD_INT 2
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 1
34831: PUSH
34832: LD_INT 2
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 0
34841: PUSH
34842: LD_INT 2
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 1
34851: NEG
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34874: LD_ADDR_VAR 0 51
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: LD_INT 1
34894: NEG
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 1
34902: PUSH
34903: LD_INT 0
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 1
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 1
34932: NEG
34933: PUSH
34934: LD_INT 0
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 1
34943: NEG
34944: PUSH
34945: LD_INT 1
34947: NEG
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 1
34955: PUSH
34956: LD_INT 2
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 0
34965: PUSH
34966: LD_INT 2
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 1
34975: NEG
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 2
34986: NEG
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 2
34997: NEG
34998: PUSH
34999: LD_INT 1
35001: NEG
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35021: LD_ADDR_VAR 0 52
35025: PUSH
35026: LD_INT 0
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: LD_INT 1
35041: NEG
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: LD_INT 0
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 0
35069: PUSH
35070: LD_INT 1
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 1
35079: NEG
35080: PUSH
35081: LD_INT 0
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 1
35090: NEG
35091: PUSH
35092: LD_INT 1
35094: NEG
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: LD_INT 2
35106: NEG
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: NEG
35115: PUSH
35116: LD_INT 1
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 2
35125: NEG
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 2
35136: NEG
35137: PUSH
35138: LD_INT 1
35140: NEG
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 2
35148: NEG
35149: PUSH
35150: LD_INT 2
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35172: LD_ADDR_VAR 0 53
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: LD_INT 0
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: LD_INT 1
35192: NEG
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: PUSH
35201: LD_INT 0
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: LD_INT 1
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 0
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: NEG
35231: PUSH
35232: LD_INT 0
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 1
35241: NEG
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 1
35253: NEG
35254: PUSH
35255: LD_INT 2
35257: NEG
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 0
35265: PUSH
35266: LD_INT 2
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 1
35276: PUSH
35277: LD_INT 1
35279: NEG
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 2
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 2
35297: PUSH
35298: LD_INT 1
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 2
35307: PUSH
35308: LD_INT 2
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 1
35317: PUSH
35318: LD_INT 2
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 0
35327: PUSH
35328: LD_INT 2
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 1
35337: NEG
35338: PUSH
35339: LD_INT 1
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 2
35348: NEG
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 2
35359: NEG
35360: PUSH
35361: LD_INT 1
35363: NEG
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 2
35371: NEG
35372: PUSH
35373: LD_INT 2
35375: NEG
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35402: LD_ADDR_VAR 0 54
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 0
35419: PUSH
35420: LD_INT 1
35422: NEG
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 1
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: LD_INT 1
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 1
35460: NEG
35461: PUSH
35462: LD_INT 0
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: NEG
35472: PUSH
35473: LD_INT 1
35475: NEG
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: LD_INT 2
35487: NEG
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 0
35495: PUSH
35496: LD_INT 2
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 1
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 2
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 2
35527: PUSH
35528: LD_INT 1
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: LD_INT 2
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 1
35547: PUSH
35548: LD_INT 2
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 0
35557: PUSH
35558: LD_INT 2
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 1
35567: NEG
35568: PUSH
35569: LD_INT 1
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 2
35578: NEG
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 2
35589: NEG
35590: PUSH
35591: LD_INT 1
35593: NEG
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 2
35601: NEG
35602: PUSH
35603: LD_INT 2
35605: NEG
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35632: LD_ADDR_VAR 0 55
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 0
35649: PUSH
35650: LD_INT 1
35652: NEG
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: LD_INT 0
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 0
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 1
35690: NEG
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 1
35701: NEG
35702: PUSH
35703: LD_INT 1
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 1
35713: NEG
35714: PUSH
35715: LD_INT 2
35717: NEG
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: LD_INT 2
35728: NEG
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: LD_INT 1
35739: NEG
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 2
35747: PUSH
35748: LD_INT 0
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: LD_INT 2
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 2
35808: NEG
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 2
35819: NEG
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 2
35831: NEG
35832: PUSH
35833: LD_INT 2
35835: NEG
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35862: LD_ADDR_VAR 0 56
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: LD_INT 0
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: LD_INT 1
35882: NEG
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: NEG
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: LD_INT 2
35947: NEG
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: LD_INT 2
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: LD_INT 1
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 2
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 2
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 2
35997: PUSH
35998: LD_INT 2
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: LD_INT 2
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: LD_INT 2
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 1
36027: NEG
36028: PUSH
36029: LD_INT 1
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 2
36038: NEG
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 2
36049: NEG
36050: PUSH
36051: LD_INT 1
36053: NEG
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 2
36061: NEG
36062: PUSH
36063: LD_INT 2
36065: NEG
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36092: LD_ADDR_VAR 0 57
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 1
36161: NEG
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: LD_INT 2
36177: NEG
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 0
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: LD_INT 1
36199: NEG
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 2
36207: PUSH
36208: LD_INT 0
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 2
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 2
36227: PUSH
36228: LD_INT 2
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: LD_INT 2
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 0
36247: PUSH
36248: LD_INT 2
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: LD_INT 1
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 2
36268: NEG
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 2
36279: NEG
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 2
36291: NEG
36292: PUSH
36293: LD_INT 2
36295: NEG
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36322: LD_ADDR_VAR 0 58
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: LD_INT 0
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 0
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: LD_INT 0
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 1
36380: NEG
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: NEG
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: LD_INT 2
36407: NEG
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: LD_INT 2
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: LD_INT 1
36429: NEG
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 2
36437: PUSH
36438: LD_INT 0
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 2
36447: PUSH
36448: LD_INT 1
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: LD_INT 2
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 0
36477: PUSH
36478: LD_INT 2
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 2
36498: NEG
36499: PUSH
36500: LD_INT 0
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 2
36509: NEG
36510: PUSH
36511: LD_INT 1
36513: NEG
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 2
36521: NEG
36522: PUSH
36523: LD_INT 2
36525: NEG
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36552: LD_ADDR_VAR 0 59
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: LD_INT 0
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 0
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 1
36610: NEG
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 1
36621: NEG
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36640: LD_ADDR_VAR 0 60
36644: PUSH
36645: LD_INT 0
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: LD_INT 1
36660: NEG
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 1
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: LD_INT 1
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 0
36688: PUSH
36689: LD_INT 1
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 1
36698: NEG
36699: PUSH
36700: LD_INT 0
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: LD_INT 1
36713: NEG
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36728: LD_ADDR_VAR 0 61
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 0
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: LD_INT 0
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 1
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: LD_INT 1
36801: NEG
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36816: LD_ADDR_VAR 0 62
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 0
36833: PUSH
36834: LD_INT 1
36836: NEG
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: LD_INT 1
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 0
36864: PUSH
36865: LD_INT 1
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: LD_INT 0
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 1
36885: NEG
36886: PUSH
36887: LD_INT 1
36889: NEG
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36904: LD_ADDR_VAR 0 63
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: LD_INT 0
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 0
36921: PUSH
36922: LD_INT 1
36924: NEG
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 1
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: LD_INT 1
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: LD_INT 1
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PUSH
36964: LD_INT 0
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 1
36973: NEG
36974: PUSH
36975: LD_INT 1
36977: NEG
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36992: LD_ADDR_VAR 0 64
36996: PUSH
36997: LD_INT 0
36999: PUSH
37000: LD_INT 0
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: LD_INT 1
37012: NEG
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 1
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 1
37030: PUSH
37031: LD_INT 1
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: LD_INT 1
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 1
37050: NEG
37051: PUSH
37052: LD_INT 0
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 1
37061: NEG
37062: PUSH
37063: LD_INT 1
37065: NEG
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: ST_TO_ADDR
// end ; 1 :
37080: GO 42977
37082: LD_INT 1
37084: DOUBLE
37085: EQUAL
37086: IFTRUE 37090
37088: GO 39713
37090: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37091: LD_ADDR_VAR 0 11
37095: PUSH
37096: LD_INT 1
37098: NEG
37099: PUSH
37100: LD_INT 3
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: LD_INT 3
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: LD_INT 2
37124: NEG
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: LIST
37134: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37135: LD_ADDR_VAR 0 12
37139: PUSH
37140: LD_INT 2
37142: PUSH
37143: LD_INT 1
37145: NEG
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 3
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 3
37163: PUSH
37164: LD_INT 1
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: LIST
37175: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37176: LD_ADDR_VAR 0 13
37180: PUSH
37181: LD_INT 3
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 3
37193: PUSH
37194: LD_INT 3
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: LD_INT 3
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: LIST
37215: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37216: LD_ADDR_VAR 0 14
37220: PUSH
37221: LD_INT 1
37223: PUSH
37224: LD_INT 3
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: LD_INT 3
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: NEG
37244: PUSH
37245: LD_INT 2
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: LIST
37256: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37257: LD_ADDR_VAR 0 15
37261: PUSH
37262: LD_INT 2
37264: NEG
37265: PUSH
37266: LD_INT 1
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 3
37275: NEG
37276: PUSH
37277: LD_INT 0
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 3
37286: NEG
37287: PUSH
37288: LD_INT 1
37290: NEG
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37301: LD_ADDR_VAR 0 16
37305: PUSH
37306: LD_INT 2
37308: NEG
37309: PUSH
37310: LD_INT 3
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 3
37320: NEG
37321: PUSH
37322: LD_INT 2
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 3
37332: NEG
37333: PUSH
37334: LD_INT 3
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37347: LD_ADDR_VAR 0 17
37351: PUSH
37352: LD_INT 1
37354: NEG
37355: PUSH
37356: LD_INT 3
37358: NEG
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 0
37366: PUSH
37367: LD_INT 3
37369: NEG
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 1
37377: PUSH
37378: LD_INT 2
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: LIST
37390: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37391: LD_ADDR_VAR 0 18
37395: PUSH
37396: LD_INT 2
37398: PUSH
37399: LD_INT 1
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 3
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 3
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: LIST
37431: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37432: LD_ADDR_VAR 0 19
37436: PUSH
37437: LD_INT 3
37439: PUSH
37440: LD_INT 2
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 3
37449: PUSH
37450: LD_INT 3
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 2
37459: PUSH
37460: LD_INT 3
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: LIST
37471: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37472: LD_ADDR_VAR 0 20
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: LD_INT 3
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: LD_INT 3
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 1
37499: NEG
37500: PUSH
37501: LD_INT 2
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: LIST
37512: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37513: LD_ADDR_VAR 0 21
37517: PUSH
37518: LD_INT 2
37520: NEG
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 3
37531: NEG
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 3
37542: NEG
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: LIST
37556: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37557: LD_ADDR_VAR 0 22
37561: PUSH
37562: LD_INT 2
37564: NEG
37565: PUSH
37566: LD_INT 3
37568: NEG
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 3
37576: NEG
37577: PUSH
37578: LD_INT 2
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 3
37588: NEG
37589: PUSH
37590: LD_INT 3
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37603: LD_ADDR_VAR 0 23
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: LD_INT 3
37613: NEG
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 1
37621: NEG
37622: PUSH
37623: LD_INT 4
37625: NEG
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: LD_INT 3
37636: NEG
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: LIST
37646: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37647: LD_ADDR_VAR 0 24
37651: PUSH
37652: LD_INT 3
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 3
37664: PUSH
37665: LD_INT 1
37667: NEG
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 4
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37688: LD_ADDR_VAR 0 25
37692: PUSH
37693: LD_INT 3
37695: PUSH
37696: LD_INT 3
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 4
37705: PUSH
37706: LD_INT 3
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 3
37715: PUSH
37716: LD_INT 4
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: LIST
37727: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37728: LD_ADDR_VAR 0 26
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: LD_INT 3
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: LD_INT 4
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: NEG
37756: PUSH
37757: LD_INT 3
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: LIST
37768: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37769: LD_ADDR_VAR 0 27
37773: PUSH
37774: LD_INT 3
37776: NEG
37777: PUSH
37778: LD_INT 0
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 3
37787: NEG
37788: PUSH
37789: LD_INT 1
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 4
37798: NEG
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: LIST
37812: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37813: LD_ADDR_VAR 0 28
37817: PUSH
37818: LD_INT 3
37820: NEG
37821: PUSH
37822: LD_INT 3
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 3
37832: NEG
37833: PUSH
37834: LD_INT 4
37836: NEG
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 4
37844: NEG
37845: PUSH
37846: LD_INT 3
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: LIST
37858: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37859: LD_ADDR_VAR 0 29
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: LD_INT 3
37870: NEG
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: LD_INT 3
37881: NEG
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: PUSH
37890: LD_INT 2
37892: NEG
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 1
37900: NEG
37901: PUSH
37902: LD_INT 4
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 0
37912: PUSH
37913: LD_INT 4
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: PUSH
37924: LD_INT 3
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 1
37934: NEG
37935: PUSH
37936: LD_INT 5
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 0
37946: PUSH
37947: LD_INT 5
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: LD_INT 4
37960: NEG
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 1
37968: NEG
37969: PUSH
37970: LD_INT 6
37972: NEG
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: LD_INT 6
37983: NEG
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: LD_INT 5
37994: NEG
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38014: LD_ADDR_VAR 0 30
38018: PUSH
38019: LD_INT 2
38021: PUSH
38022: LD_INT 1
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 3
38032: PUSH
38033: LD_INT 0
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 3
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 3
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 4
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 4
38073: PUSH
38074: LD_INT 1
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 4
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 5
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 5
38104: PUSH
38105: LD_INT 1
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 5
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 6
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 6
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38157: LD_ADDR_VAR 0 31
38161: PUSH
38162: LD_INT 3
38164: PUSH
38165: LD_INT 2
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 3
38174: PUSH
38175: LD_INT 3
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 2
38184: PUSH
38185: LD_INT 3
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 4
38194: PUSH
38195: LD_INT 3
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 4
38204: PUSH
38205: LD_INT 4
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 3
38214: PUSH
38215: LD_INT 4
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 5
38224: PUSH
38225: LD_INT 4
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 5
38234: PUSH
38235: LD_INT 5
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 4
38244: PUSH
38245: LD_INT 5
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 6
38254: PUSH
38255: LD_INT 5
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 6
38264: PUSH
38265: LD_INT 6
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 5
38274: PUSH
38275: LD_INT 6
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38296: LD_ADDR_VAR 0 32
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 3
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 0
38313: PUSH
38314: LD_INT 3
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 1
38323: NEG
38324: PUSH
38325: LD_INT 2
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: LD_INT 4
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: LD_INT 4
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: LD_INT 3
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: LD_INT 5
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 0
38375: PUSH
38376: LD_INT 5
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: PUSH
38387: LD_INT 4
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: LD_INT 6
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 0
38406: PUSH
38407: LD_INT 6
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: NEG
38417: PUSH
38418: LD_INT 5
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38439: LD_ADDR_VAR 0 33
38443: PUSH
38444: LD_INT 2
38446: NEG
38447: PUSH
38448: LD_INT 1
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 3
38457: NEG
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 3
38468: NEG
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 3
38480: NEG
38481: PUSH
38482: LD_INT 1
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 4
38491: NEG
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 4
38502: NEG
38503: PUSH
38504: LD_INT 1
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 4
38514: NEG
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 5
38525: NEG
38526: PUSH
38527: LD_INT 0
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 5
38536: NEG
38537: PUSH
38538: LD_INT 1
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 5
38548: NEG
38549: PUSH
38550: LD_INT 1
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 6
38559: NEG
38560: PUSH
38561: LD_INT 0
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 6
38570: NEG
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38594: LD_ADDR_VAR 0 34
38598: PUSH
38599: LD_INT 2
38601: NEG
38602: PUSH
38603: LD_INT 3
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 3
38613: NEG
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 3
38625: NEG
38626: PUSH
38627: LD_INT 3
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 3
38637: NEG
38638: PUSH
38639: LD_INT 4
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 4
38649: NEG
38650: PUSH
38651: LD_INT 3
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 4
38661: NEG
38662: PUSH
38663: LD_INT 4
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 4
38673: NEG
38674: PUSH
38675: LD_INT 5
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 5
38685: NEG
38686: PUSH
38687: LD_INT 4
38689: NEG
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 5
38697: NEG
38698: PUSH
38699: LD_INT 5
38701: NEG
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 5
38709: NEG
38710: PUSH
38711: LD_INT 6
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 6
38721: NEG
38722: PUSH
38723: LD_INT 5
38725: NEG
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 6
38733: NEG
38734: PUSH
38735: LD_INT 6
38737: NEG
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38757: LD_ADDR_VAR 0 41
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: LD_INT 2
38767: NEG
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: LD_INT 3
38779: NEG
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: LIST
38800: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38801: LD_ADDR_VAR 0 42
38805: PUSH
38806: LD_INT 2
38808: PUSH
38809: LD_INT 0
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 2
38818: PUSH
38819: LD_INT 1
38821: NEG
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 3
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: LIST
38841: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38842: LD_ADDR_VAR 0 43
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 3
38859: PUSH
38860: LD_INT 2
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 2
38869: PUSH
38870: LD_INT 3
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: LIST
38881: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38882: LD_ADDR_VAR 0 44
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: LD_INT 2
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: LD_INT 3
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: NEG
38910: PUSH
38911: LD_INT 2
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: LIST
38922: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38923: LD_ADDR_VAR 0 45
38927: PUSH
38928: LD_INT 2
38930: NEG
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 2
38941: NEG
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 3
38952: NEG
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: LIST
38966: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38967: LD_ADDR_VAR 0 46
38971: PUSH
38972: LD_INT 2
38974: NEG
38975: PUSH
38976: LD_INT 2
38978: NEG
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: LD_INT 3
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 3
38998: NEG
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: LIST
39012: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39013: LD_ADDR_VAR 0 47
39017: PUSH
39018: LD_INT 2
39020: NEG
39021: PUSH
39022: LD_INT 3
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 1
39032: NEG
39033: PUSH
39034: LD_INT 3
39036: NEG
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39046: LD_ADDR_VAR 0 48
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: LD_INT 2
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: LD_INT 1
39067: NEG
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39077: LD_ADDR_VAR 0 49
39081: PUSH
39082: LD_INT 3
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 3
39094: PUSH
39095: LD_INT 2
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39106: LD_ADDR_VAR 0 50
39110: PUSH
39111: LD_INT 2
39113: PUSH
39114: LD_INT 3
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: LD_INT 3
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39135: LD_ADDR_VAR 0 51
39139: PUSH
39140: LD_INT 1
39142: NEG
39143: PUSH
39144: LD_INT 2
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39166: LD_ADDR_VAR 0 52
39170: PUSH
39171: LD_INT 3
39173: NEG
39174: PUSH
39175: LD_INT 1
39177: NEG
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 3
39185: NEG
39186: PUSH
39187: LD_INT 2
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39199: LD_ADDR_VAR 0 53
39203: PUSH
39204: LD_INT 1
39206: NEG
39207: PUSH
39208: LD_INT 3
39210: NEG
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: LD_INT 3
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 1
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: LIST
39242: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39243: LD_ADDR_VAR 0 54
39247: PUSH
39248: LD_INT 2
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 3
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 3
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: LIST
39283: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39284: LD_ADDR_VAR 0 55
39288: PUSH
39289: LD_INT 3
39291: PUSH
39292: LD_INT 2
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 3
39301: PUSH
39302: LD_INT 3
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 2
39311: PUSH
39312: LD_INT 3
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: LIST
39323: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39324: LD_ADDR_VAR 0 56
39328: PUSH
39329: LD_INT 1
39331: PUSH
39332: LD_INT 3
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: LD_INT 3
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: LD_INT 2
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: LIST
39364: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39365: LD_ADDR_VAR 0 57
39369: PUSH
39370: LD_INT 2
39372: NEG
39373: PUSH
39374: LD_INT 1
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 3
39383: NEG
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 3
39394: NEG
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: LIST
39408: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39409: LD_ADDR_VAR 0 58
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: LD_INT 3
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 3
39428: NEG
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 3
39440: NEG
39441: PUSH
39442: LD_INT 3
39444: NEG
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: LIST
39454: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39455: LD_ADDR_VAR 0 59
39459: PUSH
39460: LD_INT 1
39462: NEG
39463: PUSH
39464: LD_INT 2
39466: NEG
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: LD_INT 2
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: LIST
39498: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39499: LD_ADDR_VAR 0 60
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: LD_INT 1
39509: NEG
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 2
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 2
39527: PUSH
39528: LD_INT 1
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: LIST
39539: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39540: LD_ADDR_VAR 0 61
39544: PUSH
39545: LD_INT 2
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 2
39557: PUSH
39558: LD_INT 2
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: PUSH
39568: LD_INT 2
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: LIST
39579: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39580: LD_ADDR_VAR 0 62
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: LD_INT 2
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: LD_INT 2
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: LD_INT 1
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: LIST
39620: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39621: LD_ADDR_VAR 0 63
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 2
39639: NEG
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: NEG
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: LIST
39664: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39665: LD_ADDR_VAR 0 64
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: LD_INT 2
39676: NEG
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 2
39684: NEG
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 2
39696: NEG
39697: PUSH
39698: LD_INT 2
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: LIST
39710: ST_TO_ADDR
// end ; 2 :
39711: GO 42977
39713: LD_INT 2
39715: DOUBLE
39716: EQUAL
39717: IFTRUE 39721
39719: GO 42976
39721: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39722: LD_ADDR_VAR 0 29
39726: PUSH
39727: LD_INT 4
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 4
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 5
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 5
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 4
39770: PUSH
39771: LD_INT 1
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 3
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 3
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 3
39801: PUSH
39802: LD_INT 2
39804: NEG
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 5
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 3
39822: PUSH
39823: LD_INT 3
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 3
39832: PUSH
39833: LD_INT 2
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 4
39842: PUSH
39843: LD_INT 3
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 4
39852: PUSH
39853: LD_INT 4
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 3
39862: PUSH
39863: LD_INT 4
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: LD_INT 3
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 2
39882: PUSH
39883: LD_INT 2
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 4
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 2
39902: PUSH
39903: LD_INT 4
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 4
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: LD_INT 3
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: PUSH
39933: LD_INT 4
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: LD_INT 5
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: LD_INT 5
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: LD_INT 4
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 1
39973: NEG
39974: PUSH
39975: LD_INT 3
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: PUSH
39985: LD_INT 5
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 2
39994: NEG
39995: PUSH
39996: LD_INT 3
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 3
40005: NEG
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 3
40016: NEG
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 2
40028: NEG
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 2
40039: NEG
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 3
40050: NEG
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 4
40061: NEG
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 4
40072: NEG
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 4
40084: NEG
40085: PUSH
40086: LD_INT 2
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 2
40096: NEG
40097: PUSH
40098: LD_INT 2
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 4
40107: NEG
40108: PUSH
40109: LD_INT 4
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 4
40119: NEG
40120: PUSH
40121: LD_INT 5
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 3
40131: NEG
40132: PUSH
40133: LD_INT 4
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 3
40143: NEG
40144: PUSH
40145: LD_INT 3
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 4
40155: NEG
40156: PUSH
40157: LD_INT 3
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 5
40167: NEG
40168: PUSH
40169: LD_INT 4
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 5
40179: NEG
40180: PUSH
40181: LD_INT 5
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 3
40191: NEG
40192: PUSH
40193: LD_INT 5
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 5
40203: NEG
40204: PUSH
40205: LD_INT 3
40207: NEG
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40260: LD_ADDR_VAR 0 30
40264: PUSH
40265: LD_INT 4
40267: PUSH
40268: LD_INT 4
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 4
40277: PUSH
40278: LD_INT 3
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 5
40287: PUSH
40288: LD_INT 4
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 5
40297: PUSH
40298: LD_INT 5
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 4
40307: PUSH
40308: LD_INT 5
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 3
40317: PUSH
40318: LD_INT 4
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 3
40327: PUSH
40328: LD_INT 3
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 5
40337: PUSH
40338: LD_INT 3
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 3
40347: PUSH
40348: LD_INT 5
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: LD_INT 3
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 2
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: LD_INT 3
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 1
40387: PUSH
40388: LD_INT 4
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: LD_INT 4
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: LD_INT 3
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: LD_INT 2
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: LD_INT 4
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 2
40439: NEG
40440: PUSH
40441: LD_INT 2
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 4
40450: NEG
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 4
40461: NEG
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 3
40473: NEG
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 3
40484: NEG
40485: PUSH
40486: LD_INT 1
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 4
40495: NEG
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 5
40506: NEG
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 5
40517: NEG
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 5
40529: NEG
40530: PUSH
40531: LD_INT 2
40533: NEG
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 3
40541: NEG
40542: PUSH
40543: LD_INT 2
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 3
40552: NEG
40553: PUSH
40554: LD_INT 3
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 3
40564: NEG
40565: PUSH
40566: LD_INT 4
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 2
40576: NEG
40577: PUSH
40578: LD_INT 3
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 2
40588: NEG
40589: PUSH
40590: LD_INT 2
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 3
40600: NEG
40601: PUSH
40602: LD_INT 2
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 4
40612: NEG
40613: PUSH
40614: LD_INT 3
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 4
40624: NEG
40625: PUSH
40626: LD_INT 4
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 2
40636: NEG
40637: PUSH
40638: LD_INT 4
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 4
40648: NEG
40649: PUSH
40650: LD_INT 2
40652: NEG
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: LD_INT 4
40663: NEG
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: LD_INT 5
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: LD_INT 4
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: LD_INT 3
40696: NEG
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: LD_INT 3
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 1
40715: NEG
40716: PUSH
40717: LD_INT 4
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: LD_INT 5
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: LD_INT 3
40742: NEG
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 2
40750: NEG
40751: PUSH
40752: LD_INT 5
40754: NEG
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40807: LD_ADDR_VAR 0 31
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: LD_INT 4
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 0
40824: PUSH
40825: LD_INT 3
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: LD_INT 4
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: LD_INT 5
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 5
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 1
40864: NEG
40865: PUSH
40866: LD_INT 4
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: LD_INT 3
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: LD_INT 5
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 2
40896: NEG
40897: PUSH
40898: LD_INT 3
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 3
40907: NEG
40908: PUSH
40909: LD_INT 0
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 3
40918: NEG
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 2
40930: NEG
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 2
40941: NEG
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 3
40952: NEG
40953: PUSH
40954: LD_INT 1
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 4
40963: NEG
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 4
40974: NEG
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 4
40986: NEG
40987: PUSH
40988: LD_INT 2
40990: NEG
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 2
40998: NEG
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 4
41009: NEG
41010: PUSH
41011: LD_INT 4
41013: NEG
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 4
41021: NEG
41022: PUSH
41023: LD_INT 5
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 3
41033: NEG
41034: PUSH
41035: LD_INT 4
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 3
41045: NEG
41046: PUSH
41047: LD_INT 3
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 4
41057: NEG
41058: PUSH
41059: LD_INT 3
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 5
41069: NEG
41070: PUSH
41071: LD_INT 4
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 5
41081: NEG
41082: PUSH
41083: LD_INT 5
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 3
41093: NEG
41094: PUSH
41095: LD_INT 5
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 5
41105: NEG
41106: PUSH
41107: LD_INT 3
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: LD_INT 3
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: LD_INT 4
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: LD_INT 3
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: LD_INT 2
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: LD_INT 2
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: LD_INT 3
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: LD_INT 4
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 2
41196: PUSH
41197: LD_INT 2
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: NEG
41208: PUSH
41209: LD_INT 4
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 4
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 4
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 5
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 5
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 4
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 3
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 3
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 3
41291: PUSH
41292: LD_INT 2
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 5
41302: PUSH
41303: LD_INT 2
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41357: LD_ADDR_VAR 0 32
41361: PUSH
41362: LD_INT 4
41364: NEG
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 4
41375: NEG
41376: PUSH
41377: LD_INT 1
41379: NEG
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 3
41387: NEG
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 3
41398: NEG
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 4
41409: NEG
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 5
41420: NEG
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 5
41431: NEG
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 5
41443: NEG
41444: PUSH
41445: LD_INT 2
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 3
41455: NEG
41456: PUSH
41457: LD_INT 2
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 3
41466: NEG
41467: PUSH
41468: LD_INT 3
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 3
41478: NEG
41479: PUSH
41480: LD_INT 4
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: NEG
41491: PUSH
41492: LD_INT 3
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 3
41514: NEG
41515: PUSH
41516: LD_INT 2
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 4
41526: NEG
41527: PUSH
41528: LD_INT 3
41530: NEG
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 4
41538: NEG
41539: PUSH
41540: LD_INT 4
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 2
41550: NEG
41551: PUSH
41552: LD_INT 4
41554: NEG
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 4
41562: NEG
41563: PUSH
41564: LD_INT 2
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: LD_INT 4
41577: NEG
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: LD_INT 5
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: LD_INT 4
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: LD_INT 3
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: LD_INT 3
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: LD_INT 4
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: LD_INT 5
41645: NEG
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 2
41653: PUSH
41654: LD_INT 3
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 2
41664: NEG
41665: PUSH
41666: LD_INT 5
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 3
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 3
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 4
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 4
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 3
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 2
41737: PUSH
41738: LD_INT 1
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 4
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 4
41769: PUSH
41770: LD_INT 4
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 4
41779: PUSH
41780: LD_INT 3
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 5
41789: PUSH
41790: LD_INT 4
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 5
41799: PUSH
41800: LD_INT 5
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 4
41809: PUSH
41810: LD_INT 5
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 3
41819: PUSH
41820: LD_INT 4
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 3
41829: PUSH
41830: LD_INT 3
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 5
41839: PUSH
41840: LD_INT 3
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 3
41849: PUSH
41850: LD_INT 5
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41904: LD_ADDR_VAR 0 33
41908: PUSH
41909: LD_INT 4
41911: NEG
41912: PUSH
41913: LD_INT 4
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 4
41923: NEG
41924: PUSH
41925: LD_INT 5
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 3
41935: NEG
41936: PUSH
41937: LD_INT 4
41939: NEG
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 3
41947: NEG
41948: PUSH
41949: LD_INT 3
41951: NEG
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 4
41959: NEG
41960: PUSH
41961: LD_INT 3
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 5
41971: NEG
41972: PUSH
41973: LD_INT 4
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 5
41983: NEG
41984: PUSH
41985: LD_INT 5
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 3
41995: NEG
41996: PUSH
41997: LD_INT 5
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 5
42007: NEG
42008: PUSH
42009: LD_INT 3
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 3
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: LD_INT 4
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: LD_INT 3
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: LD_INT 2
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 2
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: NEG
42075: PUSH
42076: LD_INT 3
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: LD_INT 4
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 2
42109: NEG
42110: PUSH
42111: LD_INT 4
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 4
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 4
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 5
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 5
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 4
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 3
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 3
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 3
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 5
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 3
42214: PUSH
42215: LD_INT 3
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 3
42224: PUSH
42225: LD_INT 2
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 4
42234: PUSH
42235: LD_INT 3
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 4
42244: PUSH
42245: LD_INT 4
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 3
42254: PUSH
42255: LD_INT 4
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 2
42264: PUSH
42265: LD_INT 3
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 2
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 4
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: LD_INT 4
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: LD_INT 4
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 3
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: LD_INT 4
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: LD_INT 5
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 5
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: LD_INT 4
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: LD_INT 3
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: LD_INT 5
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 2
42386: NEG
42387: PUSH
42388: LD_INT 3
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42442: LD_ADDR_VAR 0 34
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 4
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: LD_INT 5
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: LD_INT 4
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 3
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 3
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: LD_INT 4
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: LD_INT 5
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 2
42528: PUSH
42529: LD_INT 3
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 2
42539: NEG
42540: PUSH
42541: LD_INT 5
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 3
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 3
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 4
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 4
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 3
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 2
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 2
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: LD_INT 2
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 4
42634: PUSH
42635: LD_INT 2
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 4
42644: PUSH
42645: LD_INT 4
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 4
42654: PUSH
42655: LD_INT 3
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 5
42664: PUSH
42665: LD_INT 4
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 5
42674: PUSH
42675: LD_INT 5
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 4
42684: PUSH
42685: LD_INT 5
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 3
42694: PUSH
42695: LD_INT 4
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 3
42704: PUSH
42705: LD_INT 3
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 5
42714: PUSH
42715: LD_INT 3
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 3
42724: PUSH
42725: LD_INT 5
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: LD_INT 3
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 2
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: LD_INT 3
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: LD_INT 4
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: LD_INT 4
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: LD_INT 3
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: LD_INT 2
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: LD_INT 4
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 2
42816: NEG
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 4
42827: NEG
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 4
42838: NEG
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 3
42850: NEG
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 3
42861: NEG
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 4
42872: NEG
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 5
42883: NEG
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 5
42894: NEG
42895: PUSH
42896: LD_INT 1
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 5
42906: NEG
42907: PUSH
42908: LD_INT 2
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 3
42918: NEG
42919: PUSH
42920: LD_INT 2
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: ST_TO_ADDR
// end ; end ;
42974: GO 42977
42976: POP
// case btype of b_depot , b_warehouse :
42977: LD_VAR 0 1
42981: PUSH
42982: LD_INT 0
42984: DOUBLE
42985: EQUAL
42986: IFTRUE 42996
42988: LD_INT 1
42990: DOUBLE
42991: EQUAL
42992: IFTRUE 42996
42994: GO 43197
42996: POP
// case nation of nation_american :
42997: LD_VAR 0 5
43001: PUSH
43002: LD_INT 1
43004: DOUBLE
43005: EQUAL
43006: IFTRUE 43010
43008: GO 43066
43010: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43011: LD_ADDR_VAR 0 9
43015: PUSH
43016: LD_VAR 0 11
43020: PUSH
43021: LD_VAR 0 12
43025: PUSH
43026: LD_VAR 0 13
43030: PUSH
43031: LD_VAR 0 14
43035: PUSH
43036: LD_VAR 0 15
43040: PUSH
43041: LD_VAR 0 16
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: PUSH
43054: LD_VAR 0 4
43058: PUSH
43059: LD_INT 1
43061: PLUS
43062: ARRAY
43063: ST_TO_ADDR
43064: GO 43195
43066: LD_INT 2
43068: DOUBLE
43069: EQUAL
43070: IFTRUE 43074
43072: GO 43130
43074: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43075: LD_ADDR_VAR 0 9
43079: PUSH
43080: LD_VAR 0 17
43084: PUSH
43085: LD_VAR 0 18
43089: PUSH
43090: LD_VAR 0 19
43094: PUSH
43095: LD_VAR 0 20
43099: PUSH
43100: LD_VAR 0 21
43104: PUSH
43105: LD_VAR 0 22
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: PUSH
43118: LD_VAR 0 4
43122: PUSH
43123: LD_INT 1
43125: PLUS
43126: ARRAY
43127: ST_TO_ADDR
43128: GO 43195
43130: LD_INT 3
43132: DOUBLE
43133: EQUAL
43134: IFTRUE 43138
43136: GO 43194
43138: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43139: LD_ADDR_VAR 0 9
43143: PUSH
43144: LD_VAR 0 23
43148: PUSH
43149: LD_VAR 0 24
43153: PUSH
43154: LD_VAR 0 25
43158: PUSH
43159: LD_VAR 0 26
43163: PUSH
43164: LD_VAR 0 27
43168: PUSH
43169: LD_VAR 0 28
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: PUSH
43182: LD_VAR 0 4
43186: PUSH
43187: LD_INT 1
43189: PLUS
43190: ARRAY
43191: ST_TO_ADDR
43192: GO 43195
43194: POP
43195: GO 43750
43197: LD_INT 2
43199: DOUBLE
43200: EQUAL
43201: IFTRUE 43211
43203: LD_INT 3
43205: DOUBLE
43206: EQUAL
43207: IFTRUE 43211
43209: GO 43267
43211: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43212: LD_ADDR_VAR 0 9
43216: PUSH
43217: LD_VAR 0 29
43221: PUSH
43222: LD_VAR 0 30
43226: PUSH
43227: LD_VAR 0 31
43231: PUSH
43232: LD_VAR 0 32
43236: PUSH
43237: LD_VAR 0 33
43241: PUSH
43242: LD_VAR 0 34
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: PUSH
43255: LD_VAR 0 4
43259: PUSH
43260: LD_INT 1
43262: PLUS
43263: ARRAY
43264: ST_TO_ADDR
43265: GO 43750
43267: LD_INT 16
43269: DOUBLE
43270: EQUAL
43271: IFTRUE 43329
43273: LD_INT 17
43275: DOUBLE
43276: EQUAL
43277: IFTRUE 43329
43279: LD_INT 18
43281: DOUBLE
43282: EQUAL
43283: IFTRUE 43329
43285: LD_INT 19
43287: DOUBLE
43288: EQUAL
43289: IFTRUE 43329
43291: LD_INT 22
43293: DOUBLE
43294: EQUAL
43295: IFTRUE 43329
43297: LD_INT 20
43299: DOUBLE
43300: EQUAL
43301: IFTRUE 43329
43303: LD_INT 21
43305: DOUBLE
43306: EQUAL
43307: IFTRUE 43329
43309: LD_INT 23
43311: DOUBLE
43312: EQUAL
43313: IFTRUE 43329
43315: LD_INT 24
43317: DOUBLE
43318: EQUAL
43319: IFTRUE 43329
43321: LD_INT 25
43323: DOUBLE
43324: EQUAL
43325: IFTRUE 43329
43327: GO 43385
43329: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43330: LD_ADDR_VAR 0 9
43334: PUSH
43335: LD_VAR 0 35
43339: PUSH
43340: LD_VAR 0 36
43344: PUSH
43345: LD_VAR 0 37
43349: PUSH
43350: LD_VAR 0 38
43354: PUSH
43355: LD_VAR 0 39
43359: PUSH
43360: LD_VAR 0 40
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: PUSH
43373: LD_VAR 0 4
43377: PUSH
43378: LD_INT 1
43380: PLUS
43381: ARRAY
43382: ST_TO_ADDR
43383: GO 43750
43385: LD_INT 6
43387: DOUBLE
43388: EQUAL
43389: IFTRUE 43441
43391: LD_INT 7
43393: DOUBLE
43394: EQUAL
43395: IFTRUE 43441
43397: LD_INT 8
43399: DOUBLE
43400: EQUAL
43401: IFTRUE 43441
43403: LD_INT 13
43405: DOUBLE
43406: EQUAL
43407: IFTRUE 43441
43409: LD_INT 12
43411: DOUBLE
43412: EQUAL
43413: IFTRUE 43441
43415: LD_INT 15
43417: DOUBLE
43418: EQUAL
43419: IFTRUE 43441
43421: LD_INT 11
43423: DOUBLE
43424: EQUAL
43425: IFTRUE 43441
43427: LD_INT 14
43429: DOUBLE
43430: EQUAL
43431: IFTRUE 43441
43433: LD_INT 10
43435: DOUBLE
43436: EQUAL
43437: IFTRUE 43441
43439: GO 43497
43441: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
43442: LD_ADDR_VAR 0 9
43446: PUSH
43447: LD_VAR 0 41
43451: PUSH
43452: LD_VAR 0 42
43456: PUSH
43457: LD_VAR 0 43
43461: PUSH
43462: LD_VAR 0 44
43466: PUSH
43467: LD_VAR 0 45
43471: PUSH
43472: LD_VAR 0 46
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: PUSH
43485: LD_VAR 0 4
43489: PUSH
43490: LD_INT 1
43492: PLUS
43493: ARRAY
43494: ST_TO_ADDR
43495: GO 43750
43497: LD_INT 36
43499: DOUBLE
43500: EQUAL
43501: IFTRUE 43505
43503: GO 43561
43505: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43506: LD_ADDR_VAR 0 9
43510: PUSH
43511: LD_VAR 0 47
43515: PUSH
43516: LD_VAR 0 48
43520: PUSH
43521: LD_VAR 0 49
43525: PUSH
43526: LD_VAR 0 50
43530: PUSH
43531: LD_VAR 0 51
43535: PUSH
43536: LD_VAR 0 52
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: PUSH
43549: LD_VAR 0 4
43553: PUSH
43554: LD_INT 1
43556: PLUS
43557: ARRAY
43558: ST_TO_ADDR
43559: GO 43750
43561: LD_INT 4
43563: DOUBLE
43564: EQUAL
43565: IFTRUE 43587
43567: LD_INT 5
43569: DOUBLE
43570: EQUAL
43571: IFTRUE 43587
43573: LD_INT 34
43575: DOUBLE
43576: EQUAL
43577: IFTRUE 43587
43579: LD_INT 37
43581: DOUBLE
43582: EQUAL
43583: IFTRUE 43587
43585: GO 43643
43587: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43588: LD_ADDR_VAR 0 9
43592: PUSH
43593: LD_VAR 0 53
43597: PUSH
43598: LD_VAR 0 54
43602: PUSH
43603: LD_VAR 0 55
43607: PUSH
43608: LD_VAR 0 56
43612: PUSH
43613: LD_VAR 0 57
43617: PUSH
43618: LD_VAR 0 58
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: PUSH
43631: LD_VAR 0 4
43635: PUSH
43636: LD_INT 1
43638: PLUS
43639: ARRAY
43640: ST_TO_ADDR
43641: GO 43750
43643: LD_INT 31
43645: DOUBLE
43646: EQUAL
43647: IFTRUE 43693
43649: LD_INT 32
43651: DOUBLE
43652: EQUAL
43653: IFTRUE 43693
43655: LD_INT 33
43657: DOUBLE
43658: EQUAL
43659: IFTRUE 43693
43661: LD_INT 27
43663: DOUBLE
43664: EQUAL
43665: IFTRUE 43693
43667: LD_INT 26
43669: DOUBLE
43670: EQUAL
43671: IFTRUE 43693
43673: LD_INT 28
43675: DOUBLE
43676: EQUAL
43677: IFTRUE 43693
43679: LD_INT 29
43681: DOUBLE
43682: EQUAL
43683: IFTRUE 43693
43685: LD_INT 30
43687: DOUBLE
43688: EQUAL
43689: IFTRUE 43693
43691: GO 43749
43693: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43694: LD_ADDR_VAR 0 9
43698: PUSH
43699: LD_VAR 0 59
43703: PUSH
43704: LD_VAR 0 60
43708: PUSH
43709: LD_VAR 0 61
43713: PUSH
43714: LD_VAR 0 62
43718: PUSH
43719: LD_VAR 0 63
43723: PUSH
43724: LD_VAR 0 64
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: PUSH
43737: LD_VAR 0 4
43741: PUSH
43742: LD_INT 1
43744: PLUS
43745: ARRAY
43746: ST_TO_ADDR
43747: GO 43750
43749: POP
// temp_list2 = [ ] ;
43750: LD_ADDR_VAR 0 10
43754: PUSH
43755: EMPTY
43756: ST_TO_ADDR
// for i in temp_list do
43757: LD_ADDR_VAR 0 8
43761: PUSH
43762: LD_VAR 0 9
43766: PUSH
43767: FOR_IN
43768: IFFALSE 43820
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43770: LD_ADDR_VAR 0 10
43774: PUSH
43775: LD_VAR 0 10
43779: PUSH
43780: LD_VAR 0 8
43784: PUSH
43785: LD_INT 1
43787: ARRAY
43788: PUSH
43789: LD_VAR 0 2
43793: PLUS
43794: PUSH
43795: LD_VAR 0 8
43799: PUSH
43800: LD_INT 2
43802: ARRAY
43803: PUSH
43804: LD_VAR 0 3
43808: PLUS
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: EMPTY
43815: LIST
43816: ADD
43817: ST_TO_ADDR
43818: GO 43767
43820: POP
43821: POP
// result = temp_list2 ;
43822: LD_ADDR_VAR 0 7
43826: PUSH
43827: LD_VAR 0 10
43831: ST_TO_ADDR
// end ;
43832: LD_VAR 0 7
43836: RET
// export function EnemyInRange ( unit , dist ) ; begin
43837: LD_INT 0
43839: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43840: LD_ADDR_VAR 0 3
43844: PUSH
43845: LD_VAR 0 1
43849: PPUSH
43850: CALL_OW 255
43854: PPUSH
43855: LD_VAR 0 1
43859: PPUSH
43860: CALL_OW 250
43864: PPUSH
43865: LD_VAR 0 1
43869: PPUSH
43870: CALL_OW 251
43874: PPUSH
43875: LD_VAR 0 2
43879: PPUSH
43880: CALL 17094 0 4
43884: PUSH
43885: LD_INT 4
43887: ARRAY
43888: ST_TO_ADDR
// end ;
43889: LD_VAR 0 3
43893: RET
// export function PlayerSeeMe ( unit ) ; begin
43894: LD_INT 0
43896: PPUSH
// result := See ( your_side , unit ) ;
43897: LD_ADDR_VAR 0 2
43901: PUSH
43902: LD_OWVAR 2
43906: PPUSH
43907: LD_VAR 0 1
43911: PPUSH
43912: CALL_OW 292
43916: ST_TO_ADDR
// end ;
43917: LD_VAR 0 2
43921: RET
// export function ReverseDir ( unit ) ; begin
43922: LD_INT 0
43924: PPUSH
// if not unit then
43925: LD_VAR 0 1
43929: NOT
43930: IFFALSE 43934
// exit ;
43932: GO 43957
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43934: LD_ADDR_VAR 0 2
43938: PUSH
43939: LD_VAR 0 1
43943: PPUSH
43944: CALL_OW 254
43948: PUSH
43949: LD_INT 3
43951: PLUS
43952: PUSH
43953: LD_INT 6
43955: MOD
43956: ST_TO_ADDR
// end ;
43957: LD_VAR 0 2
43961: RET
// export function ReverseArray ( array ) ; var i ; begin
43962: LD_INT 0
43964: PPUSH
43965: PPUSH
// if not array then
43966: LD_VAR 0 1
43970: NOT
43971: IFFALSE 43975
// exit ;
43973: GO 44030
// result := [ ] ;
43975: LD_ADDR_VAR 0 2
43979: PUSH
43980: EMPTY
43981: ST_TO_ADDR
// for i := array downto 1 do
43982: LD_ADDR_VAR 0 3
43986: PUSH
43987: DOUBLE
43988: LD_VAR 0 1
43992: INC
43993: ST_TO_ADDR
43994: LD_INT 1
43996: PUSH
43997: FOR_DOWNTO
43998: IFFALSE 44028
// result := Join ( result , array [ i ] ) ;
44000: LD_ADDR_VAR 0 2
44004: PUSH
44005: LD_VAR 0 2
44009: PPUSH
44010: LD_VAR 0 1
44014: PUSH
44015: LD_VAR 0 3
44019: ARRAY
44020: PPUSH
44021: CALL 48872 0 2
44025: ST_TO_ADDR
44026: GO 43997
44028: POP
44029: POP
// end ;
44030: LD_VAR 0 2
44034: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44035: LD_INT 0
44037: PPUSH
44038: PPUSH
44039: PPUSH
44040: PPUSH
44041: PPUSH
44042: PPUSH
// if not unit or not hexes then
44043: LD_VAR 0 1
44047: NOT
44048: IFTRUE 44057
44050: PUSH
44051: LD_VAR 0 2
44055: NOT
44056: OR
44057: IFFALSE 44061
// exit ;
44059: GO 44184
// dist := 9999 ;
44061: LD_ADDR_VAR 0 5
44065: PUSH
44066: LD_INT 9999
44068: ST_TO_ADDR
// for i = 1 to hexes do
44069: LD_ADDR_VAR 0 4
44073: PUSH
44074: DOUBLE
44075: LD_INT 1
44077: DEC
44078: ST_TO_ADDR
44079: LD_VAR 0 2
44083: PUSH
44084: FOR_TO
44085: IFFALSE 44172
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44087: LD_ADDR_VAR 0 6
44091: PUSH
44092: LD_VAR 0 1
44096: PPUSH
44097: LD_VAR 0 2
44101: PUSH
44102: LD_VAR 0 4
44106: ARRAY
44107: PUSH
44108: LD_INT 1
44110: ARRAY
44111: PPUSH
44112: LD_VAR 0 2
44116: PUSH
44117: LD_VAR 0 4
44121: ARRAY
44122: PUSH
44123: LD_INT 2
44125: ARRAY
44126: PPUSH
44127: CALL_OW 297
44131: ST_TO_ADDR
// if tdist < dist then
44132: LD_VAR 0 6
44136: PUSH
44137: LD_VAR 0 5
44141: LESS
44142: IFFALSE 44170
// begin hex := hexes [ i ] ;
44144: LD_ADDR_VAR 0 8
44148: PUSH
44149: LD_VAR 0 2
44153: PUSH
44154: LD_VAR 0 4
44158: ARRAY
44159: ST_TO_ADDR
// dist := tdist ;
44160: LD_ADDR_VAR 0 5
44164: PUSH
44165: LD_VAR 0 6
44169: ST_TO_ADDR
// end ; end ;
44170: GO 44084
44172: POP
44173: POP
// result := hex ;
44174: LD_ADDR_VAR 0 3
44178: PUSH
44179: LD_VAR 0 8
44183: ST_TO_ADDR
// end ;
44184: LD_VAR 0 3
44188: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44189: LD_INT 0
44191: PPUSH
44192: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44193: LD_VAR 0 1
44197: NOT
44198: IFTRUE 44237
44200: PUSH
44201: LD_VAR 0 1
44205: PUSH
44206: LD_INT 21
44208: PUSH
44209: LD_INT 2
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 23
44218: PUSH
44219: LD_INT 2
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PPUSH
44230: CALL_OW 69
44234: IN
44235: NOT
44236: OR
44237: IFFALSE 44241
// exit ;
44239: GO 44288
// for i = 1 to 3 do
44241: LD_ADDR_VAR 0 3
44245: PUSH
44246: DOUBLE
44247: LD_INT 1
44249: DEC
44250: ST_TO_ADDR
44251: LD_INT 3
44253: PUSH
44254: FOR_TO
44255: IFFALSE 44286
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44257: LD_VAR 0 1
44261: PPUSH
44262: CALL_OW 250
44266: PPUSH
44267: LD_VAR 0 1
44271: PPUSH
44272: CALL_OW 251
44276: PPUSH
44277: LD_INT 1
44279: PPUSH
44280: CALL_OW 453
44284: GO 44254
44286: POP
44287: POP
// end ;
44288: LD_VAR 0 2
44292: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44293: LD_INT 0
44295: PPUSH
44296: PPUSH
44297: PPUSH
44298: PPUSH
44299: PPUSH
44300: PPUSH
// if not unit or not enemy_unit then
44301: LD_VAR 0 1
44305: NOT
44306: IFTRUE 44315
44308: PUSH
44309: LD_VAR 0 2
44313: NOT
44314: OR
44315: IFFALSE 44319
// exit ;
44317: GO 44790
// if GetLives ( i ) < 250 then
44319: LD_VAR 0 4
44323: PPUSH
44324: CALL_OW 256
44328: PUSH
44329: LD_INT 250
44331: LESS
44332: IFFALSE 44345
// begin ComAutodestruct ( i ) ;
44334: LD_VAR 0 4
44338: PPUSH
44339: CALL 44189 0 1
// exit ;
44343: GO 44790
// end ; x := GetX ( enemy_unit ) ;
44345: LD_ADDR_VAR 0 7
44349: PUSH
44350: LD_VAR 0 2
44354: PPUSH
44355: CALL_OW 250
44359: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44360: LD_ADDR_VAR 0 8
44364: PUSH
44365: LD_VAR 0 2
44369: PPUSH
44370: CALL_OW 251
44374: ST_TO_ADDR
// if not x or not y then
44375: LD_VAR 0 7
44379: NOT
44380: IFTRUE 44389
44382: PUSH
44383: LD_VAR 0 8
44387: NOT
44388: OR
44389: IFFALSE 44393
// exit ;
44391: GO 44790
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44393: LD_ADDR_VAR 0 6
44397: PUSH
44398: LD_VAR 0 7
44402: PPUSH
44403: LD_INT 0
44405: PPUSH
44406: LD_INT 4
44408: PPUSH
44409: CALL_OW 272
44413: PUSH
44414: LD_VAR 0 8
44418: PPUSH
44419: LD_INT 0
44421: PPUSH
44422: LD_INT 4
44424: PPUSH
44425: CALL_OW 273
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_VAR 0 7
44438: PPUSH
44439: LD_INT 1
44441: PPUSH
44442: LD_INT 4
44444: PPUSH
44445: CALL_OW 272
44449: PUSH
44450: LD_VAR 0 8
44454: PPUSH
44455: LD_INT 1
44457: PPUSH
44458: LD_INT 4
44460: PPUSH
44461: CALL_OW 273
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_VAR 0 7
44474: PPUSH
44475: LD_INT 2
44477: PPUSH
44478: LD_INT 4
44480: PPUSH
44481: CALL_OW 272
44485: PUSH
44486: LD_VAR 0 8
44490: PPUSH
44491: LD_INT 2
44493: PPUSH
44494: LD_INT 4
44496: PPUSH
44497: CALL_OW 273
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_VAR 0 7
44510: PPUSH
44511: LD_INT 3
44513: PPUSH
44514: LD_INT 4
44516: PPUSH
44517: CALL_OW 272
44521: PUSH
44522: LD_VAR 0 8
44526: PPUSH
44527: LD_INT 3
44529: PPUSH
44530: LD_INT 4
44532: PPUSH
44533: CALL_OW 273
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_VAR 0 7
44546: PPUSH
44547: LD_INT 4
44549: PPUSH
44550: LD_INT 4
44552: PPUSH
44553: CALL_OW 272
44557: PUSH
44558: LD_VAR 0 8
44562: PPUSH
44563: LD_INT 4
44565: PPUSH
44566: LD_INT 4
44568: PPUSH
44569: CALL_OW 273
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_VAR 0 7
44582: PPUSH
44583: LD_INT 5
44585: PPUSH
44586: LD_INT 4
44588: PPUSH
44589: CALL_OW 272
44593: PUSH
44594: LD_VAR 0 8
44598: PPUSH
44599: LD_INT 5
44601: PPUSH
44602: LD_INT 4
44604: PPUSH
44605: CALL_OW 273
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: ST_TO_ADDR
// for i = tmp downto 1 do
44622: LD_ADDR_VAR 0 4
44626: PUSH
44627: DOUBLE
44628: LD_VAR 0 6
44632: INC
44633: ST_TO_ADDR
44634: LD_INT 1
44636: PUSH
44637: FOR_DOWNTO
44638: IFFALSE 44741
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44640: LD_VAR 0 6
44644: PUSH
44645: LD_VAR 0 4
44649: ARRAY
44650: PUSH
44651: LD_INT 1
44653: ARRAY
44654: PPUSH
44655: LD_VAR 0 6
44659: PUSH
44660: LD_VAR 0 4
44664: ARRAY
44665: PUSH
44666: LD_INT 2
44668: ARRAY
44669: PPUSH
44670: CALL_OW 488
44674: NOT
44675: IFTRUE 44717
44677: PUSH
44678: LD_VAR 0 6
44682: PUSH
44683: LD_VAR 0 4
44687: ARRAY
44688: PUSH
44689: LD_INT 1
44691: ARRAY
44692: PPUSH
44693: LD_VAR 0 6
44697: PUSH
44698: LD_VAR 0 4
44702: ARRAY
44703: PUSH
44704: LD_INT 2
44706: ARRAY
44707: PPUSH
44708: CALL_OW 428
44712: PUSH
44713: LD_INT 0
44715: NONEQUAL
44716: OR
44717: IFFALSE 44739
// tmp := Delete ( tmp , i ) ;
44719: LD_ADDR_VAR 0 6
44723: PUSH
44724: LD_VAR 0 6
44728: PPUSH
44729: LD_VAR 0 4
44733: PPUSH
44734: CALL_OW 3
44738: ST_TO_ADDR
44739: GO 44637
44741: POP
44742: POP
// j := GetClosestHex ( unit , tmp ) ;
44743: LD_ADDR_VAR 0 5
44747: PUSH
44748: LD_VAR 0 1
44752: PPUSH
44753: LD_VAR 0 6
44757: PPUSH
44758: CALL 44035 0 2
44762: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44763: LD_VAR 0 1
44767: PPUSH
44768: LD_VAR 0 5
44772: PUSH
44773: LD_INT 1
44775: ARRAY
44776: PPUSH
44777: LD_VAR 0 5
44781: PUSH
44782: LD_INT 2
44784: ARRAY
44785: PPUSH
44786: CALL_OW 111
// end ;
44790: LD_VAR 0 3
44794: RET
// export function PrepareApemanSoldier ( ) ; begin
44795: LD_INT 0
44797: PPUSH
// uc_nation := 0 ;
44798: LD_ADDR_OWVAR 21
44802: PUSH
44803: LD_INT 0
44805: ST_TO_ADDR
// hc_sex := sex_male ;
44806: LD_ADDR_OWVAR 27
44810: PUSH
44811: LD_INT 1
44813: ST_TO_ADDR
// hc_name :=  ;
44814: LD_ADDR_OWVAR 26
44818: PUSH
44819: LD_STRING 
44821: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44822: LD_ADDR_OWVAR 28
44826: PUSH
44827: LD_INT 15
44829: ST_TO_ADDR
// hc_gallery :=  ;
44830: LD_ADDR_OWVAR 33
44834: PUSH
44835: LD_STRING 
44837: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44838: LD_ADDR_OWVAR 31
44842: PUSH
44843: LD_INT 0
44845: PPUSH
44846: LD_INT 3
44848: PPUSH
44849: CALL_OW 12
44853: PUSH
44854: LD_INT 0
44856: PPUSH
44857: LD_INT 3
44859: PPUSH
44860: CALL_OW 12
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44877: LD_ADDR_OWVAR 29
44881: PUSH
44882: LD_INT 12
44884: PUSH
44885: LD_INT 12
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: ST_TO_ADDR
// end ;
44892: LD_VAR 0 1
44896: RET
// export function PrepareApemanEngineer ( ) ; begin
44897: LD_INT 0
44899: PPUSH
// uc_nation := 0 ;
44900: LD_ADDR_OWVAR 21
44904: PUSH
44905: LD_INT 0
44907: ST_TO_ADDR
// hc_sex := sex_male ;
44908: LD_ADDR_OWVAR 27
44912: PUSH
44913: LD_INT 1
44915: ST_TO_ADDR
// hc_name :=  ;
44916: LD_ADDR_OWVAR 26
44920: PUSH
44921: LD_STRING 
44923: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44924: LD_ADDR_OWVAR 28
44928: PUSH
44929: LD_INT 16
44931: ST_TO_ADDR
// hc_gallery :=  ;
44932: LD_ADDR_OWVAR 33
44936: PUSH
44937: LD_STRING 
44939: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44940: LD_ADDR_OWVAR 31
44944: PUSH
44945: LD_INT 0
44947: PPUSH
44948: LD_INT 3
44950: PPUSH
44951: CALL_OW 12
44955: PUSH
44956: LD_INT 0
44958: PPUSH
44959: LD_INT 3
44961: PPUSH
44962: CALL_OW 12
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44979: LD_ADDR_OWVAR 29
44983: PUSH
44984: LD_INT 12
44986: PUSH
44987: LD_INT 12
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: ST_TO_ADDR
// end ;
44994: LD_VAR 0 1
44998: RET
// export function PrepareApeman ( agressivity ) ; begin
44999: LD_INT 0
45001: PPUSH
// uc_side := 0 ;
45002: LD_ADDR_OWVAR 20
45006: PUSH
45007: LD_INT 0
45009: ST_TO_ADDR
// uc_nation := 0 ;
45010: LD_ADDR_OWVAR 21
45014: PUSH
45015: LD_INT 0
45017: ST_TO_ADDR
// hc_sex := sex_male ;
45018: LD_ADDR_OWVAR 27
45022: PUSH
45023: LD_INT 1
45025: ST_TO_ADDR
// hc_class := class_apeman ;
45026: LD_ADDR_OWVAR 28
45030: PUSH
45031: LD_INT 12
45033: ST_TO_ADDR
// hc_gallery :=  ;
45034: LD_ADDR_OWVAR 33
45038: PUSH
45039: LD_STRING 
45041: ST_TO_ADDR
// hc_name :=  ;
45042: LD_ADDR_OWVAR 26
45046: PUSH
45047: LD_STRING 
45049: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
45050: LD_ADDR_OWVAR 29
45054: PUSH
45055: LD_INT 12
45057: PUSH
45058: LD_INT 12
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: ST_TO_ADDR
// if agressivity = 0 then
45065: LD_VAR 0 1
45069: PUSH
45070: LD_INT 0
45072: EQUAL
45073: IFFALSE 45085
// hc_agressivity := 0 else
45075: LD_ADDR_OWVAR 35
45079: PUSH
45080: LD_INT 0
45082: ST_TO_ADDR
45083: GO 45106
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45085: LD_ADDR_OWVAR 35
45089: PUSH
45090: LD_VAR 0 1
45094: NEG
45095: PPUSH
45096: LD_VAR 0 1
45100: PPUSH
45101: CALL_OW 12
45105: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45106: LD_ADDR_OWVAR 31
45110: PUSH
45111: LD_INT 0
45113: PPUSH
45114: LD_INT 3
45116: PPUSH
45117: CALL_OW 12
45121: PUSH
45122: LD_INT 0
45124: PPUSH
45125: LD_INT 3
45127: PPUSH
45128: CALL_OW 12
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: ST_TO_ADDR
// end ;
45145: LD_VAR 0 2
45149: RET
// export function PrepareTiger ( agressivity ) ; begin
45150: LD_INT 0
45152: PPUSH
// uc_side := 0 ;
45153: LD_ADDR_OWVAR 20
45157: PUSH
45158: LD_INT 0
45160: ST_TO_ADDR
// uc_nation := 0 ;
45161: LD_ADDR_OWVAR 21
45165: PUSH
45166: LD_INT 0
45168: ST_TO_ADDR
// InitHc ;
45169: CALL_OW 19
// hc_class := class_tiger ;
45173: LD_ADDR_OWVAR 28
45177: PUSH
45178: LD_INT 14
45180: ST_TO_ADDR
// hc_gallery :=  ;
45181: LD_ADDR_OWVAR 33
45185: PUSH
45186: LD_STRING 
45188: ST_TO_ADDR
// hc_name :=  ;
45189: LD_ADDR_OWVAR 26
45193: PUSH
45194: LD_STRING 
45196: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45197: LD_ADDR_OWVAR 35
45201: PUSH
45202: LD_VAR 0 1
45206: NEG
45207: PPUSH
45208: LD_VAR 0 1
45212: PPUSH
45213: CALL_OW 12
45217: ST_TO_ADDR
// end ;
45218: LD_VAR 0 2
45222: RET
// export function PrepareEnchidna ( ) ; begin
45223: LD_INT 0
45225: PPUSH
// uc_side := 0 ;
45226: LD_ADDR_OWVAR 20
45230: PUSH
45231: LD_INT 0
45233: ST_TO_ADDR
// uc_nation := 0 ;
45234: LD_ADDR_OWVAR 21
45238: PUSH
45239: LD_INT 0
45241: ST_TO_ADDR
// InitHc ;
45242: CALL_OW 19
// hc_class := class_baggie ;
45246: LD_ADDR_OWVAR 28
45250: PUSH
45251: LD_INT 13
45253: ST_TO_ADDR
// hc_gallery :=  ;
45254: LD_ADDR_OWVAR 33
45258: PUSH
45259: LD_STRING 
45261: ST_TO_ADDR
// hc_name :=  ;
45262: LD_ADDR_OWVAR 26
45266: PUSH
45267: LD_STRING 
45269: ST_TO_ADDR
// end ;
45270: LD_VAR 0 1
45274: RET
// export function PrepareFrog ( ) ; begin
45275: LD_INT 0
45277: PPUSH
// uc_side := 0 ;
45278: LD_ADDR_OWVAR 20
45282: PUSH
45283: LD_INT 0
45285: ST_TO_ADDR
// uc_nation := 0 ;
45286: LD_ADDR_OWVAR 21
45290: PUSH
45291: LD_INT 0
45293: ST_TO_ADDR
// InitHc ;
45294: CALL_OW 19
// hc_class := class_frog ;
45298: LD_ADDR_OWVAR 28
45302: PUSH
45303: LD_INT 19
45305: ST_TO_ADDR
// hc_gallery :=  ;
45306: LD_ADDR_OWVAR 33
45310: PUSH
45311: LD_STRING 
45313: ST_TO_ADDR
// hc_name :=  ;
45314: LD_ADDR_OWVAR 26
45318: PUSH
45319: LD_STRING 
45321: ST_TO_ADDR
// end ;
45322: LD_VAR 0 1
45326: RET
// export function PrepareFish ( ) ; begin
45327: LD_INT 0
45329: PPUSH
// uc_side := 0 ;
45330: LD_ADDR_OWVAR 20
45334: PUSH
45335: LD_INT 0
45337: ST_TO_ADDR
// uc_nation := 0 ;
45338: LD_ADDR_OWVAR 21
45342: PUSH
45343: LD_INT 0
45345: ST_TO_ADDR
// InitHc ;
45346: CALL_OW 19
// hc_class := class_fish ;
45350: LD_ADDR_OWVAR 28
45354: PUSH
45355: LD_INT 20
45357: ST_TO_ADDR
// hc_gallery :=  ;
45358: LD_ADDR_OWVAR 33
45362: PUSH
45363: LD_STRING 
45365: ST_TO_ADDR
// hc_name :=  ;
45366: LD_ADDR_OWVAR 26
45370: PUSH
45371: LD_STRING 
45373: ST_TO_ADDR
// end ;
45374: LD_VAR 0 1
45378: RET
// export function PrepareBird ( ) ; begin
45379: LD_INT 0
45381: PPUSH
// uc_side := 0 ;
45382: LD_ADDR_OWVAR 20
45386: PUSH
45387: LD_INT 0
45389: ST_TO_ADDR
// uc_nation := 0 ;
45390: LD_ADDR_OWVAR 21
45394: PUSH
45395: LD_INT 0
45397: ST_TO_ADDR
// InitHc ;
45398: CALL_OW 19
// hc_class := class_phororhacos ;
45402: LD_ADDR_OWVAR 28
45406: PUSH
45407: LD_INT 18
45409: ST_TO_ADDR
// hc_gallery :=  ;
45410: LD_ADDR_OWVAR 33
45414: PUSH
45415: LD_STRING 
45417: ST_TO_ADDR
// hc_name :=  ;
45418: LD_ADDR_OWVAR 26
45422: PUSH
45423: LD_STRING 
45425: ST_TO_ADDR
// end ;
45426: LD_VAR 0 1
45430: RET
// export function PrepareHorse ( ) ; begin
45431: LD_INT 0
45433: PPUSH
// uc_side := 0 ;
45434: LD_ADDR_OWVAR 20
45438: PUSH
45439: LD_INT 0
45441: ST_TO_ADDR
// uc_nation := 0 ;
45442: LD_ADDR_OWVAR 21
45446: PUSH
45447: LD_INT 0
45449: ST_TO_ADDR
// InitHc ;
45450: CALL_OW 19
// hc_class := class_horse ;
45454: LD_ADDR_OWVAR 28
45458: PUSH
45459: LD_INT 21
45461: ST_TO_ADDR
// hc_gallery :=  ;
45462: LD_ADDR_OWVAR 33
45466: PUSH
45467: LD_STRING 
45469: ST_TO_ADDR
// hc_name :=  ;
45470: LD_ADDR_OWVAR 26
45474: PUSH
45475: LD_STRING 
45477: ST_TO_ADDR
// end ;
45478: LD_VAR 0 1
45482: RET
// export function PrepareMastodont ( ) ; begin
45483: LD_INT 0
45485: PPUSH
// uc_side := 0 ;
45486: LD_ADDR_OWVAR 20
45490: PUSH
45491: LD_INT 0
45493: ST_TO_ADDR
// uc_nation := 0 ;
45494: LD_ADDR_OWVAR 21
45498: PUSH
45499: LD_INT 0
45501: ST_TO_ADDR
// vc_chassis := class_mastodont ;
45502: LD_ADDR_OWVAR 37
45506: PUSH
45507: LD_INT 31
45509: ST_TO_ADDR
// vc_control := control_rider ;
45510: LD_ADDR_OWVAR 38
45514: PUSH
45515: LD_INT 4
45517: ST_TO_ADDR
// end ;
45518: LD_VAR 0 1
45522: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45523: LD_INT 0
45525: PPUSH
45526: PPUSH
45527: PPUSH
// uc_side = 0 ;
45528: LD_ADDR_OWVAR 20
45532: PUSH
45533: LD_INT 0
45535: ST_TO_ADDR
// uc_nation = 0 ;
45536: LD_ADDR_OWVAR 21
45540: PUSH
45541: LD_INT 0
45543: ST_TO_ADDR
// InitHc_All ( ) ;
45544: CALL_OW 584
// InitVc ;
45548: CALL_OW 20
// if mastodonts then
45552: LD_VAR 0 6
45556: IFFALSE 45623
// for i = 1 to mastodonts do
45558: LD_ADDR_VAR 0 11
45562: PUSH
45563: DOUBLE
45564: LD_INT 1
45566: DEC
45567: ST_TO_ADDR
45568: LD_VAR 0 6
45572: PUSH
45573: FOR_TO
45574: IFFALSE 45621
// begin vc_chassis := 31 ;
45576: LD_ADDR_OWVAR 37
45580: PUSH
45581: LD_INT 31
45583: ST_TO_ADDR
// vc_control := control_rider ;
45584: LD_ADDR_OWVAR 38
45588: PUSH
45589: LD_INT 4
45591: ST_TO_ADDR
// animal := CreateVehicle ;
45592: LD_ADDR_VAR 0 12
45596: PUSH
45597: CALL_OW 45
45601: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45602: LD_VAR 0 12
45606: PPUSH
45607: LD_VAR 0 8
45611: PPUSH
45612: LD_INT 0
45614: PPUSH
45615: CALL 47765 0 3
// end ;
45619: GO 45573
45621: POP
45622: POP
// if horses then
45623: LD_VAR 0 5
45627: IFFALSE 45694
// for i = 1 to horses do
45629: LD_ADDR_VAR 0 11
45633: PUSH
45634: DOUBLE
45635: LD_INT 1
45637: DEC
45638: ST_TO_ADDR
45639: LD_VAR 0 5
45643: PUSH
45644: FOR_TO
45645: IFFALSE 45692
// begin hc_class := 21 ;
45647: LD_ADDR_OWVAR 28
45651: PUSH
45652: LD_INT 21
45654: ST_TO_ADDR
// hc_gallery :=  ;
45655: LD_ADDR_OWVAR 33
45659: PUSH
45660: LD_STRING 
45662: ST_TO_ADDR
// animal := CreateHuman ;
45663: LD_ADDR_VAR 0 12
45667: PUSH
45668: CALL_OW 44
45672: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45673: LD_VAR 0 12
45677: PPUSH
45678: LD_VAR 0 8
45682: PPUSH
45683: LD_INT 0
45685: PPUSH
45686: CALL 47765 0 3
// end ;
45690: GO 45644
45692: POP
45693: POP
// if birds then
45694: LD_VAR 0 1
45698: IFFALSE 45765
// for i = 1 to birds do
45700: LD_ADDR_VAR 0 11
45704: PUSH
45705: DOUBLE
45706: LD_INT 1
45708: DEC
45709: ST_TO_ADDR
45710: LD_VAR 0 1
45714: PUSH
45715: FOR_TO
45716: IFFALSE 45763
// begin hc_class := 18 ;
45718: LD_ADDR_OWVAR 28
45722: PUSH
45723: LD_INT 18
45725: ST_TO_ADDR
// hc_gallery =  ;
45726: LD_ADDR_OWVAR 33
45730: PUSH
45731: LD_STRING 
45733: ST_TO_ADDR
// animal := CreateHuman ;
45734: LD_ADDR_VAR 0 12
45738: PUSH
45739: CALL_OW 44
45743: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45744: LD_VAR 0 12
45748: PPUSH
45749: LD_VAR 0 8
45753: PPUSH
45754: LD_INT 0
45756: PPUSH
45757: CALL 47765 0 3
// end ;
45761: GO 45715
45763: POP
45764: POP
// if tigers then
45765: LD_VAR 0 2
45769: IFFALSE 45853
// for i = 1 to tigers do
45771: LD_ADDR_VAR 0 11
45775: PUSH
45776: DOUBLE
45777: LD_INT 1
45779: DEC
45780: ST_TO_ADDR
45781: LD_VAR 0 2
45785: PUSH
45786: FOR_TO
45787: IFFALSE 45851
// begin hc_class = class_tiger ;
45789: LD_ADDR_OWVAR 28
45793: PUSH
45794: LD_INT 14
45796: ST_TO_ADDR
// hc_gallery =  ;
45797: LD_ADDR_OWVAR 33
45801: PUSH
45802: LD_STRING 
45804: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45805: LD_ADDR_OWVAR 35
45809: PUSH
45810: LD_INT 7
45812: NEG
45813: PPUSH
45814: LD_INT 7
45816: PPUSH
45817: CALL_OW 12
45821: ST_TO_ADDR
// animal := CreateHuman ;
45822: LD_ADDR_VAR 0 12
45826: PUSH
45827: CALL_OW 44
45831: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45832: LD_VAR 0 12
45836: PPUSH
45837: LD_VAR 0 8
45841: PPUSH
45842: LD_INT 0
45844: PPUSH
45845: CALL 47765 0 3
// end ;
45849: GO 45786
45851: POP
45852: POP
// if apemans then
45853: LD_VAR 0 3
45857: IFFALSE 45980
// for i = 1 to apemans do
45859: LD_ADDR_VAR 0 11
45863: PUSH
45864: DOUBLE
45865: LD_INT 1
45867: DEC
45868: ST_TO_ADDR
45869: LD_VAR 0 3
45873: PUSH
45874: FOR_TO
45875: IFFALSE 45978
// begin hc_class = class_apeman ;
45877: LD_ADDR_OWVAR 28
45881: PUSH
45882: LD_INT 12
45884: ST_TO_ADDR
// hc_gallery =  ;
45885: LD_ADDR_OWVAR 33
45889: PUSH
45890: LD_STRING 
45892: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45893: LD_ADDR_OWVAR 35
45897: PUSH
45898: LD_INT 2
45900: NEG
45901: PPUSH
45902: LD_INT 2
45904: PPUSH
45905: CALL_OW 12
45909: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45910: LD_ADDR_OWVAR 31
45914: PUSH
45915: LD_INT 1
45917: PPUSH
45918: LD_INT 3
45920: PPUSH
45921: CALL_OW 12
45925: PUSH
45926: LD_INT 1
45928: PPUSH
45929: LD_INT 3
45931: PPUSH
45932: CALL_OW 12
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: ST_TO_ADDR
// animal := CreateHuman ;
45949: LD_ADDR_VAR 0 12
45953: PUSH
45954: CALL_OW 44
45958: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45959: LD_VAR 0 12
45963: PPUSH
45964: LD_VAR 0 8
45968: PPUSH
45969: LD_INT 0
45971: PPUSH
45972: CALL 47765 0 3
// end ;
45976: GO 45874
45978: POP
45979: POP
// if enchidnas then
45980: LD_VAR 0 4
45984: IFFALSE 46051
// for i = 1 to enchidnas do
45986: LD_ADDR_VAR 0 11
45990: PUSH
45991: DOUBLE
45992: LD_INT 1
45994: DEC
45995: ST_TO_ADDR
45996: LD_VAR 0 4
46000: PUSH
46001: FOR_TO
46002: IFFALSE 46049
// begin hc_class = 13 ;
46004: LD_ADDR_OWVAR 28
46008: PUSH
46009: LD_INT 13
46011: ST_TO_ADDR
// hc_gallery =  ;
46012: LD_ADDR_OWVAR 33
46016: PUSH
46017: LD_STRING 
46019: ST_TO_ADDR
// animal := CreateHuman ;
46020: LD_ADDR_VAR 0 12
46024: PUSH
46025: CALL_OW 44
46029: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46030: LD_VAR 0 12
46034: PPUSH
46035: LD_VAR 0 8
46039: PPUSH
46040: LD_INT 0
46042: PPUSH
46043: CALL 47765 0 3
// end ;
46047: GO 46001
46049: POP
46050: POP
// if fishes then
46051: LD_VAR 0 7
46055: IFFALSE 46122
// for i = 1 to fishes do
46057: LD_ADDR_VAR 0 11
46061: PUSH
46062: DOUBLE
46063: LD_INT 1
46065: DEC
46066: ST_TO_ADDR
46067: LD_VAR 0 7
46071: PUSH
46072: FOR_TO
46073: IFFALSE 46120
// begin hc_class = 20 ;
46075: LD_ADDR_OWVAR 28
46079: PUSH
46080: LD_INT 20
46082: ST_TO_ADDR
// hc_gallery =  ;
46083: LD_ADDR_OWVAR 33
46087: PUSH
46088: LD_STRING 
46090: ST_TO_ADDR
// animal := CreateHuman ;
46091: LD_ADDR_VAR 0 12
46095: PUSH
46096: CALL_OW 44
46100: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46101: LD_VAR 0 12
46105: PPUSH
46106: LD_VAR 0 9
46110: PPUSH
46111: LD_INT 0
46113: PPUSH
46114: CALL 47765 0 3
// end ;
46118: GO 46072
46120: POP
46121: POP
// end ;
46122: LD_VAR 0 10
46126: RET
// export function WantHeal ( sci , unit ) ; begin
46127: LD_INT 0
46129: PPUSH
// if GetTaskList ( sci ) > 0 then
46130: LD_VAR 0 1
46134: PPUSH
46135: CALL_OW 437
46139: PUSH
46140: LD_INT 0
46142: GREATER
46143: IFFALSE 46215
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46145: LD_VAR 0 1
46149: PPUSH
46150: CALL_OW 437
46154: PUSH
46155: LD_INT 1
46157: ARRAY
46158: PUSH
46159: LD_INT 1
46161: ARRAY
46162: PUSH
46163: LD_STRING l
46165: EQUAL
46166: IFFALSE 46193
46168: PUSH
46169: LD_VAR 0 1
46173: PPUSH
46174: CALL_OW 437
46178: PUSH
46179: LD_INT 1
46181: ARRAY
46182: PUSH
46183: LD_INT 4
46185: ARRAY
46186: PUSH
46187: LD_VAR 0 2
46191: EQUAL
46192: AND
46193: IFFALSE 46205
// result := true else
46195: LD_ADDR_VAR 0 3
46199: PUSH
46200: LD_INT 1
46202: ST_TO_ADDR
46203: GO 46213
// result := false ;
46205: LD_ADDR_VAR 0 3
46209: PUSH
46210: LD_INT 0
46212: ST_TO_ADDR
// end else
46213: GO 46223
// result := false ;
46215: LD_ADDR_VAR 0 3
46219: PUSH
46220: LD_INT 0
46222: ST_TO_ADDR
// end ;
46223: LD_VAR 0 3
46227: RET
// export function HealTarget ( sci ) ; begin
46228: LD_INT 0
46230: PPUSH
// if not sci then
46231: LD_VAR 0 1
46235: NOT
46236: IFFALSE 46240
// exit ;
46238: GO 46305
// result := 0 ;
46240: LD_ADDR_VAR 0 2
46244: PUSH
46245: LD_INT 0
46247: ST_TO_ADDR
// if GetTaskList ( sci ) then
46248: LD_VAR 0 1
46252: PPUSH
46253: CALL_OW 437
46257: IFFALSE 46305
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46259: LD_VAR 0 1
46263: PPUSH
46264: CALL_OW 437
46268: PUSH
46269: LD_INT 1
46271: ARRAY
46272: PUSH
46273: LD_INT 1
46275: ARRAY
46276: PUSH
46277: LD_STRING l
46279: EQUAL
46280: IFFALSE 46305
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46282: LD_ADDR_VAR 0 2
46286: PUSH
46287: LD_VAR 0 1
46291: PPUSH
46292: CALL_OW 437
46296: PUSH
46297: LD_INT 1
46299: ARRAY
46300: PUSH
46301: LD_INT 4
46303: ARRAY
46304: ST_TO_ADDR
// end ;
46305: LD_VAR 0 2
46309: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46310: LD_INT 0
46312: PPUSH
46313: PPUSH
46314: PPUSH
46315: PPUSH
// if not base_units then
46316: LD_VAR 0 1
46320: NOT
46321: IFFALSE 46325
// exit ;
46323: GO 46412
// result := false ;
46325: LD_ADDR_VAR 0 2
46329: PUSH
46330: LD_INT 0
46332: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46333: LD_ADDR_VAR 0 5
46337: PUSH
46338: LD_VAR 0 1
46342: PPUSH
46343: LD_INT 21
46345: PUSH
46346: LD_INT 3
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PPUSH
46353: CALL_OW 72
46357: ST_TO_ADDR
// if not tmp then
46358: LD_VAR 0 5
46362: NOT
46363: IFFALSE 46367
// exit ;
46365: GO 46412
// for i in tmp do
46367: LD_ADDR_VAR 0 3
46371: PUSH
46372: LD_VAR 0 5
46376: PUSH
46377: FOR_IN
46378: IFFALSE 46410
// begin result := EnemyInRange ( i , 22 ) ;
46380: LD_ADDR_VAR 0 2
46384: PUSH
46385: LD_VAR 0 3
46389: PPUSH
46390: LD_INT 22
46392: PPUSH
46393: CALL 43837 0 2
46397: ST_TO_ADDR
// if result then
46398: LD_VAR 0 2
46402: IFFALSE 46408
// exit ;
46404: POP
46405: POP
46406: GO 46412
// end ;
46408: GO 46377
46410: POP
46411: POP
// end ;
46412: LD_VAR 0 2
46416: RET
// export function FilterByTag ( units , tag ) ; begin
46417: LD_INT 0
46419: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
46420: LD_ADDR_VAR 0 3
46424: PUSH
46425: LD_VAR 0 1
46429: PPUSH
46430: LD_INT 120
46432: PUSH
46433: LD_VAR 0 2
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PPUSH
46442: CALL_OW 72
46446: ST_TO_ADDR
// end ;
46447: LD_VAR 0 3
46451: RET
// export function IsDriver ( un ) ; begin
46452: LD_INT 0
46454: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
46455: LD_ADDR_VAR 0 2
46459: PUSH
46460: LD_VAR 0 1
46464: PUSH
46465: LD_INT 55
46467: PUSH
46468: EMPTY
46469: LIST
46470: PPUSH
46471: CALL_OW 69
46475: IN
46476: ST_TO_ADDR
// end ;
46477: LD_VAR 0 2
46481: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
46482: LD_INT 0
46484: PPUSH
46485: PPUSH
// list := [ ] ;
46486: LD_ADDR_VAR 0 5
46490: PUSH
46491: EMPTY
46492: ST_TO_ADDR
// case d of 0 :
46493: LD_VAR 0 3
46497: PUSH
46498: LD_INT 0
46500: DOUBLE
46501: EQUAL
46502: IFTRUE 46506
46504: GO 46639
46506: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
46507: LD_ADDR_VAR 0 5
46511: PUSH
46512: LD_VAR 0 1
46516: PUSH
46517: LD_INT 4
46519: MINUS
46520: PUSH
46521: LD_VAR 0 2
46525: PUSH
46526: LD_INT 4
46528: MINUS
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: LIST
46537: PUSH
46538: LD_VAR 0 1
46542: PUSH
46543: LD_INT 3
46545: MINUS
46546: PUSH
46547: LD_VAR 0 2
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: PUSH
46560: LD_VAR 0 1
46564: PUSH
46565: LD_INT 4
46567: PLUS
46568: PUSH
46569: LD_VAR 0 2
46573: PUSH
46574: LD_INT 4
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: LIST
46581: PUSH
46582: LD_VAR 0 1
46586: PUSH
46587: LD_INT 3
46589: PLUS
46590: PUSH
46591: LD_VAR 0 2
46595: PUSH
46596: LD_INT 3
46598: PLUS
46599: PUSH
46600: LD_INT 5
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: LIST
46607: PUSH
46608: LD_VAR 0 1
46612: PUSH
46613: LD_VAR 0 2
46617: PUSH
46618: LD_INT 4
46620: PLUS
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: LIST
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: ST_TO_ADDR
// end ; 1 :
46637: GO 47337
46639: LD_INT 1
46641: DOUBLE
46642: EQUAL
46643: IFTRUE 46647
46645: GO 46780
46647: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46648: LD_ADDR_VAR 0 5
46652: PUSH
46653: LD_VAR 0 1
46657: PUSH
46658: LD_VAR 0 2
46662: PUSH
46663: LD_INT 4
46665: MINUS
46666: PUSH
46667: LD_INT 3
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: LIST
46674: PUSH
46675: LD_VAR 0 1
46679: PUSH
46680: LD_INT 3
46682: MINUS
46683: PUSH
46684: LD_VAR 0 2
46688: PUSH
46689: LD_INT 3
46691: MINUS
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: LIST
46700: PUSH
46701: LD_VAR 0 1
46705: PUSH
46706: LD_INT 4
46708: MINUS
46709: PUSH
46710: LD_VAR 0 2
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: LIST
46722: PUSH
46723: LD_VAR 0 1
46727: PUSH
46728: LD_VAR 0 2
46732: PUSH
46733: LD_INT 3
46735: PLUS
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: LIST
46744: PUSH
46745: LD_VAR 0 1
46749: PUSH
46750: LD_INT 4
46752: PLUS
46753: PUSH
46754: LD_VAR 0 2
46758: PUSH
46759: LD_INT 4
46761: PLUS
46762: PUSH
46763: LD_INT 5
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: LIST
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: ST_TO_ADDR
// end ; 2 :
46778: GO 47337
46780: LD_INT 2
46782: DOUBLE
46783: EQUAL
46784: IFTRUE 46788
46786: GO 46917
46788: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46789: LD_ADDR_VAR 0 5
46793: PUSH
46794: LD_VAR 0 1
46798: PUSH
46799: LD_VAR 0 2
46803: PUSH
46804: LD_INT 3
46806: MINUS
46807: PUSH
46808: LD_INT 3
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: LIST
46815: PUSH
46816: LD_VAR 0 1
46820: PUSH
46821: LD_INT 4
46823: PLUS
46824: PUSH
46825: LD_VAR 0 2
46829: PUSH
46830: LD_INT 4
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: LIST
46837: PUSH
46838: LD_VAR 0 1
46842: PUSH
46843: LD_VAR 0 2
46847: PUSH
46848: LD_INT 4
46850: PLUS
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: LIST
46859: PUSH
46860: LD_VAR 0 1
46864: PUSH
46865: LD_INT 3
46867: MINUS
46868: PUSH
46869: LD_VAR 0 2
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: LIST
46881: PUSH
46882: LD_VAR 0 1
46886: PUSH
46887: LD_INT 4
46889: MINUS
46890: PUSH
46891: LD_VAR 0 2
46895: PUSH
46896: LD_INT 4
46898: MINUS
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: LIST
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: ST_TO_ADDR
// end ; 3 :
46915: GO 47337
46917: LD_INT 3
46919: DOUBLE
46920: EQUAL
46921: IFTRUE 46925
46923: GO 47058
46925: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46926: LD_ADDR_VAR 0 5
46930: PUSH
46931: LD_VAR 0 1
46935: PUSH
46936: LD_INT 3
46938: PLUS
46939: PUSH
46940: LD_VAR 0 2
46944: PUSH
46945: LD_INT 4
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: LIST
46952: PUSH
46953: LD_VAR 0 1
46957: PUSH
46958: LD_INT 4
46960: PLUS
46961: PUSH
46962: LD_VAR 0 2
46966: PUSH
46967: LD_INT 4
46969: PLUS
46970: PUSH
46971: LD_INT 5
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: LIST
46978: PUSH
46979: LD_VAR 0 1
46983: PUSH
46984: LD_INT 4
46986: MINUS
46987: PUSH
46988: LD_VAR 0 2
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: LIST
47000: PUSH
47001: LD_VAR 0 1
47005: PUSH
47006: LD_VAR 0 2
47010: PUSH
47011: LD_INT 4
47013: MINUS
47014: PUSH
47015: LD_INT 3
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: LIST
47022: PUSH
47023: LD_VAR 0 1
47027: PUSH
47028: LD_INT 3
47030: MINUS
47031: PUSH
47032: LD_VAR 0 2
47036: PUSH
47037: LD_INT 3
47039: MINUS
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: LIST
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: ST_TO_ADDR
// end ; 4 :
47056: GO 47337
47058: LD_INT 4
47060: DOUBLE
47061: EQUAL
47062: IFTRUE 47066
47064: GO 47199
47066: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47067: LD_ADDR_VAR 0 5
47071: PUSH
47072: LD_VAR 0 1
47076: PUSH
47077: LD_VAR 0 2
47081: PUSH
47082: LD_INT 4
47084: PLUS
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: LIST
47093: PUSH
47094: LD_VAR 0 1
47098: PUSH
47099: LD_INT 3
47101: PLUS
47102: PUSH
47103: LD_VAR 0 2
47107: PUSH
47108: LD_INT 3
47110: PLUS
47111: PUSH
47112: LD_INT 5
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: LIST
47119: PUSH
47120: LD_VAR 0 1
47124: PUSH
47125: LD_INT 4
47127: PLUS
47128: PUSH
47129: LD_VAR 0 2
47133: PUSH
47134: LD_INT 4
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: LIST
47141: PUSH
47142: LD_VAR 0 1
47146: PUSH
47147: LD_VAR 0 2
47151: PUSH
47152: LD_INT 3
47154: MINUS
47155: PUSH
47156: LD_INT 3
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: LIST
47163: PUSH
47164: LD_VAR 0 1
47168: PUSH
47169: LD_INT 4
47171: MINUS
47172: PUSH
47173: LD_VAR 0 2
47177: PUSH
47178: LD_INT 4
47180: MINUS
47181: PUSH
47182: LD_INT 2
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: LIST
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: ST_TO_ADDR
// end ; 5 :
47197: GO 47337
47199: LD_INT 5
47201: DOUBLE
47202: EQUAL
47203: IFTRUE 47207
47205: GO 47336
47207: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47208: LD_ADDR_VAR 0 5
47212: PUSH
47213: LD_VAR 0 1
47217: PUSH
47218: LD_INT 4
47220: MINUS
47221: PUSH
47222: LD_VAR 0 2
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: LIST
47234: PUSH
47235: LD_VAR 0 1
47239: PUSH
47240: LD_VAR 0 2
47244: PUSH
47245: LD_INT 4
47247: MINUS
47248: PUSH
47249: LD_INT 3
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: LIST
47256: PUSH
47257: LD_VAR 0 1
47261: PUSH
47262: LD_INT 4
47264: PLUS
47265: PUSH
47266: LD_VAR 0 2
47270: PUSH
47271: LD_INT 4
47273: PLUS
47274: PUSH
47275: LD_INT 5
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: LIST
47282: PUSH
47283: LD_VAR 0 1
47287: PUSH
47288: LD_INT 3
47290: PLUS
47291: PUSH
47292: LD_VAR 0 2
47296: PUSH
47297: LD_INT 4
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: LIST
47304: PUSH
47305: LD_VAR 0 1
47309: PUSH
47310: LD_VAR 0 2
47314: PUSH
47315: LD_INT 3
47317: PLUS
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: LIST
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: ST_TO_ADDR
// end ; end ;
47334: GO 47337
47336: POP
// result := list ;
47337: LD_ADDR_VAR 0 4
47341: PUSH
47342: LD_VAR 0 5
47346: ST_TO_ADDR
// end ;
47347: LD_VAR 0 4
47351: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47352: LD_INT 0
47354: PPUSH
47355: PPUSH
47356: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47357: LD_VAR 0 1
47361: NOT
47362: IFTRUE 47390
47364: PUSH
47365: LD_VAR 0 2
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 2
47375: PUSH
47376: LD_INT 3
47378: PUSH
47379: LD_INT 4
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: IN
47388: NOT
47389: OR
47390: IFFALSE 47394
// exit ;
47392: GO 47477
// tmp := [ ] ;
47394: LD_ADDR_VAR 0 5
47398: PUSH
47399: EMPTY
47400: ST_TO_ADDR
// for i in units do
47401: LD_ADDR_VAR 0 4
47405: PUSH
47406: LD_VAR 0 1
47410: PUSH
47411: FOR_IN
47412: IFFALSE 47446
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
47414: LD_ADDR_VAR 0 5
47418: PUSH
47419: LD_VAR 0 5
47423: PPUSH
47424: LD_VAR 0 4
47428: PPUSH
47429: LD_VAR 0 2
47433: PPUSH
47434: CALL_OW 259
47438: PPUSH
47439: CALL 48872 0 2
47443: ST_TO_ADDR
47444: GO 47411
47446: POP
47447: POP
// if not tmp then
47448: LD_VAR 0 5
47452: NOT
47453: IFFALSE 47457
// exit ;
47455: GO 47477
// result := SortListByListDesc ( units , tmp ) ;
47457: LD_ADDR_VAR 0 3
47461: PUSH
47462: LD_VAR 0 1
47466: PPUSH
47467: LD_VAR 0 5
47471: PPUSH
47472: CALL_OW 77
47476: ST_TO_ADDR
// end ;
47477: LD_VAR 0 3
47481: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
47482: LD_INT 0
47484: PPUSH
47485: PPUSH
47486: PPUSH
// result := false ;
47487: LD_ADDR_VAR 0 3
47491: PUSH
47492: LD_INT 0
47494: ST_TO_ADDR
// if not building then
47495: LD_VAR 0 2
47499: NOT
47500: IFFALSE 47504
// exit ;
47502: GO 47648
// x := GetX ( building ) ;
47504: LD_ADDR_VAR 0 4
47508: PUSH
47509: LD_VAR 0 2
47513: PPUSH
47514: CALL_OW 250
47518: ST_TO_ADDR
// y := GetY ( building ) ;
47519: LD_ADDR_VAR 0 5
47523: PUSH
47524: LD_VAR 0 2
47528: PPUSH
47529: CALL_OW 251
47533: ST_TO_ADDR
// if not x or not y then
47534: LD_VAR 0 4
47538: NOT
47539: IFTRUE 47548
47541: PUSH
47542: LD_VAR 0 5
47546: NOT
47547: OR
47548: IFFALSE 47552
// exit ;
47550: GO 47648
// if GetTaskList ( unit ) then
47552: LD_VAR 0 1
47556: PPUSH
47557: CALL_OW 437
47561: IFFALSE 47648
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47563: LD_STRING e
47565: PUSH
47566: LD_VAR 0 1
47570: PPUSH
47571: CALL_OW 437
47575: PUSH
47576: LD_INT 1
47578: ARRAY
47579: PUSH
47580: LD_INT 1
47582: ARRAY
47583: EQUAL
47584: IFFALSE 47611
47586: PUSH
47587: LD_VAR 0 4
47591: PUSH
47592: LD_VAR 0 1
47596: PPUSH
47597: CALL_OW 437
47601: PUSH
47602: LD_INT 1
47604: ARRAY
47605: PUSH
47606: LD_INT 2
47608: ARRAY
47609: EQUAL
47610: AND
47611: IFFALSE 47638
47613: PUSH
47614: LD_VAR 0 5
47618: PUSH
47619: LD_VAR 0 1
47623: PPUSH
47624: CALL_OW 437
47628: PUSH
47629: LD_INT 1
47631: ARRAY
47632: PUSH
47633: LD_INT 3
47635: ARRAY
47636: EQUAL
47637: AND
47638: IFFALSE 47648
// result := true end ;
47640: LD_ADDR_VAR 0 3
47644: PUSH
47645: LD_INT 1
47647: ST_TO_ADDR
// end ;
47648: LD_VAR 0 3
47652: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
47653: LD_INT 0
47655: PPUSH
// result := false ;
47656: LD_ADDR_VAR 0 4
47660: PUSH
47661: LD_INT 0
47663: ST_TO_ADDR
// if GetTaskList ( unit ) then
47664: LD_VAR 0 1
47668: PPUSH
47669: CALL_OW 437
47673: IFFALSE 47760
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47675: LD_STRING M
47677: PUSH
47678: LD_VAR 0 1
47682: PPUSH
47683: CALL_OW 437
47687: PUSH
47688: LD_INT 1
47690: ARRAY
47691: PUSH
47692: LD_INT 1
47694: ARRAY
47695: EQUAL
47696: IFFALSE 47723
47698: PUSH
47699: LD_VAR 0 2
47703: PUSH
47704: LD_VAR 0 1
47708: PPUSH
47709: CALL_OW 437
47713: PUSH
47714: LD_INT 1
47716: ARRAY
47717: PUSH
47718: LD_INT 2
47720: ARRAY
47721: EQUAL
47722: AND
47723: IFFALSE 47750
47725: PUSH
47726: LD_VAR 0 3
47730: PUSH
47731: LD_VAR 0 1
47735: PPUSH
47736: CALL_OW 437
47740: PUSH
47741: LD_INT 1
47743: ARRAY
47744: PUSH
47745: LD_INT 3
47747: ARRAY
47748: EQUAL
47749: AND
47750: IFFALSE 47760
// result := true ;
47752: LD_ADDR_VAR 0 4
47756: PUSH
47757: LD_INT 1
47759: ST_TO_ADDR
// end ; end ;
47760: LD_VAR 0 4
47764: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47765: LD_INT 0
47767: PPUSH
47768: PPUSH
47769: PPUSH
47770: PPUSH
// if not unit or not area then
47771: LD_VAR 0 1
47775: NOT
47776: IFTRUE 47785
47778: PUSH
47779: LD_VAR 0 2
47783: NOT
47784: OR
47785: IFFALSE 47789
// exit ;
47787: GO 47965
// tmp := AreaToList ( area , i ) ;
47789: LD_ADDR_VAR 0 6
47793: PUSH
47794: LD_VAR 0 2
47798: PPUSH
47799: LD_VAR 0 5
47803: PPUSH
47804: CALL_OW 517
47808: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47809: LD_ADDR_VAR 0 5
47813: PUSH
47814: DOUBLE
47815: LD_INT 1
47817: DEC
47818: ST_TO_ADDR
47819: LD_VAR 0 6
47823: PUSH
47824: LD_INT 1
47826: ARRAY
47827: PUSH
47828: FOR_TO
47829: IFFALSE 47963
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47831: LD_ADDR_VAR 0 7
47835: PUSH
47836: LD_VAR 0 6
47840: PUSH
47841: LD_INT 1
47843: ARRAY
47844: PUSH
47845: LD_VAR 0 5
47849: ARRAY
47850: PUSH
47851: LD_VAR 0 6
47855: PUSH
47856: LD_INT 2
47858: ARRAY
47859: PUSH
47860: LD_VAR 0 5
47864: ARRAY
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47870: LD_INT 92
47872: PUSH
47873: LD_VAR 0 7
47877: PUSH
47878: LD_INT 1
47880: ARRAY
47881: PUSH
47882: LD_VAR 0 7
47886: PUSH
47887: LD_INT 2
47889: ARRAY
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: PPUSH
47900: CALL_OW 69
47904: PUSH
47905: LD_INT 0
47907: EQUAL
47908: IFFALSE 47961
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47910: LD_VAR 0 1
47914: PPUSH
47915: LD_VAR 0 7
47919: PUSH
47920: LD_INT 1
47922: ARRAY
47923: PPUSH
47924: LD_VAR 0 7
47928: PUSH
47929: LD_INT 2
47931: ARRAY
47932: PPUSH
47933: LD_VAR 0 3
47937: PPUSH
47938: CALL_OW 48
// result := IsPlaced ( unit ) ;
47942: LD_ADDR_VAR 0 4
47946: PUSH
47947: LD_VAR 0 1
47951: PPUSH
47952: CALL_OW 305
47956: ST_TO_ADDR
// exit ;
47957: POP
47958: POP
47959: GO 47965
// end ; end ;
47961: GO 47828
47963: POP
47964: POP
// end ;
47965: LD_VAR 0 4
47969: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47970: LD_INT 0
47972: PPUSH
47973: PPUSH
47974: PPUSH
// if not side or side > 8 then
47975: LD_VAR 0 1
47979: NOT
47980: IFTRUE 47992
47982: PUSH
47983: LD_VAR 0 1
47987: PUSH
47988: LD_INT 8
47990: GREATER
47991: OR
47992: IFFALSE 47996
// exit ;
47994: GO 48183
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47996: LD_ADDR_VAR 0 4
48000: PUSH
48001: LD_INT 22
48003: PUSH
48004: LD_VAR 0 1
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 21
48015: PUSH
48016: LD_INT 3
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PPUSH
48027: CALL_OW 69
48031: ST_TO_ADDR
// if not tmp then
48032: LD_VAR 0 4
48036: NOT
48037: IFFALSE 48041
// exit ;
48039: GO 48183
// enable_addtolog := true ;
48041: LD_ADDR_OWVAR 81
48045: PUSH
48046: LD_INT 1
48048: ST_TO_ADDR
// AddToLog ( [ ) ;
48049: LD_STRING [
48051: PPUSH
48052: CALL_OW 561
// for i in tmp do
48056: LD_ADDR_VAR 0 3
48060: PUSH
48061: LD_VAR 0 4
48065: PUSH
48066: FOR_IN
48067: IFFALSE 48174
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48069: LD_STRING [
48071: PUSH
48072: LD_VAR 0 3
48076: PPUSH
48077: CALL_OW 266
48081: STR
48082: PUSH
48083: LD_STRING , 
48085: STR
48086: PUSH
48087: LD_VAR 0 3
48091: PPUSH
48092: CALL_OW 250
48096: STR
48097: PUSH
48098: LD_STRING , 
48100: STR
48101: PUSH
48102: LD_VAR 0 3
48106: PPUSH
48107: CALL_OW 251
48111: STR
48112: PUSH
48113: LD_STRING , 
48115: STR
48116: PUSH
48117: LD_VAR 0 3
48121: PPUSH
48122: CALL_OW 254
48126: STR
48127: PUSH
48128: LD_STRING , 
48130: STR
48131: PUSH
48132: LD_VAR 0 3
48136: PPUSH
48137: LD_INT 1
48139: PPUSH
48140: CALL_OW 268
48144: STR
48145: PUSH
48146: LD_STRING , 
48148: STR
48149: PUSH
48150: LD_VAR 0 3
48154: PPUSH
48155: LD_INT 2
48157: PPUSH
48158: CALL_OW 268
48162: STR
48163: PUSH
48164: LD_STRING ],
48166: STR
48167: PPUSH
48168: CALL_OW 561
// end ;
48172: GO 48066
48174: POP
48175: POP
// AddToLog ( ]; ) ;
48176: LD_STRING ];
48178: PPUSH
48179: CALL_OW 561
// end ;
48183: LD_VAR 0 2
48187: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48188: LD_INT 0
48190: PPUSH
48191: PPUSH
48192: PPUSH
48193: PPUSH
48194: PPUSH
// if not area or not rate or not max then
48195: LD_VAR 0 1
48199: NOT
48200: IFTRUE 48209
48202: PUSH
48203: LD_VAR 0 2
48207: NOT
48208: OR
48209: IFTRUE 48218
48211: PUSH
48212: LD_VAR 0 4
48216: NOT
48217: OR
48218: IFFALSE 48222
// exit ;
48220: GO 48411
// while 1 do
48222: LD_INT 1
48224: IFFALSE 48411
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48226: LD_ADDR_VAR 0 9
48230: PUSH
48231: LD_VAR 0 1
48235: PPUSH
48236: LD_INT 1
48238: PPUSH
48239: CALL_OW 287
48243: PUSH
48244: LD_INT 10
48246: MUL
48247: ST_TO_ADDR
// r := rate / 10 ;
48248: LD_ADDR_VAR 0 7
48252: PUSH
48253: LD_VAR 0 2
48257: PUSH
48258: LD_INT 10
48260: DIVREAL
48261: ST_TO_ADDR
// time := 1 1$00 ;
48262: LD_ADDR_VAR 0 8
48266: PUSH
48267: LD_INT 2100
48269: ST_TO_ADDR
// if amount < min then
48270: LD_VAR 0 9
48274: PUSH
48275: LD_VAR 0 3
48279: LESS
48280: IFFALSE 48298
// r := r * 2 else
48282: LD_ADDR_VAR 0 7
48286: PUSH
48287: LD_VAR 0 7
48291: PUSH
48292: LD_INT 2
48294: MUL
48295: ST_TO_ADDR
48296: GO 48324
// if amount > max then
48298: LD_VAR 0 9
48302: PUSH
48303: LD_VAR 0 4
48307: GREATER
48308: IFFALSE 48324
// r := r / 2 ;
48310: LD_ADDR_VAR 0 7
48314: PUSH
48315: LD_VAR 0 7
48319: PUSH
48320: LD_INT 2
48322: DIVREAL
48323: ST_TO_ADDR
// time := time / r ;
48324: LD_ADDR_VAR 0 8
48328: PUSH
48329: LD_VAR 0 8
48333: PUSH
48334: LD_VAR 0 7
48338: DIVREAL
48339: ST_TO_ADDR
// if time < 0 then
48340: LD_VAR 0 8
48344: PUSH
48345: LD_INT 0
48347: LESS
48348: IFFALSE 48365
// time := time * - 1 ;
48350: LD_ADDR_VAR 0 8
48354: PUSH
48355: LD_VAR 0 8
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: MUL
48364: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
48365: LD_VAR 0 8
48369: PUSH
48370: LD_INT 35
48372: PPUSH
48373: LD_INT 875
48375: PPUSH
48376: CALL_OW 12
48380: PLUS
48381: PPUSH
48382: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48386: LD_INT 1
48388: PPUSH
48389: LD_INT 5
48391: PPUSH
48392: CALL_OW 12
48396: PPUSH
48397: LD_VAR 0 1
48401: PPUSH
48402: LD_INT 1
48404: PPUSH
48405: CALL_OW 55
// end ;
48409: GO 48222
// end ;
48411: LD_VAR 0 5
48415: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48416: LD_INT 0
48418: PPUSH
48419: PPUSH
48420: PPUSH
48421: PPUSH
48422: PPUSH
48423: PPUSH
48424: PPUSH
48425: PPUSH
// if not turrets or not factories then
48426: LD_VAR 0 1
48430: NOT
48431: IFTRUE 48440
48433: PUSH
48434: LD_VAR 0 2
48438: NOT
48439: OR
48440: IFFALSE 48444
// exit ;
48442: GO 48751
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48444: LD_ADDR_VAR 0 10
48448: PUSH
48449: LD_INT 5
48451: PUSH
48452: LD_INT 6
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: LD_INT 4
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 3
48471: PUSH
48472: LD_INT 5
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 24
48486: PUSH
48487: LD_INT 25
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 23
48496: PUSH
48497: LD_INT 27
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 42
48510: PUSH
48511: LD_INT 43
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 44
48520: PUSH
48521: LD_INT 46
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 45
48530: PUSH
48531: LD_INT 47
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: LIST
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: LIST
48547: ST_TO_ADDR
// result := [ ] ;
48548: LD_ADDR_VAR 0 3
48552: PUSH
48553: EMPTY
48554: ST_TO_ADDR
// for i in turrets do
48555: LD_ADDR_VAR 0 4
48559: PUSH
48560: LD_VAR 0 1
48564: PUSH
48565: FOR_IN
48566: IFFALSE 48749
// begin nat := GetNation ( i ) ;
48568: LD_ADDR_VAR 0 7
48572: PUSH
48573: LD_VAR 0 4
48577: PPUSH
48578: CALL_OW 248
48582: ST_TO_ADDR
// weapon := 0 ;
48583: LD_ADDR_VAR 0 8
48587: PUSH
48588: LD_INT 0
48590: ST_TO_ADDR
// if not nat then
48591: LD_VAR 0 7
48595: NOT
48596: IFFALSE 48600
// continue ;
48598: GO 48565
// for j in list [ nat ] do
48600: LD_ADDR_VAR 0 5
48604: PUSH
48605: LD_VAR 0 10
48609: PUSH
48610: LD_VAR 0 7
48614: ARRAY
48615: PUSH
48616: FOR_IN
48617: IFFALSE 48658
// if GetBWeapon ( i ) = j [ 1 ] then
48619: LD_VAR 0 4
48623: PPUSH
48624: CALL_OW 269
48628: PUSH
48629: LD_VAR 0 5
48633: PUSH
48634: LD_INT 1
48636: ARRAY
48637: EQUAL
48638: IFFALSE 48656
// begin weapon := j [ 2 ] ;
48640: LD_ADDR_VAR 0 8
48644: PUSH
48645: LD_VAR 0 5
48649: PUSH
48650: LD_INT 2
48652: ARRAY
48653: ST_TO_ADDR
// break ;
48654: GO 48658
// end ;
48656: GO 48616
48658: POP
48659: POP
// if not weapon then
48660: LD_VAR 0 8
48664: NOT
48665: IFFALSE 48669
// continue ;
48667: GO 48565
// for k in factories do
48669: LD_ADDR_VAR 0 6
48673: PUSH
48674: LD_VAR 0 2
48678: PUSH
48679: FOR_IN
48680: IFFALSE 48745
// begin weapons := AvailableWeaponList ( k ) ;
48682: LD_ADDR_VAR 0 9
48686: PUSH
48687: LD_VAR 0 6
48691: PPUSH
48692: CALL_OW 478
48696: ST_TO_ADDR
// if not weapons then
48697: LD_VAR 0 9
48701: NOT
48702: IFFALSE 48706
// continue ;
48704: GO 48679
// if weapon in weapons then
48706: LD_VAR 0 8
48710: PUSH
48711: LD_VAR 0 9
48715: IN
48716: IFFALSE 48743
// begin result := [ i , weapon ] ;
48718: LD_ADDR_VAR 0 3
48722: PUSH
48723: LD_VAR 0 4
48727: PUSH
48728: LD_VAR 0 8
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: ST_TO_ADDR
// exit ;
48737: POP
48738: POP
48739: POP
48740: POP
48741: GO 48751
// end ; end ;
48743: GO 48679
48745: POP
48746: POP
// end ;
48747: GO 48565
48749: POP
48750: POP
// end ;
48751: LD_VAR 0 3
48755: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48756: LD_INT 0
48758: PPUSH
// if not side or side > 8 then
48759: LD_VAR 0 3
48763: NOT
48764: IFTRUE 48776
48766: PUSH
48767: LD_VAR 0 3
48771: PUSH
48772: LD_INT 8
48774: GREATER
48775: OR
48776: IFFALSE 48780
// exit ;
48778: GO 48839
// if not range then
48780: LD_VAR 0 4
48784: NOT
48785: IFFALSE 48796
// range := - 12 ;
48787: LD_ADDR_VAR 0 4
48791: PUSH
48792: LD_INT 12
48794: NEG
48795: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48796: LD_VAR 0 1
48800: PPUSH
48801: LD_VAR 0 2
48805: PPUSH
48806: LD_VAR 0 3
48810: PPUSH
48811: LD_VAR 0 4
48815: PPUSH
48816: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48820: LD_VAR 0 1
48824: PPUSH
48825: LD_VAR 0 2
48829: PPUSH
48830: LD_VAR 0 3
48834: PPUSH
48835: CALL_OW 331
// end ;
48839: LD_VAR 0 5
48843: RET
// export function Video ( mode ) ; begin
48844: LD_INT 0
48846: PPUSH
// ingame_video = mode ;
48847: LD_ADDR_OWVAR 52
48851: PUSH
48852: LD_VAR 0 1
48856: ST_TO_ADDR
// interface_hidden = mode ;
48857: LD_ADDR_OWVAR 54
48861: PUSH
48862: LD_VAR 0 1
48866: ST_TO_ADDR
// end ;
48867: LD_VAR 0 2
48871: RET
// export function Join ( array , element ) ; begin
48872: LD_INT 0
48874: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48875: LD_ADDR_VAR 0 3
48879: PUSH
48880: LD_VAR 0 1
48884: PPUSH
48885: LD_VAR 0 1
48889: PUSH
48890: LD_INT 1
48892: PLUS
48893: PPUSH
48894: LD_VAR 0 2
48898: PPUSH
48899: CALL_OW 1
48903: ST_TO_ADDR
// end ;
48904: LD_VAR 0 3
48908: RET
// export function JoinUnion ( array , element ) ; begin
48909: LD_INT 0
48911: PPUSH
// result := array union element ;
48912: LD_ADDR_VAR 0 3
48916: PUSH
48917: LD_VAR 0 1
48921: PUSH
48922: LD_VAR 0 2
48926: UNION
48927: ST_TO_ADDR
// end ;
48928: LD_VAR 0 3
48932: RET
// export function GetBehemoths ( side ) ; begin
48933: LD_INT 0
48935: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48936: LD_ADDR_VAR 0 2
48940: PUSH
48941: LD_INT 22
48943: PUSH
48944: LD_VAR 0 1
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 31
48955: PUSH
48956: LD_INT 25
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PPUSH
48967: CALL_OW 69
48971: ST_TO_ADDR
// end ;
48972: LD_VAR 0 2
48976: RET
// export function Shuffle ( array ) ; var i , index ; begin
48977: LD_INT 0
48979: PPUSH
48980: PPUSH
48981: PPUSH
// result := [ ] ;
48982: LD_ADDR_VAR 0 2
48986: PUSH
48987: EMPTY
48988: ST_TO_ADDR
// if not array then
48989: LD_VAR 0 1
48993: NOT
48994: IFFALSE 48998
// exit ;
48996: GO 49097
// Randomize ;
48998: CALL_OW 10
// for i = array downto 1 do
49002: LD_ADDR_VAR 0 3
49006: PUSH
49007: DOUBLE
49008: LD_VAR 0 1
49012: INC
49013: ST_TO_ADDR
49014: LD_INT 1
49016: PUSH
49017: FOR_DOWNTO
49018: IFFALSE 49095
// begin index := rand ( 1 , array ) ;
49020: LD_ADDR_VAR 0 4
49024: PUSH
49025: LD_INT 1
49027: PPUSH
49028: LD_VAR 0 1
49032: PPUSH
49033: CALL_OW 12
49037: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49038: LD_ADDR_VAR 0 2
49042: PUSH
49043: LD_VAR 0 2
49047: PPUSH
49048: LD_VAR 0 2
49052: PUSH
49053: LD_INT 1
49055: PLUS
49056: PPUSH
49057: LD_VAR 0 1
49061: PUSH
49062: LD_VAR 0 4
49066: ARRAY
49067: PPUSH
49068: CALL_OW 2
49072: ST_TO_ADDR
// array := Delete ( array , index ) ;
49073: LD_ADDR_VAR 0 1
49077: PUSH
49078: LD_VAR 0 1
49082: PPUSH
49083: LD_VAR 0 4
49087: PPUSH
49088: CALL_OW 3
49092: ST_TO_ADDR
// end ;
49093: GO 49017
49095: POP
49096: POP
// end ;
49097: LD_VAR 0 2
49101: RET
// export function GetBaseMaterials ( base ) ; begin
49102: LD_INT 0
49104: PPUSH
// result := [ 0 , 0 , 0 ] ;
49105: LD_ADDR_VAR 0 2
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: LIST
49123: ST_TO_ADDR
// if not base then
49124: LD_VAR 0 1
49128: NOT
49129: IFFALSE 49133
// exit ;
49131: GO 49182
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49133: LD_ADDR_VAR 0 2
49137: PUSH
49138: LD_VAR 0 1
49142: PPUSH
49143: LD_INT 1
49145: PPUSH
49146: CALL_OW 275
49150: PUSH
49151: LD_VAR 0 1
49155: PPUSH
49156: LD_INT 2
49158: PPUSH
49159: CALL_OW 275
49163: PUSH
49164: LD_VAR 0 1
49168: PPUSH
49169: LD_INT 3
49171: PPUSH
49172: CALL_OW 275
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: LIST
49181: ST_TO_ADDR
// end ;
49182: LD_VAR 0 2
49186: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49187: LD_INT 0
49189: PPUSH
49190: PPUSH
// result := array ;
49191: LD_ADDR_VAR 0 3
49195: PUSH
49196: LD_VAR 0 1
49200: ST_TO_ADDR
// if size >= result then
49201: LD_VAR 0 2
49205: PUSH
49206: LD_VAR 0 3
49210: GREATEREQUAL
49211: IFFALSE 49215
// exit ;
49213: GO 49265
// if size then
49215: LD_VAR 0 2
49219: IFFALSE 49265
// for i := array downto size do
49221: LD_ADDR_VAR 0 4
49225: PUSH
49226: DOUBLE
49227: LD_VAR 0 1
49231: INC
49232: ST_TO_ADDR
49233: LD_VAR 0 2
49237: PUSH
49238: FOR_DOWNTO
49239: IFFALSE 49263
// result := Delete ( result , result ) ;
49241: LD_ADDR_VAR 0 3
49245: PUSH
49246: LD_VAR 0 3
49250: PPUSH
49251: LD_VAR 0 3
49255: PPUSH
49256: CALL_OW 3
49260: ST_TO_ADDR
49261: GO 49238
49263: POP
49264: POP
// end ;
49265: LD_VAR 0 3
49269: RET
// export function ComExit ( unit ) ; var tmp ; begin
49270: LD_INT 0
49272: PPUSH
49273: PPUSH
// if not IsInUnit ( unit ) then
49274: LD_VAR 0 1
49278: PPUSH
49279: CALL_OW 310
49283: NOT
49284: IFFALSE 49288
// exit ;
49286: GO 49348
// tmp := IsInUnit ( unit ) ;
49288: LD_ADDR_VAR 0 3
49292: PUSH
49293: LD_VAR 0 1
49297: PPUSH
49298: CALL_OW 310
49302: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49303: LD_VAR 0 3
49307: PPUSH
49308: CALL_OW 247
49312: PUSH
49313: LD_INT 2
49315: EQUAL
49316: IFFALSE 49329
// ComExitVehicle ( unit ) else
49318: LD_VAR 0 1
49322: PPUSH
49323: CALL_OW 121
49327: GO 49338
// ComExitBuilding ( unit ) ;
49329: LD_VAR 0 1
49333: PPUSH
49334: CALL_OW 122
// result := tmp ;
49338: LD_ADDR_VAR 0 2
49342: PUSH
49343: LD_VAR 0 3
49347: ST_TO_ADDR
// end ;
49348: LD_VAR 0 2
49352: RET
// export function ComExitAll ( units ) ; var i ; begin
49353: LD_INT 0
49355: PPUSH
49356: PPUSH
// if not units then
49357: LD_VAR 0 1
49361: NOT
49362: IFFALSE 49366
// exit ;
49364: GO 49392
// for i in units do
49366: LD_ADDR_VAR 0 3
49370: PUSH
49371: LD_VAR 0 1
49375: PUSH
49376: FOR_IN
49377: IFFALSE 49390
// ComExit ( i ) ;
49379: LD_VAR 0 3
49383: PPUSH
49384: CALL 49270 0 1
49388: GO 49376
49390: POP
49391: POP
// end ;
49392: LD_VAR 0 2
49396: RET
// export function ResetHc ; begin
49397: LD_INT 0
49399: PPUSH
// InitHc ;
49400: CALL_OW 19
// hc_importance := 0 ;
49404: LD_ADDR_OWVAR 32
49408: PUSH
49409: LD_INT 0
49411: ST_TO_ADDR
// end ;
49412: LD_VAR 0 1
49416: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
49417: LD_INT 0
49419: PPUSH
49420: PPUSH
49421: PPUSH
// _x := ( x1 + x2 ) div 2 ;
49422: LD_ADDR_VAR 0 6
49426: PUSH
49427: LD_VAR 0 1
49431: PUSH
49432: LD_VAR 0 3
49436: PLUS
49437: PUSH
49438: LD_INT 2
49440: DIV
49441: ST_TO_ADDR
// if _x < 0 then
49442: LD_VAR 0 6
49446: PUSH
49447: LD_INT 0
49449: LESS
49450: IFFALSE 49467
// _x := _x * - 1 ;
49452: LD_ADDR_VAR 0 6
49456: PUSH
49457: LD_VAR 0 6
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: MUL
49466: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
49467: LD_ADDR_VAR 0 7
49471: PUSH
49472: LD_VAR 0 2
49476: PUSH
49477: LD_VAR 0 4
49481: PLUS
49482: PUSH
49483: LD_INT 2
49485: DIV
49486: ST_TO_ADDR
// if _y < 0 then
49487: LD_VAR 0 7
49491: PUSH
49492: LD_INT 0
49494: LESS
49495: IFFALSE 49512
// _y := _y * - 1 ;
49497: LD_ADDR_VAR 0 7
49501: PUSH
49502: LD_VAR 0 7
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: MUL
49511: ST_TO_ADDR
// result := [ _x , _y ] ;
49512: LD_ADDR_VAR 0 5
49516: PUSH
49517: LD_VAR 0 6
49521: PUSH
49522: LD_VAR 0 7
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: ST_TO_ADDR
// end ;
49531: LD_VAR 0 5
49535: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
49536: LD_INT 0
49538: PPUSH
49539: PPUSH
49540: PPUSH
49541: PPUSH
// task := GetTaskList ( unit ) ;
49542: LD_ADDR_VAR 0 7
49546: PUSH
49547: LD_VAR 0 1
49551: PPUSH
49552: CALL_OW 437
49556: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
49557: LD_VAR 0 7
49561: NOT
49562: IFFALSE 49581
49564: PUSH
49565: LD_VAR 0 1
49569: PPUSH
49570: LD_VAR 0 2
49574: PPUSH
49575: CALL_OW 308
49579: NOT
49580: AND
49581: IFFALSE 49585
// exit ;
49583: GO 49703
// if IsInArea ( unit , area ) then
49585: LD_VAR 0 1
49589: PPUSH
49590: LD_VAR 0 2
49594: PPUSH
49595: CALL_OW 308
49599: IFFALSE 49617
// begin ComMoveToArea ( unit , goAway ) ;
49601: LD_VAR 0 1
49605: PPUSH
49606: LD_VAR 0 3
49610: PPUSH
49611: CALL_OW 113
// exit ;
49615: GO 49703
// end ; if task [ 1 ] [ 1 ] <> M then
49617: LD_VAR 0 7
49621: PUSH
49622: LD_INT 1
49624: ARRAY
49625: PUSH
49626: LD_INT 1
49628: ARRAY
49629: PUSH
49630: LD_STRING M
49632: NONEQUAL
49633: IFFALSE 49637
// exit ;
49635: GO 49703
// x := task [ 1 ] [ 2 ] ;
49637: LD_ADDR_VAR 0 5
49641: PUSH
49642: LD_VAR 0 7
49646: PUSH
49647: LD_INT 1
49649: ARRAY
49650: PUSH
49651: LD_INT 2
49653: ARRAY
49654: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
49655: LD_ADDR_VAR 0 6
49659: PUSH
49660: LD_VAR 0 7
49664: PUSH
49665: LD_INT 1
49667: ARRAY
49668: PUSH
49669: LD_INT 3
49671: ARRAY
49672: ST_TO_ADDR
// if InArea ( x , y , area ) then
49673: LD_VAR 0 5
49677: PPUSH
49678: LD_VAR 0 6
49682: PPUSH
49683: LD_VAR 0 2
49687: PPUSH
49688: CALL_OW 309
49692: IFFALSE 49703
// ComStop ( unit ) ;
49694: LD_VAR 0 1
49698: PPUSH
49699: CALL_OW 141
// end ;
49703: LD_VAR 0 4
49707: RET
// export function Abs ( value ) ; begin
49708: LD_INT 0
49710: PPUSH
// result := value ;
49711: LD_ADDR_VAR 0 2
49715: PUSH
49716: LD_VAR 0 1
49720: ST_TO_ADDR
// if value < 0 then
49721: LD_VAR 0 1
49725: PUSH
49726: LD_INT 0
49728: LESS
49729: IFFALSE 49746
// result := value * - 1 ;
49731: LD_ADDR_VAR 0 2
49735: PUSH
49736: LD_VAR 0 1
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: MUL
49745: ST_TO_ADDR
// end ;
49746: LD_VAR 0 2
49750: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49751: LD_INT 0
49753: PPUSH
49754: PPUSH
49755: PPUSH
49756: PPUSH
49757: PPUSH
49758: PPUSH
49759: PPUSH
49760: PPUSH
// if not unit or not building then
49761: LD_VAR 0 1
49765: NOT
49766: IFTRUE 49775
49768: PUSH
49769: LD_VAR 0 2
49773: NOT
49774: OR
49775: IFFALSE 49779
// exit ;
49777: GO 50007
// x := GetX ( building ) ;
49779: LD_ADDR_VAR 0 4
49783: PUSH
49784: LD_VAR 0 2
49788: PPUSH
49789: CALL_OW 250
49793: ST_TO_ADDR
// y := GetY ( building ) ;
49794: LD_ADDR_VAR 0 6
49798: PUSH
49799: LD_VAR 0 2
49803: PPUSH
49804: CALL_OW 251
49808: ST_TO_ADDR
// d := GetDir ( building ) ;
49809: LD_ADDR_VAR 0 8
49813: PUSH
49814: LD_VAR 0 2
49818: PPUSH
49819: CALL_OW 254
49823: ST_TO_ADDR
// r := 4 ;
49824: LD_ADDR_VAR 0 9
49828: PUSH
49829: LD_INT 4
49831: ST_TO_ADDR
// for i := 1 to 5 do
49832: LD_ADDR_VAR 0 10
49836: PUSH
49837: DOUBLE
49838: LD_INT 1
49840: DEC
49841: ST_TO_ADDR
49842: LD_INT 5
49844: PUSH
49845: FOR_TO
49846: IFFALSE 50005
// begin _x := ShiftX ( x , d , r + i ) ;
49848: LD_ADDR_VAR 0 5
49852: PUSH
49853: LD_VAR 0 4
49857: PPUSH
49858: LD_VAR 0 8
49862: PPUSH
49863: LD_VAR 0 9
49867: PUSH
49868: LD_VAR 0 10
49872: PLUS
49873: PPUSH
49874: CALL_OW 272
49878: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49879: LD_ADDR_VAR 0 7
49883: PUSH
49884: LD_VAR 0 6
49888: PPUSH
49889: LD_VAR 0 8
49893: PPUSH
49894: LD_VAR 0 9
49898: PUSH
49899: LD_VAR 0 10
49903: PLUS
49904: PPUSH
49905: CALL_OW 273
49909: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49910: LD_VAR 0 5
49914: PPUSH
49915: LD_VAR 0 7
49919: PPUSH
49920: CALL_OW 488
49924: IFFALSE 49959
49926: PUSH
49927: LD_VAR 0 5
49931: PPUSH
49932: LD_VAR 0 7
49936: PPUSH
49937: CALL_OW 428
49941: PPUSH
49942: CALL_OW 247
49946: PUSH
49947: LD_INT 3
49949: PUSH
49950: LD_INT 2
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: IN
49957: NOT
49958: AND
49959: IFFALSE 50003
// begin ComMoveXY ( unit , _x , _y ) ;
49961: LD_VAR 0 1
49965: PPUSH
49966: LD_VAR 0 5
49970: PPUSH
49971: LD_VAR 0 7
49975: PPUSH
49976: CALL_OW 111
// result := [ _x , _y ] ;
49980: LD_ADDR_VAR 0 3
49984: PUSH
49985: LD_VAR 0 5
49989: PUSH
49990: LD_VAR 0 7
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: ST_TO_ADDR
// exit ;
49999: POP
50000: POP
50001: GO 50007
// end ; end ;
50003: GO 49845
50005: POP
50006: POP
// end ;
50007: LD_VAR 0 3
50011: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50012: LD_INT 0
50014: PPUSH
50015: PPUSH
50016: PPUSH
// result := 0 ;
50017: LD_ADDR_VAR 0 3
50021: PUSH
50022: LD_INT 0
50024: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50025: LD_VAR 0 1
50029: PUSH
50030: LD_INT 0
50032: LESS
50033: IFTRUE 50045
50035: PUSH
50036: LD_VAR 0 1
50040: PUSH
50041: LD_INT 8
50043: GREATER
50044: OR
50045: IFTRUE 50057
50047: PUSH
50048: LD_VAR 0 2
50052: PUSH
50053: LD_INT 0
50055: LESS
50056: OR
50057: IFTRUE 50069
50059: PUSH
50060: LD_VAR 0 2
50064: PUSH
50065: LD_INT 8
50067: GREATER
50068: OR
50069: IFFALSE 50073
// exit ;
50071: GO 50148
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50073: LD_ADDR_VAR 0 4
50077: PUSH
50078: LD_INT 22
50080: PUSH
50081: LD_VAR 0 2
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PPUSH
50090: CALL_OW 69
50094: PUSH
50095: FOR_IN
50096: IFFALSE 50146
// begin un := UnitShoot ( i ) ;
50098: LD_ADDR_VAR 0 5
50102: PUSH
50103: LD_VAR 0 4
50107: PPUSH
50108: CALL_OW 504
50112: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50113: LD_VAR 0 5
50117: PPUSH
50118: CALL_OW 255
50122: PUSH
50123: LD_VAR 0 1
50127: EQUAL
50128: IFFALSE 50144
// begin result := un ;
50130: LD_ADDR_VAR 0 3
50134: PUSH
50135: LD_VAR 0 5
50139: ST_TO_ADDR
// exit ;
50140: POP
50141: POP
50142: GO 50148
// end ; end ;
50144: GO 50095
50146: POP
50147: POP
// end ;
50148: LD_VAR 0 3
50152: RET
// export function GetCargoBay ( units ) ; begin
50153: LD_INT 0
50155: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50156: LD_ADDR_VAR 0 2
50160: PUSH
50161: LD_VAR 0 1
50165: PPUSH
50166: LD_INT 2
50168: PUSH
50169: LD_INT 34
50171: PUSH
50172: LD_INT 12
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 34
50181: PUSH
50182: LD_INT 51
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 34
50191: PUSH
50192: LD_INT 32
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 34
50201: PUSH
50202: LD_INT 89
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: PPUSH
50216: CALL_OW 72
50220: ST_TO_ADDR
// end ;
50221: LD_VAR 0 2
50225: RET
// export function Negate ( value ) ; begin
50226: LD_INT 0
50228: PPUSH
// result := not value ;
50229: LD_ADDR_VAR 0 2
50233: PUSH
50234: LD_VAR 0 1
50238: NOT
50239: ST_TO_ADDR
// end ;
50240: LD_VAR 0 2
50244: RET
// export function Inc ( value ) ; begin
50245: LD_INT 0
50247: PPUSH
// result := value + 1 ;
50248: LD_ADDR_VAR 0 2
50252: PUSH
50253: LD_VAR 0 1
50257: PUSH
50258: LD_INT 1
50260: PLUS
50261: ST_TO_ADDR
// end ;
50262: LD_VAR 0 2
50266: RET
// export function Dec ( value ) ; begin
50267: LD_INT 0
50269: PPUSH
// result := value - 1 ;
50270: LD_ADDR_VAR 0 2
50274: PUSH
50275: LD_VAR 0 1
50279: PUSH
50280: LD_INT 1
50282: MINUS
50283: ST_TO_ADDR
// end ;
50284: LD_VAR 0 2
50288: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50289: LD_INT 0
50291: PPUSH
50292: PPUSH
50293: PPUSH
50294: PPUSH
50295: PPUSH
50296: PPUSH
50297: PPUSH
50298: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50299: LD_VAR 0 1
50303: PPUSH
50304: LD_VAR 0 2
50308: PPUSH
50309: CALL_OW 488
50313: NOT
50314: IFTRUE 50333
50316: PUSH
50317: LD_VAR 0 3
50321: PPUSH
50322: LD_VAR 0 4
50326: PPUSH
50327: CALL_OW 488
50331: NOT
50332: OR
50333: IFFALSE 50346
// begin result := - 1 ;
50335: LD_ADDR_VAR 0 5
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: ST_TO_ADDR
// exit ;
50344: GO 50581
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50346: LD_ADDR_VAR 0 12
50350: PUSH
50351: LD_VAR 0 1
50355: PPUSH
50356: LD_VAR 0 2
50360: PPUSH
50361: LD_VAR 0 3
50365: PPUSH
50366: LD_VAR 0 4
50370: PPUSH
50371: CALL 49417 0 4
50375: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50376: LD_ADDR_VAR 0 11
50380: PUSH
50381: LD_VAR 0 1
50385: PPUSH
50386: LD_VAR 0 2
50390: PPUSH
50391: LD_VAR 0 12
50395: PUSH
50396: LD_INT 1
50398: ARRAY
50399: PPUSH
50400: LD_VAR 0 12
50404: PUSH
50405: LD_INT 2
50407: ARRAY
50408: PPUSH
50409: CALL_OW 298
50413: ST_TO_ADDR
// distance := 9999 ;
50414: LD_ADDR_VAR 0 10
50418: PUSH
50419: LD_INT 9999
50421: ST_TO_ADDR
// for i := 0 to 5 do
50422: LD_ADDR_VAR 0 6
50426: PUSH
50427: DOUBLE
50428: LD_INT 0
50430: DEC
50431: ST_TO_ADDR
50432: LD_INT 5
50434: PUSH
50435: FOR_TO
50436: IFFALSE 50579
// begin _x := ShiftX ( x1 , i , centerDist ) ;
50438: LD_ADDR_VAR 0 7
50442: PUSH
50443: LD_VAR 0 1
50447: PPUSH
50448: LD_VAR 0 6
50452: PPUSH
50453: LD_VAR 0 11
50457: PPUSH
50458: CALL_OW 272
50462: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
50463: LD_ADDR_VAR 0 8
50467: PUSH
50468: LD_VAR 0 2
50472: PPUSH
50473: LD_VAR 0 6
50477: PPUSH
50478: LD_VAR 0 11
50482: PPUSH
50483: CALL_OW 273
50487: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50488: LD_VAR 0 7
50492: PPUSH
50493: LD_VAR 0 8
50497: PPUSH
50498: CALL_OW 488
50502: NOT
50503: IFFALSE 50507
// continue ;
50505: GO 50435
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
50507: LD_ADDR_VAR 0 9
50511: PUSH
50512: LD_VAR 0 12
50516: PUSH
50517: LD_INT 1
50519: ARRAY
50520: PPUSH
50521: LD_VAR 0 12
50525: PUSH
50526: LD_INT 2
50528: ARRAY
50529: PPUSH
50530: LD_VAR 0 7
50534: PPUSH
50535: LD_VAR 0 8
50539: PPUSH
50540: CALL_OW 298
50544: ST_TO_ADDR
// if tmp < distance then
50545: LD_VAR 0 9
50549: PUSH
50550: LD_VAR 0 10
50554: LESS
50555: IFFALSE 50577
// begin result := i ;
50557: LD_ADDR_VAR 0 5
50561: PUSH
50562: LD_VAR 0 6
50566: ST_TO_ADDR
// distance := tmp ;
50567: LD_ADDR_VAR 0 10
50571: PUSH
50572: LD_VAR 0 9
50576: ST_TO_ADDR
// end ; end ;
50577: GO 50435
50579: POP
50580: POP
// end ;
50581: LD_VAR 0 5
50585: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50586: LD_INT 0
50588: PPUSH
50589: PPUSH
// if not driver or not IsInUnit ( driver ) then
50590: LD_VAR 0 1
50594: NOT
50595: IFTRUE 50609
50597: PUSH
50598: LD_VAR 0 1
50602: PPUSH
50603: CALL_OW 310
50607: NOT
50608: OR
50609: IFFALSE 50613
// exit ;
50611: GO 50703
// vehicle := IsInUnit ( driver ) ;
50613: LD_ADDR_VAR 0 3
50617: PUSH
50618: LD_VAR 0 1
50622: PPUSH
50623: CALL_OW 310
50627: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50628: LD_VAR 0 1
50632: PPUSH
50633: LD_STRING \
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: PUSH
50663: LD_STRING E
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_VAR 0 3
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PPUSH
50699: CALL_OW 446
// end ;
50703: LD_VAR 0 2
50707: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50708: LD_INT 0
50710: PPUSH
50711: PPUSH
// if not driver or not IsInUnit ( driver ) then
50712: LD_VAR 0 1
50716: NOT
50717: IFTRUE 50731
50719: PUSH
50720: LD_VAR 0 1
50724: PPUSH
50725: CALL_OW 310
50729: NOT
50730: OR
50731: IFFALSE 50735
// exit ;
50733: GO 50825
// vehicle := IsInUnit ( driver ) ;
50735: LD_ADDR_VAR 0 3
50739: PUSH
50740: LD_VAR 0 1
50744: PPUSH
50745: CALL_OW 310
50749: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50750: LD_VAR 0 1
50754: PPUSH
50755: LD_STRING \
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: PUSH
50785: LD_STRING E
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: LD_VAR 0 3
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PPUSH
50821: CALL_OW 447
// end ;
50825: LD_VAR 0 2
50829: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50830: LD_INT 0
50832: PPUSH
50833: PPUSH
50834: PPUSH
// tmp := [ ] ;
50835: LD_ADDR_VAR 0 5
50839: PUSH
50840: EMPTY
50841: ST_TO_ADDR
// for i in units do
50842: LD_ADDR_VAR 0 4
50846: PUSH
50847: LD_VAR 0 1
50851: PUSH
50852: FOR_IN
50853: IFFALSE 50891
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50855: LD_ADDR_VAR 0 5
50859: PUSH
50860: LD_VAR 0 5
50864: PPUSH
50865: LD_VAR 0 5
50869: PUSH
50870: LD_INT 1
50872: PLUS
50873: PPUSH
50874: LD_VAR 0 4
50878: PPUSH
50879: CALL_OW 256
50883: PPUSH
50884: CALL_OW 2
50888: ST_TO_ADDR
50889: GO 50852
50891: POP
50892: POP
// if not tmp then
50893: LD_VAR 0 5
50897: NOT
50898: IFFALSE 50902
// exit ;
50900: GO 50950
// if asc then
50902: LD_VAR 0 2
50906: IFFALSE 50930
// result := SortListByListAsc ( units , tmp ) else
50908: LD_ADDR_VAR 0 3
50912: PUSH
50913: LD_VAR 0 1
50917: PPUSH
50918: LD_VAR 0 5
50922: PPUSH
50923: CALL_OW 76
50927: ST_TO_ADDR
50928: GO 50950
// result := SortListByListDesc ( units , tmp ) ;
50930: LD_ADDR_VAR 0 3
50934: PUSH
50935: LD_VAR 0 1
50939: PPUSH
50940: LD_VAR 0 5
50944: PPUSH
50945: CALL_OW 77
50949: ST_TO_ADDR
// end ;
50950: LD_VAR 0 3
50954: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50955: LD_INT 0
50957: PPUSH
50958: PPUSH
// task := GetTaskList ( mech ) ;
50959: LD_ADDR_VAR 0 4
50963: PUSH
50964: LD_VAR 0 1
50968: PPUSH
50969: CALL_OW 437
50973: ST_TO_ADDR
// if not task then
50974: LD_VAR 0 4
50978: NOT
50979: IFFALSE 50983
// exit ;
50981: GO 51027
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50983: LD_ADDR_VAR 0 3
50987: PUSH
50988: LD_VAR 0 4
50992: PUSH
50993: LD_INT 1
50995: ARRAY
50996: PUSH
50997: LD_INT 1
50999: ARRAY
51000: PUSH
51001: LD_STRING r
51003: EQUAL
51004: IFFALSE 51026
51006: PUSH
51007: LD_VAR 0 4
51011: PUSH
51012: LD_INT 1
51014: ARRAY
51015: PUSH
51016: LD_INT 4
51018: ARRAY
51019: PUSH
51020: LD_VAR 0 2
51024: EQUAL
51025: AND
51026: ST_TO_ADDR
// end ;
51027: LD_VAR 0 3
51031: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51032: LD_INT 0
51034: PPUSH
// SetDir ( unit , d ) ;
51035: LD_VAR 0 1
51039: PPUSH
51040: LD_VAR 0 4
51044: PPUSH
51045: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51049: LD_ADDR_VAR 0 6
51053: PUSH
51054: LD_VAR 0 1
51058: PPUSH
51059: LD_VAR 0 2
51063: PPUSH
51064: LD_VAR 0 3
51068: PPUSH
51069: LD_VAR 0 5
51073: PPUSH
51074: CALL_OW 48
51078: ST_TO_ADDR
// end ;
51079: LD_VAR 0 6
51083: RET
// export function ToNaturalNumber ( number ) ; begin
51084: LD_INT 0
51086: PPUSH
// result := number div 1 ;
51087: LD_ADDR_VAR 0 2
51091: PUSH
51092: LD_VAR 0 1
51096: PUSH
51097: LD_INT 1
51099: DIV
51100: ST_TO_ADDR
// if number < 0 then
51101: LD_VAR 0 1
51105: PUSH
51106: LD_INT 0
51108: LESS
51109: IFFALSE 51119
// result := 0 ;
51111: LD_ADDR_VAR 0 2
51115: PUSH
51116: LD_INT 0
51118: ST_TO_ADDR
// end ;
51119: LD_VAR 0 2
51123: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51124: LD_INT 0
51126: PPUSH
51127: PPUSH
51128: PPUSH
// if not buildings then
51129: LD_VAR 0 1
51133: NOT
51134: IFFALSE 51138
// exit ;
51136: GO 51253
// tmp := [ ] ;
51138: LD_ADDR_VAR 0 5
51142: PUSH
51143: EMPTY
51144: ST_TO_ADDR
// for b in buildings do
51145: LD_ADDR_VAR 0 4
51149: PUSH
51150: LD_VAR 0 1
51154: PUSH
51155: FOR_IN
51156: IFFALSE 51194
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51158: LD_ADDR_VAR 0 5
51162: PUSH
51163: LD_VAR 0 5
51167: PPUSH
51168: LD_VAR 0 5
51172: PUSH
51173: LD_INT 1
51175: PLUS
51176: PPUSH
51177: LD_VAR 0 4
51181: PPUSH
51182: CALL_OW 266
51186: PPUSH
51187: CALL_OW 1
51191: ST_TO_ADDR
51192: GO 51155
51194: POP
51195: POP
// if not tmp then
51196: LD_VAR 0 5
51200: NOT
51201: IFFALSE 51205
// exit ;
51203: GO 51253
// if asc then
51205: LD_VAR 0 2
51209: IFFALSE 51233
// result := SortListByListAsc ( buildings , tmp ) else
51211: LD_ADDR_VAR 0 3
51215: PUSH
51216: LD_VAR 0 1
51220: PPUSH
51221: LD_VAR 0 5
51225: PPUSH
51226: CALL_OW 76
51230: ST_TO_ADDR
51231: GO 51253
// result := SortListByListDesc ( buildings , tmp ) ;
51233: LD_ADDR_VAR 0 3
51237: PUSH
51238: LD_VAR 0 1
51242: PPUSH
51243: LD_VAR 0 5
51247: PPUSH
51248: CALL_OW 77
51252: ST_TO_ADDR
// end ;
51253: LD_VAR 0 3
51257: RET
// export function SortByClass ( units , class ) ; var un ; begin
51258: LD_INT 0
51260: PPUSH
51261: PPUSH
// if not units or not class then
51262: LD_VAR 0 1
51266: NOT
51267: IFTRUE 51276
51269: PUSH
51270: LD_VAR 0 2
51274: NOT
51275: OR
51276: IFFALSE 51280
// exit ;
51278: GO 51375
// result := [ ] ;
51280: LD_ADDR_VAR 0 3
51284: PUSH
51285: EMPTY
51286: ST_TO_ADDR
// for un in units do
51287: LD_ADDR_VAR 0 4
51291: PUSH
51292: LD_VAR 0 1
51296: PUSH
51297: FOR_IN
51298: IFFALSE 51373
// if GetClass ( un ) = class then
51300: LD_VAR 0 4
51304: PPUSH
51305: CALL_OW 257
51309: PUSH
51310: LD_VAR 0 2
51314: EQUAL
51315: IFFALSE 51342
// result := Insert ( result , 1 , un ) else
51317: LD_ADDR_VAR 0 3
51321: PUSH
51322: LD_VAR 0 3
51326: PPUSH
51327: LD_INT 1
51329: PPUSH
51330: LD_VAR 0 4
51334: PPUSH
51335: CALL_OW 2
51339: ST_TO_ADDR
51340: GO 51371
// result := Replace ( result , result + 1 , un ) ;
51342: LD_ADDR_VAR 0 3
51346: PUSH
51347: LD_VAR 0 3
51351: PPUSH
51352: LD_VAR 0 3
51356: PUSH
51357: LD_INT 1
51359: PLUS
51360: PPUSH
51361: LD_VAR 0 4
51365: PPUSH
51366: CALL_OW 1
51370: ST_TO_ADDR
51371: GO 51297
51373: POP
51374: POP
// end ;
51375: LD_VAR 0 3
51379: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51380: LD_INT 0
51382: PPUSH
51383: PPUSH
51384: PPUSH
51385: PPUSH
51386: PPUSH
51387: PPUSH
51388: PPUSH
// result := [ ] ;
51389: LD_ADDR_VAR 0 4
51393: PUSH
51394: EMPTY
51395: ST_TO_ADDR
// if x - r < 0 then
51396: LD_VAR 0 1
51400: PUSH
51401: LD_VAR 0 3
51405: MINUS
51406: PUSH
51407: LD_INT 0
51409: LESS
51410: IFFALSE 51422
// min_x := 0 else
51412: LD_ADDR_VAR 0 8
51416: PUSH
51417: LD_INT 0
51419: ST_TO_ADDR
51420: GO 51438
// min_x := x - r ;
51422: LD_ADDR_VAR 0 8
51426: PUSH
51427: LD_VAR 0 1
51431: PUSH
51432: LD_VAR 0 3
51436: MINUS
51437: ST_TO_ADDR
// if y - r < 0 then
51438: LD_VAR 0 2
51442: PUSH
51443: LD_VAR 0 3
51447: MINUS
51448: PUSH
51449: LD_INT 0
51451: LESS
51452: IFFALSE 51464
// min_y := 0 else
51454: LD_ADDR_VAR 0 7
51458: PUSH
51459: LD_INT 0
51461: ST_TO_ADDR
51462: GO 51480
// min_y := y - r ;
51464: LD_ADDR_VAR 0 7
51468: PUSH
51469: LD_VAR 0 2
51473: PUSH
51474: LD_VAR 0 3
51478: MINUS
51479: ST_TO_ADDR
// max_x := x + r ;
51480: LD_ADDR_VAR 0 9
51484: PUSH
51485: LD_VAR 0 1
51489: PUSH
51490: LD_VAR 0 3
51494: PLUS
51495: ST_TO_ADDR
// max_y := y + r ;
51496: LD_ADDR_VAR 0 10
51500: PUSH
51501: LD_VAR 0 2
51505: PUSH
51506: LD_VAR 0 3
51510: PLUS
51511: ST_TO_ADDR
// for _x = min_x to max_x do
51512: LD_ADDR_VAR 0 5
51516: PUSH
51517: DOUBLE
51518: LD_VAR 0 8
51522: DEC
51523: ST_TO_ADDR
51524: LD_VAR 0 9
51528: PUSH
51529: FOR_TO
51530: IFFALSE 51631
// for _y = min_y to max_y do
51532: LD_ADDR_VAR 0 6
51536: PUSH
51537: DOUBLE
51538: LD_VAR 0 7
51542: DEC
51543: ST_TO_ADDR
51544: LD_VAR 0 10
51548: PUSH
51549: FOR_TO
51550: IFFALSE 51627
// begin if not ValidHex ( _x , _y ) then
51552: LD_VAR 0 5
51556: PPUSH
51557: LD_VAR 0 6
51561: PPUSH
51562: CALL_OW 488
51566: NOT
51567: IFFALSE 51571
// continue ;
51569: GO 51549
// if GetResourceTypeXY ( _x , _y ) then
51571: LD_VAR 0 5
51575: PPUSH
51576: LD_VAR 0 6
51580: PPUSH
51581: CALL_OW 283
51585: IFFALSE 51625
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
51587: LD_ADDR_VAR 0 4
51591: PUSH
51592: LD_VAR 0 4
51596: PPUSH
51597: LD_VAR 0 4
51601: PUSH
51602: LD_INT 1
51604: PLUS
51605: PPUSH
51606: LD_VAR 0 5
51610: PUSH
51611: LD_VAR 0 6
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PPUSH
51620: CALL_OW 1
51624: ST_TO_ADDR
// end ;
51625: GO 51549
51627: POP
51628: POP
51629: GO 51529
51631: POP
51632: POP
// end ;
51633: LD_VAR 0 4
51637: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
51638: LD_INT 0
51640: PPUSH
51641: PPUSH
51642: PPUSH
51643: PPUSH
51644: PPUSH
51645: PPUSH
51646: PPUSH
51647: PPUSH
// if not units then
51648: LD_VAR 0 1
51652: NOT
51653: IFFALSE 51657
// exit ;
51655: GO 52189
// result := UnitFilter ( units , [ f_ok ] ) ;
51657: LD_ADDR_VAR 0 3
51661: PUSH
51662: LD_VAR 0 1
51666: PPUSH
51667: LD_INT 50
51669: PUSH
51670: EMPTY
51671: LIST
51672: PPUSH
51673: CALL_OW 72
51677: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
51678: LD_ADDR_VAR 0 8
51682: PUSH
51683: LD_VAR 0 1
51687: PUSH
51688: LD_INT 1
51690: ARRAY
51691: PPUSH
51692: CALL_OW 255
51696: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51697: LD_ADDR_VAR 0 10
51701: PUSH
51702: LD_INT 29
51704: PUSH
51705: LD_INT 91
51707: PUSH
51708: LD_INT 49
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: LIST
51715: ST_TO_ADDR
// if not result then
51716: LD_VAR 0 3
51720: NOT
51721: IFFALSE 51725
// exit ;
51723: GO 52189
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51725: LD_ADDR_VAR 0 5
51729: PUSH
51730: LD_INT 81
51732: PUSH
51733: LD_VAR 0 8
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PPUSH
51742: CALL_OW 69
51746: ST_TO_ADDR
// for i in result do
51747: LD_ADDR_VAR 0 4
51751: PUSH
51752: LD_VAR 0 3
51756: PUSH
51757: FOR_IN
51758: IFFALSE 52187
// begin tag := GetTag ( i ) + 1 ;
51760: LD_ADDR_VAR 0 9
51764: PUSH
51765: LD_VAR 0 4
51769: PPUSH
51770: CALL_OW 110
51774: PUSH
51775: LD_INT 1
51777: PLUS
51778: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51779: LD_ADDR_VAR 0 7
51783: PUSH
51784: LD_VAR 0 4
51788: PPUSH
51789: CALL_OW 250
51793: PPUSH
51794: LD_VAR 0 4
51798: PPUSH
51799: CALL_OW 251
51803: PPUSH
51804: LD_INT 4
51806: PPUSH
51807: CALL 51380 0 3
51811: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51812: LD_VAR 0 4
51816: PPUSH
51817: CALL_OW 247
51821: PUSH
51822: LD_INT 2
51824: EQUAL
51825: IFFALSE 51837
51827: PUSH
51828: LD_VAR 0 7
51832: PUSH
51833: LD_INT 2
51835: GREATER
51836: AND
51837: IFFALSE 51857
51839: PUSH
51840: LD_VAR 0 4
51844: PPUSH
51845: CALL_OW 264
51849: PUSH
51850: LD_VAR 0 10
51854: IN
51855: NOT
51856: AND
51857: IFFALSE 51896
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51859: LD_VAR 0 4
51863: PPUSH
51864: LD_VAR 0 7
51868: PUSH
51869: LD_INT 1
51871: ARRAY
51872: PUSH
51873: LD_INT 1
51875: ARRAY
51876: PPUSH
51877: LD_VAR 0 7
51881: PUSH
51882: LD_INT 1
51884: ARRAY
51885: PUSH
51886: LD_INT 2
51888: ARRAY
51889: PPUSH
51890: CALL_OW 116
51894: GO 52185
// if path > tag then
51896: LD_VAR 0 2
51900: PUSH
51901: LD_VAR 0 9
51905: GREATER
51906: IFFALSE 52114
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51908: LD_ADDR_VAR 0 6
51912: PUSH
51913: LD_VAR 0 5
51917: PPUSH
51918: LD_INT 91
51920: PUSH
51921: LD_VAR 0 4
51925: PUSH
51926: LD_INT 8
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: LIST
51933: PPUSH
51934: CALL_OW 72
51938: ST_TO_ADDR
// if nearEnemy then
51939: LD_VAR 0 6
51943: IFFALSE 52012
// begin if GetWeapon ( i ) = ru_time_lapser then
51945: LD_VAR 0 4
51949: PPUSH
51950: CALL_OW 264
51954: PUSH
51955: LD_INT 49
51957: EQUAL
51958: IFFALSE 51986
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51960: LD_VAR 0 4
51964: PPUSH
51965: LD_VAR 0 6
51969: PPUSH
51970: LD_VAR 0 4
51974: PPUSH
51975: CALL_OW 74
51979: PPUSH
51980: CALL_OW 112
51984: GO 52010
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51986: LD_VAR 0 4
51990: PPUSH
51991: LD_VAR 0 6
51995: PPUSH
51996: LD_VAR 0 4
52000: PPUSH
52001: CALL_OW 74
52005: PPUSH
52006: CALL 53270 0 2
// end else
52010: GO 52112
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52012: LD_VAR 0 4
52016: PPUSH
52017: LD_VAR 0 2
52021: PUSH
52022: LD_VAR 0 9
52026: ARRAY
52027: PUSH
52028: LD_INT 1
52030: ARRAY
52031: PPUSH
52032: LD_VAR 0 2
52036: PUSH
52037: LD_VAR 0 9
52041: ARRAY
52042: PUSH
52043: LD_INT 2
52045: ARRAY
52046: PPUSH
52047: CALL_OW 297
52051: PUSH
52052: LD_INT 6
52054: GREATER
52055: IFFALSE 52098
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52057: LD_VAR 0 4
52061: PPUSH
52062: LD_VAR 0 2
52066: PUSH
52067: LD_VAR 0 9
52071: ARRAY
52072: PUSH
52073: LD_INT 1
52075: ARRAY
52076: PPUSH
52077: LD_VAR 0 2
52081: PUSH
52082: LD_VAR 0 9
52086: ARRAY
52087: PUSH
52088: LD_INT 2
52090: ARRAY
52091: PPUSH
52092: CALL_OW 114
52096: GO 52112
// SetTag ( i , tag ) ;
52098: LD_VAR 0 4
52102: PPUSH
52103: LD_VAR 0 9
52107: PPUSH
52108: CALL_OW 109
// end else
52112: GO 52185
// if enemy then
52114: LD_VAR 0 5
52118: IFFALSE 52185
// begin if GetWeapon ( i ) = ru_time_lapser then
52120: LD_VAR 0 4
52124: PPUSH
52125: CALL_OW 264
52129: PUSH
52130: LD_INT 49
52132: EQUAL
52133: IFFALSE 52161
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52135: LD_VAR 0 4
52139: PPUSH
52140: LD_VAR 0 5
52144: PPUSH
52145: LD_VAR 0 4
52149: PPUSH
52150: CALL_OW 74
52154: PPUSH
52155: CALL_OW 112
52159: GO 52185
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52161: LD_VAR 0 4
52165: PPUSH
52166: LD_VAR 0 5
52170: PPUSH
52171: LD_VAR 0 4
52175: PPUSH
52176: CALL_OW 74
52180: PPUSH
52181: CALL 53270 0 2
// end ; end ;
52185: GO 51757
52187: POP
52188: POP
// end ;
52189: LD_VAR 0 3
52193: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52194: LD_INT 0
52196: PPUSH
52197: PPUSH
52198: PPUSH
// if not unit or IsInUnit ( unit ) then
52199: LD_VAR 0 1
52203: NOT
52204: IFTRUE 52217
52206: PUSH
52207: LD_VAR 0 1
52211: PPUSH
52212: CALL_OW 310
52216: OR
52217: IFFALSE 52221
// exit ;
52219: GO 52312
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52221: LD_ADDR_VAR 0 4
52225: PUSH
52226: LD_VAR 0 1
52230: PPUSH
52231: CALL_OW 250
52235: PPUSH
52236: LD_VAR 0 2
52240: PPUSH
52241: LD_INT 1
52243: PPUSH
52244: CALL_OW 272
52248: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52249: LD_ADDR_VAR 0 5
52253: PUSH
52254: LD_VAR 0 1
52258: PPUSH
52259: CALL_OW 251
52263: PPUSH
52264: LD_VAR 0 2
52268: PPUSH
52269: LD_INT 1
52271: PPUSH
52272: CALL_OW 273
52276: ST_TO_ADDR
// if ValidHex ( x , y ) then
52277: LD_VAR 0 4
52281: PPUSH
52282: LD_VAR 0 5
52286: PPUSH
52287: CALL_OW 488
52291: IFFALSE 52312
// ComTurnXY ( unit , x , y ) ;
52293: LD_VAR 0 1
52297: PPUSH
52298: LD_VAR 0 4
52302: PPUSH
52303: LD_VAR 0 5
52307: PPUSH
52308: CALL_OW 118
// end ;
52312: LD_VAR 0 3
52316: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52317: LD_INT 0
52319: PPUSH
52320: PPUSH
// result := false ;
52321: LD_ADDR_VAR 0 3
52325: PUSH
52326: LD_INT 0
52328: ST_TO_ADDR
// if not units then
52329: LD_VAR 0 2
52333: NOT
52334: IFFALSE 52338
// exit ;
52336: GO 52383
// for i in units do
52338: LD_ADDR_VAR 0 4
52342: PUSH
52343: LD_VAR 0 2
52347: PUSH
52348: FOR_IN
52349: IFFALSE 52381
// if See ( side , i ) then
52351: LD_VAR 0 1
52355: PPUSH
52356: LD_VAR 0 4
52360: PPUSH
52361: CALL_OW 292
52365: IFFALSE 52379
// begin result := true ;
52367: LD_ADDR_VAR 0 3
52371: PUSH
52372: LD_INT 1
52374: ST_TO_ADDR
// exit ;
52375: POP
52376: POP
52377: GO 52383
// end ;
52379: GO 52348
52381: POP
52382: POP
// end ;
52383: LD_VAR 0 3
52387: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52388: LD_INT 0
52390: PPUSH
52391: PPUSH
52392: PPUSH
52393: PPUSH
// if not unit or not points then
52394: LD_VAR 0 1
52398: NOT
52399: IFTRUE 52408
52401: PUSH
52402: LD_VAR 0 2
52406: NOT
52407: OR
52408: IFFALSE 52412
// exit ;
52410: GO 52502
// dist := 99999 ;
52412: LD_ADDR_VAR 0 5
52416: PUSH
52417: LD_INT 99999
52419: ST_TO_ADDR
// for i in points do
52420: LD_ADDR_VAR 0 4
52424: PUSH
52425: LD_VAR 0 2
52429: PUSH
52430: FOR_IN
52431: IFFALSE 52500
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
52433: LD_ADDR_VAR 0 6
52437: PUSH
52438: LD_VAR 0 1
52442: PPUSH
52443: LD_VAR 0 4
52447: PUSH
52448: LD_INT 1
52450: ARRAY
52451: PPUSH
52452: LD_VAR 0 4
52456: PUSH
52457: LD_INT 2
52459: ARRAY
52460: PPUSH
52461: CALL_OW 297
52465: ST_TO_ADDR
// if tmpDist < dist then
52466: LD_VAR 0 6
52470: PUSH
52471: LD_VAR 0 5
52475: LESS
52476: IFFALSE 52498
// begin result := i ;
52478: LD_ADDR_VAR 0 3
52482: PUSH
52483: LD_VAR 0 4
52487: ST_TO_ADDR
// dist := tmpDist ;
52488: LD_ADDR_VAR 0 5
52492: PUSH
52493: LD_VAR 0 6
52497: ST_TO_ADDR
// end ; end ;
52498: GO 52430
52500: POP
52501: POP
// end ;
52502: LD_VAR 0 3
52506: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
52507: LD_INT 0
52509: PPUSH
// uc_side := side ;
52510: LD_ADDR_OWVAR 20
52514: PUSH
52515: LD_VAR 0 1
52519: ST_TO_ADDR
// uc_nation := 3 ;
52520: LD_ADDR_OWVAR 21
52524: PUSH
52525: LD_INT 3
52527: ST_TO_ADDR
// vc_chassis := 25 ;
52528: LD_ADDR_OWVAR 37
52532: PUSH
52533: LD_INT 25
52535: ST_TO_ADDR
// vc_engine := engine_siberite ;
52536: LD_ADDR_OWVAR 39
52540: PUSH
52541: LD_INT 3
52543: ST_TO_ADDR
// vc_control := control_computer ;
52544: LD_ADDR_OWVAR 38
52548: PUSH
52549: LD_INT 3
52551: ST_TO_ADDR
// vc_weapon := 59 ;
52552: LD_ADDR_OWVAR 40
52556: PUSH
52557: LD_INT 59
52559: ST_TO_ADDR
// result := CreateVehicle ;
52560: LD_ADDR_VAR 0 5
52564: PUSH
52565: CALL_OW 45
52569: ST_TO_ADDR
// SetDir ( result , d ) ;
52570: LD_VAR 0 5
52574: PPUSH
52575: LD_VAR 0 4
52579: PPUSH
52580: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
52584: LD_VAR 0 5
52588: PPUSH
52589: LD_VAR 0 2
52593: PPUSH
52594: LD_VAR 0 3
52598: PPUSH
52599: LD_INT 0
52601: PPUSH
52602: CALL_OW 48
// end ;
52606: LD_VAR 0 5
52610: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
52611: LD_INT 0
52613: PPUSH
52614: PPUSH
52615: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
52616: LD_ADDR_VAR 0 2
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
52639: LD_VAR 0 1
52643: NOT
52644: IFTRUE 52677
52646: PUSH
52647: LD_VAR 0 1
52651: PPUSH
52652: CALL_OW 264
52656: PUSH
52657: LD_INT 12
52659: PUSH
52660: LD_INT 51
52662: PUSH
52663: LD_INT 32
52665: PUSH
52666: LD_INT 89
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: IN
52675: NOT
52676: OR
52677: IFFALSE 52681
// exit ;
52679: GO 52779
// for i := 1 to 3 do
52681: LD_ADDR_VAR 0 3
52685: PUSH
52686: DOUBLE
52687: LD_INT 1
52689: DEC
52690: ST_TO_ADDR
52691: LD_INT 3
52693: PUSH
52694: FOR_TO
52695: IFFALSE 52777
// begin tmp := GetCargo ( cargo , i ) ;
52697: LD_ADDR_VAR 0 4
52701: PUSH
52702: LD_VAR 0 1
52706: PPUSH
52707: LD_VAR 0 3
52711: PPUSH
52712: CALL_OW 289
52716: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52717: LD_ADDR_VAR 0 2
52721: PUSH
52722: LD_VAR 0 2
52726: PPUSH
52727: LD_VAR 0 3
52731: PPUSH
52732: LD_VAR 0 4
52736: PPUSH
52737: CALL_OW 1
52741: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52742: LD_ADDR_VAR 0 2
52746: PUSH
52747: LD_VAR 0 2
52751: PPUSH
52752: LD_INT 4
52754: PPUSH
52755: LD_VAR 0 2
52759: PUSH
52760: LD_INT 4
52762: ARRAY
52763: PUSH
52764: LD_VAR 0 4
52768: PLUS
52769: PPUSH
52770: CALL_OW 1
52774: ST_TO_ADDR
// end ;
52775: GO 52694
52777: POP
52778: POP
// end ;
52779: LD_VAR 0 2
52783: RET
// export function Length ( array ) ; begin
52784: LD_INT 0
52786: PPUSH
// result := array + 0 ;
52787: LD_ADDR_VAR 0 2
52791: PUSH
52792: LD_VAR 0 1
52796: PUSH
52797: LD_INT 0
52799: PLUS
52800: ST_TO_ADDR
// end ;
52801: LD_VAR 0 2
52805: RET
// export function PrepareArray ( array ) ; begin
52806: LD_INT 0
52808: PPUSH
// result := array diff 0 ;
52809: LD_ADDR_VAR 0 2
52813: PUSH
52814: LD_VAR 0 1
52818: PUSH
52819: LD_INT 0
52821: DIFF
52822: ST_TO_ADDR
// if not result [ 1 ] then
52823: LD_VAR 0 2
52827: PUSH
52828: LD_INT 1
52830: ARRAY
52831: NOT
52832: IFFALSE 52852
// result := Delete ( result , 1 ) ;
52834: LD_ADDR_VAR 0 2
52838: PUSH
52839: LD_VAR 0 2
52843: PPUSH
52844: LD_INT 1
52846: PPUSH
52847: CALL_OW 3
52851: ST_TO_ADDR
// end ;
52852: LD_VAR 0 2
52856: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52857: LD_INT 0
52859: PPUSH
52860: PPUSH
52861: PPUSH
52862: PPUSH
// sibRocketRange := 25 ;
52863: LD_ADDR_VAR 0 6
52867: PUSH
52868: LD_INT 25
52870: ST_TO_ADDR
// result := false ;
52871: LD_ADDR_VAR 0 4
52875: PUSH
52876: LD_INT 0
52878: ST_TO_ADDR
// for i := 0 to 5 do
52879: LD_ADDR_VAR 0 5
52883: PUSH
52884: DOUBLE
52885: LD_INT 0
52887: DEC
52888: ST_TO_ADDR
52889: LD_INT 5
52891: PUSH
52892: FOR_TO
52893: IFFALSE 52960
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52895: LD_VAR 0 1
52899: PPUSH
52900: LD_VAR 0 5
52904: PPUSH
52905: LD_VAR 0 6
52909: PPUSH
52910: CALL_OW 272
52914: PPUSH
52915: LD_VAR 0 2
52919: PPUSH
52920: LD_VAR 0 5
52924: PPUSH
52925: LD_VAR 0 6
52929: PPUSH
52930: CALL_OW 273
52934: PPUSH
52935: LD_VAR 0 3
52939: PPUSH
52940: CALL_OW 309
52944: IFFALSE 52958
// begin result := true ;
52946: LD_ADDR_VAR 0 4
52950: PUSH
52951: LD_INT 1
52953: ST_TO_ADDR
// exit ;
52954: POP
52955: POP
52956: GO 52962
// end ;
52958: GO 52892
52960: POP
52961: POP
// end ;
52962: LD_VAR 0 4
52966: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52967: LD_INT 0
52969: PPUSH
52970: PPUSH
52971: PPUSH
// if btype = b_depot then
52972: LD_VAR 0 2
52976: PUSH
52977: LD_INT 0
52979: EQUAL
52980: IFFALSE 52992
// begin result := true ;
52982: LD_ADDR_VAR 0 3
52986: PUSH
52987: LD_INT 1
52989: ST_TO_ADDR
// exit ;
52990: GO 53112
// end ; pom := GetBase ( depot ) ;
52992: LD_ADDR_VAR 0 4
52996: PUSH
52997: LD_VAR 0 1
53001: PPUSH
53002: CALL_OW 274
53006: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53007: LD_ADDR_VAR 0 5
53011: PUSH
53012: LD_VAR 0 2
53016: PPUSH
53017: LD_VAR 0 1
53021: PPUSH
53022: CALL_OW 248
53026: PPUSH
53027: CALL_OW 450
53031: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53032: LD_ADDR_VAR 0 3
53036: PUSH
53037: LD_VAR 0 4
53041: PPUSH
53042: LD_INT 1
53044: PPUSH
53045: CALL_OW 275
53049: PUSH
53050: LD_VAR 0 5
53054: PUSH
53055: LD_INT 1
53057: ARRAY
53058: GREATEREQUAL
53059: IFFALSE 53085
53061: PUSH
53062: LD_VAR 0 4
53066: PPUSH
53067: LD_INT 2
53069: PPUSH
53070: CALL_OW 275
53074: PUSH
53075: LD_VAR 0 5
53079: PUSH
53080: LD_INT 2
53082: ARRAY
53083: GREATEREQUAL
53084: AND
53085: IFFALSE 53111
53087: PUSH
53088: LD_VAR 0 4
53092: PPUSH
53093: LD_INT 3
53095: PPUSH
53096: CALL_OW 275
53100: PUSH
53101: LD_VAR 0 5
53105: PUSH
53106: LD_INT 3
53108: ARRAY
53109: GREATEREQUAL
53110: AND
53111: ST_TO_ADDR
// end ;
53112: LD_VAR 0 3
53116: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53117: LD_INT 0
53119: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53120: LD_VAR 0 1
53124: PPUSH
53125: LD_VAR 0 2
53129: PPUSH
53130: LD_INT 0
53132: PPUSH
53133: LD_INT 0
53135: PPUSH
53136: LD_INT 1
53138: PPUSH
53139: LD_INT 0
53141: PPUSH
53142: CALL_OW 587
// end ;
53146: LD_VAR 0 3
53150: RET
// export function CenterOnNow ( unit ) ; begin
53151: LD_INT 0
53153: PPUSH
// result := IsInUnit ( unit ) ;
53154: LD_ADDR_VAR 0 2
53158: PUSH
53159: LD_VAR 0 1
53163: PPUSH
53164: CALL_OW 310
53168: ST_TO_ADDR
// if not result then
53169: LD_VAR 0 2
53173: NOT
53174: IFFALSE 53186
// result := unit ;
53176: LD_ADDR_VAR 0 2
53180: PUSH
53181: LD_VAR 0 1
53185: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
53186: LD_VAR 0 1
53190: PPUSH
53191: CALL_OW 87
// end ;
53195: LD_VAR 0 2
53199: RET
// export function ComMoveHex ( unit , hex ) ; begin
53200: LD_INT 0
53202: PPUSH
// if not hex then
53203: LD_VAR 0 2
53207: NOT
53208: IFFALSE 53212
// exit ;
53210: GO 53265
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53212: LD_VAR 0 2
53216: PUSH
53217: LD_INT 1
53219: ARRAY
53220: PPUSH
53221: LD_VAR 0 2
53225: PUSH
53226: LD_INT 2
53228: ARRAY
53229: PPUSH
53230: CALL_OW 428
53234: IFFALSE 53238
// exit ;
53236: GO 53265
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53238: LD_VAR 0 1
53242: PPUSH
53243: LD_VAR 0 2
53247: PUSH
53248: LD_INT 1
53250: ARRAY
53251: PPUSH
53252: LD_VAR 0 2
53256: PUSH
53257: LD_INT 2
53259: ARRAY
53260: PPUSH
53261: CALL_OW 111
// end ;
53265: LD_VAR 0 3
53269: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53270: LD_INT 0
53272: PPUSH
53273: PPUSH
53274: PPUSH
// if not unit or not enemy then
53275: LD_VAR 0 1
53279: NOT
53280: IFTRUE 53289
53282: PUSH
53283: LD_VAR 0 2
53287: NOT
53288: OR
53289: IFFALSE 53293
// exit ;
53291: GO 53419
// x := GetX ( enemy ) ;
53293: LD_ADDR_VAR 0 4
53297: PUSH
53298: LD_VAR 0 2
53302: PPUSH
53303: CALL_OW 250
53307: ST_TO_ADDR
// y := GetY ( enemy ) ;
53308: LD_ADDR_VAR 0 5
53312: PUSH
53313: LD_VAR 0 2
53317: PPUSH
53318: CALL_OW 251
53322: ST_TO_ADDR
// if ValidHex ( x , y ) then
53323: LD_VAR 0 4
53327: PPUSH
53328: LD_VAR 0 5
53332: PPUSH
53333: CALL_OW 488
53337: IFFALSE 53419
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
53339: LD_VAR 0 2
53343: PPUSH
53344: CALL_OW 247
53348: PUSH
53349: LD_INT 3
53351: PUSH
53352: LD_INT 2
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: IN
53359: IFTRUE 53382
53361: PUSH
53362: LD_VAR 0 1
53366: PPUSH
53367: CALL_OW 255
53371: PPUSH
53372: LD_VAR 0 2
53376: PPUSH
53377: CALL_OW 292
53381: OR
53382: IFFALSE 53400
// ComAttackUnit ( unit , enemy ) else
53384: LD_VAR 0 1
53388: PPUSH
53389: LD_VAR 0 2
53393: PPUSH
53394: CALL_OW 115
53398: GO 53419
// ComAgressiveMove ( unit , x , y ) ;
53400: LD_VAR 0 1
53404: PPUSH
53405: LD_VAR 0 4
53409: PPUSH
53410: LD_VAR 0 5
53414: PPUSH
53415: CALL_OW 114
// end ;
53419: LD_VAR 0 3
53423: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
53424: LD_INT 0
53426: PPUSH
53427: PPUSH
53428: PPUSH
// list := AreaToList ( area , 0 ) ;
53429: LD_ADDR_VAR 0 5
53433: PUSH
53434: LD_VAR 0 1
53438: PPUSH
53439: LD_INT 0
53441: PPUSH
53442: CALL_OW 517
53446: ST_TO_ADDR
// if not list then
53447: LD_VAR 0 5
53451: NOT
53452: IFFALSE 53456
// exit ;
53454: GO 53586
// if all then
53456: LD_VAR 0 2
53460: IFFALSE 53548
// begin for i := 1 to list [ 1 ] do
53462: LD_ADDR_VAR 0 4
53466: PUSH
53467: DOUBLE
53468: LD_INT 1
53470: DEC
53471: ST_TO_ADDR
53472: LD_VAR 0 5
53476: PUSH
53477: LD_INT 1
53479: ARRAY
53480: PUSH
53481: FOR_TO
53482: IFFALSE 53544
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
53484: LD_ADDR_VAR 0 3
53488: PUSH
53489: LD_VAR 0 3
53493: PPUSH
53494: LD_VAR 0 3
53498: PUSH
53499: LD_INT 1
53501: PLUS
53502: PPUSH
53503: LD_VAR 0 5
53507: PUSH
53508: LD_INT 1
53510: ARRAY
53511: PUSH
53512: LD_VAR 0 4
53516: ARRAY
53517: PUSH
53518: LD_VAR 0 5
53522: PUSH
53523: LD_INT 2
53525: ARRAY
53526: PUSH
53527: LD_VAR 0 4
53531: ARRAY
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PPUSH
53537: CALL_OW 1
53541: ST_TO_ADDR
53542: GO 53481
53544: POP
53545: POP
// exit ;
53546: GO 53586
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
53548: LD_ADDR_VAR 0 3
53552: PUSH
53553: LD_VAR 0 5
53557: PUSH
53558: LD_INT 1
53560: ARRAY
53561: PUSH
53562: LD_INT 1
53564: ARRAY
53565: PUSH
53566: LD_VAR 0 5
53570: PUSH
53571: LD_INT 2
53573: ARRAY
53574: PUSH
53575: LD_INT 1
53577: ARRAY
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: EMPTY
53584: LIST
53585: ST_TO_ADDR
// end ;
53586: LD_VAR 0 3
53590: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
53591: LD_INT 0
53593: PPUSH
53594: PPUSH
// list := AreaToList ( area , 0 ) ;
53595: LD_ADDR_VAR 0 4
53599: PUSH
53600: LD_VAR 0 1
53604: PPUSH
53605: LD_INT 0
53607: PPUSH
53608: CALL_OW 517
53612: ST_TO_ADDR
// if not list then
53613: LD_VAR 0 4
53617: NOT
53618: IFFALSE 53622
// exit ;
53620: GO 53663
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
53622: LD_ADDR_VAR 0 3
53626: PUSH
53627: LD_VAR 0 4
53631: PUSH
53632: LD_INT 1
53634: ARRAY
53635: PUSH
53636: LD_INT 1
53638: ARRAY
53639: PUSH
53640: LD_VAR 0 4
53644: PUSH
53645: LD_INT 2
53647: ARRAY
53648: PUSH
53649: LD_INT 1
53651: ARRAY
53652: PUSH
53653: LD_VAR 0 2
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: LIST
53662: ST_TO_ADDR
// end ;
53663: LD_VAR 0 3
53667: RET
// export function First ( array ) ; begin
53668: LD_INT 0
53670: PPUSH
// if not array then
53671: LD_VAR 0 1
53675: NOT
53676: IFFALSE 53680
// exit ;
53678: GO 53694
// result := array [ 1 ] ;
53680: LD_ADDR_VAR 0 2
53684: PUSH
53685: LD_VAR 0 1
53689: PUSH
53690: LD_INT 1
53692: ARRAY
53693: ST_TO_ADDR
// end ;
53694: LD_VAR 0 2
53698: RET
// export function Last ( array ) ; begin
53699: LD_INT 0
53701: PPUSH
// if not array then
53702: LD_VAR 0 1
53706: NOT
53707: IFFALSE 53711
// exit ;
53709: GO 53727
// result := array [ array ] ;
53711: LD_ADDR_VAR 0 2
53715: PUSH
53716: LD_VAR 0 1
53720: PUSH
53721: LD_VAR 0 1
53725: ARRAY
53726: ST_TO_ADDR
// end ;
53727: LD_VAR 0 2
53731: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53732: LD_INT 0
53734: PPUSH
53735: PPUSH
// result := [ ] ;
53736: LD_ADDR_VAR 0 5
53740: PUSH
53741: EMPTY
53742: ST_TO_ADDR
// if not array then
53743: LD_VAR 0 1
53747: NOT
53748: IFFALSE 53752
// exit ;
53750: GO 53864
// for i := 1 to array do
53752: LD_ADDR_VAR 0 6
53756: PUSH
53757: DOUBLE
53758: LD_INT 1
53760: DEC
53761: ST_TO_ADDR
53762: LD_VAR 0 1
53766: PUSH
53767: FOR_TO
53768: IFFALSE 53862
// if array [ i ] [ index ] = value then
53770: LD_VAR 0 1
53774: PUSH
53775: LD_VAR 0 6
53779: ARRAY
53780: PUSH
53781: LD_VAR 0 2
53785: ARRAY
53786: PUSH
53787: LD_VAR 0 3
53791: EQUAL
53792: IFFALSE 53860
// begin if indexColumn then
53794: LD_VAR 0 4
53798: IFFALSE 53834
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53800: LD_ADDR_VAR 0 5
53804: PUSH
53805: LD_VAR 0 5
53809: PPUSH
53810: LD_VAR 0 1
53814: PUSH
53815: LD_VAR 0 6
53819: ARRAY
53820: PUSH
53821: LD_VAR 0 4
53825: ARRAY
53826: PPUSH
53827: CALL 48872 0 2
53831: ST_TO_ADDR
53832: GO 53860
// result := Join ( result , array [ i ] ) ;
53834: LD_ADDR_VAR 0 5
53838: PUSH
53839: LD_VAR 0 5
53843: PPUSH
53844: LD_VAR 0 1
53848: PUSH
53849: LD_VAR 0 6
53853: ARRAY
53854: PPUSH
53855: CALL 48872 0 2
53859: ST_TO_ADDR
// end ;
53860: GO 53767
53862: POP
53863: POP
// end ;
53864: LD_VAR 0 5
53868: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53869: LD_INT 0
53871: PPUSH
// if not vehicles or not parkingPoint then
53872: LD_VAR 0 1
53876: NOT
53877: IFTRUE 53886
53879: PUSH
53880: LD_VAR 0 2
53884: NOT
53885: OR
53886: IFFALSE 53890
// exit ;
53888: GO 53988
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53890: LD_ADDR_VAR 0 1
53894: PUSH
53895: LD_VAR 0 1
53899: PPUSH
53900: LD_INT 50
53902: PUSH
53903: EMPTY
53904: LIST
53905: PUSH
53906: LD_INT 3
53908: PUSH
53909: LD_INT 92
53911: PUSH
53912: LD_VAR 0 2
53916: PUSH
53917: LD_INT 1
53919: ARRAY
53920: PUSH
53921: LD_VAR 0 2
53925: PUSH
53926: LD_INT 2
53928: ARRAY
53929: PUSH
53930: LD_INT 8
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PPUSH
53947: CALL_OW 72
53951: ST_TO_ADDR
// if not vehicles then
53952: LD_VAR 0 1
53956: NOT
53957: IFFALSE 53961
// exit ;
53959: GO 53988
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53961: LD_VAR 0 1
53965: PPUSH
53966: LD_VAR 0 2
53970: PUSH
53971: LD_INT 1
53973: ARRAY
53974: PPUSH
53975: LD_VAR 0 2
53979: PUSH
53980: LD_INT 2
53982: ARRAY
53983: PPUSH
53984: CALL_OW 111
// end ;
53988: LD_VAR 0 3
53992: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53993: LD_INT 0
53995: PPUSH
53996: PPUSH
53997: PPUSH
// if not side or not area then
53998: LD_VAR 0 1
54002: NOT
54003: IFTRUE 54012
54005: PUSH
54006: LD_VAR 0 2
54010: NOT
54011: OR
54012: IFFALSE 54016
// exit ;
54014: GO 54135
// tmp := AreaToList ( area , 0 ) ;
54016: LD_ADDR_VAR 0 5
54020: PUSH
54021: LD_VAR 0 2
54025: PPUSH
54026: LD_INT 0
54028: PPUSH
54029: CALL_OW 517
54033: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54034: LD_ADDR_VAR 0 4
54038: PUSH
54039: DOUBLE
54040: LD_INT 1
54042: DEC
54043: ST_TO_ADDR
54044: LD_VAR 0 5
54048: PUSH
54049: LD_INT 1
54051: ARRAY
54052: PUSH
54053: FOR_TO
54054: IFFALSE 54133
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54056: LD_VAR 0 5
54060: PUSH
54061: LD_INT 1
54063: ARRAY
54064: PUSH
54065: LD_VAR 0 4
54069: ARRAY
54070: PPUSH
54071: LD_VAR 0 5
54075: PUSH
54076: LD_INT 2
54078: ARRAY
54079: PUSH
54080: LD_VAR 0 4
54084: ARRAY
54085: PPUSH
54086: CALL_OW 351
54090: IFFALSE 54131
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54092: LD_VAR 0 5
54096: PUSH
54097: LD_INT 1
54099: ARRAY
54100: PUSH
54101: LD_VAR 0 4
54105: ARRAY
54106: PPUSH
54107: LD_VAR 0 5
54111: PUSH
54112: LD_INT 2
54114: ARRAY
54115: PUSH
54116: LD_VAR 0 4
54120: ARRAY
54121: PPUSH
54122: LD_VAR 0 1
54126: PPUSH
54127: CALL_OW 244
// end ;
54131: GO 54053
54133: POP
54134: POP
// end ;
54135: LD_VAR 0 3
54139: RET
// export function UniqueArray ( array ) ; var i ; begin
54140: LD_INT 0
54142: PPUSH
54143: PPUSH
// result := [ ] ;
54144: LD_ADDR_VAR 0 2
54148: PUSH
54149: EMPTY
54150: ST_TO_ADDR
// if not array then
54151: LD_VAR 0 1
54155: NOT
54156: IFFALSE 54160
// exit ;
54158: GO 54221
// for i := 1 to array do
54160: LD_ADDR_VAR 0 3
54164: PUSH
54165: DOUBLE
54166: LD_INT 1
54168: DEC
54169: ST_TO_ADDR
54170: LD_VAR 0 1
54174: PUSH
54175: FOR_TO
54176: IFFALSE 54219
// if not array [ i ] in result then
54178: LD_VAR 0 1
54182: PUSH
54183: LD_VAR 0 3
54187: ARRAY
54188: PUSH
54189: LD_VAR 0 2
54193: IN
54194: NOT
54195: IFFALSE 54217
// result := Join ( result , i ) ;
54197: LD_ADDR_VAR 0 2
54201: PUSH
54202: LD_VAR 0 2
54206: PPUSH
54207: LD_VAR 0 3
54211: PPUSH
54212: CALL 48872 0 2
54216: ST_TO_ADDR
54217: GO 54175
54219: POP
54220: POP
// end ; end_of_file
54221: LD_VAR 0 2
54225: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54226: LD_VAR 0 1
54230: PUSH
54231: LD_INT 200
54233: DOUBLE
54234: GREATEREQUAL
54235: IFFALSE 54243
54237: LD_INT 299
54239: DOUBLE
54240: LESSEQUAL
54241: IFTRUE 54245
54243: GO 54277
54245: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54246: LD_VAR 0 1
54250: PPUSH
54251: LD_VAR 0 2
54255: PPUSH
54256: LD_VAR 0 3
54260: PPUSH
54261: LD_VAR 0 4
54265: PPUSH
54266: LD_VAR 0 5
54270: PPUSH
54271: CALL 55139 0 5
54275: GO 54354
54277: LD_INT 300
54279: DOUBLE
54280: GREATEREQUAL
54281: IFFALSE 54289
54283: LD_INT 399
54285: DOUBLE
54286: LESSEQUAL
54287: IFTRUE 54291
54289: GO 54353
54291: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54292: LD_VAR 0 1
54296: PPUSH
54297: LD_VAR 0 2
54301: PPUSH
54302: LD_VAR 0 3
54306: PPUSH
54307: LD_VAR 0 4
54311: PPUSH
54312: LD_VAR 0 5
54316: PPUSH
54317: LD_VAR 0 6
54321: PPUSH
54322: LD_VAR 0 7
54326: PPUSH
54327: LD_VAR 0 8
54331: PPUSH
54332: LD_VAR 0 9
54336: PPUSH
54337: LD_VAR 0 10
54341: PPUSH
54342: LD_VAR 0 11
54346: PPUSH
54347: CALL 63141 0 11
54351: GO 54354
54353: POP
// end ;
54354: PPOPN 11
54356: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54357: LD_VAR 0 1
54361: PPUSH
54362: LD_VAR 0 2
54366: PPUSH
54367: LD_VAR 0 3
54371: PPUSH
54372: LD_VAR 0 4
54376: PPUSH
54377: LD_VAR 0 5
54381: PPUSH
54382: CALL 54439 0 5
// end ; end_of_file
54386: PPOPN 5
54388: END
// export function SOS_UnitDestroyed ( un ) ; begin
54389: LD_INT 0
54391: PPUSH
// ComRadiation ( un ) ;
54392: LD_VAR 0 1
54396: PPUSH
54397: CALL 55559 0 1
// end ;
54401: LD_VAR 0 2
54405: RET
// export function SOS_UnitKamikazed ( un ) ; begin
54406: LD_INT 0
54408: PPUSH
// ComRadiation ( un ) ;
54409: LD_VAR 0 1
54413: PPUSH
54414: CALL 55559 0 1
// end ;
54418: LD_VAR 0 2
54422: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
54423: LD_INT 0
54425: PPUSH
// end ;
54426: LD_VAR 0 4
54430: RET
// export function SOS_Command ( cmd ) ; begin
54431: LD_INT 0
54433: PPUSH
// end ;
54434: LD_VAR 0 2
54438: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
54439: LD_INT 0
54441: PPUSH
// end ;
54442: LD_VAR 0 6
54446: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
54447: LD_INT 0
54449: PPUSH
54450: PPUSH
54451: PPUSH
54452: PPUSH
54453: PPUSH
// if not vehicle or not factory then
54454: LD_VAR 0 1
54458: NOT
54459: IFTRUE 54468
54461: PUSH
54462: LD_VAR 0 2
54466: NOT
54467: OR
54468: IFFALSE 54472
// exit ;
54470: GO 55134
// weapon := GetWeapon ( vehicle ) ;
54472: LD_ADDR_VAR 0 7
54476: PUSH
54477: LD_VAR 0 1
54481: PPUSH
54482: CALL_OW 264
54486: ST_TO_ADDR
// if weapon = ar_miner then
54487: LD_VAR 0 7
54491: PUSH
54492: LD_INT 81
54494: EQUAL
54495: IFFALSE 54552
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
54497: LD_ADDR_EXP 56
54501: PUSH
54502: LD_EXP 56
54506: PPUSH
54507: LD_EXP 56
54511: PUSH
54512: LD_INT 1
54514: PLUS
54515: PPUSH
54516: LD_VAR 0 1
54520: PPUSH
54521: CALL_OW 1
54525: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54526: LD_ADDR_EXP 57
54530: PUSH
54531: LD_EXP 57
54535: PPUSH
54536: LD_EXP 57
54540: PUSH
54541: LD_INT 1
54543: PLUS
54544: PPUSH
54545: EMPTY
54546: PPUSH
54547: CALL_OW 1
54551: ST_TO_ADDR
// end ; if not factoryWaypoints then
54552: LD_EXP 60
54556: NOT
54557: IFFALSE 54561
// exit ;
54559: GO 55134
// for i := 1 to Count ( factoryWaypoints ) do
54561: LD_ADDR_VAR 0 4
54565: PUSH
54566: DOUBLE
54567: LD_INT 1
54569: DEC
54570: ST_TO_ADDR
54571: LD_EXP 60
54575: PPUSH
54576: CALL 12906 0 1
54580: PUSH
54581: FOR_TO
54582: IFFALSE 55132
// if factoryWaypoints [ i ] [ 2 ] = factory then
54584: LD_EXP 60
54588: PUSH
54589: LD_VAR 0 4
54593: ARRAY
54594: PUSH
54595: LD_INT 2
54597: ARRAY
54598: PUSH
54599: LD_VAR 0 2
54603: EQUAL
54604: IFFALSE 55130
// begin if GetControl ( vehicle ) = control_manual then
54606: LD_VAR 0 1
54610: PPUSH
54611: CALL_OW 263
54615: PUSH
54616: LD_INT 1
54618: EQUAL
54619: IFFALSE 54983
// begin driver := IsDrivenBy ( vehicle ) ;
54621: LD_ADDR_VAR 0 5
54625: PUSH
54626: LD_VAR 0 1
54630: PPUSH
54631: CALL_OW 311
54635: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
54636: LD_VAR 0 5
54640: PUSH
54641: LD_EXP 61
54645: IN
54646: IFTRUE 54660
54648: PUSH
54649: LD_VAR 0 1
54653: PUSH
54654: LD_EXP 61
54658: IN
54659: OR
54660: IFFALSE 54666
// exit ;
54662: POP
54663: POP
54664: GO 55134
// if not HasTask ( driver ) then
54666: LD_VAR 0 5
54670: PPUSH
54671: CALL_OW 314
54675: NOT
54676: IFFALSE 54981
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
54678: LD_ADDR_EXP 61
54682: PUSH
54683: LD_EXP 61
54687: PPUSH
54688: LD_VAR 0 5
54692: PPUSH
54693: CALL 48872 0 2
54697: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
54698: LD_ADDR_EXP 61
54702: PUSH
54703: LD_EXP 61
54707: PPUSH
54708: LD_VAR 0 1
54712: PPUSH
54713: CALL 48872 0 2
54717: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54718: LD_ADDR_VAR 0 6
54722: PUSH
54723: LD_EXP 60
54727: PUSH
54728: LD_VAR 0 4
54732: ARRAY
54733: PUSH
54734: LD_INT 3
54736: ARRAY
54737: PPUSH
54738: LD_EXP 60
54742: PUSH
54743: LD_VAR 0 4
54747: ARRAY
54748: PUSH
54749: LD_INT 4
54751: ARRAY
54752: PPUSH
54753: CALL_OW 428
54757: ST_TO_ADDR
// if hex then
54758: LD_VAR 0 6
54762: IFFALSE 54780
// ComMoveUnit ( driver , hex ) else
54764: LD_VAR 0 5
54768: PPUSH
54769: LD_VAR 0 6
54773: PPUSH
54774: CALL_OW 112
54778: GO 54864
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54780: LD_VAR 0 1
54784: PPUSH
54785: LD_EXP 60
54789: PUSH
54790: LD_VAR 0 4
54794: ARRAY
54795: PUSH
54796: LD_INT 3
54798: ARRAY
54799: PPUSH
54800: LD_EXP 60
54804: PUSH
54805: LD_VAR 0 4
54809: ARRAY
54810: PUSH
54811: LD_INT 4
54813: ARRAY
54814: PPUSH
54815: CALL_OW 297
54819: PUSH
54820: LD_INT 0
54822: GREATER
54823: IFFALSE 54864
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54825: LD_VAR 0 5
54829: PPUSH
54830: LD_EXP 60
54834: PUSH
54835: LD_VAR 0 4
54839: ARRAY
54840: PUSH
54841: LD_INT 3
54843: ARRAY
54844: PPUSH
54845: LD_EXP 60
54849: PUSH
54850: LD_VAR 0 4
54854: ARRAY
54855: PUSH
54856: LD_INT 4
54858: ARRAY
54859: PPUSH
54860: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54864: LD_VAR 0 5
54868: PPUSH
54869: CALL_OW 181
// if Multiplayer then
54873: LD_OWVAR 4
54877: IFFALSE 54926
// begin repeat wait ( 10 ) ;
54879: LD_INT 10
54881: PPUSH
54882: CALL_OW 67
// until not IsInUnit ( driver ) ;
54886: LD_VAR 0 5
54890: PPUSH
54891: CALL_OW 310
54895: NOT
54896: IFFALSE 54879
// if not HasTask ( driver ) then
54898: LD_VAR 0 5
54902: PPUSH
54903: CALL_OW 314
54907: NOT
54908: IFFALSE 54924
// ComEnterUnit ( driver , factory ) ;
54910: LD_VAR 0 5
54914: PPUSH
54915: LD_VAR 0 2
54919: PPUSH
54920: CALL_OW 120
// end else
54924: GO 54940
// AddComEnterUnit ( driver , factory ) ;
54926: LD_VAR 0 5
54930: PPUSH
54931: LD_VAR 0 2
54935: PPUSH
54936: CALL_OW 180
// wait ( 0 0$1 ) ;
54940: LD_INT 35
54942: PPUSH
54943: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54947: LD_ADDR_EXP 61
54951: PUSH
54952: LD_EXP 61
54956: PUSH
54957: LD_VAR 0 5
54961: DIFF
54962: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54963: LD_ADDR_EXP 61
54967: PUSH
54968: LD_EXP 61
54972: PUSH
54973: LD_VAR 0 1
54977: DIFF
54978: ST_TO_ADDR
// break ;
54979: GO 55132
// end ; end else
54981: GO 55130
// if GetControl ( vehicle ) = control_remote then
54983: LD_VAR 0 1
54987: PPUSH
54988: CALL_OW 263
54992: PUSH
54993: LD_INT 2
54995: EQUAL
54996: IFFALSE 55082
// begin wait ( 0 0$2 ) ;
54998: LD_INT 70
55000: PPUSH
55001: CALL_OW 67
// repeat wait ( 10 ) ;
55005: LD_INT 10
55007: PPUSH
55008: CALL_OW 67
// Connect ( vehicle ) ;
55012: LD_VAR 0 1
55016: PPUSH
55017: CALL 19184 0 1
// until IsControledBy ( vehicle ) ;
55021: LD_VAR 0 1
55025: PPUSH
55026: CALL_OW 312
55030: IFFALSE 55005
// wait ( 10 ) ;
55032: LD_INT 10
55034: PPUSH
55035: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55039: LD_VAR 0 1
55043: PPUSH
55044: LD_EXP 60
55048: PUSH
55049: LD_VAR 0 4
55053: ARRAY
55054: PUSH
55055: LD_INT 3
55057: ARRAY
55058: PPUSH
55059: LD_EXP 60
55063: PUSH
55064: LD_VAR 0 4
55068: ARRAY
55069: PUSH
55070: LD_INT 4
55072: ARRAY
55073: PPUSH
55074: CALL_OW 111
// break ;
55078: GO 55132
// end else
55080: GO 55130
// begin wait ( 0 0$3 ) ;
55082: LD_INT 105
55084: PPUSH
55085: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55089: LD_VAR 0 1
55093: PPUSH
55094: LD_EXP 60
55098: PUSH
55099: LD_VAR 0 4
55103: ARRAY
55104: PUSH
55105: LD_INT 3
55107: ARRAY
55108: PPUSH
55109: LD_EXP 60
55113: PUSH
55114: LD_VAR 0 4
55118: ARRAY
55119: PUSH
55120: LD_INT 4
55122: ARRAY
55123: PPUSH
55124: CALL_OW 111
// break ;
55128: GO 55132
// end ; end ;
55130: GO 54581
55132: POP
55133: POP
// end ;
55134: LD_VAR 0 3
55138: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55139: LD_INT 0
55141: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55142: LD_VAR 0 1
55146: PUSH
55147: LD_INT 250
55149: EQUAL
55150: IFFALSE 55167
55152: PUSH
55153: LD_VAR 0 2
55157: PPUSH
55158: CALL_OW 264
55162: PUSH
55163: LD_INT 81
55165: EQUAL
55166: AND
55167: IFFALSE 55188
// MinerPlaceMine ( unit , x , y ) ;
55169: LD_VAR 0 2
55173: PPUSH
55174: LD_VAR 0 4
55178: PPUSH
55179: LD_VAR 0 5
55183: PPUSH
55184: CALL 58469 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55188: LD_VAR 0 1
55192: PUSH
55193: LD_INT 251
55195: EQUAL
55196: IFFALSE 55213
55198: PUSH
55199: LD_VAR 0 2
55203: PPUSH
55204: CALL_OW 264
55208: PUSH
55209: LD_INT 81
55211: EQUAL
55212: AND
55213: IFFALSE 55234
// MinerDetonateMine ( unit , x , y ) ;
55215: LD_VAR 0 2
55219: PPUSH
55220: LD_VAR 0 4
55224: PPUSH
55225: LD_VAR 0 5
55229: PPUSH
55230: CALL 58876 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55234: LD_VAR 0 1
55238: PUSH
55239: LD_INT 252
55241: EQUAL
55242: IFFALSE 55259
55244: PUSH
55245: LD_VAR 0 2
55249: PPUSH
55250: CALL_OW 264
55254: PUSH
55255: LD_INT 81
55257: EQUAL
55258: AND
55259: IFFALSE 55280
// MinerCreateMinefield ( unit , x , y ) ;
55261: LD_VAR 0 2
55265: PPUSH
55266: LD_VAR 0 4
55270: PPUSH
55271: LD_VAR 0 5
55275: PPUSH
55276: CALL 59108 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55280: LD_VAR 0 1
55284: PUSH
55285: LD_INT 253
55287: EQUAL
55288: IFFALSE 55305
55290: PUSH
55291: LD_VAR 0 2
55295: PPUSH
55296: CALL_OW 257
55300: PUSH
55301: LD_INT 5
55303: EQUAL
55304: AND
55305: IFFALSE 55326
// ComBinocular ( unit , x , y ) ;
55307: LD_VAR 0 2
55311: PPUSH
55312: LD_VAR 0 4
55316: PPUSH
55317: LD_VAR 0 5
55321: PPUSH
55322: CALL 59483 0 3
// if selectedUnit then
55326: LD_VAR 0 3
55330: IFFALSE 55390
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55332: LD_VAR 0 1
55336: PUSH
55337: LD_INT 254
55339: EQUAL
55340: IFFALSE 55357
55342: PUSH
55343: LD_VAR 0 2
55347: PPUSH
55348: CALL_OW 264
55352: PUSH
55353: LD_INT 99
55355: EQUAL
55356: AND
55357: IFFALSE 55374
55359: PUSH
55360: LD_VAR 0 3
55364: PPUSH
55365: CALL_OW 263
55369: PUSH
55370: LD_INT 3
55372: EQUAL
55373: AND
55374: IFFALSE 55390
// HackDestroyVehicle ( unit , selectedUnit ) ;
55376: LD_VAR 0 2
55380: PPUSH
55381: LD_VAR 0 3
55385: PPUSH
55386: CALL 57680 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55390: LD_VAR 0 1
55394: PUSH
55395: LD_INT 255
55397: EQUAL
55398: IFFALSE 55422
55400: PUSH
55401: LD_VAR 0 2
55405: PPUSH
55406: CALL_OW 264
55410: PUSH
55411: LD_INT 14
55413: PUSH
55414: LD_INT 53
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: IN
55421: AND
55422: IFFALSE 55440
55424: PUSH
55425: LD_VAR 0 4
55429: PPUSH
55430: LD_VAR 0 5
55434: PPUSH
55435: CALL_OW 488
55439: AND
55440: IFFALSE 55464
// CutTreeXYR ( unit , x , y , 12 ) ;
55442: LD_VAR 0 2
55446: PPUSH
55447: LD_VAR 0 4
55451: PPUSH
55452: LD_VAR 0 5
55456: PPUSH
55457: LD_INT 12
55459: PPUSH
55460: CALL 55655 0 4
// if cmd = 256 then
55464: LD_VAR 0 1
55468: PUSH
55469: LD_INT 256
55471: EQUAL
55472: IFFALSE 55493
// SetFactoryWaypoint ( unit , x , y ) ;
55474: LD_VAR 0 2
55478: PPUSH
55479: LD_VAR 0 4
55483: PPUSH
55484: LD_VAR 0 5
55488: PPUSH
55489: CALL 63149 0 3
// if cmd = 257 then
55493: LD_VAR 0 1
55497: PUSH
55498: LD_INT 257
55500: EQUAL
55501: IFFALSE 55522
// SetWarehouseGatheringPoint ( unit , x , y ) ;
55503: LD_VAR 0 2
55507: PPUSH
55508: LD_VAR 0 4
55512: PPUSH
55513: LD_VAR 0 5
55517: PPUSH
55518: CALL 63645 0 3
// if cmd = 258 then
55522: LD_VAR 0 1
55526: PUSH
55527: LD_INT 258
55529: EQUAL
55530: IFFALSE 55554
// BurnTreeXYR ( unit , x , y , 8 ) ;
55532: LD_VAR 0 2
55536: PPUSH
55537: LD_VAR 0 4
55541: PPUSH
55542: LD_VAR 0 5
55546: PPUSH
55547: LD_INT 8
55549: PPUSH
55550: CALL 56055 0 4
// end ;
55554: LD_VAR 0 6
55558: RET
// export function ComRadiation ( un ) ; var eff ; begin
55559: LD_INT 0
55561: PPUSH
55562: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
55563: LD_VAR 0 1
55567: PPUSH
55568: CALL_OW 264
55572: PUSH
55573: LD_INT 91
55575: NONEQUAL
55576: IFFALSE 55580
// exit ;
55578: GO 55650
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55580: LD_INT 68
55582: PPUSH
55583: LD_VAR 0 1
55587: PPUSH
55588: CALL_OW 255
55592: PPUSH
55593: CALL_OW 321
55597: PUSH
55598: LD_INT 2
55600: EQUAL
55601: IFFALSE 55613
// eff := 50 else
55603: LD_ADDR_VAR 0 3
55607: PUSH
55608: LD_INT 50
55610: ST_TO_ADDR
55611: GO 55621
// eff := 25 ;
55613: LD_ADDR_VAR 0 3
55617: PUSH
55618: LD_INT 25
55620: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55621: LD_VAR 0 1
55625: PPUSH
55626: CALL_OW 250
55630: PPUSH
55631: LD_VAR 0 1
55635: PPUSH
55636: CALL_OW 251
55640: PPUSH
55641: LD_VAR 0 3
55645: PPUSH
55646: CALL_OW 495
// end ;
55650: LD_VAR 0 2
55654: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55655: LD_INT 0
55657: PPUSH
55658: PPUSH
55659: PPUSH
55660: PPUSH
55661: PPUSH
55662: PPUSH
55663: PPUSH
55664: PPUSH
55665: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
55666: LD_VAR 0 1
55670: PPUSH
55671: CALL_OW 302
55675: NOT
55676: IFTRUE 55695
55678: PUSH
55679: LD_VAR 0 2
55683: PPUSH
55684: LD_VAR 0 3
55688: PPUSH
55689: CALL_OW 488
55693: NOT
55694: OR
55695: IFTRUE 55704
55697: PUSH
55698: LD_VAR 0 4
55702: NOT
55703: OR
55704: IFFALSE 55708
// exit ;
55706: GO 56050
// list := [ ] ;
55708: LD_ADDR_VAR 0 13
55712: PUSH
55713: EMPTY
55714: ST_TO_ADDR
// if x - r < 0 then
55715: LD_VAR 0 2
55719: PUSH
55720: LD_VAR 0 4
55724: MINUS
55725: PUSH
55726: LD_INT 0
55728: LESS
55729: IFFALSE 55741
// min_x := 0 else
55731: LD_ADDR_VAR 0 7
55735: PUSH
55736: LD_INT 0
55738: ST_TO_ADDR
55739: GO 55757
// min_x := x - r ;
55741: LD_ADDR_VAR 0 7
55745: PUSH
55746: LD_VAR 0 2
55750: PUSH
55751: LD_VAR 0 4
55755: MINUS
55756: ST_TO_ADDR
// if y - r < 0 then
55757: LD_VAR 0 3
55761: PUSH
55762: LD_VAR 0 4
55766: MINUS
55767: PUSH
55768: LD_INT 0
55770: LESS
55771: IFFALSE 55783
// min_y := 0 else
55773: LD_ADDR_VAR 0 8
55777: PUSH
55778: LD_INT 0
55780: ST_TO_ADDR
55781: GO 55799
// min_y := y - r ;
55783: LD_ADDR_VAR 0 8
55787: PUSH
55788: LD_VAR 0 3
55792: PUSH
55793: LD_VAR 0 4
55797: MINUS
55798: ST_TO_ADDR
// max_x := x + r ;
55799: LD_ADDR_VAR 0 9
55803: PUSH
55804: LD_VAR 0 2
55808: PUSH
55809: LD_VAR 0 4
55813: PLUS
55814: ST_TO_ADDR
// max_y := y + r ;
55815: LD_ADDR_VAR 0 10
55819: PUSH
55820: LD_VAR 0 3
55824: PUSH
55825: LD_VAR 0 4
55829: PLUS
55830: ST_TO_ADDR
// for _x = min_x to max_x do
55831: LD_ADDR_VAR 0 11
55835: PUSH
55836: DOUBLE
55837: LD_VAR 0 7
55841: DEC
55842: ST_TO_ADDR
55843: LD_VAR 0 9
55847: PUSH
55848: FOR_TO
55849: IFFALSE 55968
// for _y = min_y to max_y do
55851: LD_ADDR_VAR 0 12
55855: PUSH
55856: DOUBLE
55857: LD_VAR 0 8
55861: DEC
55862: ST_TO_ADDR
55863: LD_VAR 0 10
55867: PUSH
55868: FOR_TO
55869: IFFALSE 55964
// begin if not ValidHex ( _x , _y ) then
55871: LD_VAR 0 11
55875: PPUSH
55876: LD_VAR 0 12
55880: PPUSH
55881: CALL_OW 488
55885: NOT
55886: IFFALSE 55890
// continue ;
55888: GO 55868
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55890: LD_VAR 0 11
55894: PPUSH
55895: LD_VAR 0 12
55899: PPUSH
55900: CALL_OW 351
55904: IFFALSE 55922
55906: PUSH
55907: LD_VAR 0 11
55911: PPUSH
55912: LD_VAR 0 12
55916: PPUSH
55917: CALL_OW 554
55921: AND
55922: IFFALSE 55962
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55924: LD_ADDR_VAR 0 13
55928: PUSH
55929: LD_VAR 0 13
55933: PPUSH
55934: LD_VAR 0 13
55938: PUSH
55939: LD_INT 1
55941: PLUS
55942: PPUSH
55943: LD_VAR 0 11
55947: PUSH
55948: LD_VAR 0 12
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PPUSH
55957: CALL_OW 2
55961: ST_TO_ADDR
// end ;
55962: GO 55868
55964: POP
55965: POP
55966: GO 55848
55968: POP
55969: POP
// if not list then
55970: LD_VAR 0 13
55974: NOT
55975: IFFALSE 55979
// exit ;
55977: GO 56050
// for i in list do
55979: LD_ADDR_VAR 0 6
55983: PUSH
55984: LD_VAR 0 13
55988: PUSH
55989: FOR_IN
55990: IFFALSE 56048
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55992: LD_VAR 0 1
55996: PPUSH
55997: LD_STRING M
55999: PUSH
56000: LD_VAR 0 6
56004: PUSH
56005: LD_INT 1
56007: ARRAY
56008: PUSH
56009: LD_VAR 0 6
56013: PUSH
56014: LD_INT 2
56016: ARRAY
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: PUSH
56039: EMPTY
56040: LIST
56041: PPUSH
56042: CALL_OW 447
56046: GO 55989
56048: POP
56049: POP
// end ;
56050: LD_VAR 0 5
56054: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56055: LD_INT 0
56057: PPUSH
56058: PPUSH
56059: PPUSH
56060: PPUSH
56061: PPUSH
56062: PPUSH
56063: PPUSH
56064: PPUSH
56065: PPUSH
56066: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56067: LD_VAR 0 1
56071: PPUSH
56072: CALL_OW 302
56076: NOT
56077: IFTRUE 56096
56079: PUSH
56080: LD_VAR 0 2
56084: PPUSH
56085: LD_VAR 0 3
56089: PPUSH
56090: CALL_OW 488
56094: NOT
56095: OR
56096: IFTRUE 56105
56098: PUSH
56099: LD_VAR 0 4
56103: NOT
56104: OR
56105: IFFALSE 56109
// exit ;
56107: GO 56626
// list := [ ] ;
56109: LD_ADDR_VAR 0 13
56113: PUSH
56114: EMPTY
56115: ST_TO_ADDR
// if x - r < 0 then
56116: LD_VAR 0 2
56120: PUSH
56121: LD_VAR 0 4
56125: MINUS
56126: PUSH
56127: LD_INT 0
56129: LESS
56130: IFFALSE 56142
// min_x := 0 else
56132: LD_ADDR_VAR 0 7
56136: PUSH
56137: LD_INT 0
56139: ST_TO_ADDR
56140: GO 56158
// min_x := x - r ;
56142: LD_ADDR_VAR 0 7
56146: PUSH
56147: LD_VAR 0 2
56151: PUSH
56152: LD_VAR 0 4
56156: MINUS
56157: ST_TO_ADDR
// if y - r < 0 then
56158: LD_VAR 0 3
56162: PUSH
56163: LD_VAR 0 4
56167: MINUS
56168: PUSH
56169: LD_INT 0
56171: LESS
56172: IFFALSE 56184
// min_y := 0 else
56174: LD_ADDR_VAR 0 8
56178: PUSH
56179: LD_INT 0
56181: ST_TO_ADDR
56182: GO 56200
// min_y := y - r ;
56184: LD_ADDR_VAR 0 8
56188: PUSH
56189: LD_VAR 0 3
56193: PUSH
56194: LD_VAR 0 4
56198: MINUS
56199: ST_TO_ADDR
// max_x := x + r ;
56200: LD_ADDR_VAR 0 9
56204: PUSH
56205: LD_VAR 0 2
56209: PUSH
56210: LD_VAR 0 4
56214: PLUS
56215: ST_TO_ADDR
// max_y := y + r ;
56216: LD_ADDR_VAR 0 10
56220: PUSH
56221: LD_VAR 0 3
56225: PUSH
56226: LD_VAR 0 4
56230: PLUS
56231: ST_TO_ADDR
// for _x = min_x to max_x do
56232: LD_ADDR_VAR 0 11
56236: PUSH
56237: DOUBLE
56238: LD_VAR 0 7
56242: DEC
56243: ST_TO_ADDR
56244: LD_VAR 0 9
56248: PUSH
56249: FOR_TO
56250: IFFALSE 56369
// for _y = min_y to max_y do
56252: LD_ADDR_VAR 0 12
56256: PUSH
56257: DOUBLE
56258: LD_VAR 0 8
56262: DEC
56263: ST_TO_ADDR
56264: LD_VAR 0 10
56268: PUSH
56269: FOR_TO
56270: IFFALSE 56365
// begin if not ValidHex ( _x , _y ) then
56272: LD_VAR 0 11
56276: PPUSH
56277: LD_VAR 0 12
56281: PPUSH
56282: CALL_OW 488
56286: NOT
56287: IFFALSE 56291
// continue ;
56289: GO 56269
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56291: LD_VAR 0 11
56295: PPUSH
56296: LD_VAR 0 12
56300: PPUSH
56301: CALL_OW 351
56305: IFFALSE 56323
56307: PUSH
56308: LD_VAR 0 11
56312: PPUSH
56313: LD_VAR 0 12
56317: PPUSH
56318: CALL_OW 554
56322: AND
56323: IFFALSE 56363
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56325: LD_ADDR_VAR 0 13
56329: PUSH
56330: LD_VAR 0 13
56334: PPUSH
56335: LD_VAR 0 13
56339: PUSH
56340: LD_INT 1
56342: PLUS
56343: PPUSH
56344: LD_VAR 0 11
56348: PUSH
56349: LD_VAR 0 12
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PPUSH
56358: CALL_OW 2
56362: ST_TO_ADDR
// end ;
56363: GO 56269
56365: POP
56366: POP
56367: GO 56249
56369: POP
56370: POP
// if not list then
56371: LD_VAR 0 13
56375: NOT
56376: IFFALSE 56380
// exit ;
56378: GO 56626
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
56380: LD_ADDR_VAR 0 13
56384: PUSH
56385: LD_VAR 0 1
56389: PPUSH
56390: LD_VAR 0 13
56394: PPUSH
56395: LD_INT 1
56397: PPUSH
56398: LD_INT 1
56400: PPUSH
56401: CALL 16312 0 4
56405: ST_TO_ADDR
// ComStop ( flame ) ;
56406: LD_VAR 0 1
56410: PPUSH
56411: CALL_OW 141
// for i in list do
56415: LD_ADDR_VAR 0 6
56419: PUSH
56420: LD_VAR 0 13
56424: PUSH
56425: FOR_IN
56426: IFFALSE 56457
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
56428: LD_VAR 0 1
56432: PPUSH
56433: LD_VAR 0 6
56437: PUSH
56438: LD_INT 1
56440: ARRAY
56441: PPUSH
56442: LD_VAR 0 6
56446: PUSH
56447: LD_INT 2
56449: ARRAY
56450: PPUSH
56451: CALL_OW 176
56455: GO 56425
56457: POP
56458: POP
// repeat wait ( 0 0$1 ) ;
56459: LD_INT 35
56461: PPUSH
56462: CALL_OW 67
// task := GetTaskList ( flame ) ;
56466: LD_ADDR_VAR 0 14
56470: PUSH
56471: LD_VAR 0 1
56475: PPUSH
56476: CALL_OW 437
56480: ST_TO_ADDR
// if not task then
56481: LD_VAR 0 14
56485: NOT
56486: IFFALSE 56490
// exit ;
56488: GO 56626
// if task [ 1 ] [ 1 ] <> | then
56490: LD_VAR 0 14
56494: PUSH
56495: LD_INT 1
56497: ARRAY
56498: PUSH
56499: LD_INT 1
56501: ARRAY
56502: PUSH
56503: LD_STRING |
56505: NONEQUAL
56506: IFFALSE 56510
// exit ;
56508: GO 56626
// _x := task [ 1 ] [ 2 ] ;
56510: LD_ADDR_VAR 0 11
56514: PUSH
56515: LD_VAR 0 14
56519: PUSH
56520: LD_INT 1
56522: ARRAY
56523: PUSH
56524: LD_INT 2
56526: ARRAY
56527: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
56528: LD_ADDR_VAR 0 12
56532: PUSH
56533: LD_VAR 0 14
56537: PUSH
56538: LD_INT 1
56540: ARRAY
56541: PUSH
56542: LD_INT 3
56544: ARRAY
56545: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
56546: LD_VAR 0 11
56550: PPUSH
56551: LD_VAR 0 12
56555: PPUSH
56556: CALL_OW 351
56560: NOT
56561: IFTRUE 56580
56563: PUSH
56564: LD_VAR 0 11
56568: PPUSH
56569: LD_VAR 0 12
56573: PPUSH
56574: CALL_OW 554
56578: NOT
56579: OR
56580: IFFALSE 56614
// begin task := Delete ( task , 1 ) ;
56582: LD_ADDR_VAR 0 14
56586: PUSH
56587: LD_VAR 0 14
56591: PPUSH
56592: LD_INT 1
56594: PPUSH
56595: CALL_OW 3
56599: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
56600: LD_VAR 0 1
56604: PPUSH
56605: LD_VAR 0 14
56609: PPUSH
56610: CALL_OW 446
// end ; until not HasTask ( flame ) ;
56614: LD_VAR 0 1
56618: PPUSH
56619: CALL_OW 314
56623: NOT
56624: IFFALSE 56459
// end ;
56626: LD_VAR 0 5
56630: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56631: LD_EXP 49
56635: NOT
56636: IFFALSE 56686
56638: GO 56640
56640: DISABLE
// begin initHack := true ;
56641: LD_ADDR_EXP 49
56645: PUSH
56646: LD_INT 1
56648: ST_TO_ADDR
// hackTanks := [ ] ;
56649: LD_ADDR_EXP 50
56653: PUSH
56654: EMPTY
56655: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56656: LD_ADDR_EXP 51
56660: PUSH
56661: EMPTY
56662: ST_TO_ADDR
// hackLimit := 3 ;
56663: LD_ADDR_EXP 52
56667: PUSH
56668: LD_INT 3
56670: ST_TO_ADDR
// hackDist := 12 ;
56671: LD_ADDR_EXP 53
56675: PUSH
56676: LD_INT 12
56678: ST_TO_ADDR
// hackCounter := [ ] ;
56679: LD_ADDR_EXP 54
56683: PUSH
56684: EMPTY
56685: ST_TO_ADDR
// end ;
56686: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56687: LD_EXP 49
56691: IFFALSE 56709
56693: PUSH
56694: LD_INT 34
56696: PUSH
56697: LD_INT 99
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PPUSH
56704: CALL_OW 69
56708: AND
56709: IFFALSE 56962
56711: GO 56713
56713: DISABLE
56714: LD_INT 0
56716: PPUSH
56717: PPUSH
// begin enable ;
56718: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56719: LD_ADDR_VAR 0 1
56723: PUSH
56724: LD_INT 34
56726: PUSH
56727: LD_INT 99
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PPUSH
56734: CALL_OW 69
56738: PUSH
56739: FOR_IN
56740: IFFALSE 56960
// begin if not i in hackTanks then
56742: LD_VAR 0 1
56746: PUSH
56747: LD_EXP 50
56751: IN
56752: NOT
56753: IFFALSE 56836
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56755: LD_ADDR_EXP 50
56759: PUSH
56760: LD_EXP 50
56764: PPUSH
56765: LD_EXP 50
56769: PUSH
56770: LD_INT 1
56772: PLUS
56773: PPUSH
56774: LD_VAR 0 1
56778: PPUSH
56779: CALL_OW 1
56783: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56784: LD_ADDR_EXP 51
56788: PUSH
56789: LD_EXP 51
56793: PPUSH
56794: LD_EXP 51
56798: PUSH
56799: LD_INT 1
56801: PLUS
56802: PPUSH
56803: EMPTY
56804: PPUSH
56805: CALL_OW 1
56809: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56810: LD_ADDR_EXP 54
56814: PUSH
56815: LD_EXP 54
56819: PPUSH
56820: LD_EXP 54
56824: PUSH
56825: LD_INT 1
56827: PLUS
56828: PPUSH
56829: EMPTY
56830: PPUSH
56831: CALL_OW 1
56835: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56836: LD_VAR 0 1
56840: PPUSH
56841: CALL_OW 302
56845: NOT
56846: IFFALSE 56859
// begin HackUnlinkAll ( i ) ;
56848: LD_VAR 0 1
56852: PPUSH
56853: CALL 56965 0 1
// continue ;
56857: GO 56739
// end ; HackCheckCapturedStatus ( i ) ;
56859: LD_VAR 0 1
56863: PPUSH
56864: CALL 57410 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56868: LD_ADDR_VAR 0 2
56872: PUSH
56873: LD_INT 81
56875: PUSH
56876: LD_VAR 0 1
56880: PPUSH
56881: CALL_OW 255
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 33
56892: PUSH
56893: LD_INT 3
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 91
56902: PUSH
56903: LD_VAR 0 1
56907: PUSH
56908: LD_EXP 53
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 50
56920: PUSH
56921: EMPTY
56922: LIST
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: PPUSH
56930: CALL_OW 69
56934: ST_TO_ADDR
// if not tmp then
56935: LD_VAR 0 2
56939: NOT
56940: IFFALSE 56944
// continue ;
56942: GO 56739
// HackLink ( i , tmp ) ;
56944: LD_VAR 0 1
56948: PPUSH
56949: LD_VAR 0 2
56953: PPUSH
56954: CALL 57101 0 2
// end ;
56958: GO 56739
56960: POP
56961: POP
// end ;
56962: PPOPN 2
56964: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56965: LD_INT 0
56967: PPUSH
56968: PPUSH
56969: PPUSH
// if not hack in hackTanks then
56970: LD_VAR 0 1
56974: PUSH
56975: LD_EXP 50
56979: IN
56980: NOT
56981: IFFALSE 56985
// exit ;
56983: GO 57096
// index := GetElementIndex ( hackTanks , hack ) ;
56985: LD_ADDR_VAR 0 4
56989: PUSH
56990: LD_EXP 50
56994: PPUSH
56995: LD_VAR 0 1
56999: PPUSH
57000: CALL 15607 0 2
57004: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57005: LD_EXP 51
57009: PUSH
57010: LD_VAR 0 4
57014: ARRAY
57015: IFFALSE 57096
// begin for i in hackTanksCaptured [ index ] do
57017: LD_ADDR_VAR 0 3
57021: PUSH
57022: LD_EXP 51
57026: PUSH
57027: LD_VAR 0 4
57031: ARRAY
57032: PUSH
57033: FOR_IN
57034: IFFALSE 57060
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57036: LD_VAR 0 3
57040: PUSH
57041: LD_INT 1
57043: ARRAY
57044: PPUSH
57045: LD_VAR 0 3
57049: PUSH
57050: LD_INT 2
57052: ARRAY
57053: PPUSH
57054: CALL_OW 235
57058: GO 57033
57060: POP
57061: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57062: LD_ADDR_EXP 51
57066: PUSH
57067: LD_EXP 51
57071: PPUSH
57072: LD_VAR 0 4
57076: PPUSH
57077: EMPTY
57078: PPUSH
57079: CALL_OW 1
57083: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57084: LD_VAR 0 1
57088: PPUSH
57089: LD_INT 0
57091: PPUSH
57092: CALL_OW 505
// end ; end ;
57096: LD_VAR 0 2
57100: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57101: LD_INT 0
57103: PPUSH
57104: PPUSH
57105: PPUSH
// if not hack in hackTanks or not vehicles then
57106: LD_VAR 0 1
57110: PUSH
57111: LD_EXP 50
57115: IN
57116: NOT
57117: IFTRUE 57126
57119: PUSH
57120: LD_VAR 0 2
57124: NOT
57125: OR
57126: IFFALSE 57130
// exit ;
57128: GO 57405
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57130: LD_ADDR_VAR 0 2
57134: PUSH
57135: LD_VAR 0 1
57139: PPUSH
57140: LD_VAR 0 2
57144: PPUSH
57145: LD_INT 1
57147: PPUSH
57148: LD_INT 1
57150: PPUSH
57151: CALL 16259 0 4
57155: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57156: LD_ADDR_VAR 0 5
57160: PUSH
57161: LD_EXP 50
57165: PPUSH
57166: LD_VAR 0 1
57170: PPUSH
57171: CALL 15607 0 2
57175: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57176: LD_EXP 51
57180: PUSH
57181: LD_VAR 0 5
57185: ARRAY
57186: PUSH
57187: LD_EXP 52
57191: LESS
57192: IFFALSE 57381
// begin for i := 1 to vehicles do
57194: LD_ADDR_VAR 0 4
57198: PUSH
57199: DOUBLE
57200: LD_INT 1
57202: DEC
57203: ST_TO_ADDR
57204: LD_VAR 0 2
57208: PUSH
57209: FOR_TO
57210: IFFALSE 57379
// begin if hackTanksCaptured [ index ] = hackLimit then
57212: LD_EXP 51
57216: PUSH
57217: LD_VAR 0 5
57221: ARRAY
57222: PUSH
57223: LD_EXP 52
57227: EQUAL
57228: IFFALSE 57232
// break ;
57230: GO 57379
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57232: LD_ADDR_EXP 54
57236: PUSH
57237: LD_EXP 54
57241: PPUSH
57242: LD_VAR 0 5
57246: PPUSH
57247: LD_EXP 54
57251: PUSH
57252: LD_VAR 0 5
57256: ARRAY
57257: PUSH
57258: LD_INT 1
57260: PLUS
57261: PPUSH
57262: CALL_OW 1
57266: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57267: LD_ADDR_EXP 51
57271: PUSH
57272: LD_EXP 51
57276: PPUSH
57277: LD_VAR 0 5
57281: PUSH
57282: LD_EXP 51
57286: PUSH
57287: LD_VAR 0 5
57291: ARRAY
57292: PUSH
57293: LD_INT 1
57295: PLUS
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PPUSH
57301: LD_VAR 0 2
57305: PUSH
57306: LD_VAR 0 4
57310: ARRAY
57311: PUSH
57312: LD_VAR 0 2
57316: PUSH
57317: LD_VAR 0 4
57321: ARRAY
57322: PPUSH
57323: CALL_OW 255
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PPUSH
57332: CALL 15824 0 3
57336: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57337: LD_VAR 0 2
57341: PUSH
57342: LD_VAR 0 4
57346: ARRAY
57347: PPUSH
57348: LD_VAR 0 1
57352: PPUSH
57353: CALL_OW 255
57357: PPUSH
57358: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
57362: LD_VAR 0 2
57366: PUSH
57367: LD_VAR 0 4
57371: ARRAY
57372: PPUSH
57373: CALL_OW 141
// end ;
57377: GO 57209
57379: POP
57380: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57381: LD_VAR 0 1
57385: PPUSH
57386: LD_EXP 51
57390: PUSH
57391: LD_VAR 0 5
57395: ARRAY
57396: PUSH
57397: LD_INT 0
57399: PLUS
57400: PPUSH
57401: CALL_OW 505
// end ;
57405: LD_VAR 0 3
57409: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57410: LD_INT 0
57412: PPUSH
57413: PPUSH
57414: PPUSH
57415: PPUSH
// if not hack in hackTanks then
57416: LD_VAR 0 1
57420: PUSH
57421: LD_EXP 50
57425: IN
57426: NOT
57427: IFFALSE 57431
// exit ;
57429: GO 57675
// index := GetElementIndex ( hackTanks , hack ) ;
57431: LD_ADDR_VAR 0 4
57435: PUSH
57436: LD_EXP 50
57440: PPUSH
57441: LD_VAR 0 1
57445: PPUSH
57446: CALL 15607 0 2
57450: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57451: LD_ADDR_VAR 0 3
57455: PUSH
57456: DOUBLE
57457: LD_EXP 51
57461: PUSH
57462: LD_VAR 0 4
57466: ARRAY
57467: INC
57468: ST_TO_ADDR
57469: LD_INT 1
57471: PUSH
57472: FOR_DOWNTO
57473: IFFALSE 57649
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57475: LD_ADDR_VAR 0 5
57479: PUSH
57480: LD_EXP 51
57484: PUSH
57485: LD_VAR 0 4
57489: ARRAY
57490: PUSH
57491: LD_VAR 0 3
57495: ARRAY
57496: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57497: LD_VAR 0 5
57501: PUSH
57502: LD_INT 1
57504: ARRAY
57505: PPUSH
57506: CALL_OW 302
57510: NOT
57511: IFTRUE 57539
57513: PUSH
57514: LD_VAR 0 5
57518: PUSH
57519: LD_INT 1
57521: ARRAY
57522: PPUSH
57523: CALL_OW 255
57527: PUSH
57528: LD_VAR 0 1
57532: PPUSH
57533: CALL_OW 255
57537: NONEQUAL
57538: OR
57539: IFFALSE 57647
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
57541: LD_VAR 0 5
57545: PUSH
57546: LD_INT 1
57548: ARRAY
57549: PPUSH
57550: CALL_OW 305
57554: IFFALSE 57582
57556: PUSH
57557: LD_VAR 0 5
57561: PUSH
57562: LD_INT 1
57564: ARRAY
57565: PPUSH
57566: CALL_OW 255
57570: PUSH
57571: LD_VAR 0 1
57575: PPUSH
57576: CALL_OW 255
57580: EQUAL
57581: AND
57582: IFFALSE 57606
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
57584: LD_VAR 0 5
57588: PUSH
57589: LD_INT 1
57591: ARRAY
57592: PPUSH
57593: LD_VAR 0 5
57597: PUSH
57598: LD_INT 2
57600: ARRAY
57601: PPUSH
57602: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
57606: LD_ADDR_EXP 51
57610: PUSH
57611: LD_EXP 51
57615: PPUSH
57616: LD_VAR 0 4
57620: PPUSH
57621: LD_EXP 51
57625: PUSH
57626: LD_VAR 0 4
57630: ARRAY
57631: PPUSH
57632: LD_VAR 0 3
57636: PPUSH
57637: CALL_OW 3
57641: PPUSH
57642: CALL_OW 1
57646: ST_TO_ADDR
// end ; end ;
57647: GO 57472
57649: POP
57650: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57651: LD_VAR 0 1
57655: PPUSH
57656: LD_EXP 51
57660: PUSH
57661: LD_VAR 0 4
57665: ARRAY
57666: PUSH
57667: LD_INT 0
57669: PLUS
57670: PPUSH
57671: CALL_OW 505
// end ;
57675: LD_VAR 0 2
57679: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57680: LD_INT 0
57682: PPUSH
57683: PPUSH
57684: PPUSH
57685: PPUSH
// if not hack in hackTanks then
57686: LD_VAR 0 1
57690: PUSH
57691: LD_EXP 50
57695: IN
57696: NOT
57697: IFFALSE 57701
// exit ;
57699: GO 57786
// index := GetElementIndex ( hackTanks , hack ) ;
57701: LD_ADDR_VAR 0 5
57705: PUSH
57706: LD_EXP 50
57710: PPUSH
57711: LD_VAR 0 1
57715: PPUSH
57716: CALL 15607 0 2
57720: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57721: LD_ADDR_VAR 0 4
57725: PUSH
57726: DOUBLE
57727: LD_INT 1
57729: DEC
57730: ST_TO_ADDR
57731: LD_EXP 51
57735: PUSH
57736: LD_VAR 0 5
57740: ARRAY
57741: PUSH
57742: FOR_TO
57743: IFFALSE 57784
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57745: LD_EXP 51
57749: PUSH
57750: LD_VAR 0 5
57754: ARRAY
57755: PUSH
57756: LD_VAR 0 4
57760: ARRAY
57761: PUSH
57762: LD_INT 1
57764: ARRAY
57765: PUSH
57766: LD_VAR 0 2
57770: EQUAL
57771: IFFALSE 57782
// KillUnit ( vehicle ) ;
57773: LD_VAR 0 2
57777: PPUSH
57778: CALL_OW 66
57782: GO 57742
57784: POP
57785: POP
// end ;
57786: LD_VAR 0 3
57790: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
57791: LD_EXP 55
57795: NOT
57796: IFFALSE 57929
57798: GO 57800
57800: DISABLE
57801: LD_INT 0
57803: PPUSH
// begin initMiner := true ;
57804: LD_ADDR_EXP 55
57808: PUSH
57809: LD_INT 1
57811: ST_TO_ADDR
// minersList := [ ] ;
57812: LD_ADDR_EXP 56
57816: PUSH
57817: EMPTY
57818: ST_TO_ADDR
// minerMinesList := [ ] ;
57819: LD_ADDR_EXP 57
57823: PUSH
57824: EMPTY
57825: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
57826: LD_ADDR_EXP 58
57830: PUSH
57831: LD_INT 6
57833: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57834: LD_ADDR_VAR 0 1
57838: PUSH
57839: LD_INT 34
57841: PUSH
57842: LD_INT 81
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PPUSH
57849: CALL_OW 69
57853: PUSH
57854: FOR_IN
57855: IFFALSE 57927
// begin if not i in minersList then
57857: LD_VAR 0 1
57861: PUSH
57862: LD_EXP 56
57866: IN
57867: NOT
57868: IFFALSE 57925
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57870: LD_ADDR_EXP 56
57874: PUSH
57875: LD_EXP 56
57879: PPUSH
57880: LD_EXP 56
57884: PUSH
57885: LD_INT 1
57887: PLUS
57888: PPUSH
57889: LD_VAR 0 1
57893: PPUSH
57894: CALL_OW 1
57898: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57899: LD_ADDR_EXP 57
57903: PUSH
57904: LD_EXP 57
57908: PPUSH
57909: LD_EXP 57
57913: PUSH
57914: LD_INT 1
57916: PLUS
57917: PPUSH
57918: EMPTY
57919: PPUSH
57920: CALL_OW 1
57924: ST_TO_ADDR
// end end ;
57925: GO 57854
57927: POP
57928: POP
// end ;
57929: PPOPN 1
57931: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
57932: LD_EXP 55
57936: IFFALSE 57967
57938: PUSH
57939: LD_EXP 57
57943: PPUSH
57944: CALL 12906 0 1
57948: IFTRUE 57966
57950: PUSH
57951: LD_INT 34
57953: PUSH
57954: LD_INT 81
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PPUSH
57961: CALL_OW 69
57965: OR
57966: AND
57967: IFFALSE 58466
57969: GO 57971
57971: DISABLE
57972: LD_INT 0
57974: PPUSH
57975: PPUSH
57976: PPUSH
57977: PPUSH
// begin enable ;
57978: ENABLE
// for i := minerMinesList downto 1 do
57979: LD_ADDR_VAR 0 1
57983: PUSH
57984: DOUBLE
57985: LD_EXP 57
57989: INC
57990: ST_TO_ADDR
57991: LD_INT 1
57993: PUSH
57994: FOR_DOWNTO
57995: IFFALSE 58464
// begin if IsLive ( minersList [ i ] ) then
57997: LD_EXP 56
58001: PUSH
58002: LD_VAR 0 1
58006: ARRAY
58007: PPUSH
58008: CALL_OW 300
58012: IFFALSE 58045
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58014: LD_EXP 56
58018: PUSH
58019: LD_VAR 0 1
58023: ARRAY
58024: PPUSH
58025: LD_EXP 57
58029: PUSH
58030: LD_VAR 0 1
58034: ARRAY
58035: PPUSH
58036: CALL 12906 0 1
58040: PPUSH
58041: CALL_OW 505
// if not minerMinesList [ i ] then
58045: LD_EXP 57
58049: PUSH
58050: LD_VAR 0 1
58054: ARRAY
58055: NOT
58056: IFFALSE 58060
// continue ;
58058: GO 57994
// for j := minerMinesList [ i ] downto 1 do
58060: LD_ADDR_VAR 0 2
58064: PUSH
58065: DOUBLE
58066: LD_EXP 57
58070: PUSH
58071: LD_VAR 0 1
58075: ARRAY
58076: INC
58077: ST_TO_ADDR
58078: LD_INT 1
58080: PUSH
58081: FOR_DOWNTO
58082: IFFALSE 58460
// begin side := GetSide ( minersList [ i ] ) ;
58084: LD_ADDR_VAR 0 3
58088: PUSH
58089: LD_EXP 56
58093: PUSH
58094: LD_VAR 0 1
58098: ARRAY
58099: PPUSH
58100: CALL_OW 255
58104: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58105: LD_EXP 56
58109: PUSH
58110: LD_VAR 0 1
58114: ARRAY
58115: PPUSH
58116: CALL_OW 301
58120: IFTRUE 58140
58122: PUSH
58123: LD_EXP 56
58127: PUSH
58128: LD_VAR 0 1
58132: ARRAY
58133: PPUSH
58134: CALL_OW 305
58138: NOT
58139: OR
58140: IFFALSE 58231
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58142: LD_EXP 57
58146: PUSH
58147: LD_VAR 0 1
58151: ARRAY
58152: PUSH
58153: LD_VAR 0 2
58157: ARRAY
58158: PUSH
58159: LD_INT 1
58161: ARRAY
58162: PPUSH
58163: LD_EXP 57
58167: PUSH
58168: LD_VAR 0 1
58172: ARRAY
58173: PUSH
58174: LD_VAR 0 2
58178: ARRAY
58179: PUSH
58180: LD_INT 2
58182: ARRAY
58183: PPUSH
58184: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58188: LD_ADDR_EXP 57
58192: PUSH
58193: LD_EXP 57
58197: PPUSH
58198: LD_VAR 0 1
58202: PPUSH
58203: LD_EXP 57
58207: PUSH
58208: LD_VAR 0 1
58212: ARRAY
58213: PPUSH
58214: LD_VAR 0 2
58218: PPUSH
58219: CALL_OW 3
58223: PPUSH
58224: CALL_OW 1
58228: ST_TO_ADDR
// continue ;
58229: GO 58081
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58231: LD_ADDR_VAR 0 4
58235: PUSH
58236: LD_EXP 57
58240: PUSH
58241: LD_VAR 0 1
58245: ARRAY
58246: PUSH
58247: LD_VAR 0 2
58251: ARRAY
58252: PUSH
58253: LD_INT 1
58255: ARRAY
58256: PPUSH
58257: LD_EXP 57
58261: PUSH
58262: LD_VAR 0 1
58266: ARRAY
58267: PUSH
58268: LD_VAR 0 2
58272: ARRAY
58273: PUSH
58274: LD_INT 2
58276: ARRAY
58277: PPUSH
58278: CALL_OW 428
58282: ST_TO_ADDR
// if not tmp then
58283: LD_VAR 0 4
58287: NOT
58288: IFFALSE 58292
// continue ;
58290: GO 58081
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
58292: LD_VAR 0 4
58296: PUSH
58297: LD_INT 81
58299: PUSH
58300: LD_VAR 0 3
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PPUSH
58309: CALL_OW 69
58313: IN
58314: IFFALSE 58364
58316: PUSH
58317: LD_EXP 57
58321: PUSH
58322: LD_VAR 0 1
58326: ARRAY
58327: PUSH
58328: LD_VAR 0 2
58332: ARRAY
58333: PUSH
58334: LD_INT 1
58336: ARRAY
58337: PPUSH
58338: LD_EXP 57
58342: PUSH
58343: LD_VAR 0 1
58347: ARRAY
58348: PUSH
58349: LD_VAR 0 2
58353: ARRAY
58354: PUSH
58355: LD_INT 2
58357: ARRAY
58358: PPUSH
58359: CALL_OW 458
58363: AND
58364: IFFALSE 58458
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
58366: LD_EXP 57
58370: PUSH
58371: LD_VAR 0 1
58375: ARRAY
58376: PUSH
58377: LD_VAR 0 2
58381: ARRAY
58382: PUSH
58383: LD_INT 1
58385: ARRAY
58386: PPUSH
58387: LD_EXP 57
58391: PUSH
58392: LD_VAR 0 1
58396: ARRAY
58397: PUSH
58398: LD_VAR 0 2
58402: ARRAY
58403: PUSH
58404: LD_INT 2
58406: ARRAY
58407: PPUSH
58408: LD_VAR 0 3
58412: PPUSH
58413: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58417: LD_ADDR_EXP 57
58421: PUSH
58422: LD_EXP 57
58426: PPUSH
58427: LD_VAR 0 1
58431: PPUSH
58432: LD_EXP 57
58436: PUSH
58437: LD_VAR 0 1
58441: ARRAY
58442: PPUSH
58443: LD_VAR 0 2
58447: PPUSH
58448: CALL_OW 3
58452: PPUSH
58453: CALL_OW 1
58457: ST_TO_ADDR
// end ; end ;
58458: GO 58081
58460: POP
58461: POP
// end ;
58462: GO 57994
58464: POP
58465: POP
// end ;
58466: PPOPN 4
58468: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
58469: LD_INT 0
58471: PPUSH
58472: PPUSH
58473: PPUSH
58474: PPUSH
// result := false ;
58475: LD_ADDR_VAR 0 4
58479: PUSH
58480: LD_INT 0
58482: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
58483: LD_VAR 0 1
58487: PPUSH
58488: CALL_OW 264
58492: PUSH
58493: LD_INT 81
58495: EQUAL
58496: NOT
58497: IFFALSE 58501
// exit ;
58499: GO 58871
// side := GetSide ( unit ) ;
58501: LD_ADDR_VAR 0 6
58505: PUSH
58506: LD_VAR 0 1
58510: PPUSH
58511: CALL_OW 255
58515: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
58516: LD_ADDR_VAR 0 5
58520: PUSH
58521: LD_EXP 56
58525: PPUSH
58526: LD_VAR 0 1
58530: PPUSH
58531: CALL 15607 0 2
58535: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
58536: LD_EXP 57
58540: PUSH
58541: LD_VAR 0 5
58545: ARRAY
58546: PUSH
58547: LD_EXP 58
58551: GREATEREQUAL
58552: IFFALSE 58556
// exit ;
58554: GO 58871
// ComMoveXY ( unit , x , y ) ;
58556: LD_VAR 0 1
58560: PPUSH
58561: LD_VAR 0 2
58565: PPUSH
58566: LD_VAR 0 3
58570: PPUSH
58571: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58575: LD_INT 35
58577: PPUSH
58578: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
58582: LD_VAR 0 1
58586: PPUSH
58587: LD_VAR 0 2
58591: PPUSH
58592: LD_VAR 0 3
58596: PPUSH
58597: CALL 47653 0 3
58601: NOT
58602: IFFALSE 58615
58604: PUSH
58605: LD_VAR 0 1
58609: PPUSH
58610: CALL_OW 314
58614: AND
58615: IFFALSE 58619
// exit ;
58617: GO 58871
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
58619: LD_VAR 0 2
58623: PPUSH
58624: LD_VAR 0 3
58628: PPUSH
58629: CALL_OW 428
58633: PUSH
58634: LD_VAR 0 1
58638: EQUAL
58639: IFFALSE 58653
58641: PUSH
58642: LD_VAR 0 1
58646: PPUSH
58647: CALL_OW 314
58651: NOT
58652: AND
58653: IFFALSE 58575
// if MineAtPos ( x , y ) then
58655: LD_VAR 0 2
58659: PPUSH
58660: LD_VAR 0 3
58664: PPUSH
58665: CALL_OW 458
58669: IFFALSE 58673
// exit ;
58671: GO 58871
// if your_side = side then
58673: LD_OWVAR 2
58677: PUSH
58678: LD_VAR 0 6
58682: EQUAL
58683: IFFALSE 58702
// PlaySoundXY ( x , y , PlantMine ) ;
58685: LD_VAR 0 2
58689: PPUSH
58690: LD_VAR 0 3
58694: PPUSH
58695: LD_STRING PlantMine
58697: PPUSH
58698: CALL_OW 366
// repeat wait ( 1 ) ;
58702: LD_INT 1
58704: PPUSH
58705: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
58709: LD_VAR 0 2
58713: PPUSH
58714: LD_VAR 0 3
58718: PPUSH
58719: LD_VAR 0 6
58723: PPUSH
58724: LD_INT 0
58726: PPUSH
58727: CALL_OW 454
58731: IFFALSE 58702
// if MineAtPos ( x , y ) then
58733: LD_VAR 0 2
58737: PPUSH
58738: LD_VAR 0 3
58742: PPUSH
58743: CALL_OW 458
58747: IFFALSE 58863
// begin for i in minerMinesList [ index ] do
58749: LD_ADDR_VAR 0 7
58753: PUSH
58754: LD_EXP 57
58758: PUSH
58759: LD_VAR 0 5
58763: ARRAY
58764: PUSH
58765: FOR_IN
58766: IFFALSE 58808
// if i [ 1 ] = x and i [ 2 ] = y then
58768: LD_VAR 0 7
58772: PUSH
58773: LD_INT 1
58775: ARRAY
58776: PUSH
58777: LD_VAR 0 2
58781: EQUAL
58782: IFFALSE 58800
58784: PUSH
58785: LD_VAR 0 7
58789: PUSH
58790: LD_INT 2
58792: ARRAY
58793: PUSH
58794: LD_VAR 0 3
58798: EQUAL
58799: AND
58800: IFFALSE 58806
// exit ;
58802: POP
58803: POP
58804: GO 58871
58806: GO 58765
58808: POP
58809: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
58810: LD_ADDR_EXP 57
58814: PUSH
58815: LD_EXP 57
58819: PPUSH
58820: LD_VAR 0 5
58824: PUSH
58825: LD_EXP 57
58829: PUSH
58830: LD_VAR 0 5
58834: ARRAY
58835: PUSH
58836: LD_INT 1
58838: PLUS
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PPUSH
58844: LD_VAR 0 2
58848: PUSH
58849: LD_VAR 0 3
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PPUSH
58858: CALL 15824 0 3
58862: ST_TO_ADDR
// end ; result := true ;
58863: LD_ADDR_VAR 0 4
58867: PUSH
58868: LD_INT 1
58870: ST_TO_ADDR
// end ;
58871: LD_VAR 0 4
58875: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
58876: LD_INT 0
58878: PPUSH
58879: PPUSH
58880: PPUSH
// if not unit in minersList then
58881: LD_VAR 0 1
58885: PUSH
58886: LD_EXP 56
58890: IN
58891: NOT
58892: IFFALSE 58896
// exit ;
58894: GO 59103
// index := GetElementIndex ( minersList , unit ) ;
58896: LD_ADDR_VAR 0 6
58900: PUSH
58901: LD_EXP 56
58905: PPUSH
58906: LD_VAR 0 1
58910: PPUSH
58911: CALL 15607 0 2
58915: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
58916: LD_ADDR_VAR 0 5
58920: PUSH
58921: DOUBLE
58922: LD_EXP 57
58926: PUSH
58927: LD_VAR 0 6
58931: ARRAY
58932: INC
58933: ST_TO_ADDR
58934: LD_INT 1
58936: PUSH
58937: FOR_DOWNTO
58938: IFFALSE 59101
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58940: LD_EXP 57
58944: PUSH
58945: LD_VAR 0 6
58949: ARRAY
58950: PUSH
58951: LD_VAR 0 5
58955: ARRAY
58956: PUSH
58957: LD_INT 1
58959: ARRAY
58960: PPUSH
58961: LD_EXP 57
58965: PUSH
58966: LD_VAR 0 6
58970: ARRAY
58971: PUSH
58972: LD_VAR 0 5
58976: ARRAY
58977: PUSH
58978: LD_INT 2
58980: ARRAY
58981: PPUSH
58982: LD_VAR 0 2
58986: PPUSH
58987: LD_VAR 0 3
58991: PPUSH
58992: CALL_OW 298
58996: PUSH
58997: LD_INT 6
58999: LESS
59000: IFFALSE 59099
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59002: LD_EXP 57
59006: PUSH
59007: LD_VAR 0 6
59011: ARRAY
59012: PUSH
59013: LD_VAR 0 5
59017: ARRAY
59018: PUSH
59019: LD_INT 1
59021: ARRAY
59022: PPUSH
59023: LD_EXP 57
59027: PUSH
59028: LD_VAR 0 6
59032: ARRAY
59033: PUSH
59034: LD_VAR 0 5
59038: ARRAY
59039: PUSH
59040: LD_INT 2
59042: ARRAY
59043: PPUSH
59044: LD_VAR 0 1
59048: PPUSH
59049: CALL_OW 255
59053: PPUSH
59054: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59058: LD_ADDR_EXP 57
59062: PUSH
59063: LD_EXP 57
59067: PPUSH
59068: LD_VAR 0 6
59072: PPUSH
59073: LD_EXP 57
59077: PUSH
59078: LD_VAR 0 6
59082: ARRAY
59083: PPUSH
59084: LD_VAR 0 5
59088: PPUSH
59089: CALL_OW 3
59093: PPUSH
59094: CALL_OW 1
59098: ST_TO_ADDR
// end ; end ;
59099: GO 58937
59101: POP
59102: POP
// end ;
59103: LD_VAR 0 4
59107: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59108: LD_INT 0
59110: PPUSH
59111: PPUSH
59112: PPUSH
59113: PPUSH
59114: PPUSH
59115: PPUSH
59116: PPUSH
59117: PPUSH
59118: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59119: LD_VAR 0 1
59123: PPUSH
59124: CALL_OW 264
59128: PUSH
59129: LD_INT 81
59131: EQUAL
59132: NOT
59133: IFTRUE 59148
59135: PUSH
59136: LD_VAR 0 1
59140: PUSH
59141: LD_EXP 56
59145: IN
59146: NOT
59147: OR
59148: IFFALSE 59152
// exit ;
59150: GO 59478
// index := GetElementIndex ( minersList , unit ) ;
59152: LD_ADDR_VAR 0 6
59156: PUSH
59157: LD_EXP 56
59161: PPUSH
59162: LD_VAR 0 1
59166: PPUSH
59167: CALL 15607 0 2
59171: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59172: LD_ADDR_VAR 0 8
59176: PUSH
59177: LD_EXP 58
59181: PUSH
59182: LD_EXP 57
59186: PUSH
59187: LD_VAR 0 6
59191: ARRAY
59192: MINUS
59193: ST_TO_ADDR
// if not minesFreeAmount then
59194: LD_VAR 0 8
59198: NOT
59199: IFFALSE 59203
// exit ;
59201: GO 59478
// tmp := [ ] ;
59203: LD_ADDR_VAR 0 7
59207: PUSH
59208: EMPTY
59209: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59210: LD_ADDR_VAR 0 5
59214: PUSH
59215: DOUBLE
59216: LD_INT 1
59218: DEC
59219: ST_TO_ADDR
59220: LD_VAR 0 8
59224: PUSH
59225: FOR_TO
59226: IFFALSE 59425
// begin _d := rand ( 0 , 5 ) ;
59228: LD_ADDR_VAR 0 11
59232: PUSH
59233: LD_INT 0
59235: PPUSH
59236: LD_INT 5
59238: PPUSH
59239: CALL_OW 12
59243: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59244: LD_ADDR_VAR 0 12
59248: PUSH
59249: LD_INT 2
59251: PPUSH
59252: LD_INT 6
59254: PPUSH
59255: CALL_OW 12
59259: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59260: LD_ADDR_VAR 0 9
59264: PUSH
59265: LD_VAR 0 2
59269: PPUSH
59270: LD_VAR 0 11
59274: PPUSH
59275: LD_VAR 0 12
59279: PPUSH
59280: CALL_OW 272
59284: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
59285: LD_ADDR_VAR 0 10
59289: PUSH
59290: LD_VAR 0 3
59294: PPUSH
59295: LD_VAR 0 11
59299: PPUSH
59300: LD_VAR 0 12
59304: PPUSH
59305: CALL_OW 273
59309: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
59310: LD_VAR 0 9
59314: PPUSH
59315: LD_VAR 0 10
59319: PPUSH
59320: CALL_OW 488
59324: IFFALSE 59348
59326: PUSH
59327: LD_VAR 0 9
59331: PUSH
59332: LD_VAR 0 10
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_VAR 0 7
59345: IN
59346: NOT
59347: AND
59348: IFFALSE 59367
59350: PUSH
59351: LD_VAR 0 9
59355: PPUSH
59356: LD_VAR 0 10
59360: PPUSH
59361: CALL_OW 458
59365: NOT
59366: AND
59367: IFFALSE 59409
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
59369: LD_ADDR_VAR 0 7
59373: PUSH
59374: LD_VAR 0 7
59378: PPUSH
59379: LD_VAR 0 7
59383: PUSH
59384: LD_INT 1
59386: PLUS
59387: PPUSH
59388: LD_VAR 0 9
59392: PUSH
59393: LD_VAR 0 10
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PPUSH
59402: CALL_OW 1
59406: ST_TO_ADDR
59407: GO 59423
// i := i - 1 ;
59409: LD_ADDR_VAR 0 5
59413: PUSH
59414: LD_VAR 0 5
59418: PUSH
59419: LD_INT 1
59421: MINUS
59422: ST_TO_ADDR
// end ;
59423: GO 59225
59425: POP
59426: POP
// for i in tmp do
59427: LD_ADDR_VAR 0 5
59431: PUSH
59432: LD_VAR 0 7
59436: PUSH
59437: FOR_IN
59438: IFFALSE 59476
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
59440: LD_VAR 0 1
59444: PPUSH
59445: LD_VAR 0 5
59449: PUSH
59450: LD_INT 1
59452: ARRAY
59453: PPUSH
59454: LD_VAR 0 5
59458: PUSH
59459: LD_INT 2
59461: ARRAY
59462: PPUSH
59463: CALL 58469 0 3
59467: NOT
59468: IFFALSE 59474
// exit ;
59470: POP
59471: POP
59472: GO 59478
59474: GO 59437
59476: POP
59477: POP
// end ;
59478: LD_VAR 0 4
59482: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
59483: LD_INT 0
59485: PPUSH
59486: PPUSH
59487: PPUSH
59488: PPUSH
59489: PPUSH
59490: PPUSH
59491: PPUSH
59492: PPUSH
59493: PPUSH
// if GetClass ( unit ) <> class_sniper then
59494: LD_VAR 0 1
59498: PPUSH
59499: CALL_OW 257
59503: PUSH
59504: LD_INT 5
59506: NONEQUAL
59507: IFFALSE 59511
// exit ;
59509: GO 59981
// dist := 8 ;
59511: LD_ADDR_VAR 0 5
59515: PUSH
59516: LD_INT 8
59518: ST_TO_ADDR
// viewRange := 12 ;
59519: LD_ADDR_VAR 0 8
59523: PUSH
59524: LD_INT 12
59526: ST_TO_ADDR
// side := GetSide ( unit ) ;
59527: LD_ADDR_VAR 0 6
59531: PUSH
59532: LD_VAR 0 1
59536: PPUSH
59537: CALL_OW 255
59541: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59542: LD_INT 61
59544: PPUSH
59545: LD_VAR 0 6
59549: PPUSH
59550: CALL_OW 321
59554: PUSH
59555: LD_INT 2
59557: EQUAL
59558: IFFALSE 59568
// viewRange := 16 ;
59560: LD_ADDR_VAR 0 8
59564: PUSH
59565: LD_INT 16
59567: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59568: LD_VAR 0 1
59572: PPUSH
59573: LD_VAR 0 2
59577: PPUSH
59578: LD_VAR 0 3
59582: PPUSH
59583: CALL_OW 297
59587: PUSH
59588: LD_VAR 0 5
59592: GREATER
59593: IFFALSE 59672
// begin ComMoveXY ( unit , x , y ) ;
59595: LD_VAR 0 1
59599: PPUSH
59600: LD_VAR 0 2
59604: PPUSH
59605: LD_VAR 0 3
59609: PPUSH
59610: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59614: LD_INT 35
59616: PPUSH
59617: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
59621: LD_VAR 0 1
59625: PPUSH
59626: LD_VAR 0 2
59630: PPUSH
59631: LD_VAR 0 3
59635: PPUSH
59636: CALL 47653 0 3
59640: NOT
59641: IFFALSE 59645
// exit ;
59643: GO 59981
// until GetDistUnitXY ( unit , x , y ) < dist ;
59645: LD_VAR 0 1
59649: PPUSH
59650: LD_VAR 0 2
59654: PPUSH
59655: LD_VAR 0 3
59659: PPUSH
59660: CALL_OW 297
59664: PUSH
59665: LD_VAR 0 5
59669: LESS
59670: IFFALSE 59614
// end ; ComTurnXY ( unit , x , y ) ;
59672: LD_VAR 0 1
59676: PPUSH
59677: LD_VAR 0 2
59681: PPUSH
59682: LD_VAR 0 3
59686: PPUSH
59687: CALL_OW 118
// repeat if Multiplayer then
59691: LD_OWVAR 4
59695: IFFALSE 59706
// wait ( 35 ) else
59697: LD_INT 35
59699: PPUSH
59700: CALL_OW 67
59704: GO 59713
// wait ( 5 ) ;
59706: LD_INT 5
59708: PPUSH
59709: CALL_OW 67
// _d := GetDir ( unit ) ;
59713: LD_ADDR_VAR 0 11
59717: PUSH
59718: LD_VAR 0 1
59722: PPUSH
59723: CALL_OW 254
59727: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
59728: LD_ADDR_VAR 0 7
59732: PUSH
59733: LD_VAR 0 1
59737: PPUSH
59738: CALL_OW 250
59742: PPUSH
59743: LD_VAR 0 1
59747: PPUSH
59748: CALL_OW 251
59752: PPUSH
59753: LD_VAR 0 2
59757: PPUSH
59758: LD_VAR 0 3
59762: PPUSH
59763: CALL 50289 0 4
59767: ST_TO_ADDR
// until dir = _d ;
59768: LD_VAR 0 7
59772: PUSH
59773: LD_VAR 0 11
59777: EQUAL
59778: IFFALSE 59691
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
59780: LD_ADDR_VAR 0 9
59784: PUSH
59785: LD_VAR 0 1
59789: PPUSH
59790: CALL_OW 250
59794: PPUSH
59795: LD_VAR 0 7
59799: PPUSH
59800: LD_VAR 0 5
59804: PPUSH
59805: CALL_OW 272
59809: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
59810: LD_ADDR_VAR 0 10
59814: PUSH
59815: LD_VAR 0 1
59819: PPUSH
59820: CALL_OW 251
59824: PPUSH
59825: LD_VAR 0 7
59829: PPUSH
59830: LD_VAR 0 5
59834: PPUSH
59835: CALL_OW 273
59839: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59840: LD_VAR 0 9
59844: PPUSH
59845: LD_VAR 0 10
59849: PPUSH
59850: CALL_OW 488
59854: NOT
59855: IFFALSE 59859
// exit ;
59857: GO 59981
// ComAnimCustom ( unit , 1 ) ;
59859: LD_VAR 0 1
59863: PPUSH
59864: LD_INT 1
59866: PPUSH
59867: CALL_OW 592
// p := 0 ;
59871: LD_ADDR_VAR 0 12
59875: PUSH
59876: LD_INT 0
59878: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59879: LD_VAR 0 9
59883: PPUSH
59884: LD_VAR 0 10
59888: PPUSH
59889: LD_VAR 0 6
59893: PPUSH
59894: LD_VAR 0 8
59898: PPUSH
59899: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59903: LD_INT 35
59905: PPUSH
59906: CALL_OW 67
// p := Inc ( p ) ;
59910: LD_ADDR_VAR 0 12
59914: PUSH
59915: LD_VAR 0 12
59919: PPUSH
59920: CALL 50245 0 1
59924: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59925: LD_VAR 0 12
59929: PUSH
59930: LD_INT 3
59932: EQUAL
59933: IFTRUE 59947
59935: PUSH
59936: LD_VAR 0 1
59940: PPUSH
59941: CALL_OW 302
59945: NOT
59946: OR
59947: IFTRUE 59960
59949: PUSH
59950: LD_VAR 0 1
59954: PPUSH
59955: CALL_OW 301
59959: OR
59960: IFFALSE 59903
// RemoveSeeing ( _x , _y , side ) ;
59962: LD_VAR 0 9
59966: PPUSH
59967: LD_VAR 0 10
59971: PPUSH
59972: LD_VAR 0 6
59976: PPUSH
59977: CALL_OW 331
// end ;
59981: LD_VAR 0 4
59985: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
59986: LD_INT 0
59988: PPUSH
59989: PPUSH
59990: PPUSH
59991: PPUSH
59992: PPUSH
59993: PPUSH
59994: PPUSH
59995: PPUSH
59996: PPUSH
59997: PPUSH
59998: PPUSH
// if not unit then
59999: LD_VAR 0 1
60003: NOT
60004: IFFALSE 60008
// exit ;
60006: GO 60279
// side := GetSide ( unit ) ;
60008: LD_ADDR_VAR 0 3
60012: PUSH
60013: LD_VAR 0 1
60017: PPUSH
60018: CALL_OW 255
60022: ST_TO_ADDR
// x := GetX ( unit ) ;
60023: LD_ADDR_VAR 0 5
60027: PUSH
60028: LD_VAR 0 1
60032: PPUSH
60033: CALL_OW 250
60037: ST_TO_ADDR
// y := GetY ( unit ) ;
60038: LD_ADDR_VAR 0 6
60042: PUSH
60043: LD_VAR 0 1
60047: PPUSH
60048: CALL_OW 251
60052: ST_TO_ADDR
// r := 8 ;
60053: LD_ADDR_VAR 0 4
60057: PUSH
60058: LD_INT 8
60060: ST_TO_ADDR
// if x - r < 0 then
60061: LD_VAR 0 5
60065: PUSH
60066: LD_VAR 0 4
60070: MINUS
60071: PUSH
60072: LD_INT 0
60074: LESS
60075: IFFALSE 60087
// min_x := 0 else
60077: LD_ADDR_VAR 0 7
60081: PUSH
60082: LD_INT 0
60084: ST_TO_ADDR
60085: GO 60103
// min_x := x - r ;
60087: LD_ADDR_VAR 0 7
60091: PUSH
60092: LD_VAR 0 5
60096: PUSH
60097: LD_VAR 0 4
60101: MINUS
60102: ST_TO_ADDR
// if y - r < 0 then
60103: LD_VAR 0 6
60107: PUSH
60108: LD_VAR 0 4
60112: MINUS
60113: PUSH
60114: LD_INT 0
60116: LESS
60117: IFFALSE 60129
// min_y := 0 else
60119: LD_ADDR_VAR 0 8
60123: PUSH
60124: LD_INT 0
60126: ST_TO_ADDR
60127: GO 60145
// min_y := y - r ;
60129: LD_ADDR_VAR 0 8
60133: PUSH
60134: LD_VAR 0 6
60138: PUSH
60139: LD_VAR 0 4
60143: MINUS
60144: ST_TO_ADDR
// max_x := x + r ;
60145: LD_ADDR_VAR 0 9
60149: PUSH
60150: LD_VAR 0 5
60154: PUSH
60155: LD_VAR 0 4
60159: PLUS
60160: ST_TO_ADDR
// max_y := y + r ;
60161: LD_ADDR_VAR 0 10
60165: PUSH
60166: LD_VAR 0 6
60170: PUSH
60171: LD_VAR 0 4
60175: PLUS
60176: ST_TO_ADDR
// for _x = min_x to max_x do
60177: LD_ADDR_VAR 0 11
60181: PUSH
60182: DOUBLE
60183: LD_VAR 0 7
60187: DEC
60188: ST_TO_ADDR
60189: LD_VAR 0 9
60193: PUSH
60194: FOR_TO
60195: IFFALSE 60277
// for _y = min_y to max_y do
60197: LD_ADDR_VAR 0 12
60201: PUSH
60202: DOUBLE
60203: LD_VAR 0 8
60207: DEC
60208: ST_TO_ADDR
60209: LD_VAR 0 10
60213: PUSH
60214: FOR_TO
60215: IFFALSE 60273
// begin if not ValidHex ( _x , _y ) then
60217: LD_VAR 0 11
60221: PPUSH
60222: LD_VAR 0 12
60226: PPUSH
60227: CALL_OW 488
60231: NOT
60232: IFFALSE 60236
// continue ;
60234: GO 60214
// if MineAtPos ( _x , _y ) then
60236: LD_VAR 0 11
60240: PPUSH
60241: LD_VAR 0 12
60245: PPUSH
60246: CALL_OW 458
60250: IFFALSE 60271
// ViewMineAtPos ( _x , _y , side ) ;
60252: LD_VAR 0 11
60256: PPUSH
60257: LD_VAR 0 12
60261: PPUSH
60262: LD_VAR 0 3
60266: PPUSH
60267: CALL_OW 457
// end ;
60271: GO 60214
60273: POP
60274: POP
60275: GO 60194
60277: POP
60278: POP
// end ;
60279: LD_VAR 0 2
60283: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
60284: LD_INT 0
60286: PPUSH
60287: PPUSH
60288: PPUSH
60289: PPUSH
60290: PPUSH
60291: PPUSH
// if not units then
60292: LD_VAR 0 1
60296: NOT
60297: IFFALSE 60301
// exit ;
60299: GO 60731
// scaners := [ ] ;
60301: LD_ADDR_VAR 0 6
60305: PUSH
60306: EMPTY
60307: ST_TO_ADDR
// for i in units do
60308: LD_ADDR_VAR 0 3
60312: PUSH
60313: LD_VAR 0 1
60317: PUSH
60318: FOR_IN
60319: IFFALSE 60476
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
60321: LD_VAR 0 3
60325: PPUSH
60326: CALL_OW 264
60330: PUSH
60331: LD_INT 11
60333: NONEQUAL
60334: IFTRUE 60348
60336: PUSH
60337: LD_VAR 0 3
60341: PPUSH
60342: CALL_OW 302
60346: NOT
60347: OR
60348: IFTRUE 60365
60350: PUSH
60351: LD_VAR 0 3
60355: PPUSH
60356: CALL_OW 110
60360: PUSH
60361: LD_INT 502
60363: EQUAL
60364: OR
60365: IFFALSE 60369
// continue ;
60367: GO 60318
// ComStop ( i ) ;
60369: LD_VAR 0 3
60373: PPUSH
60374: CALL_OW 141
// x := GetX ( i ) ;
60378: LD_ADDR_VAR 0 4
60382: PUSH
60383: LD_VAR 0 3
60387: PPUSH
60388: CALL_OW 250
60392: ST_TO_ADDR
// y := GetY ( i ) ;
60393: LD_ADDR_VAR 0 5
60397: PUSH
60398: LD_VAR 0 3
60402: PPUSH
60403: CALL_OW 251
60407: ST_TO_ADDR
// if GetSide ( i ) = your_side then
60408: LD_VAR 0 3
60412: PPUSH
60413: CALL_OW 255
60417: PUSH
60418: LD_OWVAR 2
60422: EQUAL
60423: IFFALSE 60442
// PlaySoundXY ( x , y , mineDetector ) ;
60425: LD_VAR 0 4
60429: PPUSH
60430: LD_VAR 0 5
60434: PPUSH
60435: LD_STRING mineDetector
60437: PPUSH
60438: CALL_OW 366
// scaners := Join ( scaners , i ) ;
60442: LD_ADDR_VAR 0 6
60446: PUSH
60447: LD_VAR 0 6
60451: PPUSH
60452: LD_VAR 0 3
60456: PPUSH
60457: CALL 48872 0 2
60461: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
60462: LD_VAR 0 3
60466: PPUSH
60467: LD_INT 502
60469: PPUSH
60470: CALL_OW 109
// end ;
60474: GO 60318
60476: POP
60477: POP
// if not scaners then
60478: LD_VAR 0 6
60482: NOT
60483: IFFALSE 60487
// exit ;
60485: GO 60731
// wait ( 3 ) ;
60487: LD_INT 3
60489: PPUSH
60490: CALL_OW 67
// timer := 6 ;
60494: LD_ADDR_VAR 0 7
60498: PUSH
60499: LD_INT 6
60501: ST_TO_ADDR
// repeat for i in scaners do
60502: LD_ADDR_VAR 0 3
60506: PUSH
60507: LD_VAR 0 6
60511: PUSH
60512: FOR_IN
60513: IFFALSE 60629
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
60515: LD_VAR 0 3
60519: PPUSH
60520: CALL_OW 302
60524: NOT
60525: IFTRUE 60538
60527: PUSH
60528: LD_VAR 0 3
60532: PPUSH
60533: CALL_OW 314
60537: OR
60538: IFTRUE 60569
60540: PUSH
60541: LD_VAR 0 3
60545: PPUSH
60546: CALL_OW 263
60550: PUSH
60551: LD_INT 1
60553: EQUAL
60554: IFFALSE 60568
60556: PUSH
60557: LD_VAR 0 3
60561: PPUSH
60562: CALL_OW 311
60566: NOT
60567: AND
60568: OR
60569: IFFALSE 60613
// begin SetUnitDisplayNumber ( i , 0 ) ;
60571: LD_VAR 0 3
60575: PPUSH
60576: LD_INT 0
60578: PPUSH
60579: CALL_OW 505
// SetTag ( i , 0 ) ;
60583: LD_VAR 0 3
60587: PPUSH
60588: LD_INT 0
60590: PPUSH
60591: CALL_OW 109
// scaners := scaners diff i ;
60595: LD_ADDR_VAR 0 6
60599: PUSH
60600: LD_VAR 0 6
60604: PUSH
60605: LD_VAR 0 3
60609: DIFF
60610: ST_TO_ADDR
// continue ;
60611: GO 60512
// end ; SetUnitDisplayNumber ( i , timer ) ;
60613: LD_VAR 0 3
60617: PPUSH
60618: LD_VAR 0 7
60622: PPUSH
60623: CALL_OW 505
// end ;
60627: GO 60512
60629: POP
60630: POP
// if not scaners then
60631: LD_VAR 0 6
60635: NOT
60636: IFFALSE 60640
// exit ;
60638: GO 60731
// timer := Dec ( timer ) ;
60640: LD_ADDR_VAR 0 7
60644: PUSH
60645: LD_VAR 0 7
60649: PPUSH
60650: CALL 50267 0 1
60654: ST_TO_ADDR
// wait ( 0 0$1 ) ;
60655: LD_INT 35
60657: PPUSH
60658: CALL_OW 67
// until timer = 0 ;
60662: LD_VAR 0 7
60666: PUSH
60667: LD_INT 0
60669: EQUAL
60670: IFFALSE 60502
// if not scaners then
60672: LD_VAR 0 6
60676: NOT
60677: IFFALSE 60681
// exit ;
60679: GO 60731
// for i in scaners do
60681: LD_ADDR_VAR 0 3
60685: PUSH
60686: LD_VAR 0 6
60690: PUSH
60691: FOR_IN
60692: IFFALSE 60729
// begin SetUnitDisplayNumber ( i , 0 ) ;
60694: LD_VAR 0 3
60698: PPUSH
60699: LD_INT 0
60701: PPUSH
60702: CALL_OW 505
// SetTag ( i , 0 ) ;
60706: LD_VAR 0 3
60710: PPUSH
60711: LD_INT 0
60713: PPUSH
60714: CALL_OW 109
// RevealDetectorMine ( i ) ;
60718: LD_VAR 0 3
60722: PPUSH
60723: CALL 59986 0 1
// end ;
60727: GO 60691
60729: POP
60730: POP
// end ;
60731: LD_VAR 0 2
60735: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
60736: LD_INT 0
60738: PPUSH
// if p1 = mine_detector_mode then
60739: LD_VAR 0 2
60743: PUSH
60744: LD_INT 103
60746: EQUAL
60747: IFFALSE 60758
// DetectMine ( units ) ;
60749: LD_VAR 0 1
60753: PPUSH
60754: CALL 60284 0 1
// end ; end_of_file
60758: LD_VAR 0 7
60762: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
60763: LD_EXP 39
60767: IFFALSE 61108
60769: GO 60771
60771: DISABLE
60772: LD_INT 0
60774: PPUSH
60775: PPUSH
60776: PPUSH
// begin mpKingPoints := [ ] ;
60777: LD_ADDR_EXP 59
60781: PUSH
60782: EMPTY
60783: ST_TO_ADDR
// if mpTeamGame then
60784: LD_EXP 11
60788: IFFALSE 60842
// begin for i := 1 to Count ( mpTeams ) do
60790: LD_ADDR_VAR 0 1
60794: PUSH
60795: DOUBLE
60796: LD_INT 1
60798: DEC
60799: ST_TO_ADDR
60800: LD_EXP 10
60804: PPUSH
60805: CALL 12906 0 1
60809: PUSH
60810: FOR_TO
60811: IFFALSE 60838
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
60813: LD_ADDR_EXP 59
60817: PUSH
60818: LD_EXP 59
60822: PPUSH
60823: LD_VAR 0 1
60827: PPUSH
60828: LD_INT 0
60830: PPUSH
60831: CALL_OW 1
60835: ST_TO_ADDR
60836: GO 60810
60838: POP
60839: POP
// end else
60840: GO 60885
// begin for i := 1 to 8 do
60842: LD_ADDR_VAR 0 1
60846: PUSH
60847: DOUBLE
60848: LD_INT 1
60850: DEC
60851: ST_TO_ADDR
60852: LD_INT 8
60854: PUSH
60855: FOR_TO
60856: IFFALSE 60883
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
60858: LD_ADDR_EXP 59
60862: PUSH
60863: LD_EXP 59
60867: PPUSH
60868: LD_VAR 0 1
60872: PPUSH
60873: LD_INT 0
60875: PPUSH
60876: CALL_OW 1
60880: ST_TO_ADDR
60881: GO 60855
60883: POP
60884: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
60885: LD_ADDR_VAR 0 3
60889: PUSH
60890: LD_EXP 2
60894: PPUSH
60895: LD_INT 0
60897: PPUSH
60898: CALL_OW 517
60902: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60903: LD_ADDR_VAR 0 1
60907: PUSH
60908: DOUBLE
60909: LD_INT 1
60911: DEC
60912: ST_TO_ADDR
60913: LD_VAR 0 3
60917: PUSH
60918: LD_INT 1
60920: ARRAY
60921: PUSH
60922: FOR_TO
60923: IFFALSE 60990
// for j := 1 to 8 do
60925: LD_ADDR_VAR 0 2
60929: PUSH
60930: DOUBLE
60931: LD_INT 1
60933: DEC
60934: ST_TO_ADDR
60935: LD_INT 8
60937: PUSH
60938: FOR_TO
60939: IFFALSE 60986
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
60941: LD_VAR 0 3
60945: PUSH
60946: LD_INT 1
60948: ARRAY
60949: PUSH
60950: LD_VAR 0 1
60954: ARRAY
60955: PPUSH
60956: LD_VAR 0 3
60960: PUSH
60961: LD_INT 2
60963: ARRAY
60964: PUSH
60965: LD_VAR 0 1
60969: ARRAY
60970: PPUSH
60971: LD_VAR 0 2
60975: PPUSH
60976: LD_INT 12
60978: NEG
60979: PPUSH
60980: CALL_OW 330
60984: GO 60938
60986: POP
60987: POP
60988: GO 60922
60990: POP
60991: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
60992: LD_EXP 34
60996: PPUSH
60997: LD_INT 1
60999: PPUSH
61000: CALL_OW 424
// UpdateCounter ;
61004: CALL 61614 0 0
// repeat wait ( 0 0$1 ) ;
61008: LD_INT 35
61010: PPUSH
61011: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61015: LD_ADDR_VAR 0 3
61019: PUSH
61020: LD_EXP 34
61024: PPUSH
61025: LD_INT 3
61027: PUSH
61028: LD_INT 57
61030: PUSH
61031: EMPTY
61032: LIST
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 50
61040: PUSH
61041: EMPTY
61042: LIST
61043: PUSH
61044: LD_INT 2
61046: PUSH
61047: LD_INT 30
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 30
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: LIST
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: LIST
61076: PPUSH
61077: CALL_OW 70
61081: ST_TO_ADDR
// if not tmp then
61082: LD_VAR 0 3
61086: NOT
61087: IFFALSE 61091
// continue ;
61089: GO 61008
// AddPoints ( tmp ) ;
61091: LD_VAR 0 3
61095: PPUSH
61096: CALL 61292 0 1
// UpdateCounter ;
61100: CALL 61614 0 0
// until false ;
61104: LD_INT 0
61106: IFFALSE 61008
// end ;
61108: PPOPN 3
61110: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
61111: LD_EXP 39
61115: IFFALSE 61123
61117: PUSH
61118: LD_EXP 37
61122: AND
61123: IFFALSE 61289
61125: GO 61127
61127: DISABLE
61128: LD_INT 0
61130: PPUSH
61131: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
61132: LD_ADDR_VAR 0 2
61136: PUSH
61137: LD_EXP 2
61141: PPUSH
61142: LD_INT 0
61144: PPUSH
61145: CALL_OW 517
61149: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61150: LD_ADDR_VAR 0 1
61154: PUSH
61155: DOUBLE
61156: LD_INT 1
61158: DEC
61159: ST_TO_ADDR
61160: LD_VAR 0 2
61164: PUSH
61165: LD_INT 1
61167: ARRAY
61168: PUSH
61169: FOR_TO
61170: IFFALSE 61211
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
61172: LD_VAR 0 2
61176: PUSH
61177: LD_INT 1
61179: ARRAY
61180: PUSH
61181: LD_VAR 0 1
61185: ARRAY
61186: PPUSH
61187: LD_VAR 0 2
61191: PUSH
61192: LD_INT 2
61194: ARRAY
61195: PUSH
61196: LD_VAR 0 1
61200: ARRAY
61201: PPUSH
61202: LD_INT 125
61204: PPUSH
61205: CALL_OW 495
61209: GO 61169
61211: POP
61212: POP
// repeat wait ( mpEmissions ) ;
61213: LD_EXP 37
61217: PPUSH
61218: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
61222: LD_ADDR_VAR 0 1
61226: PUSH
61227: DOUBLE
61228: LD_INT 1
61230: DEC
61231: ST_TO_ADDR
61232: LD_VAR 0 2
61236: PUSH
61237: LD_INT 1
61239: ARRAY
61240: PUSH
61241: FOR_TO
61242: IFFALSE 61283
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
61244: LD_VAR 0 2
61248: PUSH
61249: LD_INT 1
61251: ARRAY
61252: PUSH
61253: LD_VAR 0 1
61257: ARRAY
61258: PPUSH
61259: LD_VAR 0 2
61263: PUSH
61264: LD_INT 2
61266: ARRAY
61267: PUSH
61268: LD_VAR 0 1
61272: ARRAY
61273: PPUSH
61274: LD_INT 15
61276: PPUSH
61277: CALL_OW 495
61281: GO 61241
61283: POP
61284: POP
// until false ;
61285: LD_INT 0
61287: IFFALSE 61213
// end ;
61289: PPOPN 2
61291: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
61292: LD_INT 0
61294: PPUSH
61295: PPUSH
61296: PPUSH
61297: PPUSH
61298: PPUSH
// if mpTeamGame then
61299: LD_EXP 11
61303: IFFALSE 61500
// begin first := depots [ 1 ] ;
61305: LD_ADDR_VAR 0 4
61309: PUSH
61310: LD_VAR 0 1
61314: PUSH
61315: LD_INT 1
61317: ARRAY
61318: ST_TO_ADDR
// side := GetSide ( first ) ;
61319: LD_ADDR_VAR 0 6
61323: PUSH
61324: LD_VAR 0 4
61328: PPUSH
61329: CALL_OW 255
61333: ST_TO_ADDR
// for i := 1 to mpTeams do
61334: LD_ADDR_VAR 0 3
61338: PUSH
61339: DOUBLE
61340: LD_INT 1
61342: DEC
61343: ST_TO_ADDR
61344: LD_EXP 10
61348: PUSH
61349: FOR_TO
61350: IFFALSE 61384
// if side in mpTeams [ i ] then
61352: LD_VAR 0 6
61356: PUSH
61357: LD_EXP 10
61361: PUSH
61362: LD_VAR 0 3
61366: ARRAY
61367: IN
61368: IFFALSE 61382
// begin team := i ;
61370: LD_ADDR_VAR 0 5
61374: PUSH
61375: LD_VAR 0 3
61379: ST_TO_ADDR
// break ;
61380: GO 61384
// end ;
61382: GO 61349
61384: POP
61385: POP
// if not team then
61386: LD_VAR 0 5
61390: NOT
61391: IFFALSE 61395
// exit ;
61393: GO 61609
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61395: LD_EXP 34
61399: PPUSH
61400: LD_INT 81
61402: PUSH
61403: LD_VAR 0 6
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PPUSH
61412: CALL_OW 70
61416: IFFALSE 61420
// exit ;
61418: GO 61609
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
61420: LD_ADDR_EXP 59
61424: PUSH
61425: LD_EXP 59
61429: PPUSH
61430: LD_VAR 0 5
61434: PPUSH
61435: LD_EXP 59
61439: PUSH
61440: LD_VAR 0 5
61444: ARRAY
61445: PUSH
61446: LD_INT 1
61448: PLUS
61449: PPUSH
61450: CALL_OW 1
61454: ST_TO_ADDR
// for i in mpTeams [ team ] do
61455: LD_ADDR_VAR 0 3
61459: PUSH
61460: LD_EXP 10
61464: PUSH
61465: LD_VAR 0 5
61469: ARRAY
61470: PUSH
61471: FOR_IN
61472: IFFALSE 61496
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
61474: LD_VAR 0 3
61478: PPUSH
61479: LD_EXP 59
61483: PUSH
61484: LD_VAR 0 5
61488: ARRAY
61489: PPUSH
61490: CALL_OW 506
61494: GO 61471
61496: POP
61497: POP
// end else
61498: GO 61609
// begin first := depots [ 1 ] ;
61500: LD_ADDR_VAR 0 4
61504: PUSH
61505: LD_VAR 0 1
61509: PUSH
61510: LD_INT 1
61512: ARRAY
61513: ST_TO_ADDR
// side := GetSide ( first ) ;
61514: LD_ADDR_VAR 0 6
61518: PUSH
61519: LD_VAR 0 4
61523: PPUSH
61524: CALL_OW 255
61528: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61529: LD_EXP 34
61533: PPUSH
61534: LD_INT 81
61536: PUSH
61537: LD_VAR 0 6
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PPUSH
61546: CALL_OW 70
61550: IFFALSE 61554
// exit ;
61552: GO 61609
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
61554: LD_ADDR_EXP 59
61558: PUSH
61559: LD_EXP 59
61563: PPUSH
61564: LD_VAR 0 6
61568: PPUSH
61569: LD_EXP 59
61573: PUSH
61574: LD_VAR 0 6
61578: ARRAY
61579: PUSH
61580: LD_INT 1
61582: PLUS
61583: PPUSH
61584: CALL_OW 1
61588: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
61589: LD_VAR 0 6
61593: PPUSH
61594: LD_EXP 59
61598: PUSH
61599: LD_VAR 0 6
61603: ARRAY
61604: PPUSH
61605: CALL_OW 506
// end ; end ;
61609: LD_VAR 0 2
61613: RET
// function UpdateCounter ; var i ; begin
61614: LD_INT 0
61616: PPUSH
61617: PPUSH
// result := [ ] ;
61618: LD_ADDR_VAR 0 1
61622: PUSH
61623: EMPTY
61624: ST_TO_ADDR
// if mpTeamGame then
61625: LD_EXP 11
61629: IFFALSE 61696
// begin for i := 1 to mpTeams do
61631: LD_ADDR_VAR 0 2
61635: PUSH
61636: DOUBLE
61637: LD_INT 1
61639: DEC
61640: ST_TO_ADDR
61641: LD_EXP 10
61645: PUSH
61646: FOR_TO
61647: IFFALSE 61692
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
61649: LD_ADDR_VAR 0 1
61653: PUSH
61654: LD_VAR 0 1
61658: PUSH
61659: LD_STRING #KingoftheHill-Team
61661: PUSH
61662: LD_VAR 0 2
61666: PUSH
61667: LD_EXP 59
61671: PUSH
61672: LD_VAR 0 2
61676: ARRAY
61677: PUSH
61678: LD_EXP 35
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: ADD
61689: ST_TO_ADDR
61690: GO 61646
61692: POP
61693: POP
// end else
61694: GO 61769
// begin for i := 1 to 8 do
61696: LD_ADDR_VAR 0 2
61700: PUSH
61701: DOUBLE
61702: LD_INT 1
61704: DEC
61705: ST_TO_ADDR
61706: LD_INT 8
61708: PUSH
61709: FOR_TO
61710: IFFALSE 61767
// if mpSidePositions [ i ] then
61712: LD_EXP 7
61716: PUSH
61717: LD_VAR 0 2
61721: ARRAY
61722: IFFALSE 61765
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
61724: LD_ADDR_VAR 0 1
61728: PUSH
61729: LD_VAR 0 1
61733: PUSH
61734: LD_STRING #KingoftheHill-Player
61736: PUSH
61737: LD_VAR 0 2
61741: PUSH
61742: LD_EXP 59
61746: PUSH
61747: LD_VAR 0 2
61751: ARRAY
61752: PUSH
61753: LD_EXP 35
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: ADD
61764: ST_TO_ADDR
61765: GO 61709
61767: POP
61768: POP
// end ; mpDisplayStrings := result ;
61769: LD_ADDR_EXP 38
61773: PUSH
61774: LD_VAR 0 1
61778: ST_TO_ADDR
// end ;
61779: LD_VAR 0 1
61783: RET
// export function HowMuchPointsKing ( side ) ; begin
61784: LD_INT 0
61786: PPUSH
// result := HowMuchPoints ( side ) ;
61787: LD_ADDR_VAR 0 2
61791: PUSH
61792: LD_VAR 0 1
61796: PPUSH
61797: CALL 61807 0 1
61801: ST_TO_ADDR
// end ;
61802: LD_VAR 0 2
61806: RET
// function HowMuchPoints ( side ) ; var i ; begin
61807: LD_INT 0
61809: PPUSH
61810: PPUSH
// if mpTeamGame then
61811: LD_EXP 11
61815: IFFALSE 61884
// begin for i := 1 to Count ( mpTeams ) do
61817: LD_ADDR_VAR 0 3
61821: PUSH
61822: DOUBLE
61823: LD_INT 1
61825: DEC
61826: ST_TO_ADDR
61827: LD_EXP 10
61831: PPUSH
61832: CALL 12906 0 1
61836: PUSH
61837: FOR_TO
61838: IFFALSE 61880
// begin if side in mpTeams [ i ] then
61840: LD_VAR 0 1
61844: PUSH
61845: LD_EXP 10
61849: PUSH
61850: LD_VAR 0 3
61854: ARRAY
61855: IN
61856: IFFALSE 61878
// begin result := mpKingPoints [ i ] ;
61858: LD_ADDR_VAR 0 2
61862: PUSH
61863: LD_EXP 59
61867: PUSH
61868: LD_VAR 0 3
61872: ARRAY
61873: ST_TO_ADDR
// exit ;
61874: POP
61875: POP
61876: GO 61900
// end ; end ;
61878: GO 61837
61880: POP
61881: POP
// end else
61882: GO 61900
// result := mpKingPoints [ side ] ;
61884: LD_ADDR_VAR 0 2
61888: PUSH
61889: LD_EXP 59
61893: PUSH
61894: LD_VAR 0 1
61898: ARRAY
61899: ST_TO_ADDR
// end ;
61900: LD_VAR 0 2
61904: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
61905: LD_EXP 39
61909: IFFALSE 61917
61911: PUSH
61912: CALL 62329 0 0
61916: AND
61917: IFFALSE 61925
61919: PUSH
61920: LD_OWVAR 4
61924: AND
61925: IFFALSE 62178
61927: GO 61929
61929: DISABLE
61930: LD_INT 0
61932: PPUSH
61933: PPUSH
// begin canWin := false ;
61934: LD_ADDR_VAR 0 2
61938: PUSH
61939: LD_INT 0
61941: ST_TO_ADDR
// if not HasPower ( your_side ) then
61942: LD_OWVAR 2
61946: PPUSH
61947: CALL 62371 0 1
61951: NOT
61952: IFFALSE 61963
// begin Multiplayer_Loose_Message ;
61954: CALL_OW 521
// enable ( mpLose ) ;
61958: LD_INT 102
61960: ENABLE_MARKED
// end else
61961: GO 62178
// begin if not EnemiesInGame then
61963: CALL 62181 0 0
61967: NOT
61968: IFFALSE 61975
// begin enable ( mpWin ) ;
61970: LD_INT 101
61972: ENABLE_MARKED
// exit ;
61973: GO 62178
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
61975: LD_ADDR_VAR 0 2
61979: PUSH
61980: LD_OWVAR 2
61984: PPUSH
61985: CALL 61807 0 1
61989: PUSH
61990: LD_EXP 35
61994: GREATEREQUAL
61995: IFFALSE 62008
61997: PUSH
61998: LD_OWVAR 2
62002: PPUSH
62003: CALL 62371 0 1
62007: AND
62008: ST_TO_ADDR
// for i := 1 to 8 do
62009: LD_ADDR_VAR 0 1
62013: PUSH
62014: DOUBLE
62015: LD_INT 1
62017: DEC
62018: ST_TO_ADDR
62019: LD_INT 8
62021: PUSH
62022: FOR_TO
62023: IFFALSE 62164
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62025: LD_EXP 7
62029: PUSH
62030: LD_VAR 0 1
62034: ARRAY
62035: IFFALSE 62048
62037: PUSH
62038: LD_VAR 0 1
62042: PPUSH
62043: CALL_OW 108
62047: AND
62048: IFFALSE 62062
62050: PUSH
62051: LD_VAR 0 1
62055: PUSH
62056: LD_OWVAR 2
62060: NONEQUAL
62061: AND
62062: IFFALSE 62162
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62064: LD_EXP 8
62068: PUSH
62069: LD_VAR 0 1
62073: ARRAY
62074: NOT
62075: IFTRUE 62123
62077: PUSH
62078: LD_EXP 8
62082: PUSH
62083: LD_VAR 0 1
62087: ARRAY
62088: PUSH
62089: LD_EXP 8
62093: PUSH
62094: LD_OWVAR 2
62098: ARRAY
62099: NONEQUAL
62100: IFFALSE 62122
62102: PUSH
62103: LD_OWVAR 2
62107: PPUSH
62108: LD_VAR 0 1
62112: PPUSH
62113: CALL_OW 81
62117: PUSH
62118: LD_INT 1
62120: NONEQUAL
62121: AND
62122: OR
62123: IFFALSE 62162
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
62125: LD_VAR 0 1
62129: PPUSH
62130: CALL 61807 0 1
62134: PUSH
62135: LD_EXP 35
62139: GREATEREQUAL
62140: IFFALSE 62153
62142: PUSH
62143: LD_VAR 0 1
62147: PPUSH
62148: CALL 62371 0 1
62152: AND
62153: IFFALSE 62162
// begin enable ( mpLose ) ;
62155: LD_INT 102
62157: ENABLE_MARKED
// exit ;
62158: POP
62159: POP
62160: GO 62178
// end ;
62162: GO 62022
62164: POP
62165: POP
// if canWin then
62166: LD_VAR 0 2
62170: IFFALSE 62177
// enable ( mpWin ) else
62172: LD_INT 101
62174: ENABLE_MARKED
62175: GO 62178
// enable ;
62177: ENABLE
// end ; end ;
62178: PPOPN 2
62180: END
// function EnemiesInGame ; var i ; begin
62181: LD_INT 0
62183: PPUSH
62184: PPUSH
// result := false ;
62185: LD_ADDR_VAR 0 1
62189: PUSH
62190: LD_INT 0
62192: ST_TO_ADDR
// for i := 1 to 8 do
62193: LD_ADDR_VAR 0 2
62197: PUSH
62198: DOUBLE
62199: LD_INT 1
62201: DEC
62202: ST_TO_ADDR
62203: LD_INT 8
62205: PUSH
62206: FOR_TO
62207: IFFALSE 62322
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
62209: LD_VAR 0 2
62213: PUSH
62214: LD_OWVAR 2
62218: NONEQUAL
62219: IFFALSE 62232
62221: PUSH
62222: LD_VAR 0 2
62226: PPUSH
62227: CALL 62371 0 1
62231: AND
62232: IFFALSE 62245
62234: PUSH
62235: LD_VAR 0 2
62239: PPUSH
62240: CALL_OW 108
62244: AND
62245: IFFALSE 62320
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62247: LD_EXP 8
62251: PUSH
62252: LD_VAR 0 2
62256: ARRAY
62257: NOT
62258: IFTRUE 62306
62260: PUSH
62261: LD_EXP 8
62265: PUSH
62266: LD_VAR 0 2
62270: ARRAY
62271: PUSH
62272: LD_EXP 8
62276: PUSH
62277: LD_OWVAR 2
62281: ARRAY
62282: NONEQUAL
62283: IFFALSE 62305
62285: PUSH
62286: LD_OWVAR 2
62290: PPUSH
62291: LD_VAR 0 2
62295: PPUSH
62296: CALL_OW 81
62300: PUSH
62301: LD_INT 1
62303: NONEQUAL
62304: AND
62305: OR
62306: IFFALSE 62320
// begin result := true ;
62308: LD_ADDR_VAR 0 1
62312: PUSH
62313: LD_INT 1
62315: ST_TO_ADDR
// exit ;
62316: POP
62317: POP
62318: GO 62324
// end ;
62320: GO 62206
62322: POP
62323: POP
// end ;
62324: LD_VAR 0 1
62328: RET
// function CanWinLoose ; begin
62329: LD_INT 0
62331: PPUSH
// result := true ;
62332: LD_ADDR_VAR 0 1
62336: PUSH
62337: LD_INT 1
62339: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
62340: CALL_OW 531
62344: IFFALSE 62356
62346: PUSH
62347: CALL_OW 519
62351: PUSH
62352: LD_INT 1
62354: GREATER
62355: AND
62356: IFFALSE 62366
// result := false ;
62358: LD_ADDR_VAR 0 1
62362: PUSH
62363: LD_INT 0
62365: ST_TO_ADDR
// end ;
62366: LD_VAR 0 1
62370: RET
// function HasPower ( i ) ; begin
62371: LD_INT 0
62373: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
62374: LD_ADDR_VAR 0 2
62378: PUSH
62379: LD_INT 22
62381: PUSH
62382: LD_VAR 0 1
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 2
62393: PUSH
62394: LD_INT 21
62396: PUSH
62397: LD_INT 1
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 33
62406: PUSH
62407: LD_INT 3
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 33
62416: PUSH
62417: LD_INT 5
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PPUSH
62434: CALL_OW 69
62438: ST_TO_ADDR
// end ; end_of_file
62439: LD_VAR 0 2
62443: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62444: PPOPN 6
62446: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62447: LD_INT 0
62449: PPUSH
// begin if not units then
62450: LD_VAR 0 1
62454: NOT
62455: IFFALSE 62459
// exit ;
62457: GO 62493
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62459: LD_VAR 0 1
62463: PPUSH
62464: LD_VAR 0 2
62468: PPUSH
62469: LD_VAR 0 3
62473: PPUSH
62474: LD_VAR 0 4
62478: PPUSH
62479: LD_VAR 0 5
62483: PPUSH
62484: LD_VAR 0 6
62488: PPUSH
62489: CALL 60736 0 6
// end ;
62493: PPOPN 7
62495: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62496: LD_EXP 3
62500: PUSH
62501: LD_INT 4
62503: EQUAL
62504: IFFALSE 62540
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62506: LD_STRING setGameDifficulty(
62508: PUSH
62509: LD_OWVAR 67
62513: STR
62514: PUSH
62515: LD_STRING )
62517: STR
62518: PPUSH
62519: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62523: LD_STRING displayDifficulty(
62525: PUSH
62526: LD_OWVAR 67
62530: STR
62531: PUSH
62532: LD_STRING )
62534: STR
62535: PPUSH
62536: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62540: CALL 62569 0 0
// end ; end_of_file
62544: PPOPN 1
62546: END
// every 0 0$1 do
62547: GO 62549
62549: DISABLE
// begin enable ;
62550: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62551: LD_STRING updateTimer(
62553: PUSH
62554: LD_OWVAR 1
62558: STR
62559: PUSH
62560: LD_STRING );
62562: STR
62563: PPUSH
62564: CALL_OW 559
// end ;
62568: END
// export function SOS_MapStart ( ) ; begin
62569: LD_INT 0
62571: PPUSH
// UpdateFactoryWaypoints ( ) ;
62572: CALL 63503 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62576: CALL 63755 0 0
// ParseMultiDataToLua ( ) ;
62580: CALL 63902 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
62584: LD_STRING setSpecLogoNumber(
62586: PUSH
62587: LD_INT 2
62589: STR
62590: PUSH
62591: LD_STRING ,
62593: STR
62594: PUSH
62595: LD_INT 1
62597: STR
62598: PUSH
62599: LD_STRING )
62601: STR
62602: PPUSH
62603: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
62607: LD_STRING setSpecLogoNumber(
62609: PUSH
62610: LD_INT 3
62612: STR
62613: PUSH
62614: LD_STRING ,
62616: STR
62617: PUSH
62618: LD_INT 2
62620: STR
62621: PUSH
62622: LD_STRING )
62624: STR
62625: PPUSH
62626: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
62630: LD_STRING setSpecLogoNumber(
62632: PUSH
62633: LD_INT 4
62635: STR
62636: PUSH
62637: LD_STRING ,
62639: STR
62640: PUSH
62641: LD_INT 3
62643: STR
62644: PUSH
62645: LD_STRING )
62647: STR
62648: PPUSH
62649: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
62653: LD_STRING setSpecLogoNumber(
62655: PUSH
62656: LD_INT 5
62658: STR
62659: PUSH
62660: LD_STRING ,
62662: STR
62663: PUSH
62664: LD_INT 4
62666: STR
62667: PUSH
62668: LD_STRING )
62670: STR
62671: PPUSH
62672: CALL_OW 559
// end ;
62676: LD_VAR 0 1
62680: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
62681: LD_INT 0
62683: PPUSH
62684: PPUSH
62685: PPUSH
62686: PPUSH
62687: PPUSH
62688: PPUSH
62689: PPUSH
62690: PPUSH
62691: PPUSH
// for i := 1 to 8 do
62692: LD_ADDR_VAR 0 2
62696: PUSH
62697: DOUBLE
62698: LD_INT 1
62700: DEC
62701: ST_TO_ADDR
62702: LD_INT 8
62704: PUSH
62705: FOR_TO
62706: IFFALSE 63091
// begin if mpSidePositions [ i ] then
62708: LD_EXP 7
62712: PUSH
62713: LD_VAR 0 2
62717: ARRAY
62718: IFFALSE 63089
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
62720: LD_ADDR_VAR 0 7
62724: PUSH
62725: LD_INT 22
62727: PUSH
62728: LD_VAR 0 2
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 21
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PPUSH
62751: CALL_OW 69
62755: PPUSH
62756: CALL 12906 0 1
62760: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62761: LD_ADDR_VAR 0 9
62765: PUSH
62766: LD_INT 22
62768: PUSH
62769: LD_VAR 0 2
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 2
62780: PUSH
62781: LD_INT 30
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 30
62793: PUSH
62794: LD_INT 1
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: LIST
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PPUSH
62810: CALL_OW 69
62814: ST_TO_ADDR
// crates := 0 ;
62815: LD_ADDR_VAR 0 4
62819: PUSH
62820: LD_INT 0
62822: ST_TO_ADDR
// oil := 0 ;
62823: LD_ADDR_VAR 0 5
62827: PUSH
62828: LD_INT 0
62830: ST_TO_ADDR
// sib := 0 ;
62831: LD_ADDR_VAR 0 6
62835: PUSH
62836: LD_INT 0
62838: ST_TO_ADDR
// if bases then
62839: LD_VAR 0 9
62843: IFFALSE 62949
// begin for j in bases do
62845: LD_ADDR_VAR 0 3
62849: PUSH
62850: LD_VAR 0 9
62854: PUSH
62855: FOR_IN
62856: IFFALSE 62947
// begin base := GetBase ( j ) ;
62858: LD_ADDR_VAR 0 8
62862: PUSH
62863: LD_VAR 0 3
62867: PPUSH
62868: CALL_OW 274
62872: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
62873: LD_ADDR_VAR 0 4
62877: PUSH
62878: LD_VAR 0 4
62882: PUSH
62883: LD_VAR 0 8
62887: PPUSH
62888: LD_INT 1
62890: PPUSH
62891: CALL_OW 275
62895: PLUS
62896: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
62897: LD_ADDR_VAR 0 5
62901: PUSH
62902: LD_VAR 0 5
62906: PUSH
62907: LD_VAR 0 8
62911: PPUSH
62912: LD_INT 2
62914: PPUSH
62915: CALL_OW 275
62919: PLUS
62920: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
62921: LD_ADDR_VAR 0 6
62925: PUSH
62926: LD_VAR 0 6
62930: PUSH
62931: LD_VAR 0 8
62935: PPUSH
62936: LD_INT 3
62938: PPUSH
62939: CALL_OW 275
62943: PLUS
62944: ST_TO_ADDR
// end ;
62945: GO 62855
62947: POP
62948: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
62949: LD_STRING setSpecText(
62951: PUSH
62952: LD_VAR 0 2
62956: STR
62957: PUSH
62958: LD_STRING ,
62960: STR
62961: PUSH
62962: LD_INT 2
62964: STR
62965: PUSH
62966: LD_STRING ,
62968: STR
62969: PUSH
62970: LD_VAR 0 4
62974: STR
62975: PUSH
62976: LD_STRING )
62978: STR
62979: PPUSH
62980: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
62984: LD_STRING setSpecText(
62986: PUSH
62987: LD_VAR 0 2
62991: STR
62992: PUSH
62993: LD_STRING ,
62995: STR
62996: PUSH
62997: LD_INT 3
62999: STR
63000: PUSH
63001: LD_STRING ,
63003: STR
63004: PUSH
63005: LD_VAR 0 5
63009: STR
63010: PUSH
63011: LD_STRING )
63013: STR
63014: PPUSH
63015: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63019: LD_STRING setSpecText(
63021: PUSH
63022: LD_VAR 0 2
63026: STR
63027: PUSH
63028: LD_STRING ,
63030: STR
63031: PUSH
63032: LD_INT 4
63034: STR
63035: PUSH
63036: LD_STRING ,
63038: STR
63039: PUSH
63040: LD_VAR 0 6
63044: STR
63045: PUSH
63046: LD_STRING )
63048: STR
63049: PPUSH
63050: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63054: LD_STRING setSpecText(
63056: PUSH
63057: LD_VAR 0 2
63061: STR
63062: PUSH
63063: LD_STRING ,
63065: STR
63066: PUSH
63067: LD_INT 5
63069: STR
63070: PUSH
63071: LD_STRING ,
63073: STR
63074: PUSH
63075: LD_VAR 0 7
63079: STR
63080: PUSH
63081: LD_STRING )
63083: STR
63084: PPUSH
63085: CALL_OW 559
// end ; end ;
63089: GO 62705
63091: POP
63092: POP
// end ;
63093: LD_VAR 0 1
63097: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63098: LD_INT 2
63100: PUSH
63101: LD_INT 30
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 30
63113: PUSH
63114: LD_INT 1
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: LIST
63125: PPUSH
63126: CALL_OW 69
63130: IFFALSE 63140
63132: GO 63134
63134: DISABLE
// begin enable ;
63135: ENABLE
// UpdateSpectatorBar ;
63136: CALL 62681 0 0
// end ;
63140: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63141: LD_INT 0
63143: PPUSH
// end ;
63144: LD_VAR 0 12
63148: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63149: LD_INT 0
63151: PPUSH
63152: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63153: LD_VAR 0 1
63157: NOT
63158: IFTRUE 63177
63160: PUSH
63161: LD_VAR 0 2
63165: PPUSH
63166: LD_VAR 0 3
63170: PPUSH
63171: CALL_OW 488
63175: NOT
63176: OR
63177: IFTRUE 63212
63179: PUSH
63180: LD_VAR 0 1
63184: PPUSH
63185: CALL_OW 266
63189: PUSH
63190: LD_INT 3
63192: NONEQUAL
63193: IFFALSE 63211
63195: PUSH
63196: LD_VAR 0 1
63200: PPUSH
63201: CALL_OW 247
63205: PUSH
63206: LD_INT 1
63208: EQUAL
63209: NOT
63210: AND
63211: OR
63212: IFFALSE 63216
// exit ;
63214: GO 63498
// if GetType ( factory ) = unit_human then
63216: LD_VAR 0 1
63220: PPUSH
63221: CALL_OW 247
63225: PUSH
63226: LD_INT 1
63228: EQUAL
63229: IFFALSE 63246
// factory := IsInUnit ( factory ) ;
63231: LD_ADDR_VAR 0 1
63235: PUSH
63236: LD_VAR 0 1
63240: PPUSH
63241: CALL_OW 310
63245: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63246: LD_VAR 0 1
63250: PPUSH
63251: CALL_OW 266
63255: PUSH
63256: LD_INT 3
63258: NONEQUAL
63259: IFFALSE 63263
// exit ;
63261: GO 63498
// for i := 1 to Count ( factoryWaypoints ) do
63263: LD_ADDR_VAR 0 5
63267: PUSH
63268: DOUBLE
63269: LD_INT 1
63271: DEC
63272: ST_TO_ADDR
63273: LD_EXP 60
63277: PPUSH
63278: CALL 12906 0 1
63282: PUSH
63283: FOR_TO
63284: IFFALSE 63446
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63286: LD_VAR 0 2
63290: PPUSH
63291: LD_VAR 0 3
63295: PPUSH
63296: CALL_OW 428
63300: PUSH
63301: LD_EXP 60
63305: PUSH
63306: LD_VAR 0 5
63310: ARRAY
63311: PUSH
63312: LD_INT 2
63314: ARRAY
63315: EQUAL
63316: IFFALSE 63348
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63318: LD_ADDR_EXP 60
63322: PUSH
63323: LD_EXP 60
63327: PPUSH
63328: LD_VAR 0 5
63332: PPUSH
63333: CALL_OW 3
63337: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63338: CALL 63503 0 0
// exit ;
63342: POP
63343: POP
63344: GO 63498
// end else
63346: GO 63444
// if factory = factoryWaypoints [ i ] [ 2 ] then
63348: LD_VAR 0 1
63352: PUSH
63353: LD_EXP 60
63357: PUSH
63358: LD_VAR 0 5
63362: ARRAY
63363: PUSH
63364: LD_INT 2
63366: ARRAY
63367: EQUAL
63368: IFFALSE 63444
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63370: LD_ADDR_EXP 60
63374: PUSH
63375: LD_EXP 60
63379: PPUSH
63380: LD_VAR 0 5
63384: PPUSH
63385: CALL_OW 3
63389: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63390: LD_ADDR_EXP 60
63394: PUSH
63395: LD_EXP 60
63399: PPUSH
63400: LD_VAR 0 1
63404: PPUSH
63405: CALL_OW 255
63409: PUSH
63410: LD_VAR 0 1
63414: PUSH
63415: LD_VAR 0 2
63419: PUSH
63420: LD_VAR 0 3
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: PPUSH
63431: CALL 48872 0 2
63435: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63436: CALL 63503 0 0
// exit ;
63440: POP
63441: POP
63442: GO 63498
// end ; end ;
63444: GO 63283
63446: POP
63447: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63448: LD_ADDR_EXP 60
63452: PUSH
63453: LD_EXP 60
63457: PPUSH
63458: LD_VAR 0 1
63462: PPUSH
63463: CALL_OW 255
63467: PUSH
63468: LD_VAR 0 1
63472: PUSH
63473: LD_VAR 0 2
63477: PUSH
63478: LD_VAR 0 3
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: PPUSH
63489: CALL 48872 0 2
63493: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63494: CALL 63503 0 0
// end ;
63498: LD_VAR 0 4
63502: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63503: LD_INT 0
63505: PPUSH
63506: PPUSH
63507: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63508: LD_STRING resetFactoryWaypoint();
63510: PPUSH
63511: CALL_OW 559
// if factoryWaypoints then
63515: LD_EXP 60
63519: IFFALSE 63640
// begin list := factoryWaypoints ;
63521: LD_ADDR_VAR 0 3
63525: PUSH
63526: LD_EXP 60
63530: ST_TO_ADDR
// for i := 1 to list do
63531: LD_ADDR_VAR 0 2
63535: PUSH
63536: DOUBLE
63537: LD_INT 1
63539: DEC
63540: ST_TO_ADDR
63541: LD_VAR 0 3
63545: PUSH
63546: FOR_TO
63547: IFFALSE 63638
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63549: LD_STRING setFactoryWaypointXY(
63551: PUSH
63552: LD_VAR 0 3
63556: PUSH
63557: LD_VAR 0 2
63561: ARRAY
63562: PUSH
63563: LD_INT 1
63565: ARRAY
63566: STR
63567: PUSH
63568: LD_STRING ,
63570: STR
63571: PUSH
63572: LD_VAR 0 3
63576: PUSH
63577: LD_VAR 0 2
63581: ARRAY
63582: PUSH
63583: LD_INT 2
63585: ARRAY
63586: STR
63587: PUSH
63588: LD_STRING ,
63590: STR
63591: PUSH
63592: LD_VAR 0 3
63596: PUSH
63597: LD_VAR 0 2
63601: ARRAY
63602: PUSH
63603: LD_INT 3
63605: ARRAY
63606: STR
63607: PUSH
63608: LD_STRING ,
63610: STR
63611: PUSH
63612: LD_VAR 0 3
63616: PUSH
63617: LD_VAR 0 2
63621: ARRAY
63622: PUSH
63623: LD_INT 4
63625: ARRAY
63626: STR
63627: PUSH
63628: LD_STRING )
63630: STR
63631: PPUSH
63632: CALL_OW 559
63636: GO 63546
63638: POP
63639: POP
// end ; end ;
63640: LD_VAR 0 1
63644: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63645: LD_INT 0
63647: PPUSH
// if HexInfo ( x , y ) = warehouse then
63648: LD_VAR 0 2
63652: PPUSH
63653: LD_VAR 0 3
63657: PPUSH
63658: CALL_OW 428
63662: PUSH
63663: LD_VAR 0 1
63667: EQUAL
63668: IFFALSE 63695
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63670: LD_ADDR_EXP 62
63674: PUSH
63675: LD_EXP 62
63679: PPUSH
63680: LD_VAR 0 1
63684: PPUSH
63685: LD_INT 0
63687: PPUSH
63688: CALL_OW 1
63692: ST_TO_ADDR
63693: GO 63746
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63695: LD_ADDR_EXP 62
63699: PUSH
63700: LD_EXP 62
63704: PPUSH
63705: LD_VAR 0 1
63709: PPUSH
63710: LD_VAR 0 1
63714: PPUSH
63715: CALL_OW 255
63719: PUSH
63720: LD_VAR 0 1
63724: PUSH
63725: LD_VAR 0 2
63729: PUSH
63730: LD_VAR 0 3
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: PPUSH
63741: CALL_OW 1
63745: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63746: CALL 63755 0 0
// end ;
63750: LD_VAR 0 4
63754: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63755: LD_INT 0
63757: PPUSH
63758: PPUSH
63759: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63760: LD_STRING resetWarehouseGatheringPoints();
63762: PPUSH
63763: CALL_OW 559
// if warehouseGatheringPoints then
63767: LD_EXP 62
63771: IFFALSE 63897
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63773: LD_ADDR_VAR 0 3
63777: PUSH
63778: LD_EXP 62
63782: PPUSH
63783: CALL 52806 0 1
63787: ST_TO_ADDR
// for i := 1 to list do
63788: LD_ADDR_VAR 0 2
63792: PUSH
63793: DOUBLE
63794: LD_INT 1
63796: DEC
63797: ST_TO_ADDR
63798: LD_VAR 0 3
63802: PUSH
63803: FOR_TO
63804: IFFALSE 63895
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63806: LD_STRING setWarehouseGatheringPointXY(
63808: PUSH
63809: LD_VAR 0 3
63813: PUSH
63814: LD_VAR 0 2
63818: ARRAY
63819: PUSH
63820: LD_INT 1
63822: ARRAY
63823: STR
63824: PUSH
63825: LD_STRING ,
63827: STR
63828: PUSH
63829: LD_VAR 0 3
63833: PUSH
63834: LD_VAR 0 2
63838: ARRAY
63839: PUSH
63840: LD_INT 2
63842: ARRAY
63843: STR
63844: PUSH
63845: LD_STRING ,
63847: STR
63848: PUSH
63849: LD_VAR 0 3
63853: PUSH
63854: LD_VAR 0 2
63858: ARRAY
63859: PUSH
63860: LD_INT 3
63862: ARRAY
63863: STR
63864: PUSH
63865: LD_STRING ,
63867: STR
63868: PUSH
63869: LD_VAR 0 3
63873: PUSH
63874: LD_VAR 0 2
63878: ARRAY
63879: PUSH
63880: LD_INT 4
63882: ARRAY
63883: STR
63884: PUSH
63885: LD_STRING )
63887: STR
63888: PPUSH
63889: CALL_OW 559
63893: GO 63803
63895: POP
63896: POP
// end ; end ;
63897: LD_VAR 0 1
63901: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
63902: LD_INT 0
63904: PPUSH
63905: PPUSH
// if not mpSidePositions then
63906: LD_EXP 7
63910: NOT
63911: IFFALSE 63915
// exit ;
63913: GO 63986
// result :=  ;
63915: LD_ADDR_VAR 0 1
63919: PUSH
63920: LD_STRING 
63922: ST_TO_ADDR
// for i := 1 to 8 do
63923: LD_ADDR_VAR 0 2
63927: PUSH
63928: DOUBLE
63929: LD_INT 1
63931: DEC
63932: ST_TO_ADDR
63933: LD_INT 8
63935: PUSH
63936: FOR_TO
63937: IFFALSE 63967
// begin result := result & mpSidePositions [ i ] & ; ;
63939: LD_ADDR_VAR 0 1
63943: PUSH
63944: LD_VAR 0 1
63948: PUSH
63949: LD_EXP 7
63953: PUSH
63954: LD_VAR 0 2
63958: ARRAY
63959: STR
63960: PUSH
63961: LD_STRING ;
63963: STR
63964: ST_TO_ADDR
// end ;
63965: GO 63936
63967: POP
63968: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
63969: LD_STRING setMultiplayerRealPosition("
63971: PUSH
63972: LD_VAR 0 1
63976: STR
63977: PUSH
63978: LD_STRING ");
63980: STR
63981: PPUSH
63982: CALL_OW 559
// end ;
63986: LD_VAR 0 1
63990: RET
