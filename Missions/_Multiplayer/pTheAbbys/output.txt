// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2726 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3102 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 2
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 120 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 120
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 2
 841: PUSH
 842: LD_INT 3
 844: PUSH
 845: LD_INT 4
 847: PUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 6
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Center1 , Center2 ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 7
 869: PUSH
 870: LD_INT 8
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 19
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 6
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 24
 921: PUSH
 922: LD_EXP 6
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 25
 935: PUSH
 936: LD_EXP 6
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 15
 949: PUSH
 950: LD_EXP 6
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 27
 963: PUSH
 964: LD_EXP 6
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 6
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 6
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// mpKingArea := 0 ;
1009: LD_ADDR_EXP 34
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// mpPoints := 0 ;
1017: LD_ADDR_EXP 35
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// mpEmissions := 0 ;
1025: LD_ADDR_EXP 37
1029: PUSH
1030: LD_INT 0
1032: ST_TO_ADDR
// kingArea := 0 ;
1033: LD_ADDR_EXP 1
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// kingCamArea := 0 ;
1041: LD_ADDR_EXP 2
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1049: LD_EXP 6
1053: PUSH
1054: LD_INT 9
1056: ARRAY
1057: IFFALSE 1189
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1059: LD_ADDR_EXP 36
1063: PUSH
1064: LD_INT 1
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: LD_INT 1
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: LD_INT 1
1087: PUSH
1088: LD_INT 1
1090: PUSH
1091: LD_INT 3
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: PUSH
1104: LD_INT 12
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 1
1112: PUSH
1113: LD_INT 24
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_INT 12
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 23
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 21
1146: PUSH
1147: LD_INT 1
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 42
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: LD_INT 21
1164: PUSH
1165: LD_INT 1
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 42
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: LIST
1188: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1189: LD_ADDR_EXP 16
1193: PUSH
1194: LD_EXP 6
1198: PUSH
1199: LD_INT 11
1201: ARRAY
1202: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1203: LD_ADDR_EXP 22
1207: PUSH
1208: LD_EXP 6
1212: PUSH
1213: LD_INT 12
1215: ARRAY
1216: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1217: LD_ADDR_EXP 26
1221: PUSH
1222: LD_EXP 6
1226: PUSH
1227: LD_INT 13
1229: ARRAY
1230: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1231: LD_ADDR_EXP 33
1235: PUSH
1236: LD_EXP 6
1240: PUSH
1241: LD_INT 14
1243: ARRAY
1244: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1245: LD_ADDR_EXP 30
1249: PUSH
1250: LD_EXP 6
1254: PUSH
1255: LD_INT 15
1257: ARRAY
1258: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1259: LD_ADDR_EXP 28
1263: PUSH
1264: LD_EXP 6
1268: PUSH
1269: LD_INT 18
1271: ARRAY
1272: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 6
1282: PUSH
1283: LD_INT 21
1285: ARRAY
1286: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1287: LD_ADDR_EXP 31
1291: PUSH
1292: LD_INT 9
1294: PUSH
1295: LD_INT 10
1297: PUSH
1298: LD_INT 11
1300: PUSH
1301: LD_INT 12
1303: PUSH
1304: LD_INT 13
1306: PUSH
1307: LD_INT 14
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 1 ) , GetBuildingFromArea ( DepotArea2 , 1 ) , GetBuildingFromArea ( DepotArea3 , 1 ) , GetBuildingFromArea ( DepotArea4 , 4 ) , GetBuildingFromArea ( DepotArea5 , 4 ) , GetBuildingFromArea ( DepotArea6 , 4 ) ] ;
1318: LD_ADDR_VAR 0 8
1322: PUSH
1323: LD_INT 15
1325: PPUSH
1326: LD_INT 1
1328: PPUSH
1329: CALL 52899 0 2
1333: PUSH
1334: LD_INT 16
1336: PPUSH
1337: LD_INT 1
1339: PPUSH
1340: CALL 52899 0 2
1344: PUSH
1345: LD_INT 17
1347: PPUSH
1348: LD_INT 1
1350: PPUSH
1351: CALL 52899 0 2
1355: PUSH
1356: LD_INT 18
1358: PPUSH
1359: LD_INT 4
1361: PPUSH
1362: CALL 52899 0 2
1366: PUSH
1367: LD_INT 19
1369: PPUSH
1370: LD_INT 4
1372: PPUSH
1373: CALL 52899 0 2
1377: PUSH
1378: LD_INT 20
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: CALL 52899 0 2
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1397: LD_ADDR_VAR 0 3
1401: PUSH
1402: DOUBLE
1403: LD_INT 1
1405: DEC
1406: ST_TO_ADDR
1407: LD_VAR 0 8
1411: PPUSH
1412: CALL 12248 0 1
1416: PUSH
1417: FOR_TO
1418: IFFALSE 1522
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1420: LD_ADDR_EXP 21
1424: PUSH
1425: LD_EXP 21
1429: PPUSH
1430: LD_VAR 0 3
1434: PPUSH
1435: LD_VAR 0 8
1439: PUSH
1440: LD_VAR 0 3
1444: ARRAY
1445: PUSH
1446: LD_INT 1
1448: ARRAY
1449: PPUSH
1450: LD_VAR 0 8
1454: PUSH
1455: LD_VAR 0 3
1459: ARRAY
1460: PUSH
1461: LD_INT 3
1463: ARRAY
1464: PPUSH
1465: LD_INT 10
1467: PPUSH
1468: CALL_OW 272
1472: PUSH
1473: LD_VAR 0 8
1477: PUSH
1478: LD_VAR 0 3
1482: ARRAY
1483: PUSH
1484: LD_INT 2
1486: ARRAY
1487: PPUSH
1488: LD_VAR 0 8
1492: PUSH
1493: LD_VAR 0 3
1497: ARRAY
1498: PUSH
1499: LD_INT 3
1501: ARRAY
1502: PPUSH
1503: LD_INT 10
1505: PPUSH
1506: CALL_OW 273
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 1
1519: ST_TO_ADDR
1520: GO 1417
1522: POP
1523: POP
// if hasOil then
1524: LD_VAR 0 5
1528: IFFALSE 1639
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1530: LD_ADDR_VAR 0 4
1534: PUSH
1535: LD_EXP 6
1539: PUSH
1540: LD_INT 6
1542: ARRAY
1543: PUSH
1544: LD_INT 2
1546: EQUAL
1547: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) , GetSourcesFromArea ( OilArea5 , all ) , GetSourcesFromArea ( OilArea6 , all ) ] ;
1548: LD_ADDR_EXP 12
1552: PUSH
1553: LD_INT 21
1555: PPUSH
1556: LD_VAR 0 4
1560: PPUSH
1561: CALL 52732 0 2
1565: PUSH
1566: LD_INT 22
1568: PPUSH
1569: LD_VAR 0 4
1573: PPUSH
1574: CALL 52732 0 2
1578: PUSH
1579: LD_INT 23
1581: PPUSH
1582: LD_VAR 0 4
1586: PPUSH
1587: CALL 52732 0 2
1591: PUSH
1592: LD_INT 24
1594: PPUSH
1595: LD_VAR 0 4
1599: PPUSH
1600: CALL 52732 0 2
1604: PUSH
1605: LD_INT 25
1607: PPUSH
1608: LD_VAR 0 4
1612: PPUSH
1613: CALL 52732 0 2
1617: PUSH
1618: LD_INT 26
1620: PPUSH
1621: LD_VAR 0 4
1625: PPUSH
1626: CALL 52732 0 2
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: ST_TO_ADDR
// end ; if hasSib then
1639: LD_VAR 0 6
1643: IFFALSE 1754
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1645: LD_ADDR_VAR 0 4
1649: PUSH
1650: LD_EXP 6
1654: PUSH
1655: LD_INT 7
1657: ARRAY
1658: PUSH
1659: LD_INT 2
1661: EQUAL
1662: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) , GetSourcesFromArea ( SibArea5 , all ) , GetSourcesFromArea ( SibArea6 , all ) ] ;
1663: LD_ADDR_EXP 13
1667: PUSH
1668: LD_INT 27
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 52732 0 2
1680: PUSH
1681: LD_INT 28
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 52732 0 2
1693: PUSH
1694: LD_INT 29
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 52732 0 2
1706: PUSH
1707: LD_INT 30
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 52732 0 2
1719: PUSH
1720: LD_INT 31
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 52732 0 2
1732: PUSH
1733: LD_INT 32
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 52732 0 2
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1754: LD_VAR 0 7
1758: PUSH
1759: LD_INT 1
1761: GREATEREQUAL
1762: IFFALSE 1774
// mpDepots := startPos ;
1764: LD_ADDR_EXP 14
1768: PUSH
1769: LD_VAR 0 8
1773: ST_TO_ADDR
// if baseLevel >= 2 then
1774: LD_VAR 0 7
1778: PUSH
1779: LD_INT 2
1781: GREATEREQUAL
1782: IFFALSE 2097
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( BunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( BunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( BunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( BunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea3 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea6 , 1 ) ] ] ;
1784: LD_ADDR_EXP 17
1788: PUSH
1789: LD_INT 31
1791: PUSH
1792: LD_INT 33
1794: PPUSH
1795: LD_INT 4
1797: PPUSH
1798: CALL 52899 0 2
1802: ADD
1803: PUSH
1804: LD_INT 31
1806: PUSH
1807: LD_INT 34
1809: PPUSH
1810: LD_INT 4
1812: PPUSH
1813: CALL 52899 0 2
1817: ADD
1818: PUSH
1819: LD_INT 4
1821: PUSH
1822: LD_INT 35
1824: PPUSH
1825: LD_INT 4
1827: PPUSH
1828: CALL 52899 0 2
1832: ADD
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 31
1841: PUSH
1842: LD_INT 36
1844: PPUSH
1845: LD_INT 4
1847: PPUSH
1848: CALL 52899 0 2
1852: ADD
1853: PUSH
1854: LD_INT 31
1856: PUSH
1857: LD_INT 37
1859: PPUSH
1860: LD_INT 4
1862: PPUSH
1863: CALL 52899 0 2
1867: ADD
1868: PUSH
1869: LD_INT 4
1871: PUSH
1872: LD_INT 38
1874: PPUSH
1875: LD_INT 4
1877: PPUSH
1878: CALL 52899 0 2
1882: ADD
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 31
1891: PUSH
1892: LD_INT 39
1894: PPUSH
1895: LD_INT 4
1897: PPUSH
1898: CALL 52899 0 2
1902: ADD
1903: PUSH
1904: LD_INT 31
1906: PUSH
1907: LD_INT 40
1909: PPUSH
1910: LD_INT 4
1912: PPUSH
1913: CALL 52899 0 2
1917: ADD
1918: PUSH
1919: LD_INT 4
1921: PUSH
1922: LD_INT 41
1924: PPUSH
1925: LD_INT 4
1927: PPUSH
1928: CALL 52899 0 2
1932: ADD
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: PUSH
1939: LD_INT 31
1941: PUSH
1942: LD_INT 42
1944: PPUSH
1945: LD_INT 1
1947: PPUSH
1948: CALL 52899 0 2
1952: ADD
1953: PUSH
1954: LD_INT 31
1956: PUSH
1957: LD_INT 43
1959: PPUSH
1960: LD_INT 1
1962: PPUSH
1963: CALL 52899 0 2
1967: ADD
1968: PUSH
1969: LD_INT 4
1971: PUSH
1972: LD_INT 44
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: CALL 52899 0 2
1982: ADD
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 31
1991: PUSH
1992: LD_INT 45
1994: PPUSH
1995: LD_INT 1
1997: PPUSH
1998: CALL 52899 0 2
2002: ADD
2003: PUSH
2004: LD_INT 31
2006: PUSH
2007: LD_INT 46
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL 52899 0 2
2017: ADD
2018: PUSH
2019: LD_INT 4
2021: PUSH
2022: LD_INT 47
2024: PPUSH
2025: LD_INT 1
2027: PPUSH
2028: CALL 52899 0 2
2032: ADD
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 31
2041: PUSH
2042: LD_INT 48
2044: PPUSH
2045: LD_INT 1
2047: PPUSH
2048: CALL 52899 0 2
2052: ADD
2053: PUSH
2054: LD_INT 31
2056: PUSH
2057: LD_INT 49
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: CALL 52899 0 2
2067: ADD
2068: PUSH
2069: LD_INT 4
2071: PUSH
2072: LD_INT 50
2074: PPUSH
2075: LD_INT 1
2077: PPUSH
2078: CALL 52899 0 2
2082: ADD
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: LIST
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// end ; end ;
2097: LD_VAR 0 2
2101: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2102: GO 2104
2104: DISABLE
2105: LD_INT 0
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
// begin if not mpShipments then
2115: LD_EXP 27
2119: NOT
2120: IFFALSE 2124
// exit ;
2122: GO 2639
// case mpShipments of 1 :
2124: LD_EXP 27
2128: PUSH
2129: LD_INT 1
2131: DOUBLE
2132: EQUAL
2133: IFTRUE 2137
2135: GO 2172
2137: POP
// begin time := 0 0$30 ;
2138: LD_ADDR_VAR 0 4
2142: PUSH
2143: LD_INT 1050
2145: ST_TO_ADDR
// normalTime := 0 0$30 ;
2146: LD_ADDR_VAR 0 6
2150: PUSH
2151: LD_INT 1050
2153: ST_TO_ADDR
// maxTime := 1 1$20 ;
2154: LD_ADDR_VAR 0 8
2158: PUSH
2159: LD_INT 2800
2161: ST_TO_ADDR
// delayTime := 0 0$5 ;
2162: LD_ADDR_VAR 0 7
2166: PUSH
2167: LD_INT 175
2169: ST_TO_ADDR
// end ; 2 :
2170: GO 2302
2172: LD_INT 2
2174: DOUBLE
2175: EQUAL
2176: IFTRUE 2180
2178: GO 2215
2180: POP
// begin time := 0 0$25 ;
2181: LD_ADDR_VAR 0 4
2185: PUSH
2186: LD_INT 875
2188: ST_TO_ADDR
// normalTime := 0 0$25 ;
2189: LD_ADDR_VAR 0 6
2193: PUSH
2194: LD_INT 875
2196: ST_TO_ADDR
// maxTime := 1 1$05 ;
2197: LD_ADDR_VAR 0 8
2201: PUSH
2202: LD_INT 2275
2204: ST_TO_ADDR
// delayTime := 0 0$4 ;
2205: LD_ADDR_VAR 0 7
2209: PUSH
2210: LD_INT 140
2212: ST_TO_ADDR
// end ; 3 :
2213: GO 2302
2215: LD_INT 3
2217: DOUBLE
2218: EQUAL
2219: IFTRUE 2223
2221: GO 2258
2223: POP
// begin time := 0 0$20 ;
2224: LD_ADDR_VAR 0 4
2228: PUSH
2229: LD_INT 700
2231: ST_TO_ADDR
// normalTime := 0 0$20 ;
2232: LD_ADDR_VAR 0 6
2236: PUSH
2237: LD_INT 700
2239: ST_TO_ADDR
// maxTime := 0 0$55 ;
2240: LD_ADDR_VAR 0 8
2244: PUSH
2245: LD_INT 1925
2247: ST_TO_ADDR
// delayTime := 0 0$3 ;
2248: LD_ADDR_VAR 0 7
2252: PUSH
2253: LD_INT 105
2255: ST_TO_ADDR
// end ; 4 :
2256: GO 2302
2258: LD_INT 4
2260: DOUBLE
2261: EQUAL
2262: IFTRUE 2266
2264: GO 2301
2266: POP
// begin time := 0 0$15 ;
2267: LD_ADDR_VAR 0 4
2271: PUSH
2272: LD_INT 525
2274: ST_TO_ADDR
// normalTime := 0 0$15 ;
2275: LD_ADDR_VAR 0 6
2279: PUSH
2280: LD_INT 525
2282: ST_TO_ADDR
// maxTime := 0 0$45 ;
2283: LD_ADDR_VAR 0 8
2287: PUSH
2288: LD_INT 1575
2290: ST_TO_ADDR
// delayTime := 0 0$2 ;
2291: LD_ADDR_VAR 0 7
2295: PUSH
2296: LD_INT 70
2298: ST_TO_ADDR
// end ; end ;
2299: GO 2302
2301: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2302: LD_ADDR_VAR 0 3
2306: PUSH
2307: LD_INT 1
2309: PUSH
2310: LD_INT 2
2312: PUSH
2313: LD_INT 3
2315: PUSH
2316: LD_INT 4
2318: PUSH
2319: LD_INT 5
2321: PUSH
2322: LD_INT 6
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: ST_TO_ADDR
// areas := [ Center1 , Center2 ] ;
2333: LD_ADDR_VAR 0 5
2337: PUSH
2338: LD_INT 7
2340: PUSH
2341: LD_INT 8
2343: PUSH
2344: EMPTY
2345: LIST
2346: LIST
2347: ST_TO_ADDR
// for i := 1 to 8 do
2348: LD_ADDR_VAR 0 1
2352: PUSH
2353: DOUBLE
2354: LD_INT 1
2356: DEC
2357: ST_TO_ADDR
2358: LD_INT 8
2360: PUSH
2361: FOR_TO
2362: IFFALSE 2409
// begin if not mpSidePositions [ i ] then
2364: LD_EXP 7
2368: PUSH
2369: LD_VAR 0 1
2373: ARRAY
2374: NOT
2375: IFFALSE 2379
// continue ;
2377: GO 2361
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2379: LD_ADDR_VAR 0 5
2383: PUSH
2384: LD_VAR 0 5
2388: PUSH
2389: LD_VAR 0 3
2393: PUSH
2394: LD_EXP 7
2398: PUSH
2399: LD_VAR 0 1
2403: ARRAY
2404: ARRAY
2405: ADD
2406: ST_TO_ADDR
// end ;
2407: GO 2361
2409: POP
2410: POP
// x := 1 ;
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// repeat wait ( time ) ;
2419: LD_VAR 0 4
2423: PPUSH
2424: CALL_OW 67
// x := Inc ( x ) ;
2428: LD_ADDR_VAR 0 2
2432: PUSH
2433: LD_VAR 0 2
2437: PPUSH
2438: CALL 49553 0 1
2442: ST_TO_ADDR
// if x > 5 then
2443: LD_VAR 0 2
2447: PUSH
2448: LD_INT 5
2450: GREATER
2451: IFFALSE 2461
// x := 1 ;
2453: LD_ADDR_VAR 0 2
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// for i in areas do
2461: LD_ADDR_VAR 0 1
2465: PUSH
2466: LD_VAR 0 5
2470: PUSH
2471: FOR_IN
2472: IFFALSE 2511
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2474: LD_VAR 0 1
2478: PPUSH
2479: LD_INT 1
2481: PPUSH
2482: CALL_OW 287
2486: PUSH
2487: LD_INT 30
2489: LESS
2490: IFFALSE 2509
// begin CreateCratesArea ( x , i , true ) ;
2492: LD_VAR 0 2
2496: PPUSH
2497: LD_VAR 0 1
2501: PPUSH
2502: LD_INT 1
2504: PPUSH
2505: CALL_OW 55
// end ; end ;
2509: GO 2471
2511: POP
2512: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2513: LD_INT 51
2515: PPUSH
2516: LD_INT 1
2518: PPUSH
2519: CALL_OW 287
2523: PUSH
2524: LD_INT 0
2526: EQUAL
2527: IFFALSE 2566
// begin for i := 1 to 4 do
2529: LD_ADDR_VAR 0 1
2533: PUSH
2534: DOUBLE
2535: LD_INT 1
2537: DEC
2538: ST_TO_ADDR
2539: LD_INT 4
2541: PUSH
2542: FOR_TO
2543: IFFALSE 2562
// CreateCratesArea ( x , CenterArea , true ) ;
2545: LD_VAR 0 2
2549: PPUSH
2550: LD_INT 51
2552: PPUSH
2553: LD_INT 1
2555: PPUSH
2556: CALL_OW 55
2560: GO 2542
2562: POP
2563: POP
// end else
2564: GO 2597
// if GetResourceArea ( CenterArea , mat_cans ) < 40 then
2566: LD_INT 51
2568: PPUSH
2569: LD_INT 1
2571: PPUSH
2572: CALL_OW 287
2576: PUSH
2577: LD_INT 40
2579: LESS
2580: IFFALSE 2597
// CreateCratesArea ( x , CenterArea , true ) ;
2582: LD_VAR 0 2
2586: PPUSH
2587: LD_INT 51
2589: PPUSH
2590: LD_INT 1
2592: PPUSH
2593: CALL_OW 55
// time := time + delayTime ;
2597: LD_ADDR_VAR 0 4
2601: PUSH
2602: LD_VAR 0 4
2606: PUSH
2607: LD_VAR 0 7
2611: PLUS
2612: ST_TO_ADDR
// if time > maxTime then
2613: LD_VAR 0 4
2617: PUSH
2618: LD_VAR 0 8
2622: GREATER
2623: IFFALSE 2635
// time := normalTime ;
2625: LD_ADDR_VAR 0 4
2629: PUSH
2630: LD_VAR 0 6
2634: ST_TO_ADDR
// until false ;
2635: LD_INT 0
2637: IFFALSE 2419
// end ; end_of_file
2639: PPOPN 8
2641: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2642: LD_VAR 0 1
2646: PPUSH
2647: CALL 53697 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2651: LD_VAR 0 1
2655: PPUSH
2656: CALL 7874 0 1
// end ;
2660: PPOPN 1
2662: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: CALL 53714 0 1
// end ;
2672: PPOPN 1
2674: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2675: LD_VAR 0 1
2679: PPUSH
2680: CALL 8581 0 1
2684: PPOPN 1
2686: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2687: LD_VAR 0 1
2691: PPUSH
2692: LD_VAR 0 2
2696: PPUSH
2697: CALL 53755 0 2
2701: PPOPN 2
2703: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2704: LD_VAR 0 1
2708: PPUSH
2709: LD_VAR 0 2
2713: PPUSH
2714: LD_VAR 0 3
2718: PPUSH
2719: CALL 8634 0 3
2723: PPOPN 3
2725: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2726: LD_INT 0
2728: PPUSH
2729: PPUSH
// disable ( mpActive ) ;
2730: LD_INT 100
2732: DISABLE_MARKED
// disable ( mpWin ) ;
2733: LD_INT 101
2735: DISABLE_MARKED
// disable ( mpLose ) ;
2736: LD_INT 102
2738: DISABLE_MARKED
// mpGameType := 0 ;
2739: LD_ADDR_EXP 3
2743: PUSH
2744: LD_INT 0
2746: ST_TO_ADDR
// mpGameSettings := [ ] ;
2747: LD_ADDR_EXP 6
2751: PUSH
2752: EMPTY
2753: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2754: LD_ADDR_EXP 4
2758: PUSH
2759: EMPTY
2760: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2761: LD_ADDR_EXP 5
2765: PUSH
2766: EMPTY
2767: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2768: LD_ADDR_EXP 29
2772: PUSH
2773: LD_INT 2
2775: PUSH
2776: LD_INT 2
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2783: LD_ADDR_EXP 12
2787: PUSH
2788: EMPTY
2789: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2790: LD_ADDR_EXP 13
2794: PUSH
2795: EMPTY
2796: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2797: LD_ADDR_EXP 41
2801: PUSH
2802: EMPTY
2803: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2804: LD_ADDR_EXP 42
2808: PUSH
2809: EMPTY
2810: ST_TO_ADDR
// mpDepots := [ ] ;
2811: LD_ADDR_EXP 14
2815: PUSH
2816: EMPTY
2817: ST_TO_ADDR
// mpBuildings := [ ] ;
2818: LD_ADDR_EXP 17
2822: PUSH
2823: EMPTY
2824: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2825: LD_ADDR_EXP 18
2829: PUSH
2830: EMPTY
2831: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2832: LD_ADDR_EXP 19
2836: PUSH
2837: EMPTY
2838: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2839: LD_ADDR_EXP 20
2843: PUSH
2844: EMPTY
2845: ST_TO_ADDR
// mpStartingResources := [ ] ;
2846: LD_ADDR_EXP 15
2850: PUSH
2851: EMPTY
2852: ST_TO_ADDR
// mpStartPos := [ ] ;
2853: LD_ADDR_EXP 21
2857: PUSH
2858: EMPTY
2859: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2860: LD_ADDR_EXP 22
2864: PUSH
2865: LD_INT 1
2867: NEG
2868: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2869: LD_ADDR_EXP 23
2873: PUSH
2874: EMPTY
2875: ST_TO_ADDR
// mpApemans := [ ] ;
2876: LD_ADDR_EXP 30
2880: PUSH
2881: EMPTY
2882: ST_TO_ADDR
// mpApemansArea := [ ] ;
2883: LD_ADDR_EXP 31
2887: PUSH
2888: EMPTY
2889: ST_TO_ADDR
// mpRespawn := [ ] ;
2890: LD_ADDR_EXP 33
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// mpKingArea := 0 ;
2897: LD_ADDR_EXP 34
2901: PUSH
2902: LD_INT 0
2904: ST_TO_ADDR
// mpPoints := [ ] ;
2905: LD_ADDR_EXP 35
2909: PUSH
2910: EMPTY
2911: ST_TO_ADDR
// mpVehicles := 0 ;
2912: LD_ADDR_EXP 36
2916: PUSH
2917: LD_INT 0
2919: ST_TO_ADDR
// mpShipments := 0 ;
2920: LD_ADDR_EXP 27
2924: PUSH
2925: LD_INT 0
2927: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2928: LD_ADDR_EXP 40
2932: PUSH
2933: EMPTY
2934: PUSH
2935: EMPTY
2936: PUSH
2937: EMPTY
2938: PUSH
2939: EMPTY
2940: PUSH
2941: EMPTY
2942: PUSH
2943: EMPTY
2944: PUSH
2945: EMPTY
2946: PUSH
2947: EMPTY
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2959: LD_ADDR_EXP 32
2963: PUSH
2964: EMPTY
2965: PUSH
2966: EMPTY
2967: PUSH
2968: EMPTY
2969: PUSH
2970: EMPTY
2971: PUSH
2972: EMPTY
2973: PUSH
2974: EMPTY
2975: PUSH
2976: EMPTY
2977: PUSH
2978: EMPTY
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: ST_TO_ADDR
// mpEmissions := 0 ;
2990: LD_ADDR_EXP 37
2994: PUSH
2995: LD_INT 0
2997: ST_TO_ADDR
// mpTeleports := 0 ;
2998: LD_ADDR_EXP 43
3002: PUSH
3003: LD_INT 0
3005: ST_TO_ADDR
// mpArtifacts := 0 ;
3006: LD_ADDR_EXP 44
3010: PUSH
3011: LD_INT 0
3013: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3014: LD_ADDR_EXP 25
3018: PUSH
3019: LD_INT 3
3021: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3022: LD_ADDR_EXP 24
3026: PUSH
3027: LD_INT 15
3029: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3030: LD_ADDR_EXP 38
3034: PUSH
3035: LD_INT 0
3037: ST_TO_ADDR
// mpGameActive := false ;
3038: LD_ADDR_EXP 39
3042: PUSH
3043: LD_INT 0
3045: ST_TO_ADDR
// mpBlockRespThread := false ;
3046: LD_ADDR_EXP 45
3050: PUSH
3051: LD_INT 0
3053: ST_TO_ADDR
// for i := 1 to 32 do
3054: LD_ADDR_VAR 0 2
3058: PUSH
3059: DOUBLE
3060: LD_INT 1
3062: DEC
3063: ST_TO_ADDR
3064: LD_INT 32
3066: PUSH
3067: FOR_TO
3068: IFFALSE 3095
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3070: LD_ADDR_EXP 6
3074: PUSH
3075: LD_EXP 6
3079: PPUSH
3080: LD_VAR 0 2
3084: PPUSH
3085: LD_INT 0
3087: PPUSH
3088: CALL_OW 1
3092: ST_TO_ADDR
3093: GO 3067
3095: POP
3096: POP
// end ;
3097: LD_VAR 0 1
3101: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3102: LD_INT 0
3104: PPUSH
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
3110: PPUSH
3111: PPUSH
3112: PPUSH
3113: PPUSH
3114: PPUSH
3115: PPUSH
3116: PPUSH
3117: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3118: LD_ADDR_VAR 0 14
3122: PUSH
3123: LD_INT 1
3125: PUSH
3126: LD_INT 2
3128: PUSH
3129: LD_INT 3
3131: PUSH
3132: LD_INT 5
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: ST_TO_ADDR
// for i in gameTypes do
3141: LD_ADDR_VAR 0 2
3145: PUSH
3146: LD_VAR 0 14
3150: PUSH
3151: FOR_IN
3152: IFFALSE 3161
// disable ( i ) ;
3154: LD_VAR 0 2
3158: DISABLE_MARKED
3159: GO 3151
3161: POP
3162: POP
// if Multiplayer then
3163: LD_OWVAR 4
3167: IFFALSE 3351
// begin mpGameType := mp_game_type ;
3169: LD_ADDR_EXP 3
3173: PUSH
3174: LD_OWVAR 6
3178: ST_TO_ADDR
// your_side := mp_player_side ;
3179: LD_ADDR_OWVAR 2
3183: PUSH
3184: LD_OWVAR 7
3188: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3189: LD_ADDR_EXP 7
3193: PUSH
3194: LD_OWVAR 17
3198: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3199: LD_ADDR_EXP 8
3203: PUSH
3204: LD_OWVAR 15
3208: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3209: LD_ADDR_EXP 9
3213: PUSH
3214: LD_OWVAR 16
3218: ST_TO_ADDR
// mpTeams := mp_teams ;
3219: LD_ADDR_EXP 10
3223: PUSH
3224: LD_OWVAR 12
3228: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3229: LD_ADDR_VAR 0 2
3233: PUSH
3234: DOUBLE
3235: LD_INT 1
3237: DEC
3238: ST_TO_ADDR
3239: LD_EXP 4
3243: PPUSH
3244: CALL 12248 0 1
3248: PUSH
3249: FOR_TO
3250: IFFALSE 3326
// begin setting := mpGameSettingsKeys [ i ] ;
3252: LD_ADDR_VAR 0 12
3256: PUSH
3257: LD_EXP 4
3261: PUSH
3262: LD_VAR 0 2
3266: ARRAY
3267: ST_TO_ADDR
// if setting then
3268: LD_VAR 0 12
3272: IFFALSE 3324
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3274: LD_ADDR_EXP 6
3278: PUSH
3279: LD_EXP 6
3283: PPUSH
3284: LD_VAR 0 2
3288: PPUSH
3289: LD_EXP 5
3293: PUSH
3294: LD_VAR 0 2
3298: ARRAY
3299: PUSH
3300: LD_VAR 0 2
3304: PUSH
3305: LD_INT 1
3307: MINUS
3308: PPUSH
3309: CALL_OW 426
3313: PUSH
3314: LD_INT 1
3316: PLUS
3317: ARRAY
3318: PPUSH
3319: CALL_OW 1
3323: ST_TO_ADDR
// end ;
3324: GO 3249
3326: POP
3327: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3328: LD_ADDR_EXP 11
3332: PUSH
3333: LD_EXP 8
3337: PUSH
3338: LD_INT 0
3340: PUSH
3341: EMPTY
3342: LIST
3343: DIFF
3344: PUSH
3345: LD_INT 1
3347: GREATER
3348: ST_TO_ADDR
// end else
3349: GO 3351
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3351: LD_EXP 3
3355: PPUSH
3356: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3360: LD_EXP 18
3364: PPUSH
3365: CALL 12248 0 1
3369: IFFALSE 3400
// begin for i in mpMarkedAreas do
3371: LD_ADDR_VAR 0 2
3375: PUSH
3376: LD_EXP 18
3380: PUSH
3381: FOR_IN
3382: IFFALSE 3398
// SetAreaMapShow ( i , 0 ) ;
3384: LD_VAR 0 2
3388: PPUSH
3389: LD_INT 0
3391: PPUSH
3392: CALL_OW 424
3396: GO 3381
3398: POP
3399: POP
// end ; for i := 1 to 8 do
3400: LD_ADDR_VAR 0 2
3404: PUSH
3405: DOUBLE
3406: LD_INT 1
3408: DEC
3409: ST_TO_ADDR
3410: LD_INT 8
3412: PUSH
3413: FOR_TO
3414: IFFALSE 4750
// begin if not mpSidePositions [ i ] then
3416: LD_EXP 7
3420: PUSH
3421: LD_VAR 0 2
3425: ARRAY
3426: NOT
3427: IFFALSE 3431
// continue ;
3429: GO 3413
// side := i ;
3431: LD_ADDR_VAR 0 7
3435: PUSH
3436: LD_VAR 0 2
3440: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3441: LD_ADDR_VAR 0 9
3445: PUSH
3446: LD_EXP 9
3450: PUSH
3451: LD_VAR 0 2
3455: ARRAY
3456: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3457: LD_ADDR_VAR 0 8
3461: PUSH
3462: LD_EXP 7
3466: PUSH
3467: LD_VAR 0 2
3471: ARRAY
3472: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3473: LD_EXP 12
3477: PPUSH
3478: CALL 12248 0 1
3482: IFFALSE 3559
// begin for j in mpOilDeposits [ pos ] do
3484: LD_ADDR_VAR 0 3
3488: PUSH
3489: LD_EXP 12
3493: PUSH
3494: LD_VAR 0 8
3498: ARRAY
3499: PUSH
3500: FOR_IN
3501: IFFALSE 3557
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3503: LD_VAR 0 3
3507: PUSH
3508: LD_INT 1
3510: ARRAY
3511: PPUSH
3512: LD_VAR 0 3
3516: PUSH
3517: LD_INT 2
3519: ARRAY
3520: PPUSH
3521: LD_INT 2
3523: PPUSH
3524: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3528: LD_VAR 0 3
3532: PUSH
3533: LD_INT 1
3535: ARRAY
3536: PPUSH
3537: LD_VAR 0 3
3541: PUSH
3542: LD_INT 2
3544: ARRAY
3545: PPUSH
3546: LD_VAR 0 7
3550: PPUSH
3551: CALL_OW 441
// end ;
3555: GO 3500
3557: POP
3558: POP
// end ; if Count ( mpSibDeposits ) then
3559: LD_EXP 13
3563: PPUSH
3564: CALL 12248 0 1
3568: IFFALSE 3645
// begin for j in mpSibDeposits [ pos ] do
3570: LD_ADDR_VAR 0 3
3574: PUSH
3575: LD_EXP 13
3579: PUSH
3580: LD_VAR 0 8
3584: ARRAY
3585: PUSH
3586: FOR_IN
3587: IFFALSE 3643
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3589: LD_VAR 0 3
3593: PUSH
3594: LD_INT 1
3596: ARRAY
3597: PPUSH
3598: LD_VAR 0 3
3602: PUSH
3603: LD_INT 2
3605: ARRAY
3606: PPUSH
3607: LD_INT 3
3609: PPUSH
3610: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3614: LD_VAR 0 3
3618: PUSH
3619: LD_INT 1
3621: ARRAY
3622: PPUSH
3623: LD_VAR 0 3
3627: PUSH
3628: LD_INT 2
3630: ARRAY
3631: PPUSH
3632: LD_VAR 0 7
3636: PPUSH
3637: CALL_OW 441
// end ;
3641: GO 3586
3643: POP
3644: POP
// end ; InitBc ;
3645: CALL_OW 21
// InitUc ;
3649: CALL_OW 18
// uc_side := side ;
3653: LD_ADDR_OWVAR 20
3657: PUSH
3658: LD_VAR 0 7
3662: ST_TO_ADDR
// uc_nation := nation ;
3663: LD_ADDR_OWVAR 21
3667: PUSH
3668: LD_VAR 0 9
3672: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3673: LD_EXP 22
3677: PUSH
3678: LD_INT 1
3680: NEG
3681: GREATER
3682: IFFALSE 3841
// begin x := mpStartPos [ pos ] [ 1 ] ;
3684: LD_ADDR_VAR 0 5
3688: PUSH
3689: LD_EXP 21
3693: PUSH
3694: LD_VAR 0 8
3698: ARRAY
3699: PUSH
3700: LD_INT 1
3702: ARRAY
3703: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3704: LD_ADDR_VAR 0 6
3708: PUSH
3709: LD_EXP 21
3713: PUSH
3714: LD_VAR 0 8
3718: ARRAY
3719: PUSH
3720: LD_INT 2
3722: ARRAY
3723: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3724: LD_VAR 0 5
3728: PPUSH
3729: LD_VAR 0 6
3733: PPUSH
3734: LD_INT 12
3736: PPUSH
3737: LD_INT 2
3739: PPUSH
3740: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3744: LD_ADDR_EXP 23
3748: PUSH
3749: LD_EXP 23
3753: PPUSH
3754: LD_VAR 0 7
3758: PPUSH
3759: LD_VAR 0 7
3763: PPUSH
3764: LD_VAR 0 5
3768: PPUSH
3769: LD_VAR 0 6
3773: PPUSH
3774: LD_INT 1
3776: PUSH
3777: LD_INT 100
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: LD_INT 70
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 3
3796: PUSH
3797: LD_INT 40
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PUSH
3804: LD_INT 10
3806: PUSH
3807: LD_INT 25
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 20
3816: PUSH
3817: LD_INT 100
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: PPUSH
3831: CALL_OW 418
3835: PPUSH
3836: CALL_OW 1
3840: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3841: LD_EXP 14
3845: PPUSH
3846: CALL 12248 0 1
3850: IFFALSE 4034
// begin if mpGameType = GameTypeSurvival then
3852: LD_EXP 3
3856: PUSH
3857: LD_INT 2
3859: EQUAL
3860: IFFALSE 3880
// begin bc_level := 10 ;
3862: LD_ADDR_OWVAR 43
3866: PUSH
3867: LD_INT 10
3869: ST_TO_ADDR
// bc_type := b_warehouse ;
3870: LD_ADDR_OWVAR 42
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// end else
3878: GO 3896
// begin bc_level := 0 ;
3880: LD_ADDR_OWVAR 43
3884: PUSH
3885: LD_INT 0
3887: ST_TO_ADDR
// bc_type := b_depot ;
3888: LD_ADDR_OWVAR 42
3892: PUSH
3893: LD_INT 0
3895: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3896: LD_ADDR_VAR 0 4
3900: PUSH
3901: LD_EXP 14
3905: PUSH
3906: LD_VAR 0 8
3910: ARRAY
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: PPUSH
3916: LD_EXP 14
3920: PUSH
3921: LD_VAR 0 8
3925: ARRAY
3926: PUSH
3927: LD_INT 2
3929: ARRAY
3930: PPUSH
3931: LD_EXP 14
3935: PUSH
3936: LD_VAR 0 8
3940: ARRAY
3941: PUSH
3942: LD_INT 3
3944: ARRAY
3945: PPUSH
3946: CALL_OW 47
3950: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3951: LD_VAR 0 4
3955: PPUSH
3956: LD_STRING @
3958: PUSH
3959: LD_VAR 0 7
3963: STR
3964: PPUSH
3965: CALL_OW 500
// if Count ( mpStartingResources ) then
3969: LD_EXP 15
3973: PPUSH
3974: CALL 12248 0 1
3978: IFFALSE 4032
// begin for j := 1 to mpStartingResources do
3980: LD_ADDR_VAR 0 3
3984: PUSH
3985: DOUBLE
3986: LD_INT 1
3988: DEC
3989: ST_TO_ADDR
3990: LD_EXP 15
3994: PUSH
3995: FOR_TO
3996: IFFALSE 4030
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3998: LD_VAR 0 4
4002: PPUSH
4003: CALL_OW 274
4007: PPUSH
4008: LD_VAR 0 3
4012: PPUSH
4013: LD_EXP 15
4017: PUSH
4018: LD_VAR 0 3
4022: ARRAY
4023: PPUSH
4024: CALL_OW 277
4028: GO 3995
4030: POP
4031: POP
// end ; end else
4032: GO 4241
// if Count ( mpStartingResources ) then
4034: LD_EXP 15
4038: PPUSH
4039: CALL 12248 0 1
4043: IFFALSE 4241
// begin x := mpStartPos [ pos ] [ 1 ] ;
4045: LD_ADDR_VAR 0 5
4049: PUSH
4050: LD_EXP 21
4054: PUSH
4055: LD_VAR 0 8
4059: ARRAY
4060: PUSH
4061: LD_INT 1
4063: ARRAY
4064: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4065: LD_ADDR_VAR 0 6
4069: PUSH
4070: LD_EXP 21
4074: PUSH
4075: LD_VAR 0 8
4079: ARRAY
4080: PUSH
4081: LD_INT 2
4083: ARRAY
4084: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4085: LD_ADDR_VAR 0 3
4089: PUSH
4090: DOUBLE
4091: LD_INT 1
4093: DEC
4094: ST_TO_ADDR
4095: LD_EXP 15
4099: PUSH
4100: FOR_TO
4101: IFFALSE 4239
// begin resources := mpStartingResources [ j ] ;
4103: LD_ADDR_VAR 0 13
4107: PUSH
4108: LD_EXP 15
4112: PUSH
4113: LD_VAR 0 3
4117: ARRAY
4118: ST_TO_ADDR
// if resources = 0 then
4119: LD_VAR 0 13
4123: PUSH
4124: LD_INT 0
4126: EQUAL
4127: IFFALSE 4131
// continue ;
4129: GO 4100
// repeat if resources >= 50 then
4131: LD_VAR 0 13
4135: PUSH
4136: LD_INT 50
4138: GREATEREQUAL
4139: IFFALSE 4185
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4141: LD_VAR 0 3
4145: PPUSH
4146: LD_INT 5
4148: PPUSH
4149: LD_VAR 0 5
4153: PPUSH
4154: LD_VAR 0 6
4158: PPUSH
4159: LD_INT 6
4161: PPUSH
4162: LD_INT 0
4164: PPUSH
4165: CALL_OW 60
// resources := resources - 50 ;
4169: LD_ADDR_VAR 0 13
4173: PUSH
4174: LD_VAR 0 13
4178: PUSH
4179: LD_INT 50
4181: MINUS
4182: ST_TO_ADDR
// end else
4183: GO 4227
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4185: LD_VAR 0 3
4189: PPUSH
4190: LD_VAR 0 13
4194: PUSH
4195: LD_INT 10
4197: DIV
4198: PPUSH
4199: LD_VAR 0 5
4203: PPUSH
4204: LD_VAR 0 6
4208: PPUSH
4209: LD_INT 6
4211: PPUSH
4212: LD_INT 0
4214: PPUSH
4215: CALL_OW 60
// resources := 0 ;
4219: LD_ADDR_VAR 0 13
4223: PUSH
4224: LD_INT 0
4226: ST_TO_ADDR
// end ; until resources <= 0 ;
4227: LD_VAR 0 13
4231: PUSH
4232: LD_INT 0
4234: LESSEQUAL
4235: IFFALSE 4131
// end ;
4237: GO 4100
4239: POP
4240: POP
// end ; if Count ( mpBuildings ) then
4241: LD_EXP 17
4245: PPUSH
4246: CALL 12248 0 1
4250: IFFALSE 4328
// begin for j in mpBuildings [ pos ] do
4252: LD_ADDR_VAR 0 3
4256: PUSH
4257: LD_EXP 17
4261: PUSH
4262: LD_VAR 0 8
4266: ARRAY
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4326
// begin bc_level := 0 ;
4271: LD_ADDR_OWVAR 43
4275: PUSH
4276: LD_INT 0
4278: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4279: LD_ADDR_OWVAR 42
4283: PUSH
4284: LD_VAR 0 3
4288: PUSH
4289: LD_INT 1
4291: ARRAY
4292: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4293: LD_VAR 0 3
4297: PUSH
4298: LD_INT 2
4300: ARRAY
4301: PPUSH
4302: LD_VAR 0 3
4306: PUSH
4307: LD_INT 3
4309: ARRAY
4310: PPUSH
4311: LD_VAR 0 3
4315: PUSH
4316: LD_INT 4
4318: ARRAY
4319: PPUSH
4320: CALL_OW 47
// end ;
4324: GO 4268
4326: POP
4327: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4328: LD_EXP 26
4332: IFFALSE 4352
4334: PUSH
4335: LD_INT 20
4337: PPUSH
4338: LD_VAR 0 7
4342: PPUSH
4343: CALL_OW 321
4347: PUSH
4348: LD_INT 1
4350: EQUAL
4351: AND
4352: IFFALSE 4369
// SetTech ( tech_SibDet , side , state_researched ) ;
4354: LD_INT 20
4356: PPUSH
4357: LD_VAR 0 7
4361: PPUSH
4362: LD_INT 2
4364: PPUSH
4365: CALL_OW 322
// if not mpArtifacts then
4369: LD_EXP 44
4373: NOT
4374: IFFALSE 4391
// SetTech ( tech_artifact , side , state_disabled ) ;
4376: LD_INT 24
4378: PPUSH
4379: LD_VAR 0 7
4383: PPUSH
4384: LD_INT 0
4386: PPUSH
4387: CALL_OW 322
// if mpSibBomb = 1 then
4391: LD_EXP 28
4395: PUSH
4396: LD_INT 1
4398: EQUAL
4399: IFFALSE 4418
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4401: LD_INT 25
4403: PPUSH
4404: LD_VAR 0 7
4408: PPUSH
4409: LD_INT 1
4411: PPUSH
4412: CALL_OW 322
// end else
4416: GO 4433
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4418: LD_INT 25
4420: PPUSH
4421: LD_VAR 0 7
4425: PPUSH
4426: LD_INT 0
4428: PPUSH
4429: CALL_OW 322
// end ; if mpVehicles then
4433: LD_EXP 36
4437: IFFALSE 4536
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4439: LD_ADDR_VAR 0 3
4443: PUSH
4444: LD_VAR 0 7
4448: PPUSH
4449: LD_VAR 0 9
4453: PPUSH
4454: LD_EXP 36
4458: PPUSH
4459: CALL 5660 0 3
4463: PUSH
4464: FOR_IN
4465: IFFALSE 4534
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4467: LD_VAR 0 3
4471: PPUSH
4472: LD_INT 0
4474: PPUSH
4475: LD_INT 5
4477: PPUSH
4478: CALL_OW 12
4482: PPUSH
4483: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4487: LD_VAR 0 3
4491: PPUSH
4492: LD_EXP 21
4496: PUSH
4497: LD_VAR 0 8
4501: ARRAY
4502: PUSH
4503: LD_INT 1
4505: ARRAY
4506: PPUSH
4507: LD_EXP 21
4511: PUSH
4512: LD_VAR 0 8
4516: ARRAY
4517: PUSH
4518: LD_INT 2
4520: ARRAY
4521: PPUSH
4522: LD_INT 12
4524: PPUSH
4525: LD_INT 0
4527: PPUSH
4528: CALL_OW 50
// end ;
4532: GO 4464
4534: POP
4535: POP
// end ; uc_nation := nation ;
4536: LD_ADDR_OWVAR 21
4540: PUSH
4541: LD_VAR 0 9
4545: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4546: LD_ADDR_VAR 0 11
4550: PUSH
4551: LD_VAR 0 7
4555: PPUSH
4556: LD_VAR 0 9
4560: PPUSH
4561: LD_EXP 24
4565: PPUSH
4566: LD_EXP 25
4570: PPUSH
4571: CALL 5162 0 4
4575: ST_TO_ADDR
// for j in team do
4576: LD_ADDR_VAR 0 3
4580: PUSH
4581: LD_VAR 0 11
4585: PUSH
4586: FOR_IN
4587: IFFALSE 4636
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4589: LD_VAR 0 3
4593: PPUSH
4594: LD_EXP 21
4598: PUSH
4599: LD_VAR 0 8
4603: ARRAY
4604: PUSH
4605: LD_INT 1
4607: ARRAY
4608: PPUSH
4609: LD_EXP 21
4613: PUSH
4614: LD_VAR 0 8
4618: ARRAY
4619: PUSH
4620: LD_INT 2
4622: ARRAY
4623: PPUSH
4624: LD_INT 12
4626: PPUSH
4627: LD_INT 0
4629: PPUSH
4630: CALL_OW 50
4634: GO 4586
4636: POP
4637: POP
// if mpApemans then
4638: LD_EXP 30
4642: IFFALSE 4748
// begin for j := 1 to mpApemans do
4644: LD_ADDR_VAR 0 3
4648: PUSH
4649: DOUBLE
4650: LD_INT 1
4652: DEC
4653: ST_TO_ADDR
4654: LD_EXP 30
4658: PUSH
4659: FOR_TO
4660: IFFALSE 4746
// begin PrepareApeman ( - 5 ) ;
4662: LD_INT 5
4664: NEG
4665: PPUSH
4666: CALL 44307 0 1
// ape := CreateHuman ;
4670: LD_ADDR_VAR 0 10
4674: PUSH
4675: CALL_OW 44
4679: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4680: LD_ADDR_EXP 32
4684: PUSH
4685: LD_EXP 32
4689: PPUSH
4690: LD_VAR 0 8
4694: PPUSH
4695: LD_EXP 32
4699: PUSH
4700: LD_VAR 0 8
4704: ARRAY
4705: PPUSH
4706: LD_VAR 0 10
4710: PPUSH
4711: CALL 48180 0 2
4715: PPUSH
4716: CALL_OW 1
4720: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4721: LD_VAR 0 10
4725: PPUSH
4726: LD_EXP 31
4730: PUSH
4731: LD_VAR 0 8
4735: ARRAY
4736: PPUSH
4737: LD_INT 0
4739: PPUSH
4740: CALL_OW 49
// end ;
4744: GO 4659
4746: POP
4747: POP
// end ; end ;
4748: GO 3413
4750: POP
4751: POP
// if not mpTeamGame then
4752: LD_EXP 11
4756: NOT
4757: IFFALSE 4855
// begin for i := 1 to 8 do
4759: LD_ADDR_VAR 0 2
4763: PUSH
4764: DOUBLE
4765: LD_INT 1
4767: DEC
4768: ST_TO_ADDR
4769: LD_INT 8
4771: PUSH
4772: FOR_TO
4773: IFFALSE 4851
// for j := 1 to 8 do
4775: LD_ADDR_VAR 0 3
4779: PUSH
4780: DOUBLE
4781: LD_INT 1
4783: DEC
4784: ST_TO_ADDR
4785: LD_INT 8
4787: PUSH
4788: FOR_TO
4789: IFFALSE 4847
// if i <> j then
4791: LD_VAR 0 2
4795: PUSH
4796: LD_VAR 0 3
4800: NONEQUAL
4801: IFFALSE 4825
// SetAttitude ( i , j , att_neutral , true ) else
4803: LD_VAR 0 2
4807: PPUSH
4808: LD_VAR 0 3
4812: PPUSH
4813: LD_INT 0
4815: PPUSH
4816: LD_INT 1
4818: PPUSH
4819: CALL_OW 80
4823: GO 4845
// SetAttitude ( i , j , att_friend , true ) ;
4825: LD_VAR 0 2
4829: PPUSH
4830: LD_VAR 0 3
4834: PPUSH
4835: LD_INT 1
4837: PPUSH
4838: LD_INT 1
4840: PPUSH
4841: CALL_OW 80
4845: GO 4788
4847: POP
4848: POP
4849: GO 4772
4851: POP
4852: POP
// end else
4853: GO 5030
// begin if mpSharedVision then
4855: LD_EXP 16
4859: IFFALSE 4924
// begin for i in mpTeams do
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: LD_EXP 10
4870: PUSH
4871: FOR_IN
4872: IFFALSE 4922
// for j := 2 to i do
4874: LD_ADDR_VAR 0 3
4878: PUSH
4879: DOUBLE
4880: LD_INT 2
4882: DEC
4883: ST_TO_ADDR
4884: LD_VAR 0 2
4888: PUSH
4889: FOR_TO
4890: IFFALSE 4918
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4892: LD_VAR 0 2
4896: PUSH
4897: LD_VAR 0 3
4901: ARRAY
4902: PPUSH
4903: LD_VAR 0 2
4907: PUSH
4908: LD_INT 1
4910: ARRAY
4911: PPUSH
4912: CALL_OW 343
4916: GO 4889
4918: POP
4919: POP
4920: GO 4871
4922: POP
4923: POP
// end ; for i := 1 to 8 do
4924: LD_ADDR_VAR 0 2
4928: PUSH
4929: DOUBLE
4930: LD_INT 1
4932: DEC
4933: ST_TO_ADDR
4934: LD_INT 8
4936: PUSH
4937: FOR_TO
4938: IFFALSE 5028
// for j := 1 to 8 do
4940: LD_ADDR_VAR 0 3
4944: PUSH
4945: DOUBLE
4946: LD_INT 1
4948: DEC
4949: ST_TO_ADDR
4950: LD_INT 8
4952: PUSH
4953: FOR_TO
4954: IFFALSE 5024
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4956: LD_EXP 8
4960: PUSH
4961: LD_VAR 0 2
4965: ARRAY
4966: PUSH
4967: LD_EXP 8
4971: PUSH
4972: LD_VAR 0 3
4976: ARRAY
4977: EQUAL
4978: IFFALSE 5002
// SetAttitude ( i , j , att_friend , true ) else
4980: LD_VAR 0 2
4984: PPUSH
4985: LD_VAR 0 3
4989: PPUSH
4990: LD_INT 1
4992: PPUSH
4993: LD_INT 1
4995: PPUSH
4996: CALL_OW 80
5000: GO 5022
// SetAttitude ( i , j , att_enemy , true ) ;
5002: LD_VAR 0 2
5006: PPUSH
5007: LD_VAR 0 3
5011: PPUSH
5012: LD_INT 2
5014: PPUSH
5015: LD_INT 1
5017: PPUSH
5018: CALL_OW 80
5022: GO 4953
5024: POP
5025: POP
5026: GO 4937
5028: POP
5029: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5030: LD_ADDR_OWVAR 71
5034: PUSH
5035: LD_EXP 9
5039: PUSH
5040: LD_OWVAR 2
5044: ARRAY
5045: ST_TO_ADDR
// if IAmSpec then
5046: CALL_OW 531
5050: IFFALSE 5091
// begin FogOff ( true ) ;
5052: LD_INT 1
5054: PPUSH
5055: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5059: LD_EXP 29
5063: PUSH
5064: LD_INT 1
5066: ARRAY
5067: PUSH
5068: LD_INT 2
5070: DIV
5071: PPUSH
5072: LD_EXP 29
5076: PUSH
5077: LD_INT 2
5079: ARRAY
5080: PUSH
5081: LD_INT 2
5083: DIV
5084: PPUSH
5085: CALL_OW 86
// end else
5089: GO 5137
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5091: LD_EXP 21
5095: PUSH
5096: LD_EXP 7
5100: PUSH
5101: LD_OWVAR 2
5105: ARRAY
5106: ARRAY
5107: PUSH
5108: LD_INT 1
5110: ARRAY
5111: PPUSH
5112: LD_EXP 21
5116: PUSH
5117: LD_EXP 7
5121: PUSH
5122: LD_OWVAR 2
5126: ARRAY
5127: ARRAY
5128: PUSH
5129: LD_INT 2
5131: ARRAY
5132: PPUSH
5133: CALL_OW 86
// end ; BeginBuildUp ;
5137: CALL 6193 0 0
// enable ( mpActive ) ;
5141: LD_INT 100
5143: ENABLE_MARKED
// enable ( mpGameType ) ;
5144: LD_EXP 3
5148: ENABLE_MARKED
// mpGameActive := true ;
5149: LD_ADDR_EXP 39
5153: PUSH
5154: LD_INT 1
5156: ST_TO_ADDR
// end ;
5157: LD_VAR 0 1
5161: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
5167: PPUSH
// result := [ ] ;
5168: LD_ADDR_VAR 0 5
5172: PUSH
5173: EMPTY
5174: ST_TO_ADDR
// class := class_soldier ;
5175: LD_ADDR_VAR 0 8
5179: PUSH
5180: LD_INT 1
5182: ST_TO_ADDR
// uc_side := side ;
5183: LD_ADDR_OWVAR 20
5187: PUSH
5188: LD_VAR 0 1
5192: ST_TO_ADDR
// uc_nation := nation ;
5193: LD_ADDR_OWVAR 21
5197: PUSH
5198: LD_VAR 0 2
5202: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5203: LD_ADDR_OWVAR 26
5207: PUSH
5208: LD_OWVAR 19
5212: PUSH
5213: LD_VAR 0 1
5217: ARRAY
5218: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5219: LD_INT 1
5221: PPUSH
5222: LD_INT 2
5224: PPUSH
5225: CALL_OW 12
5229: PPUSH
5230: LD_VAR 0 8
5234: PPUSH
5235: LD_VAR 0 4
5239: PUSH
5240: LD_INT 2
5242: PLUS
5243: PPUSH
5244: CALL_OW 380
// hc_importance := 105 ;
5248: LD_ADDR_OWVAR 32
5252: PUSH
5253: LD_INT 105
5255: ST_TO_ADDR
// if Multiplayer then
5256: LD_OWVAR 4
5260: IFFALSE 5300
// begin hc_gallery := MULTIAVATARS ;
5262: LD_ADDR_OWVAR 33
5266: PUSH
5267: LD_STRING MULTIAVATARS
5269: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5270: LD_ADDR_OWVAR 34
5274: PUSH
5275: LD_VAR 0 1
5279: PPUSH
5280: CALL_OW 525
5284: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5285: LD_ADDR_OWVAR 27
5289: PUSH
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 526
5299: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5300: LD_ADDR_VAR 0 5
5304: PUSH
5305: LD_VAR 0 5
5309: PPUSH
5310: CALL_OW 44
5314: PPUSH
5315: CALL 48180 0 2
5319: ST_TO_ADDR
// if mpTeamPreset then
5320: LD_LOC 1
5324: IFFALSE 5420
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5326: LD_LOC 1
5330: PUSH
5331: LD_INT 1
5333: ARRAY
5334: PPUSH
5335: LD_VAR 0 5
5339: PUSH
5340: LD_VAR 0 5
5344: ARRAY
5345: PPUSH
5346: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5350: LD_VAR 0 5
5354: PUSH
5355: LD_VAR 0 5
5359: ARRAY
5360: PPUSH
5361: LD_INT 1
5363: PPUSH
5364: LD_LOC 1
5368: PUSH
5369: LD_INT 1
5371: ARRAY
5372: PPUSH
5373: LD_INT 1
5375: PPUSH
5376: CALL_OW 260
5380: PPUSH
5381: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5385: LD_VAR 0 5
5389: PUSH
5390: LD_VAR 0 5
5394: ARRAY
5395: PPUSH
5396: LD_INT 2
5398: PPUSH
5399: LD_LOC 1
5403: PUSH
5404: LD_INT 1
5406: ARRAY
5407: PPUSH
5408: LD_INT 2
5410: PPUSH
5411: CALL_OW 260
5415: PPUSH
5416: CALL_OW 239
// end ; InitHc_All ( ) ;
5420: CALL_OW 584
// class := 2 ;
5424: LD_ADDR_VAR 0 8
5428: PUSH
5429: LD_INT 2
5431: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5432: LD_ADDR_VAR 0 6
5436: PUSH
5437: DOUBLE
5438: LD_INT 1
5440: DEC
5441: ST_TO_ADDR
5442: LD_VAR 0 3
5446: PUSH
5447: LD_INT 1
5449: MINUS
5450: PUSH
5451: FOR_TO
5452: IFFALSE 5636
// begin PrepareHuman ( false , class , skill ) ;
5454: LD_INT 0
5456: PPUSH
5457: LD_VAR 0 8
5461: PPUSH
5462: LD_VAR 0 4
5466: PPUSH
5467: CALL_OW 380
// un := CreateHuman ;
5471: LD_ADDR_VAR 0 7
5475: PUSH
5476: CALL_OW 44
5480: ST_TO_ADDR
// result := Join ( result , un ) ;
5481: LD_ADDR_VAR 0 5
5485: PUSH
5486: LD_VAR 0 5
5490: PPUSH
5491: LD_VAR 0 7
5495: PPUSH
5496: CALL 48180 0 2
5500: ST_TO_ADDR
// if mpTeamPreset then
5501: LD_LOC 1
5505: IFFALSE 5601
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5507: LD_LOC 1
5511: PUSH
5512: LD_VAR 0 6
5516: PUSH
5517: LD_INT 1
5519: PLUS
5520: ARRAY
5521: PPUSH
5522: LD_VAR 0 7
5526: PPUSH
5527: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5531: LD_VAR 0 7
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_LOC 1
5543: PUSH
5544: LD_VAR 0 6
5548: PUSH
5549: LD_INT 1
5551: PLUS
5552: ARRAY
5553: PPUSH
5554: LD_INT 1
5556: PPUSH
5557: CALL_OW 260
5561: PPUSH
5562: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5566: LD_VAR 0 7
5570: PPUSH
5571: LD_INT 2
5573: PPUSH
5574: LD_LOC 1
5578: PUSH
5579: LD_VAR 0 6
5583: PUSH
5584: LD_INT 1
5586: PLUS
5587: ARRAY
5588: PPUSH
5589: LD_INT 2
5591: PPUSH
5592: CALL_OW 260
5596: PPUSH
5597: CALL_OW 239
// end ; class := Inc ( class ) ;
5601: LD_ADDR_VAR 0 8
5605: PUSH
5606: LD_VAR 0 8
5610: PPUSH
5611: CALL 49553 0 1
5615: ST_TO_ADDR
// if class = 5 then
5616: LD_VAR 0 8
5620: PUSH
5621: LD_INT 5
5623: EQUAL
5624: IFFALSE 5634
// class := 1 ;
5626: LD_ADDR_VAR 0 8
5630: PUSH
5631: LD_INT 1
5633: ST_TO_ADDR
// end ;
5634: GO 5451
5636: POP
5637: POP
// if not mpTeamPreset then
5638: LD_LOC 1
5642: NOT
5643: IFFALSE 5655
// mpTeamPreset := result ;
5645: LD_ADDR_LOC 1
5649: PUSH
5650: LD_VAR 0 5
5654: ST_TO_ADDR
// end ;
5655: LD_VAR 0 5
5659: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5660: LD_INT 0
5662: PPUSH
5663: PPUSH
// result := [ ] ;
5664: LD_ADDR_VAR 0 4
5668: PUSH
5669: EMPTY
5670: ST_TO_ADDR
// if not vehicles then
5671: LD_VAR 0 3
5675: NOT
5676: IFFALSE 5680
// exit ;
5678: GO 5894
// for i := 1 to vehicles [ nation ] do
5680: LD_ADDR_VAR 0 5
5684: PUSH
5685: DOUBLE
5686: LD_INT 1
5688: DEC
5689: ST_TO_ADDR
5690: LD_VAR 0 3
5694: PUSH
5695: LD_VAR 0 2
5699: ARRAY
5700: PUSH
5701: FOR_TO
5702: IFFALSE 5892
// begin uc_side := side ;
5704: LD_ADDR_OWVAR 20
5708: PUSH
5709: LD_VAR 0 1
5713: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5714: LD_VAR 0 3
5718: PUSH
5719: LD_VAR 0 2
5723: ARRAY
5724: PUSH
5725: LD_VAR 0 5
5729: ARRAY
5730: PPUSH
5731: CALL 12248 0 1
5735: PUSH
5736: LD_INT 4
5738: GREATER
5739: IFFALSE 5769
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5741: LD_ADDR_OWVAR 21
5745: PUSH
5746: LD_VAR 0 3
5750: PUSH
5751: LD_VAR 0 2
5755: ARRAY
5756: PUSH
5757: LD_VAR 0 5
5761: ARRAY
5762: PUSH
5763: LD_INT 5
5765: ARRAY
5766: ST_TO_ADDR
5767: GO 5779
// uc_nation := nation ;
5769: LD_ADDR_OWVAR 21
5773: PUSH
5774: LD_VAR 0 2
5778: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5779: LD_VAR 0 3
5783: PUSH
5784: LD_VAR 0 2
5788: ARRAY
5789: PUSH
5790: LD_VAR 0 5
5794: ARRAY
5795: PUSH
5796: LD_INT 1
5798: ARRAY
5799: PPUSH
5800: LD_VAR 0 3
5804: PUSH
5805: LD_VAR 0 2
5809: ARRAY
5810: PUSH
5811: LD_VAR 0 5
5815: ARRAY
5816: PUSH
5817: LD_INT 2
5819: ARRAY
5820: PPUSH
5821: LD_VAR 0 3
5825: PUSH
5826: LD_VAR 0 2
5830: ARRAY
5831: PUSH
5832: LD_VAR 0 5
5836: ARRAY
5837: PUSH
5838: LD_INT 3
5840: ARRAY
5841: PPUSH
5842: LD_VAR 0 3
5846: PUSH
5847: LD_VAR 0 2
5851: ARRAY
5852: PUSH
5853: LD_VAR 0 5
5857: ARRAY
5858: PUSH
5859: LD_INT 4
5861: ARRAY
5862: PPUSH
5863: LD_INT 80
5865: PPUSH
5866: CALL 15010 0 5
// result := Join ( result , CreateVehicle ) ;
5870: LD_ADDR_VAR 0 4
5874: PUSH
5875: LD_VAR 0 4
5879: PPUSH
5880: CALL_OW 45
5884: PPUSH
5885: CALL 48180 0 2
5889: ST_TO_ADDR
// end ;
5890: GO 5701
5892: POP
5893: POP
// end ;
5894: LD_VAR 0 4
5898: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5899: LD_INT 0
5901: PPUSH
5902: PPUSH
// for i in mpBattleFlags do
5903: LD_ADDR_VAR 0 3
5907: PUSH
5908: LD_EXP 23
5912: PUSH
5913: FOR_IN
5914: IFFALSE 5991
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5916: LD_VAR 0 3
5920: PPUSH
5921: LD_INT 1
5923: PUSH
5924: LD_VAR 0 1
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_VAR 0 1
5940: PUSH
5941: LD_REAL  7.00000000000000E-0001
5944: MUL
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: PUSH
5950: LD_INT 3
5952: PUSH
5953: LD_VAR 0 1
5957: PUSH
5958: LD_REAL  4.00000000000000E-0001
5961: MUL
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 20
5969: PUSH
5970: LD_VAR 0 1
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: PPUSH
5985: CALL_OW 423
5989: GO 5913
5991: POP
5992: POP
// end ;
5993: LD_VAR 0 2
5997: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5998: LD_INT 100
6000: IFFALSE 6095
6002: GO 6004
6004: DISABLE
6005: LD_INT 0
6007: PPUSH
6008: PPUSH
// begin if mpBattleFlag <= 0 then
6009: LD_EXP 22
6013: PUSH
6014: LD_INT 0
6016: LESSEQUAL
6017: IFFALSE 6021
// exit ;
6019: GO 6095
// strength := 100 ;
6021: LD_ADDR_VAR 0 2
6025: PUSH
6026: LD_INT 100
6028: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6029: LD_EXP 22
6033: PPUSH
6034: CALL_OW 67
// strength := Dec ( strength ) ;
6038: LD_ADDR_VAR 0 2
6042: PUSH
6043: LD_VAR 0 2
6047: PPUSH
6048: CALL 49575 0 1
6052: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6053: LD_VAR 0 2
6057: PPUSH
6058: CALL 5899 0 1
// until not strength ;
6062: LD_VAR 0 2
6066: NOT
6067: IFFALSE 6029
// for i in mpBattleFlags do
6069: LD_ADDR_VAR 0 1
6073: PUSH
6074: LD_EXP 23
6078: PUSH
6079: FOR_IN
6080: IFFALSE 6093
// KillBattleFlag ( i ) ;
6082: LD_VAR 0 1
6086: PPUSH
6087: CALL_OW 419
6091: GO 6079
6093: POP
6094: POP
// end ;
6095: PPOPN 2
6097: END
// every 0 0$1 marked mpActive do var side , tmp ;
6098: GO 6100
6100: DISABLE
6101: LD_INT 0
6103: PPUSH
6104: PPUSH
// begin if mpSibBomb <= 1 then
6105: LD_EXP 28
6109: PUSH
6110: LD_INT 1
6112: LESSEQUAL
6113: IFFALSE 6117
// exit ;
6115: GO 6190
// tmp := mpSibBomb ;
6117: LD_ADDR_VAR 0 2
6121: PUSH
6122: LD_EXP 28
6126: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6127: LD_INT 35
6129: PPUSH
6130: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6134: LD_ADDR_VAR 0 2
6138: PUSH
6139: LD_VAR 0 2
6143: PUSH
6144: LD_INT 35
6146: MINUS
6147: ST_TO_ADDR
// until not tmp ;
6148: LD_VAR 0 2
6152: NOT
6153: IFFALSE 6127
// for side := 1 to 8 do
6155: LD_ADDR_VAR 0 1
6159: PUSH
6160: DOUBLE
6161: LD_INT 1
6163: DEC
6164: ST_TO_ADDR
6165: LD_INT 8
6167: PUSH
6168: FOR_TO
6169: IFFALSE 6188
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6171: LD_INT 25
6173: PPUSH
6174: LD_VAR 0 1
6178: PPUSH
6179: LD_INT 1
6181: PPUSH
6182: CALL_OW 322
6186: GO 6168
6188: POP
6189: POP
// end ;
6190: PPOPN 2
6192: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6193: LD_INT 0
6195: PPUSH
6196: PPUSH
6197: PPUSH
// mpBuildUpTimeDelay := 0 ;
6198: LD_ADDR_EXP 46
6202: PUSH
6203: LD_INT 0
6205: ST_TO_ADDR
// if not mpBuildUpTime then
6206: LD_EXP 20
6210: NOT
6211: IFFALSE 6215
// exit ;
6213: GO 6404
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6215: LD_ADDR_EXP 46
6219: PUSH
6220: LD_INT 8400
6222: PUSH
6223: LD_INT 2100
6225: PUSH
6226: LD_EXP 20
6230: MUL
6231: PLUS
6232: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6233: LD_ADDR_EXP 47
6237: PUSH
6238: LD_INT 1
6240: ST_TO_ADDR
// for i := 1 to 8 do
6241: LD_ADDR_VAR 0 2
6245: PUSH
6246: DOUBLE
6247: LD_INT 1
6249: DEC
6250: ST_TO_ADDR
6251: LD_INT 8
6253: PUSH
6254: FOR_TO
6255: IFFALSE 6402
// if mpSidePositions [ i ] then
6257: LD_EXP 7
6261: PUSH
6262: LD_VAR 0 2
6266: ARRAY
6267: IFFALSE 6400
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6269: LD_EXP 19
6273: PUSH
6274: LD_EXP 7
6278: PUSH
6279: LD_VAR 0 2
6283: ARRAY
6284: ARRAY
6285: PPUSH
6286: LD_INT 5
6288: PPUSH
6289: CALL_OW 424
// for j := 1 to 8 do
6293: LD_ADDR_VAR 0 3
6297: PUSH
6298: DOUBLE
6299: LD_INT 1
6301: DEC
6302: ST_TO_ADDR
6303: LD_INT 8
6305: PUSH
6306: FOR_TO
6307: IFFALSE 6398
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6309: LD_EXP 7
6313: PUSH
6314: LD_VAR 0 3
6318: ARRAY
6319: IFFALSE 6368
6321: PUSH
6322: LD_EXP 8
6326: PUSH
6327: LD_VAR 0 2
6331: ARRAY
6332: PUSH
6333: LD_EXP 8
6337: PUSH
6338: LD_VAR 0 3
6342: ARRAY
6343: NONEQUAL
6344: IFTRUE 6367
6346: PUSH
6347: LD_EXP 11
6351: NOT
6352: IFFALSE 6366
6354: PUSH
6355: LD_VAR 0 2
6359: PUSH
6360: LD_VAR 0 3
6364: NONEQUAL
6365: AND
6366: OR
6367: AND
6368: IFFALSE 6396
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6370: LD_VAR 0 3
6374: PPUSH
6375: LD_EXP 19
6379: PUSH
6380: LD_EXP 7
6384: PUSH
6385: LD_VAR 0 2
6389: ARRAY
6390: ARRAY
6391: PPUSH
6392: CALL_OW 333
6396: GO 6306
6398: POP
6399: POP
// end ;
6400: GO 6254
6402: POP
6403: POP
// end ;
6404: LD_VAR 0 1
6408: RET
// function EndBuildUp ; var i , j ; begin
6409: LD_INT 0
6411: PPUSH
6412: PPUSH
6413: PPUSH
// mpBuildUpTimeActive := false ;
6414: LD_ADDR_EXP 47
6418: PUSH
6419: LD_INT 0
6421: ST_TO_ADDR
// for i := 1 to 8 do
6422: LD_ADDR_VAR 0 2
6426: PUSH
6427: DOUBLE
6428: LD_INT 1
6430: DEC
6431: ST_TO_ADDR
6432: LD_INT 8
6434: PUSH
6435: FOR_TO
6436: IFFALSE 6583
// if mpSidePositions [ i ] then
6438: LD_EXP 7
6442: PUSH
6443: LD_VAR 0 2
6447: ARRAY
6448: IFFALSE 6581
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6450: LD_EXP 19
6454: PUSH
6455: LD_EXP 7
6459: PUSH
6460: LD_VAR 0 2
6464: ARRAY
6465: ARRAY
6466: PPUSH
6467: LD_INT 0
6469: PPUSH
6470: CALL_OW 424
// for j := 1 to 8 do
6474: LD_ADDR_VAR 0 3
6478: PUSH
6479: DOUBLE
6480: LD_INT 1
6482: DEC
6483: ST_TO_ADDR
6484: LD_INT 8
6486: PUSH
6487: FOR_TO
6488: IFFALSE 6579
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6490: LD_EXP 7
6494: PUSH
6495: LD_VAR 0 3
6499: ARRAY
6500: IFFALSE 6549
6502: PUSH
6503: LD_EXP 8
6507: PUSH
6508: LD_VAR 0 2
6512: ARRAY
6513: PUSH
6514: LD_EXP 8
6518: PUSH
6519: LD_VAR 0 3
6523: ARRAY
6524: NONEQUAL
6525: IFTRUE 6548
6527: PUSH
6528: LD_EXP 11
6532: NOT
6533: IFFALSE 6547
6535: PUSH
6536: LD_VAR 0 2
6540: PUSH
6541: LD_VAR 0 3
6545: NONEQUAL
6546: AND
6547: OR
6548: AND
6549: IFFALSE 6577
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6551: LD_VAR 0 3
6555: PPUSH
6556: LD_EXP 19
6560: PUSH
6561: LD_EXP 7
6565: PUSH
6566: LD_VAR 0 2
6570: ARRAY
6571: ARRAY
6572: PPUSH
6573: CALL_OW 334
6577: GO 6487
6579: POP
6580: POP
// end ;
6581: GO 6435
6583: POP
6584: POP
// end ;
6585: LD_VAR 0 1
6589: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6590: LD_EXP 47
6594: IFFALSE 6773
6596: GO 6598
6598: DISABLE
6599: LD_INT 0
6601: PPUSH
6602: PPUSH
// begin for i := 1 to 8 do
6603: LD_ADDR_VAR 0 1
6607: PUSH
6608: DOUBLE
6609: LD_INT 1
6611: DEC
6612: ST_TO_ADDR
6613: LD_INT 8
6615: PUSH
6616: FOR_TO
6617: IFFALSE 6770
// if mpSidePositions [ i ] then
6619: LD_EXP 7
6623: PUSH
6624: LD_VAR 0 1
6628: ARRAY
6629: IFFALSE 6768
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6631: LD_ADDR_VAR 0 2
6635: PUSH
6636: LD_EXP 19
6640: PUSH
6641: LD_EXP 7
6645: PUSH
6646: LD_VAR 0 1
6650: ARRAY
6651: ARRAY
6652: PPUSH
6653: LD_INT 2
6655: PUSH
6656: LD_INT 21
6658: PUSH
6659: LD_INT 1
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: LD_INT 21
6668: PUSH
6669: LD_INT 2
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: LIST
6680: PUSH
6681: LD_INT 22
6683: PUSH
6684: LD_OWVAR 2
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PPUSH
6697: CALL_OW 70
6701: PUSH
6702: FOR_IN
6703: IFFALSE 6766
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6705: LD_EXP 8
6709: PUSH
6710: LD_VAR 0 1
6714: ARRAY
6715: PUSH
6716: LD_EXP 8
6720: PUSH
6721: LD_OWVAR 2
6725: ARRAY
6726: NONEQUAL
6727: IFTRUE 6750
6729: PUSH
6730: LD_EXP 11
6734: NOT
6735: IFFALSE 6749
6737: PUSH
6738: LD_VAR 0 1
6742: PUSH
6743: LD_OWVAR 2
6747: NONEQUAL
6748: AND
6749: OR
6750: IFFALSE 6764
// ComMoveToArea ( un , BuildUpEscape ) ;
6752: LD_VAR 0 2
6756: PPUSH
6757: LD_INT 52
6759: PPUSH
6760: CALL_OW 113
6764: GO 6702
6766: POP
6767: POP
6768: GO 6616
6770: POP
6771: POP
// enable ;
6772: ENABLE
// end ;
6773: PPOPN 2
6775: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6776: LD_EXP 20
6780: IFFALSE 6830
6782: GO 6784
6784: DISABLE
6785: LD_INT 0
6787: PPUSH
// begin tmp := mpBuildUpTime ;
6788: LD_ADDR_VAR 0 1
6792: PUSH
6793: LD_EXP 20
6797: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6798: LD_INT 35
6800: PPUSH
6801: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6805: LD_ADDR_VAR 0 1
6809: PUSH
6810: LD_VAR 0 1
6814: PUSH
6815: LD_INT 35
6817: MINUS
6818: ST_TO_ADDR
// until not tmp ;
6819: LD_VAR 0 1
6823: NOT
6824: IFFALSE 6798
// EndBuildUp ;
6826: CALL 6409 0 0
// end ;
6830: PPOPN 1
6832: END
// every 0 0$1 trigger mpActive marked mpWin do
6833: LD_INT 100
6835: IFFALSE 6869
6837: GO 6839
6839: DISABLE
// begin if IAmServer then
6840: CALL_OW 518
6844: IFFALSE 6853
// wait ( 0 0$3 ) ;
6846: LD_INT 105
6848: PPUSH
6849: CALL_OW 67
// if Multiplayer then
6853: LD_OWVAR 4
6857: IFFALSE 6865
// YouWinInMultiplayer else
6859: CALL_OW 106
6863: GO 6869
// YouWin ;
6865: CALL_OW 103
// end ;
6869: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6870: LD_INT 0
6872: PPUSH
// result := false ;
6873: LD_ADDR_VAR 0 3
6877: PUSH
6878: LD_INT 0
6880: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6881: LD_VAR 0 1
6885: PUSH
6886: LD_INT 1
6888: DOUBLE
6889: EQUAL
6890: IFTRUE 6900
6892: LD_INT 5
6894: DOUBLE
6895: EQUAL
6896: IFTRUE 6900
6898: GO 6973
6900: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6901: LD_ADDR_VAR 0 3
6905: PUSH
6906: LD_INT 22
6908: PUSH
6909: LD_VAR 0 2
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 2
6920: PUSH
6921: LD_INT 21
6923: PUSH
6924: LD_INT 1
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: PUSH
6931: LD_INT 33
6933: PUSH
6934: LD_INT 3
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PUSH
6941: LD_INT 33
6943: PUSH
6944: LD_INT 5
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PPUSH
6961: CALL_OW 69
6965: PPUSH
6966: CALL 12248 0 1
6970: ST_TO_ADDR
// end ; GameTypeSurvival :
6971: GO 7212
6973: LD_INT 2
6975: DOUBLE
6976: EQUAL
6977: IFTRUE 6981
6979: GO 7111
6981: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6982: LD_ADDR_VAR 0 3
6986: PUSH
6987: LD_INT 22
6989: PUSH
6990: LD_VAR 0 2
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PUSH
6999: LD_INT 2
7001: PUSH
7002: LD_INT 30
7004: PUSH
7005: LD_INT 0
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 30
7014: PUSH
7015: LD_INT 1
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PPUSH
7031: CALL_OW 69
7035: PPUSH
7036: CALL 12248 0 1
7040: IFFALSE 7108
7042: PUSH
7043: LD_INT 22
7045: PUSH
7046: LD_VAR 0 2
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PUSH
7055: LD_INT 2
7057: PUSH
7058: LD_INT 21
7060: PUSH
7061: LD_INT 1
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 33
7070: PUSH
7071: LD_INT 3
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 33
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PPUSH
7098: CALL_OW 69
7102: PPUSH
7103: CALL 12248 0 1
7107: AND
7108: ST_TO_ADDR
// end ; GameTypeKing :
7109: GO 7212
7111: LD_INT 3
7113: DOUBLE
7114: EQUAL
7115: IFTRUE 7119
7117: GO 7211
7119: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7120: LD_ADDR_VAR 0 3
7124: PUSH
7125: LD_INT 22
7127: PUSH
7128: LD_VAR 0 2
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 2
7139: PUSH
7140: LD_INT 21
7142: PUSH
7143: LD_INT 1
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 33
7152: PUSH
7153: LD_INT 3
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 33
7162: PUSH
7163: LD_INT 5
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PPUSH
7180: CALL_OW 69
7184: PPUSH
7185: CALL 12248 0 1
7189: IFFALSE 7208
7191: PUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: CALL 60144 0 1
7201: PUSH
7202: LD_EXP 35
7206: LESS
7207: AND
7208: ST_TO_ADDR
// end ; end ;
7209: GO 7212
7211: POP
// end ;
7212: LD_VAR 0 3
7216: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7217: LD_INT 100
7219: IFFALSE 7449
7221: GO 7223
7223: DISABLE
7224: LD_INT 0
7226: PPUSH
7227: PPUSH
// begin if Multiplayer then
7228: LD_OWVAR 4
7232: IFFALSE 7240
// SetPlayerSpectator ( ) else
7234: CALL_OW 572
7238: GO 7249
// FogOff ( your_side ) ;
7240: LD_OWVAR 2
7244: PPUSH
7245: CALL_OW 344
// repeat gameIsOn := false ;
7249: LD_ADDR_VAR 0 1
7253: PUSH
7254: LD_INT 0
7256: ST_TO_ADDR
// for i := 1 to 8 do
7257: LD_ADDR_VAR 0 2
7261: PUSH
7262: DOUBLE
7263: LD_INT 1
7265: DEC
7266: ST_TO_ADDR
7267: LD_INT 8
7269: PUSH
7270: FOR_TO
7271: IFFALSE 7401
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7273: LD_EXP 7
7277: PUSH
7278: LD_VAR 0 2
7282: ARRAY
7283: IFFALSE 7296
7285: PUSH
7286: LD_VAR 0 2
7290: PPUSH
7291: CALL_OW 108
7295: AND
7296: IFFALSE 7310
7298: PUSH
7299: LD_VAR 0 2
7303: PUSH
7304: LD_OWVAR 2
7308: NONEQUAL
7309: AND
7310: IFFALSE 7399
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7312: LD_EXP 8
7316: PUSH
7317: LD_VAR 0 2
7321: ARRAY
7322: NOT
7323: IFTRUE 7371
7325: PUSH
7326: LD_EXP 8
7330: PUSH
7331: LD_VAR 0 2
7335: ARRAY
7336: PUSH
7337: LD_EXP 8
7341: PUSH
7342: LD_OWVAR 2
7346: ARRAY
7347: NONEQUAL
7348: IFFALSE 7370
7350: PUSH
7351: LD_OWVAR 2
7355: PPUSH
7356: LD_VAR 0 2
7360: PPUSH
7361: CALL_OW 81
7365: PUSH
7366: LD_INT 1
7368: NONEQUAL
7369: AND
7370: OR
7371: IFFALSE 7399
// if HasPowerByGameType ( mpGameType , i ) then
7373: LD_EXP 3
7377: PPUSH
7378: LD_VAR 0 2
7382: PPUSH
7383: CALL 6870 0 2
7387: IFFALSE 7399
// begin gameIsOn := true ;
7389: LD_ADDR_VAR 0 1
7393: PUSH
7394: LD_INT 1
7396: ST_TO_ADDR
// break ;
7397: GO 7401
// end ;
7399: GO 7270
7401: POP
7402: POP
// wait ( 100 ) ;
7403: LD_INT 100
7405: PPUSH
7406: CALL_OW 67
// until not gameIsOn ;
7410: LD_VAR 0 1
7414: NOT
7415: IFFALSE 7249
// if IAmServer then
7417: CALL_OW 518
7421: IFFALSE 7430
// wait ( 0 0$3 ) ;
7423: LD_INT 105
7425: PPUSH
7426: CALL_OW 67
// if Multiplayer then
7430: LD_OWVAR 4
7434: IFFALSE 7442
// YouLostInMultiplayer else
7436: CALL_OW 107
7440: GO 7449
// YouLost (  ) ;
7442: LD_STRING 
7444: PPUSH
7445: CALL_OW 104
// end ;
7449: PPOPN 2
7451: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7452: LD_EXP 33
7456: IFFALSE 7840
7458: GO 7460
7460: DISABLE
7461: LD_INT 0
7463: PPUSH
7464: PPUSH
7465: PPUSH
7466: PPUSH
7467: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7468: LD_ADDR_VAR 0 5
7472: PUSH
7473: LD_INT 1
7475: PUSH
7476: LD_INT 2
7478: PUSH
7479: LD_INT 3
7481: PUSH
7482: LD_INT 4
7484: PUSH
7485: LD_INT 5
7487: PUSH
7488: LD_INT 6
7490: PUSH
7491: LD_INT 7
7493: PUSH
7494: LD_INT 8
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7507: LD_INT 350
7509: PPUSH
7510: CALL_OW 67
// for i := 1 to 8 do
7514: LD_ADDR_VAR 0 1
7518: PUSH
7519: DOUBLE
7520: LD_INT 1
7522: DEC
7523: ST_TO_ADDR
7524: LD_INT 8
7526: PUSH
7527: FOR_TO
7528: IFFALSE 7810
// begin j := sides [ i ] ;
7530: LD_ADDR_VAR 0 2
7534: PUSH
7535: LD_VAR 0 5
7539: PUSH
7540: LD_VAR 0 1
7544: ARRAY
7545: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7546: LD_EXP 40
7550: PUSH
7551: LD_VAR 0 2
7555: ARRAY
7556: PPUSH
7557: CALL 12248 0 1
7561: IFFALSE 7574
7563: PUSH
7564: LD_VAR 0 2
7568: PPUSH
7569: CALL_OW 108
7573: AND
7574: IFFALSE 7592
7576: PUSH
7577: LD_EXP 3
7581: PPUSH
7582: LD_VAR 0 2
7586: PPUSH
7587: CALL 6870 0 2
7591: AND
7592: IFFALSE 7808
// begin wait ( mpRespawn div 2 ) ;
7594: LD_EXP 33
7598: PUSH
7599: LD_INT 2
7601: DIV
7602: PPUSH
7603: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7607: LD_ADDR_VAR 0 3
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_VAR 0 2
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: PUSH
7624: LD_INT 50
7626: PUSH
7627: EMPTY
7628: LIST
7629: PUSH
7630: LD_INT 2
7632: PUSH
7633: LD_INT 30
7635: PUSH
7636: LD_INT 0
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PUSH
7643: LD_INT 30
7645: PUSH
7646: LD_INT 1
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: LIST
7662: PPUSH
7663: CALL_OW 69
7667: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7668: LD_VAR 0 3
7672: NOT
7673: IFTRUE 7687
7675: PUSH
7676: LD_VAR 0 2
7680: PPUSH
7681: CALL_OW 108
7685: NOT
7686: OR
7687: IFTRUE 7706
7689: PUSH
7690: LD_EXP 3
7694: PPUSH
7695: LD_VAR 0 2
7699: PPUSH
7700: CALL 6870 0 2
7704: NOT
7705: OR
7706: IFFALSE 7710
// continue ;
7708: GO 7527
// spawn := tmp [ 1 ] ;
7710: LD_ADDR_VAR 0 4
7714: PUSH
7715: LD_VAR 0 3
7719: PUSH
7720: LD_INT 1
7722: ARRAY
7723: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7724: LD_EXP 40
7728: PUSH
7729: LD_VAR 0 2
7733: ARRAY
7734: PUSH
7735: LD_INT 1
7737: ARRAY
7738: PPUSH
7739: LD_VAR 0 4
7743: PPUSH
7744: CALL_OW 250
7748: PPUSH
7749: LD_VAR 0 4
7753: PPUSH
7754: CALL_OW 251
7758: PPUSH
7759: LD_INT 32
7761: PPUSH
7762: LD_INT 1
7764: PPUSH
7765: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7769: LD_ADDR_EXP 40
7773: PUSH
7774: LD_EXP 40
7778: PPUSH
7779: LD_VAR 0 2
7783: PPUSH
7784: LD_EXP 40
7788: PUSH
7789: LD_VAR 0 2
7793: ARRAY
7794: PPUSH
7795: LD_INT 1
7797: PPUSH
7798: CALL_OW 3
7802: PPUSH
7803: CALL_OW 1
7807: ST_TO_ADDR
// end ; end ;
7808: GO 7527
7810: POP
7811: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7812: LD_ADDR_VAR 0 5
7816: PUSH
7817: LD_VAR 0 5
7821: PPUSH
7822: LD_INT 1
7824: PPUSH
7825: LD_INT 8
7827: PPUSH
7828: LD_INT 1
7830: PPUSH
7831: CALL 14540 0 4
7835: ST_TO_ADDR
// until false ;
7836: LD_INT 0
7838: IFFALSE 7507
// end ;
7840: PPOPN 5
7842: END
// every 0 0$1 marked mpActive do
7843: GO 7845
7845: DISABLE
// begin enable ;
7846: ENABLE
// if not mpDisplayStrings then
7847: LD_EXP 38
7851: NOT
7852: IFFALSE 7863
// begin display_strings := [ ] ;
7854: LD_ADDR_OWVAR 47
7858: PUSH
7859: EMPTY
7860: ST_TO_ADDR
// exit ;
7861: GO 7873
// end ; display_strings := mpDisplayStrings ;
7863: LD_ADDR_OWVAR 47
7867: PUSH
7868: LD_EXP 38
7872: ST_TO_ADDR
// end ; end_of_file
7873: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7874: LD_INT 0
7876: PPUSH
7877: PPUSH
7878: PPUSH
7879: PPUSH
7880: PPUSH
7881: PPUSH
7882: PPUSH
7883: PPUSH
7884: PPUSH
// if GetType ( un ) = unit_vehicle then
7885: LD_VAR 0 1
7889: PPUSH
7890: CALL_OW 247
7894: PUSH
7895: LD_INT 2
7897: EQUAL
7898: IFFALSE 7902
// exit ;
7900: GO 8576
// side := GetSide ( un ) ;
7902: LD_ADDR_VAR 0 9
7906: PUSH
7907: LD_VAR 0 1
7911: PPUSH
7912: CALL_OW 255
7916: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7917: LD_EXP 3
7921: PUSH
7922: LD_INT 2
7924: EQUAL
7925: IFFALSE 8019
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7927: LD_VAR 0 1
7931: PPUSH
7932: CALL_OW 266
7936: PUSH
7937: LD_INT 0
7939: PUSH
7940: LD_INT 1
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: IN
7947: IFFALSE 8019
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: LD_INT 22
7956: PUSH
7957: LD_VAR 0 9
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PUSH
7966: LD_INT 2
7968: PUSH
7969: LD_INT 21
7971: PUSH
7972: LD_INT 1
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PUSH
7979: LD_INT 33
7981: PUSH
7982: LD_INT 3
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: LIST
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PPUSH
7998: CALL_OW 69
8002: PUSH
8003: FOR_IN
8004: IFFALSE 8017
// KillUnit ( i ) ;
8006: LD_VAR 0 3
8010: PPUSH
8011: CALL_OW 66
8015: GO 8003
8017: POP
8018: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8019: LD_VAR 0 1
8023: PPUSH
8024: CALL_OW 257
8028: PUSH
8029: LD_INT 12
8031: PUSH
8032: LD_INT 17
8034: PUSH
8035: LD_INT 15
8037: PUSH
8038: LD_INT 16
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: IN
8047: IFTRUE 8064
8049: PUSH
8050: LD_VAR 0 1
8054: PPUSH
8055: CALL_OW 263
8059: PUSH
8060: LD_INT 5
8062: EQUAL
8063: OR
8064: IFFALSE 8301
// begin tag := 0 ;
8066: LD_ADDR_VAR 0 5
8070: PUSH
8071: LD_INT 0
8073: ST_TO_ADDR
// for i := 1 to 8 do
8074: LD_ADDR_VAR 0 3
8078: PUSH
8079: DOUBLE
8080: LD_INT 1
8082: DEC
8083: ST_TO_ADDR
8084: LD_INT 8
8086: PUSH
8087: FOR_TO
8088: IFFALSE 8122
// if un in mpApePosIndex [ i ] then
8090: LD_VAR 0 1
8094: PUSH
8095: LD_EXP 32
8099: PUSH
8100: LD_VAR 0 3
8104: ARRAY
8105: IN
8106: IFFALSE 8120
// begin tag := i ;
8108: LD_ADDR_VAR 0 5
8112: PUSH
8113: LD_VAR 0 3
8117: ST_TO_ADDR
// break ;
8118: GO 8122
// end ;
8120: GO 8087
8122: POP
8123: POP
// if not tag then
8124: LD_VAR 0 5
8128: NOT
8129: IFFALSE 8133
// exit ;
8131: GO 8576
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8133: LD_ADDR_VAR 0 7
8137: PUSH
8138: LD_EXP 31
8142: PUSH
8143: LD_EXP 7
8147: PUSH
8148: LD_VAR 0 5
8152: ARRAY
8153: ARRAY
8154: ST_TO_ADDR
// if not area then
8155: LD_VAR 0 7
8159: NOT
8160: IFFALSE 8164
// exit ;
8162: GO 8576
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8164: LD_INT 14700
8166: PUSH
8167: LD_VAR 0 1
8171: PUSH
8172: LD_INT 5
8174: MOD
8175: PUSH
8176: LD_INT 1
8178: PLUS
8179: PUSH
8180: LD_INT 700
8182: MUL
8183: PLUS
8184: PPUSH
8185: CALL_OW 67
// repeat wait ( 10 ) ;
8189: LD_INT 10
8191: PPUSH
8192: CALL_OW 67
// until not mpBlockRespThread ;
8196: LD_EXP 45
8200: NOT
8201: IFFALSE 8189
// mpBlockRespThread := true ;
8203: LD_ADDR_EXP 45
8207: PUSH
8208: LD_INT 1
8210: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8211: LD_INT 0
8213: PPUSH
8214: CALL 44307 0 1
// ape := CreateHuman ;
8218: LD_ADDR_VAR 0 4
8222: PUSH
8223: CALL_OW 44
8227: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8228: LD_ADDR_EXP 32
8232: PUSH
8233: LD_EXP 32
8237: PPUSH
8238: LD_VAR 0 5
8242: PPUSH
8243: LD_EXP 32
8247: PUSH
8248: LD_VAR 0 5
8252: ARRAY
8253: PPUSH
8254: LD_VAR 0 4
8258: PPUSH
8259: CALL 48180 0 2
8263: PPUSH
8264: CALL_OW 1
8268: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8269: LD_VAR 0 4
8273: PPUSH
8274: LD_VAR 0 7
8278: PPUSH
8279: LD_INT 0
8281: PPUSH
8282: CALL_OW 49
// wait ( 10 ) ;
8286: LD_INT 10
8288: PPUSH
8289: CALL_OW 67
// mpBlockRespThread := false ;
8293: LD_ADDR_EXP 45
8297: PUSH
8298: LD_INT 0
8300: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8301: LD_VAR 0 1
8305: PPUSH
8306: CALL_OW 247
8310: PUSH
8311: LD_INT 1
8313: EQUAL
8314: IFFALSE 8331
8316: PUSH
8317: LD_VAR 0 1
8321: PPUSH
8322: CALL_OW 248
8326: PUSH
8327: LD_INT 0
8329: GREATER
8330: AND
8331: IFFALSE 8576
// begin if not mpRespawn then
8333: LD_EXP 33
8337: NOT
8338: IFFALSE 8342
// exit ;
8340: GO 8576
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8342: LD_VAR 0 9
8346: PPUSH
8347: CALL_OW 108
8351: NOT
8352: IFFALSE 8371
8354: PUSH
8355: LD_EXP 3
8359: PPUSH
8360: LD_VAR 0 9
8364: PPUSH
8365: CALL 6870 0 2
8369: NOT
8370: AND
8371: IFFALSE 8375
// exit ;
8373: GO 8576
// side := GetSide ( un ) ;
8375: LD_ADDR_VAR 0 9
8379: PUSH
8380: LD_VAR 0 1
8384: PPUSH
8385: CALL_OW 255
8389: ST_TO_ADDR
// nation := GetNation ( un ) ;
8390: LD_ADDR_VAR 0 8
8394: PUSH
8395: LD_VAR 0 1
8399: PPUSH
8400: CALL_OW 248
8404: ST_TO_ADDR
// class := GetClass ( un ) ;
8405: LD_ADDR_VAR 0 6
8409: PUSH
8410: LD_VAR 0 1
8414: PPUSH
8415: CALL_OW 257
8419: ST_TO_ADDR
// if class > 4 then
8420: LD_VAR 0 6
8424: PUSH
8425: LD_INT 4
8427: GREATER
8428: IFFALSE 8438
// class := 1 ;
8430: LD_ADDR_VAR 0 6
8434: PUSH
8435: LD_INT 1
8437: ST_TO_ADDR
// repeat wait ( 10 ) ;
8438: LD_INT 10
8440: PPUSH
8441: CALL_OW 67
// until not mpBlockRespThread ;
8445: LD_EXP 45
8449: NOT
8450: IFFALSE 8438
// mpBlockRespThread := true ;
8452: LD_ADDR_EXP 45
8456: PUSH
8457: LD_INT 1
8459: ST_TO_ADDR
// uc_side := side ;
8460: LD_ADDR_OWVAR 20
8464: PUSH
8465: LD_VAR 0 9
8469: ST_TO_ADDR
// uc_nation := nation ;
8470: LD_ADDR_OWVAR 21
8474: PUSH
8475: LD_VAR 0 8
8479: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8480: LD_INT 0
8482: PPUSH
8483: LD_VAR 0 6
8487: PPUSH
8488: LD_INT 2
8490: PPUSH
8491: CALL_OW 380
// un := CreateHuman ;
8495: LD_ADDR_VAR 0 1
8499: PUSH
8500: CALL_OW 44
8504: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8505: LD_ADDR_EXP 40
8509: PUSH
8510: LD_EXP 40
8514: PPUSH
8515: LD_VAR 0 9
8519: PPUSH
8520: LD_EXP 40
8524: PUSH
8525: LD_VAR 0 9
8529: ARRAY
8530: PPUSH
8531: LD_EXP 40
8535: PUSH
8536: LD_VAR 0 9
8540: ARRAY
8541: PUSH
8542: LD_INT 1
8544: PLUS
8545: PPUSH
8546: LD_VAR 0 1
8550: PPUSH
8551: CALL_OW 1
8555: PPUSH
8556: CALL_OW 1
8560: ST_TO_ADDR
// wait ( 10 ) ;
8561: LD_INT 10
8563: PPUSH
8564: CALL_OW 67
// mpBlockRespThread := false ;
8568: LD_ADDR_EXP 45
8572: PUSH
8573: LD_INT 0
8575: ST_TO_ADDR
// end ; end ;
8576: LD_VAR 0 2
8580: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8581: LD_INT 0
8583: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8584: LD_VAR 0 1
8588: PPUSH
8589: CALL_OW 266
8593: PUSH
8594: LD_INT 0
8596: PUSH
8597: LD_INT 1
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: IN
8604: IFFALSE 8629
// SetBName ( building , @ & GetSide ( building ) ) ;
8606: LD_VAR 0 1
8610: PPUSH
8611: LD_STRING @
8613: PUSH
8614: LD_VAR 0 1
8618: PPUSH
8619: CALL_OW 255
8623: STR
8624: PPUSH
8625: CALL_OW 500
// end ;
8629: LD_VAR 0 2
8633: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8634: LD_INT 0
8636: PPUSH
8637: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8638: LD_EXP 3
8642: PUSH
8643: LD_INT 2
8645: EQUAL
8646: IFFALSE 8670
8648: PUSH
8649: LD_VAR 0 1
8653: PPUSH
8654: CALL_OW 266
8658: PUSH
8659: LD_INT 0
8661: PUSH
8662: LD_INT 1
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: IN
8669: AND
8670: IFFALSE 8749
// begin SetSide ( building , oldSide ) ;
8672: LD_VAR 0 1
8676: PPUSH
8677: LD_VAR 0 2
8681: PPUSH
8682: CALL_OW 235
// KillUnit ( building ) ;
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8695: LD_ADDR_VAR 0 5
8699: PUSH
8700: LD_INT 22
8702: PUSH
8703: LD_VAR 0 2
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PUSH
8712: LD_INT 21
8714: PUSH
8715: LD_INT 1
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PPUSH
8726: CALL_OW 69
8730: PUSH
8731: FOR_IN
8732: IFFALSE 8745
// KillUnit ( i ) ;
8734: LD_VAR 0 5
8738: PPUSH
8739: CALL_OW 66
8743: GO 8731
8745: POP
8746: POP
// exit ;
8747: GO 8794
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8749: LD_VAR 0 1
8753: PPUSH
8754: CALL_OW 266
8758: PUSH
8759: LD_INT 0
8761: PUSH
8762: LD_INT 1
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: IN
8769: IFFALSE 8794
// SetBName ( building , @ & GetSide ( building ) ) ;
8771: LD_VAR 0 1
8775: PPUSH
8776: LD_STRING @
8778: PUSH
8779: LD_VAR 0 1
8783: PPUSH
8784: CALL_OW 255
8788: STR
8789: PPUSH
8790: CALL_OW 500
// end ;
8794: LD_VAR 0 4
8798: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8799: LD_INT 0
8801: PPUSH
8802: PPUSH
8803: PPUSH
// if mpGameType <> GameTypeFamine then
8804: LD_EXP 3
8808: PUSH
8809: LD_INT 5
8811: NONEQUAL
8812: IFFALSE 8816
// exit ;
8814: GO 9030
// for i := 1 to mpGlobalOilDeposits do
8816: LD_ADDR_VAR 0 6
8820: PUSH
8821: DOUBLE
8822: LD_INT 1
8824: DEC
8825: ST_TO_ADDR
8826: LD_EXP 41
8830: PUSH
8831: FOR_TO
8832: IFFALSE 9028
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8834: LD_EXP 41
8838: PUSH
8839: LD_VAR 0 6
8843: ARRAY
8844: PUSH
8845: LD_INT 1
8847: ARRAY
8848: PPUSH
8849: LD_EXP 41
8853: PUSH
8854: LD_VAR 0 6
8858: ARRAY
8859: PUSH
8860: LD_INT 2
8862: ARRAY
8863: PPUSH
8864: CALL_OW 428
8868: PUSH
8869: LD_VAR 0 1
8873: EQUAL
8874: IFFALSE 9026
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8876: LD_ADDR_VAR 0 7
8880: PUSH
8881: LD_EXP 41
8885: PUSH
8886: LD_VAR 0 6
8890: ARRAY
8891: PUSH
8892: LD_INT 3
8894: ARRAY
8895: ST_TO_ADDR
// value := Dec ( value ) ;
8896: LD_ADDR_VAR 0 7
8900: PUSH
8901: LD_VAR 0 7
8905: PPUSH
8906: CALL 49575 0 1
8910: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8911: LD_ADDR_EXP 41
8915: PUSH
8916: LD_EXP 41
8920: PPUSH
8921: LD_VAR 0 6
8925: PPUSH
8926: LD_EXP 41
8930: PUSH
8931: LD_VAR 0 6
8935: ARRAY
8936: PPUSH
8937: LD_INT 3
8939: PPUSH
8940: LD_VAR 0 7
8944: PPUSH
8945: CALL_OW 1
8949: PPUSH
8950: CALL_OW 1
8954: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8955: LD_VAR 0 1
8959: PPUSH
8960: LD_VAR 0 7
8964: PPUSH
8965: CALL_OW 505
// if value = 0 then
8969: LD_VAR 0 7
8973: PUSH
8974: LD_INT 0
8976: EQUAL
8977: IFFALSE 9026
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8979: LD_EXP 41
8983: PUSH
8984: LD_VAR 0 6
8988: ARRAY
8989: PUSH
8990: LD_INT 1
8992: ARRAY
8993: PPUSH
8994: LD_EXP 41
8998: PUSH
8999: LD_VAR 0 6
9003: ARRAY
9004: PUSH
9005: LD_INT 2
9007: ARRAY
9008: PPUSH
9009: CALL_OW 63
// KillUnit ( building ) ;
9013: LD_VAR 0 1
9017: PPUSH
9018: CALL_OW 66
// exit ;
9022: POP
9023: POP
9024: GO 9030
// end ; end ; end ;
9026: GO 8831
9028: POP
9029: POP
// end ;
9030: LD_VAR 0 5
9034: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9035: LD_INT 0
9037: PPUSH
9038: PPUSH
9039: PPUSH
// if mpGameType <> GameTypeFamine then
9040: LD_EXP 3
9044: PUSH
9045: LD_INT 5
9047: NONEQUAL
9048: IFFALSE 9052
// exit ;
9050: GO 9266
// for i := 1 to mpGlobalSibDeposits do
9052: LD_ADDR_VAR 0 6
9056: PUSH
9057: DOUBLE
9058: LD_INT 1
9060: DEC
9061: ST_TO_ADDR
9062: LD_EXP 42
9066: PUSH
9067: FOR_TO
9068: IFFALSE 9264
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9070: LD_EXP 42
9074: PUSH
9075: LD_VAR 0 6
9079: ARRAY
9080: PUSH
9081: LD_INT 1
9083: ARRAY
9084: PPUSH
9085: LD_EXP 42
9089: PUSH
9090: LD_VAR 0 6
9094: ARRAY
9095: PUSH
9096: LD_INT 2
9098: ARRAY
9099: PPUSH
9100: CALL_OW 428
9104: PUSH
9105: LD_VAR 0 1
9109: EQUAL
9110: IFFALSE 9262
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9112: LD_ADDR_VAR 0 7
9116: PUSH
9117: LD_EXP 42
9121: PUSH
9122: LD_VAR 0 6
9126: ARRAY
9127: PUSH
9128: LD_INT 3
9130: ARRAY
9131: ST_TO_ADDR
// value := Dec ( value ) ;
9132: LD_ADDR_VAR 0 7
9136: PUSH
9137: LD_VAR 0 7
9141: PPUSH
9142: CALL 49575 0 1
9146: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9147: LD_ADDR_EXP 42
9151: PUSH
9152: LD_EXP 42
9156: PPUSH
9157: LD_VAR 0 6
9161: PPUSH
9162: LD_EXP 42
9166: PUSH
9167: LD_VAR 0 6
9171: ARRAY
9172: PPUSH
9173: LD_INT 3
9175: PPUSH
9176: LD_VAR 0 7
9180: PPUSH
9181: CALL_OW 1
9185: PPUSH
9186: CALL_OW 1
9190: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9191: LD_VAR 0 1
9195: PPUSH
9196: LD_VAR 0 7
9200: PPUSH
9201: CALL_OW 505
// if value = 0 then
9205: LD_VAR 0 7
9209: PUSH
9210: LD_INT 0
9212: EQUAL
9213: IFFALSE 9262
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9215: LD_EXP 42
9219: PUSH
9220: LD_VAR 0 6
9224: ARRAY
9225: PUSH
9226: LD_INT 1
9228: ARRAY
9229: PPUSH
9230: LD_EXP 42
9234: PUSH
9235: LD_VAR 0 6
9239: ARRAY
9240: PUSH
9241: LD_INT 2
9243: ARRAY
9244: PPUSH
9245: CALL_OW 63
// KillUnit ( building ) ;
9249: LD_VAR 0 1
9253: PPUSH
9254: CALL_OW 66
// exit ;
9258: POP
9259: POP
9260: GO 9266
// end ; end ; end ;
9262: GO 9067
9264: POP
9265: POP
// end ; end_of_file
9266: LD_VAR 0 5
9270: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9271: LD_EXP 39
9275: IFFALSE 9283
9277: PUSH
9278: CALL 9493 0 0
9282: AND
9283: IFFALSE 9291
9285: PUSH
9286: LD_OWVAR 4
9290: AND
9291: IFFALSE 9490
9293: GO 9295
9295: DISABLE
9296: LD_INT 0
9298: PPUSH
9299: PPUSH
// begin canWin := false ;
9300: LD_ADDR_VAR 0 2
9304: PUSH
9305: LD_INT 0
9307: ST_TO_ADDR
// if not HasPower ( your_side ) then
9308: LD_OWVAR 2
9312: PPUSH
9313: CALL 9535 0 1
9317: NOT
9318: IFFALSE 9329
// begin Multiplayer_Loose_Message ;
9320: CALL_OW 521
// enable ( mpLose ) ;
9324: LD_INT 102
9326: ENABLE_MARKED
// end else
9327: GO 9490
// begin canWin := true ;
9329: LD_ADDR_VAR 0 2
9333: PUSH
9334: LD_INT 1
9336: ST_TO_ADDR
// for i := 1 to 8 do
9337: LD_ADDR_VAR 0 1
9341: PUSH
9342: DOUBLE
9343: LD_INT 1
9345: DEC
9346: ST_TO_ADDR
9347: LD_INT 8
9349: PUSH
9350: FOR_TO
9351: IFFALSE 9476
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9353: LD_EXP 7
9357: PUSH
9358: LD_VAR 0 1
9362: ARRAY
9363: IFFALSE 9376
9365: PUSH
9366: LD_VAR 0 1
9370: PPUSH
9371: CALL_OW 108
9375: AND
9376: IFFALSE 9390
9378: PUSH
9379: LD_VAR 0 1
9383: PUSH
9384: LD_OWVAR 2
9388: NONEQUAL
9389: AND
9390: IFFALSE 9474
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9392: LD_EXP 8
9396: PUSH
9397: LD_VAR 0 1
9401: ARRAY
9402: NOT
9403: IFTRUE 9451
9405: PUSH
9406: LD_EXP 8
9410: PUSH
9411: LD_VAR 0 1
9415: ARRAY
9416: PUSH
9417: LD_EXP 8
9421: PUSH
9422: LD_OWVAR 2
9426: ARRAY
9427: NONEQUAL
9428: IFFALSE 9450
9430: PUSH
9431: LD_OWVAR 2
9435: PPUSH
9436: LD_VAR 0 1
9440: PPUSH
9441: CALL_OW 81
9445: PUSH
9446: LD_INT 1
9448: NONEQUAL
9449: AND
9450: OR
9451: IFFALSE 9474
// if HasPower ( i ) then
9453: LD_VAR 0 1
9457: PPUSH
9458: CALL 9535 0 1
9462: IFFALSE 9474
// begin canWin := false ;
9464: LD_ADDR_VAR 0 2
9468: PUSH
9469: LD_INT 0
9471: ST_TO_ADDR
// break ;
9472: GO 9476
// end ;
9474: GO 9350
9476: POP
9477: POP
// if canWin then
9478: LD_VAR 0 2
9482: IFFALSE 9489
// enable ( mpWin ) else
9484: LD_INT 101
9486: ENABLE_MARKED
9487: GO 9490
// enable ;
9489: ENABLE
// end ; end ;
9490: PPOPN 2
9492: END
// function CanWinLoose ; begin
9493: LD_INT 0
9495: PPUSH
// result := true ;
9496: LD_ADDR_VAR 0 1
9500: PUSH
9501: LD_INT 1
9503: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9504: CALL_OW 531
9508: IFFALSE 9520
9510: PUSH
9511: CALL_OW 519
9515: PUSH
9516: LD_INT 1
9518: GREATER
9519: AND
9520: IFFALSE 9530
// result := false ;
9522: LD_ADDR_VAR 0 1
9526: PUSH
9527: LD_INT 0
9529: ST_TO_ADDR
// end ;
9530: LD_VAR 0 1
9534: RET
// function HasPower ( i ) ; begin
9535: LD_INT 0
9537: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9538: LD_ADDR_VAR 0 2
9542: PUSH
9543: LD_INT 22
9545: PUSH
9546: LD_VAR 0 1
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: LD_INT 2
9557: PUSH
9558: LD_INT 21
9560: PUSH
9561: LD_INT 1
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PUSH
9568: LD_INT 33
9570: PUSH
9571: LD_INT 3
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: PUSH
9578: LD_INT 33
9580: PUSH
9581: LD_INT 5
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PPUSH
9598: CALL_OW 69
9602: ST_TO_ADDR
// end ; end_of_file
9603: LD_VAR 0 2
9607: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9608: LD_EXP 39
9612: IFFALSE 9655
9614: GO 9616
9616: DISABLE
9617: LD_INT 0
9619: PPUSH
// begin for i := 1 to 8 do
9620: LD_ADDR_VAR 0 1
9624: PUSH
9625: DOUBLE
9626: LD_INT 1
9628: DEC
9629: ST_TO_ADDR
9630: LD_INT 8
9632: PUSH
9633: FOR_TO
9634: IFFALSE 9653
// SetRestrict ( b_depot , i , state_disabled ) ;
9636: LD_INT 0
9638: PPUSH
9639: LD_VAR 0 1
9643: PPUSH
9644: LD_INT 0
9646: PPUSH
9647: CALL_OW 324
9651: GO 9633
9653: POP
9654: POP
// end ;
9655: PPOPN 1
9657: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9658: LD_EXP 39
9662: IFFALSE 9670
9664: PUSH
9665: CALL 9880 0 0
9669: AND
9670: IFFALSE 9678
9672: PUSH
9673: LD_OWVAR 4
9677: AND
9678: IFFALSE 9877
9680: GO 9682
9682: DISABLE
9683: LD_INT 0
9685: PPUSH
9686: PPUSH
// begin canWin := false ;
9687: LD_ADDR_VAR 0 2
9691: PUSH
9692: LD_INT 0
9694: ST_TO_ADDR
// if not HasPower ( your_side ) then
9695: LD_OWVAR 2
9699: PPUSH
9700: CALL 9922 0 1
9704: NOT
9705: IFFALSE 9716
// begin Multiplayer_Loose_Message ;
9707: CALL_OW 521
// enable ( mpLose ) ;
9711: LD_INT 102
9713: ENABLE_MARKED
// end else
9714: GO 9877
// begin canWin := true ;
9716: LD_ADDR_VAR 0 2
9720: PUSH
9721: LD_INT 1
9723: ST_TO_ADDR
// for i := 1 to 8 do
9724: LD_ADDR_VAR 0 1
9728: PUSH
9729: DOUBLE
9730: LD_INT 1
9732: DEC
9733: ST_TO_ADDR
9734: LD_INT 8
9736: PUSH
9737: FOR_TO
9738: IFFALSE 9863
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9740: LD_EXP 7
9744: PUSH
9745: LD_VAR 0 1
9749: ARRAY
9750: IFFALSE 9763
9752: PUSH
9753: LD_VAR 0 1
9757: PPUSH
9758: CALL_OW 108
9762: AND
9763: IFFALSE 9777
9765: PUSH
9766: LD_VAR 0 1
9770: PUSH
9771: LD_OWVAR 2
9775: NONEQUAL
9776: AND
9777: IFFALSE 9861
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9779: LD_EXP 8
9783: PUSH
9784: LD_VAR 0 1
9788: ARRAY
9789: NOT
9790: IFTRUE 9838
9792: PUSH
9793: LD_EXP 8
9797: PUSH
9798: LD_VAR 0 1
9802: ARRAY
9803: PUSH
9804: LD_EXP 8
9808: PUSH
9809: LD_OWVAR 2
9813: ARRAY
9814: NONEQUAL
9815: IFFALSE 9837
9817: PUSH
9818: LD_OWVAR 2
9822: PPUSH
9823: LD_VAR 0 1
9827: PPUSH
9828: CALL_OW 81
9832: PUSH
9833: LD_INT 1
9835: NONEQUAL
9836: AND
9837: OR
9838: IFFALSE 9861
// if HasPower ( i ) then
9840: LD_VAR 0 1
9844: PPUSH
9845: CALL 9922 0 1
9849: IFFALSE 9861
// begin canWin := false ;
9851: LD_ADDR_VAR 0 2
9855: PUSH
9856: LD_INT 0
9858: ST_TO_ADDR
// break ;
9859: GO 9863
// end ;
9861: GO 9737
9863: POP
9864: POP
// if canWin then
9865: LD_VAR 0 2
9869: IFFALSE 9876
// enable ( mpWin ) else
9871: LD_INT 101
9873: ENABLE_MARKED
9874: GO 9877
// enable ;
9876: ENABLE
// end ; end ;
9877: PPOPN 2
9879: END
// function CanWinLoose ; begin
9880: LD_INT 0
9882: PPUSH
// result := true ;
9883: LD_ADDR_VAR 0 1
9887: PUSH
9888: LD_INT 1
9890: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9891: CALL_OW 531
9895: IFFALSE 9907
9897: PUSH
9898: CALL_OW 519
9902: PUSH
9903: LD_INT 1
9905: GREATER
9906: AND
9907: IFFALSE 9917
// result := false ;
9909: LD_ADDR_VAR 0 1
9913: PUSH
9914: LD_INT 0
9916: ST_TO_ADDR
// end ;
9917: LD_VAR 0 1
9921: RET
// function HasPower ( i ) ; begin
9922: LD_INT 0
9924: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9925: LD_INT 22
9927: PUSH
9928: LD_VAR 0 1
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: LD_INT 2
9939: PUSH
9940: LD_INT 30
9942: PUSH
9943: LD_INT 0
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 30
9952: PUSH
9953: LD_INT 1
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PPUSH
9969: CALL_OW 69
9973: NOT
9974: IFFALSE 9978
// exit ;
9976: GO 10043
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9978: LD_ADDR_VAR 0 2
9982: PUSH
9983: LD_INT 22
9985: PUSH
9986: LD_VAR 0 1
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: LD_INT 2
9997: PUSH
9998: LD_INT 21
10000: PUSH
10001: LD_INT 1
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: PUSH
10008: LD_INT 33
10010: PUSH
10011: LD_INT 3
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PUSH
10018: LD_INT 33
10020: PUSH
10021: LD_INT 5
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PPUSH
10038: CALL_OW 69
10042: ST_TO_ADDR
// end ; end_of_file
10043: LD_VAR 0 2
10047: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10048: LD_INT 0
10050: PPUSH
10051: PPUSH
// if exist_mode then
10052: LD_VAR 0 2
10056: IFFALSE 10102
// begin unit := CreateCharacter ( prefix & ident ) ;
10058: LD_ADDR_VAR 0 5
10062: PUSH
10063: LD_VAR 0 3
10067: PUSH
10068: LD_VAR 0 1
10072: STR
10073: PPUSH
10074: CALL_OW 34
10078: ST_TO_ADDR
// if unit then
10079: LD_VAR 0 5
10083: IFFALSE 10100
// DeleteCharacters ( prefix & ident ) ;
10085: LD_VAR 0 3
10089: PUSH
10090: LD_VAR 0 1
10094: STR
10095: PPUSH
10096: CALL_OW 40
// end else
10100: GO 10117
// unit := NewCharacter ( ident ) ;
10102: LD_ADDR_VAR 0 5
10106: PUSH
10107: LD_VAR 0 1
10111: PPUSH
10112: CALL_OW 25
10116: ST_TO_ADDR
// result := unit ;
10117: LD_ADDR_VAR 0 4
10121: PUSH
10122: LD_VAR 0 5
10126: ST_TO_ADDR
// end ;
10127: LD_VAR 0 4
10131: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10132: LD_INT 0
10134: PPUSH
10135: PPUSH
// if exist_mode then
10136: LD_VAR 0 2
10140: IFFALSE 10165
// unit := CreateCharacter ( prefix & ident ) else
10142: LD_ADDR_VAR 0 5
10146: PUSH
10147: LD_VAR 0 3
10151: PUSH
10152: LD_VAR 0 1
10156: STR
10157: PPUSH
10158: CALL_OW 34
10162: ST_TO_ADDR
10163: GO 10180
// unit := NewCharacter ( ident ) ;
10165: LD_ADDR_VAR 0 5
10169: PUSH
10170: LD_VAR 0 1
10174: PPUSH
10175: CALL_OW 25
10179: ST_TO_ADDR
// result := unit ;
10180: LD_ADDR_VAR 0 4
10184: PUSH
10185: LD_VAR 0 5
10189: ST_TO_ADDR
// end ;
10190: LD_VAR 0 4
10194: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10195: LD_INT 0
10197: PPUSH
10198: PPUSH
// if not side or not nation then
10199: LD_VAR 0 1
10203: NOT
10204: IFTRUE 10213
10206: PUSH
10207: LD_VAR 0 2
10211: NOT
10212: OR
10213: IFFALSE 10217
// exit ;
10215: GO 10987
// case nation of nation_american :
10217: LD_VAR 0 2
10221: PUSH
10222: LD_INT 1
10224: DOUBLE
10225: EQUAL
10226: IFTRUE 10230
10228: GO 10444
10230: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10231: LD_ADDR_VAR 0 4
10235: PUSH
10236: LD_INT 35
10238: PUSH
10239: LD_INT 45
10241: PUSH
10242: LD_INT 46
10244: PUSH
10245: LD_INT 47
10247: PUSH
10248: LD_INT 82
10250: PUSH
10251: LD_INT 83
10253: PUSH
10254: LD_INT 84
10256: PUSH
10257: LD_INT 85
10259: PUSH
10260: LD_INT 86
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: LD_INT 2
10268: PUSH
10269: LD_INT 6
10271: PUSH
10272: LD_INT 15
10274: PUSH
10275: LD_INT 16
10277: PUSH
10278: LD_INT 7
10280: PUSH
10281: LD_INT 12
10283: PUSH
10284: LD_INT 13
10286: PUSH
10287: LD_INT 10
10289: PUSH
10290: LD_INT 14
10292: PUSH
10293: LD_INT 20
10295: PUSH
10296: LD_INT 21
10298: PUSH
10299: LD_INT 22
10301: PUSH
10302: LD_INT 25
10304: PUSH
10305: LD_INT 32
10307: PUSH
10308: LD_INT 27
10310: PUSH
10311: LD_INT 36
10313: PUSH
10314: LD_INT 69
10316: PUSH
10317: LD_INT 39
10319: PUSH
10320: LD_INT 34
10322: PUSH
10323: LD_INT 40
10325: PUSH
10326: LD_INT 48
10328: PUSH
10329: LD_INT 49
10331: PUSH
10332: LD_INT 50
10334: PUSH
10335: LD_INT 51
10337: PUSH
10338: LD_INT 52
10340: PUSH
10341: LD_INT 53
10343: PUSH
10344: LD_INT 54
10346: PUSH
10347: LD_INT 55
10349: PUSH
10350: LD_INT 56
10352: PUSH
10353: LD_INT 57
10355: PUSH
10356: LD_INT 58
10358: PUSH
10359: LD_INT 59
10361: PUSH
10362: LD_INT 60
10364: PUSH
10365: LD_INT 61
10367: PUSH
10368: LD_INT 62
10370: PUSH
10371: LD_INT 80
10373: PUSH
10374: LD_INT 82
10376: PUSH
10377: LD_INT 83
10379: PUSH
10380: LD_INT 84
10382: PUSH
10383: LD_INT 85
10385: PUSH
10386: LD_INT 86
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: ST_TO_ADDR
10442: GO 10909
10444: LD_INT 2
10446: DOUBLE
10447: EQUAL
10448: IFTRUE 10452
10450: GO 10678
10452: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10453: LD_ADDR_VAR 0 4
10457: PUSH
10458: LD_INT 35
10460: PUSH
10461: LD_INT 45
10463: PUSH
10464: LD_INT 46
10466: PUSH
10467: LD_INT 47
10469: PUSH
10470: LD_INT 82
10472: PUSH
10473: LD_INT 83
10475: PUSH
10476: LD_INT 84
10478: PUSH
10479: LD_INT 85
10481: PUSH
10482: LD_INT 87
10484: PUSH
10485: LD_INT 70
10487: PUSH
10488: LD_INT 1
10490: PUSH
10491: LD_INT 11
10493: PUSH
10494: LD_INT 3
10496: PUSH
10497: LD_INT 4
10499: PUSH
10500: LD_INT 5
10502: PUSH
10503: LD_INT 6
10505: PUSH
10506: LD_INT 15
10508: PUSH
10509: LD_INT 18
10511: PUSH
10512: LD_INT 7
10514: PUSH
10515: LD_INT 17
10517: PUSH
10518: LD_INT 8
10520: PUSH
10521: LD_INT 20
10523: PUSH
10524: LD_INT 21
10526: PUSH
10527: LD_INT 22
10529: PUSH
10530: LD_INT 72
10532: PUSH
10533: LD_INT 26
10535: PUSH
10536: LD_INT 69
10538: PUSH
10539: LD_INT 39
10541: PUSH
10542: LD_INT 40
10544: PUSH
10545: LD_INT 41
10547: PUSH
10548: LD_INT 42
10550: PUSH
10551: LD_INT 43
10553: PUSH
10554: LD_INT 48
10556: PUSH
10557: LD_INT 49
10559: PUSH
10560: LD_INT 50
10562: PUSH
10563: LD_INT 51
10565: PUSH
10566: LD_INT 52
10568: PUSH
10569: LD_INT 53
10571: PUSH
10572: LD_INT 54
10574: PUSH
10575: LD_INT 55
10577: PUSH
10578: LD_INT 56
10580: PUSH
10581: LD_INT 60
10583: PUSH
10584: LD_INT 61
10586: PUSH
10587: LD_INT 62
10589: PUSH
10590: LD_INT 66
10592: PUSH
10593: LD_INT 67
10595: PUSH
10596: LD_INT 68
10598: PUSH
10599: LD_INT 81
10601: PUSH
10602: LD_INT 82
10604: PUSH
10605: LD_INT 83
10607: PUSH
10608: LD_INT 84
10610: PUSH
10611: LD_INT 85
10613: PUSH
10614: LD_INT 87
10616: PUSH
10617: LD_INT 88
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: ST_TO_ADDR
10676: GO 10909
10678: LD_INT 3
10680: DOUBLE
10681: EQUAL
10682: IFTRUE 10686
10684: GO 10908
10686: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10687: LD_ADDR_VAR 0 4
10691: PUSH
10692: LD_INT 46
10694: PUSH
10695: LD_INT 47
10697: PUSH
10698: LD_INT 1
10700: PUSH
10701: LD_INT 2
10703: PUSH
10704: LD_INT 82
10706: PUSH
10707: LD_INT 83
10709: PUSH
10710: LD_INT 84
10712: PUSH
10713: LD_INT 85
10715: PUSH
10716: LD_INT 86
10718: PUSH
10719: LD_INT 11
10721: PUSH
10722: LD_INT 9
10724: PUSH
10725: LD_INT 20
10727: PUSH
10728: LD_INT 19
10730: PUSH
10731: LD_INT 21
10733: PUSH
10734: LD_INT 24
10736: PUSH
10737: LD_INT 22
10739: PUSH
10740: LD_INT 25
10742: PUSH
10743: LD_INT 28
10745: PUSH
10746: LD_INT 29
10748: PUSH
10749: LD_INT 30
10751: PUSH
10752: LD_INT 31
10754: PUSH
10755: LD_INT 37
10757: PUSH
10758: LD_INT 38
10760: PUSH
10761: LD_INT 32
10763: PUSH
10764: LD_INT 27
10766: PUSH
10767: LD_INT 33
10769: PUSH
10770: LD_INT 69
10772: PUSH
10773: LD_INT 39
10775: PUSH
10776: LD_INT 34
10778: PUSH
10779: LD_INT 40
10781: PUSH
10782: LD_INT 71
10784: PUSH
10785: LD_INT 23
10787: PUSH
10788: LD_INT 44
10790: PUSH
10791: LD_INT 48
10793: PUSH
10794: LD_INT 49
10796: PUSH
10797: LD_INT 50
10799: PUSH
10800: LD_INT 51
10802: PUSH
10803: LD_INT 52
10805: PUSH
10806: LD_INT 53
10808: PUSH
10809: LD_INT 54
10811: PUSH
10812: LD_INT 55
10814: PUSH
10815: LD_INT 56
10817: PUSH
10818: LD_INT 57
10820: PUSH
10821: LD_INT 58
10823: PUSH
10824: LD_INT 59
10826: PUSH
10827: LD_INT 63
10829: PUSH
10830: LD_INT 64
10832: PUSH
10833: LD_INT 65
10835: PUSH
10836: LD_INT 82
10838: PUSH
10839: LD_INT 83
10841: PUSH
10842: LD_INT 84
10844: PUSH
10845: LD_INT 85
10847: PUSH
10848: LD_INT 86
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: ST_TO_ADDR
10906: GO 10909
10908: POP
// if state > - 1 and state < 3 then
10909: LD_VAR 0 3
10913: PUSH
10914: LD_INT 1
10916: NEG
10917: GREATER
10918: IFFALSE 10930
10920: PUSH
10921: LD_VAR 0 3
10925: PUSH
10926: LD_INT 3
10928: LESS
10929: AND
10930: IFFALSE 10987
// for i in result do
10932: LD_ADDR_VAR 0 5
10936: PUSH
10937: LD_VAR 0 4
10941: PUSH
10942: FOR_IN
10943: IFFALSE 10985
// if GetTech ( i , side ) <> state then
10945: LD_VAR 0 5
10949: PPUSH
10950: LD_VAR 0 1
10954: PPUSH
10955: CALL_OW 321
10959: PUSH
10960: LD_VAR 0 3
10964: NONEQUAL
10965: IFFALSE 10983
// result := result diff i ;
10967: LD_ADDR_VAR 0 4
10971: PUSH
10972: LD_VAR 0 4
10976: PUSH
10977: LD_VAR 0 5
10981: DIFF
10982: ST_TO_ADDR
10983: GO 10942
10985: POP
10986: POP
// end ;
10987: LD_VAR 0 4
10991: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10992: LD_INT 0
10994: PPUSH
10995: PPUSH
10996: PPUSH
// result := true ;
10997: LD_ADDR_VAR 0 3
11001: PUSH
11002: LD_INT 1
11004: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11005: LD_ADDR_VAR 0 5
11009: PUSH
11010: LD_VAR 0 2
11014: PPUSH
11015: CALL_OW 480
11019: ST_TO_ADDR
// if not tmp then
11020: LD_VAR 0 5
11024: NOT
11025: IFFALSE 11029
// exit ;
11027: GO 11078
// for i in tmp do
11029: LD_ADDR_VAR 0 4
11033: PUSH
11034: LD_VAR 0 5
11038: PUSH
11039: FOR_IN
11040: IFFALSE 11076
// if GetTech ( i , side ) <> state_researched then
11042: LD_VAR 0 4
11046: PPUSH
11047: LD_VAR 0 1
11051: PPUSH
11052: CALL_OW 321
11056: PUSH
11057: LD_INT 2
11059: NONEQUAL
11060: IFFALSE 11074
// begin result := false ;
11062: LD_ADDR_VAR 0 3
11066: PUSH
11067: LD_INT 0
11069: ST_TO_ADDR
// exit ;
11070: POP
11071: POP
11072: GO 11078
// end ;
11074: GO 11039
11076: POP
11077: POP
// end ;
11078: LD_VAR 0 3
11082: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11083: LD_INT 0
11085: PPUSH
11086: PPUSH
11087: PPUSH
11088: PPUSH
11089: PPUSH
11090: PPUSH
11091: PPUSH
11092: PPUSH
11093: PPUSH
11094: PPUSH
11095: PPUSH
11096: PPUSH
11097: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11098: LD_VAR 0 1
11102: NOT
11103: IFTRUE 11120
11105: PUSH
11106: LD_VAR 0 1
11110: PPUSH
11111: CALL_OW 257
11115: PUSH
11116: LD_INT 9
11118: NONEQUAL
11119: OR
11120: IFFALSE 11124
// exit ;
11122: GO 11703
// side := GetSide ( unit ) ;
11124: LD_ADDR_VAR 0 9
11128: PUSH
11129: LD_VAR 0 1
11133: PPUSH
11134: CALL_OW 255
11138: ST_TO_ADDR
// tech_space := tech_spacanom ;
11139: LD_ADDR_VAR 0 12
11143: PUSH
11144: LD_INT 29
11146: ST_TO_ADDR
// tech_time := tech_taurad ;
11147: LD_ADDR_VAR 0 13
11151: PUSH
11152: LD_INT 28
11154: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11155: LD_ADDR_VAR 0 11
11159: PUSH
11160: LD_VAR 0 1
11164: PPUSH
11165: CALL_OW 310
11169: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11170: LD_VAR 0 11
11174: PPUSH
11175: CALL_OW 247
11179: PUSH
11180: LD_INT 2
11182: EQUAL
11183: IFFALSE 11187
// exit ;
11185: GO 11703
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11187: LD_ADDR_VAR 0 8
11191: PUSH
11192: LD_INT 81
11194: PUSH
11195: LD_VAR 0 9
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PUSH
11204: LD_INT 3
11206: PUSH
11207: LD_INT 21
11209: PUSH
11210: LD_INT 3
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PPUSH
11225: CALL_OW 69
11229: ST_TO_ADDR
// if not tmp then
11230: LD_VAR 0 8
11234: NOT
11235: IFFALSE 11239
// exit ;
11237: GO 11703
// if in_unit then
11239: LD_VAR 0 11
11243: IFFALSE 11267
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11245: LD_ADDR_VAR 0 10
11249: PUSH
11250: LD_VAR 0 8
11254: PPUSH
11255: LD_VAR 0 11
11259: PPUSH
11260: CALL_OW 74
11264: ST_TO_ADDR
11265: GO 11287
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11267: LD_ADDR_VAR 0 10
11271: PUSH
11272: LD_VAR 0 8
11276: PPUSH
11277: LD_VAR 0 1
11281: PPUSH
11282: CALL_OW 74
11286: ST_TO_ADDR
// if not enemy then
11287: LD_VAR 0 10
11291: NOT
11292: IFFALSE 11296
// exit ;
11294: GO 11703
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11296: LD_VAR 0 11
11300: IFFALSE 11322
11302: PUSH
11303: LD_VAR 0 11
11307: PPUSH
11308: LD_VAR 0 10
11312: PPUSH
11313: CALL_OW 296
11317: PUSH
11318: LD_INT 13
11320: GREATER
11321: AND
11322: IFTRUE 11344
11324: PUSH
11325: LD_VAR 0 1
11329: PPUSH
11330: LD_VAR 0 10
11334: PPUSH
11335: CALL_OW 296
11339: PUSH
11340: LD_INT 12
11342: GREATER
11343: OR
11344: IFFALSE 11348
// exit ;
11346: GO 11703
// missile := [ 1 ] ;
11348: LD_ADDR_VAR 0 14
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11359: LD_VAR 0 9
11363: PPUSH
11364: LD_VAR 0 12
11368: PPUSH
11369: CALL_OW 325
11373: IFFALSE 11402
// missile := Replace ( missile , missile + 1 , 2 ) ;
11375: LD_ADDR_VAR 0 14
11379: PUSH
11380: LD_VAR 0 14
11384: PPUSH
11385: LD_VAR 0 14
11389: PUSH
11390: LD_INT 1
11392: PLUS
11393: PPUSH
11394: LD_INT 2
11396: PPUSH
11397: CALL_OW 1
11401: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11402: LD_VAR 0 9
11406: PPUSH
11407: LD_VAR 0 13
11411: PPUSH
11412: CALL_OW 325
11416: IFFALSE 11440
11418: PUSH
11419: LD_VAR 0 10
11423: PPUSH
11424: CALL_OW 255
11428: PPUSH
11429: LD_VAR 0 13
11433: PPUSH
11434: CALL_OW 325
11438: NOT
11439: AND
11440: IFFALSE 11469
// missile := Replace ( missile , missile + 1 , 3 ) ;
11442: LD_ADDR_VAR 0 14
11446: PUSH
11447: LD_VAR 0 14
11451: PPUSH
11452: LD_VAR 0 14
11456: PUSH
11457: LD_INT 1
11459: PLUS
11460: PPUSH
11461: LD_INT 3
11463: PPUSH
11464: CALL_OW 1
11468: ST_TO_ADDR
// if missile < 2 then
11469: LD_VAR 0 14
11473: PUSH
11474: LD_INT 2
11476: LESS
11477: IFFALSE 11481
// exit ;
11479: GO 11703
// x := GetX ( enemy ) ;
11481: LD_ADDR_VAR 0 4
11485: PUSH
11486: LD_VAR 0 10
11490: PPUSH
11491: CALL_OW 250
11495: ST_TO_ADDR
// y := GetY ( enemy ) ;
11496: LD_ADDR_VAR 0 5
11500: PUSH
11501: LD_VAR 0 10
11505: PPUSH
11506: CALL_OW 251
11510: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11511: LD_ADDR_VAR 0 6
11515: PUSH
11516: LD_VAR 0 4
11520: PUSH
11521: LD_INT 1
11523: NEG
11524: PPUSH
11525: LD_INT 1
11527: PPUSH
11528: CALL_OW 12
11532: PLUS
11533: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11534: LD_ADDR_VAR 0 7
11538: PUSH
11539: LD_VAR 0 5
11543: PUSH
11544: LD_INT 1
11546: NEG
11547: PPUSH
11548: LD_INT 1
11550: PPUSH
11551: CALL_OW 12
11555: PLUS
11556: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11557: LD_VAR 0 6
11561: PPUSH
11562: LD_VAR 0 7
11566: PPUSH
11567: CALL_OW 488
11571: NOT
11572: IFFALSE 11594
// begin _x := x ;
11574: LD_ADDR_VAR 0 6
11578: PUSH
11579: LD_VAR 0 4
11583: ST_TO_ADDR
// _y := y ;
11584: LD_ADDR_VAR 0 7
11588: PUSH
11589: LD_VAR 0 5
11593: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11594: LD_ADDR_VAR 0 3
11598: PUSH
11599: LD_INT 1
11601: PPUSH
11602: LD_VAR 0 14
11606: PPUSH
11607: CALL_OW 12
11611: ST_TO_ADDR
// case i of 1 :
11612: LD_VAR 0 3
11616: PUSH
11617: LD_INT 1
11619: DOUBLE
11620: EQUAL
11621: IFTRUE 11625
11623: GO 11642
11625: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11626: LD_VAR 0 1
11630: PPUSH
11631: LD_VAR 0 10
11635: PPUSH
11636: CALL_OW 115
11640: GO 11703
11642: LD_INT 2
11644: DOUBLE
11645: EQUAL
11646: IFTRUE 11650
11648: GO 11672
11650: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11651: LD_VAR 0 1
11655: PPUSH
11656: LD_VAR 0 6
11660: PPUSH
11661: LD_VAR 0 7
11665: PPUSH
11666: CALL_OW 153
11670: GO 11703
11672: LD_INT 3
11674: DOUBLE
11675: EQUAL
11676: IFTRUE 11680
11678: GO 11702
11680: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11681: LD_VAR 0 1
11685: PPUSH
11686: LD_VAR 0 6
11690: PPUSH
11691: LD_VAR 0 7
11695: PPUSH
11696: CALL_OW 154
11700: GO 11703
11702: POP
// end ;
11703: LD_VAR 0 2
11707: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11708: LD_INT 0
11710: PPUSH
11711: PPUSH
11712: PPUSH
11713: PPUSH
11714: PPUSH
11715: PPUSH
// if not unit or not building then
11716: LD_VAR 0 1
11720: NOT
11721: IFTRUE 11730
11723: PUSH
11724: LD_VAR 0 2
11728: NOT
11729: OR
11730: IFFALSE 11734
// exit ;
11732: GO 11892
// x := GetX ( building ) ;
11734: LD_ADDR_VAR 0 5
11738: PUSH
11739: LD_VAR 0 2
11743: PPUSH
11744: CALL_OW 250
11748: ST_TO_ADDR
// y := GetY ( building ) ;
11749: LD_ADDR_VAR 0 6
11753: PUSH
11754: LD_VAR 0 2
11758: PPUSH
11759: CALL_OW 251
11763: ST_TO_ADDR
// for i := 0 to 5 do
11764: LD_ADDR_VAR 0 4
11768: PUSH
11769: DOUBLE
11770: LD_INT 0
11772: DEC
11773: ST_TO_ADDR
11774: LD_INT 5
11776: PUSH
11777: FOR_TO
11778: IFFALSE 11890
// begin _x := ShiftX ( x , i , 3 ) ;
11780: LD_ADDR_VAR 0 7
11784: PUSH
11785: LD_VAR 0 5
11789: PPUSH
11790: LD_VAR 0 4
11794: PPUSH
11795: LD_INT 3
11797: PPUSH
11798: CALL_OW 272
11802: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11803: LD_ADDR_VAR 0 8
11807: PUSH
11808: LD_VAR 0 6
11812: PPUSH
11813: LD_VAR 0 4
11817: PPUSH
11818: LD_INT 3
11820: PPUSH
11821: CALL_OW 273
11825: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11826: LD_VAR 0 7
11830: PPUSH
11831: LD_VAR 0 8
11835: PPUSH
11836: CALL_OW 488
11840: NOT
11841: IFFALSE 11845
// continue ;
11843: GO 11777
// if HexInfo ( _x , _y ) = 0 then
11845: LD_VAR 0 7
11849: PPUSH
11850: LD_VAR 0 8
11854: PPUSH
11855: CALL_OW 428
11859: PUSH
11860: LD_INT 0
11862: EQUAL
11863: IFFALSE 11888
// begin ComMoveXY ( unit , _x , _y ) ;
11865: LD_VAR 0 1
11869: PPUSH
11870: LD_VAR 0 7
11874: PPUSH
11875: LD_VAR 0 8
11879: PPUSH
11880: CALL_OW 111
// exit ;
11884: POP
11885: POP
11886: GO 11892
// end ; end ;
11888: GO 11777
11890: POP
11891: POP
// end ;
11892: LD_VAR 0 3
11896: RET
// export function ScanBase ( side , base_area ) ; begin
11897: LD_INT 0
11899: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11900: LD_ADDR_VAR 0 3
11904: PUSH
11905: LD_VAR 0 2
11909: PPUSH
11910: LD_INT 81
11912: PUSH
11913: LD_VAR 0 1
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PPUSH
11922: CALL_OW 70
11926: ST_TO_ADDR
// end ;
11927: LD_VAR 0 3
11931: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11932: LD_INT 0
11934: PPUSH
11935: PPUSH
11936: PPUSH
11937: PPUSH
// result := false ;
11938: LD_ADDR_VAR 0 2
11942: PUSH
11943: LD_INT 0
11945: ST_TO_ADDR
// side := GetSide ( unit ) ;
11946: LD_ADDR_VAR 0 3
11950: PUSH
11951: LD_VAR 0 1
11955: PPUSH
11956: CALL_OW 255
11960: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11961: LD_ADDR_VAR 0 4
11965: PUSH
11966: LD_VAR 0 1
11970: PPUSH
11971: CALL_OW 248
11975: ST_TO_ADDR
// case nat of 1 :
11976: LD_VAR 0 4
11980: PUSH
11981: LD_INT 1
11983: DOUBLE
11984: EQUAL
11985: IFTRUE 11989
11987: GO 12000
11989: POP
// tech := tech_lassight ; 2 :
11990: LD_ADDR_VAR 0 5
11994: PUSH
11995: LD_INT 12
11997: ST_TO_ADDR
11998: GO 12039
12000: LD_INT 2
12002: DOUBLE
12003: EQUAL
12004: IFTRUE 12008
12006: GO 12019
12008: POP
// tech := tech_mortar ; 3 :
12009: LD_ADDR_VAR 0 5
12013: PUSH
12014: LD_INT 41
12016: ST_TO_ADDR
12017: GO 12039
12019: LD_INT 3
12021: DOUBLE
12022: EQUAL
12023: IFTRUE 12027
12025: GO 12038
12027: POP
// tech := tech_bazooka ; end ;
12028: LD_ADDR_VAR 0 5
12032: PUSH
12033: LD_INT 44
12035: ST_TO_ADDR
12036: GO 12039
12038: POP
// if Researched ( side , tech ) then
12039: LD_VAR 0 3
12043: PPUSH
12044: LD_VAR 0 5
12048: PPUSH
12049: CALL_OW 325
12053: IFFALSE 12080
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12055: LD_ADDR_VAR 0 2
12059: PUSH
12060: LD_INT 5
12062: PUSH
12063: LD_INT 8
12065: PUSH
12066: LD_INT 9
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: LIST
12073: PUSH
12074: LD_VAR 0 4
12078: ARRAY
12079: ST_TO_ADDR
// end ;
12080: LD_VAR 0 2
12084: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12085: LD_INT 0
12087: PPUSH
12088: PPUSH
12089: PPUSH
// if not mines then
12090: LD_VAR 0 2
12094: NOT
12095: IFFALSE 12099
// exit ;
12097: GO 12243
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12099: LD_ADDR_VAR 0 5
12103: PUSH
12104: LD_INT 81
12106: PUSH
12107: LD_VAR 0 1
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 3
12118: PUSH
12119: LD_INT 21
12121: PUSH
12122: LD_INT 3
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PPUSH
12137: CALL_OW 69
12141: ST_TO_ADDR
// for i in mines do
12142: LD_ADDR_VAR 0 4
12146: PUSH
12147: LD_VAR 0 2
12151: PUSH
12152: FOR_IN
12153: IFFALSE 12241
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12155: LD_VAR 0 4
12159: PUSH
12160: LD_INT 1
12162: ARRAY
12163: PPUSH
12164: LD_VAR 0 4
12168: PUSH
12169: LD_INT 2
12171: ARRAY
12172: PPUSH
12173: CALL_OW 458
12177: NOT
12178: IFFALSE 12182
// continue ;
12180: GO 12152
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12182: LD_VAR 0 4
12186: PUSH
12187: LD_INT 1
12189: ARRAY
12190: PPUSH
12191: LD_VAR 0 4
12195: PUSH
12196: LD_INT 2
12198: ARRAY
12199: PPUSH
12200: CALL_OW 428
12204: PUSH
12205: LD_VAR 0 5
12209: IN
12210: IFFALSE 12239
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12212: LD_VAR 0 4
12216: PUSH
12217: LD_INT 1
12219: ARRAY
12220: PPUSH
12221: LD_VAR 0 4
12225: PUSH
12226: LD_INT 2
12228: ARRAY
12229: PPUSH
12230: LD_VAR 0 1
12234: PPUSH
12235: CALL_OW 456
// end ;
12239: GO 12152
12241: POP
12242: POP
// end ;
12243: LD_VAR 0 3
12247: RET
// export function Count ( array ) ; begin
12248: LD_INT 0
12250: PPUSH
// result := array + 0 ;
12251: LD_ADDR_VAR 0 2
12255: PUSH
12256: LD_VAR 0 1
12260: PUSH
12261: LD_INT 0
12263: PLUS
12264: ST_TO_ADDR
// end ;
12265: LD_VAR 0 2
12269: RET
// export function IsEmpty ( building ) ; begin
12270: LD_INT 0
12272: PPUSH
// if not building then
12273: LD_VAR 0 1
12277: NOT
12278: IFFALSE 12282
// exit ;
12280: GO 12325
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12282: LD_ADDR_VAR 0 2
12286: PUSH
12287: LD_VAR 0 1
12291: PUSH
12292: LD_INT 22
12294: PUSH
12295: LD_VAR 0 1
12299: PPUSH
12300: CALL_OW 255
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PUSH
12309: LD_INT 58
12311: PUSH
12312: EMPTY
12313: LIST
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PPUSH
12319: CALL_OW 69
12323: IN
12324: ST_TO_ADDR
// end ;
12325: LD_VAR 0 2
12329: RET
// export function IsNotFull ( building ) ; var places ; begin
12330: LD_INT 0
12332: PPUSH
12333: PPUSH
// if not building then
12334: LD_VAR 0 1
12338: NOT
12339: IFFALSE 12343
// exit ;
12341: GO 12371
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12343: LD_ADDR_VAR 0 2
12347: PUSH
12348: LD_VAR 0 1
12352: PPUSH
12353: LD_INT 3
12355: PUSH
12356: LD_INT 62
12358: PUSH
12359: EMPTY
12360: LIST
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PPUSH
12366: CALL_OW 72
12370: ST_TO_ADDR
// end ;
12371: LD_VAR 0 2
12375: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12376: LD_INT 0
12378: PPUSH
12379: PPUSH
12380: PPUSH
12381: PPUSH
// tmp := [ ] ;
12382: LD_ADDR_VAR 0 3
12386: PUSH
12387: EMPTY
12388: ST_TO_ADDR
// list := [ ] ;
12389: LD_ADDR_VAR 0 5
12393: PUSH
12394: EMPTY
12395: ST_TO_ADDR
// for i = 16 to 25 do
12396: LD_ADDR_VAR 0 4
12400: PUSH
12401: DOUBLE
12402: LD_INT 16
12404: DEC
12405: ST_TO_ADDR
12406: LD_INT 25
12408: PUSH
12409: FOR_TO
12410: IFFALSE 12483
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12412: LD_ADDR_VAR 0 3
12416: PUSH
12417: LD_VAR 0 3
12421: PUSH
12422: LD_INT 22
12424: PUSH
12425: LD_VAR 0 1
12429: PPUSH
12430: CALL_OW 255
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 91
12441: PUSH
12442: LD_VAR 0 1
12446: PUSH
12447: LD_INT 6
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: LIST
12454: PUSH
12455: LD_INT 30
12457: PUSH
12458: LD_VAR 0 4
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: LIST
12471: PUSH
12472: EMPTY
12473: LIST
12474: PPUSH
12475: CALL_OW 69
12479: ADD
12480: ST_TO_ADDR
12481: GO 12409
12483: POP
12484: POP
// for i = 1 to tmp do
12485: LD_ADDR_VAR 0 4
12489: PUSH
12490: DOUBLE
12491: LD_INT 1
12493: DEC
12494: ST_TO_ADDR
12495: LD_VAR 0 3
12499: PUSH
12500: FOR_TO
12501: IFFALSE 12589
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12503: LD_ADDR_VAR 0 5
12507: PUSH
12508: LD_VAR 0 5
12512: PUSH
12513: LD_VAR 0 3
12517: PUSH
12518: LD_VAR 0 4
12522: ARRAY
12523: PPUSH
12524: CALL_OW 266
12528: PUSH
12529: LD_VAR 0 3
12533: PUSH
12534: LD_VAR 0 4
12538: ARRAY
12539: PPUSH
12540: CALL_OW 250
12544: PUSH
12545: LD_VAR 0 3
12549: PUSH
12550: LD_VAR 0 4
12554: ARRAY
12555: PPUSH
12556: CALL_OW 251
12560: PUSH
12561: LD_VAR 0 3
12565: PUSH
12566: LD_VAR 0 4
12570: ARRAY
12571: PPUSH
12572: CALL_OW 254
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: PUSH
12583: EMPTY
12584: LIST
12585: ADD
12586: ST_TO_ADDR
12587: GO 12500
12589: POP
12590: POP
// result := list ;
12591: LD_ADDR_VAR 0 2
12595: PUSH
12596: LD_VAR 0 5
12600: ST_TO_ADDR
// end ;
12601: LD_VAR 0 2
12605: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12606: LD_INT 0
12608: PPUSH
12609: PPUSH
12610: PPUSH
12611: PPUSH
12612: PPUSH
12613: PPUSH
12614: PPUSH
// if not factory then
12615: LD_VAR 0 1
12619: NOT
12620: IFFALSE 12624
// exit ;
12622: GO 13227
// if control = control_apeman then
12624: LD_VAR 0 4
12628: PUSH
12629: LD_INT 5
12631: EQUAL
12632: IFFALSE 12741
// begin tmp := UnitsInside ( factory ) ;
12634: LD_ADDR_VAR 0 8
12638: PUSH
12639: LD_VAR 0 1
12643: PPUSH
12644: CALL_OW 313
12648: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12649: LD_VAR 0 8
12653: PPUSH
12654: LD_INT 25
12656: PUSH
12657: LD_INT 12
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PPUSH
12664: CALL_OW 72
12668: NOT
12669: IFFALSE 12679
// control := control_manual ;
12671: LD_ADDR_VAR 0 4
12675: PUSH
12676: LD_INT 1
12678: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12679: LD_ADDR_VAR 0 8
12683: PUSH
12684: LD_VAR 0 1
12688: PPUSH
12689: CALL 12376 0 1
12693: ST_TO_ADDR
// if tmp then
12694: LD_VAR 0 8
12698: IFFALSE 12741
// begin for i in tmp do
12700: LD_ADDR_VAR 0 7
12704: PUSH
12705: LD_VAR 0 8
12709: PUSH
12710: FOR_IN
12711: IFFALSE 12739
// if i [ 1 ] = b_ext_radio then
12713: LD_VAR 0 7
12717: PUSH
12718: LD_INT 1
12720: ARRAY
12721: PUSH
12722: LD_INT 22
12724: EQUAL
12725: IFFALSE 12737
// begin control := control_remote ;
12727: LD_ADDR_VAR 0 4
12731: PUSH
12732: LD_INT 2
12734: ST_TO_ADDR
// break ;
12735: GO 12739
// end ;
12737: GO 12710
12739: POP
12740: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12741: LD_VAR 0 1
12745: PPUSH
12746: LD_VAR 0 2
12750: PPUSH
12751: LD_VAR 0 3
12755: PPUSH
12756: LD_VAR 0 4
12760: PPUSH
12761: LD_VAR 0 5
12765: PPUSH
12766: CALL_OW 448
12770: IFFALSE 12805
// begin result := [ chassis , engine , control , weapon ] ;
12772: LD_ADDR_VAR 0 6
12776: PUSH
12777: LD_VAR 0 2
12781: PUSH
12782: LD_VAR 0 3
12786: PUSH
12787: LD_VAR 0 4
12791: PUSH
12792: LD_VAR 0 5
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: ST_TO_ADDR
// exit ;
12803: GO 13227
// end ; _chassis := AvailableChassisList ( factory ) ;
12805: LD_ADDR_VAR 0 9
12809: PUSH
12810: LD_VAR 0 1
12814: PPUSH
12815: CALL_OW 475
12819: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12820: LD_ADDR_VAR 0 11
12824: PUSH
12825: LD_VAR 0 1
12829: PPUSH
12830: CALL_OW 476
12834: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12835: LD_ADDR_VAR 0 12
12839: PUSH
12840: LD_VAR 0 1
12844: PPUSH
12845: CALL_OW 477
12849: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12850: LD_ADDR_VAR 0 10
12854: PUSH
12855: LD_VAR 0 1
12859: PPUSH
12860: CALL_OW 478
12864: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12865: LD_VAR 0 9
12869: NOT
12870: IFTRUE 12879
12872: PUSH
12873: LD_VAR 0 11
12877: NOT
12878: OR
12879: IFTRUE 12888
12881: PUSH
12882: LD_VAR 0 12
12886: NOT
12887: OR
12888: IFTRUE 12897
12890: PUSH
12891: LD_VAR 0 10
12895: NOT
12896: OR
12897: IFFALSE 12932
// begin result := [ chassis , engine , control , weapon ] ;
12899: LD_ADDR_VAR 0 6
12903: PUSH
12904: LD_VAR 0 2
12908: PUSH
12909: LD_VAR 0 3
12913: PUSH
12914: LD_VAR 0 4
12918: PUSH
12919: LD_VAR 0 5
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: ST_TO_ADDR
// exit ;
12930: GO 13227
// end ; if not chassis in _chassis then
12932: LD_VAR 0 2
12936: PUSH
12937: LD_VAR 0 9
12941: IN
12942: NOT
12943: IFFALSE 12969
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12945: LD_ADDR_VAR 0 2
12949: PUSH
12950: LD_VAR 0 9
12954: PUSH
12955: LD_INT 1
12957: PPUSH
12958: LD_VAR 0 9
12962: PPUSH
12963: CALL_OW 12
12967: ARRAY
12968: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12969: LD_VAR 0 2
12973: PPUSH
12974: LD_VAR 0 3
12978: PPUSH
12979: CALL 13232 0 2
12983: NOT
12984: IFFALSE 13045
// repeat engine := _engine [ 1 ] ;
12986: LD_ADDR_VAR 0 3
12990: PUSH
12991: LD_VAR 0 11
12995: PUSH
12996: LD_INT 1
12998: ARRAY
12999: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13000: LD_ADDR_VAR 0 11
13004: PUSH
13005: LD_VAR 0 11
13009: PPUSH
13010: LD_INT 1
13012: PPUSH
13013: CALL_OW 3
13017: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13018: LD_VAR 0 2
13022: PPUSH
13023: LD_VAR 0 3
13027: PPUSH
13028: CALL 13232 0 2
13032: IFTRUE 13043
13034: PUSH
13035: LD_VAR 0 11
13039: PUSH
13040: EMPTY
13041: EQUAL
13042: OR
13043: IFFALSE 12986
// if not control in _control then
13045: LD_VAR 0 4
13049: PUSH
13050: LD_VAR 0 12
13054: IN
13055: NOT
13056: IFFALSE 13082
// control := _control [ rand ( 1 , _control ) ] ;
13058: LD_ADDR_VAR 0 4
13062: PUSH
13063: LD_VAR 0 12
13067: PUSH
13068: LD_INT 1
13070: PPUSH
13071: LD_VAR 0 12
13075: PPUSH
13076: CALL_OW 12
13080: ARRAY
13081: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13082: LD_VAR 0 2
13086: PPUSH
13087: LD_VAR 0 5
13091: PPUSH
13092: CALL 13454 0 2
13096: NOT
13097: IFFALSE 13158
// repeat weapon := _weapon [ 1 ] ;
13099: LD_ADDR_VAR 0 5
13103: PUSH
13104: LD_VAR 0 10
13108: PUSH
13109: LD_INT 1
13111: ARRAY
13112: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13113: LD_ADDR_VAR 0 10
13117: PUSH
13118: LD_VAR 0 10
13122: PPUSH
13123: LD_INT 1
13125: PPUSH
13126: CALL_OW 3
13130: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13131: LD_VAR 0 2
13135: PPUSH
13136: LD_VAR 0 5
13140: PPUSH
13141: CALL 13454 0 2
13145: IFTRUE 13156
13147: PUSH
13148: LD_VAR 0 10
13152: PUSH
13153: EMPTY
13154: EQUAL
13155: OR
13156: IFFALSE 13099
// result := [ ] ;
13158: LD_ADDR_VAR 0 6
13162: PUSH
13163: EMPTY
13164: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13165: LD_VAR 0 1
13169: PPUSH
13170: LD_VAR 0 2
13174: PPUSH
13175: LD_VAR 0 3
13179: PPUSH
13180: LD_VAR 0 4
13184: PPUSH
13185: LD_VAR 0 5
13189: PPUSH
13190: CALL_OW 448
13194: IFFALSE 13227
// result := [ chassis , engine , control , weapon ] ;
13196: LD_ADDR_VAR 0 6
13200: PUSH
13201: LD_VAR 0 2
13205: PUSH
13206: LD_VAR 0 3
13210: PUSH
13211: LD_VAR 0 4
13215: PUSH
13216: LD_VAR 0 5
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: ST_TO_ADDR
// end ;
13227: LD_VAR 0 6
13231: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13232: LD_INT 0
13234: PPUSH
// if not chassis or not engine then
13235: LD_VAR 0 1
13239: NOT
13240: IFTRUE 13249
13242: PUSH
13243: LD_VAR 0 2
13247: NOT
13248: OR
13249: IFFALSE 13253
// exit ;
13251: GO 13449
// case engine of engine_solar :
13253: LD_VAR 0 2
13257: PUSH
13258: LD_INT 2
13260: DOUBLE
13261: EQUAL
13262: IFTRUE 13266
13264: GO 13304
13266: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13267: LD_ADDR_VAR 0 3
13271: PUSH
13272: LD_INT 11
13274: PUSH
13275: LD_INT 12
13277: PUSH
13278: LD_INT 13
13280: PUSH
13281: LD_INT 14
13283: PUSH
13284: LD_INT 1
13286: PUSH
13287: LD_INT 2
13289: PUSH
13290: LD_INT 3
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: ST_TO_ADDR
13302: GO 13433
13304: LD_INT 1
13306: DOUBLE
13307: EQUAL
13308: IFTRUE 13312
13310: GO 13374
13312: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13313: LD_ADDR_VAR 0 3
13317: PUSH
13318: LD_INT 11
13320: PUSH
13321: LD_INT 12
13323: PUSH
13324: LD_INT 13
13326: PUSH
13327: LD_INT 14
13329: PUSH
13330: LD_INT 1
13332: PUSH
13333: LD_INT 2
13335: PUSH
13336: LD_INT 3
13338: PUSH
13339: LD_INT 4
13341: PUSH
13342: LD_INT 5
13344: PUSH
13345: LD_INT 21
13347: PUSH
13348: LD_INT 23
13350: PUSH
13351: LD_INT 22
13353: PUSH
13354: LD_INT 24
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: ST_TO_ADDR
13372: GO 13433
13374: LD_INT 3
13376: DOUBLE
13377: EQUAL
13378: IFTRUE 13382
13380: GO 13432
13382: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13383: LD_ADDR_VAR 0 3
13387: PUSH
13388: LD_INT 13
13390: PUSH
13391: LD_INT 14
13393: PUSH
13394: LD_INT 2
13396: PUSH
13397: LD_INT 3
13399: PUSH
13400: LD_INT 4
13402: PUSH
13403: LD_INT 5
13405: PUSH
13406: LD_INT 21
13408: PUSH
13409: LD_INT 22
13411: PUSH
13412: LD_INT 23
13414: PUSH
13415: LD_INT 24
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: ST_TO_ADDR
13430: GO 13433
13432: POP
// result := ( chassis in result ) ;
13433: LD_ADDR_VAR 0 3
13437: PUSH
13438: LD_VAR 0 1
13442: PUSH
13443: LD_VAR 0 3
13447: IN
13448: ST_TO_ADDR
// end ;
13449: LD_VAR 0 3
13453: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13454: LD_INT 0
13456: PPUSH
// if not chassis or not weapon then
13457: LD_VAR 0 1
13461: NOT
13462: IFTRUE 13471
13464: PUSH
13465: LD_VAR 0 2
13469: NOT
13470: OR
13471: IFFALSE 13475
// exit ;
13473: GO 14535
// case weapon of us_machine_gun :
13475: LD_VAR 0 2
13479: PUSH
13480: LD_INT 2
13482: DOUBLE
13483: EQUAL
13484: IFTRUE 13488
13486: GO 13518
13488: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13489: LD_ADDR_VAR 0 3
13493: PUSH
13494: LD_INT 1
13496: PUSH
13497: LD_INT 2
13499: PUSH
13500: LD_INT 3
13502: PUSH
13503: LD_INT 4
13505: PUSH
13506: LD_INT 5
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: ST_TO_ADDR
13516: GO 14519
13518: LD_INT 3
13520: DOUBLE
13521: EQUAL
13522: IFTRUE 13526
13524: GO 13556
13526: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13527: LD_ADDR_VAR 0 3
13531: PUSH
13532: LD_INT 1
13534: PUSH
13535: LD_INT 2
13537: PUSH
13538: LD_INT 3
13540: PUSH
13541: LD_INT 4
13543: PUSH
13544: LD_INT 5
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: ST_TO_ADDR
13554: GO 14519
13556: LD_INT 11
13558: DOUBLE
13559: EQUAL
13560: IFTRUE 13564
13562: GO 13594
13564: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13565: LD_ADDR_VAR 0 3
13569: PUSH
13570: LD_INT 1
13572: PUSH
13573: LD_INT 2
13575: PUSH
13576: LD_INT 3
13578: PUSH
13579: LD_INT 4
13581: PUSH
13582: LD_INT 5
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: ST_TO_ADDR
13592: GO 14519
13594: LD_INT 4
13596: DOUBLE
13597: EQUAL
13598: IFTRUE 13602
13600: GO 13628
13602: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13603: LD_ADDR_VAR 0 3
13607: PUSH
13608: LD_INT 2
13610: PUSH
13611: LD_INT 3
13613: PUSH
13614: LD_INT 4
13616: PUSH
13617: LD_INT 5
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: ST_TO_ADDR
13626: GO 14519
13628: LD_INT 5
13630: DOUBLE
13631: EQUAL
13632: IFTRUE 13636
13634: GO 13662
13636: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13637: LD_ADDR_VAR 0 3
13641: PUSH
13642: LD_INT 2
13644: PUSH
13645: LD_INT 3
13647: PUSH
13648: LD_INT 4
13650: PUSH
13651: LD_INT 5
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: ST_TO_ADDR
13660: GO 14519
13662: LD_INT 9
13664: DOUBLE
13665: EQUAL
13666: IFTRUE 13670
13668: GO 13696
13670: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13671: LD_ADDR_VAR 0 3
13675: PUSH
13676: LD_INT 2
13678: PUSH
13679: LD_INT 3
13681: PUSH
13682: LD_INT 4
13684: PUSH
13685: LD_INT 5
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: ST_TO_ADDR
13694: GO 14519
13696: LD_INT 7
13698: DOUBLE
13699: EQUAL
13700: IFTRUE 13704
13702: GO 13730
13704: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13705: LD_ADDR_VAR 0 3
13709: PUSH
13710: LD_INT 2
13712: PUSH
13713: LD_INT 3
13715: PUSH
13716: LD_INT 4
13718: PUSH
13719: LD_INT 5
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: ST_TO_ADDR
13728: GO 14519
13730: LD_INT 12
13732: DOUBLE
13733: EQUAL
13734: IFTRUE 13738
13736: GO 13764
13738: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13739: LD_ADDR_VAR 0 3
13743: PUSH
13744: LD_INT 2
13746: PUSH
13747: LD_INT 3
13749: PUSH
13750: LD_INT 4
13752: PUSH
13753: LD_INT 5
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: ST_TO_ADDR
13762: GO 14519
13764: LD_INT 13
13766: DOUBLE
13767: EQUAL
13768: IFTRUE 13772
13770: GO 13798
13772: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13773: LD_ADDR_VAR 0 3
13777: PUSH
13778: LD_INT 2
13780: PUSH
13781: LD_INT 3
13783: PUSH
13784: LD_INT 4
13786: PUSH
13787: LD_INT 5
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: ST_TO_ADDR
13796: GO 14519
13798: LD_INT 14
13800: DOUBLE
13801: EQUAL
13802: IFTRUE 13806
13804: GO 13824
13806: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13807: LD_ADDR_VAR 0 3
13811: PUSH
13812: LD_INT 4
13814: PUSH
13815: LD_INT 5
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: ST_TO_ADDR
13822: GO 14519
13824: LD_INT 6
13826: DOUBLE
13827: EQUAL
13828: IFTRUE 13832
13830: GO 13850
13832: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13833: LD_ADDR_VAR 0 3
13837: PUSH
13838: LD_INT 4
13840: PUSH
13841: LD_INT 5
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: ST_TO_ADDR
13848: GO 14519
13850: LD_INT 10
13852: DOUBLE
13853: EQUAL
13854: IFTRUE 13858
13856: GO 13876
13858: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13859: LD_ADDR_VAR 0 3
13863: PUSH
13864: LD_INT 4
13866: PUSH
13867: LD_INT 5
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: ST_TO_ADDR
13874: GO 14519
13876: LD_INT 22
13878: DOUBLE
13879: EQUAL
13880: IFTRUE 13884
13882: GO 13910
13884: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13885: LD_ADDR_VAR 0 3
13889: PUSH
13890: LD_INT 11
13892: PUSH
13893: LD_INT 12
13895: PUSH
13896: LD_INT 13
13898: PUSH
13899: LD_INT 14
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: ST_TO_ADDR
13908: GO 14519
13910: LD_INT 23
13912: DOUBLE
13913: EQUAL
13914: IFTRUE 13918
13916: GO 13944
13918: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13919: LD_ADDR_VAR 0 3
13923: PUSH
13924: LD_INT 11
13926: PUSH
13927: LD_INT 12
13929: PUSH
13930: LD_INT 13
13932: PUSH
13933: LD_INT 14
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: ST_TO_ADDR
13942: GO 14519
13944: LD_INT 24
13946: DOUBLE
13947: EQUAL
13948: IFTRUE 13952
13950: GO 13978
13952: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13953: LD_ADDR_VAR 0 3
13957: PUSH
13958: LD_INT 11
13960: PUSH
13961: LD_INT 12
13963: PUSH
13964: LD_INT 13
13966: PUSH
13967: LD_INT 14
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: ST_TO_ADDR
13976: GO 14519
13978: LD_INT 30
13980: DOUBLE
13981: EQUAL
13982: IFTRUE 13986
13984: GO 14012
13986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13987: LD_ADDR_VAR 0 3
13991: PUSH
13992: LD_INT 11
13994: PUSH
13995: LD_INT 12
13997: PUSH
13998: LD_INT 13
14000: PUSH
14001: LD_INT 14
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: ST_TO_ADDR
14010: GO 14519
14012: LD_INT 25
14014: DOUBLE
14015: EQUAL
14016: IFTRUE 14020
14018: GO 14038
14020: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14021: LD_ADDR_VAR 0 3
14025: PUSH
14026: LD_INT 13
14028: PUSH
14029: LD_INT 14
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: ST_TO_ADDR
14036: GO 14519
14038: LD_INT 27
14040: DOUBLE
14041: EQUAL
14042: IFTRUE 14046
14044: GO 14064
14046: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14047: LD_ADDR_VAR 0 3
14051: PUSH
14052: LD_INT 13
14054: PUSH
14055: LD_INT 14
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: ST_TO_ADDR
14062: GO 14519
14064: LD_INT 92
14066: DOUBLE
14067: EQUAL
14068: IFTRUE 14072
14070: GO 14098
14072: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14073: LD_ADDR_VAR 0 3
14077: PUSH
14078: LD_INT 11
14080: PUSH
14081: LD_INT 12
14083: PUSH
14084: LD_INT 13
14086: PUSH
14087: LD_INT 14
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: ST_TO_ADDR
14096: GO 14519
14098: LD_INT 28
14100: DOUBLE
14101: EQUAL
14102: IFTRUE 14106
14104: GO 14124
14106: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14107: LD_ADDR_VAR 0 3
14111: PUSH
14112: LD_INT 13
14114: PUSH
14115: LD_INT 14
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: ST_TO_ADDR
14122: GO 14519
14124: LD_INT 29
14126: DOUBLE
14127: EQUAL
14128: IFTRUE 14132
14130: GO 14150
14132: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14133: LD_ADDR_VAR 0 3
14137: PUSH
14138: LD_INT 13
14140: PUSH
14141: LD_INT 14
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: ST_TO_ADDR
14148: GO 14519
14150: LD_INT 31
14152: DOUBLE
14153: EQUAL
14154: IFTRUE 14158
14156: GO 14176
14158: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14159: LD_ADDR_VAR 0 3
14163: PUSH
14164: LD_INT 13
14166: PUSH
14167: LD_INT 14
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: ST_TO_ADDR
14174: GO 14519
14176: LD_INT 26
14178: DOUBLE
14179: EQUAL
14180: IFTRUE 14184
14182: GO 14202
14184: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14185: LD_ADDR_VAR 0 3
14189: PUSH
14190: LD_INT 13
14192: PUSH
14193: LD_INT 14
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: ST_TO_ADDR
14200: GO 14519
14202: LD_INT 42
14204: DOUBLE
14205: EQUAL
14206: IFTRUE 14210
14208: GO 14236
14210: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14211: LD_ADDR_VAR 0 3
14215: PUSH
14216: LD_INT 21
14218: PUSH
14219: LD_INT 22
14221: PUSH
14222: LD_INT 23
14224: PUSH
14225: LD_INT 24
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: ST_TO_ADDR
14234: GO 14519
14236: LD_INT 43
14238: DOUBLE
14239: EQUAL
14240: IFTRUE 14244
14242: GO 14270
14244: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14245: LD_ADDR_VAR 0 3
14249: PUSH
14250: LD_INT 21
14252: PUSH
14253: LD_INT 22
14255: PUSH
14256: LD_INT 23
14258: PUSH
14259: LD_INT 24
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: ST_TO_ADDR
14268: GO 14519
14270: LD_INT 44
14272: DOUBLE
14273: EQUAL
14274: IFTRUE 14278
14276: GO 14304
14278: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14279: LD_ADDR_VAR 0 3
14283: PUSH
14284: LD_INT 21
14286: PUSH
14287: LD_INT 22
14289: PUSH
14290: LD_INT 23
14292: PUSH
14293: LD_INT 24
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: ST_TO_ADDR
14302: GO 14519
14304: LD_INT 45
14306: DOUBLE
14307: EQUAL
14308: IFTRUE 14312
14310: GO 14338
14312: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14313: LD_ADDR_VAR 0 3
14317: PUSH
14318: LD_INT 21
14320: PUSH
14321: LD_INT 22
14323: PUSH
14324: LD_INT 23
14326: PUSH
14327: LD_INT 24
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: ST_TO_ADDR
14336: GO 14519
14338: LD_INT 49
14340: DOUBLE
14341: EQUAL
14342: IFTRUE 14346
14344: GO 14372
14346: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14347: LD_ADDR_VAR 0 3
14351: PUSH
14352: LD_INT 21
14354: PUSH
14355: LD_INT 22
14357: PUSH
14358: LD_INT 23
14360: PUSH
14361: LD_INT 24
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: ST_TO_ADDR
14370: GO 14519
14372: LD_INT 51
14374: DOUBLE
14375: EQUAL
14376: IFTRUE 14380
14378: GO 14406
14380: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14381: LD_ADDR_VAR 0 3
14385: PUSH
14386: LD_INT 21
14388: PUSH
14389: LD_INT 22
14391: PUSH
14392: LD_INT 23
14394: PUSH
14395: LD_INT 24
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: ST_TO_ADDR
14404: GO 14519
14406: LD_INT 52
14408: DOUBLE
14409: EQUAL
14410: IFTRUE 14414
14412: GO 14440
14414: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14415: LD_ADDR_VAR 0 3
14419: PUSH
14420: LD_INT 21
14422: PUSH
14423: LD_INT 22
14425: PUSH
14426: LD_INT 23
14428: PUSH
14429: LD_INT 24
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: ST_TO_ADDR
14438: GO 14519
14440: LD_INT 53
14442: DOUBLE
14443: EQUAL
14444: IFTRUE 14448
14446: GO 14466
14448: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14449: LD_ADDR_VAR 0 3
14453: PUSH
14454: LD_INT 23
14456: PUSH
14457: LD_INT 24
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: ST_TO_ADDR
14464: GO 14519
14466: LD_INT 46
14468: DOUBLE
14469: EQUAL
14470: IFTRUE 14474
14472: GO 14492
14474: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14475: LD_ADDR_VAR 0 3
14479: PUSH
14480: LD_INT 23
14482: PUSH
14483: LD_INT 24
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: ST_TO_ADDR
14490: GO 14519
14492: LD_INT 47
14494: DOUBLE
14495: EQUAL
14496: IFTRUE 14500
14498: GO 14518
14500: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14501: LD_ADDR_VAR 0 3
14505: PUSH
14506: LD_INT 23
14508: PUSH
14509: LD_INT 24
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: ST_TO_ADDR
14516: GO 14519
14518: POP
// result := ( chassis in result ) ;
14519: LD_ADDR_VAR 0 3
14523: PUSH
14524: LD_VAR 0 1
14528: PUSH
14529: LD_VAR 0 3
14533: IN
14534: ST_TO_ADDR
// end ;
14535: LD_VAR 0 3
14539: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14540: LD_INT 0
14542: PPUSH
14543: PPUSH
14544: PPUSH
14545: PPUSH
14546: PPUSH
14547: PPUSH
14548: PPUSH
// result := array ;
14549: LD_ADDR_VAR 0 5
14553: PUSH
14554: LD_VAR 0 1
14558: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14559: LD_VAR 0 1
14563: NOT
14564: IFTRUE 14573
14566: PUSH
14567: LD_VAR 0 2
14571: NOT
14572: OR
14573: IFTRUE 14582
14575: PUSH
14576: LD_VAR 0 3
14580: NOT
14581: OR
14582: IFTRUE 14596
14584: PUSH
14585: LD_VAR 0 2
14589: PUSH
14590: LD_VAR 0 1
14594: GREATER
14595: OR
14596: IFTRUE 14610
14598: PUSH
14599: LD_VAR 0 3
14603: PUSH
14604: LD_VAR 0 1
14608: GREATER
14609: OR
14610: IFFALSE 14614
// exit ;
14612: GO 14910
// if direction then
14614: LD_VAR 0 4
14618: IFFALSE 14682
// begin d := 1 ;
14620: LD_ADDR_VAR 0 9
14624: PUSH
14625: LD_INT 1
14627: ST_TO_ADDR
// if i_from > i_to then
14628: LD_VAR 0 2
14632: PUSH
14633: LD_VAR 0 3
14637: GREATER
14638: IFFALSE 14664
// length := ( array - i_from ) + i_to else
14640: LD_ADDR_VAR 0 11
14644: PUSH
14645: LD_VAR 0 1
14649: PUSH
14650: LD_VAR 0 2
14654: MINUS
14655: PUSH
14656: LD_VAR 0 3
14660: PLUS
14661: ST_TO_ADDR
14662: GO 14680
// length := i_to - i_from ;
14664: LD_ADDR_VAR 0 11
14668: PUSH
14669: LD_VAR 0 3
14673: PUSH
14674: LD_VAR 0 2
14678: MINUS
14679: ST_TO_ADDR
// end else
14680: GO 14743
// begin d := - 1 ;
14682: LD_ADDR_VAR 0 9
14686: PUSH
14687: LD_INT 1
14689: NEG
14690: ST_TO_ADDR
// if i_from > i_to then
14691: LD_VAR 0 2
14695: PUSH
14696: LD_VAR 0 3
14700: GREATER
14701: IFFALSE 14721
// length := i_from - i_to else
14703: LD_ADDR_VAR 0 11
14707: PUSH
14708: LD_VAR 0 2
14712: PUSH
14713: LD_VAR 0 3
14717: MINUS
14718: ST_TO_ADDR
14719: GO 14743
// length := ( array - i_to ) + i_from ;
14721: LD_ADDR_VAR 0 11
14725: PUSH
14726: LD_VAR 0 1
14730: PUSH
14731: LD_VAR 0 3
14735: MINUS
14736: PUSH
14737: LD_VAR 0 2
14741: PLUS
14742: ST_TO_ADDR
// end ; if not length then
14743: LD_VAR 0 11
14747: NOT
14748: IFFALSE 14752
// exit ;
14750: GO 14910
// tmp := array ;
14752: LD_ADDR_VAR 0 10
14756: PUSH
14757: LD_VAR 0 1
14761: ST_TO_ADDR
// for i = 1 to length do
14762: LD_ADDR_VAR 0 6
14766: PUSH
14767: DOUBLE
14768: LD_INT 1
14770: DEC
14771: ST_TO_ADDR
14772: LD_VAR 0 11
14776: PUSH
14777: FOR_TO
14778: IFFALSE 14898
// begin for j = 1 to array do
14780: LD_ADDR_VAR 0 7
14784: PUSH
14785: DOUBLE
14786: LD_INT 1
14788: DEC
14789: ST_TO_ADDR
14790: LD_VAR 0 1
14794: PUSH
14795: FOR_TO
14796: IFFALSE 14884
// begin k := j + d ;
14798: LD_ADDR_VAR 0 8
14802: PUSH
14803: LD_VAR 0 7
14807: PUSH
14808: LD_VAR 0 9
14812: PLUS
14813: ST_TO_ADDR
// if k > array then
14814: LD_VAR 0 8
14818: PUSH
14819: LD_VAR 0 1
14823: GREATER
14824: IFFALSE 14834
// k := 1 ;
14826: LD_ADDR_VAR 0 8
14830: PUSH
14831: LD_INT 1
14833: ST_TO_ADDR
// if not k then
14834: LD_VAR 0 8
14838: NOT
14839: IFFALSE 14851
// k := array ;
14841: LD_ADDR_VAR 0 8
14845: PUSH
14846: LD_VAR 0 1
14850: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14851: LD_ADDR_VAR 0 10
14855: PUSH
14856: LD_VAR 0 10
14860: PPUSH
14861: LD_VAR 0 8
14865: PPUSH
14866: LD_VAR 0 1
14870: PUSH
14871: LD_VAR 0 7
14875: ARRAY
14876: PPUSH
14877: CALL_OW 1
14881: ST_TO_ADDR
// end ;
14882: GO 14795
14884: POP
14885: POP
// array := tmp ;
14886: LD_ADDR_VAR 0 1
14890: PUSH
14891: LD_VAR 0 10
14895: ST_TO_ADDR
// end ;
14896: GO 14777
14898: POP
14899: POP
// result := array ;
14900: LD_ADDR_VAR 0 5
14904: PUSH
14905: LD_VAR 0 1
14909: ST_TO_ADDR
// end ;
14910: LD_VAR 0 5
14914: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14915: LD_INT 0
14917: PPUSH
14918: PPUSH
// result := 0 ;
14919: LD_ADDR_VAR 0 3
14923: PUSH
14924: LD_INT 0
14926: ST_TO_ADDR
// if not array or not value in array then
14927: LD_VAR 0 1
14931: NOT
14932: IFTRUE 14947
14934: PUSH
14935: LD_VAR 0 2
14939: PUSH
14940: LD_VAR 0 1
14944: IN
14945: NOT
14946: OR
14947: IFFALSE 14951
// exit ;
14949: GO 15005
// for i = 1 to array do
14951: LD_ADDR_VAR 0 4
14955: PUSH
14956: DOUBLE
14957: LD_INT 1
14959: DEC
14960: ST_TO_ADDR
14961: LD_VAR 0 1
14965: PUSH
14966: FOR_TO
14967: IFFALSE 15003
// if value = array [ i ] then
14969: LD_VAR 0 2
14973: PUSH
14974: LD_VAR 0 1
14978: PUSH
14979: LD_VAR 0 4
14983: ARRAY
14984: EQUAL
14985: IFFALSE 15001
// begin result := i ;
14987: LD_ADDR_VAR 0 3
14991: PUSH
14992: LD_VAR 0 4
14996: ST_TO_ADDR
// exit ;
14997: POP
14998: POP
14999: GO 15005
// end ;
15001: GO 14966
15003: POP
15004: POP
// end ;
15005: LD_VAR 0 3
15009: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15010: LD_INT 0
15012: PPUSH
// vc_chassis := chassis ;
15013: LD_ADDR_OWVAR 37
15017: PUSH
15018: LD_VAR 0 1
15022: ST_TO_ADDR
// vc_engine := engine ;
15023: LD_ADDR_OWVAR 39
15027: PUSH
15028: LD_VAR 0 2
15032: ST_TO_ADDR
// vc_control := control ;
15033: LD_ADDR_OWVAR 38
15037: PUSH
15038: LD_VAR 0 3
15042: ST_TO_ADDR
// vc_weapon := weapon ;
15043: LD_ADDR_OWVAR 40
15047: PUSH
15048: LD_VAR 0 4
15052: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15053: LD_ADDR_OWVAR 41
15057: PUSH
15058: LD_VAR 0 5
15062: ST_TO_ADDR
// end ;
15063: LD_VAR 0 6
15067: RET
// export function WantPlant ( unit ) ; var task ; begin
15068: LD_INT 0
15070: PPUSH
15071: PPUSH
// result := false ;
15072: LD_ADDR_VAR 0 2
15076: PUSH
15077: LD_INT 0
15079: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15080: LD_ADDR_VAR 0 3
15084: PUSH
15085: LD_VAR 0 1
15089: PPUSH
15090: CALL_OW 437
15094: ST_TO_ADDR
// if task then
15095: LD_VAR 0 3
15099: IFFALSE 15127
// if task [ 1 ] [ 1 ] = p then
15101: LD_VAR 0 3
15105: PUSH
15106: LD_INT 1
15108: ARRAY
15109: PUSH
15110: LD_INT 1
15112: ARRAY
15113: PUSH
15114: LD_STRING p
15116: EQUAL
15117: IFFALSE 15127
// result := true ;
15119: LD_ADDR_VAR 0 2
15123: PUSH
15124: LD_INT 1
15126: ST_TO_ADDR
// end ;
15127: LD_VAR 0 2
15131: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15132: LD_INT 0
15134: PPUSH
15135: PPUSH
15136: PPUSH
15137: PPUSH
// if pos < 1 then
15138: LD_VAR 0 2
15142: PUSH
15143: LD_INT 1
15145: LESS
15146: IFFALSE 15150
// exit ;
15148: GO 15453
// if pos = 1 then
15150: LD_VAR 0 2
15154: PUSH
15155: LD_INT 1
15157: EQUAL
15158: IFFALSE 15191
// result := Replace ( arr , pos [ 1 ] , value ) else
15160: LD_ADDR_VAR 0 4
15164: PUSH
15165: LD_VAR 0 1
15169: PPUSH
15170: LD_VAR 0 2
15174: PUSH
15175: LD_INT 1
15177: ARRAY
15178: PPUSH
15179: LD_VAR 0 3
15183: PPUSH
15184: CALL_OW 1
15188: ST_TO_ADDR
15189: GO 15453
// begin tmp := arr ;
15191: LD_ADDR_VAR 0 6
15195: PUSH
15196: LD_VAR 0 1
15200: ST_TO_ADDR
// s_arr := [ tmp ] ;
15201: LD_ADDR_VAR 0 7
15205: PUSH
15206: LD_VAR 0 6
15210: PUSH
15211: EMPTY
15212: LIST
15213: ST_TO_ADDR
// for i = 1 to pos - 1 do
15214: LD_ADDR_VAR 0 5
15218: PUSH
15219: DOUBLE
15220: LD_INT 1
15222: DEC
15223: ST_TO_ADDR
15224: LD_VAR 0 2
15228: PUSH
15229: LD_INT 1
15231: MINUS
15232: PUSH
15233: FOR_TO
15234: IFFALSE 15279
// begin tmp := tmp [ pos [ i ] ] ;
15236: LD_ADDR_VAR 0 6
15240: PUSH
15241: LD_VAR 0 6
15245: PUSH
15246: LD_VAR 0 2
15250: PUSH
15251: LD_VAR 0 5
15255: ARRAY
15256: ARRAY
15257: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15258: LD_ADDR_VAR 0 7
15262: PUSH
15263: LD_VAR 0 7
15267: PUSH
15268: LD_VAR 0 6
15272: PUSH
15273: EMPTY
15274: LIST
15275: ADD
15276: ST_TO_ADDR
// end ;
15277: GO 15233
15279: POP
15280: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15281: LD_ADDR_VAR 0 6
15285: PUSH
15286: LD_VAR 0 6
15290: PPUSH
15291: LD_VAR 0 2
15295: PUSH
15296: LD_VAR 0 2
15300: ARRAY
15301: PPUSH
15302: LD_VAR 0 3
15306: PPUSH
15307: CALL_OW 1
15311: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15312: LD_ADDR_VAR 0 7
15316: PUSH
15317: LD_VAR 0 7
15321: PPUSH
15322: LD_VAR 0 7
15326: PPUSH
15327: LD_VAR 0 6
15331: PPUSH
15332: CALL_OW 1
15336: ST_TO_ADDR
// for i = s_arr downto 2 do
15337: LD_ADDR_VAR 0 5
15341: PUSH
15342: DOUBLE
15343: LD_VAR 0 7
15347: INC
15348: ST_TO_ADDR
15349: LD_INT 2
15351: PUSH
15352: FOR_DOWNTO
15353: IFFALSE 15437
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15355: LD_ADDR_VAR 0 6
15359: PUSH
15360: LD_VAR 0 7
15364: PUSH
15365: LD_VAR 0 5
15369: PUSH
15370: LD_INT 1
15372: MINUS
15373: ARRAY
15374: PPUSH
15375: LD_VAR 0 2
15379: PUSH
15380: LD_VAR 0 5
15384: PUSH
15385: LD_INT 1
15387: MINUS
15388: ARRAY
15389: PPUSH
15390: LD_VAR 0 7
15394: PUSH
15395: LD_VAR 0 5
15399: ARRAY
15400: PPUSH
15401: CALL_OW 1
15405: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15406: LD_ADDR_VAR 0 7
15410: PUSH
15411: LD_VAR 0 7
15415: PPUSH
15416: LD_VAR 0 5
15420: PUSH
15421: LD_INT 1
15423: MINUS
15424: PPUSH
15425: LD_VAR 0 6
15429: PPUSH
15430: CALL_OW 1
15434: ST_TO_ADDR
// end ;
15435: GO 15352
15437: POP
15438: POP
// result := s_arr [ 1 ] ;
15439: LD_ADDR_VAR 0 4
15443: PUSH
15444: LD_VAR 0 7
15448: PUSH
15449: LD_INT 1
15451: ARRAY
15452: ST_TO_ADDR
// end ; end ;
15453: LD_VAR 0 4
15457: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15458: LD_INT 0
15460: PPUSH
15461: PPUSH
// if not list then
15462: LD_VAR 0 1
15466: NOT
15467: IFFALSE 15471
// exit ;
15469: GO 15562
// i := list [ pos1 ] ;
15471: LD_ADDR_VAR 0 5
15475: PUSH
15476: LD_VAR 0 1
15480: PUSH
15481: LD_VAR 0 2
15485: ARRAY
15486: ST_TO_ADDR
// if not i then
15487: LD_VAR 0 5
15491: NOT
15492: IFFALSE 15496
// exit ;
15494: GO 15562
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15496: LD_ADDR_VAR 0 1
15500: PUSH
15501: LD_VAR 0 1
15505: PPUSH
15506: LD_VAR 0 2
15510: PPUSH
15511: LD_VAR 0 1
15515: PUSH
15516: LD_VAR 0 3
15520: ARRAY
15521: PPUSH
15522: CALL_OW 1
15526: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15527: LD_ADDR_VAR 0 1
15531: PUSH
15532: LD_VAR 0 1
15536: PPUSH
15537: LD_VAR 0 3
15541: PPUSH
15542: LD_VAR 0 5
15546: PPUSH
15547: CALL_OW 1
15551: ST_TO_ADDR
// result := list ;
15552: LD_ADDR_VAR 0 4
15556: PUSH
15557: LD_VAR 0 1
15561: ST_TO_ADDR
// end ;
15562: LD_VAR 0 4
15566: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15567: LD_INT 0
15569: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15570: LD_ADDR_VAR 0 5
15574: PUSH
15575: LD_VAR 0 1
15579: PPUSH
15580: CALL_OW 250
15584: PPUSH
15585: LD_VAR 0 1
15589: PPUSH
15590: CALL_OW 251
15594: PPUSH
15595: LD_VAR 0 2
15599: PPUSH
15600: LD_VAR 0 3
15604: PPUSH
15605: LD_VAR 0 4
15609: PPUSH
15610: CALL 15992 0 5
15614: ST_TO_ADDR
// end ;
15615: LD_VAR 0 5
15619: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15620: LD_INT 0
15622: PPUSH
15623: PPUSH
15624: PPUSH
15625: PPUSH
// if not list or not unit then
15626: LD_VAR 0 2
15630: NOT
15631: IFTRUE 15640
15633: PUSH
15634: LD_VAR 0 1
15638: NOT
15639: OR
15640: IFFALSE 15644
// exit ;
15642: GO 15987
// result := [ ] ;
15644: LD_ADDR_VAR 0 5
15648: PUSH
15649: EMPTY
15650: ST_TO_ADDR
// for i in list do
15651: LD_ADDR_VAR 0 6
15655: PUSH
15656: LD_VAR 0 2
15660: PUSH
15661: FOR_IN
15662: IFFALSE 15880
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15664: LD_ADDR_VAR 0 8
15668: PUSH
15669: LD_VAR 0 1
15673: PPUSH
15674: LD_VAR 0 6
15678: PUSH
15679: LD_INT 1
15681: ARRAY
15682: PPUSH
15683: LD_VAR 0 6
15687: PUSH
15688: LD_INT 2
15690: ARRAY
15691: PPUSH
15692: CALL_OW 297
15696: ST_TO_ADDR
// if not Count ( result ) then
15697: LD_VAR 0 5
15701: PPUSH
15702: CALL 12248 0 1
15706: NOT
15707: IFFALSE 15740
// begin result := Join ( result , [ i , tmp ] ) ;
15709: LD_ADDR_VAR 0 5
15713: PUSH
15714: LD_VAR 0 5
15718: PPUSH
15719: LD_VAR 0 6
15723: PUSH
15724: LD_VAR 0 8
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PPUSH
15733: CALL 48180 0 2
15737: ST_TO_ADDR
// continue ;
15738: GO 15661
// end ; if result [ result ] [ 2 ] <= tmp then
15740: LD_VAR 0 5
15744: PUSH
15745: LD_VAR 0 5
15749: ARRAY
15750: PUSH
15751: LD_INT 2
15753: ARRAY
15754: PUSH
15755: LD_VAR 0 8
15759: LESSEQUAL
15760: IFFALSE 15793
// result := Join ( result , [ i , tmp ] ) else
15762: LD_ADDR_VAR 0 5
15766: PUSH
15767: LD_VAR 0 5
15771: PPUSH
15772: LD_VAR 0 6
15776: PUSH
15777: LD_VAR 0 8
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PPUSH
15786: CALL 48180 0 2
15790: ST_TO_ADDR
15791: GO 15878
// begin for j := 1 to Count ( result ) do
15793: LD_ADDR_VAR 0 7
15797: PUSH
15798: DOUBLE
15799: LD_INT 1
15801: DEC
15802: ST_TO_ADDR
15803: LD_VAR 0 5
15807: PPUSH
15808: CALL 12248 0 1
15812: PUSH
15813: FOR_TO
15814: IFFALSE 15876
// begin if tmp < result [ j ] [ 2 ] then
15816: LD_VAR 0 8
15820: PUSH
15821: LD_VAR 0 5
15825: PUSH
15826: LD_VAR 0 7
15830: ARRAY
15831: PUSH
15832: LD_INT 2
15834: ARRAY
15835: LESS
15836: IFFALSE 15874
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15838: LD_ADDR_VAR 0 5
15842: PUSH
15843: LD_VAR 0 5
15847: PPUSH
15848: LD_VAR 0 7
15852: PPUSH
15853: LD_VAR 0 6
15857: PUSH
15858: LD_VAR 0 8
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PPUSH
15867: CALL_OW 2
15871: ST_TO_ADDR
// break ;
15872: GO 15876
// end ; end ;
15874: GO 15813
15876: POP
15877: POP
// end ; end ;
15878: GO 15661
15880: POP
15881: POP
// if result and not asc then
15882: LD_VAR 0 5
15886: IFFALSE 15895
15888: PUSH
15889: LD_VAR 0 3
15893: NOT
15894: AND
15895: IFFALSE 15912
// result := ReverseArray ( result ) ;
15897: LD_ADDR_VAR 0 5
15901: PUSH
15902: LD_VAR 0 5
15906: PPUSH
15907: CALL 43270 0 1
15911: ST_TO_ADDR
// tmp := [ ] ;
15912: LD_ADDR_VAR 0 8
15916: PUSH
15917: EMPTY
15918: ST_TO_ADDR
// if mode then
15919: LD_VAR 0 4
15923: IFFALSE 15987
// begin for i := 1 to result do
15925: LD_ADDR_VAR 0 6
15929: PUSH
15930: DOUBLE
15931: LD_INT 1
15933: DEC
15934: ST_TO_ADDR
15935: LD_VAR 0 5
15939: PUSH
15940: FOR_TO
15941: IFFALSE 15975
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15943: LD_ADDR_VAR 0 8
15947: PUSH
15948: LD_VAR 0 8
15952: PPUSH
15953: LD_VAR 0 5
15957: PUSH
15958: LD_VAR 0 6
15962: ARRAY
15963: PUSH
15964: LD_INT 1
15966: ARRAY
15967: PPUSH
15968: CALL 48180 0 2
15972: ST_TO_ADDR
15973: GO 15940
15975: POP
15976: POP
// result := tmp ;
15977: LD_ADDR_VAR 0 5
15981: PUSH
15982: LD_VAR 0 8
15986: ST_TO_ADDR
// end ; end ;
15987: LD_VAR 0 5
15991: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15992: LD_INT 0
15994: PPUSH
15995: PPUSH
15996: PPUSH
15997: PPUSH
// if not list then
15998: LD_VAR 0 3
16002: NOT
16003: IFFALSE 16007
// exit ;
16005: GO 16397
// result := [ ] ;
16007: LD_ADDR_VAR 0 6
16011: PUSH
16012: EMPTY
16013: ST_TO_ADDR
// for i in list do
16014: LD_ADDR_VAR 0 7
16018: PUSH
16019: LD_VAR 0 3
16023: PUSH
16024: FOR_IN
16025: IFFALSE 16227
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16027: LD_ADDR_VAR 0 9
16031: PUSH
16032: LD_VAR 0 7
16036: PPUSH
16037: LD_VAR 0 1
16041: PPUSH
16042: LD_VAR 0 2
16046: PPUSH
16047: CALL_OW 297
16051: ST_TO_ADDR
// if not result then
16052: LD_VAR 0 6
16056: NOT
16057: IFFALSE 16083
// result := [ [ i , tmp ] ] else
16059: LD_ADDR_VAR 0 6
16063: PUSH
16064: LD_VAR 0 7
16068: PUSH
16069: LD_VAR 0 9
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: EMPTY
16079: LIST
16080: ST_TO_ADDR
16081: GO 16225
// begin if result [ result ] [ 2 ] <= tmp then
16083: LD_VAR 0 6
16087: PUSH
16088: LD_VAR 0 6
16092: ARRAY
16093: PUSH
16094: LD_INT 2
16096: ARRAY
16097: PUSH
16098: LD_VAR 0 9
16102: LESSEQUAL
16103: IFFALSE 16145
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16105: LD_ADDR_VAR 0 6
16109: PUSH
16110: LD_VAR 0 6
16114: PPUSH
16115: LD_VAR 0 6
16119: PUSH
16120: LD_INT 1
16122: PLUS
16123: PPUSH
16124: LD_VAR 0 7
16128: PUSH
16129: LD_VAR 0 9
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PPUSH
16138: CALL_OW 2
16142: ST_TO_ADDR
16143: GO 16225
// for j := 1 to result do
16145: LD_ADDR_VAR 0 8
16149: PUSH
16150: DOUBLE
16151: LD_INT 1
16153: DEC
16154: ST_TO_ADDR
16155: LD_VAR 0 6
16159: PUSH
16160: FOR_TO
16161: IFFALSE 16223
// begin if tmp < result [ j ] [ 2 ] then
16163: LD_VAR 0 9
16167: PUSH
16168: LD_VAR 0 6
16172: PUSH
16173: LD_VAR 0 8
16177: ARRAY
16178: PUSH
16179: LD_INT 2
16181: ARRAY
16182: LESS
16183: IFFALSE 16221
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16185: LD_ADDR_VAR 0 6
16189: PUSH
16190: LD_VAR 0 6
16194: PPUSH
16195: LD_VAR 0 8
16199: PPUSH
16200: LD_VAR 0 7
16204: PUSH
16205: LD_VAR 0 9
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PPUSH
16214: CALL_OW 2
16218: ST_TO_ADDR
// break ;
16219: GO 16223
// end ; end ;
16221: GO 16160
16223: POP
16224: POP
// end ; end ;
16225: GO 16024
16227: POP
16228: POP
// if result and not asc then
16229: LD_VAR 0 6
16233: IFFALSE 16242
16235: PUSH
16236: LD_VAR 0 4
16240: NOT
16241: AND
16242: IFFALSE 16317
// begin tmp := result ;
16244: LD_ADDR_VAR 0 9
16248: PUSH
16249: LD_VAR 0 6
16253: ST_TO_ADDR
// for i = tmp downto 1 do
16254: LD_ADDR_VAR 0 7
16258: PUSH
16259: DOUBLE
16260: LD_VAR 0 9
16264: INC
16265: ST_TO_ADDR
16266: LD_INT 1
16268: PUSH
16269: FOR_DOWNTO
16270: IFFALSE 16315
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16272: LD_ADDR_VAR 0 6
16276: PUSH
16277: LD_VAR 0 6
16281: PPUSH
16282: LD_VAR 0 9
16286: PUSH
16287: LD_VAR 0 7
16291: MINUS
16292: PUSH
16293: LD_INT 1
16295: PLUS
16296: PPUSH
16297: LD_VAR 0 9
16301: PUSH
16302: LD_VAR 0 7
16306: ARRAY
16307: PPUSH
16308: CALL_OW 1
16312: ST_TO_ADDR
16313: GO 16269
16315: POP
16316: POP
// end ; tmp := [ ] ;
16317: LD_ADDR_VAR 0 9
16321: PUSH
16322: EMPTY
16323: ST_TO_ADDR
// if mode then
16324: LD_VAR 0 5
16328: IFFALSE 16397
// begin for i = 1 to result do
16330: LD_ADDR_VAR 0 7
16334: PUSH
16335: DOUBLE
16336: LD_INT 1
16338: DEC
16339: ST_TO_ADDR
16340: LD_VAR 0 6
16344: PUSH
16345: FOR_TO
16346: IFFALSE 16385
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16348: LD_ADDR_VAR 0 9
16352: PUSH
16353: LD_VAR 0 9
16357: PPUSH
16358: LD_VAR 0 7
16362: PPUSH
16363: LD_VAR 0 6
16367: PUSH
16368: LD_VAR 0 7
16372: ARRAY
16373: PUSH
16374: LD_INT 1
16376: ARRAY
16377: PPUSH
16378: CALL_OW 1
16382: ST_TO_ADDR
16383: GO 16345
16385: POP
16386: POP
// result := tmp ;
16387: LD_ADDR_VAR 0 6
16391: PUSH
16392: LD_VAR 0 9
16396: ST_TO_ADDR
// end ; end ;
16397: LD_VAR 0 6
16401: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16402: LD_INT 0
16404: PPUSH
16405: PPUSH
16406: PPUSH
16407: PPUSH
16408: PPUSH
16409: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16410: LD_ADDR_VAR 0 5
16414: PUSH
16415: LD_INT 0
16417: PUSH
16418: LD_INT 0
16420: PUSH
16421: LD_INT 0
16423: PUSH
16424: EMPTY
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: ST_TO_ADDR
// if not x or not y then
16432: LD_VAR 0 2
16436: NOT
16437: IFTRUE 16446
16439: PUSH
16440: LD_VAR 0 3
16444: NOT
16445: OR
16446: IFFALSE 16450
// exit ;
16448: GO 18106
// if not range then
16450: LD_VAR 0 4
16454: NOT
16455: IFFALSE 16465
// range := 10 ;
16457: LD_ADDR_VAR 0 4
16461: PUSH
16462: LD_INT 10
16464: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16465: LD_ADDR_VAR 0 8
16469: PUSH
16470: LD_INT 81
16472: PUSH
16473: LD_VAR 0 1
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 92
16484: PUSH
16485: LD_VAR 0 2
16489: PUSH
16490: LD_VAR 0 3
16494: PUSH
16495: LD_VAR 0 4
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 3
16508: PUSH
16509: LD_INT 21
16511: PUSH
16512: LD_INT 3
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: LIST
16527: PPUSH
16528: CALL_OW 69
16532: ST_TO_ADDR
// if not tmp then
16533: LD_VAR 0 8
16537: NOT
16538: IFFALSE 16542
// exit ;
16540: GO 18106
// for i in tmp do
16542: LD_ADDR_VAR 0 6
16546: PUSH
16547: LD_VAR 0 8
16551: PUSH
16552: FOR_IN
16553: IFFALSE 18081
// begin points := [ 0 , 0 , 0 ] ;
16555: LD_ADDR_VAR 0 9
16559: PUSH
16560: LD_INT 0
16562: PUSH
16563: LD_INT 0
16565: PUSH
16566: LD_INT 0
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: LIST
16573: ST_TO_ADDR
// bpoints := 1 ;
16574: LD_ADDR_VAR 0 10
16578: PUSH
16579: LD_INT 1
16581: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16582: LD_VAR 0 6
16586: PPUSH
16587: CALL_OW 247
16591: PUSH
16592: LD_INT 1
16594: DOUBLE
16595: EQUAL
16596: IFTRUE 16600
16598: GO 17182
16600: POP
// begin if GetClass ( i ) = 1 then
16601: LD_VAR 0 6
16605: PPUSH
16606: CALL_OW 257
16610: PUSH
16611: LD_INT 1
16613: EQUAL
16614: IFFALSE 16635
// points := [ 10 , 5 , 3 ] ;
16616: LD_ADDR_VAR 0 9
16620: PUSH
16621: LD_INT 10
16623: PUSH
16624: LD_INT 5
16626: PUSH
16627: LD_INT 3
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: LIST
16634: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16635: LD_VAR 0 6
16639: PPUSH
16640: CALL_OW 257
16644: PUSH
16645: LD_INT 2
16647: PUSH
16648: LD_INT 3
16650: PUSH
16651: LD_INT 4
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: IN
16659: IFFALSE 16680
// points := [ 3 , 2 , 1 ] ;
16661: LD_ADDR_VAR 0 9
16665: PUSH
16666: LD_INT 3
16668: PUSH
16669: LD_INT 2
16671: PUSH
16672: LD_INT 1
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: LIST
16679: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16680: LD_VAR 0 6
16684: PPUSH
16685: CALL_OW 257
16689: PUSH
16690: LD_INT 5
16692: EQUAL
16693: IFFALSE 16714
// points := [ 130 , 5 , 2 ] ;
16695: LD_ADDR_VAR 0 9
16699: PUSH
16700: LD_INT 130
16702: PUSH
16703: LD_INT 5
16705: PUSH
16706: LD_INT 2
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: LIST
16713: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16714: LD_VAR 0 6
16718: PPUSH
16719: CALL_OW 257
16723: PUSH
16724: LD_INT 8
16726: EQUAL
16727: IFFALSE 16748
// points := [ 35 , 35 , 30 ] ;
16729: LD_ADDR_VAR 0 9
16733: PUSH
16734: LD_INT 35
16736: PUSH
16737: LD_INT 35
16739: PUSH
16740: LD_INT 30
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: LIST
16747: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16748: LD_VAR 0 6
16752: PPUSH
16753: CALL_OW 257
16757: PUSH
16758: LD_INT 9
16760: EQUAL
16761: IFFALSE 16782
// points := [ 20 , 55 , 40 ] ;
16763: LD_ADDR_VAR 0 9
16767: PUSH
16768: LD_INT 20
16770: PUSH
16771: LD_INT 55
16773: PUSH
16774: LD_INT 40
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: LIST
16781: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16782: LD_VAR 0 6
16786: PPUSH
16787: CALL_OW 257
16791: PUSH
16792: LD_INT 12
16794: PUSH
16795: LD_INT 16
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: IN
16802: IFFALSE 16823
// points := [ 5 , 3 , 2 ] ;
16804: LD_ADDR_VAR 0 9
16808: PUSH
16809: LD_INT 5
16811: PUSH
16812: LD_INT 3
16814: PUSH
16815: LD_INT 2
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: LIST
16822: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16823: LD_VAR 0 6
16827: PPUSH
16828: CALL_OW 257
16832: PUSH
16833: LD_INT 17
16835: EQUAL
16836: IFFALSE 16857
// points := [ 100 , 50 , 75 ] ;
16838: LD_ADDR_VAR 0 9
16842: PUSH
16843: LD_INT 100
16845: PUSH
16846: LD_INT 50
16848: PUSH
16849: LD_INT 75
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: LIST
16856: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16857: LD_VAR 0 6
16861: PPUSH
16862: CALL_OW 257
16866: PUSH
16867: LD_INT 15
16869: EQUAL
16870: IFFALSE 16891
// points := [ 10 , 5 , 3 ] ;
16872: LD_ADDR_VAR 0 9
16876: PUSH
16877: LD_INT 10
16879: PUSH
16880: LD_INT 5
16882: PUSH
16883: LD_INT 3
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: LIST
16890: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16891: LD_VAR 0 6
16895: PPUSH
16896: CALL_OW 257
16900: PUSH
16901: LD_INT 14
16903: EQUAL
16904: IFFALSE 16925
// points := [ 10 , 0 , 0 ] ;
16906: LD_ADDR_VAR 0 9
16910: PUSH
16911: LD_INT 10
16913: PUSH
16914: LD_INT 0
16916: PUSH
16917: LD_INT 0
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: LIST
16924: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16925: LD_VAR 0 6
16929: PPUSH
16930: CALL_OW 257
16934: PUSH
16935: LD_INT 11
16937: EQUAL
16938: IFFALSE 16959
// points := [ 30 , 10 , 5 ] ;
16940: LD_ADDR_VAR 0 9
16944: PUSH
16945: LD_INT 30
16947: PUSH
16948: LD_INT 10
16950: PUSH
16951: LD_INT 5
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: LIST
16958: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16959: LD_VAR 0 1
16963: PPUSH
16964: LD_INT 5
16966: PPUSH
16967: CALL_OW 321
16971: PUSH
16972: LD_INT 2
16974: EQUAL
16975: IFFALSE 16992
// bpoints := bpoints * 1.8 ;
16977: LD_ADDR_VAR 0 10
16981: PUSH
16982: LD_VAR 0 10
16986: PUSH
16987: LD_REAL  1.80000000000000E+0000
16990: MUL
16991: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16992: LD_VAR 0 6
16996: PPUSH
16997: CALL_OW 257
17001: PUSH
17002: LD_INT 1
17004: PUSH
17005: LD_INT 2
17007: PUSH
17008: LD_INT 3
17010: PUSH
17011: LD_INT 4
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: IN
17020: IFFALSE 17040
17022: PUSH
17023: LD_VAR 0 1
17027: PPUSH
17028: LD_INT 51
17030: PPUSH
17031: CALL_OW 321
17035: PUSH
17036: LD_INT 2
17038: EQUAL
17039: AND
17040: IFFALSE 17057
// bpoints := bpoints * 1.2 ;
17042: LD_ADDR_VAR 0 10
17046: PUSH
17047: LD_VAR 0 10
17051: PUSH
17052: LD_REAL  1.20000000000000E+0000
17055: MUL
17056: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17057: LD_VAR 0 6
17061: PPUSH
17062: CALL_OW 257
17066: PUSH
17067: LD_INT 5
17069: PUSH
17070: LD_INT 7
17072: PUSH
17073: LD_INT 9
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: IN
17081: IFFALSE 17101
17083: PUSH
17084: LD_VAR 0 1
17088: PPUSH
17089: LD_INT 52
17091: PPUSH
17092: CALL_OW 321
17096: PUSH
17097: LD_INT 2
17099: EQUAL
17100: AND
17101: IFFALSE 17118
// bpoints := bpoints * 1.5 ;
17103: LD_ADDR_VAR 0 10
17107: PUSH
17108: LD_VAR 0 10
17112: PUSH
17113: LD_REAL  1.50000000000000E+0000
17116: MUL
17117: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17118: LD_VAR 0 1
17122: PPUSH
17123: LD_INT 66
17125: PPUSH
17126: CALL_OW 321
17130: PUSH
17131: LD_INT 2
17133: EQUAL
17134: IFFALSE 17151
// bpoints := bpoints * 1.1 ;
17136: LD_ADDR_VAR 0 10
17140: PUSH
17141: LD_VAR 0 10
17145: PUSH
17146: LD_REAL  1.10000000000000E+0000
17149: MUL
17150: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17151: LD_ADDR_VAR 0 10
17155: PUSH
17156: LD_VAR 0 10
17160: PUSH
17161: LD_VAR 0 6
17165: PPUSH
17166: LD_INT 1
17168: PPUSH
17169: CALL_OW 259
17173: PUSH
17174: LD_REAL  1.15000000000000E+0000
17177: MUL
17178: MUL
17179: ST_TO_ADDR
// end ; unit_vehicle :
17180: GO 18010
17182: LD_INT 2
17184: DOUBLE
17185: EQUAL
17186: IFTRUE 17190
17188: GO 17998
17190: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17191: LD_VAR 0 6
17195: PPUSH
17196: CALL_OW 264
17200: PUSH
17201: LD_INT 2
17203: PUSH
17204: LD_INT 42
17206: PUSH
17207: LD_INT 24
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: LIST
17214: IN
17215: IFFALSE 17236
// points := [ 25 , 5 , 3 ] ;
17217: LD_ADDR_VAR 0 9
17221: PUSH
17222: LD_INT 25
17224: PUSH
17225: LD_INT 5
17227: PUSH
17228: LD_INT 3
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17236: LD_VAR 0 6
17240: PPUSH
17241: CALL_OW 264
17245: PUSH
17246: LD_INT 4
17248: PUSH
17249: LD_INT 43
17251: PUSH
17252: LD_INT 25
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: LIST
17259: IN
17260: IFFALSE 17281
// points := [ 40 , 15 , 5 ] ;
17262: LD_ADDR_VAR 0 9
17266: PUSH
17267: LD_INT 40
17269: PUSH
17270: LD_INT 15
17272: PUSH
17273: LD_INT 5
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: LIST
17280: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17281: LD_VAR 0 6
17285: PPUSH
17286: CALL_OW 264
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: LD_INT 23
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: IN
17301: IFFALSE 17322
// points := [ 7 , 25 , 8 ] ;
17303: LD_ADDR_VAR 0 9
17307: PUSH
17308: LD_INT 7
17310: PUSH
17311: LD_INT 25
17313: PUSH
17314: LD_INT 8
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: LIST
17321: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17322: LD_VAR 0 6
17326: PPUSH
17327: CALL_OW 264
17331: PUSH
17332: LD_INT 5
17334: PUSH
17335: LD_INT 27
17337: PUSH
17338: LD_INT 44
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: LIST
17345: IN
17346: IFFALSE 17367
// points := [ 14 , 50 , 16 ] ;
17348: LD_ADDR_VAR 0 9
17352: PUSH
17353: LD_INT 14
17355: PUSH
17356: LD_INT 50
17358: PUSH
17359: LD_INT 16
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: LIST
17366: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17367: LD_VAR 0 6
17371: PPUSH
17372: CALL_OW 264
17376: PUSH
17377: LD_INT 6
17379: PUSH
17380: LD_INT 46
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: IN
17387: IFFALSE 17408
// points := [ 32 , 120 , 70 ] ;
17389: LD_ADDR_VAR 0 9
17393: PUSH
17394: LD_INT 32
17396: PUSH
17397: LD_INT 120
17399: PUSH
17400: LD_INT 70
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: LIST
17407: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17408: LD_VAR 0 6
17412: PPUSH
17413: CALL_OW 264
17417: PUSH
17418: LD_INT 7
17420: PUSH
17421: LD_INT 28
17423: PUSH
17424: LD_INT 45
17426: PUSH
17427: LD_INT 92
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: IN
17436: IFFALSE 17457
// points := [ 35 , 20 , 45 ] ;
17438: LD_ADDR_VAR 0 9
17442: PUSH
17443: LD_INT 35
17445: PUSH
17446: LD_INT 20
17448: PUSH
17449: LD_INT 45
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: LIST
17456: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17457: LD_VAR 0 6
17461: PPUSH
17462: CALL_OW 264
17466: PUSH
17467: LD_INT 47
17469: PUSH
17470: EMPTY
17471: LIST
17472: IN
17473: IFFALSE 17494
// points := [ 67 , 45 , 75 ] ;
17475: LD_ADDR_VAR 0 9
17479: PUSH
17480: LD_INT 67
17482: PUSH
17483: LD_INT 45
17485: PUSH
17486: LD_INT 75
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: LIST
17493: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17494: LD_VAR 0 6
17498: PPUSH
17499: CALL_OW 264
17503: PUSH
17504: LD_INT 26
17506: PUSH
17507: EMPTY
17508: LIST
17509: IN
17510: IFFALSE 17531
// points := [ 120 , 30 , 80 ] ;
17512: LD_ADDR_VAR 0 9
17516: PUSH
17517: LD_INT 120
17519: PUSH
17520: LD_INT 30
17522: PUSH
17523: LD_INT 80
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: LIST
17530: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17531: LD_VAR 0 6
17535: PPUSH
17536: CALL_OW 264
17540: PUSH
17541: LD_INT 22
17543: PUSH
17544: EMPTY
17545: LIST
17546: IN
17547: IFFALSE 17568
// points := [ 40 , 1 , 1 ] ;
17549: LD_ADDR_VAR 0 9
17553: PUSH
17554: LD_INT 40
17556: PUSH
17557: LD_INT 1
17559: PUSH
17560: LD_INT 1
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: LIST
17567: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17568: LD_VAR 0 6
17572: PPUSH
17573: CALL_OW 264
17577: PUSH
17578: LD_INT 29
17580: PUSH
17581: EMPTY
17582: LIST
17583: IN
17584: IFFALSE 17605
// points := [ 70 , 200 , 400 ] ;
17586: LD_ADDR_VAR 0 9
17590: PUSH
17591: LD_INT 70
17593: PUSH
17594: LD_INT 200
17596: PUSH
17597: LD_INT 400
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17605: LD_VAR 0 6
17609: PPUSH
17610: CALL_OW 264
17614: PUSH
17615: LD_INT 14
17617: PUSH
17618: LD_INT 53
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: IN
17625: IFFALSE 17646
// points := [ 40 , 10 , 20 ] ;
17627: LD_ADDR_VAR 0 9
17631: PUSH
17632: LD_INT 40
17634: PUSH
17635: LD_INT 10
17637: PUSH
17638: LD_INT 20
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: LIST
17645: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17646: LD_VAR 0 6
17650: PPUSH
17651: CALL_OW 264
17655: PUSH
17656: LD_INT 9
17658: PUSH
17659: EMPTY
17660: LIST
17661: IN
17662: IFFALSE 17683
// points := [ 5 , 70 , 20 ] ;
17664: LD_ADDR_VAR 0 9
17668: PUSH
17669: LD_INT 5
17671: PUSH
17672: LD_INT 70
17674: PUSH
17675: LD_INT 20
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: LIST
17682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17683: LD_VAR 0 6
17687: PPUSH
17688: CALL_OW 264
17692: PUSH
17693: LD_INT 10
17695: PUSH
17696: EMPTY
17697: LIST
17698: IN
17699: IFFALSE 17720
// points := [ 35 , 110 , 70 ] ;
17701: LD_ADDR_VAR 0 9
17705: PUSH
17706: LD_INT 35
17708: PUSH
17709: LD_INT 110
17711: PUSH
17712: LD_INT 70
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: LIST
17719: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17720: LD_VAR 0 6
17724: PPUSH
17725: CALL_OW 265
17729: PUSH
17730: LD_INT 25
17732: EQUAL
17733: IFFALSE 17754
// points := [ 80 , 65 , 100 ] ;
17735: LD_ADDR_VAR 0 9
17739: PUSH
17740: LD_INT 80
17742: PUSH
17743: LD_INT 65
17745: PUSH
17746: LD_INT 100
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: LIST
17753: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17754: LD_VAR 0 6
17758: PPUSH
17759: CALL_OW 263
17763: PUSH
17764: LD_INT 1
17766: EQUAL
17767: IFFALSE 17802
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17769: LD_ADDR_VAR 0 10
17773: PUSH
17774: LD_VAR 0 10
17778: PUSH
17779: LD_VAR 0 6
17783: PPUSH
17784: CALL_OW 311
17788: PPUSH
17789: LD_INT 3
17791: PPUSH
17792: CALL_OW 259
17796: PUSH
17797: LD_INT 4
17799: MUL
17800: MUL
17801: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17802: LD_VAR 0 6
17806: PPUSH
17807: CALL_OW 263
17811: PUSH
17812: LD_INT 2
17814: EQUAL
17815: IFFALSE 17866
// begin j := IsControledBy ( i ) ;
17817: LD_ADDR_VAR 0 7
17821: PUSH
17822: LD_VAR 0 6
17826: PPUSH
17827: CALL_OW 312
17831: ST_TO_ADDR
// if j then
17832: LD_VAR 0 7
17836: IFFALSE 17866
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17838: LD_ADDR_VAR 0 10
17842: PUSH
17843: LD_VAR 0 10
17847: PUSH
17848: LD_VAR 0 7
17852: PPUSH
17853: LD_INT 3
17855: PPUSH
17856: CALL_OW 259
17860: PUSH
17861: LD_INT 3
17863: MUL
17864: MUL
17865: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17866: LD_VAR 0 6
17870: PPUSH
17871: CALL_OW 264
17875: PUSH
17876: LD_INT 5
17878: PUSH
17879: LD_INT 6
17881: PUSH
17882: LD_INT 46
17884: PUSH
17885: LD_INT 44
17887: PUSH
17888: LD_INT 47
17890: PUSH
17891: LD_INT 45
17893: PUSH
17894: LD_INT 28
17896: PUSH
17897: LD_INT 7
17899: PUSH
17900: LD_INT 27
17902: PUSH
17903: LD_INT 29
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: IN
17918: IFFALSE 17938
17920: PUSH
17921: LD_VAR 0 1
17925: PPUSH
17926: LD_INT 52
17928: PPUSH
17929: CALL_OW 321
17933: PUSH
17934: LD_INT 2
17936: EQUAL
17937: AND
17938: IFFALSE 17955
// bpoints := bpoints * 1.2 ;
17940: LD_ADDR_VAR 0 10
17944: PUSH
17945: LD_VAR 0 10
17949: PUSH
17950: LD_REAL  1.20000000000000E+0000
17953: MUL
17954: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17955: LD_VAR 0 6
17959: PPUSH
17960: CALL_OW 264
17964: PUSH
17965: LD_INT 6
17967: PUSH
17968: LD_INT 46
17970: PUSH
17971: LD_INT 47
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: LIST
17978: IN
17979: IFFALSE 17996
// bpoints := bpoints * 1.2 ;
17981: LD_ADDR_VAR 0 10
17985: PUSH
17986: LD_VAR 0 10
17990: PUSH
17991: LD_REAL  1.20000000000000E+0000
17994: MUL
17995: ST_TO_ADDR
// end ; unit_building :
17996: GO 18010
17998: LD_INT 3
18000: DOUBLE
18001: EQUAL
18002: IFTRUE 18006
18004: GO 18009
18006: POP
// ; end ;
18007: GO 18010
18009: POP
// for j = 1 to 3 do
18010: LD_ADDR_VAR 0 7
18014: PUSH
18015: DOUBLE
18016: LD_INT 1
18018: DEC
18019: ST_TO_ADDR
18020: LD_INT 3
18022: PUSH
18023: FOR_TO
18024: IFFALSE 18077
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18026: LD_ADDR_VAR 0 5
18030: PUSH
18031: LD_VAR 0 5
18035: PPUSH
18036: LD_VAR 0 7
18040: PPUSH
18041: LD_VAR 0 5
18045: PUSH
18046: LD_VAR 0 7
18050: ARRAY
18051: PUSH
18052: LD_VAR 0 9
18056: PUSH
18057: LD_VAR 0 7
18061: ARRAY
18062: PUSH
18063: LD_VAR 0 10
18067: MUL
18068: PLUS
18069: PPUSH
18070: CALL_OW 1
18074: ST_TO_ADDR
18075: GO 18023
18077: POP
18078: POP
// end ;
18079: GO 16552
18081: POP
18082: POP
// result := Replace ( result , 4 , tmp ) ;
18083: LD_ADDR_VAR 0 5
18087: PUSH
18088: LD_VAR 0 5
18092: PPUSH
18093: LD_INT 4
18095: PPUSH
18096: LD_VAR 0 8
18100: PPUSH
18101: CALL_OW 1
18105: ST_TO_ADDR
// end ;
18106: LD_VAR 0 5
18110: RET
// export function DangerAtRange ( unit , range ) ; begin
18111: LD_INT 0
18113: PPUSH
// if not unit then
18114: LD_VAR 0 1
18118: NOT
18119: IFFALSE 18123
// exit ;
18121: GO 18168
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18123: LD_ADDR_VAR 0 3
18127: PUSH
18128: LD_VAR 0 1
18132: PPUSH
18133: CALL_OW 255
18137: PPUSH
18138: LD_VAR 0 1
18142: PPUSH
18143: CALL_OW 250
18147: PPUSH
18148: LD_VAR 0 1
18152: PPUSH
18153: CALL_OW 251
18157: PPUSH
18158: LD_VAR 0 2
18162: PPUSH
18163: CALL 16402 0 4
18167: ST_TO_ADDR
// end ;
18168: LD_VAR 0 3
18172: RET
// export function DangerInArea ( side , area ) ; begin
18173: LD_INT 0
18175: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18176: LD_ADDR_VAR 0 3
18180: PUSH
18181: LD_VAR 0 2
18185: PPUSH
18186: LD_INT 81
18188: PUSH
18189: LD_VAR 0 1
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PPUSH
18198: CALL_OW 70
18202: ST_TO_ADDR
// end ;
18203: LD_VAR 0 3
18207: RET
// export function IsExtension ( b ) ; begin
18208: LD_INT 0
18210: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18211: LD_ADDR_VAR 0 2
18215: PUSH
18216: LD_VAR 0 1
18220: PUSH
18221: LD_INT 23
18223: PUSH
18224: LD_INT 20
18226: PUSH
18227: LD_INT 22
18229: PUSH
18230: LD_INT 17
18232: PUSH
18233: LD_INT 24
18235: PUSH
18236: LD_INT 21
18238: PUSH
18239: LD_INT 19
18241: PUSH
18242: LD_INT 16
18244: PUSH
18245: LD_INT 25
18247: PUSH
18248: LD_INT 18
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: IN
18263: ST_TO_ADDR
// end ;
18264: LD_VAR 0 2
18268: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18269: LD_INT 0
18271: PPUSH
18272: PPUSH
18273: PPUSH
// result := [ ] ;
18274: LD_ADDR_VAR 0 4
18278: PUSH
18279: EMPTY
18280: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18281: LD_ADDR_VAR 0 5
18285: PUSH
18286: LD_VAR 0 2
18290: PPUSH
18291: LD_INT 21
18293: PUSH
18294: LD_INT 3
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PPUSH
18301: CALL_OW 70
18305: ST_TO_ADDR
// if not tmp then
18306: LD_VAR 0 5
18310: NOT
18311: IFFALSE 18315
// exit ;
18313: GO 18379
// if checkLink then
18315: LD_VAR 0 3
18319: IFFALSE 18369
// begin for i in tmp do
18321: LD_ADDR_VAR 0 6
18325: PUSH
18326: LD_VAR 0 5
18330: PUSH
18331: FOR_IN
18332: IFFALSE 18367
// if GetBase ( i ) <> base then
18334: LD_VAR 0 6
18338: PPUSH
18339: CALL_OW 274
18343: PUSH
18344: LD_VAR 0 1
18348: NONEQUAL
18349: IFFALSE 18365
// ComLinkToBase ( base , i ) ;
18351: LD_VAR 0 1
18355: PPUSH
18356: LD_VAR 0 6
18360: PPUSH
18361: CALL_OW 169
18365: GO 18331
18367: POP
18368: POP
// end ; result := tmp ;
18369: LD_ADDR_VAR 0 4
18373: PUSH
18374: LD_VAR 0 5
18378: ST_TO_ADDR
// end ;
18379: LD_VAR 0 4
18383: RET
// export function ComComplete ( units , b ) ; var i ; begin
18384: LD_INT 0
18386: PPUSH
18387: PPUSH
// if not units then
18388: LD_VAR 0 1
18392: NOT
18393: IFFALSE 18397
// exit ;
18395: GO 18487
// for i in units do
18397: LD_ADDR_VAR 0 4
18401: PUSH
18402: LD_VAR 0 1
18406: PUSH
18407: FOR_IN
18408: IFFALSE 18485
// if BuildingStatus ( b ) = bs_build then
18410: LD_VAR 0 2
18414: PPUSH
18415: CALL_OW 461
18419: PUSH
18420: LD_INT 1
18422: EQUAL
18423: IFFALSE 18483
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18425: LD_VAR 0 4
18429: PPUSH
18430: LD_STRING h
18432: PUSH
18433: LD_VAR 0 2
18437: PPUSH
18438: CALL_OW 250
18442: PUSH
18443: LD_VAR 0 2
18447: PPUSH
18448: CALL_OW 251
18452: PUSH
18453: LD_VAR 0 2
18457: PUSH
18458: LD_INT 0
18460: PUSH
18461: LD_INT 0
18463: PUSH
18464: LD_INT 0
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: PUSH
18476: EMPTY
18477: LIST
18478: PPUSH
18479: CALL_OW 446
18483: GO 18407
18485: POP
18486: POP
// end ;
18487: LD_VAR 0 3
18491: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18492: LD_INT 0
18494: PPUSH
18495: PPUSH
18496: PPUSH
18497: PPUSH
18498: PPUSH
18499: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18500: LD_VAR 0 1
18504: NOT
18505: IFTRUE 18522
18507: PUSH
18508: LD_VAR 0 1
18512: PPUSH
18513: CALL_OW 263
18517: PUSH
18518: LD_INT 2
18520: NONEQUAL
18521: OR
18522: IFFALSE 18526
// exit ;
18524: GO 18842
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18526: LD_ADDR_VAR 0 6
18530: PUSH
18531: LD_INT 22
18533: PUSH
18534: LD_VAR 0 1
18538: PPUSH
18539: CALL_OW 255
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 2
18550: PUSH
18551: LD_INT 30
18553: PUSH
18554: LD_INT 36
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 34
18563: PUSH
18564: LD_INT 31
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: LIST
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PPUSH
18580: CALL_OW 69
18584: ST_TO_ADDR
// if not tmp then
18585: LD_VAR 0 6
18589: NOT
18590: IFFALSE 18594
// exit ;
18592: GO 18842
// result := [ ] ;
18594: LD_ADDR_VAR 0 2
18598: PUSH
18599: EMPTY
18600: ST_TO_ADDR
// for i in tmp do
18601: LD_ADDR_VAR 0 3
18605: PUSH
18606: LD_VAR 0 6
18610: PUSH
18611: FOR_IN
18612: IFFALSE 18683
// begin t := UnitsInside ( i ) ;
18614: LD_ADDR_VAR 0 4
18618: PUSH
18619: LD_VAR 0 3
18623: PPUSH
18624: CALL_OW 313
18628: ST_TO_ADDR
// if t then
18629: LD_VAR 0 4
18633: IFFALSE 18681
// for j in t do
18635: LD_ADDR_VAR 0 7
18639: PUSH
18640: LD_VAR 0 4
18644: PUSH
18645: FOR_IN
18646: IFFALSE 18679
// result := Replace ( result , result + 1 , j ) ;
18648: LD_ADDR_VAR 0 2
18652: PUSH
18653: LD_VAR 0 2
18657: PPUSH
18658: LD_VAR 0 2
18662: PUSH
18663: LD_INT 1
18665: PLUS
18666: PPUSH
18667: LD_VAR 0 7
18671: PPUSH
18672: CALL_OW 1
18676: ST_TO_ADDR
18677: GO 18645
18679: POP
18680: POP
// end ;
18681: GO 18611
18683: POP
18684: POP
// if not result then
18685: LD_VAR 0 2
18689: NOT
18690: IFFALSE 18694
// exit ;
18692: GO 18842
// mech := result [ 1 ] ;
18694: LD_ADDR_VAR 0 5
18698: PUSH
18699: LD_VAR 0 2
18703: PUSH
18704: LD_INT 1
18706: ARRAY
18707: ST_TO_ADDR
// if result > 1 then
18708: LD_VAR 0 2
18712: PUSH
18713: LD_INT 1
18715: GREATER
18716: IFFALSE 18828
// begin for i = 2 to result do
18718: LD_ADDR_VAR 0 3
18722: PUSH
18723: DOUBLE
18724: LD_INT 2
18726: DEC
18727: ST_TO_ADDR
18728: LD_VAR 0 2
18732: PUSH
18733: FOR_TO
18734: IFFALSE 18826
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18736: LD_ADDR_VAR 0 4
18740: PUSH
18741: LD_VAR 0 2
18745: PUSH
18746: LD_VAR 0 3
18750: ARRAY
18751: PPUSH
18752: LD_INT 3
18754: PPUSH
18755: CALL_OW 259
18759: PUSH
18760: LD_VAR 0 2
18764: PUSH
18765: LD_VAR 0 3
18769: ARRAY
18770: PPUSH
18771: CALL_OW 432
18775: MINUS
18776: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18777: LD_VAR 0 4
18781: PUSH
18782: LD_VAR 0 5
18786: PPUSH
18787: LD_INT 3
18789: PPUSH
18790: CALL_OW 259
18794: PUSH
18795: LD_VAR 0 5
18799: PPUSH
18800: CALL_OW 432
18804: MINUS
18805: GREATEREQUAL
18806: IFFALSE 18824
// mech := result [ i ] ;
18808: LD_ADDR_VAR 0 5
18812: PUSH
18813: LD_VAR 0 2
18817: PUSH
18818: LD_VAR 0 3
18822: ARRAY
18823: ST_TO_ADDR
// end ;
18824: GO 18733
18826: POP
18827: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18828: LD_VAR 0 1
18832: PPUSH
18833: LD_VAR 0 5
18837: PPUSH
18838: CALL_OW 135
// end ;
18842: LD_VAR 0 2
18846: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18847: LD_INT 0
18849: PPUSH
18850: PPUSH
18851: PPUSH
18852: PPUSH
18853: PPUSH
18854: PPUSH
18855: PPUSH
18856: PPUSH
18857: PPUSH
18858: PPUSH
18859: PPUSH
18860: PPUSH
18861: PPUSH
// result := [ ] ;
18862: LD_ADDR_VAR 0 7
18866: PUSH
18867: EMPTY
18868: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18869: LD_VAR 0 1
18873: PPUSH
18874: CALL_OW 266
18878: PUSH
18879: LD_INT 0
18881: PUSH
18882: LD_INT 1
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: IN
18889: NOT
18890: IFFALSE 18894
// exit ;
18892: GO 20534
// if name then
18894: LD_VAR 0 3
18898: IFFALSE 18914
// SetBName ( base_dep , name ) ;
18900: LD_VAR 0 1
18904: PPUSH
18905: LD_VAR 0 3
18909: PPUSH
18910: CALL_OW 500
// base := GetBase ( base_dep ) ;
18914: LD_ADDR_VAR 0 15
18918: PUSH
18919: LD_VAR 0 1
18923: PPUSH
18924: CALL_OW 274
18928: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18929: LD_ADDR_VAR 0 16
18933: PUSH
18934: LD_VAR 0 1
18938: PPUSH
18939: CALL_OW 255
18943: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18944: LD_ADDR_VAR 0 17
18948: PUSH
18949: LD_VAR 0 1
18953: PPUSH
18954: CALL_OW 248
18958: ST_TO_ADDR
// if sources then
18959: LD_VAR 0 5
18963: IFFALSE 19010
// for i = 1 to 3 do
18965: LD_ADDR_VAR 0 8
18969: PUSH
18970: DOUBLE
18971: LD_INT 1
18973: DEC
18974: ST_TO_ADDR
18975: LD_INT 3
18977: PUSH
18978: FOR_TO
18979: IFFALSE 19008
// AddResourceType ( base , i , sources [ i ] ) ;
18981: LD_VAR 0 15
18985: PPUSH
18986: LD_VAR 0 8
18990: PPUSH
18991: LD_VAR 0 5
18995: PUSH
18996: LD_VAR 0 8
19000: ARRAY
19001: PPUSH
19002: CALL_OW 276
19006: GO 18978
19008: POP
19009: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19010: LD_ADDR_VAR 0 18
19014: PUSH
19015: LD_VAR 0 15
19019: PPUSH
19020: LD_VAR 0 2
19024: PPUSH
19025: LD_INT 1
19027: PPUSH
19028: CALL 18269 0 3
19032: ST_TO_ADDR
// InitHc ;
19033: CALL_OW 19
// InitUc ;
19037: CALL_OW 18
// uc_side := side ;
19041: LD_ADDR_OWVAR 20
19045: PUSH
19046: LD_VAR 0 16
19050: ST_TO_ADDR
// uc_nation := nation ;
19051: LD_ADDR_OWVAR 21
19055: PUSH
19056: LD_VAR 0 17
19060: ST_TO_ADDR
// if buildings then
19061: LD_VAR 0 18
19065: IFFALSE 20393
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19067: LD_ADDR_VAR 0 19
19071: PUSH
19072: LD_VAR 0 18
19076: PPUSH
19077: LD_INT 2
19079: PUSH
19080: LD_INT 30
19082: PUSH
19083: LD_INT 29
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 30
19092: PUSH
19093: LD_INT 30
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: LIST
19104: PPUSH
19105: CALL_OW 72
19109: ST_TO_ADDR
// if tmp then
19110: LD_VAR 0 19
19114: IFFALSE 19162
// for i in tmp do
19116: LD_ADDR_VAR 0 8
19120: PUSH
19121: LD_VAR 0 19
19125: PUSH
19126: FOR_IN
19127: IFFALSE 19160
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19129: LD_VAR 0 8
19133: PPUSH
19134: CALL_OW 250
19138: PPUSH
19139: LD_VAR 0 8
19143: PPUSH
19144: CALL_OW 251
19148: PPUSH
19149: LD_VAR 0 16
19153: PPUSH
19154: CALL_OW 441
19158: GO 19126
19160: POP
19161: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19162: LD_VAR 0 18
19166: PPUSH
19167: LD_INT 2
19169: PUSH
19170: LD_INT 30
19172: PUSH
19173: LD_INT 32
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 30
19182: PUSH
19183: LD_INT 33
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: LIST
19194: PPUSH
19195: CALL_OW 72
19199: IFFALSE 19287
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19201: LD_ADDR_VAR 0 8
19205: PUSH
19206: LD_VAR 0 18
19210: PPUSH
19211: LD_INT 2
19213: PUSH
19214: LD_INT 30
19216: PUSH
19217: LD_INT 32
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 30
19226: PUSH
19227: LD_INT 33
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: LIST
19238: PPUSH
19239: CALL_OW 72
19243: PUSH
19244: FOR_IN
19245: IFFALSE 19285
// begin if not GetBWeapon ( i ) then
19247: LD_VAR 0 8
19251: PPUSH
19252: CALL_OW 269
19256: NOT
19257: IFFALSE 19283
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19259: LD_VAR 0 8
19263: PPUSH
19264: LD_VAR 0 8
19268: PPUSH
19269: LD_VAR 0 2
19273: PPUSH
19274: CALL 20539 0 2
19278: PPUSH
19279: CALL_OW 431
// end ;
19283: GO 19244
19285: POP
19286: POP
// end ; for i = 1 to personel do
19287: LD_ADDR_VAR 0 8
19291: PUSH
19292: DOUBLE
19293: LD_INT 1
19295: DEC
19296: ST_TO_ADDR
19297: LD_VAR 0 6
19301: PUSH
19302: FOR_TO
19303: IFFALSE 20373
// begin if i > 4 then
19305: LD_VAR 0 8
19309: PUSH
19310: LD_INT 4
19312: GREATER
19313: IFFALSE 19317
// break ;
19315: GO 20373
// case i of 1 :
19317: LD_VAR 0 8
19321: PUSH
19322: LD_INT 1
19324: DOUBLE
19325: EQUAL
19326: IFTRUE 19330
19328: GO 19410
19330: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19331: LD_ADDR_VAR 0 12
19335: PUSH
19336: LD_VAR 0 18
19340: PPUSH
19341: LD_INT 22
19343: PUSH
19344: LD_VAR 0 16
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 58
19355: PUSH
19356: EMPTY
19357: LIST
19358: PUSH
19359: LD_INT 2
19361: PUSH
19362: LD_INT 30
19364: PUSH
19365: LD_INT 32
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 30
19374: PUSH
19375: LD_INT 4
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 30
19384: PUSH
19385: LD_INT 5
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: LIST
19402: PPUSH
19403: CALL_OW 72
19407: ST_TO_ADDR
19408: GO 19632
19410: LD_INT 2
19412: DOUBLE
19413: EQUAL
19414: IFTRUE 19418
19416: GO 19480
19418: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19419: LD_ADDR_VAR 0 12
19423: PUSH
19424: LD_VAR 0 18
19428: PPUSH
19429: LD_INT 22
19431: PUSH
19432: LD_VAR 0 16
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 2
19443: PUSH
19444: LD_INT 30
19446: PUSH
19447: LD_INT 0
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 30
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: LIST
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PPUSH
19473: CALL_OW 72
19477: ST_TO_ADDR
19478: GO 19632
19480: LD_INT 3
19482: DOUBLE
19483: EQUAL
19484: IFTRUE 19488
19486: GO 19550
19488: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19489: LD_ADDR_VAR 0 12
19493: PUSH
19494: LD_VAR 0 18
19498: PPUSH
19499: LD_INT 22
19501: PUSH
19502: LD_VAR 0 16
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 2
19513: PUSH
19514: LD_INT 30
19516: PUSH
19517: LD_INT 2
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 30
19526: PUSH
19527: LD_INT 3
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PPUSH
19543: CALL_OW 72
19547: ST_TO_ADDR
19548: GO 19632
19550: LD_INT 4
19552: DOUBLE
19553: EQUAL
19554: IFTRUE 19558
19556: GO 19631
19558: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19559: LD_ADDR_VAR 0 12
19563: PUSH
19564: LD_VAR 0 18
19568: PPUSH
19569: LD_INT 22
19571: PUSH
19572: LD_VAR 0 16
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 2
19583: PUSH
19584: LD_INT 30
19586: PUSH
19587: LD_INT 6
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 30
19596: PUSH
19597: LD_INT 7
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 30
19606: PUSH
19607: LD_INT 8
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PPUSH
19624: CALL_OW 72
19628: ST_TO_ADDR
19629: GO 19632
19631: POP
// if i = 1 then
19632: LD_VAR 0 8
19636: PUSH
19637: LD_INT 1
19639: EQUAL
19640: IFFALSE 19751
// begin tmp := [ ] ;
19642: LD_ADDR_VAR 0 19
19646: PUSH
19647: EMPTY
19648: ST_TO_ADDR
// for j in f do
19649: LD_ADDR_VAR 0 9
19653: PUSH
19654: LD_VAR 0 12
19658: PUSH
19659: FOR_IN
19660: IFFALSE 19733
// if GetBType ( j ) = b_bunker then
19662: LD_VAR 0 9
19666: PPUSH
19667: CALL_OW 266
19671: PUSH
19672: LD_INT 32
19674: EQUAL
19675: IFFALSE 19702
// tmp := Insert ( tmp , 1 , j ) else
19677: LD_ADDR_VAR 0 19
19681: PUSH
19682: LD_VAR 0 19
19686: PPUSH
19687: LD_INT 1
19689: PPUSH
19690: LD_VAR 0 9
19694: PPUSH
19695: CALL_OW 2
19699: ST_TO_ADDR
19700: GO 19731
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19702: LD_ADDR_VAR 0 19
19706: PUSH
19707: LD_VAR 0 19
19711: PPUSH
19712: LD_VAR 0 19
19716: PUSH
19717: LD_INT 1
19719: PLUS
19720: PPUSH
19721: LD_VAR 0 9
19725: PPUSH
19726: CALL_OW 2
19730: ST_TO_ADDR
19731: GO 19659
19733: POP
19734: POP
// if tmp then
19735: LD_VAR 0 19
19739: IFFALSE 19751
// f := tmp ;
19741: LD_ADDR_VAR 0 12
19745: PUSH
19746: LD_VAR 0 19
19750: ST_TO_ADDR
// end ; x := personel [ i ] ;
19751: LD_ADDR_VAR 0 13
19755: PUSH
19756: LD_VAR 0 6
19760: PUSH
19761: LD_VAR 0 8
19765: ARRAY
19766: ST_TO_ADDR
// if x = - 1 then
19767: LD_VAR 0 13
19771: PUSH
19772: LD_INT 1
19774: NEG
19775: EQUAL
19776: IFFALSE 19987
// begin for j in f do
19778: LD_ADDR_VAR 0 9
19782: PUSH
19783: LD_VAR 0 12
19787: PUSH
19788: FOR_IN
19789: IFFALSE 19983
// repeat InitHc ;
19791: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19795: LD_VAR 0 9
19799: PPUSH
19800: CALL_OW 266
19804: PUSH
19805: LD_INT 5
19807: EQUAL
19808: IFFALSE 19878
// begin if UnitsInside ( j ) < 3 then
19810: LD_VAR 0 9
19814: PPUSH
19815: CALL_OW 313
19819: PUSH
19820: LD_INT 3
19822: LESS
19823: IFFALSE 19859
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19825: LD_INT 0
19827: PPUSH
19828: LD_INT 5
19830: PUSH
19831: LD_INT 8
19833: PUSH
19834: LD_INT 9
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: LIST
19841: PUSH
19842: LD_VAR 0 17
19846: ARRAY
19847: PPUSH
19848: LD_VAR 0 4
19852: PPUSH
19853: CALL_OW 380
19857: GO 19876
// PrepareHuman ( false , i , skill ) ;
19859: LD_INT 0
19861: PPUSH
19862: LD_VAR 0 8
19866: PPUSH
19867: LD_VAR 0 4
19871: PPUSH
19872: CALL_OW 380
// end else
19876: GO 19895
// PrepareHuman ( false , i , skill ) ;
19878: LD_INT 0
19880: PPUSH
19881: LD_VAR 0 8
19885: PPUSH
19886: LD_VAR 0 4
19890: PPUSH
19891: CALL_OW 380
// un := CreateHuman ;
19895: LD_ADDR_VAR 0 14
19899: PUSH
19900: CALL_OW 44
19904: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19905: LD_ADDR_VAR 0 7
19909: PUSH
19910: LD_VAR 0 7
19914: PPUSH
19915: LD_INT 1
19917: PPUSH
19918: LD_VAR 0 14
19922: PPUSH
19923: CALL_OW 2
19927: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19928: LD_VAR 0 14
19932: PPUSH
19933: LD_VAR 0 9
19937: PPUSH
19938: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19942: LD_VAR 0 9
19946: PPUSH
19947: CALL_OW 313
19951: PUSH
19952: LD_INT 6
19954: EQUAL
19955: IFTRUE 19979
19957: PUSH
19958: LD_VAR 0 9
19962: PPUSH
19963: CALL_OW 266
19967: PUSH
19968: LD_INT 32
19970: PUSH
19971: LD_INT 31
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: IN
19978: OR
19979: IFFALSE 19791
19981: GO 19788
19983: POP
19984: POP
// end else
19985: GO 20371
// for j = 1 to x do
19987: LD_ADDR_VAR 0 9
19991: PUSH
19992: DOUBLE
19993: LD_INT 1
19995: DEC
19996: ST_TO_ADDR
19997: LD_VAR 0 13
20001: PUSH
20002: FOR_TO
20003: IFFALSE 20369
// begin InitHc ;
20005: CALL_OW 19
// if not f then
20009: LD_VAR 0 12
20013: NOT
20014: IFFALSE 20103
// begin PrepareHuman ( false , i , skill ) ;
20016: LD_INT 0
20018: PPUSH
20019: LD_VAR 0 8
20023: PPUSH
20024: LD_VAR 0 4
20028: PPUSH
20029: CALL_OW 380
// un := CreateHuman ;
20033: LD_ADDR_VAR 0 14
20037: PUSH
20038: CALL_OW 44
20042: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20043: LD_ADDR_VAR 0 7
20047: PUSH
20048: LD_VAR 0 7
20052: PPUSH
20053: LD_INT 1
20055: PPUSH
20056: LD_VAR 0 14
20060: PPUSH
20061: CALL_OW 2
20065: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20066: LD_VAR 0 14
20070: PPUSH
20071: LD_VAR 0 1
20075: PPUSH
20076: CALL_OW 250
20080: PPUSH
20081: LD_VAR 0 1
20085: PPUSH
20086: CALL_OW 251
20090: PPUSH
20091: LD_INT 10
20093: PPUSH
20094: LD_INT 0
20096: PPUSH
20097: CALL_OW 50
// continue ;
20101: GO 20002
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20103: LD_VAR 0 12
20107: PUSH
20108: LD_INT 1
20110: ARRAY
20111: PPUSH
20112: CALL_OW 313
20116: IFFALSE 20144
20118: PUSH
20119: LD_VAR 0 12
20123: PUSH
20124: LD_INT 1
20126: ARRAY
20127: PPUSH
20128: CALL_OW 266
20132: PUSH
20133: LD_INT 32
20135: PUSH
20136: LD_INT 31
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: IN
20143: AND
20144: IFTRUE 20165
20146: PUSH
20147: LD_VAR 0 12
20151: PUSH
20152: LD_INT 1
20154: ARRAY
20155: PPUSH
20156: CALL_OW 313
20160: PUSH
20161: LD_INT 6
20163: EQUAL
20164: OR
20165: IFFALSE 20185
// f := Delete ( f , 1 ) ;
20167: LD_ADDR_VAR 0 12
20171: PUSH
20172: LD_VAR 0 12
20176: PPUSH
20177: LD_INT 1
20179: PPUSH
20180: CALL_OW 3
20184: ST_TO_ADDR
// if not f then
20185: LD_VAR 0 12
20189: NOT
20190: IFFALSE 20208
// begin x := x + 2 ;
20192: LD_ADDR_VAR 0 13
20196: PUSH
20197: LD_VAR 0 13
20201: PUSH
20202: LD_INT 2
20204: PLUS
20205: ST_TO_ADDR
// continue ;
20206: GO 20002
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20208: LD_VAR 0 12
20212: PUSH
20213: LD_INT 1
20215: ARRAY
20216: PPUSH
20217: CALL_OW 266
20221: PUSH
20222: LD_INT 5
20224: EQUAL
20225: IFFALSE 20299
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20227: LD_VAR 0 12
20231: PUSH
20232: LD_INT 1
20234: ARRAY
20235: PPUSH
20236: CALL_OW 313
20240: PUSH
20241: LD_INT 3
20243: LESS
20244: IFFALSE 20280
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20246: LD_INT 0
20248: PPUSH
20249: LD_INT 5
20251: PUSH
20252: LD_INT 8
20254: PUSH
20255: LD_INT 9
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: LIST
20262: PUSH
20263: LD_VAR 0 17
20267: ARRAY
20268: PPUSH
20269: LD_VAR 0 4
20273: PPUSH
20274: CALL_OW 380
20278: GO 20297
// PrepareHuman ( false , i , skill ) ;
20280: LD_INT 0
20282: PPUSH
20283: LD_VAR 0 8
20287: PPUSH
20288: LD_VAR 0 4
20292: PPUSH
20293: CALL_OW 380
// end else
20297: GO 20316
// PrepareHuman ( false , i , skill ) ;
20299: LD_INT 0
20301: PPUSH
20302: LD_VAR 0 8
20306: PPUSH
20307: LD_VAR 0 4
20311: PPUSH
20312: CALL_OW 380
// un := CreateHuman ;
20316: LD_ADDR_VAR 0 14
20320: PUSH
20321: CALL_OW 44
20325: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20326: LD_ADDR_VAR 0 7
20330: PUSH
20331: LD_VAR 0 7
20335: PPUSH
20336: LD_INT 1
20338: PPUSH
20339: LD_VAR 0 14
20343: PPUSH
20344: CALL_OW 2
20348: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20349: LD_VAR 0 14
20353: PPUSH
20354: LD_VAR 0 12
20358: PUSH
20359: LD_INT 1
20361: ARRAY
20362: PPUSH
20363: CALL_OW 52
// end ;
20367: GO 20002
20369: POP
20370: POP
// end ;
20371: GO 19302
20373: POP
20374: POP
// result := result ^ buildings ;
20375: LD_ADDR_VAR 0 7
20379: PUSH
20380: LD_VAR 0 7
20384: PUSH
20385: LD_VAR 0 18
20389: ADD
20390: ST_TO_ADDR
// end else
20391: GO 20534
// begin for i = 1 to personel do
20393: LD_ADDR_VAR 0 8
20397: PUSH
20398: DOUBLE
20399: LD_INT 1
20401: DEC
20402: ST_TO_ADDR
20403: LD_VAR 0 6
20407: PUSH
20408: FOR_TO
20409: IFFALSE 20532
// begin if i > 4 then
20411: LD_VAR 0 8
20415: PUSH
20416: LD_INT 4
20418: GREATER
20419: IFFALSE 20423
// break ;
20421: GO 20532
// x := personel [ i ] ;
20423: LD_ADDR_VAR 0 13
20427: PUSH
20428: LD_VAR 0 6
20432: PUSH
20433: LD_VAR 0 8
20437: ARRAY
20438: ST_TO_ADDR
// if x = - 1 then
20439: LD_VAR 0 13
20443: PUSH
20444: LD_INT 1
20446: NEG
20447: EQUAL
20448: IFFALSE 20452
// continue ;
20450: GO 20408
// PrepareHuman ( false , i , skill ) ;
20452: LD_INT 0
20454: PPUSH
20455: LD_VAR 0 8
20459: PPUSH
20460: LD_VAR 0 4
20464: PPUSH
20465: CALL_OW 380
// un := CreateHuman ;
20469: LD_ADDR_VAR 0 14
20473: PUSH
20474: CALL_OW 44
20478: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20479: LD_VAR 0 14
20483: PPUSH
20484: LD_VAR 0 1
20488: PPUSH
20489: CALL_OW 250
20493: PPUSH
20494: LD_VAR 0 1
20498: PPUSH
20499: CALL_OW 251
20503: PPUSH
20504: LD_INT 10
20506: PPUSH
20507: LD_INT 0
20509: PPUSH
20510: CALL_OW 50
// result := result ^ un ;
20514: LD_ADDR_VAR 0 7
20518: PUSH
20519: LD_VAR 0 7
20523: PUSH
20524: LD_VAR 0 14
20528: ADD
20529: ST_TO_ADDR
// end ;
20530: GO 20408
20532: POP
20533: POP
// end ; end ;
20534: LD_VAR 0 7
20538: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20539: LD_INT 0
20541: PPUSH
20542: PPUSH
20543: PPUSH
20544: PPUSH
20545: PPUSH
20546: PPUSH
20547: PPUSH
20548: PPUSH
20549: PPUSH
20550: PPUSH
20551: PPUSH
20552: PPUSH
20553: PPUSH
20554: PPUSH
20555: PPUSH
20556: PPUSH
// result := false ;
20557: LD_ADDR_VAR 0 3
20561: PUSH
20562: LD_INT 0
20564: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20565: LD_VAR 0 1
20569: NOT
20570: IFTRUE 20595
20572: PUSH
20573: LD_VAR 0 1
20577: PPUSH
20578: CALL_OW 266
20582: PUSH
20583: LD_INT 32
20585: PUSH
20586: LD_INT 33
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: IN
20593: NOT
20594: OR
20595: IFFALSE 20599
// exit ;
20597: GO 21734
// nat := GetNation ( tower ) ;
20599: LD_ADDR_VAR 0 12
20603: PUSH
20604: LD_VAR 0 1
20608: PPUSH
20609: CALL_OW 248
20613: ST_TO_ADDR
// side := GetSide ( tower ) ;
20614: LD_ADDR_VAR 0 16
20618: PUSH
20619: LD_VAR 0 1
20623: PPUSH
20624: CALL_OW 255
20628: ST_TO_ADDR
// x := GetX ( tower ) ;
20629: LD_ADDR_VAR 0 10
20633: PUSH
20634: LD_VAR 0 1
20638: PPUSH
20639: CALL_OW 250
20643: ST_TO_ADDR
// y := GetY ( tower ) ;
20644: LD_ADDR_VAR 0 11
20648: PUSH
20649: LD_VAR 0 1
20653: PPUSH
20654: CALL_OW 251
20658: ST_TO_ADDR
// if not x or not y then
20659: LD_VAR 0 10
20663: NOT
20664: IFTRUE 20673
20666: PUSH
20667: LD_VAR 0 11
20671: NOT
20672: OR
20673: IFFALSE 20677
// exit ;
20675: GO 21734
// weapon := 0 ;
20677: LD_ADDR_VAR 0 18
20681: PUSH
20682: LD_INT 0
20684: ST_TO_ADDR
// fac_list := [ ] ;
20685: LD_ADDR_VAR 0 17
20689: PUSH
20690: EMPTY
20691: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20692: LD_ADDR_VAR 0 6
20696: PUSH
20697: LD_VAR 0 1
20701: PPUSH
20702: CALL_OW 274
20706: PPUSH
20707: LD_VAR 0 2
20711: PPUSH
20712: LD_INT 0
20714: PPUSH
20715: CALL 18269 0 3
20719: PPUSH
20720: LD_INT 30
20722: PUSH
20723: LD_INT 3
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PPUSH
20730: CALL_OW 72
20734: ST_TO_ADDR
// if not factories then
20735: LD_VAR 0 6
20739: NOT
20740: IFFALSE 20744
// exit ;
20742: GO 21734
// for i in factories do
20744: LD_ADDR_VAR 0 8
20748: PUSH
20749: LD_VAR 0 6
20753: PUSH
20754: FOR_IN
20755: IFFALSE 20780
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20757: LD_ADDR_VAR 0 17
20761: PUSH
20762: LD_VAR 0 17
20766: PUSH
20767: LD_VAR 0 8
20771: PPUSH
20772: CALL_OW 478
20776: UNION
20777: ST_TO_ADDR
20778: GO 20754
20780: POP
20781: POP
// if not fac_list then
20782: LD_VAR 0 17
20786: NOT
20787: IFFALSE 20791
// exit ;
20789: GO 21734
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20791: LD_ADDR_VAR 0 5
20795: PUSH
20796: LD_INT 4
20798: PUSH
20799: LD_INT 5
20801: PUSH
20802: LD_INT 9
20804: PUSH
20805: LD_INT 10
20807: PUSH
20808: LD_INT 6
20810: PUSH
20811: LD_INT 7
20813: PUSH
20814: LD_INT 11
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 27
20828: PUSH
20829: LD_INT 28
20831: PUSH
20832: LD_INT 26
20834: PUSH
20835: LD_INT 30
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 43
20846: PUSH
20847: LD_INT 44
20849: PUSH
20850: LD_INT 46
20852: PUSH
20853: LD_INT 45
20855: PUSH
20856: LD_INT 47
20858: PUSH
20859: LD_INT 49
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: LIST
20874: PUSH
20875: LD_VAR 0 12
20879: ARRAY
20880: ST_TO_ADDR
// list := list isect fac_list ;
20881: LD_ADDR_VAR 0 5
20885: PUSH
20886: LD_VAR 0 5
20890: PUSH
20891: LD_VAR 0 17
20895: ISECT
20896: ST_TO_ADDR
// if not list then
20897: LD_VAR 0 5
20901: NOT
20902: IFFALSE 20906
// exit ;
20904: GO 21734
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20906: LD_VAR 0 12
20910: PUSH
20911: LD_INT 3
20913: EQUAL
20914: IFFALSE 20926
20916: PUSH
20917: LD_INT 49
20919: PUSH
20920: LD_VAR 0 5
20924: IN
20925: AND
20926: IFFALSE 20946
20928: PUSH
20929: LD_INT 31
20931: PPUSH
20932: LD_VAR 0 16
20936: PPUSH
20937: CALL_OW 321
20941: PUSH
20942: LD_INT 2
20944: EQUAL
20945: AND
20946: IFFALSE 21006
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20948: LD_INT 22
20950: PUSH
20951: LD_VAR 0 16
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 35
20962: PUSH
20963: LD_INT 49
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 91
20972: PUSH
20973: LD_VAR 0 1
20977: PUSH
20978: LD_INT 10
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: LIST
20990: PPUSH
20991: CALL_OW 69
20995: NOT
20996: IFFALSE 21006
// weapon := ru_time_lapser ;
20998: LD_ADDR_VAR 0 18
21002: PUSH
21003: LD_INT 49
21005: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21006: LD_VAR 0 12
21010: PUSH
21011: LD_INT 1
21013: PUSH
21014: LD_INT 2
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: IN
21021: IFFALSE 21045
21023: PUSH
21024: LD_INT 11
21026: PUSH
21027: LD_VAR 0 5
21031: IN
21032: IFTRUE 21044
21034: PUSH
21035: LD_INT 30
21037: PUSH
21038: LD_VAR 0 5
21042: IN
21043: OR
21044: AND
21045: IFFALSE 21065
21047: PUSH
21048: LD_INT 6
21050: PPUSH
21051: LD_VAR 0 16
21055: PPUSH
21056: CALL_OW 321
21060: PUSH
21061: LD_INT 2
21063: EQUAL
21064: AND
21065: IFFALSE 21232
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21067: LD_INT 22
21069: PUSH
21070: LD_VAR 0 16
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 2
21081: PUSH
21082: LD_INT 35
21084: PUSH
21085: LD_INT 11
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 35
21094: PUSH
21095: LD_INT 30
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 91
21109: PUSH
21110: LD_VAR 0 1
21114: PUSH
21115: LD_INT 18
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: LIST
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: LIST
21127: PPUSH
21128: CALL_OW 69
21132: NOT
21133: IFFALSE 21209
21135: PUSH
21136: LD_INT 22
21138: PUSH
21139: LD_VAR 0 16
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 2
21150: PUSH
21151: LD_INT 30
21153: PUSH
21154: LD_INT 32
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 30
21163: PUSH
21164: LD_INT 33
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 91
21178: PUSH
21179: LD_VAR 0 1
21183: PUSH
21184: LD_INT 12
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: LIST
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: LIST
21196: PUSH
21197: EMPTY
21198: LIST
21199: PPUSH
21200: CALL_OW 69
21204: PUSH
21205: LD_INT 2
21207: GREATER
21208: AND
21209: IFFALSE 21232
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21211: LD_ADDR_VAR 0 18
21215: PUSH
21216: LD_INT 11
21218: PUSH
21219: LD_INT 30
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_VAR 0 12
21230: ARRAY
21231: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21232: LD_VAR 0 18
21236: NOT
21237: IFFALSE 21257
21239: PUSH
21240: LD_INT 40
21242: PPUSH
21243: LD_VAR 0 16
21247: PPUSH
21248: CALL_OW 321
21252: PUSH
21253: LD_INT 2
21255: EQUAL
21256: AND
21257: IFFALSE 21293
21259: PUSH
21260: LD_INT 7
21262: PUSH
21263: LD_VAR 0 5
21267: IN
21268: IFTRUE 21280
21270: PUSH
21271: LD_INT 28
21273: PUSH
21274: LD_VAR 0 5
21278: IN
21279: OR
21280: IFTRUE 21292
21282: PUSH
21283: LD_INT 45
21285: PUSH
21286: LD_VAR 0 5
21290: IN
21291: OR
21292: AND
21293: IFFALSE 21547
// begin hex := GetHexInfo ( x , y ) ;
21295: LD_ADDR_VAR 0 4
21299: PUSH
21300: LD_VAR 0 10
21304: PPUSH
21305: LD_VAR 0 11
21309: PPUSH
21310: CALL_OW 546
21314: ST_TO_ADDR
// if hex [ 1 ] then
21315: LD_VAR 0 4
21319: PUSH
21320: LD_INT 1
21322: ARRAY
21323: IFFALSE 21327
// exit ;
21325: GO 21734
// height := hex [ 2 ] ;
21327: LD_ADDR_VAR 0 15
21331: PUSH
21332: LD_VAR 0 4
21336: PUSH
21337: LD_INT 2
21339: ARRAY
21340: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21341: LD_ADDR_VAR 0 14
21345: PUSH
21346: LD_INT 0
21348: PUSH
21349: LD_INT 2
21351: PUSH
21352: LD_INT 3
21354: PUSH
21355: LD_INT 5
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: ST_TO_ADDR
// for i in tmp do
21364: LD_ADDR_VAR 0 8
21368: PUSH
21369: LD_VAR 0 14
21373: PUSH
21374: FOR_IN
21375: IFFALSE 21545
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21377: LD_ADDR_VAR 0 9
21381: PUSH
21382: LD_VAR 0 10
21386: PPUSH
21387: LD_VAR 0 8
21391: PPUSH
21392: LD_INT 5
21394: PPUSH
21395: CALL_OW 272
21399: PUSH
21400: LD_VAR 0 11
21404: PPUSH
21405: LD_VAR 0 8
21409: PPUSH
21410: LD_INT 5
21412: PPUSH
21413: CALL_OW 273
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21422: LD_VAR 0 9
21426: PUSH
21427: LD_INT 1
21429: ARRAY
21430: PPUSH
21431: LD_VAR 0 9
21435: PUSH
21436: LD_INT 2
21438: ARRAY
21439: PPUSH
21440: CALL_OW 488
21444: IFFALSE 21543
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21446: LD_ADDR_VAR 0 4
21450: PUSH
21451: LD_VAR 0 9
21455: PUSH
21456: LD_INT 1
21458: ARRAY
21459: PPUSH
21460: LD_VAR 0 9
21464: PUSH
21465: LD_INT 2
21467: ARRAY
21468: PPUSH
21469: CALL_OW 546
21473: ST_TO_ADDR
// if hex [ 1 ] then
21474: LD_VAR 0 4
21478: PUSH
21479: LD_INT 1
21481: ARRAY
21482: IFFALSE 21486
// continue ;
21484: GO 21374
// h := hex [ 2 ] ;
21486: LD_ADDR_VAR 0 13
21490: PUSH
21491: LD_VAR 0 4
21495: PUSH
21496: LD_INT 2
21498: ARRAY
21499: ST_TO_ADDR
// if h + 7 < height then
21500: LD_VAR 0 13
21504: PUSH
21505: LD_INT 7
21507: PLUS
21508: PUSH
21509: LD_VAR 0 15
21513: LESS
21514: IFFALSE 21543
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21516: LD_ADDR_VAR 0 18
21520: PUSH
21521: LD_INT 7
21523: PUSH
21524: LD_INT 28
21526: PUSH
21527: LD_INT 45
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: LIST
21534: PUSH
21535: LD_VAR 0 12
21539: ARRAY
21540: ST_TO_ADDR
// break ;
21541: GO 21545
// end ; end ; end ;
21543: GO 21374
21545: POP
21546: POP
// end ; if not weapon then
21547: LD_VAR 0 18
21551: NOT
21552: IFFALSE 21612
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21554: LD_ADDR_VAR 0 5
21558: PUSH
21559: LD_VAR 0 5
21563: PUSH
21564: LD_INT 11
21566: PUSH
21567: LD_INT 30
21569: PUSH
21570: LD_INT 49
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: LIST
21577: DIFF
21578: ST_TO_ADDR
// if not list then
21579: LD_VAR 0 5
21583: NOT
21584: IFFALSE 21588
// exit ;
21586: GO 21734
// weapon := list [ rand ( 1 , list ) ] ;
21588: LD_ADDR_VAR 0 18
21592: PUSH
21593: LD_VAR 0 5
21597: PUSH
21598: LD_INT 1
21600: PPUSH
21601: LD_VAR 0 5
21605: PPUSH
21606: CALL_OW 12
21610: ARRAY
21611: ST_TO_ADDR
// end ; if weapon then
21612: LD_VAR 0 18
21616: IFFALSE 21734
// begin tmp := CostOfWeapon ( weapon ) ;
21618: LD_ADDR_VAR 0 14
21622: PUSH
21623: LD_VAR 0 18
21627: PPUSH
21628: CALL_OW 451
21632: ST_TO_ADDR
// j := GetBase ( tower ) ;
21633: LD_ADDR_VAR 0 9
21637: PUSH
21638: LD_VAR 0 1
21642: PPUSH
21643: CALL_OW 274
21647: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21648: LD_VAR 0 9
21652: PPUSH
21653: LD_INT 1
21655: PPUSH
21656: CALL_OW 275
21660: PUSH
21661: LD_VAR 0 14
21665: PUSH
21666: LD_INT 1
21668: ARRAY
21669: GREATEREQUAL
21670: IFFALSE 21696
21672: PUSH
21673: LD_VAR 0 9
21677: PPUSH
21678: LD_INT 2
21680: PPUSH
21681: CALL_OW 275
21685: PUSH
21686: LD_VAR 0 14
21690: PUSH
21691: LD_INT 2
21693: ARRAY
21694: GREATEREQUAL
21695: AND
21696: IFFALSE 21722
21698: PUSH
21699: LD_VAR 0 9
21703: PPUSH
21704: LD_INT 3
21706: PPUSH
21707: CALL_OW 275
21711: PUSH
21712: LD_VAR 0 14
21716: PUSH
21717: LD_INT 3
21719: ARRAY
21720: GREATEREQUAL
21721: AND
21722: IFFALSE 21734
// result := weapon ;
21724: LD_ADDR_VAR 0 3
21728: PUSH
21729: LD_VAR 0 18
21733: ST_TO_ADDR
// end ; end ;
21734: LD_VAR 0 3
21738: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21739: LD_INT 0
21741: PPUSH
21742: PPUSH
// result := true ;
21743: LD_ADDR_VAR 0 3
21747: PUSH
21748: LD_INT 1
21750: ST_TO_ADDR
// if array1 = array2 then
21751: LD_VAR 0 1
21755: PUSH
21756: LD_VAR 0 2
21760: EQUAL
21761: IFFALSE 21821
// begin for i = 1 to array1 do
21763: LD_ADDR_VAR 0 4
21767: PUSH
21768: DOUBLE
21769: LD_INT 1
21771: DEC
21772: ST_TO_ADDR
21773: LD_VAR 0 1
21777: PUSH
21778: FOR_TO
21779: IFFALSE 21817
// if array1 [ i ] <> array2 [ i ] then
21781: LD_VAR 0 1
21785: PUSH
21786: LD_VAR 0 4
21790: ARRAY
21791: PUSH
21792: LD_VAR 0 2
21796: PUSH
21797: LD_VAR 0 4
21801: ARRAY
21802: NONEQUAL
21803: IFFALSE 21815
// begin result := false ;
21805: LD_ADDR_VAR 0 3
21809: PUSH
21810: LD_INT 0
21812: ST_TO_ADDR
// break ;
21813: GO 21817
// end ;
21815: GO 21778
21817: POP
21818: POP
// end else
21819: GO 21829
// result := false ;
21821: LD_ADDR_VAR 0 3
21825: PUSH
21826: LD_INT 0
21828: ST_TO_ADDR
// end ;
21829: LD_VAR 0 3
21833: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21834: LD_INT 0
21836: PPUSH
21837: PPUSH
// if not array1 or not array2 then
21838: LD_VAR 0 1
21842: NOT
21843: IFTRUE 21852
21845: PUSH
21846: LD_VAR 0 2
21850: NOT
21851: OR
21852: IFFALSE 21856
// exit ;
21854: GO 21920
// result := true ;
21856: LD_ADDR_VAR 0 3
21860: PUSH
21861: LD_INT 1
21863: ST_TO_ADDR
// for i = 1 to array1 do
21864: LD_ADDR_VAR 0 4
21868: PUSH
21869: DOUBLE
21870: LD_INT 1
21872: DEC
21873: ST_TO_ADDR
21874: LD_VAR 0 1
21878: PUSH
21879: FOR_TO
21880: IFFALSE 21918
// if array1 [ i ] <> array2 [ i ] then
21882: LD_VAR 0 1
21886: PUSH
21887: LD_VAR 0 4
21891: ARRAY
21892: PUSH
21893: LD_VAR 0 2
21897: PUSH
21898: LD_VAR 0 4
21902: ARRAY
21903: NONEQUAL
21904: IFFALSE 21916
// begin result := false ;
21906: LD_ADDR_VAR 0 3
21910: PUSH
21911: LD_INT 0
21913: ST_TO_ADDR
// break ;
21914: GO 21918
// end ;
21916: GO 21879
21918: POP
21919: POP
// end ;
21920: LD_VAR 0 3
21924: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21925: LD_INT 0
21927: PPUSH
21928: PPUSH
21929: PPUSH
// pom := GetBase ( fac ) ;
21930: LD_ADDR_VAR 0 5
21934: PUSH
21935: LD_VAR 0 1
21939: PPUSH
21940: CALL_OW 274
21944: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21945: LD_ADDR_VAR 0 4
21949: PUSH
21950: LD_VAR 0 2
21954: PUSH
21955: LD_INT 1
21957: ARRAY
21958: PPUSH
21959: LD_VAR 0 2
21963: PUSH
21964: LD_INT 2
21966: ARRAY
21967: PPUSH
21968: LD_VAR 0 2
21972: PUSH
21973: LD_INT 3
21975: ARRAY
21976: PPUSH
21977: LD_VAR 0 2
21981: PUSH
21982: LD_INT 4
21984: ARRAY
21985: PPUSH
21986: CALL_OW 449
21990: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21991: LD_ADDR_VAR 0 3
21995: PUSH
21996: LD_VAR 0 5
22000: PPUSH
22001: LD_INT 1
22003: PPUSH
22004: CALL_OW 275
22008: PUSH
22009: LD_VAR 0 4
22013: PUSH
22014: LD_INT 1
22016: ARRAY
22017: GREATEREQUAL
22018: IFFALSE 22044
22020: PUSH
22021: LD_VAR 0 5
22025: PPUSH
22026: LD_INT 2
22028: PPUSH
22029: CALL_OW 275
22033: PUSH
22034: LD_VAR 0 4
22038: PUSH
22039: LD_INT 2
22041: ARRAY
22042: GREATEREQUAL
22043: AND
22044: IFFALSE 22070
22046: PUSH
22047: LD_VAR 0 5
22051: PPUSH
22052: LD_INT 3
22054: PPUSH
22055: CALL_OW 275
22059: PUSH
22060: LD_VAR 0 4
22064: PUSH
22065: LD_INT 3
22067: ARRAY
22068: GREATEREQUAL
22069: AND
22070: ST_TO_ADDR
// end ;
22071: LD_VAR 0 3
22075: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22076: LD_INT 0
22078: PPUSH
22079: PPUSH
22080: PPUSH
22081: PPUSH
// pom := GetBase ( building ) ;
22082: LD_ADDR_VAR 0 3
22086: PUSH
22087: LD_VAR 0 1
22091: PPUSH
22092: CALL_OW 274
22096: ST_TO_ADDR
// if not pom then
22097: LD_VAR 0 3
22101: NOT
22102: IFFALSE 22106
// exit ;
22104: GO 22280
// btype := GetBType ( building ) ;
22106: LD_ADDR_VAR 0 5
22110: PUSH
22111: LD_VAR 0 1
22115: PPUSH
22116: CALL_OW 266
22120: ST_TO_ADDR
// if btype = b_armoury then
22121: LD_VAR 0 5
22125: PUSH
22126: LD_INT 4
22128: EQUAL
22129: IFFALSE 22139
// btype := b_barracks ;
22131: LD_ADDR_VAR 0 5
22135: PUSH
22136: LD_INT 5
22138: ST_TO_ADDR
// if btype = b_depot then
22139: LD_VAR 0 5
22143: PUSH
22144: LD_INT 0
22146: EQUAL
22147: IFFALSE 22157
// btype := b_warehouse ;
22149: LD_ADDR_VAR 0 5
22153: PUSH
22154: LD_INT 1
22156: ST_TO_ADDR
// if btype = b_workshop then
22157: LD_VAR 0 5
22161: PUSH
22162: LD_INT 2
22164: EQUAL
22165: IFFALSE 22175
// btype := b_factory ;
22167: LD_ADDR_VAR 0 5
22171: PUSH
22172: LD_INT 3
22174: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22175: LD_ADDR_VAR 0 4
22179: PUSH
22180: LD_VAR 0 5
22184: PPUSH
22185: LD_VAR 0 1
22189: PPUSH
22190: CALL_OW 248
22194: PPUSH
22195: CALL_OW 450
22199: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22200: LD_ADDR_VAR 0 2
22204: PUSH
22205: LD_VAR 0 3
22209: PPUSH
22210: LD_INT 1
22212: PPUSH
22213: CALL_OW 275
22217: PUSH
22218: LD_VAR 0 4
22222: PUSH
22223: LD_INT 1
22225: ARRAY
22226: GREATEREQUAL
22227: IFFALSE 22253
22229: PUSH
22230: LD_VAR 0 3
22234: PPUSH
22235: LD_INT 2
22237: PPUSH
22238: CALL_OW 275
22242: PUSH
22243: LD_VAR 0 4
22247: PUSH
22248: LD_INT 2
22250: ARRAY
22251: GREATEREQUAL
22252: AND
22253: IFFALSE 22279
22255: PUSH
22256: LD_VAR 0 3
22260: PPUSH
22261: LD_INT 3
22263: PPUSH
22264: CALL_OW 275
22268: PUSH
22269: LD_VAR 0 4
22273: PUSH
22274: LD_INT 3
22276: ARRAY
22277: GREATEREQUAL
22278: AND
22279: ST_TO_ADDR
// end ;
22280: LD_VAR 0 2
22284: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22285: LD_INT 0
22287: PPUSH
22288: PPUSH
22289: PPUSH
// pom := GetBase ( building ) ;
22290: LD_ADDR_VAR 0 4
22294: PUSH
22295: LD_VAR 0 1
22299: PPUSH
22300: CALL_OW 274
22304: ST_TO_ADDR
// if not pom then
22305: LD_VAR 0 4
22309: NOT
22310: IFFALSE 22314
// exit ;
22312: GO 22419
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22314: LD_ADDR_VAR 0 5
22318: PUSH
22319: LD_VAR 0 2
22323: PPUSH
22324: LD_VAR 0 1
22328: PPUSH
22329: CALL_OW 248
22333: PPUSH
22334: CALL_OW 450
22338: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22339: LD_ADDR_VAR 0 3
22343: PUSH
22344: LD_VAR 0 4
22348: PPUSH
22349: LD_INT 1
22351: PPUSH
22352: CALL_OW 275
22356: PUSH
22357: LD_VAR 0 5
22361: PUSH
22362: LD_INT 1
22364: ARRAY
22365: GREATEREQUAL
22366: IFFALSE 22392
22368: PUSH
22369: LD_VAR 0 4
22373: PPUSH
22374: LD_INT 2
22376: PPUSH
22377: CALL_OW 275
22381: PUSH
22382: LD_VAR 0 5
22386: PUSH
22387: LD_INT 2
22389: ARRAY
22390: GREATEREQUAL
22391: AND
22392: IFFALSE 22418
22394: PUSH
22395: LD_VAR 0 4
22399: PPUSH
22400: LD_INT 3
22402: PPUSH
22403: CALL_OW 275
22407: PUSH
22408: LD_VAR 0 5
22412: PUSH
22413: LD_INT 3
22415: ARRAY
22416: GREATEREQUAL
22417: AND
22418: ST_TO_ADDR
// end ;
22419: LD_VAR 0 3
22423: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22424: LD_INT 0
22426: PPUSH
22427: PPUSH
22428: PPUSH
22429: PPUSH
22430: PPUSH
22431: PPUSH
22432: PPUSH
22433: PPUSH
22434: PPUSH
22435: PPUSH
22436: PPUSH
// result := false ;
22437: LD_ADDR_VAR 0 8
22441: PUSH
22442: LD_INT 0
22444: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22445: LD_VAR 0 5
22449: NOT
22450: IFTRUE 22459
22452: PUSH
22453: LD_VAR 0 1
22457: NOT
22458: OR
22459: IFTRUE 22468
22461: PUSH
22462: LD_VAR 0 2
22466: NOT
22467: OR
22468: IFTRUE 22477
22470: PUSH
22471: LD_VAR 0 3
22475: NOT
22476: OR
22477: IFFALSE 22481
// exit ;
22479: GO 23307
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22481: LD_ADDR_VAR 0 14
22485: PUSH
22486: LD_VAR 0 1
22490: PPUSH
22491: LD_VAR 0 2
22495: PPUSH
22496: LD_VAR 0 3
22500: PPUSH
22501: LD_VAR 0 4
22505: PPUSH
22506: LD_VAR 0 5
22510: PUSH
22511: LD_INT 1
22513: ARRAY
22514: PPUSH
22515: CALL_OW 248
22519: PPUSH
22520: LD_INT 0
22522: PPUSH
22523: CALL 24588 0 6
22527: ST_TO_ADDR
// if not hexes then
22528: LD_VAR 0 14
22532: NOT
22533: IFFALSE 22537
// exit ;
22535: GO 23307
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22537: LD_ADDR_VAR 0 17
22541: PUSH
22542: LD_VAR 0 5
22546: PPUSH
22547: LD_INT 22
22549: PUSH
22550: LD_VAR 0 13
22554: PPUSH
22555: CALL_OW 255
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 2
22566: PUSH
22567: LD_INT 30
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 30
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: LIST
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PPUSH
22596: CALL_OW 72
22600: ST_TO_ADDR
// for i = 1 to hexes do
22601: LD_ADDR_VAR 0 9
22605: PUSH
22606: DOUBLE
22607: LD_INT 1
22609: DEC
22610: ST_TO_ADDR
22611: LD_VAR 0 14
22615: PUSH
22616: FOR_TO
22617: IFFALSE 23305
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22619: LD_ADDR_VAR 0 13
22623: PUSH
22624: LD_VAR 0 14
22628: PUSH
22629: LD_VAR 0 9
22633: ARRAY
22634: PUSH
22635: LD_INT 1
22637: ARRAY
22638: PPUSH
22639: LD_VAR 0 14
22643: PUSH
22644: LD_VAR 0 9
22648: ARRAY
22649: PUSH
22650: LD_INT 2
22652: ARRAY
22653: PPUSH
22654: CALL_OW 428
22658: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22659: LD_VAR 0 14
22663: PUSH
22664: LD_VAR 0 9
22668: ARRAY
22669: PUSH
22670: LD_INT 1
22672: ARRAY
22673: PPUSH
22674: LD_VAR 0 14
22678: PUSH
22679: LD_VAR 0 9
22683: ARRAY
22684: PUSH
22685: LD_INT 2
22687: ARRAY
22688: PPUSH
22689: CALL_OW 351
22693: IFTRUE 22732
22695: PUSH
22696: LD_VAR 0 14
22700: PUSH
22701: LD_VAR 0 9
22705: ARRAY
22706: PUSH
22707: LD_INT 1
22709: ARRAY
22710: PPUSH
22711: LD_VAR 0 14
22715: PUSH
22716: LD_VAR 0 9
22720: ARRAY
22721: PUSH
22722: LD_INT 2
22724: ARRAY
22725: PPUSH
22726: CALL_OW 488
22730: NOT
22731: OR
22732: IFTRUE 22749
22734: PUSH
22735: LD_VAR 0 13
22739: PPUSH
22740: CALL_OW 247
22744: PUSH
22745: LD_INT 3
22747: EQUAL
22748: OR
22749: IFFALSE 22755
// exit ;
22751: POP
22752: POP
22753: GO 23307
// if not tmp then
22755: LD_VAR 0 13
22759: NOT
22760: IFFALSE 22764
// continue ;
22762: GO 22616
// result := true ;
22764: LD_ADDR_VAR 0 8
22768: PUSH
22769: LD_INT 1
22771: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22772: LD_VAR 0 6
22776: IFFALSE 22793
22778: PUSH
22779: LD_VAR 0 13
22783: PPUSH
22784: CALL_OW 247
22788: PUSH
22789: LD_INT 2
22791: EQUAL
22792: AND
22793: IFFALSE 22810
22795: PUSH
22796: LD_VAR 0 13
22800: PPUSH
22801: CALL_OW 263
22805: PUSH
22806: LD_INT 1
22808: EQUAL
22809: AND
22810: IFFALSE 22974
// begin if IsDrivenBy ( tmp ) then
22812: LD_VAR 0 13
22816: PPUSH
22817: CALL_OW 311
22821: IFFALSE 22825
// continue ;
22823: GO 22616
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22825: LD_VAR 0 6
22829: PPUSH
22830: LD_INT 3
22832: PUSH
22833: LD_INT 60
22835: PUSH
22836: EMPTY
22837: LIST
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 3
22845: PUSH
22846: LD_INT 55
22848: PUSH
22849: EMPTY
22850: LIST
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PPUSH
22860: CALL_OW 72
22864: IFFALSE 22972
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22866: LD_ADDR_VAR 0 18
22870: PUSH
22871: LD_VAR 0 6
22875: PPUSH
22876: LD_INT 3
22878: PUSH
22879: LD_INT 60
22881: PUSH
22882: EMPTY
22883: LIST
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 3
22891: PUSH
22892: LD_INT 55
22894: PUSH
22895: EMPTY
22896: LIST
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PPUSH
22906: CALL_OW 72
22910: PUSH
22911: LD_INT 1
22913: ARRAY
22914: ST_TO_ADDR
// if IsInUnit ( driver ) then
22915: LD_VAR 0 18
22919: PPUSH
22920: CALL_OW 310
22924: IFFALSE 22935
// ComExit ( driver ) ;
22926: LD_VAR 0 18
22930: PPUSH
22931: CALL 48578 0 1
// AddComEnterUnit ( driver , tmp ) ;
22935: LD_VAR 0 18
22939: PPUSH
22940: LD_VAR 0 13
22944: PPUSH
22945: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22949: LD_VAR 0 18
22953: PPUSH
22954: LD_VAR 0 7
22958: PPUSH
22959: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22963: LD_VAR 0 18
22967: PPUSH
22968: CALL_OW 181
// end ; continue ;
22972: GO 22616
// end ; if not cleaners or not tmp in cleaners then
22974: LD_VAR 0 6
22978: NOT
22979: IFTRUE 22994
22981: PUSH
22982: LD_VAR 0 13
22986: PUSH
22987: LD_VAR 0 6
22991: IN
22992: NOT
22993: OR
22994: IFFALSE 23303
// begin if dep then
22996: LD_VAR 0 17
23000: IFFALSE 23136
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23002: LD_ADDR_VAR 0 16
23006: PUSH
23007: LD_VAR 0 17
23011: PUSH
23012: LD_INT 1
23014: ARRAY
23015: PPUSH
23016: CALL_OW 250
23020: PPUSH
23021: LD_VAR 0 17
23025: PUSH
23026: LD_INT 1
23028: ARRAY
23029: PPUSH
23030: CALL_OW 254
23034: PPUSH
23035: LD_INT 5
23037: PPUSH
23038: CALL_OW 272
23042: PUSH
23043: LD_VAR 0 17
23047: PUSH
23048: LD_INT 1
23050: ARRAY
23051: PPUSH
23052: CALL_OW 251
23056: PPUSH
23057: LD_VAR 0 17
23061: PUSH
23062: LD_INT 1
23064: ARRAY
23065: PPUSH
23066: CALL_OW 254
23070: PPUSH
23071: LD_INT 5
23073: PPUSH
23074: CALL_OW 273
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23083: LD_VAR 0 16
23087: PUSH
23088: LD_INT 1
23090: ARRAY
23091: PPUSH
23092: LD_VAR 0 16
23096: PUSH
23097: LD_INT 2
23099: ARRAY
23100: PPUSH
23101: CALL_OW 488
23105: IFFALSE 23136
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23107: LD_VAR 0 13
23111: PPUSH
23112: LD_VAR 0 16
23116: PUSH
23117: LD_INT 1
23119: ARRAY
23120: PPUSH
23121: LD_VAR 0 16
23125: PUSH
23126: LD_INT 2
23128: ARRAY
23129: PPUSH
23130: CALL_OW 111
// continue ;
23134: GO 22616
// end ; end ; r := GetDir ( tmp ) ;
23136: LD_ADDR_VAR 0 15
23140: PUSH
23141: LD_VAR 0 13
23145: PPUSH
23146: CALL_OW 254
23150: ST_TO_ADDR
// if r = 5 then
23151: LD_VAR 0 15
23155: PUSH
23156: LD_INT 5
23158: EQUAL
23159: IFFALSE 23169
// r := 0 ;
23161: LD_ADDR_VAR 0 15
23165: PUSH
23166: LD_INT 0
23168: ST_TO_ADDR
// for j = r to 5 do
23169: LD_ADDR_VAR 0 10
23173: PUSH
23174: DOUBLE
23175: LD_VAR 0 15
23179: DEC
23180: ST_TO_ADDR
23181: LD_INT 5
23183: PUSH
23184: FOR_TO
23185: IFFALSE 23301
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23187: LD_ADDR_VAR 0 11
23191: PUSH
23192: LD_VAR 0 13
23196: PPUSH
23197: CALL_OW 250
23201: PPUSH
23202: LD_VAR 0 10
23206: PPUSH
23207: LD_INT 2
23209: PPUSH
23210: CALL_OW 272
23214: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23215: LD_ADDR_VAR 0 12
23219: PUSH
23220: LD_VAR 0 13
23224: PPUSH
23225: CALL_OW 251
23229: PPUSH
23230: LD_VAR 0 10
23234: PPUSH
23235: LD_INT 2
23237: PPUSH
23238: CALL_OW 273
23242: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23243: LD_VAR 0 11
23247: PPUSH
23248: LD_VAR 0 12
23252: PPUSH
23253: CALL_OW 488
23257: IFFALSE 23276
23259: PUSH
23260: LD_VAR 0 11
23264: PPUSH
23265: LD_VAR 0 12
23269: PPUSH
23270: CALL_OW 428
23274: NOT
23275: AND
23276: IFFALSE 23299
// begin ComMoveXY ( tmp , _x , _y ) ;
23278: LD_VAR 0 13
23282: PPUSH
23283: LD_VAR 0 11
23287: PPUSH
23288: LD_VAR 0 12
23292: PPUSH
23293: CALL_OW 111
// break ;
23297: GO 23301
// end ; end ;
23299: GO 23184
23301: POP
23302: POP
// end ; end ;
23303: GO 22616
23305: POP
23306: POP
// end ;
23307: LD_VAR 0 8
23311: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23312: LD_INT 0
23314: PPUSH
// result := true ;
23315: LD_ADDR_VAR 0 3
23319: PUSH
23320: LD_INT 1
23322: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23323: LD_VAR 0 2
23327: PUSH
23328: LD_INT 24
23330: DOUBLE
23331: EQUAL
23332: IFTRUE 23342
23334: LD_INT 33
23336: DOUBLE
23337: EQUAL
23338: IFTRUE 23342
23340: GO 23367
23342: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23343: LD_ADDR_VAR 0 3
23347: PUSH
23348: LD_INT 32
23350: PPUSH
23351: LD_VAR 0 1
23355: PPUSH
23356: CALL_OW 321
23360: PUSH
23361: LD_INT 2
23363: EQUAL
23364: ST_TO_ADDR
23365: GO 23683
23367: LD_INT 20
23369: DOUBLE
23370: EQUAL
23371: IFTRUE 23375
23373: GO 23400
23375: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23376: LD_ADDR_VAR 0 3
23380: PUSH
23381: LD_INT 6
23383: PPUSH
23384: LD_VAR 0 1
23388: PPUSH
23389: CALL_OW 321
23393: PUSH
23394: LD_INT 2
23396: EQUAL
23397: ST_TO_ADDR
23398: GO 23683
23400: LD_INT 22
23402: DOUBLE
23403: EQUAL
23404: IFTRUE 23414
23406: LD_INT 36
23408: DOUBLE
23409: EQUAL
23410: IFTRUE 23414
23412: GO 23439
23414: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23415: LD_ADDR_VAR 0 3
23419: PUSH
23420: LD_INT 15
23422: PPUSH
23423: LD_VAR 0 1
23427: PPUSH
23428: CALL_OW 321
23432: PUSH
23433: LD_INT 2
23435: EQUAL
23436: ST_TO_ADDR
23437: GO 23683
23439: LD_INT 30
23441: DOUBLE
23442: EQUAL
23443: IFTRUE 23447
23445: GO 23472
23447: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23448: LD_ADDR_VAR 0 3
23452: PUSH
23453: LD_INT 20
23455: PPUSH
23456: LD_VAR 0 1
23460: PPUSH
23461: CALL_OW 321
23465: PUSH
23466: LD_INT 2
23468: EQUAL
23469: ST_TO_ADDR
23470: GO 23683
23472: LD_INT 28
23474: DOUBLE
23475: EQUAL
23476: IFTRUE 23486
23478: LD_INT 21
23480: DOUBLE
23481: EQUAL
23482: IFTRUE 23486
23484: GO 23511
23486: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23487: LD_ADDR_VAR 0 3
23491: PUSH
23492: LD_INT 21
23494: PPUSH
23495: LD_VAR 0 1
23499: PPUSH
23500: CALL_OW 321
23504: PUSH
23505: LD_INT 2
23507: EQUAL
23508: ST_TO_ADDR
23509: GO 23683
23511: LD_INT 16
23513: DOUBLE
23514: EQUAL
23515: IFTRUE 23519
23517: GO 23544
23519: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23520: LD_ADDR_VAR 0 3
23524: PUSH
23525: LD_INT 84
23527: PPUSH
23528: LD_VAR 0 1
23532: PPUSH
23533: CALL_OW 321
23537: PUSH
23538: LD_INT 2
23540: EQUAL
23541: ST_TO_ADDR
23542: GO 23683
23544: LD_INT 19
23546: DOUBLE
23547: EQUAL
23548: IFTRUE 23558
23550: LD_INT 23
23552: DOUBLE
23553: EQUAL
23554: IFTRUE 23558
23556: GO 23583
23558: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23559: LD_ADDR_VAR 0 3
23563: PUSH
23564: LD_INT 83
23566: PPUSH
23567: LD_VAR 0 1
23571: PPUSH
23572: CALL_OW 321
23576: PUSH
23577: LD_INT 2
23579: EQUAL
23580: ST_TO_ADDR
23581: GO 23683
23583: LD_INT 17
23585: DOUBLE
23586: EQUAL
23587: IFTRUE 23591
23589: GO 23616
23591: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23592: LD_ADDR_VAR 0 3
23596: PUSH
23597: LD_INT 39
23599: PPUSH
23600: LD_VAR 0 1
23604: PPUSH
23605: CALL_OW 321
23609: PUSH
23610: LD_INT 2
23612: EQUAL
23613: ST_TO_ADDR
23614: GO 23683
23616: LD_INT 18
23618: DOUBLE
23619: EQUAL
23620: IFTRUE 23624
23622: GO 23649
23624: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23625: LD_ADDR_VAR 0 3
23629: PUSH
23630: LD_INT 40
23632: PPUSH
23633: LD_VAR 0 1
23637: PPUSH
23638: CALL_OW 321
23642: PUSH
23643: LD_INT 2
23645: EQUAL
23646: ST_TO_ADDR
23647: GO 23683
23649: LD_INT 27
23651: DOUBLE
23652: EQUAL
23653: IFTRUE 23657
23655: GO 23682
23657: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23658: LD_ADDR_VAR 0 3
23662: PUSH
23663: LD_INT 35
23665: PPUSH
23666: LD_VAR 0 1
23670: PPUSH
23671: CALL_OW 321
23675: PUSH
23676: LD_INT 2
23678: EQUAL
23679: ST_TO_ADDR
23680: GO 23683
23682: POP
// end ;
23683: LD_VAR 0 3
23687: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23688: LD_INT 0
23690: PPUSH
23691: PPUSH
23692: PPUSH
23693: PPUSH
23694: PPUSH
23695: PPUSH
23696: PPUSH
23697: PPUSH
23698: PPUSH
23699: PPUSH
23700: PPUSH
// result := false ;
23701: LD_ADDR_VAR 0 6
23705: PUSH
23706: LD_INT 0
23708: ST_TO_ADDR
// if btype = b_depot then
23709: LD_VAR 0 2
23713: PUSH
23714: LD_INT 0
23716: EQUAL
23717: IFFALSE 23729
// begin result := true ;
23719: LD_ADDR_VAR 0 6
23723: PUSH
23724: LD_INT 1
23726: ST_TO_ADDR
// exit ;
23727: GO 24583
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23729: LD_VAR 0 1
23733: NOT
23734: IFTRUE 23759
23736: PUSH
23737: LD_VAR 0 1
23741: PPUSH
23742: CALL_OW 266
23746: PUSH
23747: LD_INT 0
23749: PUSH
23750: LD_INT 1
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: IN
23757: NOT
23758: OR
23759: IFTRUE 23768
23761: PUSH
23762: LD_VAR 0 2
23766: NOT
23767: OR
23768: IFTRUE 23804
23770: PUSH
23771: LD_VAR 0 5
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: LD_INT 2
23784: PUSH
23785: LD_INT 3
23787: PUSH
23788: LD_INT 4
23790: PUSH
23791: LD_INT 5
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: IN
23802: NOT
23803: OR
23804: IFTRUE 23823
23806: PUSH
23807: LD_VAR 0 3
23811: PPUSH
23812: LD_VAR 0 4
23816: PPUSH
23817: CALL_OW 488
23821: NOT
23822: OR
23823: IFFALSE 23827
// exit ;
23825: GO 24583
// side := GetSide ( depot ) ;
23827: LD_ADDR_VAR 0 9
23831: PUSH
23832: LD_VAR 0 1
23836: PPUSH
23837: CALL_OW 255
23841: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23842: LD_VAR 0 9
23846: PPUSH
23847: LD_VAR 0 2
23851: PPUSH
23852: CALL 23312 0 2
23856: NOT
23857: IFFALSE 23861
// exit ;
23859: GO 24583
// pom := GetBase ( depot ) ;
23861: LD_ADDR_VAR 0 10
23865: PUSH
23866: LD_VAR 0 1
23870: PPUSH
23871: CALL_OW 274
23875: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23876: LD_ADDR_VAR 0 11
23880: PUSH
23881: LD_VAR 0 2
23885: PPUSH
23886: LD_VAR 0 1
23890: PPUSH
23891: CALL_OW 248
23895: PPUSH
23896: CALL_OW 450
23900: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23901: LD_VAR 0 10
23905: PPUSH
23906: LD_INT 1
23908: PPUSH
23909: CALL_OW 275
23913: PUSH
23914: LD_VAR 0 11
23918: PUSH
23919: LD_INT 1
23921: ARRAY
23922: GREATEREQUAL
23923: IFFALSE 23949
23925: PUSH
23926: LD_VAR 0 10
23930: PPUSH
23931: LD_INT 2
23933: PPUSH
23934: CALL_OW 275
23938: PUSH
23939: LD_VAR 0 11
23943: PUSH
23944: LD_INT 2
23946: ARRAY
23947: GREATEREQUAL
23948: AND
23949: IFFALSE 23975
23951: PUSH
23952: LD_VAR 0 10
23956: PPUSH
23957: LD_INT 3
23959: PPUSH
23960: CALL_OW 275
23964: PUSH
23965: LD_VAR 0 11
23969: PUSH
23970: LD_INT 3
23972: ARRAY
23973: GREATEREQUAL
23974: AND
23975: NOT
23976: IFFALSE 23980
// exit ;
23978: GO 24583
// if GetBType ( depot ) = b_depot then
23980: LD_VAR 0 1
23984: PPUSH
23985: CALL_OW 266
23989: PUSH
23990: LD_INT 0
23992: EQUAL
23993: IFFALSE 24005
// dist := 28 else
23995: LD_ADDR_VAR 0 14
23999: PUSH
24000: LD_INT 28
24002: ST_TO_ADDR
24003: GO 24013
// dist := 36 ;
24005: LD_ADDR_VAR 0 14
24009: PUSH
24010: LD_INT 36
24012: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24013: LD_VAR 0 1
24017: PPUSH
24018: LD_VAR 0 3
24022: PPUSH
24023: LD_VAR 0 4
24027: PPUSH
24028: CALL_OW 297
24032: PUSH
24033: LD_VAR 0 14
24037: GREATER
24038: IFFALSE 24042
// exit ;
24040: GO 24583
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24042: LD_ADDR_VAR 0 12
24046: PUSH
24047: LD_VAR 0 2
24051: PPUSH
24052: LD_VAR 0 3
24056: PPUSH
24057: LD_VAR 0 4
24061: PPUSH
24062: LD_VAR 0 5
24066: PPUSH
24067: LD_VAR 0 1
24071: PPUSH
24072: CALL_OW 248
24076: PPUSH
24077: LD_INT 0
24079: PPUSH
24080: CALL 24588 0 6
24084: ST_TO_ADDR
// if not hexes then
24085: LD_VAR 0 12
24089: NOT
24090: IFFALSE 24094
// exit ;
24092: GO 24583
// hex := GetHexInfo ( x , y ) ;
24094: LD_ADDR_VAR 0 15
24098: PUSH
24099: LD_VAR 0 3
24103: PPUSH
24104: LD_VAR 0 4
24108: PPUSH
24109: CALL_OW 546
24113: ST_TO_ADDR
// if hex [ 1 ] then
24114: LD_VAR 0 15
24118: PUSH
24119: LD_INT 1
24121: ARRAY
24122: IFFALSE 24126
// exit ;
24124: GO 24583
// height := hex [ 2 ] ;
24126: LD_ADDR_VAR 0 13
24130: PUSH
24131: LD_VAR 0 15
24135: PUSH
24136: LD_INT 2
24138: ARRAY
24139: ST_TO_ADDR
// for i = 1 to hexes do
24140: LD_ADDR_VAR 0 7
24144: PUSH
24145: DOUBLE
24146: LD_INT 1
24148: DEC
24149: ST_TO_ADDR
24150: LD_VAR 0 12
24154: PUSH
24155: FOR_TO
24156: IFFALSE 24500
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24158: LD_VAR 0 12
24162: PUSH
24163: LD_VAR 0 7
24167: ARRAY
24168: PUSH
24169: LD_INT 1
24171: ARRAY
24172: PPUSH
24173: LD_VAR 0 12
24177: PUSH
24178: LD_VAR 0 7
24182: ARRAY
24183: PUSH
24184: LD_INT 2
24186: ARRAY
24187: PPUSH
24188: CALL_OW 488
24192: NOT
24193: IFTRUE 24235
24195: PUSH
24196: LD_VAR 0 12
24200: PUSH
24201: LD_VAR 0 7
24205: ARRAY
24206: PUSH
24207: LD_INT 1
24209: ARRAY
24210: PPUSH
24211: LD_VAR 0 12
24215: PUSH
24216: LD_VAR 0 7
24220: ARRAY
24221: PUSH
24222: LD_INT 2
24224: ARRAY
24225: PPUSH
24226: CALL_OW 428
24230: PUSH
24231: LD_INT 0
24233: GREATER
24234: OR
24235: IFTRUE 24273
24237: PUSH
24238: LD_VAR 0 12
24242: PUSH
24243: LD_VAR 0 7
24247: ARRAY
24248: PUSH
24249: LD_INT 1
24251: ARRAY
24252: PPUSH
24253: LD_VAR 0 12
24257: PUSH
24258: LD_VAR 0 7
24262: ARRAY
24263: PUSH
24264: LD_INT 2
24266: ARRAY
24267: PPUSH
24268: CALL_OW 351
24272: OR
24273: IFFALSE 24279
// exit ;
24275: POP
24276: POP
24277: GO 24583
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24279: LD_ADDR_VAR 0 8
24283: PUSH
24284: LD_VAR 0 12
24288: PUSH
24289: LD_VAR 0 7
24293: ARRAY
24294: PUSH
24295: LD_INT 1
24297: ARRAY
24298: PPUSH
24299: LD_VAR 0 12
24303: PUSH
24304: LD_VAR 0 7
24308: ARRAY
24309: PUSH
24310: LD_INT 2
24312: ARRAY
24313: PPUSH
24314: CALL_OW 546
24318: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24319: LD_VAR 0 8
24323: PUSH
24324: LD_INT 1
24326: ARRAY
24327: IFTRUE 24349
24329: PUSH
24330: LD_VAR 0 8
24334: PUSH
24335: LD_INT 2
24337: ARRAY
24338: PUSH
24339: LD_VAR 0 13
24343: PUSH
24344: LD_INT 2
24346: PLUS
24347: GREATER
24348: OR
24349: IFTRUE 24371
24351: PUSH
24352: LD_VAR 0 8
24356: PUSH
24357: LD_INT 2
24359: ARRAY
24360: PUSH
24361: LD_VAR 0 13
24365: PUSH
24366: LD_INT 2
24368: MINUS
24369: LESS
24370: OR
24371: IFTRUE 24439
24373: PUSH
24374: LD_VAR 0 8
24378: PUSH
24379: LD_INT 3
24381: ARRAY
24382: PUSH
24383: LD_INT 0
24385: PUSH
24386: LD_INT 8
24388: PUSH
24389: LD_INT 9
24391: PUSH
24392: LD_INT 10
24394: PUSH
24395: LD_INT 11
24397: PUSH
24398: LD_INT 12
24400: PUSH
24401: LD_INT 13
24403: PUSH
24404: LD_INT 16
24406: PUSH
24407: LD_INT 17
24409: PUSH
24410: LD_INT 18
24412: PUSH
24413: LD_INT 19
24415: PUSH
24416: LD_INT 20
24418: PUSH
24419: LD_INT 21
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: IN
24437: NOT
24438: OR
24439: IFTRUE 24452
24441: PUSH
24442: LD_VAR 0 8
24446: PUSH
24447: LD_INT 5
24449: ARRAY
24450: NOT
24451: OR
24452: IFTRUE 24492
24454: PUSH
24455: LD_VAR 0 8
24459: PUSH
24460: LD_INT 6
24462: ARRAY
24463: PUSH
24464: LD_INT 1
24466: PUSH
24467: LD_INT 2
24469: PUSH
24470: LD_INT 7
24472: PUSH
24473: LD_INT 9
24475: PUSH
24476: LD_INT 10
24478: PUSH
24479: LD_INT 11
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: IN
24490: NOT
24491: OR
24492: IFFALSE 24498
// exit ;
24494: POP
24495: POP
24496: GO 24583
// end ;
24498: GO 24155
24500: POP
24501: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24502: LD_VAR 0 9
24506: PPUSH
24507: LD_VAR 0 3
24511: PPUSH
24512: LD_VAR 0 4
24516: PPUSH
24517: LD_INT 20
24519: PPUSH
24520: CALL 16402 0 4
24524: PUSH
24525: LD_INT 4
24527: ARRAY
24528: IFFALSE 24532
// exit ;
24530: GO 24583
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24532: LD_VAR 0 2
24536: PUSH
24537: LD_INT 29
24539: PUSH
24540: LD_INT 30
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: IN
24547: IFFALSE 24571
24549: PUSH
24550: LD_VAR 0 3
24554: PPUSH
24555: LD_VAR 0 4
24559: PPUSH
24560: LD_VAR 0 9
24564: PPUSH
24565: CALL_OW 440
24569: NOT
24570: AND
24571: IFFALSE 24575
// exit ;
24573: GO 24583
// result := true ;
24575: LD_ADDR_VAR 0 6
24579: PUSH
24580: LD_INT 1
24582: ST_TO_ADDR
// end ;
24583: LD_VAR 0 6
24587: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24588: LD_INT 0
24590: PPUSH
24591: PPUSH
24592: PPUSH
24593: PPUSH
24594: PPUSH
24595: PPUSH
24596: PPUSH
24597: PPUSH
24598: PPUSH
24599: PPUSH
24600: PPUSH
24601: PPUSH
24602: PPUSH
24603: PPUSH
24604: PPUSH
24605: PPUSH
24606: PPUSH
24607: PPUSH
24608: PPUSH
24609: PPUSH
24610: PPUSH
24611: PPUSH
24612: PPUSH
24613: PPUSH
24614: PPUSH
24615: PPUSH
24616: PPUSH
24617: PPUSH
24618: PPUSH
24619: PPUSH
24620: PPUSH
24621: PPUSH
24622: PPUSH
24623: PPUSH
24624: PPUSH
24625: PPUSH
24626: PPUSH
24627: PPUSH
24628: PPUSH
24629: PPUSH
24630: PPUSH
24631: PPUSH
24632: PPUSH
24633: PPUSH
24634: PPUSH
24635: PPUSH
24636: PPUSH
24637: PPUSH
24638: PPUSH
24639: PPUSH
24640: PPUSH
24641: PPUSH
24642: PPUSH
24643: PPUSH
24644: PPUSH
24645: PPUSH
24646: PPUSH
24647: PPUSH
// result = [ ] ;
24648: LD_ADDR_VAR 0 7
24652: PUSH
24653: EMPTY
24654: ST_TO_ADDR
// temp_list = [ ] ;
24655: LD_ADDR_VAR 0 9
24659: PUSH
24660: EMPTY
24661: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24662: LD_VAR 0 4
24666: PUSH
24667: LD_INT 0
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: LD_INT 2
24675: PUSH
24676: LD_INT 3
24678: PUSH
24679: LD_INT 4
24681: PUSH
24682: LD_INT 5
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: IN
24693: NOT
24694: IFTRUE 24737
24696: PUSH
24697: LD_VAR 0 1
24701: PUSH
24702: LD_INT 0
24704: PUSH
24705: LD_INT 1
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: IN
24712: IFFALSE 24736
24714: PUSH
24715: LD_VAR 0 5
24719: PUSH
24720: LD_INT 1
24722: PUSH
24723: LD_INT 2
24725: PUSH
24726: LD_INT 3
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: LIST
24733: IN
24734: NOT
24735: AND
24736: OR
24737: IFFALSE 24741
// exit ;
24739: GO 43140
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24741: LD_VAR 0 1
24745: PUSH
24746: LD_INT 6
24748: PUSH
24749: LD_INT 7
24751: PUSH
24752: LD_INT 8
24754: PUSH
24755: LD_INT 13
24757: PUSH
24758: LD_INT 12
24760: PUSH
24761: LD_INT 15
24763: PUSH
24764: LD_INT 11
24766: PUSH
24767: LD_INT 14
24769: PUSH
24770: LD_INT 10
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: IN
24784: IFFALSE 24794
// btype = b_lab ;
24786: LD_ADDR_VAR 0 1
24790: PUSH
24791: LD_INT 6
24793: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24794: LD_VAR 0 6
24798: PUSH
24799: LD_INT 0
24801: PUSH
24802: LD_INT 1
24804: PUSH
24805: LD_INT 2
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: LIST
24812: IN
24813: NOT
24814: IFTRUE 24882
24816: PUSH
24817: LD_VAR 0 1
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: LD_INT 1
24827: PUSH
24828: LD_INT 2
24830: PUSH
24831: LD_INT 3
24833: PUSH
24834: LD_INT 6
24836: PUSH
24837: LD_INT 36
24839: PUSH
24840: LD_INT 4
24842: PUSH
24843: LD_INT 5
24845: PUSH
24846: LD_INT 31
24848: PUSH
24849: LD_INT 32
24851: PUSH
24852: LD_INT 33
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: IN
24868: NOT
24869: IFFALSE 24881
24871: PUSH
24872: LD_VAR 0 6
24876: PUSH
24877: LD_INT 1
24879: EQUAL
24880: AND
24881: OR
24882: IFTRUE 24914
24884: PUSH
24885: LD_VAR 0 1
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: LD_INT 3
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: IN
24900: NOT
24901: IFFALSE 24913
24903: PUSH
24904: LD_VAR 0 6
24908: PUSH
24909: LD_INT 2
24911: EQUAL
24912: AND
24913: OR
24914: IFFALSE 24924
// mode = 0 ;
24916: LD_ADDR_VAR 0 6
24920: PUSH
24921: LD_INT 0
24923: ST_TO_ADDR
// case mode of 0 :
24924: LD_VAR 0 6
24928: PUSH
24929: LD_INT 0
24931: DOUBLE
24932: EQUAL
24933: IFTRUE 24937
24935: GO 36390
24937: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24938: LD_ADDR_VAR 0 11
24942: PUSH
24943: LD_INT 0
24945: PUSH
24946: LD_INT 0
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: LD_INT 1
24958: NEG
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: PUSH
24967: LD_INT 0
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 1
24976: PUSH
24977: LD_INT 1
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: LD_INT 1
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 1
24996: NEG
24997: PUSH
24998: LD_INT 0
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 1
25007: NEG
25008: PUSH
25009: LD_INT 1
25011: NEG
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: LD_INT 2
25023: NEG
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 0
25031: PUSH
25032: LD_INT 2
25034: NEG
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 1
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 1
25053: PUSH
25054: LD_INT 2
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 0
25063: PUSH
25064: LD_INT 2
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 1
25073: NEG
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 1
25084: PUSH
25085: LD_INT 3
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 0
25094: PUSH
25095: LD_INT 3
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 1
25104: NEG
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25131: LD_ADDR_VAR 0 12
25135: PUSH
25136: LD_INT 0
25138: PUSH
25139: LD_INT 0
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 0
25148: PUSH
25149: LD_INT 1
25151: NEG
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 1
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 1
25169: PUSH
25170: LD_INT 1
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 0
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 1
25189: NEG
25190: PUSH
25191: LD_INT 0
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 1
25200: NEG
25201: PUSH
25202: LD_INT 1
25204: NEG
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: LD_INT 1
25215: NEG
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 2
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 2
25233: PUSH
25234: LD_INT 1
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 1
25243: NEG
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 2
25254: NEG
25255: PUSH
25256: LD_INT 0
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 2
25265: NEG
25266: PUSH
25267: LD_INT 1
25269: NEG
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 2
25277: NEG
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 3
25288: NEG
25289: PUSH
25290: LD_INT 0
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 3
25299: NEG
25300: PUSH
25301: LD_INT 1
25303: NEG
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25327: LD_ADDR_VAR 0 13
25331: PUSH
25332: LD_INT 0
25334: PUSH
25335: LD_INT 0
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 0
25344: PUSH
25345: LD_INT 1
25347: NEG
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 1
25355: PUSH
25356: LD_INT 0
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 1
25365: PUSH
25366: LD_INT 1
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 0
25375: PUSH
25376: LD_INT 1
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 1
25385: NEG
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 1
25408: NEG
25409: PUSH
25410: LD_INT 2
25412: NEG
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 2
25420: PUSH
25421: LD_INT 1
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 2
25430: PUSH
25431: LD_INT 2
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: LD_INT 2
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 2
25450: NEG
25451: PUSH
25452: LD_INT 1
25454: NEG
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 2
25462: NEG
25463: PUSH
25464: LD_INT 2
25466: NEG
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 2
25474: NEG
25475: PUSH
25476: LD_INT 3
25478: NEG
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 3
25486: NEG
25487: PUSH
25488: LD_INT 2
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 3
25498: NEG
25499: PUSH
25500: LD_INT 3
25502: NEG
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25526: LD_ADDR_VAR 0 14
25530: PUSH
25531: LD_INT 0
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 0
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 1
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 1
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 0
25574: PUSH
25575: LD_INT 1
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 1
25584: NEG
25585: PUSH
25586: LD_INT 0
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: LD_INT 1
25599: NEG
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 1
25607: NEG
25608: PUSH
25609: LD_INT 2
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: LD_INT 2
25622: NEG
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: LD_INT 1
25633: NEG
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 1
25641: PUSH
25642: LD_INT 2
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: LD_INT 2
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 1
25661: NEG
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PUSH
25674: LD_INT 3
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 0
25684: PUSH
25685: LD_INT 3
25687: NEG
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 1
25695: PUSH
25696: LD_INT 2
25698: NEG
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25722: LD_ADDR_VAR 0 15
25726: PUSH
25727: LD_INT 0
25729: PUSH
25730: LD_INT 0
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 0
25739: PUSH
25740: LD_INT 1
25742: NEG
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 1
25750: PUSH
25751: LD_INT 0
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 1
25760: PUSH
25761: LD_INT 1
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 0
25770: PUSH
25771: LD_INT 1
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 1
25780: NEG
25781: PUSH
25782: LD_INT 0
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 1
25791: NEG
25792: PUSH
25793: LD_INT 1
25795: NEG
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 1
25803: PUSH
25804: LD_INT 1
25806: NEG
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 2
25814: PUSH
25815: LD_INT 0
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 2
25824: PUSH
25825: LD_INT 1
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 1
25834: NEG
25835: PUSH
25836: LD_INT 1
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 2
25845: NEG
25846: PUSH
25847: LD_INT 0
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 2
25856: NEG
25857: PUSH
25858: LD_INT 1
25860: NEG
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 2
25868: PUSH
25869: LD_INT 1
25871: NEG
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 3
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 3
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25915: LD_ADDR_VAR 0 16
25919: PUSH
25920: LD_INT 0
25922: PUSH
25923: LD_INT 0
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 0
25932: PUSH
25933: LD_INT 1
25935: NEG
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 1
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 1
25953: PUSH
25954: LD_INT 1
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: LD_INT 1
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 1
25973: NEG
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 1
25984: NEG
25985: PUSH
25986: LD_INT 1
25988: NEG
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 1
25996: NEG
25997: PUSH
25998: LD_INT 2
26000: NEG
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 2
26008: PUSH
26009: LD_INT 1
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 2
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 1
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 2
26038: NEG
26039: PUSH
26040: LD_INT 1
26042: NEG
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 2
26050: NEG
26051: PUSH
26052: LD_INT 2
26054: NEG
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 3
26062: PUSH
26063: LD_INT 2
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 3
26072: PUSH
26073: LD_INT 3
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 2
26082: PUSH
26083: LD_INT 3
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26108: LD_ADDR_VAR 0 17
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: LD_INT 0
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: LD_INT 1
26128: NEG
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 1
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: LD_INT 1
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 0
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: NEG
26167: PUSH
26168: LD_INT 0
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 1
26177: NEG
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 1
26189: NEG
26190: PUSH
26191: LD_INT 2
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: LD_INT 2
26204: NEG
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 1
26212: PUSH
26213: LD_INT 1
26215: NEG
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 2
26223: PUSH
26224: LD_INT 0
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 2
26233: PUSH
26234: LD_INT 1
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 2
26243: PUSH
26244: LD_INT 2
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: LD_INT 2
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 0
26263: PUSH
26264: LD_INT 2
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 1
26273: NEG
26274: PUSH
26275: LD_INT 1
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 2
26284: NEG
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 2
26295: NEG
26296: PUSH
26297: LD_INT 1
26299: NEG
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 2
26307: NEG
26308: PUSH
26309: LD_INT 2
26311: NEG
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26338: LD_ADDR_VAR 0 18
26342: PUSH
26343: LD_INT 0
26345: PUSH
26346: LD_INT 0
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 0
26355: PUSH
26356: LD_INT 1
26358: NEG
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: LD_INT 0
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: LD_INT 1
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: NEG
26397: PUSH
26398: LD_INT 0
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: NEG
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: NEG
26420: PUSH
26421: LD_INT 2
26423: NEG
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 0
26431: PUSH
26432: LD_INT 2
26434: NEG
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 1
26442: PUSH
26443: LD_INT 1
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 2
26453: PUSH
26454: LD_INT 0
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 2
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 2
26473: PUSH
26474: LD_INT 2
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: LD_INT 2
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 0
26493: PUSH
26494: LD_INT 2
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 1
26503: NEG
26504: PUSH
26505: LD_INT 1
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: NEG
26515: PUSH
26516: LD_INT 0
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 2
26525: NEG
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: NEG
26538: PUSH
26539: LD_INT 2
26541: NEG
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26568: LD_ADDR_VAR 0 19
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: LD_INT 0
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 1
26606: PUSH
26607: LD_INT 1
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: LD_INT 1
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: NEG
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 1
26649: NEG
26650: PUSH
26651: LD_INT 2
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 0
26661: PUSH
26662: LD_INT 2
26664: NEG
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 1
26672: PUSH
26673: LD_INT 1
26675: NEG
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 2
26683: PUSH
26684: LD_INT 0
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 2
26693: PUSH
26694: LD_INT 1
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 2
26703: PUSH
26704: LD_INT 2
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: LD_INT 2
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: LD_INT 2
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 1
26733: NEG
26734: PUSH
26735: LD_INT 1
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 2
26744: NEG
26745: PUSH
26746: LD_INT 0
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 2
26755: NEG
26756: PUSH
26757: LD_INT 1
26759: NEG
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 2
26767: NEG
26768: PUSH
26769: LD_INT 2
26771: NEG
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26798: LD_ADDR_VAR 0 20
26802: PUSH
26803: LD_INT 0
26805: PUSH
26806: LD_INT 0
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 0
26815: PUSH
26816: LD_INT 1
26818: NEG
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 1
26826: PUSH
26827: LD_INT 0
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: LD_INT 1
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 0
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 1
26856: NEG
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 1
26867: NEG
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 1
26879: NEG
26880: PUSH
26881: LD_INT 2
26883: NEG
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: LD_INT 2
26894: NEG
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: LD_INT 1
26905: NEG
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: LD_INT 0
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 2
26923: PUSH
26924: LD_INT 1
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 2
26933: PUSH
26934: LD_INT 2
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 1
26943: PUSH
26944: LD_INT 2
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 0
26953: PUSH
26954: LD_INT 2
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 1
26963: NEG
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 2
26974: NEG
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 2
26985: NEG
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 2
26997: NEG
26998: PUSH
26999: LD_INT 2
27001: NEG
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27028: LD_ADDR_VAR 0 21
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: LD_INT 0
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: PUSH
27067: LD_INT 1
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 1
27086: NEG
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: NEG
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: NEG
27110: PUSH
27111: LD_INT 2
27113: NEG
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: LD_INT 2
27124: NEG
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 1
27132: PUSH
27133: LD_INT 1
27135: NEG
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 2
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 2
27153: PUSH
27154: LD_INT 1
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 2
27163: PUSH
27164: LD_INT 2
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 1
27173: PUSH
27174: LD_INT 2
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 0
27183: PUSH
27184: LD_INT 2
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 1
27193: NEG
27194: PUSH
27195: LD_INT 1
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 2
27204: NEG
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 2
27215: NEG
27216: PUSH
27217: LD_INT 1
27219: NEG
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 2
27227: NEG
27228: PUSH
27229: LD_INT 2
27231: NEG
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27258: LD_ADDR_VAR 0 22
27262: PUSH
27263: LD_INT 0
27265: PUSH
27266: LD_INT 0
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: LD_INT 1
27278: NEG
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 1
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: LD_INT 1
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: LD_INT 1
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 1
27327: NEG
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 1
27339: NEG
27340: PUSH
27341: LD_INT 2
27343: NEG
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: LD_INT 2
27354: NEG
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: LD_INT 1
27365: NEG
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 2
27373: PUSH
27374: LD_INT 0
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 2
27383: PUSH
27384: LD_INT 1
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 2
27393: PUSH
27394: LD_INT 2
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: LD_INT 2
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: LD_INT 2
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 2
27434: NEG
27435: PUSH
27436: LD_INT 0
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 2
27445: NEG
27446: PUSH
27447: LD_INT 1
27449: NEG
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 2
27457: NEG
27458: PUSH
27459: LD_INT 2
27461: NEG
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27488: LD_ADDR_VAR 0 23
27492: PUSH
27493: LD_INT 0
27495: PUSH
27496: LD_INT 0
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: LD_INT 1
27508: NEG
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 1
27516: PUSH
27517: LD_INT 0
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 1
27546: NEG
27547: PUSH
27548: LD_INT 0
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: LD_INT 1
27561: NEG
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 1
27569: NEG
27570: PUSH
27571: LD_INT 2
27573: NEG
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 0
27581: PUSH
27582: LD_INT 2
27584: NEG
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: LD_INT 1
27595: NEG
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 2
27603: PUSH
27604: LD_INT 0
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 2
27613: PUSH
27614: LD_INT 1
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 2
27623: PUSH
27624: LD_INT 2
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: LD_INT 2
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: LD_INT 2
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 2
27664: NEG
27665: PUSH
27666: LD_INT 0
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 2
27675: NEG
27676: PUSH
27677: LD_INT 1
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 2
27687: NEG
27688: PUSH
27689: LD_INT 2
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 2
27699: NEG
27700: PUSH
27701: LD_INT 3
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 1
27711: NEG
27712: PUSH
27713: LD_INT 3
27715: NEG
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 1
27723: PUSH
27724: LD_INT 2
27726: NEG
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 2
27734: PUSH
27735: LD_INT 1
27737: NEG
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27768: LD_ADDR_VAR 0 24
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 0
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 1
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 1
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 0
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 1
27826: NEG
27827: PUSH
27828: LD_INT 0
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 1
27837: NEG
27838: PUSH
27839: LD_INT 1
27841: NEG
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 1
27849: NEG
27850: PUSH
27851: LD_INT 2
27853: NEG
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 0
27861: PUSH
27862: LD_INT 2
27864: NEG
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 1
27872: PUSH
27873: LD_INT 1
27875: NEG
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 2
27883: PUSH
27884: LD_INT 0
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 2
27893: PUSH
27894: LD_INT 1
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 2
27903: PUSH
27904: LD_INT 2
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 1
27913: PUSH
27914: LD_INT 2
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: LD_INT 2
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: NEG
27934: PUSH
27935: LD_INT 1
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 2
27944: NEG
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 2
27955: NEG
27956: PUSH
27957: LD_INT 1
27959: NEG
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 2
27967: NEG
27968: PUSH
27969: LD_INT 2
27971: NEG
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: LD_INT 2
27982: NEG
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 2
27990: PUSH
27991: LD_INT 1
27993: NEG
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 3
28001: PUSH
28002: LD_INT 1
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 3
28011: PUSH
28012: LD_INT 2
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28044: LD_ADDR_VAR 0 25
28048: PUSH
28049: LD_INT 0
28051: PUSH
28052: LD_INT 0
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 0
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: LD_INT 0
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: LD_INT 1
28117: NEG
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: LD_INT 2
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: LD_INT 2
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: LD_INT 1
28151: NEG
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 2
28159: PUSH
28160: LD_INT 0
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 2
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: LD_INT 2
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: LD_INT 2
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: NEG
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 2
28220: NEG
28221: PUSH
28222: LD_INT 0
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: LD_INT 1
28235: NEG
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 2
28243: NEG
28244: PUSH
28245: LD_INT 2
28247: NEG
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 3
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 3
28265: PUSH
28266: LD_INT 2
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 2
28275: PUSH
28276: LD_INT 3
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 1
28285: PUSH
28286: LD_INT 3
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28318: LD_ADDR_VAR 0 26
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: LD_INT 0
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 0
28335: PUSH
28336: LD_INT 1
28338: NEG
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 1
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: LD_INT 1
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 0
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 1
28376: NEG
28377: PUSH
28378: LD_INT 0
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 1
28387: NEG
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 1
28399: NEG
28400: PUSH
28401: LD_INT 2
28403: NEG
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 0
28411: PUSH
28412: LD_INT 2
28414: NEG
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 2
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 2
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: LD_INT 2
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 0
28473: PUSH
28474: LD_INT 2
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 1
28483: NEG
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 2
28494: NEG
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 2
28505: NEG
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 2
28517: NEG
28518: PUSH
28519: LD_INT 2
28521: NEG
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 2
28529: PUSH
28530: LD_INT 3
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 1
28539: PUSH
28540: LD_INT 3
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 1
28549: NEG
28550: PUSH
28551: LD_INT 2
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 2
28560: NEG
28561: PUSH
28562: LD_INT 1
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28594: LD_ADDR_VAR 0 27
28598: PUSH
28599: LD_INT 0
28601: PUSH
28602: LD_INT 0
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 0
28611: PUSH
28612: LD_INT 1
28614: NEG
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 1
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: LD_INT 1
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: LD_INT 1
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 1
28652: NEG
28653: PUSH
28654: LD_INT 0
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 1
28663: NEG
28664: PUSH
28665: LD_INT 1
28667: NEG
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 1
28675: NEG
28676: PUSH
28677: LD_INT 2
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 0
28687: PUSH
28688: LD_INT 2
28690: NEG
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: LD_INT 1
28701: NEG
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 2
28709: PUSH
28710: LD_INT 0
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 2
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 2
28729: PUSH
28730: LD_INT 2
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: LD_INT 2
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 0
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 1
28759: NEG
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 2
28770: NEG
28771: PUSH
28772: LD_INT 0
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 2
28781: NEG
28782: PUSH
28783: LD_INT 1
28785: NEG
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 2
28793: NEG
28794: PUSH
28795: LD_INT 2
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: LD_INT 2
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 2
28816: NEG
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 3
28827: NEG
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 3
28839: NEG
28840: PUSH
28841: LD_INT 2
28843: NEG
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28874: LD_ADDR_VAR 0 28
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: LD_INT 1
28894: NEG
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 1
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 1
28912: PUSH
28913: LD_INT 1
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 0
28922: PUSH
28923: LD_INT 1
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 1
28932: NEG
28933: PUSH
28934: LD_INT 0
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: LD_INT 1
28947: NEG
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: LD_INT 2
28959: NEG
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 0
28967: PUSH
28968: LD_INT 2
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: LD_INT 1
28981: NEG
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 2
28989: PUSH
28990: LD_INT 0
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 2
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 2
29009: PUSH
29010: LD_INT 2
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: LD_INT 2
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 0
29029: PUSH
29030: LD_INT 2
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: NEG
29040: PUSH
29041: LD_INT 1
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 2
29050: NEG
29051: PUSH
29052: LD_INT 0
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 2
29061: NEG
29062: PUSH
29063: LD_INT 1
29065: NEG
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 2
29073: NEG
29074: PUSH
29075: LD_INT 2
29077: NEG
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 2
29085: NEG
29086: PUSH
29087: LD_INT 3
29089: NEG
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 1
29097: NEG
29098: PUSH
29099: LD_INT 3
29101: NEG
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 3
29109: NEG
29110: PUSH
29111: LD_INT 1
29113: NEG
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 3
29121: NEG
29122: PUSH
29123: LD_INT 2
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29156: LD_ADDR_VAR 0 29
29160: PUSH
29161: LD_INT 0
29163: PUSH
29164: LD_INT 0
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 0
29173: PUSH
29174: LD_INT 1
29176: NEG
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: LD_INT 0
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 1
29194: PUSH
29195: LD_INT 1
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: LD_INT 1
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 1
29214: NEG
29215: PUSH
29216: LD_INT 0
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: LD_INT 1
29229: NEG
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: LD_INT 2
29241: NEG
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 0
29249: PUSH
29250: LD_INT 2
29252: NEG
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 1
29260: PUSH
29261: LD_INT 1
29263: NEG
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 2
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 2
29281: PUSH
29282: LD_INT 1
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 1
29291: PUSH
29292: LD_INT 2
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 0
29301: PUSH
29302: LD_INT 2
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 1
29311: NEG
29312: PUSH
29313: LD_INT 1
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 2
29322: NEG
29323: PUSH
29324: LD_INT 1
29326: NEG
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 2
29334: NEG
29335: PUSH
29336: LD_INT 2
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 2
29346: NEG
29347: PUSH
29348: LD_INT 3
29350: NEG
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 2
29358: PUSH
29359: LD_INT 1
29361: NEG
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 3
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 1
29379: PUSH
29380: LD_INT 3
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 1
29389: NEG
29390: PUSH
29391: LD_INT 2
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 3
29400: NEG
29401: PUSH
29402: LD_INT 2
29404: NEG
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29435: LD_ADDR_VAR 0 30
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 0
29452: PUSH
29453: LD_INT 1
29455: NEG
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 1
29463: PUSH
29464: LD_INT 0
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 1
29473: PUSH
29474: LD_INT 1
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 0
29483: PUSH
29484: LD_INT 1
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: NEG
29494: PUSH
29495: LD_INT 0
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 1
29504: NEG
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: NEG
29517: PUSH
29518: LD_INT 2
29520: NEG
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 0
29528: PUSH
29529: LD_INT 2
29531: NEG
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 2
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 2
29560: PUSH
29561: LD_INT 1
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 2
29570: PUSH
29571: LD_INT 2
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 1
29580: PUSH
29581: LD_INT 2
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 1
29590: NEG
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 2
29601: NEG
29602: PUSH
29603: LD_INT 0
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 2
29612: NEG
29613: PUSH
29614: LD_INT 1
29616: NEG
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 1
29624: NEG
29625: PUSH
29626: LD_INT 3
29628: NEG
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 1
29636: PUSH
29637: LD_INT 2
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 3
29647: PUSH
29648: LD_INT 2
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 2
29657: PUSH
29658: LD_INT 3
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 2
29667: NEG
29668: PUSH
29669: LD_INT 1
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 3
29678: NEG
29679: PUSH
29680: LD_INT 1
29682: NEG
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29713: LD_ADDR_VAR 0 31
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: LD_INT 0
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 0
29730: PUSH
29731: LD_INT 1
29733: NEG
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 1
29741: PUSH
29742: LD_INT 0
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 1
29751: PUSH
29752: LD_INT 1
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 0
29761: PUSH
29762: LD_INT 1
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 1
29771: NEG
29772: PUSH
29773: LD_INT 0
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 1
29782: NEG
29783: PUSH
29784: LD_INT 1
29786: NEG
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: NEG
29795: PUSH
29796: LD_INT 2
29798: NEG
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: LD_INT 1
29809: NEG
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 2
29817: PUSH
29818: LD_INT 0
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 2
29827: PUSH
29828: LD_INT 1
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 2
29837: PUSH
29838: LD_INT 2
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: LD_INT 2
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 0
29857: PUSH
29858: LD_INT 2
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 1
29867: NEG
29868: PUSH
29869: LD_INT 1
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 2
29878: NEG
29879: PUSH
29880: LD_INT 1
29882: NEG
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 2
29890: NEG
29891: PUSH
29892: LD_INT 2
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 2
29902: NEG
29903: PUSH
29904: LD_INT 3
29906: NEG
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 2
29914: PUSH
29915: LD_INT 1
29917: NEG
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 3
29925: PUSH
29926: LD_INT 1
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 1
29935: PUSH
29936: LD_INT 3
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 1
29945: NEG
29946: PUSH
29947: LD_INT 2
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 3
29956: NEG
29957: PUSH
29958: LD_INT 2
29960: NEG
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29991: LD_ADDR_VAR 0 32
29995: PUSH
29996: LD_INT 0
29998: PUSH
29999: LD_INT 0
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: LD_INT 1
30011: NEG
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 1
30019: PUSH
30020: LD_INT 0
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: LD_INT 1
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: LD_INT 1
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 1
30049: NEG
30050: PUSH
30051: LD_INT 0
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 1
30060: NEG
30061: PUSH
30062: LD_INT 1
30064: NEG
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: NEG
30073: PUSH
30074: LD_INT 2
30076: NEG
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: LD_INT 2
30087: NEG
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: LD_INT 1
30098: NEG
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 2
30106: PUSH
30107: LD_INT 1
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 2
30116: PUSH
30117: LD_INT 2
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 1
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: LD_INT 2
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: LD_INT 1
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 2
30157: NEG
30158: PUSH
30159: LD_INT 0
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 2
30168: NEG
30169: PUSH
30170: LD_INT 1
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 1
30180: NEG
30181: PUSH
30182: LD_INT 3
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 1
30192: PUSH
30193: LD_INT 2
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 3
30203: PUSH
30204: LD_INT 2
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 2
30213: PUSH
30214: LD_INT 3
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 2
30223: NEG
30224: PUSH
30225: LD_INT 1
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 3
30234: NEG
30235: PUSH
30236: LD_INT 1
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30269: LD_ADDR_VAR 0 33
30273: PUSH
30274: LD_INT 0
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: LD_INT 0
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: LD_INT 1
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 0
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 1
30350: NEG
30351: PUSH
30352: LD_INT 2
30354: NEG
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 1
30362: PUSH
30363: LD_INT 1
30365: NEG
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 2
30373: PUSH
30374: LD_INT 0
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 2
30383: PUSH
30384: LD_INT 1
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 1
30393: PUSH
30394: LD_INT 2
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 0
30403: PUSH
30404: LD_INT 2
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: LD_INT 1
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 2
30424: NEG
30425: PUSH
30426: LD_INT 0
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 2
30435: NEG
30436: PUSH
30437: LD_INT 1
30439: NEG
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 2
30447: NEG
30448: PUSH
30449: LD_INT 2
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 2
30459: NEG
30460: PUSH
30461: LD_INT 3
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 2
30471: PUSH
30472: LD_INT 1
30474: NEG
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 3
30482: PUSH
30483: LD_INT 1
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 1
30492: PUSH
30493: LD_INT 3
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 1
30502: NEG
30503: PUSH
30504: LD_INT 2
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 3
30513: NEG
30514: PUSH
30515: LD_INT 2
30517: NEG
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30548: LD_ADDR_VAR 0 34
30552: PUSH
30553: LD_INT 0
30555: PUSH
30556: LD_INT 0
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 0
30565: PUSH
30566: LD_INT 1
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 1
30576: PUSH
30577: LD_INT 0
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 1
30586: PUSH
30587: LD_INT 1
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 0
30596: PUSH
30597: LD_INT 1
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: NEG
30607: PUSH
30608: LD_INT 0
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 1
30617: NEG
30618: PUSH
30619: LD_INT 1
30621: NEG
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 1
30629: NEG
30630: PUSH
30631: LD_INT 2
30633: NEG
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 0
30641: PUSH
30642: LD_INT 2
30644: NEG
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 1
30652: PUSH
30653: LD_INT 1
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 2
30663: PUSH
30664: LD_INT 1
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 2
30673: PUSH
30674: LD_INT 2
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 1
30683: PUSH
30684: LD_INT 2
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 1
30693: NEG
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 2
30704: NEG
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 2
30715: NEG
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 2
30727: NEG
30728: PUSH
30729: LD_INT 2
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: PUSH
30741: LD_INT 3
30743: NEG
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 1
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 3
30762: PUSH
30763: LD_INT 2
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 2
30772: PUSH
30773: LD_INT 3
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 2
30782: NEG
30783: PUSH
30784: LD_INT 1
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 3
30793: NEG
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30828: LD_ADDR_VAR 0 35
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: LD_INT 0
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: LD_INT 1
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 1
30856: PUSH
30857: LD_INT 0
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: LD_INT 1
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 0
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 1
30886: NEG
30887: PUSH
30888: LD_INT 0
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 1
30897: NEG
30898: PUSH
30899: LD_INT 1
30901: NEG
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 2
30909: PUSH
30910: LD_INT 1
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 2
30919: NEG
30920: PUSH
30921: LD_INT 1
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30940: LD_ADDR_VAR 0 36
30944: PUSH
30945: LD_INT 0
30947: PUSH
30948: LD_INT 0
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 0
30957: PUSH
30958: LD_INT 1
30960: NEG
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: LD_INT 0
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 1
30978: PUSH
30979: LD_INT 1
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 0
30988: PUSH
30989: LD_INT 1
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 1
30998: NEG
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 1
31009: NEG
31010: PUSH
31011: LD_INT 1
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 1
31021: NEG
31022: PUSH
31023: LD_INT 2
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 1
31033: PUSH
31034: LD_INT 2
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31052: LD_ADDR_VAR 0 37
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: LD_INT 1
31072: NEG
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 1
31090: PUSH
31091: LD_INT 1
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 0
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 1
31110: NEG
31111: PUSH
31112: LD_INT 0
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: LD_INT 1
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: LD_INT 1
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: NEG
31145: PUSH
31146: LD_INT 1
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31164: LD_ADDR_VAR 0 38
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: LD_INT 0
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 0
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 1
31202: PUSH
31203: LD_INT 1
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: LD_INT 1
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 1
31222: NEG
31223: PUSH
31224: LD_INT 0
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: NEG
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 2
31245: PUSH
31246: LD_INT 1
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 2
31255: NEG
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31276: LD_ADDR_VAR 0 39
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: LD_INT 0
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 0
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: PUSH
31305: LD_INT 0
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 1
31314: PUSH
31315: LD_INT 1
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 0
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 1
31334: NEG
31335: PUSH
31336: LD_INT 0
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: LD_INT 1
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PUSH
31359: LD_INT 2
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: LD_INT 2
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31388: LD_ADDR_VAR 0 40
31392: PUSH
31393: LD_INT 0
31395: PUSH
31396: LD_INT 0
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 0
31405: PUSH
31406: LD_INT 1
31408: NEG
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 1
31416: PUSH
31417: LD_INT 0
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 1
31426: PUSH
31427: LD_INT 1
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 0
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: LD_INT 0
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 1
31457: NEG
31458: PUSH
31459: LD_INT 1
31461: NEG
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 1
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: LD_INT 1
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31500: LD_ADDR_VAR 0 41
31504: PUSH
31505: LD_INT 0
31507: PUSH
31508: LD_INT 0
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: LD_INT 1
31520: NEG
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: LD_INT 0
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 1
31538: PUSH
31539: LD_INT 1
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 0
31548: PUSH
31549: LD_INT 1
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 1
31558: NEG
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 1
31569: NEG
31570: PUSH
31571: LD_INT 1
31573: NEG
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 1
31581: NEG
31582: PUSH
31583: LD_INT 2
31585: NEG
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: LD_INT 1
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 2
31604: PUSH
31605: LD_INT 0
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 2
31614: PUSH
31615: LD_INT 1
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 2
31624: PUSH
31625: LD_INT 2
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 1
31634: PUSH
31635: LD_INT 2
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 1
31644: NEG
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 2
31655: NEG
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 2
31666: NEG
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 2
31678: NEG
31679: PUSH
31680: LD_INT 2
31682: NEG
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 2
31690: NEG
31691: PUSH
31692: LD_INT 3
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 2
31702: PUSH
31703: LD_INT 1
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 3
31713: PUSH
31714: LD_INT 0
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 3
31723: PUSH
31724: LD_INT 1
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 3
31733: PUSH
31734: LD_INT 2
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 3
31743: PUSH
31744: LD_INT 3
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 2
31753: PUSH
31754: LD_INT 3
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 2
31763: NEG
31764: PUSH
31765: LD_INT 1
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 3
31774: NEG
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 3
31785: NEG
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 3
31797: NEG
31798: PUSH
31799: LD_INT 2
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 3
31809: NEG
31810: PUSH
31811: LD_INT 3
31813: NEG
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31850: LD_ADDR_VAR 0 42
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: LD_INT 0
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 0
31867: PUSH
31868: LD_INT 1
31870: NEG
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 1
31878: PUSH
31879: LD_INT 0
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 1
31888: PUSH
31889: LD_INT 1
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 0
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 1
31908: NEG
31909: PUSH
31910: LD_INT 0
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 1
31919: NEG
31920: PUSH
31921: LD_INT 1
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 1
31931: NEG
31932: PUSH
31933: LD_INT 2
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 0
31943: PUSH
31944: LD_INT 2
31946: NEG
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 1
31954: PUSH
31955: LD_INT 1
31957: NEG
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 2
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 2
31975: PUSH
31976: LD_INT 2
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 1
31985: PUSH
31986: LD_INT 2
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: LD_INT 2
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 1
32005: NEG
32006: PUSH
32007: LD_INT 1
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 2
32016: NEG
32017: PUSH
32018: LD_INT 1
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 2
32028: NEG
32029: PUSH
32030: LD_INT 2
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 2
32040: NEG
32041: PUSH
32042: LD_INT 3
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 1
32052: NEG
32053: PUSH
32054: LD_INT 3
32056: NEG
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 0
32064: PUSH
32065: LD_INT 3
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 1
32075: PUSH
32076: LD_INT 2
32078: NEG
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 3
32086: PUSH
32087: LD_INT 2
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 3
32096: PUSH
32097: LD_INT 3
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: LD_INT 3
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 1
32116: PUSH
32117: LD_INT 3
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 0
32126: PUSH
32127: LD_INT 3
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 1
32136: NEG
32137: PUSH
32138: LD_INT 2
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 3
32147: NEG
32148: PUSH
32149: LD_INT 2
32151: NEG
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 3
32159: NEG
32160: PUSH
32161: LD_INT 3
32163: NEG
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32200: LD_ADDR_VAR 0 43
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: LD_INT 0
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: LD_INT 1
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: LD_INT 1
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: LD_INT 1
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 1
32281: NEG
32282: PUSH
32283: LD_INT 2
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 0
32293: PUSH
32294: LD_INT 2
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 1
32304: PUSH
32305: LD_INT 1
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 2
32315: PUSH
32316: LD_INT 0
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 2
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: LD_INT 2
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: LD_INT 2
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 2
32366: NEG
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 2
32377: NEG
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: NEG
32390: PUSH
32391: LD_INT 3
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 0
32401: PUSH
32402: LD_INT 3
32404: NEG
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 1
32412: PUSH
32413: LD_INT 2
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 2
32423: PUSH
32424: LD_INT 1
32426: NEG
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 3
32434: PUSH
32435: LD_INT 0
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 3
32444: PUSH
32445: LD_INT 1
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 1
32454: PUSH
32455: LD_INT 3
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 0
32464: PUSH
32465: LD_INT 3
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 1
32474: NEG
32475: PUSH
32476: LD_INT 2
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 2
32485: NEG
32486: PUSH
32487: LD_INT 1
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 3
32496: NEG
32497: PUSH
32498: LD_INT 0
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 3
32507: NEG
32508: PUSH
32509: LD_INT 1
32511: NEG
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32548: LD_ADDR_VAR 0 44
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: LD_INT 0
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 0
32565: PUSH
32566: LD_INT 1
32568: NEG
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 1
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 0
32596: PUSH
32597: LD_INT 1
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 1
32606: NEG
32607: PUSH
32608: LD_INT 0
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 1
32617: NEG
32618: PUSH
32619: LD_INT 1
32621: NEG
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 1
32629: NEG
32630: PUSH
32631: LD_INT 2
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: LD_INT 1
32644: NEG
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 2
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 2
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 2
32672: PUSH
32673: LD_INT 2
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 1
32682: PUSH
32683: LD_INT 2
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 1
32692: NEG
32693: PUSH
32694: LD_INT 1
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 2
32703: NEG
32704: PUSH
32705: LD_INT 0
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 2
32714: NEG
32715: PUSH
32716: LD_INT 1
32718: NEG
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 2
32726: NEG
32727: PUSH
32728: LD_INT 2
32730: NEG
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 2
32738: NEG
32739: PUSH
32740: LD_INT 3
32742: NEG
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 2
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 3
32761: PUSH
32762: LD_INT 0
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 3
32771: PUSH
32772: LD_INT 1
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 3
32781: PUSH
32782: LD_INT 2
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 3
32791: PUSH
32792: LD_INT 3
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 2
32801: PUSH
32802: LD_INT 3
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 2
32811: NEG
32812: PUSH
32813: LD_INT 1
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 3
32822: NEG
32823: PUSH
32824: LD_INT 0
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 3
32833: NEG
32834: PUSH
32835: LD_INT 1
32837: NEG
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 3
32845: NEG
32846: PUSH
32847: LD_INT 2
32849: NEG
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 3
32857: NEG
32858: PUSH
32859: LD_INT 3
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32898: LD_ADDR_VAR 0 45
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: LD_INT 0
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 0
32915: PUSH
32916: LD_INT 1
32918: NEG
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 1
32926: PUSH
32927: LD_INT 0
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 1
32936: PUSH
32937: LD_INT 1
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 0
32946: PUSH
32947: LD_INT 1
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PUSH
32958: LD_INT 0
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 1
32967: NEG
32968: PUSH
32969: LD_INT 1
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 1
32979: NEG
32980: PUSH
32981: LD_INT 2
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: LD_INT 2
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 1
33002: PUSH
33003: LD_INT 1
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 2
33013: PUSH
33014: LD_INT 1
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 2
33023: PUSH
33024: LD_INT 2
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 1
33033: PUSH
33034: LD_INT 2
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 0
33043: PUSH
33044: LD_INT 2
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 1
33053: NEG
33054: PUSH
33055: LD_INT 1
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 2
33064: NEG
33065: PUSH
33066: LD_INT 1
33068: NEG
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 2
33076: NEG
33077: PUSH
33078: LD_INT 2
33080: NEG
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 2
33088: NEG
33089: PUSH
33090: LD_INT 3
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: LD_INT 3
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 0
33112: PUSH
33113: LD_INT 3
33115: NEG
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 1
33123: PUSH
33124: LD_INT 2
33126: NEG
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 3
33134: PUSH
33135: LD_INT 2
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 3
33144: PUSH
33145: LD_INT 3
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: LD_INT 3
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 1
33164: PUSH
33165: LD_INT 3
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 0
33174: PUSH
33175: LD_INT 3
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: LD_INT 2
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 3
33195: NEG
33196: PUSH
33197: LD_INT 2
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 3
33207: NEG
33208: PUSH
33209: LD_INT 3
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33248: LD_ADDR_VAR 0 46
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: LD_INT 0
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 0
33265: PUSH
33266: LD_INT 1
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: LD_INT 0
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 1
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 0
33296: PUSH
33297: LD_INT 1
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 1
33306: NEG
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 1
33317: NEG
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 1
33329: NEG
33330: PUSH
33331: LD_INT 2
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: LD_INT 2
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: LD_INT 1
33355: NEG
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 2
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 2
33373: PUSH
33374: LD_INT 1
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: LD_INT 2
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: LD_INT 2
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 1
33403: NEG
33404: PUSH
33405: LD_INT 1
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 2
33414: NEG
33415: PUSH
33416: LD_INT 0
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 2
33425: NEG
33426: PUSH
33427: LD_INT 1
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 1
33437: NEG
33438: PUSH
33439: LD_INT 3
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 0
33449: PUSH
33450: LD_INT 3
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 1
33460: PUSH
33461: LD_INT 2
33463: NEG
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 2
33471: PUSH
33472: LD_INT 1
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 3
33482: PUSH
33483: LD_INT 0
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 3
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: LD_INT 3
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 0
33512: PUSH
33513: LD_INT 3
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: NEG
33523: PUSH
33524: LD_INT 2
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 2
33533: NEG
33534: PUSH
33535: LD_INT 1
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 3
33544: NEG
33545: PUSH
33546: LD_INT 0
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 3
33555: NEG
33556: PUSH
33557: LD_INT 1
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33596: LD_ADDR_VAR 0 47
33600: PUSH
33601: LD_INT 0
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 0
33613: PUSH
33614: LD_INT 1
33616: NEG
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 1
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 1
33634: PUSH
33635: LD_INT 1
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: LD_INT 1
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 1
33654: NEG
33655: PUSH
33656: LD_INT 0
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 1
33665: NEG
33666: PUSH
33667: LD_INT 1
33669: NEG
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: NEG
33678: PUSH
33679: LD_INT 2
33681: NEG
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 0
33689: PUSH
33690: LD_INT 2
33692: NEG
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 1
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 2
33711: NEG
33712: PUSH
33713: LD_INT 1
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 2
33723: NEG
33724: PUSH
33725: LD_INT 2
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33747: LD_ADDR_VAR 0 48
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: LD_INT 0
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 0
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 1
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 1
33785: PUSH
33786: LD_INT 1
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 0
33795: PUSH
33796: LD_INT 1
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 1
33805: NEG
33806: PUSH
33807: LD_INT 0
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 1
33816: NEG
33817: PUSH
33818: LD_INT 1
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 1
33828: NEG
33829: PUSH
33830: LD_INT 2
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 0
33840: PUSH
33841: LD_INT 2
33843: NEG
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 1
33851: PUSH
33852: LD_INT 1
33854: NEG
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 2
33862: PUSH
33863: LD_INT 0
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 2
33872: PUSH
33873: LD_INT 1
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33894: LD_ADDR_VAR 0 49
33898: PUSH
33899: LD_INT 0
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: LD_INT 1
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 1
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 0
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 1
33952: NEG
33953: PUSH
33954: LD_INT 0
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 1
33963: NEG
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: PUSH
33976: LD_INT 1
33978: NEG
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 2
33986: PUSH
33987: LD_INT 0
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 2
33996: PUSH
33997: LD_INT 1
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: LD_INT 2
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 1
34016: PUSH
34017: LD_INT 2
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34038: LD_ADDR_VAR 0 50
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: LD_INT 1
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 1
34066: PUSH
34067: LD_INT 0
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: LD_INT 1
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 0
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: NEG
34097: PUSH
34098: LD_INT 0
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 2
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 2
34129: PUSH
34130: LD_INT 2
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: LD_INT 2
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: LD_INT 2
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 1
34159: NEG
34160: PUSH
34161: LD_INT 1
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34182: LD_ADDR_VAR 0 51
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: LD_INT 1
34202: NEG
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 1
34210: PUSH
34211: LD_INT 0
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 1
34220: PUSH
34221: LD_INT 1
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 0
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 1
34240: NEG
34241: PUSH
34242: LD_INT 0
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 1
34251: NEG
34252: PUSH
34253: LD_INT 1
34255: NEG
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 1
34263: PUSH
34264: LD_INT 2
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: LD_INT 2
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 1
34283: NEG
34284: PUSH
34285: LD_INT 1
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 2
34294: NEG
34295: PUSH
34296: LD_INT 0
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 2
34305: NEG
34306: PUSH
34307: LD_INT 1
34309: NEG
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34329: LD_ADDR_VAR 0 52
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: LD_INT 0
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 0
34346: PUSH
34347: LD_INT 1
34349: NEG
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: LD_INT 0
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: LD_INT 1
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: LD_INT 1
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 1
34387: NEG
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 1
34398: NEG
34399: PUSH
34400: LD_INT 1
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: NEG
34411: PUSH
34412: LD_INT 2
34414: NEG
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 1
34422: NEG
34423: PUSH
34424: LD_INT 1
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 2
34433: NEG
34434: PUSH
34435: LD_INT 0
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 2
34444: NEG
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 2
34456: NEG
34457: PUSH
34458: LD_INT 2
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34480: LD_ADDR_VAR 0 53
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: LD_INT 1
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 1
34518: PUSH
34519: LD_INT 1
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 0
34528: PUSH
34529: LD_INT 1
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 1
34549: NEG
34550: PUSH
34551: LD_INT 1
34553: NEG
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 1
34561: NEG
34562: PUSH
34563: LD_INT 2
34565: NEG
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: LD_INT 2
34576: NEG
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 1
34584: PUSH
34585: LD_INT 1
34587: NEG
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 2
34595: PUSH
34596: LD_INT 0
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 2
34605: PUSH
34606: LD_INT 1
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 2
34615: PUSH
34616: LD_INT 2
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 1
34625: PUSH
34626: LD_INT 2
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: LD_INT 2
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 1
34645: NEG
34646: PUSH
34647: LD_INT 1
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 2
34656: NEG
34657: PUSH
34658: LD_INT 0
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 2
34667: NEG
34668: PUSH
34669: LD_INT 1
34671: NEG
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 2
34679: NEG
34680: PUSH
34681: LD_INT 2
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34710: LD_ADDR_VAR 0 54
34714: PUSH
34715: LD_INT 0
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 1
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 1
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 0
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 1
34768: NEG
34769: PUSH
34770: LD_INT 0
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 1
34779: NEG
34780: PUSH
34781: LD_INT 1
34783: NEG
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: NEG
34792: PUSH
34793: LD_INT 2
34795: NEG
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: LD_INT 2
34806: NEG
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 1
34814: PUSH
34815: LD_INT 1
34817: NEG
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 2
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 2
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 2
34845: PUSH
34846: LD_INT 2
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: LD_INT 2
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 0
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 1
34875: NEG
34876: PUSH
34877: LD_INT 1
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 2
34886: NEG
34887: PUSH
34888: LD_INT 0
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 2
34897: NEG
34898: PUSH
34899: LD_INT 1
34901: NEG
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 2
34909: NEG
34910: PUSH
34911: LD_INT 2
34913: NEG
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34940: LD_ADDR_VAR 0 55
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: LD_INT 0
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: LD_INT 1
34960: NEG
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 1
34968: PUSH
34969: LD_INT 0
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: LD_INT 1
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: LD_INT 0
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 1
35009: NEG
35010: PUSH
35011: LD_INT 1
35013: NEG
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 1
35021: NEG
35022: PUSH
35023: LD_INT 2
35025: NEG
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 0
35033: PUSH
35034: LD_INT 2
35036: NEG
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 1
35044: PUSH
35045: LD_INT 1
35047: NEG
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 2
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 2
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 2
35075: PUSH
35076: LD_INT 2
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 1
35085: PUSH
35086: LD_INT 2
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 2
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: NEG
35106: PUSH
35107: LD_INT 1
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 2
35116: NEG
35117: PUSH
35118: LD_INT 0
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 2
35127: NEG
35128: PUSH
35129: LD_INT 1
35131: NEG
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 2
35139: NEG
35140: PUSH
35141: LD_INT 2
35143: NEG
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35170: LD_ADDR_VAR 0 56
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: LD_INT 0
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 0
35187: PUSH
35188: LD_INT 1
35190: NEG
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: LD_INT 1
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 0
35218: PUSH
35219: LD_INT 1
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 1
35228: NEG
35229: PUSH
35230: LD_INT 0
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 1
35239: NEG
35240: PUSH
35241: LD_INT 1
35243: NEG
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: LD_INT 2
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 0
35263: PUSH
35264: LD_INT 2
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 1
35274: PUSH
35275: LD_INT 1
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 2
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: PUSH
35296: LD_INT 1
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 2
35305: PUSH
35306: LD_INT 2
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 1
35315: PUSH
35316: LD_INT 2
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 0
35325: PUSH
35326: LD_INT 2
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: NEG
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 2
35346: NEG
35347: PUSH
35348: LD_INT 0
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 2
35357: NEG
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 2
35369: NEG
35370: PUSH
35371: LD_INT 2
35373: NEG
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35400: LD_ADDR_VAR 0 57
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: LD_INT 0
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: LD_INT 1
35420: NEG
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 1
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 1
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: LD_INT 0
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 1
35469: NEG
35470: PUSH
35471: LD_INT 1
35473: NEG
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: LD_INT 2
35485: NEG
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: LD_INT 2
35496: NEG
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: LD_INT 1
35507: NEG
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 2
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: LD_INT 1
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 2
35535: PUSH
35536: LD_INT 2
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 1
35545: PUSH
35546: LD_INT 2
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 0
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 1
35565: NEG
35566: PUSH
35567: LD_INT 1
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 2
35576: NEG
35577: PUSH
35578: LD_INT 0
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 2
35587: NEG
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 2
35599: NEG
35600: PUSH
35601: LD_INT 2
35603: NEG
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35630: LD_ADDR_VAR 0 58
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 0
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 1
35650: NEG
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 1
35711: NEG
35712: PUSH
35713: LD_INT 2
35715: NEG
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: LD_INT 2
35726: NEG
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 1
35734: PUSH
35735: LD_INT 1
35737: NEG
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 2
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 2
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 2
35765: PUSH
35766: LD_INT 2
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 1
35775: PUSH
35776: LD_INT 2
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: LD_INT 2
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 1
35795: NEG
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 2
35806: NEG
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 2
35817: NEG
35818: PUSH
35819: LD_INT 1
35821: NEG
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 2
35829: NEG
35830: PUSH
35831: LD_INT 2
35833: NEG
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35860: LD_ADDR_VAR 0 59
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: LD_INT 0
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: LD_INT 1
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 1
35918: NEG
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 1
35929: NEG
35930: PUSH
35931: LD_INT 1
35933: NEG
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35948: LD_ADDR_VAR 0 60
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: LD_INT 0
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 0
35965: PUSH
35966: LD_INT 1
35968: NEG
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: LD_INT 0
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 1
35986: PUSH
35987: LD_INT 1
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 0
35996: PUSH
35997: LD_INT 1
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 1
36006: NEG
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 1
36017: NEG
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36036: LD_ADDR_VAR 0 61
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: LD_INT 0
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: LD_INT 1
36056: NEG
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 1
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 1
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: NEG
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 1
36105: NEG
36106: PUSH
36107: LD_INT 1
36109: NEG
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36124: LD_ADDR_VAR 0 62
36128: PUSH
36129: LD_INT 0
36131: PUSH
36132: LD_INT 0
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 0
36141: PUSH
36142: LD_INT 1
36144: NEG
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 1
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 1
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 0
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 1
36182: NEG
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 1
36193: NEG
36194: PUSH
36195: LD_INT 1
36197: NEG
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36212: LD_ADDR_VAR 0 63
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 1
36281: NEG
36282: PUSH
36283: LD_INT 1
36285: NEG
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36300: LD_ADDR_VAR 0 64
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: LD_INT 1
36320: NEG
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: ST_TO_ADDR
// end ; 1 :
36388: GO 42285
36390: LD_INT 1
36392: DOUBLE
36393: EQUAL
36394: IFTRUE 36398
36396: GO 39021
36398: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36399: LD_ADDR_VAR 0 11
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: LD_INT 3
36410: NEG
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 0
36418: PUSH
36419: LD_INT 3
36421: NEG
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 1
36429: PUSH
36430: LD_INT 2
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: LIST
36442: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36443: LD_ADDR_VAR 0 12
36447: PUSH
36448: LD_INT 2
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 3
36461: PUSH
36462: LD_INT 0
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 3
36471: PUSH
36472: LD_INT 1
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36484: LD_ADDR_VAR 0 13
36488: PUSH
36489: LD_INT 3
36491: PUSH
36492: LD_INT 2
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 3
36501: PUSH
36502: LD_INT 3
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 2
36511: PUSH
36512: LD_INT 3
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36524: LD_ADDR_VAR 0 14
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: LD_INT 3
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 0
36541: PUSH
36542: LD_INT 3
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: NEG
36552: PUSH
36553: LD_INT 2
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: LIST
36564: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36565: LD_ADDR_VAR 0 15
36569: PUSH
36570: LD_INT 2
36572: NEG
36573: PUSH
36574: LD_INT 1
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 3
36583: NEG
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 3
36594: NEG
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: LIST
36608: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36609: LD_ADDR_VAR 0 16
36613: PUSH
36614: LD_INT 2
36616: NEG
36617: PUSH
36618: LD_INT 3
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 3
36628: NEG
36629: PUSH
36630: LD_INT 2
36632: NEG
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 3
36640: NEG
36641: PUSH
36642: LD_INT 3
36644: NEG
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: LIST
36654: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36655: LD_ADDR_VAR 0 17
36659: PUSH
36660: LD_INT 1
36662: NEG
36663: PUSH
36664: LD_INT 3
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: LD_INT 3
36677: NEG
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: LD_INT 2
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: LIST
36698: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36699: LD_ADDR_VAR 0 18
36703: PUSH
36704: LD_INT 2
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 3
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 3
36727: PUSH
36728: LD_INT 1
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: LIST
36739: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36740: LD_ADDR_VAR 0 19
36744: PUSH
36745: LD_INT 3
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 3
36757: PUSH
36758: LD_INT 3
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 2
36767: PUSH
36768: LD_INT 3
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: LIST
36779: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36780: LD_ADDR_VAR 0 20
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: LD_INT 3
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: LD_INT 3
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: NEG
36808: PUSH
36809: LD_INT 2
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: LIST
36820: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36821: LD_ADDR_VAR 0 21
36825: PUSH
36826: LD_INT 2
36828: NEG
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 3
36839: NEG
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 3
36850: NEG
36851: PUSH
36852: LD_INT 1
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: LIST
36864: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36865: LD_ADDR_VAR 0 22
36869: PUSH
36870: LD_INT 2
36872: NEG
36873: PUSH
36874: LD_INT 3
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 3
36884: NEG
36885: PUSH
36886: LD_INT 2
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 3
36896: NEG
36897: PUSH
36898: LD_INT 3
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: LIST
36910: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36911: LD_ADDR_VAR 0 23
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: LD_INT 3
36921: NEG
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: LD_INT 4
36933: NEG
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: LD_INT 3
36944: NEG
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: LIST
36954: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36955: LD_ADDR_VAR 0 24
36959: PUSH
36960: LD_INT 3
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 3
36972: PUSH
36973: LD_INT 1
36975: NEG
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 4
36983: PUSH
36984: LD_INT 1
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: LIST
36995: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36996: LD_ADDR_VAR 0 25
37000: PUSH
37001: LD_INT 3
37003: PUSH
37004: LD_INT 3
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 4
37013: PUSH
37014: LD_INT 3
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 3
37023: PUSH
37024: LD_INT 4
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: LIST
37035: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37036: LD_ADDR_VAR 0 26
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: LD_INT 3
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: LD_INT 4
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 1
37063: NEG
37064: PUSH
37065: LD_INT 3
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: LIST
37076: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37077: LD_ADDR_VAR 0 27
37081: PUSH
37082: LD_INT 3
37084: NEG
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 3
37095: NEG
37096: PUSH
37097: LD_INT 1
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 4
37106: NEG
37107: PUSH
37108: LD_INT 1
37110: NEG
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: LIST
37120: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37121: LD_ADDR_VAR 0 28
37125: PUSH
37126: LD_INT 3
37128: NEG
37129: PUSH
37130: LD_INT 3
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 3
37140: NEG
37141: PUSH
37142: LD_INT 4
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 4
37152: NEG
37153: PUSH
37154: LD_INT 3
37156: NEG
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: LIST
37166: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37167: LD_ADDR_VAR 0 29
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: LD_INT 3
37178: NEG
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: LD_INT 3
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: LD_INT 2
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: LD_INT 4
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: LD_INT 4
37223: NEG
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: LD_INT 3
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 5
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 0
37254: PUSH
37255: LD_INT 5
37257: NEG
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: LD_INT 4
37268: NEG
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 1
37276: NEG
37277: PUSH
37278: LD_INT 6
37280: NEG
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 0
37288: PUSH
37289: LD_INT 6
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: LD_INT 5
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37322: LD_ADDR_VAR 0 30
37326: PUSH
37327: LD_INT 2
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 3
37340: PUSH
37341: LD_INT 0
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 3
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 3
37360: PUSH
37361: LD_INT 1
37363: NEG
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 4
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 4
37381: PUSH
37382: LD_INT 1
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 4
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 5
37402: PUSH
37403: LD_INT 0
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 5
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 5
37422: PUSH
37423: LD_INT 1
37425: NEG
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 6
37433: PUSH
37434: LD_INT 0
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 6
37443: PUSH
37444: LD_INT 1
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37465: LD_ADDR_VAR 0 31
37469: PUSH
37470: LD_INT 3
37472: PUSH
37473: LD_INT 2
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 3
37482: PUSH
37483: LD_INT 3
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 2
37492: PUSH
37493: LD_INT 3
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 4
37502: PUSH
37503: LD_INT 3
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 4
37512: PUSH
37513: LD_INT 4
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 3
37522: PUSH
37523: LD_INT 4
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 5
37532: PUSH
37533: LD_INT 4
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 5
37542: PUSH
37543: LD_INT 5
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 4
37552: PUSH
37553: LD_INT 5
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 6
37562: PUSH
37563: LD_INT 5
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 6
37572: PUSH
37573: LD_INT 6
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 5
37582: PUSH
37583: LD_INT 6
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37604: LD_ADDR_VAR 0 32
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: LD_INT 3
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 0
37621: PUSH
37622: LD_INT 3
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: LD_INT 2
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 1
37642: PUSH
37643: LD_INT 4
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: LD_INT 4
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: LD_INT 3
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: LD_INT 5
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: LD_INT 5
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 1
37693: NEG
37694: PUSH
37695: LD_INT 4
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: LD_INT 6
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 0
37714: PUSH
37715: LD_INT 6
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 1
37724: NEG
37725: PUSH
37726: LD_INT 5
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37747: LD_ADDR_VAR 0 33
37751: PUSH
37752: LD_INT 2
37754: NEG
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 3
37765: NEG
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 3
37776: NEG
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 3
37788: NEG
37789: PUSH
37790: LD_INT 1
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 4
37799: NEG
37800: PUSH
37801: LD_INT 0
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 4
37810: NEG
37811: PUSH
37812: LD_INT 1
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 4
37822: NEG
37823: PUSH
37824: LD_INT 1
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 5
37833: NEG
37834: PUSH
37835: LD_INT 0
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 5
37844: NEG
37845: PUSH
37846: LD_INT 1
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 5
37856: NEG
37857: PUSH
37858: LD_INT 1
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 6
37867: NEG
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 6
37878: NEG
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37902: LD_ADDR_VAR 0 34
37906: PUSH
37907: LD_INT 2
37909: NEG
37910: PUSH
37911: LD_INT 3
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 3
37921: NEG
37922: PUSH
37923: LD_INT 2
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 3
37933: NEG
37934: PUSH
37935: LD_INT 3
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 3
37945: NEG
37946: PUSH
37947: LD_INT 4
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 4
37957: NEG
37958: PUSH
37959: LD_INT 3
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 4
37969: NEG
37970: PUSH
37971: LD_INT 4
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 4
37981: NEG
37982: PUSH
37983: LD_INT 5
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 5
37993: NEG
37994: PUSH
37995: LD_INT 4
37997: NEG
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 5
38005: NEG
38006: PUSH
38007: LD_INT 5
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 5
38017: NEG
38018: PUSH
38019: LD_INT 6
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 6
38029: NEG
38030: PUSH
38031: LD_INT 5
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 6
38041: NEG
38042: PUSH
38043: LD_INT 6
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38065: LD_ADDR_VAR 0 41
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: LD_INT 2
38075: NEG
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 1
38083: NEG
38084: PUSH
38085: LD_INT 3
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: LD_INT 2
38098: NEG
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: LIST
38108: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38109: LD_ADDR_VAR 0 42
38113: PUSH
38114: LD_INT 2
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 2
38126: PUSH
38127: LD_INT 1
38129: NEG
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 3
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: LIST
38149: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38150: LD_ADDR_VAR 0 43
38154: PUSH
38155: LD_INT 2
38157: PUSH
38158: LD_INT 2
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 3
38167: PUSH
38168: LD_INT 2
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 2
38177: PUSH
38178: LD_INT 3
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: LIST
38189: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38190: LD_ADDR_VAR 0 44
38194: PUSH
38195: LD_INT 0
38197: PUSH
38198: LD_INT 2
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: LD_INT 3
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 1
38217: NEG
38218: PUSH
38219: LD_INT 2
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: LIST
38230: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38231: LD_ADDR_VAR 0 45
38235: PUSH
38236: LD_INT 2
38238: NEG
38239: PUSH
38240: LD_INT 0
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 2
38249: NEG
38250: PUSH
38251: LD_INT 1
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 3
38260: NEG
38261: PUSH
38262: LD_INT 1
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38275: LD_ADDR_VAR 0 46
38279: PUSH
38280: LD_INT 2
38282: NEG
38283: PUSH
38284: LD_INT 2
38286: NEG
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 2
38294: NEG
38295: PUSH
38296: LD_INT 3
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 3
38306: NEG
38307: PUSH
38308: LD_INT 2
38310: NEG
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: LIST
38320: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38321: LD_ADDR_VAR 0 47
38325: PUSH
38326: LD_INT 2
38328: NEG
38329: PUSH
38330: LD_INT 3
38332: NEG
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: NEG
38341: PUSH
38342: LD_INT 3
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38354: LD_ADDR_VAR 0 48
38358: PUSH
38359: LD_INT 1
38361: PUSH
38362: LD_INT 2
38364: NEG
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 2
38372: PUSH
38373: LD_INT 1
38375: NEG
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38385: LD_ADDR_VAR 0 49
38389: PUSH
38390: LD_INT 3
38392: PUSH
38393: LD_INT 1
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 3
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38414: LD_ADDR_VAR 0 50
38418: PUSH
38419: LD_INT 2
38421: PUSH
38422: LD_INT 3
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: LD_INT 3
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38443: LD_ADDR_VAR 0 51
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: LD_INT 2
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 2
38461: NEG
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38474: LD_ADDR_VAR 0 52
38478: PUSH
38479: LD_INT 3
38481: NEG
38482: PUSH
38483: LD_INT 1
38485: NEG
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 3
38493: NEG
38494: PUSH
38495: LD_INT 2
38497: NEG
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38507: LD_ADDR_VAR 0 53
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: PUSH
38516: LD_INT 3
38518: NEG
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: LD_INT 3
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 1
38537: PUSH
38538: LD_INT 2
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: LIST
38550: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38551: LD_ADDR_VAR 0 54
38555: PUSH
38556: LD_INT 2
38558: PUSH
38559: LD_INT 1
38561: NEG
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 3
38569: PUSH
38570: LD_INT 0
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 3
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: LIST
38591: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38592: LD_ADDR_VAR 0 55
38596: PUSH
38597: LD_INT 3
38599: PUSH
38600: LD_INT 2
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 3
38609: PUSH
38610: LD_INT 3
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 2
38619: PUSH
38620: LD_INT 3
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: LIST
38631: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38632: LD_ADDR_VAR 0 56
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: LD_INT 3
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: LD_INT 3
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 1
38659: NEG
38660: PUSH
38661: LD_INT 2
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: LIST
38672: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38673: LD_ADDR_VAR 0 57
38677: PUSH
38678: LD_INT 2
38680: NEG
38681: PUSH
38682: LD_INT 1
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 3
38691: NEG
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 3
38702: NEG
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: LIST
38716: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38717: LD_ADDR_VAR 0 58
38721: PUSH
38722: LD_INT 2
38724: NEG
38725: PUSH
38726: LD_INT 3
38728: NEG
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 3
38736: NEG
38737: PUSH
38738: LD_INT 2
38740: NEG
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 3
38748: NEG
38749: PUSH
38750: LD_INT 3
38752: NEG
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: LIST
38762: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38763: LD_ADDR_VAR 0 59
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: LD_INT 2
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: LD_INT 2
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: LIST
38806: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38807: LD_ADDR_VAR 0 60
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 2
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: LIST
38847: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38848: LD_ADDR_VAR 0 61
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: LD_INT 1
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 2
38865: PUSH
38866: LD_INT 2
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: LD_INT 2
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: LIST
38887: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38888: LD_ADDR_VAR 0 62
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: LD_INT 2
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 0
38905: PUSH
38906: LD_INT 2
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: NEG
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: LIST
38928: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38929: LD_ADDR_VAR 0 63
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 2
38947: NEG
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 2
38958: NEG
38959: PUSH
38960: LD_INT 1
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: LIST
38972: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38973: LD_ADDR_VAR 0 64
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: LD_INT 2
38984: NEG
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: LD_INT 1
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 2
39004: NEG
39005: PUSH
39006: LD_INT 2
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: ST_TO_ADDR
// end ; 2 :
39019: GO 42285
39021: LD_INT 2
39023: DOUBLE
39024: EQUAL
39025: IFTRUE 39029
39027: GO 42284
39029: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39030: LD_ADDR_VAR 0 29
39034: PUSH
39035: LD_INT 4
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 4
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 5
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 5
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 4
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 3
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 3
39098: PUSH
39099: LD_INT 1
39101: NEG
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 3
39109: PUSH
39110: LD_INT 2
39112: NEG
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 5
39120: PUSH
39121: LD_INT 2
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 3
39130: PUSH
39131: LD_INT 3
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 3
39140: PUSH
39141: LD_INT 2
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 4
39150: PUSH
39151: LD_INT 3
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 4
39160: PUSH
39161: LD_INT 4
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 3
39170: PUSH
39171: LD_INT 4
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 2
39180: PUSH
39181: LD_INT 3
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 2
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 4
39200: PUSH
39201: LD_INT 2
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 2
39210: PUSH
39211: LD_INT 4
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: LD_INT 4
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: LD_INT 3
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 1
39240: PUSH
39241: LD_INT 4
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 1
39250: PUSH
39251: LD_INT 5
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: LD_INT 5
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: LD_INT 4
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 1
39281: NEG
39282: PUSH
39283: LD_INT 3
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 2
39292: PUSH
39293: LD_INT 5
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: LD_INT 3
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 3
39313: NEG
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 3
39324: NEG
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 2
39336: NEG
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 2
39347: NEG
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 3
39358: NEG
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 4
39369: NEG
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 4
39380: NEG
39381: PUSH
39382: LD_INT 1
39384: NEG
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 4
39392: NEG
39393: PUSH
39394: LD_INT 2
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: LD_INT 2
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 4
39415: NEG
39416: PUSH
39417: LD_INT 4
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 4
39427: NEG
39428: PUSH
39429: LD_INT 5
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 3
39439: NEG
39440: PUSH
39441: LD_INT 4
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 3
39451: NEG
39452: PUSH
39453: LD_INT 3
39455: NEG
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 4
39463: NEG
39464: PUSH
39465: LD_INT 3
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 5
39475: NEG
39476: PUSH
39477: LD_INT 4
39479: NEG
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 5
39487: NEG
39488: PUSH
39489: LD_INT 5
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 3
39499: NEG
39500: PUSH
39501: LD_INT 5
39503: NEG
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 5
39511: NEG
39512: PUSH
39513: LD_INT 3
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39568: LD_ADDR_VAR 0 30
39572: PUSH
39573: LD_INT 4
39575: PUSH
39576: LD_INT 4
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 4
39585: PUSH
39586: LD_INT 3
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 5
39595: PUSH
39596: LD_INT 4
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 5
39605: PUSH
39606: LD_INT 5
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 4
39615: PUSH
39616: LD_INT 5
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 3
39625: PUSH
39626: LD_INT 4
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 3
39635: PUSH
39636: LD_INT 3
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 5
39645: PUSH
39646: LD_INT 3
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 3
39655: PUSH
39656: LD_INT 5
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: LD_INT 3
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: LD_INT 2
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: LD_INT 3
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 1
39695: PUSH
39696: LD_INT 4
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: LD_INT 4
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 1
39715: NEG
39716: PUSH
39717: LD_INT 3
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: NEG
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: LD_INT 4
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 2
39747: NEG
39748: PUSH
39749: LD_INT 2
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 4
39758: NEG
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 4
39769: NEG
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 3
39781: NEG
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 3
39792: NEG
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 4
39803: NEG
39804: PUSH
39805: LD_INT 1
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 5
39814: NEG
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 5
39825: NEG
39826: PUSH
39827: LD_INT 1
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 5
39837: NEG
39838: PUSH
39839: LD_INT 2
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 3
39849: NEG
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 3
39860: NEG
39861: PUSH
39862: LD_INT 3
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 3
39872: NEG
39873: PUSH
39874: LD_INT 4
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: LD_INT 3
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 2
39896: NEG
39897: PUSH
39898: LD_INT 2
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 3
39908: NEG
39909: PUSH
39910: LD_INT 2
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 4
39920: NEG
39921: PUSH
39922: LD_INT 3
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 4
39932: NEG
39933: PUSH
39934: LD_INT 4
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: LD_INT 4
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 4
39956: NEG
39957: PUSH
39958: LD_INT 2
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: LD_INT 4
39971: NEG
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: LD_INT 5
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: LD_INT 4
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: PUSH
40002: LD_INT 3
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: LD_INT 3
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: LD_INT 4
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: LD_INT 5
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 3
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 2
40058: NEG
40059: PUSH
40060: LD_INT 5
40062: NEG
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40115: LD_ADDR_VAR 0 31
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: LD_INT 4
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 3
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: LD_INT 4
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: LD_INT 5
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: LD_INT 5
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: LD_INT 4
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: LD_INT 3
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: LD_INT 5
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: NEG
40205: PUSH
40206: LD_INT 3
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 3
40215: NEG
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 3
40226: NEG
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 2
40238: NEG
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: NEG
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 3
40260: NEG
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 4
40271: NEG
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 4
40282: NEG
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 4
40294: NEG
40295: PUSH
40296: LD_INT 2
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 2
40306: NEG
40307: PUSH
40308: LD_INT 2
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 4
40317: NEG
40318: PUSH
40319: LD_INT 4
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 4
40329: NEG
40330: PUSH
40331: LD_INT 5
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 3
40341: NEG
40342: PUSH
40343: LD_INT 4
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 3
40353: NEG
40354: PUSH
40355: LD_INT 3
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 4
40365: NEG
40366: PUSH
40367: LD_INT 3
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 5
40377: NEG
40378: PUSH
40379: LD_INT 4
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 5
40389: NEG
40390: PUSH
40391: LD_INT 5
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 3
40401: NEG
40402: PUSH
40403: LD_INT 5
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 5
40413: NEG
40414: PUSH
40415: LD_INT 3
40417: NEG
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: LD_INT 3
40428: NEG
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: LD_INT 4
40439: NEG
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 1
40447: PUSH
40448: LD_INT 3
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: LD_INT 2
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: LD_INT 2
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: LD_INT 3
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: LD_INT 4
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 2
40504: PUSH
40505: LD_INT 2
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 2
40515: NEG
40516: PUSH
40517: LD_INT 4
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 4
40527: PUSH
40528: LD_INT 0
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 4
40537: PUSH
40538: LD_INT 1
40540: NEG
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 5
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 5
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 4
40568: PUSH
40569: LD_INT 1
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 3
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 3
40588: PUSH
40589: LD_INT 1
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 3
40599: PUSH
40600: LD_INT 2
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 5
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40665: LD_ADDR_VAR 0 32
40669: PUSH
40670: LD_INT 4
40672: NEG
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 4
40683: NEG
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 3
40695: NEG
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 3
40706: NEG
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 4
40717: NEG
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 5
40728: NEG
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 5
40739: NEG
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 5
40751: NEG
40752: PUSH
40753: LD_INT 2
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 3
40763: NEG
40764: PUSH
40765: LD_INT 2
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 3
40774: NEG
40775: PUSH
40776: LD_INT 3
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 3
40786: NEG
40787: PUSH
40788: LD_INT 4
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 2
40798: NEG
40799: PUSH
40800: LD_INT 3
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 2
40810: NEG
40811: PUSH
40812: LD_INT 2
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 3
40822: NEG
40823: PUSH
40824: LD_INT 2
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 4
40834: NEG
40835: PUSH
40836: LD_INT 3
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 4
40846: NEG
40847: PUSH
40848: LD_INT 4
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 2
40858: NEG
40859: PUSH
40860: LD_INT 4
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 4
40870: NEG
40871: PUSH
40872: LD_INT 2
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: LD_INT 4
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: LD_INT 5
40896: NEG
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: LD_INT 4
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: LD_INT 3
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: LD_INT 3
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: LD_INT 4
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: LD_INT 5
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: LD_INT 3
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 2
40972: NEG
40973: PUSH
40974: LD_INT 5
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 3
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 3
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 4
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 4
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 3
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 2
41056: PUSH
41057: LD_INT 2
41059: NEG
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 4
41067: PUSH
41068: LD_INT 2
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 4
41077: PUSH
41078: LD_INT 4
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 4
41087: PUSH
41088: LD_INT 3
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 5
41097: PUSH
41098: LD_INT 4
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 5
41107: PUSH
41108: LD_INT 5
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 4
41117: PUSH
41118: LD_INT 5
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 3
41127: PUSH
41128: LD_INT 4
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 3
41137: PUSH
41138: LD_INT 3
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 5
41147: PUSH
41148: LD_INT 3
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 3
41157: PUSH
41158: LD_INT 5
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41212: LD_ADDR_VAR 0 33
41216: PUSH
41217: LD_INT 4
41219: NEG
41220: PUSH
41221: LD_INT 4
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 4
41231: NEG
41232: PUSH
41233: LD_INT 5
41235: NEG
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 3
41243: NEG
41244: PUSH
41245: LD_INT 4
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 3
41255: NEG
41256: PUSH
41257: LD_INT 3
41259: NEG
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 4
41267: NEG
41268: PUSH
41269: LD_INT 3
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 5
41279: NEG
41280: PUSH
41281: LD_INT 4
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 5
41291: NEG
41292: PUSH
41293: LD_INT 5
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 3
41303: NEG
41304: PUSH
41305: LD_INT 5
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 5
41315: NEG
41316: PUSH
41317: LD_INT 3
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: LD_INT 3
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: LD_INT 4
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: LD_INT 3
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: PUSH
41361: LD_INT 2
41363: NEG
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: LD_INT 2
41374: NEG
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: LD_INT 3
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 1
41394: NEG
41395: PUSH
41396: LD_INT 4
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 2
41406: PUSH
41407: LD_INT 2
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 2
41417: NEG
41418: PUSH
41419: LD_INT 4
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 4
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 4
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 5
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 5
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 4
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 3
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 3
41490: PUSH
41491: LD_INT 1
41493: NEG
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 3
41501: PUSH
41502: LD_INT 2
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 5
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 3
41522: PUSH
41523: LD_INT 3
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 3
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 4
41542: PUSH
41543: LD_INT 3
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 4
41552: PUSH
41553: LD_INT 4
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 3
41562: PUSH
41563: LD_INT 4
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 2
41572: PUSH
41573: LD_INT 3
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 2
41582: PUSH
41583: LD_INT 2
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 4
41592: PUSH
41593: LD_INT 2
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: LD_INT 4
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 4
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: LD_INT 3
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: LD_INT 4
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: LD_INT 5
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: LD_INT 5
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: LD_INT 4
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: LD_INT 3
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 2
41684: PUSH
41685: LD_INT 5
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 2
41694: NEG
41695: PUSH
41696: LD_INT 3
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41750: LD_ADDR_VAR 0 34
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: LD_INT 4
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 0
41768: PUSH
41769: LD_INT 5
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: LD_INT 4
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: LD_INT 3
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: LD_INT 3
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: LD_INT 4
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: LD_INT 5
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 2
41836: PUSH
41837: LD_INT 3
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 2
41847: NEG
41848: PUSH
41849: LD_INT 5
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 3
41859: PUSH
41860: LD_INT 0
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 3
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 4
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 4
41890: PUSH
41891: LD_INT 1
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 3
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 2
41931: PUSH
41932: LD_INT 2
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 4
41942: PUSH
41943: LD_INT 2
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 4
41952: PUSH
41953: LD_INT 4
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 4
41962: PUSH
41963: LD_INT 3
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 5
41972: PUSH
41973: LD_INT 4
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 5
41982: PUSH
41983: LD_INT 5
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 4
41992: PUSH
41993: LD_INT 5
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 3
42002: PUSH
42003: LD_INT 4
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 3
42012: PUSH
42013: LD_INT 3
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 5
42022: PUSH
42023: LD_INT 3
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 3
42032: PUSH
42033: LD_INT 5
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: LD_INT 3
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 2
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: LD_INT 3
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: LD_INT 4
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: LD_INT 4
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: NEG
42093: PUSH
42094: LD_INT 3
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: LD_INT 2
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 2
42114: PUSH
42115: LD_INT 4
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 4
42135: NEG
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 4
42146: NEG
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 3
42158: NEG
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 3
42169: NEG
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 4
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 5
42191: NEG
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 5
42202: NEG
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 5
42214: NEG
42215: PUSH
42216: LD_INT 2
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 3
42226: NEG
42227: PUSH
42228: LD_INT 2
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: ST_TO_ADDR
// end ; end ;
42282: GO 42285
42284: POP
// case btype of b_depot , b_warehouse :
42285: LD_VAR 0 1
42289: PUSH
42290: LD_INT 0
42292: DOUBLE
42293: EQUAL
42294: IFTRUE 42304
42296: LD_INT 1
42298: DOUBLE
42299: EQUAL
42300: IFTRUE 42304
42302: GO 42505
42304: POP
// case nation of nation_american :
42305: LD_VAR 0 5
42309: PUSH
42310: LD_INT 1
42312: DOUBLE
42313: EQUAL
42314: IFTRUE 42318
42316: GO 42374
42318: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42319: LD_ADDR_VAR 0 9
42323: PUSH
42324: LD_VAR 0 11
42328: PUSH
42329: LD_VAR 0 12
42333: PUSH
42334: LD_VAR 0 13
42338: PUSH
42339: LD_VAR 0 14
42343: PUSH
42344: LD_VAR 0 15
42348: PUSH
42349: LD_VAR 0 16
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: PUSH
42362: LD_VAR 0 4
42366: PUSH
42367: LD_INT 1
42369: PLUS
42370: ARRAY
42371: ST_TO_ADDR
42372: GO 42503
42374: LD_INT 2
42376: DOUBLE
42377: EQUAL
42378: IFTRUE 42382
42380: GO 42438
42382: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42383: LD_ADDR_VAR 0 9
42387: PUSH
42388: LD_VAR 0 17
42392: PUSH
42393: LD_VAR 0 18
42397: PUSH
42398: LD_VAR 0 19
42402: PUSH
42403: LD_VAR 0 20
42407: PUSH
42408: LD_VAR 0 21
42412: PUSH
42413: LD_VAR 0 22
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: PUSH
42426: LD_VAR 0 4
42430: PUSH
42431: LD_INT 1
42433: PLUS
42434: ARRAY
42435: ST_TO_ADDR
42436: GO 42503
42438: LD_INT 3
42440: DOUBLE
42441: EQUAL
42442: IFTRUE 42446
42444: GO 42502
42446: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42447: LD_ADDR_VAR 0 9
42451: PUSH
42452: LD_VAR 0 23
42456: PUSH
42457: LD_VAR 0 24
42461: PUSH
42462: LD_VAR 0 25
42466: PUSH
42467: LD_VAR 0 26
42471: PUSH
42472: LD_VAR 0 27
42476: PUSH
42477: LD_VAR 0 28
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: PUSH
42490: LD_VAR 0 4
42494: PUSH
42495: LD_INT 1
42497: PLUS
42498: ARRAY
42499: ST_TO_ADDR
42500: GO 42503
42502: POP
42503: GO 43058
42505: LD_INT 2
42507: DOUBLE
42508: EQUAL
42509: IFTRUE 42519
42511: LD_INT 3
42513: DOUBLE
42514: EQUAL
42515: IFTRUE 42519
42517: GO 42575
42519: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42520: LD_ADDR_VAR 0 9
42524: PUSH
42525: LD_VAR 0 29
42529: PUSH
42530: LD_VAR 0 30
42534: PUSH
42535: LD_VAR 0 31
42539: PUSH
42540: LD_VAR 0 32
42544: PUSH
42545: LD_VAR 0 33
42549: PUSH
42550: LD_VAR 0 34
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: PUSH
42563: LD_VAR 0 4
42567: PUSH
42568: LD_INT 1
42570: PLUS
42571: ARRAY
42572: ST_TO_ADDR
42573: GO 43058
42575: LD_INT 16
42577: DOUBLE
42578: EQUAL
42579: IFTRUE 42637
42581: LD_INT 17
42583: DOUBLE
42584: EQUAL
42585: IFTRUE 42637
42587: LD_INT 18
42589: DOUBLE
42590: EQUAL
42591: IFTRUE 42637
42593: LD_INT 19
42595: DOUBLE
42596: EQUAL
42597: IFTRUE 42637
42599: LD_INT 22
42601: DOUBLE
42602: EQUAL
42603: IFTRUE 42637
42605: LD_INT 20
42607: DOUBLE
42608: EQUAL
42609: IFTRUE 42637
42611: LD_INT 21
42613: DOUBLE
42614: EQUAL
42615: IFTRUE 42637
42617: LD_INT 23
42619: DOUBLE
42620: EQUAL
42621: IFTRUE 42637
42623: LD_INT 24
42625: DOUBLE
42626: EQUAL
42627: IFTRUE 42637
42629: LD_INT 25
42631: DOUBLE
42632: EQUAL
42633: IFTRUE 42637
42635: GO 42693
42637: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42638: LD_ADDR_VAR 0 9
42642: PUSH
42643: LD_VAR 0 35
42647: PUSH
42648: LD_VAR 0 36
42652: PUSH
42653: LD_VAR 0 37
42657: PUSH
42658: LD_VAR 0 38
42662: PUSH
42663: LD_VAR 0 39
42667: PUSH
42668: LD_VAR 0 40
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: PUSH
42681: LD_VAR 0 4
42685: PUSH
42686: LD_INT 1
42688: PLUS
42689: ARRAY
42690: ST_TO_ADDR
42691: GO 43058
42693: LD_INT 6
42695: DOUBLE
42696: EQUAL
42697: IFTRUE 42749
42699: LD_INT 7
42701: DOUBLE
42702: EQUAL
42703: IFTRUE 42749
42705: LD_INT 8
42707: DOUBLE
42708: EQUAL
42709: IFTRUE 42749
42711: LD_INT 13
42713: DOUBLE
42714: EQUAL
42715: IFTRUE 42749
42717: LD_INT 12
42719: DOUBLE
42720: EQUAL
42721: IFTRUE 42749
42723: LD_INT 15
42725: DOUBLE
42726: EQUAL
42727: IFTRUE 42749
42729: LD_INT 11
42731: DOUBLE
42732: EQUAL
42733: IFTRUE 42749
42735: LD_INT 14
42737: DOUBLE
42738: EQUAL
42739: IFTRUE 42749
42741: LD_INT 10
42743: DOUBLE
42744: EQUAL
42745: IFTRUE 42749
42747: GO 42805
42749: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42750: LD_ADDR_VAR 0 9
42754: PUSH
42755: LD_VAR 0 41
42759: PUSH
42760: LD_VAR 0 42
42764: PUSH
42765: LD_VAR 0 43
42769: PUSH
42770: LD_VAR 0 44
42774: PUSH
42775: LD_VAR 0 45
42779: PUSH
42780: LD_VAR 0 46
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: PUSH
42793: LD_VAR 0 4
42797: PUSH
42798: LD_INT 1
42800: PLUS
42801: ARRAY
42802: ST_TO_ADDR
42803: GO 43058
42805: LD_INT 36
42807: DOUBLE
42808: EQUAL
42809: IFTRUE 42813
42811: GO 42869
42813: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42814: LD_ADDR_VAR 0 9
42818: PUSH
42819: LD_VAR 0 47
42823: PUSH
42824: LD_VAR 0 48
42828: PUSH
42829: LD_VAR 0 49
42833: PUSH
42834: LD_VAR 0 50
42838: PUSH
42839: LD_VAR 0 51
42843: PUSH
42844: LD_VAR 0 52
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: PUSH
42857: LD_VAR 0 4
42861: PUSH
42862: LD_INT 1
42864: PLUS
42865: ARRAY
42866: ST_TO_ADDR
42867: GO 43058
42869: LD_INT 4
42871: DOUBLE
42872: EQUAL
42873: IFTRUE 42895
42875: LD_INT 5
42877: DOUBLE
42878: EQUAL
42879: IFTRUE 42895
42881: LD_INT 34
42883: DOUBLE
42884: EQUAL
42885: IFTRUE 42895
42887: LD_INT 37
42889: DOUBLE
42890: EQUAL
42891: IFTRUE 42895
42893: GO 42951
42895: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42896: LD_ADDR_VAR 0 9
42900: PUSH
42901: LD_VAR 0 53
42905: PUSH
42906: LD_VAR 0 54
42910: PUSH
42911: LD_VAR 0 55
42915: PUSH
42916: LD_VAR 0 56
42920: PUSH
42921: LD_VAR 0 57
42925: PUSH
42926: LD_VAR 0 58
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: PUSH
42939: LD_VAR 0 4
42943: PUSH
42944: LD_INT 1
42946: PLUS
42947: ARRAY
42948: ST_TO_ADDR
42949: GO 43058
42951: LD_INT 31
42953: DOUBLE
42954: EQUAL
42955: IFTRUE 43001
42957: LD_INT 32
42959: DOUBLE
42960: EQUAL
42961: IFTRUE 43001
42963: LD_INT 33
42965: DOUBLE
42966: EQUAL
42967: IFTRUE 43001
42969: LD_INT 27
42971: DOUBLE
42972: EQUAL
42973: IFTRUE 43001
42975: LD_INT 26
42977: DOUBLE
42978: EQUAL
42979: IFTRUE 43001
42981: LD_INT 28
42983: DOUBLE
42984: EQUAL
42985: IFTRUE 43001
42987: LD_INT 29
42989: DOUBLE
42990: EQUAL
42991: IFTRUE 43001
42993: LD_INT 30
42995: DOUBLE
42996: EQUAL
42997: IFTRUE 43001
42999: GO 43057
43001: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43002: LD_ADDR_VAR 0 9
43006: PUSH
43007: LD_VAR 0 59
43011: PUSH
43012: LD_VAR 0 60
43016: PUSH
43017: LD_VAR 0 61
43021: PUSH
43022: LD_VAR 0 62
43026: PUSH
43027: LD_VAR 0 63
43031: PUSH
43032: LD_VAR 0 64
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: PUSH
43045: LD_VAR 0 4
43049: PUSH
43050: LD_INT 1
43052: PLUS
43053: ARRAY
43054: ST_TO_ADDR
43055: GO 43058
43057: POP
// temp_list2 = [ ] ;
43058: LD_ADDR_VAR 0 10
43062: PUSH
43063: EMPTY
43064: ST_TO_ADDR
// for i in temp_list do
43065: LD_ADDR_VAR 0 8
43069: PUSH
43070: LD_VAR 0 9
43074: PUSH
43075: FOR_IN
43076: IFFALSE 43128
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43078: LD_ADDR_VAR 0 10
43082: PUSH
43083: LD_VAR 0 10
43087: PUSH
43088: LD_VAR 0 8
43092: PUSH
43093: LD_INT 1
43095: ARRAY
43096: PUSH
43097: LD_VAR 0 2
43101: PLUS
43102: PUSH
43103: LD_VAR 0 8
43107: PUSH
43108: LD_INT 2
43110: ARRAY
43111: PUSH
43112: LD_VAR 0 3
43116: PLUS
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: EMPTY
43123: LIST
43124: ADD
43125: ST_TO_ADDR
43126: GO 43075
43128: POP
43129: POP
// result = temp_list2 ;
43130: LD_ADDR_VAR 0 7
43134: PUSH
43135: LD_VAR 0 10
43139: ST_TO_ADDR
// end ;
43140: LD_VAR 0 7
43144: RET
// export function EnemyInRange ( unit , dist ) ; begin
43145: LD_INT 0
43147: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43148: LD_ADDR_VAR 0 3
43152: PUSH
43153: LD_VAR 0 1
43157: PPUSH
43158: CALL_OW 255
43162: PPUSH
43163: LD_VAR 0 1
43167: PPUSH
43168: CALL_OW 250
43172: PPUSH
43173: LD_VAR 0 1
43177: PPUSH
43178: CALL_OW 251
43182: PPUSH
43183: LD_VAR 0 2
43187: PPUSH
43188: CALL 16402 0 4
43192: PUSH
43193: LD_INT 4
43195: ARRAY
43196: ST_TO_ADDR
// end ;
43197: LD_VAR 0 3
43201: RET
// export function PlayerSeeMe ( unit ) ; begin
43202: LD_INT 0
43204: PPUSH
// result := See ( your_side , unit ) ;
43205: LD_ADDR_VAR 0 2
43209: PUSH
43210: LD_OWVAR 2
43214: PPUSH
43215: LD_VAR 0 1
43219: PPUSH
43220: CALL_OW 292
43224: ST_TO_ADDR
// end ;
43225: LD_VAR 0 2
43229: RET
// export function ReverseDir ( unit ) ; begin
43230: LD_INT 0
43232: PPUSH
// if not unit then
43233: LD_VAR 0 1
43237: NOT
43238: IFFALSE 43242
// exit ;
43240: GO 43265
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43242: LD_ADDR_VAR 0 2
43246: PUSH
43247: LD_VAR 0 1
43251: PPUSH
43252: CALL_OW 254
43256: PUSH
43257: LD_INT 3
43259: PLUS
43260: PUSH
43261: LD_INT 6
43263: MOD
43264: ST_TO_ADDR
// end ;
43265: LD_VAR 0 2
43269: RET
// export function ReverseArray ( array ) ; var i ; begin
43270: LD_INT 0
43272: PPUSH
43273: PPUSH
// if not array then
43274: LD_VAR 0 1
43278: NOT
43279: IFFALSE 43283
// exit ;
43281: GO 43338
// result := [ ] ;
43283: LD_ADDR_VAR 0 2
43287: PUSH
43288: EMPTY
43289: ST_TO_ADDR
// for i := array downto 1 do
43290: LD_ADDR_VAR 0 3
43294: PUSH
43295: DOUBLE
43296: LD_VAR 0 1
43300: INC
43301: ST_TO_ADDR
43302: LD_INT 1
43304: PUSH
43305: FOR_DOWNTO
43306: IFFALSE 43336
// result := Join ( result , array [ i ] ) ;
43308: LD_ADDR_VAR 0 2
43312: PUSH
43313: LD_VAR 0 2
43317: PPUSH
43318: LD_VAR 0 1
43322: PUSH
43323: LD_VAR 0 3
43327: ARRAY
43328: PPUSH
43329: CALL 48180 0 2
43333: ST_TO_ADDR
43334: GO 43305
43336: POP
43337: POP
// end ;
43338: LD_VAR 0 2
43342: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43343: LD_INT 0
43345: PPUSH
43346: PPUSH
43347: PPUSH
43348: PPUSH
43349: PPUSH
43350: PPUSH
// if not unit or not hexes then
43351: LD_VAR 0 1
43355: NOT
43356: IFTRUE 43365
43358: PUSH
43359: LD_VAR 0 2
43363: NOT
43364: OR
43365: IFFALSE 43369
// exit ;
43367: GO 43492
// dist := 9999 ;
43369: LD_ADDR_VAR 0 5
43373: PUSH
43374: LD_INT 9999
43376: ST_TO_ADDR
// for i = 1 to hexes do
43377: LD_ADDR_VAR 0 4
43381: PUSH
43382: DOUBLE
43383: LD_INT 1
43385: DEC
43386: ST_TO_ADDR
43387: LD_VAR 0 2
43391: PUSH
43392: FOR_TO
43393: IFFALSE 43480
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43395: LD_ADDR_VAR 0 6
43399: PUSH
43400: LD_VAR 0 1
43404: PPUSH
43405: LD_VAR 0 2
43409: PUSH
43410: LD_VAR 0 4
43414: ARRAY
43415: PUSH
43416: LD_INT 1
43418: ARRAY
43419: PPUSH
43420: LD_VAR 0 2
43424: PUSH
43425: LD_VAR 0 4
43429: ARRAY
43430: PUSH
43431: LD_INT 2
43433: ARRAY
43434: PPUSH
43435: CALL_OW 297
43439: ST_TO_ADDR
// if tdist < dist then
43440: LD_VAR 0 6
43444: PUSH
43445: LD_VAR 0 5
43449: LESS
43450: IFFALSE 43478
// begin hex := hexes [ i ] ;
43452: LD_ADDR_VAR 0 8
43456: PUSH
43457: LD_VAR 0 2
43461: PUSH
43462: LD_VAR 0 4
43466: ARRAY
43467: ST_TO_ADDR
// dist := tdist ;
43468: LD_ADDR_VAR 0 5
43472: PUSH
43473: LD_VAR 0 6
43477: ST_TO_ADDR
// end ; end ;
43478: GO 43392
43480: POP
43481: POP
// result := hex ;
43482: LD_ADDR_VAR 0 3
43486: PUSH
43487: LD_VAR 0 8
43491: ST_TO_ADDR
// end ;
43492: LD_VAR 0 3
43496: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43497: LD_INT 0
43499: PPUSH
43500: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43501: LD_VAR 0 1
43505: NOT
43506: IFTRUE 43545
43508: PUSH
43509: LD_VAR 0 1
43513: PUSH
43514: LD_INT 21
43516: PUSH
43517: LD_INT 2
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 23
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PPUSH
43538: CALL_OW 69
43542: IN
43543: NOT
43544: OR
43545: IFFALSE 43549
// exit ;
43547: GO 43596
// for i = 1 to 3 do
43549: LD_ADDR_VAR 0 3
43553: PUSH
43554: DOUBLE
43555: LD_INT 1
43557: DEC
43558: ST_TO_ADDR
43559: LD_INT 3
43561: PUSH
43562: FOR_TO
43563: IFFALSE 43594
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43565: LD_VAR 0 1
43569: PPUSH
43570: CALL_OW 250
43574: PPUSH
43575: LD_VAR 0 1
43579: PPUSH
43580: CALL_OW 251
43584: PPUSH
43585: LD_INT 1
43587: PPUSH
43588: CALL_OW 453
43592: GO 43562
43594: POP
43595: POP
// end ;
43596: LD_VAR 0 2
43600: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43601: LD_INT 0
43603: PPUSH
43604: PPUSH
43605: PPUSH
43606: PPUSH
43607: PPUSH
43608: PPUSH
// if not unit or not enemy_unit then
43609: LD_VAR 0 1
43613: NOT
43614: IFTRUE 43623
43616: PUSH
43617: LD_VAR 0 2
43621: NOT
43622: OR
43623: IFFALSE 43627
// exit ;
43625: GO 44098
// if GetLives ( i ) < 250 then
43627: LD_VAR 0 4
43631: PPUSH
43632: CALL_OW 256
43636: PUSH
43637: LD_INT 250
43639: LESS
43640: IFFALSE 43653
// begin ComAutodestruct ( i ) ;
43642: LD_VAR 0 4
43646: PPUSH
43647: CALL 43497 0 1
// exit ;
43651: GO 44098
// end ; x := GetX ( enemy_unit ) ;
43653: LD_ADDR_VAR 0 7
43657: PUSH
43658: LD_VAR 0 2
43662: PPUSH
43663: CALL_OW 250
43667: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43668: LD_ADDR_VAR 0 8
43672: PUSH
43673: LD_VAR 0 2
43677: PPUSH
43678: CALL_OW 251
43682: ST_TO_ADDR
// if not x or not y then
43683: LD_VAR 0 7
43687: NOT
43688: IFTRUE 43697
43690: PUSH
43691: LD_VAR 0 8
43695: NOT
43696: OR
43697: IFFALSE 43701
// exit ;
43699: GO 44098
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43701: LD_ADDR_VAR 0 6
43705: PUSH
43706: LD_VAR 0 7
43710: PPUSH
43711: LD_INT 0
43713: PPUSH
43714: LD_INT 4
43716: PPUSH
43717: CALL_OW 272
43721: PUSH
43722: LD_VAR 0 8
43726: PPUSH
43727: LD_INT 0
43729: PPUSH
43730: LD_INT 4
43732: PPUSH
43733: CALL_OW 273
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_VAR 0 7
43746: PPUSH
43747: LD_INT 1
43749: PPUSH
43750: LD_INT 4
43752: PPUSH
43753: CALL_OW 272
43757: PUSH
43758: LD_VAR 0 8
43762: PPUSH
43763: LD_INT 1
43765: PPUSH
43766: LD_INT 4
43768: PPUSH
43769: CALL_OW 273
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_VAR 0 7
43782: PPUSH
43783: LD_INT 2
43785: PPUSH
43786: LD_INT 4
43788: PPUSH
43789: CALL_OW 272
43793: PUSH
43794: LD_VAR 0 8
43798: PPUSH
43799: LD_INT 2
43801: PPUSH
43802: LD_INT 4
43804: PPUSH
43805: CALL_OW 273
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_VAR 0 7
43818: PPUSH
43819: LD_INT 3
43821: PPUSH
43822: LD_INT 4
43824: PPUSH
43825: CALL_OW 272
43829: PUSH
43830: LD_VAR 0 8
43834: PPUSH
43835: LD_INT 3
43837: PPUSH
43838: LD_INT 4
43840: PPUSH
43841: CALL_OW 273
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_VAR 0 7
43854: PPUSH
43855: LD_INT 4
43857: PPUSH
43858: LD_INT 4
43860: PPUSH
43861: CALL_OW 272
43865: PUSH
43866: LD_VAR 0 8
43870: PPUSH
43871: LD_INT 4
43873: PPUSH
43874: LD_INT 4
43876: PPUSH
43877: CALL_OW 273
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_VAR 0 7
43890: PPUSH
43891: LD_INT 5
43893: PPUSH
43894: LD_INT 4
43896: PPUSH
43897: CALL_OW 272
43901: PUSH
43902: LD_VAR 0 8
43906: PPUSH
43907: LD_INT 5
43909: PPUSH
43910: LD_INT 4
43912: PPUSH
43913: CALL_OW 273
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: ST_TO_ADDR
// for i = tmp downto 1 do
43930: LD_ADDR_VAR 0 4
43934: PUSH
43935: DOUBLE
43936: LD_VAR 0 6
43940: INC
43941: ST_TO_ADDR
43942: LD_INT 1
43944: PUSH
43945: FOR_DOWNTO
43946: IFFALSE 44049
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43948: LD_VAR 0 6
43952: PUSH
43953: LD_VAR 0 4
43957: ARRAY
43958: PUSH
43959: LD_INT 1
43961: ARRAY
43962: PPUSH
43963: LD_VAR 0 6
43967: PUSH
43968: LD_VAR 0 4
43972: ARRAY
43973: PUSH
43974: LD_INT 2
43976: ARRAY
43977: PPUSH
43978: CALL_OW 488
43982: NOT
43983: IFTRUE 44025
43985: PUSH
43986: LD_VAR 0 6
43990: PUSH
43991: LD_VAR 0 4
43995: ARRAY
43996: PUSH
43997: LD_INT 1
43999: ARRAY
44000: PPUSH
44001: LD_VAR 0 6
44005: PUSH
44006: LD_VAR 0 4
44010: ARRAY
44011: PUSH
44012: LD_INT 2
44014: ARRAY
44015: PPUSH
44016: CALL_OW 428
44020: PUSH
44021: LD_INT 0
44023: NONEQUAL
44024: OR
44025: IFFALSE 44047
// tmp := Delete ( tmp , i ) ;
44027: LD_ADDR_VAR 0 6
44031: PUSH
44032: LD_VAR 0 6
44036: PPUSH
44037: LD_VAR 0 4
44041: PPUSH
44042: CALL_OW 3
44046: ST_TO_ADDR
44047: GO 43945
44049: POP
44050: POP
// j := GetClosestHex ( unit , tmp ) ;
44051: LD_ADDR_VAR 0 5
44055: PUSH
44056: LD_VAR 0 1
44060: PPUSH
44061: LD_VAR 0 6
44065: PPUSH
44066: CALL 43343 0 2
44070: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44071: LD_VAR 0 1
44075: PPUSH
44076: LD_VAR 0 5
44080: PUSH
44081: LD_INT 1
44083: ARRAY
44084: PPUSH
44085: LD_VAR 0 5
44089: PUSH
44090: LD_INT 2
44092: ARRAY
44093: PPUSH
44094: CALL_OW 111
// end ;
44098: LD_VAR 0 3
44102: RET
// export function PrepareApemanSoldier ( ) ; begin
44103: LD_INT 0
44105: PPUSH
// uc_nation := 0 ;
44106: LD_ADDR_OWVAR 21
44110: PUSH
44111: LD_INT 0
44113: ST_TO_ADDR
// hc_sex := sex_male ;
44114: LD_ADDR_OWVAR 27
44118: PUSH
44119: LD_INT 1
44121: ST_TO_ADDR
// hc_name :=  ;
44122: LD_ADDR_OWVAR 26
44126: PUSH
44127: LD_STRING 
44129: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44130: LD_ADDR_OWVAR 28
44134: PUSH
44135: LD_INT 15
44137: ST_TO_ADDR
// hc_gallery :=  ;
44138: LD_ADDR_OWVAR 33
44142: PUSH
44143: LD_STRING 
44145: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44146: LD_ADDR_OWVAR 31
44150: PUSH
44151: LD_INT 0
44153: PPUSH
44154: LD_INT 3
44156: PPUSH
44157: CALL_OW 12
44161: PUSH
44162: LD_INT 0
44164: PPUSH
44165: LD_INT 3
44167: PPUSH
44168: CALL_OW 12
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44185: LD_ADDR_OWVAR 29
44189: PUSH
44190: LD_INT 12
44192: PUSH
44193: LD_INT 12
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: ST_TO_ADDR
// end ;
44200: LD_VAR 0 1
44204: RET
// export function PrepareApemanEngineer ( ) ; begin
44205: LD_INT 0
44207: PPUSH
// uc_nation := 0 ;
44208: LD_ADDR_OWVAR 21
44212: PUSH
44213: LD_INT 0
44215: ST_TO_ADDR
// hc_sex := sex_male ;
44216: LD_ADDR_OWVAR 27
44220: PUSH
44221: LD_INT 1
44223: ST_TO_ADDR
// hc_name :=  ;
44224: LD_ADDR_OWVAR 26
44228: PUSH
44229: LD_STRING 
44231: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44232: LD_ADDR_OWVAR 28
44236: PUSH
44237: LD_INT 16
44239: ST_TO_ADDR
// hc_gallery :=  ;
44240: LD_ADDR_OWVAR 33
44244: PUSH
44245: LD_STRING 
44247: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44248: LD_ADDR_OWVAR 31
44252: PUSH
44253: LD_INT 0
44255: PPUSH
44256: LD_INT 3
44258: PPUSH
44259: CALL_OW 12
44263: PUSH
44264: LD_INT 0
44266: PPUSH
44267: LD_INT 3
44269: PPUSH
44270: CALL_OW 12
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44287: LD_ADDR_OWVAR 29
44291: PUSH
44292: LD_INT 12
44294: PUSH
44295: LD_INT 12
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: ST_TO_ADDR
// end ;
44302: LD_VAR 0 1
44306: RET
// export function PrepareApeman ( agressivity ) ; begin
44307: LD_INT 0
44309: PPUSH
// uc_side := 0 ;
44310: LD_ADDR_OWVAR 20
44314: PUSH
44315: LD_INT 0
44317: ST_TO_ADDR
// uc_nation := 0 ;
44318: LD_ADDR_OWVAR 21
44322: PUSH
44323: LD_INT 0
44325: ST_TO_ADDR
// hc_sex := sex_male ;
44326: LD_ADDR_OWVAR 27
44330: PUSH
44331: LD_INT 1
44333: ST_TO_ADDR
// hc_class := class_apeman ;
44334: LD_ADDR_OWVAR 28
44338: PUSH
44339: LD_INT 12
44341: ST_TO_ADDR
// hc_gallery :=  ;
44342: LD_ADDR_OWVAR 33
44346: PUSH
44347: LD_STRING 
44349: ST_TO_ADDR
// hc_name :=  ;
44350: LD_ADDR_OWVAR 26
44354: PUSH
44355: LD_STRING 
44357: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44358: LD_ADDR_OWVAR 29
44362: PUSH
44363: LD_INT 12
44365: PUSH
44366: LD_INT 12
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: ST_TO_ADDR
// if agressivity = 0 then
44373: LD_VAR 0 1
44377: PUSH
44378: LD_INT 0
44380: EQUAL
44381: IFFALSE 44393
// hc_agressivity := 0 else
44383: LD_ADDR_OWVAR 35
44387: PUSH
44388: LD_INT 0
44390: ST_TO_ADDR
44391: GO 44414
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44393: LD_ADDR_OWVAR 35
44397: PUSH
44398: LD_VAR 0 1
44402: NEG
44403: PPUSH
44404: LD_VAR 0 1
44408: PPUSH
44409: CALL_OW 12
44413: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44414: LD_ADDR_OWVAR 31
44418: PUSH
44419: LD_INT 0
44421: PPUSH
44422: LD_INT 3
44424: PPUSH
44425: CALL_OW 12
44429: PUSH
44430: LD_INT 0
44432: PPUSH
44433: LD_INT 3
44435: PPUSH
44436: CALL_OW 12
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: ST_TO_ADDR
// end ;
44453: LD_VAR 0 2
44457: RET
// export function PrepareTiger ( agressivity ) ; begin
44458: LD_INT 0
44460: PPUSH
// uc_side := 0 ;
44461: LD_ADDR_OWVAR 20
44465: PUSH
44466: LD_INT 0
44468: ST_TO_ADDR
// uc_nation := 0 ;
44469: LD_ADDR_OWVAR 21
44473: PUSH
44474: LD_INT 0
44476: ST_TO_ADDR
// InitHc ;
44477: CALL_OW 19
// hc_class := class_tiger ;
44481: LD_ADDR_OWVAR 28
44485: PUSH
44486: LD_INT 14
44488: ST_TO_ADDR
// hc_gallery :=  ;
44489: LD_ADDR_OWVAR 33
44493: PUSH
44494: LD_STRING 
44496: ST_TO_ADDR
// hc_name :=  ;
44497: LD_ADDR_OWVAR 26
44501: PUSH
44502: LD_STRING 
44504: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44505: LD_ADDR_OWVAR 35
44509: PUSH
44510: LD_VAR 0 1
44514: NEG
44515: PPUSH
44516: LD_VAR 0 1
44520: PPUSH
44521: CALL_OW 12
44525: ST_TO_ADDR
// end ;
44526: LD_VAR 0 2
44530: RET
// export function PrepareEnchidna ( ) ; begin
44531: LD_INT 0
44533: PPUSH
// uc_side := 0 ;
44534: LD_ADDR_OWVAR 20
44538: PUSH
44539: LD_INT 0
44541: ST_TO_ADDR
// uc_nation := 0 ;
44542: LD_ADDR_OWVAR 21
44546: PUSH
44547: LD_INT 0
44549: ST_TO_ADDR
// InitHc ;
44550: CALL_OW 19
// hc_class := class_baggie ;
44554: LD_ADDR_OWVAR 28
44558: PUSH
44559: LD_INT 13
44561: ST_TO_ADDR
// hc_gallery :=  ;
44562: LD_ADDR_OWVAR 33
44566: PUSH
44567: LD_STRING 
44569: ST_TO_ADDR
// hc_name :=  ;
44570: LD_ADDR_OWVAR 26
44574: PUSH
44575: LD_STRING 
44577: ST_TO_ADDR
// end ;
44578: LD_VAR 0 1
44582: RET
// export function PrepareFrog ( ) ; begin
44583: LD_INT 0
44585: PPUSH
// uc_side := 0 ;
44586: LD_ADDR_OWVAR 20
44590: PUSH
44591: LD_INT 0
44593: ST_TO_ADDR
// uc_nation := 0 ;
44594: LD_ADDR_OWVAR 21
44598: PUSH
44599: LD_INT 0
44601: ST_TO_ADDR
// InitHc ;
44602: CALL_OW 19
// hc_class := class_frog ;
44606: LD_ADDR_OWVAR 28
44610: PUSH
44611: LD_INT 19
44613: ST_TO_ADDR
// hc_gallery :=  ;
44614: LD_ADDR_OWVAR 33
44618: PUSH
44619: LD_STRING 
44621: ST_TO_ADDR
// hc_name :=  ;
44622: LD_ADDR_OWVAR 26
44626: PUSH
44627: LD_STRING 
44629: ST_TO_ADDR
// end ;
44630: LD_VAR 0 1
44634: RET
// export function PrepareFish ( ) ; begin
44635: LD_INT 0
44637: PPUSH
// uc_side := 0 ;
44638: LD_ADDR_OWVAR 20
44642: PUSH
44643: LD_INT 0
44645: ST_TO_ADDR
// uc_nation := 0 ;
44646: LD_ADDR_OWVAR 21
44650: PUSH
44651: LD_INT 0
44653: ST_TO_ADDR
// InitHc ;
44654: CALL_OW 19
// hc_class := class_fish ;
44658: LD_ADDR_OWVAR 28
44662: PUSH
44663: LD_INT 20
44665: ST_TO_ADDR
// hc_gallery :=  ;
44666: LD_ADDR_OWVAR 33
44670: PUSH
44671: LD_STRING 
44673: ST_TO_ADDR
// hc_name :=  ;
44674: LD_ADDR_OWVAR 26
44678: PUSH
44679: LD_STRING 
44681: ST_TO_ADDR
// end ;
44682: LD_VAR 0 1
44686: RET
// export function PrepareBird ( ) ; begin
44687: LD_INT 0
44689: PPUSH
// uc_side := 0 ;
44690: LD_ADDR_OWVAR 20
44694: PUSH
44695: LD_INT 0
44697: ST_TO_ADDR
// uc_nation := 0 ;
44698: LD_ADDR_OWVAR 21
44702: PUSH
44703: LD_INT 0
44705: ST_TO_ADDR
// InitHc ;
44706: CALL_OW 19
// hc_class := class_phororhacos ;
44710: LD_ADDR_OWVAR 28
44714: PUSH
44715: LD_INT 18
44717: ST_TO_ADDR
// hc_gallery :=  ;
44718: LD_ADDR_OWVAR 33
44722: PUSH
44723: LD_STRING 
44725: ST_TO_ADDR
// hc_name :=  ;
44726: LD_ADDR_OWVAR 26
44730: PUSH
44731: LD_STRING 
44733: ST_TO_ADDR
// end ;
44734: LD_VAR 0 1
44738: RET
// export function PrepareHorse ( ) ; begin
44739: LD_INT 0
44741: PPUSH
// uc_side := 0 ;
44742: LD_ADDR_OWVAR 20
44746: PUSH
44747: LD_INT 0
44749: ST_TO_ADDR
// uc_nation := 0 ;
44750: LD_ADDR_OWVAR 21
44754: PUSH
44755: LD_INT 0
44757: ST_TO_ADDR
// InitHc ;
44758: CALL_OW 19
// hc_class := class_horse ;
44762: LD_ADDR_OWVAR 28
44766: PUSH
44767: LD_INT 21
44769: ST_TO_ADDR
// hc_gallery :=  ;
44770: LD_ADDR_OWVAR 33
44774: PUSH
44775: LD_STRING 
44777: ST_TO_ADDR
// hc_name :=  ;
44778: LD_ADDR_OWVAR 26
44782: PUSH
44783: LD_STRING 
44785: ST_TO_ADDR
// end ;
44786: LD_VAR 0 1
44790: RET
// export function PrepareMastodont ( ) ; begin
44791: LD_INT 0
44793: PPUSH
// uc_side := 0 ;
44794: LD_ADDR_OWVAR 20
44798: PUSH
44799: LD_INT 0
44801: ST_TO_ADDR
// uc_nation := 0 ;
44802: LD_ADDR_OWVAR 21
44806: PUSH
44807: LD_INT 0
44809: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44810: LD_ADDR_OWVAR 37
44814: PUSH
44815: LD_INT 31
44817: ST_TO_ADDR
// vc_control := control_rider ;
44818: LD_ADDR_OWVAR 38
44822: PUSH
44823: LD_INT 4
44825: ST_TO_ADDR
// end ;
44826: LD_VAR 0 1
44830: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44831: LD_INT 0
44833: PPUSH
44834: PPUSH
44835: PPUSH
// uc_side = 0 ;
44836: LD_ADDR_OWVAR 20
44840: PUSH
44841: LD_INT 0
44843: ST_TO_ADDR
// uc_nation = 0 ;
44844: LD_ADDR_OWVAR 21
44848: PUSH
44849: LD_INT 0
44851: ST_TO_ADDR
// InitHc_All ( ) ;
44852: CALL_OW 584
// InitVc ;
44856: CALL_OW 20
// if mastodonts then
44860: LD_VAR 0 6
44864: IFFALSE 44931
// for i = 1 to mastodonts do
44866: LD_ADDR_VAR 0 11
44870: PUSH
44871: DOUBLE
44872: LD_INT 1
44874: DEC
44875: ST_TO_ADDR
44876: LD_VAR 0 6
44880: PUSH
44881: FOR_TO
44882: IFFALSE 44929
// begin vc_chassis := 31 ;
44884: LD_ADDR_OWVAR 37
44888: PUSH
44889: LD_INT 31
44891: ST_TO_ADDR
// vc_control := control_rider ;
44892: LD_ADDR_OWVAR 38
44896: PUSH
44897: LD_INT 4
44899: ST_TO_ADDR
// animal := CreateVehicle ;
44900: LD_ADDR_VAR 0 12
44904: PUSH
44905: CALL_OW 45
44909: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44910: LD_VAR 0 12
44914: PPUSH
44915: LD_VAR 0 8
44919: PPUSH
44920: LD_INT 0
44922: PPUSH
44923: CALL 47073 0 3
// end ;
44927: GO 44881
44929: POP
44930: POP
// if horses then
44931: LD_VAR 0 5
44935: IFFALSE 45002
// for i = 1 to horses do
44937: LD_ADDR_VAR 0 11
44941: PUSH
44942: DOUBLE
44943: LD_INT 1
44945: DEC
44946: ST_TO_ADDR
44947: LD_VAR 0 5
44951: PUSH
44952: FOR_TO
44953: IFFALSE 45000
// begin hc_class := 21 ;
44955: LD_ADDR_OWVAR 28
44959: PUSH
44960: LD_INT 21
44962: ST_TO_ADDR
// hc_gallery :=  ;
44963: LD_ADDR_OWVAR 33
44967: PUSH
44968: LD_STRING 
44970: ST_TO_ADDR
// animal := CreateHuman ;
44971: LD_ADDR_VAR 0 12
44975: PUSH
44976: CALL_OW 44
44980: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44981: LD_VAR 0 12
44985: PPUSH
44986: LD_VAR 0 8
44990: PPUSH
44991: LD_INT 0
44993: PPUSH
44994: CALL 47073 0 3
// end ;
44998: GO 44952
45000: POP
45001: POP
// if birds then
45002: LD_VAR 0 1
45006: IFFALSE 45073
// for i = 1 to birds do
45008: LD_ADDR_VAR 0 11
45012: PUSH
45013: DOUBLE
45014: LD_INT 1
45016: DEC
45017: ST_TO_ADDR
45018: LD_VAR 0 1
45022: PUSH
45023: FOR_TO
45024: IFFALSE 45071
// begin hc_class := 18 ;
45026: LD_ADDR_OWVAR 28
45030: PUSH
45031: LD_INT 18
45033: ST_TO_ADDR
// hc_gallery =  ;
45034: LD_ADDR_OWVAR 33
45038: PUSH
45039: LD_STRING 
45041: ST_TO_ADDR
// animal := CreateHuman ;
45042: LD_ADDR_VAR 0 12
45046: PUSH
45047: CALL_OW 44
45051: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45052: LD_VAR 0 12
45056: PPUSH
45057: LD_VAR 0 8
45061: PPUSH
45062: LD_INT 0
45064: PPUSH
45065: CALL 47073 0 3
// end ;
45069: GO 45023
45071: POP
45072: POP
// if tigers then
45073: LD_VAR 0 2
45077: IFFALSE 45161
// for i = 1 to tigers do
45079: LD_ADDR_VAR 0 11
45083: PUSH
45084: DOUBLE
45085: LD_INT 1
45087: DEC
45088: ST_TO_ADDR
45089: LD_VAR 0 2
45093: PUSH
45094: FOR_TO
45095: IFFALSE 45159
// begin hc_class = class_tiger ;
45097: LD_ADDR_OWVAR 28
45101: PUSH
45102: LD_INT 14
45104: ST_TO_ADDR
// hc_gallery =  ;
45105: LD_ADDR_OWVAR 33
45109: PUSH
45110: LD_STRING 
45112: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45113: LD_ADDR_OWVAR 35
45117: PUSH
45118: LD_INT 7
45120: NEG
45121: PPUSH
45122: LD_INT 7
45124: PPUSH
45125: CALL_OW 12
45129: ST_TO_ADDR
// animal := CreateHuman ;
45130: LD_ADDR_VAR 0 12
45134: PUSH
45135: CALL_OW 44
45139: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45140: LD_VAR 0 12
45144: PPUSH
45145: LD_VAR 0 8
45149: PPUSH
45150: LD_INT 0
45152: PPUSH
45153: CALL 47073 0 3
// end ;
45157: GO 45094
45159: POP
45160: POP
// if apemans then
45161: LD_VAR 0 3
45165: IFFALSE 45288
// for i = 1 to apemans do
45167: LD_ADDR_VAR 0 11
45171: PUSH
45172: DOUBLE
45173: LD_INT 1
45175: DEC
45176: ST_TO_ADDR
45177: LD_VAR 0 3
45181: PUSH
45182: FOR_TO
45183: IFFALSE 45286
// begin hc_class = class_apeman ;
45185: LD_ADDR_OWVAR 28
45189: PUSH
45190: LD_INT 12
45192: ST_TO_ADDR
// hc_gallery =  ;
45193: LD_ADDR_OWVAR 33
45197: PUSH
45198: LD_STRING 
45200: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45201: LD_ADDR_OWVAR 35
45205: PUSH
45206: LD_INT 2
45208: NEG
45209: PPUSH
45210: LD_INT 2
45212: PPUSH
45213: CALL_OW 12
45217: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45218: LD_ADDR_OWVAR 31
45222: PUSH
45223: LD_INT 1
45225: PPUSH
45226: LD_INT 3
45228: PPUSH
45229: CALL_OW 12
45233: PUSH
45234: LD_INT 1
45236: PPUSH
45237: LD_INT 3
45239: PPUSH
45240: CALL_OW 12
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: ST_TO_ADDR
// animal := CreateHuman ;
45257: LD_ADDR_VAR 0 12
45261: PUSH
45262: CALL_OW 44
45266: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45267: LD_VAR 0 12
45271: PPUSH
45272: LD_VAR 0 8
45276: PPUSH
45277: LD_INT 0
45279: PPUSH
45280: CALL 47073 0 3
// end ;
45284: GO 45182
45286: POP
45287: POP
// if enchidnas then
45288: LD_VAR 0 4
45292: IFFALSE 45359
// for i = 1 to enchidnas do
45294: LD_ADDR_VAR 0 11
45298: PUSH
45299: DOUBLE
45300: LD_INT 1
45302: DEC
45303: ST_TO_ADDR
45304: LD_VAR 0 4
45308: PUSH
45309: FOR_TO
45310: IFFALSE 45357
// begin hc_class = 13 ;
45312: LD_ADDR_OWVAR 28
45316: PUSH
45317: LD_INT 13
45319: ST_TO_ADDR
// hc_gallery =  ;
45320: LD_ADDR_OWVAR 33
45324: PUSH
45325: LD_STRING 
45327: ST_TO_ADDR
// animal := CreateHuman ;
45328: LD_ADDR_VAR 0 12
45332: PUSH
45333: CALL_OW 44
45337: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45338: LD_VAR 0 12
45342: PPUSH
45343: LD_VAR 0 8
45347: PPUSH
45348: LD_INT 0
45350: PPUSH
45351: CALL 47073 0 3
// end ;
45355: GO 45309
45357: POP
45358: POP
// if fishes then
45359: LD_VAR 0 7
45363: IFFALSE 45430
// for i = 1 to fishes do
45365: LD_ADDR_VAR 0 11
45369: PUSH
45370: DOUBLE
45371: LD_INT 1
45373: DEC
45374: ST_TO_ADDR
45375: LD_VAR 0 7
45379: PUSH
45380: FOR_TO
45381: IFFALSE 45428
// begin hc_class = 20 ;
45383: LD_ADDR_OWVAR 28
45387: PUSH
45388: LD_INT 20
45390: ST_TO_ADDR
// hc_gallery =  ;
45391: LD_ADDR_OWVAR 33
45395: PUSH
45396: LD_STRING 
45398: ST_TO_ADDR
// animal := CreateHuman ;
45399: LD_ADDR_VAR 0 12
45403: PUSH
45404: CALL_OW 44
45408: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45409: LD_VAR 0 12
45413: PPUSH
45414: LD_VAR 0 9
45418: PPUSH
45419: LD_INT 0
45421: PPUSH
45422: CALL 47073 0 3
// end ;
45426: GO 45380
45428: POP
45429: POP
// end ;
45430: LD_VAR 0 10
45434: RET
// export function WantHeal ( sci , unit ) ; begin
45435: LD_INT 0
45437: PPUSH
// if GetTaskList ( sci ) > 0 then
45438: LD_VAR 0 1
45442: PPUSH
45443: CALL_OW 437
45447: PUSH
45448: LD_INT 0
45450: GREATER
45451: IFFALSE 45523
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45453: LD_VAR 0 1
45457: PPUSH
45458: CALL_OW 437
45462: PUSH
45463: LD_INT 1
45465: ARRAY
45466: PUSH
45467: LD_INT 1
45469: ARRAY
45470: PUSH
45471: LD_STRING l
45473: EQUAL
45474: IFFALSE 45501
45476: PUSH
45477: LD_VAR 0 1
45481: PPUSH
45482: CALL_OW 437
45486: PUSH
45487: LD_INT 1
45489: ARRAY
45490: PUSH
45491: LD_INT 4
45493: ARRAY
45494: PUSH
45495: LD_VAR 0 2
45499: EQUAL
45500: AND
45501: IFFALSE 45513
// result := true else
45503: LD_ADDR_VAR 0 3
45507: PUSH
45508: LD_INT 1
45510: ST_TO_ADDR
45511: GO 45521
// result := false ;
45513: LD_ADDR_VAR 0 3
45517: PUSH
45518: LD_INT 0
45520: ST_TO_ADDR
// end else
45521: GO 45531
// result := false ;
45523: LD_ADDR_VAR 0 3
45527: PUSH
45528: LD_INT 0
45530: ST_TO_ADDR
// end ;
45531: LD_VAR 0 3
45535: RET
// export function HealTarget ( sci ) ; begin
45536: LD_INT 0
45538: PPUSH
// if not sci then
45539: LD_VAR 0 1
45543: NOT
45544: IFFALSE 45548
// exit ;
45546: GO 45613
// result := 0 ;
45548: LD_ADDR_VAR 0 2
45552: PUSH
45553: LD_INT 0
45555: ST_TO_ADDR
// if GetTaskList ( sci ) then
45556: LD_VAR 0 1
45560: PPUSH
45561: CALL_OW 437
45565: IFFALSE 45613
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45567: LD_VAR 0 1
45571: PPUSH
45572: CALL_OW 437
45576: PUSH
45577: LD_INT 1
45579: ARRAY
45580: PUSH
45581: LD_INT 1
45583: ARRAY
45584: PUSH
45585: LD_STRING l
45587: EQUAL
45588: IFFALSE 45613
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45590: LD_ADDR_VAR 0 2
45594: PUSH
45595: LD_VAR 0 1
45599: PPUSH
45600: CALL_OW 437
45604: PUSH
45605: LD_INT 1
45607: ARRAY
45608: PUSH
45609: LD_INT 4
45611: ARRAY
45612: ST_TO_ADDR
// end ;
45613: LD_VAR 0 2
45617: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45618: LD_INT 0
45620: PPUSH
45621: PPUSH
45622: PPUSH
45623: PPUSH
// if not base_units then
45624: LD_VAR 0 1
45628: NOT
45629: IFFALSE 45633
// exit ;
45631: GO 45720
// result := false ;
45633: LD_ADDR_VAR 0 2
45637: PUSH
45638: LD_INT 0
45640: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45641: LD_ADDR_VAR 0 5
45645: PUSH
45646: LD_VAR 0 1
45650: PPUSH
45651: LD_INT 21
45653: PUSH
45654: LD_INT 3
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PPUSH
45661: CALL_OW 72
45665: ST_TO_ADDR
// if not tmp then
45666: LD_VAR 0 5
45670: NOT
45671: IFFALSE 45675
// exit ;
45673: GO 45720
// for i in tmp do
45675: LD_ADDR_VAR 0 3
45679: PUSH
45680: LD_VAR 0 5
45684: PUSH
45685: FOR_IN
45686: IFFALSE 45718
// begin result := EnemyInRange ( i , 22 ) ;
45688: LD_ADDR_VAR 0 2
45692: PUSH
45693: LD_VAR 0 3
45697: PPUSH
45698: LD_INT 22
45700: PPUSH
45701: CALL 43145 0 2
45705: ST_TO_ADDR
// if result then
45706: LD_VAR 0 2
45710: IFFALSE 45716
// exit ;
45712: POP
45713: POP
45714: GO 45720
// end ;
45716: GO 45685
45718: POP
45719: POP
// end ;
45720: LD_VAR 0 2
45724: RET
// export function FilterByTag ( units , tag ) ; begin
45725: LD_INT 0
45727: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45728: LD_ADDR_VAR 0 3
45732: PUSH
45733: LD_VAR 0 1
45737: PPUSH
45738: LD_INT 120
45740: PUSH
45741: LD_VAR 0 2
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PPUSH
45750: CALL_OW 72
45754: ST_TO_ADDR
// end ;
45755: LD_VAR 0 3
45759: RET
// export function IsDriver ( un ) ; begin
45760: LD_INT 0
45762: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45763: LD_ADDR_VAR 0 2
45767: PUSH
45768: LD_VAR 0 1
45772: PUSH
45773: LD_INT 55
45775: PUSH
45776: EMPTY
45777: LIST
45778: PPUSH
45779: CALL_OW 69
45783: IN
45784: ST_TO_ADDR
// end ;
45785: LD_VAR 0 2
45789: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45790: LD_INT 0
45792: PPUSH
45793: PPUSH
// list := [ ] ;
45794: LD_ADDR_VAR 0 5
45798: PUSH
45799: EMPTY
45800: ST_TO_ADDR
// case d of 0 :
45801: LD_VAR 0 3
45805: PUSH
45806: LD_INT 0
45808: DOUBLE
45809: EQUAL
45810: IFTRUE 45814
45812: GO 45947
45814: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45815: LD_ADDR_VAR 0 5
45819: PUSH
45820: LD_VAR 0 1
45824: PUSH
45825: LD_INT 4
45827: MINUS
45828: PUSH
45829: LD_VAR 0 2
45833: PUSH
45834: LD_INT 4
45836: MINUS
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: LIST
45845: PUSH
45846: LD_VAR 0 1
45850: PUSH
45851: LD_INT 3
45853: MINUS
45854: PUSH
45855: LD_VAR 0 2
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: PUSH
45868: LD_VAR 0 1
45872: PUSH
45873: LD_INT 4
45875: PLUS
45876: PUSH
45877: LD_VAR 0 2
45881: PUSH
45882: LD_INT 4
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: LIST
45889: PUSH
45890: LD_VAR 0 1
45894: PUSH
45895: LD_INT 3
45897: PLUS
45898: PUSH
45899: LD_VAR 0 2
45903: PUSH
45904: LD_INT 3
45906: PLUS
45907: PUSH
45908: LD_INT 5
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: LIST
45915: PUSH
45916: LD_VAR 0 1
45920: PUSH
45921: LD_VAR 0 2
45925: PUSH
45926: LD_INT 4
45928: PLUS
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: LIST
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: ST_TO_ADDR
// end ; 1 :
45945: GO 46645
45947: LD_INT 1
45949: DOUBLE
45950: EQUAL
45951: IFTRUE 45955
45953: GO 46088
45955: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45956: LD_ADDR_VAR 0 5
45960: PUSH
45961: LD_VAR 0 1
45965: PUSH
45966: LD_VAR 0 2
45970: PUSH
45971: LD_INT 4
45973: MINUS
45974: PUSH
45975: LD_INT 3
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: LIST
45982: PUSH
45983: LD_VAR 0 1
45987: PUSH
45988: LD_INT 3
45990: MINUS
45991: PUSH
45992: LD_VAR 0 2
45996: PUSH
45997: LD_INT 3
45999: MINUS
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: LIST
46008: PUSH
46009: LD_VAR 0 1
46013: PUSH
46014: LD_INT 4
46016: MINUS
46017: PUSH
46018: LD_VAR 0 2
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: LIST
46030: PUSH
46031: LD_VAR 0 1
46035: PUSH
46036: LD_VAR 0 2
46040: PUSH
46041: LD_INT 3
46043: PLUS
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: LIST
46052: PUSH
46053: LD_VAR 0 1
46057: PUSH
46058: LD_INT 4
46060: PLUS
46061: PUSH
46062: LD_VAR 0 2
46066: PUSH
46067: LD_INT 4
46069: PLUS
46070: PUSH
46071: LD_INT 5
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: LIST
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: ST_TO_ADDR
// end ; 2 :
46086: GO 46645
46088: LD_INT 2
46090: DOUBLE
46091: EQUAL
46092: IFTRUE 46096
46094: GO 46225
46096: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46097: LD_ADDR_VAR 0 5
46101: PUSH
46102: LD_VAR 0 1
46106: PUSH
46107: LD_VAR 0 2
46111: PUSH
46112: LD_INT 3
46114: MINUS
46115: PUSH
46116: LD_INT 3
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: PUSH
46124: LD_VAR 0 1
46128: PUSH
46129: LD_INT 4
46131: PLUS
46132: PUSH
46133: LD_VAR 0 2
46137: PUSH
46138: LD_INT 4
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: LIST
46145: PUSH
46146: LD_VAR 0 1
46150: PUSH
46151: LD_VAR 0 2
46155: PUSH
46156: LD_INT 4
46158: PLUS
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: LIST
46167: PUSH
46168: LD_VAR 0 1
46172: PUSH
46173: LD_INT 3
46175: MINUS
46176: PUSH
46177: LD_VAR 0 2
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: LIST
46189: PUSH
46190: LD_VAR 0 1
46194: PUSH
46195: LD_INT 4
46197: MINUS
46198: PUSH
46199: LD_VAR 0 2
46203: PUSH
46204: LD_INT 4
46206: MINUS
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: LIST
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: ST_TO_ADDR
// end ; 3 :
46223: GO 46645
46225: LD_INT 3
46227: DOUBLE
46228: EQUAL
46229: IFTRUE 46233
46231: GO 46366
46233: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46234: LD_ADDR_VAR 0 5
46238: PUSH
46239: LD_VAR 0 1
46243: PUSH
46244: LD_INT 3
46246: PLUS
46247: PUSH
46248: LD_VAR 0 2
46252: PUSH
46253: LD_INT 4
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: LIST
46260: PUSH
46261: LD_VAR 0 1
46265: PUSH
46266: LD_INT 4
46268: PLUS
46269: PUSH
46270: LD_VAR 0 2
46274: PUSH
46275: LD_INT 4
46277: PLUS
46278: PUSH
46279: LD_INT 5
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: LIST
46286: PUSH
46287: LD_VAR 0 1
46291: PUSH
46292: LD_INT 4
46294: MINUS
46295: PUSH
46296: LD_VAR 0 2
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: LIST
46308: PUSH
46309: LD_VAR 0 1
46313: PUSH
46314: LD_VAR 0 2
46318: PUSH
46319: LD_INT 4
46321: MINUS
46322: PUSH
46323: LD_INT 3
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: LIST
46330: PUSH
46331: LD_VAR 0 1
46335: PUSH
46336: LD_INT 3
46338: MINUS
46339: PUSH
46340: LD_VAR 0 2
46344: PUSH
46345: LD_INT 3
46347: MINUS
46348: PUSH
46349: LD_INT 2
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: LIST
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: ST_TO_ADDR
// end ; 4 :
46364: GO 46645
46366: LD_INT 4
46368: DOUBLE
46369: EQUAL
46370: IFTRUE 46374
46372: GO 46507
46374: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46375: LD_ADDR_VAR 0 5
46379: PUSH
46380: LD_VAR 0 1
46384: PUSH
46385: LD_VAR 0 2
46389: PUSH
46390: LD_INT 4
46392: PLUS
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: LIST
46401: PUSH
46402: LD_VAR 0 1
46406: PUSH
46407: LD_INT 3
46409: PLUS
46410: PUSH
46411: LD_VAR 0 2
46415: PUSH
46416: LD_INT 3
46418: PLUS
46419: PUSH
46420: LD_INT 5
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: LIST
46427: PUSH
46428: LD_VAR 0 1
46432: PUSH
46433: LD_INT 4
46435: PLUS
46436: PUSH
46437: LD_VAR 0 2
46441: PUSH
46442: LD_INT 4
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: LIST
46449: PUSH
46450: LD_VAR 0 1
46454: PUSH
46455: LD_VAR 0 2
46459: PUSH
46460: LD_INT 3
46462: MINUS
46463: PUSH
46464: LD_INT 3
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: LIST
46471: PUSH
46472: LD_VAR 0 1
46476: PUSH
46477: LD_INT 4
46479: MINUS
46480: PUSH
46481: LD_VAR 0 2
46485: PUSH
46486: LD_INT 4
46488: MINUS
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: LIST
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: ST_TO_ADDR
// end ; 5 :
46505: GO 46645
46507: LD_INT 5
46509: DOUBLE
46510: EQUAL
46511: IFTRUE 46515
46513: GO 46644
46515: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46516: LD_ADDR_VAR 0 5
46520: PUSH
46521: LD_VAR 0 1
46525: PUSH
46526: LD_INT 4
46528: MINUS
46529: PUSH
46530: LD_VAR 0 2
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: LIST
46542: PUSH
46543: LD_VAR 0 1
46547: PUSH
46548: LD_VAR 0 2
46552: PUSH
46553: LD_INT 4
46555: MINUS
46556: PUSH
46557: LD_INT 3
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: LIST
46564: PUSH
46565: LD_VAR 0 1
46569: PUSH
46570: LD_INT 4
46572: PLUS
46573: PUSH
46574: LD_VAR 0 2
46578: PUSH
46579: LD_INT 4
46581: PLUS
46582: PUSH
46583: LD_INT 5
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: LIST
46590: PUSH
46591: LD_VAR 0 1
46595: PUSH
46596: LD_INT 3
46598: PLUS
46599: PUSH
46600: LD_VAR 0 2
46604: PUSH
46605: LD_INT 4
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: LIST
46612: PUSH
46613: LD_VAR 0 1
46617: PUSH
46618: LD_VAR 0 2
46622: PUSH
46623: LD_INT 3
46625: PLUS
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: LIST
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: ST_TO_ADDR
// end ; end ;
46642: GO 46645
46644: POP
// result := list ;
46645: LD_ADDR_VAR 0 4
46649: PUSH
46650: LD_VAR 0 5
46654: ST_TO_ADDR
// end ;
46655: LD_VAR 0 4
46659: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46660: LD_INT 0
46662: PPUSH
46663: PPUSH
46664: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46665: LD_VAR 0 1
46669: NOT
46670: IFTRUE 46698
46672: PUSH
46673: LD_VAR 0 2
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: LD_INT 3
46686: PUSH
46687: LD_INT 4
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: IN
46696: NOT
46697: OR
46698: IFFALSE 46702
// exit ;
46700: GO 46785
// tmp := [ ] ;
46702: LD_ADDR_VAR 0 5
46706: PUSH
46707: EMPTY
46708: ST_TO_ADDR
// for i in units do
46709: LD_ADDR_VAR 0 4
46713: PUSH
46714: LD_VAR 0 1
46718: PUSH
46719: FOR_IN
46720: IFFALSE 46754
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46722: LD_ADDR_VAR 0 5
46726: PUSH
46727: LD_VAR 0 5
46731: PPUSH
46732: LD_VAR 0 4
46736: PPUSH
46737: LD_VAR 0 2
46741: PPUSH
46742: CALL_OW 259
46746: PPUSH
46747: CALL 48180 0 2
46751: ST_TO_ADDR
46752: GO 46719
46754: POP
46755: POP
// if not tmp then
46756: LD_VAR 0 5
46760: NOT
46761: IFFALSE 46765
// exit ;
46763: GO 46785
// result := SortListByListDesc ( units , tmp ) ;
46765: LD_ADDR_VAR 0 3
46769: PUSH
46770: LD_VAR 0 1
46774: PPUSH
46775: LD_VAR 0 5
46779: PPUSH
46780: CALL_OW 77
46784: ST_TO_ADDR
// end ;
46785: LD_VAR 0 3
46789: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46790: LD_INT 0
46792: PPUSH
46793: PPUSH
46794: PPUSH
// result := false ;
46795: LD_ADDR_VAR 0 3
46799: PUSH
46800: LD_INT 0
46802: ST_TO_ADDR
// if not building then
46803: LD_VAR 0 2
46807: NOT
46808: IFFALSE 46812
// exit ;
46810: GO 46956
// x := GetX ( building ) ;
46812: LD_ADDR_VAR 0 4
46816: PUSH
46817: LD_VAR 0 2
46821: PPUSH
46822: CALL_OW 250
46826: ST_TO_ADDR
// y := GetY ( building ) ;
46827: LD_ADDR_VAR 0 5
46831: PUSH
46832: LD_VAR 0 2
46836: PPUSH
46837: CALL_OW 251
46841: ST_TO_ADDR
// if not x or not y then
46842: LD_VAR 0 4
46846: NOT
46847: IFTRUE 46856
46849: PUSH
46850: LD_VAR 0 5
46854: NOT
46855: OR
46856: IFFALSE 46860
// exit ;
46858: GO 46956
// if GetTaskList ( unit ) then
46860: LD_VAR 0 1
46864: PPUSH
46865: CALL_OW 437
46869: IFFALSE 46956
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46871: LD_STRING e
46873: PUSH
46874: LD_VAR 0 1
46878: PPUSH
46879: CALL_OW 437
46883: PUSH
46884: LD_INT 1
46886: ARRAY
46887: PUSH
46888: LD_INT 1
46890: ARRAY
46891: EQUAL
46892: IFFALSE 46919
46894: PUSH
46895: LD_VAR 0 4
46899: PUSH
46900: LD_VAR 0 1
46904: PPUSH
46905: CALL_OW 437
46909: PUSH
46910: LD_INT 1
46912: ARRAY
46913: PUSH
46914: LD_INT 2
46916: ARRAY
46917: EQUAL
46918: AND
46919: IFFALSE 46946
46921: PUSH
46922: LD_VAR 0 5
46926: PUSH
46927: LD_VAR 0 1
46931: PPUSH
46932: CALL_OW 437
46936: PUSH
46937: LD_INT 1
46939: ARRAY
46940: PUSH
46941: LD_INT 3
46943: ARRAY
46944: EQUAL
46945: AND
46946: IFFALSE 46956
// result := true end ;
46948: LD_ADDR_VAR 0 3
46952: PUSH
46953: LD_INT 1
46955: ST_TO_ADDR
// end ;
46956: LD_VAR 0 3
46960: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46961: LD_INT 0
46963: PPUSH
// result := false ;
46964: LD_ADDR_VAR 0 4
46968: PUSH
46969: LD_INT 0
46971: ST_TO_ADDR
// if GetTaskList ( unit ) then
46972: LD_VAR 0 1
46976: PPUSH
46977: CALL_OW 437
46981: IFFALSE 47068
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46983: LD_STRING M
46985: PUSH
46986: LD_VAR 0 1
46990: PPUSH
46991: CALL_OW 437
46995: PUSH
46996: LD_INT 1
46998: ARRAY
46999: PUSH
47000: LD_INT 1
47002: ARRAY
47003: EQUAL
47004: IFFALSE 47031
47006: PUSH
47007: LD_VAR 0 2
47011: PUSH
47012: LD_VAR 0 1
47016: PPUSH
47017: CALL_OW 437
47021: PUSH
47022: LD_INT 1
47024: ARRAY
47025: PUSH
47026: LD_INT 2
47028: ARRAY
47029: EQUAL
47030: AND
47031: IFFALSE 47058
47033: PUSH
47034: LD_VAR 0 3
47038: PUSH
47039: LD_VAR 0 1
47043: PPUSH
47044: CALL_OW 437
47048: PUSH
47049: LD_INT 1
47051: ARRAY
47052: PUSH
47053: LD_INT 3
47055: ARRAY
47056: EQUAL
47057: AND
47058: IFFALSE 47068
// result := true ;
47060: LD_ADDR_VAR 0 4
47064: PUSH
47065: LD_INT 1
47067: ST_TO_ADDR
// end ; end ;
47068: LD_VAR 0 4
47072: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47073: LD_INT 0
47075: PPUSH
47076: PPUSH
47077: PPUSH
47078: PPUSH
// if not unit or not area then
47079: LD_VAR 0 1
47083: NOT
47084: IFTRUE 47093
47086: PUSH
47087: LD_VAR 0 2
47091: NOT
47092: OR
47093: IFFALSE 47097
// exit ;
47095: GO 47273
// tmp := AreaToList ( area , i ) ;
47097: LD_ADDR_VAR 0 6
47101: PUSH
47102: LD_VAR 0 2
47106: PPUSH
47107: LD_VAR 0 5
47111: PPUSH
47112: CALL_OW 517
47116: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47117: LD_ADDR_VAR 0 5
47121: PUSH
47122: DOUBLE
47123: LD_INT 1
47125: DEC
47126: ST_TO_ADDR
47127: LD_VAR 0 6
47131: PUSH
47132: LD_INT 1
47134: ARRAY
47135: PUSH
47136: FOR_TO
47137: IFFALSE 47271
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47139: LD_ADDR_VAR 0 7
47143: PUSH
47144: LD_VAR 0 6
47148: PUSH
47149: LD_INT 1
47151: ARRAY
47152: PUSH
47153: LD_VAR 0 5
47157: ARRAY
47158: PUSH
47159: LD_VAR 0 6
47163: PUSH
47164: LD_INT 2
47166: ARRAY
47167: PUSH
47168: LD_VAR 0 5
47172: ARRAY
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47178: LD_INT 92
47180: PUSH
47181: LD_VAR 0 7
47185: PUSH
47186: LD_INT 1
47188: ARRAY
47189: PUSH
47190: LD_VAR 0 7
47194: PUSH
47195: LD_INT 2
47197: ARRAY
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: PPUSH
47208: CALL_OW 69
47212: PUSH
47213: LD_INT 0
47215: EQUAL
47216: IFFALSE 47269
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47218: LD_VAR 0 1
47222: PPUSH
47223: LD_VAR 0 7
47227: PUSH
47228: LD_INT 1
47230: ARRAY
47231: PPUSH
47232: LD_VAR 0 7
47236: PUSH
47237: LD_INT 2
47239: ARRAY
47240: PPUSH
47241: LD_VAR 0 3
47245: PPUSH
47246: CALL_OW 48
// result := IsPlaced ( unit ) ;
47250: LD_ADDR_VAR 0 4
47254: PUSH
47255: LD_VAR 0 1
47259: PPUSH
47260: CALL_OW 305
47264: ST_TO_ADDR
// exit ;
47265: POP
47266: POP
47267: GO 47273
// end ; end ;
47269: GO 47136
47271: POP
47272: POP
// end ;
47273: LD_VAR 0 4
47277: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47278: LD_INT 0
47280: PPUSH
47281: PPUSH
47282: PPUSH
// if not side or side > 8 then
47283: LD_VAR 0 1
47287: NOT
47288: IFTRUE 47300
47290: PUSH
47291: LD_VAR 0 1
47295: PUSH
47296: LD_INT 8
47298: GREATER
47299: OR
47300: IFFALSE 47304
// exit ;
47302: GO 47491
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47304: LD_ADDR_VAR 0 4
47308: PUSH
47309: LD_INT 22
47311: PUSH
47312: LD_VAR 0 1
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 21
47323: PUSH
47324: LD_INT 3
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PPUSH
47335: CALL_OW 69
47339: ST_TO_ADDR
// if not tmp then
47340: LD_VAR 0 4
47344: NOT
47345: IFFALSE 47349
// exit ;
47347: GO 47491
// enable_addtolog := true ;
47349: LD_ADDR_OWVAR 81
47353: PUSH
47354: LD_INT 1
47356: ST_TO_ADDR
// AddToLog ( [ ) ;
47357: LD_STRING [
47359: PPUSH
47360: CALL_OW 561
// for i in tmp do
47364: LD_ADDR_VAR 0 3
47368: PUSH
47369: LD_VAR 0 4
47373: PUSH
47374: FOR_IN
47375: IFFALSE 47482
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47377: LD_STRING [
47379: PUSH
47380: LD_VAR 0 3
47384: PPUSH
47385: CALL_OW 266
47389: STR
47390: PUSH
47391: LD_STRING , 
47393: STR
47394: PUSH
47395: LD_VAR 0 3
47399: PPUSH
47400: CALL_OW 250
47404: STR
47405: PUSH
47406: LD_STRING , 
47408: STR
47409: PUSH
47410: LD_VAR 0 3
47414: PPUSH
47415: CALL_OW 251
47419: STR
47420: PUSH
47421: LD_STRING , 
47423: STR
47424: PUSH
47425: LD_VAR 0 3
47429: PPUSH
47430: CALL_OW 254
47434: STR
47435: PUSH
47436: LD_STRING , 
47438: STR
47439: PUSH
47440: LD_VAR 0 3
47444: PPUSH
47445: LD_INT 1
47447: PPUSH
47448: CALL_OW 268
47452: STR
47453: PUSH
47454: LD_STRING , 
47456: STR
47457: PUSH
47458: LD_VAR 0 3
47462: PPUSH
47463: LD_INT 2
47465: PPUSH
47466: CALL_OW 268
47470: STR
47471: PUSH
47472: LD_STRING ],
47474: STR
47475: PPUSH
47476: CALL_OW 561
// end ;
47480: GO 47374
47482: POP
47483: POP
// AddToLog ( ]; ) ;
47484: LD_STRING ];
47486: PPUSH
47487: CALL_OW 561
// end ;
47491: LD_VAR 0 2
47495: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47496: LD_INT 0
47498: PPUSH
47499: PPUSH
47500: PPUSH
47501: PPUSH
47502: PPUSH
// if not area or not rate or not max then
47503: LD_VAR 0 1
47507: NOT
47508: IFTRUE 47517
47510: PUSH
47511: LD_VAR 0 2
47515: NOT
47516: OR
47517: IFTRUE 47526
47519: PUSH
47520: LD_VAR 0 4
47524: NOT
47525: OR
47526: IFFALSE 47530
// exit ;
47528: GO 47719
// while 1 do
47530: LD_INT 1
47532: IFFALSE 47719
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47534: LD_ADDR_VAR 0 9
47538: PUSH
47539: LD_VAR 0 1
47543: PPUSH
47544: LD_INT 1
47546: PPUSH
47547: CALL_OW 287
47551: PUSH
47552: LD_INT 10
47554: MUL
47555: ST_TO_ADDR
// r := rate / 10 ;
47556: LD_ADDR_VAR 0 7
47560: PUSH
47561: LD_VAR 0 2
47565: PUSH
47566: LD_INT 10
47568: DIVREAL
47569: ST_TO_ADDR
// time := 1 1$00 ;
47570: LD_ADDR_VAR 0 8
47574: PUSH
47575: LD_INT 2100
47577: ST_TO_ADDR
// if amount < min then
47578: LD_VAR 0 9
47582: PUSH
47583: LD_VAR 0 3
47587: LESS
47588: IFFALSE 47606
// r := r * 2 else
47590: LD_ADDR_VAR 0 7
47594: PUSH
47595: LD_VAR 0 7
47599: PUSH
47600: LD_INT 2
47602: MUL
47603: ST_TO_ADDR
47604: GO 47632
// if amount > max then
47606: LD_VAR 0 9
47610: PUSH
47611: LD_VAR 0 4
47615: GREATER
47616: IFFALSE 47632
// r := r / 2 ;
47618: LD_ADDR_VAR 0 7
47622: PUSH
47623: LD_VAR 0 7
47627: PUSH
47628: LD_INT 2
47630: DIVREAL
47631: ST_TO_ADDR
// time := time / r ;
47632: LD_ADDR_VAR 0 8
47636: PUSH
47637: LD_VAR 0 8
47641: PUSH
47642: LD_VAR 0 7
47646: DIVREAL
47647: ST_TO_ADDR
// if time < 0 then
47648: LD_VAR 0 8
47652: PUSH
47653: LD_INT 0
47655: LESS
47656: IFFALSE 47673
// time := time * - 1 ;
47658: LD_ADDR_VAR 0 8
47662: PUSH
47663: LD_VAR 0 8
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: MUL
47672: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47673: LD_VAR 0 8
47677: PUSH
47678: LD_INT 35
47680: PPUSH
47681: LD_INT 875
47683: PPUSH
47684: CALL_OW 12
47688: PLUS
47689: PPUSH
47690: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47694: LD_INT 1
47696: PPUSH
47697: LD_INT 5
47699: PPUSH
47700: CALL_OW 12
47704: PPUSH
47705: LD_VAR 0 1
47709: PPUSH
47710: LD_INT 1
47712: PPUSH
47713: CALL_OW 55
// end ;
47717: GO 47530
// end ;
47719: LD_VAR 0 5
47723: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47724: LD_INT 0
47726: PPUSH
47727: PPUSH
47728: PPUSH
47729: PPUSH
47730: PPUSH
47731: PPUSH
47732: PPUSH
47733: PPUSH
// if not turrets or not factories then
47734: LD_VAR 0 1
47738: NOT
47739: IFTRUE 47748
47741: PUSH
47742: LD_VAR 0 2
47746: NOT
47747: OR
47748: IFFALSE 47752
// exit ;
47750: GO 48059
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47752: LD_ADDR_VAR 0 10
47756: PUSH
47757: LD_INT 5
47759: PUSH
47760: LD_INT 6
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: PUSH
47770: LD_INT 4
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 3
47779: PUSH
47780: LD_INT 5
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 24
47794: PUSH
47795: LD_INT 25
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 23
47804: PUSH
47805: LD_INT 27
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 42
47818: PUSH
47819: LD_INT 43
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 44
47828: PUSH
47829: LD_INT 46
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 45
47838: PUSH
47839: LD_INT 47
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: LIST
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: ST_TO_ADDR
// result := [ ] ;
47856: LD_ADDR_VAR 0 3
47860: PUSH
47861: EMPTY
47862: ST_TO_ADDR
// for i in turrets do
47863: LD_ADDR_VAR 0 4
47867: PUSH
47868: LD_VAR 0 1
47872: PUSH
47873: FOR_IN
47874: IFFALSE 48057
// begin nat := GetNation ( i ) ;
47876: LD_ADDR_VAR 0 7
47880: PUSH
47881: LD_VAR 0 4
47885: PPUSH
47886: CALL_OW 248
47890: ST_TO_ADDR
// weapon := 0 ;
47891: LD_ADDR_VAR 0 8
47895: PUSH
47896: LD_INT 0
47898: ST_TO_ADDR
// if not nat then
47899: LD_VAR 0 7
47903: NOT
47904: IFFALSE 47908
// continue ;
47906: GO 47873
// for j in list [ nat ] do
47908: LD_ADDR_VAR 0 5
47912: PUSH
47913: LD_VAR 0 10
47917: PUSH
47918: LD_VAR 0 7
47922: ARRAY
47923: PUSH
47924: FOR_IN
47925: IFFALSE 47966
// if GetBWeapon ( i ) = j [ 1 ] then
47927: LD_VAR 0 4
47931: PPUSH
47932: CALL_OW 269
47936: PUSH
47937: LD_VAR 0 5
47941: PUSH
47942: LD_INT 1
47944: ARRAY
47945: EQUAL
47946: IFFALSE 47964
// begin weapon := j [ 2 ] ;
47948: LD_ADDR_VAR 0 8
47952: PUSH
47953: LD_VAR 0 5
47957: PUSH
47958: LD_INT 2
47960: ARRAY
47961: ST_TO_ADDR
// break ;
47962: GO 47966
// end ;
47964: GO 47924
47966: POP
47967: POP
// if not weapon then
47968: LD_VAR 0 8
47972: NOT
47973: IFFALSE 47977
// continue ;
47975: GO 47873
// for k in factories do
47977: LD_ADDR_VAR 0 6
47981: PUSH
47982: LD_VAR 0 2
47986: PUSH
47987: FOR_IN
47988: IFFALSE 48053
// begin weapons := AvailableWeaponList ( k ) ;
47990: LD_ADDR_VAR 0 9
47994: PUSH
47995: LD_VAR 0 6
47999: PPUSH
48000: CALL_OW 478
48004: ST_TO_ADDR
// if not weapons then
48005: LD_VAR 0 9
48009: NOT
48010: IFFALSE 48014
// continue ;
48012: GO 47987
// if weapon in weapons then
48014: LD_VAR 0 8
48018: PUSH
48019: LD_VAR 0 9
48023: IN
48024: IFFALSE 48051
// begin result := [ i , weapon ] ;
48026: LD_ADDR_VAR 0 3
48030: PUSH
48031: LD_VAR 0 4
48035: PUSH
48036: LD_VAR 0 8
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: ST_TO_ADDR
// exit ;
48045: POP
48046: POP
48047: POP
48048: POP
48049: GO 48059
// end ; end ;
48051: GO 47987
48053: POP
48054: POP
// end ;
48055: GO 47873
48057: POP
48058: POP
// end ;
48059: LD_VAR 0 3
48063: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48064: LD_INT 0
48066: PPUSH
// if not side or side > 8 then
48067: LD_VAR 0 3
48071: NOT
48072: IFTRUE 48084
48074: PUSH
48075: LD_VAR 0 3
48079: PUSH
48080: LD_INT 8
48082: GREATER
48083: OR
48084: IFFALSE 48088
// exit ;
48086: GO 48147
// if not range then
48088: LD_VAR 0 4
48092: NOT
48093: IFFALSE 48104
// range := - 12 ;
48095: LD_ADDR_VAR 0 4
48099: PUSH
48100: LD_INT 12
48102: NEG
48103: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48104: LD_VAR 0 1
48108: PPUSH
48109: LD_VAR 0 2
48113: PPUSH
48114: LD_VAR 0 3
48118: PPUSH
48119: LD_VAR 0 4
48123: PPUSH
48124: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48128: LD_VAR 0 1
48132: PPUSH
48133: LD_VAR 0 2
48137: PPUSH
48138: LD_VAR 0 3
48142: PPUSH
48143: CALL_OW 331
// end ;
48147: LD_VAR 0 5
48151: RET
// export function Video ( mode ) ; begin
48152: LD_INT 0
48154: PPUSH
// ingame_video = mode ;
48155: LD_ADDR_OWVAR 52
48159: PUSH
48160: LD_VAR 0 1
48164: ST_TO_ADDR
// interface_hidden = mode ;
48165: LD_ADDR_OWVAR 54
48169: PUSH
48170: LD_VAR 0 1
48174: ST_TO_ADDR
// end ;
48175: LD_VAR 0 2
48179: RET
// export function Join ( array , element ) ; begin
48180: LD_INT 0
48182: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48183: LD_ADDR_VAR 0 3
48187: PUSH
48188: LD_VAR 0 1
48192: PPUSH
48193: LD_VAR 0 1
48197: PUSH
48198: LD_INT 1
48200: PLUS
48201: PPUSH
48202: LD_VAR 0 2
48206: PPUSH
48207: CALL_OW 1
48211: ST_TO_ADDR
// end ;
48212: LD_VAR 0 3
48216: RET
// export function JoinUnion ( array , element ) ; begin
48217: LD_INT 0
48219: PPUSH
// result := array union element ;
48220: LD_ADDR_VAR 0 3
48224: PUSH
48225: LD_VAR 0 1
48229: PUSH
48230: LD_VAR 0 2
48234: UNION
48235: ST_TO_ADDR
// end ;
48236: LD_VAR 0 3
48240: RET
// export function GetBehemoths ( side ) ; begin
48241: LD_INT 0
48243: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48244: LD_ADDR_VAR 0 2
48248: PUSH
48249: LD_INT 22
48251: PUSH
48252: LD_VAR 0 1
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 31
48263: PUSH
48264: LD_INT 25
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PPUSH
48275: CALL_OW 69
48279: ST_TO_ADDR
// end ;
48280: LD_VAR 0 2
48284: RET
// export function Shuffle ( array ) ; var i , index ; begin
48285: LD_INT 0
48287: PPUSH
48288: PPUSH
48289: PPUSH
// result := [ ] ;
48290: LD_ADDR_VAR 0 2
48294: PUSH
48295: EMPTY
48296: ST_TO_ADDR
// if not array then
48297: LD_VAR 0 1
48301: NOT
48302: IFFALSE 48306
// exit ;
48304: GO 48405
// Randomize ;
48306: CALL_OW 10
// for i = array downto 1 do
48310: LD_ADDR_VAR 0 3
48314: PUSH
48315: DOUBLE
48316: LD_VAR 0 1
48320: INC
48321: ST_TO_ADDR
48322: LD_INT 1
48324: PUSH
48325: FOR_DOWNTO
48326: IFFALSE 48403
// begin index := rand ( 1 , array ) ;
48328: LD_ADDR_VAR 0 4
48332: PUSH
48333: LD_INT 1
48335: PPUSH
48336: LD_VAR 0 1
48340: PPUSH
48341: CALL_OW 12
48345: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48346: LD_ADDR_VAR 0 2
48350: PUSH
48351: LD_VAR 0 2
48355: PPUSH
48356: LD_VAR 0 2
48360: PUSH
48361: LD_INT 1
48363: PLUS
48364: PPUSH
48365: LD_VAR 0 1
48369: PUSH
48370: LD_VAR 0 4
48374: ARRAY
48375: PPUSH
48376: CALL_OW 2
48380: ST_TO_ADDR
// array := Delete ( array , index ) ;
48381: LD_ADDR_VAR 0 1
48385: PUSH
48386: LD_VAR 0 1
48390: PPUSH
48391: LD_VAR 0 4
48395: PPUSH
48396: CALL_OW 3
48400: ST_TO_ADDR
// end ;
48401: GO 48325
48403: POP
48404: POP
// end ;
48405: LD_VAR 0 2
48409: RET
// export function GetBaseMaterials ( base ) ; begin
48410: LD_INT 0
48412: PPUSH
// result := [ 0 , 0 , 0 ] ;
48413: LD_ADDR_VAR 0 2
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: LIST
48431: ST_TO_ADDR
// if not base then
48432: LD_VAR 0 1
48436: NOT
48437: IFFALSE 48441
// exit ;
48439: GO 48490
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48441: LD_ADDR_VAR 0 2
48445: PUSH
48446: LD_VAR 0 1
48450: PPUSH
48451: LD_INT 1
48453: PPUSH
48454: CALL_OW 275
48458: PUSH
48459: LD_VAR 0 1
48463: PPUSH
48464: LD_INT 2
48466: PPUSH
48467: CALL_OW 275
48471: PUSH
48472: LD_VAR 0 1
48476: PPUSH
48477: LD_INT 3
48479: PPUSH
48480: CALL_OW 275
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: LIST
48489: ST_TO_ADDR
// end ;
48490: LD_VAR 0 2
48494: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48495: LD_INT 0
48497: PPUSH
48498: PPUSH
// result := array ;
48499: LD_ADDR_VAR 0 3
48503: PUSH
48504: LD_VAR 0 1
48508: ST_TO_ADDR
// if size >= result then
48509: LD_VAR 0 2
48513: PUSH
48514: LD_VAR 0 3
48518: GREATEREQUAL
48519: IFFALSE 48523
// exit ;
48521: GO 48573
// if size then
48523: LD_VAR 0 2
48527: IFFALSE 48573
// for i := array downto size do
48529: LD_ADDR_VAR 0 4
48533: PUSH
48534: DOUBLE
48535: LD_VAR 0 1
48539: INC
48540: ST_TO_ADDR
48541: LD_VAR 0 2
48545: PUSH
48546: FOR_DOWNTO
48547: IFFALSE 48571
// result := Delete ( result , result ) ;
48549: LD_ADDR_VAR 0 3
48553: PUSH
48554: LD_VAR 0 3
48558: PPUSH
48559: LD_VAR 0 3
48563: PPUSH
48564: CALL_OW 3
48568: ST_TO_ADDR
48569: GO 48546
48571: POP
48572: POP
// end ;
48573: LD_VAR 0 3
48577: RET
// export function ComExit ( unit ) ; var tmp ; begin
48578: LD_INT 0
48580: PPUSH
48581: PPUSH
// if not IsInUnit ( unit ) then
48582: LD_VAR 0 1
48586: PPUSH
48587: CALL_OW 310
48591: NOT
48592: IFFALSE 48596
// exit ;
48594: GO 48656
// tmp := IsInUnit ( unit ) ;
48596: LD_ADDR_VAR 0 3
48600: PUSH
48601: LD_VAR 0 1
48605: PPUSH
48606: CALL_OW 310
48610: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48611: LD_VAR 0 3
48615: PPUSH
48616: CALL_OW 247
48620: PUSH
48621: LD_INT 2
48623: EQUAL
48624: IFFALSE 48637
// ComExitVehicle ( unit ) else
48626: LD_VAR 0 1
48630: PPUSH
48631: CALL_OW 121
48635: GO 48646
// ComExitBuilding ( unit ) ;
48637: LD_VAR 0 1
48641: PPUSH
48642: CALL_OW 122
// result := tmp ;
48646: LD_ADDR_VAR 0 2
48650: PUSH
48651: LD_VAR 0 3
48655: ST_TO_ADDR
// end ;
48656: LD_VAR 0 2
48660: RET
// export function ComExitAll ( units ) ; var i ; begin
48661: LD_INT 0
48663: PPUSH
48664: PPUSH
// if not units then
48665: LD_VAR 0 1
48669: NOT
48670: IFFALSE 48674
// exit ;
48672: GO 48700
// for i in units do
48674: LD_ADDR_VAR 0 3
48678: PUSH
48679: LD_VAR 0 1
48683: PUSH
48684: FOR_IN
48685: IFFALSE 48698
// ComExit ( i ) ;
48687: LD_VAR 0 3
48691: PPUSH
48692: CALL 48578 0 1
48696: GO 48684
48698: POP
48699: POP
// end ;
48700: LD_VAR 0 2
48704: RET
// export function ResetHc ; begin
48705: LD_INT 0
48707: PPUSH
// InitHc ;
48708: CALL_OW 19
// hc_importance := 0 ;
48712: LD_ADDR_OWVAR 32
48716: PUSH
48717: LD_INT 0
48719: ST_TO_ADDR
// end ;
48720: LD_VAR 0 1
48724: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48725: LD_INT 0
48727: PPUSH
48728: PPUSH
48729: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48730: LD_ADDR_VAR 0 6
48734: PUSH
48735: LD_VAR 0 1
48739: PUSH
48740: LD_VAR 0 3
48744: PLUS
48745: PUSH
48746: LD_INT 2
48748: DIV
48749: ST_TO_ADDR
// if _x < 0 then
48750: LD_VAR 0 6
48754: PUSH
48755: LD_INT 0
48757: LESS
48758: IFFALSE 48775
// _x := _x * - 1 ;
48760: LD_ADDR_VAR 0 6
48764: PUSH
48765: LD_VAR 0 6
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: MUL
48774: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48775: LD_ADDR_VAR 0 7
48779: PUSH
48780: LD_VAR 0 2
48784: PUSH
48785: LD_VAR 0 4
48789: PLUS
48790: PUSH
48791: LD_INT 2
48793: DIV
48794: ST_TO_ADDR
// if _y < 0 then
48795: LD_VAR 0 7
48799: PUSH
48800: LD_INT 0
48802: LESS
48803: IFFALSE 48820
// _y := _y * - 1 ;
48805: LD_ADDR_VAR 0 7
48809: PUSH
48810: LD_VAR 0 7
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: MUL
48819: ST_TO_ADDR
// result := [ _x , _y ] ;
48820: LD_ADDR_VAR 0 5
48824: PUSH
48825: LD_VAR 0 6
48829: PUSH
48830: LD_VAR 0 7
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: ST_TO_ADDR
// end ;
48839: LD_VAR 0 5
48843: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48844: LD_INT 0
48846: PPUSH
48847: PPUSH
48848: PPUSH
48849: PPUSH
// task := GetTaskList ( unit ) ;
48850: LD_ADDR_VAR 0 7
48854: PUSH
48855: LD_VAR 0 1
48859: PPUSH
48860: CALL_OW 437
48864: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48865: LD_VAR 0 7
48869: NOT
48870: IFFALSE 48889
48872: PUSH
48873: LD_VAR 0 1
48877: PPUSH
48878: LD_VAR 0 2
48882: PPUSH
48883: CALL_OW 308
48887: NOT
48888: AND
48889: IFFALSE 48893
// exit ;
48891: GO 49011
// if IsInArea ( unit , area ) then
48893: LD_VAR 0 1
48897: PPUSH
48898: LD_VAR 0 2
48902: PPUSH
48903: CALL_OW 308
48907: IFFALSE 48925
// begin ComMoveToArea ( unit , goAway ) ;
48909: LD_VAR 0 1
48913: PPUSH
48914: LD_VAR 0 3
48918: PPUSH
48919: CALL_OW 113
// exit ;
48923: GO 49011
// end ; if task [ 1 ] [ 1 ] <> M then
48925: LD_VAR 0 7
48929: PUSH
48930: LD_INT 1
48932: ARRAY
48933: PUSH
48934: LD_INT 1
48936: ARRAY
48937: PUSH
48938: LD_STRING M
48940: NONEQUAL
48941: IFFALSE 48945
// exit ;
48943: GO 49011
// x := task [ 1 ] [ 2 ] ;
48945: LD_ADDR_VAR 0 5
48949: PUSH
48950: LD_VAR 0 7
48954: PUSH
48955: LD_INT 1
48957: ARRAY
48958: PUSH
48959: LD_INT 2
48961: ARRAY
48962: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48963: LD_ADDR_VAR 0 6
48967: PUSH
48968: LD_VAR 0 7
48972: PUSH
48973: LD_INT 1
48975: ARRAY
48976: PUSH
48977: LD_INT 3
48979: ARRAY
48980: ST_TO_ADDR
// if InArea ( x , y , area ) then
48981: LD_VAR 0 5
48985: PPUSH
48986: LD_VAR 0 6
48990: PPUSH
48991: LD_VAR 0 2
48995: PPUSH
48996: CALL_OW 309
49000: IFFALSE 49011
// ComStop ( unit ) ;
49002: LD_VAR 0 1
49006: PPUSH
49007: CALL_OW 141
// end ;
49011: LD_VAR 0 4
49015: RET
// export function Abs ( value ) ; begin
49016: LD_INT 0
49018: PPUSH
// result := value ;
49019: LD_ADDR_VAR 0 2
49023: PUSH
49024: LD_VAR 0 1
49028: ST_TO_ADDR
// if value < 0 then
49029: LD_VAR 0 1
49033: PUSH
49034: LD_INT 0
49036: LESS
49037: IFFALSE 49054
// result := value * - 1 ;
49039: LD_ADDR_VAR 0 2
49043: PUSH
49044: LD_VAR 0 1
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: MUL
49053: ST_TO_ADDR
// end ;
49054: LD_VAR 0 2
49058: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49059: LD_INT 0
49061: PPUSH
49062: PPUSH
49063: PPUSH
49064: PPUSH
49065: PPUSH
49066: PPUSH
49067: PPUSH
49068: PPUSH
// if not unit or not building then
49069: LD_VAR 0 1
49073: NOT
49074: IFTRUE 49083
49076: PUSH
49077: LD_VAR 0 2
49081: NOT
49082: OR
49083: IFFALSE 49087
// exit ;
49085: GO 49315
// x := GetX ( building ) ;
49087: LD_ADDR_VAR 0 4
49091: PUSH
49092: LD_VAR 0 2
49096: PPUSH
49097: CALL_OW 250
49101: ST_TO_ADDR
// y := GetY ( building ) ;
49102: LD_ADDR_VAR 0 6
49106: PUSH
49107: LD_VAR 0 2
49111: PPUSH
49112: CALL_OW 251
49116: ST_TO_ADDR
// d := GetDir ( building ) ;
49117: LD_ADDR_VAR 0 8
49121: PUSH
49122: LD_VAR 0 2
49126: PPUSH
49127: CALL_OW 254
49131: ST_TO_ADDR
// r := 4 ;
49132: LD_ADDR_VAR 0 9
49136: PUSH
49137: LD_INT 4
49139: ST_TO_ADDR
// for i := 1 to 5 do
49140: LD_ADDR_VAR 0 10
49144: PUSH
49145: DOUBLE
49146: LD_INT 1
49148: DEC
49149: ST_TO_ADDR
49150: LD_INT 5
49152: PUSH
49153: FOR_TO
49154: IFFALSE 49313
// begin _x := ShiftX ( x , d , r + i ) ;
49156: LD_ADDR_VAR 0 5
49160: PUSH
49161: LD_VAR 0 4
49165: PPUSH
49166: LD_VAR 0 8
49170: PPUSH
49171: LD_VAR 0 9
49175: PUSH
49176: LD_VAR 0 10
49180: PLUS
49181: PPUSH
49182: CALL_OW 272
49186: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49187: LD_ADDR_VAR 0 7
49191: PUSH
49192: LD_VAR 0 6
49196: PPUSH
49197: LD_VAR 0 8
49201: PPUSH
49202: LD_VAR 0 9
49206: PUSH
49207: LD_VAR 0 10
49211: PLUS
49212: PPUSH
49213: CALL_OW 273
49217: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49218: LD_VAR 0 5
49222: PPUSH
49223: LD_VAR 0 7
49227: PPUSH
49228: CALL_OW 488
49232: IFFALSE 49267
49234: PUSH
49235: LD_VAR 0 5
49239: PPUSH
49240: LD_VAR 0 7
49244: PPUSH
49245: CALL_OW 428
49249: PPUSH
49250: CALL_OW 247
49254: PUSH
49255: LD_INT 3
49257: PUSH
49258: LD_INT 2
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: IN
49265: NOT
49266: AND
49267: IFFALSE 49311
// begin ComMoveXY ( unit , _x , _y ) ;
49269: LD_VAR 0 1
49273: PPUSH
49274: LD_VAR 0 5
49278: PPUSH
49279: LD_VAR 0 7
49283: PPUSH
49284: CALL_OW 111
// result := [ _x , _y ] ;
49288: LD_ADDR_VAR 0 3
49292: PUSH
49293: LD_VAR 0 5
49297: PUSH
49298: LD_VAR 0 7
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: ST_TO_ADDR
// exit ;
49307: POP
49308: POP
49309: GO 49315
// end ; end ;
49311: GO 49153
49313: POP
49314: POP
// end ;
49315: LD_VAR 0 3
49319: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49320: LD_INT 0
49322: PPUSH
49323: PPUSH
49324: PPUSH
// result := 0 ;
49325: LD_ADDR_VAR 0 3
49329: PUSH
49330: LD_INT 0
49332: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49333: LD_VAR 0 1
49337: PUSH
49338: LD_INT 0
49340: LESS
49341: IFTRUE 49353
49343: PUSH
49344: LD_VAR 0 1
49348: PUSH
49349: LD_INT 8
49351: GREATER
49352: OR
49353: IFTRUE 49365
49355: PUSH
49356: LD_VAR 0 2
49360: PUSH
49361: LD_INT 0
49363: LESS
49364: OR
49365: IFTRUE 49377
49367: PUSH
49368: LD_VAR 0 2
49372: PUSH
49373: LD_INT 8
49375: GREATER
49376: OR
49377: IFFALSE 49381
// exit ;
49379: GO 49456
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49381: LD_ADDR_VAR 0 4
49385: PUSH
49386: LD_INT 22
49388: PUSH
49389: LD_VAR 0 2
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PPUSH
49398: CALL_OW 69
49402: PUSH
49403: FOR_IN
49404: IFFALSE 49454
// begin un := UnitShoot ( i ) ;
49406: LD_ADDR_VAR 0 5
49410: PUSH
49411: LD_VAR 0 4
49415: PPUSH
49416: CALL_OW 504
49420: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49421: LD_VAR 0 5
49425: PPUSH
49426: CALL_OW 255
49430: PUSH
49431: LD_VAR 0 1
49435: EQUAL
49436: IFFALSE 49452
// begin result := un ;
49438: LD_ADDR_VAR 0 3
49442: PUSH
49443: LD_VAR 0 5
49447: ST_TO_ADDR
// exit ;
49448: POP
49449: POP
49450: GO 49456
// end ; end ;
49452: GO 49403
49454: POP
49455: POP
// end ;
49456: LD_VAR 0 3
49460: RET
// export function GetCargoBay ( units ) ; begin
49461: LD_INT 0
49463: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49464: LD_ADDR_VAR 0 2
49468: PUSH
49469: LD_VAR 0 1
49473: PPUSH
49474: LD_INT 2
49476: PUSH
49477: LD_INT 34
49479: PUSH
49480: LD_INT 12
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 34
49489: PUSH
49490: LD_INT 51
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 34
49499: PUSH
49500: LD_INT 32
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 34
49509: PUSH
49510: LD_INT 89
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: PPUSH
49524: CALL_OW 72
49528: ST_TO_ADDR
// end ;
49529: LD_VAR 0 2
49533: RET
// export function Negate ( value ) ; begin
49534: LD_INT 0
49536: PPUSH
// result := not value ;
49537: LD_ADDR_VAR 0 2
49541: PUSH
49542: LD_VAR 0 1
49546: NOT
49547: ST_TO_ADDR
// end ;
49548: LD_VAR 0 2
49552: RET
// export function Inc ( value ) ; begin
49553: LD_INT 0
49555: PPUSH
// result := value + 1 ;
49556: LD_ADDR_VAR 0 2
49560: PUSH
49561: LD_VAR 0 1
49565: PUSH
49566: LD_INT 1
49568: PLUS
49569: ST_TO_ADDR
// end ;
49570: LD_VAR 0 2
49574: RET
// export function Dec ( value ) ; begin
49575: LD_INT 0
49577: PPUSH
// result := value - 1 ;
49578: LD_ADDR_VAR 0 2
49582: PUSH
49583: LD_VAR 0 1
49587: PUSH
49588: LD_INT 1
49590: MINUS
49591: ST_TO_ADDR
// end ;
49592: LD_VAR 0 2
49596: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49597: LD_INT 0
49599: PPUSH
49600: PPUSH
49601: PPUSH
49602: PPUSH
49603: PPUSH
49604: PPUSH
49605: PPUSH
49606: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49607: LD_VAR 0 1
49611: PPUSH
49612: LD_VAR 0 2
49616: PPUSH
49617: CALL_OW 488
49621: NOT
49622: IFTRUE 49641
49624: PUSH
49625: LD_VAR 0 3
49629: PPUSH
49630: LD_VAR 0 4
49634: PPUSH
49635: CALL_OW 488
49639: NOT
49640: OR
49641: IFFALSE 49654
// begin result := - 1 ;
49643: LD_ADDR_VAR 0 5
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: ST_TO_ADDR
// exit ;
49652: GO 49889
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49654: LD_ADDR_VAR 0 12
49658: PUSH
49659: LD_VAR 0 1
49663: PPUSH
49664: LD_VAR 0 2
49668: PPUSH
49669: LD_VAR 0 3
49673: PPUSH
49674: LD_VAR 0 4
49678: PPUSH
49679: CALL 48725 0 4
49683: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49684: LD_ADDR_VAR 0 11
49688: PUSH
49689: LD_VAR 0 1
49693: PPUSH
49694: LD_VAR 0 2
49698: PPUSH
49699: LD_VAR 0 12
49703: PUSH
49704: LD_INT 1
49706: ARRAY
49707: PPUSH
49708: LD_VAR 0 12
49712: PUSH
49713: LD_INT 2
49715: ARRAY
49716: PPUSH
49717: CALL_OW 298
49721: ST_TO_ADDR
// distance := 9999 ;
49722: LD_ADDR_VAR 0 10
49726: PUSH
49727: LD_INT 9999
49729: ST_TO_ADDR
// for i := 0 to 5 do
49730: LD_ADDR_VAR 0 6
49734: PUSH
49735: DOUBLE
49736: LD_INT 0
49738: DEC
49739: ST_TO_ADDR
49740: LD_INT 5
49742: PUSH
49743: FOR_TO
49744: IFFALSE 49887
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49746: LD_ADDR_VAR 0 7
49750: PUSH
49751: LD_VAR 0 1
49755: PPUSH
49756: LD_VAR 0 6
49760: PPUSH
49761: LD_VAR 0 11
49765: PPUSH
49766: CALL_OW 272
49770: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49771: LD_ADDR_VAR 0 8
49775: PUSH
49776: LD_VAR 0 2
49780: PPUSH
49781: LD_VAR 0 6
49785: PPUSH
49786: LD_VAR 0 11
49790: PPUSH
49791: CALL_OW 273
49795: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49796: LD_VAR 0 7
49800: PPUSH
49801: LD_VAR 0 8
49805: PPUSH
49806: CALL_OW 488
49810: NOT
49811: IFFALSE 49815
// continue ;
49813: GO 49743
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49815: LD_ADDR_VAR 0 9
49819: PUSH
49820: LD_VAR 0 12
49824: PUSH
49825: LD_INT 1
49827: ARRAY
49828: PPUSH
49829: LD_VAR 0 12
49833: PUSH
49834: LD_INT 2
49836: ARRAY
49837: PPUSH
49838: LD_VAR 0 7
49842: PPUSH
49843: LD_VAR 0 8
49847: PPUSH
49848: CALL_OW 298
49852: ST_TO_ADDR
// if tmp < distance then
49853: LD_VAR 0 9
49857: PUSH
49858: LD_VAR 0 10
49862: LESS
49863: IFFALSE 49885
// begin result := i ;
49865: LD_ADDR_VAR 0 5
49869: PUSH
49870: LD_VAR 0 6
49874: ST_TO_ADDR
// distance := tmp ;
49875: LD_ADDR_VAR 0 10
49879: PUSH
49880: LD_VAR 0 9
49884: ST_TO_ADDR
// end ; end ;
49885: GO 49743
49887: POP
49888: POP
// end ;
49889: LD_VAR 0 5
49893: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49894: LD_INT 0
49896: PPUSH
49897: PPUSH
// if not driver or not IsInUnit ( driver ) then
49898: LD_VAR 0 1
49902: NOT
49903: IFTRUE 49917
49905: PUSH
49906: LD_VAR 0 1
49910: PPUSH
49911: CALL_OW 310
49915: NOT
49916: OR
49917: IFFALSE 49921
// exit ;
49919: GO 50011
// vehicle := IsInUnit ( driver ) ;
49921: LD_ADDR_VAR 0 3
49925: PUSH
49926: LD_VAR 0 1
49930: PPUSH
49931: CALL_OW 310
49935: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49936: LD_VAR 0 1
49940: PPUSH
49941: LD_STRING \
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: PUSH
49971: LD_STRING E
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: LD_VAR 0 3
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PPUSH
50007: CALL_OW 446
// end ;
50011: LD_VAR 0 2
50015: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50016: LD_INT 0
50018: PPUSH
50019: PPUSH
// if not driver or not IsInUnit ( driver ) then
50020: LD_VAR 0 1
50024: NOT
50025: IFTRUE 50039
50027: PUSH
50028: LD_VAR 0 1
50032: PPUSH
50033: CALL_OW 310
50037: NOT
50038: OR
50039: IFFALSE 50043
// exit ;
50041: GO 50133
// vehicle := IsInUnit ( driver ) ;
50043: LD_ADDR_VAR 0 3
50047: PUSH
50048: LD_VAR 0 1
50052: PPUSH
50053: CALL_OW 310
50057: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50058: LD_VAR 0 1
50062: PPUSH
50063: LD_STRING \
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: PUSH
50093: LD_STRING E
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: LD_VAR 0 3
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PPUSH
50129: CALL_OW 447
// end ;
50133: LD_VAR 0 2
50137: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50138: LD_INT 0
50140: PPUSH
50141: PPUSH
50142: PPUSH
// tmp := [ ] ;
50143: LD_ADDR_VAR 0 5
50147: PUSH
50148: EMPTY
50149: ST_TO_ADDR
// for i in units do
50150: LD_ADDR_VAR 0 4
50154: PUSH
50155: LD_VAR 0 1
50159: PUSH
50160: FOR_IN
50161: IFFALSE 50199
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50163: LD_ADDR_VAR 0 5
50167: PUSH
50168: LD_VAR 0 5
50172: PPUSH
50173: LD_VAR 0 5
50177: PUSH
50178: LD_INT 1
50180: PLUS
50181: PPUSH
50182: LD_VAR 0 4
50186: PPUSH
50187: CALL_OW 256
50191: PPUSH
50192: CALL_OW 2
50196: ST_TO_ADDR
50197: GO 50160
50199: POP
50200: POP
// if not tmp then
50201: LD_VAR 0 5
50205: NOT
50206: IFFALSE 50210
// exit ;
50208: GO 50258
// if asc then
50210: LD_VAR 0 2
50214: IFFALSE 50238
// result := SortListByListAsc ( units , tmp ) else
50216: LD_ADDR_VAR 0 3
50220: PUSH
50221: LD_VAR 0 1
50225: PPUSH
50226: LD_VAR 0 5
50230: PPUSH
50231: CALL_OW 76
50235: ST_TO_ADDR
50236: GO 50258
// result := SortListByListDesc ( units , tmp ) ;
50238: LD_ADDR_VAR 0 3
50242: PUSH
50243: LD_VAR 0 1
50247: PPUSH
50248: LD_VAR 0 5
50252: PPUSH
50253: CALL_OW 77
50257: ST_TO_ADDR
// end ;
50258: LD_VAR 0 3
50262: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50263: LD_INT 0
50265: PPUSH
50266: PPUSH
// task := GetTaskList ( mech ) ;
50267: LD_ADDR_VAR 0 4
50271: PUSH
50272: LD_VAR 0 1
50276: PPUSH
50277: CALL_OW 437
50281: ST_TO_ADDR
// if not task then
50282: LD_VAR 0 4
50286: NOT
50287: IFFALSE 50291
// exit ;
50289: GO 50335
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50291: LD_ADDR_VAR 0 3
50295: PUSH
50296: LD_VAR 0 4
50300: PUSH
50301: LD_INT 1
50303: ARRAY
50304: PUSH
50305: LD_INT 1
50307: ARRAY
50308: PUSH
50309: LD_STRING r
50311: EQUAL
50312: IFFALSE 50334
50314: PUSH
50315: LD_VAR 0 4
50319: PUSH
50320: LD_INT 1
50322: ARRAY
50323: PUSH
50324: LD_INT 4
50326: ARRAY
50327: PUSH
50328: LD_VAR 0 2
50332: EQUAL
50333: AND
50334: ST_TO_ADDR
// end ;
50335: LD_VAR 0 3
50339: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50340: LD_INT 0
50342: PPUSH
// SetDir ( unit , d ) ;
50343: LD_VAR 0 1
50347: PPUSH
50348: LD_VAR 0 4
50352: PPUSH
50353: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50357: LD_ADDR_VAR 0 6
50361: PUSH
50362: LD_VAR 0 1
50366: PPUSH
50367: LD_VAR 0 2
50371: PPUSH
50372: LD_VAR 0 3
50376: PPUSH
50377: LD_VAR 0 5
50381: PPUSH
50382: CALL_OW 48
50386: ST_TO_ADDR
// end ;
50387: LD_VAR 0 6
50391: RET
// export function ToNaturalNumber ( number ) ; begin
50392: LD_INT 0
50394: PPUSH
// result := number div 1 ;
50395: LD_ADDR_VAR 0 2
50399: PUSH
50400: LD_VAR 0 1
50404: PUSH
50405: LD_INT 1
50407: DIV
50408: ST_TO_ADDR
// if number < 0 then
50409: LD_VAR 0 1
50413: PUSH
50414: LD_INT 0
50416: LESS
50417: IFFALSE 50427
// result := 0 ;
50419: LD_ADDR_VAR 0 2
50423: PUSH
50424: LD_INT 0
50426: ST_TO_ADDR
// end ;
50427: LD_VAR 0 2
50431: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50432: LD_INT 0
50434: PPUSH
50435: PPUSH
50436: PPUSH
// if not buildings then
50437: LD_VAR 0 1
50441: NOT
50442: IFFALSE 50446
// exit ;
50444: GO 50561
// tmp := [ ] ;
50446: LD_ADDR_VAR 0 5
50450: PUSH
50451: EMPTY
50452: ST_TO_ADDR
// for b in buildings do
50453: LD_ADDR_VAR 0 4
50457: PUSH
50458: LD_VAR 0 1
50462: PUSH
50463: FOR_IN
50464: IFFALSE 50502
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50466: LD_ADDR_VAR 0 5
50470: PUSH
50471: LD_VAR 0 5
50475: PPUSH
50476: LD_VAR 0 5
50480: PUSH
50481: LD_INT 1
50483: PLUS
50484: PPUSH
50485: LD_VAR 0 4
50489: PPUSH
50490: CALL_OW 266
50494: PPUSH
50495: CALL_OW 1
50499: ST_TO_ADDR
50500: GO 50463
50502: POP
50503: POP
// if not tmp then
50504: LD_VAR 0 5
50508: NOT
50509: IFFALSE 50513
// exit ;
50511: GO 50561
// if asc then
50513: LD_VAR 0 2
50517: IFFALSE 50541
// result := SortListByListAsc ( buildings , tmp ) else
50519: LD_ADDR_VAR 0 3
50523: PUSH
50524: LD_VAR 0 1
50528: PPUSH
50529: LD_VAR 0 5
50533: PPUSH
50534: CALL_OW 76
50538: ST_TO_ADDR
50539: GO 50561
// result := SortListByListDesc ( buildings , tmp ) ;
50541: LD_ADDR_VAR 0 3
50545: PUSH
50546: LD_VAR 0 1
50550: PPUSH
50551: LD_VAR 0 5
50555: PPUSH
50556: CALL_OW 77
50560: ST_TO_ADDR
// end ;
50561: LD_VAR 0 3
50565: RET
// export function SortByClass ( units , class ) ; var un ; begin
50566: LD_INT 0
50568: PPUSH
50569: PPUSH
// if not units or not class then
50570: LD_VAR 0 1
50574: NOT
50575: IFTRUE 50584
50577: PUSH
50578: LD_VAR 0 2
50582: NOT
50583: OR
50584: IFFALSE 50588
// exit ;
50586: GO 50683
// result := [ ] ;
50588: LD_ADDR_VAR 0 3
50592: PUSH
50593: EMPTY
50594: ST_TO_ADDR
// for un in units do
50595: LD_ADDR_VAR 0 4
50599: PUSH
50600: LD_VAR 0 1
50604: PUSH
50605: FOR_IN
50606: IFFALSE 50681
// if GetClass ( un ) = class then
50608: LD_VAR 0 4
50612: PPUSH
50613: CALL_OW 257
50617: PUSH
50618: LD_VAR 0 2
50622: EQUAL
50623: IFFALSE 50650
// result := Insert ( result , 1 , un ) else
50625: LD_ADDR_VAR 0 3
50629: PUSH
50630: LD_VAR 0 3
50634: PPUSH
50635: LD_INT 1
50637: PPUSH
50638: LD_VAR 0 4
50642: PPUSH
50643: CALL_OW 2
50647: ST_TO_ADDR
50648: GO 50679
// result := Replace ( result , result + 1 , un ) ;
50650: LD_ADDR_VAR 0 3
50654: PUSH
50655: LD_VAR 0 3
50659: PPUSH
50660: LD_VAR 0 3
50664: PUSH
50665: LD_INT 1
50667: PLUS
50668: PPUSH
50669: LD_VAR 0 4
50673: PPUSH
50674: CALL_OW 1
50678: ST_TO_ADDR
50679: GO 50605
50681: POP
50682: POP
// end ;
50683: LD_VAR 0 3
50687: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50688: LD_INT 0
50690: PPUSH
50691: PPUSH
50692: PPUSH
50693: PPUSH
50694: PPUSH
50695: PPUSH
50696: PPUSH
// result := [ ] ;
50697: LD_ADDR_VAR 0 4
50701: PUSH
50702: EMPTY
50703: ST_TO_ADDR
// if x - r < 0 then
50704: LD_VAR 0 1
50708: PUSH
50709: LD_VAR 0 3
50713: MINUS
50714: PUSH
50715: LD_INT 0
50717: LESS
50718: IFFALSE 50730
// min_x := 0 else
50720: LD_ADDR_VAR 0 8
50724: PUSH
50725: LD_INT 0
50727: ST_TO_ADDR
50728: GO 50746
// min_x := x - r ;
50730: LD_ADDR_VAR 0 8
50734: PUSH
50735: LD_VAR 0 1
50739: PUSH
50740: LD_VAR 0 3
50744: MINUS
50745: ST_TO_ADDR
// if y - r < 0 then
50746: LD_VAR 0 2
50750: PUSH
50751: LD_VAR 0 3
50755: MINUS
50756: PUSH
50757: LD_INT 0
50759: LESS
50760: IFFALSE 50772
// min_y := 0 else
50762: LD_ADDR_VAR 0 7
50766: PUSH
50767: LD_INT 0
50769: ST_TO_ADDR
50770: GO 50788
// min_y := y - r ;
50772: LD_ADDR_VAR 0 7
50776: PUSH
50777: LD_VAR 0 2
50781: PUSH
50782: LD_VAR 0 3
50786: MINUS
50787: ST_TO_ADDR
// max_x := x + r ;
50788: LD_ADDR_VAR 0 9
50792: PUSH
50793: LD_VAR 0 1
50797: PUSH
50798: LD_VAR 0 3
50802: PLUS
50803: ST_TO_ADDR
// max_y := y + r ;
50804: LD_ADDR_VAR 0 10
50808: PUSH
50809: LD_VAR 0 2
50813: PUSH
50814: LD_VAR 0 3
50818: PLUS
50819: ST_TO_ADDR
// for _x = min_x to max_x do
50820: LD_ADDR_VAR 0 5
50824: PUSH
50825: DOUBLE
50826: LD_VAR 0 8
50830: DEC
50831: ST_TO_ADDR
50832: LD_VAR 0 9
50836: PUSH
50837: FOR_TO
50838: IFFALSE 50939
// for _y = min_y to max_y do
50840: LD_ADDR_VAR 0 6
50844: PUSH
50845: DOUBLE
50846: LD_VAR 0 7
50850: DEC
50851: ST_TO_ADDR
50852: LD_VAR 0 10
50856: PUSH
50857: FOR_TO
50858: IFFALSE 50935
// begin if not ValidHex ( _x , _y ) then
50860: LD_VAR 0 5
50864: PPUSH
50865: LD_VAR 0 6
50869: PPUSH
50870: CALL_OW 488
50874: NOT
50875: IFFALSE 50879
// continue ;
50877: GO 50857
// if GetResourceTypeXY ( _x , _y ) then
50879: LD_VAR 0 5
50883: PPUSH
50884: LD_VAR 0 6
50888: PPUSH
50889: CALL_OW 283
50893: IFFALSE 50933
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50895: LD_ADDR_VAR 0 4
50899: PUSH
50900: LD_VAR 0 4
50904: PPUSH
50905: LD_VAR 0 4
50909: PUSH
50910: LD_INT 1
50912: PLUS
50913: PPUSH
50914: LD_VAR 0 5
50918: PUSH
50919: LD_VAR 0 6
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PPUSH
50928: CALL_OW 1
50932: ST_TO_ADDR
// end ;
50933: GO 50857
50935: POP
50936: POP
50937: GO 50837
50939: POP
50940: POP
// end ;
50941: LD_VAR 0 4
50945: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50946: LD_INT 0
50948: PPUSH
50949: PPUSH
50950: PPUSH
50951: PPUSH
50952: PPUSH
50953: PPUSH
50954: PPUSH
50955: PPUSH
// if not units then
50956: LD_VAR 0 1
50960: NOT
50961: IFFALSE 50965
// exit ;
50963: GO 51497
// result := UnitFilter ( units , [ f_ok ] ) ;
50965: LD_ADDR_VAR 0 3
50969: PUSH
50970: LD_VAR 0 1
50974: PPUSH
50975: LD_INT 50
50977: PUSH
50978: EMPTY
50979: LIST
50980: PPUSH
50981: CALL_OW 72
50985: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50986: LD_ADDR_VAR 0 8
50990: PUSH
50991: LD_VAR 0 1
50995: PUSH
50996: LD_INT 1
50998: ARRAY
50999: PPUSH
51000: CALL_OW 255
51004: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51005: LD_ADDR_VAR 0 10
51009: PUSH
51010: LD_INT 29
51012: PUSH
51013: LD_INT 91
51015: PUSH
51016: LD_INT 49
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: LIST
51023: ST_TO_ADDR
// if not result then
51024: LD_VAR 0 3
51028: NOT
51029: IFFALSE 51033
// exit ;
51031: GO 51497
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51033: LD_ADDR_VAR 0 5
51037: PUSH
51038: LD_INT 81
51040: PUSH
51041: LD_VAR 0 8
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PPUSH
51050: CALL_OW 69
51054: ST_TO_ADDR
// for i in result do
51055: LD_ADDR_VAR 0 4
51059: PUSH
51060: LD_VAR 0 3
51064: PUSH
51065: FOR_IN
51066: IFFALSE 51495
// begin tag := GetTag ( i ) + 1 ;
51068: LD_ADDR_VAR 0 9
51072: PUSH
51073: LD_VAR 0 4
51077: PPUSH
51078: CALL_OW 110
51082: PUSH
51083: LD_INT 1
51085: PLUS
51086: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51087: LD_ADDR_VAR 0 7
51091: PUSH
51092: LD_VAR 0 4
51096: PPUSH
51097: CALL_OW 250
51101: PPUSH
51102: LD_VAR 0 4
51106: PPUSH
51107: CALL_OW 251
51111: PPUSH
51112: LD_INT 4
51114: PPUSH
51115: CALL 50688 0 3
51119: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51120: LD_VAR 0 4
51124: PPUSH
51125: CALL_OW 247
51129: PUSH
51130: LD_INT 2
51132: EQUAL
51133: IFFALSE 51145
51135: PUSH
51136: LD_VAR 0 7
51140: PUSH
51141: LD_INT 2
51143: GREATER
51144: AND
51145: IFFALSE 51165
51147: PUSH
51148: LD_VAR 0 4
51152: PPUSH
51153: CALL_OW 264
51157: PUSH
51158: LD_VAR 0 10
51162: IN
51163: NOT
51164: AND
51165: IFFALSE 51204
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51167: LD_VAR 0 4
51171: PPUSH
51172: LD_VAR 0 7
51176: PUSH
51177: LD_INT 1
51179: ARRAY
51180: PUSH
51181: LD_INT 1
51183: ARRAY
51184: PPUSH
51185: LD_VAR 0 7
51189: PUSH
51190: LD_INT 1
51192: ARRAY
51193: PUSH
51194: LD_INT 2
51196: ARRAY
51197: PPUSH
51198: CALL_OW 116
51202: GO 51493
// if path > tag then
51204: LD_VAR 0 2
51208: PUSH
51209: LD_VAR 0 9
51213: GREATER
51214: IFFALSE 51422
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51216: LD_ADDR_VAR 0 6
51220: PUSH
51221: LD_VAR 0 5
51225: PPUSH
51226: LD_INT 91
51228: PUSH
51229: LD_VAR 0 4
51233: PUSH
51234: LD_INT 8
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: LIST
51241: PPUSH
51242: CALL_OW 72
51246: ST_TO_ADDR
// if nearEnemy then
51247: LD_VAR 0 6
51251: IFFALSE 51320
// begin if GetWeapon ( i ) = ru_time_lapser then
51253: LD_VAR 0 4
51257: PPUSH
51258: CALL_OW 264
51262: PUSH
51263: LD_INT 49
51265: EQUAL
51266: IFFALSE 51294
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51268: LD_VAR 0 4
51272: PPUSH
51273: LD_VAR 0 6
51277: PPUSH
51278: LD_VAR 0 4
51282: PPUSH
51283: CALL_OW 74
51287: PPUSH
51288: CALL_OW 112
51292: GO 51318
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51294: LD_VAR 0 4
51298: PPUSH
51299: LD_VAR 0 6
51303: PPUSH
51304: LD_VAR 0 4
51308: PPUSH
51309: CALL_OW 74
51313: PPUSH
51314: CALL 52578 0 2
// end else
51318: GO 51420
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51320: LD_VAR 0 4
51324: PPUSH
51325: LD_VAR 0 2
51329: PUSH
51330: LD_VAR 0 9
51334: ARRAY
51335: PUSH
51336: LD_INT 1
51338: ARRAY
51339: PPUSH
51340: LD_VAR 0 2
51344: PUSH
51345: LD_VAR 0 9
51349: ARRAY
51350: PUSH
51351: LD_INT 2
51353: ARRAY
51354: PPUSH
51355: CALL_OW 297
51359: PUSH
51360: LD_INT 6
51362: GREATER
51363: IFFALSE 51406
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51365: LD_VAR 0 4
51369: PPUSH
51370: LD_VAR 0 2
51374: PUSH
51375: LD_VAR 0 9
51379: ARRAY
51380: PUSH
51381: LD_INT 1
51383: ARRAY
51384: PPUSH
51385: LD_VAR 0 2
51389: PUSH
51390: LD_VAR 0 9
51394: ARRAY
51395: PUSH
51396: LD_INT 2
51398: ARRAY
51399: PPUSH
51400: CALL_OW 114
51404: GO 51420
// SetTag ( i , tag ) ;
51406: LD_VAR 0 4
51410: PPUSH
51411: LD_VAR 0 9
51415: PPUSH
51416: CALL_OW 109
// end else
51420: GO 51493
// if enemy then
51422: LD_VAR 0 5
51426: IFFALSE 51493
// begin if GetWeapon ( i ) = ru_time_lapser then
51428: LD_VAR 0 4
51432: PPUSH
51433: CALL_OW 264
51437: PUSH
51438: LD_INT 49
51440: EQUAL
51441: IFFALSE 51469
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51443: LD_VAR 0 4
51447: PPUSH
51448: LD_VAR 0 5
51452: PPUSH
51453: LD_VAR 0 4
51457: PPUSH
51458: CALL_OW 74
51462: PPUSH
51463: CALL_OW 112
51467: GO 51493
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51469: LD_VAR 0 4
51473: PPUSH
51474: LD_VAR 0 5
51478: PPUSH
51479: LD_VAR 0 4
51483: PPUSH
51484: CALL_OW 74
51488: PPUSH
51489: CALL 52578 0 2
// end ; end ;
51493: GO 51065
51495: POP
51496: POP
// end ;
51497: LD_VAR 0 3
51501: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51502: LD_INT 0
51504: PPUSH
51505: PPUSH
51506: PPUSH
// if not unit or IsInUnit ( unit ) then
51507: LD_VAR 0 1
51511: NOT
51512: IFTRUE 51525
51514: PUSH
51515: LD_VAR 0 1
51519: PPUSH
51520: CALL_OW 310
51524: OR
51525: IFFALSE 51529
// exit ;
51527: GO 51620
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51529: LD_ADDR_VAR 0 4
51533: PUSH
51534: LD_VAR 0 1
51538: PPUSH
51539: CALL_OW 250
51543: PPUSH
51544: LD_VAR 0 2
51548: PPUSH
51549: LD_INT 1
51551: PPUSH
51552: CALL_OW 272
51556: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51557: LD_ADDR_VAR 0 5
51561: PUSH
51562: LD_VAR 0 1
51566: PPUSH
51567: CALL_OW 251
51571: PPUSH
51572: LD_VAR 0 2
51576: PPUSH
51577: LD_INT 1
51579: PPUSH
51580: CALL_OW 273
51584: ST_TO_ADDR
// if ValidHex ( x , y ) then
51585: LD_VAR 0 4
51589: PPUSH
51590: LD_VAR 0 5
51594: PPUSH
51595: CALL_OW 488
51599: IFFALSE 51620
// ComTurnXY ( unit , x , y ) ;
51601: LD_VAR 0 1
51605: PPUSH
51606: LD_VAR 0 4
51610: PPUSH
51611: LD_VAR 0 5
51615: PPUSH
51616: CALL_OW 118
// end ;
51620: LD_VAR 0 3
51624: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51625: LD_INT 0
51627: PPUSH
51628: PPUSH
// result := false ;
51629: LD_ADDR_VAR 0 3
51633: PUSH
51634: LD_INT 0
51636: ST_TO_ADDR
// if not units then
51637: LD_VAR 0 2
51641: NOT
51642: IFFALSE 51646
// exit ;
51644: GO 51691
// for i in units do
51646: LD_ADDR_VAR 0 4
51650: PUSH
51651: LD_VAR 0 2
51655: PUSH
51656: FOR_IN
51657: IFFALSE 51689
// if See ( side , i ) then
51659: LD_VAR 0 1
51663: PPUSH
51664: LD_VAR 0 4
51668: PPUSH
51669: CALL_OW 292
51673: IFFALSE 51687
// begin result := true ;
51675: LD_ADDR_VAR 0 3
51679: PUSH
51680: LD_INT 1
51682: ST_TO_ADDR
// exit ;
51683: POP
51684: POP
51685: GO 51691
// end ;
51687: GO 51656
51689: POP
51690: POP
// end ;
51691: LD_VAR 0 3
51695: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51696: LD_INT 0
51698: PPUSH
51699: PPUSH
51700: PPUSH
51701: PPUSH
// if not unit or not points then
51702: LD_VAR 0 1
51706: NOT
51707: IFTRUE 51716
51709: PUSH
51710: LD_VAR 0 2
51714: NOT
51715: OR
51716: IFFALSE 51720
// exit ;
51718: GO 51810
// dist := 99999 ;
51720: LD_ADDR_VAR 0 5
51724: PUSH
51725: LD_INT 99999
51727: ST_TO_ADDR
// for i in points do
51728: LD_ADDR_VAR 0 4
51732: PUSH
51733: LD_VAR 0 2
51737: PUSH
51738: FOR_IN
51739: IFFALSE 51808
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51741: LD_ADDR_VAR 0 6
51745: PUSH
51746: LD_VAR 0 1
51750: PPUSH
51751: LD_VAR 0 4
51755: PUSH
51756: LD_INT 1
51758: ARRAY
51759: PPUSH
51760: LD_VAR 0 4
51764: PUSH
51765: LD_INT 2
51767: ARRAY
51768: PPUSH
51769: CALL_OW 297
51773: ST_TO_ADDR
// if tmpDist < dist then
51774: LD_VAR 0 6
51778: PUSH
51779: LD_VAR 0 5
51783: LESS
51784: IFFALSE 51806
// begin result := i ;
51786: LD_ADDR_VAR 0 3
51790: PUSH
51791: LD_VAR 0 4
51795: ST_TO_ADDR
// dist := tmpDist ;
51796: LD_ADDR_VAR 0 5
51800: PUSH
51801: LD_VAR 0 6
51805: ST_TO_ADDR
// end ; end ;
51806: GO 51738
51808: POP
51809: POP
// end ;
51810: LD_VAR 0 3
51814: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51815: LD_INT 0
51817: PPUSH
// uc_side := side ;
51818: LD_ADDR_OWVAR 20
51822: PUSH
51823: LD_VAR 0 1
51827: ST_TO_ADDR
// uc_nation := 3 ;
51828: LD_ADDR_OWVAR 21
51832: PUSH
51833: LD_INT 3
51835: ST_TO_ADDR
// vc_chassis := 25 ;
51836: LD_ADDR_OWVAR 37
51840: PUSH
51841: LD_INT 25
51843: ST_TO_ADDR
// vc_engine := engine_siberite ;
51844: LD_ADDR_OWVAR 39
51848: PUSH
51849: LD_INT 3
51851: ST_TO_ADDR
// vc_control := control_computer ;
51852: LD_ADDR_OWVAR 38
51856: PUSH
51857: LD_INT 3
51859: ST_TO_ADDR
// vc_weapon := 59 ;
51860: LD_ADDR_OWVAR 40
51864: PUSH
51865: LD_INT 59
51867: ST_TO_ADDR
// result := CreateVehicle ;
51868: LD_ADDR_VAR 0 5
51872: PUSH
51873: CALL_OW 45
51877: ST_TO_ADDR
// SetDir ( result , d ) ;
51878: LD_VAR 0 5
51882: PPUSH
51883: LD_VAR 0 4
51887: PPUSH
51888: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51892: LD_VAR 0 5
51896: PPUSH
51897: LD_VAR 0 2
51901: PPUSH
51902: LD_VAR 0 3
51906: PPUSH
51907: LD_INT 0
51909: PPUSH
51910: CALL_OW 48
// end ;
51914: LD_VAR 0 5
51918: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51919: LD_INT 0
51921: PPUSH
51922: PPUSH
51923: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51924: LD_ADDR_VAR 0 2
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51947: LD_VAR 0 1
51951: NOT
51952: IFTRUE 51985
51954: PUSH
51955: LD_VAR 0 1
51959: PPUSH
51960: CALL_OW 264
51964: PUSH
51965: LD_INT 12
51967: PUSH
51968: LD_INT 51
51970: PUSH
51971: LD_INT 32
51973: PUSH
51974: LD_INT 89
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: IN
51983: NOT
51984: OR
51985: IFFALSE 51989
// exit ;
51987: GO 52087
// for i := 1 to 3 do
51989: LD_ADDR_VAR 0 3
51993: PUSH
51994: DOUBLE
51995: LD_INT 1
51997: DEC
51998: ST_TO_ADDR
51999: LD_INT 3
52001: PUSH
52002: FOR_TO
52003: IFFALSE 52085
// begin tmp := GetCargo ( cargo , i ) ;
52005: LD_ADDR_VAR 0 4
52009: PUSH
52010: LD_VAR 0 1
52014: PPUSH
52015: LD_VAR 0 3
52019: PPUSH
52020: CALL_OW 289
52024: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52025: LD_ADDR_VAR 0 2
52029: PUSH
52030: LD_VAR 0 2
52034: PPUSH
52035: LD_VAR 0 3
52039: PPUSH
52040: LD_VAR 0 4
52044: PPUSH
52045: CALL_OW 1
52049: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52050: LD_ADDR_VAR 0 2
52054: PUSH
52055: LD_VAR 0 2
52059: PPUSH
52060: LD_INT 4
52062: PPUSH
52063: LD_VAR 0 2
52067: PUSH
52068: LD_INT 4
52070: ARRAY
52071: PUSH
52072: LD_VAR 0 4
52076: PLUS
52077: PPUSH
52078: CALL_OW 1
52082: ST_TO_ADDR
// end ;
52083: GO 52002
52085: POP
52086: POP
// end ;
52087: LD_VAR 0 2
52091: RET
// export function Length ( array ) ; begin
52092: LD_INT 0
52094: PPUSH
// result := array + 0 ;
52095: LD_ADDR_VAR 0 2
52099: PUSH
52100: LD_VAR 0 1
52104: PUSH
52105: LD_INT 0
52107: PLUS
52108: ST_TO_ADDR
// end ;
52109: LD_VAR 0 2
52113: RET
// export function PrepareArray ( array ) ; begin
52114: LD_INT 0
52116: PPUSH
// result := array diff 0 ;
52117: LD_ADDR_VAR 0 2
52121: PUSH
52122: LD_VAR 0 1
52126: PUSH
52127: LD_INT 0
52129: DIFF
52130: ST_TO_ADDR
// if not result [ 1 ] then
52131: LD_VAR 0 2
52135: PUSH
52136: LD_INT 1
52138: ARRAY
52139: NOT
52140: IFFALSE 52160
// result := Delete ( result , 1 ) ;
52142: LD_ADDR_VAR 0 2
52146: PUSH
52147: LD_VAR 0 2
52151: PPUSH
52152: LD_INT 1
52154: PPUSH
52155: CALL_OW 3
52159: ST_TO_ADDR
// end ;
52160: LD_VAR 0 2
52164: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52165: LD_INT 0
52167: PPUSH
52168: PPUSH
52169: PPUSH
52170: PPUSH
// sibRocketRange := 25 ;
52171: LD_ADDR_VAR 0 6
52175: PUSH
52176: LD_INT 25
52178: ST_TO_ADDR
// result := false ;
52179: LD_ADDR_VAR 0 4
52183: PUSH
52184: LD_INT 0
52186: ST_TO_ADDR
// for i := 0 to 5 do
52187: LD_ADDR_VAR 0 5
52191: PUSH
52192: DOUBLE
52193: LD_INT 0
52195: DEC
52196: ST_TO_ADDR
52197: LD_INT 5
52199: PUSH
52200: FOR_TO
52201: IFFALSE 52268
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52203: LD_VAR 0 1
52207: PPUSH
52208: LD_VAR 0 5
52212: PPUSH
52213: LD_VAR 0 6
52217: PPUSH
52218: CALL_OW 272
52222: PPUSH
52223: LD_VAR 0 2
52227: PPUSH
52228: LD_VAR 0 5
52232: PPUSH
52233: LD_VAR 0 6
52237: PPUSH
52238: CALL_OW 273
52242: PPUSH
52243: LD_VAR 0 3
52247: PPUSH
52248: CALL_OW 309
52252: IFFALSE 52266
// begin result := true ;
52254: LD_ADDR_VAR 0 4
52258: PUSH
52259: LD_INT 1
52261: ST_TO_ADDR
// exit ;
52262: POP
52263: POP
52264: GO 52270
// end ;
52266: GO 52200
52268: POP
52269: POP
// end ;
52270: LD_VAR 0 4
52274: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52275: LD_INT 0
52277: PPUSH
52278: PPUSH
52279: PPUSH
// if btype = b_depot then
52280: LD_VAR 0 2
52284: PUSH
52285: LD_INT 0
52287: EQUAL
52288: IFFALSE 52300
// begin result := true ;
52290: LD_ADDR_VAR 0 3
52294: PUSH
52295: LD_INT 1
52297: ST_TO_ADDR
// exit ;
52298: GO 52420
// end ; pom := GetBase ( depot ) ;
52300: LD_ADDR_VAR 0 4
52304: PUSH
52305: LD_VAR 0 1
52309: PPUSH
52310: CALL_OW 274
52314: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52315: LD_ADDR_VAR 0 5
52319: PUSH
52320: LD_VAR 0 2
52324: PPUSH
52325: LD_VAR 0 1
52329: PPUSH
52330: CALL_OW 248
52334: PPUSH
52335: CALL_OW 450
52339: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52340: LD_ADDR_VAR 0 3
52344: PUSH
52345: LD_VAR 0 4
52349: PPUSH
52350: LD_INT 1
52352: PPUSH
52353: CALL_OW 275
52357: PUSH
52358: LD_VAR 0 5
52362: PUSH
52363: LD_INT 1
52365: ARRAY
52366: GREATEREQUAL
52367: IFFALSE 52393
52369: PUSH
52370: LD_VAR 0 4
52374: PPUSH
52375: LD_INT 2
52377: PPUSH
52378: CALL_OW 275
52382: PUSH
52383: LD_VAR 0 5
52387: PUSH
52388: LD_INT 2
52390: ARRAY
52391: GREATEREQUAL
52392: AND
52393: IFFALSE 52419
52395: PUSH
52396: LD_VAR 0 4
52400: PPUSH
52401: LD_INT 3
52403: PPUSH
52404: CALL_OW 275
52408: PUSH
52409: LD_VAR 0 5
52413: PUSH
52414: LD_INT 3
52416: ARRAY
52417: GREATEREQUAL
52418: AND
52419: ST_TO_ADDR
// end ;
52420: LD_VAR 0 3
52424: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52425: LD_INT 0
52427: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52428: LD_VAR 0 1
52432: PPUSH
52433: LD_VAR 0 2
52437: PPUSH
52438: LD_INT 0
52440: PPUSH
52441: LD_INT 0
52443: PPUSH
52444: LD_INT 1
52446: PPUSH
52447: LD_INT 0
52449: PPUSH
52450: CALL_OW 587
// end ;
52454: LD_VAR 0 3
52458: RET
// export function CenterOnNow ( unit ) ; begin
52459: LD_INT 0
52461: PPUSH
// result := IsInUnit ( unit ) ;
52462: LD_ADDR_VAR 0 2
52466: PUSH
52467: LD_VAR 0 1
52471: PPUSH
52472: CALL_OW 310
52476: ST_TO_ADDR
// if not result then
52477: LD_VAR 0 2
52481: NOT
52482: IFFALSE 52494
// result := unit ;
52484: LD_ADDR_VAR 0 2
52488: PUSH
52489: LD_VAR 0 1
52493: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52494: LD_VAR 0 1
52498: PPUSH
52499: CALL_OW 87
// end ;
52503: LD_VAR 0 2
52507: RET
// export function ComMoveHex ( unit , hex ) ; begin
52508: LD_INT 0
52510: PPUSH
// if not hex then
52511: LD_VAR 0 2
52515: NOT
52516: IFFALSE 52520
// exit ;
52518: GO 52573
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52520: LD_VAR 0 2
52524: PUSH
52525: LD_INT 1
52527: ARRAY
52528: PPUSH
52529: LD_VAR 0 2
52533: PUSH
52534: LD_INT 2
52536: ARRAY
52537: PPUSH
52538: CALL_OW 428
52542: IFFALSE 52546
// exit ;
52544: GO 52573
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52546: LD_VAR 0 1
52550: PPUSH
52551: LD_VAR 0 2
52555: PUSH
52556: LD_INT 1
52558: ARRAY
52559: PPUSH
52560: LD_VAR 0 2
52564: PUSH
52565: LD_INT 2
52567: ARRAY
52568: PPUSH
52569: CALL_OW 111
// end ;
52573: LD_VAR 0 3
52577: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52578: LD_INT 0
52580: PPUSH
52581: PPUSH
52582: PPUSH
// if not unit or not enemy then
52583: LD_VAR 0 1
52587: NOT
52588: IFTRUE 52597
52590: PUSH
52591: LD_VAR 0 2
52595: NOT
52596: OR
52597: IFFALSE 52601
// exit ;
52599: GO 52727
// x := GetX ( enemy ) ;
52601: LD_ADDR_VAR 0 4
52605: PUSH
52606: LD_VAR 0 2
52610: PPUSH
52611: CALL_OW 250
52615: ST_TO_ADDR
// y := GetY ( enemy ) ;
52616: LD_ADDR_VAR 0 5
52620: PUSH
52621: LD_VAR 0 2
52625: PPUSH
52626: CALL_OW 251
52630: ST_TO_ADDR
// if ValidHex ( x , y ) then
52631: LD_VAR 0 4
52635: PPUSH
52636: LD_VAR 0 5
52640: PPUSH
52641: CALL_OW 488
52645: IFFALSE 52727
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52647: LD_VAR 0 2
52651: PPUSH
52652: CALL_OW 247
52656: PUSH
52657: LD_INT 3
52659: PUSH
52660: LD_INT 2
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: IN
52667: IFTRUE 52690
52669: PUSH
52670: LD_VAR 0 1
52674: PPUSH
52675: CALL_OW 255
52679: PPUSH
52680: LD_VAR 0 2
52684: PPUSH
52685: CALL_OW 292
52689: OR
52690: IFFALSE 52708
// ComAttackUnit ( unit , enemy ) else
52692: LD_VAR 0 1
52696: PPUSH
52697: LD_VAR 0 2
52701: PPUSH
52702: CALL_OW 115
52706: GO 52727
// ComAgressiveMove ( unit , x , y ) ;
52708: LD_VAR 0 1
52712: PPUSH
52713: LD_VAR 0 4
52717: PPUSH
52718: LD_VAR 0 5
52722: PPUSH
52723: CALL_OW 114
// end ;
52727: LD_VAR 0 3
52731: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52732: LD_INT 0
52734: PPUSH
52735: PPUSH
52736: PPUSH
// list := AreaToList ( area , 0 ) ;
52737: LD_ADDR_VAR 0 5
52741: PUSH
52742: LD_VAR 0 1
52746: PPUSH
52747: LD_INT 0
52749: PPUSH
52750: CALL_OW 517
52754: ST_TO_ADDR
// if not list then
52755: LD_VAR 0 5
52759: NOT
52760: IFFALSE 52764
// exit ;
52762: GO 52894
// if all then
52764: LD_VAR 0 2
52768: IFFALSE 52856
// begin for i := 1 to list [ 1 ] do
52770: LD_ADDR_VAR 0 4
52774: PUSH
52775: DOUBLE
52776: LD_INT 1
52778: DEC
52779: ST_TO_ADDR
52780: LD_VAR 0 5
52784: PUSH
52785: LD_INT 1
52787: ARRAY
52788: PUSH
52789: FOR_TO
52790: IFFALSE 52852
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52792: LD_ADDR_VAR 0 3
52796: PUSH
52797: LD_VAR 0 3
52801: PPUSH
52802: LD_VAR 0 3
52806: PUSH
52807: LD_INT 1
52809: PLUS
52810: PPUSH
52811: LD_VAR 0 5
52815: PUSH
52816: LD_INT 1
52818: ARRAY
52819: PUSH
52820: LD_VAR 0 4
52824: ARRAY
52825: PUSH
52826: LD_VAR 0 5
52830: PUSH
52831: LD_INT 2
52833: ARRAY
52834: PUSH
52835: LD_VAR 0 4
52839: ARRAY
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PPUSH
52845: CALL_OW 1
52849: ST_TO_ADDR
52850: GO 52789
52852: POP
52853: POP
// exit ;
52854: GO 52894
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52856: LD_ADDR_VAR 0 3
52860: PUSH
52861: LD_VAR 0 5
52865: PUSH
52866: LD_INT 1
52868: ARRAY
52869: PUSH
52870: LD_INT 1
52872: ARRAY
52873: PUSH
52874: LD_VAR 0 5
52878: PUSH
52879: LD_INT 2
52881: ARRAY
52882: PUSH
52883: LD_INT 1
52885: ARRAY
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: EMPTY
52892: LIST
52893: ST_TO_ADDR
// end ;
52894: LD_VAR 0 3
52898: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52899: LD_INT 0
52901: PPUSH
52902: PPUSH
// list := AreaToList ( area , 0 ) ;
52903: LD_ADDR_VAR 0 4
52907: PUSH
52908: LD_VAR 0 1
52912: PPUSH
52913: LD_INT 0
52915: PPUSH
52916: CALL_OW 517
52920: ST_TO_ADDR
// if not list then
52921: LD_VAR 0 4
52925: NOT
52926: IFFALSE 52930
// exit ;
52928: GO 52971
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52930: LD_ADDR_VAR 0 3
52934: PUSH
52935: LD_VAR 0 4
52939: PUSH
52940: LD_INT 1
52942: ARRAY
52943: PUSH
52944: LD_INT 1
52946: ARRAY
52947: PUSH
52948: LD_VAR 0 4
52952: PUSH
52953: LD_INT 2
52955: ARRAY
52956: PUSH
52957: LD_INT 1
52959: ARRAY
52960: PUSH
52961: LD_VAR 0 2
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: LIST
52970: ST_TO_ADDR
// end ;
52971: LD_VAR 0 3
52975: RET
// export function First ( array ) ; begin
52976: LD_INT 0
52978: PPUSH
// if not array then
52979: LD_VAR 0 1
52983: NOT
52984: IFFALSE 52988
// exit ;
52986: GO 53002
// result := array [ 1 ] ;
52988: LD_ADDR_VAR 0 2
52992: PUSH
52993: LD_VAR 0 1
52997: PUSH
52998: LD_INT 1
53000: ARRAY
53001: ST_TO_ADDR
// end ;
53002: LD_VAR 0 2
53006: RET
// export function Last ( array ) ; begin
53007: LD_INT 0
53009: PPUSH
// if not array then
53010: LD_VAR 0 1
53014: NOT
53015: IFFALSE 53019
// exit ;
53017: GO 53035
// result := array [ array ] ;
53019: LD_ADDR_VAR 0 2
53023: PUSH
53024: LD_VAR 0 1
53028: PUSH
53029: LD_VAR 0 1
53033: ARRAY
53034: ST_TO_ADDR
// end ;
53035: LD_VAR 0 2
53039: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53040: LD_INT 0
53042: PPUSH
53043: PPUSH
// result := [ ] ;
53044: LD_ADDR_VAR 0 5
53048: PUSH
53049: EMPTY
53050: ST_TO_ADDR
// if not array then
53051: LD_VAR 0 1
53055: NOT
53056: IFFALSE 53060
// exit ;
53058: GO 53172
// for i := 1 to array do
53060: LD_ADDR_VAR 0 6
53064: PUSH
53065: DOUBLE
53066: LD_INT 1
53068: DEC
53069: ST_TO_ADDR
53070: LD_VAR 0 1
53074: PUSH
53075: FOR_TO
53076: IFFALSE 53170
// if array [ i ] [ index ] = value then
53078: LD_VAR 0 1
53082: PUSH
53083: LD_VAR 0 6
53087: ARRAY
53088: PUSH
53089: LD_VAR 0 2
53093: ARRAY
53094: PUSH
53095: LD_VAR 0 3
53099: EQUAL
53100: IFFALSE 53168
// begin if indexColumn then
53102: LD_VAR 0 4
53106: IFFALSE 53142
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53108: LD_ADDR_VAR 0 5
53112: PUSH
53113: LD_VAR 0 5
53117: PPUSH
53118: LD_VAR 0 1
53122: PUSH
53123: LD_VAR 0 6
53127: ARRAY
53128: PUSH
53129: LD_VAR 0 4
53133: ARRAY
53134: PPUSH
53135: CALL 48180 0 2
53139: ST_TO_ADDR
53140: GO 53168
// result := Join ( result , array [ i ] ) ;
53142: LD_ADDR_VAR 0 5
53146: PUSH
53147: LD_VAR 0 5
53151: PPUSH
53152: LD_VAR 0 1
53156: PUSH
53157: LD_VAR 0 6
53161: ARRAY
53162: PPUSH
53163: CALL 48180 0 2
53167: ST_TO_ADDR
// end ;
53168: GO 53075
53170: POP
53171: POP
// end ;
53172: LD_VAR 0 5
53176: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53177: LD_INT 0
53179: PPUSH
// if not vehicles or not parkingPoint then
53180: LD_VAR 0 1
53184: NOT
53185: IFTRUE 53194
53187: PUSH
53188: LD_VAR 0 2
53192: NOT
53193: OR
53194: IFFALSE 53198
// exit ;
53196: GO 53296
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53198: LD_ADDR_VAR 0 1
53202: PUSH
53203: LD_VAR 0 1
53207: PPUSH
53208: LD_INT 50
53210: PUSH
53211: EMPTY
53212: LIST
53213: PUSH
53214: LD_INT 3
53216: PUSH
53217: LD_INT 92
53219: PUSH
53220: LD_VAR 0 2
53224: PUSH
53225: LD_INT 1
53227: ARRAY
53228: PUSH
53229: LD_VAR 0 2
53233: PUSH
53234: LD_INT 2
53236: ARRAY
53237: PUSH
53238: LD_INT 8
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PPUSH
53255: CALL_OW 72
53259: ST_TO_ADDR
// if not vehicles then
53260: LD_VAR 0 1
53264: NOT
53265: IFFALSE 53269
// exit ;
53267: GO 53296
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53269: LD_VAR 0 1
53273: PPUSH
53274: LD_VAR 0 2
53278: PUSH
53279: LD_INT 1
53281: ARRAY
53282: PPUSH
53283: LD_VAR 0 2
53287: PUSH
53288: LD_INT 2
53290: ARRAY
53291: PPUSH
53292: CALL_OW 111
// end ;
53296: LD_VAR 0 3
53300: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53301: LD_INT 0
53303: PPUSH
53304: PPUSH
53305: PPUSH
// if not side or not area then
53306: LD_VAR 0 1
53310: NOT
53311: IFTRUE 53320
53313: PUSH
53314: LD_VAR 0 2
53318: NOT
53319: OR
53320: IFFALSE 53324
// exit ;
53322: GO 53443
// tmp := AreaToList ( area , 0 ) ;
53324: LD_ADDR_VAR 0 5
53328: PUSH
53329: LD_VAR 0 2
53333: PPUSH
53334: LD_INT 0
53336: PPUSH
53337: CALL_OW 517
53341: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53342: LD_ADDR_VAR 0 4
53346: PUSH
53347: DOUBLE
53348: LD_INT 1
53350: DEC
53351: ST_TO_ADDR
53352: LD_VAR 0 5
53356: PUSH
53357: LD_INT 1
53359: ARRAY
53360: PUSH
53361: FOR_TO
53362: IFFALSE 53441
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53364: LD_VAR 0 5
53368: PUSH
53369: LD_INT 1
53371: ARRAY
53372: PUSH
53373: LD_VAR 0 4
53377: ARRAY
53378: PPUSH
53379: LD_VAR 0 5
53383: PUSH
53384: LD_INT 2
53386: ARRAY
53387: PUSH
53388: LD_VAR 0 4
53392: ARRAY
53393: PPUSH
53394: CALL_OW 351
53398: IFFALSE 53439
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53400: LD_VAR 0 5
53404: PUSH
53405: LD_INT 1
53407: ARRAY
53408: PUSH
53409: LD_VAR 0 4
53413: ARRAY
53414: PPUSH
53415: LD_VAR 0 5
53419: PUSH
53420: LD_INT 2
53422: ARRAY
53423: PUSH
53424: LD_VAR 0 4
53428: ARRAY
53429: PPUSH
53430: LD_VAR 0 1
53434: PPUSH
53435: CALL_OW 244
// end ;
53439: GO 53361
53441: POP
53442: POP
// end ;
53443: LD_VAR 0 3
53447: RET
// export function UniqueArray ( array ) ; var i ; begin
53448: LD_INT 0
53450: PPUSH
53451: PPUSH
// result := [ ] ;
53452: LD_ADDR_VAR 0 2
53456: PUSH
53457: EMPTY
53458: ST_TO_ADDR
// if not array then
53459: LD_VAR 0 1
53463: NOT
53464: IFFALSE 53468
// exit ;
53466: GO 53529
// for i := 1 to array do
53468: LD_ADDR_VAR 0 3
53472: PUSH
53473: DOUBLE
53474: LD_INT 1
53476: DEC
53477: ST_TO_ADDR
53478: LD_VAR 0 1
53482: PUSH
53483: FOR_TO
53484: IFFALSE 53527
// if not array [ i ] in result then
53486: LD_VAR 0 1
53490: PUSH
53491: LD_VAR 0 3
53495: ARRAY
53496: PUSH
53497: LD_VAR 0 2
53501: IN
53502: NOT
53503: IFFALSE 53525
// result := Join ( result , i ) ;
53505: LD_ADDR_VAR 0 2
53509: PUSH
53510: LD_VAR 0 2
53514: PPUSH
53515: LD_VAR 0 3
53519: PPUSH
53520: CALL 48180 0 2
53524: ST_TO_ADDR
53525: GO 53483
53527: POP
53528: POP
// end ; end_of_file
53529: LD_VAR 0 2
53533: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53534: LD_VAR 0 1
53538: PUSH
53539: LD_INT 200
53541: DOUBLE
53542: GREATEREQUAL
53543: IFFALSE 53551
53545: LD_INT 299
53547: DOUBLE
53548: LESSEQUAL
53549: IFTRUE 53553
53551: GO 53585
53553: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53554: LD_VAR 0 1
53558: PPUSH
53559: LD_VAR 0 2
53563: PPUSH
53564: LD_VAR 0 3
53568: PPUSH
53569: LD_VAR 0 4
53573: PPUSH
53574: LD_VAR 0 5
53578: PPUSH
53579: CALL 54366 0 5
53583: GO 53662
53585: LD_INT 300
53587: DOUBLE
53588: GREATEREQUAL
53589: IFFALSE 53597
53591: LD_INT 399
53593: DOUBLE
53594: LESSEQUAL
53595: IFTRUE 53599
53597: GO 53661
53599: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53600: LD_VAR 0 1
53604: PPUSH
53605: LD_VAR 0 2
53609: PPUSH
53610: LD_VAR 0 3
53614: PPUSH
53615: LD_VAR 0 4
53619: PPUSH
53620: LD_VAR 0 5
53624: PPUSH
53625: LD_VAR 0 6
53629: PPUSH
53630: LD_VAR 0 7
53634: PPUSH
53635: LD_VAR 0 8
53639: PPUSH
53640: LD_VAR 0 9
53644: PPUSH
53645: LD_VAR 0 10
53649: PPUSH
53650: LD_VAR 0 11
53654: PPUSH
53655: CALL 61452 0 11
53659: GO 53662
53661: POP
// end ;
53662: PPOPN 11
53664: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53665: LD_VAR 0 1
53669: PPUSH
53670: LD_VAR 0 2
53674: PPUSH
53675: LD_VAR 0 3
53679: PPUSH
53680: LD_VAR 0 4
53684: PPUSH
53685: LD_VAR 0 5
53689: PPUSH
53690: CALL 53747 0 5
// end ; end_of_file
53694: PPOPN 5
53696: END
// export function SOS_UnitDestroyed ( un ) ; begin
53697: LD_INT 0
53699: PPUSH
// ComRadiation ( un ) ;
53700: LD_VAR 0 1
53704: PPUSH
53705: CALL 54786 0 1
// end ;
53709: LD_VAR 0 2
53713: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53714: LD_INT 0
53716: PPUSH
// ComRadiation ( un ) ;
53717: LD_VAR 0 1
53721: PPUSH
53722: CALL 54786 0 1
// end ;
53726: LD_VAR 0 2
53730: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53731: LD_INT 0
53733: PPUSH
// end ;
53734: LD_VAR 0 4
53738: RET
// export function SOS_Command ( cmd ) ; begin
53739: LD_INT 0
53741: PPUSH
// end ;
53742: LD_VAR 0 2
53746: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53747: LD_INT 0
53749: PPUSH
// end ;
53750: LD_VAR 0 6
53754: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53755: LD_INT 0
53757: PPUSH
53758: PPUSH
53759: PPUSH
53760: PPUSH
// if not vehicle or not factory then
53761: LD_VAR 0 1
53765: NOT
53766: IFTRUE 53775
53768: PUSH
53769: LD_VAR 0 2
53773: NOT
53774: OR
53775: IFFALSE 53779
// exit ;
53777: GO 54361
// if not factoryWaypoints then
53779: LD_EXP 59
53783: NOT
53784: IFFALSE 53788
// exit ;
53786: GO 54361
// for i := 1 to Count ( factoryWaypoints ) do
53788: LD_ADDR_VAR 0 4
53792: PUSH
53793: DOUBLE
53794: LD_INT 1
53796: DEC
53797: ST_TO_ADDR
53798: LD_EXP 59
53802: PPUSH
53803: CALL 12248 0 1
53807: PUSH
53808: FOR_TO
53809: IFFALSE 54359
// if factoryWaypoints [ i ] [ 2 ] = factory then
53811: LD_EXP 59
53815: PUSH
53816: LD_VAR 0 4
53820: ARRAY
53821: PUSH
53822: LD_INT 2
53824: ARRAY
53825: PUSH
53826: LD_VAR 0 2
53830: EQUAL
53831: IFFALSE 54357
// begin if GetControl ( vehicle ) = control_manual then
53833: LD_VAR 0 1
53837: PPUSH
53838: CALL_OW 263
53842: PUSH
53843: LD_INT 1
53845: EQUAL
53846: IFFALSE 54210
// begin driver := IsDrivenBy ( vehicle ) ;
53848: LD_ADDR_VAR 0 5
53852: PUSH
53853: LD_VAR 0 1
53857: PPUSH
53858: CALL_OW 311
53862: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
53863: LD_VAR 0 5
53867: PUSH
53868: LD_EXP 60
53872: IN
53873: IFTRUE 53887
53875: PUSH
53876: LD_VAR 0 1
53880: PUSH
53881: LD_EXP 60
53885: IN
53886: OR
53887: IFFALSE 53893
// exit ;
53889: POP
53890: POP
53891: GO 54361
// if not HasTask ( driver ) then
53893: LD_VAR 0 5
53897: PPUSH
53898: CALL_OW 314
53902: NOT
53903: IFFALSE 54208
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
53905: LD_ADDR_EXP 60
53909: PUSH
53910: LD_EXP 60
53914: PPUSH
53915: LD_VAR 0 5
53919: PPUSH
53920: CALL 48180 0 2
53924: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
53925: LD_ADDR_EXP 60
53929: PUSH
53930: LD_EXP 60
53934: PPUSH
53935: LD_VAR 0 1
53939: PPUSH
53940: CALL 48180 0 2
53944: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53945: LD_ADDR_VAR 0 6
53949: PUSH
53950: LD_EXP 59
53954: PUSH
53955: LD_VAR 0 4
53959: ARRAY
53960: PUSH
53961: LD_INT 3
53963: ARRAY
53964: PPUSH
53965: LD_EXP 59
53969: PUSH
53970: LD_VAR 0 4
53974: ARRAY
53975: PUSH
53976: LD_INT 4
53978: ARRAY
53979: PPUSH
53980: CALL_OW 428
53984: ST_TO_ADDR
// if hex then
53985: LD_VAR 0 6
53989: IFFALSE 54007
// ComMoveUnit ( driver , hex ) else
53991: LD_VAR 0 5
53995: PPUSH
53996: LD_VAR 0 6
54000: PPUSH
54001: CALL_OW 112
54005: GO 54091
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54007: LD_VAR 0 1
54011: PPUSH
54012: LD_EXP 59
54016: PUSH
54017: LD_VAR 0 4
54021: ARRAY
54022: PUSH
54023: LD_INT 3
54025: ARRAY
54026: PPUSH
54027: LD_EXP 59
54031: PUSH
54032: LD_VAR 0 4
54036: ARRAY
54037: PUSH
54038: LD_INT 4
54040: ARRAY
54041: PPUSH
54042: CALL_OW 297
54046: PUSH
54047: LD_INT 0
54049: GREATER
54050: IFFALSE 54091
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54052: LD_VAR 0 5
54056: PPUSH
54057: LD_EXP 59
54061: PUSH
54062: LD_VAR 0 4
54066: ARRAY
54067: PUSH
54068: LD_INT 3
54070: ARRAY
54071: PPUSH
54072: LD_EXP 59
54076: PUSH
54077: LD_VAR 0 4
54081: ARRAY
54082: PUSH
54083: LD_INT 4
54085: ARRAY
54086: PPUSH
54087: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54091: LD_VAR 0 5
54095: PPUSH
54096: CALL_OW 181
// if Multiplayer then
54100: LD_OWVAR 4
54104: IFFALSE 54153
// begin repeat wait ( 10 ) ;
54106: LD_INT 10
54108: PPUSH
54109: CALL_OW 67
// until not IsInUnit ( driver ) ;
54113: LD_VAR 0 5
54117: PPUSH
54118: CALL_OW 310
54122: NOT
54123: IFFALSE 54106
// if not HasTask ( driver ) then
54125: LD_VAR 0 5
54129: PPUSH
54130: CALL_OW 314
54134: NOT
54135: IFFALSE 54151
// ComEnterUnit ( driver , factory ) ;
54137: LD_VAR 0 5
54141: PPUSH
54142: LD_VAR 0 2
54146: PPUSH
54147: CALL_OW 120
// end else
54151: GO 54167
// AddComEnterUnit ( driver , factory ) ;
54153: LD_VAR 0 5
54157: PPUSH
54158: LD_VAR 0 2
54162: PPUSH
54163: CALL_OW 180
// wait ( 0 0$1 ) ;
54167: LD_INT 35
54169: PPUSH
54170: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54174: LD_ADDR_EXP 60
54178: PUSH
54179: LD_EXP 60
54183: PUSH
54184: LD_VAR 0 5
54188: DIFF
54189: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54190: LD_ADDR_EXP 60
54194: PUSH
54195: LD_EXP 60
54199: PUSH
54200: LD_VAR 0 1
54204: DIFF
54205: ST_TO_ADDR
// break ;
54206: GO 54359
// end ; end else
54208: GO 54357
// if GetControl ( vehicle ) = control_remote then
54210: LD_VAR 0 1
54214: PPUSH
54215: CALL_OW 263
54219: PUSH
54220: LD_INT 2
54222: EQUAL
54223: IFFALSE 54309
// begin wait ( 0 0$2 ) ;
54225: LD_INT 70
54227: PPUSH
54228: CALL_OW 67
// repeat wait ( 10 ) ;
54232: LD_INT 10
54234: PPUSH
54235: CALL_OW 67
// Connect ( vehicle ) ;
54239: LD_VAR 0 1
54243: PPUSH
54244: CALL 18492 0 1
// until IsControledBy ( vehicle ) ;
54248: LD_VAR 0 1
54252: PPUSH
54253: CALL_OW 312
54257: IFFALSE 54232
// wait ( 10 ) ;
54259: LD_INT 10
54261: PPUSH
54262: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54266: LD_VAR 0 1
54270: PPUSH
54271: LD_EXP 59
54275: PUSH
54276: LD_VAR 0 4
54280: ARRAY
54281: PUSH
54282: LD_INT 3
54284: ARRAY
54285: PPUSH
54286: LD_EXP 59
54290: PUSH
54291: LD_VAR 0 4
54295: ARRAY
54296: PUSH
54297: LD_INT 4
54299: ARRAY
54300: PPUSH
54301: CALL_OW 111
// break ;
54305: GO 54359
// end else
54307: GO 54357
// begin wait ( 0 0$3 ) ;
54309: LD_INT 105
54311: PPUSH
54312: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54316: LD_VAR 0 1
54320: PPUSH
54321: LD_EXP 59
54325: PUSH
54326: LD_VAR 0 4
54330: ARRAY
54331: PUSH
54332: LD_INT 3
54334: ARRAY
54335: PPUSH
54336: LD_EXP 59
54340: PUSH
54341: LD_VAR 0 4
54345: ARRAY
54346: PUSH
54347: LD_INT 4
54349: ARRAY
54350: PPUSH
54351: CALL_OW 111
// break ;
54355: GO 54359
// end ; end ;
54357: GO 53808
54359: POP
54360: POP
// end ;
54361: LD_VAR 0 3
54365: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54366: LD_INT 0
54368: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54369: LD_VAR 0 1
54373: PUSH
54374: LD_INT 250
54376: EQUAL
54377: IFFALSE 54394
54379: PUSH
54380: LD_VAR 0 2
54384: PPUSH
54385: CALL_OW 264
54389: PUSH
54390: LD_INT 81
54392: EQUAL
54393: AND
54394: IFFALSE 54415
// MinerPlaceMine ( unit , x , y ) ;
54396: LD_VAR 0 2
54400: PPUSH
54401: LD_VAR 0 4
54405: PPUSH
54406: LD_VAR 0 5
54410: PPUSH
54411: CALL 57547 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54415: LD_VAR 0 1
54419: PUSH
54420: LD_INT 251
54422: EQUAL
54423: IFFALSE 54440
54425: PUSH
54426: LD_VAR 0 2
54430: PPUSH
54431: CALL_OW 264
54435: PUSH
54436: LD_INT 81
54438: EQUAL
54439: AND
54440: IFFALSE 54461
// MinerDetonateMine ( unit , x , y ) ;
54442: LD_VAR 0 2
54446: PPUSH
54447: LD_VAR 0 4
54451: PPUSH
54452: LD_VAR 0 5
54456: PPUSH
54457: CALL 57826 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54461: LD_VAR 0 1
54465: PUSH
54466: LD_INT 252
54468: EQUAL
54469: IFFALSE 54486
54471: PUSH
54472: LD_VAR 0 2
54476: PPUSH
54477: CALL_OW 264
54481: PUSH
54482: LD_INT 81
54484: EQUAL
54485: AND
54486: IFFALSE 54507
// MinerCreateMinefield ( unit , x , y ) ;
54488: LD_VAR 0 2
54492: PPUSH
54493: LD_VAR 0 4
54497: PPUSH
54498: LD_VAR 0 5
54502: PPUSH
54503: CALL 58245 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54507: LD_VAR 0 1
54511: PUSH
54512: LD_INT 253
54514: EQUAL
54515: IFFALSE 54532
54517: PUSH
54518: LD_VAR 0 2
54522: PPUSH
54523: CALL_OW 257
54527: PUSH
54528: LD_INT 5
54530: EQUAL
54531: AND
54532: IFFALSE 54553
// ComBinocular ( unit , x , y ) ;
54534: LD_VAR 0 2
54538: PPUSH
54539: LD_VAR 0 4
54543: PPUSH
54544: LD_VAR 0 5
54548: PPUSH
54549: CALL 58620 0 3
// if selectedUnit then
54553: LD_VAR 0 3
54557: IFFALSE 54617
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54559: LD_VAR 0 1
54563: PUSH
54564: LD_INT 254
54566: EQUAL
54567: IFFALSE 54584
54569: PUSH
54570: LD_VAR 0 2
54574: PPUSH
54575: CALL_OW 264
54579: PUSH
54580: LD_INT 99
54582: EQUAL
54583: AND
54584: IFFALSE 54601
54586: PUSH
54587: LD_VAR 0 3
54591: PPUSH
54592: CALL_OW 263
54596: PUSH
54597: LD_INT 3
54599: EQUAL
54600: AND
54601: IFFALSE 54617
// HackDestroyVehicle ( unit , selectedUnit ) ;
54603: LD_VAR 0 2
54607: PPUSH
54608: LD_VAR 0 3
54612: PPUSH
54613: CALL 56907 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54617: LD_VAR 0 1
54621: PUSH
54622: LD_INT 255
54624: EQUAL
54625: IFFALSE 54649
54627: PUSH
54628: LD_VAR 0 2
54632: PPUSH
54633: CALL_OW 264
54637: PUSH
54638: LD_INT 14
54640: PUSH
54641: LD_INT 53
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: IN
54648: AND
54649: IFFALSE 54667
54651: PUSH
54652: LD_VAR 0 4
54656: PPUSH
54657: LD_VAR 0 5
54661: PPUSH
54662: CALL_OW 488
54666: AND
54667: IFFALSE 54691
// CutTreeXYR ( unit , x , y , 12 ) ;
54669: LD_VAR 0 2
54673: PPUSH
54674: LD_VAR 0 4
54678: PPUSH
54679: LD_VAR 0 5
54683: PPUSH
54684: LD_INT 12
54686: PPUSH
54687: CALL 54882 0 4
// if cmd = 256 then
54691: LD_VAR 0 1
54695: PUSH
54696: LD_INT 256
54698: EQUAL
54699: IFFALSE 54720
// SetFactoryWaypoint ( unit , x , y ) ;
54701: LD_VAR 0 2
54705: PPUSH
54706: LD_VAR 0 4
54710: PPUSH
54711: LD_VAR 0 5
54715: PPUSH
54716: CALL 61460 0 3
// if cmd = 257 then
54720: LD_VAR 0 1
54724: PUSH
54725: LD_INT 257
54727: EQUAL
54728: IFFALSE 54749
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54730: LD_VAR 0 2
54734: PPUSH
54735: LD_VAR 0 4
54739: PPUSH
54740: LD_VAR 0 5
54744: PPUSH
54745: CALL 61956 0 3
// if cmd = 258 then
54749: LD_VAR 0 1
54753: PUSH
54754: LD_INT 258
54756: EQUAL
54757: IFFALSE 54781
// BurnTreeXYR ( unit , x , y , 8 ) ;
54759: LD_VAR 0 2
54763: PPUSH
54764: LD_VAR 0 4
54768: PPUSH
54769: LD_VAR 0 5
54773: PPUSH
54774: LD_INT 8
54776: PPUSH
54777: CALL 55282 0 4
// end ;
54781: LD_VAR 0 6
54785: RET
// export function ComRadiation ( un ) ; var eff ; begin
54786: LD_INT 0
54788: PPUSH
54789: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54790: LD_VAR 0 1
54794: PPUSH
54795: CALL_OW 264
54799: PUSH
54800: LD_INT 91
54802: NONEQUAL
54803: IFFALSE 54807
// exit ;
54805: GO 54877
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54807: LD_INT 68
54809: PPUSH
54810: LD_VAR 0 1
54814: PPUSH
54815: CALL_OW 255
54819: PPUSH
54820: CALL_OW 321
54824: PUSH
54825: LD_INT 2
54827: EQUAL
54828: IFFALSE 54840
// eff := 50 else
54830: LD_ADDR_VAR 0 3
54834: PUSH
54835: LD_INT 50
54837: ST_TO_ADDR
54838: GO 54848
// eff := 25 ;
54840: LD_ADDR_VAR 0 3
54844: PUSH
54845: LD_INT 25
54847: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54848: LD_VAR 0 1
54852: PPUSH
54853: CALL_OW 250
54857: PPUSH
54858: LD_VAR 0 1
54862: PPUSH
54863: CALL_OW 251
54867: PPUSH
54868: LD_VAR 0 3
54872: PPUSH
54873: CALL_OW 495
// end ;
54877: LD_VAR 0 2
54881: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54882: LD_INT 0
54884: PPUSH
54885: PPUSH
54886: PPUSH
54887: PPUSH
54888: PPUSH
54889: PPUSH
54890: PPUSH
54891: PPUSH
54892: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54893: LD_VAR 0 1
54897: PPUSH
54898: CALL_OW 302
54902: NOT
54903: IFTRUE 54922
54905: PUSH
54906: LD_VAR 0 2
54910: PPUSH
54911: LD_VAR 0 3
54915: PPUSH
54916: CALL_OW 488
54920: NOT
54921: OR
54922: IFTRUE 54931
54924: PUSH
54925: LD_VAR 0 4
54929: NOT
54930: OR
54931: IFFALSE 54935
// exit ;
54933: GO 55277
// list := [ ] ;
54935: LD_ADDR_VAR 0 13
54939: PUSH
54940: EMPTY
54941: ST_TO_ADDR
// if x - r < 0 then
54942: LD_VAR 0 2
54946: PUSH
54947: LD_VAR 0 4
54951: MINUS
54952: PUSH
54953: LD_INT 0
54955: LESS
54956: IFFALSE 54968
// min_x := 0 else
54958: LD_ADDR_VAR 0 7
54962: PUSH
54963: LD_INT 0
54965: ST_TO_ADDR
54966: GO 54984
// min_x := x - r ;
54968: LD_ADDR_VAR 0 7
54972: PUSH
54973: LD_VAR 0 2
54977: PUSH
54978: LD_VAR 0 4
54982: MINUS
54983: ST_TO_ADDR
// if y - r < 0 then
54984: LD_VAR 0 3
54988: PUSH
54989: LD_VAR 0 4
54993: MINUS
54994: PUSH
54995: LD_INT 0
54997: LESS
54998: IFFALSE 55010
// min_y := 0 else
55000: LD_ADDR_VAR 0 8
55004: PUSH
55005: LD_INT 0
55007: ST_TO_ADDR
55008: GO 55026
// min_y := y - r ;
55010: LD_ADDR_VAR 0 8
55014: PUSH
55015: LD_VAR 0 3
55019: PUSH
55020: LD_VAR 0 4
55024: MINUS
55025: ST_TO_ADDR
// max_x := x + r ;
55026: LD_ADDR_VAR 0 9
55030: PUSH
55031: LD_VAR 0 2
55035: PUSH
55036: LD_VAR 0 4
55040: PLUS
55041: ST_TO_ADDR
// max_y := y + r ;
55042: LD_ADDR_VAR 0 10
55046: PUSH
55047: LD_VAR 0 3
55051: PUSH
55052: LD_VAR 0 4
55056: PLUS
55057: ST_TO_ADDR
// for _x = min_x to max_x do
55058: LD_ADDR_VAR 0 11
55062: PUSH
55063: DOUBLE
55064: LD_VAR 0 7
55068: DEC
55069: ST_TO_ADDR
55070: LD_VAR 0 9
55074: PUSH
55075: FOR_TO
55076: IFFALSE 55195
// for _y = min_y to max_y do
55078: LD_ADDR_VAR 0 12
55082: PUSH
55083: DOUBLE
55084: LD_VAR 0 8
55088: DEC
55089: ST_TO_ADDR
55090: LD_VAR 0 10
55094: PUSH
55095: FOR_TO
55096: IFFALSE 55191
// begin if not ValidHex ( _x , _y ) then
55098: LD_VAR 0 11
55102: PPUSH
55103: LD_VAR 0 12
55107: PPUSH
55108: CALL_OW 488
55112: NOT
55113: IFFALSE 55117
// continue ;
55115: GO 55095
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55117: LD_VAR 0 11
55121: PPUSH
55122: LD_VAR 0 12
55126: PPUSH
55127: CALL_OW 351
55131: IFFALSE 55149
55133: PUSH
55134: LD_VAR 0 11
55138: PPUSH
55139: LD_VAR 0 12
55143: PPUSH
55144: CALL_OW 554
55148: AND
55149: IFFALSE 55189
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55151: LD_ADDR_VAR 0 13
55155: PUSH
55156: LD_VAR 0 13
55160: PPUSH
55161: LD_VAR 0 13
55165: PUSH
55166: LD_INT 1
55168: PLUS
55169: PPUSH
55170: LD_VAR 0 11
55174: PUSH
55175: LD_VAR 0 12
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PPUSH
55184: CALL_OW 2
55188: ST_TO_ADDR
// end ;
55189: GO 55095
55191: POP
55192: POP
55193: GO 55075
55195: POP
55196: POP
// if not list then
55197: LD_VAR 0 13
55201: NOT
55202: IFFALSE 55206
// exit ;
55204: GO 55277
// for i in list do
55206: LD_ADDR_VAR 0 6
55210: PUSH
55211: LD_VAR 0 13
55215: PUSH
55216: FOR_IN
55217: IFFALSE 55275
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55219: LD_VAR 0 1
55223: PPUSH
55224: LD_STRING M
55226: PUSH
55227: LD_VAR 0 6
55231: PUSH
55232: LD_INT 1
55234: ARRAY
55235: PUSH
55236: LD_VAR 0 6
55240: PUSH
55241: LD_INT 2
55243: ARRAY
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: PUSH
55266: EMPTY
55267: LIST
55268: PPUSH
55269: CALL_OW 447
55273: GO 55216
55275: POP
55276: POP
// end ;
55277: LD_VAR 0 5
55281: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55282: LD_INT 0
55284: PPUSH
55285: PPUSH
55286: PPUSH
55287: PPUSH
55288: PPUSH
55289: PPUSH
55290: PPUSH
55291: PPUSH
55292: PPUSH
55293: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55294: LD_VAR 0 1
55298: PPUSH
55299: CALL_OW 302
55303: NOT
55304: IFTRUE 55323
55306: PUSH
55307: LD_VAR 0 2
55311: PPUSH
55312: LD_VAR 0 3
55316: PPUSH
55317: CALL_OW 488
55321: NOT
55322: OR
55323: IFTRUE 55332
55325: PUSH
55326: LD_VAR 0 4
55330: NOT
55331: OR
55332: IFFALSE 55336
// exit ;
55334: GO 55853
// list := [ ] ;
55336: LD_ADDR_VAR 0 13
55340: PUSH
55341: EMPTY
55342: ST_TO_ADDR
// if x - r < 0 then
55343: LD_VAR 0 2
55347: PUSH
55348: LD_VAR 0 4
55352: MINUS
55353: PUSH
55354: LD_INT 0
55356: LESS
55357: IFFALSE 55369
// min_x := 0 else
55359: LD_ADDR_VAR 0 7
55363: PUSH
55364: LD_INT 0
55366: ST_TO_ADDR
55367: GO 55385
// min_x := x - r ;
55369: LD_ADDR_VAR 0 7
55373: PUSH
55374: LD_VAR 0 2
55378: PUSH
55379: LD_VAR 0 4
55383: MINUS
55384: ST_TO_ADDR
// if y - r < 0 then
55385: LD_VAR 0 3
55389: PUSH
55390: LD_VAR 0 4
55394: MINUS
55395: PUSH
55396: LD_INT 0
55398: LESS
55399: IFFALSE 55411
// min_y := 0 else
55401: LD_ADDR_VAR 0 8
55405: PUSH
55406: LD_INT 0
55408: ST_TO_ADDR
55409: GO 55427
// min_y := y - r ;
55411: LD_ADDR_VAR 0 8
55415: PUSH
55416: LD_VAR 0 3
55420: PUSH
55421: LD_VAR 0 4
55425: MINUS
55426: ST_TO_ADDR
// max_x := x + r ;
55427: LD_ADDR_VAR 0 9
55431: PUSH
55432: LD_VAR 0 2
55436: PUSH
55437: LD_VAR 0 4
55441: PLUS
55442: ST_TO_ADDR
// max_y := y + r ;
55443: LD_ADDR_VAR 0 10
55447: PUSH
55448: LD_VAR 0 3
55452: PUSH
55453: LD_VAR 0 4
55457: PLUS
55458: ST_TO_ADDR
// for _x = min_x to max_x do
55459: LD_ADDR_VAR 0 11
55463: PUSH
55464: DOUBLE
55465: LD_VAR 0 7
55469: DEC
55470: ST_TO_ADDR
55471: LD_VAR 0 9
55475: PUSH
55476: FOR_TO
55477: IFFALSE 55596
// for _y = min_y to max_y do
55479: LD_ADDR_VAR 0 12
55483: PUSH
55484: DOUBLE
55485: LD_VAR 0 8
55489: DEC
55490: ST_TO_ADDR
55491: LD_VAR 0 10
55495: PUSH
55496: FOR_TO
55497: IFFALSE 55592
// begin if not ValidHex ( _x , _y ) then
55499: LD_VAR 0 11
55503: PPUSH
55504: LD_VAR 0 12
55508: PPUSH
55509: CALL_OW 488
55513: NOT
55514: IFFALSE 55518
// continue ;
55516: GO 55496
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55518: LD_VAR 0 11
55522: PPUSH
55523: LD_VAR 0 12
55527: PPUSH
55528: CALL_OW 351
55532: IFFALSE 55550
55534: PUSH
55535: LD_VAR 0 11
55539: PPUSH
55540: LD_VAR 0 12
55544: PPUSH
55545: CALL_OW 554
55549: AND
55550: IFFALSE 55590
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55552: LD_ADDR_VAR 0 13
55556: PUSH
55557: LD_VAR 0 13
55561: PPUSH
55562: LD_VAR 0 13
55566: PUSH
55567: LD_INT 1
55569: PLUS
55570: PPUSH
55571: LD_VAR 0 11
55575: PUSH
55576: LD_VAR 0 12
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PPUSH
55585: CALL_OW 2
55589: ST_TO_ADDR
// end ;
55590: GO 55496
55592: POP
55593: POP
55594: GO 55476
55596: POP
55597: POP
// if not list then
55598: LD_VAR 0 13
55602: NOT
55603: IFFALSE 55607
// exit ;
55605: GO 55853
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55607: LD_ADDR_VAR 0 13
55611: PUSH
55612: LD_VAR 0 1
55616: PPUSH
55617: LD_VAR 0 13
55621: PPUSH
55622: LD_INT 1
55624: PPUSH
55625: LD_INT 1
55627: PPUSH
55628: CALL 15620 0 4
55632: ST_TO_ADDR
// ComStop ( flame ) ;
55633: LD_VAR 0 1
55637: PPUSH
55638: CALL_OW 141
// for i in list do
55642: LD_ADDR_VAR 0 6
55646: PUSH
55647: LD_VAR 0 13
55651: PUSH
55652: FOR_IN
55653: IFFALSE 55684
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55655: LD_VAR 0 1
55659: PPUSH
55660: LD_VAR 0 6
55664: PUSH
55665: LD_INT 1
55667: ARRAY
55668: PPUSH
55669: LD_VAR 0 6
55673: PUSH
55674: LD_INT 2
55676: ARRAY
55677: PPUSH
55678: CALL_OW 176
55682: GO 55652
55684: POP
55685: POP
// repeat wait ( 0 0$1 ) ;
55686: LD_INT 35
55688: PPUSH
55689: CALL_OW 67
// task := GetTaskList ( flame ) ;
55693: LD_ADDR_VAR 0 14
55697: PUSH
55698: LD_VAR 0 1
55702: PPUSH
55703: CALL_OW 437
55707: ST_TO_ADDR
// if not task then
55708: LD_VAR 0 14
55712: NOT
55713: IFFALSE 55717
// exit ;
55715: GO 55853
// if task [ 1 ] [ 1 ] <> | then
55717: LD_VAR 0 14
55721: PUSH
55722: LD_INT 1
55724: ARRAY
55725: PUSH
55726: LD_INT 1
55728: ARRAY
55729: PUSH
55730: LD_STRING |
55732: NONEQUAL
55733: IFFALSE 55737
// exit ;
55735: GO 55853
// _x := task [ 1 ] [ 2 ] ;
55737: LD_ADDR_VAR 0 11
55741: PUSH
55742: LD_VAR 0 14
55746: PUSH
55747: LD_INT 1
55749: ARRAY
55750: PUSH
55751: LD_INT 2
55753: ARRAY
55754: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55755: LD_ADDR_VAR 0 12
55759: PUSH
55760: LD_VAR 0 14
55764: PUSH
55765: LD_INT 1
55767: ARRAY
55768: PUSH
55769: LD_INT 3
55771: ARRAY
55772: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55773: LD_VAR 0 11
55777: PPUSH
55778: LD_VAR 0 12
55782: PPUSH
55783: CALL_OW 351
55787: NOT
55788: IFTRUE 55807
55790: PUSH
55791: LD_VAR 0 11
55795: PPUSH
55796: LD_VAR 0 12
55800: PPUSH
55801: CALL_OW 554
55805: NOT
55806: OR
55807: IFFALSE 55841
// begin task := Delete ( task , 1 ) ;
55809: LD_ADDR_VAR 0 14
55813: PUSH
55814: LD_VAR 0 14
55818: PPUSH
55819: LD_INT 1
55821: PPUSH
55822: CALL_OW 3
55826: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55827: LD_VAR 0 1
55831: PPUSH
55832: LD_VAR 0 14
55836: PPUSH
55837: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55841: LD_VAR 0 1
55845: PPUSH
55846: CALL_OW 314
55850: NOT
55851: IFFALSE 55686
// end ;
55853: LD_VAR 0 5
55857: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55858: LD_EXP 48
55862: NOT
55863: IFFALSE 55913
55865: GO 55867
55867: DISABLE
// begin initHack := true ;
55868: LD_ADDR_EXP 48
55872: PUSH
55873: LD_INT 1
55875: ST_TO_ADDR
// hackTanks := [ ] ;
55876: LD_ADDR_EXP 49
55880: PUSH
55881: EMPTY
55882: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55883: LD_ADDR_EXP 50
55887: PUSH
55888: EMPTY
55889: ST_TO_ADDR
// hackLimit := 3 ;
55890: LD_ADDR_EXP 51
55894: PUSH
55895: LD_INT 3
55897: ST_TO_ADDR
// hackDist := 12 ;
55898: LD_ADDR_EXP 52
55902: PUSH
55903: LD_INT 12
55905: ST_TO_ADDR
// hackCounter := [ ] ;
55906: LD_ADDR_EXP 53
55910: PUSH
55911: EMPTY
55912: ST_TO_ADDR
// end ;
55913: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55914: LD_EXP 48
55918: IFFALSE 55936
55920: PUSH
55921: LD_INT 34
55923: PUSH
55924: LD_INT 99
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PPUSH
55931: CALL_OW 69
55935: AND
55936: IFFALSE 56189
55938: GO 55940
55940: DISABLE
55941: LD_INT 0
55943: PPUSH
55944: PPUSH
// begin enable ;
55945: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55946: LD_ADDR_VAR 0 1
55950: PUSH
55951: LD_INT 34
55953: PUSH
55954: LD_INT 99
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PPUSH
55961: CALL_OW 69
55965: PUSH
55966: FOR_IN
55967: IFFALSE 56187
// begin if not i in hackTanks then
55969: LD_VAR 0 1
55973: PUSH
55974: LD_EXP 49
55978: IN
55979: NOT
55980: IFFALSE 56063
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55982: LD_ADDR_EXP 49
55986: PUSH
55987: LD_EXP 49
55991: PPUSH
55992: LD_EXP 49
55996: PUSH
55997: LD_INT 1
55999: PLUS
56000: PPUSH
56001: LD_VAR 0 1
56005: PPUSH
56006: CALL_OW 1
56010: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56011: LD_ADDR_EXP 50
56015: PUSH
56016: LD_EXP 50
56020: PPUSH
56021: LD_EXP 50
56025: PUSH
56026: LD_INT 1
56028: PLUS
56029: PPUSH
56030: EMPTY
56031: PPUSH
56032: CALL_OW 1
56036: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56037: LD_ADDR_EXP 53
56041: PUSH
56042: LD_EXP 53
56046: PPUSH
56047: LD_EXP 53
56051: PUSH
56052: LD_INT 1
56054: PLUS
56055: PPUSH
56056: EMPTY
56057: PPUSH
56058: CALL_OW 1
56062: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56063: LD_VAR 0 1
56067: PPUSH
56068: CALL_OW 302
56072: NOT
56073: IFFALSE 56086
// begin HackUnlinkAll ( i ) ;
56075: LD_VAR 0 1
56079: PPUSH
56080: CALL 56192 0 1
// continue ;
56084: GO 55966
// end ; HackCheckCapturedStatus ( i ) ;
56086: LD_VAR 0 1
56090: PPUSH
56091: CALL 56637 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56095: LD_ADDR_VAR 0 2
56099: PUSH
56100: LD_INT 81
56102: PUSH
56103: LD_VAR 0 1
56107: PPUSH
56108: CALL_OW 255
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 33
56119: PUSH
56120: LD_INT 3
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 91
56129: PUSH
56130: LD_VAR 0 1
56134: PUSH
56135: LD_EXP 52
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 50
56147: PUSH
56148: EMPTY
56149: LIST
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: PPUSH
56157: CALL_OW 69
56161: ST_TO_ADDR
// if not tmp then
56162: LD_VAR 0 2
56166: NOT
56167: IFFALSE 56171
// continue ;
56169: GO 55966
// HackLink ( i , tmp ) ;
56171: LD_VAR 0 1
56175: PPUSH
56176: LD_VAR 0 2
56180: PPUSH
56181: CALL 56328 0 2
// end ;
56185: GO 55966
56187: POP
56188: POP
// end ;
56189: PPOPN 2
56191: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56192: LD_INT 0
56194: PPUSH
56195: PPUSH
56196: PPUSH
// if not hack in hackTanks then
56197: LD_VAR 0 1
56201: PUSH
56202: LD_EXP 49
56206: IN
56207: NOT
56208: IFFALSE 56212
// exit ;
56210: GO 56323
// index := GetElementIndex ( hackTanks , hack ) ;
56212: LD_ADDR_VAR 0 4
56216: PUSH
56217: LD_EXP 49
56221: PPUSH
56222: LD_VAR 0 1
56226: PPUSH
56227: CALL 14915 0 2
56231: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56232: LD_EXP 50
56236: PUSH
56237: LD_VAR 0 4
56241: ARRAY
56242: IFFALSE 56323
// begin for i in hackTanksCaptured [ index ] do
56244: LD_ADDR_VAR 0 3
56248: PUSH
56249: LD_EXP 50
56253: PUSH
56254: LD_VAR 0 4
56258: ARRAY
56259: PUSH
56260: FOR_IN
56261: IFFALSE 56287
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56263: LD_VAR 0 3
56267: PUSH
56268: LD_INT 1
56270: ARRAY
56271: PPUSH
56272: LD_VAR 0 3
56276: PUSH
56277: LD_INT 2
56279: ARRAY
56280: PPUSH
56281: CALL_OW 235
56285: GO 56260
56287: POP
56288: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56289: LD_ADDR_EXP 50
56293: PUSH
56294: LD_EXP 50
56298: PPUSH
56299: LD_VAR 0 4
56303: PPUSH
56304: EMPTY
56305: PPUSH
56306: CALL_OW 1
56310: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56311: LD_VAR 0 1
56315: PPUSH
56316: LD_INT 0
56318: PPUSH
56319: CALL_OW 505
// end ; end ;
56323: LD_VAR 0 2
56327: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56328: LD_INT 0
56330: PPUSH
56331: PPUSH
56332: PPUSH
// if not hack in hackTanks or not vehicles then
56333: LD_VAR 0 1
56337: PUSH
56338: LD_EXP 49
56342: IN
56343: NOT
56344: IFTRUE 56353
56346: PUSH
56347: LD_VAR 0 2
56351: NOT
56352: OR
56353: IFFALSE 56357
// exit ;
56355: GO 56632
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56357: LD_ADDR_VAR 0 2
56361: PUSH
56362: LD_VAR 0 1
56366: PPUSH
56367: LD_VAR 0 2
56371: PPUSH
56372: LD_INT 1
56374: PPUSH
56375: LD_INT 1
56377: PPUSH
56378: CALL 15567 0 4
56382: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56383: LD_ADDR_VAR 0 5
56387: PUSH
56388: LD_EXP 49
56392: PPUSH
56393: LD_VAR 0 1
56397: PPUSH
56398: CALL 14915 0 2
56402: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56403: LD_EXP 50
56407: PUSH
56408: LD_VAR 0 5
56412: ARRAY
56413: PUSH
56414: LD_EXP 51
56418: LESS
56419: IFFALSE 56608
// begin for i := 1 to vehicles do
56421: LD_ADDR_VAR 0 4
56425: PUSH
56426: DOUBLE
56427: LD_INT 1
56429: DEC
56430: ST_TO_ADDR
56431: LD_VAR 0 2
56435: PUSH
56436: FOR_TO
56437: IFFALSE 56606
// begin if hackTanksCaptured [ index ] = hackLimit then
56439: LD_EXP 50
56443: PUSH
56444: LD_VAR 0 5
56448: ARRAY
56449: PUSH
56450: LD_EXP 51
56454: EQUAL
56455: IFFALSE 56459
// break ;
56457: GO 56606
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56459: LD_ADDR_EXP 53
56463: PUSH
56464: LD_EXP 53
56468: PPUSH
56469: LD_VAR 0 5
56473: PPUSH
56474: LD_EXP 53
56478: PUSH
56479: LD_VAR 0 5
56483: ARRAY
56484: PUSH
56485: LD_INT 1
56487: PLUS
56488: PPUSH
56489: CALL_OW 1
56493: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56494: LD_ADDR_EXP 50
56498: PUSH
56499: LD_EXP 50
56503: PPUSH
56504: LD_VAR 0 5
56508: PUSH
56509: LD_EXP 50
56513: PUSH
56514: LD_VAR 0 5
56518: ARRAY
56519: PUSH
56520: LD_INT 1
56522: PLUS
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PPUSH
56528: LD_VAR 0 2
56532: PUSH
56533: LD_VAR 0 4
56537: ARRAY
56538: PUSH
56539: LD_VAR 0 2
56543: PUSH
56544: LD_VAR 0 4
56548: ARRAY
56549: PPUSH
56550: CALL_OW 255
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PPUSH
56559: CALL 15132 0 3
56563: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56564: LD_VAR 0 2
56568: PUSH
56569: LD_VAR 0 4
56573: ARRAY
56574: PPUSH
56575: LD_VAR 0 1
56579: PPUSH
56580: CALL_OW 255
56584: PPUSH
56585: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56589: LD_VAR 0 2
56593: PUSH
56594: LD_VAR 0 4
56598: ARRAY
56599: PPUSH
56600: CALL_OW 141
// end ;
56604: GO 56436
56606: POP
56607: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56608: LD_VAR 0 1
56612: PPUSH
56613: LD_EXP 50
56617: PUSH
56618: LD_VAR 0 5
56622: ARRAY
56623: PUSH
56624: LD_INT 0
56626: PLUS
56627: PPUSH
56628: CALL_OW 505
// end ;
56632: LD_VAR 0 3
56636: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56637: LD_INT 0
56639: PPUSH
56640: PPUSH
56641: PPUSH
56642: PPUSH
// if not hack in hackTanks then
56643: LD_VAR 0 1
56647: PUSH
56648: LD_EXP 49
56652: IN
56653: NOT
56654: IFFALSE 56658
// exit ;
56656: GO 56902
// index := GetElementIndex ( hackTanks , hack ) ;
56658: LD_ADDR_VAR 0 4
56662: PUSH
56663: LD_EXP 49
56667: PPUSH
56668: LD_VAR 0 1
56672: PPUSH
56673: CALL 14915 0 2
56677: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56678: LD_ADDR_VAR 0 3
56682: PUSH
56683: DOUBLE
56684: LD_EXP 50
56688: PUSH
56689: LD_VAR 0 4
56693: ARRAY
56694: INC
56695: ST_TO_ADDR
56696: LD_INT 1
56698: PUSH
56699: FOR_DOWNTO
56700: IFFALSE 56876
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56702: LD_ADDR_VAR 0 5
56706: PUSH
56707: LD_EXP 50
56711: PUSH
56712: LD_VAR 0 4
56716: ARRAY
56717: PUSH
56718: LD_VAR 0 3
56722: ARRAY
56723: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56724: LD_VAR 0 5
56728: PUSH
56729: LD_INT 1
56731: ARRAY
56732: PPUSH
56733: CALL_OW 302
56737: NOT
56738: IFTRUE 56766
56740: PUSH
56741: LD_VAR 0 5
56745: PUSH
56746: LD_INT 1
56748: ARRAY
56749: PPUSH
56750: CALL_OW 255
56754: PUSH
56755: LD_VAR 0 1
56759: PPUSH
56760: CALL_OW 255
56764: NONEQUAL
56765: OR
56766: IFFALSE 56874
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56768: LD_VAR 0 5
56772: PUSH
56773: LD_INT 1
56775: ARRAY
56776: PPUSH
56777: CALL_OW 305
56781: IFFALSE 56809
56783: PUSH
56784: LD_VAR 0 5
56788: PUSH
56789: LD_INT 1
56791: ARRAY
56792: PPUSH
56793: CALL_OW 255
56797: PUSH
56798: LD_VAR 0 1
56802: PPUSH
56803: CALL_OW 255
56807: EQUAL
56808: AND
56809: IFFALSE 56833
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56811: LD_VAR 0 5
56815: PUSH
56816: LD_INT 1
56818: ARRAY
56819: PPUSH
56820: LD_VAR 0 5
56824: PUSH
56825: LD_INT 2
56827: ARRAY
56828: PPUSH
56829: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56833: LD_ADDR_EXP 50
56837: PUSH
56838: LD_EXP 50
56842: PPUSH
56843: LD_VAR 0 4
56847: PPUSH
56848: LD_EXP 50
56852: PUSH
56853: LD_VAR 0 4
56857: ARRAY
56858: PPUSH
56859: LD_VAR 0 3
56863: PPUSH
56864: CALL_OW 3
56868: PPUSH
56869: CALL_OW 1
56873: ST_TO_ADDR
// end ; end ;
56874: GO 56699
56876: POP
56877: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56878: LD_VAR 0 1
56882: PPUSH
56883: LD_EXP 50
56887: PUSH
56888: LD_VAR 0 4
56892: ARRAY
56893: PUSH
56894: LD_INT 0
56896: PLUS
56897: PPUSH
56898: CALL_OW 505
// end ;
56902: LD_VAR 0 2
56906: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56907: LD_INT 0
56909: PPUSH
56910: PPUSH
56911: PPUSH
56912: PPUSH
// if not hack in hackTanks then
56913: LD_VAR 0 1
56917: PUSH
56918: LD_EXP 49
56922: IN
56923: NOT
56924: IFFALSE 56928
// exit ;
56926: GO 57013
// index := GetElementIndex ( hackTanks , hack ) ;
56928: LD_ADDR_VAR 0 5
56932: PUSH
56933: LD_EXP 49
56937: PPUSH
56938: LD_VAR 0 1
56942: PPUSH
56943: CALL 14915 0 2
56947: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56948: LD_ADDR_VAR 0 4
56952: PUSH
56953: DOUBLE
56954: LD_INT 1
56956: DEC
56957: ST_TO_ADDR
56958: LD_EXP 50
56962: PUSH
56963: LD_VAR 0 5
56967: ARRAY
56968: PUSH
56969: FOR_TO
56970: IFFALSE 57011
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56972: LD_EXP 50
56976: PUSH
56977: LD_VAR 0 5
56981: ARRAY
56982: PUSH
56983: LD_VAR 0 4
56987: ARRAY
56988: PUSH
56989: LD_INT 1
56991: ARRAY
56992: PUSH
56993: LD_VAR 0 2
56997: EQUAL
56998: IFFALSE 57009
// KillUnit ( vehicle ) ;
57000: LD_VAR 0 2
57004: PPUSH
57005: CALL_OW 66
57009: GO 56969
57011: POP
57012: POP
// end ;
57013: LD_VAR 0 3
57017: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57018: LD_EXP 54
57022: NOT
57023: IFFALSE 57058
57025: GO 57027
57027: DISABLE
// begin initMiner := true ;
57028: LD_ADDR_EXP 54
57032: PUSH
57033: LD_INT 1
57035: ST_TO_ADDR
// minersList := [ ] ;
57036: LD_ADDR_EXP 55
57040: PUSH
57041: EMPTY
57042: ST_TO_ADDR
// minerMinesList := [ ] ;
57043: LD_ADDR_EXP 56
57047: PUSH
57048: EMPTY
57049: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57050: LD_ADDR_EXP 57
57054: PUSH
57055: LD_INT 5
57057: ST_TO_ADDR
// end ;
57058: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57059: LD_EXP 54
57063: IFFALSE 57081
57065: PUSH
57066: LD_INT 34
57068: PUSH
57069: LD_INT 81
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PPUSH
57076: CALL_OW 69
57080: AND
57081: IFFALSE 57544
57083: GO 57085
57085: DISABLE
57086: LD_INT 0
57088: PPUSH
57089: PPUSH
57090: PPUSH
57091: PPUSH
// begin enable ;
57092: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57093: LD_ADDR_VAR 0 1
57097: PUSH
57098: LD_INT 34
57100: PUSH
57101: LD_INT 81
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PPUSH
57108: CALL_OW 69
57112: PUSH
57113: FOR_IN
57114: IFFALSE 57186
// begin if not i in minersList then
57116: LD_VAR 0 1
57120: PUSH
57121: LD_EXP 55
57125: IN
57126: NOT
57127: IFFALSE 57184
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57129: LD_ADDR_EXP 55
57133: PUSH
57134: LD_EXP 55
57138: PPUSH
57139: LD_EXP 55
57143: PUSH
57144: LD_INT 1
57146: PLUS
57147: PPUSH
57148: LD_VAR 0 1
57152: PPUSH
57153: CALL_OW 1
57157: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57158: LD_ADDR_EXP 56
57162: PUSH
57163: LD_EXP 56
57167: PPUSH
57168: LD_EXP 56
57172: PUSH
57173: LD_INT 1
57175: PLUS
57176: PPUSH
57177: EMPTY
57178: PPUSH
57179: CALL_OW 1
57183: ST_TO_ADDR
// end end ;
57184: GO 57113
57186: POP
57187: POP
// for i := minerMinesList downto 1 do
57188: LD_ADDR_VAR 0 1
57192: PUSH
57193: DOUBLE
57194: LD_EXP 56
57198: INC
57199: ST_TO_ADDR
57200: LD_INT 1
57202: PUSH
57203: FOR_DOWNTO
57204: IFFALSE 57542
// begin if IsLive ( minersList [ i ] ) then
57206: LD_EXP 55
57210: PUSH
57211: LD_VAR 0 1
57215: ARRAY
57216: PPUSH
57217: CALL_OW 300
57221: IFFALSE 57249
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57223: LD_EXP 55
57227: PUSH
57228: LD_VAR 0 1
57232: ARRAY
57233: PPUSH
57234: LD_EXP 56
57238: PUSH
57239: LD_VAR 0 1
57243: ARRAY
57244: PPUSH
57245: CALL_OW 505
// if not minerMinesList [ i ] then
57249: LD_EXP 56
57253: PUSH
57254: LD_VAR 0 1
57258: ARRAY
57259: NOT
57260: IFFALSE 57264
// continue ;
57262: GO 57203
// for j := minerMinesList [ i ] downto 1 do
57264: LD_ADDR_VAR 0 2
57268: PUSH
57269: DOUBLE
57270: LD_EXP 56
57274: PUSH
57275: LD_VAR 0 1
57279: ARRAY
57280: INC
57281: ST_TO_ADDR
57282: LD_INT 1
57284: PUSH
57285: FOR_DOWNTO
57286: IFFALSE 57538
// begin side := GetSide ( minersList [ i ] ) ;
57288: LD_ADDR_VAR 0 3
57292: PUSH
57293: LD_EXP 55
57297: PUSH
57298: LD_VAR 0 1
57302: ARRAY
57303: PPUSH
57304: CALL_OW 255
57308: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57309: LD_ADDR_VAR 0 4
57313: PUSH
57314: LD_EXP 56
57318: PUSH
57319: LD_VAR 0 1
57323: ARRAY
57324: PUSH
57325: LD_VAR 0 2
57329: ARRAY
57330: PUSH
57331: LD_INT 1
57333: ARRAY
57334: PPUSH
57335: LD_EXP 56
57339: PUSH
57340: LD_VAR 0 1
57344: ARRAY
57345: PUSH
57346: LD_VAR 0 2
57350: ARRAY
57351: PUSH
57352: LD_INT 2
57354: ARRAY
57355: PPUSH
57356: CALL_OW 428
57360: ST_TO_ADDR
// if not tmp then
57361: LD_VAR 0 4
57365: NOT
57366: IFFALSE 57370
// continue ;
57368: GO 57285
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57370: LD_VAR 0 4
57374: PUSH
57375: LD_INT 81
57377: PUSH
57378: LD_VAR 0 3
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PPUSH
57387: CALL_OW 69
57391: IN
57392: IFFALSE 57442
57394: PUSH
57395: LD_EXP 56
57399: PUSH
57400: LD_VAR 0 1
57404: ARRAY
57405: PUSH
57406: LD_VAR 0 2
57410: ARRAY
57411: PUSH
57412: LD_INT 1
57414: ARRAY
57415: PPUSH
57416: LD_EXP 56
57420: PUSH
57421: LD_VAR 0 1
57425: ARRAY
57426: PUSH
57427: LD_VAR 0 2
57431: ARRAY
57432: PUSH
57433: LD_INT 2
57435: ARRAY
57436: PPUSH
57437: CALL_OW 458
57441: AND
57442: IFFALSE 57536
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57444: LD_EXP 56
57448: PUSH
57449: LD_VAR 0 1
57453: ARRAY
57454: PUSH
57455: LD_VAR 0 2
57459: ARRAY
57460: PUSH
57461: LD_INT 1
57463: ARRAY
57464: PPUSH
57465: LD_EXP 56
57469: PUSH
57470: LD_VAR 0 1
57474: ARRAY
57475: PUSH
57476: LD_VAR 0 2
57480: ARRAY
57481: PUSH
57482: LD_INT 2
57484: ARRAY
57485: PPUSH
57486: LD_VAR 0 3
57490: PPUSH
57491: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57495: LD_ADDR_EXP 56
57499: PUSH
57500: LD_EXP 56
57504: PPUSH
57505: LD_VAR 0 1
57509: PPUSH
57510: LD_EXP 56
57514: PUSH
57515: LD_VAR 0 1
57519: ARRAY
57520: PPUSH
57521: LD_VAR 0 2
57525: PPUSH
57526: CALL_OW 3
57530: PPUSH
57531: CALL_OW 1
57535: ST_TO_ADDR
// end ; end ;
57536: GO 57285
57538: POP
57539: POP
// end ;
57540: GO 57203
57542: POP
57543: POP
// end ;
57544: PPOPN 4
57546: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57547: LD_INT 0
57549: PPUSH
57550: PPUSH
// result := false ;
57551: LD_ADDR_VAR 0 4
57555: PUSH
57556: LD_INT 0
57558: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57559: LD_VAR 0 1
57563: PPUSH
57564: CALL_OW 264
57568: PUSH
57569: LD_INT 81
57571: EQUAL
57572: NOT
57573: IFFALSE 57577
// exit ;
57575: GO 57821
// index := GetElementIndex ( minersList , unit ) ;
57577: LD_ADDR_VAR 0 5
57581: PUSH
57582: LD_EXP 55
57586: PPUSH
57587: LD_VAR 0 1
57591: PPUSH
57592: CALL 14915 0 2
57596: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57597: LD_EXP 56
57601: PUSH
57602: LD_VAR 0 5
57606: ARRAY
57607: PUSH
57608: LD_EXP 57
57612: GREATEREQUAL
57613: IFFALSE 57617
// exit ;
57615: GO 57821
// ComMoveXY ( unit , x , y ) ;
57617: LD_VAR 0 1
57621: PPUSH
57622: LD_VAR 0 2
57626: PPUSH
57627: LD_VAR 0 3
57631: PPUSH
57632: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57636: LD_INT 35
57638: PPUSH
57639: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57643: LD_VAR 0 1
57647: PPUSH
57648: LD_VAR 0 2
57652: PPUSH
57653: LD_VAR 0 3
57657: PPUSH
57658: CALL 46961 0 3
57662: NOT
57663: IFFALSE 57676
57665: PUSH
57666: LD_VAR 0 1
57670: PPUSH
57671: CALL_OW 314
57675: AND
57676: IFFALSE 57680
// exit ;
57678: GO 57821
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57680: LD_VAR 0 2
57684: PPUSH
57685: LD_VAR 0 3
57689: PPUSH
57690: CALL_OW 428
57694: PUSH
57695: LD_VAR 0 1
57699: EQUAL
57700: IFFALSE 57714
57702: PUSH
57703: LD_VAR 0 1
57707: PPUSH
57708: CALL_OW 314
57712: NOT
57713: AND
57714: IFFALSE 57636
// PlaySoundXY ( x , y , PlantMine ) ;
57716: LD_VAR 0 2
57720: PPUSH
57721: LD_VAR 0 3
57725: PPUSH
57726: LD_STRING PlantMine
57728: PPUSH
57729: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57733: LD_VAR 0 2
57737: PPUSH
57738: LD_VAR 0 3
57742: PPUSH
57743: LD_VAR 0 1
57747: PPUSH
57748: CALL_OW 255
57752: PPUSH
57753: LD_INT 0
57755: PPUSH
57756: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57760: LD_ADDR_EXP 56
57764: PUSH
57765: LD_EXP 56
57769: PPUSH
57770: LD_VAR 0 5
57774: PUSH
57775: LD_EXP 56
57779: PUSH
57780: LD_VAR 0 5
57784: ARRAY
57785: PUSH
57786: LD_INT 1
57788: PLUS
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PPUSH
57794: LD_VAR 0 2
57798: PUSH
57799: LD_VAR 0 3
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PPUSH
57808: CALL 15132 0 3
57812: ST_TO_ADDR
// result := true ;
57813: LD_ADDR_VAR 0 4
57817: PUSH
57818: LD_INT 1
57820: ST_TO_ADDR
// end ;
57821: LD_VAR 0 4
57825: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57826: LD_INT 0
57828: PPUSH
57829: PPUSH
57830: PPUSH
// if not unit in minersList then
57831: LD_VAR 0 1
57835: PUSH
57836: LD_EXP 55
57840: IN
57841: NOT
57842: IFFALSE 57846
// exit ;
57844: GO 58240
// index := GetElementIndex ( minersList , unit ) ;
57846: LD_ADDR_VAR 0 6
57850: PUSH
57851: LD_EXP 55
57855: PPUSH
57856: LD_VAR 0 1
57860: PPUSH
57861: CALL 14915 0 2
57865: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57866: LD_ADDR_VAR 0 5
57870: PUSH
57871: DOUBLE
57872: LD_EXP 56
57876: PUSH
57877: LD_VAR 0 6
57881: ARRAY
57882: INC
57883: ST_TO_ADDR
57884: LD_INT 1
57886: PUSH
57887: FOR_DOWNTO
57888: IFFALSE 58051
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57890: LD_EXP 56
57894: PUSH
57895: LD_VAR 0 6
57899: ARRAY
57900: PUSH
57901: LD_VAR 0 5
57905: ARRAY
57906: PUSH
57907: LD_INT 1
57909: ARRAY
57910: PUSH
57911: LD_VAR 0 2
57915: EQUAL
57916: IFFALSE 57946
57918: PUSH
57919: LD_EXP 56
57923: PUSH
57924: LD_VAR 0 6
57928: ARRAY
57929: PUSH
57930: LD_VAR 0 5
57934: ARRAY
57935: PUSH
57936: LD_INT 2
57938: ARRAY
57939: PUSH
57940: LD_VAR 0 3
57944: EQUAL
57945: AND
57946: IFFALSE 58049
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57948: LD_EXP 56
57952: PUSH
57953: LD_VAR 0 6
57957: ARRAY
57958: PUSH
57959: LD_VAR 0 5
57963: ARRAY
57964: PUSH
57965: LD_INT 1
57967: ARRAY
57968: PPUSH
57969: LD_EXP 56
57973: PUSH
57974: LD_VAR 0 6
57978: ARRAY
57979: PUSH
57980: LD_VAR 0 5
57984: ARRAY
57985: PUSH
57986: LD_INT 2
57988: ARRAY
57989: PPUSH
57990: LD_VAR 0 1
57994: PPUSH
57995: CALL_OW 255
57999: PPUSH
58000: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58004: LD_ADDR_EXP 56
58008: PUSH
58009: LD_EXP 56
58013: PPUSH
58014: LD_VAR 0 6
58018: PPUSH
58019: LD_EXP 56
58023: PUSH
58024: LD_VAR 0 6
58028: ARRAY
58029: PPUSH
58030: LD_VAR 0 5
58034: PPUSH
58035: CALL_OW 3
58039: PPUSH
58040: CALL_OW 1
58044: ST_TO_ADDR
// exit ;
58045: POP
58046: POP
58047: GO 58240
// end ; end ;
58049: GO 57887
58051: POP
58052: POP
// for i := minerMinesList [ index ] downto 1 do
58053: LD_ADDR_VAR 0 5
58057: PUSH
58058: DOUBLE
58059: LD_EXP 56
58063: PUSH
58064: LD_VAR 0 6
58068: ARRAY
58069: INC
58070: ST_TO_ADDR
58071: LD_INT 1
58073: PUSH
58074: FOR_DOWNTO
58075: IFFALSE 58238
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58077: LD_EXP 56
58081: PUSH
58082: LD_VAR 0 6
58086: ARRAY
58087: PUSH
58088: LD_VAR 0 5
58092: ARRAY
58093: PUSH
58094: LD_INT 1
58096: ARRAY
58097: PPUSH
58098: LD_EXP 56
58102: PUSH
58103: LD_VAR 0 6
58107: ARRAY
58108: PUSH
58109: LD_VAR 0 5
58113: ARRAY
58114: PUSH
58115: LD_INT 2
58117: ARRAY
58118: PPUSH
58119: LD_VAR 0 2
58123: PPUSH
58124: LD_VAR 0 3
58128: PPUSH
58129: CALL_OW 298
58133: PUSH
58134: LD_INT 6
58136: LESS
58137: IFFALSE 58236
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58139: LD_EXP 56
58143: PUSH
58144: LD_VAR 0 6
58148: ARRAY
58149: PUSH
58150: LD_VAR 0 5
58154: ARRAY
58155: PUSH
58156: LD_INT 1
58158: ARRAY
58159: PPUSH
58160: LD_EXP 56
58164: PUSH
58165: LD_VAR 0 6
58169: ARRAY
58170: PUSH
58171: LD_VAR 0 5
58175: ARRAY
58176: PUSH
58177: LD_INT 2
58179: ARRAY
58180: PPUSH
58181: LD_VAR 0 1
58185: PPUSH
58186: CALL_OW 255
58190: PPUSH
58191: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58195: LD_ADDR_EXP 56
58199: PUSH
58200: LD_EXP 56
58204: PPUSH
58205: LD_VAR 0 6
58209: PPUSH
58210: LD_EXP 56
58214: PUSH
58215: LD_VAR 0 6
58219: ARRAY
58220: PPUSH
58221: LD_VAR 0 5
58225: PPUSH
58226: CALL_OW 3
58230: PPUSH
58231: CALL_OW 1
58235: ST_TO_ADDR
// end ; end ;
58236: GO 58074
58238: POP
58239: POP
// end ;
58240: LD_VAR 0 4
58244: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58245: LD_INT 0
58247: PPUSH
58248: PPUSH
58249: PPUSH
58250: PPUSH
58251: PPUSH
58252: PPUSH
58253: PPUSH
58254: PPUSH
58255: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58256: LD_VAR 0 1
58260: PPUSH
58261: CALL_OW 264
58265: PUSH
58266: LD_INT 81
58268: EQUAL
58269: NOT
58270: IFTRUE 58285
58272: PUSH
58273: LD_VAR 0 1
58277: PUSH
58278: LD_EXP 55
58282: IN
58283: NOT
58284: OR
58285: IFFALSE 58289
// exit ;
58287: GO 58615
// index := GetElementIndex ( minersList , unit ) ;
58289: LD_ADDR_VAR 0 6
58293: PUSH
58294: LD_EXP 55
58298: PPUSH
58299: LD_VAR 0 1
58303: PPUSH
58304: CALL 14915 0 2
58308: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58309: LD_ADDR_VAR 0 8
58313: PUSH
58314: LD_EXP 57
58318: PUSH
58319: LD_EXP 56
58323: PUSH
58324: LD_VAR 0 6
58328: ARRAY
58329: MINUS
58330: ST_TO_ADDR
// if not minesFreeAmount then
58331: LD_VAR 0 8
58335: NOT
58336: IFFALSE 58340
// exit ;
58338: GO 58615
// tmp := [ ] ;
58340: LD_ADDR_VAR 0 7
58344: PUSH
58345: EMPTY
58346: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58347: LD_ADDR_VAR 0 5
58351: PUSH
58352: DOUBLE
58353: LD_INT 1
58355: DEC
58356: ST_TO_ADDR
58357: LD_VAR 0 8
58361: PUSH
58362: FOR_TO
58363: IFFALSE 58562
// begin _d := rand ( 0 , 5 ) ;
58365: LD_ADDR_VAR 0 11
58369: PUSH
58370: LD_INT 0
58372: PPUSH
58373: LD_INT 5
58375: PPUSH
58376: CALL_OW 12
58380: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58381: LD_ADDR_VAR 0 12
58385: PUSH
58386: LD_INT 2
58388: PPUSH
58389: LD_INT 6
58391: PPUSH
58392: CALL_OW 12
58396: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58397: LD_ADDR_VAR 0 9
58401: PUSH
58402: LD_VAR 0 2
58406: PPUSH
58407: LD_VAR 0 11
58411: PPUSH
58412: LD_VAR 0 12
58416: PPUSH
58417: CALL_OW 272
58421: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58422: LD_ADDR_VAR 0 10
58426: PUSH
58427: LD_VAR 0 3
58431: PPUSH
58432: LD_VAR 0 11
58436: PPUSH
58437: LD_VAR 0 12
58441: PPUSH
58442: CALL_OW 273
58446: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58447: LD_VAR 0 9
58451: PPUSH
58452: LD_VAR 0 10
58456: PPUSH
58457: CALL_OW 488
58461: IFFALSE 58485
58463: PUSH
58464: LD_VAR 0 9
58468: PUSH
58469: LD_VAR 0 10
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_VAR 0 7
58482: IN
58483: NOT
58484: AND
58485: IFFALSE 58504
58487: PUSH
58488: LD_VAR 0 9
58492: PPUSH
58493: LD_VAR 0 10
58497: PPUSH
58498: CALL_OW 458
58502: NOT
58503: AND
58504: IFFALSE 58546
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58506: LD_ADDR_VAR 0 7
58510: PUSH
58511: LD_VAR 0 7
58515: PPUSH
58516: LD_VAR 0 7
58520: PUSH
58521: LD_INT 1
58523: PLUS
58524: PPUSH
58525: LD_VAR 0 9
58529: PUSH
58530: LD_VAR 0 10
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PPUSH
58539: CALL_OW 1
58543: ST_TO_ADDR
58544: GO 58560
// i := i - 1 ;
58546: LD_ADDR_VAR 0 5
58550: PUSH
58551: LD_VAR 0 5
58555: PUSH
58556: LD_INT 1
58558: MINUS
58559: ST_TO_ADDR
// end ;
58560: GO 58362
58562: POP
58563: POP
// for i in tmp do
58564: LD_ADDR_VAR 0 5
58568: PUSH
58569: LD_VAR 0 7
58573: PUSH
58574: FOR_IN
58575: IFFALSE 58613
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58577: LD_VAR 0 1
58581: PPUSH
58582: LD_VAR 0 5
58586: PUSH
58587: LD_INT 1
58589: ARRAY
58590: PPUSH
58591: LD_VAR 0 5
58595: PUSH
58596: LD_INT 2
58598: ARRAY
58599: PPUSH
58600: CALL 57547 0 3
58604: NOT
58605: IFFALSE 58611
// exit ;
58607: POP
58608: POP
58609: GO 58615
58611: GO 58574
58613: POP
58614: POP
// end ;
58615: LD_VAR 0 4
58619: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58620: LD_INT 0
58622: PPUSH
58623: PPUSH
58624: PPUSH
58625: PPUSH
58626: PPUSH
58627: PPUSH
58628: PPUSH
58629: PPUSH
58630: PPUSH
// if GetClass ( unit ) <> class_sniper then
58631: LD_VAR 0 1
58635: PPUSH
58636: CALL_OW 257
58640: PUSH
58641: LD_INT 5
58643: NONEQUAL
58644: IFFALSE 58648
// exit ;
58646: GO 59118
// dist := 8 ;
58648: LD_ADDR_VAR 0 5
58652: PUSH
58653: LD_INT 8
58655: ST_TO_ADDR
// viewRange := 12 ;
58656: LD_ADDR_VAR 0 8
58660: PUSH
58661: LD_INT 12
58663: ST_TO_ADDR
// side := GetSide ( unit ) ;
58664: LD_ADDR_VAR 0 6
58668: PUSH
58669: LD_VAR 0 1
58673: PPUSH
58674: CALL_OW 255
58678: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58679: LD_INT 61
58681: PPUSH
58682: LD_VAR 0 6
58686: PPUSH
58687: CALL_OW 321
58691: PUSH
58692: LD_INT 2
58694: EQUAL
58695: IFFALSE 58705
// viewRange := 16 ;
58697: LD_ADDR_VAR 0 8
58701: PUSH
58702: LD_INT 16
58704: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58705: LD_VAR 0 1
58709: PPUSH
58710: LD_VAR 0 2
58714: PPUSH
58715: LD_VAR 0 3
58719: PPUSH
58720: CALL_OW 297
58724: PUSH
58725: LD_VAR 0 5
58729: GREATER
58730: IFFALSE 58809
// begin ComMoveXY ( unit , x , y ) ;
58732: LD_VAR 0 1
58736: PPUSH
58737: LD_VAR 0 2
58741: PPUSH
58742: LD_VAR 0 3
58746: PPUSH
58747: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58751: LD_INT 35
58753: PPUSH
58754: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58758: LD_VAR 0 1
58762: PPUSH
58763: LD_VAR 0 2
58767: PPUSH
58768: LD_VAR 0 3
58772: PPUSH
58773: CALL 46961 0 3
58777: NOT
58778: IFFALSE 58782
// exit ;
58780: GO 59118
// until GetDistUnitXY ( unit , x , y ) < dist ;
58782: LD_VAR 0 1
58786: PPUSH
58787: LD_VAR 0 2
58791: PPUSH
58792: LD_VAR 0 3
58796: PPUSH
58797: CALL_OW 297
58801: PUSH
58802: LD_VAR 0 5
58806: LESS
58807: IFFALSE 58751
// end ; ComTurnXY ( unit , x , y ) ;
58809: LD_VAR 0 1
58813: PPUSH
58814: LD_VAR 0 2
58818: PPUSH
58819: LD_VAR 0 3
58823: PPUSH
58824: CALL_OW 118
// repeat if Multiplayer then
58828: LD_OWVAR 4
58832: IFFALSE 58843
// wait ( 35 ) else
58834: LD_INT 35
58836: PPUSH
58837: CALL_OW 67
58841: GO 58850
// wait ( 5 ) ;
58843: LD_INT 5
58845: PPUSH
58846: CALL_OW 67
// _d := GetDir ( unit ) ;
58850: LD_ADDR_VAR 0 11
58854: PUSH
58855: LD_VAR 0 1
58859: PPUSH
58860: CALL_OW 254
58864: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58865: LD_ADDR_VAR 0 7
58869: PUSH
58870: LD_VAR 0 1
58874: PPUSH
58875: CALL_OW 250
58879: PPUSH
58880: LD_VAR 0 1
58884: PPUSH
58885: CALL_OW 251
58889: PPUSH
58890: LD_VAR 0 2
58894: PPUSH
58895: LD_VAR 0 3
58899: PPUSH
58900: CALL 49597 0 4
58904: ST_TO_ADDR
// until dir = _d ;
58905: LD_VAR 0 7
58909: PUSH
58910: LD_VAR 0 11
58914: EQUAL
58915: IFFALSE 58828
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58917: LD_ADDR_VAR 0 9
58921: PUSH
58922: LD_VAR 0 1
58926: PPUSH
58927: CALL_OW 250
58931: PPUSH
58932: LD_VAR 0 7
58936: PPUSH
58937: LD_VAR 0 5
58941: PPUSH
58942: CALL_OW 272
58946: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58947: LD_ADDR_VAR 0 10
58951: PUSH
58952: LD_VAR 0 1
58956: PPUSH
58957: CALL_OW 251
58961: PPUSH
58962: LD_VAR 0 7
58966: PPUSH
58967: LD_VAR 0 5
58971: PPUSH
58972: CALL_OW 273
58976: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58977: LD_VAR 0 9
58981: PPUSH
58982: LD_VAR 0 10
58986: PPUSH
58987: CALL_OW 488
58991: NOT
58992: IFFALSE 58996
// exit ;
58994: GO 59118
// ComAnimCustom ( unit , 1 ) ;
58996: LD_VAR 0 1
59000: PPUSH
59001: LD_INT 1
59003: PPUSH
59004: CALL_OW 592
// p := 0 ;
59008: LD_ADDR_VAR 0 12
59012: PUSH
59013: LD_INT 0
59015: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59016: LD_VAR 0 9
59020: PPUSH
59021: LD_VAR 0 10
59025: PPUSH
59026: LD_VAR 0 6
59030: PPUSH
59031: LD_VAR 0 8
59035: PPUSH
59036: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59040: LD_INT 35
59042: PPUSH
59043: CALL_OW 67
// p := Inc ( p ) ;
59047: LD_ADDR_VAR 0 12
59051: PUSH
59052: LD_VAR 0 12
59056: PPUSH
59057: CALL 49553 0 1
59061: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59062: LD_VAR 0 12
59066: PUSH
59067: LD_INT 3
59069: EQUAL
59070: IFTRUE 59084
59072: PUSH
59073: LD_VAR 0 1
59077: PPUSH
59078: CALL_OW 302
59082: NOT
59083: OR
59084: IFTRUE 59097
59086: PUSH
59087: LD_VAR 0 1
59091: PPUSH
59092: CALL_OW 301
59096: OR
59097: IFFALSE 59040
// RemoveSeeing ( _x , _y , side ) ;
59099: LD_VAR 0 9
59103: PPUSH
59104: LD_VAR 0 10
59108: PPUSH
59109: LD_VAR 0 6
59113: PPUSH
59114: CALL_OW 331
// end ; end_of_file
59118: LD_VAR 0 4
59122: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
59123: LD_EXP 39
59127: IFFALSE 59468
59129: GO 59131
59131: DISABLE
59132: LD_INT 0
59134: PPUSH
59135: PPUSH
59136: PPUSH
// begin mpKingPoints := [ ] ;
59137: LD_ADDR_EXP 58
59141: PUSH
59142: EMPTY
59143: ST_TO_ADDR
// if mpTeamGame then
59144: LD_EXP 11
59148: IFFALSE 59202
// begin for i := 1 to Count ( mpTeams ) do
59150: LD_ADDR_VAR 0 1
59154: PUSH
59155: DOUBLE
59156: LD_INT 1
59158: DEC
59159: ST_TO_ADDR
59160: LD_EXP 10
59164: PPUSH
59165: CALL 12248 0 1
59169: PUSH
59170: FOR_TO
59171: IFFALSE 59198
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59173: LD_ADDR_EXP 58
59177: PUSH
59178: LD_EXP 58
59182: PPUSH
59183: LD_VAR 0 1
59187: PPUSH
59188: LD_INT 0
59190: PPUSH
59191: CALL_OW 1
59195: ST_TO_ADDR
59196: GO 59170
59198: POP
59199: POP
// end else
59200: GO 59245
// begin for i := 1 to 8 do
59202: LD_ADDR_VAR 0 1
59206: PUSH
59207: DOUBLE
59208: LD_INT 1
59210: DEC
59211: ST_TO_ADDR
59212: LD_INT 8
59214: PUSH
59215: FOR_TO
59216: IFFALSE 59243
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59218: LD_ADDR_EXP 58
59222: PUSH
59223: LD_EXP 58
59227: PPUSH
59228: LD_VAR 0 1
59232: PPUSH
59233: LD_INT 0
59235: PPUSH
59236: CALL_OW 1
59240: ST_TO_ADDR
59241: GO 59215
59243: POP
59244: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
59245: LD_ADDR_VAR 0 3
59249: PUSH
59250: LD_EXP 2
59254: PPUSH
59255: LD_INT 0
59257: PPUSH
59258: CALL_OW 517
59262: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59263: LD_ADDR_VAR 0 1
59267: PUSH
59268: DOUBLE
59269: LD_INT 1
59271: DEC
59272: ST_TO_ADDR
59273: LD_VAR 0 3
59277: PUSH
59278: LD_INT 1
59280: ARRAY
59281: PUSH
59282: FOR_TO
59283: IFFALSE 59350
// for j := 1 to 8 do
59285: LD_ADDR_VAR 0 2
59289: PUSH
59290: DOUBLE
59291: LD_INT 1
59293: DEC
59294: ST_TO_ADDR
59295: LD_INT 8
59297: PUSH
59298: FOR_TO
59299: IFFALSE 59346
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
59301: LD_VAR 0 3
59305: PUSH
59306: LD_INT 1
59308: ARRAY
59309: PUSH
59310: LD_VAR 0 1
59314: ARRAY
59315: PPUSH
59316: LD_VAR 0 3
59320: PUSH
59321: LD_INT 2
59323: ARRAY
59324: PUSH
59325: LD_VAR 0 1
59329: ARRAY
59330: PPUSH
59331: LD_VAR 0 2
59335: PPUSH
59336: LD_INT 12
59338: NEG
59339: PPUSH
59340: CALL_OW 330
59344: GO 59298
59346: POP
59347: POP
59348: GO 59282
59350: POP
59351: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
59352: LD_EXP 34
59356: PPUSH
59357: LD_INT 1
59359: PPUSH
59360: CALL_OW 424
// UpdateCounter ;
59364: CALL 59974 0 0
// repeat wait ( 0 0$1 ) ;
59368: LD_INT 35
59370: PPUSH
59371: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59375: LD_ADDR_VAR 0 3
59379: PUSH
59380: LD_EXP 34
59384: PPUSH
59385: LD_INT 3
59387: PUSH
59388: LD_INT 57
59390: PUSH
59391: EMPTY
59392: LIST
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 50
59400: PUSH
59401: EMPTY
59402: LIST
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: LD_INT 30
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 30
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: LIST
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: LIST
59436: PPUSH
59437: CALL_OW 70
59441: ST_TO_ADDR
// if not tmp then
59442: LD_VAR 0 3
59446: NOT
59447: IFFALSE 59451
// continue ;
59449: GO 59368
// AddPoints ( tmp ) ;
59451: LD_VAR 0 3
59455: PPUSH
59456: CALL 59652 0 1
// UpdateCounter ;
59460: CALL 59974 0 0
// until false ;
59464: LD_INT 0
59466: IFFALSE 59368
// end ;
59468: PPOPN 3
59470: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
59471: LD_EXP 39
59475: IFFALSE 59483
59477: PUSH
59478: LD_EXP 37
59482: AND
59483: IFFALSE 59649
59485: GO 59487
59487: DISABLE
59488: LD_INT 0
59490: PPUSH
59491: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
59492: LD_ADDR_VAR 0 2
59496: PUSH
59497: LD_EXP 2
59501: PPUSH
59502: LD_INT 0
59504: PPUSH
59505: CALL_OW 517
59509: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59510: LD_ADDR_VAR 0 1
59514: PUSH
59515: DOUBLE
59516: LD_INT 1
59518: DEC
59519: ST_TO_ADDR
59520: LD_VAR 0 2
59524: PUSH
59525: LD_INT 1
59527: ARRAY
59528: PUSH
59529: FOR_TO
59530: IFFALSE 59571
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
59532: LD_VAR 0 2
59536: PUSH
59537: LD_INT 1
59539: ARRAY
59540: PUSH
59541: LD_VAR 0 1
59545: ARRAY
59546: PPUSH
59547: LD_VAR 0 2
59551: PUSH
59552: LD_INT 2
59554: ARRAY
59555: PUSH
59556: LD_VAR 0 1
59560: ARRAY
59561: PPUSH
59562: LD_INT 125
59564: PPUSH
59565: CALL_OW 495
59569: GO 59529
59571: POP
59572: POP
// repeat wait ( mpEmissions ) ;
59573: LD_EXP 37
59577: PPUSH
59578: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
59582: LD_ADDR_VAR 0 1
59586: PUSH
59587: DOUBLE
59588: LD_INT 1
59590: DEC
59591: ST_TO_ADDR
59592: LD_VAR 0 2
59596: PUSH
59597: LD_INT 1
59599: ARRAY
59600: PUSH
59601: FOR_TO
59602: IFFALSE 59643
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
59604: LD_VAR 0 2
59608: PUSH
59609: LD_INT 1
59611: ARRAY
59612: PUSH
59613: LD_VAR 0 1
59617: ARRAY
59618: PPUSH
59619: LD_VAR 0 2
59623: PUSH
59624: LD_INT 2
59626: ARRAY
59627: PUSH
59628: LD_VAR 0 1
59632: ARRAY
59633: PPUSH
59634: LD_INT 15
59636: PPUSH
59637: CALL_OW 495
59641: GO 59601
59643: POP
59644: POP
// until false ;
59645: LD_INT 0
59647: IFFALSE 59573
// end ;
59649: PPOPN 2
59651: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
59652: LD_INT 0
59654: PPUSH
59655: PPUSH
59656: PPUSH
59657: PPUSH
59658: PPUSH
// if mpTeamGame then
59659: LD_EXP 11
59663: IFFALSE 59860
// begin first := depots [ 1 ] ;
59665: LD_ADDR_VAR 0 4
59669: PUSH
59670: LD_VAR 0 1
59674: PUSH
59675: LD_INT 1
59677: ARRAY
59678: ST_TO_ADDR
// side := GetSide ( first ) ;
59679: LD_ADDR_VAR 0 6
59683: PUSH
59684: LD_VAR 0 4
59688: PPUSH
59689: CALL_OW 255
59693: ST_TO_ADDR
// for i := 1 to mpTeams do
59694: LD_ADDR_VAR 0 3
59698: PUSH
59699: DOUBLE
59700: LD_INT 1
59702: DEC
59703: ST_TO_ADDR
59704: LD_EXP 10
59708: PUSH
59709: FOR_TO
59710: IFFALSE 59744
// if side in mpTeams [ i ] then
59712: LD_VAR 0 6
59716: PUSH
59717: LD_EXP 10
59721: PUSH
59722: LD_VAR 0 3
59726: ARRAY
59727: IN
59728: IFFALSE 59742
// begin team := i ;
59730: LD_ADDR_VAR 0 5
59734: PUSH
59735: LD_VAR 0 3
59739: ST_TO_ADDR
// break ;
59740: GO 59744
// end ;
59742: GO 59709
59744: POP
59745: POP
// if not team then
59746: LD_VAR 0 5
59750: NOT
59751: IFFALSE 59755
// exit ;
59753: GO 59969
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59755: LD_EXP 34
59759: PPUSH
59760: LD_INT 81
59762: PUSH
59763: LD_VAR 0 6
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PPUSH
59772: CALL_OW 70
59776: IFFALSE 59780
// exit ;
59778: GO 59969
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
59780: LD_ADDR_EXP 58
59784: PUSH
59785: LD_EXP 58
59789: PPUSH
59790: LD_VAR 0 5
59794: PPUSH
59795: LD_EXP 58
59799: PUSH
59800: LD_VAR 0 5
59804: ARRAY
59805: PUSH
59806: LD_INT 1
59808: PLUS
59809: PPUSH
59810: CALL_OW 1
59814: ST_TO_ADDR
// for i in mpTeams [ team ] do
59815: LD_ADDR_VAR 0 3
59819: PUSH
59820: LD_EXP 10
59824: PUSH
59825: LD_VAR 0 5
59829: ARRAY
59830: PUSH
59831: FOR_IN
59832: IFFALSE 59856
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
59834: LD_VAR 0 3
59838: PPUSH
59839: LD_EXP 58
59843: PUSH
59844: LD_VAR 0 5
59848: ARRAY
59849: PPUSH
59850: CALL_OW 506
59854: GO 59831
59856: POP
59857: POP
// end else
59858: GO 59969
// begin first := depots [ 1 ] ;
59860: LD_ADDR_VAR 0 4
59864: PUSH
59865: LD_VAR 0 1
59869: PUSH
59870: LD_INT 1
59872: ARRAY
59873: ST_TO_ADDR
// side := GetSide ( first ) ;
59874: LD_ADDR_VAR 0 6
59878: PUSH
59879: LD_VAR 0 4
59883: PPUSH
59884: CALL_OW 255
59888: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59889: LD_EXP 34
59893: PPUSH
59894: LD_INT 81
59896: PUSH
59897: LD_VAR 0 6
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PPUSH
59906: CALL_OW 70
59910: IFFALSE 59914
// exit ;
59912: GO 59969
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
59914: LD_ADDR_EXP 58
59918: PUSH
59919: LD_EXP 58
59923: PPUSH
59924: LD_VAR 0 6
59928: PPUSH
59929: LD_EXP 58
59933: PUSH
59934: LD_VAR 0 6
59938: ARRAY
59939: PUSH
59940: LD_INT 1
59942: PLUS
59943: PPUSH
59944: CALL_OW 1
59948: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
59949: LD_VAR 0 6
59953: PPUSH
59954: LD_EXP 58
59958: PUSH
59959: LD_VAR 0 6
59963: ARRAY
59964: PPUSH
59965: CALL_OW 506
// end ; end ;
59969: LD_VAR 0 2
59973: RET
// function UpdateCounter ; var i ; begin
59974: LD_INT 0
59976: PPUSH
59977: PPUSH
// result := [ ] ;
59978: LD_ADDR_VAR 0 1
59982: PUSH
59983: EMPTY
59984: ST_TO_ADDR
// if mpTeamGame then
59985: LD_EXP 11
59989: IFFALSE 60056
// begin for i := 1 to mpTeams do
59991: LD_ADDR_VAR 0 2
59995: PUSH
59996: DOUBLE
59997: LD_INT 1
59999: DEC
60000: ST_TO_ADDR
60001: LD_EXP 10
60005: PUSH
60006: FOR_TO
60007: IFFALSE 60052
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
60009: LD_ADDR_VAR 0 1
60013: PUSH
60014: LD_VAR 0 1
60018: PUSH
60019: LD_STRING #KingoftheHill-Team
60021: PUSH
60022: LD_VAR 0 2
60026: PUSH
60027: LD_EXP 58
60031: PUSH
60032: LD_VAR 0 2
60036: ARRAY
60037: PUSH
60038: LD_EXP 35
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: ADD
60049: ST_TO_ADDR
60050: GO 60006
60052: POP
60053: POP
// end else
60054: GO 60129
// begin for i := 1 to 8 do
60056: LD_ADDR_VAR 0 2
60060: PUSH
60061: DOUBLE
60062: LD_INT 1
60064: DEC
60065: ST_TO_ADDR
60066: LD_INT 8
60068: PUSH
60069: FOR_TO
60070: IFFALSE 60127
// if mpSidePositions [ i ] then
60072: LD_EXP 7
60076: PUSH
60077: LD_VAR 0 2
60081: ARRAY
60082: IFFALSE 60125
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
60084: LD_ADDR_VAR 0 1
60088: PUSH
60089: LD_VAR 0 1
60093: PUSH
60094: LD_STRING #KingoftheHill-Player
60096: PUSH
60097: LD_VAR 0 2
60101: PUSH
60102: LD_EXP 58
60106: PUSH
60107: LD_VAR 0 2
60111: ARRAY
60112: PUSH
60113: LD_EXP 35
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: ADD
60124: ST_TO_ADDR
60125: GO 60069
60127: POP
60128: POP
// end ; mpDisplayStrings := result ;
60129: LD_ADDR_EXP 38
60133: PUSH
60134: LD_VAR 0 1
60138: ST_TO_ADDR
// end ;
60139: LD_VAR 0 1
60143: RET
// export function HowMuchPointsKing ( side ) ; begin
60144: LD_INT 0
60146: PPUSH
// result := HowMuchPoints ( side ) ;
60147: LD_ADDR_VAR 0 2
60151: PUSH
60152: LD_VAR 0 1
60156: PPUSH
60157: CALL 60167 0 1
60161: ST_TO_ADDR
// end ;
60162: LD_VAR 0 2
60166: RET
// function HowMuchPoints ( side ) ; var i ; begin
60167: LD_INT 0
60169: PPUSH
60170: PPUSH
// if mpTeamGame then
60171: LD_EXP 11
60175: IFFALSE 60244
// begin for i := 1 to Count ( mpTeams ) do
60177: LD_ADDR_VAR 0 3
60181: PUSH
60182: DOUBLE
60183: LD_INT 1
60185: DEC
60186: ST_TO_ADDR
60187: LD_EXP 10
60191: PPUSH
60192: CALL 12248 0 1
60196: PUSH
60197: FOR_TO
60198: IFFALSE 60240
// begin if side in mpTeams [ i ] then
60200: LD_VAR 0 1
60204: PUSH
60205: LD_EXP 10
60209: PUSH
60210: LD_VAR 0 3
60214: ARRAY
60215: IN
60216: IFFALSE 60238
// begin result := mpKingPoints [ i ] ;
60218: LD_ADDR_VAR 0 2
60222: PUSH
60223: LD_EXP 58
60227: PUSH
60228: LD_VAR 0 3
60232: ARRAY
60233: ST_TO_ADDR
// exit ;
60234: POP
60235: POP
60236: GO 60260
// end ; end ;
60238: GO 60197
60240: POP
60241: POP
// end else
60242: GO 60260
// result := mpKingPoints [ side ] ;
60244: LD_ADDR_VAR 0 2
60248: PUSH
60249: LD_EXP 58
60253: PUSH
60254: LD_VAR 0 1
60258: ARRAY
60259: ST_TO_ADDR
// end ;
60260: LD_VAR 0 2
60264: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
60265: LD_EXP 39
60269: IFFALSE 60277
60271: PUSH
60272: CALL 60689 0 0
60276: AND
60277: IFFALSE 60285
60279: PUSH
60280: LD_OWVAR 4
60284: AND
60285: IFFALSE 60538
60287: GO 60289
60289: DISABLE
60290: LD_INT 0
60292: PPUSH
60293: PPUSH
// begin canWin := false ;
60294: LD_ADDR_VAR 0 2
60298: PUSH
60299: LD_INT 0
60301: ST_TO_ADDR
// if not HasPower ( your_side ) then
60302: LD_OWVAR 2
60306: PPUSH
60307: CALL 60731 0 1
60311: NOT
60312: IFFALSE 60323
// begin Multiplayer_Loose_Message ;
60314: CALL_OW 521
// enable ( mpLose ) ;
60318: LD_INT 102
60320: ENABLE_MARKED
// end else
60321: GO 60538
// begin if not EnemiesInGame then
60323: CALL 60541 0 0
60327: NOT
60328: IFFALSE 60335
// begin enable ( mpWin ) ;
60330: LD_INT 101
60332: ENABLE_MARKED
// exit ;
60333: GO 60538
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
60335: LD_ADDR_VAR 0 2
60339: PUSH
60340: LD_OWVAR 2
60344: PPUSH
60345: CALL 60167 0 1
60349: PUSH
60350: LD_EXP 35
60354: GREATEREQUAL
60355: IFFALSE 60368
60357: PUSH
60358: LD_OWVAR 2
60362: PPUSH
60363: CALL 60731 0 1
60367: AND
60368: ST_TO_ADDR
// for i := 1 to 8 do
60369: LD_ADDR_VAR 0 1
60373: PUSH
60374: DOUBLE
60375: LD_INT 1
60377: DEC
60378: ST_TO_ADDR
60379: LD_INT 8
60381: PUSH
60382: FOR_TO
60383: IFFALSE 60524
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
60385: LD_EXP 7
60389: PUSH
60390: LD_VAR 0 1
60394: ARRAY
60395: IFFALSE 60408
60397: PUSH
60398: LD_VAR 0 1
60402: PPUSH
60403: CALL_OW 108
60407: AND
60408: IFFALSE 60422
60410: PUSH
60411: LD_VAR 0 1
60415: PUSH
60416: LD_OWVAR 2
60420: NONEQUAL
60421: AND
60422: IFFALSE 60522
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60424: LD_EXP 8
60428: PUSH
60429: LD_VAR 0 1
60433: ARRAY
60434: NOT
60435: IFTRUE 60483
60437: PUSH
60438: LD_EXP 8
60442: PUSH
60443: LD_VAR 0 1
60447: ARRAY
60448: PUSH
60449: LD_EXP 8
60453: PUSH
60454: LD_OWVAR 2
60458: ARRAY
60459: NONEQUAL
60460: IFFALSE 60482
60462: PUSH
60463: LD_OWVAR 2
60467: PPUSH
60468: LD_VAR 0 1
60472: PPUSH
60473: CALL_OW 81
60477: PUSH
60478: LD_INT 1
60480: NONEQUAL
60481: AND
60482: OR
60483: IFFALSE 60522
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
60485: LD_VAR 0 1
60489: PPUSH
60490: CALL 60167 0 1
60494: PUSH
60495: LD_EXP 35
60499: GREATEREQUAL
60500: IFFALSE 60513
60502: PUSH
60503: LD_VAR 0 1
60507: PPUSH
60508: CALL 60731 0 1
60512: AND
60513: IFFALSE 60522
// begin enable ( mpLose ) ;
60515: LD_INT 102
60517: ENABLE_MARKED
// exit ;
60518: POP
60519: POP
60520: GO 60538
// end ;
60522: GO 60382
60524: POP
60525: POP
// if canWin then
60526: LD_VAR 0 2
60530: IFFALSE 60537
// enable ( mpWin ) else
60532: LD_INT 101
60534: ENABLE_MARKED
60535: GO 60538
// enable ;
60537: ENABLE
// end ; end ;
60538: PPOPN 2
60540: END
// function EnemiesInGame ; var i ; begin
60541: LD_INT 0
60543: PPUSH
60544: PPUSH
// result := false ;
60545: LD_ADDR_VAR 0 1
60549: PUSH
60550: LD_INT 0
60552: ST_TO_ADDR
// for i := 1 to 8 do
60553: LD_ADDR_VAR 0 2
60557: PUSH
60558: DOUBLE
60559: LD_INT 1
60561: DEC
60562: ST_TO_ADDR
60563: LD_INT 8
60565: PUSH
60566: FOR_TO
60567: IFFALSE 60682
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
60569: LD_VAR 0 2
60573: PUSH
60574: LD_OWVAR 2
60578: NONEQUAL
60579: IFFALSE 60592
60581: PUSH
60582: LD_VAR 0 2
60586: PPUSH
60587: CALL 60731 0 1
60591: AND
60592: IFFALSE 60605
60594: PUSH
60595: LD_VAR 0 2
60599: PPUSH
60600: CALL_OW 108
60604: AND
60605: IFFALSE 60680
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60607: LD_EXP 8
60611: PUSH
60612: LD_VAR 0 2
60616: ARRAY
60617: NOT
60618: IFTRUE 60666
60620: PUSH
60621: LD_EXP 8
60625: PUSH
60626: LD_VAR 0 2
60630: ARRAY
60631: PUSH
60632: LD_EXP 8
60636: PUSH
60637: LD_OWVAR 2
60641: ARRAY
60642: NONEQUAL
60643: IFFALSE 60665
60645: PUSH
60646: LD_OWVAR 2
60650: PPUSH
60651: LD_VAR 0 2
60655: PPUSH
60656: CALL_OW 81
60660: PUSH
60661: LD_INT 1
60663: NONEQUAL
60664: AND
60665: OR
60666: IFFALSE 60680
// begin result := true ;
60668: LD_ADDR_VAR 0 1
60672: PUSH
60673: LD_INT 1
60675: ST_TO_ADDR
// exit ;
60676: POP
60677: POP
60678: GO 60684
// end ;
60680: GO 60566
60682: POP
60683: POP
// end ;
60684: LD_VAR 0 1
60688: RET
// function CanWinLoose ; begin
60689: LD_INT 0
60691: PPUSH
// result := true ;
60692: LD_ADDR_VAR 0 1
60696: PUSH
60697: LD_INT 1
60699: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
60700: CALL_OW 531
60704: IFFALSE 60716
60706: PUSH
60707: CALL_OW 519
60711: PUSH
60712: LD_INT 1
60714: GREATER
60715: AND
60716: IFFALSE 60726
// result := false ;
60718: LD_ADDR_VAR 0 1
60722: PUSH
60723: LD_INT 0
60725: ST_TO_ADDR
// end ;
60726: LD_VAR 0 1
60730: RET
// function HasPower ( i ) ; begin
60731: LD_INT 0
60733: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
60734: LD_ADDR_VAR 0 2
60738: PUSH
60739: LD_INT 22
60741: PUSH
60742: LD_VAR 0 1
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: PUSH
60754: LD_INT 21
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 33
60766: PUSH
60767: LD_INT 3
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 33
60776: PUSH
60777: LD_INT 5
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PPUSH
60794: CALL_OW 69
60798: ST_TO_ADDR
// end ; end_of_file
60799: LD_VAR 0 2
60803: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60804: PPOPN 6
60806: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60807: LD_EXP 3
60811: PUSH
60812: LD_INT 4
60814: EQUAL
60815: IFFALSE 60851
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60817: LD_STRING setGameDifficulty(
60819: PUSH
60820: LD_OWVAR 67
60824: STR
60825: PUSH
60826: LD_STRING )
60828: STR
60829: PPUSH
60830: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60834: LD_STRING displayDifficulty(
60836: PUSH
60837: LD_OWVAR 67
60841: STR
60842: PUSH
60843: LD_STRING )
60845: STR
60846: PPUSH
60847: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60851: CALL 60880 0 0
// end ; end_of_file
60855: PPOPN 1
60857: END
// every 0 0$1 do
60858: GO 60860
60860: DISABLE
// begin enable ;
60861: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60862: LD_STRING updateTimer(
60864: PUSH
60865: LD_OWVAR 1
60869: STR
60870: PUSH
60871: LD_STRING );
60873: STR
60874: PPUSH
60875: CALL_OW 559
// end ;
60879: END
// export function SOS_MapStart ( ) ; begin
60880: LD_INT 0
60882: PPUSH
// UpdateFactoryWaypoints ( ) ;
60883: CALL 61814 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60887: CALL 62066 0 0
// ParseMultiDataToLua ( ) ;
60891: CALL 62213 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60895: LD_STRING setSpecLogoNumber(
60897: PUSH
60898: LD_INT 2
60900: STR
60901: PUSH
60902: LD_STRING ,
60904: STR
60905: PUSH
60906: LD_INT 1
60908: STR
60909: PUSH
60910: LD_STRING )
60912: STR
60913: PPUSH
60914: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60918: LD_STRING setSpecLogoNumber(
60920: PUSH
60921: LD_INT 3
60923: STR
60924: PUSH
60925: LD_STRING ,
60927: STR
60928: PUSH
60929: LD_INT 2
60931: STR
60932: PUSH
60933: LD_STRING )
60935: STR
60936: PPUSH
60937: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
60941: LD_STRING setSpecLogoNumber(
60943: PUSH
60944: LD_INT 4
60946: STR
60947: PUSH
60948: LD_STRING ,
60950: STR
60951: PUSH
60952: LD_INT 3
60954: STR
60955: PUSH
60956: LD_STRING )
60958: STR
60959: PPUSH
60960: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
60964: LD_STRING setSpecLogoNumber(
60966: PUSH
60967: LD_INT 5
60969: STR
60970: PUSH
60971: LD_STRING ,
60973: STR
60974: PUSH
60975: LD_INT 4
60977: STR
60978: PUSH
60979: LD_STRING )
60981: STR
60982: PPUSH
60983: CALL_OW 559
// end ;
60987: LD_VAR 0 1
60991: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
60992: LD_INT 0
60994: PPUSH
60995: PPUSH
60996: PPUSH
60997: PPUSH
60998: PPUSH
60999: PPUSH
61000: PPUSH
61001: PPUSH
61002: PPUSH
// for i := 1 to 8 do
61003: LD_ADDR_VAR 0 2
61007: PUSH
61008: DOUBLE
61009: LD_INT 1
61011: DEC
61012: ST_TO_ADDR
61013: LD_INT 8
61015: PUSH
61016: FOR_TO
61017: IFFALSE 61402
// begin if mpSidePositions [ i ] then
61019: LD_EXP 7
61023: PUSH
61024: LD_VAR 0 2
61028: ARRAY
61029: IFFALSE 61400
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61031: LD_ADDR_VAR 0 7
61035: PUSH
61036: LD_INT 22
61038: PUSH
61039: LD_VAR 0 2
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 21
61050: PUSH
61051: LD_INT 1
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PPUSH
61062: CALL_OW 69
61066: PPUSH
61067: CALL 12248 0 1
61071: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61072: LD_ADDR_VAR 0 9
61076: PUSH
61077: LD_INT 22
61079: PUSH
61080: LD_VAR 0 2
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 2
61091: PUSH
61092: LD_INT 30
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 30
61104: PUSH
61105: LD_INT 1
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: LIST
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PPUSH
61121: CALL_OW 69
61125: ST_TO_ADDR
// crates := 0 ;
61126: LD_ADDR_VAR 0 4
61130: PUSH
61131: LD_INT 0
61133: ST_TO_ADDR
// oil := 0 ;
61134: LD_ADDR_VAR 0 5
61138: PUSH
61139: LD_INT 0
61141: ST_TO_ADDR
// sib := 0 ;
61142: LD_ADDR_VAR 0 6
61146: PUSH
61147: LD_INT 0
61149: ST_TO_ADDR
// if bases then
61150: LD_VAR 0 9
61154: IFFALSE 61260
// begin for j in bases do
61156: LD_ADDR_VAR 0 3
61160: PUSH
61161: LD_VAR 0 9
61165: PUSH
61166: FOR_IN
61167: IFFALSE 61258
// begin base := GetBase ( j ) ;
61169: LD_ADDR_VAR 0 8
61173: PUSH
61174: LD_VAR 0 3
61178: PPUSH
61179: CALL_OW 274
61183: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61184: LD_ADDR_VAR 0 4
61188: PUSH
61189: LD_VAR 0 4
61193: PUSH
61194: LD_VAR 0 8
61198: PPUSH
61199: LD_INT 1
61201: PPUSH
61202: CALL_OW 275
61206: PLUS
61207: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61208: LD_ADDR_VAR 0 5
61212: PUSH
61213: LD_VAR 0 5
61217: PUSH
61218: LD_VAR 0 8
61222: PPUSH
61223: LD_INT 2
61225: PPUSH
61226: CALL_OW 275
61230: PLUS
61231: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61232: LD_ADDR_VAR 0 6
61236: PUSH
61237: LD_VAR 0 6
61241: PUSH
61242: LD_VAR 0 8
61246: PPUSH
61247: LD_INT 3
61249: PPUSH
61250: CALL_OW 275
61254: PLUS
61255: ST_TO_ADDR
// end ;
61256: GO 61166
61258: POP
61259: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61260: LD_STRING setSpecText(
61262: PUSH
61263: LD_VAR 0 2
61267: STR
61268: PUSH
61269: LD_STRING ,
61271: STR
61272: PUSH
61273: LD_INT 2
61275: STR
61276: PUSH
61277: LD_STRING ,
61279: STR
61280: PUSH
61281: LD_VAR 0 4
61285: STR
61286: PUSH
61287: LD_STRING )
61289: STR
61290: PPUSH
61291: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61295: LD_STRING setSpecText(
61297: PUSH
61298: LD_VAR 0 2
61302: STR
61303: PUSH
61304: LD_STRING ,
61306: STR
61307: PUSH
61308: LD_INT 3
61310: STR
61311: PUSH
61312: LD_STRING ,
61314: STR
61315: PUSH
61316: LD_VAR 0 5
61320: STR
61321: PUSH
61322: LD_STRING )
61324: STR
61325: PPUSH
61326: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61330: LD_STRING setSpecText(
61332: PUSH
61333: LD_VAR 0 2
61337: STR
61338: PUSH
61339: LD_STRING ,
61341: STR
61342: PUSH
61343: LD_INT 4
61345: STR
61346: PUSH
61347: LD_STRING ,
61349: STR
61350: PUSH
61351: LD_VAR 0 6
61355: STR
61356: PUSH
61357: LD_STRING )
61359: STR
61360: PPUSH
61361: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61365: LD_STRING setSpecText(
61367: PUSH
61368: LD_VAR 0 2
61372: STR
61373: PUSH
61374: LD_STRING ,
61376: STR
61377: PUSH
61378: LD_INT 5
61380: STR
61381: PUSH
61382: LD_STRING ,
61384: STR
61385: PUSH
61386: LD_VAR 0 7
61390: STR
61391: PUSH
61392: LD_STRING )
61394: STR
61395: PPUSH
61396: CALL_OW 559
// end ; end ;
61400: GO 61016
61402: POP
61403: POP
// end ;
61404: LD_VAR 0 1
61408: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61409: LD_INT 2
61411: PUSH
61412: LD_INT 30
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 30
61424: PUSH
61425: LD_INT 1
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: LIST
61436: PPUSH
61437: CALL_OW 69
61441: IFFALSE 61451
61443: GO 61445
61445: DISABLE
// begin enable ;
61446: ENABLE
// UpdateSpectatorBar ;
61447: CALL 60992 0 0
// end ;
61451: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61452: LD_INT 0
61454: PPUSH
// end ;
61455: LD_VAR 0 12
61459: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61460: LD_INT 0
61462: PPUSH
61463: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61464: LD_VAR 0 1
61468: NOT
61469: IFTRUE 61488
61471: PUSH
61472: LD_VAR 0 2
61476: PPUSH
61477: LD_VAR 0 3
61481: PPUSH
61482: CALL_OW 488
61486: NOT
61487: OR
61488: IFTRUE 61523
61490: PUSH
61491: LD_VAR 0 1
61495: PPUSH
61496: CALL_OW 266
61500: PUSH
61501: LD_INT 3
61503: NONEQUAL
61504: IFFALSE 61522
61506: PUSH
61507: LD_VAR 0 1
61511: PPUSH
61512: CALL_OW 247
61516: PUSH
61517: LD_INT 1
61519: EQUAL
61520: NOT
61521: AND
61522: OR
61523: IFFALSE 61527
// exit ;
61525: GO 61809
// if GetType ( factory ) = unit_human then
61527: LD_VAR 0 1
61531: PPUSH
61532: CALL_OW 247
61536: PUSH
61537: LD_INT 1
61539: EQUAL
61540: IFFALSE 61557
// factory := IsInUnit ( factory ) ;
61542: LD_ADDR_VAR 0 1
61546: PUSH
61547: LD_VAR 0 1
61551: PPUSH
61552: CALL_OW 310
61556: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61557: LD_VAR 0 1
61561: PPUSH
61562: CALL_OW 266
61566: PUSH
61567: LD_INT 3
61569: NONEQUAL
61570: IFFALSE 61574
// exit ;
61572: GO 61809
// for i := 1 to Count ( factoryWaypoints ) do
61574: LD_ADDR_VAR 0 5
61578: PUSH
61579: DOUBLE
61580: LD_INT 1
61582: DEC
61583: ST_TO_ADDR
61584: LD_EXP 59
61588: PPUSH
61589: CALL 12248 0 1
61593: PUSH
61594: FOR_TO
61595: IFFALSE 61757
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61597: LD_VAR 0 2
61601: PPUSH
61602: LD_VAR 0 3
61606: PPUSH
61607: CALL_OW 428
61611: PUSH
61612: LD_EXP 59
61616: PUSH
61617: LD_VAR 0 5
61621: ARRAY
61622: PUSH
61623: LD_INT 2
61625: ARRAY
61626: EQUAL
61627: IFFALSE 61659
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61629: LD_ADDR_EXP 59
61633: PUSH
61634: LD_EXP 59
61638: PPUSH
61639: LD_VAR 0 5
61643: PPUSH
61644: CALL_OW 3
61648: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61649: CALL 61814 0 0
// exit ;
61653: POP
61654: POP
61655: GO 61809
// end else
61657: GO 61755
// if factory = factoryWaypoints [ i ] [ 2 ] then
61659: LD_VAR 0 1
61663: PUSH
61664: LD_EXP 59
61668: PUSH
61669: LD_VAR 0 5
61673: ARRAY
61674: PUSH
61675: LD_INT 2
61677: ARRAY
61678: EQUAL
61679: IFFALSE 61755
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61681: LD_ADDR_EXP 59
61685: PUSH
61686: LD_EXP 59
61690: PPUSH
61691: LD_VAR 0 5
61695: PPUSH
61696: CALL_OW 3
61700: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61701: LD_ADDR_EXP 59
61705: PUSH
61706: LD_EXP 59
61710: PPUSH
61711: LD_VAR 0 1
61715: PPUSH
61716: CALL_OW 255
61720: PUSH
61721: LD_VAR 0 1
61725: PUSH
61726: LD_VAR 0 2
61730: PUSH
61731: LD_VAR 0 3
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: PPUSH
61742: CALL 48180 0 2
61746: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61747: CALL 61814 0 0
// exit ;
61751: POP
61752: POP
61753: GO 61809
// end ; end ;
61755: GO 61594
61757: POP
61758: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61759: LD_ADDR_EXP 59
61763: PUSH
61764: LD_EXP 59
61768: PPUSH
61769: LD_VAR 0 1
61773: PPUSH
61774: CALL_OW 255
61778: PUSH
61779: LD_VAR 0 1
61783: PUSH
61784: LD_VAR 0 2
61788: PUSH
61789: LD_VAR 0 3
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: PPUSH
61800: CALL 48180 0 2
61804: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61805: CALL 61814 0 0
// end ;
61809: LD_VAR 0 4
61813: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61814: LD_INT 0
61816: PPUSH
61817: PPUSH
61818: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61819: LD_STRING resetFactoryWaypoint();
61821: PPUSH
61822: CALL_OW 559
// if factoryWaypoints then
61826: LD_EXP 59
61830: IFFALSE 61951
// begin list := factoryWaypoints ;
61832: LD_ADDR_VAR 0 3
61836: PUSH
61837: LD_EXP 59
61841: ST_TO_ADDR
// for i := 1 to list do
61842: LD_ADDR_VAR 0 2
61846: PUSH
61847: DOUBLE
61848: LD_INT 1
61850: DEC
61851: ST_TO_ADDR
61852: LD_VAR 0 3
61856: PUSH
61857: FOR_TO
61858: IFFALSE 61949
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61860: LD_STRING setFactoryWaypointXY(
61862: PUSH
61863: LD_VAR 0 3
61867: PUSH
61868: LD_VAR 0 2
61872: ARRAY
61873: PUSH
61874: LD_INT 1
61876: ARRAY
61877: STR
61878: PUSH
61879: LD_STRING ,
61881: STR
61882: PUSH
61883: LD_VAR 0 3
61887: PUSH
61888: LD_VAR 0 2
61892: ARRAY
61893: PUSH
61894: LD_INT 2
61896: ARRAY
61897: STR
61898: PUSH
61899: LD_STRING ,
61901: STR
61902: PUSH
61903: LD_VAR 0 3
61907: PUSH
61908: LD_VAR 0 2
61912: ARRAY
61913: PUSH
61914: LD_INT 3
61916: ARRAY
61917: STR
61918: PUSH
61919: LD_STRING ,
61921: STR
61922: PUSH
61923: LD_VAR 0 3
61927: PUSH
61928: LD_VAR 0 2
61932: ARRAY
61933: PUSH
61934: LD_INT 4
61936: ARRAY
61937: STR
61938: PUSH
61939: LD_STRING )
61941: STR
61942: PPUSH
61943: CALL_OW 559
61947: GO 61857
61949: POP
61950: POP
// end ; end ;
61951: LD_VAR 0 1
61955: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61956: LD_INT 0
61958: PPUSH
// if HexInfo ( x , y ) = warehouse then
61959: LD_VAR 0 2
61963: PPUSH
61964: LD_VAR 0 3
61968: PPUSH
61969: CALL_OW 428
61973: PUSH
61974: LD_VAR 0 1
61978: EQUAL
61979: IFFALSE 62006
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61981: LD_ADDR_EXP 61
61985: PUSH
61986: LD_EXP 61
61990: PPUSH
61991: LD_VAR 0 1
61995: PPUSH
61996: LD_INT 0
61998: PPUSH
61999: CALL_OW 1
62003: ST_TO_ADDR
62004: GO 62057
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62006: LD_ADDR_EXP 61
62010: PUSH
62011: LD_EXP 61
62015: PPUSH
62016: LD_VAR 0 1
62020: PPUSH
62021: LD_VAR 0 1
62025: PPUSH
62026: CALL_OW 255
62030: PUSH
62031: LD_VAR 0 1
62035: PUSH
62036: LD_VAR 0 2
62040: PUSH
62041: LD_VAR 0 3
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: PPUSH
62052: CALL_OW 1
62056: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62057: CALL 62066 0 0
// end ;
62061: LD_VAR 0 4
62065: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62066: LD_INT 0
62068: PPUSH
62069: PPUSH
62070: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62071: LD_STRING resetWarehouseGatheringPoints();
62073: PPUSH
62074: CALL_OW 559
// if warehouseGatheringPoints then
62078: LD_EXP 61
62082: IFFALSE 62208
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62084: LD_ADDR_VAR 0 3
62088: PUSH
62089: LD_EXP 61
62093: PPUSH
62094: CALL 52114 0 1
62098: ST_TO_ADDR
// for i := 1 to list do
62099: LD_ADDR_VAR 0 2
62103: PUSH
62104: DOUBLE
62105: LD_INT 1
62107: DEC
62108: ST_TO_ADDR
62109: LD_VAR 0 3
62113: PUSH
62114: FOR_TO
62115: IFFALSE 62206
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62117: LD_STRING setWarehouseGatheringPointXY(
62119: PUSH
62120: LD_VAR 0 3
62124: PUSH
62125: LD_VAR 0 2
62129: ARRAY
62130: PUSH
62131: LD_INT 1
62133: ARRAY
62134: STR
62135: PUSH
62136: LD_STRING ,
62138: STR
62139: PUSH
62140: LD_VAR 0 3
62144: PUSH
62145: LD_VAR 0 2
62149: ARRAY
62150: PUSH
62151: LD_INT 2
62153: ARRAY
62154: STR
62155: PUSH
62156: LD_STRING ,
62158: STR
62159: PUSH
62160: LD_VAR 0 3
62164: PUSH
62165: LD_VAR 0 2
62169: ARRAY
62170: PUSH
62171: LD_INT 3
62173: ARRAY
62174: STR
62175: PUSH
62176: LD_STRING ,
62178: STR
62179: PUSH
62180: LD_VAR 0 3
62184: PUSH
62185: LD_VAR 0 2
62189: ARRAY
62190: PUSH
62191: LD_INT 4
62193: ARRAY
62194: STR
62195: PUSH
62196: LD_STRING )
62198: STR
62199: PPUSH
62200: CALL_OW 559
62204: GO 62114
62206: POP
62207: POP
// end ; end ;
62208: LD_VAR 0 1
62212: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62213: LD_INT 0
62215: PPUSH
62216: PPUSH
// if not mpSidePositions then
62217: LD_EXP 7
62221: NOT
62222: IFFALSE 62226
// exit ;
62224: GO 62297
// result :=  ;
62226: LD_ADDR_VAR 0 1
62230: PUSH
62231: LD_STRING 
62233: ST_TO_ADDR
// for i := 1 to 8 do
62234: LD_ADDR_VAR 0 2
62238: PUSH
62239: DOUBLE
62240: LD_INT 1
62242: DEC
62243: ST_TO_ADDR
62244: LD_INT 8
62246: PUSH
62247: FOR_TO
62248: IFFALSE 62278
// begin result := result & mpSidePositions [ i ] & ; ;
62250: LD_ADDR_VAR 0 1
62254: PUSH
62255: LD_VAR 0 1
62259: PUSH
62260: LD_EXP 7
62264: PUSH
62265: LD_VAR 0 2
62269: ARRAY
62270: STR
62271: PUSH
62272: LD_STRING ;
62274: STR
62275: ST_TO_ADDR
// end ;
62276: GO 62247
62278: POP
62279: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62280: LD_STRING setMultiplayerRealPosition("
62282: PUSH
62283: LD_VAR 0 1
62287: STR
62288: PUSH
62289: LD_STRING ");
62291: STR
62292: PPUSH
62293: CALL_OW 559
// end ;
62297: LD_VAR 0 1
62301: RET
