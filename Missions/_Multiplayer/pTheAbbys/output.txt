// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2785 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3169 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 2
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 120 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 120
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 2
 841: PUSH
 842: LD_INT 3
 844: PUSH
 845: LD_INT 4
 847: PUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 6
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Center1 , Center2 ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 7
 869: PUSH
 870: LD_INT 8
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 19
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 6
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 24
 921: PUSH
 922: LD_EXP 6
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 25
 935: PUSH
 936: LD_EXP 6
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 15
 949: PUSH
 950: LD_EXP 6
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 27
 963: PUSH
 964: LD_EXP 6
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 6
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 6
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// mpKingArea := 0 ;
1009: LD_ADDR_EXP 34
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// mpPoints := 0 ;
1017: LD_ADDR_EXP 35
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// mpEmissions := 0 ;
1025: LD_ADDR_EXP 37
1029: PUSH
1030: LD_INT 0
1032: ST_TO_ADDR
// kingArea := 0 ;
1033: LD_ADDR_EXP 1
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// kingCamArea := 0 ;
1041: LD_ADDR_EXP 2
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1049: LD_EXP 6
1053: PUSH
1054: LD_INT 9
1056: ARRAY
1057: IFFALSE 1189
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1059: LD_ADDR_EXP 36
1063: PUSH
1064: LD_INT 1
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: LD_INT 1
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: LD_INT 1
1087: PUSH
1088: LD_INT 1
1090: PUSH
1091: LD_INT 3
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: PUSH
1104: LD_INT 12
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 1
1112: PUSH
1113: LD_INT 24
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_INT 12
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 23
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 21
1146: PUSH
1147: LD_INT 1
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 42
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: LD_INT 21
1164: PUSH
1165: LD_INT 1
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 42
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: LIST
1188: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1189: LD_ADDR_EXP 16
1193: PUSH
1194: LD_EXP 6
1198: PUSH
1199: LD_INT 11
1201: ARRAY
1202: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1203: LD_ADDR_EXP 22
1207: PUSH
1208: LD_EXP 6
1212: PUSH
1213: LD_INT 12
1215: ARRAY
1216: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1217: LD_ADDR_EXP 26
1221: PUSH
1222: LD_EXP 6
1226: PUSH
1227: LD_INT 13
1229: ARRAY
1230: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1231: LD_ADDR_EXP 33
1235: PUSH
1236: LD_EXP 6
1240: PUSH
1241: LD_INT 14
1243: ARRAY
1244: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1245: LD_ADDR_EXP 30
1249: PUSH
1250: LD_EXP 6
1254: PUSH
1255: LD_INT 15
1257: ARRAY
1258: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1259: LD_ADDR_EXP 28
1263: PUSH
1264: LD_EXP 6
1268: PUSH
1269: LD_INT 18
1271: ARRAY
1272: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 6
1282: PUSH
1283: LD_INT 21
1285: ARRAY
1286: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1287: LD_ADDR_EXP 31
1291: PUSH
1292: LD_INT 9
1294: PUSH
1295: LD_INT 10
1297: PUSH
1298: LD_INT 11
1300: PUSH
1301: LD_INT 12
1303: PUSH
1304: LD_INT 13
1306: PUSH
1307: LD_INT 14
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 1 ) , GetBuildingFromArea ( DepotArea2 , 1 ) , GetBuildingFromArea ( DepotArea3 , 1 ) , GetBuildingFromArea ( DepotArea4 , 4 ) , GetBuildingFromArea ( DepotArea5 , 4 ) , GetBuildingFromArea ( DepotArea6 , 4 ) ] ;
1318: LD_ADDR_VAR 0 8
1322: PUSH
1323: LD_INT 15
1325: PPUSH
1326: LD_INT 1
1328: PPUSH
1329: CALL 53579 0 2
1333: PUSH
1334: LD_INT 16
1336: PPUSH
1337: LD_INT 1
1339: PPUSH
1340: CALL 53579 0 2
1344: PUSH
1345: LD_INT 17
1347: PPUSH
1348: LD_INT 1
1350: PPUSH
1351: CALL 53579 0 2
1355: PUSH
1356: LD_INT 18
1358: PPUSH
1359: LD_INT 4
1361: PPUSH
1362: CALL 53579 0 2
1366: PUSH
1367: LD_INT 19
1369: PPUSH
1370: LD_INT 4
1372: PPUSH
1373: CALL 53579 0 2
1377: PUSH
1378: LD_INT 20
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: CALL 53579 0 2
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1397: LD_ADDR_VAR 0 3
1401: PUSH
1402: DOUBLE
1403: LD_INT 1
1405: DEC
1406: ST_TO_ADDR
1407: LD_VAR 0 8
1411: PPUSH
1412: CALL 12894 0 1
1416: PUSH
1417: FOR_TO
1418: IFFALSE 1522
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1420: LD_ADDR_EXP 21
1424: PUSH
1425: LD_EXP 21
1429: PPUSH
1430: LD_VAR 0 3
1434: PPUSH
1435: LD_VAR 0 8
1439: PUSH
1440: LD_VAR 0 3
1444: ARRAY
1445: PUSH
1446: LD_INT 1
1448: ARRAY
1449: PPUSH
1450: LD_VAR 0 8
1454: PUSH
1455: LD_VAR 0 3
1459: ARRAY
1460: PUSH
1461: LD_INT 3
1463: ARRAY
1464: PPUSH
1465: LD_INT 10
1467: PPUSH
1468: CALL_OW 272
1472: PUSH
1473: LD_VAR 0 8
1477: PUSH
1478: LD_VAR 0 3
1482: ARRAY
1483: PUSH
1484: LD_INT 2
1486: ARRAY
1487: PPUSH
1488: LD_VAR 0 8
1492: PUSH
1493: LD_VAR 0 3
1497: ARRAY
1498: PUSH
1499: LD_INT 3
1501: ARRAY
1502: PPUSH
1503: LD_INT 10
1505: PPUSH
1506: CALL_OW 273
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 1
1519: ST_TO_ADDR
1520: GO 1417
1522: POP
1523: POP
// if hasOil then
1524: LD_VAR 0 5
1528: IFFALSE 1639
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1530: LD_ADDR_VAR 0 4
1534: PUSH
1535: LD_EXP 6
1539: PUSH
1540: LD_INT 6
1542: ARRAY
1543: PUSH
1544: LD_INT 2
1546: EQUAL
1547: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) , GetSourcesFromArea ( OilArea5 , all ) , GetSourcesFromArea ( OilArea6 , all ) ] ;
1548: LD_ADDR_EXP 12
1552: PUSH
1553: LD_INT 21
1555: PPUSH
1556: LD_VAR 0 4
1560: PPUSH
1561: CALL 53412 0 2
1565: PUSH
1566: LD_INT 22
1568: PPUSH
1569: LD_VAR 0 4
1573: PPUSH
1574: CALL 53412 0 2
1578: PUSH
1579: LD_INT 23
1581: PPUSH
1582: LD_VAR 0 4
1586: PPUSH
1587: CALL 53412 0 2
1591: PUSH
1592: LD_INT 24
1594: PPUSH
1595: LD_VAR 0 4
1599: PPUSH
1600: CALL 53412 0 2
1604: PUSH
1605: LD_INT 25
1607: PPUSH
1608: LD_VAR 0 4
1612: PPUSH
1613: CALL 53412 0 2
1617: PUSH
1618: LD_INT 26
1620: PPUSH
1621: LD_VAR 0 4
1625: PPUSH
1626: CALL 53412 0 2
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: ST_TO_ADDR
// end ; if hasSib then
1639: LD_VAR 0 6
1643: IFFALSE 1754
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1645: LD_ADDR_VAR 0 4
1649: PUSH
1650: LD_EXP 6
1654: PUSH
1655: LD_INT 7
1657: ARRAY
1658: PUSH
1659: LD_INT 2
1661: EQUAL
1662: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) , GetSourcesFromArea ( SibArea5 , all ) , GetSourcesFromArea ( SibArea6 , all ) ] ;
1663: LD_ADDR_EXP 13
1667: PUSH
1668: LD_INT 27
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 53412 0 2
1680: PUSH
1681: LD_INT 28
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 53412 0 2
1693: PUSH
1694: LD_INT 29
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 53412 0 2
1706: PUSH
1707: LD_INT 30
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 53412 0 2
1719: PUSH
1720: LD_INT 31
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 53412 0 2
1732: PUSH
1733: LD_INT 32
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 53412 0 2
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1754: LD_VAR 0 7
1758: PUSH
1759: LD_INT 1
1761: GREATEREQUAL
1762: IFFALSE 1774
// mpDepots := startPos ;
1764: LD_ADDR_EXP 14
1768: PUSH
1769: LD_VAR 0 8
1773: ST_TO_ADDR
// if baseLevel >= 2 then
1774: LD_VAR 0 7
1778: PUSH
1779: LD_INT 2
1781: GREATEREQUAL
1782: IFFALSE 2097
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( BunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( BunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( BunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( BunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea3 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea6 , 1 ) ] ] ;
1784: LD_ADDR_EXP 17
1788: PUSH
1789: LD_INT 31
1791: PUSH
1792: LD_INT 33
1794: PPUSH
1795: LD_INT 4
1797: PPUSH
1798: CALL 53579 0 2
1802: ADD
1803: PUSH
1804: LD_INT 31
1806: PUSH
1807: LD_INT 34
1809: PPUSH
1810: LD_INT 4
1812: PPUSH
1813: CALL 53579 0 2
1817: ADD
1818: PUSH
1819: LD_INT 4
1821: PUSH
1822: LD_INT 35
1824: PPUSH
1825: LD_INT 4
1827: PPUSH
1828: CALL 53579 0 2
1832: ADD
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 31
1841: PUSH
1842: LD_INT 36
1844: PPUSH
1845: LD_INT 4
1847: PPUSH
1848: CALL 53579 0 2
1852: ADD
1853: PUSH
1854: LD_INT 31
1856: PUSH
1857: LD_INT 37
1859: PPUSH
1860: LD_INT 4
1862: PPUSH
1863: CALL 53579 0 2
1867: ADD
1868: PUSH
1869: LD_INT 4
1871: PUSH
1872: LD_INT 38
1874: PPUSH
1875: LD_INT 4
1877: PPUSH
1878: CALL 53579 0 2
1882: ADD
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 31
1891: PUSH
1892: LD_INT 39
1894: PPUSH
1895: LD_INT 4
1897: PPUSH
1898: CALL 53579 0 2
1902: ADD
1903: PUSH
1904: LD_INT 31
1906: PUSH
1907: LD_INT 40
1909: PPUSH
1910: LD_INT 4
1912: PPUSH
1913: CALL 53579 0 2
1917: ADD
1918: PUSH
1919: LD_INT 4
1921: PUSH
1922: LD_INT 41
1924: PPUSH
1925: LD_INT 4
1927: PPUSH
1928: CALL 53579 0 2
1932: ADD
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: PUSH
1939: LD_INT 31
1941: PUSH
1942: LD_INT 42
1944: PPUSH
1945: LD_INT 1
1947: PPUSH
1948: CALL 53579 0 2
1952: ADD
1953: PUSH
1954: LD_INT 31
1956: PUSH
1957: LD_INT 43
1959: PPUSH
1960: LD_INT 1
1962: PPUSH
1963: CALL 53579 0 2
1967: ADD
1968: PUSH
1969: LD_INT 4
1971: PUSH
1972: LD_INT 44
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: CALL 53579 0 2
1982: ADD
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 31
1991: PUSH
1992: LD_INT 45
1994: PPUSH
1995: LD_INT 1
1997: PPUSH
1998: CALL 53579 0 2
2002: ADD
2003: PUSH
2004: LD_INT 31
2006: PUSH
2007: LD_INT 46
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL 53579 0 2
2017: ADD
2018: PUSH
2019: LD_INT 4
2021: PUSH
2022: LD_INT 47
2024: PPUSH
2025: LD_INT 1
2027: PPUSH
2028: CALL 53579 0 2
2032: ADD
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 31
2041: PUSH
2042: LD_INT 48
2044: PPUSH
2045: LD_INT 1
2047: PPUSH
2048: CALL 53579 0 2
2052: ADD
2053: PUSH
2054: LD_INT 31
2056: PUSH
2057: LD_INT 49
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: CALL 53579 0 2
2067: ADD
2068: PUSH
2069: LD_INT 4
2071: PUSH
2072: LD_INT 50
2074: PPUSH
2075: LD_INT 1
2077: PPUSH
2078: CALL 53579 0 2
2082: ADD
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: LIST
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// end ; end ;
2097: LD_VAR 0 2
2101: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2102: GO 2104
2104: DISABLE
2105: LD_INT 0
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
// begin if not mpShipments then
2115: LD_EXP 27
2119: NOT
2120: IFFALSE 2124
// exit ;
2122: GO 2639
// case mpShipments of 1 :
2124: LD_EXP 27
2128: PUSH
2129: LD_INT 1
2131: DOUBLE
2132: EQUAL
2133: IFTRUE 2137
2135: GO 2172
2137: POP
// begin time := 0 0$30 ;
2138: LD_ADDR_VAR 0 4
2142: PUSH
2143: LD_INT 1050
2145: ST_TO_ADDR
// normalTime := 0 0$30 ;
2146: LD_ADDR_VAR 0 6
2150: PUSH
2151: LD_INT 1050
2153: ST_TO_ADDR
// maxTime := 1 1$20 ;
2154: LD_ADDR_VAR 0 8
2158: PUSH
2159: LD_INT 2800
2161: ST_TO_ADDR
// delayTime := 0 0$5 ;
2162: LD_ADDR_VAR 0 7
2166: PUSH
2167: LD_INT 175
2169: ST_TO_ADDR
// end ; 2 :
2170: GO 2302
2172: LD_INT 2
2174: DOUBLE
2175: EQUAL
2176: IFTRUE 2180
2178: GO 2215
2180: POP
// begin time := 0 0$25 ;
2181: LD_ADDR_VAR 0 4
2185: PUSH
2186: LD_INT 875
2188: ST_TO_ADDR
// normalTime := 0 0$25 ;
2189: LD_ADDR_VAR 0 6
2193: PUSH
2194: LD_INT 875
2196: ST_TO_ADDR
// maxTime := 1 1$05 ;
2197: LD_ADDR_VAR 0 8
2201: PUSH
2202: LD_INT 2275
2204: ST_TO_ADDR
// delayTime := 0 0$4 ;
2205: LD_ADDR_VAR 0 7
2209: PUSH
2210: LD_INT 140
2212: ST_TO_ADDR
// end ; 3 :
2213: GO 2302
2215: LD_INT 3
2217: DOUBLE
2218: EQUAL
2219: IFTRUE 2223
2221: GO 2258
2223: POP
// begin time := 0 0$20 ;
2224: LD_ADDR_VAR 0 4
2228: PUSH
2229: LD_INT 700
2231: ST_TO_ADDR
// normalTime := 0 0$20 ;
2232: LD_ADDR_VAR 0 6
2236: PUSH
2237: LD_INT 700
2239: ST_TO_ADDR
// maxTime := 0 0$55 ;
2240: LD_ADDR_VAR 0 8
2244: PUSH
2245: LD_INT 1925
2247: ST_TO_ADDR
// delayTime := 0 0$3 ;
2248: LD_ADDR_VAR 0 7
2252: PUSH
2253: LD_INT 105
2255: ST_TO_ADDR
// end ; 4 :
2256: GO 2302
2258: LD_INT 4
2260: DOUBLE
2261: EQUAL
2262: IFTRUE 2266
2264: GO 2301
2266: POP
// begin time := 0 0$15 ;
2267: LD_ADDR_VAR 0 4
2271: PUSH
2272: LD_INT 525
2274: ST_TO_ADDR
// normalTime := 0 0$15 ;
2275: LD_ADDR_VAR 0 6
2279: PUSH
2280: LD_INT 525
2282: ST_TO_ADDR
// maxTime := 0 0$45 ;
2283: LD_ADDR_VAR 0 8
2287: PUSH
2288: LD_INT 1575
2290: ST_TO_ADDR
// delayTime := 0 0$2 ;
2291: LD_ADDR_VAR 0 7
2295: PUSH
2296: LD_INT 70
2298: ST_TO_ADDR
// end ; end ;
2299: GO 2302
2301: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2302: LD_ADDR_VAR 0 3
2306: PUSH
2307: LD_INT 1
2309: PUSH
2310: LD_INT 2
2312: PUSH
2313: LD_INT 3
2315: PUSH
2316: LD_INT 4
2318: PUSH
2319: LD_INT 5
2321: PUSH
2322: LD_INT 6
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: ST_TO_ADDR
// areas := [ Center1 , Center2 ] ;
2333: LD_ADDR_VAR 0 5
2337: PUSH
2338: LD_INT 7
2340: PUSH
2341: LD_INT 8
2343: PUSH
2344: EMPTY
2345: LIST
2346: LIST
2347: ST_TO_ADDR
// for i := 1 to 8 do
2348: LD_ADDR_VAR 0 1
2352: PUSH
2353: DOUBLE
2354: LD_INT 1
2356: DEC
2357: ST_TO_ADDR
2358: LD_INT 8
2360: PUSH
2361: FOR_TO
2362: IFFALSE 2409
// begin if not mpSidePositions [ i ] then
2364: LD_EXP 7
2368: PUSH
2369: LD_VAR 0 1
2373: ARRAY
2374: NOT
2375: IFFALSE 2379
// continue ;
2377: GO 2361
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2379: LD_ADDR_VAR 0 5
2383: PUSH
2384: LD_VAR 0 5
2388: PUSH
2389: LD_VAR 0 3
2393: PUSH
2394: LD_EXP 7
2398: PUSH
2399: LD_VAR 0 1
2403: ARRAY
2404: ARRAY
2405: ADD
2406: ST_TO_ADDR
// end ;
2407: GO 2361
2409: POP
2410: POP
// x := 1 ;
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// repeat wait ( time ) ;
2419: LD_VAR 0 4
2423: PPUSH
2424: CALL_OW 67
// x := Inc ( x ) ;
2428: LD_ADDR_VAR 0 2
2432: PUSH
2433: LD_VAR 0 2
2437: PPUSH
2438: CALL 50233 0 1
2442: ST_TO_ADDR
// if x > 5 then
2443: LD_VAR 0 2
2447: PUSH
2448: LD_INT 5
2450: GREATER
2451: IFFALSE 2461
// x := 1 ;
2453: LD_ADDR_VAR 0 2
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// for i in areas do
2461: LD_ADDR_VAR 0 1
2465: PUSH
2466: LD_VAR 0 5
2470: PUSH
2471: FOR_IN
2472: IFFALSE 2511
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2474: LD_VAR 0 1
2478: PPUSH
2479: LD_INT 1
2481: PPUSH
2482: CALL_OW 287
2486: PUSH
2487: LD_INT 30
2489: LESS
2490: IFFALSE 2509
// begin CreateCratesArea ( x , i , true ) ;
2492: LD_VAR 0 2
2496: PPUSH
2497: LD_VAR 0 1
2501: PPUSH
2502: LD_INT 1
2504: PPUSH
2505: CALL_OW 55
// end ; end ;
2509: GO 2471
2511: POP
2512: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2513: LD_INT 51
2515: PPUSH
2516: LD_INT 1
2518: PPUSH
2519: CALL_OW 287
2523: PUSH
2524: LD_INT 0
2526: EQUAL
2527: IFFALSE 2566
// begin for i := 1 to 4 do
2529: LD_ADDR_VAR 0 1
2533: PUSH
2534: DOUBLE
2535: LD_INT 1
2537: DEC
2538: ST_TO_ADDR
2539: LD_INT 4
2541: PUSH
2542: FOR_TO
2543: IFFALSE 2562
// CreateCratesArea ( x , CenterArea , true ) ;
2545: LD_VAR 0 2
2549: PPUSH
2550: LD_INT 51
2552: PPUSH
2553: LD_INT 1
2555: PPUSH
2556: CALL_OW 55
2560: GO 2542
2562: POP
2563: POP
// end else
2564: GO 2597
// if GetResourceArea ( CenterArea , mat_cans ) < 40 then
2566: LD_INT 51
2568: PPUSH
2569: LD_INT 1
2571: PPUSH
2572: CALL_OW 287
2576: PUSH
2577: LD_INT 40
2579: LESS
2580: IFFALSE 2597
// CreateCratesArea ( x , CenterArea , true ) ;
2582: LD_VAR 0 2
2586: PPUSH
2587: LD_INT 51
2589: PPUSH
2590: LD_INT 1
2592: PPUSH
2593: CALL_OW 55
// time := time + delayTime ;
2597: LD_ADDR_VAR 0 4
2601: PUSH
2602: LD_VAR 0 4
2606: PUSH
2607: LD_VAR 0 7
2611: PLUS
2612: ST_TO_ADDR
// if time > maxTime then
2613: LD_VAR 0 4
2617: PUSH
2618: LD_VAR 0 8
2622: GREATER
2623: IFFALSE 2635
// time := normalTime ;
2625: LD_ADDR_VAR 0 4
2629: PUSH
2630: LD_VAR 0 6
2634: ST_TO_ADDR
// until false ;
2635: LD_INT 0
2637: IFFALSE 2419
// end ; end_of_file
2639: PPOPN 8
2641: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2642: LD_VAR 0 1
2646: PPUSH
2647: CALL 54377 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2651: LD_VAR 0 1
2655: PPUSH
2656: CALL 8071 0 1
// end ;
2660: PPOPN 1
2662: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: CALL 54394 0 1
// end ;
2672: PPOPN 1
2674: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2675: LD_VAR 0 1
2679: PPUSH
2680: CALL 8778 0 1
2684: PPOPN 1
2686: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2687: LD_VAR 0 1
2691: PPUSH
2692: LD_VAR 0 2
2696: PPUSH
2697: CALL 54435 0 2
2701: PPOPN 2
2703: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2704: LD_VAR 0 1
2708: PPUSH
2709: LD_VAR 0 2
2713: PPUSH
2714: LD_VAR 0 3
2718: PPUSH
2719: CALL 8831 0 3
2723: PPOPN 3
2725: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2726: LD_VAR 0 1
2730: PPUSH
2731: LD_VAR 0 2
2735: PPUSH
2736: LD_VAR 0 3
2740: PPUSH
2741: LD_VAR 0 4
2745: PPUSH
2746: LD_VAR 0 5
2750: PPUSH
2751: CALL 9470 0 5
2755: PPOPN 5
2757: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2758: LD_VAR 0 1
2762: PPUSH
2763: LD_VAR 0 2
2767: PPUSH
2768: LD_VAR 0 3
2772: PPUSH
2773: LD_VAR 0 4
2777: PPUSH
2778: CALL 9573 0 4
2782: PPOPN 4
2784: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2785: LD_INT 0
2787: PPUSH
2788: PPUSH
// disable ( mpActive ) ;
2789: LD_INT 100
2791: DISABLE_MARKED
// disable ( mpWin ) ;
2792: LD_INT 101
2794: DISABLE_MARKED
// disable ( mpLose ) ;
2795: LD_INT 102
2797: DISABLE_MARKED
// mpGameType := 0 ;
2798: LD_ADDR_EXP 3
2802: PUSH
2803: LD_INT 0
2805: ST_TO_ADDR
// mpGameSettings := [ ] ;
2806: LD_ADDR_EXP 6
2810: PUSH
2811: EMPTY
2812: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2813: LD_ADDR_EXP 4
2817: PUSH
2818: EMPTY
2819: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2820: LD_ADDR_EXP 5
2824: PUSH
2825: EMPTY
2826: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2827: LD_ADDR_EXP 29
2831: PUSH
2832: LD_INT 2
2834: PUSH
2835: LD_INT 2
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2842: LD_ADDR_EXP 12
2846: PUSH
2847: EMPTY
2848: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2849: LD_ADDR_EXP 13
2853: PUSH
2854: EMPTY
2855: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2856: LD_ADDR_EXP 41
2860: PUSH
2861: EMPTY
2862: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2863: LD_ADDR_EXP 42
2867: PUSH
2868: EMPTY
2869: ST_TO_ADDR
// mpDepots := [ ] ;
2870: LD_ADDR_EXP 14
2874: PUSH
2875: EMPTY
2876: ST_TO_ADDR
// mpBuildings := [ ] ;
2877: LD_ADDR_EXP 17
2881: PUSH
2882: EMPTY
2883: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2884: LD_ADDR_EXP 18
2888: PUSH
2889: EMPTY
2890: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2891: LD_ADDR_EXP 19
2895: PUSH
2896: EMPTY
2897: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2898: LD_ADDR_EXP 20
2902: PUSH
2903: EMPTY
2904: ST_TO_ADDR
// mpStartingResources := [ ] ;
2905: LD_ADDR_EXP 15
2909: PUSH
2910: EMPTY
2911: ST_TO_ADDR
// mpStartPos := [ ] ;
2912: LD_ADDR_EXP 21
2916: PUSH
2917: EMPTY
2918: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2919: LD_ADDR_EXP 22
2923: PUSH
2924: LD_INT 1
2926: NEG
2927: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2928: LD_ADDR_EXP 23
2932: PUSH
2933: EMPTY
2934: ST_TO_ADDR
// mpApemans := [ ] ;
2935: LD_ADDR_EXP 30
2939: PUSH
2940: EMPTY
2941: ST_TO_ADDR
// mpApemansArea := [ ] ;
2942: LD_ADDR_EXP 31
2946: PUSH
2947: EMPTY
2948: ST_TO_ADDR
// mpRespawn := [ ] ;
2949: LD_ADDR_EXP 33
2953: PUSH
2954: EMPTY
2955: ST_TO_ADDR
// mpKingArea := 0 ;
2956: LD_ADDR_EXP 34
2960: PUSH
2961: LD_INT 0
2963: ST_TO_ADDR
// mpPoints := [ ] ;
2964: LD_ADDR_EXP 35
2968: PUSH
2969: EMPTY
2970: ST_TO_ADDR
// mpVehicles := 0 ;
2971: LD_ADDR_EXP 36
2975: PUSH
2976: LD_INT 0
2978: ST_TO_ADDR
// mpShipments := 0 ;
2979: LD_ADDR_EXP 27
2983: PUSH
2984: LD_INT 0
2986: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2987: LD_ADDR_EXP 40
2991: PUSH
2992: EMPTY
2993: PUSH
2994: EMPTY
2995: PUSH
2996: EMPTY
2997: PUSH
2998: EMPTY
2999: PUSH
3000: EMPTY
3001: PUSH
3002: EMPTY
3003: PUSH
3004: EMPTY
3005: PUSH
3006: EMPTY
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3018: LD_ADDR_EXP 32
3022: PUSH
3023: EMPTY
3024: PUSH
3025: EMPTY
3026: PUSH
3027: EMPTY
3028: PUSH
3029: EMPTY
3030: PUSH
3031: EMPTY
3032: PUSH
3033: EMPTY
3034: PUSH
3035: EMPTY
3036: PUSH
3037: EMPTY
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: ST_TO_ADDR
// mpEmissions := 0 ;
3049: LD_ADDR_EXP 37
3053: PUSH
3054: LD_INT 0
3056: ST_TO_ADDR
// mpTeleports := 0 ;
3057: LD_ADDR_EXP 43
3061: PUSH
3062: LD_INT 0
3064: ST_TO_ADDR
// mpArtifacts := 0 ;
3065: LD_ADDR_EXP 44
3069: PUSH
3070: LD_INT 0
3072: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3073: LD_ADDR_EXP 45
3077: PUSH
3078: LD_INT 0
3080: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3081: LD_ADDR_EXP 25
3085: PUSH
3086: LD_INT 3
3088: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3089: LD_ADDR_EXP 24
3093: PUSH
3094: LD_INT 15
3096: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3097: LD_ADDR_EXP 38
3101: PUSH
3102: LD_INT 0
3104: ST_TO_ADDR
// mpGameActive := false ;
3105: LD_ADDR_EXP 39
3109: PUSH
3110: LD_INT 0
3112: ST_TO_ADDR
// mpBlockRespThread := false ;
3113: LD_ADDR_EXP 46
3117: PUSH
3118: LD_INT 0
3120: ST_TO_ADDR
// for i := 1 to 32 do
3121: LD_ADDR_VAR 0 2
3125: PUSH
3126: DOUBLE
3127: LD_INT 1
3129: DEC
3130: ST_TO_ADDR
3131: LD_INT 32
3133: PUSH
3134: FOR_TO
3135: IFFALSE 3162
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3137: LD_ADDR_EXP 6
3141: PUSH
3142: LD_EXP 6
3146: PPUSH
3147: LD_VAR 0 2
3151: PPUSH
3152: LD_INT 0
3154: PPUSH
3155: CALL_OW 1
3159: ST_TO_ADDR
3160: GO 3134
3162: POP
3163: POP
// end ;
3164: LD_VAR 0 1
3168: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3169: LD_INT 0
3171: PPUSH
3172: PPUSH
3173: PPUSH
3174: PPUSH
3175: PPUSH
3176: PPUSH
3177: PPUSH
3178: PPUSH
3179: PPUSH
3180: PPUSH
3181: PPUSH
3182: PPUSH
3183: PPUSH
3184: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
3185: LD_ADDR_VAR 0 14
3189: PUSH
3190: LD_INT 1
3192: PUSH
3193: LD_INT 2
3195: PUSH
3196: LD_INT 3
3198: PUSH
3199: LD_INT 5
3201: PUSH
3202: LD_INT 6
3204: PUSH
3205: LD_INT 7
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: ST_TO_ADDR
// for i in gameTypes do
3216: LD_ADDR_VAR 0 2
3220: PUSH
3221: LD_VAR 0 14
3225: PUSH
3226: FOR_IN
3227: IFFALSE 3236
// disable ( i ) ;
3229: LD_VAR 0 2
3233: DISABLE_MARKED
3234: GO 3226
3236: POP
3237: POP
// if Multiplayer then
3238: LD_OWVAR 4
3242: IFFALSE 3426
// begin mpGameType := mp_game_type ;
3244: LD_ADDR_EXP 3
3248: PUSH
3249: LD_OWVAR 6
3253: ST_TO_ADDR
// your_side := mp_player_side ;
3254: LD_ADDR_OWVAR 2
3258: PUSH
3259: LD_OWVAR 7
3263: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3264: LD_ADDR_EXP 7
3268: PUSH
3269: LD_OWVAR 17
3273: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3274: LD_ADDR_EXP 8
3278: PUSH
3279: LD_OWVAR 15
3283: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3284: LD_ADDR_EXP 9
3288: PUSH
3289: LD_OWVAR 16
3293: ST_TO_ADDR
// mpTeams := mp_teams ;
3294: LD_ADDR_EXP 10
3298: PUSH
3299: LD_OWVAR 12
3303: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3304: LD_ADDR_VAR 0 2
3308: PUSH
3309: DOUBLE
3310: LD_INT 1
3312: DEC
3313: ST_TO_ADDR
3314: LD_EXP 4
3318: PPUSH
3319: CALL 12894 0 1
3323: PUSH
3324: FOR_TO
3325: IFFALSE 3401
// begin setting := mpGameSettingsKeys [ i ] ;
3327: LD_ADDR_VAR 0 12
3331: PUSH
3332: LD_EXP 4
3336: PUSH
3337: LD_VAR 0 2
3341: ARRAY
3342: ST_TO_ADDR
// if setting then
3343: LD_VAR 0 12
3347: IFFALSE 3399
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3349: LD_ADDR_EXP 6
3353: PUSH
3354: LD_EXP 6
3358: PPUSH
3359: LD_VAR 0 2
3363: PPUSH
3364: LD_EXP 5
3368: PUSH
3369: LD_VAR 0 2
3373: ARRAY
3374: PUSH
3375: LD_VAR 0 2
3379: PUSH
3380: LD_INT 1
3382: MINUS
3383: PPUSH
3384: CALL_OW 426
3388: PUSH
3389: LD_INT 1
3391: PLUS
3392: ARRAY
3393: PPUSH
3394: CALL_OW 1
3398: ST_TO_ADDR
// end ;
3399: GO 3324
3401: POP
3402: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3403: LD_ADDR_EXP 11
3407: PUSH
3408: LD_EXP 8
3412: PUSH
3413: LD_INT 0
3415: PUSH
3416: EMPTY
3417: LIST
3418: DIFF
3419: PUSH
3420: LD_INT 1
3422: GREATER
3423: ST_TO_ADDR
// end else
3424: GO 3426
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3426: LD_EXP 3
3430: PPUSH
3431: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3435: LD_EXP 18
3439: PPUSH
3440: CALL 12894 0 1
3444: IFFALSE 3475
// begin for i in mpMarkedAreas do
3446: LD_ADDR_VAR 0 2
3450: PUSH
3451: LD_EXP 18
3455: PUSH
3456: FOR_IN
3457: IFFALSE 3473
// SetAreaMapShow ( i , 0 ) ;
3459: LD_VAR 0 2
3463: PPUSH
3464: LD_INT 0
3466: PPUSH
3467: CALL_OW 424
3471: GO 3456
3473: POP
3474: POP
// end ; for i := 1 to 8 do
3475: LD_ADDR_VAR 0 2
3479: PUSH
3480: DOUBLE
3481: LD_INT 1
3483: DEC
3484: ST_TO_ADDR
3485: LD_INT 8
3487: PUSH
3488: FOR_TO
3489: IFFALSE 4924
// begin if not mpSidePositions [ i ] then
3491: LD_EXP 7
3495: PUSH
3496: LD_VAR 0 2
3500: ARRAY
3501: NOT
3502: IFFALSE 3506
// continue ;
3504: GO 3488
// side := i ;
3506: LD_ADDR_VAR 0 7
3510: PUSH
3511: LD_VAR 0 2
3515: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3516: LD_ADDR_VAR 0 9
3520: PUSH
3521: LD_EXP 9
3525: PUSH
3526: LD_VAR 0 2
3530: ARRAY
3531: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3532: LD_ADDR_VAR 0 8
3536: PUSH
3537: LD_EXP 7
3541: PUSH
3542: LD_VAR 0 2
3546: ARRAY
3547: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3548: LD_EXP 12
3552: PPUSH
3553: CALL 12894 0 1
3557: IFFALSE 3634
// begin for j in mpOilDeposits [ pos ] do
3559: LD_ADDR_VAR 0 3
3563: PUSH
3564: LD_EXP 12
3568: PUSH
3569: LD_VAR 0 8
3573: ARRAY
3574: PUSH
3575: FOR_IN
3576: IFFALSE 3632
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3578: LD_VAR 0 3
3582: PUSH
3583: LD_INT 1
3585: ARRAY
3586: PPUSH
3587: LD_VAR 0 3
3591: PUSH
3592: LD_INT 2
3594: ARRAY
3595: PPUSH
3596: LD_INT 2
3598: PPUSH
3599: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3603: LD_VAR 0 3
3607: PUSH
3608: LD_INT 1
3610: ARRAY
3611: PPUSH
3612: LD_VAR 0 3
3616: PUSH
3617: LD_INT 2
3619: ARRAY
3620: PPUSH
3621: LD_VAR 0 7
3625: PPUSH
3626: CALL_OW 441
// end ;
3630: GO 3575
3632: POP
3633: POP
// end ; if Count ( mpSibDeposits ) then
3634: LD_EXP 13
3638: PPUSH
3639: CALL 12894 0 1
3643: IFFALSE 3720
// begin for j in mpSibDeposits [ pos ] do
3645: LD_ADDR_VAR 0 3
3649: PUSH
3650: LD_EXP 13
3654: PUSH
3655: LD_VAR 0 8
3659: ARRAY
3660: PUSH
3661: FOR_IN
3662: IFFALSE 3718
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3664: LD_VAR 0 3
3668: PUSH
3669: LD_INT 1
3671: ARRAY
3672: PPUSH
3673: LD_VAR 0 3
3677: PUSH
3678: LD_INT 2
3680: ARRAY
3681: PPUSH
3682: LD_INT 3
3684: PPUSH
3685: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3689: LD_VAR 0 3
3693: PUSH
3694: LD_INT 1
3696: ARRAY
3697: PPUSH
3698: LD_VAR 0 3
3702: PUSH
3703: LD_INT 2
3705: ARRAY
3706: PPUSH
3707: LD_VAR 0 7
3711: PPUSH
3712: CALL_OW 441
// end ;
3716: GO 3661
3718: POP
3719: POP
// end ; InitBc ;
3720: CALL_OW 21
// InitUc ;
3724: CALL_OW 18
// uc_side := side ;
3728: LD_ADDR_OWVAR 20
3732: PUSH
3733: LD_VAR 0 7
3737: ST_TO_ADDR
// uc_nation := nation ;
3738: LD_ADDR_OWVAR 21
3742: PUSH
3743: LD_VAR 0 9
3747: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3748: LD_EXP 22
3752: PUSH
3753: LD_INT 1
3755: NEG
3756: GREATER
3757: IFFALSE 3916
// begin x := mpStartPos [ pos ] [ 1 ] ;
3759: LD_ADDR_VAR 0 5
3763: PUSH
3764: LD_EXP 21
3768: PUSH
3769: LD_VAR 0 8
3773: ARRAY
3774: PUSH
3775: LD_INT 1
3777: ARRAY
3778: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3779: LD_ADDR_VAR 0 6
3783: PUSH
3784: LD_EXP 21
3788: PUSH
3789: LD_VAR 0 8
3793: ARRAY
3794: PUSH
3795: LD_INT 2
3797: ARRAY
3798: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3799: LD_VAR 0 5
3803: PPUSH
3804: LD_VAR 0 6
3808: PPUSH
3809: LD_INT 12
3811: PPUSH
3812: LD_INT 2
3814: PPUSH
3815: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3819: LD_ADDR_EXP 23
3823: PUSH
3824: LD_EXP 23
3828: PPUSH
3829: LD_VAR 0 7
3833: PPUSH
3834: LD_VAR 0 7
3838: PPUSH
3839: LD_VAR 0 5
3843: PPUSH
3844: LD_VAR 0 6
3848: PPUSH
3849: LD_INT 1
3851: PUSH
3852: LD_INT 100
3854: PUSH
3855: EMPTY
3856: LIST
3857: LIST
3858: PUSH
3859: LD_INT 2
3861: PUSH
3862: LD_INT 70
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: PUSH
3869: LD_INT 3
3871: PUSH
3872: LD_INT 40
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: PUSH
3879: LD_INT 10
3881: PUSH
3882: LD_INT 25
3884: PUSH
3885: EMPTY
3886: LIST
3887: LIST
3888: PUSH
3889: LD_INT 20
3891: PUSH
3892: LD_INT 100
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: PPUSH
3906: CALL_OW 418
3910: PPUSH
3911: CALL_OW 1
3915: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3916: LD_EXP 14
3920: PPUSH
3921: CALL 12894 0 1
3925: IFFALSE 4120
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
3927: LD_EXP 3
3931: PUSH
3932: LD_INT 2
3934: PUSH
3935: LD_INT 6
3937: PUSH
3938: LD_INT 7
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: LIST
3945: IN
3946: IFFALSE 3966
// begin bc_level := 10 ;
3948: LD_ADDR_OWVAR 43
3952: PUSH
3953: LD_INT 10
3955: ST_TO_ADDR
// bc_type := b_warehouse ;
3956: LD_ADDR_OWVAR 42
3960: PUSH
3961: LD_INT 1
3963: ST_TO_ADDR
// end else
3964: GO 3982
// begin bc_level := 0 ;
3966: LD_ADDR_OWVAR 43
3970: PUSH
3971: LD_INT 0
3973: ST_TO_ADDR
// bc_type := b_depot ;
3974: LD_ADDR_OWVAR 42
3978: PUSH
3979: LD_INT 0
3981: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3982: LD_ADDR_VAR 0 4
3986: PUSH
3987: LD_EXP 14
3991: PUSH
3992: LD_VAR 0 8
3996: ARRAY
3997: PUSH
3998: LD_INT 1
4000: ARRAY
4001: PPUSH
4002: LD_EXP 14
4006: PUSH
4007: LD_VAR 0 8
4011: ARRAY
4012: PUSH
4013: LD_INT 2
4015: ARRAY
4016: PPUSH
4017: LD_EXP 14
4021: PUSH
4022: LD_VAR 0 8
4026: ARRAY
4027: PUSH
4028: LD_INT 3
4030: ARRAY
4031: PPUSH
4032: CALL_OW 47
4036: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4037: LD_VAR 0 4
4041: PPUSH
4042: LD_STRING @
4044: PUSH
4045: LD_VAR 0 7
4049: STR
4050: PPUSH
4051: CALL_OW 500
// if Count ( mpStartingResources ) then
4055: LD_EXP 15
4059: PPUSH
4060: CALL 12894 0 1
4064: IFFALSE 4118
// begin for j := 1 to mpStartingResources do
4066: LD_ADDR_VAR 0 3
4070: PUSH
4071: DOUBLE
4072: LD_INT 1
4074: DEC
4075: ST_TO_ADDR
4076: LD_EXP 15
4080: PUSH
4081: FOR_TO
4082: IFFALSE 4116
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4084: LD_VAR 0 4
4088: PPUSH
4089: CALL_OW 274
4093: PPUSH
4094: LD_VAR 0 3
4098: PPUSH
4099: LD_EXP 15
4103: PUSH
4104: LD_VAR 0 3
4108: ARRAY
4109: PPUSH
4110: CALL_OW 277
4114: GO 4081
4116: POP
4117: POP
// end ; end else
4118: GO 4327
// if Count ( mpStartingResources ) then
4120: LD_EXP 15
4124: PPUSH
4125: CALL 12894 0 1
4129: IFFALSE 4327
// begin x := mpStartPos [ pos ] [ 1 ] ;
4131: LD_ADDR_VAR 0 5
4135: PUSH
4136: LD_EXP 21
4140: PUSH
4141: LD_VAR 0 8
4145: ARRAY
4146: PUSH
4147: LD_INT 1
4149: ARRAY
4150: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4151: LD_ADDR_VAR 0 6
4155: PUSH
4156: LD_EXP 21
4160: PUSH
4161: LD_VAR 0 8
4165: ARRAY
4166: PUSH
4167: LD_INT 2
4169: ARRAY
4170: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4171: LD_ADDR_VAR 0 3
4175: PUSH
4176: DOUBLE
4177: LD_INT 1
4179: DEC
4180: ST_TO_ADDR
4181: LD_EXP 15
4185: PUSH
4186: FOR_TO
4187: IFFALSE 4325
// begin resources := mpStartingResources [ j ] ;
4189: LD_ADDR_VAR 0 13
4193: PUSH
4194: LD_EXP 15
4198: PUSH
4199: LD_VAR 0 3
4203: ARRAY
4204: ST_TO_ADDR
// if resources = 0 then
4205: LD_VAR 0 13
4209: PUSH
4210: LD_INT 0
4212: EQUAL
4213: IFFALSE 4217
// continue ;
4215: GO 4186
// repeat if resources >= 50 then
4217: LD_VAR 0 13
4221: PUSH
4222: LD_INT 50
4224: GREATEREQUAL
4225: IFFALSE 4271
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: LD_INT 5
4234: PPUSH
4235: LD_VAR 0 5
4239: PPUSH
4240: LD_VAR 0 6
4244: PPUSH
4245: LD_INT 6
4247: PPUSH
4248: LD_INT 0
4250: PPUSH
4251: CALL_OW 60
// resources := resources - 50 ;
4255: LD_ADDR_VAR 0 13
4259: PUSH
4260: LD_VAR 0 13
4264: PUSH
4265: LD_INT 50
4267: MINUS
4268: ST_TO_ADDR
// end else
4269: GO 4313
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4271: LD_VAR 0 3
4275: PPUSH
4276: LD_VAR 0 13
4280: PUSH
4281: LD_INT 10
4283: DIV
4284: PPUSH
4285: LD_VAR 0 5
4289: PPUSH
4290: LD_VAR 0 6
4294: PPUSH
4295: LD_INT 6
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 60
// resources := 0 ;
4305: LD_ADDR_VAR 0 13
4309: PUSH
4310: LD_INT 0
4312: ST_TO_ADDR
// end ; until resources <= 0 ;
4313: LD_VAR 0 13
4317: PUSH
4318: LD_INT 0
4320: LESSEQUAL
4321: IFFALSE 4217
// end ;
4323: GO 4186
4325: POP
4326: POP
// end ; if Count ( mpBuildings ) then
4327: LD_EXP 17
4331: PPUSH
4332: CALL 12894 0 1
4336: IFFALSE 4414
// begin for j in mpBuildings [ pos ] do
4338: LD_ADDR_VAR 0 3
4342: PUSH
4343: LD_EXP 17
4347: PUSH
4348: LD_VAR 0 8
4352: ARRAY
4353: PUSH
4354: FOR_IN
4355: IFFALSE 4412
// begin bc_level := 0 ;
4357: LD_ADDR_OWVAR 43
4361: PUSH
4362: LD_INT 0
4364: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4365: LD_ADDR_OWVAR 42
4369: PUSH
4370: LD_VAR 0 3
4374: PUSH
4375: LD_INT 1
4377: ARRAY
4378: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4379: LD_VAR 0 3
4383: PUSH
4384: LD_INT 2
4386: ARRAY
4387: PPUSH
4388: LD_VAR 0 3
4392: PUSH
4393: LD_INT 3
4395: ARRAY
4396: PPUSH
4397: LD_VAR 0 3
4401: PUSH
4402: LD_INT 4
4404: ARRAY
4405: PPUSH
4406: CALL_OW 47
// end ;
4410: GO 4354
4412: POP
4413: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4414: LD_EXP 26
4418: IFFALSE 4438
4420: PUSH
4421: LD_INT 20
4423: PPUSH
4424: LD_VAR 0 7
4428: PPUSH
4429: CALL_OW 321
4433: PUSH
4434: LD_INT 1
4436: EQUAL
4437: AND
4438: IFFALSE 4455
// SetTech ( tech_SibDet , side , state_researched ) ;
4440: LD_INT 20
4442: PPUSH
4443: LD_VAR 0 7
4447: PPUSH
4448: LD_INT 2
4450: PPUSH
4451: CALL_OW 322
// if not mpArtifacts then
4455: LD_EXP 44
4459: NOT
4460: IFFALSE 4477
// SetTech ( tech_artifact , side , state_disabled ) ;
4462: LD_INT 24
4464: PPUSH
4465: LD_VAR 0 7
4469: PPUSH
4470: LD_INT 0
4472: PPUSH
4473: CALL_OW 322
// if mpSibBomb = 1 then
4477: LD_EXP 28
4481: PUSH
4482: LD_INT 1
4484: EQUAL
4485: IFFALSE 4504
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4487: LD_INT 25
4489: PPUSH
4490: LD_VAR 0 7
4494: PPUSH
4495: LD_INT 1
4497: PPUSH
4498: CALL_OW 322
// end else
4502: GO 4519
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4504: LD_INT 25
4506: PPUSH
4507: LD_VAR 0 7
4511: PPUSH
4512: LD_INT 0
4514: PPUSH
4515: CALL_OW 322
// end ; if mpVehicles then
4519: LD_EXP 36
4523: IFFALSE 4622
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4525: LD_ADDR_VAR 0 3
4529: PUSH
4530: LD_VAR 0 7
4534: PPUSH
4535: LD_VAR 0 9
4539: PPUSH
4540: LD_EXP 36
4544: PPUSH
4545: CALL 5845 0 3
4549: PUSH
4550: FOR_IN
4551: IFFALSE 4620
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4553: LD_VAR 0 3
4557: PPUSH
4558: LD_INT 0
4560: PPUSH
4561: LD_INT 5
4563: PPUSH
4564: CALL_OW 12
4568: PPUSH
4569: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4573: LD_VAR 0 3
4577: PPUSH
4578: LD_EXP 21
4582: PUSH
4583: LD_VAR 0 8
4587: ARRAY
4588: PUSH
4589: LD_INT 1
4591: ARRAY
4592: PPUSH
4593: LD_EXP 21
4597: PUSH
4598: LD_VAR 0 8
4602: ARRAY
4603: PUSH
4604: LD_INT 2
4606: ARRAY
4607: PPUSH
4608: LD_INT 12
4610: PPUSH
4611: LD_INT 0
4613: PPUSH
4614: CALL_OW 50
// end ;
4618: GO 4550
4620: POP
4621: POP
// end ; uc_nation := nation ;
4622: LD_ADDR_OWVAR 21
4626: PUSH
4627: LD_VAR 0 9
4631: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4632: LD_EXP 3
4636: PUSH
4637: LD_INT 6
4639: PUSH
4640: LD_INT 7
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: IN
4647: IFFALSE 4672
4649: PUSH
4650: LD_EXP 7
4654: PUSH
4655: LD_VAR 0 2
4659: ARRAY
4660: PUSH
4661: LD_INT 1
4663: PUSH
4664: LD_INT 2
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: IN
4671: AND
4672: IFFALSE 4720
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4674: LD_ADDR_VAR 0 11
4678: PUSH
4679: LD_VAR 0 7
4683: PPUSH
4684: LD_VAR 0 9
4688: PPUSH
4689: LD_EXP 24
4693: PUSH
4694: LD_EXP 24
4698: PUSH
4699: LD_INT 2
4701: DIV
4702: PLUS
4703: PPUSH
4704: LD_EXP 25
4708: PUSH
4709: LD_INT 1
4711: PLUS
4712: PPUSH
4713: CALL 5336 0 4
4717: ST_TO_ADDR
4718: GO 4750
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4720: LD_ADDR_VAR 0 11
4724: PUSH
4725: LD_VAR 0 7
4729: PPUSH
4730: LD_VAR 0 9
4734: PPUSH
4735: LD_EXP 24
4739: PPUSH
4740: LD_EXP 25
4744: PPUSH
4745: CALL 5336 0 4
4749: ST_TO_ADDR
// for j in team do
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: LD_VAR 0 11
4759: PUSH
4760: FOR_IN
4761: IFFALSE 4810
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4763: LD_VAR 0 3
4767: PPUSH
4768: LD_EXP 21
4772: PUSH
4773: LD_VAR 0 8
4777: ARRAY
4778: PUSH
4779: LD_INT 1
4781: ARRAY
4782: PPUSH
4783: LD_EXP 21
4787: PUSH
4788: LD_VAR 0 8
4792: ARRAY
4793: PUSH
4794: LD_INT 2
4796: ARRAY
4797: PPUSH
4798: LD_INT 12
4800: PPUSH
4801: LD_INT 0
4803: PPUSH
4804: CALL_OW 50
4808: GO 4760
4810: POP
4811: POP
// if mpApemans then
4812: LD_EXP 30
4816: IFFALSE 4922
// begin for j := 1 to mpApemans do
4818: LD_ADDR_VAR 0 3
4822: PUSH
4823: DOUBLE
4824: LD_INT 1
4826: DEC
4827: ST_TO_ADDR
4828: LD_EXP 30
4832: PUSH
4833: FOR_TO
4834: IFFALSE 4920
// begin PrepareApeman ( - 5 ) ;
4836: LD_INT 5
4838: NEG
4839: PPUSH
4840: CALL 44987 0 1
// ape := CreateHuman ;
4844: LD_ADDR_VAR 0 10
4848: PUSH
4849: CALL_OW 44
4853: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4854: LD_ADDR_EXP 32
4858: PUSH
4859: LD_EXP 32
4863: PPUSH
4864: LD_VAR 0 8
4868: PPUSH
4869: LD_EXP 32
4873: PUSH
4874: LD_VAR 0 8
4878: ARRAY
4879: PPUSH
4880: LD_VAR 0 10
4884: PPUSH
4885: CALL 48860 0 2
4889: PPUSH
4890: CALL_OW 1
4894: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4895: LD_VAR 0 10
4899: PPUSH
4900: LD_EXP 31
4904: PUSH
4905: LD_VAR 0 8
4909: ARRAY
4910: PPUSH
4911: LD_INT 0
4913: PPUSH
4914: CALL_OW 49
// end ;
4918: GO 4833
4920: POP
4921: POP
// end ; end ;
4922: GO 3488
4924: POP
4925: POP
// if not mpTeamGame then
4926: LD_EXP 11
4930: NOT
4931: IFFALSE 5029
// begin for i := 1 to 8 do
4933: LD_ADDR_VAR 0 2
4937: PUSH
4938: DOUBLE
4939: LD_INT 1
4941: DEC
4942: ST_TO_ADDR
4943: LD_INT 8
4945: PUSH
4946: FOR_TO
4947: IFFALSE 5025
// for j := 1 to 8 do
4949: LD_ADDR_VAR 0 3
4953: PUSH
4954: DOUBLE
4955: LD_INT 1
4957: DEC
4958: ST_TO_ADDR
4959: LD_INT 8
4961: PUSH
4962: FOR_TO
4963: IFFALSE 5021
// if i <> j then
4965: LD_VAR 0 2
4969: PUSH
4970: LD_VAR 0 3
4974: NONEQUAL
4975: IFFALSE 4999
// SetAttitude ( i , j , att_neutral , true ) else
4977: LD_VAR 0 2
4981: PPUSH
4982: LD_VAR 0 3
4986: PPUSH
4987: LD_INT 0
4989: PPUSH
4990: LD_INT 1
4992: PPUSH
4993: CALL_OW 80
4997: GO 5019
// SetAttitude ( i , j , att_friend , true ) ;
4999: LD_VAR 0 2
5003: PPUSH
5004: LD_VAR 0 3
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: LD_INT 1
5014: PPUSH
5015: CALL_OW 80
5019: GO 4962
5021: POP
5022: POP
5023: GO 4946
5025: POP
5026: POP
// end else
5027: GO 5204
// begin if mpSharedVision then
5029: LD_EXP 16
5033: IFFALSE 5098
// begin for i in mpTeams do
5035: LD_ADDR_VAR 0 2
5039: PUSH
5040: LD_EXP 10
5044: PUSH
5045: FOR_IN
5046: IFFALSE 5096
// for j := 2 to i do
5048: LD_ADDR_VAR 0 3
5052: PUSH
5053: DOUBLE
5054: LD_INT 2
5056: DEC
5057: ST_TO_ADDR
5058: LD_VAR 0 2
5062: PUSH
5063: FOR_TO
5064: IFFALSE 5092
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5066: LD_VAR 0 2
5070: PUSH
5071: LD_VAR 0 3
5075: ARRAY
5076: PPUSH
5077: LD_VAR 0 2
5081: PUSH
5082: LD_INT 1
5084: ARRAY
5085: PPUSH
5086: CALL_OW 343
5090: GO 5063
5092: POP
5093: POP
5094: GO 5045
5096: POP
5097: POP
// end ; for i := 1 to 8 do
5098: LD_ADDR_VAR 0 2
5102: PUSH
5103: DOUBLE
5104: LD_INT 1
5106: DEC
5107: ST_TO_ADDR
5108: LD_INT 8
5110: PUSH
5111: FOR_TO
5112: IFFALSE 5202
// for j := 1 to 8 do
5114: LD_ADDR_VAR 0 3
5118: PUSH
5119: DOUBLE
5120: LD_INT 1
5122: DEC
5123: ST_TO_ADDR
5124: LD_INT 8
5126: PUSH
5127: FOR_TO
5128: IFFALSE 5198
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5130: LD_EXP 8
5134: PUSH
5135: LD_VAR 0 2
5139: ARRAY
5140: PUSH
5141: LD_EXP 8
5145: PUSH
5146: LD_VAR 0 3
5150: ARRAY
5151: EQUAL
5152: IFFALSE 5176
// SetAttitude ( i , j , att_friend , true ) else
5154: LD_VAR 0 2
5158: PPUSH
5159: LD_VAR 0 3
5163: PPUSH
5164: LD_INT 1
5166: PPUSH
5167: LD_INT 1
5169: PPUSH
5170: CALL_OW 80
5174: GO 5196
// SetAttitude ( i , j , att_enemy , true ) ;
5176: LD_VAR 0 2
5180: PPUSH
5181: LD_VAR 0 3
5185: PPUSH
5186: LD_INT 2
5188: PPUSH
5189: LD_INT 1
5191: PPUSH
5192: CALL_OW 80
5196: GO 5127
5198: POP
5199: POP
5200: GO 5111
5202: POP
5203: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5204: LD_ADDR_OWVAR 71
5208: PUSH
5209: LD_EXP 9
5213: PUSH
5214: LD_OWVAR 2
5218: ARRAY
5219: ST_TO_ADDR
// if IAmSpec then
5220: CALL_OW 531
5224: IFFALSE 5265
// begin FogOff ( true ) ;
5226: LD_INT 1
5228: PPUSH
5229: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5233: LD_EXP 29
5237: PUSH
5238: LD_INT 1
5240: ARRAY
5241: PUSH
5242: LD_INT 2
5244: DIV
5245: PPUSH
5246: LD_EXP 29
5250: PUSH
5251: LD_INT 2
5253: ARRAY
5254: PUSH
5255: LD_INT 2
5257: DIV
5258: PPUSH
5259: CALL_OW 86
// end else
5263: GO 5311
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5265: LD_EXP 21
5269: PUSH
5270: LD_EXP 7
5274: PUSH
5275: LD_OWVAR 2
5279: ARRAY
5280: ARRAY
5281: PUSH
5282: LD_INT 1
5284: ARRAY
5285: PPUSH
5286: LD_EXP 21
5290: PUSH
5291: LD_EXP 7
5295: PUSH
5296: LD_OWVAR 2
5300: ARRAY
5301: ARRAY
5302: PUSH
5303: LD_INT 2
5305: ARRAY
5306: PPUSH
5307: CALL_OW 86
// end ; BeginBuildUp ;
5311: CALL 6378 0 0
// enable ( mpActive ) ;
5315: LD_INT 100
5317: ENABLE_MARKED
// enable ( mpGameType ) ;
5318: LD_EXP 3
5322: ENABLE_MARKED
// mpGameActive := true ;
5323: LD_ADDR_EXP 39
5327: PUSH
5328: LD_INT 1
5330: ST_TO_ADDR
// end ;
5331: LD_VAR 0 1
5335: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5336: LD_INT 0
5338: PPUSH
5339: PPUSH
5340: PPUSH
5341: PPUSH
// result := [ ] ;
5342: LD_ADDR_VAR 0 5
5346: PUSH
5347: EMPTY
5348: ST_TO_ADDR
// class := class_soldier ;
5349: LD_ADDR_VAR 0 8
5353: PUSH
5354: LD_INT 1
5356: ST_TO_ADDR
// uc_side := side ;
5357: LD_ADDR_OWVAR 20
5361: PUSH
5362: LD_VAR 0 1
5366: ST_TO_ADDR
// uc_nation := nation ;
5367: LD_ADDR_OWVAR 21
5371: PUSH
5372: LD_VAR 0 2
5376: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5377: LD_ADDR_OWVAR 26
5381: PUSH
5382: LD_OWVAR 19
5386: PUSH
5387: LD_VAR 0 1
5391: ARRAY
5392: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5393: LD_INT 1
5395: PPUSH
5396: LD_INT 2
5398: PPUSH
5399: CALL_OW 12
5403: PPUSH
5404: LD_VAR 0 8
5408: PPUSH
5409: LD_VAR 0 4
5413: PUSH
5414: LD_INT 2
5416: PLUS
5417: PPUSH
5418: CALL_OW 380
// hc_importance := 105 ;
5422: LD_ADDR_OWVAR 32
5426: PUSH
5427: LD_INT 105
5429: ST_TO_ADDR
// if Multiplayer then
5430: LD_OWVAR 4
5434: IFFALSE 5474
// begin hc_gallery := MULTIAVATARS ;
5436: LD_ADDR_OWVAR 33
5440: PUSH
5441: LD_STRING MULTIAVATARS
5443: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5444: LD_ADDR_OWVAR 34
5448: PUSH
5449: LD_VAR 0 1
5453: PPUSH
5454: CALL_OW 525
5458: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5459: LD_ADDR_OWVAR 27
5463: PUSH
5464: LD_VAR 0 1
5468: PPUSH
5469: CALL_OW 526
5473: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5474: LD_ADDR_VAR 0 5
5478: PUSH
5479: LD_VAR 0 5
5483: PPUSH
5484: CALL_OW 44
5488: PPUSH
5489: CALL 48860 0 2
5493: ST_TO_ADDR
// if mpTeamPreset then
5494: LD_LOC 1
5498: IFFALSE 5594
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5500: LD_LOC 1
5504: PUSH
5505: LD_INT 1
5507: ARRAY
5508: PPUSH
5509: LD_VAR 0 5
5513: PUSH
5514: LD_VAR 0 5
5518: ARRAY
5519: PPUSH
5520: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5524: LD_VAR 0 5
5528: PUSH
5529: LD_VAR 0 5
5533: ARRAY
5534: PPUSH
5535: LD_INT 1
5537: PPUSH
5538: LD_LOC 1
5542: PUSH
5543: LD_INT 1
5545: ARRAY
5546: PPUSH
5547: LD_INT 1
5549: PPUSH
5550: CALL_OW 260
5554: PPUSH
5555: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5559: LD_VAR 0 5
5563: PUSH
5564: LD_VAR 0 5
5568: ARRAY
5569: PPUSH
5570: LD_INT 2
5572: PPUSH
5573: LD_LOC 1
5577: PUSH
5578: LD_INT 1
5580: ARRAY
5581: PPUSH
5582: LD_INT 2
5584: PPUSH
5585: CALL_OW 260
5589: PPUSH
5590: CALL_OW 239
// end ; InitHc_All ( ) ;
5594: CALL_OW 584
// class := 2 ;
5598: LD_ADDR_VAR 0 8
5602: PUSH
5603: LD_INT 2
5605: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5606: LD_ADDR_VAR 0 6
5610: PUSH
5611: DOUBLE
5612: LD_INT 1
5614: DEC
5615: ST_TO_ADDR
5616: LD_VAR 0 3
5620: PUSH
5621: LD_INT 1
5623: MINUS
5624: PUSH
5625: FOR_TO
5626: IFFALSE 5821
// begin PrepareHuman ( false , class , skill ) ;
5628: LD_INT 0
5630: PPUSH
5631: LD_VAR 0 8
5635: PPUSH
5636: LD_VAR 0 4
5640: PPUSH
5641: CALL_OW 380
// un := CreateHuman ;
5645: LD_ADDR_VAR 0 7
5649: PUSH
5650: CALL_OW 44
5654: ST_TO_ADDR
// result := Join ( result , un ) ;
5655: LD_ADDR_VAR 0 5
5659: PUSH
5660: LD_VAR 0 5
5664: PPUSH
5665: LD_VAR 0 7
5669: PPUSH
5670: CALL 48860 0 2
5674: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5675: LD_LOC 1
5679: PPUSH
5680: CALL 12894 0 1
5684: PUSH
5685: LD_VAR 0 3
5689: GREATEREQUAL
5690: IFFALSE 5786
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5692: LD_LOC 1
5696: PUSH
5697: LD_VAR 0 6
5701: PUSH
5702: LD_INT 1
5704: PLUS
5705: ARRAY
5706: PPUSH
5707: LD_VAR 0 7
5711: PPUSH
5712: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5716: LD_VAR 0 7
5720: PPUSH
5721: LD_INT 1
5723: PPUSH
5724: LD_LOC 1
5728: PUSH
5729: LD_VAR 0 6
5733: PUSH
5734: LD_INT 1
5736: PLUS
5737: ARRAY
5738: PPUSH
5739: LD_INT 1
5741: PPUSH
5742: CALL_OW 260
5746: PPUSH
5747: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5751: LD_VAR 0 7
5755: PPUSH
5756: LD_INT 2
5758: PPUSH
5759: LD_LOC 1
5763: PUSH
5764: LD_VAR 0 6
5768: PUSH
5769: LD_INT 1
5771: PLUS
5772: ARRAY
5773: PPUSH
5774: LD_INT 2
5776: PPUSH
5777: CALL_OW 260
5781: PPUSH
5782: CALL_OW 239
// end ; class := Inc ( class ) ;
5786: LD_ADDR_VAR 0 8
5790: PUSH
5791: LD_VAR 0 8
5795: PPUSH
5796: CALL 50233 0 1
5800: ST_TO_ADDR
// if class = 5 then
5801: LD_VAR 0 8
5805: PUSH
5806: LD_INT 5
5808: EQUAL
5809: IFFALSE 5819
// class := 1 ;
5811: LD_ADDR_VAR 0 8
5815: PUSH
5816: LD_INT 1
5818: ST_TO_ADDR
// end ;
5819: GO 5625
5821: POP
5822: POP
// if not mpTeamPreset then
5823: LD_LOC 1
5827: NOT
5828: IFFALSE 5840
// mpTeamPreset := result ;
5830: LD_ADDR_LOC 1
5834: PUSH
5835: LD_VAR 0 5
5839: ST_TO_ADDR
// end ;
5840: LD_VAR 0 5
5844: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5845: LD_INT 0
5847: PPUSH
5848: PPUSH
// result := [ ] ;
5849: LD_ADDR_VAR 0 4
5853: PUSH
5854: EMPTY
5855: ST_TO_ADDR
// if not vehicles then
5856: LD_VAR 0 3
5860: NOT
5861: IFFALSE 5865
// exit ;
5863: GO 6079
// for i := 1 to vehicles [ nation ] do
5865: LD_ADDR_VAR 0 5
5869: PUSH
5870: DOUBLE
5871: LD_INT 1
5873: DEC
5874: ST_TO_ADDR
5875: LD_VAR 0 3
5879: PUSH
5880: LD_VAR 0 2
5884: ARRAY
5885: PUSH
5886: FOR_TO
5887: IFFALSE 6077
// begin uc_side := side ;
5889: LD_ADDR_OWVAR 20
5893: PUSH
5894: LD_VAR 0 1
5898: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5899: LD_VAR 0 3
5903: PUSH
5904: LD_VAR 0 2
5908: ARRAY
5909: PUSH
5910: LD_VAR 0 5
5914: ARRAY
5915: PPUSH
5916: CALL 12894 0 1
5920: PUSH
5921: LD_INT 4
5923: GREATER
5924: IFFALSE 5954
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5926: LD_ADDR_OWVAR 21
5930: PUSH
5931: LD_VAR 0 3
5935: PUSH
5936: LD_VAR 0 2
5940: ARRAY
5941: PUSH
5942: LD_VAR 0 5
5946: ARRAY
5947: PUSH
5948: LD_INT 5
5950: ARRAY
5951: ST_TO_ADDR
5952: GO 5964
// uc_nation := nation ;
5954: LD_ADDR_OWVAR 21
5958: PUSH
5959: LD_VAR 0 2
5963: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5964: LD_VAR 0 3
5968: PUSH
5969: LD_VAR 0 2
5973: ARRAY
5974: PUSH
5975: LD_VAR 0 5
5979: ARRAY
5980: PUSH
5981: LD_INT 1
5983: ARRAY
5984: PPUSH
5985: LD_VAR 0 3
5989: PUSH
5990: LD_VAR 0 2
5994: ARRAY
5995: PUSH
5996: LD_VAR 0 5
6000: ARRAY
6001: PUSH
6002: LD_INT 2
6004: ARRAY
6005: PPUSH
6006: LD_VAR 0 3
6010: PUSH
6011: LD_VAR 0 2
6015: ARRAY
6016: PUSH
6017: LD_VAR 0 5
6021: ARRAY
6022: PUSH
6023: LD_INT 3
6025: ARRAY
6026: PPUSH
6027: LD_VAR 0 3
6031: PUSH
6032: LD_VAR 0 2
6036: ARRAY
6037: PUSH
6038: LD_VAR 0 5
6042: ARRAY
6043: PUSH
6044: LD_INT 4
6046: ARRAY
6047: PPUSH
6048: LD_INT 80
6050: PPUSH
6051: CALL 15690 0 5
// result := Join ( result , CreateVehicle ) ;
6055: LD_ADDR_VAR 0 4
6059: PUSH
6060: LD_VAR 0 4
6064: PPUSH
6065: CALL_OW 45
6069: PPUSH
6070: CALL 48860 0 2
6074: ST_TO_ADDR
// end ;
6075: GO 5886
6077: POP
6078: POP
// end ;
6079: LD_VAR 0 4
6083: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6084: LD_INT 0
6086: PPUSH
6087: PPUSH
// for i in mpBattleFlags do
6088: LD_ADDR_VAR 0 3
6092: PUSH
6093: LD_EXP 23
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6176
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6101: LD_VAR 0 3
6105: PPUSH
6106: LD_INT 1
6108: PUSH
6109: LD_VAR 0 1
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 2
6120: PUSH
6121: LD_VAR 0 1
6125: PUSH
6126: LD_REAL  7.00000000000000E-0001
6129: MUL
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 3
6137: PUSH
6138: LD_VAR 0 1
6142: PUSH
6143: LD_REAL  4.00000000000000E-0001
6146: MUL
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PUSH
6152: LD_INT 20
6154: PUSH
6155: LD_VAR 0 1
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: PPUSH
6170: CALL_OW 423
6174: GO 6098
6176: POP
6177: POP
// end ;
6178: LD_VAR 0 2
6182: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6183: LD_INT 100
6185: IFFALSE 6280
6187: GO 6189
6189: DISABLE
6190: LD_INT 0
6192: PPUSH
6193: PPUSH
// begin if mpBattleFlag <= 0 then
6194: LD_EXP 22
6198: PUSH
6199: LD_INT 0
6201: LESSEQUAL
6202: IFFALSE 6206
// exit ;
6204: GO 6280
// strength := 100 ;
6206: LD_ADDR_VAR 0 2
6210: PUSH
6211: LD_INT 100
6213: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6214: LD_EXP 22
6218: PPUSH
6219: CALL_OW 67
// strength := Dec ( strength ) ;
6223: LD_ADDR_VAR 0 2
6227: PUSH
6228: LD_VAR 0 2
6232: PPUSH
6233: CALL 50255 0 1
6237: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6238: LD_VAR 0 2
6242: PPUSH
6243: CALL 6084 0 1
// until not strength ;
6247: LD_VAR 0 2
6251: NOT
6252: IFFALSE 6214
// for i in mpBattleFlags do
6254: LD_ADDR_VAR 0 1
6258: PUSH
6259: LD_EXP 23
6263: PUSH
6264: FOR_IN
6265: IFFALSE 6278
// KillBattleFlag ( i ) ;
6267: LD_VAR 0 1
6271: PPUSH
6272: CALL_OW 419
6276: GO 6264
6278: POP
6279: POP
// end ;
6280: PPOPN 2
6282: END
// every 0 0$1 marked mpActive do var side , tmp ;
6283: GO 6285
6285: DISABLE
6286: LD_INT 0
6288: PPUSH
6289: PPUSH
// begin if mpSibBomb <= 1 then
6290: LD_EXP 28
6294: PUSH
6295: LD_INT 1
6297: LESSEQUAL
6298: IFFALSE 6302
// exit ;
6300: GO 6375
// tmp := mpSibBomb ;
6302: LD_ADDR_VAR 0 2
6306: PUSH
6307: LD_EXP 28
6311: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6312: LD_INT 35
6314: PPUSH
6315: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6319: LD_ADDR_VAR 0 2
6323: PUSH
6324: LD_VAR 0 2
6328: PUSH
6329: LD_INT 35
6331: MINUS
6332: ST_TO_ADDR
// until not tmp ;
6333: LD_VAR 0 2
6337: NOT
6338: IFFALSE 6312
// for side := 1 to 8 do
6340: LD_ADDR_VAR 0 1
6344: PUSH
6345: DOUBLE
6346: LD_INT 1
6348: DEC
6349: ST_TO_ADDR
6350: LD_INT 8
6352: PUSH
6353: FOR_TO
6354: IFFALSE 6373
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6356: LD_INT 25
6358: PPUSH
6359: LD_VAR 0 1
6363: PPUSH
6364: LD_INT 1
6366: PPUSH
6367: CALL_OW 322
6371: GO 6353
6373: POP
6374: POP
// end ;
6375: PPOPN 2
6377: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6378: LD_INT 0
6380: PPUSH
6381: PPUSH
6382: PPUSH
// mpBuildUpTimeDelay := 0 ;
6383: LD_ADDR_EXP 47
6387: PUSH
6388: LD_INT 0
6390: ST_TO_ADDR
// if not mpBuildUpTime then
6391: LD_EXP 20
6395: NOT
6396: IFFALSE 6400
// exit ;
6398: GO 6589
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6400: LD_ADDR_EXP 47
6404: PUSH
6405: LD_INT 8400
6407: PUSH
6408: LD_INT 2100
6410: PUSH
6411: LD_EXP 20
6415: MUL
6416: PLUS
6417: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6418: LD_ADDR_EXP 48
6422: PUSH
6423: LD_INT 1
6425: ST_TO_ADDR
// for i := 1 to 8 do
6426: LD_ADDR_VAR 0 2
6430: PUSH
6431: DOUBLE
6432: LD_INT 1
6434: DEC
6435: ST_TO_ADDR
6436: LD_INT 8
6438: PUSH
6439: FOR_TO
6440: IFFALSE 6587
// if mpSidePositions [ i ] then
6442: LD_EXP 7
6446: PUSH
6447: LD_VAR 0 2
6451: ARRAY
6452: IFFALSE 6585
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6454: LD_EXP 19
6458: PUSH
6459: LD_EXP 7
6463: PUSH
6464: LD_VAR 0 2
6468: ARRAY
6469: ARRAY
6470: PPUSH
6471: LD_INT 5
6473: PPUSH
6474: CALL_OW 424
// for j := 1 to 8 do
6478: LD_ADDR_VAR 0 3
6482: PUSH
6483: DOUBLE
6484: LD_INT 1
6486: DEC
6487: ST_TO_ADDR
6488: LD_INT 8
6490: PUSH
6491: FOR_TO
6492: IFFALSE 6583
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6494: LD_EXP 7
6498: PUSH
6499: LD_VAR 0 3
6503: ARRAY
6504: IFFALSE 6553
6506: PUSH
6507: LD_EXP 8
6511: PUSH
6512: LD_VAR 0 2
6516: ARRAY
6517: PUSH
6518: LD_EXP 8
6522: PUSH
6523: LD_VAR 0 3
6527: ARRAY
6528: NONEQUAL
6529: IFTRUE 6552
6531: PUSH
6532: LD_EXP 11
6536: NOT
6537: IFFALSE 6551
6539: PUSH
6540: LD_VAR 0 2
6544: PUSH
6545: LD_VAR 0 3
6549: NONEQUAL
6550: AND
6551: OR
6552: AND
6553: IFFALSE 6581
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6555: LD_VAR 0 3
6559: PPUSH
6560: LD_EXP 19
6564: PUSH
6565: LD_EXP 7
6569: PUSH
6570: LD_VAR 0 2
6574: ARRAY
6575: ARRAY
6576: PPUSH
6577: CALL_OW 333
6581: GO 6491
6583: POP
6584: POP
// end ;
6585: GO 6439
6587: POP
6588: POP
// end ;
6589: LD_VAR 0 1
6593: RET
// function EndBuildUp ; var i , j ; begin
6594: LD_INT 0
6596: PPUSH
6597: PPUSH
6598: PPUSH
// mpBuildUpTimeActive := false ;
6599: LD_ADDR_EXP 48
6603: PUSH
6604: LD_INT 0
6606: ST_TO_ADDR
// for i := 1 to 8 do
6607: LD_ADDR_VAR 0 2
6611: PUSH
6612: DOUBLE
6613: LD_INT 1
6615: DEC
6616: ST_TO_ADDR
6617: LD_INT 8
6619: PUSH
6620: FOR_TO
6621: IFFALSE 6768
// if mpSidePositions [ i ] then
6623: LD_EXP 7
6627: PUSH
6628: LD_VAR 0 2
6632: ARRAY
6633: IFFALSE 6766
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6635: LD_EXP 19
6639: PUSH
6640: LD_EXP 7
6644: PUSH
6645: LD_VAR 0 2
6649: ARRAY
6650: ARRAY
6651: PPUSH
6652: LD_INT 0
6654: PPUSH
6655: CALL_OW 424
// for j := 1 to 8 do
6659: LD_ADDR_VAR 0 3
6663: PUSH
6664: DOUBLE
6665: LD_INT 1
6667: DEC
6668: ST_TO_ADDR
6669: LD_INT 8
6671: PUSH
6672: FOR_TO
6673: IFFALSE 6764
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6675: LD_EXP 7
6679: PUSH
6680: LD_VAR 0 3
6684: ARRAY
6685: IFFALSE 6734
6687: PUSH
6688: LD_EXP 8
6692: PUSH
6693: LD_VAR 0 2
6697: ARRAY
6698: PUSH
6699: LD_EXP 8
6703: PUSH
6704: LD_VAR 0 3
6708: ARRAY
6709: NONEQUAL
6710: IFTRUE 6733
6712: PUSH
6713: LD_EXP 11
6717: NOT
6718: IFFALSE 6732
6720: PUSH
6721: LD_VAR 0 2
6725: PUSH
6726: LD_VAR 0 3
6730: NONEQUAL
6731: AND
6732: OR
6733: AND
6734: IFFALSE 6762
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6736: LD_VAR 0 3
6740: PPUSH
6741: LD_EXP 19
6745: PUSH
6746: LD_EXP 7
6750: PUSH
6751: LD_VAR 0 2
6755: ARRAY
6756: ARRAY
6757: PPUSH
6758: CALL_OW 334
6762: GO 6672
6764: POP
6765: POP
// end ;
6766: GO 6620
6768: POP
6769: POP
// end ;
6770: LD_VAR 0 1
6774: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6775: LD_EXP 48
6779: IFFALSE 6958
6781: GO 6783
6783: DISABLE
6784: LD_INT 0
6786: PPUSH
6787: PPUSH
// begin for i := 1 to 8 do
6788: LD_ADDR_VAR 0 1
6792: PUSH
6793: DOUBLE
6794: LD_INT 1
6796: DEC
6797: ST_TO_ADDR
6798: LD_INT 8
6800: PUSH
6801: FOR_TO
6802: IFFALSE 6955
// if mpSidePositions [ i ] then
6804: LD_EXP 7
6808: PUSH
6809: LD_VAR 0 1
6813: ARRAY
6814: IFFALSE 6953
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6816: LD_ADDR_VAR 0 2
6820: PUSH
6821: LD_EXP 19
6825: PUSH
6826: LD_EXP 7
6830: PUSH
6831: LD_VAR 0 1
6835: ARRAY
6836: ARRAY
6837: PPUSH
6838: LD_INT 2
6840: PUSH
6841: LD_INT 21
6843: PUSH
6844: LD_INT 1
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PUSH
6851: LD_INT 21
6853: PUSH
6854: LD_INT 2
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 22
6868: PUSH
6869: LD_OWVAR 2
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PPUSH
6882: CALL_OW 70
6886: PUSH
6887: FOR_IN
6888: IFFALSE 6951
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6890: LD_EXP 8
6894: PUSH
6895: LD_VAR 0 1
6899: ARRAY
6900: PUSH
6901: LD_EXP 8
6905: PUSH
6906: LD_OWVAR 2
6910: ARRAY
6911: NONEQUAL
6912: IFTRUE 6935
6914: PUSH
6915: LD_EXP 11
6919: NOT
6920: IFFALSE 6934
6922: PUSH
6923: LD_VAR 0 1
6927: PUSH
6928: LD_OWVAR 2
6932: NONEQUAL
6933: AND
6934: OR
6935: IFFALSE 6949
// ComMoveToArea ( un , BuildUpEscape ) ;
6937: LD_VAR 0 2
6941: PPUSH
6942: LD_INT 52
6944: PPUSH
6945: CALL_OW 113
6949: GO 6887
6951: POP
6952: POP
6953: GO 6801
6955: POP
6956: POP
// enable ;
6957: ENABLE
// end ;
6958: PPOPN 2
6960: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6961: LD_EXP 20
6965: IFFALSE 7015
6967: GO 6969
6969: DISABLE
6970: LD_INT 0
6972: PPUSH
// begin tmp := mpBuildUpTime ;
6973: LD_ADDR_VAR 0 1
6977: PUSH
6978: LD_EXP 20
6982: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6983: LD_INT 35
6985: PPUSH
6986: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6990: LD_ADDR_VAR 0 1
6994: PUSH
6995: LD_VAR 0 1
6999: PUSH
7000: LD_INT 35
7002: MINUS
7003: ST_TO_ADDR
// until not tmp ;
7004: LD_VAR 0 1
7008: NOT
7009: IFFALSE 6983
// EndBuildUp ;
7011: CALL 6594 0 0
// end ;
7015: PPOPN 1
7017: END
// every 0 0$1 trigger mpActive marked mpWin do
7018: LD_INT 100
7020: IFFALSE 7054
7022: GO 7024
7024: DISABLE
// begin if IAmServer then
7025: CALL_OW 518
7029: IFFALSE 7038
// wait ( 0 0$3 ) ;
7031: LD_INT 105
7033: PPUSH
7034: CALL_OW 67
// if Multiplayer then
7038: LD_OWVAR 4
7042: IFFALSE 7050
// YouWinInMultiplayer else
7044: CALL_OW 106
7048: GO 7054
// YouWin ;
7050: CALL_OW 103
// end ;
7054: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7055: LD_INT 0
7057: PPUSH
// result := false ;
7058: LD_ADDR_VAR 0 3
7062: PUSH
7063: LD_INT 0
7065: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7066: LD_VAR 0 1
7070: PUSH
7071: LD_INT 1
7073: DOUBLE
7074: EQUAL
7075: IFTRUE 7097
7077: LD_INT 5
7079: DOUBLE
7080: EQUAL
7081: IFTRUE 7097
7083: LD_INT 6
7085: DOUBLE
7086: EQUAL
7087: IFTRUE 7097
7089: LD_INT 7
7091: DOUBLE
7092: EQUAL
7093: IFTRUE 7097
7095: GO 7170
7097: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7098: LD_ADDR_VAR 0 3
7102: PUSH
7103: LD_INT 22
7105: PUSH
7106: LD_VAR 0 2
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 2
7117: PUSH
7118: LD_INT 21
7120: PUSH
7121: LD_INT 1
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: LD_INT 33
7130: PUSH
7131: LD_INT 3
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 33
7140: PUSH
7141: LD_INT 5
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PPUSH
7158: CALL_OW 69
7162: PPUSH
7163: CALL 12894 0 1
7167: ST_TO_ADDR
// end ; GameTypeSurvival :
7168: GO 7409
7170: LD_INT 2
7172: DOUBLE
7173: EQUAL
7174: IFTRUE 7178
7176: GO 7308
7178: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7179: LD_ADDR_VAR 0 3
7183: PUSH
7184: LD_INT 22
7186: PUSH
7187: LD_VAR 0 2
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: LD_INT 2
7198: PUSH
7199: LD_INT 30
7201: PUSH
7202: LD_INT 0
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: LD_INT 30
7211: PUSH
7212: LD_INT 1
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PPUSH
7228: CALL_OW 69
7232: PPUSH
7233: CALL 12894 0 1
7237: IFFALSE 7305
7239: PUSH
7240: LD_INT 22
7242: PUSH
7243: LD_VAR 0 2
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: LD_INT 2
7254: PUSH
7255: LD_INT 21
7257: PUSH
7258: LD_INT 1
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 33
7267: PUSH
7268: LD_INT 3
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 33
7277: PUSH
7278: LD_INT 5
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PPUSH
7295: CALL_OW 69
7299: PPUSH
7300: CALL 12894 0 1
7304: AND
7305: ST_TO_ADDR
// end ; GameTypeKing :
7306: GO 7409
7308: LD_INT 3
7310: DOUBLE
7311: EQUAL
7312: IFTRUE 7316
7314: GO 7408
7316: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7317: LD_ADDR_VAR 0 3
7321: PUSH
7322: LD_INT 22
7324: PUSH
7325: LD_VAR 0 2
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: LD_INT 2
7336: PUSH
7337: LD_INT 21
7339: PUSH
7340: LD_INT 1
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: LD_INT 33
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 33
7359: PUSH
7360: LD_INT 5
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PPUSH
7377: CALL_OW 69
7381: PPUSH
7382: CALL 12894 0 1
7386: IFFALSE 7405
7388: PUSH
7389: LD_VAR 0 2
7393: PPUSH
7394: CALL 61772 0 1
7398: PUSH
7399: LD_EXP 35
7403: LESS
7404: AND
7405: ST_TO_ADDR
// end ; end ;
7406: GO 7409
7408: POP
// end ;
7409: LD_VAR 0 3
7413: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7414: LD_INT 100
7416: IFFALSE 7646
7418: GO 7420
7420: DISABLE
7421: LD_INT 0
7423: PPUSH
7424: PPUSH
// begin if Multiplayer then
7425: LD_OWVAR 4
7429: IFFALSE 7437
// SetPlayerSpectator ( ) else
7431: CALL_OW 572
7435: GO 7446
// FogOff ( your_side ) ;
7437: LD_OWVAR 2
7441: PPUSH
7442: CALL_OW 344
// repeat gameIsOn := false ;
7446: LD_ADDR_VAR 0 1
7450: PUSH
7451: LD_INT 0
7453: ST_TO_ADDR
// for i := 1 to 8 do
7454: LD_ADDR_VAR 0 2
7458: PUSH
7459: DOUBLE
7460: LD_INT 1
7462: DEC
7463: ST_TO_ADDR
7464: LD_INT 8
7466: PUSH
7467: FOR_TO
7468: IFFALSE 7598
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7470: LD_EXP 7
7474: PUSH
7475: LD_VAR 0 2
7479: ARRAY
7480: IFFALSE 7493
7482: PUSH
7483: LD_VAR 0 2
7487: PPUSH
7488: CALL_OW 108
7492: AND
7493: IFFALSE 7507
7495: PUSH
7496: LD_VAR 0 2
7500: PUSH
7501: LD_OWVAR 2
7505: NONEQUAL
7506: AND
7507: IFFALSE 7596
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7509: LD_EXP 8
7513: PUSH
7514: LD_VAR 0 2
7518: ARRAY
7519: NOT
7520: IFTRUE 7568
7522: PUSH
7523: LD_EXP 8
7527: PUSH
7528: LD_VAR 0 2
7532: ARRAY
7533: PUSH
7534: LD_EXP 8
7538: PUSH
7539: LD_OWVAR 2
7543: ARRAY
7544: NONEQUAL
7545: IFFALSE 7567
7547: PUSH
7548: LD_OWVAR 2
7552: PPUSH
7553: LD_VAR 0 2
7557: PPUSH
7558: CALL_OW 81
7562: PUSH
7563: LD_INT 1
7565: NONEQUAL
7566: AND
7567: OR
7568: IFFALSE 7596
// if HasPowerByGameType ( mpGameType , i ) then
7570: LD_EXP 3
7574: PPUSH
7575: LD_VAR 0 2
7579: PPUSH
7580: CALL 7055 0 2
7584: IFFALSE 7596
// begin gameIsOn := true ;
7586: LD_ADDR_VAR 0 1
7590: PUSH
7591: LD_INT 1
7593: ST_TO_ADDR
// break ;
7594: GO 7598
// end ;
7596: GO 7467
7598: POP
7599: POP
// wait ( 100 ) ;
7600: LD_INT 100
7602: PPUSH
7603: CALL_OW 67
// until not gameIsOn ;
7607: LD_VAR 0 1
7611: NOT
7612: IFFALSE 7446
// if IAmServer then
7614: CALL_OW 518
7618: IFFALSE 7627
// wait ( 0 0$3 ) ;
7620: LD_INT 105
7622: PPUSH
7623: CALL_OW 67
// if Multiplayer then
7627: LD_OWVAR 4
7631: IFFALSE 7639
// YouLostInMultiplayer else
7633: CALL_OW 107
7637: GO 7646
// YouLost (  ) ;
7639: LD_STRING 
7641: PPUSH
7642: CALL_OW 104
// end ;
7646: PPOPN 2
7648: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7649: LD_EXP 33
7653: IFFALSE 8037
7655: GO 7657
7657: DISABLE
7658: LD_INT 0
7660: PPUSH
7661: PPUSH
7662: PPUSH
7663: PPUSH
7664: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7665: LD_ADDR_VAR 0 5
7669: PUSH
7670: LD_INT 1
7672: PUSH
7673: LD_INT 2
7675: PUSH
7676: LD_INT 3
7678: PUSH
7679: LD_INT 4
7681: PUSH
7682: LD_INT 5
7684: PUSH
7685: LD_INT 6
7687: PUSH
7688: LD_INT 7
7690: PUSH
7691: LD_INT 8
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7704: LD_INT 350
7706: PPUSH
7707: CALL_OW 67
// for i := 1 to 8 do
7711: LD_ADDR_VAR 0 1
7715: PUSH
7716: DOUBLE
7717: LD_INT 1
7719: DEC
7720: ST_TO_ADDR
7721: LD_INT 8
7723: PUSH
7724: FOR_TO
7725: IFFALSE 8007
// begin j := sides [ i ] ;
7727: LD_ADDR_VAR 0 2
7731: PUSH
7732: LD_VAR 0 5
7736: PUSH
7737: LD_VAR 0 1
7741: ARRAY
7742: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7743: LD_EXP 40
7747: PUSH
7748: LD_VAR 0 2
7752: ARRAY
7753: PPUSH
7754: CALL 12894 0 1
7758: IFFALSE 7771
7760: PUSH
7761: LD_VAR 0 2
7765: PPUSH
7766: CALL_OW 108
7770: AND
7771: IFFALSE 7789
7773: PUSH
7774: LD_EXP 3
7778: PPUSH
7779: LD_VAR 0 2
7783: PPUSH
7784: CALL 7055 0 2
7788: AND
7789: IFFALSE 8005
// begin wait ( mpRespawn div 2 ) ;
7791: LD_EXP 33
7795: PUSH
7796: LD_INT 2
7798: DIV
7799: PPUSH
7800: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7804: LD_ADDR_VAR 0 3
7808: PUSH
7809: LD_INT 22
7811: PUSH
7812: LD_VAR 0 2
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 50
7823: PUSH
7824: EMPTY
7825: LIST
7826: PUSH
7827: LD_INT 2
7829: PUSH
7830: LD_INT 30
7832: PUSH
7833: LD_INT 0
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PUSH
7840: LD_INT 30
7842: PUSH
7843: LD_INT 1
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: LIST
7859: PPUSH
7860: CALL_OW 69
7864: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7865: LD_VAR 0 3
7869: NOT
7870: IFTRUE 7884
7872: PUSH
7873: LD_VAR 0 2
7877: PPUSH
7878: CALL_OW 108
7882: NOT
7883: OR
7884: IFTRUE 7903
7886: PUSH
7887: LD_EXP 3
7891: PPUSH
7892: LD_VAR 0 2
7896: PPUSH
7897: CALL 7055 0 2
7901: NOT
7902: OR
7903: IFFALSE 7907
// continue ;
7905: GO 7724
// spawn := tmp [ 1 ] ;
7907: LD_ADDR_VAR 0 4
7911: PUSH
7912: LD_VAR 0 3
7916: PUSH
7917: LD_INT 1
7919: ARRAY
7920: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7921: LD_EXP 40
7925: PUSH
7926: LD_VAR 0 2
7930: ARRAY
7931: PUSH
7932: LD_INT 1
7934: ARRAY
7935: PPUSH
7936: LD_VAR 0 4
7940: PPUSH
7941: CALL_OW 250
7945: PPUSH
7946: LD_VAR 0 4
7950: PPUSH
7951: CALL_OW 251
7955: PPUSH
7956: LD_INT 32
7958: PPUSH
7959: LD_INT 1
7961: PPUSH
7962: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7966: LD_ADDR_EXP 40
7970: PUSH
7971: LD_EXP 40
7975: PPUSH
7976: LD_VAR 0 2
7980: PPUSH
7981: LD_EXP 40
7985: PUSH
7986: LD_VAR 0 2
7990: ARRAY
7991: PPUSH
7992: LD_INT 1
7994: PPUSH
7995: CALL_OW 3
7999: PPUSH
8000: CALL_OW 1
8004: ST_TO_ADDR
// end ; end ;
8005: GO 7724
8007: POP
8008: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8009: LD_ADDR_VAR 0 5
8013: PUSH
8014: LD_VAR 0 5
8018: PPUSH
8019: LD_INT 1
8021: PPUSH
8022: LD_INT 8
8024: PPUSH
8025: LD_INT 1
8027: PPUSH
8028: CALL 15220 0 4
8032: ST_TO_ADDR
// until false ;
8033: LD_INT 0
8035: IFFALSE 7704
// end ;
8037: PPOPN 5
8039: END
// every 0 0$1 marked mpActive do
8040: GO 8042
8042: DISABLE
// begin enable ;
8043: ENABLE
// if not mpDisplayStrings then
8044: LD_EXP 38
8048: NOT
8049: IFFALSE 8060
// begin display_strings := [ ] ;
8051: LD_ADDR_OWVAR 47
8055: PUSH
8056: EMPTY
8057: ST_TO_ADDR
// exit ;
8058: GO 8070
// end ; display_strings := mpDisplayStrings ;
8060: LD_ADDR_OWVAR 47
8064: PUSH
8065: LD_EXP 38
8069: ST_TO_ADDR
// end ; end_of_file
8070: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8071: LD_INT 0
8073: PPUSH
8074: PPUSH
8075: PPUSH
8076: PPUSH
8077: PPUSH
8078: PPUSH
8079: PPUSH
8080: PPUSH
8081: PPUSH
// if GetType ( un ) = unit_vehicle then
8082: LD_VAR 0 1
8086: PPUSH
8087: CALL_OW 247
8091: PUSH
8092: LD_INT 2
8094: EQUAL
8095: IFFALSE 8099
// exit ;
8097: GO 8773
// side := GetSide ( un ) ;
8099: LD_ADDR_VAR 0 9
8103: PUSH
8104: LD_VAR 0 1
8108: PPUSH
8109: CALL_OW 255
8113: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
8114: LD_EXP 3
8118: PUSH
8119: LD_INT 2
8121: EQUAL
8122: IFFALSE 8216
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8124: LD_VAR 0 1
8128: PPUSH
8129: CALL_OW 266
8133: PUSH
8134: LD_INT 0
8136: PUSH
8137: LD_INT 1
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: IN
8144: IFFALSE 8216
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8146: LD_ADDR_VAR 0 3
8150: PUSH
8151: LD_INT 22
8153: PUSH
8154: LD_VAR 0 9
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 2
8165: PUSH
8166: LD_INT 21
8168: PUSH
8169: LD_INT 1
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 33
8178: PUSH
8179: LD_INT 3
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PPUSH
8195: CALL_OW 69
8199: PUSH
8200: FOR_IN
8201: IFFALSE 8214
// KillUnit ( i ) ;
8203: LD_VAR 0 3
8207: PPUSH
8208: CALL_OW 66
8212: GO 8200
8214: POP
8215: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8216: LD_VAR 0 1
8220: PPUSH
8221: CALL_OW 257
8225: PUSH
8226: LD_INT 12
8228: PUSH
8229: LD_INT 17
8231: PUSH
8232: LD_INT 15
8234: PUSH
8235: LD_INT 16
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: IN
8244: IFTRUE 8261
8246: PUSH
8247: LD_VAR 0 1
8251: PPUSH
8252: CALL_OW 263
8256: PUSH
8257: LD_INT 5
8259: EQUAL
8260: OR
8261: IFFALSE 8498
// begin tag := 0 ;
8263: LD_ADDR_VAR 0 5
8267: PUSH
8268: LD_INT 0
8270: ST_TO_ADDR
// for i := 1 to 8 do
8271: LD_ADDR_VAR 0 3
8275: PUSH
8276: DOUBLE
8277: LD_INT 1
8279: DEC
8280: ST_TO_ADDR
8281: LD_INT 8
8283: PUSH
8284: FOR_TO
8285: IFFALSE 8319
// if un in mpApePosIndex [ i ] then
8287: LD_VAR 0 1
8291: PUSH
8292: LD_EXP 32
8296: PUSH
8297: LD_VAR 0 3
8301: ARRAY
8302: IN
8303: IFFALSE 8317
// begin tag := i ;
8305: LD_ADDR_VAR 0 5
8309: PUSH
8310: LD_VAR 0 3
8314: ST_TO_ADDR
// break ;
8315: GO 8319
// end ;
8317: GO 8284
8319: POP
8320: POP
// if not tag then
8321: LD_VAR 0 5
8325: NOT
8326: IFFALSE 8330
// exit ;
8328: GO 8773
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8330: LD_ADDR_VAR 0 7
8334: PUSH
8335: LD_EXP 31
8339: PUSH
8340: LD_EXP 7
8344: PUSH
8345: LD_VAR 0 5
8349: ARRAY
8350: ARRAY
8351: ST_TO_ADDR
// if not area then
8352: LD_VAR 0 7
8356: NOT
8357: IFFALSE 8361
// exit ;
8359: GO 8773
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8361: LD_INT 14700
8363: PUSH
8364: LD_VAR 0 1
8368: PUSH
8369: LD_INT 5
8371: MOD
8372: PUSH
8373: LD_INT 1
8375: PLUS
8376: PUSH
8377: LD_INT 700
8379: MUL
8380: PLUS
8381: PPUSH
8382: CALL_OW 67
// repeat wait ( 10 ) ;
8386: LD_INT 10
8388: PPUSH
8389: CALL_OW 67
// until not mpBlockRespThread ;
8393: LD_EXP 46
8397: NOT
8398: IFFALSE 8386
// mpBlockRespThread := true ;
8400: LD_ADDR_EXP 46
8404: PUSH
8405: LD_INT 1
8407: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8408: LD_INT 0
8410: PPUSH
8411: CALL 44987 0 1
// ape := CreateHuman ;
8415: LD_ADDR_VAR 0 4
8419: PUSH
8420: CALL_OW 44
8424: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8425: LD_ADDR_EXP 32
8429: PUSH
8430: LD_EXP 32
8434: PPUSH
8435: LD_VAR 0 5
8439: PPUSH
8440: LD_EXP 32
8444: PUSH
8445: LD_VAR 0 5
8449: ARRAY
8450: PPUSH
8451: LD_VAR 0 4
8455: PPUSH
8456: CALL 48860 0 2
8460: PPUSH
8461: CALL_OW 1
8465: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8466: LD_VAR 0 4
8470: PPUSH
8471: LD_VAR 0 7
8475: PPUSH
8476: LD_INT 0
8478: PPUSH
8479: CALL_OW 49
// wait ( 10 ) ;
8483: LD_INT 10
8485: PPUSH
8486: CALL_OW 67
// mpBlockRespThread := false ;
8490: LD_ADDR_EXP 46
8494: PUSH
8495: LD_INT 0
8497: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8498: LD_VAR 0 1
8502: PPUSH
8503: CALL_OW 247
8507: PUSH
8508: LD_INT 1
8510: EQUAL
8511: IFFALSE 8528
8513: PUSH
8514: LD_VAR 0 1
8518: PPUSH
8519: CALL_OW 248
8523: PUSH
8524: LD_INT 0
8526: GREATER
8527: AND
8528: IFFALSE 8773
// begin if not mpRespawn then
8530: LD_EXP 33
8534: NOT
8535: IFFALSE 8539
// exit ;
8537: GO 8773
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8539: LD_VAR 0 9
8543: PPUSH
8544: CALL_OW 108
8548: NOT
8549: IFFALSE 8568
8551: PUSH
8552: LD_EXP 3
8556: PPUSH
8557: LD_VAR 0 9
8561: PPUSH
8562: CALL 7055 0 2
8566: NOT
8567: AND
8568: IFFALSE 8572
// exit ;
8570: GO 8773
// side := GetSide ( un ) ;
8572: LD_ADDR_VAR 0 9
8576: PUSH
8577: LD_VAR 0 1
8581: PPUSH
8582: CALL_OW 255
8586: ST_TO_ADDR
// nation := GetNation ( un ) ;
8587: LD_ADDR_VAR 0 8
8591: PUSH
8592: LD_VAR 0 1
8596: PPUSH
8597: CALL_OW 248
8601: ST_TO_ADDR
// class := GetClass ( un ) ;
8602: LD_ADDR_VAR 0 6
8606: PUSH
8607: LD_VAR 0 1
8611: PPUSH
8612: CALL_OW 257
8616: ST_TO_ADDR
// if class > 4 then
8617: LD_VAR 0 6
8621: PUSH
8622: LD_INT 4
8624: GREATER
8625: IFFALSE 8635
// class := 1 ;
8627: LD_ADDR_VAR 0 6
8631: PUSH
8632: LD_INT 1
8634: ST_TO_ADDR
// repeat wait ( 10 ) ;
8635: LD_INT 10
8637: PPUSH
8638: CALL_OW 67
// until not mpBlockRespThread ;
8642: LD_EXP 46
8646: NOT
8647: IFFALSE 8635
// mpBlockRespThread := true ;
8649: LD_ADDR_EXP 46
8653: PUSH
8654: LD_INT 1
8656: ST_TO_ADDR
// uc_side := side ;
8657: LD_ADDR_OWVAR 20
8661: PUSH
8662: LD_VAR 0 9
8666: ST_TO_ADDR
// uc_nation := nation ;
8667: LD_ADDR_OWVAR 21
8671: PUSH
8672: LD_VAR 0 8
8676: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8677: LD_INT 0
8679: PPUSH
8680: LD_VAR 0 6
8684: PPUSH
8685: LD_INT 2
8687: PPUSH
8688: CALL_OW 380
// un := CreateHuman ;
8692: LD_ADDR_VAR 0 1
8696: PUSH
8697: CALL_OW 44
8701: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8702: LD_ADDR_EXP 40
8706: PUSH
8707: LD_EXP 40
8711: PPUSH
8712: LD_VAR 0 9
8716: PPUSH
8717: LD_EXP 40
8721: PUSH
8722: LD_VAR 0 9
8726: ARRAY
8727: PPUSH
8728: LD_EXP 40
8732: PUSH
8733: LD_VAR 0 9
8737: ARRAY
8738: PUSH
8739: LD_INT 1
8741: PLUS
8742: PPUSH
8743: LD_VAR 0 1
8747: PPUSH
8748: CALL_OW 1
8752: PPUSH
8753: CALL_OW 1
8757: ST_TO_ADDR
// wait ( 10 ) ;
8758: LD_INT 10
8760: PPUSH
8761: CALL_OW 67
// mpBlockRespThread := false ;
8765: LD_ADDR_EXP 46
8769: PUSH
8770: LD_INT 0
8772: ST_TO_ADDR
// end ; end ;
8773: LD_VAR 0 2
8777: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8778: LD_INT 0
8780: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8781: LD_VAR 0 1
8785: PPUSH
8786: CALL_OW 266
8790: PUSH
8791: LD_INT 0
8793: PUSH
8794: LD_INT 1
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: IN
8801: IFFALSE 8826
// SetBName ( building , @ & GetSide ( building ) ) ;
8803: LD_VAR 0 1
8807: PPUSH
8808: LD_STRING @
8810: PUSH
8811: LD_VAR 0 1
8815: PPUSH
8816: CALL_OW 255
8820: STR
8821: PPUSH
8822: CALL_OW 500
// end ;
8826: LD_VAR 0 2
8830: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8831: LD_INT 0
8833: PPUSH
8834: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8835: LD_EXP 3
8839: PUSH
8840: LD_INT 2
8842: EQUAL
8843: IFFALSE 8867
8845: PUSH
8846: LD_VAR 0 1
8850: PPUSH
8851: CALL_OW 266
8855: PUSH
8856: LD_INT 0
8858: PUSH
8859: LD_INT 1
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: IN
8866: AND
8867: IFFALSE 8946
// begin SetSide ( building , oldSide ) ;
8869: LD_VAR 0 1
8873: PPUSH
8874: LD_VAR 0 2
8878: PPUSH
8879: CALL_OW 235
// KillUnit ( building ) ;
8883: LD_VAR 0 1
8887: PPUSH
8888: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8892: LD_ADDR_VAR 0 5
8896: PUSH
8897: LD_INT 22
8899: PUSH
8900: LD_VAR 0 2
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PUSH
8909: LD_INT 21
8911: PUSH
8912: LD_INT 1
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PPUSH
8923: CALL_OW 69
8927: PUSH
8928: FOR_IN
8929: IFFALSE 8942
// KillUnit ( i ) ;
8931: LD_VAR 0 5
8935: PPUSH
8936: CALL_OW 66
8940: GO 8928
8942: POP
8943: POP
// exit ;
8944: GO 8991
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8946: LD_VAR 0 1
8950: PPUSH
8951: CALL_OW 266
8955: PUSH
8956: LD_INT 0
8958: PUSH
8959: LD_INT 1
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: IN
8966: IFFALSE 8991
// SetBName ( building , @ & GetSide ( building ) ) ;
8968: LD_VAR 0 1
8972: PPUSH
8973: LD_STRING @
8975: PUSH
8976: LD_VAR 0 1
8980: PPUSH
8981: CALL_OW 255
8985: STR
8986: PPUSH
8987: CALL_OW 500
// end ;
8991: LD_VAR 0 4
8995: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8996: LD_INT 0
8998: PPUSH
8999: PPUSH
9000: PPUSH
// if mpGameType <> GameTypeFamine then
9001: LD_EXP 3
9005: PUSH
9006: LD_INT 5
9008: NONEQUAL
9009: IFFALSE 9013
// exit ;
9011: GO 9228
// for i := 1 to mpGlobalOilDeposits do
9013: LD_ADDR_VAR 0 6
9017: PUSH
9018: DOUBLE
9019: LD_INT 1
9021: DEC
9022: ST_TO_ADDR
9023: LD_EXP 41
9027: PUSH
9028: FOR_TO
9029: IFFALSE 9226
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9031: LD_EXP 41
9035: PUSH
9036: LD_VAR 0 6
9040: ARRAY
9041: PUSH
9042: LD_INT 1
9044: ARRAY
9045: PPUSH
9046: LD_EXP 41
9050: PUSH
9051: LD_VAR 0 6
9055: ARRAY
9056: PUSH
9057: LD_INT 2
9059: ARRAY
9060: PPUSH
9061: CALL_OW 428
9065: PUSH
9066: LD_VAR 0 1
9070: EQUAL
9071: IFFALSE 9224
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9073: LD_ADDR_VAR 0 7
9077: PUSH
9078: LD_EXP 41
9082: PUSH
9083: LD_VAR 0 6
9087: ARRAY
9088: PUSH
9089: LD_INT 3
9091: ARRAY
9092: ST_TO_ADDR
// value := value - amount ;
9093: LD_ADDR_VAR 0 7
9097: PUSH
9098: LD_VAR 0 7
9102: PUSH
9103: LD_VAR 0 4
9107: MINUS
9108: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9109: LD_ADDR_EXP 41
9113: PUSH
9114: LD_EXP 41
9118: PPUSH
9119: LD_VAR 0 6
9123: PPUSH
9124: LD_EXP 41
9128: PUSH
9129: LD_VAR 0 6
9133: ARRAY
9134: PPUSH
9135: LD_INT 3
9137: PPUSH
9138: LD_VAR 0 7
9142: PPUSH
9143: CALL_OW 1
9147: PPUSH
9148: CALL_OW 1
9152: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9153: LD_VAR 0 1
9157: PPUSH
9158: LD_VAR 0 7
9162: PPUSH
9163: CALL_OW 505
// if value <= 0 then
9167: LD_VAR 0 7
9171: PUSH
9172: LD_INT 0
9174: LESSEQUAL
9175: IFFALSE 9224
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9177: LD_EXP 41
9181: PUSH
9182: LD_VAR 0 6
9186: ARRAY
9187: PUSH
9188: LD_INT 1
9190: ARRAY
9191: PPUSH
9192: LD_EXP 41
9196: PUSH
9197: LD_VAR 0 6
9201: ARRAY
9202: PUSH
9203: LD_INT 2
9205: ARRAY
9206: PPUSH
9207: CALL_OW 63
// KillUnit ( building ) ;
9211: LD_VAR 0 1
9215: PPUSH
9216: CALL_OW 66
// exit ;
9220: POP
9221: POP
9222: GO 9228
// end ; end ; end ;
9224: GO 9028
9226: POP
9227: POP
// end ;
9228: LD_VAR 0 5
9232: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9233: LD_INT 0
9235: PPUSH
9236: PPUSH
9237: PPUSH
// if mpGameType <> GameTypeFamine then
9238: LD_EXP 3
9242: PUSH
9243: LD_INT 5
9245: NONEQUAL
9246: IFFALSE 9250
// exit ;
9248: GO 9465
// for i := 1 to mpGlobalSibDeposits do
9250: LD_ADDR_VAR 0 6
9254: PUSH
9255: DOUBLE
9256: LD_INT 1
9258: DEC
9259: ST_TO_ADDR
9260: LD_EXP 42
9264: PUSH
9265: FOR_TO
9266: IFFALSE 9463
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9268: LD_EXP 42
9272: PUSH
9273: LD_VAR 0 6
9277: ARRAY
9278: PUSH
9279: LD_INT 1
9281: ARRAY
9282: PPUSH
9283: LD_EXP 42
9287: PUSH
9288: LD_VAR 0 6
9292: ARRAY
9293: PUSH
9294: LD_INT 2
9296: ARRAY
9297: PPUSH
9298: CALL_OW 428
9302: PUSH
9303: LD_VAR 0 1
9307: EQUAL
9308: IFFALSE 9461
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9310: LD_ADDR_VAR 0 7
9314: PUSH
9315: LD_EXP 42
9319: PUSH
9320: LD_VAR 0 6
9324: ARRAY
9325: PUSH
9326: LD_INT 3
9328: ARRAY
9329: ST_TO_ADDR
// value := value - amount ;
9330: LD_ADDR_VAR 0 7
9334: PUSH
9335: LD_VAR 0 7
9339: PUSH
9340: LD_VAR 0 4
9344: MINUS
9345: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9346: LD_ADDR_EXP 42
9350: PUSH
9351: LD_EXP 42
9355: PPUSH
9356: LD_VAR 0 6
9360: PPUSH
9361: LD_EXP 42
9365: PUSH
9366: LD_VAR 0 6
9370: ARRAY
9371: PPUSH
9372: LD_INT 3
9374: PPUSH
9375: LD_VAR 0 7
9379: PPUSH
9380: CALL_OW 1
9384: PPUSH
9385: CALL_OW 1
9389: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9390: LD_VAR 0 1
9394: PPUSH
9395: LD_VAR 0 7
9399: PPUSH
9400: CALL_OW 505
// if value <= 0 then
9404: LD_VAR 0 7
9408: PUSH
9409: LD_INT 0
9411: LESSEQUAL
9412: IFFALSE 9461
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9414: LD_EXP 42
9418: PUSH
9419: LD_VAR 0 6
9423: ARRAY
9424: PUSH
9425: LD_INT 1
9427: ARRAY
9428: PPUSH
9429: LD_EXP 42
9433: PUSH
9434: LD_VAR 0 6
9438: ARRAY
9439: PUSH
9440: LD_INT 2
9442: ARRAY
9443: PPUSH
9444: CALL_OW 63
// KillUnit ( building ) ;
9448: LD_VAR 0 1
9452: PPUSH
9453: CALL_OW 66
// exit ;
9457: POP
9458: POP
9459: GO 9465
// end ; end ; end ;
9461: GO 9265
9463: POP
9464: POP
// end ;
9465: LD_VAR 0 5
9469: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
9470: LD_INT 0
9472: PPUSH
9473: PPUSH
// side := GetSide ( factory ) ;
9474: LD_ADDR_VAR 0 7
9478: PUSH
9479: LD_VAR 0 1
9483: PPUSH
9484: CALL_OW 255
9488: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9489: LD_VAR 0 5
9493: PUSH
9494: LD_INT 81
9496: EQUAL
9497: IFFALSE 9535
9499: PUSH
9500: LD_INT 22
9502: PUSH
9503: LD_VAR 0 7
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PUSH
9512: LD_INT 34
9514: PUSH
9515: LD_INT 81
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PPUSH
9526: CALL_OW 69
9530: PUSH
9531: LD_INT 0
9533: GREATER
9534: AND
9535: IFFALSE 9568
// begin ComCancel ( factory ) ;
9537: LD_VAR 0 1
9541: PPUSH
9542: CALL_OW 127
// if side = your_side then
9546: LD_VAR 0 7
9550: PUSH
9551: LD_OWVAR 2
9555: EQUAL
9556: IFFALSE 9568
// HintSpec ( VehLimit , 2 ) ;
9558: LD_STRING VehLimit
9560: PPUSH
9561: LD_INT 2
9563: PPUSH
9564: CALL_OW 338
// end ; end ;
9568: LD_VAR 0 6
9572: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
9573: LD_INT 0
9575: PPUSH
9576: PPUSH
9577: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
9578: LD_VAR 0 1
9582: PPUSH
9583: CALL_OW 264
9587: PUSH
9588: LD_INT 81
9590: EQUAL
9591: IFFALSE 9608
9593: PUSH
9594: LD_VAR 0 1
9598: PPUSH
9599: CALL_OW 263
9603: PUSH
9604: LD_INT 1
9606: EQUAL
9607: AND
9608: IFFALSE 9888
// begin for i := 1 to Count ( minersList ) do
9610: LD_ADDR_VAR 0 6
9614: PUSH
9615: DOUBLE
9616: LD_INT 1
9618: DEC
9619: ST_TO_ADDR
9620: LD_EXP 56
9624: PPUSH
9625: CALL 12894 0 1
9629: PUSH
9630: FOR_TO
9631: IFFALSE 9749
// begin if minersList [ i ] = oldId then
9633: LD_EXP 56
9637: PUSH
9638: LD_VAR 0 6
9642: ARRAY
9643: PUSH
9644: LD_VAR 0 2
9648: EQUAL
9649: IFFALSE 9747
// begin for j := 1 to minerMinesList [ i ] do
9651: LD_ADDR_VAR 0 7
9655: PUSH
9656: DOUBLE
9657: LD_INT 1
9659: DEC
9660: ST_TO_ADDR
9661: LD_EXP 57
9665: PUSH
9666: LD_VAR 0 6
9670: ARRAY
9671: PUSH
9672: FOR_TO
9673: IFFALSE 9723
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
9675: LD_EXP 57
9679: PUSH
9680: LD_VAR 0 6
9684: ARRAY
9685: PUSH
9686: LD_VAR 0 7
9690: ARRAY
9691: PUSH
9692: LD_INT 1
9694: ARRAY
9695: PPUSH
9696: LD_EXP 57
9700: PUSH
9701: LD_VAR 0 6
9705: ARRAY
9706: PUSH
9707: LD_VAR 0 7
9711: ARRAY
9712: PUSH
9713: LD_INT 2
9715: ARRAY
9716: PPUSH
9717: CALL_OW 612
9721: GO 9672
9723: POP
9724: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
9725: LD_ADDR_EXP 57
9729: PUSH
9730: LD_EXP 57
9734: PPUSH
9735: LD_VAR 0 6
9739: PPUSH
9740: CALL_OW 3
9744: ST_TO_ADDR
// break ;
9745: GO 9749
// end ; end ;
9747: GO 9630
9749: POP
9750: POP
// minersList := minersList diff oldId ;
9751: LD_ADDR_EXP 56
9755: PUSH
9756: LD_EXP 56
9760: PUSH
9761: LD_VAR 0 2
9765: DIFF
9766: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
9767: LD_INT 22
9769: PUSH
9770: LD_VAR 0 4
9774: PPUSH
9775: CALL_OW 255
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_INT 34
9786: PUSH
9787: LD_INT 81
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PPUSH
9798: CALL_OW 69
9802: PUSH
9803: LD_INT 1
9805: GREATER
9806: IFFALSE 9833
// begin ComExit ( unit ) ;
9808: LD_VAR 0 4
9812: PPUSH
9813: CALL 49258 0 1
// SetSide ( newId , oldSide ) ;
9817: LD_VAR 0 1
9821: PPUSH
9822: LD_VAR 0 3
9826: PPUSH
9827: CALL_OW 235
// exit ;
9831: GO 9888
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
9833: LD_ADDR_EXP 56
9837: PUSH
9838: LD_EXP 56
9842: PPUSH
9843: LD_EXP 56
9847: PUSH
9848: LD_INT 1
9850: PLUS
9851: PPUSH
9852: LD_VAR 0 1
9856: PPUSH
9857: CALL_OW 1
9861: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
9862: LD_ADDR_EXP 57
9866: PUSH
9867: LD_EXP 57
9871: PPUSH
9872: LD_EXP 57
9876: PUSH
9877: LD_INT 1
9879: PLUS
9880: PPUSH
9881: EMPTY
9882: PPUSH
9883: CALL_OW 1
9887: ST_TO_ADDR
// end ; end ; end_of_file
9888: LD_VAR 0 5
9892: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9893: LD_EXP 39
9897: IFFALSE 9905
9899: PUSH
9900: CALL 10115 0 0
9904: AND
9905: IFFALSE 9913
9907: PUSH
9908: LD_OWVAR 4
9912: AND
9913: IFFALSE 10112
9915: GO 9917
9917: DISABLE
9918: LD_INT 0
9920: PPUSH
9921: PPUSH
// begin canWin := false ;
9922: LD_ADDR_VAR 0 2
9926: PUSH
9927: LD_INT 0
9929: ST_TO_ADDR
// if not HasPower ( your_side ) then
9930: LD_OWVAR 2
9934: PPUSH
9935: CALL 10157 0 1
9939: NOT
9940: IFFALSE 9951
// begin Multiplayer_Loose_Message ;
9942: CALL_OW 521
// enable ( mpLose ) ;
9946: LD_INT 102
9948: ENABLE_MARKED
// end else
9949: GO 10112
// begin canWin := true ;
9951: LD_ADDR_VAR 0 2
9955: PUSH
9956: LD_INT 1
9958: ST_TO_ADDR
// for i := 1 to 8 do
9959: LD_ADDR_VAR 0 1
9963: PUSH
9964: DOUBLE
9965: LD_INT 1
9967: DEC
9968: ST_TO_ADDR
9969: LD_INT 8
9971: PUSH
9972: FOR_TO
9973: IFFALSE 10098
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9975: LD_EXP 7
9979: PUSH
9980: LD_VAR 0 1
9984: ARRAY
9985: IFFALSE 9998
9987: PUSH
9988: LD_VAR 0 1
9992: PPUSH
9993: CALL_OW 108
9997: AND
9998: IFFALSE 10012
10000: PUSH
10001: LD_VAR 0 1
10005: PUSH
10006: LD_OWVAR 2
10010: NONEQUAL
10011: AND
10012: IFFALSE 10096
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10014: LD_EXP 8
10018: PUSH
10019: LD_VAR 0 1
10023: ARRAY
10024: NOT
10025: IFTRUE 10073
10027: PUSH
10028: LD_EXP 8
10032: PUSH
10033: LD_VAR 0 1
10037: ARRAY
10038: PUSH
10039: LD_EXP 8
10043: PUSH
10044: LD_OWVAR 2
10048: ARRAY
10049: NONEQUAL
10050: IFFALSE 10072
10052: PUSH
10053: LD_OWVAR 2
10057: PPUSH
10058: LD_VAR 0 1
10062: PPUSH
10063: CALL_OW 81
10067: PUSH
10068: LD_INT 1
10070: NONEQUAL
10071: AND
10072: OR
10073: IFFALSE 10096
// if HasPower ( i ) then
10075: LD_VAR 0 1
10079: PPUSH
10080: CALL 10157 0 1
10084: IFFALSE 10096
// begin canWin := false ;
10086: LD_ADDR_VAR 0 2
10090: PUSH
10091: LD_INT 0
10093: ST_TO_ADDR
// break ;
10094: GO 10098
// end ;
10096: GO 9972
10098: POP
10099: POP
// if canWin then
10100: LD_VAR 0 2
10104: IFFALSE 10111
// enable ( mpWin ) else
10106: LD_INT 101
10108: ENABLE_MARKED
10109: GO 10112
// enable ;
10111: ENABLE
// end ; end ;
10112: PPOPN 2
10114: END
// function CanWinLoose ; begin
10115: LD_INT 0
10117: PPUSH
// result := true ;
10118: LD_ADDR_VAR 0 1
10122: PUSH
10123: LD_INT 1
10125: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10126: CALL_OW 531
10130: IFFALSE 10142
10132: PUSH
10133: CALL_OW 519
10137: PUSH
10138: LD_INT 1
10140: GREATER
10141: AND
10142: IFFALSE 10152
// result := false ;
10144: LD_ADDR_VAR 0 1
10148: PUSH
10149: LD_INT 0
10151: ST_TO_ADDR
// end ;
10152: LD_VAR 0 1
10156: RET
// function HasPower ( i ) ; begin
10157: LD_INT 0
10159: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10160: LD_ADDR_VAR 0 2
10164: PUSH
10165: LD_INT 22
10167: PUSH
10168: LD_VAR 0 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 2
10179: PUSH
10180: LD_INT 21
10182: PUSH
10183: LD_INT 1
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: LD_INT 33
10192: PUSH
10193: LD_INT 3
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 33
10202: PUSH
10203: LD_INT 5
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PPUSH
10220: CALL_OW 69
10224: ST_TO_ADDR
// end ; end_of_file
10225: LD_VAR 0 2
10229: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10230: LD_EXP 39
10234: IFFALSE 10277
10236: GO 10238
10238: DISABLE
10239: LD_INT 0
10241: PPUSH
// begin for i := 1 to 8 do
10242: LD_ADDR_VAR 0 1
10246: PUSH
10247: DOUBLE
10248: LD_INT 1
10250: DEC
10251: ST_TO_ADDR
10252: LD_INT 8
10254: PUSH
10255: FOR_TO
10256: IFFALSE 10275
// SetRestrict ( b_depot , i , state_disabled ) ;
10258: LD_INT 0
10260: PPUSH
10261: LD_VAR 0 1
10265: PPUSH
10266: LD_INT 0
10268: PPUSH
10269: CALL_OW 324
10273: GO 10255
10275: POP
10276: POP
// end ;
10277: PPOPN 1
10279: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10280: LD_EXP 39
10284: IFFALSE 10292
10286: PUSH
10287: CALL 10502 0 0
10291: AND
10292: IFFALSE 10300
10294: PUSH
10295: LD_OWVAR 4
10299: AND
10300: IFFALSE 10499
10302: GO 10304
10304: DISABLE
10305: LD_INT 0
10307: PPUSH
10308: PPUSH
// begin canWin := false ;
10309: LD_ADDR_VAR 0 2
10313: PUSH
10314: LD_INT 0
10316: ST_TO_ADDR
// if not HasPower ( your_side ) then
10317: LD_OWVAR 2
10321: PPUSH
10322: CALL 10544 0 1
10326: NOT
10327: IFFALSE 10338
// begin Multiplayer_Loose_Message ;
10329: CALL_OW 521
// enable ( mpLose ) ;
10333: LD_INT 102
10335: ENABLE_MARKED
// end else
10336: GO 10499
// begin canWin := true ;
10338: LD_ADDR_VAR 0 2
10342: PUSH
10343: LD_INT 1
10345: ST_TO_ADDR
// for i := 1 to 8 do
10346: LD_ADDR_VAR 0 1
10350: PUSH
10351: DOUBLE
10352: LD_INT 1
10354: DEC
10355: ST_TO_ADDR
10356: LD_INT 8
10358: PUSH
10359: FOR_TO
10360: IFFALSE 10485
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10362: LD_EXP 7
10366: PUSH
10367: LD_VAR 0 1
10371: ARRAY
10372: IFFALSE 10385
10374: PUSH
10375: LD_VAR 0 1
10379: PPUSH
10380: CALL_OW 108
10384: AND
10385: IFFALSE 10399
10387: PUSH
10388: LD_VAR 0 1
10392: PUSH
10393: LD_OWVAR 2
10397: NONEQUAL
10398: AND
10399: IFFALSE 10483
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10401: LD_EXP 8
10405: PUSH
10406: LD_VAR 0 1
10410: ARRAY
10411: NOT
10412: IFTRUE 10460
10414: PUSH
10415: LD_EXP 8
10419: PUSH
10420: LD_VAR 0 1
10424: ARRAY
10425: PUSH
10426: LD_EXP 8
10430: PUSH
10431: LD_OWVAR 2
10435: ARRAY
10436: NONEQUAL
10437: IFFALSE 10459
10439: PUSH
10440: LD_OWVAR 2
10444: PPUSH
10445: LD_VAR 0 1
10449: PPUSH
10450: CALL_OW 81
10454: PUSH
10455: LD_INT 1
10457: NONEQUAL
10458: AND
10459: OR
10460: IFFALSE 10483
// if HasPower ( i ) then
10462: LD_VAR 0 1
10466: PPUSH
10467: CALL 10544 0 1
10471: IFFALSE 10483
// begin canWin := false ;
10473: LD_ADDR_VAR 0 2
10477: PUSH
10478: LD_INT 0
10480: ST_TO_ADDR
// break ;
10481: GO 10485
// end ;
10483: GO 10359
10485: POP
10486: POP
// if canWin then
10487: LD_VAR 0 2
10491: IFFALSE 10498
// enable ( mpWin ) else
10493: LD_INT 101
10495: ENABLE_MARKED
10496: GO 10499
// enable ;
10498: ENABLE
// end ; end ;
10499: PPOPN 2
10501: END
// function CanWinLoose ; begin
10502: LD_INT 0
10504: PPUSH
// result := true ;
10505: LD_ADDR_VAR 0 1
10509: PUSH
10510: LD_INT 1
10512: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10513: CALL_OW 531
10517: IFFALSE 10529
10519: PUSH
10520: CALL_OW 519
10524: PUSH
10525: LD_INT 1
10527: GREATER
10528: AND
10529: IFFALSE 10539
// result := false ;
10531: LD_ADDR_VAR 0 1
10535: PUSH
10536: LD_INT 0
10538: ST_TO_ADDR
// end ;
10539: LD_VAR 0 1
10543: RET
// function HasPower ( i ) ; begin
10544: LD_INT 0
10546: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10547: LD_INT 22
10549: PUSH
10550: LD_VAR 0 1
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: LD_INT 2
10561: PUSH
10562: LD_INT 30
10564: PUSH
10565: LD_INT 0
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: LD_INT 30
10574: PUSH
10575: LD_INT 1
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: LIST
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PPUSH
10591: CALL_OW 69
10595: NOT
10596: IFFALSE 10600
// exit ;
10598: GO 10665
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10600: LD_ADDR_VAR 0 2
10604: PUSH
10605: LD_INT 22
10607: PUSH
10608: LD_VAR 0 1
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 2
10619: PUSH
10620: LD_INT 21
10622: PUSH
10623: LD_INT 1
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: PUSH
10630: LD_INT 33
10632: PUSH
10633: LD_INT 3
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PUSH
10640: LD_INT 33
10642: PUSH
10643: LD_INT 5
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: CALL_OW 69
10664: ST_TO_ADDR
// end ; end_of_file
10665: LD_VAR 0 2
10669: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10670: LD_INT 0
10672: PPUSH
10673: PPUSH
// if exist_mode then
10674: LD_VAR 0 2
10678: IFFALSE 10724
// begin unit := CreateCharacter ( prefix & ident ) ;
10680: LD_ADDR_VAR 0 5
10684: PUSH
10685: LD_VAR 0 3
10689: PUSH
10690: LD_VAR 0 1
10694: STR
10695: PPUSH
10696: CALL_OW 34
10700: ST_TO_ADDR
// if unit then
10701: LD_VAR 0 5
10705: IFFALSE 10722
// DeleteCharacters ( prefix & ident ) ;
10707: LD_VAR 0 3
10711: PUSH
10712: LD_VAR 0 1
10716: STR
10717: PPUSH
10718: CALL_OW 40
// end else
10722: GO 10739
// unit := NewCharacter ( ident ) ;
10724: LD_ADDR_VAR 0 5
10728: PUSH
10729: LD_VAR 0 1
10733: PPUSH
10734: CALL_OW 25
10738: ST_TO_ADDR
// result := unit ;
10739: LD_ADDR_VAR 0 4
10743: PUSH
10744: LD_VAR 0 5
10748: ST_TO_ADDR
// end ;
10749: LD_VAR 0 4
10753: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10754: LD_INT 0
10756: PPUSH
10757: PPUSH
// if exist_mode then
10758: LD_VAR 0 2
10762: IFFALSE 10787
// unit := CreateCharacter ( prefix & ident ) else
10764: LD_ADDR_VAR 0 5
10768: PUSH
10769: LD_VAR 0 3
10773: PUSH
10774: LD_VAR 0 1
10778: STR
10779: PPUSH
10780: CALL_OW 34
10784: ST_TO_ADDR
10785: GO 10802
// unit := NewCharacter ( ident ) ;
10787: LD_ADDR_VAR 0 5
10791: PUSH
10792: LD_VAR 0 1
10796: PPUSH
10797: CALL_OW 25
10801: ST_TO_ADDR
// result := unit ;
10802: LD_ADDR_VAR 0 4
10806: PUSH
10807: LD_VAR 0 5
10811: ST_TO_ADDR
// end ;
10812: LD_VAR 0 4
10816: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10817: LD_INT 0
10819: PPUSH
10820: PPUSH
// if not side or not nation then
10821: LD_VAR 0 1
10825: NOT
10826: IFTRUE 10835
10828: PUSH
10829: LD_VAR 0 2
10833: NOT
10834: OR
10835: IFFALSE 10839
// exit ;
10837: GO 11633
// case nation of nation_american :
10839: LD_VAR 0 2
10843: PUSH
10844: LD_INT 1
10846: DOUBLE
10847: EQUAL
10848: IFTRUE 10852
10850: GO 11074
10852: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
10853: LD_ADDR_VAR 0 4
10857: PUSH
10858: LD_INT 35
10860: PUSH
10861: LD_INT 45
10863: PUSH
10864: LD_INT 46
10866: PUSH
10867: LD_INT 47
10869: PUSH
10870: LD_INT 82
10872: PUSH
10873: LD_INT 83
10875: PUSH
10876: LD_INT 84
10878: PUSH
10879: LD_INT 85
10881: PUSH
10882: LD_INT 86
10884: PUSH
10885: LD_INT 1
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: LD_INT 6
10893: PUSH
10894: LD_INT 15
10896: PUSH
10897: LD_INT 16
10899: PUSH
10900: LD_INT 7
10902: PUSH
10903: LD_INT 12
10905: PUSH
10906: LD_INT 13
10908: PUSH
10909: LD_INT 10
10911: PUSH
10912: LD_INT 14
10914: PUSH
10915: LD_INT 20
10917: PUSH
10918: LD_INT 21
10920: PUSH
10921: LD_INT 22
10923: PUSH
10924: LD_INT 25
10926: PUSH
10927: LD_INT 32
10929: PUSH
10930: LD_INT 27
10932: PUSH
10933: LD_INT 36
10935: PUSH
10936: LD_INT 69
10938: PUSH
10939: LD_INT 39
10941: PUSH
10942: LD_INT 34
10944: PUSH
10945: LD_INT 40
10947: PUSH
10948: LD_INT 48
10950: PUSH
10951: LD_INT 49
10953: PUSH
10954: LD_INT 50
10956: PUSH
10957: LD_INT 51
10959: PUSH
10960: LD_INT 52
10962: PUSH
10963: LD_INT 53
10965: PUSH
10966: LD_INT 54
10968: PUSH
10969: LD_INT 55
10971: PUSH
10972: LD_INT 56
10974: PUSH
10975: LD_INT 57
10977: PUSH
10978: LD_INT 58
10980: PUSH
10981: LD_INT 59
10983: PUSH
10984: LD_INT 60
10986: PUSH
10987: LD_INT 61
10989: PUSH
10990: LD_INT 62
10992: PUSH
10993: LD_INT 80
10995: PUSH
10996: LD_INT 82
10998: PUSH
10999: LD_INT 83
11001: PUSH
11002: LD_INT 84
11004: PUSH
11005: LD_INT 85
11007: PUSH
11008: LD_INT 86
11010: PUSH
11011: LD_INT 90
11013: PUSH
11014: LD_INT 93
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: ST_TO_ADDR
11072: GO 11555
11074: LD_INT 2
11076: DOUBLE
11077: EQUAL
11078: IFTRUE 11082
11080: GO 11316
11082: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11083: LD_ADDR_VAR 0 4
11087: PUSH
11088: LD_INT 35
11090: PUSH
11091: LD_INT 45
11093: PUSH
11094: LD_INT 46
11096: PUSH
11097: LD_INT 47
11099: PUSH
11100: LD_INT 82
11102: PUSH
11103: LD_INT 83
11105: PUSH
11106: LD_INT 84
11108: PUSH
11109: LD_INT 85
11111: PUSH
11112: LD_INT 87
11114: PUSH
11115: LD_INT 70
11117: PUSH
11118: LD_INT 1
11120: PUSH
11121: LD_INT 11
11123: PUSH
11124: LD_INT 3
11126: PUSH
11127: LD_INT 4
11129: PUSH
11130: LD_INT 5
11132: PUSH
11133: LD_INT 6
11135: PUSH
11136: LD_INT 15
11138: PUSH
11139: LD_INT 18
11141: PUSH
11142: LD_INT 7
11144: PUSH
11145: LD_INT 17
11147: PUSH
11148: LD_INT 8
11150: PUSH
11151: LD_INT 20
11153: PUSH
11154: LD_INT 21
11156: PUSH
11157: LD_INT 22
11159: PUSH
11160: LD_INT 72
11162: PUSH
11163: LD_INT 26
11165: PUSH
11166: LD_INT 69
11168: PUSH
11169: LD_INT 39
11171: PUSH
11172: LD_INT 40
11174: PUSH
11175: LD_INT 41
11177: PUSH
11178: LD_INT 42
11180: PUSH
11181: LD_INT 43
11183: PUSH
11184: LD_INT 48
11186: PUSH
11187: LD_INT 49
11189: PUSH
11190: LD_INT 50
11192: PUSH
11193: LD_INT 51
11195: PUSH
11196: LD_INT 52
11198: PUSH
11199: LD_INT 53
11201: PUSH
11202: LD_INT 54
11204: PUSH
11205: LD_INT 55
11207: PUSH
11208: LD_INT 56
11210: PUSH
11211: LD_INT 60
11213: PUSH
11214: LD_INT 61
11216: PUSH
11217: LD_INT 62
11219: PUSH
11220: LD_INT 66
11222: PUSH
11223: LD_INT 67
11225: PUSH
11226: LD_INT 68
11228: PUSH
11229: LD_INT 81
11231: PUSH
11232: LD_INT 82
11234: PUSH
11235: LD_INT 83
11237: PUSH
11238: LD_INT 84
11240: PUSH
11241: LD_INT 85
11243: PUSH
11244: LD_INT 87
11246: PUSH
11247: LD_INT 88
11249: PUSH
11250: LD_INT 92
11252: PUSH
11253: LD_INT 94
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: ST_TO_ADDR
11314: GO 11555
11316: LD_INT 3
11318: DOUBLE
11319: EQUAL
11320: IFTRUE 11324
11322: GO 11554
11324: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
11325: LD_ADDR_VAR 0 4
11329: PUSH
11330: LD_INT 46
11332: PUSH
11333: LD_INT 47
11335: PUSH
11336: LD_INT 1
11338: PUSH
11339: LD_INT 2
11341: PUSH
11342: LD_INT 82
11344: PUSH
11345: LD_INT 83
11347: PUSH
11348: LD_INT 84
11350: PUSH
11351: LD_INT 85
11353: PUSH
11354: LD_INT 86
11356: PUSH
11357: LD_INT 11
11359: PUSH
11360: LD_INT 9
11362: PUSH
11363: LD_INT 20
11365: PUSH
11366: LD_INT 19
11368: PUSH
11369: LD_INT 21
11371: PUSH
11372: LD_INT 24
11374: PUSH
11375: LD_INT 22
11377: PUSH
11378: LD_INT 25
11380: PUSH
11381: LD_INT 28
11383: PUSH
11384: LD_INT 29
11386: PUSH
11387: LD_INT 30
11389: PUSH
11390: LD_INT 31
11392: PUSH
11393: LD_INT 37
11395: PUSH
11396: LD_INT 38
11398: PUSH
11399: LD_INT 32
11401: PUSH
11402: LD_INT 27
11404: PUSH
11405: LD_INT 33
11407: PUSH
11408: LD_INT 69
11410: PUSH
11411: LD_INT 39
11413: PUSH
11414: LD_INT 34
11416: PUSH
11417: LD_INT 40
11419: PUSH
11420: LD_INT 71
11422: PUSH
11423: LD_INT 23
11425: PUSH
11426: LD_INT 44
11428: PUSH
11429: LD_INT 48
11431: PUSH
11432: LD_INT 49
11434: PUSH
11435: LD_INT 50
11437: PUSH
11438: LD_INT 51
11440: PUSH
11441: LD_INT 52
11443: PUSH
11444: LD_INT 53
11446: PUSH
11447: LD_INT 54
11449: PUSH
11450: LD_INT 55
11452: PUSH
11453: LD_INT 56
11455: PUSH
11456: LD_INT 57
11458: PUSH
11459: LD_INT 58
11461: PUSH
11462: LD_INT 59
11464: PUSH
11465: LD_INT 63
11467: PUSH
11468: LD_INT 64
11470: PUSH
11471: LD_INT 65
11473: PUSH
11474: LD_INT 82
11476: PUSH
11477: LD_INT 83
11479: PUSH
11480: LD_INT 84
11482: PUSH
11483: LD_INT 85
11485: PUSH
11486: LD_INT 86
11488: PUSH
11489: LD_INT 89
11491: PUSH
11492: LD_INT 91
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: ST_TO_ADDR
11552: GO 11555
11554: POP
// if state > - 1 and state < 3 then
11555: LD_VAR 0 3
11559: PUSH
11560: LD_INT 1
11562: NEG
11563: GREATER
11564: IFFALSE 11576
11566: PUSH
11567: LD_VAR 0 3
11571: PUSH
11572: LD_INT 3
11574: LESS
11575: AND
11576: IFFALSE 11633
// for i in result do
11578: LD_ADDR_VAR 0 5
11582: PUSH
11583: LD_VAR 0 4
11587: PUSH
11588: FOR_IN
11589: IFFALSE 11631
// if GetTech ( i , side ) <> state then
11591: LD_VAR 0 5
11595: PPUSH
11596: LD_VAR 0 1
11600: PPUSH
11601: CALL_OW 321
11605: PUSH
11606: LD_VAR 0 3
11610: NONEQUAL
11611: IFFALSE 11629
// result := result diff i ;
11613: LD_ADDR_VAR 0 4
11617: PUSH
11618: LD_VAR 0 4
11622: PUSH
11623: LD_VAR 0 5
11627: DIFF
11628: ST_TO_ADDR
11629: GO 11588
11631: POP
11632: POP
// end ;
11633: LD_VAR 0 4
11637: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11638: LD_INT 0
11640: PPUSH
11641: PPUSH
11642: PPUSH
// result := true ;
11643: LD_ADDR_VAR 0 3
11647: PUSH
11648: LD_INT 1
11650: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11651: LD_ADDR_VAR 0 5
11655: PUSH
11656: LD_VAR 0 2
11660: PPUSH
11661: CALL_OW 480
11665: ST_TO_ADDR
// if not tmp then
11666: LD_VAR 0 5
11670: NOT
11671: IFFALSE 11675
// exit ;
11673: GO 11724
// for i in tmp do
11675: LD_ADDR_VAR 0 4
11679: PUSH
11680: LD_VAR 0 5
11684: PUSH
11685: FOR_IN
11686: IFFALSE 11722
// if GetTech ( i , side ) <> state_researched then
11688: LD_VAR 0 4
11692: PPUSH
11693: LD_VAR 0 1
11697: PPUSH
11698: CALL_OW 321
11702: PUSH
11703: LD_INT 2
11705: NONEQUAL
11706: IFFALSE 11720
// begin result := false ;
11708: LD_ADDR_VAR 0 3
11712: PUSH
11713: LD_INT 0
11715: ST_TO_ADDR
// exit ;
11716: POP
11717: POP
11718: GO 11724
// end ;
11720: GO 11685
11722: POP
11723: POP
// end ;
11724: LD_VAR 0 3
11728: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11729: LD_INT 0
11731: PPUSH
11732: PPUSH
11733: PPUSH
11734: PPUSH
11735: PPUSH
11736: PPUSH
11737: PPUSH
11738: PPUSH
11739: PPUSH
11740: PPUSH
11741: PPUSH
11742: PPUSH
11743: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11744: LD_VAR 0 1
11748: NOT
11749: IFTRUE 11766
11751: PUSH
11752: LD_VAR 0 1
11756: PPUSH
11757: CALL_OW 257
11761: PUSH
11762: LD_INT 9
11764: NONEQUAL
11765: OR
11766: IFFALSE 11770
// exit ;
11768: GO 12349
// side := GetSide ( unit ) ;
11770: LD_ADDR_VAR 0 9
11774: PUSH
11775: LD_VAR 0 1
11779: PPUSH
11780: CALL_OW 255
11784: ST_TO_ADDR
// tech_space := tech_spacanom ;
11785: LD_ADDR_VAR 0 12
11789: PUSH
11790: LD_INT 29
11792: ST_TO_ADDR
// tech_time := tech_taurad ;
11793: LD_ADDR_VAR 0 13
11797: PUSH
11798: LD_INT 28
11800: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11801: LD_ADDR_VAR 0 11
11805: PUSH
11806: LD_VAR 0 1
11810: PPUSH
11811: CALL_OW 310
11815: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11816: LD_VAR 0 11
11820: PPUSH
11821: CALL_OW 247
11825: PUSH
11826: LD_INT 2
11828: EQUAL
11829: IFFALSE 11833
// exit ;
11831: GO 12349
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11833: LD_ADDR_VAR 0 8
11837: PUSH
11838: LD_INT 81
11840: PUSH
11841: LD_VAR 0 9
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 3
11852: PUSH
11853: LD_INT 21
11855: PUSH
11856: LD_INT 3
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PPUSH
11871: CALL_OW 69
11875: ST_TO_ADDR
// if not tmp then
11876: LD_VAR 0 8
11880: NOT
11881: IFFALSE 11885
// exit ;
11883: GO 12349
// if in_unit then
11885: LD_VAR 0 11
11889: IFFALSE 11913
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11891: LD_ADDR_VAR 0 10
11895: PUSH
11896: LD_VAR 0 8
11900: PPUSH
11901: LD_VAR 0 11
11905: PPUSH
11906: CALL_OW 74
11910: ST_TO_ADDR
11911: GO 11933
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11913: LD_ADDR_VAR 0 10
11917: PUSH
11918: LD_VAR 0 8
11922: PPUSH
11923: LD_VAR 0 1
11927: PPUSH
11928: CALL_OW 74
11932: ST_TO_ADDR
// if not enemy then
11933: LD_VAR 0 10
11937: NOT
11938: IFFALSE 11942
// exit ;
11940: GO 12349
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11942: LD_VAR 0 11
11946: IFFALSE 11968
11948: PUSH
11949: LD_VAR 0 11
11953: PPUSH
11954: LD_VAR 0 10
11958: PPUSH
11959: CALL_OW 296
11963: PUSH
11964: LD_INT 13
11966: GREATER
11967: AND
11968: IFTRUE 11990
11970: PUSH
11971: LD_VAR 0 1
11975: PPUSH
11976: LD_VAR 0 10
11980: PPUSH
11981: CALL_OW 296
11985: PUSH
11986: LD_INT 12
11988: GREATER
11989: OR
11990: IFFALSE 11994
// exit ;
11992: GO 12349
// missile := [ 1 ] ;
11994: LD_ADDR_VAR 0 14
11998: PUSH
11999: LD_INT 1
12001: PUSH
12002: EMPTY
12003: LIST
12004: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12005: LD_VAR 0 9
12009: PPUSH
12010: LD_VAR 0 12
12014: PPUSH
12015: CALL_OW 325
12019: IFFALSE 12048
// missile := Replace ( missile , missile + 1 , 2 ) ;
12021: LD_ADDR_VAR 0 14
12025: PUSH
12026: LD_VAR 0 14
12030: PPUSH
12031: LD_VAR 0 14
12035: PUSH
12036: LD_INT 1
12038: PLUS
12039: PPUSH
12040: LD_INT 2
12042: PPUSH
12043: CALL_OW 1
12047: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12048: LD_VAR 0 9
12052: PPUSH
12053: LD_VAR 0 13
12057: PPUSH
12058: CALL_OW 325
12062: IFFALSE 12086
12064: PUSH
12065: LD_VAR 0 10
12069: PPUSH
12070: CALL_OW 255
12074: PPUSH
12075: LD_VAR 0 13
12079: PPUSH
12080: CALL_OW 325
12084: NOT
12085: AND
12086: IFFALSE 12115
// missile := Replace ( missile , missile + 1 , 3 ) ;
12088: LD_ADDR_VAR 0 14
12092: PUSH
12093: LD_VAR 0 14
12097: PPUSH
12098: LD_VAR 0 14
12102: PUSH
12103: LD_INT 1
12105: PLUS
12106: PPUSH
12107: LD_INT 3
12109: PPUSH
12110: CALL_OW 1
12114: ST_TO_ADDR
// if missile < 2 then
12115: LD_VAR 0 14
12119: PUSH
12120: LD_INT 2
12122: LESS
12123: IFFALSE 12127
// exit ;
12125: GO 12349
// x := GetX ( enemy ) ;
12127: LD_ADDR_VAR 0 4
12131: PUSH
12132: LD_VAR 0 10
12136: PPUSH
12137: CALL_OW 250
12141: ST_TO_ADDR
// y := GetY ( enemy ) ;
12142: LD_ADDR_VAR 0 5
12146: PUSH
12147: LD_VAR 0 10
12151: PPUSH
12152: CALL_OW 251
12156: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12157: LD_ADDR_VAR 0 6
12161: PUSH
12162: LD_VAR 0 4
12166: PUSH
12167: LD_INT 1
12169: NEG
12170: PPUSH
12171: LD_INT 1
12173: PPUSH
12174: CALL_OW 12
12178: PLUS
12179: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12180: LD_ADDR_VAR 0 7
12184: PUSH
12185: LD_VAR 0 5
12189: PUSH
12190: LD_INT 1
12192: NEG
12193: PPUSH
12194: LD_INT 1
12196: PPUSH
12197: CALL_OW 12
12201: PLUS
12202: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12203: LD_VAR 0 6
12207: PPUSH
12208: LD_VAR 0 7
12212: PPUSH
12213: CALL_OW 488
12217: NOT
12218: IFFALSE 12240
// begin _x := x ;
12220: LD_ADDR_VAR 0 6
12224: PUSH
12225: LD_VAR 0 4
12229: ST_TO_ADDR
// _y := y ;
12230: LD_ADDR_VAR 0 7
12234: PUSH
12235: LD_VAR 0 5
12239: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12240: LD_ADDR_VAR 0 3
12244: PUSH
12245: LD_INT 1
12247: PPUSH
12248: LD_VAR 0 14
12252: PPUSH
12253: CALL_OW 12
12257: ST_TO_ADDR
// case i of 1 :
12258: LD_VAR 0 3
12262: PUSH
12263: LD_INT 1
12265: DOUBLE
12266: EQUAL
12267: IFTRUE 12271
12269: GO 12288
12271: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12272: LD_VAR 0 1
12276: PPUSH
12277: LD_VAR 0 10
12281: PPUSH
12282: CALL_OW 115
12286: GO 12349
12288: LD_INT 2
12290: DOUBLE
12291: EQUAL
12292: IFTRUE 12296
12294: GO 12318
12296: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12297: LD_VAR 0 1
12301: PPUSH
12302: LD_VAR 0 6
12306: PPUSH
12307: LD_VAR 0 7
12311: PPUSH
12312: CALL_OW 153
12316: GO 12349
12318: LD_INT 3
12320: DOUBLE
12321: EQUAL
12322: IFTRUE 12326
12324: GO 12348
12326: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12327: LD_VAR 0 1
12331: PPUSH
12332: LD_VAR 0 6
12336: PPUSH
12337: LD_VAR 0 7
12341: PPUSH
12342: CALL_OW 154
12346: GO 12349
12348: POP
// end ;
12349: LD_VAR 0 2
12353: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12354: LD_INT 0
12356: PPUSH
12357: PPUSH
12358: PPUSH
12359: PPUSH
12360: PPUSH
12361: PPUSH
// if not unit or not building then
12362: LD_VAR 0 1
12366: NOT
12367: IFTRUE 12376
12369: PUSH
12370: LD_VAR 0 2
12374: NOT
12375: OR
12376: IFFALSE 12380
// exit ;
12378: GO 12538
// x := GetX ( building ) ;
12380: LD_ADDR_VAR 0 5
12384: PUSH
12385: LD_VAR 0 2
12389: PPUSH
12390: CALL_OW 250
12394: ST_TO_ADDR
// y := GetY ( building ) ;
12395: LD_ADDR_VAR 0 6
12399: PUSH
12400: LD_VAR 0 2
12404: PPUSH
12405: CALL_OW 251
12409: ST_TO_ADDR
// for i := 0 to 5 do
12410: LD_ADDR_VAR 0 4
12414: PUSH
12415: DOUBLE
12416: LD_INT 0
12418: DEC
12419: ST_TO_ADDR
12420: LD_INT 5
12422: PUSH
12423: FOR_TO
12424: IFFALSE 12536
// begin _x := ShiftX ( x , i , 3 ) ;
12426: LD_ADDR_VAR 0 7
12430: PUSH
12431: LD_VAR 0 5
12435: PPUSH
12436: LD_VAR 0 4
12440: PPUSH
12441: LD_INT 3
12443: PPUSH
12444: CALL_OW 272
12448: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12449: LD_ADDR_VAR 0 8
12453: PUSH
12454: LD_VAR 0 6
12458: PPUSH
12459: LD_VAR 0 4
12463: PPUSH
12464: LD_INT 3
12466: PPUSH
12467: CALL_OW 273
12471: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12472: LD_VAR 0 7
12476: PPUSH
12477: LD_VAR 0 8
12481: PPUSH
12482: CALL_OW 488
12486: NOT
12487: IFFALSE 12491
// continue ;
12489: GO 12423
// if HexInfo ( _x , _y ) = 0 then
12491: LD_VAR 0 7
12495: PPUSH
12496: LD_VAR 0 8
12500: PPUSH
12501: CALL_OW 428
12505: PUSH
12506: LD_INT 0
12508: EQUAL
12509: IFFALSE 12534
// begin ComMoveXY ( unit , _x , _y ) ;
12511: LD_VAR 0 1
12515: PPUSH
12516: LD_VAR 0 7
12520: PPUSH
12521: LD_VAR 0 8
12525: PPUSH
12526: CALL_OW 111
// exit ;
12530: POP
12531: POP
12532: GO 12538
// end ; end ;
12534: GO 12423
12536: POP
12537: POP
// end ;
12538: LD_VAR 0 3
12542: RET
// export function ScanBase ( side , base_area ) ; begin
12543: LD_INT 0
12545: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12546: LD_ADDR_VAR 0 3
12550: PUSH
12551: LD_VAR 0 2
12555: PPUSH
12556: LD_INT 81
12558: PUSH
12559: LD_VAR 0 1
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PPUSH
12568: CALL_OW 70
12572: ST_TO_ADDR
// end ;
12573: LD_VAR 0 3
12577: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12578: LD_INT 0
12580: PPUSH
12581: PPUSH
12582: PPUSH
12583: PPUSH
// result := false ;
12584: LD_ADDR_VAR 0 2
12588: PUSH
12589: LD_INT 0
12591: ST_TO_ADDR
// side := GetSide ( unit ) ;
12592: LD_ADDR_VAR 0 3
12596: PUSH
12597: LD_VAR 0 1
12601: PPUSH
12602: CALL_OW 255
12606: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12607: LD_ADDR_VAR 0 4
12611: PUSH
12612: LD_VAR 0 1
12616: PPUSH
12617: CALL_OW 248
12621: ST_TO_ADDR
// case nat of 1 :
12622: LD_VAR 0 4
12626: PUSH
12627: LD_INT 1
12629: DOUBLE
12630: EQUAL
12631: IFTRUE 12635
12633: GO 12646
12635: POP
// tech := tech_lassight ; 2 :
12636: LD_ADDR_VAR 0 5
12640: PUSH
12641: LD_INT 12
12643: ST_TO_ADDR
12644: GO 12685
12646: LD_INT 2
12648: DOUBLE
12649: EQUAL
12650: IFTRUE 12654
12652: GO 12665
12654: POP
// tech := tech_mortar ; 3 :
12655: LD_ADDR_VAR 0 5
12659: PUSH
12660: LD_INT 41
12662: ST_TO_ADDR
12663: GO 12685
12665: LD_INT 3
12667: DOUBLE
12668: EQUAL
12669: IFTRUE 12673
12671: GO 12684
12673: POP
// tech := tech_bazooka ; end ;
12674: LD_ADDR_VAR 0 5
12678: PUSH
12679: LD_INT 44
12681: ST_TO_ADDR
12682: GO 12685
12684: POP
// if Researched ( side , tech ) then
12685: LD_VAR 0 3
12689: PPUSH
12690: LD_VAR 0 5
12694: PPUSH
12695: CALL_OW 325
12699: IFFALSE 12726
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12701: LD_ADDR_VAR 0 2
12705: PUSH
12706: LD_INT 5
12708: PUSH
12709: LD_INT 8
12711: PUSH
12712: LD_INT 9
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: LIST
12719: PUSH
12720: LD_VAR 0 4
12724: ARRAY
12725: ST_TO_ADDR
// end ;
12726: LD_VAR 0 2
12730: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12731: LD_INT 0
12733: PPUSH
12734: PPUSH
12735: PPUSH
// if not mines then
12736: LD_VAR 0 2
12740: NOT
12741: IFFALSE 12745
// exit ;
12743: GO 12889
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12745: LD_ADDR_VAR 0 5
12749: PUSH
12750: LD_INT 81
12752: PUSH
12753: LD_VAR 0 1
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: LD_INT 3
12764: PUSH
12765: LD_INT 21
12767: PUSH
12768: LD_INT 3
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PPUSH
12783: CALL_OW 69
12787: ST_TO_ADDR
// for i in mines do
12788: LD_ADDR_VAR 0 4
12792: PUSH
12793: LD_VAR 0 2
12797: PUSH
12798: FOR_IN
12799: IFFALSE 12887
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12801: LD_VAR 0 4
12805: PUSH
12806: LD_INT 1
12808: ARRAY
12809: PPUSH
12810: LD_VAR 0 4
12814: PUSH
12815: LD_INT 2
12817: ARRAY
12818: PPUSH
12819: CALL_OW 458
12823: NOT
12824: IFFALSE 12828
// continue ;
12826: GO 12798
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12828: LD_VAR 0 4
12832: PUSH
12833: LD_INT 1
12835: ARRAY
12836: PPUSH
12837: LD_VAR 0 4
12841: PUSH
12842: LD_INT 2
12844: ARRAY
12845: PPUSH
12846: CALL_OW 428
12850: PUSH
12851: LD_VAR 0 5
12855: IN
12856: IFFALSE 12885
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12858: LD_VAR 0 4
12862: PUSH
12863: LD_INT 1
12865: ARRAY
12866: PPUSH
12867: LD_VAR 0 4
12871: PUSH
12872: LD_INT 2
12874: ARRAY
12875: PPUSH
12876: LD_VAR 0 1
12880: PPUSH
12881: CALL_OW 456
// end ;
12885: GO 12798
12887: POP
12888: POP
// end ;
12889: LD_VAR 0 3
12893: RET
// export function Count ( array ) ; begin
12894: LD_INT 0
12896: PPUSH
// result := array + 0 ;
12897: LD_ADDR_VAR 0 2
12901: PUSH
12902: LD_VAR 0 1
12906: PUSH
12907: LD_INT 0
12909: PLUS
12910: ST_TO_ADDR
// end ;
12911: LD_VAR 0 2
12915: RET
// export function IsEmpty ( building ) ; begin
12916: LD_INT 0
12918: PPUSH
// if not building then
12919: LD_VAR 0 1
12923: NOT
12924: IFFALSE 12928
// exit ;
12926: GO 12971
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12928: LD_ADDR_VAR 0 2
12932: PUSH
12933: LD_VAR 0 1
12937: PUSH
12938: LD_INT 22
12940: PUSH
12941: LD_VAR 0 1
12945: PPUSH
12946: CALL_OW 255
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: LD_INT 58
12957: PUSH
12958: EMPTY
12959: LIST
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PPUSH
12965: CALL_OW 69
12969: IN
12970: ST_TO_ADDR
// end ;
12971: LD_VAR 0 2
12975: RET
// export function IsNotFull ( building ) ; var places ; begin
12976: LD_INT 0
12978: PPUSH
12979: PPUSH
// if not building then
12980: LD_VAR 0 1
12984: NOT
12985: IFFALSE 12989
// exit ;
12987: GO 13017
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12989: LD_ADDR_VAR 0 2
12993: PUSH
12994: LD_VAR 0 1
12998: PPUSH
12999: LD_INT 3
13001: PUSH
13002: LD_INT 62
13004: PUSH
13005: EMPTY
13006: LIST
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PPUSH
13012: CALL_OW 72
13016: ST_TO_ADDR
// end ;
13017: LD_VAR 0 2
13021: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13022: LD_INT 0
13024: PPUSH
13025: PPUSH
13026: PPUSH
13027: PPUSH
// tmp := [ ] ;
13028: LD_ADDR_VAR 0 3
13032: PUSH
13033: EMPTY
13034: ST_TO_ADDR
// list := [ ] ;
13035: LD_ADDR_VAR 0 5
13039: PUSH
13040: EMPTY
13041: ST_TO_ADDR
// for i = 16 to 25 do
13042: LD_ADDR_VAR 0 4
13046: PUSH
13047: DOUBLE
13048: LD_INT 16
13050: DEC
13051: ST_TO_ADDR
13052: LD_INT 25
13054: PUSH
13055: FOR_TO
13056: IFFALSE 13129
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13058: LD_ADDR_VAR 0 3
13062: PUSH
13063: LD_VAR 0 3
13067: PUSH
13068: LD_INT 22
13070: PUSH
13071: LD_VAR 0 1
13075: PPUSH
13076: CALL_OW 255
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 91
13087: PUSH
13088: LD_VAR 0 1
13092: PUSH
13093: LD_INT 6
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: LIST
13100: PUSH
13101: LD_INT 30
13103: PUSH
13104: LD_VAR 0 4
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: LIST
13117: PUSH
13118: EMPTY
13119: LIST
13120: PPUSH
13121: CALL_OW 69
13125: ADD
13126: ST_TO_ADDR
13127: GO 13055
13129: POP
13130: POP
// for i = 1 to tmp do
13131: LD_ADDR_VAR 0 4
13135: PUSH
13136: DOUBLE
13137: LD_INT 1
13139: DEC
13140: ST_TO_ADDR
13141: LD_VAR 0 3
13145: PUSH
13146: FOR_TO
13147: IFFALSE 13235
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13149: LD_ADDR_VAR 0 5
13153: PUSH
13154: LD_VAR 0 5
13158: PUSH
13159: LD_VAR 0 3
13163: PUSH
13164: LD_VAR 0 4
13168: ARRAY
13169: PPUSH
13170: CALL_OW 266
13174: PUSH
13175: LD_VAR 0 3
13179: PUSH
13180: LD_VAR 0 4
13184: ARRAY
13185: PPUSH
13186: CALL_OW 250
13190: PUSH
13191: LD_VAR 0 3
13195: PUSH
13196: LD_VAR 0 4
13200: ARRAY
13201: PPUSH
13202: CALL_OW 251
13206: PUSH
13207: LD_VAR 0 3
13211: PUSH
13212: LD_VAR 0 4
13216: ARRAY
13217: PPUSH
13218: CALL_OW 254
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: PUSH
13229: EMPTY
13230: LIST
13231: ADD
13232: ST_TO_ADDR
13233: GO 13146
13235: POP
13236: POP
// result := list ;
13237: LD_ADDR_VAR 0 2
13241: PUSH
13242: LD_VAR 0 5
13246: ST_TO_ADDR
// end ;
13247: LD_VAR 0 2
13251: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13252: LD_INT 0
13254: PPUSH
13255: PPUSH
13256: PPUSH
13257: PPUSH
13258: PPUSH
13259: PPUSH
13260: PPUSH
// if not factory then
13261: LD_VAR 0 1
13265: NOT
13266: IFFALSE 13270
// exit ;
13268: GO 13873
// if control = control_apeman then
13270: LD_VAR 0 4
13274: PUSH
13275: LD_INT 5
13277: EQUAL
13278: IFFALSE 13387
// begin tmp := UnitsInside ( factory ) ;
13280: LD_ADDR_VAR 0 8
13284: PUSH
13285: LD_VAR 0 1
13289: PPUSH
13290: CALL_OW 313
13294: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13295: LD_VAR 0 8
13299: PPUSH
13300: LD_INT 25
13302: PUSH
13303: LD_INT 12
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PPUSH
13310: CALL_OW 72
13314: NOT
13315: IFFALSE 13325
// control := control_manual ;
13317: LD_ADDR_VAR 0 4
13321: PUSH
13322: LD_INT 1
13324: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13325: LD_ADDR_VAR 0 8
13329: PUSH
13330: LD_VAR 0 1
13334: PPUSH
13335: CALL 13022 0 1
13339: ST_TO_ADDR
// if tmp then
13340: LD_VAR 0 8
13344: IFFALSE 13387
// begin for i in tmp do
13346: LD_ADDR_VAR 0 7
13350: PUSH
13351: LD_VAR 0 8
13355: PUSH
13356: FOR_IN
13357: IFFALSE 13385
// if i [ 1 ] = b_ext_radio then
13359: LD_VAR 0 7
13363: PUSH
13364: LD_INT 1
13366: ARRAY
13367: PUSH
13368: LD_INT 22
13370: EQUAL
13371: IFFALSE 13383
// begin control := control_remote ;
13373: LD_ADDR_VAR 0 4
13377: PUSH
13378: LD_INT 2
13380: ST_TO_ADDR
// break ;
13381: GO 13385
// end ;
13383: GO 13356
13385: POP
13386: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13387: LD_VAR 0 1
13391: PPUSH
13392: LD_VAR 0 2
13396: PPUSH
13397: LD_VAR 0 3
13401: PPUSH
13402: LD_VAR 0 4
13406: PPUSH
13407: LD_VAR 0 5
13411: PPUSH
13412: CALL_OW 448
13416: IFFALSE 13451
// begin result := [ chassis , engine , control , weapon ] ;
13418: LD_ADDR_VAR 0 6
13422: PUSH
13423: LD_VAR 0 2
13427: PUSH
13428: LD_VAR 0 3
13432: PUSH
13433: LD_VAR 0 4
13437: PUSH
13438: LD_VAR 0 5
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: ST_TO_ADDR
// exit ;
13449: GO 13873
// end ; _chassis := AvailableChassisList ( factory ) ;
13451: LD_ADDR_VAR 0 9
13455: PUSH
13456: LD_VAR 0 1
13460: PPUSH
13461: CALL_OW 475
13465: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13466: LD_ADDR_VAR 0 11
13470: PUSH
13471: LD_VAR 0 1
13475: PPUSH
13476: CALL_OW 476
13480: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13481: LD_ADDR_VAR 0 12
13485: PUSH
13486: LD_VAR 0 1
13490: PPUSH
13491: CALL_OW 477
13495: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13496: LD_ADDR_VAR 0 10
13500: PUSH
13501: LD_VAR 0 1
13505: PPUSH
13506: CALL_OW 478
13510: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13511: LD_VAR 0 9
13515: NOT
13516: IFTRUE 13525
13518: PUSH
13519: LD_VAR 0 11
13523: NOT
13524: OR
13525: IFTRUE 13534
13527: PUSH
13528: LD_VAR 0 12
13532: NOT
13533: OR
13534: IFTRUE 13543
13536: PUSH
13537: LD_VAR 0 10
13541: NOT
13542: OR
13543: IFFALSE 13578
// begin result := [ chassis , engine , control , weapon ] ;
13545: LD_ADDR_VAR 0 6
13549: PUSH
13550: LD_VAR 0 2
13554: PUSH
13555: LD_VAR 0 3
13559: PUSH
13560: LD_VAR 0 4
13564: PUSH
13565: LD_VAR 0 5
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: ST_TO_ADDR
// exit ;
13576: GO 13873
// end ; if not chassis in _chassis then
13578: LD_VAR 0 2
13582: PUSH
13583: LD_VAR 0 9
13587: IN
13588: NOT
13589: IFFALSE 13615
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13591: LD_ADDR_VAR 0 2
13595: PUSH
13596: LD_VAR 0 9
13600: PUSH
13601: LD_INT 1
13603: PPUSH
13604: LD_VAR 0 9
13608: PPUSH
13609: CALL_OW 12
13613: ARRAY
13614: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13615: LD_VAR 0 2
13619: PPUSH
13620: LD_VAR 0 3
13624: PPUSH
13625: CALL 13878 0 2
13629: NOT
13630: IFFALSE 13691
// repeat engine := _engine [ 1 ] ;
13632: LD_ADDR_VAR 0 3
13636: PUSH
13637: LD_VAR 0 11
13641: PUSH
13642: LD_INT 1
13644: ARRAY
13645: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13646: LD_ADDR_VAR 0 11
13650: PUSH
13651: LD_VAR 0 11
13655: PPUSH
13656: LD_INT 1
13658: PPUSH
13659: CALL_OW 3
13663: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13664: LD_VAR 0 2
13668: PPUSH
13669: LD_VAR 0 3
13673: PPUSH
13674: CALL 13878 0 2
13678: IFTRUE 13689
13680: PUSH
13681: LD_VAR 0 11
13685: PUSH
13686: EMPTY
13687: EQUAL
13688: OR
13689: IFFALSE 13632
// if not control in _control then
13691: LD_VAR 0 4
13695: PUSH
13696: LD_VAR 0 12
13700: IN
13701: NOT
13702: IFFALSE 13728
// control := _control [ rand ( 1 , _control ) ] ;
13704: LD_ADDR_VAR 0 4
13708: PUSH
13709: LD_VAR 0 12
13713: PUSH
13714: LD_INT 1
13716: PPUSH
13717: LD_VAR 0 12
13721: PPUSH
13722: CALL_OW 12
13726: ARRAY
13727: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13728: LD_VAR 0 2
13732: PPUSH
13733: LD_VAR 0 5
13737: PPUSH
13738: CALL 14100 0 2
13742: NOT
13743: IFFALSE 13804
// repeat weapon := _weapon [ 1 ] ;
13745: LD_ADDR_VAR 0 5
13749: PUSH
13750: LD_VAR 0 10
13754: PUSH
13755: LD_INT 1
13757: ARRAY
13758: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13759: LD_ADDR_VAR 0 10
13763: PUSH
13764: LD_VAR 0 10
13768: PPUSH
13769: LD_INT 1
13771: PPUSH
13772: CALL_OW 3
13776: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13777: LD_VAR 0 2
13781: PPUSH
13782: LD_VAR 0 5
13786: PPUSH
13787: CALL 14100 0 2
13791: IFTRUE 13802
13793: PUSH
13794: LD_VAR 0 10
13798: PUSH
13799: EMPTY
13800: EQUAL
13801: OR
13802: IFFALSE 13745
// result := [ ] ;
13804: LD_ADDR_VAR 0 6
13808: PUSH
13809: EMPTY
13810: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13811: LD_VAR 0 1
13815: PPUSH
13816: LD_VAR 0 2
13820: PPUSH
13821: LD_VAR 0 3
13825: PPUSH
13826: LD_VAR 0 4
13830: PPUSH
13831: LD_VAR 0 5
13835: PPUSH
13836: CALL_OW 448
13840: IFFALSE 13873
// result := [ chassis , engine , control , weapon ] ;
13842: LD_ADDR_VAR 0 6
13846: PUSH
13847: LD_VAR 0 2
13851: PUSH
13852: LD_VAR 0 3
13856: PUSH
13857: LD_VAR 0 4
13861: PUSH
13862: LD_VAR 0 5
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: ST_TO_ADDR
// end ;
13873: LD_VAR 0 6
13877: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13878: LD_INT 0
13880: PPUSH
// if not chassis or not engine then
13881: LD_VAR 0 1
13885: NOT
13886: IFTRUE 13895
13888: PUSH
13889: LD_VAR 0 2
13893: NOT
13894: OR
13895: IFFALSE 13899
// exit ;
13897: GO 14095
// case engine of engine_solar :
13899: LD_VAR 0 2
13903: PUSH
13904: LD_INT 2
13906: DOUBLE
13907: EQUAL
13908: IFTRUE 13912
13910: GO 13950
13912: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13913: LD_ADDR_VAR 0 3
13917: PUSH
13918: LD_INT 11
13920: PUSH
13921: LD_INT 12
13923: PUSH
13924: LD_INT 13
13926: PUSH
13927: LD_INT 14
13929: PUSH
13930: LD_INT 1
13932: PUSH
13933: LD_INT 2
13935: PUSH
13936: LD_INT 3
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: ST_TO_ADDR
13948: GO 14079
13950: LD_INT 1
13952: DOUBLE
13953: EQUAL
13954: IFTRUE 13958
13956: GO 14020
13958: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13959: LD_ADDR_VAR 0 3
13963: PUSH
13964: LD_INT 11
13966: PUSH
13967: LD_INT 12
13969: PUSH
13970: LD_INT 13
13972: PUSH
13973: LD_INT 14
13975: PUSH
13976: LD_INT 1
13978: PUSH
13979: LD_INT 2
13981: PUSH
13982: LD_INT 3
13984: PUSH
13985: LD_INT 4
13987: PUSH
13988: LD_INT 5
13990: PUSH
13991: LD_INT 21
13993: PUSH
13994: LD_INT 23
13996: PUSH
13997: LD_INT 22
13999: PUSH
14000: LD_INT 24
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: ST_TO_ADDR
14018: GO 14079
14020: LD_INT 3
14022: DOUBLE
14023: EQUAL
14024: IFTRUE 14028
14026: GO 14078
14028: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14029: LD_ADDR_VAR 0 3
14033: PUSH
14034: LD_INT 13
14036: PUSH
14037: LD_INT 14
14039: PUSH
14040: LD_INT 2
14042: PUSH
14043: LD_INT 3
14045: PUSH
14046: LD_INT 4
14048: PUSH
14049: LD_INT 5
14051: PUSH
14052: LD_INT 21
14054: PUSH
14055: LD_INT 22
14057: PUSH
14058: LD_INT 23
14060: PUSH
14061: LD_INT 24
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: ST_TO_ADDR
14076: GO 14079
14078: POP
// result := ( chassis in result ) ;
14079: LD_ADDR_VAR 0 3
14083: PUSH
14084: LD_VAR 0 1
14088: PUSH
14089: LD_VAR 0 3
14093: IN
14094: ST_TO_ADDR
// end ;
14095: LD_VAR 0 3
14099: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14100: LD_INT 0
14102: PPUSH
// if not chassis or not weapon then
14103: LD_VAR 0 1
14107: NOT
14108: IFTRUE 14117
14110: PUSH
14111: LD_VAR 0 2
14115: NOT
14116: OR
14117: IFFALSE 14121
// exit ;
14119: GO 15215
// case weapon of us_machine_gun :
14121: LD_VAR 0 2
14125: PUSH
14126: LD_INT 2
14128: DOUBLE
14129: EQUAL
14130: IFTRUE 14134
14132: GO 14164
14134: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14135: LD_ADDR_VAR 0 3
14139: PUSH
14140: LD_INT 1
14142: PUSH
14143: LD_INT 2
14145: PUSH
14146: LD_INT 3
14148: PUSH
14149: LD_INT 4
14151: PUSH
14152: LD_INT 5
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: ST_TO_ADDR
14162: GO 15199
14164: LD_INT 3
14166: DOUBLE
14167: EQUAL
14168: IFTRUE 14172
14170: GO 14202
14172: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14173: LD_ADDR_VAR 0 3
14177: PUSH
14178: LD_INT 1
14180: PUSH
14181: LD_INT 2
14183: PUSH
14184: LD_INT 3
14186: PUSH
14187: LD_INT 4
14189: PUSH
14190: LD_INT 5
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: ST_TO_ADDR
14200: GO 15199
14202: LD_INT 11
14204: DOUBLE
14205: EQUAL
14206: IFTRUE 14210
14208: GO 14240
14210: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14211: LD_ADDR_VAR 0 3
14215: PUSH
14216: LD_INT 1
14218: PUSH
14219: LD_INT 2
14221: PUSH
14222: LD_INT 3
14224: PUSH
14225: LD_INT 4
14227: PUSH
14228: LD_INT 5
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: ST_TO_ADDR
14238: GO 15199
14240: LD_INT 4
14242: DOUBLE
14243: EQUAL
14244: IFTRUE 14248
14246: GO 14274
14248: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14249: LD_ADDR_VAR 0 3
14253: PUSH
14254: LD_INT 2
14256: PUSH
14257: LD_INT 3
14259: PUSH
14260: LD_INT 4
14262: PUSH
14263: LD_INT 5
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: ST_TO_ADDR
14272: GO 15199
14274: LD_INT 5
14276: DOUBLE
14277: EQUAL
14278: IFTRUE 14282
14280: GO 14308
14282: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14283: LD_ADDR_VAR 0 3
14287: PUSH
14288: LD_INT 2
14290: PUSH
14291: LD_INT 3
14293: PUSH
14294: LD_INT 4
14296: PUSH
14297: LD_INT 5
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: ST_TO_ADDR
14306: GO 15199
14308: LD_INT 9
14310: DOUBLE
14311: EQUAL
14312: IFTRUE 14316
14314: GO 14342
14316: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14317: LD_ADDR_VAR 0 3
14321: PUSH
14322: LD_INT 2
14324: PUSH
14325: LD_INT 3
14327: PUSH
14328: LD_INT 4
14330: PUSH
14331: LD_INT 5
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: ST_TO_ADDR
14340: GO 15199
14342: LD_INT 7
14344: DOUBLE
14345: EQUAL
14346: IFTRUE 14350
14348: GO 14376
14350: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14351: LD_ADDR_VAR 0 3
14355: PUSH
14356: LD_INT 2
14358: PUSH
14359: LD_INT 3
14361: PUSH
14362: LD_INT 4
14364: PUSH
14365: LD_INT 5
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: ST_TO_ADDR
14374: GO 15199
14376: LD_INT 12
14378: DOUBLE
14379: EQUAL
14380: IFTRUE 14384
14382: GO 14410
14384: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14385: LD_ADDR_VAR 0 3
14389: PUSH
14390: LD_INT 2
14392: PUSH
14393: LD_INT 3
14395: PUSH
14396: LD_INT 4
14398: PUSH
14399: LD_INT 5
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: ST_TO_ADDR
14408: GO 15199
14410: LD_INT 13
14412: DOUBLE
14413: EQUAL
14414: IFTRUE 14418
14416: GO 14444
14418: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14419: LD_ADDR_VAR 0 3
14423: PUSH
14424: LD_INT 2
14426: PUSH
14427: LD_INT 3
14429: PUSH
14430: LD_INT 4
14432: PUSH
14433: LD_INT 5
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: ST_TO_ADDR
14442: GO 15199
14444: LD_INT 14
14446: DOUBLE
14447: EQUAL
14448: IFTRUE 14452
14450: GO 14470
14452: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14453: LD_ADDR_VAR 0 3
14457: PUSH
14458: LD_INT 4
14460: PUSH
14461: LD_INT 5
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: ST_TO_ADDR
14468: GO 15199
14470: LD_INT 6
14472: DOUBLE
14473: EQUAL
14474: IFTRUE 14478
14476: GO 14496
14478: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14479: LD_ADDR_VAR 0 3
14483: PUSH
14484: LD_INT 4
14486: PUSH
14487: LD_INT 5
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: ST_TO_ADDR
14494: GO 15199
14496: LD_INT 10
14498: DOUBLE
14499: EQUAL
14500: IFTRUE 14504
14502: GO 14522
14504: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14505: LD_ADDR_VAR 0 3
14509: PUSH
14510: LD_INT 4
14512: PUSH
14513: LD_INT 5
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: ST_TO_ADDR
14520: GO 15199
14522: LD_INT 22
14524: DOUBLE
14525: EQUAL
14526: IFTRUE 14530
14528: GO 14556
14530: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14531: LD_ADDR_VAR 0 3
14535: PUSH
14536: LD_INT 11
14538: PUSH
14539: LD_INT 12
14541: PUSH
14542: LD_INT 13
14544: PUSH
14545: LD_INT 14
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: ST_TO_ADDR
14554: GO 15199
14556: LD_INT 23
14558: DOUBLE
14559: EQUAL
14560: IFTRUE 14564
14562: GO 14590
14564: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14565: LD_ADDR_VAR 0 3
14569: PUSH
14570: LD_INT 11
14572: PUSH
14573: LD_INT 12
14575: PUSH
14576: LD_INT 13
14578: PUSH
14579: LD_INT 14
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: ST_TO_ADDR
14588: GO 15199
14590: LD_INT 24
14592: DOUBLE
14593: EQUAL
14594: IFTRUE 14598
14596: GO 14624
14598: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14599: LD_ADDR_VAR 0 3
14603: PUSH
14604: LD_INT 11
14606: PUSH
14607: LD_INT 12
14609: PUSH
14610: LD_INT 13
14612: PUSH
14613: LD_INT 14
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: ST_TO_ADDR
14622: GO 15199
14624: LD_INT 30
14626: DOUBLE
14627: EQUAL
14628: IFTRUE 14632
14630: GO 14658
14632: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14633: LD_ADDR_VAR 0 3
14637: PUSH
14638: LD_INT 11
14640: PUSH
14641: LD_INT 12
14643: PUSH
14644: LD_INT 13
14646: PUSH
14647: LD_INT 14
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: ST_TO_ADDR
14656: GO 15199
14658: LD_INT 25
14660: DOUBLE
14661: EQUAL
14662: IFTRUE 14666
14664: GO 14684
14666: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14667: LD_ADDR_VAR 0 3
14671: PUSH
14672: LD_INT 13
14674: PUSH
14675: LD_INT 14
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: ST_TO_ADDR
14682: GO 15199
14684: LD_INT 27
14686: DOUBLE
14687: EQUAL
14688: IFTRUE 14692
14690: GO 14710
14692: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14693: LD_ADDR_VAR 0 3
14697: PUSH
14698: LD_INT 13
14700: PUSH
14701: LD_INT 14
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: ST_TO_ADDR
14708: GO 15199
14710: LD_INT 92
14712: DOUBLE
14713: EQUAL
14714: IFTRUE 14718
14716: GO 14744
14718: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14719: LD_ADDR_VAR 0 3
14723: PUSH
14724: LD_INT 11
14726: PUSH
14727: LD_INT 12
14729: PUSH
14730: LD_INT 13
14732: PUSH
14733: LD_INT 14
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: ST_TO_ADDR
14742: GO 15199
14744: LD_INT 28
14746: DOUBLE
14747: EQUAL
14748: IFTRUE 14752
14750: GO 14770
14752: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14753: LD_ADDR_VAR 0 3
14757: PUSH
14758: LD_INT 13
14760: PUSH
14761: LD_INT 14
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: ST_TO_ADDR
14768: GO 15199
14770: LD_INT 29
14772: DOUBLE
14773: EQUAL
14774: IFTRUE 14778
14776: GO 14796
14778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14779: LD_ADDR_VAR 0 3
14783: PUSH
14784: LD_INT 13
14786: PUSH
14787: LD_INT 14
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: ST_TO_ADDR
14794: GO 15199
14796: LD_INT 31
14798: DOUBLE
14799: EQUAL
14800: IFTRUE 14804
14802: GO 14822
14804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14805: LD_ADDR_VAR 0 3
14809: PUSH
14810: LD_INT 13
14812: PUSH
14813: LD_INT 14
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: ST_TO_ADDR
14820: GO 15199
14822: LD_INT 26
14824: DOUBLE
14825: EQUAL
14826: IFTRUE 14830
14828: GO 14848
14830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14831: LD_ADDR_VAR 0 3
14835: PUSH
14836: LD_INT 13
14838: PUSH
14839: LD_INT 14
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: ST_TO_ADDR
14846: GO 15199
14848: LD_INT 42
14850: DOUBLE
14851: EQUAL
14852: IFTRUE 14856
14854: GO 14882
14856: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14857: LD_ADDR_VAR 0 3
14861: PUSH
14862: LD_INT 21
14864: PUSH
14865: LD_INT 22
14867: PUSH
14868: LD_INT 23
14870: PUSH
14871: LD_INT 24
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: ST_TO_ADDR
14880: GO 15199
14882: LD_INT 43
14884: DOUBLE
14885: EQUAL
14886: IFTRUE 14890
14888: GO 14916
14890: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14891: LD_ADDR_VAR 0 3
14895: PUSH
14896: LD_INT 21
14898: PUSH
14899: LD_INT 22
14901: PUSH
14902: LD_INT 23
14904: PUSH
14905: LD_INT 24
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: ST_TO_ADDR
14914: GO 15199
14916: LD_INT 44
14918: DOUBLE
14919: EQUAL
14920: IFTRUE 14924
14922: GO 14950
14924: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14925: LD_ADDR_VAR 0 3
14929: PUSH
14930: LD_INT 21
14932: PUSH
14933: LD_INT 22
14935: PUSH
14936: LD_INT 23
14938: PUSH
14939: LD_INT 24
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: ST_TO_ADDR
14948: GO 15199
14950: LD_INT 45
14952: DOUBLE
14953: EQUAL
14954: IFTRUE 14958
14956: GO 14984
14958: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14959: LD_ADDR_VAR 0 3
14963: PUSH
14964: LD_INT 21
14966: PUSH
14967: LD_INT 22
14969: PUSH
14970: LD_INT 23
14972: PUSH
14973: LD_INT 24
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: ST_TO_ADDR
14982: GO 15199
14984: LD_INT 49
14986: DOUBLE
14987: EQUAL
14988: IFTRUE 14992
14990: GO 15018
14992: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14993: LD_ADDR_VAR 0 3
14997: PUSH
14998: LD_INT 21
15000: PUSH
15001: LD_INT 22
15003: PUSH
15004: LD_INT 23
15006: PUSH
15007: LD_INT 24
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: ST_TO_ADDR
15016: GO 15199
15018: LD_INT 51
15020: DOUBLE
15021: EQUAL
15022: IFTRUE 15026
15024: GO 15052
15026: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15027: LD_ADDR_VAR 0 3
15031: PUSH
15032: LD_INT 21
15034: PUSH
15035: LD_INT 22
15037: PUSH
15038: LD_INT 23
15040: PUSH
15041: LD_INT 24
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: ST_TO_ADDR
15050: GO 15199
15052: LD_INT 52
15054: DOUBLE
15055: EQUAL
15056: IFTRUE 15060
15058: GO 15086
15060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15061: LD_ADDR_VAR 0 3
15065: PUSH
15066: LD_INT 21
15068: PUSH
15069: LD_INT 22
15071: PUSH
15072: LD_INT 23
15074: PUSH
15075: LD_INT 24
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: ST_TO_ADDR
15084: GO 15199
15086: LD_INT 53
15088: DOUBLE
15089: EQUAL
15090: IFTRUE 15094
15092: GO 15112
15094: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15095: LD_ADDR_VAR 0 3
15099: PUSH
15100: LD_INT 23
15102: PUSH
15103: LD_INT 24
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: ST_TO_ADDR
15110: GO 15199
15112: LD_INT 46
15114: DOUBLE
15115: EQUAL
15116: IFTRUE 15120
15118: GO 15138
15120: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15121: LD_ADDR_VAR 0 3
15125: PUSH
15126: LD_INT 23
15128: PUSH
15129: LD_INT 24
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: ST_TO_ADDR
15136: GO 15199
15138: LD_INT 47
15140: DOUBLE
15141: EQUAL
15142: IFTRUE 15146
15144: GO 15164
15146: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15147: LD_ADDR_VAR 0 3
15151: PUSH
15152: LD_INT 23
15154: PUSH
15155: LD_INT 24
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: ST_TO_ADDR
15162: GO 15199
15164: LD_INT 98
15166: DOUBLE
15167: EQUAL
15168: IFTRUE 15172
15170: GO 15198
15172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15173: LD_ADDR_VAR 0 3
15177: PUSH
15178: LD_INT 21
15180: PUSH
15181: LD_INT 22
15183: PUSH
15184: LD_INT 23
15186: PUSH
15187: LD_INT 24
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: ST_TO_ADDR
15196: GO 15199
15198: POP
// result := ( chassis in result ) ;
15199: LD_ADDR_VAR 0 3
15203: PUSH
15204: LD_VAR 0 1
15208: PUSH
15209: LD_VAR 0 3
15213: IN
15214: ST_TO_ADDR
// end ;
15215: LD_VAR 0 3
15219: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15220: LD_INT 0
15222: PPUSH
15223: PPUSH
15224: PPUSH
15225: PPUSH
15226: PPUSH
15227: PPUSH
15228: PPUSH
// result := array ;
15229: LD_ADDR_VAR 0 5
15233: PUSH
15234: LD_VAR 0 1
15238: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15239: LD_VAR 0 1
15243: NOT
15244: IFTRUE 15253
15246: PUSH
15247: LD_VAR 0 2
15251: NOT
15252: OR
15253: IFTRUE 15262
15255: PUSH
15256: LD_VAR 0 3
15260: NOT
15261: OR
15262: IFTRUE 15276
15264: PUSH
15265: LD_VAR 0 2
15269: PUSH
15270: LD_VAR 0 1
15274: GREATER
15275: OR
15276: IFTRUE 15290
15278: PUSH
15279: LD_VAR 0 3
15283: PUSH
15284: LD_VAR 0 1
15288: GREATER
15289: OR
15290: IFFALSE 15294
// exit ;
15292: GO 15590
// if direction then
15294: LD_VAR 0 4
15298: IFFALSE 15362
// begin d := 1 ;
15300: LD_ADDR_VAR 0 9
15304: PUSH
15305: LD_INT 1
15307: ST_TO_ADDR
// if i_from > i_to then
15308: LD_VAR 0 2
15312: PUSH
15313: LD_VAR 0 3
15317: GREATER
15318: IFFALSE 15344
// length := ( array - i_from ) + i_to else
15320: LD_ADDR_VAR 0 11
15324: PUSH
15325: LD_VAR 0 1
15329: PUSH
15330: LD_VAR 0 2
15334: MINUS
15335: PUSH
15336: LD_VAR 0 3
15340: PLUS
15341: ST_TO_ADDR
15342: GO 15360
// length := i_to - i_from ;
15344: LD_ADDR_VAR 0 11
15348: PUSH
15349: LD_VAR 0 3
15353: PUSH
15354: LD_VAR 0 2
15358: MINUS
15359: ST_TO_ADDR
// end else
15360: GO 15423
// begin d := - 1 ;
15362: LD_ADDR_VAR 0 9
15366: PUSH
15367: LD_INT 1
15369: NEG
15370: ST_TO_ADDR
// if i_from > i_to then
15371: LD_VAR 0 2
15375: PUSH
15376: LD_VAR 0 3
15380: GREATER
15381: IFFALSE 15401
// length := i_from - i_to else
15383: LD_ADDR_VAR 0 11
15387: PUSH
15388: LD_VAR 0 2
15392: PUSH
15393: LD_VAR 0 3
15397: MINUS
15398: ST_TO_ADDR
15399: GO 15423
// length := ( array - i_to ) + i_from ;
15401: LD_ADDR_VAR 0 11
15405: PUSH
15406: LD_VAR 0 1
15410: PUSH
15411: LD_VAR 0 3
15415: MINUS
15416: PUSH
15417: LD_VAR 0 2
15421: PLUS
15422: ST_TO_ADDR
// end ; if not length then
15423: LD_VAR 0 11
15427: NOT
15428: IFFALSE 15432
// exit ;
15430: GO 15590
// tmp := array ;
15432: LD_ADDR_VAR 0 10
15436: PUSH
15437: LD_VAR 0 1
15441: ST_TO_ADDR
// for i = 1 to length do
15442: LD_ADDR_VAR 0 6
15446: PUSH
15447: DOUBLE
15448: LD_INT 1
15450: DEC
15451: ST_TO_ADDR
15452: LD_VAR 0 11
15456: PUSH
15457: FOR_TO
15458: IFFALSE 15578
// begin for j = 1 to array do
15460: LD_ADDR_VAR 0 7
15464: PUSH
15465: DOUBLE
15466: LD_INT 1
15468: DEC
15469: ST_TO_ADDR
15470: LD_VAR 0 1
15474: PUSH
15475: FOR_TO
15476: IFFALSE 15564
// begin k := j + d ;
15478: LD_ADDR_VAR 0 8
15482: PUSH
15483: LD_VAR 0 7
15487: PUSH
15488: LD_VAR 0 9
15492: PLUS
15493: ST_TO_ADDR
// if k > array then
15494: LD_VAR 0 8
15498: PUSH
15499: LD_VAR 0 1
15503: GREATER
15504: IFFALSE 15514
// k := 1 ;
15506: LD_ADDR_VAR 0 8
15510: PUSH
15511: LD_INT 1
15513: ST_TO_ADDR
// if not k then
15514: LD_VAR 0 8
15518: NOT
15519: IFFALSE 15531
// k := array ;
15521: LD_ADDR_VAR 0 8
15525: PUSH
15526: LD_VAR 0 1
15530: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15531: LD_ADDR_VAR 0 10
15535: PUSH
15536: LD_VAR 0 10
15540: PPUSH
15541: LD_VAR 0 8
15545: PPUSH
15546: LD_VAR 0 1
15550: PUSH
15551: LD_VAR 0 7
15555: ARRAY
15556: PPUSH
15557: CALL_OW 1
15561: ST_TO_ADDR
// end ;
15562: GO 15475
15564: POP
15565: POP
// array := tmp ;
15566: LD_ADDR_VAR 0 1
15570: PUSH
15571: LD_VAR 0 10
15575: ST_TO_ADDR
// end ;
15576: GO 15457
15578: POP
15579: POP
// result := array ;
15580: LD_ADDR_VAR 0 5
15584: PUSH
15585: LD_VAR 0 1
15589: ST_TO_ADDR
// end ;
15590: LD_VAR 0 5
15594: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15595: LD_INT 0
15597: PPUSH
15598: PPUSH
// result := 0 ;
15599: LD_ADDR_VAR 0 3
15603: PUSH
15604: LD_INT 0
15606: ST_TO_ADDR
// if not array or not value in array then
15607: LD_VAR 0 1
15611: NOT
15612: IFTRUE 15627
15614: PUSH
15615: LD_VAR 0 2
15619: PUSH
15620: LD_VAR 0 1
15624: IN
15625: NOT
15626: OR
15627: IFFALSE 15631
// exit ;
15629: GO 15685
// for i = 1 to array do
15631: LD_ADDR_VAR 0 4
15635: PUSH
15636: DOUBLE
15637: LD_INT 1
15639: DEC
15640: ST_TO_ADDR
15641: LD_VAR 0 1
15645: PUSH
15646: FOR_TO
15647: IFFALSE 15683
// if value = array [ i ] then
15649: LD_VAR 0 2
15653: PUSH
15654: LD_VAR 0 1
15658: PUSH
15659: LD_VAR 0 4
15663: ARRAY
15664: EQUAL
15665: IFFALSE 15681
// begin result := i ;
15667: LD_ADDR_VAR 0 3
15671: PUSH
15672: LD_VAR 0 4
15676: ST_TO_ADDR
// exit ;
15677: POP
15678: POP
15679: GO 15685
// end ;
15681: GO 15646
15683: POP
15684: POP
// end ;
15685: LD_VAR 0 3
15689: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15690: LD_INT 0
15692: PPUSH
// vc_chassis := chassis ;
15693: LD_ADDR_OWVAR 37
15697: PUSH
15698: LD_VAR 0 1
15702: ST_TO_ADDR
// vc_engine := engine ;
15703: LD_ADDR_OWVAR 39
15707: PUSH
15708: LD_VAR 0 2
15712: ST_TO_ADDR
// vc_control := control ;
15713: LD_ADDR_OWVAR 38
15717: PUSH
15718: LD_VAR 0 3
15722: ST_TO_ADDR
// vc_weapon := weapon ;
15723: LD_ADDR_OWVAR 40
15727: PUSH
15728: LD_VAR 0 4
15732: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15733: LD_ADDR_OWVAR 41
15737: PUSH
15738: LD_VAR 0 5
15742: ST_TO_ADDR
// end ;
15743: LD_VAR 0 6
15747: RET
// export function WantPlant ( unit ) ; var task ; begin
15748: LD_INT 0
15750: PPUSH
15751: PPUSH
// result := false ;
15752: LD_ADDR_VAR 0 2
15756: PUSH
15757: LD_INT 0
15759: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15760: LD_ADDR_VAR 0 3
15764: PUSH
15765: LD_VAR 0 1
15769: PPUSH
15770: CALL_OW 437
15774: ST_TO_ADDR
// if task then
15775: LD_VAR 0 3
15779: IFFALSE 15807
// if task [ 1 ] [ 1 ] = p then
15781: LD_VAR 0 3
15785: PUSH
15786: LD_INT 1
15788: ARRAY
15789: PUSH
15790: LD_INT 1
15792: ARRAY
15793: PUSH
15794: LD_STRING p
15796: EQUAL
15797: IFFALSE 15807
// result := true ;
15799: LD_ADDR_VAR 0 2
15803: PUSH
15804: LD_INT 1
15806: ST_TO_ADDR
// end ;
15807: LD_VAR 0 2
15811: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15812: LD_INT 0
15814: PPUSH
15815: PPUSH
15816: PPUSH
15817: PPUSH
// if pos < 1 then
15818: LD_VAR 0 2
15822: PUSH
15823: LD_INT 1
15825: LESS
15826: IFFALSE 15830
// exit ;
15828: GO 16133
// if pos = 1 then
15830: LD_VAR 0 2
15834: PUSH
15835: LD_INT 1
15837: EQUAL
15838: IFFALSE 15871
// result := Replace ( arr , pos [ 1 ] , value ) else
15840: LD_ADDR_VAR 0 4
15844: PUSH
15845: LD_VAR 0 1
15849: PPUSH
15850: LD_VAR 0 2
15854: PUSH
15855: LD_INT 1
15857: ARRAY
15858: PPUSH
15859: LD_VAR 0 3
15863: PPUSH
15864: CALL_OW 1
15868: ST_TO_ADDR
15869: GO 16133
// begin tmp := arr ;
15871: LD_ADDR_VAR 0 6
15875: PUSH
15876: LD_VAR 0 1
15880: ST_TO_ADDR
// s_arr := [ tmp ] ;
15881: LD_ADDR_VAR 0 7
15885: PUSH
15886: LD_VAR 0 6
15890: PUSH
15891: EMPTY
15892: LIST
15893: ST_TO_ADDR
// for i = 1 to pos - 1 do
15894: LD_ADDR_VAR 0 5
15898: PUSH
15899: DOUBLE
15900: LD_INT 1
15902: DEC
15903: ST_TO_ADDR
15904: LD_VAR 0 2
15908: PUSH
15909: LD_INT 1
15911: MINUS
15912: PUSH
15913: FOR_TO
15914: IFFALSE 15959
// begin tmp := tmp [ pos [ i ] ] ;
15916: LD_ADDR_VAR 0 6
15920: PUSH
15921: LD_VAR 0 6
15925: PUSH
15926: LD_VAR 0 2
15930: PUSH
15931: LD_VAR 0 5
15935: ARRAY
15936: ARRAY
15937: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15938: LD_ADDR_VAR 0 7
15942: PUSH
15943: LD_VAR 0 7
15947: PUSH
15948: LD_VAR 0 6
15952: PUSH
15953: EMPTY
15954: LIST
15955: ADD
15956: ST_TO_ADDR
// end ;
15957: GO 15913
15959: POP
15960: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15961: LD_ADDR_VAR 0 6
15965: PUSH
15966: LD_VAR 0 6
15970: PPUSH
15971: LD_VAR 0 2
15975: PUSH
15976: LD_VAR 0 2
15980: ARRAY
15981: PPUSH
15982: LD_VAR 0 3
15986: PPUSH
15987: CALL_OW 1
15991: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15992: LD_ADDR_VAR 0 7
15996: PUSH
15997: LD_VAR 0 7
16001: PPUSH
16002: LD_VAR 0 7
16006: PPUSH
16007: LD_VAR 0 6
16011: PPUSH
16012: CALL_OW 1
16016: ST_TO_ADDR
// for i = s_arr downto 2 do
16017: LD_ADDR_VAR 0 5
16021: PUSH
16022: DOUBLE
16023: LD_VAR 0 7
16027: INC
16028: ST_TO_ADDR
16029: LD_INT 2
16031: PUSH
16032: FOR_DOWNTO
16033: IFFALSE 16117
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16035: LD_ADDR_VAR 0 6
16039: PUSH
16040: LD_VAR 0 7
16044: PUSH
16045: LD_VAR 0 5
16049: PUSH
16050: LD_INT 1
16052: MINUS
16053: ARRAY
16054: PPUSH
16055: LD_VAR 0 2
16059: PUSH
16060: LD_VAR 0 5
16064: PUSH
16065: LD_INT 1
16067: MINUS
16068: ARRAY
16069: PPUSH
16070: LD_VAR 0 7
16074: PUSH
16075: LD_VAR 0 5
16079: ARRAY
16080: PPUSH
16081: CALL_OW 1
16085: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16086: LD_ADDR_VAR 0 7
16090: PUSH
16091: LD_VAR 0 7
16095: PPUSH
16096: LD_VAR 0 5
16100: PUSH
16101: LD_INT 1
16103: MINUS
16104: PPUSH
16105: LD_VAR 0 6
16109: PPUSH
16110: CALL_OW 1
16114: ST_TO_ADDR
// end ;
16115: GO 16032
16117: POP
16118: POP
// result := s_arr [ 1 ] ;
16119: LD_ADDR_VAR 0 4
16123: PUSH
16124: LD_VAR 0 7
16128: PUSH
16129: LD_INT 1
16131: ARRAY
16132: ST_TO_ADDR
// end ; end ;
16133: LD_VAR 0 4
16137: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16138: LD_INT 0
16140: PPUSH
16141: PPUSH
// if not list then
16142: LD_VAR 0 1
16146: NOT
16147: IFFALSE 16151
// exit ;
16149: GO 16242
// i := list [ pos1 ] ;
16151: LD_ADDR_VAR 0 5
16155: PUSH
16156: LD_VAR 0 1
16160: PUSH
16161: LD_VAR 0 2
16165: ARRAY
16166: ST_TO_ADDR
// if not i then
16167: LD_VAR 0 5
16171: NOT
16172: IFFALSE 16176
// exit ;
16174: GO 16242
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16176: LD_ADDR_VAR 0 1
16180: PUSH
16181: LD_VAR 0 1
16185: PPUSH
16186: LD_VAR 0 2
16190: PPUSH
16191: LD_VAR 0 1
16195: PUSH
16196: LD_VAR 0 3
16200: ARRAY
16201: PPUSH
16202: CALL_OW 1
16206: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16207: LD_ADDR_VAR 0 1
16211: PUSH
16212: LD_VAR 0 1
16216: PPUSH
16217: LD_VAR 0 3
16221: PPUSH
16222: LD_VAR 0 5
16226: PPUSH
16227: CALL_OW 1
16231: ST_TO_ADDR
// result := list ;
16232: LD_ADDR_VAR 0 4
16236: PUSH
16237: LD_VAR 0 1
16241: ST_TO_ADDR
// end ;
16242: LD_VAR 0 4
16246: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16247: LD_INT 0
16249: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16250: LD_ADDR_VAR 0 5
16254: PUSH
16255: LD_VAR 0 1
16259: PPUSH
16260: CALL_OW 250
16264: PPUSH
16265: LD_VAR 0 1
16269: PPUSH
16270: CALL_OW 251
16274: PPUSH
16275: LD_VAR 0 2
16279: PPUSH
16280: LD_VAR 0 3
16284: PPUSH
16285: LD_VAR 0 4
16289: PPUSH
16290: CALL 16672 0 5
16294: ST_TO_ADDR
// end ;
16295: LD_VAR 0 5
16299: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16300: LD_INT 0
16302: PPUSH
16303: PPUSH
16304: PPUSH
16305: PPUSH
// if not list or not unit then
16306: LD_VAR 0 2
16310: NOT
16311: IFTRUE 16320
16313: PUSH
16314: LD_VAR 0 1
16318: NOT
16319: OR
16320: IFFALSE 16324
// exit ;
16322: GO 16667
// result := [ ] ;
16324: LD_ADDR_VAR 0 5
16328: PUSH
16329: EMPTY
16330: ST_TO_ADDR
// for i in list do
16331: LD_ADDR_VAR 0 6
16335: PUSH
16336: LD_VAR 0 2
16340: PUSH
16341: FOR_IN
16342: IFFALSE 16560
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
16344: LD_ADDR_VAR 0 8
16348: PUSH
16349: LD_VAR 0 1
16353: PPUSH
16354: LD_VAR 0 6
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: LD_VAR 0 6
16367: PUSH
16368: LD_INT 2
16370: ARRAY
16371: PPUSH
16372: CALL_OW 297
16376: ST_TO_ADDR
// if not Count ( result ) then
16377: LD_VAR 0 5
16381: PPUSH
16382: CALL 12894 0 1
16386: NOT
16387: IFFALSE 16420
// begin result := Join ( result , [ i , tmp ] ) ;
16389: LD_ADDR_VAR 0 5
16393: PUSH
16394: LD_VAR 0 5
16398: PPUSH
16399: LD_VAR 0 6
16403: PUSH
16404: LD_VAR 0 8
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PPUSH
16413: CALL 48860 0 2
16417: ST_TO_ADDR
// continue ;
16418: GO 16341
// end ; if result [ result ] [ 2 ] <= tmp then
16420: LD_VAR 0 5
16424: PUSH
16425: LD_VAR 0 5
16429: ARRAY
16430: PUSH
16431: LD_INT 2
16433: ARRAY
16434: PUSH
16435: LD_VAR 0 8
16439: LESSEQUAL
16440: IFFALSE 16473
// result := Join ( result , [ i , tmp ] ) else
16442: LD_ADDR_VAR 0 5
16446: PUSH
16447: LD_VAR 0 5
16451: PPUSH
16452: LD_VAR 0 6
16456: PUSH
16457: LD_VAR 0 8
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PPUSH
16466: CALL 48860 0 2
16470: ST_TO_ADDR
16471: GO 16558
// begin for j := 1 to Count ( result ) do
16473: LD_ADDR_VAR 0 7
16477: PUSH
16478: DOUBLE
16479: LD_INT 1
16481: DEC
16482: ST_TO_ADDR
16483: LD_VAR 0 5
16487: PPUSH
16488: CALL 12894 0 1
16492: PUSH
16493: FOR_TO
16494: IFFALSE 16556
// begin if tmp < result [ j ] [ 2 ] then
16496: LD_VAR 0 8
16500: PUSH
16501: LD_VAR 0 5
16505: PUSH
16506: LD_VAR 0 7
16510: ARRAY
16511: PUSH
16512: LD_INT 2
16514: ARRAY
16515: LESS
16516: IFFALSE 16554
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16518: LD_ADDR_VAR 0 5
16522: PUSH
16523: LD_VAR 0 5
16527: PPUSH
16528: LD_VAR 0 7
16532: PPUSH
16533: LD_VAR 0 6
16537: PUSH
16538: LD_VAR 0 8
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PPUSH
16547: CALL_OW 2
16551: ST_TO_ADDR
// break ;
16552: GO 16556
// end ; end ;
16554: GO 16493
16556: POP
16557: POP
// end ; end ;
16558: GO 16341
16560: POP
16561: POP
// if result and not asc then
16562: LD_VAR 0 5
16566: IFFALSE 16575
16568: PUSH
16569: LD_VAR 0 3
16573: NOT
16574: AND
16575: IFFALSE 16592
// result := ReverseArray ( result ) ;
16577: LD_ADDR_VAR 0 5
16581: PUSH
16582: LD_VAR 0 5
16586: PPUSH
16587: CALL 43950 0 1
16591: ST_TO_ADDR
// tmp := [ ] ;
16592: LD_ADDR_VAR 0 8
16596: PUSH
16597: EMPTY
16598: ST_TO_ADDR
// if mode then
16599: LD_VAR 0 4
16603: IFFALSE 16667
// begin for i := 1 to result do
16605: LD_ADDR_VAR 0 6
16609: PUSH
16610: DOUBLE
16611: LD_INT 1
16613: DEC
16614: ST_TO_ADDR
16615: LD_VAR 0 5
16619: PUSH
16620: FOR_TO
16621: IFFALSE 16655
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
16623: LD_ADDR_VAR 0 8
16627: PUSH
16628: LD_VAR 0 8
16632: PPUSH
16633: LD_VAR 0 5
16637: PUSH
16638: LD_VAR 0 6
16642: ARRAY
16643: PUSH
16644: LD_INT 1
16646: ARRAY
16647: PPUSH
16648: CALL 48860 0 2
16652: ST_TO_ADDR
16653: GO 16620
16655: POP
16656: POP
// result := tmp ;
16657: LD_ADDR_VAR 0 5
16661: PUSH
16662: LD_VAR 0 8
16666: ST_TO_ADDR
// end ; end ;
16667: LD_VAR 0 5
16671: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16672: LD_INT 0
16674: PPUSH
16675: PPUSH
16676: PPUSH
16677: PPUSH
// if not list then
16678: LD_VAR 0 3
16682: NOT
16683: IFFALSE 16687
// exit ;
16685: GO 17077
// result := [ ] ;
16687: LD_ADDR_VAR 0 6
16691: PUSH
16692: EMPTY
16693: ST_TO_ADDR
// for i in list do
16694: LD_ADDR_VAR 0 7
16698: PUSH
16699: LD_VAR 0 3
16703: PUSH
16704: FOR_IN
16705: IFFALSE 16907
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16707: LD_ADDR_VAR 0 9
16711: PUSH
16712: LD_VAR 0 7
16716: PPUSH
16717: LD_VAR 0 1
16721: PPUSH
16722: LD_VAR 0 2
16726: PPUSH
16727: CALL_OW 297
16731: ST_TO_ADDR
// if not result then
16732: LD_VAR 0 6
16736: NOT
16737: IFFALSE 16763
// result := [ [ i , tmp ] ] else
16739: LD_ADDR_VAR 0 6
16743: PUSH
16744: LD_VAR 0 7
16748: PUSH
16749: LD_VAR 0 9
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: EMPTY
16759: LIST
16760: ST_TO_ADDR
16761: GO 16905
// begin if result [ result ] [ 2 ] <= tmp then
16763: LD_VAR 0 6
16767: PUSH
16768: LD_VAR 0 6
16772: ARRAY
16773: PUSH
16774: LD_INT 2
16776: ARRAY
16777: PUSH
16778: LD_VAR 0 9
16782: LESSEQUAL
16783: IFFALSE 16825
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16785: LD_ADDR_VAR 0 6
16789: PUSH
16790: LD_VAR 0 6
16794: PPUSH
16795: LD_VAR 0 6
16799: PUSH
16800: LD_INT 1
16802: PLUS
16803: PPUSH
16804: LD_VAR 0 7
16808: PUSH
16809: LD_VAR 0 9
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PPUSH
16818: CALL_OW 2
16822: ST_TO_ADDR
16823: GO 16905
// for j := 1 to result do
16825: LD_ADDR_VAR 0 8
16829: PUSH
16830: DOUBLE
16831: LD_INT 1
16833: DEC
16834: ST_TO_ADDR
16835: LD_VAR 0 6
16839: PUSH
16840: FOR_TO
16841: IFFALSE 16903
// begin if tmp < result [ j ] [ 2 ] then
16843: LD_VAR 0 9
16847: PUSH
16848: LD_VAR 0 6
16852: PUSH
16853: LD_VAR 0 8
16857: ARRAY
16858: PUSH
16859: LD_INT 2
16861: ARRAY
16862: LESS
16863: IFFALSE 16901
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16865: LD_ADDR_VAR 0 6
16869: PUSH
16870: LD_VAR 0 6
16874: PPUSH
16875: LD_VAR 0 8
16879: PPUSH
16880: LD_VAR 0 7
16884: PUSH
16885: LD_VAR 0 9
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PPUSH
16894: CALL_OW 2
16898: ST_TO_ADDR
// break ;
16899: GO 16903
// end ; end ;
16901: GO 16840
16903: POP
16904: POP
// end ; end ;
16905: GO 16704
16907: POP
16908: POP
// if result and not asc then
16909: LD_VAR 0 6
16913: IFFALSE 16922
16915: PUSH
16916: LD_VAR 0 4
16920: NOT
16921: AND
16922: IFFALSE 16997
// begin tmp := result ;
16924: LD_ADDR_VAR 0 9
16928: PUSH
16929: LD_VAR 0 6
16933: ST_TO_ADDR
// for i = tmp downto 1 do
16934: LD_ADDR_VAR 0 7
16938: PUSH
16939: DOUBLE
16940: LD_VAR 0 9
16944: INC
16945: ST_TO_ADDR
16946: LD_INT 1
16948: PUSH
16949: FOR_DOWNTO
16950: IFFALSE 16995
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16952: LD_ADDR_VAR 0 6
16956: PUSH
16957: LD_VAR 0 6
16961: PPUSH
16962: LD_VAR 0 9
16966: PUSH
16967: LD_VAR 0 7
16971: MINUS
16972: PUSH
16973: LD_INT 1
16975: PLUS
16976: PPUSH
16977: LD_VAR 0 9
16981: PUSH
16982: LD_VAR 0 7
16986: ARRAY
16987: PPUSH
16988: CALL_OW 1
16992: ST_TO_ADDR
16993: GO 16949
16995: POP
16996: POP
// end ; tmp := [ ] ;
16997: LD_ADDR_VAR 0 9
17001: PUSH
17002: EMPTY
17003: ST_TO_ADDR
// if mode then
17004: LD_VAR 0 5
17008: IFFALSE 17077
// begin for i = 1 to result do
17010: LD_ADDR_VAR 0 7
17014: PUSH
17015: DOUBLE
17016: LD_INT 1
17018: DEC
17019: ST_TO_ADDR
17020: LD_VAR 0 6
17024: PUSH
17025: FOR_TO
17026: IFFALSE 17065
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17028: LD_ADDR_VAR 0 9
17032: PUSH
17033: LD_VAR 0 9
17037: PPUSH
17038: LD_VAR 0 7
17042: PPUSH
17043: LD_VAR 0 6
17047: PUSH
17048: LD_VAR 0 7
17052: ARRAY
17053: PUSH
17054: LD_INT 1
17056: ARRAY
17057: PPUSH
17058: CALL_OW 1
17062: ST_TO_ADDR
17063: GO 17025
17065: POP
17066: POP
// result := tmp ;
17067: LD_ADDR_VAR 0 6
17071: PUSH
17072: LD_VAR 0 9
17076: ST_TO_ADDR
// end ; end ;
17077: LD_VAR 0 6
17081: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17082: LD_INT 0
17084: PPUSH
17085: PPUSH
17086: PPUSH
17087: PPUSH
17088: PPUSH
17089: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17090: LD_ADDR_VAR 0 5
17094: PUSH
17095: LD_INT 0
17097: PUSH
17098: LD_INT 0
17100: PUSH
17101: LD_INT 0
17103: PUSH
17104: EMPTY
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: ST_TO_ADDR
// if not x or not y then
17112: LD_VAR 0 2
17116: NOT
17117: IFTRUE 17126
17119: PUSH
17120: LD_VAR 0 3
17124: NOT
17125: OR
17126: IFFALSE 17130
// exit ;
17128: GO 18786
// if not range then
17130: LD_VAR 0 4
17134: NOT
17135: IFFALSE 17145
// range := 10 ;
17137: LD_ADDR_VAR 0 4
17141: PUSH
17142: LD_INT 10
17144: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17145: LD_ADDR_VAR 0 8
17149: PUSH
17150: LD_INT 81
17152: PUSH
17153: LD_VAR 0 1
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PUSH
17162: LD_INT 92
17164: PUSH
17165: LD_VAR 0 2
17169: PUSH
17170: LD_VAR 0 3
17174: PUSH
17175: LD_VAR 0 4
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 3
17188: PUSH
17189: LD_INT 21
17191: PUSH
17192: LD_INT 3
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: LIST
17207: PPUSH
17208: CALL_OW 69
17212: ST_TO_ADDR
// if not tmp then
17213: LD_VAR 0 8
17217: NOT
17218: IFFALSE 17222
// exit ;
17220: GO 18786
// for i in tmp do
17222: LD_ADDR_VAR 0 6
17226: PUSH
17227: LD_VAR 0 8
17231: PUSH
17232: FOR_IN
17233: IFFALSE 18761
// begin points := [ 0 , 0 , 0 ] ;
17235: LD_ADDR_VAR 0 9
17239: PUSH
17240: LD_INT 0
17242: PUSH
17243: LD_INT 0
17245: PUSH
17246: LD_INT 0
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: LIST
17253: ST_TO_ADDR
// bpoints := 1 ;
17254: LD_ADDR_VAR 0 10
17258: PUSH
17259: LD_INT 1
17261: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17262: LD_VAR 0 6
17266: PPUSH
17267: CALL_OW 247
17271: PUSH
17272: LD_INT 1
17274: DOUBLE
17275: EQUAL
17276: IFTRUE 17280
17278: GO 17862
17280: POP
// begin if GetClass ( i ) = 1 then
17281: LD_VAR 0 6
17285: PPUSH
17286: CALL_OW 257
17290: PUSH
17291: LD_INT 1
17293: EQUAL
17294: IFFALSE 17315
// points := [ 10 , 5 , 3 ] ;
17296: LD_ADDR_VAR 0 9
17300: PUSH
17301: LD_INT 10
17303: PUSH
17304: LD_INT 5
17306: PUSH
17307: LD_INT 3
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: LIST
17314: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17315: LD_VAR 0 6
17319: PPUSH
17320: CALL_OW 257
17324: PUSH
17325: LD_INT 2
17327: PUSH
17328: LD_INT 3
17330: PUSH
17331: LD_INT 4
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: LIST
17338: IN
17339: IFFALSE 17360
// points := [ 3 , 2 , 1 ] ;
17341: LD_ADDR_VAR 0 9
17345: PUSH
17346: LD_INT 3
17348: PUSH
17349: LD_INT 2
17351: PUSH
17352: LD_INT 1
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: LIST
17359: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17360: LD_VAR 0 6
17364: PPUSH
17365: CALL_OW 257
17369: PUSH
17370: LD_INT 5
17372: EQUAL
17373: IFFALSE 17394
// points := [ 130 , 5 , 2 ] ;
17375: LD_ADDR_VAR 0 9
17379: PUSH
17380: LD_INT 130
17382: PUSH
17383: LD_INT 5
17385: PUSH
17386: LD_INT 2
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: LIST
17393: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17394: LD_VAR 0 6
17398: PPUSH
17399: CALL_OW 257
17403: PUSH
17404: LD_INT 8
17406: EQUAL
17407: IFFALSE 17428
// points := [ 35 , 35 , 30 ] ;
17409: LD_ADDR_VAR 0 9
17413: PUSH
17414: LD_INT 35
17416: PUSH
17417: LD_INT 35
17419: PUSH
17420: LD_INT 30
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: LIST
17427: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17428: LD_VAR 0 6
17432: PPUSH
17433: CALL_OW 257
17437: PUSH
17438: LD_INT 9
17440: EQUAL
17441: IFFALSE 17462
// points := [ 20 , 55 , 40 ] ;
17443: LD_ADDR_VAR 0 9
17447: PUSH
17448: LD_INT 20
17450: PUSH
17451: LD_INT 55
17453: PUSH
17454: LD_INT 40
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: LIST
17461: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17462: LD_VAR 0 6
17466: PPUSH
17467: CALL_OW 257
17471: PUSH
17472: LD_INT 12
17474: PUSH
17475: LD_INT 16
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: IN
17482: IFFALSE 17503
// points := [ 5 , 3 , 2 ] ;
17484: LD_ADDR_VAR 0 9
17488: PUSH
17489: LD_INT 5
17491: PUSH
17492: LD_INT 3
17494: PUSH
17495: LD_INT 2
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: LIST
17502: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17503: LD_VAR 0 6
17507: PPUSH
17508: CALL_OW 257
17512: PUSH
17513: LD_INT 17
17515: EQUAL
17516: IFFALSE 17537
// points := [ 100 , 50 , 75 ] ;
17518: LD_ADDR_VAR 0 9
17522: PUSH
17523: LD_INT 100
17525: PUSH
17526: LD_INT 50
17528: PUSH
17529: LD_INT 75
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: LIST
17536: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17537: LD_VAR 0 6
17541: PPUSH
17542: CALL_OW 257
17546: PUSH
17547: LD_INT 15
17549: EQUAL
17550: IFFALSE 17571
// points := [ 10 , 5 , 3 ] ;
17552: LD_ADDR_VAR 0 9
17556: PUSH
17557: LD_INT 10
17559: PUSH
17560: LD_INT 5
17562: PUSH
17563: LD_INT 3
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: LIST
17570: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17571: LD_VAR 0 6
17575: PPUSH
17576: CALL_OW 257
17580: PUSH
17581: LD_INT 14
17583: EQUAL
17584: IFFALSE 17605
// points := [ 10 , 0 , 0 ] ;
17586: LD_ADDR_VAR 0 9
17590: PUSH
17591: LD_INT 10
17593: PUSH
17594: LD_INT 0
17596: PUSH
17597: LD_INT 0
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17605: LD_VAR 0 6
17609: PPUSH
17610: CALL_OW 257
17614: PUSH
17615: LD_INT 11
17617: EQUAL
17618: IFFALSE 17639
// points := [ 30 , 10 , 5 ] ;
17620: LD_ADDR_VAR 0 9
17624: PUSH
17625: LD_INT 30
17627: PUSH
17628: LD_INT 10
17630: PUSH
17631: LD_INT 5
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: LIST
17638: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17639: LD_VAR 0 1
17643: PPUSH
17644: LD_INT 5
17646: PPUSH
17647: CALL_OW 321
17651: PUSH
17652: LD_INT 2
17654: EQUAL
17655: IFFALSE 17672
// bpoints := bpoints * 1.8 ;
17657: LD_ADDR_VAR 0 10
17661: PUSH
17662: LD_VAR 0 10
17666: PUSH
17667: LD_REAL  1.80000000000000E+0000
17670: MUL
17671: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17672: LD_VAR 0 6
17676: PPUSH
17677: CALL_OW 257
17681: PUSH
17682: LD_INT 1
17684: PUSH
17685: LD_INT 2
17687: PUSH
17688: LD_INT 3
17690: PUSH
17691: LD_INT 4
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: IN
17700: IFFALSE 17720
17702: PUSH
17703: LD_VAR 0 1
17707: PPUSH
17708: LD_INT 51
17710: PPUSH
17711: CALL_OW 321
17715: PUSH
17716: LD_INT 2
17718: EQUAL
17719: AND
17720: IFFALSE 17737
// bpoints := bpoints * 1.2 ;
17722: LD_ADDR_VAR 0 10
17726: PUSH
17727: LD_VAR 0 10
17731: PUSH
17732: LD_REAL  1.20000000000000E+0000
17735: MUL
17736: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17737: LD_VAR 0 6
17741: PPUSH
17742: CALL_OW 257
17746: PUSH
17747: LD_INT 5
17749: PUSH
17750: LD_INT 7
17752: PUSH
17753: LD_INT 9
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: LIST
17760: IN
17761: IFFALSE 17781
17763: PUSH
17764: LD_VAR 0 1
17768: PPUSH
17769: LD_INT 52
17771: PPUSH
17772: CALL_OW 321
17776: PUSH
17777: LD_INT 2
17779: EQUAL
17780: AND
17781: IFFALSE 17798
// bpoints := bpoints * 1.5 ;
17783: LD_ADDR_VAR 0 10
17787: PUSH
17788: LD_VAR 0 10
17792: PUSH
17793: LD_REAL  1.50000000000000E+0000
17796: MUL
17797: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17798: LD_VAR 0 1
17802: PPUSH
17803: LD_INT 66
17805: PPUSH
17806: CALL_OW 321
17810: PUSH
17811: LD_INT 2
17813: EQUAL
17814: IFFALSE 17831
// bpoints := bpoints * 1.1 ;
17816: LD_ADDR_VAR 0 10
17820: PUSH
17821: LD_VAR 0 10
17825: PUSH
17826: LD_REAL  1.10000000000000E+0000
17829: MUL
17830: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17831: LD_ADDR_VAR 0 10
17835: PUSH
17836: LD_VAR 0 10
17840: PUSH
17841: LD_VAR 0 6
17845: PPUSH
17846: LD_INT 1
17848: PPUSH
17849: CALL_OW 259
17853: PUSH
17854: LD_REAL  1.15000000000000E+0000
17857: MUL
17858: MUL
17859: ST_TO_ADDR
// end ; unit_vehicle :
17860: GO 18690
17862: LD_INT 2
17864: DOUBLE
17865: EQUAL
17866: IFTRUE 17870
17868: GO 18678
17870: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17871: LD_VAR 0 6
17875: PPUSH
17876: CALL_OW 264
17880: PUSH
17881: LD_INT 2
17883: PUSH
17884: LD_INT 42
17886: PUSH
17887: LD_INT 24
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: LIST
17894: IN
17895: IFFALSE 17916
// points := [ 25 , 5 , 3 ] ;
17897: LD_ADDR_VAR 0 9
17901: PUSH
17902: LD_INT 25
17904: PUSH
17905: LD_INT 5
17907: PUSH
17908: LD_INT 3
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: LIST
17915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17916: LD_VAR 0 6
17920: PPUSH
17921: CALL_OW 264
17925: PUSH
17926: LD_INT 4
17928: PUSH
17929: LD_INT 43
17931: PUSH
17932: LD_INT 25
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: LIST
17939: IN
17940: IFFALSE 17961
// points := [ 40 , 15 , 5 ] ;
17942: LD_ADDR_VAR 0 9
17946: PUSH
17947: LD_INT 40
17949: PUSH
17950: LD_INT 15
17952: PUSH
17953: LD_INT 5
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: LIST
17960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17961: LD_VAR 0 6
17965: PPUSH
17966: CALL_OW 264
17970: PUSH
17971: LD_INT 3
17973: PUSH
17974: LD_INT 23
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: IN
17981: IFFALSE 18002
// points := [ 7 , 25 , 8 ] ;
17983: LD_ADDR_VAR 0 9
17987: PUSH
17988: LD_INT 7
17990: PUSH
17991: LD_INT 25
17993: PUSH
17994: LD_INT 8
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: LIST
18001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18002: LD_VAR 0 6
18006: PPUSH
18007: CALL_OW 264
18011: PUSH
18012: LD_INT 5
18014: PUSH
18015: LD_INT 27
18017: PUSH
18018: LD_INT 44
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: LIST
18025: IN
18026: IFFALSE 18047
// points := [ 14 , 50 , 16 ] ;
18028: LD_ADDR_VAR 0 9
18032: PUSH
18033: LD_INT 14
18035: PUSH
18036: LD_INT 50
18038: PUSH
18039: LD_INT 16
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: LIST
18046: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18047: LD_VAR 0 6
18051: PPUSH
18052: CALL_OW 264
18056: PUSH
18057: LD_INT 6
18059: PUSH
18060: LD_INT 46
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: IN
18067: IFFALSE 18088
// points := [ 32 , 120 , 70 ] ;
18069: LD_ADDR_VAR 0 9
18073: PUSH
18074: LD_INT 32
18076: PUSH
18077: LD_INT 120
18079: PUSH
18080: LD_INT 70
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18088: LD_VAR 0 6
18092: PPUSH
18093: CALL_OW 264
18097: PUSH
18098: LD_INT 7
18100: PUSH
18101: LD_INT 28
18103: PUSH
18104: LD_INT 45
18106: PUSH
18107: LD_INT 92
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: IN
18116: IFFALSE 18137
// points := [ 35 , 20 , 45 ] ;
18118: LD_ADDR_VAR 0 9
18122: PUSH
18123: LD_INT 35
18125: PUSH
18126: LD_INT 20
18128: PUSH
18129: LD_INT 45
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: LIST
18136: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18137: LD_VAR 0 6
18141: PPUSH
18142: CALL_OW 264
18146: PUSH
18147: LD_INT 47
18149: PUSH
18150: EMPTY
18151: LIST
18152: IN
18153: IFFALSE 18174
// points := [ 67 , 45 , 75 ] ;
18155: LD_ADDR_VAR 0 9
18159: PUSH
18160: LD_INT 67
18162: PUSH
18163: LD_INT 45
18165: PUSH
18166: LD_INT 75
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: LIST
18173: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18174: LD_VAR 0 6
18178: PPUSH
18179: CALL_OW 264
18183: PUSH
18184: LD_INT 26
18186: PUSH
18187: EMPTY
18188: LIST
18189: IN
18190: IFFALSE 18211
// points := [ 120 , 30 , 80 ] ;
18192: LD_ADDR_VAR 0 9
18196: PUSH
18197: LD_INT 120
18199: PUSH
18200: LD_INT 30
18202: PUSH
18203: LD_INT 80
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: LIST
18210: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18211: LD_VAR 0 6
18215: PPUSH
18216: CALL_OW 264
18220: PUSH
18221: LD_INT 22
18223: PUSH
18224: EMPTY
18225: LIST
18226: IN
18227: IFFALSE 18248
// points := [ 40 , 1 , 1 ] ;
18229: LD_ADDR_VAR 0 9
18233: PUSH
18234: LD_INT 40
18236: PUSH
18237: LD_INT 1
18239: PUSH
18240: LD_INT 1
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: LIST
18247: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18248: LD_VAR 0 6
18252: PPUSH
18253: CALL_OW 264
18257: PUSH
18258: LD_INT 29
18260: PUSH
18261: EMPTY
18262: LIST
18263: IN
18264: IFFALSE 18285
// points := [ 70 , 200 , 400 ] ;
18266: LD_ADDR_VAR 0 9
18270: PUSH
18271: LD_INT 70
18273: PUSH
18274: LD_INT 200
18276: PUSH
18277: LD_INT 400
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: LIST
18284: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18285: LD_VAR 0 6
18289: PPUSH
18290: CALL_OW 264
18294: PUSH
18295: LD_INT 14
18297: PUSH
18298: LD_INT 53
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: IN
18305: IFFALSE 18326
// points := [ 40 , 10 , 20 ] ;
18307: LD_ADDR_VAR 0 9
18311: PUSH
18312: LD_INT 40
18314: PUSH
18315: LD_INT 10
18317: PUSH
18318: LD_INT 20
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: LIST
18325: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18326: LD_VAR 0 6
18330: PPUSH
18331: CALL_OW 264
18335: PUSH
18336: LD_INT 9
18338: PUSH
18339: EMPTY
18340: LIST
18341: IN
18342: IFFALSE 18363
// points := [ 5 , 70 , 20 ] ;
18344: LD_ADDR_VAR 0 9
18348: PUSH
18349: LD_INT 5
18351: PUSH
18352: LD_INT 70
18354: PUSH
18355: LD_INT 20
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18363: LD_VAR 0 6
18367: PPUSH
18368: CALL_OW 264
18372: PUSH
18373: LD_INT 10
18375: PUSH
18376: EMPTY
18377: LIST
18378: IN
18379: IFFALSE 18400
// points := [ 35 , 110 , 70 ] ;
18381: LD_ADDR_VAR 0 9
18385: PUSH
18386: LD_INT 35
18388: PUSH
18389: LD_INT 110
18391: PUSH
18392: LD_INT 70
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: LIST
18399: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18400: LD_VAR 0 6
18404: PPUSH
18405: CALL_OW 265
18409: PUSH
18410: LD_INT 25
18412: EQUAL
18413: IFFALSE 18434
// points := [ 80 , 65 , 100 ] ;
18415: LD_ADDR_VAR 0 9
18419: PUSH
18420: LD_INT 80
18422: PUSH
18423: LD_INT 65
18425: PUSH
18426: LD_INT 100
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: LIST
18433: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18434: LD_VAR 0 6
18438: PPUSH
18439: CALL_OW 263
18443: PUSH
18444: LD_INT 1
18446: EQUAL
18447: IFFALSE 18482
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18449: LD_ADDR_VAR 0 10
18453: PUSH
18454: LD_VAR 0 10
18458: PUSH
18459: LD_VAR 0 6
18463: PPUSH
18464: CALL_OW 311
18468: PPUSH
18469: LD_INT 3
18471: PPUSH
18472: CALL_OW 259
18476: PUSH
18477: LD_INT 4
18479: MUL
18480: MUL
18481: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18482: LD_VAR 0 6
18486: PPUSH
18487: CALL_OW 263
18491: PUSH
18492: LD_INT 2
18494: EQUAL
18495: IFFALSE 18546
// begin j := IsControledBy ( i ) ;
18497: LD_ADDR_VAR 0 7
18501: PUSH
18502: LD_VAR 0 6
18506: PPUSH
18507: CALL_OW 312
18511: ST_TO_ADDR
// if j then
18512: LD_VAR 0 7
18516: IFFALSE 18546
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18518: LD_ADDR_VAR 0 10
18522: PUSH
18523: LD_VAR 0 10
18527: PUSH
18528: LD_VAR 0 7
18532: PPUSH
18533: LD_INT 3
18535: PPUSH
18536: CALL_OW 259
18540: PUSH
18541: LD_INT 3
18543: MUL
18544: MUL
18545: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18546: LD_VAR 0 6
18550: PPUSH
18551: CALL_OW 264
18555: PUSH
18556: LD_INT 5
18558: PUSH
18559: LD_INT 6
18561: PUSH
18562: LD_INT 46
18564: PUSH
18565: LD_INT 44
18567: PUSH
18568: LD_INT 47
18570: PUSH
18571: LD_INT 45
18573: PUSH
18574: LD_INT 28
18576: PUSH
18577: LD_INT 7
18579: PUSH
18580: LD_INT 27
18582: PUSH
18583: LD_INT 29
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: IN
18598: IFFALSE 18618
18600: PUSH
18601: LD_VAR 0 1
18605: PPUSH
18606: LD_INT 52
18608: PPUSH
18609: CALL_OW 321
18613: PUSH
18614: LD_INT 2
18616: EQUAL
18617: AND
18618: IFFALSE 18635
// bpoints := bpoints * 1.2 ;
18620: LD_ADDR_VAR 0 10
18624: PUSH
18625: LD_VAR 0 10
18629: PUSH
18630: LD_REAL  1.20000000000000E+0000
18633: MUL
18634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18635: LD_VAR 0 6
18639: PPUSH
18640: CALL_OW 264
18644: PUSH
18645: LD_INT 6
18647: PUSH
18648: LD_INT 46
18650: PUSH
18651: LD_INT 47
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: LIST
18658: IN
18659: IFFALSE 18676
// bpoints := bpoints * 1.2 ;
18661: LD_ADDR_VAR 0 10
18665: PUSH
18666: LD_VAR 0 10
18670: PUSH
18671: LD_REAL  1.20000000000000E+0000
18674: MUL
18675: ST_TO_ADDR
// end ; unit_building :
18676: GO 18690
18678: LD_INT 3
18680: DOUBLE
18681: EQUAL
18682: IFTRUE 18686
18684: GO 18689
18686: POP
// ; end ;
18687: GO 18690
18689: POP
// for j = 1 to 3 do
18690: LD_ADDR_VAR 0 7
18694: PUSH
18695: DOUBLE
18696: LD_INT 1
18698: DEC
18699: ST_TO_ADDR
18700: LD_INT 3
18702: PUSH
18703: FOR_TO
18704: IFFALSE 18757
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18706: LD_ADDR_VAR 0 5
18710: PUSH
18711: LD_VAR 0 5
18715: PPUSH
18716: LD_VAR 0 7
18720: PPUSH
18721: LD_VAR 0 5
18725: PUSH
18726: LD_VAR 0 7
18730: ARRAY
18731: PUSH
18732: LD_VAR 0 9
18736: PUSH
18737: LD_VAR 0 7
18741: ARRAY
18742: PUSH
18743: LD_VAR 0 10
18747: MUL
18748: PLUS
18749: PPUSH
18750: CALL_OW 1
18754: ST_TO_ADDR
18755: GO 18703
18757: POP
18758: POP
// end ;
18759: GO 17232
18761: POP
18762: POP
// result := Replace ( result , 4 , tmp ) ;
18763: LD_ADDR_VAR 0 5
18767: PUSH
18768: LD_VAR 0 5
18772: PPUSH
18773: LD_INT 4
18775: PPUSH
18776: LD_VAR 0 8
18780: PPUSH
18781: CALL_OW 1
18785: ST_TO_ADDR
// end ;
18786: LD_VAR 0 5
18790: RET
// export function DangerAtRange ( unit , range ) ; begin
18791: LD_INT 0
18793: PPUSH
// if not unit then
18794: LD_VAR 0 1
18798: NOT
18799: IFFALSE 18803
// exit ;
18801: GO 18848
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18803: LD_ADDR_VAR 0 3
18807: PUSH
18808: LD_VAR 0 1
18812: PPUSH
18813: CALL_OW 255
18817: PPUSH
18818: LD_VAR 0 1
18822: PPUSH
18823: CALL_OW 250
18827: PPUSH
18828: LD_VAR 0 1
18832: PPUSH
18833: CALL_OW 251
18837: PPUSH
18838: LD_VAR 0 2
18842: PPUSH
18843: CALL 17082 0 4
18847: ST_TO_ADDR
// end ;
18848: LD_VAR 0 3
18852: RET
// export function DangerInArea ( side , area ) ; begin
18853: LD_INT 0
18855: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18856: LD_ADDR_VAR 0 3
18860: PUSH
18861: LD_VAR 0 2
18865: PPUSH
18866: LD_INT 81
18868: PUSH
18869: LD_VAR 0 1
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PPUSH
18878: CALL_OW 70
18882: ST_TO_ADDR
// end ;
18883: LD_VAR 0 3
18887: RET
// export function IsExtension ( b ) ; begin
18888: LD_INT 0
18890: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18891: LD_ADDR_VAR 0 2
18895: PUSH
18896: LD_VAR 0 1
18900: PUSH
18901: LD_INT 23
18903: PUSH
18904: LD_INT 20
18906: PUSH
18907: LD_INT 22
18909: PUSH
18910: LD_INT 17
18912: PUSH
18913: LD_INT 24
18915: PUSH
18916: LD_INT 21
18918: PUSH
18919: LD_INT 19
18921: PUSH
18922: LD_INT 16
18924: PUSH
18925: LD_INT 25
18927: PUSH
18928: LD_INT 18
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: IN
18943: ST_TO_ADDR
// end ;
18944: LD_VAR 0 2
18948: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18949: LD_INT 0
18951: PPUSH
18952: PPUSH
18953: PPUSH
// result := [ ] ;
18954: LD_ADDR_VAR 0 4
18958: PUSH
18959: EMPTY
18960: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18961: LD_ADDR_VAR 0 5
18965: PUSH
18966: LD_VAR 0 2
18970: PPUSH
18971: LD_INT 21
18973: PUSH
18974: LD_INT 3
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PPUSH
18981: CALL_OW 70
18985: ST_TO_ADDR
// if not tmp then
18986: LD_VAR 0 5
18990: NOT
18991: IFFALSE 18995
// exit ;
18993: GO 19059
// if checkLink then
18995: LD_VAR 0 3
18999: IFFALSE 19049
// begin for i in tmp do
19001: LD_ADDR_VAR 0 6
19005: PUSH
19006: LD_VAR 0 5
19010: PUSH
19011: FOR_IN
19012: IFFALSE 19047
// if GetBase ( i ) <> base then
19014: LD_VAR 0 6
19018: PPUSH
19019: CALL_OW 274
19023: PUSH
19024: LD_VAR 0 1
19028: NONEQUAL
19029: IFFALSE 19045
// ComLinkToBase ( base , i ) ;
19031: LD_VAR 0 1
19035: PPUSH
19036: LD_VAR 0 6
19040: PPUSH
19041: CALL_OW 169
19045: GO 19011
19047: POP
19048: POP
// end ; result := tmp ;
19049: LD_ADDR_VAR 0 4
19053: PUSH
19054: LD_VAR 0 5
19058: ST_TO_ADDR
// end ;
19059: LD_VAR 0 4
19063: RET
// export function ComComplete ( units , b ) ; var i ; begin
19064: LD_INT 0
19066: PPUSH
19067: PPUSH
// if not units then
19068: LD_VAR 0 1
19072: NOT
19073: IFFALSE 19077
// exit ;
19075: GO 19167
// for i in units do
19077: LD_ADDR_VAR 0 4
19081: PUSH
19082: LD_VAR 0 1
19086: PUSH
19087: FOR_IN
19088: IFFALSE 19165
// if BuildingStatus ( b ) = bs_build then
19090: LD_VAR 0 2
19094: PPUSH
19095: CALL_OW 461
19099: PUSH
19100: LD_INT 1
19102: EQUAL
19103: IFFALSE 19163
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19105: LD_VAR 0 4
19109: PPUSH
19110: LD_STRING h
19112: PUSH
19113: LD_VAR 0 2
19117: PPUSH
19118: CALL_OW 250
19122: PUSH
19123: LD_VAR 0 2
19127: PPUSH
19128: CALL_OW 251
19132: PUSH
19133: LD_VAR 0 2
19137: PUSH
19138: LD_INT 0
19140: PUSH
19141: LD_INT 0
19143: PUSH
19144: LD_INT 0
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: PUSH
19156: EMPTY
19157: LIST
19158: PPUSH
19159: CALL_OW 446
19163: GO 19087
19165: POP
19166: POP
// end ;
19167: LD_VAR 0 3
19171: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19172: LD_INT 0
19174: PPUSH
19175: PPUSH
19176: PPUSH
19177: PPUSH
19178: PPUSH
19179: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19180: LD_VAR 0 1
19184: NOT
19185: IFTRUE 19202
19187: PUSH
19188: LD_VAR 0 1
19192: PPUSH
19193: CALL_OW 263
19197: PUSH
19198: LD_INT 2
19200: NONEQUAL
19201: OR
19202: IFFALSE 19206
// exit ;
19204: GO 19522
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19206: LD_ADDR_VAR 0 6
19210: PUSH
19211: LD_INT 22
19213: PUSH
19214: LD_VAR 0 1
19218: PPUSH
19219: CALL_OW 255
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 2
19230: PUSH
19231: LD_INT 30
19233: PUSH
19234: LD_INT 36
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 34
19243: PUSH
19244: LD_INT 31
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: LIST
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PPUSH
19260: CALL_OW 69
19264: ST_TO_ADDR
// if not tmp then
19265: LD_VAR 0 6
19269: NOT
19270: IFFALSE 19274
// exit ;
19272: GO 19522
// result := [ ] ;
19274: LD_ADDR_VAR 0 2
19278: PUSH
19279: EMPTY
19280: ST_TO_ADDR
// for i in tmp do
19281: LD_ADDR_VAR 0 3
19285: PUSH
19286: LD_VAR 0 6
19290: PUSH
19291: FOR_IN
19292: IFFALSE 19363
// begin t := UnitsInside ( i ) ;
19294: LD_ADDR_VAR 0 4
19298: PUSH
19299: LD_VAR 0 3
19303: PPUSH
19304: CALL_OW 313
19308: ST_TO_ADDR
// if t then
19309: LD_VAR 0 4
19313: IFFALSE 19361
// for j in t do
19315: LD_ADDR_VAR 0 7
19319: PUSH
19320: LD_VAR 0 4
19324: PUSH
19325: FOR_IN
19326: IFFALSE 19359
// result := Replace ( result , result + 1 , j ) ;
19328: LD_ADDR_VAR 0 2
19332: PUSH
19333: LD_VAR 0 2
19337: PPUSH
19338: LD_VAR 0 2
19342: PUSH
19343: LD_INT 1
19345: PLUS
19346: PPUSH
19347: LD_VAR 0 7
19351: PPUSH
19352: CALL_OW 1
19356: ST_TO_ADDR
19357: GO 19325
19359: POP
19360: POP
// end ;
19361: GO 19291
19363: POP
19364: POP
// if not result then
19365: LD_VAR 0 2
19369: NOT
19370: IFFALSE 19374
// exit ;
19372: GO 19522
// mech := result [ 1 ] ;
19374: LD_ADDR_VAR 0 5
19378: PUSH
19379: LD_VAR 0 2
19383: PUSH
19384: LD_INT 1
19386: ARRAY
19387: ST_TO_ADDR
// if result > 1 then
19388: LD_VAR 0 2
19392: PUSH
19393: LD_INT 1
19395: GREATER
19396: IFFALSE 19508
// begin for i = 2 to result do
19398: LD_ADDR_VAR 0 3
19402: PUSH
19403: DOUBLE
19404: LD_INT 2
19406: DEC
19407: ST_TO_ADDR
19408: LD_VAR 0 2
19412: PUSH
19413: FOR_TO
19414: IFFALSE 19506
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19416: LD_ADDR_VAR 0 4
19420: PUSH
19421: LD_VAR 0 2
19425: PUSH
19426: LD_VAR 0 3
19430: ARRAY
19431: PPUSH
19432: LD_INT 3
19434: PPUSH
19435: CALL_OW 259
19439: PUSH
19440: LD_VAR 0 2
19444: PUSH
19445: LD_VAR 0 3
19449: ARRAY
19450: PPUSH
19451: CALL_OW 432
19455: MINUS
19456: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19457: LD_VAR 0 4
19461: PUSH
19462: LD_VAR 0 5
19466: PPUSH
19467: LD_INT 3
19469: PPUSH
19470: CALL_OW 259
19474: PUSH
19475: LD_VAR 0 5
19479: PPUSH
19480: CALL_OW 432
19484: MINUS
19485: GREATEREQUAL
19486: IFFALSE 19504
// mech := result [ i ] ;
19488: LD_ADDR_VAR 0 5
19492: PUSH
19493: LD_VAR 0 2
19497: PUSH
19498: LD_VAR 0 3
19502: ARRAY
19503: ST_TO_ADDR
// end ;
19504: GO 19413
19506: POP
19507: POP
// end ; ComLinkTo ( vehicle , mech ) ;
19508: LD_VAR 0 1
19512: PPUSH
19513: LD_VAR 0 5
19517: PPUSH
19518: CALL_OW 135
// end ;
19522: LD_VAR 0 2
19526: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19527: LD_INT 0
19529: PPUSH
19530: PPUSH
19531: PPUSH
19532: PPUSH
19533: PPUSH
19534: PPUSH
19535: PPUSH
19536: PPUSH
19537: PPUSH
19538: PPUSH
19539: PPUSH
19540: PPUSH
19541: PPUSH
// result := [ ] ;
19542: LD_ADDR_VAR 0 7
19546: PUSH
19547: EMPTY
19548: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19549: LD_VAR 0 1
19553: PPUSH
19554: CALL_OW 266
19558: PUSH
19559: LD_INT 0
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: IN
19569: NOT
19570: IFFALSE 19574
// exit ;
19572: GO 21214
// if name then
19574: LD_VAR 0 3
19578: IFFALSE 19594
// SetBName ( base_dep , name ) ;
19580: LD_VAR 0 1
19584: PPUSH
19585: LD_VAR 0 3
19589: PPUSH
19590: CALL_OW 500
// base := GetBase ( base_dep ) ;
19594: LD_ADDR_VAR 0 15
19598: PUSH
19599: LD_VAR 0 1
19603: PPUSH
19604: CALL_OW 274
19608: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19609: LD_ADDR_VAR 0 16
19613: PUSH
19614: LD_VAR 0 1
19618: PPUSH
19619: CALL_OW 255
19623: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19624: LD_ADDR_VAR 0 17
19628: PUSH
19629: LD_VAR 0 1
19633: PPUSH
19634: CALL_OW 248
19638: ST_TO_ADDR
// if sources then
19639: LD_VAR 0 5
19643: IFFALSE 19690
// for i = 1 to 3 do
19645: LD_ADDR_VAR 0 8
19649: PUSH
19650: DOUBLE
19651: LD_INT 1
19653: DEC
19654: ST_TO_ADDR
19655: LD_INT 3
19657: PUSH
19658: FOR_TO
19659: IFFALSE 19688
// AddResourceType ( base , i , sources [ i ] ) ;
19661: LD_VAR 0 15
19665: PPUSH
19666: LD_VAR 0 8
19670: PPUSH
19671: LD_VAR 0 5
19675: PUSH
19676: LD_VAR 0 8
19680: ARRAY
19681: PPUSH
19682: CALL_OW 276
19686: GO 19658
19688: POP
19689: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19690: LD_ADDR_VAR 0 18
19694: PUSH
19695: LD_VAR 0 15
19699: PPUSH
19700: LD_VAR 0 2
19704: PPUSH
19705: LD_INT 1
19707: PPUSH
19708: CALL 18949 0 3
19712: ST_TO_ADDR
// InitHc ;
19713: CALL_OW 19
// InitUc ;
19717: CALL_OW 18
// uc_side := side ;
19721: LD_ADDR_OWVAR 20
19725: PUSH
19726: LD_VAR 0 16
19730: ST_TO_ADDR
// uc_nation := nation ;
19731: LD_ADDR_OWVAR 21
19735: PUSH
19736: LD_VAR 0 17
19740: ST_TO_ADDR
// if buildings then
19741: LD_VAR 0 18
19745: IFFALSE 21073
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19747: LD_ADDR_VAR 0 19
19751: PUSH
19752: LD_VAR 0 18
19756: PPUSH
19757: LD_INT 2
19759: PUSH
19760: LD_INT 30
19762: PUSH
19763: LD_INT 29
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 30
19772: PUSH
19773: LD_INT 30
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: PPUSH
19785: CALL_OW 72
19789: ST_TO_ADDR
// if tmp then
19790: LD_VAR 0 19
19794: IFFALSE 19842
// for i in tmp do
19796: LD_ADDR_VAR 0 8
19800: PUSH
19801: LD_VAR 0 19
19805: PUSH
19806: FOR_IN
19807: IFFALSE 19840
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19809: LD_VAR 0 8
19813: PPUSH
19814: CALL_OW 250
19818: PPUSH
19819: LD_VAR 0 8
19823: PPUSH
19824: CALL_OW 251
19828: PPUSH
19829: LD_VAR 0 16
19833: PPUSH
19834: CALL_OW 441
19838: GO 19806
19840: POP
19841: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19842: LD_VAR 0 18
19846: PPUSH
19847: LD_INT 2
19849: PUSH
19850: LD_INT 30
19852: PUSH
19853: LD_INT 32
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 30
19862: PUSH
19863: LD_INT 33
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: LIST
19874: PPUSH
19875: CALL_OW 72
19879: IFFALSE 19967
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19881: LD_ADDR_VAR 0 8
19885: PUSH
19886: LD_VAR 0 18
19890: PPUSH
19891: LD_INT 2
19893: PUSH
19894: LD_INT 30
19896: PUSH
19897: LD_INT 32
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 30
19906: PUSH
19907: LD_INT 33
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: LIST
19918: PPUSH
19919: CALL_OW 72
19923: PUSH
19924: FOR_IN
19925: IFFALSE 19965
// begin if not GetBWeapon ( i ) then
19927: LD_VAR 0 8
19931: PPUSH
19932: CALL_OW 269
19936: NOT
19937: IFFALSE 19963
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19939: LD_VAR 0 8
19943: PPUSH
19944: LD_VAR 0 8
19948: PPUSH
19949: LD_VAR 0 2
19953: PPUSH
19954: CALL 21219 0 2
19958: PPUSH
19959: CALL_OW 431
// end ;
19963: GO 19924
19965: POP
19966: POP
// end ; for i = 1 to personel do
19967: LD_ADDR_VAR 0 8
19971: PUSH
19972: DOUBLE
19973: LD_INT 1
19975: DEC
19976: ST_TO_ADDR
19977: LD_VAR 0 6
19981: PUSH
19982: FOR_TO
19983: IFFALSE 21053
// begin if i > 4 then
19985: LD_VAR 0 8
19989: PUSH
19990: LD_INT 4
19992: GREATER
19993: IFFALSE 19997
// break ;
19995: GO 21053
// case i of 1 :
19997: LD_VAR 0 8
20001: PUSH
20002: LD_INT 1
20004: DOUBLE
20005: EQUAL
20006: IFTRUE 20010
20008: GO 20090
20010: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20011: LD_ADDR_VAR 0 12
20015: PUSH
20016: LD_VAR 0 18
20020: PPUSH
20021: LD_INT 22
20023: PUSH
20024: LD_VAR 0 16
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 58
20035: PUSH
20036: EMPTY
20037: LIST
20038: PUSH
20039: LD_INT 2
20041: PUSH
20042: LD_INT 30
20044: PUSH
20045: LD_INT 32
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 30
20054: PUSH
20055: LD_INT 4
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 30
20064: PUSH
20065: LD_INT 5
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: LIST
20082: PPUSH
20083: CALL_OW 72
20087: ST_TO_ADDR
20088: GO 20312
20090: LD_INT 2
20092: DOUBLE
20093: EQUAL
20094: IFTRUE 20098
20096: GO 20160
20098: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20099: LD_ADDR_VAR 0 12
20103: PUSH
20104: LD_VAR 0 18
20108: PPUSH
20109: LD_INT 22
20111: PUSH
20112: LD_VAR 0 16
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 2
20123: PUSH
20124: LD_INT 30
20126: PUSH
20127: LD_INT 0
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 30
20136: PUSH
20137: LD_INT 1
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: LIST
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PPUSH
20153: CALL_OW 72
20157: ST_TO_ADDR
20158: GO 20312
20160: LD_INT 3
20162: DOUBLE
20163: EQUAL
20164: IFTRUE 20168
20166: GO 20230
20168: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20169: LD_ADDR_VAR 0 12
20173: PUSH
20174: LD_VAR 0 18
20178: PPUSH
20179: LD_INT 22
20181: PUSH
20182: LD_VAR 0 16
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 2
20193: PUSH
20194: LD_INT 30
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 30
20206: PUSH
20207: LD_INT 3
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: LIST
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PPUSH
20223: CALL_OW 72
20227: ST_TO_ADDR
20228: GO 20312
20230: LD_INT 4
20232: DOUBLE
20233: EQUAL
20234: IFTRUE 20238
20236: GO 20311
20238: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20239: LD_ADDR_VAR 0 12
20243: PUSH
20244: LD_VAR 0 18
20248: PPUSH
20249: LD_INT 22
20251: PUSH
20252: LD_VAR 0 16
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 2
20263: PUSH
20264: LD_INT 30
20266: PUSH
20267: LD_INT 6
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 30
20276: PUSH
20277: LD_INT 7
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 30
20286: PUSH
20287: LD_INT 8
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PPUSH
20304: CALL_OW 72
20308: ST_TO_ADDR
20309: GO 20312
20311: POP
// if i = 1 then
20312: LD_VAR 0 8
20316: PUSH
20317: LD_INT 1
20319: EQUAL
20320: IFFALSE 20431
// begin tmp := [ ] ;
20322: LD_ADDR_VAR 0 19
20326: PUSH
20327: EMPTY
20328: ST_TO_ADDR
// for j in f do
20329: LD_ADDR_VAR 0 9
20333: PUSH
20334: LD_VAR 0 12
20338: PUSH
20339: FOR_IN
20340: IFFALSE 20413
// if GetBType ( j ) = b_bunker then
20342: LD_VAR 0 9
20346: PPUSH
20347: CALL_OW 266
20351: PUSH
20352: LD_INT 32
20354: EQUAL
20355: IFFALSE 20382
// tmp := Insert ( tmp , 1 , j ) else
20357: LD_ADDR_VAR 0 19
20361: PUSH
20362: LD_VAR 0 19
20366: PPUSH
20367: LD_INT 1
20369: PPUSH
20370: LD_VAR 0 9
20374: PPUSH
20375: CALL_OW 2
20379: ST_TO_ADDR
20380: GO 20411
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20382: LD_ADDR_VAR 0 19
20386: PUSH
20387: LD_VAR 0 19
20391: PPUSH
20392: LD_VAR 0 19
20396: PUSH
20397: LD_INT 1
20399: PLUS
20400: PPUSH
20401: LD_VAR 0 9
20405: PPUSH
20406: CALL_OW 2
20410: ST_TO_ADDR
20411: GO 20339
20413: POP
20414: POP
// if tmp then
20415: LD_VAR 0 19
20419: IFFALSE 20431
// f := tmp ;
20421: LD_ADDR_VAR 0 12
20425: PUSH
20426: LD_VAR 0 19
20430: ST_TO_ADDR
// end ; x := personel [ i ] ;
20431: LD_ADDR_VAR 0 13
20435: PUSH
20436: LD_VAR 0 6
20440: PUSH
20441: LD_VAR 0 8
20445: ARRAY
20446: ST_TO_ADDR
// if x = - 1 then
20447: LD_VAR 0 13
20451: PUSH
20452: LD_INT 1
20454: NEG
20455: EQUAL
20456: IFFALSE 20667
// begin for j in f do
20458: LD_ADDR_VAR 0 9
20462: PUSH
20463: LD_VAR 0 12
20467: PUSH
20468: FOR_IN
20469: IFFALSE 20663
// repeat InitHc ;
20471: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20475: LD_VAR 0 9
20479: PPUSH
20480: CALL_OW 266
20484: PUSH
20485: LD_INT 5
20487: EQUAL
20488: IFFALSE 20558
// begin if UnitsInside ( j ) < 3 then
20490: LD_VAR 0 9
20494: PPUSH
20495: CALL_OW 313
20499: PUSH
20500: LD_INT 3
20502: LESS
20503: IFFALSE 20539
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20505: LD_INT 0
20507: PPUSH
20508: LD_INT 5
20510: PUSH
20511: LD_INT 8
20513: PUSH
20514: LD_INT 9
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: LIST
20521: PUSH
20522: LD_VAR 0 17
20526: ARRAY
20527: PPUSH
20528: LD_VAR 0 4
20532: PPUSH
20533: CALL_OW 380
20537: GO 20556
// PrepareHuman ( false , i , skill ) ;
20539: LD_INT 0
20541: PPUSH
20542: LD_VAR 0 8
20546: PPUSH
20547: LD_VAR 0 4
20551: PPUSH
20552: CALL_OW 380
// end else
20556: GO 20575
// PrepareHuman ( false , i , skill ) ;
20558: LD_INT 0
20560: PPUSH
20561: LD_VAR 0 8
20565: PPUSH
20566: LD_VAR 0 4
20570: PPUSH
20571: CALL_OW 380
// un := CreateHuman ;
20575: LD_ADDR_VAR 0 14
20579: PUSH
20580: CALL_OW 44
20584: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20585: LD_ADDR_VAR 0 7
20589: PUSH
20590: LD_VAR 0 7
20594: PPUSH
20595: LD_INT 1
20597: PPUSH
20598: LD_VAR 0 14
20602: PPUSH
20603: CALL_OW 2
20607: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20608: LD_VAR 0 14
20612: PPUSH
20613: LD_VAR 0 9
20617: PPUSH
20618: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20622: LD_VAR 0 9
20626: PPUSH
20627: CALL_OW 313
20631: PUSH
20632: LD_INT 6
20634: EQUAL
20635: IFTRUE 20659
20637: PUSH
20638: LD_VAR 0 9
20642: PPUSH
20643: CALL_OW 266
20647: PUSH
20648: LD_INT 32
20650: PUSH
20651: LD_INT 31
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: IN
20658: OR
20659: IFFALSE 20471
20661: GO 20468
20663: POP
20664: POP
// end else
20665: GO 21051
// for j = 1 to x do
20667: LD_ADDR_VAR 0 9
20671: PUSH
20672: DOUBLE
20673: LD_INT 1
20675: DEC
20676: ST_TO_ADDR
20677: LD_VAR 0 13
20681: PUSH
20682: FOR_TO
20683: IFFALSE 21049
// begin InitHc ;
20685: CALL_OW 19
// if not f then
20689: LD_VAR 0 12
20693: NOT
20694: IFFALSE 20783
// begin PrepareHuman ( false , i , skill ) ;
20696: LD_INT 0
20698: PPUSH
20699: LD_VAR 0 8
20703: PPUSH
20704: LD_VAR 0 4
20708: PPUSH
20709: CALL_OW 380
// un := CreateHuman ;
20713: LD_ADDR_VAR 0 14
20717: PUSH
20718: CALL_OW 44
20722: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20723: LD_ADDR_VAR 0 7
20727: PUSH
20728: LD_VAR 0 7
20732: PPUSH
20733: LD_INT 1
20735: PPUSH
20736: LD_VAR 0 14
20740: PPUSH
20741: CALL_OW 2
20745: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20746: LD_VAR 0 14
20750: PPUSH
20751: LD_VAR 0 1
20755: PPUSH
20756: CALL_OW 250
20760: PPUSH
20761: LD_VAR 0 1
20765: PPUSH
20766: CALL_OW 251
20770: PPUSH
20771: LD_INT 10
20773: PPUSH
20774: LD_INT 0
20776: PPUSH
20777: CALL_OW 50
// continue ;
20781: GO 20682
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20783: LD_VAR 0 12
20787: PUSH
20788: LD_INT 1
20790: ARRAY
20791: PPUSH
20792: CALL_OW 313
20796: IFFALSE 20824
20798: PUSH
20799: LD_VAR 0 12
20803: PUSH
20804: LD_INT 1
20806: ARRAY
20807: PPUSH
20808: CALL_OW 266
20812: PUSH
20813: LD_INT 32
20815: PUSH
20816: LD_INT 31
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: IN
20823: AND
20824: IFTRUE 20845
20826: PUSH
20827: LD_VAR 0 12
20831: PUSH
20832: LD_INT 1
20834: ARRAY
20835: PPUSH
20836: CALL_OW 313
20840: PUSH
20841: LD_INT 6
20843: EQUAL
20844: OR
20845: IFFALSE 20865
// f := Delete ( f , 1 ) ;
20847: LD_ADDR_VAR 0 12
20851: PUSH
20852: LD_VAR 0 12
20856: PPUSH
20857: LD_INT 1
20859: PPUSH
20860: CALL_OW 3
20864: ST_TO_ADDR
// if not f then
20865: LD_VAR 0 12
20869: NOT
20870: IFFALSE 20888
// begin x := x + 2 ;
20872: LD_ADDR_VAR 0 13
20876: PUSH
20877: LD_VAR 0 13
20881: PUSH
20882: LD_INT 2
20884: PLUS
20885: ST_TO_ADDR
// continue ;
20886: GO 20682
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20888: LD_VAR 0 12
20892: PUSH
20893: LD_INT 1
20895: ARRAY
20896: PPUSH
20897: CALL_OW 266
20901: PUSH
20902: LD_INT 5
20904: EQUAL
20905: IFFALSE 20979
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20907: LD_VAR 0 12
20911: PUSH
20912: LD_INT 1
20914: ARRAY
20915: PPUSH
20916: CALL_OW 313
20920: PUSH
20921: LD_INT 3
20923: LESS
20924: IFFALSE 20960
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20926: LD_INT 0
20928: PPUSH
20929: LD_INT 5
20931: PUSH
20932: LD_INT 8
20934: PUSH
20935: LD_INT 9
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: LIST
20942: PUSH
20943: LD_VAR 0 17
20947: ARRAY
20948: PPUSH
20949: LD_VAR 0 4
20953: PPUSH
20954: CALL_OW 380
20958: GO 20977
// PrepareHuman ( false , i , skill ) ;
20960: LD_INT 0
20962: PPUSH
20963: LD_VAR 0 8
20967: PPUSH
20968: LD_VAR 0 4
20972: PPUSH
20973: CALL_OW 380
// end else
20977: GO 20996
// PrepareHuman ( false , i , skill ) ;
20979: LD_INT 0
20981: PPUSH
20982: LD_VAR 0 8
20986: PPUSH
20987: LD_VAR 0 4
20991: PPUSH
20992: CALL_OW 380
// un := CreateHuman ;
20996: LD_ADDR_VAR 0 14
21000: PUSH
21001: CALL_OW 44
21005: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21006: LD_ADDR_VAR 0 7
21010: PUSH
21011: LD_VAR 0 7
21015: PPUSH
21016: LD_INT 1
21018: PPUSH
21019: LD_VAR 0 14
21023: PPUSH
21024: CALL_OW 2
21028: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21029: LD_VAR 0 14
21033: PPUSH
21034: LD_VAR 0 12
21038: PUSH
21039: LD_INT 1
21041: ARRAY
21042: PPUSH
21043: CALL_OW 52
// end ;
21047: GO 20682
21049: POP
21050: POP
// end ;
21051: GO 19982
21053: POP
21054: POP
// result := result ^ buildings ;
21055: LD_ADDR_VAR 0 7
21059: PUSH
21060: LD_VAR 0 7
21064: PUSH
21065: LD_VAR 0 18
21069: ADD
21070: ST_TO_ADDR
// end else
21071: GO 21214
// begin for i = 1 to personel do
21073: LD_ADDR_VAR 0 8
21077: PUSH
21078: DOUBLE
21079: LD_INT 1
21081: DEC
21082: ST_TO_ADDR
21083: LD_VAR 0 6
21087: PUSH
21088: FOR_TO
21089: IFFALSE 21212
// begin if i > 4 then
21091: LD_VAR 0 8
21095: PUSH
21096: LD_INT 4
21098: GREATER
21099: IFFALSE 21103
// break ;
21101: GO 21212
// x := personel [ i ] ;
21103: LD_ADDR_VAR 0 13
21107: PUSH
21108: LD_VAR 0 6
21112: PUSH
21113: LD_VAR 0 8
21117: ARRAY
21118: ST_TO_ADDR
// if x = - 1 then
21119: LD_VAR 0 13
21123: PUSH
21124: LD_INT 1
21126: NEG
21127: EQUAL
21128: IFFALSE 21132
// continue ;
21130: GO 21088
// PrepareHuman ( false , i , skill ) ;
21132: LD_INT 0
21134: PPUSH
21135: LD_VAR 0 8
21139: PPUSH
21140: LD_VAR 0 4
21144: PPUSH
21145: CALL_OW 380
// un := CreateHuman ;
21149: LD_ADDR_VAR 0 14
21153: PUSH
21154: CALL_OW 44
21158: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21159: LD_VAR 0 14
21163: PPUSH
21164: LD_VAR 0 1
21168: PPUSH
21169: CALL_OW 250
21173: PPUSH
21174: LD_VAR 0 1
21178: PPUSH
21179: CALL_OW 251
21183: PPUSH
21184: LD_INT 10
21186: PPUSH
21187: LD_INT 0
21189: PPUSH
21190: CALL_OW 50
// result := result ^ un ;
21194: LD_ADDR_VAR 0 7
21198: PUSH
21199: LD_VAR 0 7
21203: PUSH
21204: LD_VAR 0 14
21208: ADD
21209: ST_TO_ADDR
// end ;
21210: GO 21088
21212: POP
21213: POP
// end ; end ;
21214: LD_VAR 0 7
21218: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21219: LD_INT 0
21221: PPUSH
21222: PPUSH
21223: PPUSH
21224: PPUSH
21225: PPUSH
21226: PPUSH
21227: PPUSH
21228: PPUSH
21229: PPUSH
21230: PPUSH
21231: PPUSH
21232: PPUSH
21233: PPUSH
21234: PPUSH
21235: PPUSH
21236: PPUSH
// result := false ;
21237: LD_ADDR_VAR 0 3
21241: PUSH
21242: LD_INT 0
21244: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21245: LD_VAR 0 1
21249: NOT
21250: IFTRUE 21275
21252: PUSH
21253: LD_VAR 0 1
21257: PPUSH
21258: CALL_OW 266
21262: PUSH
21263: LD_INT 32
21265: PUSH
21266: LD_INT 33
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: IN
21273: NOT
21274: OR
21275: IFFALSE 21279
// exit ;
21277: GO 22414
// nat := GetNation ( tower ) ;
21279: LD_ADDR_VAR 0 12
21283: PUSH
21284: LD_VAR 0 1
21288: PPUSH
21289: CALL_OW 248
21293: ST_TO_ADDR
// side := GetSide ( tower ) ;
21294: LD_ADDR_VAR 0 16
21298: PUSH
21299: LD_VAR 0 1
21303: PPUSH
21304: CALL_OW 255
21308: ST_TO_ADDR
// x := GetX ( tower ) ;
21309: LD_ADDR_VAR 0 10
21313: PUSH
21314: LD_VAR 0 1
21318: PPUSH
21319: CALL_OW 250
21323: ST_TO_ADDR
// y := GetY ( tower ) ;
21324: LD_ADDR_VAR 0 11
21328: PUSH
21329: LD_VAR 0 1
21333: PPUSH
21334: CALL_OW 251
21338: ST_TO_ADDR
// if not x or not y then
21339: LD_VAR 0 10
21343: NOT
21344: IFTRUE 21353
21346: PUSH
21347: LD_VAR 0 11
21351: NOT
21352: OR
21353: IFFALSE 21357
// exit ;
21355: GO 22414
// weapon := 0 ;
21357: LD_ADDR_VAR 0 18
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// fac_list := [ ] ;
21365: LD_ADDR_VAR 0 17
21369: PUSH
21370: EMPTY
21371: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
21372: LD_ADDR_VAR 0 6
21376: PUSH
21377: LD_VAR 0 1
21381: PPUSH
21382: CALL_OW 274
21386: PPUSH
21387: LD_VAR 0 2
21391: PPUSH
21392: LD_INT 0
21394: PPUSH
21395: CALL 18949 0 3
21399: PPUSH
21400: LD_INT 30
21402: PUSH
21403: LD_INT 3
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PPUSH
21410: CALL_OW 72
21414: ST_TO_ADDR
// if not factories then
21415: LD_VAR 0 6
21419: NOT
21420: IFFALSE 21424
// exit ;
21422: GO 22414
// for i in factories do
21424: LD_ADDR_VAR 0 8
21428: PUSH
21429: LD_VAR 0 6
21433: PUSH
21434: FOR_IN
21435: IFFALSE 21460
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21437: LD_ADDR_VAR 0 17
21441: PUSH
21442: LD_VAR 0 17
21446: PUSH
21447: LD_VAR 0 8
21451: PPUSH
21452: CALL_OW 478
21456: UNION
21457: ST_TO_ADDR
21458: GO 21434
21460: POP
21461: POP
// if not fac_list then
21462: LD_VAR 0 17
21466: NOT
21467: IFFALSE 21471
// exit ;
21469: GO 22414
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21471: LD_ADDR_VAR 0 5
21475: PUSH
21476: LD_INT 4
21478: PUSH
21479: LD_INT 5
21481: PUSH
21482: LD_INT 9
21484: PUSH
21485: LD_INT 10
21487: PUSH
21488: LD_INT 6
21490: PUSH
21491: LD_INT 7
21493: PUSH
21494: LD_INT 11
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 27
21508: PUSH
21509: LD_INT 28
21511: PUSH
21512: LD_INT 26
21514: PUSH
21515: LD_INT 30
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 43
21526: PUSH
21527: LD_INT 44
21529: PUSH
21530: LD_INT 46
21532: PUSH
21533: LD_INT 45
21535: PUSH
21536: LD_INT 47
21538: PUSH
21539: LD_INT 49
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: LIST
21554: PUSH
21555: LD_VAR 0 12
21559: ARRAY
21560: ST_TO_ADDR
// list := list isect fac_list ;
21561: LD_ADDR_VAR 0 5
21565: PUSH
21566: LD_VAR 0 5
21570: PUSH
21571: LD_VAR 0 17
21575: ISECT
21576: ST_TO_ADDR
// if not list then
21577: LD_VAR 0 5
21581: NOT
21582: IFFALSE 21586
// exit ;
21584: GO 22414
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21586: LD_VAR 0 12
21590: PUSH
21591: LD_INT 3
21593: EQUAL
21594: IFFALSE 21606
21596: PUSH
21597: LD_INT 49
21599: PUSH
21600: LD_VAR 0 5
21604: IN
21605: AND
21606: IFFALSE 21626
21608: PUSH
21609: LD_INT 31
21611: PPUSH
21612: LD_VAR 0 16
21616: PPUSH
21617: CALL_OW 321
21621: PUSH
21622: LD_INT 2
21624: EQUAL
21625: AND
21626: IFFALSE 21686
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21628: LD_INT 22
21630: PUSH
21631: LD_VAR 0 16
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 35
21642: PUSH
21643: LD_INT 49
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 91
21652: PUSH
21653: LD_VAR 0 1
21657: PUSH
21658: LD_INT 10
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: LIST
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: PPUSH
21671: CALL_OW 69
21675: NOT
21676: IFFALSE 21686
// weapon := ru_time_lapser ;
21678: LD_ADDR_VAR 0 18
21682: PUSH
21683: LD_INT 49
21685: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21686: LD_VAR 0 12
21690: PUSH
21691: LD_INT 1
21693: PUSH
21694: LD_INT 2
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: IN
21701: IFFALSE 21725
21703: PUSH
21704: LD_INT 11
21706: PUSH
21707: LD_VAR 0 5
21711: IN
21712: IFTRUE 21724
21714: PUSH
21715: LD_INT 30
21717: PUSH
21718: LD_VAR 0 5
21722: IN
21723: OR
21724: AND
21725: IFFALSE 21745
21727: PUSH
21728: LD_INT 6
21730: PPUSH
21731: LD_VAR 0 16
21735: PPUSH
21736: CALL_OW 321
21740: PUSH
21741: LD_INT 2
21743: EQUAL
21744: AND
21745: IFFALSE 21912
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21747: LD_INT 22
21749: PUSH
21750: LD_VAR 0 16
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 2
21761: PUSH
21762: LD_INT 35
21764: PUSH
21765: LD_INT 11
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 35
21774: PUSH
21775: LD_INT 30
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 91
21789: PUSH
21790: LD_VAR 0 1
21794: PUSH
21795: LD_INT 18
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: LIST
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: LIST
21807: PPUSH
21808: CALL_OW 69
21812: NOT
21813: IFFALSE 21889
21815: PUSH
21816: LD_INT 22
21818: PUSH
21819: LD_VAR 0 16
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 2
21830: PUSH
21831: LD_INT 30
21833: PUSH
21834: LD_INT 32
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 30
21843: PUSH
21844: LD_INT 33
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 91
21858: PUSH
21859: LD_VAR 0 1
21863: PUSH
21864: LD_INT 12
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: LIST
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: LIST
21876: PUSH
21877: EMPTY
21878: LIST
21879: PPUSH
21880: CALL_OW 69
21884: PUSH
21885: LD_INT 2
21887: GREATER
21888: AND
21889: IFFALSE 21912
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21891: LD_ADDR_VAR 0 18
21895: PUSH
21896: LD_INT 11
21898: PUSH
21899: LD_INT 30
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: LD_VAR 0 12
21910: ARRAY
21911: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21912: LD_VAR 0 18
21916: NOT
21917: IFFALSE 21937
21919: PUSH
21920: LD_INT 40
21922: PPUSH
21923: LD_VAR 0 16
21927: PPUSH
21928: CALL_OW 321
21932: PUSH
21933: LD_INT 2
21935: EQUAL
21936: AND
21937: IFFALSE 21973
21939: PUSH
21940: LD_INT 7
21942: PUSH
21943: LD_VAR 0 5
21947: IN
21948: IFTRUE 21960
21950: PUSH
21951: LD_INT 28
21953: PUSH
21954: LD_VAR 0 5
21958: IN
21959: OR
21960: IFTRUE 21972
21962: PUSH
21963: LD_INT 45
21965: PUSH
21966: LD_VAR 0 5
21970: IN
21971: OR
21972: AND
21973: IFFALSE 22227
// begin hex := GetHexInfo ( x , y ) ;
21975: LD_ADDR_VAR 0 4
21979: PUSH
21980: LD_VAR 0 10
21984: PPUSH
21985: LD_VAR 0 11
21989: PPUSH
21990: CALL_OW 546
21994: ST_TO_ADDR
// if hex [ 1 ] then
21995: LD_VAR 0 4
21999: PUSH
22000: LD_INT 1
22002: ARRAY
22003: IFFALSE 22007
// exit ;
22005: GO 22414
// height := hex [ 2 ] ;
22007: LD_ADDR_VAR 0 15
22011: PUSH
22012: LD_VAR 0 4
22016: PUSH
22017: LD_INT 2
22019: ARRAY
22020: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22021: LD_ADDR_VAR 0 14
22025: PUSH
22026: LD_INT 0
22028: PUSH
22029: LD_INT 2
22031: PUSH
22032: LD_INT 3
22034: PUSH
22035: LD_INT 5
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: ST_TO_ADDR
// for i in tmp do
22044: LD_ADDR_VAR 0 8
22048: PUSH
22049: LD_VAR 0 14
22053: PUSH
22054: FOR_IN
22055: IFFALSE 22225
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22057: LD_ADDR_VAR 0 9
22061: PUSH
22062: LD_VAR 0 10
22066: PPUSH
22067: LD_VAR 0 8
22071: PPUSH
22072: LD_INT 5
22074: PPUSH
22075: CALL_OW 272
22079: PUSH
22080: LD_VAR 0 11
22084: PPUSH
22085: LD_VAR 0 8
22089: PPUSH
22090: LD_INT 5
22092: PPUSH
22093: CALL_OW 273
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22102: LD_VAR 0 9
22106: PUSH
22107: LD_INT 1
22109: ARRAY
22110: PPUSH
22111: LD_VAR 0 9
22115: PUSH
22116: LD_INT 2
22118: ARRAY
22119: PPUSH
22120: CALL_OW 488
22124: IFFALSE 22223
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22126: LD_ADDR_VAR 0 4
22130: PUSH
22131: LD_VAR 0 9
22135: PUSH
22136: LD_INT 1
22138: ARRAY
22139: PPUSH
22140: LD_VAR 0 9
22144: PUSH
22145: LD_INT 2
22147: ARRAY
22148: PPUSH
22149: CALL_OW 546
22153: ST_TO_ADDR
// if hex [ 1 ] then
22154: LD_VAR 0 4
22158: PUSH
22159: LD_INT 1
22161: ARRAY
22162: IFFALSE 22166
// continue ;
22164: GO 22054
// h := hex [ 2 ] ;
22166: LD_ADDR_VAR 0 13
22170: PUSH
22171: LD_VAR 0 4
22175: PUSH
22176: LD_INT 2
22178: ARRAY
22179: ST_TO_ADDR
// if h + 7 < height then
22180: LD_VAR 0 13
22184: PUSH
22185: LD_INT 7
22187: PLUS
22188: PUSH
22189: LD_VAR 0 15
22193: LESS
22194: IFFALSE 22223
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22196: LD_ADDR_VAR 0 18
22200: PUSH
22201: LD_INT 7
22203: PUSH
22204: LD_INT 28
22206: PUSH
22207: LD_INT 45
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: LIST
22214: PUSH
22215: LD_VAR 0 12
22219: ARRAY
22220: ST_TO_ADDR
// break ;
22221: GO 22225
// end ; end ; end ;
22223: GO 22054
22225: POP
22226: POP
// end ; if not weapon then
22227: LD_VAR 0 18
22231: NOT
22232: IFFALSE 22292
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22234: LD_ADDR_VAR 0 5
22238: PUSH
22239: LD_VAR 0 5
22243: PUSH
22244: LD_INT 11
22246: PUSH
22247: LD_INT 30
22249: PUSH
22250: LD_INT 49
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: LIST
22257: DIFF
22258: ST_TO_ADDR
// if not list then
22259: LD_VAR 0 5
22263: NOT
22264: IFFALSE 22268
// exit ;
22266: GO 22414
// weapon := list [ rand ( 1 , list ) ] ;
22268: LD_ADDR_VAR 0 18
22272: PUSH
22273: LD_VAR 0 5
22277: PUSH
22278: LD_INT 1
22280: PPUSH
22281: LD_VAR 0 5
22285: PPUSH
22286: CALL_OW 12
22290: ARRAY
22291: ST_TO_ADDR
// end ; if weapon then
22292: LD_VAR 0 18
22296: IFFALSE 22414
// begin tmp := CostOfWeapon ( weapon ) ;
22298: LD_ADDR_VAR 0 14
22302: PUSH
22303: LD_VAR 0 18
22307: PPUSH
22308: CALL_OW 451
22312: ST_TO_ADDR
// j := GetBase ( tower ) ;
22313: LD_ADDR_VAR 0 9
22317: PUSH
22318: LD_VAR 0 1
22322: PPUSH
22323: CALL_OW 274
22327: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22328: LD_VAR 0 9
22332: PPUSH
22333: LD_INT 1
22335: PPUSH
22336: CALL_OW 275
22340: PUSH
22341: LD_VAR 0 14
22345: PUSH
22346: LD_INT 1
22348: ARRAY
22349: GREATEREQUAL
22350: IFFALSE 22376
22352: PUSH
22353: LD_VAR 0 9
22357: PPUSH
22358: LD_INT 2
22360: PPUSH
22361: CALL_OW 275
22365: PUSH
22366: LD_VAR 0 14
22370: PUSH
22371: LD_INT 2
22373: ARRAY
22374: GREATEREQUAL
22375: AND
22376: IFFALSE 22402
22378: PUSH
22379: LD_VAR 0 9
22383: PPUSH
22384: LD_INT 3
22386: PPUSH
22387: CALL_OW 275
22391: PUSH
22392: LD_VAR 0 14
22396: PUSH
22397: LD_INT 3
22399: ARRAY
22400: GREATEREQUAL
22401: AND
22402: IFFALSE 22414
// result := weapon ;
22404: LD_ADDR_VAR 0 3
22408: PUSH
22409: LD_VAR 0 18
22413: ST_TO_ADDR
// end ; end ;
22414: LD_VAR 0 3
22418: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22419: LD_INT 0
22421: PPUSH
22422: PPUSH
// result := true ;
22423: LD_ADDR_VAR 0 3
22427: PUSH
22428: LD_INT 1
22430: ST_TO_ADDR
// if array1 = array2 then
22431: LD_VAR 0 1
22435: PUSH
22436: LD_VAR 0 2
22440: EQUAL
22441: IFFALSE 22501
// begin for i = 1 to array1 do
22443: LD_ADDR_VAR 0 4
22447: PUSH
22448: DOUBLE
22449: LD_INT 1
22451: DEC
22452: ST_TO_ADDR
22453: LD_VAR 0 1
22457: PUSH
22458: FOR_TO
22459: IFFALSE 22497
// if array1 [ i ] <> array2 [ i ] then
22461: LD_VAR 0 1
22465: PUSH
22466: LD_VAR 0 4
22470: ARRAY
22471: PUSH
22472: LD_VAR 0 2
22476: PUSH
22477: LD_VAR 0 4
22481: ARRAY
22482: NONEQUAL
22483: IFFALSE 22495
// begin result := false ;
22485: LD_ADDR_VAR 0 3
22489: PUSH
22490: LD_INT 0
22492: ST_TO_ADDR
// break ;
22493: GO 22497
// end ;
22495: GO 22458
22497: POP
22498: POP
// end else
22499: GO 22509
// result := false ;
22501: LD_ADDR_VAR 0 3
22505: PUSH
22506: LD_INT 0
22508: ST_TO_ADDR
// end ;
22509: LD_VAR 0 3
22513: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
22514: LD_INT 0
22516: PPUSH
22517: PPUSH
// if not array1 or not array2 then
22518: LD_VAR 0 1
22522: NOT
22523: IFTRUE 22532
22525: PUSH
22526: LD_VAR 0 2
22530: NOT
22531: OR
22532: IFFALSE 22536
// exit ;
22534: GO 22600
// result := true ;
22536: LD_ADDR_VAR 0 3
22540: PUSH
22541: LD_INT 1
22543: ST_TO_ADDR
// for i = 1 to array1 do
22544: LD_ADDR_VAR 0 4
22548: PUSH
22549: DOUBLE
22550: LD_INT 1
22552: DEC
22553: ST_TO_ADDR
22554: LD_VAR 0 1
22558: PUSH
22559: FOR_TO
22560: IFFALSE 22598
// if array1 [ i ] <> array2 [ i ] then
22562: LD_VAR 0 1
22566: PUSH
22567: LD_VAR 0 4
22571: ARRAY
22572: PUSH
22573: LD_VAR 0 2
22577: PUSH
22578: LD_VAR 0 4
22582: ARRAY
22583: NONEQUAL
22584: IFFALSE 22596
// begin result := false ;
22586: LD_ADDR_VAR 0 3
22590: PUSH
22591: LD_INT 0
22593: ST_TO_ADDR
// break ;
22594: GO 22598
// end ;
22596: GO 22559
22598: POP
22599: POP
// end ;
22600: LD_VAR 0 3
22604: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22605: LD_INT 0
22607: PPUSH
22608: PPUSH
22609: PPUSH
// pom := GetBase ( fac ) ;
22610: LD_ADDR_VAR 0 5
22614: PUSH
22615: LD_VAR 0 1
22619: PPUSH
22620: CALL_OW 274
22624: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22625: LD_ADDR_VAR 0 4
22629: PUSH
22630: LD_VAR 0 2
22634: PUSH
22635: LD_INT 1
22637: ARRAY
22638: PPUSH
22639: LD_VAR 0 2
22643: PUSH
22644: LD_INT 2
22646: ARRAY
22647: PPUSH
22648: LD_VAR 0 2
22652: PUSH
22653: LD_INT 3
22655: ARRAY
22656: PPUSH
22657: LD_VAR 0 2
22661: PUSH
22662: LD_INT 4
22664: ARRAY
22665: PPUSH
22666: CALL_OW 449
22670: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22671: LD_ADDR_VAR 0 3
22675: PUSH
22676: LD_VAR 0 5
22680: PPUSH
22681: LD_INT 1
22683: PPUSH
22684: CALL_OW 275
22688: PUSH
22689: LD_VAR 0 4
22693: PUSH
22694: LD_INT 1
22696: ARRAY
22697: GREATEREQUAL
22698: IFFALSE 22724
22700: PUSH
22701: LD_VAR 0 5
22705: PPUSH
22706: LD_INT 2
22708: PPUSH
22709: CALL_OW 275
22713: PUSH
22714: LD_VAR 0 4
22718: PUSH
22719: LD_INT 2
22721: ARRAY
22722: GREATEREQUAL
22723: AND
22724: IFFALSE 22750
22726: PUSH
22727: LD_VAR 0 5
22731: PPUSH
22732: LD_INT 3
22734: PPUSH
22735: CALL_OW 275
22739: PUSH
22740: LD_VAR 0 4
22744: PUSH
22745: LD_INT 3
22747: ARRAY
22748: GREATEREQUAL
22749: AND
22750: ST_TO_ADDR
// end ;
22751: LD_VAR 0 3
22755: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22756: LD_INT 0
22758: PPUSH
22759: PPUSH
22760: PPUSH
22761: PPUSH
// pom := GetBase ( building ) ;
22762: LD_ADDR_VAR 0 3
22766: PUSH
22767: LD_VAR 0 1
22771: PPUSH
22772: CALL_OW 274
22776: ST_TO_ADDR
// if not pom then
22777: LD_VAR 0 3
22781: NOT
22782: IFFALSE 22786
// exit ;
22784: GO 22960
// btype := GetBType ( building ) ;
22786: LD_ADDR_VAR 0 5
22790: PUSH
22791: LD_VAR 0 1
22795: PPUSH
22796: CALL_OW 266
22800: ST_TO_ADDR
// if btype = b_armoury then
22801: LD_VAR 0 5
22805: PUSH
22806: LD_INT 4
22808: EQUAL
22809: IFFALSE 22819
// btype := b_barracks ;
22811: LD_ADDR_VAR 0 5
22815: PUSH
22816: LD_INT 5
22818: ST_TO_ADDR
// if btype = b_depot then
22819: LD_VAR 0 5
22823: PUSH
22824: LD_INT 0
22826: EQUAL
22827: IFFALSE 22837
// btype := b_warehouse ;
22829: LD_ADDR_VAR 0 5
22833: PUSH
22834: LD_INT 1
22836: ST_TO_ADDR
// if btype = b_workshop then
22837: LD_VAR 0 5
22841: PUSH
22842: LD_INT 2
22844: EQUAL
22845: IFFALSE 22855
// btype := b_factory ;
22847: LD_ADDR_VAR 0 5
22851: PUSH
22852: LD_INT 3
22854: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22855: LD_ADDR_VAR 0 4
22859: PUSH
22860: LD_VAR 0 5
22864: PPUSH
22865: LD_VAR 0 1
22869: PPUSH
22870: CALL_OW 248
22874: PPUSH
22875: CALL_OW 450
22879: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22880: LD_ADDR_VAR 0 2
22884: PUSH
22885: LD_VAR 0 3
22889: PPUSH
22890: LD_INT 1
22892: PPUSH
22893: CALL_OW 275
22897: PUSH
22898: LD_VAR 0 4
22902: PUSH
22903: LD_INT 1
22905: ARRAY
22906: GREATEREQUAL
22907: IFFALSE 22933
22909: PUSH
22910: LD_VAR 0 3
22914: PPUSH
22915: LD_INT 2
22917: PPUSH
22918: CALL_OW 275
22922: PUSH
22923: LD_VAR 0 4
22927: PUSH
22928: LD_INT 2
22930: ARRAY
22931: GREATEREQUAL
22932: AND
22933: IFFALSE 22959
22935: PUSH
22936: LD_VAR 0 3
22940: PPUSH
22941: LD_INT 3
22943: PPUSH
22944: CALL_OW 275
22948: PUSH
22949: LD_VAR 0 4
22953: PUSH
22954: LD_INT 3
22956: ARRAY
22957: GREATEREQUAL
22958: AND
22959: ST_TO_ADDR
// end ;
22960: LD_VAR 0 2
22964: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22965: LD_INT 0
22967: PPUSH
22968: PPUSH
22969: PPUSH
// pom := GetBase ( building ) ;
22970: LD_ADDR_VAR 0 4
22974: PUSH
22975: LD_VAR 0 1
22979: PPUSH
22980: CALL_OW 274
22984: ST_TO_ADDR
// if not pom then
22985: LD_VAR 0 4
22989: NOT
22990: IFFALSE 22994
// exit ;
22992: GO 23099
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22994: LD_ADDR_VAR 0 5
22998: PUSH
22999: LD_VAR 0 2
23003: PPUSH
23004: LD_VAR 0 1
23008: PPUSH
23009: CALL_OW 248
23013: PPUSH
23014: CALL_OW 450
23018: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23019: LD_ADDR_VAR 0 3
23023: PUSH
23024: LD_VAR 0 4
23028: PPUSH
23029: LD_INT 1
23031: PPUSH
23032: CALL_OW 275
23036: PUSH
23037: LD_VAR 0 5
23041: PUSH
23042: LD_INT 1
23044: ARRAY
23045: GREATEREQUAL
23046: IFFALSE 23072
23048: PUSH
23049: LD_VAR 0 4
23053: PPUSH
23054: LD_INT 2
23056: PPUSH
23057: CALL_OW 275
23061: PUSH
23062: LD_VAR 0 5
23066: PUSH
23067: LD_INT 2
23069: ARRAY
23070: GREATEREQUAL
23071: AND
23072: IFFALSE 23098
23074: PUSH
23075: LD_VAR 0 4
23079: PPUSH
23080: LD_INT 3
23082: PPUSH
23083: CALL_OW 275
23087: PUSH
23088: LD_VAR 0 5
23092: PUSH
23093: LD_INT 3
23095: ARRAY
23096: GREATEREQUAL
23097: AND
23098: ST_TO_ADDR
// end ;
23099: LD_VAR 0 3
23103: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23104: LD_INT 0
23106: PPUSH
23107: PPUSH
23108: PPUSH
23109: PPUSH
23110: PPUSH
23111: PPUSH
23112: PPUSH
23113: PPUSH
23114: PPUSH
23115: PPUSH
23116: PPUSH
// result := false ;
23117: LD_ADDR_VAR 0 8
23121: PUSH
23122: LD_INT 0
23124: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23125: LD_VAR 0 5
23129: NOT
23130: IFTRUE 23139
23132: PUSH
23133: LD_VAR 0 1
23137: NOT
23138: OR
23139: IFTRUE 23148
23141: PUSH
23142: LD_VAR 0 2
23146: NOT
23147: OR
23148: IFTRUE 23157
23150: PUSH
23151: LD_VAR 0 3
23155: NOT
23156: OR
23157: IFFALSE 23161
// exit ;
23159: GO 23987
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23161: LD_ADDR_VAR 0 14
23165: PUSH
23166: LD_VAR 0 1
23170: PPUSH
23171: LD_VAR 0 2
23175: PPUSH
23176: LD_VAR 0 3
23180: PPUSH
23181: LD_VAR 0 4
23185: PPUSH
23186: LD_VAR 0 5
23190: PUSH
23191: LD_INT 1
23193: ARRAY
23194: PPUSH
23195: CALL_OW 248
23199: PPUSH
23200: LD_INT 0
23202: PPUSH
23203: CALL 25268 0 6
23207: ST_TO_ADDR
// if not hexes then
23208: LD_VAR 0 14
23212: NOT
23213: IFFALSE 23217
// exit ;
23215: GO 23987
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23217: LD_ADDR_VAR 0 17
23221: PUSH
23222: LD_VAR 0 5
23226: PPUSH
23227: LD_INT 22
23229: PUSH
23230: LD_VAR 0 13
23234: PPUSH
23235: CALL_OW 255
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 2
23246: PUSH
23247: LD_INT 30
23249: PUSH
23250: LD_INT 0
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 30
23259: PUSH
23260: LD_INT 1
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: LIST
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PPUSH
23276: CALL_OW 72
23280: ST_TO_ADDR
// for i = 1 to hexes do
23281: LD_ADDR_VAR 0 9
23285: PUSH
23286: DOUBLE
23287: LD_INT 1
23289: DEC
23290: ST_TO_ADDR
23291: LD_VAR 0 14
23295: PUSH
23296: FOR_TO
23297: IFFALSE 23985
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23299: LD_ADDR_VAR 0 13
23303: PUSH
23304: LD_VAR 0 14
23308: PUSH
23309: LD_VAR 0 9
23313: ARRAY
23314: PUSH
23315: LD_INT 1
23317: ARRAY
23318: PPUSH
23319: LD_VAR 0 14
23323: PUSH
23324: LD_VAR 0 9
23328: ARRAY
23329: PUSH
23330: LD_INT 2
23332: ARRAY
23333: PPUSH
23334: CALL_OW 428
23338: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23339: LD_VAR 0 14
23343: PUSH
23344: LD_VAR 0 9
23348: ARRAY
23349: PUSH
23350: LD_INT 1
23352: ARRAY
23353: PPUSH
23354: LD_VAR 0 14
23358: PUSH
23359: LD_VAR 0 9
23363: ARRAY
23364: PUSH
23365: LD_INT 2
23367: ARRAY
23368: PPUSH
23369: CALL_OW 351
23373: IFTRUE 23412
23375: PUSH
23376: LD_VAR 0 14
23380: PUSH
23381: LD_VAR 0 9
23385: ARRAY
23386: PUSH
23387: LD_INT 1
23389: ARRAY
23390: PPUSH
23391: LD_VAR 0 14
23395: PUSH
23396: LD_VAR 0 9
23400: ARRAY
23401: PUSH
23402: LD_INT 2
23404: ARRAY
23405: PPUSH
23406: CALL_OW 488
23410: NOT
23411: OR
23412: IFTRUE 23429
23414: PUSH
23415: LD_VAR 0 13
23419: PPUSH
23420: CALL_OW 247
23424: PUSH
23425: LD_INT 3
23427: EQUAL
23428: OR
23429: IFFALSE 23435
// exit ;
23431: POP
23432: POP
23433: GO 23987
// if not tmp then
23435: LD_VAR 0 13
23439: NOT
23440: IFFALSE 23444
// continue ;
23442: GO 23296
// result := true ;
23444: LD_ADDR_VAR 0 8
23448: PUSH
23449: LD_INT 1
23451: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
23452: LD_VAR 0 6
23456: IFFALSE 23473
23458: PUSH
23459: LD_VAR 0 13
23463: PPUSH
23464: CALL_OW 247
23468: PUSH
23469: LD_INT 2
23471: EQUAL
23472: AND
23473: IFFALSE 23490
23475: PUSH
23476: LD_VAR 0 13
23480: PPUSH
23481: CALL_OW 263
23485: PUSH
23486: LD_INT 1
23488: EQUAL
23489: AND
23490: IFFALSE 23654
// begin if IsDrivenBy ( tmp ) then
23492: LD_VAR 0 13
23496: PPUSH
23497: CALL_OW 311
23501: IFFALSE 23505
// continue ;
23503: GO 23296
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
23505: LD_VAR 0 6
23509: PPUSH
23510: LD_INT 3
23512: PUSH
23513: LD_INT 60
23515: PUSH
23516: EMPTY
23517: LIST
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 3
23525: PUSH
23526: LD_INT 55
23528: PUSH
23529: EMPTY
23530: LIST
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PPUSH
23540: CALL_OW 72
23544: IFFALSE 23652
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
23546: LD_ADDR_VAR 0 18
23550: PUSH
23551: LD_VAR 0 6
23555: PPUSH
23556: LD_INT 3
23558: PUSH
23559: LD_INT 60
23561: PUSH
23562: EMPTY
23563: LIST
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 3
23571: PUSH
23572: LD_INT 55
23574: PUSH
23575: EMPTY
23576: LIST
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PPUSH
23586: CALL_OW 72
23590: PUSH
23591: LD_INT 1
23593: ARRAY
23594: ST_TO_ADDR
// if IsInUnit ( driver ) then
23595: LD_VAR 0 18
23599: PPUSH
23600: CALL_OW 310
23604: IFFALSE 23615
// ComExit ( driver ) ;
23606: LD_VAR 0 18
23610: PPUSH
23611: CALL 49258 0 1
// AddComEnterUnit ( driver , tmp ) ;
23615: LD_VAR 0 18
23619: PPUSH
23620: LD_VAR 0 13
23624: PPUSH
23625: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23629: LD_VAR 0 18
23633: PPUSH
23634: LD_VAR 0 7
23638: PPUSH
23639: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23643: LD_VAR 0 18
23647: PPUSH
23648: CALL_OW 181
// end ; continue ;
23652: GO 23296
// end ; if not cleaners or not tmp in cleaners then
23654: LD_VAR 0 6
23658: NOT
23659: IFTRUE 23674
23661: PUSH
23662: LD_VAR 0 13
23666: PUSH
23667: LD_VAR 0 6
23671: IN
23672: NOT
23673: OR
23674: IFFALSE 23983
// begin if dep then
23676: LD_VAR 0 17
23680: IFFALSE 23816
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23682: LD_ADDR_VAR 0 16
23686: PUSH
23687: LD_VAR 0 17
23691: PUSH
23692: LD_INT 1
23694: ARRAY
23695: PPUSH
23696: CALL_OW 250
23700: PPUSH
23701: LD_VAR 0 17
23705: PUSH
23706: LD_INT 1
23708: ARRAY
23709: PPUSH
23710: CALL_OW 254
23714: PPUSH
23715: LD_INT 5
23717: PPUSH
23718: CALL_OW 272
23722: PUSH
23723: LD_VAR 0 17
23727: PUSH
23728: LD_INT 1
23730: ARRAY
23731: PPUSH
23732: CALL_OW 251
23736: PPUSH
23737: LD_VAR 0 17
23741: PUSH
23742: LD_INT 1
23744: ARRAY
23745: PPUSH
23746: CALL_OW 254
23750: PPUSH
23751: LD_INT 5
23753: PPUSH
23754: CALL_OW 273
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23763: LD_VAR 0 16
23767: PUSH
23768: LD_INT 1
23770: ARRAY
23771: PPUSH
23772: LD_VAR 0 16
23776: PUSH
23777: LD_INT 2
23779: ARRAY
23780: PPUSH
23781: CALL_OW 488
23785: IFFALSE 23816
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23787: LD_VAR 0 13
23791: PPUSH
23792: LD_VAR 0 16
23796: PUSH
23797: LD_INT 1
23799: ARRAY
23800: PPUSH
23801: LD_VAR 0 16
23805: PUSH
23806: LD_INT 2
23808: ARRAY
23809: PPUSH
23810: CALL_OW 111
// continue ;
23814: GO 23296
// end ; end ; r := GetDir ( tmp ) ;
23816: LD_ADDR_VAR 0 15
23820: PUSH
23821: LD_VAR 0 13
23825: PPUSH
23826: CALL_OW 254
23830: ST_TO_ADDR
// if r = 5 then
23831: LD_VAR 0 15
23835: PUSH
23836: LD_INT 5
23838: EQUAL
23839: IFFALSE 23849
// r := 0 ;
23841: LD_ADDR_VAR 0 15
23845: PUSH
23846: LD_INT 0
23848: ST_TO_ADDR
// for j = r to 5 do
23849: LD_ADDR_VAR 0 10
23853: PUSH
23854: DOUBLE
23855: LD_VAR 0 15
23859: DEC
23860: ST_TO_ADDR
23861: LD_INT 5
23863: PUSH
23864: FOR_TO
23865: IFFALSE 23981
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23867: LD_ADDR_VAR 0 11
23871: PUSH
23872: LD_VAR 0 13
23876: PPUSH
23877: CALL_OW 250
23881: PPUSH
23882: LD_VAR 0 10
23886: PPUSH
23887: LD_INT 2
23889: PPUSH
23890: CALL_OW 272
23894: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23895: LD_ADDR_VAR 0 12
23899: PUSH
23900: LD_VAR 0 13
23904: PPUSH
23905: CALL_OW 251
23909: PPUSH
23910: LD_VAR 0 10
23914: PPUSH
23915: LD_INT 2
23917: PPUSH
23918: CALL_OW 273
23922: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23923: LD_VAR 0 11
23927: PPUSH
23928: LD_VAR 0 12
23932: PPUSH
23933: CALL_OW 488
23937: IFFALSE 23956
23939: PUSH
23940: LD_VAR 0 11
23944: PPUSH
23945: LD_VAR 0 12
23949: PPUSH
23950: CALL_OW 428
23954: NOT
23955: AND
23956: IFFALSE 23979
// begin ComMoveXY ( tmp , _x , _y ) ;
23958: LD_VAR 0 13
23962: PPUSH
23963: LD_VAR 0 11
23967: PPUSH
23968: LD_VAR 0 12
23972: PPUSH
23973: CALL_OW 111
// break ;
23977: GO 23981
// end ; end ;
23979: GO 23864
23981: POP
23982: POP
// end ; end ;
23983: GO 23296
23985: POP
23986: POP
// end ;
23987: LD_VAR 0 8
23991: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23992: LD_INT 0
23994: PPUSH
// result := true ;
23995: LD_ADDR_VAR 0 3
23999: PUSH
24000: LD_INT 1
24002: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24003: LD_VAR 0 2
24007: PUSH
24008: LD_INT 24
24010: DOUBLE
24011: EQUAL
24012: IFTRUE 24022
24014: LD_INT 33
24016: DOUBLE
24017: EQUAL
24018: IFTRUE 24022
24020: GO 24047
24022: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24023: LD_ADDR_VAR 0 3
24027: PUSH
24028: LD_INT 32
24030: PPUSH
24031: LD_VAR 0 1
24035: PPUSH
24036: CALL_OW 321
24040: PUSH
24041: LD_INT 2
24043: EQUAL
24044: ST_TO_ADDR
24045: GO 24363
24047: LD_INT 20
24049: DOUBLE
24050: EQUAL
24051: IFTRUE 24055
24053: GO 24080
24055: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24056: LD_ADDR_VAR 0 3
24060: PUSH
24061: LD_INT 6
24063: PPUSH
24064: LD_VAR 0 1
24068: PPUSH
24069: CALL_OW 321
24073: PUSH
24074: LD_INT 2
24076: EQUAL
24077: ST_TO_ADDR
24078: GO 24363
24080: LD_INT 22
24082: DOUBLE
24083: EQUAL
24084: IFTRUE 24094
24086: LD_INT 36
24088: DOUBLE
24089: EQUAL
24090: IFTRUE 24094
24092: GO 24119
24094: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24095: LD_ADDR_VAR 0 3
24099: PUSH
24100: LD_INT 15
24102: PPUSH
24103: LD_VAR 0 1
24107: PPUSH
24108: CALL_OW 321
24112: PUSH
24113: LD_INT 2
24115: EQUAL
24116: ST_TO_ADDR
24117: GO 24363
24119: LD_INT 30
24121: DOUBLE
24122: EQUAL
24123: IFTRUE 24127
24125: GO 24152
24127: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24128: LD_ADDR_VAR 0 3
24132: PUSH
24133: LD_INT 20
24135: PPUSH
24136: LD_VAR 0 1
24140: PPUSH
24141: CALL_OW 321
24145: PUSH
24146: LD_INT 2
24148: EQUAL
24149: ST_TO_ADDR
24150: GO 24363
24152: LD_INT 28
24154: DOUBLE
24155: EQUAL
24156: IFTRUE 24166
24158: LD_INT 21
24160: DOUBLE
24161: EQUAL
24162: IFTRUE 24166
24164: GO 24191
24166: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24167: LD_ADDR_VAR 0 3
24171: PUSH
24172: LD_INT 21
24174: PPUSH
24175: LD_VAR 0 1
24179: PPUSH
24180: CALL_OW 321
24184: PUSH
24185: LD_INT 2
24187: EQUAL
24188: ST_TO_ADDR
24189: GO 24363
24191: LD_INT 16
24193: DOUBLE
24194: EQUAL
24195: IFTRUE 24199
24197: GO 24224
24199: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24200: LD_ADDR_VAR 0 3
24204: PUSH
24205: LD_INT 84
24207: PPUSH
24208: LD_VAR 0 1
24212: PPUSH
24213: CALL_OW 321
24217: PUSH
24218: LD_INT 2
24220: EQUAL
24221: ST_TO_ADDR
24222: GO 24363
24224: LD_INT 19
24226: DOUBLE
24227: EQUAL
24228: IFTRUE 24238
24230: LD_INT 23
24232: DOUBLE
24233: EQUAL
24234: IFTRUE 24238
24236: GO 24263
24238: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24239: LD_ADDR_VAR 0 3
24243: PUSH
24244: LD_INT 83
24246: PPUSH
24247: LD_VAR 0 1
24251: PPUSH
24252: CALL_OW 321
24256: PUSH
24257: LD_INT 2
24259: EQUAL
24260: ST_TO_ADDR
24261: GO 24363
24263: LD_INT 17
24265: DOUBLE
24266: EQUAL
24267: IFTRUE 24271
24269: GO 24296
24271: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24272: LD_ADDR_VAR 0 3
24276: PUSH
24277: LD_INT 39
24279: PPUSH
24280: LD_VAR 0 1
24284: PPUSH
24285: CALL_OW 321
24289: PUSH
24290: LD_INT 2
24292: EQUAL
24293: ST_TO_ADDR
24294: GO 24363
24296: LD_INT 18
24298: DOUBLE
24299: EQUAL
24300: IFTRUE 24304
24302: GO 24329
24304: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24305: LD_ADDR_VAR 0 3
24309: PUSH
24310: LD_INT 40
24312: PPUSH
24313: LD_VAR 0 1
24317: PPUSH
24318: CALL_OW 321
24322: PUSH
24323: LD_INT 2
24325: EQUAL
24326: ST_TO_ADDR
24327: GO 24363
24329: LD_INT 27
24331: DOUBLE
24332: EQUAL
24333: IFTRUE 24337
24335: GO 24362
24337: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
24338: LD_ADDR_VAR 0 3
24342: PUSH
24343: LD_INT 35
24345: PPUSH
24346: LD_VAR 0 1
24350: PPUSH
24351: CALL_OW 321
24355: PUSH
24356: LD_INT 2
24358: EQUAL
24359: ST_TO_ADDR
24360: GO 24363
24362: POP
// end ;
24363: LD_VAR 0 3
24367: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
24368: LD_INT 0
24370: PPUSH
24371: PPUSH
24372: PPUSH
24373: PPUSH
24374: PPUSH
24375: PPUSH
24376: PPUSH
24377: PPUSH
24378: PPUSH
24379: PPUSH
24380: PPUSH
// result := false ;
24381: LD_ADDR_VAR 0 6
24385: PUSH
24386: LD_INT 0
24388: ST_TO_ADDR
// if btype = b_depot then
24389: LD_VAR 0 2
24393: PUSH
24394: LD_INT 0
24396: EQUAL
24397: IFFALSE 24409
// begin result := true ;
24399: LD_ADDR_VAR 0 6
24403: PUSH
24404: LD_INT 1
24406: ST_TO_ADDR
// exit ;
24407: GO 25263
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24409: LD_VAR 0 1
24413: NOT
24414: IFTRUE 24439
24416: PUSH
24417: LD_VAR 0 1
24421: PPUSH
24422: CALL_OW 266
24426: PUSH
24427: LD_INT 0
24429: PUSH
24430: LD_INT 1
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: IN
24437: NOT
24438: OR
24439: IFTRUE 24448
24441: PUSH
24442: LD_VAR 0 2
24446: NOT
24447: OR
24448: IFTRUE 24484
24450: PUSH
24451: LD_VAR 0 5
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: LD_INT 1
24461: PUSH
24462: LD_INT 2
24464: PUSH
24465: LD_INT 3
24467: PUSH
24468: LD_INT 4
24470: PUSH
24471: LD_INT 5
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: IN
24482: NOT
24483: OR
24484: IFTRUE 24503
24486: PUSH
24487: LD_VAR 0 3
24491: PPUSH
24492: LD_VAR 0 4
24496: PPUSH
24497: CALL_OW 488
24501: NOT
24502: OR
24503: IFFALSE 24507
// exit ;
24505: GO 25263
// side := GetSide ( depot ) ;
24507: LD_ADDR_VAR 0 9
24511: PUSH
24512: LD_VAR 0 1
24516: PPUSH
24517: CALL_OW 255
24521: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
24522: LD_VAR 0 9
24526: PPUSH
24527: LD_VAR 0 2
24531: PPUSH
24532: CALL 23992 0 2
24536: NOT
24537: IFFALSE 24541
// exit ;
24539: GO 25263
// pom := GetBase ( depot ) ;
24541: LD_ADDR_VAR 0 10
24545: PUSH
24546: LD_VAR 0 1
24550: PPUSH
24551: CALL_OW 274
24555: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24556: LD_ADDR_VAR 0 11
24560: PUSH
24561: LD_VAR 0 2
24565: PPUSH
24566: LD_VAR 0 1
24570: PPUSH
24571: CALL_OW 248
24575: PPUSH
24576: CALL_OW 450
24580: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24581: LD_VAR 0 10
24585: PPUSH
24586: LD_INT 1
24588: PPUSH
24589: CALL_OW 275
24593: PUSH
24594: LD_VAR 0 11
24598: PUSH
24599: LD_INT 1
24601: ARRAY
24602: GREATEREQUAL
24603: IFFALSE 24629
24605: PUSH
24606: LD_VAR 0 10
24610: PPUSH
24611: LD_INT 2
24613: PPUSH
24614: CALL_OW 275
24618: PUSH
24619: LD_VAR 0 11
24623: PUSH
24624: LD_INT 2
24626: ARRAY
24627: GREATEREQUAL
24628: AND
24629: IFFALSE 24655
24631: PUSH
24632: LD_VAR 0 10
24636: PPUSH
24637: LD_INT 3
24639: PPUSH
24640: CALL_OW 275
24644: PUSH
24645: LD_VAR 0 11
24649: PUSH
24650: LD_INT 3
24652: ARRAY
24653: GREATEREQUAL
24654: AND
24655: NOT
24656: IFFALSE 24660
// exit ;
24658: GO 25263
// if GetBType ( depot ) = b_depot then
24660: LD_VAR 0 1
24664: PPUSH
24665: CALL_OW 266
24669: PUSH
24670: LD_INT 0
24672: EQUAL
24673: IFFALSE 24685
// dist := 28 else
24675: LD_ADDR_VAR 0 14
24679: PUSH
24680: LD_INT 28
24682: ST_TO_ADDR
24683: GO 24693
// dist := 36 ;
24685: LD_ADDR_VAR 0 14
24689: PUSH
24690: LD_INT 36
24692: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24693: LD_VAR 0 1
24697: PPUSH
24698: LD_VAR 0 3
24702: PPUSH
24703: LD_VAR 0 4
24707: PPUSH
24708: CALL_OW 297
24712: PUSH
24713: LD_VAR 0 14
24717: GREATER
24718: IFFALSE 24722
// exit ;
24720: GO 25263
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24722: LD_ADDR_VAR 0 12
24726: PUSH
24727: LD_VAR 0 2
24731: PPUSH
24732: LD_VAR 0 3
24736: PPUSH
24737: LD_VAR 0 4
24741: PPUSH
24742: LD_VAR 0 5
24746: PPUSH
24747: LD_VAR 0 1
24751: PPUSH
24752: CALL_OW 248
24756: PPUSH
24757: LD_INT 0
24759: PPUSH
24760: CALL 25268 0 6
24764: ST_TO_ADDR
// if not hexes then
24765: LD_VAR 0 12
24769: NOT
24770: IFFALSE 24774
// exit ;
24772: GO 25263
// hex := GetHexInfo ( x , y ) ;
24774: LD_ADDR_VAR 0 15
24778: PUSH
24779: LD_VAR 0 3
24783: PPUSH
24784: LD_VAR 0 4
24788: PPUSH
24789: CALL_OW 546
24793: ST_TO_ADDR
// if hex [ 1 ] then
24794: LD_VAR 0 15
24798: PUSH
24799: LD_INT 1
24801: ARRAY
24802: IFFALSE 24806
// exit ;
24804: GO 25263
// height := hex [ 2 ] ;
24806: LD_ADDR_VAR 0 13
24810: PUSH
24811: LD_VAR 0 15
24815: PUSH
24816: LD_INT 2
24818: ARRAY
24819: ST_TO_ADDR
// for i = 1 to hexes do
24820: LD_ADDR_VAR 0 7
24824: PUSH
24825: DOUBLE
24826: LD_INT 1
24828: DEC
24829: ST_TO_ADDR
24830: LD_VAR 0 12
24834: PUSH
24835: FOR_TO
24836: IFFALSE 25180
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24838: LD_VAR 0 12
24842: PUSH
24843: LD_VAR 0 7
24847: ARRAY
24848: PUSH
24849: LD_INT 1
24851: ARRAY
24852: PPUSH
24853: LD_VAR 0 12
24857: PUSH
24858: LD_VAR 0 7
24862: ARRAY
24863: PUSH
24864: LD_INT 2
24866: ARRAY
24867: PPUSH
24868: CALL_OW 488
24872: NOT
24873: IFTRUE 24915
24875: PUSH
24876: LD_VAR 0 12
24880: PUSH
24881: LD_VAR 0 7
24885: ARRAY
24886: PUSH
24887: LD_INT 1
24889: ARRAY
24890: PPUSH
24891: LD_VAR 0 12
24895: PUSH
24896: LD_VAR 0 7
24900: ARRAY
24901: PUSH
24902: LD_INT 2
24904: ARRAY
24905: PPUSH
24906: CALL_OW 428
24910: PUSH
24911: LD_INT 0
24913: GREATER
24914: OR
24915: IFTRUE 24953
24917: PUSH
24918: LD_VAR 0 12
24922: PUSH
24923: LD_VAR 0 7
24927: ARRAY
24928: PUSH
24929: LD_INT 1
24931: ARRAY
24932: PPUSH
24933: LD_VAR 0 12
24937: PUSH
24938: LD_VAR 0 7
24942: ARRAY
24943: PUSH
24944: LD_INT 2
24946: ARRAY
24947: PPUSH
24948: CALL_OW 351
24952: OR
24953: IFFALSE 24959
// exit ;
24955: POP
24956: POP
24957: GO 25263
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24959: LD_ADDR_VAR 0 8
24963: PUSH
24964: LD_VAR 0 12
24968: PUSH
24969: LD_VAR 0 7
24973: ARRAY
24974: PUSH
24975: LD_INT 1
24977: ARRAY
24978: PPUSH
24979: LD_VAR 0 12
24983: PUSH
24984: LD_VAR 0 7
24988: ARRAY
24989: PUSH
24990: LD_INT 2
24992: ARRAY
24993: PPUSH
24994: CALL_OW 546
24998: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24999: LD_VAR 0 8
25003: PUSH
25004: LD_INT 1
25006: ARRAY
25007: IFTRUE 25029
25009: PUSH
25010: LD_VAR 0 8
25014: PUSH
25015: LD_INT 2
25017: ARRAY
25018: PUSH
25019: LD_VAR 0 13
25023: PUSH
25024: LD_INT 2
25026: PLUS
25027: GREATER
25028: OR
25029: IFTRUE 25051
25031: PUSH
25032: LD_VAR 0 8
25036: PUSH
25037: LD_INT 2
25039: ARRAY
25040: PUSH
25041: LD_VAR 0 13
25045: PUSH
25046: LD_INT 2
25048: MINUS
25049: LESS
25050: OR
25051: IFTRUE 25119
25053: PUSH
25054: LD_VAR 0 8
25058: PUSH
25059: LD_INT 3
25061: ARRAY
25062: PUSH
25063: LD_INT 0
25065: PUSH
25066: LD_INT 8
25068: PUSH
25069: LD_INT 9
25071: PUSH
25072: LD_INT 10
25074: PUSH
25075: LD_INT 11
25077: PUSH
25078: LD_INT 12
25080: PUSH
25081: LD_INT 13
25083: PUSH
25084: LD_INT 16
25086: PUSH
25087: LD_INT 17
25089: PUSH
25090: LD_INT 18
25092: PUSH
25093: LD_INT 19
25095: PUSH
25096: LD_INT 20
25098: PUSH
25099: LD_INT 21
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: IN
25117: NOT
25118: OR
25119: IFTRUE 25132
25121: PUSH
25122: LD_VAR 0 8
25126: PUSH
25127: LD_INT 5
25129: ARRAY
25130: NOT
25131: OR
25132: IFTRUE 25172
25134: PUSH
25135: LD_VAR 0 8
25139: PUSH
25140: LD_INT 6
25142: ARRAY
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: LD_INT 2
25149: PUSH
25150: LD_INT 7
25152: PUSH
25153: LD_INT 9
25155: PUSH
25156: LD_INT 10
25158: PUSH
25159: LD_INT 11
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: IN
25170: NOT
25171: OR
25172: IFFALSE 25178
// exit ;
25174: POP
25175: POP
25176: GO 25263
// end ;
25178: GO 24835
25180: POP
25181: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25182: LD_VAR 0 9
25186: PPUSH
25187: LD_VAR 0 3
25191: PPUSH
25192: LD_VAR 0 4
25196: PPUSH
25197: LD_INT 20
25199: PPUSH
25200: CALL 17082 0 4
25204: PUSH
25205: LD_INT 4
25207: ARRAY
25208: IFFALSE 25212
// exit ;
25210: GO 25263
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25212: LD_VAR 0 2
25216: PUSH
25217: LD_INT 29
25219: PUSH
25220: LD_INT 30
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: IN
25227: IFFALSE 25251
25229: PUSH
25230: LD_VAR 0 3
25234: PPUSH
25235: LD_VAR 0 4
25239: PPUSH
25240: LD_VAR 0 9
25244: PPUSH
25245: CALL_OW 440
25249: NOT
25250: AND
25251: IFFALSE 25255
// exit ;
25253: GO 25263
// result := true ;
25255: LD_ADDR_VAR 0 6
25259: PUSH
25260: LD_INT 1
25262: ST_TO_ADDR
// end ;
25263: LD_VAR 0 6
25267: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25268: LD_INT 0
25270: PPUSH
25271: PPUSH
25272: PPUSH
25273: PPUSH
25274: PPUSH
25275: PPUSH
25276: PPUSH
25277: PPUSH
25278: PPUSH
25279: PPUSH
25280: PPUSH
25281: PPUSH
25282: PPUSH
25283: PPUSH
25284: PPUSH
25285: PPUSH
25286: PPUSH
25287: PPUSH
25288: PPUSH
25289: PPUSH
25290: PPUSH
25291: PPUSH
25292: PPUSH
25293: PPUSH
25294: PPUSH
25295: PPUSH
25296: PPUSH
25297: PPUSH
25298: PPUSH
25299: PPUSH
25300: PPUSH
25301: PPUSH
25302: PPUSH
25303: PPUSH
25304: PPUSH
25305: PPUSH
25306: PPUSH
25307: PPUSH
25308: PPUSH
25309: PPUSH
25310: PPUSH
25311: PPUSH
25312: PPUSH
25313: PPUSH
25314: PPUSH
25315: PPUSH
25316: PPUSH
25317: PPUSH
25318: PPUSH
25319: PPUSH
25320: PPUSH
25321: PPUSH
25322: PPUSH
25323: PPUSH
25324: PPUSH
25325: PPUSH
25326: PPUSH
25327: PPUSH
// result = [ ] ;
25328: LD_ADDR_VAR 0 7
25332: PUSH
25333: EMPTY
25334: ST_TO_ADDR
// temp_list = [ ] ;
25335: LD_ADDR_VAR 0 9
25339: PUSH
25340: EMPTY
25341: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25342: LD_VAR 0 4
25346: PUSH
25347: LD_INT 0
25349: PUSH
25350: LD_INT 1
25352: PUSH
25353: LD_INT 2
25355: PUSH
25356: LD_INT 3
25358: PUSH
25359: LD_INT 4
25361: PUSH
25362: LD_INT 5
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: IN
25373: NOT
25374: IFTRUE 25417
25376: PUSH
25377: LD_VAR 0 1
25381: PUSH
25382: LD_INT 0
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: IN
25392: IFFALSE 25416
25394: PUSH
25395: LD_VAR 0 5
25399: PUSH
25400: LD_INT 1
25402: PUSH
25403: LD_INT 2
25405: PUSH
25406: LD_INT 3
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: LIST
25413: IN
25414: NOT
25415: AND
25416: OR
25417: IFFALSE 25421
// exit ;
25419: GO 43820
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25421: LD_VAR 0 1
25425: PUSH
25426: LD_INT 6
25428: PUSH
25429: LD_INT 7
25431: PUSH
25432: LD_INT 8
25434: PUSH
25435: LD_INT 13
25437: PUSH
25438: LD_INT 12
25440: PUSH
25441: LD_INT 15
25443: PUSH
25444: LD_INT 11
25446: PUSH
25447: LD_INT 14
25449: PUSH
25450: LD_INT 10
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: IN
25464: IFFALSE 25474
// btype = b_lab ;
25466: LD_ADDR_VAR 0 1
25470: PUSH
25471: LD_INT 6
25473: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25474: LD_VAR 0 6
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: LD_INT 1
25484: PUSH
25485: LD_INT 2
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: LIST
25492: IN
25493: NOT
25494: IFTRUE 25562
25496: PUSH
25497: LD_VAR 0 1
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: LD_INT 1
25507: PUSH
25508: LD_INT 2
25510: PUSH
25511: LD_INT 3
25513: PUSH
25514: LD_INT 6
25516: PUSH
25517: LD_INT 36
25519: PUSH
25520: LD_INT 4
25522: PUSH
25523: LD_INT 5
25525: PUSH
25526: LD_INT 31
25528: PUSH
25529: LD_INT 32
25531: PUSH
25532: LD_INT 33
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: IN
25548: NOT
25549: IFFALSE 25561
25551: PUSH
25552: LD_VAR 0 6
25556: PUSH
25557: LD_INT 1
25559: EQUAL
25560: AND
25561: OR
25562: IFTRUE 25594
25564: PUSH
25565: LD_VAR 0 1
25569: PUSH
25570: LD_INT 2
25572: PUSH
25573: LD_INT 3
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: IN
25580: NOT
25581: IFFALSE 25593
25583: PUSH
25584: LD_VAR 0 6
25588: PUSH
25589: LD_INT 2
25591: EQUAL
25592: AND
25593: OR
25594: IFFALSE 25604
// mode = 0 ;
25596: LD_ADDR_VAR 0 6
25600: PUSH
25601: LD_INT 0
25603: ST_TO_ADDR
// case mode of 0 :
25604: LD_VAR 0 6
25608: PUSH
25609: LD_INT 0
25611: DOUBLE
25612: EQUAL
25613: IFTRUE 25617
25615: GO 37070
25617: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25618: LD_ADDR_VAR 0 11
25622: PUSH
25623: LD_INT 0
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 0
25635: PUSH
25636: LD_INT 1
25638: NEG
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 1
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 1
25656: PUSH
25657: LD_INT 1
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 0
25666: PUSH
25667: LD_INT 1
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: LD_INT 0
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 1
25687: NEG
25688: PUSH
25689: LD_INT 1
25691: NEG
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 1
25699: NEG
25700: PUSH
25701: LD_INT 2
25703: NEG
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: LD_INT 2
25714: NEG
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: LD_INT 1
25725: NEG
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 1
25733: PUSH
25734: LD_INT 2
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 0
25743: PUSH
25744: LD_INT 2
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 1
25753: NEG
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: LD_INT 3
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 0
25774: PUSH
25775: LD_INT 3
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 1
25784: NEG
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25811: LD_ADDR_VAR 0 12
25815: PUSH
25816: LD_INT 0
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 0
25828: PUSH
25829: LD_INT 1
25831: NEG
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 1
25839: PUSH
25840: LD_INT 0
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 1
25849: PUSH
25850: LD_INT 1
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 0
25859: PUSH
25860: LD_INT 1
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 1
25880: NEG
25881: PUSH
25882: LD_INT 1
25884: NEG
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: LD_INT 1
25895: NEG
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 2
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 2
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 1
25923: NEG
25924: PUSH
25925: LD_INT 1
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 2
25934: NEG
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 2
25945: NEG
25946: PUSH
25947: LD_INT 1
25949: NEG
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 2
25957: NEG
25958: PUSH
25959: LD_INT 1
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 3
25968: NEG
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 3
25979: NEG
25980: PUSH
25981: LD_INT 1
25983: NEG
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26007: LD_ADDR_VAR 0 13
26011: PUSH
26012: LD_INT 0
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 0
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 1
26035: PUSH
26036: LD_INT 0
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 1
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 0
26055: PUSH
26056: LD_INT 1
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 1
26065: NEG
26066: PUSH
26067: LD_INT 0
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 1
26076: NEG
26077: PUSH
26078: LD_INT 1
26080: NEG
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 1
26088: NEG
26089: PUSH
26090: LD_INT 2
26092: NEG
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 2
26100: PUSH
26101: LD_INT 1
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 2
26110: PUSH
26111: LD_INT 2
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 1
26120: PUSH
26121: LD_INT 2
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 2
26130: NEG
26131: PUSH
26132: LD_INT 1
26134: NEG
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 2
26142: NEG
26143: PUSH
26144: LD_INT 2
26146: NEG
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 2
26154: NEG
26155: PUSH
26156: LD_INT 3
26158: NEG
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 3
26166: NEG
26167: PUSH
26168: LD_INT 2
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 3
26178: NEG
26179: PUSH
26180: LD_INT 3
26182: NEG
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26206: LD_ADDR_VAR 0 14
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: LD_INT 0
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: LD_INT 0
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 0
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 1
26264: NEG
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: LD_INT 1
26279: NEG
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: LD_INT 2
26291: NEG
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 0
26299: PUSH
26300: LD_INT 2
26302: NEG
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 1
26310: PUSH
26311: LD_INT 1
26313: NEG
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 1
26321: PUSH
26322: LD_INT 2
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: LD_INT 2
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 1
26341: NEG
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: NEG
26353: PUSH
26354: LD_INT 3
26356: NEG
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: LD_INT 3
26367: NEG
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 1
26375: PUSH
26376: LD_INT 2
26378: NEG
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26402: LD_ADDR_VAR 0 15
26406: PUSH
26407: LD_INT 0
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: LD_INT 1
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 1
26471: NEG
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: LD_INT 1
26486: NEG
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 2
26494: PUSH
26495: LD_INT 0
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 2
26504: PUSH
26505: LD_INT 1
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 1
26514: NEG
26515: PUSH
26516: LD_INT 1
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 2
26525: NEG
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 2
26536: NEG
26537: PUSH
26538: LD_INT 1
26540: NEG
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 2
26548: PUSH
26549: LD_INT 1
26551: NEG
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 3
26559: PUSH
26560: LD_INT 0
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 3
26569: PUSH
26570: LD_INT 1
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26595: LD_ADDR_VAR 0 16
26599: PUSH
26600: LD_INT 0
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 0
26612: PUSH
26613: LD_INT 1
26615: NEG
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: PUSH
26634: LD_INT 1
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 0
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 1
26653: NEG
26654: PUSH
26655: LD_INT 0
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 1
26664: NEG
26665: PUSH
26666: LD_INT 1
26668: NEG
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PUSH
26678: LD_INT 2
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 2
26688: PUSH
26689: LD_INT 1
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 2
26698: PUSH
26699: LD_INT 2
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 1
26708: PUSH
26709: LD_INT 2
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 2
26718: NEG
26719: PUSH
26720: LD_INT 1
26722: NEG
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 2
26730: NEG
26731: PUSH
26732: LD_INT 2
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 3
26742: PUSH
26743: LD_INT 2
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 3
26752: PUSH
26753: LD_INT 3
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 2
26762: PUSH
26763: LD_INT 3
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26788: LD_ADDR_VAR 0 17
26792: PUSH
26793: LD_INT 0
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 0
26805: PUSH
26806: LD_INT 1
26808: NEG
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 1
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 1
26826: PUSH
26827: LD_INT 1
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: LD_INT 1
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: NEG
26847: PUSH
26848: LD_INT 0
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 1
26857: NEG
26858: PUSH
26859: LD_INT 1
26861: NEG
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 1
26869: NEG
26870: PUSH
26871: LD_INT 2
26873: NEG
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: LD_INT 2
26884: NEG
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: LD_INT 1
26895: NEG
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 2
26903: PUSH
26904: LD_INT 0
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: LD_INT 1
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 2
26923: PUSH
26924: LD_INT 2
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: LD_INT 2
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 0
26943: PUSH
26944: LD_INT 2
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: NEG
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 2
26964: NEG
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 2
26975: NEG
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 2
26987: NEG
26988: PUSH
26989: LD_INT 2
26991: NEG
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27018: LD_ADDR_VAR 0 18
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: LD_INT 0
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: LD_INT 1
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: NEG
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 1
27087: NEG
27088: PUSH
27089: LD_INT 1
27091: NEG
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 1
27099: NEG
27100: PUSH
27101: LD_INT 2
27103: NEG
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: LD_INT 2
27114: NEG
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: LD_INT 1
27125: NEG
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 2
27133: PUSH
27134: LD_INT 0
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 2
27143: PUSH
27144: LD_INT 1
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 2
27153: PUSH
27154: LD_INT 2
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: LD_INT 2
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: LD_INT 2
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 1
27183: NEG
27184: PUSH
27185: LD_INT 1
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 2
27194: NEG
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 2
27205: NEG
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 2
27217: NEG
27218: PUSH
27219: LD_INT 2
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27248: LD_ADDR_VAR 0 19
27252: PUSH
27253: LD_INT 0
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 0
27265: PUSH
27266: LD_INT 1
27268: NEG
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 1
27276: PUSH
27277: LD_INT 0
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 1
27286: PUSH
27287: LD_INT 1
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 0
27296: PUSH
27297: LD_INT 1
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 1
27306: NEG
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 1
27317: NEG
27318: PUSH
27319: LD_INT 1
27321: NEG
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 1
27329: NEG
27330: PUSH
27331: LD_INT 2
27333: NEG
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: LD_INT 2
27344: NEG
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: LD_INT 1
27355: NEG
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 2
27363: PUSH
27364: LD_INT 0
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 2
27373: PUSH
27374: LD_INT 1
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 2
27383: PUSH
27384: LD_INT 2
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: LD_INT 2
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: LD_INT 2
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 1
27413: NEG
27414: PUSH
27415: LD_INT 1
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 2
27424: NEG
27425: PUSH
27426: LD_INT 0
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 2
27435: NEG
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 2
27447: NEG
27448: PUSH
27449: LD_INT 2
27451: NEG
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27478: LD_ADDR_VAR 0 20
27482: PUSH
27483: LD_INT 0
27485: PUSH
27486: LD_INT 0
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 0
27495: PUSH
27496: LD_INT 1
27498: NEG
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 1
27506: PUSH
27507: LD_INT 0
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 1
27516: PUSH
27517: LD_INT 1
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 0
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 1
27536: NEG
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 1
27547: NEG
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 1
27559: NEG
27560: PUSH
27561: LD_INT 2
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 0
27571: PUSH
27572: LD_INT 2
27574: NEG
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 1
27582: PUSH
27583: LD_INT 1
27585: NEG
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 2
27593: PUSH
27594: LD_INT 0
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 2
27603: PUSH
27604: LD_INT 1
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 2
27613: PUSH
27614: LD_INT 2
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 1
27623: PUSH
27624: LD_INT 2
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: LD_INT 2
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 1
27643: NEG
27644: PUSH
27645: LD_INT 1
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 2
27654: NEG
27655: PUSH
27656: LD_INT 0
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 2
27665: NEG
27666: PUSH
27667: LD_INT 1
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 2
27677: NEG
27678: PUSH
27679: LD_INT 2
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27708: LD_ADDR_VAR 0 21
27712: PUSH
27713: LD_INT 0
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 0
27725: PUSH
27726: LD_INT 1
27728: NEG
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 1
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 1
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 0
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 1
27766: NEG
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: LD_INT 2
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 0
27801: PUSH
27802: LD_INT 2
27804: NEG
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: LD_INT 1
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 2
27823: PUSH
27824: LD_INT 0
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 2
27833: PUSH
27834: LD_INT 1
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 2
27843: PUSH
27844: LD_INT 2
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 1
27853: PUSH
27854: LD_INT 2
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: LD_INT 2
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 1
27873: NEG
27874: PUSH
27875: LD_INT 1
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 2
27884: NEG
27885: PUSH
27886: LD_INT 0
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 2
27895: NEG
27896: PUSH
27897: LD_INT 1
27899: NEG
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 2
27907: NEG
27908: PUSH
27909: LD_INT 2
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27938: LD_ADDR_VAR 0 22
27942: PUSH
27943: LD_INT 0
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 0
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 1
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 1
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 0
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 1
27996: NEG
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: NEG
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 1
28019: NEG
28020: PUSH
28021: LD_INT 2
28023: NEG
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: LD_INT 2
28034: NEG
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: LD_INT 1
28045: NEG
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 2
28053: PUSH
28054: LD_INT 0
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 2
28063: PUSH
28064: LD_INT 1
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 2
28073: PUSH
28074: LD_INT 2
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 1
28083: PUSH
28084: LD_INT 2
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: LD_INT 2
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 1
28103: NEG
28104: PUSH
28105: LD_INT 1
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 2
28114: NEG
28115: PUSH
28116: LD_INT 0
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 2
28125: NEG
28126: PUSH
28127: LD_INT 1
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 2
28137: NEG
28138: PUSH
28139: LD_INT 2
28141: NEG
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28168: LD_ADDR_VAR 0 23
28172: PUSH
28173: LD_INT 0
28175: PUSH
28176: LD_INT 0
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: LD_INT 1
28188: NEG
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 1
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 1
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 0
28216: PUSH
28217: LD_INT 1
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 1
28226: NEG
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 1
28237: NEG
28238: PUSH
28239: LD_INT 1
28241: NEG
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 1
28249: NEG
28250: PUSH
28251: LD_INT 2
28253: NEG
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: LD_INT 2
28264: NEG
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: LD_INT 1
28275: NEG
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 2
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 2
28293: PUSH
28294: LD_INT 1
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 2
28303: PUSH
28304: LD_INT 2
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 1
28313: PUSH
28314: LD_INT 2
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 0
28323: PUSH
28324: LD_INT 2
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 1
28333: NEG
28334: PUSH
28335: LD_INT 1
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 2
28344: NEG
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 2
28355: NEG
28356: PUSH
28357: LD_INT 1
28359: NEG
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 2
28367: NEG
28368: PUSH
28369: LD_INT 2
28371: NEG
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 2
28379: NEG
28380: PUSH
28381: LD_INT 3
28383: NEG
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: LD_INT 3
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 1
28403: PUSH
28404: LD_INT 2
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 2
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28448: LD_ADDR_VAR 0 24
28452: PUSH
28453: LD_INT 0
28455: PUSH
28456: LD_INT 0
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 0
28465: PUSH
28466: LD_INT 1
28468: NEG
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 1
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 1
28486: PUSH
28487: LD_INT 1
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 0
28496: PUSH
28497: LD_INT 1
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 1
28506: NEG
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 1
28517: NEG
28518: PUSH
28519: LD_INT 1
28521: NEG
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 1
28529: NEG
28530: PUSH
28531: LD_INT 2
28533: NEG
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: LD_INT 2
28544: NEG
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: LD_INT 1
28555: NEG
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 2
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 2
28573: PUSH
28574: LD_INT 1
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 2
28583: PUSH
28584: LD_INT 2
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 1
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 0
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 1
28613: NEG
28614: PUSH
28615: LD_INT 1
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 2
28624: NEG
28625: PUSH
28626: LD_INT 0
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 2
28635: NEG
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 2
28647: NEG
28648: PUSH
28649: LD_INT 2
28651: NEG
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 1
28659: PUSH
28660: LD_INT 2
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 2
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 3
28681: PUSH
28682: LD_INT 1
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 3
28691: PUSH
28692: LD_INT 2
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28724: LD_ADDR_VAR 0 25
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: LD_INT 0
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 0
28741: PUSH
28742: LD_INT 1
28744: NEG
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 0
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 1
28782: NEG
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 1
28793: NEG
28794: PUSH
28795: LD_INT 1
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: LD_INT 2
28809: NEG
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: LD_INT 2
28820: NEG
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 2
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 2
28849: PUSH
28850: LD_INT 1
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: LD_INT 2
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: LD_INT 2
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 1
28889: NEG
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 2
28900: NEG
28901: PUSH
28902: LD_INT 0
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 2
28911: NEG
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 2
28923: NEG
28924: PUSH
28925: LD_INT 2
28927: NEG
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 3
28935: PUSH
28936: LD_INT 1
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 3
28945: PUSH
28946: LD_INT 2
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 2
28955: PUSH
28956: LD_INT 3
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 1
28965: PUSH
28966: LD_INT 3
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28998: LD_ADDR_VAR 0 26
29002: PUSH
29003: LD_INT 0
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: LD_INT 1
29018: NEG
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 1
29026: PUSH
29027: LD_INT 0
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 1
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 0
29046: PUSH
29047: LD_INT 1
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 1
29056: NEG
29057: PUSH
29058: LD_INT 0
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 1
29067: NEG
29068: PUSH
29069: LD_INT 1
29071: NEG
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 1
29079: NEG
29080: PUSH
29081: LD_INT 2
29083: NEG
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 0
29091: PUSH
29092: LD_INT 2
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 1
29102: PUSH
29103: LD_INT 1
29105: NEG
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 2
29113: PUSH
29114: LD_INT 0
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 2
29123: PUSH
29124: LD_INT 1
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 2
29133: PUSH
29134: LD_INT 2
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 1
29143: PUSH
29144: LD_INT 2
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: LD_INT 2
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: NEG
29164: PUSH
29165: LD_INT 1
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 2
29174: NEG
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 2
29185: NEG
29186: PUSH
29187: LD_INT 1
29189: NEG
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 2
29197: NEG
29198: PUSH
29199: LD_INT 2
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 2
29209: PUSH
29210: LD_INT 3
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 1
29219: PUSH
29220: LD_INT 3
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 1
29229: NEG
29230: PUSH
29231: LD_INT 2
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 2
29240: NEG
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29274: LD_ADDR_VAR 0 27
29278: PUSH
29279: LD_INT 0
29281: PUSH
29282: LD_INT 0
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 0
29291: PUSH
29292: LD_INT 1
29294: NEG
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 1
29302: PUSH
29303: LD_INT 0
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 1
29312: PUSH
29313: LD_INT 1
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 0
29322: PUSH
29323: LD_INT 1
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 1
29332: NEG
29333: PUSH
29334: LD_INT 0
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: LD_INT 1
29347: NEG
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 1
29355: NEG
29356: PUSH
29357: LD_INT 2
29359: NEG
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: LD_INT 2
29370: NEG
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 1
29378: PUSH
29379: LD_INT 1
29381: NEG
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 2
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 2
29399: PUSH
29400: LD_INT 1
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 2
29409: PUSH
29410: LD_INT 2
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: LD_INT 2
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 0
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 1
29439: NEG
29440: PUSH
29441: LD_INT 1
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 2
29450: NEG
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 2
29461: NEG
29462: PUSH
29463: LD_INT 1
29465: NEG
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 2
29473: NEG
29474: PUSH
29475: LD_INT 2
29477: NEG
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 1
29485: NEG
29486: PUSH
29487: LD_INT 2
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 2
29496: NEG
29497: PUSH
29498: LD_INT 1
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 3
29507: NEG
29508: PUSH
29509: LD_INT 1
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 3
29519: NEG
29520: PUSH
29521: LD_INT 2
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29554: LD_ADDR_VAR 0 28
29558: PUSH
29559: LD_INT 0
29561: PUSH
29562: LD_INT 0
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 0
29571: PUSH
29572: LD_INT 1
29574: NEG
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 1
29582: PUSH
29583: LD_INT 0
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 1
29592: PUSH
29593: LD_INT 1
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 0
29602: PUSH
29603: LD_INT 1
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 1
29612: NEG
29613: PUSH
29614: LD_INT 0
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 1
29623: NEG
29624: PUSH
29625: LD_INT 1
29627: NEG
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: NEG
29636: PUSH
29637: LD_INT 2
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 0
29647: PUSH
29648: LD_INT 2
29650: NEG
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 1
29658: PUSH
29659: LD_INT 1
29661: NEG
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 2
29669: PUSH
29670: LD_INT 0
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 2
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 2
29689: PUSH
29690: LD_INT 2
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 1
29699: PUSH
29700: LD_INT 2
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: LD_INT 2
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 1
29719: NEG
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 2
29730: NEG
29731: PUSH
29732: LD_INT 0
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 2
29741: NEG
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 2
29753: NEG
29754: PUSH
29755: LD_INT 2
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 2
29765: NEG
29766: PUSH
29767: LD_INT 3
29769: NEG
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 1
29777: NEG
29778: PUSH
29779: LD_INT 3
29781: NEG
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 3
29789: NEG
29790: PUSH
29791: LD_INT 1
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 3
29801: NEG
29802: PUSH
29803: LD_INT 2
29805: NEG
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29836: LD_ADDR_VAR 0 29
29840: PUSH
29841: LD_INT 0
29843: PUSH
29844: LD_INT 0
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 0
29853: PUSH
29854: LD_INT 1
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 1
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 1
29874: PUSH
29875: LD_INT 1
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 0
29884: PUSH
29885: LD_INT 1
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 1
29894: NEG
29895: PUSH
29896: LD_INT 0
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 1
29905: NEG
29906: PUSH
29907: LD_INT 1
29909: NEG
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 1
29917: NEG
29918: PUSH
29919: LD_INT 2
29921: NEG
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 0
29929: PUSH
29930: LD_INT 2
29932: NEG
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 1
29940: PUSH
29941: LD_INT 1
29943: NEG
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 2
29951: PUSH
29952: LD_INT 0
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 2
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: LD_INT 2
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 0
29981: PUSH
29982: LD_INT 2
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 1
29991: NEG
29992: PUSH
29993: LD_INT 1
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 2
30002: NEG
30003: PUSH
30004: LD_INT 1
30006: NEG
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 2
30014: NEG
30015: PUSH
30016: LD_INT 2
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 2
30026: NEG
30027: PUSH
30028: LD_INT 3
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 2
30038: PUSH
30039: LD_INT 1
30041: NEG
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 3
30049: PUSH
30050: LD_INT 1
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 1
30059: PUSH
30060: LD_INT 3
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 1
30069: NEG
30070: PUSH
30071: LD_INT 2
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 3
30080: NEG
30081: PUSH
30082: LD_INT 2
30084: NEG
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30115: LD_ADDR_VAR 0 30
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: LD_INT 0
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 0
30132: PUSH
30133: LD_INT 1
30135: NEG
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 1
30143: PUSH
30144: LD_INT 0
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 1
30153: PUSH
30154: LD_INT 1
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 0
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 1
30173: NEG
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 1
30184: NEG
30185: PUSH
30186: LD_INT 1
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 1
30196: NEG
30197: PUSH
30198: LD_INT 2
30200: NEG
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: LD_INT 2
30211: NEG
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 1
30219: PUSH
30220: LD_INT 1
30222: NEG
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 2
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 2
30240: PUSH
30241: LD_INT 1
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 2
30250: PUSH
30251: LD_INT 2
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: LD_INT 2
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 1
30270: NEG
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 2
30281: NEG
30282: PUSH
30283: LD_INT 0
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 2
30292: NEG
30293: PUSH
30294: LD_INT 1
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 1
30304: NEG
30305: PUSH
30306: LD_INT 3
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 1
30316: PUSH
30317: LD_INT 2
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 3
30327: PUSH
30328: LD_INT 2
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 2
30337: PUSH
30338: LD_INT 3
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 2
30347: NEG
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 3
30358: NEG
30359: PUSH
30360: LD_INT 1
30362: NEG
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30393: LD_ADDR_VAR 0 31
30397: PUSH
30398: LD_INT 0
30400: PUSH
30401: LD_INT 0
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 0
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 1
30421: PUSH
30422: LD_INT 0
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 1
30431: PUSH
30432: LD_INT 1
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 0
30441: PUSH
30442: LD_INT 1
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 1
30451: NEG
30452: PUSH
30453: LD_INT 0
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 1
30462: NEG
30463: PUSH
30464: LD_INT 1
30466: NEG
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 1
30474: NEG
30475: PUSH
30476: LD_INT 2
30478: NEG
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 1
30486: PUSH
30487: LD_INT 1
30489: NEG
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 2
30497: PUSH
30498: LD_INT 0
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 2
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 2
30517: PUSH
30518: LD_INT 2
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 1
30527: PUSH
30528: LD_INT 2
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 0
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 1
30547: NEG
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 2
30558: NEG
30559: PUSH
30560: LD_INT 1
30562: NEG
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 2
30570: NEG
30571: PUSH
30572: LD_INT 2
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 2
30582: NEG
30583: PUSH
30584: LD_INT 3
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 2
30594: PUSH
30595: LD_INT 1
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 3
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 1
30615: PUSH
30616: LD_INT 3
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 1
30625: NEG
30626: PUSH
30627: LD_INT 2
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 3
30636: NEG
30637: PUSH
30638: LD_INT 2
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30671: LD_ADDR_VAR 0 32
30675: PUSH
30676: LD_INT 0
30678: PUSH
30679: LD_INT 0
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 0
30688: PUSH
30689: LD_INT 1
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 1
30699: PUSH
30700: LD_INT 0
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: LD_INT 1
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 0
30719: PUSH
30720: LD_INT 1
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 1
30729: NEG
30730: PUSH
30731: LD_INT 0
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 1
30740: NEG
30741: PUSH
30742: LD_INT 1
30744: NEG
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 1
30752: NEG
30753: PUSH
30754: LD_INT 2
30756: NEG
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 0
30764: PUSH
30765: LD_INT 2
30767: NEG
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 1
30775: PUSH
30776: LD_INT 1
30778: NEG
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 2
30786: PUSH
30787: LD_INT 1
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 2
30796: PUSH
30797: LD_INT 2
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: LD_INT 2
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: LD_INT 2
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: NEG
30827: PUSH
30828: LD_INT 1
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 2
30837: NEG
30838: PUSH
30839: LD_INT 0
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 2
30848: NEG
30849: PUSH
30850: LD_INT 1
30852: NEG
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 1
30860: NEG
30861: PUSH
30862: LD_INT 3
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: LD_INT 2
30875: NEG
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 3
30883: PUSH
30884: LD_INT 2
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 2
30893: PUSH
30894: LD_INT 3
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 2
30903: NEG
30904: PUSH
30905: LD_INT 1
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 3
30914: NEG
30915: PUSH
30916: LD_INT 1
30918: NEG
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30949: LD_ADDR_VAR 0 33
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: LD_INT 0
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: LD_INT 1
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: LD_INT 0
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 1
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 0
30997: PUSH
30998: LD_INT 1
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 1
31007: NEG
31008: PUSH
31009: LD_INT 0
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 1
31018: NEG
31019: PUSH
31020: LD_INT 1
31022: NEG
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: LD_INT 2
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: LD_INT 1
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 2
31053: PUSH
31054: LD_INT 0
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 2
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: LD_INT 2
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: LD_INT 2
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 1
31093: NEG
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 2
31104: NEG
31105: PUSH
31106: LD_INT 0
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 2
31115: NEG
31116: PUSH
31117: LD_INT 1
31119: NEG
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 2
31127: NEG
31128: PUSH
31129: LD_INT 2
31131: NEG
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 2
31139: NEG
31140: PUSH
31141: LD_INT 3
31143: NEG
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 2
31151: PUSH
31152: LD_INT 1
31154: NEG
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 3
31162: PUSH
31163: LD_INT 1
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 1
31172: PUSH
31173: LD_INT 3
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 1
31182: NEG
31183: PUSH
31184: LD_INT 2
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 3
31193: NEG
31194: PUSH
31195: LD_INT 2
31197: NEG
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31228: LD_ADDR_VAR 0 34
31232: PUSH
31233: LD_INT 0
31235: PUSH
31236: LD_INT 0
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 0
31245: PUSH
31246: LD_INT 1
31248: NEG
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: LD_INT 0
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 1
31266: PUSH
31267: LD_INT 1
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 0
31276: PUSH
31277: LD_INT 1
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: NEG
31287: PUSH
31288: LD_INT 0
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 1
31297: NEG
31298: PUSH
31299: LD_INT 1
31301: NEG
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: NEG
31310: PUSH
31311: LD_INT 2
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 0
31321: PUSH
31322: LD_INT 2
31324: NEG
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 1
31332: PUSH
31333: LD_INT 1
31335: NEG
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 2
31343: PUSH
31344: LD_INT 1
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 2
31353: PUSH
31354: LD_INT 2
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 1
31363: PUSH
31364: LD_INT 2
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 1
31373: NEG
31374: PUSH
31375: LD_INT 1
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 2
31384: NEG
31385: PUSH
31386: LD_INT 0
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 2
31395: NEG
31396: PUSH
31397: LD_INT 1
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 2
31407: NEG
31408: PUSH
31409: LD_INT 2
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: LD_INT 3
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: LD_INT 2
31434: NEG
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 3
31442: PUSH
31443: LD_INT 2
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: LD_INT 3
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 2
31462: NEG
31463: PUSH
31464: LD_INT 1
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 3
31473: NEG
31474: PUSH
31475: LD_INT 1
31477: NEG
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31508: LD_ADDR_VAR 0 35
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: LD_INT 1
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 0
31556: PUSH
31557: LD_INT 1
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 1
31566: NEG
31567: PUSH
31568: LD_INT 0
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 1
31577: NEG
31578: PUSH
31579: LD_INT 1
31581: NEG
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 2
31589: PUSH
31590: LD_INT 1
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 2
31599: NEG
31600: PUSH
31601: LD_INT 1
31603: NEG
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31620: LD_ADDR_VAR 0 36
31624: PUSH
31625: LD_INT 0
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 0
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 0
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: NEG
31679: PUSH
31680: LD_INT 0
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 1
31689: NEG
31690: PUSH
31691: LD_INT 1
31693: NEG
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 1
31701: NEG
31702: PUSH
31703: LD_INT 2
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31732: LD_ADDR_VAR 0 37
31736: PUSH
31737: LD_INT 0
31739: PUSH
31740: LD_INT 0
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 0
31749: PUSH
31750: LD_INT 1
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 1
31760: PUSH
31761: LD_INT 0
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: LD_INT 1
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: LD_INT 1
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 1
31790: NEG
31791: PUSH
31792: LD_INT 0
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 1
31801: NEG
31802: PUSH
31803: LD_INT 1
31805: NEG
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: LD_INT 1
31816: NEG
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 1
31824: NEG
31825: PUSH
31826: LD_INT 1
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31844: LD_ADDR_VAR 0 38
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 0
31861: PUSH
31862: LD_INT 1
31864: NEG
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: LD_INT 0
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 1
31882: PUSH
31883: LD_INT 1
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 0
31892: PUSH
31893: LD_INT 1
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 1
31902: NEG
31903: PUSH
31904: LD_INT 0
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 1
31913: NEG
31914: PUSH
31915: LD_INT 1
31917: NEG
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 2
31925: PUSH
31926: LD_INT 1
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 2
31935: NEG
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31956: LD_ADDR_VAR 0 39
31960: PUSH
31961: LD_INT 0
31963: PUSH
31964: LD_INT 0
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 1
31984: PUSH
31985: LD_INT 0
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 0
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 1
32014: NEG
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 1
32025: NEG
32026: PUSH
32027: LD_INT 1
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 1
32037: NEG
32038: PUSH
32039: LD_INT 2
32041: NEG
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 1
32049: PUSH
32050: LD_INT 2
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32068: LD_ADDR_VAR 0 40
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: LD_INT 0
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 0
32085: PUSH
32086: LD_INT 1
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 1
32096: PUSH
32097: LD_INT 0
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 0
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: NEG
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 1
32137: NEG
32138: PUSH
32139: LD_INT 1
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 1
32149: PUSH
32150: LD_INT 1
32152: NEG
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: LD_INT 1
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32180: LD_ADDR_VAR 0 41
32184: PUSH
32185: LD_INT 0
32187: PUSH
32188: LD_INT 0
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: LD_INT 1
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: LD_INT 0
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 1
32218: PUSH
32219: LD_INT 1
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: LD_INT 1
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 1
32238: NEG
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: PUSH
32263: LD_INT 2
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 1
32273: PUSH
32274: LD_INT 1
32276: NEG
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 2
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 2
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: LD_INT 2
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 1
32314: PUSH
32315: LD_INT 2
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 1
32324: NEG
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 2
32335: NEG
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 2
32346: NEG
32347: PUSH
32348: LD_INT 1
32350: NEG
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 2
32358: NEG
32359: PUSH
32360: LD_INT 2
32362: NEG
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 2
32370: NEG
32371: PUSH
32372: LD_INT 3
32374: NEG
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 2
32382: PUSH
32383: LD_INT 1
32385: NEG
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 3
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 3
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 3
32413: PUSH
32414: LD_INT 2
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 3
32423: PUSH
32424: LD_INT 3
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 2
32433: PUSH
32434: LD_INT 3
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 2
32443: NEG
32444: PUSH
32445: LD_INT 1
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 3
32454: NEG
32455: PUSH
32456: LD_INT 0
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 3
32465: NEG
32466: PUSH
32467: LD_INT 1
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 3
32477: NEG
32478: PUSH
32479: LD_INT 2
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 3
32489: NEG
32490: PUSH
32491: LD_INT 3
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32530: LD_ADDR_VAR 0 42
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: LD_INT 0
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 0
32547: PUSH
32548: LD_INT 1
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 1
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 0
32578: PUSH
32579: LD_INT 1
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 1
32588: NEG
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 1
32599: NEG
32600: PUSH
32601: LD_INT 1
32603: NEG
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 1
32611: NEG
32612: PUSH
32613: LD_INT 2
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 2
32626: NEG
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 1
32634: PUSH
32635: LD_INT 1
32637: NEG
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 2
32645: PUSH
32646: LD_INT 1
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 2
32655: PUSH
32656: LD_INT 2
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: LD_INT 2
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: LD_INT 2
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 1
32685: NEG
32686: PUSH
32687: LD_INT 1
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 2
32696: NEG
32697: PUSH
32698: LD_INT 1
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 2
32708: NEG
32709: PUSH
32710: LD_INT 2
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 2
32720: NEG
32721: PUSH
32722: LD_INT 3
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 1
32732: NEG
32733: PUSH
32734: LD_INT 3
32736: NEG
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: LD_INT 3
32747: NEG
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 1
32755: PUSH
32756: LD_INT 2
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 3
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 3
32776: PUSH
32777: LD_INT 3
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 2
32786: PUSH
32787: LD_INT 3
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: LD_INT 3
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 0
32806: PUSH
32807: LD_INT 3
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 1
32816: NEG
32817: PUSH
32818: LD_INT 2
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 3
32827: NEG
32828: PUSH
32829: LD_INT 2
32831: NEG
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 3
32839: NEG
32840: PUSH
32841: LD_INT 3
32843: NEG
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32880: LD_ADDR_VAR 0 43
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: LD_INT 0
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: LD_INT 1
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 1
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: LD_INT 1
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 1
32938: NEG
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 1
32949: NEG
32950: PUSH
32951: LD_INT 1
32953: NEG
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 1
32961: NEG
32962: PUSH
32963: LD_INT 2
32965: NEG
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: LD_INT 2
32976: NEG
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 1
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 2
32995: PUSH
32996: LD_INT 0
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 2
33005: PUSH
33006: LD_INT 1
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 1
33015: PUSH
33016: LD_INT 2
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: LD_INT 1
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 2
33046: NEG
33047: PUSH
33048: LD_INT 0
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 2
33057: NEG
33058: PUSH
33059: LD_INT 1
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: LD_INT 3
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: LD_INT 3
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 1
33092: PUSH
33093: LD_INT 2
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: LD_INT 1
33106: NEG
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 3
33114: PUSH
33115: LD_INT 0
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 3
33124: PUSH
33125: LD_INT 1
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 1
33134: PUSH
33135: LD_INT 3
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: LD_INT 3
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 1
33154: NEG
33155: PUSH
33156: LD_INT 2
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 2
33165: NEG
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 3
33176: NEG
33177: PUSH
33178: LD_INT 0
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 3
33187: NEG
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33228: LD_ADDR_VAR 0 44
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: LD_INT 0
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: LD_INT 1
33248: NEG
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: LD_INT 0
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: LD_INT 1
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 1
33286: NEG
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 1
33297: NEG
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: LD_INT 2
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: LD_INT 1
33324: NEG
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 2
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 2
33342: PUSH
33343: LD_INT 1
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 2
33352: PUSH
33353: LD_INT 2
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 1
33362: PUSH
33363: LD_INT 2
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 1
33372: NEG
33373: PUSH
33374: LD_INT 1
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 2
33383: NEG
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 2
33394: NEG
33395: PUSH
33396: LD_INT 1
33398: NEG
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 2
33406: NEG
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 2
33418: NEG
33419: PUSH
33420: LD_INT 3
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 2
33430: PUSH
33431: LD_INT 1
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 3
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 3
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 3
33461: PUSH
33462: LD_INT 2
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 3
33471: PUSH
33472: LD_INT 3
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 2
33481: PUSH
33482: LD_INT 3
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 2
33491: NEG
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 3
33502: NEG
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 3
33513: NEG
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 3
33525: NEG
33526: PUSH
33527: LD_INT 2
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 3
33537: NEG
33538: PUSH
33539: LD_INT 3
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33578: LD_ADDR_VAR 0 45
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: LD_INT 0
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: NEG
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: LD_INT 1
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: NEG
33660: PUSH
33661: LD_INT 2
33663: NEG
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 0
33671: PUSH
33672: LD_INT 2
33674: NEG
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 1
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: LD_INT 1
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 2
33703: PUSH
33704: LD_INT 2
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 1
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 0
33723: PUSH
33724: LD_INT 2
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 1
33733: NEG
33734: PUSH
33735: LD_INT 1
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 2
33744: NEG
33745: PUSH
33746: LD_INT 1
33748: NEG
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 2
33756: NEG
33757: PUSH
33758: LD_INT 2
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 2
33768: NEG
33769: PUSH
33770: LD_INT 3
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 1
33780: NEG
33781: PUSH
33782: LD_INT 3
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 0
33792: PUSH
33793: LD_INT 3
33795: NEG
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 1
33803: PUSH
33804: LD_INT 2
33806: NEG
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 3
33814: PUSH
33815: LD_INT 2
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 3
33824: PUSH
33825: LD_INT 3
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 2
33834: PUSH
33835: LD_INT 3
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 1
33844: PUSH
33845: LD_INT 3
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: LD_INT 3
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 1
33864: NEG
33865: PUSH
33866: LD_INT 2
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 3
33875: NEG
33876: PUSH
33877: LD_INT 2
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 3
33887: NEG
33888: PUSH
33889: LD_INT 3
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33928: LD_ADDR_VAR 0 46
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 0
33945: PUSH
33946: LD_INT 1
33948: NEG
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 1
33956: PUSH
33957: LD_INT 0
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 1
33966: PUSH
33967: LD_INT 1
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: LD_INT 1
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 1
33986: NEG
33987: PUSH
33988: LD_INT 0
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: NEG
33998: PUSH
33999: LD_INT 1
34001: NEG
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 1
34009: NEG
34010: PUSH
34011: LD_INT 2
34013: NEG
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 2
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 1
34032: PUSH
34033: LD_INT 1
34035: NEG
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 2
34043: PUSH
34044: LD_INT 0
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 2
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: LD_INT 2
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: LD_INT 2
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 1
34083: NEG
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 2
34094: NEG
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 2
34105: NEG
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: LD_INT 3
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: LD_INT 3
34132: NEG
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 1
34140: PUSH
34141: LD_INT 2
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: LD_INT 1
34154: NEG
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 3
34162: PUSH
34163: LD_INT 0
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 3
34172: PUSH
34173: LD_INT 1
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: LD_INT 3
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: LD_INT 3
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 1
34202: NEG
34203: PUSH
34204: LD_INT 2
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 2
34213: NEG
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 3
34224: NEG
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 3
34235: NEG
34236: PUSH
34237: LD_INT 1
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34276: LD_ADDR_VAR 0 47
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 1
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 0
34324: PUSH
34325: LD_INT 1
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: NEG
34335: PUSH
34336: LD_INT 0
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 1
34345: NEG
34346: PUSH
34347: LD_INT 1
34349: NEG
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 1
34357: NEG
34358: PUSH
34359: LD_INT 2
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 0
34369: PUSH
34370: LD_INT 2
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 1
34380: PUSH
34381: LD_INT 1
34383: NEG
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 2
34391: NEG
34392: PUSH
34393: LD_INT 1
34395: NEG
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: NEG
34404: PUSH
34405: LD_INT 2
34407: NEG
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34427: LD_ADDR_VAR 0 48
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: LD_INT 0
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 0
34444: PUSH
34445: LD_INT 1
34447: NEG
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: LD_INT 0
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 1
34465: PUSH
34466: LD_INT 1
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 1
34496: NEG
34497: PUSH
34498: LD_INT 1
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: NEG
34509: PUSH
34510: LD_INT 2
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 0
34520: PUSH
34521: LD_INT 2
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 1
34531: PUSH
34532: LD_INT 1
34534: NEG
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 2
34542: PUSH
34543: LD_INT 0
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 2
34552: PUSH
34553: LD_INT 1
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34574: LD_ADDR_VAR 0 49
34578: PUSH
34579: LD_INT 0
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 0
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: LD_INT 0
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 0
34622: PUSH
34623: LD_INT 1
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: LD_INT 0
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 1
34643: NEG
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 1
34655: PUSH
34656: LD_INT 1
34658: NEG
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 2
34666: PUSH
34667: LD_INT 0
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 2
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 2
34686: PUSH
34687: LD_INT 2
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 1
34696: PUSH
34697: LD_INT 2
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34718: LD_ADDR_VAR 0 50
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: LD_INT 0
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 1
34738: NEG
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: LD_INT 1
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: LD_INT 1
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 1
34776: NEG
34777: PUSH
34778: LD_INT 0
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PUSH
34789: LD_INT 1
34791: NEG
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 2
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 2
34809: PUSH
34810: LD_INT 2
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 1
34819: PUSH
34820: LD_INT 2
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 0
34829: PUSH
34830: LD_INT 2
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 1
34839: NEG
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34862: LD_ADDR_VAR 0 51
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: LD_INT 0
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: LD_INT 1
34882: NEG
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 1
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: LD_INT 1
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 0
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: NEG
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 1
34931: NEG
34932: PUSH
34933: LD_INT 1
34935: NEG
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 1
34943: PUSH
34944: LD_INT 2
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: LD_INT 2
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 1
34963: NEG
34964: PUSH
34965: LD_INT 1
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 2
34974: NEG
34975: PUSH
34976: LD_INT 0
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 2
34985: NEG
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35009: LD_ADDR_VAR 0 52
35013: PUSH
35014: LD_INT 0
35016: PUSH
35017: LD_INT 0
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 1
35037: PUSH
35038: LD_INT 0
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 1
35047: PUSH
35048: LD_INT 1
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 0
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 1
35067: NEG
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 1
35078: NEG
35079: PUSH
35080: LD_INT 1
35082: NEG
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 1
35090: NEG
35091: PUSH
35092: LD_INT 2
35094: NEG
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: LD_INT 1
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 2
35113: NEG
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 2
35124: NEG
35125: PUSH
35126: LD_INT 1
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 2
35136: NEG
35137: PUSH
35138: LD_INT 2
35140: NEG
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35160: LD_ADDR_VAR 0 53
35164: PUSH
35165: LD_INT 0
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: LD_INT 1
35180: NEG
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: LD_INT 0
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: PUSH
35199: LD_INT 1
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 0
35208: PUSH
35209: LD_INT 1
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: NEG
35219: PUSH
35220: LD_INT 0
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 1
35229: NEG
35230: PUSH
35231: LD_INT 1
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 1
35241: NEG
35242: PUSH
35243: LD_INT 2
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 0
35253: PUSH
35254: LD_INT 2
35256: NEG
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: PUSH
35265: LD_INT 1
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 2
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 2
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: PUSH
35296: LD_INT 2
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: LD_INT 2
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 0
35315: PUSH
35316: LD_INT 2
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 1
35325: NEG
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 2
35336: NEG
35337: PUSH
35338: LD_INT 0
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 2
35347: NEG
35348: PUSH
35349: LD_INT 1
35351: NEG
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 2
35359: NEG
35360: PUSH
35361: LD_INT 2
35363: NEG
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35390: LD_ADDR_VAR 0 54
35394: PUSH
35395: LD_INT 0
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: LD_INT 1
35410: NEG
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: LD_INT 0
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 1
35428: PUSH
35429: LD_INT 1
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 0
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: NEG
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 1
35459: NEG
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: NEG
35472: PUSH
35473: LD_INT 2
35475: NEG
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 0
35483: PUSH
35484: LD_INT 2
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 1
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 2
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 2
35515: PUSH
35516: LD_INT 1
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: LD_INT 2
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: LD_INT 2
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: LD_INT 2
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: LD_INT 1
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 2
35566: NEG
35567: PUSH
35568: LD_INT 0
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 2
35577: NEG
35578: PUSH
35579: LD_INT 1
35581: NEG
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 2
35589: NEG
35590: PUSH
35591: LD_INT 2
35593: NEG
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35620: LD_ADDR_VAR 0 55
35624: PUSH
35625: LD_INT 0
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 1
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: LD_INT 0
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 1
35689: NEG
35690: PUSH
35691: LD_INT 1
35693: NEG
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 1
35701: NEG
35702: PUSH
35703: LD_INT 2
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 0
35713: PUSH
35714: LD_INT 2
35716: NEG
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: LD_INT 1
35727: NEG
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 2
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 2
35745: PUSH
35746: LD_INT 1
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 2
35755: PUSH
35756: LD_INT 2
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: LD_INT 2
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: LD_INT 2
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 2
35796: NEG
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 2
35807: NEG
35808: PUSH
35809: LD_INT 1
35811: NEG
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 2
35819: NEG
35820: PUSH
35821: LD_INT 2
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35850: LD_ADDR_VAR 0 56
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: LD_INT 1
35870: NEG
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 1
35878: PUSH
35879: LD_INT 0
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 0
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: NEG
35909: PUSH
35910: LD_INT 0
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 1
35919: NEG
35920: PUSH
35921: LD_INT 1
35923: NEG
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: LD_INT 2
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: LD_INT 2
35946: NEG
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 1
35954: PUSH
35955: LD_INT 1
35957: NEG
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 2
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 2
35975: PUSH
35976: LD_INT 1
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: LD_INT 2
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: LD_INT 2
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 2
36026: NEG
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 2
36037: NEG
36038: PUSH
36039: LD_INT 1
36041: NEG
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 2
36049: NEG
36050: PUSH
36051: LD_INT 2
36053: NEG
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36080: LD_ADDR_VAR 0 57
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: LD_INT 0
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: LD_INT 1
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: LD_INT 0
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 1
36149: NEG
36150: PUSH
36151: LD_INT 1
36153: NEG
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 1
36161: NEG
36162: PUSH
36163: LD_INT 2
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: LD_INT 2
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 1
36184: PUSH
36185: LD_INT 1
36187: NEG
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 2
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 2
36205: PUSH
36206: LD_INT 1
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 2
36215: PUSH
36216: LD_INT 2
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: LD_INT 2
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: LD_INT 2
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 2
36256: NEG
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 2
36267: NEG
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 2
36279: NEG
36280: PUSH
36281: LD_INT 2
36283: NEG
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36310: LD_ADDR_VAR 0 58
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: LD_INT 0
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 1
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 0
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: LD_INT 0
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: NEG
36380: PUSH
36381: LD_INT 1
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: NEG
36392: PUSH
36393: LD_INT 2
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 0
36403: PUSH
36404: LD_INT 2
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: LD_INT 1
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 2
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 2
36435: PUSH
36436: LD_INT 1
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 2
36445: PUSH
36446: LD_INT 2
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 1
36455: PUSH
36456: LD_INT 2
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: LD_INT 2
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 1
36475: NEG
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 2
36486: NEG
36487: PUSH
36488: LD_INT 0
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 2
36497: NEG
36498: PUSH
36499: LD_INT 1
36501: NEG
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 2
36509: NEG
36510: PUSH
36511: LD_INT 2
36513: NEG
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36540: LD_ADDR_VAR 0 59
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 1
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36628: LD_ADDR_VAR 0 60
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: LD_INT 1
36648: NEG
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 1
36656: PUSH
36657: LD_INT 0
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 1
36666: PUSH
36667: LD_INT 1
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: LD_INT 1
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: NEG
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 1
36697: NEG
36698: PUSH
36699: LD_INT 1
36701: NEG
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36716: LD_ADDR_VAR 0 61
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 0
36733: PUSH
36734: LD_INT 1
36736: NEG
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 1
36744: PUSH
36745: LD_INT 0
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 0
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 1
36774: NEG
36775: PUSH
36776: LD_INT 0
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 1
36785: NEG
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36804: LD_ADDR_VAR 0 62
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: LD_INT 0
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: LD_INT 1
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: LD_INT 0
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: LD_INT 1
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: LD_INT 1
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: NEG
36874: PUSH
36875: LD_INT 1
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36892: LD_ADDR_VAR 0 63
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: LD_INT 0
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 1
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 1
36930: PUSH
36931: LD_INT 1
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 1
36961: NEG
36962: PUSH
36963: LD_INT 1
36965: NEG
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36980: LD_ADDR_VAR 0 64
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: LD_INT 1
37000: NEG
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 1
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 1
37018: PUSH
37019: LD_INT 1
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: NEG
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 1
37049: NEG
37050: PUSH
37051: LD_INT 1
37053: NEG
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: ST_TO_ADDR
// end ; 1 :
37068: GO 42965
37070: LD_INT 1
37072: DOUBLE
37073: EQUAL
37074: IFTRUE 37078
37076: GO 39701
37078: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37079: LD_ADDR_VAR 0 11
37083: PUSH
37084: LD_INT 1
37086: NEG
37087: PUSH
37088: LD_INT 3
37090: NEG
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 0
37098: PUSH
37099: LD_INT 3
37101: NEG
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 1
37109: PUSH
37110: LD_INT 2
37112: NEG
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: LIST
37122: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37123: LD_ADDR_VAR 0 12
37127: PUSH
37128: LD_INT 2
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 3
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 3
37151: PUSH
37152: LD_INT 1
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: LIST
37163: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37164: LD_ADDR_VAR 0 13
37168: PUSH
37169: LD_INT 3
37171: PUSH
37172: LD_INT 2
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 3
37181: PUSH
37182: LD_INT 3
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 2
37191: PUSH
37192: LD_INT 3
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: LIST
37203: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37204: LD_ADDR_VAR 0 14
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: LD_INT 3
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: LD_INT 3
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: NEG
37232: PUSH
37233: LD_INT 2
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: LIST
37244: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37245: LD_ADDR_VAR 0 15
37249: PUSH
37250: LD_INT 2
37252: NEG
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 3
37263: NEG
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 3
37274: NEG
37275: PUSH
37276: LD_INT 1
37278: NEG
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: LIST
37288: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37289: LD_ADDR_VAR 0 16
37293: PUSH
37294: LD_INT 2
37296: NEG
37297: PUSH
37298: LD_INT 3
37300: NEG
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 3
37308: NEG
37309: PUSH
37310: LD_INT 2
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 3
37320: NEG
37321: PUSH
37322: LD_INT 3
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: LIST
37334: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37335: LD_ADDR_VAR 0 17
37339: PUSH
37340: LD_INT 1
37342: NEG
37343: PUSH
37344: LD_INT 3
37346: NEG
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: LD_INT 3
37357: NEG
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: LD_INT 2
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: LIST
37378: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37379: LD_ADDR_VAR 0 18
37383: PUSH
37384: LD_INT 2
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 3
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 3
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: LIST
37419: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37420: LD_ADDR_VAR 0 19
37424: PUSH
37425: LD_INT 3
37427: PUSH
37428: LD_INT 2
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 3
37437: PUSH
37438: LD_INT 3
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 2
37447: PUSH
37448: LD_INT 3
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: LIST
37459: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37460: LD_ADDR_VAR 0 20
37464: PUSH
37465: LD_INT 1
37467: PUSH
37468: LD_INT 3
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 0
37477: PUSH
37478: LD_INT 3
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 1
37487: NEG
37488: PUSH
37489: LD_INT 2
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: LIST
37500: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37501: LD_ADDR_VAR 0 21
37505: PUSH
37506: LD_INT 2
37508: NEG
37509: PUSH
37510: LD_INT 1
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 3
37519: NEG
37520: PUSH
37521: LD_INT 0
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 3
37530: NEG
37531: PUSH
37532: LD_INT 1
37534: NEG
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: LIST
37544: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37545: LD_ADDR_VAR 0 22
37549: PUSH
37550: LD_INT 2
37552: NEG
37553: PUSH
37554: LD_INT 3
37556: NEG
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 3
37564: NEG
37565: PUSH
37566: LD_INT 2
37568: NEG
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 3
37576: NEG
37577: PUSH
37578: LD_INT 3
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: LIST
37590: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37591: LD_ADDR_VAR 0 23
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: LD_INT 3
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: LD_INT 4
37613: NEG
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: LD_INT 3
37624: NEG
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: LIST
37634: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37635: LD_ADDR_VAR 0 24
37639: PUSH
37640: LD_INT 3
37642: PUSH
37643: LD_INT 0
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 3
37652: PUSH
37653: LD_INT 1
37655: NEG
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 4
37663: PUSH
37664: LD_INT 1
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: LIST
37675: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37676: LD_ADDR_VAR 0 25
37680: PUSH
37681: LD_INT 3
37683: PUSH
37684: LD_INT 3
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 4
37693: PUSH
37694: LD_INT 3
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 3
37703: PUSH
37704: LD_INT 4
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: LIST
37715: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37716: LD_ADDR_VAR 0 26
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: LD_INT 3
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 1
37733: PUSH
37734: LD_INT 4
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 1
37743: NEG
37744: PUSH
37745: LD_INT 3
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: LIST
37756: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37757: LD_ADDR_VAR 0 27
37761: PUSH
37762: LD_INT 3
37764: NEG
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 3
37775: NEG
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 4
37786: NEG
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: LIST
37800: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37801: LD_ADDR_VAR 0 28
37805: PUSH
37806: LD_INT 3
37808: NEG
37809: PUSH
37810: LD_INT 3
37812: NEG
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 3
37820: NEG
37821: PUSH
37822: LD_INT 4
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 4
37832: NEG
37833: PUSH
37834: LD_INT 3
37836: NEG
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: LIST
37846: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37847: LD_ADDR_VAR 0 29
37851: PUSH
37852: LD_INT 1
37854: NEG
37855: PUSH
37856: LD_INT 3
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: LD_INT 3
37869: NEG
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 1
37877: PUSH
37878: LD_INT 2
37880: NEG
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 1
37888: NEG
37889: PUSH
37890: LD_INT 4
37892: NEG
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: LD_INT 4
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: LD_INT 3
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: LD_INT 5
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: LD_INT 5
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: LD_INT 4
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 1
37956: NEG
37957: PUSH
37958: LD_INT 6
37960: NEG
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: LD_INT 6
37971: NEG
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: LD_INT 5
37982: NEG
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38002: LD_ADDR_VAR 0 30
38006: PUSH
38007: LD_INT 2
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 3
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 3
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 3
38040: PUSH
38041: LD_INT 1
38043: NEG
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 4
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 4
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 4
38071: PUSH
38072: LD_INT 1
38074: NEG
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 5
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 5
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 5
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 6
38113: PUSH
38114: LD_INT 0
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 6
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38145: LD_ADDR_VAR 0 31
38149: PUSH
38150: LD_INT 3
38152: PUSH
38153: LD_INT 2
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 3
38162: PUSH
38163: LD_INT 3
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: LD_INT 3
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 4
38182: PUSH
38183: LD_INT 3
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 4
38192: PUSH
38193: LD_INT 4
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 3
38202: PUSH
38203: LD_INT 4
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 5
38212: PUSH
38213: LD_INT 4
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 5
38222: PUSH
38223: LD_INT 5
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 4
38232: PUSH
38233: LD_INT 5
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 6
38242: PUSH
38243: LD_INT 5
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 6
38252: PUSH
38253: LD_INT 6
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 5
38262: PUSH
38263: LD_INT 6
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38284: LD_ADDR_VAR 0 32
38288: PUSH
38289: LD_INT 1
38291: PUSH
38292: LD_INT 3
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: LD_INT 3
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 1
38311: NEG
38312: PUSH
38313: LD_INT 2
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: LD_INT 4
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: LD_INT 4
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: NEG
38343: PUSH
38344: LD_INT 3
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 1
38353: PUSH
38354: LD_INT 5
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: LD_INT 5
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: NEG
38374: PUSH
38375: LD_INT 4
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 1
38384: PUSH
38385: LD_INT 6
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: LD_INT 6
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 1
38404: NEG
38405: PUSH
38406: LD_INT 5
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38427: LD_ADDR_VAR 0 33
38431: PUSH
38432: LD_INT 2
38434: NEG
38435: PUSH
38436: LD_INT 1
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 3
38445: NEG
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 3
38456: NEG
38457: PUSH
38458: LD_INT 1
38460: NEG
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 3
38468: NEG
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 4
38479: NEG
38480: PUSH
38481: LD_INT 0
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 4
38490: NEG
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 4
38502: NEG
38503: PUSH
38504: LD_INT 1
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 5
38513: NEG
38514: PUSH
38515: LD_INT 0
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 5
38524: NEG
38525: PUSH
38526: LD_INT 1
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 5
38536: NEG
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 6
38547: NEG
38548: PUSH
38549: LD_INT 0
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 6
38558: NEG
38559: PUSH
38560: LD_INT 1
38562: NEG
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38582: LD_ADDR_VAR 0 34
38586: PUSH
38587: LD_INT 2
38589: NEG
38590: PUSH
38591: LD_INT 3
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 3
38601: NEG
38602: PUSH
38603: LD_INT 2
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 3
38613: NEG
38614: PUSH
38615: LD_INT 3
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 3
38625: NEG
38626: PUSH
38627: LD_INT 4
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 4
38637: NEG
38638: PUSH
38639: LD_INT 3
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 4
38649: NEG
38650: PUSH
38651: LD_INT 4
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 4
38661: NEG
38662: PUSH
38663: LD_INT 5
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 5
38673: NEG
38674: PUSH
38675: LD_INT 4
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 5
38685: NEG
38686: PUSH
38687: LD_INT 5
38689: NEG
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 5
38697: NEG
38698: PUSH
38699: LD_INT 6
38701: NEG
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 6
38709: NEG
38710: PUSH
38711: LD_INT 5
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 6
38721: NEG
38722: PUSH
38723: LD_INT 6
38725: NEG
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38745: LD_ADDR_VAR 0 41
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: LD_INT 2
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: LD_INT 3
38767: NEG
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: LD_INT 2
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: LIST
38788: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38789: LD_ADDR_VAR 0 42
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 2
38806: PUSH
38807: LD_INT 1
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 3
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: LIST
38829: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38830: LD_ADDR_VAR 0 43
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: LD_INT 2
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 3
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: LD_INT 3
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: LIST
38869: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38870: LD_ADDR_VAR 0 44
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: LD_INT 3
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: LD_INT 2
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: LIST
38910: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38911: LD_ADDR_VAR 0 45
38915: PUSH
38916: LD_INT 2
38918: NEG
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 2
38929: NEG
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 3
38940: NEG
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: LIST
38954: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38955: LD_ADDR_VAR 0 46
38959: PUSH
38960: LD_INT 2
38962: NEG
38963: PUSH
38964: LD_INT 2
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 2
38974: NEG
38975: PUSH
38976: LD_INT 3
38978: NEG
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 3
38986: NEG
38987: PUSH
38988: LD_INT 2
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: LIST
39000: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39001: LD_ADDR_VAR 0 47
39005: PUSH
39006: LD_INT 2
39008: NEG
39009: PUSH
39010: LD_INT 3
39012: NEG
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: LD_INT 3
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39034: LD_ADDR_VAR 0 48
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: LD_INT 2
39044: NEG
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 2
39052: PUSH
39053: LD_INT 1
39055: NEG
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39065: LD_ADDR_VAR 0 49
39069: PUSH
39070: LD_INT 3
39072: PUSH
39073: LD_INT 1
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 3
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39094: LD_ADDR_VAR 0 50
39098: PUSH
39099: LD_INT 2
39101: PUSH
39102: LD_INT 3
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: LD_INT 3
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39123: LD_ADDR_VAR 0 51
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: LD_INT 2
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 2
39141: NEG
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39154: LD_ADDR_VAR 0 52
39158: PUSH
39159: LD_INT 3
39161: NEG
39162: PUSH
39163: LD_INT 1
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 3
39173: NEG
39174: PUSH
39175: LD_INT 2
39177: NEG
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39187: LD_ADDR_VAR 0 53
39191: PUSH
39192: LD_INT 1
39194: NEG
39195: PUSH
39196: LD_INT 3
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: LD_INT 3
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: LD_INT 2
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: LIST
39230: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39231: LD_ADDR_VAR 0 54
39235: PUSH
39236: LD_INT 2
39238: PUSH
39239: LD_INT 1
39241: NEG
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 3
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 3
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: LIST
39271: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39272: LD_ADDR_VAR 0 55
39276: PUSH
39277: LD_INT 3
39279: PUSH
39280: LD_INT 2
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 3
39289: PUSH
39290: LD_INT 3
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 2
39299: PUSH
39300: LD_INT 3
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: LIST
39311: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39312: LD_ADDR_VAR 0 56
39316: PUSH
39317: LD_INT 1
39319: PUSH
39320: LD_INT 3
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: LD_INT 3
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: LD_INT 2
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: LIST
39352: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39353: LD_ADDR_VAR 0 57
39357: PUSH
39358: LD_INT 2
39360: NEG
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 3
39371: NEG
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 3
39382: NEG
39383: PUSH
39384: LD_INT 1
39386: NEG
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: LIST
39396: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39397: LD_ADDR_VAR 0 58
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: LD_INT 3
39408: NEG
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 3
39416: NEG
39417: PUSH
39418: LD_INT 2
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 3
39428: NEG
39429: PUSH
39430: LD_INT 3
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: LIST
39442: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39443: LD_ADDR_VAR 0 59
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: LD_INT 2
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: LD_INT 2
39465: NEG
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: LIST
39486: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39487: LD_ADDR_VAR 0 60
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: LIST
39527: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39528: LD_ADDR_VAR 0 61
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: LD_INT 2
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: LIST
39567: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39568: LD_ADDR_VAR 0 62
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 0
39585: PUSH
39586: LD_INT 2
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: LIST
39608: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39609: LD_ADDR_VAR 0 63
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 2
39627: NEG
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 2
39638: NEG
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: LIST
39652: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39653: LD_ADDR_VAR 0 64
39657: PUSH
39658: LD_INT 1
39660: NEG
39661: PUSH
39662: LD_INT 2
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 2
39672: NEG
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 2
39684: NEG
39685: PUSH
39686: LD_INT 2
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: LIST
39698: ST_TO_ADDR
// end ; 2 :
39699: GO 42965
39701: LD_INT 2
39703: DOUBLE
39704: EQUAL
39705: IFTRUE 39709
39707: GO 42964
39709: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39710: LD_ADDR_VAR 0 29
39714: PUSH
39715: LD_INT 4
39717: PUSH
39718: LD_INT 0
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 4
39727: PUSH
39728: LD_INT 1
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 5
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 5
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 4
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 3
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 3
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 3
39789: PUSH
39790: LD_INT 2
39792: NEG
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 5
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 3
39810: PUSH
39811: LD_INT 3
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 3
39820: PUSH
39821: LD_INT 2
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 4
39830: PUSH
39831: LD_INT 3
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 4
39840: PUSH
39841: LD_INT 4
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 3
39850: PUSH
39851: LD_INT 4
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: LD_INT 3
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 2
39870: PUSH
39871: LD_INT 2
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 4
39880: PUSH
39881: LD_INT 2
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 2
39890: PUSH
39891: LD_INT 4
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: LD_INT 4
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: LD_INT 3
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: PUSH
39921: LD_INT 4
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 1
39930: PUSH
39931: LD_INT 5
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: LD_INT 5
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 1
39950: NEG
39951: PUSH
39952: LD_INT 4
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: LD_INT 3
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 2
39972: PUSH
39973: LD_INT 5
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 2
39982: NEG
39983: PUSH
39984: LD_INT 3
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 3
39993: NEG
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 3
40004: NEG
40005: PUSH
40006: LD_INT 1
40008: NEG
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 2
40016: NEG
40017: PUSH
40018: LD_INT 0
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 2
40027: NEG
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 3
40038: NEG
40039: PUSH
40040: LD_INT 1
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 4
40049: NEG
40050: PUSH
40051: LD_INT 0
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 4
40060: NEG
40061: PUSH
40062: LD_INT 1
40064: NEG
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 4
40072: NEG
40073: PUSH
40074: LD_INT 2
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 2
40084: NEG
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 4
40095: NEG
40096: PUSH
40097: LD_INT 4
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 4
40107: NEG
40108: PUSH
40109: LD_INT 5
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 3
40119: NEG
40120: PUSH
40121: LD_INT 4
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 3
40131: NEG
40132: PUSH
40133: LD_INT 3
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 4
40143: NEG
40144: PUSH
40145: LD_INT 3
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 5
40155: NEG
40156: PUSH
40157: LD_INT 4
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 5
40167: NEG
40168: PUSH
40169: LD_INT 5
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 3
40179: NEG
40180: PUSH
40181: LD_INT 5
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 5
40191: NEG
40192: PUSH
40193: LD_INT 3
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40248: LD_ADDR_VAR 0 30
40252: PUSH
40253: LD_INT 4
40255: PUSH
40256: LD_INT 4
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 4
40265: PUSH
40266: LD_INT 3
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 5
40275: PUSH
40276: LD_INT 4
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 5
40285: PUSH
40286: LD_INT 5
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 4
40295: PUSH
40296: LD_INT 5
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 3
40305: PUSH
40306: LD_INT 4
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 3
40315: PUSH
40316: LD_INT 3
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 5
40325: PUSH
40326: LD_INT 3
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 3
40335: PUSH
40336: LD_INT 5
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: LD_INT 3
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: LD_INT 2
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: LD_INT 3
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: LD_INT 4
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: LD_INT 4
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: NEG
40396: PUSH
40397: LD_INT 3
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: LD_INT 2
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 2
40417: PUSH
40418: LD_INT 4
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 2
40427: NEG
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 4
40438: NEG
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 4
40449: NEG
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 3
40461: NEG
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 3
40472: NEG
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 4
40483: NEG
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 5
40494: NEG
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 5
40505: NEG
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 5
40517: NEG
40518: PUSH
40519: LD_INT 2
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 3
40529: NEG
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 3
40540: NEG
40541: PUSH
40542: LD_INT 3
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 3
40552: NEG
40553: PUSH
40554: LD_INT 4
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 2
40564: NEG
40565: PUSH
40566: LD_INT 3
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 2
40576: NEG
40577: PUSH
40578: LD_INT 2
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 3
40588: NEG
40589: PUSH
40590: LD_INT 2
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 4
40600: NEG
40601: PUSH
40602: LD_INT 3
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 4
40612: NEG
40613: PUSH
40614: LD_INT 4
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: LD_INT 4
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 4
40636: NEG
40637: PUSH
40638: LD_INT 2
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: LD_INT 4
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: LD_INT 5
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: LD_INT 4
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: LD_INT 3
40684: NEG
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 3
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: LD_INT 4
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 1
40715: NEG
40716: PUSH
40717: LD_INT 5
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: PUSH
40728: LD_INT 3
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 2
40738: NEG
40739: PUSH
40740: LD_INT 5
40742: NEG
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40795: LD_ADDR_VAR 0 31
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: LD_INT 4
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: LD_INT 3
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: LD_INT 4
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 1
40832: PUSH
40833: LD_INT 5
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: LD_INT 5
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: LD_INT 4
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: LD_INT 3
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 2
40874: PUSH
40875: LD_INT 5
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 2
40884: NEG
40885: PUSH
40886: LD_INT 3
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 3
40895: NEG
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 3
40906: NEG
40907: PUSH
40908: LD_INT 1
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 2
40918: NEG
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 2
40929: NEG
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 3
40940: NEG
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 4
40951: NEG
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 4
40962: NEG
40963: PUSH
40964: LD_INT 1
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 4
40974: NEG
40975: PUSH
40976: LD_INT 2
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 2
40986: NEG
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 4
40997: NEG
40998: PUSH
40999: LD_INT 4
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 4
41009: NEG
41010: PUSH
41011: LD_INT 5
41013: NEG
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 3
41021: NEG
41022: PUSH
41023: LD_INT 4
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 3
41033: NEG
41034: PUSH
41035: LD_INT 3
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 4
41045: NEG
41046: PUSH
41047: LD_INT 3
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 5
41057: NEG
41058: PUSH
41059: LD_INT 4
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 5
41069: NEG
41070: PUSH
41071: LD_INT 5
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 3
41081: NEG
41082: PUSH
41083: LD_INT 5
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 5
41093: NEG
41094: PUSH
41095: LD_INT 3
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: LD_INT 3
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: LD_INT 4
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: LD_INT 3
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 1
41138: PUSH
41139: LD_INT 2
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: LD_INT 2
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: LD_INT 3
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: LD_INT 4
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 2
41184: PUSH
41185: LD_INT 2
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 2
41195: NEG
41196: PUSH
41197: LD_INT 4
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 4
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 4
41217: PUSH
41218: LD_INT 1
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 5
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 5
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 4
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 3
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 3
41268: PUSH
41269: LD_INT 1
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 3
41279: PUSH
41280: LD_INT 2
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 5
41290: PUSH
41291: LD_INT 2
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41345: LD_ADDR_VAR 0 32
41349: PUSH
41350: LD_INT 4
41352: NEG
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 4
41363: NEG
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 3
41375: NEG
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 3
41386: NEG
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 4
41397: NEG
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 5
41408: NEG
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 5
41419: NEG
41420: PUSH
41421: LD_INT 1
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 5
41431: NEG
41432: PUSH
41433: LD_INT 2
41435: NEG
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 3
41443: NEG
41444: PUSH
41445: LD_INT 2
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 3
41454: NEG
41455: PUSH
41456: LD_INT 3
41458: NEG
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 3
41466: NEG
41467: PUSH
41468: LD_INT 4
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 2
41478: NEG
41479: PUSH
41480: LD_INT 3
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: NEG
41491: PUSH
41492: LD_INT 2
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 3
41502: NEG
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 4
41514: NEG
41515: PUSH
41516: LD_INT 3
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 4
41526: NEG
41527: PUSH
41528: LD_INT 4
41530: NEG
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 2
41538: NEG
41539: PUSH
41540: LD_INT 4
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 4
41550: NEG
41551: PUSH
41552: LD_INT 2
41554: NEG
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 4
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: LD_INT 5
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: LD_INT 4
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: LD_INT 3
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: LD_INT 3
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: LD_INT 4
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: LD_INT 5
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: LD_INT 3
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 2
41652: NEG
41653: PUSH
41654: LD_INT 5
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 3
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 3
41674: PUSH
41675: LD_INT 1
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 4
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 4
41695: PUSH
41696: LD_INT 1
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 3
41705: PUSH
41706: LD_INT 1
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 2
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 2
41736: PUSH
41737: LD_INT 2
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 4
41747: PUSH
41748: LD_INT 2
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 4
41757: PUSH
41758: LD_INT 4
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 4
41767: PUSH
41768: LD_INT 3
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 5
41777: PUSH
41778: LD_INT 4
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 5
41787: PUSH
41788: LD_INT 5
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 4
41797: PUSH
41798: LD_INT 5
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 3
41807: PUSH
41808: LD_INT 4
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 3
41817: PUSH
41818: LD_INT 3
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 5
41827: PUSH
41828: LD_INT 3
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 3
41837: PUSH
41838: LD_INT 5
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41892: LD_ADDR_VAR 0 33
41896: PUSH
41897: LD_INT 4
41899: NEG
41900: PUSH
41901: LD_INT 4
41903: NEG
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 4
41911: NEG
41912: PUSH
41913: LD_INT 5
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 3
41923: NEG
41924: PUSH
41925: LD_INT 4
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 3
41935: NEG
41936: PUSH
41937: LD_INT 3
41939: NEG
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 4
41947: NEG
41948: PUSH
41949: LD_INT 3
41951: NEG
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 5
41959: NEG
41960: PUSH
41961: LD_INT 4
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 5
41971: NEG
41972: PUSH
41973: LD_INT 5
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 3
41983: NEG
41984: PUSH
41985: LD_INT 5
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 5
41995: NEG
41996: PUSH
41997: LD_INT 3
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: LD_INT 3
42010: NEG
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: LD_INT 4
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: LD_INT 3
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 2
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: LD_INT 2
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: LD_INT 3
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: NEG
42075: PUSH
42076: LD_INT 4
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: LD_INT 4
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 4
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 4
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 5
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 5
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 4
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 3
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 3
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 3
42181: PUSH
42182: LD_INT 2
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 5
42192: PUSH
42193: LD_INT 2
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 3
42202: PUSH
42203: LD_INT 3
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 3
42212: PUSH
42213: LD_INT 2
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 4
42222: PUSH
42223: LD_INT 3
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 4
42232: PUSH
42233: LD_INT 4
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 3
42242: PUSH
42243: LD_INT 4
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: LD_INT 3
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 2
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 4
42272: PUSH
42273: LD_INT 2
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 2
42282: PUSH
42283: LD_INT 4
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: LD_INT 4
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 3
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: LD_INT 4
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: LD_INT 5
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: LD_INT 5
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: LD_INT 4
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: LD_INT 3
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 2
42364: PUSH
42365: LD_INT 5
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 2
42374: NEG
42375: PUSH
42376: LD_INT 3
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42430: LD_ADDR_VAR 0 34
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 4
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: LD_INT 5
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: LD_INT 4
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 3
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: LD_INT 3
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: NEG
42493: PUSH
42494: LD_INT 4
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: LD_INT 5
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: LD_INT 3
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 2
42527: NEG
42528: PUSH
42529: LD_INT 5
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 3
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 3
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 4
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 4
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 3
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: LD_INT 2
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 4
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 4
42632: PUSH
42633: LD_INT 4
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 4
42642: PUSH
42643: LD_INT 3
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 5
42652: PUSH
42653: LD_INT 4
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 5
42662: PUSH
42663: LD_INT 5
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 4
42672: PUSH
42673: LD_INT 5
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 3
42682: PUSH
42683: LD_INT 4
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 3
42692: PUSH
42693: LD_INT 3
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 5
42702: PUSH
42703: LD_INT 3
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 3
42712: PUSH
42713: LD_INT 5
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 3
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: LD_INT 2
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: LD_INT 3
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 1
42752: PUSH
42753: LD_INT 4
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: LD_INT 4
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: LD_INT 3
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: NEG
42784: PUSH
42785: LD_INT 2
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: LD_INT 4
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 2
42804: NEG
42805: PUSH
42806: LD_INT 2
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 4
42815: NEG
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 4
42826: NEG
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 3
42838: NEG
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 3
42849: NEG
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 4
42860: NEG
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 5
42871: NEG
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 5
42882: NEG
42883: PUSH
42884: LD_INT 1
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 5
42894: NEG
42895: PUSH
42896: LD_INT 2
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 3
42906: NEG
42907: PUSH
42908: LD_INT 2
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: ST_TO_ADDR
// end ; end ;
42962: GO 42965
42964: POP
// case btype of b_depot , b_warehouse :
42965: LD_VAR 0 1
42969: PUSH
42970: LD_INT 0
42972: DOUBLE
42973: EQUAL
42974: IFTRUE 42984
42976: LD_INT 1
42978: DOUBLE
42979: EQUAL
42980: IFTRUE 42984
42982: GO 43185
42984: POP
// case nation of nation_american :
42985: LD_VAR 0 5
42989: PUSH
42990: LD_INT 1
42992: DOUBLE
42993: EQUAL
42994: IFTRUE 42998
42996: GO 43054
42998: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42999: LD_ADDR_VAR 0 9
43003: PUSH
43004: LD_VAR 0 11
43008: PUSH
43009: LD_VAR 0 12
43013: PUSH
43014: LD_VAR 0 13
43018: PUSH
43019: LD_VAR 0 14
43023: PUSH
43024: LD_VAR 0 15
43028: PUSH
43029: LD_VAR 0 16
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: PUSH
43042: LD_VAR 0 4
43046: PUSH
43047: LD_INT 1
43049: PLUS
43050: ARRAY
43051: ST_TO_ADDR
43052: GO 43183
43054: LD_INT 2
43056: DOUBLE
43057: EQUAL
43058: IFTRUE 43062
43060: GO 43118
43062: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43063: LD_ADDR_VAR 0 9
43067: PUSH
43068: LD_VAR 0 17
43072: PUSH
43073: LD_VAR 0 18
43077: PUSH
43078: LD_VAR 0 19
43082: PUSH
43083: LD_VAR 0 20
43087: PUSH
43088: LD_VAR 0 21
43092: PUSH
43093: LD_VAR 0 22
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: PUSH
43106: LD_VAR 0 4
43110: PUSH
43111: LD_INT 1
43113: PLUS
43114: ARRAY
43115: ST_TO_ADDR
43116: GO 43183
43118: LD_INT 3
43120: DOUBLE
43121: EQUAL
43122: IFTRUE 43126
43124: GO 43182
43126: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43127: LD_ADDR_VAR 0 9
43131: PUSH
43132: LD_VAR 0 23
43136: PUSH
43137: LD_VAR 0 24
43141: PUSH
43142: LD_VAR 0 25
43146: PUSH
43147: LD_VAR 0 26
43151: PUSH
43152: LD_VAR 0 27
43156: PUSH
43157: LD_VAR 0 28
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: PUSH
43170: LD_VAR 0 4
43174: PUSH
43175: LD_INT 1
43177: PLUS
43178: ARRAY
43179: ST_TO_ADDR
43180: GO 43183
43182: POP
43183: GO 43738
43185: LD_INT 2
43187: DOUBLE
43188: EQUAL
43189: IFTRUE 43199
43191: LD_INT 3
43193: DOUBLE
43194: EQUAL
43195: IFTRUE 43199
43197: GO 43255
43199: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43200: LD_ADDR_VAR 0 9
43204: PUSH
43205: LD_VAR 0 29
43209: PUSH
43210: LD_VAR 0 30
43214: PUSH
43215: LD_VAR 0 31
43219: PUSH
43220: LD_VAR 0 32
43224: PUSH
43225: LD_VAR 0 33
43229: PUSH
43230: LD_VAR 0 34
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: PUSH
43243: LD_VAR 0 4
43247: PUSH
43248: LD_INT 1
43250: PLUS
43251: ARRAY
43252: ST_TO_ADDR
43253: GO 43738
43255: LD_INT 16
43257: DOUBLE
43258: EQUAL
43259: IFTRUE 43317
43261: LD_INT 17
43263: DOUBLE
43264: EQUAL
43265: IFTRUE 43317
43267: LD_INT 18
43269: DOUBLE
43270: EQUAL
43271: IFTRUE 43317
43273: LD_INT 19
43275: DOUBLE
43276: EQUAL
43277: IFTRUE 43317
43279: LD_INT 22
43281: DOUBLE
43282: EQUAL
43283: IFTRUE 43317
43285: LD_INT 20
43287: DOUBLE
43288: EQUAL
43289: IFTRUE 43317
43291: LD_INT 21
43293: DOUBLE
43294: EQUAL
43295: IFTRUE 43317
43297: LD_INT 23
43299: DOUBLE
43300: EQUAL
43301: IFTRUE 43317
43303: LD_INT 24
43305: DOUBLE
43306: EQUAL
43307: IFTRUE 43317
43309: LD_INT 25
43311: DOUBLE
43312: EQUAL
43313: IFTRUE 43317
43315: GO 43373
43317: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43318: LD_ADDR_VAR 0 9
43322: PUSH
43323: LD_VAR 0 35
43327: PUSH
43328: LD_VAR 0 36
43332: PUSH
43333: LD_VAR 0 37
43337: PUSH
43338: LD_VAR 0 38
43342: PUSH
43343: LD_VAR 0 39
43347: PUSH
43348: LD_VAR 0 40
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: PUSH
43361: LD_VAR 0 4
43365: PUSH
43366: LD_INT 1
43368: PLUS
43369: ARRAY
43370: ST_TO_ADDR
43371: GO 43738
43373: LD_INT 6
43375: DOUBLE
43376: EQUAL
43377: IFTRUE 43429
43379: LD_INT 7
43381: DOUBLE
43382: EQUAL
43383: IFTRUE 43429
43385: LD_INT 8
43387: DOUBLE
43388: EQUAL
43389: IFTRUE 43429
43391: LD_INT 13
43393: DOUBLE
43394: EQUAL
43395: IFTRUE 43429
43397: LD_INT 12
43399: DOUBLE
43400: EQUAL
43401: IFTRUE 43429
43403: LD_INT 15
43405: DOUBLE
43406: EQUAL
43407: IFTRUE 43429
43409: LD_INT 11
43411: DOUBLE
43412: EQUAL
43413: IFTRUE 43429
43415: LD_INT 14
43417: DOUBLE
43418: EQUAL
43419: IFTRUE 43429
43421: LD_INT 10
43423: DOUBLE
43424: EQUAL
43425: IFTRUE 43429
43427: GO 43485
43429: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
43430: LD_ADDR_VAR 0 9
43434: PUSH
43435: LD_VAR 0 41
43439: PUSH
43440: LD_VAR 0 42
43444: PUSH
43445: LD_VAR 0 43
43449: PUSH
43450: LD_VAR 0 44
43454: PUSH
43455: LD_VAR 0 45
43459: PUSH
43460: LD_VAR 0 46
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: PUSH
43473: LD_VAR 0 4
43477: PUSH
43478: LD_INT 1
43480: PLUS
43481: ARRAY
43482: ST_TO_ADDR
43483: GO 43738
43485: LD_INT 36
43487: DOUBLE
43488: EQUAL
43489: IFTRUE 43493
43491: GO 43549
43493: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43494: LD_ADDR_VAR 0 9
43498: PUSH
43499: LD_VAR 0 47
43503: PUSH
43504: LD_VAR 0 48
43508: PUSH
43509: LD_VAR 0 49
43513: PUSH
43514: LD_VAR 0 50
43518: PUSH
43519: LD_VAR 0 51
43523: PUSH
43524: LD_VAR 0 52
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: PUSH
43537: LD_VAR 0 4
43541: PUSH
43542: LD_INT 1
43544: PLUS
43545: ARRAY
43546: ST_TO_ADDR
43547: GO 43738
43549: LD_INT 4
43551: DOUBLE
43552: EQUAL
43553: IFTRUE 43575
43555: LD_INT 5
43557: DOUBLE
43558: EQUAL
43559: IFTRUE 43575
43561: LD_INT 34
43563: DOUBLE
43564: EQUAL
43565: IFTRUE 43575
43567: LD_INT 37
43569: DOUBLE
43570: EQUAL
43571: IFTRUE 43575
43573: GO 43631
43575: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43576: LD_ADDR_VAR 0 9
43580: PUSH
43581: LD_VAR 0 53
43585: PUSH
43586: LD_VAR 0 54
43590: PUSH
43591: LD_VAR 0 55
43595: PUSH
43596: LD_VAR 0 56
43600: PUSH
43601: LD_VAR 0 57
43605: PUSH
43606: LD_VAR 0 58
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: PUSH
43619: LD_VAR 0 4
43623: PUSH
43624: LD_INT 1
43626: PLUS
43627: ARRAY
43628: ST_TO_ADDR
43629: GO 43738
43631: LD_INT 31
43633: DOUBLE
43634: EQUAL
43635: IFTRUE 43681
43637: LD_INT 32
43639: DOUBLE
43640: EQUAL
43641: IFTRUE 43681
43643: LD_INT 33
43645: DOUBLE
43646: EQUAL
43647: IFTRUE 43681
43649: LD_INT 27
43651: DOUBLE
43652: EQUAL
43653: IFTRUE 43681
43655: LD_INT 26
43657: DOUBLE
43658: EQUAL
43659: IFTRUE 43681
43661: LD_INT 28
43663: DOUBLE
43664: EQUAL
43665: IFTRUE 43681
43667: LD_INT 29
43669: DOUBLE
43670: EQUAL
43671: IFTRUE 43681
43673: LD_INT 30
43675: DOUBLE
43676: EQUAL
43677: IFTRUE 43681
43679: GO 43737
43681: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43682: LD_ADDR_VAR 0 9
43686: PUSH
43687: LD_VAR 0 59
43691: PUSH
43692: LD_VAR 0 60
43696: PUSH
43697: LD_VAR 0 61
43701: PUSH
43702: LD_VAR 0 62
43706: PUSH
43707: LD_VAR 0 63
43711: PUSH
43712: LD_VAR 0 64
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: PUSH
43725: LD_VAR 0 4
43729: PUSH
43730: LD_INT 1
43732: PLUS
43733: ARRAY
43734: ST_TO_ADDR
43735: GO 43738
43737: POP
// temp_list2 = [ ] ;
43738: LD_ADDR_VAR 0 10
43742: PUSH
43743: EMPTY
43744: ST_TO_ADDR
// for i in temp_list do
43745: LD_ADDR_VAR 0 8
43749: PUSH
43750: LD_VAR 0 9
43754: PUSH
43755: FOR_IN
43756: IFFALSE 43808
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43758: LD_ADDR_VAR 0 10
43762: PUSH
43763: LD_VAR 0 10
43767: PUSH
43768: LD_VAR 0 8
43772: PUSH
43773: LD_INT 1
43775: ARRAY
43776: PUSH
43777: LD_VAR 0 2
43781: PLUS
43782: PUSH
43783: LD_VAR 0 8
43787: PUSH
43788: LD_INT 2
43790: ARRAY
43791: PUSH
43792: LD_VAR 0 3
43796: PLUS
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: EMPTY
43803: LIST
43804: ADD
43805: ST_TO_ADDR
43806: GO 43755
43808: POP
43809: POP
// result = temp_list2 ;
43810: LD_ADDR_VAR 0 7
43814: PUSH
43815: LD_VAR 0 10
43819: ST_TO_ADDR
// end ;
43820: LD_VAR 0 7
43824: RET
// export function EnemyInRange ( unit , dist ) ; begin
43825: LD_INT 0
43827: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43828: LD_ADDR_VAR 0 3
43832: PUSH
43833: LD_VAR 0 1
43837: PPUSH
43838: CALL_OW 255
43842: PPUSH
43843: LD_VAR 0 1
43847: PPUSH
43848: CALL_OW 250
43852: PPUSH
43853: LD_VAR 0 1
43857: PPUSH
43858: CALL_OW 251
43862: PPUSH
43863: LD_VAR 0 2
43867: PPUSH
43868: CALL 17082 0 4
43872: PUSH
43873: LD_INT 4
43875: ARRAY
43876: ST_TO_ADDR
// end ;
43877: LD_VAR 0 3
43881: RET
// export function PlayerSeeMe ( unit ) ; begin
43882: LD_INT 0
43884: PPUSH
// result := See ( your_side , unit ) ;
43885: LD_ADDR_VAR 0 2
43889: PUSH
43890: LD_OWVAR 2
43894: PPUSH
43895: LD_VAR 0 1
43899: PPUSH
43900: CALL_OW 292
43904: ST_TO_ADDR
// end ;
43905: LD_VAR 0 2
43909: RET
// export function ReverseDir ( unit ) ; begin
43910: LD_INT 0
43912: PPUSH
// if not unit then
43913: LD_VAR 0 1
43917: NOT
43918: IFFALSE 43922
// exit ;
43920: GO 43945
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43922: LD_ADDR_VAR 0 2
43926: PUSH
43927: LD_VAR 0 1
43931: PPUSH
43932: CALL_OW 254
43936: PUSH
43937: LD_INT 3
43939: PLUS
43940: PUSH
43941: LD_INT 6
43943: MOD
43944: ST_TO_ADDR
// end ;
43945: LD_VAR 0 2
43949: RET
// export function ReverseArray ( array ) ; var i ; begin
43950: LD_INT 0
43952: PPUSH
43953: PPUSH
// if not array then
43954: LD_VAR 0 1
43958: NOT
43959: IFFALSE 43963
// exit ;
43961: GO 44018
// result := [ ] ;
43963: LD_ADDR_VAR 0 2
43967: PUSH
43968: EMPTY
43969: ST_TO_ADDR
// for i := array downto 1 do
43970: LD_ADDR_VAR 0 3
43974: PUSH
43975: DOUBLE
43976: LD_VAR 0 1
43980: INC
43981: ST_TO_ADDR
43982: LD_INT 1
43984: PUSH
43985: FOR_DOWNTO
43986: IFFALSE 44016
// result := Join ( result , array [ i ] ) ;
43988: LD_ADDR_VAR 0 2
43992: PUSH
43993: LD_VAR 0 2
43997: PPUSH
43998: LD_VAR 0 1
44002: PUSH
44003: LD_VAR 0 3
44007: ARRAY
44008: PPUSH
44009: CALL 48860 0 2
44013: ST_TO_ADDR
44014: GO 43985
44016: POP
44017: POP
// end ;
44018: LD_VAR 0 2
44022: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44023: LD_INT 0
44025: PPUSH
44026: PPUSH
44027: PPUSH
44028: PPUSH
44029: PPUSH
44030: PPUSH
// if not unit or not hexes then
44031: LD_VAR 0 1
44035: NOT
44036: IFTRUE 44045
44038: PUSH
44039: LD_VAR 0 2
44043: NOT
44044: OR
44045: IFFALSE 44049
// exit ;
44047: GO 44172
// dist := 9999 ;
44049: LD_ADDR_VAR 0 5
44053: PUSH
44054: LD_INT 9999
44056: ST_TO_ADDR
// for i = 1 to hexes do
44057: LD_ADDR_VAR 0 4
44061: PUSH
44062: DOUBLE
44063: LD_INT 1
44065: DEC
44066: ST_TO_ADDR
44067: LD_VAR 0 2
44071: PUSH
44072: FOR_TO
44073: IFFALSE 44160
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44075: LD_ADDR_VAR 0 6
44079: PUSH
44080: LD_VAR 0 1
44084: PPUSH
44085: LD_VAR 0 2
44089: PUSH
44090: LD_VAR 0 4
44094: ARRAY
44095: PUSH
44096: LD_INT 1
44098: ARRAY
44099: PPUSH
44100: LD_VAR 0 2
44104: PUSH
44105: LD_VAR 0 4
44109: ARRAY
44110: PUSH
44111: LD_INT 2
44113: ARRAY
44114: PPUSH
44115: CALL_OW 297
44119: ST_TO_ADDR
// if tdist < dist then
44120: LD_VAR 0 6
44124: PUSH
44125: LD_VAR 0 5
44129: LESS
44130: IFFALSE 44158
// begin hex := hexes [ i ] ;
44132: LD_ADDR_VAR 0 8
44136: PUSH
44137: LD_VAR 0 2
44141: PUSH
44142: LD_VAR 0 4
44146: ARRAY
44147: ST_TO_ADDR
// dist := tdist ;
44148: LD_ADDR_VAR 0 5
44152: PUSH
44153: LD_VAR 0 6
44157: ST_TO_ADDR
// end ; end ;
44158: GO 44072
44160: POP
44161: POP
// result := hex ;
44162: LD_ADDR_VAR 0 3
44166: PUSH
44167: LD_VAR 0 8
44171: ST_TO_ADDR
// end ;
44172: LD_VAR 0 3
44176: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44177: LD_INT 0
44179: PPUSH
44180: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44181: LD_VAR 0 1
44185: NOT
44186: IFTRUE 44225
44188: PUSH
44189: LD_VAR 0 1
44193: PUSH
44194: LD_INT 21
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 23
44206: PUSH
44207: LD_INT 2
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PPUSH
44218: CALL_OW 69
44222: IN
44223: NOT
44224: OR
44225: IFFALSE 44229
// exit ;
44227: GO 44276
// for i = 1 to 3 do
44229: LD_ADDR_VAR 0 3
44233: PUSH
44234: DOUBLE
44235: LD_INT 1
44237: DEC
44238: ST_TO_ADDR
44239: LD_INT 3
44241: PUSH
44242: FOR_TO
44243: IFFALSE 44274
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44245: LD_VAR 0 1
44249: PPUSH
44250: CALL_OW 250
44254: PPUSH
44255: LD_VAR 0 1
44259: PPUSH
44260: CALL_OW 251
44264: PPUSH
44265: LD_INT 1
44267: PPUSH
44268: CALL_OW 453
44272: GO 44242
44274: POP
44275: POP
// end ;
44276: LD_VAR 0 2
44280: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44281: LD_INT 0
44283: PPUSH
44284: PPUSH
44285: PPUSH
44286: PPUSH
44287: PPUSH
44288: PPUSH
// if not unit or not enemy_unit then
44289: LD_VAR 0 1
44293: NOT
44294: IFTRUE 44303
44296: PUSH
44297: LD_VAR 0 2
44301: NOT
44302: OR
44303: IFFALSE 44307
// exit ;
44305: GO 44778
// if GetLives ( i ) < 250 then
44307: LD_VAR 0 4
44311: PPUSH
44312: CALL_OW 256
44316: PUSH
44317: LD_INT 250
44319: LESS
44320: IFFALSE 44333
// begin ComAutodestruct ( i ) ;
44322: LD_VAR 0 4
44326: PPUSH
44327: CALL 44177 0 1
// exit ;
44331: GO 44778
// end ; x := GetX ( enemy_unit ) ;
44333: LD_ADDR_VAR 0 7
44337: PUSH
44338: LD_VAR 0 2
44342: PPUSH
44343: CALL_OW 250
44347: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44348: LD_ADDR_VAR 0 8
44352: PUSH
44353: LD_VAR 0 2
44357: PPUSH
44358: CALL_OW 251
44362: ST_TO_ADDR
// if not x or not y then
44363: LD_VAR 0 7
44367: NOT
44368: IFTRUE 44377
44370: PUSH
44371: LD_VAR 0 8
44375: NOT
44376: OR
44377: IFFALSE 44381
// exit ;
44379: GO 44778
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44381: LD_ADDR_VAR 0 6
44385: PUSH
44386: LD_VAR 0 7
44390: PPUSH
44391: LD_INT 0
44393: PPUSH
44394: LD_INT 4
44396: PPUSH
44397: CALL_OW 272
44401: PUSH
44402: LD_VAR 0 8
44406: PPUSH
44407: LD_INT 0
44409: PPUSH
44410: LD_INT 4
44412: PPUSH
44413: CALL_OW 273
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_VAR 0 7
44426: PPUSH
44427: LD_INT 1
44429: PPUSH
44430: LD_INT 4
44432: PPUSH
44433: CALL_OW 272
44437: PUSH
44438: LD_VAR 0 8
44442: PPUSH
44443: LD_INT 1
44445: PPUSH
44446: LD_INT 4
44448: PPUSH
44449: CALL_OW 273
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_VAR 0 7
44462: PPUSH
44463: LD_INT 2
44465: PPUSH
44466: LD_INT 4
44468: PPUSH
44469: CALL_OW 272
44473: PUSH
44474: LD_VAR 0 8
44478: PPUSH
44479: LD_INT 2
44481: PPUSH
44482: LD_INT 4
44484: PPUSH
44485: CALL_OW 273
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_VAR 0 7
44498: PPUSH
44499: LD_INT 3
44501: PPUSH
44502: LD_INT 4
44504: PPUSH
44505: CALL_OW 272
44509: PUSH
44510: LD_VAR 0 8
44514: PPUSH
44515: LD_INT 3
44517: PPUSH
44518: LD_INT 4
44520: PPUSH
44521: CALL_OW 273
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_VAR 0 7
44534: PPUSH
44535: LD_INT 4
44537: PPUSH
44538: LD_INT 4
44540: PPUSH
44541: CALL_OW 272
44545: PUSH
44546: LD_VAR 0 8
44550: PPUSH
44551: LD_INT 4
44553: PPUSH
44554: LD_INT 4
44556: PPUSH
44557: CALL_OW 273
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_VAR 0 7
44570: PPUSH
44571: LD_INT 5
44573: PPUSH
44574: LD_INT 4
44576: PPUSH
44577: CALL_OW 272
44581: PUSH
44582: LD_VAR 0 8
44586: PPUSH
44587: LD_INT 5
44589: PPUSH
44590: LD_INT 4
44592: PPUSH
44593: CALL_OW 273
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: ST_TO_ADDR
// for i = tmp downto 1 do
44610: LD_ADDR_VAR 0 4
44614: PUSH
44615: DOUBLE
44616: LD_VAR 0 6
44620: INC
44621: ST_TO_ADDR
44622: LD_INT 1
44624: PUSH
44625: FOR_DOWNTO
44626: IFFALSE 44729
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44628: LD_VAR 0 6
44632: PUSH
44633: LD_VAR 0 4
44637: ARRAY
44638: PUSH
44639: LD_INT 1
44641: ARRAY
44642: PPUSH
44643: LD_VAR 0 6
44647: PUSH
44648: LD_VAR 0 4
44652: ARRAY
44653: PUSH
44654: LD_INT 2
44656: ARRAY
44657: PPUSH
44658: CALL_OW 488
44662: NOT
44663: IFTRUE 44705
44665: PUSH
44666: LD_VAR 0 6
44670: PUSH
44671: LD_VAR 0 4
44675: ARRAY
44676: PUSH
44677: LD_INT 1
44679: ARRAY
44680: PPUSH
44681: LD_VAR 0 6
44685: PUSH
44686: LD_VAR 0 4
44690: ARRAY
44691: PUSH
44692: LD_INT 2
44694: ARRAY
44695: PPUSH
44696: CALL_OW 428
44700: PUSH
44701: LD_INT 0
44703: NONEQUAL
44704: OR
44705: IFFALSE 44727
// tmp := Delete ( tmp , i ) ;
44707: LD_ADDR_VAR 0 6
44711: PUSH
44712: LD_VAR 0 6
44716: PPUSH
44717: LD_VAR 0 4
44721: PPUSH
44722: CALL_OW 3
44726: ST_TO_ADDR
44727: GO 44625
44729: POP
44730: POP
// j := GetClosestHex ( unit , tmp ) ;
44731: LD_ADDR_VAR 0 5
44735: PUSH
44736: LD_VAR 0 1
44740: PPUSH
44741: LD_VAR 0 6
44745: PPUSH
44746: CALL 44023 0 2
44750: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44751: LD_VAR 0 1
44755: PPUSH
44756: LD_VAR 0 5
44760: PUSH
44761: LD_INT 1
44763: ARRAY
44764: PPUSH
44765: LD_VAR 0 5
44769: PUSH
44770: LD_INT 2
44772: ARRAY
44773: PPUSH
44774: CALL_OW 111
// end ;
44778: LD_VAR 0 3
44782: RET
// export function PrepareApemanSoldier ( ) ; begin
44783: LD_INT 0
44785: PPUSH
// uc_nation := 0 ;
44786: LD_ADDR_OWVAR 21
44790: PUSH
44791: LD_INT 0
44793: ST_TO_ADDR
// hc_sex := sex_male ;
44794: LD_ADDR_OWVAR 27
44798: PUSH
44799: LD_INT 1
44801: ST_TO_ADDR
// hc_name :=  ;
44802: LD_ADDR_OWVAR 26
44806: PUSH
44807: LD_STRING 
44809: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44810: LD_ADDR_OWVAR 28
44814: PUSH
44815: LD_INT 15
44817: ST_TO_ADDR
// hc_gallery :=  ;
44818: LD_ADDR_OWVAR 33
44822: PUSH
44823: LD_STRING 
44825: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44826: LD_ADDR_OWVAR 31
44830: PUSH
44831: LD_INT 0
44833: PPUSH
44834: LD_INT 3
44836: PPUSH
44837: CALL_OW 12
44841: PUSH
44842: LD_INT 0
44844: PPUSH
44845: LD_INT 3
44847: PPUSH
44848: CALL_OW 12
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44865: LD_ADDR_OWVAR 29
44869: PUSH
44870: LD_INT 12
44872: PUSH
44873: LD_INT 12
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: ST_TO_ADDR
// end ;
44880: LD_VAR 0 1
44884: RET
// export function PrepareApemanEngineer ( ) ; begin
44885: LD_INT 0
44887: PPUSH
// uc_nation := 0 ;
44888: LD_ADDR_OWVAR 21
44892: PUSH
44893: LD_INT 0
44895: ST_TO_ADDR
// hc_sex := sex_male ;
44896: LD_ADDR_OWVAR 27
44900: PUSH
44901: LD_INT 1
44903: ST_TO_ADDR
// hc_name :=  ;
44904: LD_ADDR_OWVAR 26
44908: PUSH
44909: LD_STRING 
44911: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44912: LD_ADDR_OWVAR 28
44916: PUSH
44917: LD_INT 16
44919: ST_TO_ADDR
// hc_gallery :=  ;
44920: LD_ADDR_OWVAR 33
44924: PUSH
44925: LD_STRING 
44927: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44928: LD_ADDR_OWVAR 31
44932: PUSH
44933: LD_INT 0
44935: PPUSH
44936: LD_INT 3
44938: PPUSH
44939: CALL_OW 12
44943: PUSH
44944: LD_INT 0
44946: PPUSH
44947: LD_INT 3
44949: PPUSH
44950: CALL_OW 12
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44967: LD_ADDR_OWVAR 29
44971: PUSH
44972: LD_INT 12
44974: PUSH
44975: LD_INT 12
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: ST_TO_ADDR
// end ;
44982: LD_VAR 0 1
44986: RET
// export function PrepareApeman ( agressivity ) ; begin
44987: LD_INT 0
44989: PPUSH
// uc_side := 0 ;
44990: LD_ADDR_OWVAR 20
44994: PUSH
44995: LD_INT 0
44997: ST_TO_ADDR
// uc_nation := 0 ;
44998: LD_ADDR_OWVAR 21
45002: PUSH
45003: LD_INT 0
45005: ST_TO_ADDR
// hc_sex := sex_male ;
45006: LD_ADDR_OWVAR 27
45010: PUSH
45011: LD_INT 1
45013: ST_TO_ADDR
// hc_class := class_apeman ;
45014: LD_ADDR_OWVAR 28
45018: PUSH
45019: LD_INT 12
45021: ST_TO_ADDR
// hc_gallery :=  ;
45022: LD_ADDR_OWVAR 33
45026: PUSH
45027: LD_STRING 
45029: ST_TO_ADDR
// hc_name :=  ;
45030: LD_ADDR_OWVAR 26
45034: PUSH
45035: LD_STRING 
45037: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
45038: LD_ADDR_OWVAR 29
45042: PUSH
45043: LD_INT 12
45045: PUSH
45046: LD_INT 12
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: ST_TO_ADDR
// if agressivity = 0 then
45053: LD_VAR 0 1
45057: PUSH
45058: LD_INT 0
45060: EQUAL
45061: IFFALSE 45073
// hc_agressivity := 0 else
45063: LD_ADDR_OWVAR 35
45067: PUSH
45068: LD_INT 0
45070: ST_TO_ADDR
45071: GO 45094
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45073: LD_ADDR_OWVAR 35
45077: PUSH
45078: LD_VAR 0 1
45082: NEG
45083: PPUSH
45084: LD_VAR 0 1
45088: PPUSH
45089: CALL_OW 12
45093: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45094: LD_ADDR_OWVAR 31
45098: PUSH
45099: LD_INT 0
45101: PPUSH
45102: LD_INT 3
45104: PPUSH
45105: CALL_OW 12
45109: PUSH
45110: LD_INT 0
45112: PPUSH
45113: LD_INT 3
45115: PPUSH
45116: CALL_OW 12
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: ST_TO_ADDR
// end ;
45133: LD_VAR 0 2
45137: RET
// export function PrepareTiger ( agressivity ) ; begin
45138: LD_INT 0
45140: PPUSH
// uc_side := 0 ;
45141: LD_ADDR_OWVAR 20
45145: PUSH
45146: LD_INT 0
45148: ST_TO_ADDR
// uc_nation := 0 ;
45149: LD_ADDR_OWVAR 21
45153: PUSH
45154: LD_INT 0
45156: ST_TO_ADDR
// InitHc ;
45157: CALL_OW 19
// hc_class := class_tiger ;
45161: LD_ADDR_OWVAR 28
45165: PUSH
45166: LD_INT 14
45168: ST_TO_ADDR
// hc_gallery :=  ;
45169: LD_ADDR_OWVAR 33
45173: PUSH
45174: LD_STRING 
45176: ST_TO_ADDR
// hc_name :=  ;
45177: LD_ADDR_OWVAR 26
45181: PUSH
45182: LD_STRING 
45184: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45185: LD_ADDR_OWVAR 35
45189: PUSH
45190: LD_VAR 0 1
45194: NEG
45195: PPUSH
45196: LD_VAR 0 1
45200: PPUSH
45201: CALL_OW 12
45205: ST_TO_ADDR
// end ;
45206: LD_VAR 0 2
45210: RET
// export function PrepareEnchidna ( ) ; begin
45211: LD_INT 0
45213: PPUSH
// uc_side := 0 ;
45214: LD_ADDR_OWVAR 20
45218: PUSH
45219: LD_INT 0
45221: ST_TO_ADDR
// uc_nation := 0 ;
45222: LD_ADDR_OWVAR 21
45226: PUSH
45227: LD_INT 0
45229: ST_TO_ADDR
// InitHc ;
45230: CALL_OW 19
// hc_class := class_baggie ;
45234: LD_ADDR_OWVAR 28
45238: PUSH
45239: LD_INT 13
45241: ST_TO_ADDR
// hc_gallery :=  ;
45242: LD_ADDR_OWVAR 33
45246: PUSH
45247: LD_STRING 
45249: ST_TO_ADDR
// hc_name :=  ;
45250: LD_ADDR_OWVAR 26
45254: PUSH
45255: LD_STRING 
45257: ST_TO_ADDR
// end ;
45258: LD_VAR 0 1
45262: RET
// export function PrepareFrog ( ) ; begin
45263: LD_INT 0
45265: PPUSH
// uc_side := 0 ;
45266: LD_ADDR_OWVAR 20
45270: PUSH
45271: LD_INT 0
45273: ST_TO_ADDR
// uc_nation := 0 ;
45274: LD_ADDR_OWVAR 21
45278: PUSH
45279: LD_INT 0
45281: ST_TO_ADDR
// InitHc ;
45282: CALL_OW 19
// hc_class := class_frog ;
45286: LD_ADDR_OWVAR 28
45290: PUSH
45291: LD_INT 19
45293: ST_TO_ADDR
// hc_gallery :=  ;
45294: LD_ADDR_OWVAR 33
45298: PUSH
45299: LD_STRING 
45301: ST_TO_ADDR
// hc_name :=  ;
45302: LD_ADDR_OWVAR 26
45306: PUSH
45307: LD_STRING 
45309: ST_TO_ADDR
// end ;
45310: LD_VAR 0 1
45314: RET
// export function PrepareFish ( ) ; begin
45315: LD_INT 0
45317: PPUSH
// uc_side := 0 ;
45318: LD_ADDR_OWVAR 20
45322: PUSH
45323: LD_INT 0
45325: ST_TO_ADDR
// uc_nation := 0 ;
45326: LD_ADDR_OWVAR 21
45330: PUSH
45331: LD_INT 0
45333: ST_TO_ADDR
// InitHc ;
45334: CALL_OW 19
// hc_class := class_fish ;
45338: LD_ADDR_OWVAR 28
45342: PUSH
45343: LD_INT 20
45345: ST_TO_ADDR
// hc_gallery :=  ;
45346: LD_ADDR_OWVAR 33
45350: PUSH
45351: LD_STRING 
45353: ST_TO_ADDR
// hc_name :=  ;
45354: LD_ADDR_OWVAR 26
45358: PUSH
45359: LD_STRING 
45361: ST_TO_ADDR
// end ;
45362: LD_VAR 0 1
45366: RET
// export function PrepareBird ( ) ; begin
45367: LD_INT 0
45369: PPUSH
// uc_side := 0 ;
45370: LD_ADDR_OWVAR 20
45374: PUSH
45375: LD_INT 0
45377: ST_TO_ADDR
// uc_nation := 0 ;
45378: LD_ADDR_OWVAR 21
45382: PUSH
45383: LD_INT 0
45385: ST_TO_ADDR
// InitHc ;
45386: CALL_OW 19
// hc_class := class_phororhacos ;
45390: LD_ADDR_OWVAR 28
45394: PUSH
45395: LD_INT 18
45397: ST_TO_ADDR
// hc_gallery :=  ;
45398: LD_ADDR_OWVAR 33
45402: PUSH
45403: LD_STRING 
45405: ST_TO_ADDR
// hc_name :=  ;
45406: LD_ADDR_OWVAR 26
45410: PUSH
45411: LD_STRING 
45413: ST_TO_ADDR
// end ;
45414: LD_VAR 0 1
45418: RET
// export function PrepareHorse ( ) ; begin
45419: LD_INT 0
45421: PPUSH
// uc_side := 0 ;
45422: LD_ADDR_OWVAR 20
45426: PUSH
45427: LD_INT 0
45429: ST_TO_ADDR
// uc_nation := 0 ;
45430: LD_ADDR_OWVAR 21
45434: PUSH
45435: LD_INT 0
45437: ST_TO_ADDR
// InitHc ;
45438: CALL_OW 19
// hc_class := class_horse ;
45442: LD_ADDR_OWVAR 28
45446: PUSH
45447: LD_INT 21
45449: ST_TO_ADDR
// hc_gallery :=  ;
45450: LD_ADDR_OWVAR 33
45454: PUSH
45455: LD_STRING 
45457: ST_TO_ADDR
// hc_name :=  ;
45458: LD_ADDR_OWVAR 26
45462: PUSH
45463: LD_STRING 
45465: ST_TO_ADDR
// end ;
45466: LD_VAR 0 1
45470: RET
// export function PrepareMastodont ( ) ; begin
45471: LD_INT 0
45473: PPUSH
// uc_side := 0 ;
45474: LD_ADDR_OWVAR 20
45478: PUSH
45479: LD_INT 0
45481: ST_TO_ADDR
// uc_nation := 0 ;
45482: LD_ADDR_OWVAR 21
45486: PUSH
45487: LD_INT 0
45489: ST_TO_ADDR
// vc_chassis := class_mastodont ;
45490: LD_ADDR_OWVAR 37
45494: PUSH
45495: LD_INT 31
45497: ST_TO_ADDR
// vc_control := control_rider ;
45498: LD_ADDR_OWVAR 38
45502: PUSH
45503: LD_INT 4
45505: ST_TO_ADDR
// end ;
45506: LD_VAR 0 1
45510: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45511: LD_INT 0
45513: PPUSH
45514: PPUSH
45515: PPUSH
// uc_side = 0 ;
45516: LD_ADDR_OWVAR 20
45520: PUSH
45521: LD_INT 0
45523: ST_TO_ADDR
// uc_nation = 0 ;
45524: LD_ADDR_OWVAR 21
45528: PUSH
45529: LD_INT 0
45531: ST_TO_ADDR
// InitHc_All ( ) ;
45532: CALL_OW 584
// InitVc ;
45536: CALL_OW 20
// if mastodonts then
45540: LD_VAR 0 6
45544: IFFALSE 45611
// for i = 1 to mastodonts do
45546: LD_ADDR_VAR 0 11
45550: PUSH
45551: DOUBLE
45552: LD_INT 1
45554: DEC
45555: ST_TO_ADDR
45556: LD_VAR 0 6
45560: PUSH
45561: FOR_TO
45562: IFFALSE 45609
// begin vc_chassis := 31 ;
45564: LD_ADDR_OWVAR 37
45568: PUSH
45569: LD_INT 31
45571: ST_TO_ADDR
// vc_control := control_rider ;
45572: LD_ADDR_OWVAR 38
45576: PUSH
45577: LD_INT 4
45579: ST_TO_ADDR
// animal := CreateVehicle ;
45580: LD_ADDR_VAR 0 12
45584: PUSH
45585: CALL_OW 45
45589: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45590: LD_VAR 0 12
45594: PPUSH
45595: LD_VAR 0 8
45599: PPUSH
45600: LD_INT 0
45602: PPUSH
45603: CALL 47753 0 3
// end ;
45607: GO 45561
45609: POP
45610: POP
// if horses then
45611: LD_VAR 0 5
45615: IFFALSE 45682
// for i = 1 to horses do
45617: LD_ADDR_VAR 0 11
45621: PUSH
45622: DOUBLE
45623: LD_INT 1
45625: DEC
45626: ST_TO_ADDR
45627: LD_VAR 0 5
45631: PUSH
45632: FOR_TO
45633: IFFALSE 45680
// begin hc_class := 21 ;
45635: LD_ADDR_OWVAR 28
45639: PUSH
45640: LD_INT 21
45642: ST_TO_ADDR
// hc_gallery :=  ;
45643: LD_ADDR_OWVAR 33
45647: PUSH
45648: LD_STRING 
45650: ST_TO_ADDR
// animal := CreateHuman ;
45651: LD_ADDR_VAR 0 12
45655: PUSH
45656: CALL_OW 44
45660: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45661: LD_VAR 0 12
45665: PPUSH
45666: LD_VAR 0 8
45670: PPUSH
45671: LD_INT 0
45673: PPUSH
45674: CALL 47753 0 3
// end ;
45678: GO 45632
45680: POP
45681: POP
// if birds then
45682: LD_VAR 0 1
45686: IFFALSE 45753
// for i = 1 to birds do
45688: LD_ADDR_VAR 0 11
45692: PUSH
45693: DOUBLE
45694: LD_INT 1
45696: DEC
45697: ST_TO_ADDR
45698: LD_VAR 0 1
45702: PUSH
45703: FOR_TO
45704: IFFALSE 45751
// begin hc_class := 18 ;
45706: LD_ADDR_OWVAR 28
45710: PUSH
45711: LD_INT 18
45713: ST_TO_ADDR
// hc_gallery =  ;
45714: LD_ADDR_OWVAR 33
45718: PUSH
45719: LD_STRING 
45721: ST_TO_ADDR
// animal := CreateHuman ;
45722: LD_ADDR_VAR 0 12
45726: PUSH
45727: CALL_OW 44
45731: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45732: LD_VAR 0 12
45736: PPUSH
45737: LD_VAR 0 8
45741: PPUSH
45742: LD_INT 0
45744: PPUSH
45745: CALL 47753 0 3
// end ;
45749: GO 45703
45751: POP
45752: POP
// if tigers then
45753: LD_VAR 0 2
45757: IFFALSE 45841
// for i = 1 to tigers do
45759: LD_ADDR_VAR 0 11
45763: PUSH
45764: DOUBLE
45765: LD_INT 1
45767: DEC
45768: ST_TO_ADDR
45769: LD_VAR 0 2
45773: PUSH
45774: FOR_TO
45775: IFFALSE 45839
// begin hc_class = class_tiger ;
45777: LD_ADDR_OWVAR 28
45781: PUSH
45782: LD_INT 14
45784: ST_TO_ADDR
// hc_gallery =  ;
45785: LD_ADDR_OWVAR 33
45789: PUSH
45790: LD_STRING 
45792: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45793: LD_ADDR_OWVAR 35
45797: PUSH
45798: LD_INT 7
45800: NEG
45801: PPUSH
45802: LD_INT 7
45804: PPUSH
45805: CALL_OW 12
45809: ST_TO_ADDR
// animal := CreateHuman ;
45810: LD_ADDR_VAR 0 12
45814: PUSH
45815: CALL_OW 44
45819: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45820: LD_VAR 0 12
45824: PPUSH
45825: LD_VAR 0 8
45829: PPUSH
45830: LD_INT 0
45832: PPUSH
45833: CALL 47753 0 3
// end ;
45837: GO 45774
45839: POP
45840: POP
// if apemans then
45841: LD_VAR 0 3
45845: IFFALSE 45968
// for i = 1 to apemans do
45847: LD_ADDR_VAR 0 11
45851: PUSH
45852: DOUBLE
45853: LD_INT 1
45855: DEC
45856: ST_TO_ADDR
45857: LD_VAR 0 3
45861: PUSH
45862: FOR_TO
45863: IFFALSE 45966
// begin hc_class = class_apeman ;
45865: LD_ADDR_OWVAR 28
45869: PUSH
45870: LD_INT 12
45872: ST_TO_ADDR
// hc_gallery =  ;
45873: LD_ADDR_OWVAR 33
45877: PUSH
45878: LD_STRING 
45880: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45881: LD_ADDR_OWVAR 35
45885: PUSH
45886: LD_INT 2
45888: NEG
45889: PPUSH
45890: LD_INT 2
45892: PPUSH
45893: CALL_OW 12
45897: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45898: LD_ADDR_OWVAR 31
45902: PUSH
45903: LD_INT 1
45905: PPUSH
45906: LD_INT 3
45908: PPUSH
45909: CALL_OW 12
45913: PUSH
45914: LD_INT 1
45916: PPUSH
45917: LD_INT 3
45919: PPUSH
45920: CALL_OW 12
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: ST_TO_ADDR
// animal := CreateHuman ;
45937: LD_ADDR_VAR 0 12
45941: PUSH
45942: CALL_OW 44
45946: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45947: LD_VAR 0 12
45951: PPUSH
45952: LD_VAR 0 8
45956: PPUSH
45957: LD_INT 0
45959: PPUSH
45960: CALL 47753 0 3
// end ;
45964: GO 45862
45966: POP
45967: POP
// if enchidnas then
45968: LD_VAR 0 4
45972: IFFALSE 46039
// for i = 1 to enchidnas do
45974: LD_ADDR_VAR 0 11
45978: PUSH
45979: DOUBLE
45980: LD_INT 1
45982: DEC
45983: ST_TO_ADDR
45984: LD_VAR 0 4
45988: PUSH
45989: FOR_TO
45990: IFFALSE 46037
// begin hc_class = 13 ;
45992: LD_ADDR_OWVAR 28
45996: PUSH
45997: LD_INT 13
45999: ST_TO_ADDR
// hc_gallery =  ;
46000: LD_ADDR_OWVAR 33
46004: PUSH
46005: LD_STRING 
46007: ST_TO_ADDR
// animal := CreateHuman ;
46008: LD_ADDR_VAR 0 12
46012: PUSH
46013: CALL_OW 44
46017: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46018: LD_VAR 0 12
46022: PPUSH
46023: LD_VAR 0 8
46027: PPUSH
46028: LD_INT 0
46030: PPUSH
46031: CALL 47753 0 3
// end ;
46035: GO 45989
46037: POP
46038: POP
// if fishes then
46039: LD_VAR 0 7
46043: IFFALSE 46110
// for i = 1 to fishes do
46045: LD_ADDR_VAR 0 11
46049: PUSH
46050: DOUBLE
46051: LD_INT 1
46053: DEC
46054: ST_TO_ADDR
46055: LD_VAR 0 7
46059: PUSH
46060: FOR_TO
46061: IFFALSE 46108
// begin hc_class = 20 ;
46063: LD_ADDR_OWVAR 28
46067: PUSH
46068: LD_INT 20
46070: ST_TO_ADDR
// hc_gallery =  ;
46071: LD_ADDR_OWVAR 33
46075: PUSH
46076: LD_STRING 
46078: ST_TO_ADDR
// animal := CreateHuman ;
46079: LD_ADDR_VAR 0 12
46083: PUSH
46084: CALL_OW 44
46088: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46089: LD_VAR 0 12
46093: PPUSH
46094: LD_VAR 0 9
46098: PPUSH
46099: LD_INT 0
46101: PPUSH
46102: CALL 47753 0 3
// end ;
46106: GO 46060
46108: POP
46109: POP
// end ;
46110: LD_VAR 0 10
46114: RET
// export function WantHeal ( sci , unit ) ; begin
46115: LD_INT 0
46117: PPUSH
// if GetTaskList ( sci ) > 0 then
46118: LD_VAR 0 1
46122: PPUSH
46123: CALL_OW 437
46127: PUSH
46128: LD_INT 0
46130: GREATER
46131: IFFALSE 46203
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46133: LD_VAR 0 1
46137: PPUSH
46138: CALL_OW 437
46142: PUSH
46143: LD_INT 1
46145: ARRAY
46146: PUSH
46147: LD_INT 1
46149: ARRAY
46150: PUSH
46151: LD_STRING l
46153: EQUAL
46154: IFFALSE 46181
46156: PUSH
46157: LD_VAR 0 1
46161: PPUSH
46162: CALL_OW 437
46166: PUSH
46167: LD_INT 1
46169: ARRAY
46170: PUSH
46171: LD_INT 4
46173: ARRAY
46174: PUSH
46175: LD_VAR 0 2
46179: EQUAL
46180: AND
46181: IFFALSE 46193
// result := true else
46183: LD_ADDR_VAR 0 3
46187: PUSH
46188: LD_INT 1
46190: ST_TO_ADDR
46191: GO 46201
// result := false ;
46193: LD_ADDR_VAR 0 3
46197: PUSH
46198: LD_INT 0
46200: ST_TO_ADDR
// end else
46201: GO 46211
// result := false ;
46203: LD_ADDR_VAR 0 3
46207: PUSH
46208: LD_INT 0
46210: ST_TO_ADDR
// end ;
46211: LD_VAR 0 3
46215: RET
// export function HealTarget ( sci ) ; begin
46216: LD_INT 0
46218: PPUSH
// if not sci then
46219: LD_VAR 0 1
46223: NOT
46224: IFFALSE 46228
// exit ;
46226: GO 46293
// result := 0 ;
46228: LD_ADDR_VAR 0 2
46232: PUSH
46233: LD_INT 0
46235: ST_TO_ADDR
// if GetTaskList ( sci ) then
46236: LD_VAR 0 1
46240: PPUSH
46241: CALL_OW 437
46245: IFFALSE 46293
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46247: LD_VAR 0 1
46251: PPUSH
46252: CALL_OW 437
46256: PUSH
46257: LD_INT 1
46259: ARRAY
46260: PUSH
46261: LD_INT 1
46263: ARRAY
46264: PUSH
46265: LD_STRING l
46267: EQUAL
46268: IFFALSE 46293
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46270: LD_ADDR_VAR 0 2
46274: PUSH
46275: LD_VAR 0 1
46279: PPUSH
46280: CALL_OW 437
46284: PUSH
46285: LD_INT 1
46287: ARRAY
46288: PUSH
46289: LD_INT 4
46291: ARRAY
46292: ST_TO_ADDR
// end ;
46293: LD_VAR 0 2
46297: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46298: LD_INT 0
46300: PPUSH
46301: PPUSH
46302: PPUSH
46303: PPUSH
// if not base_units then
46304: LD_VAR 0 1
46308: NOT
46309: IFFALSE 46313
// exit ;
46311: GO 46400
// result := false ;
46313: LD_ADDR_VAR 0 2
46317: PUSH
46318: LD_INT 0
46320: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46321: LD_ADDR_VAR 0 5
46325: PUSH
46326: LD_VAR 0 1
46330: PPUSH
46331: LD_INT 21
46333: PUSH
46334: LD_INT 3
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PPUSH
46341: CALL_OW 72
46345: ST_TO_ADDR
// if not tmp then
46346: LD_VAR 0 5
46350: NOT
46351: IFFALSE 46355
// exit ;
46353: GO 46400
// for i in tmp do
46355: LD_ADDR_VAR 0 3
46359: PUSH
46360: LD_VAR 0 5
46364: PUSH
46365: FOR_IN
46366: IFFALSE 46398
// begin result := EnemyInRange ( i , 22 ) ;
46368: LD_ADDR_VAR 0 2
46372: PUSH
46373: LD_VAR 0 3
46377: PPUSH
46378: LD_INT 22
46380: PPUSH
46381: CALL 43825 0 2
46385: ST_TO_ADDR
// if result then
46386: LD_VAR 0 2
46390: IFFALSE 46396
// exit ;
46392: POP
46393: POP
46394: GO 46400
// end ;
46396: GO 46365
46398: POP
46399: POP
// end ;
46400: LD_VAR 0 2
46404: RET
// export function FilterByTag ( units , tag ) ; begin
46405: LD_INT 0
46407: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
46408: LD_ADDR_VAR 0 3
46412: PUSH
46413: LD_VAR 0 1
46417: PPUSH
46418: LD_INT 120
46420: PUSH
46421: LD_VAR 0 2
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PPUSH
46430: CALL_OW 72
46434: ST_TO_ADDR
// end ;
46435: LD_VAR 0 3
46439: RET
// export function IsDriver ( un ) ; begin
46440: LD_INT 0
46442: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
46443: LD_ADDR_VAR 0 2
46447: PUSH
46448: LD_VAR 0 1
46452: PUSH
46453: LD_INT 55
46455: PUSH
46456: EMPTY
46457: LIST
46458: PPUSH
46459: CALL_OW 69
46463: IN
46464: ST_TO_ADDR
// end ;
46465: LD_VAR 0 2
46469: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
46470: LD_INT 0
46472: PPUSH
46473: PPUSH
// list := [ ] ;
46474: LD_ADDR_VAR 0 5
46478: PUSH
46479: EMPTY
46480: ST_TO_ADDR
// case d of 0 :
46481: LD_VAR 0 3
46485: PUSH
46486: LD_INT 0
46488: DOUBLE
46489: EQUAL
46490: IFTRUE 46494
46492: GO 46627
46494: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
46495: LD_ADDR_VAR 0 5
46499: PUSH
46500: LD_VAR 0 1
46504: PUSH
46505: LD_INT 4
46507: MINUS
46508: PUSH
46509: LD_VAR 0 2
46513: PUSH
46514: LD_INT 4
46516: MINUS
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: PUSH
46526: LD_VAR 0 1
46530: PUSH
46531: LD_INT 3
46533: MINUS
46534: PUSH
46535: LD_VAR 0 2
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: LIST
46547: PUSH
46548: LD_VAR 0 1
46552: PUSH
46553: LD_INT 4
46555: PLUS
46556: PUSH
46557: LD_VAR 0 2
46561: PUSH
46562: LD_INT 4
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: LIST
46569: PUSH
46570: LD_VAR 0 1
46574: PUSH
46575: LD_INT 3
46577: PLUS
46578: PUSH
46579: LD_VAR 0 2
46583: PUSH
46584: LD_INT 3
46586: PLUS
46587: PUSH
46588: LD_INT 5
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: LIST
46595: PUSH
46596: LD_VAR 0 1
46600: PUSH
46601: LD_VAR 0 2
46605: PUSH
46606: LD_INT 4
46608: PLUS
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: LIST
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: ST_TO_ADDR
// end ; 1 :
46625: GO 47325
46627: LD_INT 1
46629: DOUBLE
46630: EQUAL
46631: IFTRUE 46635
46633: GO 46768
46635: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46636: LD_ADDR_VAR 0 5
46640: PUSH
46641: LD_VAR 0 1
46645: PUSH
46646: LD_VAR 0 2
46650: PUSH
46651: LD_INT 4
46653: MINUS
46654: PUSH
46655: LD_INT 3
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: LIST
46662: PUSH
46663: LD_VAR 0 1
46667: PUSH
46668: LD_INT 3
46670: MINUS
46671: PUSH
46672: LD_VAR 0 2
46676: PUSH
46677: LD_INT 3
46679: MINUS
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: LIST
46688: PUSH
46689: LD_VAR 0 1
46693: PUSH
46694: LD_INT 4
46696: MINUS
46697: PUSH
46698: LD_VAR 0 2
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: LIST
46710: PUSH
46711: LD_VAR 0 1
46715: PUSH
46716: LD_VAR 0 2
46720: PUSH
46721: LD_INT 3
46723: PLUS
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: LIST
46732: PUSH
46733: LD_VAR 0 1
46737: PUSH
46738: LD_INT 4
46740: PLUS
46741: PUSH
46742: LD_VAR 0 2
46746: PUSH
46747: LD_INT 4
46749: PLUS
46750: PUSH
46751: LD_INT 5
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: LIST
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: ST_TO_ADDR
// end ; 2 :
46766: GO 47325
46768: LD_INT 2
46770: DOUBLE
46771: EQUAL
46772: IFTRUE 46776
46774: GO 46905
46776: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46777: LD_ADDR_VAR 0 5
46781: PUSH
46782: LD_VAR 0 1
46786: PUSH
46787: LD_VAR 0 2
46791: PUSH
46792: LD_INT 3
46794: MINUS
46795: PUSH
46796: LD_INT 3
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: LIST
46803: PUSH
46804: LD_VAR 0 1
46808: PUSH
46809: LD_INT 4
46811: PLUS
46812: PUSH
46813: LD_VAR 0 2
46817: PUSH
46818: LD_INT 4
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: LIST
46825: PUSH
46826: LD_VAR 0 1
46830: PUSH
46831: LD_VAR 0 2
46835: PUSH
46836: LD_INT 4
46838: PLUS
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: LIST
46847: PUSH
46848: LD_VAR 0 1
46852: PUSH
46853: LD_INT 3
46855: MINUS
46856: PUSH
46857: LD_VAR 0 2
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: LIST
46869: PUSH
46870: LD_VAR 0 1
46874: PUSH
46875: LD_INT 4
46877: MINUS
46878: PUSH
46879: LD_VAR 0 2
46883: PUSH
46884: LD_INT 4
46886: MINUS
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: LIST
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: ST_TO_ADDR
// end ; 3 :
46903: GO 47325
46905: LD_INT 3
46907: DOUBLE
46908: EQUAL
46909: IFTRUE 46913
46911: GO 47046
46913: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46914: LD_ADDR_VAR 0 5
46918: PUSH
46919: LD_VAR 0 1
46923: PUSH
46924: LD_INT 3
46926: PLUS
46927: PUSH
46928: LD_VAR 0 2
46932: PUSH
46933: LD_INT 4
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: LIST
46940: PUSH
46941: LD_VAR 0 1
46945: PUSH
46946: LD_INT 4
46948: PLUS
46949: PUSH
46950: LD_VAR 0 2
46954: PUSH
46955: LD_INT 4
46957: PLUS
46958: PUSH
46959: LD_INT 5
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: LIST
46966: PUSH
46967: LD_VAR 0 1
46971: PUSH
46972: LD_INT 4
46974: MINUS
46975: PUSH
46976: LD_VAR 0 2
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: LIST
46988: PUSH
46989: LD_VAR 0 1
46993: PUSH
46994: LD_VAR 0 2
46998: PUSH
46999: LD_INT 4
47001: MINUS
47002: PUSH
47003: LD_INT 3
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: LIST
47010: PUSH
47011: LD_VAR 0 1
47015: PUSH
47016: LD_INT 3
47018: MINUS
47019: PUSH
47020: LD_VAR 0 2
47024: PUSH
47025: LD_INT 3
47027: MINUS
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: LIST
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: ST_TO_ADDR
// end ; 4 :
47044: GO 47325
47046: LD_INT 4
47048: DOUBLE
47049: EQUAL
47050: IFTRUE 47054
47052: GO 47187
47054: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47055: LD_ADDR_VAR 0 5
47059: PUSH
47060: LD_VAR 0 1
47064: PUSH
47065: LD_VAR 0 2
47069: PUSH
47070: LD_INT 4
47072: PLUS
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: LIST
47081: PUSH
47082: LD_VAR 0 1
47086: PUSH
47087: LD_INT 3
47089: PLUS
47090: PUSH
47091: LD_VAR 0 2
47095: PUSH
47096: LD_INT 3
47098: PLUS
47099: PUSH
47100: LD_INT 5
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: LIST
47107: PUSH
47108: LD_VAR 0 1
47112: PUSH
47113: LD_INT 4
47115: PLUS
47116: PUSH
47117: LD_VAR 0 2
47121: PUSH
47122: LD_INT 4
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: LIST
47129: PUSH
47130: LD_VAR 0 1
47134: PUSH
47135: LD_VAR 0 2
47139: PUSH
47140: LD_INT 3
47142: MINUS
47143: PUSH
47144: LD_INT 3
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: LIST
47151: PUSH
47152: LD_VAR 0 1
47156: PUSH
47157: LD_INT 4
47159: MINUS
47160: PUSH
47161: LD_VAR 0 2
47165: PUSH
47166: LD_INT 4
47168: MINUS
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: LIST
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: ST_TO_ADDR
// end ; 5 :
47185: GO 47325
47187: LD_INT 5
47189: DOUBLE
47190: EQUAL
47191: IFTRUE 47195
47193: GO 47324
47195: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47196: LD_ADDR_VAR 0 5
47200: PUSH
47201: LD_VAR 0 1
47205: PUSH
47206: LD_INT 4
47208: MINUS
47209: PUSH
47210: LD_VAR 0 2
47214: PUSH
47215: LD_INT 1
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: LIST
47222: PUSH
47223: LD_VAR 0 1
47227: PUSH
47228: LD_VAR 0 2
47232: PUSH
47233: LD_INT 4
47235: MINUS
47236: PUSH
47237: LD_INT 3
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: LIST
47244: PUSH
47245: LD_VAR 0 1
47249: PUSH
47250: LD_INT 4
47252: PLUS
47253: PUSH
47254: LD_VAR 0 2
47258: PUSH
47259: LD_INT 4
47261: PLUS
47262: PUSH
47263: LD_INT 5
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: PUSH
47271: LD_VAR 0 1
47275: PUSH
47276: LD_INT 3
47278: PLUS
47279: PUSH
47280: LD_VAR 0 2
47284: PUSH
47285: LD_INT 4
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: LIST
47292: PUSH
47293: LD_VAR 0 1
47297: PUSH
47298: LD_VAR 0 2
47302: PUSH
47303: LD_INT 3
47305: PLUS
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: LIST
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: ST_TO_ADDR
// end ; end ;
47322: GO 47325
47324: POP
// result := list ;
47325: LD_ADDR_VAR 0 4
47329: PUSH
47330: LD_VAR 0 5
47334: ST_TO_ADDR
// end ;
47335: LD_VAR 0 4
47339: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47340: LD_INT 0
47342: PPUSH
47343: PPUSH
47344: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47345: LD_VAR 0 1
47349: NOT
47350: IFTRUE 47378
47352: PUSH
47353: LD_VAR 0 2
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: LD_INT 2
47363: PUSH
47364: LD_INT 3
47366: PUSH
47367: LD_INT 4
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: IN
47376: NOT
47377: OR
47378: IFFALSE 47382
// exit ;
47380: GO 47465
// tmp := [ ] ;
47382: LD_ADDR_VAR 0 5
47386: PUSH
47387: EMPTY
47388: ST_TO_ADDR
// for i in units do
47389: LD_ADDR_VAR 0 4
47393: PUSH
47394: LD_VAR 0 1
47398: PUSH
47399: FOR_IN
47400: IFFALSE 47434
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
47402: LD_ADDR_VAR 0 5
47406: PUSH
47407: LD_VAR 0 5
47411: PPUSH
47412: LD_VAR 0 4
47416: PPUSH
47417: LD_VAR 0 2
47421: PPUSH
47422: CALL_OW 259
47426: PPUSH
47427: CALL 48860 0 2
47431: ST_TO_ADDR
47432: GO 47399
47434: POP
47435: POP
// if not tmp then
47436: LD_VAR 0 5
47440: NOT
47441: IFFALSE 47445
// exit ;
47443: GO 47465
// result := SortListByListDesc ( units , tmp ) ;
47445: LD_ADDR_VAR 0 3
47449: PUSH
47450: LD_VAR 0 1
47454: PPUSH
47455: LD_VAR 0 5
47459: PPUSH
47460: CALL_OW 77
47464: ST_TO_ADDR
// end ;
47465: LD_VAR 0 3
47469: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
47470: LD_INT 0
47472: PPUSH
47473: PPUSH
47474: PPUSH
// result := false ;
47475: LD_ADDR_VAR 0 3
47479: PUSH
47480: LD_INT 0
47482: ST_TO_ADDR
// if not building then
47483: LD_VAR 0 2
47487: NOT
47488: IFFALSE 47492
// exit ;
47490: GO 47636
// x := GetX ( building ) ;
47492: LD_ADDR_VAR 0 4
47496: PUSH
47497: LD_VAR 0 2
47501: PPUSH
47502: CALL_OW 250
47506: ST_TO_ADDR
// y := GetY ( building ) ;
47507: LD_ADDR_VAR 0 5
47511: PUSH
47512: LD_VAR 0 2
47516: PPUSH
47517: CALL_OW 251
47521: ST_TO_ADDR
// if not x or not y then
47522: LD_VAR 0 4
47526: NOT
47527: IFTRUE 47536
47529: PUSH
47530: LD_VAR 0 5
47534: NOT
47535: OR
47536: IFFALSE 47540
// exit ;
47538: GO 47636
// if GetTaskList ( unit ) then
47540: LD_VAR 0 1
47544: PPUSH
47545: CALL_OW 437
47549: IFFALSE 47636
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47551: LD_STRING e
47553: PUSH
47554: LD_VAR 0 1
47558: PPUSH
47559: CALL_OW 437
47563: PUSH
47564: LD_INT 1
47566: ARRAY
47567: PUSH
47568: LD_INT 1
47570: ARRAY
47571: EQUAL
47572: IFFALSE 47599
47574: PUSH
47575: LD_VAR 0 4
47579: PUSH
47580: LD_VAR 0 1
47584: PPUSH
47585: CALL_OW 437
47589: PUSH
47590: LD_INT 1
47592: ARRAY
47593: PUSH
47594: LD_INT 2
47596: ARRAY
47597: EQUAL
47598: AND
47599: IFFALSE 47626
47601: PUSH
47602: LD_VAR 0 5
47606: PUSH
47607: LD_VAR 0 1
47611: PPUSH
47612: CALL_OW 437
47616: PUSH
47617: LD_INT 1
47619: ARRAY
47620: PUSH
47621: LD_INT 3
47623: ARRAY
47624: EQUAL
47625: AND
47626: IFFALSE 47636
// result := true end ;
47628: LD_ADDR_VAR 0 3
47632: PUSH
47633: LD_INT 1
47635: ST_TO_ADDR
// end ;
47636: LD_VAR 0 3
47640: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
47641: LD_INT 0
47643: PPUSH
// result := false ;
47644: LD_ADDR_VAR 0 4
47648: PUSH
47649: LD_INT 0
47651: ST_TO_ADDR
// if GetTaskList ( unit ) then
47652: LD_VAR 0 1
47656: PPUSH
47657: CALL_OW 437
47661: IFFALSE 47748
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47663: LD_STRING M
47665: PUSH
47666: LD_VAR 0 1
47670: PPUSH
47671: CALL_OW 437
47675: PUSH
47676: LD_INT 1
47678: ARRAY
47679: PUSH
47680: LD_INT 1
47682: ARRAY
47683: EQUAL
47684: IFFALSE 47711
47686: PUSH
47687: LD_VAR 0 2
47691: PUSH
47692: LD_VAR 0 1
47696: PPUSH
47697: CALL_OW 437
47701: PUSH
47702: LD_INT 1
47704: ARRAY
47705: PUSH
47706: LD_INT 2
47708: ARRAY
47709: EQUAL
47710: AND
47711: IFFALSE 47738
47713: PUSH
47714: LD_VAR 0 3
47718: PUSH
47719: LD_VAR 0 1
47723: PPUSH
47724: CALL_OW 437
47728: PUSH
47729: LD_INT 1
47731: ARRAY
47732: PUSH
47733: LD_INT 3
47735: ARRAY
47736: EQUAL
47737: AND
47738: IFFALSE 47748
// result := true ;
47740: LD_ADDR_VAR 0 4
47744: PUSH
47745: LD_INT 1
47747: ST_TO_ADDR
// end ; end ;
47748: LD_VAR 0 4
47752: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47753: LD_INT 0
47755: PPUSH
47756: PPUSH
47757: PPUSH
47758: PPUSH
// if not unit or not area then
47759: LD_VAR 0 1
47763: NOT
47764: IFTRUE 47773
47766: PUSH
47767: LD_VAR 0 2
47771: NOT
47772: OR
47773: IFFALSE 47777
// exit ;
47775: GO 47953
// tmp := AreaToList ( area , i ) ;
47777: LD_ADDR_VAR 0 6
47781: PUSH
47782: LD_VAR 0 2
47786: PPUSH
47787: LD_VAR 0 5
47791: PPUSH
47792: CALL_OW 517
47796: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47797: LD_ADDR_VAR 0 5
47801: PUSH
47802: DOUBLE
47803: LD_INT 1
47805: DEC
47806: ST_TO_ADDR
47807: LD_VAR 0 6
47811: PUSH
47812: LD_INT 1
47814: ARRAY
47815: PUSH
47816: FOR_TO
47817: IFFALSE 47951
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47819: LD_ADDR_VAR 0 7
47823: PUSH
47824: LD_VAR 0 6
47828: PUSH
47829: LD_INT 1
47831: ARRAY
47832: PUSH
47833: LD_VAR 0 5
47837: ARRAY
47838: PUSH
47839: LD_VAR 0 6
47843: PUSH
47844: LD_INT 2
47846: ARRAY
47847: PUSH
47848: LD_VAR 0 5
47852: ARRAY
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47858: LD_INT 92
47860: PUSH
47861: LD_VAR 0 7
47865: PUSH
47866: LD_INT 1
47868: ARRAY
47869: PUSH
47870: LD_VAR 0 7
47874: PUSH
47875: LD_INT 2
47877: ARRAY
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: PPUSH
47888: CALL_OW 69
47892: PUSH
47893: LD_INT 0
47895: EQUAL
47896: IFFALSE 47949
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47898: LD_VAR 0 1
47902: PPUSH
47903: LD_VAR 0 7
47907: PUSH
47908: LD_INT 1
47910: ARRAY
47911: PPUSH
47912: LD_VAR 0 7
47916: PUSH
47917: LD_INT 2
47919: ARRAY
47920: PPUSH
47921: LD_VAR 0 3
47925: PPUSH
47926: CALL_OW 48
// result := IsPlaced ( unit ) ;
47930: LD_ADDR_VAR 0 4
47934: PUSH
47935: LD_VAR 0 1
47939: PPUSH
47940: CALL_OW 305
47944: ST_TO_ADDR
// exit ;
47945: POP
47946: POP
47947: GO 47953
// end ; end ;
47949: GO 47816
47951: POP
47952: POP
// end ;
47953: LD_VAR 0 4
47957: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47958: LD_INT 0
47960: PPUSH
47961: PPUSH
47962: PPUSH
// if not side or side > 8 then
47963: LD_VAR 0 1
47967: NOT
47968: IFTRUE 47980
47970: PUSH
47971: LD_VAR 0 1
47975: PUSH
47976: LD_INT 8
47978: GREATER
47979: OR
47980: IFFALSE 47984
// exit ;
47982: GO 48171
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47984: LD_ADDR_VAR 0 4
47988: PUSH
47989: LD_INT 22
47991: PUSH
47992: LD_VAR 0 1
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 21
48003: PUSH
48004: LD_INT 3
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PPUSH
48015: CALL_OW 69
48019: ST_TO_ADDR
// if not tmp then
48020: LD_VAR 0 4
48024: NOT
48025: IFFALSE 48029
// exit ;
48027: GO 48171
// enable_addtolog := true ;
48029: LD_ADDR_OWVAR 81
48033: PUSH
48034: LD_INT 1
48036: ST_TO_ADDR
// AddToLog ( [ ) ;
48037: LD_STRING [
48039: PPUSH
48040: CALL_OW 561
// for i in tmp do
48044: LD_ADDR_VAR 0 3
48048: PUSH
48049: LD_VAR 0 4
48053: PUSH
48054: FOR_IN
48055: IFFALSE 48162
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48057: LD_STRING [
48059: PUSH
48060: LD_VAR 0 3
48064: PPUSH
48065: CALL_OW 266
48069: STR
48070: PUSH
48071: LD_STRING , 
48073: STR
48074: PUSH
48075: LD_VAR 0 3
48079: PPUSH
48080: CALL_OW 250
48084: STR
48085: PUSH
48086: LD_STRING , 
48088: STR
48089: PUSH
48090: LD_VAR 0 3
48094: PPUSH
48095: CALL_OW 251
48099: STR
48100: PUSH
48101: LD_STRING , 
48103: STR
48104: PUSH
48105: LD_VAR 0 3
48109: PPUSH
48110: CALL_OW 254
48114: STR
48115: PUSH
48116: LD_STRING , 
48118: STR
48119: PUSH
48120: LD_VAR 0 3
48124: PPUSH
48125: LD_INT 1
48127: PPUSH
48128: CALL_OW 268
48132: STR
48133: PUSH
48134: LD_STRING , 
48136: STR
48137: PUSH
48138: LD_VAR 0 3
48142: PPUSH
48143: LD_INT 2
48145: PPUSH
48146: CALL_OW 268
48150: STR
48151: PUSH
48152: LD_STRING ],
48154: STR
48155: PPUSH
48156: CALL_OW 561
// end ;
48160: GO 48054
48162: POP
48163: POP
// AddToLog ( ]; ) ;
48164: LD_STRING ];
48166: PPUSH
48167: CALL_OW 561
// end ;
48171: LD_VAR 0 2
48175: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48176: LD_INT 0
48178: PPUSH
48179: PPUSH
48180: PPUSH
48181: PPUSH
48182: PPUSH
// if not area or not rate or not max then
48183: LD_VAR 0 1
48187: NOT
48188: IFTRUE 48197
48190: PUSH
48191: LD_VAR 0 2
48195: NOT
48196: OR
48197: IFTRUE 48206
48199: PUSH
48200: LD_VAR 0 4
48204: NOT
48205: OR
48206: IFFALSE 48210
// exit ;
48208: GO 48399
// while 1 do
48210: LD_INT 1
48212: IFFALSE 48399
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48214: LD_ADDR_VAR 0 9
48218: PUSH
48219: LD_VAR 0 1
48223: PPUSH
48224: LD_INT 1
48226: PPUSH
48227: CALL_OW 287
48231: PUSH
48232: LD_INT 10
48234: MUL
48235: ST_TO_ADDR
// r := rate / 10 ;
48236: LD_ADDR_VAR 0 7
48240: PUSH
48241: LD_VAR 0 2
48245: PUSH
48246: LD_INT 10
48248: DIVREAL
48249: ST_TO_ADDR
// time := 1 1$00 ;
48250: LD_ADDR_VAR 0 8
48254: PUSH
48255: LD_INT 2100
48257: ST_TO_ADDR
// if amount < min then
48258: LD_VAR 0 9
48262: PUSH
48263: LD_VAR 0 3
48267: LESS
48268: IFFALSE 48286
// r := r * 2 else
48270: LD_ADDR_VAR 0 7
48274: PUSH
48275: LD_VAR 0 7
48279: PUSH
48280: LD_INT 2
48282: MUL
48283: ST_TO_ADDR
48284: GO 48312
// if amount > max then
48286: LD_VAR 0 9
48290: PUSH
48291: LD_VAR 0 4
48295: GREATER
48296: IFFALSE 48312
// r := r / 2 ;
48298: LD_ADDR_VAR 0 7
48302: PUSH
48303: LD_VAR 0 7
48307: PUSH
48308: LD_INT 2
48310: DIVREAL
48311: ST_TO_ADDR
// time := time / r ;
48312: LD_ADDR_VAR 0 8
48316: PUSH
48317: LD_VAR 0 8
48321: PUSH
48322: LD_VAR 0 7
48326: DIVREAL
48327: ST_TO_ADDR
// if time < 0 then
48328: LD_VAR 0 8
48332: PUSH
48333: LD_INT 0
48335: LESS
48336: IFFALSE 48353
// time := time * - 1 ;
48338: LD_ADDR_VAR 0 8
48342: PUSH
48343: LD_VAR 0 8
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: MUL
48352: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
48353: LD_VAR 0 8
48357: PUSH
48358: LD_INT 35
48360: PPUSH
48361: LD_INT 875
48363: PPUSH
48364: CALL_OW 12
48368: PLUS
48369: PPUSH
48370: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48374: LD_INT 1
48376: PPUSH
48377: LD_INT 5
48379: PPUSH
48380: CALL_OW 12
48384: PPUSH
48385: LD_VAR 0 1
48389: PPUSH
48390: LD_INT 1
48392: PPUSH
48393: CALL_OW 55
// end ;
48397: GO 48210
// end ;
48399: LD_VAR 0 5
48403: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48404: LD_INT 0
48406: PPUSH
48407: PPUSH
48408: PPUSH
48409: PPUSH
48410: PPUSH
48411: PPUSH
48412: PPUSH
48413: PPUSH
// if not turrets or not factories then
48414: LD_VAR 0 1
48418: NOT
48419: IFTRUE 48428
48421: PUSH
48422: LD_VAR 0 2
48426: NOT
48427: OR
48428: IFFALSE 48432
// exit ;
48430: GO 48739
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48432: LD_ADDR_VAR 0 10
48436: PUSH
48437: LD_INT 5
48439: PUSH
48440: LD_INT 6
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: LD_INT 4
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 3
48459: PUSH
48460: LD_INT 5
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 24
48474: PUSH
48475: LD_INT 25
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 23
48484: PUSH
48485: LD_INT 27
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 42
48498: PUSH
48499: LD_INT 43
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 44
48508: PUSH
48509: LD_INT 46
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 45
48518: PUSH
48519: LD_INT 47
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: LIST
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: LIST
48535: ST_TO_ADDR
// result := [ ] ;
48536: LD_ADDR_VAR 0 3
48540: PUSH
48541: EMPTY
48542: ST_TO_ADDR
// for i in turrets do
48543: LD_ADDR_VAR 0 4
48547: PUSH
48548: LD_VAR 0 1
48552: PUSH
48553: FOR_IN
48554: IFFALSE 48737
// begin nat := GetNation ( i ) ;
48556: LD_ADDR_VAR 0 7
48560: PUSH
48561: LD_VAR 0 4
48565: PPUSH
48566: CALL_OW 248
48570: ST_TO_ADDR
// weapon := 0 ;
48571: LD_ADDR_VAR 0 8
48575: PUSH
48576: LD_INT 0
48578: ST_TO_ADDR
// if not nat then
48579: LD_VAR 0 7
48583: NOT
48584: IFFALSE 48588
// continue ;
48586: GO 48553
// for j in list [ nat ] do
48588: LD_ADDR_VAR 0 5
48592: PUSH
48593: LD_VAR 0 10
48597: PUSH
48598: LD_VAR 0 7
48602: ARRAY
48603: PUSH
48604: FOR_IN
48605: IFFALSE 48646
// if GetBWeapon ( i ) = j [ 1 ] then
48607: LD_VAR 0 4
48611: PPUSH
48612: CALL_OW 269
48616: PUSH
48617: LD_VAR 0 5
48621: PUSH
48622: LD_INT 1
48624: ARRAY
48625: EQUAL
48626: IFFALSE 48644
// begin weapon := j [ 2 ] ;
48628: LD_ADDR_VAR 0 8
48632: PUSH
48633: LD_VAR 0 5
48637: PUSH
48638: LD_INT 2
48640: ARRAY
48641: ST_TO_ADDR
// break ;
48642: GO 48646
// end ;
48644: GO 48604
48646: POP
48647: POP
// if not weapon then
48648: LD_VAR 0 8
48652: NOT
48653: IFFALSE 48657
// continue ;
48655: GO 48553
// for k in factories do
48657: LD_ADDR_VAR 0 6
48661: PUSH
48662: LD_VAR 0 2
48666: PUSH
48667: FOR_IN
48668: IFFALSE 48733
// begin weapons := AvailableWeaponList ( k ) ;
48670: LD_ADDR_VAR 0 9
48674: PUSH
48675: LD_VAR 0 6
48679: PPUSH
48680: CALL_OW 478
48684: ST_TO_ADDR
// if not weapons then
48685: LD_VAR 0 9
48689: NOT
48690: IFFALSE 48694
// continue ;
48692: GO 48667
// if weapon in weapons then
48694: LD_VAR 0 8
48698: PUSH
48699: LD_VAR 0 9
48703: IN
48704: IFFALSE 48731
// begin result := [ i , weapon ] ;
48706: LD_ADDR_VAR 0 3
48710: PUSH
48711: LD_VAR 0 4
48715: PUSH
48716: LD_VAR 0 8
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: ST_TO_ADDR
// exit ;
48725: POP
48726: POP
48727: POP
48728: POP
48729: GO 48739
// end ; end ;
48731: GO 48667
48733: POP
48734: POP
// end ;
48735: GO 48553
48737: POP
48738: POP
// end ;
48739: LD_VAR 0 3
48743: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48744: LD_INT 0
48746: PPUSH
// if not side or side > 8 then
48747: LD_VAR 0 3
48751: NOT
48752: IFTRUE 48764
48754: PUSH
48755: LD_VAR 0 3
48759: PUSH
48760: LD_INT 8
48762: GREATER
48763: OR
48764: IFFALSE 48768
// exit ;
48766: GO 48827
// if not range then
48768: LD_VAR 0 4
48772: NOT
48773: IFFALSE 48784
// range := - 12 ;
48775: LD_ADDR_VAR 0 4
48779: PUSH
48780: LD_INT 12
48782: NEG
48783: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48784: LD_VAR 0 1
48788: PPUSH
48789: LD_VAR 0 2
48793: PPUSH
48794: LD_VAR 0 3
48798: PPUSH
48799: LD_VAR 0 4
48803: PPUSH
48804: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48808: LD_VAR 0 1
48812: PPUSH
48813: LD_VAR 0 2
48817: PPUSH
48818: LD_VAR 0 3
48822: PPUSH
48823: CALL_OW 331
// end ;
48827: LD_VAR 0 5
48831: RET
// export function Video ( mode ) ; begin
48832: LD_INT 0
48834: PPUSH
// ingame_video = mode ;
48835: LD_ADDR_OWVAR 52
48839: PUSH
48840: LD_VAR 0 1
48844: ST_TO_ADDR
// interface_hidden = mode ;
48845: LD_ADDR_OWVAR 54
48849: PUSH
48850: LD_VAR 0 1
48854: ST_TO_ADDR
// end ;
48855: LD_VAR 0 2
48859: RET
// export function Join ( array , element ) ; begin
48860: LD_INT 0
48862: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48863: LD_ADDR_VAR 0 3
48867: PUSH
48868: LD_VAR 0 1
48872: PPUSH
48873: LD_VAR 0 1
48877: PUSH
48878: LD_INT 1
48880: PLUS
48881: PPUSH
48882: LD_VAR 0 2
48886: PPUSH
48887: CALL_OW 1
48891: ST_TO_ADDR
// end ;
48892: LD_VAR 0 3
48896: RET
// export function JoinUnion ( array , element ) ; begin
48897: LD_INT 0
48899: PPUSH
// result := array union element ;
48900: LD_ADDR_VAR 0 3
48904: PUSH
48905: LD_VAR 0 1
48909: PUSH
48910: LD_VAR 0 2
48914: UNION
48915: ST_TO_ADDR
// end ;
48916: LD_VAR 0 3
48920: RET
// export function GetBehemoths ( side ) ; begin
48921: LD_INT 0
48923: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48924: LD_ADDR_VAR 0 2
48928: PUSH
48929: LD_INT 22
48931: PUSH
48932: LD_VAR 0 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 31
48943: PUSH
48944: LD_INT 25
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PPUSH
48955: CALL_OW 69
48959: ST_TO_ADDR
// end ;
48960: LD_VAR 0 2
48964: RET
// export function Shuffle ( array ) ; var i , index ; begin
48965: LD_INT 0
48967: PPUSH
48968: PPUSH
48969: PPUSH
// result := [ ] ;
48970: LD_ADDR_VAR 0 2
48974: PUSH
48975: EMPTY
48976: ST_TO_ADDR
// if not array then
48977: LD_VAR 0 1
48981: NOT
48982: IFFALSE 48986
// exit ;
48984: GO 49085
// Randomize ;
48986: CALL_OW 10
// for i = array downto 1 do
48990: LD_ADDR_VAR 0 3
48994: PUSH
48995: DOUBLE
48996: LD_VAR 0 1
49000: INC
49001: ST_TO_ADDR
49002: LD_INT 1
49004: PUSH
49005: FOR_DOWNTO
49006: IFFALSE 49083
// begin index := rand ( 1 , array ) ;
49008: LD_ADDR_VAR 0 4
49012: PUSH
49013: LD_INT 1
49015: PPUSH
49016: LD_VAR 0 1
49020: PPUSH
49021: CALL_OW 12
49025: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49026: LD_ADDR_VAR 0 2
49030: PUSH
49031: LD_VAR 0 2
49035: PPUSH
49036: LD_VAR 0 2
49040: PUSH
49041: LD_INT 1
49043: PLUS
49044: PPUSH
49045: LD_VAR 0 1
49049: PUSH
49050: LD_VAR 0 4
49054: ARRAY
49055: PPUSH
49056: CALL_OW 2
49060: ST_TO_ADDR
// array := Delete ( array , index ) ;
49061: LD_ADDR_VAR 0 1
49065: PUSH
49066: LD_VAR 0 1
49070: PPUSH
49071: LD_VAR 0 4
49075: PPUSH
49076: CALL_OW 3
49080: ST_TO_ADDR
// end ;
49081: GO 49005
49083: POP
49084: POP
// end ;
49085: LD_VAR 0 2
49089: RET
// export function GetBaseMaterials ( base ) ; begin
49090: LD_INT 0
49092: PPUSH
// result := [ 0 , 0 , 0 ] ;
49093: LD_ADDR_VAR 0 2
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: LIST
49111: ST_TO_ADDR
// if not base then
49112: LD_VAR 0 1
49116: NOT
49117: IFFALSE 49121
// exit ;
49119: GO 49170
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49121: LD_ADDR_VAR 0 2
49125: PUSH
49126: LD_VAR 0 1
49130: PPUSH
49131: LD_INT 1
49133: PPUSH
49134: CALL_OW 275
49138: PUSH
49139: LD_VAR 0 1
49143: PPUSH
49144: LD_INT 2
49146: PPUSH
49147: CALL_OW 275
49151: PUSH
49152: LD_VAR 0 1
49156: PPUSH
49157: LD_INT 3
49159: PPUSH
49160: CALL_OW 275
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: LIST
49169: ST_TO_ADDR
// end ;
49170: LD_VAR 0 2
49174: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49175: LD_INT 0
49177: PPUSH
49178: PPUSH
// result := array ;
49179: LD_ADDR_VAR 0 3
49183: PUSH
49184: LD_VAR 0 1
49188: ST_TO_ADDR
// if size >= result then
49189: LD_VAR 0 2
49193: PUSH
49194: LD_VAR 0 3
49198: GREATEREQUAL
49199: IFFALSE 49203
// exit ;
49201: GO 49253
// if size then
49203: LD_VAR 0 2
49207: IFFALSE 49253
// for i := array downto size do
49209: LD_ADDR_VAR 0 4
49213: PUSH
49214: DOUBLE
49215: LD_VAR 0 1
49219: INC
49220: ST_TO_ADDR
49221: LD_VAR 0 2
49225: PUSH
49226: FOR_DOWNTO
49227: IFFALSE 49251
// result := Delete ( result , result ) ;
49229: LD_ADDR_VAR 0 3
49233: PUSH
49234: LD_VAR 0 3
49238: PPUSH
49239: LD_VAR 0 3
49243: PPUSH
49244: CALL_OW 3
49248: ST_TO_ADDR
49249: GO 49226
49251: POP
49252: POP
// end ;
49253: LD_VAR 0 3
49257: RET
// export function ComExit ( unit ) ; var tmp ; begin
49258: LD_INT 0
49260: PPUSH
49261: PPUSH
// if not IsInUnit ( unit ) then
49262: LD_VAR 0 1
49266: PPUSH
49267: CALL_OW 310
49271: NOT
49272: IFFALSE 49276
// exit ;
49274: GO 49336
// tmp := IsInUnit ( unit ) ;
49276: LD_ADDR_VAR 0 3
49280: PUSH
49281: LD_VAR 0 1
49285: PPUSH
49286: CALL_OW 310
49290: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49291: LD_VAR 0 3
49295: PPUSH
49296: CALL_OW 247
49300: PUSH
49301: LD_INT 2
49303: EQUAL
49304: IFFALSE 49317
// ComExitVehicle ( unit ) else
49306: LD_VAR 0 1
49310: PPUSH
49311: CALL_OW 121
49315: GO 49326
// ComExitBuilding ( unit ) ;
49317: LD_VAR 0 1
49321: PPUSH
49322: CALL_OW 122
// result := tmp ;
49326: LD_ADDR_VAR 0 2
49330: PUSH
49331: LD_VAR 0 3
49335: ST_TO_ADDR
// end ;
49336: LD_VAR 0 2
49340: RET
// export function ComExitAll ( units ) ; var i ; begin
49341: LD_INT 0
49343: PPUSH
49344: PPUSH
// if not units then
49345: LD_VAR 0 1
49349: NOT
49350: IFFALSE 49354
// exit ;
49352: GO 49380
// for i in units do
49354: LD_ADDR_VAR 0 3
49358: PUSH
49359: LD_VAR 0 1
49363: PUSH
49364: FOR_IN
49365: IFFALSE 49378
// ComExit ( i ) ;
49367: LD_VAR 0 3
49371: PPUSH
49372: CALL 49258 0 1
49376: GO 49364
49378: POP
49379: POP
// end ;
49380: LD_VAR 0 2
49384: RET
// export function ResetHc ; begin
49385: LD_INT 0
49387: PPUSH
// InitHc ;
49388: CALL_OW 19
// hc_importance := 0 ;
49392: LD_ADDR_OWVAR 32
49396: PUSH
49397: LD_INT 0
49399: ST_TO_ADDR
// end ;
49400: LD_VAR 0 1
49404: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
49405: LD_INT 0
49407: PPUSH
49408: PPUSH
49409: PPUSH
// _x := ( x1 + x2 ) div 2 ;
49410: LD_ADDR_VAR 0 6
49414: PUSH
49415: LD_VAR 0 1
49419: PUSH
49420: LD_VAR 0 3
49424: PLUS
49425: PUSH
49426: LD_INT 2
49428: DIV
49429: ST_TO_ADDR
// if _x < 0 then
49430: LD_VAR 0 6
49434: PUSH
49435: LD_INT 0
49437: LESS
49438: IFFALSE 49455
// _x := _x * - 1 ;
49440: LD_ADDR_VAR 0 6
49444: PUSH
49445: LD_VAR 0 6
49449: PUSH
49450: LD_INT 1
49452: NEG
49453: MUL
49454: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
49455: LD_ADDR_VAR 0 7
49459: PUSH
49460: LD_VAR 0 2
49464: PUSH
49465: LD_VAR 0 4
49469: PLUS
49470: PUSH
49471: LD_INT 2
49473: DIV
49474: ST_TO_ADDR
// if _y < 0 then
49475: LD_VAR 0 7
49479: PUSH
49480: LD_INT 0
49482: LESS
49483: IFFALSE 49500
// _y := _y * - 1 ;
49485: LD_ADDR_VAR 0 7
49489: PUSH
49490: LD_VAR 0 7
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: MUL
49499: ST_TO_ADDR
// result := [ _x , _y ] ;
49500: LD_ADDR_VAR 0 5
49504: PUSH
49505: LD_VAR 0 6
49509: PUSH
49510: LD_VAR 0 7
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: ST_TO_ADDR
// end ;
49519: LD_VAR 0 5
49523: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
49524: LD_INT 0
49526: PPUSH
49527: PPUSH
49528: PPUSH
49529: PPUSH
// task := GetTaskList ( unit ) ;
49530: LD_ADDR_VAR 0 7
49534: PUSH
49535: LD_VAR 0 1
49539: PPUSH
49540: CALL_OW 437
49544: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
49545: LD_VAR 0 7
49549: NOT
49550: IFFALSE 49569
49552: PUSH
49553: LD_VAR 0 1
49557: PPUSH
49558: LD_VAR 0 2
49562: PPUSH
49563: CALL_OW 308
49567: NOT
49568: AND
49569: IFFALSE 49573
// exit ;
49571: GO 49691
// if IsInArea ( unit , area ) then
49573: LD_VAR 0 1
49577: PPUSH
49578: LD_VAR 0 2
49582: PPUSH
49583: CALL_OW 308
49587: IFFALSE 49605
// begin ComMoveToArea ( unit , goAway ) ;
49589: LD_VAR 0 1
49593: PPUSH
49594: LD_VAR 0 3
49598: PPUSH
49599: CALL_OW 113
// exit ;
49603: GO 49691
// end ; if task [ 1 ] [ 1 ] <> M then
49605: LD_VAR 0 7
49609: PUSH
49610: LD_INT 1
49612: ARRAY
49613: PUSH
49614: LD_INT 1
49616: ARRAY
49617: PUSH
49618: LD_STRING M
49620: NONEQUAL
49621: IFFALSE 49625
// exit ;
49623: GO 49691
// x := task [ 1 ] [ 2 ] ;
49625: LD_ADDR_VAR 0 5
49629: PUSH
49630: LD_VAR 0 7
49634: PUSH
49635: LD_INT 1
49637: ARRAY
49638: PUSH
49639: LD_INT 2
49641: ARRAY
49642: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
49643: LD_ADDR_VAR 0 6
49647: PUSH
49648: LD_VAR 0 7
49652: PUSH
49653: LD_INT 1
49655: ARRAY
49656: PUSH
49657: LD_INT 3
49659: ARRAY
49660: ST_TO_ADDR
// if InArea ( x , y , area ) then
49661: LD_VAR 0 5
49665: PPUSH
49666: LD_VAR 0 6
49670: PPUSH
49671: LD_VAR 0 2
49675: PPUSH
49676: CALL_OW 309
49680: IFFALSE 49691
// ComStop ( unit ) ;
49682: LD_VAR 0 1
49686: PPUSH
49687: CALL_OW 141
// end ;
49691: LD_VAR 0 4
49695: RET
// export function Abs ( value ) ; begin
49696: LD_INT 0
49698: PPUSH
// result := value ;
49699: LD_ADDR_VAR 0 2
49703: PUSH
49704: LD_VAR 0 1
49708: ST_TO_ADDR
// if value < 0 then
49709: LD_VAR 0 1
49713: PUSH
49714: LD_INT 0
49716: LESS
49717: IFFALSE 49734
// result := value * - 1 ;
49719: LD_ADDR_VAR 0 2
49723: PUSH
49724: LD_VAR 0 1
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: MUL
49733: ST_TO_ADDR
// end ;
49734: LD_VAR 0 2
49738: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49739: LD_INT 0
49741: PPUSH
49742: PPUSH
49743: PPUSH
49744: PPUSH
49745: PPUSH
49746: PPUSH
49747: PPUSH
49748: PPUSH
// if not unit or not building then
49749: LD_VAR 0 1
49753: NOT
49754: IFTRUE 49763
49756: PUSH
49757: LD_VAR 0 2
49761: NOT
49762: OR
49763: IFFALSE 49767
// exit ;
49765: GO 49995
// x := GetX ( building ) ;
49767: LD_ADDR_VAR 0 4
49771: PUSH
49772: LD_VAR 0 2
49776: PPUSH
49777: CALL_OW 250
49781: ST_TO_ADDR
// y := GetY ( building ) ;
49782: LD_ADDR_VAR 0 6
49786: PUSH
49787: LD_VAR 0 2
49791: PPUSH
49792: CALL_OW 251
49796: ST_TO_ADDR
// d := GetDir ( building ) ;
49797: LD_ADDR_VAR 0 8
49801: PUSH
49802: LD_VAR 0 2
49806: PPUSH
49807: CALL_OW 254
49811: ST_TO_ADDR
// r := 4 ;
49812: LD_ADDR_VAR 0 9
49816: PUSH
49817: LD_INT 4
49819: ST_TO_ADDR
// for i := 1 to 5 do
49820: LD_ADDR_VAR 0 10
49824: PUSH
49825: DOUBLE
49826: LD_INT 1
49828: DEC
49829: ST_TO_ADDR
49830: LD_INT 5
49832: PUSH
49833: FOR_TO
49834: IFFALSE 49993
// begin _x := ShiftX ( x , d , r + i ) ;
49836: LD_ADDR_VAR 0 5
49840: PUSH
49841: LD_VAR 0 4
49845: PPUSH
49846: LD_VAR 0 8
49850: PPUSH
49851: LD_VAR 0 9
49855: PUSH
49856: LD_VAR 0 10
49860: PLUS
49861: PPUSH
49862: CALL_OW 272
49866: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49867: LD_ADDR_VAR 0 7
49871: PUSH
49872: LD_VAR 0 6
49876: PPUSH
49877: LD_VAR 0 8
49881: PPUSH
49882: LD_VAR 0 9
49886: PUSH
49887: LD_VAR 0 10
49891: PLUS
49892: PPUSH
49893: CALL_OW 273
49897: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49898: LD_VAR 0 5
49902: PPUSH
49903: LD_VAR 0 7
49907: PPUSH
49908: CALL_OW 488
49912: IFFALSE 49947
49914: PUSH
49915: LD_VAR 0 5
49919: PPUSH
49920: LD_VAR 0 7
49924: PPUSH
49925: CALL_OW 428
49929: PPUSH
49930: CALL_OW 247
49934: PUSH
49935: LD_INT 3
49937: PUSH
49938: LD_INT 2
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: IN
49945: NOT
49946: AND
49947: IFFALSE 49991
// begin ComMoveXY ( unit , _x , _y ) ;
49949: LD_VAR 0 1
49953: PPUSH
49954: LD_VAR 0 5
49958: PPUSH
49959: LD_VAR 0 7
49963: PPUSH
49964: CALL_OW 111
// result := [ _x , _y ] ;
49968: LD_ADDR_VAR 0 3
49972: PUSH
49973: LD_VAR 0 5
49977: PUSH
49978: LD_VAR 0 7
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: ST_TO_ADDR
// exit ;
49987: POP
49988: POP
49989: GO 49995
// end ; end ;
49991: GO 49833
49993: POP
49994: POP
// end ;
49995: LD_VAR 0 3
49999: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50000: LD_INT 0
50002: PPUSH
50003: PPUSH
50004: PPUSH
// result := 0 ;
50005: LD_ADDR_VAR 0 3
50009: PUSH
50010: LD_INT 0
50012: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50013: LD_VAR 0 1
50017: PUSH
50018: LD_INT 0
50020: LESS
50021: IFTRUE 50033
50023: PUSH
50024: LD_VAR 0 1
50028: PUSH
50029: LD_INT 8
50031: GREATER
50032: OR
50033: IFTRUE 50045
50035: PUSH
50036: LD_VAR 0 2
50040: PUSH
50041: LD_INT 0
50043: LESS
50044: OR
50045: IFTRUE 50057
50047: PUSH
50048: LD_VAR 0 2
50052: PUSH
50053: LD_INT 8
50055: GREATER
50056: OR
50057: IFFALSE 50061
// exit ;
50059: GO 50136
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50061: LD_ADDR_VAR 0 4
50065: PUSH
50066: LD_INT 22
50068: PUSH
50069: LD_VAR 0 2
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PPUSH
50078: CALL_OW 69
50082: PUSH
50083: FOR_IN
50084: IFFALSE 50134
// begin un := UnitShoot ( i ) ;
50086: LD_ADDR_VAR 0 5
50090: PUSH
50091: LD_VAR 0 4
50095: PPUSH
50096: CALL_OW 504
50100: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50101: LD_VAR 0 5
50105: PPUSH
50106: CALL_OW 255
50110: PUSH
50111: LD_VAR 0 1
50115: EQUAL
50116: IFFALSE 50132
// begin result := un ;
50118: LD_ADDR_VAR 0 3
50122: PUSH
50123: LD_VAR 0 5
50127: ST_TO_ADDR
// exit ;
50128: POP
50129: POP
50130: GO 50136
// end ; end ;
50132: GO 50083
50134: POP
50135: POP
// end ;
50136: LD_VAR 0 3
50140: RET
// export function GetCargoBay ( units ) ; begin
50141: LD_INT 0
50143: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50144: LD_ADDR_VAR 0 2
50148: PUSH
50149: LD_VAR 0 1
50153: PPUSH
50154: LD_INT 2
50156: PUSH
50157: LD_INT 34
50159: PUSH
50160: LD_INT 12
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 34
50169: PUSH
50170: LD_INT 51
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 34
50179: PUSH
50180: LD_INT 32
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 34
50189: PUSH
50190: LD_INT 89
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: PPUSH
50204: CALL_OW 72
50208: ST_TO_ADDR
// end ;
50209: LD_VAR 0 2
50213: RET
// export function Negate ( value ) ; begin
50214: LD_INT 0
50216: PPUSH
// result := not value ;
50217: LD_ADDR_VAR 0 2
50221: PUSH
50222: LD_VAR 0 1
50226: NOT
50227: ST_TO_ADDR
// end ;
50228: LD_VAR 0 2
50232: RET
// export function Inc ( value ) ; begin
50233: LD_INT 0
50235: PPUSH
// result := value + 1 ;
50236: LD_ADDR_VAR 0 2
50240: PUSH
50241: LD_VAR 0 1
50245: PUSH
50246: LD_INT 1
50248: PLUS
50249: ST_TO_ADDR
// end ;
50250: LD_VAR 0 2
50254: RET
// export function Dec ( value ) ; begin
50255: LD_INT 0
50257: PPUSH
// result := value - 1 ;
50258: LD_ADDR_VAR 0 2
50262: PUSH
50263: LD_VAR 0 1
50267: PUSH
50268: LD_INT 1
50270: MINUS
50271: ST_TO_ADDR
// end ;
50272: LD_VAR 0 2
50276: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50277: LD_INT 0
50279: PPUSH
50280: PPUSH
50281: PPUSH
50282: PPUSH
50283: PPUSH
50284: PPUSH
50285: PPUSH
50286: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50287: LD_VAR 0 1
50291: PPUSH
50292: LD_VAR 0 2
50296: PPUSH
50297: CALL_OW 488
50301: NOT
50302: IFTRUE 50321
50304: PUSH
50305: LD_VAR 0 3
50309: PPUSH
50310: LD_VAR 0 4
50314: PPUSH
50315: CALL_OW 488
50319: NOT
50320: OR
50321: IFFALSE 50334
// begin result := - 1 ;
50323: LD_ADDR_VAR 0 5
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: ST_TO_ADDR
// exit ;
50332: GO 50569
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50334: LD_ADDR_VAR 0 12
50338: PUSH
50339: LD_VAR 0 1
50343: PPUSH
50344: LD_VAR 0 2
50348: PPUSH
50349: LD_VAR 0 3
50353: PPUSH
50354: LD_VAR 0 4
50358: PPUSH
50359: CALL 49405 0 4
50363: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50364: LD_ADDR_VAR 0 11
50368: PUSH
50369: LD_VAR 0 1
50373: PPUSH
50374: LD_VAR 0 2
50378: PPUSH
50379: LD_VAR 0 12
50383: PUSH
50384: LD_INT 1
50386: ARRAY
50387: PPUSH
50388: LD_VAR 0 12
50392: PUSH
50393: LD_INT 2
50395: ARRAY
50396: PPUSH
50397: CALL_OW 298
50401: ST_TO_ADDR
// distance := 9999 ;
50402: LD_ADDR_VAR 0 10
50406: PUSH
50407: LD_INT 9999
50409: ST_TO_ADDR
// for i := 0 to 5 do
50410: LD_ADDR_VAR 0 6
50414: PUSH
50415: DOUBLE
50416: LD_INT 0
50418: DEC
50419: ST_TO_ADDR
50420: LD_INT 5
50422: PUSH
50423: FOR_TO
50424: IFFALSE 50567
// begin _x := ShiftX ( x1 , i , centerDist ) ;
50426: LD_ADDR_VAR 0 7
50430: PUSH
50431: LD_VAR 0 1
50435: PPUSH
50436: LD_VAR 0 6
50440: PPUSH
50441: LD_VAR 0 11
50445: PPUSH
50446: CALL_OW 272
50450: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
50451: LD_ADDR_VAR 0 8
50455: PUSH
50456: LD_VAR 0 2
50460: PPUSH
50461: LD_VAR 0 6
50465: PPUSH
50466: LD_VAR 0 11
50470: PPUSH
50471: CALL_OW 273
50475: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50476: LD_VAR 0 7
50480: PPUSH
50481: LD_VAR 0 8
50485: PPUSH
50486: CALL_OW 488
50490: NOT
50491: IFFALSE 50495
// continue ;
50493: GO 50423
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
50495: LD_ADDR_VAR 0 9
50499: PUSH
50500: LD_VAR 0 12
50504: PUSH
50505: LD_INT 1
50507: ARRAY
50508: PPUSH
50509: LD_VAR 0 12
50513: PUSH
50514: LD_INT 2
50516: ARRAY
50517: PPUSH
50518: LD_VAR 0 7
50522: PPUSH
50523: LD_VAR 0 8
50527: PPUSH
50528: CALL_OW 298
50532: ST_TO_ADDR
// if tmp < distance then
50533: LD_VAR 0 9
50537: PUSH
50538: LD_VAR 0 10
50542: LESS
50543: IFFALSE 50565
// begin result := i ;
50545: LD_ADDR_VAR 0 5
50549: PUSH
50550: LD_VAR 0 6
50554: ST_TO_ADDR
// distance := tmp ;
50555: LD_ADDR_VAR 0 10
50559: PUSH
50560: LD_VAR 0 9
50564: ST_TO_ADDR
// end ; end ;
50565: GO 50423
50567: POP
50568: POP
// end ;
50569: LD_VAR 0 5
50573: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50574: LD_INT 0
50576: PPUSH
50577: PPUSH
// if not driver or not IsInUnit ( driver ) then
50578: LD_VAR 0 1
50582: NOT
50583: IFTRUE 50597
50585: PUSH
50586: LD_VAR 0 1
50590: PPUSH
50591: CALL_OW 310
50595: NOT
50596: OR
50597: IFFALSE 50601
// exit ;
50599: GO 50691
// vehicle := IsInUnit ( driver ) ;
50601: LD_ADDR_VAR 0 3
50605: PUSH
50606: LD_VAR 0 1
50610: PPUSH
50611: CALL_OW 310
50615: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50616: LD_VAR 0 1
50620: PPUSH
50621: LD_STRING \
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: PUSH
50651: LD_STRING E
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_VAR 0 3
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PPUSH
50687: CALL_OW 446
// end ;
50691: LD_VAR 0 2
50695: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50696: LD_INT 0
50698: PPUSH
50699: PPUSH
// if not driver or not IsInUnit ( driver ) then
50700: LD_VAR 0 1
50704: NOT
50705: IFTRUE 50719
50707: PUSH
50708: LD_VAR 0 1
50712: PPUSH
50713: CALL_OW 310
50717: NOT
50718: OR
50719: IFFALSE 50723
// exit ;
50721: GO 50813
// vehicle := IsInUnit ( driver ) ;
50723: LD_ADDR_VAR 0 3
50727: PUSH
50728: LD_VAR 0 1
50732: PPUSH
50733: CALL_OW 310
50737: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50738: LD_VAR 0 1
50742: PPUSH
50743: LD_STRING \
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: PUSH
50773: LD_STRING E
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: LD_VAR 0 3
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PPUSH
50809: CALL_OW 447
// end ;
50813: LD_VAR 0 2
50817: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50818: LD_INT 0
50820: PPUSH
50821: PPUSH
50822: PPUSH
// tmp := [ ] ;
50823: LD_ADDR_VAR 0 5
50827: PUSH
50828: EMPTY
50829: ST_TO_ADDR
// for i in units do
50830: LD_ADDR_VAR 0 4
50834: PUSH
50835: LD_VAR 0 1
50839: PUSH
50840: FOR_IN
50841: IFFALSE 50879
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50843: LD_ADDR_VAR 0 5
50847: PUSH
50848: LD_VAR 0 5
50852: PPUSH
50853: LD_VAR 0 5
50857: PUSH
50858: LD_INT 1
50860: PLUS
50861: PPUSH
50862: LD_VAR 0 4
50866: PPUSH
50867: CALL_OW 256
50871: PPUSH
50872: CALL_OW 2
50876: ST_TO_ADDR
50877: GO 50840
50879: POP
50880: POP
// if not tmp then
50881: LD_VAR 0 5
50885: NOT
50886: IFFALSE 50890
// exit ;
50888: GO 50938
// if asc then
50890: LD_VAR 0 2
50894: IFFALSE 50918
// result := SortListByListAsc ( units , tmp ) else
50896: LD_ADDR_VAR 0 3
50900: PUSH
50901: LD_VAR 0 1
50905: PPUSH
50906: LD_VAR 0 5
50910: PPUSH
50911: CALL_OW 76
50915: ST_TO_ADDR
50916: GO 50938
// result := SortListByListDesc ( units , tmp ) ;
50918: LD_ADDR_VAR 0 3
50922: PUSH
50923: LD_VAR 0 1
50927: PPUSH
50928: LD_VAR 0 5
50932: PPUSH
50933: CALL_OW 77
50937: ST_TO_ADDR
// end ;
50938: LD_VAR 0 3
50942: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50943: LD_INT 0
50945: PPUSH
50946: PPUSH
// task := GetTaskList ( mech ) ;
50947: LD_ADDR_VAR 0 4
50951: PUSH
50952: LD_VAR 0 1
50956: PPUSH
50957: CALL_OW 437
50961: ST_TO_ADDR
// if not task then
50962: LD_VAR 0 4
50966: NOT
50967: IFFALSE 50971
// exit ;
50969: GO 51015
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50971: LD_ADDR_VAR 0 3
50975: PUSH
50976: LD_VAR 0 4
50980: PUSH
50981: LD_INT 1
50983: ARRAY
50984: PUSH
50985: LD_INT 1
50987: ARRAY
50988: PUSH
50989: LD_STRING r
50991: EQUAL
50992: IFFALSE 51014
50994: PUSH
50995: LD_VAR 0 4
50999: PUSH
51000: LD_INT 1
51002: ARRAY
51003: PUSH
51004: LD_INT 4
51006: ARRAY
51007: PUSH
51008: LD_VAR 0 2
51012: EQUAL
51013: AND
51014: ST_TO_ADDR
// end ;
51015: LD_VAR 0 3
51019: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51020: LD_INT 0
51022: PPUSH
// SetDir ( unit , d ) ;
51023: LD_VAR 0 1
51027: PPUSH
51028: LD_VAR 0 4
51032: PPUSH
51033: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51037: LD_ADDR_VAR 0 6
51041: PUSH
51042: LD_VAR 0 1
51046: PPUSH
51047: LD_VAR 0 2
51051: PPUSH
51052: LD_VAR 0 3
51056: PPUSH
51057: LD_VAR 0 5
51061: PPUSH
51062: CALL_OW 48
51066: ST_TO_ADDR
// end ;
51067: LD_VAR 0 6
51071: RET
// export function ToNaturalNumber ( number ) ; begin
51072: LD_INT 0
51074: PPUSH
// result := number div 1 ;
51075: LD_ADDR_VAR 0 2
51079: PUSH
51080: LD_VAR 0 1
51084: PUSH
51085: LD_INT 1
51087: DIV
51088: ST_TO_ADDR
// if number < 0 then
51089: LD_VAR 0 1
51093: PUSH
51094: LD_INT 0
51096: LESS
51097: IFFALSE 51107
// result := 0 ;
51099: LD_ADDR_VAR 0 2
51103: PUSH
51104: LD_INT 0
51106: ST_TO_ADDR
// end ;
51107: LD_VAR 0 2
51111: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51112: LD_INT 0
51114: PPUSH
51115: PPUSH
51116: PPUSH
// if not buildings then
51117: LD_VAR 0 1
51121: NOT
51122: IFFALSE 51126
// exit ;
51124: GO 51241
// tmp := [ ] ;
51126: LD_ADDR_VAR 0 5
51130: PUSH
51131: EMPTY
51132: ST_TO_ADDR
// for b in buildings do
51133: LD_ADDR_VAR 0 4
51137: PUSH
51138: LD_VAR 0 1
51142: PUSH
51143: FOR_IN
51144: IFFALSE 51182
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51146: LD_ADDR_VAR 0 5
51150: PUSH
51151: LD_VAR 0 5
51155: PPUSH
51156: LD_VAR 0 5
51160: PUSH
51161: LD_INT 1
51163: PLUS
51164: PPUSH
51165: LD_VAR 0 4
51169: PPUSH
51170: CALL_OW 266
51174: PPUSH
51175: CALL_OW 1
51179: ST_TO_ADDR
51180: GO 51143
51182: POP
51183: POP
// if not tmp then
51184: LD_VAR 0 5
51188: NOT
51189: IFFALSE 51193
// exit ;
51191: GO 51241
// if asc then
51193: LD_VAR 0 2
51197: IFFALSE 51221
// result := SortListByListAsc ( buildings , tmp ) else
51199: LD_ADDR_VAR 0 3
51203: PUSH
51204: LD_VAR 0 1
51208: PPUSH
51209: LD_VAR 0 5
51213: PPUSH
51214: CALL_OW 76
51218: ST_TO_ADDR
51219: GO 51241
// result := SortListByListDesc ( buildings , tmp ) ;
51221: LD_ADDR_VAR 0 3
51225: PUSH
51226: LD_VAR 0 1
51230: PPUSH
51231: LD_VAR 0 5
51235: PPUSH
51236: CALL_OW 77
51240: ST_TO_ADDR
// end ;
51241: LD_VAR 0 3
51245: RET
// export function SortByClass ( units , class ) ; var un ; begin
51246: LD_INT 0
51248: PPUSH
51249: PPUSH
// if not units or not class then
51250: LD_VAR 0 1
51254: NOT
51255: IFTRUE 51264
51257: PUSH
51258: LD_VAR 0 2
51262: NOT
51263: OR
51264: IFFALSE 51268
// exit ;
51266: GO 51363
// result := [ ] ;
51268: LD_ADDR_VAR 0 3
51272: PUSH
51273: EMPTY
51274: ST_TO_ADDR
// for un in units do
51275: LD_ADDR_VAR 0 4
51279: PUSH
51280: LD_VAR 0 1
51284: PUSH
51285: FOR_IN
51286: IFFALSE 51361
// if GetClass ( un ) = class then
51288: LD_VAR 0 4
51292: PPUSH
51293: CALL_OW 257
51297: PUSH
51298: LD_VAR 0 2
51302: EQUAL
51303: IFFALSE 51330
// result := Insert ( result , 1 , un ) else
51305: LD_ADDR_VAR 0 3
51309: PUSH
51310: LD_VAR 0 3
51314: PPUSH
51315: LD_INT 1
51317: PPUSH
51318: LD_VAR 0 4
51322: PPUSH
51323: CALL_OW 2
51327: ST_TO_ADDR
51328: GO 51359
// result := Replace ( result , result + 1 , un ) ;
51330: LD_ADDR_VAR 0 3
51334: PUSH
51335: LD_VAR 0 3
51339: PPUSH
51340: LD_VAR 0 3
51344: PUSH
51345: LD_INT 1
51347: PLUS
51348: PPUSH
51349: LD_VAR 0 4
51353: PPUSH
51354: CALL_OW 1
51358: ST_TO_ADDR
51359: GO 51285
51361: POP
51362: POP
// end ;
51363: LD_VAR 0 3
51367: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51368: LD_INT 0
51370: PPUSH
51371: PPUSH
51372: PPUSH
51373: PPUSH
51374: PPUSH
51375: PPUSH
51376: PPUSH
// result := [ ] ;
51377: LD_ADDR_VAR 0 4
51381: PUSH
51382: EMPTY
51383: ST_TO_ADDR
// if x - r < 0 then
51384: LD_VAR 0 1
51388: PUSH
51389: LD_VAR 0 3
51393: MINUS
51394: PUSH
51395: LD_INT 0
51397: LESS
51398: IFFALSE 51410
// min_x := 0 else
51400: LD_ADDR_VAR 0 8
51404: PUSH
51405: LD_INT 0
51407: ST_TO_ADDR
51408: GO 51426
// min_x := x - r ;
51410: LD_ADDR_VAR 0 8
51414: PUSH
51415: LD_VAR 0 1
51419: PUSH
51420: LD_VAR 0 3
51424: MINUS
51425: ST_TO_ADDR
// if y - r < 0 then
51426: LD_VAR 0 2
51430: PUSH
51431: LD_VAR 0 3
51435: MINUS
51436: PUSH
51437: LD_INT 0
51439: LESS
51440: IFFALSE 51452
// min_y := 0 else
51442: LD_ADDR_VAR 0 7
51446: PUSH
51447: LD_INT 0
51449: ST_TO_ADDR
51450: GO 51468
// min_y := y - r ;
51452: LD_ADDR_VAR 0 7
51456: PUSH
51457: LD_VAR 0 2
51461: PUSH
51462: LD_VAR 0 3
51466: MINUS
51467: ST_TO_ADDR
// max_x := x + r ;
51468: LD_ADDR_VAR 0 9
51472: PUSH
51473: LD_VAR 0 1
51477: PUSH
51478: LD_VAR 0 3
51482: PLUS
51483: ST_TO_ADDR
// max_y := y + r ;
51484: LD_ADDR_VAR 0 10
51488: PUSH
51489: LD_VAR 0 2
51493: PUSH
51494: LD_VAR 0 3
51498: PLUS
51499: ST_TO_ADDR
// for _x = min_x to max_x do
51500: LD_ADDR_VAR 0 5
51504: PUSH
51505: DOUBLE
51506: LD_VAR 0 8
51510: DEC
51511: ST_TO_ADDR
51512: LD_VAR 0 9
51516: PUSH
51517: FOR_TO
51518: IFFALSE 51619
// for _y = min_y to max_y do
51520: LD_ADDR_VAR 0 6
51524: PUSH
51525: DOUBLE
51526: LD_VAR 0 7
51530: DEC
51531: ST_TO_ADDR
51532: LD_VAR 0 10
51536: PUSH
51537: FOR_TO
51538: IFFALSE 51615
// begin if not ValidHex ( _x , _y ) then
51540: LD_VAR 0 5
51544: PPUSH
51545: LD_VAR 0 6
51549: PPUSH
51550: CALL_OW 488
51554: NOT
51555: IFFALSE 51559
// continue ;
51557: GO 51537
// if GetResourceTypeXY ( _x , _y ) then
51559: LD_VAR 0 5
51563: PPUSH
51564: LD_VAR 0 6
51568: PPUSH
51569: CALL_OW 283
51573: IFFALSE 51613
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
51575: LD_ADDR_VAR 0 4
51579: PUSH
51580: LD_VAR 0 4
51584: PPUSH
51585: LD_VAR 0 4
51589: PUSH
51590: LD_INT 1
51592: PLUS
51593: PPUSH
51594: LD_VAR 0 5
51598: PUSH
51599: LD_VAR 0 6
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PPUSH
51608: CALL_OW 1
51612: ST_TO_ADDR
// end ;
51613: GO 51537
51615: POP
51616: POP
51617: GO 51517
51619: POP
51620: POP
// end ;
51621: LD_VAR 0 4
51625: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
51626: LD_INT 0
51628: PPUSH
51629: PPUSH
51630: PPUSH
51631: PPUSH
51632: PPUSH
51633: PPUSH
51634: PPUSH
51635: PPUSH
// if not units then
51636: LD_VAR 0 1
51640: NOT
51641: IFFALSE 51645
// exit ;
51643: GO 52177
// result := UnitFilter ( units , [ f_ok ] ) ;
51645: LD_ADDR_VAR 0 3
51649: PUSH
51650: LD_VAR 0 1
51654: PPUSH
51655: LD_INT 50
51657: PUSH
51658: EMPTY
51659: LIST
51660: PPUSH
51661: CALL_OW 72
51665: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
51666: LD_ADDR_VAR 0 8
51670: PUSH
51671: LD_VAR 0 1
51675: PUSH
51676: LD_INT 1
51678: ARRAY
51679: PPUSH
51680: CALL_OW 255
51684: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51685: LD_ADDR_VAR 0 10
51689: PUSH
51690: LD_INT 29
51692: PUSH
51693: LD_INT 91
51695: PUSH
51696: LD_INT 49
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: LIST
51703: ST_TO_ADDR
// if not result then
51704: LD_VAR 0 3
51708: NOT
51709: IFFALSE 51713
// exit ;
51711: GO 52177
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51713: LD_ADDR_VAR 0 5
51717: PUSH
51718: LD_INT 81
51720: PUSH
51721: LD_VAR 0 8
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PPUSH
51730: CALL_OW 69
51734: ST_TO_ADDR
// for i in result do
51735: LD_ADDR_VAR 0 4
51739: PUSH
51740: LD_VAR 0 3
51744: PUSH
51745: FOR_IN
51746: IFFALSE 52175
// begin tag := GetTag ( i ) + 1 ;
51748: LD_ADDR_VAR 0 9
51752: PUSH
51753: LD_VAR 0 4
51757: PPUSH
51758: CALL_OW 110
51762: PUSH
51763: LD_INT 1
51765: PLUS
51766: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51767: LD_ADDR_VAR 0 7
51771: PUSH
51772: LD_VAR 0 4
51776: PPUSH
51777: CALL_OW 250
51781: PPUSH
51782: LD_VAR 0 4
51786: PPUSH
51787: CALL_OW 251
51791: PPUSH
51792: LD_INT 4
51794: PPUSH
51795: CALL 51368 0 3
51799: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51800: LD_VAR 0 4
51804: PPUSH
51805: CALL_OW 247
51809: PUSH
51810: LD_INT 2
51812: EQUAL
51813: IFFALSE 51825
51815: PUSH
51816: LD_VAR 0 7
51820: PUSH
51821: LD_INT 2
51823: GREATER
51824: AND
51825: IFFALSE 51845
51827: PUSH
51828: LD_VAR 0 4
51832: PPUSH
51833: CALL_OW 264
51837: PUSH
51838: LD_VAR 0 10
51842: IN
51843: NOT
51844: AND
51845: IFFALSE 51884
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51847: LD_VAR 0 4
51851: PPUSH
51852: LD_VAR 0 7
51856: PUSH
51857: LD_INT 1
51859: ARRAY
51860: PUSH
51861: LD_INT 1
51863: ARRAY
51864: PPUSH
51865: LD_VAR 0 7
51869: PUSH
51870: LD_INT 1
51872: ARRAY
51873: PUSH
51874: LD_INT 2
51876: ARRAY
51877: PPUSH
51878: CALL_OW 116
51882: GO 52173
// if path > tag then
51884: LD_VAR 0 2
51888: PUSH
51889: LD_VAR 0 9
51893: GREATER
51894: IFFALSE 52102
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51896: LD_ADDR_VAR 0 6
51900: PUSH
51901: LD_VAR 0 5
51905: PPUSH
51906: LD_INT 91
51908: PUSH
51909: LD_VAR 0 4
51913: PUSH
51914: LD_INT 8
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: LIST
51921: PPUSH
51922: CALL_OW 72
51926: ST_TO_ADDR
// if nearEnemy then
51927: LD_VAR 0 6
51931: IFFALSE 52000
// begin if GetWeapon ( i ) = ru_time_lapser then
51933: LD_VAR 0 4
51937: PPUSH
51938: CALL_OW 264
51942: PUSH
51943: LD_INT 49
51945: EQUAL
51946: IFFALSE 51974
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51948: LD_VAR 0 4
51952: PPUSH
51953: LD_VAR 0 6
51957: PPUSH
51958: LD_VAR 0 4
51962: PPUSH
51963: CALL_OW 74
51967: PPUSH
51968: CALL_OW 112
51972: GO 51998
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51974: LD_VAR 0 4
51978: PPUSH
51979: LD_VAR 0 6
51983: PPUSH
51984: LD_VAR 0 4
51988: PPUSH
51989: CALL_OW 74
51993: PPUSH
51994: CALL 53258 0 2
// end else
51998: GO 52100
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52000: LD_VAR 0 4
52004: PPUSH
52005: LD_VAR 0 2
52009: PUSH
52010: LD_VAR 0 9
52014: ARRAY
52015: PUSH
52016: LD_INT 1
52018: ARRAY
52019: PPUSH
52020: LD_VAR 0 2
52024: PUSH
52025: LD_VAR 0 9
52029: ARRAY
52030: PUSH
52031: LD_INT 2
52033: ARRAY
52034: PPUSH
52035: CALL_OW 297
52039: PUSH
52040: LD_INT 6
52042: GREATER
52043: IFFALSE 52086
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52045: LD_VAR 0 4
52049: PPUSH
52050: LD_VAR 0 2
52054: PUSH
52055: LD_VAR 0 9
52059: ARRAY
52060: PUSH
52061: LD_INT 1
52063: ARRAY
52064: PPUSH
52065: LD_VAR 0 2
52069: PUSH
52070: LD_VAR 0 9
52074: ARRAY
52075: PUSH
52076: LD_INT 2
52078: ARRAY
52079: PPUSH
52080: CALL_OW 114
52084: GO 52100
// SetTag ( i , tag ) ;
52086: LD_VAR 0 4
52090: PPUSH
52091: LD_VAR 0 9
52095: PPUSH
52096: CALL_OW 109
// end else
52100: GO 52173
// if enemy then
52102: LD_VAR 0 5
52106: IFFALSE 52173
// begin if GetWeapon ( i ) = ru_time_lapser then
52108: LD_VAR 0 4
52112: PPUSH
52113: CALL_OW 264
52117: PUSH
52118: LD_INT 49
52120: EQUAL
52121: IFFALSE 52149
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52123: LD_VAR 0 4
52127: PPUSH
52128: LD_VAR 0 5
52132: PPUSH
52133: LD_VAR 0 4
52137: PPUSH
52138: CALL_OW 74
52142: PPUSH
52143: CALL_OW 112
52147: GO 52173
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52149: LD_VAR 0 4
52153: PPUSH
52154: LD_VAR 0 5
52158: PPUSH
52159: LD_VAR 0 4
52163: PPUSH
52164: CALL_OW 74
52168: PPUSH
52169: CALL 53258 0 2
// end ; end ;
52173: GO 51745
52175: POP
52176: POP
// end ;
52177: LD_VAR 0 3
52181: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52182: LD_INT 0
52184: PPUSH
52185: PPUSH
52186: PPUSH
// if not unit or IsInUnit ( unit ) then
52187: LD_VAR 0 1
52191: NOT
52192: IFTRUE 52205
52194: PUSH
52195: LD_VAR 0 1
52199: PPUSH
52200: CALL_OW 310
52204: OR
52205: IFFALSE 52209
// exit ;
52207: GO 52300
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52209: LD_ADDR_VAR 0 4
52213: PUSH
52214: LD_VAR 0 1
52218: PPUSH
52219: CALL_OW 250
52223: PPUSH
52224: LD_VAR 0 2
52228: PPUSH
52229: LD_INT 1
52231: PPUSH
52232: CALL_OW 272
52236: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52237: LD_ADDR_VAR 0 5
52241: PUSH
52242: LD_VAR 0 1
52246: PPUSH
52247: CALL_OW 251
52251: PPUSH
52252: LD_VAR 0 2
52256: PPUSH
52257: LD_INT 1
52259: PPUSH
52260: CALL_OW 273
52264: ST_TO_ADDR
// if ValidHex ( x , y ) then
52265: LD_VAR 0 4
52269: PPUSH
52270: LD_VAR 0 5
52274: PPUSH
52275: CALL_OW 488
52279: IFFALSE 52300
// ComTurnXY ( unit , x , y ) ;
52281: LD_VAR 0 1
52285: PPUSH
52286: LD_VAR 0 4
52290: PPUSH
52291: LD_VAR 0 5
52295: PPUSH
52296: CALL_OW 118
// end ;
52300: LD_VAR 0 3
52304: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52305: LD_INT 0
52307: PPUSH
52308: PPUSH
// result := false ;
52309: LD_ADDR_VAR 0 3
52313: PUSH
52314: LD_INT 0
52316: ST_TO_ADDR
// if not units then
52317: LD_VAR 0 2
52321: NOT
52322: IFFALSE 52326
// exit ;
52324: GO 52371
// for i in units do
52326: LD_ADDR_VAR 0 4
52330: PUSH
52331: LD_VAR 0 2
52335: PUSH
52336: FOR_IN
52337: IFFALSE 52369
// if See ( side , i ) then
52339: LD_VAR 0 1
52343: PPUSH
52344: LD_VAR 0 4
52348: PPUSH
52349: CALL_OW 292
52353: IFFALSE 52367
// begin result := true ;
52355: LD_ADDR_VAR 0 3
52359: PUSH
52360: LD_INT 1
52362: ST_TO_ADDR
// exit ;
52363: POP
52364: POP
52365: GO 52371
// end ;
52367: GO 52336
52369: POP
52370: POP
// end ;
52371: LD_VAR 0 3
52375: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52376: LD_INT 0
52378: PPUSH
52379: PPUSH
52380: PPUSH
52381: PPUSH
// if not unit or not points then
52382: LD_VAR 0 1
52386: NOT
52387: IFTRUE 52396
52389: PUSH
52390: LD_VAR 0 2
52394: NOT
52395: OR
52396: IFFALSE 52400
// exit ;
52398: GO 52490
// dist := 99999 ;
52400: LD_ADDR_VAR 0 5
52404: PUSH
52405: LD_INT 99999
52407: ST_TO_ADDR
// for i in points do
52408: LD_ADDR_VAR 0 4
52412: PUSH
52413: LD_VAR 0 2
52417: PUSH
52418: FOR_IN
52419: IFFALSE 52488
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
52421: LD_ADDR_VAR 0 6
52425: PUSH
52426: LD_VAR 0 1
52430: PPUSH
52431: LD_VAR 0 4
52435: PUSH
52436: LD_INT 1
52438: ARRAY
52439: PPUSH
52440: LD_VAR 0 4
52444: PUSH
52445: LD_INT 2
52447: ARRAY
52448: PPUSH
52449: CALL_OW 297
52453: ST_TO_ADDR
// if tmpDist < dist then
52454: LD_VAR 0 6
52458: PUSH
52459: LD_VAR 0 5
52463: LESS
52464: IFFALSE 52486
// begin result := i ;
52466: LD_ADDR_VAR 0 3
52470: PUSH
52471: LD_VAR 0 4
52475: ST_TO_ADDR
// dist := tmpDist ;
52476: LD_ADDR_VAR 0 5
52480: PUSH
52481: LD_VAR 0 6
52485: ST_TO_ADDR
// end ; end ;
52486: GO 52418
52488: POP
52489: POP
// end ;
52490: LD_VAR 0 3
52494: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
52495: LD_INT 0
52497: PPUSH
// uc_side := side ;
52498: LD_ADDR_OWVAR 20
52502: PUSH
52503: LD_VAR 0 1
52507: ST_TO_ADDR
// uc_nation := 3 ;
52508: LD_ADDR_OWVAR 21
52512: PUSH
52513: LD_INT 3
52515: ST_TO_ADDR
// vc_chassis := 25 ;
52516: LD_ADDR_OWVAR 37
52520: PUSH
52521: LD_INT 25
52523: ST_TO_ADDR
// vc_engine := engine_siberite ;
52524: LD_ADDR_OWVAR 39
52528: PUSH
52529: LD_INT 3
52531: ST_TO_ADDR
// vc_control := control_computer ;
52532: LD_ADDR_OWVAR 38
52536: PUSH
52537: LD_INT 3
52539: ST_TO_ADDR
// vc_weapon := 59 ;
52540: LD_ADDR_OWVAR 40
52544: PUSH
52545: LD_INT 59
52547: ST_TO_ADDR
// result := CreateVehicle ;
52548: LD_ADDR_VAR 0 5
52552: PUSH
52553: CALL_OW 45
52557: ST_TO_ADDR
// SetDir ( result , d ) ;
52558: LD_VAR 0 5
52562: PPUSH
52563: LD_VAR 0 4
52567: PPUSH
52568: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
52572: LD_VAR 0 5
52576: PPUSH
52577: LD_VAR 0 2
52581: PPUSH
52582: LD_VAR 0 3
52586: PPUSH
52587: LD_INT 0
52589: PPUSH
52590: CALL_OW 48
// end ;
52594: LD_VAR 0 5
52598: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
52599: LD_INT 0
52601: PPUSH
52602: PPUSH
52603: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
52604: LD_ADDR_VAR 0 2
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
52627: LD_VAR 0 1
52631: NOT
52632: IFTRUE 52665
52634: PUSH
52635: LD_VAR 0 1
52639: PPUSH
52640: CALL_OW 264
52644: PUSH
52645: LD_INT 12
52647: PUSH
52648: LD_INT 51
52650: PUSH
52651: LD_INT 32
52653: PUSH
52654: LD_INT 89
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: IN
52663: NOT
52664: OR
52665: IFFALSE 52669
// exit ;
52667: GO 52767
// for i := 1 to 3 do
52669: LD_ADDR_VAR 0 3
52673: PUSH
52674: DOUBLE
52675: LD_INT 1
52677: DEC
52678: ST_TO_ADDR
52679: LD_INT 3
52681: PUSH
52682: FOR_TO
52683: IFFALSE 52765
// begin tmp := GetCargo ( cargo , i ) ;
52685: LD_ADDR_VAR 0 4
52689: PUSH
52690: LD_VAR 0 1
52694: PPUSH
52695: LD_VAR 0 3
52699: PPUSH
52700: CALL_OW 289
52704: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52705: LD_ADDR_VAR 0 2
52709: PUSH
52710: LD_VAR 0 2
52714: PPUSH
52715: LD_VAR 0 3
52719: PPUSH
52720: LD_VAR 0 4
52724: PPUSH
52725: CALL_OW 1
52729: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52730: LD_ADDR_VAR 0 2
52734: PUSH
52735: LD_VAR 0 2
52739: PPUSH
52740: LD_INT 4
52742: PPUSH
52743: LD_VAR 0 2
52747: PUSH
52748: LD_INT 4
52750: ARRAY
52751: PUSH
52752: LD_VAR 0 4
52756: PLUS
52757: PPUSH
52758: CALL_OW 1
52762: ST_TO_ADDR
// end ;
52763: GO 52682
52765: POP
52766: POP
// end ;
52767: LD_VAR 0 2
52771: RET
// export function Length ( array ) ; begin
52772: LD_INT 0
52774: PPUSH
// result := array + 0 ;
52775: LD_ADDR_VAR 0 2
52779: PUSH
52780: LD_VAR 0 1
52784: PUSH
52785: LD_INT 0
52787: PLUS
52788: ST_TO_ADDR
// end ;
52789: LD_VAR 0 2
52793: RET
// export function PrepareArray ( array ) ; begin
52794: LD_INT 0
52796: PPUSH
// result := array diff 0 ;
52797: LD_ADDR_VAR 0 2
52801: PUSH
52802: LD_VAR 0 1
52806: PUSH
52807: LD_INT 0
52809: DIFF
52810: ST_TO_ADDR
// if not result [ 1 ] then
52811: LD_VAR 0 2
52815: PUSH
52816: LD_INT 1
52818: ARRAY
52819: NOT
52820: IFFALSE 52840
// result := Delete ( result , 1 ) ;
52822: LD_ADDR_VAR 0 2
52826: PUSH
52827: LD_VAR 0 2
52831: PPUSH
52832: LD_INT 1
52834: PPUSH
52835: CALL_OW 3
52839: ST_TO_ADDR
// end ;
52840: LD_VAR 0 2
52844: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52845: LD_INT 0
52847: PPUSH
52848: PPUSH
52849: PPUSH
52850: PPUSH
// sibRocketRange := 25 ;
52851: LD_ADDR_VAR 0 6
52855: PUSH
52856: LD_INT 25
52858: ST_TO_ADDR
// result := false ;
52859: LD_ADDR_VAR 0 4
52863: PUSH
52864: LD_INT 0
52866: ST_TO_ADDR
// for i := 0 to 5 do
52867: LD_ADDR_VAR 0 5
52871: PUSH
52872: DOUBLE
52873: LD_INT 0
52875: DEC
52876: ST_TO_ADDR
52877: LD_INT 5
52879: PUSH
52880: FOR_TO
52881: IFFALSE 52948
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52883: LD_VAR 0 1
52887: PPUSH
52888: LD_VAR 0 5
52892: PPUSH
52893: LD_VAR 0 6
52897: PPUSH
52898: CALL_OW 272
52902: PPUSH
52903: LD_VAR 0 2
52907: PPUSH
52908: LD_VAR 0 5
52912: PPUSH
52913: LD_VAR 0 6
52917: PPUSH
52918: CALL_OW 273
52922: PPUSH
52923: LD_VAR 0 3
52927: PPUSH
52928: CALL_OW 309
52932: IFFALSE 52946
// begin result := true ;
52934: LD_ADDR_VAR 0 4
52938: PUSH
52939: LD_INT 1
52941: ST_TO_ADDR
// exit ;
52942: POP
52943: POP
52944: GO 52950
// end ;
52946: GO 52880
52948: POP
52949: POP
// end ;
52950: LD_VAR 0 4
52954: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52955: LD_INT 0
52957: PPUSH
52958: PPUSH
52959: PPUSH
// if btype = b_depot then
52960: LD_VAR 0 2
52964: PUSH
52965: LD_INT 0
52967: EQUAL
52968: IFFALSE 52980
// begin result := true ;
52970: LD_ADDR_VAR 0 3
52974: PUSH
52975: LD_INT 1
52977: ST_TO_ADDR
// exit ;
52978: GO 53100
// end ; pom := GetBase ( depot ) ;
52980: LD_ADDR_VAR 0 4
52984: PUSH
52985: LD_VAR 0 1
52989: PPUSH
52990: CALL_OW 274
52994: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52995: LD_ADDR_VAR 0 5
52999: PUSH
53000: LD_VAR 0 2
53004: PPUSH
53005: LD_VAR 0 1
53009: PPUSH
53010: CALL_OW 248
53014: PPUSH
53015: CALL_OW 450
53019: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53020: LD_ADDR_VAR 0 3
53024: PUSH
53025: LD_VAR 0 4
53029: PPUSH
53030: LD_INT 1
53032: PPUSH
53033: CALL_OW 275
53037: PUSH
53038: LD_VAR 0 5
53042: PUSH
53043: LD_INT 1
53045: ARRAY
53046: GREATEREQUAL
53047: IFFALSE 53073
53049: PUSH
53050: LD_VAR 0 4
53054: PPUSH
53055: LD_INT 2
53057: PPUSH
53058: CALL_OW 275
53062: PUSH
53063: LD_VAR 0 5
53067: PUSH
53068: LD_INT 2
53070: ARRAY
53071: GREATEREQUAL
53072: AND
53073: IFFALSE 53099
53075: PUSH
53076: LD_VAR 0 4
53080: PPUSH
53081: LD_INT 3
53083: PPUSH
53084: CALL_OW 275
53088: PUSH
53089: LD_VAR 0 5
53093: PUSH
53094: LD_INT 3
53096: ARRAY
53097: GREATEREQUAL
53098: AND
53099: ST_TO_ADDR
// end ;
53100: LD_VAR 0 3
53104: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53105: LD_INT 0
53107: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53108: LD_VAR 0 1
53112: PPUSH
53113: LD_VAR 0 2
53117: PPUSH
53118: LD_INT 0
53120: PPUSH
53121: LD_INT 0
53123: PPUSH
53124: LD_INT 1
53126: PPUSH
53127: LD_INT 0
53129: PPUSH
53130: CALL_OW 587
// end ;
53134: LD_VAR 0 3
53138: RET
// export function CenterOnNow ( unit ) ; begin
53139: LD_INT 0
53141: PPUSH
// result := IsInUnit ( unit ) ;
53142: LD_ADDR_VAR 0 2
53146: PUSH
53147: LD_VAR 0 1
53151: PPUSH
53152: CALL_OW 310
53156: ST_TO_ADDR
// if not result then
53157: LD_VAR 0 2
53161: NOT
53162: IFFALSE 53174
// result := unit ;
53164: LD_ADDR_VAR 0 2
53168: PUSH
53169: LD_VAR 0 1
53173: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
53174: LD_VAR 0 1
53178: PPUSH
53179: CALL_OW 87
// end ;
53183: LD_VAR 0 2
53187: RET
// export function ComMoveHex ( unit , hex ) ; begin
53188: LD_INT 0
53190: PPUSH
// if not hex then
53191: LD_VAR 0 2
53195: NOT
53196: IFFALSE 53200
// exit ;
53198: GO 53253
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53200: LD_VAR 0 2
53204: PUSH
53205: LD_INT 1
53207: ARRAY
53208: PPUSH
53209: LD_VAR 0 2
53213: PUSH
53214: LD_INT 2
53216: ARRAY
53217: PPUSH
53218: CALL_OW 428
53222: IFFALSE 53226
// exit ;
53224: GO 53253
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53226: LD_VAR 0 1
53230: PPUSH
53231: LD_VAR 0 2
53235: PUSH
53236: LD_INT 1
53238: ARRAY
53239: PPUSH
53240: LD_VAR 0 2
53244: PUSH
53245: LD_INT 2
53247: ARRAY
53248: PPUSH
53249: CALL_OW 111
// end ;
53253: LD_VAR 0 3
53257: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53258: LD_INT 0
53260: PPUSH
53261: PPUSH
53262: PPUSH
// if not unit or not enemy then
53263: LD_VAR 0 1
53267: NOT
53268: IFTRUE 53277
53270: PUSH
53271: LD_VAR 0 2
53275: NOT
53276: OR
53277: IFFALSE 53281
// exit ;
53279: GO 53407
// x := GetX ( enemy ) ;
53281: LD_ADDR_VAR 0 4
53285: PUSH
53286: LD_VAR 0 2
53290: PPUSH
53291: CALL_OW 250
53295: ST_TO_ADDR
// y := GetY ( enemy ) ;
53296: LD_ADDR_VAR 0 5
53300: PUSH
53301: LD_VAR 0 2
53305: PPUSH
53306: CALL_OW 251
53310: ST_TO_ADDR
// if ValidHex ( x , y ) then
53311: LD_VAR 0 4
53315: PPUSH
53316: LD_VAR 0 5
53320: PPUSH
53321: CALL_OW 488
53325: IFFALSE 53407
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
53327: LD_VAR 0 2
53331: PPUSH
53332: CALL_OW 247
53336: PUSH
53337: LD_INT 3
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: IN
53347: IFTRUE 53370
53349: PUSH
53350: LD_VAR 0 1
53354: PPUSH
53355: CALL_OW 255
53359: PPUSH
53360: LD_VAR 0 2
53364: PPUSH
53365: CALL_OW 292
53369: OR
53370: IFFALSE 53388
// ComAttackUnit ( unit , enemy ) else
53372: LD_VAR 0 1
53376: PPUSH
53377: LD_VAR 0 2
53381: PPUSH
53382: CALL_OW 115
53386: GO 53407
// ComAgressiveMove ( unit , x , y ) ;
53388: LD_VAR 0 1
53392: PPUSH
53393: LD_VAR 0 4
53397: PPUSH
53398: LD_VAR 0 5
53402: PPUSH
53403: CALL_OW 114
// end ;
53407: LD_VAR 0 3
53411: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
53412: LD_INT 0
53414: PPUSH
53415: PPUSH
53416: PPUSH
// list := AreaToList ( area , 0 ) ;
53417: LD_ADDR_VAR 0 5
53421: PUSH
53422: LD_VAR 0 1
53426: PPUSH
53427: LD_INT 0
53429: PPUSH
53430: CALL_OW 517
53434: ST_TO_ADDR
// if not list then
53435: LD_VAR 0 5
53439: NOT
53440: IFFALSE 53444
// exit ;
53442: GO 53574
// if all then
53444: LD_VAR 0 2
53448: IFFALSE 53536
// begin for i := 1 to list [ 1 ] do
53450: LD_ADDR_VAR 0 4
53454: PUSH
53455: DOUBLE
53456: LD_INT 1
53458: DEC
53459: ST_TO_ADDR
53460: LD_VAR 0 5
53464: PUSH
53465: LD_INT 1
53467: ARRAY
53468: PUSH
53469: FOR_TO
53470: IFFALSE 53532
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
53472: LD_ADDR_VAR 0 3
53476: PUSH
53477: LD_VAR 0 3
53481: PPUSH
53482: LD_VAR 0 3
53486: PUSH
53487: LD_INT 1
53489: PLUS
53490: PPUSH
53491: LD_VAR 0 5
53495: PUSH
53496: LD_INT 1
53498: ARRAY
53499: PUSH
53500: LD_VAR 0 4
53504: ARRAY
53505: PUSH
53506: LD_VAR 0 5
53510: PUSH
53511: LD_INT 2
53513: ARRAY
53514: PUSH
53515: LD_VAR 0 4
53519: ARRAY
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PPUSH
53525: CALL_OW 1
53529: ST_TO_ADDR
53530: GO 53469
53532: POP
53533: POP
// exit ;
53534: GO 53574
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
53536: LD_ADDR_VAR 0 3
53540: PUSH
53541: LD_VAR 0 5
53545: PUSH
53546: LD_INT 1
53548: ARRAY
53549: PUSH
53550: LD_INT 1
53552: ARRAY
53553: PUSH
53554: LD_VAR 0 5
53558: PUSH
53559: LD_INT 2
53561: ARRAY
53562: PUSH
53563: LD_INT 1
53565: ARRAY
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: EMPTY
53572: LIST
53573: ST_TO_ADDR
// end ;
53574: LD_VAR 0 3
53578: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
53579: LD_INT 0
53581: PPUSH
53582: PPUSH
// list := AreaToList ( area , 0 ) ;
53583: LD_ADDR_VAR 0 4
53587: PUSH
53588: LD_VAR 0 1
53592: PPUSH
53593: LD_INT 0
53595: PPUSH
53596: CALL_OW 517
53600: ST_TO_ADDR
// if not list then
53601: LD_VAR 0 4
53605: NOT
53606: IFFALSE 53610
// exit ;
53608: GO 53651
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
53610: LD_ADDR_VAR 0 3
53614: PUSH
53615: LD_VAR 0 4
53619: PUSH
53620: LD_INT 1
53622: ARRAY
53623: PUSH
53624: LD_INT 1
53626: ARRAY
53627: PUSH
53628: LD_VAR 0 4
53632: PUSH
53633: LD_INT 2
53635: ARRAY
53636: PUSH
53637: LD_INT 1
53639: ARRAY
53640: PUSH
53641: LD_VAR 0 2
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: LIST
53650: ST_TO_ADDR
// end ;
53651: LD_VAR 0 3
53655: RET
// export function First ( array ) ; begin
53656: LD_INT 0
53658: PPUSH
// if not array then
53659: LD_VAR 0 1
53663: NOT
53664: IFFALSE 53668
// exit ;
53666: GO 53682
// result := array [ 1 ] ;
53668: LD_ADDR_VAR 0 2
53672: PUSH
53673: LD_VAR 0 1
53677: PUSH
53678: LD_INT 1
53680: ARRAY
53681: ST_TO_ADDR
// end ;
53682: LD_VAR 0 2
53686: RET
// export function Last ( array ) ; begin
53687: LD_INT 0
53689: PPUSH
// if not array then
53690: LD_VAR 0 1
53694: NOT
53695: IFFALSE 53699
// exit ;
53697: GO 53715
// result := array [ array ] ;
53699: LD_ADDR_VAR 0 2
53703: PUSH
53704: LD_VAR 0 1
53708: PUSH
53709: LD_VAR 0 1
53713: ARRAY
53714: ST_TO_ADDR
// end ;
53715: LD_VAR 0 2
53719: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53720: LD_INT 0
53722: PPUSH
53723: PPUSH
// result := [ ] ;
53724: LD_ADDR_VAR 0 5
53728: PUSH
53729: EMPTY
53730: ST_TO_ADDR
// if not array then
53731: LD_VAR 0 1
53735: NOT
53736: IFFALSE 53740
// exit ;
53738: GO 53852
// for i := 1 to array do
53740: LD_ADDR_VAR 0 6
53744: PUSH
53745: DOUBLE
53746: LD_INT 1
53748: DEC
53749: ST_TO_ADDR
53750: LD_VAR 0 1
53754: PUSH
53755: FOR_TO
53756: IFFALSE 53850
// if array [ i ] [ index ] = value then
53758: LD_VAR 0 1
53762: PUSH
53763: LD_VAR 0 6
53767: ARRAY
53768: PUSH
53769: LD_VAR 0 2
53773: ARRAY
53774: PUSH
53775: LD_VAR 0 3
53779: EQUAL
53780: IFFALSE 53848
// begin if indexColumn then
53782: LD_VAR 0 4
53786: IFFALSE 53822
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53788: LD_ADDR_VAR 0 5
53792: PUSH
53793: LD_VAR 0 5
53797: PPUSH
53798: LD_VAR 0 1
53802: PUSH
53803: LD_VAR 0 6
53807: ARRAY
53808: PUSH
53809: LD_VAR 0 4
53813: ARRAY
53814: PPUSH
53815: CALL 48860 0 2
53819: ST_TO_ADDR
53820: GO 53848
// result := Join ( result , array [ i ] ) ;
53822: LD_ADDR_VAR 0 5
53826: PUSH
53827: LD_VAR 0 5
53831: PPUSH
53832: LD_VAR 0 1
53836: PUSH
53837: LD_VAR 0 6
53841: ARRAY
53842: PPUSH
53843: CALL 48860 0 2
53847: ST_TO_ADDR
// end ;
53848: GO 53755
53850: POP
53851: POP
// end ;
53852: LD_VAR 0 5
53856: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53857: LD_INT 0
53859: PPUSH
// if not vehicles or not parkingPoint then
53860: LD_VAR 0 1
53864: NOT
53865: IFTRUE 53874
53867: PUSH
53868: LD_VAR 0 2
53872: NOT
53873: OR
53874: IFFALSE 53878
// exit ;
53876: GO 53976
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53878: LD_ADDR_VAR 0 1
53882: PUSH
53883: LD_VAR 0 1
53887: PPUSH
53888: LD_INT 50
53890: PUSH
53891: EMPTY
53892: LIST
53893: PUSH
53894: LD_INT 3
53896: PUSH
53897: LD_INT 92
53899: PUSH
53900: LD_VAR 0 2
53904: PUSH
53905: LD_INT 1
53907: ARRAY
53908: PUSH
53909: LD_VAR 0 2
53913: PUSH
53914: LD_INT 2
53916: ARRAY
53917: PUSH
53918: LD_INT 8
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PPUSH
53935: CALL_OW 72
53939: ST_TO_ADDR
// if not vehicles then
53940: LD_VAR 0 1
53944: NOT
53945: IFFALSE 53949
// exit ;
53947: GO 53976
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53949: LD_VAR 0 1
53953: PPUSH
53954: LD_VAR 0 2
53958: PUSH
53959: LD_INT 1
53961: ARRAY
53962: PPUSH
53963: LD_VAR 0 2
53967: PUSH
53968: LD_INT 2
53970: ARRAY
53971: PPUSH
53972: CALL_OW 111
// end ;
53976: LD_VAR 0 3
53980: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53981: LD_INT 0
53983: PPUSH
53984: PPUSH
53985: PPUSH
// if not side or not area then
53986: LD_VAR 0 1
53990: NOT
53991: IFTRUE 54000
53993: PUSH
53994: LD_VAR 0 2
53998: NOT
53999: OR
54000: IFFALSE 54004
// exit ;
54002: GO 54123
// tmp := AreaToList ( area , 0 ) ;
54004: LD_ADDR_VAR 0 5
54008: PUSH
54009: LD_VAR 0 2
54013: PPUSH
54014: LD_INT 0
54016: PPUSH
54017: CALL_OW 517
54021: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54022: LD_ADDR_VAR 0 4
54026: PUSH
54027: DOUBLE
54028: LD_INT 1
54030: DEC
54031: ST_TO_ADDR
54032: LD_VAR 0 5
54036: PUSH
54037: LD_INT 1
54039: ARRAY
54040: PUSH
54041: FOR_TO
54042: IFFALSE 54121
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54044: LD_VAR 0 5
54048: PUSH
54049: LD_INT 1
54051: ARRAY
54052: PUSH
54053: LD_VAR 0 4
54057: ARRAY
54058: PPUSH
54059: LD_VAR 0 5
54063: PUSH
54064: LD_INT 2
54066: ARRAY
54067: PUSH
54068: LD_VAR 0 4
54072: ARRAY
54073: PPUSH
54074: CALL_OW 351
54078: IFFALSE 54119
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54080: LD_VAR 0 5
54084: PUSH
54085: LD_INT 1
54087: ARRAY
54088: PUSH
54089: LD_VAR 0 4
54093: ARRAY
54094: PPUSH
54095: LD_VAR 0 5
54099: PUSH
54100: LD_INT 2
54102: ARRAY
54103: PUSH
54104: LD_VAR 0 4
54108: ARRAY
54109: PPUSH
54110: LD_VAR 0 1
54114: PPUSH
54115: CALL_OW 244
// end ;
54119: GO 54041
54121: POP
54122: POP
// end ;
54123: LD_VAR 0 3
54127: RET
// export function UniqueArray ( array ) ; var i ; begin
54128: LD_INT 0
54130: PPUSH
54131: PPUSH
// result := [ ] ;
54132: LD_ADDR_VAR 0 2
54136: PUSH
54137: EMPTY
54138: ST_TO_ADDR
// if not array then
54139: LD_VAR 0 1
54143: NOT
54144: IFFALSE 54148
// exit ;
54146: GO 54209
// for i := 1 to array do
54148: LD_ADDR_VAR 0 3
54152: PUSH
54153: DOUBLE
54154: LD_INT 1
54156: DEC
54157: ST_TO_ADDR
54158: LD_VAR 0 1
54162: PUSH
54163: FOR_TO
54164: IFFALSE 54207
// if not array [ i ] in result then
54166: LD_VAR 0 1
54170: PUSH
54171: LD_VAR 0 3
54175: ARRAY
54176: PUSH
54177: LD_VAR 0 2
54181: IN
54182: NOT
54183: IFFALSE 54205
// result := Join ( result , i ) ;
54185: LD_ADDR_VAR 0 2
54189: PUSH
54190: LD_VAR 0 2
54194: PPUSH
54195: LD_VAR 0 3
54199: PPUSH
54200: CALL 48860 0 2
54204: ST_TO_ADDR
54205: GO 54163
54207: POP
54208: POP
// end ; end_of_file
54209: LD_VAR 0 2
54213: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54214: LD_VAR 0 1
54218: PUSH
54219: LD_INT 200
54221: DOUBLE
54222: GREATEREQUAL
54223: IFFALSE 54231
54225: LD_INT 299
54227: DOUBLE
54228: LESSEQUAL
54229: IFTRUE 54233
54231: GO 54265
54233: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54234: LD_VAR 0 1
54238: PPUSH
54239: LD_VAR 0 2
54243: PPUSH
54244: LD_VAR 0 3
54248: PPUSH
54249: LD_VAR 0 4
54253: PPUSH
54254: LD_VAR 0 5
54258: PPUSH
54259: CALL 55127 0 5
54263: GO 54342
54265: LD_INT 300
54267: DOUBLE
54268: GREATEREQUAL
54269: IFFALSE 54277
54271: LD_INT 399
54273: DOUBLE
54274: LESSEQUAL
54275: IFTRUE 54279
54277: GO 54341
54279: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54280: LD_VAR 0 1
54284: PPUSH
54285: LD_VAR 0 2
54289: PPUSH
54290: LD_VAR 0 3
54294: PPUSH
54295: LD_VAR 0 4
54299: PPUSH
54300: LD_VAR 0 5
54304: PPUSH
54305: LD_VAR 0 6
54309: PPUSH
54310: LD_VAR 0 7
54314: PPUSH
54315: LD_VAR 0 8
54319: PPUSH
54320: LD_VAR 0 9
54324: PPUSH
54325: LD_VAR 0 10
54329: PPUSH
54330: LD_VAR 0 11
54334: PPUSH
54335: CALL 63129 0 11
54339: GO 54342
54341: POP
// end ;
54342: PPOPN 11
54344: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54345: LD_VAR 0 1
54349: PPUSH
54350: LD_VAR 0 2
54354: PPUSH
54355: LD_VAR 0 3
54359: PPUSH
54360: LD_VAR 0 4
54364: PPUSH
54365: LD_VAR 0 5
54369: PPUSH
54370: CALL 54427 0 5
// end ; end_of_file
54374: PPOPN 5
54376: END
// export function SOS_UnitDestroyed ( un ) ; begin
54377: LD_INT 0
54379: PPUSH
// ComRadiation ( un ) ;
54380: LD_VAR 0 1
54384: PPUSH
54385: CALL 55547 0 1
// end ;
54389: LD_VAR 0 2
54393: RET
// export function SOS_UnitKamikazed ( un ) ; begin
54394: LD_INT 0
54396: PPUSH
// ComRadiation ( un ) ;
54397: LD_VAR 0 1
54401: PPUSH
54402: CALL 55547 0 1
// end ;
54406: LD_VAR 0 2
54410: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
54411: LD_INT 0
54413: PPUSH
// end ;
54414: LD_VAR 0 4
54418: RET
// export function SOS_Command ( cmd ) ; begin
54419: LD_INT 0
54421: PPUSH
// end ;
54422: LD_VAR 0 2
54426: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
54427: LD_INT 0
54429: PPUSH
// end ;
54430: LD_VAR 0 6
54434: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
54435: LD_INT 0
54437: PPUSH
54438: PPUSH
54439: PPUSH
54440: PPUSH
54441: PPUSH
// if not vehicle or not factory then
54442: LD_VAR 0 1
54446: NOT
54447: IFTRUE 54456
54449: PUSH
54450: LD_VAR 0 2
54454: NOT
54455: OR
54456: IFFALSE 54460
// exit ;
54458: GO 55122
// weapon := GetWeapon ( vehicle ) ;
54460: LD_ADDR_VAR 0 7
54464: PUSH
54465: LD_VAR 0 1
54469: PPUSH
54470: CALL_OW 264
54474: ST_TO_ADDR
// if weapon = ar_miner then
54475: LD_VAR 0 7
54479: PUSH
54480: LD_INT 81
54482: EQUAL
54483: IFFALSE 54540
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
54485: LD_ADDR_EXP 56
54489: PUSH
54490: LD_EXP 56
54494: PPUSH
54495: LD_EXP 56
54499: PUSH
54500: LD_INT 1
54502: PLUS
54503: PPUSH
54504: LD_VAR 0 1
54508: PPUSH
54509: CALL_OW 1
54513: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54514: LD_ADDR_EXP 57
54518: PUSH
54519: LD_EXP 57
54523: PPUSH
54524: LD_EXP 57
54528: PUSH
54529: LD_INT 1
54531: PLUS
54532: PPUSH
54533: EMPTY
54534: PPUSH
54535: CALL_OW 1
54539: ST_TO_ADDR
// end ; if not factoryWaypoints then
54540: LD_EXP 60
54544: NOT
54545: IFFALSE 54549
// exit ;
54547: GO 55122
// for i := 1 to Count ( factoryWaypoints ) do
54549: LD_ADDR_VAR 0 4
54553: PUSH
54554: DOUBLE
54555: LD_INT 1
54557: DEC
54558: ST_TO_ADDR
54559: LD_EXP 60
54563: PPUSH
54564: CALL 12894 0 1
54568: PUSH
54569: FOR_TO
54570: IFFALSE 55120
// if factoryWaypoints [ i ] [ 2 ] = factory then
54572: LD_EXP 60
54576: PUSH
54577: LD_VAR 0 4
54581: ARRAY
54582: PUSH
54583: LD_INT 2
54585: ARRAY
54586: PUSH
54587: LD_VAR 0 2
54591: EQUAL
54592: IFFALSE 55118
// begin if GetControl ( vehicle ) = control_manual then
54594: LD_VAR 0 1
54598: PPUSH
54599: CALL_OW 263
54603: PUSH
54604: LD_INT 1
54606: EQUAL
54607: IFFALSE 54971
// begin driver := IsDrivenBy ( vehicle ) ;
54609: LD_ADDR_VAR 0 5
54613: PUSH
54614: LD_VAR 0 1
54618: PPUSH
54619: CALL_OW 311
54623: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
54624: LD_VAR 0 5
54628: PUSH
54629: LD_EXP 61
54633: IN
54634: IFTRUE 54648
54636: PUSH
54637: LD_VAR 0 1
54641: PUSH
54642: LD_EXP 61
54646: IN
54647: OR
54648: IFFALSE 54654
// exit ;
54650: POP
54651: POP
54652: GO 55122
// if not HasTask ( driver ) then
54654: LD_VAR 0 5
54658: PPUSH
54659: CALL_OW 314
54663: NOT
54664: IFFALSE 54969
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
54666: LD_ADDR_EXP 61
54670: PUSH
54671: LD_EXP 61
54675: PPUSH
54676: LD_VAR 0 5
54680: PPUSH
54681: CALL 48860 0 2
54685: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
54686: LD_ADDR_EXP 61
54690: PUSH
54691: LD_EXP 61
54695: PPUSH
54696: LD_VAR 0 1
54700: PPUSH
54701: CALL 48860 0 2
54705: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54706: LD_ADDR_VAR 0 6
54710: PUSH
54711: LD_EXP 60
54715: PUSH
54716: LD_VAR 0 4
54720: ARRAY
54721: PUSH
54722: LD_INT 3
54724: ARRAY
54725: PPUSH
54726: LD_EXP 60
54730: PUSH
54731: LD_VAR 0 4
54735: ARRAY
54736: PUSH
54737: LD_INT 4
54739: ARRAY
54740: PPUSH
54741: CALL_OW 428
54745: ST_TO_ADDR
// if hex then
54746: LD_VAR 0 6
54750: IFFALSE 54768
// ComMoveUnit ( driver , hex ) else
54752: LD_VAR 0 5
54756: PPUSH
54757: LD_VAR 0 6
54761: PPUSH
54762: CALL_OW 112
54766: GO 54852
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54768: LD_VAR 0 1
54772: PPUSH
54773: LD_EXP 60
54777: PUSH
54778: LD_VAR 0 4
54782: ARRAY
54783: PUSH
54784: LD_INT 3
54786: ARRAY
54787: PPUSH
54788: LD_EXP 60
54792: PUSH
54793: LD_VAR 0 4
54797: ARRAY
54798: PUSH
54799: LD_INT 4
54801: ARRAY
54802: PPUSH
54803: CALL_OW 297
54807: PUSH
54808: LD_INT 0
54810: GREATER
54811: IFFALSE 54852
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54813: LD_VAR 0 5
54817: PPUSH
54818: LD_EXP 60
54822: PUSH
54823: LD_VAR 0 4
54827: ARRAY
54828: PUSH
54829: LD_INT 3
54831: ARRAY
54832: PPUSH
54833: LD_EXP 60
54837: PUSH
54838: LD_VAR 0 4
54842: ARRAY
54843: PUSH
54844: LD_INT 4
54846: ARRAY
54847: PPUSH
54848: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54852: LD_VAR 0 5
54856: PPUSH
54857: CALL_OW 181
// if Multiplayer then
54861: LD_OWVAR 4
54865: IFFALSE 54914
// begin repeat wait ( 10 ) ;
54867: LD_INT 10
54869: PPUSH
54870: CALL_OW 67
// until not IsInUnit ( driver ) ;
54874: LD_VAR 0 5
54878: PPUSH
54879: CALL_OW 310
54883: NOT
54884: IFFALSE 54867
// if not HasTask ( driver ) then
54886: LD_VAR 0 5
54890: PPUSH
54891: CALL_OW 314
54895: NOT
54896: IFFALSE 54912
// ComEnterUnit ( driver , factory ) ;
54898: LD_VAR 0 5
54902: PPUSH
54903: LD_VAR 0 2
54907: PPUSH
54908: CALL_OW 120
// end else
54912: GO 54928
// AddComEnterUnit ( driver , factory ) ;
54914: LD_VAR 0 5
54918: PPUSH
54919: LD_VAR 0 2
54923: PPUSH
54924: CALL_OW 180
// wait ( 0 0$1 ) ;
54928: LD_INT 35
54930: PPUSH
54931: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54935: LD_ADDR_EXP 61
54939: PUSH
54940: LD_EXP 61
54944: PUSH
54945: LD_VAR 0 5
54949: DIFF
54950: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54951: LD_ADDR_EXP 61
54955: PUSH
54956: LD_EXP 61
54960: PUSH
54961: LD_VAR 0 1
54965: DIFF
54966: ST_TO_ADDR
// break ;
54967: GO 55120
// end ; end else
54969: GO 55118
// if GetControl ( vehicle ) = control_remote then
54971: LD_VAR 0 1
54975: PPUSH
54976: CALL_OW 263
54980: PUSH
54981: LD_INT 2
54983: EQUAL
54984: IFFALSE 55070
// begin wait ( 0 0$2 ) ;
54986: LD_INT 70
54988: PPUSH
54989: CALL_OW 67
// repeat wait ( 10 ) ;
54993: LD_INT 10
54995: PPUSH
54996: CALL_OW 67
// Connect ( vehicle ) ;
55000: LD_VAR 0 1
55004: PPUSH
55005: CALL 19172 0 1
// until IsControledBy ( vehicle ) ;
55009: LD_VAR 0 1
55013: PPUSH
55014: CALL_OW 312
55018: IFFALSE 54993
// wait ( 10 ) ;
55020: LD_INT 10
55022: PPUSH
55023: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55027: LD_VAR 0 1
55031: PPUSH
55032: LD_EXP 60
55036: PUSH
55037: LD_VAR 0 4
55041: ARRAY
55042: PUSH
55043: LD_INT 3
55045: ARRAY
55046: PPUSH
55047: LD_EXP 60
55051: PUSH
55052: LD_VAR 0 4
55056: ARRAY
55057: PUSH
55058: LD_INT 4
55060: ARRAY
55061: PPUSH
55062: CALL_OW 111
// break ;
55066: GO 55120
// end else
55068: GO 55118
// begin wait ( 0 0$3 ) ;
55070: LD_INT 105
55072: PPUSH
55073: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55077: LD_VAR 0 1
55081: PPUSH
55082: LD_EXP 60
55086: PUSH
55087: LD_VAR 0 4
55091: ARRAY
55092: PUSH
55093: LD_INT 3
55095: ARRAY
55096: PPUSH
55097: LD_EXP 60
55101: PUSH
55102: LD_VAR 0 4
55106: ARRAY
55107: PUSH
55108: LD_INT 4
55110: ARRAY
55111: PPUSH
55112: CALL_OW 111
// break ;
55116: GO 55120
// end ; end ;
55118: GO 54569
55120: POP
55121: POP
// end ;
55122: LD_VAR 0 3
55126: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55127: LD_INT 0
55129: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55130: LD_VAR 0 1
55134: PUSH
55135: LD_INT 250
55137: EQUAL
55138: IFFALSE 55155
55140: PUSH
55141: LD_VAR 0 2
55145: PPUSH
55146: CALL_OW 264
55150: PUSH
55151: LD_INT 81
55153: EQUAL
55154: AND
55155: IFFALSE 55176
// MinerPlaceMine ( unit , x , y ) ;
55157: LD_VAR 0 2
55161: PPUSH
55162: LD_VAR 0 4
55166: PPUSH
55167: LD_VAR 0 5
55171: PPUSH
55172: CALL 58457 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55176: LD_VAR 0 1
55180: PUSH
55181: LD_INT 251
55183: EQUAL
55184: IFFALSE 55201
55186: PUSH
55187: LD_VAR 0 2
55191: PPUSH
55192: CALL_OW 264
55196: PUSH
55197: LD_INT 81
55199: EQUAL
55200: AND
55201: IFFALSE 55222
// MinerDetonateMine ( unit , x , y ) ;
55203: LD_VAR 0 2
55207: PPUSH
55208: LD_VAR 0 4
55212: PPUSH
55213: LD_VAR 0 5
55217: PPUSH
55218: CALL 58864 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55222: LD_VAR 0 1
55226: PUSH
55227: LD_INT 252
55229: EQUAL
55230: IFFALSE 55247
55232: PUSH
55233: LD_VAR 0 2
55237: PPUSH
55238: CALL_OW 264
55242: PUSH
55243: LD_INT 81
55245: EQUAL
55246: AND
55247: IFFALSE 55268
// MinerCreateMinefield ( unit , x , y ) ;
55249: LD_VAR 0 2
55253: PPUSH
55254: LD_VAR 0 4
55258: PPUSH
55259: LD_VAR 0 5
55263: PPUSH
55264: CALL 59096 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55268: LD_VAR 0 1
55272: PUSH
55273: LD_INT 253
55275: EQUAL
55276: IFFALSE 55293
55278: PUSH
55279: LD_VAR 0 2
55283: PPUSH
55284: CALL_OW 257
55288: PUSH
55289: LD_INT 5
55291: EQUAL
55292: AND
55293: IFFALSE 55314
// ComBinocular ( unit , x , y ) ;
55295: LD_VAR 0 2
55299: PPUSH
55300: LD_VAR 0 4
55304: PPUSH
55305: LD_VAR 0 5
55309: PPUSH
55310: CALL 59471 0 3
// if selectedUnit then
55314: LD_VAR 0 3
55318: IFFALSE 55378
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55320: LD_VAR 0 1
55324: PUSH
55325: LD_INT 254
55327: EQUAL
55328: IFFALSE 55345
55330: PUSH
55331: LD_VAR 0 2
55335: PPUSH
55336: CALL_OW 264
55340: PUSH
55341: LD_INT 99
55343: EQUAL
55344: AND
55345: IFFALSE 55362
55347: PUSH
55348: LD_VAR 0 3
55352: PPUSH
55353: CALL_OW 263
55357: PUSH
55358: LD_INT 3
55360: EQUAL
55361: AND
55362: IFFALSE 55378
// HackDestroyVehicle ( unit , selectedUnit ) ;
55364: LD_VAR 0 2
55368: PPUSH
55369: LD_VAR 0 3
55373: PPUSH
55374: CALL 57668 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55378: LD_VAR 0 1
55382: PUSH
55383: LD_INT 255
55385: EQUAL
55386: IFFALSE 55410
55388: PUSH
55389: LD_VAR 0 2
55393: PPUSH
55394: CALL_OW 264
55398: PUSH
55399: LD_INT 14
55401: PUSH
55402: LD_INT 53
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: IN
55409: AND
55410: IFFALSE 55428
55412: PUSH
55413: LD_VAR 0 4
55417: PPUSH
55418: LD_VAR 0 5
55422: PPUSH
55423: CALL_OW 488
55427: AND
55428: IFFALSE 55452
// CutTreeXYR ( unit , x , y , 12 ) ;
55430: LD_VAR 0 2
55434: PPUSH
55435: LD_VAR 0 4
55439: PPUSH
55440: LD_VAR 0 5
55444: PPUSH
55445: LD_INT 12
55447: PPUSH
55448: CALL 55643 0 4
// if cmd = 256 then
55452: LD_VAR 0 1
55456: PUSH
55457: LD_INT 256
55459: EQUAL
55460: IFFALSE 55481
// SetFactoryWaypoint ( unit , x , y ) ;
55462: LD_VAR 0 2
55466: PPUSH
55467: LD_VAR 0 4
55471: PPUSH
55472: LD_VAR 0 5
55476: PPUSH
55477: CALL 63137 0 3
// if cmd = 257 then
55481: LD_VAR 0 1
55485: PUSH
55486: LD_INT 257
55488: EQUAL
55489: IFFALSE 55510
// SetWarehouseGatheringPoint ( unit , x , y ) ;
55491: LD_VAR 0 2
55495: PPUSH
55496: LD_VAR 0 4
55500: PPUSH
55501: LD_VAR 0 5
55505: PPUSH
55506: CALL 63633 0 3
// if cmd = 258 then
55510: LD_VAR 0 1
55514: PUSH
55515: LD_INT 258
55517: EQUAL
55518: IFFALSE 55542
// BurnTreeXYR ( unit , x , y , 8 ) ;
55520: LD_VAR 0 2
55524: PPUSH
55525: LD_VAR 0 4
55529: PPUSH
55530: LD_VAR 0 5
55534: PPUSH
55535: LD_INT 8
55537: PPUSH
55538: CALL 56043 0 4
// end ;
55542: LD_VAR 0 6
55546: RET
// export function ComRadiation ( un ) ; var eff ; begin
55547: LD_INT 0
55549: PPUSH
55550: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
55551: LD_VAR 0 1
55555: PPUSH
55556: CALL_OW 264
55560: PUSH
55561: LD_INT 91
55563: NONEQUAL
55564: IFFALSE 55568
// exit ;
55566: GO 55638
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55568: LD_INT 68
55570: PPUSH
55571: LD_VAR 0 1
55575: PPUSH
55576: CALL_OW 255
55580: PPUSH
55581: CALL_OW 321
55585: PUSH
55586: LD_INT 2
55588: EQUAL
55589: IFFALSE 55601
// eff := 50 else
55591: LD_ADDR_VAR 0 3
55595: PUSH
55596: LD_INT 50
55598: ST_TO_ADDR
55599: GO 55609
// eff := 25 ;
55601: LD_ADDR_VAR 0 3
55605: PUSH
55606: LD_INT 25
55608: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55609: LD_VAR 0 1
55613: PPUSH
55614: CALL_OW 250
55618: PPUSH
55619: LD_VAR 0 1
55623: PPUSH
55624: CALL_OW 251
55628: PPUSH
55629: LD_VAR 0 3
55633: PPUSH
55634: CALL_OW 495
// end ;
55638: LD_VAR 0 2
55642: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55643: LD_INT 0
55645: PPUSH
55646: PPUSH
55647: PPUSH
55648: PPUSH
55649: PPUSH
55650: PPUSH
55651: PPUSH
55652: PPUSH
55653: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
55654: LD_VAR 0 1
55658: PPUSH
55659: CALL_OW 302
55663: NOT
55664: IFTRUE 55683
55666: PUSH
55667: LD_VAR 0 2
55671: PPUSH
55672: LD_VAR 0 3
55676: PPUSH
55677: CALL_OW 488
55681: NOT
55682: OR
55683: IFTRUE 55692
55685: PUSH
55686: LD_VAR 0 4
55690: NOT
55691: OR
55692: IFFALSE 55696
// exit ;
55694: GO 56038
// list := [ ] ;
55696: LD_ADDR_VAR 0 13
55700: PUSH
55701: EMPTY
55702: ST_TO_ADDR
// if x - r < 0 then
55703: LD_VAR 0 2
55707: PUSH
55708: LD_VAR 0 4
55712: MINUS
55713: PUSH
55714: LD_INT 0
55716: LESS
55717: IFFALSE 55729
// min_x := 0 else
55719: LD_ADDR_VAR 0 7
55723: PUSH
55724: LD_INT 0
55726: ST_TO_ADDR
55727: GO 55745
// min_x := x - r ;
55729: LD_ADDR_VAR 0 7
55733: PUSH
55734: LD_VAR 0 2
55738: PUSH
55739: LD_VAR 0 4
55743: MINUS
55744: ST_TO_ADDR
// if y - r < 0 then
55745: LD_VAR 0 3
55749: PUSH
55750: LD_VAR 0 4
55754: MINUS
55755: PUSH
55756: LD_INT 0
55758: LESS
55759: IFFALSE 55771
// min_y := 0 else
55761: LD_ADDR_VAR 0 8
55765: PUSH
55766: LD_INT 0
55768: ST_TO_ADDR
55769: GO 55787
// min_y := y - r ;
55771: LD_ADDR_VAR 0 8
55775: PUSH
55776: LD_VAR 0 3
55780: PUSH
55781: LD_VAR 0 4
55785: MINUS
55786: ST_TO_ADDR
// max_x := x + r ;
55787: LD_ADDR_VAR 0 9
55791: PUSH
55792: LD_VAR 0 2
55796: PUSH
55797: LD_VAR 0 4
55801: PLUS
55802: ST_TO_ADDR
// max_y := y + r ;
55803: LD_ADDR_VAR 0 10
55807: PUSH
55808: LD_VAR 0 3
55812: PUSH
55813: LD_VAR 0 4
55817: PLUS
55818: ST_TO_ADDR
// for _x = min_x to max_x do
55819: LD_ADDR_VAR 0 11
55823: PUSH
55824: DOUBLE
55825: LD_VAR 0 7
55829: DEC
55830: ST_TO_ADDR
55831: LD_VAR 0 9
55835: PUSH
55836: FOR_TO
55837: IFFALSE 55956
// for _y = min_y to max_y do
55839: LD_ADDR_VAR 0 12
55843: PUSH
55844: DOUBLE
55845: LD_VAR 0 8
55849: DEC
55850: ST_TO_ADDR
55851: LD_VAR 0 10
55855: PUSH
55856: FOR_TO
55857: IFFALSE 55952
// begin if not ValidHex ( _x , _y ) then
55859: LD_VAR 0 11
55863: PPUSH
55864: LD_VAR 0 12
55868: PPUSH
55869: CALL_OW 488
55873: NOT
55874: IFFALSE 55878
// continue ;
55876: GO 55856
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55878: LD_VAR 0 11
55882: PPUSH
55883: LD_VAR 0 12
55887: PPUSH
55888: CALL_OW 351
55892: IFFALSE 55910
55894: PUSH
55895: LD_VAR 0 11
55899: PPUSH
55900: LD_VAR 0 12
55904: PPUSH
55905: CALL_OW 554
55909: AND
55910: IFFALSE 55950
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55912: LD_ADDR_VAR 0 13
55916: PUSH
55917: LD_VAR 0 13
55921: PPUSH
55922: LD_VAR 0 13
55926: PUSH
55927: LD_INT 1
55929: PLUS
55930: PPUSH
55931: LD_VAR 0 11
55935: PUSH
55936: LD_VAR 0 12
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PPUSH
55945: CALL_OW 2
55949: ST_TO_ADDR
// end ;
55950: GO 55856
55952: POP
55953: POP
55954: GO 55836
55956: POP
55957: POP
// if not list then
55958: LD_VAR 0 13
55962: NOT
55963: IFFALSE 55967
// exit ;
55965: GO 56038
// for i in list do
55967: LD_ADDR_VAR 0 6
55971: PUSH
55972: LD_VAR 0 13
55976: PUSH
55977: FOR_IN
55978: IFFALSE 56036
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55980: LD_VAR 0 1
55984: PPUSH
55985: LD_STRING M
55987: PUSH
55988: LD_VAR 0 6
55992: PUSH
55993: LD_INT 1
55995: ARRAY
55996: PUSH
55997: LD_VAR 0 6
56001: PUSH
56002: LD_INT 2
56004: ARRAY
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: PUSH
56027: EMPTY
56028: LIST
56029: PPUSH
56030: CALL_OW 447
56034: GO 55977
56036: POP
56037: POP
// end ;
56038: LD_VAR 0 5
56042: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56043: LD_INT 0
56045: PPUSH
56046: PPUSH
56047: PPUSH
56048: PPUSH
56049: PPUSH
56050: PPUSH
56051: PPUSH
56052: PPUSH
56053: PPUSH
56054: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56055: LD_VAR 0 1
56059: PPUSH
56060: CALL_OW 302
56064: NOT
56065: IFTRUE 56084
56067: PUSH
56068: LD_VAR 0 2
56072: PPUSH
56073: LD_VAR 0 3
56077: PPUSH
56078: CALL_OW 488
56082: NOT
56083: OR
56084: IFTRUE 56093
56086: PUSH
56087: LD_VAR 0 4
56091: NOT
56092: OR
56093: IFFALSE 56097
// exit ;
56095: GO 56614
// list := [ ] ;
56097: LD_ADDR_VAR 0 13
56101: PUSH
56102: EMPTY
56103: ST_TO_ADDR
// if x - r < 0 then
56104: LD_VAR 0 2
56108: PUSH
56109: LD_VAR 0 4
56113: MINUS
56114: PUSH
56115: LD_INT 0
56117: LESS
56118: IFFALSE 56130
// min_x := 0 else
56120: LD_ADDR_VAR 0 7
56124: PUSH
56125: LD_INT 0
56127: ST_TO_ADDR
56128: GO 56146
// min_x := x - r ;
56130: LD_ADDR_VAR 0 7
56134: PUSH
56135: LD_VAR 0 2
56139: PUSH
56140: LD_VAR 0 4
56144: MINUS
56145: ST_TO_ADDR
// if y - r < 0 then
56146: LD_VAR 0 3
56150: PUSH
56151: LD_VAR 0 4
56155: MINUS
56156: PUSH
56157: LD_INT 0
56159: LESS
56160: IFFALSE 56172
// min_y := 0 else
56162: LD_ADDR_VAR 0 8
56166: PUSH
56167: LD_INT 0
56169: ST_TO_ADDR
56170: GO 56188
// min_y := y - r ;
56172: LD_ADDR_VAR 0 8
56176: PUSH
56177: LD_VAR 0 3
56181: PUSH
56182: LD_VAR 0 4
56186: MINUS
56187: ST_TO_ADDR
// max_x := x + r ;
56188: LD_ADDR_VAR 0 9
56192: PUSH
56193: LD_VAR 0 2
56197: PUSH
56198: LD_VAR 0 4
56202: PLUS
56203: ST_TO_ADDR
// max_y := y + r ;
56204: LD_ADDR_VAR 0 10
56208: PUSH
56209: LD_VAR 0 3
56213: PUSH
56214: LD_VAR 0 4
56218: PLUS
56219: ST_TO_ADDR
// for _x = min_x to max_x do
56220: LD_ADDR_VAR 0 11
56224: PUSH
56225: DOUBLE
56226: LD_VAR 0 7
56230: DEC
56231: ST_TO_ADDR
56232: LD_VAR 0 9
56236: PUSH
56237: FOR_TO
56238: IFFALSE 56357
// for _y = min_y to max_y do
56240: LD_ADDR_VAR 0 12
56244: PUSH
56245: DOUBLE
56246: LD_VAR 0 8
56250: DEC
56251: ST_TO_ADDR
56252: LD_VAR 0 10
56256: PUSH
56257: FOR_TO
56258: IFFALSE 56353
// begin if not ValidHex ( _x , _y ) then
56260: LD_VAR 0 11
56264: PPUSH
56265: LD_VAR 0 12
56269: PPUSH
56270: CALL_OW 488
56274: NOT
56275: IFFALSE 56279
// continue ;
56277: GO 56257
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56279: LD_VAR 0 11
56283: PPUSH
56284: LD_VAR 0 12
56288: PPUSH
56289: CALL_OW 351
56293: IFFALSE 56311
56295: PUSH
56296: LD_VAR 0 11
56300: PPUSH
56301: LD_VAR 0 12
56305: PPUSH
56306: CALL_OW 554
56310: AND
56311: IFFALSE 56351
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56313: LD_ADDR_VAR 0 13
56317: PUSH
56318: LD_VAR 0 13
56322: PPUSH
56323: LD_VAR 0 13
56327: PUSH
56328: LD_INT 1
56330: PLUS
56331: PPUSH
56332: LD_VAR 0 11
56336: PUSH
56337: LD_VAR 0 12
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PPUSH
56346: CALL_OW 2
56350: ST_TO_ADDR
// end ;
56351: GO 56257
56353: POP
56354: POP
56355: GO 56237
56357: POP
56358: POP
// if not list then
56359: LD_VAR 0 13
56363: NOT
56364: IFFALSE 56368
// exit ;
56366: GO 56614
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
56368: LD_ADDR_VAR 0 13
56372: PUSH
56373: LD_VAR 0 1
56377: PPUSH
56378: LD_VAR 0 13
56382: PPUSH
56383: LD_INT 1
56385: PPUSH
56386: LD_INT 1
56388: PPUSH
56389: CALL 16300 0 4
56393: ST_TO_ADDR
// ComStop ( flame ) ;
56394: LD_VAR 0 1
56398: PPUSH
56399: CALL_OW 141
// for i in list do
56403: LD_ADDR_VAR 0 6
56407: PUSH
56408: LD_VAR 0 13
56412: PUSH
56413: FOR_IN
56414: IFFALSE 56445
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
56416: LD_VAR 0 1
56420: PPUSH
56421: LD_VAR 0 6
56425: PUSH
56426: LD_INT 1
56428: ARRAY
56429: PPUSH
56430: LD_VAR 0 6
56434: PUSH
56435: LD_INT 2
56437: ARRAY
56438: PPUSH
56439: CALL_OW 176
56443: GO 56413
56445: POP
56446: POP
// repeat wait ( 0 0$1 ) ;
56447: LD_INT 35
56449: PPUSH
56450: CALL_OW 67
// task := GetTaskList ( flame ) ;
56454: LD_ADDR_VAR 0 14
56458: PUSH
56459: LD_VAR 0 1
56463: PPUSH
56464: CALL_OW 437
56468: ST_TO_ADDR
// if not task then
56469: LD_VAR 0 14
56473: NOT
56474: IFFALSE 56478
// exit ;
56476: GO 56614
// if task [ 1 ] [ 1 ] <> | then
56478: LD_VAR 0 14
56482: PUSH
56483: LD_INT 1
56485: ARRAY
56486: PUSH
56487: LD_INT 1
56489: ARRAY
56490: PUSH
56491: LD_STRING |
56493: NONEQUAL
56494: IFFALSE 56498
// exit ;
56496: GO 56614
// _x := task [ 1 ] [ 2 ] ;
56498: LD_ADDR_VAR 0 11
56502: PUSH
56503: LD_VAR 0 14
56507: PUSH
56508: LD_INT 1
56510: ARRAY
56511: PUSH
56512: LD_INT 2
56514: ARRAY
56515: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
56516: LD_ADDR_VAR 0 12
56520: PUSH
56521: LD_VAR 0 14
56525: PUSH
56526: LD_INT 1
56528: ARRAY
56529: PUSH
56530: LD_INT 3
56532: ARRAY
56533: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
56534: LD_VAR 0 11
56538: PPUSH
56539: LD_VAR 0 12
56543: PPUSH
56544: CALL_OW 351
56548: NOT
56549: IFTRUE 56568
56551: PUSH
56552: LD_VAR 0 11
56556: PPUSH
56557: LD_VAR 0 12
56561: PPUSH
56562: CALL_OW 554
56566: NOT
56567: OR
56568: IFFALSE 56602
// begin task := Delete ( task , 1 ) ;
56570: LD_ADDR_VAR 0 14
56574: PUSH
56575: LD_VAR 0 14
56579: PPUSH
56580: LD_INT 1
56582: PPUSH
56583: CALL_OW 3
56587: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
56588: LD_VAR 0 1
56592: PPUSH
56593: LD_VAR 0 14
56597: PPUSH
56598: CALL_OW 446
// end ; until not HasTask ( flame ) ;
56602: LD_VAR 0 1
56606: PPUSH
56607: CALL_OW 314
56611: NOT
56612: IFFALSE 56447
// end ;
56614: LD_VAR 0 5
56618: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56619: LD_EXP 49
56623: NOT
56624: IFFALSE 56674
56626: GO 56628
56628: DISABLE
// begin initHack := true ;
56629: LD_ADDR_EXP 49
56633: PUSH
56634: LD_INT 1
56636: ST_TO_ADDR
// hackTanks := [ ] ;
56637: LD_ADDR_EXP 50
56641: PUSH
56642: EMPTY
56643: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56644: LD_ADDR_EXP 51
56648: PUSH
56649: EMPTY
56650: ST_TO_ADDR
// hackLimit := 3 ;
56651: LD_ADDR_EXP 52
56655: PUSH
56656: LD_INT 3
56658: ST_TO_ADDR
// hackDist := 12 ;
56659: LD_ADDR_EXP 53
56663: PUSH
56664: LD_INT 12
56666: ST_TO_ADDR
// hackCounter := [ ] ;
56667: LD_ADDR_EXP 54
56671: PUSH
56672: EMPTY
56673: ST_TO_ADDR
// end ;
56674: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56675: LD_EXP 49
56679: IFFALSE 56697
56681: PUSH
56682: LD_INT 34
56684: PUSH
56685: LD_INT 99
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PPUSH
56692: CALL_OW 69
56696: AND
56697: IFFALSE 56950
56699: GO 56701
56701: DISABLE
56702: LD_INT 0
56704: PPUSH
56705: PPUSH
// begin enable ;
56706: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56707: LD_ADDR_VAR 0 1
56711: PUSH
56712: LD_INT 34
56714: PUSH
56715: LD_INT 99
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PPUSH
56722: CALL_OW 69
56726: PUSH
56727: FOR_IN
56728: IFFALSE 56948
// begin if not i in hackTanks then
56730: LD_VAR 0 1
56734: PUSH
56735: LD_EXP 50
56739: IN
56740: NOT
56741: IFFALSE 56824
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56743: LD_ADDR_EXP 50
56747: PUSH
56748: LD_EXP 50
56752: PPUSH
56753: LD_EXP 50
56757: PUSH
56758: LD_INT 1
56760: PLUS
56761: PPUSH
56762: LD_VAR 0 1
56766: PPUSH
56767: CALL_OW 1
56771: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56772: LD_ADDR_EXP 51
56776: PUSH
56777: LD_EXP 51
56781: PPUSH
56782: LD_EXP 51
56786: PUSH
56787: LD_INT 1
56789: PLUS
56790: PPUSH
56791: EMPTY
56792: PPUSH
56793: CALL_OW 1
56797: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56798: LD_ADDR_EXP 54
56802: PUSH
56803: LD_EXP 54
56807: PPUSH
56808: LD_EXP 54
56812: PUSH
56813: LD_INT 1
56815: PLUS
56816: PPUSH
56817: EMPTY
56818: PPUSH
56819: CALL_OW 1
56823: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56824: LD_VAR 0 1
56828: PPUSH
56829: CALL_OW 302
56833: NOT
56834: IFFALSE 56847
// begin HackUnlinkAll ( i ) ;
56836: LD_VAR 0 1
56840: PPUSH
56841: CALL 56953 0 1
// continue ;
56845: GO 56727
// end ; HackCheckCapturedStatus ( i ) ;
56847: LD_VAR 0 1
56851: PPUSH
56852: CALL 57398 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56856: LD_ADDR_VAR 0 2
56860: PUSH
56861: LD_INT 81
56863: PUSH
56864: LD_VAR 0 1
56868: PPUSH
56869: CALL_OW 255
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 33
56880: PUSH
56881: LD_INT 3
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 91
56890: PUSH
56891: LD_VAR 0 1
56895: PUSH
56896: LD_EXP 53
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 50
56908: PUSH
56909: EMPTY
56910: LIST
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: PPUSH
56918: CALL_OW 69
56922: ST_TO_ADDR
// if not tmp then
56923: LD_VAR 0 2
56927: NOT
56928: IFFALSE 56932
// continue ;
56930: GO 56727
// HackLink ( i , tmp ) ;
56932: LD_VAR 0 1
56936: PPUSH
56937: LD_VAR 0 2
56941: PPUSH
56942: CALL 57089 0 2
// end ;
56946: GO 56727
56948: POP
56949: POP
// end ;
56950: PPOPN 2
56952: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56953: LD_INT 0
56955: PPUSH
56956: PPUSH
56957: PPUSH
// if not hack in hackTanks then
56958: LD_VAR 0 1
56962: PUSH
56963: LD_EXP 50
56967: IN
56968: NOT
56969: IFFALSE 56973
// exit ;
56971: GO 57084
// index := GetElementIndex ( hackTanks , hack ) ;
56973: LD_ADDR_VAR 0 4
56977: PUSH
56978: LD_EXP 50
56982: PPUSH
56983: LD_VAR 0 1
56987: PPUSH
56988: CALL 15595 0 2
56992: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56993: LD_EXP 51
56997: PUSH
56998: LD_VAR 0 4
57002: ARRAY
57003: IFFALSE 57084
// begin for i in hackTanksCaptured [ index ] do
57005: LD_ADDR_VAR 0 3
57009: PUSH
57010: LD_EXP 51
57014: PUSH
57015: LD_VAR 0 4
57019: ARRAY
57020: PUSH
57021: FOR_IN
57022: IFFALSE 57048
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57024: LD_VAR 0 3
57028: PUSH
57029: LD_INT 1
57031: ARRAY
57032: PPUSH
57033: LD_VAR 0 3
57037: PUSH
57038: LD_INT 2
57040: ARRAY
57041: PPUSH
57042: CALL_OW 235
57046: GO 57021
57048: POP
57049: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57050: LD_ADDR_EXP 51
57054: PUSH
57055: LD_EXP 51
57059: PPUSH
57060: LD_VAR 0 4
57064: PPUSH
57065: EMPTY
57066: PPUSH
57067: CALL_OW 1
57071: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57072: LD_VAR 0 1
57076: PPUSH
57077: LD_INT 0
57079: PPUSH
57080: CALL_OW 505
// end ; end ;
57084: LD_VAR 0 2
57088: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57089: LD_INT 0
57091: PPUSH
57092: PPUSH
57093: PPUSH
// if not hack in hackTanks or not vehicles then
57094: LD_VAR 0 1
57098: PUSH
57099: LD_EXP 50
57103: IN
57104: NOT
57105: IFTRUE 57114
57107: PUSH
57108: LD_VAR 0 2
57112: NOT
57113: OR
57114: IFFALSE 57118
// exit ;
57116: GO 57393
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57118: LD_ADDR_VAR 0 2
57122: PUSH
57123: LD_VAR 0 1
57127: PPUSH
57128: LD_VAR 0 2
57132: PPUSH
57133: LD_INT 1
57135: PPUSH
57136: LD_INT 1
57138: PPUSH
57139: CALL 16247 0 4
57143: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57144: LD_ADDR_VAR 0 5
57148: PUSH
57149: LD_EXP 50
57153: PPUSH
57154: LD_VAR 0 1
57158: PPUSH
57159: CALL 15595 0 2
57163: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57164: LD_EXP 51
57168: PUSH
57169: LD_VAR 0 5
57173: ARRAY
57174: PUSH
57175: LD_EXP 52
57179: LESS
57180: IFFALSE 57369
// begin for i := 1 to vehicles do
57182: LD_ADDR_VAR 0 4
57186: PUSH
57187: DOUBLE
57188: LD_INT 1
57190: DEC
57191: ST_TO_ADDR
57192: LD_VAR 0 2
57196: PUSH
57197: FOR_TO
57198: IFFALSE 57367
// begin if hackTanksCaptured [ index ] = hackLimit then
57200: LD_EXP 51
57204: PUSH
57205: LD_VAR 0 5
57209: ARRAY
57210: PUSH
57211: LD_EXP 52
57215: EQUAL
57216: IFFALSE 57220
// break ;
57218: GO 57367
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57220: LD_ADDR_EXP 54
57224: PUSH
57225: LD_EXP 54
57229: PPUSH
57230: LD_VAR 0 5
57234: PPUSH
57235: LD_EXP 54
57239: PUSH
57240: LD_VAR 0 5
57244: ARRAY
57245: PUSH
57246: LD_INT 1
57248: PLUS
57249: PPUSH
57250: CALL_OW 1
57254: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57255: LD_ADDR_EXP 51
57259: PUSH
57260: LD_EXP 51
57264: PPUSH
57265: LD_VAR 0 5
57269: PUSH
57270: LD_EXP 51
57274: PUSH
57275: LD_VAR 0 5
57279: ARRAY
57280: PUSH
57281: LD_INT 1
57283: PLUS
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PPUSH
57289: LD_VAR 0 2
57293: PUSH
57294: LD_VAR 0 4
57298: ARRAY
57299: PUSH
57300: LD_VAR 0 2
57304: PUSH
57305: LD_VAR 0 4
57309: ARRAY
57310: PPUSH
57311: CALL_OW 255
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PPUSH
57320: CALL 15812 0 3
57324: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57325: LD_VAR 0 2
57329: PUSH
57330: LD_VAR 0 4
57334: ARRAY
57335: PPUSH
57336: LD_VAR 0 1
57340: PPUSH
57341: CALL_OW 255
57345: PPUSH
57346: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
57350: LD_VAR 0 2
57354: PUSH
57355: LD_VAR 0 4
57359: ARRAY
57360: PPUSH
57361: CALL_OW 141
// end ;
57365: GO 57197
57367: POP
57368: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57369: LD_VAR 0 1
57373: PPUSH
57374: LD_EXP 51
57378: PUSH
57379: LD_VAR 0 5
57383: ARRAY
57384: PUSH
57385: LD_INT 0
57387: PLUS
57388: PPUSH
57389: CALL_OW 505
// end ;
57393: LD_VAR 0 3
57397: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57398: LD_INT 0
57400: PPUSH
57401: PPUSH
57402: PPUSH
57403: PPUSH
// if not hack in hackTanks then
57404: LD_VAR 0 1
57408: PUSH
57409: LD_EXP 50
57413: IN
57414: NOT
57415: IFFALSE 57419
// exit ;
57417: GO 57663
// index := GetElementIndex ( hackTanks , hack ) ;
57419: LD_ADDR_VAR 0 4
57423: PUSH
57424: LD_EXP 50
57428: PPUSH
57429: LD_VAR 0 1
57433: PPUSH
57434: CALL 15595 0 2
57438: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57439: LD_ADDR_VAR 0 3
57443: PUSH
57444: DOUBLE
57445: LD_EXP 51
57449: PUSH
57450: LD_VAR 0 4
57454: ARRAY
57455: INC
57456: ST_TO_ADDR
57457: LD_INT 1
57459: PUSH
57460: FOR_DOWNTO
57461: IFFALSE 57637
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57463: LD_ADDR_VAR 0 5
57467: PUSH
57468: LD_EXP 51
57472: PUSH
57473: LD_VAR 0 4
57477: ARRAY
57478: PUSH
57479: LD_VAR 0 3
57483: ARRAY
57484: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57485: LD_VAR 0 5
57489: PUSH
57490: LD_INT 1
57492: ARRAY
57493: PPUSH
57494: CALL_OW 302
57498: NOT
57499: IFTRUE 57527
57501: PUSH
57502: LD_VAR 0 5
57506: PUSH
57507: LD_INT 1
57509: ARRAY
57510: PPUSH
57511: CALL_OW 255
57515: PUSH
57516: LD_VAR 0 1
57520: PPUSH
57521: CALL_OW 255
57525: NONEQUAL
57526: OR
57527: IFFALSE 57635
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
57529: LD_VAR 0 5
57533: PUSH
57534: LD_INT 1
57536: ARRAY
57537: PPUSH
57538: CALL_OW 305
57542: IFFALSE 57570
57544: PUSH
57545: LD_VAR 0 5
57549: PUSH
57550: LD_INT 1
57552: ARRAY
57553: PPUSH
57554: CALL_OW 255
57558: PUSH
57559: LD_VAR 0 1
57563: PPUSH
57564: CALL_OW 255
57568: EQUAL
57569: AND
57570: IFFALSE 57594
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
57572: LD_VAR 0 5
57576: PUSH
57577: LD_INT 1
57579: ARRAY
57580: PPUSH
57581: LD_VAR 0 5
57585: PUSH
57586: LD_INT 2
57588: ARRAY
57589: PPUSH
57590: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
57594: LD_ADDR_EXP 51
57598: PUSH
57599: LD_EXP 51
57603: PPUSH
57604: LD_VAR 0 4
57608: PPUSH
57609: LD_EXP 51
57613: PUSH
57614: LD_VAR 0 4
57618: ARRAY
57619: PPUSH
57620: LD_VAR 0 3
57624: PPUSH
57625: CALL_OW 3
57629: PPUSH
57630: CALL_OW 1
57634: ST_TO_ADDR
// end ; end ;
57635: GO 57460
57637: POP
57638: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57639: LD_VAR 0 1
57643: PPUSH
57644: LD_EXP 51
57648: PUSH
57649: LD_VAR 0 4
57653: ARRAY
57654: PUSH
57655: LD_INT 0
57657: PLUS
57658: PPUSH
57659: CALL_OW 505
// end ;
57663: LD_VAR 0 2
57667: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57668: LD_INT 0
57670: PPUSH
57671: PPUSH
57672: PPUSH
57673: PPUSH
// if not hack in hackTanks then
57674: LD_VAR 0 1
57678: PUSH
57679: LD_EXP 50
57683: IN
57684: NOT
57685: IFFALSE 57689
// exit ;
57687: GO 57774
// index := GetElementIndex ( hackTanks , hack ) ;
57689: LD_ADDR_VAR 0 5
57693: PUSH
57694: LD_EXP 50
57698: PPUSH
57699: LD_VAR 0 1
57703: PPUSH
57704: CALL 15595 0 2
57708: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57709: LD_ADDR_VAR 0 4
57713: PUSH
57714: DOUBLE
57715: LD_INT 1
57717: DEC
57718: ST_TO_ADDR
57719: LD_EXP 51
57723: PUSH
57724: LD_VAR 0 5
57728: ARRAY
57729: PUSH
57730: FOR_TO
57731: IFFALSE 57772
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57733: LD_EXP 51
57737: PUSH
57738: LD_VAR 0 5
57742: ARRAY
57743: PUSH
57744: LD_VAR 0 4
57748: ARRAY
57749: PUSH
57750: LD_INT 1
57752: ARRAY
57753: PUSH
57754: LD_VAR 0 2
57758: EQUAL
57759: IFFALSE 57770
// KillUnit ( vehicle ) ;
57761: LD_VAR 0 2
57765: PPUSH
57766: CALL_OW 66
57770: GO 57730
57772: POP
57773: POP
// end ;
57774: LD_VAR 0 3
57778: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
57779: LD_EXP 55
57783: NOT
57784: IFFALSE 57917
57786: GO 57788
57788: DISABLE
57789: LD_INT 0
57791: PPUSH
// begin initMiner := true ;
57792: LD_ADDR_EXP 55
57796: PUSH
57797: LD_INT 1
57799: ST_TO_ADDR
// minersList := [ ] ;
57800: LD_ADDR_EXP 56
57804: PUSH
57805: EMPTY
57806: ST_TO_ADDR
// minerMinesList := [ ] ;
57807: LD_ADDR_EXP 57
57811: PUSH
57812: EMPTY
57813: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
57814: LD_ADDR_EXP 58
57818: PUSH
57819: LD_INT 6
57821: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57822: LD_ADDR_VAR 0 1
57826: PUSH
57827: LD_INT 34
57829: PUSH
57830: LD_INT 81
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PPUSH
57837: CALL_OW 69
57841: PUSH
57842: FOR_IN
57843: IFFALSE 57915
// begin if not i in minersList then
57845: LD_VAR 0 1
57849: PUSH
57850: LD_EXP 56
57854: IN
57855: NOT
57856: IFFALSE 57913
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57858: LD_ADDR_EXP 56
57862: PUSH
57863: LD_EXP 56
57867: PPUSH
57868: LD_EXP 56
57872: PUSH
57873: LD_INT 1
57875: PLUS
57876: PPUSH
57877: LD_VAR 0 1
57881: PPUSH
57882: CALL_OW 1
57886: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57887: LD_ADDR_EXP 57
57891: PUSH
57892: LD_EXP 57
57896: PPUSH
57897: LD_EXP 57
57901: PUSH
57902: LD_INT 1
57904: PLUS
57905: PPUSH
57906: EMPTY
57907: PPUSH
57908: CALL_OW 1
57912: ST_TO_ADDR
// end end ;
57913: GO 57842
57915: POP
57916: POP
// end ;
57917: PPOPN 1
57919: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
57920: LD_EXP 55
57924: IFFALSE 57955
57926: PUSH
57927: LD_EXP 57
57931: PPUSH
57932: CALL 12894 0 1
57936: IFTRUE 57954
57938: PUSH
57939: LD_INT 34
57941: PUSH
57942: LD_INT 81
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PPUSH
57949: CALL_OW 69
57953: OR
57954: AND
57955: IFFALSE 58454
57957: GO 57959
57959: DISABLE
57960: LD_INT 0
57962: PPUSH
57963: PPUSH
57964: PPUSH
57965: PPUSH
// begin enable ;
57966: ENABLE
// for i := minerMinesList downto 1 do
57967: LD_ADDR_VAR 0 1
57971: PUSH
57972: DOUBLE
57973: LD_EXP 57
57977: INC
57978: ST_TO_ADDR
57979: LD_INT 1
57981: PUSH
57982: FOR_DOWNTO
57983: IFFALSE 58452
// begin if IsLive ( minersList [ i ] ) then
57985: LD_EXP 56
57989: PUSH
57990: LD_VAR 0 1
57994: ARRAY
57995: PPUSH
57996: CALL_OW 300
58000: IFFALSE 58033
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58002: LD_EXP 56
58006: PUSH
58007: LD_VAR 0 1
58011: ARRAY
58012: PPUSH
58013: LD_EXP 57
58017: PUSH
58018: LD_VAR 0 1
58022: ARRAY
58023: PPUSH
58024: CALL 12894 0 1
58028: PPUSH
58029: CALL_OW 505
// if not minerMinesList [ i ] then
58033: LD_EXP 57
58037: PUSH
58038: LD_VAR 0 1
58042: ARRAY
58043: NOT
58044: IFFALSE 58048
// continue ;
58046: GO 57982
// for j := minerMinesList [ i ] downto 1 do
58048: LD_ADDR_VAR 0 2
58052: PUSH
58053: DOUBLE
58054: LD_EXP 57
58058: PUSH
58059: LD_VAR 0 1
58063: ARRAY
58064: INC
58065: ST_TO_ADDR
58066: LD_INT 1
58068: PUSH
58069: FOR_DOWNTO
58070: IFFALSE 58448
// begin side := GetSide ( minersList [ i ] ) ;
58072: LD_ADDR_VAR 0 3
58076: PUSH
58077: LD_EXP 56
58081: PUSH
58082: LD_VAR 0 1
58086: ARRAY
58087: PPUSH
58088: CALL_OW 255
58092: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58093: LD_EXP 56
58097: PUSH
58098: LD_VAR 0 1
58102: ARRAY
58103: PPUSH
58104: CALL_OW 301
58108: IFTRUE 58128
58110: PUSH
58111: LD_EXP 56
58115: PUSH
58116: LD_VAR 0 1
58120: ARRAY
58121: PPUSH
58122: CALL_OW 305
58126: NOT
58127: OR
58128: IFFALSE 58219
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58130: LD_EXP 57
58134: PUSH
58135: LD_VAR 0 1
58139: ARRAY
58140: PUSH
58141: LD_VAR 0 2
58145: ARRAY
58146: PUSH
58147: LD_INT 1
58149: ARRAY
58150: PPUSH
58151: LD_EXP 57
58155: PUSH
58156: LD_VAR 0 1
58160: ARRAY
58161: PUSH
58162: LD_VAR 0 2
58166: ARRAY
58167: PUSH
58168: LD_INT 2
58170: ARRAY
58171: PPUSH
58172: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58176: LD_ADDR_EXP 57
58180: PUSH
58181: LD_EXP 57
58185: PPUSH
58186: LD_VAR 0 1
58190: PPUSH
58191: LD_EXP 57
58195: PUSH
58196: LD_VAR 0 1
58200: ARRAY
58201: PPUSH
58202: LD_VAR 0 2
58206: PPUSH
58207: CALL_OW 3
58211: PPUSH
58212: CALL_OW 1
58216: ST_TO_ADDR
// continue ;
58217: GO 58069
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58219: LD_ADDR_VAR 0 4
58223: PUSH
58224: LD_EXP 57
58228: PUSH
58229: LD_VAR 0 1
58233: ARRAY
58234: PUSH
58235: LD_VAR 0 2
58239: ARRAY
58240: PUSH
58241: LD_INT 1
58243: ARRAY
58244: PPUSH
58245: LD_EXP 57
58249: PUSH
58250: LD_VAR 0 1
58254: ARRAY
58255: PUSH
58256: LD_VAR 0 2
58260: ARRAY
58261: PUSH
58262: LD_INT 2
58264: ARRAY
58265: PPUSH
58266: CALL_OW 428
58270: ST_TO_ADDR
// if not tmp then
58271: LD_VAR 0 4
58275: NOT
58276: IFFALSE 58280
// continue ;
58278: GO 58069
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
58280: LD_VAR 0 4
58284: PUSH
58285: LD_INT 81
58287: PUSH
58288: LD_VAR 0 3
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PPUSH
58297: CALL_OW 69
58301: IN
58302: IFFALSE 58352
58304: PUSH
58305: LD_EXP 57
58309: PUSH
58310: LD_VAR 0 1
58314: ARRAY
58315: PUSH
58316: LD_VAR 0 2
58320: ARRAY
58321: PUSH
58322: LD_INT 1
58324: ARRAY
58325: PPUSH
58326: LD_EXP 57
58330: PUSH
58331: LD_VAR 0 1
58335: ARRAY
58336: PUSH
58337: LD_VAR 0 2
58341: ARRAY
58342: PUSH
58343: LD_INT 2
58345: ARRAY
58346: PPUSH
58347: CALL_OW 458
58351: AND
58352: IFFALSE 58446
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
58354: LD_EXP 57
58358: PUSH
58359: LD_VAR 0 1
58363: ARRAY
58364: PUSH
58365: LD_VAR 0 2
58369: ARRAY
58370: PUSH
58371: LD_INT 1
58373: ARRAY
58374: PPUSH
58375: LD_EXP 57
58379: PUSH
58380: LD_VAR 0 1
58384: ARRAY
58385: PUSH
58386: LD_VAR 0 2
58390: ARRAY
58391: PUSH
58392: LD_INT 2
58394: ARRAY
58395: PPUSH
58396: LD_VAR 0 3
58400: PPUSH
58401: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58405: LD_ADDR_EXP 57
58409: PUSH
58410: LD_EXP 57
58414: PPUSH
58415: LD_VAR 0 1
58419: PPUSH
58420: LD_EXP 57
58424: PUSH
58425: LD_VAR 0 1
58429: ARRAY
58430: PPUSH
58431: LD_VAR 0 2
58435: PPUSH
58436: CALL_OW 3
58440: PPUSH
58441: CALL_OW 1
58445: ST_TO_ADDR
// end ; end ;
58446: GO 58069
58448: POP
58449: POP
// end ;
58450: GO 57982
58452: POP
58453: POP
// end ;
58454: PPOPN 4
58456: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
58457: LD_INT 0
58459: PPUSH
58460: PPUSH
58461: PPUSH
58462: PPUSH
// result := false ;
58463: LD_ADDR_VAR 0 4
58467: PUSH
58468: LD_INT 0
58470: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
58471: LD_VAR 0 1
58475: PPUSH
58476: CALL_OW 264
58480: PUSH
58481: LD_INT 81
58483: EQUAL
58484: NOT
58485: IFFALSE 58489
// exit ;
58487: GO 58859
// side := GetSide ( unit ) ;
58489: LD_ADDR_VAR 0 6
58493: PUSH
58494: LD_VAR 0 1
58498: PPUSH
58499: CALL_OW 255
58503: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
58504: LD_ADDR_VAR 0 5
58508: PUSH
58509: LD_EXP 56
58513: PPUSH
58514: LD_VAR 0 1
58518: PPUSH
58519: CALL 15595 0 2
58523: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
58524: LD_EXP 57
58528: PUSH
58529: LD_VAR 0 5
58533: ARRAY
58534: PUSH
58535: LD_EXP 58
58539: GREATEREQUAL
58540: IFFALSE 58544
// exit ;
58542: GO 58859
// ComMoveXY ( unit , x , y ) ;
58544: LD_VAR 0 1
58548: PPUSH
58549: LD_VAR 0 2
58553: PPUSH
58554: LD_VAR 0 3
58558: PPUSH
58559: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58563: LD_INT 35
58565: PPUSH
58566: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
58570: LD_VAR 0 1
58574: PPUSH
58575: LD_VAR 0 2
58579: PPUSH
58580: LD_VAR 0 3
58584: PPUSH
58585: CALL 47641 0 3
58589: NOT
58590: IFFALSE 58603
58592: PUSH
58593: LD_VAR 0 1
58597: PPUSH
58598: CALL_OW 314
58602: AND
58603: IFFALSE 58607
// exit ;
58605: GO 58859
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
58607: LD_VAR 0 2
58611: PPUSH
58612: LD_VAR 0 3
58616: PPUSH
58617: CALL_OW 428
58621: PUSH
58622: LD_VAR 0 1
58626: EQUAL
58627: IFFALSE 58641
58629: PUSH
58630: LD_VAR 0 1
58634: PPUSH
58635: CALL_OW 314
58639: NOT
58640: AND
58641: IFFALSE 58563
// if MineAtPos ( x , y ) then
58643: LD_VAR 0 2
58647: PPUSH
58648: LD_VAR 0 3
58652: PPUSH
58653: CALL_OW 458
58657: IFFALSE 58661
// exit ;
58659: GO 58859
// if your_side = side then
58661: LD_OWVAR 2
58665: PUSH
58666: LD_VAR 0 6
58670: EQUAL
58671: IFFALSE 58690
// PlaySoundXY ( x , y , PlantMine ) ;
58673: LD_VAR 0 2
58677: PPUSH
58678: LD_VAR 0 3
58682: PPUSH
58683: LD_STRING PlantMine
58685: PPUSH
58686: CALL_OW 366
// repeat wait ( 1 ) ;
58690: LD_INT 1
58692: PPUSH
58693: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
58697: LD_VAR 0 2
58701: PPUSH
58702: LD_VAR 0 3
58706: PPUSH
58707: LD_VAR 0 6
58711: PPUSH
58712: LD_INT 0
58714: PPUSH
58715: CALL_OW 454
58719: IFFALSE 58690
// if MineAtPos ( x , y ) then
58721: LD_VAR 0 2
58725: PPUSH
58726: LD_VAR 0 3
58730: PPUSH
58731: CALL_OW 458
58735: IFFALSE 58851
// begin for i in minerMinesList [ index ] do
58737: LD_ADDR_VAR 0 7
58741: PUSH
58742: LD_EXP 57
58746: PUSH
58747: LD_VAR 0 5
58751: ARRAY
58752: PUSH
58753: FOR_IN
58754: IFFALSE 58796
// if i [ 1 ] = x and i [ 2 ] = y then
58756: LD_VAR 0 7
58760: PUSH
58761: LD_INT 1
58763: ARRAY
58764: PUSH
58765: LD_VAR 0 2
58769: EQUAL
58770: IFFALSE 58788
58772: PUSH
58773: LD_VAR 0 7
58777: PUSH
58778: LD_INT 2
58780: ARRAY
58781: PUSH
58782: LD_VAR 0 3
58786: EQUAL
58787: AND
58788: IFFALSE 58794
// exit ;
58790: POP
58791: POP
58792: GO 58859
58794: GO 58753
58796: POP
58797: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
58798: LD_ADDR_EXP 57
58802: PUSH
58803: LD_EXP 57
58807: PPUSH
58808: LD_VAR 0 5
58812: PUSH
58813: LD_EXP 57
58817: PUSH
58818: LD_VAR 0 5
58822: ARRAY
58823: PUSH
58824: LD_INT 1
58826: PLUS
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PPUSH
58832: LD_VAR 0 2
58836: PUSH
58837: LD_VAR 0 3
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PPUSH
58846: CALL 15812 0 3
58850: ST_TO_ADDR
// end ; result := true ;
58851: LD_ADDR_VAR 0 4
58855: PUSH
58856: LD_INT 1
58858: ST_TO_ADDR
// end ;
58859: LD_VAR 0 4
58863: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
58864: LD_INT 0
58866: PPUSH
58867: PPUSH
58868: PPUSH
// if not unit in minersList then
58869: LD_VAR 0 1
58873: PUSH
58874: LD_EXP 56
58878: IN
58879: NOT
58880: IFFALSE 58884
// exit ;
58882: GO 59091
// index := GetElementIndex ( minersList , unit ) ;
58884: LD_ADDR_VAR 0 6
58888: PUSH
58889: LD_EXP 56
58893: PPUSH
58894: LD_VAR 0 1
58898: PPUSH
58899: CALL 15595 0 2
58903: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
58904: LD_ADDR_VAR 0 5
58908: PUSH
58909: DOUBLE
58910: LD_EXP 57
58914: PUSH
58915: LD_VAR 0 6
58919: ARRAY
58920: INC
58921: ST_TO_ADDR
58922: LD_INT 1
58924: PUSH
58925: FOR_DOWNTO
58926: IFFALSE 59089
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58928: LD_EXP 57
58932: PUSH
58933: LD_VAR 0 6
58937: ARRAY
58938: PUSH
58939: LD_VAR 0 5
58943: ARRAY
58944: PUSH
58945: LD_INT 1
58947: ARRAY
58948: PPUSH
58949: LD_EXP 57
58953: PUSH
58954: LD_VAR 0 6
58958: ARRAY
58959: PUSH
58960: LD_VAR 0 5
58964: ARRAY
58965: PUSH
58966: LD_INT 2
58968: ARRAY
58969: PPUSH
58970: LD_VAR 0 2
58974: PPUSH
58975: LD_VAR 0 3
58979: PPUSH
58980: CALL_OW 298
58984: PUSH
58985: LD_INT 6
58987: LESS
58988: IFFALSE 59087
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58990: LD_EXP 57
58994: PUSH
58995: LD_VAR 0 6
58999: ARRAY
59000: PUSH
59001: LD_VAR 0 5
59005: ARRAY
59006: PUSH
59007: LD_INT 1
59009: ARRAY
59010: PPUSH
59011: LD_EXP 57
59015: PUSH
59016: LD_VAR 0 6
59020: ARRAY
59021: PUSH
59022: LD_VAR 0 5
59026: ARRAY
59027: PUSH
59028: LD_INT 2
59030: ARRAY
59031: PPUSH
59032: LD_VAR 0 1
59036: PPUSH
59037: CALL_OW 255
59041: PPUSH
59042: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59046: LD_ADDR_EXP 57
59050: PUSH
59051: LD_EXP 57
59055: PPUSH
59056: LD_VAR 0 6
59060: PPUSH
59061: LD_EXP 57
59065: PUSH
59066: LD_VAR 0 6
59070: ARRAY
59071: PPUSH
59072: LD_VAR 0 5
59076: PPUSH
59077: CALL_OW 3
59081: PPUSH
59082: CALL_OW 1
59086: ST_TO_ADDR
// end ; end ;
59087: GO 58925
59089: POP
59090: POP
// end ;
59091: LD_VAR 0 4
59095: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59096: LD_INT 0
59098: PPUSH
59099: PPUSH
59100: PPUSH
59101: PPUSH
59102: PPUSH
59103: PPUSH
59104: PPUSH
59105: PPUSH
59106: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59107: LD_VAR 0 1
59111: PPUSH
59112: CALL_OW 264
59116: PUSH
59117: LD_INT 81
59119: EQUAL
59120: NOT
59121: IFTRUE 59136
59123: PUSH
59124: LD_VAR 0 1
59128: PUSH
59129: LD_EXP 56
59133: IN
59134: NOT
59135: OR
59136: IFFALSE 59140
// exit ;
59138: GO 59466
// index := GetElementIndex ( minersList , unit ) ;
59140: LD_ADDR_VAR 0 6
59144: PUSH
59145: LD_EXP 56
59149: PPUSH
59150: LD_VAR 0 1
59154: PPUSH
59155: CALL 15595 0 2
59159: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59160: LD_ADDR_VAR 0 8
59164: PUSH
59165: LD_EXP 58
59169: PUSH
59170: LD_EXP 57
59174: PUSH
59175: LD_VAR 0 6
59179: ARRAY
59180: MINUS
59181: ST_TO_ADDR
// if not minesFreeAmount then
59182: LD_VAR 0 8
59186: NOT
59187: IFFALSE 59191
// exit ;
59189: GO 59466
// tmp := [ ] ;
59191: LD_ADDR_VAR 0 7
59195: PUSH
59196: EMPTY
59197: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59198: LD_ADDR_VAR 0 5
59202: PUSH
59203: DOUBLE
59204: LD_INT 1
59206: DEC
59207: ST_TO_ADDR
59208: LD_VAR 0 8
59212: PUSH
59213: FOR_TO
59214: IFFALSE 59413
// begin _d := rand ( 0 , 5 ) ;
59216: LD_ADDR_VAR 0 11
59220: PUSH
59221: LD_INT 0
59223: PPUSH
59224: LD_INT 5
59226: PPUSH
59227: CALL_OW 12
59231: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59232: LD_ADDR_VAR 0 12
59236: PUSH
59237: LD_INT 2
59239: PPUSH
59240: LD_INT 6
59242: PPUSH
59243: CALL_OW 12
59247: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59248: LD_ADDR_VAR 0 9
59252: PUSH
59253: LD_VAR 0 2
59257: PPUSH
59258: LD_VAR 0 11
59262: PPUSH
59263: LD_VAR 0 12
59267: PPUSH
59268: CALL_OW 272
59272: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
59273: LD_ADDR_VAR 0 10
59277: PUSH
59278: LD_VAR 0 3
59282: PPUSH
59283: LD_VAR 0 11
59287: PPUSH
59288: LD_VAR 0 12
59292: PPUSH
59293: CALL_OW 273
59297: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
59298: LD_VAR 0 9
59302: PPUSH
59303: LD_VAR 0 10
59307: PPUSH
59308: CALL_OW 488
59312: IFFALSE 59336
59314: PUSH
59315: LD_VAR 0 9
59319: PUSH
59320: LD_VAR 0 10
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_VAR 0 7
59333: IN
59334: NOT
59335: AND
59336: IFFALSE 59355
59338: PUSH
59339: LD_VAR 0 9
59343: PPUSH
59344: LD_VAR 0 10
59348: PPUSH
59349: CALL_OW 458
59353: NOT
59354: AND
59355: IFFALSE 59397
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
59357: LD_ADDR_VAR 0 7
59361: PUSH
59362: LD_VAR 0 7
59366: PPUSH
59367: LD_VAR 0 7
59371: PUSH
59372: LD_INT 1
59374: PLUS
59375: PPUSH
59376: LD_VAR 0 9
59380: PUSH
59381: LD_VAR 0 10
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PPUSH
59390: CALL_OW 1
59394: ST_TO_ADDR
59395: GO 59411
// i := i - 1 ;
59397: LD_ADDR_VAR 0 5
59401: PUSH
59402: LD_VAR 0 5
59406: PUSH
59407: LD_INT 1
59409: MINUS
59410: ST_TO_ADDR
// end ;
59411: GO 59213
59413: POP
59414: POP
// for i in tmp do
59415: LD_ADDR_VAR 0 5
59419: PUSH
59420: LD_VAR 0 7
59424: PUSH
59425: FOR_IN
59426: IFFALSE 59464
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
59428: LD_VAR 0 1
59432: PPUSH
59433: LD_VAR 0 5
59437: PUSH
59438: LD_INT 1
59440: ARRAY
59441: PPUSH
59442: LD_VAR 0 5
59446: PUSH
59447: LD_INT 2
59449: ARRAY
59450: PPUSH
59451: CALL 58457 0 3
59455: NOT
59456: IFFALSE 59462
// exit ;
59458: POP
59459: POP
59460: GO 59466
59462: GO 59425
59464: POP
59465: POP
// end ;
59466: LD_VAR 0 4
59470: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
59471: LD_INT 0
59473: PPUSH
59474: PPUSH
59475: PPUSH
59476: PPUSH
59477: PPUSH
59478: PPUSH
59479: PPUSH
59480: PPUSH
59481: PPUSH
// if GetClass ( unit ) <> class_sniper then
59482: LD_VAR 0 1
59486: PPUSH
59487: CALL_OW 257
59491: PUSH
59492: LD_INT 5
59494: NONEQUAL
59495: IFFALSE 59499
// exit ;
59497: GO 59969
// dist := 8 ;
59499: LD_ADDR_VAR 0 5
59503: PUSH
59504: LD_INT 8
59506: ST_TO_ADDR
// viewRange := 12 ;
59507: LD_ADDR_VAR 0 8
59511: PUSH
59512: LD_INT 12
59514: ST_TO_ADDR
// side := GetSide ( unit ) ;
59515: LD_ADDR_VAR 0 6
59519: PUSH
59520: LD_VAR 0 1
59524: PPUSH
59525: CALL_OW 255
59529: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59530: LD_INT 61
59532: PPUSH
59533: LD_VAR 0 6
59537: PPUSH
59538: CALL_OW 321
59542: PUSH
59543: LD_INT 2
59545: EQUAL
59546: IFFALSE 59556
// viewRange := 16 ;
59548: LD_ADDR_VAR 0 8
59552: PUSH
59553: LD_INT 16
59555: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59556: LD_VAR 0 1
59560: PPUSH
59561: LD_VAR 0 2
59565: PPUSH
59566: LD_VAR 0 3
59570: PPUSH
59571: CALL_OW 297
59575: PUSH
59576: LD_VAR 0 5
59580: GREATER
59581: IFFALSE 59660
// begin ComMoveXY ( unit , x , y ) ;
59583: LD_VAR 0 1
59587: PPUSH
59588: LD_VAR 0 2
59592: PPUSH
59593: LD_VAR 0 3
59597: PPUSH
59598: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59602: LD_INT 35
59604: PPUSH
59605: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
59609: LD_VAR 0 1
59613: PPUSH
59614: LD_VAR 0 2
59618: PPUSH
59619: LD_VAR 0 3
59623: PPUSH
59624: CALL 47641 0 3
59628: NOT
59629: IFFALSE 59633
// exit ;
59631: GO 59969
// until GetDistUnitXY ( unit , x , y ) < dist ;
59633: LD_VAR 0 1
59637: PPUSH
59638: LD_VAR 0 2
59642: PPUSH
59643: LD_VAR 0 3
59647: PPUSH
59648: CALL_OW 297
59652: PUSH
59653: LD_VAR 0 5
59657: LESS
59658: IFFALSE 59602
// end ; ComTurnXY ( unit , x , y ) ;
59660: LD_VAR 0 1
59664: PPUSH
59665: LD_VAR 0 2
59669: PPUSH
59670: LD_VAR 0 3
59674: PPUSH
59675: CALL_OW 118
// repeat if Multiplayer then
59679: LD_OWVAR 4
59683: IFFALSE 59694
// wait ( 35 ) else
59685: LD_INT 35
59687: PPUSH
59688: CALL_OW 67
59692: GO 59701
// wait ( 5 ) ;
59694: LD_INT 5
59696: PPUSH
59697: CALL_OW 67
// _d := GetDir ( unit ) ;
59701: LD_ADDR_VAR 0 11
59705: PUSH
59706: LD_VAR 0 1
59710: PPUSH
59711: CALL_OW 254
59715: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
59716: LD_ADDR_VAR 0 7
59720: PUSH
59721: LD_VAR 0 1
59725: PPUSH
59726: CALL_OW 250
59730: PPUSH
59731: LD_VAR 0 1
59735: PPUSH
59736: CALL_OW 251
59740: PPUSH
59741: LD_VAR 0 2
59745: PPUSH
59746: LD_VAR 0 3
59750: PPUSH
59751: CALL 50277 0 4
59755: ST_TO_ADDR
// until dir = _d ;
59756: LD_VAR 0 7
59760: PUSH
59761: LD_VAR 0 11
59765: EQUAL
59766: IFFALSE 59679
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
59768: LD_ADDR_VAR 0 9
59772: PUSH
59773: LD_VAR 0 1
59777: PPUSH
59778: CALL_OW 250
59782: PPUSH
59783: LD_VAR 0 7
59787: PPUSH
59788: LD_VAR 0 5
59792: PPUSH
59793: CALL_OW 272
59797: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
59798: LD_ADDR_VAR 0 10
59802: PUSH
59803: LD_VAR 0 1
59807: PPUSH
59808: CALL_OW 251
59812: PPUSH
59813: LD_VAR 0 7
59817: PPUSH
59818: LD_VAR 0 5
59822: PPUSH
59823: CALL_OW 273
59827: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59828: LD_VAR 0 9
59832: PPUSH
59833: LD_VAR 0 10
59837: PPUSH
59838: CALL_OW 488
59842: NOT
59843: IFFALSE 59847
// exit ;
59845: GO 59969
// ComAnimCustom ( unit , 1 ) ;
59847: LD_VAR 0 1
59851: PPUSH
59852: LD_INT 1
59854: PPUSH
59855: CALL_OW 592
// p := 0 ;
59859: LD_ADDR_VAR 0 12
59863: PUSH
59864: LD_INT 0
59866: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59867: LD_VAR 0 9
59871: PPUSH
59872: LD_VAR 0 10
59876: PPUSH
59877: LD_VAR 0 6
59881: PPUSH
59882: LD_VAR 0 8
59886: PPUSH
59887: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59891: LD_INT 35
59893: PPUSH
59894: CALL_OW 67
// p := Inc ( p ) ;
59898: LD_ADDR_VAR 0 12
59902: PUSH
59903: LD_VAR 0 12
59907: PPUSH
59908: CALL 50233 0 1
59912: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59913: LD_VAR 0 12
59917: PUSH
59918: LD_INT 3
59920: EQUAL
59921: IFTRUE 59935
59923: PUSH
59924: LD_VAR 0 1
59928: PPUSH
59929: CALL_OW 302
59933: NOT
59934: OR
59935: IFTRUE 59948
59937: PUSH
59938: LD_VAR 0 1
59942: PPUSH
59943: CALL_OW 301
59947: OR
59948: IFFALSE 59891
// RemoveSeeing ( _x , _y , side ) ;
59950: LD_VAR 0 9
59954: PPUSH
59955: LD_VAR 0 10
59959: PPUSH
59960: LD_VAR 0 6
59964: PPUSH
59965: CALL_OW 331
// end ;
59969: LD_VAR 0 4
59973: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
59974: LD_INT 0
59976: PPUSH
59977: PPUSH
59978: PPUSH
59979: PPUSH
59980: PPUSH
59981: PPUSH
59982: PPUSH
59983: PPUSH
59984: PPUSH
59985: PPUSH
59986: PPUSH
// if not unit then
59987: LD_VAR 0 1
59991: NOT
59992: IFFALSE 59996
// exit ;
59994: GO 60267
// side := GetSide ( unit ) ;
59996: LD_ADDR_VAR 0 3
60000: PUSH
60001: LD_VAR 0 1
60005: PPUSH
60006: CALL_OW 255
60010: ST_TO_ADDR
// x := GetX ( unit ) ;
60011: LD_ADDR_VAR 0 5
60015: PUSH
60016: LD_VAR 0 1
60020: PPUSH
60021: CALL_OW 250
60025: ST_TO_ADDR
// y := GetY ( unit ) ;
60026: LD_ADDR_VAR 0 6
60030: PUSH
60031: LD_VAR 0 1
60035: PPUSH
60036: CALL_OW 251
60040: ST_TO_ADDR
// r := 8 ;
60041: LD_ADDR_VAR 0 4
60045: PUSH
60046: LD_INT 8
60048: ST_TO_ADDR
// if x - r < 0 then
60049: LD_VAR 0 5
60053: PUSH
60054: LD_VAR 0 4
60058: MINUS
60059: PUSH
60060: LD_INT 0
60062: LESS
60063: IFFALSE 60075
// min_x := 0 else
60065: LD_ADDR_VAR 0 7
60069: PUSH
60070: LD_INT 0
60072: ST_TO_ADDR
60073: GO 60091
// min_x := x - r ;
60075: LD_ADDR_VAR 0 7
60079: PUSH
60080: LD_VAR 0 5
60084: PUSH
60085: LD_VAR 0 4
60089: MINUS
60090: ST_TO_ADDR
// if y - r < 0 then
60091: LD_VAR 0 6
60095: PUSH
60096: LD_VAR 0 4
60100: MINUS
60101: PUSH
60102: LD_INT 0
60104: LESS
60105: IFFALSE 60117
// min_y := 0 else
60107: LD_ADDR_VAR 0 8
60111: PUSH
60112: LD_INT 0
60114: ST_TO_ADDR
60115: GO 60133
// min_y := y - r ;
60117: LD_ADDR_VAR 0 8
60121: PUSH
60122: LD_VAR 0 6
60126: PUSH
60127: LD_VAR 0 4
60131: MINUS
60132: ST_TO_ADDR
// max_x := x + r ;
60133: LD_ADDR_VAR 0 9
60137: PUSH
60138: LD_VAR 0 5
60142: PUSH
60143: LD_VAR 0 4
60147: PLUS
60148: ST_TO_ADDR
// max_y := y + r ;
60149: LD_ADDR_VAR 0 10
60153: PUSH
60154: LD_VAR 0 6
60158: PUSH
60159: LD_VAR 0 4
60163: PLUS
60164: ST_TO_ADDR
// for _x = min_x to max_x do
60165: LD_ADDR_VAR 0 11
60169: PUSH
60170: DOUBLE
60171: LD_VAR 0 7
60175: DEC
60176: ST_TO_ADDR
60177: LD_VAR 0 9
60181: PUSH
60182: FOR_TO
60183: IFFALSE 60265
// for _y = min_y to max_y do
60185: LD_ADDR_VAR 0 12
60189: PUSH
60190: DOUBLE
60191: LD_VAR 0 8
60195: DEC
60196: ST_TO_ADDR
60197: LD_VAR 0 10
60201: PUSH
60202: FOR_TO
60203: IFFALSE 60261
// begin if not ValidHex ( _x , _y ) then
60205: LD_VAR 0 11
60209: PPUSH
60210: LD_VAR 0 12
60214: PPUSH
60215: CALL_OW 488
60219: NOT
60220: IFFALSE 60224
// continue ;
60222: GO 60202
// if MineAtPos ( _x , _y ) then
60224: LD_VAR 0 11
60228: PPUSH
60229: LD_VAR 0 12
60233: PPUSH
60234: CALL_OW 458
60238: IFFALSE 60259
// ViewMineAtPos ( _x , _y , side ) ;
60240: LD_VAR 0 11
60244: PPUSH
60245: LD_VAR 0 12
60249: PPUSH
60250: LD_VAR 0 3
60254: PPUSH
60255: CALL_OW 457
// end ;
60259: GO 60202
60261: POP
60262: POP
60263: GO 60182
60265: POP
60266: POP
// end ;
60267: LD_VAR 0 2
60271: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
60272: LD_INT 0
60274: PPUSH
60275: PPUSH
60276: PPUSH
60277: PPUSH
60278: PPUSH
60279: PPUSH
// if not units then
60280: LD_VAR 0 1
60284: NOT
60285: IFFALSE 60289
// exit ;
60287: GO 60719
// scaners := [ ] ;
60289: LD_ADDR_VAR 0 6
60293: PUSH
60294: EMPTY
60295: ST_TO_ADDR
// for i in units do
60296: LD_ADDR_VAR 0 3
60300: PUSH
60301: LD_VAR 0 1
60305: PUSH
60306: FOR_IN
60307: IFFALSE 60464
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
60309: LD_VAR 0 3
60313: PPUSH
60314: CALL_OW 264
60318: PUSH
60319: LD_INT 11
60321: NONEQUAL
60322: IFTRUE 60336
60324: PUSH
60325: LD_VAR 0 3
60329: PPUSH
60330: CALL_OW 302
60334: NOT
60335: OR
60336: IFTRUE 60353
60338: PUSH
60339: LD_VAR 0 3
60343: PPUSH
60344: CALL_OW 110
60348: PUSH
60349: LD_INT 502
60351: EQUAL
60352: OR
60353: IFFALSE 60357
// continue ;
60355: GO 60306
// ComStop ( i ) ;
60357: LD_VAR 0 3
60361: PPUSH
60362: CALL_OW 141
// x := GetX ( i ) ;
60366: LD_ADDR_VAR 0 4
60370: PUSH
60371: LD_VAR 0 3
60375: PPUSH
60376: CALL_OW 250
60380: ST_TO_ADDR
// y := GetY ( i ) ;
60381: LD_ADDR_VAR 0 5
60385: PUSH
60386: LD_VAR 0 3
60390: PPUSH
60391: CALL_OW 251
60395: ST_TO_ADDR
// if GetSide ( i ) = your_side then
60396: LD_VAR 0 3
60400: PPUSH
60401: CALL_OW 255
60405: PUSH
60406: LD_OWVAR 2
60410: EQUAL
60411: IFFALSE 60430
// PlaySoundXY ( x , y , mineDetector ) ;
60413: LD_VAR 0 4
60417: PPUSH
60418: LD_VAR 0 5
60422: PPUSH
60423: LD_STRING mineDetector
60425: PPUSH
60426: CALL_OW 366
// scaners := Join ( scaners , i ) ;
60430: LD_ADDR_VAR 0 6
60434: PUSH
60435: LD_VAR 0 6
60439: PPUSH
60440: LD_VAR 0 3
60444: PPUSH
60445: CALL 48860 0 2
60449: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
60450: LD_VAR 0 3
60454: PPUSH
60455: LD_INT 502
60457: PPUSH
60458: CALL_OW 109
// end ;
60462: GO 60306
60464: POP
60465: POP
// if not scaners then
60466: LD_VAR 0 6
60470: NOT
60471: IFFALSE 60475
// exit ;
60473: GO 60719
// wait ( 3 ) ;
60475: LD_INT 3
60477: PPUSH
60478: CALL_OW 67
// timer := 6 ;
60482: LD_ADDR_VAR 0 7
60486: PUSH
60487: LD_INT 6
60489: ST_TO_ADDR
// repeat for i in scaners do
60490: LD_ADDR_VAR 0 3
60494: PUSH
60495: LD_VAR 0 6
60499: PUSH
60500: FOR_IN
60501: IFFALSE 60617
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
60503: LD_VAR 0 3
60507: PPUSH
60508: CALL_OW 302
60512: NOT
60513: IFTRUE 60526
60515: PUSH
60516: LD_VAR 0 3
60520: PPUSH
60521: CALL_OW 314
60525: OR
60526: IFTRUE 60557
60528: PUSH
60529: LD_VAR 0 3
60533: PPUSH
60534: CALL_OW 263
60538: PUSH
60539: LD_INT 1
60541: EQUAL
60542: IFFALSE 60556
60544: PUSH
60545: LD_VAR 0 3
60549: PPUSH
60550: CALL_OW 311
60554: NOT
60555: AND
60556: OR
60557: IFFALSE 60601
// begin SetUnitDisplayNumber ( i , 0 ) ;
60559: LD_VAR 0 3
60563: PPUSH
60564: LD_INT 0
60566: PPUSH
60567: CALL_OW 505
// SetTag ( i , 0 ) ;
60571: LD_VAR 0 3
60575: PPUSH
60576: LD_INT 0
60578: PPUSH
60579: CALL_OW 109
// scaners := scaners diff i ;
60583: LD_ADDR_VAR 0 6
60587: PUSH
60588: LD_VAR 0 6
60592: PUSH
60593: LD_VAR 0 3
60597: DIFF
60598: ST_TO_ADDR
// continue ;
60599: GO 60500
// end ; SetUnitDisplayNumber ( i , timer ) ;
60601: LD_VAR 0 3
60605: PPUSH
60606: LD_VAR 0 7
60610: PPUSH
60611: CALL_OW 505
// end ;
60615: GO 60500
60617: POP
60618: POP
// if not scaners then
60619: LD_VAR 0 6
60623: NOT
60624: IFFALSE 60628
// exit ;
60626: GO 60719
// timer := Dec ( timer ) ;
60628: LD_ADDR_VAR 0 7
60632: PUSH
60633: LD_VAR 0 7
60637: PPUSH
60638: CALL 50255 0 1
60642: ST_TO_ADDR
// wait ( 0 0$1 ) ;
60643: LD_INT 35
60645: PPUSH
60646: CALL_OW 67
// until timer = 0 ;
60650: LD_VAR 0 7
60654: PUSH
60655: LD_INT 0
60657: EQUAL
60658: IFFALSE 60490
// if not scaners then
60660: LD_VAR 0 6
60664: NOT
60665: IFFALSE 60669
// exit ;
60667: GO 60719
// for i in scaners do
60669: LD_ADDR_VAR 0 3
60673: PUSH
60674: LD_VAR 0 6
60678: PUSH
60679: FOR_IN
60680: IFFALSE 60717
// begin SetUnitDisplayNumber ( i , 0 ) ;
60682: LD_VAR 0 3
60686: PPUSH
60687: LD_INT 0
60689: PPUSH
60690: CALL_OW 505
// SetTag ( i , 0 ) ;
60694: LD_VAR 0 3
60698: PPUSH
60699: LD_INT 0
60701: PPUSH
60702: CALL_OW 109
// RevealDetectorMine ( i ) ;
60706: LD_VAR 0 3
60710: PPUSH
60711: CALL 59974 0 1
// end ;
60715: GO 60679
60717: POP
60718: POP
// end ;
60719: LD_VAR 0 2
60723: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
60724: LD_INT 0
60726: PPUSH
// if p1 = mine_detector_mode then
60727: LD_VAR 0 2
60731: PUSH
60732: LD_INT 103
60734: EQUAL
60735: IFFALSE 60746
// DetectMine ( units ) ;
60737: LD_VAR 0 1
60741: PPUSH
60742: CALL 60272 0 1
// end ; end_of_file
60746: LD_VAR 0 7
60750: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
60751: LD_EXP 39
60755: IFFALSE 61096
60757: GO 60759
60759: DISABLE
60760: LD_INT 0
60762: PPUSH
60763: PPUSH
60764: PPUSH
// begin mpKingPoints := [ ] ;
60765: LD_ADDR_EXP 59
60769: PUSH
60770: EMPTY
60771: ST_TO_ADDR
// if mpTeamGame then
60772: LD_EXP 11
60776: IFFALSE 60830
// begin for i := 1 to Count ( mpTeams ) do
60778: LD_ADDR_VAR 0 1
60782: PUSH
60783: DOUBLE
60784: LD_INT 1
60786: DEC
60787: ST_TO_ADDR
60788: LD_EXP 10
60792: PPUSH
60793: CALL 12894 0 1
60797: PUSH
60798: FOR_TO
60799: IFFALSE 60826
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
60801: LD_ADDR_EXP 59
60805: PUSH
60806: LD_EXP 59
60810: PPUSH
60811: LD_VAR 0 1
60815: PPUSH
60816: LD_INT 0
60818: PPUSH
60819: CALL_OW 1
60823: ST_TO_ADDR
60824: GO 60798
60826: POP
60827: POP
// end else
60828: GO 60873
// begin for i := 1 to 8 do
60830: LD_ADDR_VAR 0 1
60834: PUSH
60835: DOUBLE
60836: LD_INT 1
60838: DEC
60839: ST_TO_ADDR
60840: LD_INT 8
60842: PUSH
60843: FOR_TO
60844: IFFALSE 60871
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
60846: LD_ADDR_EXP 59
60850: PUSH
60851: LD_EXP 59
60855: PPUSH
60856: LD_VAR 0 1
60860: PPUSH
60861: LD_INT 0
60863: PPUSH
60864: CALL_OW 1
60868: ST_TO_ADDR
60869: GO 60843
60871: POP
60872: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
60873: LD_ADDR_VAR 0 3
60877: PUSH
60878: LD_EXP 2
60882: PPUSH
60883: LD_INT 0
60885: PPUSH
60886: CALL_OW 517
60890: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60891: LD_ADDR_VAR 0 1
60895: PUSH
60896: DOUBLE
60897: LD_INT 1
60899: DEC
60900: ST_TO_ADDR
60901: LD_VAR 0 3
60905: PUSH
60906: LD_INT 1
60908: ARRAY
60909: PUSH
60910: FOR_TO
60911: IFFALSE 60978
// for j := 1 to 8 do
60913: LD_ADDR_VAR 0 2
60917: PUSH
60918: DOUBLE
60919: LD_INT 1
60921: DEC
60922: ST_TO_ADDR
60923: LD_INT 8
60925: PUSH
60926: FOR_TO
60927: IFFALSE 60974
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
60929: LD_VAR 0 3
60933: PUSH
60934: LD_INT 1
60936: ARRAY
60937: PUSH
60938: LD_VAR 0 1
60942: ARRAY
60943: PPUSH
60944: LD_VAR 0 3
60948: PUSH
60949: LD_INT 2
60951: ARRAY
60952: PUSH
60953: LD_VAR 0 1
60957: ARRAY
60958: PPUSH
60959: LD_VAR 0 2
60963: PPUSH
60964: LD_INT 12
60966: NEG
60967: PPUSH
60968: CALL_OW 330
60972: GO 60926
60974: POP
60975: POP
60976: GO 60910
60978: POP
60979: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
60980: LD_EXP 34
60984: PPUSH
60985: LD_INT 1
60987: PPUSH
60988: CALL_OW 424
// UpdateCounter ;
60992: CALL 61602 0 0
// repeat wait ( 0 0$1 ) ;
60996: LD_INT 35
60998: PPUSH
60999: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61003: LD_ADDR_VAR 0 3
61007: PUSH
61008: LD_EXP 34
61012: PPUSH
61013: LD_INT 3
61015: PUSH
61016: LD_INT 57
61018: PUSH
61019: EMPTY
61020: LIST
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 50
61028: PUSH
61029: EMPTY
61030: LIST
61031: PUSH
61032: LD_INT 2
61034: PUSH
61035: LD_INT 30
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 30
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: LIST
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: LIST
61064: PPUSH
61065: CALL_OW 70
61069: ST_TO_ADDR
// if not tmp then
61070: LD_VAR 0 3
61074: NOT
61075: IFFALSE 61079
// continue ;
61077: GO 60996
// AddPoints ( tmp ) ;
61079: LD_VAR 0 3
61083: PPUSH
61084: CALL 61280 0 1
// UpdateCounter ;
61088: CALL 61602 0 0
// until false ;
61092: LD_INT 0
61094: IFFALSE 60996
// end ;
61096: PPOPN 3
61098: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
61099: LD_EXP 39
61103: IFFALSE 61111
61105: PUSH
61106: LD_EXP 37
61110: AND
61111: IFFALSE 61277
61113: GO 61115
61115: DISABLE
61116: LD_INT 0
61118: PPUSH
61119: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
61120: LD_ADDR_VAR 0 2
61124: PUSH
61125: LD_EXP 2
61129: PPUSH
61130: LD_INT 0
61132: PPUSH
61133: CALL_OW 517
61137: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61138: LD_ADDR_VAR 0 1
61142: PUSH
61143: DOUBLE
61144: LD_INT 1
61146: DEC
61147: ST_TO_ADDR
61148: LD_VAR 0 2
61152: PUSH
61153: LD_INT 1
61155: ARRAY
61156: PUSH
61157: FOR_TO
61158: IFFALSE 61199
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
61160: LD_VAR 0 2
61164: PUSH
61165: LD_INT 1
61167: ARRAY
61168: PUSH
61169: LD_VAR 0 1
61173: ARRAY
61174: PPUSH
61175: LD_VAR 0 2
61179: PUSH
61180: LD_INT 2
61182: ARRAY
61183: PUSH
61184: LD_VAR 0 1
61188: ARRAY
61189: PPUSH
61190: LD_INT 125
61192: PPUSH
61193: CALL_OW 495
61197: GO 61157
61199: POP
61200: POP
// repeat wait ( mpEmissions ) ;
61201: LD_EXP 37
61205: PPUSH
61206: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
61210: LD_ADDR_VAR 0 1
61214: PUSH
61215: DOUBLE
61216: LD_INT 1
61218: DEC
61219: ST_TO_ADDR
61220: LD_VAR 0 2
61224: PUSH
61225: LD_INT 1
61227: ARRAY
61228: PUSH
61229: FOR_TO
61230: IFFALSE 61271
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
61232: LD_VAR 0 2
61236: PUSH
61237: LD_INT 1
61239: ARRAY
61240: PUSH
61241: LD_VAR 0 1
61245: ARRAY
61246: PPUSH
61247: LD_VAR 0 2
61251: PUSH
61252: LD_INT 2
61254: ARRAY
61255: PUSH
61256: LD_VAR 0 1
61260: ARRAY
61261: PPUSH
61262: LD_INT 15
61264: PPUSH
61265: CALL_OW 495
61269: GO 61229
61271: POP
61272: POP
// until false ;
61273: LD_INT 0
61275: IFFALSE 61201
// end ;
61277: PPOPN 2
61279: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
61280: LD_INT 0
61282: PPUSH
61283: PPUSH
61284: PPUSH
61285: PPUSH
61286: PPUSH
// if mpTeamGame then
61287: LD_EXP 11
61291: IFFALSE 61488
// begin first := depots [ 1 ] ;
61293: LD_ADDR_VAR 0 4
61297: PUSH
61298: LD_VAR 0 1
61302: PUSH
61303: LD_INT 1
61305: ARRAY
61306: ST_TO_ADDR
// side := GetSide ( first ) ;
61307: LD_ADDR_VAR 0 6
61311: PUSH
61312: LD_VAR 0 4
61316: PPUSH
61317: CALL_OW 255
61321: ST_TO_ADDR
// for i := 1 to mpTeams do
61322: LD_ADDR_VAR 0 3
61326: PUSH
61327: DOUBLE
61328: LD_INT 1
61330: DEC
61331: ST_TO_ADDR
61332: LD_EXP 10
61336: PUSH
61337: FOR_TO
61338: IFFALSE 61372
// if side in mpTeams [ i ] then
61340: LD_VAR 0 6
61344: PUSH
61345: LD_EXP 10
61349: PUSH
61350: LD_VAR 0 3
61354: ARRAY
61355: IN
61356: IFFALSE 61370
// begin team := i ;
61358: LD_ADDR_VAR 0 5
61362: PUSH
61363: LD_VAR 0 3
61367: ST_TO_ADDR
// break ;
61368: GO 61372
// end ;
61370: GO 61337
61372: POP
61373: POP
// if not team then
61374: LD_VAR 0 5
61378: NOT
61379: IFFALSE 61383
// exit ;
61381: GO 61597
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61383: LD_EXP 34
61387: PPUSH
61388: LD_INT 81
61390: PUSH
61391: LD_VAR 0 6
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PPUSH
61400: CALL_OW 70
61404: IFFALSE 61408
// exit ;
61406: GO 61597
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
61408: LD_ADDR_EXP 59
61412: PUSH
61413: LD_EXP 59
61417: PPUSH
61418: LD_VAR 0 5
61422: PPUSH
61423: LD_EXP 59
61427: PUSH
61428: LD_VAR 0 5
61432: ARRAY
61433: PUSH
61434: LD_INT 1
61436: PLUS
61437: PPUSH
61438: CALL_OW 1
61442: ST_TO_ADDR
// for i in mpTeams [ team ] do
61443: LD_ADDR_VAR 0 3
61447: PUSH
61448: LD_EXP 10
61452: PUSH
61453: LD_VAR 0 5
61457: ARRAY
61458: PUSH
61459: FOR_IN
61460: IFFALSE 61484
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
61462: LD_VAR 0 3
61466: PPUSH
61467: LD_EXP 59
61471: PUSH
61472: LD_VAR 0 5
61476: ARRAY
61477: PPUSH
61478: CALL_OW 506
61482: GO 61459
61484: POP
61485: POP
// end else
61486: GO 61597
// begin first := depots [ 1 ] ;
61488: LD_ADDR_VAR 0 4
61492: PUSH
61493: LD_VAR 0 1
61497: PUSH
61498: LD_INT 1
61500: ARRAY
61501: ST_TO_ADDR
// side := GetSide ( first ) ;
61502: LD_ADDR_VAR 0 6
61506: PUSH
61507: LD_VAR 0 4
61511: PPUSH
61512: CALL_OW 255
61516: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61517: LD_EXP 34
61521: PPUSH
61522: LD_INT 81
61524: PUSH
61525: LD_VAR 0 6
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PPUSH
61534: CALL_OW 70
61538: IFFALSE 61542
// exit ;
61540: GO 61597
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
61542: LD_ADDR_EXP 59
61546: PUSH
61547: LD_EXP 59
61551: PPUSH
61552: LD_VAR 0 6
61556: PPUSH
61557: LD_EXP 59
61561: PUSH
61562: LD_VAR 0 6
61566: ARRAY
61567: PUSH
61568: LD_INT 1
61570: PLUS
61571: PPUSH
61572: CALL_OW 1
61576: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
61577: LD_VAR 0 6
61581: PPUSH
61582: LD_EXP 59
61586: PUSH
61587: LD_VAR 0 6
61591: ARRAY
61592: PPUSH
61593: CALL_OW 506
// end ; end ;
61597: LD_VAR 0 2
61601: RET
// function UpdateCounter ; var i ; begin
61602: LD_INT 0
61604: PPUSH
61605: PPUSH
// result := [ ] ;
61606: LD_ADDR_VAR 0 1
61610: PUSH
61611: EMPTY
61612: ST_TO_ADDR
// if mpTeamGame then
61613: LD_EXP 11
61617: IFFALSE 61684
// begin for i := 1 to mpTeams do
61619: LD_ADDR_VAR 0 2
61623: PUSH
61624: DOUBLE
61625: LD_INT 1
61627: DEC
61628: ST_TO_ADDR
61629: LD_EXP 10
61633: PUSH
61634: FOR_TO
61635: IFFALSE 61680
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
61637: LD_ADDR_VAR 0 1
61641: PUSH
61642: LD_VAR 0 1
61646: PUSH
61647: LD_STRING #KingoftheHill-Team
61649: PUSH
61650: LD_VAR 0 2
61654: PUSH
61655: LD_EXP 59
61659: PUSH
61660: LD_VAR 0 2
61664: ARRAY
61665: PUSH
61666: LD_EXP 35
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: ADD
61677: ST_TO_ADDR
61678: GO 61634
61680: POP
61681: POP
// end else
61682: GO 61757
// begin for i := 1 to 8 do
61684: LD_ADDR_VAR 0 2
61688: PUSH
61689: DOUBLE
61690: LD_INT 1
61692: DEC
61693: ST_TO_ADDR
61694: LD_INT 8
61696: PUSH
61697: FOR_TO
61698: IFFALSE 61755
// if mpSidePositions [ i ] then
61700: LD_EXP 7
61704: PUSH
61705: LD_VAR 0 2
61709: ARRAY
61710: IFFALSE 61753
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
61712: LD_ADDR_VAR 0 1
61716: PUSH
61717: LD_VAR 0 1
61721: PUSH
61722: LD_STRING #KingoftheHill-Player
61724: PUSH
61725: LD_VAR 0 2
61729: PUSH
61730: LD_EXP 59
61734: PUSH
61735: LD_VAR 0 2
61739: ARRAY
61740: PUSH
61741: LD_EXP 35
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: ADD
61752: ST_TO_ADDR
61753: GO 61697
61755: POP
61756: POP
// end ; mpDisplayStrings := result ;
61757: LD_ADDR_EXP 38
61761: PUSH
61762: LD_VAR 0 1
61766: ST_TO_ADDR
// end ;
61767: LD_VAR 0 1
61771: RET
// export function HowMuchPointsKing ( side ) ; begin
61772: LD_INT 0
61774: PPUSH
// result := HowMuchPoints ( side ) ;
61775: LD_ADDR_VAR 0 2
61779: PUSH
61780: LD_VAR 0 1
61784: PPUSH
61785: CALL 61795 0 1
61789: ST_TO_ADDR
// end ;
61790: LD_VAR 0 2
61794: RET
// function HowMuchPoints ( side ) ; var i ; begin
61795: LD_INT 0
61797: PPUSH
61798: PPUSH
// if mpTeamGame then
61799: LD_EXP 11
61803: IFFALSE 61872
// begin for i := 1 to Count ( mpTeams ) do
61805: LD_ADDR_VAR 0 3
61809: PUSH
61810: DOUBLE
61811: LD_INT 1
61813: DEC
61814: ST_TO_ADDR
61815: LD_EXP 10
61819: PPUSH
61820: CALL 12894 0 1
61824: PUSH
61825: FOR_TO
61826: IFFALSE 61868
// begin if side in mpTeams [ i ] then
61828: LD_VAR 0 1
61832: PUSH
61833: LD_EXP 10
61837: PUSH
61838: LD_VAR 0 3
61842: ARRAY
61843: IN
61844: IFFALSE 61866
// begin result := mpKingPoints [ i ] ;
61846: LD_ADDR_VAR 0 2
61850: PUSH
61851: LD_EXP 59
61855: PUSH
61856: LD_VAR 0 3
61860: ARRAY
61861: ST_TO_ADDR
// exit ;
61862: POP
61863: POP
61864: GO 61888
// end ; end ;
61866: GO 61825
61868: POP
61869: POP
// end else
61870: GO 61888
// result := mpKingPoints [ side ] ;
61872: LD_ADDR_VAR 0 2
61876: PUSH
61877: LD_EXP 59
61881: PUSH
61882: LD_VAR 0 1
61886: ARRAY
61887: ST_TO_ADDR
// end ;
61888: LD_VAR 0 2
61892: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
61893: LD_EXP 39
61897: IFFALSE 61905
61899: PUSH
61900: CALL 62317 0 0
61904: AND
61905: IFFALSE 61913
61907: PUSH
61908: LD_OWVAR 4
61912: AND
61913: IFFALSE 62166
61915: GO 61917
61917: DISABLE
61918: LD_INT 0
61920: PPUSH
61921: PPUSH
// begin canWin := false ;
61922: LD_ADDR_VAR 0 2
61926: PUSH
61927: LD_INT 0
61929: ST_TO_ADDR
// if not HasPower ( your_side ) then
61930: LD_OWVAR 2
61934: PPUSH
61935: CALL 62359 0 1
61939: NOT
61940: IFFALSE 61951
// begin Multiplayer_Loose_Message ;
61942: CALL_OW 521
// enable ( mpLose ) ;
61946: LD_INT 102
61948: ENABLE_MARKED
// end else
61949: GO 62166
// begin if not EnemiesInGame then
61951: CALL 62169 0 0
61955: NOT
61956: IFFALSE 61963
// begin enable ( mpWin ) ;
61958: LD_INT 101
61960: ENABLE_MARKED
// exit ;
61961: GO 62166
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
61963: LD_ADDR_VAR 0 2
61967: PUSH
61968: LD_OWVAR 2
61972: PPUSH
61973: CALL 61795 0 1
61977: PUSH
61978: LD_EXP 35
61982: GREATEREQUAL
61983: IFFALSE 61996
61985: PUSH
61986: LD_OWVAR 2
61990: PPUSH
61991: CALL 62359 0 1
61995: AND
61996: ST_TO_ADDR
// for i := 1 to 8 do
61997: LD_ADDR_VAR 0 1
62001: PUSH
62002: DOUBLE
62003: LD_INT 1
62005: DEC
62006: ST_TO_ADDR
62007: LD_INT 8
62009: PUSH
62010: FOR_TO
62011: IFFALSE 62152
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62013: LD_EXP 7
62017: PUSH
62018: LD_VAR 0 1
62022: ARRAY
62023: IFFALSE 62036
62025: PUSH
62026: LD_VAR 0 1
62030: PPUSH
62031: CALL_OW 108
62035: AND
62036: IFFALSE 62050
62038: PUSH
62039: LD_VAR 0 1
62043: PUSH
62044: LD_OWVAR 2
62048: NONEQUAL
62049: AND
62050: IFFALSE 62150
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62052: LD_EXP 8
62056: PUSH
62057: LD_VAR 0 1
62061: ARRAY
62062: NOT
62063: IFTRUE 62111
62065: PUSH
62066: LD_EXP 8
62070: PUSH
62071: LD_VAR 0 1
62075: ARRAY
62076: PUSH
62077: LD_EXP 8
62081: PUSH
62082: LD_OWVAR 2
62086: ARRAY
62087: NONEQUAL
62088: IFFALSE 62110
62090: PUSH
62091: LD_OWVAR 2
62095: PPUSH
62096: LD_VAR 0 1
62100: PPUSH
62101: CALL_OW 81
62105: PUSH
62106: LD_INT 1
62108: NONEQUAL
62109: AND
62110: OR
62111: IFFALSE 62150
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
62113: LD_VAR 0 1
62117: PPUSH
62118: CALL 61795 0 1
62122: PUSH
62123: LD_EXP 35
62127: GREATEREQUAL
62128: IFFALSE 62141
62130: PUSH
62131: LD_VAR 0 1
62135: PPUSH
62136: CALL 62359 0 1
62140: AND
62141: IFFALSE 62150
// begin enable ( mpLose ) ;
62143: LD_INT 102
62145: ENABLE_MARKED
// exit ;
62146: POP
62147: POP
62148: GO 62166
// end ;
62150: GO 62010
62152: POP
62153: POP
// if canWin then
62154: LD_VAR 0 2
62158: IFFALSE 62165
// enable ( mpWin ) else
62160: LD_INT 101
62162: ENABLE_MARKED
62163: GO 62166
// enable ;
62165: ENABLE
// end ; end ;
62166: PPOPN 2
62168: END
// function EnemiesInGame ; var i ; begin
62169: LD_INT 0
62171: PPUSH
62172: PPUSH
// result := false ;
62173: LD_ADDR_VAR 0 1
62177: PUSH
62178: LD_INT 0
62180: ST_TO_ADDR
// for i := 1 to 8 do
62181: LD_ADDR_VAR 0 2
62185: PUSH
62186: DOUBLE
62187: LD_INT 1
62189: DEC
62190: ST_TO_ADDR
62191: LD_INT 8
62193: PUSH
62194: FOR_TO
62195: IFFALSE 62310
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
62197: LD_VAR 0 2
62201: PUSH
62202: LD_OWVAR 2
62206: NONEQUAL
62207: IFFALSE 62220
62209: PUSH
62210: LD_VAR 0 2
62214: PPUSH
62215: CALL 62359 0 1
62219: AND
62220: IFFALSE 62233
62222: PUSH
62223: LD_VAR 0 2
62227: PPUSH
62228: CALL_OW 108
62232: AND
62233: IFFALSE 62308
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62235: LD_EXP 8
62239: PUSH
62240: LD_VAR 0 2
62244: ARRAY
62245: NOT
62246: IFTRUE 62294
62248: PUSH
62249: LD_EXP 8
62253: PUSH
62254: LD_VAR 0 2
62258: ARRAY
62259: PUSH
62260: LD_EXP 8
62264: PUSH
62265: LD_OWVAR 2
62269: ARRAY
62270: NONEQUAL
62271: IFFALSE 62293
62273: PUSH
62274: LD_OWVAR 2
62278: PPUSH
62279: LD_VAR 0 2
62283: PPUSH
62284: CALL_OW 81
62288: PUSH
62289: LD_INT 1
62291: NONEQUAL
62292: AND
62293: OR
62294: IFFALSE 62308
// begin result := true ;
62296: LD_ADDR_VAR 0 1
62300: PUSH
62301: LD_INT 1
62303: ST_TO_ADDR
// exit ;
62304: POP
62305: POP
62306: GO 62312
// end ;
62308: GO 62194
62310: POP
62311: POP
// end ;
62312: LD_VAR 0 1
62316: RET
// function CanWinLoose ; begin
62317: LD_INT 0
62319: PPUSH
// result := true ;
62320: LD_ADDR_VAR 0 1
62324: PUSH
62325: LD_INT 1
62327: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
62328: CALL_OW 531
62332: IFFALSE 62344
62334: PUSH
62335: CALL_OW 519
62339: PUSH
62340: LD_INT 1
62342: GREATER
62343: AND
62344: IFFALSE 62354
// result := false ;
62346: LD_ADDR_VAR 0 1
62350: PUSH
62351: LD_INT 0
62353: ST_TO_ADDR
// end ;
62354: LD_VAR 0 1
62358: RET
// function HasPower ( i ) ; begin
62359: LD_INT 0
62361: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
62362: LD_ADDR_VAR 0 2
62366: PUSH
62367: LD_INT 22
62369: PUSH
62370: LD_VAR 0 1
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 2
62381: PUSH
62382: LD_INT 21
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 33
62394: PUSH
62395: LD_INT 3
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 33
62404: PUSH
62405: LD_INT 5
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PPUSH
62422: CALL_OW 69
62426: ST_TO_ADDR
// end ; end_of_file
62427: LD_VAR 0 2
62431: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62432: PPOPN 6
62434: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62435: LD_INT 0
62437: PPUSH
// begin if not units then
62438: LD_VAR 0 1
62442: NOT
62443: IFFALSE 62447
// exit ;
62445: GO 62481
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62447: LD_VAR 0 1
62451: PPUSH
62452: LD_VAR 0 2
62456: PPUSH
62457: LD_VAR 0 3
62461: PPUSH
62462: LD_VAR 0 4
62466: PPUSH
62467: LD_VAR 0 5
62471: PPUSH
62472: LD_VAR 0 6
62476: PPUSH
62477: CALL 60724 0 6
// end ;
62481: PPOPN 7
62483: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62484: LD_EXP 3
62488: PUSH
62489: LD_INT 4
62491: EQUAL
62492: IFFALSE 62528
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62494: LD_STRING setGameDifficulty(
62496: PUSH
62497: LD_OWVAR 67
62501: STR
62502: PUSH
62503: LD_STRING )
62505: STR
62506: PPUSH
62507: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62511: LD_STRING displayDifficulty(
62513: PUSH
62514: LD_OWVAR 67
62518: STR
62519: PUSH
62520: LD_STRING )
62522: STR
62523: PPUSH
62524: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62528: CALL 62557 0 0
// end ; end_of_file
62532: PPOPN 1
62534: END
// every 0 0$1 do
62535: GO 62537
62537: DISABLE
// begin enable ;
62538: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62539: LD_STRING updateTimer(
62541: PUSH
62542: LD_OWVAR 1
62546: STR
62547: PUSH
62548: LD_STRING );
62550: STR
62551: PPUSH
62552: CALL_OW 559
// end ;
62556: END
// export function SOS_MapStart ( ) ; begin
62557: LD_INT 0
62559: PPUSH
// UpdateFactoryWaypoints ( ) ;
62560: CALL 63491 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62564: CALL 63743 0 0
// ParseMultiDataToLua ( ) ;
62568: CALL 63890 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
62572: LD_STRING setSpecLogoNumber(
62574: PUSH
62575: LD_INT 2
62577: STR
62578: PUSH
62579: LD_STRING ,
62581: STR
62582: PUSH
62583: LD_INT 1
62585: STR
62586: PUSH
62587: LD_STRING )
62589: STR
62590: PPUSH
62591: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
62595: LD_STRING setSpecLogoNumber(
62597: PUSH
62598: LD_INT 3
62600: STR
62601: PUSH
62602: LD_STRING ,
62604: STR
62605: PUSH
62606: LD_INT 2
62608: STR
62609: PUSH
62610: LD_STRING )
62612: STR
62613: PPUSH
62614: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
62618: LD_STRING setSpecLogoNumber(
62620: PUSH
62621: LD_INT 4
62623: STR
62624: PUSH
62625: LD_STRING ,
62627: STR
62628: PUSH
62629: LD_INT 3
62631: STR
62632: PUSH
62633: LD_STRING )
62635: STR
62636: PPUSH
62637: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
62641: LD_STRING setSpecLogoNumber(
62643: PUSH
62644: LD_INT 5
62646: STR
62647: PUSH
62648: LD_STRING ,
62650: STR
62651: PUSH
62652: LD_INT 4
62654: STR
62655: PUSH
62656: LD_STRING )
62658: STR
62659: PPUSH
62660: CALL_OW 559
// end ;
62664: LD_VAR 0 1
62668: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
62669: LD_INT 0
62671: PPUSH
62672: PPUSH
62673: PPUSH
62674: PPUSH
62675: PPUSH
62676: PPUSH
62677: PPUSH
62678: PPUSH
62679: PPUSH
// for i := 1 to 8 do
62680: LD_ADDR_VAR 0 2
62684: PUSH
62685: DOUBLE
62686: LD_INT 1
62688: DEC
62689: ST_TO_ADDR
62690: LD_INT 8
62692: PUSH
62693: FOR_TO
62694: IFFALSE 63079
// begin if mpSidePositions [ i ] then
62696: LD_EXP 7
62700: PUSH
62701: LD_VAR 0 2
62705: ARRAY
62706: IFFALSE 63077
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
62708: LD_ADDR_VAR 0 7
62712: PUSH
62713: LD_INT 22
62715: PUSH
62716: LD_VAR 0 2
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 21
62727: PUSH
62728: LD_INT 1
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PPUSH
62739: CALL_OW 69
62743: PPUSH
62744: CALL 12894 0 1
62748: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62749: LD_ADDR_VAR 0 9
62753: PUSH
62754: LD_INT 22
62756: PUSH
62757: LD_VAR 0 2
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 2
62768: PUSH
62769: LD_INT 30
62771: PUSH
62772: LD_INT 0
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 30
62781: PUSH
62782: LD_INT 1
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: LIST
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PPUSH
62798: CALL_OW 69
62802: ST_TO_ADDR
// crates := 0 ;
62803: LD_ADDR_VAR 0 4
62807: PUSH
62808: LD_INT 0
62810: ST_TO_ADDR
// oil := 0 ;
62811: LD_ADDR_VAR 0 5
62815: PUSH
62816: LD_INT 0
62818: ST_TO_ADDR
// sib := 0 ;
62819: LD_ADDR_VAR 0 6
62823: PUSH
62824: LD_INT 0
62826: ST_TO_ADDR
// if bases then
62827: LD_VAR 0 9
62831: IFFALSE 62937
// begin for j in bases do
62833: LD_ADDR_VAR 0 3
62837: PUSH
62838: LD_VAR 0 9
62842: PUSH
62843: FOR_IN
62844: IFFALSE 62935
// begin base := GetBase ( j ) ;
62846: LD_ADDR_VAR 0 8
62850: PUSH
62851: LD_VAR 0 3
62855: PPUSH
62856: CALL_OW 274
62860: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
62861: LD_ADDR_VAR 0 4
62865: PUSH
62866: LD_VAR 0 4
62870: PUSH
62871: LD_VAR 0 8
62875: PPUSH
62876: LD_INT 1
62878: PPUSH
62879: CALL_OW 275
62883: PLUS
62884: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
62885: LD_ADDR_VAR 0 5
62889: PUSH
62890: LD_VAR 0 5
62894: PUSH
62895: LD_VAR 0 8
62899: PPUSH
62900: LD_INT 2
62902: PPUSH
62903: CALL_OW 275
62907: PLUS
62908: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
62909: LD_ADDR_VAR 0 6
62913: PUSH
62914: LD_VAR 0 6
62918: PUSH
62919: LD_VAR 0 8
62923: PPUSH
62924: LD_INT 3
62926: PPUSH
62927: CALL_OW 275
62931: PLUS
62932: ST_TO_ADDR
// end ;
62933: GO 62843
62935: POP
62936: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
62937: LD_STRING setSpecText(
62939: PUSH
62940: LD_VAR 0 2
62944: STR
62945: PUSH
62946: LD_STRING ,
62948: STR
62949: PUSH
62950: LD_INT 2
62952: STR
62953: PUSH
62954: LD_STRING ,
62956: STR
62957: PUSH
62958: LD_VAR 0 4
62962: STR
62963: PUSH
62964: LD_STRING )
62966: STR
62967: PPUSH
62968: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
62972: LD_STRING setSpecText(
62974: PUSH
62975: LD_VAR 0 2
62979: STR
62980: PUSH
62981: LD_STRING ,
62983: STR
62984: PUSH
62985: LD_INT 3
62987: STR
62988: PUSH
62989: LD_STRING ,
62991: STR
62992: PUSH
62993: LD_VAR 0 5
62997: STR
62998: PUSH
62999: LD_STRING )
63001: STR
63002: PPUSH
63003: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63007: LD_STRING setSpecText(
63009: PUSH
63010: LD_VAR 0 2
63014: STR
63015: PUSH
63016: LD_STRING ,
63018: STR
63019: PUSH
63020: LD_INT 4
63022: STR
63023: PUSH
63024: LD_STRING ,
63026: STR
63027: PUSH
63028: LD_VAR 0 6
63032: STR
63033: PUSH
63034: LD_STRING )
63036: STR
63037: PPUSH
63038: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63042: LD_STRING setSpecText(
63044: PUSH
63045: LD_VAR 0 2
63049: STR
63050: PUSH
63051: LD_STRING ,
63053: STR
63054: PUSH
63055: LD_INT 5
63057: STR
63058: PUSH
63059: LD_STRING ,
63061: STR
63062: PUSH
63063: LD_VAR 0 7
63067: STR
63068: PUSH
63069: LD_STRING )
63071: STR
63072: PPUSH
63073: CALL_OW 559
// end ; end ;
63077: GO 62693
63079: POP
63080: POP
// end ;
63081: LD_VAR 0 1
63085: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63086: LD_INT 2
63088: PUSH
63089: LD_INT 30
63091: PUSH
63092: LD_INT 0
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 30
63101: PUSH
63102: LD_INT 1
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: LIST
63113: PPUSH
63114: CALL_OW 69
63118: IFFALSE 63128
63120: GO 63122
63122: DISABLE
// begin enable ;
63123: ENABLE
// UpdateSpectatorBar ;
63124: CALL 62669 0 0
// end ;
63128: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63129: LD_INT 0
63131: PPUSH
// end ;
63132: LD_VAR 0 12
63136: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63137: LD_INT 0
63139: PPUSH
63140: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63141: LD_VAR 0 1
63145: NOT
63146: IFTRUE 63165
63148: PUSH
63149: LD_VAR 0 2
63153: PPUSH
63154: LD_VAR 0 3
63158: PPUSH
63159: CALL_OW 488
63163: NOT
63164: OR
63165: IFTRUE 63200
63167: PUSH
63168: LD_VAR 0 1
63172: PPUSH
63173: CALL_OW 266
63177: PUSH
63178: LD_INT 3
63180: NONEQUAL
63181: IFFALSE 63199
63183: PUSH
63184: LD_VAR 0 1
63188: PPUSH
63189: CALL_OW 247
63193: PUSH
63194: LD_INT 1
63196: EQUAL
63197: NOT
63198: AND
63199: OR
63200: IFFALSE 63204
// exit ;
63202: GO 63486
// if GetType ( factory ) = unit_human then
63204: LD_VAR 0 1
63208: PPUSH
63209: CALL_OW 247
63213: PUSH
63214: LD_INT 1
63216: EQUAL
63217: IFFALSE 63234
// factory := IsInUnit ( factory ) ;
63219: LD_ADDR_VAR 0 1
63223: PUSH
63224: LD_VAR 0 1
63228: PPUSH
63229: CALL_OW 310
63233: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63234: LD_VAR 0 1
63238: PPUSH
63239: CALL_OW 266
63243: PUSH
63244: LD_INT 3
63246: NONEQUAL
63247: IFFALSE 63251
// exit ;
63249: GO 63486
// for i := 1 to Count ( factoryWaypoints ) do
63251: LD_ADDR_VAR 0 5
63255: PUSH
63256: DOUBLE
63257: LD_INT 1
63259: DEC
63260: ST_TO_ADDR
63261: LD_EXP 60
63265: PPUSH
63266: CALL 12894 0 1
63270: PUSH
63271: FOR_TO
63272: IFFALSE 63434
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63274: LD_VAR 0 2
63278: PPUSH
63279: LD_VAR 0 3
63283: PPUSH
63284: CALL_OW 428
63288: PUSH
63289: LD_EXP 60
63293: PUSH
63294: LD_VAR 0 5
63298: ARRAY
63299: PUSH
63300: LD_INT 2
63302: ARRAY
63303: EQUAL
63304: IFFALSE 63336
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63306: LD_ADDR_EXP 60
63310: PUSH
63311: LD_EXP 60
63315: PPUSH
63316: LD_VAR 0 5
63320: PPUSH
63321: CALL_OW 3
63325: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63326: CALL 63491 0 0
// exit ;
63330: POP
63331: POP
63332: GO 63486
// end else
63334: GO 63432
// if factory = factoryWaypoints [ i ] [ 2 ] then
63336: LD_VAR 0 1
63340: PUSH
63341: LD_EXP 60
63345: PUSH
63346: LD_VAR 0 5
63350: ARRAY
63351: PUSH
63352: LD_INT 2
63354: ARRAY
63355: EQUAL
63356: IFFALSE 63432
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63358: LD_ADDR_EXP 60
63362: PUSH
63363: LD_EXP 60
63367: PPUSH
63368: LD_VAR 0 5
63372: PPUSH
63373: CALL_OW 3
63377: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63378: LD_ADDR_EXP 60
63382: PUSH
63383: LD_EXP 60
63387: PPUSH
63388: LD_VAR 0 1
63392: PPUSH
63393: CALL_OW 255
63397: PUSH
63398: LD_VAR 0 1
63402: PUSH
63403: LD_VAR 0 2
63407: PUSH
63408: LD_VAR 0 3
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: PPUSH
63419: CALL 48860 0 2
63423: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63424: CALL 63491 0 0
// exit ;
63428: POP
63429: POP
63430: GO 63486
// end ; end ;
63432: GO 63271
63434: POP
63435: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63436: LD_ADDR_EXP 60
63440: PUSH
63441: LD_EXP 60
63445: PPUSH
63446: LD_VAR 0 1
63450: PPUSH
63451: CALL_OW 255
63455: PUSH
63456: LD_VAR 0 1
63460: PUSH
63461: LD_VAR 0 2
63465: PUSH
63466: LD_VAR 0 3
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: PPUSH
63477: CALL 48860 0 2
63481: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63482: CALL 63491 0 0
// end ;
63486: LD_VAR 0 4
63490: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63491: LD_INT 0
63493: PPUSH
63494: PPUSH
63495: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63496: LD_STRING resetFactoryWaypoint();
63498: PPUSH
63499: CALL_OW 559
// if factoryWaypoints then
63503: LD_EXP 60
63507: IFFALSE 63628
// begin list := factoryWaypoints ;
63509: LD_ADDR_VAR 0 3
63513: PUSH
63514: LD_EXP 60
63518: ST_TO_ADDR
// for i := 1 to list do
63519: LD_ADDR_VAR 0 2
63523: PUSH
63524: DOUBLE
63525: LD_INT 1
63527: DEC
63528: ST_TO_ADDR
63529: LD_VAR 0 3
63533: PUSH
63534: FOR_TO
63535: IFFALSE 63626
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63537: LD_STRING setFactoryWaypointXY(
63539: PUSH
63540: LD_VAR 0 3
63544: PUSH
63545: LD_VAR 0 2
63549: ARRAY
63550: PUSH
63551: LD_INT 1
63553: ARRAY
63554: STR
63555: PUSH
63556: LD_STRING ,
63558: STR
63559: PUSH
63560: LD_VAR 0 3
63564: PUSH
63565: LD_VAR 0 2
63569: ARRAY
63570: PUSH
63571: LD_INT 2
63573: ARRAY
63574: STR
63575: PUSH
63576: LD_STRING ,
63578: STR
63579: PUSH
63580: LD_VAR 0 3
63584: PUSH
63585: LD_VAR 0 2
63589: ARRAY
63590: PUSH
63591: LD_INT 3
63593: ARRAY
63594: STR
63595: PUSH
63596: LD_STRING ,
63598: STR
63599: PUSH
63600: LD_VAR 0 3
63604: PUSH
63605: LD_VAR 0 2
63609: ARRAY
63610: PUSH
63611: LD_INT 4
63613: ARRAY
63614: STR
63615: PUSH
63616: LD_STRING )
63618: STR
63619: PPUSH
63620: CALL_OW 559
63624: GO 63534
63626: POP
63627: POP
// end ; end ;
63628: LD_VAR 0 1
63632: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63633: LD_INT 0
63635: PPUSH
// if HexInfo ( x , y ) = warehouse then
63636: LD_VAR 0 2
63640: PPUSH
63641: LD_VAR 0 3
63645: PPUSH
63646: CALL_OW 428
63650: PUSH
63651: LD_VAR 0 1
63655: EQUAL
63656: IFFALSE 63683
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63658: LD_ADDR_EXP 62
63662: PUSH
63663: LD_EXP 62
63667: PPUSH
63668: LD_VAR 0 1
63672: PPUSH
63673: LD_INT 0
63675: PPUSH
63676: CALL_OW 1
63680: ST_TO_ADDR
63681: GO 63734
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63683: LD_ADDR_EXP 62
63687: PUSH
63688: LD_EXP 62
63692: PPUSH
63693: LD_VAR 0 1
63697: PPUSH
63698: LD_VAR 0 1
63702: PPUSH
63703: CALL_OW 255
63707: PUSH
63708: LD_VAR 0 1
63712: PUSH
63713: LD_VAR 0 2
63717: PUSH
63718: LD_VAR 0 3
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: PPUSH
63729: CALL_OW 1
63733: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63734: CALL 63743 0 0
// end ;
63738: LD_VAR 0 4
63742: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63743: LD_INT 0
63745: PPUSH
63746: PPUSH
63747: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63748: LD_STRING resetWarehouseGatheringPoints();
63750: PPUSH
63751: CALL_OW 559
// if warehouseGatheringPoints then
63755: LD_EXP 62
63759: IFFALSE 63885
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63761: LD_ADDR_VAR 0 3
63765: PUSH
63766: LD_EXP 62
63770: PPUSH
63771: CALL 52794 0 1
63775: ST_TO_ADDR
// for i := 1 to list do
63776: LD_ADDR_VAR 0 2
63780: PUSH
63781: DOUBLE
63782: LD_INT 1
63784: DEC
63785: ST_TO_ADDR
63786: LD_VAR 0 3
63790: PUSH
63791: FOR_TO
63792: IFFALSE 63883
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63794: LD_STRING setWarehouseGatheringPointXY(
63796: PUSH
63797: LD_VAR 0 3
63801: PUSH
63802: LD_VAR 0 2
63806: ARRAY
63807: PUSH
63808: LD_INT 1
63810: ARRAY
63811: STR
63812: PUSH
63813: LD_STRING ,
63815: STR
63816: PUSH
63817: LD_VAR 0 3
63821: PUSH
63822: LD_VAR 0 2
63826: ARRAY
63827: PUSH
63828: LD_INT 2
63830: ARRAY
63831: STR
63832: PUSH
63833: LD_STRING ,
63835: STR
63836: PUSH
63837: LD_VAR 0 3
63841: PUSH
63842: LD_VAR 0 2
63846: ARRAY
63847: PUSH
63848: LD_INT 3
63850: ARRAY
63851: STR
63852: PUSH
63853: LD_STRING ,
63855: STR
63856: PUSH
63857: LD_VAR 0 3
63861: PUSH
63862: LD_VAR 0 2
63866: ARRAY
63867: PUSH
63868: LD_INT 4
63870: ARRAY
63871: STR
63872: PUSH
63873: LD_STRING )
63875: STR
63876: PPUSH
63877: CALL_OW 559
63881: GO 63791
63883: POP
63884: POP
// end ; end ;
63885: LD_VAR 0 1
63889: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
63890: LD_INT 0
63892: PPUSH
63893: PPUSH
// if not mpSidePositions then
63894: LD_EXP 7
63898: NOT
63899: IFFALSE 63903
// exit ;
63901: GO 63974
// result :=  ;
63903: LD_ADDR_VAR 0 1
63907: PUSH
63908: LD_STRING 
63910: ST_TO_ADDR
// for i := 1 to 8 do
63911: LD_ADDR_VAR 0 2
63915: PUSH
63916: DOUBLE
63917: LD_INT 1
63919: DEC
63920: ST_TO_ADDR
63921: LD_INT 8
63923: PUSH
63924: FOR_TO
63925: IFFALSE 63955
// begin result := result & mpSidePositions [ i ] & ; ;
63927: LD_ADDR_VAR 0 1
63931: PUSH
63932: LD_VAR 0 1
63936: PUSH
63937: LD_EXP 7
63941: PUSH
63942: LD_VAR 0 2
63946: ARRAY
63947: STR
63948: PUSH
63949: LD_STRING ;
63951: STR
63952: ST_TO_ADDR
// end ;
63953: GO 63924
63955: POP
63956: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
63957: LD_STRING setMultiplayerRealPosition("
63959: PUSH
63960: LD_VAR 0 1
63964: STR
63965: PUSH
63966: LD_STRING ");
63968: STR
63969: PPUSH
63970: CALL_OW 559
// end ;
63974: LD_VAR 0 1
63978: RET
