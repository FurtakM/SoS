// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2802 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3225 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 2
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 120 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 120
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 2
 841: PUSH
 842: LD_INT 3
 844: PUSH
 845: LD_INT 4
 847: PUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 6
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Center1 , Center2 ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 7
 869: PUSH
 870: LD_INT 8
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 19
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 6
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 24
 921: PUSH
 922: LD_EXP 6
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 25
 935: PUSH
 936: LD_EXP 6
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 15
 949: PUSH
 950: LD_EXP 6
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 27
 963: PUSH
 964: LD_EXP 6
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 6
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 6
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// mpKingArea := 0 ;
1009: LD_ADDR_EXP 34
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// mpPoints := 0 ;
1017: LD_ADDR_EXP 35
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// mpEmissions := 0 ;
1025: LD_ADDR_EXP 37
1029: PUSH
1030: LD_INT 0
1032: ST_TO_ADDR
// kingArea := 0 ;
1033: LD_ADDR_EXP 1
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// kingCamArea := 0 ;
1041: LD_ADDR_EXP 2
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1049: LD_EXP 6
1053: PUSH
1054: LD_INT 9
1056: ARRAY
1057: IFFALSE 1189
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1059: LD_ADDR_EXP 36
1063: PUSH
1064: LD_INT 1
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: LD_INT 1
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: LD_INT 1
1087: PUSH
1088: LD_INT 1
1090: PUSH
1091: LD_INT 3
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: PUSH
1104: LD_INT 12
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 1
1112: PUSH
1113: LD_INT 24
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_INT 12
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 23
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 21
1146: PUSH
1147: LD_INT 1
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 42
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: LD_INT 21
1164: PUSH
1165: LD_INT 1
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 42
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: LIST
1188: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1189: LD_ADDR_EXP 16
1193: PUSH
1194: LD_EXP 6
1198: PUSH
1199: LD_INT 11
1201: ARRAY
1202: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1203: LD_ADDR_EXP 22
1207: PUSH
1208: LD_EXP 6
1212: PUSH
1213: LD_INT 12
1215: ARRAY
1216: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1217: LD_ADDR_EXP 26
1221: PUSH
1222: LD_EXP 6
1226: PUSH
1227: LD_INT 13
1229: ARRAY
1230: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1231: LD_ADDR_EXP 33
1235: PUSH
1236: LD_EXP 6
1240: PUSH
1241: LD_INT 14
1243: ARRAY
1244: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1245: LD_ADDR_EXP 30
1249: PUSH
1250: LD_EXP 6
1254: PUSH
1255: LD_INT 15
1257: ARRAY
1258: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1259: LD_ADDR_EXP 28
1263: PUSH
1264: LD_EXP 6
1268: PUSH
1269: LD_INT 18
1271: ARRAY
1272: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 6
1282: PUSH
1283: LD_INT 21
1285: ARRAY
1286: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1287: LD_ADDR_EXP 31
1291: PUSH
1292: LD_INT 9
1294: PUSH
1295: LD_INT 10
1297: PUSH
1298: LD_INT 11
1300: PUSH
1301: LD_INT 12
1303: PUSH
1304: LD_INT 13
1306: PUSH
1307: LD_INT 14
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 1 ) , GetBuildingFromArea ( DepotArea2 , 1 ) , GetBuildingFromArea ( DepotArea3 , 1 ) , GetBuildingFromArea ( DepotArea4 , 4 ) , GetBuildingFromArea ( DepotArea5 , 4 ) , GetBuildingFromArea ( DepotArea6 , 4 ) ] ;
1318: LD_ADDR_VAR 0 8
1322: PUSH
1323: LD_INT 15
1325: PPUSH
1326: LD_INT 1
1328: PPUSH
1329: CALL 54257 0 2
1333: PUSH
1334: LD_INT 16
1336: PPUSH
1337: LD_INT 1
1339: PPUSH
1340: CALL 54257 0 2
1344: PUSH
1345: LD_INT 17
1347: PPUSH
1348: LD_INT 1
1350: PPUSH
1351: CALL 54257 0 2
1355: PUSH
1356: LD_INT 18
1358: PPUSH
1359: LD_INT 4
1361: PPUSH
1362: CALL 54257 0 2
1366: PUSH
1367: LD_INT 19
1369: PPUSH
1370: LD_INT 4
1372: PPUSH
1373: CALL 54257 0 2
1377: PUSH
1378: LD_INT 20
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: CALL 54257 0 2
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1397: LD_ADDR_VAR 0 3
1401: PUSH
1402: DOUBLE
1403: LD_INT 1
1405: DEC
1406: ST_TO_ADDR
1407: LD_VAR 0 8
1411: PPUSH
1412: CALL 13562 0 1
1416: PUSH
1417: FOR_TO
1418: IFFALSE 1522
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1420: LD_ADDR_EXP 21
1424: PUSH
1425: LD_EXP 21
1429: PPUSH
1430: LD_VAR 0 3
1434: PPUSH
1435: LD_VAR 0 8
1439: PUSH
1440: LD_VAR 0 3
1444: ARRAY
1445: PUSH
1446: LD_INT 1
1448: ARRAY
1449: PPUSH
1450: LD_VAR 0 8
1454: PUSH
1455: LD_VAR 0 3
1459: ARRAY
1460: PUSH
1461: LD_INT 3
1463: ARRAY
1464: PPUSH
1465: LD_INT 10
1467: PPUSH
1468: CALL_OW 272
1472: PUSH
1473: LD_VAR 0 8
1477: PUSH
1478: LD_VAR 0 3
1482: ARRAY
1483: PUSH
1484: LD_INT 2
1486: ARRAY
1487: PPUSH
1488: LD_VAR 0 8
1492: PUSH
1493: LD_VAR 0 3
1497: ARRAY
1498: PUSH
1499: LD_INT 3
1501: ARRAY
1502: PPUSH
1503: LD_INT 10
1505: PPUSH
1506: CALL_OW 273
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 1
1519: ST_TO_ADDR
1520: GO 1417
1522: POP
1523: POP
// if hasOil then
1524: LD_VAR 0 5
1528: IFFALSE 1639
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1530: LD_ADDR_VAR 0 4
1534: PUSH
1535: LD_EXP 6
1539: PUSH
1540: LD_INT 6
1542: ARRAY
1543: PUSH
1544: LD_INT 2
1546: EQUAL
1547: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) , GetSourcesFromArea ( OilArea5 , all ) , GetSourcesFromArea ( OilArea6 , all ) ] ;
1548: LD_ADDR_EXP 12
1552: PUSH
1553: LD_INT 21
1555: PPUSH
1556: LD_VAR 0 4
1560: PPUSH
1561: CALL 54090 0 2
1565: PUSH
1566: LD_INT 22
1568: PPUSH
1569: LD_VAR 0 4
1573: PPUSH
1574: CALL 54090 0 2
1578: PUSH
1579: LD_INT 23
1581: PPUSH
1582: LD_VAR 0 4
1586: PPUSH
1587: CALL 54090 0 2
1591: PUSH
1592: LD_INT 24
1594: PPUSH
1595: LD_VAR 0 4
1599: PPUSH
1600: CALL 54090 0 2
1604: PUSH
1605: LD_INT 25
1607: PPUSH
1608: LD_VAR 0 4
1612: PPUSH
1613: CALL 54090 0 2
1617: PUSH
1618: LD_INT 26
1620: PPUSH
1621: LD_VAR 0 4
1625: PPUSH
1626: CALL 54090 0 2
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: ST_TO_ADDR
// end ; if hasSib then
1639: LD_VAR 0 6
1643: IFFALSE 1754
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1645: LD_ADDR_VAR 0 4
1649: PUSH
1650: LD_EXP 6
1654: PUSH
1655: LD_INT 7
1657: ARRAY
1658: PUSH
1659: LD_INT 2
1661: EQUAL
1662: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) , GetSourcesFromArea ( SibArea5 , all ) , GetSourcesFromArea ( SibArea6 , all ) ] ;
1663: LD_ADDR_EXP 13
1667: PUSH
1668: LD_INT 27
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 54090 0 2
1680: PUSH
1681: LD_INT 28
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 54090 0 2
1693: PUSH
1694: LD_INT 29
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 54090 0 2
1706: PUSH
1707: LD_INT 30
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 54090 0 2
1719: PUSH
1720: LD_INT 31
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 54090 0 2
1732: PUSH
1733: LD_INT 32
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 54090 0 2
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1754: LD_VAR 0 7
1758: PUSH
1759: LD_INT 1
1761: GREATEREQUAL
1762: IFFALSE 1774
// mpDepots := startPos ;
1764: LD_ADDR_EXP 14
1768: PUSH
1769: LD_VAR 0 8
1773: ST_TO_ADDR
// if baseLevel >= 2 then
1774: LD_VAR 0 7
1778: PUSH
1779: LD_INT 2
1781: GREATEREQUAL
1782: IFFALSE 2097
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( BunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( BunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( BunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( BunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea3 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea6 , 1 ) ] ] ;
1784: LD_ADDR_EXP 17
1788: PUSH
1789: LD_INT 31
1791: PUSH
1792: LD_INT 33
1794: PPUSH
1795: LD_INT 4
1797: PPUSH
1798: CALL 54257 0 2
1802: ADD
1803: PUSH
1804: LD_INT 31
1806: PUSH
1807: LD_INT 34
1809: PPUSH
1810: LD_INT 4
1812: PPUSH
1813: CALL 54257 0 2
1817: ADD
1818: PUSH
1819: LD_INT 4
1821: PUSH
1822: LD_INT 35
1824: PPUSH
1825: LD_INT 4
1827: PPUSH
1828: CALL 54257 0 2
1832: ADD
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 31
1841: PUSH
1842: LD_INT 36
1844: PPUSH
1845: LD_INT 4
1847: PPUSH
1848: CALL 54257 0 2
1852: ADD
1853: PUSH
1854: LD_INT 31
1856: PUSH
1857: LD_INT 37
1859: PPUSH
1860: LD_INT 4
1862: PPUSH
1863: CALL 54257 0 2
1867: ADD
1868: PUSH
1869: LD_INT 4
1871: PUSH
1872: LD_INT 38
1874: PPUSH
1875: LD_INT 4
1877: PPUSH
1878: CALL 54257 0 2
1882: ADD
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 31
1891: PUSH
1892: LD_INT 39
1894: PPUSH
1895: LD_INT 4
1897: PPUSH
1898: CALL 54257 0 2
1902: ADD
1903: PUSH
1904: LD_INT 31
1906: PUSH
1907: LD_INT 40
1909: PPUSH
1910: LD_INT 4
1912: PPUSH
1913: CALL 54257 0 2
1917: ADD
1918: PUSH
1919: LD_INT 4
1921: PUSH
1922: LD_INT 41
1924: PPUSH
1925: LD_INT 4
1927: PPUSH
1928: CALL 54257 0 2
1932: ADD
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: PUSH
1939: LD_INT 31
1941: PUSH
1942: LD_INT 42
1944: PPUSH
1945: LD_INT 1
1947: PPUSH
1948: CALL 54257 0 2
1952: ADD
1953: PUSH
1954: LD_INT 31
1956: PUSH
1957: LD_INT 43
1959: PPUSH
1960: LD_INT 1
1962: PPUSH
1963: CALL 54257 0 2
1967: ADD
1968: PUSH
1969: LD_INT 4
1971: PUSH
1972: LD_INT 44
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: CALL 54257 0 2
1982: ADD
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 31
1991: PUSH
1992: LD_INT 45
1994: PPUSH
1995: LD_INT 1
1997: PPUSH
1998: CALL 54257 0 2
2002: ADD
2003: PUSH
2004: LD_INT 31
2006: PUSH
2007: LD_INT 46
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL 54257 0 2
2017: ADD
2018: PUSH
2019: LD_INT 4
2021: PUSH
2022: LD_INT 47
2024: PPUSH
2025: LD_INT 1
2027: PPUSH
2028: CALL 54257 0 2
2032: ADD
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 31
2041: PUSH
2042: LD_INT 48
2044: PPUSH
2045: LD_INT 1
2047: PPUSH
2048: CALL 54257 0 2
2052: ADD
2053: PUSH
2054: LD_INT 31
2056: PUSH
2057: LD_INT 49
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: CALL 54257 0 2
2067: ADD
2068: PUSH
2069: LD_INT 4
2071: PUSH
2072: LD_INT 50
2074: PPUSH
2075: LD_INT 1
2077: PPUSH
2078: CALL 54257 0 2
2082: ADD
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: LIST
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// end ; end ;
2097: LD_VAR 0 2
2101: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2102: GO 2104
2104: DISABLE
2105: LD_INT 0
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
// begin if not mpShipments then
2115: LD_EXP 27
2119: NOT
2120: IFFALSE 2124
// exit ;
2122: GO 2639
// case mpShipments of 1 :
2124: LD_EXP 27
2128: PUSH
2129: LD_INT 1
2131: DOUBLE
2132: EQUAL
2133: IFTRUE 2137
2135: GO 2172
2137: POP
// begin time := 0 0$30 ;
2138: LD_ADDR_VAR 0 4
2142: PUSH
2143: LD_INT 1050
2145: ST_TO_ADDR
// normalTime := 0 0$30 ;
2146: LD_ADDR_VAR 0 6
2150: PUSH
2151: LD_INT 1050
2153: ST_TO_ADDR
// maxTime := 1 1$20 ;
2154: LD_ADDR_VAR 0 8
2158: PUSH
2159: LD_INT 2800
2161: ST_TO_ADDR
// delayTime := 0 0$5 ;
2162: LD_ADDR_VAR 0 7
2166: PUSH
2167: LD_INT 175
2169: ST_TO_ADDR
// end ; 2 :
2170: GO 2302
2172: LD_INT 2
2174: DOUBLE
2175: EQUAL
2176: IFTRUE 2180
2178: GO 2215
2180: POP
// begin time := 0 0$25 ;
2181: LD_ADDR_VAR 0 4
2185: PUSH
2186: LD_INT 875
2188: ST_TO_ADDR
// normalTime := 0 0$25 ;
2189: LD_ADDR_VAR 0 6
2193: PUSH
2194: LD_INT 875
2196: ST_TO_ADDR
// maxTime := 1 1$05 ;
2197: LD_ADDR_VAR 0 8
2201: PUSH
2202: LD_INT 2275
2204: ST_TO_ADDR
// delayTime := 0 0$4 ;
2205: LD_ADDR_VAR 0 7
2209: PUSH
2210: LD_INT 140
2212: ST_TO_ADDR
// end ; 3 :
2213: GO 2302
2215: LD_INT 3
2217: DOUBLE
2218: EQUAL
2219: IFTRUE 2223
2221: GO 2258
2223: POP
// begin time := 0 0$20 ;
2224: LD_ADDR_VAR 0 4
2228: PUSH
2229: LD_INT 700
2231: ST_TO_ADDR
// normalTime := 0 0$20 ;
2232: LD_ADDR_VAR 0 6
2236: PUSH
2237: LD_INT 700
2239: ST_TO_ADDR
// maxTime := 0 0$55 ;
2240: LD_ADDR_VAR 0 8
2244: PUSH
2245: LD_INT 1925
2247: ST_TO_ADDR
// delayTime := 0 0$3 ;
2248: LD_ADDR_VAR 0 7
2252: PUSH
2253: LD_INT 105
2255: ST_TO_ADDR
// end ; 4 :
2256: GO 2302
2258: LD_INT 4
2260: DOUBLE
2261: EQUAL
2262: IFTRUE 2266
2264: GO 2301
2266: POP
// begin time := 0 0$15 ;
2267: LD_ADDR_VAR 0 4
2271: PUSH
2272: LD_INT 525
2274: ST_TO_ADDR
// normalTime := 0 0$15 ;
2275: LD_ADDR_VAR 0 6
2279: PUSH
2280: LD_INT 525
2282: ST_TO_ADDR
// maxTime := 0 0$45 ;
2283: LD_ADDR_VAR 0 8
2287: PUSH
2288: LD_INT 1575
2290: ST_TO_ADDR
// delayTime := 0 0$2 ;
2291: LD_ADDR_VAR 0 7
2295: PUSH
2296: LD_INT 70
2298: ST_TO_ADDR
// end ; end ;
2299: GO 2302
2301: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2302: LD_ADDR_VAR 0 3
2306: PUSH
2307: LD_INT 1
2309: PUSH
2310: LD_INT 2
2312: PUSH
2313: LD_INT 3
2315: PUSH
2316: LD_INT 4
2318: PUSH
2319: LD_INT 5
2321: PUSH
2322: LD_INT 6
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: ST_TO_ADDR
// areas := [ Center1 , Center2 ] ;
2333: LD_ADDR_VAR 0 5
2337: PUSH
2338: LD_INT 7
2340: PUSH
2341: LD_INT 8
2343: PUSH
2344: EMPTY
2345: LIST
2346: LIST
2347: ST_TO_ADDR
// for i := 1 to 8 do
2348: LD_ADDR_VAR 0 1
2352: PUSH
2353: DOUBLE
2354: LD_INT 1
2356: DEC
2357: ST_TO_ADDR
2358: LD_INT 8
2360: PUSH
2361: FOR_TO
2362: IFFALSE 2409
// begin if not mpSidePositions [ i ] then
2364: LD_EXP 7
2368: PUSH
2369: LD_VAR 0 1
2373: ARRAY
2374: NOT
2375: IFFALSE 2379
// continue ;
2377: GO 2361
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2379: LD_ADDR_VAR 0 5
2383: PUSH
2384: LD_VAR 0 5
2388: PUSH
2389: LD_VAR 0 3
2393: PUSH
2394: LD_EXP 7
2398: PUSH
2399: LD_VAR 0 1
2403: ARRAY
2404: ARRAY
2405: ADD
2406: ST_TO_ADDR
// end ;
2407: GO 2361
2409: POP
2410: POP
// x := 1 ;
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// repeat wait ( time ) ;
2419: LD_VAR 0 4
2423: PPUSH
2424: CALL_OW 67
// x := Inc ( x ) ;
2428: LD_ADDR_VAR 0 2
2432: PUSH
2433: LD_VAR 0 2
2437: PPUSH
2438: CALL 50911 0 1
2442: ST_TO_ADDR
// if x > 5 then
2443: LD_VAR 0 2
2447: PUSH
2448: LD_INT 5
2450: GREATER
2451: IFFALSE 2461
// x := 1 ;
2453: LD_ADDR_VAR 0 2
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// for i in areas do
2461: LD_ADDR_VAR 0 1
2465: PUSH
2466: LD_VAR 0 5
2470: PUSH
2471: FOR_IN
2472: IFFALSE 2511
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2474: LD_VAR 0 1
2478: PPUSH
2479: LD_INT 1
2481: PPUSH
2482: CALL_OW 287
2486: PUSH
2487: LD_INT 30
2489: LESS
2490: IFFALSE 2509
// begin CreateCratesArea ( x , i , true ) ;
2492: LD_VAR 0 2
2496: PPUSH
2497: LD_VAR 0 1
2501: PPUSH
2502: LD_INT 1
2504: PPUSH
2505: CALL_OW 55
// end ; end ;
2509: GO 2471
2511: POP
2512: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2513: LD_INT 51
2515: PPUSH
2516: LD_INT 1
2518: PPUSH
2519: CALL_OW 287
2523: PUSH
2524: LD_INT 0
2526: EQUAL
2527: IFFALSE 2566
// begin for i := 1 to 4 do
2529: LD_ADDR_VAR 0 1
2533: PUSH
2534: DOUBLE
2535: LD_INT 1
2537: DEC
2538: ST_TO_ADDR
2539: LD_INT 4
2541: PUSH
2542: FOR_TO
2543: IFFALSE 2562
// CreateCratesArea ( x , CenterArea , true ) ;
2545: LD_VAR 0 2
2549: PPUSH
2550: LD_INT 51
2552: PPUSH
2553: LD_INT 1
2555: PPUSH
2556: CALL_OW 55
2560: GO 2542
2562: POP
2563: POP
// end else
2564: GO 2597
// if GetResourceArea ( CenterArea , mat_cans ) < 40 then
2566: LD_INT 51
2568: PPUSH
2569: LD_INT 1
2571: PPUSH
2572: CALL_OW 287
2576: PUSH
2577: LD_INT 40
2579: LESS
2580: IFFALSE 2597
// CreateCratesArea ( x , CenterArea , true ) ;
2582: LD_VAR 0 2
2586: PPUSH
2587: LD_INT 51
2589: PPUSH
2590: LD_INT 1
2592: PPUSH
2593: CALL_OW 55
// time := time + delayTime ;
2597: LD_ADDR_VAR 0 4
2601: PUSH
2602: LD_VAR 0 4
2606: PUSH
2607: LD_VAR 0 7
2611: PLUS
2612: ST_TO_ADDR
// if time > maxTime then
2613: LD_VAR 0 4
2617: PUSH
2618: LD_VAR 0 8
2622: GREATER
2623: IFFALSE 2635
// time := normalTime ;
2625: LD_ADDR_VAR 0 4
2629: PUSH
2630: LD_VAR 0 6
2634: ST_TO_ADDR
// until false ;
2635: LD_INT 0
2637: IFFALSE 2419
// end ; end_of_file
2639: PPOPN 8
2641: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2642: LD_VAR 0 1
2646: PPUSH
2647: CALL 55055 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2651: LD_VAR 0 1
2655: PPUSH
2656: CALL 8348 0 1
// end ;
2660: PPOPN 1
2662: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: CALL 55072 0 1
// end ;
2672: PPOPN 1
2674: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2675: LD_VAR 0 1
2679: PPUSH
2680: CALL 9401 0 1
2684: PPOPN 1
2686: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2687: LD_VAR 0 1
2691: PPUSH
2692: LD_VAR 0 2
2696: PPUSH
2697: CALL 55113 0 2
2701: PPOPN 2
2703: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2704: LD_VAR 0 1
2708: PPUSH
2709: LD_VAR 0 2
2713: PPUSH
2714: CALL 9154 0 2
2718: PPOPN 2
2720: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2721: LD_VAR 0 1
2725: PPUSH
2726: LD_VAR 0 2
2730: PPUSH
2731: LD_VAR 0 3
2735: PPUSH
2736: CALL 9454 0 3
2740: PPOPN 3
2742: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2743: LD_VAR 0 1
2747: PPUSH
2748: LD_VAR 0 2
2752: PPUSH
2753: LD_VAR 0 3
2757: PPUSH
2758: LD_VAR 0 4
2762: PPUSH
2763: LD_VAR 0 5
2767: PPUSH
2768: CALL 10138 0 5
2772: PPOPN 5
2774: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2775: LD_VAR 0 1
2779: PPUSH
2780: LD_VAR 0 2
2784: PPUSH
2785: LD_VAR 0 3
2789: PPUSH
2790: LD_VAR 0 4
2794: PPUSH
2795: CALL 10241 0 4
2799: PPOPN 4
2801: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2802: LD_INT 0
2804: PPUSH
2805: PPUSH
// disable ( mpActive ) ;
2806: LD_INT 100
2808: DISABLE_MARKED
// disable ( mpWin ) ;
2809: LD_INT 101
2811: DISABLE_MARKED
// disable ( mpLose ) ;
2812: LD_INT 102
2814: DISABLE_MARKED
// mpGameType := 0 ;
2815: LD_ADDR_EXP 3
2819: PUSH
2820: LD_INT 0
2822: ST_TO_ADDR
// mpGameSettings := [ ] ;
2823: LD_ADDR_EXP 6
2827: PUSH
2828: EMPTY
2829: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2830: LD_ADDR_EXP 4
2834: PUSH
2835: EMPTY
2836: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2837: LD_ADDR_EXP 5
2841: PUSH
2842: EMPTY
2843: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2844: LD_ADDR_EXP 29
2848: PUSH
2849: LD_INT 2
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2859: LD_ADDR_EXP 12
2863: PUSH
2864: EMPTY
2865: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2866: LD_ADDR_EXP 13
2870: PUSH
2871: EMPTY
2872: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2873: LD_ADDR_EXP 42
2877: PUSH
2878: EMPTY
2879: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2880: LD_ADDR_EXP 43
2884: PUSH
2885: EMPTY
2886: ST_TO_ADDR
// mpDepots := [ ] ;
2887: LD_ADDR_EXP 14
2891: PUSH
2892: EMPTY
2893: ST_TO_ADDR
// mpBuildings := [ ] ;
2894: LD_ADDR_EXP 17
2898: PUSH
2899: EMPTY
2900: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2901: LD_ADDR_EXP 18
2905: PUSH
2906: EMPTY
2907: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2908: LD_ADDR_EXP 19
2912: PUSH
2913: EMPTY
2914: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2915: LD_ADDR_EXP 20
2919: PUSH
2920: EMPTY
2921: ST_TO_ADDR
// mpStartingResources := [ ] ;
2922: LD_ADDR_EXP 15
2926: PUSH
2927: EMPTY
2928: ST_TO_ADDR
// mpStartPos := [ ] ;
2929: LD_ADDR_EXP 21
2933: PUSH
2934: EMPTY
2935: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2936: LD_ADDR_EXP 22
2940: PUSH
2941: LD_INT 1
2943: NEG
2944: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2945: LD_ADDR_EXP 23
2949: PUSH
2950: EMPTY
2951: ST_TO_ADDR
// mpApemans := [ ] ;
2952: LD_ADDR_EXP 30
2956: PUSH
2957: EMPTY
2958: ST_TO_ADDR
// mpApemansArea := [ ] ;
2959: LD_ADDR_EXP 31
2963: PUSH
2964: EMPTY
2965: ST_TO_ADDR
// mpRespawn := [ ] ;
2966: LD_ADDR_EXP 33
2970: PUSH
2971: EMPTY
2972: ST_TO_ADDR
// mpKingArea := 0 ;
2973: LD_ADDR_EXP 34
2977: PUSH
2978: LD_INT 0
2980: ST_TO_ADDR
// mpPoints := [ ] ;
2981: LD_ADDR_EXP 35
2985: PUSH
2986: EMPTY
2987: ST_TO_ADDR
// mpVehicles := 0 ;
2988: LD_ADDR_EXP 36
2992: PUSH
2993: LD_INT 0
2995: ST_TO_ADDR
// mpShipments := 0 ;
2996: LD_ADDR_EXP 27
3000: PUSH
3001: LD_INT 0
3003: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3004: LD_ADDR_EXP 40
3008: PUSH
3009: EMPTY
3010: PUSH
3011: EMPTY
3012: PUSH
3013: EMPTY
3014: PUSH
3015: EMPTY
3016: PUSH
3017: EMPTY
3018: PUSH
3019: EMPTY
3020: PUSH
3021: EMPTY
3022: PUSH
3023: EMPTY
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3035: LD_ADDR_EXP 32
3039: PUSH
3040: EMPTY
3041: PUSH
3042: EMPTY
3043: PUSH
3044: EMPTY
3045: PUSH
3046: EMPTY
3047: PUSH
3048: EMPTY
3049: PUSH
3050: EMPTY
3051: PUSH
3052: EMPTY
3053: PUSH
3054: EMPTY
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
3066: LD_ADDR_EXP 41
3070: PUSH
3071: LD_INT 0
3073: PUSH
3074: LD_INT 0
3076: PUSH
3077: LD_INT 0
3079: PUSH
3080: LD_INT 0
3082: PUSH
3083: LD_INT 0
3085: PUSH
3086: LD_INT 0
3088: PUSH
3089: LD_INT 0
3091: PUSH
3092: LD_INT 0
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: ST_TO_ADDR
// mpEmissions := 0 ;
3105: LD_ADDR_EXP 37
3109: PUSH
3110: LD_INT 0
3112: ST_TO_ADDR
// mpTeleports := 0 ;
3113: LD_ADDR_EXP 44
3117: PUSH
3118: LD_INT 0
3120: ST_TO_ADDR
// mpArtifacts := 0 ;
3121: LD_ADDR_EXP 45
3125: PUSH
3126: LD_INT 0
3128: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3129: LD_ADDR_EXP 46
3133: PUSH
3134: LD_INT 0
3136: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3137: LD_ADDR_EXP 25
3141: PUSH
3142: LD_INT 3
3144: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3145: LD_ADDR_EXP 24
3149: PUSH
3150: LD_INT 15
3152: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3153: LD_ADDR_EXP 38
3157: PUSH
3158: LD_INT 0
3160: ST_TO_ADDR
// mpGameActive := false ;
3161: LD_ADDR_EXP 39
3165: PUSH
3166: LD_INT 0
3168: ST_TO_ADDR
// mpBlockRespThread := false ;
3169: LD_ADDR_EXP 47
3173: PUSH
3174: LD_INT 0
3176: ST_TO_ADDR
// for i := 1 to 32 do
3177: LD_ADDR_VAR 0 2
3181: PUSH
3182: DOUBLE
3183: LD_INT 1
3185: DEC
3186: ST_TO_ADDR
3187: LD_INT 32
3189: PUSH
3190: FOR_TO
3191: IFFALSE 3218
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3193: LD_ADDR_EXP 6
3197: PUSH
3198: LD_EXP 6
3202: PPUSH
3203: LD_VAR 0 2
3207: PPUSH
3208: LD_INT 0
3210: PPUSH
3211: CALL_OW 1
3215: ST_TO_ADDR
3216: GO 3190
3218: POP
3219: POP
// end ;
3220: LD_VAR 0 1
3224: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3225: LD_INT 0
3227: PPUSH
3228: PPUSH
3229: PPUSH
3230: PPUSH
3231: PPUSH
3232: PPUSH
3233: PPUSH
3234: PPUSH
3235: PPUSH
3236: PPUSH
3237: PPUSH
3238: PPUSH
3239: PPUSH
3240: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalH ] ;
3241: LD_ADDR_VAR 0 14
3245: PUSH
3246: LD_INT 1
3248: PUSH
3249: LD_INT 2
3251: PUSH
3252: LD_INT 3
3254: PUSH
3255: LD_INT 5
3257: PUSH
3258: LD_INT 6
3260: PUSH
3261: LD_INT 7
3263: PUSH
3264: LD_INT 8
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: ST_TO_ADDR
// for i in gameTypes do
3276: LD_ADDR_VAR 0 2
3280: PUSH
3281: LD_VAR 0 14
3285: PUSH
3286: FOR_IN
3287: IFFALSE 3296
// disable ( i ) ;
3289: LD_VAR 0 2
3293: DISABLE_MARKED
3294: GO 3286
3296: POP
3297: POP
// if Multiplayer then
3298: LD_OWVAR 4
3302: IFFALSE 3486
// begin mpGameType := mp_game_type ;
3304: LD_ADDR_EXP 3
3308: PUSH
3309: LD_OWVAR 6
3313: ST_TO_ADDR
// your_side := mp_player_side ;
3314: LD_ADDR_OWVAR 2
3318: PUSH
3319: LD_OWVAR 7
3323: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3324: LD_ADDR_EXP 7
3328: PUSH
3329: LD_OWVAR 17
3333: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3334: LD_ADDR_EXP 8
3338: PUSH
3339: LD_OWVAR 15
3343: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3344: LD_ADDR_EXP 9
3348: PUSH
3349: LD_OWVAR 16
3353: ST_TO_ADDR
// mpTeams := mp_teams ;
3354: LD_ADDR_EXP 10
3358: PUSH
3359: LD_OWVAR 12
3363: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3364: LD_ADDR_VAR 0 2
3368: PUSH
3369: DOUBLE
3370: LD_INT 1
3372: DEC
3373: ST_TO_ADDR
3374: LD_EXP 4
3378: PPUSH
3379: CALL 13562 0 1
3383: PUSH
3384: FOR_TO
3385: IFFALSE 3461
// begin setting := mpGameSettingsKeys [ i ] ;
3387: LD_ADDR_VAR 0 12
3391: PUSH
3392: LD_EXP 4
3396: PUSH
3397: LD_VAR 0 2
3401: ARRAY
3402: ST_TO_ADDR
// if setting then
3403: LD_VAR 0 12
3407: IFFALSE 3459
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3409: LD_ADDR_EXP 6
3413: PUSH
3414: LD_EXP 6
3418: PPUSH
3419: LD_VAR 0 2
3423: PPUSH
3424: LD_EXP 5
3428: PUSH
3429: LD_VAR 0 2
3433: ARRAY
3434: PUSH
3435: LD_VAR 0 2
3439: PUSH
3440: LD_INT 1
3442: MINUS
3443: PPUSH
3444: CALL_OW 426
3448: PUSH
3449: LD_INT 1
3451: PLUS
3452: ARRAY
3453: PPUSH
3454: CALL_OW 1
3458: ST_TO_ADDR
// end ;
3459: GO 3384
3461: POP
3462: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3463: LD_ADDR_EXP 11
3467: PUSH
3468: LD_EXP 8
3472: PUSH
3473: LD_INT 0
3475: PUSH
3476: EMPTY
3477: LIST
3478: DIFF
3479: PUSH
3480: LD_INT 1
3482: GREATER
3483: ST_TO_ADDR
// end else
3484: GO 3486
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3486: LD_EXP 3
3490: PPUSH
3491: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3495: LD_EXP 18
3499: PPUSH
3500: CALL 13562 0 1
3504: IFFALSE 3535
// begin for i in mpMarkedAreas do
3506: LD_ADDR_VAR 0 2
3510: PUSH
3511: LD_EXP 18
3515: PUSH
3516: FOR_IN
3517: IFFALSE 3533
// SetAreaMapShow ( i , 0 ) ;
3519: LD_VAR 0 2
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: CALL_OW 424
3531: GO 3516
3533: POP
3534: POP
// end ; for i := 1 to 8 do
3535: LD_ADDR_VAR 0 2
3539: PUSH
3540: DOUBLE
3541: LD_INT 1
3543: DEC
3544: ST_TO_ADDR
3545: LD_INT 8
3547: PUSH
3548: FOR_TO
3549: IFFALSE 5008
// begin if not mpSidePositions [ i ] then
3551: LD_EXP 7
3555: PUSH
3556: LD_VAR 0 2
3560: ARRAY
3561: NOT
3562: IFFALSE 3566
// continue ;
3564: GO 3548
// side := i ;
3566: LD_ADDR_VAR 0 7
3570: PUSH
3571: LD_VAR 0 2
3575: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3576: LD_ADDR_VAR 0 9
3580: PUSH
3581: LD_EXP 9
3585: PUSH
3586: LD_VAR 0 2
3590: ARRAY
3591: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3592: LD_ADDR_VAR 0 8
3596: PUSH
3597: LD_EXP 7
3601: PUSH
3602: LD_VAR 0 2
3606: ARRAY
3607: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3608: LD_EXP 12
3612: PPUSH
3613: CALL 13562 0 1
3617: IFFALSE 3694
// begin for j in mpOilDeposits [ pos ] do
3619: LD_ADDR_VAR 0 3
3623: PUSH
3624: LD_EXP 12
3628: PUSH
3629: LD_VAR 0 8
3633: ARRAY
3634: PUSH
3635: FOR_IN
3636: IFFALSE 3692
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3638: LD_VAR 0 3
3642: PUSH
3643: LD_INT 1
3645: ARRAY
3646: PPUSH
3647: LD_VAR 0 3
3651: PUSH
3652: LD_INT 2
3654: ARRAY
3655: PPUSH
3656: LD_INT 2
3658: PPUSH
3659: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3663: LD_VAR 0 3
3667: PUSH
3668: LD_INT 1
3670: ARRAY
3671: PPUSH
3672: LD_VAR 0 3
3676: PUSH
3677: LD_INT 2
3679: ARRAY
3680: PPUSH
3681: LD_VAR 0 7
3685: PPUSH
3686: CALL_OW 441
// end ;
3690: GO 3635
3692: POP
3693: POP
// end ; if Count ( mpSibDeposits ) then
3694: LD_EXP 13
3698: PPUSH
3699: CALL 13562 0 1
3703: IFFALSE 3780
// begin for j in mpSibDeposits [ pos ] do
3705: LD_ADDR_VAR 0 3
3709: PUSH
3710: LD_EXP 13
3714: PUSH
3715: LD_VAR 0 8
3719: ARRAY
3720: PUSH
3721: FOR_IN
3722: IFFALSE 3778
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3724: LD_VAR 0 3
3728: PUSH
3729: LD_INT 1
3731: ARRAY
3732: PPUSH
3733: LD_VAR 0 3
3737: PUSH
3738: LD_INT 2
3740: ARRAY
3741: PPUSH
3742: LD_INT 3
3744: PPUSH
3745: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3749: LD_VAR 0 3
3753: PUSH
3754: LD_INT 1
3756: ARRAY
3757: PPUSH
3758: LD_VAR 0 3
3762: PUSH
3763: LD_INT 2
3765: ARRAY
3766: PPUSH
3767: LD_VAR 0 7
3771: PPUSH
3772: CALL_OW 441
// end ;
3776: GO 3721
3778: POP
3779: POP
// end ; InitBc ;
3780: CALL_OW 21
// InitUc ;
3784: CALL_OW 18
// uc_side := side ;
3788: LD_ADDR_OWVAR 20
3792: PUSH
3793: LD_VAR 0 7
3797: ST_TO_ADDR
// uc_nation := nation ;
3798: LD_ADDR_OWVAR 21
3802: PUSH
3803: LD_VAR 0 9
3807: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3808: LD_EXP 22
3812: PUSH
3813: LD_INT 1
3815: NEG
3816: GREATER
3817: IFFALSE 3976
// begin x := mpStartPos [ pos ] [ 1 ] ;
3819: LD_ADDR_VAR 0 5
3823: PUSH
3824: LD_EXP 21
3828: PUSH
3829: LD_VAR 0 8
3833: ARRAY
3834: PUSH
3835: LD_INT 1
3837: ARRAY
3838: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3839: LD_ADDR_VAR 0 6
3843: PUSH
3844: LD_EXP 21
3848: PUSH
3849: LD_VAR 0 8
3853: ARRAY
3854: PUSH
3855: LD_INT 2
3857: ARRAY
3858: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3859: LD_VAR 0 5
3863: PPUSH
3864: LD_VAR 0 6
3868: PPUSH
3869: LD_INT 12
3871: PPUSH
3872: LD_INT 2
3874: PPUSH
3875: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3879: LD_ADDR_EXP 23
3883: PUSH
3884: LD_EXP 23
3888: PPUSH
3889: LD_VAR 0 7
3893: PPUSH
3894: LD_VAR 0 7
3898: PPUSH
3899: LD_VAR 0 5
3903: PPUSH
3904: LD_VAR 0 6
3908: PPUSH
3909: LD_INT 1
3911: PUSH
3912: LD_INT 100
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PUSH
3919: LD_INT 2
3921: PUSH
3922: LD_INT 70
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: PUSH
3929: LD_INT 3
3931: PUSH
3932: LD_INT 40
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: PUSH
3939: LD_INT 10
3941: PUSH
3942: LD_INT 25
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: PUSH
3949: LD_INT 20
3951: PUSH
3952: LD_INT 100
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: LIST
3965: PPUSH
3966: CALL_OW 418
3970: PPUSH
3971: CALL_OW 1
3975: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3976: LD_EXP 14
3980: PPUSH
3981: CALL 13562 0 1
3985: IFFALSE 4184
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH , GameTypeArmsRace , GameTypeArmsArtifact ] then
3987: LD_EXP 3
3991: PUSH
3992: LD_INT 2
3994: PUSH
3995: LD_INT 8
3997: PUSH
3998: LD_INT 6
4000: PUSH
4001: LD_INT 7
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: IN
4010: IFFALSE 4030
// begin bc_level := 10 ;
4012: LD_ADDR_OWVAR 43
4016: PUSH
4017: LD_INT 10
4019: ST_TO_ADDR
// bc_type := b_warehouse ;
4020: LD_ADDR_OWVAR 42
4024: PUSH
4025: LD_INT 1
4027: ST_TO_ADDR
// end else
4028: GO 4046
// begin bc_level := 0 ;
4030: LD_ADDR_OWVAR 43
4034: PUSH
4035: LD_INT 0
4037: ST_TO_ADDR
// bc_type := b_depot ;
4038: LD_ADDR_OWVAR 42
4042: PUSH
4043: LD_INT 0
4045: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4046: LD_ADDR_VAR 0 4
4050: PUSH
4051: LD_EXP 14
4055: PUSH
4056: LD_VAR 0 8
4060: ARRAY
4061: PUSH
4062: LD_INT 1
4064: ARRAY
4065: PPUSH
4066: LD_EXP 14
4070: PUSH
4071: LD_VAR 0 8
4075: ARRAY
4076: PUSH
4077: LD_INT 2
4079: ARRAY
4080: PPUSH
4081: LD_EXP 14
4085: PUSH
4086: LD_VAR 0 8
4090: ARRAY
4091: PUSH
4092: LD_INT 3
4094: ARRAY
4095: PPUSH
4096: CALL_OW 47
4100: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4101: LD_VAR 0 4
4105: PPUSH
4106: LD_STRING @
4108: PUSH
4109: LD_VAR 0 7
4113: STR
4114: PPUSH
4115: CALL_OW 500
// if Count ( mpStartingResources ) then
4119: LD_EXP 15
4123: PPUSH
4124: CALL 13562 0 1
4128: IFFALSE 4182
// begin for j := 1 to mpStartingResources do
4130: LD_ADDR_VAR 0 3
4134: PUSH
4135: DOUBLE
4136: LD_INT 1
4138: DEC
4139: ST_TO_ADDR
4140: LD_EXP 15
4144: PUSH
4145: FOR_TO
4146: IFFALSE 4180
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4148: LD_VAR 0 4
4152: PPUSH
4153: CALL_OW 274
4157: PPUSH
4158: LD_VAR 0 3
4162: PPUSH
4163: LD_EXP 15
4167: PUSH
4168: LD_VAR 0 3
4172: ARRAY
4173: PPUSH
4174: CALL_OW 277
4178: GO 4145
4180: POP
4181: POP
// end ; end else
4182: GO 4391
// if Count ( mpStartingResources ) then
4184: LD_EXP 15
4188: PPUSH
4189: CALL 13562 0 1
4193: IFFALSE 4391
// begin x := mpStartPos [ pos ] [ 1 ] ;
4195: LD_ADDR_VAR 0 5
4199: PUSH
4200: LD_EXP 21
4204: PUSH
4205: LD_VAR 0 8
4209: ARRAY
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4215: LD_ADDR_VAR 0 6
4219: PUSH
4220: LD_EXP 21
4224: PUSH
4225: LD_VAR 0 8
4229: ARRAY
4230: PUSH
4231: LD_INT 2
4233: ARRAY
4234: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4235: LD_ADDR_VAR 0 3
4239: PUSH
4240: DOUBLE
4241: LD_INT 1
4243: DEC
4244: ST_TO_ADDR
4245: LD_EXP 15
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4389
// begin resources := mpStartingResources [ j ] ;
4253: LD_ADDR_VAR 0 13
4257: PUSH
4258: LD_EXP 15
4262: PUSH
4263: LD_VAR 0 3
4267: ARRAY
4268: ST_TO_ADDR
// if resources = 0 then
4269: LD_VAR 0 13
4273: PUSH
4274: LD_INT 0
4276: EQUAL
4277: IFFALSE 4281
// continue ;
4279: GO 4250
// repeat if resources >= 50 then
4281: LD_VAR 0 13
4285: PUSH
4286: LD_INT 50
4288: GREATEREQUAL
4289: IFFALSE 4335
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4291: LD_VAR 0 3
4295: PPUSH
4296: LD_INT 5
4298: PPUSH
4299: LD_VAR 0 5
4303: PPUSH
4304: LD_VAR 0 6
4308: PPUSH
4309: LD_INT 6
4311: PPUSH
4312: LD_INT 0
4314: PPUSH
4315: CALL_OW 60
// resources := resources - 50 ;
4319: LD_ADDR_VAR 0 13
4323: PUSH
4324: LD_VAR 0 13
4328: PUSH
4329: LD_INT 50
4331: MINUS
4332: ST_TO_ADDR
// end else
4333: GO 4377
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4335: LD_VAR 0 3
4339: PPUSH
4340: LD_VAR 0 13
4344: PUSH
4345: LD_INT 10
4347: DIV
4348: PPUSH
4349: LD_VAR 0 5
4353: PPUSH
4354: LD_VAR 0 6
4358: PPUSH
4359: LD_INT 6
4361: PPUSH
4362: LD_INT 0
4364: PPUSH
4365: CALL_OW 60
// resources := 0 ;
4369: LD_ADDR_VAR 0 13
4373: PUSH
4374: LD_INT 0
4376: ST_TO_ADDR
// end ; until resources <= 0 ;
4377: LD_VAR 0 13
4381: PUSH
4382: LD_INT 0
4384: LESSEQUAL
4385: IFFALSE 4281
// end ;
4387: GO 4250
4389: POP
4390: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
4391: LD_EXP 17
4395: PPUSH
4396: CALL 13562 0 1
4400: IFFALSE 4420
4402: PUSH
4403: LD_EXP 3
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: LD_INT 8
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: IN
4418: NOT
4419: AND
4420: IFFALSE 4498
// begin for j in mpBuildings [ pos ] do
4422: LD_ADDR_VAR 0 3
4426: PUSH
4427: LD_EXP 17
4431: PUSH
4432: LD_VAR 0 8
4436: ARRAY
4437: PUSH
4438: FOR_IN
4439: IFFALSE 4496
// begin bc_level := 0 ;
4441: LD_ADDR_OWVAR 43
4445: PUSH
4446: LD_INT 0
4448: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4449: LD_ADDR_OWVAR 42
4453: PUSH
4454: LD_VAR 0 3
4458: PUSH
4459: LD_INT 1
4461: ARRAY
4462: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4463: LD_VAR 0 3
4467: PUSH
4468: LD_INT 2
4470: ARRAY
4471: PPUSH
4472: LD_VAR 0 3
4476: PUSH
4477: LD_INT 3
4479: ARRAY
4480: PPUSH
4481: LD_VAR 0 3
4485: PUSH
4486: LD_INT 4
4488: ARRAY
4489: PPUSH
4490: CALL_OW 47
// end ;
4494: GO 4438
4496: POP
4497: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4498: LD_EXP 26
4502: IFFALSE 4522
4504: PUSH
4505: LD_INT 20
4507: PPUSH
4508: LD_VAR 0 7
4512: PPUSH
4513: CALL_OW 321
4517: PUSH
4518: LD_INT 1
4520: EQUAL
4521: AND
4522: IFFALSE 4539
// SetTech ( tech_SibDet , side , state_researched ) ;
4524: LD_INT 20
4526: PPUSH
4527: LD_VAR 0 7
4531: PPUSH
4532: LD_INT 2
4534: PPUSH
4535: CALL_OW 322
// if not mpArtifacts then
4539: LD_EXP 45
4543: NOT
4544: IFFALSE 4561
// SetTech ( tech_artifact , side , state_disabled ) ;
4546: LD_INT 24
4548: PPUSH
4549: LD_VAR 0 7
4553: PPUSH
4554: LD_INT 0
4556: PPUSH
4557: CALL_OW 322
// if mpSibBomb = 1 then
4561: LD_EXP 28
4565: PUSH
4566: LD_INT 1
4568: EQUAL
4569: IFFALSE 4588
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4571: LD_INT 25
4573: PPUSH
4574: LD_VAR 0 7
4578: PPUSH
4579: LD_INT 1
4581: PPUSH
4582: CALL_OW 322
// end else
4586: GO 4603
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4588: LD_INT 25
4590: PPUSH
4591: LD_VAR 0 7
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: CALL_OW 322
// end ; if mpVehicles then
4603: LD_EXP 36
4607: IFFALSE 4706
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4609: LD_ADDR_VAR 0 3
4613: PUSH
4614: LD_VAR 0 7
4618: PPUSH
4619: LD_VAR 0 9
4623: PPUSH
4624: LD_EXP 36
4628: PPUSH
4629: CALL 5965 0 3
4633: PUSH
4634: FOR_IN
4635: IFFALSE 4704
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4637: LD_VAR 0 3
4641: PPUSH
4642: LD_INT 0
4644: PPUSH
4645: LD_INT 5
4647: PPUSH
4648: CALL_OW 12
4652: PPUSH
4653: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4657: LD_VAR 0 3
4661: PPUSH
4662: LD_EXP 21
4666: PUSH
4667: LD_VAR 0 8
4671: ARRAY
4672: PUSH
4673: LD_INT 1
4675: ARRAY
4676: PPUSH
4677: LD_EXP 21
4681: PUSH
4682: LD_VAR 0 8
4686: ARRAY
4687: PUSH
4688: LD_INT 2
4690: ARRAY
4691: PPUSH
4692: LD_INT 12
4694: PPUSH
4695: LD_INT 0
4697: PPUSH
4698: CALL_OW 50
// end ;
4702: GO 4634
4704: POP
4705: POP
// end ; uc_nation := nation ;
4706: LD_ADDR_OWVAR 21
4710: PUSH
4711: LD_VAR 0 9
4715: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4716: LD_EXP 3
4720: PUSH
4721: LD_INT 6
4723: PUSH
4724: LD_INT 7
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: IN
4731: IFFALSE 4756
4733: PUSH
4734: LD_EXP 7
4738: PUSH
4739: LD_VAR 0 2
4743: ARRAY
4744: PUSH
4745: LD_INT 1
4747: PUSH
4748: LD_INT 2
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: IN
4755: AND
4756: IFFALSE 4804
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4758: LD_ADDR_VAR 0 11
4762: PUSH
4763: LD_VAR 0 7
4767: PPUSH
4768: LD_VAR 0 9
4772: PPUSH
4773: LD_EXP 24
4777: PUSH
4778: LD_EXP 24
4782: PUSH
4783: LD_INT 2
4785: DIV
4786: PLUS
4787: PPUSH
4788: LD_EXP 25
4792: PUSH
4793: LD_INT 1
4795: PLUS
4796: PPUSH
4797: CALL 5420 0 4
4801: ST_TO_ADDR
4802: GO 4834
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4804: LD_ADDR_VAR 0 11
4808: PUSH
4809: LD_VAR 0 7
4813: PPUSH
4814: LD_VAR 0 9
4818: PPUSH
4819: LD_EXP 24
4823: PPUSH
4824: LD_EXP 25
4828: PPUSH
4829: CALL 5420 0 4
4833: ST_TO_ADDR
// for j in team do
4834: LD_ADDR_VAR 0 3
4838: PUSH
4839: LD_VAR 0 11
4843: PUSH
4844: FOR_IN
4845: IFFALSE 4894
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4847: LD_VAR 0 3
4851: PPUSH
4852: LD_EXP 21
4856: PUSH
4857: LD_VAR 0 8
4861: ARRAY
4862: PUSH
4863: LD_INT 1
4865: ARRAY
4866: PPUSH
4867: LD_EXP 21
4871: PUSH
4872: LD_VAR 0 8
4876: ARRAY
4877: PUSH
4878: LD_INT 2
4880: ARRAY
4881: PPUSH
4882: LD_INT 12
4884: PPUSH
4885: LD_INT 0
4887: PPUSH
4888: CALL_OW 50
4892: GO 4844
4894: POP
4895: POP
// if mpApemans then
4896: LD_EXP 30
4900: IFFALSE 5006
// begin for j := 1 to mpApemans do
4902: LD_ADDR_VAR 0 3
4906: PUSH
4907: DOUBLE
4908: LD_INT 1
4910: DEC
4911: ST_TO_ADDR
4912: LD_EXP 30
4916: PUSH
4917: FOR_TO
4918: IFFALSE 5004
// begin PrepareApeman ( - 5 ) ;
4920: LD_INT 5
4922: NEG
4923: PPUSH
4924: CALL 45665 0 1
// ape := CreateHuman ;
4928: LD_ADDR_VAR 0 10
4932: PUSH
4933: CALL_OW 44
4937: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4938: LD_ADDR_EXP 32
4942: PUSH
4943: LD_EXP 32
4947: PPUSH
4948: LD_VAR 0 8
4952: PPUSH
4953: LD_EXP 32
4957: PUSH
4958: LD_VAR 0 8
4962: ARRAY
4963: PPUSH
4964: LD_VAR 0 10
4968: PPUSH
4969: CALL 49538 0 2
4973: PPUSH
4974: CALL_OW 1
4978: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4979: LD_VAR 0 10
4983: PPUSH
4984: LD_EXP 31
4988: PUSH
4989: LD_VAR 0 8
4993: ARRAY
4994: PPUSH
4995: LD_INT 0
4997: PPUSH
4998: CALL_OW 49
// end ;
5002: GO 4917
5004: POP
5005: POP
// end ; end ;
5006: GO 3548
5008: POP
5009: POP
// if not mpTeamGame then
5010: LD_EXP 11
5014: NOT
5015: IFFALSE 5113
// begin for i := 1 to 8 do
5017: LD_ADDR_VAR 0 2
5021: PUSH
5022: DOUBLE
5023: LD_INT 1
5025: DEC
5026: ST_TO_ADDR
5027: LD_INT 8
5029: PUSH
5030: FOR_TO
5031: IFFALSE 5109
// for j := 1 to 8 do
5033: LD_ADDR_VAR 0 3
5037: PUSH
5038: DOUBLE
5039: LD_INT 1
5041: DEC
5042: ST_TO_ADDR
5043: LD_INT 8
5045: PUSH
5046: FOR_TO
5047: IFFALSE 5105
// if i <> j then
5049: LD_VAR 0 2
5053: PUSH
5054: LD_VAR 0 3
5058: NONEQUAL
5059: IFFALSE 5083
// SetAttitude ( i , j , att_neutral , true ) else
5061: LD_VAR 0 2
5065: PPUSH
5066: LD_VAR 0 3
5070: PPUSH
5071: LD_INT 0
5073: PPUSH
5074: LD_INT 1
5076: PPUSH
5077: CALL_OW 80
5081: GO 5103
// SetAttitude ( i , j , att_friend , true ) ;
5083: LD_VAR 0 2
5087: PPUSH
5088: LD_VAR 0 3
5092: PPUSH
5093: LD_INT 1
5095: PPUSH
5096: LD_INT 1
5098: PPUSH
5099: CALL_OW 80
5103: GO 5046
5105: POP
5106: POP
5107: GO 5030
5109: POP
5110: POP
// end else
5111: GO 5288
// begin if mpSharedVision then
5113: LD_EXP 16
5117: IFFALSE 5182
// begin for i in mpTeams do
5119: LD_ADDR_VAR 0 2
5123: PUSH
5124: LD_EXP 10
5128: PUSH
5129: FOR_IN
5130: IFFALSE 5180
// for j := 2 to i do
5132: LD_ADDR_VAR 0 3
5136: PUSH
5137: DOUBLE
5138: LD_INT 2
5140: DEC
5141: ST_TO_ADDR
5142: LD_VAR 0 2
5146: PUSH
5147: FOR_TO
5148: IFFALSE 5176
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5150: LD_VAR 0 2
5154: PUSH
5155: LD_VAR 0 3
5159: ARRAY
5160: PPUSH
5161: LD_VAR 0 2
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: CALL_OW 343
5174: GO 5147
5176: POP
5177: POP
5178: GO 5129
5180: POP
5181: POP
// end ; for i := 1 to 8 do
5182: LD_ADDR_VAR 0 2
5186: PUSH
5187: DOUBLE
5188: LD_INT 1
5190: DEC
5191: ST_TO_ADDR
5192: LD_INT 8
5194: PUSH
5195: FOR_TO
5196: IFFALSE 5286
// for j := 1 to 8 do
5198: LD_ADDR_VAR 0 3
5202: PUSH
5203: DOUBLE
5204: LD_INT 1
5206: DEC
5207: ST_TO_ADDR
5208: LD_INT 8
5210: PUSH
5211: FOR_TO
5212: IFFALSE 5282
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5214: LD_EXP 8
5218: PUSH
5219: LD_VAR 0 2
5223: ARRAY
5224: PUSH
5225: LD_EXP 8
5229: PUSH
5230: LD_VAR 0 3
5234: ARRAY
5235: EQUAL
5236: IFFALSE 5260
// SetAttitude ( i , j , att_friend , true ) else
5238: LD_VAR 0 2
5242: PPUSH
5243: LD_VAR 0 3
5247: PPUSH
5248: LD_INT 1
5250: PPUSH
5251: LD_INT 1
5253: PPUSH
5254: CALL_OW 80
5258: GO 5280
// SetAttitude ( i , j , att_enemy , true ) ;
5260: LD_VAR 0 2
5264: PPUSH
5265: LD_VAR 0 3
5269: PPUSH
5270: LD_INT 2
5272: PPUSH
5273: LD_INT 1
5275: PPUSH
5276: CALL_OW 80
5280: GO 5211
5282: POP
5283: POP
5284: GO 5195
5286: POP
5287: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5288: LD_ADDR_OWVAR 71
5292: PUSH
5293: LD_EXP 9
5297: PUSH
5298: LD_OWVAR 2
5302: ARRAY
5303: ST_TO_ADDR
// if IAmSpec then
5304: CALL_OW 531
5308: IFFALSE 5349
// begin FogOff ( true ) ;
5310: LD_INT 1
5312: PPUSH
5313: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5317: LD_EXP 29
5321: PUSH
5322: LD_INT 1
5324: ARRAY
5325: PUSH
5326: LD_INT 2
5328: DIV
5329: PPUSH
5330: LD_EXP 29
5334: PUSH
5335: LD_INT 2
5337: ARRAY
5338: PUSH
5339: LD_INT 2
5341: DIV
5342: PPUSH
5343: CALL_OW 86
// end else
5347: GO 5395
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5349: LD_EXP 21
5353: PUSH
5354: LD_EXP 7
5358: PUSH
5359: LD_OWVAR 2
5363: ARRAY
5364: ARRAY
5365: PUSH
5366: LD_INT 1
5368: ARRAY
5369: PPUSH
5370: LD_EXP 21
5374: PUSH
5375: LD_EXP 7
5379: PUSH
5380: LD_OWVAR 2
5384: ARRAY
5385: ARRAY
5386: PUSH
5387: LD_INT 2
5389: ARRAY
5390: PPUSH
5391: CALL_OW 86
// end ; BeginBuildUp ;
5395: CALL 6498 0 0
// enable ( mpActive ) ;
5399: LD_INT 100
5401: ENABLE_MARKED
// enable ( mpGameType ) ;
5402: LD_EXP 3
5406: ENABLE_MARKED
// mpGameActive := true ;
5407: LD_ADDR_EXP 39
5411: PUSH
5412: LD_INT 1
5414: ST_TO_ADDR
// end ;
5415: LD_VAR 0 1
5419: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
5420: LD_INT 0
5422: PPUSH
5423: PPUSH
5424: PPUSH
5425: PPUSH
5426: PPUSH
// result := [ ] ;
5427: LD_ADDR_VAR 0 5
5431: PUSH
5432: EMPTY
5433: ST_TO_ADDR
// class := class_soldier ;
5434: LD_ADDR_VAR 0 8
5438: PUSH
5439: LD_INT 1
5441: ST_TO_ADDR
// uc_side := side ;
5442: LD_ADDR_OWVAR 20
5446: PUSH
5447: LD_VAR 0 1
5451: ST_TO_ADDR
// uc_nation := nation ;
5452: LD_ADDR_OWVAR 21
5456: PUSH
5457: LD_VAR 0 2
5461: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5462: LD_ADDR_OWVAR 26
5466: PUSH
5467: LD_OWVAR 19
5471: PUSH
5472: LD_VAR 0 1
5476: ARRAY
5477: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5478: LD_INT 1
5480: PPUSH
5481: LD_INT 2
5483: PPUSH
5484: CALL_OW 12
5488: PPUSH
5489: LD_VAR 0 8
5493: PPUSH
5494: LD_VAR 0 4
5498: PUSH
5499: LD_INT 2
5501: PLUS
5502: PPUSH
5503: CALL_OW 380
// hc_importance := 105 ;
5507: LD_ADDR_OWVAR 32
5511: PUSH
5512: LD_INT 105
5514: ST_TO_ADDR
// if Multiplayer then
5515: LD_OWVAR 4
5519: IFFALSE 5559
// begin hc_gallery := MULTIAVATARS ;
5521: LD_ADDR_OWVAR 33
5525: PUSH
5526: LD_STRING MULTIAVATARS
5528: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5529: LD_ADDR_OWVAR 34
5533: PUSH
5534: LD_VAR 0 1
5538: PPUSH
5539: CALL_OW 525
5543: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5544: LD_ADDR_OWVAR 27
5548: PUSH
5549: LD_VAR 0 1
5553: PPUSH
5554: CALL_OW 526
5558: ST_TO_ADDR
// end ; commander := CreateHuman ;
5559: LD_ADDR_VAR 0 9
5563: PUSH
5564: CALL_OW 44
5568: ST_TO_ADDR
// result := Join ( result , commander ) ;
5569: LD_ADDR_VAR 0 5
5573: PUSH
5574: LD_VAR 0 5
5578: PPUSH
5579: LD_VAR 0 9
5583: PPUSH
5584: CALL 49538 0 2
5588: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
5589: LD_ADDR_EXP 41
5593: PUSH
5594: LD_EXP 41
5598: PPUSH
5599: LD_VAR 0 1
5603: PPUSH
5604: LD_VAR 0 9
5608: PPUSH
5609: CALL_OW 1
5613: ST_TO_ADDR
// if mpTeamPreset then
5614: LD_LOC 1
5618: IFFALSE 5714
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5620: LD_LOC 1
5624: PUSH
5625: LD_INT 1
5627: ARRAY
5628: PPUSH
5629: LD_VAR 0 5
5633: PUSH
5634: LD_VAR 0 5
5638: ARRAY
5639: PPUSH
5640: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5644: LD_VAR 0 5
5648: PUSH
5649: LD_VAR 0 5
5653: ARRAY
5654: PPUSH
5655: LD_INT 1
5657: PPUSH
5658: LD_LOC 1
5662: PUSH
5663: LD_INT 1
5665: ARRAY
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: CALL_OW 260
5674: PPUSH
5675: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5679: LD_VAR 0 5
5683: PUSH
5684: LD_VAR 0 5
5688: ARRAY
5689: PPUSH
5690: LD_INT 2
5692: PPUSH
5693: LD_LOC 1
5697: PUSH
5698: LD_INT 1
5700: ARRAY
5701: PPUSH
5702: LD_INT 2
5704: PPUSH
5705: CALL_OW 260
5709: PPUSH
5710: CALL_OW 239
// end ; InitHc_All ( ) ;
5714: CALL_OW 584
// class := 2 ;
5718: LD_ADDR_VAR 0 8
5722: PUSH
5723: LD_INT 2
5725: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5726: LD_ADDR_VAR 0 6
5730: PUSH
5731: DOUBLE
5732: LD_INT 1
5734: DEC
5735: ST_TO_ADDR
5736: LD_VAR 0 3
5740: PUSH
5741: LD_INT 1
5743: MINUS
5744: PUSH
5745: FOR_TO
5746: IFFALSE 5941
// begin PrepareHuman ( false , class , skill ) ;
5748: LD_INT 0
5750: PPUSH
5751: LD_VAR 0 8
5755: PPUSH
5756: LD_VAR 0 4
5760: PPUSH
5761: CALL_OW 380
// un := CreateHuman ;
5765: LD_ADDR_VAR 0 7
5769: PUSH
5770: CALL_OW 44
5774: ST_TO_ADDR
// result := Join ( result , un ) ;
5775: LD_ADDR_VAR 0 5
5779: PUSH
5780: LD_VAR 0 5
5784: PPUSH
5785: LD_VAR 0 7
5789: PPUSH
5790: CALL 49538 0 2
5794: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5795: LD_LOC 1
5799: PPUSH
5800: CALL 13562 0 1
5804: PUSH
5805: LD_VAR 0 3
5809: GREATEREQUAL
5810: IFFALSE 5906
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5812: LD_LOC 1
5816: PUSH
5817: LD_VAR 0 6
5821: PUSH
5822: LD_INT 1
5824: PLUS
5825: ARRAY
5826: PPUSH
5827: LD_VAR 0 7
5831: PPUSH
5832: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5836: LD_VAR 0 7
5840: PPUSH
5841: LD_INT 1
5843: PPUSH
5844: LD_LOC 1
5848: PUSH
5849: LD_VAR 0 6
5853: PUSH
5854: LD_INT 1
5856: PLUS
5857: ARRAY
5858: PPUSH
5859: LD_INT 1
5861: PPUSH
5862: CALL_OW 260
5866: PPUSH
5867: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5871: LD_VAR 0 7
5875: PPUSH
5876: LD_INT 2
5878: PPUSH
5879: LD_LOC 1
5883: PUSH
5884: LD_VAR 0 6
5888: PUSH
5889: LD_INT 1
5891: PLUS
5892: ARRAY
5893: PPUSH
5894: LD_INT 2
5896: PPUSH
5897: CALL_OW 260
5901: PPUSH
5902: CALL_OW 239
// end ; class := Inc ( class ) ;
5906: LD_ADDR_VAR 0 8
5910: PUSH
5911: LD_VAR 0 8
5915: PPUSH
5916: CALL 50911 0 1
5920: ST_TO_ADDR
// if class = 5 then
5921: LD_VAR 0 8
5925: PUSH
5926: LD_INT 5
5928: EQUAL
5929: IFFALSE 5939
// class := 1 ;
5931: LD_ADDR_VAR 0 8
5935: PUSH
5936: LD_INT 1
5938: ST_TO_ADDR
// end ;
5939: GO 5745
5941: POP
5942: POP
// if not mpTeamPreset then
5943: LD_LOC 1
5947: NOT
5948: IFFALSE 5960
// mpTeamPreset := result ;
5950: LD_ADDR_LOC 1
5954: PUSH
5955: LD_VAR 0 5
5959: ST_TO_ADDR
// end ;
5960: LD_VAR 0 5
5964: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5965: LD_INT 0
5967: PPUSH
5968: PPUSH
// result := [ ] ;
5969: LD_ADDR_VAR 0 4
5973: PUSH
5974: EMPTY
5975: ST_TO_ADDR
// if not vehicles then
5976: LD_VAR 0 3
5980: NOT
5981: IFFALSE 5985
// exit ;
5983: GO 6199
// for i := 1 to vehicles [ nation ] do
5985: LD_ADDR_VAR 0 5
5989: PUSH
5990: DOUBLE
5991: LD_INT 1
5993: DEC
5994: ST_TO_ADDR
5995: LD_VAR 0 3
5999: PUSH
6000: LD_VAR 0 2
6004: ARRAY
6005: PUSH
6006: FOR_TO
6007: IFFALSE 6197
// begin uc_side := side ;
6009: LD_ADDR_OWVAR 20
6013: PUSH
6014: LD_VAR 0 1
6018: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6019: LD_VAR 0 3
6023: PUSH
6024: LD_VAR 0 2
6028: ARRAY
6029: PUSH
6030: LD_VAR 0 5
6034: ARRAY
6035: PPUSH
6036: CALL 13562 0 1
6040: PUSH
6041: LD_INT 4
6043: GREATER
6044: IFFALSE 6074
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6046: LD_ADDR_OWVAR 21
6050: PUSH
6051: LD_VAR 0 3
6055: PUSH
6056: LD_VAR 0 2
6060: ARRAY
6061: PUSH
6062: LD_VAR 0 5
6066: ARRAY
6067: PUSH
6068: LD_INT 5
6070: ARRAY
6071: ST_TO_ADDR
6072: GO 6084
// uc_nation := nation ;
6074: LD_ADDR_OWVAR 21
6078: PUSH
6079: LD_VAR 0 2
6083: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6084: LD_VAR 0 3
6088: PUSH
6089: LD_VAR 0 2
6093: ARRAY
6094: PUSH
6095: LD_VAR 0 5
6099: ARRAY
6100: PUSH
6101: LD_INT 1
6103: ARRAY
6104: PPUSH
6105: LD_VAR 0 3
6109: PUSH
6110: LD_VAR 0 2
6114: ARRAY
6115: PUSH
6116: LD_VAR 0 5
6120: ARRAY
6121: PUSH
6122: LD_INT 2
6124: ARRAY
6125: PPUSH
6126: LD_VAR 0 3
6130: PUSH
6131: LD_VAR 0 2
6135: ARRAY
6136: PUSH
6137: LD_VAR 0 5
6141: ARRAY
6142: PUSH
6143: LD_INT 3
6145: ARRAY
6146: PPUSH
6147: LD_VAR 0 3
6151: PUSH
6152: LD_VAR 0 2
6156: ARRAY
6157: PUSH
6158: LD_VAR 0 5
6162: ARRAY
6163: PUSH
6164: LD_INT 4
6166: ARRAY
6167: PPUSH
6168: LD_INT 80
6170: PPUSH
6171: CALL 16358 0 5
// result := Join ( result , CreateVehicle ) ;
6175: LD_ADDR_VAR 0 4
6179: PUSH
6180: LD_VAR 0 4
6184: PPUSH
6185: CALL_OW 45
6189: PPUSH
6190: CALL 49538 0 2
6194: ST_TO_ADDR
// end ;
6195: GO 6006
6197: POP
6198: POP
// end ;
6199: LD_VAR 0 4
6203: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
// for i in mpBattleFlags do
6208: LD_ADDR_VAR 0 3
6212: PUSH
6213: LD_EXP 23
6217: PUSH
6218: FOR_IN
6219: IFFALSE 6296
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6221: LD_VAR 0 3
6225: PPUSH
6226: LD_INT 1
6228: PUSH
6229: LD_VAR 0 1
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: LD_INT 2
6240: PUSH
6241: LD_VAR 0 1
6245: PUSH
6246: LD_REAL  7.00000000000000E-0001
6249: MUL
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 3
6257: PUSH
6258: LD_VAR 0 1
6262: PUSH
6263: LD_REAL  4.00000000000000E-0001
6266: MUL
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: PUSH
6272: LD_INT 20
6274: PUSH
6275: LD_VAR 0 1
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: PPUSH
6290: CALL_OW 423
6294: GO 6218
6296: POP
6297: POP
// end ;
6298: LD_VAR 0 2
6302: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6303: LD_INT 100
6305: IFFALSE 6400
6307: GO 6309
6309: DISABLE
6310: LD_INT 0
6312: PPUSH
6313: PPUSH
// begin if mpBattleFlag <= 0 then
6314: LD_EXP 22
6318: PUSH
6319: LD_INT 0
6321: LESSEQUAL
6322: IFFALSE 6326
// exit ;
6324: GO 6400
// strength := 100 ;
6326: LD_ADDR_VAR 0 2
6330: PUSH
6331: LD_INT 100
6333: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6334: LD_EXP 22
6338: PPUSH
6339: CALL_OW 67
// strength := Dec ( strength ) ;
6343: LD_ADDR_VAR 0 2
6347: PUSH
6348: LD_VAR 0 2
6352: PPUSH
6353: CALL 50933 0 1
6357: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6358: LD_VAR 0 2
6362: PPUSH
6363: CALL 6204 0 1
// until not strength ;
6367: LD_VAR 0 2
6371: NOT
6372: IFFALSE 6334
// for i in mpBattleFlags do
6374: LD_ADDR_VAR 0 1
6378: PUSH
6379: LD_EXP 23
6383: PUSH
6384: FOR_IN
6385: IFFALSE 6398
// KillBattleFlag ( i ) ;
6387: LD_VAR 0 1
6391: PPUSH
6392: CALL_OW 419
6396: GO 6384
6398: POP
6399: POP
// end ;
6400: PPOPN 2
6402: END
// every 0 0$1 marked mpActive do var side , tmp ;
6403: GO 6405
6405: DISABLE
6406: LD_INT 0
6408: PPUSH
6409: PPUSH
// begin if mpSibBomb <= 1 then
6410: LD_EXP 28
6414: PUSH
6415: LD_INT 1
6417: LESSEQUAL
6418: IFFALSE 6422
// exit ;
6420: GO 6495
// tmp := mpSibBomb ;
6422: LD_ADDR_VAR 0 2
6426: PUSH
6427: LD_EXP 28
6431: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6432: LD_INT 35
6434: PPUSH
6435: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6439: LD_ADDR_VAR 0 2
6443: PUSH
6444: LD_VAR 0 2
6448: PUSH
6449: LD_INT 35
6451: MINUS
6452: ST_TO_ADDR
// until not tmp ;
6453: LD_VAR 0 2
6457: NOT
6458: IFFALSE 6432
// for side := 1 to 8 do
6460: LD_ADDR_VAR 0 1
6464: PUSH
6465: DOUBLE
6466: LD_INT 1
6468: DEC
6469: ST_TO_ADDR
6470: LD_INT 8
6472: PUSH
6473: FOR_TO
6474: IFFALSE 6493
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6476: LD_INT 25
6478: PPUSH
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_INT 1
6486: PPUSH
6487: CALL_OW 322
6491: GO 6473
6493: POP
6494: POP
// end ;
6495: PPOPN 2
6497: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6498: LD_INT 0
6500: PPUSH
6501: PPUSH
6502: PPUSH
// mpBuildUpTimeDelay := 0 ;
6503: LD_ADDR_EXP 48
6507: PUSH
6508: LD_INT 0
6510: ST_TO_ADDR
// if not mpBuildUpTime then
6511: LD_EXP 20
6515: NOT
6516: IFFALSE 6520
// exit ;
6518: GO 6709
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6520: LD_ADDR_EXP 48
6524: PUSH
6525: LD_INT 8400
6527: PUSH
6528: LD_INT 2100
6530: PUSH
6531: LD_EXP 20
6535: MUL
6536: PLUS
6537: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6538: LD_ADDR_EXP 49
6542: PUSH
6543: LD_INT 1
6545: ST_TO_ADDR
// for i := 1 to 8 do
6546: LD_ADDR_VAR 0 2
6550: PUSH
6551: DOUBLE
6552: LD_INT 1
6554: DEC
6555: ST_TO_ADDR
6556: LD_INT 8
6558: PUSH
6559: FOR_TO
6560: IFFALSE 6707
// if mpSidePositions [ i ] then
6562: LD_EXP 7
6566: PUSH
6567: LD_VAR 0 2
6571: ARRAY
6572: IFFALSE 6705
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6574: LD_EXP 19
6578: PUSH
6579: LD_EXP 7
6583: PUSH
6584: LD_VAR 0 2
6588: ARRAY
6589: ARRAY
6590: PPUSH
6591: LD_INT 5
6593: PPUSH
6594: CALL_OW 424
// for j := 1 to 8 do
6598: LD_ADDR_VAR 0 3
6602: PUSH
6603: DOUBLE
6604: LD_INT 1
6606: DEC
6607: ST_TO_ADDR
6608: LD_INT 8
6610: PUSH
6611: FOR_TO
6612: IFFALSE 6703
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6614: LD_EXP 7
6618: PUSH
6619: LD_VAR 0 3
6623: ARRAY
6624: IFFALSE 6673
6626: PUSH
6627: LD_EXP 8
6631: PUSH
6632: LD_VAR 0 2
6636: ARRAY
6637: PUSH
6638: LD_EXP 8
6642: PUSH
6643: LD_VAR 0 3
6647: ARRAY
6648: NONEQUAL
6649: IFTRUE 6672
6651: PUSH
6652: LD_EXP 11
6656: NOT
6657: IFFALSE 6671
6659: PUSH
6660: LD_VAR 0 2
6664: PUSH
6665: LD_VAR 0 3
6669: NONEQUAL
6670: AND
6671: OR
6672: AND
6673: IFFALSE 6701
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6675: LD_VAR 0 3
6679: PPUSH
6680: LD_EXP 19
6684: PUSH
6685: LD_EXP 7
6689: PUSH
6690: LD_VAR 0 2
6694: ARRAY
6695: ARRAY
6696: PPUSH
6697: CALL_OW 333
6701: GO 6611
6703: POP
6704: POP
// end ;
6705: GO 6559
6707: POP
6708: POP
// end ;
6709: LD_VAR 0 1
6713: RET
// function EndBuildUp ; var i , j ; begin
6714: LD_INT 0
6716: PPUSH
6717: PPUSH
6718: PPUSH
// mpBuildUpTimeActive := false ;
6719: LD_ADDR_EXP 49
6723: PUSH
6724: LD_INT 0
6726: ST_TO_ADDR
// for i := 1 to 8 do
6727: LD_ADDR_VAR 0 2
6731: PUSH
6732: DOUBLE
6733: LD_INT 1
6735: DEC
6736: ST_TO_ADDR
6737: LD_INT 8
6739: PUSH
6740: FOR_TO
6741: IFFALSE 6888
// if mpSidePositions [ i ] then
6743: LD_EXP 7
6747: PUSH
6748: LD_VAR 0 2
6752: ARRAY
6753: IFFALSE 6886
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6755: LD_EXP 19
6759: PUSH
6760: LD_EXP 7
6764: PUSH
6765: LD_VAR 0 2
6769: ARRAY
6770: ARRAY
6771: PPUSH
6772: LD_INT 0
6774: PPUSH
6775: CALL_OW 424
// for j := 1 to 8 do
6779: LD_ADDR_VAR 0 3
6783: PUSH
6784: DOUBLE
6785: LD_INT 1
6787: DEC
6788: ST_TO_ADDR
6789: LD_INT 8
6791: PUSH
6792: FOR_TO
6793: IFFALSE 6884
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6795: LD_EXP 7
6799: PUSH
6800: LD_VAR 0 3
6804: ARRAY
6805: IFFALSE 6854
6807: PUSH
6808: LD_EXP 8
6812: PUSH
6813: LD_VAR 0 2
6817: ARRAY
6818: PUSH
6819: LD_EXP 8
6823: PUSH
6824: LD_VAR 0 3
6828: ARRAY
6829: NONEQUAL
6830: IFTRUE 6853
6832: PUSH
6833: LD_EXP 11
6837: NOT
6838: IFFALSE 6852
6840: PUSH
6841: LD_VAR 0 2
6845: PUSH
6846: LD_VAR 0 3
6850: NONEQUAL
6851: AND
6852: OR
6853: AND
6854: IFFALSE 6882
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6856: LD_VAR 0 3
6860: PPUSH
6861: LD_EXP 19
6865: PUSH
6866: LD_EXP 7
6870: PUSH
6871: LD_VAR 0 2
6875: ARRAY
6876: ARRAY
6877: PPUSH
6878: CALL_OW 334
6882: GO 6792
6884: POP
6885: POP
// end ;
6886: GO 6740
6888: POP
6889: POP
// end ;
6890: LD_VAR 0 1
6894: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6895: LD_EXP 49
6899: IFFALSE 7078
6901: GO 6903
6903: DISABLE
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
// begin for i := 1 to 8 do
6908: LD_ADDR_VAR 0 1
6912: PUSH
6913: DOUBLE
6914: LD_INT 1
6916: DEC
6917: ST_TO_ADDR
6918: LD_INT 8
6920: PUSH
6921: FOR_TO
6922: IFFALSE 7075
// if mpSidePositions [ i ] then
6924: LD_EXP 7
6928: PUSH
6929: LD_VAR 0 1
6933: ARRAY
6934: IFFALSE 7073
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6936: LD_ADDR_VAR 0 2
6940: PUSH
6941: LD_EXP 19
6945: PUSH
6946: LD_EXP 7
6950: PUSH
6951: LD_VAR 0 1
6955: ARRAY
6956: ARRAY
6957: PPUSH
6958: LD_INT 2
6960: PUSH
6961: LD_INT 21
6963: PUSH
6964: LD_INT 1
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 21
6973: PUSH
6974: LD_INT 2
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: LIST
6985: PUSH
6986: LD_INT 22
6988: PUSH
6989: LD_OWVAR 2
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PPUSH
7002: CALL_OW 70
7006: PUSH
7007: FOR_IN
7008: IFFALSE 7071
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7010: LD_EXP 8
7014: PUSH
7015: LD_VAR 0 1
7019: ARRAY
7020: PUSH
7021: LD_EXP 8
7025: PUSH
7026: LD_OWVAR 2
7030: ARRAY
7031: NONEQUAL
7032: IFTRUE 7055
7034: PUSH
7035: LD_EXP 11
7039: NOT
7040: IFFALSE 7054
7042: PUSH
7043: LD_VAR 0 1
7047: PUSH
7048: LD_OWVAR 2
7052: NONEQUAL
7053: AND
7054: OR
7055: IFFALSE 7069
// ComMoveToArea ( un , BuildUpEscape ) ;
7057: LD_VAR 0 2
7061: PPUSH
7062: LD_INT 52
7064: PPUSH
7065: CALL_OW 113
7069: GO 7007
7071: POP
7072: POP
7073: GO 6921
7075: POP
7076: POP
// enable ;
7077: ENABLE
// end ;
7078: PPOPN 2
7080: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7081: LD_EXP 20
7085: IFFALSE 7135
7087: GO 7089
7089: DISABLE
7090: LD_INT 0
7092: PPUSH
// begin tmp := mpBuildUpTime ;
7093: LD_ADDR_VAR 0 1
7097: PUSH
7098: LD_EXP 20
7102: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7103: LD_INT 35
7105: PPUSH
7106: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7110: LD_ADDR_VAR 0 1
7114: PUSH
7115: LD_VAR 0 1
7119: PUSH
7120: LD_INT 35
7122: MINUS
7123: ST_TO_ADDR
// until not tmp ;
7124: LD_VAR 0 1
7128: NOT
7129: IFFALSE 7103
// EndBuildUp ;
7131: CALL 6714 0 0
// end ;
7135: PPOPN 1
7137: END
// every 0 0$1 trigger mpActive marked mpWin do
7138: LD_INT 100
7140: IFFALSE 7174
7142: GO 7144
7144: DISABLE
// begin if IAmServer then
7145: CALL_OW 518
7149: IFFALSE 7158
// wait ( 0 0$3 ) ;
7151: LD_INT 105
7153: PPUSH
7154: CALL_OW 67
// if Multiplayer then
7158: LD_OWVAR 4
7162: IFFALSE 7170
// YouWinInMultiplayer else
7164: CALL_OW 106
7168: GO 7174
// YouWin ;
7170: CALL_OW 103
// end ;
7174: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7175: LD_INT 0
7177: PPUSH
// result := false ;
7178: LD_ADDR_VAR 0 3
7182: PUSH
7183: LD_INT 0
7185: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7186: LD_VAR 0 1
7190: PUSH
7191: LD_INT 1
7193: DOUBLE
7194: EQUAL
7195: IFTRUE 7217
7197: LD_INT 5
7199: DOUBLE
7200: EQUAL
7201: IFTRUE 7217
7203: LD_INT 6
7205: DOUBLE
7206: EQUAL
7207: IFTRUE 7217
7209: LD_INT 7
7211: DOUBLE
7212: EQUAL
7213: IFTRUE 7217
7215: GO 7290
7217: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7218: LD_ADDR_VAR 0 3
7222: PUSH
7223: LD_INT 22
7225: PUSH
7226: LD_VAR 0 2
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 2
7237: PUSH
7238: LD_INT 21
7240: PUSH
7241: LD_INT 1
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: LD_INT 33
7250: PUSH
7251: LD_INT 3
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PUSH
7258: LD_INT 33
7260: PUSH
7261: LD_INT 5
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PPUSH
7278: CALL_OW 69
7282: PPUSH
7283: CALL 13562 0 1
7287: ST_TO_ADDR
// end ; GameTypeSurvival :
7288: GO 7686
7290: LD_INT 2
7292: DOUBLE
7293: EQUAL
7294: IFTRUE 7298
7296: GO 7428
7298: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7299: LD_ADDR_VAR 0 3
7303: PUSH
7304: LD_INT 22
7306: PUSH
7307: LD_VAR 0 2
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PUSH
7316: LD_INT 2
7318: PUSH
7319: LD_INT 30
7321: PUSH
7322: LD_INT 0
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 30
7331: PUSH
7332: LD_INT 1
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: LIST
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PPUSH
7348: CALL_OW 69
7352: PPUSH
7353: CALL 13562 0 1
7357: IFFALSE 7425
7359: PUSH
7360: LD_INT 22
7362: PUSH
7363: LD_VAR 0 2
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 2
7374: PUSH
7375: LD_INT 21
7377: PUSH
7378: LD_INT 1
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 33
7387: PUSH
7388: LD_INT 3
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: LD_INT 33
7397: PUSH
7398: LD_INT 5
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PPUSH
7415: CALL_OW 69
7419: PPUSH
7420: CALL 13562 0 1
7424: AND
7425: ST_TO_ADDR
// end ; GameTypeSurvivalH :
7426: GO 7686
7428: LD_INT 8
7430: DOUBLE
7431: EQUAL
7432: IFTRUE 7436
7434: GO 7585
7436: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7437: LD_ADDR_VAR 0 3
7441: PUSH
7442: LD_EXP 41
7446: PUSH
7447: LD_VAR 0 2
7451: ARRAY
7452: PPUSH
7453: CALL_OW 300
7457: IFFALSE 7514
7459: PUSH
7460: LD_INT 22
7462: PUSH
7463: LD_VAR 0 2
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PUSH
7472: LD_INT 2
7474: PUSH
7475: LD_INT 30
7477: PUSH
7478: LD_INT 0
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: LD_INT 30
7487: PUSH
7488: LD_INT 1
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: LIST
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PPUSH
7504: CALL_OW 69
7508: PPUSH
7509: CALL 13562 0 1
7513: AND
7514: IFFALSE 7582
7516: PUSH
7517: LD_INT 22
7519: PUSH
7520: LD_VAR 0 2
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 2
7531: PUSH
7532: LD_INT 21
7534: PUSH
7535: LD_INT 1
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: PUSH
7542: LD_INT 33
7544: PUSH
7545: LD_INT 3
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: LD_INT 33
7554: PUSH
7555: LD_INT 5
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PPUSH
7572: CALL_OW 69
7576: PPUSH
7577: CALL 13562 0 1
7581: AND
7582: ST_TO_ADDR
// end ; GameTypeKing :
7583: GO 7686
7585: LD_INT 3
7587: DOUBLE
7588: EQUAL
7589: IFTRUE 7593
7591: GO 7685
7593: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7594: LD_ADDR_VAR 0 3
7598: PUSH
7599: LD_INT 22
7601: PUSH
7602: LD_VAR 0 2
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PUSH
7611: LD_INT 2
7613: PUSH
7614: LD_INT 21
7616: PUSH
7617: LD_INT 1
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: PUSH
7624: LD_INT 33
7626: PUSH
7627: LD_INT 3
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PUSH
7634: LD_INT 33
7636: PUSH
7637: LD_INT 5
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 69
7658: PPUSH
7659: CALL 13562 0 1
7663: IFFALSE 7682
7665: PUSH
7666: LD_VAR 0 2
7670: PPUSH
7671: CALL 62550 0 1
7675: PUSH
7676: LD_EXP 35
7680: LESS
7681: AND
7682: ST_TO_ADDR
// end ; end ;
7683: GO 7686
7685: POP
// end ;
7686: LD_VAR 0 3
7690: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7691: LD_INT 100
7693: IFFALSE 7923
7695: GO 7697
7697: DISABLE
7698: LD_INT 0
7700: PPUSH
7701: PPUSH
// begin if Multiplayer then
7702: LD_OWVAR 4
7706: IFFALSE 7714
// SetPlayerSpectator ( ) else
7708: CALL_OW 572
7712: GO 7723
// FogOff ( your_side ) ;
7714: LD_OWVAR 2
7718: PPUSH
7719: CALL_OW 344
// repeat gameIsOn := false ;
7723: LD_ADDR_VAR 0 1
7727: PUSH
7728: LD_INT 0
7730: ST_TO_ADDR
// for i := 1 to 8 do
7731: LD_ADDR_VAR 0 2
7735: PUSH
7736: DOUBLE
7737: LD_INT 1
7739: DEC
7740: ST_TO_ADDR
7741: LD_INT 8
7743: PUSH
7744: FOR_TO
7745: IFFALSE 7875
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7747: LD_EXP 7
7751: PUSH
7752: LD_VAR 0 2
7756: ARRAY
7757: IFFALSE 7770
7759: PUSH
7760: LD_VAR 0 2
7764: PPUSH
7765: CALL_OW 108
7769: AND
7770: IFFALSE 7784
7772: PUSH
7773: LD_VAR 0 2
7777: PUSH
7778: LD_OWVAR 2
7782: NONEQUAL
7783: AND
7784: IFFALSE 7873
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7786: LD_EXP 8
7790: PUSH
7791: LD_VAR 0 2
7795: ARRAY
7796: NOT
7797: IFTRUE 7845
7799: PUSH
7800: LD_EXP 8
7804: PUSH
7805: LD_VAR 0 2
7809: ARRAY
7810: PUSH
7811: LD_EXP 8
7815: PUSH
7816: LD_OWVAR 2
7820: ARRAY
7821: NONEQUAL
7822: IFFALSE 7844
7824: PUSH
7825: LD_OWVAR 2
7829: PPUSH
7830: LD_VAR 0 2
7834: PPUSH
7835: CALL_OW 81
7839: PUSH
7840: LD_INT 1
7842: NONEQUAL
7843: AND
7844: OR
7845: IFFALSE 7873
// if HasPowerByGameType ( mpGameType , i ) then
7847: LD_EXP 3
7851: PPUSH
7852: LD_VAR 0 2
7856: PPUSH
7857: CALL 7175 0 2
7861: IFFALSE 7873
// begin gameIsOn := true ;
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_INT 1
7870: ST_TO_ADDR
// break ;
7871: GO 7875
// end ;
7873: GO 7744
7875: POP
7876: POP
// wait ( 100 ) ;
7877: LD_INT 100
7879: PPUSH
7880: CALL_OW 67
// until not gameIsOn ;
7884: LD_VAR 0 1
7888: NOT
7889: IFFALSE 7723
// if IAmServer then
7891: CALL_OW 518
7895: IFFALSE 7904
// wait ( 0 0$3 ) ;
7897: LD_INT 105
7899: PPUSH
7900: CALL_OW 67
// if Multiplayer then
7904: LD_OWVAR 4
7908: IFFALSE 7916
// YouLostInMultiplayer else
7910: CALL_OW 107
7914: GO 7923
// YouLost (  ) ;
7916: LD_STRING 
7918: PPUSH
7919: CALL_OW 104
// end ;
7923: PPOPN 2
7925: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7926: LD_EXP 33
7930: IFFALSE 8314
7932: GO 7934
7934: DISABLE
7935: LD_INT 0
7937: PPUSH
7938: PPUSH
7939: PPUSH
7940: PPUSH
7941: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7942: LD_ADDR_VAR 0 5
7946: PUSH
7947: LD_INT 1
7949: PUSH
7950: LD_INT 2
7952: PUSH
7953: LD_INT 3
7955: PUSH
7956: LD_INT 4
7958: PUSH
7959: LD_INT 5
7961: PUSH
7962: LD_INT 6
7964: PUSH
7965: LD_INT 7
7967: PUSH
7968: LD_INT 8
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7981: LD_INT 350
7983: PPUSH
7984: CALL_OW 67
// for i := 1 to 8 do
7988: LD_ADDR_VAR 0 1
7992: PUSH
7993: DOUBLE
7994: LD_INT 1
7996: DEC
7997: ST_TO_ADDR
7998: LD_INT 8
8000: PUSH
8001: FOR_TO
8002: IFFALSE 8284
// begin j := sides [ i ] ;
8004: LD_ADDR_VAR 0 2
8008: PUSH
8009: LD_VAR 0 5
8013: PUSH
8014: LD_VAR 0 1
8018: ARRAY
8019: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
8020: LD_EXP 40
8024: PUSH
8025: LD_VAR 0 2
8029: ARRAY
8030: PPUSH
8031: CALL 13562 0 1
8035: IFFALSE 8048
8037: PUSH
8038: LD_VAR 0 2
8042: PPUSH
8043: CALL_OW 108
8047: AND
8048: IFFALSE 8066
8050: PUSH
8051: LD_EXP 3
8055: PPUSH
8056: LD_VAR 0 2
8060: PPUSH
8061: CALL 7175 0 2
8065: AND
8066: IFFALSE 8282
// begin wait ( mpRespawn div 2 ) ;
8068: LD_EXP 33
8072: PUSH
8073: LD_INT 2
8075: DIV
8076: PPUSH
8077: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8081: LD_ADDR_VAR 0 3
8085: PUSH
8086: LD_INT 22
8088: PUSH
8089: LD_VAR 0 2
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: LD_INT 50
8100: PUSH
8101: EMPTY
8102: LIST
8103: PUSH
8104: LD_INT 2
8106: PUSH
8107: LD_INT 30
8109: PUSH
8110: LD_INT 0
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: PUSH
8117: LD_INT 30
8119: PUSH
8120: LD_INT 1
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: LIST
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: LIST
8136: PPUSH
8137: CALL_OW 69
8141: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8142: LD_VAR 0 3
8146: NOT
8147: IFTRUE 8161
8149: PUSH
8150: LD_VAR 0 2
8154: PPUSH
8155: CALL_OW 108
8159: NOT
8160: OR
8161: IFTRUE 8180
8163: PUSH
8164: LD_EXP 3
8168: PPUSH
8169: LD_VAR 0 2
8173: PPUSH
8174: CALL 7175 0 2
8178: NOT
8179: OR
8180: IFFALSE 8184
// continue ;
8182: GO 8001
// spawn := tmp [ 1 ] ;
8184: LD_ADDR_VAR 0 4
8188: PUSH
8189: LD_VAR 0 3
8193: PUSH
8194: LD_INT 1
8196: ARRAY
8197: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8198: LD_EXP 40
8202: PUSH
8203: LD_VAR 0 2
8207: ARRAY
8208: PUSH
8209: LD_INT 1
8211: ARRAY
8212: PPUSH
8213: LD_VAR 0 4
8217: PPUSH
8218: CALL_OW 250
8222: PPUSH
8223: LD_VAR 0 4
8227: PPUSH
8228: CALL_OW 251
8232: PPUSH
8233: LD_INT 32
8235: PPUSH
8236: LD_INT 1
8238: PPUSH
8239: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8243: LD_ADDR_EXP 40
8247: PUSH
8248: LD_EXP 40
8252: PPUSH
8253: LD_VAR 0 2
8257: PPUSH
8258: LD_EXP 40
8262: PUSH
8263: LD_VAR 0 2
8267: ARRAY
8268: PPUSH
8269: LD_INT 1
8271: PPUSH
8272: CALL_OW 3
8276: PPUSH
8277: CALL_OW 1
8281: ST_TO_ADDR
// end ; end ;
8282: GO 8001
8284: POP
8285: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8286: LD_ADDR_VAR 0 5
8290: PUSH
8291: LD_VAR 0 5
8295: PPUSH
8296: LD_INT 1
8298: PPUSH
8299: LD_INT 8
8301: PPUSH
8302: LD_INT 1
8304: PPUSH
8305: CALL 15888 0 4
8309: ST_TO_ADDR
// until false ;
8310: LD_INT 0
8312: IFFALSE 7981
// end ;
8314: PPOPN 5
8316: END
// every 0 0$1 marked mpActive do
8317: GO 8319
8319: DISABLE
// begin enable ;
8320: ENABLE
// if not mpDisplayStrings then
8321: LD_EXP 38
8325: NOT
8326: IFFALSE 8337
// begin display_strings := [ ] ;
8328: LD_ADDR_OWVAR 47
8332: PUSH
8333: EMPTY
8334: ST_TO_ADDR
// exit ;
8335: GO 8347
// end ; display_strings := mpDisplayStrings ;
8337: LD_ADDR_OWVAR 47
8341: PUSH
8342: LD_EXP 38
8346: ST_TO_ADDR
// end ; end_of_file
8347: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8348: LD_INT 0
8350: PPUSH
8351: PPUSH
8352: PPUSH
8353: PPUSH
8354: PPUSH
8355: PPUSH
8356: PPUSH
8357: PPUSH
8358: PPUSH
// if GetType ( un ) = unit_vehicle then
8359: LD_VAR 0 1
8363: PPUSH
8364: CALL_OW 247
8368: PUSH
8369: LD_INT 2
8371: EQUAL
8372: IFFALSE 8376
// exit ;
8374: GO 9149
// side := GetSide ( un ) ;
8376: LD_ADDR_VAR 0 9
8380: PUSH
8381: LD_VAR 0 1
8385: PPUSH
8386: CALL_OW 255
8390: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
8391: LD_EXP 3
8395: PUSH
8396: LD_INT 2
8398: PUSH
8399: LD_INT 8
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: IN
8406: IFFALSE 8500
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8408: LD_VAR 0 1
8412: PPUSH
8413: CALL_OW 266
8417: PUSH
8418: LD_INT 0
8420: PUSH
8421: LD_INT 1
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: IN
8428: IFFALSE 8500
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8430: LD_ADDR_VAR 0 3
8434: PUSH
8435: LD_INT 22
8437: PUSH
8438: LD_VAR 0 9
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: LD_INT 2
8449: PUSH
8450: LD_INT 21
8452: PUSH
8453: LD_INT 1
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 33
8462: PUSH
8463: LD_INT 3
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PPUSH
8479: CALL_OW 69
8483: PUSH
8484: FOR_IN
8485: IFFALSE 8498
// KillUnit ( i ) ;
8487: LD_VAR 0 3
8491: PPUSH
8492: CALL_OW 66
8496: GO 8484
8498: POP
8499: POP
// end ; if mpGameType = GameTypeSurvivalH then
8500: LD_EXP 3
8504: PUSH
8505: LD_INT 8
8507: EQUAL
8508: IFFALSE 8592
// if un in mpCommanders then
8510: LD_VAR 0 1
8514: PUSH
8515: LD_EXP 41
8519: IN
8520: IFFALSE 8592
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8522: LD_ADDR_VAR 0 3
8526: PUSH
8527: LD_INT 22
8529: PUSH
8530: LD_VAR 0 9
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PUSH
8539: LD_INT 2
8541: PUSH
8542: LD_INT 21
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: LD_INT 33
8554: PUSH
8555: LD_INT 3
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 69
8575: PUSH
8576: FOR_IN
8577: IFFALSE 8590
// KillUnit ( i ) ;
8579: LD_VAR 0 3
8583: PPUSH
8584: CALL_OW 66
8588: GO 8576
8590: POP
8591: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8592: LD_VAR 0 1
8596: PPUSH
8597: CALL_OW 257
8601: PUSH
8602: LD_INT 12
8604: PUSH
8605: LD_INT 17
8607: PUSH
8608: LD_INT 15
8610: PUSH
8611: LD_INT 16
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: IN
8620: IFTRUE 8637
8622: PUSH
8623: LD_VAR 0 1
8627: PPUSH
8628: CALL_OW 263
8632: PUSH
8633: LD_INT 5
8635: EQUAL
8636: OR
8637: IFFALSE 8874
// begin tag := 0 ;
8639: LD_ADDR_VAR 0 5
8643: PUSH
8644: LD_INT 0
8646: ST_TO_ADDR
// for i := 1 to 8 do
8647: LD_ADDR_VAR 0 3
8651: PUSH
8652: DOUBLE
8653: LD_INT 1
8655: DEC
8656: ST_TO_ADDR
8657: LD_INT 8
8659: PUSH
8660: FOR_TO
8661: IFFALSE 8695
// if un in mpApePosIndex [ i ] then
8663: LD_VAR 0 1
8667: PUSH
8668: LD_EXP 32
8672: PUSH
8673: LD_VAR 0 3
8677: ARRAY
8678: IN
8679: IFFALSE 8693
// begin tag := i ;
8681: LD_ADDR_VAR 0 5
8685: PUSH
8686: LD_VAR 0 3
8690: ST_TO_ADDR
// break ;
8691: GO 8695
// end ;
8693: GO 8660
8695: POP
8696: POP
// if not tag then
8697: LD_VAR 0 5
8701: NOT
8702: IFFALSE 8706
// exit ;
8704: GO 9149
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8706: LD_ADDR_VAR 0 7
8710: PUSH
8711: LD_EXP 31
8715: PUSH
8716: LD_EXP 7
8720: PUSH
8721: LD_VAR 0 5
8725: ARRAY
8726: ARRAY
8727: ST_TO_ADDR
// if not area then
8728: LD_VAR 0 7
8732: NOT
8733: IFFALSE 8737
// exit ;
8735: GO 9149
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8737: LD_INT 14700
8739: PUSH
8740: LD_VAR 0 1
8744: PUSH
8745: LD_INT 5
8747: MOD
8748: PUSH
8749: LD_INT 1
8751: PLUS
8752: PUSH
8753: LD_INT 700
8755: MUL
8756: PLUS
8757: PPUSH
8758: CALL_OW 67
// repeat wait ( 10 ) ;
8762: LD_INT 10
8764: PPUSH
8765: CALL_OW 67
// until not mpBlockRespThread ;
8769: LD_EXP 47
8773: NOT
8774: IFFALSE 8762
// mpBlockRespThread := true ;
8776: LD_ADDR_EXP 47
8780: PUSH
8781: LD_INT 1
8783: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8784: LD_INT 0
8786: PPUSH
8787: CALL 45665 0 1
// ape := CreateHuman ;
8791: LD_ADDR_VAR 0 4
8795: PUSH
8796: CALL_OW 44
8800: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8801: LD_ADDR_EXP 32
8805: PUSH
8806: LD_EXP 32
8810: PPUSH
8811: LD_VAR 0 5
8815: PPUSH
8816: LD_EXP 32
8820: PUSH
8821: LD_VAR 0 5
8825: ARRAY
8826: PPUSH
8827: LD_VAR 0 4
8831: PPUSH
8832: CALL 49538 0 2
8836: PPUSH
8837: CALL_OW 1
8841: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8842: LD_VAR 0 4
8846: PPUSH
8847: LD_VAR 0 7
8851: PPUSH
8852: LD_INT 0
8854: PPUSH
8855: CALL_OW 49
// wait ( 10 ) ;
8859: LD_INT 10
8861: PPUSH
8862: CALL_OW 67
// mpBlockRespThread := false ;
8866: LD_ADDR_EXP 47
8870: PUSH
8871: LD_INT 0
8873: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8874: LD_VAR 0 1
8878: PPUSH
8879: CALL_OW 247
8883: PUSH
8884: LD_INT 1
8886: EQUAL
8887: IFFALSE 8904
8889: PUSH
8890: LD_VAR 0 1
8894: PPUSH
8895: CALL_OW 248
8899: PUSH
8900: LD_INT 0
8902: GREATER
8903: AND
8904: IFFALSE 9149
// begin if not mpRespawn then
8906: LD_EXP 33
8910: NOT
8911: IFFALSE 8915
// exit ;
8913: GO 9149
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8915: LD_VAR 0 9
8919: PPUSH
8920: CALL_OW 108
8924: NOT
8925: IFFALSE 8944
8927: PUSH
8928: LD_EXP 3
8932: PPUSH
8933: LD_VAR 0 9
8937: PPUSH
8938: CALL 7175 0 2
8942: NOT
8943: AND
8944: IFFALSE 8948
// exit ;
8946: GO 9149
// side := GetSide ( un ) ;
8948: LD_ADDR_VAR 0 9
8952: PUSH
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 255
8962: ST_TO_ADDR
// nation := GetNation ( un ) ;
8963: LD_ADDR_VAR 0 8
8967: PUSH
8968: LD_VAR 0 1
8972: PPUSH
8973: CALL_OW 248
8977: ST_TO_ADDR
// class := GetClass ( un ) ;
8978: LD_ADDR_VAR 0 6
8982: PUSH
8983: LD_VAR 0 1
8987: PPUSH
8988: CALL_OW 257
8992: ST_TO_ADDR
// if class > 4 then
8993: LD_VAR 0 6
8997: PUSH
8998: LD_INT 4
9000: GREATER
9001: IFFALSE 9011
// class := 1 ;
9003: LD_ADDR_VAR 0 6
9007: PUSH
9008: LD_INT 1
9010: ST_TO_ADDR
// repeat wait ( 10 ) ;
9011: LD_INT 10
9013: PPUSH
9014: CALL_OW 67
// until not mpBlockRespThread ;
9018: LD_EXP 47
9022: NOT
9023: IFFALSE 9011
// mpBlockRespThread := true ;
9025: LD_ADDR_EXP 47
9029: PUSH
9030: LD_INT 1
9032: ST_TO_ADDR
// uc_side := side ;
9033: LD_ADDR_OWVAR 20
9037: PUSH
9038: LD_VAR 0 9
9042: ST_TO_ADDR
// uc_nation := nation ;
9043: LD_ADDR_OWVAR 21
9047: PUSH
9048: LD_VAR 0 8
9052: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
9053: LD_INT 0
9055: PPUSH
9056: LD_VAR 0 6
9060: PPUSH
9061: LD_INT 2
9063: PPUSH
9064: CALL_OW 380
// un := CreateHuman ;
9068: LD_ADDR_VAR 0 1
9072: PUSH
9073: CALL_OW 44
9077: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
9078: LD_ADDR_EXP 40
9082: PUSH
9083: LD_EXP 40
9087: PPUSH
9088: LD_VAR 0 9
9092: PPUSH
9093: LD_EXP 40
9097: PUSH
9098: LD_VAR 0 9
9102: ARRAY
9103: PPUSH
9104: LD_EXP 40
9108: PUSH
9109: LD_VAR 0 9
9113: ARRAY
9114: PUSH
9115: LD_INT 1
9117: PLUS
9118: PPUSH
9119: LD_VAR 0 1
9123: PPUSH
9124: CALL_OW 1
9128: PPUSH
9129: CALL_OW 1
9133: ST_TO_ADDR
// wait ( 10 ) ;
9134: LD_INT 10
9136: PPUSH
9137: CALL_OW 67
// mpBlockRespThread := false ;
9141: LD_ADDR_EXP 47
9145: PUSH
9146: LD_INT 0
9148: ST_TO_ADDR
// end ; end ;
9149: LD_VAR 0 2
9153: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
9154: LD_INT 0
9156: PPUSH
9157: PPUSH
9158: PPUSH
9159: PPUSH
9160: PPUSH
// tag := 0 ;
9161: LD_ADDR_VAR 0 5
9165: PUSH
9166: LD_INT 0
9168: ST_TO_ADDR
// for i := 1 to 8 do
9169: LD_ADDR_VAR 0 4
9173: PUSH
9174: DOUBLE
9175: LD_INT 1
9177: DEC
9178: ST_TO_ADDR
9179: LD_INT 8
9181: PUSH
9182: FOR_TO
9183: IFFALSE 9217
// if un in mpApePosIndex [ i ] then
9185: LD_VAR 0 2
9189: PUSH
9190: LD_EXP 32
9194: PUSH
9195: LD_VAR 0 4
9199: ARRAY
9200: IN
9201: IFFALSE 9215
// begin tag := i ;
9203: LD_ADDR_VAR 0 5
9207: PUSH
9208: LD_VAR 0 4
9212: ST_TO_ADDR
// break ;
9213: GO 9217
// end ;
9215: GO 9182
9217: POP
9218: POP
// if not tag then
9219: LD_VAR 0 5
9223: NOT
9224: IFFALSE 9228
// exit ;
9226: GO 9396
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9228: LD_ADDR_VAR 0 6
9232: PUSH
9233: LD_EXP 31
9237: PUSH
9238: LD_EXP 7
9242: PUSH
9243: LD_VAR 0 5
9247: ARRAY
9248: ARRAY
9249: ST_TO_ADDR
// if not area then
9250: LD_VAR 0 6
9254: NOT
9255: IFFALSE 9259
// exit ;
9257: GO 9396
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9259: LD_INT 14700
9261: PUSH
9262: LD_VAR 0 2
9266: PUSH
9267: LD_INT 5
9269: MOD
9270: PUSH
9271: LD_INT 1
9273: PLUS
9274: PUSH
9275: LD_INT 700
9277: MUL
9278: PLUS
9279: PPUSH
9280: CALL_OW 67
// repeat wait ( 10 ) ;
9284: LD_INT 10
9286: PPUSH
9287: CALL_OW 67
// until not mpBlockRespThread ;
9291: LD_EXP 47
9295: NOT
9296: IFFALSE 9284
// mpBlockRespThread := true ;
9298: LD_ADDR_EXP 47
9302: PUSH
9303: LD_INT 1
9305: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9306: LD_INT 0
9308: PPUSH
9309: CALL 45665 0 1
// ape := CreateHuman ;
9313: LD_ADDR_VAR 0 7
9317: PUSH
9318: CALL_OW 44
9322: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9323: LD_ADDR_EXP 32
9327: PUSH
9328: LD_EXP 32
9332: PPUSH
9333: LD_VAR 0 5
9337: PPUSH
9338: LD_EXP 32
9342: PUSH
9343: LD_VAR 0 5
9347: ARRAY
9348: PPUSH
9349: LD_VAR 0 7
9353: PPUSH
9354: CALL 49538 0 2
9358: PPUSH
9359: CALL_OW 1
9363: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9364: LD_VAR 0 7
9368: PPUSH
9369: LD_VAR 0 6
9373: PPUSH
9374: LD_INT 0
9376: PPUSH
9377: CALL_OW 49
// wait ( 10 ) ;
9381: LD_INT 10
9383: PPUSH
9384: CALL_OW 67
// mpBlockRespThread := false ;
9388: LD_ADDR_EXP 47
9392: PUSH
9393: LD_INT 0
9395: ST_TO_ADDR
// end ;
9396: LD_VAR 0 3
9400: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9401: LD_INT 0
9403: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9404: LD_VAR 0 1
9408: PPUSH
9409: CALL_OW 266
9413: PUSH
9414: LD_INT 0
9416: PUSH
9417: LD_INT 1
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: IN
9424: IFFALSE 9449
// SetBName ( building , @ & GetSide ( building ) ) ;
9426: LD_VAR 0 1
9430: PPUSH
9431: LD_STRING @
9433: PUSH
9434: LD_VAR 0 1
9438: PPUSH
9439: CALL_OW 255
9443: STR
9444: PPUSH
9445: CALL_OW 500
// end ;
9449: LD_VAR 0 2
9453: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9454: LD_INT 0
9456: PPUSH
9457: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
9458: LD_EXP 3
9462: PUSH
9463: LD_INT 2
9465: PUSH
9466: LD_INT 8
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: IN
9473: IFFALSE 9497
9475: PUSH
9476: LD_VAR 0 1
9480: PPUSH
9481: CALL_OW 266
9485: PUSH
9486: LD_INT 0
9488: PUSH
9489: LD_INT 1
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: IN
9496: AND
9497: IFFALSE 9576
// begin SetSide ( building , oldSide ) ;
9499: LD_VAR 0 1
9503: PPUSH
9504: LD_VAR 0 2
9508: PPUSH
9509: CALL_OW 235
// KillUnit ( building ) ;
9513: LD_VAR 0 1
9517: PPUSH
9518: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9522: LD_ADDR_VAR 0 5
9526: PUSH
9527: LD_INT 22
9529: PUSH
9530: LD_VAR 0 2
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: LD_INT 21
9541: PUSH
9542: LD_INT 1
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: PPUSH
9553: CALL_OW 69
9557: PUSH
9558: FOR_IN
9559: IFFALSE 9572
// KillUnit ( i ) ;
9561: LD_VAR 0 5
9565: PPUSH
9566: CALL_OW 66
9570: GO 9558
9572: POP
9573: POP
// exit ;
9574: GO 9621
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9576: LD_VAR 0 1
9580: PPUSH
9581: CALL_OW 266
9585: PUSH
9586: LD_INT 0
9588: PUSH
9589: LD_INT 1
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: IN
9596: IFFALSE 9621
// SetBName ( building , @ & GetSide ( building ) ) ;
9598: LD_VAR 0 1
9602: PPUSH
9603: LD_STRING @
9605: PUSH
9606: LD_VAR 0 1
9610: PPUSH
9611: CALL_OW 255
9615: STR
9616: PPUSH
9617: CALL_OW 500
// end ;
9621: LD_VAR 0 4
9625: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9626: LD_INT 0
9628: PPUSH
9629: PPUSH
9630: PPUSH
// if mpGameType <> GameTypeFamine then
9631: LD_EXP 3
9635: PUSH
9636: LD_INT 5
9638: NONEQUAL
9639: IFFALSE 9643
// exit ;
9641: GO 9877
// for i := 1 to mpGlobalOilDeposits do
9643: LD_ADDR_VAR 0 6
9647: PUSH
9648: DOUBLE
9649: LD_INT 1
9651: DEC
9652: ST_TO_ADDR
9653: LD_EXP 42
9657: PUSH
9658: FOR_TO
9659: IFFALSE 9875
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9661: LD_EXP 42
9665: PUSH
9666: LD_VAR 0 6
9670: ARRAY
9671: PUSH
9672: LD_INT 1
9674: ARRAY
9675: PPUSH
9676: LD_EXP 42
9680: PUSH
9681: LD_VAR 0 6
9685: ARRAY
9686: PUSH
9687: LD_INT 2
9689: ARRAY
9690: PPUSH
9691: CALL_OW 428
9695: PUSH
9696: LD_VAR 0 1
9700: EQUAL
9701: IFFALSE 9873
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9703: LD_ADDR_VAR 0 7
9707: PUSH
9708: LD_EXP 42
9712: PUSH
9713: LD_VAR 0 6
9717: ARRAY
9718: PUSH
9719: LD_INT 3
9721: ARRAY
9722: ST_TO_ADDR
// value := value - amount ;
9723: LD_ADDR_VAR 0 7
9727: PUSH
9728: LD_VAR 0 7
9732: PUSH
9733: LD_VAR 0 4
9737: MINUS
9738: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9739: LD_ADDR_EXP 42
9743: PUSH
9744: LD_EXP 42
9748: PPUSH
9749: LD_VAR 0 6
9753: PPUSH
9754: LD_EXP 42
9758: PUSH
9759: LD_VAR 0 6
9763: ARRAY
9764: PPUSH
9765: LD_INT 3
9767: PPUSH
9768: LD_VAR 0 7
9772: PPUSH
9773: CALL_OW 1
9777: PPUSH
9778: CALL_OW 1
9782: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9783: LD_VAR 0 2
9787: PUSH
9788: LD_OWVAR 2
9792: PUSH
9793: LD_INT 9
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: IN
9800: IFFALSE 9816
// SetUnitDisplayNumber ( building , value ) ;
9802: LD_VAR 0 1
9806: PPUSH
9807: LD_VAR 0 7
9811: PPUSH
9812: CALL_OW 505
// if value <= 0 then
9816: LD_VAR 0 7
9820: PUSH
9821: LD_INT 0
9823: LESSEQUAL
9824: IFFALSE 9873
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9826: LD_EXP 42
9830: PUSH
9831: LD_VAR 0 6
9835: ARRAY
9836: PUSH
9837: LD_INT 1
9839: ARRAY
9840: PPUSH
9841: LD_EXP 42
9845: PUSH
9846: LD_VAR 0 6
9850: ARRAY
9851: PUSH
9852: LD_INT 2
9854: ARRAY
9855: PPUSH
9856: CALL_OW 63
// KillUnit ( building ) ;
9860: LD_VAR 0 1
9864: PPUSH
9865: CALL_OW 66
// exit ;
9869: POP
9870: POP
9871: GO 9877
// end ; end ; end ;
9873: GO 9658
9875: POP
9876: POP
// end ;
9877: LD_VAR 0 5
9881: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9882: LD_INT 0
9884: PPUSH
9885: PPUSH
9886: PPUSH
// if mpGameType <> GameTypeFamine then
9887: LD_EXP 3
9891: PUSH
9892: LD_INT 5
9894: NONEQUAL
9895: IFFALSE 9899
// exit ;
9897: GO 10133
// for i := 1 to mpGlobalSibDeposits do
9899: LD_ADDR_VAR 0 6
9903: PUSH
9904: DOUBLE
9905: LD_INT 1
9907: DEC
9908: ST_TO_ADDR
9909: LD_EXP 43
9913: PUSH
9914: FOR_TO
9915: IFFALSE 10131
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9917: LD_EXP 43
9921: PUSH
9922: LD_VAR 0 6
9926: ARRAY
9927: PUSH
9928: LD_INT 1
9930: ARRAY
9931: PPUSH
9932: LD_EXP 43
9936: PUSH
9937: LD_VAR 0 6
9941: ARRAY
9942: PUSH
9943: LD_INT 2
9945: ARRAY
9946: PPUSH
9947: CALL_OW 428
9951: PUSH
9952: LD_VAR 0 1
9956: EQUAL
9957: IFFALSE 10129
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9959: LD_ADDR_VAR 0 7
9963: PUSH
9964: LD_EXP 43
9968: PUSH
9969: LD_VAR 0 6
9973: ARRAY
9974: PUSH
9975: LD_INT 3
9977: ARRAY
9978: ST_TO_ADDR
// value := value - amount ;
9979: LD_ADDR_VAR 0 7
9983: PUSH
9984: LD_VAR 0 7
9988: PUSH
9989: LD_VAR 0 4
9993: MINUS
9994: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9995: LD_ADDR_EXP 43
9999: PUSH
10000: LD_EXP 43
10004: PPUSH
10005: LD_VAR 0 6
10009: PPUSH
10010: LD_EXP 43
10014: PUSH
10015: LD_VAR 0 6
10019: ARRAY
10020: PPUSH
10021: LD_INT 3
10023: PPUSH
10024: LD_VAR 0 7
10028: PPUSH
10029: CALL_OW 1
10033: PPUSH
10034: CALL_OW 1
10038: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10039: LD_VAR 0 2
10043: PUSH
10044: LD_OWVAR 2
10048: PUSH
10049: LD_INT 9
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: IN
10056: IFFALSE 10072
// SetUnitDisplayNumber ( building , value ) ;
10058: LD_VAR 0 1
10062: PPUSH
10063: LD_VAR 0 7
10067: PPUSH
10068: CALL_OW 505
// if value <= 0 then
10072: LD_VAR 0 7
10076: PUSH
10077: LD_INT 0
10079: LESSEQUAL
10080: IFFALSE 10129
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
10082: LD_EXP 43
10086: PUSH
10087: LD_VAR 0 6
10091: ARRAY
10092: PUSH
10093: LD_INT 1
10095: ARRAY
10096: PPUSH
10097: LD_EXP 43
10101: PUSH
10102: LD_VAR 0 6
10106: ARRAY
10107: PUSH
10108: LD_INT 2
10110: ARRAY
10111: PPUSH
10112: CALL_OW 63
// KillUnit ( building ) ;
10116: LD_VAR 0 1
10120: PPUSH
10121: CALL_OW 66
// exit ;
10125: POP
10126: POP
10127: GO 10133
// end ; end ; end ;
10129: GO 9914
10131: POP
10132: POP
// end ;
10133: LD_VAR 0 5
10137: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
10138: LD_INT 0
10140: PPUSH
10141: PPUSH
// side := GetSide ( factory ) ;
10142: LD_ADDR_VAR 0 7
10146: PUSH
10147: LD_VAR 0 1
10151: PPUSH
10152: CALL_OW 255
10156: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
10157: LD_VAR 0 5
10161: PUSH
10162: LD_INT 81
10164: EQUAL
10165: IFFALSE 10203
10167: PUSH
10168: LD_INT 22
10170: PUSH
10171: LD_VAR 0 7
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 34
10182: PUSH
10183: LD_INT 81
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PPUSH
10194: CALL_OW 69
10198: PUSH
10199: LD_INT 0
10201: GREATER
10202: AND
10203: IFFALSE 10236
// begin ComCancel ( factory ) ;
10205: LD_VAR 0 1
10209: PPUSH
10210: CALL_OW 127
// if side = your_side then
10214: LD_VAR 0 7
10218: PUSH
10219: LD_OWVAR 2
10223: EQUAL
10224: IFFALSE 10236
// HintSpec ( VehLimit , 2 ) ;
10226: LD_STRING VehLimit
10228: PPUSH
10229: LD_INT 2
10231: PPUSH
10232: CALL_OW 338
// end ; end ;
10236: LD_VAR 0 6
10240: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
10241: LD_INT 0
10243: PPUSH
10244: PPUSH
10245: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
10246: LD_VAR 0 1
10250: PPUSH
10251: CALL_OW 264
10255: PUSH
10256: LD_INT 81
10258: EQUAL
10259: IFFALSE 10276
10261: PUSH
10262: LD_VAR 0 1
10266: PPUSH
10267: CALL_OW 263
10271: PUSH
10272: LD_INT 1
10274: EQUAL
10275: AND
10276: IFFALSE 10556
// begin for i := 1 to Count ( minersList ) do
10278: LD_ADDR_VAR 0 6
10282: PUSH
10283: DOUBLE
10284: LD_INT 1
10286: DEC
10287: ST_TO_ADDR
10288: LD_EXP 57
10292: PPUSH
10293: CALL 13562 0 1
10297: PUSH
10298: FOR_TO
10299: IFFALSE 10417
// begin if minersList [ i ] = oldId then
10301: LD_EXP 57
10305: PUSH
10306: LD_VAR 0 6
10310: ARRAY
10311: PUSH
10312: LD_VAR 0 2
10316: EQUAL
10317: IFFALSE 10415
// begin for j := 1 to minerMinesList [ i ] do
10319: LD_ADDR_VAR 0 7
10323: PUSH
10324: DOUBLE
10325: LD_INT 1
10327: DEC
10328: ST_TO_ADDR
10329: LD_EXP 58
10333: PUSH
10334: LD_VAR 0 6
10338: ARRAY
10339: PUSH
10340: FOR_TO
10341: IFFALSE 10391
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
10343: LD_EXP 58
10347: PUSH
10348: LD_VAR 0 6
10352: ARRAY
10353: PUSH
10354: LD_VAR 0 7
10358: ARRAY
10359: PUSH
10360: LD_INT 1
10362: ARRAY
10363: PPUSH
10364: LD_EXP 58
10368: PUSH
10369: LD_VAR 0 6
10373: ARRAY
10374: PUSH
10375: LD_VAR 0 7
10379: ARRAY
10380: PUSH
10381: LD_INT 2
10383: ARRAY
10384: PPUSH
10385: CALL_OW 612
10389: GO 10340
10391: POP
10392: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
10393: LD_ADDR_EXP 58
10397: PUSH
10398: LD_EXP 58
10402: PPUSH
10403: LD_VAR 0 6
10407: PPUSH
10408: CALL_OW 3
10412: ST_TO_ADDR
// break ;
10413: GO 10417
// end ; end ;
10415: GO 10298
10417: POP
10418: POP
// minersList := minersList diff oldId ;
10419: LD_ADDR_EXP 57
10423: PUSH
10424: LD_EXP 57
10428: PUSH
10429: LD_VAR 0 2
10433: DIFF
10434: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
10435: LD_INT 22
10437: PUSH
10438: LD_VAR 0 4
10442: PPUSH
10443: CALL_OW 255
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: LD_INT 34
10454: PUSH
10455: LD_INT 81
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PPUSH
10466: CALL_OW 69
10470: PUSH
10471: LD_INT 1
10473: GREATER
10474: IFFALSE 10501
// begin ComExit ( unit ) ;
10476: LD_VAR 0 4
10480: PPUSH
10481: CALL 49936 0 1
// SetSide ( newId , oldSide ) ;
10485: LD_VAR 0 1
10489: PPUSH
10490: LD_VAR 0 3
10494: PPUSH
10495: CALL_OW 235
// exit ;
10499: GO 10556
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
10501: LD_ADDR_EXP 57
10505: PUSH
10506: LD_EXP 57
10510: PPUSH
10511: LD_EXP 57
10515: PUSH
10516: LD_INT 1
10518: PLUS
10519: PPUSH
10520: LD_VAR 0 1
10524: PPUSH
10525: CALL_OW 1
10529: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10530: LD_ADDR_EXP 58
10534: PUSH
10535: LD_EXP 58
10539: PPUSH
10540: LD_EXP 58
10544: PUSH
10545: LD_INT 1
10547: PLUS
10548: PPUSH
10549: EMPTY
10550: PPUSH
10551: CALL_OW 1
10555: ST_TO_ADDR
// end ; end ; end_of_file
10556: LD_VAR 0 5
10560: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10561: LD_EXP 39
10565: IFFALSE 10573
10567: PUSH
10568: CALL 10783 0 0
10572: AND
10573: IFFALSE 10581
10575: PUSH
10576: LD_OWVAR 4
10580: AND
10581: IFFALSE 10780
10583: GO 10585
10585: DISABLE
10586: LD_INT 0
10588: PPUSH
10589: PPUSH
// begin canWin := false ;
10590: LD_ADDR_VAR 0 2
10594: PUSH
10595: LD_INT 0
10597: ST_TO_ADDR
// if not HasPower ( your_side ) then
10598: LD_OWVAR 2
10602: PPUSH
10603: CALL 10825 0 1
10607: NOT
10608: IFFALSE 10619
// begin Multiplayer_Loose_Message ;
10610: CALL_OW 521
// enable ( mpLose ) ;
10614: LD_INT 102
10616: ENABLE_MARKED
// end else
10617: GO 10780
// begin canWin := true ;
10619: LD_ADDR_VAR 0 2
10623: PUSH
10624: LD_INT 1
10626: ST_TO_ADDR
// for i := 1 to 8 do
10627: LD_ADDR_VAR 0 1
10631: PUSH
10632: DOUBLE
10633: LD_INT 1
10635: DEC
10636: ST_TO_ADDR
10637: LD_INT 8
10639: PUSH
10640: FOR_TO
10641: IFFALSE 10766
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10643: LD_EXP 7
10647: PUSH
10648: LD_VAR 0 1
10652: ARRAY
10653: IFFALSE 10666
10655: PUSH
10656: LD_VAR 0 1
10660: PPUSH
10661: CALL_OW 108
10665: AND
10666: IFFALSE 10680
10668: PUSH
10669: LD_VAR 0 1
10673: PUSH
10674: LD_OWVAR 2
10678: NONEQUAL
10679: AND
10680: IFFALSE 10764
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10682: LD_EXP 8
10686: PUSH
10687: LD_VAR 0 1
10691: ARRAY
10692: NOT
10693: IFTRUE 10741
10695: PUSH
10696: LD_EXP 8
10700: PUSH
10701: LD_VAR 0 1
10705: ARRAY
10706: PUSH
10707: LD_EXP 8
10711: PUSH
10712: LD_OWVAR 2
10716: ARRAY
10717: NONEQUAL
10718: IFFALSE 10740
10720: PUSH
10721: LD_OWVAR 2
10725: PPUSH
10726: LD_VAR 0 1
10730: PPUSH
10731: CALL_OW 81
10735: PUSH
10736: LD_INT 1
10738: NONEQUAL
10739: AND
10740: OR
10741: IFFALSE 10764
// if HasPower ( i ) then
10743: LD_VAR 0 1
10747: PPUSH
10748: CALL 10825 0 1
10752: IFFALSE 10764
// begin canWin := false ;
10754: LD_ADDR_VAR 0 2
10758: PUSH
10759: LD_INT 0
10761: ST_TO_ADDR
// break ;
10762: GO 10766
// end ;
10764: GO 10640
10766: POP
10767: POP
// if canWin then
10768: LD_VAR 0 2
10772: IFFALSE 10779
// enable ( mpWin ) else
10774: LD_INT 101
10776: ENABLE_MARKED
10777: GO 10780
// enable ;
10779: ENABLE
// end ; end ;
10780: PPOPN 2
10782: END
// function CanWinLoose ; begin
10783: LD_INT 0
10785: PPUSH
// result := true ;
10786: LD_ADDR_VAR 0 1
10790: PUSH
10791: LD_INT 1
10793: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10794: CALL_OW 531
10798: IFFALSE 10810
10800: PUSH
10801: CALL_OW 519
10805: PUSH
10806: LD_INT 1
10808: GREATER
10809: AND
10810: IFFALSE 10820
// result := false ;
10812: LD_ADDR_VAR 0 1
10816: PUSH
10817: LD_INT 0
10819: ST_TO_ADDR
// end ;
10820: LD_VAR 0 1
10824: RET
// function HasPower ( i ) ; begin
10825: LD_INT 0
10827: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10828: LD_ADDR_VAR 0 2
10832: PUSH
10833: LD_INT 22
10835: PUSH
10836: LD_VAR 0 1
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: LD_INT 2
10847: PUSH
10848: LD_INT 21
10850: PUSH
10851: LD_INT 1
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: PUSH
10858: LD_INT 33
10860: PUSH
10861: LD_INT 3
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PUSH
10868: LD_INT 33
10870: PUSH
10871: LD_INT 5
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PPUSH
10888: CALL_OW 69
10892: ST_TO_ADDR
// end ; end_of_file
10893: LD_VAR 0 2
10897: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10898: LD_EXP 39
10902: IFFALSE 10945
10904: GO 10906
10906: DISABLE
10907: LD_INT 0
10909: PPUSH
// begin for i := 1 to 8 do
10910: LD_ADDR_VAR 0 1
10914: PUSH
10915: DOUBLE
10916: LD_INT 1
10918: DEC
10919: ST_TO_ADDR
10920: LD_INT 8
10922: PUSH
10923: FOR_TO
10924: IFFALSE 10943
// SetRestrict ( b_depot , i , state_disabled ) ;
10926: LD_INT 0
10928: PPUSH
10929: LD_VAR 0 1
10933: PPUSH
10934: LD_INT 0
10936: PPUSH
10937: CALL_OW 324
10941: GO 10923
10943: POP
10944: POP
// end ;
10945: PPOPN 1
10947: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10948: LD_EXP 39
10952: IFFALSE 10960
10954: PUSH
10955: CALL 11170 0 0
10959: AND
10960: IFFALSE 10968
10962: PUSH
10963: LD_OWVAR 4
10967: AND
10968: IFFALSE 11167
10970: GO 10972
10972: DISABLE
10973: LD_INT 0
10975: PPUSH
10976: PPUSH
// begin canWin := false ;
10977: LD_ADDR_VAR 0 2
10981: PUSH
10982: LD_INT 0
10984: ST_TO_ADDR
// if not HasPower ( your_side ) then
10985: LD_OWVAR 2
10989: PPUSH
10990: CALL 11212 0 1
10994: NOT
10995: IFFALSE 11006
// begin Multiplayer_Loose_Message ;
10997: CALL_OW 521
// enable ( mpLose ) ;
11001: LD_INT 102
11003: ENABLE_MARKED
// end else
11004: GO 11167
// begin canWin := true ;
11006: LD_ADDR_VAR 0 2
11010: PUSH
11011: LD_INT 1
11013: ST_TO_ADDR
// for i := 1 to 8 do
11014: LD_ADDR_VAR 0 1
11018: PUSH
11019: DOUBLE
11020: LD_INT 1
11022: DEC
11023: ST_TO_ADDR
11024: LD_INT 8
11026: PUSH
11027: FOR_TO
11028: IFFALSE 11153
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11030: LD_EXP 7
11034: PUSH
11035: LD_VAR 0 1
11039: ARRAY
11040: IFFALSE 11053
11042: PUSH
11043: LD_VAR 0 1
11047: PPUSH
11048: CALL_OW 108
11052: AND
11053: IFFALSE 11067
11055: PUSH
11056: LD_VAR 0 1
11060: PUSH
11061: LD_OWVAR 2
11065: NONEQUAL
11066: AND
11067: IFFALSE 11151
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11069: LD_EXP 8
11073: PUSH
11074: LD_VAR 0 1
11078: ARRAY
11079: NOT
11080: IFTRUE 11128
11082: PUSH
11083: LD_EXP 8
11087: PUSH
11088: LD_VAR 0 1
11092: ARRAY
11093: PUSH
11094: LD_EXP 8
11098: PUSH
11099: LD_OWVAR 2
11103: ARRAY
11104: NONEQUAL
11105: IFFALSE 11127
11107: PUSH
11108: LD_OWVAR 2
11112: PPUSH
11113: LD_VAR 0 1
11117: PPUSH
11118: CALL_OW 81
11122: PUSH
11123: LD_INT 1
11125: NONEQUAL
11126: AND
11127: OR
11128: IFFALSE 11151
// if HasPower ( i ) then
11130: LD_VAR 0 1
11134: PPUSH
11135: CALL 11212 0 1
11139: IFFALSE 11151
// begin canWin := false ;
11141: LD_ADDR_VAR 0 2
11145: PUSH
11146: LD_INT 0
11148: ST_TO_ADDR
// break ;
11149: GO 11153
// end ;
11151: GO 11027
11153: POP
11154: POP
// if canWin then
11155: LD_VAR 0 2
11159: IFFALSE 11166
// enable ( mpWin ) else
11161: LD_INT 101
11163: ENABLE_MARKED
11164: GO 11167
// enable ;
11166: ENABLE
// end ; end ;
11167: PPOPN 2
11169: END
// function CanWinLoose ; begin
11170: LD_INT 0
11172: PPUSH
// result := true ;
11173: LD_ADDR_VAR 0 1
11177: PUSH
11178: LD_INT 1
11180: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11181: CALL_OW 531
11185: IFFALSE 11197
11187: PUSH
11188: CALL_OW 519
11192: PUSH
11193: LD_INT 1
11195: GREATER
11196: AND
11197: IFFALSE 11207
// result := false ;
11199: LD_ADDR_VAR 0 1
11203: PUSH
11204: LD_INT 0
11206: ST_TO_ADDR
// end ;
11207: LD_VAR 0 1
11211: RET
// function HasPower ( i ) ; begin
11212: LD_INT 0
11214: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11215: LD_INT 22
11217: PUSH
11218: LD_VAR 0 1
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 2
11229: PUSH
11230: LD_INT 30
11232: PUSH
11233: LD_INT 0
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: LD_INT 30
11242: PUSH
11243: LD_INT 1
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PPUSH
11259: CALL_OW 69
11263: NOT
11264: IFFALSE 11268
// exit ;
11266: GO 11333
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11268: LD_ADDR_VAR 0 2
11272: PUSH
11273: LD_INT 22
11275: PUSH
11276: LD_VAR 0 1
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 2
11287: PUSH
11288: LD_INT 21
11290: PUSH
11291: LD_INT 1
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 33
11300: PUSH
11301: LD_INT 3
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 33
11310: PUSH
11311: LD_INT 5
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 69
11332: ST_TO_ADDR
// end ; end_of_file
11333: LD_VAR 0 2
11337: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11338: LD_INT 0
11340: PPUSH
11341: PPUSH
// if exist_mode then
11342: LD_VAR 0 2
11346: IFFALSE 11392
// begin unit := CreateCharacter ( prefix & ident ) ;
11348: LD_ADDR_VAR 0 5
11352: PUSH
11353: LD_VAR 0 3
11357: PUSH
11358: LD_VAR 0 1
11362: STR
11363: PPUSH
11364: CALL_OW 34
11368: ST_TO_ADDR
// if unit then
11369: LD_VAR 0 5
11373: IFFALSE 11390
// DeleteCharacters ( prefix & ident ) ;
11375: LD_VAR 0 3
11379: PUSH
11380: LD_VAR 0 1
11384: STR
11385: PPUSH
11386: CALL_OW 40
// end else
11390: GO 11407
// unit := NewCharacter ( ident ) ;
11392: LD_ADDR_VAR 0 5
11396: PUSH
11397: LD_VAR 0 1
11401: PPUSH
11402: CALL_OW 25
11406: ST_TO_ADDR
// result := unit ;
11407: LD_ADDR_VAR 0 4
11411: PUSH
11412: LD_VAR 0 5
11416: ST_TO_ADDR
// end ;
11417: LD_VAR 0 4
11421: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
11422: LD_INT 0
11424: PPUSH
11425: PPUSH
// if exist_mode then
11426: LD_VAR 0 2
11430: IFFALSE 11455
// unit := CreateCharacter ( prefix & ident ) else
11432: LD_ADDR_VAR 0 5
11436: PUSH
11437: LD_VAR 0 3
11441: PUSH
11442: LD_VAR 0 1
11446: STR
11447: PPUSH
11448: CALL_OW 34
11452: ST_TO_ADDR
11453: GO 11470
// unit := NewCharacter ( ident ) ;
11455: LD_ADDR_VAR 0 5
11459: PUSH
11460: LD_VAR 0 1
11464: PPUSH
11465: CALL_OW 25
11469: ST_TO_ADDR
// result := unit ;
11470: LD_ADDR_VAR 0 4
11474: PUSH
11475: LD_VAR 0 5
11479: ST_TO_ADDR
// end ;
11480: LD_VAR 0 4
11484: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11485: LD_INT 0
11487: PPUSH
11488: PPUSH
// if not side or not nation then
11489: LD_VAR 0 1
11493: NOT
11494: IFTRUE 11503
11496: PUSH
11497: LD_VAR 0 2
11501: NOT
11502: OR
11503: IFFALSE 11507
// exit ;
11505: GO 12301
// case nation of nation_american :
11507: LD_VAR 0 2
11511: PUSH
11512: LD_INT 1
11514: DOUBLE
11515: EQUAL
11516: IFTRUE 11520
11518: GO 11742
11520: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
11521: LD_ADDR_VAR 0 4
11525: PUSH
11526: LD_INT 35
11528: PUSH
11529: LD_INT 45
11531: PUSH
11532: LD_INT 46
11534: PUSH
11535: LD_INT 47
11537: PUSH
11538: LD_INT 82
11540: PUSH
11541: LD_INT 83
11543: PUSH
11544: LD_INT 84
11546: PUSH
11547: LD_INT 85
11549: PUSH
11550: LD_INT 86
11552: PUSH
11553: LD_INT 1
11555: PUSH
11556: LD_INT 2
11558: PUSH
11559: LD_INT 6
11561: PUSH
11562: LD_INT 15
11564: PUSH
11565: LD_INT 16
11567: PUSH
11568: LD_INT 7
11570: PUSH
11571: LD_INT 12
11573: PUSH
11574: LD_INT 13
11576: PUSH
11577: LD_INT 10
11579: PUSH
11580: LD_INT 14
11582: PUSH
11583: LD_INT 20
11585: PUSH
11586: LD_INT 21
11588: PUSH
11589: LD_INT 22
11591: PUSH
11592: LD_INT 25
11594: PUSH
11595: LD_INT 32
11597: PUSH
11598: LD_INT 27
11600: PUSH
11601: LD_INT 36
11603: PUSH
11604: LD_INT 69
11606: PUSH
11607: LD_INT 39
11609: PUSH
11610: LD_INT 34
11612: PUSH
11613: LD_INT 40
11615: PUSH
11616: LD_INT 48
11618: PUSH
11619: LD_INT 49
11621: PUSH
11622: LD_INT 50
11624: PUSH
11625: LD_INT 51
11627: PUSH
11628: LD_INT 52
11630: PUSH
11631: LD_INT 53
11633: PUSH
11634: LD_INT 54
11636: PUSH
11637: LD_INT 55
11639: PUSH
11640: LD_INT 56
11642: PUSH
11643: LD_INT 57
11645: PUSH
11646: LD_INT 58
11648: PUSH
11649: LD_INT 59
11651: PUSH
11652: LD_INT 60
11654: PUSH
11655: LD_INT 61
11657: PUSH
11658: LD_INT 62
11660: PUSH
11661: LD_INT 80
11663: PUSH
11664: LD_INT 82
11666: PUSH
11667: LD_INT 83
11669: PUSH
11670: LD_INT 84
11672: PUSH
11673: LD_INT 85
11675: PUSH
11676: LD_INT 86
11678: PUSH
11679: LD_INT 90
11681: PUSH
11682: LD_INT 93
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: ST_TO_ADDR
11740: GO 12223
11742: LD_INT 2
11744: DOUBLE
11745: EQUAL
11746: IFTRUE 11750
11748: GO 11984
11750: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11751: LD_ADDR_VAR 0 4
11755: PUSH
11756: LD_INT 35
11758: PUSH
11759: LD_INT 45
11761: PUSH
11762: LD_INT 46
11764: PUSH
11765: LD_INT 47
11767: PUSH
11768: LD_INT 82
11770: PUSH
11771: LD_INT 83
11773: PUSH
11774: LD_INT 84
11776: PUSH
11777: LD_INT 85
11779: PUSH
11780: LD_INT 87
11782: PUSH
11783: LD_INT 70
11785: PUSH
11786: LD_INT 1
11788: PUSH
11789: LD_INT 11
11791: PUSH
11792: LD_INT 3
11794: PUSH
11795: LD_INT 4
11797: PUSH
11798: LD_INT 5
11800: PUSH
11801: LD_INT 6
11803: PUSH
11804: LD_INT 15
11806: PUSH
11807: LD_INT 18
11809: PUSH
11810: LD_INT 7
11812: PUSH
11813: LD_INT 17
11815: PUSH
11816: LD_INT 8
11818: PUSH
11819: LD_INT 20
11821: PUSH
11822: LD_INT 21
11824: PUSH
11825: LD_INT 22
11827: PUSH
11828: LD_INT 72
11830: PUSH
11831: LD_INT 26
11833: PUSH
11834: LD_INT 69
11836: PUSH
11837: LD_INT 39
11839: PUSH
11840: LD_INT 40
11842: PUSH
11843: LD_INT 41
11845: PUSH
11846: LD_INT 42
11848: PUSH
11849: LD_INT 43
11851: PUSH
11852: LD_INT 48
11854: PUSH
11855: LD_INT 49
11857: PUSH
11858: LD_INT 50
11860: PUSH
11861: LD_INT 51
11863: PUSH
11864: LD_INT 52
11866: PUSH
11867: LD_INT 53
11869: PUSH
11870: LD_INT 54
11872: PUSH
11873: LD_INT 55
11875: PUSH
11876: LD_INT 56
11878: PUSH
11879: LD_INT 60
11881: PUSH
11882: LD_INT 61
11884: PUSH
11885: LD_INT 62
11887: PUSH
11888: LD_INT 66
11890: PUSH
11891: LD_INT 67
11893: PUSH
11894: LD_INT 68
11896: PUSH
11897: LD_INT 81
11899: PUSH
11900: LD_INT 82
11902: PUSH
11903: LD_INT 83
11905: PUSH
11906: LD_INT 84
11908: PUSH
11909: LD_INT 85
11911: PUSH
11912: LD_INT 87
11914: PUSH
11915: LD_INT 88
11917: PUSH
11918: LD_INT 92
11920: PUSH
11921: LD_INT 94
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: ST_TO_ADDR
11982: GO 12223
11984: LD_INT 3
11986: DOUBLE
11987: EQUAL
11988: IFTRUE 11992
11990: GO 12222
11992: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
11993: LD_ADDR_VAR 0 4
11997: PUSH
11998: LD_INT 46
12000: PUSH
12001: LD_INT 47
12003: PUSH
12004: LD_INT 1
12006: PUSH
12007: LD_INT 2
12009: PUSH
12010: LD_INT 82
12012: PUSH
12013: LD_INT 83
12015: PUSH
12016: LD_INT 84
12018: PUSH
12019: LD_INT 85
12021: PUSH
12022: LD_INT 86
12024: PUSH
12025: LD_INT 11
12027: PUSH
12028: LD_INT 9
12030: PUSH
12031: LD_INT 20
12033: PUSH
12034: LD_INT 19
12036: PUSH
12037: LD_INT 21
12039: PUSH
12040: LD_INT 24
12042: PUSH
12043: LD_INT 22
12045: PUSH
12046: LD_INT 25
12048: PUSH
12049: LD_INT 28
12051: PUSH
12052: LD_INT 29
12054: PUSH
12055: LD_INT 30
12057: PUSH
12058: LD_INT 31
12060: PUSH
12061: LD_INT 37
12063: PUSH
12064: LD_INT 38
12066: PUSH
12067: LD_INT 32
12069: PUSH
12070: LD_INT 27
12072: PUSH
12073: LD_INT 33
12075: PUSH
12076: LD_INT 69
12078: PUSH
12079: LD_INT 39
12081: PUSH
12082: LD_INT 34
12084: PUSH
12085: LD_INT 40
12087: PUSH
12088: LD_INT 71
12090: PUSH
12091: LD_INT 23
12093: PUSH
12094: LD_INT 44
12096: PUSH
12097: LD_INT 48
12099: PUSH
12100: LD_INT 49
12102: PUSH
12103: LD_INT 50
12105: PUSH
12106: LD_INT 51
12108: PUSH
12109: LD_INT 52
12111: PUSH
12112: LD_INT 53
12114: PUSH
12115: LD_INT 54
12117: PUSH
12118: LD_INT 55
12120: PUSH
12121: LD_INT 56
12123: PUSH
12124: LD_INT 57
12126: PUSH
12127: LD_INT 58
12129: PUSH
12130: LD_INT 59
12132: PUSH
12133: LD_INT 63
12135: PUSH
12136: LD_INT 64
12138: PUSH
12139: LD_INT 65
12141: PUSH
12142: LD_INT 82
12144: PUSH
12145: LD_INT 83
12147: PUSH
12148: LD_INT 84
12150: PUSH
12151: LD_INT 85
12153: PUSH
12154: LD_INT 86
12156: PUSH
12157: LD_INT 89
12159: PUSH
12160: LD_INT 91
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: ST_TO_ADDR
12220: GO 12223
12222: POP
// if state > - 1 and state < 3 then
12223: LD_VAR 0 3
12227: PUSH
12228: LD_INT 1
12230: NEG
12231: GREATER
12232: IFFALSE 12244
12234: PUSH
12235: LD_VAR 0 3
12239: PUSH
12240: LD_INT 3
12242: LESS
12243: AND
12244: IFFALSE 12301
// for i in result do
12246: LD_ADDR_VAR 0 5
12250: PUSH
12251: LD_VAR 0 4
12255: PUSH
12256: FOR_IN
12257: IFFALSE 12299
// if GetTech ( i , side ) <> state then
12259: LD_VAR 0 5
12263: PPUSH
12264: LD_VAR 0 1
12268: PPUSH
12269: CALL_OW 321
12273: PUSH
12274: LD_VAR 0 3
12278: NONEQUAL
12279: IFFALSE 12297
// result := result diff i ;
12281: LD_ADDR_VAR 0 4
12285: PUSH
12286: LD_VAR 0 4
12290: PUSH
12291: LD_VAR 0 5
12295: DIFF
12296: ST_TO_ADDR
12297: GO 12256
12299: POP
12300: POP
// end ;
12301: LD_VAR 0 4
12305: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
12306: LD_INT 0
12308: PPUSH
12309: PPUSH
12310: PPUSH
// result := true ;
12311: LD_ADDR_VAR 0 3
12315: PUSH
12316: LD_INT 1
12318: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
12319: LD_ADDR_VAR 0 5
12323: PUSH
12324: LD_VAR 0 2
12328: PPUSH
12329: CALL_OW 480
12333: ST_TO_ADDR
// if not tmp then
12334: LD_VAR 0 5
12338: NOT
12339: IFFALSE 12343
// exit ;
12341: GO 12392
// for i in tmp do
12343: LD_ADDR_VAR 0 4
12347: PUSH
12348: LD_VAR 0 5
12352: PUSH
12353: FOR_IN
12354: IFFALSE 12390
// if GetTech ( i , side ) <> state_researched then
12356: LD_VAR 0 4
12360: PPUSH
12361: LD_VAR 0 1
12365: PPUSH
12366: CALL_OW 321
12370: PUSH
12371: LD_INT 2
12373: NONEQUAL
12374: IFFALSE 12388
// begin result := false ;
12376: LD_ADDR_VAR 0 3
12380: PUSH
12381: LD_INT 0
12383: ST_TO_ADDR
// exit ;
12384: POP
12385: POP
12386: GO 12392
// end ;
12388: GO 12353
12390: POP
12391: POP
// end ;
12392: LD_VAR 0 3
12396: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12397: LD_INT 0
12399: PPUSH
12400: PPUSH
12401: PPUSH
12402: PPUSH
12403: PPUSH
12404: PPUSH
12405: PPUSH
12406: PPUSH
12407: PPUSH
12408: PPUSH
12409: PPUSH
12410: PPUSH
12411: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12412: LD_VAR 0 1
12416: NOT
12417: IFTRUE 12434
12419: PUSH
12420: LD_VAR 0 1
12424: PPUSH
12425: CALL_OW 257
12429: PUSH
12430: LD_INT 9
12432: NONEQUAL
12433: OR
12434: IFFALSE 12438
// exit ;
12436: GO 13017
// side := GetSide ( unit ) ;
12438: LD_ADDR_VAR 0 9
12442: PUSH
12443: LD_VAR 0 1
12447: PPUSH
12448: CALL_OW 255
12452: ST_TO_ADDR
// tech_space := tech_spacanom ;
12453: LD_ADDR_VAR 0 12
12457: PUSH
12458: LD_INT 29
12460: ST_TO_ADDR
// tech_time := tech_taurad ;
12461: LD_ADDR_VAR 0 13
12465: PUSH
12466: LD_INT 28
12468: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12469: LD_ADDR_VAR 0 11
12473: PUSH
12474: LD_VAR 0 1
12478: PPUSH
12479: CALL_OW 310
12483: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12484: LD_VAR 0 11
12488: PPUSH
12489: CALL_OW 247
12493: PUSH
12494: LD_INT 2
12496: EQUAL
12497: IFFALSE 12501
// exit ;
12499: GO 13017
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12501: LD_ADDR_VAR 0 8
12505: PUSH
12506: LD_INT 81
12508: PUSH
12509: LD_VAR 0 9
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PUSH
12518: LD_INT 3
12520: PUSH
12521: LD_INT 21
12523: PUSH
12524: LD_INT 3
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PPUSH
12539: CALL_OW 69
12543: ST_TO_ADDR
// if not tmp then
12544: LD_VAR 0 8
12548: NOT
12549: IFFALSE 12553
// exit ;
12551: GO 13017
// if in_unit then
12553: LD_VAR 0 11
12557: IFFALSE 12581
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12559: LD_ADDR_VAR 0 10
12563: PUSH
12564: LD_VAR 0 8
12568: PPUSH
12569: LD_VAR 0 11
12573: PPUSH
12574: CALL_OW 74
12578: ST_TO_ADDR
12579: GO 12601
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12581: LD_ADDR_VAR 0 10
12585: PUSH
12586: LD_VAR 0 8
12590: PPUSH
12591: LD_VAR 0 1
12595: PPUSH
12596: CALL_OW 74
12600: ST_TO_ADDR
// if not enemy then
12601: LD_VAR 0 10
12605: NOT
12606: IFFALSE 12610
// exit ;
12608: GO 13017
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12610: LD_VAR 0 11
12614: IFFALSE 12636
12616: PUSH
12617: LD_VAR 0 11
12621: PPUSH
12622: LD_VAR 0 10
12626: PPUSH
12627: CALL_OW 296
12631: PUSH
12632: LD_INT 13
12634: GREATER
12635: AND
12636: IFTRUE 12658
12638: PUSH
12639: LD_VAR 0 1
12643: PPUSH
12644: LD_VAR 0 10
12648: PPUSH
12649: CALL_OW 296
12653: PUSH
12654: LD_INT 12
12656: GREATER
12657: OR
12658: IFFALSE 12662
// exit ;
12660: GO 13017
// missile := [ 1 ] ;
12662: LD_ADDR_VAR 0 14
12666: PUSH
12667: LD_INT 1
12669: PUSH
12670: EMPTY
12671: LIST
12672: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12673: LD_VAR 0 9
12677: PPUSH
12678: LD_VAR 0 12
12682: PPUSH
12683: CALL_OW 325
12687: IFFALSE 12716
// missile := Replace ( missile , missile + 1 , 2 ) ;
12689: LD_ADDR_VAR 0 14
12693: PUSH
12694: LD_VAR 0 14
12698: PPUSH
12699: LD_VAR 0 14
12703: PUSH
12704: LD_INT 1
12706: PLUS
12707: PPUSH
12708: LD_INT 2
12710: PPUSH
12711: CALL_OW 1
12715: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12716: LD_VAR 0 9
12720: PPUSH
12721: LD_VAR 0 13
12725: PPUSH
12726: CALL_OW 325
12730: IFFALSE 12754
12732: PUSH
12733: LD_VAR 0 10
12737: PPUSH
12738: CALL_OW 255
12742: PPUSH
12743: LD_VAR 0 13
12747: PPUSH
12748: CALL_OW 325
12752: NOT
12753: AND
12754: IFFALSE 12783
// missile := Replace ( missile , missile + 1 , 3 ) ;
12756: LD_ADDR_VAR 0 14
12760: PUSH
12761: LD_VAR 0 14
12765: PPUSH
12766: LD_VAR 0 14
12770: PUSH
12771: LD_INT 1
12773: PLUS
12774: PPUSH
12775: LD_INT 3
12777: PPUSH
12778: CALL_OW 1
12782: ST_TO_ADDR
// if missile < 2 then
12783: LD_VAR 0 14
12787: PUSH
12788: LD_INT 2
12790: LESS
12791: IFFALSE 12795
// exit ;
12793: GO 13017
// x := GetX ( enemy ) ;
12795: LD_ADDR_VAR 0 4
12799: PUSH
12800: LD_VAR 0 10
12804: PPUSH
12805: CALL_OW 250
12809: ST_TO_ADDR
// y := GetY ( enemy ) ;
12810: LD_ADDR_VAR 0 5
12814: PUSH
12815: LD_VAR 0 10
12819: PPUSH
12820: CALL_OW 251
12824: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12825: LD_ADDR_VAR 0 6
12829: PUSH
12830: LD_VAR 0 4
12834: PUSH
12835: LD_INT 1
12837: NEG
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: CALL_OW 12
12846: PLUS
12847: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12848: LD_ADDR_VAR 0 7
12852: PUSH
12853: LD_VAR 0 5
12857: PUSH
12858: LD_INT 1
12860: NEG
12861: PPUSH
12862: LD_INT 1
12864: PPUSH
12865: CALL_OW 12
12869: PLUS
12870: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12871: LD_VAR 0 6
12875: PPUSH
12876: LD_VAR 0 7
12880: PPUSH
12881: CALL_OW 488
12885: NOT
12886: IFFALSE 12908
// begin _x := x ;
12888: LD_ADDR_VAR 0 6
12892: PUSH
12893: LD_VAR 0 4
12897: ST_TO_ADDR
// _y := y ;
12898: LD_ADDR_VAR 0 7
12902: PUSH
12903: LD_VAR 0 5
12907: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12908: LD_ADDR_VAR 0 3
12912: PUSH
12913: LD_INT 1
12915: PPUSH
12916: LD_VAR 0 14
12920: PPUSH
12921: CALL_OW 12
12925: ST_TO_ADDR
// case i of 1 :
12926: LD_VAR 0 3
12930: PUSH
12931: LD_INT 1
12933: DOUBLE
12934: EQUAL
12935: IFTRUE 12939
12937: GO 12956
12939: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12940: LD_VAR 0 1
12944: PPUSH
12945: LD_VAR 0 10
12949: PPUSH
12950: CALL_OW 115
12954: GO 13017
12956: LD_INT 2
12958: DOUBLE
12959: EQUAL
12960: IFTRUE 12964
12962: GO 12986
12964: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12965: LD_VAR 0 1
12969: PPUSH
12970: LD_VAR 0 6
12974: PPUSH
12975: LD_VAR 0 7
12979: PPUSH
12980: CALL_OW 153
12984: GO 13017
12986: LD_INT 3
12988: DOUBLE
12989: EQUAL
12990: IFTRUE 12994
12992: GO 13016
12994: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12995: LD_VAR 0 1
12999: PPUSH
13000: LD_VAR 0 6
13004: PPUSH
13005: LD_VAR 0 7
13009: PPUSH
13010: CALL_OW 154
13014: GO 13017
13016: POP
// end ;
13017: LD_VAR 0 2
13021: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
13022: LD_INT 0
13024: PPUSH
13025: PPUSH
13026: PPUSH
13027: PPUSH
13028: PPUSH
13029: PPUSH
// if not unit or not building then
13030: LD_VAR 0 1
13034: NOT
13035: IFTRUE 13044
13037: PUSH
13038: LD_VAR 0 2
13042: NOT
13043: OR
13044: IFFALSE 13048
// exit ;
13046: GO 13206
// x := GetX ( building ) ;
13048: LD_ADDR_VAR 0 5
13052: PUSH
13053: LD_VAR 0 2
13057: PPUSH
13058: CALL_OW 250
13062: ST_TO_ADDR
// y := GetY ( building ) ;
13063: LD_ADDR_VAR 0 6
13067: PUSH
13068: LD_VAR 0 2
13072: PPUSH
13073: CALL_OW 251
13077: ST_TO_ADDR
// for i := 0 to 5 do
13078: LD_ADDR_VAR 0 4
13082: PUSH
13083: DOUBLE
13084: LD_INT 0
13086: DEC
13087: ST_TO_ADDR
13088: LD_INT 5
13090: PUSH
13091: FOR_TO
13092: IFFALSE 13204
// begin _x := ShiftX ( x , i , 3 ) ;
13094: LD_ADDR_VAR 0 7
13098: PUSH
13099: LD_VAR 0 5
13103: PPUSH
13104: LD_VAR 0 4
13108: PPUSH
13109: LD_INT 3
13111: PPUSH
13112: CALL_OW 272
13116: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13117: LD_ADDR_VAR 0 8
13121: PUSH
13122: LD_VAR 0 6
13126: PPUSH
13127: LD_VAR 0 4
13131: PPUSH
13132: LD_INT 3
13134: PPUSH
13135: CALL_OW 273
13139: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13140: LD_VAR 0 7
13144: PPUSH
13145: LD_VAR 0 8
13149: PPUSH
13150: CALL_OW 488
13154: NOT
13155: IFFALSE 13159
// continue ;
13157: GO 13091
// if HexInfo ( _x , _y ) = 0 then
13159: LD_VAR 0 7
13163: PPUSH
13164: LD_VAR 0 8
13168: PPUSH
13169: CALL_OW 428
13173: PUSH
13174: LD_INT 0
13176: EQUAL
13177: IFFALSE 13202
// begin ComMoveXY ( unit , _x , _y ) ;
13179: LD_VAR 0 1
13183: PPUSH
13184: LD_VAR 0 7
13188: PPUSH
13189: LD_VAR 0 8
13193: PPUSH
13194: CALL_OW 111
// exit ;
13198: POP
13199: POP
13200: GO 13206
// end ; end ;
13202: GO 13091
13204: POP
13205: POP
// end ;
13206: LD_VAR 0 3
13210: RET
// export function ScanBase ( side , base_area ) ; begin
13211: LD_INT 0
13213: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
13214: LD_ADDR_VAR 0 3
13218: PUSH
13219: LD_VAR 0 2
13223: PPUSH
13224: LD_INT 81
13226: PUSH
13227: LD_VAR 0 1
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PPUSH
13236: CALL_OW 70
13240: ST_TO_ADDR
// end ;
13241: LD_VAR 0 3
13245: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
13246: LD_INT 0
13248: PPUSH
13249: PPUSH
13250: PPUSH
13251: PPUSH
// result := false ;
13252: LD_ADDR_VAR 0 2
13256: PUSH
13257: LD_INT 0
13259: ST_TO_ADDR
// side := GetSide ( unit ) ;
13260: LD_ADDR_VAR 0 3
13264: PUSH
13265: LD_VAR 0 1
13269: PPUSH
13270: CALL_OW 255
13274: ST_TO_ADDR
// nat := GetNation ( unit ) ;
13275: LD_ADDR_VAR 0 4
13279: PUSH
13280: LD_VAR 0 1
13284: PPUSH
13285: CALL_OW 248
13289: ST_TO_ADDR
// case nat of 1 :
13290: LD_VAR 0 4
13294: PUSH
13295: LD_INT 1
13297: DOUBLE
13298: EQUAL
13299: IFTRUE 13303
13301: GO 13314
13303: POP
// tech := tech_lassight ; 2 :
13304: LD_ADDR_VAR 0 5
13308: PUSH
13309: LD_INT 12
13311: ST_TO_ADDR
13312: GO 13353
13314: LD_INT 2
13316: DOUBLE
13317: EQUAL
13318: IFTRUE 13322
13320: GO 13333
13322: POP
// tech := tech_mortar ; 3 :
13323: LD_ADDR_VAR 0 5
13327: PUSH
13328: LD_INT 41
13330: ST_TO_ADDR
13331: GO 13353
13333: LD_INT 3
13335: DOUBLE
13336: EQUAL
13337: IFTRUE 13341
13339: GO 13352
13341: POP
// tech := tech_bazooka ; end ;
13342: LD_ADDR_VAR 0 5
13346: PUSH
13347: LD_INT 44
13349: ST_TO_ADDR
13350: GO 13353
13352: POP
// if Researched ( side , tech ) then
13353: LD_VAR 0 3
13357: PPUSH
13358: LD_VAR 0 5
13362: PPUSH
13363: CALL_OW 325
13367: IFFALSE 13394
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13369: LD_ADDR_VAR 0 2
13373: PUSH
13374: LD_INT 5
13376: PUSH
13377: LD_INT 8
13379: PUSH
13380: LD_INT 9
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: LIST
13387: PUSH
13388: LD_VAR 0 4
13392: ARRAY
13393: ST_TO_ADDR
// end ;
13394: LD_VAR 0 2
13398: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13399: LD_INT 0
13401: PPUSH
13402: PPUSH
13403: PPUSH
// if not mines then
13404: LD_VAR 0 2
13408: NOT
13409: IFFALSE 13413
// exit ;
13411: GO 13557
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13413: LD_ADDR_VAR 0 5
13417: PUSH
13418: LD_INT 81
13420: PUSH
13421: LD_VAR 0 1
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 3
13432: PUSH
13433: LD_INT 21
13435: PUSH
13436: LD_INT 3
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 69
13455: ST_TO_ADDR
// for i in mines do
13456: LD_ADDR_VAR 0 4
13460: PUSH
13461: LD_VAR 0 2
13465: PUSH
13466: FOR_IN
13467: IFFALSE 13555
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13469: LD_VAR 0 4
13473: PUSH
13474: LD_INT 1
13476: ARRAY
13477: PPUSH
13478: LD_VAR 0 4
13482: PUSH
13483: LD_INT 2
13485: ARRAY
13486: PPUSH
13487: CALL_OW 458
13491: NOT
13492: IFFALSE 13496
// continue ;
13494: GO 13466
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13496: LD_VAR 0 4
13500: PUSH
13501: LD_INT 1
13503: ARRAY
13504: PPUSH
13505: LD_VAR 0 4
13509: PUSH
13510: LD_INT 2
13512: ARRAY
13513: PPUSH
13514: CALL_OW 428
13518: PUSH
13519: LD_VAR 0 5
13523: IN
13524: IFFALSE 13553
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13526: LD_VAR 0 4
13530: PUSH
13531: LD_INT 1
13533: ARRAY
13534: PPUSH
13535: LD_VAR 0 4
13539: PUSH
13540: LD_INT 2
13542: ARRAY
13543: PPUSH
13544: LD_VAR 0 1
13548: PPUSH
13549: CALL_OW 456
// end ;
13553: GO 13466
13555: POP
13556: POP
// end ;
13557: LD_VAR 0 3
13561: RET
// export function Count ( array ) ; begin
13562: LD_INT 0
13564: PPUSH
// result := array + 0 ;
13565: LD_ADDR_VAR 0 2
13569: PUSH
13570: LD_VAR 0 1
13574: PUSH
13575: LD_INT 0
13577: PLUS
13578: ST_TO_ADDR
// end ;
13579: LD_VAR 0 2
13583: RET
// export function IsEmpty ( building ) ; begin
13584: LD_INT 0
13586: PPUSH
// if not building then
13587: LD_VAR 0 1
13591: NOT
13592: IFFALSE 13596
// exit ;
13594: GO 13639
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13596: LD_ADDR_VAR 0 2
13600: PUSH
13601: LD_VAR 0 1
13605: PUSH
13606: LD_INT 22
13608: PUSH
13609: LD_VAR 0 1
13613: PPUSH
13614: CALL_OW 255
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 58
13625: PUSH
13626: EMPTY
13627: LIST
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PPUSH
13633: CALL_OW 69
13637: IN
13638: ST_TO_ADDR
// end ;
13639: LD_VAR 0 2
13643: RET
// export function IsNotFull ( building ) ; var places ; begin
13644: LD_INT 0
13646: PPUSH
13647: PPUSH
// if not building then
13648: LD_VAR 0 1
13652: NOT
13653: IFFALSE 13657
// exit ;
13655: GO 13685
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
13657: LD_ADDR_VAR 0 2
13661: PUSH
13662: LD_VAR 0 1
13666: PPUSH
13667: LD_INT 3
13669: PUSH
13670: LD_INT 62
13672: PUSH
13673: EMPTY
13674: LIST
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PPUSH
13680: CALL_OW 72
13684: ST_TO_ADDR
// end ;
13685: LD_VAR 0 2
13689: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13690: LD_INT 0
13692: PPUSH
13693: PPUSH
13694: PPUSH
13695: PPUSH
// tmp := [ ] ;
13696: LD_ADDR_VAR 0 3
13700: PUSH
13701: EMPTY
13702: ST_TO_ADDR
// list := [ ] ;
13703: LD_ADDR_VAR 0 5
13707: PUSH
13708: EMPTY
13709: ST_TO_ADDR
// for i = 16 to 25 do
13710: LD_ADDR_VAR 0 4
13714: PUSH
13715: DOUBLE
13716: LD_INT 16
13718: DEC
13719: ST_TO_ADDR
13720: LD_INT 25
13722: PUSH
13723: FOR_TO
13724: IFFALSE 13797
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13726: LD_ADDR_VAR 0 3
13730: PUSH
13731: LD_VAR 0 3
13735: PUSH
13736: LD_INT 22
13738: PUSH
13739: LD_VAR 0 1
13743: PPUSH
13744: CALL_OW 255
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: LD_INT 91
13755: PUSH
13756: LD_VAR 0 1
13760: PUSH
13761: LD_INT 6
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: LIST
13768: PUSH
13769: LD_INT 30
13771: PUSH
13772: LD_VAR 0 4
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: LIST
13785: PUSH
13786: EMPTY
13787: LIST
13788: PPUSH
13789: CALL_OW 69
13793: ADD
13794: ST_TO_ADDR
13795: GO 13723
13797: POP
13798: POP
// for i = 1 to tmp do
13799: LD_ADDR_VAR 0 4
13803: PUSH
13804: DOUBLE
13805: LD_INT 1
13807: DEC
13808: ST_TO_ADDR
13809: LD_VAR 0 3
13813: PUSH
13814: FOR_TO
13815: IFFALSE 13903
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13817: LD_ADDR_VAR 0 5
13821: PUSH
13822: LD_VAR 0 5
13826: PUSH
13827: LD_VAR 0 3
13831: PUSH
13832: LD_VAR 0 4
13836: ARRAY
13837: PPUSH
13838: CALL_OW 266
13842: PUSH
13843: LD_VAR 0 3
13847: PUSH
13848: LD_VAR 0 4
13852: ARRAY
13853: PPUSH
13854: CALL_OW 250
13858: PUSH
13859: LD_VAR 0 3
13863: PUSH
13864: LD_VAR 0 4
13868: ARRAY
13869: PPUSH
13870: CALL_OW 251
13874: PUSH
13875: LD_VAR 0 3
13879: PUSH
13880: LD_VAR 0 4
13884: ARRAY
13885: PPUSH
13886: CALL_OW 254
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: PUSH
13897: EMPTY
13898: LIST
13899: ADD
13900: ST_TO_ADDR
13901: GO 13814
13903: POP
13904: POP
// result := list ;
13905: LD_ADDR_VAR 0 2
13909: PUSH
13910: LD_VAR 0 5
13914: ST_TO_ADDR
// end ;
13915: LD_VAR 0 2
13919: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13920: LD_INT 0
13922: PPUSH
13923: PPUSH
13924: PPUSH
13925: PPUSH
13926: PPUSH
13927: PPUSH
13928: PPUSH
// if not factory then
13929: LD_VAR 0 1
13933: NOT
13934: IFFALSE 13938
// exit ;
13936: GO 14541
// if control = control_apeman then
13938: LD_VAR 0 4
13942: PUSH
13943: LD_INT 5
13945: EQUAL
13946: IFFALSE 14055
// begin tmp := UnitsInside ( factory ) ;
13948: LD_ADDR_VAR 0 8
13952: PUSH
13953: LD_VAR 0 1
13957: PPUSH
13958: CALL_OW 313
13962: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13963: LD_VAR 0 8
13967: PPUSH
13968: LD_INT 25
13970: PUSH
13971: LD_INT 12
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PPUSH
13978: CALL_OW 72
13982: NOT
13983: IFFALSE 13993
// control := control_manual ;
13985: LD_ADDR_VAR 0 4
13989: PUSH
13990: LD_INT 1
13992: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13993: LD_ADDR_VAR 0 8
13997: PUSH
13998: LD_VAR 0 1
14002: PPUSH
14003: CALL 13690 0 1
14007: ST_TO_ADDR
// if tmp then
14008: LD_VAR 0 8
14012: IFFALSE 14055
// begin for i in tmp do
14014: LD_ADDR_VAR 0 7
14018: PUSH
14019: LD_VAR 0 8
14023: PUSH
14024: FOR_IN
14025: IFFALSE 14053
// if i [ 1 ] = b_ext_radio then
14027: LD_VAR 0 7
14031: PUSH
14032: LD_INT 1
14034: ARRAY
14035: PUSH
14036: LD_INT 22
14038: EQUAL
14039: IFFALSE 14051
// begin control := control_remote ;
14041: LD_ADDR_VAR 0 4
14045: PUSH
14046: LD_INT 2
14048: ST_TO_ADDR
// break ;
14049: GO 14053
// end ;
14051: GO 14024
14053: POP
14054: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14055: LD_VAR 0 1
14059: PPUSH
14060: LD_VAR 0 2
14064: PPUSH
14065: LD_VAR 0 3
14069: PPUSH
14070: LD_VAR 0 4
14074: PPUSH
14075: LD_VAR 0 5
14079: PPUSH
14080: CALL_OW 448
14084: IFFALSE 14119
// begin result := [ chassis , engine , control , weapon ] ;
14086: LD_ADDR_VAR 0 6
14090: PUSH
14091: LD_VAR 0 2
14095: PUSH
14096: LD_VAR 0 3
14100: PUSH
14101: LD_VAR 0 4
14105: PUSH
14106: LD_VAR 0 5
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: ST_TO_ADDR
// exit ;
14117: GO 14541
// end ; _chassis := AvailableChassisList ( factory ) ;
14119: LD_ADDR_VAR 0 9
14123: PUSH
14124: LD_VAR 0 1
14128: PPUSH
14129: CALL_OW 475
14133: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
14134: LD_ADDR_VAR 0 11
14138: PUSH
14139: LD_VAR 0 1
14143: PPUSH
14144: CALL_OW 476
14148: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
14149: LD_ADDR_VAR 0 12
14153: PUSH
14154: LD_VAR 0 1
14158: PPUSH
14159: CALL_OW 477
14163: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
14164: LD_ADDR_VAR 0 10
14168: PUSH
14169: LD_VAR 0 1
14173: PPUSH
14174: CALL_OW 478
14178: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
14179: LD_VAR 0 9
14183: NOT
14184: IFTRUE 14193
14186: PUSH
14187: LD_VAR 0 11
14191: NOT
14192: OR
14193: IFTRUE 14202
14195: PUSH
14196: LD_VAR 0 12
14200: NOT
14201: OR
14202: IFTRUE 14211
14204: PUSH
14205: LD_VAR 0 10
14209: NOT
14210: OR
14211: IFFALSE 14246
// begin result := [ chassis , engine , control , weapon ] ;
14213: LD_ADDR_VAR 0 6
14217: PUSH
14218: LD_VAR 0 2
14222: PUSH
14223: LD_VAR 0 3
14227: PUSH
14228: LD_VAR 0 4
14232: PUSH
14233: LD_VAR 0 5
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: ST_TO_ADDR
// exit ;
14244: GO 14541
// end ; if not chassis in _chassis then
14246: LD_VAR 0 2
14250: PUSH
14251: LD_VAR 0 9
14255: IN
14256: NOT
14257: IFFALSE 14283
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
14259: LD_ADDR_VAR 0 2
14263: PUSH
14264: LD_VAR 0 9
14268: PUSH
14269: LD_INT 1
14271: PPUSH
14272: LD_VAR 0 9
14276: PPUSH
14277: CALL_OW 12
14281: ARRAY
14282: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14283: LD_VAR 0 2
14287: PPUSH
14288: LD_VAR 0 3
14292: PPUSH
14293: CALL 14546 0 2
14297: NOT
14298: IFFALSE 14359
// repeat engine := _engine [ 1 ] ;
14300: LD_ADDR_VAR 0 3
14304: PUSH
14305: LD_VAR 0 11
14309: PUSH
14310: LD_INT 1
14312: ARRAY
14313: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14314: LD_ADDR_VAR 0 11
14318: PUSH
14319: LD_VAR 0 11
14323: PPUSH
14324: LD_INT 1
14326: PPUSH
14327: CALL_OW 3
14331: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14332: LD_VAR 0 2
14336: PPUSH
14337: LD_VAR 0 3
14341: PPUSH
14342: CALL 14546 0 2
14346: IFTRUE 14357
14348: PUSH
14349: LD_VAR 0 11
14353: PUSH
14354: EMPTY
14355: EQUAL
14356: OR
14357: IFFALSE 14300
// if not control in _control then
14359: LD_VAR 0 4
14363: PUSH
14364: LD_VAR 0 12
14368: IN
14369: NOT
14370: IFFALSE 14396
// control := _control [ rand ( 1 , _control ) ] ;
14372: LD_ADDR_VAR 0 4
14376: PUSH
14377: LD_VAR 0 12
14381: PUSH
14382: LD_INT 1
14384: PPUSH
14385: LD_VAR 0 12
14389: PPUSH
14390: CALL_OW 12
14394: ARRAY
14395: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14396: LD_VAR 0 2
14400: PPUSH
14401: LD_VAR 0 5
14405: PPUSH
14406: CALL 14768 0 2
14410: NOT
14411: IFFALSE 14472
// repeat weapon := _weapon [ 1 ] ;
14413: LD_ADDR_VAR 0 5
14417: PUSH
14418: LD_VAR 0 10
14422: PUSH
14423: LD_INT 1
14425: ARRAY
14426: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14427: LD_ADDR_VAR 0 10
14431: PUSH
14432: LD_VAR 0 10
14436: PPUSH
14437: LD_INT 1
14439: PPUSH
14440: CALL_OW 3
14444: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14445: LD_VAR 0 2
14449: PPUSH
14450: LD_VAR 0 5
14454: PPUSH
14455: CALL 14768 0 2
14459: IFTRUE 14470
14461: PUSH
14462: LD_VAR 0 10
14466: PUSH
14467: EMPTY
14468: EQUAL
14469: OR
14470: IFFALSE 14413
// result := [ ] ;
14472: LD_ADDR_VAR 0 6
14476: PUSH
14477: EMPTY
14478: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14479: LD_VAR 0 1
14483: PPUSH
14484: LD_VAR 0 2
14488: PPUSH
14489: LD_VAR 0 3
14493: PPUSH
14494: LD_VAR 0 4
14498: PPUSH
14499: LD_VAR 0 5
14503: PPUSH
14504: CALL_OW 448
14508: IFFALSE 14541
// result := [ chassis , engine , control , weapon ] ;
14510: LD_ADDR_VAR 0 6
14514: PUSH
14515: LD_VAR 0 2
14519: PUSH
14520: LD_VAR 0 3
14524: PUSH
14525: LD_VAR 0 4
14529: PUSH
14530: LD_VAR 0 5
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: ST_TO_ADDR
// end ;
14541: LD_VAR 0 6
14545: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14546: LD_INT 0
14548: PPUSH
// if not chassis or not engine then
14549: LD_VAR 0 1
14553: NOT
14554: IFTRUE 14563
14556: PUSH
14557: LD_VAR 0 2
14561: NOT
14562: OR
14563: IFFALSE 14567
// exit ;
14565: GO 14763
// case engine of engine_solar :
14567: LD_VAR 0 2
14571: PUSH
14572: LD_INT 2
14574: DOUBLE
14575: EQUAL
14576: IFTRUE 14580
14578: GO 14618
14580: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14581: LD_ADDR_VAR 0 3
14585: PUSH
14586: LD_INT 11
14588: PUSH
14589: LD_INT 12
14591: PUSH
14592: LD_INT 13
14594: PUSH
14595: LD_INT 14
14597: PUSH
14598: LD_INT 1
14600: PUSH
14601: LD_INT 2
14603: PUSH
14604: LD_INT 3
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: ST_TO_ADDR
14616: GO 14747
14618: LD_INT 1
14620: DOUBLE
14621: EQUAL
14622: IFTRUE 14626
14624: GO 14688
14626: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14627: LD_ADDR_VAR 0 3
14631: PUSH
14632: LD_INT 11
14634: PUSH
14635: LD_INT 12
14637: PUSH
14638: LD_INT 13
14640: PUSH
14641: LD_INT 14
14643: PUSH
14644: LD_INT 1
14646: PUSH
14647: LD_INT 2
14649: PUSH
14650: LD_INT 3
14652: PUSH
14653: LD_INT 4
14655: PUSH
14656: LD_INT 5
14658: PUSH
14659: LD_INT 21
14661: PUSH
14662: LD_INT 23
14664: PUSH
14665: LD_INT 22
14667: PUSH
14668: LD_INT 24
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: ST_TO_ADDR
14686: GO 14747
14688: LD_INT 3
14690: DOUBLE
14691: EQUAL
14692: IFTRUE 14696
14694: GO 14746
14696: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14697: LD_ADDR_VAR 0 3
14701: PUSH
14702: LD_INT 13
14704: PUSH
14705: LD_INT 14
14707: PUSH
14708: LD_INT 2
14710: PUSH
14711: LD_INT 3
14713: PUSH
14714: LD_INT 4
14716: PUSH
14717: LD_INT 5
14719: PUSH
14720: LD_INT 21
14722: PUSH
14723: LD_INT 22
14725: PUSH
14726: LD_INT 23
14728: PUSH
14729: LD_INT 24
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: ST_TO_ADDR
14744: GO 14747
14746: POP
// result := ( chassis in result ) ;
14747: LD_ADDR_VAR 0 3
14751: PUSH
14752: LD_VAR 0 1
14756: PUSH
14757: LD_VAR 0 3
14761: IN
14762: ST_TO_ADDR
// end ;
14763: LD_VAR 0 3
14767: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14768: LD_INT 0
14770: PPUSH
// if not chassis or not weapon then
14771: LD_VAR 0 1
14775: NOT
14776: IFTRUE 14785
14778: PUSH
14779: LD_VAR 0 2
14783: NOT
14784: OR
14785: IFFALSE 14789
// exit ;
14787: GO 15883
// case weapon of us_machine_gun :
14789: LD_VAR 0 2
14793: PUSH
14794: LD_INT 2
14796: DOUBLE
14797: EQUAL
14798: IFTRUE 14802
14800: GO 14832
14802: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14803: LD_ADDR_VAR 0 3
14807: PUSH
14808: LD_INT 1
14810: PUSH
14811: LD_INT 2
14813: PUSH
14814: LD_INT 3
14816: PUSH
14817: LD_INT 4
14819: PUSH
14820: LD_INT 5
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: ST_TO_ADDR
14830: GO 15867
14832: LD_INT 3
14834: DOUBLE
14835: EQUAL
14836: IFTRUE 14840
14838: GO 14870
14840: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14841: LD_ADDR_VAR 0 3
14845: PUSH
14846: LD_INT 1
14848: PUSH
14849: LD_INT 2
14851: PUSH
14852: LD_INT 3
14854: PUSH
14855: LD_INT 4
14857: PUSH
14858: LD_INT 5
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: ST_TO_ADDR
14868: GO 15867
14870: LD_INT 11
14872: DOUBLE
14873: EQUAL
14874: IFTRUE 14878
14876: GO 14908
14878: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14879: LD_ADDR_VAR 0 3
14883: PUSH
14884: LD_INT 1
14886: PUSH
14887: LD_INT 2
14889: PUSH
14890: LD_INT 3
14892: PUSH
14893: LD_INT 4
14895: PUSH
14896: LD_INT 5
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: ST_TO_ADDR
14906: GO 15867
14908: LD_INT 4
14910: DOUBLE
14911: EQUAL
14912: IFTRUE 14916
14914: GO 14942
14916: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14917: LD_ADDR_VAR 0 3
14921: PUSH
14922: LD_INT 2
14924: PUSH
14925: LD_INT 3
14927: PUSH
14928: LD_INT 4
14930: PUSH
14931: LD_INT 5
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: ST_TO_ADDR
14940: GO 15867
14942: LD_INT 5
14944: DOUBLE
14945: EQUAL
14946: IFTRUE 14950
14948: GO 14976
14950: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14951: LD_ADDR_VAR 0 3
14955: PUSH
14956: LD_INT 2
14958: PUSH
14959: LD_INT 3
14961: PUSH
14962: LD_INT 4
14964: PUSH
14965: LD_INT 5
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: ST_TO_ADDR
14974: GO 15867
14976: LD_INT 9
14978: DOUBLE
14979: EQUAL
14980: IFTRUE 14984
14982: GO 15010
14984: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14985: LD_ADDR_VAR 0 3
14989: PUSH
14990: LD_INT 2
14992: PUSH
14993: LD_INT 3
14995: PUSH
14996: LD_INT 4
14998: PUSH
14999: LD_INT 5
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: ST_TO_ADDR
15008: GO 15867
15010: LD_INT 7
15012: DOUBLE
15013: EQUAL
15014: IFTRUE 15018
15016: GO 15044
15018: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
15019: LD_ADDR_VAR 0 3
15023: PUSH
15024: LD_INT 2
15026: PUSH
15027: LD_INT 3
15029: PUSH
15030: LD_INT 4
15032: PUSH
15033: LD_INT 5
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: ST_TO_ADDR
15042: GO 15867
15044: LD_INT 12
15046: DOUBLE
15047: EQUAL
15048: IFTRUE 15052
15050: GO 15078
15052: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
15053: LD_ADDR_VAR 0 3
15057: PUSH
15058: LD_INT 2
15060: PUSH
15061: LD_INT 3
15063: PUSH
15064: LD_INT 4
15066: PUSH
15067: LD_INT 5
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: ST_TO_ADDR
15076: GO 15867
15078: LD_INT 13
15080: DOUBLE
15081: EQUAL
15082: IFTRUE 15086
15084: GO 15112
15086: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15087: LD_ADDR_VAR 0 3
15091: PUSH
15092: LD_INT 2
15094: PUSH
15095: LD_INT 3
15097: PUSH
15098: LD_INT 4
15100: PUSH
15101: LD_INT 5
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: ST_TO_ADDR
15110: GO 15867
15112: LD_INT 14
15114: DOUBLE
15115: EQUAL
15116: IFTRUE 15120
15118: GO 15138
15120: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15121: LD_ADDR_VAR 0 3
15125: PUSH
15126: LD_INT 4
15128: PUSH
15129: LD_INT 5
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: ST_TO_ADDR
15136: GO 15867
15138: LD_INT 6
15140: DOUBLE
15141: EQUAL
15142: IFTRUE 15146
15144: GO 15164
15146: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
15147: LD_ADDR_VAR 0 3
15151: PUSH
15152: LD_INT 4
15154: PUSH
15155: LD_INT 5
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: ST_TO_ADDR
15162: GO 15867
15164: LD_INT 10
15166: DOUBLE
15167: EQUAL
15168: IFTRUE 15172
15170: GO 15190
15172: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
15173: LD_ADDR_VAR 0 3
15177: PUSH
15178: LD_INT 4
15180: PUSH
15181: LD_INT 5
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: ST_TO_ADDR
15188: GO 15867
15190: LD_INT 22
15192: DOUBLE
15193: EQUAL
15194: IFTRUE 15198
15196: GO 15224
15198: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
15199: LD_ADDR_VAR 0 3
15203: PUSH
15204: LD_INT 11
15206: PUSH
15207: LD_INT 12
15209: PUSH
15210: LD_INT 13
15212: PUSH
15213: LD_INT 14
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: ST_TO_ADDR
15222: GO 15867
15224: LD_INT 23
15226: DOUBLE
15227: EQUAL
15228: IFTRUE 15232
15230: GO 15258
15232: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
15233: LD_ADDR_VAR 0 3
15237: PUSH
15238: LD_INT 11
15240: PUSH
15241: LD_INT 12
15243: PUSH
15244: LD_INT 13
15246: PUSH
15247: LD_INT 14
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: ST_TO_ADDR
15256: GO 15867
15258: LD_INT 24
15260: DOUBLE
15261: EQUAL
15262: IFTRUE 15266
15264: GO 15292
15266: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
15267: LD_ADDR_VAR 0 3
15271: PUSH
15272: LD_INT 11
15274: PUSH
15275: LD_INT 12
15277: PUSH
15278: LD_INT 13
15280: PUSH
15281: LD_INT 14
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: ST_TO_ADDR
15290: GO 15867
15292: LD_INT 30
15294: DOUBLE
15295: EQUAL
15296: IFTRUE 15300
15298: GO 15326
15300: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15301: LD_ADDR_VAR 0 3
15305: PUSH
15306: LD_INT 11
15308: PUSH
15309: LD_INT 12
15311: PUSH
15312: LD_INT 13
15314: PUSH
15315: LD_INT 14
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: ST_TO_ADDR
15324: GO 15867
15326: LD_INT 25
15328: DOUBLE
15329: EQUAL
15330: IFTRUE 15334
15332: GO 15352
15334: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15335: LD_ADDR_VAR 0 3
15339: PUSH
15340: LD_INT 13
15342: PUSH
15343: LD_INT 14
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: ST_TO_ADDR
15350: GO 15867
15352: LD_INT 27
15354: DOUBLE
15355: EQUAL
15356: IFTRUE 15360
15358: GO 15378
15360: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
15361: LD_ADDR_VAR 0 3
15365: PUSH
15366: LD_INT 13
15368: PUSH
15369: LD_INT 14
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: ST_TO_ADDR
15376: GO 15867
15378: LD_INT 92
15380: DOUBLE
15381: EQUAL
15382: IFTRUE 15386
15384: GO 15412
15386: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15387: LD_ADDR_VAR 0 3
15391: PUSH
15392: LD_INT 11
15394: PUSH
15395: LD_INT 12
15397: PUSH
15398: LD_INT 13
15400: PUSH
15401: LD_INT 14
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: ST_TO_ADDR
15410: GO 15867
15412: LD_INT 28
15414: DOUBLE
15415: EQUAL
15416: IFTRUE 15420
15418: GO 15438
15420: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15421: LD_ADDR_VAR 0 3
15425: PUSH
15426: LD_INT 13
15428: PUSH
15429: LD_INT 14
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: ST_TO_ADDR
15436: GO 15867
15438: LD_INT 29
15440: DOUBLE
15441: EQUAL
15442: IFTRUE 15446
15444: GO 15464
15446: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15447: LD_ADDR_VAR 0 3
15451: PUSH
15452: LD_INT 13
15454: PUSH
15455: LD_INT 14
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: ST_TO_ADDR
15462: GO 15867
15464: LD_INT 31
15466: DOUBLE
15467: EQUAL
15468: IFTRUE 15472
15470: GO 15490
15472: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15473: LD_ADDR_VAR 0 3
15477: PUSH
15478: LD_INT 13
15480: PUSH
15481: LD_INT 14
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: ST_TO_ADDR
15488: GO 15867
15490: LD_INT 26
15492: DOUBLE
15493: EQUAL
15494: IFTRUE 15498
15496: GO 15516
15498: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15499: LD_ADDR_VAR 0 3
15503: PUSH
15504: LD_INT 13
15506: PUSH
15507: LD_INT 14
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: ST_TO_ADDR
15514: GO 15867
15516: LD_INT 42
15518: DOUBLE
15519: EQUAL
15520: IFTRUE 15524
15522: GO 15550
15524: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15525: LD_ADDR_VAR 0 3
15529: PUSH
15530: LD_INT 21
15532: PUSH
15533: LD_INT 22
15535: PUSH
15536: LD_INT 23
15538: PUSH
15539: LD_INT 24
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: ST_TO_ADDR
15548: GO 15867
15550: LD_INT 43
15552: DOUBLE
15553: EQUAL
15554: IFTRUE 15558
15556: GO 15584
15558: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15559: LD_ADDR_VAR 0 3
15563: PUSH
15564: LD_INT 21
15566: PUSH
15567: LD_INT 22
15569: PUSH
15570: LD_INT 23
15572: PUSH
15573: LD_INT 24
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: ST_TO_ADDR
15582: GO 15867
15584: LD_INT 44
15586: DOUBLE
15587: EQUAL
15588: IFTRUE 15592
15590: GO 15618
15592: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15593: LD_ADDR_VAR 0 3
15597: PUSH
15598: LD_INT 21
15600: PUSH
15601: LD_INT 22
15603: PUSH
15604: LD_INT 23
15606: PUSH
15607: LD_INT 24
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: ST_TO_ADDR
15616: GO 15867
15618: LD_INT 45
15620: DOUBLE
15621: EQUAL
15622: IFTRUE 15626
15624: GO 15652
15626: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15627: LD_ADDR_VAR 0 3
15631: PUSH
15632: LD_INT 21
15634: PUSH
15635: LD_INT 22
15637: PUSH
15638: LD_INT 23
15640: PUSH
15641: LD_INT 24
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: ST_TO_ADDR
15650: GO 15867
15652: LD_INT 49
15654: DOUBLE
15655: EQUAL
15656: IFTRUE 15660
15658: GO 15686
15660: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15661: LD_ADDR_VAR 0 3
15665: PUSH
15666: LD_INT 21
15668: PUSH
15669: LD_INT 22
15671: PUSH
15672: LD_INT 23
15674: PUSH
15675: LD_INT 24
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: ST_TO_ADDR
15684: GO 15867
15686: LD_INT 51
15688: DOUBLE
15689: EQUAL
15690: IFTRUE 15694
15692: GO 15720
15694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15695: LD_ADDR_VAR 0 3
15699: PUSH
15700: LD_INT 21
15702: PUSH
15703: LD_INT 22
15705: PUSH
15706: LD_INT 23
15708: PUSH
15709: LD_INT 24
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: ST_TO_ADDR
15718: GO 15867
15720: LD_INT 52
15722: DOUBLE
15723: EQUAL
15724: IFTRUE 15728
15726: GO 15754
15728: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15729: LD_ADDR_VAR 0 3
15733: PUSH
15734: LD_INT 21
15736: PUSH
15737: LD_INT 22
15739: PUSH
15740: LD_INT 23
15742: PUSH
15743: LD_INT 24
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: ST_TO_ADDR
15752: GO 15867
15754: LD_INT 53
15756: DOUBLE
15757: EQUAL
15758: IFTRUE 15762
15760: GO 15780
15762: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15763: LD_ADDR_VAR 0 3
15767: PUSH
15768: LD_INT 23
15770: PUSH
15771: LD_INT 24
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: ST_TO_ADDR
15778: GO 15867
15780: LD_INT 46
15782: DOUBLE
15783: EQUAL
15784: IFTRUE 15788
15786: GO 15806
15788: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15789: LD_ADDR_VAR 0 3
15793: PUSH
15794: LD_INT 23
15796: PUSH
15797: LD_INT 24
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: ST_TO_ADDR
15804: GO 15867
15806: LD_INT 47
15808: DOUBLE
15809: EQUAL
15810: IFTRUE 15814
15812: GO 15832
15814: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15815: LD_ADDR_VAR 0 3
15819: PUSH
15820: LD_INT 23
15822: PUSH
15823: LD_INT 24
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: ST_TO_ADDR
15830: GO 15867
15832: LD_INT 98
15834: DOUBLE
15835: EQUAL
15836: IFTRUE 15840
15838: GO 15866
15840: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15841: LD_ADDR_VAR 0 3
15845: PUSH
15846: LD_INT 21
15848: PUSH
15849: LD_INT 22
15851: PUSH
15852: LD_INT 23
15854: PUSH
15855: LD_INT 24
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: ST_TO_ADDR
15864: GO 15867
15866: POP
// result := ( chassis in result ) ;
15867: LD_ADDR_VAR 0 3
15871: PUSH
15872: LD_VAR 0 1
15876: PUSH
15877: LD_VAR 0 3
15881: IN
15882: ST_TO_ADDR
// end ;
15883: LD_VAR 0 3
15887: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15888: LD_INT 0
15890: PPUSH
15891: PPUSH
15892: PPUSH
15893: PPUSH
15894: PPUSH
15895: PPUSH
15896: PPUSH
// result := array ;
15897: LD_ADDR_VAR 0 5
15901: PUSH
15902: LD_VAR 0 1
15906: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15907: LD_VAR 0 1
15911: NOT
15912: IFTRUE 15921
15914: PUSH
15915: LD_VAR 0 2
15919: NOT
15920: OR
15921: IFTRUE 15930
15923: PUSH
15924: LD_VAR 0 3
15928: NOT
15929: OR
15930: IFTRUE 15944
15932: PUSH
15933: LD_VAR 0 2
15937: PUSH
15938: LD_VAR 0 1
15942: GREATER
15943: OR
15944: IFTRUE 15958
15946: PUSH
15947: LD_VAR 0 3
15951: PUSH
15952: LD_VAR 0 1
15956: GREATER
15957: OR
15958: IFFALSE 15962
// exit ;
15960: GO 16258
// if direction then
15962: LD_VAR 0 4
15966: IFFALSE 16030
// begin d := 1 ;
15968: LD_ADDR_VAR 0 9
15972: PUSH
15973: LD_INT 1
15975: ST_TO_ADDR
// if i_from > i_to then
15976: LD_VAR 0 2
15980: PUSH
15981: LD_VAR 0 3
15985: GREATER
15986: IFFALSE 16012
// length := ( array - i_from ) + i_to else
15988: LD_ADDR_VAR 0 11
15992: PUSH
15993: LD_VAR 0 1
15997: PUSH
15998: LD_VAR 0 2
16002: MINUS
16003: PUSH
16004: LD_VAR 0 3
16008: PLUS
16009: ST_TO_ADDR
16010: GO 16028
// length := i_to - i_from ;
16012: LD_ADDR_VAR 0 11
16016: PUSH
16017: LD_VAR 0 3
16021: PUSH
16022: LD_VAR 0 2
16026: MINUS
16027: ST_TO_ADDR
// end else
16028: GO 16091
// begin d := - 1 ;
16030: LD_ADDR_VAR 0 9
16034: PUSH
16035: LD_INT 1
16037: NEG
16038: ST_TO_ADDR
// if i_from > i_to then
16039: LD_VAR 0 2
16043: PUSH
16044: LD_VAR 0 3
16048: GREATER
16049: IFFALSE 16069
// length := i_from - i_to else
16051: LD_ADDR_VAR 0 11
16055: PUSH
16056: LD_VAR 0 2
16060: PUSH
16061: LD_VAR 0 3
16065: MINUS
16066: ST_TO_ADDR
16067: GO 16091
// length := ( array - i_to ) + i_from ;
16069: LD_ADDR_VAR 0 11
16073: PUSH
16074: LD_VAR 0 1
16078: PUSH
16079: LD_VAR 0 3
16083: MINUS
16084: PUSH
16085: LD_VAR 0 2
16089: PLUS
16090: ST_TO_ADDR
// end ; if not length then
16091: LD_VAR 0 11
16095: NOT
16096: IFFALSE 16100
// exit ;
16098: GO 16258
// tmp := array ;
16100: LD_ADDR_VAR 0 10
16104: PUSH
16105: LD_VAR 0 1
16109: ST_TO_ADDR
// for i = 1 to length do
16110: LD_ADDR_VAR 0 6
16114: PUSH
16115: DOUBLE
16116: LD_INT 1
16118: DEC
16119: ST_TO_ADDR
16120: LD_VAR 0 11
16124: PUSH
16125: FOR_TO
16126: IFFALSE 16246
// begin for j = 1 to array do
16128: LD_ADDR_VAR 0 7
16132: PUSH
16133: DOUBLE
16134: LD_INT 1
16136: DEC
16137: ST_TO_ADDR
16138: LD_VAR 0 1
16142: PUSH
16143: FOR_TO
16144: IFFALSE 16232
// begin k := j + d ;
16146: LD_ADDR_VAR 0 8
16150: PUSH
16151: LD_VAR 0 7
16155: PUSH
16156: LD_VAR 0 9
16160: PLUS
16161: ST_TO_ADDR
// if k > array then
16162: LD_VAR 0 8
16166: PUSH
16167: LD_VAR 0 1
16171: GREATER
16172: IFFALSE 16182
// k := 1 ;
16174: LD_ADDR_VAR 0 8
16178: PUSH
16179: LD_INT 1
16181: ST_TO_ADDR
// if not k then
16182: LD_VAR 0 8
16186: NOT
16187: IFFALSE 16199
// k := array ;
16189: LD_ADDR_VAR 0 8
16193: PUSH
16194: LD_VAR 0 1
16198: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16199: LD_ADDR_VAR 0 10
16203: PUSH
16204: LD_VAR 0 10
16208: PPUSH
16209: LD_VAR 0 8
16213: PPUSH
16214: LD_VAR 0 1
16218: PUSH
16219: LD_VAR 0 7
16223: ARRAY
16224: PPUSH
16225: CALL_OW 1
16229: ST_TO_ADDR
// end ;
16230: GO 16143
16232: POP
16233: POP
// array := tmp ;
16234: LD_ADDR_VAR 0 1
16238: PUSH
16239: LD_VAR 0 10
16243: ST_TO_ADDR
// end ;
16244: GO 16125
16246: POP
16247: POP
// result := array ;
16248: LD_ADDR_VAR 0 5
16252: PUSH
16253: LD_VAR 0 1
16257: ST_TO_ADDR
// end ;
16258: LD_VAR 0 5
16262: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
16263: LD_INT 0
16265: PPUSH
16266: PPUSH
// result := 0 ;
16267: LD_ADDR_VAR 0 3
16271: PUSH
16272: LD_INT 0
16274: ST_TO_ADDR
// if not array or not value in array then
16275: LD_VAR 0 1
16279: NOT
16280: IFTRUE 16295
16282: PUSH
16283: LD_VAR 0 2
16287: PUSH
16288: LD_VAR 0 1
16292: IN
16293: NOT
16294: OR
16295: IFFALSE 16299
// exit ;
16297: GO 16353
// for i = 1 to array do
16299: LD_ADDR_VAR 0 4
16303: PUSH
16304: DOUBLE
16305: LD_INT 1
16307: DEC
16308: ST_TO_ADDR
16309: LD_VAR 0 1
16313: PUSH
16314: FOR_TO
16315: IFFALSE 16351
// if value = array [ i ] then
16317: LD_VAR 0 2
16321: PUSH
16322: LD_VAR 0 1
16326: PUSH
16327: LD_VAR 0 4
16331: ARRAY
16332: EQUAL
16333: IFFALSE 16349
// begin result := i ;
16335: LD_ADDR_VAR 0 3
16339: PUSH
16340: LD_VAR 0 4
16344: ST_TO_ADDR
// exit ;
16345: POP
16346: POP
16347: GO 16353
// end ;
16349: GO 16314
16351: POP
16352: POP
// end ;
16353: LD_VAR 0 3
16357: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16358: LD_INT 0
16360: PPUSH
// vc_chassis := chassis ;
16361: LD_ADDR_OWVAR 37
16365: PUSH
16366: LD_VAR 0 1
16370: ST_TO_ADDR
// vc_engine := engine ;
16371: LD_ADDR_OWVAR 39
16375: PUSH
16376: LD_VAR 0 2
16380: ST_TO_ADDR
// vc_control := control ;
16381: LD_ADDR_OWVAR 38
16385: PUSH
16386: LD_VAR 0 3
16390: ST_TO_ADDR
// vc_weapon := weapon ;
16391: LD_ADDR_OWVAR 40
16395: PUSH
16396: LD_VAR 0 4
16400: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16401: LD_ADDR_OWVAR 41
16405: PUSH
16406: LD_VAR 0 5
16410: ST_TO_ADDR
// end ;
16411: LD_VAR 0 6
16415: RET
// export function WantPlant ( unit ) ; var task ; begin
16416: LD_INT 0
16418: PPUSH
16419: PPUSH
// result := false ;
16420: LD_ADDR_VAR 0 2
16424: PUSH
16425: LD_INT 0
16427: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16428: LD_ADDR_VAR 0 3
16432: PUSH
16433: LD_VAR 0 1
16437: PPUSH
16438: CALL_OW 437
16442: ST_TO_ADDR
// if task then
16443: LD_VAR 0 3
16447: IFFALSE 16475
// if task [ 1 ] [ 1 ] = p then
16449: LD_VAR 0 3
16453: PUSH
16454: LD_INT 1
16456: ARRAY
16457: PUSH
16458: LD_INT 1
16460: ARRAY
16461: PUSH
16462: LD_STRING p
16464: EQUAL
16465: IFFALSE 16475
// result := true ;
16467: LD_ADDR_VAR 0 2
16471: PUSH
16472: LD_INT 1
16474: ST_TO_ADDR
// end ;
16475: LD_VAR 0 2
16479: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16480: LD_INT 0
16482: PPUSH
16483: PPUSH
16484: PPUSH
16485: PPUSH
// if pos < 1 then
16486: LD_VAR 0 2
16490: PUSH
16491: LD_INT 1
16493: LESS
16494: IFFALSE 16498
// exit ;
16496: GO 16801
// if pos = 1 then
16498: LD_VAR 0 2
16502: PUSH
16503: LD_INT 1
16505: EQUAL
16506: IFFALSE 16539
// result := Replace ( arr , pos [ 1 ] , value ) else
16508: LD_ADDR_VAR 0 4
16512: PUSH
16513: LD_VAR 0 1
16517: PPUSH
16518: LD_VAR 0 2
16522: PUSH
16523: LD_INT 1
16525: ARRAY
16526: PPUSH
16527: LD_VAR 0 3
16531: PPUSH
16532: CALL_OW 1
16536: ST_TO_ADDR
16537: GO 16801
// begin tmp := arr ;
16539: LD_ADDR_VAR 0 6
16543: PUSH
16544: LD_VAR 0 1
16548: ST_TO_ADDR
// s_arr := [ tmp ] ;
16549: LD_ADDR_VAR 0 7
16553: PUSH
16554: LD_VAR 0 6
16558: PUSH
16559: EMPTY
16560: LIST
16561: ST_TO_ADDR
// for i = 1 to pos - 1 do
16562: LD_ADDR_VAR 0 5
16566: PUSH
16567: DOUBLE
16568: LD_INT 1
16570: DEC
16571: ST_TO_ADDR
16572: LD_VAR 0 2
16576: PUSH
16577: LD_INT 1
16579: MINUS
16580: PUSH
16581: FOR_TO
16582: IFFALSE 16627
// begin tmp := tmp [ pos [ i ] ] ;
16584: LD_ADDR_VAR 0 6
16588: PUSH
16589: LD_VAR 0 6
16593: PUSH
16594: LD_VAR 0 2
16598: PUSH
16599: LD_VAR 0 5
16603: ARRAY
16604: ARRAY
16605: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16606: LD_ADDR_VAR 0 7
16610: PUSH
16611: LD_VAR 0 7
16615: PUSH
16616: LD_VAR 0 6
16620: PUSH
16621: EMPTY
16622: LIST
16623: ADD
16624: ST_TO_ADDR
// end ;
16625: GO 16581
16627: POP
16628: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16629: LD_ADDR_VAR 0 6
16633: PUSH
16634: LD_VAR 0 6
16638: PPUSH
16639: LD_VAR 0 2
16643: PUSH
16644: LD_VAR 0 2
16648: ARRAY
16649: PPUSH
16650: LD_VAR 0 3
16654: PPUSH
16655: CALL_OW 1
16659: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16660: LD_ADDR_VAR 0 7
16664: PUSH
16665: LD_VAR 0 7
16669: PPUSH
16670: LD_VAR 0 7
16674: PPUSH
16675: LD_VAR 0 6
16679: PPUSH
16680: CALL_OW 1
16684: ST_TO_ADDR
// for i = s_arr downto 2 do
16685: LD_ADDR_VAR 0 5
16689: PUSH
16690: DOUBLE
16691: LD_VAR 0 7
16695: INC
16696: ST_TO_ADDR
16697: LD_INT 2
16699: PUSH
16700: FOR_DOWNTO
16701: IFFALSE 16785
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16703: LD_ADDR_VAR 0 6
16707: PUSH
16708: LD_VAR 0 7
16712: PUSH
16713: LD_VAR 0 5
16717: PUSH
16718: LD_INT 1
16720: MINUS
16721: ARRAY
16722: PPUSH
16723: LD_VAR 0 2
16727: PUSH
16728: LD_VAR 0 5
16732: PUSH
16733: LD_INT 1
16735: MINUS
16736: ARRAY
16737: PPUSH
16738: LD_VAR 0 7
16742: PUSH
16743: LD_VAR 0 5
16747: ARRAY
16748: PPUSH
16749: CALL_OW 1
16753: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16754: LD_ADDR_VAR 0 7
16758: PUSH
16759: LD_VAR 0 7
16763: PPUSH
16764: LD_VAR 0 5
16768: PUSH
16769: LD_INT 1
16771: MINUS
16772: PPUSH
16773: LD_VAR 0 6
16777: PPUSH
16778: CALL_OW 1
16782: ST_TO_ADDR
// end ;
16783: GO 16700
16785: POP
16786: POP
// result := s_arr [ 1 ] ;
16787: LD_ADDR_VAR 0 4
16791: PUSH
16792: LD_VAR 0 7
16796: PUSH
16797: LD_INT 1
16799: ARRAY
16800: ST_TO_ADDR
// end ; end ;
16801: LD_VAR 0 4
16805: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16806: LD_INT 0
16808: PPUSH
16809: PPUSH
// if not list then
16810: LD_VAR 0 1
16814: NOT
16815: IFFALSE 16819
// exit ;
16817: GO 16910
// i := list [ pos1 ] ;
16819: LD_ADDR_VAR 0 5
16823: PUSH
16824: LD_VAR 0 1
16828: PUSH
16829: LD_VAR 0 2
16833: ARRAY
16834: ST_TO_ADDR
// if not i then
16835: LD_VAR 0 5
16839: NOT
16840: IFFALSE 16844
// exit ;
16842: GO 16910
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16844: LD_ADDR_VAR 0 1
16848: PUSH
16849: LD_VAR 0 1
16853: PPUSH
16854: LD_VAR 0 2
16858: PPUSH
16859: LD_VAR 0 1
16863: PUSH
16864: LD_VAR 0 3
16868: ARRAY
16869: PPUSH
16870: CALL_OW 1
16874: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16875: LD_ADDR_VAR 0 1
16879: PUSH
16880: LD_VAR 0 1
16884: PPUSH
16885: LD_VAR 0 3
16889: PPUSH
16890: LD_VAR 0 5
16894: PPUSH
16895: CALL_OW 1
16899: ST_TO_ADDR
// result := list ;
16900: LD_ADDR_VAR 0 4
16904: PUSH
16905: LD_VAR 0 1
16909: ST_TO_ADDR
// end ;
16910: LD_VAR 0 4
16914: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16915: LD_INT 0
16917: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16918: LD_ADDR_VAR 0 5
16922: PUSH
16923: LD_VAR 0 1
16927: PPUSH
16928: CALL_OW 250
16932: PPUSH
16933: LD_VAR 0 1
16937: PPUSH
16938: CALL_OW 251
16942: PPUSH
16943: LD_VAR 0 2
16947: PPUSH
16948: LD_VAR 0 3
16952: PPUSH
16953: LD_VAR 0 4
16957: PPUSH
16958: CALL 17340 0 5
16962: ST_TO_ADDR
// end ;
16963: LD_VAR 0 5
16967: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16968: LD_INT 0
16970: PPUSH
16971: PPUSH
16972: PPUSH
16973: PPUSH
// if not list or not unit then
16974: LD_VAR 0 2
16978: NOT
16979: IFTRUE 16988
16981: PUSH
16982: LD_VAR 0 1
16986: NOT
16987: OR
16988: IFFALSE 16992
// exit ;
16990: GO 17335
// result := [ ] ;
16992: LD_ADDR_VAR 0 5
16996: PUSH
16997: EMPTY
16998: ST_TO_ADDR
// for i in list do
16999: LD_ADDR_VAR 0 6
17003: PUSH
17004: LD_VAR 0 2
17008: PUSH
17009: FOR_IN
17010: IFFALSE 17228
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
17012: LD_ADDR_VAR 0 8
17016: PUSH
17017: LD_VAR 0 1
17021: PPUSH
17022: LD_VAR 0 6
17026: PUSH
17027: LD_INT 1
17029: ARRAY
17030: PPUSH
17031: LD_VAR 0 6
17035: PUSH
17036: LD_INT 2
17038: ARRAY
17039: PPUSH
17040: CALL_OW 297
17044: ST_TO_ADDR
// if not Count ( result ) then
17045: LD_VAR 0 5
17049: PPUSH
17050: CALL 13562 0 1
17054: NOT
17055: IFFALSE 17088
// begin result := Join ( result , [ i , tmp ] ) ;
17057: LD_ADDR_VAR 0 5
17061: PUSH
17062: LD_VAR 0 5
17066: PPUSH
17067: LD_VAR 0 6
17071: PUSH
17072: LD_VAR 0 8
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PPUSH
17081: CALL 49538 0 2
17085: ST_TO_ADDR
// continue ;
17086: GO 17009
// end ; if result [ result ] [ 2 ] <= tmp then
17088: LD_VAR 0 5
17092: PUSH
17093: LD_VAR 0 5
17097: ARRAY
17098: PUSH
17099: LD_INT 2
17101: ARRAY
17102: PUSH
17103: LD_VAR 0 8
17107: LESSEQUAL
17108: IFFALSE 17141
// result := Join ( result , [ i , tmp ] ) else
17110: LD_ADDR_VAR 0 5
17114: PUSH
17115: LD_VAR 0 5
17119: PPUSH
17120: LD_VAR 0 6
17124: PUSH
17125: LD_VAR 0 8
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PPUSH
17134: CALL 49538 0 2
17138: ST_TO_ADDR
17139: GO 17226
// begin for j := 1 to Count ( result ) do
17141: LD_ADDR_VAR 0 7
17145: PUSH
17146: DOUBLE
17147: LD_INT 1
17149: DEC
17150: ST_TO_ADDR
17151: LD_VAR 0 5
17155: PPUSH
17156: CALL 13562 0 1
17160: PUSH
17161: FOR_TO
17162: IFFALSE 17224
// begin if tmp < result [ j ] [ 2 ] then
17164: LD_VAR 0 8
17168: PUSH
17169: LD_VAR 0 5
17173: PUSH
17174: LD_VAR 0 7
17178: ARRAY
17179: PUSH
17180: LD_INT 2
17182: ARRAY
17183: LESS
17184: IFFALSE 17222
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17186: LD_ADDR_VAR 0 5
17190: PUSH
17191: LD_VAR 0 5
17195: PPUSH
17196: LD_VAR 0 7
17200: PPUSH
17201: LD_VAR 0 6
17205: PUSH
17206: LD_VAR 0 8
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PPUSH
17215: CALL_OW 2
17219: ST_TO_ADDR
// break ;
17220: GO 17224
// end ; end ;
17222: GO 17161
17224: POP
17225: POP
// end ; end ;
17226: GO 17009
17228: POP
17229: POP
// if result and not asc then
17230: LD_VAR 0 5
17234: IFFALSE 17243
17236: PUSH
17237: LD_VAR 0 3
17241: NOT
17242: AND
17243: IFFALSE 17260
// result := ReverseArray ( result ) ;
17245: LD_ADDR_VAR 0 5
17249: PUSH
17250: LD_VAR 0 5
17254: PPUSH
17255: CALL 44618 0 1
17259: ST_TO_ADDR
// tmp := [ ] ;
17260: LD_ADDR_VAR 0 8
17264: PUSH
17265: EMPTY
17266: ST_TO_ADDR
// if mode then
17267: LD_VAR 0 4
17271: IFFALSE 17335
// begin for i := 1 to result do
17273: LD_ADDR_VAR 0 6
17277: PUSH
17278: DOUBLE
17279: LD_INT 1
17281: DEC
17282: ST_TO_ADDR
17283: LD_VAR 0 5
17287: PUSH
17288: FOR_TO
17289: IFFALSE 17323
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
17291: LD_ADDR_VAR 0 8
17295: PUSH
17296: LD_VAR 0 8
17300: PPUSH
17301: LD_VAR 0 5
17305: PUSH
17306: LD_VAR 0 6
17310: ARRAY
17311: PUSH
17312: LD_INT 1
17314: ARRAY
17315: PPUSH
17316: CALL 49538 0 2
17320: ST_TO_ADDR
17321: GO 17288
17323: POP
17324: POP
// result := tmp ;
17325: LD_ADDR_VAR 0 5
17329: PUSH
17330: LD_VAR 0 8
17334: ST_TO_ADDR
// end ; end ;
17335: LD_VAR 0 5
17339: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17340: LD_INT 0
17342: PPUSH
17343: PPUSH
17344: PPUSH
17345: PPUSH
// if not list then
17346: LD_VAR 0 3
17350: NOT
17351: IFFALSE 17355
// exit ;
17353: GO 17745
// result := [ ] ;
17355: LD_ADDR_VAR 0 6
17359: PUSH
17360: EMPTY
17361: ST_TO_ADDR
// for i in list do
17362: LD_ADDR_VAR 0 7
17366: PUSH
17367: LD_VAR 0 3
17371: PUSH
17372: FOR_IN
17373: IFFALSE 17575
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17375: LD_ADDR_VAR 0 9
17379: PUSH
17380: LD_VAR 0 7
17384: PPUSH
17385: LD_VAR 0 1
17389: PPUSH
17390: LD_VAR 0 2
17394: PPUSH
17395: CALL_OW 297
17399: ST_TO_ADDR
// if not result then
17400: LD_VAR 0 6
17404: NOT
17405: IFFALSE 17431
// result := [ [ i , tmp ] ] else
17407: LD_ADDR_VAR 0 6
17411: PUSH
17412: LD_VAR 0 7
17416: PUSH
17417: LD_VAR 0 9
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: EMPTY
17427: LIST
17428: ST_TO_ADDR
17429: GO 17573
// begin if result [ result ] [ 2 ] <= tmp then
17431: LD_VAR 0 6
17435: PUSH
17436: LD_VAR 0 6
17440: ARRAY
17441: PUSH
17442: LD_INT 2
17444: ARRAY
17445: PUSH
17446: LD_VAR 0 9
17450: LESSEQUAL
17451: IFFALSE 17493
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17453: LD_ADDR_VAR 0 6
17457: PUSH
17458: LD_VAR 0 6
17462: PPUSH
17463: LD_VAR 0 6
17467: PUSH
17468: LD_INT 1
17470: PLUS
17471: PPUSH
17472: LD_VAR 0 7
17476: PUSH
17477: LD_VAR 0 9
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PPUSH
17486: CALL_OW 2
17490: ST_TO_ADDR
17491: GO 17573
// for j := 1 to result do
17493: LD_ADDR_VAR 0 8
17497: PUSH
17498: DOUBLE
17499: LD_INT 1
17501: DEC
17502: ST_TO_ADDR
17503: LD_VAR 0 6
17507: PUSH
17508: FOR_TO
17509: IFFALSE 17571
// begin if tmp < result [ j ] [ 2 ] then
17511: LD_VAR 0 9
17515: PUSH
17516: LD_VAR 0 6
17520: PUSH
17521: LD_VAR 0 8
17525: ARRAY
17526: PUSH
17527: LD_INT 2
17529: ARRAY
17530: LESS
17531: IFFALSE 17569
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17533: LD_ADDR_VAR 0 6
17537: PUSH
17538: LD_VAR 0 6
17542: PPUSH
17543: LD_VAR 0 8
17547: PPUSH
17548: LD_VAR 0 7
17552: PUSH
17553: LD_VAR 0 9
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PPUSH
17562: CALL_OW 2
17566: ST_TO_ADDR
// break ;
17567: GO 17571
// end ; end ;
17569: GO 17508
17571: POP
17572: POP
// end ; end ;
17573: GO 17372
17575: POP
17576: POP
// if result and not asc then
17577: LD_VAR 0 6
17581: IFFALSE 17590
17583: PUSH
17584: LD_VAR 0 4
17588: NOT
17589: AND
17590: IFFALSE 17665
// begin tmp := result ;
17592: LD_ADDR_VAR 0 9
17596: PUSH
17597: LD_VAR 0 6
17601: ST_TO_ADDR
// for i = tmp downto 1 do
17602: LD_ADDR_VAR 0 7
17606: PUSH
17607: DOUBLE
17608: LD_VAR 0 9
17612: INC
17613: ST_TO_ADDR
17614: LD_INT 1
17616: PUSH
17617: FOR_DOWNTO
17618: IFFALSE 17663
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17620: LD_ADDR_VAR 0 6
17624: PUSH
17625: LD_VAR 0 6
17629: PPUSH
17630: LD_VAR 0 9
17634: PUSH
17635: LD_VAR 0 7
17639: MINUS
17640: PUSH
17641: LD_INT 1
17643: PLUS
17644: PPUSH
17645: LD_VAR 0 9
17649: PUSH
17650: LD_VAR 0 7
17654: ARRAY
17655: PPUSH
17656: CALL_OW 1
17660: ST_TO_ADDR
17661: GO 17617
17663: POP
17664: POP
// end ; tmp := [ ] ;
17665: LD_ADDR_VAR 0 9
17669: PUSH
17670: EMPTY
17671: ST_TO_ADDR
// if mode then
17672: LD_VAR 0 5
17676: IFFALSE 17745
// begin for i = 1 to result do
17678: LD_ADDR_VAR 0 7
17682: PUSH
17683: DOUBLE
17684: LD_INT 1
17686: DEC
17687: ST_TO_ADDR
17688: LD_VAR 0 6
17692: PUSH
17693: FOR_TO
17694: IFFALSE 17733
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17696: LD_ADDR_VAR 0 9
17700: PUSH
17701: LD_VAR 0 9
17705: PPUSH
17706: LD_VAR 0 7
17710: PPUSH
17711: LD_VAR 0 6
17715: PUSH
17716: LD_VAR 0 7
17720: ARRAY
17721: PUSH
17722: LD_INT 1
17724: ARRAY
17725: PPUSH
17726: CALL_OW 1
17730: ST_TO_ADDR
17731: GO 17693
17733: POP
17734: POP
// result := tmp ;
17735: LD_ADDR_VAR 0 6
17739: PUSH
17740: LD_VAR 0 9
17744: ST_TO_ADDR
// end ; end ;
17745: LD_VAR 0 6
17749: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17750: LD_INT 0
17752: PPUSH
17753: PPUSH
17754: PPUSH
17755: PPUSH
17756: PPUSH
17757: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17758: LD_ADDR_VAR 0 5
17762: PUSH
17763: LD_INT 0
17765: PUSH
17766: LD_INT 0
17768: PUSH
17769: LD_INT 0
17771: PUSH
17772: EMPTY
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: ST_TO_ADDR
// if not x or not y then
17780: LD_VAR 0 2
17784: NOT
17785: IFTRUE 17794
17787: PUSH
17788: LD_VAR 0 3
17792: NOT
17793: OR
17794: IFFALSE 17798
// exit ;
17796: GO 19454
// if not range then
17798: LD_VAR 0 4
17802: NOT
17803: IFFALSE 17813
// range := 10 ;
17805: LD_ADDR_VAR 0 4
17809: PUSH
17810: LD_INT 10
17812: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17813: LD_ADDR_VAR 0 8
17817: PUSH
17818: LD_INT 81
17820: PUSH
17821: LD_VAR 0 1
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 92
17832: PUSH
17833: LD_VAR 0 2
17837: PUSH
17838: LD_VAR 0 3
17842: PUSH
17843: LD_VAR 0 4
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 3
17856: PUSH
17857: LD_INT 21
17859: PUSH
17860: LD_INT 3
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: LIST
17875: PPUSH
17876: CALL_OW 69
17880: ST_TO_ADDR
// if not tmp then
17881: LD_VAR 0 8
17885: NOT
17886: IFFALSE 17890
// exit ;
17888: GO 19454
// for i in tmp do
17890: LD_ADDR_VAR 0 6
17894: PUSH
17895: LD_VAR 0 8
17899: PUSH
17900: FOR_IN
17901: IFFALSE 19429
// begin points := [ 0 , 0 , 0 ] ;
17903: LD_ADDR_VAR 0 9
17907: PUSH
17908: LD_INT 0
17910: PUSH
17911: LD_INT 0
17913: PUSH
17914: LD_INT 0
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: LIST
17921: ST_TO_ADDR
// bpoints := 1 ;
17922: LD_ADDR_VAR 0 10
17926: PUSH
17927: LD_INT 1
17929: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17930: LD_VAR 0 6
17934: PPUSH
17935: CALL_OW 247
17939: PUSH
17940: LD_INT 1
17942: DOUBLE
17943: EQUAL
17944: IFTRUE 17948
17946: GO 18530
17948: POP
// begin if GetClass ( i ) = 1 then
17949: LD_VAR 0 6
17953: PPUSH
17954: CALL_OW 257
17958: PUSH
17959: LD_INT 1
17961: EQUAL
17962: IFFALSE 17983
// points := [ 10 , 5 , 3 ] ;
17964: LD_ADDR_VAR 0 9
17968: PUSH
17969: LD_INT 10
17971: PUSH
17972: LD_INT 5
17974: PUSH
17975: LD_INT 3
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: LIST
17982: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17983: LD_VAR 0 6
17987: PPUSH
17988: CALL_OW 257
17992: PUSH
17993: LD_INT 2
17995: PUSH
17996: LD_INT 3
17998: PUSH
17999: LD_INT 4
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: LIST
18006: IN
18007: IFFALSE 18028
// points := [ 3 , 2 , 1 ] ;
18009: LD_ADDR_VAR 0 9
18013: PUSH
18014: LD_INT 3
18016: PUSH
18017: LD_INT 2
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18028: LD_VAR 0 6
18032: PPUSH
18033: CALL_OW 257
18037: PUSH
18038: LD_INT 5
18040: EQUAL
18041: IFFALSE 18062
// points := [ 130 , 5 , 2 ] ;
18043: LD_ADDR_VAR 0 9
18047: PUSH
18048: LD_INT 130
18050: PUSH
18051: LD_INT 5
18053: PUSH
18054: LD_INT 2
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18062: LD_VAR 0 6
18066: PPUSH
18067: CALL_OW 257
18071: PUSH
18072: LD_INT 8
18074: EQUAL
18075: IFFALSE 18096
// points := [ 35 , 35 , 30 ] ;
18077: LD_ADDR_VAR 0 9
18081: PUSH
18082: LD_INT 35
18084: PUSH
18085: LD_INT 35
18087: PUSH
18088: LD_INT 30
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: LIST
18095: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18096: LD_VAR 0 6
18100: PPUSH
18101: CALL_OW 257
18105: PUSH
18106: LD_INT 9
18108: EQUAL
18109: IFFALSE 18130
// points := [ 20 , 55 , 40 ] ;
18111: LD_ADDR_VAR 0 9
18115: PUSH
18116: LD_INT 20
18118: PUSH
18119: LD_INT 55
18121: PUSH
18122: LD_INT 40
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: LIST
18129: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18130: LD_VAR 0 6
18134: PPUSH
18135: CALL_OW 257
18139: PUSH
18140: LD_INT 12
18142: PUSH
18143: LD_INT 16
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: IN
18150: IFFALSE 18171
// points := [ 5 , 3 , 2 ] ;
18152: LD_ADDR_VAR 0 9
18156: PUSH
18157: LD_INT 5
18159: PUSH
18160: LD_INT 3
18162: PUSH
18163: LD_INT 2
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: LIST
18170: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18171: LD_VAR 0 6
18175: PPUSH
18176: CALL_OW 257
18180: PUSH
18181: LD_INT 17
18183: EQUAL
18184: IFFALSE 18205
// points := [ 100 , 50 , 75 ] ;
18186: LD_ADDR_VAR 0 9
18190: PUSH
18191: LD_INT 100
18193: PUSH
18194: LD_INT 50
18196: PUSH
18197: LD_INT 75
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: LIST
18204: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18205: LD_VAR 0 6
18209: PPUSH
18210: CALL_OW 257
18214: PUSH
18215: LD_INT 15
18217: EQUAL
18218: IFFALSE 18239
// points := [ 10 , 5 , 3 ] ;
18220: LD_ADDR_VAR 0 9
18224: PUSH
18225: LD_INT 10
18227: PUSH
18228: LD_INT 5
18230: PUSH
18231: LD_INT 3
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: LIST
18238: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18239: LD_VAR 0 6
18243: PPUSH
18244: CALL_OW 257
18248: PUSH
18249: LD_INT 14
18251: EQUAL
18252: IFFALSE 18273
// points := [ 10 , 0 , 0 ] ;
18254: LD_ADDR_VAR 0 9
18258: PUSH
18259: LD_INT 10
18261: PUSH
18262: LD_INT 0
18264: PUSH
18265: LD_INT 0
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: LIST
18272: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18273: LD_VAR 0 6
18277: PPUSH
18278: CALL_OW 257
18282: PUSH
18283: LD_INT 11
18285: EQUAL
18286: IFFALSE 18307
// points := [ 30 , 10 , 5 ] ;
18288: LD_ADDR_VAR 0 9
18292: PUSH
18293: LD_INT 30
18295: PUSH
18296: LD_INT 10
18298: PUSH
18299: LD_INT 5
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: LIST
18306: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18307: LD_VAR 0 1
18311: PPUSH
18312: LD_INT 5
18314: PPUSH
18315: CALL_OW 321
18319: PUSH
18320: LD_INT 2
18322: EQUAL
18323: IFFALSE 18340
// bpoints := bpoints * 1.8 ;
18325: LD_ADDR_VAR 0 10
18329: PUSH
18330: LD_VAR 0 10
18334: PUSH
18335: LD_REAL  1.80000000000000E+0000
18338: MUL
18339: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18340: LD_VAR 0 6
18344: PPUSH
18345: CALL_OW 257
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: LD_INT 2
18355: PUSH
18356: LD_INT 3
18358: PUSH
18359: LD_INT 4
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: IN
18368: IFFALSE 18388
18370: PUSH
18371: LD_VAR 0 1
18375: PPUSH
18376: LD_INT 51
18378: PPUSH
18379: CALL_OW 321
18383: PUSH
18384: LD_INT 2
18386: EQUAL
18387: AND
18388: IFFALSE 18405
// bpoints := bpoints * 1.2 ;
18390: LD_ADDR_VAR 0 10
18394: PUSH
18395: LD_VAR 0 10
18399: PUSH
18400: LD_REAL  1.20000000000000E+0000
18403: MUL
18404: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18405: LD_VAR 0 6
18409: PPUSH
18410: CALL_OW 257
18414: PUSH
18415: LD_INT 5
18417: PUSH
18418: LD_INT 7
18420: PUSH
18421: LD_INT 9
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: LIST
18428: IN
18429: IFFALSE 18449
18431: PUSH
18432: LD_VAR 0 1
18436: PPUSH
18437: LD_INT 52
18439: PPUSH
18440: CALL_OW 321
18444: PUSH
18445: LD_INT 2
18447: EQUAL
18448: AND
18449: IFFALSE 18466
// bpoints := bpoints * 1.5 ;
18451: LD_ADDR_VAR 0 10
18455: PUSH
18456: LD_VAR 0 10
18460: PUSH
18461: LD_REAL  1.50000000000000E+0000
18464: MUL
18465: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18466: LD_VAR 0 1
18470: PPUSH
18471: LD_INT 66
18473: PPUSH
18474: CALL_OW 321
18478: PUSH
18479: LD_INT 2
18481: EQUAL
18482: IFFALSE 18499
// bpoints := bpoints * 1.1 ;
18484: LD_ADDR_VAR 0 10
18488: PUSH
18489: LD_VAR 0 10
18493: PUSH
18494: LD_REAL  1.10000000000000E+0000
18497: MUL
18498: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18499: LD_ADDR_VAR 0 10
18503: PUSH
18504: LD_VAR 0 10
18508: PUSH
18509: LD_VAR 0 6
18513: PPUSH
18514: LD_INT 1
18516: PPUSH
18517: CALL_OW 259
18521: PUSH
18522: LD_REAL  1.15000000000000E+0000
18525: MUL
18526: MUL
18527: ST_TO_ADDR
// end ; unit_vehicle :
18528: GO 19358
18530: LD_INT 2
18532: DOUBLE
18533: EQUAL
18534: IFTRUE 18538
18536: GO 19346
18538: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18539: LD_VAR 0 6
18543: PPUSH
18544: CALL_OW 264
18548: PUSH
18549: LD_INT 2
18551: PUSH
18552: LD_INT 42
18554: PUSH
18555: LD_INT 24
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: LIST
18562: IN
18563: IFFALSE 18584
// points := [ 25 , 5 , 3 ] ;
18565: LD_ADDR_VAR 0 9
18569: PUSH
18570: LD_INT 25
18572: PUSH
18573: LD_INT 5
18575: PUSH
18576: LD_INT 3
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: LIST
18583: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18584: LD_VAR 0 6
18588: PPUSH
18589: CALL_OW 264
18593: PUSH
18594: LD_INT 4
18596: PUSH
18597: LD_INT 43
18599: PUSH
18600: LD_INT 25
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: LIST
18607: IN
18608: IFFALSE 18629
// points := [ 40 , 15 , 5 ] ;
18610: LD_ADDR_VAR 0 9
18614: PUSH
18615: LD_INT 40
18617: PUSH
18618: LD_INT 15
18620: PUSH
18621: LD_INT 5
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: LIST
18628: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18629: LD_VAR 0 6
18633: PPUSH
18634: CALL_OW 264
18638: PUSH
18639: LD_INT 3
18641: PUSH
18642: LD_INT 23
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: IN
18649: IFFALSE 18670
// points := [ 7 , 25 , 8 ] ;
18651: LD_ADDR_VAR 0 9
18655: PUSH
18656: LD_INT 7
18658: PUSH
18659: LD_INT 25
18661: PUSH
18662: LD_INT 8
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: LIST
18669: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18670: LD_VAR 0 6
18674: PPUSH
18675: CALL_OW 264
18679: PUSH
18680: LD_INT 5
18682: PUSH
18683: LD_INT 27
18685: PUSH
18686: LD_INT 44
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: LIST
18693: IN
18694: IFFALSE 18715
// points := [ 14 , 50 , 16 ] ;
18696: LD_ADDR_VAR 0 9
18700: PUSH
18701: LD_INT 14
18703: PUSH
18704: LD_INT 50
18706: PUSH
18707: LD_INT 16
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: LIST
18714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18715: LD_VAR 0 6
18719: PPUSH
18720: CALL_OW 264
18724: PUSH
18725: LD_INT 6
18727: PUSH
18728: LD_INT 46
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: IN
18735: IFFALSE 18756
// points := [ 32 , 120 , 70 ] ;
18737: LD_ADDR_VAR 0 9
18741: PUSH
18742: LD_INT 32
18744: PUSH
18745: LD_INT 120
18747: PUSH
18748: LD_INT 70
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: LIST
18755: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18756: LD_VAR 0 6
18760: PPUSH
18761: CALL_OW 264
18765: PUSH
18766: LD_INT 7
18768: PUSH
18769: LD_INT 28
18771: PUSH
18772: LD_INT 45
18774: PUSH
18775: LD_INT 92
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: IN
18784: IFFALSE 18805
// points := [ 35 , 20 , 45 ] ;
18786: LD_ADDR_VAR 0 9
18790: PUSH
18791: LD_INT 35
18793: PUSH
18794: LD_INT 20
18796: PUSH
18797: LD_INT 45
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: LIST
18804: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18805: LD_VAR 0 6
18809: PPUSH
18810: CALL_OW 264
18814: PUSH
18815: LD_INT 47
18817: PUSH
18818: EMPTY
18819: LIST
18820: IN
18821: IFFALSE 18842
// points := [ 67 , 45 , 75 ] ;
18823: LD_ADDR_VAR 0 9
18827: PUSH
18828: LD_INT 67
18830: PUSH
18831: LD_INT 45
18833: PUSH
18834: LD_INT 75
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: LIST
18841: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18842: LD_VAR 0 6
18846: PPUSH
18847: CALL_OW 264
18851: PUSH
18852: LD_INT 26
18854: PUSH
18855: EMPTY
18856: LIST
18857: IN
18858: IFFALSE 18879
// points := [ 120 , 30 , 80 ] ;
18860: LD_ADDR_VAR 0 9
18864: PUSH
18865: LD_INT 120
18867: PUSH
18868: LD_INT 30
18870: PUSH
18871: LD_INT 80
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18879: LD_VAR 0 6
18883: PPUSH
18884: CALL_OW 264
18888: PUSH
18889: LD_INT 22
18891: PUSH
18892: EMPTY
18893: LIST
18894: IN
18895: IFFALSE 18916
// points := [ 40 , 1 , 1 ] ;
18897: LD_ADDR_VAR 0 9
18901: PUSH
18902: LD_INT 40
18904: PUSH
18905: LD_INT 1
18907: PUSH
18908: LD_INT 1
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18916: LD_VAR 0 6
18920: PPUSH
18921: CALL_OW 264
18925: PUSH
18926: LD_INT 29
18928: PUSH
18929: EMPTY
18930: LIST
18931: IN
18932: IFFALSE 18953
// points := [ 70 , 200 , 400 ] ;
18934: LD_ADDR_VAR 0 9
18938: PUSH
18939: LD_INT 70
18941: PUSH
18942: LD_INT 200
18944: PUSH
18945: LD_INT 400
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: LIST
18952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18953: LD_VAR 0 6
18957: PPUSH
18958: CALL_OW 264
18962: PUSH
18963: LD_INT 14
18965: PUSH
18966: LD_INT 53
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: IN
18973: IFFALSE 18994
// points := [ 40 , 10 , 20 ] ;
18975: LD_ADDR_VAR 0 9
18979: PUSH
18980: LD_INT 40
18982: PUSH
18983: LD_INT 10
18985: PUSH
18986: LD_INT 20
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: LIST
18993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18994: LD_VAR 0 6
18998: PPUSH
18999: CALL_OW 264
19003: PUSH
19004: LD_INT 9
19006: PUSH
19007: EMPTY
19008: LIST
19009: IN
19010: IFFALSE 19031
// points := [ 5 , 70 , 20 ] ;
19012: LD_ADDR_VAR 0 9
19016: PUSH
19017: LD_INT 5
19019: PUSH
19020: LD_INT 70
19022: PUSH
19023: LD_INT 20
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: LIST
19030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19031: LD_VAR 0 6
19035: PPUSH
19036: CALL_OW 264
19040: PUSH
19041: LD_INT 10
19043: PUSH
19044: EMPTY
19045: LIST
19046: IN
19047: IFFALSE 19068
// points := [ 35 , 110 , 70 ] ;
19049: LD_ADDR_VAR 0 9
19053: PUSH
19054: LD_INT 35
19056: PUSH
19057: LD_INT 110
19059: PUSH
19060: LD_INT 70
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: LIST
19067: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19068: LD_VAR 0 6
19072: PPUSH
19073: CALL_OW 265
19077: PUSH
19078: LD_INT 25
19080: EQUAL
19081: IFFALSE 19102
// points := [ 80 , 65 , 100 ] ;
19083: LD_ADDR_VAR 0 9
19087: PUSH
19088: LD_INT 80
19090: PUSH
19091: LD_INT 65
19093: PUSH
19094: LD_INT 100
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: LIST
19101: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19102: LD_VAR 0 6
19106: PPUSH
19107: CALL_OW 263
19111: PUSH
19112: LD_INT 1
19114: EQUAL
19115: IFFALSE 19150
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19117: LD_ADDR_VAR 0 10
19121: PUSH
19122: LD_VAR 0 10
19126: PUSH
19127: LD_VAR 0 6
19131: PPUSH
19132: CALL_OW 311
19136: PPUSH
19137: LD_INT 3
19139: PPUSH
19140: CALL_OW 259
19144: PUSH
19145: LD_INT 4
19147: MUL
19148: MUL
19149: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19150: LD_VAR 0 6
19154: PPUSH
19155: CALL_OW 263
19159: PUSH
19160: LD_INT 2
19162: EQUAL
19163: IFFALSE 19214
// begin j := IsControledBy ( i ) ;
19165: LD_ADDR_VAR 0 7
19169: PUSH
19170: LD_VAR 0 6
19174: PPUSH
19175: CALL_OW 312
19179: ST_TO_ADDR
// if j then
19180: LD_VAR 0 7
19184: IFFALSE 19214
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19186: LD_ADDR_VAR 0 10
19190: PUSH
19191: LD_VAR 0 10
19195: PUSH
19196: LD_VAR 0 7
19200: PPUSH
19201: LD_INT 3
19203: PPUSH
19204: CALL_OW 259
19208: PUSH
19209: LD_INT 3
19211: MUL
19212: MUL
19213: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19214: LD_VAR 0 6
19218: PPUSH
19219: CALL_OW 264
19223: PUSH
19224: LD_INT 5
19226: PUSH
19227: LD_INT 6
19229: PUSH
19230: LD_INT 46
19232: PUSH
19233: LD_INT 44
19235: PUSH
19236: LD_INT 47
19238: PUSH
19239: LD_INT 45
19241: PUSH
19242: LD_INT 28
19244: PUSH
19245: LD_INT 7
19247: PUSH
19248: LD_INT 27
19250: PUSH
19251: LD_INT 29
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: IN
19266: IFFALSE 19286
19268: PUSH
19269: LD_VAR 0 1
19273: PPUSH
19274: LD_INT 52
19276: PPUSH
19277: CALL_OW 321
19281: PUSH
19282: LD_INT 2
19284: EQUAL
19285: AND
19286: IFFALSE 19303
// bpoints := bpoints * 1.2 ;
19288: LD_ADDR_VAR 0 10
19292: PUSH
19293: LD_VAR 0 10
19297: PUSH
19298: LD_REAL  1.20000000000000E+0000
19301: MUL
19302: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19303: LD_VAR 0 6
19307: PPUSH
19308: CALL_OW 264
19312: PUSH
19313: LD_INT 6
19315: PUSH
19316: LD_INT 46
19318: PUSH
19319: LD_INT 47
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: LIST
19326: IN
19327: IFFALSE 19344
// bpoints := bpoints * 1.2 ;
19329: LD_ADDR_VAR 0 10
19333: PUSH
19334: LD_VAR 0 10
19338: PUSH
19339: LD_REAL  1.20000000000000E+0000
19342: MUL
19343: ST_TO_ADDR
// end ; unit_building :
19344: GO 19358
19346: LD_INT 3
19348: DOUBLE
19349: EQUAL
19350: IFTRUE 19354
19352: GO 19357
19354: POP
// ; end ;
19355: GO 19358
19357: POP
// for j = 1 to 3 do
19358: LD_ADDR_VAR 0 7
19362: PUSH
19363: DOUBLE
19364: LD_INT 1
19366: DEC
19367: ST_TO_ADDR
19368: LD_INT 3
19370: PUSH
19371: FOR_TO
19372: IFFALSE 19425
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19374: LD_ADDR_VAR 0 5
19378: PUSH
19379: LD_VAR 0 5
19383: PPUSH
19384: LD_VAR 0 7
19388: PPUSH
19389: LD_VAR 0 5
19393: PUSH
19394: LD_VAR 0 7
19398: ARRAY
19399: PUSH
19400: LD_VAR 0 9
19404: PUSH
19405: LD_VAR 0 7
19409: ARRAY
19410: PUSH
19411: LD_VAR 0 10
19415: MUL
19416: PLUS
19417: PPUSH
19418: CALL_OW 1
19422: ST_TO_ADDR
19423: GO 19371
19425: POP
19426: POP
// end ;
19427: GO 17900
19429: POP
19430: POP
// result := Replace ( result , 4 , tmp ) ;
19431: LD_ADDR_VAR 0 5
19435: PUSH
19436: LD_VAR 0 5
19440: PPUSH
19441: LD_INT 4
19443: PPUSH
19444: LD_VAR 0 8
19448: PPUSH
19449: CALL_OW 1
19453: ST_TO_ADDR
// end ;
19454: LD_VAR 0 5
19458: RET
// export function DangerAtRange ( unit , range ) ; begin
19459: LD_INT 0
19461: PPUSH
// if not unit then
19462: LD_VAR 0 1
19466: NOT
19467: IFFALSE 19471
// exit ;
19469: GO 19516
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19471: LD_ADDR_VAR 0 3
19475: PUSH
19476: LD_VAR 0 1
19480: PPUSH
19481: CALL_OW 255
19485: PPUSH
19486: LD_VAR 0 1
19490: PPUSH
19491: CALL_OW 250
19495: PPUSH
19496: LD_VAR 0 1
19500: PPUSH
19501: CALL_OW 251
19505: PPUSH
19506: LD_VAR 0 2
19510: PPUSH
19511: CALL 17750 0 4
19515: ST_TO_ADDR
// end ;
19516: LD_VAR 0 3
19520: RET
// export function DangerInArea ( side , area ) ; begin
19521: LD_INT 0
19523: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19524: LD_ADDR_VAR 0 3
19528: PUSH
19529: LD_VAR 0 2
19533: PPUSH
19534: LD_INT 81
19536: PUSH
19537: LD_VAR 0 1
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PPUSH
19546: CALL_OW 70
19550: ST_TO_ADDR
// end ;
19551: LD_VAR 0 3
19555: RET
// export function IsExtension ( b ) ; begin
19556: LD_INT 0
19558: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19559: LD_ADDR_VAR 0 2
19563: PUSH
19564: LD_VAR 0 1
19568: PUSH
19569: LD_INT 23
19571: PUSH
19572: LD_INT 20
19574: PUSH
19575: LD_INT 22
19577: PUSH
19578: LD_INT 17
19580: PUSH
19581: LD_INT 24
19583: PUSH
19584: LD_INT 21
19586: PUSH
19587: LD_INT 19
19589: PUSH
19590: LD_INT 16
19592: PUSH
19593: LD_INT 25
19595: PUSH
19596: LD_INT 18
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: IN
19611: ST_TO_ADDR
// end ;
19612: LD_VAR 0 2
19616: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
19617: LD_INT 0
19619: PPUSH
19620: PPUSH
19621: PPUSH
// result := [ ] ;
19622: LD_ADDR_VAR 0 4
19626: PUSH
19627: EMPTY
19628: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19629: LD_ADDR_VAR 0 5
19633: PUSH
19634: LD_VAR 0 2
19638: PPUSH
19639: LD_INT 21
19641: PUSH
19642: LD_INT 3
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PPUSH
19649: CALL_OW 70
19653: ST_TO_ADDR
// if not tmp then
19654: LD_VAR 0 5
19658: NOT
19659: IFFALSE 19663
// exit ;
19661: GO 19727
// if checkLink then
19663: LD_VAR 0 3
19667: IFFALSE 19717
// begin for i in tmp do
19669: LD_ADDR_VAR 0 6
19673: PUSH
19674: LD_VAR 0 5
19678: PUSH
19679: FOR_IN
19680: IFFALSE 19715
// if GetBase ( i ) <> base then
19682: LD_VAR 0 6
19686: PPUSH
19687: CALL_OW 274
19691: PUSH
19692: LD_VAR 0 1
19696: NONEQUAL
19697: IFFALSE 19713
// ComLinkToBase ( base , i ) ;
19699: LD_VAR 0 1
19703: PPUSH
19704: LD_VAR 0 6
19708: PPUSH
19709: CALL_OW 169
19713: GO 19679
19715: POP
19716: POP
// end ; result := tmp ;
19717: LD_ADDR_VAR 0 4
19721: PUSH
19722: LD_VAR 0 5
19726: ST_TO_ADDR
// end ;
19727: LD_VAR 0 4
19731: RET
// export function ComComplete ( units , b ) ; var i ; begin
19732: LD_INT 0
19734: PPUSH
19735: PPUSH
// if not units then
19736: LD_VAR 0 1
19740: NOT
19741: IFFALSE 19745
// exit ;
19743: GO 19835
// for i in units do
19745: LD_ADDR_VAR 0 4
19749: PUSH
19750: LD_VAR 0 1
19754: PUSH
19755: FOR_IN
19756: IFFALSE 19833
// if BuildingStatus ( b ) = bs_build then
19758: LD_VAR 0 2
19762: PPUSH
19763: CALL_OW 461
19767: PUSH
19768: LD_INT 1
19770: EQUAL
19771: IFFALSE 19831
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19773: LD_VAR 0 4
19777: PPUSH
19778: LD_STRING h
19780: PUSH
19781: LD_VAR 0 2
19785: PPUSH
19786: CALL_OW 250
19790: PUSH
19791: LD_VAR 0 2
19795: PPUSH
19796: CALL_OW 251
19800: PUSH
19801: LD_VAR 0 2
19805: PUSH
19806: LD_INT 0
19808: PUSH
19809: LD_INT 0
19811: PUSH
19812: LD_INT 0
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: PUSH
19824: EMPTY
19825: LIST
19826: PPUSH
19827: CALL_OW 446
19831: GO 19755
19833: POP
19834: POP
// end ;
19835: LD_VAR 0 3
19839: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19840: LD_INT 0
19842: PPUSH
19843: PPUSH
19844: PPUSH
19845: PPUSH
19846: PPUSH
19847: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19848: LD_VAR 0 1
19852: NOT
19853: IFTRUE 19870
19855: PUSH
19856: LD_VAR 0 1
19860: PPUSH
19861: CALL_OW 263
19865: PUSH
19866: LD_INT 2
19868: NONEQUAL
19869: OR
19870: IFFALSE 19874
// exit ;
19872: GO 20190
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19874: LD_ADDR_VAR 0 6
19878: PUSH
19879: LD_INT 22
19881: PUSH
19882: LD_VAR 0 1
19886: PPUSH
19887: CALL_OW 255
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 2
19898: PUSH
19899: LD_INT 30
19901: PUSH
19902: LD_INT 36
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 34
19911: PUSH
19912: LD_INT 31
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: LIST
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PPUSH
19928: CALL_OW 69
19932: ST_TO_ADDR
// if not tmp then
19933: LD_VAR 0 6
19937: NOT
19938: IFFALSE 19942
// exit ;
19940: GO 20190
// result := [ ] ;
19942: LD_ADDR_VAR 0 2
19946: PUSH
19947: EMPTY
19948: ST_TO_ADDR
// for i in tmp do
19949: LD_ADDR_VAR 0 3
19953: PUSH
19954: LD_VAR 0 6
19958: PUSH
19959: FOR_IN
19960: IFFALSE 20031
// begin t := UnitsInside ( i ) ;
19962: LD_ADDR_VAR 0 4
19966: PUSH
19967: LD_VAR 0 3
19971: PPUSH
19972: CALL_OW 313
19976: ST_TO_ADDR
// if t then
19977: LD_VAR 0 4
19981: IFFALSE 20029
// for j in t do
19983: LD_ADDR_VAR 0 7
19987: PUSH
19988: LD_VAR 0 4
19992: PUSH
19993: FOR_IN
19994: IFFALSE 20027
// result := Replace ( result , result + 1 , j ) ;
19996: LD_ADDR_VAR 0 2
20000: PUSH
20001: LD_VAR 0 2
20005: PPUSH
20006: LD_VAR 0 2
20010: PUSH
20011: LD_INT 1
20013: PLUS
20014: PPUSH
20015: LD_VAR 0 7
20019: PPUSH
20020: CALL_OW 1
20024: ST_TO_ADDR
20025: GO 19993
20027: POP
20028: POP
// end ;
20029: GO 19959
20031: POP
20032: POP
// if not result then
20033: LD_VAR 0 2
20037: NOT
20038: IFFALSE 20042
// exit ;
20040: GO 20190
// mech := result [ 1 ] ;
20042: LD_ADDR_VAR 0 5
20046: PUSH
20047: LD_VAR 0 2
20051: PUSH
20052: LD_INT 1
20054: ARRAY
20055: ST_TO_ADDR
// if result > 1 then
20056: LD_VAR 0 2
20060: PUSH
20061: LD_INT 1
20063: GREATER
20064: IFFALSE 20176
// begin for i = 2 to result do
20066: LD_ADDR_VAR 0 3
20070: PUSH
20071: DOUBLE
20072: LD_INT 2
20074: DEC
20075: ST_TO_ADDR
20076: LD_VAR 0 2
20080: PUSH
20081: FOR_TO
20082: IFFALSE 20174
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20084: LD_ADDR_VAR 0 4
20088: PUSH
20089: LD_VAR 0 2
20093: PUSH
20094: LD_VAR 0 3
20098: ARRAY
20099: PPUSH
20100: LD_INT 3
20102: PPUSH
20103: CALL_OW 259
20107: PUSH
20108: LD_VAR 0 2
20112: PUSH
20113: LD_VAR 0 3
20117: ARRAY
20118: PPUSH
20119: CALL_OW 432
20123: MINUS
20124: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20125: LD_VAR 0 4
20129: PUSH
20130: LD_VAR 0 5
20134: PPUSH
20135: LD_INT 3
20137: PPUSH
20138: CALL_OW 259
20142: PUSH
20143: LD_VAR 0 5
20147: PPUSH
20148: CALL_OW 432
20152: MINUS
20153: GREATEREQUAL
20154: IFFALSE 20172
// mech := result [ i ] ;
20156: LD_ADDR_VAR 0 5
20160: PUSH
20161: LD_VAR 0 2
20165: PUSH
20166: LD_VAR 0 3
20170: ARRAY
20171: ST_TO_ADDR
// end ;
20172: GO 20081
20174: POP
20175: POP
// end ; ComLinkTo ( vehicle , mech ) ;
20176: LD_VAR 0 1
20180: PPUSH
20181: LD_VAR 0 5
20185: PPUSH
20186: CALL_OW 135
// end ;
20190: LD_VAR 0 2
20194: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20195: LD_INT 0
20197: PPUSH
20198: PPUSH
20199: PPUSH
20200: PPUSH
20201: PPUSH
20202: PPUSH
20203: PPUSH
20204: PPUSH
20205: PPUSH
20206: PPUSH
20207: PPUSH
20208: PPUSH
20209: PPUSH
// result := [ ] ;
20210: LD_ADDR_VAR 0 7
20214: PUSH
20215: EMPTY
20216: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20217: LD_VAR 0 1
20221: PPUSH
20222: CALL_OW 266
20226: PUSH
20227: LD_INT 0
20229: PUSH
20230: LD_INT 1
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: IN
20237: NOT
20238: IFFALSE 20242
// exit ;
20240: GO 21882
// if name then
20242: LD_VAR 0 3
20246: IFFALSE 20262
// SetBName ( base_dep , name ) ;
20248: LD_VAR 0 1
20252: PPUSH
20253: LD_VAR 0 3
20257: PPUSH
20258: CALL_OW 500
// base := GetBase ( base_dep ) ;
20262: LD_ADDR_VAR 0 15
20266: PUSH
20267: LD_VAR 0 1
20271: PPUSH
20272: CALL_OW 274
20276: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20277: LD_ADDR_VAR 0 16
20281: PUSH
20282: LD_VAR 0 1
20286: PPUSH
20287: CALL_OW 255
20291: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20292: LD_ADDR_VAR 0 17
20296: PUSH
20297: LD_VAR 0 1
20301: PPUSH
20302: CALL_OW 248
20306: ST_TO_ADDR
// if sources then
20307: LD_VAR 0 5
20311: IFFALSE 20358
// for i = 1 to 3 do
20313: LD_ADDR_VAR 0 8
20317: PUSH
20318: DOUBLE
20319: LD_INT 1
20321: DEC
20322: ST_TO_ADDR
20323: LD_INT 3
20325: PUSH
20326: FOR_TO
20327: IFFALSE 20356
// AddResourceType ( base , i , sources [ i ] ) ;
20329: LD_VAR 0 15
20333: PPUSH
20334: LD_VAR 0 8
20338: PPUSH
20339: LD_VAR 0 5
20343: PUSH
20344: LD_VAR 0 8
20348: ARRAY
20349: PPUSH
20350: CALL_OW 276
20354: GO 20326
20356: POP
20357: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
20358: LD_ADDR_VAR 0 18
20362: PUSH
20363: LD_VAR 0 15
20367: PPUSH
20368: LD_VAR 0 2
20372: PPUSH
20373: LD_INT 1
20375: PPUSH
20376: CALL 19617 0 3
20380: ST_TO_ADDR
// InitHc ;
20381: CALL_OW 19
// InitUc ;
20385: CALL_OW 18
// uc_side := side ;
20389: LD_ADDR_OWVAR 20
20393: PUSH
20394: LD_VAR 0 16
20398: ST_TO_ADDR
// uc_nation := nation ;
20399: LD_ADDR_OWVAR 21
20403: PUSH
20404: LD_VAR 0 17
20408: ST_TO_ADDR
// if buildings then
20409: LD_VAR 0 18
20413: IFFALSE 21741
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20415: LD_ADDR_VAR 0 19
20419: PUSH
20420: LD_VAR 0 18
20424: PPUSH
20425: LD_INT 2
20427: PUSH
20428: LD_INT 30
20430: PUSH
20431: LD_INT 29
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 30
20440: PUSH
20441: LD_INT 30
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: LIST
20452: PPUSH
20453: CALL_OW 72
20457: ST_TO_ADDR
// if tmp then
20458: LD_VAR 0 19
20462: IFFALSE 20510
// for i in tmp do
20464: LD_ADDR_VAR 0 8
20468: PUSH
20469: LD_VAR 0 19
20473: PUSH
20474: FOR_IN
20475: IFFALSE 20508
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20477: LD_VAR 0 8
20481: PPUSH
20482: CALL_OW 250
20486: PPUSH
20487: LD_VAR 0 8
20491: PPUSH
20492: CALL_OW 251
20496: PPUSH
20497: LD_VAR 0 16
20501: PPUSH
20502: CALL_OW 441
20506: GO 20474
20508: POP
20509: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20510: LD_VAR 0 18
20514: PPUSH
20515: LD_INT 2
20517: PUSH
20518: LD_INT 30
20520: PUSH
20521: LD_INT 32
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 30
20530: PUSH
20531: LD_INT 33
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: LIST
20542: PPUSH
20543: CALL_OW 72
20547: IFFALSE 20635
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20549: LD_ADDR_VAR 0 8
20553: PUSH
20554: LD_VAR 0 18
20558: PPUSH
20559: LD_INT 2
20561: PUSH
20562: LD_INT 30
20564: PUSH
20565: LD_INT 32
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 30
20574: PUSH
20575: LD_INT 33
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: LIST
20586: PPUSH
20587: CALL_OW 72
20591: PUSH
20592: FOR_IN
20593: IFFALSE 20633
// begin if not GetBWeapon ( i ) then
20595: LD_VAR 0 8
20599: PPUSH
20600: CALL_OW 269
20604: NOT
20605: IFFALSE 20631
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20607: LD_VAR 0 8
20611: PPUSH
20612: LD_VAR 0 8
20616: PPUSH
20617: LD_VAR 0 2
20621: PPUSH
20622: CALL 21887 0 2
20626: PPUSH
20627: CALL_OW 431
// end ;
20631: GO 20592
20633: POP
20634: POP
// end ; for i = 1 to personel do
20635: LD_ADDR_VAR 0 8
20639: PUSH
20640: DOUBLE
20641: LD_INT 1
20643: DEC
20644: ST_TO_ADDR
20645: LD_VAR 0 6
20649: PUSH
20650: FOR_TO
20651: IFFALSE 21721
// begin if i > 4 then
20653: LD_VAR 0 8
20657: PUSH
20658: LD_INT 4
20660: GREATER
20661: IFFALSE 20665
// break ;
20663: GO 21721
// case i of 1 :
20665: LD_VAR 0 8
20669: PUSH
20670: LD_INT 1
20672: DOUBLE
20673: EQUAL
20674: IFTRUE 20678
20676: GO 20758
20678: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20679: LD_ADDR_VAR 0 12
20683: PUSH
20684: LD_VAR 0 18
20688: PPUSH
20689: LD_INT 22
20691: PUSH
20692: LD_VAR 0 16
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 58
20703: PUSH
20704: EMPTY
20705: LIST
20706: PUSH
20707: LD_INT 2
20709: PUSH
20710: LD_INT 30
20712: PUSH
20713: LD_INT 32
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 30
20722: PUSH
20723: LD_INT 4
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 30
20732: PUSH
20733: LD_INT 5
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: LIST
20750: PPUSH
20751: CALL_OW 72
20755: ST_TO_ADDR
20756: GO 20980
20758: LD_INT 2
20760: DOUBLE
20761: EQUAL
20762: IFTRUE 20766
20764: GO 20828
20766: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20767: LD_ADDR_VAR 0 12
20771: PUSH
20772: LD_VAR 0 18
20776: PPUSH
20777: LD_INT 22
20779: PUSH
20780: LD_VAR 0 16
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 2
20791: PUSH
20792: LD_INT 30
20794: PUSH
20795: LD_INT 0
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 30
20804: PUSH
20805: LD_INT 1
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PPUSH
20821: CALL_OW 72
20825: ST_TO_ADDR
20826: GO 20980
20828: LD_INT 3
20830: DOUBLE
20831: EQUAL
20832: IFTRUE 20836
20834: GO 20898
20836: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20837: LD_ADDR_VAR 0 12
20841: PUSH
20842: LD_VAR 0 18
20846: PPUSH
20847: LD_INT 22
20849: PUSH
20850: LD_VAR 0 16
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 2
20861: PUSH
20862: LD_INT 30
20864: PUSH
20865: LD_INT 2
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 30
20874: PUSH
20875: LD_INT 3
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: LIST
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PPUSH
20891: CALL_OW 72
20895: ST_TO_ADDR
20896: GO 20980
20898: LD_INT 4
20900: DOUBLE
20901: EQUAL
20902: IFTRUE 20906
20904: GO 20979
20906: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20907: LD_ADDR_VAR 0 12
20911: PUSH
20912: LD_VAR 0 18
20916: PPUSH
20917: LD_INT 22
20919: PUSH
20920: LD_VAR 0 16
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 2
20931: PUSH
20932: LD_INT 30
20934: PUSH
20935: LD_INT 6
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 30
20944: PUSH
20945: LD_INT 7
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 30
20954: PUSH
20955: LD_INT 8
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PPUSH
20972: CALL_OW 72
20976: ST_TO_ADDR
20977: GO 20980
20979: POP
// if i = 1 then
20980: LD_VAR 0 8
20984: PUSH
20985: LD_INT 1
20987: EQUAL
20988: IFFALSE 21099
// begin tmp := [ ] ;
20990: LD_ADDR_VAR 0 19
20994: PUSH
20995: EMPTY
20996: ST_TO_ADDR
// for j in f do
20997: LD_ADDR_VAR 0 9
21001: PUSH
21002: LD_VAR 0 12
21006: PUSH
21007: FOR_IN
21008: IFFALSE 21081
// if GetBType ( j ) = b_bunker then
21010: LD_VAR 0 9
21014: PPUSH
21015: CALL_OW 266
21019: PUSH
21020: LD_INT 32
21022: EQUAL
21023: IFFALSE 21050
// tmp := Insert ( tmp , 1 , j ) else
21025: LD_ADDR_VAR 0 19
21029: PUSH
21030: LD_VAR 0 19
21034: PPUSH
21035: LD_INT 1
21037: PPUSH
21038: LD_VAR 0 9
21042: PPUSH
21043: CALL_OW 2
21047: ST_TO_ADDR
21048: GO 21079
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21050: LD_ADDR_VAR 0 19
21054: PUSH
21055: LD_VAR 0 19
21059: PPUSH
21060: LD_VAR 0 19
21064: PUSH
21065: LD_INT 1
21067: PLUS
21068: PPUSH
21069: LD_VAR 0 9
21073: PPUSH
21074: CALL_OW 2
21078: ST_TO_ADDR
21079: GO 21007
21081: POP
21082: POP
// if tmp then
21083: LD_VAR 0 19
21087: IFFALSE 21099
// f := tmp ;
21089: LD_ADDR_VAR 0 12
21093: PUSH
21094: LD_VAR 0 19
21098: ST_TO_ADDR
// end ; x := personel [ i ] ;
21099: LD_ADDR_VAR 0 13
21103: PUSH
21104: LD_VAR 0 6
21108: PUSH
21109: LD_VAR 0 8
21113: ARRAY
21114: ST_TO_ADDR
// if x = - 1 then
21115: LD_VAR 0 13
21119: PUSH
21120: LD_INT 1
21122: NEG
21123: EQUAL
21124: IFFALSE 21335
// begin for j in f do
21126: LD_ADDR_VAR 0 9
21130: PUSH
21131: LD_VAR 0 12
21135: PUSH
21136: FOR_IN
21137: IFFALSE 21331
// repeat InitHc ;
21139: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21143: LD_VAR 0 9
21147: PPUSH
21148: CALL_OW 266
21152: PUSH
21153: LD_INT 5
21155: EQUAL
21156: IFFALSE 21226
// begin if UnitsInside ( j ) < 3 then
21158: LD_VAR 0 9
21162: PPUSH
21163: CALL_OW 313
21167: PUSH
21168: LD_INT 3
21170: LESS
21171: IFFALSE 21207
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21173: LD_INT 0
21175: PPUSH
21176: LD_INT 5
21178: PUSH
21179: LD_INT 8
21181: PUSH
21182: LD_INT 9
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: LIST
21189: PUSH
21190: LD_VAR 0 17
21194: ARRAY
21195: PPUSH
21196: LD_VAR 0 4
21200: PPUSH
21201: CALL_OW 380
21205: GO 21224
// PrepareHuman ( false , i , skill ) ;
21207: LD_INT 0
21209: PPUSH
21210: LD_VAR 0 8
21214: PPUSH
21215: LD_VAR 0 4
21219: PPUSH
21220: CALL_OW 380
// end else
21224: GO 21243
// PrepareHuman ( false , i , skill ) ;
21226: LD_INT 0
21228: PPUSH
21229: LD_VAR 0 8
21233: PPUSH
21234: LD_VAR 0 4
21238: PPUSH
21239: CALL_OW 380
// un := CreateHuman ;
21243: LD_ADDR_VAR 0 14
21247: PUSH
21248: CALL_OW 44
21252: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21253: LD_ADDR_VAR 0 7
21257: PUSH
21258: LD_VAR 0 7
21262: PPUSH
21263: LD_INT 1
21265: PPUSH
21266: LD_VAR 0 14
21270: PPUSH
21271: CALL_OW 2
21275: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21276: LD_VAR 0 14
21280: PPUSH
21281: LD_VAR 0 9
21285: PPUSH
21286: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21290: LD_VAR 0 9
21294: PPUSH
21295: CALL_OW 313
21299: PUSH
21300: LD_INT 6
21302: EQUAL
21303: IFTRUE 21327
21305: PUSH
21306: LD_VAR 0 9
21310: PPUSH
21311: CALL_OW 266
21315: PUSH
21316: LD_INT 32
21318: PUSH
21319: LD_INT 31
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: IN
21326: OR
21327: IFFALSE 21139
21329: GO 21136
21331: POP
21332: POP
// end else
21333: GO 21719
// for j = 1 to x do
21335: LD_ADDR_VAR 0 9
21339: PUSH
21340: DOUBLE
21341: LD_INT 1
21343: DEC
21344: ST_TO_ADDR
21345: LD_VAR 0 13
21349: PUSH
21350: FOR_TO
21351: IFFALSE 21717
// begin InitHc ;
21353: CALL_OW 19
// if not f then
21357: LD_VAR 0 12
21361: NOT
21362: IFFALSE 21451
// begin PrepareHuman ( false , i , skill ) ;
21364: LD_INT 0
21366: PPUSH
21367: LD_VAR 0 8
21371: PPUSH
21372: LD_VAR 0 4
21376: PPUSH
21377: CALL_OW 380
// un := CreateHuman ;
21381: LD_ADDR_VAR 0 14
21385: PUSH
21386: CALL_OW 44
21390: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21391: LD_ADDR_VAR 0 7
21395: PUSH
21396: LD_VAR 0 7
21400: PPUSH
21401: LD_INT 1
21403: PPUSH
21404: LD_VAR 0 14
21408: PPUSH
21409: CALL_OW 2
21413: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21414: LD_VAR 0 14
21418: PPUSH
21419: LD_VAR 0 1
21423: PPUSH
21424: CALL_OW 250
21428: PPUSH
21429: LD_VAR 0 1
21433: PPUSH
21434: CALL_OW 251
21438: PPUSH
21439: LD_INT 10
21441: PPUSH
21442: LD_INT 0
21444: PPUSH
21445: CALL_OW 50
// continue ;
21449: GO 21350
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21451: LD_VAR 0 12
21455: PUSH
21456: LD_INT 1
21458: ARRAY
21459: PPUSH
21460: CALL_OW 313
21464: IFFALSE 21492
21466: PUSH
21467: LD_VAR 0 12
21471: PUSH
21472: LD_INT 1
21474: ARRAY
21475: PPUSH
21476: CALL_OW 266
21480: PUSH
21481: LD_INT 32
21483: PUSH
21484: LD_INT 31
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: IN
21491: AND
21492: IFTRUE 21513
21494: PUSH
21495: LD_VAR 0 12
21499: PUSH
21500: LD_INT 1
21502: ARRAY
21503: PPUSH
21504: CALL_OW 313
21508: PUSH
21509: LD_INT 6
21511: EQUAL
21512: OR
21513: IFFALSE 21533
// f := Delete ( f , 1 ) ;
21515: LD_ADDR_VAR 0 12
21519: PUSH
21520: LD_VAR 0 12
21524: PPUSH
21525: LD_INT 1
21527: PPUSH
21528: CALL_OW 3
21532: ST_TO_ADDR
// if not f then
21533: LD_VAR 0 12
21537: NOT
21538: IFFALSE 21556
// begin x := x + 2 ;
21540: LD_ADDR_VAR 0 13
21544: PUSH
21545: LD_VAR 0 13
21549: PUSH
21550: LD_INT 2
21552: PLUS
21553: ST_TO_ADDR
// continue ;
21554: GO 21350
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21556: LD_VAR 0 12
21560: PUSH
21561: LD_INT 1
21563: ARRAY
21564: PPUSH
21565: CALL_OW 266
21569: PUSH
21570: LD_INT 5
21572: EQUAL
21573: IFFALSE 21647
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21575: LD_VAR 0 12
21579: PUSH
21580: LD_INT 1
21582: ARRAY
21583: PPUSH
21584: CALL_OW 313
21588: PUSH
21589: LD_INT 3
21591: LESS
21592: IFFALSE 21628
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21594: LD_INT 0
21596: PPUSH
21597: LD_INT 5
21599: PUSH
21600: LD_INT 8
21602: PUSH
21603: LD_INT 9
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: LIST
21610: PUSH
21611: LD_VAR 0 17
21615: ARRAY
21616: PPUSH
21617: LD_VAR 0 4
21621: PPUSH
21622: CALL_OW 380
21626: GO 21645
// PrepareHuman ( false , i , skill ) ;
21628: LD_INT 0
21630: PPUSH
21631: LD_VAR 0 8
21635: PPUSH
21636: LD_VAR 0 4
21640: PPUSH
21641: CALL_OW 380
// end else
21645: GO 21664
// PrepareHuman ( false , i , skill ) ;
21647: LD_INT 0
21649: PPUSH
21650: LD_VAR 0 8
21654: PPUSH
21655: LD_VAR 0 4
21659: PPUSH
21660: CALL_OW 380
// un := CreateHuman ;
21664: LD_ADDR_VAR 0 14
21668: PUSH
21669: CALL_OW 44
21673: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21674: LD_ADDR_VAR 0 7
21678: PUSH
21679: LD_VAR 0 7
21683: PPUSH
21684: LD_INT 1
21686: PPUSH
21687: LD_VAR 0 14
21691: PPUSH
21692: CALL_OW 2
21696: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21697: LD_VAR 0 14
21701: PPUSH
21702: LD_VAR 0 12
21706: PUSH
21707: LD_INT 1
21709: ARRAY
21710: PPUSH
21711: CALL_OW 52
// end ;
21715: GO 21350
21717: POP
21718: POP
// end ;
21719: GO 20650
21721: POP
21722: POP
// result := result ^ buildings ;
21723: LD_ADDR_VAR 0 7
21727: PUSH
21728: LD_VAR 0 7
21732: PUSH
21733: LD_VAR 0 18
21737: ADD
21738: ST_TO_ADDR
// end else
21739: GO 21882
// begin for i = 1 to personel do
21741: LD_ADDR_VAR 0 8
21745: PUSH
21746: DOUBLE
21747: LD_INT 1
21749: DEC
21750: ST_TO_ADDR
21751: LD_VAR 0 6
21755: PUSH
21756: FOR_TO
21757: IFFALSE 21880
// begin if i > 4 then
21759: LD_VAR 0 8
21763: PUSH
21764: LD_INT 4
21766: GREATER
21767: IFFALSE 21771
// break ;
21769: GO 21880
// x := personel [ i ] ;
21771: LD_ADDR_VAR 0 13
21775: PUSH
21776: LD_VAR 0 6
21780: PUSH
21781: LD_VAR 0 8
21785: ARRAY
21786: ST_TO_ADDR
// if x = - 1 then
21787: LD_VAR 0 13
21791: PUSH
21792: LD_INT 1
21794: NEG
21795: EQUAL
21796: IFFALSE 21800
// continue ;
21798: GO 21756
// PrepareHuman ( false , i , skill ) ;
21800: LD_INT 0
21802: PPUSH
21803: LD_VAR 0 8
21807: PPUSH
21808: LD_VAR 0 4
21812: PPUSH
21813: CALL_OW 380
// un := CreateHuman ;
21817: LD_ADDR_VAR 0 14
21821: PUSH
21822: CALL_OW 44
21826: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21827: LD_VAR 0 14
21831: PPUSH
21832: LD_VAR 0 1
21836: PPUSH
21837: CALL_OW 250
21841: PPUSH
21842: LD_VAR 0 1
21846: PPUSH
21847: CALL_OW 251
21851: PPUSH
21852: LD_INT 10
21854: PPUSH
21855: LD_INT 0
21857: PPUSH
21858: CALL_OW 50
// result := result ^ un ;
21862: LD_ADDR_VAR 0 7
21866: PUSH
21867: LD_VAR 0 7
21871: PUSH
21872: LD_VAR 0 14
21876: ADD
21877: ST_TO_ADDR
// end ;
21878: GO 21756
21880: POP
21881: POP
// end ; end ;
21882: LD_VAR 0 7
21886: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21887: LD_INT 0
21889: PPUSH
21890: PPUSH
21891: PPUSH
21892: PPUSH
21893: PPUSH
21894: PPUSH
21895: PPUSH
21896: PPUSH
21897: PPUSH
21898: PPUSH
21899: PPUSH
21900: PPUSH
21901: PPUSH
21902: PPUSH
21903: PPUSH
21904: PPUSH
// result := false ;
21905: LD_ADDR_VAR 0 3
21909: PUSH
21910: LD_INT 0
21912: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21913: LD_VAR 0 1
21917: NOT
21918: IFTRUE 21943
21920: PUSH
21921: LD_VAR 0 1
21925: PPUSH
21926: CALL_OW 266
21930: PUSH
21931: LD_INT 32
21933: PUSH
21934: LD_INT 33
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: IN
21941: NOT
21942: OR
21943: IFFALSE 21947
// exit ;
21945: GO 23082
// nat := GetNation ( tower ) ;
21947: LD_ADDR_VAR 0 12
21951: PUSH
21952: LD_VAR 0 1
21956: PPUSH
21957: CALL_OW 248
21961: ST_TO_ADDR
// side := GetSide ( tower ) ;
21962: LD_ADDR_VAR 0 16
21966: PUSH
21967: LD_VAR 0 1
21971: PPUSH
21972: CALL_OW 255
21976: ST_TO_ADDR
// x := GetX ( tower ) ;
21977: LD_ADDR_VAR 0 10
21981: PUSH
21982: LD_VAR 0 1
21986: PPUSH
21987: CALL_OW 250
21991: ST_TO_ADDR
// y := GetY ( tower ) ;
21992: LD_ADDR_VAR 0 11
21996: PUSH
21997: LD_VAR 0 1
22001: PPUSH
22002: CALL_OW 251
22006: ST_TO_ADDR
// if not x or not y then
22007: LD_VAR 0 10
22011: NOT
22012: IFTRUE 22021
22014: PUSH
22015: LD_VAR 0 11
22019: NOT
22020: OR
22021: IFFALSE 22025
// exit ;
22023: GO 23082
// weapon := 0 ;
22025: LD_ADDR_VAR 0 18
22029: PUSH
22030: LD_INT 0
22032: ST_TO_ADDR
// fac_list := [ ] ;
22033: LD_ADDR_VAR 0 17
22037: PUSH
22038: EMPTY
22039: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
22040: LD_ADDR_VAR 0 6
22044: PUSH
22045: LD_VAR 0 1
22049: PPUSH
22050: CALL_OW 274
22054: PPUSH
22055: LD_VAR 0 2
22059: PPUSH
22060: LD_INT 0
22062: PPUSH
22063: CALL 19617 0 3
22067: PPUSH
22068: LD_INT 30
22070: PUSH
22071: LD_INT 3
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PPUSH
22078: CALL_OW 72
22082: ST_TO_ADDR
// if not factories then
22083: LD_VAR 0 6
22087: NOT
22088: IFFALSE 22092
// exit ;
22090: GO 23082
// for i in factories do
22092: LD_ADDR_VAR 0 8
22096: PUSH
22097: LD_VAR 0 6
22101: PUSH
22102: FOR_IN
22103: IFFALSE 22128
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22105: LD_ADDR_VAR 0 17
22109: PUSH
22110: LD_VAR 0 17
22114: PUSH
22115: LD_VAR 0 8
22119: PPUSH
22120: CALL_OW 478
22124: UNION
22125: ST_TO_ADDR
22126: GO 22102
22128: POP
22129: POP
// if not fac_list then
22130: LD_VAR 0 17
22134: NOT
22135: IFFALSE 22139
// exit ;
22137: GO 23082
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22139: LD_ADDR_VAR 0 5
22143: PUSH
22144: LD_INT 4
22146: PUSH
22147: LD_INT 5
22149: PUSH
22150: LD_INT 9
22152: PUSH
22153: LD_INT 10
22155: PUSH
22156: LD_INT 6
22158: PUSH
22159: LD_INT 7
22161: PUSH
22162: LD_INT 11
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 27
22176: PUSH
22177: LD_INT 28
22179: PUSH
22180: LD_INT 26
22182: PUSH
22183: LD_INT 30
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 43
22194: PUSH
22195: LD_INT 44
22197: PUSH
22198: LD_INT 46
22200: PUSH
22201: LD_INT 45
22203: PUSH
22204: LD_INT 47
22206: PUSH
22207: LD_INT 49
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: LIST
22222: PUSH
22223: LD_VAR 0 12
22227: ARRAY
22228: ST_TO_ADDR
// list := list isect fac_list ;
22229: LD_ADDR_VAR 0 5
22233: PUSH
22234: LD_VAR 0 5
22238: PUSH
22239: LD_VAR 0 17
22243: ISECT
22244: ST_TO_ADDR
// if not list then
22245: LD_VAR 0 5
22249: NOT
22250: IFFALSE 22254
// exit ;
22252: GO 23082
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22254: LD_VAR 0 12
22258: PUSH
22259: LD_INT 3
22261: EQUAL
22262: IFFALSE 22274
22264: PUSH
22265: LD_INT 49
22267: PUSH
22268: LD_VAR 0 5
22272: IN
22273: AND
22274: IFFALSE 22294
22276: PUSH
22277: LD_INT 31
22279: PPUSH
22280: LD_VAR 0 16
22284: PPUSH
22285: CALL_OW 321
22289: PUSH
22290: LD_INT 2
22292: EQUAL
22293: AND
22294: IFFALSE 22354
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22296: LD_INT 22
22298: PUSH
22299: LD_VAR 0 16
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 35
22310: PUSH
22311: LD_INT 49
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 91
22320: PUSH
22321: LD_VAR 0 1
22325: PUSH
22326: LD_INT 10
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: LIST
22338: PPUSH
22339: CALL_OW 69
22343: NOT
22344: IFFALSE 22354
// weapon := ru_time_lapser ;
22346: LD_ADDR_VAR 0 18
22350: PUSH
22351: LD_INT 49
22353: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22354: LD_VAR 0 12
22358: PUSH
22359: LD_INT 1
22361: PUSH
22362: LD_INT 2
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: IN
22369: IFFALSE 22393
22371: PUSH
22372: LD_INT 11
22374: PUSH
22375: LD_VAR 0 5
22379: IN
22380: IFTRUE 22392
22382: PUSH
22383: LD_INT 30
22385: PUSH
22386: LD_VAR 0 5
22390: IN
22391: OR
22392: AND
22393: IFFALSE 22413
22395: PUSH
22396: LD_INT 6
22398: PPUSH
22399: LD_VAR 0 16
22403: PPUSH
22404: CALL_OW 321
22408: PUSH
22409: LD_INT 2
22411: EQUAL
22412: AND
22413: IFFALSE 22580
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22415: LD_INT 22
22417: PUSH
22418: LD_VAR 0 16
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 2
22429: PUSH
22430: LD_INT 35
22432: PUSH
22433: LD_INT 11
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 35
22442: PUSH
22443: LD_INT 30
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 91
22457: PUSH
22458: LD_VAR 0 1
22462: PUSH
22463: LD_INT 18
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: LIST
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: LIST
22475: PPUSH
22476: CALL_OW 69
22480: NOT
22481: IFFALSE 22557
22483: PUSH
22484: LD_INT 22
22486: PUSH
22487: LD_VAR 0 16
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 2
22498: PUSH
22499: LD_INT 30
22501: PUSH
22502: LD_INT 32
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 30
22511: PUSH
22512: LD_INT 33
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 91
22526: PUSH
22527: LD_VAR 0 1
22531: PUSH
22532: LD_INT 12
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: LIST
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: LIST
22544: PUSH
22545: EMPTY
22546: LIST
22547: PPUSH
22548: CALL_OW 69
22552: PUSH
22553: LD_INT 2
22555: GREATER
22556: AND
22557: IFFALSE 22580
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22559: LD_ADDR_VAR 0 18
22563: PUSH
22564: LD_INT 11
22566: PUSH
22567: LD_INT 30
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_VAR 0 12
22578: ARRAY
22579: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22580: LD_VAR 0 18
22584: NOT
22585: IFFALSE 22605
22587: PUSH
22588: LD_INT 40
22590: PPUSH
22591: LD_VAR 0 16
22595: PPUSH
22596: CALL_OW 321
22600: PUSH
22601: LD_INT 2
22603: EQUAL
22604: AND
22605: IFFALSE 22641
22607: PUSH
22608: LD_INT 7
22610: PUSH
22611: LD_VAR 0 5
22615: IN
22616: IFTRUE 22628
22618: PUSH
22619: LD_INT 28
22621: PUSH
22622: LD_VAR 0 5
22626: IN
22627: OR
22628: IFTRUE 22640
22630: PUSH
22631: LD_INT 45
22633: PUSH
22634: LD_VAR 0 5
22638: IN
22639: OR
22640: AND
22641: IFFALSE 22895
// begin hex := GetHexInfo ( x , y ) ;
22643: LD_ADDR_VAR 0 4
22647: PUSH
22648: LD_VAR 0 10
22652: PPUSH
22653: LD_VAR 0 11
22657: PPUSH
22658: CALL_OW 546
22662: ST_TO_ADDR
// if hex [ 1 ] then
22663: LD_VAR 0 4
22667: PUSH
22668: LD_INT 1
22670: ARRAY
22671: IFFALSE 22675
// exit ;
22673: GO 23082
// height := hex [ 2 ] ;
22675: LD_ADDR_VAR 0 15
22679: PUSH
22680: LD_VAR 0 4
22684: PUSH
22685: LD_INT 2
22687: ARRAY
22688: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22689: LD_ADDR_VAR 0 14
22693: PUSH
22694: LD_INT 0
22696: PUSH
22697: LD_INT 2
22699: PUSH
22700: LD_INT 3
22702: PUSH
22703: LD_INT 5
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: ST_TO_ADDR
// for i in tmp do
22712: LD_ADDR_VAR 0 8
22716: PUSH
22717: LD_VAR 0 14
22721: PUSH
22722: FOR_IN
22723: IFFALSE 22893
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22725: LD_ADDR_VAR 0 9
22729: PUSH
22730: LD_VAR 0 10
22734: PPUSH
22735: LD_VAR 0 8
22739: PPUSH
22740: LD_INT 5
22742: PPUSH
22743: CALL_OW 272
22747: PUSH
22748: LD_VAR 0 11
22752: PPUSH
22753: LD_VAR 0 8
22757: PPUSH
22758: LD_INT 5
22760: PPUSH
22761: CALL_OW 273
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22770: LD_VAR 0 9
22774: PUSH
22775: LD_INT 1
22777: ARRAY
22778: PPUSH
22779: LD_VAR 0 9
22783: PUSH
22784: LD_INT 2
22786: ARRAY
22787: PPUSH
22788: CALL_OW 488
22792: IFFALSE 22891
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22794: LD_ADDR_VAR 0 4
22798: PUSH
22799: LD_VAR 0 9
22803: PUSH
22804: LD_INT 1
22806: ARRAY
22807: PPUSH
22808: LD_VAR 0 9
22812: PUSH
22813: LD_INT 2
22815: ARRAY
22816: PPUSH
22817: CALL_OW 546
22821: ST_TO_ADDR
// if hex [ 1 ] then
22822: LD_VAR 0 4
22826: PUSH
22827: LD_INT 1
22829: ARRAY
22830: IFFALSE 22834
// continue ;
22832: GO 22722
// h := hex [ 2 ] ;
22834: LD_ADDR_VAR 0 13
22838: PUSH
22839: LD_VAR 0 4
22843: PUSH
22844: LD_INT 2
22846: ARRAY
22847: ST_TO_ADDR
// if h + 7 < height then
22848: LD_VAR 0 13
22852: PUSH
22853: LD_INT 7
22855: PLUS
22856: PUSH
22857: LD_VAR 0 15
22861: LESS
22862: IFFALSE 22891
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22864: LD_ADDR_VAR 0 18
22868: PUSH
22869: LD_INT 7
22871: PUSH
22872: LD_INT 28
22874: PUSH
22875: LD_INT 45
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: PUSH
22883: LD_VAR 0 12
22887: ARRAY
22888: ST_TO_ADDR
// break ;
22889: GO 22893
// end ; end ; end ;
22891: GO 22722
22893: POP
22894: POP
// end ; if not weapon then
22895: LD_VAR 0 18
22899: NOT
22900: IFFALSE 22960
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22902: LD_ADDR_VAR 0 5
22906: PUSH
22907: LD_VAR 0 5
22911: PUSH
22912: LD_INT 11
22914: PUSH
22915: LD_INT 30
22917: PUSH
22918: LD_INT 49
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: LIST
22925: DIFF
22926: ST_TO_ADDR
// if not list then
22927: LD_VAR 0 5
22931: NOT
22932: IFFALSE 22936
// exit ;
22934: GO 23082
// weapon := list [ rand ( 1 , list ) ] ;
22936: LD_ADDR_VAR 0 18
22940: PUSH
22941: LD_VAR 0 5
22945: PUSH
22946: LD_INT 1
22948: PPUSH
22949: LD_VAR 0 5
22953: PPUSH
22954: CALL_OW 12
22958: ARRAY
22959: ST_TO_ADDR
// end ; if weapon then
22960: LD_VAR 0 18
22964: IFFALSE 23082
// begin tmp := CostOfWeapon ( weapon ) ;
22966: LD_ADDR_VAR 0 14
22970: PUSH
22971: LD_VAR 0 18
22975: PPUSH
22976: CALL_OW 451
22980: ST_TO_ADDR
// j := GetBase ( tower ) ;
22981: LD_ADDR_VAR 0 9
22985: PUSH
22986: LD_VAR 0 1
22990: PPUSH
22991: CALL_OW 274
22995: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22996: LD_VAR 0 9
23000: PPUSH
23001: LD_INT 1
23003: PPUSH
23004: CALL_OW 275
23008: PUSH
23009: LD_VAR 0 14
23013: PUSH
23014: LD_INT 1
23016: ARRAY
23017: GREATEREQUAL
23018: IFFALSE 23044
23020: PUSH
23021: LD_VAR 0 9
23025: PPUSH
23026: LD_INT 2
23028: PPUSH
23029: CALL_OW 275
23033: PUSH
23034: LD_VAR 0 14
23038: PUSH
23039: LD_INT 2
23041: ARRAY
23042: GREATEREQUAL
23043: AND
23044: IFFALSE 23070
23046: PUSH
23047: LD_VAR 0 9
23051: PPUSH
23052: LD_INT 3
23054: PPUSH
23055: CALL_OW 275
23059: PUSH
23060: LD_VAR 0 14
23064: PUSH
23065: LD_INT 3
23067: ARRAY
23068: GREATEREQUAL
23069: AND
23070: IFFALSE 23082
// result := weapon ;
23072: LD_ADDR_VAR 0 3
23076: PUSH
23077: LD_VAR 0 18
23081: ST_TO_ADDR
// end ; end ;
23082: LD_VAR 0 3
23086: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23087: LD_INT 0
23089: PPUSH
23090: PPUSH
// result := true ;
23091: LD_ADDR_VAR 0 3
23095: PUSH
23096: LD_INT 1
23098: ST_TO_ADDR
// if array1 = array2 then
23099: LD_VAR 0 1
23103: PUSH
23104: LD_VAR 0 2
23108: EQUAL
23109: IFFALSE 23169
// begin for i = 1 to array1 do
23111: LD_ADDR_VAR 0 4
23115: PUSH
23116: DOUBLE
23117: LD_INT 1
23119: DEC
23120: ST_TO_ADDR
23121: LD_VAR 0 1
23125: PUSH
23126: FOR_TO
23127: IFFALSE 23165
// if array1 [ i ] <> array2 [ i ] then
23129: LD_VAR 0 1
23133: PUSH
23134: LD_VAR 0 4
23138: ARRAY
23139: PUSH
23140: LD_VAR 0 2
23144: PUSH
23145: LD_VAR 0 4
23149: ARRAY
23150: NONEQUAL
23151: IFFALSE 23163
// begin result := false ;
23153: LD_ADDR_VAR 0 3
23157: PUSH
23158: LD_INT 0
23160: ST_TO_ADDR
// break ;
23161: GO 23165
// end ;
23163: GO 23126
23165: POP
23166: POP
// end else
23167: GO 23177
// result := false ;
23169: LD_ADDR_VAR 0 3
23173: PUSH
23174: LD_INT 0
23176: ST_TO_ADDR
// end ;
23177: LD_VAR 0 3
23181: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
23182: LD_INT 0
23184: PPUSH
23185: PPUSH
// if not array1 or not array2 then
23186: LD_VAR 0 1
23190: NOT
23191: IFTRUE 23200
23193: PUSH
23194: LD_VAR 0 2
23198: NOT
23199: OR
23200: IFFALSE 23204
// exit ;
23202: GO 23268
// result := true ;
23204: LD_ADDR_VAR 0 3
23208: PUSH
23209: LD_INT 1
23211: ST_TO_ADDR
// for i = 1 to array1 do
23212: LD_ADDR_VAR 0 4
23216: PUSH
23217: DOUBLE
23218: LD_INT 1
23220: DEC
23221: ST_TO_ADDR
23222: LD_VAR 0 1
23226: PUSH
23227: FOR_TO
23228: IFFALSE 23266
// if array1 [ i ] <> array2 [ i ] then
23230: LD_VAR 0 1
23234: PUSH
23235: LD_VAR 0 4
23239: ARRAY
23240: PUSH
23241: LD_VAR 0 2
23245: PUSH
23246: LD_VAR 0 4
23250: ARRAY
23251: NONEQUAL
23252: IFFALSE 23264
// begin result := false ;
23254: LD_ADDR_VAR 0 3
23258: PUSH
23259: LD_INT 0
23261: ST_TO_ADDR
// break ;
23262: GO 23266
// end ;
23264: GO 23227
23266: POP
23267: POP
// end ;
23268: LD_VAR 0 3
23272: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23273: LD_INT 0
23275: PPUSH
23276: PPUSH
23277: PPUSH
// pom := GetBase ( fac ) ;
23278: LD_ADDR_VAR 0 5
23282: PUSH
23283: LD_VAR 0 1
23287: PPUSH
23288: CALL_OW 274
23292: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23293: LD_ADDR_VAR 0 4
23297: PUSH
23298: LD_VAR 0 2
23302: PUSH
23303: LD_INT 1
23305: ARRAY
23306: PPUSH
23307: LD_VAR 0 2
23311: PUSH
23312: LD_INT 2
23314: ARRAY
23315: PPUSH
23316: LD_VAR 0 2
23320: PUSH
23321: LD_INT 3
23323: ARRAY
23324: PPUSH
23325: LD_VAR 0 2
23329: PUSH
23330: LD_INT 4
23332: ARRAY
23333: PPUSH
23334: CALL_OW 449
23338: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23339: LD_ADDR_VAR 0 3
23343: PUSH
23344: LD_VAR 0 5
23348: PPUSH
23349: LD_INT 1
23351: PPUSH
23352: CALL_OW 275
23356: PUSH
23357: LD_VAR 0 4
23361: PUSH
23362: LD_INT 1
23364: ARRAY
23365: GREATEREQUAL
23366: IFFALSE 23392
23368: PUSH
23369: LD_VAR 0 5
23373: PPUSH
23374: LD_INT 2
23376: PPUSH
23377: CALL_OW 275
23381: PUSH
23382: LD_VAR 0 4
23386: PUSH
23387: LD_INT 2
23389: ARRAY
23390: GREATEREQUAL
23391: AND
23392: IFFALSE 23418
23394: PUSH
23395: LD_VAR 0 5
23399: PPUSH
23400: LD_INT 3
23402: PPUSH
23403: CALL_OW 275
23407: PUSH
23408: LD_VAR 0 4
23412: PUSH
23413: LD_INT 3
23415: ARRAY
23416: GREATEREQUAL
23417: AND
23418: ST_TO_ADDR
// end ;
23419: LD_VAR 0 3
23423: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23424: LD_INT 0
23426: PPUSH
23427: PPUSH
23428: PPUSH
23429: PPUSH
// pom := GetBase ( building ) ;
23430: LD_ADDR_VAR 0 3
23434: PUSH
23435: LD_VAR 0 1
23439: PPUSH
23440: CALL_OW 274
23444: ST_TO_ADDR
// if not pom then
23445: LD_VAR 0 3
23449: NOT
23450: IFFALSE 23454
// exit ;
23452: GO 23628
// btype := GetBType ( building ) ;
23454: LD_ADDR_VAR 0 5
23458: PUSH
23459: LD_VAR 0 1
23463: PPUSH
23464: CALL_OW 266
23468: ST_TO_ADDR
// if btype = b_armoury then
23469: LD_VAR 0 5
23473: PUSH
23474: LD_INT 4
23476: EQUAL
23477: IFFALSE 23487
// btype := b_barracks ;
23479: LD_ADDR_VAR 0 5
23483: PUSH
23484: LD_INT 5
23486: ST_TO_ADDR
// if btype = b_depot then
23487: LD_VAR 0 5
23491: PUSH
23492: LD_INT 0
23494: EQUAL
23495: IFFALSE 23505
// btype := b_warehouse ;
23497: LD_ADDR_VAR 0 5
23501: PUSH
23502: LD_INT 1
23504: ST_TO_ADDR
// if btype = b_workshop then
23505: LD_VAR 0 5
23509: PUSH
23510: LD_INT 2
23512: EQUAL
23513: IFFALSE 23523
// btype := b_factory ;
23515: LD_ADDR_VAR 0 5
23519: PUSH
23520: LD_INT 3
23522: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23523: LD_ADDR_VAR 0 4
23527: PUSH
23528: LD_VAR 0 5
23532: PPUSH
23533: LD_VAR 0 1
23537: PPUSH
23538: CALL_OW 248
23542: PPUSH
23543: CALL_OW 450
23547: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23548: LD_ADDR_VAR 0 2
23552: PUSH
23553: LD_VAR 0 3
23557: PPUSH
23558: LD_INT 1
23560: PPUSH
23561: CALL_OW 275
23565: PUSH
23566: LD_VAR 0 4
23570: PUSH
23571: LD_INT 1
23573: ARRAY
23574: GREATEREQUAL
23575: IFFALSE 23601
23577: PUSH
23578: LD_VAR 0 3
23582: PPUSH
23583: LD_INT 2
23585: PPUSH
23586: CALL_OW 275
23590: PUSH
23591: LD_VAR 0 4
23595: PUSH
23596: LD_INT 2
23598: ARRAY
23599: GREATEREQUAL
23600: AND
23601: IFFALSE 23627
23603: PUSH
23604: LD_VAR 0 3
23608: PPUSH
23609: LD_INT 3
23611: PPUSH
23612: CALL_OW 275
23616: PUSH
23617: LD_VAR 0 4
23621: PUSH
23622: LD_INT 3
23624: ARRAY
23625: GREATEREQUAL
23626: AND
23627: ST_TO_ADDR
// end ;
23628: LD_VAR 0 2
23632: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23633: LD_INT 0
23635: PPUSH
23636: PPUSH
23637: PPUSH
// pom := GetBase ( building ) ;
23638: LD_ADDR_VAR 0 4
23642: PUSH
23643: LD_VAR 0 1
23647: PPUSH
23648: CALL_OW 274
23652: ST_TO_ADDR
// if not pom then
23653: LD_VAR 0 4
23657: NOT
23658: IFFALSE 23662
// exit ;
23660: GO 23767
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23662: LD_ADDR_VAR 0 5
23666: PUSH
23667: LD_VAR 0 2
23671: PPUSH
23672: LD_VAR 0 1
23676: PPUSH
23677: CALL_OW 248
23681: PPUSH
23682: CALL_OW 450
23686: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23687: LD_ADDR_VAR 0 3
23691: PUSH
23692: LD_VAR 0 4
23696: PPUSH
23697: LD_INT 1
23699: PPUSH
23700: CALL_OW 275
23704: PUSH
23705: LD_VAR 0 5
23709: PUSH
23710: LD_INT 1
23712: ARRAY
23713: GREATEREQUAL
23714: IFFALSE 23740
23716: PUSH
23717: LD_VAR 0 4
23721: PPUSH
23722: LD_INT 2
23724: PPUSH
23725: CALL_OW 275
23729: PUSH
23730: LD_VAR 0 5
23734: PUSH
23735: LD_INT 2
23737: ARRAY
23738: GREATEREQUAL
23739: AND
23740: IFFALSE 23766
23742: PUSH
23743: LD_VAR 0 4
23747: PPUSH
23748: LD_INT 3
23750: PPUSH
23751: CALL_OW 275
23755: PUSH
23756: LD_VAR 0 5
23760: PUSH
23761: LD_INT 3
23763: ARRAY
23764: GREATEREQUAL
23765: AND
23766: ST_TO_ADDR
// end ;
23767: LD_VAR 0 3
23771: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23772: LD_INT 0
23774: PPUSH
23775: PPUSH
23776: PPUSH
23777: PPUSH
23778: PPUSH
23779: PPUSH
23780: PPUSH
23781: PPUSH
23782: PPUSH
23783: PPUSH
23784: PPUSH
// result := false ;
23785: LD_ADDR_VAR 0 8
23789: PUSH
23790: LD_INT 0
23792: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23793: LD_VAR 0 5
23797: NOT
23798: IFTRUE 23807
23800: PUSH
23801: LD_VAR 0 1
23805: NOT
23806: OR
23807: IFTRUE 23816
23809: PUSH
23810: LD_VAR 0 2
23814: NOT
23815: OR
23816: IFTRUE 23825
23818: PUSH
23819: LD_VAR 0 3
23823: NOT
23824: OR
23825: IFFALSE 23829
// exit ;
23827: GO 24655
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23829: LD_ADDR_VAR 0 14
23833: PUSH
23834: LD_VAR 0 1
23838: PPUSH
23839: LD_VAR 0 2
23843: PPUSH
23844: LD_VAR 0 3
23848: PPUSH
23849: LD_VAR 0 4
23853: PPUSH
23854: LD_VAR 0 5
23858: PUSH
23859: LD_INT 1
23861: ARRAY
23862: PPUSH
23863: CALL_OW 248
23867: PPUSH
23868: LD_INT 0
23870: PPUSH
23871: CALL 25936 0 6
23875: ST_TO_ADDR
// if not hexes then
23876: LD_VAR 0 14
23880: NOT
23881: IFFALSE 23885
// exit ;
23883: GO 24655
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23885: LD_ADDR_VAR 0 17
23889: PUSH
23890: LD_VAR 0 5
23894: PPUSH
23895: LD_INT 22
23897: PUSH
23898: LD_VAR 0 13
23902: PPUSH
23903: CALL_OW 255
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 2
23914: PUSH
23915: LD_INT 30
23917: PUSH
23918: LD_INT 0
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 30
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: LIST
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PPUSH
23944: CALL_OW 72
23948: ST_TO_ADDR
// for i = 1 to hexes do
23949: LD_ADDR_VAR 0 9
23953: PUSH
23954: DOUBLE
23955: LD_INT 1
23957: DEC
23958: ST_TO_ADDR
23959: LD_VAR 0 14
23963: PUSH
23964: FOR_TO
23965: IFFALSE 24653
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23967: LD_ADDR_VAR 0 13
23971: PUSH
23972: LD_VAR 0 14
23976: PUSH
23977: LD_VAR 0 9
23981: ARRAY
23982: PUSH
23983: LD_INT 1
23985: ARRAY
23986: PPUSH
23987: LD_VAR 0 14
23991: PUSH
23992: LD_VAR 0 9
23996: ARRAY
23997: PUSH
23998: LD_INT 2
24000: ARRAY
24001: PPUSH
24002: CALL_OW 428
24006: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24007: LD_VAR 0 14
24011: PUSH
24012: LD_VAR 0 9
24016: ARRAY
24017: PUSH
24018: LD_INT 1
24020: ARRAY
24021: PPUSH
24022: LD_VAR 0 14
24026: PUSH
24027: LD_VAR 0 9
24031: ARRAY
24032: PUSH
24033: LD_INT 2
24035: ARRAY
24036: PPUSH
24037: CALL_OW 351
24041: IFTRUE 24080
24043: PUSH
24044: LD_VAR 0 14
24048: PUSH
24049: LD_VAR 0 9
24053: ARRAY
24054: PUSH
24055: LD_INT 1
24057: ARRAY
24058: PPUSH
24059: LD_VAR 0 14
24063: PUSH
24064: LD_VAR 0 9
24068: ARRAY
24069: PUSH
24070: LD_INT 2
24072: ARRAY
24073: PPUSH
24074: CALL_OW 488
24078: NOT
24079: OR
24080: IFTRUE 24097
24082: PUSH
24083: LD_VAR 0 13
24087: PPUSH
24088: CALL_OW 247
24092: PUSH
24093: LD_INT 3
24095: EQUAL
24096: OR
24097: IFFALSE 24103
// exit ;
24099: POP
24100: POP
24101: GO 24655
// if not tmp then
24103: LD_VAR 0 13
24107: NOT
24108: IFFALSE 24112
// continue ;
24110: GO 23964
// result := true ;
24112: LD_ADDR_VAR 0 8
24116: PUSH
24117: LD_INT 1
24119: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
24120: LD_VAR 0 6
24124: IFFALSE 24141
24126: PUSH
24127: LD_VAR 0 13
24131: PPUSH
24132: CALL_OW 247
24136: PUSH
24137: LD_INT 2
24139: EQUAL
24140: AND
24141: IFFALSE 24158
24143: PUSH
24144: LD_VAR 0 13
24148: PPUSH
24149: CALL_OW 263
24153: PUSH
24154: LD_INT 1
24156: EQUAL
24157: AND
24158: IFFALSE 24322
// begin if IsDrivenBy ( tmp ) then
24160: LD_VAR 0 13
24164: PPUSH
24165: CALL_OW 311
24169: IFFALSE 24173
// continue ;
24171: GO 23964
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
24173: LD_VAR 0 6
24177: PPUSH
24178: LD_INT 3
24180: PUSH
24181: LD_INT 60
24183: PUSH
24184: EMPTY
24185: LIST
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 3
24193: PUSH
24194: LD_INT 55
24196: PUSH
24197: EMPTY
24198: LIST
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PPUSH
24208: CALL_OW 72
24212: IFFALSE 24320
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
24214: LD_ADDR_VAR 0 18
24218: PUSH
24219: LD_VAR 0 6
24223: PPUSH
24224: LD_INT 3
24226: PUSH
24227: LD_INT 60
24229: PUSH
24230: EMPTY
24231: LIST
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 3
24239: PUSH
24240: LD_INT 55
24242: PUSH
24243: EMPTY
24244: LIST
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PPUSH
24254: CALL_OW 72
24258: PUSH
24259: LD_INT 1
24261: ARRAY
24262: ST_TO_ADDR
// if IsInUnit ( driver ) then
24263: LD_VAR 0 18
24267: PPUSH
24268: CALL_OW 310
24272: IFFALSE 24283
// ComExit ( driver ) ;
24274: LD_VAR 0 18
24278: PPUSH
24279: CALL 49936 0 1
// AddComEnterUnit ( driver , tmp ) ;
24283: LD_VAR 0 18
24287: PPUSH
24288: LD_VAR 0 13
24292: PPUSH
24293: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
24297: LD_VAR 0 18
24301: PPUSH
24302: LD_VAR 0 7
24306: PPUSH
24307: CALL_OW 173
// AddComExitVehicle ( driver ) ;
24311: LD_VAR 0 18
24315: PPUSH
24316: CALL_OW 181
// end ; continue ;
24320: GO 23964
// end ; if not cleaners or not tmp in cleaners then
24322: LD_VAR 0 6
24326: NOT
24327: IFTRUE 24342
24329: PUSH
24330: LD_VAR 0 13
24334: PUSH
24335: LD_VAR 0 6
24339: IN
24340: NOT
24341: OR
24342: IFFALSE 24651
// begin if dep then
24344: LD_VAR 0 17
24348: IFFALSE 24484
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24350: LD_ADDR_VAR 0 16
24354: PUSH
24355: LD_VAR 0 17
24359: PUSH
24360: LD_INT 1
24362: ARRAY
24363: PPUSH
24364: CALL_OW 250
24368: PPUSH
24369: LD_VAR 0 17
24373: PUSH
24374: LD_INT 1
24376: ARRAY
24377: PPUSH
24378: CALL_OW 254
24382: PPUSH
24383: LD_INT 5
24385: PPUSH
24386: CALL_OW 272
24390: PUSH
24391: LD_VAR 0 17
24395: PUSH
24396: LD_INT 1
24398: ARRAY
24399: PPUSH
24400: CALL_OW 251
24404: PPUSH
24405: LD_VAR 0 17
24409: PUSH
24410: LD_INT 1
24412: ARRAY
24413: PPUSH
24414: CALL_OW 254
24418: PPUSH
24419: LD_INT 5
24421: PPUSH
24422: CALL_OW 273
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24431: LD_VAR 0 16
24435: PUSH
24436: LD_INT 1
24438: ARRAY
24439: PPUSH
24440: LD_VAR 0 16
24444: PUSH
24445: LD_INT 2
24447: ARRAY
24448: PPUSH
24449: CALL_OW 488
24453: IFFALSE 24484
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24455: LD_VAR 0 13
24459: PPUSH
24460: LD_VAR 0 16
24464: PUSH
24465: LD_INT 1
24467: ARRAY
24468: PPUSH
24469: LD_VAR 0 16
24473: PUSH
24474: LD_INT 2
24476: ARRAY
24477: PPUSH
24478: CALL_OW 111
// continue ;
24482: GO 23964
// end ; end ; r := GetDir ( tmp ) ;
24484: LD_ADDR_VAR 0 15
24488: PUSH
24489: LD_VAR 0 13
24493: PPUSH
24494: CALL_OW 254
24498: ST_TO_ADDR
// if r = 5 then
24499: LD_VAR 0 15
24503: PUSH
24504: LD_INT 5
24506: EQUAL
24507: IFFALSE 24517
// r := 0 ;
24509: LD_ADDR_VAR 0 15
24513: PUSH
24514: LD_INT 0
24516: ST_TO_ADDR
// for j = r to 5 do
24517: LD_ADDR_VAR 0 10
24521: PUSH
24522: DOUBLE
24523: LD_VAR 0 15
24527: DEC
24528: ST_TO_ADDR
24529: LD_INT 5
24531: PUSH
24532: FOR_TO
24533: IFFALSE 24649
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24535: LD_ADDR_VAR 0 11
24539: PUSH
24540: LD_VAR 0 13
24544: PPUSH
24545: CALL_OW 250
24549: PPUSH
24550: LD_VAR 0 10
24554: PPUSH
24555: LD_INT 2
24557: PPUSH
24558: CALL_OW 272
24562: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24563: LD_ADDR_VAR 0 12
24567: PUSH
24568: LD_VAR 0 13
24572: PPUSH
24573: CALL_OW 251
24577: PPUSH
24578: LD_VAR 0 10
24582: PPUSH
24583: LD_INT 2
24585: PPUSH
24586: CALL_OW 273
24590: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24591: LD_VAR 0 11
24595: PPUSH
24596: LD_VAR 0 12
24600: PPUSH
24601: CALL_OW 488
24605: IFFALSE 24624
24607: PUSH
24608: LD_VAR 0 11
24612: PPUSH
24613: LD_VAR 0 12
24617: PPUSH
24618: CALL_OW 428
24622: NOT
24623: AND
24624: IFFALSE 24647
// begin ComMoveXY ( tmp , _x , _y ) ;
24626: LD_VAR 0 13
24630: PPUSH
24631: LD_VAR 0 11
24635: PPUSH
24636: LD_VAR 0 12
24640: PPUSH
24641: CALL_OW 111
// break ;
24645: GO 24649
// end ; end ;
24647: GO 24532
24649: POP
24650: POP
// end ; end ;
24651: GO 23964
24653: POP
24654: POP
// end ;
24655: LD_VAR 0 8
24659: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24660: LD_INT 0
24662: PPUSH
// result := true ;
24663: LD_ADDR_VAR 0 3
24667: PUSH
24668: LD_INT 1
24670: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24671: LD_VAR 0 2
24675: PUSH
24676: LD_INT 24
24678: DOUBLE
24679: EQUAL
24680: IFTRUE 24690
24682: LD_INT 33
24684: DOUBLE
24685: EQUAL
24686: IFTRUE 24690
24688: GO 24715
24690: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24691: LD_ADDR_VAR 0 3
24695: PUSH
24696: LD_INT 32
24698: PPUSH
24699: LD_VAR 0 1
24703: PPUSH
24704: CALL_OW 321
24708: PUSH
24709: LD_INT 2
24711: EQUAL
24712: ST_TO_ADDR
24713: GO 25031
24715: LD_INT 20
24717: DOUBLE
24718: EQUAL
24719: IFTRUE 24723
24721: GO 24748
24723: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24724: LD_ADDR_VAR 0 3
24728: PUSH
24729: LD_INT 6
24731: PPUSH
24732: LD_VAR 0 1
24736: PPUSH
24737: CALL_OW 321
24741: PUSH
24742: LD_INT 2
24744: EQUAL
24745: ST_TO_ADDR
24746: GO 25031
24748: LD_INT 22
24750: DOUBLE
24751: EQUAL
24752: IFTRUE 24762
24754: LD_INT 36
24756: DOUBLE
24757: EQUAL
24758: IFTRUE 24762
24760: GO 24787
24762: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24763: LD_ADDR_VAR 0 3
24767: PUSH
24768: LD_INT 15
24770: PPUSH
24771: LD_VAR 0 1
24775: PPUSH
24776: CALL_OW 321
24780: PUSH
24781: LD_INT 2
24783: EQUAL
24784: ST_TO_ADDR
24785: GO 25031
24787: LD_INT 30
24789: DOUBLE
24790: EQUAL
24791: IFTRUE 24795
24793: GO 24820
24795: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24796: LD_ADDR_VAR 0 3
24800: PUSH
24801: LD_INT 20
24803: PPUSH
24804: LD_VAR 0 1
24808: PPUSH
24809: CALL_OW 321
24813: PUSH
24814: LD_INT 2
24816: EQUAL
24817: ST_TO_ADDR
24818: GO 25031
24820: LD_INT 28
24822: DOUBLE
24823: EQUAL
24824: IFTRUE 24834
24826: LD_INT 21
24828: DOUBLE
24829: EQUAL
24830: IFTRUE 24834
24832: GO 24859
24834: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24835: LD_ADDR_VAR 0 3
24839: PUSH
24840: LD_INT 21
24842: PPUSH
24843: LD_VAR 0 1
24847: PPUSH
24848: CALL_OW 321
24852: PUSH
24853: LD_INT 2
24855: EQUAL
24856: ST_TO_ADDR
24857: GO 25031
24859: LD_INT 16
24861: DOUBLE
24862: EQUAL
24863: IFTRUE 24867
24865: GO 24892
24867: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24868: LD_ADDR_VAR 0 3
24872: PUSH
24873: LD_INT 84
24875: PPUSH
24876: LD_VAR 0 1
24880: PPUSH
24881: CALL_OW 321
24885: PUSH
24886: LD_INT 2
24888: EQUAL
24889: ST_TO_ADDR
24890: GO 25031
24892: LD_INT 19
24894: DOUBLE
24895: EQUAL
24896: IFTRUE 24906
24898: LD_INT 23
24900: DOUBLE
24901: EQUAL
24902: IFTRUE 24906
24904: GO 24931
24906: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24907: LD_ADDR_VAR 0 3
24911: PUSH
24912: LD_INT 83
24914: PPUSH
24915: LD_VAR 0 1
24919: PPUSH
24920: CALL_OW 321
24924: PUSH
24925: LD_INT 2
24927: EQUAL
24928: ST_TO_ADDR
24929: GO 25031
24931: LD_INT 17
24933: DOUBLE
24934: EQUAL
24935: IFTRUE 24939
24937: GO 24964
24939: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24940: LD_ADDR_VAR 0 3
24944: PUSH
24945: LD_INT 39
24947: PPUSH
24948: LD_VAR 0 1
24952: PPUSH
24953: CALL_OW 321
24957: PUSH
24958: LD_INT 2
24960: EQUAL
24961: ST_TO_ADDR
24962: GO 25031
24964: LD_INT 18
24966: DOUBLE
24967: EQUAL
24968: IFTRUE 24972
24970: GO 24997
24972: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24973: LD_ADDR_VAR 0 3
24977: PUSH
24978: LD_INT 40
24980: PPUSH
24981: LD_VAR 0 1
24985: PPUSH
24986: CALL_OW 321
24990: PUSH
24991: LD_INT 2
24993: EQUAL
24994: ST_TO_ADDR
24995: GO 25031
24997: LD_INT 27
24999: DOUBLE
25000: EQUAL
25001: IFTRUE 25005
25003: GO 25030
25005: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
25006: LD_ADDR_VAR 0 3
25010: PUSH
25011: LD_INT 35
25013: PPUSH
25014: LD_VAR 0 1
25018: PPUSH
25019: CALL_OW 321
25023: PUSH
25024: LD_INT 2
25026: EQUAL
25027: ST_TO_ADDR
25028: GO 25031
25030: POP
// end ;
25031: LD_VAR 0 3
25035: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
25036: LD_INT 0
25038: PPUSH
25039: PPUSH
25040: PPUSH
25041: PPUSH
25042: PPUSH
25043: PPUSH
25044: PPUSH
25045: PPUSH
25046: PPUSH
25047: PPUSH
25048: PPUSH
// result := false ;
25049: LD_ADDR_VAR 0 6
25053: PUSH
25054: LD_INT 0
25056: ST_TO_ADDR
// if btype = b_depot then
25057: LD_VAR 0 2
25061: PUSH
25062: LD_INT 0
25064: EQUAL
25065: IFFALSE 25077
// begin result := true ;
25067: LD_ADDR_VAR 0 6
25071: PUSH
25072: LD_INT 1
25074: ST_TO_ADDR
// exit ;
25075: GO 25931
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25077: LD_VAR 0 1
25081: NOT
25082: IFTRUE 25107
25084: PUSH
25085: LD_VAR 0 1
25089: PPUSH
25090: CALL_OW 266
25094: PUSH
25095: LD_INT 0
25097: PUSH
25098: LD_INT 1
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: IN
25105: NOT
25106: OR
25107: IFTRUE 25116
25109: PUSH
25110: LD_VAR 0 2
25114: NOT
25115: OR
25116: IFTRUE 25152
25118: PUSH
25119: LD_VAR 0 5
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: LD_INT 3
25135: PUSH
25136: LD_INT 4
25138: PUSH
25139: LD_INT 5
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: IN
25150: NOT
25151: OR
25152: IFTRUE 25171
25154: PUSH
25155: LD_VAR 0 3
25159: PPUSH
25160: LD_VAR 0 4
25164: PPUSH
25165: CALL_OW 488
25169: NOT
25170: OR
25171: IFFALSE 25175
// exit ;
25173: GO 25931
// side := GetSide ( depot ) ;
25175: LD_ADDR_VAR 0 9
25179: PUSH
25180: LD_VAR 0 1
25184: PPUSH
25185: CALL_OW 255
25189: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
25190: LD_VAR 0 9
25194: PPUSH
25195: LD_VAR 0 2
25199: PPUSH
25200: CALL 24660 0 2
25204: NOT
25205: IFFALSE 25209
// exit ;
25207: GO 25931
// pom := GetBase ( depot ) ;
25209: LD_ADDR_VAR 0 10
25213: PUSH
25214: LD_VAR 0 1
25218: PPUSH
25219: CALL_OW 274
25223: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25224: LD_ADDR_VAR 0 11
25228: PUSH
25229: LD_VAR 0 2
25233: PPUSH
25234: LD_VAR 0 1
25238: PPUSH
25239: CALL_OW 248
25243: PPUSH
25244: CALL_OW 450
25248: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25249: LD_VAR 0 10
25253: PPUSH
25254: LD_INT 1
25256: PPUSH
25257: CALL_OW 275
25261: PUSH
25262: LD_VAR 0 11
25266: PUSH
25267: LD_INT 1
25269: ARRAY
25270: GREATEREQUAL
25271: IFFALSE 25297
25273: PUSH
25274: LD_VAR 0 10
25278: PPUSH
25279: LD_INT 2
25281: PPUSH
25282: CALL_OW 275
25286: PUSH
25287: LD_VAR 0 11
25291: PUSH
25292: LD_INT 2
25294: ARRAY
25295: GREATEREQUAL
25296: AND
25297: IFFALSE 25323
25299: PUSH
25300: LD_VAR 0 10
25304: PPUSH
25305: LD_INT 3
25307: PPUSH
25308: CALL_OW 275
25312: PUSH
25313: LD_VAR 0 11
25317: PUSH
25318: LD_INT 3
25320: ARRAY
25321: GREATEREQUAL
25322: AND
25323: NOT
25324: IFFALSE 25328
// exit ;
25326: GO 25931
// if GetBType ( depot ) = b_depot then
25328: LD_VAR 0 1
25332: PPUSH
25333: CALL_OW 266
25337: PUSH
25338: LD_INT 0
25340: EQUAL
25341: IFFALSE 25353
// dist := 28 else
25343: LD_ADDR_VAR 0 14
25347: PUSH
25348: LD_INT 28
25350: ST_TO_ADDR
25351: GO 25361
// dist := 36 ;
25353: LD_ADDR_VAR 0 14
25357: PUSH
25358: LD_INT 36
25360: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25361: LD_VAR 0 1
25365: PPUSH
25366: LD_VAR 0 3
25370: PPUSH
25371: LD_VAR 0 4
25375: PPUSH
25376: CALL_OW 297
25380: PUSH
25381: LD_VAR 0 14
25385: GREATER
25386: IFFALSE 25390
// exit ;
25388: GO 25931
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25390: LD_ADDR_VAR 0 12
25394: PUSH
25395: LD_VAR 0 2
25399: PPUSH
25400: LD_VAR 0 3
25404: PPUSH
25405: LD_VAR 0 4
25409: PPUSH
25410: LD_VAR 0 5
25414: PPUSH
25415: LD_VAR 0 1
25419: PPUSH
25420: CALL_OW 248
25424: PPUSH
25425: LD_INT 0
25427: PPUSH
25428: CALL 25936 0 6
25432: ST_TO_ADDR
// if not hexes then
25433: LD_VAR 0 12
25437: NOT
25438: IFFALSE 25442
// exit ;
25440: GO 25931
// hex := GetHexInfo ( x , y ) ;
25442: LD_ADDR_VAR 0 15
25446: PUSH
25447: LD_VAR 0 3
25451: PPUSH
25452: LD_VAR 0 4
25456: PPUSH
25457: CALL_OW 546
25461: ST_TO_ADDR
// if hex [ 1 ] then
25462: LD_VAR 0 15
25466: PUSH
25467: LD_INT 1
25469: ARRAY
25470: IFFALSE 25474
// exit ;
25472: GO 25931
// height := hex [ 2 ] ;
25474: LD_ADDR_VAR 0 13
25478: PUSH
25479: LD_VAR 0 15
25483: PUSH
25484: LD_INT 2
25486: ARRAY
25487: ST_TO_ADDR
// for i = 1 to hexes do
25488: LD_ADDR_VAR 0 7
25492: PUSH
25493: DOUBLE
25494: LD_INT 1
25496: DEC
25497: ST_TO_ADDR
25498: LD_VAR 0 12
25502: PUSH
25503: FOR_TO
25504: IFFALSE 25848
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25506: LD_VAR 0 12
25510: PUSH
25511: LD_VAR 0 7
25515: ARRAY
25516: PUSH
25517: LD_INT 1
25519: ARRAY
25520: PPUSH
25521: LD_VAR 0 12
25525: PUSH
25526: LD_VAR 0 7
25530: ARRAY
25531: PUSH
25532: LD_INT 2
25534: ARRAY
25535: PPUSH
25536: CALL_OW 488
25540: NOT
25541: IFTRUE 25583
25543: PUSH
25544: LD_VAR 0 12
25548: PUSH
25549: LD_VAR 0 7
25553: ARRAY
25554: PUSH
25555: LD_INT 1
25557: ARRAY
25558: PPUSH
25559: LD_VAR 0 12
25563: PUSH
25564: LD_VAR 0 7
25568: ARRAY
25569: PUSH
25570: LD_INT 2
25572: ARRAY
25573: PPUSH
25574: CALL_OW 428
25578: PUSH
25579: LD_INT 0
25581: GREATER
25582: OR
25583: IFTRUE 25621
25585: PUSH
25586: LD_VAR 0 12
25590: PUSH
25591: LD_VAR 0 7
25595: ARRAY
25596: PUSH
25597: LD_INT 1
25599: ARRAY
25600: PPUSH
25601: LD_VAR 0 12
25605: PUSH
25606: LD_VAR 0 7
25610: ARRAY
25611: PUSH
25612: LD_INT 2
25614: ARRAY
25615: PPUSH
25616: CALL_OW 351
25620: OR
25621: IFFALSE 25627
// exit ;
25623: POP
25624: POP
25625: GO 25931
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25627: LD_ADDR_VAR 0 8
25631: PUSH
25632: LD_VAR 0 12
25636: PUSH
25637: LD_VAR 0 7
25641: ARRAY
25642: PUSH
25643: LD_INT 1
25645: ARRAY
25646: PPUSH
25647: LD_VAR 0 12
25651: PUSH
25652: LD_VAR 0 7
25656: ARRAY
25657: PUSH
25658: LD_INT 2
25660: ARRAY
25661: PPUSH
25662: CALL_OW 546
25666: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25667: LD_VAR 0 8
25671: PUSH
25672: LD_INT 1
25674: ARRAY
25675: IFTRUE 25697
25677: PUSH
25678: LD_VAR 0 8
25682: PUSH
25683: LD_INT 2
25685: ARRAY
25686: PUSH
25687: LD_VAR 0 13
25691: PUSH
25692: LD_INT 2
25694: PLUS
25695: GREATER
25696: OR
25697: IFTRUE 25719
25699: PUSH
25700: LD_VAR 0 8
25704: PUSH
25705: LD_INT 2
25707: ARRAY
25708: PUSH
25709: LD_VAR 0 13
25713: PUSH
25714: LD_INT 2
25716: MINUS
25717: LESS
25718: OR
25719: IFTRUE 25787
25721: PUSH
25722: LD_VAR 0 8
25726: PUSH
25727: LD_INT 3
25729: ARRAY
25730: PUSH
25731: LD_INT 0
25733: PUSH
25734: LD_INT 8
25736: PUSH
25737: LD_INT 9
25739: PUSH
25740: LD_INT 10
25742: PUSH
25743: LD_INT 11
25745: PUSH
25746: LD_INT 12
25748: PUSH
25749: LD_INT 13
25751: PUSH
25752: LD_INT 16
25754: PUSH
25755: LD_INT 17
25757: PUSH
25758: LD_INT 18
25760: PUSH
25761: LD_INT 19
25763: PUSH
25764: LD_INT 20
25766: PUSH
25767: LD_INT 21
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: IN
25785: NOT
25786: OR
25787: IFTRUE 25800
25789: PUSH
25790: LD_VAR 0 8
25794: PUSH
25795: LD_INT 5
25797: ARRAY
25798: NOT
25799: OR
25800: IFTRUE 25840
25802: PUSH
25803: LD_VAR 0 8
25807: PUSH
25808: LD_INT 6
25810: ARRAY
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: LD_INT 2
25817: PUSH
25818: LD_INT 7
25820: PUSH
25821: LD_INT 9
25823: PUSH
25824: LD_INT 10
25826: PUSH
25827: LD_INT 11
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: IN
25838: NOT
25839: OR
25840: IFFALSE 25846
// exit ;
25842: POP
25843: POP
25844: GO 25931
// end ;
25846: GO 25503
25848: POP
25849: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25850: LD_VAR 0 9
25854: PPUSH
25855: LD_VAR 0 3
25859: PPUSH
25860: LD_VAR 0 4
25864: PPUSH
25865: LD_INT 20
25867: PPUSH
25868: CALL 17750 0 4
25872: PUSH
25873: LD_INT 4
25875: ARRAY
25876: IFFALSE 25880
// exit ;
25878: GO 25931
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25880: LD_VAR 0 2
25884: PUSH
25885: LD_INT 29
25887: PUSH
25888: LD_INT 30
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: IN
25895: IFFALSE 25919
25897: PUSH
25898: LD_VAR 0 3
25902: PPUSH
25903: LD_VAR 0 4
25907: PPUSH
25908: LD_VAR 0 9
25912: PPUSH
25913: CALL_OW 440
25917: NOT
25918: AND
25919: IFFALSE 25923
// exit ;
25921: GO 25931
// result := true ;
25923: LD_ADDR_VAR 0 6
25927: PUSH
25928: LD_INT 1
25930: ST_TO_ADDR
// end ;
25931: LD_VAR 0 6
25935: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25936: LD_INT 0
25938: PPUSH
25939: PPUSH
25940: PPUSH
25941: PPUSH
25942: PPUSH
25943: PPUSH
25944: PPUSH
25945: PPUSH
25946: PPUSH
25947: PPUSH
25948: PPUSH
25949: PPUSH
25950: PPUSH
25951: PPUSH
25952: PPUSH
25953: PPUSH
25954: PPUSH
25955: PPUSH
25956: PPUSH
25957: PPUSH
25958: PPUSH
25959: PPUSH
25960: PPUSH
25961: PPUSH
25962: PPUSH
25963: PPUSH
25964: PPUSH
25965: PPUSH
25966: PPUSH
25967: PPUSH
25968: PPUSH
25969: PPUSH
25970: PPUSH
25971: PPUSH
25972: PPUSH
25973: PPUSH
25974: PPUSH
25975: PPUSH
25976: PPUSH
25977: PPUSH
25978: PPUSH
25979: PPUSH
25980: PPUSH
25981: PPUSH
25982: PPUSH
25983: PPUSH
25984: PPUSH
25985: PPUSH
25986: PPUSH
25987: PPUSH
25988: PPUSH
25989: PPUSH
25990: PPUSH
25991: PPUSH
25992: PPUSH
25993: PPUSH
25994: PPUSH
25995: PPUSH
// result = [ ] ;
25996: LD_ADDR_VAR 0 7
26000: PUSH
26001: EMPTY
26002: ST_TO_ADDR
// temp_list = [ ] ;
26003: LD_ADDR_VAR 0 9
26007: PUSH
26008: EMPTY
26009: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26010: LD_VAR 0 4
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: LD_INT 2
26023: PUSH
26024: LD_INT 3
26026: PUSH
26027: LD_INT 4
26029: PUSH
26030: LD_INT 5
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: IN
26041: NOT
26042: IFTRUE 26085
26044: PUSH
26045: LD_VAR 0 1
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: LD_INT 1
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: IN
26060: IFFALSE 26084
26062: PUSH
26063: LD_VAR 0 5
26067: PUSH
26068: LD_INT 1
26070: PUSH
26071: LD_INT 2
26073: PUSH
26074: LD_INT 3
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: LIST
26081: IN
26082: NOT
26083: AND
26084: OR
26085: IFFALSE 26089
// exit ;
26087: GO 44488
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26089: LD_VAR 0 1
26093: PUSH
26094: LD_INT 6
26096: PUSH
26097: LD_INT 7
26099: PUSH
26100: LD_INT 8
26102: PUSH
26103: LD_INT 13
26105: PUSH
26106: LD_INT 12
26108: PUSH
26109: LD_INT 15
26111: PUSH
26112: LD_INT 11
26114: PUSH
26115: LD_INT 14
26117: PUSH
26118: LD_INT 10
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: IN
26132: IFFALSE 26142
// btype = b_lab ;
26134: LD_ADDR_VAR 0 1
26138: PUSH
26139: LD_INT 6
26141: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26142: LD_VAR 0 6
26146: PUSH
26147: LD_INT 0
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: LD_INT 2
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: LIST
26160: IN
26161: NOT
26162: IFTRUE 26230
26164: PUSH
26165: LD_VAR 0 1
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: LD_INT 1
26175: PUSH
26176: LD_INT 2
26178: PUSH
26179: LD_INT 3
26181: PUSH
26182: LD_INT 6
26184: PUSH
26185: LD_INT 36
26187: PUSH
26188: LD_INT 4
26190: PUSH
26191: LD_INT 5
26193: PUSH
26194: LD_INT 31
26196: PUSH
26197: LD_INT 32
26199: PUSH
26200: LD_INT 33
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: IN
26216: NOT
26217: IFFALSE 26229
26219: PUSH
26220: LD_VAR 0 6
26224: PUSH
26225: LD_INT 1
26227: EQUAL
26228: AND
26229: OR
26230: IFTRUE 26262
26232: PUSH
26233: LD_VAR 0 1
26237: PUSH
26238: LD_INT 2
26240: PUSH
26241: LD_INT 3
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: IN
26248: NOT
26249: IFFALSE 26261
26251: PUSH
26252: LD_VAR 0 6
26256: PUSH
26257: LD_INT 2
26259: EQUAL
26260: AND
26261: OR
26262: IFFALSE 26272
// mode = 0 ;
26264: LD_ADDR_VAR 0 6
26268: PUSH
26269: LD_INT 0
26271: ST_TO_ADDR
// case mode of 0 :
26272: LD_VAR 0 6
26276: PUSH
26277: LD_INT 0
26279: DOUBLE
26280: EQUAL
26281: IFTRUE 26285
26283: GO 37738
26285: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26286: LD_ADDR_VAR 0 11
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: LD_INT 0
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 0
26303: PUSH
26304: LD_INT 1
26306: NEG
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 1
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: LD_INT 1
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 1
26344: NEG
26345: PUSH
26346: LD_INT 0
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 1
26355: NEG
26356: PUSH
26357: LD_INT 1
26359: NEG
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 1
26367: NEG
26368: PUSH
26369: LD_INT 2
26371: NEG
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: LD_INT 2
26382: NEG
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 1
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: LD_INT 2
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 0
26411: PUSH
26412: LD_INT 2
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: LD_INT 3
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 0
26442: PUSH
26443: LD_INT 3
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 1
26452: NEG
26453: PUSH
26454: LD_INT 2
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26479: LD_ADDR_VAR 0 12
26483: PUSH
26484: LD_INT 0
26486: PUSH
26487: LD_INT 0
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 0
26496: PUSH
26497: LD_INT 1
26499: NEG
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 1
26507: PUSH
26508: LD_INT 0
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 1
26517: PUSH
26518: LD_INT 1
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 0
26527: PUSH
26528: LD_INT 1
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 1
26537: NEG
26538: PUSH
26539: LD_INT 0
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 1
26548: NEG
26549: PUSH
26550: LD_INT 1
26552: NEG
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 1
26560: PUSH
26561: LD_INT 1
26563: NEG
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 2
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 2
26581: PUSH
26582: LD_INT 1
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 1
26591: NEG
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 2
26602: NEG
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 2
26613: NEG
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 2
26625: NEG
26626: PUSH
26627: LD_INT 1
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 3
26636: NEG
26637: PUSH
26638: LD_INT 0
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 3
26647: NEG
26648: PUSH
26649: LD_INT 1
26651: NEG
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26675: LD_ADDR_VAR 0 13
26679: PUSH
26680: LD_INT 0
26682: PUSH
26683: LD_INT 0
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 0
26692: PUSH
26693: LD_INT 1
26695: NEG
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 1
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: LD_INT 1
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: LD_INT 1
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 1
26733: NEG
26734: PUSH
26735: LD_INT 0
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 1
26756: NEG
26757: PUSH
26758: LD_INT 2
26760: NEG
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 2
26768: PUSH
26769: LD_INT 1
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 2
26778: PUSH
26779: LD_INT 2
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 1
26788: PUSH
26789: LD_INT 2
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 2
26798: NEG
26799: PUSH
26800: LD_INT 1
26802: NEG
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 2
26810: NEG
26811: PUSH
26812: LD_INT 2
26814: NEG
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 2
26822: NEG
26823: PUSH
26824: LD_INT 3
26826: NEG
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 3
26834: NEG
26835: PUSH
26836: LD_INT 2
26838: NEG
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 3
26846: NEG
26847: PUSH
26848: LD_INT 3
26850: NEG
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26874: LD_ADDR_VAR 0 14
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: LD_INT 1
26894: NEG
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: LD_INT 0
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: LD_INT 1
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 1
26932: NEG
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 1
26943: NEG
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: LD_INT 2
26959: NEG
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 0
26967: PUSH
26968: LD_INT 2
26970: NEG
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 1
26978: PUSH
26979: LD_INT 1
26981: NEG
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 1
26989: PUSH
26990: LD_INT 2
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: LD_INT 2
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 1
27009: NEG
27010: PUSH
27011: LD_INT 1
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 1
27020: NEG
27021: PUSH
27022: LD_INT 3
27024: NEG
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: LD_INT 3
27035: NEG
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 1
27043: PUSH
27044: LD_INT 2
27046: NEG
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27070: LD_ADDR_VAR 0 15
27074: PUSH
27075: LD_INT 0
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: LD_INT 1
27090: NEG
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: NEG
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 1
27139: NEG
27140: PUSH
27141: LD_INT 1
27143: NEG
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 2
27162: PUSH
27163: LD_INT 0
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 2
27172: PUSH
27173: LD_INT 1
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: NEG
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 2
27193: NEG
27194: PUSH
27195: LD_INT 0
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 2
27204: NEG
27205: PUSH
27206: LD_INT 1
27208: NEG
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 2
27216: PUSH
27217: LD_INT 1
27219: NEG
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 3
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 3
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27263: LD_ADDR_VAR 0 16
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: LD_INT 1
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 0
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 1
27321: NEG
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 1
27332: NEG
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 1
27344: NEG
27345: PUSH
27346: LD_INT 2
27348: NEG
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 2
27356: PUSH
27357: LD_INT 1
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 2
27366: PUSH
27367: LD_INT 2
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 1
27376: PUSH
27377: LD_INT 2
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 2
27386: NEG
27387: PUSH
27388: LD_INT 1
27390: NEG
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 2
27398: NEG
27399: PUSH
27400: LD_INT 2
27402: NEG
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 3
27410: PUSH
27411: LD_INT 2
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 3
27420: PUSH
27421: LD_INT 3
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 2
27430: PUSH
27431: LD_INT 3
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27456: LD_ADDR_VAR 0 17
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: LD_INT 1
27476: NEG
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 1
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 0
27504: PUSH
27505: LD_INT 1
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 1
27514: NEG
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: PUSH
27527: LD_INT 1
27529: NEG
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: NEG
27538: PUSH
27539: LD_INT 2
27541: NEG
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: LD_INT 2
27552: NEG
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 1
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 2
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 2
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 2
27591: PUSH
27592: LD_INT 2
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 1
27601: PUSH
27602: LD_INT 2
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 0
27611: PUSH
27612: LD_INT 2
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 1
27621: NEG
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 2
27632: NEG
27633: PUSH
27634: LD_INT 0
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 2
27643: NEG
27644: PUSH
27645: LD_INT 1
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 2
27655: NEG
27656: PUSH
27657: LD_INT 2
27659: NEG
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27686: LD_ADDR_VAR 0 18
27690: PUSH
27691: LD_INT 0
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 0
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: LD_INT 1
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 0
27734: PUSH
27735: LD_INT 1
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: NEG
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 1
27767: NEG
27768: PUSH
27769: LD_INT 2
27771: NEG
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: LD_INT 2
27782: NEG
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 1
27790: PUSH
27791: LD_INT 1
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 2
27801: PUSH
27802: LD_INT 0
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 2
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: LD_INT 2
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 1
27831: PUSH
27832: LD_INT 2
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: LD_INT 2
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 1
27851: NEG
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 2
27862: NEG
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 2
27873: NEG
27874: PUSH
27875: LD_INT 1
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 2
27885: NEG
27886: PUSH
27887: LD_INT 2
27889: NEG
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27916: LD_ADDR_VAR 0 19
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: LD_INT 0
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: LD_INT 1
27936: NEG
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 1
27954: PUSH
27955: LD_INT 1
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: LD_INT 1
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 1
27974: NEG
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: NEG
27986: PUSH
27987: LD_INT 1
27989: NEG
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 1
27997: NEG
27998: PUSH
27999: LD_INT 2
28001: NEG
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: LD_INT 2
28012: NEG
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 1
28020: PUSH
28021: LD_INT 1
28023: NEG
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 2
28031: PUSH
28032: LD_INT 0
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 2
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 2
28051: PUSH
28052: LD_INT 2
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 1
28061: PUSH
28062: LD_INT 2
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 0
28071: PUSH
28072: LD_INT 2
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 1
28081: NEG
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 2
28092: NEG
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 2
28103: NEG
28104: PUSH
28105: LD_INT 1
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 2
28115: NEG
28116: PUSH
28117: LD_INT 2
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28146: LD_ADDR_VAR 0 20
28150: PUSH
28151: LD_INT 0
28153: PUSH
28154: LD_INT 0
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: LD_INT 1
28166: NEG
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: PUSH
28185: LD_INT 1
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 1
28204: NEG
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: LD_INT 2
28242: NEG
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 1
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 2
28261: PUSH
28262: LD_INT 0
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 2
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 2
28281: PUSH
28282: LD_INT 2
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 1
28291: PUSH
28292: LD_INT 2
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: LD_INT 2
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 2
28322: NEG
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 2
28333: NEG
28334: PUSH
28335: LD_INT 1
28337: NEG
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 2
28345: NEG
28346: PUSH
28347: LD_INT 2
28349: NEG
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28376: LD_ADDR_VAR 0 21
28380: PUSH
28381: LD_INT 0
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: LD_INT 1
28396: NEG
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 1
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: LD_INT 1
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 0
28424: PUSH
28425: LD_INT 1
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 1
28434: NEG
28435: PUSH
28436: LD_INT 0
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 1
28445: NEG
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PUSH
28459: LD_INT 2
28461: NEG
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 0
28469: PUSH
28470: LD_INT 2
28472: NEG
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: LD_INT 1
28483: NEG
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 2
28491: PUSH
28492: LD_INT 0
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 2
28501: PUSH
28502: LD_INT 1
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 2
28511: PUSH
28512: LD_INT 2
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 1
28521: PUSH
28522: LD_INT 2
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: LD_INT 2
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 2
28552: NEG
28553: PUSH
28554: LD_INT 0
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 2
28563: NEG
28564: PUSH
28565: LD_INT 1
28567: NEG
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 2
28575: NEG
28576: PUSH
28577: LD_INT 2
28579: NEG
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28606: LD_ADDR_VAR 0 22
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: LD_INT 0
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: LD_INT 1
28626: NEG
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: LD_INT 1
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: LD_INT 1
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: NEG
28665: PUSH
28666: LD_INT 0
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 1
28675: NEG
28676: PUSH
28677: LD_INT 1
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: LD_INT 2
28691: NEG
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 0
28699: PUSH
28700: LD_INT 2
28702: NEG
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 1
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 2
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 2
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 2
28741: PUSH
28742: LD_INT 2
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 1
28751: PUSH
28752: LD_INT 2
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 0
28761: PUSH
28762: LD_INT 2
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 1
28771: NEG
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 2
28782: NEG
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 2
28793: NEG
28794: PUSH
28795: LD_INT 1
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 2
28805: NEG
28806: PUSH
28807: LD_INT 2
28809: NEG
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28836: LD_ADDR_VAR 0 23
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: LD_INT 1
28856: NEG
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: LD_INT 1
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: LD_INT 1
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 1
28894: NEG
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 1
28905: NEG
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: LD_INT 2
28921: NEG
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 0
28929: PUSH
28930: LD_INT 2
28932: NEG
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 2
28951: PUSH
28952: LD_INT 0
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 2
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 2
28971: PUSH
28972: LD_INT 2
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 1
28981: PUSH
28982: LD_INT 2
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 0
28991: PUSH
28992: LD_INT 2
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 1
29001: NEG
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 2
29012: NEG
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 2
29023: NEG
29024: PUSH
29025: LD_INT 1
29027: NEG
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 2
29035: NEG
29036: PUSH
29037: LD_INT 2
29039: NEG
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 2
29047: NEG
29048: PUSH
29049: LD_INT 3
29051: NEG
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: LD_INT 3
29063: NEG
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 1
29071: PUSH
29072: LD_INT 2
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 2
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29116: LD_ADDR_VAR 0 24
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: LD_INT 0
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 0
29133: PUSH
29134: LD_INT 1
29136: NEG
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 1
29144: PUSH
29145: LD_INT 0
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 0
29164: PUSH
29165: LD_INT 1
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 1
29174: NEG
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 1
29185: NEG
29186: PUSH
29187: LD_INT 1
29189: NEG
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 1
29197: NEG
29198: PUSH
29199: LD_INT 2
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 0
29209: PUSH
29210: LD_INT 2
29212: NEG
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 1
29220: PUSH
29221: LD_INT 1
29223: NEG
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 2
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 2
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 2
29251: PUSH
29252: LD_INT 2
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 1
29261: PUSH
29262: LD_INT 2
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 0
29271: PUSH
29272: LD_INT 2
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 1
29281: NEG
29282: PUSH
29283: LD_INT 1
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 2
29292: NEG
29293: PUSH
29294: LD_INT 0
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 2
29303: NEG
29304: PUSH
29305: LD_INT 1
29307: NEG
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 2
29315: NEG
29316: PUSH
29317: LD_INT 2
29319: NEG
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: LD_INT 2
29330: NEG
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 2
29338: PUSH
29339: LD_INT 1
29341: NEG
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 3
29349: PUSH
29350: LD_INT 1
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 3
29359: PUSH
29360: LD_INT 2
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29392: LD_ADDR_VAR 0 25
29396: PUSH
29397: LD_INT 0
29399: PUSH
29400: LD_INT 0
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 0
29409: PUSH
29410: LD_INT 1
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 1
29420: PUSH
29421: LD_INT 0
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 1
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 0
29440: PUSH
29441: LD_INT 1
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 1
29450: NEG
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 1
29461: NEG
29462: PUSH
29463: LD_INT 1
29465: NEG
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 1
29473: NEG
29474: PUSH
29475: LD_INT 2
29477: NEG
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 0
29485: PUSH
29486: LD_INT 2
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 1
29496: PUSH
29497: LD_INT 1
29499: NEG
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 2
29507: PUSH
29508: LD_INT 0
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 2
29517: PUSH
29518: LD_INT 1
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 2
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 1
29537: PUSH
29538: LD_INT 2
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 0
29547: PUSH
29548: LD_INT 2
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 1
29557: NEG
29558: PUSH
29559: LD_INT 1
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 2
29568: NEG
29569: PUSH
29570: LD_INT 0
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 2
29579: NEG
29580: PUSH
29581: LD_INT 1
29583: NEG
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 2
29591: NEG
29592: PUSH
29593: LD_INT 2
29595: NEG
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 3
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 3
29613: PUSH
29614: LD_INT 2
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 2
29623: PUSH
29624: LD_INT 3
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 1
29633: PUSH
29634: LD_INT 3
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29666: LD_ADDR_VAR 0 26
29670: PUSH
29671: LD_INT 0
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 0
29683: PUSH
29684: LD_INT 1
29686: NEG
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 1
29694: PUSH
29695: LD_INT 0
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 1
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 1
29724: NEG
29725: PUSH
29726: LD_INT 0
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 1
29735: NEG
29736: PUSH
29737: LD_INT 1
29739: NEG
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 1
29747: NEG
29748: PUSH
29749: LD_INT 2
29751: NEG
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 0
29759: PUSH
29760: LD_INT 2
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 1
29770: PUSH
29771: LD_INT 1
29773: NEG
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 2
29781: PUSH
29782: LD_INT 0
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 2
29791: PUSH
29792: LD_INT 1
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 2
29801: PUSH
29802: LD_INT 2
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 1
29811: PUSH
29812: LD_INT 2
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 0
29821: PUSH
29822: LD_INT 2
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: PUSH
29833: LD_INT 1
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 2
29842: NEG
29843: PUSH
29844: LD_INT 0
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 2
29853: NEG
29854: PUSH
29855: LD_INT 1
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 2
29865: NEG
29866: PUSH
29867: LD_INT 2
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 2
29877: PUSH
29878: LD_INT 3
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: PUSH
29888: LD_INT 3
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 1
29897: NEG
29898: PUSH
29899: LD_INT 2
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 2
29908: NEG
29909: PUSH
29910: LD_INT 1
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29942: LD_ADDR_VAR 0 27
29946: PUSH
29947: LD_INT 0
29949: PUSH
29950: LD_INT 0
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 0
29959: PUSH
29960: LD_INT 1
29962: NEG
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: LD_INT 1
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 0
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 1
30000: NEG
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 1
30011: NEG
30012: PUSH
30013: LD_INT 1
30015: NEG
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 1
30023: NEG
30024: PUSH
30025: LD_INT 2
30027: NEG
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 0
30035: PUSH
30036: LD_INT 2
30038: NEG
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 1
30046: PUSH
30047: LD_INT 1
30049: NEG
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 2
30057: PUSH
30058: LD_INT 0
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 2
30067: PUSH
30068: LD_INT 1
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 2
30077: PUSH
30078: LD_INT 2
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 1
30087: PUSH
30088: LD_INT 2
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: LD_INT 2
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 1
30107: NEG
30108: PUSH
30109: LD_INT 1
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 2
30118: NEG
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 2
30129: NEG
30130: PUSH
30131: LD_INT 1
30133: NEG
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 2
30141: NEG
30142: PUSH
30143: LD_INT 2
30145: NEG
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 1
30153: NEG
30154: PUSH
30155: LD_INT 2
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 2
30164: NEG
30165: PUSH
30166: LD_INT 1
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 3
30175: NEG
30176: PUSH
30177: LD_INT 1
30179: NEG
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 3
30187: NEG
30188: PUSH
30189: LD_INT 2
30191: NEG
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30222: LD_ADDR_VAR 0 28
30226: PUSH
30227: LD_INT 0
30229: PUSH
30230: LD_INT 0
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 0
30239: PUSH
30240: LD_INT 1
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 1
30250: PUSH
30251: LD_INT 0
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: LD_INT 1
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 0
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 1
30280: NEG
30281: PUSH
30282: LD_INT 0
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: LD_INT 1
30295: NEG
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: LD_INT 2
30307: NEG
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: LD_INT 2
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 1
30326: PUSH
30327: LD_INT 1
30329: NEG
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 2
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 2
30347: PUSH
30348: LD_INT 1
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: LD_INT 2
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: PUSH
30368: LD_INT 2
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: LD_INT 2
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 1
30387: NEG
30388: PUSH
30389: LD_INT 1
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 2
30398: NEG
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 2
30409: NEG
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 2
30421: NEG
30422: PUSH
30423: LD_INT 2
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 2
30433: NEG
30434: PUSH
30435: LD_INT 3
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 1
30445: NEG
30446: PUSH
30447: LD_INT 3
30449: NEG
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 3
30457: NEG
30458: PUSH
30459: LD_INT 1
30461: NEG
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 3
30469: NEG
30470: PUSH
30471: LD_INT 2
30473: NEG
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30504: LD_ADDR_VAR 0 29
30508: PUSH
30509: LD_INT 0
30511: PUSH
30512: LD_INT 0
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: LD_INT 1
30524: NEG
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 1
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: LD_INT 1
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 0
30552: PUSH
30553: LD_INT 1
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 1
30562: NEG
30563: PUSH
30564: LD_INT 0
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 1
30573: NEG
30574: PUSH
30575: LD_INT 1
30577: NEG
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 1
30585: NEG
30586: PUSH
30587: LD_INT 2
30589: NEG
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: LD_INT 2
30600: NEG
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: LD_INT 1
30611: NEG
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 2
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 2
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: LD_INT 2
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 0
30649: PUSH
30650: LD_INT 2
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 1
30659: NEG
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 2
30670: NEG
30671: PUSH
30672: LD_INT 1
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 2
30682: NEG
30683: PUSH
30684: LD_INT 2
30686: NEG
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 2
30694: NEG
30695: PUSH
30696: LD_INT 3
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: LD_INT 1
30709: NEG
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 3
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: PUSH
30728: LD_INT 3
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 1
30737: NEG
30738: PUSH
30739: LD_INT 2
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 3
30748: NEG
30749: PUSH
30750: LD_INT 2
30752: NEG
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30783: LD_ADDR_VAR 0 30
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 0
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: LD_INT 0
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 1
30821: PUSH
30822: LD_INT 1
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: LD_INT 1
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 1
30841: NEG
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 1
30852: NEG
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: LD_INT 2
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 0
30876: PUSH
30877: LD_INT 2
30879: NEG
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: LD_INT 1
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 2
30898: PUSH
30899: LD_INT 0
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 2
30908: PUSH
30909: LD_INT 1
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 2
30918: PUSH
30919: LD_INT 2
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 1
30928: PUSH
30929: LD_INT 2
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 1
30938: NEG
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 2
30949: NEG
30950: PUSH
30951: LD_INT 0
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 2
30960: NEG
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 1
30972: NEG
30973: PUSH
30974: LD_INT 3
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 1
30984: PUSH
30985: LD_INT 2
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 3
30995: PUSH
30996: LD_INT 2
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 2
31005: PUSH
31006: LD_INT 3
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 2
31015: NEG
31016: PUSH
31017: LD_INT 1
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 3
31026: NEG
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31061: LD_ADDR_VAR 0 31
31065: PUSH
31066: LD_INT 0
31068: PUSH
31069: LD_INT 0
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 0
31078: PUSH
31079: LD_INT 1
31081: NEG
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: LD_INT 0
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 1
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 0
31109: PUSH
31110: LD_INT 1
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 1
31119: NEG
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 1
31130: NEG
31131: PUSH
31132: LD_INT 1
31134: NEG
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 1
31142: NEG
31143: PUSH
31144: LD_INT 2
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 1
31154: PUSH
31155: LD_INT 1
31157: NEG
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 2
31165: PUSH
31166: LD_INT 0
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 2
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 2
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 1
31195: PUSH
31196: LD_INT 2
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 0
31205: PUSH
31206: LD_INT 2
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 1
31215: NEG
31216: PUSH
31217: LD_INT 1
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 2
31226: NEG
31227: PUSH
31228: LD_INT 1
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 2
31238: NEG
31239: PUSH
31240: LD_INT 2
31242: NEG
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 2
31250: NEG
31251: PUSH
31252: LD_INT 3
31254: NEG
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 2
31262: PUSH
31263: LD_INT 1
31265: NEG
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 3
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 1
31283: PUSH
31284: LD_INT 3
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 1
31293: NEG
31294: PUSH
31295: LD_INT 2
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 3
31304: NEG
31305: PUSH
31306: LD_INT 2
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31339: LD_ADDR_VAR 0 32
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: LD_INT 0
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 0
31356: PUSH
31357: LD_INT 1
31359: NEG
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 1
31367: PUSH
31368: LD_INT 0
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 1
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 0
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 1
31397: NEG
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 1
31408: NEG
31409: PUSH
31410: LD_INT 1
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: LD_INT 2
31424: NEG
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 0
31432: PUSH
31433: LD_INT 2
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 1
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 2
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 2
31464: PUSH
31465: LD_INT 2
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: LD_INT 2
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 0
31484: PUSH
31485: LD_INT 2
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 1
31494: NEG
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 2
31505: NEG
31506: PUSH
31507: LD_INT 0
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 2
31516: NEG
31517: PUSH
31518: LD_INT 1
31520: NEG
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: LD_INT 3
31532: NEG
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: LD_INT 2
31543: NEG
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 3
31551: PUSH
31552: LD_INT 2
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 2
31561: PUSH
31562: LD_INT 3
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 2
31571: NEG
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 3
31582: NEG
31583: PUSH
31584: LD_INT 1
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31617: LD_ADDR_VAR 0 33
31621: PUSH
31622: LD_INT 0
31624: PUSH
31625: LD_INT 0
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: LD_INT 1
31637: NEG
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: LD_INT 0
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: LD_INT 0
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: NEG
31687: PUSH
31688: LD_INT 1
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: LD_INT 2
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 1
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 2
31721: PUSH
31722: LD_INT 0
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 2
31731: PUSH
31732: LD_INT 1
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 1
31741: PUSH
31742: LD_INT 2
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 0
31751: PUSH
31752: LD_INT 2
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 1
31761: NEG
31762: PUSH
31763: LD_INT 1
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 2
31772: NEG
31773: PUSH
31774: LD_INT 0
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 2
31783: NEG
31784: PUSH
31785: LD_INT 1
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 2
31795: NEG
31796: PUSH
31797: LD_INT 2
31799: NEG
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: LD_INT 3
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 2
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 3
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: LD_INT 3
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 1
31850: NEG
31851: PUSH
31852: LD_INT 2
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 3
31861: NEG
31862: PUSH
31863: LD_INT 2
31865: NEG
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31896: LD_ADDR_VAR 0 34
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: LD_INT 0
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 0
31913: PUSH
31914: LD_INT 1
31916: NEG
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 1
31924: PUSH
31925: LD_INT 0
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 1
31934: PUSH
31935: LD_INT 1
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 0
31944: PUSH
31945: LD_INT 1
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 1
31954: NEG
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 1
31965: NEG
31966: PUSH
31967: LD_INT 1
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 1
31977: NEG
31978: PUSH
31979: LD_INT 2
31981: NEG
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 0
31989: PUSH
31990: LD_INT 2
31992: NEG
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 1
32000: PUSH
32001: LD_INT 1
32003: NEG
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 2
32011: PUSH
32012: LD_INT 1
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 2
32021: PUSH
32022: LD_INT 2
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 1
32031: PUSH
32032: LD_INT 2
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: NEG
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 2
32052: NEG
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 2
32063: NEG
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: NEG
32076: PUSH
32077: LD_INT 2
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 1
32087: NEG
32088: PUSH
32089: LD_INT 3
32091: NEG
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 1
32099: PUSH
32100: LD_INT 2
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 3
32110: PUSH
32111: LD_INT 2
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 2
32120: PUSH
32121: LD_INT 3
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 2
32130: NEG
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 3
32141: NEG
32142: PUSH
32143: LD_INT 1
32145: NEG
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32176: LD_ADDR_VAR 0 35
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 1
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: LD_INT 1
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 0
32224: PUSH
32225: LD_INT 1
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 1
32234: NEG
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 2
32257: PUSH
32258: LD_INT 1
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 2
32267: NEG
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32288: LD_ADDR_VAR 0 36
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: LD_INT 0
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 0
32305: PUSH
32306: LD_INT 1
32308: NEG
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: PUSH
32317: LD_INT 0
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: LD_INT 1
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: LD_INT 1
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 1
32346: NEG
32347: PUSH
32348: LD_INT 0
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 1
32357: NEG
32358: PUSH
32359: LD_INT 1
32361: NEG
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: NEG
32370: PUSH
32371: LD_INT 2
32373: NEG
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 1
32381: PUSH
32382: LD_INT 2
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32400: LD_ADDR_VAR 0 37
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: LD_INT 0
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 0
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 1
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 1
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 0
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 1
32458: NEG
32459: PUSH
32460: LD_INT 0
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 1
32469: NEG
32470: PUSH
32471: LD_INT 1
32473: NEG
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 1
32481: PUSH
32482: LD_INT 1
32484: NEG
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 1
32492: NEG
32493: PUSH
32494: LD_INT 1
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32512: LD_ADDR_VAR 0 38
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 0
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: LD_INT 1
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: LD_INT 1
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: NEG
32571: PUSH
32572: LD_INT 0
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 1
32581: NEG
32582: PUSH
32583: LD_INT 1
32585: NEG
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 2
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 2
32603: NEG
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32624: LD_ADDR_VAR 0 39
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 0
32641: PUSH
32642: LD_INT 1
32644: NEG
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 1
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 1
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: LD_INT 1
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 1
32682: NEG
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: NEG
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 1
32705: NEG
32706: PUSH
32707: LD_INT 2
32709: NEG
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: LD_INT 2
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32736: LD_ADDR_VAR 0 40
32740: PUSH
32741: LD_INT 0
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 0
32753: PUSH
32754: LD_INT 1
32756: NEG
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 1
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: LD_INT 1
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 1
32794: NEG
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 1
32805: NEG
32806: PUSH
32807: LD_INT 1
32809: NEG
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: LD_INT 1
32820: NEG
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 1
32828: NEG
32829: PUSH
32830: LD_INT 1
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32848: LD_ADDR_VAR 0 41
32852: PUSH
32853: LD_INT 0
32855: PUSH
32856: LD_INT 0
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 0
32865: PUSH
32866: LD_INT 1
32868: NEG
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 1
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 1
32886: PUSH
32887: LD_INT 1
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 1
32906: NEG
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 1
32917: NEG
32918: PUSH
32919: LD_INT 1
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 1
32929: NEG
32930: PUSH
32931: LD_INT 2
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 1
32941: PUSH
32942: LD_INT 1
32944: NEG
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 2
32952: PUSH
32953: LD_INT 0
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: LD_INT 1
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 2
32972: PUSH
32973: LD_INT 2
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 1
32982: PUSH
32983: LD_INT 2
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 1
32992: NEG
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 2
33003: NEG
33004: PUSH
33005: LD_INT 0
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 2
33014: NEG
33015: PUSH
33016: LD_INT 1
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 2
33026: NEG
33027: PUSH
33028: LD_INT 2
33030: NEG
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 2
33038: NEG
33039: PUSH
33040: LD_INT 3
33042: NEG
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 2
33050: PUSH
33051: LD_INT 1
33053: NEG
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 3
33061: PUSH
33062: LD_INT 0
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 3
33071: PUSH
33072: LD_INT 1
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 3
33081: PUSH
33082: LD_INT 2
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 3
33091: PUSH
33092: LD_INT 3
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: LD_INT 3
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 2
33111: NEG
33112: PUSH
33113: LD_INT 1
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 3
33122: NEG
33123: PUSH
33124: LD_INT 0
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 3
33133: NEG
33134: PUSH
33135: LD_INT 1
33137: NEG
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 3
33145: NEG
33146: PUSH
33147: LD_INT 2
33149: NEG
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 3
33157: NEG
33158: PUSH
33159: LD_INT 3
33161: NEG
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33198: LD_ADDR_VAR 0 42
33202: PUSH
33203: LD_INT 0
33205: PUSH
33206: LD_INT 0
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: LD_INT 1
33218: NEG
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 1
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 1
33236: PUSH
33237: LD_INT 1
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: LD_INT 1
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 1
33256: NEG
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 1
33267: NEG
33268: PUSH
33269: LD_INT 1
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 1
33279: NEG
33280: PUSH
33281: LD_INT 2
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: LD_INT 2
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: PUSH
33303: LD_INT 1
33305: NEG
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 2
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 2
33323: PUSH
33324: LD_INT 2
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 1
33333: PUSH
33334: LD_INT 2
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 0
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 1
33353: NEG
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 2
33364: NEG
33365: PUSH
33366: LD_INT 1
33368: NEG
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 2
33376: NEG
33377: PUSH
33378: LD_INT 2
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 2
33388: NEG
33389: PUSH
33390: LD_INT 3
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: PUSH
33402: LD_INT 3
33404: NEG
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 0
33412: PUSH
33413: LD_INT 3
33415: NEG
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 1
33423: PUSH
33424: LD_INT 2
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 3
33434: PUSH
33435: LD_INT 2
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 3
33444: PUSH
33445: LD_INT 3
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 2
33454: PUSH
33455: LD_INT 3
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 1
33464: PUSH
33465: LD_INT 3
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 0
33474: PUSH
33475: LD_INT 3
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 1
33484: NEG
33485: PUSH
33486: LD_INT 2
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 3
33495: NEG
33496: PUSH
33497: LD_INT 2
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 3
33507: NEG
33508: PUSH
33509: LD_INT 3
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33548: LD_ADDR_VAR 0 43
33552: PUSH
33553: LD_INT 0
33555: PUSH
33556: LD_INT 0
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 0
33565: PUSH
33566: LD_INT 1
33568: NEG
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 1
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 1
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 0
33596: PUSH
33597: LD_INT 1
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 1
33606: NEG
33607: PUSH
33608: LD_INT 0
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 1
33617: NEG
33618: PUSH
33619: LD_INT 1
33621: NEG
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: LD_INT 2
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 0
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: LD_INT 1
33655: NEG
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: LD_INT 1
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: LD_INT 2
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 0
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 2
33714: NEG
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 2
33725: NEG
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: LD_INT 3
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: LD_INT 3
33752: NEG
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 1
33760: PUSH
33761: LD_INT 2
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 2
33771: PUSH
33772: LD_INT 1
33774: NEG
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 3
33782: PUSH
33783: LD_INT 0
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 3
33792: PUSH
33793: LD_INT 1
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 1
33802: PUSH
33803: LD_INT 3
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 0
33812: PUSH
33813: LD_INT 3
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 1
33822: NEG
33823: PUSH
33824: LD_INT 2
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 2
33833: NEG
33834: PUSH
33835: LD_INT 1
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 3
33844: NEG
33845: PUSH
33846: LD_INT 0
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 3
33855: NEG
33856: PUSH
33857: LD_INT 1
33859: NEG
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33896: LD_ADDR_VAR 0 44
33900: PUSH
33901: LD_INT 0
33903: PUSH
33904: LD_INT 0
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 0
33913: PUSH
33914: LD_INT 1
33916: NEG
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 1
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: PUSH
33935: LD_INT 1
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 0
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 1
33954: NEG
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: NEG
33966: PUSH
33967: LD_INT 1
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 1
33977: NEG
33978: PUSH
33979: LD_INT 2
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: LD_INT 1
33992: NEG
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 2
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 2
34010: PUSH
34011: LD_INT 1
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 2
34020: PUSH
34021: LD_INT 2
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: LD_INT 2
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: NEG
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 2
34062: NEG
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 2
34074: NEG
34075: PUSH
34076: LD_INT 2
34078: NEG
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 2
34086: NEG
34087: PUSH
34088: LD_INT 3
34090: NEG
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 2
34098: PUSH
34099: LD_INT 1
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 3
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 3
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 3
34129: PUSH
34130: LD_INT 2
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 3
34139: PUSH
34140: LD_INT 3
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 2
34149: PUSH
34150: LD_INT 3
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 2
34159: NEG
34160: PUSH
34161: LD_INT 1
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 3
34170: NEG
34171: PUSH
34172: LD_INT 0
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 3
34181: NEG
34182: PUSH
34183: LD_INT 1
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 3
34193: NEG
34194: PUSH
34195: LD_INT 2
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 3
34205: NEG
34206: PUSH
34207: LD_INT 3
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34246: LD_ADDR_VAR 0 45
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: LD_INT 0
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 0
34263: PUSH
34264: LD_INT 1
34266: NEG
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 1
34274: PUSH
34275: LD_INT 0
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: LD_INT 1
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 0
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 1
34304: NEG
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 1
34315: NEG
34316: PUSH
34317: LD_INT 1
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 1
34327: NEG
34328: PUSH
34329: LD_INT 2
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 0
34339: PUSH
34340: LD_INT 2
34342: NEG
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 1
34350: PUSH
34351: LD_INT 1
34353: NEG
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 2
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 2
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 1
34381: PUSH
34382: LD_INT 2
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: LD_INT 2
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: NEG
34402: PUSH
34403: LD_INT 1
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 2
34412: NEG
34413: PUSH
34414: LD_INT 1
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 2
34424: NEG
34425: PUSH
34426: LD_INT 2
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: LD_INT 3
34440: NEG
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: LD_INT 3
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: LD_INT 3
34463: NEG
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 1
34471: PUSH
34472: LD_INT 2
34474: NEG
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 3
34482: PUSH
34483: LD_INT 2
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 3
34492: PUSH
34493: LD_INT 3
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 2
34502: PUSH
34503: LD_INT 3
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 1
34512: PUSH
34513: LD_INT 3
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 0
34522: PUSH
34523: LD_INT 3
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 1
34532: NEG
34533: PUSH
34534: LD_INT 2
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 3
34543: NEG
34544: PUSH
34545: LD_INT 2
34547: NEG
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 3
34555: NEG
34556: PUSH
34557: LD_INT 3
34559: NEG
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34596: LD_ADDR_VAR 0 46
34600: PUSH
34601: LD_INT 0
34603: PUSH
34604: LD_INT 0
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: LD_INT 1
34616: NEG
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 1
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 1
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: LD_INT 1
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 1
34654: NEG
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: NEG
34666: PUSH
34667: LD_INT 1
34669: NEG
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 1
34677: NEG
34678: PUSH
34679: LD_INT 2
34681: NEG
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: LD_INT 2
34692: NEG
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 1
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 2
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 2
34721: PUSH
34722: LD_INT 1
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: LD_INT 2
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: LD_INT 2
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 2
34762: NEG
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 2
34773: NEG
34774: PUSH
34775: LD_INT 1
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: NEG
34786: PUSH
34787: LD_INT 3
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: LD_INT 3
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: LD_INT 2
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 2
34819: PUSH
34820: LD_INT 1
34822: NEG
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 3
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 3
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: LD_INT 3
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 0
34860: PUSH
34861: LD_INT 3
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 1
34870: NEG
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 2
34881: NEG
34882: PUSH
34883: LD_INT 1
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 3
34892: NEG
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 3
34903: NEG
34904: PUSH
34905: LD_INT 1
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34944: LD_ADDR_VAR 0 47
34948: PUSH
34949: LD_INT 0
34951: PUSH
34952: LD_INT 0
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 0
34961: PUSH
34962: LD_INT 1
34964: NEG
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 1
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 1
34982: PUSH
34983: LD_INT 1
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 0
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 1
35002: NEG
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 1
35013: NEG
35014: PUSH
35015: LD_INT 1
35017: NEG
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 1
35025: NEG
35026: PUSH
35027: LD_INT 2
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 0
35037: PUSH
35038: LD_INT 2
35040: NEG
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 1
35048: PUSH
35049: LD_INT 1
35051: NEG
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 2
35059: NEG
35060: PUSH
35061: LD_INT 1
35063: NEG
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 2
35071: NEG
35072: PUSH
35073: LD_INT 2
35075: NEG
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35095: LD_ADDR_VAR 0 48
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: LD_INT 0
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 0
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 1
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: LD_INT 1
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 1
35153: NEG
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 1
35164: NEG
35165: PUSH
35166: LD_INT 1
35168: NEG
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 1
35176: NEG
35177: PUSH
35178: LD_INT 2
35180: NEG
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: LD_INT 2
35191: NEG
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: LD_INT 1
35202: NEG
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 2
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 2
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35242: LD_ADDR_VAR 0 49
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 0
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: LD_INT 0
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: PUSH
35281: LD_INT 1
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 1
35300: NEG
35301: PUSH
35302: LD_INT 0
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: PUSH
35313: LD_INT 1
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: PUSH
35324: LD_INT 1
35326: NEG
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 2
35334: PUSH
35335: LD_INT 0
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: LD_INT 1
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 2
35354: PUSH
35355: LD_INT 2
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: PUSH
35365: LD_INT 2
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35386: LD_ADDR_VAR 0 50
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 1
35444: NEG
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: LD_INT 1
35459: NEG
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 2
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 2
35477: PUSH
35478: LD_INT 2
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: LD_INT 2
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 0
35497: PUSH
35498: LD_INT 2
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 1
35507: NEG
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35530: LD_ADDR_VAR 0 51
35534: PUSH
35535: LD_INT 0
35537: PUSH
35538: LD_INT 0
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: LD_INT 1
35550: NEG
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 1
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: LD_INT 1
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 0
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 1
35588: NEG
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 1
35599: NEG
35600: PUSH
35601: LD_INT 1
35603: NEG
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 1
35611: PUSH
35612: LD_INT 2
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: LD_INT 2
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 1
35631: NEG
35632: PUSH
35633: LD_INT 1
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 2
35642: NEG
35643: PUSH
35644: LD_INT 0
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 2
35653: NEG
35654: PUSH
35655: LD_INT 1
35657: NEG
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35677: LD_ADDR_VAR 0 52
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: LD_INT 0
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: LD_INT 1
35697: NEG
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: LD_INT 0
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 1
35715: PUSH
35716: LD_INT 1
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: LD_INT 1
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 1
35735: NEG
35736: PUSH
35737: LD_INT 0
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: NEG
35747: PUSH
35748: LD_INT 1
35750: NEG
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 1
35758: NEG
35759: PUSH
35760: LD_INT 2
35762: NEG
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 1
35770: NEG
35771: PUSH
35772: LD_INT 1
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 2
35781: NEG
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 2
35792: NEG
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 2
35804: NEG
35805: PUSH
35806: LD_INT 2
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35828: LD_ADDR_VAR 0 53
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: LD_INT 1
35848: NEG
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 1
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 1
35886: NEG
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 1
35897: NEG
35898: PUSH
35899: LD_INT 1
35901: NEG
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: LD_INT 2
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: LD_INT 2
35924: NEG
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 2
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 2
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 2
35963: PUSH
35964: LD_INT 2
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: LD_INT 2
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: LD_INT 2
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 2
36004: NEG
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 2
36015: NEG
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 2
36027: NEG
36028: PUSH
36029: LD_INT 2
36031: NEG
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36058: LD_ADDR_VAR 0 54
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: LD_INT 1
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 1
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: PUSH
36097: LD_INT 1
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: LD_INT 1
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 1
36116: NEG
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 1
36127: NEG
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: LD_INT 2
36143: NEG
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: LD_INT 2
36154: NEG
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 1
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 2
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 2
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 2
36193: PUSH
36194: LD_INT 2
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: PUSH
36204: LD_INT 2
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: LD_INT 2
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 1
36223: NEG
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 2
36234: NEG
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 2
36245: NEG
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 2
36257: NEG
36258: PUSH
36259: LD_INT 2
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36288: LD_ADDR_VAR 0 55
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: LD_INT 0
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: LD_INT 1
36308: NEG
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 1
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 1
36346: NEG
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 1
36357: NEG
36358: PUSH
36359: LD_INT 1
36361: NEG
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: LD_INT 2
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: LD_INT 2
36384: NEG
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 1
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 2
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 2
36423: PUSH
36424: LD_INT 2
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: LD_INT 2
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 2
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: LD_INT 1
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 2
36464: NEG
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 2
36475: NEG
36476: PUSH
36477: LD_INT 1
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 2
36487: NEG
36488: PUSH
36489: LD_INT 2
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36518: LD_ADDR_VAR 0 56
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: LD_INT 1
36538: NEG
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 1
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 1
36556: PUSH
36557: LD_INT 1
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 1
36576: NEG
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 1
36587: NEG
36588: PUSH
36589: LD_INT 1
36591: NEG
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: LD_INT 2
36603: NEG
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: LD_INT 2
36614: NEG
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 1
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 2
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 2
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 2
36653: PUSH
36654: LD_INT 2
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 1
36663: PUSH
36664: LD_INT 2
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: LD_INT 2
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 2
36694: NEG
36695: PUSH
36696: LD_INT 0
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 2
36705: NEG
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 2
36717: NEG
36718: PUSH
36719: LD_INT 2
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36748: LD_ADDR_VAR 0 57
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: LD_INT 0
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: LD_INT 1
36768: NEG
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 1
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 1
36786: PUSH
36787: LD_INT 1
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 0
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 1
36806: NEG
36807: PUSH
36808: LD_INT 0
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 1
36817: NEG
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 1
36829: NEG
36830: PUSH
36831: LD_INT 2
36833: NEG
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: LD_INT 2
36844: NEG
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 2
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 2
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 2
36883: PUSH
36884: LD_INT 2
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 1
36893: PUSH
36894: LD_INT 2
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 0
36903: PUSH
36904: LD_INT 2
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 1
36913: NEG
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 2
36924: NEG
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 2
36935: NEG
36936: PUSH
36937: LD_INT 1
36939: NEG
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 2
36947: NEG
36948: PUSH
36949: LD_INT 2
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36978: LD_ADDR_VAR 0 58
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 1
36998: NEG
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 1
37036: NEG
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 1
37047: NEG
37048: PUSH
37049: LD_INT 1
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 1
37059: NEG
37060: PUSH
37061: LD_INT 2
37063: NEG
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: LD_INT 2
37074: NEG
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 1
37082: PUSH
37083: LD_INT 1
37085: NEG
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 2
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 2
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: LD_INT 2
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: LD_INT 2
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 1
37143: NEG
37144: PUSH
37145: LD_INT 1
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 2
37154: NEG
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 2
37165: NEG
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 2
37177: NEG
37178: PUSH
37179: LD_INT 2
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37208: LD_ADDR_VAR 0 59
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: LD_INT 0
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 1
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 1
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 1
37266: NEG
37267: PUSH
37268: LD_INT 0
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37296: LD_ADDR_VAR 0 60
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: LD_INT 1
37316: NEG
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 1
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 1
37354: NEG
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 1
37365: NEG
37366: PUSH
37367: LD_INT 1
37369: NEG
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37384: LD_ADDR_VAR 0 61
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: LD_INT 1
37404: NEG
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: LD_INT 0
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 1
37442: NEG
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: NEG
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37472: LD_ADDR_VAR 0 62
37476: PUSH
37477: LD_INT 0
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: LD_INT 1
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: LD_INT 1
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: NEG
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: LD_INT 1
37545: NEG
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37560: LD_ADDR_VAR 0 63
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: LD_INT 0
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: LD_INT 1
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 1
37588: PUSH
37589: LD_INT 0
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: LD_INT 1
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 0
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: NEG
37619: PUSH
37620: LD_INT 0
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: NEG
37630: PUSH
37631: LD_INT 1
37633: NEG
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37648: LD_ADDR_VAR 0 64
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: LD_INT 1
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 1
37706: NEG
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 1
37717: NEG
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: ST_TO_ADDR
// end ; 1 :
37736: GO 43633
37738: LD_INT 1
37740: DOUBLE
37741: EQUAL
37742: IFTRUE 37746
37744: GO 40369
37746: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37747: LD_ADDR_VAR 0 11
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: LD_INT 3
37758: NEG
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 3
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: LD_INT 2
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: LIST
37790: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37791: LD_ADDR_VAR 0 12
37795: PUSH
37796: LD_INT 2
37798: PUSH
37799: LD_INT 1
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 3
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 3
37819: PUSH
37820: LD_INT 1
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: LIST
37831: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37832: LD_ADDR_VAR 0 13
37836: PUSH
37837: LD_INT 3
37839: PUSH
37840: LD_INT 2
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 3
37849: PUSH
37850: LD_INT 3
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 2
37859: PUSH
37860: LD_INT 3
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: LIST
37871: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37872: LD_ADDR_VAR 0 14
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: LD_INT 3
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 0
37889: PUSH
37890: LD_INT 3
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: LD_INT 2
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: LIST
37912: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37913: LD_ADDR_VAR 0 15
37917: PUSH
37918: LD_INT 2
37920: NEG
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 3
37931: NEG
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 3
37942: NEG
37943: PUSH
37944: LD_INT 1
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: LIST
37956: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37957: LD_ADDR_VAR 0 16
37961: PUSH
37962: LD_INT 2
37964: NEG
37965: PUSH
37966: LD_INT 3
37968: NEG
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 3
37976: NEG
37977: PUSH
37978: LD_INT 2
37980: NEG
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 3
37988: NEG
37989: PUSH
37990: LD_INT 3
37992: NEG
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: LIST
38002: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38003: LD_ADDR_VAR 0 17
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: PUSH
38012: LD_INT 3
38014: NEG
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: LD_INT 3
38025: NEG
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: LD_INT 2
38036: NEG
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: LIST
38046: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38047: LD_ADDR_VAR 0 18
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: LD_INT 1
38057: NEG
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 3
38065: PUSH
38066: LD_INT 0
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 3
38075: PUSH
38076: LD_INT 1
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: LIST
38087: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38088: LD_ADDR_VAR 0 19
38092: PUSH
38093: LD_INT 3
38095: PUSH
38096: LD_INT 2
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 3
38105: PUSH
38106: LD_INT 3
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 2
38115: PUSH
38116: LD_INT 3
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: LIST
38127: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38128: LD_ADDR_VAR 0 20
38132: PUSH
38133: LD_INT 1
38135: PUSH
38136: LD_INT 3
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: LD_INT 3
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 1
38155: NEG
38156: PUSH
38157: LD_INT 2
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: LIST
38168: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38169: LD_ADDR_VAR 0 21
38173: PUSH
38174: LD_INT 2
38176: NEG
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 3
38187: NEG
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 3
38198: NEG
38199: PUSH
38200: LD_INT 1
38202: NEG
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: LIST
38212: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38213: LD_ADDR_VAR 0 22
38217: PUSH
38218: LD_INT 2
38220: NEG
38221: PUSH
38222: LD_INT 3
38224: NEG
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 3
38232: NEG
38233: PUSH
38234: LD_INT 2
38236: NEG
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 3
38244: NEG
38245: PUSH
38246: LD_INT 3
38248: NEG
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: LIST
38258: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38259: LD_ADDR_VAR 0 23
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: LD_INT 3
38269: NEG
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 1
38277: NEG
38278: PUSH
38279: LD_INT 4
38281: NEG
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 1
38289: PUSH
38290: LD_INT 3
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: LIST
38302: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38303: LD_ADDR_VAR 0 24
38307: PUSH
38308: LD_INT 3
38310: PUSH
38311: LD_INT 0
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 3
38320: PUSH
38321: LD_INT 1
38323: NEG
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 4
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: LIST
38343: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38344: LD_ADDR_VAR 0 25
38348: PUSH
38349: LD_INT 3
38351: PUSH
38352: LD_INT 3
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 4
38361: PUSH
38362: LD_INT 3
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 3
38371: PUSH
38372: LD_INT 4
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: LIST
38383: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38384: LD_ADDR_VAR 0 26
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: LD_INT 3
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 1
38401: PUSH
38402: LD_INT 4
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 1
38411: NEG
38412: PUSH
38413: LD_INT 3
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: LIST
38424: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38425: LD_ADDR_VAR 0 27
38429: PUSH
38430: LD_INT 3
38432: NEG
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 3
38443: NEG
38444: PUSH
38445: LD_INT 1
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 4
38454: NEG
38455: PUSH
38456: LD_INT 1
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: LIST
38468: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38469: LD_ADDR_VAR 0 28
38473: PUSH
38474: LD_INT 3
38476: NEG
38477: PUSH
38478: LD_INT 3
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 3
38488: NEG
38489: PUSH
38490: LD_INT 4
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 4
38500: NEG
38501: PUSH
38502: LD_INT 3
38504: NEG
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: LIST
38514: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38515: LD_ADDR_VAR 0 29
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: LD_INT 3
38526: NEG
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: LD_INT 3
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: LD_INT 2
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 1
38556: NEG
38557: PUSH
38558: LD_INT 4
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: LD_INT 4
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: LD_INT 3
38582: NEG
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 1
38590: NEG
38591: PUSH
38592: LD_INT 5
38594: NEG
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: LD_INT 5
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: LD_INT 4
38616: NEG
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 1
38624: NEG
38625: PUSH
38626: LD_INT 6
38628: NEG
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 0
38636: PUSH
38637: LD_INT 6
38639: NEG
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: LD_INT 5
38650: NEG
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38670: LD_ADDR_VAR 0 30
38674: PUSH
38675: LD_INT 2
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 3
38688: PUSH
38689: LD_INT 0
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 3
38698: PUSH
38699: LD_INT 1
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 3
38708: PUSH
38709: LD_INT 1
38711: NEG
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 4
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 4
38729: PUSH
38730: LD_INT 1
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 4
38739: PUSH
38740: LD_INT 1
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 5
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 5
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 5
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 6
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 6
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38813: LD_ADDR_VAR 0 31
38817: PUSH
38818: LD_INT 3
38820: PUSH
38821: LD_INT 2
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 3
38830: PUSH
38831: LD_INT 3
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 2
38840: PUSH
38841: LD_INT 3
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 4
38850: PUSH
38851: LD_INT 3
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 4
38860: PUSH
38861: LD_INT 4
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 3
38870: PUSH
38871: LD_INT 4
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 5
38880: PUSH
38881: LD_INT 4
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 5
38890: PUSH
38891: LD_INT 5
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 4
38900: PUSH
38901: LD_INT 5
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 6
38910: PUSH
38911: LD_INT 5
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 6
38920: PUSH
38921: LD_INT 6
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 5
38930: PUSH
38931: LD_INT 6
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38952: LD_ADDR_VAR 0 32
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: LD_INT 3
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: LD_INT 3
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: LD_INT 2
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 1
38990: PUSH
38991: LD_INT 4
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 4
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: LD_INT 3
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 5
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: LD_INT 5
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: LD_INT 4
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: LD_INT 6
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: LD_INT 6
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: LD_INT 5
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39095: LD_ADDR_VAR 0 33
39099: PUSH
39100: LD_INT 2
39102: NEG
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 3
39113: NEG
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 3
39124: NEG
39125: PUSH
39126: LD_INT 1
39128: NEG
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 3
39136: NEG
39137: PUSH
39138: LD_INT 1
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 4
39147: NEG
39148: PUSH
39149: LD_INT 0
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 4
39158: NEG
39159: PUSH
39160: LD_INT 1
39162: NEG
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 4
39170: NEG
39171: PUSH
39172: LD_INT 1
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 5
39181: NEG
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 5
39192: NEG
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 5
39204: NEG
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 6
39215: NEG
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 6
39226: NEG
39227: PUSH
39228: LD_INT 1
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39250: LD_ADDR_VAR 0 34
39254: PUSH
39255: LD_INT 2
39257: NEG
39258: PUSH
39259: LD_INT 3
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 3
39269: NEG
39270: PUSH
39271: LD_INT 2
39273: NEG
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 3
39281: NEG
39282: PUSH
39283: LD_INT 3
39285: NEG
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 3
39293: NEG
39294: PUSH
39295: LD_INT 4
39297: NEG
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 4
39305: NEG
39306: PUSH
39307: LD_INT 3
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 4
39317: NEG
39318: PUSH
39319: LD_INT 4
39321: NEG
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 4
39329: NEG
39330: PUSH
39331: LD_INT 5
39333: NEG
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 5
39341: NEG
39342: PUSH
39343: LD_INT 4
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 5
39353: NEG
39354: PUSH
39355: LD_INT 5
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 5
39365: NEG
39366: PUSH
39367: LD_INT 6
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 6
39377: NEG
39378: PUSH
39379: LD_INT 5
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 6
39389: NEG
39390: PUSH
39391: LD_INT 6
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39413: LD_ADDR_VAR 0 41
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: LD_INT 2
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: LD_INT 3
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: LD_INT 2
39446: NEG
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: LIST
39456: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39457: LD_ADDR_VAR 0 42
39461: PUSH
39462: LD_INT 2
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 2
39474: PUSH
39475: LD_INT 1
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 3
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: LIST
39497: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39498: LD_ADDR_VAR 0 43
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 3
39515: PUSH
39516: LD_INT 2
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: LD_INT 3
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: LIST
39537: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39538: LD_ADDR_VAR 0 44
39542: PUSH
39543: LD_INT 0
39545: PUSH
39546: LD_INT 2
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: LD_INT 3
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 1
39565: NEG
39566: PUSH
39567: LD_INT 2
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39579: LD_ADDR_VAR 0 45
39583: PUSH
39584: LD_INT 2
39586: NEG
39587: PUSH
39588: LD_INT 0
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 2
39597: NEG
39598: PUSH
39599: LD_INT 1
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 3
39608: NEG
39609: PUSH
39610: LD_INT 1
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: LIST
39622: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39623: LD_ADDR_VAR 0 46
39627: PUSH
39628: LD_INT 2
39630: NEG
39631: PUSH
39632: LD_INT 2
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 2
39642: NEG
39643: PUSH
39644: LD_INT 3
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 3
39654: NEG
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: LIST
39668: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39669: LD_ADDR_VAR 0 47
39673: PUSH
39674: LD_INT 2
39676: NEG
39677: PUSH
39678: LD_INT 3
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: LD_INT 3
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39702: LD_ADDR_VAR 0 48
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 2
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 2
39720: PUSH
39721: LD_INT 1
39723: NEG
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39733: LD_ADDR_VAR 0 49
39737: PUSH
39738: LD_INT 3
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 3
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39762: LD_ADDR_VAR 0 50
39766: PUSH
39767: LD_INT 2
39769: PUSH
39770: LD_INT 3
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: LD_INT 3
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39791: LD_ADDR_VAR 0 51
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 2
39809: NEG
39810: PUSH
39811: LD_INT 1
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39822: LD_ADDR_VAR 0 52
39826: PUSH
39827: LD_INT 3
39829: NEG
39830: PUSH
39831: LD_INT 1
39833: NEG
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 3
39841: NEG
39842: PUSH
39843: LD_INT 2
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39855: LD_ADDR_VAR 0 53
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: LD_INT 3
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: LD_INT 3
39877: NEG
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: LD_INT 2
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: LIST
39898: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39899: LD_ADDR_VAR 0 54
39903: PUSH
39904: LD_INT 2
39906: PUSH
39907: LD_INT 1
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 3
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 3
39927: PUSH
39928: LD_INT 1
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: LIST
39939: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39940: LD_ADDR_VAR 0 55
39944: PUSH
39945: LD_INT 3
39947: PUSH
39948: LD_INT 2
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 3
39957: PUSH
39958: LD_INT 3
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 2
39967: PUSH
39968: LD_INT 3
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: LIST
39979: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39980: LD_ADDR_VAR 0 56
39984: PUSH
39985: LD_INT 1
39987: PUSH
39988: LD_INT 3
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: LD_INT 3
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: NEG
40008: PUSH
40009: LD_INT 2
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: LIST
40020: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40021: LD_ADDR_VAR 0 57
40025: PUSH
40026: LD_INT 2
40028: NEG
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 3
40039: NEG
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 3
40050: NEG
40051: PUSH
40052: LD_INT 1
40054: NEG
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: LIST
40064: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40065: LD_ADDR_VAR 0 58
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: LD_INT 3
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 3
40084: NEG
40085: PUSH
40086: LD_INT 2
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 3
40096: NEG
40097: PUSH
40098: LD_INT 3
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: LIST
40110: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40111: LD_ADDR_VAR 0 59
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: LD_INT 2
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: LD_INT 2
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: LIST
40154: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40155: LD_ADDR_VAR 0 60
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 2
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 2
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: LIST
40195: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40196: LD_ADDR_VAR 0 61
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: LD_INT 2
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: LIST
40235: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40236: LD_ADDR_VAR 0 62
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: LD_INT 2
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: NEG
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: LIST
40276: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40277: LD_ADDR_VAR 0 63
40281: PUSH
40282: LD_INT 1
40284: NEG
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 2
40295: NEG
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 2
40306: NEG
40307: PUSH
40308: LD_INT 1
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: LIST
40320: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40321: LD_ADDR_VAR 0 64
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: LD_INT 2
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 2
40340: NEG
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 2
40352: NEG
40353: PUSH
40354: LD_INT 2
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: LIST
40366: ST_TO_ADDR
// end ; 2 :
40367: GO 43633
40369: LD_INT 2
40371: DOUBLE
40372: EQUAL
40373: IFTRUE 40377
40375: GO 43632
40377: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40378: LD_ADDR_VAR 0 29
40382: PUSH
40383: LD_INT 4
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 4
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 5
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 5
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 4
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 3
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 3
40446: PUSH
40447: LD_INT 1
40449: NEG
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 3
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 5
40468: PUSH
40469: LD_INT 2
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 3
40478: PUSH
40479: LD_INT 3
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 3
40488: PUSH
40489: LD_INT 2
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 4
40498: PUSH
40499: LD_INT 3
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 4
40508: PUSH
40509: LD_INT 4
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 3
40518: PUSH
40519: LD_INT 4
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 2
40528: PUSH
40529: LD_INT 3
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 2
40538: PUSH
40539: LD_INT 2
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 4
40548: PUSH
40549: LD_INT 2
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: LD_INT 4
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: LD_INT 4
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: LD_INT 3
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: LD_INT 4
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 1
40598: PUSH
40599: LD_INT 5
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: LD_INT 5
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: LD_INT 4
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: NEG
40630: PUSH
40631: LD_INT 3
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 2
40640: PUSH
40641: LD_INT 5
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 2
40650: NEG
40651: PUSH
40652: LD_INT 3
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 3
40661: NEG
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 3
40672: NEG
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 2
40684: NEG
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: LD_INT 1
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 3
40706: NEG
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 4
40717: NEG
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 4
40728: NEG
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 4
40740: NEG
40741: PUSH
40742: LD_INT 2
40744: NEG
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 2
40752: NEG
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 4
40763: NEG
40764: PUSH
40765: LD_INT 4
40767: NEG
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 4
40775: NEG
40776: PUSH
40777: LD_INT 5
40779: NEG
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 3
40787: NEG
40788: PUSH
40789: LD_INT 4
40791: NEG
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 3
40799: NEG
40800: PUSH
40801: LD_INT 3
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 4
40811: NEG
40812: PUSH
40813: LD_INT 3
40815: NEG
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 5
40823: NEG
40824: PUSH
40825: LD_INT 4
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 5
40835: NEG
40836: PUSH
40837: LD_INT 5
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 3
40847: NEG
40848: PUSH
40849: LD_INT 5
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 5
40859: NEG
40860: PUSH
40861: LD_INT 3
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40916: LD_ADDR_VAR 0 30
40920: PUSH
40921: LD_INT 4
40923: PUSH
40924: LD_INT 4
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 4
40933: PUSH
40934: LD_INT 3
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 5
40943: PUSH
40944: LD_INT 4
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 5
40953: PUSH
40954: LD_INT 5
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 4
40963: PUSH
40964: LD_INT 5
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 3
40973: PUSH
40974: LD_INT 4
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 3
40983: PUSH
40984: LD_INT 3
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 5
40993: PUSH
40994: LD_INT 3
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 3
41003: PUSH
41004: LD_INT 5
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: LD_INT 3
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: LD_INT 2
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: LD_INT 3
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: LD_INT 4
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: LD_INT 4
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: LD_INT 3
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: NEG
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 2
41085: PUSH
41086: LD_INT 4
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: NEG
41096: PUSH
41097: LD_INT 2
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 4
41106: NEG
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 4
41117: NEG
41118: PUSH
41119: LD_INT 1
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 3
41129: NEG
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 3
41140: NEG
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 4
41151: NEG
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 5
41162: NEG
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 5
41173: NEG
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 5
41185: NEG
41186: PUSH
41187: LD_INT 2
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 3
41197: NEG
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 3
41208: NEG
41209: PUSH
41210: LD_INT 3
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 3
41220: NEG
41221: PUSH
41222: LD_INT 4
41224: NEG
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: LD_INT 3
41236: NEG
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 2
41244: NEG
41245: PUSH
41246: LD_INT 2
41248: NEG
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 3
41256: NEG
41257: PUSH
41258: LD_INT 2
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 4
41268: NEG
41269: PUSH
41270: LD_INT 3
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 4
41280: NEG
41281: PUSH
41282: LD_INT 4
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: LD_INT 4
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 4
41304: NEG
41305: PUSH
41306: LD_INT 2
41308: NEG
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 4
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: LD_INT 5
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: LD_INT 4
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: LD_INT 3
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: LD_INT 3
41363: NEG
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 1
41371: NEG
41372: PUSH
41373: LD_INT 4
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: LD_INT 5
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: LD_INT 3
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 2
41406: NEG
41407: PUSH
41408: LD_INT 5
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41463: LD_ADDR_VAR 0 31
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: LD_INT 4
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: LD_INT 3
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: LD_INT 4
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: LD_INT 5
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 5
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: LD_INT 4
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PUSH
41533: LD_INT 3
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: LD_INT 5
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: LD_INT 3
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 3
41563: NEG
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 3
41574: NEG
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: NEG
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 3
41608: NEG
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 4
41619: NEG
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 4
41630: NEG
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 4
41642: NEG
41643: PUSH
41644: LD_INT 2
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: NEG
41655: PUSH
41656: LD_INT 2
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 4
41665: NEG
41666: PUSH
41667: LD_INT 4
41669: NEG
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 4
41677: NEG
41678: PUSH
41679: LD_INT 5
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 3
41689: NEG
41690: PUSH
41691: LD_INT 4
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 3
41701: NEG
41702: PUSH
41703: LD_INT 3
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 4
41713: NEG
41714: PUSH
41715: LD_INT 3
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 5
41725: NEG
41726: PUSH
41727: LD_INT 4
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 5
41737: NEG
41738: PUSH
41739: LD_INT 5
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 3
41749: NEG
41750: PUSH
41751: LD_INT 5
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 5
41761: NEG
41762: PUSH
41763: LD_INT 3
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: LD_INT 3
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: LD_INT 4
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: LD_INT 3
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: LD_INT 2
41809: NEG
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: LD_INT 2
41820: NEG
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: LD_INT 3
41832: NEG
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: LD_INT 4
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 2
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 2
41863: NEG
41864: PUSH
41865: LD_INT 4
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 4
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 4
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 5
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 5
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 4
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 3
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 3
41936: PUSH
41937: LD_INT 1
41939: NEG
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 3
41947: PUSH
41948: LD_INT 2
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 5
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42013: LD_ADDR_VAR 0 32
42017: PUSH
42018: LD_INT 4
42020: NEG
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 4
42031: NEG
42032: PUSH
42033: LD_INT 1
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 3
42043: NEG
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 3
42054: NEG
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 4
42065: NEG
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 5
42076: NEG
42077: PUSH
42078: LD_INT 0
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 5
42087: NEG
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 5
42099: NEG
42100: PUSH
42101: LD_INT 2
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 3
42111: NEG
42112: PUSH
42113: LD_INT 2
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 3
42122: NEG
42123: PUSH
42124: LD_INT 3
42126: NEG
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 3
42134: NEG
42135: PUSH
42136: LD_INT 4
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: NEG
42147: PUSH
42148: LD_INT 3
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 2
42158: NEG
42159: PUSH
42160: LD_INT 2
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 3
42170: NEG
42171: PUSH
42172: LD_INT 2
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 4
42182: NEG
42183: PUSH
42184: LD_INT 3
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 4
42194: NEG
42195: PUSH
42196: LD_INT 4
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 2
42206: NEG
42207: PUSH
42208: LD_INT 4
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 4
42218: NEG
42219: PUSH
42220: LD_INT 2
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: LD_INT 4
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 5
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 4
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: LD_INT 3
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: LD_INT 3
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: LD_INT 4
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: LD_INT 5
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: LD_INT 3
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 2
42320: NEG
42321: PUSH
42322: LD_INT 5
42324: NEG
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 3
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 3
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 4
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 4
42363: PUSH
42364: LD_INT 1
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 3
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: LD_INT 2
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 4
42415: PUSH
42416: LD_INT 2
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 4
42425: PUSH
42426: LD_INT 4
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 4
42435: PUSH
42436: LD_INT 3
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 5
42445: PUSH
42446: LD_INT 4
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 5
42455: PUSH
42456: LD_INT 5
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 4
42465: PUSH
42466: LD_INT 5
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 3
42475: PUSH
42476: LD_INT 4
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 3
42485: PUSH
42486: LD_INT 3
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 5
42495: PUSH
42496: LD_INT 3
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 3
42505: PUSH
42506: LD_INT 5
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42560: LD_ADDR_VAR 0 33
42564: PUSH
42565: LD_INT 4
42567: NEG
42568: PUSH
42569: LD_INT 4
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 4
42579: NEG
42580: PUSH
42581: LD_INT 5
42583: NEG
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 3
42591: NEG
42592: PUSH
42593: LD_INT 4
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 3
42603: NEG
42604: PUSH
42605: LD_INT 3
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 4
42615: NEG
42616: PUSH
42617: LD_INT 3
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 5
42627: NEG
42628: PUSH
42629: LD_INT 4
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 5
42639: NEG
42640: PUSH
42641: LD_INT 5
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 3
42651: NEG
42652: PUSH
42653: LD_INT 5
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 5
42663: NEG
42664: PUSH
42665: LD_INT 3
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 3
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: LD_INT 4
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: LD_INT 3
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: LD_INT 2
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: LD_INT 2
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: LD_INT 3
42734: NEG
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: LD_INT 4
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: LD_INT 2
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 2
42765: NEG
42766: PUSH
42767: LD_INT 4
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 4
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 4
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 5
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 5
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 4
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 3
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 3
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 3
42849: PUSH
42850: LD_INT 2
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 5
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 3
42870: PUSH
42871: LD_INT 3
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 3
42880: PUSH
42881: LD_INT 2
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 4
42890: PUSH
42891: LD_INT 3
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 4
42900: PUSH
42901: LD_INT 4
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 3
42910: PUSH
42911: LD_INT 4
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 2
42920: PUSH
42921: LD_INT 3
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 2
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 4
42940: PUSH
42941: LD_INT 2
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 2
42950: PUSH
42951: LD_INT 4
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 4
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 3
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: LD_INT 4
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: LD_INT 5
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: LD_INT 5
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: LD_INT 4
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: LD_INT 3
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: LD_INT 5
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: LD_INT 3
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43098: LD_ADDR_VAR 0 34
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: LD_INT 4
43108: NEG
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: LD_INT 5
43119: NEG
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: LD_INT 4
43130: NEG
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 1
43138: PUSH
43139: LD_INT 3
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: LD_INT 3
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: NEG
43161: PUSH
43162: LD_INT 4
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: LD_INT 5
43176: NEG
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 2
43184: PUSH
43185: LD_INT 3
43187: NEG
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 2
43195: NEG
43196: PUSH
43197: LD_INT 5
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 3
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 3
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 4
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 4
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 3
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 2
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 2
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 2
43279: PUSH
43280: LD_INT 2
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 4
43290: PUSH
43291: LD_INT 2
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 4
43300: PUSH
43301: LD_INT 4
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 4
43310: PUSH
43311: LD_INT 3
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 5
43320: PUSH
43321: LD_INT 4
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 5
43330: PUSH
43331: LD_INT 5
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 4
43340: PUSH
43341: LD_INT 5
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 3
43350: PUSH
43351: LD_INT 4
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 3
43360: PUSH
43361: LD_INT 3
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 5
43370: PUSH
43371: LD_INT 3
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 3
43380: PUSH
43381: LD_INT 5
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: LD_INT 3
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: LD_INT 3
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: LD_INT 4
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: LD_INT 4
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: LD_INT 3
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: LD_INT 4
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: NEG
43473: PUSH
43474: LD_INT 2
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 4
43483: NEG
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 4
43494: NEG
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 3
43506: NEG
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 3
43517: NEG
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 4
43528: NEG
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 5
43539: NEG
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 5
43550: NEG
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 5
43562: NEG
43563: PUSH
43564: LD_INT 2
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 3
43574: NEG
43575: PUSH
43576: LD_INT 2
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: ST_TO_ADDR
// end ; end ;
43630: GO 43633
43632: POP
// case btype of b_depot , b_warehouse :
43633: LD_VAR 0 1
43637: PUSH
43638: LD_INT 0
43640: DOUBLE
43641: EQUAL
43642: IFTRUE 43652
43644: LD_INT 1
43646: DOUBLE
43647: EQUAL
43648: IFTRUE 43652
43650: GO 43853
43652: POP
// case nation of nation_american :
43653: LD_VAR 0 5
43657: PUSH
43658: LD_INT 1
43660: DOUBLE
43661: EQUAL
43662: IFTRUE 43666
43664: GO 43722
43666: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43667: LD_ADDR_VAR 0 9
43671: PUSH
43672: LD_VAR 0 11
43676: PUSH
43677: LD_VAR 0 12
43681: PUSH
43682: LD_VAR 0 13
43686: PUSH
43687: LD_VAR 0 14
43691: PUSH
43692: LD_VAR 0 15
43696: PUSH
43697: LD_VAR 0 16
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: PUSH
43710: LD_VAR 0 4
43714: PUSH
43715: LD_INT 1
43717: PLUS
43718: ARRAY
43719: ST_TO_ADDR
43720: GO 43851
43722: LD_INT 2
43724: DOUBLE
43725: EQUAL
43726: IFTRUE 43730
43728: GO 43786
43730: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43731: LD_ADDR_VAR 0 9
43735: PUSH
43736: LD_VAR 0 17
43740: PUSH
43741: LD_VAR 0 18
43745: PUSH
43746: LD_VAR 0 19
43750: PUSH
43751: LD_VAR 0 20
43755: PUSH
43756: LD_VAR 0 21
43760: PUSH
43761: LD_VAR 0 22
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: PUSH
43774: LD_VAR 0 4
43778: PUSH
43779: LD_INT 1
43781: PLUS
43782: ARRAY
43783: ST_TO_ADDR
43784: GO 43851
43786: LD_INT 3
43788: DOUBLE
43789: EQUAL
43790: IFTRUE 43794
43792: GO 43850
43794: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43795: LD_ADDR_VAR 0 9
43799: PUSH
43800: LD_VAR 0 23
43804: PUSH
43805: LD_VAR 0 24
43809: PUSH
43810: LD_VAR 0 25
43814: PUSH
43815: LD_VAR 0 26
43819: PUSH
43820: LD_VAR 0 27
43824: PUSH
43825: LD_VAR 0 28
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: PUSH
43838: LD_VAR 0 4
43842: PUSH
43843: LD_INT 1
43845: PLUS
43846: ARRAY
43847: ST_TO_ADDR
43848: GO 43851
43850: POP
43851: GO 44406
43853: LD_INT 2
43855: DOUBLE
43856: EQUAL
43857: IFTRUE 43867
43859: LD_INT 3
43861: DOUBLE
43862: EQUAL
43863: IFTRUE 43867
43865: GO 43923
43867: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43868: LD_ADDR_VAR 0 9
43872: PUSH
43873: LD_VAR 0 29
43877: PUSH
43878: LD_VAR 0 30
43882: PUSH
43883: LD_VAR 0 31
43887: PUSH
43888: LD_VAR 0 32
43892: PUSH
43893: LD_VAR 0 33
43897: PUSH
43898: LD_VAR 0 34
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: PUSH
43911: LD_VAR 0 4
43915: PUSH
43916: LD_INT 1
43918: PLUS
43919: ARRAY
43920: ST_TO_ADDR
43921: GO 44406
43923: LD_INT 16
43925: DOUBLE
43926: EQUAL
43927: IFTRUE 43985
43929: LD_INT 17
43931: DOUBLE
43932: EQUAL
43933: IFTRUE 43985
43935: LD_INT 18
43937: DOUBLE
43938: EQUAL
43939: IFTRUE 43985
43941: LD_INT 19
43943: DOUBLE
43944: EQUAL
43945: IFTRUE 43985
43947: LD_INT 22
43949: DOUBLE
43950: EQUAL
43951: IFTRUE 43985
43953: LD_INT 20
43955: DOUBLE
43956: EQUAL
43957: IFTRUE 43985
43959: LD_INT 21
43961: DOUBLE
43962: EQUAL
43963: IFTRUE 43985
43965: LD_INT 23
43967: DOUBLE
43968: EQUAL
43969: IFTRUE 43985
43971: LD_INT 24
43973: DOUBLE
43974: EQUAL
43975: IFTRUE 43985
43977: LD_INT 25
43979: DOUBLE
43980: EQUAL
43981: IFTRUE 43985
43983: GO 44041
43985: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43986: LD_ADDR_VAR 0 9
43990: PUSH
43991: LD_VAR 0 35
43995: PUSH
43996: LD_VAR 0 36
44000: PUSH
44001: LD_VAR 0 37
44005: PUSH
44006: LD_VAR 0 38
44010: PUSH
44011: LD_VAR 0 39
44015: PUSH
44016: LD_VAR 0 40
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: PUSH
44029: LD_VAR 0 4
44033: PUSH
44034: LD_INT 1
44036: PLUS
44037: ARRAY
44038: ST_TO_ADDR
44039: GO 44406
44041: LD_INT 6
44043: DOUBLE
44044: EQUAL
44045: IFTRUE 44097
44047: LD_INT 7
44049: DOUBLE
44050: EQUAL
44051: IFTRUE 44097
44053: LD_INT 8
44055: DOUBLE
44056: EQUAL
44057: IFTRUE 44097
44059: LD_INT 13
44061: DOUBLE
44062: EQUAL
44063: IFTRUE 44097
44065: LD_INT 12
44067: DOUBLE
44068: EQUAL
44069: IFTRUE 44097
44071: LD_INT 15
44073: DOUBLE
44074: EQUAL
44075: IFTRUE 44097
44077: LD_INT 11
44079: DOUBLE
44080: EQUAL
44081: IFTRUE 44097
44083: LD_INT 14
44085: DOUBLE
44086: EQUAL
44087: IFTRUE 44097
44089: LD_INT 10
44091: DOUBLE
44092: EQUAL
44093: IFTRUE 44097
44095: GO 44153
44097: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44098: LD_ADDR_VAR 0 9
44102: PUSH
44103: LD_VAR 0 41
44107: PUSH
44108: LD_VAR 0 42
44112: PUSH
44113: LD_VAR 0 43
44117: PUSH
44118: LD_VAR 0 44
44122: PUSH
44123: LD_VAR 0 45
44127: PUSH
44128: LD_VAR 0 46
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: PUSH
44141: LD_VAR 0 4
44145: PUSH
44146: LD_INT 1
44148: PLUS
44149: ARRAY
44150: ST_TO_ADDR
44151: GO 44406
44153: LD_INT 36
44155: DOUBLE
44156: EQUAL
44157: IFTRUE 44161
44159: GO 44217
44161: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44162: LD_ADDR_VAR 0 9
44166: PUSH
44167: LD_VAR 0 47
44171: PUSH
44172: LD_VAR 0 48
44176: PUSH
44177: LD_VAR 0 49
44181: PUSH
44182: LD_VAR 0 50
44186: PUSH
44187: LD_VAR 0 51
44191: PUSH
44192: LD_VAR 0 52
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: PUSH
44205: LD_VAR 0 4
44209: PUSH
44210: LD_INT 1
44212: PLUS
44213: ARRAY
44214: ST_TO_ADDR
44215: GO 44406
44217: LD_INT 4
44219: DOUBLE
44220: EQUAL
44221: IFTRUE 44243
44223: LD_INT 5
44225: DOUBLE
44226: EQUAL
44227: IFTRUE 44243
44229: LD_INT 34
44231: DOUBLE
44232: EQUAL
44233: IFTRUE 44243
44235: LD_INT 37
44237: DOUBLE
44238: EQUAL
44239: IFTRUE 44243
44241: GO 44299
44243: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44244: LD_ADDR_VAR 0 9
44248: PUSH
44249: LD_VAR 0 53
44253: PUSH
44254: LD_VAR 0 54
44258: PUSH
44259: LD_VAR 0 55
44263: PUSH
44264: LD_VAR 0 56
44268: PUSH
44269: LD_VAR 0 57
44273: PUSH
44274: LD_VAR 0 58
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: PUSH
44287: LD_VAR 0 4
44291: PUSH
44292: LD_INT 1
44294: PLUS
44295: ARRAY
44296: ST_TO_ADDR
44297: GO 44406
44299: LD_INT 31
44301: DOUBLE
44302: EQUAL
44303: IFTRUE 44349
44305: LD_INT 32
44307: DOUBLE
44308: EQUAL
44309: IFTRUE 44349
44311: LD_INT 33
44313: DOUBLE
44314: EQUAL
44315: IFTRUE 44349
44317: LD_INT 27
44319: DOUBLE
44320: EQUAL
44321: IFTRUE 44349
44323: LD_INT 26
44325: DOUBLE
44326: EQUAL
44327: IFTRUE 44349
44329: LD_INT 28
44331: DOUBLE
44332: EQUAL
44333: IFTRUE 44349
44335: LD_INT 29
44337: DOUBLE
44338: EQUAL
44339: IFTRUE 44349
44341: LD_INT 30
44343: DOUBLE
44344: EQUAL
44345: IFTRUE 44349
44347: GO 44405
44349: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
44350: LD_ADDR_VAR 0 9
44354: PUSH
44355: LD_VAR 0 59
44359: PUSH
44360: LD_VAR 0 60
44364: PUSH
44365: LD_VAR 0 61
44369: PUSH
44370: LD_VAR 0 62
44374: PUSH
44375: LD_VAR 0 63
44379: PUSH
44380: LD_VAR 0 64
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: PUSH
44393: LD_VAR 0 4
44397: PUSH
44398: LD_INT 1
44400: PLUS
44401: ARRAY
44402: ST_TO_ADDR
44403: GO 44406
44405: POP
// temp_list2 = [ ] ;
44406: LD_ADDR_VAR 0 10
44410: PUSH
44411: EMPTY
44412: ST_TO_ADDR
// for i in temp_list do
44413: LD_ADDR_VAR 0 8
44417: PUSH
44418: LD_VAR 0 9
44422: PUSH
44423: FOR_IN
44424: IFFALSE 44476
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44426: LD_ADDR_VAR 0 10
44430: PUSH
44431: LD_VAR 0 10
44435: PUSH
44436: LD_VAR 0 8
44440: PUSH
44441: LD_INT 1
44443: ARRAY
44444: PUSH
44445: LD_VAR 0 2
44449: PLUS
44450: PUSH
44451: LD_VAR 0 8
44455: PUSH
44456: LD_INT 2
44458: ARRAY
44459: PUSH
44460: LD_VAR 0 3
44464: PLUS
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: EMPTY
44471: LIST
44472: ADD
44473: ST_TO_ADDR
44474: GO 44423
44476: POP
44477: POP
// result = temp_list2 ;
44478: LD_ADDR_VAR 0 7
44482: PUSH
44483: LD_VAR 0 10
44487: ST_TO_ADDR
// end ;
44488: LD_VAR 0 7
44492: RET
// export function EnemyInRange ( unit , dist ) ; begin
44493: LD_INT 0
44495: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44496: LD_ADDR_VAR 0 3
44500: PUSH
44501: LD_VAR 0 1
44505: PPUSH
44506: CALL_OW 255
44510: PPUSH
44511: LD_VAR 0 1
44515: PPUSH
44516: CALL_OW 250
44520: PPUSH
44521: LD_VAR 0 1
44525: PPUSH
44526: CALL_OW 251
44530: PPUSH
44531: LD_VAR 0 2
44535: PPUSH
44536: CALL 17750 0 4
44540: PUSH
44541: LD_INT 4
44543: ARRAY
44544: ST_TO_ADDR
// end ;
44545: LD_VAR 0 3
44549: RET
// export function PlayerSeeMe ( unit ) ; begin
44550: LD_INT 0
44552: PPUSH
// result := See ( your_side , unit ) ;
44553: LD_ADDR_VAR 0 2
44557: PUSH
44558: LD_OWVAR 2
44562: PPUSH
44563: LD_VAR 0 1
44567: PPUSH
44568: CALL_OW 292
44572: ST_TO_ADDR
// end ;
44573: LD_VAR 0 2
44577: RET
// export function ReverseDir ( unit ) ; begin
44578: LD_INT 0
44580: PPUSH
// if not unit then
44581: LD_VAR 0 1
44585: NOT
44586: IFFALSE 44590
// exit ;
44588: GO 44613
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44590: LD_ADDR_VAR 0 2
44594: PUSH
44595: LD_VAR 0 1
44599: PPUSH
44600: CALL_OW 254
44604: PUSH
44605: LD_INT 3
44607: PLUS
44608: PUSH
44609: LD_INT 6
44611: MOD
44612: ST_TO_ADDR
// end ;
44613: LD_VAR 0 2
44617: RET
// export function ReverseArray ( array ) ; var i ; begin
44618: LD_INT 0
44620: PPUSH
44621: PPUSH
// if not array then
44622: LD_VAR 0 1
44626: NOT
44627: IFFALSE 44631
// exit ;
44629: GO 44686
// result := [ ] ;
44631: LD_ADDR_VAR 0 2
44635: PUSH
44636: EMPTY
44637: ST_TO_ADDR
// for i := array downto 1 do
44638: LD_ADDR_VAR 0 3
44642: PUSH
44643: DOUBLE
44644: LD_VAR 0 1
44648: INC
44649: ST_TO_ADDR
44650: LD_INT 1
44652: PUSH
44653: FOR_DOWNTO
44654: IFFALSE 44684
// result := Join ( result , array [ i ] ) ;
44656: LD_ADDR_VAR 0 2
44660: PUSH
44661: LD_VAR 0 2
44665: PPUSH
44666: LD_VAR 0 1
44670: PUSH
44671: LD_VAR 0 3
44675: ARRAY
44676: PPUSH
44677: CALL 49538 0 2
44681: ST_TO_ADDR
44682: GO 44653
44684: POP
44685: POP
// end ;
44686: LD_VAR 0 2
44690: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44691: LD_INT 0
44693: PPUSH
44694: PPUSH
44695: PPUSH
44696: PPUSH
44697: PPUSH
44698: PPUSH
// if not unit or not hexes then
44699: LD_VAR 0 1
44703: NOT
44704: IFTRUE 44713
44706: PUSH
44707: LD_VAR 0 2
44711: NOT
44712: OR
44713: IFFALSE 44717
// exit ;
44715: GO 44840
// dist := 9999 ;
44717: LD_ADDR_VAR 0 5
44721: PUSH
44722: LD_INT 9999
44724: ST_TO_ADDR
// for i = 1 to hexes do
44725: LD_ADDR_VAR 0 4
44729: PUSH
44730: DOUBLE
44731: LD_INT 1
44733: DEC
44734: ST_TO_ADDR
44735: LD_VAR 0 2
44739: PUSH
44740: FOR_TO
44741: IFFALSE 44828
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44743: LD_ADDR_VAR 0 6
44747: PUSH
44748: LD_VAR 0 1
44752: PPUSH
44753: LD_VAR 0 2
44757: PUSH
44758: LD_VAR 0 4
44762: ARRAY
44763: PUSH
44764: LD_INT 1
44766: ARRAY
44767: PPUSH
44768: LD_VAR 0 2
44772: PUSH
44773: LD_VAR 0 4
44777: ARRAY
44778: PUSH
44779: LD_INT 2
44781: ARRAY
44782: PPUSH
44783: CALL_OW 297
44787: ST_TO_ADDR
// if tdist < dist then
44788: LD_VAR 0 6
44792: PUSH
44793: LD_VAR 0 5
44797: LESS
44798: IFFALSE 44826
// begin hex := hexes [ i ] ;
44800: LD_ADDR_VAR 0 8
44804: PUSH
44805: LD_VAR 0 2
44809: PUSH
44810: LD_VAR 0 4
44814: ARRAY
44815: ST_TO_ADDR
// dist := tdist ;
44816: LD_ADDR_VAR 0 5
44820: PUSH
44821: LD_VAR 0 6
44825: ST_TO_ADDR
// end ; end ;
44826: GO 44740
44828: POP
44829: POP
// result := hex ;
44830: LD_ADDR_VAR 0 3
44834: PUSH
44835: LD_VAR 0 8
44839: ST_TO_ADDR
// end ;
44840: LD_VAR 0 3
44844: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44845: LD_INT 0
44847: PPUSH
44848: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44849: LD_VAR 0 1
44853: NOT
44854: IFTRUE 44893
44856: PUSH
44857: LD_VAR 0 1
44861: PUSH
44862: LD_INT 21
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 23
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PPUSH
44886: CALL_OW 69
44890: IN
44891: NOT
44892: OR
44893: IFFALSE 44897
// exit ;
44895: GO 44944
// for i = 1 to 3 do
44897: LD_ADDR_VAR 0 3
44901: PUSH
44902: DOUBLE
44903: LD_INT 1
44905: DEC
44906: ST_TO_ADDR
44907: LD_INT 3
44909: PUSH
44910: FOR_TO
44911: IFFALSE 44942
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44913: LD_VAR 0 1
44917: PPUSH
44918: CALL_OW 250
44922: PPUSH
44923: LD_VAR 0 1
44927: PPUSH
44928: CALL_OW 251
44932: PPUSH
44933: LD_INT 1
44935: PPUSH
44936: CALL_OW 453
44940: GO 44910
44942: POP
44943: POP
// end ;
44944: LD_VAR 0 2
44948: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44949: LD_INT 0
44951: PPUSH
44952: PPUSH
44953: PPUSH
44954: PPUSH
44955: PPUSH
44956: PPUSH
// if not unit or not enemy_unit then
44957: LD_VAR 0 1
44961: NOT
44962: IFTRUE 44971
44964: PUSH
44965: LD_VAR 0 2
44969: NOT
44970: OR
44971: IFFALSE 44975
// exit ;
44973: GO 45456
// if GetLives ( i ) < 250 then
44975: LD_VAR 0 4
44979: PPUSH
44980: CALL_OW 256
44984: PUSH
44985: LD_INT 250
44987: LESS
44988: IFFALSE 45001
// begin ComAutodestruct ( i ) ;
44990: LD_VAR 0 4
44994: PPUSH
44995: CALL 44845 0 1
// exit ;
44999: GO 45456
// end ; x := GetX ( enemy_unit ) ;
45001: LD_ADDR_VAR 0 7
45005: PUSH
45006: LD_VAR 0 2
45010: PPUSH
45011: CALL_OW 250
45015: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45016: LD_ADDR_VAR 0 8
45020: PUSH
45021: LD_VAR 0 2
45025: PPUSH
45026: CALL_OW 251
45030: ST_TO_ADDR
// if not x or not y then
45031: LD_VAR 0 7
45035: NOT
45036: IFTRUE 45045
45038: PUSH
45039: LD_VAR 0 8
45043: NOT
45044: OR
45045: IFFALSE 45049
// exit ;
45047: GO 45456
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45049: LD_ADDR_VAR 0 6
45053: PUSH
45054: LD_VAR 0 7
45058: PPUSH
45059: LD_INT 0
45061: PPUSH
45062: LD_INT 4
45064: PPUSH
45065: CALL_OW 272
45069: PUSH
45070: LD_VAR 0 8
45074: PPUSH
45075: LD_INT 0
45077: PPUSH
45078: LD_INT 4
45080: PPUSH
45081: CALL_OW 273
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_VAR 0 7
45094: PPUSH
45095: LD_INT 1
45097: PPUSH
45098: LD_INT 4
45100: PPUSH
45101: CALL_OW 272
45105: PUSH
45106: LD_VAR 0 8
45110: PPUSH
45111: LD_INT 1
45113: PPUSH
45114: LD_INT 4
45116: PPUSH
45117: CALL_OW 273
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_VAR 0 7
45130: PPUSH
45131: LD_INT 2
45133: PPUSH
45134: LD_INT 4
45136: PPUSH
45137: CALL_OW 272
45141: PUSH
45142: LD_VAR 0 8
45146: PPUSH
45147: LD_INT 2
45149: PPUSH
45150: LD_INT 4
45152: PPUSH
45153: CALL_OW 273
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_VAR 0 7
45166: PPUSH
45167: LD_INT 3
45169: PPUSH
45170: LD_INT 4
45172: PPUSH
45173: CALL_OW 272
45177: PUSH
45178: LD_VAR 0 8
45182: PPUSH
45183: LD_INT 3
45185: PPUSH
45186: LD_INT 4
45188: PPUSH
45189: CALL_OW 273
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_VAR 0 7
45202: PPUSH
45203: LD_INT 4
45205: PPUSH
45206: LD_INT 4
45208: PPUSH
45209: CALL_OW 272
45213: PUSH
45214: LD_VAR 0 8
45218: PPUSH
45219: LD_INT 4
45221: PPUSH
45222: LD_INT 4
45224: PPUSH
45225: CALL_OW 273
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_VAR 0 7
45238: PPUSH
45239: LD_INT 5
45241: PPUSH
45242: LD_INT 4
45244: PPUSH
45245: CALL_OW 272
45249: PUSH
45250: LD_VAR 0 8
45254: PPUSH
45255: LD_INT 5
45257: PPUSH
45258: LD_INT 4
45260: PPUSH
45261: CALL_OW 273
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: ST_TO_ADDR
// for i = tmp downto 1 do
45278: LD_ADDR_VAR 0 4
45282: PUSH
45283: DOUBLE
45284: LD_VAR 0 6
45288: INC
45289: ST_TO_ADDR
45290: LD_INT 1
45292: PUSH
45293: FOR_DOWNTO
45294: IFFALSE 45397
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45296: LD_VAR 0 6
45300: PUSH
45301: LD_VAR 0 4
45305: ARRAY
45306: PUSH
45307: LD_INT 1
45309: ARRAY
45310: PPUSH
45311: LD_VAR 0 6
45315: PUSH
45316: LD_VAR 0 4
45320: ARRAY
45321: PUSH
45322: LD_INT 2
45324: ARRAY
45325: PPUSH
45326: CALL_OW 488
45330: NOT
45331: IFTRUE 45373
45333: PUSH
45334: LD_VAR 0 6
45338: PUSH
45339: LD_VAR 0 4
45343: ARRAY
45344: PUSH
45345: LD_INT 1
45347: ARRAY
45348: PPUSH
45349: LD_VAR 0 6
45353: PUSH
45354: LD_VAR 0 4
45358: ARRAY
45359: PUSH
45360: LD_INT 2
45362: ARRAY
45363: PPUSH
45364: CALL_OW 428
45368: PUSH
45369: LD_INT 0
45371: NONEQUAL
45372: OR
45373: IFFALSE 45395
// tmp := Delete ( tmp , i ) ;
45375: LD_ADDR_VAR 0 6
45379: PUSH
45380: LD_VAR 0 6
45384: PPUSH
45385: LD_VAR 0 4
45389: PPUSH
45390: CALL_OW 3
45394: ST_TO_ADDR
45395: GO 45293
45397: POP
45398: POP
// j := GetClosestHex ( unit , tmp ) ;
45399: LD_ADDR_VAR 0 5
45403: PUSH
45404: LD_VAR 0 1
45408: PPUSH
45409: LD_VAR 0 6
45413: PPUSH
45414: CALL 44691 0 2
45418: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45419: LD_VAR 0 1
45423: PPUSH
45424: LD_VAR 0 5
45428: PUSH
45429: LD_INT 1
45431: ARRAY
45432: PPUSH
45433: LD_VAR 0 5
45437: PUSH
45438: LD_INT 2
45440: ARRAY
45441: PPUSH
45442: CALL_OW 111
// result := j ;
45446: LD_ADDR_VAR 0 3
45450: PUSH
45451: LD_VAR 0 5
45455: ST_TO_ADDR
// end ;
45456: LD_VAR 0 3
45460: RET
// export function PrepareApemanSoldier ( ) ; begin
45461: LD_INT 0
45463: PPUSH
// uc_nation := 0 ;
45464: LD_ADDR_OWVAR 21
45468: PUSH
45469: LD_INT 0
45471: ST_TO_ADDR
// hc_sex := sex_male ;
45472: LD_ADDR_OWVAR 27
45476: PUSH
45477: LD_INT 1
45479: ST_TO_ADDR
// hc_name :=  ;
45480: LD_ADDR_OWVAR 26
45484: PUSH
45485: LD_STRING 
45487: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
45488: LD_ADDR_OWVAR 28
45492: PUSH
45493: LD_INT 15
45495: ST_TO_ADDR
// hc_gallery :=  ;
45496: LD_ADDR_OWVAR 33
45500: PUSH
45501: LD_STRING 
45503: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45504: LD_ADDR_OWVAR 31
45508: PUSH
45509: LD_INT 0
45511: PPUSH
45512: LD_INT 3
45514: PPUSH
45515: CALL_OW 12
45519: PUSH
45520: LD_INT 0
45522: PPUSH
45523: LD_INT 3
45525: PPUSH
45526: CALL_OW 12
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45543: LD_ADDR_OWVAR 29
45547: PUSH
45548: LD_INT 10
45550: PUSH
45551: LD_INT 12
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: ST_TO_ADDR
// end ;
45558: LD_VAR 0 1
45562: RET
// export function PrepareApemanEngineer ( ) ; begin
45563: LD_INT 0
45565: PPUSH
// uc_nation := 0 ;
45566: LD_ADDR_OWVAR 21
45570: PUSH
45571: LD_INT 0
45573: ST_TO_ADDR
// hc_sex := sex_male ;
45574: LD_ADDR_OWVAR 27
45578: PUSH
45579: LD_INT 1
45581: ST_TO_ADDR
// hc_name :=  ;
45582: LD_ADDR_OWVAR 26
45586: PUSH
45587: LD_STRING 
45589: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
45590: LD_ADDR_OWVAR 28
45594: PUSH
45595: LD_INT 16
45597: ST_TO_ADDR
// hc_gallery :=  ;
45598: LD_ADDR_OWVAR 33
45602: PUSH
45603: LD_STRING 
45605: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45606: LD_ADDR_OWVAR 31
45610: PUSH
45611: LD_INT 0
45613: PPUSH
45614: LD_INT 3
45616: PPUSH
45617: CALL_OW 12
45621: PUSH
45622: LD_INT 0
45624: PPUSH
45625: LD_INT 3
45627: PPUSH
45628: CALL_OW 12
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45645: LD_ADDR_OWVAR 29
45649: PUSH
45650: LD_INT 10
45652: PUSH
45653: LD_INT 12
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: ST_TO_ADDR
// end ;
45660: LD_VAR 0 1
45664: RET
// export function PrepareApeman ( agressivity ) ; begin
45665: LD_INT 0
45667: PPUSH
// uc_side := 0 ;
45668: LD_ADDR_OWVAR 20
45672: PUSH
45673: LD_INT 0
45675: ST_TO_ADDR
// uc_nation := 0 ;
45676: LD_ADDR_OWVAR 21
45680: PUSH
45681: LD_INT 0
45683: ST_TO_ADDR
// hc_sex := sex_male ;
45684: LD_ADDR_OWVAR 27
45688: PUSH
45689: LD_INT 1
45691: ST_TO_ADDR
// hc_class := class_apeman ;
45692: LD_ADDR_OWVAR 28
45696: PUSH
45697: LD_INT 12
45699: ST_TO_ADDR
// hc_gallery :=  ;
45700: LD_ADDR_OWVAR 33
45704: PUSH
45705: LD_STRING 
45707: ST_TO_ADDR
// hc_name :=  ;
45708: LD_ADDR_OWVAR 26
45712: PUSH
45713: LD_STRING 
45715: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45716: LD_ADDR_OWVAR 29
45720: PUSH
45721: LD_INT 10
45723: PUSH
45724: LD_INT 12
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: ST_TO_ADDR
// if agressivity = 0 then
45731: LD_VAR 0 1
45735: PUSH
45736: LD_INT 0
45738: EQUAL
45739: IFFALSE 45751
// hc_agressivity := 0 else
45741: LD_ADDR_OWVAR 35
45745: PUSH
45746: LD_INT 0
45748: ST_TO_ADDR
45749: GO 45772
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45751: LD_ADDR_OWVAR 35
45755: PUSH
45756: LD_VAR 0 1
45760: NEG
45761: PPUSH
45762: LD_VAR 0 1
45766: PPUSH
45767: CALL_OW 12
45771: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45772: LD_ADDR_OWVAR 31
45776: PUSH
45777: LD_INT 0
45779: PPUSH
45780: LD_INT 3
45782: PPUSH
45783: CALL_OW 12
45787: PUSH
45788: LD_INT 0
45790: PPUSH
45791: LD_INT 3
45793: PPUSH
45794: CALL_OW 12
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: ST_TO_ADDR
// end ;
45811: LD_VAR 0 2
45815: RET
// export function PrepareTiger ( agressivity ) ; begin
45816: LD_INT 0
45818: PPUSH
// uc_side := 0 ;
45819: LD_ADDR_OWVAR 20
45823: PUSH
45824: LD_INT 0
45826: ST_TO_ADDR
// uc_nation := 0 ;
45827: LD_ADDR_OWVAR 21
45831: PUSH
45832: LD_INT 0
45834: ST_TO_ADDR
// InitHc ;
45835: CALL_OW 19
// hc_class := class_tiger ;
45839: LD_ADDR_OWVAR 28
45843: PUSH
45844: LD_INT 14
45846: ST_TO_ADDR
// hc_gallery :=  ;
45847: LD_ADDR_OWVAR 33
45851: PUSH
45852: LD_STRING 
45854: ST_TO_ADDR
// hc_name :=  ;
45855: LD_ADDR_OWVAR 26
45859: PUSH
45860: LD_STRING 
45862: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45863: LD_ADDR_OWVAR 35
45867: PUSH
45868: LD_VAR 0 1
45872: NEG
45873: PPUSH
45874: LD_VAR 0 1
45878: PPUSH
45879: CALL_OW 12
45883: ST_TO_ADDR
// end ;
45884: LD_VAR 0 2
45888: RET
// export function PrepareEnchidna ( ) ; begin
45889: LD_INT 0
45891: PPUSH
// uc_side := 0 ;
45892: LD_ADDR_OWVAR 20
45896: PUSH
45897: LD_INT 0
45899: ST_TO_ADDR
// uc_nation := 0 ;
45900: LD_ADDR_OWVAR 21
45904: PUSH
45905: LD_INT 0
45907: ST_TO_ADDR
// InitHc ;
45908: CALL_OW 19
// hc_class := class_baggie ;
45912: LD_ADDR_OWVAR 28
45916: PUSH
45917: LD_INT 13
45919: ST_TO_ADDR
// hc_gallery :=  ;
45920: LD_ADDR_OWVAR 33
45924: PUSH
45925: LD_STRING 
45927: ST_TO_ADDR
// hc_name :=  ;
45928: LD_ADDR_OWVAR 26
45932: PUSH
45933: LD_STRING 
45935: ST_TO_ADDR
// end ;
45936: LD_VAR 0 1
45940: RET
// export function PrepareFrog ( ) ; begin
45941: LD_INT 0
45943: PPUSH
// uc_side := 0 ;
45944: LD_ADDR_OWVAR 20
45948: PUSH
45949: LD_INT 0
45951: ST_TO_ADDR
// uc_nation := 0 ;
45952: LD_ADDR_OWVAR 21
45956: PUSH
45957: LD_INT 0
45959: ST_TO_ADDR
// InitHc ;
45960: CALL_OW 19
// hc_class := class_frog ;
45964: LD_ADDR_OWVAR 28
45968: PUSH
45969: LD_INT 19
45971: ST_TO_ADDR
// hc_gallery :=  ;
45972: LD_ADDR_OWVAR 33
45976: PUSH
45977: LD_STRING 
45979: ST_TO_ADDR
// hc_name :=  ;
45980: LD_ADDR_OWVAR 26
45984: PUSH
45985: LD_STRING 
45987: ST_TO_ADDR
// end ;
45988: LD_VAR 0 1
45992: RET
// export function PrepareFish ( ) ; begin
45993: LD_INT 0
45995: PPUSH
// uc_side := 0 ;
45996: LD_ADDR_OWVAR 20
46000: PUSH
46001: LD_INT 0
46003: ST_TO_ADDR
// uc_nation := 0 ;
46004: LD_ADDR_OWVAR 21
46008: PUSH
46009: LD_INT 0
46011: ST_TO_ADDR
// InitHc ;
46012: CALL_OW 19
// hc_class := class_fish ;
46016: LD_ADDR_OWVAR 28
46020: PUSH
46021: LD_INT 20
46023: ST_TO_ADDR
// hc_gallery :=  ;
46024: LD_ADDR_OWVAR 33
46028: PUSH
46029: LD_STRING 
46031: ST_TO_ADDR
// hc_name :=  ;
46032: LD_ADDR_OWVAR 26
46036: PUSH
46037: LD_STRING 
46039: ST_TO_ADDR
// end ;
46040: LD_VAR 0 1
46044: RET
// export function PrepareBird ( ) ; begin
46045: LD_INT 0
46047: PPUSH
// uc_side := 0 ;
46048: LD_ADDR_OWVAR 20
46052: PUSH
46053: LD_INT 0
46055: ST_TO_ADDR
// uc_nation := 0 ;
46056: LD_ADDR_OWVAR 21
46060: PUSH
46061: LD_INT 0
46063: ST_TO_ADDR
// InitHc ;
46064: CALL_OW 19
// hc_class := class_phororhacos ;
46068: LD_ADDR_OWVAR 28
46072: PUSH
46073: LD_INT 18
46075: ST_TO_ADDR
// hc_gallery :=  ;
46076: LD_ADDR_OWVAR 33
46080: PUSH
46081: LD_STRING 
46083: ST_TO_ADDR
// hc_name :=  ;
46084: LD_ADDR_OWVAR 26
46088: PUSH
46089: LD_STRING 
46091: ST_TO_ADDR
// end ;
46092: LD_VAR 0 1
46096: RET
// export function PrepareHorse ( ) ; begin
46097: LD_INT 0
46099: PPUSH
// uc_side := 0 ;
46100: LD_ADDR_OWVAR 20
46104: PUSH
46105: LD_INT 0
46107: ST_TO_ADDR
// uc_nation := 0 ;
46108: LD_ADDR_OWVAR 21
46112: PUSH
46113: LD_INT 0
46115: ST_TO_ADDR
// InitHc ;
46116: CALL_OW 19
// hc_class := class_horse ;
46120: LD_ADDR_OWVAR 28
46124: PUSH
46125: LD_INT 21
46127: ST_TO_ADDR
// hc_gallery :=  ;
46128: LD_ADDR_OWVAR 33
46132: PUSH
46133: LD_STRING 
46135: ST_TO_ADDR
// hc_name :=  ;
46136: LD_ADDR_OWVAR 26
46140: PUSH
46141: LD_STRING 
46143: ST_TO_ADDR
// end ;
46144: LD_VAR 0 1
46148: RET
// export function PrepareMastodont ( ) ; begin
46149: LD_INT 0
46151: PPUSH
// uc_side := 0 ;
46152: LD_ADDR_OWVAR 20
46156: PUSH
46157: LD_INT 0
46159: ST_TO_ADDR
// uc_nation := 0 ;
46160: LD_ADDR_OWVAR 21
46164: PUSH
46165: LD_INT 0
46167: ST_TO_ADDR
// vc_chassis := class_mastodont ;
46168: LD_ADDR_OWVAR 37
46172: PUSH
46173: LD_INT 31
46175: ST_TO_ADDR
// vc_control := control_rider ;
46176: LD_ADDR_OWVAR 38
46180: PUSH
46181: LD_INT 4
46183: ST_TO_ADDR
// end ;
46184: LD_VAR 0 1
46188: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46189: LD_INT 0
46191: PPUSH
46192: PPUSH
46193: PPUSH
// uc_side = 0 ;
46194: LD_ADDR_OWVAR 20
46198: PUSH
46199: LD_INT 0
46201: ST_TO_ADDR
// uc_nation = 0 ;
46202: LD_ADDR_OWVAR 21
46206: PUSH
46207: LD_INT 0
46209: ST_TO_ADDR
// InitHc_All ( ) ;
46210: CALL_OW 584
// InitVc ;
46214: CALL_OW 20
// if mastodonts then
46218: LD_VAR 0 6
46222: IFFALSE 46289
// for i = 1 to mastodonts do
46224: LD_ADDR_VAR 0 11
46228: PUSH
46229: DOUBLE
46230: LD_INT 1
46232: DEC
46233: ST_TO_ADDR
46234: LD_VAR 0 6
46238: PUSH
46239: FOR_TO
46240: IFFALSE 46287
// begin vc_chassis := 31 ;
46242: LD_ADDR_OWVAR 37
46246: PUSH
46247: LD_INT 31
46249: ST_TO_ADDR
// vc_control := control_rider ;
46250: LD_ADDR_OWVAR 38
46254: PUSH
46255: LD_INT 4
46257: ST_TO_ADDR
// animal := CreateVehicle ;
46258: LD_ADDR_VAR 0 12
46262: PUSH
46263: CALL_OW 45
46267: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46268: LD_VAR 0 12
46272: PPUSH
46273: LD_VAR 0 8
46277: PPUSH
46278: LD_INT 0
46280: PPUSH
46281: CALL 48431 0 3
// end ;
46285: GO 46239
46287: POP
46288: POP
// if horses then
46289: LD_VAR 0 5
46293: IFFALSE 46360
// for i = 1 to horses do
46295: LD_ADDR_VAR 0 11
46299: PUSH
46300: DOUBLE
46301: LD_INT 1
46303: DEC
46304: ST_TO_ADDR
46305: LD_VAR 0 5
46309: PUSH
46310: FOR_TO
46311: IFFALSE 46358
// begin hc_class := 21 ;
46313: LD_ADDR_OWVAR 28
46317: PUSH
46318: LD_INT 21
46320: ST_TO_ADDR
// hc_gallery :=  ;
46321: LD_ADDR_OWVAR 33
46325: PUSH
46326: LD_STRING 
46328: ST_TO_ADDR
// animal := CreateHuman ;
46329: LD_ADDR_VAR 0 12
46333: PUSH
46334: CALL_OW 44
46338: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46339: LD_VAR 0 12
46343: PPUSH
46344: LD_VAR 0 8
46348: PPUSH
46349: LD_INT 0
46351: PPUSH
46352: CALL 48431 0 3
// end ;
46356: GO 46310
46358: POP
46359: POP
// if birds then
46360: LD_VAR 0 1
46364: IFFALSE 46431
// for i = 1 to birds do
46366: LD_ADDR_VAR 0 11
46370: PUSH
46371: DOUBLE
46372: LD_INT 1
46374: DEC
46375: ST_TO_ADDR
46376: LD_VAR 0 1
46380: PUSH
46381: FOR_TO
46382: IFFALSE 46429
// begin hc_class := 18 ;
46384: LD_ADDR_OWVAR 28
46388: PUSH
46389: LD_INT 18
46391: ST_TO_ADDR
// hc_gallery =  ;
46392: LD_ADDR_OWVAR 33
46396: PUSH
46397: LD_STRING 
46399: ST_TO_ADDR
// animal := CreateHuman ;
46400: LD_ADDR_VAR 0 12
46404: PUSH
46405: CALL_OW 44
46409: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46410: LD_VAR 0 12
46414: PPUSH
46415: LD_VAR 0 8
46419: PPUSH
46420: LD_INT 0
46422: PPUSH
46423: CALL 48431 0 3
// end ;
46427: GO 46381
46429: POP
46430: POP
// if tigers then
46431: LD_VAR 0 2
46435: IFFALSE 46519
// for i = 1 to tigers do
46437: LD_ADDR_VAR 0 11
46441: PUSH
46442: DOUBLE
46443: LD_INT 1
46445: DEC
46446: ST_TO_ADDR
46447: LD_VAR 0 2
46451: PUSH
46452: FOR_TO
46453: IFFALSE 46517
// begin hc_class = class_tiger ;
46455: LD_ADDR_OWVAR 28
46459: PUSH
46460: LD_INT 14
46462: ST_TO_ADDR
// hc_gallery =  ;
46463: LD_ADDR_OWVAR 33
46467: PUSH
46468: LD_STRING 
46470: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46471: LD_ADDR_OWVAR 35
46475: PUSH
46476: LD_INT 7
46478: NEG
46479: PPUSH
46480: LD_INT 7
46482: PPUSH
46483: CALL_OW 12
46487: ST_TO_ADDR
// animal := CreateHuman ;
46488: LD_ADDR_VAR 0 12
46492: PUSH
46493: CALL_OW 44
46497: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46498: LD_VAR 0 12
46502: PPUSH
46503: LD_VAR 0 8
46507: PPUSH
46508: LD_INT 0
46510: PPUSH
46511: CALL 48431 0 3
// end ;
46515: GO 46452
46517: POP
46518: POP
// if apemans then
46519: LD_VAR 0 3
46523: IFFALSE 46646
// for i = 1 to apemans do
46525: LD_ADDR_VAR 0 11
46529: PUSH
46530: DOUBLE
46531: LD_INT 1
46533: DEC
46534: ST_TO_ADDR
46535: LD_VAR 0 3
46539: PUSH
46540: FOR_TO
46541: IFFALSE 46644
// begin hc_class = class_apeman ;
46543: LD_ADDR_OWVAR 28
46547: PUSH
46548: LD_INT 12
46550: ST_TO_ADDR
// hc_gallery =  ;
46551: LD_ADDR_OWVAR 33
46555: PUSH
46556: LD_STRING 
46558: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46559: LD_ADDR_OWVAR 35
46563: PUSH
46564: LD_INT 2
46566: NEG
46567: PPUSH
46568: LD_INT 2
46570: PPUSH
46571: CALL_OW 12
46575: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46576: LD_ADDR_OWVAR 31
46580: PUSH
46581: LD_INT 1
46583: PPUSH
46584: LD_INT 3
46586: PPUSH
46587: CALL_OW 12
46591: PUSH
46592: LD_INT 1
46594: PPUSH
46595: LD_INT 3
46597: PPUSH
46598: CALL_OW 12
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: ST_TO_ADDR
// animal := CreateHuman ;
46615: LD_ADDR_VAR 0 12
46619: PUSH
46620: CALL_OW 44
46624: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46625: LD_VAR 0 12
46629: PPUSH
46630: LD_VAR 0 8
46634: PPUSH
46635: LD_INT 0
46637: PPUSH
46638: CALL 48431 0 3
// end ;
46642: GO 46540
46644: POP
46645: POP
// if enchidnas then
46646: LD_VAR 0 4
46650: IFFALSE 46717
// for i = 1 to enchidnas do
46652: LD_ADDR_VAR 0 11
46656: PUSH
46657: DOUBLE
46658: LD_INT 1
46660: DEC
46661: ST_TO_ADDR
46662: LD_VAR 0 4
46666: PUSH
46667: FOR_TO
46668: IFFALSE 46715
// begin hc_class = 13 ;
46670: LD_ADDR_OWVAR 28
46674: PUSH
46675: LD_INT 13
46677: ST_TO_ADDR
// hc_gallery =  ;
46678: LD_ADDR_OWVAR 33
46682: PUSH
46683: LD_STRING 
46685: ST_TO_ADDR
// animal := CreateHuman ;
46686: LD_ADDR_VAR 0 12
46690: PUSH
46691: CALL_OW 44
46695: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46696: LD_VAR 0 12
46700: PPUSH
46701: LD_VAR 0 8
46705: PPUSH
46706: LD_INT 0
46708: PPUSH
46709: CALL 48431 0 3
// end ;
46713: GO 46667
46715: POP
46716: POP
// if fishes then
46717: LD_VAR 0 7
46721: IFFALSE 46788
// for i = 1 to fishes do
46723: LD_ADDR_VAR 0 11
46727: PUSH
46728: DOUBLE
46729: LD_INT 1
46731: DEC
46732: ST_TO_ADDR
46733: LD_VAR 0 7
46737: PUSH
46738: FOR_TO
46739: IFFALSE 46786
// begin hc_class = 20 ;
46741: LD_ADDR_OWVAR 28
46745: PUSH
46746: LD_INT 20
46748: ST_TO_ADDR
// hc_gallery =  ;
46749: LD_ADDR_OWVAR 33
46753: PUSH
46754: LD_STRING 
46756: ST_TO_ADDR
// animal := CreateHuman ;
46757: LD_ADDR_VAR 0 12
46761: PUSH
46762: CALL_OW 44
46766: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46767: LD_VAR 0 12
46771: PPUSH
46772: LD_VAR 0 9
46776: PPUSH
46777: LD_INT 0
46779: PPUSH
46780: CALL 48431 0 3
// end ;
46784: GO 46738
46786: POP
46787: POP
// end ;
46788: LD_VAR 0 10
46792: RET
// export function WantHeal ( sci , unit ) ; begin
46793: LD_INT 0
46795: PPUSH
// if GetTaskList ( sci ) > 0 then
46796: LD_VAR 0 1
46800: PPUSH
46801: CALL_OW 437
46805: PUSH
46806: LD_INT 0
46808: GREATER
46809: IFFALSE 46881
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46811: LD_VAR 0 1
46815: PPUSH
46816: CALL_OW 437
46820: PUSH
46821: LD_INT 1
46823: ARRAY
46824: PUSH
46825: LD_INT 1
46827: ARRAY
46828: PUSH
46829: LD_STRING l
46831: EQUAL
46832: IFFALSE 46859
46834: PUSH
46835: LD_VAR 0 1
46839: PPUSH
46840: CALL_OW 437
46844: PUSH
46845: LD_INT 1
46847: ARRAY
46848: PUSH
46849: LD_INT 4
46851: ARRAY
46852: PUSH
46853: LD_VAR 0 2
46857: EQUAL
46858: AND
46859: IFFALSE 46871
// result := true else
46861: LD_ADDR_VAR 0 3
46865: PUSH
46866: LD_INT 1
46868: ST_TO_ADDR
46869: GO 46879
// result := false ;
46871: LD_ADDR_VAR 0 3
46875: PUSH
46876: LD_INT 0
46878: ST_TO_ADDR
// end else
46879: GO 46889
// result := false ;
46881: LD_ADDR_VAR 0 3
46885: PUSH
46886: LD_INT 0
46888: ST_TO_ADDR
// end ;
46889: LD_VAR 0 3
46893: RET
// export function HealTarget ( sci ) ; begin
46894: LD_INT 0
46896: PPUSH
// if not sci then
46897: LD_VAR 0 1
46901: NOT
46902: IFFALSE 46906
// exit ;
46904: GO 46971
// result := 0 ;
46906: LD_ADDR_VAR 0 2
46910: PUSH
46911: LD_INT 0
46913: ST_TO_ADDR
// if GetTaskList ( sci ) then
46914: LD_VAR 0 1
46918: PPUSH
46919: CALL_OW 437
46923: IFFALSE 46971
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46925: LD_VAR 0 1
46929: PPUSH
46930: CALL_OW 437
46934: PUSH
46935: LD_INT 1
46937: ARRAY
46938: PUSH
46939: LD_INT 1
46941: ARRAY
46942: PUSH
46943: LD_STRING l
46945: EQUAL
46946: IFFALSE 46971
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46948: LD_ADDR_VAR 0 2
46952: PUSH
46953: LD_VAR 0 1
46957: PPUSH
46958: CALL_OW 437
46962: PUSH
46963: LD_INT 1
46965: ARRAY
46966: PUSH
46967: LD_INT 4
46969: ARRAY
46970: ST_TO_ADDR
// end ;
46971: LD_VAR 0 2
46975: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46976: LD_INT 0
46978: PPUSH
46979: PPUSH
46980: PPUSH
46981: PPUSH
// if not base_units then
46982: LD_VAR 0 1
46986: NOT
46987: IFFALSE 46991
// exit ;
46989: GO 47078
// result := false ;
46991: LD_ADDR_VAR 0 2
46995: PUSH
46996: LD_INT 0
46998: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46999: LD_ADDR_VAR 0 5
47003: PUSH
47004: LD_VAR 0 1
47008: PPUSH
47009: LD_INT 21
47011: PUSH
47012: LD_INT 3
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PPUSH
47019: CALL_OW 72
47023: ST_TO_ADDR
// if not tmp then
47024: LD_VAR 0 5
47028: NOT
47029: IFFALSE 47033
// exit ;
47031: GO 47078
// for i in tmp do
47033: LD_ADDR_VAR 0 3
47037: PUSH
47038: LD_VAR 0 5
47042: PUSH
47043: FOR_IN
47044: IFFALSE 47076
// begin result := EnemyInRange ( i , 22 ) ;
47046: LD_ADDR_VAR 0 2
47050: PUSH
47051: LD_VAR 0 3
47055: PPUSH
47056: LD_INT 22
47058: PPUSH
47059: CALL 44493 0 2
47063: ST_TO_ADDR
// if result then
47064: LD_VAR 0 2
47068: IFFALSE 47074
// exit ;
47070: POP
47071: POP
47072: GO 47078
// end ;
47074: GO 47043
47076: POP
47077: POP
// end ;
47078: LD_VAR 0 2
47082: RET
// export function FilterByTag ( units , tag ) ; begin
47083: LD_INT 0
47085: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47086: LD_ADDR_VAR 0 3
47090: PUSH
47091: LD_VAR 0 1
47095: PPUSH
47096: LD_INT 120
47098: PUSH
47099: LD_VAR 0 2
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PPUSH
47108: CALL_OW 72
47112: ST_TO_ADDR
// end ;
47113: LD_VAR 0 3
47117: RET
// export function IsDriver ( un ) ; begin
47118: LD_INT 0
47120: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47121: LD_ADDR_VAR 0 2
47125: PUSH
47126: LD_VAR 0 1
47130: PUSH
47131: LD_INT 55
47133: PUSH
47134: EMPTY
47135: LIST
47136: PPUSH
47137: CALL_OW 69
47141: IN
47142: ST_TO_ADDR
// end ;
47143: LD_VAR 0 2
47147: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47148: LD_INT 0
47150: PPUSH
47151: PPUSH
// list := [ ] ;
47152: LD_ADDR_VAR 0 5
47156: PUSH
47157: EMPTY
47158: ST_TO_ADDR
// case d of 0 :
47159: LD_VAR 0 3
47163: PUSH
47164: LD_INT 0
47166: DOUBLE
47167: EQUAL
47168: IFTRUE 47172
47170: GO 47305
47172: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47173: LD_ADDR_VAR 0 5
47177: PUSH
47178: LD_VAR 0 1
47182: PUSH
47183: LD_INT 4
47185: MINUS
47186: PUSH
47187: LD_VAR 0 2
47191: PUSH
47192: LD_INT 4
47194: MINUS
47195: PUSH
47196: LD_INT 2
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: LIST
47203: PUSH
47204: LD_VAR 0 1
47208: PUSH
47209: LD_INT 3
47211: MINUS
47212: PUSH
47213: LD_VAR 0 2
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: LIST
47225: PUSH
47226: LD_VAR 0 1
47230: PUSH
47231: LD_INT 4
47233: PLUS
47234: PUSH
47235: LD_VAR 0 2
47239: PUSH
47240: LD_INT 4
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: LIST
47247: PUSH
47248: LD_VAR 0 1
47252: PUSH
47253: LD_INT 3
47255: PLUS
47256: PUSH
47257: LD_VAR 0 2
47261: PUSH
47262: LD_INT 3
47264: PLUS
47265: PUSH
47266: LD_INT 5
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: LIST
47273: PUSH
47274: LD_VAR 0 1
47278: PUSH
47279: LD_VAR 0 2
47283: PUSH
47284: LD_INT 4
47286: PLUS
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: LIST
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: ST_TO_ADDR
// end ; 1 :
47303: GO 48003
47305: LD_INT 1
47307: DOUBLE
47308: EQUAL
47309: IFTRUE 47313
47311: GO 47446
47313: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47314: LD_ADDR_VAR 0 5
47318: PUSH
47319: LD_VAR 0 1
47323: PUSH
47324: LD_VAR 0 2
47328: PUSH
47329: LD_INT 4
47331: MINUS
47332: PUSH
47333: LD_INT 3
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: LIST
47340: PUSH
47341: LD_VAR 0 1
47345: PUSH
47346: LD_INT 3
47348: MINUS
47349: PUSH
47350: LD_VAR 0 2
47354: PUSH
47355: LD_INT 3
47357: MINUS
47358: PUSH
47359: LD_INT 2
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: LIST
47366: PUSH
47367: LD_VAR 0 1
47371: PUSH
47372: LD_INT 4
47374: MINUS
47375: PUSH
47376: LD_VAR 0 2
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: LIST
47388: PUSH
47389: LD_VAR 0 1
47393: PUSH
47394: LD_VAR 0 2
47398: PUSH
47399: LD_INT 3
47401: PLUS
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: LIST
47410: PUSH
47411: LD_VAR 0 1
47415: PUSH
47416: LD_INT 4
47418: PLUS
47419: PUSH
47420: LD_VAR 0 2
47424: PUSH
47425: LD_INT 4
47427: PLUS
47428: PUSH
47429: LD_INT 5
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: LIST
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: ST_TO_ADDR
// end ; 2 :
47444: GO 48003
47446: LD_INT 2
47448: DOUBLE
47449: EQUAL
47450: IFTRUE 47454
47452: GO 47583
47454: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47455: LD_ADDR_VAR 0 5
47459: PUSH
47460: LD_VAR 0 1
47464: PUSH
47465: LD_VAR 0 2
47469: PUSH
47470: LD_INT 3
47472: MINUS
47473: PUSH
47474: LD_INT 3
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: LIST
47481: PUSH
47482: LD_VAR 0 1
47486: PUSH
47487: LD_INT 4
47489: PLUS
47490: PUSH
47491: LD_VAR 0 2
47495: PUSH
47496: LD_INT 4
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: LIST
47503: PUSH
47504: LD_VAR 0 1
47508: PUSH
47509: LD_VAR 0 2
47513: PUSH
47514: LD_INT 4
47516: PLUS
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: LIST
47525: PUSH
47526: LD_VAR 0 1
47530: PUSH
47531: LD_INT 3
47533: MINUS
47534: PUSH
47535: LD_VAR 0 2
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: LIST
47547: PUSH
47548: LD_VAR 0 1
47552: PUSH
47553: LD_INT 4
47555: MINUS
47556: PUSH
47557: LD_VAR 0 2
47561: PUSH
47562: LD_INT 4
47564: MINUS
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: LIST
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: ST_TO_ADDR
// end ; 3 :
47581: GO 48003
47583: LD_INT 3
47585: DOUBLE
47586: EQUAL
47587: IFTRUE 47591
47589: GO 47724
47591: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47592: LD_ADDR_VAR 0 5
47596: PUSH
47597: LD_VAR 0 1
47601: PUSH
47602: LD_INT 3
47604: PLUS
47605: PUSH
47606: LD_VAR 0 2
47610: PUSH
47611: LD_INT 4
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: LIST
47618: PUSH
47619: LD_VAR 0 1
47623: PUSH
47624: LD_INT 4
47626: PLUS
47627: PUSH
47628: LD_VAR 0 2
47632: PUSH
47633: LD_INT 4
47635: PLUS
47636: PUSH
47637: LD_INT 5
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: PUSH
47645: LD_VAR 0 1
47649: PUSH
47650: LD_INT 4
47652: MINUS
47653: PUSH
47654: LD_VAR 0 2
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: LIST
47666: PUSH
47667: LD_VAR 0 1
47671: PUSH
47672: LD_VAR 0 2
47676: PUSH
47677: LD_INT 4
47679: MINUS
47680: PUSH
47681: LD_INT 3
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: LIST
47688: PUSH
47689: LD_VAR 0 1
47693: PUSH
47694: LD_INT 3
47696: MINUS
47697: PUSH
47698: LD_VAR 0 2
47702: PUSH
47703: LD_INT 3
47705: MINUS
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: LIST
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: ST_TO_ADDR
// end ; 4 :
47722: GO 48003
47724: LD_INT 4
47726: DOUBLE
47727: EQUAL
47728: IFTRUE 47732
47730: GO 47865
47732: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47733: LD_ADDR_VAR 0 5
47737: PUSH
47738: LD_VAR 0 1
47742: PUSH
47743: LD_VAR 0 2
47747: PUSH
47748: LD_INT 4
47750: PLUS
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: PUSH
47760: LD_VAR 0 1
47764: PUSH
47765: LD_INT 3
47767: PLUS
47768: PUSH
47769: LD_VAR 0 2
47773: PUSH
47774: LD_INT 3
47776: PLUS
47777: PUSH
47778: LD_INT 5
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: LIST
47785: PUSH
47786: LD_VAR 0 1
47790: PUSH
47791: LD_INT 4
47793: PLUS
47794: PUSH
47795: LD_VAR 0 2
47799: PUSH
47800: LD_INT 4
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: LIST
47807: PUSH
47808: LD_VAR 0 1
47812: PUSH
47813: LD_VAR 0 2
47817: PUSH
47818: LD_INT 3
47820: MINUS
47821: PUSH
47822: LD_INT 3
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: PUSH
47830: LD_VAR 0 1
47834: PUSH
47835: LD_INT 4
47837: MINUS
47838: PUSH
47839: LD_VAR 0 2
47843: PUSH
47844: LD_INT 4
47846: MINUS
47847: PUSH
47848: LD_INT 2
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: ST_TO_ADDR
// end ; 5 :
47863: GO 48003
47865: LD_INT 5
47867: DOUBLE
47868: EQUAL
47869: IFTRUE 47873
47871: GO 48002
47873: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47874: LD_ADDR_VAR 0 5
47878: PUSH
47879: LD_VAR 0 1
47883: PUSH
47884: LD_INT 4
47886: MINUS
47887: PUSH
47888: LD_VAR 0 2
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: LIST
47900: PUSH
47901: LD_VAR 0 1
47905: PUSH
47906: LD_VAR 0 2
47910: PUSH
47911: LD_INT 4
47913: MINUS
47914: PUSH
47915: LD_INT 3
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: LIST
47922: PUSH
47923: LD_VAR 0 1
47927: PUSH
47928: LD_INT 4
47930: PLUS
47931: PUSH
47932: LD_VAR 0 2
47936: PUSH
47937: LD_INT 4
47939: PLUS
47940: PUSH
47941: LD_INT 5
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: LIST
47948: PUSH
47949: LD_VAR 0 1
47953: PUSH
47954: LD_INT 3
47956: PLUS
47957: PUSH
47958: LD_VAR 0 2
47962: PUSH
47963: LD_INT 4
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: LIST
47970: PUSH
47971: LD_VAR 0 1
47975: PUSH
47976: LD_VAR 0 2
47980: PUSH
47981: LD_INT 3
47983: PLUS
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: LIST
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: ST_TO_ADDR
// end ; end ;
48000: GO 48003
48002: POP
// result := list ;
48003: LD_ADDR_VAR 0 4
48007: PUSH
48008: LD_VAR 0 5
48012: ST_TO_ADDR
// end ;
48013: LD_VAR 0 4
48017: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48018: LD_INT 0
48020: PPUSH
48021: PPUSH
48022: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48023: LD_VAR 0 1
48027: NOT
48028: IFTRUE 48056
48030: PUSH
48031: LD_VAR 0 2
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 2
48041: PUSH
48042: LD_INT 3
48044: PUSH
48045: LD_INT 4
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: IN
48054: NOT
48055: OR
48056: IFFALSE 48060
// exit ;
48058: GO 48143
// tmp := [ ] ;
48060: LD_ADDR_VAR 0 5
48064: PUSH
48065: EMPTY
48066: ST_TO_ADDR
// for i in units do
48067: LD_ADDR_VAR 0 4
48071: PUSH
48072: LD_VAR 0 1
48076: PUSH
48077: FOR_IN
48078: IFFALSE 48112
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
48080: LD_ADDR_VAR 0 5
48084: PUSH
48085: LD_VAR 0 5
48089: PPUSH
48090: LD_VAR 0 4
48094: PPUSH
48095: LD_VAR 0 2
48099: PPUSH
48100: CALL_OW 259
48104: PPUSH
48105: CALL 49538 0 2
48109: ST_TO_ADDR
48110: GO 48077
48112: POP
48113: POP
// if not tmp then
48114: LD_VAR 0 5
48118: NOT
48119: IFFALSE 48123
// exit ;
48121: GO 48143
// result := SortListByListDesc ( units , tmp ) ;
48123: LD_ADDR_VAR 0 3
48127: PUSH
48128: LD_VAR 0 1
48132: PPUSH
48133: LD_VAR 0 5
48137: PPUSH
48138: CALL_OW 77
48142: ST_TO_ADDR
// end ;
48143: LD_VAR 0 3
48147: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48148: LD_INT 0
48150: PPUSH
48151: PPUSH
48152: PPUSH
// result := false ;
48153: LD_ADDR_VAR 0 3
48157: PUSH
48158: LD_INT 0
48160: ST_TO_ADDR
// if not building then
48161: LD_VAR 0 2
48165: NOT
48166: IFFALSE 48170
// exit ;
48168: GO 48314
// x := GetX ( building ) ;
48170: LD_ADDR_VAR 0 4
48174: PUSH
48175: LD_VAR 0 2
48179: PPUSH
48180: CALL_OW 250
48184: ST_TO_ADDR
// y := GetY ( building ) ;
48185: LD_ADDR_VAR 0 5
48189: PUSH
48190: LD_VAR 0 2
48194: PPUSH
48195: CALL_OW 251
48199: ST_TO_ADDR
// if not x or not y then
48200: LD_VAR 0 4
48204: NOT
48205: IFTRUE 48214
48207: PUSH
48208: LD_VAR 0 5
48212: NOT
48213: OR
48214: IFFALSE 48218
// exit ;
48216: GO 48314
// if GetTaskList ( unit ) then
48218: LD_VAR 0 1
48222: PPUSH
48223: CALL_OW 437
48227: IFFALSE 48314
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48229: LD_STRING e
48231: PUSH
48232: LD_VAR 0 1
48236: PPUSH
48237: CALL_OW 437
48241: PUSH
48242: LD_INT 1
48244: ARRAY
48245: PUSH
48246: LD_INT 1
48248: ARRAY
48249: EQUAL
48250: IFFALSE 48277
48252: PUSH
48253: LD_VAR 0 4
48257: PUSH
48258: LD_VAR 0 1
48262: PPUSH
48263: CALL_OW 437
48267: PUSH
48268: LD_INT 1
48270: ARRAY
48271: PUSH
48272: LD_INT 2
48274: ARRAY
48275: EQUAL
48276: AND
48277: IFFALSE 48304
48279: PUSH
48280: LD_VAR 0 5
48284: PUSH
48285: LD_VAR 0 1
48289: PPUSH
48290: CALL_OW 437
48294: PUSH
48295: LD_INT 1
48297: ARRAY
48298: PUSH
48299: LD_INT 3
48301: ARRAY
48302: EQUAL
48303: AND
48304: IFFALSE 48314
// result := true end ;
48306: LD_ADDR_VAR 0 3
48310: PUSH
48311: LD_INT 1
48313: ST_TO_ADDR
// end ;
48314: LD_VAR 0 3
48318: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48319: LD_INT 0
48321: PPUSH
// result := false ;
48322: LD_ADDR_VAR 0 4
48326: PUSH
48327: LD_INT 0
48329: ST_TO_ADDR
// if GetTaskList ( unit ) then
48330: LD_VAR 0 1
48334: PPUSH
48335: CALL_OW 437
48339: IFFALSE 48426
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48341: LD_STRING M
48343: PUSH
48344: LD_VAR 0 1
48348: PPUSH
48349: CALL_OW 437
48353: PUSH
48354: LD_INT 1
48356: ARRAY
48357: PUSH
48358: LD_INT 1
48360: ARRAY
48361: EQUAL
48362: IFFALSE 48389
48364: PUSH
48365: LD_VAR 0 2
48369: PUSH
48370: LD_VAR 0 1
48374: PPUSH
48375: CALL_OW 437
48379: PUSH
48380: LD_INT 1
48382: ARRAY
48383: PUSH
48384: LD_INT 2
48386: ARRAY
48387: EQUAL
48388: AND
48389: IFFALSE 48416
48391: PUSH
48392: LD_VAR 0 3
48396: PUSH
48397: LD_VAR 0 1
48401: PPUSH
48402: CALL_OW 437
48406: PUSH
48407: LD_INT 1
48409: ARRAY
48410: PUSH
48411: LD_INT 3
48413: ARRAY
48414: EQUAL
48415: AND
48416: IFFALSE 48426
// result := true ;
48418: LD_ADDR_VAR 0 4
48422: PUSH
48423: LD_INT 1
48425: ST_TO_ADDR
// end ; end ;
48426: LD_VAR 0 4
48430: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48431: LD_INT 0
48433: PPUSH
48434: PPUSH
48435: PPUSH
48436: PPUSH
// if not unit or not area then
48437: LD_VAR 0 1
48441: NOT
48442: IFTRUE 48451
48444: PUSH
48445: LD_VAR 0 2
48449: NOT
48450: OR
48451: IFFALSE 48455
// exit ;
48453: GO 48631
// tmp := AreaToList ( area , i ) ;
48455: LD_ADDR_VAR 0 6
48459: PUSH
48460: LD_VAR 0 2
48464: PPUSH
48465: LD_VAR 0 5
48469: PPUSH
48470: CALL_OW 517
48474: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48475: LD_ADDR_VAR 0 5
48479: PUSH
48480: DOUBLE
48481: LD_INT 1
48483: DEC
48484: ST_TO_ADDR
48485: LD_VAR 0 6
48489: PUSH
48490: LD_INT 1
48492: ARRAY
48493: PUSH
48494: FOR_TO
48495: IFFALSE 48629
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48497: LD_ADDR_VAR 0 7
48501: PUSH
48502: LD_VAR 0 6
48506: PUSH
48507: LD_INT 1
48509: ARRAY
48510: PUSH
48511: LD_VAR 0 5
48515: ARRAY
48516: PUSH
48517: LD_VAR 0 6
48521: PUSH
48522: LD_INT 2
48524: ARRAY
48525: PUSH
48526: LD_VAR 0 5
48530: ARRAY
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
48536: LD_INT 92
48538: PUSH
48539: LD_VAR 0 7
48543: PUSH
48544: LD_INT 1
48546: ARRAY
48547: PUSH
48548: LD_VAR 0 7
48552: PUSH
48553: LD_INT 2
48555: ARRAY
48556: PUSH
48557: LD_INT 2
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: PPUSH
48566: CALL_OW 69
48570: PUSH
48571: LD_INT 0
48573: EQUAL
48574: IFFALSE 48627
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48576: LD_VAR 0 1
48580: PPUSH
48581: LD_VAR 0 7
48585: PUSH
48586: LD_INT 1
48588: ARRAY
48589: PPUSH
48590: LD_VAR 0 7
48594: PUSH
48595: LD_INT 2
48597: ARRAY
48598: PPUSH
48599: LD_VAR 0 3
48603: PPUSH
48604: CALL_OW 48
// result := IsPlaced ( unit ) ;
48608: LD_ADDR_VAR 0 4
48612: PUSH
48613: LD_VAR 0 1
48617: PPUSH
48618: CALL_OW 305
48622: ST_TO_ADDR
// exit ;
48623: POP
48624: POP
48625: GO 48631
// end ; end ;
48627: GO 48494
48629: POP
48630: POP
// end ;
48631: LD_VAR 0 4
48635: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48636: LD_INT 0
48638: PPUSH
48639: PPUSH
48640: PPUSH
// if not side or side > 8 then
48641: LD_VAR 0 1
48645: NOT
48646: IFTRUE 48658
48648: PUSH
48649: LD_VAR 0 1
48653: PUSH
48654: LD_INT 8
48656: GREATER
48657: OR
48658: IFFALSE 48662
// exit ;
48660: GO 48849
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48662: LD_ADDR_VAR 0 4
48666: PUSH
48667: LD_INT 22
48669: PUSH
48670: LD_VAR 0 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 21
48681: PUSH
48682: LD_INT 3
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PPUSH
48693: CALL_OW 69
48697: ST_TO_ADDR
// if not tmp then
48698: LD_VAR 0 4
48702: NOT
48703: IFFALSE 48707
// exit ;
48705: GO 48849
// enable_addtolog := true ;
48707: LD_ADDR_OWVAR 81
48711: PUSH
48712: LD_INT 1
48714: ST_TO_ADDR
// AddToLog ( [ ) ;
48715: LD_STRING [
48717: PPUSH
48718: CALL_OW 561
// for i in tmp do
48722: LD_ADDR_VAR 0 3
48726: PUSH
48727: LD_VAR 0 4
48731: PUSH
48732: FOR_IN
48733: IFFALSE 48840
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48735: LD_STRING [
48737: PUSH
48738: LD_VAR 0 3
48742: PPUSH
48743: CALL_OW 266
48747: STR
48748: PUSH
48749: LD_STRING , 
48751: STR
48752: PUSH
48753: LD_VAR 0 3
48757: PPUSH
48758: CALL_OW 250
48762: STR
48763: PUSH
48764: LD_STRING , 
48766: STR
48767: PUSH
48768: LD_VAR 0 3
48772: PPUSH
48773: CALL_OW 251
48777: STR
48778: PUSH
48779: LD_STRING , 
48781: STR
48782: PUSH
48783: LD_VAR 0 3
48787: PPUSH
48788: CALL_OW 254
48792: STR
48793: PUSH
48794: LD_STRING , 
48796: STR
48797: PUSH
48798: LD_VAR 0 3
48802: PPUSH
48803: LD_INT 1
48805: PPUSH
48806: CALL_OW 268
48810: STR
48811: PUSH
48812: LD_STRING , 
48814: STR
48815: PUSH
48816: LD_VAR 0 3
48820: PPUSH
48821: LD_INT 2
48823: PPUSH
48824: CALL_OW 268
48828: STR
48829: PUSH
48830: LD_STRING ],
48832: STR
48833: PPUSH
48834: CALL_OW 561
// end ;
48838: GO 48732
48840: POP
48841: POP
// AddToLog ( ]; ) ;
48842: LD_STRING ];
48844: PPUSH
48845: CALL_OW 561
// end ;
48849: LD_VAR 0 2
48853: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48854: LD_INT 0
48856: PPUSH
48857: PPUSH
48858: PPUSH
48859: PPUSH
48860: PPUSH
// if not area or not rate or not max then
48861: LD_VAR 0 1
48865: NOT
48866: IFTRUE 48875
48868: PUSH
48869: LD_VAR 0 2
48873: NOT
48874: OR
48875: IFTRUE 48884
48877: PUSH
48878: LD_VAR 0 4
48882: NOT
48883: OR
48884: IFFALSE 48888
// exit ;
48886: GO 49077
// while 1 do
48888: LD_INT 1
48890: IFFALSE 49077
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48892: LD_ADDR_VAR 0 9
48896: PUSH
48897: LD_VAR 0 1
48901: PPUSH
48902: LD_INT 1
48904: PPUSH
48905: CALL_OW 287
48909: PUSH
48910: LD_INT 10
48912: MUL
48913: ST_TO_ADDR
// r := rate / 10 ;
48914: LD_ADDR_VAR 0 7
48918: PUSH
48919: LD_VAR 0 2
48923: PUSH
48924: LD_INT 10
48926: DIVREAL
48927: ST_TO_ADDR
// time := 1 1$00 ;
48928: LD_ADDR_VAR 0 8
48932: PUSH
48933: LD_INT 2100
48935: ST_TO_ADDR
// if amount < min then
48936: LD_VAR 0 9
48940: PUSH
48941: LD_VAR 0 3
48945: LESS
48946: IFFALSE 48964
// r := r * 2 else
48948: LD_ADDR_VAR 0 7
48952: PUSH
48953: LD_VAR 0 7
48957: PUSH
48958: LD_INT 2
48960: MUL
48961: ST_TO_ADDR
48962: GO 48990
// if amount > max then
48964: LD_VAR 0 9
48968: PUSH
48969: LD_VAR 0 4
48973: GREATER
48974: IFFALSE 48990
// r := r / 2 ;
48976: LD_ADDR_VAR 0 7
48980: PUSH
48981: LD_VAR 0 7
48985: PUSH
48986: LD_INT 2
48988: DIVREAL
48989: ST_TO_ADDR
// time := time / r ;
48990: LD_ADDR_VAR 0 8
48994: PUSH
48995: LD_VAR 0 8
48999: PUSH
49000: LD_VAR 0 7
49004: DIVREAL
49005: ST_TO_ADDR
// if time < 0 then
49006: LD_VAR 0 8
49010: PUSH
49011: LD_INT 0
49013: LESS
49014: IFFALSE 49031
// time := time * - 1 ;
49016: LD_ADDR_VAR 0 8
49020: PUSH
49021: LD_VAR 0 8
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: MUL
49030: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
49031: LD_VAR 0 8
49035: PUSH
49036: LD_INT 35
49038: PPUSH
49039: LD_INT 875
49041: PPUSH
49042: CALL_OW 12
49046: PLUS
49047: PPUSH
49048: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49052: LD_INT 1
49054: PPUSH
49055: LD_INT 5
49057: PPUSH
49058: CALL_OW 12
49062: PPUSH
49063: LD_VAR 0 1
49067: PPUSH
49068: LD_INT 1
49070: PPUSH
49071: CALL_OW 55
// end ;
49075: GO 48888
// end ;
49077: LD_VAR 0 5
49081: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49082: LD_INT 0
49084: PPUSH
49085: PPUSH
49086: PPUSH
49087: PPUSH
49088: PPUSH
49089: PPUSH
49090: PPUSH
49091: PPUSH
// if not turrets or not factories then
49092: LD_VAR 0 1
49096: NOT
49097: IFTRUE 49106
49099: PUSH
49100: LD_VAR 0 2
49104: NOT
49105: OR
49106: IFFALSE 49110
// exit ;
49108: GO 49417
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49110: LD_ADDR_VAR 0 10
49114: PUSH
49115: LD_INT 5
49117: PUSH
49118: LD_INT 6
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: PUSH
49128: LD_INT 4
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 3
49137: PUSH
49138: LD_INT 5
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 24
49152: PUSH
49153: LD_INT 25
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 23
49162: PUSH
49163: LD_INT 27
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 42
49176: PUSH
49177: LD_INT 43
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 44
49186: PUSH
49187: LD_INT 46
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 45
49196: PUSH
49197: LD_INT 47
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: LIST
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: LIST
49213: ST_TO_ADDR
// result := [ ] ;
49214: LD_ADDR_VAR 0 3
49218: PUSH
49219: EMPTY
49220: ST_TO_ADDR
// for i in turrets do
49221: LD_ADDR_VAR 0 4
49225: PUSH
49226: LD_VAR 0 1
49230: PUSH
49231: FOR_IN
49232: IFFALSE 49415
// begin nat := GetNation ( i ) ;
49234: LD_ADDR_VAR 0 7
49238: PUSH
49239: LD_VAR 0 4
49243: PPUSH
49244: CALL_OW 248
49248: ST_TO_ADDR
// weapon := 0 ;
49249: LD_ADDR_VAR 0 8
49253: PUSH
49254: LD_INT 0
49256: ST_TO_ADDR
// if not nat then
49257: LD_VAR 0 7
49261: NOT
49262: IFFALSE 49266
// continue ;
49264: GO 49231
// for j in list [ nat ] do
49266: LD_ADDR_VAR 0 5
49270: PUSH
49271: LD_VAR 0 10
49275: PUSH
49276: LD_VAR 0 7
49280: ARRAY
49281: PUSH
49282: FOR_IN
49283: IFFALSE 49324
// if GetBWeapon ( i ) = j [ 1 ] then
49285: LD_VAR 0 4
49289: PPUSH
49290: CALL_OW 269
49294: PUSH
49295: LD_VAR 0 5
49299: PUSH
49300: LD_INT 1
49302: ARRAY
49303: EQUAL
49304: IFFALSE 49322
// begin weapon := j [ 2 ] ;
49306: LD_ADDR_VAR 0 8
49310: PUSH
49311: LD_VAR 0 5
49315: PUSH
49316: LD_INT 2
49318: ARRAY
49319: ST_TO_ADDR
// break ;
49320: GO 49324
// end ;
49322: GO 49282
49324: POP
49325: POP
// if not weapon then
49326: LD_VAR 0 8
49330: NOT
49331: IFFALSE 49335
// continue ;
49333: GO 49231
// for k in factories do
49335: LD_ADDR_VAR 0 6
49339: PUSH
49340: LD_VAR 0 2
49344: PUSH
49345: FOR_IN
49346: IFFALSE 49411
// begin weapons := AvailableWeaponList ( k ) ;
49348: LD_ADDR_VAR 0 9
49352: PUSH
49353: LD_VAR 0 6
49357: PPUSH
49358: CALL_OW 478
49362: ST_TO_ADDR
// if not weapons then
49363: LD_VAR 0 9
49367: NOT
49368: IFFALSE 49372
// continue ;
49370: GO 49345
// if weapon in weapons then
49372: LD_VAR 0 8
49376: PUSH
49377: LD_VAR 0 9
49381: IN
49382: IFFALSE 49409
// begin result := [ i , weapon ] ;
49384: LD_ADDR_VAR 0 3
49388: PUSH
49389: LD_VAR 0 4
49393: PUSH
49394: LD_VAR 0 8
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: ST_TO_ADDR
// exit ;
49403: POP
49404: POP
49405: POP
49406: POP
49407: GO 49417
// end ; end ;
49409: GO 49345
49411: POP
49412: POP
// end ;
49413: GO 49231
49415: POP
49416: POP
// end ;
49417: LD_VAR 0 3
49421: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49422: LD_INT 0
49424: PPUSH
// if not side or side > 8 then
49425: LD_VAR 0 3
49429: NOT
49430: IFTRUE 49442
49432: PUSH
49433: LD_VAR 0 3
49437: PUSH
49438: LD_INT 8
49440: GREATER
49441: OR
49442: IFFALSE 49446
// exit ;
49444: GO 49505
// if not range then
49446: LD_VAR 0 4
49450: NOT
49451: IFFALSE 49462
// range := - 12 ;
49453: LD_ADDR_VAR 0 4
49457: PUSH
49458: LD_INT 12
49460: NEG
49461: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49462: LD_VAR 0 1
49466: PPUSH
49467: LD_VAR 0 2
49471: PPUSH
49472: LD_VAR 0 3
49476: PPUSH
49477: LD_VAR 0 4
49481: PPUSH
49482: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49486: LD_VAR 0 1
49490: PPUSH
49491: LD_VAR 0 2
49495: PPUSH
49496: LD_VAR 0 3
49500: PPUSH
49501: CALL_OW 331
// end ;
49505: LD_VAR 0 5
49509: RET
// export function Video ( mode ) ; begin
49510: LD_INT 0
49512: PPUSH
// ingame_video = mode ;
49513: LD_ADDR_OWVAR 52
49517: PUSH
49518: LD_VAR 0 1
49522: ST_TO_ADDR
// interface_hidden = mode ;
49523: LD_ADDR_OWVAR 54
49527: PUSH
49528: LD_VAR 0 1
49532: ST_TO_ADDR
// end ;
49533: LD_VAR 0 2
49537: RET
// export function Join ( array , element ) ; begin
49538: LD_INT 0
49540: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49541: LD_ADDR_VAR 0 3
49545: PUSH
49546: LD_VAR 0 1
49550: PPUSH
49551: LD_VAR 0 1
49555: PUSH
49556: LD_INT 1
49558: PLUS
49559: PPUSH
49560: LD_VAR 0 2
49564: PPUSH
49565: CALL_OW 1
49569: ST_TO_ADDR
// end ;
49570: LD_VAR 0 3
49574: RET
// export function JoinUnion ( array , element ) ; begin
49575: LD_INT 0
49577: PPUSH
// result := array union element ;
49578: LD_ADDR_VAR 0 3
49582: PUSH
49583: LD_VAR 0 1
49587: PUSH
49588: LD_VAR 0 2
49592: UNION
49593: ST_TO_ADDR
// end ;
49594: LD_VAR 0 3
49598: RET
// export function GetBehemoths ( side ) ; begin
49599: LD_INT 0
49601: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
49602: LD_ADDR_VAR 0 2
49606: PUSH
49607: LD_INT 22
49609: PUSH
49610: LD_VAR 0 1
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 31
49621: PUSH
49622: LD_INT 25
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PPUSH
49633: CALL_OW 69
49637: ST_TO_ADDR
// end ;
49638: LD_VAR 0 2
49642: RET
// export function Shuffle ( array ) ; var i , index ; begin
49643: LD_INT 0
49645: PPUSH
49646: PPUSH
49647: PPUSH
// result := [ ] ;
49648: LD_ADDR_VAR 0 2
49652: PUSH
49653: EMPTY
49654: ST_TO_ADDR
// if not array then
49655: LD_VAR 0 1
49659: NOT
49660: IFFALSE 49664
// exit ;
49662: GO 49763
// Randomize ;
49664: CALL_OW 10
// for i = array downto 1 do
49668: LD_ADDR_VAR 0 3
49672: PUSH
49673: DOUBLE
49674: LD_VAR 0 1
49678: INC
49679: ST_TO_ADDR
49680: LD_INT 1
49682: PUSH
49683: FOR_DOWNTO
49684: IFFALSE 49761
// begin index := rand ( 1 , array ) ;
49686: LD_ADDR_VAR 0 4
49690: PUSH
49691: LD_INT 1
49693: PPUSH
49694: LD_VAR 0 1
49698: PPUSH
49699: CALL_OW 12
49703: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49704: LD_ADDR_VAR 0 2
49708: PUSH
49709: LD_VAR 0 2
49713: PPUSH
49714: LD_VAR 0 2
49718: PUSH
49719: LD_INT 1
49721: PLUS
49722: PPUSH
49723: LD_VAR 0 1
49727: PUSH
49728: LD_VAR 0 4
49732: ARRAY
49733: PPUSH
49734: CALL_OW 2
49738: ST_TO_ADDR
// array := Delete ( array , index ) ;
49739: LD_ADDR_VAR 0 1
49743: PUSH
49744: LD_VAR 0 1
49748: PPUSH
49749: LD_VAR 0 4
49753: PPUSH
49754: CALL_OW 3
49758: ST_TO_ADDR
// end ;
49759: GO 49683
49761: POP
49762: POP
// end ;
49763: LD_VAR 0 2
49767: RET
// export function GetBaseMaterials ( base ) ; begin
49768: LD_INT 0
49770: PPUSH
// result := [ 0 , 0 , 0 ] ;
49771: LD_ADDR_VAR 0 2
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: LIST
49789: ST_TO_ADDR
// if not base then
49790: LD_VAR 0 1
49794: NOT
49795: IFFALSE 49799
// exit ;
49797: GO 49848
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49799: LD_ADDR_VAR 0 2
49803: PUSH
49804: LD_VAR 0 1
49808: PPUSH
49809: LD_INT 1
49811: PPUSH
49812: CALL_OW 275
49816: PUSH
49817: LD_VAR 0 1
49821: PPUSH
49822: LD_INT 2
49824: PPUSH
49825: CALL_OW 275
49829: PUSH
49830: LD_VAR 0 1
49834: PPUSH
49835: LD_INT 3
49837: PPUSH
49838: CALL_OW 275
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: LIST
49847: ST_TO_ADDR
// end ;
49848: LD_VAR 0 2
49852: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49853: LD_INT 0
49855: PPUSH
49856: PPUSH
// result := array ;
49857: LD_ADDR_VAR 0 3
49861: PUSH
49862: LD_VAR 0 1
49866: ST_TO_ADDR
// if size >= result then
49867: LD_VAR 0 2
49871: PUSH
49872: LD_VAR 0 3
49876: GREATEREQUAL
49877: IFFALSE 49881
// exit ;
49879: GO 49931
// if size then
49881: LD_VAR 0 2
49885: IFFALSE 49931
// for i := array downto size do
49887: LD_ADDR_VAR 0 4
49891: PUSH
49892: DOUBLE
49893: LD_VAR 0 1
49897: INC
49898: ST_TO_ADDR
49899: LD_VAR 0 2
49903: PUSH
49904: FOR_DOWNTO
49905: IFFALSE 49929
// result := Delete ( result , result ) ;
49907: LD_ADDR_VAR 0 3
49911: PUSH
49912: LD_VAR 0 3
49916: PPUSH
49917: LD_VAR 0 3
49921: PPUSH
49922: CALL_OW 3
49926: ST_TO_ADDR
49927: GO 49904
49929: POP
49930: POP
// end ;
49931: LD_VAR 0 3
49935: RET
// export function ComExit ( unit ) ; var tmp ; begin
49936: LD_INT 0
49938: PPUSH
49939: PPUSH
// if not IsInUnit ( unit ) then
49940: LD_VAR 0 1
49944: PPUSH
49945: CALL_OW 310
49949: NOT
49950: IFFALSE 49954
// exit ;
49952: GO 50014
// tmp := IsInUnit ( unit ) ;
49954: LD_ADDR_VAR 0 3
49958: PUSH
49959: LD_VAR 0 1
49963: PPUSH
49964: CALL_OW 310
49968: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49969: LD_VAR 0 3
49973: PPUSH
49974: CALL_OW 247
49978: PUSH
49979: LD_INT 2
49981: EQUAL
49982: IFFALSE 49995
// ComExitVehicle ( unit ) else
49984: LD_VAR 0 1
49988: PPUSH
49989: CALL_OW 121
49993: GO 50004
// ComExitBuilding ( unit ) ;
49995: LD_VAR 0 1
49999: PPUSH
50000: CALL_OW 122
// result := tmp ;
50004: LD_ADDR_VAR 0 2
50008: PUSH
50009: LD_VAR 0 3
50013: ST_TO_ADDR
// end ;
50014: LD_VAR 0 2
50018: RET
// export function ComExitAll ( units ) ; var i ; begin
50019: LD_INT 0
50021: PPUSH
50022: PPUSH
// if not units then
50023: LD_VAR 0 1
50027: NOT
50028: IFFALSE 50032
// exit ;
50030: GO 50058
// for i in units do
50032: LD_ADDR_VAR 0 3
50036: PUSH
50037: LD_VAR 0 1
50041: PUSH
50042: FOR_IN
50043: IFFALSE 50056
// ComExit ( i ) ;
50045: LD_VAR 0 3
50049: PPUSH
50050: CALL 49936 0 1
50054: GO 50042
50056: POP
50057: POP
// end ;
50058: LD_VAR 0 2
50062: RET
// export function ResetHc ; begin
50063: LD_INT 0
50065: PPUSH
// InitHc ;
50066: CALL_OW 19
// hc_importance := 0 ;
50070: LD_ADDR_OWVAR 32
50074: PUSH
50075: LD_INT 0
50077: ST_TO_ADDR
// end ;
50078: LD_VAR 0 1
50082: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50083: LD_INT 0
50085: PPUSH
50086: PPUSH
50087: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50088: LD_ADDR_VAR 0 6
50092: PUSH
50093: LD_VAR 0 1
50097: PUSH
50098: LD_VAR 0 3
50102: PLUS
50103: PUSH
50104: LD_INT 2
50106: DIV
50107: ST_TO_ADDR
// if _x < 0 then
50108: LD_VAR 0 6
50112: PUSH
50113: LD_INT 0
50115: LESS
50116: IFFALSE 50133
// _x := _x * - 1 ;
50118: LD_ADDR_VAR 0 6
50122: PUSH
50123: LD_VAR 0 6
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: MUL
50132: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50133: LD_ADDR_VAR 0 7
50137: PUSH
50138: LD_VAR 0 2
50142: PUSH
50143: LD_VAR 0 4
50147: PLUS
50148: PUSH
50149: LD_INT 2
50151: DIV
50152: ST_TO_ADDR
// if _y < 0 then
50153: LD_VAR 0 7
50157: PUSH
50158: LD_INT 0
50160: LESS
50161: IFFALSE 50178
// _y := _y * - 1 ;
50163: LD_ADDR_VAR 0 7
50167: PUSH
50168: LD_VAR 0 7
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: MUL
50177: ST_TO_ADDR
// result := [ _x , _y ] ;
50178: LD_ADDR_VAR 0 5
50182: PUSH
50183: LD_VAR 0 6
50187: PUSH
50188: LD_VAR 0 7
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: ST_TO_ADDR
// end ;
50197: LD_VAR 0 5
50201: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50202: LD_INT 0
50204: PPUSH
50205: PPUSH
50206: PPUSH
50207: PPUSH
// task := GetTaskList ( unit ) ;
50208: LD_ADDR_VAR 0 7
50212: PUSH
50213: LD_VAR 0 1
50217: PPUSH
50218: CALL_OW 437
50222: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50223: LD_VAR 0 7
50227: NOT
50228: IFFALSE 50247
50230: PUSH
50231: LD_VAR 0 1
50235: PPUSH
50236: LD_VAR 0 2
50240: PPUSH
50241: CALL_OW 308
50245: NOT
50246: AND
50247: IFFALSE 50251
// exit ;
50249: GO 50369
// if IsInArea ( unit , area ) then
50251: LD_VAR 0 1
50255: PPUSH
50256: LD_VAR 0 2
50260: PPUSH
50261: CALL_OW 308
50265: IFFALSE 50283
// begin ComMoveToArea ( unit , goAway ) ;
50267: LD_VAR 0 1
50271: PPUSH
50272: LD_VAR 0 3
50276: PPUSH
50277: CALL_OW 113
// exit ;
50281: GO 50369
// end ; if task [ 1 ] [ 1 ] <> M then
50283: LD_VAR 0 7
50287: PUSH
50288: LD_INT 1
50290: ARRAY
50291: PUSH
50292: LD_INT 1
50294: ARRAY
50295: PUSH
50296: LD_STRING M
50298: NONEQUAL
50299: IFFALSE 50303
// exit ;
50301: GO 50369
// x := task [ 1 ] [ 2 ] ;
50303: LD_ADDR_VAR 0 5
50307: PUSH
50308: LD_VAR 0 7
50312: PUSH
50313: LD_INT 1
50315: ARRAY
50316: PUSH
50317: LD_INT 2
50319: ARRAY
50320: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50321: LD_ADDR_VAR 0 6
50325: PUSH
50326: LD_VAR 0 7
50330: PUSH
50331: LD_INT 1
50333: ARRAY
50334: PUSH
50335: LD_INT 3
50337: ARRAY
50338: ST_TO_ADDR
// if InArea ( x , y , area ) then
50339: LD_VAR 0 5
50343: PPUSH
50344: LD_VAR 0 6
50348: PPUSH
50349: LD_VAR 0 2
50353: PPUSH
50354: CALL_OW 309
50358: IFFALSE 50369
// ComStop ( unit ) ;
50360: LD_VAR 0 1
50364: PPUSH
50365: CALL_OW 141
// end ;
50369: LD_VAR 0 4
50373: RET
// export function Abs ( value ) ; begin
50374: LD_INT 0
50376: PPUSH
// result := value ;
50377: LD_ADDR_VAR 0 2
50381: PUSH
50382: LD_VAR 0 1
50386: ST_TO_ADDR
// if value < 0 then
50387: LD_VAR 0 1
50391: PUSH
50392: LD_INT 0
50394: LESS
50395: IFFALSE 50412
// result := value * - 1 ;
50397: LD_ADDR_VAR 0 2
50401: PUSH
50402: LD_VAR 0 1
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: MUL
50411: ST_TO_ADDR
// end ;
50412: LD_VAR 0 2
50416: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50417: LD_INT 0
50419: PPUSH
50420: PPUSH
50421: PPUSH
50422: PPUSH
50423: PPUSH
50424: PPUSH
50425: PPUSH
50426: PPUSH
// if not unit or not building then
50427: LD_VAR 0 1
50431: NOT
50432: IFTRUE 50441
50434: PUSH
50435: LD_VAR 0 2
50439: NOT
50440: OR
50441: IFFALSE 50445
// exit ;
50443: GO 50673
// x := GetX ( building ) ;
50445: LD_ADDR_VAR 0 4
50449: PUSH
50450: LD_VAR 0 2
50454: PPUSH
50455: CALL_OW 250
50459: ST_TO_ADDR
// y := GetY ( building ) ;
50460: LD_ADDR_VAR 0 6
50464: PUSH
50465: LD_VAR 0 2
50469: PPUSH
50470: CALL_OW 251
50474: ST_TO_ADDR
// d := GetDir ( building ) ;
50475: LD_ADDR_VAR 0 8
50479: PUSH
50480: LD_VAR 0 2
50484: PPUSH
50485: CALL_OW 254
50489: ST_TO_ADDR
// r := 4 ;
50490: LD_ADDR_VAR 0 9
50494: PUSH
50495: LD_INT 4
50497: ST_TO_ADDR
// for i := 1 to 5 do
50498: LD_ADDR_VAR 0 10
50502: PUSH
50503: DOUBLE
50504: LD_INT 1
50506: DEC
50507: ST_TO_ADDR
50508: LD_INT 5
50510: PUSH
50511: FOR_TO
50512: IFFALSE 50671
// begin _x := ShiftX ( x , d , r + i ) ;
50514: LD_ADDR_VAR 0 5
50518: PUSH
50519: LD_VAR 0 4
50523: PPUSH
50524: LD_VAR 0 8
50528: PPUSH
50529: LD_VAR 0 9
50533: PUSH
50534: LD_VAR 0 10
50538: PLUS
50539: PPUSH
50540: CALL_OW 272
50544: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50545: LD_ADDR_VAR 0 7
50549: PUSH
50550: LD_VAR 0 6
50554: PPUSH
50555: LD_VAR 0 8
50559: PPUSH
50560: LD_VAR 0 9
50564: PUSH
50565: LD_VAR 0 10
50569: PLUS
50570: PPUSH
50571: CALL_OW 273
50575: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50576: LD_VAR 0 5
50580: PPUSH
50581: LD_VAR 0 7
50585: PPUSH
50586: CALL_OW 488
50590: IFFALSE 50625
50592: PUSH
50593: LD_VAR 0 5
50597: PPUSH
50598: LD_VAR 0 7
50602: PPUSH
50603: CALL_OW 428
50607: PPUSH
50608: CALL_OW 247
50612: PUSH
50613: LD_INT 3
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: IN
50623: NOT
50624: AND
50625: IFFALSE 50669
// begin ComMoveXY ( unit , _x , _y ) ;
50627: LD_VAR 0 1
50631: PPUSH
50632: LD_VAR 0 5
50636: PPUSH
50637: LD_VAR 0 7
50641: PPUSH
50642: CALL_OW 111
// result := [ _x , _y ] ;
50646: LD_ADDR_VAR 0 3
50650: PUSH
50651: LD_VAR 0 5
50655: PUSH
50656: LD_VAR 0 7
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: ST_TO_ADDR
// exit ;
50665: POP
50666: POP
50667: GO 50673
// end ; end ;
50669: GO 50511
50671: POP
50672: POP
// end ;
50673: LD_VAR 0 3
50677: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50678: LD_INT 0
50680: PPUSH
50681: PPUSH
50682: PPUSH
// result := 0 ;
50683: LD_ADDR_VAR 0 3
50687: PUSH
50688: LD_INT 0
50690: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50691: LD_VAR 0 1
50695: PUSH
50696: LD_INT 0
50698: LESS
50699: IFTRUE 50711
50701: PUSH
50702: LD_VAR 0 1
50706: PUSH
50707: LD_INT 8
50709: GREATER
50710: OR
50711: IFTRUE 50723
50713: PUSH
50714: LD_VAR 0 2
50718: PUSH
50719: LD_INT 0
50721: LESS
50722: OR
50723: IFTRUE 50735
50725: PUSH
50726: LD_VAR 0 2
50730: PUSH
50731: LD_INT 8
50733: GREATER
50734: OR
50735: IFFALSE 50739
// exit ;
50737: GO 50814
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50739: LD_ADDR_VAR 0 4
50743: PUSH
50744: LD_INT 22
50746: PUSH
50747: LD_VAR 0 2
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PPUSH
50756: CALL_OW 69
50760: PUSH
50761: FOR_IN
50762: IFFALSE 50812
// begin un := UnitShoot ( i ) ;
50764: LD_ADDR_VAR 0 5
50768: PUSH
50769: LD_VAR 0 4
50773: PPUSH
50774: CALL_OW 504
50778: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50779: LD_VAR 0 5
50783: PPUSH
50784: CALL_OW 255
50788: PUSH
50789: LD_VAR 0 1
50793: EQUAL
50794: IFFALSE 50810
// begin result := un ;
50796: LD_ADDR_VAR 0 3
50800: PUSH
50801: LD_VAR 0 5
50805: ST_TO_ADDR
// exit ;
50806: POP
50807: POP
50808: GO 50814
// end ; end ;
50810: GO 50761
50812: POP
50813: POP
// end ;
50814: LD_VAR 0 3
50818: RET
// export function GetCargoBay ( units ) ; begin
50819: LD_INT 0
50821: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50822: LD_ADDR_VAR 0 2
50826: PUSH
50827: LD_VAR 0 1
50831: PPUSH
50832: LD_INT 2
50834: PUSH
50835: LD_INT 34
50837: PUSH
50838: LD_INT 12
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 34
50847: PUSH
50848: LD_INT 51
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 34
50857: PUSH
50858: LD_INT 32
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 34
50867: PUSH
50868: LD_INT 89
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: PPUSH
50882: CALL_OW 72
50886: ST_TO_ADDR
// end ;
50887: LD_VAR 0 2
50891: RET
// export function Negate ( value ) ; begin
50892: LD_INT 0
50894: PPUSH
// result := not value ;
50895: LD_ADDR_VAR 0 2
50899: PUSH
50900: LD_VAR 0 1
50904: NOT
50905: ST_TO_ADDR
// end ;
50906: LD_VAR 0 2
50910: RET
// export function Inc ( value ) ; begin
50911: LD_INT 0
50913: PPUSH
// result := value + 1 ;
50914: LD_ADDR_VAR 0 2
50918: PUSH
50919: LD_VAR 0 1
50923: PUSH
50924: LD_INT 1
50926: PLUS
50927: ST_TO_ADDR
// end ;
50928: LD_VAR 0 2
50932: RET
// export function Dec ( value ) ; begin
50933: LD_INT 0
50935: PPUSH
// result := value - 1 ;
50936: LD_ADDR_VAR 0 2
50940: PUSH
50941: LD_VAR 0 1
50945: PUSH
50946: LD_INT 1
50948: MINUS
50949: ST_TO_ADDR
// end ;
50950: LD_VAR 0 2
50954: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50955: LD_INT 0
50957: PPUSH
50958: PPUSH
50959: PPUSH
50960: PPUSH
50961: PPUSH
50962: PPUSH
50963: PPUSH
50964: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50965: LD_VAR 0 1
50969: PPUSH
50970: LD_VAR 0 2
50974: PPUSH
50975: CALL_OW 488
50979: NOT
50980: IFTRUE 50999
50982: PUSH
50983: LD_VAR 0 3
50987: PPUSH
50988: LD_VAR 0 4
50992: PPUSH
50993: CALL_OW 488
50997: NOT
50998: OR
50999: IFFALSE 51012
// begin result := - 1 ;
51001: LD_ADDR_VAR 0 5
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: ST_TO_ADDR
// exit ;
51010: GO 51247
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
51012: LD_ADDR_VAR 0 12
51016: PUSH
51017: LD_VAR 0 1
51021: PPUSH
51022: LD_VAR 0 2
51026: PPUSH
51027: LD_VAR 0 3
51031: PPUSH
51032: LD_VAR 0 4
51036: PPUSH
51037: CALL 50083 0 4
51041: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
51042: LD_ADDR_VAR 0 11
51046: PUSH
51047: LD_VAR 0 1
51051: PPUSH
51052: LD_VAR 0 2
51056: PPUSH
51057: LD_VAR 0 12
51061: PUSH
51062: LD_INT 1
51064: ARRAY
51065: PPUSH
51066: LD_VAR 0 12
51070: PUSH
51071: LD_INT 2
51073: ARRAY
51074: PPUSH
51075: CALL_OW 298
51079: ST_TO_ADDR
// distance := 9999 ;
51080: LD_ADDR_VAR 0 10
51084: PUSH
51085: LD_INT 9999
51087: ST_TO_ADDR
// for i := 0 to 5 do
51088: LD_ADDR_VAR 0 6
51092: PUSH
51093: DOUBLE
51094: LD_INT 0
51096: DEC
51097: ST_TO_ADDR
51098: LD_INT 5
51100: PUSH
51101: FOR_TO
51102: IFFALSE 51245
// begin _x := ShiftX ( x1 , i , centerDist ) ;
51104: LD_ADDR_VAR 0 7
51108: PUSH
51109: LD_VAR 0 1
51113: PPUSH
51114: LD_VAR 0 6
51118: PPUSH
51119: LD_VAR 0 11
51123: PPUSH
51124: CALL_OW 272
51128: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51129: LD_ADDR_VAR 0 8
51133: PUSH
51134: LD_VAR 0 2
51138: PPUSH
51139: LD_VAR 0 6
51143: PPUSH
51144: LD_VAR 0 11
51148: PPUSH
51149: CALL_OW 273
51153: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51154: LD_VAR 0 7
51158: PPUSH
51159: LD_VAR 0 8
51163: PPUSH
51164: CALL_OW 488
51168: NOT
51169: IFFALSE 51173
// continue ;
51171: GO 51101
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51173: LD_ADDR_VAR 0 9
51177: PUSH
51178: LD_VAR 0 12
51182: PUSH
51183: LD_INT 1
51185: ARRAY
51186: PPUSH
51187: LD_VAR 0 12
51191: PUSH
51192: LD_INT 2
51194: ARRAY
51195: PPUSH
51196: LD_VAR 0 7
51200: PPUSH
51201: LD_VAR 0 8
51205: PPUSH
51206: CALL_OW 298
51210: ST_TO_ADDR
// if tmp < distance then
51211: LD_VAR 0 9
51215: PUSH
51216: LD_VAR 0 10
51220: LESS
51221: IFFALSE 51243
// begin result := i ;
51223: LD_ADDR_VAR 0 5
51227: PUSH
51228: LD_VAR 0 6
51232: ST_TO_ADDR
// distance := tmp ;
51233: LD_ADDR_VAR 0 10
51237: PUSH
51238: LD_VAR 0 9
51242: ST_TO_ADDR
// end ; end ;
51243: GO 51101
51245: POP
51246: POP
// end ;
51247: LD_VAR 0 5
51251: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51252: LD_INT 0
51254: PPUSH
51255: PPUSH
// if not driver or not IsInUnit ( driver ) then
51256: LD_VAR 0 1
51260: NOT
51261: IFTRUE 51275
51263: PUSH
51264: LD_VAR 0 1
51268: PPUSH
51269: CALL_OW 310
51273: NOT
51274: OR
51275: IFFALSE 51279
// exit ;
51277: GO 51369
// vehicle := IsInUnit ( driver ) ;
51279: LD_ADDR_VAR 0 3
51283: PUSH
51284: LD_VAR 0 1
51288: PPUSH
51289: CALL_OW 310
51293: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51294: LD_VAR 0 1
51298: PPUSH
51299: LD_STRING \
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: PUSH
51329: LD_STRING E
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_VAR 0 3
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PPUSH
51365: CALL_OW 446
// end ;
51369: LD_VAR 0 2
51373: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51374: LD_INT 0
51376: PPUSH
51377: PPUSH
// if not driver or not IsInUnit ( driver ) then
51378: LD_VAR 0 1
51382: NOT
51383: IFTRUE 51397
51385: PUSH
51386: LD_VAR 0 1
51390: PPUSH
51391: CALL_OW 310
51395: NOT
51396: OR
51397: IFFALSE 51401
// exit ;
51399: GO 51491
// vehicle := IsInUnit ( driver ) ;
51401: LD_ADDR_VAR 0 3
51405: PUSH
51406: LD_VAR 0 1
51410: PPUSH
51411: CALL_OW 310
51415: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51416: LD_VAR 0 1
51420: PPUSH
51421: LD_STRING \
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: PUSH
51451: LD_STRING E
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_VAR 0 3
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PPUSH
51487: CALL_OW 447
// end ;
51491: LD_VAR 0 2
51495: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51496: LD_INT 0
51498: PPUSH
51499: PPUSH
51500: PPUSH
// tmp := [ ] ;
51501: LD_ADDR_VAR 0 5
51505: PUSH
51506: EMPTY
51507: ST_TO_ADDR
// for i in units do
51508: LD_ADDR_VAR 0 4
51512: PUSH
51513: LD_VAR 0 1
51517: PUSH
51518: FOR_IN
51519: IFFALSE 51557
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51521: LD_ADDR_VAR 0 5
51525: PUSH
51526: LD_VAR 0 5
51530: PPUSH
51531: LD_VAR 0 5
51535: PUSH
51536: LD_INT 1
51538: PLUS
51539: PPUSH
51540: LD_VAR 0 4
51544: PPUSH
51545: CALL_OW 256
51549: PPUSH
51550: CALL_OW 2
51554: ST_TO_ADDR
51555: GO 51518
51557: POP
51558: POP
// if not tmp then
51559: LD_VAR 0 5
51563: NOT
51564: IFFALSE 51568
// exit ;
51566: GO 51616
// if asc then
51568: LD_VAR 0 2
51572: IFFALSE 51596
// result := SortListByListAsc ( units , tmp ) else
51574: LD_ADDR_VAR 0 3
51578: PUSH
51579: LD_VAR 0 1
51583: PPUSH
51584: LD_VAR 0 5
51588: PPUSH
51589: CALL_OW 76
51593: ST_TO_ADDR
51594: GO 51616
// result := SortListByListDesc ( units , tmp ) ;
51596: LD_ADDR_VAR 0 3
51600: PUSH
51601: LD_VAR 0 1
51605: PPUSH
51606: LD_VAR 0 5
51610: PPUSH
51611: CALL_OW 77
51615: ST_TO_ADDR
// end ;
51616: LD_VAR 0 3
51620: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51621: LD_INT 0
51623: PPUSH
51624: PPUSH
// task := GetTaskList ( mech ) ;
51625: LD_ADDR_VAR 0 4
51629: PUSH
51630: LD_VAR 0 1
51634: PPUSH
51635: CALL_OW 437
51639: ST_TO_ADDR
// if not task then
51640: LD_VAR 0 4
51644: NOT
51645: IFFALSE 51649
// exit ;
51647: GO 51693
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51649: LD_ADDR_VAR 0 3
51653: PUSH
51654: LD_VAR 0 4
51658: PUSH
51659: LD_INT 1
51661: ARRAY
51662: PUSH
51663: LD_INT 1
51665: ARRAY
51666: PUSH
51667: LD_STRING r
51669: EQUAL
51670: IFFALSE 51692
51672: PUSH
51673: LD_VAR 0 4
51677: PUSH
51678: LD_INT 1
51680: ARRAY
51681: PUSH
51682: LD_INT 4
51684: ARRAY
51685: PUSH
51686: LD_VAR 0 2
51690: EQUAL
51691: AND
51692: ST_TO_ADDR
// end ;
51693: LD_VAR 0 3
51697: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51698: LD_INT 0
51700: PPUSH
// SetDir ( unit , d ) ;
51701: LD_VAR 0 1
51705: PPUSH
51706: LD_VAR 0 4
51710: PPUSH
51711: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51715: LD_ADDR_VAR 0 6
51719: PUSH
51720: LD_VAR 0 1
51724: PPUSH
51725: LD_VAR 0 2
51729: PPUSH
51730: LD_VAR 0 3
51734: PPUSH
51735: LD_VAR 0 5
51739: PPUSH
51740: CALL_OW 48
51744: ST_TO_ADDR
// end ;
51745: LD_VAR 0 6
51749: RET
// export function ToNaturalNumber ( number ) ; begin
51750: LD_INT 0
51752: PPUSH
// result := number div 1 ;
51753: LD_ADDR_VAR 0 2
51757: PUSH
51758: LD_VAR 0 1
51762: PUSH
51763: LD_INT 1
51765: DIV
51766: ST_TO_ADDR
// if number < 0 then
51767: LD_VAR 0 1
51771: PUSH
51772: LD_INT 0
51774: LESS
51775: IFFALSE 51785
// result := 0 ;
51777: LD_ADDR_VAR 0 2
51781: PUSH
51782: LD_INT 0
51784: ST_TO_ADDR
// end ;
51785: LD_VAR 0 2
51789: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51790: LD_INT 0
51792: PPUSH
51793: PPUSH
51794: PPUSH
// if not buildings then
51795: LD_VAR 0 1
51799: NOT
51800: IFFALSE 51804
// exit ;
51802: GO 51919
// tmp := [ ] ;
51804: LD_ADDR_VAR 0 5
51808: PUSH
51809: EMPTY
51810: ST_TO_ADDR
// for b in buildings do
51811: LD_ADDR_VAR 0 4
51815: PUSH
51816: LD_VAR 0 1
51820: PUSH
51821: FOR_IN
51822: IFFALSE 51860
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51824: LD_ADDR_VAR 0 5
51828: PUSH
51829: LD_VAR 0 5
51833: PPUSH
51834: LD_VAR 0 5
51838: PUSH
51839: LD_INT 1
51841: PLUS
51842: PPUSH
51843: LD_VAR 0 4
51847: PPUSH
51848: CALL_OW 266
51852: PPUSH
51853: CALL_OW 1
51857: ST_TO_ADDR
51858: GO 51821
51860: POP
51861: POP
// if not tmp then
51862: LD_VAR 0 5
51866: NOT
51867: IFFALSE 51871
// exit ;
51869: GO 51919
// if asc then
51871: LD_VAR 0 2
51875: IFFALSE 51899
// result := SortListByListAsc ( buildings , tmp ) else
51877: LD_ADDR_VAR 0 3
51881: PUSH
51882: LD_VAR 0 1
51886: PPUSH
51887: LD_VAR 0 5
51891: PPUSH
51892: CALL_OW 76
51896: ST_TO_ADDR
51897: GO 51919
// result := SortListByListDesc ( buildings , tmp ) ;
51899: LD_ADDR_VAR 0 3
51903: PUSH
51904: LD_VAR 0 1
51908: PPUSH
51909: LD_VAR 0 5
51913: PPUSH
51914: CALL_OW 77
51918: ST_TO_ADDR
// end ;
51919: LD_VAR 0 3
51923: RET
// export function SortByClass ( units , class ) ; var un ; begin
51924: LD_INT 0
51926: PPUSH
51927: PPUSH
// if not units or not class then
51928: LD_VAR 0 1
51932: NOT
51933: IFTRUE 51942
51935: PUSH
51936: LD_VAR 0 2
51940: NOT
51941: OR
51942: IFFALSE 51946
// exit ;
51944: GO 52041
// result := [ ] ;
51946: LD_ADDR_VAR 0 3
51950: PUSH
51951: EMPTY
51952: ST_TO_ADDR
// for un in units do
51953: LD_ADDR_VAR 0 4
51957: PUSH
51958: LD_VAR 0 1
51962: PUSH
51963: FOR_IN
51964: IFFALSE 52039
// if GetClass ( un ) = class then
51966: LD_VAR 0 4
51970: PPUSH
51971: CALL_OW 257
51975: PUSH
51976: LD_VAR 0 2
51980: EQUAL
51981: IFFALSE 52008
// result := Insert ( result , 1 , un ) else
51983: LD_ADDR_VAR 0 3
51987: PUSH
51988: LD_VAR 0 3
51992: PPUSH
51993: LD_INT 1
51995: PPUSH
51996: LD_VAR 0 4
52000: PPUSH
52001: CALL_OW 2
52005: ST_TO_ADDR
52006: GO 52037
// result := Replace ( result , result + 1 , un ) ;
52008: LD_ADDR_VAR 0 3
52012: PUSH
52013: LD_VAR 0 3
52017: PPUSH
52018: LD_VAR 0 3
52022: PUSH
52023: LD_INT 1
52025: PLUS
52026: PPUSH
52027: LD_VAR 0 4
52031: PPUSH
52032: CALL_OW 1
52036: ST_TO_ADDR
52037: GO 51963
52039: POP
52040: POP
// end ;
52041: LD_VAR 0 3
52045: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
52046: LD_INT 0
52048: PPUSH
52049: PPUSH
52050: PPUSH
52051: PPUSH
52052: PPUSH
52053: PPUSH
52054: PPUSH
// result := [ ] ;
52055: LD_ADDR_VAR 0 4
52059: PUSH
52060: EMPTY
52061: ST_TO_ADDR
// if x - r < 0 then
52062: LD_VAR 0 1
52066: PUSH
52067: LD_VAR 0 3
52071: MINUS
52072: PUSH
52073: LD_INT 0
52075: LESS
52076: IFFALSE 52088
// min_x := 0 else
52078: LD_ADDR_VAR 0 8
52082: PUSH
52083: LD_INT 0
52085: ST_TO_ADDR
52086: GO 52104
// min_x := x - r ;
52088: LD_ADDR_VAR 0 8
52092: PUSH
52093: LD_VAR 0 1
52097: PUSH
52098: LD_VAR 0 3
52102: MINUS
52103: ST_TO_ADDR
// if y - r < 0 then
52104: LD_VAR 0 2
52108: PUSH
52109: LD_VAR 0 3
52113: MINUS
52114: PUSH
52115: LD_INT 0
52117: LESS
52118: IFFALSE 52130
// min_y := 0 else
52120: LD_ADDR_VAR 0 7
52124: PUSH
52125: LD_INT 0
52127: ST_TO_ADDR
52128: GO 52146
// min_y := y - r ;
52130: LD_ADDR_VAR 0 7
52134: PUSH
52135: LD_VAR 0 2
52139: PUSH
52140: LD_VAR 0 3
52144: MINUS
52145: ST_TO_ADDR
// max_x := x + r ;
52146: LD_ADDR_VAR 0 9
52150: PUSH
52151: LD_VAR 0 1
52155: PUSH
52156: LD_VAR 0 3
52160: PLUS
52161: ST_TO_ADDR
// max_y := y + r ;
52162: LD_ADDR_VAR 0 10
52166: PUSH
52167: LD_VAR 0 2
52171: PUSH
52172: LD_VAR 0 3
52176: PLUS
52177: ST_TO_ADDR
// for _x = min_x to max_x do
52178: LD_ADDR_VAR 0 5
52182: PUSH
52183: DOUBLE
52184: LD_VAR 0 8
52188: DEC
52189: ST_TO_ADDR
52190: LD_VAR 0 9
52194: PUSH
52195: FOR_TO
52196: IFFALSE 52297
// for _y = min_y to max_y do
52198: LD_ADDR_VAR 0 6
52202: PUSH
52203: DOUBLE
52204: LD_VAR 0 7
52208: DEC
52209: ST_TO_ADDR
52210: LD_VAR 0 10
52214: PUSH
52215: FOR_TO
52216: IFFALSE 52293
// begin if not ValidHex ( _x , _y ) then
52218: LD_VAR 0 5
52222: PPUSH
52223: LD_VAR 0 6
52227: PPUSH
52228: CALL_OW 488
52232: NOT
52233: IFFALSE 52237
// continue ;
52235: GO 52215
// if GetResourceTypeXY ( _x , _y ) then
52237: LD_VAR 0 5
52241: PPUSH
52242: LD_VAR 0 6
52246: PPUSH
52247: CALL_OW 283
52251: IFFALSE 52291
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
52253: LD_ADDR_VAR 0 4
52257: PUSH
52258: LD_VAR 0 4
52262: PPUSH
52263: LD_VAR 0 4
52267: PUSH
52268: LD_INT 1
52270: PLUS
52271: PPUSH
52272: LD_VAR 0 5
52276: PUSH
52277: LD_VAR 0 6
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PPUSH
52286: CALL_OW 1
52290: ST_TO_ADDR
// end ;
52291: GO 52215
52293: POP
52294: POP
52295: GO 52195
52297: POP
52298: POP
// end ;
52299: LD_VAR 0 4
52303: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52304: LD_INT 0
52306: PPUSH
52307: PPUSH
52308: PPUSH
52309: PPUSH
52310: PPUSH
52311: PPUSH
52312: PPUSH
52313: PPUSH
// if not units then
52314: LD_VAR 0 1
52318: NOT
52319: IFFALSE 52323
// exit ;
52321: GO 52855
// result := UnitFilter ( units , [ f_ok ] ) ;
52323: LD_ADDR_VAR 0 3
52327: PUSH
52328: LD_VAR 0 1
52332: PPUSH
52333: LD_INT 50
52335: PUSH
52336: EMPTY
52337: LIST
52338: PPUSH
52339: CALL_OW 72
52343: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52344: LD_ADDR_VAR 0 8
52348: PUSH
52349: LD_VAR 0 1
52353: PUSH
52354: LD_INT 1
52356: ARRAY
52357: PPUSH
52358: CALL_OW 255
52362: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
52363: LD_ADDR_VAR 0 10
52367: PUSH
52368: LD_INT 29
52370: PUSH
52371: LD_INT 91
52373: PUSH
52374: LD_INT 49
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: LIST
52381: ST_TO_ADDR
// if not result then
52382: LD_VAR 0 3
52386: NOT
52387: IFFALSE 52391
// exit ;
52389: GO 52855
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52391: LD_ADDR_VAR 0 5
52395: PUSH
52396: LD_INT 81
52398: PUSH
52399: LD_VAR 0 8
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PPUSH
52408: CALL_OW 69
52412: ST_TO_ADDR
// for i in result do
52413: LD_ADDR_VAR 0 4
52417: PUSH
52418: LD_VAR 0 3
52422: PUSH
52423: FOR_IN
52424: IFFALSE 52853
// begin tag := GetTag ( i ) + 1 ;
52426: LD_ADDR_VAR 0 9
52430: PUSH
52431: LD_VAR 0 4
52435: PPUSH
52436: CALL_OW 110
52440: PUSH
52441: LD_INT 1
52443: PLUS
52444: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
52445: LD_ADDR_VAR 0 7
52449: PUSH
52450: LD_VAR 0 4
52454: PPUSH
52455: CALL_OW 250
52459: PPUSH
52460: LD_VAR 0 4
52464: PPUSH
52465: CALL_OW 251
52469: PPUSH
52470: LD_INT 4
52472: PPUSH
52473: CALL 52046 0 3
52477: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
52478: LD_VAR 0 4
52482: PPUSH
52483: CALL_OW 247
52487: PUSH
52488: LD_INT 2
52490: EQUAL
52491: IFFALSE 52503
52493: PUSH
52494: LD_VAR 0 7
52498: PUSH
52499: LD_INT 2
52501: GREATER
52502: AND
52503: IFFALSE 52523
52505: PUSH
52506: LD_VAR 0 4
52510: PPUSH
52511: CALL_OW 264
52515: PUSH
52516: LD_VAR 0 10
52520: IN
52521: NOT
52522: AND
52523: IFFALSE 52562
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52525: LD_VAR 0 4
52529: PPUSH
52530: LD_VAR 0 7
52534: PUSH
52535: LD_INT 1
52537: ARRAY
52538: PUSH
52539: LD_INT 1
52541: ARRAY
52542: PPUSH
52543: LD_VAR 0 7
52547: PUSH
52548: LD_INT 1
52550: ARRAY
52551: PUSH
52552: LD_INT 2
52554: ARRAY
52555: PPUSH
52556: CALL_OW 116
52560: GO 52851
// if path > tag then
52562: LD_VAR 0 2
52566: PUSH
52567: LD_VAR 0 9
52571: GREATER
52572: IFFALSE 52780
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
52574: LD_ADDR_VAR 0 6
52578: PUSH
52579: LD_VAR 0 5
52583: PPUSH
52584: LD_INT 91
52586: PUSH
52587: LD_VAR 0 4
52591: PUSH
52592: LD_INT 8
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: LIST
52599: PPUSH
52600: CALL_OW 72
52604: ST_TO_ADDR
// if nearEnemy then
52605: LD_VAR 0 6
52609: IFFALSE 52678
// begin if GetWeapon ( i ) = ru_time_lapser then
52611: LD_VAR 0 4
52615: PPUSH
52616: CALL_OW 264
52620: PUSH
52621: LD_INT 49
52623: EQUAL
52624: IFFALSE 52652
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52626: LD_VAR 0 4
52630: PPUSH
52631: LD_VAR 0 6
52635: PPUSH
52636: LD_VAR 0 4
52640: PPUSH
52641: CALL_OW 74
52645: PPUSH
52646: CALL_OW 112
52650: GO 52676
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52652: LD_VAR 0 4
52656: PPUSH
52657: LD_VAR 0 6
52661: PPUSH
52662: LD_VAR 0 4
52666: PPUSH
52667: CALL_OW 74
52671: PPUSH
52672: CALL 53936 0 2
// end else
52676: GO 52778
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52678: LD_VAR 0 4
52682: PPUSH
52683: LD_VAR 0 2
52687: PUSH
52688: LD_VAR 0 9
52692: ARRAY
52693: PUSH
52694: LD_INT 1
52696: ARRAY
52697: PPUSH
52698: LD_VAR 0 2
52702: PUSH
52703: LD_VAR 0 9
52707: ARRAY
52708: PUSH
52709: LD_INT 2
52711: ARRAY
52712: PPUSH
52713: CALL_OW 297
52717: PUSH
52718: LD_INT 6
52720: GREATER
52721: IFFALSE 52764
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52723: LD_VAR 0 4
52727: PPUSH
52728: LD_VAR 0 2
52732: PUSH
52733: LD_VAR 0 9
52737: ARRAY
52738: PUSH
52739: LD_INT 1
52741: ARRAY
52742: PPUSH
52743: LD_VAR 0 2
52747: PUSH
52748: LD_VAR 0 9
52752: ARRAY
52753: PUSH
52754: LD_INT 2
52756: ARRAY
52757: PPUSH
52758: CALL_OW 114
52762: GO 52778
// SetTag ( i , tag ) ;
52764: LD_VAR 0 4
52768: PPUSH
52769: LD_VAR 0 9
52773: PPUSH
52774: CALL_OW 109
// end else
52778: GO 52851
// if enemy then
52780: LD_VAR 0 5
52784: IFFALSE 52851
// begin if GetWeapon ( i ) = ru_time_lapser then
52786: LD_VAR 0 4
52790: PPUSH
52791: CALL_OW 264
52795: PUSH
52796: LD_INT 49
52798: EQUAL
52799: IFFALSE 52827
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52801: LD_VAR 0 4
52805: PPUSH
52806: LD_VAR 0 5
52810: PPUSH
52811: LD_VAR 0 4
52815: PPUSH
52816: CALL_OW 74
52820: PPUSH
52821: CALL_OW 112
52825: GO 52851
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52827: LD_VAR 0 4
52831: PPUSH
52832: LD_VAR 0 5
52836: PPUSH
52837: LD_VAR 0 4
52841: PPUSH
52842: CALL_OW 74
52846: PPUSH
52847: CALL 53936 0 2
// end ; end ;
52851: GO 52423
52853: POP
52854: POP
// end ;
52855: LD_VAR 0 3
52859: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52860: LD_INT 0
52862: PPUSH
52863: PPUSH
52864: PPUSH
// if not unit or IsInUnit ( unit ) then
52865: LD_VAR 0 1
52869: NOT
52870: IFTRUE 52883
52872: PUSH
52873: LD_VAR 0 1
52877: PPUSH
52878: CALL_OW 310
52882: OR
52883: IFFALSE 52887
// exit ;
52885: GO 52978
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52887: LD_ADDR_VAR 0 4
52891: PUSH
52892: LD_VAR 0 1
52896: PPUSH
52897: CALL_OW 250
52901: PPUSH
52902: LD_VAR 0 2
52906: PPUSH
52907: LD_INT 1
52909: PPUSH
52910: CALL_OW 272
52914: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52915: LD_ADDR_VAR 0 5
52919: PUSH
52920: LD_VAR 0 1
52924: PPUSH
52925: CALL_OW 251
52929: PPUSH
52930: LD_VAR 0 2
52934: PPUSH
52935: LD_INT 1
52937: PPUSH
52938: CALL_OW 273
52942: ST_TO_ADDR
// if ValidHex ( x , y ) then
52943: LD_VAR 0 4
52947: PPUSH
52948: LD_VAR 0 5
52952: PPUSH
52953: CALL_OW 488
52957: IFFALSE 52978
// ComTurnXY ( unit , x , y ) ;
52959: LD_VAR 0 1
52963: PPUSH
52964: LD_VAR 0 4
52968: PPUSH
52969: LD_VAR 0 5
52973: PPUSH
52974: CALL_OW 118
// end ;
52978: LD_VAR 0 3
52982: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52983: LD_INT 0
52985: PPUSH
52986: PPUSH
// result := false ;
52987: LD_ADDR_VAR 0 3
52991: PUSH
52992: LD_INT 0
52994: ST_TO_ADDR
// if not units then
52995: LD_VAR 0 2
52999: NOT
53000: IFFALSE 53004
// exit ;
53002: GO 53049
// for i in units do
53004: LD_ADDR_VAR 0 4
53008: PUSH
53009: LD_VAR 0 2
53013: PUSH
53014: FOR_IN
53015: IFFALSE 53047
// if See ( side , i ) then
53017: LD_VAR 0 1
53021: PPUSH
53022: LD_VAR 0 4
53026: PPUSH
53027: CALL_OW 292
53031: IFFALSE 53045
// begin result := true ;
53033: LD_ADDR_VAR 0 3
53037: PUSH
53038: LD_INT 1
53040: ST_TO_ADDR
// exit ;
53041: POP
53042: POP
53043: GO 53049
// end ;
53045: GO 53014
53047: POP
53048: POP
// end ;
53049: LD_VAR 0 3
53053: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
53054: LD_INT 0
53056: PPUSH
53057: PPUSH
53058: PPUSH
53059: PPUSH
// if not unit or not points then
53060: LD_VAR 0 1
53064: NOT
53065: IFTRUE 53074
53067: PUSH
53068: LD_VAR 0 2
53072: NOT
53073: OR
53074: IFFALSE 53078
// exit ;
53076: GO 53168
// dist := 99999 ;
53078: LD_ADDR_VAR 0 5
53082: PUSH
53083: LD_INT 99999
53085: ST_TO_ADDR
// for i in points do
53086: LD_ADDR_VAR 0 4
53090: PUSH
53091: LD_VAR 0 2
53095: PUSH
53096: FOR_IN
53097: IFFALSE 53166
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
53099: LD_ADDR_VAR 0 6
53103: PUSH
53104: LD_VAR 0 1
53108: PPUSH
53109: LD_VAR 0 4
53113: PUSH
53114: LD_INT 1
53116: ARRAY
53117: PPUSH
53118: LD_VAR 0 4
53122: PUSH
53123: LD_INT 2
53125: ARRAY
53126: PPUSH
53127: CALL_OW 297
53131: ST_TO_ADDR
// if tmpDist < dist then
53132: LD_VAR 0 6
53136: PUSH
53137: LD_VAR 0 5
53141: LESS
53142: IFFALSE 53164
// begin result := i ;
53144: LD_ADDR_VAR 0 3
53148: PUSH
53149: LD_VAR 0 4
53153: ST_TO_ADDR
// dist := tmpDist ;
53154: LD_ADDR_VAR 0 5
53158: PUSH
53159: LD_VAR 0 6
53163: ST_TO_ADDR
// end ; end ;
53164: GO 53096
53166: POP
53167: POP
// end ;
53168: LD_VAR 0 3
53172: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
53173: LD_INT 0
53175: PPUSH
// uc_side := side ;
53176: LD_ADDR_OWVAR 20
53180: PUSH
53181: LD_VAR 0 1
53185: ST_TO_ADDR
// uc_nation := 3 ;
53186: LD_ADDR_OWVAR 21
53190: PUSH
53191: LD_INT 3
53193: ST_TO_ADDR
// vc_chassis := 25 ;
53194: LD_ADDR_OWVAR 37
53198: PUSH
53199: LD_INT 25
53201: ST_TO_ADDR
// vc_engine := engine_siberite ;
53202: LD_ADDR_OWVAR 39
53206: PUSH
53207: LD_INT 3
53209: ST_TO_ADDR
// vc_control := control_computer ;
53210: LD_ADDR_OWVAR 38
53214: PUSH
53215: LD_INT 3
53217: ST_TO_ADDR
// vc_weapon := 59 ;
53218: LD_ADDR_OWVAR 40
53222: PUSH
53223: LD_INT 59
53225: ST_TO_ADDR
// result := CreateVehicle ;
53226: LD_ADDR_VAR 0 5
53230: PUSH
53231: CALL_OW 45
53235: ST_TO_ADDR
// SetDir ( result , d ) ;
53236: LD_VAR 0 5
53240: PPUSH
53241: LD_VAR 0 4
53245: PPUSH
53246: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
53250: LD_VAR 0 5
53254: PPUSH
53255: LD_VAR 0 2
53259: PPUSH
53260: LD_VAR 0 3
53264: PPUSH
53265: LD_INT 0
53267: PPUSH
53268: CALL_OW 48
// end ;
53272: LD_VAR 0 5
53276: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
53277: LD_INT 0
53279: PPUSH
53280: PPUSH
53281: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
53282: LD_ADDR_VAR 0 2
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
53305: LD_VAR 0 1
53309: NOT
53310: IFTRUE 53343
53312: PUSH
53313: LD_VAR 0 1
53317: PPUSH
53318: CALL_OW 264
53322: PUSH
53323: LD_INT 12
53325: PUSH
53326: LD_INT 51
53328: PUSH
53329: LD_INT 32
53331: PUSH
53332: LD_INT 89
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: IN
53341: NOT
53342: OR
53343: IFFALSE 53347
// exit ;
53345: GO 53445
// for i := 1 to 3 do
53347: LD_ADDR_VAR 0 3
53351: PUSH
53352: DOUBLE
53353: LD_INT 1
53355: DEC
53356: ST_TO_ADDR
53357: LD_INT 3
53359: PUSH
53360: FOR_TO
53361: IFFALSE 53443
// begin tmp := GetCargo ( cargo , i ) ;
53363: LD_ADDR_VAR 0 4
53367: PUSH
53368: LD_VAR 0 1
53372: PPUSH
53373: LD_VAR 0 3
53377: PPUSH
53378: CALL_OW 289
53382: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
53383: LD_ADDR_VAR 0 2
53387: PUSH
53388: LD_VAR 0 2
53392: PPUSH
53393: LD_VAR 0 3
53397: PPUSH
53398: LD_VAR 0 4
53402: PPUSH
53403: CALL_OW 1
53407: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
53408: LD_ADDR_VAR 0 2
53412: PUSH
53413: LD_VAR 0 2
53417: PPUSH
53418: LD_INT 4
53420: PPUSH
53421: LD_VAR 0 2
53425: PUSH
53426: LD_INT 4
53428: ARRAY
53429: PUSH
53430: LD_VAR 0 4
53434: PLUS
53435: PPUSH
53436: CALL_OW 1
53440: ST_TO_ADDR
// end ;
53441: GO 53360
53443: POP
53444: POP
// end ;
53445: LD_VAR 0 2
53449: RET
// export function Length ( array ) ; begin
53450: LD_INT 0
53452: PPUSH
// result := array + 0 ;
53453: LD_ADDR_VAR 0 2
53457: PUSH
53458: LD_VAR 0 1
53462: PUSH
53463: LD_INT 0
53465: PLUS
53466: ST_TO_ADDR
// end ;
53467: LD_VAR 0 2
53471: RET
// export function PrepareArray ( array ) ; begin
53472: LD_INT 0
53474: PPUSH
// result := array diff 0 ;
53475: LD_ADDR_VAR 0 2
53479: PUSH
53480: LD_VAR 0 1
53484: PUSH
53485: LD_INT 0
53487: DIFF
53488: ST_TO_ADDR
// if not result [ 1 ] then
53489: LD_VAR 0 2
53493: PUSH
53494: LD_INT 1
53496: ARRAY
53497: NOT
53498: IFFALSE 53518
// result := Delete ( result , 1 ) ;
53500: LD_ADDR_VAR 0 2
53504: PUSH
53505: LD_VAR 0 2
53509: PPUSH
53510: LD_INT 1
53512: PPUSH
53513: CALL_OW 3
53517: ST_TO_ADDR
// end ;
53518: LD_VAR 0 2
53522: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
53523: LD_INT 0
53525: PPUSH
53526: PPUSH
53527: PPUSH
53528: PPUSH
// sibRocketRange := 25 ;
53529: LD_ADDR_VAR 0 6
53533: PUSH
53534: LD_INT 25
53536: ST_TO_ADDR
// result := false ;
53537: LD_ADDR_VAR 0 4
53541: PUSH
53542: LD_INT 0
53544: ST_TO_ADDR
// for i := 0 to 5 do
53545: LD_ADDR_VAR 0 5
53549: PUSH
53550: DOUBLE
53551: LD_INT 0
53553: DEC
53554: ST_TO_ADDR
53555: LD_INT 5
53557: PUSH
53558: FOR_TO
53559: IFFALSE 53626
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
53561: LD_VAR 0 1
53565: PPUSH
53566: LD_VAR 0 5
53570: PPUSH
53571: LD_VAR 0 6
53575: PPUSH
53576: CALL_OW 272
53580: PPUSH
53581: LD_VAR 0 2
53585: PPUSH
53586: LD_VAR 0 5
53590: PPUSH
53591: LD_VAR 0 6
53595: PPUSH
53596: CALL_OW 273
53600: PPUSH
53601: LD_VAR 0 3
53605: PPUSH
53606: CALL_OW 309
53610: IFFALSE 53624
// begin result := true ;
53612: LD_ADDR_VAR 0 4
53616: PUSH
53617: LD_INT 1
53619: ST_TO_ADDR
// exit ;
53620: POP
53621: POP
53622: GO 53628
// end ;
53624: GO 53558
53626: POP
53627: POP
// end ;
53628: LD_VAR 0 4
53632: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
53633: LD_INT 0
53635: PPUSH
53636: PPUSH
53637: PPUSH
// if btype = b_depot then
53638: LD_VAR 0 2
53642: PUSH
53643: LD_INT 0
53645: EQUAL
53646: IFFALSE 53658
// begin result := true ;
53648: LD_ADDR_VAR 0 3
53652: PUSH
53653: LD_INT 1
53655: ST_TO_ADDR
// exit ;
53656: GO 53778
// end ; pom := GetBase ( depot ) ;
53658: LD_ADDR_VAR 0 4
53662: PUSH
53663: LD_VAR 0 1
53667: PPUSH
53668: CALL_OW 274
53672: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53673: LD_ADDR_VAR 0 5
53677: PUSH
53678: LD_VAR 0 2
53682: PPUSH
53683: LD_VAR 0 1
53687: PPUSH
53688: CALL_OW 248
53692: PPUSH
53693: CALL_OW 450
53697: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53698: LD_ADDR_VAR 0 3
53702: PUSH
53703: LD_VAR 0 4
53707: PPUSH
53708: LD_INT 1
53710: PPUSH
53711: CALL_OW 275
53715: PUSH
53716: LD_VAR 0 5
53720: PUSH
53721: LD_INT 1
53723: ARRAY
53724: GREATEREQUAL
53725: IFFALSE 53751
53727: PUSH
53728: LD_VAR 0 4
53732: PPUSH
53733: LD_INT 2
53735: PPUSH
53736: CALL_OW 275
53740: PUSH
53741: LD_VAR 0 5
53745: PUSH
53746: LD_INT 2
53748: ARRAY
53749: GREATEREQUAL
53750: AND
53751: IFFALSE 53777
53753: PUSH
53754: LD_VAR 0 4
53758: PPUSH
53759: LD_INT 3
53761: PPUSH
53762: CALL_OW 275
53766: PUSH
53767: LD_VAR 0 5
53771: PUSH
53772: LD_INT 3
53774: ARRAY
53775: GREATEREQUAL
53776: AND
53777: ST_TO_ADDR
// end ;
53778: LD_VAR 0 3
53782: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53783: LD_INT 0
53785: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53786: LD_VAR 0 1
53790: PPUSH
53791: LD_VAR 0 2
53795: PPUSH
53796: LD_INT 0
53798: PPUSH
53799: LD_INT 0
53801: PPUSH
53802: LD_INT 1
53804: PPUSH
53805: LD_INT 0
53807: PPUSH
53808: CALL_OW 587
// end ;
53812: LD_VAR 0 3
53816: RET
// export function CenterOnNow ( unit ) ; begin
53817: LD_INT 0
53819: PPUSH
// result := IsInUnit ( unit ) ;
53820: LD_ADDR_VAR 0 2
53824: PUSH
53825: LD_VAR 0 1
53829: PPUSH
53830: CALL_OW 310
53834: ST_TO_ADDR
// if not result then
53835: LD_VAR 0 2
53839: NOT
53840: IFFALSE 53852
// result := unit ;
53842: LD_ADDR_VAR 0 2
53846: PUSH
53847: LD_VAR 0 1
53851: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
53852: LD_VAR 0 1
53856: PPUSH
53857: CALL_OW 87
// end ;
53861: LD_VAR 0 2
53865: RET
// export function ComMoveHex ( unit , hex ) ; begin
53866: LD_INT 0
53868: PPUSH
// if not hex then
53869: LD_VAR 0 2
53873: NOT
53874: IFFALSE 53878
// exit ;
53876: GO 53931
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53878: LD_VAR 0 2
53882: PUSH
53883: LD_INT 1
53885: ARRAY
53886: PPUSH
53887: LD_VAR 0 2
53891: PUSH
53892: LD_INT 2
53894: ARRAY
53895: PPUSH
53896: CALL_OW 428
53900: IFFALSE 53904
// exit ;
53902: GO 53931
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53904: LD_VAR 0 1
53908: PPUSH
53909: LD_VAR 0 2
53913: PUSH
53914: LD_INT 1
53916: ARRAY
53917: PPUSH
53918: LD_VAR 0 2
53922: PUSH
53923: LD_INT 2
53925: ARRAY
53926: PPUSH
53927: CALL_OW 111
// end ;
53931: LD_VAR 0 3
53935: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53936: LD_INT 0
53938: PPUSH
53939: PPUSH
53940: PPUSH
// if not unit or not enemy then
53941: LD_VAR 0 1
53945: NOT
53946: IFTRUE 53955
53948: PUSH
53949: LD_VAR 0 2
53953: NOT
53954: OR
53955: IFFALSE 53959
// exit ;
53957: GO 54085
// x := GetX ( enemy ) ;
53959: LD_ADDR_VAR 0 4
53963: PUSH
53964: LD_VAR 0 2
53968: PPUSH
53969: CALL_OW 250
53973: ST_TO_ADDR
// y := GetY ( enemy ) ;
53974: LD_ADDR_VAR 0 5
53978: PUSH
53979: LD_VAR 0 2
53983: PPUSH
53984: CALL_OW 251
53988: ST_TO_ADDR
// if ValidHex ( x , y ) then
53989: LD_VAR 0 4
53993: PPUSH
53994: LD_VAR 0 5
53998: PPUSH
53999: CALL_OW 488
54003: IFFALSE 54085
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
54005: LD_VAR 0 2
54009: PPUSH
54010: CALL_OW 247
54014: PUSH
54015: LD_INT 3
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: IN
54025: IFTRUE 54048
54027: PUSH
54028: LD_VAR 0 1
54032: PPUSH
54033: CALL_OW 255
54037: PPUSH
54038: LD_VAR 0 2
54042: PPUSH
54043: CALL_OW 292
54047: OR
54048: IFFALSE 54066
// ComAttackUnit ( unit , enemy ) else
54050: LD_VAR 0 1
54054: PPUSH
54055: LD_VAR 0 2
54059: PPUSH
54060: CALL_OW 115
54064: GO 54085
// ComAgressiveMove ( unit , x , y ) ;
54066: LD_VAR 0 1
54070: PPUSH
54071: LD_VAR 0 4
54075: PPUSH
54076: LD_VAR 0 5
54080: PPUSH
54081: CALL_OW 114
// end ;
54085: LD_VAR 0 3
54089: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
54090: LD_INT 0
54092: PPUSH
54093: PPUSH
54094: PPUSH
// list := AreaToList ( area , 0 ) ;
54095: LD_ADDR_VAR 0 5
54099: PUSH
54100: LD_VAR 0 1
54104: PPUSH
54105: LD_INT 0
54107: PPUSH
54108: CALL_OW 517
54112: ST_TO_ADDR
// if not list then
54113: LD_VAR 0 5
54117: NOT
54118: IFFALSE 54122
// exit ;
54120: GO 54252
// if all then
54122: LD_VAR 0 2
54126: IFFALSE 54214
// begin for i := 1 to list [ 1 ] do
54128: LD_ADDR_VAR 0 4
54132: PUSH
54133: DOUBLE
54134: LD_INT 1
54136: DEC
54137: ST_TO_ADDR
54138: LD_VAR 0 5
54142: PUSH
54143: LD_INT 1
54145: ARRAY
54146: PUSH
54147: FOR_TO
54148: IFFALSE 54210
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
54150: LD_ADDR_VAR 0 3
54154: PUSH
54155: LD_VAR 0 3
54159: PPUSH
54160: LD_VAR 0 3
54164: PUSH
54165: LD_INT 1
54167: PLUS
54168: PPUSH
54169: LD_VAR 0 5
54173: PUSH
54174: LD_INT 1
54176: ARRAY
54177: PUSH
54178: LD_VAR 0 4
54182: ARRAY
54183: PUSH
54184: LD_VAR 0 5
54188: PUSH
54189: LD_INT 2
54191: ARRAY
54192: PUSH
54193: LD_VAR 0 4
54197: ARRAY
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PPUSH
54203: CALL_OW 1
54207: ST_TO_ADDR
54208: GO 54147
54210: POP
54211: POP
// exit ;
54212: GO 54252
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
54214: LD_ADDR_VAR 0 3
54218: PUSH
54219: LD_VAR 0 5
54223: PUSH
54224: LD_INT 1
54226: ARRAY
54227: PUSH
54228: LD_INT 1
54230: ARRAY
54231: PUSH
54232: LD_VAR 0 5
54236: PUSH
54237: LD_INT 2
54239: ARRAY
54240: PUSH
54241: LD_INT 1
54243: ARRAY
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: EMPTY
54250: LIST
54251: ST_TO_ADDR
// end ;
54252: LD_VAR 0 3
54256: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
54257: LD_INT 0
54259: PPUSH
54260: PPUSH
// list := AreaToList ( area , 0 ) ;
54261: LD_ADDR_VAR 0 4
54265: PUSH
54266: LD_VAR 0 1
54270: PPUSH
54271: LD_INT 0
54273: PPUSH
54274: CALL_OW 517
54278: ST_TO_ADDR
// if not list then
54279: LD_VAR 0 4
54283: NOT
54284: IFFALSE 54288
// exit ;
54286: GO 54329
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
54288: LD_ADDR_VAR 0 3
54292: PUSH
54293: LD_VAR 0 4
54297: PUSH
54298: LD_INT 1
54300: ARRAY
54301: PUSH
54302: LD_INT 1
54304: ARRAY
54305: PUSH
54306: LD_VAR 0 4
54310: PUSH
54311: LD_INT 2
54313: ARRAY
54314: PUSH
54315: LD_INT 1
54317: ARRAY
54318: PUSH
54319: LD_VAR 0 2
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: LIST
54328: ST_TO_ADDR
// end ;
54329: LD_VAR 0 3
54333: RET
// export function First ( array ) ; begin
54334: LD_INT 0
54336: PPUSH
// if not array then
54337: LD_VAR 0 1
54341: NOT
54342: IFFALSE 54346
// exit ;
54344: GO 54360
// result := array [ 1 ] ;
54346: LD_ADDR_VAR 0 2
54350: PUSH
54351: LD_VAR 0 1
54355: PUSH
54356: LD_INT 1
54358: ARRAY
54359: ST_TO_ADDR
// end ;
54360: LD_VAR 0 2
54364: RET
// export function Last ( array ) ; begin
54365: LD_INT 0
54367: PPUSH
// if not array then
54368: LD_VAR 0 1
54372: NOT
54373: IFFALSE 54377
// exit ;
54375: GO 54393
// result := array [ array ] ;
54377: LD_ADDR_VAR 0 2
54381: PUSH
54382: LD_VAR 0 1
54386: PUSH
54387: LD_VAR 0 1
54391: ARRAY
54392: ST_TO_ADDR
// end ;
54393: LD_VAR 0 2
54397: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
54398: LD_INT 0
54400: PPUSH
54401: PPUSH
// result := [ ] ;
54402: LD_ADDR_VAR 0 5
54406: PUSH
54407: EMPTY
54408: ST_TO_ADDR
// if not array then
54409: LD_VAR 0 1
54413: NOT
54414: IFFALSE 54418
// exit ;
54416: GO 54530
// for i := 1 to array do
54418: LD_ADDR_VAR 0 6
54422: PUSH
54423: DOUBLE
54424: LD_INT 1
54426: DEC
54427: ST_TO_ADDR
54428: LD_VAR 0 1
54432: PUSH
54433: FOR_TO
54434: IFFALSE 54528
// if array [ i ] [ index ] = value then
54436: LD_VAR 0 1
54440: PUSH
54441: LD_VAR 0 6
54445: ARRAY
54446: PUSH
54447: LD_VAR 0 2
54451: ARRAY
54452: PUSH
54453: LD_VAR 0 3
54457: EQUAL
54458: IFFALSE 54526
// begin if indexColumn then
54460: LD_VAR 0 4
54464: IFFALSE 54500
// result := Join ( result , array [ i ] [ indexColumn ] ) else
54466: LD_ADDR_VAR 0 5
54470: PUSH
54471: LD_VAR 0 5
54475: PPUSH
54476: LD_VAR 0 1
54480: PUSH
54481: LD_VAR 0 6
54485: ARRAY
54486: PUSH
54487: LD_VAR 0 4
54491: ARRAY
54492: PPUSH
54493: CALL 49538 0 2
54497: ST_TO_ADDR
54498: GO 54526
// result := Join ( result , array [ i ] ) ;
54500: LD_ADDR_VAR 0 5
54504: PUSH
54505: LD_VAR 0 5
54509: PPUSH
54510: LD_VAR 0 1
54514: PUSH
54515: LD_VAR 0 6
54519: ARRAY
54520: PPUSH
54521: CALL 49538 0 2
54525: ST_TO_ADDR
// end ;
54526: GO 54433
54528: POP
54529: POP
// end ;
54530: LD_VAR 0 5
54534: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
54535: LD_INT 0
54537: PPUSH
// if not vehicles or not parkingPoint then
54538: LD_VAR 0 1
54542: NOT
54543: IFTRUE 54552
54545: PUSH
54546: LD_VAR 0 2
54550: NOT
54551: OR
54552: IFFALSE 54556
// exit ;
54554: GO 54654
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
54556: LD_ADDR_VAR 0 1
54560: PUSH
54561: LD_VAR 0 1
54565: PPUSH
54566: LD_INT 50
54568: PUSH
54569: EMPTY
54570: LIST
54571: PUSH
54572: LD_INT 3
54574: PUSH
54575: LD_INT 92
54577: PUSH
54578: LD_VAR 0 2
54582: PUSH
54583: LD_INT 1
54585: ARRAY
54586: PUSH
54587: LD_VAR 0 2
54591: PUSH
54592: LD_INT 2
54594: ARRAY
54595: PUSH
54596: LD_INT 8
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PPUSH
54613: CALL_OW 72
54617: ST_TO_ADDR
// if not vehicles then
54618: LD_VAR 0 1
54622: NOT
54623: IFFALSE 54627
// exit ;
54625: GO 54654
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
54627: LD_VAR 0 1
54631: PPUSH
54632: LD_VAR 0 2
54636: PUSH
54637: LD_INT 1
54639: ARRAY
54640: PPUSH
54641: LD_VAR 0 2
54645: PUSH
54646: LD_INT 2
54648: ARRAY
54649: PPUSH
54650: CALL_OW 111
// end ;
54654: LD_VAR 0 3
54658: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
54659: LD_INT 0
54661: PPUSH
54662: PPUSH
54663: PPUSH
// if not side or not area then
54664: LD_VAR 0 1
54668: NOT
54669: IFTRUE 54678
54671: PUSH
54672: LD_VAR 0 2
54676: NOT
54677: OR
54678: IFFALSE 54682
// exit ;
54680: GO 54801
// tmp := AreaToList ( area , 0 ) ;
54682: LD_ADDR_VAR 0 5
54686: PUSH
54687: LD_VAR 0 2
54691: PPUSH
54692: LD_INT 0
54694: PPUSH
54695: CALL_OW 517
54699: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54700: LD_ADDR_VAR 0 4
54704: PUSH
54705: DOUBLE
54706: LD_INT 1
54708: DEC
54709: ST_TO_ADDR
54710: LD_VAR 0 5
54714: PUSH
54715: LD_INT 1
54717: ARRAY
54718: PUSH
54719: FOR_TO
54720: IFFALSE 54799
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54722: LD_VAR 0 5
54726: PUSH
54727: LD_INT 1
54729: ARRAY
54730: PUSH
54731: LD_VAR 0 4
54735: ARRAY
54736: PPUSH
54737: LD_VAR 0 5
54741: PUSH
54742: LD_INT 2
54744: ARRAY
54745: PUSH
54746: LD_VAR 0 4
54750: ARRAY
54751: PPUSH
54752: CALL_OW 351
54756: IFFALSE 54797
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54758: LD_VAR 0 5
54762: PUSH
54763: LD_INT 1
54765: ARRAY
54766: PUSH
54767: LD_VAR 0 4
54771: ARRAY
54772: PPUSH
54773: LD_VAR 0 5
54777: PUSH
54778: LD_INT 2
54780: ARRAY
54781: PUSH
54782: LD_VAR 0 4
54786: ARRAY
54787: PPUSH
54788: LD_VAR 0 1
54792: PPUSH
54793: CALL_OW 244
// end ;
54797: GO 54719
54799: POP
54800: POP
// end ;
54801: LD_VAR 0 3
54805: RET
// export function UniqueArray ( array ) ; var i ; begin
54806: LD_INT 0
54808: PPUSH
54809: PPUSH
// result := [ ] ;
54810: LD_ADDR_VAR 0 2
54814: PUSH
54815: EMPTY
54816: ST_TO_ADDR
// if not array then
54817: LD_VAR 0 1
54821: NOT
54822: IFFALSE 54826
// exit ;
54824: GO 54887
// for i := 1 to array do
54826: LD_ADDR_VAR 0 3
54830: PUSH
54831: DOUBLE
54832: LD_INT 1
54834: DEC
54835: ST_TO_ADDR
54836: LD_VAR 0 1
54840: PUSH
54841: FOR_TO
54842: IFFALSE 54885
// if not array [ i ] in result then
54844: LD_VAR 0 1
54848: PUSH
54849: LD_VAR 0 3
54853: ARRAY
54854: PUSH
54855: LD_VAR 0 2
54859: IN
54860: NOT
54861: IFFALSE 54883
// result := Join ( result , i ) ;
54863: LD_ADDR_VAR 0 2
54867: PUSH
54868: LD_VAR 0 2
54872: PPUSH
54873: LD_VAR 0 3
54877: PPUSH
54878: CALL 49538 0 2
54882: ST_TO_ADDR
54883: GO 54841
54885: POP
54886: POP
// end ; end_of_file
54887: LD_VAR 0 2
54891: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54892: LD_VAR 0 1
54896: PUSH
54897: LD_INT 200
54899: DOUBLE
54900: GREATEREQUAL
54901: IFFALSE 54909
54903: LD_INT 299
54905: DOUBLE
54906: LESSEQUAL
54907: IFTRUE 54911
54909: GO 54943
54911: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54912: LD_VAR 0 1
54916: PPUSH
54917: LD_VAR 0 2
54921: PPUSH
54922: LD_VAR 0 3
54926: PPUSH
54927: LD_VAR 0 4
54931: PPUSH
54932: LD_VAR 0 5
54936: PPUSH
54937: CALL 55805 0 5
54941: GO 55020
54943: LD_INT 300
54945: DOUBLE
54946: GREATEREQUAL
54947: IFFALSE 54955
54949: LD_INT 399
54951: DOUBLE
54952: LESSEQUAL
54953: IFTRUE 54957
54955: GO 55019
54957: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54958: LD_VAR 0 1
54962: PPUSH
54963: LD_VAR 0 2
54967: PPUSH
54968: LD_VAR 0 3
54972: PPUSH
54973: LD_VAR 0 4
54977: PPUSH
54978: LD_VAR 0 5
54982: PPUSH
54983: LD_VAR 0 6
54987: PPUSH
54988: LD_VAR 0 7
54992: PPUSH
54993: LD_VAR 0 8
54997: PPUSH
54998: LD_VAR 0 9
55002: PPUSH
55003: LD_VAR 0 10
55007: PPUSH
55008: LD_VAR 0 11
55012: PPUSH
55013: CALL 63907 0 11
55017: GO 55020
55019: POP
// end ;
55020: PPOPN 11
55022: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55023: LD_VAR 0 1
55027: PPUSH
55028: LD_VAR 0 2
55032: PPUSH
55033: LD_VAR 0 3
55037: PPUSH
55038: LD_VAR 0 4
55042: PPUSH
55043: LD_VAR 0 5
55047: PPUSH
55048: CALL 55105 0 5
// end ; end_of_file
55052: PPOPN 5
55054: END
// export function SOS_UnitDestroyed ( un ) ; begin
55055: LD_INT 0
55057: PPUSH
// ComRadiation ( un ) ;
55058: LD_VAR 0 1
55062: PPUSH
55063: CALL 56225 0 1
// end ;
55067: LD_VAR 0 2
55071: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55072: LD_INT 0
55074: PPUSH
// ComRadiation ( un ) ;
55075: LD_VAR 0 1
55079: PPUSH
55080: CALL 56225 0 1
// end ;
55084: LD_VAR 0 2
55088: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55089: LD_INT 0
55091: PPUSH
// end ;
55092: LD_VAR 0 4
55096: RET
// export function SOS_Command ( cmd ) ; begin
55097: LD_INT 0
55099: PPUSH
// end ;
55100: LD_VAR 0 2
55104: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55105: LD_INT 0
55107: PPUSH
// end ;
55108: LD_VAR 0 6
55112: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
55113: LD_INT 0
55115: PPUSH
55116: PPUSH
55117: PPUSH
55118: PPUSH
55119: PPUSH
// if not vehicle or not factory then
55120: LD_VAR 0 1
55124: NOT
55125: IFTRUE 55134
55127: PUSH
55128: LD_VAR 0 2
55132: NOT
55133: OR
55134: IFFALSE 55138
// exit ;
55136: GO 55800
// weapon := GetWeapon ( vehicle ) ;
55138: LD_ADDR_VAR 0 7
55142: PUSH
55143: LD_VAR 0 1
55147: PPUSH
55148: CALL_OW 264
55152: ST_TO_ADDR
// if weapon = ar_miner then
55153: LD_VAR 0 7
55157: PUSH
55158: LD_INT 81
55160: EQUAL
55161: IFFALSE 55218
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
55163: LD_ADDR_EXP 57
55167: PUSH
55168: LD_EXP 57
55172: PPUSH
55173: LD_EXP 57
55177: PUSH
55178: LD_INT 1
55180: PLUS
55181: PPUSH
55182: LD_VAR 0 1
55186: PPUSH
55187: CALL_OW 1
55191: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55192: LD_ADDR_EXP 58
55196: PUSH
55197: LD_EXP 58
55201: PPUSH
55202: LD_EXP 58
55206: PUSH
55207: LD_INT 1
55209: PLUS
55210: PPUSH
55211: EMPTY
55212: PPUSH
55213: CALL_OW 1
55217: ST_TO_ADDR
// end ; if not factoryWaypoints then
55218: LD_EXP 61
55222: NOT
55223: IFFALSE 55227
// exit ;
55225: GO 55800
// for i := 1 to Count ( factoryWaypoints ) do
55227: LD_ADDR_VAR 0 4
55231: PUSH
55232: DOUBLE
55233: LD_INT 1
55235: DEC
55236: ST_TO_ADDR
55237: LD_EXP 61
55241: PPUSH
55242: CALL 13562 0 1
55246: PUSH
55247: FOR_TO
55248: IFFALSE 55798
// if factoryWaypoints [ i ] [ 2 ] = factory then
55250: LD_EXP 61
55254: PUSH
55255: LD_VAR 0 4
55259: ARRAY
55260: PUSH
55261: LD_INT 2
55263: ARRAY
55264: PUSH
55265: LD_VAR 0 2
55269: EQUAL
55270: IFFALSE 55796
// begin if GetControl ( vehicle ) = control_manual then
55272: LD_VAR 0 1
55276: PPUSH
55277: CALL_OW 263
55281: PUSH
55282: LD_INT 1
55284: EQUAL
55285: IFFALSE 55649
// begin driver := IsDrivenBy ( vehicle ) ;
55287: LD_ADDR_VAR 0 5
55291: PUSH
55292: LD_VAR 0 1
55296: PPUSH
55297: CALL_OW 311
55301: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55302: LD_VAR 0 5
55306: PUSH
55307: LD_EXP 62
55311: IN
55312: IFTRUE 55326
55314: PUSH
55315: LD_VAR 0 1
55319: PUSH
55320: LD_EXP 62
55324: IN
55325: OR
55326: IFFALSE 55332
// exit ;
55328: POP
55329: POP
55330: GO 55800
// if not HasTask ( driver ) then
55332: LD_VAR 0 5
55336: PPUSH
55337: CALL_OW 314
55341: NOT
55342: IFFALSE 55647
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55344: LD_ADDR_EXP 62
55348: PUSH
55349: LD_EXP 62
55353: PPUSH
55354: LD_VAR 0 5
55358: PPUSH
55359: CALL 49538 0 2
55363: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55364: LD_ADDR_EXP 62
55368: PUSH
55369: LD_EXP 62
55373: PPUSH
55374: LD_VAR 0 1
55378: PPUSH
55379: CALL 49538 0 2
55383: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55384: LD_ADDR_VAR 0 6
55388: PUSH
55389: LD_EXP 61
55393: PUSH
55394: LD_VAR 0 4
55398: ARRAY
55399: PUSH
55400: LD_INT 3
55402: ARRAY
55403: PPUSH
55404: LD_EXP 61
55408: PUSH
55409: LD_VAR 0 4
55413: ARRAY
55414: PUSH
55415: LD_INT 4
55417: ARRAY
55418: PPUSH
55419: CALL_OW 428
55423: ST_TO_ADDR
// if hex then
55424: LD_VAR 0 6
55428: IFFALSE 55446
// ComMoveUnit ( driver , hex ) else
55430: LD_VAR 0 5
55434: PPUSH
55435: LD_VAR 0 6
55439: PPUSH
55440: CALL_OW 112
55444: GO 55530
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55446: LD_VAR 0 1
55450: PPUSH
55451: LD_EXP 61
55455: PUSH
55456: LD_VAR 0 4
55460: ARRAY
55461: PUSH
55462: LD_INT 3
55464: ARRAY
55465: PPUSH
55466: LD_EXP 61
55470: PUSH
55471: LD_VAR 0 4
55475: ARRAY
55476: PUSH
55477: LD_INT 4
55479: ARRAY
55480: PPUSH
55481: CALL_OW 297
55485: PUSH
55486: LD_INT 0
55488: GREATER
55489: IFFALSE 55530
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55491: LD_VAR 0 5
55495: PPUSH
55496: LD_EXP 61
55500: PUSH
55501: LD_VAR 0 4
55505: ARRAY
55506: PUSH
55507: LD_INT 3
55509: ARRAY
55510: PPUSH
55511: LD_EXP 61
55515: PUSH
55516: LD_VAR 0 4
55520: ARRAY
55521: PUSH
55522: LD_INT 4
55524: ARRAY
55525: PPUSH
55526: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55530: LD_VAR 0 5
55534: PPUSH
55535: CALL_OW 181
// if Multiplayer then
55539: LD_OWVAR 4
55543: IFFALSE 55592
// begin repeat wait ( 10 ) ;
55545: LD_INT 10
55547: PPUSH
55548: CALL_OW 67
// until not IsInUnit ( driver ) ;
55552: LD_VAR 0 5
55556: PPUSH
55557: CALL_OW 310
55561: NOT
55562: IFFALSE 55545
// if not HasTask ( driver ) then
55564: LD_VAR 0 5
55568: PPUSH
55569: CALL_OW 314
55573: NOT
55574: IFFALSE 55590
// ComEnterUnit ( driver , factory ) ;
55576: LD_VAR 0 5
55580: PPUSH
55581: LD_VAR 0 2
55585: PPUSH
55586: CALL_OW 120
// end else
55590: GO 55606
// AddComEnterUnit ( driver , factory ) ;
55592: LD_VAR 0 5
55596: PPUSH
55597: LD_VAR 0 2
55601: PPUSH
55602: CALL_OW 180
// wait ( 0 0$1 ) ;
55606: LD_INT 35
55608: PPUSH
55609: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55613: LD_ADDR_EXP 62
55617: PUSH
55618: LD_EXP 62
55622: PUSH
55623: LD_VAR 0 5
55627: DIFF
55628: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55629: LD_ADDR_EXP 62
55633: PUSH
55634: LD_EXP 62
55638: PUSH
55639: LD_VAR 0 1
55643: DIFF
55644: ST_TO_ADDR
// break ;
55645: GO 55798
// end ; end else
55647: GO 55796
// if GetControl ( vehicle ) = control_remote then
55649: LD_VAR 0 1
55653: PPUSH
55654: CALL_OW 263
55658: PUSH
55659: LD_INT 2
55661: EQUAL
55662: IFFALSE 55748
// begin wait ( 0 0$2 ) ;
55664: LD_INT 70
55666: PPUSH
55667: CALL_OW 67
// repeat wait ( 10 ) ;
55671: LD_INT 10
55673: PPUSH
55674: CALL_OW 67
// Connect ( vehicle ) ;
55678: LD_VAR 0 1
55682: PPUSH
55683: CALL 19840 0 1
// until IsControledBy ( vehicle ) ;
55687: LD_VAR 0 1
55691: PPUSH
55692: CALL_OW 312
55696: IFFALSE 55671
// wait ( 10 ) ;
55698: LD_INT 10
55700: PPUSH
55701: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55705: LD_VAR 0 1
55709: PPUSH
55710: LD_EXP 61
55714: PUSH
55715: LD_VAR 0 4
55719: ARRAY
55720: PUSH
55721: LD_INT 3
55723: ARRAY
55724: PPUSH
55725: LD_EXP 61
55729: PUSH
55730: LD_VAR 0 4
55734: ARRAY
55735: PUSH
55736: LD_INT 4
55738: ARRAY
55739: PPUSH
55740: CALL_OW 111
// break ;
55744: GO 55798
// end else
55746: GO 55796
// begin wait ( 0 0$3 ) ;
55748: LD_INT 105
55750: PPUSH
55751: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55755: LD_VAR 0 1
55759: PPUSH
55760: LD_EXP 61
55764: PUSH
55765: LD_VAR 0 4
55769: ARRAY
55770: PUSH
55771: LD_INT 3
55773: ARRAY
55774: PPUSH
55775: LD_EXP 61
55779: PUSH
55780: LD_VAR 0 4
55784: ARRAY
55785: PUSH
55786: LD_INT 4
55788: ARRAY
55789: PPUSH
55790: CALL_OW 111
// break ;
55794: GO 55798
// end ; end ;
55796: GO 55247
55798: POP
55799: POP
// end ;
55800: LD_VAR 0 3
55804: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55805: LD_INT 0
55807: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55808: LD_VAR 0 1
55812: PUSH
55813: LD_INT 250
55815: EQUAL
55816: IFFALSE 55833
55818: PUSH
55819: LD_VAR 0 2
55823: PPUSH
55824: CALL_OW 264
55828: PUSH
55829: LD_INT 81
55831: EQUAL
55832: AND
55833: IFFALSE 55854
// MinerPlaceMine ( unit , x , y ) ;
55835: LD_VAR 0 2
55839: PPUSH
55840: LD_VAR 0 4
55844: PPUSH
55845: LD_VAR 0 5
55849: PPUSH
55850: CALL 59200 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55854: LD_VAR 0 1
55858: PUSH
55859: LD_INT 251
55861: EQUAL
55862: IFFALSE 55879
55864: PUSH
55865: LD_VAR 0 2
55869: PPUSH
55870: CALL_OW 264
55874: PUSH
55875: LD_INT 81
55877: EQUAL
55878: AND
55879: IFFALSE 55900
// MinerDetonateMine ( unit , x , y ) ;
55881: LD_VAR 0 2
55885: PPUSH
55886: LD_VAR 0 4
55890: PPUSH
55891: LD_VAR 0 5
55895: PPUSH
55896: CALL 59607 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55900: LD_VAR 0 1
55904: PUSH
55905: LD_INT 252
55907: EQUAL
55908: IFFALSE 55925
55910: PUSH
55911: LD_VAR 0 2
55915: PPUSH
55916: CALL_OW 264
55920: PUSH
55921: LD_INT 81
55923: EQUAL
55924: AND
55925: IFFALSE 55946
// MinerCreateMinefield ( unit , x , y ) ;
55927: LD_VAR 0 2
55931: PPUSH
55932: LD_VAR 0 4
55936: PPUSH
55937: LD_VAR 0 5
55941: PPUSH
55942: CALL 59839 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55946: LD_VAR 0 1
55950: PUSH
55951: LD_INT 253
55953: EQUAL
55954: IFFALSE 55971
55956: PUSH
55957: LD_VAR 0 2
55961: PPUSH
55962: CALL_OW 257
55966: PUSH
55967: LD_INT 5
55969: EQUAL
55970: AND
55971: IFFALSE 55992
// ComBinocular ( unit , x , y ) ;
55973: LD_VAR 0 2
55977: PPUSH
55978: LD_VAR 0 4
55982: PPUSH
55983: LD_VAR 0 5
55987: PPUSH
55988: CALL 60214 0 3
// if selectedUnit then
55992: LD_VAR 0 3
55996: IFFALSE 56056
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55998: LD_VAR 0 1
56002: PUSH
56003: LD_INT 254
56005: EQUAL
56006: IFFALSE 56023
56008: PUSH
56009: LD_VAR 0 2
56013: PPUSH
56014: CALL_OW 264
56018: PUSH
56019: LD_INT 99
56021: EQUAL
56022: AND
56023: IFFALSE 56040
56025: PUSH
56026: LD_VAR 0 3
56030: PPUSH
56031: CALL_OW 263
56035: PUSH
56036: LD_INT 3
56038: EQUAL
56039: AND
56040: IFFALSE 56056
// HackDestroyVehicle ( unit , selectedUnit ) ;
56042: LD_VAR 0 2
56046: PPUSH
56047: LD_VAR 0 3
56051: PPUSH
56052: CALL 58390 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56056: LD_VAR 0 1
56060: PUSH
56061: LD_INT 255
56063: EQUAL
56064: IFFALSE 56088
56066: PUSH
56067: LD_VAR 0 2
56071: PPUSH
56072: CALL_OW 264
56076: PUSH
56077: LD_INT 14
56079: PUSH
56080: LD_INT 53
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: IN
56087: AND
56088: IFFALSE 56106
56090: PUSH
56091: LD_VAR 0 4
56095: PPUSH
56096: LD_VAR 0 5
56100: PPUSH
56101: CALL_OW 488
56105: AND
56106: IFFALSE 56130
// CutTreeXYR ( unit , x , y , 12 ) ;
56108: LD_VAR 0 2
56112: PPUSH
56113: LD_VAR 0 4
56117: PPUSH
56118: LD_VAR 0 5
56122: PPUSH
56123: LD_INT 12
56125: PPUSH
56126: CALL 56321 0 4
// if cmd = 256 then
56130: LD_VAR 0 1
56134: PUSH
56135: LD_INT 256
56137: EQUAL
56138: IFFALSE 56159
// SetFactoryWaypoint ( unit , x , y ) ;
56140: LD_VAR 0 2
56144: PPUSH
56145: LD_VAR 0 4
56149: PPUSH
56150: LD_VAR 0 5
56154: PPUSH
56155: CALL 63915 0 3
// if cmd = 257 then
56159: LD_VAR 0 1
56163: PUSH
56164: LD_INT 257
56166: EQUAL
56167: IFFALSE 56188
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56169: LD_VAR 0 2
56173: PPUSH
56174: LD_VAR 0 4
56178: PPUSH
56179: LD_VAR 0 5
56183: PPUSH
56184: CALL 64411 0 3
// if cmd = 258 then
56188: LD_VAR 0 1
56192: PUSH
56193: LD_INT 258
56195: EQUAL
56196: IFFALSE 56220
// BurnTreeXYR ( unit , x , y , 8 ) ;
56198: LD_VAR 0 2
56202: PPUSH
56203: LD_VAR 0 4
56207: PPUSH
56208: LD_VAR 0 5
56212: PPUSH
56213: LD_INT 8
56215: PPUSH
56216: CALL 56743 0 4
// end ;
56220: LD_VAR 0 6
56224: RET
// export function ComRadiation ( un ) ; var eff ; begin
56225: LD_INT 0
56227: PPUSH
56228: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56229: LD_VAR 0 1
56233: PPUSH
56234: CALL_OW 264
56238: PUSH
56239: LD_INT 91
56241: NONEQUAL
56242: IFFALSE 56246
// exit ;
56244: GO 56316
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56246: LD_INT 68
56248: PPUSH
56249: LD_VAR 0 1
56253: PPUSH
56254: CALL_OW 255
56258: PPUSH
56259: CALL_OW 321
56263: PUSH
56264: LD_INT 2
56266: EQUAL
56267: IFFALSE 56279
// eff := 50 else
56269: LD_ADDR_VAR 0 3
56273: PUSH
56274: LD_INT 50
56276: ST_TO_ADDR
56277: GO 56287
// eff := 25 ;
56279: LD_ADDR_VAR 0 3
56283: PUSH
56284: LD_INT 25
56286: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56287: LD_VAR 0 1
56291: PPUSH
56292: CALL_OW 250
56296: PPUSH
56297: LD_VAR 0 1
56301: PPUSH
56302: CALL_OW 251
56306: PPUSH
56307: LD_VAR 0 3
56311: PPUSH
56312: CALL_OW 495
// end ;
56316: LD_VAR 0 2
56320: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56321: LD_INT 0
56323: PPUSH
56324: PPUSH
56325: PPUSH
56326: PPUSH
56327: PPUSH
56328: PPUSH
56329: PPUSH
56330: PPUSH
56331: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56332: LD_VAR 0 1
56336: PPUSH
56337: CALL_OW 302
56341: NOT
56342: IFTRUE 56361
56344: PUSH
56345: LD_VAR 0 2
56349: PPUSH
56350: LD_VAR 0 3
56354: PPUSH
56355: CALL_OW 488
56359: NOT
56360: OR
56361: IFTRUE 56370
56363: PUSH
56364: LD_VAR 0 4
56368: NOT
56369: OR
56370: IFFALSE 56374
// exit ;
56372: GO 56738
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
56374: LD_VAR 0 1
56378: PPUSH
56379: CALL_OW 437
56383: PPUSH
56384: CALL 13562 0 1
56388: PUSH
56389: LD_INT 10
56391: GREATER
56392: IFFALSE 56396
// exit ;
56394: GO 56738
// list := [ ] ;
56396: LD_ADDR_VAR 0 13
56400: PUSH
56401: EMPTY
56402: ST_TO_ADDR
// if x - r < 0 then
56403: LD_VAR 0 2
56407: PUSH
56408: LD_VAR 0 4
56412: MINUS
56413: PUSH
56414: LD_INT 0
56416: LESS
56417: IFFALSE 56429
// min_x := 0 else
56419: LD_ADDR_VAR 0 7
56423: PUSH
56424: LD_INT 0
56426: ST_TO_ADDR
56427: GO 56445
// min_x := x - r ;
56429: LD_ADDR_VAR 0 7
56433: PUSH
56434: LD_VAR 0 2
56438: PUSH
56439: LD_VAR 0 4
56443: MINUS
56444: ST_TO_ADDR
// if y - r < 0 then
56445: LD_VAR 0 3
56449: PUSH
56450: LD_VAR 0 4
56454: MINUS
56455: PUSH
56456: LD_INT 0
56458: LESS
56459: IFFALSE 56471
// min_y := 0 else
56461: LD_ADDR_VAR 0 8
56465: PUSH
56466: LD_INT 0
56468: ST_TO_ADDR
56469: GO 56487
// min_y := y - r ;
56471: LD_ADDR_VAR 0 8
56475: PUSH
56476: LD_VAR 0 3
56480: PUSH
56481: LD_VAR 0 4
56485: MINUS
56486: ST_TO_ADDR
// max_x := x + r ;
56487: LD_ADDR_VAR 0 9
56491: PUSH
56492: LD_VAR 0 2
56496: PUSH
56497: LD_VAR 0 4
56501: PLUS
56502: ST_TO_ADDR
// max_y := y + r ;
56503: LD_ADDR_VAR 0 10
56507: PUSH
56508: LD_VAR 0 3
56512: PUSH
56513: LD_VAR 0 4
56517: PLUS
56518: ST_TO_ADDR
// for _x = min_x to max_x do
56519: LD_ADDR_VAR 0 11
56523: PUSH
56524: DOUBLE
56525: LD_VAR 0 7
56529: DEC
56530: ST_TO_ADDR
56531: LD_VAR 0 9
56535: PUSH
56536: FOR_TO
56537: IFFALSE 56656
// for _y = min_y to max_y do
56539: LD_ADDR_VAR 0 12
56543: PUSH
56544: DOUBLE
56545: LD_VAR 0 8
56549: DEC
56550: ST_TO_ADDR
56551: LD_VAR 0 10
56555: PUSH
56556: FOR_TO
56557: IFFALSE 56652
// begin if not ValidHex ( _x , _y ) then
56559: LD_VAR 0 11
56563: PPUSH
56564: LD_VAR 0 12
56568: PPUSH
56569: CALL_OW 488
56573: NOT
56574: IFFALSE 56578
// continue ;
56576: GO 56556
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56578: LD_VAR 0 11
56582: PPUSH
56583: LD_VAR 0 12
56587: PPUSH
56588: CALL_OW 351
56592: IFFALSE 56610
56594: PUSH
56595: LD_VAR 0 11
56599: PPUSH
56600: LD_VAR 0 12
56604: PPUSH
56605: CALL_OW 554
56609: AND
56610: IFFALSE 56650
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56612: LD_ADDR_VAR 0 13
56616: PUSH
56617: LD_VAR 0 13
56621: PPUSH
56622: LD_VAR 0 13
56626: PUSH
56627: LD_INT 1
56629: PLUS
56630: PPUSH
56631: LD_VAR 0 11
56635: PUSH
56636: LD_VAR 0 12
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PPUSH
56645: CALL_OW 2
56649: ST_TO_ADDR
// end ;
56650: GO 56556
56652: POP
56653: POP
56654: GO 56536
56656: POP
56657: POP
// if not list then
56658: LD_VAR 0 13
56662: NOT
56663: IFFALSE 56667
// exit ;
56665: GO 56738
// for i in list do
56667: LD_ADDR_VAR 0 6
56671: PUSH
56672: LD_VAR 0 13
56676: PUSH
56677: FOR_IN
56678: IFFALSE 56736
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56680: LD_VAR 0 1
56684: PPUSH
56685: LD_STRING M
56687: PUSH
56688: LD_VAR 0 6
56692: PUSH
56693: LD_INT 1
56695: ARRAY
56696: PUSH
56697: LD_VAR 0 6
56701: PUSH
56702: LD_INT 2
56704: ARRAY
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: PUSH
56727: EMPTY
56728: LIST
56729: PPUSH
56730: CALL_OW 447
56734: GO 56677
56736: POP
56737: POP
// end ;
56738: LD_VAR 0 5
56742: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56743: LD_INT 0
56745: PPUSH
56746: PPUSH
56747: PPUSH
56748: PPUSH
56749: PPUSH
56750: PPUSH
56751: PPUSH
56752: PPUSH
56753: PPUSH
56754: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56755: LD_VAR 0 1
56759: PPUSH
56760: CALL_OW 302
56764: NOT
56765: IFTRUE 56784
56767: PUSH
56768: LD_VAR 0 2
56772: PPUSH
56773: LD_VAR 0 3
56777: PPUSH
56778: CALL_OW 488
56782: NOT
56783: OR
56784: IFTRUE 56793
56786: PUSH
56787: LD_VAR 0 4
56791: NOT
56792: OR
56793: IFFALSE 56797
// exit ;
56795: GO 57336
// if Count ( GetTaskList ( flame ) ) > 10 then
56797: LD_VAR 0 1
56801: PPUSH
56802: CALL_OW 437
56806: PPUSH
56807: CALL 13562 0 1
56811: PUSH
56812: LD_INT 10
56814: GREATER
56815: IFFALSE 56819
// exit ;
56817: GO 57336
// list := [ ] ;
56819: LD_ADDR_VAR 0 13
56823: PUSH
56824: EMPTY
56825: ST_TO_ADDR
// if x - r < 0 then
56826: LD_VAR 0 2
56830: PUSH
56831: LD_VAR 0 4
56835: MINUS
56836: PUSH
56837: LD_INT 0
56839: LESS
56840: IFFALSE 56852
// min_x := 0 else
56842: LD_ADDR_VAR 0 7
56846: PUSH
56847: LD_INT 0
56849: ST_TO_ADDR
56850: GO 56868
// min_x := x - r ;
56852: LD_ADDR_VAR 0 7
56856: PUSH
56857: LD_VAR 0 2
56861: PUSH
56862: LD_VAR 0 4
56866: MINUS
56867: ST_TO_ADDR
// if y - r < 0 then
56868: LD_VAR 0 3
56872: PUSH
56873: LD_VAR 0 4
56877: MINUS
56878: PUSH
56879: LD_INT 0
56881: LESS
56882: IFFALSE 56894
// min_y := 0 else
56884: LD_ADDR_VAR 0 8
56888: PUSH
56889: LD_INT 0
56891: ST_TO_ADDR
56892: GO 56910
// min_y := y - r ;
56894: LD_ADDR_VAR 0 8
56898: PUSH
56899: LD_VAR 0 3
56903: PUSH
56904: LD_VAR 0 4
56908: MINUS
56909: ST_TO_ADDR
// max_x := x + r ;
56910: LD_ADDR_VAR 0 9
56914: PUSH
56915: LD_VAR 0 2
56919: PUSH
56920: LD_VAR 0 4
56924: PLUS
56925: ST_TO_ADDR
// max_y := y + r ;
56926: LD_ADDR_VAR 0 10
56930: PUSH
56931: LD_VAR 0 3
56935: PUSH
56936: LD_VAR 0 4
56940: PLUS
56941: ST_TO_ADDR
// for _x = min_x to max_x do
56942: LD_ADDR_VAR 0 11
56946: PUSH
56947: DOUBLE
56948: LD_VAR 0 7
56952: DEC
56953: ST_TO_ADDR
56954: LD_VAR 0 9
56958: PUSH
56959: FOR_TO
56960: IFFALSE 57079
// for _y = min_y to max_y do
56962: LD_ADDR_VAR 0 12
56966: PUSH
56967: DOUBLE
56968: LD_VAR 0 8
56972: DEC
56973: ST_TO_ADDR
56974: LD_VAR 0 10
56978: PUSH
56979: FOR_TO
56980: IFFALSE 57075
// begin if not ValidHex ( _x , _y ) then
56982: LD_VAR 0 11
56986: PPUSH
56987: LD_VAR 0 12
56991: PPUSH
56992: CALL_OW 488
56996: NOT
56997: IFFALSE 57001
// continue ;
56999: GO 56979
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57001: LD_VAR 0 11
57005: PPUSH
57006: LD_VAR 0 12
57010: PPUSH
57011: CALL_OW 351
57015: IFFALSE 57033
57017: PUSH
57018: LD_VAR 0 11
57022: PPUSH
57023: LD_VAR 0 12
57027: PPUSH
57028: CALL_OW 554
57032: AND
57033: IFFALSE 57073
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57035: LD_ADDR_VAR 0 13
57039: PUSH
57040: LD_VAR 0 13
57044: PPUSH
57045: LD_VAR 0 13
57049: PUSH
57050: LD_INT 1
57052: PLUS
57053: PPUSH
57054: LD_VAR 0 11
57058: PUSH
57059: LD_VAR 0 12
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PPUSH
57068: CALL_OW 2
57072: ST_TO_ADDR
// end ;
57073: GO 56979
57075: POP
57076: POP
57077: GO 56959
57079: POP
57080: POP
// if not list then
57081: LD_VAR 0 13
57085: NOT
57086: IFFALSE 57090
// exit ;
57088: GO 57336
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57090: LD_ADDR_VAR 0 13
57094: PUSH
57095: LD_VAR 0 1
57099: PPUSH
57100: LD_VAR 0 13
57104: PPUSH
57105: LD_INT 1
57107: PPUSH
57108: LD_INT 1
57110: PPUSH
57111: CALL 16968 0 4
57115: ST_TO_ADDR
// ComStop ( flame ) ;
57116: LD_VAR 0 1
57120: PPUSH
57121: CALL_OW 141
// for i in list do
57125: LD_ADDR_VAR 0 6
57129: PUSH
57130: LD_VAR 0 13
57134: PUSH
57135: FOR_IN
57136: IFFALSE 57167
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57138: LD_VAR 0 1
57142: PPUSH
57143: LD_VAR 0 6
57147: PUSH
57148: LD_INT 1
57150: ARRAY
57151: PPUSH
57152: LD_VAR 0 6
57156: PUSH
57157: LD_INT 2
57159: ARRAY
57160: PPUSH
57161: CALL_OW 176
57165: GO 57135
57167: POP
57168: POP
// repeat wait ( 0 0$1 ) ;
57169: LD_INT 35
57171: PPUSH
57172: CALL_OW 67
// task := GetTaskList ( flame ) ;
57176: LD_ADDR_VAR 0 14
57180: PUSH
57181: LD_VAR 0 1
57185: PPUSH
57186: CALL_OW 437
57190: ST_TO_ADDR
// if not task then
57191: LD_VAR 0 14
57195: NOT
57196: IFFALSE 57200
// exit ;
57198: GO 57336
// if task [ 1 ] [ 1 ] <> | then
57200: LD_VAR 0 14
57204: PUSH
57205: LD_INT 1
57207: ARRAY
57208: PUSH
57209: LD_INT 1
57211: ARRAY
57212: PUSH
57213: LD_STRING |
57215: NONEQUAL
57216: IFFALSE 57220
// exit ;
57218: GO 57336
// _x := task [ 1 ] [ 2 ] ;
57220: LD_ADDR_VAR 0 11
57224: PUSH
57225: LD_VAR 0 14
57229: PUSH
57230: LD_INT 1
57232: ARRAY
57233: PUSH
57234: LD_INT 2
57236: ARRAY
57237: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57238: LD_ADDR_VAR 0 12
57242: PUSH
57243: LD_VAR 0 14
57247: PUSH
57248: LD_INT 1
57250: ARRAY
57251: PUSH
57252: LD_INT 3
57254: ARRAY
57255: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57256: LD_VAR 0 11
57260: PPUSH
57261: LD_VAR 0 12
57265: PPUSH
57266: CALL_OW 351
57270: NOT
57271: IFTRUE 57290
57273: PUSH
57274: LD_VAR 0 11
57278: PPUSH
57279: LD_VAR 0 12
57283: PPUSH
57284: CALL_OW 554
57288: NOT
57289: OR
57290: IFFALSE 57324
// begin task := Delete ( task , 1 ) ;
57292: LD_ADDR_VAR 0 14
57296: PUSH
57297: LD_VAR 0 14
57301: PPUSH
57302: LD_INT 1
57304: PPUSH
57305: CALL_OW 3
57309: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57310: LD_VAR 0 1
57314: PPUSH
57315: LD_VAR 0 14
57319: PPUSH
57320: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57324: LD_VAR 0 1
57328: PPUSH
57329: CALL_OW 314
57333: NOT
57334: IFFALSE 57169
// end ;
57336: LD_VAR 0 5
57340: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57341: LD_EXP 50
57345: NOT
57346: IFFALSE 57396
57348: GO 57350
57350: DISABLE
// begin initHack := true ;
57351: LD_ADDR_EXP 50
57355: PUSH
57356: LD_INT 1
57358: ST_TO_ADDR
// hackTanks := [ ] ;
57359: LD_ADDR_EXP 51
57363: PUSH
57364: EMPTY
57365: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57366: LD_ADDR_EXP 52
57370: PUSH
57371: EMPTY
57372: ST_TO_ADDR
// hackLimit := 3 ;
57373: LD_ADDR_EXP 53
57377: PUSH
57378: LD_INT 3
57380: ST_TO_ADDR
// hackDist := 12 ;
57381: LD_ADDR_EXP 54
57385: PUSH
57386: LD_INT 12
57388: ST_TO_ADDR
// hackCounter := [ ] ;
57389: LD_ADDR_EXP 55
57393: PUSH
57394: EMPTY
57395: ST_TO_ADDR
// end ;
57396: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57397: LD_EXP 50
57401: IFFALSE 57419
57403: PUSH
57404: LD_INT 34
57406: PUSH
57407: LD_INT 99
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PPUSH
57414: CALL_OW 69
57418: AND
57419: IFFALSE 57672
57421: GO 57423
57423: DISABLE
57424: LD_INT 0
57426: PPUSH
57427: PPUSH
// begin enable ;
57428: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57429: LD_ADDR_VAR 0 1
57433: PUSH
57434: LD_INT 34
57436: PUSH
57437: LD_INT 99
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PPUSH
57444: CALL_OW 69
57448: PUSH
57449: FOR_IN
57450: IFFALSE 57670
// begin if not i in hackTanks then
57452: LD_VAR 0 1
57456: PUSH
57457: LD_EXP 51
57461: IN
57462: NOT
57463: IFFALSE 57546
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57465: LD_ADDR_EXP 51
57469: PUSH
57470: LD_EXP 51
57474: PPUSH
57475: LD_EXP 51
57479: PUSH
57480: LD_INT 1
57482: PLUS
57483: PPUSH
57484: LD_VAR 0 1
57488: PPUSH
57489: CALL_OW 1
57493: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57494: LD_ADDR_EXP 52
57498: PUSH
57499: LD_EXP 52
57503: PPUSH
57504: LD_EXP 52
57508: PUSH
57509: LD_INT 1
57511: PLUS
57512: PPUSH
57513: EMPTY
57514: PPUSH
57515: CALL_OW 1
57519: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57520: LD_ADDR_EXP 55
57524: PUSH
57525: LD_EXP 55
57529: PPUSH
57530: LD_EXP 55
57534: PUSH
57535: LD_INT 1
57537: PLUS
57538: PPUSH
57539: EMPTY
57540: PPUSH
57541: CALL_OW 1
57545: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57546: LD_VAR 0 1
57550: PPUSH
57551: CALL_OW 302
57555: NOT
57556: IFFALSE 57569
// begin HackUnlinkAll ( i ) ;
57558: LD_VAR 0 1
57562: PPUSH
57563: CALL 57675 0 1
// continue ;
57567: GO 57449
// end ; HackCheckCapturedStatus ( i ) ;
57569: LD_VAR 0 1
57573: PPUSH
57574: CALL 58120 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57578: LD_ADDR_VAR 0 2
57582: PUSH
57583: LD_INT 81
57585: PUSH
57586: LD_VAR 0 1
57590: PPUSH
57591: CALL_OW 255
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 33
57602: PUSH
57603: LD_INT 3
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 91
57612: PUSH
57613: LD_VAR 0 1
57617: PUSH
57618: LD_EXP 54
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 50
57630: PUSH
57631: EMPTY
57632: LIST
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: PPUSH
57640: CALL_OW 69
57644: ST_TO_ADDR
// if not tmp then
57645: LD_VAR 0 2
57649: NOT
57650: IFFALSE 57654
// continue ;
57652: GO 57449
// HackLink ( i , tmp ) ;
57654: LD_VAR 0 1
57658: PPUSH
57659: LD_VAR 0 2
57663: PPUSH
57664: CALL 57811 0 2
// end ;
57668: GO 57449
57670: POP
57671: POP
// end ;
57672: PPOPN 2
57674: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57675: LD_INT 0
57677: PPUSH
57678: PPUSH
57679: PPUSH
// if not hack in hackTanks then
57680: LD_VAR 0 1
57684: PUSH
57685: LD_EXP 51
57689: IN
57690: NOT
57691: IFFALSE 57695
// exit ;
57693: GO 57806
// index := GetElementIndex ( hackTanks , hack ) ;
57695: LD_ADDR_VAR 0 4
57699: PUSH
57700: LD_EXP 51
57704: PPUSH
57705: LD_VAR 0 1
57709: PPUSH
57710: CALL 16263 0 2
57714: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57715: LD_EXP 52
57719: PUSH
57720: LD_VAR 0 4
57724: ARRAY
57725: IFFALSE 57806
// begin for i in hackTanksCaptured [ index ] do
57727: LD_ADDR_VAR 0 3
57731: PUSH
57732: LD_EXP 52
57736: PUSH
57737: LD_VAR 0 4
57741: ARRAY
57742: PUSH
57743: FOR_IN
57744: IFFALSE 57770
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57746: LD_VAR 0 3
57750: PUSH
57751: LD_INT 1
57753: ARRAY
57754: PPUSH
57755: LD_VAR 0 3
57759: PUSH
57760: LD_INT 2
57762: ARRAY
57763: PPUSH
57764: CALL_OW 235
57768: GO 57743
57770: POP
57771: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57772: LD_ADDR_EXP 52
57776: PUSH
57777: LD_EXP 52
57781: PPUSH
57782: LD_VAR 0 4
57786: PPUSH
57787: EMPTY
57788: PPUSH
57789: CALL_OW 1
57793: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57794: LD_VAR 0 1
57798: PPUSH
57799: LD_INT 0
57801: PPUSH
57802: CALL_OW 505
// end ; end ;
57806: LD_VAR 0 2
57810: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57811: LD_INT 0
57813: PPUSH
57814: PPUSH
57815: PPUSH
// if not hack in hackTanks or not vehicles then
57816: LD_VAR 0 1
57820: PUSH
57821: LD_EXP 51
57825: IN
57826: NOT
57827: IFTRUE 57836
57829: PUSH
57830: LD_VAR 0 2
57834: NOT
57835: OR
57836: IFFALSE 57840
// exit ;
57838: GO 58115
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57840: LD_ADDR_VAR 0 2
57844: PUSH
57845: LD_VAR 0 1
57849: PPUSH
57850: LD_VAR 0 2
57854: PPUSH
57855: LD_INT 1
57857: PPUSH
57858: LD_INT 1
57860: PPUSH
57861: CALL 16915 0 4
57865: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57866: LD_ADDR_VAR 0 5
57870: PUSH
57871: LD_EXP 51
57875: PPUSH
57876: LD_VAR 0 1
57880: PPUSH
57881: CALL 16263 0 2
57885: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57886: LD_EXP 52
57890: PUSH
57891: LD_VAR 0 5
57895: ARRAY
57896: PUSH
57897: LD_EXP 53
57901: LESS
57902: IFFALSE 58091
// begin for i := 1 to vehicles do
57904: LD_ADDR_VAR 0 4
57908: PUSH
57909: DOUBLE
57910: LD_INT 1
57912: DEC
57913: ST_TO_ADDR
57914: LD_VAR 0 2
57918: PUSH
57919: FOR_TO
57920: IFFALSE 58089
// begin if hackTanksCaptured [ index ] = hackLimit then
57922: LD_EXP 52
57926: PUSH
57927: LD_VAR 0 5
57931: ARRAY
57932: PUSH
57933: LD_EXP 53
57937: EQUAL
57938: IFFALSE 57942
// break ;
57940: GO 58089
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57942: LD_ADDR_EXP 55
57946: PUSH
57947: LD_EXP 55
57951: PPUSH
57952: LD_VAR 0 5
57956: PPUSH
57957: LD_EXP 55
57961: PUSH
57962: LD_VAR 0 5
57966: ARRAY
57967: PUSH
57968: LD_INT 1
57970: PLUS
57971: PPUSH
57972: CALL_OW 1
57976: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57977: LD_ADDR_EXP 52
57981: PUSH
57982: LD_EXP 52
57986: PPUSH
57987: LD_VAR 0 5
57991: PUSH
57992: LD_EXP 52
57996: PUSH
57997: LD_VAR 0 5
58001: ARRAY
58002: PUSH
58003: LD_INT 1
58005: PLUS
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PPUSH
58011: LD_VAR 0 2
58015: PUSH
58016: LD_VAR 0 4
58020: ARRAY
58021: PUSH
58022: LD_VAR 0 2
58026: PUSH
58027: LD_VAR 0 4
58031: ARRAY
58032: PPUSH
58033: CALL_OW 255
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PPUSH
58042: CALL 16480 0 3
58046: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58047: LD_VAR 0 2
58051: PUSH
58052: LD_VAR 0 4
58056: ARRAY
58057: PPUSH
58058: LD_VAR 0 1
58062: PPUSH
58063: CALL_OW 255
58067: PPUSH
58068: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58072: LD_VAR 0 2
58076: PUSH
58077: LD_VAR 0 4
58081: ARRAY
58082: PPUSH
58083: CALL_OW 141
// end ;
58087: GO 57919
58089: POP
58090: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58091: LD_VAR 0 1
58095: PPUSH
58096: LD_EXP 52
58100: PUSH
58101: LD_VAR 0 5
58105: ARRAY
58106: PUSH
58107: LD_INT 0
58109: PLUS
58110: PPUSH
58111: CALL_OW 505
// end ;
58115: LD_VAR 0 3
58119: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58120: LD_INT 0
58122: PPUSH
58123: PPUSH
58124: PPUSH
58125: PPUSH
// if not hack in hackTanks then
58126: LD_VAR 0 1
58130: PUSH
58131: LD_EXP 51
58135: IN
58136: NOT
58137: IFFALSE 58141
// exit ;
58139: GO 58385
// index := GetElementIndex ( hackTanks , hack ) ;
58141: LD_ADDR_VAR 0 4
58145: PUSH
58146: LD_EXP 51
58150: PPUSH
58151: LD_VAR 0 1
58155: PPUSH
58156: CALL 16263 0 2
58160: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58161: LD_ADDR_VAR 0 3
58165: PUSH
58166: DOUBLE
58167: LD_EXP 52
58171: PUSH
58172: LD_VAR 0 4
58176: ARRAY
58177: INC
58178: ST_TO_ADDR
58179: LD_INT 1
58181: PUSH
58182: FOR_DOWNTO
58183: IFFALSE 58359
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58185: LD_ADDR_VAR 0 5
58189: PUSH
58190: LD_EXP 52
58194: PUSH
58195: LD_VAR 0 4
58199: ARRAY
58200: PUSH
58201: LD_VAR 0 3
58205: ARRAY
58206: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58207: LD_VAR 0 5
58211: PUSH
58212: LD_INT 1
58214: ARRAY
58215: PPUSH
58216: CALL_OW 302
58220: NOT
58221: IFTRUE 58249
58223: PUSH
58224: LD_VAR 0 5
58228: PUSH
58229: LD_INT 1
58231: ARRAY
58232: PPUSH
58233: CALL_OW 255
58237: PUSH
58238: LD_VAR 0 1
58242: PPUSH
58243: CALL_OW 255
58247: NONEQUAL
58248: OR
58249: IFFALSE 58357
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58251: LD_VAR 0 5
58255: PUSH
58256: LD_INT 1
58258: ARRAY
58259: PPUSH
58260: CALL_OW 305
58264: IFFALSE 58292
58266: PUSH
58267: LD_VAR 0 5
58271: PUSH
58272: LD_INT 1
58274: ARRAY
58275: PPUSH
58276: CALL_OW 255
58280: PUSH
58281: LD_VAR 0 1
58285: PPUSH
58286: CALL_OW 255
58290: EQUAL
58291: AND
58292: IFFALSE 58316
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58294: LD_VAR 0 5
58298: PUSH
58299: LD_INT 1
58301: ARRAY
58302: PPUSH
58303: LD_VAR 0 5
58307: PUSH
58308: LD_INT 2
58310: ARRAY
58311: PPUSH
58312: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58316: LD_ADDR_EXP 52
58320: PUSH
58321: LD_EXP 52
58325: PPUSH
58326: LD_VAR 0 4
58330: PPUSH
58331: LD_EXP 52
58335: PUSH
58336: LD_VAR 0 4
58340: ARRAY
58341: PPUSH
58342: LD_VAR 0 3
58346: PPUSH
58347: CALL_OW 3
58351: PPUSH
58352: CALL_OW 1
58356: ST_TO_ADDR
// end ; end ;
58357: GO 58182
58359: POP
58360: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58361: LD_VAR 0 1
58365: PPUSH
58366: LD_EXP 52
58370: PUSH
58371: LD_VAR 0 4
58375: ARRAY
58376: PUSH
58377: LD_INT 0
58379: PLUS
58380: PPUSH
58381: CALL_OW 505
// end ;
58385: LD_VAR 0 2
58389: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58390: LD_INT 0
58392: PPUSH
58393: PPUSH
58394: PPUSH
58395: PPUSH
// if not hack in hackTanks then
58396: LD_VAR 0 1
58400: PUSH
58401: LD_EXP 51
58405: IN
58406: NOT
58407: IFFALSE 58411
// exit ;
58409: GO 58496
// index := GetElementIndex ( hackTanks , hack ) ;
58411: LD_ADDR_VAR 0 5
58415: PUSH
58416: LD_EXP 51
58420: PPUSH
58421: LD_VAR 0 1
58425: PPUSH
58426: CALL 16263 0 2
58430: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58431: LD_ADDR_VAR 0 4
58435: PUSH
58436: DOUBLE
58437: LD_INT 1
58439: DEC
58440: ST_TO_ADDR
58441: LD_EXP 52
58445: PUSH
58446: LD_VAR 0 5
58450: ARRAY
58451: PUSH
58452: FOR_TO
58453: IFFALSE 58494
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58455: LD_EXP 52
58459: PUSH
58460: LD_VAR 0 5
58464: ARRAY
58465: PUSH
58466: LD_VAR 0 4
58470: ARRAY
58471: PUSH
58472: LD_INT 1
58474: ARRAY
58475: PUSH
58476: LD_VAR 0 2
58480: EQUAL
58481: IFFALSE 58492
// KillUnit ( vehicle ) ;
58483: LD_VAR 0 2
58487: PPUSH
58488: CALL_OW 66
58492: GO 58452
58494: POP
58495: POP
// end ;
58496: LD_VAR 0 3
58500: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
58501: LD_EXP 56
58505: NOT
58506: IFFALSE 58639
58508: GO 58510
58510: DISABLE
58511: LD_INT 0
58513: PPUSH
// begin initMiner := true ;
58514: LD_ADDR_EXP 56
58518: PUSH
58519: LD_INT 1
58521: ST_TO_ADDR
// minersList := [ ] ;
58522: LD_ADDR_EXP 57
58526: PUSH
58527: EMPTY
58528: ST_TO_ADDR
// minerMinesList := [ ] ;
58529: LD_ADDR_EXP 58
58533: PUSH
58534: EMPTY
58535: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
58536: LD_ADDR_EXP 59
58540: PUSH
58541: LD_INT 10
58543: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58544: LD_ADDR_VAR 0 1
58548: PUSH
58549: LD_INT 34
58551: PUSH
58552: LD_INT 81
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PPUSH
58559: CALL_OW 69
58563: PUSH
58564: FOR_IN
58565: IFFALSE 58637
// begin if not i in minersList then
58567: LD_VAR 0 1
58571: PUSH
58572: LD_EXP 57
58576: IN
58577: NOT
58578: IFFALSE 58635
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58580: LD_ADDR_EXP 57
58584: PUSH
58585: LD_EXP 57
58589: PPUSH
58590: LD_EXP 57
58594: PUSH
58595: LD_INT 1
58597: PLUS
58598: PPUSH
58599: LD_VAR 0 1
58603: PPUSH
58604: CALL_OW 1
58608: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58609: LD_ADDR_EXP 58
58613: PUSH
58614: LD_EXP 58
58618: PPUSH
58619: LD_EXP 58
58623: PUSH
58624: LD_INT 1
58626: PLUS
58627: PPUSH
58628: EMPTY
58629: PPUSH
58630: CALL_OW 1
58634: ST_TO_ADDR
// end end ;
58635: GO 58564
58637: POP
58638: POP
// end ;
58639: PPOPN 1
58641: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
58642: LD_EXP 56
58646: IFFALSE 58677
58648: PUSH
58649: LD_EXP 58
58653: PPUSH
58654: CALL 13562 0 1
58658: IFTRUE 58676
58660: PUSH
58661: LD_INT 34
58663: PUSH
58664: LD_INT 81
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PPUSH
58671: CALL_OW 69
58675: OR
58676: AND
58677: IFFALSE 59197
58679: GO 58681
58681: DISABLE
58682: LD_INT 0
58684: PPUSH
58685: PPUSH
58686: PPUSH
58687: PPUSH
// begin enable ;
58688: ENABLE
// for i := minerMinesList downto 1 do
58689: LD_ADDR_VAR 0 1
58693: PUSH
58694: DOUBLE
58695: LD_EXP 58
58699: INC
58700: ST_TO_ADDR
58701: LD_INT 1
58703: PUSH
58704: FOR_DOWNTO
58705: IFFALSE 59195
// begin side := GetSide ( minersList [ i ] ) ;
58707: LD_ADDR_VAR 0 3
58711: PUSH
58712: LD_EXP 57
58716: PUSH
58717: LD_VAR 0 1
58721: ARRAY
58722: PPUSH
58723: CALL_OW 255
58727: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
58728: LD_EXP 57
58732: PUSH
58733: LD_VAR 0 1
58737: ARRAY
58738: PPUSH
58739: CALL_OW 300
58743: IFFALSE 58764
58745: PUSH
58746: LD_VAR 0 3
58750: PUSH
58751: LD_OWVAR 2
58755: PUSH
58756: LD_INT 9
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: IN
58763: AND
58764: IFFALSE 58797
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58766: LD_EXP 57
58770: PUSH
58771: LD_VAR 0 1
58775: ARRAY
58776: PPUSH
58777: LD_EXP 58
58781: PUSH
58782: LD_VAR 0 1
58786: ARRAY
58787: PPUSH
58788: CALL 13562 0 1
58792: PPUSH
58793: CALL_OW 505
// if not minerMinesList [ i ] then
58797: LD_EXP 58
58801: PUSH
58802: LD_VAR 0 1
58806: ARRAY
58807: NOT
58808: IFFALSE 58812
// continue ;
58810: GO 58704
// for j := minerMinesList [ i ] downto 1 do
58812: LD_ADDR_VAR 0 2
58816: PUSH
58817: DOUBLE
58818: LD_EXP 58
58822: PUSH
58823: LD_VAR 0 1
58827: ARRAY
58828: INC
58829: ST_TO_ADDR
58830: LD_INT 1
58832: PUSH
58833: FOR_DOWNTO
58834: IFFALSE 59191
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58836: LD_EXP 57
58840: PUSH
58841: LD_VAR 0 1
58845: ARRAY
58846: PPUSH
58847: CALL_OW 301
58851: IFTRUE 58871
58853: PUSH
58854: LD_EXP 57
58858: PUSH
58859: LD_VAR 0 1
58863: ARRAY
58864: PPUSH
58865: CALL_OW 305
58869: NOT
58870: OR
58871: IFFALSE 58962
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58873: LD_EXP 58
58877: PUSH
58878: LD_VAR 0 1
58882: ARRAY
58883: PUSH
58884: LD_VAR 0 2
58888: ARRAY
58889: PUSH
58890: LD_INT 1
58892: ARRAY
58893: PPUSH
58894: LD_EXP 58
58898: PUSH
58899: LD_VAR 0 1
58903: ARRAY
58904: PUSH
58905: LD_VAR 0 2
58909: ARRAY
58910: PUSH
58911: LD_INT 2
58913: ARRAY
58914: PPUSH
58915: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58919: LD_ADDR_EXP 58
58923: PUSH
58924: LD_EXP 58
58928: PPUSH
58929: LD_VAR 0 1
58933: PPUSH
58934: LD_EXP 58
58938: PUSH
58939: LD_VAR 0 1
58943: ARRAY
58944: PPUSH
58945: LD_VAR 0 2
58949: PPUSH
58950: CALL_OW 3
58954: PPUSH
58955: CALL_OW 1
58959: ST_TO_ADDR
// continue ;
58960: GO 58833
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58962: LD_ADDR_VAR 0 4
58966: PUSH
58967: LD_EXP 58
58971: PUSH
58972: LD_VAR 0 1
58976: ARRAY
58977: PUSH
58978: LD_VAR 0 2
58982: ARRAY
58983: PUSH
58984: LD_INT 1
58986: ARRAY
58987: PPUSH
58988: LD_EXP 58
58992: PUSH
58993: LD_VAR 0 1
58997: ARRAY
58998: PUSH
58999: LD_VAR 0 2
59003: ARRAY
59004: PUSH
59005: LD_INT 2
59007: ARRAY
59008: PPUSH
59009: CALL_OW 428
59013: ST_TO_ADDR
// if not tmp then
59014: LD_VAR 0 4
59018: NOT
59019: IFFALSE 59023
// continue ;
59021: GO 58833
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59023: LD_VAR 0 4
59027: PUSH
59028: LD_INT 81
59030: PUSH
59031: LD_VAR 0 3
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PPUSH
59040: CALL_OW 69
59044: IN
59045: IFFALSE 59095
59047: PUSH
59048: LD_EXP 58
59052: PUSH
59053: LD_VAR 0 1
59057: ARRAY
59058: PUSH
59059: LD_VAR 0 2
59063: ARRAY
59064: PUSH
59065: LD_INT 1
59067: ARRAY
59068: PPUSH
59069: LD_EXP 58
59073: PUSH
59074: LD_VAR 0 1
59078: ARRAY
59079: PUSH
59080: LD_VAR 0 2
59084: ARRAY
59085: PUSH
59086: LD_INT 2
59088: ARRAY
59089: PPUSH
59090: CALL_OW 458
59094: AND
59095: IFFALSE 59189
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59097: LD_EXP 58
59101: PUSH
59102: LD_VAR 0 1
59106: ARRAY
59107: PUSH
59108: LD_VAR 0 2
59112: ARRAY
59113: PUSH
59114: LD_INT 1
59116: ARRAY
59117: PPUSH
59118: LD_EXP 58
59122: PUSH
59123: LD_VAR 0 1
59127: ARRAY
59128: PUSH
59129: LD_VAR 0 2
59133: ARRAY
59134: PUSH
59135: LD_INT 2
59137: ARRAY
59138: PPUSH
59139: LD_VAR 0 3
59143: PPUSH
59144: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59148: LD_ADDR_EXP 58
59152: PUSH
59153: LD_EXP 58
59157: PPUSH
59158: LD_VAR 0 1
59162: PPUSH
59163: LD_EXP 58
59167: PUSH
59168: LD_VAR 0 1
59172: ARRAY
59173: PPUSH
59174: LD_VAR 0 2
59178: PPUSH
59179: CALL_OW 3
59183: PPUSH
59184: CALL_OW 1
59188: ST_TO_ADDR
// end ; end ;
59189: GO 58833
59191: POP
59192: POP
// end ;
59193: GO 58704
59195: POP
59196: POP
// end ;
59197: PPOPN 4
59199: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
59200: LD_INT 0
59202: PPUSH
59203: PPUSH
59204: PPUSH
59205: PPUSH
// result := false ;
59206: LD_ADDR_VAR 0 4
59210: PUSH
59211: LD_INT 0
59213: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59214: LD_VAR 0 1
59218: PPUSH
59219: CALL_OW 264
59223: PUSH
59224: LD_INT 81
59226: EQUAL
59227: NOT
59228: IFFALSE 59232
// exit ;
59230: GO 59602
// side := GetSide ( unit ) ;
59232: LD_ADDR_VAR 0 6
59236: PUSH
59237: LD_VAR 0 1
59241: PPUSH
59242: CALL_OW 255
59246: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
59247: LD_ADDR_VAR 0 5
59251: PUSH
59252: LD_EXP 57
59256: PPUSH
59257: LD_VAR 0 1
59261: PPUSH
59262: CALL 16263 0 2
59266: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59267: LD_EXP 58
59271: PUSH
59272: LD_VAR 0 5
59276: ARRAY
59277: PUSH
59278: LD_EXP 59
59282: GREATEREQUAL
59283: IFFALSE 59287
// exit ;
59285: GO 59602
// ComMoveXY ( unit , x , y ) ;
59287: LD_VAR 0 1
59291: PPUSH
59292: LD_VAR 0 2
59296: PPUSH
59297: LD_VAR 0 3
59301: PPUSH
59302: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59306: LD_INT 35
59308: PPUSH
59309: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59313: LD_VAR 0 1
59317: PPUSH
59318: LD_VAR 0 2
59322: PPUSH
59323: LD_VAR 0 3
59327: PPUSH
59328: CALL 48319 0 3
59332: NOT
59333: IFFALSE 59346
59335: PUSH
59336: LD_VAR 0 1
59340: PPUSH
59341: CALL_OW 314
59345: AND
59346: IFFALSE 59350
// exit ;
59348: GO 59602
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59350: LD_VAR 0 2
59354: PPUSH
59355: LD_VAR 0 3
59359: PPUSH
59360: CALL_OW 428
59364: PUSH
59365: LD_VAR 0 1
59369: EQUAL
59370: IFFALSE 59384
59372: PUSH
59373: LD_VAR 0 1
59377: PPUSH
59378: CALL_OW 314
59382: NOT
59383: AND
59384: IFFALSE 59306
// if MineAtPos ( x , y ) then
59386: LD_VAR 0 2
59390: PPUSH
59391: LD_VAR 0 3
59395: PPUSH
59396: CALL_OW 458
59400: IFFALSE 59404
// exit ;
59402: GO 59602
// if your_side = side then
59404: LD_OWVAR 2
59408: PUSH
59409: LD_VAR 0 6
59413: EQUAL
59414: IFFALSE 59433
// PlaySoundXY ( x , y , PlantMine ) ;
59416: LD_VAR 0 2
59420: PPUSH
59421: LD_VAR 0 3
59425: PPUSH
59426: LD_STRING PlantMine
59428: PPUSH
59429: CALL_OW 366
// repeat wait ( 1 ) ;
59433: LD_INT 1
59435: PPUSH
59436: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
59440: LD_VAR 0 2
59444: PPUSH
59445: LD_VAR 0 3
59449: PPUSH
59450: LD_VAR 0 6
59454: PPUSH
59455: LD_INT 0
59457: PPUSH
59458: CALL_OW 454
59462: IFFALSE 59433
// if MineAtPos ( x , y ) then
59464: LD_VAR 0 2
59468: PPUSH
59469: LD_VAR 0 3
59473: PPUSH
59474: CALL_OW 458
59478: IFFALSE 59594
// begin for i in minerMinesList [ index ] do
59480: LD_ADDR_VAR 0 7
59484: PUSH
59485: LD_EXP 58
59489: PUSH
59490: LD_VAR 0 5
59494: ARRAY
59495: PUSH
59496: FOR_IN
59497: IFFALSE 59539
// if i [ 1 ] = x and i [ 2 ] = y then
59499: LD_VAR 0 7
59503: PUSH
59504: LD_INT 1
59506: ARRAY
59507: PUSH
59508: LD_VAR 0 2
59512: EQUAL
59513: IFFALSE 59531
59515: PUSH
59516: LD_VAR 0 7
59520: PUSH
59521: LD_INT 2
59523: ARRAY
59524: PUSH
59525: LD_VAR 0 3
59529: EQUAL
59530: AND
59531: IFFALSE 59537
// exit ;
59533: POP
59534: POP
59535: GO 59602
59537: GO 59496
59539: POP
59540: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59541: LD_ADDR_EXP 58
59545: PUSH
59546: LD_EXP 58
59550: PPUSH
59551: LD_VAR 0 5
59555: PUSH
59556: LD_EXP 58
59560: PUSH
59561: LD_VAR 0 5
59565: ARRAY
59566: PUSH
59567: LD_INT 1
59569: PLUS
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PPUSH
59575: LD_VAR 0 2
59579: PUSH
59580: LD_VAR 0 3
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PPUSH
59589: CALL 16480 0 3
59593: ST_TO_ADDR
// end ; result := true ;
59594: LD_ADDR_VAR 0 4
59598: PUSH
59599: LD_INT 1
59601: ST_TO_ADDR
// end ;
59602: LD_VAR 0 4
59606: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59607: LD_INT 0
59609: PPUSH
59610: PPUSH
59611: PPUSH
// if not unit in minersList then
59612: LD_VAR 0 1
59616: PUSH
59617: LD_EXP 57
59621: IN
59622: NOT
59623: IFFALSE 59627
// exit ;
59625: GO 59834
// index := GetElementIndex ( minersList , unit ) ;
59627: LD_ADDR_VAR 0 6
59631: PUSH
59632: LD_EXP 57
59636: PPUSH
59637: LD_VAR 0 1
59641: PPUSH
59642: CALL 16263 0 2
59646: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59647: LD_ADDR_VAR 0 5
59651: PUSH
59652: DOUBLE
59653: LD_EXP 58
59657: PUSH
59658: LD_VAR 0 6
59662: ARRAY
59663: INC
59664: ST_TO_ADDR
59665: LD_INT 1
59667: PUSH
59668: FOR_DOWNTO
59669: IFFALSE 59832
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59671: LD_EXP 58
59675: PUSH
59676: LD_VAR 0 6
59680: ARRAY
59681: PUSH
59682: LD_VAR 0 5
59686: ARRAY
59687: PUSH
59688: LD_INT 1
59690: ARRAY
59691: PPUSH
59692: LD_EXP 58
59696: PUSH
59697: LD_VAR 0 6
59701: ARRAY
59702: PUSH
59703: LD_VAR 0 5
59707: ARRAY
59708: PUSH
59709: LD_INT 2
59711: ARRAY
59712: PPUSH
59713: LD_VAR 0 2
59717: PPUSH
59718: LD_VAR 0 3
59722: PPUSH
59723: CALL_OW 298
59727: PUSH
59728: LD_INT 6
59730: LESS
59731: IFFALSE 59830
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59733: LD_EXP 58
59737: PUSH
59738: LD_VAR 0 6
59742: ARRAY
59743: PUSH
59744: LD_VAR 0 5
59748: ARRAY
59749: PUSH
59750: LD_INT 1
59752: ARRAY
59753: PPUSH
59754: LD_EXP 58
59758: PUSH
59759: LD_VAR 0 6
59763: ARRAY
59764: PUSH
59765: LD_VAR 0 5
59769: ARRAY
59770: PUSH
59771: LD_INT 2
59773: ARRAY
59774: PPUSH
59775: LD_VAR 0 1
59779: PPUSH
59780: CALL_OW 255
59784: PPUSH
59785: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59789: LD_ADDR_EXP 58
59793: PUSH
59794: LD_EXP 58
59798: PPUSH
59799: LD_VAR 0 6
59803: PPUSH
59804: LD_EXP 58
59808: PUSH
59809: LD_VAR 0 6
59813: ARRAY
59814: PPUSH
59815: LD_VAR 0 5
59819: PPUSH
59820: CALL_OW 3
59824: PPUSH
59825: CALL_OW 1
59829: ST_TO_ADDR
// end ; end ;
59830: GO 59668
59832: POP
59833: POP
// end ;
59834: LD_VAR 0 4
59838: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59839: LD_INT 0
59841: PPUSH
59842: PPUSH
59843: PPUSH
59844: PPUSH
59845: PPUSH
59846: PPUSH
59847: PPUSH
59848: PPUSH
59849: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59850: LD_VAR 0 1
59854: PPUSH
59855: CALL_OW 264
59859: PUSH
59860: LD_INT 81
59862: EQUAL
59863: NOT
59864: IFTRUE 59879
59866: PUSH
59867: LD_VAR 0 1
59871: PUSH
59872: LD_EXP 57
59876: IN
59877: NOT
59878: OR
59879: IFFALSE 59883
// exit ;
59881: GO 60209
// index := GetElementIndex ( minersList , unit ) ;
59883: LD_ADDR_VAR 0 6
59887: PUSH
59888: LD_EXP 57
59892: PPUSH
59893: LD_VAR 0 1
59897: PPUSH
59898: CALL 16263 0 2
59902: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59903: LD_ADDR_VAR 0 8
59907: PUSH
59908: LD_EXP 59
59912: PUSH
59913: LD_EXP 58
59917: PUSH
59918: LD_VAR 0 6
59922: ARRAY
59923: MINUS
59924: ST_TO_ADDR
// if not minesFreeAmount then
59925: LD_VAR 0 8
59929: NOT
59930: IFFALSE 59934
// exit ;
59932: GO 60209
// tmp := [ ] ;
59934: LD_ADDR_VAR 0 7
59938: PUSH
59939: EMPTY
59940: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59941: LD_ADDR_VAR 0 5
59945: PUSH
59946: DOUBLE
59947: LD_INT 1
59949: DEC
59950: ST_TO_ADDR
59951: LD_VAR 0 8
59955: PUSH
59956: FOR_TO
59957: IFFALSE 60156
// begin _d := rand ( 0 , 5 ) ;
59959: LD_ADDR_VAR 0 11
59963: PUSH
59964: LD_INT 0
59966: PPUSH
59967: LD_INT 5
59969: PPUSH
59970: CALL_OW 12
59974: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59975: LD_ADDR_VAR 0 12
59979: PUSH
59980: LD_INT 2
59982: PPUSH
59983: LD_INT 6
59985: PPUSH
59986: CALL_OW 12
59990: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59991: LD_ADDR_VAR 0 9
59995: PUSH
59996: LD_VAR 0 2
60000: PPUSH
60001: LD_VAR 0 11
60005: PPUSH
60006: LD_VAR 0 12
60010: PPUSH
60011: CALL_OW 272
60015: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60016: LD_ADDR_VAR 0 10
60020: PUSH
60021: LD_VAR 0 3
60025: PPUSH
60026: LD_VAR 0 11
60030: PPUSH
60031: LD_VAR 0 12
60035: PPUSH
60036: CALL_OW 273
60040: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60041: LD_VAR 0 9
60045: PPUSH
60046: LD_VAR 0 10
60050: PPUSH
60051: CALL_OW 488
60055: IFFALSE 60079
60057: PUSH
60058: LD_VAR 0 9
60062: PUSH
60063: LD_VAR 0 10
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_VAR 0 7
60076: IN
60077: NOT
60078: AND
60079: IFFALSE 60098
60081: PUSH
60082: LD_VAR 0 9
60086: PPUSH
60087: LD_VAR 0 10
60091: PPUSH
60092: CALL_OW 458
60096: NOT
60097: AND
60098: IFFALSE 60140
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60100: LD_ADDR_VAR 0 7
60104: PUSH
60105: LD_VAR 0 7
60109: PPUSH
60110: LD_VAR 0 7
60114: PUSH
60115: LD_INT 1
60117: PLUS
60118: PPUSH
60119: LD_VAR 0 9
60123: PUSH
60124: LD_VAR 0 10
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PPUSH
60133: CALL_OW 1
60137: ST_TO_ADDR
60138: GO 60154
// i := i - 1 ;
60140: LD_ADDR_VAR 0 5
60144: PUSH
60145: LD_VAR 0 5
60149: PUSH
60150: LD_INT 1
60152: MINUS
60153: ST_TO_ADDR
// end ;
60154: GO 59956
60156: POP
60157: POP
// for i in tmp do
60158: LD_ADDR_VAR 0 5
60162: PUSH
60163: LD_VAR 0 7
60167: PUSH
60168: FOR_IN
60169: IFFALSE 60207
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60171: LD_VAR 0 1
60175: PPUSH
60176: LD_VAR 0 5
60180: PUSH
60181: LD_INT 1
60183: ARRAY
60184: PPUSH
60185: LD_VAR 0 5
60189: PUSH
60190: LD_INT 2
60192: ARRAY
60193: PPUSH
60194: CALL 59200 0 3
60198: NOT
60199: IFFALSE 60205
// exit ;
60201: POP
60202: POP
60203: GO 60209
60205: GO 60168
60207: POP
60208: POP
// end ;
60209: LD_VAR 0 4
60213: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60214: LD_INT 0
60216: PPUSH
60217: PPUSH
60218: PPUSH
60219: PPUSH
60220: PPUSH
60221: PPUSH
60222: PPUSH
60223: PPUSH
60224: PPUSH
// if GetClass ( unit ) <> class_sniper then
60225: LD_VAR 0 1
60229: PPUSH
60230: CALL_OW 257
60234: PUSH
60235: LD_INT 5
60237: NONEQUAL
60238: IFFALSE 60242
// exit ;
60240: GO 60712
// dist := 8 ;
60242: LD_ADDR_VAR 0 5
60246: PUSH
60247: LD_INT 8
60249: ST_TO_ADDR
// viewRange := 12 ;
60250: LD_ADDR_VAR 0 8
60254: PUSH
60255: LD_INT 12
60257: ST_TO_ADDR
// side := GetSide ( unit ) ;
60258: LD_ADDR_VAR 0 6
60262: PUSH
60263: LD_VAR 0 1
60267: PPUSH
60268: CALL_OW 255
60272: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60273: LD_INT 61
60275: PPUSH
60276: LD_VAR 0 6
60280: PPUSH
60281: CALL_OW 321
60285: PUSH
60286: LD_INT 2
60288: EQUAL
60289: IFFALSE 60299
// viewRange := 16 ;
60291: LD_ADDR_VAR 0 8
60295: PUSH
60296: LD_INT 16
60298: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60299: LD_VAR 0 1
60303: PPUSH
60304: LD_VAR 0 2
60308: PPUSH
60309: LD_VAR 0 3
60313: PPUSH
60314: CALL_OW 297
60318: PUSH
60319: LD_VAR 0 5
60323: GREATER
60324: IFFALSE 60403
// begin ComMoveXY ( unit , x , y ) ;
60326: LD_VAR 0 1
60330: PPUSH
60331: LD_VAR 0 2
60335: PPUSH
60336: LD_VAR 0 3
60340: PPUSH
60341: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60345: LD_INT 35
60347: PPUSH
60348: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60352: LD_VAR 0 1
60356: PPUSH
60357: LD_VAR 0 2
60361: PPUSH
60362: LD_VAR 0 3
60366: PPUSH
60367: CALL 48319 0 3
60371: NOT
60372: IFFALSE 60376
// exit ;
60374: GO 60712
// until GetDistUnitXY ( unit , x , y ) < dist ;
60376: LD_VAR 0 1
60380: PPUSH
60381: LD_VAR 0 2
60385: PPUSH
60386: LD_VAR 0 3
60390: PPUSH
60391: CALL_OW 297
60395: PUSH
60396: LD_VAR 0 5
60400: LESS
60401: IFFALSE 60345
// end ; ComTurnXY ( unit , x , y ) ;
60403: LD_VAR 0 1
60407: PPUSH
60408: LD_VAR 0 2
60412: PPUSH
60413: LD_VAR 0 3
60417: PPUSH
60418: CALL_OW 118
// repeat if Multiplayer then
60422: LD_OWVAR 4
60426: IFFALSE 60437
// wait ( 35 ) else
60428: LD_INT 35
60430: PPUSH
60431: CALL_OW 67
60435: GO 60444
// wait ( 5 ) ;
60437: LD_INT 5
60439: PPUSH
60440: CALL_OW 67
// _d := GetDir ( unit ) ;
60444: LD_ADDR_VAR 0 11
60448: PUSH
60449: LD_VAR 0 1
60453: PPUSH
60454: CALL_OW 254
60458: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60459: LD_ADDR_VAR 0 7
60463: PUSH
60464: LD_VAR 0 1
60468: PPUSH
60469: CALL_OW 250
60473: PPUSH
60474: LD_VAR 0 1
60478: PPUSH
60479: CALL_OW 251
60483: PPUSH
60484: LD_VAR 0 2
60488: PPUSH
60489: LD_VAR 0 3
60493: PPUSH
60494: CALL 50955 0 4
60498: ST_TO_ADDR
// until dir = _d ;
60499: LD_VAR 0 7
60503: PUSH
60504: LD_VAR 0 11
60508: EQUAL
60509: IFFALSE 60422
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60511: LD_ADDR_VAR 0 9
60515: PUSH
60516: LD_VAR 0 1
60520: PPUSH
60521: CALL_OW 250
60525: PPUSH
60526: LD_VAR 0 7
60530: PPUSH
60531: LD_VAR 0 5
60535: PPUSH
60536: CALL_OW 272
60540: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60541: LD_ADDR_VAR 0 10
60545: PUSH
60546: LD_VAR 0 1
60550: PPUSH
60551: CALL_OW 251
60555: PPUSH
60556: LD_VAR 0 7
60560: PPUSH
60561: LD_VAR 0 5
60565: PPUSH
60566: CALL_OW 273
60570: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60571: LD_VAR 0 9
60575: PPUSH
60576: LD_VAR 0 10
60580: PPUSH
60581: CALL_OW 488
60585: NOT
60586: IFFALSE 60590
// exit ;
60588: GO 60712
// ComAnimCustom ( unit , 1 ) ;
60590: LD_VAR 0 1
60594: PPUSH
60595: LD_INT 1
60597: PPUSH
60598: CALL_OW 592
// p := 0 ;
60602: LD_ADDR_VAR 0 12
60606: PUSH
60607: LD_INT 0
60609: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60610: LD_VAR 0 9
60614: PPUSH
60615: LD_VAR 0 10
60619: PPUSH
60620: LD_VAR 0 6
60624: PPUSH
60625: LD_VAR 0 8
60629: PPUSH
60630: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60634: LD_INT 35
60636: PPUSH
60637: CALL_OW 67
// p := Inc ( p ) ;
60641: LD_ADDR_VAR 0 12
60645: PUSH
60646: LD_VAR 0 12
60650: PPUSH
60651: CALL 50911 0 1
60655: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60656: LD_VAR 0 12
60660: PUSH
60661: LD_INT 3
60663: EQUAL
60664: IFTRUE 60678
60666: PUSH
60667: LD_VAR 0 1
60671: PPUSH
60672: CALL_OW 302
60676: NOT
60677: OR
60678: IFTRUE 60691
60680: PUSH
60681: LD_VAR 0 1
60685: PPUSH
60686: CALL_OW 301
60690: OR
60691: IFFALSE 60634
// RemoveSeeing ( _x , _y , side ) ;
60693: LD_VAR 0 9
60697: PPUSH
60698: LD_VAR 0 10
60702: PPUSH
60703: LD_VAR 0 6
60707: PPUSH
60708: CALL_OW 331
// end ;
60712: LD_VAR 0 4
60716: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
60717: LD_INT 0
60719: PPUSH
60720: PPUSH
60721: PPUSH
60722: PPUSH
60723: PPUSH
60724: PPUSH
60725: PPUSH
60726: PPUSH
60727: PPUSH
60728: PPUSH
60729: PPUSH
// if not unit then
60730: LD_VAR 0 1
60734: NOT
60735: IFFALSE 60739
// exit ;
60737: GO 61010
// side := GetSide ( unit ) ;
60739: LD_ADDR_VAR 0 3
60743: PUSH
60744: LD_VAR 0 1
60748: PPUSH
60749: CALL_OW 255
60753: ST_TO_ADDR
// x := GetX ( unit ) ;
60754: LD_ADDR_VAR 0 5
60758: PUSH
60759: LD_VAR 0 1
60763: PPUSH
60764: CALL_OW 250
60768: ST_TO_ADDR
// y := GetY ( unit ) ;
60769: LD_ADDR_VAR 0 6
60773: PUSH
60774: LD_VAR 0 1
60778: PPUSH
60779: CALL_OW 251
60783: ST_TO_ADDR
// r := 8 ;
60784: LD_ADDR_VAR 0 4
60788: PUSH
60789: LD_INT 8
60791: ST_TO_ADDR
// if x - r < 0 then
60792: LD_VAR 0 5
60796: PUSH
60797: LD_VAR 0 4
60801: MINUS
60802: PUSH
60803: LD_INT 0
60805: LESS
60806: IFFALSE 60818
// min_x := 0 else
60808: LD_ADDR_VAR 0 7
60812: PUSH
60813: LD_INT 0
60815: ST_TO_ADDR
60816: GO 60834
// min_x := x - r ;
60818: LD_ADDR_VAR 0 7
60822: PUSH
60823: LD_VAR 0 5
60827: PUSH
60828: LD_VAR 0 4
60832: MINUS
60833: ST_TO_ADDR
// if y - r < 0 then
60834: LD_VAR 0 6
60838: PUSH
60839: LD_VAR 0 4
60843: MINUS
60844: PUSH
60845: LD_INT 0
60847: LESS
60848: IFFALSE 60860
// min_y := 0 else
60850: LD_ADDR_VAR 0 8
60854: PUSH
60855: LD_INT 0
60857: ST_TO_ADDR
60858: GO 60876
// min_y := y - r ;
60860: LD_ADDR_VAR 0 8
60864: PUSH
60865: LD_VAR 0 6
60869: PUSH
60870: LD_VAR 0 4
60874: MINUS
60875: ST_TO_ADDR
// max_x := x + r ;
60876: LD_ADDR_VAR 0 9
60880: PUSH
60881: LD_VAR 0 5
60885: PUSH
60886: LD_VAR 0 4
60890: PLUS
60891: ST_TO_ADDR
// max_y := y + r ;
60892: LD_ADDR_VAR 0 10
60896: PUSH
60897: LD_VAR 0 6
60901: PUSH
60902: LD_VAR 0 4
60906: PLUS
60907: ST_TO_ADDR
// for _x = min_x to max_x do
60908: LD_ADDR_VAR 0 11
60912: PUSH
60913: DOUBLE
60914: LD_VAR 0 7
60918: DEC
60919: ST_TO_ADDR
60920: LD_VAR 0 9
60924: PUSH
60925: FOR_TO
60926: IFFALSE 61008
// for _y = min_y to max_y do
60928: LD_ADDR_VAR 0 12
60932: PUSH
60933: DOUBLE
60934: LD_VAR 0 8
60938: DEC
60939: ST_TO_ADDR
60940: LD_VAR 0 10
60944: PUSH
60945: FOR_TO
60946: IFFALSE 61004
// begin if not ValidHex ( _x , _y ) then
60948: LD_VAR 0 11
60952: PPUSH
60953: LD_VAR 0 12
60957: PPUSH
60958: CALL_OW 488
60962: NOT
60963: IFFALSE 60967
// continue ;
60965: GO 60945
// if MineAtPos ( _x , _y ) then
60967: LD_VAR 0 11
60971: PPUSH
60972: LD_VAR 0 12
60976: PPUSH
60977: CALL_OW 458
60981: IFFALSE 61002
// ViewMineAtPos ( _x , _y , side ) ;
60983: LD_VAR 0 11
60987: PPUSH
60988: LD_VAR 0 12
60992: PPUSH
60993: LD_VAR 0 3
60997: PPUSH
60998: CALL_OW 457
// end ;
61002: GO 60945
61004: POP
61005: POP
61006: GO 60925
61008: POP
61009: POP
// end ;
61010: LD_VAR 0 2
61014: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
61015: LD_INT 0
61017: PPUSH
61018: PPUSH
61019: PPUSH
61020: PPUSH
61021: PPUSH
61022: PPUSH
61023: PPUSH
// if not units then
61024: LD_VAR 0 1
61028: NOT
61029: IFFALSE 61033
// exit ;
61031: GO 61497
// scaners := [ ] ;
61033: LD_ADDR_VAR 0 6
61037: PUSH
61038: EMPTY
61039: ST_TO_ADDR
// for i in units do
61040: LD_ADDR_VAR 0 3
61044: PUSH
61045: LD_VAR 0 1
61049: PUSH
61050: FOR_IN
61051: IFFALSE 61208
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
61053: LD_VAR 0 3
61057: PPUSH
61058: CALL_OW 264
61062: PUSH
61063: LD_INT 11
61065: NONEQUAL
61066: IFTRUE 61080
61068: PUSH
61069: LD_VAR 0 3
61073: PPUSH
61074: CALL_OW 302
61078: NOT
61079: OR
61080: IFTRUE 61097
61082: PUSH
61083: LD_VAR 0 3
61087: PPUSH
61088: CALL_OW 110
61092: PUSH
61093: LD_INT 502
61095: EQUAL
61096: OR
61097: IFFALSE 61101
// continue ;
61099: GO 61050
// ComStop ( i ) ;
61101: LD_VAR 0 3
61105: PPUSH
61106: CALL_OW 141
// x := GetX ( i ) ;
61110: LD_ADDR_VAR 0 4
61114: PUSH
61115: LD_VAR 0 3
61119: PPUSH
61120: CALL_OW 250
61124: ST_TO_ADDR
// y := GetY ( i ) ;
61125: LD_ADDR_VAR 0 5
61129: PUSH
61130: LD_VAR 0 3
61134: PPUSH
61135: CALL_OW 251
61139: ST_TO_ADDR
// if GetSide ( i ) = your_side then
61140: LD_VAR 0 3
61144: PPUSH
61145: CALL_OW 255
61149: PUSH
61150: LD_OWVAR 2
61154: EQUAL
61155: IFFALSE 61174
// PlaySoundXY ( x , y , mineDetector ) ;
61157: LD_VAR 0 4
61161: PPUSH
61162: LD_VAR 0 5
61166: PPUSH
61167: LD_STRING mineDetector
61169: PPUSH
61170: CALL_OW 366
// scaners := Join ( scaners , i ) ;
61174: LD_ADDR_VAR 0 6
61178: PUSH
61179: LD_VAR 0 6
61183: PPUSH
61184: LD_VAR 0 3
61188: PPUSH
61189: CALL 49538 0 2
61193: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
61194: LD_VAR 0 3
61198: PPUSH
61199: LD_INT 502
61201: PPUSH
61202: CALL_OW 109
// end ;
61206: GO 61050
61208: POP
61209: POP
// if not scaners then
61210: LD_VAR 0 6
61214: NOT
61215: IFFALSE 61219
// exit ;
61217: GO 61497
// wait ( 3 ) ;
61219: LD_INT 3
61221: PPUSH
61222: CALL_OW 67
// timer := 6 ;
61226: LD_ADDR_VAR 0 7
61230: PUSH
61231: LD_INT 6
61233: ST_TO_ADDR
// repeat for i in scaners do
61234: LD_ADDR_VAR 0 3
61238: PUSH
61239: LD_VAR 0 6
61243: PUSH
61244: FOR_IN
61245: IFFALSE 61395
// begin side := GetSide ( i ) ;
61247: LD_ADDR_VAR 0 8
61251: PUSH
61252: LD_VAR 0 3
61256: PPUSH
61257: CALL_OW 255
61261: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
61262: LD_VAR 0 3
61266: PPUSH
61267: CALL_OW 302
61271: NOT
61272: IFTRUE 61285
61274: PUSH
61275: LD_VAR 0 3
61279: PPUSH
61280: CALL_OW 314
61284: OR
61285: IFTRUE 61316
61287: PUSH
61288: LD_VAR 0 3
61292: PPUSH
61293: CALL_OW 263
61297: PUSH
61298: LD_INT 1
61300: EQUAL
61301: IFFALSE 61315
61303: PUSH
61304: LD_VAR 0 3
61308: PPUSH
61309: CALL_OW 311
61313: NOT
61314: AND
61315: OR
61316: IFFALSE 61360
// begin SetUnitDisplayNumber ( i , 0 ) ;
61318: LD_VAR 0 3
61322: PPUSH
61323: LD_INT 0
61325: PPUSH
61326: CALL_OW 505
// SetTag ( i , 0 ) ;
61330: LD_VAR 0 3
61334: PPUSH
61335: LD_INT 0
61337: PPUSH
61338: CALL_OW 109
// scaners := scaners diff i ;
61342: LD_ADDR_VAR 0 6
61346: PUSH
61347: LD_VAR 0 6
61351: PUSH
61352: LD_VAR 0 3
61356: DIFF
61357: ST_TO_ADDR
// continue ;
61358: GO 61244
// end ; if side in [ your_side , 9 ] then
61360: LD_VAR 0 8
61364: PUSH
61365: LD_OWVAR 2
61369: PUSH
61370: LD_INT 9
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: IN
61377: IFFALSE 61393
// SetUnitDisplayNumber ( i , timer ) ;
61379: LD_VAR 0 3
61383: PPUSH
61384: LD_VAR 0 7
61388: PPUSH
61389: CALL_OW 505
// end ;
61393: GO 61244
61395: POP
61396: POP
// if not scaners then
61397: LD_VAR 0 6
61401: NOT
61402: IFFALSE 61406
// exit ;
61404: GO 61497
// timer := Dec ( timer ) ;
61406: LD_ADDR_VAR 0 7
61410: PUSH
61411: LD_VAR 0 7
61415: PPUSH
61416: CALL 50933 0 1
61420: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61421: LD_INT 35
61423: PPUSH
61424: CALL_OW 67
// until timer = 0 ;
61428: LD_VAR 0 7
61432: PUSH
61433: LD_INT 0
61435: EQUAL
61436: IFFALSE 61234
// if not scaners then
61438: LD_VAR 0 6
61442: NOT
61443: IFFALSE 61447
// exit ;
61445: GO 61497
// for i in scaners do
61447: LD_ADDR_VAR 0 3
61451: PUSH
61452: LD_VAR 0 6
61456: PUSH
61457: FOR_IN
61458: IFFALSE 61495
// begin SetUnitDisplayNumber ( i , 0 ) ;
61460: LD_VAR 0 3
61464: PPUSH
61465: LD_INT 0
61467: PPUSH
61468: CALL_OW 505
// SetTag ( i , 0 ) ;
61472: LD_VAR 0 3
61476: PPUSH
61477: LD_INT 0
61479: PPUSH
61480: CALL_OW 109
// RevealDetectorMine ( i ) ;
61484: LD_VAR 0 3
61488: PPUSH
61489: CALL 60717 0 1
// end ;
61493: GO 61457
61495: POP
61496: POP
// end ;
61497: LD_VAR 0 2
61501: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
61502: LD_INT 0
61504: PPUSH
// if p1 = mine_detector_mode then
61505: LD_VAR 0 2
61509: PUSH
61510: LD_INT 103
61512: EQUAL
61513: IFFALSE 61524
// DetectMine ( units ) ;
61515: LD_VAR 0 1
61519: PPUSH
61520: CALL 61015 0 1
// end ; end_of_file
61524: LD_VAR 0 7
61528: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
61529: LD_EXP 39
61533: IFFALSE 61874
61535: GO 61537
61537: DISABLE
61538: LD_INT 0
61540: PPUSH
61541: PPUSH
61542: PPUSH
// begin mpKingPoints := [ ] ;
61543: LD_ADDR_EXP 60
61547: PUSH
61548: EMPTY
61549: ST_TO_ADDR
// if mpTeamGame then
61550: LD_EXP 11
61554: IFFALSE 61608
// begin for i := 1 to Count ( mpTeams ) do
61556: LD_ADDR_VAR 0 1
61560: PUSH
61561: DOUBLE
61562: LD_INT 1
61564: DEC
61565: ST_TO_ADDR
61566: LD_EXP 10
61570: PPUSH
61571: CALL 13562 0 1
61575: PUSH
61576: FOR_TO
61577: IFFALSE 61604
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61579: LD_ADDR_EXP 60
61583: PUSH
61584: LD_EXP 60
61588: PPUSH
61589: LD_VAR 0 1
61593: PPUSH
61594: LD_INT 0
61596: PPUSH
61597: CALL_OW 1
61601: ST_TO_ADDR
61602: GO 61576
61604: POP
61605: POP
// end else
61606: GO 61651
// begin for i := 1 to 8 do
61608: LD_ADDR_VAR 0 1
61612: PUSH
61613: DOUBLE
61614: LD_INT 1
61616: DEC
61617: ST_TO_ADDR
61618: LD_INT 8
61620: PUSH
61621: FOR_TO
61622: IFFALSE 61649
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61624: LD_ADDR_EXP 60
61628: PUSH
61629: LD_EXP 60
61633: PPUSH
61634: LD_VAR 0 1
61638: PPUSH
61639: LD_INT 0
61641: PPUSH
61642: CALL_OW 1
61646: ST_TO_ADDR
61647: GO 61621
61649: POP
61650: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
61651: LD_ADDR_VAR 0 3
61655: PUSH
61656: LD_EXP 2
61660: PPUSH
61661: LD_INT 0
61663: PPUSH
61664: CALL_OW 517
61668: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61669: LD_ADDR_VAR 0 1
61673: PUSH
61674: DOUBLE
61675: LD_INT 1
61677: DEC
61678: ST_TO_ADDR
61679: LD_VAR 0 3
61683: PUSH
61684: LD_INT 1
61686: ARRAY
61687: PUSH
61688: FOR_TO
61689: IFFALSE 61756
// for j := 1 to 8 do
61691: LD_ADDR_VAR 0 2
61695: PUSH
61696: DOUBLE
61697: LD_INT 1
61699: DEC
61700: ST_TO_ADDR
61701: LD_INT 8
61703: PUSH
61704: FOR_TO
61705: IFFALSE 61752
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
61707: LD_VAR 0 3
61711: PUSH
61712: LD_INT 1
61714: ARRAY
61715: PUSH
61716: LD_VAR 0 1
61720: ARRAY
61721: PPUSH
61722: LD_VAR 0 3
61726: PUSH
61727: LD_INT 2
61729: ARRAY
61730: PUSH
61731: LD_VAR 0 1
61735: ARRAY
61736: PPUSH
61737: LD_VAR 0 2
61741: PPUSH
61742: LD_INT 12
61744: NEG
61745: PPUSH
61746: CALL_OW 330
61750: GO 61704
61752: POP
61753: POP
61754: GO 61688
61756: POP
61757: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
61758: LD_EXP 34
61762: PPUSH
61763: LD_INT 1
61765: PPUSH
61766: CALL_OW 424
// UpdateCounter ;
61770: CALL 62380 0 0
// repeat wait ( 0 0$1 ) ;
61774: LD_INT 35
61776: PPUSH
61777: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61781: LD_ADDR_VAR 0 3
61785: PUSH
61786: LD_EXP 34
61790: PPUSH
61791: LD_INT 3
61793: PUSH
61794: LD_INT 57
61796: PUSH
61797: EMPTY
61798: LIST
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 50
61806: PUSH
61807: EMPTY
61808: LIST
61809: PUSH
61810: LD_INT 2
61812: PUSH
61813: LD_INT 30
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 30
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: LIST
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: LIST
61842: PPUSH
61843: CALL_OW 70
61847: ST_TO_ADDR
// if not tmp then
61848: LD_VAR 0 3
61852: NOT
61853: IFFALSE 61857
// continue ;
61855: GO 61774
// AddPoints ( tmp ) ;
61857: LD_VAR 0 3
61861: PPUSH
61862: CALL 62058 0 1
// UpdateCounter ;
61866: CALL 62380 0 0
// until false ;
61870: LD_INT 0
61872: IFFALSE 61774
// end ;
61874: PPOPN 3
61876: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
61877: LD_EXP 39
61881: IFFALSE 61889
61883: PUSH
61884: LD_EXP 37
61888: AND
61889: IFFALSE 62055
61891: GO 61893
61893: DISABLE
61894: LD_INT 0
61896: PPUSH
61897: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
61898: LD_ADDR_VAR 0 2
61902: PUSH
61903: LD_EXP 2
61907: PPUSH
61908: LD_INT 0
61910: PPUSH
61911: CALL_OW 517
61915: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61916: LD_ADDR_VAR 0 1
61920: PUSH
61921: DOUBLE
61922: LD_INT 1
61924: DEC
61925: ST_TO_ADDR
61926: LD_VAR 0 2
61930: PUSH
61931: LD_INT 1
61933: ARRAY
61934: PUSH
61935: FOR_TO
61936: IFFALSE 61977
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
61938: LD_VAR 0 2
61942: PUSH
61943: LD_INT 1
61945: ARRAY
61946: PUSH
61947: LD_VAR 0 1
61951: ARRAY
61952: PPUSH
61953: LD_VAR 0 2
61957: PUSH
61958: LD_INT 2
61960: ARRAY
61961: PUSH
61962: LD_VAR 0 1
61966: ARRAY
61967: PPUSH
61968: LD_INT 125
61970: PPUSH
61971: CALL_OW 495
61975: GO 61935
61977: POP
61978: POP
// repeat wait ( mpEmissions ) ;
61979: LD_EXP 37
61983: PPUSH
61984: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
61988: LD_ADDR_VAR 0 1
61992: PUSH
61993: DOUBLE
61994: LD_INT 1
61996: DEC
61997: ST_TO_ADDR
61998: LD_VAR 0 2
62002: PUSH
62003: LD_INT 1
62005: ARRAY
62006: PUSH
62007: FOR_TO
62008: IFFALSE 62049
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
62010: LD_VAR 0 2
62014: PUSH
62015: LD_INT 1
62017: ARRAY
62018: PUSH
62019: LD_VAR 0 1
62023: ARRAY
62024: PPUSH
62025: LD_VAR 0 2
62029: PUSH
62030: LD_INT 2
62032: ARRAY
62033: PUSH
62034: LD_VAR 0 1
62038: ARRAY
62039: PPUSH
62040: LD_INT 15
62042: PPUSH
62043: CALL_OW 495
62047: GO 62007
62049: POP
62050: POP
// until false ;
62051: LD_INT 0
62053: IFFALSE 61979
// end ;
62055: PPOPN 2
62057: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
62058: LD_INT 0
62060: PPUSH
62061: PPUSH
62062: PPUSH
62063: PPUSH
62064: PPUSH
// if mpTeamGame then
62065: LD_EXP 11
62069: IFFALSE 62266
// begin first := depots [ 1 ] ;
62071: LD_ADDR_VAR 0 4
62075: PUSH
62076: LD_VAR 0 1
62080: PUSH
62081: LD_INT 1
62083: ARRAY
62084: ST_TO_ADDR
// side := GetSide ( first ) ;
62085: LD_ADDR_VAR 0 6
62089: PUSH
62090: LD_VAR 0 4
62094: PPUSH
62095: CALL_OW 255
62099: ST_TO_ADDR
// for i := 1 to mpTeams do
62100: LD_ADDR_VAR 0 3
62104: PUSH
62105: DOUBLE
62106: LD_INT 1
62108: DEC
62109: ST_TO_ADDR
62110: LD_EXP 10
62114: PUSH
62115: FOR_TO
62116: IFFALSE 62150
// if side in mpTeams [ i ] then
62118: LD_VAR 0 6
62122: PUSH
62123: LD_EXP 10
62127: PUSH
62128: LD_VAR 0 3
62132: ARRAY
62133: IN
62134: IFFALSE 62148
// begin team := i ;
62136: LD_ADDR_VAR 0 5
62140: PUSH
62141: LD_VAR 0 3
62145: ST_TO_ADDR
// break ;
62146: GO 62150
// end ;
62148: GO 62115
62150: POP
62151: POP
// if not team then
62152: LD_VAR 0 5
62156: NOT
62157: IFFALSE 62161
// exit ;
62159: GO 62375
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62161: LD_EXP 34
62165: PPUSH
62166: LD_INT 81
62168: PUSH
62169: LD_VAR 0 6
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PPUSH
62178: CALL_OW 70
62182: IFFALSE 62186
// exit ;
62184: GO 62375
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
62186: LD_ADDR_EXP 60
62190: PUSH
62191: LD_EXP 60
62195: PPUSH
62196: LD_VAR 0 5
62200: PPUSH
62201: LD_EXP 60
62205: PUSH
62206: LD_VAR 0 5
62210: ARRAY
62211: PUSH
62212: LD_INT 1
62214: PLUS
62215: PPUSH
62216: CALL_OW 1
62220: ST_TO_ADDR
// for i in mpTeams [ team ] do
62221: LD_ADDR_VAR 0 3
62225: PUSH
62226: LD_EXP 10
62230: PUSH
62231: LD_VAR 0 5
62235: ARRAY
62236: PUSH
62237: FOR_IN
62238: IFFALSE 62262
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
62240: LD_VAR 0 3
62244: PPUSH
62245: LD_EXP 60
62249: PUSH
62250: LD_VAR 0 5
62254: ARRAY
62255: PPUSH
62256: CALL_OW 506
62260: GO 62237
62262: POP
62263: POP
// end else
62264: GO 62375
// begin first := depots [ 1 ] ;
62266: LD_ADDR_VAR 0 4
62270: PUSH
62271: LD_VAR 0 1
62275: PUSH
62276: LD_INT 1
62278: ARRAY
62279: ST_TO_ADDR
// side := GetSide ( first ) ;
62280: LD_ADDR_VAR 0 6
62284: PUSH
62285: LD_VAR 0 4
62289: PPUSH
62290: CALL_OW 255
62294: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62295: LD_EXP 34
62299: PPUSH
62300: LD_INT 81
62302: PUSH
62303: LD_VAR 0 6
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PPUSH
62312: CALL_OW 70
62316: IFFALSE 62320
// exit ;
62318: GO 62375
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
62320: LD_ADDR_EXP 60
62324: PUSH
62325: LD_EXP 60
62329: PPUSH
62330: LD_VAR 0 6
62334: PPUSH
62335: LD_EXP 60
62339: PUSH
62340: LD_VAR 0 6
62344: ARRAY
62345: PUSH
62346: LD_INT 1
62348: PLUS
62349: PPUSH
62350: CALL_OW 1
62354: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
62355: LD_VAR 0 6
62359: PPUSH
62360: LD_EXP 60
62364: PUSH
62365: LD_VAR 0 6
62369: ARRAY
62370: PPUSH
62371: CALL_OW 506
// end ; end ;
62375: LD_VAR 0 2
62379: RET
// function UpdateCounter ; var i ; begin
62380: LD_INT 0
62382: PPUSH
62383: PPUSH
// result := [ ] ;
62384: LD_ADDR_VAR 0 1
62388: PUSH
62389: EMPTY
62390: ST_TO_ADDR
// if mpTeamGame then
62391: LD_EXP 11
62395: IFFALSE 62462
// begin for i := 1 to mpTeams do
62397: LD_ADDR_VAR 0 2
62401: PUSH
62402: DOUBLE
62403: LD_INT 1
62405: DEC
62406: ST_TO_ADDR
62407: LD_EXP 10
62411: PUSH
62412: FOR_TO
62413: IFFALSE 62458
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
62415: LD_ADDR_VAR 0 1
62419: PUSH
62420: LD_VAR 0 1
62424: PUSH
62425: LD_STRING #KingoftheHill-Team
62427: PUSH
62428: LD_VAR 0 2
62432: PUSH
62433: LD_EXP 60
62437: PUSH
62438: LD_VAR 0 2
62442: ARRAY
62443: PUSH
62444: LD_EXP 35
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: ADD
62455: ST_TO_ADDR
62456: GO 62412
62458: POP
62459: POP
// end else
62460: GO 62535
// begin for i := 1 to 8 do
62462: LD_ADDR_VAR 0 2
62466: PUSH
62467: DOUBLE
62468: LD_INT 1
62470: DEC
62471: ST_TO_ADDR
62472: LD_INT 8
62474: PUSH
62475: FOR_TO
62476: IFFALSE 62533
// if mpSidePositions [ i ] then
62478: LD_EXP 7
62482: PUSH
62483: LD_VAR 0 2
62487: ARRAY
62488: IFFALSE 62531
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
62490: LD_ADDR_VAR 0 1
62494: PUSH
62495: LD_VAR 0 1
62499: PUSH
62500: LD_STRING #KingoftheHill-Player
62502: PUSH
62503: LD_VAR 0 2
62507: PUSH
62508: LD_EXP 60
62512: PUSH
62513: LD_VAR 0 2
62517: ARRAY
62518: PUSH
62519: LD_EXP 35
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: ADD
62530: ST_TO_ADDR
62531: GO 62475
62533: POP
62534: POP
// end ; mpDisplayStrings := result ;
62535: LD_ADDR_EXP 38
62539: PUSH
62540: LD_VAR 0 1
62544: ST_TO_ADDR
// end ;
62545: LD_VAR 0 1
62549: RET
// export function HowMuchPointsKing ( side ) ; begin
62550: LD_INT 0
62552: PPUSH
// result := HowMuchPoints ( side ) ;
62553: LD_ADDR_VAR 0 2
62557: PUSH
62558: LD_VAR 0 1
62562: PPUSH
62563: CALL 62573 0 1
62567: ST_TO_ADDR
// end ;
62568: LD_VAR 0 2
62572: RET
// function HowMuchPoints ( side ) ; var i ; begin
62573: LD_INT 0
62575: PPUSH
62576: PPUSH
// if mpTeamGame then
62577: LD_EXP 11
62581: IFFALSE 62650
// begin for i := 1 to Count ( mpTeams ) do
62583: LD_ADDR_VAR 0 3
62587: PUSH
62588: DOUBLE
62589: LD_INT 1
62591: DEC
62592: ST_TO_ADDR
62593: LD_EXP 10
62597: PPUSH
62598: CALL 13562 0 1
62602: PUSH
62603: FOR_TO
62604: IFFALSE 62646
// begin if side in mpTeams [ i ] then
62606: LD_VAR 0 1
62610: PUSH
62611: LD_EXP 10
62615: PUSH
62616: LD_VAR 0 3
62620: ARRAY
62621: IN
62622: IFFALSE 62644
// begin result := mpKingPoints [ i ] ;
62624: LD_ADDR_VAR 0 2
62628: PUSH
62629: LD_EXP 60
62633: PUSH
62634: LD_VAR 0 3
62638: ARRAY
62639: ST_TO_ADDR
// exit ;
62640: POP
62641: POP
62642: GO 62666
// end ; end ;
62644: GO 62603
62646: POP
62647: POP
// end else
62648: GO 62666
// result := mpKingPoints [ side ] ;
62650: LD_ADDR_VAR 0 2
62654: PUSH
62655: LD_EXP 60
62659: PUSH
62660: LD_VAR 0 1
62664: ARRAY
62665: ST_TO_ADDR
// end ;
62666: LD_VAR 0 2
62670: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
62671: LD_EXP 39
62675: IFFALSE 62683
62677: PUSH
62678: CALL 63095 0 0
62682: AND
62683: IFFALSE 62691
62685: PUSH
62686: LD_OWVAR 4
62690: AND
62691: IFFALSE 62944
62693: GO 62695
62695: DISABLE
62696: LD_INT 0
62698: PPUSH
62699: PPUSH
// begin canWin := false ;
62700: LD_ADDR_VAR 0 2
62704: PUSH
62705: LD_INT 0
62707: ST_TO_ADDR
// if not HasPower ( your_side ) then
62708: LD_OWVAR 2
62712: PPUSH
62713: CALL 63137 0 1
62717: NOT
62718: IFFALSE 62729
// begin Multiplayer_Loose_Message ;
62720: CALL_OW 521
// enable ( mpLose ) ;
62724: LD_INT 102
62726: ENABLE_MARKED
// end else
62727: GO 62944
// begin if not EnemiesInGame then
62729: CALL 62947 0 0
62733: NOT
62734: IFFALSE 62741
// begin enable ( mpWin ) ;
62736: LD_INT 101
62738: ENABLE_MARKED
// exit ;
62739: GO 62944
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
62741: LD_ADDR_VAR 0 2
62745: PUSH
62746: LD_OWVAR 2
62750: PPUSH
62751: CALL 62573 0 1
62755: PUSH
62756: LD_EXP 35
62760: GREATEREQUAL
62761: IFFALSE 62774
62763: PUSH
62764: LD_OWVAR 2
62768: PPUSH
62769: CALL 63137 0 1
62773: AND
62774: ST_TO_ADDR
// for i := 1 to 8 do
62775: LD_ADDR_VAR 0 1
62779: PUSH
62780: DOUBLE
62781: LD_INT 1
62783: DEC
62784: ST_TO_ADDR
62785: LD_INT 8
62787: PUSH
62788: FOR_TO
62789: IFFALSE 62930
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62791: LD_EXP 7
62795: PUSH
62796: LD_VAR 0 1
62800: ARRAY
62801: IFFALSE 62814
62803: PUSH
62804: LD_VAR 0 1
62808: PPUSH
62809: CALL_OW 108
62813: AND
62814: IFFALSE 62828
62816: PUSH
62817: LD_VAR 0 1
62821: PUSH
62822: LD_OWVAR 2
62826: NONEQUAL
62827: AND
62828: IFFALSE 62928
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62830: LD_EXP 8
62834: PUSH
62835: LD_VAR 0 1
62839: ARRAY
62840: NOT
62841: IFTRUE 62889
62843: PUSH
62844: LD_EXP 8
62848: PUSH
62849: LD_VAR 0 1
62853: ARRAY
62854: PUSH
62855: LD_EXP 8
62859: PUSH
62860: LD_OWVAR 2
62864: ARRAY
62865: NONEQUAL
62866: IFFALSE 62888
62868: PUSH
62869: LD_OWVAR 2
62873: PPUSH
62874: LD_VAR 0 1
62878: PPUSH
62879: CALL_OW 81
62883: PUSH
62884: LD_INT 1
62886: NONEQUAL
62887: AND
62888: OR
62889: IFFALSE 62928
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
62891: LD_VAR 0 1
62895: PPUSH
62896: CALL 62573 0 1
62900: PUSH
62901: LD_EXP 35
62905: GREATEREQUAL
62906: IFFALSE 62919
62908: PUSH
62909: LD_VAR 0 1
62913: PPUSH
62914: CALL 63137 0 1
62918: AND
62919: IFFALSE 62928
// begin enable ( mpLose ) ;
62921: LD_INT 102
62923: ENABLE_MARKED
// exit ;
62924: POP
62925: POP
62926: GO 62944
// end ;
62928: GO 62788
62930: POP
62931: POP
// if canWin then
62932: LD_VAR 0 2
62936: IFFALSE 62943
// enable ( mpWin ) else
62938: LD_INT 101
62940: ENABLE_MARKED
62941: GO 62944
// enable ;
62943: ENABLE
// end ; end ;
62944: PPOPN 2
62946: END
// function EnemiesInGame ; var i ; begin
62947: LD_INT 0
62949: PPUSH
62950: PPUSH
// result := false ;
62951: LD_ADDR_VAR 0 1
62955: PUSH
62956: LD_INT 0
62958: ST_TO_ADDR
// for i := 1 to 8 do
62959: LD_ADDR_VAR 0 2
62963: PUSH
62964: DOUBLE
62965: LD_INT 1
62967: DEC
62968: ST_TO_ADDR
62969: LD_INT 8
62971: PUSH
62972: FOR_TO
62973: IFFALSE 63088
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
62975: LD_VAR 0 2
62979: PUSH
62980: LD_OWVAR 2
62984: NONEQUAL
62985: IFFALSE 62998
62987: PUSH
62988: LD_VAR 0 2
62992: PPUSH
62993: CALL 63137 0 1
62997: AND
62998: IFFALSE 63011
63000: PUSH
63001: LD_VAR 0 2
63005: PPUSH
63006: CALL_OW 108
63010: AND
63011: IFFALSE 63086
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
63013: LD_EXP 8
63017: PUSH
63018: LD_VAR 0 2
63022: ARRAY
63023: NOT
63024: IFTRUE 63072
63026: PUSH
63027: LD_EXP 8
63031: PUSH
63032: LD_VAR 0 2
63036: ARRAY
63037: PUSH
63038: LD_EXP 8
63042: PUSH
63043: LD_OWVAR 2
63047: ARRAY
63048: NONEQUAL
63049: IFFALSE 63071
63051: PUSH
63052: LD_OWVAR 2
63056: PPUSH
63057: LD_VAR 0 2
63061: PPUSH
63062: CALL_OW 81
63066: PUSH
63067: LD_INT 1
63069: NONEQUAL
63070: AND
63071: OR
63072: IFFALSE 63086
// begin result := true ;
63074: LD_ADDR_VAR 0 1
63078: PUSH
63079: LD_INT 1
63081: ST_TO_ADDR
// exit ;
63082: POP
63083: POP
63084: GO 63090
// end ;
63086: GO 62972
63088: POP
63089: POP
// end ;
63090: LD_VAR 0 1
63094: RET
// function CanWinLoose ; begin
63095: LD_INT 0
63097: PPUSH
// result := true ;
63098: LD_ADDR_VAR 0 1
63102: PUSH
63103: LD_INT 1
63105: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
63106: CALL_OW 531
63110: IFFALSE 63122
63112: PUSH
63113: CALL_OW 519
63117: PUSH
63118: LD_INT 1
63120: GREATER
63121: AND
63122: IFFALSE 63132
// result := false ;
63124: LD_ADDR_VAR 0 1
63128: PUSH
63129: LD_INT 0
63131: ST_TO_ADDR
// end ;
63132: LD_VAR 0 1
63136: RET
// function HasPower ( i ) ; begin
63137: LD_INT 0
63139: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
63140: LD_ADDR_VAR 0 2
63144: PUSH
63145: LD_INT 22
63147: PUSH
63148: LD_VAR 0 1
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 2
63159: PUSH
63160: LD_INT 21
63162: PUSH
63163: LD_INT 1
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 33
63172: PUSH
63173: LD_INT 3
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 33
63182: PUSH
63183: LD_INT 5
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PPUSH
63200: CALL_OW 69
63204: ST_TO_ADDR
// end ; end_of_file
63205: LD_VAR 0 2
63209: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63210: PPOPN 6
63212: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63213: LD_INT 0
63215: PPUSH
// begin if not units then
63216: LD_VAR 0 1
63220: NOT
63221: IFFALSE 63225
// exit ;
63223: GO 63259
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63225: LD_VAR 0 1
63229: PPUSH
63230: LD_VAR 0 2
63234: PPUSH
63235: LD_VAR 0 3
63239: PPUSH
63240: LD_VAR 0 4
63244: PPUSH
63245: LD_VAR 0 5
63249: PPUSH
63250: LD_VAR 0 6
63254: PPUSH
63255: CALL 61502 0 6
// end ;
63259: PPOPN 7
63261: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63262: LD_EXP 3
63266: PUSH
63267: LD_INT 4
63269: EQUAL
63270: IFFALSE 63306
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63272: LD_STRING setGameDifficulty(
63274: PUSH
63275: LD_OWVAR 67
63279: STR
63280: PUSH
63281: LD_STRING )
63283: STR
63284: PPUSH
63285: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63289: LD_STRING displayDifficulty(
63291: PUSH
63292: LD_OWVAR 67
63296: STR
63297: PUSH
63298: LD_STRING )
63300: STR
63301: PPUSH
63302: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63306: CALL 63335 0 0
// end ; end_of_file
63310: PPOPN 1
63312: END
// every 0 0$1 do
63313: GO 63315
63315: DISABLE
// begin enable ;
63316: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63317: LD_STRING updateTimer(
63319: PUSH
63320: LD_OWVAR 1
63324: STR
63325: PUSH
63326: LD_STRING );
63328: STR
63329: PPUSH
63330: CALL_OW 559
// end ;
63334: END
// export function SOS_MapStart ( ) ; begin
63335: LD_INT 0
63337: PPUSH
// UpdateFactoryWaypoints ( ) ;
63338: CALL 64269 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63342: CALL 64521 0 0
// ParseMultiDataToLua ( ) ;
63346: CALL 64668 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63350: LD_STRING setSpecLogoNumber(
63352: PUSH
63353: LD_INT 2
63355: STR
63356: PUSH
63357: LD_STRING ,
63359: STR
63360: PUSH
63361: LD_INT 1
63363: STR
63364: PUSH
63365: LD_STRING )
63367: STR
63368: PPUSH
63369: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63373: LD_STRING setSpecLogoNumber(
63375: PUSH
63376: LD_INT 3
63378: STR
63379: PUSH
63380: LD_STRING ,
63382: STR
63383: PUSH
63384: LD_INT 2
63386: STR
63387: PUSH
63388: LD_STRING )
63390: STR
63391: PPUSH
63392: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63396: LD_STRING setSpecLogoNumber(
63398: PUSH
63399: LD_INT 4
63401: STR
63402: PUSH
63403: LD_STRING ,
63405: STR
63406: PUSH
63407: LD_INT 3
63409: STR
63410: PUSH
63411: LD_STRING )
63413: STR
63414: PPUSH
63415: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63419: LD_STRING setSpecLogoNumber(
63421: PUSH
63422: LD_INT 5
63424: STR
63425: PUSH
63426: LD_STRING ,
63428: STR
63429: PUSH
63430: LD_INT 4
63432: STR
63433: PUSH
63434: LD_STRING )
63436: STR
63437: PPUSH
63438: CALL_OW 559
// end ;
63442: LD_VAR 0 1
63446: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63447: LD_INT 0
63449: PPUSH
63450: PPUSH
63451: PPUSH
63452: PPUSH
63453: PPUSH
63454: PPUSH
63455: PPUSH
63456: PPUSH
63457: PPUSH
// for i := 1 to 8 do
63458: LD_ADDR_VAR 0 2
63462: PUSH
63463: DOUBLE
63464: LD_INT 1
63466: DEC
63467: ST_TO_ADDR
63468: LD_INT 8
63470: PUSH
63471: FOR_TO
63472: IFFALSE 63857
// begin if mpSidePositions [ i ] then
63474: LD_EXP 7
63478: PUSH
63479: LD_VAR 0 2
63483: ARRAY
63484: IFFALSE 63855
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63486: LD_ADDR_VAR 0 7
63490: PUSH
63491: LD_INT 22
63493: PUSH
63494: LD_VAR 0 2
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 21
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PPUSH
63517: CALL_OW 69
63521: PPUSH
63522: CALL 13562 0 1
63526: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63527: LD_ADDR_VAR 0 9
63531: PUSH
63532: LD_INT 22
63534: PUSH
63535: LD_VAR 0 2
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 2
63546: PUSH
63547: LD_INT 30
63549: PUSH
63550: LD_INT 0
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 30
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: LIST
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PPUSH
63576: CALL_OW 69
63580: ST_TO_ADDR
// crates := 0 ;
63581: LD_ADDR_VAR 0 4
63585: PUSH
63586: LD_INT 0
63588: ST_TO_ADDR
// oil := 0 ;
63589: LD_ADDR_VAR 0 5
63593: PUSH
63594: LD_INT 0
63596: ST_TO_ADDR
// sib := 0 ;
63597: LD_ADDR_VAR 0 6
63601: PUSH
63602: LD_INT 0
63604: ST_TO_ADDR
// if bases then
63605: LD_VAR 0 9
63609: IFFALSE 63715
// begin for j in bases do
63611: LD_ADDR_VAR 0 3
63615: PUSH
63616: LD_VAR 0 9
63620: PUSH
63621: FOR_IN
63622: IFFALSE 63713
// begin base := GetBase ( j ) ;
63624: LD_ADDR_VAR 0 8
63628: PUSH
63629: LD_VAR 0 3
63633: PPUSH
63634: CALL_OW 274
63638: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63639: LD_ADDR_VAR 0 4
63643: PUSH
63644: LD_VAR 0 4
63648: PUSH
63649: LD_VAR 0 8
63653: PPUSH
63654: LD_INT 1
63656: PPUSH
63657: CALL_OW 275
63661: PLUS
63662: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63663: LD_ADDR_VAR 0 5
63667: PUSH
63668: LD_VAR 0 5
63672: PUSH
63673: LD_VAR 0 8
63677: PPUSH
63678: LD_INT 2
63680: PPUSH
63681: CALL_OW 275
63685: PLUS
63686: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63687: LD_ADDR_VAR 0 6
63691: PUSH
63692: LD_VAR 0 6
63696: PUSH
63697: LD_VAR 0 8
63701: PPUSH
63702: LD_INT 3
63704: PPUSH
63705: CALL_OW 275
63709: PLUS
63710: ST_TO_ADDR
// end ;
63711: GO 63621
63713: POP
63714: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63715: LD_STRING setSpecText(
63717: PUSH
63718: LD_VAR 0 2
63722: STR
63723: PUSH
63724: LD_STRING ,
63726: STR
63727: PUSH
63728: LD_INT 2
63730: STR
63731: PUSH
63732: LD_STRING ,
63734: STR
63735: PUSH
63736: LD_VAR 0 4
63740: STR
63741: PUSH
63742: LD_STRING )
63744: STR
63745: PPUSH
63746: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63750: LD_STRING setSpecText(
63752: PUSH
63753: LD_VAR 0 2
63757: STR
63758: PUSH
63759: LD_STRING ,
63761: STR
63762: PUSH
63763: LD_INT 3
63765: STR
63766: PUSH
63767: LD_STRING ,
63769: STR
63770: PUSH
63771: LD_VAR 0 5
63775: STR
63776: PUSH
63777: LD_STRING )
63779: STR
63780: PPUSH
63781: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63785: LD_STRING setSpecText(
63787: PUSH
63788: LD_VAR 0 2
63792: STR
63793: PUSH
63794: LD_STRING ,
63796: STR
63797: PUSH
63798: LD_INT 4
63800: STR
63801: PUSH
63802: LD_STRING ,
63804: STR
63805: PUSH
63806: LD_VAR 0 6
63810: STR
63811: PUSH
63812: LD_STRING )
63814: STR
63815: PPUSH
63816: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63820: LD_STRING setSpecText(
63822: PUSH
63823: LD_VAR 0 2
63827: STR
63828: PUSH
63829: LD_STRING ,
63831: STR
63832: PUSH
63833: LD_INT 5
63835: STR
63836: PUSH
63837: LD_STRING ,
63839: STR
63840: PUSH
63841: LD_VAR 0 7
63845: STR
63846: PUSH
63847: LD_STRING )
63849: STR
63850: PPUSH
63851: CALL_OW 559
// end ; end ;
63855: GO 63471
63857: POP
63858: POP
// end ;
63859: LD_VAR 0 1
63863: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63864: LD_INT 2
63866: PUSH
63867: LD_INT 30
63869: PUSH
63870: LD_INT 0
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 30
63879: PUSH
63880: LD_INT 1
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: LIST
63891: PPUSH
63892: CALL_OW 69
63896: IFFALSE 63906
63898: GO 63900
63900: DISABLE
// begin enable ;
63901: ENABLE
// UpdateSpectatorBar ;
63902: CALL 63447 0 0
// end ;
63906: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63907: LD_INT 0
63909: PPUSH
// end ;
63910: LD_VAR 0 12
63914: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63915: LD_INT 0
63917: PPUSH
63918: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63919: LD_VAR 0 1
63923: NOT
63924: IFTRUE 63943
63926: PUSH
63927: LD_VAR 0 2
63931: PPUSH
63932: LD_VAR 0 3
63936: PPUSH
63937: CALL_OW 488
63941: NOT
63942: OR
63943: IFTRUE 63978
63945: PUSH
63946: LD_VAR 0 1
63950: PPUSH
63951: CALL_OW 266
63955: PUSH
63956: LD_INT 3
63958: NONEQUAL
63959: IFFALSE 63977
63961: PUSH
63962: LD_VAR 0 1
63966: PPUSH
63967: CALL_OW 247
63971: PUSH
63972: LD_INT 1
63974: EQUAL
63975: NOT
63976: AND
63977: OR
63978: IFFALSE 63982
// exit ;
63980: GO 64264
// if GetType ( factory ) = unit_human then
63982: LD_VAR 0 1
63986: PPUSH
63987: CALL_OW 247
63991: PUSH
63992: LD_INT 1
63994: EQUAL
63995: IFFALSE 64012
// factory := IsInUnit ( factory ) ;
63997: LD_ADDR_VAR 0 1
64001: PUSH
64002: LD_VAR 0 1
64006: PPUSH
64007: CALL_OW 310
64011: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64012: LD_VAR 0 1
64016: PPUSH
64017: CALL_OW 266
64021: PUSH
64022: LD_INT 3
64024: NONEQUAL
64025: IFFALSE 64029
// exit ;
64027: GO 64264
// for i := 1 to Count ( factoryWaypoints ) do
64029: LD_ADDR_VAR 0 5
64033: PUSH
64034: DOUBLE
64035: LD_INT 1
64037: DEC
64038: ST_TO_ADDR
64039: LD_EXP 61
64043: PPUSH
64044: CALL 13562 0 1
64048: PUSH
64049: FOR_TO
64050: IFFALSE 64212
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64052: LD_VAR 0 2
64056: PPUSH
64057: LD_VAR 0 3
64061: PPUSH
64062: CALL_OW 428
64066: PUSH
64067: LD_EXP 61
64071: PUSH
64072: LD_VAR 0 5
64076: ARRAY
64077: PUSH
64078: LD_INT 2
64080: ARRAY
64081: EQUAL
64082: IFFALSE 64114
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64084: LD_ADDR_EXP 61
64088: PUSH
64089: LD_EXP 61
64093: PPUSH
64094: LD_VAR 0 5
64098: PPUSH
64099: CALL_OW 3
64103: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64104: CALL 64269 0 0
// exit ;
64108: POP
64109: POP
64110: GO 64264
// end else
64112: GO 64210
// if factory = factoryWaypoints [ i ] [ 2 ] then
64114: LD_VAR 0 1
64118: PUSH
64119: LD_EXP 61
64123: PUSH
64124: LD_VAR 0 5
64128: ARRAY
64129: PUSH
64130: LD_INT 2
64132: ARRAY
64133: EQUAL
64134: IFFALSE 64210
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64136: LD_ADDR_EXP 61
64140: PUSH
64141: LD_EXP 61
64145: PPUSH
64146: LD_VAR 0 5
64150: PPUSH
64151: CALL_OW 3
64155: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64156: LD_ADDR_EXP 61
64160: PUSH
64161: LD_EXP 61
64165: PPUSH
64166: LD_VAR 0 1
64170: PPUSH
64171: CALL_OW 255
64175: PUSH
64176: LD_VAR 0 1
64180: PUSH
64181: LD_VAR 0 2
64185: PUSH
64186: LD_VAR 0 3
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: PPUSH
64197: CALL 49538 0 2
64201: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64202: CALL 64269 0 0
// exit ;
64206: POP
64207: POP
64208: GO 64264
// end ; end ;
64210: GO 64049
64212: POP
64213: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64214: LD_ADDR_EXP 61
64218: PUSH
64219: LD_EXP 61
64223: PPUSH
64224: LD_VAR 0 1
64228: PPUSH
64229: CALL_OW 255
64233: PUSH
64234: LD_VAR 0 1
64238: PUSH
64239: LD_VAR 0 2
64243: PUSH
64244: LD_VAR 0 3
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: PPUSH
64255: CALL 49538 0 2
64259: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64260: CALL 64269 0 0
// end ;
64264: LD_VAR 0 4
64268: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64269: LD_INT 0
64271: PPUSH
64272: PPUSH
64273: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64274: LD_STRING resetFactoryWaypoint();
64276: PPUSH
64277: CALL_OW 559
// if factoryWaypoints then
64281: LD_EXP 61
64285: IFFALSE 64406
// begin list := factoryWaypoints ;
64287: LD_ADDR_VAR 0 3
64291: PUSH
64292: LD_EXP 61
64296: ST_TO_ADDR
// for i := 1 to list do
64297: LD_ADDR_VAR 0 2
64301: PUSH
64302: DOUBLE
64303: LD_INT 1
64305: DEC
64306: ST_TO_ADDR
64307: LD_VAR 0 3
64311: PUSH
64312: FOR_TO
64313: IFFALSE 64404
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64315: LD_STRING setFactoryWaypointXY(
64317: PUSH
64318: LD_VAR 0 3
64322: PUSH
64323: LD_VAR 0 2
64327: ARRAY
64328: PUSH
64329: LD_INT 1
64331: ARRAY
64332: STR
64333: PUSH
64334: LD_STRING ,
64336: STR
64337: PUSH
64338: LD_VAR 0 3
64342: PUSH
64343: LD_VAR 0 2
64347: ARRAY
64348: PUSH
64349: LD_INT 2
64351: ARRAY
64352: STR
64353: PUSH
64354: LD_STRING ,
64356: STR
64357: PUSH
64358: LD_VAR 0 3
64362: PUSH
64363: LD_VAR 0 2
64367: ARRAY
64368: PUSH
64369: LD_INT 3
64371: ARRAY
64372: STR
64373: PUSH
64374: LD_STRING ,
64376: STR
64377: PUSH
64378: LD_VAR 0 3
64382: PUSH
64383: LD_VAR 0 2
64387: ARRAY
64388: PUSH
64389: LD_INT 4
64391: ARRAY
64392: STR
64393: PUSH
64394: LD_STRING )
64396: STR
64397: PPUSH
64398: CALL_OW 559
64402: GO 64312
64404: POP
64405: POP
// end ; end ;
64406: LD_VAR 0 1
64410: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64411: LD_INT 0
64413: PPUSH
// if HexInfo ( x , y ) = warehouse then
64414: LD_VAR 0 2
64418: PPUSH
64419: LD_VAR 0 3
64423: PPUSH
64424: CALL_OW 428
64428: PUSH
64429: LD_VAR 0 1
64433: EQUAL
64434: IFFALSE 64461
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64436: LD_ADDR_EXP 63
64440: PUSH
64441: LD_EXP 63
64445: PPUSH
64446: LD_VAR 0 1
64450: PPUSH
64451: LD_INT 0
64453: PPUSH
64454: CALL_OW 1
64458: ST_TO_ADDR
64459: GO 64512
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64461: LD_ADDR_EXP 63
64465: PUSH
64466: LD_EXP 63
64470: PPUSH
64471: LD_VAR 0 1
64475: PPUSH
64476: LD_VAR 0 1
64480: PPUSH
64481: CALL_OW 255
64485: PUSH
64486: LD_VAR 0 1
64490: PUSH
64491: LD_VAR 0 2
64495: PUSH
64496: LD_VAR 0 3
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: PPUSH
64507: CALL_OW 1
64511: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64512: CALL 64521 0 0
// end ;
64516: LD_VAR 0 4
64520: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64521: LD_INT 0
64523: PPUSH
64524: PPUSH
64525: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64526: LD_STRING resetWarehouseGatheringPoints();
64528: PPUSH
64529: CALL_OW 559
// if warehouseGatheringPoints then
64533: LD_EXP 63
64537: IFFALSE 64663
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64539: LD_ADDR_VAR 0 3
64543: PUSH
64544: LD_EXP 63
64548: PPUSH
64549: CALL 53472 0 1
64553: ST_TO_ADDR
// for i := 1 to list do
64554: LD_ADDR_VAR 0 2
64558: PUSH
64559: DOUBLE
64560: LD_INT 1
64562: DEC
64563: ST_TO_ADDR
64564: LD_VAR 0 3
64568: PUSH
64569: FOR_TO
64570: IFFALSE 64661
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64572: LD_STRING setWarehouseGatheringPointXY(
64574: PUSH
64575: LD_VAR 0 3
64579: PUSH
64580: LD_VAR 0 2
64584: ARRAY
64585: PUSH
64586: LD_INT 1
64588: ARRAY
64589: STR
64590: PUSH
64591: LD_STRING ,
64593: STR
64594: PUSH
64595: LD_VAR 0 3
64599: PUSH
64600: LD_VAR 0 2
64604: ARRAY
64605: PUSH
64606: LD_INT 2
64608: ARRAY
64609: STR
64610: PUSH
64611: LD_STRING ,
64613: STR
64614: PUSH
64615: LD_VAR 0 3
64619: PUSH
64620: LD_VAR 0 2
64624: ARRAY
64625: PUSH
64626: LD_INT 3
64628: ARRAY
64629: STR
64630: PUSH
64631: LD_STRING ,
64633: STR
64634: PUSH
64635: LD_VAR 0 3
64639: PUSH
64640: LD_VAR 0 2
64644: ARRAY
64645: PUSH
64646: LD_INT 4
64648: ARRAY
64649: STR
64650: PUSH
64651: LD_STRING )
64653: STR
64654: PPUSH
64655: CALL_OW 559
64659: GO 64569
64661: POP
64662: POP
// end ; end ;
64663: LD_VAR 0 1
64667: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64668: LD_INT 0
64670: PPUSH
64671: PPUSH
// if not mpSidePositions then
64672: LD_EXP 7
64676: NOT
64677: IFFALSE 64681
// exit ;
64679: GO 64752
// result :=  ;
64681: LD_ADDR_VAR 0 1
64685: PUSH
64686: LD_STRING 
64688: ST_TO_ADDR
// for i := 1 to 8 do
64689: LD_ADDR_VAR 0 2
64693: PUSH
64694: DOUBLE
64695: LD_INT 1
64697: DEC
64698: ST_TO_ADDR
64699: LD_INT 8
64701: PUSH
64702: FOR_TO
64703: IFFALSE 64733
// begin result := result & mpSidePositions [ i ] & ; ;
64705: LD_ADDR_VAR 0 1
64709: PUSH
64710: LD_VAR 0 1
64714: PUSH
64715: LD_EXP 7
64719: PUSH
64720: LD_VAR 0 2
64724: ARRAY
64725: STR
64726: PUSH
64727: LD_STRING ;
64729: STR
64730: ST_TO_ADDR
// end ;
64731: GO 64702
64733: POP
64734: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64735: LD_STRING setMultiplayerRealPosition("
64737: PUSH
64738: LD_VAR 0 1
64742: STR
64743: PUSH
64744: LD_STRING ");
64746: STR
64747: PPUSH
64748: CALL_OW 559
// end ; end_of_file
64752: LD_VAR 0 1
64756: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalH do var i ;
64757: LD_EXP 39
64761: IFFALSE 64804
64763: GO 64765
64765: DISABLE
64766: LD_INT 0
64768: PPUSH
// begin for i := 1 to 8 do
64769: LD_ADDR_VAR 0 1
64773: PUSH
64774: DOUBLE
64775: LD_INT 1
64777: DEC
64778: ST_TO_ADDR
64779: LD_INT 8
64781: PUSH
64782: FOR_TO
64783: IFFALSE 64802
// SetRestrict ( b_depot , i , state_disabled ) ;
64785: LD_INT 0
64787: PPUSH
64788: LD_VAR 0 1
64792: PPUSH
64793: LD_INT 0
64795: PPUSH
64796: CALL_OW 324
64800: GO 64782
64802: POP
64803: POP
// end ;
64804: PPOPN 1
64806: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalH do var i , canWin ;
64807: LD_EXP 39
64811: IFFALSE 64819
64813: PUSH
64814: CALL 65029 0 0
64818: AND
64819: IFFALSE 64827
64821: PUSH
64822: LD_OWVAR 4
64826: AND
64827: IFFALSE 65026
64829: GO 64831
64831: DISABLE
64832: LD_INT 0
64834: PPUSH
64835: PPUSH
// begin canWin := false ;
64836: LD_ADDR_VAR 0 2
64840: PUSH
64841: LD_INT 0
64843: ST_TO_ADDR
// if not HasPower ( your_side ) then
64844: LD_OWVAR 2
64848: PPUSH
64849: CALL 65071 0 1
64853: NOT
64854: IFFALSE 64865
// begin Multiplayer_Loose_Message ;
64856: CALL_OW 521
// enable ( mpLose ) ;
64860: LD_INT 102
64862: ENABLE_MARKED
// end else
64863: GO 65026
// begin canWin := true ;
64865: LD_ADDR_VAR 0 2
64869: PUSH
64870: LD_INT 1
64872: ST_TO_ADDR
// for i := 1 to 8 do
64873: LD_ADDR_VAR 0 1
64877: PUSH
64878: DOUBLE
64879: LD_INT 1
64881: DEC
64882: ST_TO_ADDR
64883: LD_INT 8
64885: PUSH
64886: FOR_TO
64887: IFFALSE 65012
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
64889: LD_EXP 7
64893: PUSH
64894: LD_VAR 0 1
64898: ARRAY
64899: IFFALSE 64912
64901: PUSH
64902: LD_VAR 0 1
64906: PPUSH
64907: CALL_OW 108
64911: AND
64912: IFFALSE 64926
64914: PUSH
64915: LD_VAR 0 1
64919: PUSH
64920: LD_OWVAR 2
64924: NONEQUAL
64925: AND
64926: IFFALSE 65010
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
64928: LD_EXP 8
64932: PUSH
64933: LD_VAR 0 1
64937: ARRAY
64938: NOT
64939: IFTRUE 64987
64941: PUSH
64942: LD_EXP 8
64946: PUSH
64947: LD_VAR 0 1
64951: ARRAY
64952: PUSH
64953: LD_EXP 8
64957: PUSH
64958: LD_OWVAR 2
64962: ARRAY
64963: NONEQUAL
64964: IFFALSE 64986
64966: PUSH
64967: LD_OWVAR 2
64971: PPUSH
64972: LD_VAR 0 1
64976: PPUSH
64977: CALL_OW 81
64981: PUSH
64982: LD_INT 1
64984: NONEQUAL
64985: AND
64986: OR
64987: IFFALSE 65010
// if HasPower ( i ) then
64989: LD_VAR 0 1
64993: PPUSH
64994: CALL 65071 0 1
64998: IFFALSE 65010
// begin canWin := false ;
65000: LD_ADDR_VAR 0 2
65004: PUSH
65005: LD_INT 0
65007: ST_TO_ADDR
// break ;
65008: GO 65012
// end ;
65010: GO 64886
65012: POP
65013: POP
// if canWin then
65014: LD_VAR 0 2
65018: IFFALSE 65025
// enable ( mpWin ) else
65020: LD_INT 101
65022: ENABLE_MARKED
65023: GO 65026
// enable ;
65025: ENABLE
// end ; end ;
65026: PPOPN 2
65028: END
// function CanWinLoose ; begin
65029: LD_INT 0
65031: PPUSH
// result := true ;
65032: LD_ADDR_VAR 0 1
65036: PUSH
65037: LD_INT 1
65039: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
65040: CALL_OW 531
65044: IFFALSE 65056
65046: PUSH
65047: CALL_OW 519
65051: PUSH
65052: LD_INT 1
65054: GREATER
65055: AND
65056: IFFALSE 65066
// result := false ;
65058: LD_ADDR_VAR 0 1
65062: PUSH
65063: LD_INT 0
65065: ST_TO_ADDR
// end ;
65066: LD_VAR 0 1
65070: RET
// function HasPower ( i ) ; begin
65071: LD_INT 0
65073: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
65074: LD_INT 22
65076: PUSH
65077: LD_VAR 0 1
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 2
65088: PUSH
65089: LD_INT 30
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 30
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: LIST
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PPUSH
65118: CALL_OW 69
65122: NOT
65123: IFFALSE 65127
// exit ;
65125: GO 65192
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
65127: LD_ADDR_VAR 0 2
65131: PUSH
65132: LD_INT 22
65134: PUSH
65135: LD_VAR 0 1
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 2
65146: PUSH
65147: LD_INT 21
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 33
65159: PUSH
65160: LD_INT 3
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 33
65169: PUSH
65170: LD_INT 5
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PPUSH
65187: CALL_OW 69
65191: ST_TO_ADDR
// end ;
65192: LD_VAR 0 2
65196: RET
