// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2972 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3318 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 10 10$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 21000
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 200 , 260 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 200
 823: PUSH
 824: LD_INT 260
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 51
 852: PUSH
 853: LD_INT 52
 855: PUSH
 856: LD_INT 53
 858: PUSH
 859: LD_INT 54
 861: PUSH
 862: LD_INT 55
 864: PUSH
 865: LD_INT 56
 867: PUSH
 868: LD_INT 57
 870: PUSH
 871: LD_INT 58
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 70
 891: PUSH
 892: LD_INT 71
 894: PUSH
 895: LD_INT 72
 897: PUSH
 898: LD_INT 73
 900: PUSH
 901: LD_INT 68
 903: PUSH
 904: LD_INT 69
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingArea ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 49
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 33
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 35
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 32
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 33
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 35
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 34
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 31
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 60
1364: PUSH
1365: LD_INT 61
1367: PUSH
1368: LD_INT 62
1370: PUSH
1371: LD_INT 63
1373: PUSH
1374: LD_INT 64
1376: PUSH
1377: LD_INT 65
1379: PUSH
1380: LD_INT 66
1382: PUSH
1383: LD_INT 67
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 1
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 58975 0 2
1411: PUSH
1412: LD_INT 2
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 58975 0 2
1422: PUSH
1423: LD_INT 3
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL 58975 0 2
1433: PUSH
1434: LD_INT 4
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: CALL 58975 0 2
1444: PUSH
1445: LD_INT 5
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL 58975 0 2
1455: PUSH
1456: LD_INT 6
1458: PPUSH
1459: LD_INT 5
1461: PPUSH
1462: CALL 58975 0 2
1466: PUSH
1467: LD_INT 7
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL 58975 0 2
1477: PUSH
1478: LD_INT 8
1480: PPUSH
1481: LD_INT 1
1483: PPUSH
1484: CALL 58975 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 18821 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 9
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 58808 0 2
1667: PUSH
1668: LD_INT 10
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 58808 0 2
1680: PUSH
1681: LD_INT 11
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 58808 0 2
1693: PUSH
1694: LD_INT 12
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 58808 0 2
1706: PUSH
1707: LD_INT 13
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 58808 0 2
1719: PUSH
1720: LD_INT 14
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 58808 0 2
1732: PUSH
1733: LD_INT 15
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 58808 0 2
1745: PUSH
1746: LD_INT 16
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 58808 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 17
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 58808 0 2
1810: PUSH
1811: LD_INT 18
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 58808 0 2
1823: PUSH
1824: LD_INT 19
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 58808 0 2
1836: PUSH
1837: LD_INT 20
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 58808 0 2
1849: PUSH
1850: LD_INT 21
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 58808 0 2
1862: PUSH
1863: LD_INT 22
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 58808 0 2
1875: PUSH
1876: LD_INT 23
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 58808 0 2
1888: PUSH
1889: LD_INT 24
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 58808 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 25
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 58975 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 26
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 58975 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 41
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 58975 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 27
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: CALL 58975 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 28
2017: PPUSH
2018: LD_INT 4
2020: PPUSH
2021: CALL 58975 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 42
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL 58975 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 29
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 58975 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 30
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL 58975 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 43
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 58975 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 31
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 58975 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 32
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL 58975 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 44
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 58975 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 33
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: CALL 58975 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 34
2167: PPUSH
2168: LD_INT 2
2170: PPUSH
2171: CALL 58975 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 45
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: CALL 58975 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 35
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL 58975 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 36
2217: PPUSH
2218: LD_INT 4
2220: PPUSH
2221: CALL 58975 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 46
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL 58975 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 37
2252: PPUSH
2253: LD_INT 3
2255: PPUSH
2256: CALL 58975 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 38
2267: PPUSH
2268: LD_INT 4
2270: PPUSH
2271: CALL 58975 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 47
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: CALL 58975 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 39
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL 58975 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 40
2317: PPUSH
2318: LD_INT 3
2320: PPUSH
2321: CALL 58975 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 48
2332: PPUSH
2333: LD_INT 4
2335: PPUSH
2336: CALL 58975 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2885
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 70
2569: PUSH
2570: LD_INT 71
2572: PUSH
2573: LD_INT 72
2575: PUSH
2576: LD_INT 73
2578: PUSH
2579: LD_INT 68
2581: PUSH
2582: LD_INT 69
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 51
2600: PUSH
2601: LD_INT 52
2603: PUSH
2604: LD_INT 53
2606: PUSH
2607: LD_INT 54
2609: PUSH
2610: LD_INT 55
2612: PUSH
2613: LD_INT 56
2615: PUSH
2616: LD_INT 57
2618: PUSH
2619: LD_INT 58
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// x := 1 ;
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// repeat wait ( time ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: CALL_OW 67
// x := Inc ( x ) ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 55791 0 1
2726: ST_TO_ADDR
// if x > 5 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 5
2734: GREATER
2735: IFFALSE 2745
// x := 1 ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// if GetResourceArea ( center3 , mat_cans ) < 15 then
2745: LD_INT 74
2747: PPUSH
2748: LD_INT 1
2750: PPUSH
2751: CALL_OW 287
2755: PUSH
2756: LD_INT 15
2758: LESS
2759: IFFALSE 2791
// begin CreateCratesArea ( x , center3 , true ) ;
2761: LD_VAR 0 2
2765: PPUSH
2766: LD_INT 74
2768: PPUSH
2769: LD_INT 1
2771: PPUSH
2772: CALL_OW 55
// CreateCratesArea ( x , center3 , true ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_INT 74
2783: PPUSH
2784: LD_INT 1
2786: PPUSH
2787: CALL_OW 55
// end ; for i in areas do
2791: LD_ADDR_VAR 0 1
2795: PUSH
2796: LD_VAR 0 4
2800: PUSH
2801: FOR_IN
2802: IFFALSE 2841
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2804: LD_VAR 0 1
2808: PPUSH
2809: LD_INT 1
2811: PPUSH
2812: CALL_OW 287
2816: PUSH
2817: LD_INT 20
2819: LESS
2820: IFFALSE 2839
// begin CreateCratesArea ( x , i , true ) ;
2822: LD_VAR 0 2
2826: PPUSH
2827: LD_VAR 0 1
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: CALL_OW 55
// end ; end ;
2839: GO 2801
2841: POP
2842: POP
// time := time + delayTime ;
2843: LD_ADDR_VAR 0 5
2847: PUSH
2848: LD_VAR 0 5
2852: PUSH
2853: LD_VAR 0 7
2857: PLUS
2858: ST_TO_ADDR
// if time > maxTime then
2859: LD_VAR 0 5
2863: PUSH
2864: LD_VAR 0 8
2868: GREATER
2869: IFFALSE 2881
// time := normalTime ;
2871: LD_ADDR_VAR 0 5
2875: PUSH
2876: LD_VAR 0 6
2880: ST_TO_ADDR
// until false ;
2881: LD_INT 0
2883: IFFALSE 2703
// end ; end_of_file
2885: PPOPN 8
2887: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2888: LD_VAR 0 1
2892: PPUSH
2893: CALL 11271 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2897: LD_VAR 0 1
2901: PPUSH
2902: CALL 7916 0 1
// end ;
2906: PPOPN 1
2908: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL 11288 0 1
// end ;
2918: PPOPN 1
2920: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2921: LD_VAR 0 1
2925: PPUSH
2926: CALL 8581 0 1
2930: PPOPN 1
2932: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2933: LD_VAR 0 1
2937: PPUSH
2938: LD_VAR 0 2
2942: PPUSH
2943: CALL 11329 0 2
2947: PPOPN 2
2949: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2950: LD_VAR 0 1
2954: PPUSH
2955: LD_VAR 0 2
2959: PPUSH
2960: LD_VAR 0 3
2964: PPUSH
2965: CALL 8634 0 3
2969: PPOPN 3
2971: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2972: LD_INT 0
2974: PPUSH
2975: PPUSH
// disable ( mpActive ) ;
2976: LD_INT 100
2978: DISABLE_MARKED
// disable ( mpWin ) ;
2979: LD_INT 101
2981: DISABLE_MARKED
// disable ( mpLose ) ;
2982: LD_INT 102
2984: DISABLE_MARKED
// mpGameType := 0 ;
2985: LD_ADDR_EXP 1
2989: PUSH
2990: LD_INT 0
2992: ST_TO_ADDR
// mpGameSettings := [ ] ;
2993: LD_ADDR_EXP 4
2997: PUSH
2998: EMPTY
2999: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
3000: LD_ADDR_EXP 2
3004: PUSH
3005: EMPTY
3006: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
3007: LD_ADDR_EXP 3
3011: PUSH
3012: EMPTY
3013: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
3014: LD_ADDR_EXP 27
3018: PUSH
3019: LD_INT 2
3021: PUSH
3022: LD_INT 2
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: ST_TO_ADDR
// mpOilDeposits := [ ] ;
3029: LD_ADDR_EXP 10
3033: PUSH
3034: EMPTY
3035: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3036: LD_ADDR_EXP 11
3040: PUSH
3041: EMPTY
3042: ST_TO_ADDR
// mpDepots := [ ] ;
3043: LD_ADDR_EXP 12
3047: PUSH
3048: EMPTY
3049: ST_TO_ADDR
// mpBuildings := [ ] ;
3050: LD_ADDR_EXP 15
3054: PUSH
3055: EMPTY
3056: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3057: LD_ADDR_EXP 16
3061: PUSH
3062: EMPTY
3063: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3064: LD_ADDR_EXP 17
3068: PUSH
3069: EMPTY
3070: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3071: LD_ADDR_EXP 18
3075: PUSH
3076: EMPTY
3077: ST_TO_ADDR
// mpStartingResources := [ ] ;
3078: LD_ADDR_EXP 13
3082: PUSH
3083: EMPTY
3084: ST_TO_ADDR
// mpStartPos := [ ] ;
3085: LD_ADDR_EXP 19
3089: PUSH
3090: EMPTY
3091: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3092: LD_ADDR_EXP 20
3096: PUSH
3097: LD_INT 1
3099: NEG
3100: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3101: LD_ADDR_EXP 21
3105: PUSH
3106: EMPTY
3107: ST_TO_ADDR
// mpApemans := [ ] ;
3108: LD_ADDR_EXP 28
3112: PUSH
3113: EMPTY
3114: ST_TO_ADDR
// mpApemansArea := [ ] ;
3115: LD_ADDR_EXP 29
3119: PUSH
3120: EMPTY
3121: ST_TO_ADDR
// mpRespawn := [ ] ;
3122: LD_ADDR_EXP 31
3126: PUSH
3127: EMPTY
3128: ST_TO_ADDR
// mpKingArea := 0 ;
3129: LD_ADDR_EXP 32
3133: PUSH
3134: LD_INT 0
3136: ST_TO_ADDR
// mpPoints := [ ] ;
3137: LD_ADDR_EXP 33
3141: PUSH
3142: EMPTY
3143: ST_TO_ADDR
// mpVehicles := 0 ;
3144: LD_ADDR_EXP 34
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// mpShipments := 0 ;
3152: LD_ADDR_EXP 25
3156: PUSH
3157: LD_INT 0
3159: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3160: LD_ADDR_EXP 38
3164: PUSH
3165: EMPTY
3166: PUSH
3167: EMPTY
3168: PUSH
3169: EMPTY
3170: PUSH
3171: EMPTY
3172: PUSH
3173: EMPTY
3174: PUSH
3175: EMPTY
3176: PUSH
3177: EMPTY
3178: PUSH
3179: EMPTY
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3191: LD_ADDR_EXP 30
3195: PUSH
3196: EMPTY
3197: PUSH
3198: EMPTY
3199: PUSH
3200: EMPTY
3201: PUSH
3202: EMPTY
3203: PUSH
3204: EMPTY
3205: PUSH
3206: EMPTY
3207: PUSH
3208: EMPTY
3209: PUSH
3210: EMPTY
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: ST_TO_ADDR
// mpEmissions := 0 ;
3222: LD_ADDR_EXP 35
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3230: LD_ADDR_EXP 23
3234: PUSH
3235: LD_INT 3
3237: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3238: LD_ADDR_EXP 22
3242: PUSH
3243: LD_INT 15
3245: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3246: LD_ADDR_EXP 36
3250: PUSH
3251: LD_INT 0
3253: ST_TO_ADDR
// mpGameActive := false ;
3254: LD_ADDR_EXP 37
3258: PUSH
3259: LD_INT 0
3261: ST_TO_ADDR
// mpBlockRespThread := false ;
3262: LD_ADDR_EXP 39
3266: PUSH
3267: LD_INT 0
3269: ST_TO_ADDR
// for i := 1 to 32 do
3270: LD_ADDR_VAR 0 2
3274: PUSH
3275: DOUBLE
3276: LD_INT 1
3278: DEC
3279: ST_TO_ADDR
3280: LD_INT 32
3282: PUSH
3283: FOR_TO
3284: IFFALSE 3311
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3286: LD_ADDR_EXP 4
3290: PUSH
3291: LD_EXP 4
3295: PPUSH
3296: LD_VAR 0 2
3300: PPUSH
3301: LD_INT 0
3303: PPUSH
3304: CALL_OW 1
3308: ST_TO_ADDR
3309: GO 3283
3311: POP
3312: POP
// end ;
3313: LD_VAR 0 1
3317: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3318: LD_INT 0
3320: PPUSH
3321: PPUSH
3322: PPUSH
3323: PPUSH
3324: PPUSH
3325: PPUSH
3326: PPUSH
3327: PPUSH
3328: PPUSH
3329: PPUSH
3330: PPUSH
3331: PPUSH
3332: PPUSH
3333: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3334: LD_ADDR_VAR 0 14
3338: PUSH
3339: LD_INT 1
3341: PUSH
3342: LD_INT 2
3344: PUSH
3345: LD_INT 3
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: LIST
3352: ST_TO_ADDR
// for i in gameTypes do
3353: LD_ADDR_VAR 0 2
3357: PUSH
3358: LD_VAR 0 14
3362: PUSH
3363: FOR_IN
3364: IFFALSE 3373
// disable ( i ) ;
3366: LD_VAR 0 2
3370: DISABLE_MARKED
3371: GO 3363
3373: POP
3374: POP
// if Multiplayer then
3375: LD_OWVAR 4
3379: IFFALSE 3563
// begin mpGameType := mp_game_type ;
3381: LD_ADDR_EXP 1
3385: PUSH
3386: LD_OWVAR 6
3390: ST_TO_ADDR
// your_side := mp_player_side ;
3391: LD_ADDR_OWVAR 2
3395: PUSH
3396: LD_OWVAR 7
3400: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3401: LD_ADDR_EXP 5
3405: PUSH
3406: LD_OWVAR 17
3410: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3411: LD_ADDR_EXP 6
3415: PUSH
3416: LD_OWVAR 15
3420: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3421: LD_ADDR_EXP 7
3425: PUSH
3426: LD_OWVAR 16
3430: ST_TO_ADDR
// mpTeams := mp_teams ;
3431: LD_ADDR_EXP 8
3435: PUSH
3436: LD_OWVAR 12
3440: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3441: LD_ADDR_VAR 0 2
3445: PUSH
3446: DOUBLE
3447: LD_INT 1
3449: DEC
3450: ST_TO_ADDR
3451: LD_EXP 2
3455: PPUSH
3456: CALL 18821 0 1
3460: PUSH
3461: FOR_TO
3462: IFFALSE 3538
// begin setting := mpGameSettingsKeys [ i ] ;
3464: LD_ADDR_VAR 0 12
3468: PUSH
3469: LD_EXP 2
3473: PUSH
3474: LD_VAR 0 2
3478: ARRAY
3479: ST_TO_ADDR
// if setting then
3480: LD_VAR 0 12
3484: IFFALSE 3536
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3486: LD_ADDR_EXP 4
3490: PUSH
3491: LD_EXP 4
3495: PPUSH
3496: LD_VAR 0 2
3500: PPUSH
3501: LD_EXP 3
3505: PUSH
3506: LD_VAR 0 2
3510: ARRAY
3511: PUSH
3512: LD_VAR 0 2
3516: PUSH
3517: LD_INT 1
3519: MINUS
3520: PPUSH
3521: CALL_OW 426
3525: PUSH
3526: LD_INT 1
3528: PLUS
3529: ARRAY
3530: PPUSH
3531: CALL_OW 1
3535: ST_TO_ADDR
// end ;
3536: GO 3461
3538: POP
3539: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3540: LD_ADDR_EXP 9
3544: PUSH
3545: LD_EXP 6
3549: PUSH
3550: LD_INT 0
3552: PUSH
3553: EMPTY
3554: LIST
3555: DIFF
3556: PUSH
3557: LD_INT 1
3559: GREATER
3560: ST_TO_ADDR
// end else
3561: GO 3563
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3563: LD_EXP 1
3567: PPUSH
3568: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
3572: LD_EXP 16
3576: PPUSH
3577: CALL 18821 0 1
3581: IFFALSE 3612
// begin for i in mpMarkedAreas do
3583: LD_ADDR_VAR 0 2
3587: PUSH
3588: LD_EXP 16
3592: PUSH
3593: FOR_IN
3594: IFFALSE 3610
// SetAreaMapShow ( i , 0 ) ;
3596: LD_VAR 0 2
3600: PPUSH
3601: LD_INT 0
3603: PPUSH
3604: CALL_OW 424
3608: GO 3593
3610: POP
3611: POP
// end ; for i := 1 to 8 do
3612: LD_ADDR_VAR 0 2
3616: PUSH
3617: DOUBLE
3618: LD_INT 1
3620: DEC
3621: ST_TO_ADDR
3622: LD_INT 8
3624: PUSH
3625: FOR_TO
3626: IFFALSE 4883
// begin if not mpSidePositions [ i ] then
3628: LD_EXP 5
3632: PUSH
3633: LD_VAR 0 2
3637: ARRAY
3638: NOT
3639: IFFALSE 3643
// continue ;
3641: GO 3625
// side := i ;
3643: LD_ADDR_VAR 0 7
3647: PUSH
3648: LD_VAR 0 2
3652: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3653: LD_ADDR_VAR 0 9
3657: PUSH
3658: LD_EXP 7
3662: PUSH
3663: LD_VAR 0 2
3667: ARRAY
3668: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3669: LD_ADDR_VAR 0 8
3673: PUSH
3674: LD_EXP 5
3678: PUSH
3679: LD_VAR 0 2
3683: ARRAY
3684: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3685: LD_EXP 10
3689: PPUSH
3690: CALL 18821 0 1
3694: IFFALSE 3771
// begin for j in mpOilDeposits [ pos ] do
3696: LD_ADDR_VAR 0 3
3700: PUSH
3701: LD_EXP 10
3705: PUSH
3706: LD_VAR 0 8
3710: ARRAY
3711: PUSH
3712: FOR_IN
3713: IFFALSE 3769
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3715: LD_VAR 0 3
3719: PUSH
3720: LD_INT 1
3722: ARRAY
3723: PPUSH
3724: LD_VAR 0 3
3728: PUSH
3729: LD_INT 2
3731: ARRAY
3732: PPUSH
3733: LD_INT 2
3735: PPUSH
3736: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3740: LD_VAR 0 3
3744: PUSH
3745: LD_INT 1
3747: ARRAY
3748: PPUSH
3749: LD_VAR 0 3
3753: PUSH
3754: LD_INT 2
3756: ARRAY
3757: PPUSH
3758: LD_VAR 0 7
3762: PPUSH
3763: CALL_OW 441
// end ;
3767: GO 3712
3769: POP
3770: POP
// end ; if Count ( mpSibDeposits ) then
3771: LD_EXP 11
3775: PPUSH
3776: CALL 18821 0 1
3780: IFFALSE 3857
// begin for j in mpSibDeposits [ pos ] do
3782: LD_ADDR_VAR 0 3
3786: PUSH
3787: LD_EXP 11
3791: PUSH
3792: LD_VAR 0 8
3796: ARRAY
3797: PUSH
3798: FOR_IN
3799: IFFALSE 3855
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3801: LD_VAR 0 3
3805: PUSH
3806: LD_INT 1
3808: ARRAY
3809: PPUSH
3810: LD_VAR 0 3
3814: PUSH
3815: LD_INT 2
3817: ARRAY
3818: PPUSH
3819: LD_INT 3
3821: PPUSH
3822: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3826: LD_VAR 0 3
3830: PUSH
3831: LD_INT 1
3833: ARRAY
3834: PPUSH
3835: LD_VAR 0 3
3839: PUSH
3840: LD_INT 2
3842: ARRAY
3843: PPUSH
3844: LD_VAR 0 7
3848: PPUSH
3849: CALL_OW 441
// end ;
3853: GO 3798
3855: POP
3856: POP
// end ; InitBc ;
3857: CALL_OW 21
// InitUc ;
3861: CALL_OW 18
// uc_side := side ;
3865: LD_ADDR_OWVAR 20
3869: PUSH
3870: LD_VAR 0 7
3874: ST_TO_ADDR
// uc_nation := nation ;
3875: LD_ADDR_OWVAR 21
3879: PUSH
3880: LD_VAR 0 9
3884: ST_TO_ADDR
// if Count ( mpDepots ) then
3885: LD_EXP 12
3889: PPUSH
3890: CALL 18821 0 1
3894: IFFALSE 4078
// begin if mpGameType = GameTypeSurvival then
3896: LD_EXP 1
3900: PUSH
3901: LD_INT 2
3903: EQUAL
3904: IFFALSE 3924
// begin bc_level := 10 ;
3906: LD_ADDR_OWVAR 43
3910: PUSH
3911: LD_INT 10
3913: ST_TO_ADDR
// bc_type := b_warehouse ;
3914: LD_ADDR_OWVAR 42
3918: PUSH
3919: LD_INT 1
3921: ST_TO_ADDR
// end else
3922: GO 3940
// begin bc_level := 0 ;
3924: LD_ADDR_OWVAR 43
3928: PUSH
3929: LD_INT 0
3931: ST_TO_ADDR
// bc_type := b_depot ;
3932: LD_ADDR_OWVAR 42
3936: PUSH
3937: LD_INT 0
3939: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3940: LD_ADDR_VAR 0 4
3944: PUSH
3945: LD_EXP 12
3949: PUSH
3950: LD_VAR 0 8
3954: ARRAY
3955: PUSH
3956: LD_INT 1
3958: ARRAY
3959: PPUSH
3960: LD_EXP 12
3964: PUSH
3965: LD_VAR 0 8
3969: ARRAY
3970: PUSH
3971: LD_INT 2
3973: ARRAY
3974: PPUSH
3975: LD_EXP 12
3979: PUSH
3980: LD_VAR 0 8
3984: ARRAY
3985: PUSH
3986: LD_INT 3
3988: ARRAY
3989: PPUSH
3990: CALL_OW 47
3994: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3995: LD_VAR 0 4
3999: PPUSH
4000: LD_STRING @
4002: PUSH
4003: LD_VAR 0 7
4007: STR
4008: PPUSH
4009: CALL_OW 500
// if Count ( mpStartingResources ) then
4013: LD_EXP 13
4017: PPUSH
4018: CALL 18821 0 1
4022: IFFALSE 4076
// begin for j := 1 to mpStartingResources do
4024: LD_ADDR_VAR 0 3
4028: PUSH
4029: DOUBLE
4030: LD_INT 1
4032: DEC
4033: ST_TO_ADDR
4034: LD_EXP 13
4038: PUSH
4039: FOR_TO
4040: IFFALSE 4074
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4042: LD_VAR 0 4
4046: PPUSH
4047: CALL_OW 274
4051: PPUSH
4052: LD_VAR 0 3
4056: PPUSH
4057: LD_EXP 13
4061: PUSH
4062: LD_VAR 0 3
4066: ARRAY
4067: PPUSH
4068: CALL_OW 277
4072: GO 4039
4074: POP
4075: POP
// end ; end else
4076: GO 4225
// if Count ( mpStartingResources ) then
4078: LD_EXP 13
4082: PPUSH
4083: CALL 18821 0 1
4087: IFFALSE 4225
// begin for j := 1 to mpStartingResources do
4089: LD_ADDR_VAR 0 3
4093: PUSH
4094: DOUBLE
4095: LD_INT 1
4097: DEC
4098: ST_TO_ADDR
4099: LD_EXP 13
4103: PUSH
4104: FOR_TO
4105: IFFALSE 4223
// begin resources := mpStartingResources [ j ] ;
4107: LD_ADDR_VAR 0 13
4111: PUSH
4112: LD_EXP 13
4116: PUSH
4117: LD_VAR 0 3
4121: ARRAY
4122: ST_TO_ADDR
// repeat if resources >= 50 then
4123: LD_VAR 0 13
4127: PUSH
4128: LD_INT 50
4130: GREATEREQUAL
4131: IFFALSE 4177
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
4133: LD_VAR 0 3
4137: PPUSH
4138: LD_INT 5
4140: PPUSH
4141: LD_VAR 0 5
4145: PPUSH
4146: LD_VAR 0 6
4150: PPUSH
4151: LD_INT 4
4153: PPUSH
4154: LD_INT 0
4156: PPUSH
4157: CALL_OW 60
// resources := resources - 50 ;
4161: LD_ADDR_VAR 0 13
4165: PUSH
4166: LD_VAR 0 13
4170: PUSH
4171: LD_INT 50
4173: MINUS
4174: ST_TO_ADDR
// end else
4175: GO 4211
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
4177: LD_VAR 0 3
4181: PPUSH
4182: LD_VAR 0 13
4186: PUSH
4187: LD_INT 10
4189: DIV
4190: PPUSH
4191: LD_VAR 0 5
4195: PPUSH
4196: LD_VAR 0 6
4200: PPUSH
4201: LD_INT 4
4203: PPUSH
4204: LD_INT 0
4206: PPUSH
4207: CALL_OW 60
// until resources <= 0 ;
4211: LD_VAR 0 13
4215: PUSH
4216: LD_INT 0
4218: LESSEQUAL
4219: IFFALSE 4123
// end ;
4221: GO 4104
4223: POP
4224: POP
// end ; if Count ( mpBuildings ) then
4225: LD_EXP 15
4229: PPUSH
4230: CALL 18821 0 1
4234: IFFALSE 4312
// begin for j in mpBuildings [ pos ] do
4236: LD_ADDR_VAR 0 3
4240: PUSH
4241: LD_EXP 15
4245: PUSH
4246: LD_VAR 0 8
4250: ARRAY
4251: PUSH
4252: FOR_IN
4253: IFFALSE 4310
// begin bc_level := 0 ;
4255: LD_ADDR_OWVAR 43
4259: PUSH
4260: LD_INT 0
4262: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4263: LD_ADDR_OWVAR 42
4267: PUSH
4268: LD_VAR 0 3
4272: PUSH
4273: LD_INT 1
4275: ARRAY
4276: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4277: LD_VAR 0 3
4281: PUSH
4282: LD_INT 2
4284: ARRAY
4285: PPUSH
4286: LD_VAR 0 3
4290: PUSH
4291: LD_INT 3
4293: ARRAY
4294: PPUSH
4295: LD_VAR 0 3
4299: PUSH
4300: LD_INT 4
4302: ARRAY
4303: PPUSH
4304: CALL_OW 47
// end ;
4308: GO 4252
4310: POP
4311: POP
// end ; if mpBattleFlag > - 1 then
4312: LD_EXP 20
4316: PUSH
4317: LD_INT 1
4319: NEG
4320: GREATER
4321: IFFALSE 4480
// begin x := mpStartPos [ pos ] [ 1 ] ;
4323: LD_ADDR_VAR 0 5
4327: PUSH
4328: LD_EXP 19
4332: PUSH
4333: LD_VAR 0 8
4337: ARRAY
4338: PUSH
4339: LD_INT 1
4341: ARRAY
4342: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4343: LD_ADDR_VAR 0 6
4347: PUSH
4348: LD_EXP 19
4352: PUSH
4353: LD_VAR 0 8
4357: ARRAY
4358: PUSH
4359: LD_INT 2
4361: ARRAY
4362: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4363: LD_VAR 0 5
4367: PPUSH
4368: LD_VAR 0 6
4372: PPUSH
4373: LD_INT 12
4375: PPUSH
4376: LD_INT 2
4378: PPUSH
4379: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4383: LD_ADDR_EXP 21
4387: PUSH
4388: LD_EXP 21
4392: PPUSH
4393: LD_VAR 0 7
4397: PPUSH
4398: LD_VAR 0 7
4402: PPUSH
4403: LD_VAR 0 5
4407: PPUSH
4408: LD_VAR 0 6
4412: PPUSH
4413: LD_INT 1
4415: PUSH
4416: LD_INT 100
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: LD_INT 2
4425: PUSH
4426: LD_INT 70
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PUSH
4433: LD_INT 3
4435: PUSH
4436: LD_INT 40
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PUSH
4443: LD_INT 10
4445: PUSH
4446: LD_INT 25
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: PUSH
4453: LD_INT 20
4455: PUSH
4456: LD_INT 100
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: PPUSH
4470: CALL_OW 418
4474: PPUSH
4475: CALL_OW 1
4479: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4480: LD_EXP 24
4484: PUSH
4485: LD_INT 20
4487: PPUSH
4488: LD_VAR 0 7
4492: PPUSH
4493: CALL_OW 321
4497: PUSH
4498: LD_INT 1
4500: EQUAL
4501: AND
4502: IFFALSE 4519
// SetTech ( tech_SibDet , side , state_researched ) ;
4504: LD_INT 20
4506: PPUSH
4507: LD_VAR 0 7
4511: PPUSH
4512: LD_INT 2
4514: PPUSH
4515: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4519: LD_INT 24
4521: PPUSH
4522: LD_VAR 0 7
4526: PPUSH
4527: LD_INT 0
4529: PPUSH
4530: CALL_OW 322
// if mpSibBomb = 1 then
4534: LD_EXP 26
4538: PUSH
4539: LD_INT 1
4541: EQUAL
4542: IFFALSE 4561
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4544: LD_INT 25
4546: PPUSH
4547: LD_VAR 0 7
4551: PPUSH
4552: LD_INT 1
4554: PPUSH
4555: CALL_OW 322
// end else
4559: GO 4576
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4561: LD_INT 25
4563: PPUSH
4564: LD_VAR 0 7
4568: PPUSH
4569: LD_INT 0
4571: PPUSH
4572: CALL_OW 322
// end ; if mpVehicles then
4576: LD_EXP 34
4580: IFFALSE 4679
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4582: LD_ADDR_VAR 0 3
4586: PUSH
4587: LD_VAR 0 7
4591: PPUSH
4592: LD_VAR 0 9
4596: PPUSH
4597: LD_EXP 34
4601: PPUSH
4602: CALL 5793 0 3
4606: PUSH
4607: FOR_IN
4608: IFFALSE 4677
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4610: LD_VAR 0 3
4614: PPUSH
4615: LD_INT 0
4617: PPUSH
4618: LD_INT 5
4620: PPUSH
4621: CALL_OW 12
4625: PPUSH
4626: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4630: LD_VAR 0 3
4634: PPUSH
4635: LD_EXP 19
4639: PUSH
4640: LD_VAR 0 8
4644: ARRAY
4645: PUSH
4646: LD_INT 1
4648: ARRAY
4649: PPUSH
4650: LD_EXP 19
4654: PUSH
4655: LD_VAR 0 8
4659: ARRAY
4660: PUSH
4661: LD_INT 2
4663: ARRAY
4664: PPUSH
4665: LD_INT 12
4667: PPUSH
4668: LD_INT 0
4670: PPUSH
4671: CALL_OW 50
// end ;
4675: GO 4607
4677: POP
4678: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4679: LD_ADDR_VAR 0 11
4683: PUSH
4684: LD_VAR 0 7
4688: PPUSH
4689: LD_VAR 0 9
4693: PPUSH
4694: LD_EXP 22
4698: PPUSH
4699: LD_EXP 23
4703: PPUSH
4704: CALL 5295 0 4
4708: ST_TO_ADDR
// for j in team do
4709: LD_ADDR_VAR 0 3
4713: PUSH
4714: LD_VAR 0 11
4718: PUSH
4719: FOR_IN
4720: IFFALSE 4769
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4722: LD_VAR 0 3
4726: PPUSH
4727: LD_EXP 19
4731: PUSH
4732: LD_VAR 0 8
4736: ARRAY
4737: PUSH
4738: LD_INT 1
4740: ARRAY
4741: PPUSH
4742: LD_EXP 19
4746: PUSH
4747: LD_VAR 0 8
4751: ARRAY
4752: PUSH
4753: LD_INT 2
4755: ARRAY
4756: PPUSH
4757: LD_INT 12
4759: PPUSH
4760: LD_INT 0
4762: PPUSH
4763: CALL_OW 50
4767: GO 4719
4769: POP
4770: POP
// if mpApemans then
4771: LD_EXP 28
4775: IFFALSE 4881
// begin for j := 1 to mpApemans do
4777: LD_ADDR_VAR 0 3
4781: PUSH
4782: DOUBLE
4783: LD_INT 1
4785: DEC
4786: ST_TO_ADDR
4787: LD_EXP 28
4791: PUSH
4792: FOR_TO
4793: IFFALSE 4879
// begin PrepareApeman ( - 5 ) ;
4795: LD_INT 5
4797: NEG
4798: PPUSH
4799: CALL 50678 0 1
// ape := CreateHuman ;
4803: LD_ADDR_VAR 0 10
4807: PUSH
4808: CALL_OW 44
4812: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4813: LD_ADDR_EXP 30
4817: PUSH
4818: LD_EXP 30
4822: PPUSH
4823: LD_VAR 0 8
4827: PPUSH
4828: LD_EXP 30
4832: PUSH
4833: LD_VAR 0 8
4837: ARRAY
4838: PPUSH
4839: LD_VAR 0 10
4843: PPUSH
4844: CALL 54430 0 2
4848: PPUSH
4849: CALL_OW 1
4853: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4854: LD_VAR 0 10
4858: PPUSH
4859: LD_EXP 29
4863: PUSH
4864: LD_VAR 0 8
4868: ARRAY
4869: PPUSH
4870: LD_INT 0
4872: PPUSH
4873: CALL_OW 49
// end ;
4877: GO 4792
4879: POP
4880: POP
// end ; end ;
4881: GO 3625
4883: POP
4884: POP
// if not mpTeamGame then
4885: LD_EXP 9
4889: NOT
4890: IFFALSE 4988
// begin for i := 1 to 8 do
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: DOUBLE
4898: LD_INT 1
4900: DEC
4901: ST_TO_ADDR
4902: LD_INT 8
4904: PUSH
4905: FOR_TO
4906: IFFALSE 4984
// for j := 1 to 8 do
4908: LD_ADDR_VAR 0 3
4912: PUSH
4913: DOUBLE
4914: LD_INT 1
4916: DEC
4917: ST_TO_ADDR
4918: LD_INT 8
4920: PUSH
4921: FOR_TO
4922: IFFALSE 4980
// if i <> j then
4924: LD_VAR 0 2
4928: PUSH
4929: LD_VAR 0 3
4933: NONEQUAL
4934: IFFALSE 4958
// SetAttitude ( i , j , att_neutral , true ) else
4936: LD_VAR 0 2
4940: PPUSH
4941: LD_VAR 0 3
4945: PPUSH
4946: LD_INT 0
4948: PPUSH
4949: LD_INT 1
4951: PPUSH
4952: CALL_OW 80
4956: GO 4978
// SetAttitude ( i , j , att_friend , true ) ;
4958: LD_VAR 0 2
4962: PPUSH
4963: LD_VAR 0 3
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: LD_INT 1
4973: PPUSH
4974: CALL_OW 80
4978: GO 4921
4980: POP
4981: POP
4982: GO 4905
4984: POP
4985: POP
// end else
4986: GO 5163
// begin if mpSharedVision then
4988: LD_EXP 14
4992: IFFALSE 5057
// begin for i in mpTeams do
4994: LD_ADDR_VAR 0 2
4998: PUSH
4999: LD_EXP 8
5003: PUSH
5004: FOR_IN
5005: IFFALSE 5055
// for j := 2 to i do
5007: LD_ADDR_VAR 0 3
5011: PUSH
5012: DOUBLE
5013: LD_INT 2
5015: DEC
5016: ST_TO_ADDR
5017: LD_VAR 0 2
5021: PUSH
5022: FOR_TO
5023: IFFALSE 5051
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5025: LD_VAR 0 2
5029: PUSH
5030: LD_VAR 0 3
5034: ARRAY
5035: PPUSH
5036: LD_VAR 0 2
5040: PUSH
5041: LD_INT 1
5043: ARRAY
5044: PPUSH
5045: CALL_OW 343
5049: GO 5022
5051: POP
5052: POP
5053: GO 5004
5055: POP
5056: POP
// end ; for i := 1 to 8 do
5057: LD_ADDR_VAR 0 2
5061: PUSH
5062: DOUBLE
5063: LD_INT 1
5065: DEC
5066: ST_TO_ADDR
5067: LD_INT 8
5069: PUSH
5070: FOR_TO
5071: IFFALSE 5161
// for j := 1 to 8 do
5073: LD_ADDR_VAR 0 3
5077: PUSH
5078: DOUBLE
5079: LD_INT 1
5081: DEC
5082: ST_TO_ADDR
5083: LD_INT 8
5085: PUSH
5086: FOR_TO
5087: IFFALSE 5157
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5089: LD_EXP 6
5093: PUSH
5094: LD_VAR 0 2
5098: ARRAY
5099: PUSH
5100: LD_EXP 6
5104: PUSH
5105: LD_VAR 0 3
5109: ARRAY
5110: EQUAL
5111: IFFALSE 5135
// SetAttitude ( i , j , att_friend , true ) else
5113: LD_VAR 0 2
5117: PPUSH
5118: LD_VAR 0 3
5122: PPUSH
5123: LD_INT 1
5125: PPUSH
5126: LD_INT 1
5128: PPUSH
5129: CALL_OW 80
5133: GO 5155
// SetAttitude ( i , j , att_enemy , true ) ;
5135: LD_VAR 0 2
5139: PPUSH
5140: LD_VAR 0 3
5144: PPUSH
5145: LD_INT 2
5147: PPUSH
5148: LD_INT 1
5150: PPUSH
5151: CALL_OW 80
5155: GO 5086
5157: POP
5158: POP
5159: GO 5070
5161: POP
5162: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5163: LD_ADDR_OWVAR 71
5167: PUSH
5168: LD_EXP 7
5172: PUSH
5173: LD_OWVAR 2
5177: ARRAY
5178: ST_TO_ADDR
// if IAmSpec then
5179: CALL_OW 531
5183: IFFALSE 5224
// begin FogOff ( true ) ;
5185: LD_INT 1
5187: PPUSH
5188: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5192: LD_EXP 27
5196: PUSH
5197: LD_INT 1
5199: ARRAY
5200: PUSH
5201: LD_INT 2
5203: DIV
5204: PPUSH
5205: LD_EXP 27
5209: PUSH
5210: LD_INT 2
5212: ARRAY
5213: PUSH
5214: LD_INT 2
5216: DIV
5217: PPUSH
5218: CALL_OW 86
// end else
5222: GO 5270
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5224: LD_EXP 19
5228: PUSH
5229: LD_EXP 5
5233: PUSH
5234: LD_OWVAR 2
5238: ARRAY
5239: ARRAY
5240: PUSH
5241: LD_INT 1
5243: ARRAY
5244: PPUSH
5245: LD_EXP 19
5249: PUSH
5250: LD_EXP 5
5254: PUSH
5255: LD_OWVAR 2
5259: ARRAY
5260: ARRAY
5261: PUSH
5262: LD_INT 2
5264: ARRAY
5265: PPUSH
5266: CALL_OW 86
// end ; BeginBuildUp ;
5270: CALL 6271 0 0
// enable ( mpActive ) ;
5274: LD_INT 100
5276: ENABLE_MARKED
// enable ( mpGameType ) ;
5277: LD_EXP 1
5281: ENABLE_MARKED
// mpGameActive := true ;
5282: LD_ADDR_EXP 37
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// end ;
5290: LD_VAR 0 1
5294: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5295: LD_INT 0
5297: PPUSH
5298: PPUSH
5299: PPUSH
5300: PPUSH
// result := [ ] ;
5301: LD_ADDR_VAR 0 5
5305: PUSH
5306: EMPTY
5307: ST_TO_ADDR
// class := class_soldier ;
5308: LD_ADDR_VAR 0 8
5312: PUSH
5313: LD_INT 1
5315: ST_TO_ADDR
// uc_side := side ;
5316: LD_ADDR_OWVAR 20
5320: PUSH
5321: LD_VAR 0 1
5325: ST_TO_ADDR
// uc_nation := nation ;
5326: LD_ADDR_OWVAR 21
5330: PUSH
5331: LD_VAR 0 2
5335: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5336: LD_ADDR_OWVAR 26
5340: PUSH
5341: LD_OWVAR 19
5345: PUSH
5346: LD_VAR 0 1
5350: ARRAY
5351: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5352: LD_INT 1
5354: PPUSH
5355: LD_INT 2
5357: PPUSH
5358: CALL_OW 12
5362: PPUSH
5363: LD_VAR 0 8
5367: PPUSH
5368: LD_VAR 0 4
5372: PUSH
5373: LD_INT 2
5375: PLUS
5376: PPUSH
5377: CALL_OW 380
// hc_importance := 105 ;
5381: LD_ADDR_OWVAR 32
5385: PUSH
5386: LD_INT 105
5388: ST_TO_ADDR
// if Multiplayer then
5389: LD_OWVAR 4
5393: IFFALSE 5433
// begin hc_gallery := MULTIAVATARS ;
5395: LD_ADDR_OWVAR 33
5399: PUSH
5400: LD_STRING MULTIAVATARS
5402: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5403: LD_ADDR_OWVAR 34
5407: PUSH
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 525
5417: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5418: LD_ADDR_OWVAR 27
5422: PUSH
5423: LD_VAR 0 1
5427: PPUSH
5428: CALL_OW 526
5432: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5433: LD_ADDR_VAR 0 5
5437: PUSH
5438: LD_VAR 0 5
5442: PPUSH
5443: CALL_OW 44
5447: PPUSH
5448: CALL 54430 0 2
5452: ST_TO_ADDR
// if mpTeamPreset then
5453: LD_LOC 1
5457: IFFALSE 5553
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5459: LD_LOC 1
5463: PUSH
5464: LD_INT 1
5466: ARRAY
5467: PPUSH
5468: LD_VAR 0 5
5472: PUSH
5473: LD_VAR 0 5
5477: ARRAY
5478: PPUSH
5479: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5483: LD_VAR 0 5
5487: PUSH
5488: LD_VAR 0 5
5492: ARRAY
5493: PPUSH
5494: LD_INT 1
5496: PPUSH
5497: LD_LOC 1
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PPUSH
5506: LD_INT 1
5508: PPUSH
5509: CALL_OW 260
5513: PPUSH
5514: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5518: LD_VAR 0 5
5522: PUSH
5523: LD_VAR 0 5
5527: ARRAY
5528: PPUSH
5529: LD_INT 2
5531: PPUSH
5532: LD_LOC 1
5536: PUSH
5537: LD_INT 1
5539: ARRAY
5540: PPUSH
5541: LD_INT 2
5543: PPUSH
5544: CALL_OW 260
5548: PPUSH
5549: CALL_OW 239
// end ; InitHc_All ( ) ;
5553: CALL_OW 584
// class := 2 ;
5557: LD_ADDR_VAR 0 8
5561: PUSH
5562: LD_INT 2
5564: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5565: LD_ADDR_VAR 0 6
5569: PUSH
5570: DOUBLE
5571: LD_INT 1
5573: DEC
5574: ST_TO_ADDR
5575: LD_VAR 0 3
5579: PUSH
5580: LD_INT 1
5582: MINUS
5583: PUSH
5584: FOR_TO
5585: IFFALSE 5769
// begin PrepareHuman ( false , class , skill ) ;
5587: LD_INT 0
5589: PPUSH
5590: LD_VAR 0 8
5594: PPUSH
5595: LD_VAR 0 4
5599: PPUSH
5600: CALL_OW 380
// un := CreateHuman ;
5604: LD_ADDR_VAR 0 7
5608: PUSH
5609: CALL_OW 44
5613: ST_TO_ADDR
// result := Join ( result , un ) ;
5614: LD_ADDR_VAR 0 5
5618: PUSH
5619: LD_VAR 0 5
5623: PPUSH
5624: LD_VAR 0 7
5628: PPUSH
5629: CALL 54430 0 2
5633: ST_TO_ADDR
// if mpTeamPreset then
5634: LD_LOC 1
5638: IFFALSE 5734
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5640: LD_LOC 1
5644: PUSH
5645: LD_VAR 0 6
5649: PUSH
5650: LD_INT 1
5652: PLUS
5653: ARRAY
5654: PPUSH
5655: LD_VAR 0 7
5659: PPUSH
5660: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5664: LD_VAR 0 7
5668: PPUSH
5669: LD_INT 1
5671: PPUSH
5672: LD_LOC 1
5676: PUSH
5677: LD_VAR 0 6
5681: PUSH
5682: LD_INT 1
5684: PLUS
5685: ARRAY
5686: PPUSH
5687: LD_INT 1
5689: PPUSH
5690: CALL_OW 260
5694: PPUSH
5695: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5699: LD_VAR 0 7
5703: PPUSH
5704: LD_INT 2
5706: PPUSH
5707: LD_LOC 1
5711: PUSH
5712: LD_VAR 0 6
5716: PUSH
5717: LD_INT 1
5719: PLUS
5720: ARRAY
5721: PPUSH
5722: LD_INT 2
5724: PPUSH
5725: CALL_OW 260
5729: PPUSH
5730: CALL_OW 239
// end ; class := Inc ( class ) ;
5734: LD_ADDR_VAR 0 8
5738: PUSH
5739: LD_VAR 0 8
5743: PPUSH
5744: CALL 55791 0 1
5748: ST_TO_ADDR
// if class = 5 then
5749: LD_VAR 0 8
5753: PUSH
5754: LD_INT 5
5756: EQUAL
5757: IFFALSE 5767
// class := 1 ;
5759: LD_ADDR_VAR 0 8
5763: PUSH
5764: LD_INT 1
5766: ST_TO_ADDR
// end ;
5767: GO 5584
5769: POP
5770: POP
// if not mpTeamPreset then
5771: LD_LOC 1
5775: NOT
5776: IFFALSE 5788
// mpTeamPreset := result ;
5778: LD_ADDR_LOC 1
5782: PUSH
5783: LD_VAR 0 5
5787: ST_TO_ADDR
// end ;
5788: LD_VAR 0 5
5792: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5793: LD_INT 0
5795: PPUSH
5796: PPUSH
// result := [ ] ;
5797: LD_ADDR_VAR 0 4
5801: PUSH
5802: EMPTY
5803: ST_TO_ADDR
// if not vehicles then
5804: LD_VAR 0 3
5808: NOT
5809: IFFALSE 5813
// exit ;
5811: GO 5972
// for i := 1 to vehicles [ nation ] do
5813: LD_ADDR_VAR 0 5
5817: PUSH
5818: DOUBLE
5819: LD_INT 1
5821: DEC
5822: ST_TO_ADDR
5823: LD_VAR 0 3
5827: PUSH
5828: LD_VAR 0 2
5832: ARRAY
5833: PUSH
5834: FOR_TO
5835: IFFALSE 5970
// begin uc_side := side ;
5837: LD_ADDR_OWVAR 20
5841: PUSH
5842: LD_VAR 0 1
5846: ST_TO_ADDR
// uc_nation := nation ;
5847: LD_ADDR_OWVAR 21
5851: PUSH
5852: LD_VAR 0 2
5856: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5857: LD_VAR 0 3
5861: PUSH
5862: LD_VAR 0 2
5866: ARRAY
5867: PUSH
5868: LD_VAR 0 5
5872: ARRAY
5873: PUSH
5874: LD_INT 1
5876: ARRAY
5877: PPUSH
5878: LD_VAR 0 3
5882: PUSH
5883: LD_VAR 0 2
5887: ARRAY
5888: PUSH
5889: LD_VAR 0 5
5893: ARRAY
5894: PUSH
5895: LD_INT 2
5897: ARRAY
5898: PPUSH
5899: LD_VAR 0 3
5903: PUSH
5904: LD_VAR 0 2
5908: ARRAY
5909: PUSH
5910: LD_VAR 0 5
5914: ARRAY
5915: PUSH
5916: LD_INT 3
5918: ARRAY
5919: PPUSH
5920: LD_VAR 0 3
5924: PUSH
5925: LD_VAR 0 2
5929: ARRAY
5930: PUSH
5931: LD_VAR 0 5
5935: ARRAY
5936: PUSH
5937: LD_INT 4
5939: ARRAY
5940: PPUSH
5941: LD_INT 80
5943: PPUSH
5944: CALL 21559 0 5
// result := Join ( result , CreateVehicle ) ;
5948: LD_ADDR_VAR 0 4
5952: PUSH
5953: LD_VAR 0 4
5957: PPUSH
5958: CALL_OW 45
5962: PPUSH
5963: CALL 54430 0 2
5967: ST_TO_ADDR
// end ;
5968: GO 5834
5970: POP
5971: POP
// end ;
5972: LD_VAR 0 4
5976: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5977: LD_INT 0
5979: PPUSH
5980: PPUSH
// for i in mpBattleFlags do
5981: LD_ADDR_VAR 0 3
5985: PUSH
5986: LD_EXP 21
5990: PUSH
5991: FOR_IN
5992: IFFALSE 6069
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5994: LD_VAR 0 3
5998: PPUSH
5999: LD_INT 1
6001: PUSH
6002: LD_VAR 0 1
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 2
6013: PUSH
6014: LD_VAR 0 1
6018: PUSH
6019: LD_REAL  7.00000000000000E-0001
6022: MUL
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PUSH
6028: LD_INT 3
6030: PUSH
6031: LD_VAR 0 1
6035: PUSH
6036: LD_REAL  4.00000000000000E-0001
6039: MUL
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 20
6047: PUSH
6048: LD_VAR 0 1
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: PPUSH
6063: CALL_OW 423
6067: GO 5991
6069: POP
6070: POP
// end ;
6071: LD_VAR 0 2
6075: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6076: LD_INT 100
6078: IFFALSE 6173
6080: GO 6082
6082: DISABLE
6083: LD_INT 0
6085: PPUSH
6086: PPUSH
// begin if mpBattleFlag <= 0 then
6087: LD_EXP 20
6091: PUSH
6092: LD_INT 0
6094: LESSEQUAL
6095: IFFALSE 6099
// exit ;
6097: GO 6173
// strength := 100 ;
6099: LD_ADDR_VAR 0 2
6103: PUSH
6104: LD_INT 100
6106: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6107: LD_EXP 20
6111: PPUSH
6112: CALL_OW 67
// strength := Dec ( strength ) ;
6116: LD_ADDR_VAR 0 2
6120: PUSH
6121: LD_VAR 0 2
6125: PPUSH
6126: CALL 55813 0 1
6130: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6131: LD_VAR 0 2
6135: PPUSH
6136: CALL 5977 0 1
// until not strength ;
6140: LD_VAR 0 2
6144: NOT
6145: IFFALSE 6107
// for i in mpBattleFlags do
6147: LD_ADDR_VAR 0 1
6151: PUSH
6152: LD_EXP 21
6156: PUSH
6157: FOR_IN
6158: IFFALSE 6171
// KillBattleFlag ( i ) ;
6160: LD_VAR 0 1
6164: PPUSH
6165: CALL_OW 419
6169: GO 6157
6171: POP
6172: POP
// end ;
6173: PPOPN 2
6175: END
// every 0 0$1 marked mpActive do var side , tmp ;
6176: GO 6178
6178: DISABLE
6179: LD_INT 0
6181: PPUSH
6182: PPUSH
// begin if mpSibBomb <= 1 then
6183: LD_EXP 26
6187: PUSH
6188: LD_INT 1
6190: LESSEQUAL
6191: IFFALSE 6195
// exit ;
6193: GO 6268
// tmp := mpSibBomb ;
6195: LD_ADDR_VAR 0 2
6199: PUSH
6200: LD_EXP 26
6204: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6205: LD_INT 35
6207: PPUSH
6208: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6212: LD_ADDR_VAR 0 2
6216: PUSH
6217: LD_VAR 0 2
6221: PUSH
6222: LD_INT 35
6224: MINUS
6225: ST_TO_ADDR
// until not tmp ;
6226: LD_VAR 0 2
6230: NOT
6231: IFFALSE 6205
// for side := 1 to 8 do
6233: LD_ADDR_VAR 0 1
6237: PUSH
6238: DOUBLE
6239: LD_INT 1
6241: DEC
6242: ST_TO_ADDR
6243: LD_INT 8
6245: PUSH
6246: FOR_TO
6247: IFFALSE 6266
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6249: LD_INT 25
6251: PPUSH
6252: LD_VAR 0 1
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: CALL_OW 322
6264: GO 6246
6266: POP
6267: POP
// end ;
6268: PPOPN 2
6270: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6271: LD_INT 0
6273: PPUSH
6274: PPUSH
6275: PPUSH
// mpBuildUpTimeDelay := 0 ;
6276: LD_ADDR_EXP 40
6280: PUSH
6281: LD_INT 0
6283: ST_TO_ADDR
// if not mpBuildUpTime then
6284: LD_EXP 18
6288: NOT
6289: IFFALSE 6293
// exit ;
6291: GO 6476
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6293: LD_ADDR_EXP 40
6297: PUSH
6298: LD_INT 8400
6300: PUSH
6301: LD_INT 2100
6303: PUSH
6304: LD_EXP 18
6308: MUL
6309: PLUS
6310: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6311: LD_ADDR_EXP 41
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// for i := 1 to 8 do
6319: LD_ADDR_VAR 0 2
6323: PUSH
6324: DOUBLE
6325: LD_INT 1
6327: DEC
6328: ST_TO_ADDR
6329: LD_INT 8
6331: PUSH
6332: FOR_TO
6333: IFFALSE 6474
// if mpSidePositions [ i ] then
6335: LD_EXP 5
6339: PUSH
6340: LD_VAR 0 2
6344: ARRAY
6345: IFFALSE 6472
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6347: LD_EXP 17
6351: PUSH
6352: LD_EXP 5
6356: PUSH
6357: LD_VAR 0 2
6361: ARRAY
6362: ARRAY
6363: PPUSH
6364: LD_INT 5
6366: PPUSH
6367: CALL_OW 424
// for j := 1 to 8 do
6371: LD_ADDR_VAR 0 3
6375: PUSH
6376: DOUBLE
6377: LD_INT 1
6379: DEC
6380: ST_TO_ADDR
6381: LD_INT 8
6383: PUSH
6384: FOR_TO
6385: IFFALSE 6470
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6387: LD_EXP 5
6391: PUSH
6392: LD_VAR 0 3
6396: ARRAY
6397: PUSH
6398: LD_EXP 6
6402: PUSH
6403: LD_VAR 0 2
6407: ARRAY
6408: PUSH
6409: LD_EXP 6
6413: PUSH
6414: LD_VAR 0 3
6418: ARRAY
6419: NONEQUAL
6420: PUSH
6421: LD_EXP 9
6425: NOT
6426: PUSH
6427: LD_VAR 0 2
6431: PUSH
6432: LD_VAR 0 3
6436: NONEQUAL
6437: AND
6438: OR
6439: AND
6440: IFFALSE 6468
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6442: LD_VAR 0 3
6446: PPUSH
6447: LD_EXP 17
6451: PUSH
6452: LD_EXP 5
6456: PUSH
6457: LD_VAR 0 2
6461: ARRAY
6462: ARRAY
6463: PPUSH
6464: CALL_OW 333
6468: GO 6384
6470: POP
6471: POP
// end ;
6472: GO 6332
6474: POP
6475: POP
// end ;
6476: LD_VAR 0 1
6480: RET
// function EndBuildUp ; var i , j ; begin
6481: LD_INT 0
6483: PPUSH
6484: PPUSH
6485: PPUSH
// mpBuildUpTimeActive := false ;
6486: LD_ADDR_EXP 41
6490: PUSH
6491: LD_INT 0
6493: ST_TO_ADDR
// for i := 1 to 8 do
6494: LD_ADDR_VAR 0 2
6498: PUSH
6499: DOUBLE
6500: LD_INT 1
6502: DEC
6503: ST_TO_ADDR
6504: LD_INT 8
6506: PUSH
6507: FOR_TO
6508: IFFALSE 6649
// if mpSidePositions [ i ] then
6510: LD_EXP 5
6514: PUSH
6515: LD_VAR 0 2
6519: ARRAY
6520: IFFALSE 6647
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6522: LD_EXP 17
6526: PUSH
6527: LD_EXP 5
6531: PUSH
6532: LD_VAR 0 2
6536: ARRAY
6537: ARRAY
6538: PPUSH
6539: LD_INT 0
6541: PPUSH
6542: CALL_OW 424
// for j := 1 to 8 do
6546: LD_ADDR_VAR 0 3
6550: PUSH
6551: DOUBLE
6552: LD_INT 1
6554: DEC
6555: ST_TO_ADDR
6556: LD_INT 8
6558: PUSH
6559: FOR_TO
6560: IFFALSE 6645
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6562: LD_EXP 5
6566: PUSH
6567: LD_VAR 0 3
6571: ARRAY
6572: PUSH
6573: LD_EXP 6
6577: PUSH
6578: LD_VAR 0 2
6582: ARRAY
6583: PUSH
6584: LD_EXP 6
6588: PUSH
6589: LD_VAR 0 3
6593: ARRAY
6594: NONEQUAL
6595: PUSH
6596: LD_EXP 9
6600: NOT
6601: PUSH
6602: LD_VAR 0 2
6606: PUSH
6607: LD_VAR 0 3
6611: NONEQUAL
6612: AND
6613: OR
6614: AND
6615: IFFALSE 6643
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6617: LD_VAR 0 3
6621: PPUSH
6622: LD_EXP 17
6626: PUSH
6627: LD_EXP 5
6631: PUSH
6632: LD_VAR 0 2
6636: ARRAY
6637: ARRAY
6638: PPUSH
6639: CALL_OW 334
6643: GO 6559
6645: POP
6646: POP
// end ;
6647: GO 6507
6649: POP
6650: POP
// end ;
6651: LD_VAR 0 1
6655: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6656: LD_EXP 41
6660: IFFALSE 6835
6662: GO 6664
6664: DISABLE
6665: LD_INT 0
6667: PPUSH
6668: PPUSH
// begin for i := 1 to 8 do
6669: LD_ADDR_VAR 0 1
6673: PUSH
6674: DOUBLE
6675: LD_INT 1
6677: DEC
6678: ST_TO_ADDR
6679: LD_INT 8
6681: PUSH
6682: FOR_TO
6683: IFFALSE 6832
// if mpSidePositions [ i ] then
6685: LD_EXP 5
6689: PUSH
6690: LD_VAR 0 1
6694: ARRAY
6695: IFFALSE 6830
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6697: LD_ADDR_VAR 0 2
6701: PUSH
6702: LD_EXP 17
6706: PUSH
6707: LD_EXP 5
6711: PUSH
6712: LD_VAR 0 1
6716: ARRAY
6717: ARRAY
6718: PPUSH
6719: LD_INT 2
6721: PUSH
6722: LD_INT 21
6724: PUSH
6725: LD_INT 1
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PUSH
6732: LD_INT 21
6734: PUSH
6735: LD_INT 2
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: LIST
6746: PUSH
6747: LD_INT 22
6749: PUSH
6750: LD_OWVAR 2
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PPUSH
6763: CALL_OW 70
6767: PUSH
6768: FOR_IN
6769: IFFALSE 6828
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6771: LD_EXP 6
6775: PUSH
6776: LD_VAR 0 1
6780: ARRAY
6781: PUSH
6782: LD_EXP 6
6786: PUSH
6787: LD_OWVAR 2
6791: ARRAY
6792: NONEQUAL
6793: PUSH
6794: LD_EXP 9
6798: NOT
6799: PUSH
6800: LD_VAR 0 1
6804: PUSH
6805: LD_OWVAR 2
6809: NONEQUAL
6810: AND
6811: OR
6812: IFFALSE 6826
// ComMoveToArea ( un , BuildUpEscape ) ;
6814: LD_VAR 0 2
6818: PPUSH
6819: LD_INT 59
6821: PPUSH
6822: CALL_OW 113
6826: GO 6768
6828: POP
6829: POP
6830: GO 6682
6832: POP
6833: POP
// enable ;
6834: ENABLE
// end ;
6835: PPOPN 2
6837: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6838: LD_EXP 18
6842: IFFALSE 6892
6844: GO 6846
6846: DISABLE
6847: LD_INT 0
6849: PPUSH
// begin tmp := mpBuildUpTime ;
6850: LD_ADDR_VAR 0 1
6854: PUSH
6855: LD_EXP 18
6859: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6860: LD_INT 35
6862: PPUSH
6863: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6867: LD_ADDR_VAR 0 1
6871: PUSH
6872: LD_VAR 0 1
6876: PUSH
6877: LD_INT 35
6879: MINUS
6880: ST_TO_ADDR
// until not tmp ;
6881: LD_VAR 0 1
6885: NOT
6886: IFFALSE 6860
// EndBuildUp ;
6888: CALL 6481 0 0
// end ;
6892: PPOPN 1
6894: END
// every 0 0$1 trigger mpActive marked mpWin do
6895: LD_INT 100
6897: IFFALSE 6931
6899: GO 6901
6901: DISABLE
// begin if IAmServer then
6902: CALL_OW 518
6906: IFFALSE 6915
// wait ( 0 0$3 ) ;
6908: LD_INT 105
6910: PPUSH
6911: CALL_OW 67
// if Multiplayer then
6915: LD_OWVAR 4
6919: IFFALSE 6927
// YouWinInMultiplayer else
6921: CALL_OW 106
6925: GO 6931
// YouWin ;
6927: CALL_OW 103
// end ;
6931: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6932: LD_INT 0
6934: PPUSH
// result := false ;
6935: LD_ADDR_VAR 0 3
6939: PUSH
6940: LD_INT 0
6942: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6943: LD_VAR 0 1
6947: PUSH
6948: LD_INT 1
6950: DOUBLE
6951: EQUAL
6952: IFTRUE 6962
6954: LD_INT 5
6956: DOUBLE
6957: EQUAL
6958: IFTRUE 6962
6960: GO 7035
6962: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6963: LD_ADDR_VAR 0 3
6967: PUSH
6968: LD_INT 22
6970: PUSH
6971: LD_VAR 0 2
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 2
6982: PUSH
6983: LD_INT 21
6985: PUSH
6986: LD_INT 1
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 33
6995: PUSH
6996: LD_INT 3
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 33
7005: PUSH
7006: LD_INT 5
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PPUSH
7023: CALL_OW 69
7027: PPUSH
7028: CALL 18821 0 1
7032: ST_TO_ADDR
// end ; GameTypeSurvival :
7033: GO 7270
7035: LD_INT 2
7037: DOUBLE
7038: EQUAL
7039: IFTRUE 7043
7041: GO 7171
7043: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7044: LD_ADDR_VAR 0 3
7048: PUSH
7049: LD_INT 22
7051: PUSH
7052: LD_VAR 0 2
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 2
7063: PUSH
7064: LD_INT 30
7066: PUSH
7067: LD_INT 0
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 30
7076: PUSH
7077: LD_INT 1
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PPUSH
7093: CALL_OW 69
7097: PPUSH
7098: CALL 18821 0 1
7102: PUSH
7103: LD_INT 22
7105: PUSH
7106: LD_VAR 0 2
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 2
7117: PUSH
7118: LD_INT 21
7120: PUSH
7121: LD_INT 1
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: LD_INT 33
7130: PUSH
7131: LD_INT 3
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 33
7140: PUSH
7141: LD_INT 5
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PPUSH
7158: CALL_OW 69
7162: PPUSH
7163: CALL 18821 0 1
7167: AND
7168: ST_TO_ADDR
// end ; GameTypeKing :
7169: GO 7270
7171: LD_INT 3
7173: DOUBLE
7174: EQUAL
7175: IFTRUE 7179
7177: GO 7269
7179: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7180: LD_ADDR_VAR 0 3
7184: PUSH
7185: LD_INT 22
7187: PUSH
7188: LD_VAR 0 2
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 2
7199: PUSH
7200: LD_INT 21
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: LD_INT 33
7212: PUSH
7213: LD_INT 3
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: LD_INT 33
7222: PUSH
7223: LD_INT 5
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PPUSH
7240: CALL_OW 69
7244: PPUSH
7245: CALL 18821 0 1
7249: PUSH
7250: LD_VAR 0 2
7254: PPUSH
7255: CALL 9798 0 1
7259: PUSH
7260: LD_EXP 33
7264: LESS
7265: AND
7266: ST_TO_ADDR
// end ; end ;
7267: GO 7270
7269: POP
// end ;
7270: LD_VAR 0 3
7274: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7275: LD_INT 100
7277: IFFALSE 7499
7279: GO 7281
7281: DISABLE
7282: LD_INT 0
7284: PPUSH
7285: PPUSH
// begin if Multiplayer then
7286: LD_OWVAR 4
7290: IFFALSE 7298
// SetPlayerSpectator ( ) else
7292: CALL_OW 572
7296: GO 7307
// FogOff ( your_side ) ;
7298: LD_OWVAR 2
7302: PPUSH
7303: CALL_OW 344
// repeat gameIsOn := false ;
7307: LD_ADDR_VAR 0 1
7311: PUSH
7312: LD_INT 0
7314: ST_TO_ADDR
// for i := 1 to 8 do
7315: LD_ADDR_VAR 0 2
7319: PUSH
7320: DOUBLE
7321: LD_INT 1
7323: DEC
7324: ST_TO_ADDR
7325: LD_INT 8
7327: PUSH
7328: FOR_TO
7329: IFFALSE 7451
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7331: LD_EXP 5
7335: PUSH
7336: LD_VAR 0 2
7340: ARRAY
7341: PUSH
7342: LD_VAR 0 2
7346: PPUSH
7347: CALL_OW 108
7351: AND
7352: PUSH
7353: LD_VAR 0 2
7357: PUSH
7358: LD_OWVAR 2
7362: NONEQUAL
7363: AND
7364: IFFALSE 7449
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7366: LD_EXP 6
7370: PUSH
7371: LD_VAR 0 2
7375: ARRAY
7376: NOT
7377: PUSH
7378: LD_EXP 6
7382: PUSH
7383: LD_VAR 0 2
7387: ARRAY
7388: PUSH
7389: LD_EXP 6
7393: PUSH
7394: LD_OWVAR 2
7398: ARRAY
7399: NONEQUAL
7400: PUSH
7401: LD_OWVAR 2
7405: PPUSH
7406: LD_VAR 0 2
7410: PPUSH
7411: CALL_OW 81
7415: PUSH
7416: LD_INT 1
7418: NONEQUAL
7419: AND
7420: OR
7421: IFFALSE 7449
// if HasPowerByGameType ( mpGameType , i ) then
7423: LD_EXP 1
7427: PPUSH
7428: LD_VAR 0 2
7432: PPUSH
7433: CALL 6932 0 2
7437: IFFALSE 7449
// begin gameIsOn := true ;
7439: LD_ADDR_VAR 0 1
7443: PUSH
7444: LD_INT 1
7446: ST_TO_ADDR
// break ;
7447: GO 7451
// end ;
7449: GO 7328
7451: POP
7452: POP
// wait ( 100 ) ;
7453: LD_INT 100
7455: PPUSH
7456: CALL_OW 67
// until not gameIsOn ;
7460: LD_VAR 0 1
7464: NOT
7465: IFFALSE 7307
// if IAmServer then
7467: CALL_OW 518
7471: IFFALSE 7480
// wait ( 0 0$3 ) ;
7473: LD_INT 105
7475: PPUSH
7476: CALL_OW 67
// if Multiplayer then
7480: LD_OWVAR 4
7484: IFFALSE 7492
// YouLostInMultiplayer else
7486: CALL_OW 107
7490: GO 7499
// YouLost (  ) ;
7492: LD_STRING 
7494: PPUSH
7495: CALL_OW 104
// end ;
7499: PPOPN 2
7501: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7502: LD_EXP 31
7506: IFFALSE 7882
7508: GO 7510
7510: DISABLE
7511: LD_INT 0
7513: PPUSH
7514: PPUSH
7515: PPUSH
7516: PPUSH
7517: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7518: LD_ADDR_VAR 0 5
7522: PUSH
7523: LD_INT 1
7525: PUSH
7526: LD_INT 2
7528: PUSH
7529: LD_INT 3
7531: PUSH
7532: LD_INT 4
7534: PUSH
7535: LD_INT 5
7537: PUSH
7538: LD_INT 6
7540: PUSH
7541: LD_INT 7
7543: PUSH
7544: LD_INT 8
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7557: LD_INT 350
7559: PPUSH
7560: CALL_OW 67
// for i := 1 to 8 do
7564: LD_ADDR_VAR 0 1
7568: PUSH
7569: DOUBLE
7570: LD_INT 1
7572: DEC
7573: ST_TO_ADDR
7574: LD_INT 8
7576: PUSH
7577: FOR_TO
7578: IFFALSE 7852
// begin j := sides [ i ] ;
7580: LD_ADDR_VAR 0 2
7584: PUSH
7585: LD_VAR 0 5
7589: PUSH
7590: LD_VAR 0 1
7594: ARRAY
7595: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7596: LD_EXP 38
7600: PUSH
7601: LD_VAR 0 2
7605: ARRAY
7606: PPUSH
7607: CALL 18821 0 1
7611: PUSH
7612: LD_VAR 0 2
7616: PPUSH
7617: CALL_OW 108
7621: AND
7622: PUSH
7623: LD_EXP 1
7627: PPUSH
7628: LD_VAR 0 2
7632: PPUSH
7633: CALL 6932 0 2
7637: AND
7638: IFFALSE 7850
// begin wait ( mpRespawn div 3 ) ;
7640: LD_EXP 31
7644: PUSH
7645: LD_INT 3
7647: DIV
7648: PPUSH
7649: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7653: LD_ADDR_VAR 0 3
7657: PUSH
7658: LD_INT 22
7660: PUSH
7661: LD_VAR 0 2
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PUSH
7670: LD_INT 50
7672: PUSH
7673: EMPTY
7674: LIST
7675: PUSH
7676: LD_INT 2
7678: PUSH
7679: LD_INT 30
7681: PUSH
7682: LD_INT 0
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PUSH
7689: LD_INT 30
7691: PUSH
7692: LD_INT 1
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: LIST
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: PPUSH
7709: CALL_OW 69
7713: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7714: LD_VAR 0 3
7718: NOT
7719: PUSH
7720: LD_VAR 0 2
7724: PPUSH
7725: CALL_OW 108
7729: NOT
7730: OR
7731: PUSH
7732: LD_EXP 1
7736: PPUSH
7737: LD_VAR 0 2
7741: PPUSH
7742: CALL 6932 0 2
7746: NOT
7747: OR
7748: IFFALSE 7752
// continue ;
7750: GO 7577
// spawn := tmp [ 1 ] ;
7752: LD_ADDR_VAR 0 4
7756: PUSH
7757: LD_VAR 0 3
7761: PUSH
7762: LD_INT 1
7764: ARRAY
7765: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7766: LD_EXP 38
7770: PUSH
7771: LD_VAR 0 2
7775: ARRAY
7776: PUSH
7777: LD_INT 1
7779: ARRAY
7780: PPUSH
7781: LD_VAR 0 4
7785: PPUSH
7786: CALL_OW 250
7790: PPUSH
7791: LD_VAR 0 4
7795: PPUSH
7796: CALL_OW 251
7800: PPUSH
7801: LD_INT 32
7803: PPUSH
7804: LD_INT 1
7806: PPUSH
7807: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7811: LD_ADDR_EXP 38
7815: PUSH
7816: LD_EXP 38
7820: PPUSH
7821: LD_VAR 0 2
7825: PPUSH
7826: LD_EXP 38
7830: PUSH
7831: LD_VAR 0 2
7835: ARRAY
7836: PPUSH
7837: LD_INT 1
7839: PPUSH
7840: CALL_OW 3
7844: PPUSH
7845: CALL_OW 1
7849: ST_TO_ADDR
// end ; end ;
7850: GO 7577
7852: POP
7853: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7854: LD_ADDR_VAR 0 5
7858: PUSH
7859: LD_VAR 0 5
7863: PPUSH
7864: LD_INT 1
7866: PPUSH
7867: LD_INT 8
7869: PPUSH
7870: LD_INT 1
7872: PPUSH
7873: CALL 21099 0 4
7877: ST_TO_ADDR
// until false ;
7878: LD_INT 0
7880: IFFALSE 7557
// end ;
7882: PPOPN 5
7884: END
// every 0 0$1 marked mpActive do
7885: GO 7887
7887: DISABLE
// begin enable ;
7888: ENABLE
// if not mpDisplayStrings then
7889: LD_EXP 36
7893: NOT
7894: IFFALSE 7905
// begin display_strings := [ ] ;
7896: LD_ADDR_OWVAR 47
7900: PUSH
7901: EMPTY
7902: ST_TO_ADDR
// exit ;
7903: GO 7915
// end ; display_strings := mpDisplayStrings ;
7905: LD_ADDR_OWVAR 47
7909: PUSH
7910: LD_EXP 36
7914: ST_TO_ADDR
// end ; end_of_file
7915: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7916: LD_INT 0
7918: PPUSH
7919: PPUSH
7920: PPUSH
7921: PPUSH
7922: PPUSH
7923: PPUSH
7924: PPUSH
7925: PPUSH
7926: PPUSH
// if GetType ( un ) = unit_vehicle then
7927: LD_VAR 0 1
7931: PPUSH
7932: CALL_OW 247
7936: PUSH
7937: LD_INT 2
7939: EQUAL
7940: IFFALSE 7944
// exit ;
7942: GO 8576
// side := GetSide ( un ) ;
7944: LD_ADDR_VAR 0 9
7948: PUSH
7949: LD_VAR 0 1
7953: PPUSH
7954: CALL_OW 255
7958: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7959: LD_EXP 1
7963: PUSH
7964: LD_INT 2
7966: EQUAL
7967: IFFALSE 8043
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7969: LD_VAR 0 1
7973: PPUSH
7974: CALL_OW 266
7978: PUSH
7979: LD_INT 0
7981: PUSH
7982: LD_INT 1
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: IN
7989: IFFALSE 8043
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7991: LD_ADDR_VAR 0 3
7995: PUSH
7996: LD_INT 22
7998: PUSH
7999: LD_VAR 0 9
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 21
8010: PUSH
8011: LD_INT 1
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: PPUSH
8022: CALL_OW 69
8026: PUSH
8027: FOR_IN
8028: IFFALSE 8041
// KillUnit ( i ) ;
8030: LD_VAR 0 3
8034: PPUSH
8035: CALL_OW 66
8039: GO 8027
8041: POP
8042: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8043: LD_VAR 0 1
8047: PPUSH
8048: CALL_OW 257
8052: PUSH
8053: LD_INT 12
8055: PUSH
8056: LD_INT 17
8058: PUSH
8059: LD_INT 15
8061: PUSH
8062: LD_INT 16
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: IN
8071: PUSH
8072: LD_VAR 0 1
8076: PPUSH
8077: CALL_OW 263
8081: PUSH
8082: LD_INT 5
8084: EQUAL
8085: OR
8086: IFFALSE 8305
// begin tag := 0 ;
8088: LD_ADDR_VAR 0 5
8092: PUSH
8093: LD_INT 0
8095: ST_TO_ADDR
// for i := 1 to 8 do
8096: LD_ADDR_VAR 0 3
8100: PUSH
8101: DOUBLE
8102: LD_INT 1
8104: DEC
8105: ST_TO_ADDR
8106: LD_INT 8
8108: PUSH
8109: FOR_TO
8110: IFFALSE 8144
// if un in mpApePosIndex [ i ] then
8112: LD_VAR 0 1
8116: PUSH
8117: LD_EXP 30
8121: PUSH
8122: LD_VAR 0 3
8126: ARRAY
8127: IN
8128: IFFALSE 8142
// begin tag := i ;
8130: LD_ADDR_VAR 0 5
8134: PUSH
8135: LD_VAR 0 3
8139: ST_TO_ADDR
// break ;
8140: GO 8144
// end ;
8142: GO 8109
8144: POP
8145: POP
// if not tag then
8146: LD_VAR 0 5
8150: NOT
8151: IFFALSE 8155
// exit ;
8153: GO 8576
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8155: LD_ADDR_VAR 0 7
8159: PUSH
8160: LD_EXP 29
8164: PUSH
8165: LD_EXP 5
8169: PUSH
8170: LD_VAR 0 5
8174: ARRAY
8175: ARRAY
8176: ST_TO_ADDR
// if not area then
8177: LD_VAR 0 7
8181: NOT
8182: IFFALSE 8186
// exit ;
8184: GO 8576
// wait ( 4 4$00 ) ;
8186: LD_INT 8400
8188: PPUSH
8189: CALL_OW 67
// repeat wait ( 10 ) ;
8193: LD_INT 10
8195: PPUSH
8196: CALL_OW 67
// until not mpBlockRespThread ;
8200: LD_EXP 39
8204: NOT
8205: IFFALSE 8193
// mpBlockRespThread := true ;
8207: LD_ADDR_EXP 39
8211: PUSH
8212: LD_INT 1
8214: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8215: LD_INT 0
8217: PPUSH
8218: CALL 50678 0 1
// ape := CreateHuman ;
8222: LD_ADDR_VAR 0 4
8226: PUSH
8227: CALL_OW 44
8231: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8232: LD_ADDR_EXP 30
8236: PUSH
8237: LD_EXP 30
8241: PPUSH
8242: LD_VAR 0 5
8246: PPUSH
8247: LD_EXP 30
8251: PUSH
8252: LD_VAR 0 5
8256: ARRAY
8257: PPUSH
8258: LD_VAR 0 4
8262: PPUSH
8263: CALL 54430 0 2
8267: PPUSH
8268: CALL_OW 1
8272: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8273: LD_VAR 0 4
8277: PPUSH
8278: LD_VAR 0 7
8282: PPUSH
8283: LD_INT 0
8285: PPUSH
8286: CALL_OW 49
// wait ( 10 ) ;
8290: LD_INT 10
8292: PPUSH
8293: CALL_OW 67
// mpBlockRespThread := false ;
8297: LD_ADDR_EXP 39
8301: PUSH
8302: LD_INT 0
8304: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8305: LD_VAR 0 1
8309: PPUSH
8310: CALL_OW 247
8314: PUSH
8315: LD_INT 1
8317: EQUAL
8318: PUSH
8319: LD_VAR 0 1
8323: PPUSH
8324: CALL_OW 248
8328: PUSH
8329: LD_INT 0
8331: GREATER
8332: AND
8333: IFFALSE 8576
// begin if not mpRespawn then
8335: LD_EXP 31
8339: NOT
8340: IFFALSE 8344
// exit ;
8342: GO 8576
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8344: LD_VAR 0 9
8348: PPUSH
8349: CALL_OW 108
8353: NOT
8354: PUSH
8355: LD_EXP 1
8359: PPUSH
8360: LD_VAR 0 9
8364: PPUSH
8365: CALL 6932 0 2
8369: NOT
8370: AND
8371: IFFALSE 8375
// exit ;
8373: GO 8576
// side := GetSide ( un ) ;
8375: LD_ADDR_VAR 0 9
8379: PUSH
8380: LD_VAR 0 1
8384: PPUSH
8385: CALL_OW 255
8389: ST_TO_ADDR
// nation := GetNation ( un ) ;
8390: LD_ADDR_VAR 0 8
8394: PUSH
8395: LD_VAR 0 1
8399: PPUSH
8400: CALL_OW 248
8404: ST_TO_ADDR
// class := GetClass ( un ) ;
8405: LD_ADDR_VAR 0 6
8409: PUSH
8410: LD_VAR 0 1
8414: PPUSH
8415: CALL_OW 257
8419: ST_TO_ADDR
// if class > 4 then
8420: LD_VAR 0 6
8424: PUSH
8425: LD_INT 4
8427: GREATER
8428: IFFALSE 8438
// class := 1 ;
8430: LD_ADDR_VAR 0 6
8434: PUSH
8435: LD_INT 1
8437: ST_TO_ADDR
// repeat wait ( 10 ) ;
8438: LD_INT 10
8440: PPUSH
8441: CALL_OW 67
// until not mpBlockRespThread ;
8445: LD_EXP 39
8449: NOT
8450: IFFALSE 8438
// mpBlockRespThread := true ;
8452: LD_ADDR_EXP 39
8456: PUSH
8457: LD_INT 1
8459: ST_TO_ADDR
// uc_side := side ;
8460: LD_ADDR_OWVAR 20
8464: PUSH
8465: LD_VAR 0 9
8469: ST_TO_ADDR
// uc_nation := nation ;
8470: LD_ADDR_OWVAR 21
8474: PUSH
8475: LD_VAR 0 8
8479: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8480: LD_INT 0
8482: PPUSH
8483: LD_VAR 0 6
8487: PPUSH
8488: LD_INT 2
8490: PPUSH
8491: CALL_OW 380
// un := CreateHuman ;
8495: LD_ADDR_VAR 0 1
8499: PUSH
8500: CALL_OW 44
8504: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8505: LD_ADDR_EXP 38
8509: PUSH
8510: LD_EXP 38
8514: PPUSH
8515: LD_VAR 0 9
8519: PPUSH
8520: LD_EXP 38
8524: PUSH
8525: LD_VAR 0 9
8529: ARRAY
8530: PPUSH
8531: LD_EXP 38
8535: PUSH
8536: LD_VAR 0 9
8540: ARRAY
8541: PUSH
8542: LD_INT 1
8544: PLUS
8545: PPUSH
8546: LD_VAR 0 1
8550: PPUSH
8551: CALL_OW 1
8555: PPUSH
8556: CALL_OW 1
8560: ST_TO_ADDR
// wait ( 10 ) ;
8561: LD_INT 10
8563: PPUSH
8564: CALL_OW 67
// mpBlockRespThread := false ;
8568: LD_ADDR_EXP 39
8572: PUSH
8573: LD_INT 0
8575: ST_TO_ADDR
// end ; end ;
8576: LD_VAR 0 2
8580: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8581: LD_INT 0
8583: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8584: LD_VAR 0 1
8588: PPUSH
8589: CALL_OW 266
8593: PUSH
8594: LD_INT 0
8596: PUSH
8597: LD_INT 1
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: IN
8604: IFFALSE 8629
// SetBName ( building , @ & GetSide ( building ) ) ;
8606: LD_VAR 0 1
8610: PPUSH
8611: LD_STRING @
8613: PUSH
8614: LD_VAR 0 1
8618: PPUSH
8619: CALL_OW 255
8623: STR
8624: PPUSH
8625: CALL_OW 500
// end ;
8629: LD_VAR 0 2
8633: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8634: LD_INT 0
8636: PPUSH
8637: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8638: LD_EXP 1
8642: PUSH
8643: LD_INT 2
8645: EQUAL
8646: PUSH
8647: LD_VAR 0 1
8651: PPUSH
8652: CALL_OW 266
8656: PUSH
8657: LD_INT 0
8659: PUSH
8660: LD_INT 1
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: IN
8667: AND
8668: IFFALSE 8733
// begin KillUnit ( building ) ;
8670: LD_VAR 0 1
8674: PPUSH
8675: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8679: LD_ADDR_VAR 0 5
8683: PUSH
8684: LD_INT 22
8686: PUSH
8687: LD_VAR 0 2
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: LD_INT 21
8698: PUSH
8699: LD_INT 1
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PPUSH
8710: CALL_OW 69
8714: PUSH
8715: FOR_IN
8716: IFFALSE 8729
// KillUnit ( i ) ;
8718: LD_VAR 0 5
8722: PPUSH
8723: CALL_OW 66
8727: GO 8715
8729: POP
8730: POP
// exit ;
8731: GO 8778
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8733: LD_VAR 0 1
8737: PPUSH
8738: CALL_OW 266
8742: PUSH
8743: LD_INT 0
8745: PUSH
8746: LD_INT 1
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: IN
8753: IFFALSE 8778
// SetBName ( building , @ & GetSide ( building ) ) ;
8755: LD_VAR 0 1
8759: PPUSH
8760: LD_STRING @
8762: PUSH
8763: LD_VAR 0 1
8767: PPUSH
8768: CALL_OW 255
8772: STR
8773: PPUSH
8774: CALL_OW 500
// end ; end_of_file
8778: LD_VAR 0 4
8782: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
8783: LD_EXP 37
8787: IFFALSE 9126
8789: GO 8791
8791: DISABLE
8792: LD_INT 0
8794: PPUSH
8795: PPUSH
8796: PPUSH
// begin mpKingPoints := [ ] ;
8797: LD_ADDR_EXP 42
8801: PUSH
8802: EMPTY
8803: ST_TO_ADDR
// if mpTeamGame then
8804: LD_EXP 9
8808: IFFALSE 8862
// begin for i := 1 to Count ( mpTeams ) do
8810: LD_ADDR_VAR 0 1
8814: PUSH
8815: DOUBLE
8816: LD_INT 1
8818: DEC
8819: ST_TO_ADDR
8820: LD_EXP 8
8824: PPUSH
8825: CALL 18821 0 1
8829: PUSH
8830: FOR_TO
8831: IFFALSE 8858
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
8833: LD_ADDR_EXP 42
8837: PUSH
8838: LD_EXP 42
8842: PPUSH
8843: LD_VAR 0 1
8847: PPUSH
8848: LD_INT 0
8850: PPUSH
8851: CALL_OW 1
8855: ST_TO_ADDR
8856: GO 8830
8858: POP
8859: POP
// end else
8860: GO 8905
// begin for i := 1 to 8 do
8862: LD_ADDR_VAR 0 1
8866: PUSH
8867: DOUBLE
8868: LD_INT 1
8870: DEC
8871: ST_TO_ADDR
8872: LD_INT 8
8874: PUSH
8875: FOR_TO
8876: IFFALSE 8903
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
8878: LD_ADDR_EXP 42
8882: PUSH
8883: LD_EXP 42
8887: PPUSH
8888: LD_VAR 0 1
8892: PPUSH
8893: LD_INT 0
8895: PPUSH
8896: CALL_OW 1
8900: ST_TO_ADDR
8901: GO 8875
8903: POP
8904: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
8905: LD_ADDR_VAR 0 3
8909: PUSH
8910: LD_INT 50
8912: PPUSH
8913: LD_INT 0
8915: PPUSH
8916: CALL_OW 517
8920: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
8921: LD_ADDR_VAR 0 1
8925: PUSH
8926: DOUBLE
8927: LD_INT 1
8929: DEC
8930: ST_TO_ADDR
8931: LD_VAR 0 3
8935: PUSH
8936: LD_INT 1
8938: ARRAY
8939: PUSH
8940: FOR_TO
8941: IFFALSE 9008
// for j := 1 to 8 do
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: DOUBLE
8949: LD_INT 1
8951: DEC
8952: ST_TO_ADDR
8953: LD_INT 8
8955: PUSH
8956: FOR_TO
8957: IFFALSE 9004
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
8959: LD_VAR 0 3
8963: PUSH
8964: LD_INT 1
8966: ARRAY
8967: PUSH
8968: LD_VAR 0 1
8972: ARRAY
8973: PPUSH
8974: LD_VAR 0 3
8978: PUSH
8979: LD_INT 2
8981: ARRAY
8982: PUSH
8983: LD_VAR 0 1
8987: ARRAY
8988: PPUSH
8989: LD_VAR 0 2
8993: PPUSH
8994: LD_INT 12
8996: NEG
8997: PPUSH
8998: CALL_OW 330
9002: GO 8956
9004: POP
9005: POP
9006: GO 8940
9008: POP
9009: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
9010: LD_EXP 32
9014: PPUSH
9015: LD_INT 1
9017: PPUSH
9018: CALL_OW 424
// UpdateCounter ;
9022: CALL 9628 0 0
// repeat wait ( 0 0$1 ) ;
9026: LD_INT 35
9028: PPUSH
9029: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9033: LD_ADDR_VAR 0 3
9037: PUSH
9038: LD_EXP 32
9042: PPUSH
9043: LD_INT 3
9045: PUSH
9046: LD_INT 57
9048: PUSH
9049: EMPTY
9050: LIST
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: LD_INT 50
9058: PUSH
9059: EMPTY
9060: LIST
9061: PUSH
9062: LD_INT 2
9064: PUSH
9065: LD_INT 30
9067: PUSH
9068: LD_INT 0
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: PUSH
9075: LD_INT 30
9077: PUSH
9078: LD_INT 1
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: LIST
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: LIST
9094: PPUSH
9095: CALL_OW 70
9099: ST_TO_ADDR
// if not tmp then
9100: LD_VAR 0 3
9104: NOT
9105: IFFALSE 9109
// continue ;
9107: GO 9026
// AddPoints ( tmp ) ;
9109: LD_VAR 0 3
9113: PPUSH
9114: CALL 9306 0 1
// UpdateCounter ;
9118: CALL 9628 0 0
// until false ;
9122: LD_INT 0
9124: IFFALSE 9026
// end ;
9126: PPOPN 3
9128: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
9129: LD_EXP 37
9133: PUSH
9134: LD_EXP 35
9138: AND
9139: IFFALSE 9303
9141: GO 9143
9143: DISABLE
9144: LD_INT 0
9146: PPUSH
9147: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
9148: LD_ADDR_VAR 0 2
9152: PUSH
9153: LD_INT 50
9155: PPUSH
9156: LD_INT 0
9158: PPUSH
9159: CALL_OW 517
9163: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
9164: LD_ADDR_VAR 0 1
9168: PUSH
9169: DOUBLE
9170: LD_INT 1
9172: DEC
9173: ST_TO_ADDR
9174: LD_VAR 0 2
9178: PUSH
9179: LD_INT 1
9181: ARRAY
9182: PUSH
9183: FOR_TO
9184: IFFALSE 9225
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
9186: LD_VAR 0 2
9190: PUSH
9191: LD_INT 1
9193: ARRAY
9194: PUSH
9195: LD_VAR 0 1
9199: ARRAY
9200: PPUSH
9201: LD_VAR 0 2
9205: PUSH
9206: LD_INT 2
9208: ARRAY
9209: PUSH
9210: LD_VAR 0 1
9214: ARRAY
9215: PPUSH
9216: LD_INT 125
9218: PPUSH
9219: CALL_OW 495
9223: GO 9183
9225: POP
9226: POP
// repeat wait ( mpEmissions ) ;
9227: LD_EXP 35
9231: PPUSH
9232: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
9236: LD_ADDR_VAR 0 1
9240: PUSH
9241: DOUBLE
9242: LD_INT 1
9244: DEC
9245: ST_TO_ADDR
9246: LD_VAR 0 2
9250: PUSH
9251: LD_INT 1
9253: ARRAY
9254: PUSH
9255: FOR_TO
9256: IFFALSE 9297
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
9258: LD_VAR 0 2
9262: PUSH
9263: LD_INT 1
9265: ARRAY
9266: PUSH
9267: LD_VAR 0 1
9271: ARRAY
9272: PPUSH
9273: LD_VAR 0 2
9277: PUSH
9278: LD_INT 2
9280: ARRAY
9281: PUSH
9282: LD_VAR 0 1
9286: ARRAY
9287: PPUSH
9288: LD_INT 15
9290: PPUSH
9291: CALL_OW 495
9295: GO 9255
9297: POP
9298: POP
// until false ;
9299: LD_INT 0
9301: IFFALSE 9227
// end ;
9303: PPOPN 2
9305: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
9306: LD_INT 0
9308: PPUSH
9309: PPUSH
9310: PPUSH
9311: PPUSH
9312: PPUSH
// if mpTeamGame then
9313: LD_EXP 9
9317: IFFALSE 9514
// begin first := depots [ 1 ] ;
9319: LD_ADDR_VAR 0 4
9323: PUSH
9324: LD_VAR 0 1
9328: PUSH
9329: LD_INT 1
9331: ARRAY
9332: ST_TO_ADDR
// side := GetSide ( first ) ;
9333: LD_ADDR_VAR 0 6
9337: PUSH
9338: LD_VAR 0 4
9342: PPUSH
9343: CALL_OW 255
9347: ST_TO_ADDR
// for i := 1 to mpTeams do
9348: LD_ADDR_VAR 0 3
9352: PUSH
9353: DOUBLE
9354: LD_INT 1
9356: DEC
9357: ST_TO_ADDR
9358: LD_EXP 8
9362: PUSH
9363: FOR_TO
9364: IFFALSE 9398
// if side in mpTeams [ i ] then
9366: LD_VAR 0 6
9370: PUSH
9371: LD_EXP 8
9375: PUSH
9376: LD_VAR 0 3
9380: ARRAY
9381: IN
9382: IFFALSE 9396
// begin team := i ;
9384: LD_ADDR_VAR 0 5
9388: PUSH
9389: LD_VAR 0 3
9393: ST_TO_ADDR
// break ;
9394: GO 9398
// end ;
9396: GO 9363
9398: POP
9399: POP
// if not team then
9400: LD_VAR 0 5
9404: NOT
9405: IFFALSE 9409
// exit ;
9407: GO 9623
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
9409: LD_EXP 32
9413: PPUSH
9414: LD_INT 81
9416: PUSH
9417: LD_VAR 0 6
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PPUSH
9426: CALL_OW 70
9430: IFFALSE 9434
// exit ;
9432: GO 9623
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
9434: LD_ADDR_EXP 42
9438: PUSH
9439: LD_EXP 42
9443: PPUSH
9444: LD_VAR 0 5
9448: PPUSH
9449: LD_EXP 42
9453: PUSH
9454: LD_VAR 0 5
9458: ARRAY
9459: PUSH
9460: LD_INT 1
9462: PLUS
9463: PPUSH
9464: CALL_OW 1
9468: ST_TO_ADDR
// for i in mpTeams [ team ] do
9469: LD_ADDR_VAR 0 3
9473: PUSH
9474: LD_EXP 8
9478: PUSH
9479: LD_VAR 0 5
9483: ARRAY
9484: PUSH
9485: FOR_IN
9486: IFFALSE 9510
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
9488: LD_VAR 0 3
9492: PPUSH
9493: LD_EXP 42
9497: PUSH
9498: LD_VAR 0 5
9502: ARRAY
9503: PPUSH
9504: CALL_OW 506
9508: GO 9485
9510: POP
9511: POP
// end else
9512: GO 9623
// begin first := depots [ 1 ] ;
9514: LD_ADDR_VAR 0 4
9518: PUSH
9519: LD_VAR 0 1
9523: PUSH
9524: LD_INT 1
9526: ARRAY
9527: ST_TO_ADDR
// side := GetSide ( first ) ;
9528: LD_ADDR_VAR 0 6
9532: PUSH
9533: LD_VAR 0 4
9537: PPUSH
9538: CALL_OW 255
9542: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
9543: LD_EXP 32
9547: PPUSH
9548: LD_INT 81
9550: PUSH
9551: LD_VAR 0 6
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PPUSH
9560: CALL_OW 70
9564: IFFALSE 9568
// exit ;
9566: GO 9623
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
9568: LD_ADDR_EXP 42
9572: PUSH
9573: LD_EXP 42
9577: PPUSH
9578: LD_VAR 0 6
9582: PPUSH
9583: LD_EXP 42
9587: PUSH
9588: LD_VAR 0 6
9592: ARRAY
9593: PUSH
9594: LD_INT 1
9596: PLUS
9597: PPUSH
9598: CALL_OW 1
9602: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
9603: LD_VAR 0 6
9607: PPUSH
9608: LD_EXP 42
9612: PUSH
9613: LD_VAR 0 6
9617: ARRAY
9618: PPUSH
9619: CALL_OW 506
// end ; end ;
9623: LD_VAR 0 2
9627: RET
// function UpdateCounter ; var i ; begin
9628: LD_INT 0
9630: PPUSH
9631: PPUSH
// result := [ ] ;
9632: LD_ADDR_VAR 0 1
9636: PUSH
9637: EMPTY
9638: ST_TO_ADDR
// if mpTeamGame then
9639: LD_EXP 9
9643: IFFALSE 9710
// begin for i := 1 to mpTeams do
9645: LD_ADDR_VAR 0 2
9649: PUSH
9650: DOUBLE
9651: LD_INT 1
9653: DEC
9654: ST_TO_ADDR
9655: LD_EXP 8
9659: PUSH
9660: FOR_TO
9661: IFFALSE 9706
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
9663: LD_ADDR_VAR 0 1
9667: PUSH
9668: LD_VAR 0 1
9672: PUSH
9673: LD_STRING #KingoftheHill-Team
9675: PUSH
9676: LD_VAR 0 2
9680: PUSH
9681: LD_EXP 42
9685: PUSH
9686: LD_VAR 0 2
9690: ARRAY
9691: PUSH
9692: LD_EXP 33
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: ADD
9703: ST_TO_ADDR
9704: GO 9660
9706: POP
9707: POP
// end else
9708: GO 9783
// begin for i := 1 to 8 do
9710: LD_ADDR_VAR 0 2
9714: PUSH
9715: DOUBLE
9716: LD_INT 1
9718: DEC
9719: ST_TO_ADDR
9720: LD_INT 8
9722: PUSH
9723: FOR_TO
9724: IFFALSE 9781
// if mpSidePositions [ i ] then
9726: LD_EXP 5
9730: PUSH
9731: LD_VAR 0 2
9735: ARRAY
9736: IFFALSE 9779
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
9738: LD_ADDR_VAR 0 1
9742: PUSH
9743: LD_VAR 0 1
9747: PUSH
9748: LD_STRING #KingoftheHill-Player
9750: PUSH
9751: LD_VAR 0 2
9755: PUSH
9756: LD_EXP 42
9760: PUSH
9761: LD_VAR 0 2
9765: ARRAY
9766: PUSH
9767: LD_EXP 33
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: ADD
9778: ST_TO_ADDR
9779: GO 9723
9781: POP
9782: POP
// end ; mpDisplayStrings := result ;
9783: LD_ADDR_EXP 36
9787: PUSH
9788: LD_VAR 0 1
9792: ST_TO_ADDR
// end ;
9793: LD_VAR 0 1
9797: RET
// export function HowMuchPointsKing ( side ) ; begin
9798: LD_INT 0
9800: PPUSH
// result := HowMuchPoints ( side ) ;
9801: LD_ADDR_VAR 0 2
9805: PUSH
9806: LD_VAR 0 1
9810: PPUSH
9811: CALL 9821 0 1
9815: ST_TO_ADDR
// end ;
9816: LD_VAR 0 2
9820: RET
// function HowMuchPoints ( side ) ; var i ; begin
9821: LD_INT 0
9823: PPUSH
9824: PPUSH
// if mpTeamGame then
9825: LD_EXP 9
9829: IFFALSE 9898
// begin for i := 1 to Count ( mpTeams ) do
9831: LD_ADDR_VAR 0 3
9835: PUSH
9836: DOUBLE
9837: LD_INT 1
9839: DEC
9840: ST_TO_ADDR
9841: LD_EXP 8
9845: PPUSH
9846: CALL 18821 0 1
9850: PUSH
9851: FOR_TO
9852: IFFALSE 9894
// begin if side in mpTeams [ i ] then
9854: LD_VAR 0 1
9858: PUSH
9859: LD_EXP 8
9863: PUSH
9864: LD_VAR 0 3
9868: ARRAY
9869: IN
9870: IFFALSE 9892
// begin result := mpKingPoints [ i ] ;
9872: LD_ADDR_VAR 0 2
9876: PUSH
9877: LD_EXP 42
9881: PUSH
9882: LD_VAR 0 3
9886: ARRAY
9887: ST_TO_ADDR
// exit ;
9888: POP
9889: POP
9890: GO 9914
// end ; end ;
9892: GO 9851
9894: POP
9895: POP
// end else
9896: GO 9914
// result := mpKingPoints [ side ] ;
9898: LD_ADDR_VAR 0 2
9902: PUSH
9903: LD_EXP 42
9907: PUSH
9908: LD_VAR 0 1
9912: ARRAY
9913: ST_TO_ADDR
// end ;
9914: LD_VAR 0 2
9918: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
9919: LD_EXP 37
9923: PUSH
9924: CALL 10246 0 0
9928: AND
9929: PUSH
9930: LD_OWVAR 4
9934: AND
9935: IFFALSE 10171
9937: GO 9939
9939: DISABLE
9940: LD_INT 0
9942: PPUSH
9943: PPUSH
// begin canWin := false ;
9944: LD_ADDR_VAR 0 2
9948: PUSH
9949: LD_INT 0
9951: ST_TO_ADDR
// if not HasPower ( your_side ) then
9952: LD_OWVAR 2
9956: PPUSH
9957: CALL 10286 0 1
9961: NOT
9962: IFFALSE 9973
// begin Multiplayer_Loose_Message ;
9964: CALL_OW 521
// enable ( mpLose ) ;
9968: LD_INT 102
9970: ENABLE_MARKED
// end else
9971: GO 10171
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
9973: LD_ADDR_VAR 0 2
9977: PUSH
9978: LD_OWVAR 2
9982: PPUSH
9983: CALL 9821 0 1
9987: PUSH
9988: LD_EXP 33
9992: GREATEREQUAL
9993: PUSH
9994: LD_OWVAR 2
9998: PPUSH
9999: CALL 10286 0 1
10003: AND
10004: PUSH
10005: CALL 10174 0 0
10009: NOT
10010: OR
10011: ST_TO_ADDR
// for i := 1 to 8 do
10012: LD_ADDR_VAR 0 1
10016: PUSH
10017: DOUBLE
10018: LD_INT 1
10020: DEC
10021: ST_TO_ADDR
10022: LD_INT 8
10024: PUSH
10025: FOR_TO
10026: IFFALSE 10157
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10028: LD_EXP 5
10032: PUSH
10033: LD_VAR 0 1
10037: ARRAY
10038: PUSH
10039: LD_VAR 0 1
10043: PPUSH
10044: CALL_OW 108
10048: AND
10049: PUSH
10050: LD_VAR 0 1
10054: PUSH
10055: LD_OWVAR 2
10059: NONEQUAL
10060: AND
10061: IFFALSE 10155
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10063: LD_EXP 6
10067: PUSH
10068: LD_VAR 0 1
10072: ARRAY
10073: NOT
10074: PUSH
10075: LD_EXP 6
10079: PUSH
10080: LD_VAR 0 1
10084: ARRAY
10085: PUSH
10086: LD_EXP 6
10090: PUSH
10091: LD_OWVAR 2
10095: ARRAY
10096: NONEQUAL
10097: PUSH
10098: LD_OWVAR 2
10102: PPUSH
10103: LD_VAR 0 1
10107: PPUSH
10108: CALL_OW 81
10112: PUSH
10113: LD_INT 1
10115: NONEQUAL
10116: AND
10117: OR
10118: IFFALSE 10155
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
10120: LD_VAR 0 1
10124: PPUSH
10125: CALL 9821 0 1
10129: PUSH
10130: LD_EXP 33
10134: GREATEREQUAL
10135: PUSH
10136: LD_VAR 0 1
10140: PPUSH
10141: CALL 10286 0 1
10145: AND
10146: IFFALSE 10155
// begin enable ( mpLose ) ;
10148: LD_INT 102
10150: ENABLE_MARKED
// exit ;
10151: POP
10152: POP
10153: GO 10171
// end ;
10155: GO 10025
10157: POP
10158: POP
// if canWin then
10159: LD_VAR 0 2
10163: IFFALSE 10170
// enable ( mpWin ) else
10165: LD_INT 101
10167: ENABLE_MARKED
10168: GO 10171
// enable ;
10170: ENABLE
// end ; end ;
10171: PPOPN 2
10173: END
// function EnemiesInGame ; var i ; begin
10174: LD_INT 0
10176: PPUSH
10177: PPUSH
// result := false ;
10178: LD_ADDR_VAR 0 1
10182: PUSH
10183: LD_INT 0
10185: ST_TO_ADDR
// for i := 1 to 8 do
10186: LD_ADDR_VAR 0 2
10190: PUSH
10191: DOUBLE
10192: LD_INT 1
10194: DEC
10195: ST_TO_ADDR
10196: LD_INT 8
10198: PUSH
10199: FOR_TO
10200: IFFALSE 10239
// if i <> your_side and HasPower ( i ) then
10202: LD_VAR 0 2
10206: PUSH
10207: LD_OWVAR 2
10211: NONEQUAL
10212: PUSH
10213: LD_VAR 0 2
10217: PPUSH
10218: CALL 10286 0 1
10222: AND
10223: IFFALSE 10237
// begin result := true ;
10225: LD_ADDR_VAR 0 1
10229: PUSH
10230: LD_INT 1
10232: ST_TO_ADDR
// exit ;
10233: POP
10234: POP
10235: GO 10241
// end ;
10237: GO 10199
10239: POP
10240: POP
// end ;
10241: LD_VAR 0 1
10245: RET
// function CanWinLoose ; begin
10246: LD_INT 0
10248: PPUSH
// result := true ;
10249: LD_ADDR_VAR 0 1
10253: PUSH
10254: LD_INT 1
10256: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10257: CALL_OW 531
10261: PUSH
10262: CALL_OW 519
10266: PUSH
10267: LD_INT 1
10269: GREATER
10270: AND
10271: IFFALSE 10281
// result := false ;
10273: LD_ADDR_VAR 0 1
10277: PUSH
10278: LD_INT 0
10280: ST_TO_ADDR
// end ;
10281: LD_VAR 0 1
10285: RET
// function HasPower ( i ) ; begin
10286: LD_INT 0
10288: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10289: LD_ADDR_VAR 0 2
10293: PUSH
10294: LD_INT 22
10296: PUSH
10297: LD_VAR 0 1
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: PUSH
10306: LD_INT 2
10308: PUSH
10309: LD_INT 21
10311: PUSH
10312: LD_INT 1
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PUSH
10319: LD_INT 33
10321: PUSH
10322: LD_INT 3
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: PUSH
10329: LD_INT 33
10331: PUSH
10332: LD_INT 5
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PPUSH
10349: CALL_OW 69
10353: ST_TO_ADDR
// end ; end_of_file
10354: LD_VAR 0 2
10358: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10359: LD_EXP 37
10363: PUSH
10364: CALL 10569 0 0
10368: AND
10369: PUSH
10370: LD_OWVAR 4
10374: AND
10375: IFFALSE 10566
10377: GO 10379
10379: DISABLE
10380: LD_INT 0
10382: PPUSH
10383: PPUSH
// begin canWin := false ;
10384: LD_ADDR_VAR 0 2
10388: PUSH
10389: LD_INT 0
10391: ST_TO_ADDR
// if not HasPower ( your_side ) then
10392: LD_OWVAR 2
10396: PPUSH
10397: CALL 10609 0 1
10401: NOT
10402: IFFALSE 10413
// begin Multiplayer_Loose_Message ;
10404: CALL_OW 521
// enable ( mpLose ) ;
10408: LD_INT 102
10410: ENABLE_MARKED
// end else
10411: GO 10566
// begin canWin := true ;
10413: LD_ADDR_VAR 0 2
10417: PUSH
10418: LD_INT 1
10420: ST_TO_ADDR
// for i := 1 to 8 do
10421: LD_ADDR_VAR 0 1
10425: PUSH
10426: DOUBLE
10427: LD_INT 1
10429: DEC
10430: ST_TO_ADDR
10431: LD_INT 8
10433: PUSH
10434: FOR_TO
10435: IFFALSE 10552
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10437: LD_EXP 5
10441: PUSH
10442: LD_VAR 0 1
10446: ARRAY
10447: PUSH
10448: LD_VAR 0 1
10452: PPUSH
10453: CALL_OW 108
10457: AND
10458: PUSH
10459: LD_VAR 0 1
10463: PUSH
10464: LD_OWVAR 2
10468: NONEQUAL
10469: AND
10470: IFFALSE 10550
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10472: LD_EXP 6
10476: PUSH
10477: LD_VAR 0 1
10481: ARRAY
10482: NOT
10483: PUSH
10484: LD_EXP 6
10488: PUSH
10489: LD_VAR 0 1
10493: ARRAY
10494: PUSH
10495: LD_EXP 6
10499: PUSH
10500: LD_OWVAR 2
10504: ARRAY
10505: NONEQUAL
10506: PUSH
10507: LD_OWVAR 2
10511: PPUSH
10512: LD_VAR 0 1
10516: PPUSH
10517: CALL_OW 81
10521: PUSH
10522: LD_INT 1
10524: NONEQUAL
10525: AND
10526: OR
10527: IFFALSE 10550
// if HasPower ( i ) then
10529: LD_VAR 0 1
10533: PPUSH
10534: CALL 10609 0 1
10538: IFFALSE 10550
// begin canWin := false ;
10540: LD_ADDR_VAR 0 2
10544: PUSH
10545: LD_INT 0
10547: ST_TO_ADDR
// break ;
10548: GO 10552
// end ;
10550: GO 10434
10552: POP
10553: POP
// if canWin then
10554: LD_VAR 0 2
10558: IFFALSE 10565
// enable ( mpWin ) else
10560: LD_INT 101
10562: ENABLE_MARKED
10563: GO 10566
// enable ;
10565: ENABLE
// end ; end ;
10566: PPOPN 2
10568: END
// function CanWinLoose ; begin
10569: LD_INT 0
10571: PPUSH
// result := true ;
10572: LD_ADDR_VAR 0 1
10576: PUSH
10577: LD_INT 1
10579: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10580: CALL_OW 531
10584: PUSH
10585: CALL_OW 519
10589: PUSH
10590: LD_INT 1
10592: GREATER
10593: AND
10594: IFFALSE 10604
// result := false ;
10596: LD_ADDR_VAR 0 1
10600: PUSH
10601: LD_INT 0
10603: ST_TO_ADDR
// end ;
10604: LD_VAR 0 1
10608: RET
// function HasPower ( i ) ; begin
10609: LD_INT 0
10611: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10612: LD_ADDR_VAR 0 2
10616: PUSH
10617: LD_INT 22
10619: PUSH
10620: LD_VAR 0 1
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: LD_INT 21
10634: PUSH
10635: LD_INT 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 33
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: LD_INT 33
10654: PUSH
10655: LD_INT 5
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PPUSH
10672: CALL_OW 69
10676: ST_TO_ADDR
// end ; end_of_file
10677: LD_VAR 0 2
10681: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10682: LD_EXP 37
10686: IFFALSE 10729
10688: GO 10690
10690: DISABLE
10691: LD_INT 0
10693: PPUSH
// begin for i := 1 to 8 do
10694: LD_ADDR_VAR 0 1
10698: PUSH
10699: DOUBLE
10700: LD_INT 1
10702: DEC
10703: ST_TO_ADDR
10704: LD_INT 8
10706: PUSH
10707: FOR_TO
10708: IFFALSE 10727
// SetRestrict ( b_depot , i , state_disabled ) ;
10710: LD_INT 0
10712: PPUSH
10713: LD_VAR 0 1
10717: PPUSH
10718: LD_INT 0
10720: PPUSH
10721: CALL_OW 324
10725: GO 10707
10727: POP
10728: POP
// end ;
10729: PPOPN 1
10731: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10732: LD_EXP 37
10736: PUSH
10737: CALL 10942 0 0
10741: AND
10742: PUSH
10743: LD_OWVAR 4
10747: AND
10748: IFFALSE 10939
10750: GO 10752
10752: DISABLE
10753: LD_INT 0
10755: PPUSH
10756: PPUSH
// begin canWin := false ;
10757: LD_ADDR_VAR 0 2
10761: PUSH
10762: LD_INT 0
10764: ST_TO_ADDR
// if not HasPower ( your_side ) then
10765: LD_OWVAR 2
10769: PPUSH
10770: CALL 10982 0 1
10774: NOT
10775: IFFALSE 10786
// begin Multiplayer_Loose_Message ;
10777: CALL_OW 521
// enable ( mpLose ) ;
10781: LD_INT 102
10783: ENABLE_MARKED
// end else
10784: GO 10939
// begin canWin := true ;
10786: LD_ADDR_VAR 0 2
10790: PUSH
10791: LD_INT 1
10793: ST_TO_ADDR
// for i := 1 to 8 do
10794: LD_ADDR_VAR 0 1
10798: PUSH
10799: DOUBLE
10800: LD_INT 1
10802: DEC
10803: ST_TO_ADDR
10804: LD_INT 8
10806: PUSH
10807: FOR_TO
10808: IFFALSE 10925
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10810: LD_EXP 5
10814: PUSH
10815: LD_VAR 0 1
10819: ARRAY
10820: PUSH
10821: LD_VAR 0 1
10825: PPUSH
10826: CALL_OW 108
10830: AND
10831: PUSH
10832: LD_VAR 0 1
10836: PUSH
10837: LD_OWVAR 2
10841: NONEQUAL
10842: AND
10843: IFFALSE 10923
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10845: LD_EXP 6
10849: PUSH
10850: LD_VAR 0 1
10854: ARRAY
10855: NOT
10856: PUSH
10857: LD_EXP 6
10861: PUSH
10862: LD_VAR 0 1
10866: ARRAY
10867: PUSH
10868: LD_EXP 6
10872: PUSH
10873: LD_OWVAR 2
10877: ARRAY
10878: NONEQUAL
10879: PUSH
10880: LD_OWVAR 2
10884: PPUSH
10885: LD_VAR 0 1
10889: PPUSH
10890: CALL_OW 81
10894: PUSH
10895: LD_INT 1
10897: NONEQUAL
10898: AND
10899: OR
10900: IFFALSE 10923
// if HasPower ( i ) then
10902: LD_VAR 0 1
10906: PPUSH
10907: CALL 10982 0 1
10911: IFFALSE 10923
// begin canWin := false ;
10913: LD_ADDR_VAR 0 2
10917: PUSH
10918: LD_INT 0
10920: ST_TO_ADDR
// break ;
10921: GO 10925
// end ;
10923: GO 10807
10925: POP
10926: POP
// if canWin then
10927: LD_VAR 0 2
10931: IFFALSE 10938
// enable ( mpWin ) else
10933: LD_INT 101
10935: ENABLE_MARKED
10936: GO 10939
// enable ;
10938: ENABLE
// end ; end ;
10939: PPOPN 2
10941: END
// function CanWinLoose ; begin
10942: LD_INT 0
10944: PPUSH
// result := true ;
10945: LD_ADDR_VAR 0 1
10949: PUSH
10950: LD_INT 1
10952: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10953: CALL_OW 531
10957: PUSH
10958: CALL_OW 519
10962: PUSH
10963: LD_INT 1
10965: GREATER
10966: AND
10967: IFFALSE 10977
// result := false ;
10969: LD_ADDR_VAR 0 1
10973: PUSH
10974: LD_INT 0
10976: ST_TO_ADDR
// end ;
10977: LD_VAR 0 1
10981: RET
// function HasPower ( i ) ; begin
10982: LD_INT 0
10984: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10985: LD_INT 22
10987: PUSH
10988: LD_VAR 0 1
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 2
10999: PUSH
11000: LD_INT 30
11002: PUSH
11003: LD_INT 0
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: PUSH
11010: LD_INT 30
11012: PUSH
11013: LD_INT 1
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PPUSH
11029: CALL_OW 69
11033: NOT
11034: IFFALSE 11038
// exit ;
11036: GO 11103
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11038: LD_ADDR_VAR 0 2
11042: PUSH
11043: LD_INT 22
11045: PUSH
11046: LD_VAR 0 1
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: LD_INT 2
11057: PUSH
11058: LD_INT 21
11060: PUSH
11061: LD_INT 1
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 33
11070: PUSH
11071: LD_INT 3
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 33
11080: PUSH
11081: LD_INT 5
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PPUSH
11098: CALL_OW 69
11102: ST_TO_ADDR
// end ; end_of_file
11103: LD_VAR 0 2
11107: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
11108: LD_VAR 0 1
11112: PUSH
11113: LD_INT 200
11115: DOUBLE
11116: GREATEREQUAL
11117: IFFALSE 11125
11119: LD_INT 299
11121: DOUBLE
11122: LESSEQUAL
11123: IFTRUE 11127
11125: GO 11159
11127: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
11128: LD_VAR 0 1
11132: PPUSH
11133: LD_VAR 0 2
11137: PPUSH
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_VAR 0 4
11147: PPUSH
11148: LD_VAR 0 5
11152: PPUSH
11153: CALL 11936 0 5
11157: GO 11236
11159: LD_INT 300
11161: DOUBLE
11162: GREATEREQUAL
11163: IFFALSE 11171
11165: LD_INT 399
11167: DOUBLE
11168: LESSEQUAL
11169: IFTRUE 11173
11171: GO 11235
11173: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
11174: LD_VAR 0 1
11178: PPUSH
11179: LD_VAR 0 2
11183: PPUSH
11184: LD_VAR 0 3
11188: PPUSH
11189: LD_VAR 0 4
11193: PPUSH
11194: LD_VAR 0 5
11198: PPUSH
11199: LD_VAR 0 6
11203: PPUSH
11204: LD_VAR 0 7
11208: PPUSH
11209: LD_VAR 0 8
11213: PPUSH
11214: LD_VAR 0 9
11218: PPUSH
11219: LD_VAR 0 10
11223: PPUSH
11224: LD_VAR 0 11
11228: PPUSH
11229: CALL 60168 0 11
11233: GO 11236
11235: POP
// end ;
11236: PPOPN 11
11238: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
11239: LD_VAR 0 1
11243: PPUSH
11244: LD_VAR 0 2
11248: PPUSH
11249: LD_VAR 0 3
11253: PPUSH
11254: LD_VAR 0 4
11258: PPUSH
11259: LD_VAR 0 5
11263: PPUSH
11264: CALL 11321 0 5
// end ; end_of_file
11268: PPOPN 5
11270: END
// export function SOS_UnitDestroyed ( un ) ; begin
11271: LD_INT 0
11273: PPUSH
// ComRadiation ( un ) ;
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL 12340 0 1
// end ;
11283: LD_VAR 0 2
11287: RET
// export function SOS_UnitKamikazed ( un ) ; begin
11288: LD_INT 0
11290: PPUSH
// ComRadiation ( un ) ;
11291: LD_VAR 0 1
11295: PPUSH
11296: CALL 12340 0 1
// end ;
11300: LD_VAR 0 2
11304: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
11305: LD_INT 0
11307: PPUSH
// end ;
11308: LD_VAR 0 4
11312: RET
// export function SOS_Command ( cmd ) ; begin
11313: LD_INT 0
11315: PPUSH
// end ;
11316: LD_VAR 0 2
11320: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
11321: LD_INT 0
11323: PPUSH
// end ;
11324: LD_VAR 0 6
11328: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
11329: LD_INT 0
11331: PPUSH
11332: PPUSH
11333: PPUSH
11334: PPUSH
// if not vehicle or not factory then
11335: LD_VAR 0 1
11339: NOT
11340: PUSH
11341: LD_VAR 0 2
11345: NOT
11346: OR
11347: IFFALSE 11351
// exit ;
11349: GO 11931
// if not factoryWaypoints then
11351: LD_EXP 53
11355: NOT
11356: IFFALSE 11360
// exit ;
11358: GO 11931
// for i := 1 to Count ( factoryWaypoints ) do
11360: LD_ADDR_VAR 0 4
11364: PUSH
11365: DOUBLE
11366: LD_INT 1
11368: DEC
11369: ST_TO_ADDR
11370: LD_EXP 53
11374: PPUSH
11375: CALL 18821 0 1
11379: PUSH
11380: FOR_TO
11381: IFFALSE 11929
// if factoryWaypoints [ i ] [ 2 ] = factory then
11383: LD_EXP 53
11387: PUSH
11388: LD_VAR 0 4
11392: ARRAY
11393: PUSH
11394: LD_INT 2
11396: ARRAY
11397: PUSH
11398: LD_VAR 0 2
11402: EQUAL
11403: IFFALSE 11927
// begin if GetControl ( vehicle ) = control_manual then
11405: LD_VAR 0 1
11409: PPUSH
11410: CALL_OW 263
11414: PUSH
11415: LD_INT 1
11417: EQUAL
11418: IFFALSE 11780
// begin driver := IsDrivenBy ( vehicle ) ;
11420: LD_ADDR_VAR 0 5
11424: PUSH
11425: LD_VAR 0 1
11429: PPUSH
11430: CALL_OW 311
11434: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
11435: LD_VAR 0 5
11439: PUSH
11440: LD_EXP 54
11444: IN
11445: PUSH
11446: LD_VAR 0 1
11450: PUSH
11451: LD_EXP 54
11455: IN
11456: OR
11457: IFFALSE 11463
// exit ;
11459: POP
11460: POP
11461: GO 11931
// if not HasTask ( driver ) then
11463: LD_VAR 0 5
11467: PPUSH
11468: CALL_OW 314
11472: NOT
11473: IFFALSE 11778
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
11475: LD_ADDR_EXP 54
11479: PUSH
11480: LD_EXP 54
11484: PPUSH
11485: LD_VAR 0 5
11489: PPUSH
11490: CALL 54430 0 2
11494: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
11495: LD_ADDR_EXP 54
11499: PUSH
11500: LD_EXP 54
11504: PPUSH
11505: LD_VAR 0 1
11509: PPUSH
11510: CALL 54430 0 2
11514: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11515: LD_ADDR_VAR 0 6
11519: PUSH
11520: LD_EXP 53
11524: PUSH
11525: LD_VAR 0 4
11529: ARRAY
11530: PUSH
11531: LD_INT 3
11533: ARRAY
11534: PPUSH
11535: LD_EXP 53
11539: PUSH
11540: LD_VAR 0 4
11544: ARRAY
11545: PUSH
11546: LD_INT 4
11548: ARRAY
11549: PPUSH
11550: CALL_OW 428
11554: ST_TO_ADDR
// if hex then
11555: LD_VAR 0 6
11559: IFFALSE 11577
// ComMoveUnit ( driver , hex ) else
11561: LD_VAR 0 5
11565: PPUSH
11566: LD_VAR 0 6
11570: PPUSH
11571: CALL_OW 112
11575: GO 11661
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
11577: LD_VAR 0 1
11581: PPUSH
11582: LD_EXP 53
11586: PUSH
11587: LD_VAR 0 4
11591: ARRAY
11592: PUSH
11593: LD_INT 3
11595: ARRAY
11596: PPUSH
11597: LD_EXP 53
11601: PUSH
11602: LD_VAR 0 4
11606: ARRAY
11607: PUSH
11608: LD_INT 4
11610: ARRAY
11611: PPUSH
11612: CALL_OW 297
11616: PUSH
11617: LD_INT 0
11619: GREATER
11620: IFFALSE 11661
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11622: LD_VAR 0 5
11626: PPUSH
11627: LD_EXP 53
11631: PUSH
11632: LD_VAR 0 4
11636: ARRAY
11637: PUSH
11638: LD_INT 3
11640: ARRAY
11641: PPUSH
11642: LD_EXP 53
11646: PUSH
11647: LD_VAR 0 4
11651: ARRAY
11652: PUSH
11653: LD_INT 4
11655: ARRAY
11656: PPUSH
11657: CALL_OW 111
// AddComExitVehicle ( driver ) ;
11661: LD_VAR 0 5
11665: PPUSH
11666: CALL_OW 181
// if Multiplayer then
11670: LD_OWVAR 4
11674: IFFALSE 11723
// begin repeat wait ( 10 ) ;
11676: LD_INT 10
11678: PPUSH
11679: CALL_OW 67
// until not IsInUnit ( driver ) ;
11683: LD_VAR 0 5
11687: PPUSH
11688: CALL_OW 310
11692: NOT
11693: IFFALSE 11676
// if not HasTask ( driver ) then
11695: LD_VAR 0 5
11699: PPUSH
11700: CALL_OW 314
11704: NOT
11705: IFFALSE 11721
// ComEnterUnit ( driver , factory ) ;
11707: LD_VAR 0 5
11711: PPUSH
11712: LD_VAR 0 2
11716: PPUSH
11717: CALL_OW 120
// end else
11721: GO 11737
// AddComEnterUnit ( driver , factory ) ;
11723: LD_VAR 0 5
11727: PPUSH
11728: LD_VAR 0 2
11732: PPUSH
11733: CALL_OW 180
// wait ( 0 0$1 ) ;
11737: LD_INT 35
11739: PPUSH
11740: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
11744: LD_ADDR_EXP 54
11748: PUSH
11749: LD_EXP 54
11753: PUSH
11754: LD_VAR 0 5
11758: DIFF
11759: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
11760: LD_ADDR_EXP 54
11764: PUSH
11765: LD_EXP 54
11769: PUSH
11770: LD_VAR 0 1
11774: DIFF
11775: ST_TO_ADDR
// break ;
11776: GO 11929
// end ; end else
11778: GO 11927
// if GetControl ( vehicle ) = control_remote then
11780: LD_VAR 0 1
11784: PPUSH
11785: CALL_OW 263
11789: PUSH
11790: LD_INT 2
11792: EQUAL
11793: IFFALSE 11879
// begin wait ( 0 0$2 ) ;
11795: LD_INT 70
11797: PPUSH
11798: CALL_OW 67
// repeat wait ( 10 ) ;
11802: LD_INT 10
11804: PPUSH
11805: CALL_OW 67
// Connect ( vehicle ) ;
11809: LD_VAR 0 1
11813: PPUSH
11814: CALL 25027 0 1
// until IsControledBy ( vehicle ) ;
11818: LD_VAR 0 1
11822: PPUSH
11823: CALL_OW 312
11827: IFFALSE 11802
// wait ( 10 ) ;
11829: LD_INT 10
11831: PPUSH
11832: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11836: LD_VAR 0 1
11840: PPUSH
11841: LD_EXP 53
11845: PUSH
11846: LD_VAR 0 4
11850: ARRAY
11851: PUSH
11852: LD_INT 3
11854: ARRAY
11855: PPUSH
11856: LD_EXP 53
11860: PUSH
11861: LD_VAR 0 4
11865: ARRAY
11866: PUSH
11867: LD_INT 4
11869: ARRAY
11870: PPUSH
11871: CALL_OW 111
// break ;
11875: GO 11929
// end else
11877: GO 11927
// begin wait ( 0 0$3 ) ;
11879: LD_INT 105
11881: PPUSH
11882: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11886: LD_VAR 0 1
11890: PPUSH
11891: LD_EXP 53
11895: PUSH
11896: LD_VAR 0 4
11900: ARRAY
11901: PUSH
11902: LD_INT 3
11904: ARRAY
11905: PPUSH
11906: LD_EXP 53
11910: PUSH
11911: LD_VAR 0 4
11915: ARRAY
11916: PUSH
11917: LD_INT 4
11919: ARRAY
11920: PPUSH
11921: CALL_OW 111
// break ;
11925: GO 11929
// end ; end ;
11927: GO 11380
11929: POP
11930: POP
// end ;
11931: LD_VAR 0 3
11935: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11936: LD_INT 0
11938: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11939: LD_VAR 0 1
11943: PUSH
11944: LD_INT 250
11946: EQUAL
11947: PUSH
11948: LD_VAR 0 2
11952: PPUSH
11953: CALL_OW 264
11957: PUSH
11958: LD_INT 81
11960: EQUAL
11961: AND
11962: IFFALSE 11983
// MinerPlaceMine ( unit , x , y ) ;
11964: LD_VAR 0 2
11968: PPUSH
11969: LD_VAR 0 4
11973: PPUSH
11974: LD_VAR 0 5
11978: PPUSH
11979: CALL 15075 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11983: LD_VAR 0 1
11987: PUSH
11988: LD_INT 251
11990: EQUAL
11991: PUSH
11992: LD_VAR 0 2
11996: PPUSH
11997: CALL_OW 264
12001: PUSH
12002: LD_INT 81
12004: EQUAL
12005: AND
12006: IFFALSE 12027
// MinerDetonateMine ( unit , x , y ) ;
12008: LD_VAR 0 2
12012: PPUSH
12013: LD_VAR 0 4
12017: PPUSH
12018: LD_VAR 0 5
12022: PPUSH
12023: CALL 15350 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
12027: LD_VAR 0 1
12031: PUSH
12032: LD_INT 252
12034: EQUAL
12035: PUSH
12036: LD_VAR 0 2
12040: PPUSH
12041: CALL_OW 264
12045: PUSH
12046: LD_INT 81
12048: EQUAL
12049: AND
12050: IFFALSE 12071
// MinerCreateMinefield ( unit , x , y ) ;
12052: LD_VAR 0 2
12056: PPUSH
12057: LD_VAR 0 4
12061: PPUSH
12062: LD_VAR 0 5
12066: PPUSH
12067: CALL 15767 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
12071: LD_VAR 0 1
12075: PUSH
12076: LD_INT 253
12078: EQUAL
12079: PUSH
12080: LD_VAR 0 2
12084: PPUSH
12085: CALL_OW 257
12089: PUSH
12090: LD_INT 5
12092: EQUAL
12093: AND
12094: IFFALSE 12115
// ComBinocular ( unit , x , y ) ;
12096: LD_VAR 0 2
12100: PPUSH
12101: LD_VAR 0 4
12105: PPUSH
12106: LD_VAR 0 5
12110: PPUSH
12111: CALL 16136 0 3
// if selectedUnit then
12115: LD_VAR 0 3
12119: IFFALSE 12175
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
12121: LD_VAR 0 1
12125: PUSH
12126: LD_INT 254
12128: EQUAL
12129: PUSH
12130: LD_VAR 0 2
12134: PPUSH
12135: CALL_OW 264
12139: PUSH
12140: LD_INT 99
12142: EQUAL
12143: AND
12144: PUSH
12145: LD_VAR 0 3
12149: PPUSH
12150: CALL_OW 263
12154: PUSH
12155: LD_INT 3
12157: EQUAL
12158: AND
12159: IFFALSE 12175
// HackDestroyVehicle ( unit , selectedUnit ) ;
12161: LD_VAR 0 2
12165: PPUSH
12166: LD_VAR 0 3
12170: PPUSH
12171: CALL 14439 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
12175: LD_VAR 0 1
12179: PUSH
12180: LD_INT 255
12182: EQUAL
12183: PUSH
12184: LD_VAR 0 2
12188: PPUSH
12189: CALL_OW 264
12193: PUSH
12194: LD_INT 14
12196: PUSH
12197: LD_INT 53
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: IN
12204: AND
12205: PUSH
12206: LD_VAR 0 4
12210: PPUSH
12211: LD_VAR 0 5
12215: PPUSH
12216: CALL_OW 488
12220: AND
12221: IFFALSE 12245
// CutTreeXYR ( unit , x , y , 12 ) ;
12223: LD_VAR 0 2
12227: PPUSH
12228: LD_VAR 0 4
12232: PPUSH
12233: LD_VAR 0 5
12237: PPUSH
12238: LD_INT 12
12240: PPUSH
12241: CALL 12436 0 4
// if cmd = 256 then
12245: LD_VAR 0 1
12249: PUSH
12250: LD_INT 256
12252: EQUAL
12253: IFFALSE 12274
// SetFactoryWaypoint ( unit , x , y ) ;
12255: LD_VAR 0 2
12259: PPUSH
12260: LD_VAR 0 4
12264: PPUSH
12265: LD_VAR 0 5
12269: PPUSH
12270: CALL 60176 0 3
// if cmd = 257 then
12274: LD_VAR 0 1
12278: PUSH
12279: LD_INT 257
12281: EQUAL
12282: IFFALSE 12303
// SetWarehouseGatheringPoint ( unit , x , y ) ;
12284: LD_VAR 0 2
12288: PPUSH
12289: LD_VAR 0 4
12293: PPUSH
12294: LD_VAR 0 5
12298: PPUSH
12299: CALL 60666 0 3
// if cmd = 258 then
12303: LD_VAR 0 1
12307: PUSH
12308: LD_INT 258
12310: EQUAL
12311: IFFALSE 12335
// BurnTreeXYR ( unit , x , y , 8 ) ;
12313: LD_VAR 0 2
12317: PPUSH
12318: LD_VAR 0 4
12322: PPUSH
12323: LD_VAR 0 5
12327: PPUSH
12328: LD_INT 8
12330: PPUSH
12331: CALL 12830 0 4
// end ;
12335: LD_VAR 0 6
12339: RET
// export function ComRadiation ( un ) ; var eff ; begin
12340: LD_INT 0
12342: PPUSH
12343: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
12344: LD_VAR 0 1
12348: PPUSH
12349: CALL_OW 264
12353: PUSH
12354: LD_INT 91
12356: NONEQUAL
12357: IFFALSE 12361
// exit ;
12359: GO 12431
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
12361: LD_INT 68
12363: PPUSH
12364: LD_VAR 0 1
12368: PPUSH
12369: CALL_OW 255
12373: PPUSH
12374: CALL_OW 321
12378: PUSH
12379: LD_INT 2
12381: EQUAL
12382: IFFALSE 12394
// eff := 50 else
12384: LD_ADDR_VAR 0 3
12388: PUSH
12389: LD_INT 50
12391: ST_TO_ADDR
12392: GO 12402
// eff := 25 ;
12394: LD_ADDR_VAR 0 3
12398: PUSH
12399: LD_INT 25
12401: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
12402: LD_VAR 0 1
12406: PPUSH
12407: CALL_OW 250
12411: PPUSH
12412: LD_VAR 0 1
12416: PPUSH
12417: CALL_OW 251
12421: PPUSH
12422: LD_VAR 0 3
12426: PPUSH
12427: CALL_OW 495
// end ;
12431: LD_VAR 0 2
12435: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
12436: LD_INT 0
12438: PPUSH
12439: PPUSH
12440: PPUSH
12441: PPUSH
12442: PPUSH
12443: PPUSH
12444: PPUSH
12445: PPUSH
12446: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
12447: LD_VAR 0 1
12451: PPUSH
12452: CALL_OW 302
12456: NOT
12457: PUSH
12458: LD_VAR 0 2
12462: PPUSH
12463: LD_VAR 0 3
12467: PPUSH
12468: CALL_OW 488
12472: NOT
12473: OR
12474: PUSH
12475: LD_VAR 0 4
12479: NOT
12480: OR
12481: IFFALSE 12485
// exit ;
12483: GO 12825
// list := [ ] ;
12485: LD_ADDR_VAR 0 13
12489: PUSH
12490: EMPTY
12491: ST_TO_ADDR
// if x - r < 0 then
12492: LD_VAR 0 2
12496: PUSH
12497: LD_VAR 0 4
12501: MINUS
12502: PUSH
12503: LD_INT 0
12505: LESS
12506: IFFALSE 12518
// min_x := 0 else
12508: LD_ADDR_VAR 0 7
12512: PUSH
12513: LD_INT 0
12515: ST_TO_ADDR
12516: GO 12534
// min_x := x - r ;
12518: LD_ADDR_VAR 0 7
12522: PUSH
12523: LD_VAR 0 2
12527: PUSH
12528: LD_VAR 0 4
12532: MINUS
12533: ST_TO_ADDR
// if y - r < 0 then
12534: LD_VAR 0 3
12538: PUSH
12539: LD_VAR 0 4
12543: MINUS
12544: PUSH
12545: LD_INT 0
12547: LESS
12548: IFFALSE 12560
// min_y := 0 else
12550: LD_ADDR_VAR 0 8
12554: PUSH
12555: LD_INT 0
12557: ST_TO_ADDR
12558: GO 12576
// min_y := y - r ;
12560: LD_ADDR_VAR 0 8
12564: PUSH
12565: LD_VAR 0 3
12569: PUSH
12570: LD_VAR 0 4
12574: MINUS
12575: ST_TO_ADDR
// max_x := x + r ;
12576: LD_ADDR_VAR 0 9
12580: PUSH
12581: LD_VAR 0 2
12585: PUSH
12586: LD_VAR 0 4
12590: PLUS
12591: ST_TO_ADDR
// max_y := y + r ;
12592: LD_ADDR_VAR 0 10
12596: PUSH
12597: LD_VAR 0 3
12601: PUSH
12602: LD_VAR 0 4
12606: PLUS
12607: ST_TO_ADDR
// for _x = min_x to max_x do
12608: LD_ADDR_VAR 0 11
12612: PUSH
12613: DOUBLE
12614: LD_VAR 0 7
12618: DEC
12619: ST_TO_ADDR
12620: LD_VAR 0 9
12624: PUSH
12625: FOR_TO
12626: IFFALSE 12743
// for _y = min_y to max_y do
12628: LD_ADDR_VAR 0 12
12632: PUSH
12633: DOUBLE
12634: LD_VAR 0 8
12638: DEC
12639: ST_TO_ADDR
12640: LD_VAR 0 10
12644: PUSH
12645: FOR_TO
12646: IFFALSE 12739
// begin if not ValidHex ( _x , _y ) then
12648: LD_VAR 0 11
12652: PPUSH
12653: LD_VAR 0 12
12657: PPUSH
12658: CALL_OW 488
12662: NOT
12663: IFFALSE 12667
// continue ;
12665: GO 12645
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12667: LD_VAR 0 11
12671: PPUSH
12672: LD_VAR 0 12
12676: PPUSH
12677: CALL_OW 351
12681: PUSH
12682: LD_VAR 0 11
12686: PPUSH
12687: LD_VAR 0 12
12691: PPUSH
12692: CALL_OW 554
12696: AND
12697: IFFALSE 12737
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12699: LD_ADDR_VAR 0 13
12703: PUSH
12704: LD_VAR 0 13
12708: PPUSH
12709: LD_VAR 0 13
12713: PUSH
12714: LD_INT 1
12716: PLUS
12717: PPUSH
12718: LD_VAR 0 11
12722: PUSH
12723: LD_VAR 0 12
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PPUSH
12732: CALL_OW 2
12736: ST_TO_ADDR
// end ;
12737: GO 12645
12739: POP
12740: POP
12741: GO 12625
12743: POP
12744: POP
// if not list then
12745: LD_VAR 0 13
12749: NOT
12750: IFFALSE 12754
// exit ;
12752: GO 12825
// for i in list do
12754: LD_ADDR_VAR 0 6
12758: PUSH
12759: LD_VAR 0 13
12763: PUSH
12764: FOR_IN
12765: IFFALSE 12823
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
12767: LD_VAR 0 1
12771: PPUSH
12772: LD_STRING M
12774: PUSH
12775: LD_VAR 0 6
12779: PUSH
12780: LD_INT 1
12782: ARRAY
12783: PUSH
12784: LD_VAR 0 6
12788: PUSH
12789: LD_INT 2
12791: ARRAY
12792: PUSH
12793: LD_INT 0
12795: PUSH
12796: LD_INT 0
12798: PUSH
12799: LD_INT 0
12801: PUSH
12802: LD_INT 0
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: PUSH
12814: EMPTY
12815: LIST
12816: PPUSH
12817: CALL_OW 447
12821: GO 12764
12823: POP
12824: POP
// end ;
12825: LD_VAR 0 5
12829: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
12830: LD_INT 0
12832: PPUSH
12833: PPUSH
12834: PPUSH
12835: PPUSH
12836: PPUSH
12837: PPUSH
12838: PPUSH
12839: PPUSH
12840: PPUSH
12841: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
12842: LD_VAR 0 1
12846: PPUSH
12847: CALL_OW 302
12851: NOT
12852: PUSH
12853: LD_VAR 0 2
12857: PPUSH
12858: LD_VAR 0 3
12862: PPUSH
12863: CALL_OW 488
12867: NOT
12868: OR
12869: PUSH
12870: LD_VAR 0 4
12874: NOT
12875: OR
12876: IFFALSE 12880
// exit ;
12878: GO 13393
// list := [ ] ;
12880: LD_ADDR_VAR 0 13
12884: PUSH
12885: EMPTY
12886: ST_TO_ADDR
// if x - r < 0 then
12887: LD_VAR 0 2
12891: PUSH
12892: LD_VAR 0 4
12896: MINUS
12897: PUSH
12898: LD_INT 0
12900: LESS
12901: IFFALSE 12913
// min_x := 0 else
12903: LD_ADDR_VAR 0 7
12907: PUSH
12908: LD_INT 0
12910: ST_TO_ADDR
12911: GO 12929
// min_x := x - r ;
12913: LD_ADDR_VAR 0 7
12917: PUSH
12918: LD_VAR 0 2
12922: PUSH
12923: LD_VAR 0 4
12927: MINUS
12928: ST_TO_ADDR
// if y - r < 0 then
12929: LD_VAR 0 3
12933: PUSH
12934: LD_VAR 0 4
12938: MINUS
12939: PUSH
12940: LD_INT 0
12942: LESS
12943: IFFALSE 12955
// min_y := 0 else
12945: LD_ADDR_VAR 0 8
12949: PUSH
12950: LD_INT 0
12952: ST_TO_ADDR
12953: GO 12971
// min_y := y - r ;
12955: LD_ADDR_VAR 0 8
12959: PUSH
12960: LD_VAR 0 3
12964: PUSH
12965: LD_VAR 0 4
12969: MINUS
12970: ST_TO_ADDR
// max_x := x + r ;
12971: LD_ADDR_VAR 0 9
12975: PUSH
12976: LD_VAR 0 2
12980: PUSH
12981: LD_VAR 0 4
12985: PLUS
12986: ST_TO_ADDR
// max_y := y + r ;
12987: LD_ADDR_VAR 0 10
12991: PUSH
12992: LD_VAR 0 3
12996: PUSH
12997: LD_VAR 0 4
13001: PLUS
13002: ST_TO_ADDR
// for _x = min_x to max_x do
13003: LD_ADDR_VAR 0 11
13007: PUSH
13008: DOUBLE
13009: LD_VAR 0 7
13013: DEC
13014: ST_TO_ADDR
13015: LD_VAR 0 9
13019: PUSH
13020: FOR_TO
13021: IFFALSE 13138
// for _y = min_y to max_y do
13023: LD_ADDR_VAR 0 12
13027: PUSH
13028: DOUBLE
13029: LD_VAR 0 8
13033: DEC
13034: ST_TO_ADDR
13035: LD_VAR 0 10
13039: PUSH
13040: FOR_TO
13041: IFFALSE 13134
// begin if not ValidHex ( _x , _y ) then
13043: LD_VAR 0 11
13047: PPUSH
13048: LD_VAR 0 12
13052: PPUSH
13053: CALL_OW 488
13057: NOT
13058: IFFALSE 13062
// continue ;
13060: GO 13040
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
13062: LD_VAR 0 11
13066: PPUSH
13067: LD_VAR 0 12
13071: PPUSH
13072: CALL_OW 351
13076: PUSH
13077: LD_VAR 0 11
13081: PPUSH
13082: LD_VAR 0 12
13086: PPUSH
13087: CALL_OW 554
13091: AND
13092: IFFALSE 13132
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
13094: LD_ADDR_VAR 0 13
13098: PUSH
13099: LD_VAR 0 13
13103: PPUSH
13104: LD_VAR 0 13
13108: PUSH
13109: LD_INT 1
13111: PLUS
13112: PPUSH
13113: LD_VAR 0 11
13117: PUSH
13118: LD_VAR 0 12
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PPUSH
13127: CALL_OW 2
13131: ST_TO_ADDR
// end ;
13132: GO 13040
13134: POP
13135: POP
13136: GO 13020
13138: POP
13139: POP
// if not list then
13140: LD_VAR 0 13
13144: NOT
13145: IFFALSE 13149
// exit ;
13147: GO 13393
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
13149: LD_ADDR_VAR 0 13
13153: PUSH
13154: LD_VAR 0 1
13158: PPUSH
13159: LD_VAR 0 13
13163: PPUSH
13164: LD_INT 1
13166: PPUSH
13167: LD_INT 1
13169: PPUSH
13170: CALL 22169 0 4
13174: ST_TO_ADDR
// ComStop ( flame ) ;
13175: LD_VAR 0 1
13179: PPUSH
13180: CALL_OW 141
// for i in list do
13184: LD_ADDR_VAR 0 6
13188: PUSH
13189: LD_VAR 0 13
13193: PUSH
13194: FOR_IN
13195: IFFALSE 13226
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
13197: LD_VAR 0 1
13201: PPUSH
13202: LD_VAR 0 6
13206: PUSH
13207: LD_INT 1
13209: ARRAY
13210: PPUSH
13211: LD_VAR 0 6
13215: PUSH
13216: LD_INT 2
13218: ARRAY
13219: PPUSH
13220: CALL_OW 176
13224: GO 13194
13226: POP
13227: POP
// repeat wait ( 0 0$1 ) ;
13228: LD_INT 35
13230: PPUSH
13231: CALL_OW 67
// task := GetTaskList ( flame ) ;
13235: LD_ADDR_VAR 0 14
13239: PUSH
13240: LD_VAR 0 1
13244: PPUSH
13245: CALL_OW 437
13249: ST_TO_ADDR
// if not task then
13250: LD_VAR 0 14
13254: NOT
13255: IFFALSE 13259
// exit ;
13257: GO 13393
// if task [ 1 ] [ 1 ] <> | then
13259: LD_VAR 0 14
13263: PUSH
13264: LD_INT 1
13266: ARRAY
13267: PUSH
13268: LD_INT 1
13270: ARRAY
13271: PUSH
13272: LD_STRING |
13274: NONEQUAL
13275: IFFALSE 13279
// exit ;
13277: GO 13393
// _x := task [ 1 ] [ 2 ] ;
13279: LD_ADDR_VAR 0 11
13283: PUSH
13284: LD_VAR 0 14
13288: PUSH
13289: LD_INT 1
13291: ARRAY
13292: PUSH
13293: LD_INT 2
13295: ARRAY
13296: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
13297: LD_ADDR_VAR 0 12
13301: PUSH
13302: LD_VAR 0 14
13306: PUSH
13307: LD_INT 1
13309: ARRAY
13310: PUSH
13311: LD_INT 3
13313: ARRAY
13314: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
13315: LD_VAR 0 11
13319: PPUSH
13320: LD_VAR 0 12
13324: PPUSH
13325: CALL_OW 351
13329: NOT
13330: PUSH
13331: LD_VAR 0 11
13335: PPUSH
13336: LD_VAR 0 12
13340: PPUSH
13341: CALL_OW 554
13345: NOT
13346: OR
13347: IFFALSE 13381
// begin task := Delete ( task , 1 ) ;
13349: LD_ADDR_VAR 0 14
13353: PUSH
13354: LD_VAR 0 14
13358: PPUSH
13359: LD_INT 1
13361: PPUSH
13362: CALL_OW 3
13366: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
13367: LD_VAR 0 1
13371: PPUSH
13372: LD_VAR 0 14
13376: PPUSH
13377: CALL_OW 446
// end ; until not HasTask ( flame ) ;
13381: LD_VAR 0 1
13385: PPUSH
13386: CALL_OW 314
13390: NOT
13391: IFFALSE 13228
// end ;
13393: LD_VAR 0 5
13397: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
13398: LD_EXP 43
13402: NOT
13403: IFFALSE 13453
13405: GO 13407
13407: DISABLE
// begin initHack := true ;
13408: LD_ADDR_EXP 43
13412: PUSH
13413: LD_INT 1
13415: ST_TO_ADDR
// hackTanks := [ ] ;
13416: LD_ADDR_EXP 44
13420: PUSH
13421: EMPTY
13422: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
13423: LD_ADDR_EXP 45
13427: PUSH
13428: EMPTY
13429: ST_TO_ADDR
// hackLimit := 3 ;
13430: LD_ADDR_EXP 46
13434: PUSH
13435: LD_INT 3
13437: ST_TO_ADDR
// hackDist := 12 ;
13438: LD_ADDR_EXP 47
13442: PUSH
13443: LD_INT 12
13445: ST_TO_ADDR
// hackCounter := [ ] ;
13446: LD_ADDR_EXP 48
13450: PUSH
13451: EMPTY
13452: ST_TO_ADDR
// end ;
13453: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
13454: LD_EXP 43
13458: PUSH
13459: LD_INT 34
13461: PUSH
13462: LD_INT 99
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PPUSH
13469: CALL_OW 69
13473: AND
13474: IFFALSE 13727
13476: GO 13478
13478: DISABLE
13479: LD_INT 0
13481: PPUSH
13482: PPUSH
// begin enable ;
13483: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
13484: LD_ADDR_VAR 0 1
13488: PUSH
13489: LD_INT 34
13491: PUSH
13492: LD_INT 99
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PPUSH
13499: CALL_OW 69
13503: PUSH
13504: FOR_IN
13505: IFFALSE 13725
// begin if not i in hackTanks then
13507: LD_VAR 0 1
13511: PUSH
13512: LD_EXP 44
13516: IN
13517: NOT
13518: IFFALSE 13601
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
13520: LD_ADDR_EXP 44
13524: PUSH
13525: LD_EXP 44
13529: PPUSH
13530: LD_EXP 44
13534: PUSH
13535: LD_INT 1
13537: PLUS
13538: PPUSH
13539: LD_VAR 0 1
13543: PPUSH
13544: CALL_OW 1
13548: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
13549: LD_ADDR_EXP 45
13553: PUSH
13554: LD_EXP 45
13558: PPUSH
13559: LD_EXP 45
13563: PUSH
13564: LD_INT 1
13566: PLUS
13567: PPUSH
13568: EMPTY
13569: PPUSH
13570: CALL_OW 1
13574: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
13575: LD_ADDR_EXP 48
13579: PUSH
13580: LD_EXP 48
13584: PPUSH
13585: LD_EXP 48
13589: PUSH
13590: LD_INT 1
13592: PLUS
13593: PPUSH
13594: EMPTY
13595: PPUSH
13596: CALL_OW 1
13600: ST_TO_ADDR
// end ; if not IsOk ( i ) then
13601: LD_VAR 0 1
13605: PPUSH
13606: CALL_OW 302
13610: NOT
13611: IFFALSE 13624
// begin HackUnlinkAll ( i ) ;
13613: LD_VAR 0 1
13617: PPUSH
13618: CALL 13730 0 1
// continue ;
13622: GO 13504
// end ; HackCheckCapturedStatus ( i ) ;
13624: LD_VAR 0 1
13628: PPUSH
13629: CALL 14173 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
13633: LD_ADDR_VAR 0 2
13637: PUSH
13638: LD_INT 81
13640: PUSH
13641: LD_VAR 0 1
13645: PPUSH
13646: CALL_OW 255
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 33
13657: PUSH
13658: LD_INT 3
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 91
13667: PUSH
13668: LD_VAR 0 1
13672: PUSH
13673: LD_EXP 47
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 50
13685: PUSH
13686: EMPTY
13687: LIST
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: PPUSH
13695: CALL_OW 69
13699: ST_TO_ADDR
// if not tmp then
13700: LD_VAR 0 2
13704: NOT
13705: IFFALSE 13709
// continue ;
13707: GO 13504
// HackLink ( i , tmp ) ;
13709: LD_VAR 0 1
13713: PPUSH
13714: LD_VAR 0 2
13718: PPUSH
13719: CALL 13866 0 2
// end ;
13723: GO 13504
13725: POP
13726: POP
// end ;
13727: PPOPN 2
13729: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
13730: LD_INT 0
13732: PPUSH
13733: PPUSH
13734: PPUSH
// if not hack in hackTanks then
13735: LD_VAR 0 1
13739: PUSH
13740: LD_EXP 44
13744: IN
13745: NOT
13746: IFFALSE 13750
// exit ;
13748: GO 13861
// index := GetElementIndex ( hackTanks , hack ) ;
13750: LD_ADDR_VAR 0 4
13754: PUSH
13755: LD_EXP 44
13759: PPUSH
13760: LD_VAR 0 1
13764: PPUSH
13765: CALL 21466 0 2
13769: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
13770: LD_EXP 45
13774: PUSH
13775: LD_VAR 0 4
13779: ARRAY
13780: IFFALSE 13861
// begin for i in hackTanksCaptured [ index ] do
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: LD_EXP 45
13791: PUSH
13792: LD_VAR 0 4
13796: ARRAY
13797: PUSH
13798: FOR_IN
13799: IFFALSE 13825
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
13801: LD_VAR 0 3
13805: PUSH
13806: LD_INT 1
13808: ARRAY
13809: PPUSH
13810: LD_VAR 0 3
13814: PUSH
13815: LD_INT 2
13817: ARRAY
13818: PPUSH
13819: CALL_OW 235
13823: GO 13798
13825: POP
13826: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
13827: LD_ADDR_EXP 45
13831: PUSH
13832: LD_EXP 45
13836: PPUSH
13837: LD_VAR 0 4
13841: PPUSH
13842: EMPTY
13843: PPUSH
13844: CALL_OW 1
13848: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
13849: LD_VAR 0 1
13853: PPUSH
13854: LD_INT 0
13856: PPUSH
13857: CALL_OW 505
// end ; end ;
13861: LD_VAR 0 2
13865: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
13866: LD_INT 0
13868: PPUSH
13869: PPUSH
13870: PPUSH
// if not hack in hackTanks or not vehicles then
13871: LD_VAR 0 1
13875: PUSH
13876: LD_EXP 44
13880: IN
13881: NOT
13882: PUSH
13883: LD_VAR 0 2
13887: NOT
13888: OR
13889: IFFALSE 13893
// exit ;
13891: GO 14168
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
13893: LD_ADDR_VAR 0 2
13897: PUSH
13898: LD_VAR 0 1
13902: PPUSH
13903: LD_VAR 0 2
13907: PPUSH
13908: LD_INT 1
13910: PPUSH
13911: LD_INT 1
13913: PPUSH
13914: CALL 22116 0 4
13918: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
13919: LD_ADDR_VAR 0 5
13923: PUSH
13924: LD_EXP 44
13928: PPUSH
13929: LD_VAR 0 1
13933: PPUSH
13934: CALL 21466 0 2
13938: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
13939: LD_EXP 45
13943: PUSH
13944: LD_VAR 0 5
13948: ARRAY
13949: PUSH
13950: LD_EXP 46
13954: LESS
13955: IFFALSE 14144
// begin for i := 1 to vehicles do
13957: LD_ADDR_VAR 0 4
13961: PUSH
13962: DOUBLE
13963: LD_INT 1
13965: DEC
13966: ST_TO_ADDR
13967: LD_VAR 0 2
13971: PUSH
13972: FOR_TO
13973: IFFALSE 14142
// begin if hackTanksCaptured [ index ] = hackLimit then
13975: LD_EXP 45
13979: PUSH
13980: LD_VAR 0 5
13984: ARRAY
13985: PUSH
13986: LD_EXP 46
13990: EQUAL
13991: IFFALSE 13995
// break ;
13993: GO 14142
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
13995: LD_ADDR_EXP 48
13999: PUSH
14000: LD_EXP 48
14004: PPUSH
14005: LD_VAR 0 5
14009: PPUSH
14010: LD_EXP 48
14014: PUSH
14015: LD_VAR 0 5
14019: ARRAY
14020: PUSH
14021: LD_INT 1
14023: PLUS
14024: PPUSH
14025: CALL_OW 1
14029: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
14030: LD_ADDR_EXP 45
14034: PUSH
14035: LD_EXP 45
14039: PPUSH
14040: LD_VAR 0 5
14044: PUSH
14045: LD_EXP 45
14049: PUSH
14050: LD_VAR 0 5
14054: ARRAY
14055: PUSH
14056: LD_INT 1
14058: PLUS
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PPUSH
14064: LD_VAR 0 2
14068: PUSH
14069: LD_VAR 0 4
14073: ARRAY
14074: PUSH
14075: LD_VAR 0 2
14079: PUSH
14080: LD_VAR 0 4
14084: ARRAY
14085: PPUSH
14086: CALL_OW 255
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PPUSH
14095: CALL 21681 0 3
14099: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
14100: LD_VAR 0 2
14104: PUSH
14105: LD_VAR 0 4
14109: ARRAY
14110: PPUSH
14111: LD_VAR 0 1
14115: PPUSH
14116: CALL_OW 255
14120: PPUSH
14121: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
14125: LD_VAR 0 2
14129: PUSH
14130: LD_VAR 0 4
14134: ARRAY
14135: PPUSH
14136: CALL_OW 141
// end ;
14140: GO 13972
14142: POP
14143: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
14144: LD_VAR 0 1
14148: PPUSH
14149: LD_EXP 45
14153: PUSH
14154: LD_VAR 0 5
14158: ARRAY
14159: PUSH
14160: LD_INT 0
14162: PLUS
14163: PPUSH
14164: CALL_OW 505
// end ;
14168: LD_VAR 0 3
14172: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
14173: LD_INT 0
14175: PPUSH
14176: PPUSH
14177: PPUSH
14178: PPUSH
// if not hack in hackTanks then
14179: LD_VAR 0 1
14183: PUSH
14184: LD_EXP 44
14188: IN
14189: NOT
14190: IFFALSE 14194
// exit ;
14192: GO 14434
// index := GetElementIndex ( hackTanks , hack ) ;
14194: LD_ADDR_VAR 0 4
14198: PUSH
14199: LD_EXP 44
14203: PPUSH
14204: LD_VAR 0 1
14208: PPUSH
14209: CALL 21466 0 2
14213: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
14214: LD_ADDR_VAR 0 3
14218: PUSH
14219: DOUBLE
14220: LD_EXP 45
14224: PUSH
14225: LD_VAR 0 4
14229: ARRAY
14230: INC
14231: ST_TO_ADDR
14232: LD_INT 1
14234: PUSH
14235: FOR_DOWNTO
14236: IFFALSE 14408
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
14238: LD_ADDR_VAR 0 5
14242: PUSH
14243: LD_EXP 45
14247: PUSH
14248: LD_VAR 0 4
14252: ARRAY
14253: PUSH
14254: LD_VAR 0 3
14258: ARRAY
14259: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
14260: LD_VAR 0 5
14264: PUSH
14265: LD_INT 1
14267: ARRAY
14268: PPUSH
14269: CALL_OW 302
14273: NOT
14274: PUSH
14275: LD_VAR 0 5
14279: PUSH
14280: LD_INT 1
14282: ARRAY
14283: PPUSH
14284: CALL_OW 255
14288: PUSH
14289: LD_VAR 0 1
14293: PPUSH
14294: CALL_OW 255
14298: NONEQUAL
14299: OR
14300: IFFALSE 14406
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
14302: LD_VAR 0 5
14306: PUSH
14307: LD_INT 1
14309: ARRAY
14310: PPUSH
14311: CALL_OW 305
14315: PUSH
14316: LD_VAR 0 5
14320: PUSH
14321: LD_INT 1
14323: ARRAY
14324: PPUSH
14325: CALL_OW 255
14329: PUSH
14330: LD_VAR 0 1
14334: PPUSH
14335: CALL_OW 255
14339: EQUAL
14340: AND
14341: IFFALSE 14365
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
14343: LD_VAR 0 5
14347: PUSH
14348: LD_INT 1
14350: ARRAY
14351: PPUSH
14352: LD_VAR 0 5
14356: PUSH
14357: LD_INT 2
14359: ARRAY
14360: PPUSH
14361: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
14365: LD_ADDR_EXP 45
14369: PUSH
14370: LD_EXP 45
14374: PPUSH
14375: LD_VAR 0 4
14379: PPUSH
14380: LD_EXP 45
14384: PUSH
14385: LD_VAR 0 4
14389: ARRAY
14390: PPUSH
14391: LD_VAR 0 3
14395: PPUSH
14396: CALL_OW 3
14400: PPUSH
14401: CALL_OW 1
14405: ST_TO_ADDR
// end ; end ;
14406: GO 14235
14408: POP
14409: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
14410: LD_VAR 0 1
14414: PPUSH
14415: LD_EXP 45
14419: PUSH
14420: LD_VAR 0 4
14424: ARRAY
14425: PUSH
14426: LD_INT 0
14428: PLUS
14429: PPUSH
14430: CALL_OW 505
// end ;
14434: LD_VAR 0 2
14438: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
14439: LD_INT 0
14441: PPUSH
14442: PPUSH
14443: PPUSH
14444: PPUSH
// if not hack in hackTanks then
14445: LD_VAR 0 1
14449: PUSH
14450: LD_EXP 44
14454: IN
14455: NOT
14456: IFFALSE 14460
// exit ;
14458: GO 14545
// index := GetElementIndex ( hackTanks , hack ) ;
14460: LD_ADDR_VAR 0 5
14464: PUSH
14465: LD_EXP 44
14469: PPUSH
14470: LD_VAR 0 1
14474: PPUSH
14475: CALL 21466 0 2
14479: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
14480: LD_ADDR_VAR 0 4
14484: PUSH
14485: DOUBLE
14486: LD_INT 1
14488: DEC
14489: ST_TO_ADDR
14490: LD_EXP 45
14494: PUSH
14495: LD_VAR 0 5
14499: ARRAY
14500: PUSH
14501: FOR_TO
14502: IFFALSE 14543
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
14504: LD_EXP 45
14508: PUSH
14509: LD_VAR 0 5
14513: ARRAY
14514: PUSH
14515: LD_VAR 0 4
14519: ARRAY
14520: PUSH
14521: LD_INT 1
14523: ARRAY
14524: PUSH
14525: LD_VAR 0 2
14529: EQUAL
14530: IFFALSE 14541
// KillUnit ( vehicle ) ;
14532: LD_VAR 0 2
14536: PPUSH
14537: CALL_OW 66
14541: GO 14501
14543: POP
14544: POP
// end ;
14545: LD_VAR 0 3
14549: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
14550: LD_EXP 49
14554: NOT
14555: IFFALSE 14590
14557: GO 14559
14559: DISABLE
// begin initMiner := true ;
14560: LD_ADDR_EXP 49
14564: PUSH
14565: LD_INT 1
14567: ST_TO_ADDR
// minersList := [ ] ;
14568: LD_ADDR_EXP 50
14572: PUSH
14573: EMPTY
14574: ST_TO_ADDR
// minerMinesList := [ ] ;
14575: LD_ADDR_EXP 51
14579: PUSH
14580: EMPTY
14581: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
14582: LD_ADDR_EXP 52
14586: PUSH
14587: LD_INT 5
14589: ST_TO_ADDR
// end ;
14590: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
14591: LD_EXP 49
14595: PUSH
14596: LD_INT 34
14598: PUSH
14599: LD_INT 81
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PPUSH
14606: CALL_OW 69
14610: AND
14611: IFFALSE 15072
14613: GO 14615
14615: DISABLE
14616: LD_INT 0
14618: PPUSH
14619: PPUSH
14620: PPUSH
14621: PPUSH
// begin enable ;
14622: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
14623: LD_ADDR_VAR 0 1
14627: PUSH
14628: LD_INT 34
14630: PUSH
14631: LD_INT 81
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PPUSH
14638: CALL_OW 69
14642: PUSH
14643: FOR_IN
14644: IFFALSE 14716
// begin if not i in minersList then
14646: LD_VAR 0 1
14650: PUSH
14651: LD_EXP 50
14655: IN
14656: NOT
14657: IFFALSE 14714
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
14659: LD_ADDR_EXP 50
14663: PUSH
14664: LD_EXP 50
14668: PPUSH
14669: LD_EXP 50
14673: PUSH
14674: LD_INT 1
14676: PLUS
14677: PPUSH
14678: LD_VAR 0 1
14682: PPUSH
14683: CALL_OW 1
14687: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
14688: LD_ADDR_EXP 51
14692: PUSH
14693: LD_EXP 51
14697: PPUSH
14698: LD_EXP 51
14702: PUSH
14703: LD_INT 1
14705: PLUS
14706: PPUSH
14707: EMPTY
14708: PPUSH
14709: CALL_OW 1
14713: ST_TO_ADDR
// end end ;
14714: GO 14643
14716: POP
14717: POP
// for i := minerMinesList downto 1 do
14718: LD_ADDR_VAR 0 1
14722: PUSH
14723: DOUBLE
14724: LD_EXP 51
14728: INC
14729: ST_TO_ADDR
14730: LD_INT 1
14732: PUSH
14733: FOR_DOWNTO
14734: IFFALSE 15070
// begin if IsLive ( minersList [ i ] ) then
14736: LD_EXP 50
14740: PUSH
14741: LD_VAR 0 1
14745: ARRAY
14746: PPUSH
14747: CALL_OW 300
14751: IFFALSE 14779
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
14753: LD_EXP 50
14757: PUSH
14758: LD_VAR 0 1
14762: ARRAY
14763: PPUSH
14764: LD_EXP 51
14768: PUSH
14769: LD_VAR 0 1
14773: ARRAY
14774: PPUSH
14775: CALL_OW 505
// if not minerMinesList [ i ] then
14779: LD_EXP 51
14783: PUSH
14784: LD_VAR 0 1
14788: ARRAY
14789: NOT
14790: IFFALSE 14794
// continue ;
14792: GO 14733
// for j := minerMinesList [ i ] downto 1 do
14794: LD_ADDR_VAR 0 2
14798: PUSH
14799: DOUBLE
14800: LD_EXP 51
14804: PUSH
14805: LD_VAR 0 1
14809: ARRAY
14810: INC
14811: ST_TO_ADDR
14812: LD_INT 1
14814: PUSH
14815: FOR_DOWNTO
14816: IFFALSE 15066
// begin side := GetSide ( minersList [ i ] ) ;
14818: LD_ADDR_VAR 0 3
14822: PUSH
14823: LD_EXP 50
14827: PUSH
14828: LD_VAR 0 1
14832: ARRAY
14833: PPUSH
14834: CALL_OW 255
14838: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
14839: LD_ADDR_VAR 0 4
14843: PUSH
14844: LD_EXP 51
14848: PUSH
14849: LD_VAR 0 1
14853: ARRAY
14854: PUSH
14855: LD_VAR 0 2
14859: ARRAY
14860: PUSH
14861: LD_INT 1
14863: ARRAY
14864: PPUSH
14865: LD_EXP 51
14869: PUSH
14870: LD_VAR 0 1
14874: ARRAY
14875: PUSH
14876: LD_VAR 0 2
14880: ARRAY
14881: PUSH
14882: LD_INT 2
14884: ARRAY
14885: PPUSH
14886: CALL_OW 428
14890: ST_TO_ADDR
// if not tmp then
14891: LD_VAR 0 4
14895: NOT
14896: IFFALSE 14900
// continue ;
14898: GO 14815
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
14900: LD_VAR 0 4
14904: PUSH
14905: LD_INT 81
14907: PUSH
14908: LD_VAR 0 3
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PPUSH
14917: CALL_OW 69
14921: IN
14922: PUSH
14923: LD_EXP 51
14927: PUSH
14928: LD_VAR 0 1
14932: ARRAY
14933: PUSH
14934: LD_VAR 0 2
14938: ARRAY
14939: PUSH
14940: LD_INT 1
14942: ARRAY
14943: PPUSH
14944: LD_EXP 51
14948: PUSH
14949: LD_VAR 0 1
14953: ARRAY
14954: PUSH
14955: LD_VAR 0 2
14959: ARRAY
14960: PUSH
14961: LD_INT 2
14963: ARRAY
14964: PPUSH
14965: CALL_OW 458
14969: AND
14970: IFFALSE 15064
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
14972: LD_EXP 51
14976: PUSH
14977: LD_VAR 0 1
14981: ARRAY
14982: PUSH
14983: LD_VAR 0 2
14987: ARRAY
14988: PUSH
14989: LD_INT 1
14991: ARRAY
14992: PPUSH
14993: LD_EXP 51
14997: PUSH
14998: LD_VAR 0 1
15002: ARRAY
15003: PUSH
15004: LD_VAR 0 2
15008: ARRAY
15009: PUSH
15010: LD_INT 2
15012: ARRAY
15013: PPUSH
15014: LD_VAR 0 3
15018: PPUSH
15019: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
15023: LD_ADDR_EXP 51
15027: PUSH
15028: LD_EXP 51
15032: PPUSH
15033: LD_VAR 0 1
15037: PPUSH
15038: LD_EXP 51
15042: PUSH
15043: LD_VAR 0 1
15047: ARRAY
15048: PPUSH
15049: LD_VAR 0 2
15053: PPUSH
15054: CALL_OW 3
15058: PPUSH
15059: CALL_OW 1
15063: ST_TO_ADDR
// end ; end ;
15064: GO 14815
15066: POP
15067: POP
// end ;
15068: GO 14733
15070: POP
15071: POP
// end ;
15072: PPOPN 4
15074: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
15075: LD_INT 0
15077: PPUSH
15078: PPUSH
// result := false ;
15079: LD_ADDR_VAR 0 4
15083: PUSH
15084: LD_INT 0
15086: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
15087: LD_VAR 0 1
15091: PPUSH
15092: CALL_OW 264
15096: PUSH
15097: LD_INT 81
15099: EQUAL
15100: NOT
15101: IFFALSE 15105
// exit ;
15103: GO 15345
// index := GetElementIndex ( minersList , unit ) ;
15105: LD_ADDR_VAR 0 5
15109: PUSH
15110: LD_EXP 50
15114: PPUSH
15115: LD_VAR 0 1
15119: PPUSH
15120: CALL 21466 0 2
15124: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
15125: LD_EXP 51
15129: PUSH
15130: LD_VAR 0 5
15134: ARRAY
15135: PUSH
15136: LD_EXP 52
15140: GREATEREQUAL
15141: IFFALSE 15145
// exit ;
15143: GO 15345
// ComMoveXY ( unit , x , y ) ;
15145: LD_VAR 0 1
15149: PPUSH
15150: LD_VAR 0 2
15154: PPUSH
15155: LD_VAR 0 3
15159: PPUSH
15160: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15164: LD_INT 35
15166: PPUSH
15167: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
15171: LD_VAR 0 1
15175: PPUSH
15176: LD_VAR 0 2
15180: PPUSH
15181: LD_VAR 0 3
15185: PPUSH
15186: CALL 53227 0 3
15190: NOT
15191: PUSH
15192: LD_VAR 0 1
15196: PPUSH
15197: CALL_OW 314
15201: AND
15202: IFFALSE 15206
// exit ;
15204: GO 15345
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
15206: LD_VAR 0 2
15210: PPUSH
15211: LD_VAR 0 3
15215: PPUSH
15216: CALL_OW 428
15220: PUSH
15221: LD_VAR 0 1
15225: EQUAL
15226: PUSH
15227: LD_VAR 0 1
15231: PPUSH
15232: CALL_OW 314
15236: NOT
15237: AND
15238: IFFALSE 15164
// PlaySoundXY ( x , y , PlantMine ) ;
15240: LD_VAR 0 2
15244: PPUSH
15245: LD_VAR 0 3
15249: PPUSH
15250: LD_STRING PlantMine
15252: PPUSH
15253: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
15257: LD_VAR 0 2
15261: PPUSH
15262: LD_VAR 0 3
15266: PPUSH
15267: LD_VAR 0 1
15271: PPUSH
15272: CALL_OW 255
15276: PPUSH
15277: LD_INT 0
15279: PPUSH
15280: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
15284: LD_ADDR_EXP 51
15288: PUSH
15289: LD_EXP 51
15293: PPUSH
15294: LD_VAR 0 5
15298: PUSH
15299: LD_EXP 51
15303: PUSH
15304: LD_VAR 0 5
15308: ARRAY
15309: PUSH
15310: LD_INT 1
15312: PLUS
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PPUSH
15318: LD_VAR 0 2
15322: PUSH
15323: LD_VAR 0 3
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PPUSH
15332: CALL 21681 0 3
15336: ST_TO_ADDR
// result := true ;
15337: LD_ADDR_VAR 0 4
15341: PUSH
15342: LD_INT 1
15344: ST_TO_ADDR
// end ;
15345: LD_VAR 0 4
15349: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
15350: LD_INT 0
15352: PPUSH
15353: PPUSH
15354: PPUSH
// if not unit in minersList then
15355: LD_VAR 0 1
15359: PUSH
15360: LD_EXP 50
15364: IN
15365: NOT
15366: IFFALSE 15370
// exit ;
15368: GO 15762
// index := GetElementIndex ( minersList , unit ) ;
15370: LD_ADDR_VAR 0 6
15374: PUSH
15375: LD_EXP 50
15379: PPUSH
15380: LD_VAR 0 1
15384: PPUSH
15385: CALL 21466 0 2
15389: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
15390: LD_ADDR_VAR 0 5
15394: PUSH
15395: DOUBLE
15396: LD_EXP 51
15400: PUSH
15401: LD_VAR 0 6
15405: ARRAY
15406: INC
15407: ST_TO_ADDR
15408: LD_INT 1
15410: PUSH
15411: FOR_DOWNTO
15412: IFFALSE 15573
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
15414: LD_EXP 51
15418: PUSH
15419: LD_VAR 0 6
15423: ARRAY
15424: PUSH
15425: LD_VAR 0 5
15429: ARRAY
15430: PUSH
15431: LD_INT 1
15433: ARRAY
15434: PUSH
15435: LD_VAR 0 2
15439: EQUAL
15440: PUSH
15441: LD_EXP 51
15445: PUSH
15446: LD_VAR 0 6
15450: ARRAY
15451: PUSH
15452: LD_VAR 0 5
15456: ARRAY
15457: PUSH
15458: LD_INT 2
15460: ARRAY
15461: PUSH
15462: LD_VAR 0 3
15466: EQUAL
15467: AND
15468: IFFALSE 15571
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
15470: LD_EXP 51
15474: PUSH
15475: LD_VAR 0 6
15479: ARRAY
15480: PUSH
15481: LD_VAR 0 5
15485: ARRAY
15486: PUSH
15487: LD_INT 1
15489: ARRAY
15490: PPUSH
15491: LD_EXP 51
15495: PUSH
15496: LD_VAR 0 6
15500: ARRAY
15501: PUSH
15502: LD_VAR 0 5
15506: ARRAY
15507: PUSH
15508: LD_INT 2
15510: ARRAY
15511: PPUSH
15512: LD_VAR 0 1
15516: PPUSH
15517: CALL_OW 255
15521: PPUSH
15522: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
15526: LD_ADDR_EXP 51
15530: PUSH
15531: LD_EXP 51
15535: PPUSH
15536: LD_VAR 0 6
15540: PPUSH
15541: LD_EXP 51
15545: PUSH
15546: LD_VAR 0 6
15550: ARRAY
15551: PPUSH
15552: LD_VAR 0 5
15556: PPUSH
15557: CALL_OW 3
15561: PPUSH
15562: CALL_OW 1
15566: ST_TO_ADDR
// exit ;
15567: POP
15568: POP
15569: GO 15762
// end ; end ;
15571: GO 15411
15573: POP
15574: POP
// for i := minerMinesList [ index ] downto 1 do
15575: LD_ADDR_VAR 0 5
15579: PUSH
15580: DOUBLE
15581: LD_EXP 51
15585: PUSH
15586: LD_VAR 0 6
15590: ARRAY
15591: INC
15592: ST_TO_ADDR
15593: LD_INT 1
15595: PUSH
15596: FOR_DOWNTO
15597: IFFALSE 15760
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
15599: LD_EXP 51
15603: PUSH
15604: LD_VAR 0 6
15608: ARRAY
15609: PUSH
15610: LD_VAR 0 5
15614: ARRAY
15615: PUSH
15616: LD_INT 1
15618: ARRAY
15619: PPUSH
15620: LD_EXP 51
15624: PUSH
15625: LD_VAR 0 6
15629: ARRAY
15630: PUSH
15631: LD_VAR 0 5
15635: ARRAY
15636: PUSH
15637: LD_INT 2
15639: ARRAY
15640: PPUSH
15641: LD_VAR 0 2
15645: PPUSH
15646: LD_VAR 0 3
15650: PPUSH
15651: CALL_OW 298
15655: PUSH
15656: LD_INT 6
15658: LESS
15659: IFFALSE 15758
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
15661: LD_EXP 51
15665: PUSH
15666: LD_VAR 0 6
15670: ARRAY
15671: PUSH
15672: LD_VAR 0 5
15676: ARRAY
15677: PUSH
15678: LD_INT 1
15680: ARRAY
15681: PPUSH
15682: LD_EXP 51
15686: PUSH
15687: LD_VAR 0 6
15691: ARRAY
15692: PUSH
15693: LD_VAR 0 5
15697: ARRAY
15698: PUSH
15699: LD_INT 2
15701: ARRAY
15702: PPUSH
15703: LD_VAR 0 1
15707: PPUSH
15708: CALL_OW 255
15712: PPUSH
15713: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
15717: LD_ADDR_EXP 51
15721: PUSH
15722: LD_EXP 51
15726: PPUSH
15727: LD_VAR 0 6
15731: PPUSH
15732: LD_EXP 51
15736: PUSH
15737: LD_VAR 0 6
15741: ARRAY
15742: PPUSH
15743: LD_VAR 0 5
15747: PPUSH
15748: CALL_OW 3
15752: PPUSH
15753: CALL_OW 1
15757: ST_TO_ADDR
// end ; end ;
15758: GO 15596
15760: POP
15761: POP
// end ;
15762: LD_VAR 0 4
15766: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
15767: LD_INT 0
15769: PPUSH
15770: PPUSH
15771: PPUSH
15772: PPUSH
15773: PPUSH
15774: PPUSH
15775: PPUSH
15776: PPUSH
15777: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
15778: LD_VAR 0 1
15782: PPUSH
15783: CALL_OW 264
15787: PUSH
15788: LD_INT 81
15790: EQUAL
15791: NOT
15792: PUSH
15793: LD_VAR 0 1
15797: PUSH
15798: LD_EXP 50
15802: IN
15803: NOT
15804: OR
15805: IFFALSE 15809
// exit ;
15807: GO 16131
// index := GetElementIndex ( minersList , unit ) ;
15809: LD_ADDR_VAR 0 6
15813: PUSH
15814: LD_EXP 50
15818: PPUSH
15819: LD_VAR 0 1
15823: PPUSH
15824: CALL 21466 0 2
15828: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
15829: LD_ADDR_VAR 0 8
15833: PUSH
15834: LD_EXP 52
15838: PUSH
15839: LD_EXP 51
15843: PUSH
15844: LD_VAR 0 6
15848: ARRAY
15849: MINUS
15850: ST_TO_ADDR
// if not minesFreeAmount then
15851: LD_VAR 0 8
15855: NOT
15856: IFFALSE 15860
// exit ;
15858: GO 16131
// tmp := [ ] ;
15860: LD_ADDR_VAR 0 7
15864: PUSH
15865: EMPTY
15866: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
15867: LD_ADDR_VAR 0 5
15871: PUSH
15872: DOUBLE
15873: LD_INT 1
15875: DEC
15876: ST_TO_ADDR
15877: LD_VAR 0 8
15881: PUSH
15882: FOR_TO
15883: IFFALSE 16078
// begin _d := rand ( 0 , 5 ) ;
15885: LD_ADDR_VAR 0 11
15889: PUSH
15890: LD_INT 0
15892: PPUSH
15893: LD_INT 5
15895: PPUSH
15896: CALL_OW 12
15900: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
15901: LD_ADDR_VAR 0 12
15905: PUSH
15906: LD_INT 2
15908: PPUSH
15909: LD_INT 6
15911: PPUSH
15912: CALL_OW 12
15916: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
15917: LD_ADDR_VAR 0 9
15921: PUSH
15922: LD_VAR 0 2
15926: PPUSH
15927: LD_VAR 0 11
15931: PPUSH
15932: LD_VAR 0 12
15936: PPUSH
15937: CALL_OW 272
15941: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
15942: LD_ADDR_VAR 0 10
15946: PUSH
15947: LD_VAR 0 3
15951: PPUSH
15952: LD_VAR 0 11
15956: PPUSH
15957: LD_VAR 0 12
15961: PPUSH
15962: CALL_OW 273
15966: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
15967: LD_VAR 0 9
15971: PPUSH
15972: LD_VAR 0 10
15976: PPUSH
15977: CALL_OW 488
15981: PUSH
15982: LD_VAR 0 9
15986: PUSH
15987: LD_VAR 0 10
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: LD_VAR 0 7
16000: IN
16001: NOT
16002: AND
16003: PUSH
16004: LD_VAR 0 9
16008: PPUSH
16009: LD_VAR 0 10
16013: PPUSH
16014: CALL_OW 458
16018: NOT
16019: AND
16020: IFFALSE 16062
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
16022: LD_ADDR_VAR 0 7
16026: PUSH
16027: LD_VAR 0 7
16031: PPUSH
16032: LD_VAR 0 7
16036: PUSH
16037: LD_INT 1
16039: PLUS
16040: PPUSH
16041: LD_VAR 0 9
16045: PUSH
16046: LD_VAR 0 10
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PPUSH
16055: CALL_OW 1
16059: ST_TO_ADDR
16060: GO 16076
// i := i - 1 ;
16062: LD_ADDR_VAR 0 5
16066: PUSH
16067: LD_VAR 0 5
16071: PUSH
16072: LD_INT 1
16074: MINUS
16075: ST_TO_ADDR
// end ;
16076: GO 15882
16078: POP
16079: POP
// for i in tmp do
16080: LD_ADDR_VAR 0 5
16084: PUSH
16085: LD_VAR 0 7
16089: PUSH
16090: FOR_IN
16091: IFFALSE 16129
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
16093: LD_VAR 0 1
16097: PPUSH
16098: LD_VAR 0 5
16102: PUSH
16103: LD_INT 1
16105: ARRAY
16106: PPUSH
16107: LD_VAR 0 5
16111: PUSH
16112: LD_INT 2
16114: ARRAY
16115: PPUSH
16116: CALL 15075 0 3
16120: NOT
16121: IFFALSE 16127
// exit ;
16123: POP
16124: POP
16125: GO 16131
16127: GO 16090
16129: POP
16130: POP
// end ;
16131: LD_VAR 0 4
16135: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
16136: LD_INT 0
16138: PPUSH
16139: PPUSH
16140: PPUSH
16141: PPUSH
16142: PPUSH
16143: PPUSH
16144: PPUSH
16145: PPUSH
16146: PPUSH
// if GetClass ( unit ) <> class_sniper then
16147: LD_VAR 0 1
16151: PPUSH
16152: CALL_OW 257
16156: PUSH
16157: LD_INT 5
16159: NONEQUAL
16160: IFFALSE 16164
// exit ;
16162: GO 16630
// dist := 8 ;
16164: LD_ADDR_VAR 0 5
16168: PUSH
16169: LD_INT 8
16171: ST_TO_ADDR
// viewRange := 12 ;
16172: LD_ADDR_VAR 0 8
16176: PUSH
16177: LD_INT 12
16179: ST_TO_ADDR
// side := GetSide ( unit ) ;
16180: LD_ADDR_VAR 0 6
16184: PUSH
16185: LD_VAR 0 1
16189: PPUSH
16190: CALL_OW 255
16194: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
16195: LD_INT 61
16197: PPUSH
16198: LD_VAR 0 6
16202: PPUSH
16203: CALL_OW 321
16207: PUSH
16208: LD_INT 2
16210: EQUAL
16211: IFFALSE 16221
// viewRange := 16 ;
16213: LD_ADDR_VAR 0 8
16217: PUSH
16218: LD_INT 16
16220: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
16221: LD_VAR 0 1
16225: PPUSH
16226: LD_VAR 0 2
16230: PPUSH
16231: LD_VAR 0 3
16235: PPUSH
16236: CALL_OW 297
16240: PUSH
16241: LD_VAR 0 5
16245: GREATER
16246: IFFALSE 16325
// begin ComMoveXY ( unit , x , y ) ;
16248: LD_VAR 0 1
16252: PPUSH
16253: LD_VAR 0 2
16257: PPUSH
16258: LD_VAR 0 3
16262: PPUSH
16263: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16267: LD_INT 35
16269: PPUSH
16270: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
16274: LD_VAR 0 1
16278: PPUSH
16279: LD_VAR 0 2
16283: PPUSH
16284: LD_VAR 0 3
16288: PPUSH
16289: CALL 53227 0 3
16293: NOT
16294: IFFALSE 16298
// exit ;
16296: GO 16630
// until GetDistUnitXY ( unit , x , y ) < dist ;
16298: LD_VAR 0 1
16302: PPUSH
16303: LD_VAR 0 2
16307: PPUSH
16308: LD_VAR 0 3
16312: PPUSH
16313: CALL_OW 297
16317: PUSH
16318: LD_VAR 0 5
16322: LESS
16323: IFFALSE 16267
// end ; ComTurnXY ( unit , x , y ) ;
16325: LD_VAR 0 1
16329: PPUSH
16330: LD_VAR 0 2
16334: PPUSH
16335: LD_VAR 0 3
16339: PPUSH
16340: CALL_OW 118
// repeat if Multiplayer then
16344: LD_OWVAR 4
16348: IFFALSE 16359
// wait ( 35 ) else
16350: LD_INT 35
16352: PPUSH
16353: CALL_OW 67
16357: GO 16366
// wait ( 5 ) ;
16359: LD_INT 5
16361: PPUSH
16362: CALL_OW 67
// _d := GetDir ( unit ) ;
16366: LD_ADDR_VAR 0 11
16370: PUSH
16371: LD_VAR 0 1
16375: PPUSH
16376: CALL_OW 254
16380: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
16381: LD_ADDR_VAR 0 7
16385: PUSH
16386: LD_VAR 0 1
16390: PPUSH
16391: CALL_OW 250
16395: PPUSH
16396: LD_VAR 0 1
16400: PPUSH
16401: CALL_OW 251
16405: PPUSH
16406: LD_VAR 0 2
16410: PPUSH
16411: LD_VAR 0 3
16415: PPUSH
16416: CALL 55835 0 4
16420: ST_TO_ADDR
// until dir = _d ;
16421: LD_VAR 0 7
16425: PUSH
16426: LD_VAR 0 11
16430: EQUAL
16431: IFFALSE 16344
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
16433: LD_ADDR_VAR 0 9
16437: PUSH
16438: LD_VAR 0 1
16442: PPUSH
16443: CALL_OW 250
16447: PPUSH
16448: LD_VAR 0 7
16452: PPUSH
16453: LD_VAR 0 5
16457: PPUSH
16458: CALL_OW 272
16462: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
16463: LD_ADDR_VAR 0 10
16467: PUSH
16468: LD_VAR 0 1
16472: PPUSH
16473: CALL_OW 251
16477: PPUSH
16478: LD_VAR 0 7
16482: PPUSH
16483: LD_VAR 0 5
16487: PPUSH
16488: CALL_OW 273
16492: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16493: LD_VAR 0 9
16497: PPUSH
16498: LD_VAR 0 10
16502: PPUSH
16503: CALL_OW 488
16507: NOT
16508: IFFALSE 16512
// exit ;
16510: GO 16630
// ComAnimCustom ( unit , 1 ) ;
16512: LD_VAR 0 1
16516: PPUSH
16517: LD_INT 1
16519: PPUSH
16520: CALL_OW 592
// p := 0 ;
16524: LD_ADDR_VAR 0 12
16528: PUSH
16529: LD_INT 0
16531: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
16532: LD_VAR 0 9
16536: PPUSH
16537: LD_VAR 0 10
16541: PPUSH
16542: LD_VAR 0 6
16546: PPUSH
16547: LD_VAR 0 8
16551: PPUSH
16552: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
16556: LD_INT 35
16558: PPUSH
16559: CALL_OW 67
// p := Inc ( p ) ;
16563: LD_ADDR_VAR 0 12
16567: PUSH
16568: LD_VAR 0 12
16572: PPUSH
16573: CALL 55791 0 1
16577: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
16578: LD_VAR 0 12
16582: PUSH
16583: LD_INT 3
16585: EQUAL
16586: PUSH
16587: LD_VAR 0 1
16591: PPUSH
16592: CALL_OW 302
16596: NOT
16597: OR
16598: PUSH
16599: LD_VAR 0 1
16603: PPUSH
16604: CALL_OW 301
16608: OR
16609: IFFALSE 16556
// RemoveSeeing ( _x , _y , side ) ;
16611: LD_VAR 0 9
16615: PPUSH
16616: LD_VAR 0 10
16620: PPUSH
16621: LD_VAR 0 6
16625: PPUSH
16626: CALL_OW 331
// end ; end_of_file
16630: LD_VAR 0 4
16634: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16635: LD_INT 0
16637: PPUSH
16638: PPUSH
// if exist_mode then
16639: LD_VAR 0 2
16643: IFFALSE 16689
// begin unit := CreateCharacter ( prefix & ident ) ;
16645: LD_ADDR_VAR 0 5
16649: PUSH
16650: LD_VAR 0 3
16654: PUSH
16655: LD_VAR 0 1
16659: STR
16660: PPUSH
16661: CALL_OW 34
16665: ST_TO_ADDR
// if unit then
16666: LD_VAR 0 5
16670: IFFALSE 16687
// DeleteCharacters ( prefix & ident ) ;
16672: LD_VAR 0 3
16676: PUSH
16677: LD_VAR 0 1
16681: STR
16682: PPUSH
16683: CALL_OW 40
// end else
16687: GO 16704
// unit := NewCharacter ( ident ) ;
16689: LD_ADDR_VAR 0 5
16693: PUSH
16694: LD_VAR 0 1
16698: PPUSH
16699: CALL_OW 25
16703: ST_TO_ADDR
// result := unit ;
16704: LD_ADDR_VAR 0 4
16708: PUSH
16709: LD_VAR 0 5
16713: ST_TO_ADDR
// end ;
16714: LD_VAR 0 4
16718: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
16719: LD_INT 0
16721: PPUSH
16722: PPUSH
// if exist_mode then
16723: LD_VAR 0 2
16727: IFFALSE 16752
// unit := CreateCharacter ( prefix & ident ) else
16729: LD_ADDR_VAR 0 5
16733: PUSH
16734: LD_VAR 0 3
16738: PUSH
16739: LD_VAR 0 1
16743: STR
16744: PPUSH
16745: CALL_OW 34
16749: ST_TO_ADDR
16750: GO 16767
// unit := NewCharacter ( ident ) ;
16752: LD_ADDR_VAR 0 5
16756: PUSH
16757: LD_VAR 0 1
16761: PPUSH
16762: CALL_OW 25
16766: ST_TO_ADDR
// result := unit ;
16767: LD_ADDR_VAR 0 4
16771: PUSH
16772: LD_VAR 0 5
16776: ST_TO_ADDR
// end ;
16777: LD_VAR 0 4
16781: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16782: LD_INT 0
16784: PPUSH
16785: PPUSH
// if not side or not nation then
16786: LD_VAR 0 1
16790: NOT
16791: PUSH
16792: LD_VAR 0 2
16796: NOT
16797: OR
16798: IFFALSE 16802
// exit ;
16800: GO 17570
// case nation of nation_american :
16802: LD_VAR 0 2
16806: PUSH
16807: LD_INT 1
16809: DOUBLE
16810: EQUAL
16811: IFTRUE 16815
16813: GO 17029
16815: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16816: LD_ADDR_VAR 0 4
16820: PUSH
16821: LD_INT 35
16823: PUSH
16824: LD_INT 45
16826: PUSH
16827: LD_INT 46
16829: PUSH
16830: LD_INT 47
16832: PUSH
16833: LD_INT 82
16835: PUSH
16836: LD_INT 83
16838: PUSH
16839: LD_INT 84
16841: PUSH
16842: LD_INT 85
16844: PUSH
16845: LD_INT 86
16847: PUSH
16848: LD_INT 1
16850: PUSH
16851: LD_INT 2
16853: PUSH
16854: LD_INT 6
16856: PUSH
16857: LD_INT 15
16859: PUSH
16860: LD_INT 16
16862: PUSH
16863: LD_INT 7
16865: PUSH
16866: LD_INT 12
16868: PUSH
16869: LD_INT 13
16871: PUSH
16872: LD_INT 10
16874: PUSH
16875: LD_INT 14
16877: PUSH
16878: LD_INT 20
16880: PUSH
16881: LD_INT 21
16883: PUSH
16884: LD_INT 22
16886: PUSH
16887: LD_INT 25
16889: PUSH
16890: LD_INT 32
16892: PUSH
16893: LD_INT 27
16895: PUSH
16896: LD_INT 36
16898: PUSH
16899: LD_INT 69
16901: PUSH
16902: LD_INT 39
16904: PUSH
16905: LD_INT 34
16907: PUSH
16908: LD_INT 40
16910: PUSH
16911: LD_INT 48
16913: PUSH
16914: LD_INT 49
16916: PUSH
16917: LD_INT 50
16919: PUSH
16920: LD_INT 51
16922: PUSH
16923: LD_INT 52
16925: PUSH
16926: LD_INT 53
16928: PUSH
16929: LD_INT 54
16931: PUSH
16932: LD_INT 55
16934: PUSH
16935: LD_INT 56
16937: PUSH
16938: LD_INT 57
16940: PUSH
16941: LD_INT 58
16943: PUSH
16944: LD_INT 59
16946: PUSH
16947: LD_INT 60
16949: PUSH
16950: LD_INT 61
16952: PUSH
16953: LD_INT 62
16955: PUSH
16956: LD_INT 80
16958: PUSH
16959: LD_INT 82
16961: PUSH
16962: LD_INT 83
16964: PUSH
16965: LD_INT 84
16967: PUSH
16968: LD_INT 85
16970: PUSH
16971: LD_INT 86
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: ST_TO_ADDR
17027: GO 17494
17029: LD_INT 2
17031: DOUBLE
17032: EQUAL
17033: IFTRUE 17037
17035: GO 17263
17037: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17038: LD_ADDR_VAR 0 4
17042: PUSH
17043: LD_INT 35
17045: PUSH
17046: LD_INT 45
17048: PUSH
17049: LD_INT 46
17051: PUSH
17052: LD_INT 47
17054: PUSH
17055: LD_INT 82
17057: PUSH
17058: LD_INT 83
17060: PUSH
17061: LD_INT 84
17063: PUSH
17064: LD_INT 85
17066: PUSH
17067: LD_INT 87
17069: PUSH
17070: LD_INT 70
17072: PUSH
17073: LD_INT 1
17075: PUSH
17076: LD_INT 11
17078: PUSH
17079: LD_INT 3
17081: PUSH
17082: LD_INT 4
17084: PUSH
17085: LD_INT 5
17087: PUSH
17088: LD_INT 6
17090: PUSH
17091: LD_INT 15
17093: PUSH
17094: LD_INT 18
17096: PUSH
17097: LD_INT 7
17099: PUSH
17100: LD_INT 17
17102: PUSH
17103: LD_INT 8
17105: PUSH
17106: LD_INT 20
17108: PUSH
17109: LD_INT 21
17111: PUSH
17112: LD_INT 22
17114: PUSH
17115: LD_INT 72
17117: PUSH
17118: LD_INT 26
17120: PUSH
17121: LD_INT 69
17123: PUSH
17124: LD_INT 39
17126: PUSH
17127: LD_INT 40
17129: PUSH
17130: LD_INT 41
17132: PUSH
17133: LD_INT 42
17135: PUSH
17136: LD_INT 43
17138: PUSH
17139: LD_INT 48
17141: PUSH
17142: LD_INT 49
17144: PUSH
17145: LD_INT 50
17147: PUSH
17148: LD_INT 51
17150: PUSH
17151: LD_INT 52
17153: PUSH
17154: LD_INT 53
17156: PUSH
17157: LD_INT 54
17159: PUSH
17160: LD_INT 55
17162: PUSH
17163: LD_INT 56
17165: PUSH
17166: LD_INT 60
17168: PUSH
17169: LD_INT 61
17171: PUSH
17172: LD_INT 62
17174: PUSH
17175: LD_INT 66
17177: PUSH
17178: LD_INT 67
17180: PUSH
17181: LD_INT 68
17183: PUSH
17184: LD_INT 81
17186: PUSH
17187: LD_INT 82
17189: PUSH
17190: LD_INT 83
17192: PUSH
17193: LD_INT 84
17195: PUSH
17196: LD_INT 85
17198: PUSH
17199: LD_INT 87
17201: PUSH
17202: LD_INT 88
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: ST_TO_ADDR
17261: GO 17494
17263: LD_INT 3
17265: DOUBLE
17266: EQUAL
17267: IFTRUE 17271
17269: GO 17493
17271: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17272: LD_ADDR_VAR 0 4
17276: PUSH
17277: LD_INT 46
17279: PUSH
17280: LD_INT 47
17282: PUSH
17283: LD_INT 1
17285: PUSH
17286: LD_INT 2
17288: PUSH
17289: LD_INT 82
17291: PUSH
17292: LD_INT 83
17294: PUSH
17295: LD_INT 84
17297: PUSH
17298: LD_INT 85
17300: PUSH
17301: LD_INT 86
17303: PUSH
17304: LD_INT 11
17306: PUSH
17307: LD_INT 9
17309: PUSH
17310: LD_INT 20
17312: PUSH
17313: LD_INT 19
17315: PUSH
17316: LD_INT 21
17318: PUSH
17319: LD_INT 24
17321: PUSH
17322: LD_INT 22
17324: PUSH
17325: LD_INT 25
17327: PUSH
17328: LD_INT 28
17330: PUSH
17331: LD_INT 29
17333: PUSH
17334: LD_INT 30
17336: PUSH
17337: LD_INT 31
17339: PUSH
17340: LD_INT 37
17342: PUSH
17343: LD_INT 38
17345: PUSH
17346: LD_INT 32
17348: PUSH
17349: LD_INT 27
17351: PUSH
17352: LD_INT 33
17354: PUSH
17355: LD_INT 69
17357: PUSH
17358: LD_INT 39
17360: PUSH
17361: LD_INT 34
17363: PUSH
17364: LD_INT 40
17366: PUSH
17367: LD_INT 71
17369: PUSH
17370: LD_INT 23
17372: PUSH
17373: LD_INT 44
17375: PUSH
17376: LD_INT 48
17378: PUSH
17379: LD_INT 49
17381: PUSH
17382: LD_INT 50
17384: PUSH
17385: LD_INT 51
17387: PUSH
17388: LD_INT 52
17390: PUSH
17391: LD_INT 53
17393: PUSH
17394: LD_INT 54
17396: PUSH
17397: LD_INT 55
17399: PUSH
17400: LD_INT 56
17402: PUSH
17403: LD_INT 57
17405: PUSH
17406: LD_INT 58
17408: PUSH
17409: LD_INT 59
17411: PUSH
17412: LD_INT 63
17414: PUSH
17415: LD_INT 64
17417: PUSH
17418: LD_INT 65
17420: PUSH
17421: LD_INT 82
17423: PUSH
17424: LD_INT 83
17426: PUSH
17427: LD_INT 84
17429: PUSH
17430: LD_INT 85
17432: PUSH
17433: LD_INT 86
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: ST_TO_ADDR
17491: GO 17494
17493: POP
// if state > - 1 and state < 3 then
17494: LD_VAR 0 3
17498: PUSH
17499: LD_INT 1
17501: NEG
17502: GREATER
17503: PUSH
17504: LD_VAR 0 3
17508: PUSH
17509: LD_INT 3
17511: LESS
17512: AND
17513: IFFALSE 17570
// for i in result do
17515: LD_ADDR_VAR 0 5
17519: PUSH
17520: LD_VAR 0 4
17524: PUSH
17525: FOR_IN
17526: IFFALSE 17568
// if GetTech ( i , side ) <> state then
17528: LD_VAR 0 5
17532: PPUSH
17533: LD_VAR 0 1
17537: PPUSH
17538: CALL_OW 321
17542: PUSH
17543: LD_VAR 0 3
17547: NONEQUAL
17548: IFFALSE 17566
// result := result diff i ;
17550: LD_ADDR_VAR 0 4
17554: PUSH
17555: LD_VAR 0 4
17559: PUSH
17560: LD_VAR 0 5
17564: DIFF
17565: ST_TO_ADDR
17566: GO 17525
17568: POP
17569: POP
// end ;
17570: LD_VAR 0 4
17574: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17575: LD_INT 0
17577: PPUSH
17578: PPUSH
17579: PPUSH
// result := true ;
17580: LD_ADDR_VAR 0 3
17584: PUSH
17585: LD_INT 1
17587: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17588: LD_ADDR_VAR 0 5
17592: PUSH
17593: LD_VAR 0 2
17597: PPUSH
17598: CALL_OW 480
17602: ST_TO_ADDR
// if not tmp then
17603: LD_VAR 0 5
17607: NOT
17608: IFFALSE 17612
// exit ;
17610: GO 17661
// for i in tmp do
17612: LD_ADDR_VAR 0 4
17616: PUSH
17617: LD_VAR 0 5
17621: PUSH
17622: FOR_IN
17623: IFFALSE 17659
// if GetTech ( i , side ) <> state_researched then
17625: LD_VAR 0 4
17629: PPUSH
17630: LD_VAR 0 1
17634: PPUSH
17635: CALL_OW 321
17639: PUSH
17640: LD_INT 2
17642: NONEQUAL
17643: IFFALSE 17657
// begin result := false ;
17645: LD_ADDR_VAR 0 3
17649: PUSH
17650: LD_INT 0
17652: ST_TO_ADDR
// exit ;
17653: POP
17654: POP
17655: GO 17661
// end ;
17657: GO 17622
17659: POP
17660: POP
// end ;
17661: LD_VAR 0 3
17665: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17666: LD_INT 0
17668: PPUSH
17669: PPUSH
17670: PPUSH
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
17675: PPUSH
17676: PPUSH
17677: PPUSH
17678: PPUSH
17679: PPUSH
17680: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17681: LD_VAR 0 1
17685: NOT
17686: PUSH
17687: LD_VAR 0 1
17691: PPUSH
17692: CALL_OW 257
17696: PUSH
17697: LD_INT 9
17699: NONEQUAL
17700: OR
17701: IFFALSE 17705
// exit ;
17703: GO 18278
// side := GetSide ( unit ) ;
17705: LD_ADDR_VAR 0 9
17709: PUSH
17710: LD_VAR 0 1
17714: PPUSH
17715: CALL_OW 255
17719: ST_TO_ADDR
// tech_space := tech_spacanom ;
17720: LD_ADDR_VAR 0 12
17724: PUSH
17725: LD_INT 29
17727: ST_TO_ADDR
// tech_time := tech_taurad ;
17728: LD_ADDR_VAR 0 13
17732: PUSH
17733: LD_INT 28
17735: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17736: LD_ADDR_VAR 0 11
17740: PUSH
17741: LD_VAR 0 1
17745: PPUSH
17746: CALL_OW 310
17750: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17751: LD_VAR 0 11
17755: PPUSH
17756: CALL_OW 247
17760: PUSH
17761: LD_INT 2
17763: EQUAL
17764: IFFALSE 17768
// exit ;
17766: GO 18278
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17768: LD_ADDR_VAR 0 8
17772: PUSH
17773: LD_INT 81
17775: PUSH
17776: LD_VAR 0 9
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 3
17787: PUSH
17788: LD_INT 21
17790: PUSH
17791: LD_INT 3
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PPUSH
17806: CALL_OW 69
17810: ST_TO_ADDR
// if not tmp then
17811: LD_VAR 0 8
17815: NOT
17816: IFFALSE 17820
// exit ;
17818: GO 18278
// if in_unit then
17820: LD_VAR 0 11
17824: IFFALSE 17848
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17826: LD_ADDR_VAR 0 10
17830: PUSH
17831: LD_VAR 0 8
17835: PPUSH
17836: LD_VAR 0 11
17840: PPUSH
17841: CALL_OW 74
17845: ST_TO_ADDR
17846: GO 17868
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17848: LD_ADDR_VAR 0 10
17852: PUSH
17853: LD_VAR 0 8
17857: PPUSH
17858: LD_VAR 0 1
17862: PPUSH
17863: CALL_OW 74
17867: ST_TO_ADDR
// if not enemy then
17868: LD_VAR 0 10
17872: NOT
17873: IFFALSE 17877
// exit ;
17875: GO 18278
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17877: LD_VAR 0 11
17881: PUSH
17882: LD_VAR 0 11
17886: PPUSH
17887: LD_VAR 0 10
17891: PPUSH
17892: CALL_OW 296
17896: PUSH
17897: LD_INT 13
17899: GREATER
17900: AND
17901: PUSH
17902: LD_VAR 0 1
17906: PPUSH
17907: LD_VAR 0 10
17911: PPUSH
17912: CALL_OW 296
17916: PUSH
17917: LD_INT 12
17919: GREATER
17920: OR
17921: IFFALSE 17925
// exit ;
17923: GO 18278
// missile := [ 1 ] ;
17925: LD_ADDR_VAR 0 14
17929: PUSH
17930: LD_INT 1
17932: PUSH
17933: EMPTY
17934: LIST
17935: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17936: LD_VAR 0 9
17940: PPUSH
17941: LD_VAR 0 12
17945: PPUSH
17946: CALL_OW 325
17950: IFFALSE 17979
// missile := Replace ( missile , missile + 1 , 2 ) ;
17952: LD_ADDR_VAR 0 14
17956: PUSH
17957: LD_VAR 0 14
17961: PPUSH
17962: LD_VAR 0 14
17966: PUSH
17967: LD_INT 1
17969: PLUS
17970: PPUSH
17971: LD_INT 2
17973: PPUSH
17974: CALL_OW 1
17978: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17979: LD_VAR 0 9
17983: PPUSH
17984: LD_VAR 0 13
17988: PPUSH
17989: CALL_OW 325
17993: PUSH
17994: LD_VAR 0 10
17998: PPUSH
17999: CALL_OW 255
18003: PPUSH
18004: LD_VAR 0 13
18008: PPUSH
18009: CALL_OW 325
18013: NOT
18014: AND
18015: IFFALSE 18044
// missile := Replace ( missile , missile + 1 , 3 ) ;
18017: LD_ADDR_VAR 0 14
18021: PUSH
18022: LD_VAR 0 14
18026: PPUSH
18027: LD_VAR 0 14
18031: PUSH
18032: LD_INT 1
18034: PLUS
18035: PPUSH
18036: LD_INT 3
18038: PPUSH
18039: CALL_OW 1
18043: ST_TO_ADDR
// if missile < 2 then
18044: LD_VAR 0 14
18048: PUSH
18049: LD_INT 2
18051: LESS
18052: IFFALSE 18056
// exit ;
18054: GO 18278
// x := GetX ( enemy ) ;
18056: LD_ADDR_VAR 0 4
18060: PUSH
18061: LD_VAR 0 10
18065: PPUSH
18066: CALL_OW 250
18070: ST_TO_ADDR
// y := GetY ( enemy ) ;
18071: LD_ADDR_VAR 0 5
18075: PUSH
18076: LD_VAR 0 10
18080: PPUSH
18081: CALL_OW 251
18085: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18086: LD_ADDR_VAR 0 6
18090: PUSH
18091: LD_VAR 0 4
18095: PUSH
18096: LD_INT 1
18098: NEG
18099: PPUSH
18100: LD_INT 1
18102: PPUSH
18103: CALL_OW 12
18107: PLUS
18108: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18109: LD_ADDR_VAR 0 7
18113: PUSH
18114: LD_VAR 0 5
18118: PUSH
18119: LD_INT 1
18121: NEG
18122: PPUSH
18123: LD_INT 1
18125: PPUSH
18126: CALL_OW 12
18130: PLUS
18131: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18132: LD_VAR 0 6
18136: PPUSH
18137: LD_VAR 0 7
18141: PPUSH
18142: CALL_OW 488
18146: NOT
18147: IFFALSE 18169
// begin _x := x ;
18149: LD_ADDR_VAR 0 6
18153: PUSH
18154: LD_VAR 0 4
18158: ST_TO_ADDR
// _y := y ;
18159: LD_ADDR_VAR 0 7
18163: PUSH
18164: LD_VAR 0 5
18168: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18169: LD_ADDR_VAR 0 3
18173: PUSH
18174: LD_INT 1
18176: PPUSH
18177: LD_VAR 0 14
18181: PPUSH
18182: CALL_OW 12
18186: ST_TO_ADDR
// case i of 1 :
18187: LD_VAR 0 3
18191: PUSH
18192: LD_INT 1
18194: DOUBLE
18195: EQUAL
18196: IFTRUE 18200
18198: GO 18217
18200: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18201: LD_VAR 0 1
18205: PPUSH
18206: LD_VAR 0 10
18210: PPUSH
18211: CALL_OW 115
18215: GO 18278
18217: LD_INT 2
18219: DOUBLE
18220: EQUAL
18221: IFTRUE 18225
18223: GO 18247
18225: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18226: LD_VAR 0 1
18230: PPUSH
18231: LD_VAR 0 6
18235: PPUSH
18236: LD_VAR 0 7
18240: PPUSH
18241: CALL_OW 153
18245: GO 18278
18247: LD_INT 3
18249: DOUBLE
18250: EQUAL
18251: IFTRUE 18255
18253: GO 18277
18255: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18256: LD_VAR 0 1
18260: PPUSH
18261: LD_VAR 0 6
18265: PPUSH
18266: LD_VAR 0 7
18270: PPUSH
18271: CALL_OW 154
18275: GO 18278
18277: POP
// end ;
18278: LD_VAR 0 2
18282: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18283: LD_INT 0
18285: PPUSH
18286: PPUSH
18287: PPUSH
18288: PPUSH
18289: PPUSH
18290: PPUSH
// if not unit or not building then
18291: LD_VAR 0 1
18295: NOT
18296: PUSH
18297: LD_VAR 0 2
18301: NOT
18302: OR
18303: IFFALSE 18307
// exit ;
18305: GO 18465
// x := GetX ( building ) ;
18307: LD_ADDR_VAR 0 5
18311: PUSH
18312: LD_VAR 0 2
18316: PPUSH
18317: CALL_OW 250
18321: ST_TO_ADDR
// y := GetY ( building ) ;
18322: LD_ADDR_VAR 0 6
18326: PUSH
18327: LD_VAR 0 2
18331: PPUSH
18332: CALL_OW 251
18336: ST_TO_ADDR
// for i = 0 to 5 do
18337: LD_ADDR_VAR 0 4
18341: PUSH
18342: DOUBLE
18343: LD_INT 0
18345: DEC
18346: ST_TO_ADDR
18347: LD_INT 5
18349: PUSH
18350: FOR_TO
18351: IFFALSE 18463
// begin _x := ShiftX ( x , i , 3 ) ;
18353: LD_ADDR_VAR 0 7
18357: PUSH
18358: LD_VAR 0 5
18362: PPUSH
18363: LD_VAR 0 4
18367: PPUSH
18368: LD_INT 3
18370: PPUSH
18371: CALL_OW 272
18375: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18376: LD_ADDR_VAR 0 8
18380: PUSH
18381: LD_VAR 0 6
18385: PPUSH
18386: LD_VAR 0 4
18390: PPUSH
18391: LD_INT 3
18393: PPUSH
18394: CALL_OW 273
18398: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18399: LD_VAR 0 7
18403: PPUSH
18404: LD_VAR 0 8
18408: PPUSH
18409: CALL_OW 488
18413: NOT
18414: IFFALSE 18418
// continue ;
18416: GO 18350
// if HexInfo ( _x , _y ) = 0 then
18418: LD_VAR 0 7
18422: PPUSH
18423: LD_VAR 0 8
18427: PPUSH
18428: CALL_OW 428
18432: PUSH
18433: LD_INT 0
18435: EQUAL
18436: IFFALSE 18461
// begin ComMoveXY ( unit , _x , _y ) ;
18438: LD_VAR 0 1
18442: PPUSH
18443: LD_VAR 0 7
18447: PPUSH
18448: LD_VAR 0 8
18452: PPUSH
18453: CALL_OW 111
// exit ;
18457: POP
18458: POP
18459: GO 18465
// end ; end ;
18461: GO 18350
18463: POP
18464: POP
// end ;
18465: LD_VAR 0 3
18469: RET
// export function ScanBase ( side , base_area ) ; begin
18470: LD_INT 0
18472: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18473: LD_ADDR_VAR 0 3
18477: PUSH
18478: LD_VAR 0 2
18482: PPUSH
18483: LD_INT 81
18485: PUSH
18486: LD_VAR 0 1
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PPUSH
18495: CALL_OW 70
18499: ST_TO_ADDR
// end ;
18500: LD_VAR 0 3
18504: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18505: LD_INT 0
18507: PPUSH
18508: PPUSH
18509: PPUSH
18510: PPUSH
// result := false ;
18511: LD_ADDR_VAR 0 2
18515: PUSH
18516: LD_INT 0
18518: ST_TO_ADDR
// side := GetSide ( unit ) ;
18519: LD_ADDR_VAR 0 3
18523: PUSH
18524: LD_VAR 0 1
18528: PPUSH
18529: CALL_OW 255
18533: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18534: LD_ADDR_VAR 0 4
18538: PUSH
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 248
18548: ST_TO_ADDR
// case nat of 1 :
18549: LD_VAR 0 4
18553: PUSH
18554: LD_INT 1
18556: DOUBLE
18557: EQUAL
18558: IFTRUE 18562
18560: GO 18573
18562: POP
// tech := tech_lassight ; 2 :
18563: LD_ADDR_VAR 0 5
18567: PUSH
18568: LD_INT 12
18570: ST_TO_ADDR
18571: GO 18612
18573: LD_INT 2
18575: DOUBLE
18576: EQUAL
18577: IFTRUE 18581
18579: GO 18592
18581: POP
// tech := tech_mortar ; 3 :
18582: LD_ADDR_VAR 0 5
18586: PUSH
18587: LD_INT 41
18589: ST_TO_ADDR
18590: GO 18612
18592: LD_INT 3
18594: DOUBLE
18595: EQUAL
18596: IFTRUE 18600
18598: GO 18611
18600: POP
// tech := tech_bazooka ; end ;
18601: LD_ADDR_VAR 0 5
18605: PUSH
18606: LD_INT 44
18608: ST_TO_ADDR
18609: GO 18612
18611: POP
// if Researched ( side , tech ) then
18612: LD_VAR 0 3
18616: PPUSH
18617: LD_VAR 0 5
18621: PPUSH
18622: CALL_OW 325
18626: IFFALSE 18653
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18628: LD_ADDR_VAR 0 2
18632: PUSH
18633: LD_INT 5
18635: PUSH
18636: LD_INT 8
18638: PUSH
18639: LD_INT 9
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: LIST
18646: PUSH
18647: LD_VAR 0 4
18651: ARRAY
18652: ST_TO_ADDR
// end ;
18653: LD_VAR 0 2
18657: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18658: LD_INT 0
18660: PPUSH
18661: PPUSH
18662: PPUSH
// if not mines then
18663: LD_VAR 0 2
18667: NOT
18668: IFFALSE 18672
// exit ;
18670: GO 18816
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18672: LD_ADDR_VAR 0 5
18676: PUSH
18677: LD_INT 81
18679: PUSH
18680: LD_VAR 0 1
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 3
18691: PUSH
18692: LD_INT 21
18694: PUSH
18695: LD_INT 3
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PPUSH
18710: CALL_OW 69
18714: ST_TO_ADDR
// for i in mines do
18715: LD_ADDR_VAR 0 4
18719: PUSH
18720: LD_VAR 0 2
18724: PUSH
18725: FOR_IN
18726: IFFALSE 18814
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18728: LD_VAR 0 4
18732: PUSH
18733: LD_INT 1
18735: ARRAY
18736: PPUSH
18737: LD_VAR 0 4
18741: PUSH
18742: LD_INT 2
18744: ARRAY
18745: PPUSH
18746: CALL_OW 458
18750: NOT
18751: IFFALSE 18755
// continue ;
18753: GO 18725
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18755: LD_VAR 0 4
18759: PUSH
18760: LD_INT 1
18762: ARRAY
18763: PPUSH
18764: LD_VAR 0 4
18768: PUSH
18769: LD_INT 2
18771: ARRAY
18772: PPUSH
18773: CALL_OW 428
18777: PUSH
18778: LD_VAR 0 5
18782: IN
18783: IFFALSE 18812
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18785: LD_VAR 0 4
18789: PUSH
18790: LD_INT 1
18792: ARRAY
18793: PPUSH
18794: LD_VAR 0 4
18798: PUSH
18799: LD_INT 2
18801: ARRAY
18802: PPUSH
18803: LD_VAR 0 1
18807: PPUSH
18808: CALL_OW 456
// end ;
18812: GO 18725
18814: POP
18815: POP
// end ;
18816: LD_VAR 0 3
18820: RET
// export function Count ( array ) ; begin
18821: LD_INT 0
18823: PPUSH
// result := array + 0 ;
18824: LD_ADDR_VAR 0 2
18828: PUSH
18829: LD_VAR 0 1
18833: PUSH
18834: LD_INT 0
18836: PLUS
18837: ST_TO_ADDR
// end ;
18838: LD_VAR 0 2
18842: RET
// export function IsEmpty ( building ) ; begin
18843: LD_INT 0
18845: PPUSH
// if not building then
18846: LD_VAR 0 1
18850: NOT
18851: IFFALSE 18855
// exit ;
18853: GO 18898
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18855: LD_ADDR_VAR 0 2
18859: PUSH
18860: LD_VAR 0 1
18864: PUSH
18865: LD_INT 22
18867: PUSH
18868: LD_VAR 0 1
18872: PPUSH
18873: CALL_OW 255
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 58
18884: PUSH
18885: EMPTY
18886: LIST
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PPUSH
18892: CALL_OW 69
18896: IN
18897: ST_TO_ADDR
// end ;
18898: LD_VAR 0 2
18902: RET
// export function IsNotFull ( building ) ; var places ; begin
18903: LD_INT 0
18905: PPUSH
18906: PPUSH
// if not building then
18907: LD_VAR 0 1
18911: NOT
18912: IFFALSE 18916
// exit ;
18914: GO 18944
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18916: LD_ADDR_VAR 0 2
18920: PUSH
18921: LD_VAR 0 1
18925: PPUSH
18926: LD_INT 3
18928: PUSH
18929: LD_INT 62
18931: PUSH
18932: EMPTY
18933: LIST
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PPUSH
18939: CALL_OW 72
18943: ST_TO_ADDR
// end ;
18944: LD_VAR 0 2
18948: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18949: LD_INT 0
18951: PPUSH
18952: PPUSH
18953: PPUSH
18954: PPUSH
// tmp := [ ] ;
18955: LD_ADDR_VAR 0 3
18959: PUSH
18960: EMPTY
18961: ST_TO_ADDR
// list := [ ] ;
18962: LD_ADDR_VAR 0 5
18966: PUSH
18967: EMPTY
18968: ST_TO_ADDR
// for i = 16 to 25 do
18969: LD_ADDR_VAR 0 4
18973: PUSH
18974: DOUBLE
18975: LD_INT 16
18977: DEC
18978: ST_TO_ADDR
18979: LD_INT 25
18981: PUSH
18982: FOR_TO
18983: IFFALSE 19056
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18985: LD_ADDR_VAR 0 3
18989: PUSH
18990: LD_VAR 0 3
18994: PUSH
18995: LD_INT 22
18997: PUSH
18998: LD_VAR 0 1
19002: PPUSH
19003: CALL_OW 255
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 91
19014: PUSH
19015: LD_VAR 0 1
19019: PUSH
19020: LD_INT 6
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 30
19030: PUSH
19031: LD_VAR 0 4
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: LIST
19044: PUSH
19045: EMPTY
19046: LIST
19047: PPUSH
19048: CALL_OW 69
19052: ADD
19053: ST_TO_ADDR
19054: GO 18982
19056: POP
19057: POP
// for i = 1 to tmp do
19058: LD_ADDR_VAR 0 4
19062: PUSH
19063: DOUBLE
19064: LD_INT 1
19066: DEC
19067: ST_TO_ADDR
19068: LD_VAR 0 3
19072: PUSH
19073: FOR_TO
19074: IFFALSE 19162
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19076: LD_ADDR_VAR 0 5
19080: PUSH
19081: LD_VAR 0 5
19085: PUSH
19086: LD_VAR 0 3
19090: PUSH
19091: LD_VAR 0 4
19095: ARRAY
19096: PPUSH
19097: CALL_OW 266
19101: PUSH
19102: LD_VAR 0 3
19106: PUSH
19107: LD_VAR 0 4
19111: ARRAY
19112: PPUSH
19113: CALL_OW 250
19117: PUSH
19118: LD_VAR 0 3
19122: PUSH
19123: LD_VAR 0 4
19127: ARRAY
19128: PPUSH
19129: CALL_OW 251
19133: PUSH
19134: LD_VAR 0 3
19138: PUSH
19139: LD_VAR 0 4
19143: ARRAY
19144: PPUSH
19145: CALL_OW 254
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: PUSH
19156: EMPTY
19157: LIST
19158: ADD
19159: ST_TO_ADDR
19160: GO 19073
19162: POP
19163: POP
// result := list ;
19164: LD_ADDR_VAR 0 2
19168: PUSH
19169: LD_VAR 0 5
19173: ST_TO_ADDR
// end ;
19174: LD_VAR 0 2
19178: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19179: LD_INT 0
19181: PPUSH
19182: PPUSH
19183: PPUSH
19184: PPUSH
19185: PPUSH
19186: PPUSH
19187: PPUSH
// if not factory then
19188: LD_VAR 0 1
19192: NOT
19193: IFFALSE 19197
// exit ;
19195: GO 19790
// if control = control_apeman then
19197: LD_VAR 0 4
19201: PUSH
19202: LD_INT 5
19204: EQUAL
19205: IFFALSE 19314
// begin tmp := UnitsInside ( factory ) ;
19207: LD_ADDR_VAR 0 8
19211: PUSH
19212: LD_VAR 0 1
19216: PPUSH
19217: CALL_OW 313
19221: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19222: LD_VAR 0 8
19226: PPUSH
19227: LD_INT 25
19229: PUSH
19230: LD_INT 12
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PPUSH
19237: CALL_OW 72
19241: NOT
19242: IFFALSE 19252
// control := control_manual ;
19244: LD_ADDR_VAR 0 4
19248: PUSH
19249: LD_INT 1
19251: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19252: LD_ADDR_VAR 0 8
19256: PUSH
19257: LD_VAR 0 1
19261: PPUSH
19262: CALL 18949 0 1
19266: ST_TO_ADDR
// if tmp then
19267: LD_VAR 0 8
19271: IFFALSE 19314
// begin for i in tmp do
19273: LD_ADDR_VAR 0 7
19277: PUSH
19278: LD_VAR 0 8
19282: PUSH
19283: FOR_IN
19284: IFFALSE 19312
// if i [ 1 ] = b_ext_radio then
19286: LD_VAR 0 7
19290: PUSH
19291: LD_INT 1
19293: ARRAY
19294: PUSH
19295: LD_INT 22
19297: EQUAL
19298: IFFALSE 19310
// begin control := control_remote ;
19300: LD_ADDR_VAR 0 4
19304: PUSH
19305: LD_INT 2
19307: ST_TO_ADDR
// break ;
19308: GO 19312
// end ;
19310: GO 19283
19312: POP
19313: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19314: LD_VAR 0 1
19318: PPUSH
19319: LD_VAR 0 2
19323: PPUSH
19324: LD_VAR 0 3
19328: PPUSH
19329: LD_VAR 0 4
19333: PPUSH
19334: LD_VAR 0 5
19338: PPUSH
19339: CALL_OW 448
19343: IFFALSE 19378
// begin result := [ chassis , engine , control , weapon ] ;
19345: LD_ADDR_VAR 0 6
19349: PUSH
19350: LD_VAR 0 2
19354: PUSH
19355: LD_VAR 0 3
19359: PUSH
19360: LD_VAR 0 4
19364: PUSH
19365: LD_VAR 0 5
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: ST_TO_ADDR
// exit ;
19376: GO 19790
// end ; _chassis := AvailableChassisList ( factory ) ;
19378: LD_ADDR_VAR 0 9
19382: PUSH
19383: LD_VAR 0 1
19387: PPUSH
19388: CALL_OW 475
19392: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19393: LD_ADDR_VAR 0 11
19397: PUSH
19398: LD_VAR 0 1
19402: PPUSH
19403: CALL_OW 476
19407: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19408: LD_ADDR_VAR 0 12
19412: PUSH
19413: LD_VAR 0 1
19417: PPUSH
19418: CALL_OW 477
19422: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19423: LD_ADDR_VAR 0 10
19427: PUSH
19428: LD_VAR 0 1
19432: PPUSH
19433: CALL_OW 478
19437: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19438: LD_VAR 0 9
19442: NOT
19443: PUSH
19444: LD_VAR 0 11
19448: NOT
19449: OR
19450: PUSH
19451: LD_VAR 0 12
19455: NOT
19456: OR
19457: PUSH
19458: LD_VAR 0 10
19462: NOT
19463: OR
19464: IFFALSE 19499
// begin result := [ chassis , engine , control , weapon ] ;
19466: LD_ADDR_VAR 0 6
19470: PUSH
19471: LD_VAR 0 2
19475: PUSH
19476: LD_VAR 0 3
19480: PUSH
19481: LD_VAR 0 4
19485: PUSH
19486: LD_VAR 0 5
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: ST_TO_ADDR
// exit ;
19497: GO 19790
// end ; if not chassis in _chassis then
19499: LD_VAR 0 2
19503: PUSH
19504: LD_VAR 0 9
19508: IN
19509: NOT
19510: IFFALSE 19536
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19512: LD_ADDR_VAR 0 2
19516: PUSH
19517: LD_VAR 0 9
19521: PUSH
19522: LD_INT 1
19524: PPUSH
19525: LD_VAR 0 9
19529: PPUSH
19530: CALL_OW 12
19534: ARRAY
19535: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19536: LD_VAR 0 2
19540: PPUSH
19541: LD_VAR 0 3
19545: PPUSH
19546: CALL 19795 0 2
19550: NOT
19551: IFFALSE 19610
// repeat engine := _engine [ 1 ] ;
19553: LD_ADDR_VAR 0 3
19557: PUSH
19558: LD_VAR 0 11
19562: PUSH
19563: LD_INT 1
19565: ARRAY
19566: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19567: LD_ADDR_VAR 0 11
19571: PUSH
19572: LD_VAR 0 11
19576: PPUSH
19577: LD_INT 1
19579: PPUSH
19580: CALL_OW 3
19584: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19585: LD_VAR 0 2
19589: PPUSH
19590: LD_VAR 0 3
19594: PPUSH
19595: CALL 19795 0 2
19599: PUSH
19600: LD_VAR 0 11
19604: PUSH
19605: EMPTY
19606: EQUAL
19607: OR
19608: IFFALSE 19553
// if not control in _control then
19610: LD_VAR 0 4
19614: PUSH
19615: LD_VAR 0 12
19619: IN
19620: NOT
19621: IFFALSE 19647
// control := _control [ rand ( 1 , _control ) ] ;
19623: LD_ADDR_VAR 0 4
19627: PUSH
19628: LD_VAR 0 12
19632: PUSH
19633: LD_INT 1
19635: PPUSH
19636: LD_VAR 0 12
19640: PPUSH
19641: CALL_OW 12
19645: ARRAY
19646: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19647: LD_VAR 0 2
19651: PPUSH
19652: LD_VAR 0 5
19656: PPUSH
19657: CALL 20015 0 2
19661: NOT
19662: IFFALSE 19721
// repeat weapon := _weapon [ 1 ] ;
19664: LD_ADDR_VAR 0 5
19668: PUSH
19669: LD_VAR 0 10
19673: PUSH
19674: LD_INT 1
19676: ARRAY
19677: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19678: LD_ADDR_VAR 0 10
19682: PUSH
19683: LD_VAR 0 10
19687: PPUSH
19688: LD_INT 1
19690: PPUSH
19691: CALL_OW 3
19695: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19696: LD_VAR 0 2
19700: PPUSH
19701: LD_VAR 0 5
19705: PPUSH
19706: CALL 20015 0 2
19710: PUSH
19711: LD_VAR 0 10
19715: PUSH
19716: EMPTY
19717: EQUAL
19718: OR
19719: IFFALSE 19664
// result := [ ] ;
19721: LD_ADDR_VAR 0 6
19725: PUSH
19726: EMPTY
19727: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19728: LD_VAR 0 1
19732: PPUSH
19733: LD_VAR 0 2
19737: PPUSH
19738: LD_VAR 0 3
19742: PPUSH
19743: LD_VAR 0 4
19747: PPUSH
19748: LD_VAR 0 5
19752: PPUSH
19753: CALL_OW 448
19757: IFFALSE 19790
// result := [ chassis , engine , control , weapon ] ;
19759: LD_ADDR_VAR 0 6
19763: PUSH
19764: LD_VAR 0 2
19768: PUSH
19769: LD_VAR 0 3
19773: PUSH
19774: LD_VAR 0 4
19778: PUSH
19779: LD_VAR 0 5
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: ST_TO_ADDR
// end ;
19790: LD_VAR 0 6
19794: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19795: LD_INT 0
19797: PPUSH
// if not chassis or not engine then
19798: LD_VAR 0 1
19802: NOT
19803: PUSH
19804: LD_VAR 0 2
19808: NOT
19809: OR
19810: IFFALSE 19814
// exit ;
19812: GO 20010
// case engine of engine_solar :
19814: LD_VAR 0 2
19818: PUSH
19819: LD_INT 2
19821: DOUBLE
19822: EQUAL
19823: IFTRUE 19827
19825: GO 19865
19827: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19828: LD_ADDR_VAR 0 3
19832: PUSH
19833: LD_INT 11
19835: PUSH
19836: LD_INT 12
19838: PUSH
19839: LD_INT 13
19841: PUSH
19842: LD_INT 14
19844: PUSH
19845: LD_INT 1
19847: PUSH
19848: LD_INT 2
19850: PUSH
19851: LD_INT 3
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: ST_TO_ADDR
19863: GO 19994
19865: LD_INT 1
19867: DOUBLE
19868: EQUAL
19869: IFTRUE 19873
19871: GO 19935
19873: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19874: LD_ADDR_VAR 0 3
19878: PUSH
19879: LD_INT 11
19881: PUSH
19882: LD_INT 12
19884: PUSH
19885: LD_INT 13
19887: PUSH
19888: LD_INT 14
19890: PUSH
19891: LD_INT 1
19893: PUSH
19894: LD_INT 2
19896: PUSH
19897: LD_INT 3
19899: PUSH
19900: LD_INT 4
19902: PUSH
19903: LD_INT 5
19905: PUSH
19906: LD_INT 21
19908: PUSH
19909: LD_INT 23
19911: PUSH
19912: LD_INT 22
19914: PUSH
19915: LD_INT 24
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: ST_TO_ADDR
19933: GO 19994
19935: LD_INT 3
19937: DOUBLE
19938: EQUAL
19939: IFTRUE 19943
19941: GO 19993
19943: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19944: LD_ADDR_VAR 0 3
19948: PUSH
19949: LD_INT 13
19951: PUSH
19952: LD_INT 14
19954: PUSH
19955: LD_INT 2
19957: PUSH
19958: LD_INT 3
19960: PUSH
19961: LD_INT 4
19963: PUSH
19964: LD_INT 5
19966: PUSH
19967: LD_INT 21
19969: PUSH
19970: LD_INT 22
19972: PUSH
19973: LD_INT 23
19975: PUSH
19976: LD_INT 24
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: ST_TO_ADDR
19991: GO 19994
19993: POP
// result := ( chassis in result ) ;
19994: LD_ADDR_VAR 0 3
19998: PUSH
19999: LD_VAR 0 1
20003: PUSH
20004: LD_VAR 0 3
20008: IN
20009: ST_TO_ADDR
// end ;
20010: LD_VAR 0 3
20014: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20015: LD_INT 0
20017: PPUSH
// if not chassis or not weapon then
20018: LD_VAR 0 1
20022: NOT
20023: PUSH
20024: LD_VAR 0 2
20028: NOT
20029: OR
20030: IFFALSE 20034
// exit ;
20032: GO 21094
// case weapon of us_machine_gun :
20034: LD_VAR 0 2
20038: PUSH
20039: LD_INT 2
20041: DOUBLE
20042: EQUAL
20043: IFTRUE 20047
20045: GO 20077
20047: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20048: LD_ADDR_VAR 0 3
20052: PUSH
20053: LD_INT 1
20055: PUSH
20056: LD_INT 2
20058: PUSH
20059: LD_INT 3
20061: PUSH
20062: LD_INT 4
20064: PUSH
20065: LD_INT 5
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: ST_TO_ADDR
20075: GO 21078
20077: LD_INT 3
20079: DOUBLE
20080: EQUAL
20081: IFTRUE 20085
20083: GO 20115
20085: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20086: LD_ADDR_VAR 0 3
20090: PUSH
20091: LD_INT 1
20093: PUSH
20094: LD_INT 2
20096: PUSH
20097: LD_INT 3
20099: PUSH
20100: LD_INT 4
20102: PUSH
20103: LD_INT 5
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: ST_TO_ADDR
20113: GO 21078
20115: LD_INT 11
20117: DOUBLE
20118: EQUAL
20119: IFTRUE 20123
20121: GO 20153
20123: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20124: LD_ADDR_VAR 0 3
20128: PUSH
20129: LD_INT 1
20131: PUSH
20132: LD_INT 2
20134: PUSH
20135: LD_INT 3
20137: PUSH
20138: LD_INT 4
20140: PUSH
20141: LD_INT 5
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: ST_TO_ADDR
20151: GO 21078
20153: LD_INT 4
20155: DOUBLE
20156: EQUAL
20157: IFTRUE 20161
20159: GO 20187
20161: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20162: LD_ADDR_VAR 0 3
20166: PUSH
20167: LD_INT 2
20169: PUSH
20170: LD_INT 3
20172: PUSH
20173: LD_INT 4
20175: PUSH
20176: LD_INT 5
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: ST_TO_ADDR
20185: GO 21078
20187: LD_INT 5
20189: DOUBLE
20190: EQUAL
20191: IFTRUE 20195
20193: GO 20221
20195: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20196: LD_ADDR_VAR 0 3
20200: PUSH
20201: LD_INT 2
20203: PUSH
20204: LD_INT 3
20206: PUSH
20207: LD_INT 4
20209: PUSH
20210: LD_INT 5
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: ST_TO_ADDR
20219: GO 21078
20221: LD_INT 9
20223: DOUBLE
20224: EQUAL
20225: IFTRUE 20229
20227: GO 20255
20229: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20230: LD_ADDR_VAR 0 3
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: LD_INT 3
20240: PUSH
20241: LD_INT 4
20243: PUSH
20244: LD_INT 5
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: ST_TO_ADDR
20253: GO 21078
20255: LD_INT 7
20257: DOUBLE
20258: EQUAL
20259: IFTRUE 20263
20261: GO 20289
20263: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20264: LD_ADDR_VAR 0 3
20268: PUSH
20269: LD_INT 2
20271: PUSH
20272: LD_INT 3
20274: PUSH
20275: LD_INT 4
20277: PUSH
20278: LD_INT 5
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: ST_TO_ADDR
20287: GO 21078
20289: LD_INT 12
20291: DOUBLE
20292: EQUAL
20293: IFTRUE 20297
20295: GO 20323
20297: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20298: LD_ADDR_VAR 0 3
20302: PUSH
20303: LD_INT 2
20305: PUSH
20306: LD_INT 3
20308: PUSH
20309: LD_INT 4
20311: PUSH
20312: LD_INT 5
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: ST_TO_ADDR
20321: GO 21078
20323: LD_INT 13
20325: DOUBLE
20326: EQUAL
20327: IFTRUE 20331
20329: GO 20357
20331: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20332: LD_ADDR_VAR 0 3
20336: PUSH
20337: LD_INT 2
20339: PUSH
20340: LD_INT 3
20342: PUSH
20343: LD_INT 4
20345: PUSH
20346: LD_INT 5
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: ST_TO_ADDR
20355: GO 21078
20357: LD_INT 14
20359: DOUBLE
20360: EQUAL
20361: IFTRUE 20365
20363: GO 20383
20365: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20366: LD_ADDR_VAR 0 3
20370: PUSH
20371: LD_INT 4
20373: PUSH
20374: LD_INT 5
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: ST_TO_ADDR
20381: GO 21078
20383: LD_INT 6
20385: DOUBLE
20386: EQUAL
20387: IFTRUE 20391
20389: GO 20409
20391: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20392: LD_ADDR_VAR 0 3
20396: PUSH
20397: LD_INT 4
20399: PUSH
20400: LD_INT 5
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: ST_TO_ADDR
20407: GO 21078
20409: LD_INT 10
20411: DOUBLE
20412: EQUAL
20413: IFTRUE 20417
20415: GO 20435
20417: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20418: LD_ADDR_VAR 0 3
20422: PUSH
20423: LD_INT 4
20425: PUSH
20426: LD_INT 5
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: ST_TO_ADDR
20433: GO 21078
20435: LD_INT 22
20437: DOUBLE
20438: EQUAL
20439: IFTRUE 20443
20441: GO 20469
20443: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20444: LD_ADDR_VAR 0 3
20448: PUSH
20449: LD_INT 11
20451: PUSH
20452: LD_INT 12
20454: PUSH
20455: LD_INT 13
20457: PUSH
20458: LD_INT 14
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: ST_TO_ADDR
20467: GO 21078
20469: LD_INT 23
20471: DOUBLE
20472: EQUAL
20473: IFTRUE 20477
20475: GO 20503
20477: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20478: LD_ADDR_VAR 0 3
20482: PUSH
20483: LD_INT 11
20485: PUSH
20486: LD_INT 12
20488: PUSH
20489: LD_INT 13
20491: PUSH
20492: LD_INT 14
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: ST_TO_ADDR
20501: GO 21078
20503: LD_INT 24
20505: DOUBLE
20506: EQUAL
20507: IFTRUE 20511
20509: GO 20537
20511: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20512: LD_ADDR_VAR 0 3
20516: PUSH
20517: LD_INT 11
20519: PUSH
20520: LD_INT 12
20522: PUSH
20523: LD_INT 13
20525: PUSH
20526: LD_INT 14
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: ST_TO_ADDR
20535: GO 21078
20537: LD_INT 30
20539: DOUBLE
20540: EQUAL
20541: IFTRUE 20545
20543: GO 20571
20545: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20546: LD_ADDR_VAR 0 3
20550: PUSH
20551: LD_INT 11
20553: PUSH
20554: LD_INT 12
20556: PUSH
20557: LD_INT 13
20559: PUSH
20560: LD_INT 14
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: ST_TO_ADDR
20569: GO 21078
20571: LD_INT 25
20573: DOUBLE
20574: EQUAL
20575: IFTRUE 20579
20577: GO 20597
20579: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20580: LD_ADDR_VAR 0 3
20584: PUSH
20585: LD_INT 13
20587: PUSH
20588: LD_INT 14
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: ST_TO_ADDR
20595: GO 21078
20597: LD_INT 27
20599: DOUBLE
20600: EQUAL
20601: IFTRUE 20605
20603: GO 20623
20605: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20606: LD_ADDR_VAR 0 3
20610: PUSH
20611: LD_INT 13
20613: PUSH
20614: LD_INT 14
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: ST_TO_ADDR
20621: GO 21078
20623: LD_INT 92
20625: DOUBLE
20626: EQUAL
20627: IFTRUE 20631
20629: GO 20657
20631: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20632: LD_ADDR_VAR 0 3
20636: PUSH
20637: LD_INT 11
20639: PUSH
20640: LD_INT 12
20642: PUSH
20643: LD_INT 13
20645: PUSH
20646: LD_INT 14
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: ST_TO_ADDR
20655: GO 21078
20657: LD_INT 28
20659: DOUBLE
20660: EQUAL
20661: IFTRUE 20665
20663: GO 20683
20665: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20666: LD_ADDR_VAR 0 3
20670: PUSH
20671: LD_INT 13
20673: PUSH
20674: LD_INT 14
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: ST_TO_ADDR
20681: GO 21078
20683: LD_INT 29
20685: DOUBLE
20686: EQUAL
20687: IFTRUE 20691
20689: GO 20709
20691: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20692: LD_ADDR_VAR 0 3
20696: PUSH
20697: LD_INT 13
20699: PUSH
20700: LD_INT 14
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: ST_TO_ADDR
20707: GO 21078
20709: LD_INT 31
20711: DOUBLE
20712: EQUAL
20713: IFTRUE 20717
20715: GO 20735
20717: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20718: LD_ADDR_VAR 0 3
20722: PUSH
20723: LD_INT 13
20725: PUSH
20726: LD_INT 14
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: ST_TO_ADDR
20733: GO 21078
20735: LD_INT 26
20737: DOUBLE
20738: EQUAL
20739: IFTRUE 20743
20741: GO 20761
20743: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20744: LD_ADDR_VAR 0 3
20748: PUSH
20749: LD_INT 13
20751: PUSH
20752: LD_INT 14
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: ST_TO_ADDR
20759: GO 21078
20761: LD_INT 42
20763: DOUBLE
20764: EQUAL
20765: IFTRUE 20769
20767: GO 20795
20769: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20770: LD_ADDR_VAR 0 3
20774: PUSH
20775: LD_INT 21
20777: PUSH
20778: LD_INT 22
20780: PUSH
20781: LD_INT 23
20783: PUSH
20784: LD_INT 24
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: ST_TO_ADDR
20793: GO 21078
20795: LD_INT 43
20797: DOUBLE
20798: EQUAL
20799: IFTRUE 20803
20801: GO 20829
20803: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20804: LD_ADDR_VAR 0 3
20808: PUSH
20809: LD_INT 21
20811: PUSH
20812: LD_INT 22
20814: PUSH
20815: LD_INT 23
20817: PUSH
20818: LD_INT 24
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: ST_TO_ADDR
20827: GO 21078
20829: LD_INT 44
20831: DOUBLE
20832: EQUAL
20833: IFTRUE 20837
20835: GO 20863
20837: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20838: LD_ADDR_VAR 0 3
20842: PUSH
20843: LD_INT 21
20845: PUSH
20846: LD_INT 22
20848: PUSH
20849: LD_INT 23
20851: PUSH
20852: LD_INT 24
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: ST_TO_ADDR
20861: GO 21078
20863: LD_INT 45
20865: DOUBLE
20866: EQUAL
20867: IFTRUE 20871
20869: GO 20897
20871: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20872: LD_ADDR_VAR 0 3
20876: PUSH
20877: LD_INT 21
20879: PUSH
20880: LD_INT 22
20882: PUSH
20883: LD_INT 23
20885: PUSH
20886: LD_INT 24
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: ST_TO_ADDR
20895: GO 21078
20897: LD_INT 49
20899: DOUBLE
20900: EQUAL
20901: IFTRUE 20905
20903: GO 20931
20905: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20906: LD_ADDR_VAR 0 3
20910: PUSH
20911: LD_INT 21
20913: PUSH
20914: LD_INT 22
20916: PUSH
20917: LD_INT 23
20919: PUSH
20920: LD_INT 24
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: ST_TO_ADDR
20929: GO 21078
20931: LD_INT 51
20933: DOUBLE
20934: EQUAL
20935: IFTRUE 20939
20937: GO 20965
20939: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20940: LD_ADDR_VAR 0 3
20944: PUSH
20945: LD_INT 21
20947: PUSH
20948: LD_INT 22
20950: PUSH
20951: LD_INT 23
20953: PUSH
20954: LD_INT 24
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: ST_TO_ADDR
20963: GO 21078
20965: LD_INT 52
20967: DOUBLE
20968: EQUAL
20969: IFTRUE 20973
20971: GO 20999
20973: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20974: LD_ADDR_VAR 0 3
20978: PUSH
20979: LD_INT 21
20981: PUSH
20982: LD_INT 22
20984: PUSH
20985: LD_INT 23
20987: PUSH
20988: LD_INT 24
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: ST_TO_ADDR
20997: GO 21078
20999: LD_INT 53
21001: DOUBLE
21002: EQUAL
21003: IFTRUE 21007
21005: GO 21025
21007: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21008: LD_ADDR_VAR 0 3
21012: PUSH
21013: LD_INT 23
21015: PUSH
21016: LD_INT 24
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: ST_TO_ADDR
21023: GO 21078
21025: LD_INT 46
21027: DOUBLE
21028: EQUAL
21029: IFTRUE 21033
21031: GO 21051
21033: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21034: LD_ADDR_VAR 0 3
21038: PUSH
21039: LD_INT 23
21041: PUSH
21042: LD_INT 24
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: ST_TO_ADDR
21049: GO 21078
21051: LD_INT 47
21053: DOUBLE
21054: EQUAL
21055: IFTRUE 21059
21057: GO 21077
21059: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21060: LD_ADDR_VAR 0 3
21064: PUSH
21065: LD_INT 23
21067: PUSH
21068: LD_INT 24
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: ST_TO_ADDR
21075: GO 21078
21077: POP
// result := ( chassis in result ) ;
21078: LD_ADDR_VAR 0 3
21082: PUSH
21083: LD_VAR 0 1
21087: PUSH
21088: LD_VAR 0 3
21092: IN
21093: ST_TO_ADDR
// end ;
21094: LD_VAR 0 3
21098: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21099: LD_INT 0
21101: PPUSH
21102: PPUSH
21103: PPUSH
21104: PPUSH
21105: PPUSH
21106: PPUSH
21107: PPUSH
// result := array ;
21108: LD_ADDR_VAR 0 5
21112: PUSH
21113: LD_VAR 0 1
21117: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21118: LD_VAR 0 1
21122: NOT
21123: PUSH
21124: LD_VAR 0 2
21128: NOT
21129: OR
21130: PUSH
21131: LD_VAR 0 3
21135: NOT
21136: OR
21137: PUSH
21138: LD_VAR 0 2
21142: PUSH
21143: LD_VAR 0 1
21147: GREATER
21148: OR
21149: PUSH
21150: LD_VAR 0 3
21154: PUSH
21155: LD_VAR 0 1
21159: GREATER
21160: OR
21161: IFFALSE 21165
// exit ;
21163: GO 21461
// if direction then
21165: LD_VAR 0 4
21169: IFFALSE 21233
// begin d := 1 ;
21171: LD_ADDR_VAR 0 9
21175: PUSH
21176: LD_INT 1
21178: ST_TO_ADDR
// if i_from > i_to then
21179: LD_VAR 0 2
21183: PUSH
21184: LD_VAR 0 3
21188: GREATER
21189: IFFALSE 21215
// length := ( array - i_from ) + i_to else
21191: LD_ADDR_VAR 0 11
21195: PUSH
21196: LD_VAR 0 1
21200: PUSH
21201: LD_VAR 0 2
21205: MINUS
21206: PUSH
21207: LD_VAR 0 3
21211: PLUS
21212: ST_TO_ADDR
21213: GO 21231
// length := i_to - i_from ;
21215: LD_ADDR_VAR 0 11
21219: PUSH
21220: LD_VAR 0 3
21224: PUSH
21225: LD_VAR 0 2
21229: MINUS
21230: ST_TO_ADDR
// end else
21231: GO 21294
// begin d := - 1 ;
21233: LD_ADDR_VAR 0 9
21237: PUSH
21238: LD_INT 1
21240: NEG
21241: ST_TO_ADDR
// if i_from > i_to then
21242: LD_VAR 0 2
21246: PUSH
21247: LD_VAR 0 3
21251: GREATER
21252: IFFALSE 21272
// length := i_from - i_to else
21254: LD_ADDR_VAR 0 11
21258: PUSH
21259: LD_VAR 0 2
21263: PUSH
21264: LD_VAR 0 3
21268: MINUS
21269: ST_TO_ADDR
21270: GO 21294
// length := ( array - i_to ) + i_from ;
21272: LD_ADDR_VAR 0 11
21276: PUSH
21277: LD_VAR 0 1
21281: PUSH
21282: LD_VAR 0 3
21286: MINUS
21287: PUSH
21288: LD_VAR 0 2
21292: PLUS
21293: ST_TO_ADDR
// end ; if not length then
21294: LD_VAR 0 11
21298: NOT
21299: IFFALSE 21303
// exit ;
21301: GO 21461
// tmp := array ;
21303: LD_ADDR_VAR 0 10
21307: PUSH
21308: LD_VAR 0 1
21312: ST_TO_ADDR
// for i = 1 to length do
21313: LD_ADDR_VAR 0 6
21317: PUSH
21318: DOUBLE
21319: LD_INT 1
21321: DEC
21322: ST_TO_ADDR
21323: LD_VAR 0 11
21327: PUSH
21328: FOR_TO
21329: IFFALSE 21449
// begin for j = 1 to array do
21331: LD_ADDR_VAR 0 7
21335: PUSH
21336: DOUBLE
21337: LD_INT 1
21339: DEC
21340: ST_TO_ADDR
21341: LD_VAR 0 1
21345: PUSH
21346: FOR_TO
21347: IFFALSE 21435
// begin k := j + d ;
21349: LD_ADDR_VAR 0 8
21353: PUSH
21354: LD_VAR 0 7
21358: PUSH
21359: LD_VAR 0 9
21363: PLUS
21364: ST_TO_ADDR
// if k > array then
21365: LD_VAR 0 8
21369: PUSH
21370: LD_VAR 0 1
21374: GREATER
21375: IFFALSE 21385
// k := 1 ;
21377: LD_ADDR_VAR 0 8
21381: PUSH
21382: LD_INT 1
21384: ST_TO_ADDR
// if not k then
21385: LD_VAR 0 8
21389: NOT
21390: IFFALSE 21402
// k := array ;
21392: LD_ADDR_VAR 0 8
21396: PUSH
21397: LD_VAR 0 1
21401: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21402: LD_ADDR_VAR 0 10
21406: PUSH
21407: LD_VAR 0 10
21411: PPUSH
21412: LD_VAR 0 8
21416: PPUSH
21417: LD_VAR 0 1
21421: PUSH
21422: LD_VAR 0 7
21426: ARRAY
21427: PPUSH
21428: CALL_OW 1
21432: ST_TO_ADDR
// end ;
21433: GO 21346
21435: POP
21436: POP
// array := tmp ;
21437: LD_ADDR_VAR 0 1
21441: PUSH
21442: LD_VAR 0 10
21446: ST_TO_ADDR
// end ;
21447: GO 21328
21449: POP
21450: POP
// result := array ;
21451: LD_ADDR_VAR 0 5
21455: PUSH
21456: LD_VAR 0 1
21460: ST_TO_ADDR
// end ;
21461: LD_VAR 0 5
21465: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21466: LD_INT 0
21468: PPUSH
21469: PPUSH
// result := 0 ;
21470: LD_ADDR_VAR 0 3
21474: PUSH
21475: LD_INT 0
21477: ST_TO_ADDR
// if not array or not value in array then
21478: LD_VAR 0 1
21482: NOT
21483: PUSH
21484: LD_VAR 0 2
21488: PUSH
21489: LD_VAR 0 1
21493: IN
21494: NOT
21495: OR
21496: IFFALSE 21500
// exit ;
21498: GO 21554
// for i = 1 to array do
21500: LD_ADDR_VAR 0 4
21504: PUSH
21505: DOUBLE
21506: LD_INT 1
21508: DEC
21509: ST_TO_ADDR
21510: LD_VAR 0 1
21514: PUSH
21515: FOR_TO
21516: IFFALSE 21552
// if value = array [ i ] then
21518: LD_VAR 0 2
21522: PUSH
21523: LD_VAR 0 1
21527: PUSH
21528: LD_VAR 0 4
21532: ARRAY
21533: EQUAL
21534: IFFALSE 21550
// begin result := i ;
21536: LD_ADDR_VAR 0 3
21540: PUSH
21541: LD_VAR 0 4
21545: ST_TO_ADDR
// exit ;
21546: POP
21547: POP
21548: GO 21554
// end ;
21550: GO 21515
21552: POP
21553: POP
// end ;
21554: LD_VAR 0 3
21558: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21559: LD_INT 0
21561: PPUSH
// vc_chassis := chassis ;
21562: LD_ADDR_OWVAR 37
21566: PUSH
21567: LD_VAR 0 1
21571: ST_TO_ADDR
// vc_engine := engine ;
21572: LD_ADDR_OWVAR 39
21576: PUSH
21577: LD_VAR 0 2
21581: ST_TO_ADDR
// vc_control := control ;
21582: LD_ADDR_OWVAR 38
21586: PUSH
21587: LD_VAR 0 3
21591: ST_TO_ADDR
// vc_weapon := weapon ;
21592: LD_ADDR_OWVAR 40
21596: PUSH
21597: LD_VAR 0 4
21601: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21602: LD_ADDR_OWVAR 41
21606: PUSH
21607: LD_VAR 0 5
21611: ST_TO_ADDR
// end ;
21612: LD_VAR 0 6
21616: RET
// export function WantPlant ( unit ) ; var task ; begin
21617: LD_INT 0
21619: PPUSH
21620: PPUSH
// result := false ;
21621: LD_ADDR_VAR 0 2
21625: PUSH
21626: LD_INT 0
21628: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21629: LD_ADDR_VAR 0 3
21633: PUSH
21634: LD_VAR 0 1
21638: PPUSH
21639: CALL_OW 437
21643: ST_TO_ADDR
// if task then
21644: LD_VAR 0 3
21648: IFFALSE 21676
// if task [ 1 ] [ 1 ] = p then
21650: LD_VAR 0 3
21654: PUSH
21655: LD_INT 1
21657: ARRAY
21658: PUSH
21659: LD_INT 1
21661: ARRAY
21662: PUSH
21663: LD_STRING p
21665: EQUAL
21666: IFFALSE 21676
// result := true ;
21668: LD_ADDR_VAR 0 2
21672: PUSH
21673: LD_INT 1
21675: ST_TO_ADDR
// end ;
21676: LD_VAR 0 2
21680: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21681: LD_INT 0
21683: PPUSH
21684: PPUSH
21685: PPUSH
21686: PPUSH
// if pos < 1 then
21687: LD_VAR 0 2
21691: PUSH
21692: LD_INT 1
21694: LESS
21695: IFFALSE 21699
// exit ;
21697: GO 22002
// if pos = 1 then
21699: LD_VAR 0 2
21703: PUSH
21704: LD_INT 1
21706: EQUAL
21707: IFFALSE 21740
// result := Replace ( arr , pos [ 1 ] , value ) else
21709: LD_ADDR_VAR 0 4
21713: PUSH
21714: LD_VAR 0 1
21718: PPUSH
21719: LD_VAR 0 2
21723: PUSH
21724: LD_INT 1
21726: ARRAY
21727: PPUSH
21728: LD_VAR 0 3
21732: PPUSH
21733: CALL_OW 1
21737: ST_TO_ADDR
21738: GO 22002
// begin tmp := arr ;
21740: LD_ADDR_VAR 0 6
21744: PUSH
21745: LD_VAR 0 1
21749: ST_TO_ADDR
// s_arr := [ tmp ] ;
21750: LD_ADDR_VAR 0 7
21754: PUSH
21755: LD_VAR 0 6
21759: PUSH
21760: EMPTY
21761: LIST
21762: ST_TO_ADDR
// for i = 1 to pos - 1 do
21763: LD_ADDR_VAR 0 5
21767: PUSH
21768: DOUBLE
21769: LD_INT 1
21771: DEC
21772: ST_TO_ADDR
21773: LD_VAR 0 2
21777: PUSH
21778: LD_INT 1
21780: MINUS
21781: PUSH
21782: FOR_TO
21783: IFFALSE 21828
// begin tmp := tmp [ pos [ i ] ] ;
21785: LD_ADDR_VAR 0 6
21789: PUSH
21790: LD_VAR 0 6
21794: PUSH
21795: LD_VAR 0 2
21799: PUSH
21800: LD_VAR 0 5
21804: ARRAY
21805: ARRAY
21806: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21807: LD_ADDR_VAR 0 7
21811: PUSH
21812: LD_VAR 0 7
21816: PUSH
21817: LD_VAR 0 6
21821: PUSH
21822: EMPTY
21823: LIST
21824: ADD
21825: ST_TO_ADDR
// end ;
21826: GO 21782
21828: POP
21829: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21830: LD_ADDR_VAR 0 6
21834: PUSH
21835: LD_VAR 0 6
21839: PPUSH
21840: LD_VAR 0 2
21844: PUSH
21845: LD_VAR 0 2
21849: ARRAY
21850: PPUSH
21851: LD_VAR 0 3
21855: PPUSH
21856: CALL_OW 1
21860: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21861: LD_ADDR_VAR 0 7
21865: PUSH
21866: LD_VAR 0 7
21870: PPUSH
21871: LD_VAR 0 7
21875: PPUSH
21876: LD_VAR 0 6
21880: PPUSH
21881: CALL_OW 1
21885: ST_TO_ADDR
// for i = s_arr downto 2 do
21886: LD_ADDR_VAR 0 5
21890: PUSH
21891: DOUBLE
21892: LD_VAR 0 7
21896: INC
21897: ST_TO_ADDR
21898: LD_INT 2
21900: PUSH
21901: FOR_DOWNTO
21902: IFFALSE 21986
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21904: LD_ADDR_VAR 0 6
21908: PUSH
21909: LD_VAR 0 7
21913: PUSH
21914: LD_VAR 0 5
21918: PUSH
21919: LD_INT 1
21921: MINUS
21922: ARRAY
21923: PPUSH
21924: LD_VAR 0 2
21928: PUSH
21929: LD_VAR 0 5
21933: PUSH
21934: LD_INT 1
21936: MINUS
21937: ARRAY
21938: PPUSH
21939: LD_VAR 0 7
21943: PUSH
21944: LD_VAR 0 5
21948: ARRAY
21949: PPUSH
21950: CALL_OW 1
21954: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21955: LD_ADDR_VAR 0 7
21959: PUSH
21960: LD_VAR 0 7
21964: PPUSH
21965: LD_VAR 0 5
21969: PUSH
21970: LD_INT 1
21972: MINUS
21973: PPUSH
21974: LD_VAR 0 6
21978: PPUSH
21979: CALL_OW 1
21983: ST_TO_ADDR
// end ;
21984: GO 21901
21986: POP
21987: POP
// result := s_arr [ 1 ] ;
21988: LD_ADDR_VAR 0 4
21992: PUSH
21993: LD_VAR 0 7
21997: PUSH
21998: LD_INT 1
22000: ARRAY
22001: ST_TO_ADDR
// end ; end ;
22002: LD_VAR 0 4
22006: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22007: LD_INT 0
22009: PPUSH
22010: PPUSH
// if not list then
22011: LD_VAR 0 1
22015: NOT
22016: IFFALSE 22020
// exit ;
22018: GO 22111
// i := list [ pos1 ] ;
22020: LD_ADDR_VAR 0 5
22024: PUSH
22025: LD_VAR 0 1
22029: PUSH
22030: LD_VAR 0 2
22034: ARRAY
22035: ST_TO_ADDR
// if not i then
22036: LD_VAR 0 5
22040: NOT
22041: IFFALSE 22045
// exit ;
22043: GO 22111
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: LD_VAR 0 1
22054: PPUSH
22055: LD_VAR 0 2
22059: PPUSH
22060: LD_VAR 0 1
22064: PUSH
22065: LD_VAR 0 3
22069: ARRAY
22070: PPUSH
22071: CALL_OW 1
22075: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22076: LD_ADDR_VAR 0 1
22080: PUSH
22081: LD_VAR 0 1
22085: PPUSH
22086: LD_VAR 0 3
22090: PPUSH
22091: LD_VAR 0 5
22095: PPUSH
22096: CALL_OW 1
22100: ST_TO_ADDR
// result := list ;
22101: LD_ADDR_VAR 0 4
22105: PUSH
22106: LD_VAR 0 1
22110: ST_TO_ADDR
// end ;
22111: LD_VAR 0 4
22115: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22116: LD_INT 0
22118: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22119: LD_ADDR_VAR 0 5
22123: PUSH
22124: LD_VAR 0 1
22128: PPUSH
22129: CALL_OW 250
22133: PPUSH
22134: LD_VAR 0 1
22138: PPUSH
22139: CALL_OW 251
22143: PPUSH
22144: LD_VAR 0 2
22148: PPUSH
22149: LD_VAR 0 3
22153: PPUSH
22154: LD_VAR 0 4
22158: PPUSH
22159: CALL 22537 0 5
22163: ST_TO_ADDR
// end ;
22164: LD_VAR 0 5
22168: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22169: LD_INT 0
22171: PPUSH
22172: PPUSH
22173: PPUSH
22174: PPUSH
// if not list or not unit then
22175: LD_VAR 0 2
22179: NOT
22180: PUSH
22181: LD_VAR 0 1
22185: NOT
22186: OR
22187: IFFALSE 22191
// exit ;
22189: GO 22532
// result := [ ] ;
22191: LD_ADDR_VAR 0 5
22195: PUSH
22196: EMPTY
22197: ST_TO_ADDR
// for i in list do
22198: LD_ADDR_VAR 0 6
22202: PUSH
22203: LD_VAR 0 2
22207: PUSH
22208: FOR_IN
22209: IFFALSE 22427
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22211: LD_ADDR_VAR 0 8
22215: PUSH
22216: LD_VAR 0 1
22220: PPUSH
22221: LD_VAR 0 6
22225: PUSH
22226: LD_INT 1
22228: ARRAY
22229: PPUSH
22230: LD_VAR 0 6
22234: PUSH
22235: LD_INT 2
22237: ARRAY
22238: PPUSH
22239: CALL_OW 297
22243: ST_TO_ADDR
// if not Count ( result ) then
22244: LD_VAR 0 5
22248: PPUSH
22249: CALL 18821 0 1
22253: NOT
22254: IFFALSE 22287
// begin result := Join ( result , [ i , tmp ] ) ;
22256: LD_ADDR_VAR 0 5
22260: PUSH
22261: LD_VAR 0 5
22265: PPUSH
22266: LD_VAR 0 6
22270: PUSH
22271: LD_VAR 0 8
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PPUSH
22280: CALL 54430 0 2
22284: ST_TO_ADDR
// continue ;
22285: GO 22208
// end ; if result [ result ] [ 2 ] <= tmp then
22287: LD_VAR 0 5
22291: PUSH
22292: LD_VAR 0 5
22296: ARRAY
22297: PUSH
22298: LD_INT 2
22300: ARRAY
22301: PUSH
22302: LD_VAR 0 8
22306: LESSEQUAL
22307: IFFALSE 22340
// result := Join ( result , [ i , tmp ] ) else
22309: LD_ADDR_VAR 0 5
22313: PUSH
22314: LD_VAR 0 5
22318: PPUSH
22319: LD_VAR 0 6
22323: PUSH
22324: LD_VAR 0 8
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PPUSH
22333: CALL 54430 0 2
22337: ST_TO_ADDR
22338: GO 22425
// begin for j := 1 to Count ( result ) do
22340: LD_ADDR_VAR 0 7
22344: PUSH
22345: DOUBLE
22346: LD_INT 1
22348: DEC
22349: ST_TO_ADDR
22350: LD_VAR 0 5
22354: PPUSH
22355: CALL 18821 0 1
22359: PUSH
22360: FOR_TO
22361: IFFALSE 22423
// begin if tmp < result [ j ] [ 2 ] then
22363: LD_VAR 0 8
22367: PUSH
22368: LD_VAR 0 5
22372: PUSH
22373: LD_VAR 0 7
22377: ARRAY
22378: PUSH
22379: LD_INT 2
22381: ARRAY
22382: LESS
22383: IFFALSE 22421
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22385: LD_ADDR_VAR 0 5
22389: PUSH
22390: LD_VAR 0 5
22394: PPUSH
22395: LD_VAR 0 7
22399: PPUSH
22400: LD_VAR 0 6
22404: PUSH
22405: LD_VAR 0 8
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PPUSH
22414: CALL_OW 2
22418: ST_TO_ADDR
// break ;
22419: GO 22423
// end ; end ;
22421: GO 22360
22423: POP
22424: POP
// end ; end ;
22425: GO 22208
22427: POP
22428: POP
// if result and not asc then
22429: LD_VAR 0 5
22433: PUSH
22434: LD_VAR 0 3
22438: NOT
22439: AND
22440: IFFALSE 22457
// result := ReverseArray ( result ) ;
22442: LD_ADDR_VAR 0 5
22446: PUSH
22447: LD_VAR 0 5
22451: PPUSH
22452: CALL 49697 0 1
22456: ST_TO_ADDR
// tmp := [ ] ;
22457: LD_ADDR_VAR 0 8
22461: PUSH
22462: EMPTY
22463: ST_TO_ADDR
// if mode then
22464: LD_VAR 0 4
22468: IFFALSE 22532
// begin for i := 1 to result do
22470: LD_ADDR_VAR 0 6
22474: PUSH
22475: DOUBLE
22476: LD_INT 1
22478: DEC
22479: ST_TO_ADDR
22480: LD_VAR 0 5
22484: PUSH
22485: FOR_TO
22486: IFFALSE 22520
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22488: LD_ADDR_VAR 0 8
22492: PUSH
22493: LD_VAR 0 8
22497: PPUSH
22498: LD_VAR 0 5
22502: PUSH
22503: LD_VAR 0 6
22507: ARRAY
22508: PUSH
22509: LD_INT 1
22511: ARRAY
22512: PPUSH
22513: CALL 54430 0 2
22517: ST_TO_ADDR
22518: GO 22485
22520: POP
22521: POP
// result := tmp ;
22522: LD_ADDR_VAR 0 5
22526: PUSH
22527: LD_VAR 0 8
22531: ST_TO_ADDR
// end ; end ;
22532: LD_VAR 0 5
22536: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22537: LD_INT 0
22539: PPUSH
22540: PPUSH
22541: PPUSH
22542: PPUSH
// if not list then
22543: LD_VAR 0 3
22547: NOT
22548: IFFALSE 22552
// exit ;
22550: GO 22940
// result := [ ] ;
22552: LD_ADDR_VAR 0 6
22556: PUSH
22557: EMPTY
22558: ST_TO_ADDR
// for i in list do
22559: LD_ADDR_VAR 0 7
22563: PUSH
22564: LD_VAR 0 3
22568: PUSH
22569: FOR_IN
22570: IFFALSE 22772
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22572: LD_ADDR_VAR 0 9
22576: PUSH
22577: LD_VAR 0 7
22581: PPUSH
22582: LD_VAR 0 1
22586: PPUSH
22587: LD_VAR 0 2
22591: PPUSH
22592: CALL_OW 297
22596: ST_TO_ADDR
// if not result then
22597: LD_VAR 0 6
22601: NOT
22602: IFFALSE 22628
// result := [ [ i , tmp ] ] else
22604: LD_ADDR_VAR 0 6
22608: PUSH
22609: LD_VAR 0 7
22613: PUSH
22614: LD_VAR 0 9
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: EMPTY
22624: LIST
22625: ST_TO_ADDR
22626: GO 22770
// begin if result [ result ] [ 2 ] <= tmp then
22628: LD_VAR 0 6
22632: PUSH
22633: LD_VAR 0 6
22637: ARRAY
22638: PUSH
22639: LD_INT 2
22641: ARRAY
22642: PUSH
22643: LD_VAR 0 9
22647: LESSEQUAL
22648: IFFALSE 22690
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22650: LD_ADDR_VAR 0 6
22654: PUSH
22655: LD_VAR 0 6
22659: PPUSH
22660: LD_VAR 0 6
22664: PUSH
22665: LD_INT 1
22667: PLUS
22668: PPUSH
22669: LD_VAR 0 7
22673: PUSH
22674: LD_VAR 0 9
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PPUSH
22683: CALL_OW 2
22687: ST_TO_ADDR
22688: GO 22770
// for j := 1 to result do
22690: LD_ADDR_VAR 0 8
22694: PUSH
22695: DOUBLE
22696: LD_INT 1
22698: DEC
22699: ST_TO_ADDR
22700: LD_VAR 0 6
22704: PUSH
22705: FOR_TO
22706: IFFALSE 22768
// begin if tmp < result [ j ] [ 2 ] then
22708: LD_VAR 0 9
22712: PUSH
22713: LD_VAR 0 6
22717: PUSH
22718: LD_VAR 0 8
22722: ARRAY
22723: PUSH
22724: LD_INT 2
22726: ARRAY
22727: LESS
22728: IFFALSE 22766
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22730: LD_ADDR_VAR 0 6
22734: PUSH
22735: LD_VAR 0 6
22739: PPUSH
22740: LD_VAR 0 8
22744: PPUSH
22745: LD_VAR 0 7
22749: PUSH
22750: LD_VAR 0 9
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PPUSH
22759: CALL_OW 2
22763: ST_TO_ADDR
// break ;
22764: GO 22768
// end ; end ;
22766: GO 22705
22768: POP
22769: POP
// end ; end ;
22770: GO 22569
22772: POP
22773: POP
// if result and not asc then
22774: LD_VAR 0 6
22778: PUSH
22779: LD_VAR 0 4
22783: NOT
22784: AND
22785: IFFALSE 22860
// begin tmp := result ;
22787: LD_ADDR_VAR 0 9
22791: PUSH
22792: LD_VAR 0 6
22796: ST_TO_ADDR
// for i = tmp downto 1 do
22797: LD_ADDR_VAR 0 7
22801: PUSH
22802: DOUBLE
22803: LD_VAR 0 9
22807: INC
22808: ST_TO_ADDR
22809: LD_INT 1
22811: PUSH
22812: FOR_DOWNTO
22813: IFFALSE 22858
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22815: LD_ADDR_VAR 0 6
22819: PUSH
22820: LD_VAR 0 6
22824: PPUSH
22825: LD_VAR 0 9
22829: PUSH
22830: LD_VAR 0 7
22834: MINUS
22835: PUSH
22836: LD_INT 1
22838: PLUS
22839: PPUSH
22840: LD_VAR 0 9
22844: PUSH
22845: LD_VAR 0 7
22849: ARRAY
22850: PPUSH
22851: CALL_OW 1
22855: ST_TO_ADDR
22856: GO 22812
22858: POP
22859: POP
// end ; tmp := [ ] ;
22860: LD_ADDR_VAR 0 9
22864: PUSH
22865: EMPTY
22866: ST_TO_ADDR
// if mode then
22867: LD_VAR 0 5
22871: IFFALSE 22940
// begin for i = 1 to result do
22873: LD_ADDR_VAR 0 7
22877: PUSH
22878: DOUBLE
22879: LD_INT 1
22881: DEC
22882: ST_TO_ADDR
22883: LD_VAR 0 6
22887: PUSH
22888: FOR_TO
22889: IFFALSE 22928
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22891: LD_ADDR_VAR 0 9
22895: PUSH
22896: LD_VAR 0 9
22900: PPUSH
22901: LD_VAR 0 7
22905: PPUSH
22906: LD_VAR 0 6
22910: PUSH
22911: LD_VAR 0 7
22915: ARRAY
22916: PUSH
22917: LD_INT 1
22919: ARRAY
22920: PPUSH
22921: CALL_OW 1
22925: ST_TO_ADDR
22926: GO 22888
22928: POP
22929: POP
// result := tmp ;
22930: LD_ADDR_VAR 0 6
22934: PUSH
22935: LD_VAR 0 9
22939: ST_TO_ADDR
// end ; end ;
22940: LD_VAR 0 6
22944: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22945: LD_INT 0
22947: PPUSH
22948: PPUSH
22949: PPUSH
22950: PPUSH
22951: PPUSH
22952: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22953: LD_ADDR_VAR 0 5
22957: PUSH
22958: LD_INT 0
22960: PUSH
22961: LD_INT 0
22963: PUSH
22964: LD_INT 0
22966: PUSH
22967: EMPTY
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: ST_TO_ADDR
// if not x or not y then
22975: LD_VAR 0 2
22979: NOT
22980: PUSH
22981: LD_VAR 0 3
22985: NOT
22986: OR
22987: IFFALSE 22991
// exit ;
22989: GO 24641
// if not range then
22991: LD_VAR 0 4
22995: NOT
22996: IFFALSE 23006
// range := 10 ;
22998: LD_ADDR_VAR 0 4
23002: PUSH
23003: LD_INT 10
23005: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23006: LD_ADDR_VAR 0 8
23010: PUSH
23011: LD_INT 81
23013: PUSH
23014: LD_VAR 0 1
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 92
23025: PUSH
23026: LD_VAR 0 2
23030: PUSH
23031: LD_VAR 0 3
23035: PUSH
23036: LD_VAR 0 4
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 3
23049: PUSH
23050: LD_INT 21
23052: PUSH
23053: LD_INT 3
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: PPUSH
23069: CALL_OW 69
23073: ST_TO_ADDR
// if not tmp then
23074: LD_VAR 0 8
23078: NOT
23079: IFFALSE 23083
// exit ;
23081: GO 24641
// for i in tmp do
23083: LD_ADDR_VAR 0 6
23087: PUSH
23088: LD_VAR 0 8
23092: PUSH
23093: FOR_IN
23094: IFFALSE 24616
// begin points := [ 0 , 0 , 0 ] ;
23096: LD_ADDR_VAR 0 9
23100: PUSH
23101: LD_INT 0
23103: PUSH
23104: LD_INT 0
23106: PUSH
23107: LD_INT 0
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: LIST
23114: ST_TO_ADDR
// bpoints := 1 ;
23115: LD_ADDR_VAR 0 10
23119: PUSH
23120: LD_INT 1
23122: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23123: LD_VAR 0 6
23127: PPUSH
23128: CALL_OW 247
23132: PUSH
23133: LD_INT 1
23135: DOUBLE
23136: EQUAL
23137: IFTRUE 23141
23139: GO 23719
23141: POP
// begin if GetClass ( i ) = 1 then
23142: LD_VAR 0 6
23146: PPUSH
23147: CALL_OW 257
23151: PUSH
23152: LD_INT 1
23154: EQUAL
23155: IFFALSE 23176
// points := [ 10 , 5 , 3 ] ;
23157: LD_ADDR_VAR 0 9
23161: PUSH
23162: LD_INT 10
23164: PUSH
23165: LD_INT 5
23167: PUSH
23168: LD_INT 3
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: LIST
23175: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23176: LD_VAR 0 6
23180: PPUSH
23181: CALL_OW 257
23185: PUSH
23186: LD_INT 2
23188: PUSH
23189: LD_INT 3
23191: PUSH
23192: LD_INT 4
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: LIST
23199: IN
23200: IFFALSE 23221
// points := [ 3 , 2 , 1 ] ;
23202: LD_ADDR_VAR 0 9
23206: PUSH
23207: LD_INT 3
23209: PUSH
23210: LD_INT 2
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: LIST
23220: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23221: LD_VAR 0 6
23225: PPUSH
23226: CALL_OW 257
23230: PUSH
23231: LD_INT 5
23233: EQUAL
23234: IFFALSE 23255
// points := [ 130 , 5 , 2 ] ;
23236: LD_ADDR_VAR 0 9
23240: PUSH
23241: LD_INT 130
23243: PUSH
23244: LD_INT 5
23246: PUSH
23247: LD_INT 2
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: LIST
23254: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23255: LD_VAR 0 6
23259: PPUSH
23260: CALL_OW 257
23264: PUSH
23265: LD_INT 8
23267: EQUAL
23268: IFFALSE 23289
// points := [ 35 , 35 , 30 ] ;
23270: LD_ADDR_VAR 0 9
23274: PUSH
23275: LD_INT 35
23277: PUSH
23278: LD_INT 35
23280: PUSH
23281: LD_INT 30
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: LIST
23288: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23289: LD_VAR 0 6
23293: PPUSH
23294: CALL_OW 257
23298: PUSH
23299: LD_INT 9
23301: EQUAL
23302: IFFALSE 23323
// points := [ 20 , 55 , 40 ] ;
23304: LD_ADDR_VAR 0 9
23308: PUSH
23309: LD_INT 20
23311: PUSH
23312: LD_INT 55
23314: PUSH
23315: LD_INT 40
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: LIST
23322: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23323: LD_VAR 0 6
23327: PPUSH
23328: CALL_OW 257
23332: PUSH
23333: LD_INT 12
23335: PUSH
23336: LD_INT 16
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: IN
23343: IFFALSE 23364
// points := [ 5 , 3 , 2 ] ;
23345: LD_ADDR_VAR 0 9
23349: PUSH
23350: LD_INT 5
23352: PUSH
23353: LD_INT 3
23355: PUSH
23356: LD_INT 2
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: LIST
23363: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23364: LD_VAR 0 6
23368: PPUSH
23369: CALL_OW 257
23373: PUSH
23374: LD_INT 17
23376: EQUAL
23377: IFFALSE 23398
// points := [ 100 , 50 , 75 ] ;
23379: LD_ADDR_VAR 0 9
23383: PUSH
23384: LD_INT 100
23386: PUSH
23387: LD_INT 50
23389: PUSH
23390: LD_INT 75
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: LIST
23397: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23398: LD_VAR 0 6
23402: PPUSH
23403: CALL_OW 257
23407: PUSH
23408: LD_INT 15
23410: EQUAL
23411: IFFALSE 23432
// points := [ 10 , 5 , 3 ] ;
23413: LD_ADDR_VAR 0 9
23417: PUSH
23418: LD_INT 10
23420: PUSH
23421: LD_INT 5
23423: PUSH
23424: LD_INT 3
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: LIST
23431: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23432: LD_VAR 0 6
23436: PPUSH
23437: CALL_OW 257
23441: PUSH
23442: LD_INT 14
23444: EQUAL
23445: IFFALSE 23466
// points := [ 10 , 0 , 0 ] ;
23447: LD_ADDR_VAR 0 9
23451: PUSH
23452: LD_INT 10
23454: PUSH
23455: LD_INT 0
23457: PUSH
23458: LD_INT 0
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: LIST
23465: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23466: LD_VAR 0 6
23470: PPUSH
23471: CALL_OW 257
23475: PUSH
23476: LD_INT 11
23478: EQUAL
23479: IFFALSE 23500
// points := [ 30 , 10 , 5 ] ;
23481: LD_ADDR_VAR 0 9
23485: PUSH
23486: LD_INT 30
23488: PUSH
23489: LD_INT 10
23491: PUSH
23492: LD_INT 5
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: LIST
23499: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23500: LD_VAR 0 1
23504: PPUSH
23505: LD_INT 5
23507: PPUSH
23508: CALL_OW 321
23512: PUSH
23513: LD_INT 2
23515: EQUAL
23516: IFFALSE 23533
// bpoints := bpoints * 1.8 ;
23518: LD_ADDR_VAR 0 10
23522: PUSH
23523: LD_VAR 0 10
23527: PUSH
23528: LD_REAL  1.80000000000000E+0000
23531: MUL
23532: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23533: LD_VAR 0 6
23537: PPUSH
23538: CALL_OW 257
23542: PUSH
23543: LD_INT 1
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: LD_INT 3
23551: PUSH
23552: LD_INT 4
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: IN
23561: PUSH
23562: LD_VAR 0 1
23566: PPUSH
23567: LD_INT 51
23569: PPUSH
23570: CALL_OW 321
23574: PUSH
23575: LD_INT 2
23577: EQUAL
23578: AND
23579: IFFALSE 23596
// bpoints := bpoints * 1.2 ;
23581: LD_ADDR_VAR 0 10
23585: PUSH
23586: LD_VAR 0 10
23590: PUSH
23591: LD_REAL  1.20000000000000E+0000
23594: MUL
23595: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23596: LD_VAR 0 6
23600: PPUSH
23601: CALL_OW 257
23605: PUSH
23606: LD_INT 5
23608: PUSH
23609: LD_INT 7
23611: PUSH
23612: LD_INT 9
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: LIST
23619: IN
23620: PUSH
23621: LD_VAR 0 1
23625: PPUSH
23626: LD_INT 52
23628: PPUSH
23629: CALL_OW 321
23633: PUSH
23634: LD_INT 2
23636: EQUAL
23637: AND
23638: IFFALSE 23655
// bpoints := bpoints * 1.5 ;
23640: LD_ADDR_VAR 0 10
23644: PUSH
23645: LD_VAR 0 10
23649: PUSH
23650: LD_REAL  1.50000000000000E+0000
23653: MUL
23654: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23655: LD_VAR 0 1
23659: PPUSH
23660: LD_INT 66
23662: PPUSH
23663: CALL_OW 321
23667: PUSH
23668: LD_INT 2
23670: EQUAL
23671: IFFALSE 23688
// bpoints := bpoints * 1.1 ;
23673: LD_ADDR_VAR 0 10
23677: PUSH
23678: LD_VAR 0 10
23682: PUSH
23683: LD_REAL  1.10000000000000E+0000
23686: MUL
23687: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23688: LD_ADDR_VAR 0 10
23692: PUSH
23693: LD_VAR 0 10
23697: PUSH
23698: LD_VAR 0 6
23702: PPUSH
23703: LD_INT 1
23705: PPUSH
23706: CALL_OW 259
23710: PUSH
23711: LD_REAL  1.15000000000000E+0000
23714: MUL
23715: MUL
23716: ST_TO_ADDR
// end ; unit_vehicle :
23717: GO 24545
23719: LD_INT 2
23721: DOUBLE
23722: EQUAL
23723: IFTRUE 23727
23725: GO 24533
23727: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23728: LD_VAR 0 6
23732: PPUSH
23733: CALL_OW 264
23737: PUSH
23738: LD_INT 2
23740: PUSH
23741: LD_INT 42
23743: PUSH
23744: LD_INT 24
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: LIST
23751: IN
23752: IFFALSE 23773
// points := [ 25 , 5 , 3 ] ;
23754: LD_ADDR_VAR 0 9
23758: PUSH
23759: LD_INT 25
23761: PUSH
23762: LD_INT 5
23764: PUSH
23765: LD_INT 3
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: LIST
23772: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23773: LD_VAR 0 6
23777: PPUSH
23778: CALL_OW 264
23782: PUSH
23783: LD_INT 4
23785: PUSH
23786: LD_INT 43
23788: PUSH
23789: LD_INT 25
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: LIST
23796: IN
23797: IFFALSE 23818
// points := [ 40 , 15 , 5 ] ;
23799: LD_ADDR_VAR 0 9
23803: PUSH
23804: LD_INT 40
23806: PUSH
23807: LD_INT 15
23809: PUSH
23810: LD_INT 5
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: LIST
23817: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23818: LD_VAR 0 6
23822: PPUSH
23823: CALL_OW 264
23827: PUSH
23828: LD_INT 3
23830: PUSH
23831: LD_INT 23
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: IN
23838: IFFALSE 23859
// points := [ 7 , 25 , 8 ] ;
23840: LD_ADDR_VAR 0 9
23844: PUSH
23845: LD_INT 7
23847: PUSH
23848: LD_INT 25
23850: PUSH
23851: LD_INT 8
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: LIST
23858: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23859: LD_VAR 0 6
23863: PPUSH
23864: CALL_OW 264
23868: PUSH
23869: LD_INT 5
23871: PUSH
23872: LD_INT 27
23874: PUSH
23875: LD_INT 44
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: LIST
23882: IN
23883: IFFALSE 23904
// points := [ 14 , 50 , 16 ] ;
23885: LD_ADDR_VAR 0 9
23889: PUSH
23890: LD_INT 14
23892: PUSH
23893: LD_INT 50
23895: PUSH
23896: LD_INT 16
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23904: LD_VAR 0 6
23908: PPUSH
23909: CALL_OW 264
23913: PUSH
23914: LD_INT 6
23916: PUSH
23917: LD_INT 46
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: IN
23924: IFFALSE 23945
// points := [ 32 , 120 , 70 ] ;
23926: LD_ADDR_VAR 0 9
23930: PUSH
23931: LD_INT 32
23933: PUSH
23934: LD_INT 120
23936: PUSH
23937: LD_INT 70
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: LIST
23944: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23945: LD_VAR 0 6
23949: PPUSH
23950: CALL_OW 264
23954: PUSH
23955: LD_INT 7
23957: PUSH
23958: LD_INT 28
23960: PUSH
23961: LD_INT 45
23963: PUSH
23964: LD_INT 92
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: IN
23973: IFFALSE 23994
// points := [ 35 , 20 , 45 ] ;
23975: LD_ADDR_VAR 0 9
23979: PUSH
23980: LD_INT 35
23982: PUSH
23983: LD_INT 20
23985: PUSH
23986: LD_INT 45
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: LIST
23993: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23994: LD_VAR 0 6
23998: PPUSH
23999: CALL_OW 264
24003: PUSH
24004: LD_INT 47
24006: PUSH
24007: EMPTY
24008: LIST
24009: IN
24010: IFFALSE 24031
// points := [ 67 , 45 , 75 ] ;
24012: LD_ADDR_VAR 0 9
24016: PUSH
24017: LD_INT 67
24019: PUSH
24020: LD_INT 45
24022: PUSH
24023: LD_INT 75
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: LIST
24030: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24031: LD_VAR 0 6
24035: PPUSH
24036: CALL_OW 264
24040: PUSH
24041: LD_INT 26
24043: PUSH
24044: EMPTY
24045: LIST
24046: IN
24047: IFFALSE 24068
// points := [ 120 , 30 , 80 ] ;
24049: LD_ADDR_VAR 0 9
24053: PUSH
24054: LD_INT 120
24056: PUSH
24057: LD_INT 30
24059: PUSH
24060: LD_INT 80
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: LIST
24067: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24068: LD_VAR 0 6
24072: PPUSH
24073: CALL_OW 264
24077: PUSH
24078: LD_INT 22
24080: PUSH
24081: EMPTY
24082: LIST
24083: IN
24084: IFFALSE 24105
// points := [ 40 , 1 , 1 ] ;
24086: LD_ADDR_VAR 0 9
24090: PUSH
24091: LD_INT 40
24093: PUSH
24094: LD_INT 1
24096: PUSH
24097: LD_INT 1
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: LIST
24104: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24105: LD_VAR 0 6
24109: PPUSH
24110: CALL_OW 264
24114: PUSH
24115: LD_INT 29
24117: PUSH
24118: EMPTY
24119: LIST
24120: IN
24121: IFFALSE 24142
// points := [ 70 , 200 , 400 ] ;
24123: LD_ADDR_VAR 0 9
24127: PUSH
24128: LD_INT 70
24130: PUSH
24131: LD_INT 200
24133: PUSH
24134: LD_INT 400
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: LIST
24141: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24142: LD_VAR 0 6
24146: PPUSH
24147: CALL_OW 264
24151: PUSH
24152: LD_INT 14
24154: PUSH
24155: LD_INT 53
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: IN
24162: IFFALSE 24183
// points := [ 40 , 10 , 20 ] ;
24164: LD_ADDR_VAR 0 9
24168: PUSH
24169: LD_INT 40
24171: PUSH
24172: LD_INT 10
24174: PUSH
24175: LD_INT 20
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24183: LD_VAR 0 6
24187: PPUSH
24188: CALL_OW 264
24192: PUSH
24193: LD_INT 9
24195: PUSH
24196: EMPTY
24197: LIST
24198: IN
24199: IFFALSE 24220
// points := [ 5 , 70 , 20 ] ;
24201: LD_ADDR_VAR 0 9
24205: PUSH
24206: LD_INT 5
24208: PUSH
24209: LD_INT 70
24211: PUSH
24212: LD_INT 20
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: LIST
24219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24220: LD_VAR 0 6
24224: PPUSH
24225: CALL_OW 264
24229: PUSH
24230: LD_INT 10
24232: PUSH
24233: EMPTY
24234: LIST
24235: IN
24236: IFFALSE 24257
// points := [ 35 , 110 , 70 ] ;
24238: LD_ADDR_VAR 0 9
24242: PUSH
24243: LD_INT 35
24245: PUSH
24246: LD_INT 110
24248: PUSH
24249: LD_INT 70
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: LIST
24256: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24257: LD_VAR 0 6
24261: PPUSH
24262: CALL_OW 265
24266: PUSH
24267: LD_INT 25
24269: EQUAL
24270: IFFALSE 24291
// points := [ 80 , 65 , 100 ] ;
24272: LD_ADDR_VAR 0 9
24276: PUSH
24277: LD_INT 80
24279: PUSH
24280: LD_INT 65
24282: PUSH
24283: LD_INT 100
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: LIST
24290: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24291: LD_VAR 0 6
24295: PPUSH
24296: CALL_OW 263
24300: PUSH
24301: LD_INT 1
24303: EQUAL
24304: IFFALSE 24339
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24306: LD_ADDR_VAR 0 10
24310: PUSH
24311: LD_VAR 0 10
24315: PUSH
24316: LD_VAR 0 6
24320: PPUSH
24321: CALL_OW 311
24325: PPUSH
24326: LD_INT 3
24328: PPUSH
24329: CALL_OW 259
24333: PUSH
24334: LD_INT 4
24336: MUL
24337: MUL
24338: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24339: LD_VAR 0 6
24343: PPUSH
24344: CALL_OW 263
24348: PUSH
24349: LD_INT 2
24351: EQUAL
24352: IFFALSE 24403
// begin j := IsControledBy ( i ) ;
24354: LD_ADDR_VAR 0 7
24358: PUSH
24359: LD_VAR 0 6
24363: PPUSH
24364: CALL_OW 312
24368: ST_TO_ADDR
// if j then
24369: LD_VAR 0 7
24373: IFFALSE 24403
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24375: LD_ADDR_VAR 0 10
24379: PUSH
24380: LD_VAR 0 10
24384: PUSH
24385: LD_VAR 0 7
24389: PPUSH
24390: LD_INT 3
24392: PPUSH
24393: CALL_OW 259
24397: PUSH
24398: LD_INT 3
24400: MUL
24401: MUL
24402: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24403: LD_VAR 0 6
24407: PPUSH
24408: CALL_OW 264
24412: PUSH
24413: LD_INT 5
24415: PUSH
24416: LD_INT 6
24418: PUSH
24419: LD_INT 46
24421: PUSH
24422: LD_INT 44
24424: PUSH
24425: LD_INT 47
24427: PUSH
24428: LD_INT 45
24430: PUSH
24431: LD_INT 28
24433: PUSH
24434: LD_INT 7
24436: PUSH
24437: LD_INT 27
24439: PUSH
24440: LD_INT 29
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: IN
24455: PUSH
24456: LD_VAR 0 1
24460: PPUSH
24461: LD_INT 52
24463: PPUSH
24464: CALL_OW 321
24468: PUSH
24469: LD_INT 2
24471: EQUAL
24472: AND
24473: IFFALSE 24490
// bpoints := bpoints * 1.2 ;
24475: LD_ADDR_VAR 0 10
24479: PUSH
24480: LD_VAR 0 10
24484: PUSH
24485: LD_REAL  1.20000000000000E+0000
24488: MUL
24489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24490: LD_VAR 0 6
24494: PPUSH
24495: CALL_OW 264
24499: PUSH
24500: LD_INT 6
24502: PUSH
24503: LD_INT 46
24505: PUSH
24506: LD_INT 47
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: LIST
24513: IN
24514: IFFALSE 24531
// bpoints := bpoints * 1.2 ;
24516: LD_ADDR_VAR 0 10
24520: PUSH
24521: LD_VAR 0 10
24525: PUSH
24526: LD_REAL  1.20000000000000E+0000
24529: MUL
24530: ST_TO_ADDR
// end ; unit_building :
24531: GO 24545
24533: LD_INT 3
24535: DOUBLE
24536: EQUAL
24537: IFTRUE 24541
24539: GO 24544
24541: POP
// ; end ;
24542: GO 24545
24544: POP
// for j = 1 to 3 do
24545: LD_ADDR_VAR 0 7
24549: PUSH
24550: DOUBLE
24551: LD_INT 1
24553: DEC
24554: ST_TO_ADDR
24555: LD_INT 3
24557: PUSH
24558: FOR_TO
24559: IFFALSE 24612
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24561: LD_ADDR_VAR 0 5
24565: PUSH
24566: LD_VAR 0 5
24570: PPUSH
24571: LD_VAR 0 7
24575: PPUSH
24576: LD_VAR 0 5
24580: PUSH
24581: LD_VAR 0 7
24585: ARRAY
24586: PUSH
24587: LD_VAR 0 9
24591: PUSH
24592: LD_VAR 0 7
24596: ARRAY
24597: PUSH
24598: LD_VAR 0 10
24602: MUL
24603: PLUS
24604: PPUSH
24605: CALL_OW 1
24609: ST_TO_ADDR
24610: GO 24558
24612: POP
24613: POP
// end ;
24614: GO 23093
24616: POP
24617: POP
// result := Replace ( result , 4 , tmp ) ;
24618: LD_ADDR_VAR 0 5
24622: PUSH
24623: LD_VAR 0 5
24627: PPUSH
24628: LD_INT 4
24630: PPUSH
24631: LD_VAR 0 8
24635: PPUSH
24636: CALL_OW 1
24640: ST_TO_ADDR
// end ;
24641: LD_VAR 0 5
24645: RET
// export function DangerAtRange ( unit , range ) ; begin
24646: LD_INT 0
24648: PPUSH
// if not unit then
24649: LD_VAR 0 1
24653: NOT
24654: IFFALSE 24658
// exit ;
24656: GO 24703
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24658: LD_ADDR_VAR 0 3
24662: PUSH
24663: LD_VAR 0 1
24667: PPUSH
24668: CALL_OW 255
24672: PPUSH
24673: LD_VAR 0 1
24677: PPUSH
24678: CALL_OW 250
24682: PPUSH
24683: LD_VAR 0 1
24687: PPUSH
24688: CALL_OW 251
24692: PPUSH
24693: LD_VAR 0 2
24697: PPUSH
24698: CALL 22945 0 4
24702: ST_TO_ADDR
// end ;
24703: LD_VAR 0 3
24707: RET
// export function DangerInArea ( side , area ) ; begin
24708: LD_INT 0
24710: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24711: LD_ADDR_VAR 0 3
24715: PUSH
24716: LD_VAR 0 2
24720: PPUSH
24721: LD_INT 81
24723: PUSH
24724: LD_VAR 0 1
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PPUSH
24733: CALL_OW 70
24737: ST_TO_ADDR
// end ;
24738: LD_VAR 0 3
24742: RET
// export function IsExtension ( b ) ; begin
24743: LD_INT 0
24745: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24746: LD_ADDR_VAR 0 2
24750: PUSH
24751: LD_VAR 0 1
24755: PUSH
24756: LD_INT 23
24758: PUSH
24759: LD_INT 20
24761: PUSH
24762: LD_INT 22
24764: PUSH
24765: LD_INT 17
24767: PUSH
24768: LD_INT 24
24770: PUSH
24771: LD_INT 21
24773: PUSH
24774: LD_INT 19
24776: PUSH
24777: LD_INT 16
24779: PUSH
24780: LD_INT 25
24782: PUSH
24783: LD_INT 18
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: IN
24798: ST_TO_ADDR
// end ;
24799: LD_VAR 0 2
24803: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24804: LD_INT 0
24806: PPUSH
24807: PPUSH
24808: PPUSH
// result := [ ] ;
24809: LD_ADDR_VAR 0 4
24813: PUSH
24814: EMPTY
24815: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24816: LD_ADDR_VAR 0 5
24820: PUSH
24821: LD_VAR 0 2
24825: PPUSH
24826: LD_INT 21
24828: PUSH
24829: LD_INT 3
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PPUSH
24836: CALL_OW 70
24840: ST_TO_ADDR
// if not tmp then
24841: LD_VAR 0 5
24845: NOT
24846: IFFALSE 24850
// exit ;
24848: GO 24914
// if checkLink then
24850: LD_VAR 0 3
24854: IFFALSE 24904
// begin for i in tmp do
24856: LD_ADDR_VAR 0 6
24860: PUSH
24861: LD_VAR 0 5
24865: PUSH
24866: FOR_IN
24867: IFFALSE 24902
// if GetBase ( i ) <> base then
24869: LD_VAR 0 6
24873: PPUSH
24874: CALL_OW 274
24878: PUSH
24879: LD_VAR 0 1
24883: NONEQUAL
24884: IFFALSE 24900
// ComLinkToBase ( base , i ) ;
24886: LD_VAR 0 1
24890: PPUSH
24891: LD_VAR 0 6
24895: PPUSH
24896: CALL_OW 169
24900: GO 24866
24902: POP
24903: POP
// end ; result := tmp ;
24904: LD_ADDR_VAR 0 4
24908: PUSH
24909: LD_VAR 0 5
24913: ST_TO_ADDR
// end ;
24914: LD_VAR 0 4
24918: RET
// export function ComComplete ( units , b ) ; var i ; begin
24919: LD_INT 0
24921: PPUSH
24922: PPUSH
// if not units then
24923: LD_VAR 0 1
24927: NOT
24928: IFFALSE 24932
// exit ;
24930: GO 25022
// for i in units do
24932: LD_ADDR_VAR 0 4
24936: PUSH
24937: LD_VAR 0 1
24941: PUSH
24942: FOR_IN
24943: IFFALSE 25020
// if BuildingStatus ( b ) = bs_build then
24945: LD_VAR 0 2
24949: PPUSH
24950: CALL_OW 461
24954: PUSH
24955: LD_INT 1
24957: EQUAL
24958: IFFALSE 25018
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24960: LD_VAR 0 4
24964: PPUSH
24965: LD_STRING h
24967: PUSH
24968: LD_VAR 0 2
24972: PPUSH
24973: CALL_OW 250
24977: PUSH
24978: LD_VAR 0 2
24982: PPUSH
24983: CALL_OW 251
24987: PUSH
24988: LD_VAR 0 2
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: LD_INT 0
24998: PUSH
24999: LD_INT 0
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: PUSH
25011: EMPTY
25012: LIST
25013: PPUSH
25014: CALL_OW 446
25018: GO 24942
25020: POP
25021: POP
// end ;
25022: LD_VAR 0 3
25026: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25027: LD_INT 0
25029: PPUSH
25030: PPUSH
25031: PPUSH
25032: PPUSH
25033: PPUSH
25034: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25035: LD_VAR 0 1
25039: NOT
25040: PUSH
25041: LD_VAR 0 1
25045: PPUSH
25046: CALL_OW 263
25050: PUSH
25051: LD_INT 2
25053: NONEQUAL
25054: OR
25055: IFFALSE 25059
// exit ;
25057: GO 25375
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25059: LD_ADDR_VAR 0 6
25063: PUSH
25064: LD_INT 22
25066: PUSH
25067: LD_VAR 0 1
25071: PPUSH
25072: CALL_OW 255
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 2
25083: PUSH
25084: LD_INT 30
25086: PUSH
25087: LD_INT 36
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 34
25096: PUSH
25097: LD_INT 31
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: LIST
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PPUSH
25113: CALL_OW 69
25117: ST_TO_ADDR
// if not tmp then
25118: LD_VAR 0 6
25122: NOT
25123: IFFALSE 25127
// exit ;
25125: GO 25375
// result := [ ] ;
25127: LD_ADDR_VAR 0 2
25131: PUSH
25132: EMPTY
25133: ST_TO_ADDR
// for i in tmp do
25134: LD_ADDR_VAR 0 3
25138: PUSH
25139: LD_VAR 0 6
25143: PUSH
25144: FOR_IN
25145: IFFALSE 25216
// begin t := UnitsInside ( i ) ;
25147: LD_ADDR_VAR 0 4
25151: PUSH
25152: LD_VAR 0 3
25156: PPUSH
25157: CALL_OW 313
25161: ST_TO_ADDR
// if t then
25162: LD_VAR 0 4
25166: IFFALSE 25214
// for j in t do
25168: LD_ADDR_VAR 0 7
25172: PUSH
25173: LD_VAR 0 4
25177: PUSH
25178: FOR_IN
25179: IFFALSE 25212
// result := Replace ( result , result + 1 , j ) ;
25181: LD_ADDR_VAR 0 2
25185: PUSH
25186: LD_VAR 0 2
25190: PPUSH
25191: LD_VAR 0 2
25195: PUSH
25196: LD_INT 1
25198: PLUS
25199: PPUSH
25200: LD_VAR 0 7
25204: PPUSH
25205: CALL_OW 1
25209: ST_TO_ADDR
25210: GO 25178
25212: POP
25213: POP
// end ;
25214: GO 25144
25216: POP
25217: POP
// if not result then
25218: LD_VAR 0 2
25222: NOT
25223: IFFALSE 25227
// exit ;
25225: GO 25375
// mech := result [ 1 ] ;
25227: LD_ADDR_VAR 0 5
25231: PUSH
25232: LD_VAR 0 2
25236: PUSH
25237: LD_INT 1
25239: ARRAY
25240: ST_TO_ADDR
// if result > 1 then
25241: LD_VAR 0 2
25245: PUSH
25246: LD_INT 1
25248: GREATER
25249: IFFALSE 25361
// begin for i = 2 to result do
25251: LD_ADDR_VAR 0 3
25255: PUSH
25256: DOUBLE
25257: LD_INT 2
25259: DEC
25260: ST_TO_ADDR
25261: LD_VAR 0 2
25265: PUSH
25266: FOR_TO
25267: IFFALSE 25359
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25269: LD_ADDR_VAR 0 4
25273: PUSH
25274: LD_VAR 0 2
25278: PUSH
25279: LD_VAR 0 3
25283: ARRAY
25284: PPUSH
25285: LD_INT 3
25287: PPUSH
25288: CALL_OW 259
25292: PUSH
25293: LD_VAR 0 2
25297: PUSH
25298: LD_VAR 0 3
25302: ARRAY
25303: PPUSH
25304: CALL_OW 432
25308: MINUS
25309: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25310: LD_VAR 0 4
25314: PUSH
25315: LD_VAR 0 5
25319: PPUSH
25320: LD_INT 3
25322: PPUSH
25323: CALL_OW 259
25327: PUSH
25328: LD_VAR 0 5
25332: PPUSH
25333: CALL_OW 432
25337: MINUS
25338: GREATEREQUAL
25339: IFFALSE 25357
// mech := result [ i ] ;
25341: LD_ADDR_VAR 0 5
25345: PUSH
25346: LD_VAR 0 2
25350: PUSH
25351: LD_VAR 0 3
25355: ARRAY
25356: ST_TO_ADDR
// end ;
25357: GO 25266
25359: POP
25360: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25361: LD_VAR 0 1
25365: PPUSH
25366: LD_VAR 0 5
25370: PPUSH
25371: CALL_OW 135
// end ;
25375: LD_VAR 0 2
25379: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25380: LD_INT 0
25382: PPUSH
25383: PPUSH
25384: PPUSH
25385: PPUSH
25386: PPUSH
25387: PPUSH
25388: PPUSH
25389: PPUSH
25390: PPUSH
25391: PPUSH
25392: PPUSH
25393: PPUSH
25394: PPUSH
// result := [ ] ;
25395: LD_ADDR_VAR 0 7
25399: PUSH
25400: EMPTY
25401: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25402: LD_VAR 0 1
25406: PPUSH
25407: CALL_OW 266
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: LD_INT 1
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: IN
25422: NOT
25423: IFFALSE 25427
// exit ;
25425: GO 27061
// if name then
25427: LD_VAR 0 3
25431: IFFALSE 25447
// SetBName ( base_dep , name ) ;
25433: LD_VAR 0 1
25437: PPUSH
25438: LD_VAR 0 3
25442: PPUSH
25443: CALL_OW 500
// base := GetBase ( base_dep ) ;
25447: LD_ADDR_VAR 0 15
25451: PUSH
25452: LD_VAR 0 1
25456: PPUSH
25457: CALL_OW 274
25461: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25462: LD_ADDR_VAR 0 16
25466: PUSH
25467: LD_VAR 0 1
25471: PPUSH
25472: CALL_OW 255
25476: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25477: LD_ADDR_VAR 0 17
25481: PUSH
25482: LD_VAR 0 1
25486: PPUSH
25487: CALL_OW 248
25491: ST_TO_ADDR
// if sources then
25492: LD_VAR 0 5
25496: IFFALSE 25543
// for i = 1 to 3 do
25498: LD_ADDR_VAR 0 8
25502: PUSH
25503: DOUBLE
25504: LD_INT 1
25506: DEC
25507: ST_TO_ADDR
25508: LD_INT 3
25510: PUSH
25511: FOR_TO
25512: IFFALSE 25541
// AddResourceType ( base , i , sources [ i ] ) ;
25514: LD_VAR 0 15
25518: PPUSH
25519: LD_VAR 0 8
25523: PPUSH
25524: LD_VAR 0 5
25528: PUSH
25529: LD_VAR 0 8
25533: ARRAY
25534: PPUSH
25535: CALL_OW 276
25539: GO 25511
25541: POP
25542: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25543: LD_ADDR_VAR 0 18
25547: PUSH
25548: LD_VAR 0 15
25552: PPUSH
25553: LD_VAR 0 2
25557: PPUSH
25558: LD_INT 1
25560: PPUSH
25561: CALL 24804 0 3
25565: ST_TO_ADDR
// InitHc ;
25566: CALL_OW 19
// InitUc ;
25570: CALL_OW 18
// uc_side := side ;
25574: LD_ADDR_OWVAR 20
25578: PUSH
25579: LD_VAR 0 16
25583: ST_TO_ADDR
// uc_nation := nation ;
25584: LD_ADDR_OWVAR 21
25588: PUSH
25589: LD_VAR 0 17
25593: ST_TO_ADDR
// if buildings then
25594: LD_VAR 0 18
25598: IFFALSE 26920
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25600: LD_ADDR_VAR 0 19
25604: PUSH
25605: LD_VAR 0 18
25609: PPUSH
25610: LD_INT 2
25612: PUSH
25613: LD_INT 30
25615: PUSH
25616: LD_INT 29
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 30
25625: PUSH
25626: LD_INT 30
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: LIST
25637: PPUSH
25638: CALL_OW 72
25642: ST_TO_ADDR
// if tmp then
25643: LD_VAR 0 19
25647: IFFALSE 25695
// for i in tmp do
25649: LD_ADDR_VAR 0 8
25653: PUSH
25654: LD_VAR 0 19
25658: PUSH
25659: FOR_IN
25660: IFFALSE 25693
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25662: LD_VAR 0 8
25666: PPUSH
25667: CALL_OW 250
25671: PPUSH
25672: LD_VAR 0 8
25676: PPUSH
25677: CALL_OW 251
25681: PPUSH
25682: LD_VAR 0 16
25686: PPUSH
25687: CALL_OW 441
25691: GO 25659
25693: POP
25694: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25695: LD_VAR 0 18
25699: PPUSH
25700: LD_INT 2
25702: PUSH
25703: LD_INT 30
25705: PUSH
25706: LD_INT 32
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 30
25715: PUSH
25716: LD_INT 33
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: LIST
25727: PPUSH
25728: CALL_OW 72
25732: IFFALSE 25820
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25734: LD_ADDR_VAR 0 8
25738: PUSH
25739: LD_VAR 0 18
25743: PPUSH
25744: LD_INT 2
25746: PUSH
25747: LD_INT 30
25749: PUSH
25750: LD_INT 32
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 30
25759: PUSH
25760: LD_INT 33
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: LIST
25771: PPUSH
25772: CALL_OW 72
25776: PUSH
25777: FOR_IN
25778: IFFALSE 25818
// begin if not GetBWeapon ( i ) then
25780: LD_VAR 0 8
25784: PPUSH
25785: CALL_OW 269
25789: NOT
25790: IFFALSE 25816
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25792: LD_VAR 0 8
25796: PPUSH
25797: LD_VAR 0 8
25801: PPUSH
25802: LD_VAR 0 2
25806: PPUSH
25807: CALL 27066 0 2
25811: PPUSH
25812: CALL_OW 431
// end ;
25816: GO 25777
25818: POP
25819: POP
// end ; for i = 1 to personel do
25820: LD_ADDR_VAR 0 8
25824: PUSH
25825: DOUBLE
25826: LD_INT 1
25828: DEC
25829: ST_TO_ADDR
25830: LD_VAR 0 6
25834: PUSH
25835: FOR_TO
25836: IFFALSE 26900
// begin if i > 4 then
25838: LD_VAR 0 8
25842: PUSH
25843: LD_INT 4
25845: GREATER
25846: IFFALSE 25850
// break ;
25848: GO 26900
// case i of 1 :
25850: LD_VAR 0 8
25854: PUSH
25855: LD_INT 1
25857: DOUBLE
25858: EQUAL
25859: IFTRUE 25863
25861: GO 25943
25863: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25864: LD_ADDR_VAR 0 12
25868: PUSH
25869: LD_VAR 0 18
25873: PPUSH
25874: LD_INT 22
25876: PUSH
25877: LD_VAR 0 16
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 58
25888: PUSH
25889: EMPTY
25890: LIST
25891: PUSH
25892: LD_INT 2
25894: PUSH
25895: LD_INT 30
25897: PUSH
25898: LD_INT 32
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 30
25907: PUSH
25908: LD_INT 4
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 30
25917: PUSH
25918: LD_INT 5
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: LIST
25935: PPUSH
25936: CALL_OW 72
25940: ST_TO_ADDR
25941: GO 26165
25943: LD_INT 2
25945: DOUBLE
25946: EQUAL
25947: IFTRUE 25951
25949: GO 26013
25951: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25952: LD_ADDR_VAR 0 12
25956: PUSH
25957: LD_VAR 0 18
25961: PPUSH
25962: LD_INT 22
25964: PUSH
25965: LD_VAR 0 16
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 2
25976: PUSH
25977: LD_INT 30
25979: PUSH
25980: LD_INT 0
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 30
25989: PUSH
25990: LD_INT 1
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: LIST
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PPUSH
26006: CALL_OW 72
26010: ST_TO_ADDR
26011: GO 26165
26013: LD_INT 3
26015: DOUBLE
26016: EQUAL
26017: IFTRUE 26021
26019: GO 26083
26021: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26022: LD_ADDR_VAR 0 12
26026: PUSH
26027: LD_VAR 0 18
26031: PPUSH
26032: LD_INT 22
26034: PUSH
26035: LD_VAR 0 16
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 2
26046: PUSH
26047: LD_INT 30
26049: PUSH
26050: LD_INT 2
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 30
26059: PUSH
26060: LD_INT 3
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: LIST
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PPUSH
26076: CALL_OW 72
26080: ST_TO_ADDR
26081: GO 26165
26083: LD_INT 4
26085: DOUBLE
26086: EQUAL
26087: IFTRUE 26091
26089: GO 26164
26091: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26092: LD_ADDR_VAR 0 12
26096: PUSH
26097: LD_VAR 0 18
26101: PPUSH
26102: LD_INT 22
26104: PUSH
26105: LD_VAR 0 16
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 2
26116: PUSH
26117: LD_INT 30
26119: PUSH
26120: LD_INT 6
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 30
26129: PUSH
26130: LD_INT 7
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 30
26139: PUSH
26140: LD_INT 8
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PPUSH
26157: CALL_OW 72
26161: ST_TO_ADDR
26162: GO 26165
26164: POP
// if i = 1 then
26165: LD_VAR 0 8
26169: PUSH
26170: LD_INT 1
26172: EQUAL
26173: IFFALSE 26284
// begin tmp := [ ] ;
26175: LD_ADDR_VAR 0 19
26179: PUSH
26180: EMPTY
26181: ST_TO_ADDR
// for j in f do
26182: LD_ADDR_VAR 0 9
26186: PUSH
26187: LD_VAR 0 12
26191: PUSH
26192: FOR_IN
26193: IFFALSE 26266
// if GetBType ( j ) = b_bunker then
26195: LD_VAR 0 9
26199: PPUSH
26200: CALL_OW 266
26204: PUSH
26205: LD_INT 32
26207: EQUAL
26208: IFFALSE 26235
// tmp := Insert ( tmp , 1 , j ) else
26210: LD_ADDR_VAR 0 19
26214: PUSH
26215: LD_VAR 0 19
26219: PPUSH
26220: LD_INT 1
26222: PPUSH
26223: LD_VAR 0 9
26227: PPUSH
26228: CALL_OW 2
26232: ST_TO_ADDR
26233: GO 26264
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26235: LD_ADDR_VAR 0 19
26239: PUSH
26240: LD_VAR 0 19
26244: PPUSH
26245: LD_VAR 0 19
26249: PUSH
26250: LD_INT 1
26252: PLUS
26253: PPUSH
26254: LD_VAR 0 9
26258: PPUSH
26259: CALL_OW 2
26263: ST_TO_ADDR
26264: GO 26192
26266: POP
26267: POP
// if tmp then
26268: LD_VAR 0 19
26272: IFFALSE 26284
// f := tmp ;
26274: LD_ADDR_VAR 0 12
26278: PUSH
26279: LD_VAR 0 19
26283: ST_TO_ADDR
// end ; x := personel [ i ] ;
26284: LD_ADDR_VAR 0 13
26288: PUSH
26289: LD_VAR 0 6
26293: PUSH
26294: LD_VAR 0 8
26298: ARRAY
26299: ST_TO_ADDR
// if x = - 1 then
26300: LD_VAR 0 13
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: EQUAL
26309: IFFALSE 26518
// begin for j in f do
26311: LD_ADDR_VAR 0 9
26315: PUSH
26316: LD_VAR 0 12
26320: PUSH
26321: FOR_IN
26322: IFFALSE 26514
// repeat InitHc ;
26324: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26328: LD_VAR 0 9
26332: PPUSH
26333: CALL_OW 266
26337: PUSH
26338: LD_INT 5
26340: EQUAL
26341: IFFALSE 26411
// begin if UnitsInside ( j ) < 3 then
26343: LD_VAR 0 9
26347: PPUSH
26348: CALL_OW 313
26352: PUSH
26353: LD_INT 3
26355: LESS
26356: IFFALSE 26392
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26358: LD_INT 0
26360: PPUSH
26361: LD_INT 5
26363: PUSH
26364: LD_INT 8
26366: PUSH
26367: LD_INT 9
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: LIST
26374: PUSH
26375: LD_VAR 0 17
26379: ARRAY
26380: PPUSH
26381: LD_VAR 0 4
26385: PPUSH
26386: CALL_OW 380
26390: GO 26409
// PrepareHuman ( false , i , skill ) ;
26392: LD_INT 0
26394: PPUSH
26395: LD_VAR 0 8
26399: PPUSH
26400: LD_VAR 0 4
26404: PPUSH
26405: CALL_OW 380
// end else
26409: GO 26428
// PrepareHuman ( false , i , skill ) ;
26411: LD_INT 0
26413: PPUSH
26414: LD_VAR 0 8
26418: PPUSH
26419: LD_VAR 0 4
26423: PPUSH
26424: CALL_OW 380
// un := CreateHuman ;
26428: LD_ADDR_VAR 0 14
26432: PUSH
26433: CALL_OW 44
26437: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26438: LD_ADDR_VAR 0 7
26442: PUSH
26443: LD_VAR 0 7
26447: PPUSH
26448: LD_INT 1
26450: PPUSH
26451: LD_VAR 0 14
26455: PPUSH
26456: CALL_OW 2
26460: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26461: LD_VAR 0 14
26465: PPUSH
26466: LD_VAR 0 9
26470: PPUSH
26471: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26475: LD_VAR 0 9
26479: PPUSH
26480: CALL_OW 313
26484: PUSH
26485: LD_INT 6
26487: EQUAL
26488: PUSH
26489: LD_VAR 0 9
26493: PPUSH
26494: CALL_OW 266
26498: PUSH
26499: LD_INT 32
26501: PUSH
26502: LD_INT 31
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: IN
26509: OR
26510: IFFALSE 26324
26512: GO 26321
26514: POP
26515: POP
// end else
26516: GO 26898
// for j = 1 to x do
26518: LD_ADDR_VAR 0 9
26522: PUSH
26523: DOUBLE
26524: LD_INT 1
26526: DEC
26527: ST_TO_ADDR
26528: LD_VAR 0 13
26532: PUSH
26533: FOR_TO
26534: IFFALSE 26896
// begin InitHc ;
26536: CALL_OW 19
// if not f then
26540: LD_VAR 0 12
26544: NOT
26545: IFFALSE 26634
// begin PrepareHuman ( false , i , skill ) ;
26547: LD_INT 0
26549: PPUSH
26550: LD_VAR 0 8
26554: PPUSH
26555: LD_VAR 0 4
26559: PPUSH
26560: CALL_OW 380
// un := CreateHuman ;
26564: LD_ADDR_VAR 0 14
26568: PUSH
26569: CALL_OW 44
26573: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26574: LD_ADDR_VAR 0 7
26578: PUSH
26579: LD_VAR 0 7
26583: PPUSH
26584: LD_INT 1
26586: PPUSH
26587: LD_VAR 0 14
26591: PPUSH
26592: CALL_OW 2
26596: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26597: LD_VAR 0 14
26601: PPUSH
26602: LD_VAR 0 1
26606: PPUSH
26607: CALL_OW 250
26611: PPUSH
26612: LD_VAR 0 1
26616: PPUSH
26617: CALL_OW 251
26621: PPUSH
26622: LD_INT 10
26624: PPUSH
26625: LD_INT 0
26627: PPUSH
26628: CALL_OW 50
// continue ;
26632: GO 26533
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26634: LD_VAR 0 12
26638: PUSH
26639: LD_INT 1
26641: ARRAY
26642: PPUSH
26643: CALL_OW 313
26647: PUSH
26648: LD_VAR 0 12
26652: PUSH
26653: LD_INT 1
26655: ARRAY
26656: PPUSH
26657: CALL_OW 266
26661: PUSH
26662: LD_INT 32
26664: PUSH
26665: LD_INT 31
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: IN
26672: AND
26673: PUSH
26674: LD_VAR 0 12
26678: PUSH
26679: LD_INT 1
26681: ARRAY
26682: PPUSH
26683: CALL_OW 313
26687: PUSH
26688: LD_INT 6
26690: EQUAL
26691: OR
26692: IFFALSE 26712
// f := Delete ( f , 1 ) ;
26694: LD_ADDR_VAR 0 12
26698: PUSH
26699: LD_VAR 0 12
26703: PPUSH
26704: LD_INT 1
26706: PPUSH
26707: CALL_OW 3
26711: ST_TO_ADDR
// if not f then
26712: LD_VAR 0 12
26716: NOT
26717: IFFALSE 26735
// begin x := x + 2 ;
26719: LD_ADDR_VAR 0 13
26723: PUSH
26724: LD_VAR 0 13
26728: PUSH
26729: LD_INT 2
26731: PLUS
26732: ST_TO_ADDR
// continue ;
26733: GO 26533
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26735: LD_VAR 0 12
26739: PUSH
26740: LD_INT 1
26742: ARRAY
26743: PPUSH
26744: CALL_OW 266
26748: PUSH
26749: LD_INT 5
26751: EQUAL
26752: IFFALSE 26826
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26754: LD_VAR 0 12
26758: PUSH
26759: LD_INT 1
26761: ARRAY
26762: PPUSH
26763: CALL_OW 313
26767: PUSH
26768: LD_INT 3
26770: LESS
26771: IFFALSE 26807
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26773: LD_INT 0
26775: PPUSH
26776: LD_INT 5
26778: PUSH
26779: LD_INT 8
26781: PUSH
26782: LD_INT 9
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: LIST
26789: PUSH
26790: LD_VAR 0 17
26794: ARRAY
26795: PPUSH
26796: LD_VAR 0 4
26800: PPUSH
26801: CALL_OW 380
26805: GO 26824
// PrepareHuman ( false , i , skill ) ;
26807: LD_INT 0
26809: PPUSH
26810: LD_VAR 0 8
26814: PPUSH
26815: LD_VAR 0 4
26819: PPUSH
26820: CALL_OW 380
// end else
26824: GO 26843
// PrepareHuman ( false , i , skill ) ;
26826: LD_INT 0
26828: PPUSH
26829: LD_VAR 0 8
26833: PPUSH
26834: LD_VAR 0 4
26838: PPUSH
26839: CALL_OW 380
// un := CreateHuman ;
26843: LD_ADDR_VAR 0 14
26847: PUSH
26848: CALL_OW 44
26852: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26853: LD_ADDR_VAR 0 7
26857: PUSH
26858: LD_VAR 0 7
26862: PPUSH
26863: LD_INT 1
26865: PPUSH
26866: LD_VAR 0 14
26870: PPUSH
26871: CALL_OW 2
26875: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26876: LD_VAR 0 14
26880: PPUSH
26881: LD_VAR 0 12
26885: PUSH
26886: LD_INT 1
26888: ARRAY
26889: PPUSH
26890: CALL_OW 52
// end ;
26894: GO 26533
26896: POP
26897: POP
// end ;
26898: GO 25835
26900: POP
26901: POP
// result := result ^ buildings ;
26902: LD_ADDR_VAR 0 7
26906: PUSH
26907: LD_VAR 0 7
26911: PUSH
26912: LD_VAR 0 18
26916: ADD
26917: ST_TO_ADDR
// end else
26918: GO 27061
// begin for i = 1 to personel do
26920: LD_ADDR_VAR 0 8
26924: PUSH
26925: DOUBLE
26926: LD_INT 1
26928: DEC
26929: ST_TO_ADDR
26930: LD_VAR 0 6
26934: PUSH
26935: FOR_TO
26936: IFFALSE 27059
// begin if i > 4 then
26938: LD_VAR 0 8
26942: PUSH
26943: LD_INT 4
26945: GREATER
26946: IFFALSE 26950
// break ;
26948: GO 27059
// x := personel [ i ] ;
26950: LD_ADDR_VAR 0 13
26954: PUSH
26955: LD_VAR 0 6
26959: PUSH
26960: LD_VAR 0 8
26964: ARRAY
26965: ST_TO_ADDR
// if x = - 1 then
26966: LD_VAR 0 13
26970: PUSH
26971: LD_INT 1
26973: NEG
26974: EQUAL
26975: IFFALSE 26979
// continue ;
26977: GO 26935
// PrepareHuman ( false , i , skill ) ;
26979: LD_INT 0
26981: PPUSH
26982: LD_VAR 0 8
26986: PPUSH
26987: LD_VAR 0 4
26991: PPUSH
26992: CALL_OW 380
// un := CreateHuman ;
26996: LD_ADDR_VAR 0 14
27000: PUSH
27001: CALL_OW 44
27005: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27006: LD_VAR 0 14
27010: PPUSH
27011: LD_VAR 0 1
27015: PPUSH
27016: CALL_OW 250
27020: PPUSH
27021: LD_VAR 0 1
27025: PPUSH
27026: CALL_OW 251
27030: PPUSH
27031: LD_INT 10
27033: PPUSH
27034: LD_INT 0
27036: PPUSH
27037: CALL_OW 50
// result := result ^ un ;
27041: LD_ADDR_VAR 0 7
27045: PUSH
27046: LD_VAR 0 7
27050: PUSH
27051: LD_VAR 0 14
27055: ADD
27056: ST_TO_ADDR
// end ;
27057: GO 26935
27059: POP
27060: POP
// end ; end ;
27061: LD_VAR 0 7
27065: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27066: LD_INT 0
27068: PPUSH
27069: PPUSH
27070: PPUSH
27071: PPUSH
27072: PPUSH
27073: PPUSH
27074: PPUSH
27075: PPUSH
27076: PPUSH
27077: PPUSH
27078: PPUSH
27079: PPUSH
27080: PPUSH
27081: PPUSH
27082: PPUSH
27083: PPUSH
// result := false ;
27084: LD_ADDR_VAR 0 3
27088: PUSH
27089: LD_INT 0
27091: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27092: LD_VAR 0 1
27096: NOT
27097: PUSH
27098: LD_VAR 0 1
27102: PPUSH
27103: CALL_OW 266
27107: PUSH
27108: LD_INT 32
27110: PUSH
27111: LD_INT 33
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: IN
27118: NOT
27119: OR
27120: IFFALSE 27124
// exit ;
27122: GO 28233
// nat := GetNation ( tower ) ;
27124: LD_ADDR_VAR 0 12
27128: PUSH
27129: LD_VAR 0 1
27133: PPUSH
27134: CALL_OW 248
27138: ST_TO_ADDR
// side := GetSide ( tower ) ;
27139: LD_ADDR_VAR 0 16
27143: PUSH
27144: LD_VAR 0 1
27148: PPUSH
27149: CALL_OW 255
27153: ST_TO_ADDR
// x := GetX ( tower ) ;
27154: LD_ADDR_VAR 0 10
27158: PUSH
27159: LD_VAR 0 1
27163: PPUSH
27164: CALL_OW 250
27168: ST_TO_ADDR
// y := GetY ( tower ) ;
27169: LD_ADDR_VAR 0 11
27173: PUSH
27174: LD_VAR 0 1
27178: PPUSH
27179: CALL_OW 251
27183: ST_TO_ADDR
// if not x or not y then
27184: LD_VAR 0 10
27188: NOT
27189: PUSH
27190: LD_VAR 0 11
27194: NOT
27195: OR
27196: IFFALSE 27200
// exit ;
27198: GO 28233
// weapon := 0 ;
27200: LD_ADDR_VAR 0 18
27204: PUSH
27205: LD_INT 0
27207: ST_TO_ADDR
// fac_list := [ ] ;
27208: LD_ADDR_VAR 0 17
27212: PUSH
27213: EMPTY
27214: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27215: LD_ADDR_VAR 0 6
27219: PUSH
27220: LD_VAR 0 1
27224: PPUSH
27225: CALL_OW 274
27229: PPUSH
27230: LD_VAR 0 2
27234: PPUSH
27235: LD_INT 0
27237: PPUSH
27238: CALL 24804 0 3
27242: PPUSH
27243: LD_INT 30
27245: PUSH
27246: LD_INT 3
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PPUSH
27253: CALL_OW 72
27257: ST_TO_ADDR
// if not factories then
27258: LD_VAR 0 6
27262: NOT
27263: IFFALSE 27267
// exit ;
27265: GO 28233
// for i in factories do
27267: LD_ADDR_VAR 0 8
27271: PUSH
27272: LD_VAR 0 6
27276: PUSH
27277: FOR_IN
27278: IFFALSE 27303
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27280: LD_ADDR_VAR 0 17
27284: PUSH
27285: LD_VAR 0 17
27289: PUSH
27290: LD_VAR 0 8
27294: PPUSH
27295: CALL_OW 478
27299: UNION
27300: ST_TO_ADDR
27301: GO 27277
27303: POP
27304: POP
// if not fac_list then
27305: LD_VAR 0 17
27309: NOT
27310: IFFALSE 27314
// exit ;
27312: GO 28233
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27314: LD_ADDR_VAR 0 5
27318: PUSH
27319: LD_INT 4
27321: PUSH
27322: LD_INT 5
27324: PUSH
27325: LD_INT 9
27327: PUSH
27328: LD_INT 10
27330: PUSH
27331: LD_INT 6
27333: PUSH
27334: LD_INT 7
27336: PUSH
27337: LD_INT 11
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 27
27351: PUSH
27352: LD_INT 28
27354: PUSH
27355: LD_INT 26
27357: PUSH
27358: LD_INT 30
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 43
27369: PUSH
27370: LD_INT 44
27372: PUSH
27373: LD_INT 46
27375: PUSH
27376: LD_INT 45
27378: PUSH
27379: LD_INT 47
27381: PUSH
27382: LD_INT 49
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: LIST
27397: PUSH
27398: LD_VAR 0 12
27402: ARRAY
27403: ST_TO_ADDR
// list := list isect fac_list ;
27404: LD_ADDR_VAR 0 5
27408: PUSH
27409: LD_VAR 0 5
27413: PUSH
27414: LD_VAR 0 17
27418: ISECT
27419: ST_TO_ADDR
// if not list then
27420: LD_VAR 0 5
27424: NOT
27425: IFFALSE 27429
// exit ;
27427: GO 28233
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27429: LD_VAR 0 12
27433: PUSH
27434: LD_INT 3
27436: EQUAL
27437: PUSH
27438: LD_INT 49
27440: PUSH
27441: LD_VAR 0 5
27445: IN
27446: AND
27447: PUSH
27448: LD_INT 31
27450: PPUSH
27451: LD_VAR 0 16
27455: PPUSH
27456: CALL_OW 321
27460: PUSH
27461: LD_INT 2
27463: EQUAL
27464: AND
27465: IFFALSE 27525
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27467: LD_INT 22
27469: PUSH
27470: LD_VAR 0 16
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 35
27481: PUSH
27482: LD_INT 49
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 91
27491: PUSH
27492: LD_VAR 0 1
27496: PUSH
27497: LD_INT 10
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: LIST
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: LIST
27509: PPUSH
27510: CALL_OW 69
27514: NOT
27515: IFFALSE 27525
// weapon := ru_time_lapser ;
27517: LD_ADDR_VAR 0 18
27521: PUSH
27522: LD_INT 49
27524: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27525: LD_VAR 0 12
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: LD_INT 2
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: IN
27540: PUSH
27541: LD_INT 11
27543: PUSH
27544: LD_VAR 0 5
27548: IN
27549: PUSH
27550: LD_INT 30
27552: PUSH
27553: LD_VAR 0 5
27557: IN
27558: OR
27559: AND
27560: PUSH
27561: LD_INT 6
27563: PPUSH
27564: LD_VAR 0 16
27568: PPUSH
27569: CALL_OW 321
27573: PUSH
27574: LD_INT 2
27576: EQUAL
27577: AND
27578: IFFALSE 27743
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27580: LD_INT 22
27582: PUSH
27583: LD_VAR 0 16
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 2
27594: PUSH
27595: LD_INT 35
27597: PUSH
27598: LD_INT 11
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 35
27607: PUSH
27608: LD_INT 30
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 91
27622: PUSH
27623: LD_VAR 0 1
27627: PUSH
27628: LD_INT 18
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: LIST
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: LIST
27640: PPUSH
27641: CALL_OW 69
27645: NOT
27646: PUSH
27647: LD_INT 22
27649: PUSH
27650: LD_VAR 0 16
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 2
27661: PUSH
27662: LD_INT 30
27664: PUSH
27665: LD_INT 32
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 30
27674: PUSH
27675: LD_INT 33
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 91
27689: PUSH
27690: LD_VAR 0 1
27694: PUSH
27695: LD_INT 12
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: LIST
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: LIST
27707: PUSH
27708: EMPTY
27709: LIST
27710: PPUSH
27711: CALL_OW 69
27715: PUSH
27716: LD_INT 2
27718: GREATER
27719: AND
27720: IFFALSE 27743
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27722: LD_ADDR_VAR 0 18
27726: PUSH
27727: LD_INT 11
27729: PUSH
27730: LD_INT 30
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_VAR 0 12
27741: ARRAY
27742: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27743: LD_VAR 0 18
27747: NOT
27748: PUSH
27749: LD_INT 40
27751: PPUSH
27752: LD_VAR 0 16
27756: PPUSH
27757: CALL_OW 321
27761: PUSH
27762: LD_INT 2
27764: EQUAL
27765: AND
27766: PUSH
27767: LD_INT 7
27769: PUSH
27770: LD_VAR 0 5
27774: IN
27775: PUSH
27776: LD_INT 28
27778: PUSH
27779: LD_VAR 0 5
27783: IN
27784: OR
27785: PUSH
27786: LD_INT 45
27788: PUSH
27789: LD_VAR 0 5
27793: IN
27794: OR
27795: AND
27796: IFFALSE 28050
// begin hex := GetHexInfo ( x , y ) ;
27798: LD_ADDR_VAR 0 4
27802: PUSH
27803: LD_VAR 0 10
27807: PPUSH
27808: LD_VAR 0 11
27812: PPUSH
27813: CALL_OW 546
27817: ST_TO_ADDR
// if hex [ 1 ] then
27818: LD_VAR 0 4
27822: PUSH
27823: LD_INT 1
27825: ARRAY
27826: IFFALSE 27830
// exit ;
27828: GO 28233
// height := hex [ 2 ] ;
27830: LD_ADDR_VAR 0 15
27834: PUSH
27835: LD_VAR 0 4
27839: PUSH
27840: LD_INT 2
27842: ARRAY
27843: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27844: LD_ADDR_VAR 0 14
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: LD_INT 2
27854: PUSH
27855: LD_INT 3
27857: PUSH
27858: LD_INT 5
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: ST_TO_ADDR
// for i in tmp do
27867: LD_ADDR_VAR 0 8
27871: PUSH
27872: LD_VAR 0 14
27876: PUSH
27877: FOR_IN
27878: IFFALSE 28048
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27880: LD_ADDR_VAR 0 9
27884: PUSH
27885: LD_VAR 0 10
27889: PPUSH
27890: LD_VAR 0 8
27894: PPUSH
27895: LD_INT 5
27897: PPUSH
27898: CALL_OW 272
27902: PUSH
27903: LD_VAR 0 11
27907: PPUSH
27908: LD_VAR 0 8
27912: PPUSH
27913: LD_INT 5
27915: PPUSH
27916: CALL_OW 273
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27925: LD_VAR 0 9
27929: PUSH
27930: LD_INT 1
27932: ARRAY
27933: PPUSH
27934: LD_VAR 0 9
27938: PUSH
27939: LD_INT 2
27941: ARRAY
27942: PPUSH
27943: CALL_OW 488
27947: IFFALSE 28046
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27949: LD_ADDR_VAR 0 4
27953: PUSH
27954: LD_VAR 0 9
27958: PUSH
27959: LD_INT 1
27961: ARRAY
27962: PPUSH
27963: LD_VAR 0 9
27967: PUSH
27968: LD_INT 2
27970: ARRAY
27971: PPUSH
27972: CALL_OW 546
27976: ST_TO_ADDR
// if hex [ 1 ] then
27977: LD_VAR 0 4
27981: PUSH
27982: LD_INT 1
27984: ARRAY
27985: IFFALSE 27989
// continue ;
27987: GO 27877
// h := hex [ 2 ] ;
27989: LD_ADDR_VAR 0 13
27993: PUSH
27994: LD_VAR 0 4
27998: PUSH
27999: LD_INT 2
28001: ARRAY
28002: ST_TO_ADDR
// if h + 7 < height then
28003: LD_VAR 0 13
28007: PUSH
28008: LD_INT 7
28010: PLUS
28011: PUSH
28012: LD_VAR 0 15
28016: LESS
28017: IFFALSE 28046
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28019: LD_ADDR_VAR 0 18
28023: PUSH
28024: LD_INT 7
28026: PUSH
28027: LD_INT 28
28029: PUSH
28030: LD_INT 45
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: LIST
28037: PUSH
28038: LD_VAR 0 12
28042: ARRAY
28043: ST_TO_ADDR
// break ;
28044: GO 28048
// end ; end ; end ;
28046: GO 27877
28048: POP
28049: POP
// end ; if not weapon then
28050: LD_VAR 0 18
28054: NOT
28055: IFFALSE 28115
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28057: LD_ADDR_VAR 0 5
28061: PUSH
28062: LD_VAR 0 5
28066: PUSH
28067: LD_INT 11
28069: PUSH
28070: LD_INT 30
28072: PUSH
28073: LD_INT 49
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: LIST
28080: DIFF
28081: ST_TO_ADDR
// if not list then
28082: LD_VAR 0 5
28086: NOT
28087: IFFALSE 28091
// exit ;
28089: GO 28233
// weapon := list [ rand ( 1 , list ) ] ;
28091: LD_ADDR_VAR 0 18
28095: PUSH
28096: LD_VAR 0 5
28100: PUSH
28101: LD_INT 1
28103: PPUSH
28104: LD_VAR 0 5
28108: PPUSH
28109: CALL_OW 12
28113: ARRAY
28114: ST_TO_ADDR
// end ; if weapon then
28115: LD_VAR 0 18
28119: IFFALSE 28233
// begin tmp := CostOfWeapon ( weapon ) ;
28121: LD_ADDR_VAR 0 14
28125: PUSH
28126: LD_VAR 0 18
28130: PPUSH
28131: CALL_OW 451
28135: ST_TO_ADDR
// j := GetBase ( tower ) ;
28136: LD_ADDR_VAR 0 9
28140: PUSH
28141: LD_VAR 0 1
28145: PPUSH
28146: CALL_OW 274
28150: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28151: LD_VAR 0 9
28155: PPUSH
28156: LD_INT 1
28158: PPUSH
28159: CALL_OW 275
28163: PUSH
28164: LD_VAR 0 14
28168: PUSH
28169: LD_INT 1
28171: ARRAY
28172: GREATEREQUAL
28173: PUSH
28174: LD_VAR 0 9
28178: PPUSH
28179: LD_INT 2
28181: PPUSH
28182: CALL_OW 275
28186: PUSH
28187: LD_VAR 0 14
28191: PUSH
28192: LD_INT 2
28194: ARRAY
28195: GREATEREQUAL
28196: AND
28197: PUSH
28198: LD_VAR 0 9
28202: PPUSH
28203: LD_INT 3
28205: PPUSH
28206: CALL_OW 275
28210: PUSH
28211: LD_VAR 0 14
28215: PUSH
28216: LD_INT 3
28218: ARRAY
28219: GREATEREQUAL
28220: AND
28221: IFFALSE 28233
// result := weapon ;
28223: LD_ADDR_VAR 0 3
28227: PUSH
28228: LD_VAR 0 18
28232: ST_TO_ADDR
// end ; end ;
28233: LD_VAR 0 3
28237: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28238: LD_INT 0
28240: PPUSH
28241: PPUSH
// result := true ;
28242: LD_ADDR_VAR 0 3
28246: PUSH
28247: LD_INT 1
28249: ST_TO_ADDR
// if array1 = array2 then
28250: LD_VAR 0 1
28254: PUSH
28255: LD_VAR 0 2
28259: EQUAL
28260: IFFALSE 28320
// begin for i = 1 to array1 do
28262: LD_ADDR_VAR 0 4
28266: PUSH
28267: DOUBLE
28268: LD_INT 1
28270: DEC
28271: ST_TO_ADDR
28272: LD_VAR 0 1
28276: PUSH
28277: FOR_TO
28278: IFFALSE 28316
// if array1 [ i ] <> array2 [ i ] then
28280: LD_VAR 0 1
28284: PUSH
28285: LD_VAR 0 4
28289: ARRAY
28290: PUSH
28291: LD_VAR 0 2
28295: PUSH
28296: LD_VAR 0 4
28300: ARRAY
28301: NONEQUAL
28302: IFFALSE 28314
// begin result := false ;
28304: LD_ADDR_VAR 0 3
28308: PUSH
28309: LD_INT 0
28311: ST_TO_ADDR
// break ;
28312: GO 28316
// end ;
28314: GO 28277
28316: POP
28317: POP
// end else
28318: GO 28328
// result := false ;
28320: LD_ADDR_VAR 0 3
28324: PUSH
28325: LD_INT 0
28327: ST_TO_ADDR
// end ;
28328: LD_VAR 0 3
28332: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28333: LD_INT 0
28335: PPUSH
28336: PPUSH
// if not array1 or not array2 then
28337: LD_VAR 0 1
28341: NOT
28342: PUSH
28343: LD_VAR 0 2
28347: NOT
28348: OR
28349: IFFALSE 28353
// exit ;
28351: GO 28417
// result := true ;
28353: LD_ADDR_VAR 0 3
28357: PUSH
28358: LD_INT 1
28360: ST_TO_ADDR
// for i = 1 to array1 do
28361: LD_ADDR_VAR 0 4
28365: PUSH
28366: DOUBLE
28367: LD_INT 1
28369: DEC
28370: ST_TO_ADDR
28371: LD_VAR 0 1
28375: PUSH
28376: FOR_TO
28377: IFFALSE 28415
// if array1 [ i ] <> array2 [ i ] then
28379: LD_VAR 0 1
28383: PUSH
28384: LD_VAR 0 4
28388: ARRAY
28389: PUSH
28390: LD_VAR 0 2
28394: PUSH
28395: LD_VAR 0 4
28399: ARRAY
28400: NONEQUAL
28401: IFFALSE 28413
// begin result := false ;
28403: LD_ADDR_VAR 0 3
28407: PUSH
28408: LD_INT 0
28410: ST_TO_ADDR
// break ;
28411: GO 28415
// end ;
28413: GO 28376
28415: POP
28416: POP
// end ;
28417: LD_VAR 0 3
28421: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28422: LD_INT 0
28424: PPUSH
28425: PPUSH
28426: PPUSH
// pom := GetBase ( fac ) ;
28427: LD_ADDR_VAR 0 5
28431: PUSH
28432: LD_VAR 0 1
28436: PPUSH
28437: CALL_OW 274
28441: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28442: LD_ADDR_VAR 0 4
28446: PUSH
28447: LD_VAR 0 2
28451: PUSH
28452: LD_INT 1
28454: ARRAY
28455: PPUSH
28456: LD_VAR 0 2
28460: PUSH
28461: LD_INT 2
28463: ARRAY
28464: PPUSH
28465: LD_VAR 0 2
28469: PUSH
28470: LD_INT 3
28472: ARRAY
28473: PPUSH
28474: LD_VAR 0 2
28478: PUSH
28479: LD_INT 4
28481: ARRAY
28482: PPUSH
28483: CALL_OW 449
28487: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28488: LD_ADDR_VAR 0 3
28492: PUSH
28493: LD_VAR 0 5
28497: PPUSH
28498: LD_INT 1
28500: PPUSH
28501: CALL_OW 275
28505: PUSH
28506: LD_VAR 0 4
28510: PUSH
28511: LD_INT 1
28513: ARRAY
28514: GREATEREQUAL
28515: PUSH
28516: LD_VAR 0 5
28520: PPUSH
28521: LD_INT 2
28523: PPUSH
28524: CALL_OW 275
28528: PUSH
28529: LD_VAR 0 4
28533: PUSH
28534: LD_INT 2
28536: ARRAY
28537: GREATEREQUAL
28538: AND
28539: PUSH
28540: LD_VAR 0 5
28544: PPUSH
28545: LD_INT 3
28547: PPUSH
28548: CALL_OW 275
28552: PUSH
28553: LD_VAR 0 4
28557: PUSH
28558: LD_INT 3
28560: ARRAY
28561: GREATEREQUAL
28562: AND
28563: ST_TO_ADDR
// end ;
28564: LD_VAR 0 3
28568: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28569: LD_INT 0
28571: PPUSH
28572: PPUSH
28573: PPUSH
28574: PPUSH
// pom := GetBase ( building ) ;
28575: LD_ADDR_VAR 0 3
28579: PUSH
28580: LD_VAR 0 1
28584: PPUSH
28585: CALL_OW 274
28589: ST_TO_ADDR
// if not pom then
28590: LD_VAR 0 3
28594: NOT
28595: IFFALSE 28599
// exit ;
28597: GO 28769
// btype := GetBType ( building ) ;
28599: LD_ADDR_VAR 0 5
28603: PUSH
28604: LD_VAR 0 1
28608: PPUSH
28609: CALL_OW 266
28613: ST_TO_ADDR
// if btype = b_armoury then
28614: LD_VAR 0 5
28618: PUSH
28619: LD_INT 4
28621: EQUAL
28622: IFFALSE 28632
// btype := b_barracks ;
28624: LD_ADDR_VAR 0 5
28628: PUSH
28629: LD_INT 5
28631: ST_TO_ADDR
// if btype = b_depot then
28632: LD_VAR 0 5
28636: PUSH
28637: LD_INT 0
28639: EQUAL
28640: IFFALSE 28650
// btype := b_warehouse ;
28642: LD_ADDR_VAR 0 5
28646: PUSH
28647: LD_INT 1
28649: ST_TO_ADDR
// if btype = b_workshop then
28650: LD_VAR 0 5
28654: PUSH
28655: LD_INT 2
28657: EQUAL
28658: IFFALSE 28668
// btype := b_factory ;
28660: LD_ADDR_VAR 0 5
28664: PUSH
28665: LD_INT 3
28667: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28668: LD_ADDR_VAR 0 4
28672: PUSH
28673: LD_VAR 0 5
28677: PPUSH
28678: LD_VAR 0 1
28682: PPUSH
28683: CALL_OW 248
28687: PPUSH
28688: CALL_OW 450
28692: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28693: LD_ADDR_VAR 0 2
28697: PUSH
28698: LD_VAR 0 3
28702: PPUSH
28703: LD_INT 1
28705: PPUSH
28706: CALL_OW 275
28710: PUSH
28711: LD_VAR 0 4
28715: PUSH
28716: LD_INT 1
28718: ARRAY
28719: GREATEREQUAL
28720: PUSH
28721: LD_VAR 0 3
28725: PPUSH
28726: LD_INT 2
28728: PPUSH
28729: CALL_OW 275
28733: PUSH
28734: LD_VAR 0 4
28738: PUSH
28739: LD_INT 2
28741: ARRAY
28742: GREATEREQUAL
28743: AND
28744: PUSH
28745: LD_VAR 0 3
28749: PPUSH
28750: LD_INT 3
28752: PPUSH
28753: CALL_OW 275
28757: PUSH
28758: LD_VAR 0 4
28762: PUSH
28763: LD_INT 3
28765: ARRAY
28766: GREATEREQUAL
28767: AND
28768: ST_TO_ADDR
// end ;
28769: LD_VAR 0 2
28773: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28774: LD_INT 0
28776: PPUSH
28777: PPUSH
28778: PPUSH
// pom := GetBase ( building ) ;
28779: LD_ADDR_VAR 0 4
28783: PUSH
28784: LD_VAR 0 1
28788: PPUSH
28789: CALL_OW 274
28793: ST_TO_ADDR
// if not pom then
28794: LD_VAR 0 4
28798: NOT
28799: IFFALSE 28803
// exit ;
28801: GO 28904
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28803: LD_ADDR_VAR 0 5
28807: PUSH
28808: LD_VAR 0 2
28812: PPUSH
28813: LD_VAR 0 1
28817: PPUSH
28818: CALL_OW 248
28822: PPUSH
28823: CALL_OW 450
28827: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28828: LD_ADDR_VAR 0 3
28832: PUSH
28833: LD_VAR 0 4
28837: PPUSH
28838: LD_INT 1
28840: PPUSH
28841: CALL_OW 275
28845: PUSH
28846: LD_VAR 0 5
28850: PUSH
28851: LD_INT 1
28853: ARRAY
28854: GREATEREQUAL
28855: PUSH
28856: LD_VAR 0 4
28860: PPUSH
28861: LD_INT 2
28863: PPUSH
28864: CALL_OW 275
28868: PUSH
28869: LD_VAR 0 5
28873: PUSH
28874: LD_INT 2
28876: ARRAY
28877: GREATEREQUAL
28878: AND
28879: PUSH
28880: LD_VAR 0 4
28884: PPUSH
28885: LD_INT 3
28887: PPUSH
28888: CALL_OW 275
28892: PUSH
28893: LD_VAR 0 5
28897: PUSH
28898: LD_INT 3
28900: ARRAY
28901: GREATEREQUAL
28902: AND
28903: ST_TO_ADDR
// end ;
28904: LD_VAR 0 3
28908: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28909: LD_INT 0
28911: PPUSH
28912: PPUSH
28913: PPUSH
28914: PPUSH
28915: PPUSH
28916: PPUSH
28917: PPUSH
28918: PPUSH
28919: PPUSH
28920: PPUSH
28921: PPUSH
// result := false ;
28922: LD_ADDR_VAR 0 8
28926: PUSH
28927: LD_INT 0
28929: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28930: LD_VAR 0 5
28934: NOT
28935: PUSH
28936: LD_VAR 0 1
28940: NOT
28941: OR
28942: PUSH
28943: LD_VAR 0 2
28947: NOT
28948: OR
28949: PUSH
28950: LD_VAR 0 3
28954: NOT
28955: OR
28956: IFFALSE 28960
// exit ;
28958: GO 29774
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28960: LD_ADDR_VAR 0 14
28964: PUSH
28965: LD_VAR 0 1
28969: PPUSH
28970: LD_VAR 0 2
28974: PPUSH
28975: LD_VAR 0 3
28979: PPUSH
28980: LD_VAR 0 4
28984: PPUSH
28985: LD_VAR 0 5
28989: PUSH
28990: LD_INT 1
28992: ARRAY
28993: PPUSH
28994: CALL_OW 248
28998: PPUSH
28999: LD_INT 0
29001: PPUSH
29002: CALL 31027 0 6
29006: ST_TO_ADDR
// if not hexes then
29007: LD_VAR 0 14
29011: NOT
29012: IFFALSE 29016
// exit ;
29014: GO 29774
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29016: LD_ADDR_VAR 0 17
29020: PUSH
29021: LD_VAR 0 5
29025: PPUSH
29026: LD_INT 22
29028: PUSH
29029: LD_VAR 0 13
29033: PPUSH
29034: CALL_OW 255
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 2
29045: PUSH
29046: LD_INT 30
29048: PUSH
29049: LD_INT 0
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 30
29058: PUSH
29059: LD_INT 1
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: LIST
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PPUSH
29075: CALL_OW 72
29079: ST_TO_ADDR
// for i = 1 to hexes do
29080: LD_ADDR_VAR 0 9
29084: PUSH
29085: DOUBLE
29086: LD_INT 1
29088: DEC
29089: ST_TO_ADDR
29090: LD_VAR 0 14
29094: PUSH
29095: FOR_TO
29096: IFFALSE 29772
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29098: LD_ADDR_VAR 0 13
29102: PUSH
29103: LD_VAR 0 14
29107: PUSH
29108: LD_VAR 0 9
29112: ARRAY
29113: PUSH
29114: LD_INT 1
29116: ARRAY
29117: PPUSH
29118: LD_VAR 0 14
29122: PUSH
29123: LD_VAR 0 9
29127: ARRAY
29128: PUSH
29129: LD_INT 2
29131: ARRAY
29132: PPUSH
29133: CALL_OW 428
29137: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29138: LD_VAR 0 14
29142: PUSH
29143: LD_VAR 0 9
29147: ARRAY
29148: PUSH
29149: LD_INT 1
29151: ARRAY
29152: PPUSH
29153: LD_VAR 0 14
29157: PUSH
29158: LD_VAR 0 9
29162: ARRAY
29163: PUSH
29164: LD_INT 2
29166: ARRAY
29167: PPUSH
29168: CALL_OW 351
29172: PUSH
29173: LD_VAR 0 14
29177: PUSH
29178: LD_VAR 0 9
29182: ARRAY
29183: PUSH
29184: LD_INT 1
29186: ARRAY
29187: PPUSH
29188: LD_VAR 0 14
29192: PUSH
29193: LD_VAR 0 9
29197: ARRAY
29198: PUSH
29199: LD_INT 2
29201: ARRAY
29202: PPUSH
29203: CALL_OW 488
29207: NOT
29208: OR
29209: PUSH
29210: LD_VAR 0 13
29214: PPUSH
29215: CALL_OW 247
29219: PUSH
29220: LD_INT 3
29222: EQUAL
29223: OR
29224: IFFALSE 29230
// exit ;
29226: POP
29227: POP
29228: GO 29774
// if not tmp then
29230: LD_VAR 0 13
29234: NOT
29235: IFFALSE 29239
// continue ;
29237: GO 29095
// result := true ;
29239: LD_ADDR_VAR 0 8
29243: PUSH
29244: LD_INT 1
29246: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29247: LD_VAR 0 6
29251: PUSH
29252: LD_VAR 0 13
29256: PPUSH
29257: CALL_OW 247
29261: PUSH
29262: LD_INT 2
29264: EQUAL
29265: AND
29266: PUSH
29267: LD_VAR 0 13
29271: PPUSH
29272: CALL_OW 263
29276: PUSH
29277: LD_INT 1
29279: EQUAL
29280: AND
29281: IFFALSE 29445
// begin if IsDrivenBy ( tmp ) then
29283: LD_VAR 0 13
29287: PPUSH
29288: CALL_OW 311
29292: IFFALSE 29296
// continue ;
29294: GO 29095
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29296: LD_VAR 0 6
29300: PPUSH
29301: LD_INT 3
29303: PUSH
29304: LD_INT 60
29306: PUSH
29307: EMPTY
29308: LIST
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 3
29316: PUSH
29317: LD_INT 55
29319: PUSH
29320: EMPTY
29321: LIST
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PPUSH
29331: CALL_OW 72
29335: IFFALSE 29443
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29337: LD_ADDR_VAR 0 18
29341: PUSH
29342: LD_VAR 0 6
29346: PPUSH
29347: LD_INT 3
29349: PUSH
29350: LD_INT 60
29352: PUSH
29353: EMPTY
29354: LIST
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 3
29362: PUSH
29363: LD_INT 55
29365: PUSH
29366: EMPTY
29367: LIST
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PPUSH
29377: CALL_OW 72
29381: PUSH
29382: LD_INT 1
29384: ARRAY
29385: ST_TO_ADDR
// if IsInUnit ( driver ) then
29386: LD_VAR 0 18
29390: PPUSH
29391: CALL_OW 310
29395: IFFALSE 29406
// ComExit ( driver ) ;
29397: LD_VAR 0 18
29401: PPUSH
29402: CALL 54828 0 1
// AddComEnterUnit ( driver , tmp ) ;
29406: LD_VAR 0 18
29410: PPUSH
29411: LD_VAR 0 13
29415: PPUSH
29416: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29420: LD_VAR 0 18
29424: PPUSH
29425: LD_VAR 0 7
29429: PPUSH
29430: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29434: LD_VAR 0 18
29438: PPUSH
29439: CALL_OW 181
// end ; continue ;
29443: GO 29095
// end ; if not cleaners or not tmp in cleaners then
29445: LD_VAR 0 6
29449: NOT
29450: PUSH
29451: LD_VAR 0 13
29455: PUSH
29456: LD_VAR 0 6
29460: IN
29461: NOT
29462: OR
29463: IFFALSE 29770
// begin if dep then
29465: LD_VAR 0 17
29469: IFFALSE 29605
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29471: LD_ADDR_VAR 0 16
29475: PUSH
29476: LD_VAR 0 17
29480: PUSH
29481: LD_INT 1
29483: ARRAY
29484: PPUSH
29485: CALL_OW 250
29489: PPUSH
29490: LD_VAR 0 17
29494: PUSH
29495: LD_INT 1
29497: ARRAY
29498: PPUSH
29499: CALL_OW 254
29503: PPUSH
29504: LD_INT 5
29506: PPUSH
29507: CALL_OW 272
29511: PUSH
29512: LD_VAR 0 17
29516: PUSH
29517: LD_INT 1
29519: ARRAY
29520: PPUSH
29521: CALL_OW 251
29525: PPUSH
29526: LD_VAR 0 17
29530: PUSH
29531: LD_INT 1
29533: ARRAY
29534: PPUSH
29535: CALL_OW 254
29539: PPUSH
29540: LD_INT 5
29542: PPUSH
29543: CALL_OW 273
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29552: LD_VAR 0 16
29556: PUSH
29557: LD_INT 1
29559: ARRAY
29560: PPUSH
29561: LD_VAR 0 16
29565: PUSH
29566: LD_INT 2
29568: ARRAY
29569: PPUSH
29570: CALL_OW 488
29574: IFFALSE 29605
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29576: LD_VAR 0 13
29580: PPUSH
29581: LD_VAR 0 16
29585: PUSH
29586: LD_INT 1
29588: ARRAY
29589: PPUSH
29590: LD_VAR 0 16
29594: PUSH
29595: LD_INT 2
29597: ARRAY
29598: PPUSH
29599: CALL_OW 111
// continue ;
29603: GO 29095
// end ; end ; r := GetDir ( tmp ) ;
29605: LD_ADDR_VAR 0 15
29609: PUSH
29610: LD_VAR 0 13
29614: PPUSH
29615: CALL_OW 254
29619: ST_TO_ADDR
// if r = 5 then
29620: LD_VAR 0 15
29624: PUSH
29625: LD_INT 5
29627: EQUAL
29628: IFFALSE 29638
// r := 0 ;
29630: LD_ADDR_VAR 0 15
29634: PUSH
29635: LD_INT 0
29637: ST_TO_ADDR
// for j = r to 5 do
29638: LD_ADDR_VAR 0 10
29642: PUSH
29643: DOUBLE
29644: LD_VAR 0 15
29648: DEC
29649: ST_TO_ADDR
29650: LD_INT 5
29652: PUSH
29653: FOR_TO
29654: IFFALSE 29768
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29656: LD_ADDR_VAR 0 11
29660: PUSH
29661: LD_VAR 0 13
29665: PPUSH
29666: CALL_OW 250
29670: PPUSH
29671: LD_VAR 0 10
29675: PPUSH
29676: LD_INT 2
29678: PPUSH
29679: CALL_OW 272
29683: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29684: LD_ADDR_VAR 0 12
29688: PUSH
29689: LD_VAR 0 13
29693: PPUSH
29694: CALL_OW 251
29698: PPUSH
29699: LD_VAR 0 10
29703: PPUSH
29704: LD_INT 2
29706: PPUSH
29707: CALL_OW 273
29711: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29712: LD_VAR 0 11
29716: PPUSH
29717: LD_VAR 0 12
29721: PPUSH
29722: CALL_OW 488
29726: PUSH
29727: LD_VAR 0 11
29731: PPUSH
29732: LD_VAR 0 12
29736: PPUSH
29737: CALL_OW 428
29741: NOT
29742: AND
29743: IFFALSE 29766
// begin ComMoveXY ( tmp , _x , _y ) ;
29745: LD_VAR 0 13
29749: PPUSH
29750: LD_VAR 0 11
29754: PPUSH
29755: LD_VAR 0 12
29759: PPUSH
29760: CALL_OW 111
// break ;
29764: GO 29768
// end ; end ;
29766: GO 29653
29768: POP
29769: POP
// end ; end ;
29770: GO 29095
29772: POP
29773: POP
// end ;
29774: LD_VAR 0 8
29778: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29779: LD_INT 0
29781: PPUSH
// result := true ;
29782: LD_ADDR_VAR 0 3
29786: PUSH
29787: LD_INT 1
29789: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29790: LD_VAR 0 2
29794: PUSH
29795: LD_INT 24
29797: DOUBLE
29798: EQUAL
29799: IFTRUE 29809
29801: LD_INT 33
29803: DOUBLE
29804: EQUAL
29805: IFTRUE 29809
29807: GO 29834
29809: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29810: LD_ADDR_VAR 0 3
29814: PUSH
29815: LD_INT 32
29817: PPUSH
29818: LD_VAR 0 1
29822: PPUSH
29823: CALL_OW 321
29827: PUSH
29828: LD_INT 2
29830: EQUAL
29831: ST_TO_ADDR
29832: GO 30150
29834: LD_INT 20
29836: DOUBLE
29837: EQUAL
29838: IFTRUE 29842
29840: GO 29867
29842: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29843: LD_ADDR_VAR 0 3
29847: PUSH
29848: LD_INT 6
29850: PPUSH
29851: LD_VAR 0 1
29855: PPUSH
29856: CALL_OW 321
29860: PUSH
29861: LD_INT 2
29863: EQUAL
29864: ST_TO_ADDR
29865: GO 30150
29867: LD_INT 22
29869: DOUBLE
29870: EQUAL
29871: IFTRUE 29881
29873: LD_INT 36
29875: DOUBLE
29876: EQUAL
29877: IFTRUE 29881
29879: GO 29906
29881: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29882: LD_ADDR_VAR 0 3
29886: PUSH
29887: LD_INT 15
29889: PPUSH
29890: LD_VAR 0 1
29894: PPUSH
29895: CALL_OW 321
29899: PUSH
29900: LD_INT 2
29902: EQUAL
29903: ST_TO_ADDR
29904: GO 30150
29906: LD_INT 30
29908: DOUBLE
29909: EQUAL
29910: IFTRUE 29914
29912: GO 29939
29914: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29915: LD_ADDR_VAR 0 3
29919: PUSH
29920: LD_INT 20
29922: PPUSH
29923: LD_VAR 0 1
29927: PPUSH
29928: CALL_OW 321
29932: PUSH
29933: LD_INT 2
29935: EQUAL
29936: ST_TO_ADDR
29937: GO 30150
29939: LD_INT 28
29941: DOUBLE
29942: EQUAL
29943: IFTRUE 29953
29945: LD_INT 21
29947: DOUBLE
29948: EQUAL
29949: IFTRUE 29953
29951: GO 29978
29953: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29954: LD_ADDR_VAR 0 3
29958: PUSH
29959: LD_INT 21
29961: PPUSH
29962: LD_VAR 0 1
29966: PPUSH
29967: CALL_OW 321
29971: PUSH
29972: LD_INT 2
29974: EQUAL
29975: ST_TO_ADDR
29976: GO 30150
29978: LD_INT 16
29980: DOUBLE
29981: EQUAL
29982: IFTRUE 29986
29984: GO 30011
29986: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29987: LD_ADDR_VAR 0 3
29991: PUSH
29992: LD_INT 84
29994: PPUSH
29995: LD_VAR 0 1
29999: PPUSH
30000: CALL_OW 321
30004: PUSH
30005: LD_INT 2
30007: EQUAL
30008: ST_TO_ADDR
30009: GO 30150
30011: LD_INT 19
30013: DOUBLE
30014: EQUAL
30015: IFTRUE 30025
30017: LD_INT 23
30019: DOUBLE
30020: EQUAL
30021: IFTRUE 30025
30023: GO 30050
30025: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30026: LD_ADDR_VAR 0 3
30030: PUSH
30031: LD_INT 83
30033: PPUSH
30034: LD_VAR 0 1
30038: PPUSH
30039: CALL_OW 321
30043: PUSH
30044: LD_INT 2
30046: EQUAL
30047: ST_TO_ADDR
30048: GO 30150
30050: LD_INT 17
30052: DOUBLE
30053: EQUAL
30054: IFTRUE 30058
30056: GO 30083
30058: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30059: LD_ADDR_VAR 0 3
30063: PUSH
30064: LD_INT 39
30066: PPUSH
30067: LD_VAR 0 1
30071: PPUSH
30072: CALL_OW 321
30076: PUSH
30077: LD_INT 2
30079: EQUAL
30080: ST_TO_ADDR
30081: GO 30150
30083: LD_INT 18
30085: DOUBLE
30086: EQUAL
30087: IFTRUE 30091
30089: GO 30116
30091: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30092: LD_ADDR_VAR 0 3
30096: PUSH
30097: LD_INT 40
30099: PPUSH
30100: LD_VAR 0 1
30104: PPUSH
30105: CALL_OW 321
30109: PUSH
30110: LD_INT 2
30112: EQUAL
30113: ST_TO_ADDR
30114: GO 30150
30116: LD_INT 27
30118: DOUBLE
30119: EQUAL
30120: IFTRUE 30124
30122: GO 30149
30124: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30125: LD_ADDR_VAR 0 3
30129: PUSH
30130: LD_INT 35
30132: PPUSH
30133: LD_VAR 0 1
30137: PPUSH
30138: CALL_OW 321
30142: PUSH
30143: LD_INT 2
30145: EQUAL
30146: ST_TO_ADDR
30147: GO 30150
30149: POP
// end ;
30150: LD_VAR 0 3
30154: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30155: LD_INT 0
30157: PPUSH
30158: PPUSH
30159: PPUSH
30160: PPUSH
30161: PPUSH
30162: PPUSH
30163: PPUSH
30164: PPUSH
30165: PPUSH
30166: PPUSH
30167: PPUSH
// result := false ;
30168: LD_ADDR_VAR 0 6
30172: PUSH
30173: LD_INT 0
30175: ST_TO_ADDR
// if btype = b_depot then
30176: LD_VAR 0 2
30180: PUSH
30181: LD_INT 0
30183: EQUAL
30184: IFFALSE 30196
// begin result := true ;
30186: LD_ADDR_VAR 0 6
30190: PUSH
30191: LD_INT 1
30193: ST_TO_ADDR
// exit ;
30194: GO 31022
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30196: LD_VAR 0 1
30200: NOT
30201: PUSH
30202: LD_VAR 0 1
30206: PPUSH
30207: CALL_OW 266
30211: PUSH
30212: LD_INT 0
30214: PUSH
30215: LD_INT 1
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: IN
30222: NOT
30223: OR
30224: PUSH
30225: LD_VAR 0 2
30229: NOT
30230: OR
30231: PUSH
30232: LD_VAR 0 5
30236: PUSH
30237: LD_INT 0
30239: PUSH
30240: LD_INT 1
30242: PUSH
30243: LD_INT 2
30245: PUSH
30246: LD_INT 3
30248: PUSH
30249: LD_INT 4
30251: PUSH
30252: LD_INT 5
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: IN
30263: NOT
30264: OR
30265: PUSH
30266: LD_VAR 0 3
30270: PPUSH
30271: LD_VAR 0 4
30275: PPUSH
30276: CALL_OW 488
30280: NOT
30281: OR
30282: IFFALSE 30286
// exit ;
30284: GO 31022
// side := GetSide ( depot ) ;
30286: LD_ADDR_VAR 0 9
30290: PUSH
30291: LD_VAR 0 1
30295: PPUSH
30296: CALL_OW 255
30300: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30301: LD_VAR 0 9
30305: PPUSH
30306: LD_VAR 0 2
30310: PPUSH
30311: CALL 29779 0 2
30315: NOT
30316: IFFALSE 30320
// exit ;
30318: GO 31022
// pom := GetBase ( depot ) ;
30320: LD_ADDR_VAR 0 10
30324: PUSH
30325: LD_VAR 0 1
30329: PPUSH
30330: CALL_OW 274
30334: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30335: LD_ADDR_VAR 0 11
30339: PUSH
30340: LD_VAR 0 2
30344: PPUSH
30345: LD_VAR 0 1
30349: PPUSH
30350: CALL_OW 248
30354: PPUSH
30355: CALL_OW 450
30359: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30360: LD_VAR 0 10
30364: PPUSH
30365: LD_INT 1
30367: PPUSH
30368: CALL_OW 275
30372: PUSH
30373: LD_VAR 0 11
30377: PUSH
30378: LD_INT 1
30380: ARRAY
30381: GREATEREQUAL
30382: PUSH
30383: LD_VAR 0 10
30387: PPUSH
30388: LD_INT 2
30390: PPUSH
30391: CALL_OW 275
30395: PUSH
30396: LD_VAR 0 11
30400: PUSH
30401: LD_INT 2
30403: ARRAY
30404: GREATEREQUAL
30405: AND
30406: PUSH
30407: LD_VAR 0 10
30411: PPUSH
30412: LD_INT 3
30414: PPUSH
30415: CALL_OW 275
30419: PUSH
30420: LD_VAR 0 11
30424: PUSH
30425: LD_INT 3
30427: ARRAY
30428: GREATEREQUAL
30429: AND
30430: NOT
30431: IFFALSE 30435
// exit ;
30433: GO 31022
// if GetBType ( depot ) = b_depot then
30435: LD_VAR 0 1
30439: PPUSH
30440: CALL_OW 266
30444: PUSH
30445: LD_INT 0
30447: EQUAL
30448: IFFALSE 30460
// dist := 28 else
30450: LD_ADDR_VAR 0 14
30454: PUSH
30455: LD_INT 28
30457: ST_TO_ADDR
30458: GO 30468
// dist := 36 ;
30460: LD_ADDR_VAR 0 14
30464: PUSH
30465: LD_INT 36
30467: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30468: LD_VAR 0 1
30472: PPUSH
30473: LD_VAR 0 3
30477: PPUSH
30478: LD_VAR 0 4
30482: PPUSH
30483: CALL_OW 297
30487: PUSH
30488: LD_VAR 0 14
30492: GREATER
30493: IFFALSE 30497
// exit ;
30495: GO 31022
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30497: LD_ADDR_VAR 0 12
30501: PUSH
30502: LD_VAR 0 2
30506: PPUSH
30507: LD_VAR 0 3
30511: PPUSH
30512: LD_VAR 0 4
30516: PPUSH
30517: LD_VAR 0 5
30521: PPUSH
30522: LD_VAR 0 1
30526: PPUSH
30527: CALL_OW 248
30531: PPUSH
30532: LD_INT 0
30534: PPUSH
30535: CALL 31027 0 6
30539: ST_TO_ADDR
// if not hexes then
30540: LD_VAR 0 12
30544: NOT
30545: IFFALSE 30549
// exit ;
30547: GO 31022
// hex := GetHexInfo ( x , y ) ;
30549: LD_ADDR_VAR 0 15
30553: PUSH
30554: LD_VAR 0 3
30558: PPUSH
30559: LD_VAR 0 4
30563: PPUSH
30564: CALL_OW 546
30568: ST_TO_ADDR
// if hex [ 1 ] then
30569: LD_VAR 0 15
30573: PUSH
30574: LD_INT 1
30576: ARRAY
30577: IFFALSE 30581
// exit ;
30579: GO 31022
// height := hex [ 2 ] ;
30581: LD_ADDR_VAR 0 13
30585: PUSH
30586: LD_VAR 0 15
30590: PUSH
30591: LD_INT 2
30593: ARRAY
30594: ST_TO_ADDR
// for i = 1 to hexes do
30595: LD_ADDR_VAR 0 7
30599: PUSH
30600: DOUBLE
30601: LD_INT 1
30603: DEC
30604: ST_TO_ADDR
30605: LD_VAR 0 12
30609: PUSH
30610: FOR_TO
30611: IFFALSE 30941
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30613: LD_VAR 0 12
30617: PUSH
30618: LD_VAR 0 7
30622: ARRAY
30623: PUSH
30624: LD_INT 1
30626: ARRAY
30627: PPUSH
30628: LD_VAR 0 12
30632: PUSH
30633: LD_VAR 0 7
30637: ARRAY
30638: PUSH
30639: LD_INT 2
30641: ARRAY
30642: PPUSH
30643: CALL_OW 488
30647: NOT
30648: PUSH
30649: LD_VAR 0 12
30653: PUSH
30654: LD_VAR 0 7
30658: ARRAY
30659: PUSH
30660: LD_INT 1
30662: ARRAY
30663: PPUSH
30664: LD_VAR 0 12
30668: PUSH
30669: LD_VAR 0 7
30673: ARRAY
30674: PUSH
30675: LD_INT 2
30677: ARRAY
30678: PPUSH
30679: CALL_OW 428
30683: PUSH
30684: LD_INT 0
30686: GREATER
30687: OR
30688: PUSH
30689: LD_VAR 0 12
30693: PUSH
30694: LD_VAR 0 7
30698: ARRAY
30699: PUSH
30700: LD_INT 1
30702: ARRAY
30703: PPUSH
30704: LD_VAR 0 12
30708: PUSH
30709: LD_VAR 0 7
30713: ARRAY
30714: PUSH
30715: LD_INT 2
30717: ARRAY
30718: PPUSH
30719: CALL_OW 351
30723: OR
30724: IFFALSE 30730
// exit ;
30726: POP
30727: POP
30728: GO 31022
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30730: LD_ADDR_VAR 0 8
30734: PUSH
30735: LD_VAR 0 12
30739: PUSH
30740: LD_VAR 0 7
30744: ARRAY
30745: PUSH
30746: LD_INT 1
30748: ARRAY
30749: PPUSH
30750: LD_VAR 0 12
30754: PUSH
30755: LD_VAR 0 7
30759: ARRAY
30760: PUSH
30761: LD_INT 2
30763: ARRAY
30764: PPUSH
30765: CALL_OW 546
30769: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30770: LD_VAR 0 8
30774: PUSH
30775: LD_INT 1
30777: ARRAY
30778: PUSH
30779: LD_VAR 0 8
30783: PUSH
30784: LD_INT 2
30786: ARRAY
30787: PUSH
30788: LD_VAR 0 13
30792: PUSH
30793: LD_INT 2
30795: PLUS
30796: GREATER
30797: OR
30798: PUSH
30799: LD_VAR 0 8
30803: PUSH
30804: LD_INT 2
30806: ARRAY
30807: PUSH
30808: LD_VAR 0 13
30812: PUSH
30813: LD_INT 2
30815: MINUS
30816: LESS
30817: OR
30818: PUSH
30819: LD_VAR 0 8
30823: PUSH
30824: LD_INT 3
30826: ARRAY
30827: PUSH
30828: LD_INT 0
30830: PUSH
30831: LD_INT 8
30833: PUSH
30834: LD_INT 9
30836: PUSH
30837: LD_INT 10
30839: PUSH
30840: LD_INT 11
30842: PUSH
30843: LD_INT 12
30845: PUSH
30846: LD_INT 13
30848: PUSH
30849: LD_INT 16
30851: PUSH
30852: LD_INT 17
30854: PUSH
30855: LD_INT 18
30857: PUSH
30858: LD_INT 19
30860: PUSH
30861: LD_INT 20
30863: PUSH
30864: LD_INT 21
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: IN
30882: NOT
30883: OR
30884: PUSH
30885: LD_VAR 0 8
30889: PUSH
30890: LD_INT 5
30892: ARRAY
30893: NOT
30894: OR
30895: PUSH
30896: LD_VAR 0 8
30900: PUSH
30901: LD_INT 6
30903: ARRAY
30904: PUSH
30905: LD_INT 1
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: LD_INT 7
30913: PUSH
30914: LD_INT 9
30916: PUSH
30917: LD_INT 10
30919: PUSH
30920: LD_INT 11
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: IN
30931: NOT
30932: OR
30933: IFFALSE 30939
// exit ;
30935: POP
30936: POP
30937: GO 31022
// end ;
30939: GO 30610
30941: POP
30942: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30943: LD_VAR 0 9
30947: PPUSH
30948: LD_VAR 0 3
30952: PPUSH
30953: LD_VAR 0 4
30957: PPUSH
30958: LD_INT 20
30960: PPUSH
30961: CALL 22945 0 4
30965: PUSH
30966: LD_INT 4
30968: ARRAY
30969: IFFALSE 30973
// exit ;
30971: GO 31022
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30973: LD_VAR 0 2
30977: PUSH
30978: LD_INT 29
30980: PUSH
30981: LD_INT 30
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: IN
30988: PUSH
30989: LD_VAR 0 3
30993: PPUSH
30994: LD_VAR 0 4
30998: PPUSH
30999: LD_VAR 0 9
31003: PPUSH
31004: CALL_OW 440
31008: NOT
31009: AND
31010: IFFALSE 31014
// exit ;
31012: GO 31022
// result := true ;
31014: LD_ADDR_VAR 0 6
31018: PUSH
31019: LD_INT 1
31021: ST_TO_ADDR
// end ;
31022: LD_VAR 0 6
31026: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31027: LD_INT 0
31029: PPUSH
31030: PPUSH
31031: PPUSH
31032: PPUSH
31033: PPUSH
31034: PPUSH
31035: PPUSH
31036: PPUSH
31037: PPUSH
31038: PPUSH
31039: PPUSH
31040: PPUSH
31041: PPUSH
31042: PPUSH
31043: PPUSH
31044: PPUSH
31045: PPUSH
31046: PPUSH
31047: PPUSH
31048: PPUSH
31049: PPUSH
31050: PPUSH
31051: PPUSH
31052: PPUSH
31053: PPUSH
31054: PPUSH
31055: PPUSH
31056: PPUSH
31057: PPUSH
31058: PPUSH
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
31063: PPUSH
31064: PPUSH
31065: PPUSH
31066: PPUSH
31067: PPUSH
31068: PPUSH
31069: PPUSH
31070: PPUSH
31071: PPUSH
31072: PPUSH
31073: PPUSH
31074: PPUSH
31075: PPUSH
31076: PPUSH
31077: PPUSH
31078: PPUSH
31079: PPUSH
31080: PPUSH
31081: PPUSH
31082: PPUSH
31083: PPUSH
31084: PPUSH
31085: PPUSH
31086: PPUSH
// result = [ ] ;
31087: LD_ADDR_VAR 0 7
31091: PUSH
31092: EMPTY
31093: ST_TO_ADDR
// temp_list = [ ] ;
31094: LD_ADDR_VAR 0 9
31098: PUSH
31099: EMPTY
31100: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31101: LD_VAR 0 4
31105: PUSH
31106: LD_INT 0
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: LD_INT 2
31114: PUSH
31115: LD_INT 3
31117: PUSH
31118: LD_INT 4
31120: PUSH
31121: LD_INT 5
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: IN
31132: NOT
31133: PUSH
31134: LD_VAR 0 1
31138: PUSH
31139: LD_INT 0
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: IN
31149: PUSH
31150: LD_VAR 0 5
31154: PUSH
31155: LD_INT 1
31157: PUSH
31158: LD_INT 2
31160: PUSH
31161: LD_INT 3
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: LIST
31168: IN
31169: NOT
31170: AND
31171: OR
31172: IFFALSE 31176
// exit ;
31174: GO 49567
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31176: LD_VAR 0 1
31180: PUSH
31181: LD_INT 6
31183: PUSH
31184: LD_INT 7
31186: PUSH
31187: LD_INT 8
31189: PUSH
31190: LD_INT 13
31192: PUSH
31193: LD_INT 12
31195: PUSH
31196: LD_INT 15
31198: PUSH
31199: LD_INT 11
31201: PUSH
31202: LD_INT 14
31204: PUSH
31205: LD_INT 10
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: IN
31219: IFFALSE 31229
// btype = b_lab ;
31221: LD_ADDR_VAR 0 1
31225: PUSH
31226: LD_INT 6
31228: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31229: LD_VAR 0 6
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: LD_INT 2
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: LIST
31247: IN
31248: NOT
31249: PUSH
31250: LD_VAR 0 1
31254: PUSH
31255: LD_INT 0
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: LD_INT 2
31263: PUSH
31264: LD_INT 3
31266: PUSH
31267: LD_INT 6
31269: PUSH
31270: LD_INT 36
31272: PUSH
31273: LD_INT 4
31275: PUSH
31276: LD_INT 5
31278: PUSH
31279: LD_INT 31
31281: PUSH
31282: LD_INT 32
31284: PUSH
31285: LD_INT 33
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: IN
31301: NOT
31302: PUSH
31303: LD_VAR 0 6
31307: PUSH
31308: LD_INT 1
31310: EQUAL
31311: AND
31312: OR
31313: PUSH
31314: LD_VAR 0 1
31318: PUSH
31319: LD_INT 2
31321: PUSH
31322: LD_INT 3
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: IN
31329: NOT
31330: PUSH
31331: LD_VAR 0 6
31335: PUSH
31336: LD_INT 2
31338: EQUAL
31339: AND
31340: OR
31341: IFFALSE 31351
// mode = 0 ;
31343: LD_ADDR_VAR 0 6
31347: PUSH
31348: LD_INT 0
31350: ST_TO_ADDR
// case mode of 0 :
31351: LD_VAR 0 6
31355: PUSH
31356: LD_INT 0
31358: DOUBLE
31359: EQUAL
31360: IFTRUE 31364
31362: GO 42817
31364: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31365: LD_ADDR_VAR 0 11
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: LD_INT 0
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 1
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: LD_INT 1
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: LD_INT 1
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 1
31423: NEG
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 1
31434: NEG
31435: PUSH
31436: LD_INT 1
31438: NEG
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: LD_INT 2
31450: NEG
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: LD_INT 2
31461: NEG
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 1
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: LD_INT 2
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 0
31490: PUSH
31491: LD_INT 2
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 1
31511: PUSH
31512: LD_INT 3
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 0
31521: PUSH
31522: LD_INT 3
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 1
31531: NEG
31532: PUSH
31533: LD_INT 2
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31558: LD_ADDR_VAR 0 12
31562: PUSH
31563: LD_INT 0
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 0
31575: PUSH
31576: LD_INT 1
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 1
31586: PUSH
31587: LD_INT 0
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 1
31596: PUSH
31597: LD_INT 1
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 0
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: NEG
31617: PUSH
31618: LD_INT 0
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: LD_INT 1
31631: NEG
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: LD_INT 1
31642: NEG
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 2
31650: PUSH
31651: LD_INT 0
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 2
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 2
31681: NEG
31682: PUSH
31683: LD_INT 0
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 2
31692: NEG
31693: PUSH
31694: LD_INT 1
31696: NEG
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 2
31704: NEG
31705: PUSH
31706: LD_INT 1
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 3
31715: NEG
31716: PUSH
31717: LD_INT 0
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 3
31726: NEG
31727: PUSH
31728: LD_INT 1
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31754: LD_ADDR_VAR 0 13
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: LD_INT 0
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: LD_INT 1
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: NEG
31813: PUSH
31814: LD_INT 0
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 1
31823: NEG
31824: PUSH
31825: LD_INT 1
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 1
31835: NEG
31836: PUSH
31837: LD_INT 2
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 2
31847: PUSH
31848: LD_INT 1
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 2
31857: PUSH
31858: LD_INT 2
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: LD_INT 2
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 2
31877: NEG
31878: PUSH
31879: LD_INT 1
31881: NEG
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 2
31889: NEG
31890: PUSH
31891: LD_INT 2
31893: NEG
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 2
31901: NEG
31902: PUSH
31903: LD_INT 3
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 3
31913: NEG
31914: PUSH
31915: LD_INT 2
31917: NEG
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 3
31925: NEG
31926: PUSH
31927: LD_INT 3
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31953: LD_ADDR_VAR 0 14
31957: PUSH
31958: LD_INT 0
31960: PUSH
31961: LD_INT 0
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: LD_INT 1
31973: NEG
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 1
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 1
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 1
32011: NEG
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: LD_INT 1
32026: NEG
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 1
32034: NEG
32035: PUSH
32036: LD_INT 2
32038: NEG
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: LD_INT 2
32049: NEG
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 1
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 1
32068: PUSH
32069: LD_INT 2
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 0
32078: PUSH
32079: LD_INT 2
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 1
32088: NEG
32089: PUSH
32090: LD_INT 1
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: LD_INT 3
32103: NEG
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 0
32111: PUSH
32112: LD_INT 3
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 1
32122: PUSH
32123: LD_INT 2
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32149: LD_ADDR_VAR 0 15
32153: PUSH
32154: LD_INT 0
32156: PUSH
32157: LD_INT 0
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 0
32166: PUSH
32167: LD_INT 1
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 1
32177: PUSH
32178: LD_INT 0
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 1
32187: PUSH
32188: LD_INT 1
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: LD_INT 1
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 1
32207: NEG
32208: PUSH
32209: LD_INT 0
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 1
32218: NEG
32219: PUSH
32220: LD_INT 1
32222: NEG
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: LD_INT 1
32233: NEG
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 2
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 2
32251: PUSH
32252: LD_INT 1
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: PUSH
32263: LD_INT 1
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 2
32272: NEG
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 2
32283: NEG
32284: PUSH
32285: LD_INT 1
32287: NEG
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 2
32295: PUSH
32296: LD_INT 1
32298: NEG
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 3
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 3
32316: PUSH
32317: LD_INT 1
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32342: LD_ADDR_VAR 0 16
32346: PUSH
32347: LD_INT 0
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 0
32359: PUSH
32360: LD_INT 1
32362: NEG
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 1
32370: PUSH
32371: LD_INT 0
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 1
32380: PUSH
32381: LD_INT 1
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 1
32400: NEG
32401: PUSH
32402: LD_INT 0
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 1
32411: NEG
32412: PUSH
32413: LD_INT 1
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 1
32423: NEG
32424: PUSH
32425: LD_INT 2
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 2
32435: PUSH
32436: LD_INT 1
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 2
32445: PUSH
32446: LD_INT 2
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 1
32455: PUSH
32456: LD_INT 2
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 2
32465: NEG
32466: PUSH
32467: LD_INT 1
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 2
32477: NEG
32478: PUSH
32479: LD_INT 2
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 3
32489: PUSH
32490: LD_INT 2
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 3
32499: PUSH
32500: LD_INT 3
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 2
32509: PUSH
32510: LD_INT 3
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32535: LD_ADDR_VAR 0 17
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 0
32552: PUSH
32553: LD_INT 1
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 1
32563: PUSH
32564: LD_INT 0
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 0
32583: PUSH
32584: LD_INT 1
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: LD_INT 0
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 1
32604: NEG
32605: PUSH
32606: LD_INT 1
32608: NEG
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 1
32616: NEG
32617: PUSH
32618: LD_INT 2
32620: NEG
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 0
32628: PUSH
32629: LD_INT 2
32631: NEG
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 2
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 2
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 2
32670: PUSH
32671: LD_INT 2
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: LD_INT 2
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 0
32690: PUSH
32691: LD_INT 2
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 1
32700: NEG
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 2
32711: NEG
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 2
32722: NEG
32723: PUSH
32724: LD_INT 1
32726: NEG
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 2
32734: NEG
32735: PUSH
32736: LD_INT 2
32738: NEG
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32765: LD_ADDR_VAR 0 18
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: LD_INT 1
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 1
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: LD_INT 1
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 0
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 1
32823: NEG
32824: PUSH
32825: LD_INT 0
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 1
32834: NEG
32835: PUSH
32836: LD_INT 1
32838: NEG
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 1
32846: NEG
32847: PUSH
32848: LD_INT 2
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 0
32858: PUSH
32859: LD_INT 2
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 1
32869: PUSH
32870: LD_INT 1
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 2
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 2
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 2
32900: PUSH
32901: LD_INT 2
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 1
32910: PUSH
32911: LD_INT 2
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 0
32920: PUSH
32921: LD_INT 2
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 1
32930: NEG
32931: PUSH
32932: LD_INT 1
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 2
32941: NEG
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 2
32952: NEG
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 2
32964: NEG
32965: PUSH
32966: LD_INT 2
32968: NEG
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32995: LD_ADDR_VAR 0 19
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: LD_INT 1
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 1
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 0
33043: PUSH
33044: LD_INT 1
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 1
33053: NEG
33054: PUSH
33055: LD_INT 0
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 1
33064: NEG
33065: PUSH
33066: LD_INT 1
33068: NEG
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: NEG
33077: PUSH
33078: LD_INT 2
33080: NEG
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 0
33088: PUSH
33089: LD_INT 2
33091: NEG
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 1
33099: PUSH
33100: LD_INT 1
33102: NEG
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 2
33110: PUSH
33111: LD_INT 0
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 2
33120: PUSH
33121: LD_INT 1
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 2
33130: PUSH
33131: LD_INT 2
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 1
33140: PUSH
33141: LD_INT 2
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 0
33150: PUSH
33151: LD_INT 2
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 1
33160: NEG
33161: PUSH
33162: LD_INT 1
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 2
33171: NEG
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 2
33182: NEG
33183: PUSH
33184: LD_INT 1
33186: NEG
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 2
33194: NEG
33195: PUSH
33196: LD_INT 2
33198: NEG
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33225: LD_ADDR_VAR 0 20
33229: PUSH
33230: LD_INT 0
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: LD_INT 1
33245: NEG
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 1
33253: PUSH
33254: LD_INT 0
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 1
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 0
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 1
33283: NEG
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 1
33294: NEG
33295: PUSH
33296: LD_INT 1
33298: NEG
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 1
33306: NEG
33307: PUSH
33308: LD_INT 2
33310: NEG
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 0
33318: PUSH
33319: LD_INT 2
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 1
33329: PUSH
33330: LD_INT 1
33332: NEG
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 2
33340: PUSH
33341: LD_INT 0
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 2
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: LD_INT 2
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 1
33370: PUSH
33371: LD_INT 2
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 0
33380: PUSH
33381: LD_INT 2
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 1
33390: NEG
33391: PUSH
33392: LD_INT 1
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 2
33401: NEG
33402: PUSH
33403: LD_INT 0
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 2
33412: NEG
33413: PUSH
33414: LD_INT 1
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 2
33424: NEG
33425: PUSH
33426: LD_INT 2
33428: NEG
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33455: LD_ADDR_VAR 0 21
33459: PUSH
33460: LD_INT 0
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 1
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 1
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 0
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 1
33524: NEG
33525: PUSH
33526: LD_INT 1
33528: NEG
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 1
33536: NEG
33537: PUSH
33538: LD_INT 2
33540: NEG
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 0
33548: PUSH
33549: LD_INT 2
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 1
33559: PUSH
33560: LD_INT 1
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 2
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 2
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 2
33590: PUSH
33591: LD_INT 2
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: LD_INT 2
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 0
33610: PUSH
33611: LD_INT 2
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 1
33620: NEG
33621: PUSH
33622: LD_INT 1
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 2
33631: NEG
33632: PUSH
33633: LD_INT 0
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 2
33642: NEG
33643: PUSH
33644: LD_INT 1
33646: NEG
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 2
33654: NEG
33655: PUSH
33656: LD_INT 2
33658: NEG
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33685: LD_ADDR_VAR 0 22
33689: PUSH
33690: LD_INT 0
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 0
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 1
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: PUSH
33724: LD_INT 1
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: LD_INT 1
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 1
33743: NEG
33744: PUSH
33745: LD_INT 0
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: LD_INT 1
33758: NEG
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 1
33766: NEG
33767: PUSH
33768: LD_INT 2
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: LD_INT 2
33781: NEG
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 1
33789: PUSH
33790: LD_INT 1
33792: NEG
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 2
33800: PUSH
33801: LD_INT 0
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 2
33810: PUSH
33811: LD_INT 1
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 2
33820: PUSH
33821: LD_INT 2
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 1
33830: PUSH
33831: LD_INT 2
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 0
33840: PUSH
33841: LD_INT 2
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 1
33850: NEG
33851: PUSH
33852: LD_INT 1
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 2
33861: NEG
33862: PUSH
33863: LD_INT 0
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 2
33872: NEG
33873: PUSH
33874: LD_INT 1
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 2
33884: NEG
33885: PUSH
33886: LD_INT 2
33888: NEG
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33915: LD_ADDR_VAR 0 23
33919: PUSH
33920: LD_INT 0
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: LD_INT 1
33935: NEG
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 1
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 1
33953: PUSH
33954: LD_INT 1
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: LD_INT 1
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 1
33973: NEG
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 1
33984: NEG
33985: PUSH
33986: LD_INT 1
33988: NEG
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 1
33996: NEG
33997: PUSH
33998: LD_INT 2
34000: NEG
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 0
34008: PUSH
34009: LD_INT 2
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 1
34019: PUSH
34020: LD_INT 1
34022: NEG
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 2
34030: PUSH
34031: LD_INT 0
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 2
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 2
34050: PUSH
34051: LD_INT 2
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: LD_INT 2
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 0
34070: PUSH
34071: LD_INT 2
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: LD_INT 1
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 2
34091: NEG
34092: PUSH
34093: LD_INT 0
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 2
34102: NEG
34103: PUSH
34104: LD_INT 1
34106: NEG
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 2
34114: NEG
34115: PUSH
34116: LD_INT 2
34118: NEG
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 2
34126: NEG
34127: PUSH
34128: LD_INT 3
34130: NEG
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 1
34138: NEG
34139: PUSH
34140: LD_INT 3
34142: NEG
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 1
34150: PUSH
34151: LD_INT 2
34153: NEG
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 2
34161: PUSH
34162: LD_INT 1
34164: NEG
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34195: LD_ADDR_VAR 0 24
34199: PUSH
34200: LD_INT 0
34202: PUSH
34203: LD_INT 0
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: LD_INT 1
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 1
34223: PUSH
34224: LD_INT 0
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: LD_INT 1
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 0
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 1
34264: NEG
34265: PUSH
34266: LD_INT 1
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 1
34276: NEG
34277: PUSH
34278: LD_INT 2
34280: NEG
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 0
34288: PUSH
34289: LD_INT 2
34291: NEG
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 2
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 2
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 2
34330: PUSH
34331: LD_INT 2
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: PUSH
34341: LD_INT 2
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 0
34350: PUSH
34351: LD_INT 2
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 1
34360: NEG
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 2
34371: NEG
34372: PUSH
34373: LD_INT 0
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 2
34382: NEG
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 2
34394: NEG
34395: PUSH
34396: LD_INT 2
34398: NEG
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 1
34406: PUSH
34407: LD_INT 2
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 2
34417: PUSH
34418: LD_INT 1
34420: NEG
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 3
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 3
34438: PUSH
34439: LD_INT 2
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34471: LD_ADDR_VAR 0 25
34475: PUSH
34476: LD_INT 0
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: LD_INT 1
34491: NEG
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 1
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: LD_INT 1
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: LD_INT 1
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: LD_INT 1
34544: NEG
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 1
34552: NEG
34553: PUSH
34554: LD_INT 2
34556: NEG
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 0
34564: PUSH
34565: LD_INT 2
34567: NEG
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 2
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 2
34606: PUSH
34607: LD_INT 2
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 1
34616: PUSH
34617: LD_INT 2
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 0
34626: PUSH
34627: LD_INT 2
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 1
34636: NEG
34637: PUSH
34638: LD_INT 1
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 2
34647: NEG
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 2
34658: NEG
34659: PUSH
34660: LD_INT 1
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 2
34670: NEG
34671: PUSH
34672: LD_INT 2
34674: NEG
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 3
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 3
34692: PUSH
34693: LD_INT 2
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 2
34702: PUSH
34703: LD_INT 3
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: LD_INT 3
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34745: LD_ADDR_VAR 0 26
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: LD_INT 0
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: LD_INT 1
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 1
34783: PUSH
34784: LD_INT 1
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 0
34793: PUSH
34794: LD_INT 1
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 1
34814: NEG
34815: PUSH
34816: LD_INT 1
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: NEG
34827: PUSH
34828: LD_INT 2
34830: NEG
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: LD_INT 2
34841: NEG
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 1
34849: PUSH
34850: LD_INT 1
34852: NEG
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 2
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 2
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: LD_INT 2
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 1
34890: PUSH
34891: LD_INT 2
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 0
34900: PUSH
34901: LD_INT 2
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 1
34910: NEG
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 2
34921: NEG
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 2
34932: NEG
34933: PUSH
34934: LD_INT 1
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 2
34944: NEG
34945: PUSH
34946: LD_INT 2
34948: NEG
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 2
34956: PUSH
34957: LD_INT 3
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: PUSH
34967: LD_INT 3
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 1
34976: NEG
34977: PUSH
34978: LD_INT 2
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 2
34987: NEG
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35021: LD_ADDR_VAR 0 27
35025: PUSH
35026: LD_INT 0
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: LD_INT 1
35041: NEG
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: LD_INT 0
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 0
35069: PUSH
35070: LD_INT 1
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 1
35079: NEG
35080: PUSH
35081: LD_INT 0
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 1
35090: NEG
35091: PUSH
35092: LD_INT 1
35094: NEG
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: LD_INT 2
35106: NEG
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 0
35114: PUSH
35115: LD_INT 2
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 1
35125: PUSH
35126: LD_INT 1
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 2
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 2
35146: PUSH
35147: LD_INT 1
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 2
35156: PUSH
35157: LD_INT 2
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: PUSH
35167: LD_INT 2
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: LD_INT 2
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: LD_INT 1
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 2
35197: NEG
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 2
35208: NEG
35209: PUSH
35210: LD_INT 1
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 2
35220: NEG
35221: PUSH
35222: LD_INT 2
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: NEG
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 2
35243: NEG
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 3
35254: NEG
35255: PUSH
35256: LD_INT 1
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 3
35266: NEG
35267: PUSH
35268: LD_INT 2
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35301: LD_ADDR_VAR 0 28
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: LD_INT 1
35321: NEG
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: LD_INT 0
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 0
35349: PUSH
35350: LD_INT 1
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 1
35359: NEG
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 1
35370: NEG
35371: PUSH
35372: LD_INT 1
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 1
35382: NEG
35383: PUSH
35384: LD_INT 2
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 0
35394: PUSH
35395: LD_INT 2
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: LD_INT 1
35408: NEG
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 2
35416: PUSH
35417: LD_INT 0
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 2
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: LD_INT 2
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: PUSH
35447: LD_INT 2
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: LD_INT 2
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 2
35477: NEG
35478: PUSH
35479: LD_INT 0
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 2
35488: NEG
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 2
35500: NEG
35501: PUSH
35502: LD_INT 2
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 2
35512: NEG
35513: PUSH
35514: LD_INT 3
35516: NEG
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 1
35524: NEG
35525: PUSH
35526: LD_INT 3
35528: NEG
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 3
35536: NEG
35537: PUSH
35538: LD_INT 1
35540: NEG
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 3
35548: NEG
35549: PUSH
35550: LD_INT 2
35552: NEG
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35583: LD_ADDR_VAR 0 29
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: LD_INT 0
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 0
35600: PUSH
35601: LD_INT 1
35603: NEG
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 1
35611: PUSH
35612: LD_INT 0
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 1
35621: PUSH
35622: LD_INT 1
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 0
35631: PUSH
35632: LD_INT 1
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 1
35641: NEG
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 1
35652: NEG
35653: PUSH
35654: LD_INT 1
35656: NEG
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 1
35664: NEG
35665: PUSH
35666: LD_INT 2
35668: NEG
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: LD_INT 2
35679: NEG
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 1
35687: PUSH
35688: LD_INT 1
35690: NEG
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 2
35698: PUSH
35699: LD_INT 0
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 2
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 1
35718: PUSH
35719: LD_INT 2
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 0
35728: PUSH
35729: LD_INT 2
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 1
35738: NEG
35739: PUSH
35740: LD_INT 1
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 2
35749: NEG
35750: PUSH
35751: LD_INT 1
35753: NEG
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 2
35761: NEG
35762: PUSH
35763: LD_INT 2
35765: NEG
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 2
35773: NEG
35774: PUSH
35775: LD_INT 3
35777: NEG
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 2
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 3
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 1
35806: PUSH
35807: LD_INT 3
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: LD_INT 2
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 3
35827: NEG
35828: PUSH
35829: LD_INT 2
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35862: LD_ADDR_VAR 0 30
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: LD_INT 0
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: LD_INT 1
35882: NEG
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: NEG
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: LD_INT 2
35947: NEG
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: LD_INT 2
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: LD_INT 1
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 2
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 2
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 2
35997: PUSH
35998: LD_INT 2
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: LD_INT 2
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 1
36017: NEG
36018: PUSH
36019: LD_INT 1
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 2
36028: NEG
36029: PUSH
36030: LD_INT 0
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 2
36039: NEG
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: LD_INT 3
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 1
36063: PUSH
36064: LD_INT 2
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 3
36074: PUSH
36075: LD_INT 2
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 2
36084: PUSH
36085: LD_INT 3
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 2
36094: NEG
36095: PUSH
36096: LD_INT 1
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 3
36105: NEG
36106: PUSH
36107: LD_INT 1
36109: NEG
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36140: LD_ADDR_VAR 0 31
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: LD_INT 0
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: LD_INT 1
36160: NEG
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 1
36168: PUSH
36169: LD_INT 0
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 1
36178: PUSH
36179: LD_INT 1
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: LD_INT 1
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 1
36198: NEG
36199: PUSH
36200: LD_INT 0
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: LD_INT 1
36213: NEG
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 1
36221: NEG
36222: PUSH
36223: LD_INT 2
36225: NEG
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 1
36233: PUSH
36234: LD_INT 1
36236: NEG
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 2
36244: PUSH
36245: LD_INT 0
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 2
36254: PUSH
36255: LD_INT 1
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 2
36264: PUSH
36265: LD_INT 2
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 1
36274: PUSH
36275: LD_INT 2
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: LD_INT 2
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 2
36305: NEG
36306: PUSH
36307: LD_INT 1
36309: NEG
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 2
36317: NEG
36318: PUSH
36319: LD_INT 2
36321: NEG
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 2
36329: NEG
36330: PUSH
36331: LD_INT 3
36333: NEG
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 2
36341: PUSH
36342: LD_INT 1
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 3
36352: PUSH
36353: LD_INT 1
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 1
36362: PUSH
36363: LD_INT 3
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 1
36372: NEG
36373: PUSH
36374: LD_INT 2
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 3
36383: NEG
36384: PUSH
36385: LD_INT 2
36387: NEG
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36418: LD_ADDR_VAR 0 32
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 0
36435: PUSH
36436: LD_INT 1
36438: NEG
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 1
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: LD_INT 1
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 1
36499: NEG
36500: PUSH
36501: LD_INT 2
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: LD_INT 2
36514: NEG
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: LD_INT 1
36525: NEG
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 2
36533: PUSH
36534: LD_INT 1
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 2
36543: PUSH
36544: LD_INT 2
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 2
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 2
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 1
36573: NEG
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 2
36584: NEG
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 2
36595: NEG
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 1
36607: NEG
36608: PUSH
36609: LD_INT 3
36611: NEG
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: LD_INT 2
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 3
36630: PUSH
36631: LD_INT 2
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: PUSH
36641: LD_INT 3
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 2
36650: NEG
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 3
36661: NEG
36662: PUSH
36663: LD_INT 1
36665: NEG
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36696: LD_ADDR_VAR 0 33
36700: PUSH
36701: LD_INT 0
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 0
36713: PUSH
36714: LD_INT 1
36716: NEG
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 1
36724: PUSH
36725: LD_INT 0
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 0
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: NEG
36755: PUSH
36756: LD_INT 0
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: LD_INT 1
36769: NEG
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: LD_INT 2
36781: NEG
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 1
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 2
36800: PUSH
36801: LD_INT 0
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 2
36810: PUSH
36811: LD_INT 1
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: LD_INT 2
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: LD_INT 2
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 2
36851: NEG
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 2
36862: NEG
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 2
36874: NEG
36875: PUSH
36876: LD_INT 2
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 2
36886: NEG
36887: PUSH
36888: LD_INT 3
36890: NEG
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 2
36898: PUSH
36899: LD_INT 1
36901: NEG
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 3
36909: PUSH
36910: LD_INT 1
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 1
36919: PUSH
36920: LD_INT 3
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: LD_INT 2
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 3
36940: NEG
36941: PUSH
36942: LD_INT 2
36944: NEG
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36975: LD_ADDR_VAR 0 34
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 1
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 1
37033: NEG
37034: PUSH
37035: LD_INT 0
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: LD_INT 1
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: LD_INT 2
37060: NEG
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 0
37068: PUSH
37069: LD_INT 2
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 1
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 2
37090: PUSH
37091: LD_INT 1
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 2
37100: PUSH
37101: LD_INT 2
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 1
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 2
37131: NEG
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 2
37142: NEG
37143: PUSH
37144: LD_INT 1
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 2
37154: NEG
37155: PUSH
37156: LD_INT 2
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: LD_INT 3
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: PUSH
37179: LD_INT 2
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 3
37189: PUSH
37190: LD_INT 2
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 2
37199: PUSH
37200: LD_INT 3
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 2
37209: NEG
37210: PUSH
37211: LD_INT 1
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 3
37220: NEG
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37255: LD_ADDR_VAR 0 35
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: LD_INT 0
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: LD_INT 1
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 1
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: LD_INT 1
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 1
37324: NEG
37325: PUSH
37326: LD_INT 1
37328: NEG
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 2
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 2
37346: NEG
37347: PUSH
37348: LD_INT 1
37350: NEG
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37367: LD_ADDR_VAR 0 36
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: LD_INT 1
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 0
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: NEG
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 1
37436: NEG
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 1
37448: NEG
37449: PUSH
37450: LD_INT 2
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 1
37460: PUSH
37461: LD_INT 2
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37479: LD_ADDR_VAR 0 37
37483: PUSH
37484: LD_INT 0
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 0
37496: PUSH
37497: LD_INT 1
37499: NEG
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: LD_INT 0
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: LD_INT 1
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 1
37537: NEG
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: LD_INT 1
37563: NEG
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37591: LD_ADDR_VAR 0 38
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: LD_INT 0
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 0
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: LD_INT 0
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: LD_INT 1
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: LD_INT 1
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 1
37660: NEG
37661: PUSH
37662: LD_INT 1
37664: NEG
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 1
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 2
37682: NEG
37683: PUSH
37684: LD_INT 1
37686: NEG
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37703: LD_ADDR_VAR 0 39
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: LD_INT 0
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 0
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 1
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 1
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 0
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: NEG
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 1
37796: PUSH
37797: LD_INT 2
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37815: LD_ADDR_VAR 0 40
37819: PUSH
37820: LD_INT 0
37822: PUSH
37823: LD_INT 0
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: LD_INT 1
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 1
37853: PUSH
37854: LD_INT 1
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: NEG
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 1
37884: NEG
37885: PUSH
37886: LD_INT 1
37888: NEG
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 1
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 1
37907: NEG
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37927: LD_ADDR_VAR 0 41
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: LD_INT 1
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 0
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: LD_INT 1
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: LD_INT 0
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: PUSH
37998: LD_INT 1
38000: NEG
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 1
38008: NEG
38009: PUSH
38010: LD_INT 2
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: LD_INT 1
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 2
38041: PUSH
38042: LD_INT 1
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: NEG
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 2
38082: NEG
38083: PUSH
38084: LD_INT 0
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 2
38093: NEG
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 2
38105: NEG
38106: PUSH
38107: LD_INT 2
38109: NEG
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 2
38117: NEG
38118: PUSH
38119: LD_INT 3
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 2
38129: PUSH
38130: LD_INT 1
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 3
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 3
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 3
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 3
38170: PUSH
38171: LD_INT 3
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 2
38180: PUSH
38181: LD_INT 3
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 2
38190: NEG
38191: PUSH
38192: LD_INT 1
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 3
38201: NEG
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 3
38212: NEG
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 3
38224: NEG
38225: PUSH
38226: LD_INT 2
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 3
38236: NEG
38237: PUSH
38238: LD_INT 3
38240: NEG
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38277: LD_ADDR_VAR 0 42
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: LD_INT 0
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: LD_INT 1
38297: NEG
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 1
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 0
38325: PUSH
38326: LD_INT 1
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 1
38335: NEG
38336: PUSH
38337: LD_INT 0
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 1
38346: NEG
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 1
38358: NEG
38359: PUSH
38360: LD_INT 2
38362: NEG
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: LD_INT 2
38373: NEG
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: LD_INT 1
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 2
38392: PUSH
38393: LD_INT 1
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 2
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 1
38412: PUSH
38413: LD_INT 2
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: LD_INT 2
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 2
38443: NEG
38444: PUSH
38445: LD_INT 1
38447: NEG
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 2
38455: NEG
38456: PUSH
38457: LD_INT 2
38459: NEG
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 2
38467: NEG
38468: PUSH
38469: LD_INT 3
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: LD_INT 3
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: LD_INT 3
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 2
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 3
38513: PUSH
38514: LD_INT 2
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 3
38523: PUSH
38524: LD_INT 3
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 2
38533: PUSH
38534: LD_INT 3
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 1
38543: PUSH
38544: LD_INT 3
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: LD_INT 3
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 3
38574: NEG
38575: PUSH
38576: LD_INT 2
38578: NEG
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 3
38586: NEG
38587: PUSH
38588: LD_INT 3
38590: NEG
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38627: LD_ADDR_VAR 0 43
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: LD_INT 1
38647: NEG
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 1
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: LD_INT 1
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 1
38685: NEG
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: LD_INT 1
38700: NEG
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 1
38708: NEG
38709: PUSH
38710: LD_INT 2
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 0
38720: PUSH
38721: LD_INT 2
38723: NEG
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 2
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 2
38752: PUSH
38753: LD_INT 1
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 1
38762: PUSH
38763: LD_INT 2
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: LD_INT 2
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 1
38782: NEG
38783: PUSH
38784: LD_INT 1
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 2
38793: NEG
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 2
38804: NEG
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: LD_INT 3
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: LD_INT 3
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: LD_INT 2
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: LD_INT 1
38853: NEG
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 3
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 3
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: PUSH
38882: LD_INT 3
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: LD_INT 3
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: LD_INT 2
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 2
38912: NEG
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 3
38923: NEG
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 3
38934: NEG
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38975: LD_ADDR_VAR 0 44
38979: PUSH
38980: LD_INT 0
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 0
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 1
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 0
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 1
39033: NEG
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 1
39044: NEG
39045: PUSH
39046: LD_INT 1
39048: NEG
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: LD_INT 2
39060: NEG
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 2
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 2
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 2
39099: PUSH
39100: LD_INT 2
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: LD_INT 2
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: NEG
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 2
39130: NEG
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 2
39141: NEG
39142: PUSH
39143: LD_INT 1
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: LD_INT 2
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 2
39165: NEG
39166: PUSH
39167: LD_INT 3
39169: NEG
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 2
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 3
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 3
39198: PUSH
39199: LD_INT 1
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 3
39208: PUSH
39209: LD_INT 2
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 3
39218: PUSH
39219: LD_INT 3
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 2
39228: PUSH
39229: LD_INT 3
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 2
39238: NEG
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 3
39249: NEG
39250: PUSH
39251: LD_INT 0
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 3
39260: NEG
39261: PUSH
39262: LD_INT 1
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 3
39272: NEG
39273: PUSH
39274: LD_INT 2
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 3
39284: NEG
39285: PUSH
39286: LD_INT 3
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39325: LD_ADDR_VAR 0 45
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 1
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: LD_INT 1
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 1
39383: NEG
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 1
39406: NEG
39407: PUSH
39408: LD_INT 2
39410: NEG
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: LD_INT 2
39421: NEG
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: LD_INT 1
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 2
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 2
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: LD_INT 2
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 2
39491: NEG
39492: PUSH
39493: LD_INT 1
39495: NEG
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 2
39503: NEG
39504: PUSH
39505: LD_INT 2
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: NEG
39516: PUSH
39517: LD_INT 3
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: NEG
39528: PUSH
39529: LD_INT 3
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: LD_INT 3
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: LD_INT 2
39553: NEG
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 3
39561: PUSH
39562: LD_INT 2
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 3
39571: PUSH
39572: LD_INT 3
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 2
39581: PUSH
39582: LD_INT 3
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 1
39591: PUSH
39592: LD_INT 3
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 0
39601: PUSH
39602: LD_INT 3
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: LD_INT 2
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 3
39622: NEG
39623: PUSH
39624: LD_INT 2
39626: NEG
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 3
39634: NEG
39635: PUSH
39636: LD_INT 3
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39675: LD_ADDR_VAR 0 46
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: NEG
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: LD_INT 2
39760: NEG
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: LD_INT 2
39771: NEG
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: LD_INT 1
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 2
39800: PUSH
39801: LD_INT 1
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: LD_INT 2
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: LD_INT 2
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: LD_INT 1
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 2
39841: NEG
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 2
39852: NEG
39853: PUSH
39854: LD_INT 1
39856: NEG
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: LD_INT 3
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: LD_INT 3
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: LD_INT 2
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 2
39898: PUSH
39899: LD_INT 1
39901: NEG
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 3
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 3
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: LD_INT 3
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: LD_INT 3
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: LD_INT 2
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 2
39960: NEG
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 3
39971: NEG
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 3
39982: NEG
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40023: LD_ADDR_VAR 0 47
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: LD_INT 1
40043: NEG
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 1
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: LD_INT 1
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: LD_INT 2
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: LD_INT 2
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 2
40138: NEG
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 2
40150: NEG
40151: PUSH
40152: LD_INT 2
40154: NEG
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40174: LD_ADDR_VAR 0 48
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 1
40194: NEG
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: LD_INT 1
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 1
40232: NEG
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: LD_INT 1
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: LD_INT 2
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: LD_INT 2
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 2
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 2
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40321: LD_ADDR_VAR 0 49
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 1
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: LD_INT 0
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: NEG
40391: PUSH
40392: LD_INT 1
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 2
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 2
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: LD_INT 2
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: LD_INT 2
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40465: LD_ADDR_VAR 0 50
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: LD_INT 0
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: LD_INT 1
40538: NEG
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40609: LD_ADDR_VAR 0 51
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: LD_INT 1
40629: NEG
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: LD_INT 1
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 2
40721: NEG
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 2
40732: NEG
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40756: LD_ADDR_VAR 0 52
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 1
40776: NEG
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: LD_INT 1
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 2
40860: NEG
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 2
40871: NEG
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: LD_INT 2
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40907: LD_ADDR_VAR 0 53
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: LD_INT 1
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: LD_INT 0
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: LD_INT 2
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 2
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: LD_INT 2
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 2
41083: NEG
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 2
41094: NEG
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: LD_INT 2
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41137: LD_ADDR_VAR 0 54
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: LD_INT 1
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: LD_INT 2
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: LD_INT 2
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 2
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 2
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: LD_INT 2
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: LD_INT 1
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 2
41313: NEG
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 2
41324: NEG
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 2
41336: NEG
41337: PUSH
41338: LD_INT 2
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41367: LD_ADDR_VAR 0 55
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: LD_INT 1
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: LD_INT 1
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: LD_INT 1
41440: NEG
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: LD_INT 2
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 2
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 2
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: PUSH
41503: LD_INT 2
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 0
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 2
41543: NEG
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 2
41554: NEG
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: NEG
41567: PUSH
41568: LD_INT 2
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41597: LD_ADDR_VAR 0 56
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: LD_INT 1
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: LD_INT 2
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 0
41690: PUSH
41691: LD_INT 2
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: PUSH
41702: LD_INT 1
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 2
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 2
41732: PUSH
41733: LD_INT 2
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 2
41784: NEG
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 2
41796: NEG
41797: PUSH
41798: LD_INT 2
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41827: LD_ADDR_VAR 0 57
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: LD_INT 2
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: LD_INT 2
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 2
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 2
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 2
41962: PUSH
41963: LD_INT 2
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 1
41972: PUSH
41973: LD_INT 2
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: LD_INT 2
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 1
41992: NEG
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 2
42003: NEG
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 2
42014: NEG
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 2
42026: NEG
42027: PUSH
42028: LD_INT 2
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42057: LD_ADDR_VAR 0 58
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: LD_INT 2
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 0
42150: PUSH
42151: LD_INT 2
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: LD_INT 1
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 2
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 2
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 2
42192: PUSH
42193: LD_INT 2
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: PUSH
42203: LD_INT 2
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: LD_INT 2
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 1
42222: NEG
42223: PUSH
42224: LD_INT 1
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 2
42233: NEG
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 2
42256: NEG
42257: PUSH
42258: LD_INT 2
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42287: LD_ADDR_VAR 0 59
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42375: LD_ADDR_VAR 0 60
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42463: LD_ADDR_VAR 0 61
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42551: LD_ADDR_VAR 0 62
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: LD_INT 1
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: NEG
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42639: LD_ADDR_VAR 0 63
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42727: LD_ADDR_VAR 0 64
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: NEG
42797: PUSH
42798: LD_INT 1
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: ST_TO_ADDR
// end ; 1 :
42815: GO 48712
42817: LD_INT 1
42819: DOUBLE
42820: EQUAL
42821: IFTRUE 42825
42823: GO 45448
42825: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42826: LD_ADDR_VAR 0 11
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: LD_INT 3
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 3
42848: NEG
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: LD_INT 2
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: LIST
42869: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42870: LD_ADDR_VAR 0 12
42874: PUSH
42875: LD_INT 2
42877: PUSH
42878: LD_INT 1
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 3
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 3
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: LIST
42910: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42911: LD_ADDR_VAR 0 13
42915: PUSH
42916: LD_INT 3
42918: PUSH
42919: LD_INT 2
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 3
42928: PUSH
42929: LD_INT 3
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 2
42938: PUSH
42939: LD_INT 3
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42951: LD_ADDR_VAR 0 14
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: LD_INT 3
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 3
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: LD_INT 2
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: LIST
42991: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42992: LD_ADDR_VAR 0 15
42996: PUSH
42997: LD_INT 2
42999: NEG
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 3
43010: NEG
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 3
43021: NEG
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: LIST
43035: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43036: LD_ADDR_VAR 0 16
43040: PUSH
43041: LD_INT 2
43043: NEG
43044: PUSH
43045: LD_INT 3
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 3
43055: NEG
43056: PUSH
43057: LD_INT 2
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 3
43067: NEG
43068: PUSH
43069: LD_INT 3
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: LIST
43081: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43082: LD_ADDR_VAR 0 17
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: LD_INT 3
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: LD_INT 3
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: LD_INT 2
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: LIST
43125: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43126: LD_ADDR_VAR 0 18
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 3
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 3
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: LIST
43166: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43167: LD_ADDR_VAR 0 19
43171: PUSH
43172: LD_INT 3
43174: PUSH
43175: LD_INT 2
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 3
43184: PUSH
43185: LD_INT 3
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 2
43194: PUSH
43195: LD_INT 3
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: LIST
43206: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43207: LD_ADDR_VAR 0 20
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: LD_INT 3
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 3
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: LD_INT 2
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: LIST
43247: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43248: LD_ADDR_VAR 0 21
43252: PUSH
43253: LD_INT 2
43255: NEG
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 3
43266: NEG
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 3
43277: NEG
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: LIST
43291: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43292: LD_ADDR_VAR 0 22
43296: PUSH
43297: LD_INT 2
43299: NEG
43300: PUSH
43301: LD_INT 3
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 3
43311: NEG
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 3
43323: NEG
43324: PUSH
43325: LD_INT 3
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: LIST
43337: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43338: LD_ADDR_VAR 0 23
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: LD_INT 3
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: LD_INT 4
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: LD_INT 3
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: LIST
43381: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43382: LD_ADDR_VAR 0 24
43386: PUSH
43387: LD_INT 3
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 3
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 4
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: LIST
43422: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43423: LD_ADDR_VAR 0 25
43427: PUSH
43428: LD_INT 3
43430: PUSH
43431: LD_INT 3
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 4
43440: PUSH
43441: LD_INT 3
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 3
43450: PUSH
43451: LD_INT 4
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: LIST
43462: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43463: LD_ADDR_VAR 0 26
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 3
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: LD_INT 4
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: LD_INT 3
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: LIST
43503: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43504: LD_ADDR_VAR 0 27
43508: PUSH
43509: LD_INT 3
43511: NEG
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 3
43522: NEG
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 4
43533: NEG
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: LIST
43547: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43548: LD_ADDR_VAR 0 28
43552: PUSH
43553: LD_INT 3
43555: NEG
43556: PUSH
43557: LD_INT 3
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 3
43567: NEG
43568: PUSH
43569: LD_INT 4
43571: NEG
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 4
43579: NEG
43580: PUSH
43581: LD_INT 3
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: LIST
43593: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43594: LD_ADDR_VAR 0 29
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: LD_INT 3
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: LD_INT 3
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 4
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: LD_INT 4
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: LD_INT 3
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: LD_INT 5
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: LD_INT 5
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: PUSH
43693: LD_INT 4
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: LD_INT 6
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: LD_INT 6
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 5
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43749: LD_ADDR_VAR 0 30
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 3
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 3
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 3
43787: PUSH
43788: LD_INT 1
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 4
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 4
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 4
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 5
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 5
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 5
43849: PUSH
43850: LD_INT 1
43852: NEG
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 6
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 6
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43892: LD_ADDR_VAR 0 31
43896: PUSH
43897: LD_INT 3
43899: PUSH
43900: LD_INT 2
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 3
43909: PUSH
43910: LD_INT 3
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 2
43919: PUSH
43920: LD_INT 3
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 4
43929: PUSH
43930: LD_INT 3
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 4
43939: PUSH
43940: LD_INT 4
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 3
43949: PUSH
43950: LD_INT 4
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 5
43959: PUSH
43960: LD_INT 4
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 5
43969: PUSH
43970: LD_INT 5
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 4
43979: PUSH
43980: LD_INT 5
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 6
43989: PUSH
43990: LD_INT 5
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 6
43999: PUSH
44000: LD_INT 6
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 5
44009: PUSH
44010: LD_INT 6
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44031: LD_ADDR_VAR 0 32
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: LD_INT 3
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 3
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 4
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 4
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: LD_INT 3
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: LD_INT 5
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: LD_INT 5
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: LD_INT 4
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 6
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: LD_INT 6
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: LD_INT 5
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44174: LD_ADDR_VAR 0 33
44178: PUSH
44179: LD_INT 2
44181: NEG
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 3
44192: NEG
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 3
44203: NEG
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 3
44215: NEG
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 4
44226: NEG
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 4
44237: NEG
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 4
44249: NEG
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 5
44260: NEG
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 5
44271: NEG
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 5
44283: NEG
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 6
44294: NEG
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 6
44305: NEG
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44329: LD_ADDR_VAR 0 34
44333: PUSH
44334: LD_INT 2
44336: NEG
44337: PUSH
44338: LD_INT 3
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 3
44348: NEG
44349: PUSH
44350: LD_INT 2
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 3
44360: NEG
44361: PUSH
44362: LD_INT 3
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 3
44372: NEG
44373: PUSH
44374: LD_INT 4
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 4
44384: NEG
44385: PUSH
44386: LD_INT 3
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 4
44396: NEG
44397: PUSH
44398: LD_INT 4
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 4
44408: NEG
44409: PUSH
44410: LD_INT 5
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 5
44420: NEG
44421: PUSH
44422: LD_INT 4
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 5
44432: NEG
44433: PUSH
44434: LD_INT 5
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 5
44444: NEG
44445: PUSH
44446: LD_INT 6
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 6
44456: NEG
44457: PUSH
44458: LD_INT 5
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 6
44468: NEG
44469: PUSH
44470: LD_INT 6
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44492: LD_ADDR_VAR 0 41
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: LD_INT 2
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: LD_INT 3
44514: NEG
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: LIST
44535: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44536: LD_ADDR_VAR 0 42
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 3
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: LIST
44576: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44577: LD_ADDR_VAR 0 43
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: LD_INT 2
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 3
44594: PUSH
44595: LD_INT 2
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: LD_INT 3
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: LIST
44616: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44617: LD_ADDR_VAR 0 44
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: LD_INT 2
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: LD_INT 3
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: NEG
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44658: LD_ADDR_VAR 0 45
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 2
44676: NEG
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 3
44687: NEG
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: LIST
44701: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44702: LD_ADDR_VAR 0 46
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: NEG
44722: PUSH
44723: LD_INT 3
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 3
44733: NEG
44734: PUSH
44735: LD_INT 2
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: LIST
44747: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44748: LD_ADDR_VAR 0 47
44752: PUSH
44753: LD_INT 2
44755: NEG
44756: PUSH
44757: LD_INT 3
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: LD_INT 3
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44781: LD_ADDR_VAR 0 48
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 2
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44812: LD_ADDR_VAR 0 49
44816: PUSH
44817: LD_INT 3
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 3
44829: PUSH
44830: LD_INT 2
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44841: LD_ADDR_VAR 0 50
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: LD_INT 3
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: LD_INT 3
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44870: LD_ADDR_VAR 0 51
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 2
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 2
44888: NEG
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44901: LD_ADDR_VAR 0 52
44905: PUSH
44906: LD_INT 3
44908: NEG
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 3
44920: NEG
44921: PUSH
44922: LD_INT 2
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44934: LD_ADDR_VAR 0 53
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: LD_INT 3
44945: NEG
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 3
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: LD_INT 2
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: LIST
44977: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44978: LD_ADDR_VAR 0 54
44982: PUSH
44983: LD_INT 2
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 3
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 3
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: LIST
45018: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45019: LD_ADDR_VAR 0 55
45023: PUSH
45024: LD_INT 3
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 3
45036: PUSH
45037: LD_INT 3
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: LD_INT 3
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: LIST
45058: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45059: LD_ADDR_VAR 0 56
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: LD_INT 3
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 3
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: LIST
45099: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45100: LD_ADDR_VAR 0 57
45104: PUSH
45105: LD_INT 2
45107: NEG
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 3
45118: NEG
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 3
45129: NEG
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: LIST
45143: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45144: LD_ADDR_VAR 0 58
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: LD_INT 3
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 3
45163: NEG
45164: PUSH
45165: LD_INT 2
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 3
45175: NEG
45176: PUSH
45177: LD_INT 3
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: LIST
45189: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45190: LD_ADDR_VAR 0 59
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: LD_INT 2
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: LIST
45233: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45234: LD_ADDR_VAR 0 60
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: LIST
45274: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45275: LD_ADDR_VAR 0 61
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: LD_INT 2
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: LIST
45314: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45315: LD_ADDR_VAR 0 62
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: LD_INT 2
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 2
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: LIST
45355: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45356: LD_ADDR_VAR 0 63
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: NEG
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: LIST
45399: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45400: LD_ADDR_VAR 0 64
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: LD_INT 2
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 2
45419: NEG
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: LIST
45445: ST_TO_ADDR
// end ; 2 :
45446: GO 48712
45448: LD_INT 2
45450: DOUBLE
45451: EQUAL
45452: IFTRUE 45456
45454: GO 48711
45456: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45457: LD_ADDR_VAR 0 29
45461: PUSH
45462: LD_INT 4
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 4
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 5
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 5
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 4
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 3
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 3
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 3
45536: PUSH
45537: LD_INT 2
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 5
45547: PUSH
45548: LD_INT 2
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 3
45557: PUSH
45558: LD_INT 3
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 3
45567: PUSH
45568: LD_INT 2
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 4
45577: PUSH
45578: LD_INT 3
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 4
45587: PUSH
45588: LD_INT 4
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 3
45597: PUSH
45598: LD_INT 4
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 2
45607: PUSH
45608: LD_INT 3
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: LD_INT 2
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 4
45627: PUSH
45628: LD_INT 2
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: LD_INT 4
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: LD_INT 4
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: LD_INT 3
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: LD_INT 4
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: LD_INT 5
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: LD_INT 5
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 4
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: LD_INT 3
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: LD_INT 5
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: LD_INT 3
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 3
45740: NEG
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 3
45751: NEG
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 2
45763: NEG
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 2
45774: NEG
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 3
45785: NEG
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 4
45796: NEG
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 4
45807: NEG
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 4
45819: NEG
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 4
45842: NEG
45843: PUSH
45844: LD_INT 4
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 4
45854: NEG
45855: PUSH
45856: LD_INT 5
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 3
45866: NEG
45867: PUSH
45868: LD_INT 4
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 3
45878: NEG
45879: PUSH
45880: LD_INT 3
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 4
45890: NEG
45891: PUSH
45892: LD_INT 3
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 5
45902: NEG
45903: PUSH
45904: LD_INT 4
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 5
45914: NEG
45915: PUSH
45916: LD_INT 5
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 3
45926: NEG
45927: PUSH
45928: LD_INT 5
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 5
45938: NEG
45939: PUSH
45940: LD_INT 3
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45995: LD_ADDR_VAR 0 30
45999: PUSH
46000: LD_INT 4
46002: PUSH
46003: LD_INT 4
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 4
46012: PUSH
46013: LD_INT 3
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 5
46022: PUSH
46023: LD_INT 4
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 5
46032: PUSH
46033: LD_INT 5
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 4
46042: PUSH
46043: LD_INT 5
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 3
46052: PUSH
46053: LD_INT 4
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 3
46062: PUSH
46063: LD_INT 3
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 5
46072: PUSH
46073: LD_INT 3
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 3
46082: PUSH
46083: LD_INT 5
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 3
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 2
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: LD_INT 3
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 4
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: LD_INT 4
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: LD_INT 3
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: LD_INT 4
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: NEG
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 4
46185: NEG
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 4
46196: NEG
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 3
46208: NEG
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 3
46219: NEG
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 4
46230: NEG
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 5
46241: NEG
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 5
46252: NEG
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 5
46264: NEG
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 3
46276: NEG
46277: PUSH
46278: LD_INT 2
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 3
46287: NEG
46288: PUSH
46289: LD_INT 3
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 3
46299: NEG
46300: PUSH
46301: LD_INT 4
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 2
46311: NEG
46312: PUSH
46313: LD_INT 3
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 2
46323: NEG
46324: PUSH
46325: LD_INT 2
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 3
46335: NEG
46336: PUSH
46337: LD_INT 2
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 4
46347: NEG
46348: PUSH
46349: LD_INT 3
46351: NEG
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 4
46359: NEG
46360: PUSH
46361: LD_INT 4
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: LD_INT 4
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 4
46383: NEG
46384: PUSH
46385: LD_INT 2
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 4
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 5
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: LD_INT 4
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 3
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: LD_INT 3
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: LD_INT 4
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: LD_INT 5
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: LD_INT 3
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 2
46485: NEG
46486: PUSH
46487: LD_INT 5
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46542: LD_ADDR_VAR 0 31
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: LD_INT 4
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: LD_INT 3
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 4
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: LD_INT 5
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 5
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 4
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 3
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 2
46621: PUSH
46622: LD_INT 5
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: LD_INT 3
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 3
46642: NEG
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 3
46653: NEG
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 3
46687: NEG
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 4
46698: NEG
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 4
46709: NEG
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 4
46721: NEG
46722: PUSH
46723: LD_INT 2
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: LD_INT 2
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 4
46744: NEG
46745: PUSH
46746: LD_INT 4
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 4
46756: NEG
46757: PUSH
46758: LD_INT 5
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 3
46768: NEG
46769: PUSH
46770: LD_INT 4
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 3
46780: NEG
46781: PUSH
46782: LD_INT 3
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 4
46792: NEG
46793: PUSH
46794: LD_INT 3
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 5
46804: NEG
46805: PUSH
46806: LD_INT 4
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 5
46816: NEG
46817: PUSH
46818: LD_INT 5
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 3
46828: NEG
46829: PUSH
46830: LD_INT 5
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 5
46840: NEG
46841: PUSH
46842: LD_INT 3
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 3
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 4
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 3
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: NEG
46908: PUSH
46909: LD_INT 3
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: LD_INT 4
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: LD_INT 4
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 4
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 4
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 5
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 5
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 4
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 3
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 3
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 3
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 5
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47092: LD_ADDR_VAR 0 32
47096: PUSH
47097: LD_INT 4
47099: NEG
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 4
47110: NEG
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 3
47122: NEG
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 3
47133: NEG
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 4
47144: NEG
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 5
47155: NEG
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 5
47166: NEG
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 5
47178: NEG
47179: PUSH
47180: LD_INT 2
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 3
47190: NEG
47191: PUSH
47192: LD_INT 2
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 3
47201: NEG
47202: PUSH
47203: LD_INT 3
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 3
47213: NEG
47214: PUSH
47215: LD_INT 4
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: LD_INT 3
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: LD_INT 2
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 3
47249: NEG
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 4
47261: NEG
47262: PUSH
47263: LD_INT 3
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 4
47273: NEG
47274: PUSH
47275: LD_INT 4
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 2
47285: NEG
47286: PUSH
47287: LD_INT 4
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 4
47297: NEG
47298: PUSH
47299: LD_INT 2
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 4
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 5
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: LD_INT 4
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: LD_INT 3
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: LD_INT 3
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: LD_INT 4
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: LD_INT 5
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: LD_INT 3
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: LD_INT 5
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 3
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 3
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 4
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 4
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 3
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 4
47494: PUSH
47495: LD_INT 2
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 4
47504: PUSH
47505: LD_INT 4
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 4
47514: PUSH
47515: LD_INT 3
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 5
47524: PUSH
47525: LD_INT 4
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 5
47534: PUSH
47535: LD_INT 5
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 4
47544: PUSH
47545: LD_INT 5
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 3
47554: PUSH
47555: LD_INT 4
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 3
47564: PUSH
47565: LD_INT 3
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 5
47574: PUSH
47575: LD_INT 3
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 3
47584: PUSH
47585: LD_INT 5
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47639: LD_ADDR_VAR 0 33
47643: PUSH
47644: LD_INT 4
47646: NEG
47647: PUSH
47648: LD_INT 4
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 4
47658: NEG
47659: PUSH
47660: LD_INT 5
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 3
47670: NEG
47671: PUSH
47672: LD_INT 4
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 3
47682: NEG
47683: PUSH
47684: LD_INT 3
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 4
47694: NEG
47695: PUSH
47696: LD_INT 3
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 5
47706: NEG
47707: PUSH
47708: LD_INT 4
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 5
47718: NEG
47719: PUSH
47720: LD_INT 5
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 3
47730: NEG
47731: PUSH
47732: LD_INT 5
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 5
47742: NEG
47743: PUSH
47744: LD_INT 3
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: LD_INT 3
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: LD_INT 4
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: LD_INT 3
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: LD_INT 2
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: LD_INT 2
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: LD_INT 3
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: LD_INT 4
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: NEG
47845: PUSH
47846: LD_INT 4
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 4
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 4
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 5
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 5
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 4
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 3
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 3
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 3
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 5
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 3
47949: PUSH
47950: LD_INT 3
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 3
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 4
47969: PUSH
47970: LD_INT 3
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 4
47979: PUSH
47980: LD_INT 4
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 3
47989: PUSH
47990: LD_INT 4
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: LD_INT 3
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 2
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 4
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: LD_INT 4
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: LD_INT 4
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: LD_INT 3
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: LD_INT 4
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: LD_INT 5
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 5
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: LD_INT 4
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: LD_INT 3
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: LD_INT 5
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: NEG
48122: PUSH
48123: LD_INT 3
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48177: LD_ADDR_VAR 0 34
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: LD_INT 4
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: LD_INT 5
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: LD_INT 4
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 3
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 3
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: LD_INT 4
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: LD_INT 5
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: LD_INT 3
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: LD_INT 5
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 3
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 3
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 4
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 4
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 3
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 2
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 4
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 4
48379: PUSH
48380: LD_INT 4
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 4
48389: PUSH
48390: LD_INT 3
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 5
48399: PUSH
48400: LD_INT 4
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 5
48409: PUSH
48410: LD_INT 5
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 4
48419: PUSH
48420: LD_INT 5
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 3
48429: PUSH
48430: LD_INT 4
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 3
48439: PUSH
48440: LD_INT 3
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 5
48449: PUSH
48450: LD_INT 3
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 3
48459: PUSH
48460: LD_INT 5
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 3
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: LD_INT 3
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: LD_INT 4
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 4
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 3
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: NEG
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: LD_INT 4
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 2
48551: NEG
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 4
48562: NEG
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 4
48573: NEG
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 3
48585: NEG
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 3
48596: NEG
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 4
48607: NEG
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 5
48618: NEG
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 5
48629: NEG
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 5
48641: NEG
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 3
48653: NEG
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: ST_TO_ADDR
// end ; end ;
48709: GO 48712
48711: POP
// case btype of b_depot , b_warehouse :
48712: LD_VAR 0 1
48716: PUSH
48717: LD_INT 0
48719: DOUBLE
48720: EQUAL
48721: IFTRUE 48731
48723: LD_INT 1
48725: DOUBLE
48726: EQUAL
48727: IFTRUE 48731
48729: GO 48932
48731: POP
// case nation of nation_american :
48732: LD_VAR 0 5
48736: PUSH
48737: LD_INT 1
48739: DOUBLE
48740: EQUAL
48741: IFTRUE 48745
48743: GO 48801
48745: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48746: LD_ADDR_VAR 0 9
48750: PUSH
48751: LD_VAR 0 11
48755: PUSH
48756: LD_VAR 0 12
48760: PUSH
48761: LD_VAR 0 13
48765: PUSH
48766: LD_VAR 0 14
48770: PUSH
48771: LD_VAR 0 15
48775: PUSH
48776: LD_VAR 0 16
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: PUSH
48789: LD_VAR 0 4
48793: PUSH
48794: LD_INT 1
48796: PLUS
48797: ARRAY
48798: ST_TO_ADDR
48799: GO 48930
48801: LD_INT 2
48803: DOUBLE
48804: EQUAL
48805: IFTRUE 48809
48807: GO 48865
48809: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48810: LD_ADDR_VAR 0 9
48814: PUSH
48815: LD_VAR 0 17
48819: PUSH
48820: LD_VAR 0 18
48824: PUSH
48825: LD_VAR 0 19
48829: PUSH
48830: LD_VAR 0 20
48834: PUSH
48835: LD_VAR 0 21
48839: PUSH
48840: LD_VAR 0 22
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: PUSH
48853: LD_VAR 0 4
48857: PUSH
48858: LD_INT 1
48860: PLUS
48861: ARRAY
48862: ST_TO_ADDR
48863: GO 48930
48865: LD_INT 3
48867: DOUBLE
48868: EQUAL
48869: IFTRUE 48873
48871: GO 48929
48873: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48874: LD_ADDR_VAR 0 9
48878: PUSH
48879: LD_VAR 0 23
48883: PUSH
48884: LD_VAR 0 24
48888: PUSH
48889: LD_VAR 0 25
48893: PUSH
48894: LD_VAR 0 26
48898: PUSH
48899: LD_VAR 0 27
48903: PUSH
48904: LD_VAR 0 28
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: PUSH
48917: LD_VAR 0 4
48921: PUSH
48922: LD_INT 1
48924: PLUS
48925: ARRAY
48926: ST_TO_ADDR
48927: GO 48930
48929: POP
48930: GO 49485
48932: LD_INT 2
48934: DOUBLE
48935: EQUAL
48936: IFTRUE 48946
48938: LD_INT 3
48940: DOUBLE
48941: EQUAL
48942: IFTRUE 48946
48944: GO 49002
48946: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48947: LD_ADDR_VAR 0 9
48951: PUSH
48952: LD_VAR 0 29
48956: PUSH
48957: LD_VAR 0 30
48961: PUSH
48962: LD_VAR 0 31
48966: PUSH
48967: LD_VAR 0 32
48971: PUSH
48972: LD_VAR 0 33
48976: PUSH
48977: LD_VAR 0 34
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: PUSH
48990: LD_VAR 0 4
48994: PUSH
48995: LD_INT 1
48997: PLUS
48998: ARRAY
48999: ST_TO_ADDR
49000: GO 49485
49002: LD_INT 16
49004: DOUBLE
49005: EQUAL
49006: IFTRUE 49064
49008: LD_INT 17
49010: DOUBLE
49011: EQUAL
49012: IFTRUE 49064
49014: LD_INT 18
49016: DOUBLE
49017: EQUAL
49018: IFTRUE 49064
49020: LD_INT 19
49022: DOUBLE
49023: EQUAL
49024: IFTRUE 49064
49026: LD_INT 22
49028: DOUBLE
49029: EQUAL
49030: IFTRUE 49064
49032: LD_INT 20
49034: DOUBLE
49035: EQUAL
49036: IFTRUE 49064
49038: LD_INT 21
49040: DOUBLE
49041: EQUAL
49042: IFTRUE 49064
49044: LD_INT 23
49046: DOUBLE
49047: EQUAL
49048: IFTRUE 49064
49050: LD_INT 24
49052: DOUBLE
49053: EQUAL
49054: IFTRUE 49064
49056: LD_INT 25
49058: DOUBLE
49059: EQUAL
49060: IFTRUE 49064
49062: GO 49120
49064: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49065: LD_ADDR_VAR 0 9
49069: PUSH
49070: LD_VAR 0 35
49074: PUSH
49075: LD_VAR 0 36
49079: PUSH
49080: LD_VAR 0 37
49084: PUSH
49085: LD_VAR 0 38
49089: PUSH
49090: LD_VAR 0 39
49094: PUSH
49095: LD_VAR 0 40
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: PUSH
49108: LD_VAR 0 4
49112: PUSH
49113: LD_INT 1
49115: PLUS
49116: ARRAY
49117: ST_TO_ADDR
49118: GO 49485
49120: LD_INT 6
49122: DOUBLE
49123: EQUAL
49124: IFTRUE 49176
49126: LD_INT 7
49128: DOUBLE
49129: EQUAL
49130: IFTRUE 49176
49132: LD_INT 8
49134: DOUBLE
49135: EQUAL
49136: IFTRUE 49176
49138: LD_INT 13
49140: DOUBLE
49141: EQUAL
49142: IFTRUE 49176
49144: LD_INT 12
49146: DOUBLE
49147: EQUAL
49148: IFTRUE 49176
49150: LD_INT 15
49152: DOUBLE
49153: EQUAL
49154: IFTRUE 49176
49156: LD_INT 11
49158: DOUBLE
49159: EQUAL
49160: IFTRUE 49176
49162: LD_INT 14
49164: DOUBLE
49165: EQUAL
49166: IFTRUE 49176
49168: LD_INT 10
49170: DOUBLE
49171: EQUAL
49172: IFTRUE 49176
49174: GO 49232
49176: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49177: LD_ADDR_VAR 0 9
49181: PUSH
49182: LD_VAR 0 41
49186: PUSH
49187: LD_VAR 0 42
49191: PUSH
49192: LD_VAR 0 43
49196: PUSH
49197: LD_VAR 0 44
49201: PUSH
49202: LD_VAR 0 45
49206: PUSH
49207: LD_VAR 0 46
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: PUSH
49220: LD_VAR 0 4
49224: PUSH
49225: LD_INT 1
49227: PLUS
49228: ARRAY
49229: ST_TO_ADDR
49230: GO 49485
49232: LD_INT 36
49234: DOUBLE
49235: EQUAL
49236: IFTRUE 49240
49238: GO 49296
49240: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49241: LD_ADDR_VAR 0 9
49245: PUSH
49246: LD_VAR 0 47
49250: PUSH
49251: LD_VAR 0 48
49255: PUSH
49256: LD_VAR 0 49
49260: PUSH
49261: LD_VAR 0 50
49265: PUSH
49266: LD_VAR 0 51
49270: PUSH
49271: LD_VAR 0 52
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: PUSH
49284: LD_VAR 0 4
49288: PUSH
49289: LD_INT 1
49291: PLUS
49292: ARRAY
49293: ST_TO_ADDR
49294: GO 49485
49296: LD_INT 4
49298: DOUBLE
49299: EQUAL
49300: IFTRUE 49322
49302: LD_INT 5
49304: DOUBLE
49305: EQUAL
49306: IFTRUE 49322
49308: LD_INT 34
49310: DOUBLE
49311: EQUAL
49312: IFTRUE 49322
49314: LD_INT 37
49316: DOUBLE
49317: EQUAL
49318: IFTRUE 49322
49320: GO 49378
49322: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49323: LD_ADDR_VAR 0 9
49327: PUSH
49328: LD_VAR 0 53
49332: PUSH
49333: LD_VAR 0 54
49337: PUSH
49338: LD_VAR 0 55
49342: PUSH
49343: LD_VAR 0 56
49347: PUSH
49348: LD_VAR 0 57
49352: PUSH
49353: LD_VAR 0 58
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: PUSH
49366: LD_VAR 0 4
49370: PUSH
49371: LD_INT 1
49373: PLUS
49374: ARRAY
49375: ST_TO_ADDR
49376: GO 49485
49378: LD_INT 31
49380: DOUBLE
49381: EQUAL
49382: IFTRUE 49428
49384: LD_INT 32
49386: DOUBLE
49387: EQUAL
49388: IFTRUE 49428
49390: LD_INT 33
49392: DOUBLE
49393: EQUAL
49394: IFTRUE 49428
49396: LD_INT 27
49398: DOUBLE
49399: EQUAL
49400: IFTRUE 49428
49402: LD_INT 26
49404: DOUBLE
49405: EQUAL
49406: IFTRUE 49428
49408: LD_INT 28
49410: DOUBLE
49411: EQUAL
49412: IFTRUE 49428
49414: LD_INT 29
49416: DOUBLE
49417: EQUAL
49418: IFTRUE 49428
49420: LD_INT 30
49422: DOUBLE
49423: EQUAL
49424: IFTRUE 49428
49426: GO 49484
49428: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49429: LD_ADDR_VAR 0 9
49433: PUSH
49434: LD_VAR 0 59
49438: PUSH
49439: LD_VAR 0 60
49443: PUSH
49444: LD_VAR 0 61
49448: PUSH
49449: LD_VAR 0 62
49453: PUSH
49454: LD_VAR 0 63
49458: PUSH
49459: LD_VAR 0 64
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: PUSH
49472: LD_VAR 0 4
49476: PUSH
49477: LD_INT 1
49479: PLUS
49480: ARRAY
49481: ST_TO_ADDR
49482: GO 49485
49484: POP
// temp_list2 = [ ] ;
49485: LD_ADDR_VAR 0 10
49489: PUSH
49490: EMPTY
49491: ST_TO_ADDR
// for i in temp_list do
49492: LD_ADDR_VAR 0 8
49496: PUSH
49497: LD_VAR 0 9
49501: PUSH
49502: FOR_IN
49503: IFFALSE 49555
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49505: LD_ADDR_VAR 0 10
49509: PUSH
49510: LD_VAR 0 10
49514: PUSH
49515: LD_VAR 0 8
49519: PUSH
49520: LD_INT 1
49522: ARRAY
49523: PUSH
49524: LD_VAR 0 2
49528: PLUS
49529: PUSH
49530: LD_VAR 0 8
49534: PUSH
49535: LD_INT 2
49537: ARRAY
49538: PUSH
49539: LD_VAR 0 3
49543: PLUS
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: EMPTY
49550: LIST
49551: ADD
49552: ST_TO_ADDR
49553: GO 49502
49555: POP
49556: POP
// result = temp_list2 ;
49557: LD_ADDR_VAR 0 7
49561: PUSH
49562: LD_VAR 0 10
49566: ST_TO_ADDR
// end ;
49567: LD_VAR 0 7
49571: RET
// export function EnemyInRange ( unit , dist ) ; begin
49572: LD_INT 0
49574: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49575: LD_ADDR_VAR 0 3
49579: PUSH
49580: LD_VAR 0 1
49584: PPUSH
49585: CALL_OW 255
49589: PPUSH
49590: LD_VAR 0 1
49594: PPUSH
49595: CALL_OW 250
49599: PPUSH
49600: LD_VAR 0 1
49604: PPUSH
49605: CALL_OW 251
49609: PPUSH
49610: LD_VAR 0 2
49614: PPUSH
49615: CALL 22945 0 4
49619: PUSH
49620: LD_INT 4
49622: ARRAY
49623: ST_TO_ADDR
// end ;
49624: LD_VAR 0 3
49628: RET
// export function PlayerSeeMe ( unit ) ; begin
49629: LD_INT 0
49631: PPUSH
// result := See ( your_side , unit ) ;
49632: LD_ADDR_VAR 0 2
49636: PUSH
49637: LD_OWVAR 2
49641: PPUSH
49642: LD_VAR 0 1
49646: PPUSH
49647: CALL_OW 292
49651: ST_TO_ADDR
// end ;
49652: LD_VAR 0 2
49656: RET
// export function ReverseDir ( unit ) ; begin
49657: LD_INT 0
49659: PPUSH
// if not unit then
49660: LD_VAR 0 1
49664: NOT
49665: IFFALSE 49669
// exit ;
49667: GO 49692
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49669: LD_ADDR_VAR 0 2
49673: PUSH
49674: LD_VAR 0 1
49678: PPUSH
49679: CALL_OW 254
49683: PUSH
49684: LD_INT 3
49686: PLUS
49687: PUSH
49688: LD_INT 6
49690: MOD
49691: ST_TO_ADDR
// end ;
49692: LD_VAR 0 2
49696: RET
// export function ReverseArray ( array ) ; var i ; begin
49697: LD_INT 0
49699: PPUSH
49700: PPUSH
// if not array then
49701: LD_VAR 0 1
49705: NOT
49706: IFFALSE 49710
// exit ;
49708: GO 49765
// result := [ ] ;
49710: LD_ADDR_VAR 0 2
49714: PUSH
49715: EMPTY
49716: ST_TO_ADDR
// for i := array downto 1 do
49717: LD_ADDR_VAR 0 3
49721: PUSH
49722: DOUBLE
49723: LD_VAR 0 1
49727: INC
49728: ST_TO_ADDR
49729: LD_INT 1
49731: PUSH
49732: FOR_DOWNTO
49733: IFFALSE 49763
// result := Join ( result , array [ i ] ) ;
49735: LD_ADDR_VAR 0 2
49739: PUSH
49740: LD_VAR 0 2
49744: PPUSH
49745: LD_VAR 0 1
49749: PUSH
49750: LD_VAR 0 3
49754: ARRAY
49755: PPUSH
49756: CALL 54430 0 2
49760: ST_TO_ADDR
49761: GO 49732
49763: POP
49764: POP
// end ;
49765: LD_VAR 0 2
49769: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49770: LD_INT 0
49772: PPUSH
49773: PPUSH
49774: PPUSH
49775: PPUSH
49776: PPUSH
49777: PPUSH
// if not unit or not hexes then
49778: LD_VAR 0 1
49782: NOT
49783: PUSH
49784: LD_VAR 0 2
49788: NOT
49789: OR
49790: IFFALSE 49794
// exit ;
49792: GO 49917
// dist := 9999 ;
49794: LD_ADDR_VAR 0 5
49798: PUSH
49799: LD_INT 9999
49801: ST_TO_ADDR
// for i = 1 to hexes do
49802: LD_ADDR_VAR 0 4
49806: PUSH
49807: DOUBLE
49808: LD_INT 1
49810: DEC
49811: ST_TO_ADDR
49812: LD_VAR 0 2
49816: PUSH
49817: FOR_TO
49818: IFFALSE 49905
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49820: LD_ADDR_VAR 0 6
49824: PUSH
49825: LD_VAR 0 1
49829: PPUSH
49830: LD_VAR 0 2
49834: PUSH
49835: LD_VAR 0 4
49839: ARRAY
49840: PUSH
49841: LD_INT 1
49843: ARRAY
49844: PPUSH
49845: LD_VAR 0 2
49849: PUSH
49850: LD_VAR 0 4
49854: ARRAY
49855: PUSH
49856: LD_INT 2
49858: ARRAY
49859: PPUSH
49860: CALL_OW 297
49864: ST_TO_ADDR
// if tdist < dist then
49865: LD_VAR 0 6
49869: PUSH
49870: LD_VAR 0 5
49874: LESS
49875: IFFALSE 49903
// begin hex := hexes [ i ] ;
49877: LD_ADDR_VAR 0 8
49881: PUSH
49882: LD_VAR 0 2
49886: PUSH
49887: LD_VAR 0 4
49891: ARRAY
49892: ST_TO_ADDR
// dist := tdist ;
49893: LD_ADDR_VAR 0 5
49897: PUSH
49898: LD_VAR 0 6
49902: ST_TO_ADDR
// end ; end ;
49903: GO 49817
49905: POP
49906: POP
// result := hex ;
49907: LD_ADDR_VAR 0 3
49911: PUSH
49912: LD_VAR 0 8
49916: ST_TO_ADDR
// end ;
49917: LD_VAR 0 3
49921: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49922: LD_INT 0
49924: PPUSH
49925: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49926: LD_VAR 0 1
49930: NOT
49931: PUSH
49932: LD_VAR 0 1
49936: PUSH
49937: LD_INT 21
49939: PUSH
49940: LD_INT 2
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 23
49949: PUSH
49950: LD_INT 2
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PPUSH
49961: CALL_OW 69
49965: IN
49966: NOT
49967: OR
49968: IFFALSE 49972
// exit ;
49970: GO 50019
// for i = 1 to 3 do
49972: LD_ADDR_VAR 0 3
49976: PUSH
49977: DOUBLE
49978: LD_INT 1
49980: DEC
49981: ST_TO_ADDR
49982: LD_INT 3
49984: PUSH
49985: FOR_TO
49986: IFFALSE 50017
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49988: LD_VAR 0 1
49992: PPUSH
49993: CALL_OW 250
49997: PPUSH
49998: LD_VAR 0 1
50002: PPUSH
50003: CALL_OW 251
50007: PPUSH
50008: LD_INT 1
50010: PPUSH
50011: CALL_OW 453
50015: GO 49985
50017: POP
50018: POP
// end ;
50019: LD_VAR 0 2
50023: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50024: LD_INT 0
50026: PPUSH
50027: PPUSH
50028: PPUSH
50029: PPUSH
50030: PPUSH
50031: PPUSH
// if not unit or not enemy_unit then
50032: LD_VAR 0 1
50036: NOT
50037: PUSH
50038: LD_VAR 0 2
50042: NOT
50043: OR
50044: IFFALSE 50048
// exit ;
50046: GO 50515
// if GetLives ( i ) < 250 then
50048: LD_VAR 0 4
50052: PPUSH
50053: CALL_OW 256
50057: PUSH
50058: LD_INT 250
50060: LESS
50061: IFFALSE 50074
// begin ComAutodestruct ( i ) ;
50063: LD_VAR 0 4
50067: PPUSH
50068: CALL 49922 0 1
// exit ;
50072: GO 50515
// end ; x := GetX ( enemy_unit ) ;
50074: LD_ADDR_VAR 0 7
50078: PUSH
50079: LD_VAR 0 2
50083: PPUSH
50084: CALL_OW 250
50088: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50089: LD_ADDR_VAR 0 8
50093: PUSH
50094: LD_VAR 0 2
50098: PPUSH
50099: CALL_OW 251
50103: ST_TO_ADDR
// if not x or not y then
50104: LD_VAR 0 7
50108: NOT
50109: PUSH
50110: LD_VAR 0 8
50114: NOT
50115: OR
50116: IFFALSE 50120
// exit ;
50118: GO 50515
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50120: LD_ADDR_VAR 0 6
50124: PUSH
50125: LD_VAR 0 7
50129: PPUSH
50130: LD_INT 0
50132: PPUSH
50133: LD_INT 4
50135: PPUSH
50136: CALL_OW 272
50140: PUSH
50141: LD_VAR 0 8
50145: PPUSH
50146: LD_INT 0
50148: PPUSH
50149: LD_INT 4
50151: PPUSH
50152: CALL_OW 273
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_VAR 0 7
50165: PPUSH
50166: LD_INT 1
50168: PPUSH
50169: LD_INT 4
50171: PPUSH
50172: CALL_OW 272
50176: PUSH
50177: LD_VAR 0 8
50181: PPUSH
50182: LD_INT 1
50184: PPUSH
50185: LD_INT 4
50187: PPUSH
50188: CALL_OW 273
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_VAR 0 7
50201: PPUSH
50202: LD_INT 2
50204: PPUSH
50205: LD_INT 4
50207: PPUSH
50208: CALL_OW 272
50212: PUSH
50213: LD_VAR 0 8
50217: PPUSH
50218: LD_INT 2
50220: PPUSH
50221: LD_INT 4
50223: PPUSH
50224: CALL_OW 273
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_VAR 0 7
50237: PPUSH
50238: LD_INT 3
50240: PPUSH
50241: LD_INT 4
50243: PPUSH
50244: CALL_OW 272
50248: PUSH
50249: LD_VAR 0 8
50253: PPUSH
50254: LD_INT 3
50256: PPUSH
50257: LD_INT 4
50259: PPUSH
50260: CALL_OW 273
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_VAR 0 7
50273: PPUSH
50274: LD_INT 4
50276: PPUSH
50277: LD_INT 4
50279: PPUSH
50280: CALL_OW 272
50284: PUSH
50285: LD_VAR 0 8
50289: PPUSH
50290: LD_INT 4
50292: PPUSH
50293: LD_INT 4
50295: PPUSH
50296: CALL_OW 273
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_VAR 0 7
50309: PPUSH
50310: LD_INT 5
50312: PPUSH
50313: LD_INT 4
50315: PPUSH
50316: CALL_OW 272
50320: PUSH
50321: LD_VAR 0 8
50325: PPUSH
50326: LD_INT 5
50328: PPUSH
50329: LD_INT 4
50331: PPUSH
50332: CALL_OW 273
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: ST_TO_ADDR
// for i = tmp downto 1 do
50349: LD_ADDR_VAR 0 4
50353: PUSH
50354: DOUBLE
50355: LD_VAR 0 6
50359: INC
50360: ST_TO_ADDR
50361: LD_INT 1
50363: PUSH
50364: FOR_DOWNTO
50365: IFFALSE 50466
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50367: LD_VAR 0 6
50371: PUSH
50372: LD_VAR 0 4
50376: ARRAY
50377: PUSH
50378: LD_INT 1
50380: ARRAY
50381: PPUSH
50382: LD_VAR 0 6
50386: PUSH
50387: LD_VAR 0 4
50391: ARRAY
50392: PUSH
50393: LD_INT 2
50395: ARRAY
50396: PPUSH
50397: CALL_OW 488
50401: NOT
50402: PUSH
50403: LD_VAR 0 6
50407: PUSH
50408: LD_VAR 0 4
50412: ARRAY
50413: PUSH
50414: LD_INT 1
50416: ARRAY
50417: PPUSH
50418: LD_VAR 0 6
50422: PUSH
50423: LD_VAR 0 4
50427: ARRAY
50428: PUSH
50429: LD_INT 2
50431: ARRAY
50432: PPUSH
50433: CALL_OW 428
50437: PUSH
50438: LD_INT 0
50440: NONEQUAL
50441: OR
50442: IFFALSE 50464
// tmp := Delete ( tmp , i ) ;
50444: LD_ADDR_VAR 0 6
50448: PUSH
50449: LD_VAR 0 6
50453: PPUSH
50454: LD_VAR 0 4
50458: PPUSH
50459: CALL_OW 3
50463: ST_TO_ADDR
50464: GO 50364
50466: POP
50467: POP
// j := GetClosestHex ( unit , tmp ) ;
50468: LD_ADDR_VAR 0 5
50472: PUSH
50473: LD_VAR 0 1
50477: PPUSH
50478: LD_VAR 0 6
50482: PPUSH
50483: CALL 49770 0 2
50487: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50488: LD_VAR 0 1
50492: PPUSH
50493: LD_VAR 0 5
50497: PUSH
50498: LD_INT 1
50500: ARRAY
50501: PPUSH
50502: LD_VAR 0 5
50506: PUSH
50507: LD_INT 2
50509: ARRAY
50510: PPUSH
50511: CALL_OW 111
// end ;
50515: LD_VAR 0 3
50519: RET
// export function PrepareApemanSoldier ( ) ; begin
50520: LD_INT 0
50522: PPUSH
// uc_nation := 0 ;
50523: LD_ADDR_OWVAR 21
50527: PUSH
50528: LD_INT 0
50530: ST_TO_ADDR
// hc_sex := sex_male ;
50531: LD_ADDR_OWVAR 27
50535: PUSH
50536: LD_INT 1
50538: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50539: LD_ADDR_OWVAR 28
50543: PUSH
50544: LD_INT 15
50546: ST_TO_ADDR
// hc_gallery :=  ;
50547: LD_ADDR_OWVAR 33
50551: PUSH
50552: LD_STRING 
50554: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50555: LD_ADDR_OWVAR 31
50559: PUSH
50560: LD_INT 0
50562: PPUSH
50563: LD_INT 3
50565: PPUSH
50566: CALL_OW 12
50570: PUSH
50571: LD_INT 0
50573: PPUSH
50574: LD_INT 3
50576: PPUSH
50577: CALL_OW 12
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: ST_TO_ADDR
// end ;
50594: LD_VAR 0 1
50598: RET
// export function PrepareApemanEngineer ( ) ; begin
50599: LD_INT 0
50601: PPUSH
// uc_nation := 0 ;
50602: LD_ADDR_OWVAR 21
50606: PUSH
50607: LD_INT 0
50609: ST_TO_ADDR
// hc_sex := sex_male ;
50610: LD_ADDR_OWVAR 27
50614: PUSH
50615: LD_INT 1
50617: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50618: LD_ADDR_OWVAR 28
50622: PUSH
50623: LD_INT 16
50625: ST_TO_ADDR
// hc_gallery :=  ;
50626: LD_ADDR_OWVAR 33
50630: PUSH
50631: LD_STRING 
50633: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50634: LD_ADDR_OWVAR 31
50638: PUSH
50639: LD_INT 0
50641: PPUSH
50642: LD_INT 3
50644: PPUSH
50645: CALL_OW 12
50649: PUSH
50650: LD_INT 0
50652: PPUSH
50653: LD_INT 3
50655: PPUSH
50656: CALL_OW 12
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: ST_TO_ADDR
// end ;
50673: LD_VAR 0 1
50677: RET
// export function PrepareApeman ( agressivity ) ; begin
50678: LD_INT 0
50680: PPUSH
// uc_side := 0 ;
50681: LD_ADDR_OWVAR 20
50685: PUSH
50686: LD_INT 0
50688: ST_TO_ADDR
// uc_nation := 0 ;
50689: LD_ADDR_OWVAR 21
50693: PUSH
50694: LD_INT 0
50696: ST_TO_ADDR
// hc_sex := sex_male ;
50697: LD_ADDR_OWVAR 27
50701: PUSH
50702: LD_INT 1
50704: ST_TO_ADDR
// hc_class := class_apeman ;
50705: LD_ADDR_OWVAR 28
50709: PUSH
50710: LD_INT 12
50712: ST_TO_ADDR
// hc_gallery :=  ;
50713: LD_ADDR_OWVAR 33
50717: PUSH
50718: LD_STRING 
50720: ST_TO_ADDR
// if agressivity = 0 then
50721: LD_VAR 0 1
50725: PUSH
50726: LD_INT 0
50728: EQUAL
50729: IFFALSE 50741
// hc_agressivity := 0 else
50731: LD_ADDR_OWVAR 35
50735: PUSH
50736: LD_INT 0
50738: ST_TO_ADDR
50739: GO 50762
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50741: LD_ADDR_OWVAR 35
50745: PUSH
50746: LD_VAR 0 1
50750: NEG
50751: PPUSH
50752: LD_VAR 0 1
50756: PPUSH
50757: CALL_OW 12
50761: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50762: LD_ADDR_OWVAR 31
50766: PUSH
50767: LD_INT 0
50769: PPUSH
50770: LD_INT 3
50772: PPUSH
50773: CALL_OW 12
50777: PUSH
50778: LD_INT 0
50780: PPUSH
50781: LD_INT 3
50783: PPUSH
50784: CALL_OW 12
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: ST_TO_ADDR
// end ;
50801: LD_VAR 0 2
50805: RET
// export function PrepareTiger ( agressivity ) ; begin
50806: LD_INT 0
50808: PPUSH
// uc_side := 0 ;
50809: LD_ADDR_OWVAR 20
50813: PUSH
50814: LD_INT 0
50816: ST_TO_ADDR
// uc_nation := 0 ;
50817: LD_ADDR_OWVAR 21
50821: PUSH
50822: LD_INT 0
50824: ST_TO_ADDR
// hc_class := class_tiger ;
50825: LD_ADDR_OWVAR 28
50829: PUSH
50830: LD_INT 14
50832: ST_TO_ADDR
// hc_gallery :=  ;
50833: LD_ADDR_OWVAR 33
50837: PUSH
50838: LD_STRING 
50840: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50841: LD_ADDR_OWVAR 35
50845: PUSH
50846: LD_VAR 0 1
50850: NEG
50851: PPUSH
50852: LD_VAR 0 1
50856: PPUSH
50857: CALL_OW 12
50861: ST_TO_ADDR
// end ;
50862: LD_VAR 0 2
50866: RET
// export function PrepareEnchidna ( ) ; begin
50867: LD_INT 0
50869: PPUSH
// uc_side := 0 ;
50870: LD_ADDR_OWVAR 20
50874: PUSH
50875: LD_INT 0
50877: ST_TO_ADDR
// uc_nation := 0 ;
50878: LD_ADDR_OWVAR 21
50882: PUSH
50883: LD_INT 0
50885: ST_TO_ADDR
// hc_class := class_baggie ;
50886: LD_ADDR_OWVAR 28
50890: PUSH
50891: LD_INT 13
50893: ST_TO_ADDR
// hc_gallery :=  ;
50894: LD_ADDR_OWVAR 33
50898: PUSH
50899: LD_STRING 
50901: ST_TO_ADDR
// end ;
50902: LD_VAR 0 1
50906: RET
// export function PrepareFrog ( ) ; begin
50907: LD_INT 0
50909: PPUSH
// uc_side := 0 ;
50910: LD_ADDR_OWVAR 20
50914: PUSH
50915: LD_INT 0
50917: ST_TO_ADDR
// uc_nation := 0 ;
50918: LD_ADDR_OWVAR 21
50922: PUSH
50923: LD_INT 0
50925: ST_TO_ADDR
// hc_class := class_frog ;
50926: LD_ADDR_OWVAR 28
50930: PUSH
50931: LD_INT 19
50933: ST_TO_ADDR
// hc_gallery :=  ;
50934: LD_ADDR_OWVAR 33
50938: PUSH
50939: LD_STRING 
50941: ST_TO_ADDR
// end ;
50942: LD_VAR 0 1
50946: RET
// export function PrepareFish ( ) ; begin
50947: LD_INT 0
50949: PPUSH
// uc_side := 0 ;
50950: LD_ADDR_OWVAR 20
50954: PUSH
50955: LD_INT 0
50957: ST_TO_ADDR
// uc_nation := 0 ;
50958: LD_ADDR_OWVAR 21
50962: PUSH
50963: LD_INT 0
50965: ST_TO_ADDR
// hc_class := class_fish ;
50966: LD_ADDR_OWVAR 28
50970: PUSH
50971: LD_INT 20
50973: ST_TO_ADDR
// hc_gallery :=  ;
50974: LD_ADDR_OWVAR 33
50978: PUSH
50979: LD_STRING 
50981: ST_TO_ADDR
// end ;
50982: LD_VAR 0 1
50986: RET
// export function PrepareBird ( ) ; begin
50987: LD_INT 0
50989: PPUSH
// uc_side := 0 ;
50990: LD_ADDR_OWVAR 20
50994: PUSH
50995: LD_INT 0
50997: ST_TO_ADDR
// uc_nation := 0 ;
50998: LD_ADDR_OWVAR 21
51002: PUSH
51003: LD_INT 0
51005: ST_TO_ADDR
// hc_class := class_phororhacos ;
51006: LD_ADDR_OWVAR 28
51010: PUSH
51011: LD_INT 18
51013: ST_TO_ADDR
// hc_gallery :=  ;
51014: LD_ADDR_OWVAR 33
51018: PUSH
51019: LD_STRING 
51021: ST_TO_ADDR
// end ;
51022: LD_VAR 0 1
51026: RET
// export function PrepareHorse ( ) ; begin
51027: LD_INT 0
51029: PPUSH
// uc_side := 0 ;
51030: LD_ADDR_OWVAR 20
51034: PUSH
51035: LD_INT 0
51037: ST_TO_ADDR
// uc_nation := 0 ;
51038: LD_ADDR_OWVAR 21
51042: PUSH
51043: LD_INT 0
51045: ST_TO_ADDR
// hc_class := class_horse ;
51046: LD_ADDR_OWVAR 28
51050: PUSH
51051: LD_INT 21
51053: ST_TO_ADDR
// hc_gallery :=  ;
51054: LD_ADDR_OWVAR 33
51058: PUSH
51059: LD_STRING 
51061: ST_TO_ADDR
// end ;
51062: LD_VAR 0 1
51066: RET
// export function PrepareMastodont ( ) ; begin
51067: LD_INT 0
51069: PPUSH
// uc_side := 0 ;
51070: LD_ADDR_OWVAR 20
51074: PUSH
51075: LD_INT 0
51077: ST_TO_ADDR
// uc_nation := 0 ;
51078: LD_ADDR_OWVAR 21
51082: PUSH
51083: LD_INT 0
51085: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51086: LD_ADDR_OWVAR 37
51090: PUSH
51091: LD_INT 31
51093: ST_TO_ADDR
// vc_control := control_rider ;
51094: LD_ADDR_OWVAR 38
51098: PUSH
51099: LD_INT 4
51101: ST_TO_ADDR
// end ;
51102: LD_VAR 0 1
51106: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51107: LD_INT 0
51109: PPUSH
51110: PPUSH
51111: PPUSH
// uc_side = 0 ;
51112: LD_ADDR_OWVAR 20
51116: PUSH
51117: LD_INT 0
51119: ST_TO_ADDR
// uc_nation = 0 ;
51120: LD_ADDR_OWVAR 21
51124: PUSH
51125: LD_INT 0
51127: ST_TO_ADDR
// InitHc_All ( ) ;
51128: CALL_OW 584
// InitVc ;
51132: CALL_OW 20
// if mastodonts then
51136: LD_VAR 0 6
51140: IFFALSE 51207
// for i = 1 to mastodonts do
51142: LD_ADDR_VAR 0 11
51146: PUSH
51147: DOUBLE
51148: LD_INT 1
51150: DEC
51151: ST_TO_ADDR
51152: LD_VAR 0 6
51156: PUSH
51157: FOR_TO
51158: IFFALSE 51205
// begin vc_chassis := 31 ;
51160: LD_ADDR_OWVAR 37
51164: PUSH
51165: LD_INT 31
51167: ST_TO_ADDR
// vc_control := control_rider ;
51168: LD_ADDR_OWVAR 38
51172: PUSH
51173: LD_INT 4
51175: ST_TO_ADDR
// animal := CreateVehicle ;
51176: LD_ADDR_VAR 0 12
51180: PUSH
51181: CALL_OW 45
51185: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51186: LD_VAR 0 12
51190: PPUSH
51191: LD_VAR 0 8
51195: PPUSH
51196: LD_INT 0
51198: PPUSH
51199: CALL 53335 0 3
// end ;
51203: GO 51157
51205: POP
51206: POP
// if horses then
51207: LD_VAR 0 5
51211: IFFALSE 51278
// for i = 1 to horses do
51213: LD_ADDR_VAR 0 11
51217: PUSH
51218: DOUBLE
51219: LD_INT 1
51221: DEC
51222: ST_TO_ADDR
51223: LD_VAR 0 5
51227: PUSH
51228: FOR_TO
51229: IFFALSE 51276
// begin hc_class := 21 ;
51231: LD_ADDR_OWVAR 28
51235: PUSH
51236: LD_INT 21
51238: ST_TO_ADDR
// hc_gallery :=  ;
51239: LD_ADDR_OWVAR 33
51243: PUSH
51244: LD_STRING 
51246: ST_TO_ADDR
// animal := CreateHuman ;
51247: LD_ADDR_VAR 0 12
51251: PUSH
51252: CALL_OW 44
51256: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51257: LD_VAR 0 12
51261: PPUSH
51262: LD_VAR 0 8
51266: PPUSH
51267: LD_INT 0
51269: PPUSH
51270: CALL 53335 0 3
// end ;
51274: GO 51228
51276: POP
51277: POP
// if birds then
51278: LD_VAR 0 1
51282: IFFALSE 51349
// for i = 1 to birds do
51284: LD_ADDR_VAR 0 11
51288: PUSH
51289: DOUBLE
51290: LD_INT 1
51292: DEC
51293: ST_TO_ADDR
51294: LD_VAR 0 1
51298: PUSH
51299: FOR_TO
51300: IFFALSE 51347
// begin hc_class := 18 ;
51302: LD_ADDR_OWVAR 28
51306: PUSH
51307: LD_INT 18
51309: ST_TO_ADDR
// hc_gallery =  ;
51310: LD_ADDR_OWVAR 33
51314: PUSH
51315: LD_STRING 
51317: ST_TO_ADDR
// animal := CreateHuman ;
51318: LD_ADDR_VAR 0 12
51322: PUSH
51323: CALL_OW 44
51327: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51328: LD_VAR 0 12
51332: PPUSH
51333: LD_VAR 0 8
51337: PPUSH
51338: LD_INT 0
51340: PPUSH
51341: CALL 53335 0 3
// end ;
51345: GO 51299
51347: POP
51348: POP
// if tigers then
51349: LD_VAR 0 2
51353: IFFALSE 51437
// for i = 1 to tigers do
51355: LD_ADDR_VAR 0 11
51359: PUSH
51360: DOUBLE
51361: LD_INT 1
51363: DEC
51364: ST_TO_ADDR
51365: LD_VAR 0 2
51369: PUSH
51370: FOR_TO
51371: IFFALSE 51435
// begin hc_class = class_tiger ;
51373: LD_ADDR_OWVAR 28
51377: PUSH
51378: LD_INT 14
51380: ST_TO_ADDR
// hc_gallery =  ;
51381: LD_ADDR_OWVAR 33
51385: PUSH
51386: LD_STRING 
51388: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51389: LD_ADDR_OWVAR 35
51393: PUSH
51394: LD_INT 7
51396: NEG
51397: PPUSH
51398: LD_INT 7
51400: PPUSH
51401: CALL_OW 12
51405: ST_TO_ADDR
// animal := CreateHuman ;
51406: LD_ADDR_VAR 0 12
51410: PUSH
51411: CALL_OW 44
51415: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51416: LD_VAR 0 12
51420: PPUSH
51421: LD_VAR 0 8
51425: PPUSH
51426: LD_INT 0
51428: PPUSH
51429: CALL 53335 0 3
// end ;
51433: GO 51370
51435: POP
51436: POP
// if apemans then
51437: LD_VAR 0 3
51441: IFFALSE 51564
// for i = 1 to apemans do
51443: LD_ADDR_VAR 0 11
51447: PUSH
51448: DOUBLE
51449: LD_INT 1
51451: DEC
51452: ST_TO_ADDR
51453: LD_VAR 0 3
51457: PUSH
51458: FOR_TO
51459: IFFALSE 51562
// begin hc_class = class_apeman ;
51461: LD_ADDR_OWVAR 28
51465: PUSH
51466: LD_INT 12
51468: ST_TO_ADDR
// hc_gallery =  ;
51469: LD_ADDR_OWVAR 33
51473: PUSH
51474: LD_STRING 
51476: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51477: LD_ADDR_OWVAR 35
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PPUSH
51486: LD_INT 2
51488: PPUSH
51489: CALL_OW 12
51493: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51494: LD_ADDR_OWVAR 31
51498: PUSH
51499: LD_INT 1
51501: PPUSH
51502: LD_INT 3
51504: PPUSH
51505: CALL_OW 12
51509: PUSH
51510: LD_INT 1
51512: PPUSH
51513: LD_INT 3
51515: PPUSH
51516: CALL_OW 12
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: ST_TO_ADDR
// animal := CreateHuman ;
51533: LD_ADDR_VAR 0 12
51537: PUSH
51538: CALL_OW 44
51542: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51543: LD_VAR 0 12
51547: PPUSH
51548: LD_VAR 0 8
51552: PPUSH
51553: LD_INT 0
51555: PPUSH
51556: CALL 53335 0 3
// end ;
51560: GO 51458
51562: POP
51563: POP
// if enchidnas then
51564: LD_VAR 0 4
51568: IFFALSE 51635
// for i = 1 to enchidnas do
51570: LD_ADDR_VAR 0 11
51574: PUSH
51575: DOUBLE
51576: LD_INT 1
51578: DEC
51579: ST_TO_ADDR
51580: LD_VAR 0 4
51584: PUSH
51585: FOR_TO
51586: IFFALSE 51633
// begin hc_class = 13 ;
51588: LD_ADDR_OWVAR 28
51592: PUSH
51593: LD_INT 13
51595: ST_TO_ADDR
// hc_gallery =  ;
51596: LD_ADDR_OWVAR 33
51600: PUSH
51601: LD_STRING 
51603: ST_TO_ADDR
// animal := CreateHuman ;
51604: LD_ADDR_VAR 0 12
51608: PUSH
51609: CALL_OW 44
51613: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51614: LD_VAR 0 12
51618: PPUSH
51619: LD_VAR 0 8
51623: PPUSH
51624: LD_INT 0
51626: PPUSH
51627: CALL 53335 0 3
// end ;
51631: GO 51585
51633: POP
51634: POP
// if fishes then
51635: LD_VAR 0 7
51639: IFFALSE 51706
// for i = 1 to fishes do
51641: LD_ADDR_VAR 0 11
51645: PUSH
51646: DOUBLE
51647: LD_INT 1
51649: DEC
51650: ST_TO_ADDR
51651: LD_VAR 0 7
51655: PUSH
51656: FOR_TO
51657: IFFALSE 51704
// begin hc_class = 20 ;
51659: LD_ADDR_OWVAR 28
51663: PUSH
51664: LD_INT 20
51666: ST_TO_ADDR
// hc_gallery =  ;
51667: LD_ADDR_OWVAR 33
51671: PUSH
51672: LD_STRING 
51674: ST_TO_ADDR
// animal := CreateHuman ;
51675: LD_ADDR_VAR 0 12
51679: PUSH
51680: CALL_OW 44
51684: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51685: LD_VAR 0 12
51689: PPUSH
51690: LD_VAR 0 9
51694: PPUSH
51695: LD_INT 0
51697: PPUSH
51698: CALL 53335 0 3
// end ;
51702: GO 51656
51704: POP
51705: POP
// end ;
51706: LD_VAR 0 10
51710: RET
// export function WantHeal ( sci , unit ) ; begin
51711: LD_INT 0
51713: PPUSH
// if GetTaskList ( sci ) > 0 then
51714: LD_VAR 0 1
51718: PPUSH
51719: CALL_OW 437
51723: PUSH
51724: LD_INT 0
51726: GREATER
51727: IFFALSE 51797
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51729: LD_VAR 0 1
51733: PPUSH
51734: CALL_OW 437
51738: PUSH
51739: LD_INT 1
51741: ARRAY
51742: PUSH
51743: LD_INT 1
51745: ARRAY
51746: PUSH
51747: LD_STRING l
51749: EQUAL
51750: PUSH
51751: LD_VAR 0 1
51755: PPUSH
51756: CALL_OW 437
51760: PUSH
51761: LD_INT 1
51763: ARRAY
51764: PUSH
51765: LD_INT 4
51767: ARRAY
51768: PUSH
51769: LD_VAR 0 2
51773: EQUAL
51774: AND
51775: IFFALSE 51787
// result := true else
51777: LD_ADDR_VAR 0 3
51781: PUSH
51782: LD_INT 1
51784: ST_TO_ADDR
51785: GO 51795
// result := false ;
51787: LD_ADDR_VAR 0 3
51791: PUSH
51792: LD_INT 0
51794: ST_TO_ADDR
// end else
51795: GO 51805
// result := false ;
51797: LD_ADDR_VAR 0 3
51801: PUSH
51802: LD_INT 0
51804: ST_TO_ADDR
// end ;
51805: LD_VAR 0 3
51809: RET
// export function HealTarget ( sci ) ; begin
51810: LD_INT 0
51812: PPUSH
// if not sci then
51813: LD_VAR 0 1
51817: NOT
51818: IFFALSE 51822
// exit ;
51820: GO 51887
// result := 0 ;
51822: LD_ADDR_VAR 0 2
51826: PUSH
51827: LD_INT 0
51829: ST_TO_ADDR
// if GetTaskList ( sci ) then
51830: LD_VAR 0 1
51834: PPUSH
51835: CALL_OW 437
51839: IFFALSE 51887
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51841: LD_VAR 0 1
51845: PPUSH
51846: CALL_OW 437
51850: PUSH
51851: LD_INT 1
51853: ARRAY
51854: PUSH
51855: LD_INT 1
51857: ARRAY
51858: PUSH
51859: LD_STRING l
51861: EQUAL
51862: IFFALSE 51887
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51864: LD_ADDR_VAR 0 2
51868: PUSH
51869: LD_VAR 0 1
51873: PPUSH
51874: CALL_OW 437
51878: PUSH
51879: LD_INT 1
51881: ARRAY
51882: PUSH
51883: LD_INT 4
51885: ARRAY
51886: ST_TO_ADDR
// end ;
51887: LD_VAR 0 2
51891: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51892: LD_INT 0
51894: PPUSH
51895: PPUSH
51896: PPUSH
51897: PPUSH
// if not base_units then
51898: LD_VAR 0 1
51902: NOT
51903: IFFALSE 51907
// exit ;
51905: GO 51994
// result := false ;
51907: LD_ADDR_VAR 0 2
51911: PUSH
51912: LD_INT 0
51914: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51915: LD_ADDR_VAR 0 5
51919: PUSH
51920: LD_VAR 0 1
51924: PPUSH
51925: LD_INT 21
51927: PUSH
51928: LD_INT 3
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PPUSH
51935: CALL_OW 72
51939: ST_TO_ADDR
// if not tmp then
51940: LD_VAR 0 5
51944: NOT
51945: IFFALSE 51949
// exit ;
51947: GO 51994
// for i in tmp do
51949: LD_ADDR_VAR 0 3
51953: PUSH
51954: LD_VAR 0 5
51958: PUSH
51959: FOR_IN
51960: IFFALSE 51992
// begin result := EnemyInRange ( i , 22 ) ;
51962: LD_ADDR_VAR 0 2
51966: PUSH
51967: LD_VAR 0 3
51971: PPUSH
51972: LD_INT 22
51974: PPUSH
51975: CALL 49572 0 2
51979: ST_TO_ADDR
// if result then
51980: LD_VAR 0 2
51984: IFFALSE 51990
// exit ;
51986: POP
51987: POP
51988: GO 51994
// end ;
51990: GO 51959
51992: POP
51993: POP
// end ;
51994: LD_VAR 0 2
51998: RET
// export function FilterByTag ( units , tag ) ; begin
51999: LD_INT 0
52001: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
52002: LD_ADDR_VAR 0 3
52006: PUSH
52007: LD_VAR 0 1
52011: PPUSH
52012: LD_INT 120
52014: PUSH
52015: LD_VAR 0 2
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PPUSH
52024: CALL_OW 72
52028: ST_TO_ADDR
// end ;
52029: LD_VAR 0 3
52033: RET
// export function IsDriver ( un ) ; begin
52034: LD_INT 0
52036: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52037: LD_ADDR_VAR 0 2
52041: PUSH
52042: LD_VAR 0 1
52046: PUSH
52047: LD_INT 55
52049: PUSH
52050: EMPTY
52051: LIST
52052: PPUSH
52053: CALL_OW 69
52057: IN
52058: ST_TO_ADDR
// end ;
52059: LD_VAR 0 2
52063: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52064: LD_INT 0
52066: PPUSH
52067: PPUSH
// list := [ ] ;
52068: LD_ADDR_VAR 0 5
52072: PUSH
52073: EMPTY
52074: ST_TO_ADDR
// case d of 0 :
52075: LD_VAR 0 3
52079: PUSH
52080: LD_INT 0
52082: DOUBLE
52083: EQUAL
52084: IFTRUE 52088
52086: GO 52221
52088: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52089: LD_ADDR_VAR 0 5
52093: PUSH
52094: LD_VAR 0 1
52098: PUSH
52099: LD_INT 4
52101: MINUS
52102: PUSH
52103: LD_VAR 0 2
52107: PUSH
52108: LD_INT 4
52110: MINUS
52111: PUSH
52112: LD_INT 2
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: LIST
52119: PUSH
52120: LD_VAR 0 1
52124: PUSH
52125: LD_INT 3
52127: MINUS
52128: PUSH
52129: LD_VAR 0 2
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: LIST
52141: PUSH
52142: LD_VAR 0 1
52146: PUSH
52147: LD_INT 4
52149: PLUS
52150: PUSH
52151: LD_VAR 0 2
52155: PUSH
52156: LD_INT 4
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: LIST
52163: PUSH
52164: LD_VAR 0 1
52168: PUSH
52169: LD_INT 3
52171: PLUS
52172: PUSH
52173: LD_VAR 0 2
52177: PUSH
52178: LD_INT 3
52180: PLUS
52181: PUSH
52182: LD_INT 5
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: LIST
52189: PUSH
52190: LD_VAR 0 1
52194: PUSH
52195: LD_VAR 0 2
52199: PUSH
52200: LD_INT 4
52202: PLUS
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: LIST
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: ST_TO_ADDR
// end ; 1 :
52219: GO 52919
52221: LD_INT 1
52223: DOUBLE
52224: EQUAL
52225: IFTRUE 52229
52227: GO 52362
52229: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52230: LD_ADDR_VAR 0 5
52234: PUSH
52235: LD_VAR 0 1
52239: PUSH
52240: LD_VAR 0 2
52244: PUSH
52245: LD_INT 4
52247: MINUS
52248: PUSH
52249: LD_INT 3
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: LIST
52256: PUSH
52257: LD_VAR 0 1
52261: PUSH
52262: LD_INT 3
52264: MINUS
52265: PUSH
52266: LD_VAR 0 2
52270: PUSH
52271: LD_INT 3
52273: MINUS
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: LIST
52282: PUSH
52283: LD_VAR 0 1
52287: PUSH
52288: LD_INT 4
52290: MINUS
52291: PUSH
52292: LD_VAR 0 2
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: LIST
52304: PUSH
52305: LD_VAR 0 1
52309: PUSH
52310: LD_VAR 0 2
52314: PUSH
52315: LD_INT 3
52317: PLUS
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: LIST
52326: PUSH
52327: LD_VAR 0 1
52331: PUSH
52332: LD_INT 4
52334: PLUS
52335: PUSH
52336: LD_VAR 0 2
52340: PUSH
52341: LD_INT 4
52343: PLUS
52344: PUSH
52345: LD_INT 5
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: LIST
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: ST_TO_ADDR
// end ; 2 :
52360: GO 52919
52362: LD_INT 2
52364: DOUBLE
52365: EQUAL
52366: IFTRUE 52370
52368: GO 52499
52370: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52371: LD_ADDR_VAR 0 5
52375: PUSH
52376: LD_VAR 0 1
52380: PUSH
52381: LD_VAR 0 2
52385: PUSH
52386: LD_INT 3
52388: MINUS
52389: PUSH
52390: LD_INT 3
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: LIST
52397: PUSH
52398: LD_VAR 0 1
52402: PUSH
52403: LD_INT 4
52405: PLUS
52406: PUSH
52407: LD_VAR 0 2
52411: PUSH
52412: LD_INT 4
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: LIST
52419: PUSH
52420: LD_VAR 0 1
52424: PUSH
52425: LD_VAR 0 2
52429: PUSH
52430: LD_INT 4
52432: PLUS
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: LIST
52441: PUSH
52442: LD_VAR 0 1
52446: PUSH
52447: LD_INT 3
52449: MINUS
52450: PUSH
52451: LD_VAR 0 2
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: LIST
52463: PUSH
52464: LD_VAR 0 1
52468: PUSH
52469: LD_INT 4
52471: MINUS
52472: PUSH
52473: LD_VAR 0 2
52477: PUSH
52478: LD_INT 4
52480: MINUS
52481: PUSH
52482: LD_INT 2
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: LIST
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: ST_TO_ADDR
// end ; 3 :
52497: GO 52919
52499: LD_INT 3
52501: DOUBLE
52502: EQUAL
52503: IFTRUE 52507
52505: GO 52640
52507: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52508: LD_ADDR_VAR 0 5
52512: PUSH
52513: LD_VAR 0 1
52517: PUSH
52518: LD_INT 3
52520: PLUS
52521: PUSH
52522: LD_VAR 0 2
52526: PUSH
52527: LD_INT 4
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: LIST
52534: PUSH
52535: LD_VAR 0 1
52539: PUSH
52540: LD_INT 4
52542: PLUS
52543: PUSH
52544: LD_VAR 0 2
52548: PUSH
52549: LD_INT 4
52551: PLUS
52552: PUSH
52553: LD_INT 5
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: LIST
52560: PUSH
52561: LD_VAR 0 1
52565: PUSH
52566: LD_INT 4
52568: MINUS
52569: PUSH
52570: LD_VAR 0 2
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: LIST
52582: PUSH
52583: LD_VAR 0 1
52587: PUSH
52588: LD_VAR 0 2
52592: PUSH
52593: LD_INT 4
52595: MINUS
52596: PUSH
52597: LD_INT 3
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: LIST
52604: PUSH
52605: LD_VAR 0 1
52609: PUSH
52610: LD_INT 3
52612: MINUS
52613: PUSH
52614: LD_VAR 0 2
52618: PUSH
52619: LD_INT 3
52621: MINUS
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: LIST
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: ST_TO_ADDR
// end ; 4 :
52638: GO 52919
52640: LD_INT 4
52642: DOUBLE
52643: EQUAL
52644: IFTRUE 52648
52646: GO 52781
52648: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52649: LD_ADDR_VAR 0 5
52653: PUSH
52654: LD_VAR 0 1
52658: PUSH
52659: LD_VAR 0 2
52663: PUSH
52664: LD_INT 4
52666: PLUS
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: LIST
52675: PUSH
52676: LD_VAR 0 1
52680: PUSH
52681: LD_INT 3
52683: PLUS
52684: PUSH
52685: LD_VAR 0 2
52689: PUSH
52690: LD_INT 3
52692: PLUS
52693: PUSH
52694: LD_INT 5
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: PUSH
52702: LD_VAR 0 1
52706: PUSH
52707: LD_INT 4
52709: PLUS
52710: PUSH
52711: LD_VAR 0 2
52715: PUSH
52716: LD_INT 4
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: LIST
52723: PUSH
52724: LD_VAR 0 1
52728: PUSH
52729: LD_VAR 0 2
52733: PUSH
52734: LD_INT 3
52736: MINUS
52737: PUSH
52738: LD_INT 3
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: LIST
52745: PUSH
52746: LD_VAR 0 1
52750: PUSH
52751: LD_INT 4
52753: MINUS
52754: PUSH
52755: LD_VAR 0 2
52759: PUSH
52760: LD_INT 4
52762: MINUS
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: LIST
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: ST_TO_ADDR
// end ; 5 :
52779: GO 52919
52781: LD_INT 5
52783: DOUBLE
52784: EQUAL
52785: IFTRUE 52789
52787: GO 52918
52789: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52790: LD_ADDR_VAR 0 5
52794: PUSH
52795: LD_VAR 0 1
52799: PUSH
52800: LD_INT 4
52802: MINUS
52803: PUSH
52804: LD_VAR 0 2
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: LIST
52816: PUSH
52817: LD_VAR 0 1
52821: PUSH
52822: LD_VAR 0 2
52826: PUSH
52827: LD_INT 4
52829: MINUS
52830: PUSH
52831: LD_INT 3
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: LIST
52838: PUSH
52839: LD_VAR 0 1
52843: PUSH
52844: LD_INT 4
52846: PLUS
52847: PUSH
52848: LD_VAR 0 2
52852: PUSH
52853: LD_INT 4
52855: PLUS
52856: PUSH
52857: LD_INT 5
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: LIST
52864: PUSH
52865: LD_VAR 0 1
52869: PUSH
52870: LD_INT 3
52872: PLUS
52873: PUSH
52874: LD_VAR 0 2
52878: PUSH
52879: LD_INT 4
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: LIST
52886: PUSH
52887: LD_VAR 0 1
52891: PUSH
52892: LD_VAR 0 2
52896: PUSH
52897: LD_INT 3
52899: PLUS
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: LIST
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: ST_TO_ADDR
// end ; end ;
52916: GO 52919
52918: POP
// result := list ;
52919: LD_ADDR_VAR 0 4
52923: PUSH
52924: LD_VAR 0 5
52928: ST_TO_ADDR
// end ;
52929: LD_VAR 0 4
52933: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52934: LD_INT 0
52936: PPUSH
52937: PPUSH
52938: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52939: LD_VAR 0 1
52943: NOT
52944: PUSH
52945: LD_VAR 0 2
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 2
52955: PUSH
52956: LD_INT 3
52958: PUSH
52959: LD_INT 4
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: IN
52968: NOT
52969: OR
52970: IFFALSE 52974
// exit ;
52972: GO 53057
// tmp := [ ] ;
52974: LD_ADDR_VAR 0 5
52978: PUSH
52979: EMPTY
52980: ST_TO_ADDR
// for i in units do
52981: LD_ADDR_VAR 0 4
52985: PUSH
52986: LD_VAR 0 1
52990: PUSH
52991: FOR_IN
52992: IFFALSE 53026
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52994: LD_ADDR_VAR 0 5
52998: PUSH
52999: LD_VAR 0 5
53003: PPUSH
53004: LD_VAR 0 4
53008: PPUSH
53009: LD_VAR 0 2
53013: PPUSH
53014: CALL_OW 259
53018: PPUSH
53019: CALL 54430 0 2
53023: ST_TO_ADDR
53024: GO 52991
53026: POP
53027: POP
// if not tmp then
53028: LD_VAR 0 5
53032: NOT
53033: IFFALSE 53037
// exit ;
53035: GO 53057
// result := SortListByListDesc ( units , tmp ) ;
53037: LD_ADDR_VAR 0 3
53041: PUSH
53042: LD_VAR 0 1
53046: PPUSH
53047: LD_VAR 0 5
53051: PPUSH
53052: CALL_OW 77
53056: ST_TO_ADDR
// end ;
53057: LD_VAR 0 3
53061: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53062: LD_INT 0
53064: PPUSH
53065: PPUSH
53066: PPUSH
// result := false ;
53067: LD_ADDR_VAR 0 3
53071: PUSH
53072: LD_INT 0
53074: ST_TO_ADDR
// if not building then
53075: LD_VAR 0 2
53079: NOT
53080: IFFALSE 53084
// exit ;
53082: GO 53222
// x := GetX ( building ) ;
53084: LD_ADDR_VAR 0 4
53088: PUSH
53089: LD_VAR 0 2
53093: PPUSH
53094: CALL_OW 250
53098: ST_TO_ADDR
// y := GetY ( building ) ;
53099: LD_ADDR_VAR 0 5
53103: PUSH
53104: LD_VAR 0 2
53108: PPUSH
53109: CALL_OW 251
53113: ST_TO_ADDR
// if not x or not y then
53114: LD_VAR 0 4
53118: NOT
53119: PUSH
53120: LD_VAR 0 5
53124: NOT
53125: OR
53126: IFFALSE 53130
// exit ;
53128: GO 53222
// if GetTaskList ( unit ) then
53130: LD_VAR 0 1
53134: PPUSH
53135: CALL_OW 437
53139: IFFALSE 53222
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53141: LD_STRING e
53143: PUSH
53144: LD_VAR 0 1
53148: PPUSH
53149: CALL_OW 437
53153: PUSH
53154: LD_INT 1
53156: ARRAY
53157: PUSH
53158: LD_INT 1
53160: ARRAY
53161: EQUAL
53162: PUSH
53163: LD_VAR 0 4
53167: PUSH
53168: LD_VAR 0 1
53172: PPUSH
53173: CALL_OW 437
53177: PUSH
53178: LD_INT 1
53180: ARRAY
53181: PUSH
53182: LD_INT 2
53184: ARRAY
53185: EQUAL
53186: AND
53187: PUSH
53188: LD_VAR 0 5
53192: PUSH
53193: LD_VAR 0 1
53197: PPUSH
53198: CALL_OW 437
53202: PUSH
53203: LD_INT 1
53205: ARRAY
53206: PUSH
53207: LD_INT 3
53209: ARRAY
53210: EQUAL
53211: AND
53212: IFFALSE 53222
// result := true end ;
53214: LD_ADDR_VAR 0 3
53218: PUSH
53219: LD_INT 1
53221: ST_TO_ADDR
// end ;
53222: LD_VAR 0 3
53226: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53227: LD_INT 0
53229: PPUSH
// result := false ;
53230: LD_ADDR_VAR 0 4
53234: PUSH
53235: LD_INT 0
53237: ST_TO_ADDR
// if GetTaskList ( unit ) then
53238: LD_VAR 0 1
53242: PPUSH
53243: CALL_OW 437
53247: IFFALSE 53330
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53249: LD_STRING M
53251: PUSH
53252: LD_VAR 0 1
53256: PPUSH
53257: CALL_OW 437
53261: PUSH
53262: LD_INT 1
53264: ARRAY
53265: PUSH
53266: LD_INT 1
53268: ARRAY
53269: EQUAL
53270: PUSH
53271: LD_VAR 0 2
53275: PUSH
53276: LD_VAR 0 1
53280: PPUSH
53281: CALL_OW 437
53285: PUSH
53286: LD_INT 1
53288: ARRAY
53289: PUSH
53290: LD_INT 2
53292: ARRAY
53293: EQUAL
53294: AND
53295: PUSH
53296: LD_VAR 0 3
53300: PUSH
53301: LD_VAR 0 1
53305: PPUSH
53306: CALL_OW 437
53310: PUSH
53311: LD_INT 1
53313: ARRAY
53314: PUSH
53315: LD_INT 3
53317: ARRAY
53318: EQUAL
53319: AND
53320: IFFALSE 53330
// result := true ;
53322: LD_ADDR_VAR 0 4
53326: PUSH
53327: LD_INT 1
53329: ST_TO_ADDR
// end ; end ;
53330: LD_VAR 0 4
53334: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53335: LD_INT 0
53337: PPUSH
53338: PPUSH
53339: PPUSH
53340: PPUSH
// if not unit or not area then
53341: LD_VAR 0 1
53345: NOT
53346: PUSH
53347: LD_VAR 0 2
53351: NOT
53352: OR
53353: IFFALSE 53357
// exit ;
53355: GO 53533
// tmp := AreaToList ( area , i ) ;
53357: LD_ADDR_VAR 0 6
53361: PUSH
53362: LD_VAR 0 2
53366: PPUSH
53367: LD_VAR 0 5
53371: PPUSH
53372: CALL_OW 517
53376: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53377: LD_ADDR_VAR 0 5
53381: PUSH
53382: DOUBLE
53383: LD_INT 1
53385: DEC
53386: ST_TO_ADDR
53387: LD_VAR 0 6
53391: PUSH
53392: LD_INT 1
53394: ARRAY
53395: PUSH
53396: FOR_TO
53397: IFFALSE 53531
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53399: LD_ADDR_VAR 0 7
53403: PUSH
53404: LD_VAR 0 6
53408: PUSH
53409: LD_INT 1
53411: ARRAY
53412: PUSH
53413: LD_VAR 0 5
53417: ARRAY
53418: PUSH
53419: LD_VAR 0 6
53423: PUSH
53424: LD_INT 2
53426: ARRAY
53427: PUSH
53428: LD_VAR 0 5
53432: ARRAY
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53438: LD_INT 92
53440: PUSH
53441: LD_VAR 0 7
53445: PUSH
53446: LD_INT 1
53448: ARRAY
53449: PUSH
53450: LD_VAR 0 7
53454: PUSH
53455: LD_INT 2
53457: ARRAY
53458: PUSH
53459: LD_INT 2
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: PPUSH
53468: CALL_OW 69
53472: PUSH
53473: LD_INT 0
53475: EQUAL
53476: IFFALSE 53529
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53478: LD_VAR 0 1
53482: PPUSH
53483: LD_VAR 0 7
53487: PUSH
53488: LD_INT 1
53490: ARRAY
53491: PPUSH
53492: LD_VAR 0 7
53496: PUSH
53497: LD_INT 2
53499: ARRAY
53500: PPUSH
53501: LD_VAR 0 3
53505: PPUSH
53506: CALL_OW 48
// result := IsPlaced ( unit ) ;
53510: LD_ADDR_VAR 0 4
53514: PUSH
53515: LD_VAR 0 1
53519: PPUSH
53520: CALL_OW 305
53524: ST_TO_ADDR
// exit ;
53525: POP
53526: POP
53527: GO 53533
// end ; end ;
53529: GO 53396
53531: POP
53532: POP
// end ;
53533: LD_VAR 0 4
53537: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53538: LD_INT 0
53540: PPUSH
53541: PPUSH
53542: PPUSH
// if not side or side > 8 then
53543: LD_VAR 0 1
53547: NOT
53548: PUSH
53549: LD_VAR 0 1
53553: PUSH
53554: LD_INT 8
53556: GREATER
53557: OR
53558: IFFALSE 53562
// exit ;
53560: GO 53749
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53562: LD_ADDR_VAR 0 4
53566: PUSH
53567: LD_INT 22
53569: PUSH
53570: LD_VAR 0 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 21
53581: PUSH
53582: LD_INT 3
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PPUSH
53593: CALL_OW 69
53597: ST_TO_ADDR
// if not tmp then
53598: LD_VAR 0 4
53602: NOT
53603: IFFALSE 53607
// exit ;
53605: GO 53749
// enable_addtolog := true ;
53607: LD_ADDR_OWVAR 81
53611: PUSH
53612: LD_INT 1
53614: ST_TO_ADDR
// AddToLog ( [ ) ;
53615: LD_STRING [
53617: PPUSH
53618: CALL_OW 561
// for i in tmp do
53622: LD_ADDR_VAR 0 3
53626: PUSH
53627: LD_VAR 0 4
53631: PUSH
53632: FOR_IN
53633: IFFALSE 53740
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53635: LD_STRING [
53637: PUSH
53638: LD_VAR 0 3
53642: PPUSH
53643: CALL_OW 266
53647: STR
53648: PUSH
53649: LD_STRING , 
53651: STR
53652: PUSH
53653: LD_VAR 0 3
53657: PPUSH
53658: CALL_OW 250
53662: STR
53663: PUSH
53664: LD_STRING , 
53666: STR
53667: PUSH
53668: LD_VAR 0 3
53672: PPUSH
53673: CALL_OW 251
53677: STR
53678: PUSH
53679: LD_STRING , 
53681: STR
53682: PUSH
53683: LD_VAR 0 3
53687: PPUSH
53688: CALL_OW 254
53692: STR
53693: PUSH
53694: LD_STRING , 
53696: STR
53697: PUSH
53698: LD_VAR 0 3
53702: PPUSH
53703: LD_INT 1
53705: PPUSH
53706: CALL_OW 268
53710: STR
53711: PUSH
53712: LD_STRING , 
53714: STR
53715: PUSH
53716: LD_VAR 0 3
53720: PPUSH
53721: LD_INT 2
53723: PPUSH
53724: CALL_OW 268
53728: STR
53729: PUSH
53730: LD_STRING ],
53732: STR
53733: PPUSH
53734: CALL_OW 561
// end ;
53738: GO 53632
53740: POP
53741: POP
// AddToLog ( ]; ) ;
53742: LD_STRING ];
53744: PPUSH
53745: CALL_OW 561
// end ;
53749: LD_VAR 0 2
53753: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53754: LD_INT 0
53756: PPUSH
53757: PPUSH
53758: PPUSH
53759: PPUSH
53760: PPUSH
// if not area or not rate or not max then
53761: LD_VAR 0 1
53765: NOT
53766: PUSH
53767: LD_VAR 0 2
53771: NOT
53772: OR
53773: PUSH
53774: LD_VAR 0 4
53778: NOT
53779: OR
53780: IFFALSE 53784
// exit ;
53782: GO 53973
// while 1 do
53784: LD_INT 1
53786: IFFALSE 53973
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53788: LD_ADDR_VAR 0 9
53792: PUSH
53793: LD_VAR 0 1
53797: PPUSH
53798: LD_INT 1
53800: PPUSH
53801: CALL_OW 287
53805: PUSH
53806: LD_INT 10
53808: MUL
53809: ST_TO_ADDR
// r := rate / 10 ;
53810: LD_ADDR_VAR 0 7
53814: PUSH
53815: LD_VAR 0 2
53819: PUSH
53820: LD_INT 10
53822: DIVREAL
53823: ST_TO_ADDR
// time := 1 1$00 ;
53824: LD_ADDR_VAR 0 8
53828: PUSH
53829: LD_INT 2100
53831: ST_TO_ADDR
// if amount < min then
53832: LD_VAR 0 9
53836: PUSH
53837: LD_VAR 0 3
53841: LESS
53842: IFFALSE 53860
// r := r * 2 else
53844: LD_ADDR_VAR 0 7
53848: PUSH
53849: LD_VAR 0 7
53853: PUSH
53854: LD_INT 2
53856: MUL
53857: ST_TO_ADDR
53858: GO 53886
// if amount > max then
53860: LD_VAR 0 9
53864: PUSH
53865: LD_VAR 0 4
53869: GREATER
53870: IFFALSE 53886
// r := r / 2 ;
53872: LD_ADDR_VAR 0 7
53876: PUSH
53877: LD_VAR 0 7
53881: PUSH
53882: LD_INT 2
53884: DIVREAL
53885: ST_TO_ADDR
// time := time / r ;
53886: LD_ADDR_VAR 0 8
53890: PUSH
53891: LD_VAR 0 8
53895: PUSH
53896: LD_VAR 0 7
53900: DIVREAL
53901: ST_TO_ADDR
// if time < 0 then
53902: LD_VAR 0 8
53906: PUSH
53907: LD_INT 0
53909: LESS
53910: IFFALSE 53927
// time := time * - 1 ;
53912: LD_ADDR_VAR 0 8
53916: PUSH
53917: LD_VAR 0 8
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: MUL
53926: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53927: LD_VAR 0 8
53931: PUSH
53932: LD_INT 35
53934: PPUSH
53935: LD_INT 875
53937: PPUSH
53938: CALL_OW 12
53942: PLUS
53943: PPUSH
53944: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53948: LD_INT 1
53950: PPUSH
53951: LD_INT 5
53953: PPUSH
53954: CALL_OW 12
53958: PPUSH
53959: LD_VAR 0 1
53963: PPUSH
53964: LD_INT 1
53966: PPUSH
53967: CALL_OW 55
// end ;
53971: GO 53784
// end ;
53973: LD_VAR 0 5
53977: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53978: LD_INT 0
53980: PPUSH
53981: PPUSH
53982: PPUSH
53983: PPUSH
53984: PPUSH
53985: PPUSH
53986: PPUSH
53987: PPUSH
// if not turrets or not factories then
53988: LD_VAR 0 1
53992: NOT
53993: PUSH
53994: LD_VAR 0 2
53998: NOT
53999: OR
54000: IFFALSE 54004
// exit ;
54002: GO 54311
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54004: LD_ADDR_VAR 0 10
54008: PUSH
54009: LD_INT 5
54011: PUSH
54012: LD_INT 6
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 2
54021: PUSH
54022: LD_INT 4
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 3
54031: PUSH
54032: LD_INT 5
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 24
54046: PUSH
54047: LD_INT 25
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 23
54056: PUSH
54057: LD_INT 27
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 42
54070: PUSH
54071: LD_INT 43
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 44
54080: PUSH
54081: LD_INT 46
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 45
54090: PUSH
54091: LD_INT 47
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: LIST
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: LIST
54107: ST_TO_ADDR
// result := [ ] ;
54108: LD_ADDR_VAR 0 3
54112: PUSH
54113: EMPTY
54114: ST_TO_ADDR
// for i in turrets do
54115: LD_ADDR_VAR 0 4
54119: PUSH
54120: LD_VAR 0 1
54124: PUSH
54125: FOR_IN
54126: IFFALSE 54309
// begin nat := GetNation ( i ) ;
54128: LD_ADDR_VAR 0 7
54132: PUSH
54133: LD_VAR 0 4
54137: PPUSH
54138: CALL_OW 248
54142: ST_TO_ADDR
// weapon := 0 ;
54143: LD_ADDR_VAR 0 8
54147: PUSH
54148: LD_INT 0
54150: ST_TO_ADDR
// if not nat then
54151: LD_VAR 0 7
54155: NOT
54156: IFFALSE 54160
// continue ;
54158: GO 54125
// for j in list [ nat ] do
54160: LD_ADDR_VAR 0 5
54164: PUSH
54165: LD_VAR 0 10
54169: PUSH
54170: LD_VAR 0 7
54174: ARRAY
54175: PUSH
54176: FOR_IN
54177: IFFALSE 54218
// if GetBWeapon ( i ) = j [ 1 ] then
54179: LD_VAR 0 4
54183: PPUSH
54184: CALL_OW 269
54188: PUSH
54189: LD_VAR 0 5
54193: PUSH
54194: LD_INT 1
54196: ARRAY
54197: EQUAL
54198: IFFALSE 54216
// begin weapon := j [ 2 ] ;
54200: LD_ADDR_VAR 0 8
54204: PUSH
54205: LD_VAR 0 5
54209: PUSH
54210: LD_INT 2
54212: ARRAY
54213: ST_TO_ADDR
// break ;
54214: GO 54218
// end ;
54216: GO 54176
54218: POP
54219: POP
// if not weapon then
54220: LD_VAR 0 8
54224: NOT
54225: IFFALSE 54229
// continue ;
54227: GO 54125
// for k in factories do
54229: LD_ADDR_VAR 0 6
54233: PUSH
54234: LD_VAR 0 2
54238: PUSH
54239: FOR_IN
54240: IFFALSE 54305
// begin weapons := AvailableWeaponList ( k ) ;
54242: LD_ADDR_VAR 0 9
54246: PUSH
54247: LD_VAR 0 6
54251: PPUSH
54252: CALL_OW 478
54256: ST_TO_ADDR
// if not weapons then
54257: LD_VAR 0 9
54261: NOT
54262: IFFALSE 54266
// continue ;
54264: GO 54239
// if weapon in weapons then
54266: LD_VAR 0 8
54270: PUSH
54271: LD_VAR 0 9
54275: IN
54276: IFFALSE 54303
// begin result := [ i , weapon ] ;
54278: LD_ADDR_VAR 0 3
54282: PUSH
54283: LD_VAR 0 4
54287: PUSH
54288: LD_VAR 0 8
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: ST_TO_ADDR
// exit ;
54297: POP
54298: POP
54299: POP
54300: POP
54301: GO 54311
// end ; end ;
54303: GO 54239
54305: POP
54306: POP
// end ;
54307: GO 54125
54309: POP
54310: POP
// end ;
54311: LD_VAR 0 3
54315: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54316: LD_INT 0
54318: PPUSH
// if not side or side > 8 then
54319: LD_VAR 0 3
54323: NOT
54324: PUSH
54325: LD_VAR 0 3
54329: PUSH
54330: LD_INT 8
54332: GREATER
54333: OR
54334: IFFALSE 54338
// exit ;
54336: GO 54397
// if not range then
54338: LD_VAR 0 4
54342: NOT
54343: IFFALSE 54354
// range := - 12 ;
54345: LD_ADDR_VAR 0 4
54349: PUSH
54350: LD_INT 12
54352: NEG
54353: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54354: LD_VAR 0 1
54358: PPUSH
54359: LD_VAR 0 2
54363: PPUSH
54364: LD_VAR 0 3
54368: PPUSH
54369: LD_VAR 0 4
54373: PPUSH
54374: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54378: LD_VAR 0 1
54382: PPUSH
54383: LD_VAR 0 2
54387: PPUSH
54388: LD_VAR 0 3
54392: PPUSH
54393: CALL_OW 331
// end ;
54397: LD_VAR 0 5
54401: RET
// export function Video ( mode ) ; begin
54402: LD_INT 0
54404: PPUSH
// ingame_video = mode ;
54405: LD_ADDR_OWVAR 52
54409: PUSH
54410: LD_VAR 0 1
54414: ST_TO_ADDR
// interface_hidden = mode ;
54415: LD_ADDR_OWVAR 54
54419: PUSH
54420: LD_VAR 0 1
54424: ST_TO_ADDR
// end ;
54425: LD_VAR 0 2
54429: RET
// export function Join ( array , element ) ; begin
54430: LD_INT 0
54432: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54433: LD_ADDR_VAR 0 3
54437: PUSH
54438: LD_VAR 0 1
54442: PPUSH
54443: LD_VAR 0 1
54447: PUSH
54448: LD_INT 1
54450: PLUS
54451: PPUSH
54452: LD_VAR 0 2
54456: PPUSH
54457: CALL_OW 1
54461: ST_TO_ADDR
// end ;
54462: LD_VAR 0 3
54466: RET
// export function JoinUnion ( array , element ) ; begin
54467: LD_INT 0
54469: PPUSH
// result := array union element ;
54470: LD_ADDR_VAR 0 3
54474: PUSH
54475: LD_VAR 0 1
54479: PUSH
54480: LD_VAR 0 2
54484: UNION
54485: ST_TO_ADDR
// end ;
54486: LD_VAR 0 3
54490: RET
// export function GetBehemoths ( side ) ; begin
54491: LD_INT 0
54493: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54494: LD_ADDR_VAR 0 2
54498: PUSH
54499: LD_INT 22
54501: PUSH
54502: LD_VAR 0 1
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 31
54513: PUSH
54514: LD_INT 25
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PPUSH
54525: CALL_OW 69
54529: ST_TO_ADDR
// end ;
54530: LD_VAR 0 2
54534: RET
// export function Shuffle ( array ) ; var i , index ; begin
54535: LD_INT 0
54537: PPUSH
54538: PPUSH
54539: PPUSH
// result := [ ] ;
54540: LD_ADDR_VAR 0 2
54544: PUSH
54545: EMPTY
54546: ST_TO_ADDR
// if not array then
54547: LD_VAR 0 1
54551: NOT
54552: IFFALSE 54556
// exit ;
54554: GO 54655
// Randomize ;
54556: CALL_OW 10
// for i = array downto 1 do
54560: LD_ADDR_VAR 0 3
54564: PUSH
54565: DOUBLE
54566: LD_VAR 0 1
54570: INC
54571: ST_TO_ADDR
54572: LD_INT 1
54574: PUSH
54575: FOR_DOWNTO
54576: IFFALSE 54653
// begin index := rand ( 1 , array ) ;
54578: LD_ADDR_VAR 0 4
54582: PUSH
54583: LD_INT 1
54585: PPUSH
54586: LD_VAR 0 1
54590: PPUSH
54591: CALL_OW 12
54595: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54596: LD_ADDR_VAR 0 2
54600: PUSH
54601: LD_VAR 0 2
54605: PPUSH
54606: LD_VAR 0 2
54610: PUSH
54611: LD_INT 1
54613: PLUS
54614: PPUSH
54615: LD_VAR 0 1
54619: PUSH
54620: LD_VAR 0 4
54624: ARRAY
54625: PPUSH
54626: CALL_OW 2
54630: ST_TO_ADDR
// array := Delete ( array , index ) ;
54631: LD_ADDR_VAR 0 1
54635: PUSH
54636: LD_VAR 0 1
54640: PPUSH
54641: LD_VAR 0 4
54645: PPUSH
54646: CALL_OW 3
54650: ST_TO_ADDR
// end ;
54651: GO 54575
54653: POP
54654: POP
// end ;
54655: LD_VAR 0 2
54659: RET
// export function GetBaseMaterials ( base ) ; begin
54660: LD_INT 0
54662: PPUSH
// result := [ 0 , 0 , 0 ] ;
54663: LD_ADDR_VAR 0 2
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: LIST
54681: ST_TO_ADDR
// if not base then
54682: LD_VAR 0 1
54686: NOT
54687: IFFALSE 54691
// exit ;
54689: GO 54740
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54691: LD_ADDR_VAR 0 2
54695: PUSH
54696: LD_VAR 0 1
54700: PPUSH
54701: LD_INT 1
54703: PPUSH
54704: CALL_OW 275
54708: PUSH
54709: LD_VAR 0 1
54713: PPUSH
54714: LD_INT 2
54716: PPUSH
54717: CALL_OW 275
54721: PUSH
54722: LD_VAR 0 1
54726: PPUSH
54727: LD_INT 3
54729: PPUSH
54730: CALL_OW 275
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: LIST
54739: ST_TO_ADDR
// end ;
54740: LD_VAR 0 2
54744: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54745: LD_INT 0
54747: PPUSH
54748: PPUSH
// result := array ;
54749: LD_ADDR_VAR 0 3
54753: PUSH
54754: LD_VAR 0 1
54758: ST_TO_ADDR
// if size >= result then
54759: LD_VAR 0 2
54763: PUSH
54764: LD_VAR 0 3
54768: GREATEREQUAL
54769: IFFALSE 54773
// exit ;
54771: GO 54823
// if size then
54773: LD_VAR 0 2
54777: IFFALSE 54823
// for i := array downto size do
54779: LD_ADDR_VAR 0 4
54783: PUSH
54784: DOUBLE
54785: LD_VAR 0 1
54789: INC
54790: ST_TO_ADDR
54791: LD_VAR 0 2
54795: PUSH
54796: FOR_DOWNTO
54797: IFFALSE 54821
// result := Delete ( result , result ) ;
54799: LD_ADDR_VAR 0 3
54803: PUSH
54804: LD_VAR 0 3
54808: PPUSH
54809: LD_VAR 0 3
54813: PPUSH
54814: CALL_OW 3
54818: ST_TO_ADDR
54819: GO 54796
54821: POP
54822: POP
// end ;
54823: LD_VAR 0 3
54827: RET
// export function ComExit ( unit ) ; var tmp ; begin
54828: LD_INT 0
54830: PPUSH
54831: PPUSH
// if not IsInUnit ( unit ) then
54832: LD_VAR 0 1
54836: PPUSH
54837: CALL_OW 310
54841: NOT
54842: IFFALSE 54846
// exit ;
54844: GO 54906
// tmp := IsInUnit ( unit ) ;
54846: LD_ADDR_VAR 0 3
54850: PUSH
54851: LD_VAR 0 1
54855: PPUSH
54856: CALL_OW 310
54860: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54861: LD_VAR 0 3
54865: PPUSH
54866: CALL_OW 247
54870: PUSH
54871: LD_INT 2
54873: EQUAL
54874: IFFALSE 54887
// ComExitVehicle ( unit ) else
54876: LD_VAR 0 1
54880: PPUSH
54881: CALL_OW 121
54885: GO 54896
// ComExitBuilding ( unit ) ;
54887: LD_VAR 0 1
54891: PPUSH
54892: CALL_OW 122
// result := tmp ;
54896: LD_ADDR_VAR 0 2
54900: PUSH
54901: LD_VAR 0 3
54905: ST_TO_ADDR
// end ;
54906: LD_VAR 0 2
54910: RET
// export function ComExitAll ( units ) ; var i ; begin
54911: LD_INT 0
54913: PPUSH
54914: PPUSH
// if not units then
54915: LD_VAR 0 1
54919: NOT
54920: IFFALSE 54924
// exit ;
54922: GO 54950
// for i in units do
54924: LD_ADDR_VAR 0 3
54928: PUSH
54929: LD_VAR 0 1
54933: PUSH
54934: FOR_IN
54935: IFFALSE 54948
// ComExit ( i ) ;
54937: LD_VAR 0 3
54941: PPUSH
54942: CALL 54828 0 1
54946: GO 54934
54948: POP
54949: POP
// end ;
54950: LD_VAR 0 2
54954: RET
// export function ResetHc ; begin
54955: LD_INT 0
54957: PPUSH
// InitHc ;
54958: CALL_OW 19
// hc_importance := 0 ;
54962: LD_ADDR_OWVAR 32
54966: PUSH
54967: LD_INT 0
54969: ST_TO_ADDR
// end ;
54970: LD_VAR 0 1
54974: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54975: LD_INT 0
54977: PPUSH
54978: PPUSH
54979: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54980: LD_ADDR_VAR 0 6
54984: PUSH
54985: LD_VAR 0 1
54989: PUSH
54990: LD_VAR 0 3
54994: PLUS
54995: PUSH
54996: LD_INT 2
54998: DIV
54999: ST_TO_ADDR
// if _x < 0 then
55000: LD_VAR 0 6
55004: PUSH
55005: LD_INT 0
55007: LESS
55008: IFFALSE 55025
// _x := _x * - 1 ;
55010: LD_ADDR_VAR 0 6
55014: PUSH
55015: LD_VAR 0 6
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: MUL
55024: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55025: LD_ADDR_VAR 0 7
55029: PUSH
55030: LD_VAR 0 2
55034: PUSH
55035: LD_VAR 0 4
55039: PLUS
55040: PUSH
55041: LD_INT 2
55043: DIV
55044: ST_TO_ADDR
// if _y < 0 then
55045: LD_VAR 0 7
55049: PUSH
55050: LD_INT 0
55052: LESS
55053: IFFALSE 55070
// _y := _y * - 1 ;
55055: LD_ADDR_VAR 0 7
55059: PUSH
55060: LD_VAR 0 7
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: MUL
55069: ST_TO_ADDR
// result := [ _x , _y ] ;
55070: LD_ADDR_VAR 0 5
55074: PUSH
55075: LD_VAR 0 6
55079: PUSH
55080: LD_VAR 0 7
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: ST_TO_ADDR
// end ;
55089: LD_VAR 0 5
55093: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55094: LD_INT 0
55096: PPUSH
55097: PPUSH
55098: PPUSH
55099: PPUSH
// task := GetTaskList ( unit ) ;
55100: LD_ADDR_VAR 0 7
55104: PUSH
55105: LD_VAR 0 1
55109: PPUSH
55110: CALL_OW 437
55114: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55115: LD_VAR 0 7
55119: NOT
55120: PUSH
55121: LD_VAR 0 1
55125: PPUSH
55126: LD_VAR 0 2
55130: PPUSH
55131: CALL_OW 308
55135: NOT
55136: AND
55137: IFFALSE 55141
// exit ;
55139: GO 55259
// if IsInArea ( unit , area ) then
55141: LD_VAR 0 1
55145: PPUSH
55146: LD_VAR 0 2
55150: PPUSH
55151: CALL_OW 308
55155: IFFALSE 55173
// begin ComMoveToArea ( unit , goAway ) ;
55157: LD_VAR 0 1
55161: PPUSH
55162: LD_VAR 0 3
55166: PPUSH
55167: CALL_OW 113
// exit ;
55171: GO 55259
// end ; if task [ 1 ] [ 1 ] <> M then
55173: LD_VAR 0 7
55177: PUSH
55178: LD_INT 1
55180: ARRAY
55181: PUSH
55182: LD_INT 1
55184: ARRAY
55185: PUSH
55186: LD_STRING M
55188: NONEQUAL
55189: IFFALSE 55193
// exit ;
55191: GO 55259
// x := task [ 1 ] [ 2 ] ;
55193: LD_ADDR_VAR 0 5
55197: PUSH
55198: LD_VAR 0 7
55202: PUSH
55203: LD_INT 1
55205: ARRAY
55206: PUSH
55207: LD_INT 2
55209: ARRAY
55210: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55211: LD_ADDR_VAR 0 6
55215: PUSH
55216: LD_VAR 0 7
55220: PUSH
55221: LD_INT 1
55223: ARRAY
55224: PUSH
55225: LD_INT 3
55227: ARRAY
55228: ST_TO_ADDR
// if InArea ( x , y , area ) then
55229: LD_VAR 0 5
55233: PPUSH
55234: LD_VAR 0 6
55238: PPUSH
55239: LD_VAR 0 2
55243: PPUSH
55244: CALL_OW 309
55248: IFFALSE 55259
// ComStop ( unit ) ;
55250: LD_VAR 0 1
55254: PPUSH
55255: CALL_OW 141
// end ;
55259: LD_VAR 0 4
55263: RET
// export function Abs ( value ) ; begin
55264: LD_INT 0
55266: PPUSH
// result := value ;
55267: LD_ADDR_VAR 0 2
55271: PUSH
55272: LD_VAR 0 1
55276: ST_TO_ADDR
// if value < 0 then
55277: LD_VAR 0 1
55281: PUSH
55282: LD_INT 0
55284: LESS
55285: IFFALSE 55302
// result := value * - 1 ;
55287: LD_ADDR_VAR 0 2
55291: PUSH
55292: LD_VAR 0 1
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: MUL
55301: ST_TO_ADDR
// end ;
55302: LD_VAR 0 2
55306: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55307: LD_INT 0
55309: PPUSH
55310: PPUSH
55311: PPUSH
55312: PPUSH
55313: PPUSH
55314: PPUSH
55315: PPUSH
55316: PPUSH
// if not unit or not building then
55317: LD_VAR 0 1
55321: NOT
55322: PUSH
55323: LD_VAR 0 2
55327: NOT
55328: OR
55329: IFFALSE 55333
// exit ;
55331: GO 55559
// x := GetX ( building ) ;
55333: LD_ADDR_VAR 0 4
55337: PUSH
55338: LD_VAR 0 2
55342: PPUSH
55343: CALL_OW 250
55347: ST_TO_ADDR
// y := GetY ( building ) ;
55348: LD_ADDR_VAR 0 6
55352: PUSH
55353: LD_VAR 0 2
55357: PPUSH
55358: CALL_OW 251
55362: ST_TO_ADDR
// d := GetDir ( building ) ;
55363: LD_ADDR_VAR 0 8
55367: PUSH
55368: LD_VAR 0 2
55372: PPUSH
55373: CALL_OW 254
55377: ST_TO_ADDR
// r := 4 ;
55378: LD_ADDR_VAR 0 9
55382: PUSH
55383: LD_INT 4
55385: ST_TO_ADDR
// for i := 1 to 5 do
55386: LD_ADDR_VAR 0 10
55390: PUSH
55391: DOUBLE
55392: LD_INT 1
55394: DEC
55395: ST_TO_ADDR
55396: LD_INT 5
55398: PUSH
55399: FOR_TO
55400: IFFALSE 55557
// begin _x := ShiftX ( x , d , r + i ) ;
55402: LD_ADDR_VAR 0 5
55406: PUSH
55407: LD_VAR 0 4
55411: PPUSH
55412: LD_VAR 0 8
55416: PPUSH
55417: LD_VAR 0 9
55421: PUSH
55422: LD_VAR 0 10
55426: PLUS
55427: PPUSH
55428: CALL_OW 272
55432: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55433: LD_ADDR_VAR 0 7
55437: PUSH
55438: LD_VAR 0 6
55442: PPUSH
55443: LD_VAR 0 8
55447: PPUSH
55448: LD_VAR 0 9
55452: PUSH
55453: LD_VAR 0 10
55457: PLUS
55458: PPUSH
55459: CALL_OW 273
55463: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55464: LD_VAR 0 5
55468: PPUSH
55469: LD_VAR 0 7
55473: PPUSH
55474: CALL_OW 488
55478: PUSH
55479: LD_VAR 0 5
55483: PPUSH
55484: LD_VAR 0 7
55488: PPUSH
55489: CALL_OW 428
55493: PPUSH
55494: CALL_OW 247
55498: PUSH
55499: LD_INT 3
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: IN
55509: NOT
55510: AND
55511: IFFALSE 55555
// begin ComMoveXY ( unit , _x , _y ) ;
55513: LD_VAR 0 1
55517: PPUSH
55518: LD_VAR 0 5
55522: PPUSH
55523: LD_VAR 0 7
55527: PPUSH
55528: CALL_OW 111
// result := [ _x , _y ] ;
55532: LD_ADDR_VAR 0 3
55536: PUSH
55537: LD_VAR 0 5
55541: PUSH
55542: LD_VAR 0 7
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: ST_TO_ADDR
// exit ;
55551: POP
55552: POP
55553: GO 55559
// end ; end ;
55555: GO 55399
55557: POP
55558: POP
// end ;
55559: LD_VAR 0 3
55563: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55564: LD_INT 0
55566: PPUSH
55567: PPUSH
55568: PPUSH
// result := 0 ;
55569: LD_ADDR_VAR 0 3
55573: PUSH
55574: LD_INT 0
55576: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55577: LD_VAR 0 1
55581: PUSH
55582: LD_INT 0
55584: LESS
55585: PUSH
55586: LD_VAR 0 1
55590: PUSH
55591: LD_INT 8
55593: GREATER
55594: OR
55595: PUSH
55596: LD_VAR 0 2
55600: PUSH
55601: LD_INT 0
55603: LESS
55604: OR
55605: PUSH
55606: LD_VAR 0 2
55610: PUSH
55611: LD_INT 8
55613: GREATER
55614: OR
55615: IFFALSE 55619
// exit ;
55617: GO 55694
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55619: LD_ADDR_VAR 0 4
55623: PUSH
55624: LD_INT 22
55626: PUSH
55627: LD_VAR 0 2
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PPUSH
55636: CALL_OW 69
55640: PUSH
55641: FOR_IN
55642: IFFALSE 55692
// begin un := UnitShoot ( i ) ;
55644: LD_ADDR_VAR 0 5
55648: PUSH
55649: LD_VAR 0 4
55653: PPUSH
55654: CALL_OW 504
55658: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55659: LD_VAR 0 5
55663: PPUSH
55664: CALL_OW 255
55668: PUSH
55669: LD_VAR 0 1
55673: EQUAL
55674: IFFALSE 55690
// begin result := un ;
55676: LD_ADDR_VAR 0 3
55680: PUSH
55681: LD_VAR 0 5
55685: ST_TO_ADDR
// exit ;
55686: POP
55687: POP
55688: GO 55694
// end ; end ;
55690: GO 55641
55692: POP
55693: POP
// end ;
55694: LD_VAR 0 3
55698: RET
// export function GetCargoBay ( units ) ; begin
55699: LD_INT 0
55701: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55702: LD_ADDR_VAR 0 2
55706: PUSH
55707: LD_VAR 0 1
55711: PPUSH
55712: LD_INT 2
55714: PUSH
55715: LD_INT 34
55717: PUSH
55718: LD_INT 12
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 34
55727: PUSH
55728: LD_INT 51
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 34
55737: PUSH
55738: LD_INT 32
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 34
55747: PUSH
55748: LD_INT 89
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: PPUSH
55762: CALL_OW 72
55766: ST_TO_ADDR
// end ;
55767: LD_VAR 0 2
55771: RET
// export function Negate ( value ) ; begin
55772: LD_INT 0
55774: PPUSH
// result := not value ;
55775: LD_ADDR_VAR 0 2
55779: PUSH
55780: LD_VAR 0 1
55784: NOT
55785: ST_TO_ADDR
// end ;
55786: LD_VAR 0 2
55790: RET
// export function Inc ( value ) ; begin
55791: LD_INT 0
55793: PPUSH
// result := value + 1 ;
55794: LD_ADDR_VAR 0 2
55798: PUSH
55799: LD_VAR 0 1
55803: PUSH
55804: LD_INT 1
55806: PLUS
55807: ST_TO_ADDR
// end ;
55808: LD_VAR 0 2
55812: RET
// export function Dec ( value ) ; begin
55813: LD_INT 0
55815: PPUSH
// result := value - 1 ;
55816: LD_ADDR_VAR 0 2
55820: PUSH
55821: LD_VAR 0 1
55825: PUSH
55826: LD_INT 1
55828: MINUS
55829: ST_TO_ADDR
// end ;
55830: LD_VAR 0 2
55834: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55835: LD_INT 0
55837: PPUSH
55838: PPUSH
55839: PPUSH
55840: PPUSH
55841: PPUSH
55842: PPUSH
55843: PPUSH
55844: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55845: LD_VAR 0 1
55849: PPUSH
55850: LD_VAR 0 2
55854: PPUSH
55855: CALL_OW 488
55859: NOT
55860: PUSH
55861: LD_VAR 0 3
55865: PPUSH
55866: LD_VAR 0 4
55870: PPUSH
55871: CALL_OW 488
55875: NOT
55876: OR
55877: IFFALSE 55890
// begin result := - 1 ;
55879: LD_ADDR_VAR 0 5
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: ST_TO_ADDR
// exit ;
55888: GO 56125
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55890: LD_ADDR_VAR 0 12
55894: PUSH
55895: LD_VAR 0 1
55899: PPUSH
55900: LD_VAR 0 2
55904: PPUSH
55905: LD_VAR 0 3
55909: PPUSH
55910: LD_VAR 0 4
55914: PPUSH
55915: CALL 54975 0 4
55919: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55920: LD_ADDR_VAR 0 11
55924: PUSH
55925: LD_VAR 0 1
55929: PPUSH
55930: LD_VAR 0 2
55934: PPUSH
55935: LD_VAR 0 12
55939: PUSH
55940: LD_INT 1
55942: ARRAY
55943: PPUSH
55944: LD_VAR 0 12
55948: PUSH
55949: LD_INT 2
55951: ARRAY
55952: PPUSH
55953: CALL_OW 298
55957: ST_TO_ADDR
// distance := 9999 ;
55958: LD_ADDR_VAR 0 10
55962: PUSH
55963: LD_INT 9999
55965: ST_TO_ADDR
// for i := 0 to 5 do
55966: LD_ADDR_VAR 0 6
55970: PUSH
55971: DOUBLE
55972: LD_INT 0
55974: DEC
55975: ST_TO_ADDR
55976: LD_INT 5
55978: PUSH
55979: FOR_TO
55980: IFFALSE 56123
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55982: LD_ADDR_VAR 0 7
55986: PUSH
55987: LD_VAR 0 1
55991: PPUSH
55992: LD_VAR 0 6
55996: PPUSH
55997: LD_VAR 0 11
56001: PPUSH
56002: CALL_OW 272
56006: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56007: LD_ADDR_VAR 0 8
56011: PUSH
56012: LD_VAR 0 2
56016: PPUSH
56017: LD_VAR 0 6
56021: PPUSH
56022: LD_VAR 0 11
56026: PPUSH
56027: CALL_OW 273
56031: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56032: LD_VAR 0 7
56036: PPUSH
56037: LD_VAR 0 8
56041: PPUSH
56042: CALL_OW 488
56046: NOT
56047: IFFALSE 56051
// continue ;
56049: GO 55979
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56051: LD_ADDR_VAR 0 9
56055: PUSH
56056: LD_VAR 0 12
56060: PUSH
56061: LD_INT 1
56063: ARRAY
56064: PPUSH
56065: LD_VAR 0 12
56069: PUSH
56070: LD_INT 2
56072: ARRAY
56073: PPUSH
56074: LD_VAR 0 7
56078: PPUSH
56079: LD_VAR 0 8
56083: PPUSH
56084: CALL_OW 298
56088: ST_TO_ADDR
// if tmp < distance then
56089: LD_VAR 0 9
56093: PUSH
56094: LD_VAR 0 10
56098: LESS
56099: IFFALSE 56121
// begin result := i ;
56101: LD_ADDR_VAR 0 5
56105: PUSH
56106: LD_VAR 0 6
56110: ST_TO_ADDR
// distance := tmp ;
56111: LD_ADDR_VAR 0 10
56115: PUSH
56116: LD_VAR 0 9
56120: ST_TO_ADDR
// end ; end ;
56121: GO 55979
56123: POP
56124: POP
// end ;
56125: LD_VAR 0 5
56129: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56130: LD_INT 0
56132: PPUSH
56133: PPUSH
// if not driver or not IsInUnit ( driver ) then
56134: LD_VAR 0 1
56138: NOT
56139: PUSH
56140: LD_VAR 0 1
56144: PPUSH
56145: CALL_OW 310
56149: NOT
56150: OR
56151: IFFALSE 56155
// exit ;
56153: GO 56245
// vehicle := IsInUnit ( driver ) ;
56155: LD_ADDR_VAR 0 3
56159: PUSH
56160: LD_VAR 0 1
56164: PPUSH
56165: CALL_OW 310
56169: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56170: LD_VAR 0 1
56174: PPUSH
56175: LD_STRING \
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: PUSH
56205: LD_STRING E
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_VAR 0 3
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PPUSH
56241: CALL_OW 446
// end ;
56245: LD_VAR 0 2
56249: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56250: LD_INT 0
56252: PPUSH
56253: PPUSH
// if not driver or not IsInUnit ( driver ) then
56254: LD_VAR 0 1
56258: NOT
56259: PUSH
56260: LD_VAR 0 1
56264: PPUSH
56265: CALL_OW 310
56269: NOT
56270: OR
56271: IFFALSE 56275
// exit ;
56273: GO 56365
// vehicle := IsInUnit ( driver ) ;
56275: LD_ADDR_VAR 0 3
56279: PUSH
56280: LD_VAR 0 1
56284: PPUSH
56285: CALL_OW 310
56289: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56290: LD_VAR 0 1
56294: PPUSH
56295: LD_STRING \
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: PUSH
56325: LD_STRING E
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: LD_VAR 0 3
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PPUSH
56361: CALL_OW 447
// end ;
56365: LD_VAR 0 2
56369: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56370: LD_INT 0
56372: PPUSH
56373: PPUSH
56374: PPUSH
// tmp := [ ] ;
56375: LD_ADDR_VAR 0 5
56379: PUSH
56380: EMPTY
56381: ST_TO_ADDR
// for i in units do
56382: LD_ADDR_VAR 0 4
56386: PUSH
56387: LD_VAR 0 1
56391: PUSH
56392: FOR_IN
56393: IFFALSE 56431
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56395: LD_ADDR_VAR 0 5
56399: PUSH
56400: LD_VAR 0 5
56404: PPUSH
56405: LD_VAR 0 5
56409: PUSH
56410: LD_INT 1
56412: PLUS
56413: PPUSH
56414: LD_VAR 0 4
56418: PPUSH
56419: CALL_OW 256
56423: PPUSH
56424: CALL_OW 2
56428: ST_TO_ADDR
56429: GO 56392
56431: POP
56432: POP
// if not tmp then
56433: LD_VAR 0 5
56437: NOT
56438: IFFALSE 56442
// exit ;
56440: GO 56490
// if asc then
56442: LD_VAR 0 2
56446: IFFALSE 56470
// result := SortListByListAsc ( units , tmp ) else
56448: LD_ADDR_VAR 0 3
56452: PUSH
56453: LD_VAR 0 1
56457: PPUSH
56458: LD_VAR 0 5
56462: PPUSH
56463: CALL_OW 76
56467: ST_TO_ADDR
56468: GO 56490
// result := SortListByListDesc ( units , tmp ) ;
56470: LD_ADDR_VAR 0 3
56474: PUSH
56475: LD_VAR 0 1
56479: PPUSH
56480: LD_VAR 0 5
56484: PPUSH
56485: CALL_OW 77
56489: ST_TO_ADDR
// end ;
56490: LD_VAR 0 3
56494: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56495: LD_INT 0
56497: PPUSH
56498: PPUSH
// task := GetTaskList ( mech ) ;
56499: LD_ADDR_VAR 0 4
56503: PUSH
56504: LD_VAR 0 1
56508: PPUSH
56509: CALL_OW 437
56513: ST_TO_ADDR
// if not task then
56514: LD_VAR 0 4
56518: NOT
56519: IFFALSE 56523
// exit ;
56521: GO 56565
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56523: LD_ADDR_VAR 0 3
56527: PUSH
56528: LD_VAR 0 4
56532: PUSH
56533: LD_INT 1
56535: ARRAY
56536: PUSH
56537: LD_INT 1
56539: ARRAY
56540: PUSH
56541: LD_STRING r
56543: EQUAL
56544: PUSH
56545: LD_VAR 0 4
56549: PUSH
56550: LD_INT 1
56552: ARRAY
56553: PUSH
56554: LD_INT 4
56556: ARRAY
56557: PUSH
56558: LD_VAR 0 2
56562: EQUAL
56563: AND
56564: ST_TO_ADDR
// end ;
56565: LD_VAR 0 3
56569: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56570: LD_INT 0
56572: PPUSH
// SetDir ( unit , d ) ;
56573: LD_VAR 0 1
56577: PPUSH
56578: LD_VAR 0 4
56582: PPUSH
56583: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56587: LD_ADDR_VAR 0 6
56591: PUSH
56592: LD_VAR 0 1
56596: PPUSH
56597: LD_VAR 0 2
56601: PPUSH
56602: LD_VAR 0 3
56606: PPUSH
56607: LD_VAR 0 5
56611: PPUSH
56612: CALL_OW 48
56616: ST_TO_ADDR
// end ;
56617: LD_VAR 0 6
56621: RET
// export function ToNaturalNumber ( number ) ; begin
56622: LD_INT 0
56624: PPUSH
// result := number div 1 ;
56625: LD_ADDR_VAR 0 2
56629: PUSH
56630: LD_VAR 0 1
56634: PUSH
56635: LD_INT 1
56637: DIV
56638: ST_TO_ADDR
// if number < 0 then
56639: LD_VAR 0 1
56643: PUSH
56644: LD_INT 0
56646: LESS
56647: IFFALSE 56657
// result := 0 ;
56649: LD_ADDR_VAR 0 2
56653: PUSH
56654: LD_INT 0
56656: ST_TO_ADDR
// end ;
56657: LD_VAR 0 2
56661: RET
// export function SortByClass ( units , class ) ; var un ; begin
56662: LD_INT 0
56664: PPUSH
56665: PPUSH
// if not units or not class then
56666: LD_VAR 0 1
56670: NOT
56671: PUSH
56672: LD_VAR 0 2
56676: NOT
56677: OR
56678: IFFALSE 56682
// exit ;
56680: GO 56777
// result := [ ] ;
56682: LD_ADDR_VAR 0 3
56686: PUSH
56687: EMPTY
56688: ST_TO_ADDR
// for un in units do
56689: LD_ADDR_VAR 0 4
56693: PUSH
56694: LD_VAR 0 1
56698: PUSH
56699: FOR_IN
56700: IFFALSE 56775
// if GetClass ( un ) = class then
56702: LD_VAR 0 4
56706: PPUSH
56707: CALL_OW 257
56711: PUSH
56712: LD_VAR 0 2
56716: EQUAL
56717: IFFALSE 56744
// result := Insert ( result , 1 , un ) else
56719: LD_ADDR_VAR 0 3
56723: PUSH
56724: LD_VAR 0 3
56728: PPUSH
56729: LD_INT 1
56731: PPUSH
56732: LD_VAR 0 4
56736: PPUSH
56737: CALL_OW 2
56741: ST_TO_ADDR
56742: GO 56773
// result := Replace ( result , result + 1 , un ) ;
56744: LD_ADDR_VAR 0 3
56748: PUSH
56749: LD_VAR 0 3
56753: PPUSH
56754: LD_VAR 0 3
56758: PUSH
56759: LD_INT 1
56761: PLUS
56762: PPUSH
56763: LD_VAR 0 4
56767: PPUSH
56768: CALL_OW 1
56772: ST_TO_ADDR
56773: GO 56699
56775: POP
56776: POP
// end ;
56777: LD_VAR 0 3
56781: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56782: LD_INT 0
56784: PPUSH
56785: PPUSH
56786: PPUSH
56787: PPUSH
56788: PPUSH
56789: PPUSH
56790: PPUSH
// result := [ ] ;
56791: LD_ADDR_VAR 0 4
56795: PUSH
56796: EMPTY
56797: ST_TO_ADDR
// if x - r < 0 then
56798: LD_VAR 0 1
56802: PUSH
56803: LD_VAR 0 3
56807: MINUS
56808: PUSH
56809: LD_INT 0
56811: LESS
56812: IFFALSE 56824
// min_x := 0 else
56814: LD_ADDR_VAR 0 8
56818: PUSH
56819: LD_INT 0
56821: ST_TO_ADDR
56822: GO 56840
// min_x := x - r ;
56824: LD_ADDR_VAR 0 8
56828: PUSH
56829: LD_VAR 0 1
56833: PUSH
56834: LD_VAR 0 3
56838: MINUS
56839: ST_TO_ADDR
// if y - r < 0 then
56840: LD_VAR 0 2
56844: PUSH
56845: LD_VAR 0 3
56849: MINUS
56850: PUSH
56851: LD_INT 0
56853: LESS
56854: IFFALSE 56866
// min_y := 0 else
56856: LD_ADDR_VAR 0 7
56860: PUSH
56861: LD_INT 0
56863: ST_TO_ADDR
56864: GO 56882
// min_y := y - r ;
56866: LD_ADDR_VAR 0 7
56870: PUSH
56871: LD_VAR 0 2
56875: PUSH
56876: LD_VAR 0 3
56880: MINUS
56881: ST_TO_ADDR
// max_x := x + r ;
56882: LD_ADDR_VAR 0 9
56886: PUSH
56887: LD_VAR 0 1
56891: PUSH
56892: LD_VAR 0 3
56896: PLUS
56897: ST_TO_ADDR
// max_y := y + r ;
56898: LD_ADDR_VAR 0 10
56902: PUSH
56903: LD_VAR 0 2
56907: PUSH
56908: LD_VAR 0 3
56912: PLUS
56913: ST_TO_ADDR
// for _x = min_x to max_x do
56914: LD_ADDR_VAR 0 5
56918: PUSH
56919: DOUBLE
56920: LD_VAR 0 8
56924: DEC
56925: ST_TO_ADDR
56926: LD_VAR 0 9
56930: PUSH
56931: FOR_TO
56932: IFFALSE 57033
// for _y = min_y to max_y do
56934: LD_ADDR_VAR 0 6
56938: PUSH
56939: DOUBLE
56940: LD_VAR 0 7
56944: DEC
56945: ST_TO_ADDR
56946: LD_VAR 0 10
56950: PUSH
56951: FOR_TO
56952: IFFALSE 57029
// begin if not ValidHex ( _x , _y ) then
56954: LD_VAR 0 5
56958: PPUSH
56959: LD_VAR 0 6
56963: PPUSH
56964: CALL_OW 488
56968: NOT
56969: IFFALSE 56973
// continue ;
56971: GO 56951
// if GetResourceTypeXY ( _x , _y ) then
56973: LD_VAR 0 5
56977: PPUSH
56978: LD_VAR 0 6
56982: PPUSH
56983: CALL_OW 283
56987: IFFALSE 57027
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56989: LD_ADDR_VAR 0 4
56993: PUSH
56994: LD_VAR 0 4
56998: PPUSH
56999: LD_VAR 0 4
57003: PUSH
57004: LD_INT 1
57006: PLUS
57007: PPUSH
57008: LD_VAR 0 5
57012: PUSH
57013: LD_VAR 0 6
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PPUSH
57022: CALL_OW 1
57026: ST_TO_ADDR
// end ;
57027: GO 56951
57029: POP
57030: POP
57031: GO 56931
57033: POP
57034: POP
// end ;
57035: LD_VAR 0 4
57039: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57040: LD_INT 0
57042: PPUSH
57043: PPUSH
57044: PPUSH
57045: PPUSH
57046: PPUSH
57047: PPUSH
57048: PPUSH
57049: PPUSH
// if not units then
57050: LD_VAR 0 1
57054: NOT
57055: IFFALSE 57059
// exit ;
57057: GO 57587
// result := UnitFilter ( units , [ f_ok ] ) ;
57059: LD_ADDR_VAR 0 3
57063: PUSH
57064: LD_VAR 0 1
57068: PPUSH
57069: LD_INT 50
57071: PUSH
57072: EMPTY
57073: LIST
57074: PPUSH
57075: CALL_OW 72
57079: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57080: LD_ADDR_VAR 0 8
57084: PUSH
57085: LD_VAR 0 1
57089: PUSH
57090: LD_INT 1
57092: ARRAY
57093: PPUSH
57094: CALL_OW 255
57098: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57099: LD_ADDR_VAR 0 10
57103: PUSH
57104: LD_INT 29
57106: PUSH
57107: LD_INT 91
57109: PUSH
57110: LD_INT 49
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: LIST
57117: ST_TO_ADDR
// if not result then
57118: LD_VAR 0 3
57122: NOT
57123: IFFALSE 57127
// exit ;
57125: GO 57587
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57127: LD_ADDR_VAR 0 5
57131: PUSH
57132: LD_INT 81
57134: PUSH
57135: LD_VAR 0 8
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PPUSH
57144: CALL_OW 69
57148: ST_TO_ADDR
// for i in result do
57149: LD_ADDR_VAR 0 4
57153: PUSH
57154: LD_VAR 0 3
57158: PUSH
57159: FOR_IN
57160: IFFALSE 57585
// begin tag := GetTag ( i ) + 1 ;
57162: LD_ADDR_VAR 0 9
57166: PUSH
57167: LD_VAR 0 4
57171: PPUSH
57172: CALL_OW 110
57176: PUSH
57177: LD_INT 1
57179: PLUS
57180: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57181: LD_ADDR_VAR 0 7
57185: PUSH
57186: LD_VAR 0 4
57190: PPUSH
57191: CALL_OW 250
57195: PPUSH
57196: LD_VAR 0 4
57200: PPUSH
57201: CALL_OW 251
57205: PPUSH
57206: LD_INT 4
57208: PPUSH
57209: CALL 56782 0 3
57213: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57214: LD_VAR 0 4
57218: PPUSH
57219: CALL_OW 247
57223: PUSH
57224: LD_INT 2
57226: EQUAL
57227: PUSH
57228: LD_VAR 0 7
57232: PUSH
57233: LD_INT 2
57235: GREATER
57236: AND
57237: PUSH
57238: LD_VAR 0 4
57242: PPUSH
57243: CALL_OW 264
57247: PUSH
57248: LD_VAR 0 10
57252: IN
57253: NOT
57254: AND
57255: IFFALSE 57294
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57257: LD_VAR 0 4
57261: PPUSH
57262: LD_VAR 0 7
57266: PUSH
57267: LD_INT 1
57269: ARRAY
57270: PUSH
57271: LD_INT 1
57273: ARRAY
57274: PPUSH
57275: LD_VAR 0 7
57279: PUSH
57280: LD_INT 1
57282: ARRAY
57283: PUSH
57284: LD_INT 2
57286: ARRAY
57287: PPUSH
57288: CALL_OW 116
57292: GO 57583
// if path > tag then
57294: LD_VAR 0 2
57298: PUSH
57299: LD_VAR 0 9
57303: GREATER
57304: IFFALSE 57512
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57306: LD_ADDR_VAR 0 6
57310: PUSH
57311: LD_VAR 0 5
57315: PPUSH
57316: LD_INT 91
57318: PUSH
57319: LD_VAR 0 4
57323: PUSH
57324: LD_INT 8
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: LIST
57331: PPUSH
57332: CALL_OW 72
57336: ST_TO_ADDR
// if nearEnemy then
57337: LD_VAR 0 6
57341: IFFALSE 57410
// begin if GetWeapon ( i ) = ru_time_lapser then
57343: LD_VAR 0 4
57347: PPUSH
57348: CALL_OW 264
57352: PUSH
57353: LD_INT 49
57355: EQUAL
57356: IFFALSE 57384
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57358: LD_VAR 0 4
57362: PPUSH
57363: LD_VAR 0 6
57367: PPUSH
57368: LD_VAR 0 4
57372: PPUSH
57373: CALL_OW 74
57377: PPUSH
57378: CALL_OW 112
57382: GO 57408
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57384: LD_VAR 0 4
57388: PPUSH
57389: LD_VAR 0 6
57393: PPUSH
57394: LD_VAR 0 4
57398: PPUSH
57399: CALL_OW 74
57403: PPUSH
57404: CALL 58658 0 2
// end else
57408: GO 57510
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57410: LD_VAR 0 4
57414: PPUSH
57415: LD_VAR 0 2
57419: PUSH
57420: LD_VAR 0 9
57424: ARRAY
57425: PUSH
57426: LD_INT 1
57428: ARRAY
57429: PPUSH
57430: LD_VAR 0 2
57434: PUSH
57435: LD_VAR 0 9
57439: ARRAY
57440: PUSH
57441: LD_INT 2
57443: ARRAY
57444: PPUSH
57445: CALL_OW 297
57449: PUSH
57450: LD_INT 6
57452: GREATER
57453: IFFALSE 57496
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57455: LD_VAR 0 4
57459: PPUSH
57460: LD_VAR 0 2
57464: PUSH
57465: LD_VAR 0 9
57469: ARRAY
57470: PUSH
57471: LD_INT 1
57473: ARRAY
57474: PPUSH
57475: LD_VAR 0 2
57479: PUSH
57480: LD_VAR 0 9
57484: ARRAY
57485: PUSH
57486: LD_INT 2
57488: ARRAY
57489: PPUSH
57490: CALL_OW 114
57494: GO 57510
// SetTag ( i , tag ) ;
57496: LD_VAR 0 4
57500: PPUSH
57501: LD_VAR 0 9
57505: PPUSH
57506: CALL_OW 109
// end else
57510: GO 57583
// if enemy then
57512: LD_VAR 0 5
57516: IFFALSE 57583
// begin if GetWeapon ( i ) = ru_time_lapser then
57518: LD_VAR 0 4
57522: PPUSH
57523: CALL_OW 264
57527: PUSH
57528: LD_INT 49
57530: EQUAL
57531: IFFALSE 57559
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57533: LD_VAR 0 4
57537: PPUSH
57538: LD_VAR 0 5
57542: PPUSH
57543: LD_VAR 0 4
57547: PPUSH
57548: CALL_OW 74
57552: PPUSH
57553: CALL_OW 112
57557: GO 57583
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57559: LD_VAR 0 4
57563: PPUSH
57564: LD_VAR 0 5
57568: PPUSH
57569: LD_VAR 0 4
57573: PPUSH
57574: CALL_OW 74
57578: PPUSH
57579: CALL 58658 0 2
// end ; end ;
57583: GO 57159
57585: POP
57586: POP
// end ;
57587: LD_VAR 0 3
57591: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57592: LD_INT 0
57594: PPUSH
57595: PPUSH
57596: PPUSH
// if not unit or IsInUnit ( unit ) then
57597: LD_VAR 0 1
57601: NOT
57602: PUSH
57603: LD_VAR 0 1
57607: PPUSH
57608: CALL_OW 310
57612: OR
57613: IFFALSE 57617
// exit ;
57615: GO 57708
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57617: LD_ADDR_VAR 0 4
57621: PUSH
57622: LD_VAR 0 1
57626: PPUSH
57627: CALL_OW 250
57631: PPUSH
57632: LD_VAR 0 2
57636: PPUSH
57637: LD_INT 1
57639: PPUSH
57640: CALL_OW 272
57644: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57645: LD_ADDR_VAR 0 5
57649: PUSH
57650: LD_VAR 0 1
57654: PPUSH
57655: CALL_OW 251
57659: PPUSH
57660: LD_VAR 0 2
57664: PPUSH
57665: LD_INT 1
57667: PPUSH
57668: CALL_OW 273
57672: ST_TO_ADDR
// if ValidHex ( x , y ) then
57673: LD_VAR 0 4
57677: PPUSH
57678: LD_VAR 0 5
57682: PPUSH
57683: CALL_OW 488
57687: IFFALSE 57708
// ComTurnXY ( unit , x , y ) ;
57689: LD_VAR 0 1
57693: PPUSH
57694: LD_VAR 0 4
57698: PPUSH
57699: LD_VAR 0 5
57703: PPUSH
57704: CALL_OW 118
// end ;
57708: LD_VAR 0 3
57712: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57713: LD_INT 0
57715: PPUSH
57716: PPUSH
// result := false ;
57717: LD_ADDR_VAR 0 3
57721: PUSH
57722: LD_INT 0
57724: ST_TO_ADDR
// if not units then
57725: LD_VAR 0 2
57729: NOT
57730: IFFALSE 57734
// exit ;
57732: GO 57779
// for i in units do
57734: LD_ADDR_VAR 0 4
57738: PUSH
57739: LD_VAR 0 2
57743: PUSH
57744: FOR_IN
57745: IFFALSE 57777
// if See ( side , i ) then
57747: LD_VAR 0 1
57751: PPUSH
57752: LD_VAR 0 4
57756: PPUSH
57757: CALL_OW 292
57761: IFFALSE 57775
// begin result := true ;
57763: LD_ADDR_VAR 0 3
57767: PUSH
57768: LD_INT 1
57770: ST_TO_ADDR
// exit ;
57771: POP
57772: POP
57773: GO 57779
// end ;
57775: GO 57744
57777: POP
57778: POP
// end ;
57779: LD_VAR 0 3
57783: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57784: LD_INT 0
57786: PPUSH
57787: PPUSH
57788: PPUSH
57789: PPUSH
// if not unit or not points then
57790: LD_VAR 0 1
57794: NOT
57795: PUSH
57796: LD_VAR 0 2
57800: NOT
57801: OR
57802: IFFALSE 57806
// exit ;
57804: GO 57896
// dist := 99999 ;
57806: LD_ADDR_VAR 0 5
57810: PUSH
57811: LD_INT 99999
57813: ST_TO_ADDR
// for i in points do
57814: LD_ADDR_VAR 0 4
57818: PUSH
57819: LD_VAR 0 2
57823: PUSH
57824: FOR_IN
57825: IFFALSE 57894
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57827: LD_ADDR_VAR 0 6
57831: PUSH
57832: LD_VAR 0 1
57836: PPUSH
57837: LD_VAR 0 4
57841: PUSH
57842: LD_INT 1
57844: ARRAY
57845: PPUSH
57846: LD_VAR 0 4
57850: PUSH
57851: LD_INT 2
57853: ARRAY
57854: PPUSH
57855: CALL_OW 297
57859: ST_TO_ADDR
// if tmpDist < dist then
57860: LD_VAR 0 6
57864: PUSH
57865: LD_VAR 0 5
57869: LESS
57870: IFFALSE 57892
// begin result := i ;
57872: LD_ADDR_VAR 0 3
57876: PUSH
57877: LD_VAR 0 4
57881: ST_TO_ADDR
// dist := tmpDist ;
57882: LD_ADDR_VAR 0 5
57886: PUSH
57887: LD_VAR 0 6
57891: ST_TO_ADDR
// end ; end ;
57892: GO 57824
57894: POP
57895: POP
// end ;
57896: LD_VAR 0 3
57900: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57901: LD_INT 0
57903: PPUSH
// uc_side := side ;
57904: LD_ADDR_OWVAR 20
57908: PUSH
57909: LD_VAR 0 1
57913: ST_TO_ADDR
// uc_nation := 3 ;
57914: LD_ADDR_OWVAR 21
57918: PUSH
57919: LD_INT 3
57921: ST_TO_ADDR
// vc_chassis := 25 ;
57922: LD_ADDR_OWVAR 37
57926: PUSH
57927: LD_INT 25
57929: ST_TO_ADDR
// vc_engine := engine_siberite ;
57930: LD_ADDR_OWVAR 39
57934: PUSH
57935: LD_INT 3
57937: ST_TO_ADDR
// vc_control := control_computer ;
57938: LD_ADDR_OWVAR 38
57942: PUSH
57943: LD_INT 3
57945: ST_TO_ADDR
// vc_weapon := 59 ;
57946: LD_ADDR_OWVAR 40
57950: PUSH
57951: LD_INT 59
57953: ST_TO_ADDR
// result := CreateVehicle ;
57954: LD_ADDR_VAR 0 5
57958: PUSH
57959: CALL_OW 45
57963: ST_TO_ADDR
// SetDir ( result , d ) ;
57964: LD_VAR 0 5
57968: PPUSH
57969: LD_VAR 0 4
57973: PPUSH
57974: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57978: LD_VAR 0 5
57982: PPUSH
57983: LD_VAR 0 2
57987: PPUSH
57988: LD_VAR 0 3
57992: PPUSH
57993: LD_INT 0
57995: PPUSH
57996: CALL_OW 48
// end ;
58000: LD_VAR 0 5
58004: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58005: LD_INT 0
58007: PPUSH
58008: PPUSH
58009: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58010: LD_ADDR_VAR 0 2
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58033: LD_VAR 0 1
58037: NOT
58038: PUSH
58039: LD_VAR 0 1
58043: PPUSH
58044: CALL_OW 264
58048: PUSH
58049: LD_INT 12
58051: PUSH
58052: LD_INT 51
58054: PUSH
58055: LD_INT 32
58057: PUSH
58058: LD_INT 89
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: IN
58067: NOT
58068: OR
58069: IFFALSE 58073
// exit ;
58071: GO 58171
// for i := 1 to 3 do
58073: LD_ADDR_VAR 0 3
58077: PUSH
58078: DOUBLE
58079: LD_INT 1
58081: DEC
58082: ST_TO_ADDR
58083: LD_INT 3
58085: PUSH
58086: FOR_TO
58087: IFFALSE 58169
// begin tmp := GetCargo ( cargo , i ) ;
58089: LD_ADDR_VAR 0 4
58093: PUSH
58094: LD_VAR 0 1
58098: PPUSH
58099: LD_VAR 0 3
58103: PPUSH
58104: CALL_OW 289
58108: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58109: LD_ADDR_VAR 0 2
58113: PUSH
58114: LD_VAR 0 2
58118: PPUSH
58119: LD_VAR 0 3
58123: PPUSH
58124: LD_VAR 0 4
58128: PPUSH
58129: CALL_OW 1
58133: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58134: LD_ADDR_VAR 0 2
58138: PUSH
58139: LD_VAR 0 2
58143: PPUSH
58144: LD_INT 4
58146: PPUSH
58147: LD_VAR 0 2
58151: PUSH
58152: LD_INT 4
58154: ARRAY
58155: PUSH
58156: LD_VAR 0 4
58160: PLUS
58161: PPUSH
58162: CALL_OW 1
58166: ST_TO_ADDR
// end ;
58167: GO 58086
58169: POP
58170: POP
// end ;
58171: LD_VAR 0 2
58175: RET
// export function Length ( array ) ; begin
58176: LD_INT 0
58178: PPUSH
// result := array + 0 ;
58179: LD_ADDR_VAR 0 2
58183: PUSH
58184: LD_VAR 0 1
58188: PUSH
58189: LD_INT 0
58191: PLUS
58192: ST_TO_ADDR
// end ;
58193: LD_VAR 0 2
58197: RET
// export function PrepareArray ( array ) ; begin
58198: LD_INT 0
58200: PPUSH
// result := array diff 0 ;
58201: LD_ADDR_VAR 0 2
58205: PUSH
58206: LD_VAR 0 1
58210: PUSH
58211: LD_INT 0
58213: DIFF
58214: ST_TO_ADDR
// if not result [ 1 ] then
58215: LD_VAR 0 2
58219: PUSH
58220: LD_INT 1
58222: ARRAY
58223: NOT
58224: IFFALSE 58244
// result := Delete ( result , 1 ) ;
58226: LD_ADDR_VAR 0 2
58230: PUSH
58231: LD_VAR 0 2
58235: PPUSH
58236: LD_INT 1
58238: PPUSH
58239: CALL_OW 3
58243: ST_TO_ADDR
// end ;
58244: LD_VAR 0 2
58248: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58249: LD_INT 0
58251: PPUSH
58252: PPUSH
58253: PPUSH
58254: PPUSH
// sibRocketRange := 25 ;
58255: LD_ADDR_VAR 0 6
58259: PUSH
58260: LD_INT 25
58262: ST_TO_ADDR
// result := false ;
58263: LD_ADDR_VAR 0 4
58267: PUSH
58268: LD_INT 0
58270: ST_TO_ADDR
// for i := 0 to 5 do
58271: LD_ADDR_VAR 0 5
58275: PUSH
58276: DOUBLE
58277: LD_INT 0
58279: DEC
58280: ST_TO_ADDR
58281: LD_INT 5
58283: PUSH
58284: FOR_TO
58285: IFFALSE 58352
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58287: LD_VAR 0 1
58291: PPUSH
58292: LD_VAR 0 5
58296: PPUSH
58297: LD_VAR 0 6
58301: PPUSH
58302: CALL_OW 272
58306: PPUSH
58307: LD_VAR 0 2
58311: PPUSH
58312: LD_VAR 0 5
58316: PPUSH
58317: LD_VAR 0 6
58321: PPUSH
58322: CALL_OW 273
58326: PPUSH
58327: LD_VAR 0 3
58331: PPUSH
58332: CALL_OW 309
58336: IFFALSE 58350
// begin result := true ;
58338: LD_ADDR_VAR 0 4
58342: PUSH
58343: LD_INT 1
58345: ST_TO_ADDR
// exit ;
58346: POP
58347: POP
58348: GO 58354
// end ;
58350: GO 58284
58352: POP
58353: POP
// end ;
58354: LD_VAR 0 4
58358: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58359: LD_INT 0
58361: PPUSH
58362: PPUSH
58363: PPUSH
// if btype = b_depot then
58364: LD_VAR 0 2
58368: PUSH
58369: LD_INT 0
58371: EQUAL
58372: IFFALSE 58384
// begin result := true ;
58374: LD_ADDR_VAR 0 3
58378: PUSH
58379: LD_INT 1
58381: ST_TO_ADDR
// exit ;
58382: GO 58500
// end ; pom := GetBase ( depot ) ;
58384: LD_ADDR_VAR 0 4
58388: PUSH
58389: LD_VAR 0 1
58393: PPUSH
58394: CALL_OW 274
58398: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58399: LD_ADDR_VAR 0 5
58403: PUSH
58404: LD_VAR 0 2
58408: PPUSH
58409: LD_VAR 0 1
58413: PPUSH
58414: CALL_OW 248
58418: PPUSH
58419: CALL_OW 450
58423: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58424: LD_ADDR_VAR 0 3
58428: PUSH
58429: LD_VAR 0 4
58433: PPUSH
58434: LD_INT 1
58436: PPUSH
58437: CALL_OW 275
58441: PUSH
58442: LD_VAR 0 5
58446: PUSH
58447: LD_INT 1
58449: ARRAY
58450: GREATEREQUAL
58451: PUSH
58452: LD_VAR 0 4
58456: PPUSH
58457: LD_INT 2
58459: PPUSH
58460: CALL_OW 275
58464: PUSH
58465: LD_VAR 0 5
58469: PUSH
58470: LD_INT 2
58472: ARRAY
58473: GREATEREQUAL
58474: AND
58475: PUSH
58476: LD_VAR 0 4
58480: PPUSH
58481: LD_INT 3
58483: PPUSH
58484: CALL_OW 275
58488: PUSH
58489: LD_VAR 0 5
58493: PUSH
58494: LD_INT 3
58496: ARRAY
58497: GREATEREQUAL
58498: AND
58499: ST_TO_ADDR
// end ;
58500: LD_VAR 0 3
58504: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58505: LD_INT 0
58507: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58508: LD_VAR 0 1
58512: PPUSH
58513: LD_VAR 0 2
58517: PPUSH
58518: LD_INT 0
58520: PPUSH
58521: LD_INT 0
58523: PPUSH
58524: LD_INT 1
58526: PPUSH
58527: LD_INT 0
58529: PPUSH
58530: CALL_OW 587
// end ;
58534: LD_VAR 0 3
58538: RET
// export function CenterOnNow ( unit ) ; begin
58539: LD_INT 0
58541: PPUSH
// result := IsInUnit ( unit ) ;
58542: LD_ADDR_VAR 0 2
58546: PUSH
58547: LD_VAR 0 1
58551: PPUSH
58552: CALL_OW 310
58556: ST_TO_ADDR
// if not result then
58557: LD_VAR 0 2
58561: NOT
58562: IFFALSE 58574
// result := unit ;
58564: LD_ADDR_VAR 0 2
58568: PUSH
58569: LD_VAR 0 1
58573: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58574: LD_VAR 0 1
58578: PPUSH
58579: CALL_OW 87
// end ;
58583: LD_VAR 0 2
58587: RET
// export function ComMoveHex ( unit , hex ) ; begin
58588: LD_INT 0
58590: PPUSH
// if not hex then
58591: LD_VAR 0 2
58595: NOT
58596: IFFALSE 58600
// exit ;
58598: GO 58653
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58600: LD_VAR 0 2
58604: PUSH
58605: LD_INT 1
58607: ARRAY
58608: PPUSH
58609: LD_VAR 0 2
58613: PUSH
58614: LD_INT 2
58616: ARRAY
58617: PPUSH
58618: CALL_OW 428
58622: IFFALSE 58626
// exit ;
58624: GO 58653
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58626: LD_VAR 0 1
58630: PPUSH
58631: LD_VAR 0 2
58635: PUSH
58636: LD_INT 1
58638: ARRAY
58639: PPUSH
58640: LD_VAR 0 2
58644: PUSH
58645: LD_INT 2
58647: ARRAY
58648: PPUSH
58649: CALL_OW 111
// end ;
58653: LD_VAR 0 3
58657: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58658: LD_INT 0
58660: PPUSH
58661: PPUSH
58662: PPUSH
// if not unit or not enemy then
58663: LD_VAR 0 1
58667: NOT
58668: PUSH
58669: LD_VAR 0 2
58673: NOT
58674: OR
58675: IFFALSE 58679
// exit ;
58677: GO 58803
// x := GetX ( enemy ) ;
58679: LD_ADDR_VAR 0 4
58683: PUSH
58684: LD_VAR 0 2
58688: PPUSH
58689: CALL_OW 250
58693: ST_TO_ADDR
// y := GetY ( enemy ) ;
58694: LD_ADDR_VAR 0 5
58698: PUSH
58699: LD_VAR 0 2
58703: PPUSH
58704: CALL_OW 251
58708: ST_TO_ADDR
// if ValidHex ( x , y ) then
58709: LD_VAR 0 4
58713: PPUSH
58714: LD_VAR 0 5
58718: PPUSH
58719: CALL_OW 488
58723: IFFALSE 58803
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58725: LD_VAR 0 2
58729: PPUSH
58730: CALL_OW 247
58734: PUSH
58735: LD_INT 3
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: IN
58745: PUSH
58746: LD_VAR 0 1
58750: PPUSH
58751: CALL_OW 255
58755: PPUSH
58756: LD_VAR 0 2
58760: PPUSH
58761: CALL_OW 292
58765: OR
58766: IFFALSE 58784
// ComAttackUnit ( unit , enemy ) else
58768: LD_VAR 0 1
58772: PPUSH
58773: LD_VAR 0 2
58777: PPUSH
58778: CALL_OW 115
58782: GO 58803
// ComAgressiveMove ( unit , x , y ) ;
58784: LD_VAR 0 1
58788: PPUSH
58789: LD_VAR 0 4
58793: PPUSH
58794: LD_VAR 0 5
58798: PPUSH
58799: CALL_OW 114
// end ;
58803: LD_VAR 0 3
58807: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58808: LD_INT 0
58810: PPUSH
58811: PPUSH
58812: PPUSH
// list := AreaToList ( area , 0 ) ;
58813: LD_ADDR_VAR 0 5
58817: PUSH
58818: LD_VAR 0 1
58822: PPUSH
58823: LD_INT 0
58825: PPUSH
58826: CALL_OW 517
58830: ST_TO_ADDR
// if not list then
58831: LD_VAR 0 5
58835: NOT
58836: IFFALSE 58840
// exit ;
58838: GO 58970
// if all then
58840: LD_VAR 0 2
58844: IFFALSE 58932
// begin for i := 1 to list [ 1 ] do
58846: LD_ADDR_VAR 0 4
58850: PUSH
58851: DOUBLE
58852: LD_INT 1
58854: DEC
58855: ST_TO_ADDR
58856: LD_VAR 0 5
58860: PUSH
58861: LD_INT 1
58863: ARRAY
58864: PUSH
58865: FOR_TO
58866: IFFALSE 58928
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58868: LD_ADDR_VAR 0 3
58872: PUSH
58873: LD_VAR 0 3
58877: PPUSH
58878: LD_VAR 0 3
58882: PUSH
58883: LD_INT 1
58885: PLUS
58886: PPUSH
58887: LD_VAR 0 5
58891: PUSH
58892: LD_INT 1
58894: ARRAY
58895: PUSH
58896: LD_VAR 0 4
58900: ARRAY
58901: PUSH
58902: LD_VAR 0 5
58906: PUSH
58907: LD_INT 2
58909: ARRAY
58910: PUSH
58911: LD_VAR 0 4
58915: ARRAY
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PPUSH
58921: CALL_OW 1
58925: ST_TO_ADDR
58926: GO 58865
58928: POP
58929: POP
// exit ;
58930: GO 58970
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58932: LD_ADDR_VAR 0 3
58936: PUSH
58937: LD_VAR 0 5
58941: PUSH
58942: LD_INT 1
58944: ARRAY
58945: PUSH
58946: LD_INT 1
58948: ARRAY
58949: PUSH
58950: LD_VAR 0 5
58954: PUSH
58955: LD_INT 2
58957: ARRAY
58958: PUSH
58959: LD_INT 1
58961: ARRAY
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: EMPTY
58968: LIST
58969: ST_TO_ADDR
// end ;
58970: LD_VAR 0 3
58974: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58975: LD_INT 0
58977: PPUSH
58978: PPUSH
// list := AreaToList ( area , 0 ) ;
58979: LD_ADDR_VAR 0 4
58983: PUSH
58984: LD_VAR 0 1
58988: PPUSH
58989: LD_INT 0
58991: PPUSH
58992: CALL_OW 517
58996: ST_TO_ADDR
// if not list then
58997: LD_VAR 0 4
59001: NOT
59002: IFFALSE 59006
// exit ;
59004: GO 59047
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59006: LD_ADDR_VAR 0 3
59010: PUSH
59011: LD_VAR 0 4
59015: PUSH
59016: LD_INT 1
59018: ARRAY
59019: PUSH
59020: LD_INT 1
59022: ARRAY
59023: PUSH
59024: LD_VAR 0 4
59028: PUSH
59029: LD_INT 2
59031: ARRAY
59032: PUSH
59033: LD_INT 1
59035: ARRAY
59036: PUSH
59037: LD_VAR 0 2
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: LIST
59046: ST_TO_ADDR
// end ;
59047: LD_VAR 0 3
59051: RET
// export function First ( array ) ; begin
59052: LD_INT 0
59054: PPUSH
// if not array then
59055: LD_VAR 0 1
59059: NOT
59060: IFFALSE 59064
// exit ;
59062: GO 59078
// result := array [ 1 ] ;
59064: LD_ADDR_VAR 0 2
59068: PUSH
59069: LD_VAR 0 1
59073: PUSH
59074: LD_INT 1
59076: ARRAY
59077: ST_TO_ADDR
// end ;
59078: LD_VAR 0 2
59082: RET
// export function Last ( array ) ; begin
59083: LD_INT 0
59085: PPUSH
// if not array then
59086: LD_VAR 0 1
59090: NOT
59091: IFFALSE 59095
// exit ;
59093: GO 59111
// result := array [ array ] ;
59095: LD_ADDR_VAR 0 2
59099: PUSH
59100: LD_VAR 0 1
59104: PUSH
59105: LD_VAR 0 1
59109: ARRAY
59110: ST_TO_ADDR
// end ;
59111: LD_VAR 0 2
59115: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59116: LD_INT 0
59118: PPUSH
59119: PPUSH
// result := [ ] ;
59120: LD_ADDR_VAR 0 5
59124: PUSH
59125: EMPTY
59126: ST_TO_ADDR
// if not array then
59127: LD_VAR 0 1
59131: NOT
59132: IFFALSE 59136
// exit ;
59134: GO 59248
// for i := 1 to array do
59136: LD_ADDR_VAR 0 6
59140: PUSH
59141: DOUBLE
59142: LD_INT 1
59144: DEC
59145: ST_TO_ADDR
59146: LD_VAR 0 1
59150: PUSH
59151: FOR_TO
59152: IFFALSE 59246
// if array [ i ] [ index ] = value then
59154: LD_VAR 0 1
59158: PUSH
59159: LD_VAR 0 6
59163: ARRAY
59164: PUSH
59165: LD_VAR 0 2
59169: ARRAY
59170: PUSH
59171: LD_VAR 0 3
59175: EQUAL
59176: IFFALSE 59244
// begin if indexColumn then
59178: LD_VAR 0 4
59182: IFFALSE 59218
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59184: LD_ADDR_VAR 0 5
59188: PUSH
59189: LD_VAR 0 5
59193: PPUSH
59194: LD_VAR 0 1
59198: PUSH
59199: LD_VAR 0 6
59203: ARRAY
59204: PUSH
59205: LD_VAR 0 4
59209: ARRAY
59210: PPUSH
59211: CALL 54430 0 2
59215: ST_TO_ADDR
59216: GO 59244
// result := Join ( result , array [ i ] ) ;
59218: LD_ADDR_VAR 0 5
59222: PUSH
59223: LD_VAR 0 5
59227: PPUSH
59228: LD_VAR 0 1
59232: PUSH
59233: LD_VAR 0 6
59237: ARRAY
59238: PPUSH
59239: CALL 54430 0 2
59243: ST_TO_ADDR
// end ;
59244: GO 59151
59246: POP
59247: POP
// end ;
59248: LD_VAR 0 5
59252: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59253: LD_INT 0
59255: PPUSH
// if not vehicles or not parkingPoint then
59256: LD_VAR 0 1
59260: NOT
59261: PUSH
59262: LD_VAR 0 2
59266: NOT
59267: OR
59268: IFFALSE 59272
// exit ;
59270: GO 59370
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59272: LD_ADDR_VAR 0 1
59276: PUSH
59277: LD_VAR 0 1
59281: PPUSH
59282: LD_INT 50
59284: PUSH
59285: EMPTY
59286: LIST
59287: PUSH
59288: LD_INT 3
59290: PUSH
59291: LD_INT 92
59293: PUSH
59294: LD_VAR 0 2
59298: PUSH
59299: LD_INT 1
59301: ARRAY
59302: PUSH
59303: LD_VAR 0 2
59307: PUSH
59308: LD_INT 2
59310: ARRAY
59311: PUSH
59312: LD_INT 8
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PPUSH
59329: CALL_OW 72
59333: ST_TO_ADDR
// if not vehicles then
59334: LD_VAR 0 1
59338: NOT
59339: IFFALSE 59343
// exit ;
59341: GO 59370
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59343: LD_VAR 0 1
59347: PPUSH
59348: LD_VAR 0 2
59352: PUSH
59353: LD_INT 1
59355: ARRAY
59356: PPUSH
59357: LD_VAR 0 2
59361: PUSH
59362: LD_INT 2
59364: ARRAY
59365: PPUSH
59366: CALL_OW 111
// end ;
59370: LD_VAR 0 3
59374: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59375: LD_INT 0
59377: PPUSH
59378: PPUSH
59379: PPUSH
// if not side or not area then
59380: LD_VAR 0 1
59384: NOT
59385: PUSH
59386: LD_VAR 0 2
59390: NOT
59391: OR
59392: IFFALSE 59396
// exit ;
59394: GO 59515
// tmp := AreaToList ( area , 0 ) ;
59396: LD_ADDR_VAR 0 5
59400: PUSH
59401: LD_VAR 0 2
59405: PPUSH
59406: LD_INT 0
59408: PPUSH
59409: CALL_OW 517
59413: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59414: LD_ADDR_VAR 0 4
59418: PUSH
59419: DOUBLE
59420: LD_INT 1
59422: DEC
59423: ST_TO_ADDR
59424: LD_VAR 0 5
59428: PUSH
59429: LD_INT 1
59431: ARRAY
59432: PUSH
59433: FOR_TO
59434: IFFALSE 59513
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59436: LD_VAR 0 5
59440: PUSH
59441: LD_INT 1
59443: ARRAY
59444: PUSH
59445: LD_VAR 0 4
59449: ARRAY
59450: PPUSH
59451: LD_VAR 0 5
59455: PUSH
59456: LD_INT 2
59458: ARRAY
59459: PUSH
59460: LD_VAR 0 4
59464: ARRAY
59465: PPUSH
59466: CALL_OW 351
59470: IFFALSE 59511
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59472: LD_VAR 0 5
59476: PUSH
59477: LD_INT 1
59479: ARRAY
59480: PUSH
59481: LD_VAR 0 4
59485: ARRAY
59486: PPUSH
59487: LD_VAR 0 5
59491: PUSH
59492: LD_INT 2
59494: ARRAY
59495: PUSH
59496: LD_VAR 0 4
59500: ARRAY
59501: PPUSH
59502: LD_VAR 0 1
59506: PPUSH
59507: CALL_OW 244
// end ;
59511: GO 59433
59513: POP
59514: POP
// end ; end_of_file
59515: LD_VAR 0 3
59519: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59520: PPOPN 6
59522: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
59523: LD_EXP 1
59527: PUSH
59528: LD_INT 4
59530: EQUAL
59531: IFFALSE 59567
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59533: LD_STRING setGameDifficulty(
59535: PUSH
59536: LD_OWVAR 67
59540: STR
59541: PUSH
59542: LD_STRING )
59544: STR
59545: PPUSH
59546: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59550: LD_STRING displayDifficulty(
59552: PUSH
59553: LD_OWVAR 67
59557: STR
59558: PUSH
59559: LD_STRING )
59561: STR
59562: PPUSH
59563: CALL_OW 559
// end ; SOS_MapStart ( ) ;
59567: CALL 59596 0 0
// end ; end_of_file
59571: PPOPN 1
59573: END
// every 0 0$1 do
59574: GO 59576
59576: DISABLE
// begin enable ;
59577: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59578: LD_STRING updateTimer(
59580: PUSH
59581: LD_OWVAR 1
59585: STR
59586: PUSH
59587: LD_STRING );
59589: STR
59590: PPUSH
59591: CALL_OW 559
// end ;
59595: END
// export function SOS_MapStart ( ) ; begin
59596: LD_INT 0
59598: PPUSH
// UpdateFactoryWaypoints ( ) ;
59599: CALL 60524 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59603: CALL 60776 0 0
// ParseMultiDataToLua ( ) ;
59607: CALL 60923 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
59611: LD_STRING setSpecLogoNumber(
59613: PUSH
59614: LD_INT 2
59616: STR
59617: PUSH
59618: LD_STRING ,
59620: STR
59621: PUSH
59622: LD_INT 1
59624: STR
59625: PUSH
59626: LD_STRING )
59628: STR
59629: PPUSH
59630: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
59634: LD_STRING setSpecLogoNumber(
59636: PUSH
59637: LD_INT 3
59639: STR
59640: PUSH
59641: LD_STRING ,
59643: STR
59644: PUSH
59645: LD_INT 2
59647: STR
59648: PUSH
59649: LD_STRING )
59651: STR
59652: PPUSH
59653: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
59657: LD_STRING setSpecLogoNumber(
59659: PUSH
59660: LD_INT 4
59662: STR
59663: PUSH
59664: LD_STRING ,
59666: STR
59667: PUSH
59668: LD_INT 3
59670: STR
59671: PUSH
59672: LD_STRING )
59674: STR
59675: PPUSH
59676: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
59680: LD_STRING setSpecLogoNumber(
59682: PUSH
59683: LD_INT 5
59685: STR
59686: PUSH
59687: LD_STRING ,
59689: STR
59690: PUSH
59691: LD_INT 4
59693: STR
59694: PUSH
59695: LD_STRING )
59697: STR
59698: PPUSH
59699: CALL_OW 559
// end ;
59703: LD_VAR 0 1
59707: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
59708: LD_INT 0
59710: PPUSH
59711: PPUSH
59712: PPUSH
59713: PPUSH
59714: PPUSH
59715: PPUSH
59716: PPUSH
59717: PPUSH
59718: PPUSH
// for i := 1 to 8 do
59719: LD_ADDR_VAR 0 2
59723: PUSH
59724: DOUBLE
59725: LD_INT 1
59727: DEC
59728: ST_TO_ADDR
59729: LD_INT 8
59731: PUSH
59732: FOR_TO
59733: IFFALSE 60118
// begin if mpSidePositions [ i ] then
59735: LD_EXP 5
59739: PUSH
59740: LD_VAR 0 2
59744: ARRAY
59745: IFFALSE 60116
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
59747: LD_ADDR_VAR 0 7
59751: PUSH
59752: LD_INT 22
59754: PUSH
59755: LD_VAR 0 2
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 21
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PPUSH
59778: CALL_OW 69
59782: PPUSH
59783: CALL 18821 0 1
59787: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59788: LD_ADDR_VAR 0 9
59792: PUSH
59793: LD_INT 22
59795: PUSH
59796: LD_VAR 0 2
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 2
59807: PUSH
59808: LD_INT 30
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 30
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: LIST
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PPUSH
59837: CALL_OW 69
59841: ST_TO_ADDR
// crates := 0 ;
59842: LD_ADDR_VAR 0 4
59846: PUSH
59847: LD_INT 0
59849: ST_TO_ADDR
// oil := 0 ;
59850: LD_ADDR_VAR 0 5
59854: PUSH
59855: LD_INT 0
59857: ST_TO_ADDR
// sib := 0 ;
59858: LD_ADDR_VAR 0 6
59862: PUSH
59863: LD_INT 0
59865: ST_TO_ADDR
// if bases then
59866: LD_VAR 0 9
59870: IFFALSE 59976
// begin for j in bases do
59872: LD_ADDR_VAR 0 3
59876: PUSH
59877: LD_VAR 0 9
59881: PUSH
59882: FOR_IN
59883: IFFALSE 59974
// begin base := GetBase ( j ) ;
59885: LD_ADDR_VAR 0 8
59889: PUSH
59890: LD_VAR 0 3
59894: PPUSH
59895: CALL_OW 274
59899: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
59900: LD_ADDR_VAR 0 4
59904: PUSH
59905: LD_VAR 0 4
59909: PUSH
59910: LD_VAR 0 8
59914: PPUSH
59915: LD_INT 1
59917: PPUSH
59918: CALL_OW 275
59922: PLUS
59923: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
59924: LD_ADDR_VAR 0 5
59928: PUSH
59929: LD_VAR 0 5
59933: PUSH
59934: LD_VAR 0 8
59938: PPUSH
59939: LD_INT 2
59941: PPUSH
59942: CALL_OW 275
59946: PLUS
59947: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
59948: LD_ADDR_VAR 0 6
59952: PUSH
59953: LD_VAR 0 6
59957: PUSH
59958: LD_VAR 0 8
59962: PPUSH
59963: LD_INT 3
59965: PPUSH
59966: CALL_OW 275
59970: PLUS
59971: ST_TO_ADDR
// end ;
59972: GO 59882
59974: POP
59975: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
59976: LD_STRING setSpecText(
59978: PUSH
59979: LD_VAR 0 2
59983: STR
59984: PUSH
59985: LD_STRING ,
59987: STR
59988: PUSH
59989: LD_INT 2
59991: STR
59992: PUSH
59993: LD_STRING ,
59995: STR
59996: PUSH
59997: LD_VAR 0 4
60001: STR
60002: PUSH
60003: LD_STRING )
60005: STR
60006: PPUSH
60007: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
60011: LD_STRING setSpecText(
60013: PUSH
60014: LD_VAR 0 2
60018: STR
60019: PUSH
60020: LD_STRING ,
60022: STR
60023: PUSH
60024: LD_INT 3
60026: STR
60027: PUSH
60028: LD_STRING ,
60030: STR
60031: PUSH
60032: LD_VAR 0 5
60036: STR
60037: PUSH
60038: LD_STRING )
60040: STR
60041: PPUSH
60042: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
60046: LD_STRING setSpecText(
60048: PUSH
60049: LD_VAR 0 2
60053: STR
60054: PUSH
60055: LD_STRING ,
60057: STR
60058: PUSH
60059: LD_INT 4
60061: STR
60062: PUSH
60063: LD_STRING ,
60065: STR
60066: PUSH
60067: LD_VAR 0 6
60071: STR
60072: PUSH
60073: LD_STRING )
60075: STR
60076: PPUSH
60077: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
60081: LD_STRING setSpecText(
60083: PUSH
60084: LD_VAR 0 2
60088: STR
60089: PUSH
60090: LD_STRING ,
60092: STR
60093: PUSH
60094: LD_INT 5
60096: STR
60097: PUSH
60098: LD_STRING ,
60100: STR
60101: PUSH
60102: LD_VAR 0 7
60106: STR
60107: PUSH
60108: LD_STRING )
60110: STR
60111: PPUSH
60112: CALL_OW 559
// end ; end ;
60116: GO 59732
60118: POP
60119: POP
// end ;
60120: LD_VAR 0 1
60124: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
60125: LD_INT 2
60127: PUSH
60128: LD_INT 30
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 30
60140: PUSH
60141: LD_INT 1
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: LIST
60152: PPUSH
60153: CALL_OW 69
60157: IFFALSE 60167
60159: GO 60161
60161: DISABLE
// begin enable ;
60162: ENABLE
// UpdateSpectatorBar ;
60163: CALL 59708 0 0
// end ;
60167: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60168: LD_INT 0
60170: PPUSH
// end ;
60171: LD_VAR 0 12
60175: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
60176: LD_INT 0
60178: PPUSH
60179: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
60180: LD_VAR 0 1
60184: NOT
60185: PUSH
60186: LD_VAR 0 2
60190: PPUSH
60191: LD_VAR 0 3
60195: PPUSH
60196: CALL_OW 488
60200: NOT
60201: OR
60202: PUSH
60203: LD_VAR 0 1
60207: PPUSH
60208: CALL_OW 266
60212: PUSH
60213: LD_INT 3
60215: NONEQUAL
60216: PUSH
60217: LD_VAR 0 1
60221: PPUSH
60222: CALL_OW 247
60226: PUSH
60227: LD_INT 1
60229: EQUAL
60230: NOT
60231: AND
60232: OR
60233: IFFALSE 60237
// exit ;
60235: GO 60519
// if GetType ( factory ) = unit_human then
60237: LD_VAR 0 1
60241: PPUSH
60242: CALL_OW 247
60246: PUSH
60247: LD_INT 1
60249: EQUAL
60250: IFFALSE 60267
// factory := IsInUnit ( factory ) ;
60252: LD_ADDR_VAR 0 1
60256: PUSH
60257: LD_VAR 0 1
60261: PPUSH
60262: CALL_OW 310
60266: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60267: LD_VAR 0 1
60271: PPUSH
60272: CALL_OW 266
60276: PUSH
60277: LD_INT 3
60279: NONEQUAL
60280: IFFALSE 60284
// exit ;
60282: GO 60519
// for i := 1 to Count ( factoryWaypoints ) do
60284: LD_ADDR_VAR 0 5
60288: PUSH
60289: DOUBLE
60290: LD_INT 1
60292: DEC
60293: ST_TO_ADDR
60294: LD_EXP 53
60298: PPUSH
60299: CALL 18821 0 1
60303: PUSH
60304: FOR_TO
60305: IFFALSE 60467
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
60307: LD_VAR 0 2
60311: PPUSH
60312: LD_VAR 0 3
60316: PPUSH
60317: CALL_OW 428
60321: PUSH
60322: LD_EXP 53
60326: PUSH
60327: LD_VAR 0 5
60331: ARRAY
60332: PUSH
60333: LD_INT 2
60335: ARRAY
60336: EQUAL
60337: IFFALSE 60369
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60339: LD_ADDR_EXP 53
60343: PUSH
60344: LD_EXP 53
60348: PPUSH
60349: LD_VAR 0 5
60353: PPUSH
60354: CALL_OW 3
60358: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60359: CALL 60524 0 0
// exit ;
60363: POP
60364: POP
60365: GO 60519
// end else
60367: GO 60465
// if factory = factoryWaypoints [ i ] [ 2 ] then
60369: LD_VAR 0 1
60373: PUSH
60374: LD_EXP 53
60378: PUSH
60379: LD_VAR 0 5
60383: ARRAY
60384: PUSH
60385: LD_INT 2
60387: ARRAY
60388: EQUAL
60389: IFFALSE 60465
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60391: LD_ADDR_EXP 53
60395: PUSH
60396: LD_EXP 53
60400: PPUSH
60401: LD_VAR 0 5
60405: PPUSH
60406: CALL_OW 3
60410: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60411: LD_ADDR_EXP 53
60415: PUSH
60416: LD_EXP 53
60420: PPUSH
60421: LD_VAR 0 1
60425: PPUSH
60426: CALL_OW 255
60430: PUSH
60431: LD_VAR 0 1
60435: PUSH
60436: LD_VAR 0 2
60440: PUSH
60441: LD_VAR 0 3
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: PPUSH
60452: CALL 54430 0 2
60456: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60457: CALL 60524 0 0
// exit ;
60461: POP
60462: POP
60463: GO 60519
// end ; end ;
60465: GO 60304
60467: POP
60468: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60469: LD_ADDR_EXP 53
60473: PUSH
60474: LD_EXP 53
60478: PPUSH
60479: LD_VAR 0 1
60483: PPUSH
60484: CALL_OW 255
60488: PUSH
60489: LD_VAR 0 1
60493: PUSH
60494: LD_VAR 0 2
60498: PUSH
60499: LD_VAR 0 3
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: PPUSH
60510: CALL 54430 0 2
60514: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60515: CALL 60524 0 0
// end ;
60519: LD_VAR 0 4
60523: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60524: LD_INT 0
60526: PPUSH
60527: PPUSH
60528: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60529: LD_STRING resetFactoryWaypoint();
60531: PPUSH
60532: CALL_OW 559
// if factoryWaypoints then
60536: LD_EXP 53
60540: IFFALSE 60661
// begin list := factoryWaypoints ;
60542: LD_ADDR_VAR 0 3
60546: PUSH
60547: LD_EXP 53
60551: ST_TO_ADDR
// for i := 1 to list do
60552: LD_ADDR_VAR 0 2
60556: PUSH
60557: DOUBLE
60558: LD_INT 1
60560: DEC
60561: ST_TO_ADDR
60562: LD_VAR 0 3
60566: PUSH
60567: FOR_TO
60568: IFFALSE 60659
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60570: LD_STRING setFactoryWaypointXY(
60572: PUSH
60573: LD_VAR 0 3
60577: PUSH
60578: LD_VAR 0 2
60582: ARRAY
60583: PUSH
60584: LD_INT 1
60586: ARRAY
60587: STR
60588: PUSH
60589: LD_STRING ,
60591: STR
60592: PUSH
60593: LD_VAR 0 3
60597: PUSH
60598: LD_VAR 0 2
60602: ARRAY
60603: PUSH
60604: LD_INT 2
60606: ARRAY
60607: STR
60608: PUSH
60609: LD_STRING ,
60611: STR
60612: PUSH
60613: LD_VAR 0 3
60617: PUSH
60618: LD_VAR 0 2
60622: ARRAY
60623: PUSH
60624: LD_INT 3
60626: ARRAY
60627: STR
60628: PUSH
60629: LD_STRING ,
60631: STR
60632: PUSH
60633: LD_VAR 0 3
60637: PUSH
60638: LD_VAR 0 2
60642: ARRAY
60643: PUSH
60644: LD_INT 4
60646: ARRAY
60647: STR
60648: PUSH
60649: LD_STRING )
60651: STR
60652: PPUSH
60653: CALL_OW 559
60657: GO 60567
60659: POP
60660: POP
// end ; end ;
60661: LD_VAR 0 1
60665: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60666: LD_INT 0
60668: PPUSH
// if HexInfo ( x , y ) = warehouse then
60669: LD_VAR 0 2
60673: PPUSH
60674: LD_VAR 0 3
60678: PPUSH
60679: CALL_OW 428
60683: PUSH
60684: LD_VAR 0 1
60688: EQUAL
60689: IFFALSE 60716
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60691: LD_ADDR_EXP 55
60695: PUSH
60696: LD_EXP 55
60700: PPUSH
60701: LD_VAR 0 1
60705: PPUSH
60706: LD_INT 0
60708: PPUSH
60709: CALL_OW 1
60713: ST_TO_ADDR
60714: GO 60767
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60716: LD_ADDR_EXP 55
60720: PUSH
60721: LD_EXP 55
60725: PPUSH
60726: LD_VAR 0 1
60730: PPUSH
60731: LD_VAR 0 1
60735: PPUSH
60736: CALL_OW 255
60740: PUSH
60741: LD_VAR 0 1
60745: PUSH
60746: LD_VAR 0 2
60750: PUSH
60751: LD_VAR 0 3
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: PPUSH
60762: CALL_OW 1
60766: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60767: CALL 60776 0 0
// end ;
60771: LD_VAR 0 4
60775: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60776: LD_INT 0
60778: PPUSH
60779: PPUSH
60780: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60781: LD_STRING resetWarehouseGatheringPoints();
60783: PPUSH
60784: CALL_OW 559
// if warehouseGatheringPoints then
60788: LD_EXP 55
60792: IFFALSE 60918
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60794: LD_ADDR_VAR 0 3
60798: PUSH
60799: LD_EXP 55
60803: PPUSH
60804: CALL 58198 0 1
60808: ST_TO_ADDR
// for i := 1 to list do
60809: LD_ADDR_VAR 0 2
60813: PUSH
60814: DOUBLE
60815: LD_INT 1
60817: DEC
60818: ST_TO_ADDR
60819: LD_VAR 0 3
60823: PUSH
60824: FOR_TO
60825: IFFALSE 60916
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60827: LD_STRING setWarehouseGatheringPointXY(
60829: PUSH
60830: LD_VAR 0 3
60834: PUSH
60835: LD_VAR 0 2
60839: ARRAY
60840: PUSH
60841: LD_INT 1
60843: ARRAY
60844: STR
60845: PUSH
60846: LD_STRING ,
60848: STR
60849: PUSH
60850: LD_VAR 0 3
60854: PUSH
60855: LD_VAR 0 2
60859: ARRAY
60860: PUSH
60861: LD_INT 2
60863: ARRAY
60864: STR
60865: PUSH
60866: LD_STRING ,
60868: STR
60869: PUSH
60870: LD_VAR 0 3
60874: PUSH
60875: LD_VAR 0 2
60879: ARRAY
60880: PUSH
60881: LD_INT 3
60883: ARRAY
60884: STR
60885: PUSH
60886: LD_STRING ,
60888: STR
60889: PUSH
60890: LD_VAR 0 3
60894: PUSH
60895: LD_VAR 0 2
60899: ARRAY
60900: PUSH
60901: LD_INT 4
60903: ARRAY
60904: STR
60905: PUSH
60906: LD_STRING )
60908: STR
60909: PPUSH
60910: CALL_OW 559
60914: GO 60824
60916: POP
60917: POP
// end ; end ;
60918: LD_VAR 0 1
60922: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
60923: LD_INT 0
60925: PPUSH
60926: PPUSH
// if not mpSidePositions then
60927: LD_EXP 5
60931: NOT
60932: IFFALSE 60936
// exit ;
60934: GO 61007
// result :=  ;
60936: LD_ADDR_VAR 0 1
60940: PUSH
60941: LD_STRING 
60943: ST_TO_ADDR
// for i := 1 to 8 do
60944: LD_ADDR_VAR 0 2
60948: PUSH
60949: DOUBLE
60950: LD_INT 1
60952: DEC
60953: ST_TO_ADDR
60954: LD_INT 8
60956: PUSH
60957: FOR_TO
60958: IFFALSE 60988
// begin result := result & mpSidePositions [ i ] & ; ;
60960: LD_ADDR_VAR 0 1
60964: PUSH
60965: LD_VAR 0 1
60969: PUSH
60970: LD_EXP 5
60974: PUSH
60975: LD_VAR 0 2
60979: ARRAY
60980: STR
60981: PUSH
60982: LD_STRING ;
60984: STR
60985: ST_TO_ADDR
// end ;
60986: GO 60957
60988: POP
60989: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
60990: LD_STRING setMultiplayerRealPosition("
60992: PUSH
60993: LD_VAR 0 1
60997: STR
60998: PUSH
60999: LD_STRING ");
61001: STR
61002: PPUSH
61003: CALL_OW 559
// end ;
61007: LD_VAR 0 1
61011: RET
